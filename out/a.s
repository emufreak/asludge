
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #117207,d0
       8:	       subi.l #117207,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c9d7 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #117207,d0
      40:	       subi.l #117207,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c9d7 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 85a0 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #117207,d0
      7e:	       subi.l #117207,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c9d7 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 14346 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1d188 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 1435e <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c9d8 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 14346 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1d188 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c9d8 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 14346 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1d188 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 183e0 <PutChar+0x4>
     35c:	|  |              |   jsr 1793a <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1d190 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1d190 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1d190 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1d190 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1d190 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1d190 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1d190 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 1840a <PutChar+0x2e>
     834:	|   jsr 1793a <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1d190 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 18426 <PutChar+0x4a>
     8a6:	|   jsr 1793a <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1d190 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1d190 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1d190 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1d190 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1d190 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1d190 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1d190 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1d190 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1d188 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1d190 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 14346 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1d190 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1d082 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1d082 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1d082 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1d082 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1d082 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1d148 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1d082 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1d082 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1d144 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1d082 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1d082 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 14ea <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1d082 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9ede <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1d082 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1d086 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1d08a <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 3120 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -48(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 1844e <PutChar+0x72>
     e1a:	          jsr 1793a <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1d09e <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 18467 <PutChar+0x8b>
     e30:	      |   jsr 1793a <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w 10c2 <CstBlankScreen+0x2b4>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1d098 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,40(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1d194 <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 64(sp),d0
     e5a:	|         sub.l 56(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,38(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 68(sp),d0
     e6c:	|         move.l 60(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,36(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 40(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 40(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 40(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 40(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 40(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 38(sp),d0
     eb0:	|         movea.l 40(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 40(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 40(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1d09e <CstBackDrop>,d0
     ed2:	|         move.l d0,48(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 56(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 60(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,48(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 36(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 38(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,34(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 38(sp),d0
     f10:	|         muls.w 36(sp),d0
     f14:	|         move.w d0,32(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 18495 <PutChar+0xb9>
     f1e:	|         jsr 1793a <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 44(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 48(sp),d0
     f30:	|  |  |   movea.l 40(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 40(sp),a0
     f3c:	|  |  |   move.w 34(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1d194 <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,48(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,44(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 44(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 184b5 <PutChar+0xd9>
     f68:	|         jsr 1793a <KPrintF>
     f6e:	|         addq.l #4,sp

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
     f70:	|         move.l 1d0b8 <CstCleanupQueueDrawBuffer>,28(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
     f78:	|         moveq #20,d0
     f7a:	|         move.l d0,24(sp)
     f7e:	|         clr.l 20(sp)
     f82:	|         move.l 1d188 <SysBase>,d0
     f88:	|         movea.l d0,a6
     f8a:	|         move.l 24(sp),d0
     f8e:	|         move.l 20(sp),d1
     f92:	|         jsr -684(a6)
     f96:	|         move.l d0,16(sp)
     f9a:	|         move.l 16(sp),d0
     f9e:	|         move.l d0,1d0b8 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
     fa4:	|         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
     faa:	|         move.l 28(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = x1;
     fb0:	|         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
     fb6:	|         move.l 56(sp),d0
     fba:	|         move.w d0,(a0)
  CstCleanupQueueDrawBuffer->y = y1;
     fbc:	|         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
     fc2:	|         move.l 60(sp),d0
     fc6:	|         move.w d0,2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
     fca:	|         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
     fd0:	|         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = width/16;
     fd4:	|         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
     fda:	|         move.w 38(sp),d0
     fde:	|         lsr.w #4,d0
     fe0:	|         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = height;
     fe4:	|         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
     fea:	|         move.w 36(sp),10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = x1/8;;
     ff0:	|         move.l 56(sp),d0
     ff4:	|     ,-- bpl.s ff8 <CstBlankScreen+0x1ea>
     ff6:	|     |   addq.l #7,d0
     ff8:	|     '-> asr.l #3,d0
     ffa:	|         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    1000:	|         move.l d0,d0
    1002:	|         move.w d0,12(a0)
  CstCleanupQueueDrawBuffer->starty = y1;
    1006:	|         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    100c:	|         move.l 60(sp),d0
    1010:	|         move.w d0,14(a0)

  next = CstCleanupQueueViewBuffer;
    1014:	|         move.l 1d0b4 <CstCleanupQueueViewBuffer>,28(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    101c:	|         moveq #20,d0
    101e:	|         move.l d0,12(sp)
    1022:	|         clr.l 8(sp)
    1026:	|         move.l 1d188 <SysBase>,d0
    102c:	|         movea.l d0,a6
    102e:	|         move.l 12(sp),d0
    1032:	|         move.l 8(sp),d1
    1036:	|         jsr -684(a6)
    103a:	|         move.l d0,4(sp)
    103e:	|         move.l 4(sp),d0
    1042:	|         move.l d0,1d0b4 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1048:	|         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    104e:	|         move.l 28(sp),16(a0)
  CstCleanupQueueViewBuffer->x = x1;
    1054:	|         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    105a:	|         move.l 56(sp),d0
    105e:	|         move.w d0,(a0)
  CstCleanupQueueViewBuffer->y = y1;
    1060:	|         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    1066:	|         move.l 60(sp),d0
    106a:	|         move.w d0,2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    106e:	|         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    1074:	|         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = width/16;
    1078:	|         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    107e:	|         move.w 38(sp),d0
    1082:	|         lsr.w #4,d0
    1084:	|         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = height;
    1088:	|         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    108e:	|         move.w 36(sp),10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = x1/8;
    1094:	|         move.l 56(sp),d0
    1098:	|     ,-- bpl.s 109c <CstBlankScreen+0x28e>
    109a:	|     |   addq.l #7,d0
    109c:	|     '-> asr.l #3,d0
    109e:	|         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    10a4:	|         move.l d0,d0
    10a6:	|         move.w d0,12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    10aa:	|         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    10b0:	|         clr.w 14(a0)

  KPrintF("CstBlankScreen: end\n");
    10b4:	|         pea 184d5 <PutChar+0xf9>
    10ba:	|         jsr 1793a <KPrintF>
    10c0:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
    10c2:	'-------> movea.l (sp)+,a6
    10c4:	          lea 48(sp),sp
    10c8:	          rts

000010ca <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
    10ca:	       lea -52(sp),sp
    10ce:	       move.l a6,-(sp)
    10d0:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    10d2:	       move.l #400,32(sp)
    10da:	       moveq #2,d0
    10dc:	       move.l d0,28(sp)
    10e0:	       move.l 1d188 <SysBase>,d0
    10e6:	       movea.l d0,a6
    10e8:	       move.l 32(sp),d0
    10ec:	       move.l 28(sp),d1
    10f0:	       jsr -198(a6)
    10f4:	       move.l d0,24(sp)
    10f8:	       move.l 24(sp),d0
    10fc:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1100:	   ,-- bne.s 112a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1102:	   |   pea 28 <_start+0x28>
    1106:	   |   pea 184ea <PutChar+0x10e>
    110c:	   |   jsr 1793a <KPrintF>
    1112:	   |   addq.l #8,sp
    Exit(1);
    1114:	   |   moveq #1,d1
    1116:	   |   move.l d1,16(sp)
    111a:	   |   move.l 1d190 <DOSBase>,d0
    1120:	   |   movea.l d0,a6
    1122:	   |   move.l 16(sp),d1
    1126:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    112a:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1130:	       move.l 56(sp),1d0cc <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1138:	       move.l #117210,52(sp)
  for(int i=0; i<16;i++)
    1140:	       clr.l 48(sp)
    1144:	   ,-- bra.s 116a <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1146:	,--|-> move.l 52(sp),d1
    114a:	|  |   move.l d1,d2
    114c:	|  |   addq.l #4,d2
    114e:	|  |   move.l d2,52(sp)
    1152:	|  |   move.l 56(sp),d0
    1156:	|  |   move.l d0,d2
    1158:	|  |   addq.l #4,d2
    115a:	|  |   move.l d2,56(sp)
    115e:	|  |   movea.l d1,a0
    1160:	|  |   move.l (a0),d1
    1162:	|  |   movea.l d0,a0
    1164:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1166:	|  |   addq.l #1,48(sp)
    116a:	|  '-> moveq #15,d0
    116c:	|      cmp.l 48(sp),d0
    1170:	'----- bge.s 1146 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1172:	       move.l #117274,52(sp)

  for(int i=0; i<12;i++)
    117a:	       clr.l 44(sp)
    117e:	   ,-- bra.s 11a4 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1180:	,--|-> move.l 52(sp),d1
    1184:	|  |   move.l d1,d2
    1186:	|  |   addq.l #4,d2
    1188:	|  |   move.l d2,52(sp)
    118c:	|  |   move.l 56(sp),d0
    1190:	|  |   move.l d0,d2
    1192:	|  |   addq.l #4,d2
    1194:	|  |   move.l d2,56(sp)
    1198:	|  |   movea.l d1,a0
    119a:	|  |   move.l (a0),d1
    119c:	|  |   movea.l d0,a0
    119e:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    11a0:	|  |   addq.l #1,44(sp)
    11a4:	|  '-> moveq #11,d0
    11a6:	|      cmp.l 44(sp),d0
    11aa:	'----- bge.s 1180 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    11ac:	       move.l #117322,52(sp)
  for(int i=0; i<10;i++)
    11b4:	       clr.l 40(sp)
    11b8:	   ,-- bra.s 11de <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    11ba:	,--|-> move.l 52(sp),d1
    11be:	|  |   move.l d1,d2
    11c0:	|  |   addq.l #4,d2
    11c2:	|  |   move.l d2,52(sp)
    11c6:	|  |   move.l 56(sp),d0
    11ca:	|  |   move.l d0,d2
    11cc:	|  |   addq.l #4,d2
    11ce:	|  |   move.l d2,56(sp)
    11d2:	|  |   movea.l d1,a0
    11d4:	|  |   move.l (a0),d1
    11d6:	|  |   movea.l d0,a0
    11d8:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    11da:	|  |   addq.l #1,40(sp)
    11de:	|  '-> moveq #9,d0
    11e0:	|      cmp.l 40(sp),d0
    11e4:	'----- bge.s 11ba <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    11e6:	       move.l #117362,52(sp)
  CstClColor = (UWORD *) cl;
    11ee:	       move.l 56(sp),1d0c4 <CstClColor>
  for(int i=0; i<32;i++)
    11f6:	       clr.l 36(sp)
    11fa:	   ,-- bra.s 1220 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    11fc:	,--|-> move.l 52(sp),d1
    1200:	|  |   move.l d1,d2
    1202:	|  |   addq.l #4,d2
    1204:	|  |   move.l d2,52(sp)
    1208:	|  |   move.l 56(sp),d0
    120c:	|  |   move.l d0,d2
    120e:	|  |   addq.l #4,d2
    1210:	|  |   move.l d2,56(sp)
    1214:	|  |   movea.l d1,a0
    1216:	|  |   move.l (a0),d1
    1218:	|  |   movea.l d0,a0
    121a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    121c:	|  |   addq.l #1,36(sp)
    1220:	|  '-> moveq #31,d0
    1222:	|      cmp.l 36(sp),d0
    1226:	'----- bge.s 11fc <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1228:	       moveq #40,d1
    122a:	       cmp.l 64(sp),d1
    122e:	   ,-- bge.s 128c <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1230:	   |   moveq #-40,d2
    1232:	   |   add.l 64(sp),d2
    1236:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    123a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1240:	   |   move.l 8(sp),d0
    1244:	   |   move.l d0,d1
    1246:	   |   addq.l #2,d1
    1248:	   |   move.l d1,8(sp)
    124c:	   |   movea.l d0,a0
    124e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1252:	   |   move.l 8(sp),d0
    1256:	   |   move.l d0,d1
    1258:	   |   addq.l #2,d1
    125a:	   |   move.l d1,8(sp)
    125e:	   |   move.l 12(sp),d1
    1262:	   |   movea.l d0,a0
    1264:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1266:	   |   move.l 8(sp),d0
    126a:	   |   move.l d0,d1
    126c:	   |   addq.l #2,d1
    126e:	   |   move.l d1,8(sp)
    1272:	   |   movea.l d0,a0
    1274:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    1278:	   |   move.l 8(sp),d0
    127c:	   |   move.l d0,d1
    127e:	   |   addq.l #2,d1
    1280:	   |   move.l d1,8(sp)
    1284:	   |   move.l 12(sp),d1
    1288:	   |   movea.l d0,a0
    128a:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    128c:	   '-> move.l 56(sp),d0
    1290:	       move.l d0,d1
    1292:	       addq.l #4,d1
    1294:	       move.l d1,56(sp)
    1298:	       moveq #-2,d2
    129a:	       movea.l d0,a0
    129c:	       move.l d2,(a0)
  return (UWORD *) retval;  
    129e:	       move.l 20(sp),d0
}
    12a2:	       move.l (sp)+,d2
    12a4:	       movea.l (sp)+,a6
    12a6:	       lea 52(sp),sp
    12aa:	       rts

000012ac <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    12ac:	                lea -40(sp),sp
    12b0:	                move.l a6,-(sp)
    12b2:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    12b4:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    12bc:	                pea 18525 <PutChar+0x149>
    12c2:	                jsr 1793a <KPrintF>
    12c8:	                addq.l #4,sp

  UWORD *colorpos = CstPalette;
    12ca:	                move.l 1d0c8 <CstPalette>,44(sp)
  UWORD *tmp = CstClColor;
    12d2:	                move.l 1d0c4 <CstClColor>,40(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    12da:	                clr.l 36(sp)
    12de:	            ,-- bra.s 1310 <CstDisplayBackDrop+0x64>
    *tmp++;
    12e0:	         ,--|-> move.l 40(sp),d0
    12e4:	         |  |   move.l d0,d1
    12e6:	         |  |   addq.l #2,d1
    12e8:	         |  |   move.l d1,40(sp)
    *tmp++ = *colorpos++;
    12ec:	         |  |   move.l 44(sp),d1
    12f0:	         |  |   move.l d1,d2
    12f2:	         |  |   addq.l #2,d2
    12f4:	         |  |   move.l d2,44(sp)
    12f8:	         |  |   move.l 40(sp),d0
    12fc:	         |  |   move.l d0,d2
    12fe:	         |  |   addq.l #2,d2
    1300:	         |  |   move.l d2,40(sp)
    1304:	         |  |   movea.l d1,a0
    1306:	         |  |   move.w (a0),d1
    1308:	         |  |   movea.l d0,a0
    130a:	         |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    130c:	         |  |   addq.l #1,36(sp)
    1310:	         |  '-> moveq #31,d0
    1312:	         |      cmp.l 36(sp),d0
    1316:	         '----- bge.s 12e0 <CstDisplayBackDrop+0x34>
  }

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    1318:	                move.l 1d0bc <CstBackDropBufferApplyStart>,d0
    131e:	                move.l d0,1d0c0 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    1324:	                move.l 1d0bc <CstBackDropBufferApplyStart>,32(sp)
  if(!*cursor || !CstDrawBuffer) {
    132c:	                movea.l 32(sp),a0
    1330:	                move.w (a0),d0
    1332:	,-------------- beq.w 14de <CstDisplayBackDrop+0x232>
    1336:	|               move.l 1d0b0 <CstDrawBuffer>,d0
    133c:	+-------------- beq.w 14de <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    1340:	|               move.l 1d194 <GfxBase>,d0
    1346:	|               movea.l d0,a6
    1348:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    134c:	|               movea.l 16(sp),a0
    1350:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1356:	|               movea.l 16(sp),a0
    135a:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1360:	|               movea.l 16(sp),a0
    1364:	|               move.w #2544,64(a0)
  
  while(*cursor)
    136a:	|     ,-------- bra.w 14d2 <CstDisplayBackDrop+0x226>
  {    
    UWORD width = *cursor++;
    136e:	|  ,--|-------> move.l 32(sp),d0
    1372:	|  |  |         move.l d0,d1
    1374:	|  |  |         addq.l #2,d1
    1376:	|  |  |         move.l d1,32(sp)
    137a:	|  |  |         movea.l d0,a0
    137c:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1380:	|  |  |         move.l 32(sp),d0
    1384:	|  |  |         move.l d0,d1
    1386:	|  |  |         addq.l #2,d1
    1388:	|  |  |         move.l d1,32(sp)
    138c:	|  |  |         movea.l d0,a0
    138e:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1392:	|  |  |         move.l 32(sp),d0
    1396:	|  |  |         move.l d0,d1
    1398:	|  |  |         addq.l #2,d1
    139a:	|  |  |         move.l d1,32(sp)
    139e:	|  |  |         movea.l d0,a0
    13a0:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    13a4:	|  |  |         move.l 32(sp),d0
    13a8:	|  |  |         move.l d0,d1
    13aa:	|  |  |         addq.l #2,d1
    13ac:	|  |  |         move.l d1,32(sp)
    13b0:	|  |  |         movea.l d0,a0
    13b2:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    13b6:	|  |  |         move.l 1d0dc <winWidth>,d0
    13bc:	|  |  |         lsr.l #3,d0
    13be:	|  |  |         move.l d0,d1
    13c0:	|  |  |         move.w 14(sp),d0
    13c4:	|  |  |         add.w d0,d0
    13c6:	|  |  |         sub.w d0,d1
    13c8:	|  |  |         movea.l 16(sp),a0
    13cc:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    13d0:	|  |  |         move.l 1d0dc <winWidth>,d0
    13d6:	|  |  |         lsr.l #3,d0
    13d8:	|  |  |         move.l d0,d1
    13da:	|  |  |         move.w 14(sp),d0
    13de:	|  |  |         add.w d0,d0
    13e0:	|  |  |         sub.w d0,d1
    13e2:	|  |  |         movea.l 16(sp),a0
    13e6:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    13ea:	|  |  |         moveq #0,d0
    13ec:	|  |  |         move.w 8(sp),d0
    13f0:	|  |  |         move.l 1d0dc <winWidth>,d1
    13f6:	|  |  |         move.l d1,-(sp)
    13f8:	|  |  |         move.l d0,-(sp)
    13fa:	|  |  |         jsr 182c6 <__mulsi3>
    1400:	|  |  |         addq.l #8,sp
    1402:	|  |  |         move.l d0,d1
    1404:	|  |  |         lsr.l #3,d1
    1406:	|  |  |         move.l 1d09e <CstBackDrop>,d0
    140c:	|  |  |         add.l d0,d1
    140e:	|  |  |         moveq #0,d0
    1410:	|  |  |         move.w 10(sp),d0
    1414:	|  |  |         move.l d1,d2
    1416:	|  |  |         add.l d0,d2
    1418:	|  |  |         move.l d2,28(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    141c:	|  |  |         moveq #0,d0
    141e:	|  |  |         move.w 8(sp),d0
    1422:	|  |  |         move.l 1d0dc <winWidth>,d1
    1428:	|  |  |         move.l d1,-(sp)
    142a:	|  |  |         move.l d0,-(sp)
    142c:	|  |  |         jsr 182c6 <__mulsi3>
    1432:	|  |  |         addq.l #8,sp
    1434:	|  |  |         move.l d0,d1
    1436:	|  |  |         lsr.l #3,d1
    1438:	|  |  |         move.l 1d0b0 <CstDrawBuffer>,d0
    143e:	|  |  |         add.l d0,d1
    1440:	|  |  |         moveq #0,d0
    1442:	|  |  |         move.w 10(sp),d0
    1446:	|  |  |         move.l d1,d2
    1448:	|  |  |         add.l d0,d2
    144a:	|  |  |         move.l d2,24(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    144e:	|  |  |         clr.l 20(sp)
    1452:	|  |  |     ,-- bra.s 14ca <CstDisplayBackDrop+0x21e>
    {
      custom->bltapt = (APTR) bltapt;
    1454:	|  |  |  ,--|-> move.l 28(sp),d0
    1458:	|  |  |  |  |   movea.l 16(sp),a0
    145c:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1460:	|  |  |  |  |   move.l 24(sp),d0
    1464:	|  |  |  |  |   movea.l 16(sp),a0
    1468:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    146c:	|  |  |  |  |   move.w 12(sp),d0
    1470:	|  |  |  |  |   lsl.w #6,d0
    1472:	|  |  |  |  |   add.w 14(sp),d0
    1476:	|  |  |  |  |   movea.l 16(sp),a0
    147a:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    147e:	|  |  |  |  |   move.l 1d0dc <winWidth>,d0
    1484:	|  |  |  |  |   lsr.l #3,d0
    1486:	|  |  |  |  |   move.l 1d0e0 <winHeight>,d1
    148c:	|  |  |  |  |   move.l d1,-(sp)
    148e:	|  |  |  |  |   move.l d0,-(sp)
    1490:	|  |  |  |  |   jsr 182c6 <__mulsi3>
    1496:	|  |  |  |  |   addq.l #8,sp
    1498:	|  |  |  |  |   add.l d0,28(sp)
      bltdpt += winWidth/8*winHeight;
    149c:	|  |  |  |  |   move.l 1d0dc <winWidth>,d0
    14a2:	|  |  |  |  |   lsr.l #3,d0
    14a4:	|  |  |  |  |   move.l 1d0e0 <winHeight>,d1
    14aa:	|  |  |  |  |   move.l d1,-(sp)
    14ac:	|  |  |  |  |   move.l d0,-(sp)
    14ae:	|  |  |  |  |   jsr 182c6 <__mulsi3>
    14b4:	|  |  |  |  |   addq.l #8,sp
    14b6:	|  |  |  |  |   add.l d0,24(sp)
      WaitBlit();
    14ba:	|  |  |  |  |   move.l 1d194 <GfxBase>,d0
    14c0:	|  |  |  |  |   movea.l d0,a6
    14c2:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    14c6:	|  |  |  |  |   addq.l #1,20(sp)
    14ca:	|  |  |  |  '-> moveq #4,d0
    14cc:	|  |  |  |      cmp.l 20(sp),d0
    14d0:	|  |  |  '----- bge.s 1454 <CstDisplayBackDrop+0x1a8>
  while(*cursor)
    14d2:	|  |  '-------> movea.l 32(sp),a0
    14d6:	|  |            move.w (a0),d0
    14d8:	|  '----------- bne.w 136e <CstDisplayBackDrop+0xc2>
    14dc:	|           ,-- bra.s 14e0 <CstDisplayBackDrop+0x234>
    return;
    14de:	'-----------|-> nop
    }  
  }

  

}
    14e0:	            '-> move.l (sp)+,d2
    14e2:	                movea.l (sp)+,a6
    14e4:	                lea 40(sp),sp
    14e8:	                rts

000014ea <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    14ea:	lea -20(sp),sp
    14ee:	movea.l 24(sp),a0
    14f2:	move.l 28(sp),d1
    14f6:	move.l 32(sp),d0
    14fa:	movea.w a0,a0
    14fc:	move.w a0,4(sp)
    1500:	move.w d1,d1
    1502:	move.w d1,2(sp)
    1506:	move.w d0,d0
    1508:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    150a:	move.w 2(sp),d0
    150e:	movea.l 36(sp),a0
    1512:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1514:	move.w 4(sp),d0
    1518:	lsr.w #1,d0
    151a:	movea.l 36(sp),a0
    151e:	addq.l #1,a0
    1520:	move.l d0,d0
    1522:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1524:	move.w 2(sp),d1
    1528:	move.w (sp),d0
    152a:	movea.l 36(sp),a0
    152e:	addq.l #2,a0
    1530:	add.b d1,d0
    1532:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1534:	move.w 4(sp),d0
    1538:	andi.w #1,d0
    153c:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1540:	move.w 2(sp),d0
    1544:	add.w (sp),d0
    1546:	move.w d0,d0
    1548:	andi.l #65535,d0
    154e:	asr.l #7,d0
    1550:	move.l d0,d0
    1552:	move.w d0,d1
    1554:	andi.w #2,d1
    1558:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    155c:	moveq #0,d0
    155e:	move.w 2(sp),d0
    1562:	asr.l #6,d0
    1564:	move.l d0,d0
    1566:	move.w d0,d1
    1568:	andi.w #4,d1
    156c:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1570:	move.w 18(sp),d1
    1574:	move.w 16(sp),d0
    1578:	add.b d0,d1
    157a:	move.w 14(sp),d0
    157e:	movea.l 36(sp),a0
    1582:	addq.l #3,a0
    1584:	add.b d1,d0
    1586:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    1588:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    158e:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1594:	move.l 10(sp),d0
    1598:	clr.w d0
    159a:	swap d0
    159c:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    15a0:	move.l 1d0cc <CstClCursor>,d0
    15a6:	movea.l d0,a0
    15a8:	addq.l #2,a0
    15aa:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    15ae:	move.l 1d0cc <CstClCursor>,d0
    15b4:	movea.l d0,a0
    15b6:	addq.l #6,a0
    15b8:	move.w 8(sp),(a0)

}
    15bc:	nop
    15be:	lea 20(sp),sp
    15c2:	rts

000015c4 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    15c4:	    move.w 1d0aa <CstApplyBackDropCounter>,d0
    15ca:	,-- beq.s 15e0 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    15cc:	|   jsr 12ac <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    15d2:	|   move.w 1d0aa <CstApplyBackDropCounter>,d0
    15d8:	|   subq.w #1,d0
    15da:	|   move.w d0,1d0aa <CstApplyBackDropCounter>
  }    
}
    15e0:	'-> nop
    15e2:	    rts

000015e4 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    15e4:	                                                             subq.l #8,sp
    15e6:	                                                             movem.l d2-d7/a2-a6,-(sp)
    15ea:	                                                             movea.l 56(sp),a3
    15ee:	                                                             movea.l 60(sp),a2
    15f2:	                                                             move.l 64(sp),d2
    15f6:	                                                             move.l 68(sp),d7
    15fa:	                                                             movea.w d2,a4
    15fc:	                                                             move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1600:	                                                             clr.l -(sp)
    1602:	                                                             pea 1 <_start+0x1>
    1606:	                                                             movea.w 6(a3),a0
    160a:	                                                             move.l a0,-(sp)
    160c:	                                                             movea.w 2(a3),a0
    1610:	                                                             move.l a0,-(sp)
    1612:	                                                             pea 18541 <PutChar+0x165>
    1618:	                                                             move.l 1d0d0 <CstZBufferResult>,-(sp)
    161e:	                                                             lea 17a22 <debug_register_bitmap>,a5
    1624:	                                                             jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    1626:	                                                             clr.l -(sp)
    1628:	                                                             pea 1 <_start+0x1>
    162c:	                                                             movea.w 6(a3),a0
    1630:	                                                             move.l a0,-(sp)
    1632:	                                                             move.w 2(a3),d0
    1636:	                                                             addi.w #16,d0
    163a:	                                                             movea.w d0,a0
    163c:	                                                             move.l a0,-(sp)
    163e:	                                                             pea 1854c <PutChar+0x170>
    1644:	                                                             move.l 1d0d4 <CstZBufferWork>,-(sp)
    164a:	                                                             jsr (a5)
  #endif    

  while(zbuffer) 
    164c:	                                                             lea 48(sp),sp
    1650:	                                                             cmpa.w #0,a2
    1654:	,----------------------------------------------------------- beq.w 1af0 <CstDrawZBuffer+0x50c>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1658:	|                                                            move.w d2,48(sp)
    165c:	|                                                            move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    165e:	|                                                            movea.l 4(a3),a5
  WORD zbufferset = 0;
    1662:	|                                                            clr.w d0
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1664:	|                       ,----------------------------------> move.w a5,d3
    1666:	|                       |                                    add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    1668:	|                       |                                    andi.l #65535,d3
    166e:	|                       |                                    cmp.l 16(a2),d3
    1672:	|                       |  ,-------------------------------- bge.w 180c <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    1676:	|                       |  |                                 move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    167a:	|                       |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    167e:	|                       |  |                                 move.w d6,d0
    1680:	|                       |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1684:	|                       |  |                                 move.w 6(a2),d4
    1688:	|                       |  |                                 add.w d5,d4
    {    
      zbufferset = 1;

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    168a:	|                       |  |                                 cmp.w a4,d6
    168c:	|                    ,--|--|-------------------------------- bge.w 1984 <CstDrawZBuffer+0x3a0>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    1690:	|                    |  |  |                                 cmp.w a4,d0
    1692:	|        ,-----------|--|--|-------------------------------- ble.w 180a <CstDrawZBuffer+0x226>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1696:	|        |           |  |  |                                 move.w 50(sp),d0
    169a:	|        |           |  |  |                                 cmp.w d0,d5
    169c:	|        |     ,-----|--|--|-------------------------------- blt.w 1ad0 <CstDrawZBuffer+0x4ec>
    16a0:	|        |     |     |  |  |                                 movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    16a2:	|        |     |     |  |  |                                 cmpa.l d3,a0
    16a4:	|        +-----|-----|--|--|-------------------------------- bge.w 180a <CstDrawZBuffer+0x226>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    16a8:	|        |     |     |  |  |                                 move.w 48(sp),d0
    16ac:	|        |     |     |  |  |                                 sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    16ae:	|        |     |     |  |  |                                 move.w d0,d6
    16b0:	|        |     |     |  |  |                                 andi.w #15,d6
    16b4:	|        |     |     |  |  |                                 movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    16b6:	|        |     |     |  |  |                                 tst.l d2
    16b8:	|        |  ,--|-----|--|--|-------------------------------- blt.w 182c <CstDrawZBuffer+0x248>
    16bc:	|        |  |  |  ,--|--|--|-------------------------------> asr.l #4,d2
    16be:	|        |  |  |  |  |  |  |                                 add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    16c0:	|        |  |  |  |  |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2b4e>
          custom->bltalwm = 0xffff;                      
    16c8:	|        |  |  |  |  |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2b50>
          custom->bltcon1 = 0;          
    16d0:	|        |  |  |  |  |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2b4c>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    16d8:	|        |  |  |  |  |  |  |                                 lea 1d194 <GfxBase>,a0
    16de:	|        |  |  |  |  |  |  |                                 movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    16e0:	|        |  |  |  |  |  |  |                                 lsr.w #4,d0
    16e2:	|        |  |  |  |  |  |  |                                 move.w d0,d6
    16e4:	|        |  |  |  |  |  |  |                                 add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    16e6:	|        |  |  |  |  |  |  |                                 andi.l #65535,d6
    16ec:	|        |  |  |  |  |  |  |                                 add.l 20(a2),d6
          if (xdiffrest) {
    16f0:	|        |  |  |  |  |  |  |                                 clr.w d0
    16f2:	|        |  |  |  |  |  |  |                                 cmp.w a5,d0
    16f4:	|        |  |  |  |  |  |  |           ,-------------------- beq.w 186c <CstDrawZBuffer+0x288>
            bytewidth += 2; 
    16f8:	|        |  |  |  |  |  |  |           |     ,-------------> addq.w #2,d2
            WaitBlit();   
    16fa:	|        |  |  |  |  |  |  |           |     |               jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    16fe:	|        |  |  |  |  |  |  |           |     |               move.l 1d0d4 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    1708:	|        |  |  |  |  |  |  |           |     |               move.w a5,d0
    170a:	|        |  |  |  |  |  |  |           |     |               moveq #12,d1
    170c:	|        |  |  |  |  |  |  |           |     |               lsl.w d1,d0
    170e:	|        |  |  |  |  |  |  |           |     |               move.w #2544,d1
    1712:	|        |  |  |  |  |  |  |           |     |               sub.w d0,d1
    1714:	|        |  |  |  |  |  |  |           |     |               move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2b4a>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    171a:	|        |  |  |  |  |  |  |           |     |               move.l (a2),d0
    171c:	|        |  |  |  |  |  |  |           |     |               move.l d0,d1
    171e:	|  ,-----|--|--|--|--|--|--|-----------|-----|-------------- bmi.w 1b8a <CstDrawZBuffer+0x5a6>
    1722:	|  |     |  |  |  |  |  |  |           |     |               asr.l #3,d1
    1724:	|  |     |  |  |  |  |  |  |           |     |               sub.w d2,d1
    1726:	|  |     |  |  |  |  |  |  |           |     |               move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2b6e>
            custom->bltdmod = 0;                                                            
    172c:	|  |     |  |  |  |  |  |  |           |     |               move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2b70>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1734:	|  |  ,--|--|--|--|--|--|--|-----------|-----|-------------> move.w d7,d1
    1736:	|  |  |  |  |  |  |  |  |  |           |     |               sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1738:	|  |  |  |  |  |  |  |  |  |           |     |               movea.w d4,a0
    173a:	|  |  |  |  |  |  |  |  |  |           |     |               cmpa.l d3,a0
    173c:	|  |  |  |  |  |  |  |  |  |           |  ,--|-------------- ble.w 18ac <CstDrawZBuffer+0x2c8>
          height = sprite->height;
    1740:	|  |  |  |  |  |  |  |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1744:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.l d0,-(sp)
    1746:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.w d1,-(sp)
    1748:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      clr.w -(sp)
    174a:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      jsr 182c6 <__mulsi3>
    1750:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      addq.l #8,sp
    1752:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      tst.l d0
    1754:	|  |  |  |  |  |  |  |  |  |           |  |  |  ,-----|----- blt.w 18c2 <CstDrawZBuffer+0x2de>
    1758:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    175a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.l d6,d0
    175c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
        UWORD bltsize =  height*64+bytewidth/2;          
    1762:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    1764:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1766:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.w d2,d4
    1768:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
       
        WaitBlit();
    176e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lea 1d194 <GfxBase>,a0
    1774:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    1776:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    177a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2b4e>
        custom->bltalwm = 0xffff;
    1782:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2b50>
        custom->bltamod = 2;
    178a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2b6e>
        custom->bltbmod = 0;
    1792:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2b6c>
        custom->bltdmod = 0;
    179a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2b70>
        custom->bltcon0 = 0xd0c; //Copy A to D
    17a2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2b4a>
        custom->bltcon1 = 0;        
    17aa:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2b4c>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    17b2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l 1d0d4 <CstZBufferWork>,d0
    17b8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   addq.l #2,d0
    17ba:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    17c0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l (a3),d2
    17c2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l 4(a3),a5
    17c6:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d2,d0
    17c8:	|  |  |  |  |  |  |  |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 194c <CstDrawZBuffer+0x368>
    17cc:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    17ce:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l a5,-(sp)
    17d0:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    17d2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   jsr 182c6 <__mulsi3>
    17d8:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    17da:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    17dc:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    17de:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    17e0:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    17e2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    17e6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2b56>
        custom->bltdpt = (APTR) CstZBufferResult;
    17ec:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l 1d0d0 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    17f6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.w a5,d1
    17f8:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    17fa:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    17fc:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 193a <CstDrawZBuffer+0x356>
    1800:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    1802:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    1804:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
      zbufferset = 1;
    180a:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d0

      }
    }
    zbuffer = zbuffer->nextPanel;
    180c:	|  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    1810:	|  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1814:	|  |  |  |  |  |  |  |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 1664 <CstDrawZBuffer+0x80>
  }
  
  if(zbufferset == 0)
    1818:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.w d0
    181a:	+--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- beq.w 1af0 <CstDrawZBuffer+0x50c>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    181e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 1d0d0 <CstZBufferResult>,d0

}
    1824:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1828:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    182a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    182c:	|  |  |  |  >--|--|--|--------|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    182e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    1830:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    1832:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    1834:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2b4e>
          custom->bltalwm = 0xffff;                      
    183c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2b50>
          custom->bltcon1 = 0;          
    1844:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2b4c>
            WaitBlit();   
    184c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 1d194 <GfxBase>,a0
    1852:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1854:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    1856:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    1858:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    185a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    1860:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    1864:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   clr.w d0
    1866:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    1868:	|  |  |  |  |  |  |  |        |  |  |  |  |  '--|--|--|--|-- bne.w 16f8 <CstDrawZBuffer+0x114>
            WaitBlit();         
    186c:	|  |  |  |  |  |  |  |        |  |  |  '--|-----|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    1870:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l 1d0d4 <CstZBufferWork>,d0
    1876:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   addq.l #2,d0
    1878:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
            custom->bltcon0 = 4096 + 0x9f0;              
    187e:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2b4a>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1886:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l (a2),d0
    1888:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,d1
    188a:	|  |  |  |  |  |  |  |  ,-----|--|--|-----|-----|--|--|--|-- bmi.w 1ba2 <CstDrawZBuffer+0x5be>
    188e:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   asr.l #3,d1
    1890:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   sub.w d2,d1
    1892:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2b6e>
            custom->bltdmod = 2;                                                            
    1898:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2b70>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    18a0:	|  |  |  |  |  |  |  |  |  ,--|--|--|-----|-----|--|--|--|-> move.w d7,d1
    18a2:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    18a4:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   movea.w d4,a0
    18a6:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   cmpa.l d3,a0
    18a8:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  '--|-- bgt.w 1740 <CstDrawZBuffer+0x15c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    18ac:	|  |  |  |  |  |  |  |  |  |  |  |  |     '-----|--|-----|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    18ae:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    18b0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    18b2:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    18b4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr 182c6 <__mulsi3>
    18ba:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    18bc:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    18be:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 1758 <CstDrawZBuffer+0x174>
    18c2:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    18c4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    18c6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l d6,d0
    18c8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
        UWORD bltsize =  height*64+bytewidth/2;          
    18ce:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    18d0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    18d2:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    18d4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
        WaitBlit();
    18da:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1d194 <GfxBase>,a0
    18e0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    18e2:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    18e6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2b4e>
        custom->bltalwm = 0xffff;
    18ee:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2b50>
        custom->bltamod = 2;
    18f6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2b6e>
        custom->bltbmod = 0;
    18fe:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2b6c>
        custom->bltdmod = 0;
    1906:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2b70>
        custom->bltcon0 = 0xd0c; //Copy A to D
    190e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2b4a>
        custom->bltcon1 = 0;        
    1916:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2b4c>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    191e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 1d0d4 <CstZBufferWork>,d0
    1924:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         addq.l #2,d0
    1926:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    192c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    192e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l 4(a3),a5
    1932:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    1934:	|  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 17cc <CstDrawZBuffer+0x1e8>
    1938:	|  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 194c <CstDrawZBuffer+0x368>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    193a:	|  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    193c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    193e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    1940:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    1942:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
    1948:	|  |  |  +--|--|--|--|--|--|--|--|--|----------------------- bra.w 180a <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    194c:	|  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    194e:	|  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    1950:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l a5,-(sp)
    1952:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    1954:	|  |  |  |  |  |  |  |  |  |  |     |                        jsr 182c6 <__mulsi3>
    195a:	|  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    195c:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    195e:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1960:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1962:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1964:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    1968:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2b56>
        custom->bltdpt = (APTR) CstZBufferResult;
    196e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l 1d0d0 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1978:	|  |  |  |  |  |  |  |  |  |  |     |                        move.w a5,d1
    197a:	|  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    197c:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    197e:	|  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 1800 <CstDrawZBuffer+0x21c>
    1982:	|  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 193a <CstDrawZBuffer+0x356>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1984:	|  |  |  |  |  |  |  '--|--|-------------------------------> move.w 48(sp),d1
    1988:	|  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    198a:	|  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    1990:	|  |  |  |  |  |  |     |  |                                 movea.l d1,a6
    1992:	|  |  |  |  |  |  |     |  |                                 movea.w d6,a1
    1994:	|  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    1996:	|  |  |  +--|--|--|-----|--|-------------------------------- bge.w 180a <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    199a:	|  |  |  |  |  |  |     |  |                                 move.w 50(sp),d1
    199e:	|  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    19a0:	|  |  |  |  |  |  |     |  |           ,-------------------- bge.w 1aac <CstDrawZBuffer+0x4c8>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19a4:	|  |  |  |  |  |  |     |  |           |                     cmp.w 50(sp),d4
    19a8:	|  |  |  +--|--|--|-----|--|-----------|-------------------- ble.w 180a <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    19ac:	|  |  |  |  |  |  |     |  |           |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    19b0:	|  |  |  |  |  |  |     |  |           |                     move.w d6,d1
    19b2:	|  |  |  |  |  |  |     |  |           |                     lsr.w #4,d1
    19b4:	|  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    19b6:	|  |  |  |  |  |  |     |  |           |                     andi.w #15,d6
    19ba:	|  |  |  |  |  |  |     |  |           |                     move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    19be:	|  |  |  |  |  |  |     |  |           |                     tst.l d2
    19c0:	|  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 1a4a <CstDrawZBuffer+0x466>
    19c4:	|  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    19c6:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    19c8:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    19ca:	|  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    19cc:	|  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l a0,a6
    19ce:	|  |  |  |  |  |  |     |  |        |  |  |  ,-------------- bge.w 1a5c <CstDrawZBuffer+0x478>
            WaitBlit();  
    19d2:	|  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1d194 <GfxBase>,a0
    19d8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    19da:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    19de:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2b4e>
            custom->bltalwm = 0xffff;          
    19e6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2b50>
            custom->bltdpt = CstZBufferWork;        
    19ee:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 1d0d4 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
            custom->bltcon1 = 0;               
    19f8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2b4c>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a00:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a04:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    1a06:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    1a08:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.s 1a74 <CstDrawZBuffer+0x490>
    1a0a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    1a0c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a6
    1a0e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    1a10:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      tst.w 46(sp)
    1a14:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.s 1a82 <CstDrawZBuffer+0x49e>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    1a16:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w 46(sp),d6
    1a1a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    1a1c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d6
    1a1e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addi.w #2544,d6
    1a22:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2b4a>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a28:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2b6e>
              custom->bltdmod = 0;                                                            
    1a2e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2b70>
              xdiffbyte += 2;                 
    1a36:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,d1
    1a38:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d1
    1a3a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a3c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d1
    1a42:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,d6
    1a44:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   sub.l d1,d6
    1a46:	|  |  +--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 1734 <CstDrawZBuffer+0x150>
          bytewidth = (sprite->width/16)*2 + 2;
    1a4a:	|  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d6
    1a4c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d6,d2
    1a4e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    1a50:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    1a52:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    1a54:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    1a56:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l a0,a6
    1a58:	|  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- blt.w 19d2 <CstDrawZBuffer+0x3ee>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    1a5c:	|  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 18556 <PutChar+0x17a>
    1a62:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 1793a <KPrintF>
              return FALSE;
    1a68:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    1a6a:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   moveq #0,d0
}
    1a6c:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1a70:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #8,sp
    1a72:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a74:	|  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    1a76:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    1a78:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a6
    1a7a:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    1a7c:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   tst.w 46(sp)
    1a80:	|  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 1a16 <CstDrawZBuffer+0x432>
              custom->bltcon0 = 0x9f0;              
    1a82:	|  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2b4a>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a8a:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2b6e>
              custom->bltdmod = 0;                                                            
    1a90:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2b70>
              xdiffbyte += 2;                 
    1a98:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a5,d1
    1a9a:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d1
    1a9c:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a9e:	|  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d1
    1aa4:	|  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,d6
    1aa6:	|  |  |  |  |  |  |     |  |        |  |  |                  sub.l d1,d6
    1aa8:	|  |  +--|--|--|--|-----|--|--------|--|--|----------------- bra.w 1734 <CstDrawZBuffer+0x150>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1aac:	|  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1aae:	|  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    1ab0:	|  |  |  +--|--|--|-----|--|--------|-----|----------------- bge.w 180a <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1ab4:	|  |  |  |  |  |  |     |  |        |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1ab8:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,d1
    1aba:	|  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d1
    1abc:	|  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1abe:	|  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d6
    1ac2:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1ac6:	|  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    1ac8:	|  |  |  |  |  |  |     |  |        |     '----------------- bge.w 19c4 <CstDrawZBuffer+0x3e0>
    1acc:	|  |  |  |  |  |  |     |  |        '----------------------- bra.w 1a4a <CstDrawZBuffer+0x466>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1ad0:	|  |  |  |  |  '--|-----|--|-------------------------------> cmp.w 50(sp),d4
    1ad4:	|  |  |  '--|-----|-----|--|-------------------------------- ble.w 180a <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1ad8:	|  |  |     |     |     |  |                                 move.w 48(sp),d0
    1adc:	|  |  |     |     |     |  |                                 sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1ade:	|  |  |     |     |     |  |                                 move.w d0,d6
    1ae0:	|  |  |     |     |     |  |                                 andi.w #15,d6
    1ae4:	|  |  |     |     |     |  |                                 movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1ae6:	|  |  |     |     |     |  |                                 tst.l d2
    1ae8:	|  |  |     |     '-----|--|-------------------------------- bge.w 16bc <CstDrawZBuffer+0xd8>
    1aec:	|  |  |     '-----------|--|-------------------------------- bra.w 182c <CstDrawZBuffer+0x248>
    WaitBlit();
    1af0:	'--|--|-----------------|--|-------------------------------> movea.l 1d194 <GfxBase>,a6
    1af6:	   |  |                 |  |                                 jsr -228(a6)
    custom->bltafwm = 0xffff;
    1afa:	   |  |                 |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2b4e>
    custom->bltalwm = 0xffff;
    1b02:	   |  |                 |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2b50>
    custom->bltamod = 0;
    1b0a:	   |  |                 |  |                                 move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2b6e>
    custom->bltbmod = 0;
    1b12:	   |  |                 |  |                                 move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2b6c>
    custom->bltcmod = 0;
    1b1a:	   |  |                 |  |                                 move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2b6a>
    custom->bltdmod = 0;
    1b22:	   |  |                 |  |                                 move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2b70>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1b2a:	   |  |                 |  |                                 move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2b4a>
    custom->bltcon1 = 0;        
    1b32:	   |  |                 |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2b4c>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1b3a:	   |  |                 |  |                                 move.l (a3),d2
    1b3c:	   |  |                 |  |                                 move.l 4(a3),d3
    1b40:	   |  |                 |  |                                 move.l d2,d0
    1b42:	   |  |                 |  |                       ,-------- bmi.w 1bca <CstDrawZBuffer+0x5e6>
    1b46:	   |  |                 |  |                       |         asr.l #3,d0
    1b48:	   |  |                 |  |                       |         move.l d3,-(sp)
    1b4a:	   |  |                 |  |                       |         move.l d0,-(sp)
    1b4c:	   |  |                 |  |                       |         jsr 182c6 <__mulsi3>
    1b52:	   |  |                 |  |                       |         addq.l #8,sp
    1b54:	   |  |                 |  |                       |         move.l d0,d1
    1b56:	   |  |                 |  |                       |         add.l d0,d1
    1b58:	   |  |                 |  |                       |         add.l d1,d1
    1b5a:	   |  |                 |  |                       |         add.l d1,d0
    1b5c:	   |  |                 |  |                       |         add.l 24(a3),d0
    1b60:	   |  |                 |  |                       |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
    custom->bltdpt = (APTR) CstZBufferResult;
    1b66:	   |  |                 |  |                       |         move.l 1d0d0 <CstZBufferResult>,d0
    1b6c:	   |  |                 |  |                       |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b72:	   |  |                 |  |                       |         lsl.w #6,d3
    1b74:	   |  |                 |  |                       |         tst.l d2
    1b76:	   |  |                 |  |                    ,--|-------- blt.s 1bba <CstDrawZBuffer+0x5d6>
    1b78:	   |  |                 |  |                    |  |  ,----> asr.l #4,d2
    1b7a:	   |  |                 |  |                    |  |  |      add.w d2,d3
    1b7c:	   |  |                 |  |                    |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
}
    1b82:	   |  |                 |  |                    |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1b86:	   |  |                 |  |                    |  |  |  |   addq.l #8,sp
    1b88:	   |  |                 |  |                    |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b8a:	   '--|-----------------|--|--------------------|--|--|--|-> addq.l #7,d1
    1b8c:	      |                 |  |                    |  |  |  |   asr.l #3,d1
    1b8e:	      |                 |  |                    |  |  |  |   sub.w d2,d1
    1b90:	      |                 |  |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2b6e>
            custom->bltdmod = 0;                                                            
    1b96:	      |                 |  |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2b70>
    1b9e:	      '-----------------|--|--------------------|--|--|--|-- bra.w 1734 <CstDrawZBuffer+0x150>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1ba2:	                        '--|--------------------|--|--|--|-> addq.l #7,d1
    1ba4:	                           |                    |  |  |  |   asr.l #3,d1
    1ba6:	                           |                    |  |  |  |   sub.w d2,d1
    1ba8:	                           |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2b6e>
            custom->bltdmod = 2;                                                            
    1bae:	                           |                    |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2b70>
    1bb6:	                           '--------------------|--|--|--|-- bra.w 18a0 <CstDrawZBuffer+0x2bc>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1bba:	                                                >--|--|--|-> moveq #15,d1
    1bbc:	                                                |  |  |  |   add.l d1,d2
    1bbe:	                                                |  |  |  |   asr.l #4,d2
    1bc0:	                                                |  |  |  |   add.w d2,d3
    1bc2:	                                                |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
  return CstZBufferResult;
    1bc8:	                                                |  |  |  '-- bra.s 1b82 <CstDrawZBuffer+0x59e>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1bca:	                                                |  '--|----> addq.l #7,d0
    1bcc:	                                                |     |      asr.l #3,d0
    1bce:	                                                |     |      move.l d3,-(sp)
    1bd0:	                                                |     |      move.l d0,-(sp)
    1bd2:	                                                |     |      jsr 182c6 <__mulsi3>
    1bd8:	                                                |     |      addq.l #8,sp
    1bda:	                                                |     |      move.l d0,d1
    1bdc:	                                                |     |      add.l d0,d1
    1bde:	                                                |     |      add.l d1,d1
    1be0:	                                                |     |      add.l d1,d0
    1be2:	                                                |     |      add.l 24(a3),d0
    1be6:	                                                |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
    custom->bltdpt = (APTR) CstZBufferResult;
    1bec:	                                                |     |      move.l 1d0d0 <CstZBufferResult>,d0
    1bf2:	                                                |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1bf8:	                                                |     |      lsl.w #6,d3
    1bfa:	                                                |     |      tst.l d2
    1bfc:	                                                |     '----- bge.w 1b78 <CstDrawZBuffer+0x594>
    1c00:	                                                '----------- bra.s 1bba <CstDrawZBuffer+0x5d6>

00001c02 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1c02:	    lea -20(sp),sp
    1c06:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1c08:	    move.l 1d0b0 <CstDrawBuffer>,d0
    1c0e:	,-- beq.s 1c28 <CstFreeBuffer+0x26>
    1c10:	|   move.l 1d0b0 <CstDrawBuffer>,20(sp)
    1c18:	|   move.l 1d188 <SysBase>,d0
    1c1e:	|   movea.l d0,a6
    1c20:	|   movea.l 20(sp),a1
    1c24:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1c28:	'-> move.l 1d0ac <CstViewBuffer>,d0
    1c2e:	,-- beq.s 1c48 <CstFreeBuffer+0x46>
    1c30:	|   move.l 1d0ac <CstViewBuffer>,16(sp)
    1c38:	|   move.l 1d188 <SysBase>,d0
    1c3e:	|   movea.l d0,a6
    1c40:	|   movea.l 16(sp),a1
    1c44:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1c48:	'-> move.l 1d0a6 <CstCopperList>,d0
    1c4e:	,-- beq.s 1c68 <CstFreeBuffer+0x66>
    1c50:	|   move.l 1d0a6 <CstCopperList>,12(sp)
    1c58:	|   move.l 1d188 <SysBase>,d0
    1c5e:	|   movea.l d0,a6
    1c60:	|   movea.l 12(sp),a1
    1c64:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1c68:	'-> move.l 1d09e <CstBackDrop>,d0
    1c6e:	,-- beq.s 1c88 <CstFreeBuffer+0x86>
    1c70:	|   move.l 1d09e <CstBackDrop>,8(sp)
    1c78:	|   move.l 1d188 <SysBase>,d0
    1c7e:	|   movea.l d0,a6
    1c80:	|   movea.l 8(sp),a1
    1c84:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1c88:	'-> move.l 1d0a2 <CstBackDropBackup>,d0
    1c8e:	,-- beq.s 1ca8 <CstFreeBuffer+0xa6>
    1c90:	|   move.l 1d0a2 <CstBackDropBackup>,4(sp)
    1c98:	|   move.l 1d188 <SysBase>,d0
    1c9e:	|   movea.l d0,a6
    1ca0:	|   movea.l 4(sp),a1
    1ca4:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1ca8:	'-> clr.l 1d0b0 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1cae:	    clr.l 1d0ac <CstViewBuffer>
  CstCopperList = NULL;
    1cb4:	    clr.l 1d0a6 <CstCopperList>
  CstBackDrop = NULL;
    1cba:	    clr.l 1d09e <CstBackDrop>

}
    1cc0:	    nop
    1cc2:	    movea.l (sp)+,a6
    1cc4:	    lea 20(sp),sp
    1cc8:	    rts

00001cca <CstFreeze>:



void CstFreeze( ) {
    1cca:	       lea -64(sp),sp
    1cce:	       move.l a6,-(sp)
    1cd0:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1cd2:	       pea 185a6 <PutChar+0x1ca>
    1cd8:	       jsr 1793a <KPrintF>
    1cde:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1ce0:	       move.l 1d0dc <winWidth>,d0
    1ce6:	       lsr.l #3,d0
    1ce8:	       move.l d0,d1
    1cea:	       move.l 1d0e0 <winHeight>,d0
    1cf0:	       move.l d0,d0
    1cf2:	       muls.w d0,d1
    1cf4:	       move.w d1,d0
    1cf6:	       add.w d0,d0
    1cf8:	       add.w d0,d0
    1cfa:	       move.w d0,d2
    1cfc:	       add.w d1,d2
    1cfe:	       move.w d2,54(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1d02:	       move.l #14675968,50(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1d0a:	       moveq #0,d0
    1d0c:	       move.w 54(sp),d0
    1d10:	       move.l d0,46(sp)
    1d14:	       clr.l 42(sp)
    1d18:	       move.l 1d188 <SysBase>,d0
    1d1e:	       movea.l d0,a6
    1d20:	       move.l 46(sp),d0
    1d24:	       move.l 42(sp),d1
    1d28:	       jsr -684(a6)
    1d2c:	       move.l d0,38(sp)
    1d30:	       move.l 38(sp),d0
    1d34:	       move.l d0,1d0a2 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1d3a:	       move.l 1d0a2 <CstBackDropBackup>,d0
    1d40:	   ,-- bne.s 1d50 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1d42:	   |   pea 185cd <PutChar+0x1f1>
    1d48:	   |   jsr 1793a <KPrintF>
    1d4e:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1d50:	   '-> move.l 1d0e0 <winHeight>,d0
    1d56:	       move.l d0,d0
    1d58:	       movea.w d0,a1
    1d5a:	       move.l 1d0dc <winWidth>,d0
    1d60:	       move.l d0,d0
    1d62:	       movea.w d0,a0
    1d64:	       move.l 1d0a2 <CstBackDropBackup>,d0
    1d6a:	       clr.l -(sp)
    1d6c:	       pea 5 <_start+0x5>
    1d70:	       move.l a1,-(sp)
    1d72:	       move.l a0,-(sp)
    1d74:	       pea 18605 <PutChar+0x229>
    1d7a:	       move.l d0,-(sp)
    1d7c:	       jsr 17a22 <debug_register_bitmap>
    1d82:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1d86:	       move.l 1d09e <CstBackDrop>,68(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1d8e:	       move.l 1d0a2 <CstBackDropBackup>,64(sp)
  for(int i=0;i<size/4;i++) 
    1d96:	       clr.l 60(sp)
    1d9a:	   ,-- bra.s 1dc0 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1d9c:	,--|-> move.l 68(sp),d1
    1da0:	|  |   move.l d1,d0
    1da2:	|  |   addq.l #4,d0
    1da4:	|  |   move.l d0,68(sp)
    1da8:	|  |   move.l 64(sp),d0
    1dac:	|  |   move.l d0,d2
    1dae:	|  |   addq.l #4,d2
    1db0:	|  |   move.l d2,64(sp)
    1db4:	|  |   movea.l d1,a0
    1db6:	|  |   move.l (a0),d1
    1db8:	|  |   movea.l d0,a0
    1dba:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1dbc:	|  |   addq.l #1,60(sp)
    1dc0:	|  '-> move.w 54(sp),d0
    1dc4:	|      lsr.w #2,d0
    1dc6:	|      move.w d0,d0
    1dc8:	|      andi.l #65535,d0
    1dce:	|      cmp.l 60(sp),d0
    1dd2:	'----- bgt.s 1d9c <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1dd4:	       move.l 1d0ac <CstViewBuffer>,68(sp)
  dst = (ULONG *) CstBackDrop;
    1ddc:	       move.l 1d09e <CstBackDrop>,64(sp)

  for(int i=0;i<size/4;i++) 
    1de4:	       clr.l 56(sp)
    1de8:	   ,-- bra.s 1e0e <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1dea:	,--|-> move.l 68(sp),d1
    1dee:	|  |   move.l d1,d0
    1df0:	|  |   addq.l #4,d0
    1df2:	|  |   move.l d0,68(sp)
    1df6:	|  |   move.l 64(sp),d0
    1dfa:	|  |   move.l d0,d2
    1dfc:	|  |   addq.l #4,d2
    1dfe:	|  |   move.l d2,64(sp)
    1e02:	|  |   movea.l d1,a0
    1e04:	|  |   move.l (a0),d1
    1e06:	|  |   movea.l d0,a0
    1e08:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e0a:	|  |   addq.l #1,56(sp)
    1e0e:	|  '-> move.w 54(sp),d0
    1e12:	|      lsr.w #2,d0
    1e14:	|      move.w d0,d0
    1e16:	|      andi.l #65535,d0
    1e1c:	|      cmp.l 56(sp),d0
    1e20:	'----- bgt.s 1dea <CstFreeze+0x120>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    1e22:	       move.l 1d0b8 <CstCleanupQueueDrawBuffer>,34(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1e2a:	       moveq #20,d0
    1e2c:	       move.l d0,30(sp)
    1e30:	       clr.l 26(sp)
    1e34:	       move.l 1d188 <SysBase>,d0
    1e3a:	       movea.l d0,a6
    1e3c:	       move.l 30(sp),d0
    1e40:	       move.l 26(sp),d1
    1e44:	       jsr -684(a6)
    1e48:	       move.l d0,22(sp)
    1e4c:	       move.l 22(sp),d0
    1e50:	       move.l d0,1d0b8 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    1e56:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    1e5c:	       move.l 34(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    1e62:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    1e68:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    1e6a:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    1e70:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    1e74:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    1e7a:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    1e7e:	       move.l 1d0dc <winWidth>,d0
    1e84:	       lsr.l #4,d0
    1e86:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    1e8c:	       move.l d0,d0
    1e8e:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    1e92:	       move.l 1d0e0 <winHeight>,d0
    1e98:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    1e9e:	       move.l d0,d0
    1ea0:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    1ea4:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    1eaa:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    1eae:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    1eb4:	       clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    1eb8:	       move.l 1d0b4 <CstCleanupQueueViewBuffer>,34(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1ec0:	       moveq #20,d2
    1ec2:	       move.l d2,18(sp)
    1ec6:	       clr.l 14(sp)
    1eca:	       move.l 1d188 <SysBase>,d0
    1ed0:	       movea.l d0,a6
    1ed2:	       move.l 18(sp),d0
    1ed6:	       move.l 14(sp),d1
    1eda:	       jsr -684(a6)
    1ede:	       move.l d0,10(sp)
    1ee2:	       move.l 10(sp),d0
    1ee6:	       move.l d0,1d0b4 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1eec:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    1ef2:	       move.l 34(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    1ef8:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    1efe:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    1f00:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    1f06:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    1f0a:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    1f10:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    1f14:	       move.l 1d0dc <winWidth>,d0
    1f1a:	       lsr.l #4,d0
    1f1c:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    1f22:	       move.l d0,d0
    1f24:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    1f28:	       move.l 1d0e0 <winHeight>,d0
    1f2e:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    1f34:	       move.l d0,d0
    1f36:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    1f3a:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    1f40:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    1f44:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    1f4a:	       clr.w 14(a0)

  KPrintF("CstFreeze: Finished");
    1f4e:	       pea 18614 <PutChar+0x238>
    1f54:	       jsr 1793a <KPrintF>
    1f5a:	       addq.l #4,sp

}  
    1f5c:	       nop
    1f5e:	       move.l (sp)+,d2
    1f60:	       movea.l (sp)+,a6
    1f62:	       lea 64(sp),sp
    1f66:	       rts

00001f68 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1f68:	             lea -172(sp),sp
    1f6c:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1f70:	             pea 18628 <PutChar+0x24c>
    1f76:	             jsr 1793a <KPrintF>
    1f7c:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1f7e:	             move.l 192(sp),-(sp)
    1f82:	             jsr 6bc <get2bytes>
    1f88:	             addq.l #4,sp
    1f8a:	             move.w d0,162(sp)
  UWORD height = get2bytes(fp);  
    1f8e:	             move.l 192(sp),-(sp)
    1f92:	             jsr 6bc <get2bytes>
    1f98:	             addq.l #4,sp
    1f9a:	             move.w d0,160(sp)

  UWORD widthbyteslayer = width/8;
    1f9e:	             move.w 162(sp),d0
    1fa2:	             lsr.w #3,d0
    1fa4:	             move.w d0,158(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1fa8:	             move.w 158(sp),d0
    1fac:	             lsr.w #1,d0
    1fae:	             move.w d0,156(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1fb2:	             move.l 1d0dc <winWidth>,d0
    1fb8:	             lsr.l #3,d0
    1fba:	             move.w d0,154(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1fbe:	             move.w 158(sp),d0
    1fc2:	             muls.w 160(sp),d0
    1fc6:	             move.w d0,152(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1fca:	             move.w 152(sp),d1
    1fce:	             move.w d1,d0
    1fd0:	             add.w d0,d0
    1fd2:	             add.w d0,d0
    1fd4:	             move.w d0,d2
    1fd6:	             add.w d1,d2
    1fd8:	             move.w d2,150(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1fdc:	             move.w 1d098 <CstPaletteLoaded>,d0
    1fe2:	,----------- bne.w 207c <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1fe6:	|            move.w #384,148(sp)

    if(CstPalette) {
    1fec:	|            move.l 1d0c8 <CstPalette>,d0
    1ff2:	|        ,-- beq.s 200c <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1ff4:	|        |   move.l 1d0c8 <CstPalette>,144(sp)
    1ffc:	|        |   move.l 1d188 <SysBase>,d0
    2002:	|        |   movea.l d0,a6
    2004:	|        |   movea.l 144(sp),a1
    2008:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    200c:	|        '-> moveq #64,d0
    200e:	|            move.l d0,140(sp)
    2012:	|            clr.l 136(sp)
    2016:	|            move.l 1d188 <SysBase>,d0
    201c:	|            movea.l d0,a6
    201e:	|            move.l 140(sp),d0
    2022:	|            move.l 136(sp),d1
    2026:	|            jsr -684(a6)
    202a:	|            move.l d0,132(sp)
    202e:	|            move.l 132(sp),d0
    2032:	|            move.l d0,1d0c8 <CstPalette>
    CstPaletteLoaded = 1;
    2038:	|            move.w #1,1d098 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    2040:	|            move.l 1d0c8 <CstPalette>,184(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2048:	|            clr.l 180(sp)
    204c:	|        ,-- bra.s 2072 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    204e:	|     ,--|-> move.l 192(sp),-(sp)
    2052:	|     |  |   jsr 6bc <get2bytes>
    2058:	|     |  |   addq.l #4,sp
    205a:	|     |  |   move.l d0,d1
    205c:	|     |  |   move.l 184(sp),d0
    2060:	|     |  |   move.l d0,d2
    2062:	|     |  |   addq.l #2,d2
    2064:	|     |  |   move.l d2,184(sp)
    2068:	|     |  |   move.l d1,d1
    206a:	|     |  |   movea.l d0,a0
    206c:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    206e:	|     |  |   addq.l #1,180(sp)
    2072:	|     |  '-> moveq #31,d0
    2074:	|     |      cmp.l 180(sp),d0
    2078:	|     '----- bge.s 204e <CstLoadBackdrop+0xe6>
    207a:	|  ,-------- bra.s 209a <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    207c:	'--|-------> clr.l 176(sp)
    2080:	   |     ,-- bra.s 2092 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    2082:	   |  ,--|-> move.l 192(sp),-(sp)
    2086:	   |  |  |   jsr 6bc <get2bytes>
    208c:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    208e:	   |  |  |   addq.l #1,176(sp)
    2092:	   |  |  '-> moveq #31,d2
    2094:	   |  |      cmp.l 176(sp),d2
    2098:	   |  '----- bge.s 2082 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    209a:	   '-------> moveq #0,d0
    209c:	             move.w 150(sp),d0
    20a0:	             move.l d0,128(sp)
    20a4:	             moveq #2,d0
    20a6:	             move.l d0,124(sp)
    20aa:	             move.l 1d188 <SysBase>,d0
    20b0:	             movea.l d0,a6
    20b2:	             move.l 128(sp),d0
    20b6:	             move.l 124(sp),d1
    20ba:	             jsr -684(a6)
    20be:	             move.l d0,120(sp)
    20c2:	             move.l 120(sp),d0
    20c6:	             move.l d0,116(sp)
  if( !tmpbuffer)
    20ca:	         ,-- bne.s 20da <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    20cc:	         |   pea 18657 <PutChar+0x27b>
    20d2:	         |   jsr 1793a <KPrintF>
    20d8:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    20da:	         '-> moveq #0,d0
    20dc:	             move.w 152(sp),d0
    20e0:	             move.l d0,112(sp)
    20e4:	             moveq #2,d2
    20e6:	             move.l d2,108(sp)
    20ea:	             move.l 1d188 <SysBase>,d0
    20f0:	             movea.l d0,a6
    20f2:	             move.l 112(sp),d0
    20f6:	             move.l 108(sp),d1
    20fa:	             jsr -684(a6)
    20fe:	             move.l d0,104(sp)
    2102:	             move.l 104(sp),d0
    2106:	             move.l d0,100(sp)
  if( !tmpmask)
    210a:	         ,-- bne.s 211a <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    210c:	         |   pea 1868d <PutChar+0x2b1>
    2112:	         |   jsr 1793a <KPrintF>
    2118:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    211a:	         '-> move.w 160(sp),d0
    211e:	             movea.w d0,a1
    2120:	             move.w 162(sp),d0
    2124:	             movea.w d0,a0
    2126:	             clr.l -(sp)
    2128:	             pea 5 <_start+0x5>
    212c:	             move.l a1,-(sp)
    212e:	             move.l a0,-(sp)
    2130:	             pea 186c1 <PutChar+0x2e5>
    2136:	             move.l 136(sp),-(sp)
    213a:	             jsr 17a22 <debug_register_bitmap>
    2140:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    2144:	             move.w 160(sp),d0
    2148:	             movea.w d0,a1
    214a:	             move.w 162(sp),d0
    214e:	             movea.w d0,a0
    2150:	             clr.l -(sp)
    2152:	             pea 1 <_start+0x1>
    2156:	             move.l a1,-(sp)
    2158:	             move.l a0,-(sp)
    215a:	             pea 186cf <PutChar+0x2f3>
    2160:	             move.l 136(sp),-(sp)
    2164:	             jsr 17a22 <debug_register_bitmap>
    216a:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    216e:	             move.l 192(sp),96(sp)
    2174:	             move.l 116(sp),92(sp)
    217a:	             moveq #2,d0
    217c:	             move.l d0,88(sp)
    2180:	             move.w 150(sp),d0
    2184:	             lsr.w #1,d0
    2186:	             move.w d0,d0
    2188:	             andi.l #65535,d0
    218e:	             move.l d0,84(sp)
    2192:	             move.l 1d190 <DOSBase>,d0
    2198:	             movea.l d0,a6
    219a:	             move.l 96(sp),d1
    219e:	             move.l 92(sp),d2
    21a2:	             move.l 88(sp),d3
    21a6:	             move.l 84(sp),d4
    21aa:	             jsr -324(a6)
    21ae:	             move.l d0,80(sp)
    21b2:	             move.l 80(sp),d0
    21b6:	             move.w d0,78(sp)
  if(!count) {
    21ba:	         ,-- bne.s 21ce <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    21bc:	         |   pea 186db <PutChar+0x2ff>
    21c2:	         |   jsr 1793a <KPrintF>
    21c8:	         |   addq.l #4,sp
    return;
    21ca:	   ,-----|-- bra.w 24de <CstLoadBackdrop+0x576>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    21ce:	   |     '-> move.l 192(sp),74(sp)
    21d4:	   |         move.l 100(sp),70(sp)
    21da:	   |         moveq #2,d2
    21dc:	   |         move.l d2,66(sp)
    21e0:	   |         move.w 152(sp),d0
    21e4:	   |         lsr.w #1,d0
    21e6:	   |         move.w d0,d0
    21e8:	   |         andi.l #65535,d0
    21ee:	   |         move.l d0,62(sp)
    21f2:	   |         move.l 1d190 <DOSBase>,d0
    21f8:	   |         movea.l d0,a6
    21fa:	   |         move.l 74(sp),d1
    21fe:	   |         move.l 70(sp),d2
    2202:	   |         move.l 66(sp),d3
    2206:	   |         move.l 62(sp),d4
    220a:	   |         jsr -324(a6)
    220e:	   |         move.l d0,58(sp)
    2212:	   |         move.l 58(sp),d0
    2216:	   |         move.w d0,78(sp)
   

  if(!count) {
    221a:	   |     ,-- bne.s 222e <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    221c:	   |     |   pea 186db <PutChar+0x2ff>
    2222:	   |     |   jsr 1793a <KPrintF>
    2228:	   |     |   addq.l #4,sp
    return;
    222a:	   +-----|-- bra.w 24de <CstLoadBackdrop+0x576>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    222e:	   |     '-> move.l #14675968,54(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    2236:	   |         move.l 1d09e <CstBackDrop>,d0
    223c:	   |         move.l d0,172(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    2240:	   |         move.l 200(sp),d0
    2244:	   |         move.w d0,d1
    2246:	   |         muls.w 154(sp),d1
    224a:	   |         move.l 196(sp),d0
    224e:	   |     ,-- bpl.s 2252 <CstLoadBackdrop+0x2ea>
    2250:	   |     |   addq.l #7,d0
    2252:	   |     '-> asr.l #3,d0
    2254:	   |         move.l d0,d0
    2256:	   |         movea.w d1,a0
    2258:	   |         adda.w d0,a0
    225a:	   |         move.w a0,52(sp)
  backdropcursor += offset; 
    225e:	   |         moveq #0,d0
    2260:	   |         move.w 52(sp),d0
    2264:	   |         add.l d0,172(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    2268:	   |         pea 186f6 <PutChar+0x31a>
    226e:	   |         jsr 1793a <KPrintF>
    2274:	   |         addq.l #4,sp


  WaitBlit();
    2276:	   |         move.l 1d194 <GfxBase>,d0
    227c:	   |         movea.l d0,a6
    227e:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    2282:	   |         movea.l 54(sp),a0
    2286:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    228c:	   |         movea.l 54(sp),a0
    2290:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2296:	   |         movea.l 54(sp),a0
    229a:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    22a0:	   |         movea.l 54(sp),a0
    22a4:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    22aa:	   |         move.w 154(sp),d0
    22ae:	   |         sub.w 158(sp),d0
    22b2:	   |         movea.l 54(sp),a0
    22b6:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    22ba:	   |         move.w 154(sp),d0
    22be:	   |         sub.w 158(sp),d0
    22c2:	   |         movea.l 54(sp),a0
    22c6:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    22ca:	   |         movea.l 54(sp),a0
    22ce:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    22d4:	   |         movea.l 54(sp),a0
    22d8:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    22de:	   |         move.l 116(sp),168(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    22e4:	   |         clr.l 164(sp)
    22e8:	   |     ,-- bra.s 2356 <CstLoadBackdrop+0x3ee>
  {   
    WaitBlit(); 
    22ea:	   |  ,--|-> move.l 1d194 <GfxBase>,d0
    22f0:	   |  |  |   movea.l d0,a6
    22f2:	   |  |  |   jsr -228(a6)
    custom->bltapt = (APTR) tmpmask;
    22f6:	   |  |  |   movea.l 54(sp),a0
    22fa:	   |  |  |   move.l 100(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2300:	   |  |  |   move.l 168(sp),d0
    2304:	   |  |  |   movea.l 54(sp),a0
    2308:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    230c:	   |  |  |   move.l 172(sp),d0
    2310:	   |  |  |   movea.l 54(sp),a0
    2314:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    2318:	   |  |  |   move.l 172(sp),d0
    231c:	   |  |  |   movea.l 54(sp),a0
    2320:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    2324:	   |  |  |   move.w 160(sp),d0
    2328:	   |  |  |   lsl.w #6,d0
    232a:	   |  |  |   add.w 156(sp),d0
    232e:	   |  |  |   movea.l 54(sp),a0
    2332:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    2336:	   |  |  |   moveq #0,d0
    2338:	   |  |  |   move.w 152(sp),d0
    233c:	   |  |  |   add.l d0,168(sp)
    backdropcursor += CstBackdropSizePlane;
    2340:	   |  |  |   move.w 1d09c <CstBackdropSizePlane>,d0
    2346:	   |  |  |   move.w d0,d0
    2348:	   |  |  |   andi.l #65535,d0
    234e:	   |  |  |   add.l d0,172(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2352:	   |  |  |   addq.l #1,164(sp)
    2356:	   |  |  '-> moveq #4,d0
    2358:	   |  |      cmp.l 164(sp),d0
    235c:	   |  '----- bge.s 22ea <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    235e:	   |         move.l 1d194 <GfxBase>,d0
    2364:	   |         movea.l d0,a6
    2366:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    236a:	   |         pea 18715 <PutChar+0x339>
    2370:	   |         jsr 1793a <KPrintF>
    2376:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    2378:	   |         move.l 116(sp),48(sp)
    237e:	   |         move.l 1d188 <SysBase>,d0
    2384:	   |         movea.l d0,a6
    2386:	   |         movea.l 48(sp),a1
    238a:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    238e:	   |         move.l 100(sp),44(sp)
    2394:	   |         move.l 1d188 <SysBase>,d0
    239a:	   |         movea.l d0,a6
    239c:	   |         movea.l 44(sp),a1
    23a0:	   |         jsr -690(a6)

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    23a4:	   |         move.l 1d0b8 <CstCleanupQueueDrawBuffer>,40(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    23ac:	   |         moveq #20,d2
    23ae:	   |         move.l d2,36(sp)
    23b2:	   |         clr.l 32(sp)
    23b6:	   |         move.l 1d188 <SysBase>,d0
    23bc:	   |         movea.l d0,a6
    23be:	   |         move.l 36(sp),d0
    23c2:	   |         move.l 32(sp),d1
    23c6:	   |         jsr -684(a6)
    23ca:	   |         move.l d0,28(sp)
    23ce:	   |         move.l 28(sp),d0
    23d2:	   |         move.l d0,1d0b8 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    23d8:	   |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    23de:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    23e4:	   |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    23ea:	   |         clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    23ec:	   |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    23f2:	   |         clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    23f6:	   |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    23fc:	   |         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    2400:	   |         move.l 1d0dc <winWidth>,d0
    2406:	   |         lsr.l #4,d0
    2408:	   |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    240e:	   |         move.l d0,d0
    2410:	   |         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    2414:	   |         move.l 1d0e0 <winHeight>,d0
    241a:	   |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2420:	   |         move.l d0,d0
    2422:	   |         move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    2426:	   |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    242c:	   |         clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    2430:	   |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2436:	   |         clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    243a:	   |         move.l 1d0b4 <CstCleanupQueueViewBuffer>,40(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2442:	   |         moveq #20,d0
    2444:	   |         move.l d0,24(sp)
    2448:	   |         clr.l 20(sp)
    244c:	   |         move.l 1d188 <SysBase>,d0
    2452:	   |         movea.l d0,a6
    2454:	   |         move.l 24(sp),d0
    2458:	   |         move.l 20(sp),d1
    245c:	   |         jsr -684(a6)
    2460:	   |         move.l d0,16(sp)
    2464:	   |         move.l 16(sp),d0
    2468:	   |         move.l d0,1d0b4 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    246e:	   |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2474:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    247a:	   |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2480:	   |         clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    2482:	   |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2488:	   |         clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    248c:	   |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2492:	   |         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    2496:	   |         move.l 1d0dc <winWidth>,d0
    249c:	   |         lsr.l #4,d0
    249e:	   |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    24a4:	   |         move.l d0,d0
    24a6:	   |         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    24aa:	   |         move.l 1d0e0 <winHeight>,d0
    24b0:	   |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    24b6:	   |         move.l d0,d0
    24b8:	   |         move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    24bc:	   |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    24c2:	   |         clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    24c6:	   |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    24cc:	   |         clr.w 14(a0)

  KPrintF("CstLoadBackDrop: Finished");
    24d0:	   |         pea 18735 <PutChar+0x359>
    24d6:	   |         jsr 1793a <KPrintF>
    24dc:	   |         addq.l #4,sp

}
    24de:	   '-------> movem.l (sp)+,d2-d4/a6
    24e2:	             lea 172(sp),sp
    24e6:	             rts

000024e8 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    24e8:	                lea -156(sp),sp
    24ec:	                move.l a6,-(sp)
    24ee:	                move.l d2,-(sp)
    24f0:	                move.l 172(sp),d1
    24f4:	                move.l 176(sp),d0
    24f8:	                move.w d1,d1
    24fa:	                move.w d1,10(sp)
    24fe:	                move.w d0,d0
    2500:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    2504:	                move.l #14675968,112(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    250c:	                clr.l 108(sp)
  CstApplyBackDropCounter = 2;
    2510:	                move.w #2,1d0aa <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    2518:	                move.l 1d09e <CstBackDrop>,108(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    2520:	                clr.l 140(sp)

  blitwidth = single->width/16;
    2524:	                movea.l 168(sp),a0
    2528:	                move.l (a0),d0
    252a:	                movea.l d0,a0
    252c:	                cmpa.w #0,a0
    2530:	            ,-- bge.s 2536 <CstPasteChar+0x4e>
    2532:	            |   lea 15(a0),a0
    2536:	            '-> move.l a0,d0
    2538:	                asr.l #4,d0
    253a:	                move.l d0,124(sp)
  if(blitwidth == 0) blitwidth = 1;
    253e:	            ,-- bne.s 2546 <CstPasteChar+0x5e>
    2540:	            |   moveq #1,d0
    2542:	            |   move.l d0,124(sp)

  if( y < 0) {
    2546:	            '-> tst.w 8(sp)
    254a:	         ,----- bge.s 2594 <CstPasteChar+0xac>
    if(y + single->height < 0) {
    254c:	         |      movea.w 8(sp),a1
    2550:	         |      movea.l 168(sp),a0
    2554:	         |      move.l 4(a0),d0
    2558:	         |      add.l a1,d0
    255a:	         |  ,-- bpl.s 256e <CstPasteChar+0x86>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    255c:	         |  |   pea 1874f <PutChar+0x373>
    2562:	         |  |   jsr 1793a <KPrintF>
    2568:	         |  |   addq.l #4,sp
      return;
    256a:	,--------|--|-- bra.w 2ee2 <CstPasteChar+0x9fa>
    }
    ystartdst = 0;
    256e:	|        |  '-> clr.l 136(sp)
    ystartsrc = y*-1;
    2572:	|        |      move.w 8(sp),d0
    2576:	|        |      ext.l d0
    2578:	|        |      move.l d0,d1
    257a:	|        |      neg.l d1
    257c:	|        |      move.l d1,132(sp)
    blitheight = single->height+y;
    2580:	|        |      movea.l 168(sp),a0
    2584:	|        |      move.l 4(a0),d0
    2588:	|        |      movea.w 8(sp),a0
    258c:	|        |      add.l a0,d0
    258e:	|        |      move.l d0,128(sp)
    2592:	|     ,--|----- bra.s 2606 <CstPasteChar+0x11e>
  } else if(y+single->height > (int) winHeight) {
    2594:	|     |  '----> movea.w 8(sp),a1
    2598:	|     |         movea.l 168(sp),a0
    259c:	|     |         move.l 4(a0),d0
    25a0:	|     |         move.l a1,d1
    25a2:	|     |         add.l d0,d1
    25a4:	|     |         move.l 1d0e0 <winHeight>,d0
    25aa:	|     |         cmp.l d1,d0
    25ac:	|     |  ,----- bge.s 25ee <CstPasteChar+0x106>
    if(y  > (int) winHeight) {
    25ae:	|     |  |      movea.w 8(sp),a0
    25b2:	|     |  |      move.l 1d0e0 <winHeight>,d0
    25b8:	|     |  |      cmp.l a0,d0
    25ba:	|     |  |  ,-- bge.s 25ce <CstPasteChar+0xe6>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    25bc:	|     |  |  |   pea 1874f <PutChar+0x373>
    25c2:	|     |  |  |   jsr 1793a <KPrintF>
    25c8:	|     |  |  |   addq.l #4,sp
      return;
    25ca:	+-----|--|--|-- bra.w 2ee2 <CstPasteChar+0x9fa>
    }
    ystartdst = y;
    25ce:	|     |  |  '-> movea.w 8(sp),a0
    25d2:	|     |  |      move.l a0,136(sp)
    ystartsrc = 0;
    25d6:	|     |  |      clr.l 132(sp)
    blitheight = winHeight-y;
    25da:	|     |  |      move.l 1d0e0 <winHeight>,d0
    25e0:	|     |  |      movea.w 8(sp),a0
    25e4:	|     |  |      move.l d0,d1
    25e6:	|     |  |      sub.l a0,d1
    25e8:	|     |  |      move.l d1,128(sp)
    25ec:	|     +--|----- bra.s 2606 <CstPasteChar+0x11e>
  } else {
    ystartdst = y;
    25ee:	|     |  '----> movea.w 8(sp),a0
    25f2:	|     |         move.l a0,136(sp)
    ystartsrc = 0;
    25f6:	|     |         clr.l 132(sp)
    blitheight = single->height;
    25fa:	|     |         movea.l 168(sp),a0
    25fe:	|     |         move.l 4(a0),d0
    2602:	|     |         move.l d0,128(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    2606:	|     '-------> tst.w 10(sp)
    260a:	|        ,----- bge.w 2852 <CstPasteChar+0x36a>
    if(x + single->width < 0) {
    260e:	|        |      movea.w 10(sp),a1
    2612:	|        |      movea.l 168(sp),a0
    2616:	|        |      move.l (a0),d0
    2618:	|        |      add.l a1,d0
    261a:	|        |  ,-- bpl.s 262e <CstPasteChar+0x146>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    261c:	|        |  |   pea 1874f <PutChar+0x373>
    2622:	|        |  |   jsr 1793a <KPrintF>
    2628:	|        |  |   addq.l #4,sp
      return;
    262a:	+--------|--|-- bra.w 2ee2 <CstPasteChar+0x9fa>

    }
    
    extrawords = 1;
    262e:	|        |  '-> move.w #1,162(sp)

    cutwordssource = (x*-1)/16; 
    2634:	|        |      move.w 10(sp),d0
    2638:	|        |  ,-- bpl.s 263e <CstPasteChar+0x156>
    263a:	|        |  |   addi.w #15,d0
    263e:	|        |  '-> asr.w #4,d0
    2640:	|        |      neg.w d0
    2642:	|        |      move.w d0,160(sp)
    cutmaskpixel = (x*-1)%16;     
    2646:	|        |      move.w 10(sp),d0
    264a:	|        |      ext.l d0
    264c:	|        |      neg.l d0
    264e:	|        |      andi.l #-2147483633,d0
    2654:	|        |  ,-- bpl.s 265e <CstPasteChar+0x176>
    2656:	|        |  |   subq.l #1,d0
    2658:	|        |  |   moveq #-16,d1
    265a:	|        |  |   or.l d1,d0
    265c:	|        |  |   addq.l #1,d0
    265e:	|        |  '-> move.w d0,158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2662:	|        |      clr.w 156(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2666:	|        |      movea.l 168(sp),a0
    266a:	|        |      move.l 24(a0),d0
    266e:	|        |      move.l d0,d1
    2670:	|        |      moveq #0,d0
    2672:	|        |      move.w 160(sp),d0
    2676:	|        |      add.l d0,d0
    2678:	|        |      move.l d1,d2
    267a:	|        |      add.l d0,d2
    267c:	|        |      movea.l 168(sp),a0
    2680:	|        |      move.l (a0),d0
    2682:	|        |      move.l 132(sp),-(sp)
    2686:	|        |      move.l d0,-(sp)
    2688:	|        |      jsr 182c6 <__mulsi3>
    268e:	|        |      addq.l #8,sp
    2690:	|        |      lsr.l #3,d0
    2692:	|        |      move.l d2,d1
    2694:	|        |      add.l d0,d1
    2696:	|        |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    269a:	|        |      move.l 1d0dc <winWidth>,d0
    26a0:	|        |      move.l 136(sp),-(sp)
    26a4:	|        |      move.l d0,-(sp)
    26a6:	|        |      jsr 182c6 <__mulsi3>
    26ac:	|        |      addq.l #8,sp
    26ae:	|        |      lsr.l #3,d0
    26b0:	|        |      move.l 108(sp),d1
    26b4:	|        |      add.l d1,d0
    26b6:	|        |      move.l d0,d2
    26b8:	|        |      subq.l #2,d2
    26ba:	|        |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    26be:	|        |      move.l 1d0dc <winWidth>,d0
    26c4:	|        |      move.l 136(sp),-(sp)
    26c8:	|        |      move.l d0,-(sp)
    26ca:	|        |      jsr 182c6 <__mulsi3>
    26d0:	|        |      addq.l #8,sp
    26d2:	|        |      lsr.l #3,d0
    26d4:	|        |      move.l 108(sp),d1
    26d8:	|        |      add.l d1,d0
    26da:	|        |      move.l d0,d1
    26dc:	|        |      subq.l #2,d1
    26de:	|        |      move.l d1,144(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    26e2:	|        |      moveq #0,d0
    26e4:	|        |      move.w 158(sp),d0
    26e8:	|        |      moveq #16,d1
    26ea:	|        |      sub.l d0,d1
    26ec:	|        |      move.l d1,d0
    26ee:	|        |      moveq #12,d2
    26f0:	|        |      lsl.l d2,d0
    26f2:	|        |      move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    26f6:	|        |      move.l 1d0b8 <CstCleanupQueueDrawBuffer>,48(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    26fe:	|        |      moveq #20,d0
    2700:	|        |      move.l d0,44(sp)
    2704:	|        |      clr.l 40(sp)
    2708:	|        |      move.l 1d188 <SysBase>,d0
    270e:	|        |      movea.l d0,a6
    2710:	|        |      move.l 44(sp),d0
    2714:	|        |      move.l 40(sp),d1
    2718:	|        |      jsr -684(a6)
    271c:	|        |      move.l d0,36(sp)
    2720:	|        |      move.l 36(sp),d0
    2724:	|        |      move.l d0,1d0b8 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    272a:	|        |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2730:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = 0;
    2736:	|        |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    273c:	|        |      clr.w (a0)
    CstCleanupQueueDrawBuffer->y = 0;
    273e:	|        |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2744:	|        |      clr.w 2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2748:	|        |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    274e:	|        |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2752:	|        |      movea.l 168(sp),a0
    2756:	|        |      move.l (a0),d0
    2758:	|        |      movea.l d0,a0
    275a:	|        |      cmpa.w #0,a0
    275e:	|        |  ,-- bge.s 2764 <CstPasteChar+0x27c>
    2760:	|        |  |   lea 15(a0),a0
    2764:	|        |  '-> move.l a0,d0
    2766:	|        |      asr.l #4,d0
    2768:	|        |      move.l d0,d0
    276a:	|        |      add.w 160(sp),d0
    276e:	|        |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2774:	|        |      add.w 162(sp),d0
    2778:	|        |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    277c:	|        |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2782:	|        |      move.l 128(sp),d0
    2786:	|        |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    278a:	|        |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2790:	|        |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2794:	|        |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    279a:	|        |      move.l 136(sp),d0
    279e:	|        |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    27a2:	|        |      move.l 1d0b4 <CstCleanupQueueViewBuffer>,48(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    27aa:	|        |      moveq #20,d1
    27ac:	|        |      move.l d1,32(sp)
    27b0:	|        |      clr.l 28(sp)
    27b4:	|        |      move.l 1d188 <SysBase>,d0
    27ba:	|        |      movea.l d0,a6
    27bc:	|        |      move.l 32(sp),d0
    27c0:	|        |      move.l 28(sp),d1
    27c4:	|        |      jsr -684(a6)
    27c8:	|        |      move.l d0,24(sp)
    27cc:	|        |      move.l 24(sp),d0
    27d0:	|        |      move.l d0,1d0b4 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    27d6:	|        |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    27dc:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueViewBuffer->x = 0;
    27e2:	|        |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    27e8:	|        |      clr.w (a0)
    CstCleanupQueueViewBuffer->y = 0;
    27ea:	|        |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    27f0:	|        |      clr.w 2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    27f4:	|        |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    27fa:	|        |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    27fe:	|        |      movea.l 168(sp),a0
    2802:	|        |      move.l (a0),d0
    2804:	|        |      movea.l d0,a0
    2806:	|        |      cmpa.w #0,a0
    280a:	|        |  ,-- bge.s 2810 <CstPasteChar+0x328>
    280c:	|        |  |   lea 15(a0),a0
    2810:	|        |  '-> move.l a0,d0
    2812:	|        |      asr.l #4,d0
    2814:	|        |      move.l d0,d0
    2816:	|        |      add.w 160(sp),d0
    281a:	|        |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2820:	|        |      add.w 162(sp),d0
    2824:	|        |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2828:	|        |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    282e:	|        |      move.l 128(sp),d0
    2832:	|        |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = 0;
    2836:	|        |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    283c:	|        |      clr.w 12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst; 
    2840:	|        |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2846:	|        |      move.l 136(sp),d0
    284a:	|        |      move.w d0,14(a0)
    284e:	|     ,--|----- bra.w 2d4a <CstPasteChar+0x862>
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2852:	|     |  '----> movea.w 10(sp),a1
    2856:	|     |         movea.l 168(sp),a0
    285a:	|     |         move.l (a0),d0
    285c:	|     |         move.l a1,d1
    285e:	|     |         add.l d0,d1
    2860:	|     |         move.l 1d0dc <winWidth>,d0
    2866:	|     |         cmp.l d1,d0
    2868:	|     |  ,----- bge.w 2af4 <CstPasteChar+0x60c>

    if(x - single->width > (int) winWidth)
    286c:	|     |  |      movea.w 10(sp),a1
    2870:	|     |  |      movea.l 168(sp),a0
    2874:	|     |  |      move.l (a0),d0
    2876:	|     |  |      move.l a1,d1
    2878:	|     |  |      sub.l d0,d1
    287a:	|     |  |      move.l 1d0dc <winWidth>,d0
    2880:	|     |  |      cmp.l d1,d0
    2882:	|     |  |  ,-- bge.s 2896 <CstPasteChar+0x3ae>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2884:	|     |  |  |   pea 1874f <PutChar+0x373>
    288a:	|     |  |  |   jsr 1793a <KPrintF>
    2890:	|     |  |  |   addq.l #4,sp
      return;
    2892:	+-----|--|--|-- bra.w 2ee2 <CstPasteChar+0x9fa>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2896:	|     |  |  '-> clr.w 162(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    289a:	|     |  |      movea.w 10(sp),a1
    289e:	|     |  |      movea.l 168(sp),a0
    28a2:	|     |  |      move.l (a0),d0
    28a4:	|     |  |      add.l a1,d0
    28a6:	|     |  |      move.l d0,d1
    28a8:	|     |  |      move.l 1d0dc <winWidth>,d0
    28ae:	|     |  |      sub.l d0,d1
    28b0:	|     |  |      move.l d1,d0
    28b2:	|     |  |      lsr.l #4,d0
    28b4:	|     |  |      move.w d0,160(sp)
    cutmaskpixel = 0;
    28b8:	|     |  |      clr.w 158(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    28bc:	|     |  |      move.w #-1,156(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    28c2:	|     |  |      movea.l 168(sp),a0
    28c6:	|     |  |      move.l 24(a0),d0
    28ca:	|     |  |      move.l d0,d2
    28cc:	|     |  |      movea.l 168(sp),a0
    28d0:	|     |  |      move.l (a0),d0
    28d2:	|     |  |      move.l 132(sp),-(sp)
    28d6:	|     |  |      move.l d0,-(sp)
    28d8:	|     |  |      jsr 182c6 <__mulsi3>
    28de:	|     |  |      addq.l #8,sp
    28e0:	|     |  |      lsr.l #3,d0
    28e2:	|     |  |      move.l d2,d1
    28e4:	|     |  |      add.l d0,d1
    28e6:	|     |  |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    28ea:	|     |  |      move.l 1d0dc <winWidth>,d0
    28f0:	|     |  |      move.l 136(sp),-(sp)
    28f4:	|     |  |      move.l d0,-(sp)
    28f6:	|     |  |      jsr 182c6 <__mulsi3>
    28fc:	|     |  |      addq.l #8,sp
    28fe:	|     |  |      lsr.l #3,d0
    2900:	|     |  |      move.l 108(sp),d1
    2904:	|     |  |      add.l d0,d1
    2906:	|     |  |      move.w 10(sp),d0
    290a:	|     |  |  ,-- bpl.s 2910 <CstPasteChar+0x428>
    290c:	|     |  |  |   addi.w #15,d0
    2910:	|     |  |  '-> asr.w #4,d0
    2912:	|     |  |      movea.w d0,a0
    2914:	|     |  |      move.l a0,d0
    2916:	|     |  |      add.l a0,d0
    2918:	|     |  |      move.l d1,d2
    291a:	|     |  |      add.l d0,d2
    291c:	|     |  |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2920:	|     |  |      move.l 1d0dc <winWidth>,d0
    2926:	|     |  |      move.l 136(sp),-(sp)
    292a:	|     |  |      move.l d0,-(sp)
    292c:	|     |  |      jsr 182c6 <__mulsi3>
    2932:	|     |  |      addq.l #8,sp
    2934:	|     |  |      lsr.l #3,d0
    2936:	|     |  |      move.l 108(sp),d1
    293a:	|     |  |      add.l d0,d1
    293c:	|     |  |      move.w 10(sp),d0
    2940:	|     |  |  ,-- bpl.s 2946 <CstPasteChar+0x45e>
    2942:	|     |  |  |   addi.w #15,d0
    2946:	|     |  |  '-> asr.w #4,d0
    2948:	|     |  |      movea.w d0,a0
    294a:	|     |  |      move.l a0,d0
    294c:	|     |  |      add.l a0,d0
    294e:	|     |  |      move.l d1,d2
    2950:	|     |  |      add.l d0,d2
    2952:	|     |  |      move.l d2,144(sp)
    bltcon0 = ((single->width%16) << 12);    
    2956:	|     |  |      movea.l 168(sp),a0
    295a:	|     |  |      move.l (a0),d0
    295c:	|     |  |      andi.l #-2147483633,d0
    2962:	|     |  |  ,-- bpl.s 296c <CstPasteChar+0x484>
    2964:	|     |  |  |   subq.l #1,d0
    2966:	|     |  |  |   moveq #-16,d1
    2968:	|     |  |  |   or.l d1,d0
    296a:	|     |  |  |   addq.l #1,d0
    296c:	|     |  |  '-> moveq #12,d2
    296e:	|     |  |      lsl.l d2,d0
    2970:	|     |  |      move.l d0,140(sp)
    
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2974:	|     |  |      move.l 1d0b8 <CstCleanupQueueDrawBuffer>,76(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    297c:	|     |  |      moveq #20,d0
    297e:	|     |  |      move.l d0,72(sp)
    2982:	|     |  |      clr.l 68(sp)
    2986:	|     |  |      move.l 1d188 <SysBase>,d0
    298c:	|     |  |      movea.l d0,a6
    298e:	|     |  |      move.l 72(sp),d0
    2992:	|     |  |      move.l 68(sp),d1
    2996:	|     |  |      jsr -684(a6)
    299a:	|     |  |      move.l d0,64(sp)
    299e:	|     |  |      move.l 64(sp),d0
    29a2:	|     |  |      move.l d0,1d0b8 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    29a8:	|     |  |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    29ae:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    29b4:	|     |  |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    29ba:	|     |  |      move.w 10(sp),d0
    29be:	|     |  |      move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    29c0:	|     |  |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    29c6:	|     |  |      move.l 136(sp),d0
    29ca:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    29ce:	|     |  |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    29d4:	|     |  |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource;
    29d8:	|     |  |      movea.l 168(sp),a0
    29dc:	|     |  |      move.l (a0),d0
    29de:	|     |  |      movea.l d0,a0
    29e0:	|     |  |      cmpa.w #0,a0
    29e4:	|     |  |  ,-- bge.s 29ea <CstPasteChar+0x502>
    29e6:	|     |  |  |   lea 15(a0),a0
    29ea:	|     |  |  '-> move.l a0,d0
    29ec:	|     |  |      asr.l #4,d0
    29ee:	|     |  |      move.l d0,d0
    29f0:	|     |  |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    29f6:	|     |  |      add.w 160(sp),d0
    29fa:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    29fe:	|     |  |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2a04:	|     |  |      move.l 128(sp),d0
    2a08:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    2a0c:	|     |  |      move.w 10(sp),d0
    2a10:	|     |  |  ,-- bpl.s 2a16 <CstPasteChar+0x52e>
    2a12:	|     |  |  |   addi.w #15,d0
    2a16:	|     |  |  '-> asr.w #4,d0
    2a18:	|     |  |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2a1e:	|     |  |      add.w d0,d0
    2a20:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2a24:	|     |  |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2a2a:	|     |  |      move.l 136(sp),d0
    2a2e:	|     |  |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    2a32:	|     |  |      move.l 1d0b4 <CstCleanupQueueViewBuffer>,76(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2a3a:	|     |  |      moveq #20,d1
    2a3c:	|     |  |      move.l d1,60(sp)
    2a40:	|     |  |      clr.l 56(sp)
    2a44:	|     |  |      move.l 1d188 <SysBase>,d0
    2a4a:	|     |  |      movea.l d0,a6
    2a4c:	|     |  |      move.l 60(sp),d0
    2a50:	|     |  |      move.l 56(sp),d1
    2a54:	|     |  |      jsr -684(a6)
    2a58:	|     |  |      move.l d0,52(sp)
    2a5c:	|     |  |      move.l 52(sp),d0
    2a60:	|     |  |      move.l d0,1d0b4 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2a66:	|     |  |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2a6c:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    2a72:	|     |  |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2a78:	|     |  |      move.w 10(sp),d0
    2a7c:	|     |  |      move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2a7e:	|     |  |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2a84:	|     |  |      move.l 136(sp),d0
    2a88:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2a8c:	|     |  |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2a92:	|     |  |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    2a96:	|     |  |      movea.l 168(sp),a0
    2a9a:	|     |  |      move.l (a0),d0
    2a9c:	|     |  |      movea.l d0,a0
    2a9e:	|     |  |      cmpa.w #0,a0
    2aa2:	|     |  |  ,-- bge.s 2aa8 <CstPasteChar+0x5c0>
    2aa4:	|     |  |  |   lea 15(a0),a0
    2aa8:	|     |  |  '-> move.l a0,d0
    2aaa:	|     |  |      asr.l #4,d0
    2aac:	|     |  |      move.l d0,d0
    2aae:	|     |  |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2ab4:	|     |  |      add.w 160(sp),d0
    2ab8:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2abc:	|     |  |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2ac2:	|     |  |      move.l 128(sp),d0
    2ac6:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2aca:	|     |  |      move.w 10(sp),d0
    2ace:	|     |  |  ,-- bpl.s 2ad4 <CstPasteChar+0x5ec>
    2ad0:	|     |  |  |   addi.w #15,d0
    2ad4:	|     |  |  '-> asr.w #4,d0
    2ad6:	|     |  |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2adc:	|     |  |      add.w d0,d0
    2ade:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;     
    2ae2:	|     |  |      movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2ae8:	|     |  |      move.l 136(sp),d0
    2aec:	|     |  |      move.w d0,14(a0)
    2af0:	|     +--|----- bra.w 2d4a <CstPasteChar+0x862>
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2af4:	|     |  '----> move.w #1,162(sp)
    cutwordssource = 0;
    2afa:	|     |         clr.w 160(sp)
    cutmaskpixel = 0;
    2afe:	|     |         clr.w 158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2b02:	|     |         clr.w 156(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    2b06:	|     |         movea.l 168(sp),a0
    2b0a:	|     |         move.l 24(a0),d0
    2b0e:	|     |         move.l d0,d2
    2b10:	|     |         movea.l 168(sp),a0
    2b14:	|     |         move.l (a0),d0
    2b16:	|     |         movea.l d0,a0
    2b18:	|     |         cmpa.w #0,a0
    2b1c:	|     |     ,-- bge.s 2b22 <CstPasteChar+0x63a>
    2b1e:	|     |     |   lea 15(a0),a0
    2b22:	|     |     '-> move.l a0,d0
    2b24:	|     |         asr.l #4,d0
    2b26:	|     |         move.l 132(sp),-(sp)
    2b2a:	|     |         move.l d0,-(sp)
    2b2c:	|     |         jsr 182c6 <__mulsi3>
    2b32:	|     |         addq.l #8,sp
    2b34:	|     |         add.l d0,d0
    2b36:	|     |         move.l d2,d1
    2b38:	|     |         add.l d0,d1
    2b3a:	|     |         move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2b3e:	|     |         move.l 1d0dc <winWidth>,d0
    2b44:	|     |         move.l 136(sp),-(sp)
    2b48:	|     |         move.l d0,-(sp)
    2b4a:	|     |         jsr 182c6 <__mulsi3>
    2b50:	|     |         addq.l #8,sp
    2b52:	|     |         lsr.l #3,d0
    2b54:	|     |         move.l 108(sp),d1
    2b58:	|     |         add.l d0,d1
    2b5a:	|     |         move.w 10(sp),d0
    2b5e:	|     |     ,-- bpl.s 2b64 <CstPasteChar+0x67c>
    2b60:	|     |     |   addi.w #15,d0
    2b64:	|     |     '-> asr.w #4,d0
    2b66:	|     |         movea.w d0,a0
    2b68:	|     |         move.l a0,d0
    2b6a:	|     |         add.l a0,d0
    2b6c:	|     |         move.l d1,d2
    2b6e:	|     |         add.l d0,d2
    2b70:	|     |         move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2b74:	|     |         move.l 1d0dc <winWidth>,d0
    2b7a:	|     |         move.l 136(sp),-(sp)
    2b7e:	|     |         move.l d0,-(sp)
    2b80:	|     |         jsr 182c6 <__mulsi3>
    2b86:	|     |         addq.l #8,sp
    2b88:	|     |         lsr.l #3,d0
    2b8a:	|     |         move.l 108(sp),d1
    2b8e:	|     |         add.l d0,d1
    2b90:	|     |         move.w 10(sp),d0
    2b94:	|     |     ,-- bpl.s 2b9a <CstPasteChar+0x6b2>
    2b96:	|     |     |   addi.w #15,d0
    2b9a:	|     |     '-> asr.w #4,d0
    2b9c:	|     |         movea.w d0,a0
    2b9e:	|     |         move.l a0,d0
    2ba0:	|     |         add.l a0,d0
    2ba2:	|     |         move.l d1,d2
    2ba4:	|     |         add.l d0,d2
    2ba6:	|     |         move.l d2,144(sp)
    bltcon0 = ((x%16) << 12);
    2baa:	|     |         move.w 10(sp),d0
    2bae:	|     |         andi.w #-32753,d0
    2bb2:	|     |     ,-- bpl.s 2bbc <CstPasteChar+0x6d4>
    2bb4:	|     |     |   subq.w #1,d0
    2bb6:	|     |     |   ori.w #-16,d0
    2bba:	|     |     |   addq.w #1,d0
    2bbc:	|     |     '-> ext.l d0
    2bbe:	|     |         moveq #12,d1
    2bc0:	|     |         lsl.l d1,d0
    2bc2:	|     |         move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2bc6:	|     |         move.l 1d0b8 <CstCleanupQueueDrawBuffer>,104(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2bce:	|     |         moveq #20,d2
    2bd0:	|     |         move.l d2,100(sp)
    2bd4:	|     |         clr.l 96(sp)
    2bd8:	|     |         move.l 1d188 <SysBase>,d0
    2bde:	|     |         movea.l d0,a6
    2be0:	|     |         move.l 100(sp),d0
    2be4:	|     |         move.l 96(sp),d1
    2be8:	|     |         jsr -684(a6)
    2bec:	|     |         move.l d0,92(sp)
    2bf0:	|     |         move.l 92(sp),d0
    2bf4:	|     |         move.l d0,1d0b8 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2bfa:	|     |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2c00:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    2c06:	|     |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2c0c:	|     |         move.w 10(sp),d0
    2c10:	|     |         move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    2c12:	|     |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2c18:	|     |         move.l 136(sp),d0
    2c1c:	|     |         move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2c20:	|     |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2c26:	|     |         clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2c2a:	|     |         movea.l 168(sp),a0
    2c2e:	|     |         move.l (a0),d0
    2c30:	|     |         movea.l d0,a0
    2c32:	|     |         cmpa.w #0,a0
    2c36:	|     |     ,-- bge.s 2c3c <CstPasteChar+0x754>
    2c38:	|     |     |   lea 15(a0),a0
    2c3c:	|     |     '-> move.l a0,d0
    2c3e:	|     |         asr.l #4,d0
    2c40:	|     |         move.l d0,d0
    2c42:	|     |         add.w 160(sp),d0
    2c46:	|     |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2c4c:	|     |         add.w 162(sp),d0
    2c50:	|     |         move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2c54:	|     |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2c5a:	|     |         move.l 128(sp),d0
    2c5e:	|     |         move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    2c62:	|     |         move.w 10(sp),d0
    2c66:	|     |     ,-- bpl.s 2c6c <CstPasteChar+0x784>
    2c68:	|     |     |   addi.w #15,d0
    2c6c:	|     |     '-> asr.w #4,d0
    2c6e:	|     |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2c74:	|     |         add.w d0,d0
    2c76:	|     |         move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2c7a:	|     |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2c80:	|     |         move.l 136(sp),d0
    2c84:	|     |         move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    2c88:	|     |         move.l 1d0b4 <CstCleanupQueueViewBuffer>,104(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2c90:	|     |         moveq #20,d0
    2c92:	|     |         move.l d0,88(sp)
    2c96:	|     |         clr.l 84(sp)
    2c9a:	|     |         move.l 1d188 <SysBase>,d0
    2ca0:	|     |         movea.l d0,a6
    2ca2:	|     |         move.l 88(sp),d0
    2ca6:	|     |         move.l 84(sp),d1
    2caa:	|     |         jsr -684(a6)
    2cae:	|     |         move.l d0,80(sp)
    2cb2:	|     |         move.l 80(sp),d0
    2cb6:	|     |         move.l d0,1d0b4 <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2cbc:	|     |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2cc2:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    2cc8:	|     |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2cce:	|     |         move.w 10(sp),d0
    2cd2:	|     |         move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2cd4:	|     |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2cda:	|     |         move.l 136(sp),d0
    2cde:	|     |         move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2ce2:	|     |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2ce8:	|     |         clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2cec:	|     |         movea.l 168(sp),a0
    2cf0:	|     |         move.l (a0),d0
    2cf2:	|     |         movea.l d0,a0
    2cf4:	|     |         cmpa.w #0,a0
    2cf8:	|     |     ,-- bge.s 2cfe <CstPasteChar+0x816>
    2cfa:	|     |     |   lea 15(a0),a0
    2cfe:	|     |     '-> move.l a0,d0
    2d00:	|     |         asr.l #4,d0
    2d02:	|     |         move.l d0,d0
    2d04:	|     |         add.w 160(sp),d0
    2d08:	|     |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2d0e:	|     |         add.w 162(sp),d0
    2d12:	|     |         move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2d16:	|     |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2d1c:	|     |         move.l 128(sp),d0
    2d20:	|     |         move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2d24:	|     |         move.w 10(sp),d0
    2d28:	|     |     ,-- bpl.s 2d2e <CstPasteChar+0x846>
    2d2a:	|     |     |   addi.w #15,d0
    2d2e:	|     |     '-> asr.w #4,d0
    2d30:	|     |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2d36:	|     |         add.w d0,d0
    2d38:	|     |         move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;    
    2d3c:	|     |         movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    2d42:	|     |         move.l 136(sp),d0
    2d46:	|     |         move.w d0,14(a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2d4a:	|     '-------> moveq #0,d0
    2d4c:	|               move.w 158(sp),d0
    2d50:	|               moveq #0,d1
    2d52:	|               not.w d1
    2d54:	|               asr.l d0,d1
    2d56:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2d5a:	|               moveq #0,d1
    2d5c:	|               move.w 160(sp),d1
    2d60:	|               moveq #0,d0
    2d62:	|               move.w 162(sp),d0
    2d66:	|               sub.l d0,d1
    2d68:	|               move.l d1,d0
    2d6a:	|               add.w d0,d0
    2d6c:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2d70:	|               move.l 1d0dc <winWidth>,d0
    2d76:	|               lsr.l #3,d0
    2d78:	|               move.l d0,d2
    2d7a:	|               move.w 160(sp),d1
    2d7e:	|               sub.w 162(sp),d1
    2d82:	|               move.l 124(sp),d0
    2d86:	|               sub.w d0,d1
    2d88:	|               move.w d1,d0
    2d8a:	|               add.w d1,d0
    2d8c:	|               add.w d2,d0
    2d8e:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2d92:	|               move.l 1d0dc <winWidth>,d0
    2d98:	|               lsr.l #3,d0
    2d9a:	|               move.l d0,d2
    2d9c:	|               move.w 160(sp),d1
    2da0:	|               sub.w 162(sp),d1
    2da4:	|               move.l 124(sp),d0
    2da8:	|               sub.w d0,d1
    2daa:	|               move.w d1,d0
    2dac:	|               add.w d1,d0
    2dae:	|               add.w d2,d0
    2db0:	|               move.w d0,16(sp)

  WaitBlit();
    2db4:	|               move.l 1d194 <GfxBase>,d0
    2dba:	|               movea.l d0,a6
    2dbc:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2dc0:	|               movea.l 112(sp),a0
    2dc4:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    2dca:	|               movea.l 112(sp),a0
    2dce:	|               move.w 156(sp),70(a0)
  custom->bltamod = bltamod;
    2dd4:	|               move.w 20(sp),d0
    2dd8:	|               movea.l 112(sp),a0
    2ddc:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2de0:	|               move.w 18(sp),d0
    2de4:	|               movea.l 112(sp),a0
    2de8:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2dec:	|               move.w 16(sp),d0
    2df0:	|               movea.l 112(sp),a0
    2df4:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2df8:	|               move.l 1d0dc <winWidth>,d0
    2dfe:	|               lsr.l #3,d0
    2e00:	|               move.l d0,d1
    2e02:	|               move.l 1d0e0 <winHeight>,d0
    2e08:	|               move.l d0,d0
    2e0a:	|               move.w d1,d2
    2e0c:	|               muls.w d0,d2
    2e0e:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2e12:	|               move.w 1d096 <textPaletteIndex>,122(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2e1a:	|               move.w 122(sp),d0
    2e1e:	|               andi.w #1,d0
    2e22:	|               move.w d0,12(sp)
  if(tmp2) {
    2e26:	|        ,----- beq.s 2e30 <CstPasteChar+0x948>
    minterm = 0xbfa;
    2e28:	|        |      move.w #3066,120(sp)
    2e2e:	|        |  ,-- bra.s 2e36 <CstPasteChar+0x94e>
  } else {
    minterm = 0xb0a;
    2e30:	|        '--|-> move.w #2826,120(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2e36:	|           '-> clr.l 116(sp)
    2e3a:	|     ,-------- bra.w 2ed8 <CstPasteChar+0x9f0>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2e3e:	|  ,--|-------> move.l 140(sp),d0
    2e42:	|  |  |         add.w 120(sp),d0
    2e46:	|  |  |         movea.l 112(sp),a0
    2e4a:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2e4e:	|  |  |         move.l 152(sp),d0
    2e52:	|  |  |         movea.l 112(sp),a0
    2e56:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2e5a:	|  |  |         move.l 148(sp),d0
    2e5e:	|  |  |         movea.l 112(sp),a0
    2e62:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2e66:	|  |  |         move.l 144(sp),d0
    2e6a:	|  |  |         movea.l 112(sp),a0
    2e6e:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2e72:	|  |  |         move.l 128(sp),d0
    2e76:	|  |  |         lsl.w #6,d0
    2e78:	|  |  |         move.l 124(sp),d1
    2e7c:	|  |  |         add.w d1,d0
    2e7e:	|  |  |         sub.w 160(sp),d0
    2e82:	|  |  |         add.w 162(sp),d0
    2e86:	|  |  |         movea.l 112(sp),a0
    2e8a:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2e8e:	|  |  |         moveq #0,d0
    2e90:	|  |  |         move.w 14(sp),d0
    2e94:	|  |  |         add.l d0,148(sp)
    bltdpt += bltcptplus;
    2e98:	|  |  |         moveq #0,d0
    2e9a:	|  |  |         move.w 14(sp),d0
    2e9e:	|  |  |         add.l d0,144(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2ea2:	|  |  |         move.w 122(sp),d0
    2ea6:	|  |  |         lsr.w #1,d0
    2ea8:	|  |  |         move.w d0,122(sp)
    tmp2 = tmp & 0x01;
    2eac:	|  |  |         move.w 122(sp),d1
    2eb0:	|  |  |         andi.w #1,d1
    2eb4:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2eb8:	|  |  |  ,----- beq.s 2ec2 <CstPasteChar+0x9da>
      minterm = 0xbfa;
    2eba:	|  |  |  |      move.w #3066,120(sp)
    2ec0:	|  |  |  |  ,-- bra.s 2ec8 <CstPasteChar+0x9e0>
    } else {
      minterm = 0xb0a;
    2ec2:	|  |  |  '--|-> move.w #2826,120(sp)
    }   

    WaitBlit();     
    2ec8:	|  |  |     '-> move.l 1d194 <GfxBase>,d0
    2ece:	|  |  |         movea.l d0,a6
    2ed0:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2ed4:	|  |  |         addq.l #1,116(sp)
    2ed8:	|  |  '-------> moveq #4,d2
    2eda:	|  |            cmp.l 116(sp),d2
    2ede:	|  '----------- bge.w 2e3e <CstPasteChar+0x956>
  }   
  //custom->color[0] = 0x000;
}
    2ee2:	'-------------> move.l (sp)+,d2
    2ee4:	                movea.l (sp)+,a6
    2ee6:	                lea 156(sp),sp
    2eea:	                rts

00002eec <CstRestoreScreen>:


void CstRestoreScreen()
{
    2eec:	                   lea -24(sp),sp
    2ef0:	                   move.l a6,-(sp)
    2ef2:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2ef4:	                   move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2efc:	                   move.l 1d0b8 <CstCleanupQueueDrawBuffer>,d0
    2f02:	,----------------- beq.w 3114 <CstRestoreScreen+0x228>
    2f06:	|                  move.l 1d0b0 <CstDrawBuffer>,d0
    2f0c:	+----------------- beq.w 3114 <CstRestoreScreen+0x228>
    return;
  } 

  WaitBlit();
    2f10:	|                  move.l 1d194 <GfxBase>,d0
    2f16:	|                  movea.l d0,a6
    2f18:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2f1c:	|                  movea.l 16(sp),a0
    2f20:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2f26:	|                  movea.l 16(sp),a0
    2f2a:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2f30:	|                  movea.l 16(sp),a0
    2f34:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2f3a:	|     ,----------- bra.w 3108 <CstRestoreScreen+0x21c>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3
    2f3e:	|  ,--|----------> movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2f44:	|  |  |            move.l 4(a0),d0
    2f48:	|  |  |     ,----- beq.s 2f5e <CstRestoreScreen+0x72>
    2f4a:	|  |  |     |      movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2f50:	|  |  |     |      movea.l 4(a0),a0
    2f54:	|  |  |     |      move.l 16(a0),d0
    2f58:	|  |  |     |      moveq #2,d1
    2f5a:	|  |  |     |      cmp.l d0,d1
    2f5c:	|  |  |     |  ,-- bge.s 2f6c <CstRestoreScreen+0x80>
      || CstCleanupQueueDrawBuffer->person == NULL)
    2f5e:	|  |  |     '--|-> movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2f64:	|  |  |        |   move.l 4(a0),d0
    2f68:	|  |  |  ,-----|-- bne.w 30d6 <CstRestoreScreen+0x1ea>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2f6c:	|  |  |  |     '-> move.l 1d0dc <winWidth>,d0
    2f72:	|  |  |  |         lsr.l #3,d0
    2f74:	|  |  |  |         move.l d0,d1
    2f76:	|  |  |  |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2f7c:	|  |  |  |         move.w 8(a0),d0
    2f80:	|  |  |  |         add.w d0,d0
    2f82:	|  |  |  |         sub.w d0,d1
    2f84:	|  |  |  |         movea.l 16(sp),a0
    2f88:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2f8c:	|  |  |  |         move.l 1d0dc <winWidth>,d0
    2f92:	|  |  |  |         lsr.l #3,d0
    2f94:	|  |  |  |         move.l d0,d1
    2f96:	|  |  |  |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2f9c:	|  |  |  |         move.w 8(a0),d0
    2fa0:	|  |  |  |         add.w d0,d0
    2fa2:	|  |  |  |         sub.w d0,d1
    2fa4:	|  |  |  |         movea.l 16(sp),a0
    2fa8:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2fac:	|  |  |  |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2fb2:	|  |  |  |         move.w 14(a0),d0
    2fb6:	|  |  |  |         move.w d0,d0
    2fb8:	|  |  |  |         andi.l #65535,d0
    2fbe:	|  |  |  |         move.l 1d0dc <winWidth>,d1
    2fc4:	|  |  |  |         move.l d1,-(sp)
    2fc6:	|  |  |  |         move.l d0,-(sp)
    2fc8:	|  |  |  |         jsr 182c6 <__mulsi3>
    2fce:	|  |  |  |         addq.l #8,sp
    2fd0:	|  |  |  |         move.l d0,d1
    2fd2:	|  |  |  |         lsr.l #3,d1
    2fd4:	|  |  |  |         move.l 1d09e <CstBackDrop>,d0
    2fda:	|  |  |  |         add.l d0,d1
    2fdc:	|  |  |  |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2fe2:	|  |  |  |         move.w 12(a0),d0
    2fe6:	|  |  |  |         move.w d0,d0
    2fe8:	|  |  |  |         andi.l #65535,d0
    2fee:	|  |  |  |         move.l d1,d2
    2ff0:	|  |  |  |         add.l d0,d2
    2ff2:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2ff6:	|  |  |  |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    2ffc:	|  |  |  |         move.w 14(a0),d0
    3000:	|  |  |  |         move.w d0,d0
    3002:	|  |  |  |         andi.l #65535,d0
    3008:	|  |  |  |         move.l 1d0dc <winWidth>,d1
    300e:	|  |  |  |         move.l d1,-(sp)
    3010:	|  |  |  |         move.l d0,-(sp)
    3012:	|  |  |  |         jsr 182c6 <__mulsi3>
    3018:	|  |  |  |         addq.l #8,sp
    301a:	|  |  |  |         move.l d0,d1
    301c:	|  |  |  |         lsr.l #3,d1
    301e:	|  |  |  |         move.l 1d0b0 <CstDrawBuffer>,d0
    3024:	|  |  |  |         add.l d0,d1
    3026:	|  |  |  |         movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    302c:	|  |  |  |         move.w 12(a0),d0
    3030:	|  |  |  |         move.w d0,d0
    3032:	|  |  |  |         andi.l #65535,d0
    3038:	|  |  |  |         move.l d1,d2
    303a:	|  |  |  |         add.l d0,d2
    303c:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3040:	|  |  |  |         clr.l 20(sp)
    3044:	|  |  |  |     ,-- bra.w 30cc <CstRestoreScreen+0x1e0>
      {
        custom->bltapt = (APTR) bltapt;
    3048:	|  |  |  |  ,--|-> move.l 28(sp),d0
    304c:	|  |  |  |  |  |   movea.l 16(sp),a0
    3050:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    3054:	|  |  |  |  |  |   move.l 24(sp),d0
    3058:	|  |  |  |  |  |   movea.l 16(sp),a0
    305c:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    3060:	|  |  |  |  |  |   movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    3066:	|  |  |  |  |  |   move.w 10(a0),d0
    306a:	|  |  |  |  |  |   lsl.w #6,d0
    306c:	|  |  |  |  |  |   movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    3072:	|  |  |  |  |  |   move.w 8(a0),d1
    3076:	|  |  |  |  |  |   add.w d1,d0
    3078:	|  |  |  |  |  |   movea.l 16(sp),a0
    307c:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    3080:	|  |  |  |  |  |   move.l 1d0dc <winWidth>,d0
    3086:	|  |  |  |  |  |   lsr.l #3,d0
    3088:	|  |  |  |  |  |   move.l 1d0e0 <winHeight>,d1
    308e:	|  |  |  |  |  |   move.l d1,-(sp)
    3090:	|  |  |  |  |  |   move.l d0,-(sp)
    3092:	|  |  |  |  |  |   jsr 182c6 <__mulsi3>
    3098:	|  |  |  |  |  |   addq.l #8,sp
    309a:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    309e:	|  |  |  |  |  |   move.l 1d0dc <winWidth>,d0
    30a4:	|  |  |  |  |  |   lsr.l #3,d0
    30a6:	|  |  |  |  |  |   move.l 1d0e0 <winHeight>,d1
    30ac:	|  |  |  |  |  |   move.l d1,-(sp)
    30ae:	|  |  |  |  |  |   move.l d0,-(sp)
    30b0:	|  |  |  |  |  |   jsr 182c6 <__mulsi3>
    30b6:	|  |  |  |  |  |   addq.l #8,sp
    30b8:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    30bc:	|  |  |  |  |  |   move.l 1d194 <GfxBase>,d0
    30c2:	|  |  |  |  |  |   movea.l d0,a6
    30c4:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    30c8:	|  |  |  |  |  |   addq.l #1,20(sp)
    30cc:	|  |  |  |  |  '-> moveq #4,d0
    30ce:	|  |  |  |  |      cmp.l 20(sp),d0
    30d2:	|  |  |  |  '----- bge.w 3048 <CstRestoreScreen+0x15c>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    30d6:	|  |  |  '-------> move.l 1d0b8 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    30de:	|  |  |            movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    30e4:	|  |  |            move.l 16(a0),d0
    30e8:	|  |  |            move.l d0,1d0b8 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    30ee:	|  |  |            move.l 12(sp),8(sp)
    30f4:	|  |  |            move.l 1d188 <SysBase>,d0
    30fa:	|  |  |            movea.l d0,a6
    30fc:	|  |  |            movea.l 8(sp),a1
    3100:	|  |  |            jsr -690(a6)
    todelete = NULL;
    3104:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    3108:	|  |  '----------> move.l 1d0b8 <CstCleanupQueueDrawBuffer>,d0
    310e:	|  '-------------- bne.w 2f3e <CstRestoreScreen+0x52>
    3112:	|              ,-- bra.s 3116 <CstRestoreScreen+0x22a>
    return;
    3114:	'--------------|-> nop
  }
  //custom->color[0] = 0x000;
}
    3116:	               '-> move.l (sp)+,d2
    3118:	                   movea.l (sp)+,a6
    311a:	                   lea 24(sp),sp
    311e:	                   rts

00003120 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    3120:	                                                                                           lea -40(sp),sp
    3124:	                                                                                           movem.l d2-d7/a2-a6,-(sp)
    3128:	                                                                                           movea.l 88(sp),a2
    312c:	                                                                                           move.l 92(sp),64(sp)
    3132:	                                                                                           move.l 96(sp),d4
    3136:	                                                                                           movea.l 100(sp),a3
    313a:	                                                                                           move.w d4,d2
    313c:	                                                                                           move.w a3,d3
    313e:	                                                                                           move.w 106(sp),52(sp)
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    3144:	                                                                                           movea.w a3,a5
    3146:	                                                                                           movea.w d4,a6
    3148:	                                                                                           move.l a5,-(sp)
    314a:	                                                                                           move.l a6,-(sp)
    314c:	                                                                                           move.l 1d1e4 <zBuffer>,-(sp)
    3152:	                                                                                           move.l a2,-(sp)
    3154:	                                                                                           jsr 15e4 <CstDrawZBuffer>
    315a:	                                                                                           move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    315c:	                                                                                           lea 16(sp),sp
    3160:	                                                                                           cmpi.w #1,52(sp)
    3166:	                                                            ,----------------------------- beq.w 364e <CstScaleSprite+0x52e>
    316a:	                                                            |                              cmpi.w #2,52(sp)
    3170:	                                                            |                       ,----- beq.w 34a4 <CstScaleSprite+0x384>
    3174:	                                                            |                       |      suba.l a4,a4
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    3176:	                                                            |  ,--------------------|----> move.l 4(a2),d1
    317a:	                                                            |  |                    |      move.l a5,d0
    317c:	                                                            |  |                    |      add.l d1,d0
  if( y < 0) {
    317e:	                                                            |  |                    |      tst.w d3
    3180:	                                                            |  |           ,--------|----- blt.w 34c0 <CstScaleSprite+0x3a0>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    3184:	                                                            |  |           |  ,-----|----> movea.l 1d0e0 <winHeight>,a0
    318a:	                                                            |  |           |  |     |      cmp.l a0,d0
    318c:	                                                            |  |  ,--------|--|-----|----- ble.w 3658 <CstScaleSprite+0x538>
    if(y  > (int) winHeight) {
    3190:	                                                            |  |  |        |  |     |      cmpa.l a5,a0
    3192:	                     ,--------------------------------------|--|--|--------|--|-----|----- blt.w 378a <CstScaleSprite+0x66a>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    3196:	                     |                                      |  |  |        |  |     |      move.l a5,d7
    ystartsrc = 0;
    blitheight = winHeight-y;
    3198:	                     |                                      |  |  |        |  |     |      suba.l a5,a0
    319a:	                     |                                      |  |  |        |  |     |      move.l a0,48(sp)
    ystartsrc = 0;
    319e:	                     |                                      |  |  |        |  |     |      moveq #0,d3


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    31a0:	                     |                                      |  |  |  ,-----|--|-----|----> move.l (a2),d1
    31a2:	                     |                                      |  |  |  |     |  |     |      move.l a6,d0
    31a4:	                     |                                      |  |  |  |     |  |     |      add.l d1,d0
  if( x < 0) 
    31a6:	                     |                                      |  |  |  |     |  |     |      tst.w d2
    31a8:	                     |                                      |  |  |  |     |  |  ,--|----- blt.w 34dc <CstScaleSprite+0x3bc>
      CstCleanupQueueViewBuffer->height = blitheight; 
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    }           
  } 
  else if(x + single->width > (int) winWidth) 
    31ac:	                     |                                      |  |  |  |     |  |  |  |  ,-> movea.l 1d0dc <winWidth>,a5
    31b2:	                     |                                      |  |  |  |     |  |  |  |  |   cmp.l a5,d0
    31b4:	                     |                                      |  |  |  |  ,--|--|--|--|--|-- ble.w 3664 <CstScaleSprite+0x544>
  { //Rightmost part outside screen   

    if(x - single->width > (int) winWidth)
    31b8:	                     |                                      |  |  |  |  |  |  |  |  |  |   suba.l d1,a6
    31ba:	                     |                                      |  |  |  |  |  |  |  |  |  |   cmpa.l a5,a6
    31bc:	                     +--------------------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 378a <CstScaleSprite+0x66a>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    31c0:	                     |                                      |  |  |  |  |  |  |  |  |  |   sub.l a5,d0
    31c2:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #4,d0
    31c4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,56(sp)
    31c8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    31ca:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 182c6 <__mulsi3>,a6
    31d0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    31d2:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    31d4:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    31d6:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    31d8:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    31da:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    31dc:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    31e0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    31e4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,d2
    31e6:	                     |                                      |  |  |  |  |  |  |  |  |  |   asr.w #4,d2
    31e8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d7,-(sp)
    31ea:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,-(sp)
    31ec:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    31ee:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    31f0:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    31f2:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.w d2,a0
    31f4:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a0
    31f6:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a4
    31f8:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea (0,a4,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    31fc:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,d3
    31fe:	                     |                                      |  |  |  |  |  |  |  |  |  |   andi.w #15,d3
    3202:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,76(sp)
    3206:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    3208:	                     |                                      |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    320a:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    320c:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d3
    320e:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d3,d1
    3210:	                     |                                      |  |  |  |  |  |  |  |  |  |   addi.l #4042,d1
    3216:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,72(sp)
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    321a:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    3220:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a4,d1
    3222:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d0,d1
    3224:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d1,a4

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3226:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 1d0b8 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    322c:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l #119176,68(sp)
    3234:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 1d188 <SysBase>,a0
    323a:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    323c:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    323e:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    3240:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    3244:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    3246:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1d0b8 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    324c:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d3,16(a0)

    CstCleanupQueueDrawBuffer->x = x;
    3250:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3252:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    3256:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    325c:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    325e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    3260:	         ,-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3a66 <CstScaleSprite+0x946>
    3264:	         |           |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3266:	         |           |                                      |  |  |  |  |  |  |  |  |  |   movea.w 58(sp),a1
    326a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    326c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3270:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),d3
    3274:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3278:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d2,d2
    327a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,78(sp)
    327e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3282:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,48(sp)
    3286:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,14(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    } 
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    328a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 58(sp),d7
    328e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d7,d7
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    3290:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 74(sp),72(sp)
  custom->bltcon1 = bltcon1;  
    3296:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 76(sp),d2
    329a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    329c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   lsl.w d0,d2
    329e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,76(sp)
    if( destinationtype != SCREEN)
    32a2:	         |           |                                      |  |  |  |  |  |  |  |  |  |   cmpi.w #1,52(sp)
    32a8:	      ,--|-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 3ad6 <CstScaleSprite+0x9b6>
      next = CstCleanupQueueViewBuffer;
    32ac:	      |  |  ,--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1d0b4 <CstCleanupQueueViewBuffer>,d2
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    32b2:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    32b6:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    32b8:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    32ba:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    32bc:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    32c0:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    32c2:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1d0b4 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    32c8:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d2,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    32cc:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    32ce:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    32d2:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    32d8:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    32da:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    32dc:	   ,--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3b20 <CstScaleSprite+0xa00>
    32e0:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    32e2:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.w 58(sp),a1
    32e6:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    32e8:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    32ec:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    32f0:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 78(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    32f6:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 48(sp),14(a0)
    32fc:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3302:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3304:	,--|--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1d0dc <winWidth>,d0
    330a:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    330c:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    330e:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    3310:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   tst.l d1
    3312:	|  |  |  |  |  ,-----|--------------------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3866 <CstScaleSprite+0x746>
    3316:	|  |  |  |  |  |  ,--|--------------------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    3318:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    331a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lea 1d194 <GfxBase>,a3
    3320:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    3322:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    3326:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb2b4e>
  custom->bltalwm = bltalwm;
    332e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2b50>
  custom->bltamod = bltamod;
    3334:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2b6e>
  custom->bltbmod = bltbmod;
    333a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2b6c>
  custom->bltcmod = bltcmod;
    3340:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2b6a>
  custom->bltdmod = bltdmod;
    3346:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2b70>
  custom->bltcon0 = bltcon0;
    334c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb2b4a>
  custom->bltcon1 = bltcon1;  
    3354:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb2b4c>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    335c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    335e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsl.w #6,d3
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3360:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d7
    3362:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   asr.l #3,d7
    3364:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d7
    bltbpt += bltbptplus;
    3368:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d7
  UWORD bltcptplus = winWidth/8*winHeight;
    336e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 1d0dc <winWidth>,d4
    3374:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    3376:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 1d0e2 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    337c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    3382:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
    custom->bltbpt = (APTR) bltbpt;
    3388:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb2b56>
    custom->bltcpt = (APTR) bltcpt;
    3390:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2b52>
    custom->bltdpt = (APTR) bltdpt;
    3396:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    339c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   tst.l d0
    339e:	|  |  |  |  |  |  |  |                       ,--------------|--|--|--|--|--|--|--|--|--|-- blt.w 38f4 <CstScaleSprite+0x7d4>
    33a2:	|  |  |  |  |  |  |  |                       |     ,--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    33a4:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    33a6:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    33a8:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    33aa:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
    bltbpt += bltbptplus;
    33b0:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a4
    33b4:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    33b6:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    33b8:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    33ba:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33be:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33c0:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
    custom->bltbpt = (APTR) bltbpt;
    33c6:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2b56>
    custom->bltcpt = (APTR) bltcpt;
    33cc:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2b52>
    custom->bltdpt = (APTR) bltdpt;
    33d2:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33d8:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    33da:	|  |  |  |  |  |  |  |                 ,-----|-----|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3934 <CstScaleSprite+0x814>
    33de:	|  |  |  |  |  |  |  |                 |     |  ,--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    33e0:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    33e2:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    33e4:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    33e6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
    bltbpt += bltbptplus;
    33ec:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    33ee:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    33f0:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    33f2:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    33f6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    33f8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
    custom->bltbpt = (APTR) bltbpt;
    33fe:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2b56>
    custom->bltcpt = (APTR) bltcpt;
    3404:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2b52>
    custom->bltdpt = (APTR) bltdpt;
    340a:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3410:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    3412:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3970 <CstScaleSprite+0x850>
    3416:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3418:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    341a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    341c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    341e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
    bltbpt += bltbptplus;
    3424:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    3426:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    3428:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    342a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    342e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3430:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
    custom->bltbpt = (APTR) bltbpt;
    3436:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2b56>
    custom->bltcpt = (APTR) bltcpt;
    343c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2b52>
    custom->bltdpt = (APTR) bltdpt;
    3442:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3448:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    344a:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 39ac <CstScaleSprite+0x88c>
    344e:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3450:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3452:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    3454:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3456:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
    bltbpt += bltbptplus;
    345c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a4,d7
    bltcpt += bltcptplus;
    345e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    3460:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    3462:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3466:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3468:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
    custom->bltbpt = (APTR) bltbpt;
    346e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d7,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2b56>
    custom->bltcpt = (APTR) bltcpt;
    3474:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2b52>
    custom->bltdpt = (APTR) bltdpt;
    347a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3480:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    3482:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 39e8 <CstScaleSprite+0x8c8>
    3486:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    348a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d2
    348c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    348e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
    WaitBlit();
    3494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    3496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    349a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    349e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 40(sp),sp
    34a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    34a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  '--|-> move.w #2,1d0aa <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    34ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |     |   movea.l 1d09e <CstBackDrop>,a4
    if(y + single->height < 0) {
    34b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    34b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |     |   move.l a5,d0
    34b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    34ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |     |   tst.w d3
    34bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  '--|-----|-- bge.w 3184 <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    34c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  '-----|-----|-> tst.l d0
    34c2:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|--------|-----|-- blt.w 378a <CstScaleSprite+0x66a>
    ystartsrc = y*-1;
    34c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   move.l a5,d3
    34c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   neg.l d3
    blitheight = single->height+y;
    34ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   move.l d0,48(sp)
    ystartdst = 0;
    34ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   moveq #0,d7
    if(x + single->width < 0) {
    34d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   move.l (a2),d1
    34d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   move.l a6,d0
    34d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   add.l d1,d0
  if( x < 0) 
    34d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     |   tst.w d2
    34d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        |     '-- bge.w 31ac <CstScaleSprite+0x8c>
    if(x + single->width < 0) {
    34dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |        '-------> tst.l d0
    34de:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|----------------- blt.w 378a <CstScaleSprite+0x66a>
    cutwordssource = (x*-1)/16; 
    34e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d4,d0
    34e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addi.w #15,d0
    34e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  asr.w #4,d0
    34ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.w d0
    34ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,56(sp)
    34f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    34f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l a6,d0
    34f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.l d0
    34f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  moveq #15,d2
    34f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  and.l d0,d2
    34fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d2,78(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    34fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lea 182c6 <__mulsi3>,a6
    3504:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 1d0dc <winWidth>,-(sp)
    350a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d7,-(sp)
    350c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d1,52(sp)
    3510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  jsr (a6)
    3512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addq.l #8,sp
    3514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    3516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 44(sp),d1
    351a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  tst.l d2
    351c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  ,-------------- beq.w 37a0 <CstScaleSprite+0x680>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea (-2,a4,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w 56(sp),d2
    3528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               subq.w #1,d2
    352a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,82(sp)
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    352e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w #16,a0
    3532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               suba.l 78(sp),a0
    3536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l a0,d2
    3538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #12,d0
    353a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    353c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addi.w #4042,d2
    3540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,72(sp)
  custom->bltcon1 = bltcon1;  
    3544:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a0,d2
    3546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.w d0,d2
    3548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,76(sp)
      extrawords = 1;
    354c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    354e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w 56(sp),a4
    3552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l a4,a4
    3554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d3,-(sp)
    3556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,-(sp)
    3558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr (a6)
    355a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addq.l #8,sp
    355c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsr.l #3,d0
    355e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d5
    3560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l 24(a2),a4
    3566:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d0
    3568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    356c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 1d0b8 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3572:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l #119176,68(sp)
    357a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea 1d188 <SysBase>,a0
    3580:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l (a0),a6
    3582:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #20,d0
    3584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #0,d1
    3586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr -684(a6)
    358a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l d0,a0
    358c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,1d0b8 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3592:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    3596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    359c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    35a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l (a2),d1
    35a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,d0
    35a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     ,-------- bmi.w 3812 <CstScaleSprite+0x6f2>
    35aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     ,-> asr.l #4,d0
    35ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w 56(sp),d0
    35b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d2,d0
    35b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    35b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 50(sp),d3
    35ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    35be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    35c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   movea.w d7,a4
    35c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d7,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    35c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   moveq #0,d0
    35ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   not.w d0
    35cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.l 78(sp),d7
    35d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   asr.l d7,d0
    35d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,50(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    35d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 82(sp),d7
    35da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d7,d7
    if( destinationtype != SCREEN)
    35dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   cmpi.w #1,52(sp)
    35e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  ,--|-----|-- beq.w 3852 <CstScaleSprite+0x732>
      next = CstCleanupQueueViewBuffer;
    35e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  ,--|-> move.l 1d0b4 <CstCleanupQueueViewBuffer>,52(sp)
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    35ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    35f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    35f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    35f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    35f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    35fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    35fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d0,1d0b4 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;
    3604:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 52(sp),16(a0)
      CstCleanupQueueViewBuffer->x = x;
    360a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    360c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person;
    3610:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3616:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    3618:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    361a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|--|--|-- bmi.w 3ab4 <CstScaleSprite+0x994>
    361e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3620:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w 56(sp),d0
    3624:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3626:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    362a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    362e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    3632:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w a4,14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    3636:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3638:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|-> move.l 1d0dc <winWidth>,d0
    363e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    3640:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    3642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    3644:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3646:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 3316 <CstScaleSprite+0x1f6>
    364a:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3866 <CstScaleSprite+0x746>
      destination = (UWORD *) CstDrawBuffer;      
    364e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|-> movea.l 1d0b0 <CstDrawBuffer>,a4
      break;
    3654:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--|--|--|--|--|-- bra.w 3176 <CstScaleSprite+0x56>
    ystartdst = y;
    3658:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--|--|--|--|--|-> move.l a5,d7
    blitheight = single->height;
    365a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   move.l d1,48(sp)
    ystartsrc = 0;
    365e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   moveq #0,d3
    3660:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--|--|--|--|--|-- bra.w 31a0 <CstScaleSprite+0x80>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3664:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--|--|--|--|--|-> lea 182c6 <__mulsi3>,a6
    366a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d3,-(sp)
    366c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,-(sp)
    366e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a6)
    3670:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    3672:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    3674:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3676:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l 24(a2),d0
    367a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    367e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,d2
    3680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   asr.w #4,d2
    3682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d7,-(sp)
    3684:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l a5,-(sp)
    3686:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a6)
    3688:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    368a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    368c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.w d2,a0
    368e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a0
    3690:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a4
    3692:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea (0,a4,d0.l),a5
    bltcon0 = 0xfca + ((x%16) << 12);
    3696:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,d6
    3698:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   andi.w #15,d6
    369c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #15,d0
    369e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   and.l d4,d0
    36a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #12,d1
    36a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsl.l d1,d0
    36a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a4
    36a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 4042(a4),a4
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    36aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 1d0b8 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    36b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l #119176,68(sp)
    36b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 1d188 <SysBase>,a0
    36be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l (a0),a6
    36c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #20,d0
    36c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #0,d1
    36c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr -684(a6)
    36c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a0
    36ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,1d0b8 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    36d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    36d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    36d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    36da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    36e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l (a2),d1
    36e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,d0
    36e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-----|--|--|--|--|-- bmi.w 3a0a <CstScaleSprite+0x8ea>
    36e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   asr.l #4,d0
    36ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   addq.w #1,d0
    36ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    36f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w 50(sp),d3
    36f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    36f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   add.w d2,d2
    36fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    36fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,48(sp)
    3702:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,14(a0)
  custom->bltcon0 = bltcon0;
    3706:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    370a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   moveq #12,d0
    370c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   lsl.w d0,d6
    370e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d6,76(sp)
    if( destinationtype != SCREEN)
    3712:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   cmpi.w #1,52(sp)
    3718:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|-----|--|--|--|--|-- beq.w 3a42 <CstScaleSprite+0x922>
      next = CstCleanupQueueViewBuffer;
    371c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,--|--|--|--|--|-> move.l 1d0b4 <CstCleanupQueueViewBuffer>,d6
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3722:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    3726:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l (a0),a6
    3728:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #20,d0
    372a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #0,d1
    372c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   jsr -684(a6)
    3730:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l d0,a0
    3732:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d0,1d0b4 <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    3738:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d6,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    373c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    373e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    3742:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3748:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l (a2),d1
    374a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d1,d0
    374c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|-- bmi.w 3af4 <CstScaleSprite+0x9d4>
    3750:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3752:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   addq.w #1,d0
    3754:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    3758:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    375c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d2,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    3760:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w 48(sp),14(a0)
    3766:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w #-1,50(sp)
    376c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    376e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3770:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    3772:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3774:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|-> move.l 1d0dc <winWidth>,d0
    377a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    377c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    377e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    3780:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3782:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 3316 <CstScaleSprite+0x1f6>
    3786:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3866 <CstScaleSprite+0x746>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    378a:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> move.l #100175,88(sp)
}
    3792:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3796:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 40(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    379a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jmp 1793a <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    37a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|-> lea (0,a4,d0.l),a5
    37a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w 56(sp),82(sp)
    37aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w 76(sp)
    37ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w #4042,72(sp)
      extrawords = 0;
    37b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    37b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.w 56(sp),a4
    37ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l a4,a4
    37bc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d3,-(sp)
    37be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,-(sp)
    37c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr (a6)
    37c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   addq.l #8,sp
    37c4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lsr.l #3,d0
    37c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d5
    37c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    37ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l 24(a2),a4
    37ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d0
    37d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    37d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 1d0b8 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    37da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l #119176,68(sp)
    37e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lea 1d188 <SysBase>,a0
    37e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l (a0),a6
    37ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #20,d0
    37ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #0,d1
    37ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr -684(a6)
    37f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l d0,a0
    37f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,1d0b8 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    37fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    37fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3800:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    3804:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    380a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l (a2),d1
    380c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,d0
    380e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-- bpl.w 35aa <CstScaleSprite+0x48a>
    3812:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  '--|----> moveq #15,d0
    3814:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.l d1,d0
    3816:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l #4,d0
    3818:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w 56(sp),d0
    381c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d2,d0
    381e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    3822:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 50(sp),d3
    3826:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    382a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    382e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      movea.w d7,a4
    3830:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d7,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3834:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      moveq #0,d0
    3836:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      not.w d0
    3838:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.l 78(sp),d7
    383c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l d7,d0
    383e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,50(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3842:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 82(sp),d7
    3846:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d7,d7
    if( destinationtype != SCREEN)
    3848:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      cmpi.w #1,52(sp)
    384e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     '----- bne.w 35e6 <CstScaleSprite+0x4c6>
    bltalwm = 0; //Last Word of this channel almost masked out
    3852:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '----------> suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3854:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1d0dc <winWidth>,d0
    385a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    385c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,d4
    385e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  add.w d0,d4
    3860:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d1
    3862:	|  |  |  |  |  |  +-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- bge.w 3316 <CstScaleSprite+0x1f6>
    3866:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------> addq.l #7,d1
    3868:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d1
    386a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  sub.w d1,d4
  WaitBlit();
    386c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 1d194 <GfxBase>,a3
    3872:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l (a3),a6
    3874:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr -228(a6)
  custom->bltafwm = bltafwm;
    3878:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 50(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb2b4e>
  custom->bltalwm = bltalwm;
    3880:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2b50>
  custom->bltamod = bltamod;
    3886:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2b6e>
  custom->bltbmod = bltbmod;
    388c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2b6c>
  custom->bltcmod = bltcmod;
    3892:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2b6a>
  custom->bltdmod = bltdmod;
    3898:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2b70>
  custom->bltcon0 = bltcon0;
    389e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb2b4a>
  custom->bltcon1 = bltcon1;  
    38a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 76(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb2b4c>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    38ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38b0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsl.w #6,d3
  UWORD bltbptplus = (single->width >> 3)*single->height;
    38b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d0,d7
    38b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d7
    38b6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 6(a2),d7
    bltbpt += bltbptplus;
    38ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d7
  UWORD bltcptplus = winWidth/8*winHeight;
    38c0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1d0dc <winWidth>,d4
    38c6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d4
    38c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 1d0e2 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    38ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    38d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
    custom->bltbpt = (APTR) bltbpt;
    38da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb2b56>
    custom->bltcpt = (APTR) bltcpt;
    38e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2b52>
    custom->bltdpt = (APTR) bltdpt;
    38e8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    38ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d0
    38f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|----------------- bge.w 33a2 <CstScaleSprite+0x282>
    38f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--|-----|--|--|--|--|--|--|----------------> moveq #15,d1
    38f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.l d1,d0
    38f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  asr.l #4,d0
    38fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d2,d0
    38fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d3,d0
    38fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  sub.w d6,d0
    3900:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
    bltbpt += bltbptplus;
    3906:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l 60(sp),a4
    390a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    390c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    390e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l (a3),a6
    3910:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3914:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3916:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
    custom->bltbpt = (APTR) bltbpt;
    391c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2b56>
    custom->bltcpt = (APTR) bltcpt;
    3922:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2b52>
    custom->bltdpt = (APTR) bltdpt;
    3928:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    392e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  tst.l d0
    3930:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     '-----|--|--|--|--|--|--|----------------- bge.w 33de <CstScaleSprite+0x2be>
    3934:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|--|--|----------------> moveq #15,d1
    3936:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.l d1,d0
    3938:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  asr.l #4,d0
    393a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d2,d0
    393c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d3,d0
    393e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  sub.w d6,d0
    3940:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
    bltbpt += bltbptplus;
    3946:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    3948:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    394a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  movea.l (a3),a6
    394c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3950:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3952:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
    custom->bltbpt = (APTR) bltbpt;
    3958:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2b56>
    custom->bltcpt = (APTR) bltcpt;
    395e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2b52>
    custom->bltdpt = (APTR) bltdpt;
    3964:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    396a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  tst.l d0
    396c:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|--|--|----------------- bge.w 3416 <CstScaleSprite+0x2f6>
    3970:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|--|--|----------------> moveq #15,d1
    3972:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.l d1,d0
    3974:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  asr.l #4,d0
    3976:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d2,d0
    3978:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d3,d0
    397a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  sub.w d6,d0
    397c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
    bltbpt += bltbptplus;
    3982:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    3984:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    3986:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  movea.l (a3),a6
    3988:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    398c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    398e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
    custom->bltbpt = (APTR) bltbpt;
    3994:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2b56>
    custom->bltcpt = (APTR) bltcpt;
    399a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2b52>
    custom->bltdpt = (APTR) bltdpt;
    39a0:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    39a6:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  tst.l d0
    39a8:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|--|--|----------------- bge.w 344e <CstScaleSprite+0x32e>
    39ac:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|--|--|----------------> moveq #15,d1
    39ae:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l d1,d0
    39b0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  asr.l #4,d0
    39b2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d2,d0
    39b4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d3,d0
    39b6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  sub.w d6,d0
    39b8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
    bltbpt += bltbptplus;
    39be:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a4,d7
    bltcpt += bltcptplus;
    39c0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a5,d4
    WaitBlit();
    39c2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  movea.l (a3),a6
    39c4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    39c8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    39ca:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2b5a>
    custom->bltbpt = (APTR) bltbpt;
    39d0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d7,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2b56>
    custom->bltcpt = (APTR) bltcpt;
    39d6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2b52>
    custom->bltdpt = (APTR) bltdpt;
    39dc:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2b5e>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    39e2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  tst.l d0
    39e4:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|--|--|----------------- bge.w 3486 <CstScaleSprite+0x366>
    39e8:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|--|--|----------------> moveq #15,d7
    39ea:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.l d7,d0
    39ec:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  asr.l #4,d0
    39ee:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d0,d2
    39f0:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d3,d2
    39f2:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  sub.w d6,d2
    39f4:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2b62>
    WaitBlit();
    39fa:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movea.l (a3),a6
    39fc:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  jsr -228(a6)
}
    3a00:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movem.l (sp)+,d2-d7/a2-a6
    3a04:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  lea 40(sp),sp
    3a08:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  rts
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3a0a:	|  |  |  |  |  |  |                                   |  |  |  |  |  '--|----------------> moveq #15,d0
    3a0c:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.l d1,d0
    3a0e:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  asr.l #4,d0
    3a10:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  addq.w #1,d0
    3a12:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    3a16:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w 50(sp),d3
    3a1a:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3a1e:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.w d2,d2
    3a20:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3a24:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,48(sp)
    3a28:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,14(a0)
  custom->bltcon0 = bltcon0;
    3a2c:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    3a30:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  moveq #12,d0
    3a32:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  lsl.w d0,d6
    3a34:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d6,76(sp)
    if( destinationtype != SCREEN)
    3a38:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  cmpi.w #1,52(sp)
    3a3e:	|  |  |  |  |  |  |                                   |  |  |  |  |     '----------------- bne.w 371c <CstScaleSprite+0x5fc>
    extrawords = 1;
    3a42:	|  |  |  |  |  |  |                                   |  |  |  |  '----------------------> moveq #1,d2
    3a44:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w #-1,50(sp)
    3a4a:	|  |  |  |  |  |  |                                   |  |  |  |                           moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    3a4c:	|  |  |  |  |  |  |                                   |  |  |  |                           suba.l a4,a4
    cutwordssource = 0;
    3a4e:	|  |  |  |  |  |  |                                   |  |  |  |                           clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3a50:	|  |  |  |  |  |  |                                   |  |  |  |                           move.l 1d0dc <winWidth>,d0
    3a56:	|  |  |  |  |  |  |                                   |  |  |  |                           lsr.l #3,d0
    3a58:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w d7,d4
    3a5a:	|  |  |  |  |  |  |                                   |  |  |  |                           add.w d0,d4
    3a5c:	|  |  |  |  |  |  |                                   |  |  |  |                           tst.l d1
    3a5e:	|  |  |  |  |  |  +-----------------------------------|--|--|--|-------------------------- bge.w 3316 <CstScaleSprite+0x1f6>
    3a62:	|  |  |  |  |  +--|-----------------------------------|--|--|--|-------------------------- bra.w 3866 <CstScaleSprite+0x746>
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3a66:	|  |  |  '--|--|--|-----------------------------------|--|--|--|-------------------------> moveq #15,d0
    3a68:	|  |  |     |  |  |                                   |  |  |  |                           add.l d1,d0
    3a6a:	|  |  |     |  |  |                                   |  |  |  |                           asr.l #4,d0
    3a6c:	|  |  |     |  |  |                                   |  |  |  |                           movea.w 58(sp),a1
    3a70:	|  |  |     |  |  |                                   |  |  |  |                           adda.w d0,a1
    3a72:	|  |  |     |  |  |                                   |  |  |  |                           move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3a76:	|  |  |     |  |  |                                   |  |  |  |                           move.w 50(sp),d3
    3a7a:	|  |  |     |  |  |                                   |  |  |  |                           move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3a7e:	|  |  |     |  |  |                                   |  |  |  |                           add.w d2,d2
    3a80:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,78(sp)
    3a84:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3a88:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,48(sp)
    3a8c:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,14(a0)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3a90:	|  |  |     |  |  |                                   |  |  |  |                           move.w 58(sp),d7
    3a94:	|  |  |     |  |  |                                   |  |  |  |                           add.w d7,d7
  custom->bltcon0 = bltcon0;
    3a96:	|  |  |     |  |  |                                   |  |  |  |                           move.w 74(sp),72(sp)
  custom->bltcon1 = bltcon1;  
    3a9c:	|  |  |     |  |  |                                   |  |  |  |                           move.w 76(sp),d2
    3aa0:	|  |  |     |  |  |                                   |  |  |  |                           moveq #12,d0
    3aa2:	|  |  |     |  |  |                                   |  |  |  |                           lsl.w d0,d2
    3aa4:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,76(sp)
    if( destinationtype != SCREEN)
    3aa8:	|  |  |     |  |  |                                   |  |  |  |                           cmpi.w #1,52(sp)
    3aae:	|  |  |     '--|--|-----------------------------------|--|--|--|-------------------------- bne.w 32ac <CstScaleSprite+0x18c>
    3ab2:	|  |  +--------|--|-----------------------------------|--|--|--|-------------------------- bra.s 3ad6 <CstScaleSprite+0x9b6>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3ab4:	|  |  |        |  |                                   |  '--|--|-------------------------> moveq #15,d0
    3ab6:	|  |  |        |  |                                   |     |  |                           add.l d1,d0
    3ab8:	|  |  |        |  |                                   |     |  |                           asr.l #4,d0
    3aba:	|  |  |        |  |                                   |     |  |                           add.w 56(sp),d0
    3abe:	|  |  |        |  |                                   |     |  |                           add.w d2,d0
    3ac0:	|  |  |        |  |                                   |     |  |                           move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    3ac4:	|  |  |        |  |                                   |     |  |                           move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    3ac8:	|  |  |        |  |                                   |     |  |                           clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    3acc:	|  |  |        |  |                                   |     |  |                           move.w a4,14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    3ad0:	|  |  |        |  |                                   |     |  |                           suba.l a4,a4
    3ad2:	|  |  |        |  |                                   '-----|--|-------------------------- bra.w 3638 <CstScaleSprite+0x518>
    3ad6:	|  |  '--------|--|-----------------------------------------|--|-------------------------> move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3adc:	|  |           |  |                                         |  |                           clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3ade:	|  |           |  |                                         |  |                           move.l 1d0dc <winWidth>,d0
    3ae4:	|  |           |  |                                         |  |                           lsr.l #3,d0
    3ae6:	|  |           |  |                                         |  |                           move.w d7,d4
    3ae8:	|  |           |  |                                         |  |                           add.w d0,d4
    3aea:	|  |           |  |                                         |  |                           tst.l d1
    3aec:	|  |           |  '-----------------------------------------|--|-------------------------- bge.w 3316 <CstScaleSprite+0x1f6>
    3af0:	|  |           '--------------------------------------------|--|-------------------------- bra.w 3866 <CstScaleSprite+0x746>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3af4:	|  |                                                        |  '-------------------------> moveq #15,d0
    3af6:	|  |                                                        |                              add.l d1,d0
    3af8:	|  |                                                        |                              asr.l #4,d0
    3afa:	|  |                                                        |                              addq.w #1,d0
    3afc:	|  |                                                        |                              move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    3b00:	|  |                                                        |                              move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    3b04:	|  |                                                        |                              move.w d2,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    3b08:	|  |                                                        |                              move.w 48(sp),14(a0)
    3b0e:	|  |                                                        |                              move.w #-1,50(sp)
    3b14:	|  |                                                        |                              moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    3b16:	|  |                                                        |                              suba.l a4,a4
    cutwordssource = 0;
    3b18:	|  |                                                        |                              clr.w d6
    extrawords = 1;
    3b1a:	|  |                                                        |                              moveq #1,d2
    3b1c:	|  |                                                        '----------------------------- bra.w 3774 <CstScaleSprite+0x654>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    3b20:	|  '-------------------------------------------------------------------------------------> moveq #15,d0
    3b22:	|                                                                                          add.l d1,d0
    3b24:	|                                                                                          asr.l #4,d0
    3b26:	|                                                                                          movea.w 58(sp),a1
    3b2a:	|                                                                                          adda.w d0,a1
    3b2c:	|                                                                                          move.w a1,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    3b30:	|                                                                                          move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3b34:	|                                                                                          move.w 78(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    3b3a:	|                                                                                          move.w 48(sp),14(a0)
    3b40:	|                                                                                          move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3b46:	|                                                                                          clr.w d2
    3b48:	'----------------------------------------------------------------------------------------- bra.w 3304 <CstScaleSprite+0x1e4>

00003b4c <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3b4c:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3b4e:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3b54:	move.l 8(sp),d0
    3b58:	movea.l (sp),a0
    3b5a:	move.l d0,128(a0)
}
    3b5e:	nop
    3b60:	addq.l #4,sp
    3b62:	rts

00003b64 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3b64:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3b68:	move.l 1d0ac <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3b70:	move.l 1d0b0 <CstDrawBuffer>,d0
    3b76:	move.l d0,1d0ac <CstViewBuffer>
  CstDrawBuffer = tmp;
    3b7c:	move.l 16(sp),1d0b0 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3b84:	move.l 1d0b4 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3b8c:	move.l 1d0b8 <CstCleanupQueueDrawBuffer>,d0
    3b92:	move.l d0,1d0b4 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3b98:	move.l 12(sp),1d0b8 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3ba0:	move.l 1d0a6 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3ba8:	move.l 1d0ac <CstViewBuffer>,d0
    3bae:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3bb2:	move.l 4(sp),d0
    3bb6:	clr.w d0
    3bb8:	swap d0
    3bba:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3bbe:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    3bc2:	movea.w #118,a0
    3bc6:	adda.l 8(sp),a0
    3bca:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3bcc:	movea.w #114,a0
    3bd0:	adda.l 8(sp),a0
    3bd4:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3bd8:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3be0:	move.l 4(sp),d0
    3be4:	clr.w d0
    3be6:	swap d0
    3be8:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3bec:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3bf0:	movea.w #126,a0
    3bf4:	adda.l 8(sp),a0
    3bf8:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3bfa:	movea.w #122,a0
    3bfe:	adda.l 8(sp),a0
    3c02:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3c06:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3c0e:	move.l 4(sp),d0
    3c12:	clr.w d0
    3c14:	swap d0
    3c16:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3c1a:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3c1e:	movea.l 8(sp),a0
    3c22:	lea 134(a0),a0
    3c26:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3c28:	movea.l 8(sp),a0
    3c2c:	lea 130(a0),a0
    3c30:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3c34:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3c3c:	move.l 4(sp),d0
    3c40:	clr.w d0
    3c42:	swap d0
    3c44:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3c48:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3c4c:	movea.l 8(sp),a0
    3c50:	lea 142(a0),a0
    3c54:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3c56:	movea.l 8(sp),a0
    3c5a:	lea 138(a0),a0
    3c5e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3c62:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3c6a:	move.l 4(sp),d0
    3c6e:	clr.w d0
    3c70:	swap d0
    3c72:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3c76:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3c7a:	movea.l 8(sp),a0
    3c7e:	lea 150(a0),a0
    3c82:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3c84:	movea.l 8(sp),a0
    3c88:	lea 146(a0),a0
    3c8c:	move.w 2(sp),(a0)

}
    3c90:	nop
    3c92:	lea 20(sp),sp
    3c96:	rts

00003c98 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3c98:	          lea -80(sp),sp
    3c9c:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3c9e:	          pea 18782 <PutChar+0x3a6>
    3ca4:	          jsr 1793a <KPrintF>
    3caa:	          addq.l #4,sp

  width = width / 8;
    3cac:	          move.l 88(sp),d0
    3cb0:	      ,-- bpl.s 3cb4 <CstReserveBackdrop+0x1c>
    3cb2:	      |   addq.l #7,d0
    3cb4:	      '-> asr.l #3,d0
    3cb6:	          move.l d0,88(sp)

  if( width < 40) 
    3cba:	          moveq #39,d0
    3cbc:	          cmp.l 88(sp),d0
    3cc0:	      ,-- blt.s 3cd6 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3cc2:	      |   pea 1879c <PutChar+0x3c0>
    3cc8:	      |   jsr 1793a <KPrintF>
    3cce:	      |   addq.l #4,sp
    return FALSE;
    3cd0:	      |   clr.w d0
    3cd2:	,-----|-- bra.w 4078 <CstReserveBackdrop+0x3e0>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3cd6:	|     '-> pea 187da <PutChar+0x3fe>
    3cdc:	|         jsr 1793a <KPrintF>
    3ce2:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3ce4:	|         move.l 88(sp),-(sp)
    3ce8:	|         jsr 10ca <CstCreateCopperlist>
    3cee:	|         addq.l #4,sp
    3cf0:	|         move.l d0,1d0a6 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3cf6:	|         pea 187fa <PutChar+0x41e>
    3cfc:	|         jsr 1793a <KPrintF>
    3d02:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3d04:	|         move.l 88(sp),d1
    3d08:	|         move.l 92(sp),d0
    3d0c:	|         muls.w d1,d0
    3d0e:	|         move.w d0,1d09c <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3d14:	|         move.w 1d09c <CstBackdropSizePlane>,d1
    3d1a:	|         move.w d1,d0
    3d1c:	|         add.w d0,d0
    3d1e:	|         add.w d0,d0
    3d20:	|         add.w d1,d0
    3d22:	|         move.w d0,1d09a <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3d28:	|         move.w 1d09a <CstBackdropSize>,d0
    3d2e:	|         move.w d0,d0
    3d30:	|         andi.l #65535,d0
    3d36:	|         move.l d0,72(sp)
    3d3a:	|         moveq #2,d1
    3d3c:	|         move.l d1,68(sp)
    3d40:	|         move.l 1d188 <SysBase>,d0
    3d46:	|         movea.l d0,a6
    3d48:	|         move.l 72(sp),d0
    3d4c:	|         move.l 68(sp),d1
    3d50:	|         jsr -684(a6)
    3d54:	|         move.l d0,64(sp)
    3d58:	|         move.l 64(sp),d0
    3d5c:	|         move.l d0,1d09e <CstBackDrop>
  if( !CstBackDrop)
    3d62:	|         move.l 1d09e <CstBackDrop>,d0
    3d68:	|     ,-- bne.s 3d7e <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3d6a:	|     |   pea 18821 <PutChar+0x445>
    3d70:	|     |   jsr 1793a <KPrintF>
    3d76:	|     |   addq.l #4,sp
    return FALSE;  
    3d78:	|     |   clr.w d0
    3d7a:	+-----|-- bra.w 4078 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3d7e:	|     '-> pea 18859 <PutChar+0x47d>
    3d84:	|         jsr 1793a <KPrintF>
    3d8a:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3d8c:	|         move.l 1d09e <CstBackDrop>,80(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3d94:	|         clr.l 76(sp)
    3d98:	|     ,-- bra.s 3dae <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3d9a:	|  ,--|-> move.l 80(sp),d0
    3d9e:	|  |  |   move.l d0,d1
    3da0:	|  |  |   addq.l #4,d1
    3da2:	|  |  |   move.l d1,80(sp)
    3da6:	|  |  |   movea.l d0,a0
    3da8:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3daa:	|  |  |   addq.l #1,76(sp)
    3dae:	|  |  '-> move.w 1d09a <CstBackdropSize>,d0
    3db4:	|  |      lsr.w #2,d0
    3db6:	|  |      move.w d0,d0
    3db8:	|  |      andi.l #65535,d0
    3dbe:	|  |      cmp.l 76(sp),d0
    3dc2:	|  '----- bgt.s 3d9a <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3dc4:	|         move.w 1d09a <CstBackdropSize>,d0
    3dca:	|         move.w d0,d0
    3dcc:	|         andi.l #65535,d0
    3dd2:	|         move.l 88(sp),d1
    3dd6:	|         add.l d1,d1
    3dd8:	|         add.l d1,d0
    3dda:	|         move.l d0,60(sp)
    3dde:	|         moveq #2,d0
    3de0:	|         move.l d0,56(sp)
    3de4:	|         move.l 1d188 <SysBase>,d0
    3dea:	|         movea.l d0,a6
    3dec:	|         move.l 60(sp),d0
    3df0:	|         move.l 56(sp),d1
    3df4:	|         jsr -684(a6)
    3df8:	|         move.l d0,52(sp)
    3dfc:	|         move.l 52(sp),d0
    3e00:	|         move.l d0,1d0b0 <CstDrawBuffer>
  if( !CstDrawBuffer)
    3e06:	|         move.l 1d0b0 <CstDrawBuffer>,d0
    3e0c:	|     ,-- bne.s 3e22 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3e0e:	|     |   pea 1887f <PutChar+0x4a3>
    3e14:	|     |   jsr 1793a <KPrintF>
    3e1a:	|     |   addq.l #4,sp
    return FALSE;  
    3e1c:	|     |   clr.w d0
    3e1e:	+-----|-- bra.w 4078 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3e22:	|     '-> pea 188b9 <PutChar+0x4dd>
    3e28:	|         jsr 1793a <KPrintF>
    3e2e:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3e30:	|         move.l #10000,48(sp)
    3e38:	|         clr.l 44(sp)
    3e3c:	|         move.l 1d188 <SysBase>,d0
    3e42:	|         movea.l d0,a6
    3e44:	|         move.l 48(sp),d0
    3e48:	|         move.l 44(sp),d1
    3e4c:	|         jsr -684(a6)
    3e50:	|         move.l d0,40(sp)
    3e54:	|         move.l 40(sp),d0
    3e58:	|         move.l d0,1d0bc <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3e5e:	|         move.l 1d0bc <CstBackDropBufferApplyStart>,d0
    3e64:	|     ,-- bne.s 3e7a <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3e66:	|     |   pea 188e1 <PutChar+0x505>
    3e6c:	|     |   jsr 1793a <KPrintF>
    3e72:	|     |   addq.l #4,sp
    return FALSE;  
    3e74:	|     |   clr.w d0
    3e76:	+-----|-- bra.w 4078 <CstReserveBackdrop+0x3e0>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3e7a:	|     '-> move.l 1d0bc <CstBackDropBufferApplyStart>,d0
    3e80:	|         move.l d0,1d0c0 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3e86:	|         movea.l 1d0bc <CstBackDropBufferApplyStart>,a0
    3e8c:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3e8e:	|         movea.l 1d0bc <CstBackDropBufferApplyStart>,a0
    3e94:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3e96:	|         move.w 1d09a <CstBackdropSize>,d0
    3e9c:	|         move.w d0,d0
    3e9e:	|         andi.l #65535,d0
    3ea4:	|         move.l 88(sp),d1
    3ea8:	|         add.l d1,d1
    3eaa:	|         add.l d1,d0
    3eac:	|         move.l d0,36(sp)
    3eb0:	|         moveq #2,d1
    3eb2:	|         move.l d1,32(sp)
    3eb6:	|         move.l 1d188 <SysBase>,d0
    3ebc:	|         movea.l d0,a6
    3ebe:	|         move.l 36(sp),d0
    3ec2:	|         move.l 32(sp),d1
    3ec6:	|         jsr -684(a6)
    3eca:	|         move.l d0,28(sp)
    3ece:	|         move.l 28(sp),d0
    3ed2:	|         move.l d0,1d0ac <CstViewBuffer>
  if( !CstViewBuffer)
    3ed8:	|         move.l 1d0ac <CstViewBuffer>,d0
    3ede:	|     ,-- bne.s 3ef4 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3ee0:	|     |   pea 1892c <PutChar+0x550>
    3ee6:	|     |   jsr 1793a <KPrintF>
    3eec:	|     |   addq.l #4,sp
    return FALSE;  
    3eee:	|     |   clr.w d0
    3ef0:	+-----|-- bra.w 4078 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3ef4:	|     '-> pea 18966 <PutChar+0x58a>
    3efa:	|         jsr 1793a <KPrintF>
    3f00:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3f02:	|         move.l 1d0b0 <CstDrawBuffer>,d1
    3f08:	|         move.l 88(sp),d0
    3f0c:	|     ,-- bpl.s 3f10 <CstReserveBackdrop+0x278>
    3f0e:	|     |   addq.l #3,d0
    3f10:	|     '-> asr.l #2,d0
    3f12:	|         add.l d0,d0
    3f14:	|         add.l d0,d0
    3f16:	|         add.l d1,d0
    3f18:	|         move.l d0,1d0b0 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3f1e:	|         move.l 1d0ac <CstViewBuffer>,d1
    3f24:	|         move.l 88(sp),d0
    3f28:	|     ,-- bpl.s 3f2c <CstReserveBackdrop+0x294>
    3f2a:	|     |   addq.l #3,d0
    3f2c:	|     '-> asr.l #2,d0
    3f2e:	|         add.l d0,d0
    3f30:	|         add.l d0,d0
    3f32:	|         add.l d1,d0
    3f34:	|         move.l d0,1d0ac <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3f3a:	|         move.l #5200,24(sp)
    3f42:	|         moveq #2,d0
    3f44:	|         move.l d0,20(sp)
    3f48:	|         move.l 1d188 <SysBase>,d0
    3f4e:	|         movea.l d0,a6
    3f50:	|         move.l 24(sp),d0
    3f54:	|         move.l 20(sp),d1
    3f58:	|         jsr -684(a6)
    3f5c:	|         move.l d0,16(sp)
    3f60:	|         move.l 16(sp),d0
    3f64:	|         move.l d0,1d0d0 <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3f6a:	|         move.l #5600,12(sp)
    3f72:	|         moveq #2,d1
    3f74:	|         move.l d1,8(sp)
    3f78:	|         move.l 1d188 <SysBase>,d0
    3f7e:	|         movea.l d0,a6
    3f80:	|         move.l 12(sp),d0
    3f84:	|         move.l 8(sp),d1
    3f88:	|         jsr -684(a6)
    3f8c:	|         move.l d0,4(sp)
    3f90:	|         move.l 4(sp),d0
    3f94:	|         move.l d0,1d0d4 <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3f9a:	|         move.l 1d09e <CstBackDrop>,d0
    3fa0:	|         clr.l -(sp)
    3fa2:	|         pea 5 <_start+0x5>
    3fa6:	|         pea 100 <copyString+0x48>
    3faa:	|         pea 140 <decodeFilename+0x28>
    3fae:	|         pea 1898e <PutChar+0x5b2>
    3fb4:	|         move.l d0,-(sp)
    3fb6:	|         jsr 17a22 <debug_register_bitmap>
    3fbc:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3fc0:	|         move.l 92(sp),d0
    3fc4:	|         movea.w d0,a1
    3fc6:	|         move.l 88(sp),d0
    3fca:	|         lsl.w #3,d0
    3fcc:	|         movea.w d0,a0
    3fce:	|         move.l 1d0b0 <CstDrawBuffer>,d0
    3fd4:	|         clr.l -(sp)
    3fd6:	|         pea 5 <_start+0x5>
    3fda:	|         move.l a1,-(sp)
    3fdc:	|         move.l a0,-(sp)
    3fde:	|         pea 1899e <PutChar+0x5c2>
    3fe4:	|         move.l d0,-(sp)
    3fe6:	|         jsr 17a22 <debug_register_bitmap>
    3fec:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3ff0:	|         move.l 92(sp),d0
    3ff4:	|         movea.w d0,a1
    3ff6:	|         move.l 88(sp),d0
    3ffa:	|         lsl.w #3,d0
    3ffc:	|         movea.w d0,a0
    3ffe:	|         move.l 1d0ac <CstViewBuffer>,d0
    4004:	|         clr.l -(sp)
    4006:	|         pea 5 <_start+0x5>
    400a:	|         move.l a1,-(sp)
    400c:	|         move.l a0,-(sp)
    400e:	|         pea 189ad <PutChar+0x5d1>
    4014:	|         move.l d0,-(sp)
    4016:	|         jsr 17a22 <debug_register_bitmap>
    401c:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    4020:	|         move.l 1d0a6 <CstCopperList>,d0
    4026:	|     ,-- beq.s 4038 <CstReserveBackdrop+0x3a0>
    4028:	|     |   move.l 1d0b0 <CstDrawBuffer>,d0
    402e:	|     +-- beq.s 4038 <CstReserveBackdrop+0x3a0>
    4030:	|     |   move.l 1d0ac <CstViewBuffer>,d0
    4036:	|  ,--|-- bne.s 404a <CstReserveBackdrop+0x3b2>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    4038:	|  |  '-> pea 189bc <PutChar+0x5e0>
    403e:	|  |      jsr 1793a <KPrintF>
    4044:	|  |      addq.l #4,sp
    return FALSE;
    4046:	|  |      clr.w d0
    4048:	+--|----- bra.s 4078 <CstReserveBackdrop+0x3e0>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    404a:	|  '----> pea 189e9 <PutChar+0x60d>
    4050:	|         jsr 1793a <KPrintF>
    4056:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    4058:	|         move.l 1d0a6 <CstCopperList>,d0
    405e:	|         move.l d0,-(sp)
    4060:	|         jsr 3b4c <CstSetCl>
    4066:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    4068:	|         pea 18a10 <PutChar+0x634>
    406e:	|         jsr 1793a <KPrintF>
    4074:	|         addq.l #4,sp
  return TRUE;
    4076:	|         moveq #1,d0

}
    4078:	'-------> movea.l (sp)+,a6
    407a:	          lea 80(sp),sp
    407e:	          rts

00004080 <CstUnfreeze>:

void CstUnfreeze() {
    4080:	       lea -52(sp),sp
    4084:	       move.l a6,-(sp)
    4086:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    4088:	       pea 18a33 <PutChar+0x657>
    408e:	       jsr 1793a <KPrintF>
    4094:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    4096:	       move.l 1d0dc <winWidth>,d0
    409c:	       lsr.l #3,d0
    409e:	       move.l d0,d1
    40a0:	       move.l 1d0e0 <winHeight>,d0
    40a6:	       move.l d0,d0
    40a8:	       muls.w d0,d1
    40aa:	       move.w d1,d0
    40ac:	       add.w d0,d0
    40ae:	       add.w d0,d0
    40b0:	       move.w d0,d2
    40b2:	       add.w d1,d2
    40b4:	       move.w d2,46(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    40b8:	       move.l #14675968,42(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    40c0:	       move.l 1d0e0 <winHeight>,d0
    40c6:	       move.l d0,d0
    40c8:	       movea.w d0,a1
    40ca:	       move.l 1d0dc <winWidth>,d0
    40d0:	       move.l d0,d0
    40d2:	       movea.w d0,a0
    40d4:	       move.l 1d0a2 <CstBackDropBackup>,d0
    40da:	       clr.l -(sp)
    40dc:	       pea 5 <_start+0x5>
    40e0:	       move.l a1,-(sp)
    40e2:	       move.l a0,-(sp)
    40e4:	       pea 18605 <PutChar+0x229>
    40ea:	       move.l d0,-(sp)
    40ec:	       jsr 17a22 <debug_register_bitmap>
    40f2:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    40f6:	       move.l 1d0a2 <CstBackDropBackup>,56(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    40fe:	       move.l 1d09e <CstBackDrop>,52(sp)
  for(int i=0;i<size/4;i++) 
    4106:	       clr.l 48(sp)
    410a:	   ,-- bra.s 4130 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    410c:	,--|-> move.l 56(sp),d1
    4110:	|  |   move.l d1,d0
    4112:	|  |   addq.l #4,d0
    4114:	|  |   move.l d0,56(sp)
    4118:	|  |   move.l 52(sp),d0
    411c:	|  |   move.l d0,d2
    411e:	|  |   addq.l #4,d2
    4120:	|  |   move.l d2,52(sp)
    4124:	|  |   movea.l d1,a0
    4126:	|  |   move.l (a0),d1
    4128:	|  |   movea.l d0,a0
    412a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    412c:	|  |   addq.l #1,48(sp)
    4130:	|  '-> move.w 46(sp),d0
    4134:	|      lsr.w #2,d0
    4136:	|      move.w d0,d0
    4138:	|      andi.l #65535,d0
    413e:	|      cmp.l 48(sp),d0
    4142:	'----- bgt.s 410c <CstUnfreeze+0x8c>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    4144:	       move.l 1d0b8 <CstCleanupQueueDrawBuffer>,38(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    414c:	       moveq #20,d0
    414e:	       move.l d0,34(sp)
    4152:	       clr.l 30(sp)
    4156:	       move.l 1d188 <SysBase>,d0
    415c:	       movea.l d0,a6
    415e:	       move.l 34(sp),d0
    4162:	       move.l 30(sp),d1
    4166:	       jsr -684(a6)
    416a:	       move.l d0,26(sp)
    416e:	       move.l 26(sp),d0
    4172:	       move.l d0,1d0b8 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    4178:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    417e:	       move.l 38(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    4184:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    418a:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    418c:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    4192:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    4196:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    419c:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    41a0:	       move.l 1d0dc <winWidth>,d0
    41a6:	       lsr.l #4,d0
    41a8:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    41ae:	       move.l d0,d0
    41b0:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    41b4:	       move.l 1d0e0 <winHeight>,d0
    41ba:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    41c0:	       move.l d0,d0
    41c2:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    41c6:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    41cc:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    41d0:	       movea.l 1d0b8 <CstCleanupQueueDrawBuffer>,a0
    41d6:	       clr.w 14(a0)
  next = CstCleanupQueueViewBuffer;
    41da:	       move.l 1d0b4 <CstCleanupQueueViewBuffer>,38(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    41e2:	       moveq #20,d2
    41e4:	       move.l d2,22(sp)
    41e8:	       clr.l 18(sp)
    41ec:	       move.l 1d188 <SysBase>,d0
    41f2:	       movea.l d0,a6
    41f4:	       move.l 22(sp),d0
    41f8:	       move.l 18(sp),d1
    41fc:	       jsr -684(a6)
    4200:	       move.l d0,14(sp)
    4204:	       move.l 14(sp),d0
    4208:	       move.l d0,1d0b4 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    420e:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    4214:	       move.l 38(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    421a:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    4220:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    4222:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    4228:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    422c:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    4232:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    4236:	       move.l 1d0dc <winWidth>,d0
    423c:	       lsr.l #4,d0
    423e:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    4244:	       move.l d0,d0
    4246:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    424a:	       move.l 1d0e0 <winHeight>,d0
    4250:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    4256:	       move.l d0,d0
    4258:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    425c:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    4262:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0;  
    4266:	       movea.l 1d0b4 <CstCleanupQueueViewBuffer>,a0
    426c:	       clr.w 14(a0)
  
  if( CstBackDropBackup) {
    4270:	       move.l 1d0a2 <CstBackDropBackup>,d0
    4276:	   ,-- beq.s 429e <CstUnfreeze+0x21e>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    4278:	   |   pea 18a5e <PutChar+0x682>
    427e:	   |   jsr 1793a <KPrintF>
    4284:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    4286:	   |   move.l 1d0a2 <CstBackDropBackup>,10(sp)
    428e:	   |   move.l 1d188 <SysBase>,d0
    4294:	   |   movea.l d0,a6
    4296:	   |   movea.l 10(sp),a1
    429a:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    429e:	   '-> pea 18a82 <PutChar+0x6a6>
    42a4:	       jsr 1793a <KPrintF>
    42aa:	       addq.l #4,sp

}
    42ac:	       nop
    42ae:	       move.l (sp)+,d2
    42b0:	       movea.l (sp)+,a6
    42b2:	       lea 52(sp),sp
    42b6:	       rts

000042b8 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    42b8:	       lea -28(sp),sp
    42bc:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    42c0:	       move.l 52(sp),-(sp)
    42c4:	       jsr 15f44 <stringWidth>
    42ca:	       addq.l #4,sp
    42cc:	       asr.l #1,d0
    42ce:	       move.l d0,-(sp)
    42d0:	       jsr 17d6c <__floatsisf>
    42d6:	       addq.l #4,sp
    42d8:	       move.l d0,d1
    42da:	       move.l 1cb1a <cameraZoom>,d0
    42e0:	       move.l d0,-(sp)
    42e2:	       move.l d1,-(sp)
    42e4:	       jsr 17c22 <__divsf3>
    42ea:	       addq.l #8,sp
    42ec:	       move.l d0,-(sp)
    42ee:	       jsr 17d04 <__fixsfsi>
    42f4:	       addq.l #4,sp
    42f6:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    42fa:	       move.l 56(sp),d0
    42fe:	       sub.l 44(sp),d0
    4302:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    4306:	       move.l 56(sp),d0
    430a:	       add.l 44(sp),d0
    430e:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    4312:	       moveq #12,d0
    4314:	       move.l d0,32(sp)
    4318:	       clr.l 28(sp)
    431c:	       move.l 1d188 <SysBase>,d0
    4322:	       movea.l d0,a6
    4324:	       move.l 32(sp),d0
    4328:	       move.l 28(sp),d1
    432c:	       jsr -684(a6)
    4330:	       move.l d0,24(sp)
    4334:	       move.l 24(sp),d0
    4338:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    433c:	       movea.l 1d0d8 <speech>,a0
    4342:	       move.l 4(a0),d0
    4346:	       movea.l 20(sp),a0
    434a:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    434e:	       move.l 52(sp),-(sp)
    4352:	       jsr b8 <copyString>
    4358:	       addq.l #4,sp
    435a:	       movea.l 20(sp),a0
    435e:	       move.l d0,(a0)
	newLine -> x = xx1;
    4360:	       movea.l 20(sp),a0
    4364:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    436a:	       movea.l 1d0d8 <speech>,a0
    4370:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    4376:	       moveq #4,d0
    4378:	       cmp.l 40(sp),d0
    437c:	   ,-- blt.s 439e <addSpeechLine+0xe6>
    437e:	   |   movea.l 60(sp),a0
    4382:	   |   move.l (a0),d1
    4384:	   |   moveq #5,d0
    4386:	   |   sub.l 40(sp),d0
    438a:	   |   cmp.l d1,d0
    438c:	   +-- ble.s 439e <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    438e:	   |   moveq #5,d0
    4390:	   |   sub.l 40(sp),d0
    4394:	   |   movea.l 60(sp),a0
    4398:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    439a:	,--|-- bra.w 44ca <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    439e:	|  '-> move.l 36(sp),-(sp)
    43a2:	|      jsr 17d6c <__floatsisf>
    43a8:	|      addq.l #4,sp
    43aa:	|      move.l d0,d2
    43ac:	|      move.l 1d0dc <winWidth>,d0
    43b2:	|      move.l d0,-(sp)
    43b4:	|      jsr 17d94 <__floatunsisf>
    43ba:	|      addq.l #4,sp
    43bc:	|      move.l d0,d1
    43be:	|      move.l 1cb1a <cameraZoom>,d0
    43c4:	|      move.l d0,-(sp)
    43c6:	|      move.l d1,-(sp)
    43c8:	|      jsr 17c22 <__divsf3>
    43ce:	|      addq.l #8,sp
    43d0:	|      move.l #1084227584,-(sp)
    43d6:	|      move.l d0,-(sp)
    43d8:	|      jsr 18060 <__subsf3>
    43de:	|      addq.l #8,sp
    43e0:	|      move.l d0,-(sp)
    43e2:	|      move.l d2,-(sp)
    43e4:	|      jsr 17e54 <__gesf2>
    43ea:	|      addq.l #8,sp
    43ec:	|      tst.l d0
    43ee:	|  ,-- bge.s 43f4 <addSpeechLine+0x13c>
}
    43f0:	+--|-- bra.w 44ca <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    43f4:	|  '-> movea.l 60(sp),a0
    43f8:	|      move.l (a0),d0
    43fa:	|      move.l d0,-(sp)
    43fc:	|      jsr 17d6c <__floatsisf>
    4402:	|      addq.l #4,sp
    4404:	|      move.l d0,-(sp)
    4406:	|      jsr 17c8e <__extendsfdf2>
    440c:	|      addq.l #4,sp
    440e:	|      move.l d0,d4
    4410:	|      move.l d1,d5
    4412:	|      move.l 1d0dc <winWidth>,d0
    4418:	|      move.l d0,-(sp)
    441a:	|      jsr 17d94 <__floatunsisf>
    4420:	|      addq.l #4,sp
    4422:	|      move.l d0,d1
    4424:	|      move.l 1cb1a <cameraZoom>,d0
    442a:	|      move.l d0,-(sp)
    442c:	|      move.l d1,-(sp)
    442e:	|      jsr 17c22 <__divsf3>
    4434:	|      addq.l #8,sp
    4436:	|      move.l d0,-(sp)
    4438:	|      jsr 17c8e <__extendsfdf2>
    443e:	|      addq.l #4,sp
    4440:	|      clr.l -(sp)
    4442:	|      move.l #1075052544,-(sp)
    4448:	|      move.l d1,-(sp)
    444a:	|      move.l d0,-(sp)
    444c:	|      jsr 17ffe <__subdf3>
    4452:	|      lea 16(sp),sp
    4456:	|      move.l d0,d2
    4458:	|      move.l d1,d3
    445a:	|      move.l 36(sp),-(sp)
    445e:	|      jsr 17d2c <__floatsidf>
    4464:	|      addq.l #4,sp
    4466:	|      move.l d1,-(sp)
    4468:	|      move.l d0,-(sp)
    446a:	|      move.l d3,-(sp)
    446c:	|      move.l d2,-(sp)
    446e:	|      jsr 17ffe <__subdf3>
    4474:	|      lea 16(sp),sp
    4478:	|      move.l d1,-(sp)
    447a:	|      move.l d0,-(sp)
    447c:	|      move.l d5,-(sp)
    447e:	|      move.l d4,-(sp)
    4480:	|      jsr 17e8a <__gtdf2>
    4486:	|      lea 16(sp),sp
    448a:	|      tst.l d0
    448c:	|  ,-- bgt.s 4490 <addSpeechLine+0x1d8>
}
    448e:	+--|-- bra.s 44ca <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    4490:	|  '-> move.l 1d0dc <winWidth>,d0
    4496:	|      move.l d0,-(sp)
    4498:	|      jsr 17d94 <__floatunsisf>
    449e:	|      addq.l #4,sp
    44a0:	|      move.l d0,d1
    44a2:	|      move.l 1cb1a <cameraZoom>,d0
    44a8:	|      move.l d0,-(sp)
    44aa:	|      move.l d1,-(sp)
    44ac:	|      jsr 17c22 <__divsf3>
    44b2:	|      addq.l #8,sp
    44b4:	|      move.l d0,-(sp)
    44b6:	|      jsr 17d04 <__fixsfsi>
    44bc:	|      addq.l #4,sp
    44be:	|      subq.l #5,d0
    44c0:	|      sub.l 36(sp),d0
    44c4:	|      movea.l 60(sp),a0
    44c8:	|      move.l d0,(a0)
}
    44ca:	'----> nop
    44cc:	       movem.l (sp)+,d2-d5/a6
    44d0:	       lea 28(sp),sp
    44d4:	       rts

000044d6 <initSpeech>:


void initSpeech () {
    44d6:	       lea -12(sp),sp
    44da:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    44dc:	       moveq #20,d0
    44de:	       move.l d0,12(sp)
    44e2:	       clr.l 8(sp)
    44e6:	       move.l 1d188 <SysBase>,d0
    44ec:	       movea.l d0,a6
    44ee:	       move.l 12(sp),d0
    44f2:	       move.l 8(sp),d1
    44f6:	       jsr -684(a6)
    44fa:	       move.l d0,4(sp)
    44fe:	       move.l 4(sp),d0
    4502:	       move.l d0,1d0d8 <speech>
	if (speech) {
    4508:	       move.l 1d0d8 <speech>,d0
    450e:	,----- beq.s 453a <initSpeech+0x64>
		speech -> currentTalker = NULL;
    4510:	|      movea.l 1d0d8 <speech>,a0
    4516:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    4518:	|      movea.l 1d0d8 <speech>,a0
    451e:	|      clr.l 4(a0)
		speech -> speechY = 0;
    4522:	|      movea.l 1d0d8 <speech>,a0
    4528:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    452c:	|      movea.l 1d0d8 <speech>,a0
    4532:	|      moveq #-1,d0
    4534:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    4538:	|  ,-- bra.s 4548 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    453a:	'--|-> pea 18a98 <PutChar+0x6bc>
    4540:	   |   jsr 1793a <KPrintF>
    4546:	   |   addq.l #4,sp
}
    4548:	   '-> nop
    454a:	       movea.l (sp)+,a6
    454c:	       lea 12(sp),sp
    4550:	       rts

00004552 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    4552:	       movea.l 1d0d8 <speech>,a0
    4558:	       move.l 4(a0),d0
    455c:	,----- beq.s 456a <isThereAnySpeechGoingOn+0x18>
    455e:	|      movea.l 1d0d8 <speech>,a0
    4564:	|      move.l 16(a0),d0
    4568:	|  ,-- bra.s 456c <isThereAnySpeechGoingOn+0x1a>
    456a:	'--|-> moveq #-1,d0
}
    456c:	   '-> rts

0000456e <killAllSpeech>:

void killAllSpeech () {
    456e:	       lea -12(sp),sp
    4572:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    4574:	       movea.l 1d0d8 <speech>,a0
    457a:	       move.l 12(a0),d0
    457e:	       moveq #-1,d1
    4580:	       cmp.l d0,d1
    4582:	   ,-- beq.s 4590 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    4584:	   |   movea.l 1d0d8 <speech>,a0
    458a:	   |   moveq #-1,d0
    458c:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    4590:	   '-> movea.l 1d0d8 <speech>,a0
    4596:	       move.l (a0),d0
    4598:	,----- beq.w 4624 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    459c:	|      movea.l 1d0d8 <speech>,a0
    45a2:	|      move.l (a0),d1
    45a4:	|      lea -132(sp),sp
    45a8:	|      move.l sp,d0
    45aa:	|      movea.w #132,a0
    45ae:	|      move.l a0,-(sp)
    45b0:	|      move.l d1,-(sp)
    45b2:	|      move.l d0,-(sp)
    45b4:	|      jsr 178ee <memcpy>
    45ba:	|      lea 12(sp),sp
    45be:	|      jsr b140 <makeSilent>
    45c4:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    45c8:	|      movea.l 1d0d8 <speech>,a0
    45ce:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    45d0:	+----- bra.s 4624 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    45d2:	|  ,-> movea.l 1d0d8 <speech>,a0
    45d8:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    45de:	|  |   movea.l 1d0d8 <speech>,a0
    45e4:	|  |   movea.l 4(a0),a1
    45e8:	|  |   movea.l 1d0d8 <speech>,a0
    45ee:	|  |   move.l 4(a1),d0
    45f2:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    45f6:	|  |   movea.l 12(sp),a0
    45fa:	|  |   move.l (a0),8(sp)
    45fe:	|  |   move.l 1d188 <SysBase>,d0
    4604:	|  |   movea.l d0,a6
    4606:	|  |   movea.l 8(sp),a1
    460a:	|  |   jsr -690(a6)
		FreeVec(killMe);
    460e:	|  |   move.l 12(sp),4(sp)
    4614:	|  |   move.l 1d188 <SysBase>,d0
    461a:	|  |   movea.l d0,a6
    461c:	|  |   movea.l 4(sp),a1
    4620:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    4624:	'--|-> movea.l 1d0d8 <speech>,a0
    462a:	   |   move.l 4(a0),d0
    462e:	   '-- bne.s 45d2 <killAllSpeech+0x64>
	}
}
    4630:	       nop
    4632:	       nop
    4634:	       movea.l (sp)+,a6
    4636:	       lea 12(sp),sp
    463a:	       rts

0000463c <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    463c:	pea 2 <_start+0x2>
    4640:	move.l 8(sp),-(sp)
    4644:	jsr 479c <setFrames>
    464a:	addq.l #8,sp
}
    464c:	nop
    464e:	rts

00004650 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    4650:	       lea -52(sp),sp
    4654:	       move.l a6,-(sp)
    4656:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    4658:	       movea.l 64(sp),a0
    465c:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    4662:	       move.l 1caf2 <speechSpeed>,d0
    4668:	       move.l 68(sp),-(sp)
    466c:	       move.l d0,-(sp)
    466e:	       jsr a46 <putFloat>
    4674:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    4676:	       movea.l 64(sp),a0
    467a:	       move.l 8(a0),d0
    467e:	       move.l 68(sp),-(sp)
    4682:	       move.l d0,-(sp)
    4684:	       jsr 8d0 <put2bytes>
    468a:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    468c:	       movea.l 64(sp),a0
    4690:	       move.l 16(a0),d0
    4694:	       move.l 68(sp),-(sp)
    4698:	       move.l d0,-(sp)
    469a:	       jsr 8d0 <put2bytes>
    46a0:	       addq.l #8,sp
		if (sS -> currentTalker) {
    46a2:	       movea.l 64(sp),a0
    46a6:	       move.l (a0),d0
    46a8:	   ,-- beq.s 46ec <saveSpeech+0x9c>
			FPutC (fp, 1);
    46aa:	   |   move.l 68(sp),40(sp)
    46b0:	   |   moveq #1,d0
    46b2:	   |   move.l d0,36(sp)
    46b6:	   |   move.l 1d190 <DOSBase>,d0
    46bc:	   |   movea.l d0,a6
    46be:	   |   move.l 40(sp),d1
    46c2:	   |   move.l 36(sp),d2
    46c6:	   |   jsr -312(a6)
    46ca:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    46ce:	   |   movea.l 64(sp),a0
    46d2:	   |   movea.l (a0),a0
    46d4:	   |   movea.l 114(a0),a0
    46d8:	   |   move.l 4(a0),d0
    46dc:	   |   move.l 68(sp),-(sp)
    46e0:	   |   move.l d0,-(sp)
    46e2:	   |   jsr 8d0 <put2bytes>
    46e8:	   |   addq.l #8,sp
    46ea:	,--|-- bra.s 4768 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    46ec:	|  '-> move.l 68(sp),52(sp)
    46f2:	|      clr.l 48(sp)
    46f6:	|      move.l 1d190 <DOSBase>,d0
    46fc:	|      movea.l d0,a6
    46fe:	|      move.l 52(sp),d1
    4702:	|      move.l 48(sp),d2
    4706:	|      jsr -312(a6)
    470a:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    470e:	+----- bra.s 4768 <saveSpeech+0x118>
			FPutC (fp, 1);
    4710:	|  ,-> move.l 68(sp),16(sp)
    4716:	|  |   moveq #1,d0
    4718:	|  |   move.l d0,12(sp)
    471c:	|  |   move.l 1d190 <DOSBase>,d0
    4722:	|  |   movea.l d0,a6
    4724:	|  |   move.l 16(sp),d1
    4728:	|  |   move.l 12(sp),d2
    472c:	|  |   jsr -312(a6)
    4730:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    4734:	|  |   movea.l 56(sp),a0
    4738:	|  |   move.l (a0),d0
    473a:	|  |   move.l 68(sp),-(sp)
    473e:	|  |   move.l d0,-(sp)
    4740:	|  |   jsr bd8 <writeString>
    4746:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    4748:	|  |   movea.l 56(sp),a0
    474c:	|  |   move.l 8(a0),d0
    4750:	|  |   move.l 68(sp),-(sp)
    4754:	|  |   move.l d0,-(sp)
    4756:	|  |   jsr 8d0 <put2bytes>
    475c:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    475e:	|  |   movea.l 56(sp),a0
    4762:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    4768:	'--|-> tst.l 56(sp)
    476c:	   '-- bne.s 4710 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    476e:	       move.l 68(sp),28(sp)
    4774:	       clr.l 24(sp)
    4778:	       move.l 1d190 <DOSBase>,d0
    477e:	       movea.l d0,a6
    4780:	       move.l 28(sp),d1
    4784:	       move.l 24(sp),d2
    4788:	       jsr -312(a6)
    478c:	       move.l d0,20(sp)
}
    4790:	       nop
    4792:	       move.l (sp)+,d2
    4794:	       movea.l (sp)+,a6
    4796:	       lea 52(sp),sp
    479a:	       rts

0000479c <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    479c:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    479e:	movea.l 8(sp),a0
    47a2:	movea.l 80(a0),a0
    47a6:	move.l (a0),d2
    47a8:	movea.l 8(sp),a0
    47ac:	movea.l 80(a0),a0
    47b0:	move.l 4(a0),d0
    47b4:	move.l 12(sp),-(sp)
    47b8:	move.l d0,-(sp)
    47ba:	jsr 182c6 <__mulsi3>
    47c0:	addq.l #8,sp
    47c2:	move.l d0,d1
    47c4:	movea.l 8(sp),a0
    47c8:	move.l 106(a0),d0
    47cc:	add.l d1,d0
    47ce:	add.l d0,d0
    47d0:	add.l d0,d0
    47d2:	movea.l d2,a0
    47d4:	adda.l d0,a0
    47d6:	move.l (a0),d0
    47d8:	movea.l 8(sp),a0
    47dc:	move.l d0,72(a0)
}
    47e0:	nop
    47e2:	move.l (sp)+,d2
    47e4:	rts

000047e6 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    47e6:	       lea -20(sp),sp
    47ea:	       move.l d2,-(sp)
    47ec:	       move.l 40(sp),d0
    47f0:	       move.w d0,d0
    47f2:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    47f6:	       movea.l 1d0d8 <speech>,a0
    47fc:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    4802:	       move.l 32(sp),-(sp)
    4806:	       jsr ac00 <findPerson>
    480c:	       addq.l #4,sp
    480e:	       move.l d0,16(sp)
    if (thisPerson) {
    4812:	   ,-- beq.s 4838 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    4814:	   |   movea.w 6(sp),a0
    4818:	   |   move.l a0,-(sp)
    481a:	   |   move.l 40(sp),-(sp)
    481e:	   |   move.l 24(sp),-(sp)
    4822:	   |   move.l 40(sp),-(sp)
    4826:	   |   jsr 48fe <wrapSpeechPerson>
    482c:	   |   lea 16(sp),sp
    4830:	   |   move.l d0,20(sp)
    4834:	,--|-- bra.w 48f2 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    4838:	|  '-> move.l 32(sp),-(sp)
    483c:	|      jsr 1611c <getRegionForObject>
    4842:	|      addq.l #4,sp
    4844:	|      move.l d0,12(sp)
        if (thisRegion) {
    4848:	|  ,-- beq.s 48b4 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    484a:	|  |   movea.l 12(sp),a0
    484e:	|  |   movea.l 28(a0),a0
    4852:	|  |   move.l 28(a0),d0
    4856:	|  |   movea.l 12(sp),a0
    485a:	|  |   movea.l 4(a0),a1
    485e:	|  |   movea.l 12(sp),a0
    4862:	|  |   movea.l 28(a0),a0
    4866:	|  |   move.l 20(a0),d1
    486a:	|  |   movea.l a1,a0
    486c:	|  |   suba.l d1,a0
    486e:	|  |   move.l 1d242 <cameraY>,d1
    4874:	|  |   movea.l a0,a1
    4876:	|  |   suba.l d1,a1
    4878:	|  |   movea.l 12(sp),a0
    487c:	|  |   move.l (a0),d2
    487e:	|  |   movea.l 12(sp),a0
    4882:	|  |   move.l 8(a0),d1
    4886:	|  |   add.l d2,d1
    4888:	|  |   move.l d1,d2
    488a:	|  |   asr.l #1,d2
    488c:	|  |   move.l 1d23e <cameraX>,d1
    4892:	|  |   movea.l d2,a0
    4894:	|  |   suba.l d1,a0
    4896:	|  |   move.l 36(sp),-(sp)
    489a:	|  |   move.l d0,-(sp)
    489c:	|  |   move.l a1,-(sp)
    489e:	|  |   move.l a0,-(sp)
    48a0:	|  |   move.l 44(sp),-(sp)
    48a4:	|  |   jsr 4a1c <wrapSpeechXY>
    48aa:	|  |   lea 20(sp),sp
    48ae:	|  |   move.l d0,20(sp)
    48b2:	+--|-- bra.s 48f2 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    48b4:	|  '-> move.l 32(sp),-(sp)
    48b8:	|      jsr db6e <findObjectType>
    48be:	|      addq.l #4,sp
    48c0:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    48c4:	|      movea.l 8(sp),a0
    48c8:	|      move.l 28(a0),d1
    48cc:	|      move.l 1d0dc <winWidth>,d0
    48d2:	|      lsr.l #1,d0
    48d4:	|      move.l 36(sp),-(sp)
    48d8:	|      move.l d1,-(sp)
    48da:	|      pea a <_start+0xa>
    48de:	|      move.l d0,-(sp)
    48e0:	|      move.l 44(sp),-(sp)
    48e4:	|      jsr 4a1c <wrapSpeechXY>
    48ea:	|      lea 20(sp),sp
    48ee:	|      move.l d0,20(sp)
        }
    }
    return i;
    48f2:	'----> move.l 20(sp),d0
}
    48f6:	       move.l (sp)+,d2
    48f8:	       lea 20(sp),sp
    48fc:	       rts

000048fe <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    48fe:	    subq.l #8,sp
    4900:	    movem.l d2-d4,-(sp)
    4904:	    move.l 36(sp),d0
    4908:	    move.w d0,d0
    490a:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    490e:	    movea.l 28(sp),a0
    4912:	    movea.l 114(a0),a0
    4916:	    move.l 28(a0),d2
    491a:	    movea.l 28(sp),a0
    491e:	    move.l 4(a0),d3
    4922:	    move.l 1d242 <cameraY>,d0
    4928:	    move.l d0,-(sp)
    492a:	    jsr 17d6c <__floatsisf>
    4930:	    addq.l #4,sp
    4932:	    move.l d0,-(sp)
    4934:	    move.l d3,-(sp)
    4936:	    jsr 18060 <__subsf3>
    493c:	    addq.l #8,sp
    493e:	    move.l d0,d3
    4940:	    movea.l 28(sp),a0
    4944:	    move.l 32(a0),d4
    4948:	    movea.l 28(sp),a0
    494c:	    move.l 20(a0),d1
    4950:	    movea.l 28(sp),a0
    4954:	    move.l 24(a0),d0
    4958:	    sub.l d0,d1
    495a:	    move.l d1,-(sp)
    495c:	    jsr 17d6c <__floatsisf>
    4962:	    addq.l #4,sp
    4964:	    move.l d0,-(sp)
    4966:	    move.l d4,-(sp)
    4968:	    jsr 17e1e <__mulsf3>
    496e:	    addq.l #8,sp
    4970:	    move.l d0,-(sp)
    4972:	    move.l d3,-(sp)
    4974:	    jsr 18060 <__subsf3>
    497a:	    addq.l #8,sp
    497c:	    move.l d0,d3
    497e:	    movea.l 28(sp),a0
    4982:	    movea.l 114(a0),a0
    4986:	    move.l 20(a0),d0
    498a:	    move.l d0,-(sp)
    498c:	    jsr 17d6c <__floatsisf>
    4992:	    addq.l #4,sp
    4994:	    move.l d0,-(sp)
    4996:	    move.l d3,-(sp)
    4998:	    jsr 18060 <__subsf3>
    499e:	    addq.l #8,sp
    49a0:	    move.l d0,-(sp)
    49a2:	    jsr 17d04 <__fixsfsi>
    49a8:	    addq.l #4,sp
    49aa:	    move.l d0,d4
    49ac:	    movea.l 28(sp),a0
    49b0:	    move.l (a0),d3
    49b2:	    move.l 1d23e <cameraX>,d0
    49b8:	    move.l d0,-(sp)
    49ba:	    jsr 17d6c <__floatsisf>
    49c0:	    addq.l #4,sp
    49c2:	    move.l d0,-(sp)
    49c4:	    move.l d3,-(sp)
    49c6:	    jsr 18060 <__subsf3>
    49cc:	    addq.l #8,sp
    49ce:	    move.l d0,-(sp)
    49d0:	    jsr 17d04 <__fixsfsi>
    49d6:	    addq.l #4,sp
    49d8:	    move.l 32(sp),-(sp)
    49dc:	    move.l d2,-(sp)
    49de:	    move.l d4,-(sp)
    49e0:	    move.l d0,-(sp)
    49e2:	    move.l 40(sp),-(sp)
    49e6:	    jsr 4a1c <wrapSpeechXY>
    49ec:	    lea 20(sp),sp
    49f0:	    move.l d0,16(sp)
	if (animPerson) {
    49f4:	    tst.w 14(sp)
    49f8:	,-- beq.s 4a10 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    49fa:	|   move.l 28(sp),-(sp)
    49fe:	|   jsr 463c <makeTalker>
    4a04:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    4a06:	|   movea.l 1d0d8 <speech>,a0
    4a0c:	|   move.l 28(sp),(a0)
	}
	return i;
    4a10:	'-> move.l 16(sp),d0
}
    4a14:	    movem.l (sp)+,d2-d4
    4a18:	    addq.l #8,sp
    4a1a:	    rts

00004a1c <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    4a1c:	                   lea -16(sp),sp
    4a20:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    4a24:	                   clr.l 16(sp)
    killAllSpeech();
    4a28:	                   jsr 456e <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    4a2e:	                   move.l 36(sp),-(sp)
    4a32:	                   jsr 14346 <strlen>
    4a38:	                   addq.l #4,sp
    4a3a:	                   movea.l d0,a0
    4a3c:	                   lea 20(a0),a0
    4a40:	                   move.l a0,-(sp)
    4a42:	                   jsr 17d94 <__floatunsisf>
    4a48:	                   addq.l #4,sp
    4a4a:	                   move.l d0,d1
    4a4c:	                   move.l 1caf2 <speechSpeed>,d0
    4a52:	                   move.l d0,-(sp)
    4a54:	                   move.l d1,-(sp)
    4a56:	                   jsr 17e1e <__mulsf3>
    4a5c:	                   addq.l #8,sp
    4a5e:	                   move.l d0,-(sp)
    4a60:	                   jsr 17d04 <__fixsfsi>
    4a66:	                   addq.l #4,sp
    4a68:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    4a6c:	               ,-- bgt.s 4a74 <wrapSpeechXY+0x58>
    4a6e:	               |   moveq #1,d0
    4a70:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    4a74:	               '-> moveq #-1,d1
    4a76:	                   cmp.l 52(sp),d1
    4a7a:	               ,-- beq.s 4aba <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    4a7c:	               |   move.l 1d252 <speechMode>,d0
    4a82:	               +-- ble.s 4aba <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    4a84:	               |   clr.l -(sp)
    4a86:	               |   move.l 56(sp),-(sp)
    4a8a:	               |   jsr d82e <startSound>
    4a90:	               |   addq.l #8,sp
    4a92:	               |   tst.w d0
    4a94:	               +-- beq.s 4aba <wrapSpeechXY+0x9e>
                speechTime = -10;
    4a96:	               |   moveq #-10,d0
    4a98:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    4a9c:	               |   movea.l 1d0d8 <speech>,a0
    4aa2:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    4aa8:	               |   move.l 1d252 <speechMode>,d0
    4aae:	               |   moveq #2,d1
    4ab0:	               |   cmp.l d0,d1
    4ab2:	               +-- bne.s 4aba <wrapSpeechXY+0x9e>
    4ab4:	               |   moveq #-10,d0
    4ab6:	,--------------|-- bra.w 4d40 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    4aba:	|              '-> movea.l 1d0d8 <speech>,a0
    4ac0:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    4ac6:	|     ,----------- bra.w 4b7a <wrapSpeechXY+0x15e>
        a = wrap;
    4aca:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    4ad0:	|  |  |        ,-- bra.s 4ae0 <wrapSpeechXY+0xc4>
            a--;
    4ad2:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    4ad6:	|  |  |  |     +-- bne.s 4ae0 <wrapSpeechXY+0xc4>
                a = wrap;
    4ad8:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    4ade:	|  |  |  |  ,--|-- bra.s 4af2 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    4ae0:	|  |  |  |  |  '-> move.l 28(sp),d0
    4ae4:	|  |  |  |  |      movea.l 36(sp),a0
    4ae8:	|  |  |  |  |      adda.l d0,a0
    4aea:	|  |  |  |  |      move.b (a0),d0
    4aec:	|  |  |  |  |      cmpi.b #32,d0
    4af0:	|  |  |  '--|----- bne.s 4ad2 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    4af2:	|  |  |     '----> move.l 28(sp),d0
    4af6:	|  |  |            movea.l 36(sp),a0
    4afa:	|  |  |            adda.l d0,a0
    4afc:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    4afe:	|  |  |            lea 16(sp),a0
    4b02:	|  |  |            move.l a0,-(sp)
    4b04:	|  |  |            move.l 44(sp),-(sp)
    4b08:	|  |  |            move.l 44(sp),-(sp)
    4b0c:	|  |  |            jsr 42b8 <addSpeechLine>
    4b12:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    4b16:	|  |  |            move.l 28(sp),d0
    4b1a:	|  |  |            movea.l 36(sp),a0
    4b1e:	|  |  |            adda.l d0,a0
    4b20:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    4b24:	|  |  |            move.l 28(sp),d0
    4b28:	|  |  |            addq.l #1,d0
    4b2a:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    4b2e:	|  |  |            move.l 44(sp),-(sp)
    4b32:	|  |  |            jsr 17d6c <__floatsisf>
    4b38:	|  |  |            addq.l #4,sp
    4b3a:	|  |  |            move.l d0,d2
    4b3c:	|  |  |            move.l 1d27c <fontHeight>,d0
    4b42:	|  |  |            move.l d0,-(sp)
    4b44:	|  |  |            jsr 17d6c <__floatsisf>
    4b4a:	|  |  |            addq.l #4,sp
    4b4c:	|  |  |            move.l d0,d1
    4b4e:	|  |  |            move.l 1cb1a <cameraZoom>,d0
    4b54:	|  |  |            move.l d0,-(sp)
    4b56:	|  |  |            move.l d1,-(sp)
    4b58:	|  |  |            jsr 17c22 <__divsf3>
    4b5e:	|  |  |            addq.l #8,sp
    4b60:	|  |  |            move.l d0,-(sp)
    4b62:	|  |  |            move.l d2,-(sp)
    4b64:	|  |  |            jsr 18060 <__subsf3>
    4b6a:	|  |  |            addq.l #8,sp
    4b6c:	|  |  |            move.l d0,-(sp)
    4b6e:	|  |  |            jsr 17d04 <__fixsfsi>
    4b74:	|  |  |            addq.l #4,sp
    4b76:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    4b7a:	|  |  '----------> move.l 36(sp),-(sp)
    4b7e:	|  |               jsr 14346 <strlen>
    4b84:	|  |               addq.l #4,sp
    4b86:	|  |               move.l d0,d1
    4b88:	|  |               move.l 48(sp),d0
    4b8c:	|  |               cmp.l d1,d0
    4b8e:	|  '-------------- bcs.w 4aca <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    4b92:	|                  lea 16(sp),a0
    4b96:	|                  move.l a0,-(sp)
    4b98:	|                  move.l 44(sp),-(sp)
    4b9c:	|                  move.l 44(sp),-(sp)
    4ba0:	|                  jsr 42b8 <addSpeechLine>
    4ba6:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    4baa:	|                  move.l 44(sp),-(sp)
    4bae:	|                  jsr 17d6c <__floatsisf>
    4bb4:	|                  addq.l #4,sp
    4bb6:	|                  move.l d0,d2
    4bb8:	|                  move.l 1d27c <fontHeight>,d0
    4bbe:	|                  move.l d0,-(sp)
    4bc0:	|                  jsr 17d6c <__floatsisf>
    4bc6:	|                  addq.l #4,sp
    4bc8:	|                  move.l d0,d1
    4bca:	|                  move.l 1cb1a <cameraZoom>,d0
    4bd0:	|                  move.l d0,-(sp)
    4bd2:	|                  move.l d1,-(sp)
    4bd4:	|                  jsr 17c22 <__divsf3>
    4bda:	|                  addq.l #8,sp
    4bdc:	|                  move.l d0,-(sp)
    4bde:	|                  move.l d2,-(sp)
    4be0:	|                  jsr 18060 <__subsf3>
    4be6:	|                  addq.l #8,sp
    4be8:	|                  move.l d0,-(sp)
    4bea:	|                  jsr 17d04 <__fixsfsi>
    4bf0:	|                  addq.l #4,sp
    4bf2:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    4bf6:	|              ,-- bpl.s 4c14 <wrapSpeechXY+0x1f8>
    4bf8:	|              |   movea.l 1d0d8 <speech>,a0
    4bfe:	|              |   move.l 8(a0),d0
    4c02:	|              |   movea.l 1d0d8 <speech>,a0
    4c08:	|              |   sub.l 44(sp),d0
    4c0c:	|              |   move.l d0,8(a0)
    4c10:	|           ,--|-- bra.w 4d02 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    4c14:	|           |  '-> movea.l 1d0d8 <speech>,a0
    4c1a:	|           |      move.l 8(a0),d0
    4c1e:	|           |      move.l d0,-(sp)
    4c20:	|           |      jsr 17d6c <__floatsisf>
    4c26:	|           |      addq.l #4,sp
    4c28:	|           |      move.l d0,d2
    4c2a:	|           |      move.l 1d242 <cameraY>,d0
    4c30:	|           |      move.l d0,-(sp)
    4c32:	|           |      jsr 17d6c <__floatsisf>
    4c38:	|           |      addq.l #4,sp
    4c3a:	|           |      move.l d0,d3
    4c3c:	|           |      move.l 1d0e0 <winHeight>,d4
    4c42:	|           |      move.l 1d27c <fontHeight>,d0
    4c48:	|           |      pea 3 <_start+0x3>
    4c4c:	|           |      move.l d0,-(sp)
    4c4e:	|           |      jsr 18344 <__divsi3>
    4c54:	|           |      addq.l #8,sp
    4c56:	|           |      move.l d4,d1
    4c58:	|           |      sub.l d0,d1
    4c5a:	|           |      move.l d1,-(sp)
    4c5c:	|           |      jsr 17d94 <__floatunsisf>
    4c62:	|           |      addq.l #4,sp
    4c64:	|           |      move.l d0,d1
    4c66:	|           |      move.l 1cb1a <cameraZoom>,d0
    4c6c:	|           |      move.l d0,-(sp)
    4c6e:	|           |      move.l d1,-(sp)
    4c70:	|           |      jsr 17c22 <__divsf3>
    4c76:	|           |      addq.l #8,sp
    4c78:	|           |      move.l d0,-(sp)
    4c7a:	|           |      move.l d3,-(sp)
    4c7c:	|           |      jsr 17b28 <__addsf3>
    4c82:	|           |      addq.l #8,sp
    4c84:	|           |      move.l d0,-(sp)
    4c86:	|           |      move.l d2,-(sp)
    4c88:	|           |      jsr 17ed8 <__gtsf2>
    4c8e:	|           |      addq.l #8,sp
    4c90:	|           |      tst.l d0
    4c92:	|           +----- ble.s 4d02 <wrapSpeechXY+0x2e6>
    4c94:	|           |      move.l 1d242 <cameraY>,d0
    4c9a:	|           |      move.l d0,-(sp)
    4c9c:	|           |      jsr 17d6c <__floatsisf>
    4ca2:	|           |      addq.l #4,sp
    4ca4:	|           |      move.l d0,d2
    4ca6:	|           |      move.l 1d0e0 <winHeight>,d3
    4cac:	|           |      move.l 1d27c <fontHeight>,d0
    4cb2:	|           |      pea 3 <_start+0x3>
    4cb6:	|           |      move.l d0,-(sp)
    4cb8:	|           |      jsr 18344 <__divsi3>
    4cbe:	|           |      addq.l #8,sp
    4cc0:	|           |      move.l d3,d1
    4cc2:	|           |      sub.l d0,d1
    4cc4:	|           |      move.l d1,-(sp)
    4cc6:	|           |      jsr 17d94 <__floatunsisf>
    4ccc:	|           |      addq.l #4,sp
    4cce:	|           |      move.l d0,d1
    4cd0:	|           |      move.l 1cb1a <cameraZoom>,d0
    4cd6:	|           |      move.l d0,-(sp)
    4cd8:	|           |      move.l d1,-(sp)
    4cda:	|           |      jsr 17c22 <__divsf3>
    4ce0:	|           |      addq.l #8,sp
    4ce2:	|           |      move.l d0,-(sp)
    4ce4:	|           |      move.l d2,-(sp)
    4ce6:	|           |      jsr 17b28 <__addsf3>
    4cec:	|           |      addq.l #8,sp
    4cee:	|           |      movea.l 1d0d8 <speech>,a2
    4cf4:	|           |      move.l d0,-(sp)
    4cf6:	|           |      jsr 17d04 <__fixsfsi>
    4cfc:	|           |      addq.l #4,sp
    4cfe:	|           |      move.l d0,8(a2)

    if (offset) {
    4d02:	|           '----> move.l 16(sp),d0
    4d06:	|        ,-------- beq.s 4d3c <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    4d08:	|        |         movea.l 1d0d8 <speech>,a0
    4d0e:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    4d14:	|        |     ,-- bra.s 4d36 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    4d16:	|        |  ,--|-> movea.l 20(sp),a0
    4d1a:	|        |  |  |   move.l 8(a0),d1
    4d1e:	|        |  |  |   move.l 16(sp),d0
    4d22:	|        |  |  |   add.l d1,d0
    4d24:	|        |  |  |   movea.l 20(sp),a0
    4d28:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    4d2c:	|        |  |  |   movea.l 20(sp),a0
    4d30:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    4d36:	|        |  |  '-> tst.l 20(sp)
    4d3a:	|        |  '----- bne.s 4d16 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    4d3c:	|        '-------> move.l 24(sp),d0
}
    4d40:	'----------------> movem.l (sp)+,d2-d4/a2
    4d44:	                   lea 16(sp),sp
    4d48:	                   rts

00004d4a <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    4d4a:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    4d4e:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    4d52:	       tst.l 24(sp)
    4d56:	   ,-- bge.s 4d5c <drawLine+0x12>
    4d58:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    4d5c:	   '-> tst.l 28(sp)
    4d60:	   ,-- bge.s 4d66 <drawLine+0x1c>
    4d62:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4d66:	   '-> tst.l 32(sp)
    4d6a:	   ,-- bge.s 4d70 <drawLine+0x26>
    4d6c:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    4d70:	   '-> tst.l 36(sp)
    4d74:	   ,-- bge.s 4d7a <drawLine+0x30>
    4d76:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    4d7a:	   '-> move.l 1d220 <sceneWidth>,d0
    4d80:	       cmp.l 24(sp),d0
    4d84:	   ,-- bge.s 4d94 <drawLine+0x4a>
    4d86:	   |   move.l 1d220 <sceneWidth>,d0
    4d8c:	   |   move.l d0,d1
    4d8e:	   |   subq.l #1,d1
    4d90:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    4d94:	   '-> move.l 1d220 <sceneWidth>,d0
    4d9a:	       cmp.l 32(sp),d0
    4d9e:	   ,-- bge.s 4dae <drawLine+0x64>
    4da0:	   |   move.l 1d220 <sceneWidth>,d0
    4da6:	   |   move.l d0,d1
    4da8:	   |   subq.l #1,d1
    4daa:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4dae:	   '-> move.l 1d224 <sceneHeight>,d0
    4db4:	       cmp.l 28(sp),d0
    4db8:	   ,-- bge.s 4dc8 <drawLine+0x7e>
    4dba:	   |   move.l 1d224 <sceneHeight>,d0
    4dc0:	   |   move.l d0,d1
    4dc2:	   |   subq.l #1,d1
    4dc4:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    4dc8:	   '-> move.l 1d224 <sceneHeight>,d0
    4dce:	       cmp.l 36(sp),d0
    4dd2:	   ,-- bge.s 4de2 <drawLine+0x98>
    4dd4:	   |   move.l 1d224 <sceneHeight>,d0
    4dda:	   |   move.l d0,d1
    4ddc:	   |   subq.l #1,d1
    4dde:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4de2:	   '-> move.l 24(sp),d0
    4de6:	       cmp.l 32(sp),d0
    4dea:	,----- ble.s 4e06 <drawLine+0xbc>
		x = x2; 
    4dec:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    4df2:	|      tst.w 10(sp)
    4df6:	|      seq d0
    4df8:	|      neg.b d0
    4dfa:	|      move.b d0,d0
    4dfc:	|      andi.w #255,d0
    4e00:	|      move.w d0,10(sp)
    4e04:	|  ,-- bra.s 4e0c <drawLine+0xc2>
	} else x = x1;
    4e06:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4e0c:	   '-> move.l 28(sp),d1
    4e10:	       cmp.l 36(sp),d1
    4e14:	,----- ble.s 4e30 <drawLine+0xe6>
		y = y2; 
    4e16:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    4e1c:	|      tst.w 10(sp)
    4e20:	|      seq d0
    4e22:	|      neg.b d0
    4e24:	|      move.b d0,d0
    4e26:	|      andi.w #255,d0
    4e2a:	|      move.w d0,10(sp)
    4e2e:	|  ,-- bra.s 4e36 <drawLine+0xec>
	} else y = y1;	
    4e30:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4e36:	   '-> move.l 32(sp),d0
    4e3a:	       sub.l 24(sp),d0
    4e3e:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    4e42:	       move.l 6(sp),d0
    4e46:	   ,-- bpl.s 4e4a <drawLine+0x100>
    4e48:	   |   neg.l d0
    4e4a:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4e4e:	       move.l 36(sp),d1
    4e52:	       sub.l 28(sp),d1
    4e56:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    4e5a:	       move.l 2(sp),d0
    4e5e:	   ,-- bpl.s 4e62 <drawLine+0x118>
    4e60:	   |   neg.l d0
    4e62:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4e66:	       tst.l 6(sp)
    4e6a:	   ,-- bne.s 4e8e <drawLine+0x144>
		diffX = 1;
    4e6c:	   |   moveq #1,d0
    4e6e:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4e72:	   |   move.l 1d220 <sceneWidth>,d0
    4e78:	   |   subq.l #1,d0
    4e7a:	   |   cmp.l 16(sp),d0
    4e7e:	   +-- bne.s 4e8e <drawLine+0x144>
    4e80:	   |   move.l 1d220 <sceneWidth>,d0
    4e86:	   |   move.l d0,d1
    4e88:	   |   subq.l #2,d1
    4e8a:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4e8e:	   '-> tst.l 2(sp)
    4e92:	   ,-- bne.s 4eb6 <drawLine+0x16c>
		diffY = 1;
    4e94:	   |   moveq #1,d0
    4e96:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    4e9a:	   |   move.l 1d224 <sceneHeight>,d0
    4ea0:	   |   subq.l #1,d0
    4ea2:	   |   cmp.l 12(sp),d0
    4ea6:	   +-- bne.s 4eb6 <drawLine+0x16c>
    4ea8:	   |   move.l 1d224 <sceneHeight>,d0
    4eae:	   |   move.l d0,d1
    4eb0:	   |   subq.l #2,d1
    4eb2:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4eb6:	   '-> pea 18ad5 <PutChar+0x6f9>
    4ebc:	       jsr 1793a <KPrintF>
    4ec2:	       addq.l #4,sp
	
}
    4ec4:	       nop
    4ec6:	       lea 20(sp),sp
    4eca:	       rts

00004ecc <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4ecc:	                      lea -24(sp),sp
    4ed0:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4ed2:	                      move.l 1d0e4 <firstTexture>,d0
    4ed8:	,-------------------- beq.w 4fb6 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4edc:	|                     clr.l 24(sp)
    4ee0:	|     ,-------------- bra.w 4faa <deleteTextures+0xde>
			BOOL found = FALSE;
    4ee4:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4ee8:	|  |  |               move.l 1d0e4 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4ef0:	|  |  |               movea.l 20(sp),a0
    4ef4:	|  |  |               move.l (a0),d1
    4ef6:	|  |  |               move.l 24(sp),d0
    4efa:	|  |  |               add.l d0,d0
    4efc:	|  |  |               add.l d0,d0
    4efe:	|  |  |               movea.l 36(sp),a0
    4f02:	|  |  |               adda.l d0,a0
    4f04:	|  |  |               move.l (a0),d0
    4f06:	|  |  |               cmp.l d1,d0
    4f08:	|  |  |  ,----------- bne.w 4f9c <deleteTextures+0xd0>
				found = TRUE;
    4f0c:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4f12:	|  |  |  |            movea.l 20(sp),a0
    4f16:	|  |  |  |            move.l 12(a0),d0
    4f1a:	|  |  |  |            move.l d0,1d0e4 <firstTexture>
				FreeVec(list);
    4f20:	|  |  |  |            move.l 20(sp),6(sp)
    4f26:	|  |  |  |            move.l 1d188 <SysBase>,d0
    4f2c:	|  |  |  |            movea.l d0,a6
    4f2e:	|  |  |  |            movea.l 6(sp),a1
    4f32:	|  |  |  |            jsr -690(a6)
				continue;
    4f36:	|  |  |  |  ,-------- bra.s 4fa6 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4f38:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    4f3c:	|  |  |  |  |  |      movea.l 12(a0),a0
    4f40:	|  |  |  |  |  |      move.l (a0),d1
    4f42:	|  |  |  |  |  |      move.l 24(sp),d0
    4f46:	|  |  |  |  |  |      add.l d0,d0
    4f48:	|  |  |  |  |  |      add.l d0,d0
    4f4a:	|  |  |  |  |  |      movea.l 36(sp),a0
    4f4e:	|  |  |  |  |  |      adda.l d0,a0
    4f50:	|  |  |  |  |  |      move.l (a0),d0
    4f52:	|  |  |  |  |  |      cmp.l d1,d0
    4f54:	|  |  |  |  |  |  ,-- bne.s 4f92 <deleteTextures+0xc6>
					found = TRUE;
    4f56:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    4f5c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4f60:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4f66:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4f6a:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4f6e:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4f72:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4f76:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4f7a:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4f80:	|  |  |  |  |  |  |   move.l 1d188 <SysBase>,d0
    4f86:	|  |  |  |  |  |  |   movea.l d0,a6
    4f88:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    4f8c:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4f90:	|  |  |  |  +--|--|-- bra.s 4fa6 <deleteTextures+0xda>
				}
				list = list->next;
    4f92:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4f96:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4f9c:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4fa0:	|  |  |     |  |      move.l 12(a0),d0
    4fa4:	|  |  |     |  '----- bne.s 4f38 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4fa6:	|  |  |     '-------> addq.l #1,24(sp)
    4faa:	|  |  '-------------> move.l 24(sp),d0
    4fae:	|  |                  cmp.l 32(sp),d0
    4fb2:	|  '----------------- bcs.w 4ee4 <deleteTextures+0x18>
			}
		}
	}
}
    4fb6:	'-------------------> nop
    4fb8:	                      movea.l (sp)+,a6
    4fba:	                      lea 24(sp),sp
    4fbe:	                      rts

00004fc0 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4fc0:	subq.l #4,sp
    4fc2:	move.l 8(sp),d0
    4fc6:	move.w d0,d0
    4fc8:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4fcc:	pea 18af8 <PutChar+0x71c>
    4fd2:	jsr 1793a <KPrintF>
    4fd8:	addq.l #4,sp
}
    4fda:	nop
    4fdc:	addq.l #4,sp
    4fde:	rts

00004fe0 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4fe0:	       moveq #-1,d0
    4fe2:	       cmp.l 4(sp),d0
    4fe6:	   ,-- bne.s 4fec <resourceNameFromNum+0xc>
    4fe8:	   |   moveq #0,d0
    4fea:	,--|-- bra.s 5024 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4fec:	|  '-> move.l 1d164 <numResourceNames>,d0
    4ff2:	|  ,-- bne.s 4ffc <resourceNameFromNum+0x1c>
    4ff4:	|  |   move.l #101160,d0
    4ffa:	+--|-- bra.s 5024 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4ffc:	|  '-> move.l 1d164 <numResourceNames>,d0
    5002:	|      cmp.l 4(sp),d0
    5006:	|  ,-- ble.s 501e <resourceNameFromNum+0x3e>
    5008:	|  |   move.l 1d11c <allResourceNames>,d1
    500e:	|  |   move.l 4(sp),d0
    5012:	|  |   add.l d0,d0
    5014:	|  |   add.l d0,d0
    5016:	|  |   movea.l d1,a0
    5018:	|  |   adda.l d0,a0
    501a:	|  |   move.l (a0),d0
    501c:	+--|-- bra.s 5024 <resourceNameFromNum+0x44>
	return "Unknown resource";
    501e:	|  '-> move.l #101169,d0
    5024:	'----> rts

00005026 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    5026:	          lea -44(sp),sp
    502a:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    502e:	          move.l #320,1d0dc <winWidth>
    winHeight = 256;
    5038:	          move.l #256,1d0e0 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    5042:	          tst.l 60(sp)
    5046:	      ,-- bne.s 505e <main_sludge+0x38>
		bundleFolder = copyString("game/");
    5048:	      |   pea 18b42 <PutChar+0x766>
    504e:	      |   jsr b8 <copyString>
    5054:	      |   addq.l #4,sp
    5056:	      |   move.l d0,1d0f4 <bundleFolder>
    505c:	   ,--|-- bra.s 5074 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    505e:	   |  '-> movea.l 64(sp),a0
    5062:	   |      move.l (a0),d0
    5064:	   |      move.l d0,-(sp)
    5066:	   |      jsr b8 <copyString>
    506c:	   |      addq.l #4,sp
    506e:	   |      move.l d0,1d0f4 <bundleFolder>
	}
    
	int lastSlash = -1;
    5074:	   '----> moveq #-1,d0
    5076:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    507a:	          clr.l 44(sp)
    507e:	   ,----- bra.s 50a0 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    5080:	,--|----> move.l 1d0f4 <bundleFolder>,d1
    5086:	|  |      move.l 44(sp),d0
    508a:	|  |      movea.l d1,a0
    508c:	|  |      adda.l d0,a0
    508e:	|  |      move.b (a0),d0
    5090:	|  |      cmpi.b #47,d0
    5094:	|  |  ,-- bne.s 509c <main_sludge+0x76>
    5096:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    509c:	|  |  '-> addq.l #1,44(sp)
    50a0:	|  '----> move.l 1d0f4 <bundleFolder>,d1
    50a6:	|         move.l 44(sp),d0
    50aa:	|         movea.l d1,a0
    50ac:	|         adda.l d0,a0
    50ae:	|         move.b (a0),d0
    50b0:	'-------- bne.s 5080 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    50b2:	          move.l 1d0f4 <bundleFolder>,d0
    50b8:	          move.l 48(sp),d1
    50bc:	          addq.l #1,d1
    50be:	          movea.l d0,a0
    50c0:	          adda.l d1,a0
    50c2:	          clr.b (a0)

	if (argc > 1) {
    50c4:	          moveq #1,d0
    50c6:	          cmp.l 60(sp),d0
    50ca:	      ,-- bge.s 50e6 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    50cc:	      |   move.l 60(sp),d0
    50d0:	      |   addi.l #1073741823,d0
    50d6:	      |   add.l d0,d0
    50d8:	      |   add.l d0,d0
    50da:	      |   movea.l 64(sp),a0
    50de:	      |   adda.l d0,a0
    50e0:	      |   move.l (a0),52(sp)
    50e4:	   ,--|-- bra.s 5140 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    50e6:	   |  '-> move.l 1d0f4 <bundleFolder>,d0
    50ec:	   |      pea 18b48 <PutChar+0x76c>
    50f2:	   |      move.l d0,-(sp)
    50f4:	   |      jsr 14386 <joinStrings>
    50fa:	   |      addq.l #8,sp
    50fc:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    5100:	   |      move.l 52(sp),-(sp)
    5104:	   |      jsr 14280 <fileExists>
    510a:	   |      addq.l #4,sp
    510c:	   |      tst.b d0
    510e:	   +----- bne.s 5140 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    5110:	   |      move.l 52(sp),40(sp)
    5116:	   |      move.l 1d188 <SysBase>,d0
    511c:	   |      movea.l d0,a6
    511e:	   |      movea.l 40(sp),a1
    5122:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    5126:	   |      move.l 1d0f4 <bundleFolder>,d0
    512c:	   |      pea 18b55 <PutChar+0x779>
    5132:	   |      move.l d0,-(sp)
    5134:	   |      jsr 14386 <joinStrings>
    513a:	   |      addq.l #8,sp
    513c:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    5140:	   '----> pea 18b5e <PutChar+0x782>
    5146:	          jsr 1793a <KPrintF>
    514c:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    514e:	          move.l 52(sp),-(sp)
    5152:	          jsr 14280 <fileExists>
    5158:	          addq.l #4,sp
    515a:	          tst.b d0
    515c:	      ,-- bne.s 51b4 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    515e:	      |   move.l 1d190 <DOSBase>,d0
    5164:	      |   movea.l d0,a6
    5166:	      |   jsr -60(a6)
    516a:	      |   move.l d0,28(sp)
    516e:	      |   move.l 28(sp),d0
    5172:	      |   move.l d0,24(sp)
    5176:	      |   move.l #101214,20(sp)
    517e:	      |   moveq #21,d0
    5180:	      |   move.l d0,16(sp)
    5184:	      |   move.l 1d190 <DOSBase>,d0
    518a:	      |   movea.l d0,a6
    518c:	      |   move.l 24(sp),d1
    5190:	      |   move.l 20(sp),d2
    5194:	      |   move.l 16(sp),d3
    5198:	      |   jsr -48(a6)
    519c:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    51a0:	      |   pea 18b5e <PutChar+0x782>
    51a6:	      |   jsr 1793a <KPrintF>
    51ac:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    51ae:	      |   moveq #0,d0
    51b0:	,-----|-- bra.w 53b2 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    51b4:	|     '-> pea 18b74 <PutChar+0x798>
    51ba:	|         jsr 1793a <KPrintF>
    51c0:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    51c2:	|         move.l 52(sp),-(sp)
    51c6:	|         jsr 53bc <setGameFilePath>
    51cc:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    51ce:	|         move.l 52(sp),-(sp)
    51d2:	|         jsr 6906 <initSludge>
    51d8:	|         addq.l #4,sp
    51da:	|         tst.w d0
    51dc:	|     ,-- bne.s 51e4 <main_sludge+0x1be>
    51de:	|     |   moveq #0,d0
    51e0:	+-----|-- bra.w 53b2 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    51e4:	|     '-> move.l 1d0dc <winWidth>,d0
    51ea:	|         cmpi.l #320,d0
    51f0:	|     ,-- bne.s 5200 <main_sludge+0x1da>
    51f2:	|     |   move.l 1d0e0 <winHeight>,d0
    51f8:	|     |   cmpi.l #256,d0
    51fe:	|  ,--|-- beq.s 5222 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    5200:	|  |  '-> pea 18b85 <PutChar+0x7a9>
    5206:	|  |      jsr 1793a <KPrintF>
    520c:	|  |      addq.l #4,sp
		winWidth = 320;
    520e:	|  |      move.l #320,1d0dc <winWidth>
		winHeight = 256;
    5218:	|  |      move.l #256,1d0e0 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    5222:	|  '----> pea 18c02 <PutChar+0x826>
    5228:	|         jsr 1793a <KPrintF>
    522e:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    5230:	|         move.l 1d0e0 <winHeight>,d0
    5236:	|         move.l d0,d1
    5238:	|         move.l 1d0dc <winWidth>,d0
    523e:	|         move.l d1,-(sp)
    5240:	|         move.l d0,-(sp)
    5242:	|         jsr da4c <resizeBackdrop>
    5248:	|         addq.l #8,sp
    524a:	|         tst.w d0
    524c:	|     ,-- bne.s 5262 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    524e:	|     |   pea 18c15 <PutChar+0x839>
    5254:	|     |   jsr 1793a <KPrintF>
    525a:	|     |   addq.l #4,sp
		return FALSE;
    525c:	|     |   moveq #0,d0
    525e:	+-----|-- bra.w 53b2 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    5262:	|     '-> pea 18c3b <PutChar+0x85f>
    5268:	|         jsr 1793a <KPrintF>
    526e:	|         addq.l #4,sp
	if (! initPeople ())
    5270:	|         jsr af66 <initPeople>
    5276:	|         tst.w d0
    5278:	|     ,-- bne.s 528e <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    527a:	|     |   pea 18c48 <PutChar+0x86c>
    5280:	|     |   jsr 1793a <KPrintF>
    5286:	|     |   addq.l #4,sp
		return FALSE;
    5288:	|     |   moveq #0,d0
    528a:	+-----|-- bra.w 53b2 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    528e:	|     '-> pea 18c69 <PutChar+0x88d>
    5294:	|         jsr 1793a <KPrintF>
    529a:	|         addq.l #4,sp
	if (! initFloor ())
    529c:	|         jsr 16cf0 <initFloor>
    52a2:	|         tst.w d0
    52a4:	|     ,-- bne.s 52ba <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    52a6:	|     |   pea 18c75 <PutChar+0x899>
    52ac:	|     |   jsr 1793a <KPrintF>
    52b2:	|     |   addq.l #4,sp
		
		return FALSE;
    52b4:	|     |   moveq #0,d0
    52b6:	+-----|-- bra.w 53b2 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    52ba:	|     '-> pea 18c95 <PutChar+0x8b9>
    52c0:	|         jsr 1793a <KPrintF>
    52c6:	|         addq.l #4,sp
	if (! initObjectTypes ())
    52c8:	|         jsr dc08 <initObjectTypes>
    52ce:	|         tst.w d0
    52d0:	|     ,-- bne.s 52e6 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    52d2:	|     |   pea 18ca6 <PutChar+0x8ca>
    52d8:	|     |   jsr 1793a <KPrintF>
    52de:	|     |   addq.l #4,sp
		return FALSE;
    52e0:	|     |   moveq #0,d0
    52e2:	+-----|-- bra.w 53b2 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    52e6:	|     '-> pea 18ccc <PutChar+0x8f0>
    52ec:	|         jsr 1793a <KPrintF>
    52f2:	|         addq.l #4,sp
	initSpeech ();
    52f4:	|         jsr 44d6 <initSpeech>
	KPrintF("Init status bar\n");
    52fa:	|         pea 18cd9 <PutChar+0x8fd>
    5300:	|         jsr 1793a <KPrintF>
    5306:	|         addq.l #4,sp
	initStatusBar ();
    5308:	|         jsr 8966 <initStatusBar>

	KPrintF("Get numbered string\n");
    530e:	|         pea 18cea <PutChar+0x90e>
    5314:	|         jsr 1793a <KPrintF>
    531a:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    531c:	|         pea 1 <_start+0x1>
    5320:	|         jsr 7c70 <getNumberedString>
    5326:	|         addq.l #4,sp
    5328:	|         move.l d0,1d0ec <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    532e:	|         pea 18cff <PutChar+0x923>
    5334:	|         jsr 1793a <KPrintF>
    533a:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    533c:	|         move.l 1d158 <noStack>,d0
    5342:	|         pea 1 <_start+0x1>
    5346:	|         move.l d0,-(sp)
    5348:	|         clr.l -(sp)
    534a:	|         clr.l -(sp)
    534c:	|         clr.l -(sp)
    534e:	|         jsr 7ac8 <startNewFunctionNum>
    5354:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    5358:	|         pea 18d17 <PutChar+0x93b>
    535e:	|         jsr 1793a <KPrintF>
    5364:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    5366:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    536e:	|         clr.l 1d0f8 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    5374:	|     ,-- bra.s 5394 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    5376:	|  ,--|-> jsr 7948 <sludgeDisplay>
		CsiCheckInput();
    537c:	|  |  |   jsr d56a <CsiCheckInput>
		walkAllPeople();
    5382:	|  |  |   jsr c524 <walkAllPeople>
		handleInput();
    5388:	|  |  |   jsr 66a0 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    538e:	|  |  |   jsr 1786e <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    5394:	|  |  '-> move.l 1d0f8 <weAreDoneSoQuit>,d0
    539a:	|  '----- beq.s 5376 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    539c:	|         move.l 52(sp),32(sp)
    53a2:	|         move.l 1d188 <SysBase>,d0
    53a8:	|         movea.l d0,a6
    53aa:	|         movea.l 32(sp),a1
    53ae:	|         jsr -690(a6)
}
    53b2:	'-------> movem.l (sp)+,d2-d3/a6
    53b6:	          lea 44(sp),sp
    53ba:	          rts

000053bc <setGameFilePath>:

void setGameFilePath (char * f) {
    53bc:	          lea -1104(sp),sp
    53c0:	          move.l a6,-(sp)
    53c2:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    53c4:	          move.l #1112,d0
    53ca:	          add.l sp,d0
    53cc:	          addi.l #-1102,d0
    53d2:	          move.l d0,1100(sp)
    53d6:	          move.l #998,1096(sp)
    53de:	          move.l 1d190 <DOSBase>,d0
    53e4:	          movea.l d0,a6
    53e6:	          move.l 1100(sp),d1
    53ea:	          move.l 1096(sp),d2
    53ee:	          jsr -564(a6)
    53f2:	          move.w d0,1094(sp)
    53f6:	          move.w 1094(sp),d0
    53fa:	      ,-- bne.s 540a <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    53fc:	      |   pea 18d2a <PutChar+0x94e>
    5402:	      |   jsr 1793a <KPrintF>
    5408:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    540a:	      '-> moveq #-1,d0
    540c:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    5410:	          clr.l 1104(sp)
    5414:	   ,----- bra.s 5432 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    5416:	,--|----> move.l 1104(sp),d0
    541a:	|  |      movea.l 1116(sp),a0
    541e:	|  |      adda.l d0,a0
    5420:	|  |      move.b (a0),d0
    5422:	|  |      cmpi.b #47,d0
    5426:	|  |  ,-- bne.s 542e <setGameFilePath+0x72>
    5428:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    542e:	|  |  '-> addq.l #1,1104(sp)
    5432:	|  '----> move.l 1104(sp),d0
    5436:	|         movea.l 1116(sp),a0
    543a:	|         adda.l d0,a0
    543c:	|         move.b (a0),d0
    543e:	'-------- bne.s 5416 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    5440:	          moveq #-1,d0
    5442:	          cmp.l 1108(sp),d0
    5446:	   ,----- beq.s 54c0 <setGameFilePath+0x104>
		f[got] = 0;	
    5448:	   |      move.l 1108(sp),d0
    544c:	   |      movea.l 1116(sp),a0
    5450:	   |      adda.l d0,a0
    5452:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    5454:	   |      move.l 1116(sp),1090(sp)
    545a:	   |      moveq #-2,d0
    545c:	   |      move.l d0,1086(sp)
    5460:	   |      move.l 1d190 <DOSBase>,d0
    5466:	   |      movea.l d0,a6
    5468:	   |      move.l 1090(sp),d1
    546c:	   |      move.l 1086(sp),d2
    5470:	   |      jsr -84(a6)
    5474:	   |      move.l d0,1082(sp)
    5478:	   |      move.l 1082(sp),d0
    547c:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    5480:	   |      move.l 1078(sp),1074(sp)
    5486:	   |      move.l 1d190 <DOSBase>,d0
    548c:	   |      movea.l d0,a6
    548e:	   |      move.l 1074(sp),d1
    5492:	   |      jsr -126(a6)
    5496:	   |      move.l d0,1070(sp)
    549a:	   |      move.l 1070(sp),d0
    549e:	   |  ,-- bne.s 54b2 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    54a0:	   |  |   move.l 1116(sp),-(sp)
    54a4:	   |  |   pea 18d50 <PutChar+0x974>
    54aa:	   |  |   jsr 1793a <KPrintF>
    54b0:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    54b2:	   |  '-> move.l 1108(sp),d0
    54b6:	   |      movea.l 1116(sp),a0
    54ba:	   |      adda.l d0,a0
    54bc:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    54c0:	   '----> move.l #400,1066(sp)
    54c8:	          clr.l 1062(sp)
    54cc:	          move.l 1d188 <SysBase>,d0
    54d2:	          movea.l d0,a6
    54d4:	          move.l 1066(sp),d0
    54d8:	          move.l 1062(sp),d1
    54dc:	          jsr -684(a6)
    54e0:	          move.l d0,1058(sp)
    54e4:	          move.l 1058(sp),d0
    54e8:	          move.l d0,1d0f0 <gamePath>
	if (gamePath==0) {
    54ee:	          move.l 1d0f0 <gamePath>,d0
    54f4:	      ,-- bne.s 5508 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    54f6:	      |   pea 18d83 <PutChar+0x9a7>
    54fc:	      |   jsr 1793a <KPrintF>
    5502:	      |   addq.l #4,sp
    5504:	   ,--|-- bra.w 55f0 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    5508:	   |  '-> move.l 1d0f0 <gamePath>,1054(sp)
    5510:	   |      moveq #-2,d0
    5512:	   |      move.l d0,1050(sp)
    5516:	   |      move.l 1d190 <DOSBase>,d0
    551c:	   |      movea.l d0,a6
    551e:	   |      move.l 1054(sp),d1
    5522:	   |      move.l 1050(sp),d2
    5526:	   |      jsr -84(a6)
    552a:	   |      move.l d0,1046(sp)
    552e:	   |      move.l 1046(sp),d0
    5532:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    5536:	   |      move.l 1042(sp),1038(sp)
    553c:	   |      move.l 1d190 <DOSBase>,d0
    5542:	   |      movea.l d0,a6
    5544:	   |      move.l 1038(sp),d1
    5548:	   |      jsr -126(a6)
    554c:	   |      move.l d0,1034(sp)
    5550:	   |      move.l 1034(sp),d0
    5554:	   |  ,-- bne.s 5564 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    5556:	   |  |   pea 18dbe <PutChar+0x9e2>
    555c:	   |  |   jsr 1793a <KPrintF>
    5562:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    5564:	   |  '-> move.l #1112,d0
    556a:	   |      add.l sp,d0
    556c:	   |      addi.l #-1102,d0
    5572:	   |      move.l d0,1030(sp)
    5576:	   |      moveq #-2,d0
    5578:	   |      move.l d0,1026(sp)
    557c:	   |      move.l 1d190 <DOSBase>,d0
    5582:	   |      movea.l d0,a6
    5584:	   |      move.l 1030(sp),d1
    5588:	   |      move.l 1026(sp),d2
    558c:	   |      jsr -84(a6)
    5590:	   |      move.l d0,1022(sp)
    5594:	   |      move.l 1022(sp),d0
    5598:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    559c:	   |      move.l 1042(sp),1018(sp)
    55a2:	   |      move.l 1d190 <DOSBase>,d0
    55a8:	   |      movea.l d0,a6
    55aa:	   |      move.l 1018(sp),d1
    55ae:	   |      jsr -126(a6)
    55b2:	   |      move.l d0,1014(sp)
    55b6:	   |      move.l 1014(sp),d0
    55ba:	   |  ,-- bne.s 55d0 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    55bc:	   |  |   moveq #10,d0
    55be:	   |  |   add.l sp,d0
    55c0:	   |  |   move.l d0,-(sp)
    55c2:	   |  |   pea 18dea <PutChar+0xa0e>
    55c8:	   |  |   jsr 1793a <KPrintF>
    55ce:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    55d0:	   |  '-> move.l 1d0f0 <gamePath>,d0
    55d6:	   +----- beq.s 55f0 <setGameFilePath+0x234>
    55d8:	   |      move.l 1d0f0 <gamePath>,1010(sp)
    55e0:	   |      move.l 1d188 <SysBase>,d0
    55e6:	   |      movea.l d0,a6
    55e8:	   |      movea.l 1010(sp),a1
    55ec:	   |      jsr -690(a6)
}
    55f0:	   '----> move.l (sp)+,d2
    55f2:	          movea.l (sp)+,a6
    55f4:	          lea 1104(sp),sp
    55f8:	          rts

000055fa <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    55fa:	,-------> lea -16(sp),sp
    55fe:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    5600:	|         move.l 24(sp),d0
    5604:	|         move.l d0,-(sp)
    5606:	|         pea 18ef2 <PutChar+0xb16>
    560c:	|         jsr 1793a <KPrintF>
    5612:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    5614:	|         move.l 24(sp),-(sp)
    5618:	|         jsr 76c4 <pauseFunction>
    561e:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    5620:	|     ,-- bra.s 5632 <abortFunction+0x38>
    5622:	|  ,--|-> moveq #24,d0
    5624:	|  |  |   add.l 24(sp),d0
    5628:	|  |  |   move.l d0,-(sp)
    562a:	|  |  |   jsr 157de <trimStack>
    5630:	|  |  |   addq.l #4,sp
    5632:	|  |  '-> movea.l 24(sp),a0
    5636:	|  |      move.l 24(a0),d0
    563a:	|  '----- bne.s 5622 <abortFunction+0x28>
	FreeVec( fun -> compiledLines);
    563c:	|         movea.l 24(sp),a0
    5640:	|         move.l 4(a0),12(sp)
    5646:	|         move.l 1d188 <SysBase>,d0
    564c:	|         movea.l d0,a6
    564e:	|         movea.l 12(sp),a1
    5652:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5656:	|         clr.l 16(sp)
    565a:	|     ,-- bra.s 567a <abortFunction+0x80>
    565c:	|  ,--|-> movea.l 24(sp),a0
    5660:	|  |  |   move.l 20(a0),d1
    5664:	|  |  |   move.l 16(sp),d0
    5668:	|  |  |   lsl.l #3,d0
    566a:	|  |  |   add.l d1,d0
    566c:	|  |  |   move.l d0,-(sp)
    566e:	|  |  |   jsr 150a8 <unlinkVar>
    5674:	|  |  |   addq.l #4,sp
    5676:	|  |  |   addq.l #1,16(sp)
    567a:	|  |  '-> movea.l 24(sp),a0
    567e:	|  |      move.l 8(a0),d0
    5682:	|  |      cmp.l 16(sp),d0
    5686:	|  '----- bgt.s 565c <abortFunction+0x62>
	if( fun -> numLocals > 0) {
    5688:	|         movea.l 24(sp),a0
    568c:	|         move.l 8(a0),d0
    5690:	|     ,-- ble.s 56ac <abortFunction+0xb2>
		FreeVec(fun -> localVars);
    5692:	|     |   movea.l 24(sp),a0
    5696:	|     |   move.l 20(a0),8(sp)
    569c:	|     |   move.l 1d188 <SysBase>,d0
    56a2:	|     |   movea.l d0,a6
    56a4:	|     |   movea.l 8(sp),a1
    56a8:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    56ac:	|     '-> moveq #28,d0
    56ae:	|         add.l 24(sp),d0
    56b2:	|         move.l d0,-(sp)
    56b4:	|         jsr 150a8 <unlinkVar>
    56ba:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    56bc:	|         movea.l 24(sp),a0
    56c0:	|         move.l 40(a0),d0
    56c4:	|     ,-- beq.s 56d6 <abortFunction+0xdc>
    56c6:	|     |   movea.l 24(sp),a0
    56ca:	|     |   move.l 40(a0),d0
    56ce:	|     |   move.l d0,-(sp)
    56d0:	'-----|-- jsr 55fa <abortFunction>(pc)
    56d4:	      |   addq.l #4,sp
	FreeVec(fun);
    56d6:	      '-> move.l 24(sp),4(sp)
    56dc:	          move.l 1d188 <SysBase>,d0
    56e2:	          movea.l d0,a6
    56e4:	          movea.l 4(sp),a1
    56e8:	          jsr -690(a6)
	fun = NULL;
    56ec:	          clr.l 24(sp)
	KPrintF("abortFunction finished\n");
    56f0:	          pea 18f0c <PutChar+0xb30>
    56f6:	          jsr 1793a <KPrintF>
    56fc:	          addq.l #4,sp
}
    56fe:	          nop
    5700:	          movea.l (sp)+,a6
    5702:	          lea 16(sp),sp
    5706:	          rts

00005708 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    5708:	          subq.l #8,sp
	int n = 0;
    570a:	          clr.l 4(sp)
	*killedMyself = FALSE;
    570e:	          movea.l 20(sp),a0
    5712:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    5714:	          move.l 1d120 <allRunningFunctions>,(sp)
	while (fun) {
    571a:	   ,----- bra.s 5748 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    571c:	,--|----> movea.l (sp),a0
    571e:	|  |      move.l (a0),d0
    5720:	|  |      cmp.l 12(sp),d0
    5724:	|  |  ,-- bne.s 5742 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    5726:	|  |  |   movea.l (sp),a0
    5728:	|  |  |   move.w #1,54(a0)
			n++;
    572e:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    5732:	|  |  |   move.l (sp),d0
    5734:	|  |  |   cmp.l 16(sp),d0
    5738:	|  |  +-- bne.s 5742 <cancelAFunction+0x3a>
    573a:	|  |  |   movea.l 20(sp),a0
    573e:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    5742:	|  |  '-> movea.l (sp),a0
    5744:	|  |      move.l 44(a0),(sp)
	while (fun) {
    5748:	|  '----> tst.l (sp)
    574a:	'-------- bne.s 571c <cancelAFunction+0x14>
	}
	return n;
    574c:	          move.l 4(sp),d0
}
    5750:	          addq.l #8,sp
    5752:	          rts

00005754 <completeTimers>:


void completeTimers () {
    5754:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5756:	          move.l 1d120 <allRunningFunctions>,(sp)

	while (thisFunction) {
    575c:	   ,----- bra.s 5772 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    575e:	,--|----> movea.l (sp),a0
    5760:	|  |      move.b 56(a0),d0
    5764:	|  |  ,-- bne.s 576c <completeTimers+0x18>
    5766:	|  |  |   movea.l (sp),a0
    5768:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    576c:	|  |  '-> movea.l (sp),a0
    576e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5772:	|  '----> tst.l (sp)
    5774:	'-------- bne.s 575e <completeTimers+0xa>
	}
}
    5776:	          nop
    5778:	          nop
    577a:	          addq.l #4,sp
    577c:	          rts

0000577e <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    577e:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    5782:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    5788:	                                                             movea.l 80(sp),a0
    578c:	                                                             move.w 54(a0),d0
    5790:	,----------------------------------------------------------- beq.w 661e <continueFunction+0xea0>
		abortFunction (fun);
    5794:	|                                                            move.l 80(sp),-(sp)
    5798:	|                                                            jsr 55fa <abortFunction>
    579e:	|                                                            addq.l #4,sp
		return TRUE;
    57a0:	|                                                            moveq #1,d0
    57a2:	|  ,-------------------------------------------------------- bra.w 6628 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    57a6:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    57ac:	|  |  |                                                      movea.l 80(sp),a0
    57b0:	|  |  |                                                      move.l 4(a0),d1
    57b4:	|  |  |                                                      movea.l 80(sp),a0
    57b8:	|  |  |                                                      move.l 36(a0),d0
    57bc:	|  |  |                                                      lsl.l #3,d0
    57be:	|  |  |                                                      movea.l d1,a0
    57c0:	|  |  |                                                      adda.l d0,a0
    57c2:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    57c8:	|  |  |                                                      movea.l 80(sp),a0
    57cc:	|  |  |                                                      move.l 4(a0),d1
    57d0:	|  |  |                                                      movea.l 80(sp),a0
    57d4:	|  |  |                                                      move.l 36(a0),d0
    57d8:	|  |  |                                                      lsl.l #3,d0
    57da:	|  |  |                                                      movea.l d1,a0
    57dc:	|  |  |                                                      adda.l d0,a0
    57de:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    57e2:	|  |  |                                                      moveq #41,d0
    57e4:	|  |  |                                                      cmp.l 64(sp),d0
    57e8:	|  |  |  ,-------------------------------------------------- bcs.w 65d2 <continueFunction+0xe54>
    57ec:	|  |  |  |                                                   move.l 64(sp),d0
    57f0:	|  |  |  |                                                   add.l d0,d0
    57f2:	|  |  |  |                                                   movea.l d0,a0
    57f4:	|  |  |  |                                                   adda.l #22528,a0
    57fa:	|  |  |  |                                                   move.w (a0),d0
    57fc:	|  |  |  |                                                   jmp (5800 <continueFunction+0x82>,pc,d0.w)
    5800:	|  |  |  |                                                   bset d6,(a2)
    5802:	|  |  |  |                                                   ori.w #2670,(a4)
    5806:	|  |  |  |                                                   eori.w #2416,d6
    580a:	|  |  |  |                                                   bchg d4,d2
    580c:	|  |  |  |                                                   bclr d4,(a4)+
    580e:	|  |  |  |                                                   andi.l #181013194,d4
    5814:	|  |  |  |                                                   .short 0x0aca
    5816:	|  |  |  |                                                   .short 0x0aca
    5818:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    5820:	|  |  |  |                                                   .short 0x0aca
    5822:	|  |  |  |                                                   andi.w #906,-(a4)
    5826:	|  |  |  |                                                   bchg d1,196(a2)
    582a:	|  |  |  |                                                   bset d1,580(a4)
    582e:	|  |  |  |                                                   bclr d1,2576(a2)
    5832:	|  |  |  |                                                   andi.b #-56,2762(a2)
    5838:	|  |  |  |                                                   .short 0x0aca
    583a:	|  |  |  |                                                   eori.l #63572682,d0
    5840:	|  |  |  |                                                   .short 0x0aca
    5842:	|  |  |  |                                                   bchg d3,-(a2)
    5844:	|  |  |  |                                                   bchg #-36,(a2)
    5848:	|  |  |  |                                                   .short 0x08cc
    584a:	|  |  |  |                                                   addi.b #14,1038(a0)
    5850:	|  |  |  |                                                   .short 0x040e
    5852:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    5856:	|  |  |  |                                                   ori.w #8232,(a0)
    585a:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    5860:	|  |  |  |                                                   ori.w #12136,(a0)
    5864:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    586a:	|  |  |  |                                                   ori.w #12328,(a0)
    586e:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    5874:	|  |  |  |                                                   add.l 44(sp),d1
    5878:	|  |  |  |                                                   moveq #28,d0
    587a:	|  |  |  |                                                   add.l 80(sp),d0
    587e:	|  |  |  |                                                   move.l d1,-(sp)
    5880:	|  |  |  |                                                   move.l d0,-(sp)
    5882:	|  |  |  |                                                   jsr 15314 <copyVariable>
    5888:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    588a:	|  |  |  |                                                   move.l 80(sp),-(sp)
    588e:	|  |  |  |                                                   jsr 662e <finishFunction>
    5894:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    5896:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    589c:	|  |  |  |                                                   move.l 80(sp),-(sp)
    58a0:	|  |  |  |                                                   jsr 776c <restartFunction>
    58a6:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    58a8:	|  |  |  |  ,----------------------------------------------- bra.w 6606 <continueFunction+0xe88>
				finishFunction (fun);
    58ac:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    58b0:	|  |  |  |  |                                                jsr 662e <finishFunction>
    58b6:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    58b8:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    58bc:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    58c0:	|  |  |  |  +----------------------------------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    58c4:	|  |  |  |  |                                                movea.l 80(sp),a0
    58c8:	|  |  |  |  |                                                move.l 28(a0),d0
    58cc:	|  |  |  |  |                                                moveq #2,d1
    58ce:	|  |  |  |  |                                                cmp.l d0,d1
    58d0:	|  |  |  |  |                                            ,-- beq.s 58dc <continueFunction+0x15e>
    58d2:	|  |  |  |  |                                            |   moveq #4,d1
    58d4:	|  |  |  |  |                                            |   cmp.l d0,d1
    58d6:	|  |  |  |  |                                         ,--|-- beq.s 592a <continueFunction+0x1ac>
    58d8:	|  |  |  |  |                                ,--------|--|-- bra.w 5a12 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    58dc:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    58e0:	|  |  |  |  |                                |        |      jsr 76c4 <pauseFunction>
    58e6:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    58e8:	|  |  |  |  |                                |        |      moveq #24,d0
    58ea:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    58ee:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    58f2:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    58f6:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    58fa:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    58fc:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    5900:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    5904:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    5906:	|  |  |  |  |                                |        |      jsr 7ac8 <startNewFunctionNum>
    590c:	|  |  |  |  |                                |        |      lea 20(sp),sp
    5910:	|  |  |  |  |                                |        |      tst.l d0
    5912:	|  |  |  |  |                                |        |  ,-- bne.s 591a <continueFunction+0x19c>
    5914:	|  |  |  |  |                                |        |  |   clr.w d0
    5916:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 6628 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    591a:	|  |  |  |  |                                |        |  '-> move.l 1d120 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5922:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    5926:	|  |  |  |  |                                |  ,-----|----- bra.w 5a26 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    592a:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    592e:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    5932:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    5936:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    593a:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    593c:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    593e:	|  |  |  |  |                                |  |            jsr 13b3c <callBuiltIn>
    5944:	|  |  |  |  |                                |  |            lea 12(sp),sp
    5948:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    594c:	|  |  |  |  |                                |  |            moveq #5,d0
    594e:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    5952:	|  |  |  |  |                                |  |  ,-------- bcs.w 5a0e <continueFunction+0x290>
    5956:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    595a:	|  |  |  |  |                                |  |  |         add.l d0,d0
    595c:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    595e:	|  |  |  |  |                                |  |  |         adda.l #22890,a0
    5964:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    5966:	|  |  |  |  |                                |  |  |         jmp (596a <continueFunction+0x1ec>,pc,d0.w)
    596a:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    5970:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    5974:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    597a:	|  |  |  |  |                                |  |  |         or.b d7,-(a4)
    597c:	|  |  |  |  |                                |  |  |         jsr 1793a <KPrintF>
    5982:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    5984:	|  |  |  |  |                                |  |  |         clr.w d0
    5986:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 6628 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    598a:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    598e:	|  |  |  |  |                                |  |  |         jsr 76c4 <pauseFunction>
    5994:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    5996:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    599a:	|  |  |  |  |                                |  |  |  ,----- bra.s 5a10 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    599c:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    59a0:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    59a4:	|  |  |  |  |                                |  |  |  +----- bra.s 5a10 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    59a6:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    59aa:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    59b0:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    59b2:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    59b6:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    59ba:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    59be:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    59c0:	|  |  |  |  |                                |  |  |  |      jsr 1574c <setVariable>
    59c6:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    59ca:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    59ce:	|  |  |  |  |                                |  |  |  |      jsr 76c4 <pauseFunction>
    59d4:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    59d6:	|  |  |  |  |                                |  |  |  |      move.l 1d158 <noStack>,d1
    59dc:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    59e0:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    59e2:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    59e4:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    59e8:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    59ea:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    59ec:	|  |  |  |  |                                |  |  |  |      jsr 7ac8 <startNewFunctionNum>
    59f2:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    59f6:	|  |  |  |  |                                |  |  |  |      tst.l d0
    59f8:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 5a00 <continueFunction+0x282>
    59fa:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    59fc:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 6628 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    5a00:	|  |  |  |  |                                |  |  |  |  '-> move.l 1d120 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    5a08:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    5a0c:	|  |  |  |  |                                |  |  |  +----- bra.s 5a10 <continueFunction+0x292>

						default:
						break;
    5a0e:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    5a10:	|  |  |  |  |                                |  +-----'----X bra.s 5a26 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    5a12:	|  |  |  |  |                                '--|----------> pea 18f6f <PutChar+0xb93>
    5a18:	|  |  |  |  |                                   |            jsr 1793a <KPrintF>
    5a1e:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    5a20:	|  |  |  |  |                                   |            clr.w d0
    5a22:	|  +--|--|--|-----------------------------------|----------- bra.w 6628 <continueFunction+0xeaa>
			}
			break;
    5a26:	|  |  |  |  +-----------------------------------'----------X bra.w 6606 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    5a2a:	|  |  |  |  |                                                moveq #28,d0
    5a2c:	|  |  |  |  |                                                add.l 80(sp),d0
    5a30:	|  |  |  |  |                                                clr.l -(sp)
    5a32:	|  |  |  |  |                                                clr.l -(sp)
    5a34:	|  |  |  |  |                                                move.l d0,-(sp)
    5a36:	|  |  |  |  |                                                jsr 1574c <setVariable>
    5a3c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    5a40:	|  |  |  |  +----------------------------------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    5a44:	|  |  |  |  |                                                move.l 68(sp),d1
    5a48:	|  |  |  |  |                                                moveq #28,d0
    5a4a:	|  |  |  |  |                                                add.l 80(sp),d0
    5a4e:	|  |  |  |  |                                                move.l d1,-(sp)
    5a50:	|  |  |  |  |                                                pea 5 <_start+0x5>
    5a54:	|  |  |  |  |                                                move.l d0,-(sp)
    5a56:	|  |  |  |  |                                                jsr 1574c <setVariable>
    5a5c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    5a60:	|  |  |  |  +----------------------------------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    5a64:	|  |  |  |  |                                                move.l 68(sp),d1
    5a68:	|  |  |  |  |                                                moveq #28,d0
    5a6a:	|  |  |  |  |                                                add.l 80(sp),d0
    5a6e:	|  |  |  |  |                                                move.l d1,-(sp)
    5a70:	|  |  |  |  |                                                pea 1 <_start+0x1>
    5a74:	|  |  |  |  |                                                move.l d0,-(sp)
    5a76:	|  |  |  |  |                                                jsr 1574c <setVariable>
    5a7c:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    5a80:	|  |  |  |  +----------------------------------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    5a84:	|  |  |  |  |                                                moveq #28,d0
    5a86:	|  |  |  |  |                                                add.l 80(sp),d0
    5a8a:	|  |  |  |  |                                                movea.l 80(sp),a0
    5a8e:	|  |  |  |  |                                                movea.l 20(a0),a0
    5a92:	|  |  |  |  |                                                move.l 68(sp),d1
    5a96:	|  |  |  |  |                                                lsl.l #3,d1
    5a98:	|  |  |  |  |                                                add.l a0,d1
    5a9a:	|  |  |  |  |                                                move.l d0,-(sp)
    5a9c:	|  |  |  |  |                                                move.l d1,-(sp)
    5a9e:	|  |  |  |  |                                                jsr 15314 <copyVariable>
    5aa4:	|  |  |  |  |                                                addq.l #8,sp
    5aa6:	|  |  |  |  |                                                tst.w d0
    5aa8:	|  |  |  |  |  ,-------------------------------------------- bne.w 65e4 <continueFunction+0xe66>
    5aac:	|  |  |  |  |  |                                             clr.w d0
    5aae:	|  +--|--|--|--|-------------------------------------------- bra.w 6628 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    5ab2:	|  |  |  |  |  |                                             moveq #28,d0
    5ab4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5ab8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5aba:	|  |  |  |  |  |                                             jsr 1539a <getBoolean>
    5ac0:	|  |  |  |  |  |                                             addq.l #4,sp
    5ac2:	|  |  |  |  |  |                                             tst.w d0
    5ac4:	|  |  |  |  |  |                                      ,----- beq.s 5ae0 <continueFunction+0x362>
    5ac6:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    5aca:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    5ace:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    5ad0:	|  |  |  |  |  |                                      |      jsr 1539a <getBoolean>
    5ad6:	|  |  |  |  |  |                                      |      addq.l #4,sp
    5ad8:	|  |  |  |  |  |                                      |      tst.w d0
    5ada:	|  |  |  |  |  |                                      +----- beq.s 5ae0 <continueFunction+0x362>
    5adc:	|  |  |  |  |  |                                      |      moveq #1,d0
    5ade:	|  |  |  |  |  |                                      |  ,-- bra.s 5ae2 <continueFunction+0x364>
    5ae0:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5ae2:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5ae4:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5ae8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5aea:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5aee:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5af0:	|  |  |  |  |  |                                             jsr 1574c <setVariable>
    5af6:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5afa:	|  |  |  |  |  |                                             moveq #24,d0
    5afc:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5b00:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b02:	|  |  |  |  |  |                                             jsr 157de <trimStack>
    5b08:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5b0a:	|  |  |  |  +--|-------------------------------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    5b0e:	|  |  |  |  |  |                                             moveq #28,d0
    5b10:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5b14:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b16:	|  |  |  |  |  |                                             jsr 1539a <getBoolean>
    5b1c:	|  |  |  |  |  |                                             addq.l #4,sp
    5b1e:	|  |  |  |  |  |                                             tst.w d0
    5b20:	|  |  |  |  |  |                                         ,-- bne.s 5b38 <continueFunction+0x3ba>
    5b22:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    5b26:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    5b2a:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    5b2c:	|  |  |  |  |  |                                         |   jsr 1539a <getBoolean>
    5b32:	|  |  |  |  |  |                                         |   addq.l #4,sp
    5b34:	|  |  |  |  |  |                                         |   tst.w d0
    5b36:	|  |  |  |  |  |                                      ,--|-- beq.s 5b3c <continueFunction+0x3be>
    5b38:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    5b3a:	|  |  |  |  |  |                                      |  ,-- bra.s 5b3e <continueFunction+0x3c0>
    5b3c:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    5b3e:	|  |  |  |  |  |                                         '-> moveq #28,d1
    5b40:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5b44:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b46:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5b4a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5b4c:	|  |  |  |  |  |                                             jsr 1574c <setVariable>
    5b52:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5b56:	|  |  |  |  |  |                                             moveq #24,d0
    5b58:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5b5c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b5e:	|  |  |  |  |  |                                             jsr 157de <trimStack>
    5b64:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5b66:	|  |  |  |  +--|-------------------------------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    5b6a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5b6e:	|  |  |  |  |  |                                             moveq #28,d0
    5b70:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5b74:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5b76:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    5b7a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b7c:	|  |  |  |  |  |                                             jsr 1574c <setVariable>
    5b82:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5b86:	|  |  |  |  +--|-------------------------------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    5b8a:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5b8e:	|  |  |  |  |  |                                             moveq #28,d0
    5b90:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5b94:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5b96:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    5b9a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5b9c:	|  |  |  |  |  |                                             jsr 1574c <setVariable>
    5ba2:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5ba6:	|  |  |  |  +--|-------------------------------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    5baa:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5bae:	|  |  |  |  |  |                                             moveq #28,d0
    5bb0:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5bb4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5bb6:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    5bba:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5bbc:	|  |  |  |  |  |                                             jsr 1574c <setVariable>
    5bc2:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5bc6:	|  |  |  |  +--|-------------------------------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    5bca:	|  |  |  |  |  |                                             move.l 1d0e8 <dialogValue>,d0
    5bd0:	|  |  |  |  |  |                                             moveq #1,d1
    5bd2:	|  |  |  |  |  |                                             cmp.l d0,d1
    5bd4:	|  |  |  |  |  |  ,----------------------------------------- beq.w 65e8 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    5bd8:	|  |  |  |  |  |  |                                          pea 18f84 <PutChar+0xba8>
    5bde:	|  |  |  |  |  |  |                                          jsr 1793a <KPrintF>
    5be4:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5be6:	|  |  |  |  |  |  |                                          clr.w d0
    5be8:	|  +--|--|--|--|--|----------------------------------------- bra.w 6628 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5bec:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    5bf0:	|  |  |  |  |  |  |                                          moveq #28,d0
    5bf2:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    5bf6:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    5bf8:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5bfa:	|  |  |  |  |  |  |                                          jsr 14ede <loadStringToVar>
    5c00:	|  |  |  |  |  |  |                                          addq.l #8,sp
    5c02:	|  |  |  |  |  |  |                                          tst.w d0
    5c04:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 65ec <continueFunction+0xe6e>
					return FALSE;
    5c08:	|  |  |  |  |  |  |  |                                       clr.w d0
    5c0a:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6628 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    5c0e:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5c12:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5c16:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5c18:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    5c1a:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5c1c:	|  |  |  |  |  |  |  |                                ,----- beq.s 5c7a <continueFunction+0x4fc>
    5c1e:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    5c20:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    5c22:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5e0e <continueFunction+0x690>
    5c26:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    5c28:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 5c34 <continueFunction+0x4b6>
    5c2a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    5c2c:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    5c2e:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 5c7a <continueFunction+0x4fc>
    5c30:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5e0e <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    5c34:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    5c36:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    5c3a:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 5c66 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    5c3c:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    5c3e:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    5c42:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5c44:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5c46:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5c48:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1574c <setVariable>
    5c4e:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    5c52:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    5c54:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    5c58:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5c5a:	|  |  |  |  |  |  |  |              |                 |  |   jsr 157de <trimStack>
    5c60:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    5c62:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 5e24 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    5c66:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 18fc5 <PutChar+0xbe9>
    5c6c:	|  |  |  |  |  |  |  |              |  |              |      jsr 1793a <KPrintF>
    5c72:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    5c74:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    5c76:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 6628 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5c7a:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    5c7e:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5c82:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    5c86:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    5c88:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5c9e <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    5c8a:	|  |  |  |  |  |  |  |              |  |                 |   pea 19001 <PutChar+0xc25>
    5c90:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1793a <KPrintF>
    5c96:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    5c98:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5c9a:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6628 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5c9e:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    5ca0:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5ca4:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5ca6:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    5caa:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    5cae:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    5cb0:	|  |  |  |  |  |  |  |              |  |                     jsr 14e5a <getValueType>
    5cb6:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    5cba:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    5cbc:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5cc4 <continueFunction+0x546>
    5cbe:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5cc0:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6628 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5cc4:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    5cc8:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5ccc:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    5cce:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    5cd0:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    5cd2:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5cf4 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    5cd4:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    5cd8:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    5cda:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    5cde:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    5ce2:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5ce6:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5ce8:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5cea:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14ae4 <fastArrayGetByIndex>
    5cf0:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    5cf2:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 5d14 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    5cf4:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    5cf8:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5cfa:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    5cfe:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    5d02:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    5d06:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    5d08:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5d0a:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5d0c:	|  |  |  |  |  |  |  |              |  |              |      jsr 1576e <stackGetByIndex>
    5d12:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5d14:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    5d18:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    5d1a:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5d1e:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5d20:	|  |  |  |  |  |  |  |              |  |                     jsr 157de <trimStack>
    5d26:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5d28:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    5d2c:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5d48 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    5d2e:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    5d30:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    5d34:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5d36:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5d38:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5d3a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1574c <setVariable>
    5d40:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    5d44:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 5e22 <continueFunction+0x6a4>
						switch (com) {
    5d48:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    5d4a:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    5d4e:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 5d5c <continueFunction+0x5de>
    5d50:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    5d52:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    5d56:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 5da6 <continueFunction+0x628>
    5d58:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5dee <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5d5c:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    5d60:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    5d64:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    5d68:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    5d6a:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 14e5a <getValueType>
    5d70:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    5d74:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    5d76:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 5d7e <continueFunction+0x600>
    5d78:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    5d7a:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 5e08 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5d7e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    5d80:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    5d82:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    5d86:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    5d88:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    5d8c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    5d8e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 1574c <setVariable>
    5d94:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    5d98:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    5d9a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    5d9c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    5da0:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    5da4:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5e0c <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5da6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    5daa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5dae:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    5db2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    5db4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14e5a <getValueType>
    5dba:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    5dbe:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    5dc0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 5dc6 <continueFunction+0x648>
    5dc2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    5dc4:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5e08 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5dc6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    5dc8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    5dca:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    5dce:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    5dd0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5dd4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    5dd6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1574c <setVariable>
    5ddc:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5de0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    5de2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    5de4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    5de8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5dec:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5e0c <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5dee:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    5df0:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    5df4:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    5df6:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    5dfa:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 15314 <copyVariable>
    5e00:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    5e02:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    5e04:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 5e22 <continueFunction+0x6a4>
    5e06:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5e08:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 6628 <continueFunction+0xeaa>
				break;
    5e0c:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 5e22 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5e0e:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 1901f <PutChar+0xc43>
    5e14:	|  |  |  |  |  |  |  |                 |  |                  jsr 1793a <KPrintF>
    5e1a:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5e1c:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5e1e:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 6628 <continueFunction+0xeaa>
				break;
    5e22:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    5e24:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 6606 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5e28:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5e2c:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5e30:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5e32:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    5e34:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5e36:	|  |  |  |  |  |  |  |                                   ,-- beq.s 5e44 <continueFunction+0x6c6>
    5e38:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5e3a:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5e3c:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5ef0 <continueFunction+0x772>
    5e40:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 5f4e <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5e44:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5e48:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5e4c:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5e50:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5e52:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5e68 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    5e54:	|  |  |  |  |  |  |  |                             |  |  |   pea 19001 <PutChar+0xc25>
    5e5a:	|  |  |  |  |  |  |  |                             |  |  |   jsr 1793a <KPrintF>
    5e60:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    5e62:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5e64:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6628 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5e68:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    5e6a:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5e6e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5e70:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    5e74:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5e78:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5e7a:	|  |  |  |  |  |  |  |                             |  |      jsr 14e5a <getValueType>
    5e80:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5e84:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5e86:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5e8e <continueFunction+0x710>
    5e88:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5e8a:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6628 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    5e8e:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5e92:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5e96:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5e9a:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5e9c:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5ea0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5ea2:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    5ea6:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5eaa:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5eae:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5eb0:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5eb2:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    5eb4:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5eb6:	|  |  |  |  |  |  |  |                             |  |      jsr 7974 <stackSetByIndex>
    5ebc:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5ec0:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5ec2:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5eca <continueFunction+0x74c>
						return FALSE;
    5ec4:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5ec6:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6628 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    5eca:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    5ecc:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5ed0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5ed2:	|  |  |  |  |  |  |  |                             |  |      jsr 157de <trimStack>
    5ed8:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5eda:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5edc:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5ee0:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5ee2:	|  |  |  |  |  |  |  |                             |  |      jsr 157de <trimStack>
    5ee8:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5eea:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5eec:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 6606 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5ef0:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    5ef2:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    5ef6:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5ef8:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5efc:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5f00:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5f02:	|  |  |  |  |  |  |  |                             |         jsr 14e5a <getValueType>
    5f08:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5f0c:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5f0e:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5f16 <continueFunction+0x798>
    5f10:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5f12:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 6628 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5f16:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5f1a:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5f1c:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5f20:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5f24:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5f28:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5f2a:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5f2c:	|  |  |  |  |  |  |  |                             |         jsr 14ae4 <fastArrayGetByIndex>
    5f32:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5f34:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5f38:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5f48 <continueFunction+0x7ca>
    5f3a:	|  |  |  |  |  |  |  |                             |     |   pea 19043 <PutChar+0xc67>
    5f40:	|  |  |  |  |  |  |  |                             |     |   jsr 1793a <KPrintF>
    5f46:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5f48:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    5f4a:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 6628 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5f4e:	|  |  |  |  |  |  |  |                             '-------> pea 1901f <PutChar+0xc43>
    5f54:	|  |  |  |  |  |  |  |                                       jsr 1793a <KPrintF>
    5f5a:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5f5c:	|  |  |  |  |  |  |  |                                       clr.w d0
    5f5e:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6628 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5f62:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5f66:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5f6a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5f6e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5f70:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5f72:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5f74:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5f78:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5f7c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5f7e:	|  |  |  |  |  |  |  |                                       jsr 14e5a <getValueType>
    5f84:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5f88:	|  |  |  |  |  |  |  |                                       tst.w d0
    5f8a:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5f92 <continueFunction+0x814>
    5f8c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5f8e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6628 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5f92:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    5f96:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5f98:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5f9c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5f9e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5fa2:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5fa4:	|  |  |  |  |  |  |  |                                       jsr 1574c <setVariable>
    5faa:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5fae:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5fb2:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5fb4:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5fb6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5fba:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5fbe:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5fc2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5fc4:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5fc6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5fc8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5fcc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5fce:	|  |  |  |  |  |  |  |                                       jsr 1574c <setVariable>
    5fd4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5fd8:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5fdc:	|  |  |  |  |  |  |  |                                       move.l 1d136 <globalVars>,d1
    5fe2:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5fe6:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5fe8:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5fea:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5fec:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ff0:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5ff4:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5ff6:	|  |  |  |  |  |  |  |                                       jsr 14e5a <getValueType>
    5ffc:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    6000:	|  |  |  |  |  |  |  |                                       tst.w d0
    6002:	|  |  |  |  |  |  |  |                                   ,-- bne.s 600a <continueFunction+0x88c>
    6004:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    6006:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6628 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    600a:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    600e:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    6010:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    6014:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    6016:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    601a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    601c:	|  |  |  |  |  |  |  |                                       jsr 1574c <setVariable>
    6022:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    6026:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    602a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    602c:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    602e:	|  |  |  |  |  |  |  |                                       movea.l 1d136 <globalVars>,a0
    6034:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    6038:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    603a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    603c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    603e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6042:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6044:	|  |  |  |  |  |  |  |                                       jsr 1574c <setVariable>
    604a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    604e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    6052:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    6056:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    605a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    605e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6060:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    6062:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6064:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6068:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    606c:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    606e:	|  |  |  |  |  |  |  |                                       jsr 14e5a <getValueType>
    6074:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    6078:	|  |  |  |  |  |  |  |                                       tst.w d0
    607a:	|  |  |  |  |  |  |  |                                   ,-- bne.s 6082 <continueFunction+0x904>
    607c:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    607e:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6628 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    6082:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    6086:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    6088:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    608c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    608e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6092:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6094:	|  |  |  |  |  |  |  |                                       jsr 1574c <setVariable>
    609a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    609e:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    60a2:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    60a4:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    60a6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    60aa:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    60ae:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    60b2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    60b4:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    60b6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    60b8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    60bc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    60be:	|  |  |  |  |  |  |  |                                       jsr 1574c <setVariable>
    60c4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    60c8:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    60cc:	|  |  |  |  |  |  |  |                                       move.l 1d136 <globalVars>,d1
    60d2:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    60d6:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    60d8:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    60da:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    60dc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    60e0:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    60e4:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    60e6:	|  |  |  |  |  |  |  |                                       jsr 14e5a <getValueType>
    60ec:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    60f0:	|  |  |  |  |  |  |  |                                       tst.w d0
    60f2:	|  |  |  |  |  |  |  |                                   ,-- bne.s 60fa <continueFunction+0x97c>
    60f4:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    60f6:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6628 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    60fa:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    60fe:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    6100:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    6104:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    6106:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    610a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    610c:	|  |  |  |  |  |  |  |                                       jsr 1574c <setVariable>
    6112:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    6116:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    611a:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    611c:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    611e:	|  |  |  |  |  |  |  |                                       movea.l 1d136 <globalVars>,a0
    6124:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    6128:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    612a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    612c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    612e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    6132:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    6134:	|  |  |  |  |  |  |  |                                       jsr 1574c <setVariable>
    613a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    613e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    6142:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    6146:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    614a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    614e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    6150:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    6152:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    6154:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    6158:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    615a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    615c:	|  |  |  |  |  |  |  |                                       jsr 15314 <copyVariable>
    6162:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    6164:	|  |  |  |  |  |  |  |                                       tst.w d0
    6166:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 65f0 <continueFunction+0xe72>
    616a:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    616c:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 6628 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    6170:	|  |  |  |  |  |  |  |  |                                    move.l 1d136 <globalVars>,d1
    6176:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    617a:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    617c:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    617e:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    6180:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    6184:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    6186:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    6188:	|  |  |  |  |  |  |  |  |                                    jsr 15314 <copyVariable>
    618e:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    6190:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    6192:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 65f4 <continueFunction+0xe76>
    6196:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    6198:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 6628 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    619c:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    619e:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    61a2:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1d136 <globalVars>,a0
    61a8:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    61ac:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    61ae:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    61b0:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    61b2:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    61b4:	|  |  |  |  |  |  |  |  |  |                                 jsr 15314 <copyVariable>
    61ba:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    61bc:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    61be:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 65f8 <continueFunction+0xe7a>
    61c2:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    61c4:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 6628 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    61c8:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    61ca:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    61ce:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    61d0:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    61d4:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    61d6:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    61d8:	|  |  |  |  |  |  |  |  |  |  |                              jsr 14696 <addVarToStack>
    61de:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    61e0:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    61e2:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 65fc <continueFunction+0xe7e>
    61e6:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    61e8:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 6628 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    61ec:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    61ee:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    61f2:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    61f4:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    61f8:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    61fa:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    61fc:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 1471c <addVarToStackQuick>
    6202:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    6204:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    6206:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 6600 <continueFunction+0xe82>
    620a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    620c:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 6628 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    6210:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    6212:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    6216:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    6218:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1539a <getBoolean>
    621e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    6220:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    6222:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    6224:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    6226:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    6228:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    622a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    622c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    6230:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    6232:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    6236:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    6238:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1574c <setVariable>
    623e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    6242:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    6246:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    6248:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    624c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    624e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1539a <getBoolean>
    6254:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    6256:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    6258:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 6604 <continueFunction+0xe86>
				advanceNow = FALSE;
    625c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    6260:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    6264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    626a:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 6604 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    626e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    6272:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    6276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    627c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6606 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    6280:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    6282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    6286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    6288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    628c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    6290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    6292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14e5a <getValueType>
    6298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    629c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    629e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 62a6 <continueFunction+0xb28>
    62a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    62a2:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 6628 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    62a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    62aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    62ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    62ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    62b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    62b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    62b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    62ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    62bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1574c <setVariable>
    62c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    62c6:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6606 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    62ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    62ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    62d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 65bc <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    62d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    62d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    62dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 6358 <continueFunction+0xbda>
    62de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    62e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    62e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 63a2 <continueFunction+0xc24>
    62e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    62ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    62ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 62fc <continueFunction+0xb7e>
    62f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    62f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    62f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 632a <continueFunction+0xbac>
    62f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 63a2 <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    62fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    62fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    6302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    6306:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    630a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    630c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    630e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14790 <addVariablesInSecond>
    6314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    6316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    6318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    631c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    631e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 157de <trimStack>
    6324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    6326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 65d0 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    632a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    632c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    6330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    6334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    6338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    633a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    633c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1484e <compareVariablesInSecond>
    6342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    6344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    6346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    634a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    634c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 157de <trimStack>
    6352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    6354:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 65d0 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    6358:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    635a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    635e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    6362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    6366:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    6368:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    636a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1484e <compareVariablesInSecond>
    6370:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    6372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    6374:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    6378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    637a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 157de <trimStack>
    6380:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    6382:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    6386:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    638a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    638c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    638e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    6390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    6396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    639a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    639e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 65d0 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    63a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    63a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    63aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    63ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    63b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    63b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    63b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14e5a <getValueType>
    63bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    63c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    63c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 63ca <continueFunction+0xc4c>
    63c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    63c6:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6628 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    63ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    63cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    63d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    63d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    63d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    63da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    63dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14e5a <getValueType>
    63e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    63e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    63e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 63f0 <continueFunction+0xc72>
    63ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    63ec:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6628 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    63f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    63f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    63f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    63f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 157de <trimStack>
    63fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    6400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    6402:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    6406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    6408:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    640a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 65ce <continueFunction+0xe50>
    640e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    6410:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    6412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #25630,a0
    6418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    641a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (641e <continueFunction+0xca0>,pc,d0.w)
    641e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    6422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    6424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    642c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    642e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    6436:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    643e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    6446:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    644e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    6452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    6456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    645a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 182c6 <__mulsi3>
    6460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    6462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    6464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    646a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    646c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1574c <setVariable>
    6478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    647c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 65d0 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    6480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    648a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    648c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6496:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1574c <setVariable>
    649e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 65d0 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    64a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    64aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    64ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    64b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18372 <__modsi3>
    64b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    64ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    64bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    64be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    64c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    64c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    64c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1574c <setVariable>
    64d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    64d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 65d0 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    64d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    64dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    64e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    64e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 18344 <__divsi3>
    64ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    64ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    64ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    64f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    64f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    64f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    64fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    64fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1574c <setVariable>
    6502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 65d0 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    650a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    650e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    6516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    651a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    651c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    651e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    652a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1574c <setVariable>
    6530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 65d0 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    6538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    653c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    6544:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    654a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    654c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1574c <setVariable>
    655e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 65d0 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    6564:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    656c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    656e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    6570:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6572:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6574:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6576:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    657c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    657e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6582:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1574c <setVariable>
    658a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    658e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 65d0 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    6590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6594:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    659a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    659c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    659e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    65a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    65a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    65a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    65a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    65aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    65ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    65b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1574c <setVariable>
    65b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    65ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 65d0 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    65bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 19064 <PutChar+0xc88>
    65c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 1793a <KPrintF>
    65c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    65ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    65cc:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 6628 <continueFunction+0xeaa>
						break;
    65ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    65d0:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 6606 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    65d2:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 1907c <PutChar+0xca0>
    65d8:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 1793a <KPrintF>
    65de:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    65e0:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    65e2:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 6628 <continueFunction+0xeaa>
			break;
    65e4:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    65e6:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 6606 <continueFunction+0xe88>
			break;
    65e8:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    65ea:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 6606 <continueFunction+0xe88>
			break;
    65ec:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    65ee:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 6606 <continueFunction+0xe88>
			break;
    65f0:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    65f2:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 6606 <continueFunction+0xe88>
			break;
    65f4:	|  |  |     |              '--|--|--|--|-------------------> nop
    65f6:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 6606 <continueFunction+0xe88>
			break;
    65f8:	|  |  |     |                 '--|--|--|-------------------> nop
    65fa:	|  |  |     +--------------------|--|--|-------------------- bra.s 6606 <continueFunction+0xe88>
			break;
    65fc:	|  |  |     |                    '--|--|-------------------> nop
    65fe:	|  |  |     +-----------------------|--|-------------------- bra.s 6606 <continueFunction+0xe88>
			break;
    6600:	|  |  |     |                       '--|-------------------> nop
    6602:	|  |  |     +--------------------------|-------------------- bra.s 6606 <continueFunction+0xe88>
			break;
    6604:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    6606:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    660a:	+--|--|----------------------------------------------------- beq.s 661e <continueFunction+0xea0>
    660c:	|  |  |                                                      movea.l 80(sp),a0
    6610:	|  |  |                                                      move.l 36(a0),d0
    6614:	|  |  |                                                      addq.l #1,d0
    6616:	|  |  |                                                      movea.l 80(sp),a0
    661a:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    661e:	'--|--|----------------------------------------------------> tst.w 74(sp)
    6622:	   |  '----------------------------------------------------- bne.w 57a6 <continueFunction+0x28>

	}
	return TRUE;
    6626:	   |                                                         moveq #1,d0
}
    6628:	   '-------------------------------------------------------> lea 76(sp),sp
    662c:	                                                             rts

0000662e <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	KPrintF("finishFunction %d started\n", &fun->originalNumber);
    662e:	    move.l 4(sp),d0
    6632:	    move.l d0,-(sp)
    6634:	    pea 190a8 <PutChar+0xccc>
    663a:	    jsr 1793a <KPrintF>
    6640:	    addq.l #8,sp

	pauseFunction (fun);
    6642:	    move.l 4(sp),-(sp)
    6646:	    jsr 76c4 <pauseFunction>
    664c:	    addq.l #4,sp

	//Keep function loaed in memory if it is the focus function
	if( fun != currentEvents -> focusFunction) {	
    664e:	    movea.l 1caf8 <currentEvents>,a0
    6654:	    move.l 20(a0),d0
    6658:	    cmp.l 4(sp),d0
    665c:	,-- beq.s 666a <finishFunction+0x3c>
		unloadFunction (fun);
    665e:	|   move.l 4(sp),-(sp)
    6662:	|   jsr 7b74 <unloadFunction>
    6668:	|   addq.l #4,sp
	}	
}
    666a:	'-> nop
    666c:	    rts

0000666e <freezeSubs>:

void freezeSubs () {
    666e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6670:	          move.l 1d120 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6676:	   ,----- bra.s 6694 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    6678:	,--|----> movea.l (sp),a0
    667a:	|  |      move.w 52(a0),d0
    667e:	|  |  ,-- bne.s 668e <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    6680:	|  |  |   movea.l (sp),a0
    6682:	|  |  |   move.b 56(a0),d0
    6686:	|  |  |   addq.b #1,d0
    6688:	|  |  |   movea.l (sp),a0
    668a:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    668e:	|  |  '-> movea.l (sp),a0
    6690:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6694:	|  '----> tst.l (sp)
    6696:	'-------- bne.s 6678 <freezeSubs+0xa>
	}
}
    6698:	          nop
    669a:	          nop
    669c:	          addq.l #4,sp
    669e:	          rts

000066a0 <handleInput>:

BOOL handleInput () {
    66a0:	             lea -16(sp),sp
    66a4:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    66a6:	             move.l 1d298 <overRegion>,d0
    66ac:	         ,-- bne.s 66b4 <handleInput+0x14>
    66ae:	         |   jsr 16096 <getOverRegion>

	if (input.justMoved) {
    66b4:	         '-> move.w 1d13e <input+0x4>,d0
    66ba:	         ,-- beq.s 66f8 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    66bc:	         |   movea.l 1caf8 <currentEvents>,a0
    66c2:	         |   move.l 16(a0),d0
    66c6:	         +-- beq.s 66f8 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    66c8:	         |   move.l 1d158 <noStack>,d1
    66ce:	         |   movea.l 1caf8 <currentEvents>,a0
    66d4:	         |   move.l 16(a0),d0
    66d8:	         |   pea 1 <_start+0x1>
    66dc:	         |   move.l d1,-(sp)
    66de:	         |   clr.l -(sp)
    66e0:	         |   clr.l -(sp)
    66e2:	         |   move.l d0,-(sp)
    66e4:	         |   jsr 7ac8 <startNewFunctionNum>
    66ea:	         |   lea 20(sp),sp
    66ee:	         |   tst.l d0
    66f0:	         +-- bne.s 66f8 <handleInput+0x58>
    66f2:	         |   clr.w d0
    66f4:	,--------|-- bra.w 68fe <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    66f8:	|        '-> clr.w 1d13e <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    66fe:	|            move.l 1d150 <lastRegion>,d1
    6704:	|            move.l 1d298 <overRegion>,d0
    670a:	|            cmp.l d1,d0
    670c:	|  ,-------- beq.w 67e4 <handleInput+0x144>
    6710:	|  |         movea.l 1caf8 <currentEvents>,a0
    6716:	|  |         move.l 20(a0),d0
    671a:	|  +-------- beq.w 67e4 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    671e:	|  |         moveq #12,d0
    6720:	|  |         move.l d0,16(sp)
    6724:	|  |         clr.l 12(sp)
    6728:	|  |         move.l 1d188 <SysBase>,d0
    672e:	|  |         movea.l d0,a6
    6730:	|  |         move.l 16(sp),d0
    6734:	|  |         move.l 12(sp),d1
    6738:	|  |         jsr -684(a6)
    673c:	|  |         move.l d0,8(sp)
    6740:	|  |         move.l 8(sp),d0
    6744:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    6748:	|  |         move.l 4(sp),d0
    674c:	|  |     ,-- bne.s 6762 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    674e:	|  |     |   pea 190c3 <PutChar+0xce7>
    6754:	|  |     |   jsr 1793a <KPrintF>
    675a:	|  |     |   addq.l #4,sp
			return FALSE;
    675c:	|  |     |   clr.w d0
    675e:	+--|-----|-- bra.w 68fe <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    6762:	|  |     '-> movea.l 4(sp),a0
    6766:	|  |         clr.l (a0)
		if (overRegion) {
    6768:	|  |         move.l 1d298 <overRegion>,d0
    676e:	|  |  ,----- beq.s 6796 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    6770:	|  |  |      movea.l 1d298 <overRegion>,a0
    6776:	|  |  |      movea.l 28(a0),a0
    677a:	|  |  |      move.l 4(a0),d1
    677e:	|  |  |      move.l 4(sp),d0
    6782:	|  |  |      move.l d1,-(sp)
    6784:	|  |  |      pea 7 <_start+0x7>
    6788:	|  |  |      move.l d0,-(sp)
    678a:	|  |  |      jsr 1574c <setVariable>
    6790:	|  |  |      lea 12(sp),sp
    6794:	|  |  |  ,-- bra.s 67ac <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    6796:	|  |  '--|-> move.l 4(sp),d0
    679a:	|  |     |   clr.l -(sp)
    679c:	|  |     |   pea 1 <_start+0x1>
    67a0:	|  |     |   move.l d0,-(sp)
    67a2:	|  |     |   jsr 1574c <setVariable>
    67a8:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;		
    67ac:	|  |     '-> movea.l 4(sp),a0
    67b0:	|  |         clr.l 8(a0)
		if (! startNewFunctionLoaded (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    67b4:	|  |         movea.l 1caf8 <currentEvents>,a0
    67ba:	|  |         move.l 20(a0),d0
    67be:	|  |         pea 1 <_start+0x1>
    67c2:	|  |         lea 8(sp),a0
    67c6:	|  |         move.l a0,-(sp)
    67c8:	|  |         clr.l -(sp)
    67ca:	|  |         pea 1 <_start+0x1>
    67ce:	|  |         move.l d0,-(sp)
    67d0:	|  |         jsr 79b8 <startNewFunctionLoaded>
    67d6:	|  |         lea 20(sp),sp
    67da:	|  |         tst.l d0
    67dc:	|  +-------- bne.s 67e4 <handleInput+0x144>
    67de:	|  |         clr.w d0
    67e0:	+--|-------- bra.w 68fe <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    67e4:	|  '-------> move.w 1d140 <input+0x6>,d0
    67ea:	|        ,-- beq.s 6828 <handleInput+0x188>
    67ec:	|        |   movea.l 1caf8 <currentEvents>,a0
    67f2:	|        |   move.l 4(a0),d0
    67f6:	|        +-- beq.s 6828 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    67f8:	|        |   move.l 1d158 <noStack>,d1
    67fe:	|        |   movea.l 1caf8 <currentEvents>,a0
    6804:	|        |   move.l 4(a0),d0
    6808:	|        |   pea 1 <_start+0x1>
    680c:	|        |   move.l d1,-(sp)
    680e:	|        |   clr.l -(sp)
    6810:	|        |   clr.l -(sp)
    6812:	|        |   move.l d0,-(sp)
    6814:	|        |   jsr 7ac8 <startNewFunctionNum>
    681a:	|        |   lea 20(sp),sp
    681e:	|        |   tst.l d0
    6820:	|        +-- bne.s 6828 <handleInput+0x188>
    6822:	|        |   clr.w d0
    6824:	+--------|-- bra.w 68fe <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    6828:	|        '-> move.w 1d142 <input+0x8>,d0
    682e:	|        ,-- beq.s 686c <handleInput+0x1cc>
    6830:	|        |   movea.l 1caf8 <currentEvents>,a0
    6836:	|        |   move.l 12(a0),d0
    683a:	|        +-- beq.s 686c <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    683c:	|        |   move.l 1d158 <noStack>,d1
    6842:	|        |   movea.l 1caf8 <currentEvents>,a0
    6848:	|        |   move.l 12(a0),d0
    684c:	|        |   pea 1 <_start+0x1>
    6850:	|        |   move.l d1,-(sp)
    6852:	|        |   clr.l -(sp)
    6854:	|        |   clr.l -(sp)
    6856:	|        |   move.l d0,-(sp)
    6858:	|        |   jsr 7ac8 <startNewFunctionNum>
    685e:	|        |   lea 20(sp),sp
    6862:	|        |   tst.l d0
    6864:	|        +-- bne.s 686c <handleInput+0x1cc>
    6866:	|        |   clr.w d0
    6868:	+--------|-- bra.w 68fe <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    686c:	|        '-> move.w 1d13a <input>,d0
    6872:	|        ,-- beq.s 68aa <handleInput+0x20a>
    6874:	|        |   movea.l 1caf8 <currentEvents>,a0
    687a:	|        |   move.l (a0),d0
    687c:	|        +-- beq.s 68aa <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    687e:	|        |   move.l 1d158 <noStack>,d1
    6884:	|        |   movea.l 1caf8 <currentEvents>,a0
    688a:	|        |   move.l (a0),d0
    688c:	|        |   pea 1 <_start+0x1>
    6890:	|        |   move.l d1,-(sp)
    6892:	|        |   clr.l -(sp)
    6894:	|        |   clr.l -(sp)
    6896:	|        |   move.l d0,-(sp)
    6898:	|        |   jsr 7ac8 <startNewFunctionNum>
    689e:	|        |   lea 20(sp),sp
    68a2:	|        |   tst.l d0
    68a4:	|        +-- bne.s 68aa <handleInput+0x20a>
    68a6:	|        |   clr.w d0
    68a8:	+--------|-- bra.s 68fe <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    68aa:	|        '-> move.w 1d13c <input+0x2>,d0
    68b0:	|        ,-- beq.s 68ec <handleInput+0x24c>
    68b2:	|        |   movea.l 1caf8 <currentEvents>,a0
    68b8:	|        |   move.l 8(a0),d0
    68bc:	|        +-- beq.s 68ec <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    68be:	|        |   move.l 1d158 <noStack>,d1
    68c4:	|        |   movea.l 1caf8 <currentEvents>,a0
    68ca:	|        |   move.l 8(a0),d0
    68ce:	|        |   pea 1 <_start+0x1>
    68d2:	|        |   move.l d1,-(sp)
    68d4:	|        |   clr.l -(sp)
    68d6:	|        |   clr.l -(sp)
    68d8:	|        |   move.l d0,-(sp)
    68da:	|        |   jsr 7ac8 <startNewFunctionNum>
    68e0:	|        |   lea 20(sp),sp
    68e4:	|        |   tst.l d0
    68e6:	|        +-- bne.s 68ec <handleInput+0x24c>
    68e8:	|        |   clr.w d0
    68ea:	+--------|-- bra.s 68fe <handleInput+0x25e>
	}

	lastRegion = overRegion;
    68ec:	|        '-> move.l 1d298 <overRegion>,d0
    68f2:	|            move.l d0,1d150 <lastRegion>
	return runSludge ();
    68f8:	|            jsr 7786 <runSludge>
}
    68fe:	'----------> movea.l (sp)+,a6
    6900:	             lea 16(sp),sp
    6904:	             rts

00006906 <initSludge>:

BOOL initSludge (char * filename) {
    6906:	             lea -292(sp),sp
    690a:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    690e:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    6912:	             jsr b344 <makeNullAnim>
    6918:	             move.l d0,1d082 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    691e:	             pea 1d132 <gameVersion>
    6924:	             pea 190f9 <PutChar+0xd1d>
    692a:	             pea 45 <_start+0x45>
    692e:	             pea 47 <_start+0x47>
    6932:	             move.l 332(sp),-(sp)
    6936:	             jsr 7354 <openAndVerify>
    693c:	             lea 20(sp),sp
    6940:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    6944:	         ,-- bne.s 694c <initSludge+0x46>
    6946:	         |   clr.w d0
    6948:	,--------|-- bra.w 7074 <initSludge+0x76e>
	if (FGetC (fp)) {
    694c:	|        '-> move.l 288(sp),284(sp)
    6952:	|            move.l 1d190 <DOSBase>,d0
    6958:	|            movea.l d0,a6
    695a:	|            move.l 284(sp),d1
    695e:	|            jsr -306(a6)
    6962:	|            move.l d0,280(sp)
    6966:	|            move.l 280(sp),d0
    696a:	|  ,-------- beq.w 6b14 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    696e:	|  |         move.l 288(sp),-(sp)
    6972:	|  |         jsr 6bc <get2bytes>
    6978:	|  |         addq.l #4,sp
    697a:	|  |         move.l d0,1d15c <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    6980:	|  |         move.l 1d15c <numBIFNames>,d0
    6986:	|  |         move.l d0,276(sp)
    698a:	|  |         clr.l 272(sp)
    698e:	|  |         move.l 1d188 <SysBase>,d0
    6994:	|  |         movea.l d0,a6
    6996:	|  |         move.l 276(sp),d0
    699a:	|  |         move.l 272(sp),d1
    699e:	|  |         jsr -684(a6)
    69a2:	|  |         move.l d0,268(sp)
    69a6:	|  |         move.l 268(sp),d0
    69aa:	|  |         move.l d0,1d118 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    69b0:	|  |         move.l 1d118 <allBIFNames>,d0
    69b6:	|  |     ,-- bne.s 69be <initSludge+0xb8>
    69b8:	|  |     |   clr.w d0
    69ba:	+--|-----|-- bra.w 7074 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    69be:	|  |     '-> clr.l 304(sp)
    69c2:	|  |     ,-- bra.s 69e8 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    69c4:	|  |  ,--|-> move.l 1d118 <allBIFNames>,d1
    69ca:	|  |  |  |   move.l 304(sp),d0
    69ce:	|  |  |  |   add.l d0,d0
    69d0:	|  |  |  |   add.l d0,d0
    69d2:	|  |  |  |   movea.l d1,a2
    69d4:	|  |  |  |   adda.l d0,a2
    69d6:	|  |  |  |   move.l 288(sp),-(sp)
    69da:	|  |  |  |   jsr b02 <readString>
    69e0:	|  |  |  |   addq.l #4,sp
    69e2:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    69e4:	|  |  |  |   addq.l #1,304(sp)
    69e8:	|  |  |  '-> move.l 1d15c <numBIFNames>,d0
    69ee:	|  |  |      cmp.l 304(sp),d0
    69f2:	|  |  '----- bgt.s 69c4 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    69f4:	|  |         move.l 288(sp),-(sp)
    69f8:	|  |         jsr 6bc <get2bytes>
    69fe:	|  |         addq.l #4,sp
    6a00:	|  |         move.l d0,1d168 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    6a06:	|  |         move.l 1d168 <numUserFunc>,d0
    6a0c:	|  |         move.l d0,264(sp)
    6a10:	|  |         clr.l 260(sp)
    6a14:	|  |         move.l 1d188 <SysBase>,d0
    6a1a:	|  |         movea.l d0,a6
    6a1c:	|  |         move.l 264(sp),d0
    6a20:	|  |         move.l 260(sp),d1
    6a24:	|  |         jsr -684(a6)
    6a28:	|  |         move.l d0,256(sp)
    6a2c:	|  |         move.l 256(sp),d0
    6a30:	|  |         move.l d0,1d124 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    6a36:	|  |         move.l 1d124 <allUserFunc>,d0
    6a3c:	|  |     ,-- bne.s 6a44 <initSludge+0x13e>
    6a3e:	|  |     |   clr.w d0
    6a40:	+--|-----|-- bra.w 7074 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    6a44:	|  |     '-> clr.l 300(sp)
    6a48:	|  |     ,-- bra.s 6a6e <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    6a4a:	|  |  ,--|-> move.l 1d124 <allUserFunc>,d1
    6a50:	|  |  |  |   move.l 300(sp),d0
    6a54:	|  |  |  |   add.l d0,d0
    6a56:	|  |  |  |   add.l d0,d0
    6a58:	|  |  |  |   movea.l d1,a2
    6a5a:	|  |  |  |   adda.l d0,a2
    6a5c:	|  |  |  |   move.l 288(sp),-(sp)
    6a60:	|  |  |  |   jsr b02 <readString>
    6a66:	|  |  |  |   addq.l #4,sp
    6a68:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    6a6a:	|  |  |  |   addq.l #1,300(sp)
    6a6e:	|  |  |  '-> move.l 1d168 <numUserFunc>,d0
    6a74:	|  |  |      cmp.l 300(sp),d0
    6a78:	|  |  '----- bgt.s 6a4a <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    6a7a:	|  |         move.l 1d132 <gameVersion>,d0
    6a80:	|  |         cmpi.l #258,d0
    6a86:	|  +-------- ble.w 6b14 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    6a8a:	|  |         move.l 288(sp),-(sp)
    6a8e:	|  |         jsr 6bc <get2bytes>
    6a94:	|  |         addq.l #4,sp
    6a96:	|  |         move.l d0,1d164 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    6a9c:	|  |         move.l 1d164 <numResourceNames>,d0
    6aa2:	|  |         add.l d0,d0
    6aa4:	|  |         add.l d0,d0
    6aa6:	|  |         move.l d0,252(sp)
    6aaa:	|  |         clr.l 248(sp)
    6aae:	|  |         move.l 1d188 <SysBase>,d0
    6ab4:	|  |         movea.l d0,a6
    6ab6:	|  |         move.l 252(sp),d0
    6aba:	|  |         move.l 248(sp),d1
    6abe:	|  |         jsr -684(a6)
    6ac2:	|  |         move.l d0,244(sp)
    6ac6:	|  |         move.l 244(sp),d0
    6aca:	|  |         move.l d0,1d11c <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    6ad0:	|  |         move.l 1d11c <allResourceNames>,d0
    6ad6:	|  |     ,-- bne.s 6ade <initSludge+0x1d8>
    6ad8:	|  |     |   clr.w d0
    6ada:	+--|-----|-- bra.w 7074 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    6ade:	|  |     '-> clr.l 296(sp)
    6ae2:	|  |     ,-- bra.s 6b08 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    6ae4:	|  |  ,--|-> move.l 1d11c <allResourceNames>,d1
    6aea:	|  |  |  |   move.l 296(sp),d0
    6aee:	|  |  |  |   add.l d0,d0
    6af0:	|  |  |  |   add.l d0,d0
    6af2:	|  |  |  |   movea.l d1,a2
    6af4:	|  |  |  |   adda.l d0,a2
    6af6:	|  |  |  |   move.l 288(sp),-(sp)
    6afa:	|  |  |  |   jsr b02 <readString>
    6b00:	|  |  |  |   addq.l #4,sp
    6b02:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    6b04:	|  |  |  |   addq.l #1,296(sp)
    6b08:	|  |  |  '-> move.l 1d164 <numResourceNames>,d0
    6b0e:	|  |  |      cmp.l 296(sp),d0
    6b12:	|  |  '----- bgt.s 6ae4 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    6b14:	|  '-------> move.l #129,1d144 <input+0xa>
	input.mouseY = 100;
    6b1e:	|            moveq #100,d0
    6b20:	|            move.l d0,1d148 <input+0xe>
	winWidth = get2bytes (fp);
    6b26:	|            move.l 288(sp),-(sp)
    6b2a:	|            jsr 6bc <get2bytes>
    6b30:	|            addq.l #4,sp
    6b32:	|            move.l d0,1d0dc <winWidth>
	winHeight = get2bytes (fp);
    6b38:	|            move.l 288(sp),-(sp)
    6b3c:	|            jsr 6bc <get2bytes>
    6b42:	|            addq.l #4,sp
    6b44:	|            move.l d0,1d0e0 <winHeight>
	specialSettings = FGetC (fp);
    6b4a:	|            move.l 288(sp),240(sp)
    6b50:	|            move.l 1d190 <DOSBase>,d0
    6b56:	|            movea.l d0,a6
    6b58:	|            move.l 240(sp),d1
    6b5c:	|            jsr -306(a6)
    6b60:	|            move.l d0,236(sp)
    6b64:	|            move.l 236(sp),d0
    6b68:	|            move.l d0,1d16c <specialSettings>

	desiredfps = 1000/FGetC (fp);
    6b6e:	|            move.l 288(sp),232(sp)
    6b74:	|            move.l 1d190 <DOSBase>,d0
    6b7a:	|            movea.l d0,a6
    6b7c:	|            move.l 232(sp),d1
    6b80:	|            jsr -306(a6)
    6b84:	|            move.l d0,228(sp)
    6b88:	|            move.l 228(sp),d0
    6b8c:	|            move.l d0,-(sp)
    6b8e:	|            pea 3e8 <encodeFilename+0xea>
    6b92:	|            jsr 18344 <__divsi3>
    6b98:	|            addq.l #8,sp
    6b9a:	|            move.l d0,1cb0a <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    6ba0:	|            move.l 288(sp),-(sp)
    6ba4:	|            jsr b02 <readString>
    6baa:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    6bac:	|            move.l 288(sp),224(sp)
    6bb2:	|            move.l #119082,220(sp)
    6bba:	|            moveq #8,d1
    6bbc:	|            move.l d1,216(sp)
    6bc0:	|            moveq #1,d0
    6bc2:	|            move.l d0,212(sp)
    6bc6:	|            move.l 1d190 <DOSBase>,d0
    6bcc:	|            movea.l d0,a6
    6bce:	|            move.l 224(sp),d1
    6bd2:	|            move.l 220(sp),d2
    6bd6:	|            move.l 216(sp),d3
    6bda:	|            move.l 212(sp),d4
    6bde:	|            jsr -324(a6)
    6be2:	|            move.l d0,208(sp)
    6be6:	|            move.l 208(sp),d0
    6bea:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    6bee:	|            moveq #1,d1
    6bf0:	|            cmp.l 204(sp),d1
    6bf4:	|        ,-- beq.s 6c04 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    6bf6:	|        |   pea 19132 <PutChar+0xd56>
    6bfc:	|        |   jsr 1793a <KPrintF>
    6c02:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    6c04:	|        '-> move.l 1d132 <gameVersion>,d0
    6c0a:	|            cmpi.l #258,d0
    6c10:	|        ,-- ble.s 6c20 <initSludge+0x31a>
    6c12:	|        |   move.l 288(sp),-(sp)
    6c16:	|        |   jsr b02 <readString>
    6c1c:	|        |   addq.l #4,sp
    6c1e:	|     ,--|-- bra.s 6c34 <initSludge+0x32e>
    6c20:	|     |  '-> pea 19150 <PutChar+0xd74>
    6c26:	|     |      pea 19150 <PutChar+0xd74>
    6c2c:	|     |      jsr 14386 <joinStrings>
    6c32:	|     |      addq.l #8,sp
    6c34:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    6c38:	|            move.l 1d132 <gameVersion>,d0
    6c3e:	|            cmpi.l #258,d0
    6c44:	|     ,----- ble.s 6c66 <initSludge+0x360>
    6c46:	|     |      move.l 288(sp),196(sp)
    6c4c:	|     |      move.l 1d190 <DOSBase>,d0
    6c52:	|     |      movea.l d0,a6
    6c54:	|     |      move.l 196(sp),d1
    6c58:	|     |      jsr -306(a6)
    6c5c:	|     |      move.l d0,192(sp)
    6c60:	|     |      move.l 192(sp),d0
    6c64:	|     |  ,-- bra.s 6c68 <initSludge+0x362>
    6c66:	|     '--|-> moveq #0,d0
    6c68:	|        '-> move.l d0,1d264 <gameSettings+0x4>
	makeLanguageTable (fp);
    6c6e:	|            move.l 288(sp),-(sp)
    6c72:	|            jsr 13d3c <makeLanguageTable>
    6c78:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    6c7a:	|            move.l 1d132 <gameVersion>,d0
    6c80:	|            cmpi.l #261,d0
    6c86:	|        ,-- ble.s 6cd4 <initSludge+0x3ce>
	{
		FGetC(fp);
    6c88:	|        |   move.l 288(sp),188(sp)
    6c8e:	|        |   move.l 1d190 <DOSBase>,d0
    6c94:	|        |   movea.l d0,a6
    6c96:	|        |   move.l 188(sp),d1
    6c9a:	|        |   jsr -306(a6)
    6c9e:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    6ca2:	|        |   move.l 288(sp),180(sp)
    6ca8:	|        |   move.l 1d190 <DOSBase>,d0
    6cae:	|        |   movea.l d0,a6
    6cb0:	|        |   move.l 180(sp),d1
    6cb4:	|        |   jsr -306(a6)
    6cb8:	|        |   move.l d0,176(sp)
		getFloat (fp);
    6cbc:	|        |   move.l 288(sp),-(sp)
    6cc0:	|        |   jsr 7d8 <getFloat>
    6cc6:	|        |   addq.l #4,sp
		getFloat (fp);
    6cc8:	|        |   move.l 288(sp),-(sp)
    6ccc:	|        |   jsr 7d8 <getFloat>
    6cd2:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    6cd4:	|        '-> move.l 288(sp),-(sp)
    6cd8:	|            jsr b02 <readString>
    6cde:	|            addq.l #4,sp
    6ce0:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    6ce4:	|            pea 19151 <PutChar+0xd75>
    6cea:	|            move.l 176(sp),-(sp)
    6cee:	|            jsr 14306 <strcmp>
    6cf4:	|            addq.l #8,sp
    6cf6:	|            tst.l d0
    6cf8:	|        ,-- beq.s 6d00 <initSludge+0x3fa>
		return FALSE;
    6cfa:	|        |   clr.w d0
    6cfc:	+--------|-- bra.w 7074 <initSludge+0x76e>
	}
	FreeVec( checker);
    6d00:	|        '-> move.l 172(sp),168(sp)
    6d06:	|            move.l 1d188 <SysBase>,d0
    6d0c:	|            movea.l d0,a6
    6d0e:	|            movea.l 168(sp),a1
    6d12:	|            jsr -690(a6)
	checker = NULL;
    6d16:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    6d1a:	|            move.l 288(sp),164(sp)
    6d20:	|            move.l 1d190 <DOSBase>,d0
    6d26:	|            movea.l d0,a6
    6d28:	|            move.l 164(sp),d1
    6d2c:	|            jsr -306(a6)
    6d30:	|            move.l d0,160(sp)
    6d34:	|            move.l 160(sp),d0
    6d38:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    6d3c:	|            moveq #0,d0
    6d3e:	|            move.b 159(sp),d0
    6d42:	|            moveq #1,d1
    6d44:	|            and.l d1,d0
    6d46:	|        ,-- beq.s 6d9e <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6d48:	|        |   move.l 1d190 <DOSBase>,d0
    6d4e:	|        |   movea.l d0,a6
    6d50:	|        |   jsr -60(a6)
    6d54:	|        |   move.l d0,38(sp)
    6d58:	|        |   move.l 38(sp),d0
    6d5c:	|        |   move.l d0,34(sp)
    6d60:	|        |   move.l #102745,30(sp)
    6d68:	|        |   moveq #54,d0
    6d6a:	|        |   move.l d0,26(sp)
    6d6e:	|        |   move.l 1d190 <DOSBase>,d0
    6d74:	|        |   movea.l d0,a6
    6d76:	|        |   move.l 34(sp),d1
    6d7a:	|        |   move.l 30(sp),d2
    6d7e:	|        |   move.l 26(sp),d3
    6d82:	|        |   jsr -48(a6)
    6d86:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6d8a:	|        |   pea 19190 <PutChar+0xdb4>
    6d90:	|        |   jsr 1793a <KPrintF>
    6d96:	|        |   addq.l #4,sp
		return FALSE;
    6d98:	|        |   clr.w d0
    6d9a:	+--------|-- bra.w 7074 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    6d9e:	|        '-> move.l 288(sp),-(sp)
    6da2:	|            jsr 6bc <get2bytes>
    6da8:	|            addq.l #4,sp
    6daa:	|            move.l d0,1d160 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    6db0:	|            move.l 1d160 <numGlobals>,d0
    6db6:	|            lsl.l #3,d0
    6db8:	|            move.l d0,154(sp)
    6dbc:	|            clr.l 150(sp)
    6dc0:	|            move.l 1d188 <SysBase>,d0
    6dc6:	|            movea.l d0,a6
    6dc8:	|            move.l 154(sp),d0
    6dcc:	|            move.l 150(sp),d1
    6dd0:	|            jsr -684(a6)
    6dd4:	|            move.l d0,146(sp)
    6dd8:	|            move.l 146(sp),d0
    6ddc:	|            move.l d0,1d136 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    6de2:	|            move.l 1d136 <globalVars>,d0
    6de8:	|        ,-- bne.s 6e06 <initSludge+0x500>
    6dea:	|        |   move.l 1d160 <numGlobals>,d0
    6df0:	|        +-- ble.s 6e06 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    6df2:	|        |   pea 191c8 <PutChar+0xdec>
    6df8:	|        |   jsr 1793a <KPrintF>
    6dfe:	|        |   addq.l #4,sp
		return FALSE;
    6e00:	|        |   clr.w d0
    6e02:	+--------|-- bra.w 7074 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    6e06:	|        '-> clr.l 308(sp)
    6e0a:	|        ,-- bra.s 6e22 <initSludge+0x51c>
    6e0c:	|     ,--|-> move.l 1d136 <globalVars>,d1
    6e12:	|     |  |   move.l 308(sp),d0
    6e16:	|     |  |   lsl.l #3,d0
    6e18:	|     |  |   movea.l d1,a0
    6e1a:	|     |  |   adda.l d0,a0
    6e1c:	|     |  |   clr.l (a0)
    6e1e:	|     |  |   addq.l #1,308(sp)
    6e22:	|     |  '-> move.l 1d160 <numGlobals>,d0
    6e28:	|     |      cmp.l 308(sp),d0
    6e2c:	|     '----- bgt.s 6e0c <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6e2e:	|            move.l 1d264 <gameSettings+0x4>,d0
    6e34:	|            clr.l -(sp)
    6e36:	|            move.l d0,-(sp)
    6e38:	|            move.l 296(sp),-(sp)
    6e3c:	|            jsr 7fb6 <setFileIndices>
    6e42:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6e46:	|            pea 1 <_start+0x1>
    6e4a:	|            jsr 7c70 <getNumberedString>
    6e50:	|            addq.l #4,sp
    6e52:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6e56:	|            move.l 142(sp),-(sp)
    6e5a:	|            jsr 2fe <encodeFilename>
    6e60:	|            addq.l #4,sp
    6e62:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6e66:	|            move.l 142(sp),134(sp)
    6e6c:	|            move.l 1d188 <SysBase>,d0
    6e72:	|            movea.l d0,a6
    6e74:	|            movea.l 134(sp),a1
    6e78:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6e7c:	|            move.l 138(sp),130(sp)
    6e82:	|            move.l 1d190 <DOSBase>,d0
    6e88:	|            movea.l d0,a6
    6e8a:	|            move.l 130(sp),d1
    6e8e:	|            jsr -120(a6)
    6e92:	|            move.l d0,126(sp)
    6e96:	|            move.l 126(sp),d0
    6e9a:	|            move.l d0,292(sp)
	if(lock == 0) {
    6e9e:	|        ,-- bne.s 6ecc <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6ea0:	|        |   move.l 138(sp),122(sp)
    6ea6:	|        |   moveq #-2,d1
    6ea8:	|        |   move.l d1,118(sp)
    6eac:	|        |   move.l 1d190 <DOSBase>,d0
    6eb2:	|        |   movea.l d0,a6
    6eb4:	|        |   move.l 122(sp),d1
    6eb8:	|        |   move.l 118(sp),d2
    6ebc:	|        |   jsr -84(a6)
    6ec0:	|        |   move.l d0,114(sp)
    6ec4:	|        |   move.l 114(sp),d0
    6ec8:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6ecc:	|        '-> move.l 292(sp),110(sp)
    6ed2:	|            move.l 1d190 <DOSBase>,d0
    6ed8:	|            movea.l d0,a6
    6eda:	|            move.l 110(sp),d1
    6ede:	|            jsr -126(a6)
    6ee2:	|            move.l d0,106(sp)
    6ee6:	|            move.l 106(sp),d0
    6eea:	|        ,-- bne.s 6f46 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6eec:	|        |   move.l 138(sp),-(sp)
    6ef0:	|        |   pea 191fb <PutChar+0xe1f>
    6ef6:	|        |   jsr 1793a <KPrintF>
    6efc:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6efe:	|        |   move.l 1d190 <DOSBase>,d0
    6f04:	|        |   movea.l d0,a6
    6f06:	|        |   jsr -60(a6)
    6f0a:	|        |   move.l d0,58(sp)
    6f0e:	|        |   move.l 58(sp),d0
    6f12:	|        |   move.l d0,54(sp)
    6f16:	|        |   move.l #102952,50(sp)
    6f1e:	|        |   moveq #40,d0
    6f20:	|        |   move.l d0,46(sp)
    6f24:	|        |   move.l 1d190 <DOSBase>,d0
    6f2a:	|        |   movea.l d0,a6
    6f2c:	|        |   move.l 54(sp),d1
    6f30:	|        |   move.l 50(sp),d2
    6f34:	|        |   move.l 46(sp),d3
    6f38:	|        |   jsr -48(a6)
    6f3c:	|        |   move.l d0,42(sp)
		return FALSE;
    6f40:	|        |   clr.w d0
    6f42:	+--------|-- bra.w 7074 <initSludge+0x76e>
	}

	FreeVec(gameName);
    6f46:	|        '-> move.l 138(sp),102(sp)
    6f4c:	|            move.l 1d188 <SysBase>,d0
    6f52:	|            movea.l d0,a6
    6f54:	|            movea.l 102(sp),a1
    6f58:	|            jsr -690(a6)

	readIniFile (filename);
    6f5c:	|            move.l 316(sp),-(sp)
    6f60:	|            jsr 13e70 <readIniFile>
    6f66:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6f68:	|            jsr 13c42 <getLanguageForFileB>
    6f6e:	|            move.l d0,1cafc <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6f74:	|            move.l 1cafc <languageNum>,d0
    6f7a:	|        ,-- bpl.s 6f8a <initSludge+0x684>
    6f7c:	|        |   pea 19251 <PutChar+0xe75>
    6f82:	|        |   jsr 1793a <KPrintF>
    6f88:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6f8a:	|        '-> move.l 1cafc <languageNum>,d0
    6f90:	|            move.l d0,d1
    6f92:	|            move.l 1d264 <gameSettings+0x4>,d0
    6f98:	|            move.l d1,-(sp)
    6f9a:	|            move.l d0,-(sp)
    6f9c:	|            clr.l -(sp)
    6f9e:	|            jsr 7fb6 <setFileIndices>
    6fa4:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6fa8:	|            movea.l 200(sp),a0
    6fac:	|            move.b (a0),d0
    6fae:	|     ,----- beq.w 7058 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6fb2:	|     |      move.l 200(sp),-(sp)
    6fb6:	|     |      jsr 2fe <encodeFilename>
    6fbc:	|     |      addq.l #4,sp
    6fbe:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6fc2:	|     |      move.l 98(sp),94(sp)
    6fc8:	|     |      move.l 1d190 <DOSBase>,d0
    6fce:	|     |      movea.l d0,a6
    6fd0:	|     |      move.l 94(sp),d1
    6fd4:	|     |      jsr -120(a6)
    6fd8:	|     |      move.l d0,90(sp)
    6fdc:	|     |      move.l 90(sp),d0
    6fe0:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6fe4:	|     |  ,-- bne.s 7012 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6fe6:	|     |  |   move.l 98(sp),86(sp)
    6fec:	|     |  |   moveq #-2,d1
    6fee:	|     |  |   move.l d1,82(sp)
    6ff2:	|     |  |   move.l 1d190 <DOSBase>,d0
    6ff8:	|     |  |   movea.l d0,a6
    6ffa:	|     |  |   move.l 86(sp),d1
    6ffe:	|     |  |   move.l 82(sp),d2
    7002:	|     |  |   jsr -84(a6)
    7006:	|     |  |   move.l d0,78(sp)
    700a:	|     |  |   move.l 78(sp),d0
    700e:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    7012:	|     |  '-> move.l 292(sp),74(sp)
    7018:	|     |      move.l 1d190 <DOSBase>,d0
    701e:	|     |      movea.l d0,a6
    7020:	|     |      move.l 74(sp),d1
    7024:	|     |      jsr -126(a6)
    7028:	|     |      move.l d0,70(sp)
    702c:	|     |      move.l 70(sp),d0
    7030:	|     |  ,-- bne.s 7042 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    7032:	|     |  |   move.l 1d190 <DOSBase>,d0
    7038:	|     |  |   movea.l d0,a6
    703a:	|     |  |   jsr -60(a6)
    703e:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    7042:	|     |  '-> move.l 98(sp),62(sp)
    7048:	|     |      move.l 1d188 <SysBase>,d0
    704e:	|     |      movea.l d0,a6
    7050:	|     |      movea.l 62(sp),a1
    7054:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    7058:	|     '----> movea.l 1d0e0 <winHeight>,a0
    705e:	|            lea -15(a0),a0
    7062:	|            move.l a0,d0
    7064:	|            move.l d0,-(sp)
    7066:	|            pea a <_start+0xa>
    706a:	|            jsr 89fc <positionStatus>
    7070:	|            addq.l #8,sp

	return TRUE;
    7072:	|            moveq #1,d0
}
    7074:	'----------> movem.l (sp)+,d2-d4/a2/a6
    7078:	             lea 292(sp),sp
    707c:	             rts

0000707e <killSpeechTimers>:

void killSpeechTimers () {
    707e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    7080:	          move.l 1d120 <allRunningFunctions>,(sp)

	while (thisFunction) {
    7086:	   ,----- bra.s 70b2 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    7088:	,--|----> movea.l (sp),a0
    708a:	|  |      move.b 56(a0),d0
    708e:	|  |  ,-- bne.s 70ac <killSpeechTimers+0x2e>
    7090:	|  |  |   movea.l (sp),a0
    7092:	|  |  |   move.w 50(a0),d0
    7096:	|  |  +-- beq.s 70ac <killSpeechTimers+0x2e>
    7098:	|  |  |   movea.l (sp),a0
    709a:	|  |  |   move.l 12(a0),d0
    709e:	|  |  +-- beq.s 70ac <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    70a0:	|  |  |   movea.l (sp),a0
    70a2:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    70a6:	|  |  |   movea.l (sp),a0
    70a8:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    70ac:	|  |  '-> movea.l (sp),a0
    70ae:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    70b2:	|  '----> tst.l (sp)
    70b4:	'-------- bne.s 7088 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    70b6:	          jsr 456e <killAllSpeech>
}
    70bc:	          nop
    70be:	          addq.l #4,sp
    70c0:	          rts

000070c2 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    70c2:	             lea -52(sp),sp
    70c6:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    70c8:	             movea.l 60(sp),a0
    70cc:	             move.l (a0),d0
    70ce:	             move.l d0,-(sp)
    70d0:	             jsr 7ef6 <openSubSlice>
    70d6:	             addq.l #4,sp
    70d8:	             tst.w d0
    70da:	         ,-- bne.s 70e2 <loadFunctionCode+0x20>
    70dc:	         |   clr.w d0
    70de:	,--------|-- bra.w 72ac <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    70e2:	|        '-> move.l 1d170 <bigDataFile>,44(sp)
    70ea:	|            move.l 1d190 <DOSBase>,d0
    70f0:	|            movea.l d0,a6
    70f2:	|            move.l 44(sp),d1
    70f6:	|            jsr -306(a6)
    70fa:	|            move.l d0,40(sp)
    70fe:	|            move.l 40(sp),d0
    7102:	|            move.l d0,d0
    7104:	|            movea.l 60(sp),a0
    7108:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    710c:	|            move.l 1d170 <bigDataFile>,d0
    7112:	|            move.l d0,-(sp)
    7114:	|            jsr 6bc <get2bytes>
    711a:	|            addq.l #4,sp
    711c:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    7120:	|            move.l 1d170 <bigDataFile>,d0
    7126:	|            move.l d0,-(sp)
    7128:	|            jsr 6bc <get2bytes>
    712e:	|            addq.l #4,sp
    7130:	|            movea.l 60(sp),a0
    7134:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    7138:	|            move.l 1d170 <bigDataFile>,d0
    713e:	|            move.l d0,-(sp)
    7140:	|            jsr 6bc <get2bytes>
    7146:	|            addq.l #4,sp
    7148:	|            movea.l 60(sp),a0
    714c:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    7150:	|            move.l 36(sp),d0
    7154:	|            lsl.l #3,d0
    7156:	|            move.l d0,32(sp)
    715a:	|            clr.l 28(sp)
    715e:	|            move.l 1d188 <SysBase>,d0
    7164:	|            movea.l d0,a6
    7166:	|            move.l 32(sp),d0
    716a:	|            move.l 28(sp),d1
    716e:	|            jsr -684(a6)
    7172:	|            move.l d0,24(sp)
    7176:	|            move.l 24(sp),d0
    717a:	|            movea.l 60(sp),a0
    717e:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    7182:	|            movea.l 60(sp),a0
    7186:	|            move.l 4(a0),d0
    718a:	|        ,-- bne.s 71a0 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    718c:	|        |   pea 1927c <PutChar+0xea0>
    7192:	|        |   jsr 1793a <KPrintF>
    7198:	|        |   addq.l #4,sp
		return FALSE;
    719a:	|        |   clr.w d0
    719c:	+--------|-- bra.w 72ac <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    71a0:	|        '-> clr.l 52(sp)
    71a4:	|        ,-- bra.s 7206 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    71a6:	|     ,--|-> move.l 1d170 <bigDataFile>,8(sp)
    71ae:	|     |  |   move.l 1d190 <DOSBase>,d0
    71b4:	|     |  |   movea.l d0,a6
    71b6:	|     |  |   move.l 8(sp),d1
    71ba:	|     |  |   jsr -306(a6)
    71be:	|     |  |   move.l d0,4(sp)
    71c2:	|     |  |   move.l 4(sp),d1
    71c6:	|     |  |   movea.l 60(sp),a0
    71ca:	|     |  |   movea.l 4(a0),a0
    71ce:	|     |  |   move.l 52(sp),d0
    71d2:	|     |  |   lsl.l #3,d0
    71d4:	|     |  |   adda.l d0,a0
    71d6:	|     |  |   move.l d1,d0
    71d8:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    71da:	|     |  |   move.l 1d170 <bigDataFile>,d0
    71e0:	|     |  |   move.l d0,-(sp)
    71e2:	|     |  |   jsr 6bc <get2bytes>
    71e8:	|     |  |   addq.l #4,sp
    71ea:	|     |  |   move.l d0,d1
    71ec:	|     |  |   movea.l 60(sp),a0
    71f0:	|     |  |   movea.l 4(a0),a0
    71f4:	|     |  |   move.l 52(sp),d0
    71f8:	|     |  |   lsl.l #3,d0
    71fa:	|     |  |   adda.l d0,a0
    71fc:	|     |  |   move.l d1,d0
    71fe:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    7202:	|     |  |   addq.l #1,52(sp)
    7206:	|     |  '-> move.l 52(sp),d0
    720a:	|     |      cmp.l 36(sp),d0
    720e:	|     '----- bcs.s 71a6 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    7210:	|            jsr 7c66 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    7216:	|            movea.l 60(sp),a0
    721a:	|            move.l 8(a0),d0
    721e:	|  ,-------- ble.w 72a2 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    7222:	|  |         movea.l 60(sp),a0
    7226:	|  |         move.l 8(a0),d0
    722a:	|  |         lsl.l #3,d0
    722c:	|  |         move.l d0,20(sp)
    7230:	|  |         clr.l 16(sp)
    7234:	|  |         move.l 1d188 <SysBase>,d0
    723a:	|  |         movea.l d0,a6
    723c:	|  |         move.l 20(sp),d0
    7240:	|  |         move.l 16(sp),d1
    7244:	|  |         jsr -684(a6)
    7248:	|  |         move.l d0,12(sp)
    724c:	|  |         move.l 12(sp),d0
    7250:	|  |         movea.l 60(sp),a0
    7254:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    7258:	|  |         movea.l 60(sp),a0
    725c:	|  |         move.l 20(a0),d0
    7260:	|  |     ,-- bne.s 7274 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    7262:	|  |     |   pea 1927c <PutChar+0xea0>
    7268:	|  |     |   jsr 1793a <KPrintF>
    726e:	|  |     |   addq.l #4,sp
			return FALSE;
    7270:	|  |     |   clr.w d0
    7272:	+--|-----|-- bra.s 72ac <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    7274:	|  |     '-> clr.l 48(sp)
    7278:	|  |     ,-- bra.s 7292 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    727a:	|  |  ,--|-> movea.l 60(sp),a0
    727e:	|  |  |  |   move.l 20(a0),d1
    7282:	|  |  |  |   move.l 48(sp),d0
    7286:	|  |  |  |   lsl.l #3,d0
    7288:	|  |  |  |   movea.l d1,a0
    728a:	|  |  |  |   adda.l d0,a0
    728c:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    728e:	|  |  |  |   addq.l #1,48(sp)
    7292:	|  |  |  '-> movea.l 60(sp),a0
    7296:	|  |  |      move.l 8(a0),d0
    729a:	|  |  |      cmp.l 48(sp),d0
    729e:	|  |  '----- bgt.s 727a <loadFunctionCode+0x1b8>
    72a0:	|  |     ,-- bra.s 72aa <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    72a2:	|  '-----|-> movea.l 60(sp),a0
    72a6:	|        |   clr.l 8(a0)
	}
	return TRUE;
    72aa:	|        '-> moveq #1,d0
}
    72ac:	'----------> movea.l (sp)+,a6
    72ae:	             lea 52(sp),sp
    72b2:	             rts

000072b4 <loadHandlers>:

void loadHandlers (BPTR fp) {
    72b4:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    72b6:	movea.l 1caf8 <currentEvents>,a2
    72bc:	move.l 8(sp),-(sp)
    72c0:	jsr 6bc <get2bytes>
    72c6:	addq.l #4,sp
    72c8:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    72ca:	movea.l 1caf8 <currentEvents>,a2
    72d0:	move.l 8(sp),-(sp)
    72d4:	jsr 6bc <get2bytes>
    72da:	addq.l #4,sp
    72dc:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    72e0:	movea.l 1caf8 <currentEvents>,a2
    72e6:	move.l 8(sp),-(sp)
    72ea:	jsr 6bc <get2bytes>
    72f0:	addq.l #4,sp
    72f2:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    72f6:	movea.l 1caf8 <currentEvents>,a2
    72fc:	move.l 8(sp),-(sp)
    7300:	jsr 6bc <get2bytes>
    7306:	addq.l #4,sp
    7308:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    730c:	movea.l 1caf8 <currentEvents>,a2
    7312:	move.l 8(sp),-(sp)
    7316:	jsr 6bc <get2bytes>
    731c:	addq.l #4,sp
    731e:	move.l d0,16(a2)
	currentEvents -> focusFunction			= (struct loadedFunction *) get4bytes (fp); //Todo: Changed to pointer type. Check if this is correct.
    7322:	move.l 8(sp),-(sp)
    7326:	jsr 718 <get4bytes>
    732c:	addq.l #4,sp
    732e:	movea.l 1caf8 <currentEvents>,a0
    7334:	move.l d0,20(a0)
	currentEvents -> spaceFunction			= get2bytes (fp);
    7338:	movea.l 1caf8 <currentEvents>,a2
    733e:	move.l 8(sp),-(sp)
    7342:	jsr 6bc <get2bytes>
    7348:	addq.l #4,sp
    734a:	move.l d0,24(a2)
}
    734e:	nop
    7350:	movea.l (sp)+,a2
    7352:	rts

00007354 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    7354:	       lea -312(sp),sp
    7358:	       movem.l d2-d3/a6,-(sp)
    735c:	       move.l 332(sp),d1
    7360:	       move.l 336(sp),d0
    7364:	       move.b d1,d1
    7366:	       move.b d1,16(sp)
    736a:	       move.b d0,d0
    736c:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    7370:	       move.l 328(sp),318(sp)
    7376:	       move.l #1005,314(sp)
    737e:	       move.l 1d190 <DOSBase>,d0
    7384:	       movea.l d0,a6
    7386:	       move.l 318(sp),d1
    738a:	       move.l 314(sp),d2
    738e:	       jsr -30(a6)
    7392:	       move.l d0,310(sp)
    7396:	       move.l 310(sp),d0
    739a:	       move.l d0,306(sp)

	if (! fp) {
    739e:	   ,-- bne.s 73fa <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    73a0:	   |   move.l 1d190 <DOSBase>,d0
    73a6:	   |   movea.l d0,a6
    73a8:	   |   jsr -60(a6)
    73ac:	   |   move.l d0,154(sp)
    73b0:	   |   move.l 154(sp),d0
    73b4:	   |   move.l d0,150(sp)
    73b8:	   |   move.l #103077,146(sp)
    73c0:	   |   moveq #31,d0
    73c2:	   |   move.l d0,142(sp)
    73c6:	   |   move.l 1d190 <DOSBase>,d0
    73cc:	   |   movea.l d0,a6
    73ce:	   |   move.l 150(sp),d1
    73d2:	   |   move.l 146(sp),d2
    73d6:	   |   move.l 142(sp),d3
    73da:	   |   jsr -48(a6)
    73de:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    73e2:	   |   move.l 328(sp),-(sp)
    73e6:	   |   pea 192c5 <PutChar+0xee9>
    73ec:	   |   jsr 1793a <KPrintF>
    73f2:	   |   addq.l #8,sp
		return NULL;
    73f4:	   |   moveq #0,d0
    73f6:	,--|-- bra.w 76ba <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    73fa:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    73fe:	|      move.l 306(sp),302(sp)
    7404:	|      move.l 1d190 <DOSBase>,d0
    740a:	|      movea.l d0,a6
    740c:	|      move.l 302(sp),d1
    7410:	|      jsr -306(a6)
    7414:	|      move.l d0,298(sp)
    7418:	|      move.l 298(sp),d0
    741c:	|      moveq #83,d1
    741e:	|      cmp.l d0,d1
    7420:	|  ,-- beq.s 7428 <openAndVerify+0xd4>
    7422:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    7428:	|  '-> move.l 306(sp),294(sp)
    742e:	|      move.l 1d190 <DOSBase>,d0
    7434:	|      movea.l d0,a6
    7436:	|      move.l 294(sp),d1
    743a:	|      jsr -306(a6)
    743e:	|      move.l d0,290(sp)
    7442:	|      move.l 290(sp),d0
    7446:	|      moveq #76,d1
    7448:	|      cmp.l d0,d1
    744a:	|  ,-- beq.s 7452 <openAndVerify+0xfe>
    744c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    7452:	|  '-> move.l 306(sp),286(sp)
    7458:	|      move.l 1d190 <DOSBase>,d0
    745e:	|      movea.l d0,a6
    7460:	|      move.l 286(sp),d1
    7464:	|      jsr -306(a6)
    7468:	|      move.l d0,282(sp)
    746c:	|      move.l 282(sp),d0
    7470:	|      moveq #85,d1
    7472:	|      cmp.l d0,d1
    7474:	|  ,-- beq.s 747c <openAndVerify+0x128>
    7476:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    747c:	|  '-> move.l 306(sp),278(sp)
    7482:	|      move.l 1d190 <DOSBase>,d0
    7488:	|      movea.l d0,a6
    748a:	|      move.l 278(sp),d1
    748e:	|      jsr -306(a6)
    7492:	|      move.l d0,274(sp)
    7496:	|      move.l 274(sp),d0
    749a:	|      moveq #68,d1
    749c:	|      cmp.l d0,d1
    749e:	|  ,-- beq.s 74a6 <openAndVerify+0x152>
    74a0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    74a6:	|  '-> move.l 306(sp),270(sp)
    74ac:	|      move.l 1d190 <DOSBase>,d0
    74b2:	|      movea.l d0,a6
    74b4:	|      move.l 270(sp),d1
    74b8:	|      jsr -306(a6)
    74bc:	|      move.l d0,266(sp)
    74c0:	|      move.l 266(sp),d1
    74c4:	|      move.b 16(sp),d0
    74c8:	|      ext.w d0
    74ca:	|      movea.w d0,a0
    74cc:	|      cmpa.l d1,a0
    74ce:	|  ,-- beq.s 74d6 <openAndVerify+0x182>
    74d0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    74d6:	|  '-> move.l 306(sp),262(sp)
    74dc:	|      move.l 1d190 <DOSBase>,d0
    74e2:	|      movea.l d0,a6
    74e4:	|      move.l 262(sp),d1
    74e8:	|      jsr -306(a6)
    74ec:	|      move.l d0,258(sp)
    74f0:	|      move.l 258(sp),d1
    74f4:	|      move.b 14(sp),d0
    74f8:	|      ext.w d0
    74fa:	|      movea.w d0,a0
    74fc:	|      cmpa.l d1,a0
    74fe:	|  ,-- beq.s 7506 <openAndVerify+0x1b2>
    7500:	|  |   move.w #1,322(sp)
	if (headerBad) {
    7506:	|  '-> tst.w 322(sp)
    750a:	|  ,-- beq.s 7562 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    750c:	|  |   move.l 1d190 <DOSBase>,d0
    7512:	|  |   movea.l d0,a6
    7514:	|  |   jsr -60(a6)
    7518:	|  |   move.l d0,174(sp)
    751c:	|  |   move.l 174(sp),d0
    7520:	|  |   move.l d0,170(sp)
    7524:	|  |   move.l #103140,166(sp)
    752c:	|  |   moveq #31,d0
    752e:	|  |   move.l d0,162(sp)
    7532:	|  |   move.l 1d190 <DOSBase>,d0
    7538:	|  |   movea.l d0,a6
    753a:	|  |   move.l 170(sp),d1
    753e:	|  |   move.l 166(sp),d2
    7542:	|  |   move.l 162(sp),d3
    7546:	|  |   jsr -48(a6)
    754a:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    754e:	|  |   pea 192e4 <PutChar+0xf08>
    7554:	|  |   jsr 1793a <KPrintF>
    755a:	|  |   addq.l #4,sp
		return NULL;
    755c:	|  |   moveq #0,d0
    755e:	+--|-- bra.w 76ba <openAndVerify+0x366>
	}
	FGetC (fp);
    7562:	|  '-> move.l 306(sp),254(sp)
    7568:	|      move.l 1d190 <DOSBase>,d0
    756e:	|      movea.l d0,a6
    7570:	|      move.l 254(sp),d1
    7574:	|      jsr -306(a6)
    7578:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    757c:	|      nop
    757e:	|  ,-> move.l 306(sp),246(sp)
    7584:	|  |   move.l 1d190 <DOSBase>,d0
    758a:	|  |   movea.l d0,a6
    758c:	|  |   move.l 246(sp),d1
    7590:	|  |   jsr -306(a6)
    7594:	|  |   move.l d0,242(sp)
    7598:	|  |   move.l 242(sp),d0
    759c:	|  '-- bne.s 757e <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    759e:	|      move.l 306(sp),238(sp)
    75a4:	|      move.l 1d190 <DOSBase>,d0
    75aa:	|      movea.l d0,a6
    75ac:	|      move.l 238(sp),d1
    75b0:	|      jsr -306(a6)
    75b4:	|      move.l d0,234(sp)
    75b8:	|      move.l 234(sp),d0
    75bc:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    75c0:	|      move.l 306(sp),226(sp)
    75c6:	|      move.l 1d190 <DOSBase>,d0
    75cc:	|      movea.l d0,a6
    75ce:	|      move.l 226(sp),d1
    75d2:	|      jsr -306(a6)
    75d6:	|      move.l d0,222(sp)
    75da:	|      move.l 222(sp),d0
    75de:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    75e2:	|      move.l 230(sp),d0
    75e6:	|      lsl.l #8,d0
    75e8:	|      add.l 218(sp),d0
    75ec:	|      movea.l 344(sp),a0
    75f0:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    75f2:	|      movea.l 344(sp),a0
    75f6:	|      move.l (a0),d0
    75f8:	|      cmpi.l #514,d0
    75fe:	|  ,-- ble.s 7654 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    7600:	|  |   move.l 1d190 <DOSBase>,d0
    7606:	|  |   movea.l d0,a6
    7608:	|  |   jsr -60(a6)
    760c:	|  |   move.l d0,194(sp)
    7610:	|  |   move.l 194(sp),d0
    7614:	|  |   move.l d0,190(sp)
    7618:	|  |   move.l #103167,186(sp)
    7620:	|  |   moveq #100,d1
    7622:	|  |   move.l d1,182(sp)
    7626:	|  |   move.l 1d190 <DOSBase>,d0
    762c:	|  |   movea.l d0,a6
    762e:	|  |   move.l 190(sp),d1
    7632:	|  |   move.l 186(sp),d2
    7636:	|  |   move.l 182(sp),d3
    763a:	|  |   jsr -48(a6)
    763e:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    7642:	|  |   pea 192ff <PutChar+0xf23>
    7648:	|  |   jsr 1793a <KPrintF>
    764e:	|  |   addq.l #4,sp
		return NULL;
    7650:	|  |   moveq #0,d0
    7652:	+--|-- bra.s 76ba <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    7654:	|  '-> movea.l 344(sp),a0
    7658:	|      move.l (a0),d0
    765a:	|      cmpi.l #257,d0
    7660:	|  ,-- bgt.s 76b6 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    7662:	|  |   move.l 1d190 <DOSBase>,d0
    7668:	|  |   movea.l d0,a6
    766a:	|  |   jsr -60(a6)
    766e:	|  |   move.l d0,214(sp)
    7672:	|  |   move.l 214(sp),d0
    7676:	|  |   move.l d0,210(sp)
    767a:	|  |   move.l #103236,206(sp)
    7682:	|  |   moveq #100,d0
    7684:	|  |   move.l d0,202(sp)
    7688:	|  |   move.l 1d190 <DOSBase>,d0
    768e:	|  |   movea.l d0,a6
    7690:	|  |   move.l 210(sp),d1
    7694:	|  |   move.l 206(sp),d2
    7698:	|  |   move.l 202(sp),d3
    769c:	|  |   jsr -48(a6)
    76a0:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    76a4:	|  |   pea 19344 <PutChar+0xf68>
    76aa:	|  |   jsr 1793a <KPrintF>
    76b0:	|  |   addq.l #4,sp
		return NULL;
    76b2:	|  |   moveq #0,d0
    76b4:	+--|-- bra.s 76ba <openAndVerify+0x366>
	}
	return fp;
    76b6:	|  '-> move.l 306(sp),d0
}
    76ba:	'----> movem.l (sp)+,d2-d3/a6
    76be:	       lea 312(sp),sp
    76c2:	       rts

000076c4 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    76c4:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    76c6:	          move.l #119072,(sp)
	while (* huntAndDestroy) {
    76cc:	   ,----- bra.s 76f8 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    76ce:	,--|----> movea.l (sp),a0
    76d0:	|  |      move.l (a0),d0
    76d2:	|  |      cmp.l 8(sp),d0
    76d6:	|  |  ,-- bne.s 76ee <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    76d8:	|  |  |   movea.l (sp),a0
    76da:	|  |  |   movea.l (a0),a0
    76dc:	|  |  |   move.l 44(a0),d0
    76e0:	|  |  |   movea.l (sp),a0
    76e2:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    76e4:	|  |  |   movea.l 8(sp),a0
    76e8:	|  |  |   clr.l 44(a0)
    76ec:	|  +--|-- bra.s 76f8 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    76ee:	|  |  '-> movea.l (sp),a0
    76f0:	|  |      move.l (a0),d0
    76f2:	|  |      moveq #44,d1
    76f4:	|  |      add.l d0,d1
    76f6:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    76f8:	|  '----> movea.l (sp),a0
    76fa:	|         move.l (a0),d0
    76fc:	'-------- bne.s 76ce <pauseFunction+0xa>
		}
	}
}
    76fe:	          nop
    7700:	          nop
    7702:	          addq.l #4,sp
    7704:	          rts

00007706 <preloadNewFunctionNum>:

struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {
    7706:	       lea -16(sp),sp
    770a:	       move.l a6,-(sp)
	
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    770c:	       moveq #58,d0
    770e:	       move.l d0,16(sp)
    7712:	       clr.l 12(sp)
    7716:	       move.l 1d188 <SysBase>,d0
    771c:	       movea.l d0,a6
    771e:	       move.l 16(sp),d0
    7722:	       move.l 12(sp),d1
    7726:	       jsr -684(a6)
    772a:	       move.l d0,8(sp)
    772e:	       move.l 8(sp),d0
    7732:	       move.l d0,4(sp)
	if(!newFunc) {
    7736:	   ,-- bne.s 774a <preloadNewFunctionNum+0x44>
		KPrintF("startNewFunction: Cannot allocate memory");
    7738:	   |   pea 1938b <PutChar+0xfaf>
    773e:	   |   jsr 1793a <KPrintF>
    7744:	   |   addq.l #4,sp
		return 0;
    7746:	   |   moveq #0,d0
    7748:	,--|-- bra.s 7764 <preloadNewFunctionNum+0x5e>
	}

	newFunc -> originalNumber = funcNum;
    774a:	|  '-> move.l 24(sp),d0
    774e:	|      movea.l 4(sp),a0
    7752:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    7754:	|      move.l 4(sp),-(sp)
    7758:	|      jsr 70c2 <loadFunctionCode>
    775e:	|      addq.l #4,sp

	return newFunc;
    7760:	|      move.l 4(sp),d0
}
    7764:	'----> movea.l (sp)+,a6
    7766:	       lea 16(sp),sp
    776a:	       rts

0000776c <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    776c:	move.l 1d120 <allRunningFunctions>,d0
    7772:	movea.l 4(sp),a0
    7776:	move.l d0,44(a0)
	allRunningFunctions = fun;
    777a:	move.l 4(sp),1d120 <allRunningFunctions>
}
    7782:	nop
    7784:	rts

00007786 <runSludge>:

BOOL runSludge () {
    7786:	                   lea -12(sp),sp
    778a:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    778c:	                   move.l 1d120 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    7794:	      ,----------- bra.s 7810 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    7796:	   ,--|----------> movea.l 12(sp),a0
    779a:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    77a0:	   |  |            movea.l 12(sp),a0
    77a4:	   |  |            move.b 56(a0),d0
    77a8:	   |  |  ,-------- bne.s 780a <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    77aa:	   |  |  |         movea.l 12(sp),a0
    77ae:	   |  |  |         move.l 12(a0),d0
    77b2:	   |  |  |  ,----- beq.s 77dc <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    77b4:	   |  |  |  |      movea.l 12(sp),a0
    77b8:	   |  |  |  |      move.l 12(a0),d0
    77bc:	   |  |  |  |  ,-- bpl.s 77c8 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    77be:	   |  |  |  |  |   movea.l 12(sp),a0
    77c2:	   |  |  |  |  |   clr.l 12(a0)
    77c6:	   |  |  +--|--|-- bra.s 780a <runSludge+0x84>
				} else if (
					! -- (thisFunction -> timeLeft)) {
    77c8:	   |  |  |  |  '-> movea.l 12(sp),a0
    77cc:	   |  |  |  |      move.l 12(a0),d0
    77d0:	   |  |  |  |      subq.l #1,d0
				} else if (
    77d2:	   |  |  |  |      movea.l 12(sp),a0
    77d6:	   |  |  |  |      move.l d0,12(a0)
    77da:	   |  |  +--|----- bra.s 780a <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    77dc:	   |  |  |  '----> movea.l 12(sp),a0
    77e0:	   |  |  |         move.w 50(a0),d0
    77e4:	   |  |  |     ,-- beq.s 77f4 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    77e6:	   |  |  |     |   movea.l 12(sp),a0
    77ea:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    77ee:	   |  |  |     |   jsr 456e <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    77f4:	   |  |  |     '-> move.l 12(sp),-(sp)
    77f8:	   |  |  |         jsr 577e <continueFunction>
    77fe:	   |  |  |         addq.l #4,sp
    7800:	   |  |  |         tst.w d0
    7802:	   |  |  +-------- bne.s 780a <runSludge+0x84>
					return FALSE;
    7804:	   |  |  |         clr.w d0
    7806:	,--|--|--|-------- bra.w 7896 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    780a:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    7810:	|  |  '----------> tst.l 12(sp)
    7814:	|  '-------------- bne.s 7796 <runSludge+0x10>
	}

	if (loadNow) {
    7816:	|                  move.l 1d154 <loadNow>,d0
    781c:	|        ,-------- beq.s 7894 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    781e:	|        |         movea.l 1d154 <loadNow>,a0
    7824:	|        |         move.b (a0),d0
    7826:	|        |         cmpi.b #58,d0
    782a:	|        |  ,----- bne.s 785e <runSludge+0xd8>
			saveGame (loadNow + 1);
    782c:	|        |  |      move.l 1d154 <loadNow>,d0
    7832:	|        |  |      addq.l #1,d0
    7834:	|        |  |      move.l d0,-(sp)
    7836:	|        |  |      jsr cd9a <saveGame>
    783c:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    783e:	|        |  |      movea.l 1d24e <saverFunc>,a0
    7844:	|        |  |      lea 28(a0),a0
    7848:	|        |  |      pea 1 <_start+0x1>
    784c:	|        |  |      pea 1 <_start+0x1>
    7850:	|        |  |      move.l a0,-(sp)
    7852:	|        |  |      jsr 1574c <setVariable>
    7858:	|        |  |      lea 12(sp),sp
    785c:	|        |  |  ,-- bra.s 7876 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    785e:	|        |  '--|-> move.l 1d154 <loadNow>,d0
    7864:	|        |     |   move.l d0,-(sp)
    7866:	|        |     |   jsr c8e2 <loadGame>
    786c:	|        |     |   addq.l #4,sp
    786e:	|        |     |   tst.w d0
    7870:	|        |     +-- bne.s 7876 <runSludge+0xf0>
    7872:	|        |     |   clr.w d0
    7874:	+--------|-----|-- bra.s 7896 <runSludge+0x110>
		}
		FreeVec(loadNow);
    7876:	|        |     '-> move.l 1d154 <loadNow>,8(sp)
    787e:	|        |         move.l 1d188 <SysBase>,d0
    7884:	|        |         movea.l d0,a6
    7886:	|        |         movea.l 8(sp),a1
    788a:	|        |         jsr -690(a6)
		loadNow = NULL;
    788e:	|        |         clr.l 1d154 <loadNow>
	}

	return TRUE;
    7894:	|        '-------> moveq #1,d0
}
    7896:	'----------------> movea.l (sp)+,a6
    7898:	                   lea 12(sp),sp
    789c:	                   rts

0000789e <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    789e:	movea.l 1caf8 <currentEvents>,a0
    78a4:	move.l (a0),d0
    78a6:	move.l 4(sp),-(sp)
    78aa:	move.l d0,-(sp)
    78ac:	jsr 8d0 <put2bytes>
    78b2:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    78b4:	movea.l 1caf8 <currentEvents>,a0
    78ba:	move.l 4(a0),d0
    78be:	move.l 4(sp),-(sp)
    78c2:	move.l d0,-(sp)
    78c4:	jsr 8d0 <put2bytes>
    78ca:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    78cc:	movea.l 1caf8 <currentEvents>,a0
    78d2:	move.l 8(a0),d0
    78d6:	move.l 4(sp),-(sp)
    78da:	move.l d0,-(sp)
    78dc:	jsr 8d0 <put2bytes>
    78e2:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    78e4:	movea.l 1caf8 <currentEvents>,a0
    78ea:	move.l 12(a0),d0
    78ee:	move.l 4(sp),-(sp)
    78f2:	move.l d0,-(sp)
    78f4:	jsr 8d0 <put2bytes>
    78fa:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    78fc:	movea.l 1caf8 <currentEvents>,a0
    7902:	move.l 16(a0),d0
    7906:	move.l 4(sp),-(sp)
    790a:	move.l d0,-(sp)
    790c:	jsr 8d0 <put2bytes>
    7912:	addq.l #8,sp
	put4bytes ((ULONG) currentEvents -> focusFunction,			fp); //Todo: Changed to pointer type. Check if this is correct.
    7914:	movea.l 1caf8 <currentEvents>,a0
    791a:	move.l 20(a0),d0
    791e:	move.l 4(sp),-(sp)
    7922:	move.l d0,-(sp)
    7924:	jsr 958 <put4bytes>
    792a:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    792c:	movea.l 1caf8 <currentEvents>,a0
    7932:	move.l 24(a0),d0
    7936:	move.l 4(sp),-(sp)
    793a:	move.l d0,-(sp)
    793c:	jsr 8d0 <put2bytes>
    7942:	addq.l #8,sp
}
    7944:	nop
    7946:	rts

00007948 <sludgeDisplay>:

void sludgeDisplay () {					
    7948:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    794a:	move.l #14675968,(sp)
	displayCursor();
    7950:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    7956:	jsr 15c4 <CstDrawBackdrop>
	CstRestoreScreen();
    795c:	jsr 2eec <CstRestoreScreen>
	drawPeople();
    7962:	jsr a61c <drawPeople>
	CstSwapBuffer();
    7968:	jsr 3b64 <CstSwapBuffer>
}
    796e:	nop
    7970:	addq.l #4,sp
    7972:	rts

00007974 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    7974:	      ,-- bra.s 7994 <stackSetByIndex+0x20>
		vS = vS->next;
    7976:	,-----|-> movea.l 4(sp),a0
    797a:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    7980:	|     +-- bne.s 7994 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    7982:	|     |   pea 193b4 <PutChar+0xfd8>
    7988:	|     |   jsr 1793a <KPrintF>
    798e:	|     |   addq.l #4,sp
			return FALSE;
    7990:	|     |   clr.w d0
    7992:	|  ,--|-- bra.s 79b6 <stackSetByIndex+0x42>
	while (theIndex--) {
    7994:	|  |  '-> move.l 8(sp),d0
    7998:	|  |      move.l d0,d1
    799a:	|  |      subq.l #1,d1
    799c:	|  |      move.l d1,8(sp)
    79a0:	|  |      tst.l d0
    79a2:	'--|----- bne.s 7976 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    79a4:	   |      move.l 4(sp),d0
    79a8:	   |      move.l d0,-(sp)
    79aa:	   |      move.l 16(sp),-(sp)
    79ae:	   |      jsr 15314 <copyVariable>
    79b4:	   |      addq.l #8,sp
}
    79b6:	   '----> rts

000079b8 <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    79b8:	             subq.l #8,sp
    79ba:	             move.l 28(sp),d0
    79be:	             move.w d0,d0
    79c0:	             move.w d0,2(sp)
	
	if (newFunc -> numArgs != (int)numParamsExpected) {
    79c4:	             movea.l 12(sp),a0
    79c8:	             move.l 16(a0),d1
    79cc:	             move.l 16(sp),d0
    79d0:	             cmp.l d1,d0
    79d2:	         ,-- beq.s 79e8 <startNewFunctionLoaded+0x30>
		KPrintF("Wrong number of parameters!");
    79d4:	         |   pea 193cd <PutChar+0xff1>
    79da:	         |   jsr 1793a <KPrintF>
    79e0:	         |   addq.l #4,sp
		return NULL; 
    79e2:	         |   moveq #0,d0
    79e4:	,--------|-- bra.w 7ac4 <startNewFunctionLoaded+0x10c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    79e8:	|        '-> movea.l 12(sp),a0
    79ec:	|            move.l 16(a0),d1
    79f0:	|            movea.l 12(sp),a0
    79f4:	|            move.l 8(a0),d0
    79f8:	|            cmp.l d1,d0
    79fa:	|  ,-------- bge.s 7a64 <startNewFunctionLoaded+0xac>
		KPrintF ("More arguments than local variable space!");
    79fc:	|  |         pea 193e9 <PutChar+0x100d>
    7a02:	|  |         jsr 1793a <KPrintF>
    7a08:	|  |         addq.l #4,sp
		return NULL; 
    7a0a:	|  |         moveq #0,d0
    7a0c:	+--|-------- bra.w 7ac4 <startNewFunctionLoaded+0x10c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    7a10:	|  |  ,----> movea.l 24(sp),a0
    7a14:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    7a18:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    7a1c:	|  |  |      movea.l 24(sp),a0
    7a20:	|  |  |      move.l (a0),d0
    7a22:	|  |  |  ,-- bne.s 7a38 <startNewFunctionLoaded+0x80>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    7a24:	|  |  |  |   pea 19413 <PutChar+0x1037>
    7a2a:	|  |  |  |   jsr 1793a <KPrintF>
    7a30:	|  |  |  |   addq.l #4,sp
			return NULL;
    7a32:	|  |  |  |   moveq #0,d0
    7a34:	+--|--|--|-- bra.w 7ac4 <startNewFunctionLoaded+0x10c>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    7a38:	|  |  |  '-> movea.l 12(sp),a0
    7a3c:	|  |  |      move.l 20(a0),d1
    7a40:	|  |  |      move.l 16(sp),d0
    7a44:	|  |  |      lsl.l #3,d0
    7a46:	|  |  |      add.l d0,d1
    7a48:	|  |  |      move.l 4(sp),d0
    7a4c:	|  |  |      move.l d1,-(sp)
    7a4e:	|  |  |      move.l d0,-(sp)
    7a50:	|  |  |      jsr 15314 <copyVariable>
    7a56:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    7a58:	|  |  |      move.l 24(sp),-(sp)
    7a5c:	|  |  |      jsr 157de <trimStack>
    7a62:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    7a64:	|  '--|----> tst.l 16(sp)
    7a68:	|     '----- bne.s 7a10 <startNewFunctionLoaded+0x58>
	}

	newFunc -> cancelMe = FALSE;
    7a6a:	|            movea.l 12(sp),a0
    7a6e:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    7a72:	|            movea.l 12(sp),a0
    7a76:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    7a7a:	|            movea.l 12(sp),a0
    7a7e:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    7a84:	|            movea.l 12(sp),a0
    7a88:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    7a8e:	|            movea.l 12(sp),a0
    7a92:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    7a96:	|            movea.l 12(sp),a0
    7a9a:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    7a9e:	|            movea.l 12(sp),a0
    7aa2:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    7aa6:	|            movea.l 12(sp),a0
    7aaa:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    7aae:	|            movea.l 12(sp),a0
    7ab2:	|            clr.l 28(a0)

	restartFunction (newFunc);
    7ab6:	|            move.l 12(sp),-(sp)
    7aba:	|            jsr 776c <restartFunction>
    7ac0:	|            addq.l #4,sp
	return 1;
    7ac2:	|            moveq #1,d0
}
    7ac4:	'----------> addq.l #8,sp
    7ac6:	             rts

00007ac8 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7ac8:	       lea -24(sp),sp
    7acc:	       move.l a6,-(sp)
    7ace:	       move.l 48(sp),d0
    7ad2:	       move.w d0,d0
    7ad4:	       move.w d0,6(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7ad8:	       move.l #14675968,24(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    7ae0:	       moveq #58,d0
    7ae2:	       move.l d0,20(sp)
    7ae6:	       clr.l 16(sp)
    7aea:	       move.l 1d188 <SysBase>,d0
    7af0:	       movea.l d0,a6
    7af2:	       move.l 20(sp),d0
    7af6:	       move.l 16(sp),d1
    7afa:	       jsr -684(a6)
    7afe:	       move.l d0,12(sp)
    7b02:	       move.l 12(sp),d0
    7b06:	       move.l d0,8(sp)
	if(!newFunc) {
    7b0a:	   ,-- bne.s 7b1e <startNewFunctionNum+0x56>
		KPrintF("startNewFunction: Cannot allocate memory");
    7b0c:	   |   pea 1938b <PutChar+0xfaf>
    7b12:	   |   jsr 1793a <KPrintF>
    7b18:	   |   addq.l #4,sp
		return 0;
    7b1a:	   |   moveq #0,d0
    7b1c:	,--|-- bra.s 7b6c <startNewFunctionNum+0xa4>
	}
	if(funcNum == 145) {
    7b1e:	|  '-> cmpi.l #145,32(sp)
    7b26:	|  ,-- bne.s 7b36 <startNewFunctionNum+0x6e>
		KPrintF("startNewFunction: funcNum 145");
    7b28:	|  |   pea 1945e <PutChar+0x1082>
    7b2e:	|  |   jsr 1793a <KPrintF>
    7b34:	|  |   addq.l #4,sp
	}

	newFunc -> originalNumber = funcNum;
    7b36:	|  '-> move.l 32(sp),d0
    7b3a:	|      movea.l 8(sp),a0
    7b3e:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    7b40:	|      move.l 8(sp),-(sp)
    7b44:	|      jsr 70c2 <loadFunctionCode>
    7b4a:	|      addq.l #4,sp
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    7b4c:	|      movea.w 6(sp),a0
    7b50:	|      move.l a0,-(sp)
    7b52:	|      move.l 48(sp),-(sp)
    7b56:	|      move.l 48(sp),-(sp)
    7b5a:	|      move.l 48(sp),-(sp)
    7b5e:	|      move.l 24(sp),-(sp)
    7b62:	|      jsr 79b8 <startNewFunctionLoaded>
    7b68:	|      lea 20(sp),sp
}
    7b6c:	'----> movea.l (sp)+,a6
    7b6e:	       lea 24(sp),sp
    7b72:	       rts

00007b74 <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    7b74:	             lea -12(sp),sp
    7b78:	             move.l a6,-(sp)

	int a;

	//Keep function loaed in memory
	if( fun == currentEvents -> focusFunction) {	
    7b7a:	             movea.l 1caf8 <currentEvents>,a0
    7b80:	             move.l 20(a0),d0
    7b84:	             cmp.l 20(sp),d0
    7b88:	,----------- beq.w 7c2a <unloadFunction+0xb6>
		return;
	}

	if (fun -> stack) 
    7b8c:	|            movea.l 20(sp),a0
    7b90:	|            move.l 24(a0),d0
    7b94:	|        ,-- beq.s 7ba8 <unloadFunction+0x34>
	{
		KPrintF("unloadfunction: error non empty stack");
    7b96:	|        |   pea 1947c <PutChar+0x10a0>
    7b9c:	|        |   jsr 1793a <KPrintF>
    7ba2:	|        |   addq.l #4,sp
		return;
    7ba4:	|  ,-----|-- bra.w 7c2c <unloadFunction+0xb8>
	}
	FreeVec( fun -> compiledLines);
    7ba8:	|  |     '-> movea.l 20(sp),a0
    7bac:	|  |         move.l 4(a0),8(sp)
    7bb2:	|  |         move.l 1d188 <SysBase>,d0
    7bb8:	|  |         movea.l d0,a6
    7bba:	|  |         movea.l 8(sp),a1
    7bbe:	|  |         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    7bc2:	|  |         clr.l 12(sp)
    7bc6:	|  |     ,-- bra.s 7be6 <unloadFunction+0x72>
    7bc8:	|  |  ,--|-> movea.l 20(sp),a0
    7bcc:	|  |  |  |   move.l 20(a0),d1
    7bd0:	|  |  |  |   move.l 12(sp),d0
    7bd4:	|  |  |  |   lsl.l #3,d0
    7bd6:	|  |  |  |   add.l d1,d0
    7bd8:	|  |  |  |   move.l d0,-(sp)
    7bda:	|  |  |  |   jsr 150a8 <unlinkVar>
    7be0:	|  |  |  |   addq.l #4,sp
    7be2:	|  |  |  |   addq.l #1,12(sp)
    7be6:	|  |  |  '-> movea.l 20(sp),a0
    7bea:	|  |  |      move.l 8(a0),d0
    7bee:	|  |  |      cmp.l 12(sp),d0
    7bf2:	|  |  '----- bgt.s 7bc8 <unloadFunction+0x54>
	if( fun->numLocals > 0) {
    7bf4:	|  |         movea.l 20(sp),a0
    7bf8:	|  |         move.l 8(a0),d0
    7bfc:	|  |     ,-- ble.s 7c18 <unloadFunction+0xa4>
		FreeVec(fun -> localVars);
    7bfe:	|  |     |   movea.l 20(sp),a0
    7c02:	|  |     |   move.l 20(a0),4(sp)
    7c08:	|  |     |   move.l 1d188 <SysBase>,d0
    7c0e:	|  |     |   movea.l d0,a6
    7c10:	|  |     |   movea.l 4(sp),a1
    7c14:	|  |     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    7c18:	|  |     '-> moveq #28,d0
    7c1a:	|  |         add.l 20(sp),d0
    7c1e:	|  |         move.l d0,-(sp)
    7c20:	|  |         jsr 150a8 <unlinkVar>
    7c26:	|  |         addq.l #4,sp
    7c28:	|  +-------- bra.s 7c2c <unloadFunction+0xb8>
		return;
    7c2a:	'--|-------> nop
}
    7c2c:	   '-------> movea.l (sp)+,a6
    7c2e:	             lea 12(sp),sp
    7c32:	             rts

00007c34 <unfreezeSubs>:

void unfreezeSubs () {
    7c34:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    7c36:	          move.l 1d120 <allRunningFunctions>,(sp)

	while (thisFunction) {
    7c3c:	   ,----- bra.s 7c5a <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    7c3e:	,--|----> movea.l (sp),a0
    7c40:	|  |      move.b 56(a0),d0
    7c44:	|  |  ,-- beq.s 7c54 <unfreezeSubs+0x20>
    7c46:	|  |  |   movea.l (sp),a0
    7c48:	|  |  |   move.b 56(a0),d0
    7c4c:	|  |  |   subq.b #1,d0
    7c4e:	|  |  |   movea.l (sp),a0
    7c50:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    7c54:	|  |  '-> movea.l (sp),a0
    7c56:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    7c5a:	|  '----> tst.l (sp)
    7c5c:	'-------- bne.s 7c3e <unfreezeSubs+0xa>
	}
}
    7c5e:	          nop
    7c60:	          nop
    7c62:	          addq.l #4,sp
    7c64:	          rts

00007c66 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    7c66:	clr.w 1cb04 <sliceBusy>
}
    7c6c:	nop
    7c6e:	rts

00007c70 <getNumberedString>:

char * getNumberedString (int value) {
    7c70:	       lea -56(sp),sp
    7c74:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    7c78:	       move.w 1cb04 <sliceBusy>,d0
    7c7e:	   ,-- beq.s 7cc8 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    7c80:	   |   move.l 1d190 <DOSBase>,d0
    7c86:	   |   movea.l d0,a6
    7c88:	   |   jsr -60(a6)
    7c8c:	   |   move.l d0,28(sp)
    7c90:	   |   move.l 28(sp),d0
    7c94:	   |   move.l d0,24(sp)
    7c98:	   |   move.l #103586,20(sp)
    7ca0:	   |   moveq #76,d0
    7ca2:	   |   move.l d0,16(sp)
    7ca6:	   |   move.l 1d190 <DOSBase>,d0
    7cac:	   |   movea.l d0,a6
    7cae:	   |   move.l 24(sp),d1
    7cb2:	   |   move.l 20(sp),d2
    7cb6:	   |   move.l 16(sp),d3
    7cba:	   |   jsr -48(a6)
    7cbe:	   |   move.l d0,12(sp)
		return NULL;
    7cc2:	   |   moveq #0,d0
    7cc4:	,--|-- bra.w 7d64 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    7cc8:	|  '-> move.l 1d170 <bigDataFile>,64(sp)
    7cd0:	|      move.l 72(sp),d0
    7cd4:	|      add.l d0,d0
    7cd6:	|      add.l d0,d0
    7cd8:	|      move.l d0,d1
    7cda:	|      move.l 1d17c <startOfTextIndex>,d0
    7ce0:	|      add.l d1,d0
    7ce2:	|      move.l d0,60(sp)
    7ce6:	|      moveq #-1,d0
    7ce8:	|      move.l d0,56(sp)
    7cec:	|      move.l 1d190 <DOSBase>,d0
    7cf2:	|      movea.l d0,a6
    7cf4:	|      move.l 64(sp),d1
    7cf8:	|      move.l 60(sp),d2
    7cfc:	|      move.l 56(sp),d3
    7d00:	|      jsr -66(a6)
    7d04:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    7d08:	|      move.l 1d170 <bigDataFile>,d0
    7d0e:	|      move.l d0,-(sp)
    7d10:	|      jsr 718 <get4bytes>
    7d16:	|      addq.l #4,sp
    7d18:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    7d1c:	|      move.l 1d170 <bigDataFile>,48(sp)
    7d24:	|      move.l 72(sp),44(sp)
    7d2a:	|      moveq #-1,d0
    7d2c:	|      move.l d0,40(sp)
    7d30:	|      move.l 1d190 <DOSBase>,d0
    7d36:	|      movea.l d0,a6
    7d38:	|      move.l 48(sp),d1
    7d3c:	|      move.l 44(sp),d2
    7d40:	|      move.l 40(sp),d3
    7d44:	|      jsr -66(a6)
    7d48:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    7d4c:	|      move.l 1d170 <bigDataFile>,d0
    7d52:	|      move.l d0,-(sp)
    7d54:	|      jsr b02 <readString>
    7d5a:	|      addq.l #4,sp
    7d5c:	|      move.l d0,32(sp)
	
	return s;
    7d60:	|      move.l 32(sp),d0
}
    7d64:	'----> movem.l (sp)+,d2-d3/a6
    7d68:	       lea 56(sp),sp
    7d6c:	       rts

00007d6e <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    7d6e:	       lea -32(sp),sp
    7d72:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    7d76:	       move.w 1cb04 <sliceBusy>,d0
    7d7c:	   ,-- beq.s 7d98 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7d7e:	   |   pea 194ef <PutChar+0x1113>
    7d84:	   |   pea 1950d <PutChar+0x1131>
    7d8a:	   |   jsr 1793a <KPrintF>
    7d90:	   |   addq.l #8,sp
		return 0;
    7d92:	   |   moveq #0,d0
    7d94:	,--|-- bra.w 7e2c <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    7d98:	|  '-> move.l 1d170 <bigDataFile>,40(sp)
    7da0:	|      move.l 48(sp),d0
    7da4:	|      add.l d0,d0
    7da6:	|      add.l d0,d0
    7da8:	|      move.l d0,d1
    7daa:	|      move.l 1d178 <startOfDataIndex>,d0
    7db0:	|      add.l d1,d0
    7db2:	|      move.l d0,36(sp)
    7db6:	|      moveq #-1,d0
    7db8:	|      move.l d0,32(sp)
    7dbc:	|      move.l 1d190 <DOSBase>,d0
    7dc2:	|      movea.l d0,a6
    7dc4:	|      move.l 40(sp),d1
    7dc8:	|      move.l 36(sp),d2
    7dcc:	|      move.l 32(sp),d3
    7dd0:	|      jsr -66(a6)
    7dd4:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    7dd8:	|      move.l 1d170 <bigDataFile>,24(sp)
    7de0:	|      move.l 1d170 <bigDataFile>,d0
    7de6:	|      move.l d0,-(sp)
    7de8:	|      jsr 718 <get4bytes>
    7dee:	|      addq.l #4,sp
    7df0:	|      move.l d0,20(sp)
    7df4:	|      clr.l 16(sp)
    7df8:	|      move.l 1d190 <DOSBase>,d0
    7dfe:	|      movea.l d0,a6
    7e00:	|      move.l 24(sp),d1
    7e04:	|      move.l 20(sp),d2
    7e08:	|      move.l 16(sp),d3
    7e0c:	|      jsr -66(a6)
    7e10:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    7e14:	|      move.w #1,1cb04 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    7e1c:	|      move.l 1d170 <bigDataFile>,d0
    7e22:	|      move.l d0,-(sp)
    7e24:	|      jsr 718 <get4bytes>
    7e2a:	|      addq.l #4,sp
}
    7e2c:	'----> movem.l (sp)+,d2-d3/a6
    7e30:	       lea 32(sp),sp
    7e34:	       rts

00007e36 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    7e36:	       lea -32(sp),sp
    7e3a:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    7e3e:	       move.w 1cb04 <sliceBusy>,d0
    7e44:	   ,-- beq.s 7e60 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    7e46:	   |   pea 194ef <PutChar+0x1113>
    7e4c:	   |   pea 1950d <PutChar+0x1131>
    7e52:	   |   jsr 1793a <KPrintF>
    7e58:	   |   addq.l #8,sp
        return FALSE;
    7e5a:	   |   clr.w d0
    7e5c:	,--|-- bra.w 7eec <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    7e60:	|  '-> move.l 1d170 <bigDataFile>,40(sp)
    7e68:	|      move.l 48(sp),d0
    7e6c:	|      add.l d0,d0
    7e6e:	|      add.l d0,d0
    7e70:	|      move.l d0,d1
    7e72:	|      move.l 1d184 <startOfObjectIndex>,d0
    7e78:	|      add.l d1,d0
    7e7a:	|      move.l d0,36(sp)
    7e7e:	|      moveq #-1,d0
    7e80:	|      move.l d0,32(sp)
    7e84:	|      move.l 1d190 <DOSBase>,d0
    7e8a:	|      movea.l d0,a6
    7e8c:	|      move.l 40(sp),d1
    7e90:	|      move.l 36(sp),d2
    7e94:	|      move.l 32(sp),d3
    7e98:	|      jsr -66(a6)
    7e9c:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    7ea0:	|      move.l 1d170 <bigDataFile>,24(sp)
    7ea8:	|      move.l 1d170 <bigDataFile>,d0
    7eae:	|      move.l d0,-(sp)
    7eb0:	|      jsr 718 <get4bytes>
    7eb6:	|      addq.l #4,sp
    7eb8:	|      move.l d0,20(sp)
    7ebc:	|      moveq #-1,d0
    7ebe:	|      move.l d0,16(sp)
    7ec2:	|      move.l 1d190 <DOSBase>,d0
    7ec8:	|      movea.l d0,a6
    7eca:	|      move.l 24(sp),d1
    7ece:	|      move.l 20(sp),d2
    7ed2:	|      move.l 16(sp),d3
    7ed6:	|      jsr -66(a6)
    7eda:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    7ede:	|      move.w #1,1cb04 <sliceBusy>
    7ee6:	|      move.w 1cb04 <sliceBusy>,d0
}
    7eec:	'----> movem.l (sp)+,d2-d3/a6
    7ef0:	       lea 32(sp),sp
    7ef4:	       rts

00007ef6 <openSubSlice>:

BOOL openSubSlice (int num) {
    7ef6:	       lea -32(sp),sp
    7efa:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    7efe:	       move.w 1cb04 <sliceBusy>,d0
    7f04:	   ,-- beq.s 7f20 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7f06:	   |   pea 194ef <PutChar+0x1113>
    7f0c:	   |   pea 1950d <PutChar+0x1131>
    7f12:	   |   jsr 1793a <KPrintF>
    7f18:	   |   addq.l #8,sp
		return FALSE;
    7f1a:	   |   clr.w d0
    7f1c:	,--|-- bra.w 7fac <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    7f20:	|  '-> move.l 1d170 <bigDataFile>,40(sp)
    7f28:	|      move.l 48(sp),d0
    7f2c:	|      add.l d0,d0
    7f2e:	|      add.l d0,d0
    7f30:	|      move.l d0,d1
    7f32:	|      move.l 1d180 <startOfSubIndex>,d0
    7f38:	|      add.l d1,d0
    7f3a:	|      move.l d0,36(sp)
    7f3e:	|      moveq #-1,d0
    7f40:	|      move.l d0,32(sp)
    7f44:	|      move.l 1d190 <DOSBase>,d0
    7f4a:	|      movea.l d0,a6
    7f4c:	|      move.l 40(sp),d1
    7f50:	|      move.l 36(sp),d2
    7f54:	|      move.l 32(sp),d3
    7f58:	|      jsr -66(a6)
    7f5c:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    7f60:	|      move.l 1d170 <bigDataFile>,24(sp)
    7f68:	|      move.l 1d170 <bigDataFile>,d0
    7f6e:	|      move.l d0,-(sp)
    7f70:	|      jsr 718 <get4bytes>
    7f76:	|      addq.l #4,sp
    7f78:	|      move.l d0,20(sp)
    7f7c:	|      moveq #-1,d0
    7f7e:	|      move.l d0,16(sp)
    7f82:	|      move.l 1d190 <DOSBase>,d0
    7f88:	|      movea.l d0,a6
    7f8a:	|      move.l 24(sp),d1
    7f8e:	|      move.l 20(sp),d2
    7f92:	|      move.l 16(sp),d3
    7f96:	|      jsr -66(a6)
    7f9a:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    7f9e:	|      move.w #1,1cb04 <sliceBusy>
    7fa6:	|      move.w 1cb04 <sliceBusy>,d0
}
    7fac:	'----> movem.l (sp)+,d2-d3/a6
    7fb0:	       lea 32(sp),sp
    7fb4:	       rts

00007fb6 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7fb6:	       lea -180(sp),sp
    7fba:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7fbe:	       tst.l 196(sp)
    7fc2:	,----- beq.s 8002 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7fc4:	|      move.l 196(sp),1d170 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    7fcc:	|      move.l 196(sp),168(sp)
    7fd2:	|      clr.l 164(sp)
    7fd6:	|      clr.l 160(sp)
    7fda:	|      move.l 1d190 <DOSBase>,d0
    7fe0:	|      movea.l d0,a6
    7fe2:	|      move.l 168(sp),d1
    7fe6:	|      move.l 164(sp),d2
    7fea:	|      move.l 160(sp),d3
    7fee:	|      jsr -66(a6)
    7ff2:	|      move.l d0,156(sp)
    7ff6:	|      move.l 156(sp),d0
    7ffa:	|      move.l d0,1d174 <startIndex>
    8000:	|  ,-- bra.s 803c <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    8002:	'--|-> move.l 1d170 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    800a:	   |   move.l 196(sp),184(sp)
    8010:	   |   move.l 1d174 <startIndex>,d0
    8016:	   |   move.l d0,180(sp)
    801a:	   |   moveq #-1,d0
    801c:	   |   move.l d0,176(sp)
    8020:	   |   move.l 1d190 <DOSBase>,d0
    8026:	   |   movea.l d0,a6
    8028:	   |   move.l 184(sp),d1
    802c:	   |   move.l 180(sp),d2
    8030:	   |   move.l 176(sp),d3
    8034:	   |   jsr -66(a6)
    8038:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    803c:	   '-> clr.w 1cb04 <sliceBusy>

	if (skipBefore > numLanguages) {
    8042:	       move.l 204(sp),d0
    8046:	       cmp.l 200(sp),d0
    804a:	   ,-- bls.s 805e <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    804c:	   |   pea 19527 <PutChar+0x114b>
    8052:	   |   jsr 1793a <KPrintF>
    8058:	   |   addq.l #4,sp
		skipBefore = 0;
    805a:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    805e:	   '-> move.l 200(sp),d0
    8062:	       sub.l 204(sp),d0
    8066:	       move.l d0,188(sp)
	while (skipBefore) {
    806a:	   ,-- bra.s 80a8 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    806c:	,--|-> move.l 196(sp),24(sp)
    8072:	|  |   move.l 196(sp),-(sp)
    8076:	|  |   jsr 718 <get4bytes>
    807c:	|  |   addq.l #4,sp
    807e:	|  |   move.l d0,20(sp)
    8082:	|  |   moveq #-1,d0
    8084:	|  |   move.l d0,16(sp)
    8088:	|  |   move.l 1d190 <DOSBase>,d0
    808e:	|  |   movea.l d0,a6
    8090:	|  |   move.l 24(sp),d1
    8094:	|  |   move.l 20(sp),d2
    8098:	|  |   move.l 16(sp),d3
    809c:	|  |   jsr -66(a6)
    80a0:	|  |   move.l d0,12(sp)
		skipBefore --;
    80a4:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    80a8:	|  '-> tst.l 204(sp)
    80ac:	'----- bne.s 806c <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    80ae:	       move.l 196(sp),152(sp)
    80b4:	       clr.l 148(sp)
    80b8:	       clr.l 144(sp)
    80bc:	       move.l 1d190 <DOSBase>,d0
    80c2:	       movea.l d0,a6
    80c4:	       move.l 152(sp),d1
    80c8:	       move.l 148(sp),d2
    80cc:	       move.l 144(sp),d3
    80d0:	       jsr -66(a6)
    80d4:	       move.l d0,140(sp)
    80d8:	       move.l 140(sp),d0
    80dc:	       addq.l #4,d0
    80de:	       move.l d0,1d17c <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    80e4:	       move.l 196(sp),136(sp)
    80ea:	       move.l 196(sp),-(sp)
    80ee:	       jsr 718 <get4bytes>
    80f4:	       addq.l #4,sp
    80f6:	       move.l d0,132(sp)
    80fa:	       moveq #-1,d0
    80fc:	       move.l d0,128(sp)
    8100:	       move.l 1d190 <DOSBase>,d0
    8106:	       movea.l d0,a6
    8108:	       move.l 136(sp),d1
    810c:	       move.l 132(sp),d2
    8110:	       move.l 128(sp),d3
    8114:	       jsr -66(a6)
    8118:	       move.l d0,124(sp)

	while (skipAfter) {
    811c:	   ,-- bra.s 815a <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    811e:	,--|-> move.l 196(sp),40(sp)
    8124:	|  |   move.l 196(sp),-(sp)
    8128:	|  |   jsr 718 <get4bytes>
    812e:	|  |   addq.l #4,sp
    8130:	|  |   move.l d0,36(sp)
    8134:	|  |   moveq #-1,d0
    8136:	|  |   move.l d0,32(sp)
    813a:	|  |   move.l 1d190 <DOSBase>,d0
    8140:	|  |   movea.l d0,a6
    8142:	|  |   move.l 40(sp),d1
    8146:	|  |   move.l 36(sp),d2
    814a:	|  |   move.l 32(sp),d3
    814e:	|  |   jsr -66(a6)
    8152:	|  |   move.l d0,28(sp)
		skipAfter --;
    8156:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    815a:	|  '-> tst.l 188(sp)
    815e:	'----- bne.s 811e <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    8160:	       move.l 196(sp),120(sp)
    8166:	       clr.l 116(sp)
    816a:	       clr.l 112(sp)
    816e:	       move.l 1d190 <DOSBase>,d0
    8174:	       movea.l d0,a6
    8176:	       move.l 120(sp),d1
    817a:	       move.l 116(sp),d2
    817e:	       move.l 112(sp),d3
    8182:	       jsr -66(a6)
    8186:	       move.l d0,108(sp)
    818a:	       move.l 108(sp),d0
    818e:	       addq.l #4,d0
    8190:	       move.l d0,1d180 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    8196:	       move.l 196(sp),104(sp)
    819c:	       move.l 196(sp),-(sp)
    81a0:	       jsr 718 <get4bytes>
    81a6:	       addq.l #4,sp
    81a8:	       move.l d0,100(sp)
    81ac:	       clr.l 96(sp)
    81b0:	       move.l 1d190 <DOSBase>,d0
    81b6:	       movea.l d0,a6
    81b8:	       move.l 104(sp),d1
    81bc:	       move.l 100(sp),d2
    81c0:	       move.l 96(sp),d3
    81c4:	       jsr -66(a6)
    81c8:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    81cc:	       move.l 196(sp),88(sp)
    81d2:	       clr.l 84(sp)
    81d6:	       clr.l 80(sp)
    81da:	       move.l 1d190 <DOSBase>,d0
    81e0:	       movea.l d0,a6
    81e2:	       move.l 88(sp),d1
    81e6:	       move.l 84(sp),d2
    81ea:	       move.l 80(sp),d3
    81ee:	       jsr -66(a6)
    81f2:	       move.l d0,76(sp)
    81f6:	       move.l 76(sp),d0
    81fa:	       addq.l #4,d0
    81fc:	       move.l d0,1d184 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    8202:	       move.l 196(sp),72(sp)
    8208:	       move.l 196(sp),-(sp)
    820c:	       jsr 718 <get4bytes>
    8212:	       addq.l #4,sp
    8214:	       move.l d0,68(sp)
    8218:	       clr.l 64(sp)
    821c:	       move.l 1d190 <DOSBase>,d0
    8222:	       movea.l d0,a6
    8224:	       move.l 72(sp),d1
    8228:	       move.l 68(sp),d2
    822c:	       move.l 64(sp),d3
    8230:	       jsr -66(a6)
    8234:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    8238:	       move.l 196(sp),56(sp)
    823e:	       clr.l 52(sp)
    8242:	       clr.l 48(sp)
    8246:	       move.l 1d190 <DOSBase>,d0
    824c:	       movea.l d0,a6
    824e:	       move.l 56(sp),d1
    8252:	       move.l 52(sp),d2
    8256:	       move.l 48(sp),d3
    825a:	       jsr -66(a6)
    825e:	       move.l d0,44(sp)
    8262:	       move.l 44(sp),d0
    8266:	       move.l d0,1d178 <startOfDataIndex>
    826c:	       nop
    826e:	       movem.l (sp)+,d2-d3/a6
    8272:	       lea 180(sp),sp
    8276:	       rts

00008278 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    8278:	    lea -20(sp),sp
    827c:	    move.l a6,-(sp)
    827e:	    move.l d7,-(sp)
	APTR vbr = 0;
    8280:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    8284:	    move.w #20090,10(sp)
    828a:	    move.w #2049,12(sp)
    8290:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    8296:	    movea.l 1d188 <SysBase>,a0
    829c:	    move.w 296(a0),d0
    82a0:	    move.w d0,d0
    82a2:	    andi.l #65535,d0
    82a8:	    moveq #1,d1
    82aa:	    and.l d1,d0
    82ac:	,-- beq.s 82da <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    82ae:	|   lea 28(sp),a0
    82b2:	|   lea -18(a0),a0
    82b6:	|   move.l a0,20(sp)
    82ba:	|   move.l 1d188 <SysBase>,d0
    82c0:	|   movea.l d0,a6
    82c2:	|   move.l 20(sp),d7
    82c6:	|   exg d7,a5
    82c8:	|   jsr -30(a6)
    82cc:	|   exg d7,a5
    82ce:	|   move.l d0,16(sp)
    82d2:	|   move.l 16(sp),d0
    82d6:	|   move.l d0,24(sp)

	return vbr;
    82da:	'-> move.l 24(sp),d0
}
    82de:	    move.l (sp)+,d7
    82e0:	    movea.l (sp)+,a6
    82e2:	    lea 20(sp),sp
    82e6:	    rts

000082e8 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    82e8:	movea.l 1d1ae <VBR>,a0
    82ee:	lea 108(a0),a0
    82f2:	move.l 4(sp),(a0)
}
    82f6:	nop
    82f8:	rts

000082fa <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    82fa:	movea.l 1d1ae <VBR>,a0
    8300:	move.l 108(a0),d0
}
    8304:	rts

00008306 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    8306:	       subq.l #8,sp
    8308:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    830a:	       pea 19570 <PutChar+0x1194>
    8310:	       jsr 1793a <KPrintF>
    8316:	       addq.l #4,sp
	Forbid();
    8318:	       move.l 1d188 <SysBase>,d0
    831e:	       movea.l d0,a6
    8320:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    8324:	       pea 19588 <PutChar+0x11ac>
    832a:	       jsr 1793a <KPrintF>
    8330:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    8332:	       movea.l 1d18c <custom>,a0
    8338:	       move.w 16(a0),d0
    833c:	       move.w d0,1d1ac <SystemADKCON>
	SystemInts=custom->intenar;
    8342:	       movea.l 1d18c <custom>,a0
    8348:	       move.w 28(a0),d0
    834c:	       move.w d0,1d1a8 <SystemInts>
	SystemDMA=custom->dmaconr;
    8352:	       movea.l 1d18c <custom>,a0
    8358:	       move.w 2(a0),d0
    835c:	       move.w d0,1d1aa <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    8362:	       movea.l 1d194 <GfxBase>,a0
    8368:	       move.l 34(a0),d0
    836c:	       move.l d0,1d1b6 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    8372:	       pea 195a6 <PutChar+0x11ca>
    8378:	       jsr 1793a <KPrintF>
    837e:	       addq.l #4,sp
	LoadView(0);
    8380:	       clr.l 4(sp)
    8384:	       move.l 1d194 <GfxBase>,d0
    838a:	       movea.l d0,a6
    838c:	       movea.l 4(sp),a1
    8390:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    8394:	       pea 195bc <PutChar+0x11e0>
    839a:	       jsr 1793a <KPrintF>
    83a0:	       addq.l #4,sp
	WaitTOF();
    83a2:	       move.l 1d194 <GfxBase>,d0
    83a8:	       movea.l d0,a6
    83aa:	       jsr -270(a6)
	WaitTOF();
    83ae:	       move.l 1d194 <GfxBase>,d0
    83b4:	       movea.l d0,a6
    83b6:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    83ba:	       pea 195d1 <PutChar+0x11f5>
    83c0:	       jsr 1793a <KPrintF>
    83c6:	       addq.l #4,sp
	WaitVbl();
    83c8:	       jsr 1786e <WaitVbl>
	WaitVbl();
    83ce:	       jsr 1786e <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    83d4:	       pea 195e6 <PutChar+0x120a>
    83da:	       jsr 1793a <KPrintF>
    83e0:	       addq.l #4,sp
	OwnBlitter();
    83e2:	       move.l 1d194 <GfxBase>,d0
    83e8:	       movea.l d0,a6
    83ea:	       jsr -456(a6)
	WaitBlit();	
    83ee:	       move.l 1d194 <GfxBase>,d0
    83f4:	       movea.l d0,a6
    83f6:	       jsr -228(a6)
	Disable();
    83fa:	       move.l 1d188 <SysBase>,d0
    8400:	       movea.l d0,a6
    8402:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    8406:	       pea 19607 <PutChar+0x122b>
    840c:	       jsr 1793a <KPrintF>
    8412:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    8414:	       movea.l 1d18c <custom>,a0
    841a:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    8420:	       pea 1961e <PutChar+0x1242>
    8426:	       jsr 1793a <KPrintF>
    842c:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    842e:	       clr.l 8(sp)
    8432:	   ,-- bra.s 8450 <TakeSystem+0x14a>
		custom->color[a]=0;
    8434:	,--|-> movea.l 1d18c <custom>,a0
    843a:	|  |   move.l 8(sp),d0
    843e:	|  |   addi.l #192,d0
    8444:	|  |   add.l d0,d0
    8446:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    844c:	|  |   addq.l #1,8(sp)
    8450:	|  '-> moveq #31,d0
    8452:	|      cmp.l 8(sp),d0
    8456:	'----- bge.s 8434 <TakeSystem+0x12e>

	WaitVbl();
    8458:	       jsr 1786e <WaitVbl>
	WaitVbl();
    845e:	       jsr 1786e <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    8464:	       pea 19643 <PutChar+0x1267>
    846a:	       jsr 1793a <KPrintF>
    8470:	       addq.l #4,sp
	VBR=GetVBR();
    8472:	       jsr 8278 <GetVBR>
    8478:	       move.l d0,1d1ae <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    847e:	       jsr 82fa <GetInterruptHandler>
    8484:	       move.l d0,1d1b2 <SystemIrq>
}
    848a:	       nop
    848c:	       movea.l (sp)+,a6
    848e:	       addq.l #8,sp
    8490:	       rts

00008492 <FreeSystem>:

void FreeSystem() { 
    8492:	subq.l #4,sp
    8494:	move.l a6,-(sp)
	WaitVbl();
    8496:	jsr 1786e <WaitVbl>
	WaitBlit();
    849c:	move.l 1d194 <GfxBase>,d0
    84a2:	movea.l d0,a6
    84a4:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    84a8:	movea.l 1d18c <custom>,a0
    84ae:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    84b4:	movea.l 1d18c <custom>,a0
    84ba:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    84c0:	movea.l 1d18c <custom>,a0
    84c6:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    84cc:	move.l 1d1b2 <SystemIrq>,d0
    84d2:	move.l d0,-(sp)
    84d4:	jsr 82e8 <SetInterruptHandler>
    84da:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    84dc:	movea.l 1d194 <GfxBase>,a0
    84e2:	move.l 38(a0),d0
    84e6:	movea.l 1d18c <custom>,a0
    84ec:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    84f0:	movea.l 1d194 <GfxBase>,a0
    84f6:	move.l 50(a0),d0
    84fa:	movea.l 1d18c <custom>,a0
    8500:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    8504:	movea.l 1d18c <custom>,a0
    850a:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    8510:	move.w 1d1aa <SystemDMA>,d0
    8516:	movea.l 1d18c <custom>,a0
    851c:	ori.w #-32768,d0
    8520:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    8524:	move.w 1d1ac <SystemADKCON>,d0
    852a:	movea.l 1d18c <custom>,a0
    8530:	ori.w #-32768,d0
    8534:	move.w d0,158(a0)

	WaitBlit();	
    8538:	move.l 1d194 <GfxBase>,d0
    853e:	movea.l d0,a6
    8540:	jsr -228(a6)
	DisownBlitter();
    8544:	move.l 1d194 <GfxBase>,d0
    854a:	movea.l d0,a6
    854c:	jsr -462(a6)
	Enable();
    8550:	move.l 1d188 <SysBase>,d0
    8556:	movea.l d0,a6
    8558:	jsr -126(a6)

	LoadView(ActiView);
    855c:	move.l 1d1b6 <ActiView>,4(sp)
    8564:	move.l 1d194 <GfxBase>,d0
    856a:	movea.l d0,a6
    856c:	movea.l 4(sp),a1
    8570:	jsr -222(a6)
	WaitTOF();
    8574:	move.l 1d194 <GfxBase>,d0
    857a:	movea.l d0,a6
    857c:	jsr -270(a6)
	WaitTOF();
    8580:	move.l 1d194 <GfxBase>,d0
    8586:	movea.l d0,a6
    8588:	jsr -270(a6)

	Permit();
    858c:	move.l 1d188 <SysBase>,d0
    8592:	movea.l d0,a6
    8594:	jsr -138(a6)
}
    8598:	nop
    859a:	movea.l (sp)+,a6
    859c:	addq.l #4,sp
    859e:	rts

000085a0 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    85a0:	       lea -132(sp),sp
    85a4:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    85a8:	       clr.l 140(sp)
    85ac:	   ,-- bra.s 85b2 <main+0x12>
    85ae:	,--|-> addq.l #1,140(sp)
    85b2:	|  '-> cmpi.l #999,140(sp)
    85ba:	'----- ble.s 85ae <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    85bc:	       movea.w #4,a0
    85c0:	       move.l (a0),d0
    85c2:	       move.l d0,1d188 <SysBase>
	custom = (struct Custom*)0xdff000;	
    85c8:	       move.l #14675968,1d18c <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    85d2:	       move.l #104039,136(sp)
    85da:	       clr.l 132(sp)
    85de:	       move.l 1d188 <SysBase>,d0
    85e4:	       movea.l d0,a6
    85e6:	       movea.l 136(sp),a1
    85ea:	       move.l 132(sp),d0
    85ee:	       jsr -552(a6)
    85f2:	       move.l d0,128(sp)
    85f6:	       move.l 128(sp),d0
    85fa:	       move.l d0,1d194 <GfxBase>
	if (!GfxBase)
    8600:	       move.l 1d194 <GfxBase>,d0
    8606:	   ,-- bne.s 861c <main+0x7c>
		Exit(0);
    8608:	   |   clr.l 124(sp)
    860c:	   |   move.l 1d190 <DOSBase>,d0
    8612:	   |   movea.l d0,a6
    8614:	   |   move.l 124(sp),d1
    8618:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    861c:	   '-> move.l #104056,120(sp)
    8624:	       clr.l 116(sp)
    8628:	       move.l 1d188 <SysBase>,d0
    862e:	       movea.l d0,a6
    8630:	       movea.l 120(sp),a1
    8634:	       move.l 116(sp),d0
    8638:	       jsr -552(a6)
    863c:	       move.l d0,112(sp)
    8640:	       move.l 112(sp),d0
    8644:	       move.l d0,1d190 <DOSBase>
	if (!DOSBase)
    864a:	       move.l 1d190 <DOSBase>,d0
    8650:	   ,-- bne.s 8666 <main+0xc6>
		Exit(0);
    8652:	   |   clr.l 108(sp)
    8656:	   |   move.l 1d190 <DOSBase>,d0
    865c:	   |   movea.l d0,a6
    865e:	   |   move.l 108(sp),d1
    8662:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    8666:	   '-> move.l #104068,104(sp)
    866e:	       clr.l 100(sp)
    8672:	       move.l 1d188 <SysBase>,d0
    8678:	       movea.l d0,a6
    867a:	       movea.l 104(sp),a1
    867e:	       move.l 100(sp),d0
    8682:	       jsr -552(a6)
    8686:	       move.l d0,96(sp)
    868a:	       move.l 96(sp),d0
    868e:	       move.l d0,1d198 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    8694:	       move.l 1d198 <MathIeeeSingBasBase>,d0
    869a:	   ,-- bne.s 86b0 <main+0x110>
		Exit(0);	
    869c:	   |   clr.l 92(sp)
    86a0:	   |   move.l 1d190 <DOSBase>,d0
    86a6:	   |   movea.l d0,a6
    86a8:	   |   move.l 92(sp),d1
    86ac:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    86b0:	   '-> move.l #104092,88(sp)
    86b8:	       clr.l 84(sp)
    86bc:	       move.l 1d188 <SysBase>,d0
    86c2:	       movea.l d0,a6
    86c4:	       movea.l 88(sp),a1
    86c8:	       move.l 84(sp),d0
    86cc:	       jsr -552(a6)
    86d0:	       move.l d0,80(sp)
    86d4:	       move.l 80(sp),d0
    86d8:	       move.l d0,1d19c <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    86de:	       move.l 1d19c <MathIeeeSingTransBase>,d0
    86e4:	   ,-- bne.s 86fa <main+0x15a>
		Exit(0);
    86e6:	   |   clr.l 76(sp)
    86ea:	   |   move.l 1d190 <DOSBase>,d0
    86f0:	   |   movea.l d0,a6
    86f2:	   |   move.l 76(sp),d1
    86f6:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    86fa:	   '-> move.l #104118,72(sp)
    8702:	       clr.l 68(sp)
    8706:	       move.l 1d188 <SysBase>,d0
    870c:	       movea.l d0,a6
    870e:	       movea.l 72(sp),a1
    8712:	       move.l 68(sp),d0
    8716:	       jsr -552(a6)
    871a:	       move.l d0,64(sp)
    871e:	       move.l 64(sp),d0
    8722:	       move.l d0,1d1a4 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    8728:	       move.l 1d1a4 <MathIeeeDoubTransBase>,d0
    872e:	   ,-- bne.s 8744 <main+0x1a4>
		Exit(0);
    8730:	   |   clr.l 60(sp)
    8734:	   |   move.l 1d190 <DOSBase>,d0
    873a:	   |   movea.l d0,a6
    873c:	   |   move.l 60(sp),d1
    8740:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    8744:	   '-> move.l #104144,56(sp)
    874c:	       clr.l 52(sp)
    8750:	       move.l 1d188 <SysBase>,d0
    8756:	       movea.l d0,a6
    8758:	       movea.l 56(sp),a1
    875c:	       move.l 52(sp),d0
    8760:	       jsr -552(a6)
    8764:	       move.l d0,48(sp)
    8768:	       move.l 48(sp),d0
    876c:	       move.l d0,1d1a0 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    8772:	       move.l 1d1a0 <MathIeeeDoubBasBase>,d0
    8778:	   ,-- bne.s 878e <main+0x1ee>
		Exit(0);
    877a:	   |   clr.l 44(sp)
    877e:	   |   move.l 1d190 <DOSBase>,d0
    8784:	   |   movea.l d0,a6
    8786:	   |   move.l 44(sp),d1
    878a:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 035!\n");
    878e:	   '-> pea 196e8 <PutChar+0x130c>
    8794:	       jsr 1793a <KPrintF>
    879a:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    879c:	       move.l 1d190 <DOSBase>,d0
    87a2:	       movea.l d0,a6
    87a4:	       jsr -60(a6)
    87a8:	       move.l d0,40(sp)
    87ac:	       move.l 40(sp),d0
    87b0:	       move.l d0,36(sp)
    87b4:	       move.l #104200,32(sp)
    87bc:	       moveq #25,d0
    87be:	       move.l d0,28(sp)
    87c2:	       move.l 1d190 <DOSBase>,d0
    87c8:	       movea.l d0,a6
    87ca:	       move.l 36(sp),d1
    87ce:	       move.l 32(sp),d2
    87d2:	       move.l 28(sp),d3
    87d6:	       jsr -48(a6)
    87da:	       move.l d0,24(sp)
	Delay(50);
    87de:	       moveq #50,d0
    87e0:	       move.l d0,20(sp)
    87e4:	       move.l 1d190 <DOSBase>,d0
    87ea:	       movea.l d0,a6
    87ec:	       move.l 20(sp),d1
    87f0:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    87f4:	       pea 19721 <PutChar+0x1345>
    87fa:	       jsr 1793a <KPrintF>
    8800:	       addq.l #4,sp
	TakeSystem();
    8802:	       jsr 8306 <TakeSystem>
	KPrintF("System Taken\n");
    8808:	       pea 19730 <PutChar+0x1354>
    880e:	       jsr 1793a <KPrintF>
    8814:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    8816:	       movea.l 1d18c <custom>,a0
    881c:	       move.w #-30721,150(a0)
	WaitVbl();
    8822:	       jsr 1786e <WaitVbl>

	KPrintF("Starting main_sludge\n");
    8828:	       pea 1973e <PutChar+0x1362>
    882e:	       jsr 1793a <KPrintF>
    8834:	       addq.l #4,sp
	main_sludge(argc, argv);	
    8836:	       move.l 152(sp),-(sp)
    883a:	       move.l 152(sp),-(sp)
    883e:	       jsr 5026 <main_sludge>
    8844:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    8846:	       jsr 8492 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    884c:	       move.l 1d190 <DOSBase>,16(sp)
    8854:	       move.l 1d188 <SysBase>,d0
    885a:	       movea.l d0,a6
    885c:	       movea.l 16(sp),a1
    8860:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    8864:	       move.l 1d194 <GfxBase>,12(sp)
    886c:	       move.l 1d188 <SysBase>,d0
    8872:	       movea.l d0,a6
    8874:	       movea.l 12(sp),a1
    8878:	       jsr -414(a6)
    887c:	       moveq #0,d0
}
    887e:	       movem.l (sp)+,d2-d3/a6
    8882:	       lea 132(sp),sp
    8886:	       rts

00008888 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    8888:	    lea -16(sp),sp
    888c:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    888e:	    moveq #8,d0
    8890:	    move.l d0,16(sp)
    8894:	    clr.l 12(sp)
    8898:	    move.l 1d188 <SysBase>,d0
    889e:	    movea.l d0,a6
    88a0:	    move.l 16(sp),d0
    88a4:	    move.l 12(sp),d1
    88a8:	    jsr -684(a6)
    88ac:	    move.l d0,8(sp)
    88b0:	    move.l 8(sp),d0
    88b4:	    move.l d0,4(sp)
	if (!newStat) {
    88b8:	,-- bne.s 88e8 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    88ba:	|   movea.l 1cb06 <nowStatus>,a0
    88c0:	|   move.l (a0),d0
    88c2:	|   movea.l 4(sp),a0
    88c6:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    88ca:	|   pea 19150 <PutChar+0xd74>
    88d0:	|   jsr b8 <copyString>
    88d6:	|   addq.l #4,sp
    88d8:	|   movea.l 4(sp),a0
    88dc:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    88de:	|   movea.l 1cb06 <nowStatus>,a0
    88e4:	|   move.l 4(sp),(a0)
	}
}
    88e8:	'-> nop
    88ea:	    movea.l (sp)+,a6
    88ec:	    lea 16(sp),sp
    88f0:	    rts

000088f2 <clearStatusBar>:

void clearStatusBar () {
    88f2:	       lea -16(sp),sp
    88f6:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    88f8:	       movea.l 1cb06 <nowStatus>,a0
    88fe:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    8902:	       movea.l 1cb06 <nowStatus>,a0
    8908:	       moveq #-1,d0
    890a:	       move.l d0,6(a0)
	while (stat) {
    890e:	   ,-- bra.s 894e <clearStatusBar+0x5c>
		kill = stat;
    8910:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    8916:	|  |   movea.l 16(sp),a0
    891a:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    8920:	|  |   movea.l 12(sp),a0
    8924:	|  |   move.l (a0),8(sp)
    8928:	|  |   move.l 1d188 <SysBase>,d0
    892e:	|  |   movea.l d0,a6
    8930:	|  |   movea.l 8(sp),a1
    8934:	|  |   jsr -690(a6)
		FreeVec(kill);
    8938:	|  |   move.l 12(sp),4(sp)
    893e:	|  |   move.l 1d188 <SysBase>,d0
    8944:	|  |   movea.l d0,a6
    8946:	|  |   movea.l 4(sp),a1
    894a:	|  |   jsr -690(a6)
	while (stat) {
    894e:	|  '-> tst.l 16(sp)
    8952:	'----- bne.s 8910 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    8954:	       movea.l 1cb06 <nowStatus>,a0
    895a:	       clr.l (a0)
}
    895c:	       nop
    895e:	       movea.l (sp)+,a6
    8960:	       lea 16(sp),sp
    8964:	       rts

00008966 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    8966:	clr.l 1d1ba <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    896c:	move.w #-1,1d1be <mainStatus+0x4>
	mainStatus.litStatus = -1;
    8974:	moveq #-1,d0
    8976:	move.l d0,1d1c0 <mainStatus+0x6>
	mainStatus.statusX = 10;
    897c:	moveq #10,d0
    897e:	move.l d0,1d1c4 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    8984:	movea.l 1d0e0 <winHeight>,a0
    898a:	lea -15(a0),a0
    898e:	move.l a0,d0
    8990:	move.l d0,1d1c8 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    8996:	nop
    8998:	rts

0000899a <killLastStatus>:

void killLastStatus () {
    899a:	    lea -12(sp),sp
    899e:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    89a0:	    movea.l 1cb06 <nowStatus>,a0
    89a6:	    move.l (a0),d0
    89a8:	,-- beq.s 89f2 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    89aa:	|   movea.l 1cb06 <nowStatus>,a0
    89b0:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    89b4:	|   movea.l 1cb06 <nowStatus>,a0
    89ba:	|   movea.l 12(sp),a1
    89be:	|   move.l 4(a1),d0
    89c2:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    89c4:	|   movea.l 12(sp),a0
    89c8:	|   move.l (a0),8(sp)
    89cc:	|   move.l 1d188 <SysBase>,d0
    89d2:	|   movea.l d0,a6
    89d4:	|   movea.l 8(sp),a1
    89d8:	|   jsr -690(a6)
		FreeVec(kill);
    89dc:	|   move.l 12(sp),4(sp)
    89e2:	|   move.l 1d188 <SysBase>,d0
    89e8:	|   movea.l d0,a6
    89ea:	|   movea.l 4(sp),a1
    89ee:	|   jsr -690(a6)
	}
}
    89f2:	'-> nop
    89f4:	    movea.l (sp)+,a6
    89f6:	    lea 12(sp),sp
    89fa:	    rts

000089fc <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    89fc:	movea.l 1cb06 <nowStatus>,a0
    8a02:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    8a08:	movea.l 1cb06 <nowStatus>,a0
    8a0e:	move.l 8(sp),14(a0)
}
    8a14:	nop
    8a16:	rts

00008a18 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    8a18:	       lea -100(sp),sp
    8a1c:	       move.l a6,-(sp)
    8a1e:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    8a20:	       movea.l 1cb06 <nowStatus>,a0
    8a26:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    8a2a:	       movea.l 1cb06 <nowStatus>,a0
    8a30:	       move.w 4(a0),d0
    8a34:	       move.w d0,d0
    8a36:	       andi.l #65535,d0
    8a3c:	       move.l 112(sp),-(sp)
    8a40:	       move.l d0,-(sp)
    8a42:	       jsr 8d0 <put2bytes>
    8a48:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    8a4a:	       movea.l 1cb06 <nowStatus>,a0
    8a50:	       move.l 6(a0),d0
    8a54:	       move.l d0,d0
    8a56:	       movea.w d0,a0
    8a58:	       move.l 112(sp),-(sp)
    8a5c:	       move.l a0,-(sp)
    8a5e:	       jsr a9c <putSigned>
    8a64:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    8a66:	       movea.l 1cb06 <nowStatus>,a0
    8a6c:	       move.l 10(a0),d0
    8a70:	       move.l 112(sp),-(sp)
    8a74:	       move.l d0,-(sp)
    8a76:	       jsr 8d0 <put2bytes>
    8a7c:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    8a7e:	       movea.l 1cb06 <nowStatus>,a0
    8a84:	       move.l 14(a0),d0
    8a88:	       move.l 112(sp),-(sp)
    8a8c:	       move.l d0,-(sp)
    8a8e:	       jsr 8d0 <put2bytes>
    8a94:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    8a96:	       move.l 112(sp),100(sp)
    8a9c:	       movea.l 1cb06 <nowStatus>,a0
    8aa2:	       move.l 18(a0),96(sp)
    8aa8:	       move.l 1d190 <DOSBase>,d0
    8aae:	       movea.l d0,a6
    8ab0:	       move.l 100(sp),d1
    8ab4:	       move.l 96(sp),d2
    8ab8:	       jsr -312(a6)
    8abc:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    8ac0:	       move.l 112(sp),88(sp)
    8ac6:	       movea.l 1cb06 <nowStatus>,a0
    8acc:	       move.l 22(a0),84(sp)
    8ad2:	       move.l 1d190 <DOSBase>,d0
    8ad8:	       movea.l d0,a6
    8ada:	       move.l 88(sp),d1
    8ade:	       move.l 84(sp),d2
    8ae2:	       jsr -312(a6)
    8ae6:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    8aea:	       move.l 112(sp),76(sp)
    8af0:	       movea.l 1cb06 <nowStatus>,a0
    8af6:	       move.l 26(a0),72(sp)
    8afc:	       move.l 1d190 <DOSBase>,d0
    8b02:	       movea.l d0,a6
    8b04:	       move.l 76(sp),d1
    8b08:	       move.l 72(sp),d2
    8b0c:	       jsr -312(a6)
    8b10:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    8b14:	       move.l 112(sp),64(sp)
    8b1a:	       movea.l 1cb06 <nowStatus>,a0
    8b20:	       move.l 30(a0),60(sp)
    8b26:	       move.l 1d190 <DOSBase>,d0
    8b2c:	       movea.l d0,a6
    8b2e:	       move.l 64(sp),d1
    8b32:	       move.l 60(sp),d2
    8b36:	       jsr -312(a6)
    8b3a:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    8b3e:	       move.l 112(sp),52(sp)
    8b44:	       movea.l 1cb06 <nowStatus>,a0
    8b4a:	       move.l 34(a0),48(sp)
    8b50:	       move.l 1d190 <DOSBase>,d0
    8b56:	       movea.l d0,a6
    8b58:	       move.l 52(sp),d1
    8b5c:	       move.l 48(sp),d2
    8b60:	       jsr -312(a6)
    8b64:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    8b68:	       move.l 112(sp),40(sp)
    8b6e:	       movea.l 1cb06 <nowStatus>,a0
    8b74:	       move.l 38(a0),36(sp)
    8b7a:	       move.l 1d190 <DOSBase>,d0
    8b80:	       movea.l d0,a6
    8b82:	       move.l 40(sp),d1
    8b86:	       move.l 36(sp),d2
    8b8a:	       jsr -312(a6)
    8b8e:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    8b92:	   ,-- bra.s 8bd6 <saveStatusBars+0x1be>
		FPutC (fp,1);
    8b94:	,--|-> move.l 112(sp),16(sp)
    8b9a:	|  |   moveq #1,d0
    8b9c:	|  |   move.l d0,12(sp)
    8ba0:	|  |   move.l 1d190 <DOSBase>,d0
    8ba6:	|  |   movea.l d0,a6
    8ba8:	|  |   move.l 16(sp),d1
    8bac:	|  |   move.l 12(sp),d2
    8bb0:	|  |   jsr -312(a6)
    8bb4:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    8bb8:	|  |   movea.l 104(sp),a0
    8bbc:	|  |   move.l (a0),d0
    8bbe:	|  |   move.l 112(sp),-(sp)
    8bc2:	|  |   move.l d0,-(sp)
    8bc4:	|  |   jsr bd8 <writeString>
    8bca:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    8bcc:	|  |   movea.l 104(sp),a0
    8bd0:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    8bd6:	|  '-> tst.l 104(sp)
    8bda:	'----- bne.s 8b94 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    8bdc:	       move.l 112(sp),28(sp)
    8be2:	       clr.l 24(sp)
    8be6:	       move.l 1d190 <DOSBase>,d0
    8bec:	       movea.l d0,a6
    8bee:	       move.l 28(sp),d1
    8bf2:	       move.l 24(sp),d2
    8bf6:	       jsr -312(a6)
    8bfa:	       move.l d0,20(sp)
}
    8bfe:	       nop
    8c00:	       move.l (sp)+,d2
    8c02:	       movea.l (sp)+,a6
    8c04:	       lea 100(sp),sp
    8c08:	       rts

00008c0a <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    8c0a:	movea.l 1cb06 <nowStatus>,a0
    8c10:	move.l 4(sp),6(a0)
}
    8c16:	nop
    8c18:	rts

00008c1a <setStatusBar>:

void setStatusBar (char * txt) {
    8c1a:	    subq.l #4,sp
    8c1c:	    move.l a6,-(sp)
    8c1e:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    8c20:	    movea.l 1cb06 <nowStatus>,a0
    8c26:	    move.l (a0),d0
    8c28:	,-- beq.s 8c5c <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    8c2a:	|   movea.l 1cb06 <nowStatus>,a0
    8c30:	|   movea.l (a0),a0
    8c32:	|   move.l (a0),8(sp)
    8c36:	|   move.l 1d188 <SysBase>,d0
    8c3c:	|   movea.l d0,a6
    8c3e:	|   movea.l 8(sp),a1
    8c42:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    8c46:	|   movea.l 1cb06 <nowStatus>,a0
    8c4c:	|   movea.l (a0),a2
    8c4e:	|   move.l 16(sp),-(sp)
    8c52:	|   jsr b8 <copyString>
    8c58:	|   addq.l #4,sp
    8c5a:	|   move.l d0,(a2)
	}
}
    8c5c:	'-> nop
    8c5e:	    movea.l (sp)+,a2
    8c60:	    movea.l (sp)+,a6
    8c62:	    addq.l #4,sp
    8c64:	    rts

00008c66 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    8c66:	       movea.l 1cb06 <nowStatus>,a0
    8c6c:	       move.l (a0),d0
    8c6e:	,----- beq.s 8c7c <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    8c70:	|      movea.l 1cb06 <nowStatus>,a0
    8c76:	|      movea.l (a0),a0
    8c78:	|      move.l (a0),d0
    8c7a:	|  ,-- bra.s 8c82 <statusBarText+0x1c>
	} else {
		return "";
    8c7c:	'--|-> move.l #102736,d0
	}
    8c82:	   '-> rts

00008c84 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    8c84:	       lea -12(sp),sp
    8c88:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    8c8a:	       move.l 1d1e4 <zBuffer>,12(sp)

	while(zbuffercursor) {
    8c92:	   ,-- bra.s 8cba <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8c94:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    8c9a:	|  |   movea.l 12(sp),a0
    8c9e:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8ca4:	|  |   move.l 8(sp),4(sp)
    8caa:	|  |   move.l 1d188 <SysBase>,d0
    8cb0:	|  |   movea.l d0,a6
    8cb2:	|  |   movea.l 4(sp),a1
    8cb6:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    8cba:	|  '-> tst.l 12(sp)
    8cbe:	'----- bne.s 8c94 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8cc0:	       clr.l 1d1e4 <zBuffer>
}
    8cc6:	       nop
    8cc8:	       movea.l (sp)+,a6
    8cca:	       lea 12(sp),sp
    8cce:	       rts

00008cd0 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8cd0:	                lea -304(sp),sp
    8cd4:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    8cd8:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    8cdc:	                jsr 8c84 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8ce2:	                move.l 328(sp),d0
    8ce6:	                move.l d0,-(sp)
    8ce8:	                jsr 7d6e <openFileFromNum>
    8cee:	                addq.l #4,sp
    8cf0:	                tst.l d0
    8cf2:	            ,-- bne.s 8cfa <setZBuffer+0x2a>
    8cf4:	            |   clr.w d0
    8cf6:	,-----------|-- bra.w 8fb8 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    8cfa:	|           '-> move.l 1d170 <bigDataFile>,310(sp)
    8d02:	|               move.l 1d190 <DOSBase>,d0
    8d08:	|               movea.l d0,a6
    8d0a:	|               move.l 310(sp),d1
    8d0e:	|               jsr -306(a6)
    8d12:	|               move.l d0,306(sp)
    8d16:	|               move.l 306(sp),d0
    8d1a:	|               moveq #97,d1
    8d1c:	|               cmp.l d0,d1
    8d1e:	|        ,----- bne.s 8d92 <setZBuffer+0xc2>
    8d20:	|        |      move.l 1d170 <bigDataFile>,302(sp)
    8d28:	|        |      move.l 1d190 <DOSBase>,d0
    8d2e:	|        |      movea.l d0,a6
    8d30:	|        |      move.l 302(sp),d1
    8d34:	|        |      jsr -306(a6)
    8d38:	|        |      move.l d0,298(sp)
    8d3c:	|        |      move.l 298(sp),d0
    8d40:	|        |      moveq #115,d1
    8d42:	|        |      cmp.l d0,d1
    8d44:	|        +----- bne.s 8d92 <setZBuffer+0xc2>
    8d46:	|        |      move.l 1d170 <bigDataFile>,294(sp)
    8d4e:	|        |      move.l 1d190 <DOSBase>,d0
    8d54:	|        |      movea.l d0,a6
    8d56:	|        |      move.l 294(sp),d1
    8d5a:	|        |      jsr -306(a6)
    8d5e:	|        |      move.l d0,290(sp)
    8d62:	|        |      move.l 290(sp),d0
    8d66:	|        |      moveq #122,d1
    8d68:	|        |      cmp.l d0,d1
    8d6a:	|        +----- bne.s 8d92 <setZBuffer+0xc2>
    8d6c:	|        |      move.l 1d170 <bigDataFile>,286(sp)
    8d74:	|        |      move.l 1d190 <DOSBase>,d0
    8d7a:	|        |      movea.l d0,a6
    8d7c:	|        |      move.l 286(sp),d1
    8d80:	|        |      jsr -306(a6)
    8d84:	|        |      move.l d0,282(sp)
    8d88:	|        |      move.l 282(sp),d0
    8d8c:	|        |      moveq #98,d1
    8d8e:	|        |      cmp.l d0,d1
    8d90:	|        |  ,-- beq.s 8da6 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8d92:	|        '--|-> pea 1977b <PutChar+0x139f>
    8d98:	|           |   jsr 1793a <KPrintF>
    8d9e:	|           |   addq.l #4,sp
		 return FALSE;
    8da0:	|           |   clr.w d0
    8da2:	+-----------|-- bra.w 8fb8 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8da6:	|           '-> move.l 1d170 <bigDataFile>,278(sp)
    8dae:	|               move.l 1d190 <DOSBase>,d0
    8db4:	|               movea.l d0,a6
    8db6:	|               move.l 278(sp),d1
    8dba:	|               jsr -306(a6)
    8dbe:	|               move.l d0,274(sp)
    8dc2:	|               move.l 274(sp),d0
    8dc6:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8dca:	|               moveq #28,d0
    8dcc:	|               move.l d0,270(sp)
    8dd0:	|               clr.l 266(sp)
    8dd4:	|               move.l 1d188 <SysBase>,d0
    8dda:	|               movea.l d0,a6
    8ddc:	|               move.l 270(sp),d0
    8de0:	|               move.l 266(sp),d1
    8de4:	|               jsr -684(a6)
    8de8:	|               move.l d0,262(sp)
    8dec:	|               move.l 262(sp),d0
    8df0:	|               move.l d0,1d1e4 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8df6:	|               move.l 1d1e4 <zBuffer>,318(sp)

	while(numelements--)
    8dfe:	|     ,-------- bra.w 8f9e <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8e02:	|  ,--|-------> move.l 1d170 <bigDataFile>,d0
    8e08:	|  |  |         move.l d0,-(sp)
    8e0a:	|  |  |         jsr 6bc <get2bytes>
    8e10:	|  |  |         addq.l #4,sp
    8e12:	|  |  |         movea.l 318(sp),a0
    8e16:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    8e18:	|  |  |         move.l 1d170 <bigDataFile>,d0
    8e1e:	|  |  |         move.l d0,-(sp)
    8e20:	|  |  |         jsr 6bc <get2bytes>
    8e26:	|  |  |         addq.l #4,sp
    8e28:	|  |  |         movea.l 318(sp),a0
    8e2c:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    8e30:	|  |  |         move.l 1d170 <bigDataFile>,d0
    8e36:	|  |  |         move.l d0,-(sp)
    8e38:	|  |  |         jsr 6bc <get2bytes>
    8e3e:	|  |  |         addq.l #4,sp
    8e40:	|  |  |         movea.l 318(sp),a0
    8e44:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8e48:	|  |  |         move.l 1d170 <bigDataFile>,d0
    8e4e:	|  |  |         move.l d0,-(sp)
    8e50:	|  |  |         jsr 6bc <get2bytes>
    8e56:	|  |  |         addq.l #4,sp
    8e58:	|  |  |         movea.l 318(sp),a0
    8e5c:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    8e60:	|  |  |         move.l 1d170 <bigDataFile>,d0
    8e66:	|  |  |         move.l d0,-(sp)
    8e68:	|  |  |         jsr 6bc <get2bytes>
    8e6e:	|  |  |         addq.l #4,sp
    8e70:	|  |  |         movea.l 318(sp),a0
    8e74:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8e78:	|  |  |         movea.l 318(sp),a0
    8e7c:	|  |  |         move.l (a0),d0
    8e7e:	|  |  |         movea.l 318(sp),a0
    8e82:	|  |  |         move.l 4(a0),d1
    8e86:	|  |  |         move.l d1,-(sp)
    8e88:	|  |  |         move.l d0,-(sp)
    8e8a:	|  |  |         jsr 182c6 <__mulsi3>
    8e90:	|  |  |         addq.l #8,sp
    8e92:	|  |  |         tst.l d0
    8e94:	|  |  |     ,-- bge.s 8e98 <setZBuffer+0x1c8>
    8e96:	|  |  |     |   addq.l #7,d0
    8e98:	|  |  |     '-> asr.l #3,d0
    8e9a:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8e9e:	|  |  |         moveq #0,d0
    8ea0:	|  |  |         move.w 260(sp),d0
    8ea4:	|  |  |         move.l d0,256(sp)
    8ea8:	|  |  |         moveq #2,d1
    8eaa:	|  |  |         move.l d1,252(sp)
    8eae:	|  |  |         move.l 1d188 <SysBase>,d0
    8eb4:	|  |  |         movea.l d0,a6
    8eb6:	|  |  |         move.l 256(sp),d0
    8eba:	|  |  |         move.l 252(sp),d1
    8ebe:	|  |  |         jsr -684(a6)
    8ec2:	|  |  |         move.l d0,248(sp)
    8ec6:	|  |  |         move.l 248(sp),d0
    8eca:	|  |  |         movea.l 318(sp),a0
    8ece:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8ed2:	|  |  |         move.l 1d170 <bigDataFile>,244(sp)
    8eda:	|  |  |         movea.l 318(sp),a0
    8ede:	|  |  |         move.l 20(a0),240(sp)
    8ee4:	|  |  |         moveq #1,d0
    8ee6:	|  |  |         move.l d0,236(sp)
    8eea:	|  |  |         moveq #0,d0
    8eec:	|  |  |         move.w 260(sp),d0
    8ef0:	|  |  |         move.l d0,232(sp)
    8ef4:	|  |  |         move.l 1d190 <DOSBase>,d0
    8efa:	|  |  |         movea.l d0,a6
    8efc:	|  |  |         move.l 244(sp),d1
    8f00:	|  |  |         move.l 240(sp),d2
    8f04:	|  |  |         move.l 236(sp),d3
    8f08:	|  |  |         move.l 232(sp),d4
    8f0c:	|  |  |         jsr -324(a6)
    8f10:	|  |  |         move.l d0,228(sp)
    8f14:	|  |  |         move.l 228(sp),d0
    8f18:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8f1c:	|  |  |         tst.w 322(sp)
    8f20:	|  |  |  ,----- beq.s 8f5c <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8f22:	|  |  |  |      moveq #28,d1
    8f24:	|  |  |  |      move.l d1,222(sp)
    8f28:	|  |  |  |      clr.l 218(sp)
    8f2c:	|  |  |  |      move.l 1d188 <SysBase>,d0
    8f32:	|  |  |  |      movea.l d0,a6
    8f34:	|  |  |  |      move.l 222(sp),d0
    8f38:	|  |  |  |      move.l 218(sp),d1
    8f3c:	|  |  |  |      jsr -684(a6)
    8f40:	|  |  |  |      move.l d0,214(sp)
    8f44:	|  |  |  |      move.l 214(sp),d0
    8f48:	|  |  |  |      movea.l 318(sp),a0
    8f4c:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8f50:	|  |  |  |      movea.l 318(sp),a0
    8f54:	|  |  |  |      move.l 24(a0),318(sp)
    8f5a:	|  |  |  |  ,-- bra.s 8f64 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8f5c:	|  |  |  '--|-> movea.l 318(sp),a0
    8f60:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8f64:	|  |  |     '-> movea.l 318(sp),a0
    8f68:	|  |  |         move.l 4(a0),d0
    8f6c:	|  |  |         move.l d0,d0
    8f6e:	|  |  |         movea.w d0,a1
    8f70:	|  |  |         movea.l 318(sp),a0
    8f74:	|  |  |         move.l (a0),d0
    8f76:	|  |  |         move.l d0,d0
    8f78:	|  |  |         movea.w d0,a0
    8f7a:	|  |  |         movea.l 318(sp),a2
    8f7e:	|  |  |         move.l 20(a2),d0
    8f82:	|  |  |         clr.l -(sp)
    8f84:	|  |  |         pea 1 <_start+0x1>
    8f88:	|  |  |         move.l a1,-(sp)
    8f8a:	|  |  |         move.l a0,-(sp)
    8f8c:	|  |  |         pea 1978f <PutChar+0x13b3>
    8f92:	|  |  |         move.l d0,-(sp)
    8f94:	|  |  |         jsr 17a22 <debug_register_bitmap>
    8f9a:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8f9e:	|  |  '-------> move.w 322(sp),d0
    8fa2:	|  |            move.w d0,d1
    8fa4:	|  |            subq.w #1,d1
    8fa6:	|  |            move.w d1,322(sp)
    8faa:	|  |            tst.w d0
    8fac:	|  '----------- bne.w 8e02 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8fb0:	|               jsr 7c66 <finishAccess>
	
	return TRUE;
    8fb6:	|               moveq #1,d0
}
    8fb8:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    8fbc:	                lea 304(sp),sp
    8fc0:	                rts

00008fc2 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8fc2:	          lea -32(sp),sp
    8fc6:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8fc8:	          move.l 40(sp),d0
    8fcc:	          addq.l #8,d0
    8fce:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8fd2:	          clr.l 32(sp)
    8fd6:	   ,----- bra.s 901c <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8fd8:	,--|----> movea.l 24(sp),a0
    8fdc:	|  |      movea.l 8(a0),a0
    8fe0:	|  |      move.l 32(sp),d1
    8fe4:	|  |      move.l d1,d0
    8fe6:	|  |      lsl.l #3,d0
    8fe8:	|  |      sub.l d1,d0
    8fea:	|  |      add.l d0,d0
    8fec:	|  |      add.l d0,d0
    8fee:	|  |      adda.l d0,a0
    8ff0:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8ff4:	|  |      movea.l 8(sp),a0
    8ff8:	|  |      move.l 24(a0),d0
    8ffc:	|  |  ,-- beq.s 9018 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8ffe:	|  |  |   movea.l 8(sp),a0
    9002:	|  |  |   move.l 24(a0),4(sp)
    9008:	|  |  |   move.l 1d188 <SysBase>,d0
    900e:	|  |  |   movea.l d0,a6
    9010:	|  |  |   movea.l 4(sp),a1
    9014:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    9018:	|  |  '-> addq.l #1,32(sp)
    901c:	|  '----> movea.l 24(sp),a0
    9020:	|         move.l (a0),d0
    9022:	|         cmp.l 32(sp),d0
    9026:	'-------- bgt.s 8fd8 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    9028:	          movea.l 24(sp),a0
    902c:	          move.l 8(a0),20(sp)
    9032:	          move.l 1d188 <SysBase>,d0
    9038:	          movea.l d0,a6
    903a:	          movea.l 20(sp),a1
    903e:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    9042:	          move.l 1d29c <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    904a:	      ,-- bra.s 9056 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    904c:	   ,--|-> movea.l 28(sp),a0
    9050:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    9056:	   |  '-> movea.l 28(sp),a0
    905a:	   |      movea.l 22(a0),a0
    905e:	   |      move.l (a0),d1
    9060:	   |      movea.l 40(sp),a0
    9064:	   |      move.l (a0),d0
    9066:	   |      cmp.l d1,d0
    9068:	   |  ,-- beq.s 9070 <forgetSpriteBank+0xae>
    906a:	   |  |   tst.l 28(sp)
    906e:	   '--|-- bne.s 904c <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    9070:	      '-> tst.l 28(sp)
    9074:	   ,----- beq.s 909e <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    9076:	   |      movea.l 40(sp),a0
    907a:	   |      move.l 22(a0),d0
    907e:	   |      movea.l 28(sp),a0
    9082:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    9086:	   |      move.l 40(sp),12(sp)
    908c:	   |      move.l 1d188 <SysBase>,d0
    9092:	   |      movea.l d0,a6
    9094:	   |      movea.l 12(sp),a1
    9098:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    909c:	   |  ,-- bra.s 90c4 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    909e:	   '--|-> movea.l 1d29c <allLoadedBanks>,a0
    90a4:	      |   move.l 22(a0),d0
    90a8:	      |   move.l d0,1d29c <allLoadedBanks>
		FreeVec( forgetme);
    90ae:	      |   move.l 40(sp),16(sp)
    90b4:	      |   move.l 1d188 <SysBase>,d0
    90ba:	      |   movea.l d0,a6
    90bc:	      |   movea.l 16(sp),a1
    90c0:	      |   jsr -690(a6)
}
    90c4:	      '-> nop
    90c6:	          movea.l (sp)+,a6
    90c8:	          lea 32(sp),sp
    90cc:	          rts

000090ce <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    90ce:	                      lea -84(sp),sp
    90d2:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    90d6:	                      pea 1979b <PutChar+0x13bf>
    90dc:	                      jsr 1793a <KPrintF>
    90e2:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    90e4:	                      clr.l 94(sp)
    90e8:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    90ec:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    90f0:	                      move.l 108(sp),-(sp)
    90f4:	                      jsr 7d6e <openFileFromNum>
    90fa:	                      addq.l #4,sp
    90fc:	                      tst.l d0
    90fe:	                  ,-- bne.s 9114 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    9100:	                  |   pea 197b5 <PutChar+0x13d9>
    9106:	                  |   jsr 1793a <KPrintF>
    910c:	                  |   addq.l #4,sp
		return FALSE;
    910e:	                  |   clr.w d0
    9110:	,-----------------|-- bra.w 9508 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    9114:	|                 '-> move.l 1d170 <bigDataFile>,d0
    911a:	|                     move.l d0,-(sp)
    911c:	|                     jsr 6bc <get2bytes>
    9122:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    9124:	|                     move.l 1d170 <bigDataFile>,82(sp)
    912c:	|                     move.l 1d190 <DOSBase>,d0
    9132:	|                     movea.l d0,a6
    9134:	|                     move.l 82(sp),d1
    9138:	|                     jsr -306(a6)
    913c:	|                     move.l d0,78(sp)
    9140:	|                     move.l 78(sp),d0
    9144:	|                     movea.l 112(sp),a0
    9148:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    914c:	|                     move.l 1d170 <bigDataFile>,d0
    9152:	|                     move.l d0,-(sp)
    9154:	|                     jsr 6bc <get2bytes>
    915a:	|                     addq.l #4,sp
    915c:	|                     move.l d0,74(sp)

	if (total <= 0) {
    9160:	|                 ,-- bgt.s 9176 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    9162:	|                 |   pea 197e3 <PutChar+0x1407>
    9168:	|                 |   jsr 1793a <KPrintF>
    916e:	|                 |   addq.l #4,sp
		return FALSE;
    9170:	|                 |   clr.w d0
    9172:	+-----------------|-- bra.w 9508 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    9176:	|                 '-> movea.l 112(sp),a0
    917a:	|                     move.l 4(a0),d0
    917e:	|                     moveq #3,d1
    9180:	|                     cmp.l d0,d1
    9182:	|                 ,-- bne.s 9190 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    9184:	|                 |   movea.l 112(sp),a0
    9188:	|                 |   move.w #1,12(a0)
    918e:	|              ,--|-- bra.s 91b2 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    9190:	|              |  '-> movea.l 112(sp),a0
    9194:	|              |      move.l 4(a0),d0
    9198:	|              |      moveq #3,d1
    919a:	|              |      cmp.l d0,d1
    919c:	|              +----- bge.s 91b2 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    919e:	|              |      pea 19823 <PutChar+0x1447>
    91a4:	|              |      jsr 1793a <KPrintF>
    91aa:	|              |      addq.l #4,sp
		return FALSE;
    91ac:	|              |      clr.w d0
    91ae:	+--------------|----- bra.w 9508 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    91b2:	|              '----> movea.l 112(sp),a0
    91b6:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    91ba:	|                     move.l 74(sp),d1
    91be:	|                     move.l d1,d0
    91c0:	|                     lsl.l #3,d0
    91c2:	|                     sub.l d1,d0
    91c4:	|                     add.l d0,d0
    91c6:	|                     add.l d0,d0
    91c8:	|                     move.l d0,70(sp)
    91cc:	|                     clr.l 66(sp)
    91d0:	|                     move.l 1d188 <SysBase>,d0
    91d6:	|                     movea.l d0,a6
    91d8:	|                     move.l 70(sp),d0
    91dc:	|                     move.l 66(sp),d1
    91e0:	|                     jsr -684(a6)
    91e4:	|                     move.l d0,62(sp)
    91e8:	|                     move.l 62(sp),d0
    91ec:	|                     movea.l 112(sp),a0
    91f0:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    91f4:	|                     movea.l 112(sp),a0
    91f8:	|                     move.l 8(a0),d0
    91fc:	|                 ,-- bne.s 9204 <loadSpriteBank+0x136>
    91fe:	|                 |   clr.w d0
    9200:	+-----------------|-- bra.w 9508 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    9204:	|                 '-> moveq #1,d0
    9206:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    920a:	|                     clr.l 100(sp)
    920e:	|     ,-------------- bra.w 94e6 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    9212:	|  ,--|-------------> move.l 1d170 <bigDataFile>,d0
    9218:	|  |  |               move.l d0,-(sp)
    921a:	|  |  |               jsr 6bc <get2bytes>
    9220:	|  |  |               addq.l #4,sp
    9222:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    9226:	|  |  |               movea.l 112(sp),a0
    922a:	|  |  |               movea.l 8(a0),a0
    922e:	|  |  |               move.l 100(sp),d1
    9232:	|  |  |               move.l d1,d0
    9234:	|  |  |               lsl.l #3,d0
    9236:	|  |  |               sub.l d1,d0
    9238:	|  |  |               add.l d0,d0
    923a:	|  |  |               add.l d0,d0
    923c:	|  |  |               adda.l d0,a0
    923e:	|  |  |               moveq #0,d0
    9240:	|  |  |               move.w 60(sp),d0
    9244:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    9246:	|  |  |               movea.l 1d170 <bigDataFile>,a1
    924c:	|  |  |               movea.l 112(sp),a0
    9250:	|  |  |               movea.l 8(a0),a0
    9254:	|  |  |               move.l 100(sp),d1
    9258:	|  |  |               move.l d1,d0
    925a:	|  |  |               lsl.l #3,d0
    925c:	|  |  |               sub.l d1,d0
    925e:	|  |  |               add.l d0,d0
    9260:	|  |  |               add.l d0,d0
    9262:	|  |  |               lea (0,a0,d0.l),a2
    9266:	|  |  |               move.l a1,-(sp)
    9268:	|  |  |               jsr 6bc <get2bytes>
    926e:	|  |  |               addq.l #4,sp
    9270:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    9274:	|  |  |               movea.l 1d170 <bigDataFile>,a1
    927a:	|  |  |               movea.l 112(sp),a0
    927e:	|  |  |               movea.l 8(a0),a0
    9282:	|  |  |               move.l 100(sp),d1
    9286:	|  |  |               move.l d1,d0
    9288:	|  |  |               lsl.l #3,d0
    928a:	|  |  |               sub.l d1,d0
    928c:	|  |  |               add.l d0,d0
    928e:	|  |  |               add.l d0,d0
    9290:	|  |  |               lea (0,a0,d0.l),a2
    9294:	|  |  |               move.l a1,-(sp)
    9296:	|  |  |               jsr 6bc <get2bytes>
    929c:	|  |  |               addq.l #4,sp
    929e:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    92a2:	|  |  |               movea.l 1d170 <bigDataFile>,a1
    92a8:	|  |  |               movea.l 112(sp),a0
    92ac:	|  |  |               movea.l 8(a0),a0
    92b0:	|  |  |               move.l 100(sp),d1
    92b4:	|  |  |               move.l d1,d0
    92b6:	|  |  |               lsl.l #3,d0
    92b8:	|  |  |               sub.l d1,d0
    92ba:	|  |  |               add.l d0,d0
    92bc:	|  |  |               add.l d0,d0
    92be:	|  |  |               lea (0,a0,d0.l),a2
    92c2:	|  |  |               move.l a1,-(sp)
    92c4:	|  |  |               jsr 6bc <get2bytes>
    92ca:	|  |  |               addq.l #4,sp
    92cc:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    92d0:	|  |  |               movea.l 112(sp),a0
    92d4:	|  |  |               move.l 4(a0),d0
    92d8:	|  |  |               moveq #3,d1
    92da:	|  |  |               cmp.l d0,d1
    92dc:	|  |  |     ,-------- beq.w 9378 <loadSpriteBank+0x2aa>
    92e0:	|  |  |     |         moveq #3,d1
    92e2:	|  |  |     |         cmp.l d0,d1
    92e4:	|  |  |  ,--|-------- blt.w 941e <loadSpriteBank+0x350>
    92e8:	|  |  |  |  |         moveq #1,d1
    92ea:	|  |  |  |  |         cmp.l d0,d1
    92ec:	|  |  |  |  |     ,-- beq.s 92f8 <loadSpriteBank+0x22a>
    92ee:	|  |  |  |  |     |   moveq #2,d1
    92f0:	|  |  |  |  |     |   cmp.l d0,d1
    92f2:	|  |  |  |  |  ,--|-- beq.s 9324 <loadSpriteBank+0x256>
    92f4:	|  |  |  +--|--|--|-- bra.w 941e <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    92f8:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    92fc:	|  |  |  |  |  |      movea.l 8(a0),a0
    9300:	|  |  |  |  |  |      move.l 100(sp),d1
    9304:	|  |  |  |  |  |      move.l d1,d0
    9306:	|  |  |  |  |  |      lsl.l #3,d0
    9308:	|  |  |  |  |  |      sub.l d1,d0
    930a:	|  |  |  |  |  |      add.l d0,d0
    930c:	|  |  |  |  |  |      add.l d0,d0
    930e:	|  |  |  |  |  |      adda.l d0,a0
    9310:	|  |  |  |  |  |      move.l 4(a0),d0
    9314:	|  |  |  |  |  |      addq.l #2,d0
    9316:	|  |  |  |  |  |      move.l d0,d0
    9318:	|  |  |  |  |  |      add.w d0,d0
    931a:	|  |  |  |  |  |      add.w d0,d0
    931c:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    9320:	|  |  |  +--|--|----- bra.w 941e <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    9324:	|  |  |  |  |  '----> movea.l 112(sp),a0
    9328:	|  |  |  |  |         movea.l 8(a0),a0
    932c:	|  |  |  |  |         move.l 100(sp),d1
    9330:	|  |  |  |  |         move.l d1,d0
    9332:	|  |  |  |  |         lsl.l #3,d0
    9334:	|  |  |  |  |         sub.l d1,d0
    9336:	|  |  |  |  |         add.l d0,d0
    9338:	|  |  |  |  |         add.l d0,d0
    933a:	|  |  |  |  |         adda.l d0,a0
    933c:	|  |  |  |  |         move.l (a0),d0
    933e:	|  |  |  |  |     ,-- bpl.s 9342 <loadSpriteBank+0x274>
    9340:	|  |  |  |  |     |   addq.l #7,d0
    9342:	|  |  |  |  |     '-> asr.l #3,d0
    9344:	|  |  |  |  |         move.l d0,d2
    9346:	|  |  |  |  |         movea.l 112(sp),a0
    934a:	|  |  |  |  |         movea.l 8(a0),a0
    934e:	|  |  |  |  |         move.l 100(sp),d1
    9352:	|  |  |  |  |         move.l d1,d0
    9354:	|  |  |  |  |         lsl.l #3,d0
    9356:	|  |  |  |  |         sub.l d1,d0
    9358:	|  |  |  |  |         add.l d0,d0
    935a:	|  |  |  |  |         add.l d0,d0
    935c:	|  |  |  |  |         adda.l d0,a0
    935e:	|  |  |  |  |         move.l 4(a0),d0
    9362:	|  |  |  |  |         move.l d0,d0
    9364:	|  |  |  |  |         move.w d2,d1
    9366:	|  |  |  |  |         muls.w d0,d1
    9368:	|  |  |  |  |         move.w d1,d0
    936a:	|  |  |  |  |         add.w d0,d0
    936c:	|  |  |  |  |         add.w d1,d0
    936e:	|  |  |  |  |         add.w d0,d0
    9370:	|  |  |  |  |         move.w d0,98(sp)
				break;
    9374:	|  |  |  +--|-------- bra.w 941e <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    9378:	|  |  |  |  '-------> movea.l 112(sp),a0
    937c:	|  |  |  |            movea.l 8(a0),a0
    9380:	|  |  |  |            move.l 100(sp),d1
    9384:	|  |  |  |            move.l d1,d0
    9386:	|  |  |  |            lsl.l #3,d0
    9388:	|  |  |  |            sub.l d1,d0
    938a:	|  |  |  |            add.l d0,d0
    938c:	|  |  |  |            add.l d0,d0
    938e:	|  |  |  |            adda.l d0,a0
    9390:	|  |  |  |            move.l (a0),d0
    9392:	|  |  |  |            andi.l #-2147483633,d0
    9398:	|  |  |  |        ,-- bpl.s 93a2 <loadSpriteBank+0x2d4>
    939a:	|  |  |  |        |   subq.l #1,d0
    939c:	|  |  |  |        |   moveq #-16,d1
    939e:	|  |  |  |        |   or.l d1,d0
    93a0:	|  |  |  |        |   addq.l #1,d0
    93a2:	|  |  |  |        '-> tst.l d0
    93a4:	|  |  |  |     ,----- ble.s 93aa <loadSpriteBank+0x2dc>
    93a6:	|  |  |  |     |      moveq #2,d0
    93a8:	|  |  |  |     |  ,-- bra.s 93ac <loadSpriteBank+0x2de>
    93aa:	|  |  |  |     '--|-> clr.w d0
    93ac:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    93b0:	|  |  |  |            movea.l 112(sp),a0
    93b4:	|  |  |  |            movea.l 8(a0),a0
    93b8:	|  |  |  |            move.l 100(sp),d1
    93bc:	|  |  |  |            move.l d1,d0
    93be:	|  |  |  |            lsl.l #3,d0
    93c0:	|  |  |  |            sub.l d1,d0
    93c2:	|  |  |  |            add.l d0,d0
    93c4:	|  |  |  |            add.l d0,d0
    93c6:	|  |  |  |            adda.l d0,a0
    93c8:	|  |  |  |            move.l (a0),d0
    93ca:	|  |  |  |            movea.l d0,a0
    93cc:	|  |  |  |            cmpa.w #0,a0
    93d0:	|  |  |  |        ,-- bge.s 93d6 <loadSpriteBank+0x308>
    93d2:	|  |  |  |        |   lea 15(a0),a0
    93d6:	|  |  |  |        '-> move.l a0,d0
    93d8:	|  |  |  |            asr.l #4,d0
    93da:	|  |  |  |            add.l d0,d0
    93dc:	|  |  |  |            move.l d0,d1
    93de:	|  |  |  |            moveq #0,d0
    93e0:	|  |  |  |            move.w 58(sp),d0
    93e4:	|  |  |  |            add.l d1,d0
    93e6:	|  |  |  |            move.l d0,d2
    93e8:	|  |  |  |            movea.l 112(sp),a0
    93ec:	|  |  |  |            movea.l 8(a0),a0
    93f0:	|  |  |  |            move.l 100(sp),d1
    93f4:	|  |  |  |            move.l d1,d0
    93f6:	|  |  |  |            lsl.l #3,d0
    93f8:	|  |  |  |            sub.l d1,d0
    93fa:	|  |  |  |            add.l d0,d0
    93fc:	|  |  |  |            add.l d0,d0
    93fe:	|  |  |  |            adda.l d0,a0
    9400:	|  |  |  |            move.l 4(a0),d0
    9404:	|  |  |  |            move.l d0,d0
    9406:	|  |  |  |            move.w d2,d1
    9408:	|  |  |  |            muls.w d0,d1
    940a:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    940e:	|  |  |  |            cmpi.w #100,98(sp)
    9414:	|  |  |  |        ,-- bls.s 941c <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    9416:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    941c:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    941e:	|  |  |  '----------> moveq #0,d0
    9420:	|  |  |               move.w 98(sp),d0
    9424:	|  |  |               add.l d0,d0
    9426:	|  |  |               move.l d0,52(sp)
    942a:	|  |  |               moveq #2,d0
    942c:	|  |  |               move.l d0,48(sp)
    9430:	|  |  |               move.l 1d188 <SysBase>,d0
    9436:	|  |  |               movea.l d0,a6
    9438:	|  |  |               move.l 52(sp),d0
    943c:	|  |  |               move.l 48(sp),d1
    9440:	|  |  |               jsr -684(a6)
    9444:	|  |  |               move.l d0,44(sp)
    9448:	|  |  |               movea.l 44(sp),a1
    944c:	|  |  |               movea.l 112(sp),a0
    9450:	|  |  |               movea.l 8(a0),a0
    9454:	|  |  |               move.l 100(sp),d1
    9458:	|  |  |               move.l d1,d0
    945a:	|  |  |               lsl.l #3,d0
    945c:	|  |  |               sub.l d1,d0
    945e:	|  |  |               add.l d0,d0
    9460:	|  |  |               add.l d0,d0
    9462:	|  |  |               adda.l d0,a0
    9464:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    9468:	|  |  |               move.l 1d170 <bigDataFile>,40(sp)
    9470:	|  |  |               movea.l 112(sp),a0
    9474:	|  |  |               movea.l 8(a0),a0
    9478:	|  |  |               move.l 100(sp),d1
    947c:	|  |  |               move.l d1,d0
    947e:	|  |  |               lsl.l #3,d0
    9480:	|  |  |               sub.l d1,d0
    9482:	|  |  |               add.l d0,d0
    9484:	|  |  |               add.l d0,d0
    9486:	|  |  |               adda.l d0,a0
    9488:	|  |  |               move.l 24(a0),36(sp)
    948e:	|  |  |               moveq #2,d1
    9490:	|  |  |               move.l d1,32(sp)
    9494:	|  |  |               move.w 98(sp),d0
    9498:	|  |  |               lsr.w #1,d0
    949a:	|  |  |               move.w d0,d0
    949c:	|  |  |               andi.l #65535,d0
    94a2:	|  |  |               move.l d0,28(sp)
    94a6:	|  |  |               move.l 1d190 <DOSBase>,d0
    94ac:	|  |  |               movea.l d0,a6
    94ae:	|  |  |               move.l 40(sp),d1
    94b2:	|  |  |               move.l 36(sp),d2
    94b6:	|  |  |               move.l 32(sp),d3
    94ba:	|  |  |               move.l 28(sp),d4
    94be:	|  |  |               jsr -324(a6)
    94c2:	|  |  |               move.l d0,24(sp)
    94c6:	|  |  |               move.l 24(sp),d0
    94ca:	|  |  |               move.w d0,22(sp)
		if (!count) {
    94ce:	|  |  |           ,-- bne.s 94e2 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    94d0:	|  |  |           |   pea 19858 <PutChar+0x147c>
    94d6:	|  |  |           |   jsr 1793a <KPrintF>
    94dc:	|  |  |           |   addq.l #4,sp
			return FALSE;
    94de:	|  |  |           |   clr.w d0
    94e0:	+--|--|-----------|-- bra.s 9508 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    94e2:	|  |  |           '-> addq.l #1,100(sp)
    94e6:	|  |  '-------------> move.l 100(sp),d0
    94ea:	|  |                  cmp.l 74(sp),d0
    94ee:	|  '----------------- blt.w 9212 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    94f2:	|                     jsr 7c66 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    94f8:	|                     pea 1988b <PutChar+0x14af>
    94fe:	|                     jsr 1793a <KPrintF>
    9504:	|                     addq.l #4,sp
	return TRUE;
    9506:	|                     moveq #1,d0
}
    9508:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    950c:	                      lea 84(sp),sp
    9510:	                      rts

00009512 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    9512:	                   lea -16(sp),sp
    9516:	                   move.l d2,-(sp)
    9518:	                   move.l 32(sp),d0
    951c:	                   move.w d0,d0
    951e:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    9522:	                   movea.l 28(sp),a0
    9526:	                   move.l (a0),d2
    9528:	                   movea.l 24(sp),a0
    952c:	                   move.l 8(a0),d0
    9530:	                   move.l d0,-(sp)
    9532:	                   jsr 17d6c <__floatsisf>
    9538:	                   addq.l #4,sp
    953a:	                   move.l d0,-(sp)
    953c:	                   move.l d2,-(sp)
    953e:	                   jsr 18060 <__subsf3>
    9544:	                   addq.l #8,sp
    9546:	                   move.l d0,-(sp)
    9548:	                   jsr 17d04 <__fixsfsi>
    954e:	                   addq.l #4,sp
    9550:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    9554:	                   movea.l 28(sp),a0
    9558:	                   move.l 4(a0),d2
    955c:	                   movea.l 24(sp),a0
    9560:	                   move.l 12(a0),d0
    9564:	                   move.l d0,-(sp)
    9566:	                   jsr 17d6c <__floatsisf>
    956c:	                   addq.l #4,sp
    956e:	                   move.l d0,-(sp)
    9570:	                   move.l d2,-(sp)
    9572:	                   jsr 18060 <__subsf3>
    9578:	                   addq.l #8,sp
    957a:	                   move.l d0,-(sp)
    957c:	                   jsr 17d04 <__fixsfsi>
    9582:	                   addq.l #4,sp
    9584:	                   move.w d0,8(sp)

	if( x < 0)
    9588:	                   tst.w 18(sp)
    958c:	               ,-- bge.s 95c0 <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    958e:	               |   movea.l 28(sp),a0
    9592:	               |   move.l (a0),d2
    9594:	               |   movea.l 24(sp),a0
    9598:	               |   move.l 8(a0),d0
    959c:	               |   move.l d0,-(sp)
    959e:	               |   jsr 17d6c <__floatsisf>
    95a4:	               |   addq.l #4,sp
    95a6:	               |   move.l d0,-(sp)
    95a8:	               |   move.l d2,-(sp)
    95aa:	               |   jsr 18060 <__subsf3>
    95b0:	               |   addq.l #8,sp
    95b2:	               |   move.l d0,-(sp)
    95b4:	               |   jsr 17d04 <__fixsfsi>
    95ba:	               |   addq.l #4,sp
    95bc:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    95c0:	               '-> movea.w 8(sp),a1
    95c4:	                   movea.w 18(sp),a0
    95c8:	                   pea 1 <_start+0x1>
    95cc:	                   move.l a1,-(sp)
    95ce:	                   move.l a0,-(sp)
    95d0:	                   move.l 40(sp),-(sp)
    95d4:	                   move.l 40(sp),-(sp)
    95d8:	                   jsr 3120 <CstScaleSprite>
    95de:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    95e2:	                   movea.l 28(sp),a0
    95e6:	                   move.l 118(a0),d0
    95ea:	                   moveq #8,d1
    95ec:	                   and.l d1,d0
    95ee:	   ,-------------- beq.w 96ba <scaleSprite+0x1a8>
		if (single->xhot < 0)
    95f2:	   |               movea.l 24(sp),a0
    95f6:	   |               move.l 8(a0),d0
    95fa:	   |  ,----------- bpl.s 9636 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    95fc:	   |  |            move.w 18(sp),d0
    9600:	   |  |            tst.w 6(sp)
    9604:	   |  |     ,----- beq.s 961e <scaleSprite+0x10c>
    9606:	   |  |     |      movea.l 24(sp),a0
    960a:	   |  |     |      move.l (a0),d1
    960c:	   |  |     |      move.l d1,d2
    960e:	   |  |     |      movea.l 24(sp),a0
    9612:	   |  |     |      move.l 8(a0),d1
    9616:	   |  |     |      move.l d1,d1
    9618:	   |  |     |      movea.w d2,a0
    961a:	   |  |     |      suba.w d1,a0
    961c:	   |  |     |  ,-- bra.s 962c <scaleSprite+0x11a>
    961e:	   |  |     '--|-> movea.l 24(sp),a0
    9622:	   |  |        |   move.l 8(a0),d1
    9626:	   |  |        |   move.l d1,d1
    9628:	   |  |        |   movea.w d1,a0
    962a:	   |  |        |   addq.w #1,a0
    962c:	   |  |        '-> move.w d0,d1
    962e:	   |  |            sub.w a0,d1
    9630:	   |  |            move.w d1,16(sp)
    9634:	   |  |  ,-------- bra.s 966e <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9636:	   |  '--|-------> move.w 18(sp),d1
    963a:	   |     |         tst.w 6(sp)
    963e:	   |     |  ,----- beq.s 965c <scaleSprite+0x14a>
    9640:	   |     |  |      movea.l 24(sp),a0
    9644:	   |     |  |      move.l (a0),d0
    9646:	   |     |  |      move.l d0,d2
    9648:	   |     |  |      movea.l 24(sp),a0
    964c:	   |     |  |      move.l 8(a0),d0
    9650:	   |     |  |      move.l d0,d0
    9652:	   |     |  |      movea.w d2,a0
    9654:	   |     |  |      suba.w d0,a0
    9656:	   |     |  |      move.w a0,d0
    9658:	   |     |  |      subq.w #1,d0
    965a:	   |     |  |  ,-- bra.s 9666 <scaleSprite+0x154>
    965c:	   |     |  '--|-> movea.l 24(sp),a0
    9660:	   |     |     |   move.l 8(a0),d0
    9664:	   |     |     |   move.l d0,d0
    9666:	   |     |     '-> movea.w d1,a0
    9668:	   |     |         suba.w d0,a0
    966a:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    966e:	   |     '-------> movea.l 28(sp),a0
    9672:	   |               move.l 24(a0),d0
    9676:	   |               move.l d0,d1
    9678:	   |               movea.l 24(sp),a0
    967c:	   |               move.l 12(a0),d0
    9680:	   |               move.l d0,d0
    9682:	   |               sub.w d0,d1
    9684:	   |               move.w 8(sp),d0
    9688:	   |               movea.w d1,a0
    968a:	   |               adda.w d0,a0
    968c:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    9690:	   |               movea.l 24(sp),a0
    9694:	   |               move.l (a0),d0
    9696:	   |               move.l d0,d0
    9698:	   |               move.w 16(sp),d1
    969c:	   |               add.w d0,d1
    969e:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    96a2:	   |               movea.l 24(sp),a0
    96a6:	   |               move.l 4(a0),d0
    96aa:	   |               move.l d0,d0
    96ac:	   |               movea.w 14(sp),a0
    96b0:	   |               adda.w d0,a0
    96b2:	   |               move.w a0,10(sp)
    96b6:	,--|-------------- bra.w 97a2 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    96ba:	|  '-------------> move.w 18(sp),d1
    96be:	|                  move.l 1d23e <cameraX>,d0
    96c4:	|                  move.l d0,d0
    96c6:	|                  sub.w d0,d1
    96c8:	|                  move.w d1,18(sp)
		y -= cameraY;
    96cc:	|                  move.w 8(sp),d1
    96d0:	|                  move.l 1d242 <cameraY>,d0
    96d6:	|                  move.l d0,d0
    96d8:	|                  sub.w d0,d1
    96da:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    96de:	|                  movea.l 24(sp),a0
    96e2:	|                  move.l 8(a0),d0
    96e6:	|     ,----------- bpl.s 9722 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    96e8:	|     |            move.w 18(sp),d0
    96ec:	|     |            tst.w 6(sp)
    96f0:	|     |     ,----- beq.s 970a <scaleSprite+0x1f8>
    96f2:	|     |     |      movea.l 24(sp),a0
    96f6:	|     |     |      move.l (a0),d1
    96f8:	|     |     |      move.l d1,d2
    96fa:	|     |     |      movea.l 24(sp),a0
    96fe:	|     |     |      move.l 8(a0),d1
    9702:	|     |     |      move.l d1,d1
    9704:	|     |     |      movea.w d2,a0
    9706:	|     |     |      suba.w d1,a0
    9708:	|     |     |  ,-- bra.s 9718 <scaleSprite+0x206>
    970a:	|     |     '--|-> movea.l 24(sp),a0
    970e:	|     |        |   move.l 8(a0),d1
    9712:	|     |        |   move.l d1,d1
    9714:	|     |        |   movea.w d1,a0
    9716:	|     |        |   addq.w #1,a0
    9718:	|     |        '-> move.w d0,d1
    971a:	|     |            sub.w a0,d1
    971c:	|     |            move.w d1,16(sp)
    9720:	|     |  ,-------- bra.s 975a <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9722:	|     '--|-------> move.w 18(sp),d1
    9726:	|        |         tst.w 6(sp)
    972a:	|        |  ,----- beq.s 9748 <scaleSprite+0x236>
    972c:	|        |  |      movea.l 24(sp),a0
    9730:	|        |  |      move.l (a0),d0
    9732:	|        |  |      move.l d0,d2
    9734:	|        |  |      movea.l 24(sp),a0
    9738:	|        |  |      move.l 8(a0),d0
    973c:	|        |  |      move.l d0,d0
    973e:	|        |  |      movea.w d2,a0
    9740:	|        |  |      suba.w d0,a0
    9742:	|        |  |      move.w a0,d0
    9744:	|        |  |      subq.w #1,d0
    9746:	|        |  |  ,-- bra.s 9752 <scaleSprite+0x240>
    9748:	|        |  '--|-> movea.l 24(sp),a0
    974c:	|        |     |   move.l 8(a0),d0
    9750:	|        |     |   move.l d0,d0
    9752:	|        |     '-> movea.w d1,a0
    9754:	|        |         suba.w d0,a0
    9756:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    975a:	|        '-------> movea.l 28(sp),a0
    975e:	|                  move.l 24(a0),d0
    9762:	|                  move.l d0,d1
    9764:	|                  movea.l 24(sp),a0
    9768:	|                  move.l 12(a0),d0
    976c:	|                  move.l d0,d0
    976e:	|                  sub.w d0,d1
    9770:	|                  move.w 8(sp),d0
    9774:	|                  movea.w d1,a0
    9776:	|                  adda.w d0,a0
    9778:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    977c:	|                  movea.l 24(sp),a0
    9780:	|                  move.l (a0),d0
    9782:	|                  move.l d0,d0
    9784:	|                  move.w 16(sp),d1
    9788:	|                  add.w d0,d1
    978a:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    978e:	|                  movea.l 24(sp),a0
    9792:	|                  move.l 4(a0),d0
    9796:	|                  move.l d0,d0
    9798:	|                  movea.w 14(sp),a0
    979c:	|                  adda.w d0,a0
    979e:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    97a2:	'----------------> move.l 1d144 <input+0xa>,d1
    97a8:	                   moveq #0,d0
    97aa:	                   move.w 16(sp),d0
    97ae:	                   cmp.l d1,d0
    97b0:	            ,----- bgt.s 97e6 <scaleSprite+0x2d4>
    97b2:	            |      move.l 1d144 <input+0xa>,d1
    97b8:	            |      moveq #0,d0
    97ba:	            |      move.w 12(sp),d0
    97be:	            |      cmp.l d1,d0
    97c0:	            +----- blt.s 97e6 <scaleSprite+0x2d4>
    97c2:	            |      move.l 1d148 <input+0xe>,d1
    97c8:	            |      moveq #0,d0
    97ca:	            |      move.w 14(sp),d0
    97ce:	            |      cmp.l d1,d0
    97d0:	            +----- bgt.s 97e6 <scaleSprite+0x2d4>
    97d2:	            |      move.l 1d148 <input+0xe>,d1
    97d8:	            |      moveq #0,d0
    97da:	            |      move.w 10(sp),d0
    97de:	            |      cmp.l d1,d0
    97e0:	            +----- blt.s 97e6 <scaleSprite+0x2d4>
		return TRUE;
    97e2:	            |      moveq #1,d0
    97e4:	            |  ,-- bra.s 97e8 <scaleSprite+0x2d6>
	}
	return FALSE;
    97e6:	            '--|-> clr.w d0
    97e8:	               '-> move.l (sp)+,d2
    97ea:	                   lea 16(sp),sp
    97ee:	                   rts

000097f0 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    97f0:	    move.l 4(sp),d0
    97f4:	,-- bpl.s 97f8 <TF_abs+0x8>
    97f6:	|   neg.l d0
}
    97f8:	'-> rts

000097fa <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    97fa:	             lea -28(sp),sp
    97fe:	             move.l a6,-(sp)
    9800:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9802:	             move.l #132,28(sp)
    980a:	             clr.l 24(sp)
    980e:	             move.l 1d188 <SysBase>,d0
    9814:	             movea.l d0,a6
    9816:	             move.l 28(sp),d0
    981a:	             move.l 24(sp),d1
    981e:	             jsr -684(a6)
    9822:	             move.l d0,20(sp)
    9826:	             move.l 20(sp),d0
    982a:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    982e:	         ,-- bne.s 9836 <addPerson+0x3c>
    9830:	         |   clr.w d0
    9832:	,--------|-- bra.w 9a66 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    9836:	|        '-> move.l 48(sp),-(sp)
    983a:	|            jsr dc5e <loadObjectType>
    9840:	|            addq.l #4,sp
    9842:	|            movea.l 16(sp),a0
    9846:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    984a:	|            movea.l 16(sp),a0
    984e:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    9856:	|            movea.l 16(sp),a0
    985a:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    985e:	|            movea.l 16(sp),a0
    9862:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    9866:	|            move.l 44(sp),-(sp)
    986a:	|            jsr 17d6c <__floatsisf>
    9870:	|            addq.l #4,sp
    9872:	|            move.l d0,d2
    9874:	|            move.l 40(sp),-(sp)
    9878:	|            jsr 17d6c <__floatsisf>
    987e:	|            addq.l #4,sp
    9880:	|            move.l d2,-(sp)
    9882:	|            move.l d0,-(sp)
    9884:	|            move.l 24(sp),-(sp)
    9888:	|            jsr b3aa <moveAndScale>
    988e:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9892:	|            movea.l 16(sp),a0
    9896:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    989a:	|            movea.l 16(sp),a0
    989e:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    98a4:	|            movea.l 16(sp),a0
    98a8:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    98ae:	|            movea.l 16(sp),a0
    98b2:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    98b6:	|            movea.l 16(sp),a0
    98ba:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    98be:	|            movea.l 16(sp),a0
    98c2:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    98c8:	|            movea.l 16(sp),a0
    98cc:	|            clr.l 106(a0)
    newPerson->angle = 180;
    98d0:	|            movea.l 16(sp),a0
    98d4:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    98dc:	|            movea.l 16(sp),a0
    98e0:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    98e8:	|            movea.l 16(sp),a0
    98ec:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    98f0:	|            movea.l 16(sp),a0
    98f4:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    98f8:	|            movea.l 16(sp),a0
    98fc:	|            movea.l 114(a0),a0
    9900:	|            move.l 24(a0),d0
    9904:	|            movea.l 16(sp),a0
    9908:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    990c:	|            movea.l 16(sp),a0
    9910:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9914:	|            movea.l 16(sp),a0
    9918:	|            movea.l 114(a0),a0
    991c:	|            move.l 32(a0),d0
    9920:	|            movea.l 16(sp),a0
    9924:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9928:	|            movea.l 16(sp),a0
    992c:	|            clr.b 126(a0)
    newPerson->g = 0;
    9930:	|            movea.l 16(sp),a0
    9934:	|            clr.b 127(a0)
    newPerson->b = 0;
    9938:	|            movea.l 16(sp),a0
    993c:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    9940:	|            movea.l 16(sp),a0
    9944:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    9948:	|            movea.l 16(sp),a0
    994c:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    9950:	|            movea.l 16(sp),a0
    9954:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    995a:	|            clr.l -(sp)
    995c:	|            move.l 20(sp),-(sp)
    9960:	|            jsr 479c <setFrames>
    9966:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    9968:	|            movea.l 52(sp),a0
    996c:	|            movea.l (a0),a0
    996e:	|            movea.l (a0),a0
    9970:	|            movea.l 4(a0),a0
    9974:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    9978:	|     ,----- bpl.s 9982 <addPerson+0x188>
    997a:	|     |      move.l 12(sp),d0
    997e:	|     |      neg.l d0
    9980:	|     |  ,-- bra.s 9984 <addPerson+0x18a>
    9982:	|     '--|-> moveq #1,d0
    9984:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    9988:	|            movea.l 52(sp),a0
    998c:	|            movea.l (a0),a0
    998e:	|            movea.l (a0),a0
    9990:	|            movea.l (a0),a0
    9992:	|            move.l 8(a0),d0
    9996:	|            cmp.l 8(sp),d0
    999a:	|     ,----- bgt.s 99cc <addPerson+0x1d2>
        if (fNumSigned < 0) {
    999c:	|     |      tst.l 12(sp)
    99a0:	|     |  ,-- bge.s 99ae <addPerson+0x1b4>
            newPerson->height = 5;
    99a2:	|     |  |   movea.l 16(sp),a0
    99a6:	|     |  |   moveq #5,d0
    99a8:	|     |  |   move.l d0,20(a0)
    99ac:	|  ,--|--|-- bra.s 99f8 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    99ae:	|  |  |  '-> movea.l 52(sp),a0
    99b2:	|  |  |      movea.l (a0),a0
    99b4:	|  |  |      movea.l (a0),a0
    99b6:	|  |  |      movea.l (a0),a0
    99b8:	|  |  |      movea.l 16(a0),a0
    99bc:	|  |  |      move.l 12(a0),d0
    99c0:	|  |  |      addq.l #5,d0
    99c2:	|  |  |      movea.l 16(sp),a0
    99c6:	|  |  |      move.l d0,20(a0)
    99ca:	|  +--|----- bra.s 99f8 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    99cc:	|  |  '----> movea.l 52(sp),a0
    99d0:	|  |         movea.l (a0),a0
    99d2:	|  |         movea.l (a0),a0
    99d4:	|  |         movea.l (a0),a0
    99d6:	|  |         movea.l 16(a0),a0
    99da:	|  |         move.l 8(sp),d1
    99de:	|  |         move.l d1,d0
    99e0:	|  |         lsl.l #3,d0
    99e2:	|  |         sub.l d1,d0
    99e4:	|  |         add.l d0,d0
    99e6:	|  |         add.l d0,d0
    99e8:	|  |         adda.l d0,a0
    99ea:	|  |         move.l 12(a0),d0
    99ee:	|  |         addq.l #5,d0
    99f0:	|  |         movea.l 16(sp),a0
    99f4:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    99f8:	|  '-------> move.l #119272,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9a00:	|        ,-- bra.s 9a10 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9a02:	|     ,--|-> movea.l 32(sp),a0
    9a06:	|     |  |   move.l (a0),d0
    9a08:	|     |  |   moveq #36,d1
    9a0a:	|     |  |   add.l d0,d1
    9a0c:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9a10:	|     |  '-> movea.l 32(sp),a0
    9a14:	|     |      move.l (a0),d0
    9a16:	|     |  ,-- beq.s 9a3e <addPerson+0x244>
    9a18:	|     |  |   movea.l 32(sp),a0
    9a1c:	|     |  |   movea.l (a0),a0
    9a1e:	|     |  |   move.l 4(a0),d2
    9a22:	|     |  |   move.l 44(sp),-(sp)
    9a26:	|     |  |   jsr 17d6c <__floatsisf>
    9a2c:	|     |  |   addq.l #4,sp
    9a2e:	|     |  |   move.l d0,-(sp)
    9a30:	|     |  |   move.l d2,-(sp)
    9a32:	|     |  |   jsr 17f92 <__ltsf2>
    9a38:	|     |  |   addq.l #8,sp
    9a3a:	|     |  |   tst.l d0
    9a3c:	|     '--|-- blt.s 9a02 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    9a3e:	|        '-> movea.l 32(sp),a0
    9a42:	|            move.l (a0),d0
    9a44:	|            movea.l 16(sp),a0
    9a48:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    9a4c:	|            movea.l 32(sp),a0
    9a50:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    9a54:	|            movea.l 16(sp),a0
    9a58:	|            move.l 114(a0),d0
    9a5c:	|            sne d0
    9a5e:	|            neg.b d0
    9a60:	|            move.b d0,d0
    9a62:	|            andi.w #255,d0
}
    9a66:	'----------> move.l (sp)+,d2
    9a68:	             movea.l (sp)+,a6
    9a6a:	             lea 28(sp),sp
    9a6e:	             rts

00009a70 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    9a70:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9a72:	       move.l 8(sp),-(sp)
    9a76:	       jsr ac00 <findPerson>
    9a7c:	       addq.l #4,sp
    9a7e:	       move.l d0,(sp)
    if (moveMe) {
    9a80:	,----- beq.s 9ab4 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    9a82:	|      movea.l (sp),a0
    9a84:	|      move.l 68(a0),d0
    9a88:	|  ,-- beq.s 9a9a <animatePerson+0x2a>
    9a8a:	|  |   movea.l (sp),a0
    9a8c:	|  |   move.l 68(a0),d0
    9a90:	|  |   move.l d0,-(sp)
    9a92:	|  |   jsr 55fa <abortFunction>
    9a98:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    9a9a:	|  '-> movea.l (sp),a0
    9a9c:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    9aa0:	|      movea.l (sp),a0
    9aa2:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9aa6:	|      movea.l (sp),a0
    9aa8:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    9aac:	|      movea.l (sp),a0
    9aae:	|      move.l 12(sp),72(a0)
    }
}
    9ab4:	'----> nop
    9ab6:	       addq.l #4,sp
    9ab8:	       rts

00009aba <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    9aba:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9abc:	       move.l 8(sp),-(sp)
    9ac0:	       jsr ac00 <findPerson>
    9ac6:	       addq.l #4,sp
    9ac8:	       move.l d0,(sp)
    if (moveMe) {
    9aca:	,----- beq.s 9b0c <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9acc:	|      movea.l (sp),a0
    9ace:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9ad2:	|      movea.l (sp),a0
    9ad4:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9ada:	|      move.l (sp),-(sp)
    9adc:	|      jsr b538 <rethinkAngle>
    9ae2:	|      addq.l #4,sp
        if (moveMe->walking) {
    9ae4:	|      movea.l (sp),a0
    9ae6:	|      move.w 64(a0),d0
    9aea:	|  ,-- beq.s 9afe <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9aec:	|  |   pea 1 <_start+0x1>
    9af0:	|  |   move.l 4(sp),-(sp)
    9af4:	|  |   jsr 479c <setFrames>
    9afa:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9afc:	+--|-- bra.s 9b0c <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9afe:	|  '-> clr.l -(sp)
    9b00:	|      move.l 4(sp),-(sp)
    9b04:	|      jsr 479c <setFrames>
    9b0a:	|      addq.l #8,sp
}
    9b0c:	'----> nop
    9b0e:	       addq.l #4,sp
    9b10:	       rts

00009b12 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9b12:	             lea -36(sp),sp
    9b16:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9b18:	             movea.l 44(sp),a0
    9b1c:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9b22:	             moveq #12,d0
    9b24:	             move.l d0,28(sp)
    9b28:	             clr.l 24(sp)
    9b2c:	             move.l 1d188 <SysBase>,d0
    9b32:	             movea.l d0,a6
    9b34:	             move.l 28(sp),d0
    9b38:	             move.l 24(sp),d1
    9b3c:	             jsr -684(a6)
    9b40:	             move.l d0,20(sp)
    9b44:	             move.l 20(sp),d0
    9b48:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9b4c:	         ,-- bne.s 9b62 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9b4e:	         |   pea 198a5 <PutChar+0x14c9>
    9b54:	         |   jsr 1793a <KPrintF>
    9b5a:	         |   addq.l #4,sp
		return NULL;
    9b5c:	         |   moveq #0,d0
    9b5e:	,--------|-- bra.w 9cb4 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9b62:	|        '-> movea.l 44(sp),a0
    9b66:	|            move.l (a0),d0
    9b68:	|            movea.l 16(sp),a0
    9b6c:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    9b6e:	|            movea.l 16(sp),a0
    9b72:	|            movea.l (a0),a0
    9b74:	|            move.l 4(a0),d0
    9b78:	|            addq.l #1,d0
    9b7a:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    9b7e:	|            movea.l 16(sp),a0
    9b82:	|            move.l 32(sp),8(a0)

	if (num) {
    9b88:	|  ,-------- beq.w 9ca8 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    9b8c:	|  |         move.l 32(sp),d1
    9b90:	|  |         move.l d1,d0
    9b92:	|  |         add.l d0,d0
    9b94:	|  |         add.l d1,d0
    9b96:	|  |         add.l d0,d0
    9b98:	|  |         add.l d0,d0
    9b9a:	|  |         move.l d0,12(sp)
    9b9e:	|  |         clr.l 8(sp)
    9ba2:	|  |         move.l 1d188 <SysBase>,d0
    9ba8:	|  |         movea.l d0,a6
    9baa:	|  |         move.l 12(sp),d0
    9bae:	|  |         move.l 8(sp),d1
    9bb2:	|  |         jsr -684(a6)
    9bb6:	|  |         move.l d0,4(sp)
    9bba:	|  |         move.l 4(sp),d0
    9bbe:	|  |         movea.l 16(sp),a0
    9bc2:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    9bc6:	|  |         movea.l 16(sp),a0
    9bca:	|  |         move.l 4(a0),d0
    9bce:	|  |     ,-- bne.s 9be4 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9bd0:	|  |     |   pea 198a5 <PutChar+0x14c9>
    9bd6:	|  |     |   jsr 1793a <KPrintF>
    9bdc:	|  |     |   addq.l #4,sp
			return NULL;
    9bde:	|  |     |   moveq #0,d0
    9be0:	+--|-----|-- bra.w 9cb4 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9be4:	|  |     '-> clr.l 36(sp)
    9be8:	|  |     ,-- bra.w 9c9a <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9bec:	|  |  ,--|-> movea.l 44(sp),a0
    9bf0:	|  |  |  |   movea.l 4(a0),a0
    9bf4:	|  |  |  |   move.l 36(sp),d1
    9bf8:	|  |  |  |   move.l d1,d0
    9bfa:	|  |  |  |   add.l d0,d0
    9bfc:	|  |  |  |   add.l d1,d0
    9bfe:	|  |  |  |   add.l d0,d0
    9c00:	|  |  |  |   add.l d0,d0
    9c02:	|  |  |  |   lea (0,a0,d0.l),a1
    9c06:	|  |  |  |   movea.l 16(sp),a0
    9c0a:	|  |  |  |   movea.l 4(a0),a0
    9c0e:	|  |  |  |   move.l 36(sp),d1
    9c12:	|  |  |  |   move.l d1,d0
    9c14:	|  |  |  |   add.l d0,d0
    9c16:	|  |  |  |   add.l d1,d0
    9c18:	|  |  |  |   add.l d0,d0
    9c1a:	|  |  |  |   add.l d0,d0
    9c1c:	|  |  |  |   adda.l d0,a0
    9c1e:	|  |  |  |   move.l (a1),d0
    9c20:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9c22:	|  |  |  |   movea.l 44(sp),a0
    9c26:	|  |  |  |   movea.l 4(a0),a0
    9c2a:	|  |  |  |   move.l 36(sp),d1
    9c2e:	|  |  |  |   move.l d1,d0
    9c30:	|  |  |  |   add.l d0,d0
    9c32:	|  |  |  |   add.l d1,d0
    9c34:	|  |  |  |   add.l d0,d0
    9c36:	|  |  |  |   add.l d0,d0
    9c38:	|  |  |  |   lea (0,a0,d0.l),a1
    9c3c:	|  |  |  |   movea.l 16(sp),a0
    9c40:	|  |  |  |   movea.l 4(a0),a0
    9c44:	|  |  |  |   move.l 36(sp),d1
    9c48:	|  |  |  |   move.l d1,d0
    9c4a:	|  |  |  |   add.l d0,d0
    9c4c:	|  |  |  |   add.l d1,d0
    9c4e:	|  |  |  |   add.l d0,d0
    9c50:	|  |  |  |   add.l d0,d0
    9c52:	|  |  |  |   adda.l d0,a0
    9c54:	|  |  |  |   move.l 4(a1),d0
    9c58:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    9c5c:	|  |  |  |   movea.l 44(sp),a0
    9c60:	|  |  |  |   movea.l 4(a0),a0
    9c64:	|  |  |  |   move.l 36(sp),d1
    9c68:	|  |  |  |   move.l d1,d0
    9c6a:	|  |  |  |   add.l d0,d0
    9c6c:	|  |  |  |   add.l d1,d0
    9c6e:	|  |  |  |   add.l d0,d0
    9c70:	|  |  |  |   add.l d0,d0
    9c72:	|  |  |  |   lea (0,a0,d0.l),a1
    9c76:	|  |  |  |   movea.l 16(sp),a0
    9c7a:	|  |  |  |   movea.l 4(a0),a0
    9c7e:	|  |  |  |   move.l 36(sp),d1
    9c82:	|  |  |  |   move.l d1,d0
    9c84:	|  |  |  |   add.l d0,d0
    9c86:	|  |  |  |   add.l d1,d0
    9c88:	|  |  |  |   add.l d0,d0
    9c8a:	|  |  |  |   add.l d0,d0
    9c8c:	|  |  |  |   adda.l d0,a0
    9c8e:	|  |  |  |   move.l 8(a1),d0
    9c92:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    9c96:	|  |  |  |   addq.l #1,36(sp)
    9c9a:	|  |  |  '-> move.l 36(sp),d0
    9c9e:	|  |  |      cmp.l 32(sp),d0
    9ca2:	|  |  '----- blt.w 9bec <copyAnim+0xda>
    9ca6:	|  |     ,-- bra.s 9cb0 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    9ca8:	|  '-----|-> movea.l 16(sp),a0
    9cac:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9cb0:	|        '-> move.l 16(sp),d0
}
    9cb4:	'----------> movea.l (sp)+,a6
    9cb6:	             lea 36(sp),sp
    9cba:	             rts

00009cbc <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9cbc:	                lea -44(sp),sp
    9cc0:	                move.l a6,-(sp)
    9cc2:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9cc4:	                moveq #12,d0
    9cc6:	                move.l d0,40(sp)
    9cca:	                clr.l 36(sp)
    9cce:	                move.l 1d188 <SysBase>,d0
    9cd4:	                movea.l d0,a6
    9cd6:	                move.l 40(sp),d0
    9cda:	                move.l 36(sp),d1
    9cde:	                jsr -684(a6)
    9ce2:	                move.l d0,32(sp)
    9ce6:	                move.l 32(sp),d0
    9cea:	                move.l d0,28(sp)
	if( !newP) {
    9cee:	            ,-- bne.s 9d04 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9cf0:	            |   pea 198c6 <PutChar+0x14ea>
    9cf6:	            |   jsr 1793a <KPrintF>
    9cfc:	            |   addq.l #4,sp
		return NULL;
    9cfe:	            |   moveq #0,d0
    9d00:	,-----------|-- bra.w 9ed4 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9d04:	|           '-> movea.l 28(sp),a0
    9d08:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9d0e:	|               move.l 56(sp),d1
    9d12:	|               move.l d1,d0
    9d14:	|               add.l d0,d0
    9d16:	|               add.l d1,d0
    9d18:	|               add.l d0,d0
    9d1a:	|               add.l d0,d0
    9d1c:	|               move.l d0,24(sp)
    9d20:	|               clr.l 20(sp)
    9d24:	|               move.l 1d188 <SysBase>,d0
    9d2a:	|               movea.l d0,a6
    9d2c:	|               move.l 24(sp),d0
    9d30:	|               move.l 20(sp),d1
    9d34:	|               jsr -684(a6)
    9d38:	|               move.l d0,16(sp)
    9d3c:	|               move.l 16(sp),d0
    9d40:	|               movea.l 28(sp),a0
    9d44:	|               move.l d0,4(a0)
	if( !newP->frames) {
    9d48:	|               movea.l 28(sp),a0
    9d4c:	|               move.l 4(a0),d0
    9d50:	|           ,-- bne.s 9d66 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9d52:	|           |   pea 198c6 <PutChar+0x14ea>
    9d58:	|           |   jsr 1793a <KPrintF>
    9d5e:	|           |   addq.l #4,sp
		return NULL;
    9d60:	|           |   moveq #0,d0
    9d62:	+-----------|-- bra.w 9ed4 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    9d66:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    9d6c:	|               movea.l 60(sp),a0
    9d70:	|               move.l (a0),44(sp)
	while (a) {
    9d74:	|     ,-------- bra.w 9ec8 <createPersonaAnim+0x20c>
		a --;
    9d78:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    9d7c:	|  |  |         movea.l 28(sp),a0
    9d80:	|  |  |         movea.l 4(a0),a0
    9d84:	|  |  |         move.l 48(sp),d1
    9d88:	|  |  |         move.l d1,d0
    9d8a:	|  |  |         add.l d0,d0
    9d8c:	|  |  |         add.l d1,d0
    9d8e:	|  |  |         add.l d0,d0
    9d90:	|  |  |         add.l d0,d0
    9d92:	|  |  |         adda.l d0,a0
    9d94:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    9d98:	|  |  |         movea.l 44(sp),a0
    9d9c:	|  |  |         move.l (a0),d0
    9d9e:	|  |  |         moveq #5,d1
    9da0:	|  |  |         cmp.l d0,d1
    9da2:	|  |  |     ,-- bne.s 9dce <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9da4:	|  |  |     |   movea.l 28(sp),a0
    9da8:	|  |  |     |   movea.l 4(a0),a0
    9dac:	|  |  |     |   move.l 48(sp),d1
    9db0:	|  |  |     |   move.l d1,d0
    9db2:	|  |  |     |   add.l d0,d0
    9db4:	|  |  |     |   add.l d1,d0
    9db6:	|  |  |     |   add.l d0,d0
    9db8:	|  |  |     |   add.l d0,d0
    9dba:	|  |  |     |   lea (0,a0,d0.l),a1
    9dbe:	|  |  |     |   movea.l 44(sp),a0
    9dc2:	|  |  |     |   move.l 4(a0),d0
    9dc6:	|  |  |     |   move.l d0,8(a1)
    9dca:	|  |  |  ,--|-- bra.w 9e76 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9dce:	|  |  |  |  '-> movea.l 44(sp),a0
    9dd2:	|  |  |  |      move.l (a0),d0
    9dd4:	|  |  |  |      moveq #2,d1
    9dd6:	|  |  |  |      cmp.l d0,d1
    9dd8:	|  |  |  |  ,-- bne.s 9e04 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9dda:	|  |  |  |  |   movea.l 44(sp),a0
    9dde:	|  |  |  |  |   move.l 4(a0),d2
    9de2:	|  |  |  |  |   movea.l 28(sp),a0
    9de6:	|  |  |  |  |   movea.l 4(a0),a0
    9dea:	|  |  |  |  |   move.l 48(sp),d1
    9dee:	|  |  |  |  |   move.l d1,d0
    9df0:	|  |  |  |  |   add.l d0,d0
    9df2:	|  |  |  |  |   add.l d1,d0
    9df4:	|  |  |  |  |   add.l d0,d0
    9df6:	|  |  |  |  |   add.l d0,d0
    9df8:	|  |  |  |  |   adda.l d0,a0
    9dfa:	|  |  |  |  |   move.l d2,d0
    9dfc:	|  |  |  |  |   neg.l d0
    9dfe:	|  |  |  |  |   move.l d0,8(a0)
    9e02:	|  |  |  +--|-- bra.s 9e76 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9e04:	|  |  |  |  '-> movea.l 44(sp),a0
    9e08:	|  |  |  |      move.l (a0),d0
    9e0a:	|  |  |  |      moveq #6,d1
    9e0c:	|  |  |  |      cmp.l d0,d1
    9e0e:	|  |  |  |  ,-- bne.s 9e56 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9e10:	|  |  |  |  |   movea.l 44(sp),a0
    9e14:	|  |  |  |  |   movea.l 4(a0),a0
    9e18:	|  |  |  |  |   move.l (a0),d0
    9e1a:	|  |  |  |  |   move.l d0,-(sp)
    9e1c:	|  |  |  |  |   pea 1 <_start+0x1>
    9e20:	|  |  |  |  |   lea 20(sp),a0
    9e24:	|  |  |  |  |   move.l a0,-(sp)
    9e26:	|  |  |  |  |   jsr 14e5a <getValueType>
    9e2c:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9e30:	|  |  |  |  |   movea.l 44(sp),a0
    9e34:	|  |  |  |  |   movea.l 4(a0),a0
    9e38:	|  |  |  |  |   movea.l (a0),a0
    9e3a:	|  |  |  |  |   move.l 8(a0),d0
    9e3e:	|  |  |  |  |   move.l d0,-(sp)
    9e40:	|  |  |  |  |   pea 1 <_start+0x1>
    9e44:	|  |  |  |  |   lea 16(sp),a0
    9e48:	|  |  |  |  |   move.l a0,-(sp)
    9e4a:	|  |  |  |  |   jsr 14e5a <getValueType>
    9e50:	|  |  |  |  |   lea 12(sp),sp
    9e54:	|  |  |  +--|-- bra.s 9e76 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    9e56:	|  |  |  |  '-> move.l 44(sp),d0
    9e5a:	|  |  |  |      move.l d0,-(sp)
    9e5c:	|  |  |  |      pea 1 <_start+0x1>
    9e60:	|  |  |  |      lea 20(sp),a0
    9e64:	|  |  |  |      move.l a0,-(sp)
    9e66:	|  |  |  |      jsr 14e5a <getValueType>
    9e6c:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    9e70:	|  |  |  |      moveq #1,d0
    9e72:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    9e76:	|  |  |  '----> move.l 60(sp),-(sp)
    9e7a:	|  |  |         jsr 157de <trimStack>
    9e80:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9e82:	|  |  |         movea.l 28(sp),a0
    9e86:	|  |  |         movea.l 4(a0),a0
    9e8a:	|  |  |         move.l 48(sp),d1
    9e8e:	|  |  |         move.l d1,d0
    9e90:	|  |  |         add.l d0,d0
    9e92:	|  |  |         add.l d1,d0
    9e94:	|  |  |         add.l d0,d0
    9e96:	|  |  |         add.l d0,d0
    9e98:	|  |  |         adda.l d0,a0
    9e9a:	|  |  |         move.l 12(sp),d0
    9e9e:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9ea0:	|  |  |         movea.l 28(sp),a0
    9ea4:	|  |  |         movea.l 4(a0),a0
    9ea8:	|  |  |         move.l 48(sp),d1
    9eac:	|  |  |         move.l d1,d0
    9eae:	|  |  |         add.l d0,d0
    9eb0:	|  |  |         add.l d1,d0
    9eb2:	|  |  |         add.l d0,d0
    9eb4:	|  |  |         add.l d0,d0
    9eb6:	|  |  |         adda.l d0,a0
    9eb8:	|  |  |         move.l 8(sp),d0
    9ebc:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9ec0:	|  |  |         movea.l 60(sp),a0
    9ec4:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9ec8:	|  |  '-------> tst.l 48(sp)
    9ecc:	|  '----------- bne.w 9d78 <createPersonaAnim+0xbc>
	}

	return newP;
    9ed0:	|               move.l 28(sp),d0
}
    9ed4:	'-------------> move.l (sp)+,d2
    9ed6:	                movea.l (sp)+,a6
    9ed8:	                lea 44(sp),sp
    9edc:	                rts

00009ede <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9ede:	       lea -12(sp),sp
    9ee2:	       move.l a6,-(sp)

	if(orig->theSprites)
    9ee4:	       movea.l 20(sp),a0
    9ee8:	       move.l (a0),d0
    9eea:	   ,-- beq.s 9f14 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9eec:	   |   movea.l 20(sp),a0
    9ef0:	   |   movea.l (a0),a0
    9ef2:	   |   move.l 4(a0),d0
    9ef6:	   |   subq.l #1,d0
    9ef8:	   |   move.l d0,4(a0)
    9efc:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9f02:	   +-- bne.s 9f14 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9f04:	   |   movea.l 20(sp),a0
    9f08:	   |   move.l (a0),d0
    9f0a:	   |   move.l d0,-(sp)
    9f0c:	   |   jsr 8fc2 <forgetSpriteBank>
    9f12:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9f14:	   '-> tst.l 20(sp)
    9f18:	,----- beq.s 9f58 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9f1a:	|      movea.l 20(sp),a0
    9f1e:	|      move.l 8(a0),d0
    9f22:	|  ,-- beq.s 9f3e <deleteAnim+0x60>
			FreeVec( orig->frames);
    9f24:	|  |   movea.l 20(sp),a0
    9f28:	|  |   move.l 4(a0),8(sp)
    9f2e:	|  |   move.l 1d188 <SysBase>,d0
    9f34:	|  |   movea.l d0,a6
    9f36:	|  |   movea.l 8(sp),a1
    9f3a:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9f3e:	|  '-> move.l 20(sp),4(sp)
    9f44:	|      move.l 1d188 <SysBase>,d0
    9f4a:	|      movea.l d0,a6
    9f4c:	|      movea.l 4(sp),a1
    9f50:	|      jsr -690(a6)
		orig = NULL;
    9f54:	|      clr.l 20(sp)
	}	
	
}
    9f58:	'----> nop
    9f5a:	       movea.l (sp)+,a6
    9f5c:	       lea 12(sp),sp
    9f60:	       rts

00009f62 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9f62:	          lea -124(sp),sp
    9f66:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    9f6a:	          movea.l 152(sp),a0
    9f6e:	          move.l 56(a0),d1
    9f72:	          movea.l 152(sp),a0
    9f76:	          move.l 60(a0),d0
    9f7a:	          cmp.l d1,d0
    9f7c:	      ,-- bne.s 9fac <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9f7e:	      |   movea.l 152(sp),a0
    9f82:	      |   moveq #-1,d0
    9f84:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    9f88:	      |   movea.l 152(sp),a0
    9f8c:	      |   move.l 40(a0),d0
    9f90:	      |   movea.l 152(sp),a0
    9f94:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9f98:	      |   movea.l 152(sp),a0
    9f9c:	      |   move.l 44(a0),d0
    9fa0:	      |   movea.l 152(sp),a0
    9fa4:	      |   move.l d0,52(a0)
    9fa8:	   ,--|-- bra.w a512 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9fac:	   |  '-> movea.l 1d2a0 <currentFloor>,a0
    9fb2:	   |      move.l 16(a0),d1
    9fb6:	   |      movea.l 152(sp),a0
    9fba:	   |      move.l 56(a0),d0
    9fbe:	   |      add.l d0,d0
    9fc0:	   |      add.l d0,d0
    9fc2:	   |      movea.l d1,a0
    9fc4:	   |      adda.l d0,a0
    9fc6:	   |      move.l (a0),d1
    9fc8:	   |      movea.l 152(sp),a0
    9fcc:	   |      move.l 60(a0),d0
    9fd0:	   |      add.l d0,d0
    9fd2:	   |      add.l d0,d0
    9fd4:	   |      movea.l d1,a0
    9fd6:	   |      adda.l d0,a0
    9fd8:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9fdc:	   |      moveq #-1,d0
    9fde:	   |      cmp.l 144(sp),d0
    9fe2:	   |  ,-- bne.s 9fea <doBorderStuff+0x88>
    9fe4:	   |  |   clr.w d0
    9fe6:	,--|--|-- bra.w a612 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9fea:	|  |  '-> movea.l 1d2a0 <currentFloor>,a0
    9ff0:	|  |      move.l 12(a0),d1
    9ff4:	|  |      move.l 144(sp),d0
    9ff8:	|  |      lsl.l #3,d0
    9ffa:	|  |      add.l d0,d1
    9ffc:	|  |      movea.l 1d2a0 <currentFloor>,a0
    a002:	|  |      movea.l 12(a0),a1
    a006:	|  |      movea.l 152(sp),a0
    a00a:	|  |      move.l 56(a0),d0
    a00e:	|  |      lsl.l #3,d0
    a010:	|  |      add.l a1,d0
    a012:	|  |      lea 40(sp),a0
    a016:	|  |      move.l a0,-(sp)
    a018:	|  |      lea 48(sp),a0
    a01c:	|  |      move.l a0,-(sp)
    a01e:	|  |      move.l d1,-(sp)
    a020:	|  |      move.l d0,-(sp)
    a022:	|  |      jsr 16ba0 <getMatchingCorners>
    a028:	|  |      lea 16(sp),sp
    a02c:	|  |      tst.w d0
    a02e:	|  |  ,-- bne.s a044 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    a030:	|  |  |   pea 198f0 <PutChar+0x1514>
    a036:	|  |  |   jsr 1793a <KPrintF>
    a03c:	|  |  |   addq.l #4,sp
            return FALSE;
    a03e:	|  |  |   clr.w d0
    a040:	+--|--|-- bra.w a612 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    a044:	|  |  '-> movea.l 152(sp),a0
    a048:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    a04e:	|  |      movea.l 152(sp),a0
    a052:	|  |      move.l (a0),d0
    a054:	|  |      move.l d0,-(sp)
    a056:	|  |      jsr 17d04 <__fixsfsi>
    a05c:	|  |      addq.l #4,sp
    a05e:	|  |      move.l d0,140(sp)
    a062:	|  |      movea.l 152(sp),a0
    a066:	|  |      move.l 4(a0),d0
    a06a:	|  |      move.l d0,-(sp)
    a06c:	|  |      jsr 17d04 <__fixsfsi>
    a072:	|  |      addq.l #4,sp
    a074:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    a078:	|  |      movea.l 152(sp),a0
    a07c:	|  |      move.l 40(a0),132(sp)
    a082:	|  |      movea.l 152(sp),a0
    a086:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    a08c:	|  |      movea.l 1d2a0 <currentFloor>,a0
    a092:	|  |      move.l 4(a0),d1
    a096:	|  |      move.l 44(sp),d0
    a09a:	|  |      lsl.l #3,d0
    a09c:	|  |      movea.l d1,a0
    a09e:	|  |      adda.l d0,a0
    a0a0:	|  |      move.l (a0),124(sp)
    a0a4:	|  |      movea.l 1d2a0 <currentFloor>,a0
    a0aa:	|  |      move.l 4(a0),d1
    a0ae:	|  |      move.l 44(sp),d0
    a0b2:	|  |      lsl.l #3,d0
    a0b4:	|  |      movea.l d1,a0
    a0b6:	|  |      adda.l d0,a0
    a0b8:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    a0be:	|  |      movea.l 1d2a0 <currentFloor>,a0
    a0c4:	|  |      move.l 4(a0),d1
    a0c8:	|  |      move.l 40(sp),d0
    a0cc:	|  |      lsl.l #3,d0
    a0ce:	|  |      movea.l d1,a0
    a0d0:	|  |      adda.l d0,a0
    a0d2:	|  |      move.l (a0),116(sp)
    a0d6:	|  |      movea.l 1d2a0 <currentFloor>,a0
    a0dc:	|  |      move.l 4(a0),d1
    a0e0:	|  |      move.l 40(sp),d0
    a0e4:	|  |      lsl.l #3,d0
    a0e6:	|  |      movea.l d1,a0
    a0e8:	|  |      adda.l d0,a0
    a0ea:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    a0f0:	|  |      move.l 140(sp),d0
    a0f4:	|  |      sub.l 132(sp),d0
    a0f8:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    a0fc:	|  |      move.l 136(sp),d0
    a100:	|  |      sub.l 128(sp),d0
    a104:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    a108:	|  |      move.l 116(sp),d0
    a10c:	|  |      sub.l 124(sp),d0
    a110:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    a114:	|  |      move.l 112(sp),d0
    a118:	|  |      sub.l 120(sp),d0
    a11c:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    a120:	|  |      move.l 124(sp),d0
    a124:	|  |      sub.l 140(sp),d0
    a128:	|  |      move.l 104(sp),-(sp)
    a12c:	|  |      move.l d0,-(sp)
    a12e:	|  |      jsr 182c6 <__mulsi3>
    a134:	|  |      addq.l #8,sp
    a136:	|  |      move.l d0,d2
    a138:	|  |      move.l 120(sp),d0
    a13c:	|  |      sub.l 136(sp),d0
    a140:	|  |      move.l 108(sp),-(sp)
    a144:	|  |      move.l d0,-(sp)
    a146:	|  |      jsr 182c6 <__mulsi3>
    a14c:	|  |      addq.l #8,sp
    a14e:	|  |      move.l d2,d1
    a150:	|  |      sub.l d0,d1
    a152:	|  |      move.l d1,-(sp)
    a154:	|  |      jsr 17d2c <__floatsidf>
    a15a:	|  |      addq.l #4,sp
    a15c:	|  |      move.l d0,32(sp)
    a160:	|  |      move.l d1,36(sp)
    a164:	|  |      move.l 32(sp),88(sp)
    a16a:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    a170:	|  |      move.l 96(sp),-(sp)
    a174:	|  |      move.l 112(sp),-(sp)
    a178:	|  |      jsr 182c6 <__mulsi3>
    a17e:	|  |      addq.l #8,sp
    a180:	|  |      move.l d0,d2
    a182:	|  |      move.l 100(sp),-(sp)
    a186:	|  |      move.l 108(sp),-(sp)
    a18a:	|  |      jsr 182c6 <__mulsi3>
    a190:	|  |      addq.l #8,sp
    a192:	|  |      move.l d2,d1
    a194:	|  |      sub.l d0,d1
    a196:	|  |      move.l d1,-(sp)
    a198:	|  |      jsr 17d2c <__floatsidf>
    a19e:	|  |      addq.l #4,sp
    a1a0:	|  |      move.l d1,-(sp)
    a1a2:	|  |      move.l d0,-(sp)
    a1a4:	|  |      move.l 100(sp),-(sp)
    a1a8:	|  |      move.l 100(sp),-(sp)
    a1ac:	|  |      jsr 17bc0 <__divdf3>
    a1b2:	|  |      lea 16(sp),sp
    a1b6:	|  |      move.l d0,24(sp)
    a1ba:	|  |      move.l d1,28(sp)
    a1be:	|  |      move.l 24(sp),88(sp)
    a1c4:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    a1ca:	|  |      clr.l -(sp)
    a1cc:	|  |      clr.l -(sp)
    a1ce:	|  |      move.l 100(sp),-(sp)
    a1d2:	|  |      move.l 100(sp),-(sp)
    a1d6:	|  |      jsr 17e8a <__gtdf2>
    a1dc:	|  |      lea 16(sp),sp
    a1e0:	|  |      tst.l d0
    a1e2:	|  |  ,-- ble.w a2ba <doBorderStuff+0x358>
    a1e6:	|  |  |   clr.l -(sp)
    a1e8:	|  |  |   move.l #1072693248,-(sp)
    a1ee:	|  |  |   move.l 100(sp),-(sp)
    a1f2:	|  |  |   move.l 100(sp),-(sp)
    a1f6:	|  |  |   jsr 17f44 <__ltdf2>
    a1fc:	|  |  |   lea 16(sp),sp
    a200:	|  |  |   tst.l d0
    a202:	|  |  +-- bge.w a2ba <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    a206:	|  |  |   move.l 124(sp),-(sp)
    a20a:	|  |  |   jsr 17d2c <__floatsidf>
    a210:	|  |  |   addq.l #4,sp
    a212:	|  |  |   move.l d0,d2
    a214:	|  |  |   move.l d1,d3
    a216:	|  |  |   move.l 100(sp),-(sp)
    a21a:	|  |  |   jsr 17d2c <__floatsidf>
    a220:	|  |  |   addq.l #4,sp
    a222:	|  |  |   move.l 92(sp),-(sp)
    a226:	|  |  |   move.l 92(sp),-(sp)
    a22a:	|  |  |   move.l d1,-(sp)
    a22c:	|  |  |   move.l d0,-(sp)
    a22e:	|  |  |   jsr 17dbc <__muldf3>
    a234:	|  |  |   lea 16(sp),sp
    a238:	|  |  |   move.l d1,-(sp)
    a23a:	|  |  |   move.l d0,-(sp)
    a23c:	|  |  |   move.l d3,-(sp)
    a23e:	|  |  |   move.l d2,-(sp)
    a240:	|  |  |   jsr 17b5e <__adddf3>
    a246:	|  |  |   lea 16(sp),sp
    a24a:	|  |  |   move.l d1,-(sp)
    a24c:	|  |  |   move.l d0,-(sp)
    a24e:	|  |  |   jsr 17cce <__fixdfsi>
    a254:	|  |  |   addq.l #8,sp
    a256:	|  |  |   movea.l 152(sp),a0
    a25a:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    a25e:	|  |  |   move.l 120(sp),-(sp)
    a262:	|  |  |   jsr 17d2c <__floatsidf>
    a268:	|  |  |   addq.l #4,sp
    a26a:	|  |  |   move.l d0,d2
    a26c:	|  |  |   move.l d1,d3
    a26e:	|  |  |   move.l 96(sp),-(sp)
    a272:	|  |  |   jsr 17d2c <__floatsidf>
    a278:	|  |  |   addq.l #4,sp
    a27a:	|  |  |   move.l 92(sp),-(sp)
    a27e:	|  |  |   move.l 92(sp),-(sp)
    a282:	|  |  |   move.l d1,-(sp)
    a284:	|  |  |   move.l d0,-(sp)
    a286:	|  |  |   jsr 17dbc <__muldf3>
    a28c:	|  |  |   lea 16(sp),sp
    a290:	|  |  |   move.l d1,-(sp)
    a292:	|  |  |   move.l d0,-(sp)
    a294:	|  |  |   move.l d3,-(sp)
    a296:	|  |  |   move.l d2,-(sp)
    a298:	|  |  |   jsr 17b5e <__adddf3>
    a29e:	|  |  |   lea 16(sp),sp
    a2a2:	|  |  |   move.l d1,-(sp)
    a2a4:	|  |  |   move.l d0,-(sp)
    a2a6:	|  |  |   jsr 17cce <__fixdfsi>
    a2ac:	|  |  |   addq.l #8,sp
    a2ae:	|  |  |   movea.l 152(sp),a0
    a2b2:	|  |  |   move.l d0,52(a0)
    a2b6:	|  +--|-- bra.w a512 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    a2ba:	|  |  '-> move.l 140(sp),d0
    a2be:	|  |      sub.l 124(sp),d0
    a2c2:	|  |      move.l d0,84(sp)
    a2c6:	|  |      move.l 140(sp),d0
    a2ca:	|  |      sub.l 116(sp),d0
    a2ce:	|  |      move.l d0,80(sp)
    a2d2:	|  |      move.l 132(sp),d0
    a2d6:	|  |      sub.l 124(sp),d0
    a2da:	|  |      move.l d0,76(sp)
    a2de:	|  |      move.l 132(sp),d0
    a2e2:	|  |      sub.l 116(sp),d0
    a2e6:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    a2ea:	|  |      move.l 136(sp),d0
    a2ee:	|  |      sub.l 120(sp),d0
    a2f2:	|  |      move.l d0,68(sp)
    a2f6:	|  |      move.l 136(sp),d0
    a2fa:	|  |      sub.l 112(sp),d0
    a2fe:	|  |      move.l d0,64(sp)
    a302:	|  |      move.l 128(sp),d0
    a306:	|  |      sub.l 120(sp),d0
    a30a:	|  |      move.l d0,60(sp)
    a30e:	|  |      move.l 128(sp),d0
    a312:	|  |      sub.l 112(sp),d0
    a316:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    a31a:	|  |      move.l 84(sp),-(sp)
    a31e:	|  |      move.l 88(sp),-(sp)
    a322:	|  |      jsr 182c6 <__mulsi3>
    a328:	|  |      addq.l #8,sp
    a32a:	|  |      move.l d0,84(sp)
    a32e:	|  |      move.l 80(sp),-(sp)
    a332:	|  |      move.l 84(sp),-(sp)
    a336:	|  |      jsr 182c6 <__mulsi3>
    a33c:	|  |      addq.l #8,sp
    a33e:	|  |      move.l d0,80(sp)
    a342:	|  |      move.l 76(sp),-(sp)
    a346:	|  |      move.l 80(sp),-(sp)
    a34a:	|  |      jsr 182c6 <__mulsi3>
    a350:	|  |      addq.l #8,sp
    a352:	|  |      move.l d0,76(sp)
    a356:	|  |      move.l 72(sp),-(sp)
    a35a:	|  |      move.l 76(sp),-(sp)
    a35e:	|  |      jsr 182c6 <__mulsi3>
    a364:	|  |      addq.l #8,sp
    a366:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    a36a:	|  |      move.l 68(sp),-(sp)
    a36e:	|  |      move.l 72(sp),-(sp)
    a372:	|  |      jsr 182c6 <__mulsi3>
    a378:	|  |      addq.l #8,sp
    a37a:	|  |      move.l d0,68(sp)
    a37e:	|  |      move.l 64(sp),-(sp)
    a382:	|  |      move.l 68(sp),-(sp)
    a386:	|  |      jsr 182c6 <__mulsi3>
    a38c:	|  |      addq.l #8,sp
    a38e:	|  |      move.l d0,64(sp)
    a392:	|  |      move.l 60(sp),-(sp)
    a396:	|  |      move.l 64(sp),-(sp)
    a39a:	|  |      jsr 182c6 <__mulsi3>
    a3a0:	|  |      addq.l #8,sp
    a3a2:	|  |      move.l d0,60(sp)
    a3a6:	|  |      move.l 56(sp),-(sp)
    a3aa:	|  |      move.l 60(sp),-(sp)
    a3ae:	|  |      jsr 182c6 <__mulsi3>
    a3b4:	|  |      addq.l #8,sp
    a3b6:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a3ba:	|  |      move.l 84(sp),-(sp)
    a3be:	|  |      jsr 17d2c <__floatsidf>
    a3c4:	|  |      addq.l #4,sp
    a3c6:	|  |      move.l d0,d2
    a3c8:	|  |      move.l d1,d3
    a3ca:	|  |      move.l 68(sp),-(sp)
    a3ce:	|  |      jsr 17d2c <__floatsidf>
    a3d4:	|  |      addq.l #4,sp
    a3d6:	|  |      move.l d1,-(sp)
    a3d8:	|  |      move.l d0,-(sp)
    a3da:	|  |      move.l d3,-(sp)
    a3dc:	|  |      move.l d2,-(sp)
    a3de:	|  |      jsr 17b5e <__adddf3>
    a3e4:	|  |      lea 16(sp),sp
    a3e8:	|  |      move.l d1,-(sp)
    a3ea:	|  |      move.l d0,-(sp)
    a3ec:	|  |      jsr 1827c <sqrt>
    a3f2:	|  |      addq.l #8,sp
    a3f4:	|  |      move.l d0,d2
    a3f6:	|  |      move.l d1,d3
    a3f8:	|  |      move.l 76(sp),-(sp)
    a3fc:	|  |      jsr 17d2c <__floatsidf>
    a402:	|  |      addq.l #4,sp
    a404:	|  |      move.l d0,d4
    a406:	|  |      move.l d1,d5
    a408:	|  |      move.l 60(sp),-(sp)
    a40c:	|  |      jsr 17d2c <__floatsidf>
    a412:	|  |      addq.l #4,sp
    a414:	|  |      move.l d1,-(sp)
    a416:	|  |      move.l d0,-(sp)
    a418:	|  |      move.l d5,-(sp)
    a41a:	|  |      move.l d4,-(sp)
    a41c:	|  |      jsr 17b5e <__adddf3>
    a422:	|  |      lea 16(sp),sp
    a426:	|  |      move.l d1,-(sp)
    a428:	|  |      move.l d0,-(sp)
    a42a:	|  |      jsr 1827c <sqrt>
    a430:	|  |      addq.l #8,sp
    a432:	|  |      move.l d1,-(sp)
    a434:	|  |      move.l d0,-(sp)
    a436:	|  |      move.l d3,-(sp)
    a438:	|  |      move.l d2,-(sp)
    a43a:	|  |      jsr 17b5e <__adddf3>
    a440:	|  |      lea 16(sp),sp
    a444:	|  |      move.l d0,d2
    a446:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    a448:	|  |      move.l 80(sp),-(sp)
    a44c:	|  |      jsr 17d2c <__floatsidf>
    a452:	|  |      addq.l #4,sp
    a454:	|  |      move.l d0,d4
    a456:	|  |      move.l d1,d5
    a458:	|  |      move.l 64(sp),-(sp)
    a45c:	|  |      jsr 17d2c <__floatsidf>
    a462:	|  |      addq.l #4,sp
    a464:	|  |      move.l d1,-(sp)
    a466:	|  |      move.l d0,-(sp)
    a468:	|  |      move.l d5,-(sp)
    a46a:	|  |      move.l d4,-(sp)
    a46c:	|  |      jsr 17b5e <__adddf3>
    a472:	|  |      lea 16(sp),sp
    a476:	|  |      move.l d1,-(sp)
    a478:	|  |      move.l d0,-(sp)
    a47a:	|  |      jsr 1827c <sqrt>
    a480:	|  |      addq.l #8,sp
    a482:	|  |      move.l d0,d4
    a484:	|  |      move.l d1,d5
    a486:	|  |      move.l 72(sp),-(sp)
    a48a:	|  |      jsr 17d2c <__floatsidf>
    a490:	|  |      addq.l #4,sp
    a492:	|  |      move.l d0,d6
    a494:	|  |      move.l d1,d7
    a496:	|  |      move.l 56(sp),-(sp)
    a49a:	|  |      jsr 17d2c <__floatsidf>
    a4a0:	|  |      addq.l #4,sp
    a4a2:	|  |      move.l d1,-(sp)
    a4a4:	|  |      move.l d0,-(sp)
    a4a6:	|  |      move.l d7,-(sp)
    a4a8:	|  |      move.l d6,-(sp)
    a4aa:	|  |      jsr 17b5e <__adddf3>
    a4b0:	|  |      lea 16(sp),sp
    a4b4:	|  |      move.l d1,-(sp)
    a4b6:	|  |      move.l d0,-(sp)
    a4b8:	|  |      jsr 1827c <sqrt>
    a4be:	|  |      addq.l #8,sp
    a4c0:	|  |      move.l d1,-(sp)
    a4c2:	|  |      move.l d0,-(sp)
    a4c4:	|  |      move.l d5,-(sp)
    a4c6:	|  |      move.l d4,-(sp)
    a4c8:	|  |      jsr 17b5e <__adddf3>
    a4ce:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a4d2:	|  |      move.l d1,-(sp)
    a4d4:	|  |      move.l d0,-(sp)
    a4d6:	|  |      move.l d3,-(sp)
    a4d8:	|  |      move.l d2,-(sp)
    a4da:	|  |      jsr 17f44 <__ltdf2>
    a4e0:	|  |      lea 16(sp),sp
    a4e4:	|  |      tst.l d0
    a4e6:	|  |  ,-- bge.s a4fe <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a4e8:	|  |  |   movea.l 152(sp),a0
    a4ec:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a4f2:	|  |  |   movea.l 152(sp),a0
    a4f6:	|  |  |   move.l 120(sp),52(a0)
    a4fc:	|  +--|-- bra.s a512 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a4fe:	|  |  '-> movea.l 152(sp),a0
    a502:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a508:	|  |      movea.l 152(sp),a0
    a50c:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a512:	|  '----> movea.l 152(sp),a0
    a516:	|         move.l 52(a0),d0
    a51a:	|         move.l d0,-(sp)
    a51c:	|         jsr 17d6c <__floatsisf>
    a522:	|         addq.l #4,sp
    a524:	|         move.l d0,d1
    a526:	|         movea.l 152(sp),a0
    a52a:	|         move.l 4(a0),d0
    a52e:	|         move.l d0,-(sp)
    a530:	|         move.l d1,-(sp)
    a532:	|         jsr 18060 <__subsf3>
    a538:	|         addq.l #8,sp
    a53a:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a53e:	|         movea.l 152(sp),a0
    a542:	|         move.l (a0),d2
    a544:	|         movea.l 152(sp),a0
    a548:	|         move.l 48(a0),d0
    a54c:	|         move.l d0,-(sp)
    a54e:	|         jsr 17d6c <__floatsisf>
    a554:	|         addq.l #4,sp
    a556:	|         move.l d0,-(sp)
    a558:	|         move.l d2,-(sp)
    a55a:	|         jsr 18060 <__subsf3>
    a560:	|         addq.l #8,sp
    a562:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a566:	|         clr.l -(sp)
    a568:	|         move.l 52(sp),-(sp)
    a56c:	|         jsr 17fc8 <__nesf2>
    a572:	|         addq.l #8,sp
    a574:	|         tst.l d0
    a576:	|     ,-- bne.s a58a <doBorderStuff+0x628>
    a578:	|     |   clr.l -(sp)
    a57a:	|     |   move.l 56(sp),-(sp)
    a57e:	|     |   jsr 17fc8 <__nesf2>
    a584:	|     |   addq.l #8,sp
    a586:	|     |   tst.l d0
    a588:	|  ,--|-- beq.s a600 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a58a:	|  |  '-> move.l 52(sp),d0
    a58e:	|  |      move.l d0,-(sp)
    a590:	|  |      move.l d0,-(sp)
    a592:	|  |      jsr 17b28 <__addsf3>
    a598:	|  |      addq.l #8,sp
    a59a:	|  |      move.l d0,-(sp)
    a59c:	|  |      move.l 52(sp),-(sp)
    a5a0:	|  |      jsr 180cc <atan2f>
    a5a6:	|  |      addq.l #8,sp
    a5a8:	|  |      move.l d0,-(sp)
    a5aa:	|  |      jsr 17c8e <__extendsfdf2>
    a5b0:	|  |      addq.l #4,sp
    a5b2:	|  |      move.l #-1540411785,-(sp)
    a5b8:	|  |      move.l #1078765033,-(sp)
    a5be:	|  |      move.l d1,-(sp)
    a5c0:	|  |      move.l d0,-(sp)
    a5c2:	|  |      jsr 17dbc <__muldf3>
    a5c8:	|  |      lea 16(sp),sp
    a5cc:	|  |      clr.l -(sp)
    a5ce:	|  |      move.l #1080459264,-(sp)
    a5d4:	|  |      move.l d1,-(sp)
    a5d6:	|  |      move.l d0,-(sp)
    a5d8:	|  |      jsr 17b5e <__adddf3>
    a5de:	|  |      lea 16(sp),sp
    a5e2:	|  |      move.l d1,-(sp)
    a5e4:	|  |      move.l d0,-(sp)
    a5e6:	|  |      jsr 17cce <__fixdfsi>
    a5ec:	|  |      addq.l #8,sp
    a5ee:	|  |      movea.l 152(sp),a0
    a5f2:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a5f6:	|  |      movea.l 152(sp),a0
    a5fa:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a600:	|  '----> pea 1 <_start+0x1>
    a604:	|         move.l 156(sp),-(sp)
    a608:	|         jsr 479c <setFrames>
    a60e:	|         addq.l #8,sp
    return TRUE;
    a610:	|         moveq #1,d0
}
    a612:	'-------> movem.l (sp)+,d2-d7
    a616:	          lea 124(sp),sp
    a61a:	          rts

0000a61c <drawPeople>:

void drawPeople () {
    a61c:	                   lea -24(sp),sp
    a620:	                   move.l d2,-(sp)

	shufflePeople ();
    a622:	                   jsr c11a <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a628:	                   move.l 1d1e8 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a630:	                   clr.l 20(sp)
	overRegion = NULL;
    a634:	                   clr.l 1d298 <overRegion>

	while (thisPerson) {
    a63a:	   ,-------------- bra.w abec <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a63e:	,--|-------------> movea.l 24(sp),a0
    a642:	|  |               move.w 104(a0),d0
    a646:	|  |  ,----------- beq.w a9a0 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a64a:	|  |  |            movea.l 24(sp),a0
    a64e:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a654:	|  |  |            movea.l 24(sp),a0
    a658:	|  |  |            move.l 76(a0),d0
    a65c:	|  |  |            cmp.l 20(sp),d0
    a660:	|  |  |  ,-------- beq.w a82e <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a664:	|  |  |  |         movea.l 24(sp),a0
    a668:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a66c:	|  |  |  |         movea.l 24(sp),a0
    a670:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a676:	|  |  |  |         movea.l 24(sp),a0
    a67a:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a67e:	|  |  |  |         movea.l 20(sp),a0
    a682:	|  |  |  |         movea.l 4(a0),a0
    a686:	|  |  |  |         move.l 4(a0),d0
    a68a:	|  |  |  |         movea.l 24(sp),a0
    a68e:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a692:	|  |  |  |         movea.l 20(sp),a0
    a696:	|  |  |  |         movea.l 4(a0),a1
    a69a:	|  |  |  |         movea.l 24(sp),a0
    a69e:	|  |  |  |         move.l 84(a0),d0
    a6a2:	|  |  |  |         move.l d0,d1
    a6a4:	|  |  |  |         move.l d1,d0
    a6a6:	|  |  |  |         add.l d0,d0
    a6a8:	|  |  |  |         add.l d1,d0
    a6aa:	|  |  |  |         add.l d0,d0
    a6ac:	|  |  |  |         add.l d0,d0
    a6ae:	|  |  |  |         lea (0,a1,d0.l),a0
    a6b2:	|  |  |  |         move.l 8(a0),d0
    a6b6:	|  |  |  |     ,-- ble.w a758 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a6ba:	|  |  |  |     |   movea.l 20(sp),a0
    a6be:	|  |  |  |     |   movea.l 4(a0),a1
    a6c2:	|  |  |  |     |   movea.l 24(sp),a0
    a6c6:	|  |  |  |     |   move.l 84(a0),d0
    a6ca:	|  |  |  |     |   move.l d0,d1
    a6cc:	|  |  |  |     |   move.l d1,d0
    a6ce:	|  |  |  |     |   add.l d0,d0
    a6d0:	|  |  |  |     |   add.l d1,d0
    a6d2:	|  |  |  |     |   add.l d0,d0
    a6d4:	|  |  |  |     |   add.l d0,d0
    a6d6:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a6da:	|  |  |  |     |   move.l 8(a0),d0
    a6de:	|  |  |  |     |   clr.l -(sp)
    a6e0:	|  |  |  |     |   move.l d0,-(sp)
    a6e2:	|  |  |  |     |   jsr d82e <startSound>
    a6e8:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a6ea:	|  |  |  |     |   movea.l 24(sp),a0
    a6ee:	|  |  |  |     |   move.l 84(a0),d0
    a6f2:	|  |  |  |     |   addq.l #1,d0
    a6f4:	|  |  |  |     |   movea.l 24(sp),a0
    a6f8:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a6fc:	|  |  |  |     |   movea.l 24(sp),a0
    a700:	|  |  |  |     |   move.l 84(a0),d0
    a704:	|  |  |  |     |   movea.l 24(sp),a0
    a708:	|  |  |  |     |   movea.l 72(a0),a0
    a70c:	|  |  |  |     |   move.l 8(a0),d1
    a710:	|  |  |  |     |   move.l d1,-(sp)
    a712:	|  |  |  |     |   move.l d0,-(sp)
    a714:	|  |  |  |     |   jsr 18372 <__modsi3>
    a71a:	|  |  |  |     |   addq.l #8,sp
    a71c:	|  |  |  |     |   movea.l 24(sp),a0
    a720:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a724:	|  |  |  |     |   movea.l 24(sp),a0
    a728:	|  |  |  |     |   movea.l 72(a0),a0
    a72c:	|  |  |  |     |   movea.l 4(a0),a1
    a730:	|  |  |  |     |   movea.l 24(sp),a0
    a734:	|  |  |  |     |   move.l 84(a0),d0
    a738:	|  |  |  |     |   move.l d0,d1
    a73a:	|  |  |  |     |   move.l d1,d0
    a73c:	|  |  |  |     |   add.l d0,d0
    a73e:	|  |  |  |     |   add.l d1,d0
    a740:	|  |  |  |     |   add.l d0,d0
    a742:	|  |  |  |     |   add.l d0,d0
    a744:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a748:	|  |  |  |     |   move.l 4(a0),d0
    a74c:	|  |  |  |     |   movea.l 24(sp),a0
    a750:	|  |  |  |     |   move.l d0,88(a0)
    a754:	|  |  |  |  ,--|-- bra.w a896 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a758:	|  |  |  |  |  '-> movea.l 20(sp),a0
    a75c:	|  |  |  |  |      movea.l 4(a0),a1
    a760:	|  |  |  |  |      movea.l 24(sp),a0
    a764:	|  |  |  |  |      move.l 84(a0),d0
    a768:	|  |  |  |  |      move.l d0,d1
    a76a:	|  |  |  |  |      move.l d1,d0
    a76c:	|  |  |  |  |      add.l d0,d0
    a76e:	|  |  |  |  |      add.l d1,d0
    a770:	|  |  |  |  |      add.l d0,d0
    a772:	|  |  |  |  |      add.l d0,d0
    a774:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a778:	|  |  |  |  |      move.l 8(a0),d0
    a77c:	|  |  |  |  +----- beq.w a896 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a780:	|  |  |  |  |      movea.l 1d158 <noStack>,a1
    a786:	|  |  |  |  |      movea.l 20(sp),a0
    a78a:	|  |  |  |  |      move.l 4(a0),d2
    a78e:	|  |  |  |  |      movea.l 24(sp),a0
    a792:	|  |  |  |  |      move.l 84(a0),d0
    a796:	|  |  |  |  |      move.l d0,d1
    a798:	|  |  |  |  |      move.l d1,d0
    a79a:	|  |  |  |  |      add.l d0,d0
    a79c:	|  |  |  |  |      add.l d1,d0
    a79e:	|  |  |  |  |      add.l d0,d0
    a7a0:	|  |  |  |  |      add.l d0,d0
    a7a2:	|  |  |  |  |      movea.l d2,a0
    a7a4:	|  |  |  |  |      adda.l d0,a0
    a7a6:	|  |  |  |  |      move.l 8(a0),d0
    a7aa:	|  |  |  |  |      neg.l d0
    a7ac:	|  |  |  |  |      pea 1 <_start+0x1>
    a7b0:	|  |  |  |  |      move.l a1,-(sp)
    a7b2:	|  |  |  |  |      clr.l -(sp)
    a7b4:	|  |  |  |  |      clr.l -(sp)
    a7b6:	|  |  |  |  |      move.l d0,-(sp)
    a7b8:	|  |  |  |  |      jsr 7ac8 <startNewFunctionNum>
    a7be:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a7c2:	|  |  |  |  |      movea.l 24(sp),a0
    a7c6:	|  |  |  |  |      move.l 84(a0),d0
    a7ca:	|  |  |  |  |      addq.l #1,d0
    a7cc:	|  |  |  |  |      movea.l 24(sp),a0
    a7d0:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a7d4:	|  |  |  |  |      movea.l 24(sp),a0
    a7d8:	|  |  |  |  |      move.l 84(a0),d0
    a7dc:	|  |  |  |  |      movea.l 24(sp),a0
    a7e0:	|  |  |  |  |      movea.l 72(a0),a0
    a7e4:	|  |  |  |  |      move.l 8(a0),d1
    a7e8:	|  |  |  |  |      move.l d1,-(sp)
    a7ea:	|  |  |  |  |      move.l d0,-(sp)
    a7ec:	|  |  |  |  |      jsr 18372 <__modsi3>
    a7f2:	|  |  |  |  |      addq.l #8,sp
    a7f4:	|  |  |  |  |      movea.l 24(sp),a0
    a7f8:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a7fc:	|  |  |  |  |      movea.l 24(sp),a0
    a800:	|  |  |  |  |      movea.l 72(a0),a0
    a804:	|  |  |  |  |      movea.l 4(a0),a1
    a808:	|  |  |  |  |      movea.l 24(sp),a0
    a80c:	|  |  |  |  |      move.l 84(a0),d0
    a810:	|  |  |  |  |      move.l d0,d1
    a812:	|  |  |  |  |      move.l d1,d0
    a814:	|  |  |  |  |      add.l d0,d0
    a816:	|  |  |  |  |      add.l d1,d0
    a818:	|  |  |  |  |      add.l d0,d0
    a81a:	|  |  |  |  |      add.l d0,d0
    a81c:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a820:	|  |  |  |  |      move.l 4(a0),d0
    a824:	|  |  |  |  |      movea.l 24(sp),a0
    a828:	|  |  |  |  |      move.l d0,88(a0)
    a82c:	|  |  |  |  +----- bra.s a896 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a82e:	|  |  |  '--|----> movea.l 24(sp),a0
    a832:	|  |  |     |      move.l (a0),d0
    a834:	|  |  |     |      movea.l 24(sp),a0
    a838:	|  |  |     |      move.l 8(a0),d1
    a83c:	|  |  |     |      move.l d1,-(sp)
    a83e:	|  |  |     |      move.l d0,-(sp)
    a840:	|  |  |     |      jsr 17c58 <__eqsf2>
    a846:	|  |  |     |      addq.l #8,sp
    a848:	|  |  |     |      tst.l d0
    a84a:	|  |  |     |  ,-- bne.s a88e <drawPeople+0x272>
    a84c:	|  |  |     |  |   movea.l 24(sp),a0
    a850:	|  |  |     |  |   move.l 4(a0),d0
    a854:	|  |  |     |  |   movea.l 24(sp),a0
    a858:	|  |  |     |  |   move.l 12(a0),d1
    a85c:	|  |  |     |  |   move.l d1,-(sp)
    a85e:	|  |  |     |  |   move.l d0,-(sp)
    a860:	|  |  |     |  |   jsr 17c58 <__eqsf2>
    a866:	|  |  |     |  |   addq.l #8,sp
    a868:	|  |  |     |  |   tst.l d0
    a86a:	|  |  |     |  +-- bne.s a88e <drawPeople+0x272>
    a86c:	|  |  |     |  |   movea.l 20(sp),a0
    a870:	|  |  |     |  |   move.l 8(a0),d0
    a874:	|  |  |     |  |   moveq #1,d1
    a876:	|  |  |     |  |   cmp.l d0,d1
    a878:	|  |  |     |  +-- bne.s a88e <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a87a:	|  |  |     |  |   movea.l 24(sp),a0
    a87e:	|  |  |     |  |   move.l 16(a0),d0
    a882:	|  |  |     |  |   addq.l #1,d0
    a884:	|  |  |     |  |   movea.l 24(sp),a0
    a888:	|  |  |     |  |   move.l d0,16(a0)
    a88c:	|  |  |     +--|-- bra.s a896 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a88e:	|  |  |     |  '-> movea.l 24(sp),a0
    a892:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a896:	|  |  |     '----> movea.l 24(sp),a0
    a89a:	|  |  |            move.l (a0),d0
    a89c:	|  |  |            movea.l 24(sp),a0
    a8a0:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a8a4:	|  |  |            movea.l 24(sp),a0
    a8a8:	|  |  |            move.l 4(a0),d0
    a8ac:	|  |  |            movea.l 24(sp),a0
    a8b0:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a8b4:	|  |  |            movea.l 20(sp),a0
    a8b8:	|  |  |            movea.l 4(a0),a1
    a8bc:	|  |  |            movea.l 24(sp),a0
    a8c0:	|  |  |            move.l 84(a0),d0
    a8c4:	|  |  |            move.l d0,d1
    a8c6:	|  |  |            move.l d1,d0
    a8c8:	|  |  |            add.l d0,d0
    a8ca:	|  |  |            add.l d1,d0
    a8cc:	|  |  |            add.l d0,d0
    a8ce:	|  |  |            add.l d0,d0
    a8d0:	|  |  |            lea (0,a1,d0.l),a0
    a8d4:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a8d8:	|  |  |            move.l 8(sp),d0
    a8dc:	|  |  |            add.l d0,d0
    a8de:	|  |  |            subx.l d0,d0
    a8e0:	|  |  |            neg.l d0
    a8e2:	|  |  |            move.b d0,d0
    a8e4:	|  |  |            move.b d0,d0
    a8e6:	|  |  |            andi.l #255,d0
    a8ec:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a8f0:	|  |  |            move.l 8(sp),-(sp)
    a8f4:	|  |  |            jsr 97f0 <TF_abs>
    a8fa:	|  |  |            addq.l #4,sp
    a8fc:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a900:	|  |  |            movea.l 20(sp),a0
    a904:	|  |  |            movea.l (a0),a0
    a906:	|  |  |            move.l 8(a0),d0
    a90a:	|  |  |            cmp.l 12(sp),d0
    a90e:	|  |  |        ,-- bgt.s a91e <drawPeople+0x302>
				fNum = 0;
    a910:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a914:	|  |  |        |   moveq #2,d0
    a916:	|  |  |        |   sub.l 16(sp),d0
    a91a:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a91e:	|  |  |        '-> moveq #2,d1
    a920:	|  |  |            cmp.l 16(sp),d1
    a924:	|  |  +----------- beq.s a9a0 <drawPeople+0x384>
				BOOL r = FALSE;
    a926:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a92a:	|  |  |            move.l 16(sp),d0
    a92e:	|  |  |            movea.w d0,a0
    a930:	|  |  |            movea.l 20(sp),a1
    a934:	|  |  |            movea.l (a1),a1
    a936:	|  |  |            movea.l 16(a1),a1
    a93a:	|  |  |            move.l 12(sp),d1
    a93e:	|  |  |            move.l d1,d0
    a940:	|  |  |            lsl.l #3,d0
    a942:	|  |  |            sub.l d1,d0
    a944:	|  |  |            add.l d0,d0
    a946:	|  |  |            add.l d0,d0
    a948:	|  |  |            add.l a1,d0
    a94a:	|  |  |            move.l a0,-(sp)
    a94c:	|  |  |            move.l 28(sp),-(sp)
    a950:	|  |  |            move.l d0,-(sp)
    a952:	|  |  |            jsr 9512 <scaleSprite>
    a958:	|  |  |            lea 12(sp),sp
    a95c:	|  |  |            move.w d0,6(sp)
				if (r) {
    a960:	|  |  +----------- beq.s a9a0 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a962:	|  |  |            movea.l 24(sp),a0
    a966:	|  |  |            movea.l 114(a0),a0
    a96a:	|  |  |            movea.l (a0),a0
    a96c:	|  |  |            move.b (a0),d0
    a96e:	|  |  +----------- beq.s a9a0 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a970:	|  |  |            move.l 1d208 <personRegion+0x1c>,d1
    a976:	|  |  |            movea.l 24(sp),a0
    a97a:	|  |  |            move.l 114(a0),d0
    a97e:	|  |  |            cmp.l d1,d0
    a980:	|  |  |        ,-- beq.s a988 <drawPeople+0x36c>
    a982:	|  |  |        |   clr.l 1d150 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a988:	|  |  |        '-> movea.l 24(sp),a0
    a98c:	|  |  |            move.l 114(a0),d0
    a990:	|  |  |            move.l d0,1d208 <personRegion+0x1c>
						overRegion = & personRegion;
    a996:	|  |  |            move.l #119276,1d298 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a9a0:	|  |  '----------> movea.l 24(sp),a0
    a9a4:	|  |               move.l 88(a0),d0
    a9a8:	|  |               subq.l #1,d0
    a9aa:	|  |               movea.l 24(sp),a0
    a9ae:	|  |               move.l d0,88(a0)
    a9b2:	|  |               movea.l 24(sp),a0
    a9b6:	|  |               move.l 88(a0),d0
    a9ba:	|  |        ,----- bne.w abe2 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a9be:	|  |        |      movea.l 24(sp),a0
    a9c2:	|  |        |      move.l 84(a0),d0
    a9c6:	|  |        |      addq.l #1,d0
    a9c8:	|  |        |      movea.l 24(sp),a0
    a9cc:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a9d0:	|  |        |      movea.l 24(sp),a0
    a9d4:	|  |        |      move.l 84(a0),d0
    a9d8:	|  |        |      movea.l 24(sp),a0
    a9dc:	|  |        |      movea.l 72(a0),a0
    a9e0:	|  |        |      move.l 8(a0),d1
    a9e4:	|  |        |      move.l d1,-(sp)
    a9e6:	|  |        |      move.l d0,-(sp)
    a9e8:	|  |        |      jsr 18372 <__modsi3>
    a9ee:	|  |        |      addq.l #8,sp
    a9f0:	|  |        |      movea.l 24(sp),a0
    a9f4:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a9f8:	|  |        |      movea.l 24(sp),a0
    a9fc:	|  |        |      movea.l 72(a0),a0
    aa00:	|  |        |      movea.l 4(a0),a1
    aa04:	|  |        |      movea.l 24(sp),a0
    aa08:	|  |        |      move.l 84(a0),d0
    aa0c:	|  |        |      move.l d0,d1
    aa0e:	|  |        |      move.l d1,d0
    aa10:	|  |        |      add.l d0,d0
    aa12:	|  |        |      add.l d1,d0
    aa14:	|  |        |      add.l d0,d0
    aa16:	|  |        |      add.l d0,d0
    aa18:	|  |        |      lea (0,a1,d0.l),a0
    aa1c:	|  |        |      move.l 4(a0),d0
    aa20:	|  |        |      movea.l 24(sp),a0
    aa24:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    aa28:	|  |        |      movea.l 24(sp),a0
    aa2c:	|  |        |      move.w 104(a0),d0
    aa30:	|  |        +----- beq.w abe2 <drawPeople+0x5c6>
    aa34:	|  |        |      tst.l 20(sp)
    aa38:	|  |        +----- beq.w abe2 <drawPeople+0x5c6>
    aa3c:	|  |        |      movea.l 20(sp),a0
    aa40:	|  |        |      move.l 4(a0),d0
    aa44:	|  |        +----- beq.w abe2 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    aa48:	|  |        |      movea.l 20(sp),a0
    aa4c:	|  |        |      movea.l 4(a0),a1
    aa50:	|  |        |      movea.l 24(sp),a0
    aa54:	|  |        |      move.l 84(a0),d0
    aa58:	|  |        |      move.l d0,d1
    aa5a:	|  |        |      move.l d1,d0
    aa5c:	|  |        |      add.l d0,d0
    aa5e:	|  |        |      add.l d1,d0
    aa60:	|  |        |      add.l d0,d0
    aa62:	|  |        |      add.l d0,d0
    aa64:	|  |        |      lea (0,a1,d0.l),a0
    aa68:	|  |        |      move.l 8(a0),d0
    aa6c:	|  |        |  ,-- ble.w ab0e <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    aa70:	|  |        |  |   movea.l 20(sp),a0
    aa74:	|  |        |  |   movea.l 4(a0),a1
    aa78:	|  |        |  |   movea.l 24(sp),a0
    aa7c:	|  |        |  |   move.l 84(a0),d0
    aa80:	|  |        |  |   move.l d0,d1
    aa82:	|  |        |  |   move.l d1,d0
    aa84:	|  |        |  |   add.l d0,d0
    aa86:	|  |        |  |   add.l d1,d0
    aa88:	|  |        |  |   add.l d0,d0
    aa8a:	|  |        |  |   add.l d0,d0
    aa8c:	|  |        |  |   lea (0,a1,d0.l),a0
    aa90:	|  |        |  |   move.l 8(a0),d0
    aa94:	|  |        |  |   clr.l -(sp)
    aa96:	|  |        |  |   move.l d0,-(sp)
    aa98:	|  |        |  |   jsr d82e <startSound>
    aa9e:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    aaa0:	|  |        |  |   movea.l 24(sp),a0
    aaa4:	|  |        |  |   move.l 84(a0),d0
    aaa8:	|  |        |  |   addq.l #1,d0
    aaaa:	|  |        |  |   movea.l 24(sp),a0
    aaae:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    aab2:	|  |        |  |   movea.l 24(sp),a0
    aab6:	|  |        |  |   move.l 84(a0),d0
    aaba:	|  |        |  |   movea.l 24(sp),a0
    aabe:	|  |        |  |   movea.l 72(a0),a0
    aac2:	|  |        |  |   move.l 8(a0),d1
    aac6:	|  |        |  |   move.l d1,-(sp)
    aac8:	|  |        |  |   move.l d0,-(sp)
    aaca:	|  |        |  |   jsr 18372 <__modsi3>
    aad0:	|  |        |  |   addq.l #8,sp
    aad2:	|  |        |  |   movea.l 24(sp),a0
    aad6:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    aada:	|  |        |  |   movea.l 24(sp),a0
    aade:	|  |        |  |   movea.l 72(a0),a0
    aae2:	|  |        |  |   movea.l 4(a0),a1
    aae6:	|  |        |  |   movea.l 24(sp),a0
    aaea:	|  |        |  |   move.l 84(a0),d0
    aaee:	|  |        |  |   move.l d0,d1
    aaf0:	|  |        |  |   move.l d1,d0
    aaf2:	|  |        |  |   add.l d0,d0
    aaf4:	|  |        |  |   add.l d1,d0
    aaf6:	|  |        |  |   add.l d0,d0
    aaf8:	|  |        |  |   add.l d0,d0
    aafa:	|  |        |  |   lea (0,a1,d0.l),a0
    aafe:	|  |        |  |   move.l 4(a0),d0
    ab02:	|  |        |  |   movea.l 24(sp),a0
    ab06:	|  |        |  |   move.l d0,88(a0)
    ab0a:	|  |        +--|-- bra.w abe2 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    ab0e:	|  |        |  '-> movea.l 20(sp),a0
    ab12:	|  |        |      movea.l 4(a0),a1
    ab16:	|  |        |      movea.l 24(sp),a0
    ab1a:	|  |        |      move.l 84(a0),d0
    ab1e:	|  |        |      move.l d0,d1
    ab20:	|  |        |      move.l d1,d0
    ab22:	|  |        |      add.l d0,d0
    ab24:	|  |        |      add.l d1,d0
    ab26:	|  |        |      add.l d0,d0
    ab28:	|  |        |      add.l d0,d0
    ab2a:	|  |        |      lea (0,a1,d0.l),a0
    ab2e:	|  |        |      move.l 8(a0),d0
    ab32:	|  |        +----- beq.w abe2 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    ab36:	|  |        |      movea.l 1d158 <noStack>,a1
    ab3c:	|  |        |      movea.l 20(sp),a0
    ab40:	|  |        |      move.l 4(a0),d2
    ab44:	|  |        |      movea.l 24(sp),a0
    ab48:	|  |        |      move.l 84(a0),d0
    ab4c:	|  |        |      move.l d0,d1
    ab4e:	|  |        |      move.l d1,d0
    ab50:	|  |        |      add.l d0,d0
    ab52:	|  |        |      add.l d1,d0
    ab54:	|  |        |      add.l d0,d0
    ab56:	|  |        |      add.l d0,d0
    ab58:	|  |        |      movea.l d2,a0
    ab5a:	|  |        |      adda.l d0,a0
    ab5c:	|  |        |      move.l 8(a0),d0
    ab60:	|  |        |      neg.l d0
    ab62:	|  |        |      pea 1 <_start+0x1>
    ab66:	|  |        |      move.l a1,-(sp)
    ab68:	|  |        |      clr.l -(sp)
    ab6a:	|  |        |      clr.l -(sp)
    ab6c:	|  |        |      move.l d0,-(sp)
    ab6e:	|  |        |      jsr 7ac8 <startNewFunctionNum>
    ab74:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    ab78:	|  |        |      movea.l 24(sp),a0
    ab7c:	|  |        |      move.l 84(a0),d0
    ab80:	|  |        |      addq.l #1,d0
    ab82:	|  |        |      movea.l 24(sp),a0
    ab86:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    ab8a:	|  |        |      movea.l 24(sp),a0
    ab8e:	|  |        |      move.l 84(a0),d0
    ab92:	|  |        |      movea.l 24(sp),a0
    ab96:	|  |        |      movea.l 72(a0),a0
    ab9a:	|  |        |      move.l 8(a0),d1
    ab9e:	|  |        |      move.l d1,-(sp)
    aba0:	|  |        |      move.l d0,-(sp)
    aba2:	|  |        |      jsr 18372 <__modsi3>
    aba8:	|  |        |      addq.l #8,sp
    abaa:	|  |        |      movea.l 24(sp),a0
    abae:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    abb2:	|  |        |      movea.l 24(sp),a0
    abb6:	|  |        |      movea.l 72(a0),a0
    abba:	|  |        |      movea.l 4(a0),a1
    abbe:	|  |        |      movea.l 24(sp),a0
    abc2:	|  |        |      move.l 84(a0),d0
    abc6:	|  |        |      move.l d0,d1
    abc8:	|  |        |      move.l d1,d0
    abca:	|  |        |      add.l d0,d0
    abcc:	|  |        |      add.l d1,d0
    abce:	|  |        |      add.l d0,d0
    abd0:	|  |        |      add.l d0,d0
    abd2:	|  |        |      lea (0,a1,d0.l),a0
    abd6:	|  |        |      move.l 4(a0),d0
    abda:	|  |        |      movea.l 24(sp),a0
    abde:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    abe2:	|  |        '----> movea.l 24(sp),a0
    abe6:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    abec:	|  '-------------> tst.l 24(sp)
    abf0:	'----------------- bne.w a63e <drawPeople+0x22>
	}
}
    abf4:	                   nop
    abf6:	                   nop
    abf8:	                   move.l (sp)+,d2
    abfa:	                   lea 24(sp),sp
    abfe:	                   rts

0000ac00 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    ac00:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    ac02:	          pea 19908 <PutChar+0x152c>
    ac08:	          jsr 1793a <KPrintF>
    ac0e:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    ac10:	          move.l 1d1e8 <allPeople>,(sp)
	while (thisPerson) {
    ac16:	      ,-- bra.s ac2e <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    ac18:	,-----|-> movea.l (sp),a0
    ac1a:	|     |   movea.l 114(a0),a0
    ac1e:	|     |   move.l 4(a0),d0
    ac22:	|     |   cmp.l 8(sp),d0
    ac26:	|  ,--|-- beq.s ac34 <findPerson+0x34>
		thisPerson = thisPerson -> next;
    ac28:	|  |  |   movea.l (sp),a0
    ac2a:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    ac2e:	|  |  '-> tst.l (sp)
    ac30:	'--|----- bne.s ac18 <findPerson+0x18>
    ac32:	   |  ,-- bra.s ac36 <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    ac34:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    ac36:	      '-> pea 1991c <PutChar+0x1540>
    ac3c:	          jsr 1793a <KPrintF>
    ac42:	          addq.l #4,sp
	return thisPerson;
    ac44:	          move.l (sp),d0
}
    ac46:	          addq.l #4,sp
    ac48:	          rts

0000ac4a <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    ac4a:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    ac4c:	       move.l 12(sp),-(sp)
    ac50:	       jsr ac00 <findPerson>
    ac56:	       addq.l #4,sp
    ac58:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    ac5a:	   ,-- bne.s ac60 <floatCharacter+0x16>
    ac5c:	   |   clr.w d0
    ac5e:	,--|-- bra.s ac6a <floatCharacter+0x20>
	moveMe -> floaty = f;
    ac60:	|  '-> movea.l (sp),a0
    ac62:	|      move.l 8(sp),24(a0)
	return TRUE;
    ac68:	|      moveq #1,d0
}
    ac6a:	'----> addq.l #4,sp
    ac6c:	       rts

0000ac6e <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    ac6e:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    ac70:	          tst.l 8(sp)
    ac74:	      ,-- bne.s ac82 <forceWalkingPerson+0x14>
    ac76:	      |   tst.l 12(sp)
    ac7a:	      +-- bne.s ac82 <forceWalkingPerson+0x14>
    ac7c:	      |   clr.w d0
    ac7e:	,-----|-- bra.w ad14 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    ac82:	|     '-> move.l 16(sp),-(sp)
    ac86:	|         jsr ac00 <findPerson>
    ac8c:	|         addq.l #4,sp
    ac8e:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    ac90:	|     ,-- bne.s ac96 <forceWalkingPerson+0x28>
    ac92:	|     |   clr.w d0
    ac94:	+-----|-- bra.s ad14 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    ac96:	|     '-> movea.l (sp),a0
    ac98:	|         move.l 68(a0),d0
    ac9c:	|     ,-- beq.s acae <forceWalkingPerson+0x40>
    ac9e:	|     |   movea.l (sp),a0
    aca0:	|     |   move.l 68(a0),d0
    aca4:	|     |   move.l d0,-(sp)
    aca6:	|     |   jsr 55fa <abortFunction>
    acac:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    acae:	|     '-> movea.l (sp),a0
    acb0:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    acb6:	|         movea.l (sp),a0
    acb8:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    acbc:	|         movea.l (sp),a0
    acbe:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    acc4:	|         movea.l (sp),a0
    acc6:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    accc:	|         movea.l (sp),a0
    acce:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    acd4:	|         movea.l (sp),a0
    acd6:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    acda:	|         movea.l (sp),a0
    acdc:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    ace0:	|         move.l (sp),-(sp)
    ace2:	|         jsr 9f62 <doBorderStuff>
    ace8:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    acea:	|         pea 1 <_start+0x1>
    acee:	|         move.l 4(sp),-(sp)
    acf2:	|         jsr c5a8 <walkMe>
    acf8:	|         addq.l #8,sp
    acfa:	|         tst.w d0
    acfc:	|     ,-- bne.s ad06 <forceWalkingPerson+0x98>
    acfe:	|     |   movea.l (sp),a0
    ad00:	|     |   move.w 66(a0),d0
    ad04:	|  ,--|-- beq.s ad12 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    ad06:	|  |  '-> movea.l (sp),a0
    ad08:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    ad0e:	|  |      moveq #1,d0
    ad10:	+--|----- bra.s ad14 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    ad12:	|  '----> clr.w d0
    }
}
    ad14:	'-------> addq.l #4,sp
    ad16:	          rts

0000ad18 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    ad18:	                lea -56(sp),sp
    ad1c:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    ad1e:	                pea 19931 <PutChar+0x1555>
    ad24:	                jsr 1793a <KPrintF>
    ad2a:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    ad2c:	                move.l #320,56(sp)
    ad34:	                move.l #200,52(sp)
    ad3c:	                moveq #-1,d0
    ad3e:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    ad42:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    ad4a:	                clr.l 44(sp)
    ad4e:	   ,----------- bra.w af26 <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    ad52:	,--|----------> movea.l 1d2a0 <currentFloor>,a0
    ad58:	|  |            move.l 12(a0),d1
    ad5c:	|  |            move.l 44(sp),d0
    ad60:	|  |            lsl.l #3,d0
    ad62:	|  |            movea.l d1,a0
    ad64:	|  |            adda.l d0,a0
    ad66:	|  |            move.l (a0),d0
    ad68:	|  |            move.l d0,d1
    ad6a:	|  |            subq.l #1,d1
    ad6c:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    ad70:	|  |            clr.l 40(sp)
    ad74:	|  |     ,----- bra.w af04 <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    ad78:	|  |  ,--|----> movea.l 1d2a0 <currentFloor>,a0
    ad7e:	|  |  |  |      move.l 4(a0),d1
    ad82:	|  |  |  |      movea.l 1d2a0 <currentFloor>,a0
    ad88:	|  |  |  |      movea.l 12(a0),a0
    ad8c:	|  |  |  |      move.l 44(sp),d0
    ad90:	|  |  |  |      lsl.l #3,d0
    ad92:	|  |  |  |      adda.l d0,a0
    ad94:	|  |  |  |      movea.l 4(a0),a0
    ad98:	|  |  |  |      move.l 40(sp),d0
    ad9c:	|  |  |  |      add.l d0,d0
    ad9e:	|  |  |  |      add.l d0,d0
    ada0:	|  |  |  |      adda.l d0,a0
    ada2:	|  |  |  |      move.l (a0),d0
    ada4:	|  |  |  |      lsl.l #3,d0
    ada6:	|  |  |  |      movea.l d1,a0
    ada8:	|  |  |  |      adda.l d0,a0
    adaa:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    adae:	|  |  |  |      movea.l 1d2a0 <currentFloor>,a0
    adb4:	|  |  |  |      move.l 4(a0),d1
    adb8:	|  |  |  |      movea.l 1d2a0 <currentFloor>,a0
    adbe:	|  |  |  |      movea.l 12(a0),a0
    adc2:	|  |  |  |      move.l 44(sp),d0
    adc6:	|  |  |  |      lsl.l #3,d0
    adc8:	|  |  |  |      adda.l d0,a0
    adca:	|  |  |  |      movea.l 4(a0),a0
    adce:	|  |  |  |      move.l 40(sp),d0
    add2:	|  |  |  |      add.l d0,d0
    add4:	|  |  |  |      add.l d0,d0
    add6:	|  |  |  |      adda.l d0,a0
    add8:	|  |  |  |      move.l (a0),d0
    adda:	|  |  |  |      lsl.l #3,d0
    addc:	|  |  |  |      movea.l d1,a0
    adde:	|  |  |  |      adda.l d0,a0
    ade0:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    ade6:	|  |  |  |      movea.l 1d2a0 <currentFloor>,a0
    adec:	|  |  |  |      move.l 4(a0),d1
    adf0:	|  |  |  |      movea.l 1d2a0 <currentFloor>,a0
    adf6:	|  |  |  |      movea.l 12(a0),a0
    adfa:	|  |  |  |      move.l 44(sp),d0
    adfe:	|  |  |  |      lsl.l #3,d0
    ae00:	|  |  |  |      adda.l d0,a0
    ae02:	|  |  |  |      movea.l 4(a0),a0
    ae06:	|  |  |  |      move.l 36(sp),d0
    ae0a:	|  |  |  |      add.l d0,d0
    ae0c:	|  |  |  |      add.l d0,d0
    ae0e:	|  |  |  |      adda.l d0,a0
    ae10:	|  |  |  |      move.l (a0),d0
    ae12:	|  |  |  |      lsl.l #3,d0
    ae14:	|  |  |  |      movea.l d1,a0
    ae16:	|  |  |  |      adda.l d0,a0
    ae18:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    ae1c:	|  |  |  |      movea.l 1d2a0 <currentFloor>,a0
    ae22:	|  |  |  |      move.l 4(a0),d1
    ae26:	|  |  |  |      movea.l 1d2a0 <currentFloor>,a0
    ae2c:	|  |  |  |      movea.l 12(a0),a0
    ae30:	|  |  |  |      move.l 44(sp),d0
    ae34:	|  |  |  |      lsl.l #3,d0
    ae36:	|  |  |  |      adda.l d0,a0
    ae38:	|  |  |  |      movea.l 4(a0),a0
    ae3c:	|  |  |  |      move.l 36(sp),d0
    ae40:	|  |  |  |      add.l d0,d0
    ae42:	|  |  |  |      add.l d0,d0
    ae44:	|  |  |  |      adda.l d0,a0
    ae46:	|  |  |  |      move.l (a0),d0
    ae48:	|  |  |  |      lsl.l #3,d0
    ae4a:	|  |  |  |      movea.l d1,a0
    ae4c:	|  |  |  |      adda.l d0,a0
    ae4e:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    ae54:	|  |  |  |      movea.l 68(sp),a0
    ae58:	|  |  |  |      move.l (a0),d1
    ae5a:	|  |  |  |      movea.l 64(sp),a0
    ae5e:	|  |  |  |      move.l (a0),d0
    ae60:	|  |  |  |      move.l d1,-(sp)
    ae62:	|  |  |  |      move.l d0,-(sp)
    ae64:	|  |  |  |      move.l 24(sp),-(sp)
    ae68:	|  |  |  |      move.l 32(sp),-(sp)
    ae6c:	|  |  |  |      move.l 40(sp),-(sp)
    ae70:	|  |  |  |      move.l 48(sp),-(sp)
    ae74:	|  |  |  |      lea 28(sp),a0
    ae78:	|  |  |  |      move.l a0,-(sp)
    ae7a:	|  |  |  |      lea 36(sp),a0
    ae7e:	|  |  |  |      move.l a0,-(sp)
    ae80:	|  |  |  |      jsr 16738 <closestPointOnLine>
    ae86:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    ae8a:	|  |  |  |      movea.l 64(sp),a0
    ae8e:	|  |  |  |      move.l (a0),d0
    ae90:	|  |  |  |      move.l 8(sp),d1
    ae94:	|  |  |  |      move.l d0,d2
    ae96:	|  |  |  |      sub.l d1,d2
    ae98:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    ae9c:	|  |  |  |      movea.l 68(sp),a0
    aea0:	|  |  |  |      move.l (a0),d0
    aea2:	|  |  |  |      move.l 4(sp),d1
    aea6:	|  |  |  |      move.l d0,d2
    aea8:	|  |  |  |      sub.l d1,d2
    aeaa:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    aeae:	|  |  |  |      move.l 28(sp),-(sp)
    aeb2:	|  |  |  |      move.l 32(sp),-(sp)
    aeb6:	|  |  |  |      jsr 182c6 <__mulsi3>
    aebc:	|  |  |  |      addq.l #8,sp
    aebe:	|  |  |  |      move.l d0,d2
    aec0:	|  |  |  |      move.l 24(sp),-(sp)
    aec4:	|  |  |  |      move.l 28(sp),-(sp)
    aec8:	|  |  |  |      jsr 182c6 <__mulsi3>
    aece:	|  |  |  |      addq.l #8,sp
    aed0:	|  |  |  |      move.l d2,d1
    aed2:	|  |  |  |      add.l d0,d1
    aed4:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    aed8:	|  |  |  |      move.l 12(sp),d2
    aedc:	|  |  |  |      cmp.l 32(sp),d2
    aee0:	|  |  |  |  ,-- bge.s aefa <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    aee2:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    aee8:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    aeee:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    aef4:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    aefa:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    af00:	|  |  |  |      addq.l #1,40(sp)
    af04:	|  |  |  '----> movea.l 1d2a0 <currentFloor>,a0
    af0a:	|  |  |         move.l 12(a0),d1
    af0e:	|  |  |         move.l 44(sp),d0
    af12:	|  |  |         lsl.l #3,d0
    af14:	|  |  |         movea.l d1,a0
    af16:	|  |  |         adda.l d0,a0
    af18:	|  |  |         move.l (a0),d0
    af1a:	|  |  |         cmp.l 40(sp),d0
    af1e:	|  |  '-------- bgt.w ad78 <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    af22:	|  |            addq.l #1,44(sp)
    af26:	|  '----------> movea.l 1d2a0 <currentFloor>,a0
    af2c:	|               move.l 8(a0),d0
    af30:	|               cmp.l 44(sp),d0
    af34:	'-------------- bgt.w ad52 <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    af38:	                moveq #-1,d0
    af3a:	                cmp.l 48(sp),d0
    af3e:	            ,-- bne.s af44 <handleClosestPoint+0x22c>
    af40:	            |   clr.w d0
    af42:	         ,--|-- bra.s af5e <handleClosestPoint+0x246>
	*setX = gotX;
    af44:	         |  '-> movea.l 64(sp),a0
    af48:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    af4c:	         |      movea.l 68(sp),a0
    af50:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    af54:	         |      movea.l 72(sp),a0
    af58:	         |      move.l 48(sp),(a0)

	return TRUE;
    af5c:	         |      moveq #1,d0
}
    af5e:	         '----> move.l (sp)+,d2
    af60:	                lea 56(sp),sp
    af64:	                rts

0000af66 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    af66:	clr.l 1d1fc <personRegion+0x10>
	personRegion.sY = 0;
    af6c:	clr.l 1d200 <personRegion+0x14>
	personRegion.di = -1;
    af72:	moveq #-1,d0
    af74:	move.l d0,1d204 <personRegion+0x18>
	allScreenRegions = NULL;
    af7a:	clr.l 1d294 <allScreenRegions>

	return TRUE;
    af80:	moveq #1,d0
}
    af82:	rts

0000af84 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    af84:	          subq.l #4,sp
    af86:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    af88:	          tst.l 12(sp)
    af8c:	      ,-- bne.s af94 <jumpPerson+0x10>
    af8e:	      |   tst.l 16(sp)
    af92:	,-----|-- beq.s b008 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    af94:	|     '-> move.l 20(sp),-(sp)
    af98:	|         jsr ac00 <findPerson>
    af9e:	|         addq.l #4,sp
    afa0:	|         move.l d0,4(sp)
    if (!moveMe) return;
    afa4:	|  ,----- beq.s b00c <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    afa6:	|  |      movea.l 4(sp),a0
    afaa:	|  |      move.l 68(a0),d0
    afae:	|  |  ,-- beq.s afc2 <jumpPerson+0x3e>
    afb0:	|  |  |   movea.l 4(sp),a0
    afb4:	|  |  |   move.l 68(a0),d0
    afb8:	|  |  |   move.l d0,-(sp)
    afba:	|  |  |   jsr 55fa <abortFunction>
    afc0:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    afc2:	|  |  '-> movea.l 4(sp),a0
    afc6:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    afca:	|  |      movea.l 4(sp),a0
    afce:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    afd2:	|  |      movea.l 4(sp),a0
    afd6:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    afda:	|  |      move.l 16(sp),-(sp)
    afde:	|  |      jsr 17d6c <__floatsisf>
    afe4:	|  |      addq.l #4,sp
    afe6:	|  |      move.l d0,d2
    afe8:	|  |      move.l 12(sp),-(sp)
    afec:	|  |      jsr 17d6c <__floatsisf>
    aff2:	|  |      addq.l #4,sp
    aff4:	|  |      move.l d2,-(sp)
    aff6:	|  |      move.l d0,-(sp)
    aff8:	|  |      move.l 12(sp),-(sp)
    affc:	|  |      jsr b3aa <moveAndScale>
    b002:	|  |      lea 12(sp),sp
    b006:	|  |  ,-- bra.s b00e <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    b008:	'--|--|-> nop
    b00a:	   |  +-- bra.s b00e <jumpPerson+0x8a>
    if (!moveMe) return;
    b00c:	   '--|-> nop
}
    b00e:	      '-> move.l (sp)+,d2
    b010:	          addq.l #4,sp
    b012:	          rts

0000b014 <killAllPeople>:


void killAllPeople () {
    b014:	          subq.l #8,sp
    b016:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    b018:	   ,----- bra.s b084 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    b01a:	,--|----> movea.l 1d1e8 <allPeople>,a0
    b020:	|  |      move.l 68(a0),d0
    b024:	|  |  ,-- beq.s b03a <killAllPeople+0x26>
    b026:	|  |  |   movea.l 1d1e8 <allPeople>,a0
    b02c:	|  |  |   move.l 68(a0),d0
    b030:	|  |  |   move.l d0,-(sp)
    b032:	|  |  |   jsr 55fa <abortFunction>
    b038:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    b03a:	|  |  '-> movea.l 1d1e8 <allPeople>,a0
    b040:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    b044:	|  |      move.l 1d1e8 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    b04c:	|  |      movea.l 1d1e8 <allPeople>,a0
    b052:	|  |      move.l 36(a0),d0
    b056:	|  |      move.l d0,1d1e8 <allPeople>
		removeObjectType (killPeople -> thisType);
    b05c:	|  |      movea.l 8(sp),a0
    b060:	|  |      move.l 114(a0),d0
    b064:	|  |      move.l d0,-(sp)
    b066:	|  |      jsr df16 <removeObjectType>
    b06c:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    b06e:	|  |      move.l 8(sp),4(sp)
    b074:	|  |      move.l 1d188 <SysBase>,d0
    b07a:	|  |      movea.l d0,a6
    b07c:	|  |      movea.l 4(sp),a1
    b080:	|  |      jsr -690(a6)
	while (allPeople) {
    b084:	|  '----> move.l 1d1e8 <allPeople>,d0
    b08a:	'-------- bne.s b01a <killAllPeople+0x6>
	}
}
    b08c:	          nop
    b08e:	          nop
    b090:	          movea.l (sp)+,a6
    b092:	          addq.l #8,sp
    b094:	          rts

0000b096 <killMostPeople>:

void killMostPeople() {
    b096:	          lea -12(sp),sp
    b09a:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    b09c:	          move.l #119272,12(sp)

    while (*lookyHere) {
    b0a4:	   ,----- bra.w b12a <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    b0a8:	,--|----> movea.l 12(sp),a0
    b0ac:	|  |      movea.l (a0),a0
    b0ae:	|  |      move.l 118(a0),d0
    b0b2:	|  |      moveq #32,d1
    b0b4:	|  |      and.l d1,d0
    b0b6:	|  |  ,-- beq.s b0c8 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    b0b8:	|  |  |   movea.l 12(sp),a0
    b0bc:	|  |  |   move.l (a0),d0
    b0be:	|  |  |   moveq #36,d1
    b0c0:	|  |  |   add.l d0,d1
    b0c2:	|  |  |   move.l d1,12(sp)
    b0c6:	|  +--|-- bra.s b12a <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    b0c8:	|  |  '-> movea.l 12(sp),a0
    b0cc:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    b0d0:	|  |      movea.l 8(sp),a0
    b0d4:	|  |      move.l 36(a0),d0
    b0d8:	|  |      movea.l 12(sp),a0
    b0dc:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    b0de:	|  |      movea.l 8(sp),a0
    b0e2:	|  |      move.l 68(a0),d0
    b0e6:	|  |  ,-- beq.s b0fa <killMostPeople+0x64>
    b0e8:	|  |  |   movea.l 8(sp),a0
    b0ec:	|  |  |   move.l 68(a0),d0
    b0f0:	|  |  |   move.l d0,-(sp)
    b0f2:	|  |  |   jsr 55fa <abortFunction>
    b0f8:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    b0fa:	|  |  '-> movea.l 8(sp),a0
    b0fe:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    b102:	|  |      movea.l 8(sp),a0
    b106:	|  |      move.l 114(a0),d0
    b10a:	|  |      move.l d0,-(sp)
    b10c:	|  |      jsr df16 <removeObjectType>
    b112:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    b114:	|  |      move.l 8(sp),4(sp)
    b11a:	|  |      move.l 1d188 <SysBase>,d0
    b120:	|  |      movea.l d0,a6
    b122:	|  |      movea.l 4(sp),a1
    b126:	|  |      jsr -690(a6)
    while (*lookyHere) {
    b12a:	|  '----> movea.l 12(sp),a0
    b12e:	|         move.l (a0),d0
    b130:	'-------- bne.w b0a8 <killMostPeople+0x12>
        }
    }
}
    b134:	          nop
    b136:	          nop
    b138:	          movea.l (sp)+,a6
    b13a:	          lea 12(sp),sp
    b13e:	          rts

0000b140 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    b140:	clr.l -(sp)
    b142:	move.l sp,d0
    b144:	addq.l #8,d0
    b146:	move.l d0,-(sp)
    b148:	jsr 479c <setFrames>
    b14e:	addq.l #8,sp
}
    b150:	nop
    b152:	rts

0000b154 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    b154:	          lea -12(sp),sp
    b158:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    b15a:	          pea 199b5 <PutChar+0x15d9>
    b160:	          jsr 1793a <KPrintF>
    b166:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    b168:	          tst.l 20(sp)
    b16c:	      ,-- bne.s b17a <makeWalkingPerson+0x26>
    b16e:	      |   tst.l 24(sp)
    b172:	      +-- bne.s b17a <makeWalkingPerson+0x26>
    b174:	      |   clr.w d0
    b176:	,-----|-- bra.w b33c <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    b17a:	|     '-> movea.l 1d2a0 <currentFloor>,a0
    b180:	|         move.l 8(a0),d0
    b184:	|     ,-- bne.s b18c <makeWalkingPerson+0x38>
    b186:	|     |   clr.w d0
    b188:	+-----|-- bra.w b33c <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    b18c:	|     '-> move.l 28(sp),d0
    b190:	|         move.l d0,-(sp)
    b192:	|         jsr ac00 <findPerson>
    b198:	|         addq.l #4,sp
    b19a:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    b19e:	|     ,-- bne.s b1ba <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    b1a0:	|     |   move.l 28(sp),d0
    b1a4:	|     |   move.l d0,-(sp)
    b1a6:	|     |   pea 199d0 <PutChar+0x15f4>
    b1ac:	|     |   jsr 1793a <KPrintF>
    b1b2:	|     |   addq.l #8,sp
		return FALSE;
    b1b4:	|     |   clr.w d0
    b1b6:	+-----|-- bra.w b33c <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    b1ba:	|     '-> movea.l 12(sp),a0
    b1be:	|         move.l 68(a0),d0
    b1c2:	|     ,-- beq.s b1d6 <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    b1c4:	|     |   movea.l 12(sp),a0
    b1c8:	|     |   move.l 68(a0),d0
    b1cc:	|     |   move.l d0,-(sp)
    b1ce:	|     |   jsr 55fa <abortFunction>
    b1d4:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    b1d6:	|     '-> movea.l 12(sp),a0
    b1da:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    b1de:	|         movea.l 12(sp),a0
    b1e2:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    b1e8:	|         movea.l 12(sp),a0
    b1ec:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    b1f2:	|         movea.l 12(sp),a0
    b1f6:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    b1fc:	|         movea.l 12(sp),a0
    b200:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    b206:	|         move.l 24(sp),-(sp)
    b20a:	|         move.l 24(sp),-(sp)
    b20e:	|         jsr 16c80 <inFloor>
    b214:	|         addq.l #8,sp
    b216:	|         movea.l 12(sp),a0
    b21a:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    b21e:	|         movea.l 12(sp),a0
    b222:	|         move.l 60(a0),d0
    b226:	|         moveq #-1,d1
    b228:	|         cmp.l d0,d1
    b22a:	|     ,-- bne.s b25a <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    b22c:	|     |   movea.w #60,a0
    b230:	|     |   adda.l 12(sp),a0
    b234:	|     |   moveq #44,d1
    b236:	|     |   add.l 12(sp),d1
    b23a:	|     |   moveq #40,d0
    b23c:	|     |   add.l 12(sp),d0
    b240:	|     |   move.l a0,-(sp)
    b242:	|     |   move.l d1,-(sp)
    b244:	|     |   move.l d0,-(sp)
    b246:	|     |   jsr ad18 <handleClosestPoint>
    b24c:	|     |   lea 12(sp),sp
    b250:	|     |   tst.w d0
    b252:	|     +-- bne.s b25a <makeWalkingPerson+0x106>
    b254:	|     |   clr.w d0
    b256:	+-----|-- bra.w b33c <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    b25a:	|     '-> movea.l 12(sp),a0
    b25e:	|         move.l 4(a0),d0
    b262:	|         move.l d0,-(sp)
    b264:	|         jsr 17d04 <__fixsfsi>
    b26a:	|         addq.l #4,sp
    b26c:	|         move.l d0,d2
    b26e:	|         movea.l 12(sp),a0
    b272:	|         move.l (a0),d0
    b274:	|         move.l d0,-(sp)
    b276:	|         jsr 17d04 <__fixsfsi>
    b27c:	|         addq.l #4,sp
    b27e:	|         move.l d2,-(sp)
    b280:	|         move.l d0,-(sp)
    b282:	|         jsr 16c80 <inFloor>
    b288:	|         addq.l #8,sp
    b28a:	|         movea.l 12(sp),a0
    b28e:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    b292:	|         movea.l 12(sp),a0
    b296:	|         move.l 56(a0),d0
    b29a:	|         moveq #-1,d1
    b29c:	|         cmp.l d0,d1
    b29e:	|     ,-- bne.s b2f0 <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    b2a0:	|     |   movea.l 12(sp),a0
    b2a4:	|     |   move.l (a0),d0
    b2a6:	|     |   move.l d0,-(sp)
    b2a8:	|     |   jsr 17d04 <__fixsfsi>
    b2ae:	|     |   addq.l #4,sp
    b2b0:	|     |   move.l d0,8(sp)
    b2b4:	|     |   movea.l 12(sp),a0
    b2b8:	|     |   move.l 4(a0),d0
    b2bc:	|     |   move.l d0,-(sp)
    b2be:	|     |   jsr 17d04 <__fixsfsi>
    b2c4:	|     |   addq.l #4,sp
    b2c6:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    b2ca:	|     |   moveq #56,d0
    b2cc:	|     |   add.l 12(sp),d0
    b2d0:	|     |   move.l d0,-(sp)
    b2d2:	|     |   lea 8(sp),a0
    b2d6:	|     |   move.l a0,-(sp)
    b2d8:	|     |   moveq #16,d0
    b2da:	|     |   add.l sp,d0
    b2dc:	|     |   move.l d0,-(sp)
    b2de:	|     |   jsr ad18 <handleClosestPoint>
    b2e4:	|     |   lea 12(sp),sp
    b2e8:	|     |   tst.w d0
    b2ea:	|     +-- bne.s b2f0 <makeWalkingPerson+0x19c>
    b2ec:	|     |   clr.w d0
    b2ee:	+-----|-- bra.s b33c <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    b2f0:	|     '-> move.l 12(sp),-(sp)
    b2f4:	|         jsr 9f62 <doBorderStuff>
    b2fa:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    b2fc:	|         clr.l -(sp)
    b2fe:	|         move.l 16(sp),-(sp)
    b302:	|         jsr c5a8 <walkMe>
    b308:	|         addq.l #8,sp
    b30a:	|         tst.w d0
    b30c:	|     ,-- bne.s b318 <makeWalkingPerson+0x1c4>
    b30e:	|     |   movea.l 12(sp),a0
    b312:	|     |   move.w 66(a0),d0
    b316:	|  ,--|-- beq.s b33a <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    b318:	|  |  '-> lea 28(sp),a0
    b31c:	|  |      move.l a0,-(sp)
    b31e:	|  |      pea 199f9 <PutChar+0x161d>
    b324:	|  |      jsr 1793a <KPrintF>
    b32a:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    b32c:	|  |      movea.l 12(sp),a0
    b330:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    b336:	|  |      moveq #1,d0
    b338:	+--|----- bra.s b33c <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    b33a:	|  '----> clr.w d0
	}
}
    b33c:	'-------> move.l (sp)+,d2
    b33e:	          lea 12(sp),sp
    b342:	          rts

0000b344 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    b344:	       lea -16(sp),sp
    b348:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    b34a:	       moveq #12,d0
    b34c:	       move.l d0,16(sp)
    b350:	       clr.l 12(sp)
    b354:	       move.l 1d188 <SysBase>,d0
    b35a:	       movea.l d0,a6
    b35c:	       move.l 16(sp),d0
    b360:	       move.l 12(sp),d1
    b364:	       jsr -684(a6)
    b368:	       move.l d0,8(sp)
    b36c:	       move.l 8(sp),d0
    b370:	       move.l d0,4(sp)
    if(newAnim == 0) {
    b374:	   ,-- bne.s b388 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    b376:	   |   pea 19a2c <PutChar+0x1650>
    b37c:	   |   jsr 1793a <KPrintF>
    b382:	   |   addq.l #4,sp
        return NULL;    
    b384:	   |   moveq #0,d0
    b386:	,--|-- bra.s b3a2 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    b388:	|  '-> movea.l 4(sp),a0
    b38c:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    b38e:	|      movea.l 4(sp),a0
    b392:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    b396:	|      movea.l 4(sp),a0
    b39a:	|      clr.l 4(a0)
	return newAnim;
    b39e:	|      move.l 4(sp),d0
}
    b3a2:	'----> movea.l (sp)+,a6
    b3a4:	       lea 16(sp),sp
    b3a8:	       rts

0000b3aa <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    b3aa:	    move.l d2,-(sp)
	me->x = x;
    b3ac:	    movea.l 8(sp),a0
    b3b0:	    move.l 12(sp),(a0)
	me->y = y;
    b3b4:	    movea.l 8(sp),a0
    b3b8:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    b3be:	    movea.l 8(sp),a0
    b3c2:	    clr.l 8(a0)
	me->oldy = 0;
    b3c6:	    movea.l 8(sp),a0
    b3ca:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    b3ce:	    movea.l 8(sp),a0
    b3d2:	    move.l 118(a0),d0
    b3d6:	    moveq #2,d1
    b3d8:	    and.l d1,d0
    b3da:	,-- bne.s b432 <moveAndScale+0x88>
    b3dc:	|   move.w 1cb10 <scaleDivide>,d0
    b3e2:	+-- beq.s b432 <moveAndScale+0x88>
    b3e4:	|   movea.l 8(sp),a0
    b3e8:	|   move.l 4(a0),d2
    b3ec:	|   move.w 1cb0e <scaleHorizon>,d0
    b3f2:	|   movea.w d0,a0
    b3f4:	|   move.l a0,-(sp)
    b3f6:	|   jsr 17d6c <__floatsisf>
    b3fc:	|   addq.l #4,sp
    b3fe:	|   move.l d0,-(sp)
    b400:	|   move.l d2,-(sp)
    b402:	|   jsr 18060 <__subsf3>
    b408:	|   addq.l #8,sp
    b40a:	|   move.l d0,d2
    b40c:	|   move.w 1cb10 <scaleDivide>,d0
    b412:	|   movea.w d0,a0
    b414:	|   move.l a0,-(sp)
    b416:	|   jsr 17d6c <__floatsisf>
    b41c:	|   addq.l #4,sp
    b41e:	|   move.l d0,-(sp)
    b420:	|   move.l d2,-(sp)
    b422:	|   jsr 17c22 <__divsf3>
    b428:	|   addq.l #8,sp
    b42a:	|   movea.l 8(sp),a0
    b42e:	|   move.l d0,32(a0)
}
    b432:	'-> nop
    b434:	    move.l (sp)+,d2
    b436:	    rts

0000b438 <removeOneCharacter>:

void removeOneCharacter (int i) {
    b438:	          lea -16(sp),sp
    b43c:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    b43e:	          move.l 24(sp),-(sp)
    b442:	          jsr ac00 <findPerson>
    b448:	          addq.l #4,sp
    b44a:	          move.l d0,8(sp)

    if (p) {
    b44e:	,-------- beq.w b52e <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    b452:	|         move.l 1d298 <overRegion>,d0
    b458:	|         cmpi.l #119276,d0
    b45e:	|     ,-- bne.s b47c <removeOneCharacter+0x44>
    b460:	|     |   movea.l 1d298 <overRegion>,a0
    b466:	|     |   move.l 28(a0),d1
    b46a:	|     |   movea.l 8(sp),a0
    b46e:	|     |   move.l 114(a0),d0
    b472:	|     |   cmp.l d1,d0
    b474:	|     +-- bne.s b47c <removeOneCharacter+0x44>
            overRegion = NULL;
    b476:	|     |   clr.l 1d298 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    b47c:	|     '-> movea.l 8(sp),a0
    b480:	|         move.l 68(a0),d0
    b484:	|     ,-- beq.s b498 <removeOneCharacter+0x60>
    b486:	|     |   movea.l 8(sp),a0
    b48a:	|     |   move.l 68(a0),d0
    b48e:	|     |   move.l d0,-(sp)
    b490:	|     |   jsr 55fa <abortFunction>
    b496:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    b498:	|     '-> movea.l 8(sp),a0
    b49c:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    b4a0:	|         clr.l 12(sp)
    b4a4:	|     ,-- bra.s b4cc <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    b4a6:	|  ,--|-> movea.l 8(sp),a0
    b4aa:	|  |  |   movea.l 80(a0),a0
    b4ae:	|  |  |   move.l (a0),d1
    b4b0:	|  |  |   move.l 12(sp),d0
    b4b4:	|  |  |   add.l d0,d0
    b4b6:	|  |  |   add.l d0,d0
    b4b8:	|  |  |   movea.l d1,a0
    b4ba:	|  |  |   adda.l d0,a0
    b4bc:	|  |  |   move.l (a0),d0
    b4be:	|  |  |   move.l d0,-(sp)
    b4c0:	|  |  |   jsr 9ede <deleteAnim>
    b4c6:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    b4c8:	|  |  |   addq.l #1,12(sp)
    b4cc:	|  |  '-> moveq #2,d0
    b4ce:	|  |      cmp.l 12(sp),d0
    b4d2:	|  '----- bge.s b4a6 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    b4d4:	|         move.l #119272,16(sp)
    b4dc:	|     ,-- bra.s b4ec <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    b4de:	|  ,--|-> movea.l 16(sp),a0
    b4e2:	|  |  |   move.l (a0),d0
    b4e4:	|  |  |   moveq #36,d1
    b4e6:	|  |  |   add.l d0,d1
    b4e8:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    b4ec:	|  |  '-> movea.l 16(sp),a0
    b4f0:	|  |      move.l (a0),d0
    b4f2:	|  |      cmp.l 8(sp),d0
    b4f6:	|  '----- bne.s b4de <removeOneCharacter+0xa6>

        *killPeople = p->next;
    b4f8:	|         movea.l 8(sp),a0
    b4fc:	|         move.l 36(a0),d0
    b500:	|         movea.l 16(sp),a0
    b504:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    b506:	|         movea.l 8(sp),a0
    b50a:	|         move.l 114(a0),d0
    b50e:	|         move.l d0,-(sp)
    b510:	|         jsr df16 <removeObjectType>
    b516:	|         addq.l #4,sp
        FreeVec(p);
    b518:	|         move.l 8(sp),4(sp)
    b51e:	|         move.l 1d188 <SysBase>,d0
    b524:	|         movea.l d0,a6
    b526:	|         movea.l 4(sp),a1
    b52a:	|         jsr -690(a6)
		
    }
}
    b52e:	'-------> nop
    b530:	          movea.l (sp)+,a6
    b532:	          lea 16(sp),sp
    b536:	          rts

0000b538 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b538:	       subq.l #8,sp
    b53a:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b53c:	       movea.l 16(sp),a0
    b540:	       movea.l 80(a0),a0
    b544:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b54a:	       movea.l 16(sp),a0
    b54e:	       move.l 92(a0),d2
    b552:	       move.l 4(sp),-(sp)
    b556:	       pea b4 <_start+0xb4>
    b55a:	       jsr 18344 <__divsi3>
    b560:	       addq.l #8,sp
    b562:	       add.l d2,d0
    b564:	       move.l d0,d1
    b566:	       addi.l #180,d1
    b56c:	       movea.l 16(sp),a0
    b570:	       move.l 100(a0),d0
    b574:	       move.l d1,d2
    b576:	       add.l d0,d2
    b578:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b57c:	   ,-- bra.s b586 <rethinkAngle+0x4e>
    b57e:	,--|-> addi.l #-360,8(sp)
    b586:	|  '-> cmpi.l #359,8(sp)
    b58e:	'----- bgt.s b57e <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b590:	       move.l 4(sp),-(sp)
    b594:	       move.l 12(sp),-(sp)
    b598:	       jsr 182c6 <__mulsi3>
    b59e:	       addq.l #8,sp
    b5a0:	       pea 168 <decodeFilename+0x50>
    b5a4:	       move.l d0,-(sp)
    b5a6:	       jsr 18344 <__divsi3>
    b5ac:	       addq.l #8,sp
    b5ae:	       movea.l 16(sp),a0
    b5b2:	       move.l d0,106(a0)
}
    b5b6:	       nop
    b5b8:	       move.l (sp)+,d2
    b5ba:	       addq.l #8,sp
    b5bc:	       rts

0000b5be <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b5be:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b5c0:	          movea.l 8(sp),a0
    b5c4:	          move.l 8(a0),d0
    b5c8:	          move.l 12(sp),-(sp)
    b5cc:	          move.l d0,-(sp)
    b5ce:	          jsr 8d0 <put2bytes>
    b5d4:	          addq.l #8,sp
	if (p -> numFrames) {
    b5d6:	          movea.l 8(sp),a0
    b5da:	          move.l 8(a0),d0
    b5de:	,-------- beq.w b682 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b5e2:	|         movea.l 8(sp),a0
    b5e6:	|         movea.l (a0),a0
    b5e8:	|         move.l (a0),d0
    b5ea:	|         move.l 12(sp),-(sp)
    b5ee:	|         move.l d0,-(sp)
    b5f0:	|         jsr 958 <put4bytes>
    b5f6:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b5f8:	|         clr.l (sp)
    b5fa:	|     ,-- bra.s b674 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b5fc:	|  ,--|-> movea.l 8(sp),a0
    b600:	|  |  |   movea.l 4(a0),a0
    b604:	|  |  |   move.l (sp),d1
    b606:	|  |  |   move.l d1,d0
    b608:	|  |  |   add.l d0,d0
    b60a:	|  |  |   add.l d1,d0
    b60c:	|  |  |   add.l d0,d0
    b60e:	|  |  |   add.l d0,d0
    b610:	|  |  |   adda.l d0,a0
    b612:	|  |  |   move.l (a0),d0
    b614:	|  |  |   move.l 12(sp),-(sp)
    b618:	|  |  |   move.l d0,-(sp)
    b61a:	|  |  |   jsr 958 <put4bytes>
    b620:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b622:	|  |  |   movea.l 8(sp),a0
    b626:	|  |  |   movea.l 4(a0),a0
    b62a:	|  |  |   move.l (sp),d1
    b62c:	|  |  |   move.l d1,d0
    b62e:	|  |  |   add.l d0,d0
    b630:	|  |  |   add.l d1,d0
    b632:	|  |  |   add.l d0,d0
    b634:	|  |  |   add.l d0,d0
    b636:	|  |  |   adda.l d0,a0
    b638:	|  |  |   move.l 4(a0),d0
    b63c:	|  |  |   move.l 12(sp),-(sp)
    b640:	|  |  |   move.l d0,-(sp)
    b642:	|  |  |   jsr 958 <put4bytes>
    b648:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b64a:	|  |  |   movea.l 8(sp),a0
    b64e:	|  |  |   movea.l 4(a0),a0
    b652:	|  |  |   move.l (sp),d1
    b654:	|  |  |   move.l d1,d0
    b656:	|  |  |   add.l d0,d0
    b658:	|  |  |   add.l d1,d0
    b65a:	|  |  |   add.l d0,d0
    b65c:	|  |  |   add.l d0,d0
    b65e:	|  |  |   adda.l d0,a0
    b660:	|  |  |   move.l 8(a0),d0
    b664:	|  |  |   move.l 12(sp),-(sp)
    b668:	|  |  |   move.l d0,-(sp)
    b66a:	|  |  |   jsr 958 <put4bytes>
    b670:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b672:	|  |  |   addq.l #1,(sp)
    b674:	|  |  '-> movea.l 8(sp),a0
    b678:	|  |      move.l 8(a0),d0
    b67c:	|  |      cmp.l (sp),d0
    b67e:	|  '----- bgt.w b5fc <saveAnim+0x3e>
		}
	}
	return TRUE;
    b682:	'-------> moveq #1,d0
}
    b684:	          addq.l #4,sp
    b686:	          rts

0000b688 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b688:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b68a:	             movea.l 8(sp),a0
    b68e:	             move.l 4(a0),d0
    b692:	             move.l 12(sp),-(sp)
    b696:	             move.l d0,-(sp)
    b698:	             jsr 8d0 <put2bytes>
    b69e:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b6a0:	             clr.l (sp)
    b6a2:	   ,-------- bra.s b6ce <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b6a4:	,--|-------> movea.l 8(sp),a0
    b6a8:	|  |         move.l (a0),d1
    b6aa:	|  |         move.l (sp),d0
    b6ac:	|  |         add.l d0,d0
    b6ae:	|  |         add.l d0,d0
    b6b0:	|  |         movea.l d1,a0
    b6b2:	|  |         adda.l d0,a0
    b6b4:	|  |         move.l (a0),d0
    b6b6:	|  |         move.l 12(sp),-(sp)
    b6ba:	|  |         move.l d0,-(sp)
    b6bc:	|  |         jsr b5be <saveAnim>
    b6c2:	|  |         addq.l #8,sp
    b6c4:	|  |         tst.w d0
    b6c6:	|  |     ,-- bne.s b6cc <saveCostume+0x44>
    b6c8:	|  |     |   clr.w d0
    b6ca:	|  |  ,--|-- bra.s b6e2 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b6cc:	|  |  |  '-> addq.l #1,(sp)
    b6ce:	|  '--|----> movea.l 8(sp),a0
    b6d2:	|     |      move.l 4(a0),d1
    b6d6:	|     |      move.l d1,d0
    b6d8:	|     |      add.l d0,d0
    b6da:	|     |      add.l d1,d0
    b6dc:	|     |      cmp.l (sp),d0
    b6de:	'-----|----- bgt.s b6a4 <saveCostume+0x1c>
	}

	return TRUE;
    b6e0:	      |      moveq #1,d0
}
    b6e2:	      '----> addq.l #4,sp
    b6e4:	             rts

0000b6e6 <savePeople>:

BOOL savePeople (BPTR fp) {
    b6e6:	             lea -144(sp),sp
    b6ea:	             move.l a6,-(sp)
    b6ec:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b6ee:	             move.l 1d1e8 <allPeople>,148(sp)
	int countPeople = 0, a;
    b6f6:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b6fa:	             move.w 1cb0e <scaleHorizon>,d0
    b700:	             movea.w d0,a0
    b702:	             move.l 156(sp),-(sp)
    b706:	             move.l a0,-(sp)
    b708:	             jsr a9c <putSigned>
    b70e:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b710:	             move.w 1cb10 <scaleDivide>,d0
    b716:	             movea.w d0,a0
    b718:	             move.l 156(sp),-(sp)
    b71c:	             move.l a0,-(sp)
    b71e:	             jsr a9c <putSigned>
    b724:	             addq.l #8,sp

	while (me) {
    b726:	         ,-- bra.s b736 <savePeople+0x50>
		countPeople ++;
    b728:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    b72c:	      |  |   movea.l 148(sp),a0
    b730:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b736:	      |  '-> tst.l 148(sp)
    b73a:	      '----- bne.s b728 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b73c:	             move.l 156(sp),-(sp)
    b740:	             move.l 148(sp),-(sp)
    b744:	             jsr 8d0 <put2bytes>
    b74a:	             addq.l #8,sp

	me = allPeople;
    b74c:	             move.l 1d1e8 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b754:	             clr.l 140(sp)
    b758:	   ,-------- bra.w bbb0 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b75c:	,--|-------> movea.l 148(sp),a0
    b760:	|  |         move.l (a0),d0
    b762:	|  |         move.l 156(sp),-(sp)
    b766:	|  |         move.l d0,-(sp)
    b768:	|  |         jsr a46 <putFloat>
    b76e:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b770:	|  |         movea.l 148(sp),a0
    b774:	|  |         move.l 4(a0),d0
    b778:	|  |         move.l 156(sp),-(sp)
    b77c:	|  |         move.l d0,-(sp)
    b77e:	|  |         jsr a46 <putFloat>
    b784:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b786:	|  |         movea.l 148(sp),a0
    b78a:	|  |         move.l 80(a0),d0
    b78e:	|  |         move.l 156(sp),-(sp)
    b792:	|  |         move.l d0,-(sp)
    b794:	|  |         jsr b688 <saveCostume>
    b79a:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b79c:	|  |         movea.l 148(sp),a0
    b7a0:	|  |         move.l 72(a0),d0
    b7a4:	|  |         move.l 156(sp),-(sp)
    b7a8:	|  |         move.l d0,-(sp)
    b7aa:	|  |         jsr b5be <saveAnim>
    b7b0:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b7b2:	|  |         move.l 156(sp),136(sp)
    b7b8:	|  |         movea.l 148(sp),a0
    b7bc:	|  |         move.l 72(a0),d1
    b7c0:	|  |         movea.l 148(sp),a0
    b7c4:	|  |         move.l 76(a0),d0
    b7c8:	|  |         cmp.l d1,d0
    b7ca:	|  |         seq d0
    b7cc:	|  |         neg.b d0
    b7ce:	|  |         move.b d0,d0
    b7d0:	|  |         andi.l #255,d0
    b7d6:	|  |         move.l d0,132(sp)
    b7da:	|  |         move.l 1d190 <DOSBase>,d0
    b7e0:	|  |         movea.l d0,a6
    b7e2:	|  |         move.l 136(sp),d1
    b7e6:	|  |         move.l 132(sp),d2
    b7ea:	|  |         jsr -312(a6)
    b7ee:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b7f2:	|  |         movea.l 148(sp),a0
    b7f6:	|  |         move.l 32(a0),d0
    b7fa:	|  |         move.l 156(sp),-(sp)
    b7fe:	|  |         move.l d0,-(sp)
    b800:	|  |         jsr a46 <putFloat>
    b806:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b808:	|  |         movea.l 148(sp),a0
    b80c:	|  |         move.l 118(a0),d0
    b810:	|  |         move.l 156(sp),-(sp)
    b814:	|  |         move.l d0,-(sp)
    b816:	|  |         jsr 8d0 <put2bytes>
    b81c:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b81e:	|  |         movea.l 148(sp),a0
    b822:	|  |         move.l 20(a0),d0
    b826:	|  |         move.l 156(sp),-(sp)
    b82a:	|  |         move.l d0,-(sp)
    b82c:	|  |         jsr 8d0 <put2bytes>
    b832:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b834:	|  |         movea.l 148(sp),a0
    b838:	|  |         move.l 40(a0),d0
    b83c:	|  |         move.l 156(sp),-(sp)
    b840:	|  |         move.l d0,-(sp)
    b842:	|  |         jsr 8d0 <put2bytes>
    b848:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b84a:	|  |         movea.l 148(sp),a0
    b84e:	|  |         move.l 44(a0),d0
    b852:	|  |         move.l 156(sp),-(sp)
    b856:	|  |         move.l d0,-(sp)
    b858:	|  |         jsr 8d0 <put2bytes>
    b85e:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b860:	|  |         movea.l 148(sp),a0
    b864:	|  |         move.l 48(a0),d0
    b868:	|  |         move.l 156(sp),-(sp)
    b86c:	|  |         move.l d0,-(sp)
    b86e:	|  |         jsr 8d0 <put2bytes>
    b874:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b876:	|  |         movea.l 148(sp),a0
    b87a:	|  |         move.l 52(a0),d0
    b87e:	|  |         move.l 156(sp),-(sp)
    b882:	|  |         move.l d0,-(sp)
    b884:	|  |         jsr 8d0 <put2bytes>
    b88a:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b88c:	|  |         movea.l 148(sp),a0
    b890:	|  |         move.l 84(a0),d0
    b894:	|  |         move.l 156(sp),-(sp)
    b898:	|  |         move.l d0,-(sp)
    b89a:	|  |         jsr 8d0 <put2bytes>
    b8a0:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b8a2:	|  |         movea.l 148(sp),a0
    b8a6:	|  |         move.l 88(a0),d0
    b8aa:	|  |         move.l 156(sp),-(sp)
    b8ae:	|  |         move.l d0,-(sp)
    b8b0:	|  |         jsr 8d0 <put2bytes>
    b8b6:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b8b8:	|  |         movea.l 148(sp),a0
    b8bc:	|  |         move.l 28(a0),d0
    b8c0:	|  |         move.l 156(sp),-(sp)
    b8c4:	|  |         move.l d0,-(sp)
    b8c6:	|  |         jsr 8d0 <put2bytes>
    b8cc:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b8ce:	|  |         movea.l 148(sp),a0
    b8d2:	|  |         move.l 122(a0),d0
    b8d6:	|  |         move.l 156(sp),-(sp)
    b8da:	|  |         move.l d0,-(sp)
    b8dc:	|  |         jsr 8d0 <put2bytes>
    b8e2:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b8e4:	|  |         movea.l 148(sp),a0
    b8e8:	|  |         move.l 24(a0),d0
    b8ec:	|  |         move.l d0,d0
    b8ee:	|  |         movea.w d0,a0
    b8f0:	|  |         move.l 156(sp),-(sp)
    b8f4:	|  |         move.l a0,-(sp)
    b8f6:	|  |         jsr a9c <putSigned>
    b8fc:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b8fe:	|  |         move.l 156(sp),124(sp)
    b904:	|  |         movea.l 148(sp),a0
    b908:	|  |         move.w 104(a0),d0
    b90c:	|  |         movea.w d0,a0
    b90e:	|  |         move.l a0,120(sp)
    b912:	|  |         move.l 1d190 <DOSBase>,d0
    b918:	|  |         movea.l d0,a6
    b91a:	|  |         move.l 124(sp),d1
    b91e:	|  |         move.l 120(sp),d2
    b922:	|  |         jsr -312(a6)
    b926:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b92a:	|  |         move.l 156(sp),112(sp)
    b930:	|  |         movea.l 148(sp),a0
    b934:	|  |         move.w 64(a0),d0
    b938:	|  |         movea.w d0,a0
    b93a:	|  |         move.l a0,108(sp)
    b93e:	|  |         move.l 1d190 <DOSBase>,d0
    b944:	|  |         movea.l d0,a6
    b946:	|  |         move.l 112(sp),d1
    b94a:	|  |         move.l 108(sp),d2
    b94e:	|  |         jsr -312(a6)
    b952:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b956:	|  |         move.l 156(sp),100(sp)
    b95c:	|  |         movea.l 148(sp),a0
    b960:	|  |         move.w 66(a0),d0
    b964:	|  |         movea.w d0,a0
    b966:	|  |         move.l a0,96(sp)
    b96a:	|  |         move.l 1d190 <DOSBase>,d0
    b970:	|  |         movea.l d0,a6
    b972:	|  |         move.l 100(sp),d1
    b976:	|  |         move.l 96(sp),d2
    b97a:	|  |         jsr -312(a6)
    b97e:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b982:	|  |         movea.l 148(sp),a0
    b986:	|  |         move.l 68(a0),d0
    b98a:	|  |  ,----- beq.s b9c8 <savePeople+0x2e2>
			FPutC (fp, 1);
    b98c:	|  |  |      move.l 156(sp),76(sp)
    b992:	|  |  |      moveq #1,d0
    b994:	|  |  |      move.l d0,72(sp)
    b998:	|  |  |      move.l 1d190 <DOSBase>,d0
    b99e:	|  |  |      movea.l d0,a6
    b9a0:	|  |  |      move.l 76(sp),d1
    b9a4:	|  |  |      move.l 72(sp),d2
    b9a8:	|  |  |      jsr -312(a6)
    b9ac:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b9b0:	|  |  |      movea.l 148(sp),a0
    b9b4:	|  |  |      move.l 68(a0),d0
    b9b8:	|  |  |      move.l 156(sp),-(sp)
    b9bc:	|  |  |      move.l d0,-(sp)
    b9be:	|  |  |      jsr cbe2 <saveFunction>
    b9c4:	|  |  |      addq.l #8,sp
    b9c6:	|  |  |  ,-- bra.s b9ec <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b9c8:	|  |  '--|-> move.l 156(sp),88(sp)
    b9ce:	|  |     |   moveq #1,d0
    b9d0:	|  |     |   move.l d0,84(sp)
    b9d4:	|  |     |   move.l 1d190 <DOSBase>,d0
    b9da:	|  |     |   movea.l d0,a6
    b9dc:	|  |     |   move.l 88(sp),d1
    b9e0:	|  |     |   move.l 84(sp),d2
    b9e4:	|  |     |   jsr -312(a6)
    b9e8:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b9ec:	|  |     '-> movea.l 148(sp),a0
    b9f0:	|  |         move.l 106(a0),d0
    b9f4:	|  |         move.l 156(sp),-(sp)
    b9f8:	|  |         move.l d0,-(sp)
    b9fa:	|  |         jsr 8d0 <put2bytes>
    ba00:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    ba02:	|  |         movea.l 148(sp),a0
    ba06:	|  |         move.l 92(a0),d0
    ba0a:	|  |         move.l 156(sp),-(sp)
    ba0e:	|  |         move.l d0,-(sp)
    ba10:	|  |         jsr 8d0 <put2bytes>
    ba16:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    ba18:	|  |         movea.l 148(sp),a0
    ba1c:	|  |         move.l 100(a0),d0
    ba20:	|  |         move.l 156(sp),-(sp)
    ba24:	|  |         move.l d0,-(sp)
    ba26:	|  |         jsr 8d0 <put2bytes>
    ba2c:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    ba2e:	|  |         movea.l 148(sp),a0
    ba32:	|  |         move.l 96(a0),d0
    ba36:	|  |         move.l 156(sp),-(sp)
    ba3a:	|  |         move.l d0,-(sp)
    ba3c:	|  |         jsr 8d0 <put2bytes>
    ba42:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    ba44:	|  |         movea.l 148(sp),a0
    ba48:	|  |         move.l 110(a0),d0
    ba4c:	|  |         move.l d0,d0
    ba4e:	|  |         movea.w d0,a0
    ba50:	|  |         move.l 156(sp),-(sp)
    ba54:	|  |         move.l a0,-(sp)
    ba56:	|  |         jsr a9c <putSigned>
    ba5c:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    ba5e:	|  |         movea.l 148(sp),a0
    ba62:	|  |         move.l 56(a0),d0
    ba66:	|  |         move.l d0,d0
    ba68:	|  |         movea.w d0,a0
    ba6a:	|  |         move.l 156(sp),-(sp)
    ba6e:	|  |         move.l a0,-(sp)
    ba70:	|  |         jsr a9c <putSigned>
    ba76:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    ba78:	|  |         movea.l 148(sp),a0
    ba7c:	|  |         move.l 60(a0),d0
    ba80:	|  |         move.l d0,d0
    ba82:	|  |         movea.w d0,a0
    ba84:	|  |         move.l 156(sp),-(sp)
    ba88:	|  |         move.l a0,-(sp)
    ba8a:	|  |         jsr a9c <putSigned>
    ba90:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    ba92:	|  |         move.l 156(sp),64(sp)
    ba98:	|  |         movea.l 148(sp),a0
    ba9c:	|  |         move.b 126(a0),d0
    baa0:	|  |         move.b d0,d0
    baa2:	|  |         andi.l #255,d0
    baa8:	|  |         move.l d0,60(sp)
    baac:	|  |         move.l 1d190 <DOSBase>,d0
    bab2:	|  |         movea.l d0,a6
    bab4:	|  |         move.l 64(sp),d1
    bab8:	|  |         move.l 60(sp),d2
    babc:	|  |         jsr -312(a6)
    bac0:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    bac4:	|  |         move.l 156(sp),52(sp)
    baca:	|  |         movea.l 148(sp),a0
    bace:	|  |         move.b 127(a0),d0
    bad2:	|  |         move.b d0,d0
    bad4:	|  |         andi.l #255,d0
    bada:	|  |         move.l d0,48(sp)
    bade:	|  |         move.l 1d190 <DOSBase>,d0
    bae4:	|  |         movea.l d0,a6
    bae6:	|  |         move.l 52(sp),d1
    baea:	|  |         move.l 48(sp),d2
    baee:	|  |         jsr -312(a6)
    baf2:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    baf6:	|  |         move.l 156(sp),40(sp)
    bafc:	|  |         movea.l 148(sp),a0
    bb00:	|  |         move.b 128(a0),d0
    bb04:	|  |         move.b d0,d0
    bb06:	|  |         andi.l #255,d0
    bb0c:	|  |         move.l d0,36(sp)
    bb10:	|  |         move.l 1d190 <DOSBase>,d0
    bb16:	|  |         movea.l d0,a6
    bb18:	|  |         move.l 40(sp),d1
    bb1c:	|  |         move.l 36(sp),d2
    bb20:	|  |         jsr -312(a6)
    bb24:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    bb28:	|  |         move.l 156(sp),28(sp)
    bb2e:	|  |         movea.l 148(sp),a0
    bb32:	|  |         move.b 129(a0),d0
    bb36:	|  |         move.b d0,d0
    bb38:	|  |         andi.l #255,d0
    bb3e:	|  |         move.l d0,24(sp)
    bb42:	|  |         move.l 1d190 <DOSBase>,d0
    bb48:	|  |         movea.l d0,a6
    bb4a:	|  |         move.l 28(sp),d1
    bb4e:	|  |         move.l 24(sp),d2
    bb52:	|  |         jsr -312(a6)
    bb56:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    bb5a:	|  |         move.l 156(sp),16(sp)
    bb60:	|  |         movea.l 148(sp),a0
    bb64:	|  |         move.b 130(a0),d0
    bb68:	|  |         move.b d0,d0
    bb6a:	|  |         andi.l #255,d0
    bb70:	|  |         move.l d0,12(sp)
    bb74:	|  |         move.l 1d190 <DOSBase>,d0
    bb7a:	|  |         movea.l d0,a6
    bb7c:	|  |         move.l 16(sp),d1
    bb80:	|  |         move.l 12(sp),d2
    bb84:	|  |         jsr -312(a6)
    bb88:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    bb8c:	|  |         movea.l 148(sp),a0
    bb90:	|  |         move.l 114(a0),d0
    bb94:	|  |         move.l 156(sp),-(sp)
    bb98:	|  |         move.l d0,-(sp)
    bb9a:	|  |         jsr dfb6 <saveObjectRef>
    bba0:	|  |         addq.l #8,sp

		me = me -> next;
    bba2:	|  |         movea.l 148(sp),a0
    bba6:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    bbac:	|  |         addq.l #1,140(sp)
    bbb0:	|  '-------> movea.l 140(sp),a0
    bbb4:	|            cmpa.l 144(sp),a0
    bbb8:	'----------- blt.w b75c <savePeople+0x76>
	}
	return TRUE;
    bbbc:	             moveq #1,d0
}
    bbbe:	             move.l (sp)+,d2
    bbc0:	             movea.l (sp)+,a6
    bbc2:	             lea 144(sp),sp
    bbc6:	             rts

0000bbc8 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    bbc8:	movea.l 4(sp),a0
    bbcc:	move.l 8(sp),(a0)
}
    bbd0:	nop
    bbd2:	rts

0000bbd4 <setDrawMode>:


void setDrawMode (int h, int ob) {
    bbd4:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    bbd6:	       move.l 12(sp),-(sp)
    bbda:	       jsr ac00 <findPerson>
    bbe0:	       addq.l #4,sp
    bbe2:	       move.l d0,(sp)
	if (! moveMe) return;
    bbe4:	,----- beq.s bbf8 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    bbe6:	|      move.l 8(sp),-(sp)
    bbea:	|      move.l 4(sp),-(sp)
    bbee:	|      jsr bbfe <setMyDrawMode>
    bbf4:	|      addq.l #8,sp
    bbf6:	|  ,-- bra.s bbfa <setDrawMode+0x26>
	if (! moveMe) return;
    bbf8:	'--|-> nop
}
    bbfa:	   '-> addq.l #4,sp
    bbfc:	       rts

0000bbfe <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    bbfe:	       moveq #19,d0
    bc00:	       cmp.l 8(sp),d0
    bc04:	,----- bcs.w c0dc <setMyDrawMode+0x4de>
    bc08:	|      move.l 8(sp),d0
    bc0c:	|      add.l d0,d0
    bc0e:	|      movea.l d0,a0
    bc10:	|      adda.l #48156,a0
    bc16:	|      move.w (a0),d0
    bc18:	|      jmp (bc1c <setMyDrawMode+0x1e>,pc,d0.w)
    bc1c:	|      .short 0x04c0
    bc1e:	|      ori.l #6684712,-(a4)
    bc24:	|      btst d0,-(a0)
    bc26:	|      bchg d0,(a6)+
    bc28:	|      bclr d0,(a4)+
    bc2a:	|      bset d0,(a2)+
    bc2c:	|      andi.b #84,(a6)
    bc30:	|      andi.l #55575312,(a2)
    bc36:	|      .short 0x02d0
    bc38:	|      bclr d1,(a0)
    bc3a:	|      .short 0x044a
    bc3c:	|      .short 0x040c
    bc3e:	|      movep.l d1,1158(a6)
    bc42:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bc44:	|      movea.l 4(sp),a0
    bc48:	|      clr.b 128(a0)
    bc4c:	|      movea.l 4(sp),a0
    bc50:	|      move.b 128(a0),d0
    bc54:	|      movea.l 4(sp),a0
    bc58:	|      move.b d0,127(a0)
    bc5c:	|      movea.l 4(sp),a0
    bc60:	|      move.b 127(a0),d0
    bc64:	|      movea.l 4(sp),a0
    bc68:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    bc6c:	|      movea.l 4(sp),a0
    bc70:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    bc74:	|      movea.l 4(sp),a0
    bc78:	|      move.b #64,130(a0)
			break;
    bc7e:	|  ,-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bc82:	|  |   movea.l 4(sp),a0
    bc86:	|  |   clr.b 128(a0)
    bc8a:	|  |   movea.l 4(sp),a0
    bc8e:	|  |   move.b 128(a0),d0
    bc92:	|  |   movea.l 4(sp),a0
    bc96:	|  |   move.b d0,127(a0)
    bc9a:	|  |   movea.l 4(sp),a0
    bc9e:	|  |   move.b 127(a0),d0
    bca2:	|  |   movea.l 4(sp),a0
    bca6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bcaa:	|  |   movea.l 4(sp),a0
    bcae:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    bcb2:	|  |   movea.l 4(sp),a0
    bcb6:	|  |   move.b #-128,130(a0)
			break;
    bcbc:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bcc0:	|  |   movea.l 4(sp),a0
    bcc4:	|  |   clr.b 128(a0)
    bcc8:	|  |   movea.l 4(sp),a0
    bccc:	|  |   move.b 128(a0),d0
    bcd0:	|  |   movea.l 4(sp),a0
    bcd4:	|  |   move.b d0,127(a0)
    bcd8:	|  |   movea.l 4(sp),a0
    bcdc:	|  |   move.b 127(a0),d0
    bce0:	|  |   movea.l 4(sp),a0
    bce4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bce8:	|  |   movea.l 4(sp),a0
    bcec:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    bcf0:	|  |   movea.l 4(sp),a0
    bcf4:	|  |   move.b #-64,130(a0)
			break;
    bcfa:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bcfe:	|  |   movea.l 4(sp),a0
    bd02:	|  |   clr.b 128(a0)
    bd06:	|  |   movea.l 4(sp),a0
    bd0a:	|  |   move.b 128(a0),d0
    bd0e:	|  |   movea.l 4(sp),a0
    bd12:	|  |   move.b d0,127(a0)
    bd16:	|  |   movea.l 4(sp),a0
    bd1a:	|  |   move.b 127(a0),d0
    bd1e:	|  |   movea.l 4(sp),a0
    bd22:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bd26:	|  |   movea.l 4(sp),a0
    bd2a:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    bd2e:	|  |   movea.l 4(sp),a0
    bd32:	|  |   move.b #-2,130(a0)
			break;
    bd38:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bd3c:	|  |   movea.l 4(sp),a0
    bd40:	|  |   clr.b 128(a0)
    bd44:	|  |   movea.l 4(sp),a0
    bd48:	|  |   move.b 128(a0),d0
    bd4c:	|  |   movea.l 4(sp),a0
    bd50:	|  |   move.b d0,127(a0)
    bd54:	|  |   movea.l 4(sp),a0
    bd58:	|  |   move.b 127(a0),d0
    bd5c:	|  |   movea.l 4(sp),a0
    bd60:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bd64:	|  |   movea.l 4(sp),a0
    bd68:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bd6e:	|  |   movea.l 4(sp),a0
    bd72:	|  |   clr.b 130(a0)
			break;
    bd76:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bd7a:	|  |   movea.l 4(sp),a0
    bd7e:	|  |   clr.b 128(a0)
    bd82:	|  |   movea.l 4(sp),a0
    bd86:	|  |   move.b 128(a0),d0
    bd8a:	|  |   movea.l 4(sp),a0
    bd8e:	|  |   move.b d0,127(a0)
    bd92:	|  |   movea.l 4(sp),a0
    bd96:	|  |   move.b 127(a0),d0
    bd9a:	|  |   movea.l 4(sp),a0
    bd9e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bda2:	|  |   movea.l 4(sp),a0
    bda6:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bdac:	|  |   movea.l 4(sp),a0
    bdb0:	|  |   clr.b 130(a0)
			break;
    bdb4:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bdb8:	|  |   movea.l 4(sp),a0
    bdbc:	|  |   clr.b 128(a0)
    bdc0:	|  |   movea.l 4(sp),a0
    bdc4:	|  |   move.b 128(a0),d0
    bdc8:	|  |   movea.l 4(sp),a0
    bdcc:	|  |   move.b d0,127(a0)
    bdd0:	|  |   movea.l 4(sp),a0
    bdd4:	|  |   move.b 127(a0),d0
    bdd8:	|  |   movea.l 4(sp),a0
    bddc:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bde0:	|  |   movea.l 4(sp),a0
    bde4:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bdea:	|  |   movea.l 4(sp),a0
    bdee:	|  |   clr.b 130(a0)
			break;
    bdf2:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bdf6:	|  |   movea.l 4(sp),a0
    bdfa:	|  |   clr.b 128(a0)
    bdfe:	|  |   movea.l 4(sp),a0
    be02:	|  |   move.b 128(a0),d0
    be06:	|  |   movea.l 4(sp),a0
    be0a:	|  |   move.b d0,127(a0)
    be0e:	|  |   movea.l 4(sp),a0
    be12:	|  |   move.b 127(a0),d0
    be16:	|  |   movea.l 4(sp),a0
    be1a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    be1e:	|  |   movea.l 4(sp),a0
    be22:	|  |   st 129(a0)
			moveMe->transparency = 0;
    be26:	|  |   movea.l 4(sp),a0
    be2a:	|  |   clr.b 130(a0)
			break;
    be2e:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    be32:	|  |   movea.l 4(sp),a0
    be36:	|  |   clr.b 128(a0)
    be3a:	|  |   movea.l 4(sp),a0
    be3e:	|  |   move.b 128(a0),d0
    be42:	|  |   movea.l 4(sp),a0
    be46:	|  |   move.b d0,127(a0)
    be4a:	|  |   movea.l 4(sp),a0
    be4e:	|  |   move.b 127(a0),d0
    be52:	|  |   movea.l 4(sp),a0
    be56:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    be5a:	|  |   movea.l 4(sp),a0
    be5e:	|  |   st 129(a0)
			moveMe->transparency = 64;
    be62:	|  |   movea.l 4(sp),a0
    be66:	|  |   move.b #64,130(a0)
			break;
    be6c:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    be70:	|  |   movea.l 4(sp),a0
    be74:	|  |   clr.b 128(a0)
    be78:	|  |   movea.l 4(sp),a0
    be7c:	|  |   move.b 128(a0),d0
    be80:	|  |   movea.l 4(sp),a0
    be84:	|  |   move.b d0,127(a0)
    be88:	|  |   movea.l 4(sp),a0
    be8c:	|  |   move.b 127(a0),d0
    be90:	|  |   movea.l 4(sp),a0
    be94:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    be98:	|  |   movea.l 4(sp),a0
    be9c:	|  |   st 129(a0)
			moveMe->transparency = 128;
    bea0:	|  |   movea.l 4(sp),a0
    bea4:	|  |   move.b #-128,130(a0)
			break;
    beaa:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    beae:	|  |   movea.l 4(sp),a0
    beb2:	|  |   clr.b 128(a0)
    beb6:	|  |   movea.l 4(sp),a0
    beba:	|  |   move.b 128(a0),d0
    bebe:	|  |   movea.l 4(sp),a0
    bec2:	|  |   move.b d0,127(a0)
    bec6:	|  |   movea.l 4(sp),a0
    beca:	|  |   move.b 127(a0),d0
    bece:	|  |   movea.l 4(sp),a0
    bed2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bed6:	|  |   movea.l 4(sp),a0
    beda:	|  |   st 129(a0)
			moveMe->transparency = 192;
    bede:	|  |   movea.l 4(sp),a0
    bee2:	|  |   move.b #-64,130(a0)
			break;
    bee8:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    beec:	|  |   movea.l 4(sp),a0
    bef0:	|  |   move.b #-128,128(a0)
    bef6:	|  |   movea.l 4(sp),a0
    befa:	|  |   move.b 128(a0),d0
    befe:	|  |   movea.l 4(sp),a0
    bf02:	|  |   move.b d0,127(a0)
    bf06:	|  |   movea.l 4(sp),a0
    bf0a:	|  |   move.b 127(a0),d0
    bf0e:	|  |   movea.l 4(sp),a0
    bf12:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bf16:	|  |   movea.l 4(sp),a0
    bf1a:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bf20:	|  |   movea.l 4(sp),a0
    bf24:	|  |   clr.b 130(a0)
			break;
    bf28:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bf2c:	|  |   movea.l 4(sp),a0
    bf30:	|  |   move.b #-128,128(a0)
    bf36:	|  |   movea.l 4(sp),a0
    bf3a:	|  |   move.b 128(a0),d0
    bf3e:	|  |   movea.l 4(sp),a0
    bf42:	|  |   move.b d0,127(a0)
    bf46:	|  |   movea.l 4(sp),a0
    bf4a:	|  |   move.b 127(a0),d0
    bf4e:	|  |   movea.l 4(sp),a0
    bf52:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bf56:	|  |   movea.l 4(sp),a0
    bf5a:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bf60:	|  |   movea.l 4(sp),a0
    bf64:	|  |   clr.b 130(a0)
			break;
    bf68:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bf6c:	|  |   movea.l 4(sp),a0
    bf70:	|  |   move.b #-128,128(a0)
    bf76:	|  |   movea.l 4(sp),a0
    bf7a:	|  |   move.b 128(a0),d0
    bf7e:	|  |   movea.l 4(sp),a0
    bf82:	|  |   move.b d0,127(a0)
    bf86:	|  |   movea.l 4(sp),a0
    bf8a:	|  |   move.b 127(a0),d0
    bf8e:	|  |   movea.l 4(sp),a0
    bf92:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bf96:	|  |   movea.l 4(sp),a0
    bf9a:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bfa0:	|  |   movea.l 4(sp),a0
    bfa4:	|  |   clr.b 130(a0)
			break;
    bfa8:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bfac:	|  |   movea.l 4(sp),a0
    bfb0:	|  |   move.b #-128,128(a0)
    bfb6:	|  |   movea.l 4(sp),a0
    bfba:	|  |   move.b 128(a0),d0
    bfbe:	|  |   movea.l 4(sp),a0
    bfc2:	|  |   move.b d0,127(a0)
    bfc6:	|  |   movea.l 4(sp),a0
    bfca:	|  |   move.b 127(a0),d0
    bfce:	|  |   movea.l 4(sp),a0
    bfd2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bfd6:	|  |   movea.l 4(sp),a0
    bfda:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bfde:	|  |   movea.l 4(sp),a0
    bfe2:	|  |   clr.b 130(a0)
			break;
    bfe6:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bfea:	|  |   movea.l 4(sp),a0
    bfee:	|  |   st 128(a0)
    bff2:	|  |   movea.l 4(sp),a0
    bff6:	|  |   move.b 128(a0),d0
    bffa:	|  |   movea.l 4(sp),a0
    bffe:	|  |   move.b d0,127(a0)
    c002:	|  |   movea.l 4(sp),a0
    c006:	|  |   move.b 127(a0),d0
    c00a:	|  |   movea.l 4(sp),a0
    c00e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    c012:	|  |   movea.l 4(sp),a0
    c016:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    c01c:	|  |   movea.l 4(sp),a0
    c020:	|  |   clr.b 130(a0)
			break;
    c024:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c028:	|  |   movea.l 4(sp),a0
    c02c:	|  |   st 128(a0)
    c030:	|  |   movea.l 4(sp),a0
    c034:	|  |   move.b 128(a0),d0
    c038:	|  |   movea.l 4(sp),a0
    c03c:	|  |   move.b d0,127(a0)
    c040:	|  |   movea.l 4(sp),a0
    c044:	|  |   move.b 127(a0),d0
    c048:	|  |   movea.l 4(sp),a0
    c04c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    c050:	|  |   movea.l 4(sp),a0
    c054:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    c05a:	|  |   movea.l 4(sp),a0
    c05e:	|  |   clr.b 130(a0)
			break;
    c062:	|  +-- bra.w c116 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c066:	|  |   movea.l 4(sp),a0
    c06a:	|  |   st 128(a0)
    c06e:	|  |   movea.l 4(sp),a0
    c072:	|  |   move.b 128(a0),d0
    c076:	|  |   movea.l 4(sp),a0
    c07a:	|  |   move.b d0,127(a0)
    c07e:	|  |   movea.l 4(sp),a0
    c082:	|  |   move.b 127(a0),d0
    c086:	|  |   movea.l 4(sp),a0
    c08a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    c08e:	|  |   movea.l 4(sp),a0
    c092:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    c098:	|  |   movea.l 4(sp),a0
    c09c:	|  |   clr.b 130(a0)
			break;
    c0a0:	|  +-- bra.s c116 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    c0a2:	|  |   movea.l 4(sp),a0
    c0a6:	|  |   st 128(a0)
    c0aa:	|  |   movea.l 4(sp),a0
    c0ae:	|  |   move.b 128(a0),d0
    c0b2:	|  |   movea.l 4(sp),a0
    c0b6:	|  |   move.b d0,127(a0)
    c0ba:	|  |   movea.l 4(sp),a0
    c0be:	|  |   move.b 127(a0),d0
    c0c2:	|  |   movea.l 4(sp),a0
    c0c6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    c0ca:	|  |   movea.l 4(sp),a0
    c0ce:	|  |   st 129(a0)
			moveMe->transparency = 0;
    c0d2:	|  |   movea.l 4(sp),a0
    c0d6:	|  |   clr.b 130(a0)
			break;
    c0da:	|  +-- bra.s c116 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    c0dc:	'--|-> movea.l 4(sp),a0
    c0e0:	   |   clr.b 128(a0)
    c0e4:	   |   movea.l 4(sp),a0
    c0e8:	   |   move.b 128(a0),d0
    c0ec:	   |   movea.l 4(sp),a0
    c0f0:	   |   move.b d0,127(a0)
    c0f4:	   |   movea.l 4(sp),a0
    c0f8:	   |   move.b 127(a0),d0
    c0fc:	   |   movea.l 4(sp),a0
    c100:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    c104:	   |   movea.l 4(sp),a0
    c108:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    c10c:	   |   movea.l 4(sp),a0
    c110:	   |   clr.b 130(a0)
			break;
    c114:	   |   nop
	}
}
    c116:	   '-> nop
    c118:	       rts

0000c11a <shufflePeople>:

void shufflePeople () {
    c11a:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    c11e:	             move.l #119272,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    c126:	             move.l 1d1e8 <allPeople>,d0
    c12c:	,----------- beq.w c202 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    c130:	|     ,----- bra.w c1f2 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    c134:	|  ,--|----> movea.l 16(sp),a0
    c138:	|  |  |      movea.l (a0),a0
    c13a:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    c140:	|  |  |      movea.l 16(sp),a0
    c144:	|  |  |      movea.l (a0),a0
    c146:	|  |  |      move.l 118(a0),d0
    c14a:	|  |  |      moveq #1,d1
    c14c:	|  |  |      and.l d1,d0
    c14e:	|  |  |  ,-- beq.s c166 <shufflePeople+0x4c>
    c150:	|  |  |  |   move.l #1148846080,-(sp)
    c156:	|  |  |  |   move.l 16(sp),-(sp)
    c15a:	|  |  |  |   jsr 17b28 <__addsf3>
    c160:	|  |  |  |   addq.l #8,sp
    c162:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    c166:	|  |  |  '-> movea.l 16(sp),a0
    c16a:	|  |  |      movea.l (a0),a0
    c16c:	|  |  |      movea.l 36(a0),a0
    c170:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    c176:	|  |  |      movea.l 16(sp),a0
    c17a:	|  |  |      movea.l (a0),a0
    c17c:	|  |  |      movea.l 36(a0),a0
    c180:	|  |  |      move.l 118(a0),d0
    c184:	|  |  |      moveq #1,d1
    c186:	|  |  |      and.l d1,d0
    c188:	|  |  |  ,-- beq.s c1a0 <shufflePeople+0x86>
    c18a:	|  |  |  |   move.l #1148846080,-(sp)
    c190:	|  |  |  |   move.l 12(sp),-(sp)
    c194:	|  |  |  |   jsr 17b28 <__addsf3>
    c19a:	|  |  |  |   addq.l #8,sp
    c19c:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    c1a0:	|  |  |  '-> move.l 8(sp),-(sp)
    c1a4:	|  |  |      move.l 16(sp),-(sp)
    c1a8:	|  |  |      jsr 17ed8 <__gtsf2>
    c1ae:	|  |  |      addq.l #8,sp
    c1b0:	|  |  |      tst.l d0
    c1b2:	|  |  |  ,-- ble.s c1e4 <shufflePeople+0xca>
			A = (*thisReference);
    c1b4:	|  |  |  |   movea.l 16(sp),a0
    c1b8:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    c1bc:	|  |  |  |   movea.l 16(sp),a0
    c1c0:	|  |  |  |   movea.l (a0),a0
    c1c2:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    c1c6:	|  |  |  |   movea.l (sp),a0
    c1c8:	|  |  |  |   move.l 36(a0),d0
    c1cc:	|  |  |  |   movea.l 4(sp),a0
    c1d0:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    c1d4:	|  |  |  |   movea.l (sp),a0
    c1d6:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    c1dc:	|  |  |  |   movea.l 16(sp),a0
    c1e0:	|  |  |  |   move.l (sp),(a0)
    c1e2:	|  |  +--|-- bra.s c1f2 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    c1e4:	|  |  |  '-> movea.l 16(sp),a0
    c1e8:	|  |  |      move.l (a0),d0
    c1ea:	|  |  |      moveq #36,d1
    c1ec:	|  |  |      add.l d0,d1
    c1ee:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    c1f2:	|  |  '----> movea.l 16(sp),a0
    c1f6:	|  |         movea.l (a0),a0
    c1f8:	|  |         move.l 36(a0),d0
    c1fc:	|  '-------- bne.w c134 <shufflePeople+0x1a>
    c200:	|        ,-- bra.s c204 <shufflePeople+0xea>
	if (!allPeople) return;
    c202:	'--------|-> nop
		}
	}
}
    c204:	         '-> lea 20(sp),sp
    c208:	             rts

0000c20a <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    c20a:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    c20c:	       tst.l 8(sp)
    c210:	   ,-- bgt.s c216 <setCharacterWalkSpeed+0xc>
    c212:	   |   clr.w d0
    c214:	,--|-- bra.s c234 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    c216:	|  '-> move.l 12(sp),-(sp)
    c21a:	|      jsr ac00 <findPerson>
    c220:	|      addq.l #4,sp
    c222:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    c224:	|  ,-- bne.s c22a <setCharacterWalkSpeed+0x20>
    c226:	|  |   clr.w d0
    c228:	+--|-- bra.s c234 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    c22a:	|  '-> movea.l (sp),a0
    c22c:	|      move.l 8(sp),28(a0)
	return TRUE;
    c232:	|      moveq #1,d0
}
    c234:	'----> addq.l #4,sp
    c236:	       rts

0000c238 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    c238:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c23a:	       move.l 8(sp),-(sp)
    c23e:	       jsr ac00 <findPerson>
    c244:	       addq.l #4,sp
    c246:	       move.l d0,(sp)
    if (thisPerson) {
    c248:	,----- beq.s c268 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    c24a:	|      movea.l (sp),a0
    c24c:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    c252:	|      moveq #2,d0
    c254:	|      and.l 12(sp),d0
    c258:	|  ,-- beq.s c264 <setPersonExtra+0x2c>
    c25a:	|  |   movea.l (sp),a0
    c25c:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    c264:	|  '-> moveq #1,d0
    c266:	|  ,-- bra.s c26a <setPersonExtra+0x32>
    }
    return FALSE;
    c268:	'--|-> clr.w d0
}
    c26a:	   '-> addq.l #4,sp
    c26c:	       rts

0000c26e <setScale>:


void setScale (short int h, short int d) {
    c26e:	subq.l #4,sp
    c270:	move.l 8(sp),d1
    c274:	move.l 12(sp),d0
    c278:	move.w d1,d1
    c27a:	move.w d1,2(sp)
    c27e:	move.w d0,d0
    c280:	move.w d0,(sp)
	scaleHorizon = h;
    c282:	move.w 2(sp),1cb0e <scaleHorizon>
	scaleDivide = d;
    c28a:	move.w (sp),1cb10 <scaleDivide>
}
    c290:	nop
    c292:	addq.l #4,sp
    c294:	rts

0000c296 <setShown>:

void setShown (BOOL h, int ob) {
    c296:	    subq.l #8,sp
    c298:	    move.l 12(sp),d0
    c29c:	    move.w d0,d0
    c29e:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    c2a2:	    move.l 16(sp),-(sp)
    c2a6:	    jsr ac00 <findPerson>
    c2ac:	    addq.l #4,sp
    c2ae:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    c2b2:	,-- beq.s c2be <setShown+0x28>
    c2b4:	|   movea.l 4(sp),a0
    c2b8:	|   move.w 2(sp),104(a0)
}
    c2be:	'-> nop
    c2c0:	    addq.l #8,sp
    c2c2:	    rts

0000c2c4 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    c2c4:	       subq.l #8,sp
    c2c6:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    c2c8:	       movea.l 16(sp),a0
    c2cc:	       move.l 92(a0),d0
    c2d0:	       move.l d0,d1
    c2d2:	       addi.l #360,d1
    c2d8:	       movea.l 16(sp),a0
    c2dc:	       move.l 96(a0),d0
    c2e0:	       move.l d1,d2
    c2e2:	       sub.l d0,d2
    c2e4:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    c2e8:	       movea.l 16(sp),a0
    c2ec:	       move.l 122(a0),d0
    c2f0:	   ,-- beq.s c2fc <spinStep+0x38>
    c2f2:	   |   movea.l 16(sp),a0
    c2f6:	   |   move.l 122(a0),d0
    c2fa:	,--|-- bra.s c316 <spinStep+0x52>
    c2fc:	|  '-> movea.l 16(sp),a0
    c300:	|      movea.l 80(a0),a0
    c304:	|      move.l 4(a0),d0
    c308:	|      move.l d0,-(sp)
    c30a:	|      pea 168 <decodeFilename+0x50>
    c30e:	|      jsr 18344 <__divsi3>
    c314:	|      addq.l #8,sp
    c316:	'----> move.l d0,4(sp)
	while (diff > 180) {
    c31a:	   ,-- bra.s c324 <spinStep+0x60>
		diff -= 360;
    c31c:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    c324:	|  '-> cmpi.l #180,8(sp)
    c32c:	'----- bgt.s c31c <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    c32e:	       move.l 8(sp),d0
    c332:	       cmp.l 4(sp),d0
    c336:	   ,-- blt.s c354 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    c338:	   |   movea.l 16(sp),a0
    c33c:	   |   move.l 92(a0),d0
    c340:	   |   sub.l 4(sp),d0
    c344:	   |   move.l d0,-(sp)
    c346:	   |   move.l 20(sp),-(sp)
    c34a:	   |   jsr c434 <turnMeAngle>
    c350:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    c352:	,--|-- bra.s c39a <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    c354:	|  '-> move.l 4(sp),d0
    c358:	|      neg.l d0
    c35a:	|      cmp.l 8(sp),d0
    c35e:	|  ,-- blt.s c37c <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    c360:	|  |   movea.l 16(sp),a0
    c364:	|  |   move.l 92(a0),d0
    c368:	|  |   add.l 4(sp),d0
    c36c:	|  |   move.l d0,-(sp)
    c36e:	|  |   move.l 20(sp),-(sp)
    c372:	|  |   jsr c434 <turnMeAngle>
    c378:	|  |   addq.l #8,sp
}
    c37a:	+--|-- bra.s c39a <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    c37c:	|  '-> movea.l 16(sp),a0
    c380:	|      move.l 96(a0),d0
    c384:	|      move.l d0,-(sp)
    c386:	|      move.l 20(sp),-(sp)
    c38a:	|      jsr c434 <turnMeAngle>
    c390:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    c392:	|      movea.l 16(sp),a0
    c396:	|      clr.w 66(a0)
}
    c39a:	'----> nop
    c39c:	       move.l (sp)+,d2
    c39e:	       addq.l #8,sp
    c3a0:	       rts

0000c3a2 <stopPerson>:


BOOL stopPerson (int o) {
    c3a2:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    c3a4:	       move.l 8(sp),-(sp)
    c3a8:	       jsr ac00 <findPerson>
    c3ae:	       addq.l #4,sp
    c3b0:	       move.l d0,(sp)
    if (moveMe)
    c3b2:	,----- beq.s c3f0 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    c3b4:	|      movea.l (sp),a0
    c3b6:	|      move.l 68(a0),d0
    c3ba:	+----- beq.s c3f0 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    c3bc:	|      movea.l (sp),a0
    c3be:	|      move.l 68(a0),d0
    c3c2:	|      move.l d0,-(sp)
    c3c4:	|      jsr 55fa <abortFunction>
    c3ca:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    c3cc:	|      movea.l (sp),a0
    c3ce:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    c3d2:	|      movea.l (sp),a0
    c3d4:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    c3d8:	|      movea.l (sp),a0
    c3da:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    c3de:	|      clr.l -(sp)
    c3e0:	|      move.l 4(sp),-(sp)
    c3e4:	|      jsr 479c <setFrames>
    c3ea:	|      addq.l #8,sp
            return TRUE;
    c3ec:	|      moveq #1,d0
    c3ee:	|  ,-- bra.s c3f2 <stopPerson+0x50>
        }
    return FALSE;
    c3f0:	'--|-> clr.w d0
}
    c3f2:	   '-> addq.l #4,sp
    c3f4:	       rts

0000c3f6 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    c3f6:	       subq.l #8,sp
	int total = 0;
    c3f8:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c3fc:	       clr.l (sp)
    c3fe:	   ,-- bra.s c420 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    c400:	,--|-> movea.l 12(sp),a0
    c404:	|  |   movea.l 4(a0),a0
    c408:	|  |   move.l (sp),d1
    c40a:	|  |   move.l d1,d0
    c40c:	|  |   add.l d0,d0
    c40e:	|  |   add.l d1,d0
    c410:	|  |   add.l d0,d0
    c412:	|  |   add.l d0,d0
    c414:	|  |   adda.l d0,a0
    c416:	|  |   move.l 4(a0),d0
    c41a:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c41e:	|  |   addq.l #1,(sp)
    c420:	|  '-> movea.l 12(sp),a0
    c424:	|      move.l 8(a0),d0
    c428:	|      cmp.l (sp),d0
    c42a:	'----- bgt.s c400 <timeForAnim+0xa>
	}
	return total;
    c42c:	       move.l 4(sp),d0
}
    c430:	       addq.l #8,sp
    c432:	       rts

0000c434 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    c434:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    c436:	       movea.l 8(sp),a0
    c43a:	       movea.l 80(a0),a0
    c43e:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    c442:	       movea.l 8(sp),a0
    c446:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    c44c:	       move.l (sp),-(sp)
    c44e:	       pea b4 <_start+0xb4>
    c452:	       jsr 18344 <__divsi3>
    c458:	       addq.l #8,sp
    c45a:	       move.l d0,d1
    c45c:	       addi.l #180,d1
    c462:	       movea.l 8(sp),a0
    c466:	       move.l 100(a0),d0
    c46a:	       add.l d1,d0
    c46c:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    c470:	   ,-- bra.s c47a <turnMeAngle+0x46>
    c472:	,--|-> addi.l #-360,12(sp)
    c47a:	|  '-> cmpi.l #359,12(sp)
    c482:	'----- bgt.s c472 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    c484:	       move.l (sp),-(sp)
    c486:	       move.l 16(sp),-(sp)
    c48a:	       jsr 182c6 <__mulsi3>
    c490:	       addq.l #8,sp
    c492:	       pea 168 <decodeFilename+0x50>
    c496:	       move.l d0,-(sp)
    c498:	       jsr 18344 <__divsi3>
    c49e:	       addq.l #8,sp
    c4a0:	       movea.l 8(sp),a0
    c4a4:	       move.l d0,106(a0)
}
    c4a8:	       nop
    c4aa:	       addq.l #4,sp
    c4ac:	       rts

0000c4ae <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    c4ae:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c4b0:	          move.l 8(sp),-(sp)
    c4b4:	          jsr ac00 <findPerson>
    c4ba:	          addq.l #4,sp
    c4bc:	          move.l d0,(sp)
    if (thisPerson) {
    c4be:	,-------- beq.s c51e <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    c4c0:	|         movea.l (sp),a0
    c4c2:	|         move.l 68(a0),d0
    c4c6:	|     ,-- beq.s c4d8 <turnPersonToFace+0x2a>
    c4c8:	|     |   movea.l (sp),a0
    c4ca:	|     |   move.l 68(a0),d0
    c4ce:	|     |   move.l d0,-(sp)
    c4d0:	|     |   jsr 55fa <abortFunction>
    c4d6:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    c4d8:	|     '-> movea.l (sp),a0
    c4da:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    c4de:	|         movea.l (sp),a0
    c4e0:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    c4e4:	|         movea.l (sp),a0
    c4e6:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    c4ea:	|         move.l 12(sp),-(sp)
    c4ee:	|         move.l 4(sp),-(sp)
    c4f2:	|         jsr c434 <turnMeAngle>
    c4f8:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    c4fa:	|         movea.l 1d0d8 <speech>,a0
    c500:	|         move.l (a0),d0
    c502:	|         cmp.l (sp),d0
    c504:	|  ,----- bne.s c50a <turnPersonToFace+0x5c>
    c506:	|  |      moveq #2,d0
    c508:	|  |  ,-- bra.s c50c <turnPersonToFace+0x5e>
    c50a:	|  '--|-> moveq #0,d0
    c50c:	|     '-> move.l d0,-(sp)
    c50e:	|         move.l 4(sp),-(sp)
    c512:	|         jsr 479c <setFrames>
    c518:	|         addq.l #8,sp
        return TRUE;
    c51a:	|         moveq #1,d0
    c51c:	|     ,-- bra.s c520 <turnPersonToFace+0x72>
    }
    return FALSE;
    c51e:	'-----|-> clr.w d0
}
    c520:	      '-> addq.l #4,sp
    c522:	          rts

0000c524 <walkAllPeople>:

void walkAllPeople() {
    c524:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    c526:	             move.l 1d1e8 <allPeople>,(sp)

	while (thisPerson) {
    c52c:	   ,-------- bra.s c59c <walkAllPeople+0x78>
		if (thisPerson->walking) {
    c52e:	,--|-------> movea.l (sp),a0
    c530:	|  |         move.w 64(a0),d0
    c534:	|  |     ,-- beq.s c548 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    c536:	|  |     |   pea 1 <_start+0x1>
    c53a:	|  |     |   move.l 4(sp),-(sp)
    c53e:	|  |     |   jsr c5a8 <walkMe>
    c544:	|  |     |   addq.l #8,sp
    c546:	|  |  ,--|-- bra.s c568 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    c548:	|  |  |  '-> movea.l (sp),a0
    c54a:	|  |  |      move.w 66(a0),d0
    c54e:	|  |  +----- beq.s c568 <walkAllPeople+0x44>
			spinStep(thisPerson);
    c550:	|  |  |      move.l (sp),-(sp)
    c552:	|  |  |      jsr c2c4 <spinStep>
    c558:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    c55a:	|  |  |      clr.l -(sp)
    c55c:	|  |  |      move.l 4(sp),-(sp)
    c560:	|  |  |      jsr 479c <setFrames>
    c566:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    c568:	|  |  '----> movea.l (sp),a0
    c56a:	|  |         move.w 64(a0),d0
    c56e:	|  |     ,-- bne.s c596 <walkAllPeople+0x72>
    c570:	|  |     |   movea.l (sp),a0
    c572:	|  |     |   move.w 66(a0),d0
    c576:	|  |     +-- bne.s c596 <walkAllPeople+0x72>
    c578:	|  |     |   movea.l (sp),a0
    c57a:	|  |     |   move.l 68(a0),d0
    c57e:	|  |     +-- beq.s c596 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    c580:	|  |     |   movea.l (sp),a0
    c582:	|  |     |   move.l 68(a0),d0
    c586:	|  |     |   move.l d0,-(sp)
    c588:	|  |     |   jsr 776c <restartFunction>
    c58e:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    c590:	|  |     |   movea.l (sp),a0
    c592:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    c596:	|  |     '-> movea.l (sp),a0
    c598:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    c59c:	|  '-------> tst.l (sp)
    c59e:	'----------- bne.s c52e <walkAllPeople+0xa>
	}
}
    c5a0:	             nop
    c5a2:	             nop
    c5a4:	             addq.l #4,sp
    c5a6:	             rts

0000c5a8 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c5a8:	                lea -20(sp),sp
    c5ac:	                move.l d3,-(sp)
    c5ae:	                move.l d2,-(sp)
    c5b0:	                move.l 36(sp),d0
    c5b4:	                move.w d0,d0
    c5b6:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c5ba:	                cmpi.w #-1,10(sp)
    c5c0:	,-------------- bne.s c5c8 <walkMe+0x20>
    c5c2:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c5c8:	>-------------> movea.l 32(sp),a0
    c5cc:	|               move.l 48(a0),d0
    c5d0:	|               move.l d0,-(sp)
    c5d2:	|               jsr 17d6c <__floatsisf>
    c5d8:	|               addq.l #4,sp
    c5da:	|               move.l d0,d1
    c5dc:	|               movea.l 32(sp),a0
    c5e0:	|               move.l (a0),d0
    c5e2:	|               move.l d0,-(sp)
    c5e4:	|               move.l d1,-(sp)
    c5e6:	|               jsr 18060 <__subsf3>
    c5ec:	|               addq.l #8,sp
    c5ee:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c5f2:	|               movea.l 32(sp),a0
    c5f6:	|               move.l 52(a0),d0
    c5fa:	|               move.l d0,-(sp)
    c5fc:	|               jsr 17d6c <__floatsisf>
    c602:	|               addq.l #4,sp
    c604:	|               move.l d0,d1
    c606:	|               movea.l 32(sp),a0
    c60a:	|               move.l 4(a0),d0
    c60e:	|               move.l d0,-(sp)
    c610:	|               move.l d1,-(sp)
    c612:	|               jsr 18060 <__subsf3>
    c618:	|               addq.l #8,sp
    c61a:	|               move.l d0,-(sp)
    c61c:	|               move.l d0,-(sp)
    c61e:	|               jsr 17b28 <__addsf3>
    c624:	|               addq.l #8,sp
    c626:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c62a:	|               movea.l 32(sp),a0
    c62e:	|               move.l 32(a0),d2
    c632:	|               movea.l 32(sp),a0
    c636:	|               move.l 28(a0),d0
    c63a:	|               move.l d0,-(sp)
    c63c:	|               jsr 17d6c <__floatsisf>
    c642:	|               addq.l #4,sp
    c644:	|               move.l d0,-(sp)
    c646:	|               move.l d2,-(sp)
    c648:	|               jsr 17e1e <__mulsf3>
    c64e:	|               addq.l #8,sp
    c650:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c654:	|               move.l 24(sp),-(sp)
    c658:	|               jsr 17c8e <__extendsfdf2>
    c65e:	|               addq.l #4,sp
    c660:	|               move.l #-1717986918,-(sp)
    c666:	|               move.l #1070176665,-(sp)
    c66c:	|               move.l d1,-(sp)
    c66e:	|               move.l d0,-(sp)
    c670:	|               jsr 17f44 <__ltdf2>
    c676:	|               lea 16(sp),sp
    c67a:	|               tst.l d0
    c67c:	|           ,-- bge.s c686 <walkMe+0xde>
    c67e:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c686:	|           '-> move.l 20(sp),-(sp)
    c68a:	|               jsr 17d04 <__fixsfsi>
    c690:	|               addq.l #4,sp
    c692:	|               move.l d0,-(sp)
    c694:	|               jsr 97f0 <TF_abs>
    c69a:	|               addq.l #4,sp
    c69c:	|               move.l d0,d2
    c69e:	|               move.l 16(sp),-(sp)
    c6a2:	|               jsr 17d04 <__fixsfsi>
    c6a8:	|               addq.l #4,sp
    c6aa:	|               move.l d0,-(sp)
    c6ac:	|               jsr 97f0 <TF_abs>
    c6b2:	|               addq.l #4,sp
    c6b4:	|               cmp.l d2,d0
    c6b6:	|        ,----- bgt.s c6da <walkMe+0x132>
    c6b8:	|        |      move.l 20(sp),-(sp)
    c6bc:	|        |      jsr 17d04 <__fixsfsi>
    c6c2:	|        |      addq.l #4,sp
    c6c4:	|        |      move.l d0,-(sp)
    c6c6:	|        |      jsr 97f0 <TF_abs>
    c6cc:	|        |      addq.l #4,sp
    c6ce:	|        |      move.l d0,-(sp)
    c6d0:	|        |      jsr 17d6c <__floatsisf>
    c6d6:	|        |      addq.l #4,sp
    c6d8:	|        |  ,-- bra.s c6fa <walkMe+0x152>
    c6da:	|        '--|-> move.l 16(sp),-(sp)
    c6de:	|           |   jsr 17d04 <__fixsfsi>
    c6e4:	|           |   addq.l #4,sp
    c6e6:	|           |   move.l d0,-(sp)
    c6e8:	|           |   jsr 97f0 <TF_abs>
    c6ee:	|           |   addq.l #4,sp
    c6f0:	|           |   move.l d0,-(sp)
    c6f2:	|           |   jsr 17d6c <__floatsisf>
    c6f8:	|           |   addq.l #4,sp
    c6fa:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c6fe:	|               move.l 12(sp),-(sp)
    c702:	|               jsr 17d04 <__fixsfsi>
    c708:	|               addq.l #4,sp
    c70a:	|               move.l d0,-(sp)
    c70c:	|               jsr 97f0 <TF_abs>
    c712:	|               addq.l #4,sp
    c714:	|               move.l d0,-(sp)
    c716:	|               jsr 17d6c <__floatsisf>
    c71c:	|               addq.l #4,sp
    c71e:	|               move.l d0,-(sp)
    c720:	|               move.l 28(sp),-(sp)
    c724:	|               jsr 17f92 <__ltsf2>
    c72a:	|               addq.l #8,sp
    c72c:	|               tst.l d0
    c72e:	|        ,----- bge.w c7e0 <walkMe+0x238>
			if (thisPerson->spinning) {
    c732:	|        |      movea.l 32(sp),a0
    c736:	|        |      move.w 66(a0),d0
    c73a:	|        |  ,-- beq.s c758 <walkMe+0x1b0>
				spinStep(thisPerson);
    c73c:	|        |  |   move.l 32(sp),-(sp)
    c740:	|        |  |   jsr c2c4 <spinStep>
    c746:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c748:	|        |  |   pea 1 <_start+0x1>
    c74c:	|        |  |   move.l 36(sp),-(sp)
    c750:	|        |  |   jsr 479c <setFrames>
    c756:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c758:	|        |  '-> move.l 24(sp),-(sp)
    c75c:	|        |      move.l 16(sp),-(sp)
    c760:	|        |      jsr 17c22 <__divsf3>
    c766:	|        |      addq.l #8,sp
    c768:	|        |      move.l d0,24(sp)
			if (move)
    c76c:	|        |      tst.w 10(sp)
    c770:	|        |  ,-- beq.s c7da <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c772:	|        |  |   movea.l 32(sp),a0
    c776:	|        |  |   move.l 4(a0),d2
    c77a:	|        |  |   move.l 24(sp),d0
    c77e:	|        |  |   move.l d0,-(sp)
    c780:	|        |  |   move.l d0,-(sp)
    c782:	|        |  |   jsr 17b28 <__addsf3>
    c788:	|        |  |   addq.l #8,sp
    c78a:	|        |  |   move.l d0,-(sp)
    c78c:	|        |  |   move.l 20(sp),-(sp)
    c790:	|        |  |   jsr 17c22 <__divsf3>
    c796:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c798:	|        |  |   move.l d0,-(sp)
    c79a:	|        |  |   move.l d2,-(sp)
    c79c:	|        |  |   jsr 17b28 <__addsf3>
    c7a2:	|        |  |   addq.l #8,sp
    c7a4:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c7a6:	|        |  |   movea.l 32(sp),a0
    c7aa:	|        |  |   move.l (a0),d3
    c7ac:	|        |  |   move.l 24(sp),-(sp)
    c7b0:	|        |  |   move.l 24(sp),-(sp)
    c7b4:	|        |  |   jsr 17c22 <__divsf3>
    c7ba:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c7bc:	|        |  |   move.l d0,-(sp)
    c7be:	|        |  |   move.l d3,-(sp)
    c7c0:	|        |  |   jsr 17b28 <__addsf3>
    c7c6:	|        |  |   addq.l #8,sp
    c7c8:	|        |  |   move.l d2,-(sp)
    c7ca:	|        |  |   move.l d0,-(sp)
    c7cc:	|        |  |   move.l 40(sp),-(sp)
    c7d0:	|        |  |   jsr b3aa <moveAndScale>
    c7d6:	|        |  |   lea 12(sp),sp
			return TRUE;
    c7da:	|        |  '-> moveq #1,d0
    c7dc:	|  ,-----|----- bra.w c88e <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c7e0:	|  |     '----> movea.l 32(sp),a0
    c7e4:	|  |            move.l 56(a0),d0
    c7e8:	|  |            moveq #-1,d1
    c7ea:	|  |            cmp.l d0,d1
    c7ec:	|  |        ,-- bne.s c824 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c7ee:	|  |        |   movea.l 32(sp),a0
    c7f2:	|  |        |   move.l 110(a0),d0
    c7f6:	|  |        |   moveq #-1,d1
    c7f8:	|  |        |   cmp.l d0,d1
    c7fa:	|  |  ,-----|-- beq.s c838 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c7fc:	|  |  |     |   movea.l 32(sp),a0
    c800:	|  |  |     |   move.l 110(a0),d0
    c804:	|  |  |     |   movea.l 32(sp),a0
    c808:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c80c:	|  |  |     |   movea.l 32(sp),a0
    c810:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c816:	|  |  |     |   move.l 32(sp),-(sp)
    c81a:	|  |  |     |   jsr c2c4 <spinStep>
    c820:	|  |  |     |   addq.l #4,sp
			}
			break;
    c822:	|  |  +-----|-- bra.s c838 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c824:	|  |  |     '-> move.l 32(sp),-(sp)
    c828:	|  |  |         jsr 9f62 <doBorderStuff>
    c82e:	|  |  |         addq.l #4,sp
    c830:	|  |  |         tst.w d0
    c832:	|  |  |  ,----- beq.s c83c <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c834:	'--|--|--|----- bra.w c5c8 <walkMe+0x20>
			break;
    c838:	   |  '--|----> nop
    c83a:	   |     |  ,-- bra.s c83e <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c83c:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    c83e:	   |        '-> movea.l 32(sp),a0
    c842:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c846:	   |            clr.l -(sp)
    c848:	   |            move.l 36(sp),-(sp)
    c84c:	   |            jsr 479c <setFrames>
    c852:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c854:	   |            movea.l 32(sp),a0
    c858:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c85c:	   |            move.l d0,-(sp)
    c85e:	   |            jsr 17d6c <__floatsisf>
    c864:	   |            addq.l #4,sp
    c866:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c868:	   |            movea.l 32(sp),a0
    c86c:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c870:	   |            move.l d0,-(sp)
    c872:	   |            jsr 17d6c <__floatsisf>
    c878:	   |            addq.l #4,sp
    c87a:	   |            move.l d2,-(sp)
    c87c:	   |            move.l d0,-(sp)
    c87e:	   |            move.l 40(sp),-(sp)
    c882:	   |            jsr b3aa <moveAndScale>
    c888:	   |            lea 12(sp),sp
	return FALSE;
    c88c:	   |            clr.w d0
}
    c88e:	   '----------> move.l (sp)+,d2
    c890:	                move.l (sp)+,d3
    c892:	                lea 20(sp),sp
    c896:	                rts

0000c898 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c898:	       subq.l #8,sp
    c89a:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c89c:	   ,-- bra.s c8cc <clearStackLib+0x34>
		k = stackLib;
    c89e:	,--|-> move.l 1d214 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c8a6:	|  |   movea.l 1d214 <stackLib>,a0
    c8ac:	|  |   move.l 4(a0),d0
    c8b0:	|  |   move.l d0,1d214 <stackLib>
		FreeVec(k);
    c8b6:	|  |   move.l 8(sp),4(sp)
    c8bc:	|  |   move.l 1d188 <SysBase>,d0
    c8c2:	|  |   movea.l d0,a6
    c8c4:	|  |   movea.l 4(sp),a1
    c8c8:	|  |   jsr -690(a6)
	while (stackLib) {
    c8cc:	|  '-> move.l 1d214 <stackLib>,d0
    c8d2:	'----- bne.s c89e <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c8d4:	       clr.l 1d210 <stackLibTotal>
}
    c8da:	       nop
    c8dc:	       movea.l (sp)+,a6
    c8de:	       addq.l #8,sp
    c8e0:	       rts

0000c8e2 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c8e2:	          lea -128(sp),sp
    c8e6:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c8ea:	      ,-- bra.s c8fc <loadGame+0x1a>
    c8ec:	   ,--|-> move.l 1d120 <allRunningFunctions>,d0
    c8f2:	   |  |   move.l d0,-(sp)
    c8f4:	   |  |   jsr 662e <finishFunction>
    c8fa:	   |  |   addq.l #4,sp
    c8fc:	   |  '-> move.l 1d120 <allRunningFunctions>,d0
    c902:	   '----- bne.s c8ec <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c904:	          pea 1d218 <ssgVersion>
    c90a:	          pea 19a75 <PutChar+0x1699>
    c910:	          pea 41 <_start+0x41>
    c914:	          pea 53 <_start+0x53>
    c918:	          move.l 160(sp),-(sp)
    c91c:	          jsr 7354 <openAndVerify>
    c922:	          lea 20(sp),sp
    c926:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c92a:	      ,-- bne.s c932 <loadGame+0x50>
    c92c:	      |   clr.w d0
    c92e:	,-----|-- bra.w cbd8 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c932:	|     '-> move.l 112(sp),108(sp)
    c938:	|         lea 140(sp),a0
    c93c:	|         lea -126(a0),a0
    c940:	|         move.l a0,120(sp)
    c944:	|         moveq #8,d0
    c946:	|         move.l d0,116(sp)
    c94a:	|         move.l 1d190 <DOSBase>,d0
    c950:	|         movea.l d0,a6
    c952:	|         move.l 108(sp),d1
    c956:	|         move.l 120(sp),d2
    c95a:	|         move.l 116(sp),d3
    c95e:	|         jsr -42(a6)
    c962:	|         move.l d0,132(sp)
    c966:	|         move.l 132(sp),d0
    c96a:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c96e:	|         moveq #8,d0
    c970:	|         cmp.l 128(sp),d0
    c974:	|     ,-- beq.s c984 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c976:	|     |   pea 19a96 <PutChar+0x16ba>
    c97c:	|     |   jsr 1793a <KPrintF>
    c982:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c984:	|     '-> move.l 14(sp),d1
    c988:	|         move.l 1d12a <fileTime>,d0
    c98e:	|         cmp.l d1,d0
    c990:	|     ,-- bne.s c9a0 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c992:	|     |   move.l 18(sp),d1
    c996:	|     |   move.l 1d12e <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c99c:	|     |   cmp.l d1,d0
    c99e:	|  ,--|-- beq.s c9c0 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c9a0:	|  |  '-> move.l 144(sp),-(sp)
    c9a4:	|  |      pea 19ab2 <PutChar+0x16d6>
    c9aa:	|  |      pea 19b79 <PutChar+0x179d>
    c9b0:	|  |      jsr 1793a <KPrintF>
    c9b6:	|  |      lea 12(sp),sp
		return FALSE; 
    c9ba:	|  |      clr.w d0
    c9bc:	+--|----- bra.w cbd8 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c9c0:	|  '----> move.l 112(sp),124(sp)
    c9c6:	|         move.l 1d190 <DOSBase>,d0
    c9cc:	|         movea.l d0,a6
    c9ce:	|         move.l 124(sp),d1
    c9d2:	|         jsr -306(a6)
    c9d6:	|         move.l d0,136(sp)
    c9da:	|         move.l 136(sp),d0
    c9de:	|         move.l d0,d0
    c9e0:	|         move.w d0,1c9d8 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c9e6:	|         move.l 112(sp),100(sp)
    c9ec:	|         move.l 1d190 <DOSBase>,d0
    c9f2:	|         movea.l d0,a6
    c9f4:	|         move.l 100(sp),d1
    c9f8:	|         jsr -306(a6)
    c9fc:	|         move.l d0,96(sp)
    ca00:	|         move.l 96(sp),d0
    ca04:	|         move.l d0,d0
    ca06:	|         move.w d0,1d128 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    ca0c:	|         move.l 112(sp),92(sp)
    ca12:	|         move.l 1d190 <DOSBase>,d0
    ca18:	|         movea.l d0,a6
    ca1a:	|         move.l 92(sp),d1
    ca1e:	|         jsr -306(a6)
    ca22:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    ca26:	|         move.l 112(sp),84(sp)
    ca2c:	|         move.l 1d190 <DOSBase>,d0
    ca32:	|         movea.l d0,a6
    ca34:	|         move.l 84(sp),d1
    ca38:	|         jsr -306(a6)
    ca3c:	|         move.l d0,80(sp)
    ca40:	|         move.l 80(sp),d0
    ca44:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    ca48:	|     ,-- beq.s ca7c <loadGame+0x19a>
		fontNum = get2bytes (fp);
    ca4a:	|     |   move.l 112(sp),-(sp)
    ca4e:	|     |   jsr 6bc <get2bytes>
    ca54:	|     |   addq.l #4,sp
    ca56:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    ca5a:	|     |   move.l 112(sp),-(sp)
    ca5e:	|     |   jsr 6bc <get2bytes>
    ca64:	|     |   addq.l #4,sp
    ca66:	|     |   move.l d0,1d27c <fontHeight>
		charOrder = readString(fp);		
    ca6c:	|     |   move.l 112(sp),-(sp)
    ca70:	|     |   jsr b02 <readString>
    ca76:	|     |   addq.l #4,sp
    ca78:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    ca7c:	|     '-> move.l 104(sp),70(sp)
    ca82:	|         move.l 1d188 <SysBase>,d0
    ca88:	|         movea.l d0,a6
    ca8a:	|         movea.l 70(sp),a1
    ca8e:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    ca92:	|         move.l 112(sp),-(sp)
    ca96:	|         jsr 854 <getSigned>
    ca9c:	|         addq.l #4,sp
    ca9e:	|         move.w d0,1d080 <fontSpace>

	killAllPeople ();
    caa4:	|         jsr b014 <killAllPeople>
	killAllRegions ();
    caaa:	|         jsr 1614a <killAllRegions>

	int camerX = get2bytes (fp);
    cab0:	|         move.l 112(sp),-(sp)
    cab4:	|         jsr 6bc <get2bytes>
    caba:	|         addq.l #4,sp
    cabc:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    cac0:	|         move.l 112(sp),-(sp)
    cac4:	|         jsr 6bc <get2bytes>
    caca:	|         addq.l #4,sp
    cacc:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    cad0:	|         move.l 112(sp),-(sp)
    cad4:	|         jsr 7d8 <getFloat>
    cada:	|         addq.l #4,sp
    cadc:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    cae0:	|         move.l 112(sp),54(sp)
    cae6:	|         move.l 1d190 <DOSBase>,d0
    caec:	|         movea.l d0,a6
    caee:	|         move.l 54(sp),d1
    caf2:	|         jsr -306(a6)
    caf6:	|         move.l d0,50(sp)
    cafa:	|         move.l 50(sp),d0
    cafe:	|         move.l d0,d0
    cb00:	|         move.b d0,1caf6 <brightnessLevel>

	loadHandlers (fp);
    cb06:	|         move.l 112(sp),-(sp)
    cb0a:	|         jsr 72b4 <loadHandlers>
    cb10:	|         addq.l #4,sp
	loadRegions (fp);
    cb12:	|         move.l 112(sp),-(sp)
    cb16:	|         jsr 161a6 <loadRegions>
    cb1c:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    cb1e:	|         moveq #12,d0
    cb20:	|         move.l d0,46(sp)
    cb24:	|         clr.l 42(sp)
    cb28:	|         move.l 1d188 <SysBase>,d0
    cb2e:	|         movea.l d0,a6
    cb30:	|         move.l 46(sp),d0
    cb34:	|         move.l 42(sp),d1
    cb38:	|         jsr -684(a6)
    cb3c:	|         move.l d0,38(sp)
    cb40:	|         move.l 38(sp),d0
    cb44:	|         move.l d0,1d082 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    cb4a:	|         move.l 1d082 <mouseCursorAnim>,d0
    cb50:	|     ,-- bne.s cb64 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    cb52:	|     |   pea 19b83 <PutChar+0x17a7>
    cb58:	|     |   jsr 1793a <KPrintF>
    cb5e:	|     |   addq.l #4,sp
		return FALSE;
    cb60:	|     |   clr.w d0
    cb62:	+-----|-- bra.s cbd8 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    cb64:	|     '-> jsr da08 <nosnapshot>
	if (FGetC (fp)) {
    cb6a:	|         move.l 112(sp),34(sp)
    cb70:	|         move.l 1d190 <DOSBase>,d0
    cb76:	|         movea.l d0,a6
    cb78:	|         move.l 34(sp),d1
    cb7c:	|         jsr -306(a6)
    cb80:	|         move.l d0,30(sp)
    cb84:	|         move.l 30(sp),d0
    cb88:	|     ,-- beq.s cb9e <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    cb8a:	|     |   move.l 112(sp),-(sp)
    cb8e:	|     |   jsr da88 <restoreSnapshot>
    cb94:	|     |   addq.l #4,sp
    cb96:	|     |   tst.w d0
    cb98:	|     +-- bne.s cb9e <loadGame+0x2bc>
    cb9a:	|     |   clr.w d0
    cb9c:	+-----|-- bra.s cbd8 <loadGame+0x2f6>
	}

	Close (fp);
    cb9e:	|     '-> move.l 112(sp),26(sp)
    cba4:	|         move.l 1d190 <DOSBase>,d0
    cbaa:	|         movea.l d0,a6
    cbac:	|         move.l 26(sp),d1
    cbb0:	|         jsr -36(a6)
    cbb4:	|         move.l d0,22(sp)
	clearStackLib ();
    cbb8:	|         jsr c898 <clearStackLib>

	cameraX = camerX;
    cbbe:	|         move.l 66(sp),1d23e <cameraX>
	cameraY = camerY;
    cbc6:	|         move.l 62(sp),1d242 <cameraY>
	cameraZoom = camerZ;
    cbce:	|         move.l 58(sp),1cb1a <cameraZoom>

	return TRUE;
    cbd6:	|         moveq #1,d0
}
    cbd8:	'-------> movem.l (sp)+,d2-d3/a6
    cbdc:	          lea 128(sp),sp
    cbe0:	          rts

0000cbe2 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    cbe2:	   ,-> lea -64(sp),sp
    cbe6:	   |   move.l a6,-(sp)
    cbe8:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    cbea:	   |   movea.l 76(sp),a0
    cbee:	   |   move.l (a0),d0
    cbf0:	   |   move.l 80(sp),-(sp)
    cbf4:	   |   move.l d0,-(sp)
    cbf6:	   |   jsr 8d0 <put2bytes>
    cbfc:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    cbfe:	   |   movea.l 76(sp),a0
    cc02:	   |   move.l 40(a0),d0
    cc06:	,--|-- beq.s cc42 <saveFunction+0x60>
		FPutC (fp, 1);
    cc08:	|  |   move.l 80(sp),52(sp)
    cc0e:	|  |   moveq #1,d0
    cc10:	|  |   move.l d0,48(sp)
    cc14:	|  |   move.l 1d190 <DOSBase>,d0
    cc1a:	|  |   movea.l d0,a6
    cc1c:	|  |   move.l 52(sp),d1
    cc20:	|  |   move.l 48(sp),d2
    cc24:	|  |   jsr -312(a6)
    cc28:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    cc2c:	|  |   movea.l 76(sp),a0
    cc30:	|  |   move.l 40(a0),d0
    cc34:	|  |   move.l 80(sp),-(sp)
    cc38:	|  |   move.l d0,-(sp)
    cc3a:	|  '-- jsr cbe2 <saveFunction>(pc)
    cc3e:	|      addq.l #8,sp
    cc40:	|  ,-- bra.s cc64 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    cc42:	'--|-> move.l 80(sp),64(sp)
    cc48:	   |   clr.l 60(sp)
    cc4c:	   |   move.l 1d190 <DOSBase>,d0
    cc52:	   |   movea.l d0,a6
    cc54:	   |   move.l 64(sp),d1
    cc58:	   |   move.l 60(sp),d2
    cc5c:	   |   jsr -312(a6)
    cc60:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    cc64:	   '-> movea.l 76(sp),a0
    cc68:	       move.l 12(a0),d0
    cc6c:	       move.l 80(sp),-(sp)
    cc70:	       move.l d0,-(sp)
    cc72:	       jsr 958 <put4bytes>
    cc78:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    cc7a:	       movea.l 76(sp),a0
    cc7e:	       move.l 36(a0),d0
    cc82:	       move.l 80(sp),-(sp)
    cc86:	       move.l d0,-(sp)
    cc88:	       jsr 8d0 <put2bytes>
    cc8e:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    cc90:	       move.l 80(sp),40(sp)
    cc96:	       movea.l 76(sp),a0
    cc9a:	       move.w 54(a0),d0
    cc9e:	       movea.w d0,a0
    cca0:	       move.l a0,36(sp)
    cca4:	       move.l 1d190 <DOSBase>,d0
    ccaa:	       movea.l d0,a6
    ccac:	       move.l 40(sp),d1
    ccb0:	       move.l 36(sp),d2
    ccb4:	       jsr -312(a6)
    ccb8:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    ccbc:	       move.l 80(sp),28(sp)
    ccc2:	       movea.l 76(sp),a0
    ccc6:	       move.w 48(a0),d0
    ccca:	       movea.w d0,a0
    cccc:	       move.l a0,24(sp)
    ccd0:	       move.l 1d190 <DOSBase>,d0
    ccd6:	       movea.l d0,a6
    ccd8:	       move.l 28(sp),d1
    ccdc:	       move.l 24(sp),d2
    cce0:	       jsr -312(a6)
    cce4:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    cce8:	       move.l 80(sp),16(sp)
    ccee:	       movea.l 76(sp),a0
    ccf2:	       move.w 50(a0),d0
    ccf6:	       movea.w d0,a0
    ccf8:	       move.l a0,12(sp)
    ccfc:	       move.l 1d190 <DOSBase>,d0
    cd02:	       movea.l d0,a6
    cd04:	       move.l 16(sp),d1
    cd08:	       move.l 12(sp),d2
    cd0c:	       jsr -312(a6)
    cd10:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    cd14:	       moveq #28,d0
    cd16:	       add.l 76(sp),d0
    cd1a:	       move.l 80(sp),-(sp)
    cd1e:	       move.l d0,-(sp)
    cd20:	       jsr d43a <saveVariable>
    cd26:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    cd28:	       movea.l 76(sp),a0
    cd2c:	       move.b 56(a0),d0
    cd30:	   ,-- beq.s cd40 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    cd32:	   |   pea 19ba4 <PutChar+0x17c8>
    cd38:	   |   jsr 1793a <KPrintF>
    cd3e:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    cd40:	   '-> movea.l 76(sp),a0
    cd44:	       move.l 24(a0),d0
    cd48:	       move.l 80(sp),-(sp)
    cd4c:	       move.l d0,-(sp)
    cd4e:	       jsr d2ae <saveStack>
    cd54:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    cd56:	       clr.l 68(sp)
    cd5a:	   ,-- bra.s cd7e <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    cd5c:	,--|-> movea.l 76(sp),a0
    cd60:	|  |   move.l 20(a0),d1
    cd64:	|  |   move.l 68(sp),d0
    cd68:	|  |   lsl.l #3,d0
    cd6a:	|  |   add.l d1,d0
    cd6c:	|  |   move.l 80(sp),-(sp)
    cd70:	|  |   move.l d0,-(sp)
    cd72:	|  |   jsr d43a <saveVariable>
    cd78:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    cd7a:	|  |   addq.l #1,68(sp)
    cd7e:	|  '-> movea.l 76(sp),a0
    cd82:	|      move.l 8(a0),d0
    cd86:	|      cmp.l 68(sp),d0
    cd8a:	'----- bgt.s cd5c <saveFunction+0x17a>
	}
}
    cd8c:	       nop
    cd8e:	       nop
    cd90:	       move.l (sp)+,d2
    cd92:	       movea.l (sp)+,a6
    cd94:	       lea 64(sp),sp
    cd98:	       rts

0000cd9a <saveGame>:

BOOL saveGame (char * fname) {
    cd9a:	          lea -248(sp),sp
    cd9e:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    cda2:	          move.l 264(sp),244(sp)
    cda8:	          move.l #1006,240(sp)
    cdb0:	          move.l 1d190 <DOSBase>,d0
    cdb6:	          movea.l d0,a6
    cdb8:	          move.l 244(sp),d1
    cdbc:	          move.l 240(sp),d2
    cdc0:	          jsr -30(a6)
    cdc4:	          move.l d0,236(sp)
    cdc8:	          move.l 236(sp),d0
    cdcc:	          move.l d0,232(sp)
	if (fp == NULL) {
    cdd0:	      ,-- bne.s cde6 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    cdd2:	      |   pea 19bc6 <PutChar+0x17ea>
    cdd8:	      |   jsr 1793a <KPrintF>
    cdde:	      |   addq.l #4,sp
		return FALSE;
    cde0:	      |   clr.w d0
    cde2:	,-----|-- bra.w d2a4 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    cde6:	|     '-> move.l 232(sp),228(sp)
    cdec:	|         move.l #105443,224(sp)
    cdf4:	|         moveq #6,d0
    cdf6:	|         move.l d0,220(sp)
    cdfa:	|         move.l 1d190 <DOSBase>,d0
    ce00:	|         movea.l d0,a6
    ce02:	|         move.l 228(sp),d1
    ce06:	|         move.l 224(sp),d2
    ce0a:	|         move.l 220(sp),d3
    ce0e:	|         jsr -48(a6)
    ce12:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    ce16:	|         move.l 232(sp),212(sp)
    ce1c:	|         clr.l 208(sp)
    ce20:	|         move.l 1d190 <DOSBase>,d0
    ce26:	|         movea.l d0,a6
    ce28:	|         move.l 212(sp),d1
    ce2c:	|         move.l 208(sp),d2
    ce30:	|         jsr -312(a6)
    ce34:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    ce38:	|         move.l 232(sp),200(sp)
    ce3e:	|         clr.l 196(sp)
    ce42:	|         move.l 1d190 <DOSBase>,d0
    ce48:	|         movea.l d0,a6
    ce4a:	|         move.l 200(sp),d1
    ce4e:	|         move.l 196(sp),d2
    ce52:	|         jsr -312(a6)
    ce56:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    ce5a:	|         move.l 232(sp),188(sp)
    ce60:	|         moveq #2,d0
    ce62:	|         move.l d0,184(sp)
    ce66:	|         move.l 1d190 <DOSBase>,d0
    ce6c:	|         movea.l d0,a6
    ce6e:	|         move.l 188(sp),d1
    ce72:	|         move.l 184(sp),d2
    ce76:	|         jsr -312(a6)
    ce7a:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    ce7e:	|         move.l 232(sp),176(sp)
    ce84:	|         moveq #2,d0
    ce86:	|         move.l d0,172(sp)
    ce8a:	|         move.l 1d190 <DOSBase>,d0
    ce90:	|         movea.l d0,a6
    ce92:	|         move.l 176(sp),d1
    ce96:	|         move.l 172(sp),d2
    ce9a:	|         jsr -312(a6)
    ce9e:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    cea2:	|         move.l 232(sp),164(sp)
    cea8:	|         move.l #119082,160(sp)
    ceb0:	|         moveq #8,d0
    ceb2:	|         move.l d0,156(sp)
    ceb6:	|         move.l 1d190 <DOSBase>,d0
    cebc:	|         movea.l d0,a6
    cebe:	|         move.l 164(sp),d1
    cec2:	|         move.l 160(sp),d2
    cec6:	|         move.l 156(sp),d3
    ceca:	|         jsr -48(a6)
    cece:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    ced2:	|         move.l 232(sp),148(sp)
    ced8:	|         move.w 1c9d8 <allowAnyFilename>,d0
    cede:	|         movea.w d0,a0
    cee0:	|         move.l a0,144(sp)
    cee4:	|         move.l 1d190 <DOSBase>,d0
    ceea:	|         movea.l d0,a6
    ceec:	|         move.l 148(sp),d1
    cef0:	|         move.l 144(sp),d2
    cef4:	|         jsr -312(a6)
    cef8:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    cefc:	|         move.l 232(sp),136(sp)
    cf02:	|         move.w 1d128 <captureAllKeys>,d0
    cf08:	|         movea.w d0,a0
    cf0a:	|         move.l a0,132(sp)
    cf0e:	|         move.l 1d190 <DOSBase>,d0
    cf14:	|         movea.l d0,a6
    cf16:	|         move.l 136(sp),d1
    cf1a:	|         move.l 132(sp),d2
    cf1e:	|         jsr -312(a6)
    cf22:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    cf26:	|         move.l 232(sp),124(sp)
    cf2c:	|         moveq #1,d0
    cf2e:	|         move.l d0,120(sp)
    cf32:	|         move.l 1d190 <DOSBase>,d0
    cf38:	|         movea.l d0,a6
    cf3a:	|         move.l 124(sp),d1
    cf3e:	|         move.l 120(sp),d2
    cf42:	|         jsr -312(a6)
    cf46:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    cf4a:	|         move.l 232(sp),112(sp)
    cf50:	|         move.l 1d28c <fontTableSize>,d0
    cf56:	|         sgt d0
    cf58:	|         neg.b d0
    cf5a:	|         move.b d0,d0
    cf5c:	|         andi.l #255,d0
    cf62:	|         move.l d0,108(sp)
    cf66:	|         move.l 1d190 <DOSBase>,d0
    cf6c:	|         movea.l d0,a6
    cf6e:	|         move.l 112(sp),d1
    cf72:	|         move.l 108(sp),d2
    cf76:	|         jsr -312(a6)
    cf7a:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    cf7e:	|         move.l 1d28c <fontTableSize>,d0
    cf84:	|     ,-- ble.s cfc2 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    cf86:	|     |   move.l 1d280 <loadedFontNum>,d0
    cf8c:	|     |   move.l 232(sp),-(sp)
    cf90:	|     |   move.l d0,-(sp)
    cf92:	|     |   jsr 8d0 <put2bytes>
    cf98:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    cf9a:	|     |   move.l 1d27c <fontHeight>,d0
    cfa0:	|     |   move.l 232(sp),-(sp)
    cfa4:	|     |   move.l d0,-(sp)
    cfa6:	|     |   jsr 8d0 <put2bytes>
    cfac:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    cfae:	|     |   move.l 1d284 <fontOrderString>,d0
    cfb4:	|     |   move.l 232(sp),-(sp)
    cfb8:	|     |   move.l d0,-(sp)
    cfba:	|     |   jsr bd8 <writeString>
    cfc0:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    cfc2:	|     '-> move.w 1d080 <fontSpace>,d0
    cfc8:	|         movea.w d0,a0
    cfca:	|         move.l 232(sp),-(sp)
    cfce:	|         move.l a0,-(sp)
    cfd0:	|         jsr a9c <putSigned>
    cfd6:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    cfd8:	|         move.l 1d23e <cameraX>,d0
    cfde:	|         move.l 232(sp),-(sp)
    cfe2:	|         move.l d0,-(sp)
    cfe4:	|         jsr 8d0 <put2bytes>
    cfea:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    cfec:	|         move.l 1d242 <cameraY>,d0
    cff2:	|         move.l 232(sp),-(sp)
    cff6:	|         move.l d0,-(sp)
    cff8:	|         jsr 8d0 <put2bytes>
    cffe:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    d000:	|         move.l 1cb1a <cameraZoom>,d0
    d006:	|         move.l 232(sp),-(sp)
    d00a:	|         move.l d0,-(sp)
    d00c:	|         jsr a46 <putFloat>
    d012:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    d014:	|         move.l 232(sp),100(sp)
    d01a:	|         move.b 1caf6 <brightnessLevel>,d0
    d020:	|         move.b d0,d0
    d022:	|         andi.l #255,d0
    d028:	|         move.l d0,96(sp)
    d02c:	|         move.l 1d190 <DOSBase>,d0
    d032:	|         movea.l d0,a6
    d034:	|         move.l 100(sp),d1
    d038:	|         move.l 96(sp),d2
    d03c:	|         jsr -312(a6)
    d040:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    d044:	|         move.l 232(sp),-(sp)
    d048:	|         jsr 789e <saveHandlers>
    d04e:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    d050:	|         move.l 232(sp),-(sp)
    d054:	|         jsr 16360 <saveRegions>
    d05a:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    d05c:	|         move.l 1d082 <mouseCursorAnim>,d0
    d062:	|         move.l 232(sp),-(sp)
    d066:	|         move.l d0,-(sp)
    d068:	|         jsr b5be <saveAnim>
    d06e:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    d070:	|         move.l 1d086 <mouseCursorFrameNum>,d0
    d076:	|         move.l 232(sp),-(sp)
    d07a:	|         move.l d0,-(sp)
    d07c:	|         jsr 8d0 <put2bytes>
    d082:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    d084:	|         move.l 1d120 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    d08c:	|         clr.l 248(sp)
	while (thisFunction) {
    d090:	|     ,-- bra.s d0a0 <saveGame+0x306>
		countFunctions ++;
    d092:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    d096:	|  |  |   movea.l 252(sp),a0
    d09a:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    d0a0:	|  |  '-> tst.l 252(sp)
    d0a4:	|  '----- bne.s d092 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    d0a6:	|         move.l 232(sp),-(sp)
    d0aa:	|         move.l 252(sp),-(sp)
    d0ae:	|         jsr 8d0 <put2bytes>
    d0b4:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    d0b6:	|         move.l 1d120 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    d0be:	|     ,-- bra.s d0da <saveGame+0x340>
		saveFunction (thisFunction, fp);
    d0c0:	|  ,--|-> move.l 232(sp),-(sp)
    d0c4:	|  |  |   move.l 256(sp),-(sp)
    d0c8:	|  |  |   jsr cbe2 <saveFunction>
    d0ce:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    d0d0:	|  |  |   movea.l 252(sp),a0
    d0d4:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    d0da:	|  |  '-> tst.l 252(sp)
    d0de:	|  '----- bne.s d0c0 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    d0e0:	|         clr.l 256(sp)
    d0e4:	|     ,-- bra.s d106 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    d0e6:	|  ,--|-> move.l 1d136 <globalVars>,d1
    d0ec:	|  |  |   move.l 256(sp),d0
    d0f0:	|  |  |   lsl.l #3,d0
    d0f2:	|  |  |   add.l d1,d0
    d0f4:	|  |  |   move.l 232(sp),-(sp)
    d0f8:	|  |  |   move.l d0,-(sp)
    d0fa:	|  |  |   jsr d43a <saveVariable>
    d100:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    d102:	|  |  |   addq.l #1,256(sp)
    d106:	|  |  '-> move.l 1d160 <numGlobals>,d0
    d10c:	|  |      cmp.l 256(sp),d0
    d110:	|  '----- bgt.s d0e6 <saveGame+0x34c>
	}

	savePeople (fp);
    d112:	|         move.l 232(sp),-(sp)
    d116:	|         jsr b6e6 <savePeople>
    d11c:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    d11e:	|         movea.l 1d2a0 <currentFloor>,a0
    d124:	|         move.l 8(a0),d0
    d128:	|  ,----- beq.s d166 <saveGame+0x3cc>
		FPutC (fp, 1);
    d12a:	|  |      move.l 232(sp),76(sp)
    d130:	|  |      moveq #1,d0
    d132:	|  |      move.l d0,72(sp)
    d136:	|  |      move.l 1d190 <DOSBase>,d0
    d13c:	|  |      movea.l d0,a6
    d13e:	|  |      move.l 76(sp),d1
    d142:	|  |      move.l 72(sp),d2
    d146:	|  |      jsr -312(a6)
    d14a:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    d14e:	|  |      movea.l 1d2a0 <currentFloor>,a0
    d154:	|  |      move.l (a0),d0
    d156:	|  |      move.l 232(sp),-(sp)
    d15a:	|  |      move.l d0,-(sp)
    d15c:	|  |      jsr 8d0 <put2bytes>
    d162:	|  |      addq.l #8,sp
    d164:	|  |  ,-- bra.s d188 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    d166:	|  '--|-> move.l 232(sp),88(sp)
    d16c:	|     |   clr.l 84(sp)
    d170:	|     |   move.l 1d190 <DOSBase>,d0
    d176:	|     |   movea.l d0,a6
    d178:	|     |   move.l 88(sp),d1
    d17c:	|     |   move.l 84(sp),d2
    d180:	|     |   jsr -312(a6)
    d184:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    d188:	|     '-> move.l 232(sp),64(sp)
    d18e:	|         move.l 1d252 <speechMode>,60(sp)
    d196:	|         move.l 1d190 <DOSBase>,d0
    d19c:	|         movea.l d0,a6
    d19e:	|         move.l 64(sp),d1
    d1a2:	|         move.l 60(sp),d2
    d1a6:	|         jsr -312(a6)
    d1aa:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    d1ae:	|         move.b 1d056 <fadeMode>,d0
    d1b4:	|         move.b d0,d0
    d1b6:	|         andi.l #255,d0
    d1bc:	|         move.l d0,52(sp)
    d1c0:	|         move.l 232(sp),48(sp)
    d1c6:	|         move.l 1d190 <DOSBase>,d0
    d1cc:	|         movea.l d0,a6
    d1ce:	|         move.l 52(sp),d1
    d1d2:	|         move.l 48(sp),d2
    d1d6:	|         jsr -312(a6)
    d1da:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    d1de:	|         move.l 1d0d8 <speech>,d0
    d1e4:	|         move.l 232(sp),-(sp)
    d1e8:	|         move.l d0,-(sp)
    d1ea:	|         jsr 4650 <saveSpeech>
    d1f0:	|         addq.l #8,sp
	saveStatusBars (fp);
    d1f2:	|         move.l 232(sp),-(sp)
    d1f6:	|         jsr 8a18 <saveStatusBars>
    d1fc:	|         addq.l #4,sp
	saveSounds (fp);
    d1fe:	|         move.l 232(sp),-(sp)
    d202:	|         jsr d7ac <saveSounds>
    d208:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    d20a:	|         move.w 1d23c <saveEncoding>,d0
    d210:	|         move.w d0,d0
    d212:	|         andi.l #65535,d0
    d218:	|         move.l 232(sp),-(sp)
    d21c:	|         move.l d0,-(sp)
    d21e:	|         jsr 8d0 <put2bytes>
    d224:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    d226:	|         move.l 1d22e <parallaxStuff>,d0
    d22c:	|         move.l 232(sp),-(sp)
    d230:	|         move.l d0,-(sp)
    d232:	|         jsr daae <saveParallaxRecursive>
    d238:	|         addq.l #8,sp
	FPutC (fp, 0);
    d23a:	|         move.l 232(sp),40(sp)
    d240:	|         clr.l 36(sp)
    d244:	|         move.l 1d190 <DOSBase>,d0
    d24a:	|         movea.l d0,a6
    d24c:	|         move.l 40(sp),d1
    d250:	|         move.l 36(sp),d2
    d254:	|         jsr -312(a6)
    d258:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    d25c:	|         move.l 232(sp),28(sp)
    d262:	|         move.l 1cafc <languageNum>,24(sp)
    d26a:	|         move.l 1d190 <DOSBase>,d0
    d270:	|         movea.l d0,a6
    d272:	|         move.l 28(sp),d1
    d276:	|         move.l 24(sp),d2
    d27a:	|         jsr -312(a6)
    d27e:	|         move.l d0,20(sp)

	Close(fp);
    d282:	|         move.l 232(sp),16(sp)
    d288:	|         move.l 1d190 <DOSBase>,d0
    d28e:	|         movea.l d0,a6
    d290:	|         move.l 16(sp),d1
    d294:	|         jsr -36(a6)
    d298:	|         move.l d0,12(sp)
	clearStackLib ();
    d29c:	|         jsr c898 <clearStackLib>
	return TRUE;
    d2a2:	|         moveq #1,d0
}
    d2a4:	'-------> movem.l (sp)+,d2-d3/a6
    d2a8:	          lea 248(sp),sp
    d2ac:	          rts

0000d2ae <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    d2ae:	       lea -12(sp),sp
	int elements = 0;
    d2b2:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    d2b6:	       move.l 16(sp),(sp)
	while (search) {
    d2ba:	   ,-- bra.s d2c6 <saveStack+0x18>
		elements ++;
    d2bc:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    d2c0:	|  |   movea.l (sp),a0
    d2c2:	|  |   move.l 8(a0),(sp)
	while (search) {
    d2c6:	|  '-> tst.l (sp)
    d2c8:	'----- bne.s d2bc <saveStack+0xe>
	}

	put2bytes (elements, fp);
    d2ca:	       move.l 20(sp),-(sp)
    d2ce:	       move.l 12(sp),-(sp)
    d2d2:	       jsr 8d0 <put2bytes>
    d2d8:	       addq.l #8,sp
	search = vs;
    d2da:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    d2de:	       clr.l 4(sp)
    d2e2:	   ,-- bra.s d2fe <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    d2e4:	,--|-> move.l (sp),d0
    d2e6:	|  |   move.l 20(sp),-(sp)
    d2ea:	|  |   move.l d0,-(sp)
    d2ec:	|  |   jsr d43a <saveVariable>
    d2f2:	|  |   addq.l #8,sp
		search = search -> next;
    d2f4:	|  |   movea.l (sp),a0
    d2f6:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    d2fa:	|  |   addq.l #1,4(sp)
    d2fe:	|  '-> move.l 4(sp),d0
    d302:	|      cmp.l 8(sp),d0
    d306:	'----- blt.s d2e4 <saveStack+0x36>
	}
}
    d308:	       nop
    d30a:	       nop
    d30c:	       lea 12(sp),sp
    d310:	       rts

0000d312 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    d312:	             lea -44(sp),sp
    d316:	             move.l a6,-(sp)
    d318:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    d31a:	             move.l 1d214 <stackLib>,48(sp)
	int a = 0;
    d322:	             clr.l 44(sp)
	while (s) {
    d326:	      ,----- bra.s d384 <saveStackRef+0x72>
		if (s -> stack == vs) {
    d328:	   ,--|----> movea.l 48(sp),a0
    d32c:	   |  |      move.l (a0),d0
    d32e:	   |  |      cmp.l 56(sp),d0
    d332:	   |  |  ,-- bne.s d376 <saveStackRef+0x64>
			FPutC (fp, 1);
    d334:	   |  |  |   move.l 60(sp),16(sp)
    d33a:	   |  |  |   moveq #1,d0
    d33c:	   |  |  |   move.l d0,12(sp)
    d340:	   |  |  |   move.l 1d190 <DOSBase>,d0
    d346:	   |  |  |   movea.l d0,a6
    d348:	   |  |  |   move.l 16(sp),d1
    d34c:	   |  |  |   move.l 12(sp),d2
    d350:	   |  |  |   jsr -312(a6)
    d354:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    d358:	   |  |  |   move.l 1d210 <stackLibTotal>,d0
    d35e:	   |  |  |   sub.l 44(sp),d0
    d362:	   |  |  |   move.l 60(sp),-(sp)
    d366:	   |  |  |   move.l d0,-(sp)
    d368:	   |  |  |   jsr 8d0 <put2bytes>
    d36e:	   |  |  |   addq.l #8,sp
			return TRUE;
    d370:	   |  |  |   moveq #1,d0
    d372:	,--|--|--|-- bra.w d430 <saveStackRef+0x11e>
		}
		s = s -> next;
    d376:	|  |  |  '-> movea.l 48(sp),a0
    d37a:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    d380:	|  |  |      addq.l #1,44(sp)
	while (s) {
    d384:	|  |  '----> tst.l 48(sp)
    d388:	|  '-------- bne.s d328 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    d38a:	|            move.l 60(sp),40(sp)
    d390:	|            clr.l 36(sp)
    d394:	|            move.l 1d190 <DOSBase>,d0
    d39a:	|            movea.l d0,a6
    d39c:	|            move.l 40(sp),d1
    d3a0:	|            move.l 36(sp),d2
    d3a4:	|            jsr -312(a6)
    d3a8:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    d3ac:	|            movea.l 56(sp),a0
    d3b0:	|            move.l (a0),d0
    d3b2:	|            move.l 60(sp),-(sp)
    d3b6:	|            move.l d0,-(sp)
    d3b8:	|            jsr d2ae <saveStack>
    d3be:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    d3c0:	|            moveq #8,d0
    d3c2:	|            move.l d0,28(sp)
    d3c6:	|            clr.l 24(sp)
    d3ca:	|            move.l 1d188 <SysBase>,d0
    d3d0:	|            movea.l d0,a6
    d3d2:	|            move.l 28(sp),d0
    d3d6:	|            move.l 24(sp),d1
    d3da:	|            jsr -684(a6)
    d3de:	|            move.l d0,20(sp)
    d3e2:	|            move.l 20(sp),d0
    d3e6:	|            move.l d0,48(sp)
	stackLibTotal ++;
    d3ea:	|            move.l 1d210 <stackLibTotal>,d0
    d3f0:	|            addq.l #1,d0
    d3f2:	|            move.l d0,1d210 <stackLibTotal>
	if (! s) {
    d3f8:	|            tst.l 48(sp)
    d3fc:	|        ,-- bne.s d410 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    d3fe:	|        |   pea 19c12 <PutChar+0x1836>
    d404:	|        |   jsr 1793a <KPrintF>
    d40a:	|        |   addq.l #4,sp
		return FALSE;
    d40c:	|        |   clr.w d0
    d40e:	+--------|-- bra.s d430 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    d410:	|        '-> move.l 1d214 <stackLib>,d0
    d416:	|            movea.l 48(sp),a0
    d41a:	|            move.l d0,4(a0)
	s -> stack = vs;
    d41e:	|            movea.l 48(sp),a0
    d422:	|            move.l 56(sp),(a0)
	stackLib = s;
    d426:	|            move.l 48(sp),1d214 <stackLib>
	return TRUE;
    d42e:	|            moveq #1,d0
}
    d430:	'----------> move.l (sp)+,d2
    d432:	             movea.l (sp)+,a6
    d434:	             lea 44(sp),sp
    d438:	             rts

0000d43a <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    d43a:	          lea -12(sp),sp
    d43e:	          move.l a6,-(sp)
    d440:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    d442:	          move.l 28(sp),16(sp)
    d448:	          movea.l 24(sp),a0
    d44c:	          move.l (a0),d0
    d44e:	          move.l d0,12(sp)
    d452:	          move.l 1d190 <DOSBase>,d0
    d458:	          movea.l d0,a6
    d45a:	          move.l 16(sp),d1
    d45e:	          move.l 12(sp),d2
    d462:	          jsr -312(a6)
    d466:	          move.l d0,8(sp)
	switch (from -> varType) {
    d46a:	          movea.l 24(sp),a0
    d46e:	          move.l (a0),d0
    d470:	          moveq #9,d1
    d472:	          cmp.l d0,d1
    d474:	      ,-- bcs.w d524 <saveVariable+0xea>
    d478:	      |   add.l d0,d0
    d47a:	      |   movea.l d0,a0
    d47c:	      |   adda.l #54408,a0
    d482:	      |   move.w (a0),d0
    d484:	      |   jmp (d488 <saveVariable+0x4e>,pc,d0.w)
    d488:	      |   ori.l #1310740,(a0)+
    d48e:	      |   ori.b #20,(20,a0,d0.w)
    d494:	      |   .short 0x004c
    d496:	      |   ori.b #126,(a4)
    d49a:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    d49e:	      |   ori.b #40,(a0)+
    d4a2:	      |   ori.b #47,d4
    d4a6:	      |   ori.b #0,(a4)+
    d4aa:	      |   jsr 958 <put4bytes>
    d4b0:	      |   addq.l #8,sp
		return TRUE;
    d4b2:	      |   moveq #1,d0
    d4b4:	,-----|-- bra.w d560 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    d4b8:	|     |   movea.l 24(sp),a0
    d4bc:	|     |   move.l 4(a0),d0
    d4c0:	|     |   move.l 28(sp),-(sp)
    d4c4:	|     |   move.l d0,-(sp)
    d4c6:	|     |   jsr bd8 <writeString>
    d4cc:	|     |   addq.l #8,sp
		return TRUE;
    d4ce:	|     |   moveq #1,d0
    d4d0:	+-----|-- bra.w d560 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    d4d4:	|     |   movea.l 24(sp),a0
    d4d8:	|     |   move.l 4(a0),d0
    d4dc:	|     |   move.l 28(sp),-(sp)
    d4e0:	|     |   move.l d0,-(sp)
    d4e2:	|     |   jsr d312 <saveStackRef>
    d4e8:	|     |   addq.l #8,sp
    d4ea:	+-----|-- bra.s d560 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    d4ec:	|     |   movea.l 24(sp),a0
    d4f0:	|     |   move.l 4(a0),d0
    d4f4:	|     |   move.l 28(sp),-(sp)
    d4f8:	|     |   move.l d0,-(sp)
    d4fa:	|     |   jsr b688 <saveCostume>
    d500:	|     |   addq.l #8,sp
		return FALSE;
    d502:	|     |   clr.w d0
    d504:	+-----|-- bra.s d560 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    d506:	|     |   movea.l 24(sp),a0
    d50a:	|     |   move.l 4(a0),d0
    d50e:	|     |   move.l 28(sp),-(sp)
    d512:	|     |   move.l d0,-(sp)
    d514:	|     |   jsr b5be <saveAnim>
    d51a:	|     |   addq.l #8,sp
		return FALSE;
    d51c:	|     |   clr.w d0
    d51e:	+-----|-- bra.s d560 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    d520:	|     |   clr.w d0
    d522:	+-----|-- bra.s d560 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    d524:	|     '-> movea.l 24(sp),a0
    d528:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d52a:	|         moveq #10,d1
    d52c:	|         cmp.l d0,d1
    d52e:	|  ,----- bcs.s d548 <saveVariable+0x10e>
						typeName[from->varType] :
    d530:	|  |      movea.l 24(sp),a0
    d534:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d536:	|  |      add.l d0,d0
    d538:	|  |      movea.l d0,a1
    d53a:	|  |      adda.l d0,a1
    d53c:	|  |      lea 1d058 <typeName>,a0
    d542:	|  |      move.l (0,a1,a0.l),d0
    d546:	|  |  ,-- bra.s d54e <saveVariable+0x114>
    d548:	|  '--|-> move.l #105527,d0
    d54e:	|     '-> move.l d0,-(sp)
    d550:	|         pea 19c3e <PutChar+0x1862>
    d556:	|         jsr 1793a <KPrintF>
    d55c:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    d55e:	|         moveq #1,d0
    d560:	'-------> move.l (sp)+,d2
    d562:	          movea.l (sp)+,a6
    d564:	          lea 12(sp),sp
    d568:	          rts

0000d56a <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    d56a:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    d56e:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    d576:	          movea.l 4(sp),a0
    d57a:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    d580:	          movea.l 4(sp),a0
    d584:	          move.w 10(a0),d0
    d588:	          lsr.w #8,d0
    d58a:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d58e:	          movea.l 4(sp),a0
    d592:	          move.w 10(a0),d0
    d596:	          move.b d0,(sp)

    if(counterx_new)
    d598:	,-------- beq.w d63e <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d59c:	|         clr.w d1
    d59e:	|         move.b (sp),d1
    d5a0:	|         move.w 1d21c <counterx_old>,d0
    d5a6:	|         sub.w d0,d1
    d5a8:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d5ac:	|         cmpi.w #128,10(sp)
    d5b2:	|     ,-- blt.s d5ca <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d5b4:	|     |   move.w #1,1d13e <input+0x4>
            counterx_diff -= 256;    
    d5bc:	|     |   move.w 10(sp),d0
    d5c0:	|     |   addi.w #-256,d0
    d5c4:	|     |   move.w d0,10(sp)
    d5c8:	|  ,--|-- bra.s d5f6 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d5ca:	|  |  '-> cmpi.w #-129,10(sp)
    d5d0:	|  |  ,-- bgt.s d5e8 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d5d2:	|  |  |   move.w 10(sp),d0
    d5d6:	|  |  |   addi.w #256,d0
    d5da:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d5de:	|  |  |   move.w #1,1d13e <input+0x4>
    d5e6:	|  +--|-- bra.s d5f6 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d5e8:	|  |  '-> tst.w 10(sp)
    d5ec:	|  +----- beq.s d5f6 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d5ee:	|  |      move.w #1,1d13e <input+0x4>
        }

        input.mouseX += counterx_diff;
    d5f6:	|  '----> move.l 1d144 <input+0xa>,d0
    d5fc:	|         movea.w 10(sp),a0
    d600:	|         add.l a0,d0
    d602:	|         move.l d0,1d144 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d608:	|         move.l 1d144 <input+0xa>,d1
    d60e:	|         move.l 1d0dc <winWidth>,d0
    d614:	|         cmp.l d1,d0
    d616:	|     ,-- bge.s d626 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    d618:	|     |   move.l 1d0dc <winWidth>,d0
    d61e:	|     |   move.l d0,1d144 <input+0xa>
    d624:	|  ,--|-- bra.s d634 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d626:	|  |  '-> move.l 1d144 <input+0xa>,d0
    d62c:	|  +----- bpl.s d634 <CsiCheckInput+0xca>
            input.mouseX = 0;
    d62e:	|  |      clr.l 1d144 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d634:	|  '----> clr.w d0
    d636:	|         move.b (sp),d0
    d638:	|         move.w d0,1d21c <counterx_old>
    }    

    if(countery_new)
    d63e:	'-------> tst.b 1(sp)
    d642:	,-------- beq.w d6ec <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d646:	|         clr.w d1
    d648:	|         move.b 1(sp),d1
    d64c:	|         move.w 1d21e <countery_old>,d0
    d652:	|         sub.w d0,d1
    d654:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d658:	|         cmpi.w #128,8(sp)
    d65e:	|     ,-- blt.s d676 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d660:	|     |   move.w #1,1d13e <input+0x4>
            countery_diff -= 256;    
    d668:	|     |   move.w 8(sp),d0
    d66c:	|     |   addi.w #-256,d0
    d670:	|     |   move.w d0,8(sp)
    d674:	|  ,--|-- bra.s d6a2 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d676:	|  |  '-> cmpi.w #-129,8(sp)
    d67c:	|  |  ,-- bgt.s d694 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d67e:	|  |  |   move.w #1,1d13e <input+0x4>
            countery_diff += 256;
    d686:	|  |  |   move.w 8(sp),d0
    d68a:	|  |  |   addi.w #256,d0
    d68e:	|  |  |   move.w d0,8(sp)
    d692:	|  +--|-- bra.s d6a2 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d694:	|  |  '-> tst.w 8(sp)
    d698:	|  +----- beq.s d6a2 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d69a:	|  |      move.w #1,1d13e <input+0x4>
        }

        input.mouseY += countery_diff;
    d6a2:	|  '----> move.l 1d148 <input+0xe>,d0
    d6a8:	|         movea.w 8(sp),a0
    d6ac:	|         add.l a0,d0
    d6ae:	|         move.l d0,1d148 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d6b4:	|         move.l 1d148 <input+0xe>,d1
    d6ba:	|         move.l 1d0e0 <winHeight>,d0
    d6c0:	|         cmp.l d1,d0
    d6c2:	|     ,-- bge.s d6d2 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d6c4:	|     |   move.l 1d0e0 <winHeight>,d0
    d6ca:	|     |   move.l d0,1d148 <input+0xe>
    d6d0:	|  ,--|-- bra.s d6e0 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d6d2:	|  |  '-> move.l 1d148 <input+0xe>,d0
    d6d8:	|  +----- bpl.s d6e0 <CsiCheckInput+0x176>
            input.mouseY = 0;
    d6da:	|  |      clr.l 1d148 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d6e0:	|  '----> clr.w d0
    d6e2:	|         move.b 1(sp),d0
    d6e6:	|         move.w d0,1d21e <countery_old>
    } 

    input.leftRelease = FALSE;
    d6ec:	'-------> clr.w 1d140 <input+0x6>
    input.rightRelease = FALSE;
    d6f2:	          clr.w 1d142 <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d6f8:	          move.w 1d13a <input>,d0
    d6fe:	      ,-- beq.s d724 <CsiCheckInput+0x1ba>
    d700:	      |   movea.l #12574721,a0
    d706:	      |   move.b (a0),d0
    d708:	      |   move.b d0,d0
    d70a:	      |   andi.l #255,d0
    d710:	      |   moveq #64,d1
    d712:	      |   and.l d1,d0
    d714:	      +-- beq.s d724 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    d716:	      |   clr.w 1d13a <input>
        input.leftRelease = TRUE;
    d71c:	      |   move.w #1,1d140 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d724:	      '-> move.w 1d13c <input+0x2>,d0
    d72a:	      ,-- beq.s d752 <CsiCheckInput+0x1e8>
    d72c:	      |   movea.l #14675990,a0
    d732:	      |   move.w (a0),d0
    d734:	      |   move.w d0,d0
    d736:	      |   andi.l #65535,d0
    d73c:	      |   andi.l #1024,d0
    d742:	      +-- beq.s d752 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    d744:	      |   clr.w 1d13c <input+0x2>
        input.rightRelease = TRUE;
    d74a:	      |   move.w #1,1d142 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d752:	      '-> movea.l #12574721,a0
    d758:	          move.b (a0),d0
    d75a:	          move.b d0,d0
    d75c:	          andi.l #255,d0
    d762:	          moveq #64,d1
    d764:	          and.l d1,d0
    d766:	      ,-- bne.s d770 <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    d768:	      |   move.w #1,1d13a <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d770:	      '-> movea.l #14675990,a0
    d776:	          move.w (a0),d0
    d778:	          move.w d0,d0
    d77a:	          andi.l #65535,d0
    d780:	          andi.l #1024,d0
    d786:	      ,-- bne.s d790 <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    d788:	      |   move.w #1,1d13c <input+0x2>
    }

    d790:	      '-> nop
    d792:	          lea 12(sp),sp
    d796:	          rts

0000d798 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d798:	moveq #0,d0
}
    d79a:	rts

0000d79c <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d79c:	nop
    d79e:	rts

0000d7a0 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d7a0:	nop
    d7a2:	rts

0000d7a4 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d7a4:	moveq #1,d0
}
    d7a6:	rts

0000d7a8 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d7a8:	nop
    d7aa:	rts

0000d7ac <saveSounds>:

void saveSounds (BPTR fp) {
    d7ac:	lea -12(sp),sp
    d7b0:	move.l a6,-(sp)
    d7b2:	move.l d2,-(sp)
	FPutC (fp,0);
    d7b4:	move.l 24(sp),16(sp)
    d7ba:	clr.l 12(sp)
    d7be:	move.l 1d190 <DOSBase>,d0
    d7c4:	movea.l d0,a6
    d7c6:	move.l 16(sp),d1
    d7ca:	move.l 12(sp),d2
    d7ce:	jsr -312(a6)
    d7d2:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d7d6:	move.l 1cb16 <defSoundVol>,d0
    d7dc:	move.l 24(sp),-(sp)
    d7e0:	move.l d0,-(sp)
    d7e2:	jsr 8d0 <put2bytes>
    d7e8:	addq.l #8,sp
	put2bytes (defVol, fp);
    d7ea:	move.l 1cb12 <defVol>,d0
    d7f0:	move.l 24(sp),-(sp)
    d7f4:	move.l d0,-(sp)
    d7f6:	jsr 8d0 <put2bytes>
    d7fc:	addq.l #8,sp
}
    d7fe:	nop
    d800:	move.l (sp)+,d2
    d802:	movea.l (sp)+,a6
    d804:	lea 12(sp),sp
    d808:	rts

0000d80a <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d80a:	move.l 4(sp),1cb12 <defVol>
}
    d812:	nop
    d814:	rts

0000d816 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d816:	move.l 4(sp),1cb16 <defSoundVol>
}
    d81e:	nop
    d820:	rts

0000d822 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d822:	nop
    d824:	rts

0000d826 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d826:	nop
    d828:	rts

0000d82a <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d82a:	nop
    d82c:	rts

0000d82e <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d82e:	subq.l #4,sp
    d830:	move.l 12(sp),d0
    d834:	move.w d0,d0
    d836:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d83a:	moveq #1,d0
}
    d83c:	addq.l #4,sp
    d83e:	rts

0000d840 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d840:	nop
    d842:	rts

0000d844 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    d844:	move.l 16(sp),-(sp)
    d848:	move.l 16(sp),-(sp)
    d84c:	move.l 16(sp),-(sp)
    d850:	move.l 16(sp),-(sp)
    d854:	jsr e0e <CstBlankScreen>
    d85a:	lea 16(sp),sp
}
    d85e:	nop
    d860:	rts

0000d862 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d862:	pea 19c61 <PutChar+0x1885>
    d868:	jsr 1793a <KPrintF>
    d86e:	addq.l #4,sp
}
    d870:	nop
    d872:	rts

0000d874 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d874:	movea.l 8(sp),a1
    d878:	movea.l 12(sp),a0
    d87c:	move.l 8(sp),d1
    d880:	move.l 4(sp),d0
    d884:	move.l a1,-(sp)
    d886:	move.l a0,-(sp)
    d888:	move.l d1,-(sp)
    d88a:	move.l d0,-(sp)
    d88c:	jsr 4d4a <drawLine>
    d892:	lea 16(sp),sp
}
    d896:	nop
    d898:	rts

0000d89a <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d89a:	movea.l 12(sp),a1
    d89e:	movea.l 4(sp),a0
    d8a2:	move.l 8(sp),d1
    d8a6:	move.l 4(sp),d0
    d8aa:	move.l a1,-(sp)
    d8ac:	move.l a0,-(sp)
    d8ae:	move.l d1,-(sp)
    d8b0:	move.l d0,-(sp)
    d8b2:	jsr 4d4a <drawLine>
    d8b8:	lea 16(sp),sp
}
    d8bc:	nop
    d8be:	rts

0000d8c0 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d8c0:	pea 19c9a <PutChar+0x18be>
    d8c6:	jsr 1793a <KPrintF>
    d8cc:	addq.l #4,sp
}
    d8ce:	nop
    d8d0:	rts

0000d8d2 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d8d2:	jsr 1c02 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d8d8:	pea 1d228 <backdropTextureName>
    d8de:	pea 1 <_start+0x1>
    d8e2:	jsr 4ecc <deleteTextures>
    d8e8:	addq.l #8,sp
	backdropTextureName = 0;
    d8ea:	clr.l 1d228 <backdropTextureName>
	backdropExists = FALSE;
    d8f0:	clr.w 1d22c <backdropExists>
}
    d8f6:	nop
    d8f8:	rts

0000d8fa <killParallax>:

void killParallax () {
    d8fa:	          lea -12(sp),sp
    d8fe:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d900:	   ,----- bra.s d96c <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d902:	,--|----> move.l 1d22e <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d90a:	|  |      movea.l 12(sp),a0
    d90e:	|  |      move.l 42(a0),d0
    d912:	|  |      move.l d0,1d22e <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d918:	|  |      move.l 12(sp),d0
    d91c:	|  |      addq.l #4,d0
    d91e:	|  |      move.l d0,-(sp)
    d920:	|  |      pea 1 <_start+0x1>
    d924:	|  |      jsr 4ecc <deleteTextures>
    d92a:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d92c:	|  |      movea.l 12(sp),a0
    d930:	|  |      move.l (a0),d0
    d932:	|  |  ,-- beq.s d94c <killParallax+0x52>
    d934:	|  |  |   movea.l 12(sp),a0
    d938:	|  |  |   move.l (a0),8(sp)
    d93c:	|  |  |   move.l 1d188 <SysBase>,d0
    d942:	|  |  |   movea.l d0,a6
    d944:	|  |  |   movea.l 8(sp),a1
    d948:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d94c:	|  |  '-> tst.l 12(sp)
    d950:	|  |  ,-- beq.s d968 <killParallax+0x6e>
    d952:	|  |  |   move.l 12(sp),4(sp)
    d958:	|  |  |   move.l 1d188 <SysBase>,d0
    d95e:	|  |  |   movea.l d0,a6
    d960:	|  |  |   movea.l 4(sp),a1
    d964:	|  |  |   jsr -690(a6)
		k = NULL;
    d968:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d96c:	|  '----> move.l 1d22e <parallaxStuff>,d0
    d972:	'-------- bne.s d902 <killParallax+0x8>
	}
}
    d974:	          nop
    d976:	          nop
    d978:	          movea.l (sp)+,a6
    d97a:	          lea 12(sp),sp
    d97e:	          rts

0000d980 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d980:	       move.l 4(sp),-(sp)
    d984:	       jsr 7d6e <openFileFromNum>
    d98a:	       addq.l #4,sp
    d98c:	       tst.l d0
    d98e:	   ,-- bne.s d9a0 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d990:	   |   pea 19cbb <PutChar+0x18df>
    d996:	   |   jsr 1793a <KPrintF>
    d99c:	   |   addq.l #4,sp
		return;
    d99e:	,--|-- bra.s d9c0 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d9a0:	|  '-> move.l 1d170 <bigDataFile>,d0
    d9a6:	|      move.l 12(sp),-(sp)
    d9aa:	|      move.l 12(sp),-(sp)
    d9ae:	|      move.l d0,-(sp)
    d9b0:	|      jsr 1f68 <CstLoadBackdrop>
    d9b6:	|      lea 12(sp),sp
	finishAccess ();
    d9ba:	|      jsr 7c66 <finishAccess>
	
}
    d9c0:	'----> rts

0000d9c2 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d9c2:	subq.l #8,sp
    d9c4:	movea.l 12(sp),a0
    d9c8:	move.l 16(sp),d1
    d9cc:	move.l 20(sp),d0
    d9d0:	movea.w a0,a0
    d9d2:	move.w a0,6(sp)
    d9d6:	move.w d1,d1
    d9d8:	move.w d1,4(sp)
    d9dc:	move.w d0,d0
    d9de:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d9e2:	pea 19d0a <PutChar+0x192e>
    d9e8:	jsr 1793a <KPrintF>
    d9ee:	addq.l #4,sp

}
    d9f0:	nop
    d9f2:	addq.l #8,sp
    d9f4:	rts

0000d9f6 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d9f6:	pea 19d2d <PutChar+0x1951>
    d9fc:	jsr 1793a <KPrintF>
    da02:	addq.l #4,sp
}
    da04:	nop
    da06:	rts

0000da08 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    da08:	pea 1d232 <snapshotTextureName>
    da0e:	pea 1 <_start+0x1>
    da12:	jsr 4ecc <deleteTextures>
    da18:	addq.l #8,sp
	snapshotTextureName = 0;
    da1a:	clr.l 1d232 <snapshotTextureName>
}
    da20:	nop
    da22:	rts

0000da24 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    da24:	clr.l 1d23e <cameraX>
	cameraY = 0;
    da2a:	clr.l 1d242 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    da30:	move.l 1d224 <sceneHeight>,d0
    da36:	move.l d0,d1
    da38:	move.l 1d220 <sceneWidth>,d0
    da3e:	move.l d1,-(sp)
    da40:	move.l d0,-(sp)
    da42:	jsr 3c98 <CstReserveBackdrop>
    da48:	addq.l #8,sp
}
    da4a:	rts

0000da4c <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    da4c:	jsr d8d2 <killBackDrop>
	killParallax ();
    da52:	jsr d8fa <killParallax>
	killZBuffer ();
    da58:	jsr 8c84 <killZBuffer>
	sceneWidth = x;
    da5e:	move.l 4(sp),d0
    da62:	move.l d0,1d220 <sceneWidth>
	sceneHeight = y;
    da68:	move.l 8(sp),d0
    da6c:	move.l d0,1d224 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    da72:	pea 19d66 <PutChar+0x198a>
    da78:	jsr 1793a <KPrintF>
    da7e:	addq.l #4,sp
	return reserveBackdrop();
    da80:	jsr da24 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    da86:	rts

0000da88 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    da88:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    da8a:	move.l 12(sp),-(sp)
    da8e:	jsr 6bc <get2bytes>
    da94:	addq.l #4,sp
    da96:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    da9a:	move.l 12(sp),-(sp)
    da9e:	jsr 6bc <get2bytes>
    daa4:	addq.l #4,sp
    daa6:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    daa8:	moveq #1,d0
}
    daaa:	addq.l #8,sp
    daac:	rts

0000daae <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    daae:	   ,-> lea -12(sp),sp
    dab2:	   |   move.l a6,-(sp)
    dab4:	   |   move.l d2,-(sp)
	if (me) {
    dab6:	   |   tst.l 24(sp)
    daba:	,--|-- beq.w db50 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    dabe:	|  |   movea.l 24(sp),a0
    dac2:	|  |   move.l 42(a0),d0
    dac6:	|  |   move.l 28(sp),-(sp)
    daca:	|  |   move.l d0,-(sp)
    dacc:	|  '-- jsr daae <saveParallaxRecursive>(pc)
    dad0:	|      addq.l #8,sp
		FPutC (fp, 1);
    dad2:	|      move.l 28(sp),16(sp)
    dad8:	|      moveq #1,d0
    dada:	|      move.l d0,12(sp)
    dade:	|      move.l 1d190 <DOSBase>,d0
    dae4:	|      movea.l d0,a6
    dae6:	|      move.l 16(sp),d1
    daea:	|      move.l 12(sp),d2
    daee:	|      jsr -312(a6)
    daf2:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    daf6:	|      movea.l 24(sp),a0
    dafa:	|      move.w 28(a0),d0
    dafe:	|      move.w d0,d0
    db00:	|      andi.l #65535,d0
    db06:	|      move.l 28(sp),-(sp)
    db0a:	|      move.l d0,-(sp)
    db0c:	|      jsr 8d0 <put2bytes>
    db12:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    db14:	|      movea.l 24(sp),a0
    db18:	|      move.w 30(a0),d0
    db1c:	|      move.w d0,d0
    db1e:	|      andi.l #65535,d0
    db24:	|      move.l 28(sp),-(sp)
    db28:	|      move.l d0,-(sp)
    db2a:	|      jsr 8d0 <put2bytes>
    db30:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    db32:	|      movea.l 24(sp),a0
    db36:	|      move.w 32(a0),d0
    db3a:	|      move.w d0,d0
    db3c:	|      andi.l #65535,d0
    db42:	|      move.l 28(sp),-(sp)
    db46:	|      move.l d0,-(sp)
    db48:	|      jsr 8d0 <put2bytes>
    db4e:	|      addq.l #8,sp
	}
}
    db50:	'----> nop
    db52:	       move.l (sp)+,d2
    db54:	       movea.l (sp)+,a6
    db56:	       lea 12(sp),sp
    db5a:	       rts

0000db5c <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    db5c:	pea 19d8d <PutChar+0x19b1>
    db62:	jsr 1793a <KPrintF>
    db68:	addq.l #4,sp
	return TRUE;
    db6a:	moveq #1,d0
    db6c:	rts

0000db6e <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    db6e:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    db70:	             move.l 1d236 <allObjectTypes>,(sp)

	while (huntType) {
    db76:	      ,----- bra.s db8e <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    db78:	   ,--|----> movea.l (sp),a0
    db7a:	   |  |      move.l 4(a0),d0
    db7e:	   |  |      cmp.l 8(sp),d0
    db82:	   |  |  ,-- bne.s db88 <findObjectType+0x1a>
    db84:	   |  |  |   move.l (sp),d0
    db86:	,--|--|--|-- bra.s db9e <findObjectType+0x30>
		huntType = huntType -> next;
    db88:	|  |  |  '-> movea.l (sp),a0
    db8a:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    db8e:	|  |  '----> tst.l (sp)
    db90:	|  '-------- bne.s db78 <findObjectType+0xa>
	}

	return loadObjectType (i);
    db92:	|            move.l 8(sp),-(sp)
    db96:	|            jsr dc5e <loadObjectType>
    db9c:	|            addq.l #4,sp
}
    db9e:	'----------> addq.l #4,sp
    dba0:	             rts

0000dba2 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    dba2:	             lea -12(sp),sp
	int i, num = 0;
    dba6:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    dbaa:	             move.l 20(sp),-(sp)
    dbae:	             jsr db6e <findObjectType>
    dbb4:	             addq.l #4,sp
    dbb6:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    dbb8:	             clr.l 8(sp)
    dbbc:	   ,-------- bra.s dbf2 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    dbbe:	,--|-------> movea.l (sp),a0
    dbc0:	|  |         move.l 38(a0),d1
    dbc4:	|  |         move.l 8(sp),d0
    dbc8:	|  |         lsl.l #3,d0
    dbca:	|  |         movea.l d1,a0
    dbcc:	|  |         adda.l d0,a0
    dbce:	|  |         move.l (a0),d0
    dbd0:	|  |         cmp.l 16(sp),d0
    dbd4:	|  |  ,----- bne.s dbee <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    dbd6:	|  |  |      movea.l (sp),a0
    dbd8:	|  |  |      move.l 38(a0),d1
    dbdc:	|  |  |      move.l 8(sp),d0
    dbe0:	|  |  |      lsl.l #3,d0
    dbe2:	|  |  |      movea.l d1,a0
    dbe4:	|  |  |      adda.l d0,a0
    dbe6:	|  |  |      move.l 4(a0),4(sp)
			break;
    dbec:	|  |  |  ,-- bra.s dbfe <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    dbee:	|  |  '--|-> addq.l #1,8(sp)
    dbf2:	|  '-----|-> movea.l (sp),a0
    dbf4:	|        |   move.l 16(a0),d0
    dbf8:	|        |   cmp.l 8(sp),d0
    dbfc:	'--------|-- bgt.s dbbe <getCombinationFunction+0x1c>
		}
	}

	return num;
    dbfe:	         '-> move.l 4(sp),d0
}
    dc02:	             lea 12(sp),sp
    dc06:	             rts

0000dc08 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    dc08:	moveq #1,d0
}
    dc0a:	rts

0000dc0c <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    dc0c:	subq.l #8,sp
    dc0e:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    dc10:	move.l 16(sp),-(sp)
    dc14:	jsr 6bc <get2bytes>
    dc1a:	addq.l #4,sp
    dc1c:	move.l d0,-(sp)
    dc1e:	jsr dc5e <loadObjectType>
    dc24:	addq.l #4,sp
    dc26:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    dc2a:	movea.l 8(sp),a0
    dc2e:	move.l (a0),4(sp)
    dc32:	move.l 1d188 <SysBase>,d0
    dc38:	movea.l d0,a6
    dc3a:	movea.l 4(sp),a1
    dc3e:	jsr -690(a6)
	r -> screenName = readString (fp);
    dc42:	move.l 16(sp),-(sp)
    dc46:	jsr b02 <readString>
    dc4c:	addq.l #4,sp
    dc4e:	movea.l 8(sp),a0
    dc52:	move.l d0,(a0)
	return r;
    dc54:	move.l 8(sp),d0
}
    dc58:	movea.l (sp)+,a6
    dc5a:	addq.l #8,sp
    dc5c:	rts

0000dc5e <loadObjectType>:

struct objectType * loadObjectType (int i) {
    dc5e:	          lea -84(sp),sp
    dc62:	          move.l a6,-(sp)
    dc64:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    dc66:	          moveq #42,d0
    dc68:	          move.l d0,84(sp)
    dc6c:	          clr.l 80(sp)
    dc70:	          move.l 1d188 <SysBase>,d0
    dc76:	          movea.l d0,a6
    dc78:	          move.l 84(sp),d0
    dc7c:	          move.l 80(sp),d1
    dc80:	          jsr -684(a6)
    dc84:	          move.l d0,76(sp)
    dc88:	          move.l 76(sp),d0
    dc8c:	          move.l d0,72(sp)

    if (newType) {
    dc90:	,-------- beq.w df0a <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    dc94:	|         move.l 96(sp),-(sp)
    dc98:	|         jsr 7e36 <openObjectSlice>
    dc9e:	|         addq.l #4,sp
    dca0:	|         tst.w d0
    dca2:	+-------- beq.w df0a <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    dca6:	|         move.l 1d170 <bigDataFile>,d0
    dcac:	|         move.l d0,-(sp)
    dcae:	|         jsr 6bc <get2bytes>
    dcb4:	|         addq.l #4,sp
    dcb6:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    dcba:	|         move.l 1d170 <bigDataFile>,64(sp)
    dcc2:	|         move.l 1d190 <DOSBase>,d0
    dcc8:	|         movea.l d0,a6
    dcca:	|         move.l 64(sp),d1
    dcce:	|         jsr -306(a6)
    dcd2:	|         move.l d0,60(sp)
    dcd6:	|         move.l 60(sp),d0
    dcda:	|         move.l d0,d0
    dcdc:	|         movea.l 72(sp),a0
    dce0:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    dce4:	|         move.l 1d170 <bigDataFile>,56(sp)
    dcec:	|         move.l 1d190 <DOSBase>,d0
    dcf2:	|         movea.l d0,a6
    dcf4:	|         move.l 56(sp),d1
    dcf8:	|         jsr -306(a6)
    dcfc:	|         move.l d0,52(sp)
    dd00:	|         move.l 52(sp),d0
    dd04:	|         move.l d0,d0
    dd06:	|         movea.l 72(sp),a0
    dd0a:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    dd0e:	|         move.l 1d170 <bigDataFile>,48(sp)
    dd16:	|         move.l 1d190 <DOSBase>,d0
    dd1c:	|         movea.l d0,a6
    dd1e:	|         move.l 48(sp),d1
    dd22:	|         jsr -306(a6)
    dd26:	|         move.l d0,44(sp)
    dd2a:	|         move.l 44(sp),d0
    dd2e:	|         move.l d0,d0
    dd30:	|         movea.l 72(sp),a0
    dd34:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    dd38:	|         move.l 1d170 <bigDataFile>,40(sp)
    dd40:	|         move.l 1d190 <DOSBase>,d0
    dd46:	|         movea.l d0,a6
    dd48:	|         move.l 40(sp),d1
    dd4c:	|         jsr -306(a6)
    dd50:	|         move.l d0,36(sp)
    dd54:	|         move.l 36(sp),d0
    dd58:	|         movea.l 72(sp),a0
    dd5c:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    dd60:	|         move.l 1d170 <bigDataFile>,32(sp)
    dd68:	|         move.l 1d190 <DOSBase>,d0
    dd6e:	|         movea.l d0,a6
    dd70:	|         move.l 32(sp),d1
    dd74:	|         jsr -306(a6)
    dd78:	|         move.l d0,28(sp)
    dd7c:	|         move.l 28(sp),d0
    dd80:	|         movea.l 72(sp),a0
    dd84:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    dd88:	|         move.l 1d170 <bigDataFile>,d0
    dd8e:	|         move.l d0,-(sp)
    dd90:	|         jsr 718 <get4bytes>
    dd96:	|         addq.l #4,sp
    dd98:	|         movea.l 72(sp),a0
    dd9c:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    dda0:	|         move.l 1d170 <bigDataFile>,d0
    dda6:	|         move.l d0,-(sp)
    dda8:	|         jsr 6bc <get2bytes>
    ddae:	|         addq.l #4,sp
    ddb0:	|         movea.l 72(sp),a0
    ddb4:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    ddb8:	|         move.l 1d170 <bigDataFile>,24(sp)
    ddc0:	|         move.l 1d190 <DOSBase>,d0
    ddc6:	|         movea.l d0,a6
    ddc8:	|         move.l 24(sp),d1
    ddcc:	|         jsr -306(a6)
    ddd0:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    ddd4:	|         move.l 1d170 <bigDataFile>,d0
    ddda:	|         move.l d0,-(sp)
    dddc:	|         jsr 7d8 <getFloat>
    dde2:	|         addq.l #4,sp
            getFloat(bigDataFile);
    dde4:	|         move.l 1d170 <bigDataFile>,d0
    ddea:	|         move.l d0,-(sp)
    ddec:	|         jsr 7d8 <getFloat>
    ddf2:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    ddf4:	|         move.l 1d170 <bigDataFile>,d0
    ddfa:	|         move.l d0,-(sp)
    ddfc:	|         jsr 6bc <get2bytes>
    de02:	|         addq.l #4,sp
    de04:	|         move.l d0,d0
    de06:	|         movea.l 72(sp),a0
    de0a:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    de0e:	|         move.l 1d170 <bigDataFile>,d0
    de14:	|         move.l d0,-(sp)
    de16:	|         jsr 6bc <get2bytes>
    de1c:	|         addq.l #4,sp
    de1e:	|         movea.l 72(sp),a0
    de22:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    de26:	|         movea.l 72(sp),a0
    de2a:	|         move.l 16(a0),d0
    de2e:	|  ,----- beq.s de60 <loadObjectType+0x202>
    de30:	|  |      movea.l 72(sp),a0
    de34:	|  |      move.l 16(a0),d0
    de38:	|  |      lsl.l #3,d0
    de3a:	|  |      move.l d0,16(sp)
    de3e:	|  |      clr.l 12(sp)
    de42:	|  |      move.l 1d188 <SysBase>,d0
    de48:	|  |      movea.l d0,a6
    de4a:	|  |      move.l 16(sp),d0
    de4e:	|  |      move.l 12(sp),d1
    de52:	|  |      jsr -684(a6)
    de56:	|  |      move.l d0,8(sp)
    de5a:	|  |      move.l 8(sp),d0
    de5e:	|  |  ,-- bra.s de62 <loadObjectType+0x204>
    de60:	|  '--|-> moveq #0,d0
    de62:	|     '-> movea.l 72(sp),a0
    de66:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    de6a:	|         clr.l 88(sp)
    de6e:	|     ,-- bra.s debe <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    de70:	|  ,--|-> move.l 1d170 <bigDataFile>,d1
    de76:	|  |  |   movea.l 72(sp),a0
    de7a:	|  |  |   movea.l 38(a0),a0
    de7e:	|  |  |   move.l 88(sp),d0
    de82:	|  |  |   lsl.l #3,d0
    de84:	|  |  |   lea (0,a0,d0.l),a2
    de88:	|  |  |   move.l d1,-(sp)
    de8a:	|  |  |   jsr 6bc <get2bytes>
    de90:	|  |  |   addq.l #4,sp
    de92:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    de94:	|  |  |   move.l 1d170 <bigDataFile>,d1
    de9a:	|  |  |   movea.l 72(sp),a0
    de9e:	|  |  |   movea.l 38(a0),a0
    dea2:	|  |  |   move.l 88(sp),d0
    dea6:	|  |  |   lsl.l #3,d0
    dea8:	|  |  |   lea (0,a0,d0.l),a2
    deac:	|  |  |   move.l d1,-(sp)
    deae:	|  |  |   jsr 6bc <get2bytes>
    deb4:	|  |  |   addq.l #4,sp
    deb6:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    deba:	|  |  |   addq.l #1,88(sp)
    debe:	|  |  '-> movea.l 72(sp),a0
    dec2:	|  |      move.l 16(a0),d0
    dec6:	|  |      cmp.l 88(sp),d0
    deca:	|  '----- bgt.s de70 <loadObjectType+0x212>
            }
            finishAccess();
    decc:	|         jsr 7c66 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    ded2:	|         move.l 68(sp),-(sp)
    ded6:	|         jsr 7c70 <getNumberedString>
    dedc:	|         addq.l #4,sp
    dede:	|         movea.l 72(sp),a0
    dee2:	|         move.l d0,(a0)
            newType->objectNum = i;
    dee4:	|         movea.l 72(sp),a0
    dee8:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    deee:	|         move.l 1d236 <allObjectTypes>,d0
    def4:	|         movea.l 72(sp),a0
    def8:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    defc:	|         move.l 72(sp),1d236 <allObjectTypes>
            return newType;
    df04:	|         move.l 72(sp),d0
    df08:	|     ,-- bra.s df0c <loadObjectType+0x2ae>
        }
    }
    return NULL;
    df0a:	'-----|-> moveq #0,d0
}
    df0c:	      '-> movea.l (sp)+,a2
    df0e:	          movea.l (sp)+,a6
    df10:	          lea 84(sp),sp
    df14:	          rts

0000df16 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    df16:	             lea -16(sp),sp
    df1a:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    df1c:	             move.l #119350,16(sp)

	while (* huntRegion) {
    df24:	   ,-------- bra.s df98 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    df26:	,--|-------> movea.l 16(sp),a0
    df2a:	|  |         move.l (a0),d0
    df2c:	|  |         cmp.l 24(sp),d0
    df30:	|  |  ,----- bne.s df8a <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    df32:	|  |  |      movea.l 24(sp),a0
    df36:	|  |  |      move.l 8(a0),d0
    df3a:	|  |  |      movea.l 16(sp),a0
    df3e:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    df40:	|  |  |      movea.l 24(sp),a0
    df44:	|  |  |      move.l 38(a0),12(sp)
    df4a:	|  |  |      move.l 1d188 <SysBase>,d0
    df50:	|  |  |      movea.l d0,a6
    df52:	|  |  |      movea.l 12(sp),a1
    df56:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    df5a:	|  |  |      movea.l 24(sp),a0
    df5e:	|  |  |      move.l (a0),8(sp)
    df62:	|  |  |      move.l 1d188 <SysBase>,d0
    df68:	|  |  |      movea.l d0,a6
    df6a:	|  |  |      movea.l 8(sp),a1
    df6e:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    df72:	|  |  |      move.l 24(sp),4(sp)
    df78:	|  |  |      move.l 1d188 <SysBase>,d0
    df7e:	|  |  |      movea.l d0,a6
    df80:	|  |  |      movea.l 4(sp),a1
    df84:	|  |  |      jsr -690(a6)
			return;
    df88:	|  |  |  ,-- bra.s dfae <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    df8a:	|  |  '--|-> movea.l 16(sp),a0
    df8e:	|  |     |   move.l (a0),d0
    df90:	|  |     |   move.l d0,d1
    df92:	|  |     |   addq.l #8,d1
    df94:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    df98:	|  '-----|-> movea.l 16(sp),a0
    df9c:	|        |   move.l (a0),d0
    df9e:	'--------|-- bne.s df26 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    dfa0:	         |   pea 19db4 <PutChar+0x19d8>
    dfa6:	         |   jsr 1793a <KPrintF>
    dfac:	         |   addq.l #4,sp
}
    dfae:	         '-> movea.l (sp)+,a6
    dfb0:	             lea 16(sp),sp
    dfb4:	             rts

0000dfb6 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    dfb6:	movea.l 4(sp),a0
    dfba:	move.l 4(a0),d0
    dfbe:	move.l 8(sp),-(sp)
    dfc2:	move.l d0,-(sp)
    dfc4:	jsr 8d0 <put2bytes>
    dfca:	addq.l #8,sp
	writeString (r -> screenName, fp);
    dfcc:	movea.l 4(sp),a0
    dfd0:	move.l (a0),d0
    dfd2:	move.l 8(sp),-(sp)
    dfd6:	move.l d0,-(sp)
    dfd8:	jsr bd8 <writeString>
    dfde:	addq.l #8,sp
    dfe0:	nop
    dfe2:	rts

0000dfe4 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    dfe4:	                         lea -112(sp),sp
    dfe8:	                         move.l a6,-(sp)
    dfea:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    dfec:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    dff0:	                         move.w 1d23c <saveEncoding>,d0
    dff6:	                  ,----- beq.s e000 <fileToStack+0x1c>
    dff8:	                  |      move.l #105946,d0
    dffe:	                  |  ,-- bra.s e006 <fileToStack+0x22>
    e000:	                  '--|-> move.l #105972,d0
    e006:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    e00a:	                         move.l 124(sp),112(sp)
    e010:	                         move.l #1005,108(sp)
    e018:	                         move.l 1d190 <DOSBase>,d0
    e01e:	                         movea.l d0,a6
    e020:	                         move.l 112(sp),d1
    e024:	                         move.l 108(sp),d2
    e028:	                         jsr -30(a6)
    e02c:	                         move.l d0,104(sp)
    e030:	                         move.l 104(sp),d0
    e034:	                         move.l d0,100(sp)
    if (!fp) {
    e038:	                     ,-- bne.s e052 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    e03a:	                     |   move.l 124(sp),-(sp)
    e03e:	                     |   pea 19e0b <PutChar+0x1a2f>
    e044:	                     |   jsr 1793a <KPrintF>
    e04a:	                     |   addq.l #8,sp
        return FALSE;
    e04c:	                     |   clr.w d0
    e04e:	,--------------------|-- bra.w e348 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    e052:	|                    '-> move.w 1d23c <saveEncoding>,d0
    e058:	|                        move.l d0,d0
    e05a:	|                        move.b d0,1d23a <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    e060:	|                        move.w 1d23c <saveEncoding>,d0
    e066:	|                        lsr.w #8,d0
    e068:	|                        move.l d0,d0
    e06a:	|                        move.b d0,1d23b <encode2>

    while (*checker) {
    e070:	|                 ,----- bra.s e0d4 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    e072:	|              ,--|----> move.l 100(sp),30(sp)
    e078:	|              |  |      move.l 1d190 <DOSBase>,d0
    e07e:	|              |  |      movea.l d0,a6
    e080:	|              |  |      move.l 30(sp),d1
    e084:	|              |  |      jsr -306(a6)
    e088:	|              |  |      move.l d0,26(sp)
    e08c:	|              |  |      move.l 26(sp),d1
    e090:	|              |  |      movea.l 116(sp),a0
    e094:	|              |  |      move.b (a0),d0
    e096:	|              |  |      ext.w d0
    e098:	|              |  |      movea.w d0,a0
    e09a:	|              |  |      cmpa.l d1,a0
    e09c:	|              |  |  ,-- beq.s e0d0 <fileToStack+0xec>
            Close(fp);
    e09e:	|              |  |  |   move.l 100(sp),22(sp)
    e0a4:	|              |  |  |   move.l 1d190 <DOSBase>,d0
    e0aa:	|              |  |  |   movea.l d0,a6
    e0ac:	|              |  |  |   move.l 22(sp),d1
    e0b0:	|              |  |  |   jsr -36(a6)
    e0b4:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    e0b8:	|              |  |  |   move.l 124(sp),-(sp)
    e0bc:	|              |  |  |   pea 19e18 <PutChar+0x1a3c>
    e0c2:	|              |  |  |   jsr 1793a <KPrintF>
    e0c8:	|              |  |  |   addq.l #8,sp
            return FALSE;
    e0ca:	|              |  |  |   clr.w d0
    e0cc:	+--------------|--|--|-- bra.w e348 <fileToStack+0x364>
        }
        checker++;
    e0d0:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    e0d4:	|              |  '----> movea.l 116(sp),a0
    e0d8:	|              |         move.b (a0),d0
    e0da:	|              '-------- bne.s e072 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    e0dc:	|                        move.w 1d23c <saveEncoding>,d0
    e0e2:	|  ,-------------------- beq.s e156 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    e0e4:	|  |                     move.l 100(sp),-(sp)
    e0e8:	|  |                     jsr e352 <readStringEncoded>
    e0ee:	|  |                     addq.l #4,sp
    e0f0:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    e0f4:	|  |                     pea 19e59 <PutChar+0x1a7d>
    e0fa:	|  |                     move.l 100(sp),-(sp)
    e0fe:	|  |                     jsr 14306 <strcmp>
    e104:	|  |                     addq.l #8,sp
    e106:	|  |                     tst.l d0
    e108:	|  |                 ,-- beq.s e13c <fileToStack+0x158>
            Close(fp);
    e10a:	|  |                 |   move.l 100(sp),88(sp)
    e110:	|  |                 |   move.l 1d190 <DOSBase>,d0
    e116:	|  |                 |   movea.l d0,a6
    e118:	|  |                 |   move.l 88(sp),d1
    e11c:	|  |                 |   jsr -36(a6)
    e120:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    e124:	|  |                 |   move.l 124(sp),-(sp)
    e128:	|  |                 |   pea 19e68 <PutChar+0x1a8c>
    e12e:	|  |                 |   jsr 1793a <KPrintF>
    e134:	|  |                 |   addq.l #8,sp
            return FALSE;
    e136:	|  |                 |   clr.w d0
    e138:	+--|-----------------|-- bra.w e348 <fileToStack+0x364>
        }
        FreeVec(checker);
    e13c:	|  |                 '-> move.l 96(sp),92(sp)
    e142:	|  |                     move.l 1d188 <SysBase>,d0
    e148:	|  |                     movea.l d0,a6
    e14a:	|  |                     movea.l 92(sp),a1
    e14e:	|  |                     jsr -690(a6)
        checker = NULL;
    e152:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    e156:	|  >-------------------> move.w 1d23c <saveEncoding>,d0
    e15c:	|  |     ,-------------- beq.w e290 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    e160:	|  |     |               move.l 100(sp),76(sp)
    e166:	|  |     |               move.l 1d190 <DOSBase>,d0
    e16c:	|  |     |               movea.l d0,a6
    e16e:	|  |     |               move.l 76(sp),d1
    e172:	|  |     |               jsr -306(a6)
    e176:	|  |     |               move.l d0,72(sp)
    e17a:	|  |     |               move.l 72(sp),d0
    e17e:	|  |     |               move.b 1d23a <encode1>,d1
    e184:	|  |     |               ext.w d1
    e186:	|  |     |               ext.l d1
    e188:	|  |     |               move.l d0,d2
    e18a:	|  |     |               eor.l d1,d2
    e18c:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    e190:	|  |     |               moveq #-1,d0
    e192:	|  |     |               cmp.l 68(sp),d0
    e196:	|  |  ,--|-------------- beq.w e326 <fileToStack+0x342>

            char i = (char) tmp;
    e19a:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    e1a0:	|  |  |  |               move.b 67(sp),d0
    e1a4:	|  |  |  |               ext.w d0
    e1a6:	|  |  |  |               movea.w d0,a0
    e1a8:	|  |  |  |               moveq #2,d2
    e1aa:	|  |  |  |               cmp.l a0,d2
    e1ac:	|  |  |  |     ,-------- beq.s e228 <fileToStack+0x244>
    e1ae:	|  |  |  |     |         moveq #2,d0
    e1b0:	|  |  |  |     |         cmp.l a0,d0
    e1b2:	|  |  |  |  ,--|-------- blt.w e25e <fileToStack+0x27a>
    e1b6:	|  |  |  |  |  |         cmpa.w #0,a0
    e1ba:	|  |  |  |  |  |     ,-- beq.s e1c6 <fileToStack+0x1e2>
    e1bc:	|  |  |  |  |  |     |   moveq #1,d2
    e1be:	|  |  |  |  |  |     |   cmp.l a0,d2
    e1c0:	|  |  |  |  |  |  ,--|-- beq.s e202 <fileToStack+0x21e>
    e1c2:	|  |  |  |  +--|--|--|-- bra.w e25e <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    e1c6:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    e1ca:	|  |  |  |  |  |  |      jsr e352 <readStringEncoded>
    e1d0:	|  |  |  |  |  |  |      addq.l #4,sp
    e1d2:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    e1d6:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    e1da:	|  |  |  |  |  |  |      lea 14(sp),a0
    e1de:	|  |  |  |  |  |  |      move.l a0,-(sp)
    e1e0:	|  |  |  |  |  |  |      jsr 1507c <makeTextVar>
    e1e6:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    e1e8:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    e1ee:	|  |  |  |  |  |  |      move.l 1d188 <SysBase>,d0
    e1f4:	|  |  |  |  |  |  |      movea.l d0,a6
    e1f6:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    e1fa:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    e1fe:	|  |  |  |  |  |  |  ,-- bra.w e2b6 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    e202:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    e206:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    e20c:	|  |  |  |  |  |     |   addq.l #4,sp
    e20e:	|  |  |  |  |  |     |   move.l d0,-(sp)
    e210:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    e214:	|  |  |  |  |  |     |   lea 18(sp),a0
    e218:	|  |  |  |  |  |     |   move.l a0,-(sp)
    e21a:	|  |  |  |  |  |     |   jsr 1574c <setVariable>
    e220:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    e224:	|  |  |  |  |  |     +-- bra.w e2b6 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    e228:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    e22e:	|  |  |  |  |        |   move.l 1d190 <DOSBase>,d0
    e234:	|  |  |  |  |        |   movea.l d0,a6
    e236:	|  |  |  |  |        |   move.l 62(sp),d1
    e23a:	|  |  |  |  |        |   jsr -306(a6)
    e23e:	|  |  |  |  |        |   move.l d0,58(sp)
    e242:	|  |  |  |  |        |   move.l 58(sp),d0
    e246:	|  |  |  |  |        |   move.l d0,-(sp)
    e248:	|  |  |  |  |        |   pea 1 <_start+0x1>
    e24c:	|  |  |  |  |        |   lea 18(sp),a0
    e250:	|  |  |  |  |        |   move.l a0,-(sp)
    e252:	|  |  |  |  |        |   jsr 1574c <setVariable>
    e258:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    e25c:	|  |  |  |  |        +-- bra.s e2b6 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    e25e:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    e262:	|  |  |  |           |   pea 19eea <PutChar+0x1b0e>
    e268:	|  |  |  |           |   jsr 1793a <KPrintF>
    e26e:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    e270:	|  |  |  |           |   move.l 100(sp),46(sp)
    e276:	|  |  |  |           |   move.l 1d190 <DOSBase>,d0
    e27c:	|  |  |  |           |   movea.l d0,a6
    e27e:	|  |  |  |           |   move.l 46(sp),d1
    e282:	|  |  |  |           |   jsr -36(a6)
    e286:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    e28a:	|  |  |  |           |   clr.w d0
    e28c:	+--|--|--|-----------|-- bra.w e348 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    e290:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    e294:	|  |  |              |   jsr e418 <readTextPlain>
    e29a:	|  |  |              |   addq.l #4,sp
    e29c:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    e2a0:	|  |  |        ,-----|-- beq.w e32a <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    e2a4:	|  |  |        |     |   move.l 80(sp),-(sp)
    e2a8:	|  |  |        |     |   lea 14(sp),a0
    e2ac:	|  |  |        |     |   move.l a0,-(sp)
    e2ae:	|  |  |        |     |   jsr 1507c <makeTextVar>
    e2b4:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    e2b6:	|  |  |        |     '-> movea.l 128(sp),a0
    e2ba:	|  |  |        |         move.l (a0),d0
    e2bc:	|  |  |        |  ,----- bne.s e2ec <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    e2be:	|  |  |        |  |      move.l 128(sp),d0
    e2c2:	|  |  |        |  |      move.l d0,-(sp)
    e2c4:	|  |  |        |  |      lea 14(sp),a0
    e2c8:	|  |  |        |  |      move.l a0,-(sp)
    e2ca:	|  |  |        |  |      jsr 1471c <addVarToStackQuick>
    e2d0:	|  |  |        |  |      addq.l #8,sp
    e2d2:	|  |  |        |  |      tst.w d0
    e2d4:	|  |  |        |  |  ,-- bne.s e2da <fileToStack+0x2f6>
    e2d6:	|  |  |        |  |  |   clr.w d0
    e2d8:	+--|--|--------|--|--|-- bra.s e348 <fileToStack+0x364>
            sH->last = sH->first;
    e2da:	|  |  |        |  |  '-> movea.l 128(sp),a0
    e2de:	|  |  |        |  |      move.l (a0),d0
    e2e0:	|  |  |        |  |      movea.l 128(sp),a0
    e2e4:	|  |  |        |  |      move.l d0,4(a0)
    e2e8:	|  +--|--------|--|----- bra.w e156 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    e2ec:	|  |  |        |  '----> movea.l 128(sp),a0
    e2f0:	|  |  |        |         move.l 4(a0),d0
    e2f4:	|  |  |        |         addq.l #8,d0
    e2f6:	|  |  |        |         move.l d0,-(sp)
    e2f8:	|  |  |        |         lea 14(sp),a0
    e2fc:	|  |  |        |         move.l a0,-(sp)
    e2fe:	|  |  |        |         jsr 1471c <addVarToStackQuick>
    e304:	|  |  |        |         addq.l #8,sp
    e306:	|  |  |        |         tst.w d0
    e308:	|  |  |        |     ,-- bne.s e30e <fileToStack+0x32a>
    e30a:	|  |  |        |     |   clr.w d0
    e30c:	+--|--|--------|-----|-- bra.s e348 <fileToStack+0x364>
            sH->last = sH->last->next;
    e30e:	|  |  |        |     '-> movea.l 128(sp),a0
    e312:	|  |  |        |         movea.l 4(a0),a0
    e316:	|  |  |        |         move.l 8(a0),d0
    e31a:	|  |  |        |         movea.l 128(sp),a0
    e31e:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    e322:	|  '--|--------|-------- bra.w e156 <fileToStack+0x172>
            if (tmp == -1) break;
    e326:	|     '--------|-------> nop
    e328:	|              |     ,-- bra.s e32c <fileToStack+0x348>
            if (!line) break;
    e32a:	|              '-----|-> nop
        }
    }
    Close(fp);
    e32c:	|                    '-> move.l 100(sp),38(sp)
    e332:	|                        move.l 1d190 <DOSBase>,d0
    e338:	|                        movea.l d0,a6
    e33a:	|                        move.l 38(sp),d1
    e33e:	|                        jsr -36(a6)
    e342:	|                        move.l d0,34(sp)
    return TRUE;
    e346:	|                        moveq #1,d0
}
    e348:	'----------------------> move.l (sp)+,d2
    e34a:	                         movea.l (sp)+,a6
    e34c:	                         lea 112(sp),sp
    e350:	                         rts

0000e352 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    e352:	          lea -32(sp),sp
    e356:	          move.l a6,-(sp)
    e358:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    e35a:	          move.l 44(sp),-(sp)
    e35e:	          jsr 6bc <get2bytes>
    e364:	          addq.l #4,sp
    e366:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    e36a:	          move.l 32(sp),d0
    e36e:	          addq.l #1,d0
    e370:	          move.l d0,28(sp)
    e374:	          clr.l 24(sp)
    e378:	          move.l 1d188 <SysBase>,d0
    e37e:	          movea.l d0,a6
    e380:	          move.l 28(sp),d0
    e384:	          move.l 24(sp),d1
    e388:	          jsr -684(a6)
    e38c:	          move.l d0,20(sp)
    e390:	          move.l 20(sp),d0
    e394:	          move.l d0,16(sp)
    if (!s) return NULL;
    e398:	      ,-- bne.s e39e <readStringEncoded+0x4c>
    e39a:	      |   moveq #0,d0
    e39c:	,-----|-- bra.s e40e <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    e39e:	|     '-> clr.l 36(sp)
    e3a2:	|     ,-- bra.s e3f4 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    e3a4:	|  ,--|-> move.l 44(sp),12(sp)
    e3aa:	|  |  |   move.l 1d190 <DOSBase>,d0
    e3b0:	|  |  |   movea.l d0,a6
    e3b2:	|  |  |   move.l 12(sp),d1
    e3b6:	|  |  |   jsr -306(a6)
    e3ba:	|  |  |   move.l d0,8(sp)
    e3be:	|  |  |   move.l 8(sp),d0
    e3c2:	|  |  |   move.l d0,d1
    e3c4:	|  |  |   move.b 1d23a <encode1>,d2
    e3ca:	|  |  |   move.l 36(sp),d0
    e3ce:	|  |  |   movea.l 16(sp),a0
    e3d2:	|  |  |   adda.l d0,a0
    e3d4:	|  |  |   move.b d1,d0
    e3d6:	|  |  |   eor.b d2,d0
    e3d8:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    e3da:	|  |  |   move.b 1d23a <encode1>,d0
    e3e0:	|  |  |   move.b d0,d1
    e3e2:	|  |  |   move.b 1d23b <encode2>,d0
    e3e8:	|  |  |   add.b d1,d0
    e3ea:	|  |  |   move.b d0,1d23a <encode1>
    for (a = 0; a < len; a++) {
    e3f0:	|  |  |   addq.l #1,36(sp)
    e3f4:	|  |  '-> move.l 36(sp),d0
    e3f8:	|  |      cmp.l 32(sp),d0
    e3fc:	|  '----- blt.s e3a4 <readStringEncoded+0x52>
    }
    s[len] = 0;
    e3fe:	|         move.l 32(sp),d0
    e402:	|         movea.l 16(sp),a0
    e406:	|         adda.l d0,a0
    e408:	|         clr.b (a0)
    return s;
    e40a:	|         move.l 16(sp),d0
}
    e40e:	'-------> move.l (sp)+,d2
    e410:	          movea.l (sp)+,a6
    e412:	          lea 32(sp),sp
    e416:	          rts

0000e418 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    e418:	             lea -104(sp),sp
    e41c:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    e420:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    e424:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    e42a:	             move.l 124(sp),106(sp)
    e430:	             clr.l 102(sp)
    e434:	             clr.l 98(sp)
    e438:	             move.l 1d190 <DOSBase>,d0
    e43e:	             movea.l d0,a6
    e440:	             move.l 106(sp),d1
    e444:	             move.l 102(sp),d2
    e448:	             move.l 98(sp),d3
    e44c:	             jsr -66(a6)
    e450:	             move.l d0,94(sp)
    e454:	             move.l 94(sp),d0
    e458:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    e45c:	   ,-------- bra.s e4a0 <readTextPlain+0x88>
        tmp = FGetC(fp);
    e45e:	,--|-------> move.l 124(sp),22(sp)
    e464:	|  |         move.l 1d190 <DOSBase>,d0
    e46a:	|  |         movea.l d0,a6
    e46c:	|  |         move.l 22(sp),d1
    e470:	|  |         jsr -306(a6)
    e474:	|  |         move.l d0,18(sp)
    e478:	|  |         move.l 18(sp),d0
    e47c:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    e480:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    e486:	|  |         cmpi.b #10,17(sp)
    e48c:	|  |  ,----- beq.s e496 <readTextPlain+0x7e>
    e48e:	|  |  |      moveq #-1,d0
    e490:	|  |  |      cmp.l 110(sp),d0
    e494:	|  |  |  ,-- bne.s e49c <readTextPlain+0x84>
            keepGoing = FALSE;
    e496:	|  |  '--|-> clr.w 114(sp)
    e49a:	|  +-----|-- bra.s e4a0 <readTextPlain+0x88>
        } else {
            stringSize++;
    e49c:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    e4a0:	|  '-------> tst.w 114(sp)
    e4a4:	'----------- bne.s e45e <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    e4a6:	             tst.l 116(sp)
    e4aa:	         ,-- bne.s e4ba <readTextPlain+0xa2>
    e4ac:	         |   moveq #-1,d0
    e4ae:	         |   cmp.l 110(sp),d0
    e4b2:	         +-- bne.s e4ba <readTextPlain+0xa2>
        return NULL;
    e4b4:	         |   moveq #0,d0
    e4b6:	      ,--|-- bra.w e5a0 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    e4ba:	      |  '-> move.l 124(sp),86(sp)
    e4c0:	      |      move.l 90(sp),82(sp)
    e4c6:	      |      moveq #-1,d0
    e4c8:	      |      move.l d0,78(sp)
    e4cc:	      |      move.l 1d190 <DOSBase>,d0
    e4d2:	      |      movea.l d0,a6
    e4d4:	      |      move.l 86(sp),d1
    e4d8:	      |      move.l 82(sp),d2
    e4dc:	      |      move.l 78(sp),d3
    e4e0:	      |      jsr -66(a6)
    e4e4:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    e4e8:	      |      move.l 116(sp),d0
    e4ec:	      |      addq.l #1,d0
    e4ee:	      |      move.l d0,70(sp)
    e4f2:	      |      clr.l 66(sp)
    e4f6:	      |      move.l 1d188 <SysBase>,d0
    e4fc:	      |      movea.l d0,a6
    e4fe:	      |      move.l 70(sp),d0
    e502:	      |      move.l 66(sp),d1
    e506:	      |      jsr -684(a6)
    e50a:	      |      move.l d0,62(sp)
    e50e:	      |      move.l 62(sp),d0
    e512:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    e516:	      |  ,-- bne.s e51e <readTextPlain+0x106>
    e518:	      |  |   moveq #0,d0
    e51a:	      +--|-- bra.w e5a0 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    e51e:	      |  '-> move.l 124(sp),54(sp)
    e524:	      |      move.l 58(sp),50(sp)
    e52a:	      |      moveq #1,d0
    e52c:	      |      move.l d0,46(sp)
    e530:	      |      move.l 116(sp),42(sp)
    e536:	      |      move.l 1d190 <DOSBase>,d0
    e53c:	      |      movea.l d0,a6
    e53e:	      |      move.l 54(sp),d1
    e542:	      |      move.l 50(sp),d2
    e546:	      |      move.l 46(sp),d3
    e54a:	      |      move.l 42(sp),d4
    e54e:	      |      jsr -324(a6)
    e552:	      |      move.l d0,38(sp)
    e556:	      |      move.l 38(sp),d0
    e55a:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    e55e:	      |      move.l 34(sp),d0
    e562:	      |      cmp.l 116(sp),d0
    e566:	      |  ,-- beq.s e576 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    e568:	      |  |   pea 19f1f <PutChar+0x1b43>
    e56e:	      |  |   jsr 1793a <KPrintF>
    e574:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    e576:	      |  '-> move.l 124(sp),30(sp)
    e57c:	      |      move.l 1d190 <DOSBase>,d0
    e582:	      |      movea.l d0,a6
    e584:	      |      move.l 30(sp),d1
    e588:	      |      jsr -306(a6)
    e58c:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    e590:	      |      move.l 116(sp),d0
    e594:	      |      movea.l 58(sp),a0
    e598:	      |      adda.l d0,a0
    e59a:	      |      clr.b (a0)
    }

    return reply;
    e59c:	      |      move.l 58(sp),d0
}
    e5a0:	      '----> movem.l (sp)+,d2-d4/a6
    e5a4:	             lea 104(sp),sp
    e5a8:	             rts

0000e5aa <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e5aa:	                      lea -144(sp),sp
    e5ae:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e5b2:	                      move.l 160(sp),148(sp)
    e5b8:	                      move.l #1006,144(sp)
    e5c0:	                      move.l 1d190 <DOSBase>,d0
    e5c6:	                      movea.l d0,a6
    e5c8:	                      move.l 148(sp),d1
    e5cc:	                      move.l 144(sp),d2
    e5d0:	                      jsr -30(a6)
    e5d4:	                      move.l d0,140(sp)
    e5d8:	                      move.l 140(sp),d0
    e5dc:	                      move.l d0,136(sp)

    if (!fp) {
    e5e0:	                  ,-- bne.s e5fa <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e5e2:	                  |   move.l 160(sp),-(sp)
    e5e6:	                  |   pea 19f40 <PutChar+0x1b64>
    e5ec:	                  |   jsr 1793a <KPrintF>
    e5f2:	                  |   addq.l #8,sp
        return FALSE;
    e5f4:	                  |   clr.w d0
    e5f6:	,-----------------|-- bra.w e8b6 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e5fa:	|                 '-> movea.l 164(sp),a0
    e5fe:	|                     movea.l 4(a0),a0
    e602:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e606:	|                     move.w 1d23c <saveEncoding>,d0
    e60c:	|                     move.l d0,d0
    e60e:	|                     move.b d0,1d23a <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e614:	|                     move.w 1d23c <saveEncoding>,d0
    e61a:	|                     lsr.w #8,d0
    e61c:	|                     move.l d0,d0
    e61e:	|                     move.b d0,1d23b <encode2>

    if (saveEncoding) {
    e624:	|                     move.w 1d23c <saveEncoding>,d0
    e62a:	|                 ,-- beq.s e67c <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    e62c:	|                 |   move.l 136(sp),116(sp)
    e632:	|                 |   move.l #105946,112(sp)
    e63a:	|                 |   moveq #99,d0
    e63c:	|                 |   not.b d0
    e63e:	|                 |   add.l sp,d0
    e640:	|                 |   addi.l #-144,d0
    e646:	|                 |   move.l d0,108(sp)
    e64a:	|                 |   move.l 1d190 <DOSBase>,d0
    e650:	|                 |   movea.l d0,a6
    e652:	|                 |   move.l 116(sp),d1
    e656:	|                 |   move.l 112(sp),d2
    e65a:	|                 |   move.l 108(sp),d3
    e65e:	|                 |   jsr -354(a6)
    e662:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e666:	|                 |   move.l 136(sp),-(sp)
    e66a:	|                 |   pea 19e59 <PutChar+0x1a7d>
    e670:	|                 |   jsr e8c0 <writeStringEncoded>
    e676:	|                 |   addq.l #8,sp
    e678:	|  ,--------------|-- bra.w e88e <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e67c:	|  |              '-> move.l 136(sp),132(sp)
    e682:	|  |                  move.l #105972,128(sp)
    e68a:	|  |                  moveq #99,d1
    e68c:	|  |                  not.b d1
    e68e:	|  |                  add.l sp,d1
    e690:	|  |                  addi.l #-144,d1
    e696:	|  |                  move.l d1,124(sp)
    e69a:	|  |                  move.l 1d190 <DOSBase>,d0
    e6a0:	|  |                  movea.l d0,a6
    e6a2:	|  |                  move.l 132(sp),d1
    e6a6:	|  |                  move.l 128(sp),d2
    e6aa:	|  |                  move.l 124(sp),d3
    e6ae:	|  |                  jsr -354(a6)
    e6b2:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e6b6:	|  +----------------- bra.w e88e <stackToFile+0x2e4>
        if (saveEncoding) {
    e6ba:	|  |  ,-------------> move.w 1d23c <saveEncoding>,d0
    e6c0:	|  |  |     ,-------- beq.w e812 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e6c4:	|  |  |     |         movea.l 152(sp),a0
    e6c8:	|  |  |     |         move.l (a0),d0
    e6ca:	|  |  |     |         moveq #1,d1
    e6cc:	|  |  |     |         cmp.l d0,d1
    e6ce:	|  |  |     |     ,-- beq.s e71e <stackToFile+0x174>
    e6d0:	|  |  |     |     |   moveq #3,d1
    e6d2:	|  |  |     |     |   cmp.l d0,d1
    e6d4:	|  |  |     |  ,--|-- bne.w e7e0 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e6d8:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e6de:	|  |  |     |  |  |   move.b 1d23a <encode1>,d0
    e6e4:	|  |  |     |  |  |   ext.w d0
    e6e6:	|  |  |     |  |  |   movea.w d0,a0
    e6e8:	|  |  |     |  |  |   move.l a0,72(sp)
    e6ec:	|  |  |     |  |  |   move.l 1d190 <DOSBase>,d0
    e6f2:	|  |  |     |  |  |   movea.l d0,a6
    e6f4:	|  |  |     |  |  |   move.l 76(sp),d1
    e6f8:	|  |  |     |  |  |   move.l 72(sp),d2
    e6fc:	|  |  |     |  |  |   jsr -312(a6)
    e700:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e704:	|  |  |     |  |  |   movea.l 152(sp),a0
    e708:	|  |  |     |  |  |   move.l 4(a0),d0
    e70c:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e710:	|  |  |     |  |  |   move.l d0,-(sp)
    e712:	|  |  |     |  |  |   jsr e8c0 <writeStringEncoded>
    e718:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e71a:	|  |  |  ,--|--|--|-- bra.w e884 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e71e:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    e722:	|  |  |  |  |  |      move.l 4(a0),d0
    e726:	|  |  |  |  |  |  ,-- bmi.s e796 <stackToFile+0x1ec>
    e728:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e72c:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e730:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e736:	|  |  |  |  |  |  +-- bgt.s e796 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e738:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e73e:	|  |  |  |  |  |  |   move.b 1d23a <encode1>,d0
    e744:	|  |  |  |  |  |  |   eori.b #2,d0
    e748:	|  |  |  |  |  |  |   ext.w d0
    e74a:	|  |  |  |  |  |  |   movea.w d0,a0
    e74c:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e750:	|  |  |  |  |  |  |   move.l 1d190 <DOSBase>,d0
    e756:	|  |  |  |  |  |  |   movea.l d0,a6
    e758:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e75c:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e760:	|  |  |  |  |  |  |   jsr -312(a6)
    e764:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e768:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e76e:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e772:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e778:	|  |  |  |  |  |  |   move.l 1d190 <DOSBase>,d0
    e77e:	|  |  |  |  |  |  |   movea.l d0,a6
    e780:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e784:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e788:	|  |  |  |  |  |  |   jsr -312(a6)
    e78c:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e790:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e792:	|  |  |  +--|--|--|-- bra.w e884 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e796:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    e79c:	|  |  |  |  |  |      move.b 1d23a <encode1>,d0
    e7a2:	|  |  |  |  |  |      eori.b #1,d0
    e7a6:	|  |  |  |  |  |      ext.w d0
    e7a8:	|  |  |  |  |  |      movea.w d0,a0
    e7aa:	|  |  |  |  |  |      move.l a0,36(sp)
    e7ae:	|  |  |  |  |  |      move.l 1d190 <DOSBase>,d0
    e7b4:	|  |  |  |  |  |      movea.l d0,a6
    e7b6:	|  |  |  |  |  |      move.l 40(sp),d1
    e7ba:	|  |  |  |  |  |      move.l 36(sp),d2
    e7be:	|  |  |  |  |  |      jsr -312(a6)
    e7c2:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e7c6:	|  |  |  |  |  |      movea.l 152(sp),a0
    e7ca:	|  |  |  |  |  |      move.l 4(a0),d0
    e7ce:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e7d2:	|  |  |  |  |  |      move.l d0,-(sp)
    e7d4:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e7da:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e7dc:	|  |  |  +--|--|----- bra.w e884 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e7e0:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    e7e4:	|  |  |  |  |         pea 19f52 <PutChar+0x1b76>
    e7ea:	|  |  |  |  |         jsr 1793a <KPrintF>
    e7f0:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e7f2:	|  |  |  |  |         move.l 136(sp),28(sp)
    e7f8:	|  |  |  |  |         move.l 1d190 <DOSBase>,d0
    e7fe:	|  |  |  |  |         movea.l d0,a6
    e800:	|  |  |  |  |         move.l 28(sp),d1
    e804:	|  |  |  |  |         jsr -36(a6)
    e808:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e80c:	|  |  |  |  |         clr.w d0
    e80e:	+--|--|--|--|-------- bra.w e8b6 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e812:	|  |  |  |  '-------> move.l 152(sp),d0
    e816:	|  |  |  |            move.l d0,-(sp)
    e818:	|  |  |  |            jsr 15430 <getTextFromAnyVar>
    e81e:	|  |  |  |            addq.l #4,sp
    e820:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e824:	|  |  |  |     ,----- beq.s e898 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e826:	|  |  |  |     |      movea.l 100(sp),a0
    e82a:	|  |  |  |     |      move.b (a0),d0
    e82c:	|  |  |  |     |      ext.w d0
    e82e:	|  |  |  |     |      movea.w d0,a0
    e830:	|  |  |  |     |      move.l a0,12(sp)
    e834:	|  |  |  |     |      move.l 136(sp),96(sp)
    e83a:	|  |  |  |     |      move.l #106414,92(sp)
    e842:	|  |  |  |     |      moveq #99,d0
    e844:	|  |  |  |     |      not.b d0
    e846:	|  |  |  |     |      add.l sp,d0
    e848:	|  |  |  |     |      addi.l #-144,d0
    e84e:	|  |  |  |     |      move.l d0,88(sp)
    e852:	|  |  |  |     |      move.l 1d190 <DOSBase>,d0
    e858:	|  |  |  |     |      movea.l d0,a6
    e85a:	|  |  |  |     |      move.l 96(sp),d1
    e85e:	|  |  |  |     |      move.l 92(sp),d2
    e862:	|  |  |  |     |      move.l 88(sp),d3
    e866:	|  |  |  |     |      jsr -354(a6)
    e86a:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e86e:	|  |  |  |     |      move.l 100(sp),80(sp)
    e874:	|  |  |  |     |      move.l 1d188 <SysBase>,d0
    e87a:	|  |  |  |     |      movea.l d0,a6
    e87c:	|  |  |  |     |      movea.l 80(sp),a1
    e880:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e884:	|  |  |  '-----|----> movea.l 152(sp),a0
    e888:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e88e:	|  '--|--------|----> tst.l 152(sp)
    e892:	|     '--------|----- bne.w e6ba <stackToFile+0x110>
    e896:	|              |  ,-- bra.s e89a <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e898:	|              '--|-> nop
    }
    Close(fp);
    e89a:	|                 '-> move.l 136(sp),20(sp)
    e8a0:	|                     move.l 1d190 <DOSBase>,d0
    e8a6:	|                     movea.l d0,a6
    e8a8:	|                     move.l 20(sp),d1
    e8ac:	|                     jsr -36(a6)
    e8b0:	|                     move.l d0,16(sp)
    return TRUE;
    e8b4:	|                     moveq #1,d0
}
    e8b6:	'-------------------> movem.l (sp)+,d2-d3/a6
    e8ba:	                      lea 144(sp),sp
    e8be:	                      rts

0000e8c0 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e8c0:	       lea -20(sp),sp
    e8c4:	       move.l a6,-(sp)
    e8c6:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e8c8:	       move.l 32(sp),-(sp)
    e8cc:	       jsr 14346 <strlen>
    e8d2:	       addq.l #4,sp
    e8d4:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e8d8:	       move.l 36(sp),-(sp)
    e8dc:	       move.l 24(sp),-(sp)
    e8e0:	       jsr 8d0 <put2bytes>
    e8e6:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e8e8:	       clr.l 24(sp)
    e8ec:	   ,-- bra.s e942 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e8ee:	,--|-> move.l 36(sp),16(sp)
    e8f4:	|  |   move.l 24(sp),d0
    e8f8:	|  |   movea.l 32(sp),a0
    e8fc:	|  |   adda.l d0,a0
    e8fe:	|  |   move.b (a0),d1
    e900:	|  |   move.b 1d23a <encode1>,d0
    e906:	|  |   eor.b d1,d0
    e908:	|  |   ext.w d0
    e90a:	|  |   movea.w d0,a0
    e90c:	|  |   move.l a0,12(sp)
    e910:	|  |   move.l 1d190 <DOSBase>,d0
    e916:	|  |   movea.l d0,a6
    e918:	|  |   move.l 16(sp),d1
    e91c:	|  |   move.l 12(sp),d2
    e920:	|  |   jsr -312(a6)
    e924:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e928:	|  |   move.b 1d23a <encode1>,d0
    e92e:	|  |   move.b d0,d1
    e930:	|  |   move.b 1d23b <encode2>,d0
    e936:	|  |   add.b d1,d0
    e938:	|  |   move.b d0,1d23a <encode1>
	for (a = 0; a < len; a ++) {
    e93e:	|  |   addq.l #1,24(sp)
    e942:	|  '-> move.l 24(sp),d0
    e946:	|      cmp.l 20(sp),d0
    e94a:	'----- blt.s e8ee <writeStringEncoded+0x2e>
	}
}
    e94c:	       nop
    e94e:	       nop
    e950:	       move.l (sp)+,d2
    e952:	       movea.l (sp)+,a6
    e954:	       lea 20(sp),sp
    e958:	       rts

0000e95a <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e95a:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e95c:	                   tst.l 8(sp)
    e960:	               ,-- bne.s e966 <failSecurityCheck+0xc>
    e962:	               |   moveq #1,d0
    e964:	,--------------|-- bra.s e9e4 <failSecurityCheck+0x8a>

	int a = 0;
    e966:	|              '-> clr.l (sp)

	while (fn[a]) {
    e968:	|     ,----------- bra.s e9d6 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e96a:	|  ,--|----------> move.l (sp),d0
    e96c:	|  |  |            movea.l 8(sp),a0
    e970:	|  |  |            adda.l d0,a0
    e972:	|  |  |            move.b (a0),d0
    e974:	|  |  |            ext.w d0
    e976:	|  |  |            movea.w d0,a0
    e978:	|  |  |            moveq #124,d0
    e97a:	|  |  |            cmp.l a0,d0
    e97c:	|  |  |     ,----- beq.s e9be <failSecurityCheck+0x64>
    e97e:	|  |  |     |      moveq #124,d1
    e980:	|  |  |     |      cmp.l a0,d1
    e982:	|  |  |  ,--|----- blt.s e9d4 <failSecurityCheck+0x7a>
    e984:	|  |  |  |  |      moveq #92,d0
    e986:	|  |  |  |  |      cmp.l a0,d0
    e988:	|  |  |  |  +----- beq.s e9be <failSecurityCheck+0x64>
    e98a:	|  |  |  |  |      moveq #92,d1
    e98c:	|  |  |  |  |      cmp.l a0,d1
    e98e:	|  |  |  +--|----- blt.s e9d4 <failSecurityCheck+0x7a>
    e990:	|  |  |  |  |      moveq #60,d0
    e992:	|  |  |  |  |      cmp.l a0,d0
    e994:	|  |  |  |  |  ,-- blt.s e9b4 <failSecurityCheck+0x5a>
    e996:	|  |  |  |  |  |   moveq #34,d1
    e998:	|  |  |  |  |  |   cmp.l a0,d1
    e99a:	|  |  |  +--|--|-- bgt.s e9d4 <failSecurityCheck+0x7a>
    e99c:	|  |  |  |  |  |   moveq #-34,d1
    e99e:	|  |  |  |  |  |   add.l a0,d1
    e9a0:	|  |  |  |  |  |   move.l #83894529,d0
    e9a6:	|  |  |  |  |  |   lsr.l d1,d0
    e9a8:	|  |  |  |  |  |   moveq #1,d1
    e9aa:	|  |  |  |  |  |   and.l d1,d0
    e9ac:	|  |  |  |  |  |   sne d0
    e9ae:	|  |  |  |  |  |   neg.b d0
    e9b0:	|  |  |  |  +--|-- bne.s e9be <failSecurityCheck+0x64>
    e9b2:	|  |  |  +--|--|-- bra.s e9d4 <failSecurityCheck+0x7a>
    e9b4:	|  |  |  |  |  '-> lea -62(a0),a0
    e9b8:	|  |  |  |  |      moveq #1,d0
    e9ba:	|  |  |  |  |      cmp.l a0,d0
    e9bc:	|  |  |  +--|----- bcs.s e9d4 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e9be:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e9c2:	|  |  |  |         pea 19fb2 <PutChar+0x1bd6>
    e9c8:	|  |  |  |         jsr 1793a <KPrintF>
    e9ce:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e9d0:	|  |  |  |         moveq #1,d0
    e9d2:	+--|--|--|-------- bra.s e9e4 <failSecurityCheck+0x8a>
		}
		a++;
    e9d4:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e9d6:	|  |  '----------> move.l (sp),d0
    e9d8:	|  |               movea.l 8(sp),a0
    e9dc:	|  |               adda.l d0,a0
    e9de:	|  |               move.b (a0),d0
    e9e0:	|  '-------------- bne.s e96a <failSecurityCheck+0x10>
	}
	return FALSE;
    e9e2:	|                  clr.w d0
}
    e9e4:	'----------------> addq.l #4,sp
    e9e6:	                   rts

0000e9e8 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e9e8:	             lea -24(sp),sp
    e9ec:	             move.l a6,-(sp)
    e9ee:	             move.l 40(sp),d0
    e9f2:	             move.w d0,d0
    e9f4:	             move.w d0,6(sp)
	int fileNum = -1;
    e9f8:	             moveq #-1,d0
    e9fa:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e9fe:	             jsr 707e <killSpeechTimers>

	switch (numParams) {
    ea04:	             moveq #2,d0
    ea06:	             cmp.l 32(sp),d0
    ea0a:	      ,----- beq.s ea4e <sayCore+0x66>
    ea0c:	      |      moveq #3,d0
    ea0e:	      |      cmp.l 32(sp),d0
    ea12:	,-----|----- bne.w eb30 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    ea16:	|     |      movea.l 36(sp),a0
    ea1a:	|     |      move.l 24(a0),d0
    ea1e:	|     |      move.l d0,-(sp)
    ea20:	|     |      pea 5 <_start+0x5>
    ea24:	|     |      lea 20(sp),a0
    ea28:	|     |      move.l a0,-(sp)
    ea2a:	|     |      jsr 14e5a <getValueType>
    ea30:	|     |      lea 12(sp),sp
    ea34:	|     |      tst.w d0
    ea36:	|     |  ,-- bne.s ea3e <sayCore+0x56>
    ea38:	|     |  |   moveq #1,d0
    ea3a:	|  ,--|--|-- bra.w eb40 <sayCore+0x158>
			trimStack (&fun -> stack);
    ea3e:	|  |  |  '-> moveq #24,d0
    ea40:	|  |  |      add.l 36(sp),d0
    ea44:	|  |  |      move.l d0,-(sp)
    ea46:	|  |  |      jsr 157de <trimStack>
    ea4c:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    ea4e:	|  |  '----> movea.l 36(sp),a0
    ea52:	|  |         move.l 24(a0),d0
    ea56:	|  |         move.l d0,-(sp)
    ea58:	|  |         jsr 15430 <getTextFromAnyVar>
    ea5e:	|  |         addq.l #4,sp
    ea60:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    ea64:	|  |     ,-- bne.s ea6c <sayCore+0x84>
    ea66:	|  |     |   moveq #1,d0
    ea68:	|  +-----|-- bra.w eb40 <sayCore+0x158>
			trimStack (&fun -> stack);
    ea6c:	|  |     '-> moveq #24,d0
    ea6e:	|  |         add.l 36(sp),d0
    ea72:	|  |         move.l d0,-(sp)
    ea74:	|  |         jsr 157de <trimStack>
    ea7a:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ea7c:	|  |         movea.l 36(sp),a0
    ea80:	|  |         move.l 24(a0),d0
    ea84:	|  |         move.l d0,-(sp)
    ea86:	|  |         pea 7 <_start+0x7>
    ea8a:	|  |         lea 16(sp),a0
    ea8e:	|  |         move.l a0,-(sp)
    ea90:	|  |         jsr 14e5a <getValueType>
    ea96:	|  |         lea 12(sp),sp
    ea9a:	|  |         tst.w d0
    ea9c:	|  |     ,-- bne.s eaa4 <sayCore+0xbc>
    ea9e:	|  |     |   moveq #1,d0
    eaa0:	|  +-----|-- bra.w eb40 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    eaa4:	|  |     '-> movea.l 36(sp),a0
    eaa8:	|  |         move.l 24(a0),d0
    eaac:	|  |         move.l d0,-(sp)
    eaae:	|  |         pea 7 <_start+0x7>
    eab2:	|  |         lea 16(sp),a0
    eab6:	|  |         move.l a0,-(sp)
    eab8:	|  |         jsr 14e5a <getValueType>
    eabe:	|  |         lea 12(sp),sp
    eac2:	|  |         tst.w d0
    eac4:	|  |     ,-- bne.s eaca <sayCore+0xe2>
    eac6:	|  |     |   moveq #1,d0
    eac8:	|  +-----|-- bra.s eb40 <sayCore+0x158>
			trimStack (&fun -> stack);
    eaca:	|  |     '-> moveq #24,d0
    eacc:	|  |         add.l 36(sp),d0
    ead0:	|  |         move.l d0,-(sp)
    ead2:	|  |         jsr 157de <trimStack>
    ead8:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    eada:	|  |         movea.w 6(sp),a0
    eade:	|  |         move.l 12(sp),d1
    eae2:	|  |         move.l 8(sp),d0
    eae6:	|  |         move.l a0,-(sp)
    eae8:	|  |         move.l d1,-(sp)
    eaea:	|  |         move.l d0,-(sp)
    eaec:	|  |         move.l 36(sp),-(sp)
    eaf0:	|  |         jsr 47e6 <wrapSpeech>
    eaf6:	|  |         lea 16(sp),sp
    eafa:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    eafe:	|  |         movea.l 36(sp),a0
    eb02:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    eb08:	|  |         movea.l 36(sp),a0
    eb0c:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    eb12:	|  |         move.l 24(sp),16(sp)
    eb18:	|  |         move.l 1d188 <SysBase>,d0
    eb1e:	|  |         movea.l d0,a6
    eb20:	|  |         movea.l 16(sp),a1
    eb24:	|  |         jsr -690(a6)
			newText = NULL;
    eb28:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    eb2c:	|  |         moveq #0,d0
    eb2e:	|  +-------- bra.s eb40 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    eb30:	'--|-------> pea 1a038 <PutChar+0x1c5c>
    eb36:	   |         jsr 1793a <KPrintF>
    eb3c:	   |         addq.l #4,sp
	return BR_ERROR;
    eb3e:	   |         moveq #1,d0
}
    eb40:	   '-------> movea.l (sp)+,a6
    eb42:	             lea 24(sp),sp
    eb46:	             rts

0000eb48 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    eb48:	pea 1 <_start+0x1>
    eb4c:	move.l 12(sp),-(sp)
    eb50:	move.l 12(sp),-(sp)
    eb54:	jsr e9e8 <sayCore>
    eb5a:	lea 12(sp),sp
}
    eb5e:	rts

0000eb60 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    eb60:	clr.l -(sp)
    eb62:	move.l 12(sp),-(sp)
    eb66:	move.l 12(sp),-(sp)
    eb6a:	jsr e9e8 <sayCore>
    eb70:	lea 12(sp),sp
}
    eb74:	rts

0000eb76 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    eb76:	jsr 15826 <freeze>
	freezeSubs (); 
    eb7c:	jsr 666e <freezeSubs>
	fun -> freezerLevel = 0;
    eb82:	movea.l 8(sp),a0
    eb86:	clr.b 56(a0)
	return BR_CONTINUE;
    eb8a:	moveq #2,d0
}
    eb8c:	rts

0000eb8e <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    eb8e:	jsr 15a2a <unfreeze>
	unfreezeSubs (); 
    eb94:	jsr 7c34 <unfreezeSubs>
	return BR_CONTINUE;
    eb9a:	moveq #2,d0
}
    eb9c:	rts

0000eb9e <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    eb9e:	jsr 15a06 <howFrozen>
    eba4:	move.l d0,d1
    eba6:	moveq #28,d0
    eba8:	add.l 8(sp),d0
    ebac:	move.l d1,-(sp)
    ebae:	pea 1 <_start+0x1>
    ebb2:	move.l d0,-(sp)
    ebb4:	jsr 1574c <setVariable>
    ebba:	lea 12(sp),sp
	return BR_CONTINUE; 
    ebbe:	moveq #2,d0
}
    ebc0:	rts

0000ebc2 <builtIn_setCursor>:

builtIn(setCursor)
{
    ebc2:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    ebc4:	movea.l 12(sp),a0
    ebc8:	move.l 24(a0),d0
    ebcc:	move.l d0,-(sp)
    ebce:	jsr 15332 <getAnimationFromVar>
    ebd4:	addq.l #4,sp
    ebd6:	move.l d0,(sp)
	pickAnimCursor (aa);
    ebd8:	move.l (sp),-(sp)
    ebda:	jsr d6c <pickAnimCursor>
    ebe0:	addq.l #4,sp
	trimStack (&fun -> stack);
    ebe2:	moveq #24,d0
    ebe4:	add.l 12(sp),d0
    ebe8:	move.l d0,-(sp)
    ebea:	jsr 157de <trimStack>
    ebf0:	addq.l #4,sp
	return BR_CONTINUE;
    ebf2:	moveq #2,d0
}
    ebf4:	addq.l #4,sp
    ebf6:	rts

0000ebf8 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    ebf8:	move.l 1d144 <input+0xa>,d1
    ebfe:	move.l 1d23e <cameraX>,d0
    ec04:	add.l d0,d1
    ec06:	moveq #28,d0
    ec08:	add.l 8(sp),d0
    ec0c:	move.l d1,-(sp)
    ec0e:	pea 1 <_start+0x1>
    ec12:	move.l d0,-(sp)
    ec14:	jsr 1574c <setVariable>
    ec1a:	lea 12(sp),sp
	return BR_CONTINUE;
    ec1e:	moveq #2,d0
}
    ec20:	rts

0000ec22 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    ec22:	move.l 1d148 <input+0xe>,d1
    ec28:	move.l 1d242 <cameraY>,d0
    ec2e:	add.l d0,d1
    ec30:	moveq #28,d0
    ec32:	add.l 8(sp),d0
    ec36:	move.l d1,-(sp)
    ec38:	pea 1 <_start+0x1>
    ec3c:	move.l d0,-(sp)
    ec3e:	jsr 1574c <setVariable>
    ec44:	lea 12(sp),sp
	return BR_CONTINUE;
    ec48:	moveq #2,d0
}
    ec4a:	rts

0000ec4c <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    ec4c:	move.l 1d144 <input+0xa>,d0
    ec52:	move.l d0,-(sp)
    ec54:	jsr 17d6c <__floatsisf>
    ec5a:	addq.l #4,sp
    ec5c:	move.l d0,d1
    ec5e:	move.l 1cb1a <cameraZoom>,d0
    ec64:	move.l d0,-(sp)
    ec66:	move.l d1,-(sp)
    ec68:	jsr 17e1e <__mulsf3>
    ec6e:	addq.l #8,sp
    ec70:	move.l d0,-(sp)
    ec72:	jsr 17d04 <__fixsfsi>
    ec78:	addq.l #4,sp
    ec7a:	move.l d0,d1
    ec7c:	moveq #28,d0
    ec7e:	add.l 8(sp),d0
    ec82:	move.l d1,-(sp)
    ec84:	pea 1 <_start+0x1>
    ec88:	move.l d0,-(sp)
    ec8a:	jsr 1574c <setVariable>
    ec90:	lea 12(sp),sp
	return BR_CONTINUE;
    ec94:	moveq #2,d0
}
    ec96:	rts

0000ec98 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    ec98:	move.l 1d148 <input+0xe>,d0
    ec9e:	move.l d0,-(sp)
    eca0:	jsr 17d6c <__floatsisf>
    eca6:	addq.l #4,sp
    eca8:	move.l d0,d1
    ecaa:	move.l 1cb1a <cameraZoom>,d0
    ecb0:	move.l d0,-(sp)
    ecb2:	move.l d1,-(sp)
    ecb4:	jsr 17e1e <__mulsf3>
    ecba:	addq.l #8,sp
    ecbc:	move.l d0,-(sp)
    ecbe:	jsr 17d04 <__fixsfsi>
    ecc4:	addq.l #4,sp
    ecc6:	move.l d0,d1
    ecc8:	moveq #28,d0
    ecca:	add.l 8(sp),d0
    ecce:	move.l d1,-(sp)
    ecd0:	pea 1 <_start+0x1>
    ecd4:	move.l d0,-(sp)
    ecd6:	jsr 1574c <setVariable>
    ecdc:	lea 12(sp),sp
	return BR_CONTINUE;
    ece0:	moveq #2,d0
}
    ece2:	rts

0000ece4 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    ece4:	jsr 8c66 <statusBarText>
    ecea:	move.l d0,d1
    ecec:	moveq #28,d0
    ecee:	add.l 8(sp),d0
    ecf2:	move.l d1,-(sp)
    ecf4:	move.l d0,-(sp)
    ecf6:	jsr 1507c <makeTextVar>
    ecfc:	addq.l #8,sp
	return BR_CONTINUE;
    ecfe:	moveq #2,d0
}
    ed00:	rts

0000ed02 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    ed02:	       lea -20(sp),sp
    ed06:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ed08:	       movea.l 32(sp),a0
    ed0c:	       move.l 24(a0),d0
    ed10:	       move.l d0,-(sp)
    ed12:	       jsr 15430 <getTextFromAnyVar>
    ed18:	       addq.l #4,sp
    ed1a:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    ed1e:	   ,-- bne.s ed26 <builtIn_getMatchingFiles+0x24>
    ed20:	   |   moveq #1,d0
    ed22:	,--|-- bra.w ede8 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    ed26:	|  '-> moveq #24,d0
    ed28:	|      add.l 32(sp),d0
    ed2c:	|      move.l d0,-(sp)
    ed2e:	|      jsr 157de <trimStack>
    ed34:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    ed36:	|      moveq #28,d0
    ed38:	|      add.l 32(sp),d0
    ed3c:	|      move.l d0,-(sp)
    ed3e:	|      jsr 150a8 <unlinkVar>
    ed44:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    ed46:	|      movea.l 32(sp),a0
    ed4a:	|      moveq #6,d0
    ed4c:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    ed50:	|      moveq #12,d0
    ed52:	|      move.l d0,16(sp)
    ed56:	|      clr.l 12(sp)
    ed5a:	|      move.l 1d188 <SysBase>,d0
    ed60:	|      movea.l d0,a6
    ed62:	|      move.l 16(sp),d0
    ed66:	|      move.l 12(sp),d1
    ed6a:	|      jsr -684(a6)
    ed6e:	|      move.l d0,8(sp)
    ed72:	|      move.l 8(sp),d0
    ed76:	|      movea.l 32(sp),a0
    ed7a:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    ed7e:	|      moveq #32,d0
    ed80:	|      add.l 32(sp),d0
    ed84:	|  ,-- bne.s ed8a <builtIn_getMatchingFiles+0x88>
    ed86:	|  |   moveq #1,d0
    ed88:	+--|-- bra.s ede8 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    ed8a:	|  '-> movea.l 32(sp),a0
    ed8e:	|      movea.l 32(a0),a0
    ed92:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    ed94:	|      movea.l 32(sp),a0
    ed98:	|      movea.l 32(a0),a0
    ed9c:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    eda0:	|      movea.l 32(sp),a0
    eda4:	|      movea.l 32(a0),a0
    eda8:	|      moveq #1,d0
    edaa:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    edae:	|      movea.l 32(sp),a0
    edb2:	|      move.l 32(a0),d0
    edb6:	|      move.l 20(sp),-(sp)
    edba:	|      move.l d0,-(sp)
    edbc:	|      jsr 14c16 <getSavedGamesStack>
    edc2:	|      addq.l #8,sp
    edc4:	|      tst.w d0
    edc6:	|  ,-- bne.s edcc <builtIn_getMatchingFiles+0xca>
    edc8:	|  |   moveq #1,d0
    edca:	+--|-- bra.s ede8 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    edcc:	|  '-> move.l 20(sp),4(sp)
    edd2:	|      move.l 1d188 <SysBase>,d0
    edd8:	|      movea.l d0,a6
    edda:	|      movea.l 4(sp),a1
    edde:	|      jsr -690(a6)
	newText = NULL;
    ede2:	|      clr.l 20(sp)
	return BR_CONTINUE;
    ede6:	|      moveq #2,d0
}
    ede8:	'----> movea.l (sp)+,a6
    edea:	       lea 20(sp),sp
    edee:	       rts

0000edf0 <builtIn_saveGame>:

builtIn(saveGame)
{
    edf0:	       lea -12(sp),sp
    edf4:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    edf6:	       movea.l 24(sp),a0
    edfa:	       move.l 24(a0),d0
    edfe:	       move.l d0,-(sp)
    ee00:	       jsr 15430 <getTextFromAnyVar>
    ee06:	       addq.l #4,sp
    ee08:	       move.l d0,1d154 <loadNow>
    trimStack(&fun->stack);
    ee0e:	       moveq #24,d0
    ee10:	       add.l 24(sp),d0
    ee14:	       move.l d0,-(sp)
    ee16:	       jsr 157de <trimStack>
    ee1c:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    ee1e:	       move.l 1d154 <loadNow>,d0
    ee24:	       move.l d0,-(sp)
    ee26:	       jsr 2fe <encodeFilename>
    ee2c:	       addq.l #4,sp
    ee2e:	       move.l d0,12(sp)
    FreeVec(loadNow);
    ee32:	       move.l 1d154 <loadNow>,8(sp)
    ee3a:	       move.l 1d188 <SysBase>,d0
    ee40:	       movea.l d0,a6
    ee42:	       movea.l 8(sp),a1
    ee46:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    ee4a:	       move.l 12(sp),-(sp)
    ee4e:	       jsr e95a <failSecurityCheck>
    ee54:	       addq.l #4,sp
    ee56:	       tst.w d0
    ee58:	   ,-- beq.s ee5e <builtIn_saveGame+0x6e>
    ee5a:	   |   moveq #1,d0
    ee5c:	,--|-- bra.s eeae <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    ee5e:	|  '-> move.l 12(sp),-(sp)
    ee62:	|      pea 1a066 <PutChar+0x1c8a>
    ee68:	|      jsr 14386 <joinStrings>
    ee6e:	|      addq.l #8,sp
    ee70:	|      move.l d0,1d154 <loadNow>
    FreeVec(aaaaa);
    ee76:	|      move.l 12(sp),4(sp)
    ee7c:	|      move.l 1d188 <SysBase>,d0
    ee82:	|      movea.l d0,a6
    ee84:	|      movea.l 4(sp),a1
    ee88:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    ee8c:	|      moveq #28,d0
    ee8e:	|      add.l 24(sp),d0
    ee92:	|      clr.l -(sp)
    ee94:	|      pea 1 <_start+0x1>
    ee98:	|      move.l d0,-(sp)
    ee9a:	|      jsr 1574c <setVariable>
    eea0:	|      lea 12(sp),sp
    saverFunc = fun;
    eea4:	|      move.l 24(sp),1d24e <saverFunc>
    return BR_KEEP_AND_PAUSE;
    eeac:	|      moveq #0,d0
}
    eeae:	'----> movea.l (sp)+,a6
    eeb0:	       lea 12(sp),sp
    eeb4:	       rts

0000eeb6 <builtIn_fileExists>:

builtIn(fileExists)
{
    eeb6:	       lea -36(sp),sp
    eeba:	       move.l a6,-(sp)
    eebc:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    eebe:	       movea.l 52(sp),a0
    eec2:	       move.l 24(a0),d0
    eec6:	       move.l d0,-(sp)
    eec8:	       jsr 15430 <getTextFromAnyVar>
    eece:	       addq.l #4,sp
    eed0:	       move.l d0,1d154 <loadNow>
    trimStack(&fun->stack);
    eed6:	       moveq #24,d0
    eed8:	       add.l 52(sp),d0
    eedc:	       move.l d0,-(sp)
    eede:	       jsr 157de <trimStack>
    eee4:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    eee6:	       move.l 1d154 <loadNow>,d0
    eeec:	       move.l d0,-(sp)
    eeee:	       jsr 2fe <encodeFilename>
    eef4:	       addq.l #4,sp
    eef6:	       move.l d0,40(sp)
    FreeVec(loadNow);
    eefa:	       move.l 1d154 <loadNow>,36(sp)
    ef02:	       move.l 1d188 <SysBase>,d0
    ef08:	       movea.l d0,a6
    ef0a:	       movea.l 36(sp),a1
    ef0e:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    ef12:	       move.l 40(sp),-(sp)
    ef16:	       jsr e95a <failSecurityCheck>
    ef1c:	       addq.l #4,sp
    ef1e:	       tst.w d0
    ef20:	   ,-- beq.s ef28 <builtIn_fileExists+0x72>
    ef22:	   |   moveq #1,d0
    ef24:	,--|-- bra.w efc8 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    ef28:	|  '-> move.l 40(sp),32(sp)
    ef2e:	|      move.l #1005,28(sp)
    ef36:	|      move.l 1d190 <DOSBase>,d0
    ef3c:	|      movea.l d0,a6
    ef3e:	|      move.l 32(sp),d1
    ef42:	|      move.l 28(sp),d2
    ef46:	|      jsr -30(a6)
    ef4a:	|      move.l d0,24(sp)
    ef4e:	|      move.l 24(sp),d0
    ef52:	|      move.l d0,20(sp)
    if (!fp) {        
    ef56:	|  ,-- bne.s ef66 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    ef58:	|  |   pea 1a068 <PutChar+0x1c8c>
    ef5e:	|  |   jsr 1793a <KPrintF>
    ef64:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    ef66:	|  '-> tst.l 20(sp)
    ef6a:	|      sne d0
    ef6c:	|      neg.b d0
    ef6e:	|      moveq #0,d1
    ef70:	|      move.b d0,d1
    ef72:	|      moveq #28,d0
    ef74:	|      add.l 52(sp),d0
    ef78:	|      move.l d1,-(sp)
    ef7a:	|      pea 1 <_start+0x1>
    ef7e:	|      move.l d0,-(sp)
    ef80:	|      jsr 1574c <setVariable>
    ef86:	|      lea 12(sp),sp
    if (fp) Close(fp);
    ef8a:	|      tst.l 20(sp)
    ef8e:	|  ,-- beq.s efaa <builtIn_fileExists+0xf4>
    ef90:	|  |   move.l 20(sp),16(sp)
    ef96:	|  |   move.l 1d190 <DOSBase>,d0
    ef9c:	|  |   movea.l d0,a6
    ef9e:	|  |   move.l 16(sp),d1
    efa2:	|  |   jsr -36(a6)
    efa6:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    efaa:	|  '-> move.l 40(sp),8(sp)
    efb0:	|      move.l 1d188 <SysBase>,d0
    efb6:	|      movea.l d0,a6
    efb8:	|      movea.l 8(sp),a1
    efbc:	|      jsr -690(a6)
    loadNow = NULL;
    efc0:	|      clr.l 1d154 <loadNow>
    return BR_CONTINUE;
    efc6:	|      moveq #2,d0
}
    efc8:	'----> move.l (sp)+,d2
    efca:	       movea.l (sp)+,a6
    efcc:	       lea 36(sp),sp
    efd0:	       rts

0000efd2 <builtIn_loadGame>:

builtIn(loadGame)
{
    efd2:	       lea -36(sp),sp
    efd6:	       move.l a6,-(sp)
    efd8:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    efda:	       movea.l 52(sp),a0
    efde:	       move.l 24(a0),d0
    efe2:	       move.l d0,-(sp)
    efe4:	       jsr 15430 <getTextFromAnyVar>
    efea:	       addq.l #4,sp
    efec:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    eff0:	       moveq #24,d0
    eff2:	       add.l 52(sp),d0
    eff6:	       move.l d0,-(sp)
    eff8:	       jsr 157de <trimStack>
    effe:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    f000:	       move.l 40(sp),-(sp)
    f004:	       jsr 2fe <encodeFilename>
    f00a:	       addq.l #4,sp
    f00c:	       move.l d0,1d154 <loadNow>
    FreeVec(aaaaa);
    f012:	       move.l 40(sp),36(sp)
    f018:	       move.l 1d188 <SysBase>,d0
    f01e:	       movea.l d0,a6
    f020:	       movea.l 36(sp),a1
    f024:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    f028:	       move.l 1d154 <loadNow>,d0
    f02e:	       move.l d0,-(sp)
    f030:	       jsr e95a <failSecurityCheck>
    f036:	       addq.l #4,sp
    f038:	       tst.w d0
    f03a:	   ,-- beq.s f040 <builtIn_loadGame+0x6e>
    f03c:	   |   moveq #1,d0
    f03e:	,--|-- bra.s f0b0 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    f040:	|  '-> move.l 1d154 <loadNow>,32(sp)
    f048:	|      move.l #1005,28(sp)
    f050:	|      move.l 1d190 <DOSBase>,d0
    f056:	|      movea.l d0,a6
    f058:	|      move.l 32(sp),d1
    f05c:	|      move.l 28(sp),d2
    f060:	|      jsr -30(a6)
    f064:	|      move.l d0,24(sp)
    f068:	|      move.l 24(sp),d0
    f06c:	|      move.l d0,20(sp)
    if (fp) {
    f070:	|  ,-- beq.s f090 <builtIn_loadGame+0xbe>
        Close(fp);
    f072:	|  |   move.l 20(sp),12(sp)
    f078:	|  |   move.l 1d190 <DOSBase>,d0
    f07e:	|  |   movea.l d0,a6
    f080:	|  |   move.l 12(sp),d1
    f084:	|  |   jsr -36(a6)
    f088:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    f08c:	|  |   moveq #0,d0
    f08e:	+--|-- bra.s f0b0 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    f090:	|  '-> move.l 1d154 <loadNow>,16(sp)
    f098:	|      move.l 1d188 <SysBase>,d0
    f09e:	|      movea.l d0,a6
    f0a0:	|      movea.l 16(sp),a1
    f0a4:	|      jsr -690(a6)
    loadNow = NULL;
    f0a8:	|      clr.l 1d154 <loadNow>
    return BR_CONTINUE;
    f0ae:	|      moveq #2,d0
}
    f0b0:	'----> move.l (sp)+,d2
    f0b2:	       movea.l (sp)+,a6
    f0b4:	       lea 36(sp),sp
    f0b8:	       rts

0000f0ba <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    f0ba:	move.l 1d224 <sceneHeight>,d0
    f0c0:	move.l d0,d1
    f0c2:	move.l 1d220 <sceneWidth>,d0
    f0c8:	move.l d1,-(sp)
    f0ca:	move.l d0,-(sp)
    f0cc:	clr.l -(sp)
    f0ce:	clr.l -(sp)
    f0d0:	jsr d844 <blankScreen>
    f0d6:	lea 16(sp),sp
	return BR_CONTINUE;
    f0da:	moveq #2,d0
}
    f0dc:	rts

0000f0de <builtIn_blankArea>:

builtIn(blankArea)
{
    f0de:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f0e2:	       movea.l 24(sp),a0
    f0e6:	       move.l 24(a0),d0
    f0ea:	       move.l d0,-(sp)
    f0ec:	       pea 1 <_start+0x1>
    f0f0:	       lea 8(sp),a0
    f0f4:	       move.l a0,-(sp)
    f0f6:	       jsr 14e5a <getValueType>
    f0fc:	       lea 12(sp),sp
    f100:	       tst.w d0
    f102:	   ,-- bne.s f10a <builtIn_blankArea+0x2c>
    f104:	   |   moveq #1,d0
    f106:	,--|-- bra.w f1e0 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    f10a:	|  '-> moveq #24,d0
    f10c:	|      add.l 24(sp),d0
    f110:	|      move.l d0,-(sp)
    f112:	|      jsr 157de <trimStack>
    f118:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f11a:	|      movea.l 24(sp),a0
    f11e:	|      move.l 24(a0),d0
    f122:	|      move.l d0,-(sp)
    f124:	|      pea 1 <_start+0x1>
    f128:	|      lea 12(sp),a0
    f12c:	|      move.l a0,-(sp)
    f12e:	|      jsr 14e5a <getValueType>
    f134:	|      lea 12(sp),sp
    f138:	|      tst.w d0
    f13a:	|  ,-- bne.s f142 <builtIn_blankArea+0x64>
    f13c:	|  |   moveq #1,d0
    f13e:	+--|-- bra.w f1e0 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    f142:	|  '-> moveq #24,d0
    f144:	|      add.l 24(sp),d0
    f148:	|      move.l d0,-(sp)
    f14a:	|      jsr 157de <trimStack>
    f150:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f152:	|      movea.l 24(sp),a0
    f156:	|      move.l 24(a0),d0
    f15a:	|      move.l d0,-(sp)
    f15c:	|      pea 1 <_start+0x1>
    f160:	|      moveq #16,d0
    f162:	|      add.l sp,d0
    f164:	|      move.l d0,-(sp)
    f166:	|      jsr 14e5a <getValueType>
    f16c:	|      lea 12(sp),sp
    f170:	|      tst.w d0
    f172:	|  ,-- bne.s f178 <builtIn_blankArea+0x9a>
    f174:	|  |   moveq #1,d0
    f176:	+--|-- bra.s f1e0 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    f178:	|  '-> moveq #24,d0
    f17a:	|      add.l 24(sp),d0
    f17e:	|      move.l d0,-(sp)
    f180:	|      jsr 157de <trimStack>
    f186:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    f188:	|      movea.l 24(sp),a0
    f18c:	|      move.l 24(a0),d0
    f190:	|      move.l d0,-(sp)
    f192:	|      pea 1 <_start+0x1>
    f196:	|      moveq #20,d0
    f198:	|      add.l sp,d0
    f19a:	|      move.l d0,-(sp)
    f19c:	|      jsr 14e5a <getValueType>
    f1a2:	|      lea 12(sp),sp
    f1a6:	|      tst.w d0
    f1a8:	|  ,-- bne.s f1ae <builtIn_blankArea+0xd0>
    f1aa:	|  |   moveq #1,d0
    f1ac:	+--|-- bra.s f1e0 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    f1ae:	|  '-> moveq #24,d0
    f1b0:	|      add.l 24(sp),d0
    f1b4:	|      move.l d0,-(sp)
    f1b6:	|      jsr 157de <trimStack>
    f1bc:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    f1be:	|      movea.l (sp),a1
    f1c0:	|      movea.l 4(sp),a0
    f1c4:	|      move.l 8(sp),d1
    f1c8:	|      move.l 12(sp),d0
    f1cc:	|      move.l a1,-(sp)
    f1ce:	|      move.l a0,-(sp)
    f1d0:	|      move.l d1,-(sp)
    f1d2:	|      move.l d0,-(sp)
    f1d4:	|      jsr d844 <blankScreen>
    f1da:	|      lea 16(sp),sp
	return BR_CONTINUE;
    f1de:	|      moveq #2,d0
}
    f1e0:	'----> lea 16(sp),sp
    f1e4:	       rts

0000f1e6 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    f1e6:	jsr d862 <darkScreen>
	return BR_CONTINUE;
    f1ec:	moveq #2,d0
}
    f1ee:	rts

0000f1f0 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    f1f0:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f1f4:	       movea.l 20(sp),a0
    f1f8:	       move.l 24(a0),d0
    f1fc:	       move.l d0,-(sp)
    f1fe:	       pea 1 <_start+0x1>
    f202:	       lea 8(sp),a0
    f206:	       move.l a0,-(sp)
    f208:	       jsr 14e5a <getValueType>
    f20e:	       lea 12(sp),sp
    f212:	       tst.w d0
    f214:	   ,-- bne.s f21c <builtIn_addOverlay+0x2c>
    f216:	   |   moveq #1,d0
    f218:	,--|-- bra.w f2b4 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    f21c:	|  '-> moveq #24,d0
    f21e:	|      add.l 20(sp),d0
    f222:	|      move.l d0,-(sp)
    f224:	|      jsr 157de <trimStack>
    f22a:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f22c:	|      movea.l 20(sp),a0
    f230:	|      move.l 24(a0),d0
    f234:	|      move.l d0,-(sp)
    f236:	|      pea 1 <_start+0x1>
    f23a:	|      moveq #12,d0
    f23c:	|      add.l sp,d0
    f23e:	|      move.l d0,-(sp)
    f240:	|      jsr 14e5a <getValueType>
    f246:	|      lea 12(sp),sp
    f24a:	|      tst.w d0
    f24c:	|  ,-- bne.s f252 <builtIn_addOverlay+0x62>
    f24e:	|  |   moveq #1,d0
    f250:	+--|-- bra.s f2b4 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    f252:	|  '-> moveq #24,d0
    f254:	|      add.l 20(sp),d0
    f258:	|      move.l d0,-(sp)
    f25a:	|      jsr 157de <trimStack>
    f260:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f262:	|      movea.l 20(sp),a0
    f266:	|      move.l 24(a0),d0
    f26a:	|      move.l d0,-(sp)
    f26c:	|      pea 5 <_start+0x5>
    f270:	|      moveq #16,d0
    f272:	|      add.l sp,d0
    f274:	|      move.l d0,-(sp)
    f276:	|      jsr 14e5a <getValueType>
    f27c:	|      lea 12(sp),sp
    f280:	|      tst.w d0
    f282:	|  ,-- bne.s f288 <builtIn_addOverlay+0x98>
    f284:	|  |   moveq #1,d0
    f286:	+--|-- bra.s f2b4 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    f288:	|  '-> moveq #24,d0
    f28a:	|      add.l 20(sp),d0
    f28e:	|      move.l d0,-(sp)
    f290:	|      jsr 157de <trimStack>
    f296:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    f298:	|      movea.l (sp),a0
    f29a:	|      move.l 4(sp),d1
    f29e:	|      move.l 8(sp),d0
    f2a2:	|      move.l a0,-(sp)
    f2a4:	|      move.l d1,-(sp)
    f2a6:	|      move.l d0,-(sp)
    f2a8:	|      jsr d980 <loadBackDrop>
    f2ae:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f2b2:	|      moveq #2,d0
}
    f2b4:	'----> lea 12(sp),sp
    f2b8:	       rts

0000f2ba <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    f2ba:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2be:	       movea.l 20(sp),a0
    f2c2:	       move.l 24(a0),d0
    f2c6:	       move.l d0,-(sp)
    f2c8:	       pea 1 <_start+0x1>
    f2cc:	       lea 8(sp),a0
    f2d0:	       move.l a0,-(sp)
    f2d2:	       jsr 14e5a <getValueType>
    f2d8:	       lea 12(sp),sp
    f2dc:	       tst.w d0
    f2de:	   ,-- bne.s f2e6 <builtIn_mixOverlay+0x2c>
    f2e0:	   |   moveq #1,d0
    f2e2:	,--|-- bra.w f37e <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f2e6:	|  '-> moveq #24,d0
    f2e8:	|      add.l 20(sp),d0
    f2ec:	|      move.l d0,-(sp)
    f2ee:	|      jsr 157de <trimStack>
    f2f4:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2f6:	|      movea.l 20(sp),a0
    f2fa:	|      move.l 24(a0),d0
    f2fe:	|      move.l d0,-(sp)
    f300:	|      pea 1 <_start+0x1>
    f304:	|      moveq #12,d0
    f306:	|      add.l sp,d0
    f308:	|      move.l d0,-(sp)
    f30a:	|      jsr 14e5a <getValueType>
    f310:	|      lea 12(sp),sp
    f314:	|      tst.w d0
    f316:	|  ,-- bne.s f31c <builtIn_mixOverlay+0x62>
    f318:	|  |   moveq #1,d0
    f31a:	+--|-- bra.s f37e <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f31c:	|  '-> moveq #24,d0
    f31e:	|      add.l 20(sp),d0
    f322:	|      move.l d0,-(sp)
    f324:	|      jsr 157de <trimStack>
    f32a:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f32c:	|      movea.l 20(sp),a0
    f330:	|      move.l 24(a0),d0
    f334:	|      move.l d0,-(sp)
    f336:	|      pea 5 <_start+0x5>
    f33a:	|      moveq #16,d0
    f33c:	|      add.l sp,d0
    f33e:	|      move.l d0,-(sp)
    f340:	|      jsr 14e5a <getValueType>
    f346:	|      lea 12(sp),sp
    f34a:	|      tst.w d0
    f34c:	|  ,-- bne.s f352 <builtIn_mixOverlay+0x98>
    f34e:	|  |   moveq #1,d0
    f350:	+--|-- bra.s f37e <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f352:	|  '-> moveq #24,d0
    f354:	|      add.l 20(sp),d0
    f358:	|      move.l d0,-(sp)
    f35a:	|      jsr 157de <trimStack>
    f360:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    f362:	|      movea.l (sp),a0
    f364:	|      move.l 4(sp),d1
    f368:	|      move.l 8(sp),d0
    f36c:	|      move.l a0,-(sp)
    f36e:	|      move.l d1,-(sp)
    f370:	|      move.l d0,-(sp)
    f372:	|      jsr d9f6 <mixBackDrop>
    f378:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f37c:	|      moveq #2,d0
}
    f37e:	'----> lea 12(sp),sp
    f382:	       rts

0000f384 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    f384:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f388:	       movea.l 20(sp),a0
    f38c:	       move.l 24(a0),d0
    f390:	       move.l d0,-(sp)
    f392:	       pea 1 <_start+0x1>
    f396:	       lea 8(sp),a0
    f39a:	       move.l a0,-(sp)
    f39c:	       jsr 14e5a <getValueType>
    f3a2:	       lea 12(sp),sp
    f3a6:	       tst.w d0
    f3a8:	   ,-- bne.s f3b0 <builtIn_pasteImage+0x2c>
    f3aa:	   |   moveq #1,d0
    f3ac:	,--|-- bra.w f440 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    f3b0:	|  '-> moveq #24,d0
    f3b2:	|      add.l 20(sp),d0
    f3b6:	|      move.l d0,-(sp)
    f3b8:	|      jsr 157de <trimStack>
    f3be:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f3c0:	|      movea.l 20(sp),a0
    f3c4:	|      move.l 24(a0),d0
    f3c8:	|      move.l d0,-(sp)
    f3ca:	|      pea 1 <_start+0x1>
    f3ce:	|      moveq #12,d0
    f3d0:	|      add.l sp,d0
    f3d2:	|      move.l d0,-(sp)
    f3d4:	|      jsr 14e5a <getValueType>
    f3da:	|      lea 12(sp),sp
    f3de:	|      tst.w d0
    f3e0:	|  ,-- bne.s f3e6 <builtIn_pasteImage+0x62>
    f3e2:	|  |   moveq #1,d0
    f3e4:	+--|-- bra.s f440 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    f3e6:	|  '-> moveq #24,d0
    f3e8:	|      add.l 20(sp),d0
    f3ec:	|      move.l d0,-(sp)
    f3ee:	|      jsr 157de <trimStack>
    f3f4:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    f3f6:	|      movea.l 20(sp),a0
    f3fa:	|      move.l 24(a0),d0
    f3fe:	|      move.l d0,-(sp)
    f400:	|      jsr 15332 <getAnimationFromVar>
    f406:	|      addq.l #4,sp
    f408:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    f40c:	|      moveq #24,d0
    f40e:	|      add.l 20(sp),d0
    f412:	|      move.l d0,-(sp)
    f414:	|      jsr 157de <trimStack>
    f41a:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    f41c:	|      tst.l 8(sp)
    f420:	|  ,-- bne.s f426 <builtIn_pasteImage+0xa2>
    f422:	|  |   moveq #2,d0
    f424:	+--|-- bra.s f440 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    f426:	|  '-> move.l (sp),d1
    f428:	|      move.l 4(sp),d0
    f42c:	|      move.l 8(sp),-(sp)
    f430:	|      move.l d1,-(sp)
    f432:	|      move.l d0,-(sp)
    f434:	|      jsr d94 <pasteCursor>
    f43a:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    f43e:	|      moveq #2,d0
}
    f440:	'----> lea 12(sp),sp
    f444:	       rts

0000f446 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    f446:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f448:	       movea.l 16(sp),a0
    f44c:	       move.l 24(a0),d0
    f450:	       move.l d0,-(sp)
    f452:	       pea 1 <_start+0x1>
    f456:	       move.l sp,d0
    f458:	       addq.l #8,d0
    f45a:	       move.l d0,-(sp)
    f45c:	       jsr 14e5a <getValueType>
    f462:	       lea 12(sp),sp
    f466:	       tst.w d0
    f468:	   ,-- bne.s f470 <builtIn_setSceneDimensions+0x2a>
    f46a:	   |   moveq #1,d0
    f46c:	,--|-- bra.w f4f8 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    f470:	|  '-> moveq #24,d0
    f472:	|      add.l 16(sp),d0
    f476:	|      move.l d0,-(sp)
    f478:	|      jsr 157de <trimStack>
    f47e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f480:	|      movea.l 16(sp),a0
    f484:	|      move.l 24(a0),d0
    f488:	|      move.l d0,-(sp)
    f48a:	|      pea 1 <_start+0x1>
    f48e:	|      moveq #12,d0
    f490:	|      add.l sp,d0
    f492:	|      move.l d0,-(sp)
    f494:	|      jsr 14e5a <getValueType>
    f49a:	|      lea 12(sp),sp
    f49e:	|      tst.w d0
    f4a0:	|  ,-- bne.s f4a6 <builtIn_setSceneDimensions+0x60>
    f4a2:	|  |   moveq #1,d0
    f4a4:	+--|-- bra.s f4f8 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    f4a6:	|  '-> moveq #24,d0
    f4a8:	|      add.l 16(sp),d0
    f4ac:	|      move.l d0,-(sp)
    f4ae:	|      jsr 157de <trimStack>
    f4b4:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    f4b6:	|      move.l (sp),d1
    f4b8:	|      move.l 4(sp),d0
    f4bc:	|      move.l d1,-(sp)
    f4be:	|      move.l d0,-(sp)
    f4c0:	|      jsr da4c <resizeBackdrop>
    f4c6:	|      addq.l #8,sp
    f4c8:	|      tst.w d0
    f4ca:	|  ,-- beq.s f4e8 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    f4cc:	|  |   move.l (sp),d1
    f4ce:	|  |   move.l 4(sp),d0
    f4d2:	|  |   move.l d1,-(sp)
    f4d4:	|  |   move.l d0,-(sp)
    f4d6:	|  |   clr.l -(sp)
    f4d8:	|  |   clr.l -(sp)
    f4da:	|  |   jsr d844 <blankScreen>
    f4e0:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    f4e4:	|  |   moveq #2,d0
    f4e6:	+--|-- bra.s f4f8 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    f4e8:	|  '-> pea 1a086 <PutChar+0x1caa>
    f4ee:	|      jsr 1793a <KPrintF>
    f4f4:	|      addq.l #4,sp
	return BR_ERROR;
    f4f6:	|      moveq #1,d0
}
    f4f8:	'----> addq.l #8,sp
    f4fa:	       rts

0000f4fc <builtIn_aimCamera>:

builtIn(aimCamera)
{
    f4fc:	          move.l d3,-(sp)
    f4fe:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f500:	          movea.l 16(sp),a0
    f504:	          move.l 24(a0),d0
    f508:	          move.l d0,-(sp)
    f50a:	          pea 1 <_start+0x1>
    f50e:	          pea 1d242 <cameraY>
    f514:	          jsr 14e5a <getValueType>
    f51a:	          lea 12(sp),sp
    f51e:	          tst.w d0
    f520:	      ,-- bne.s f528 <builtIn_aimCamera+0x2c>
    f522:	      |   moveq #1,d0
    f524:	,-----|-- bra.w f7aa <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f528:	|     '-> moveq #24,d0
    f52a:	|         add.l 16(sp),d0
    f52e:	|         move.l d0,-(sp)
    f530:	|         jsr 157de <trimStack>
    f536:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f538:	|         movea.l 16(sp),a0
    f53c:	|         move.l 24(a0),d0
    f540:	|         move.l d0,-(sp)
    f542:	|         pea 1 <_start+0x1>
    f546:	|         pea 1d23e <cameraX>
    f54c:	|         jsr 14e5a <getValueType>
    f552:	|         lea 12(sp),sp
    f556:	|         tst.w d0
    f558:	|     ,-- bne.s f560 <builtIn_aimCamera+0x64>
    f55a:	|     |   moveq #1,d0
    f55c:	+-----|-- bra.w f7aa <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f560:	|     '-> moveq #24,d0
    f562:	|         add.l 16(sp),d0
    f566:	|         move.l d0,-(sp)
    f568:	|         jsr 157de <trimStack>
    f56e:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    f570:	|         move.l 1d23e <cameraX>,d0
    f576:	|         move.l d0,-(sp)
    f578:	|         jsr 17d6c <__floatsisf>
    f57e:	|         addq.l #4,sp
    f580:	|         move.l d0,d2
    f582:	|         move.l 1d0dc <winWidth>,d0
    f588:	|         lsr.l #1,d0
    f58a:	|         move.l d0,-(sp)
    f58c:	|         jsr 17d94 <__floatunsisf>
    f592:	|         addq.l #4,sp
    f594:	|         move.l d0,d1
    f596:	|         move.l 1cb1a <cameraZoom>,d0
    f59c:	|         move.l d0,-(sp)
    f59e:	|         move.l d1,-(sp)
    f5a0:	|         jsr 17c22 <__divsf3>
    f5a6:	|         addq.l #8,sp
    f5a8:	|         move.l d0,-(sp)
    f5aa:	|         move.l d2,-(sp)
    f5ac:	|         jsr 18060 <__subsf3>
    f5b2:	|         addq.l #8,sp
    f5b4:	|         move.l d0,-(sp)
    f5b6:	|         jsr 17d04 <__fixsfsi>
    f5bc:	|         addq.l #4,sp
    f5be:	|         move.l d0,1d23e <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    f5c4:	|         move.l 1d242 <cameraY>,d0
    f5ca:	|         move.l d0,-(sp)
    f5cc:	|         jsr 17d6c <__floatsisf>
    f5d2:	|         addq.l #4,sp
    f5d4:	|         move.l d0,d2
    f5d6:	|         move.l 1d0e0 <winHeight>,d0
    f5dc:	|         lsr.l #1,d0
    f5de:	|         move.l d0,-(sp)
    f5e0:	|         jsr 17d94 <__floatunsisf>
    f5e6:	|         addq.l #4,sp
    f5e8:	|         move.l d0,d1
    f5ea:	|         move.l 1cb1a <cameraZoom>,d0
    f5f0:	|         move.l d0,-(sp)
    f5f2:	|         move.l d1,-(sp)
    f5f4:	|         jsr 17c22 <__divsf3>
    f5fa:	|         addq.l #8,sp
    f5fc:	|         move.l d0,-(sp)
    f5fe:	|         move.l d2,-(sp)
    f600:	|         jsr 18060 <__subsf3>
    f606:	|         addq.l #8,sp
    f608:	|         move.l d0,-(sp)
    f60a:	|         jsr 17d04 <__fixsfsi>
    f610:	|         addq.l #4,sp
    f612:	|         move.l d0,1d242 <cameraY>

	if (cameraX < 0) cameraX = 0;
    f618:	|         move.l 1d23e <cameraX>,d0
    f61e:	|     ,-- bpl.s f62a <builtIn_aimCamera+0x12e>
    f620:	|     |   clr.l 1d23e <cameraX>
    f626:	|  ,--|-- bra.w f6e0 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    f62a:	|  |  '-> move.l 1d23e <cameraX>,d0
    f630:	|  |      move.l d0,-(sp)
    f632:	|  |      jsr 17d6c <__floatsisf>
    f638:	|  |      addq.l #4,sp
    f63a:	|  |      move.l d0,d2
    f63c:	|  |      move.l 1d220 <sceneWidth>,d0
    f642:	|  |      move.l d0,-(sp)
    f644:	|  |      jsr 17d94 <__floatunsisf>
    f64a:	|  |      addq.l #4,sp
    f64c:	|  |      move.l d0,d3
    f64e:	|  |      move.l 1d0dc <winWidth>,d0
    f654:	|  |      move.l d0,-(sp)
    f656:	|  |      jsr 17d94 <__floatunsisf>
    f65c:	|  |      addq.l #4,sp
    f65e:	|  |      move.l d0,d1
    f660:	|  |      move.l 1cb1a <cameraZoom>,d0
    f666:	|  |      move.l d0,-(sp)
    f668:	|  |      move.l d1,-(sp)
    f66a:	|  |      jsr 17c22 <__divsf3>
    f670:	|  |      addq.l #8,sp
    f672:	|  |      move.l d0,-(sp)
    f674:	|  |      move.l d3,-(sp)
    f676:	|  |      jsr 18060 <__subsf3>
    f67c:	|  |      addq.l #8,sp
    f67e:	|  |      move.l d0,-(sp)
    f680:	|  |      move.l d2,-(sp)
    f682:	|  |      jsr 17ed8 <__gtsf2>
    f688:	|  |      addq.l #8,sp
    f68a:	|  |      tst.l d0
    f68c:	|  +----- ble.s f6e0 <builtIn_aimCamera+0x1e4>
    f68e:	|  |      move.l 1d220 <sceneWidth>,d0
    f694:	|  |      move.l d0,-(sp)
    f696:	|  |      jsr 17d94 <__floatunsisf>
    f69c:	|  |      addq.l #4,sp
    f69e:	|  |      move.l d0,d2
    f6a0:	|  |      move.l 1d0dc <winWidth>,d0
    f6a6:	|  |      move.l d0,-(sp)
    f6a8:	|  |      jsr 17d94 <__floatunsisf>
    f6ae:	|  |      addq.l #4,sp
    f6b0:	|  |      move.l d0,d1
    f6b2:	|  |      move.l 1cb1a <cameraZoom>,d0
    f6b8:	|  |      move.l d0,-(sp)
    f6ba:	|  |      move.l d1,-(sp)
    f6bc:	|  |      jsr 17c22 <__divsf3>
    f6c2:	|  |      addq.l #8,sp
    f6c4:	|  |      move.l d0,-(sp)
    f6c6:	|  |      move.l d2,-(sp)
    f6c8:	|  |      jsr 18060 <__subsf3>
    f6ce:	|  |      addq.l #8,sp
    f6d0:	|  |      move.l d0,-(sp)
    f6d2:	|  |      jsr 17d04 <__fixsfsi>
    f6d8:	|  |      addq.l #4,sp
    f6da:	|  |      move.l d0,1d23e <cameraX>
	if (cameraY < 0) cameraY = 0;
    f6e0:	|  '----> move.l 1d242 <cameraY>,d0
    f6e6:	|     ,-- bpl.s f6f2 <builtIn_aimCamera+0x1f6>
    f6e8:	|     |   clr.l 1d242 <cameraY>
    f6ee:	|  ,--|-- bra.w f7a8 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f6f2:	|  |  '-> move.l 1d242 <cameraY>,d0
    f6f8:	|  |      move.l d0,-(sp)
    f6fa:	|  |      jsr 17d6c <__floatsisf>
    f700:	|  |      addq.l #4,sp
    f702:	|  |      move.l d0,d2
    f704:	|  |      move.l 1d224 <sceneHeight>,d0
    f70a:	|  |      move.l d0,-(sp)
    f70c:	|  |      jsr 17d94 <__floatunsisf>
    f712:	|  |      addq.l #4,sp
    f714:	|  |      move.l d0,d3
    f716:	|  |      move.l 1d0e0 <winHeight>,d0
    f71c:	|  |      move.l d0,-(sp)
    f71e:	|  |      jsr 17d94 <__floatunsisf>
    f724:	|  |      addq.l #4,sp
    f726:	|  |      move.l d0,d1
    f728:	|  |      move.l 1cb1a <cameraZoom>,d0
    f72e:	|  |      move.l d0,-(sp)
    f730:	|  |      move.l d1,-(sp)
    f732:	|  |      jsr 17c22 <__divsf3>
    f738:	|  |      addq.l #8,sp
    f73a:	|  |      move.l d0,-(sp)
    f73c:	|  |      move.l d3,-(sp)
    f73e:	|  |      jsr 18060 <__subsf3>
    f744:	|  |      addq.l #8,sp
    f746:	|  |      move.l d0,-(sp)
    f748:	|  |      move.l d2,-(sp)
    f74a:	|  |      jsr 17ed8 <__gtsf2>
    f750:	|  |      addq.l #8,sp
    f752:	|  |      tst.l d0
    f754:	|  +----- ble.s f7a8 <builtIn_aimCamera+0x2ac>
    f756:	|  |      move.l 1d224 <sceneHeight>,d0
    f75c:	|  |      move.l d0,-(sp)
    f75e:	|  |      jsr 17d94 <__floatunsisf>
    f764:	|  |      addq.l #4,sp
    f766:	|  |      move.l d0,d2
    f768:	|  |      move.l 1d0e0 <winHeight>,d0
    f76e:	|  |      move.l d0,-(sp)
    f770:	|  |      jsr 17d94 <__floatunsisf>
    f776:	|  |      addq.l #4,sp
    f778:	|  |      move.l d0,d1
    f77a:	|  |      move.l 1cb1a <cameraZoom>,d0
    f780:	|  |      move.l d0,-(sp)
    f782:	|  |      move.l d1,-(sp)
    f784:	|  |      jsr 17c22 <__divsf3>
    f78a:	|  |      addq.l #8,sp
    f78c:	|  |      move.l d0,-(sp)
    f78e:	|  |      move.l d2,-(sp)
    f790:	|  |      jsr 18060 <__subsf3>
    f796:	|  |      addq.l #8,sp
    f798:	|  |      move.l d0,-(sp)
    f79a:	|  |      jsr 17d04 <__fixsfsi>
    f7a0:	|  |      addq.l #4,sp
    f7a2:	|  |      move.l d0,1d242 <cameraY>
	return BR_CONTINUE;
    f7a8:	|  '----> moveq #2,d0
}
    f7aa:	'-------> move.l (sp)+,d2
    f7ac:	          move.l (sp)+,d3
    f7ae:	          rts

0000f7b0 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f7b0:	       subq.l #4,sp
    f7b2:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f7b4:	       movea.l 16(sp),a0
    f7b8:	       move.l 24(a0),d0
    f7bc:	       move.l d0,-(sp)
    f7be:	       pea 1 <_start+0x1>
    f7c2:	       moveq #12,d0
    f7c4:	       add.l sp,d0
    f7c6:	       move.l d0,-(sp)
    f7c8:	       jsr 14e5a <getValueType>
    f7ce:	       lea 12(sp),sp
    f7d2:	       tst.w d0
    f7d4:	   ,-- bne.s f7dc <builtIn_zoomCamera+0x2c>
    f7d6:	   |   moveq #1,d0
    f7d8:	,--|-- bra.w f9d6 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f7dc:	|  '-> moveq #24,d0
    f7de:	|      add.l 16(sp),d0
    f7e2:	|      move.l d0,-(sp)
    f7e4:	|      jsr 157de <trimStack>
    f7ea:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f7ec:	|      move.l 1d144 <input+0xa>,d0
    f7f2:	|      move.l d0,-(sp)
    f7f4:	|      jsr 17d6c <__floatsisf>
    f7fa:	|      addq.l #4,sp
    f7fc:	|      move.l d0,d1
    f7fe:	|      move.l 1cb1a <cameraZoom>,d0
    f804:	|      move.l d0,-(sp)
    f806:	|      move.l d1,-(sp)
    f808:	|      jsr 17e1e <__mulsf3>
    f80e:	|      addq.l #8,sp
    f810:	|      move.l d0,-(sp)
    f812:	|      jsr 17d04 <__fixsfsi>
    f818:	|      addq.l #4,sp
    f81a:	|      move.l d0,1d144 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f820:	|      move.l 1d148 <input+0xe>,d0
    f826:	|      move.l d0,-(sp)
    f828:	|      jsr 17d6c <__floatsisf>
    f82e:	|      addq.l #4,sp
    f830:	|      move.l d0,d1
    f832:	|      move.l 1cb1a <cameraZoom>,d0
    f838:	|      move.l d0,-(sp)
    f83a:	|      move.l d1,-(sp)
    f83c:	|      jsr 17e1e <__mulsf3>
    f842:	|      addq.l #8,sp
    f844:	|      move.l d0,-(sp)
    f846:	|      jsr 17d04 <__fixsfsi>
    f84c:	|      addq.l #4,sp
    f84e:	|      move.l d0,1d148 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f854:	|      move.l 4(sp),d0
    f858:	|      move.l d0,-(sp)
    f85a:	|      jsr 17d6c <__floatsisf>
    f860:	|      addq.l #4,sp
    f862:	|      move.l #1008981770,-(sp)
    f868:	|      move.l d0,-(sp)
    f86a:	|      jsr 17e1e <__mulsf3>
    f870:	|      addq.l #8,sp
    f872:	|      move.l d0,1cb1a <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f878:	|      move.l 1d0dc <winWidth>,d0
    f87e:	|      move.l d0,-(sp)
    f880:	|      jsr 17d94 <__floatunsisf>
    f886:	|      addq.l #4,sp
    f888:	|      move.l d0,d1
    f88a:	|      move.l 1cb1a <cameraZoom>,d0
    f890:	|      move.l d0,-(sp)
    f892:	|      move.l d1,-(sp)
    f894:	|      jsr 17c22 <__divsf3>
    f89a:	|      addq.l #8,sp
    f89c:	|      move.l d0,d2
    f89e:	|      move.l 1d220 <sceneWidth>,d0
    f8a4:	|      move.l d0,-(sp)
    f8a6:	|      jsr 17d94 <__floatunsisf>
    f8ac:	|      addq.l #4,sp
    f8ae:	|      move.l d0,-(sp)
    f8b0:	|      move.l d2,-(sp)
    f8b2:	|      jsr 17ed8 <__gtsf2>
    f8b8:	|      addq.l #8,sp
    f8ba:	|      tst.l d0
    f8bc:	|  ,-- ble.s f8f2 <builtIn_zoomCamera+0x142>
    f8be:	|  |   move.l 1d0dc <winWidth>,d0
    f8c4:	|  |   move.l d0,-(sp)
    f8c6:	|  |   jsr 17d94 <__floatunsisf>
    f8cc:	|  |   addq.l #4,sp
    f8ce:	|  |   move.l d0,d2
    f8d0:	|  |   move.l 1d220 <sceneWidth>,d0
    f8d6:	|  |   move.l d0,-(sp)
    f8d8:	|  |   jsr 17d94 <__floatunsisf>
    f8de:	|  |   addq.l #4,sp
    f8e0:	|  |   move.l d0,-(sp)
    f8e2:	|  |   move.l d2,-(sp)
    f8e4:	|  |   jsr 17c22 <__divsf3>
    f8ea:	|  |   addq.l #8,sp
    f8ec:	|  |   move.l d0,1cb1a <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f8f2:	|  '-> move.l 1d0e0 <winHeight>,d0
    f8f8:	|      move.l d0,-(sp)
    f8fa:	|      jsr 17d94 <__floatunsisf>
    f900:	|      addq.l #4,sp
    f902:	|      move.l d0,d1
    f904:	|      move.l 1cb1a <cameraZoom>,d0
    f90a:	|      move.l d0,-(sp)
    f90c:	|      move.l d1,-(sp)
    f90e:	|      jsr 17c22 <__divsf3>
    f914:	|      addq.l #8,sp
    f916:	|      move.l d0,d2
    f918:	|      move.l 1d224 <sceneHeight>,d0
    f91e:	|      move.l d0,-(sp)
    f920:	|      jsr 17d94 <__floatunsisf>
    f926:	|      addq.l #4,sp
    f928:	|      move.l d0,-(sp)
    f92a:	|      move.l d2,-(sp)
    f92c:	|      jsr 17ed8 <__gtsf2>
    f932:	|      addq.l #8,sp
    f934:	|      tst.l d0
    f936:	|  ,-- ble.s f96c <builtIn_zoomCamera+0x1bc>
    f938:	|  |   move.l 1d0e0 <winHeight>,d0
    f93e:	|  |   move.l d0,-(sp)
    f940:	|  |   jsr 17d94 <__floatunsisf>
    f946:	|  |   addq.l #4,sp
    f948:	|  |   move.l d0,d2
    f94a:	|  |   move.l 1d224 <sceneHeight>,d0
    f950:	|  |   move.l d0,-(sp)
    f952:	|  |   jsr 17d94 <__floatunsisf>
    f958:	|  |   addq.l #4,sp
    f95a:	|  |   move.l d0,-(sp)
    f95c:	|  |   move.l d2,-(sp)
    f95e:	|  |   jsr 17c22 <__divsf3>
    f964:	|  |   addq.l #8,sp
    f966:	|  |   move.l d0,1cb1a <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f96c:	|  '-> move.l 1d144 <input+0xa>,d0
    f972:	|      move.l d0,-(sp)
    f974:	|      jsr 17d6c <__floatsisf>
    f97a:	|      addq.l #4,sp
    f97c:	|      move.l d0,d1
    f97e:	|      move.l 1cb1a <cameraZoom>,d0
    f984:	|      move.l d0,-(sp)
    f986:	|      move.l d1,-(sp)
    f988:	|      jsr 17c22 <__divsf3>
    f98e:	|      addq.l #8,sp
    f990:	|      move.l d0,-(sp)
    f992:	|      jsr 17d04 <__fixsfsi>
    f998:	|      addq.l #4,sp
    f99a:	|      move.l d0,1d144 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f9a0:	|      move.l 1d148 <input+0xe>,d0
    f9a6:	|      move.l d0,-(sp)
    f9a8:	|      jsr 17d6c <__floatsisf>
    f9ae:	|      addq.l #4,sp
    f9b0:	|      move.l d0,d1
    f9b2:	|      move.l 1cb1a <cameraZoom>,d0
    f9b8:	|      move.l d0,-(sp)
    f9ba:	|      move.l d1,-(sp)
    f9bc:	|      jsr 17c22 <__divsf3>
    f9c2:	|      addq.l #8,sp
    f9c4:	|      move.l d0,-(sp)
    f9c6:	|      jsr 17d04 <__fixsfsi>
    f9cc:	|      addq.l #4,sp
    f9ce:	|      move.l d0,1d148 <input+0xe>

	return BR_CONTINUE;
    f9d4:	|      moveq #2,d0
}
    f9d6:	'----> move.l (sp)+,d2
    f9d8:	       addq.l #4,sp
    f9da:	       rts

0000f9dc <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f9dc:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f9de:	             tst.l 8(sp)
    f9e2:	         ,-- bne.s f9f6 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f9e4:	         |   pea 1a0ab <PutChar+0x1ccf>
    f9ea:	         |   jsr 1793a <KPrintF>
    f9f0:	         |   addq.l #4,sp
		return BR_ERROR;
    f9f2:	         |   moveq #1,d0
    f9f4:	,--------|-- bra.s fa56 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f9f6:	|        '-> jsr 164fa <rand>
    f9fc:	|            move.l d0,d1
    f9fe:	|            move.l 8(sp),d0
    fa02:	|            move.l d0,-(sp)
    fa04:	|            move.l d1,-(sp)
    fa06:	|            jsr 183a0 <__umodsi3>
    fa0c:	|            addq.l #8,sp
    fa0e:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    fa10:	|     ,----- bra.s fa44 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    fa12:	|  ,--|----> move.l (sp),d0
    fa14:	|  |  |      cmp.l 8(sp),d0
    fa18:	|  |  |  ,-- bne.s fa34 <builtIn_pickOne+0x58>
    fa1a:	|  |  |  |   moveq #28,d0
    fa1c:	|  |  |  |   add.l 12(sp),d0
    fa20:	|  |  |  |   movea.l 12(sp),a0
    fa24:	|  |  |  |   move.l 24(a0),d1
    fa28:	|  |  |  |   move.l d0,-(sp)
    fa2a:	|  |  |  |   move.l d1,-(sp)
    fa2c:	|  |  |  |   jsr 15314 <copyVariable>
    fa32:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    fa34:	|  |  |  '-> moveq #24,d0
    fa36:	|  |  |      add.l 12(sp),d0
    fa3a:	|  |  |      move.l d0,-(sp)
    fa3c:	|  |  |      jsr 157de <trimStack>
    fa42:	|  |  |      addq.l #4,sp
	while (numParams --) {
    fa44:	|  |  '----> move.l 8(sp),d0
    fa48:	|  |         move.l d0,d1
    fa4a:	|  |         subq.l #1,d1
    fa4c:	|  |         move.l d1,8(sp)
    fa50:	|  |         tst.l d0
    fa52:	|  '-------- bne.s fa12 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    fa54:	|            moveq #2,d0
}
    fa56:	'----------> addq.l #4,sp
    fa58:	             rts

0000fa5a <builtIn_substring>:

builtIn(substring)
{
    fa5a:	       lea -40(sp),sp
    fa5e:	       move.l a6,-(sp)
    fa60:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fa62:	       movea.l 56(sp),a0
    fa66:	       move.l 24(a0),d0
    fa6a:	       move.l d0,-(sp)
    fa6c:	       pea 1 <_start+0x1>
    fa70:	       lea 16(sp),a0
    fa74:	       move.l a0,-(sp)
    fa76:	       jsr 14e5a <getValueType>
    fa7c:	       lea 12(sp),sp
    fa80:	       tst.w d0
    fa82:	   ,-- bne.s fa8a <builtIn_substring+0x30>
    fa84:	   |   moveq #1,d0
    fa86:	,--|-- bra.w fc02 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    fa8a:	|  '-> moveq #24,d0
    fa8c:	|      add.l 56(sp),d0
    fa90:	|      move.l d0,-(sp)
    fa92:	|      jsr 157de <trimStack>
    fa98:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fa9a:	|      movea.l 56(sp),a0
    fa9e:	|      move.l 24(a0),d0
    faa2:	|      move.l d0,-(sp)
    faa4:	|      pea 1 <_start+0x1>
    faa8:	|      lea 20(sp),a0
    faac:	|      move.l a0,-(sp)
    faae:	|      jsr 14e5a <getValueType>
    fab4:	|      lea 12(sp),sp
    fab8:	|      tst.w d0
    faba:	|  ,-- bne.s fac2 <builtIn_substring+0x68>
    fabc:	|  |   moveq #1,d0
    fabe:	+--|-- bra.w fc02 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    fac2:	|  '-> moveq #24,d0
    fac4:	|      add.l 56(sp),d0
    fac8:	|      move.l d0,-(sp)
    faca:	|      jsr 157de <trimStack>
    fad0:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    fad2:	|      movea.l 56(sp),a0
    fad6:	|      move.l 24(a0),d0
    fada:	|      move.l d0,-(sp)
    fadc:	|      jsr 15430 <getTextFromAnyVar>
    fae2:	|      addq.l #4,sp
    fae4:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    fae8:	|      moveq #24,d0
    faea:	|      add.l 56(sp),d0
    faee:	|      move.l d0,-(sp)
    faf0:	|      jsr 157de <trimStack>
    faf6:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    faf8:	|      move.l 44(sp),-(sp)
    fafc:	|      jsr 14346 <strlen>
    fb02:	|      addq.l #4,sp
    fb04:	|      move.l d0,d1
    fb06:	|      move.l 12(sp),d0
    fb0a:	|      movea.l d0,a0
    fb0c:	|      move.l 8(sp),d0
    fb10:	|      add.l a0,d0
    fb12:	|      cmp.l d1,d0
    fb14:	|  ,-- bls.s fb4a <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    fb16:	|  |   move.l 44(sp),-(sp)
    fb1a:	|  |   jsr 14346 <strlen>
    fb20:	|  |   addq.l #4,sp
    fb22:	|  |   move.l d0,d1
    fb24:	|  |   move.l 12(sp),d0
    fb28:	|  |   sub.l d0,d1
    fb2a:	|  |   move.l d1,d0
    fb2c:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    fb30:	|  |   move.l 44(sp),-(sp)
    fb34:	|  |   jsr 14346 <strlen>
    fb3a:	|  |   addq.l #4,sp
    fb3c:	|  |   move.l d0,d1
    fb3e:	|  |   move.l 12(sp),d0
    fb42:	|  |   cmp.l d1,d0
    fb44:	|  +-- bls.s fb4a <builtIn_substring+0xf0>
            start = 0;
    fb46:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    fb4a:	|  '-> move.l 8(sp),d0
    fb4e:	|  ,-- bpl.s fb54 <builtIn_substring+0xfa>
        length = 0;
    fb50:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    fb54:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    fb5a:	|      move.l 12(sp),d1
    fb5e:	|      move.l 8(sp),d0
    fb62:	|      move.l d1,d2
    fb64:	|      add.l d0,d2
    fb66:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    fb6a:	|      move.l 36(sp),d0
    fb6e:	|      sub.l 40(sp),d0
    fb72:	|      addq.l #1,d0
    fb74:	|      move.l d0,32(sp)
    fb78:	|      clr.l 28(sp)
    fb7c:	|      move.l 1d188 <SysBase>,d0
    fb82:	|      movea.l d0,a6
    fb84:	|      move.l 32(sp),d0
    fb88:	|      move.l 28(sp),d1
    fb8c:	|      jsr -684(a6)
    fb90:	|      move.l d0,24(sp)
    fb94:	|      move.l 24(sp),d0
    fb98:	|      move.l d0,20(sp)
    if (!newString) {
    fb9c:	|  ,-- bne.s fba2 <builtIn_substring+0x148>
        return BR_ERROR;
    fb9e:	|  |   moveq #1,d0
    fba0:	+--|-- bra.s fc02 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    fba2:	|  '-> move.l 36(sp),d0
    fba6:	|      sub.l 40(sp),d0
    fbaa:	|      move.l d0,d1
    fbac:	|      move.l 40(sp),d0
    fbb0:	|      add.l 44(sp),d0
    fbb4:	|      move.l d1,-(sp)
    fbb6:	|      move.l d0,-(sp)
    fbb8:	|      move.l 28(sp),-(sp)
    fbbc:	|      jsr 178ee <memcpy>
    fbc2:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    fbc6:	|      move.l 36(sp),d0
    fbca:	|      sub.l 40(sp),d0
    fbce:	|      movea.l 20(sp),a0
    fbd2:	|      adda.l d0,a0
    fbd4:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    fbd6:	|      moveq #28,d0
    fbd8:	|      add.l 56(sp),d0
    fbdc:	|      move.l 20(sp),-(sp)
    fbe0:	|      move.l d0,-(sp)
    fbe2:	|      jsr 1507c <makeTextVar>
    fbe8:	|      addq.l #8,sp
    FreeVec(newString);
    fbea:	|      move.l 20(sp),16(sp)
    fbf0:	|      move.l 1d188 <SysBase>,d0
    fbf6:	|      movea.l d0,a6
    fbf8:	|      movea.l 16(sp),a1
    fbfc:	|      jsr -690(a6)
    return BR_CONTINUE;
    fc00:	|      moveq #2,d0
}
    fc02:	'----> move.l (sp)+,d2
    fc04:	       movea.l (sp)+,a6
    fc06:	       lea 40(sp),sp
    fc0a:	       rts

0000fc0c <builtIn_stringLength>:

builtIn(stringLength)
{
    fc0c:	subq.l #8,sp
    fc0e:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    fc10:	movea.l 20(sp),a0
    fc14:	move.l 24(a0),d0
    fc18:	move.l d0,-(sp)
    fc1a:	jsr 15430 <getTextFromAnyVar>
    fc20:	addq.l #4,sp
    fc22:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    fc26:	moveq #24,d0
    fc28:	add.l 20(sp),d0
    fc2c:	move.l d0,-(sp)
    fc2e:	jsr 157de <trimStack>
    fc34:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    fc36:	move.l 8(sp),-(sp)
    fc3a:	jsr 14346 <strlen>
    fc40:	addq.l #4,sp
    fc42:	move.l d0,d1
    fc44:	moveq #28,d0
    fc46:	add.l 20(sp),d0
    fc4a:	move.l d1,-(sp)
    fc4c:	pea 1 <_start+0x1>
    fc50:	move.l d0,-(sp)
    fc52:	jsr 1574c <setVariable>
    fc58:	lea 12(sp),sp
	FreeVec(newText);
    fc5c:	move.l 8(sp),4(sp)
    fc62:	move.l 1d188 <SysBase>,d0
    fc68:	movea.l d0,a6
    fc6a:	movea.l 4(sp),a1
    fc6e:	jsr -690(a6)
	return BR_CONTINUE;
    fc72:	moveq #2,d0
}
    fc74:	movea.l (sp)+,a6
    fc76:	addq.l #8,sp
    fc78:	rts

0000fc7a <builtIn_newStack>:

builtIn(newStack)
{
    fc7a:	             lea -12(sp),sp
    fc7e:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    fc80:	             moveq #28,d0
    fc82:	             add.l 24(sp),d0
    fc86:	             move.l d0,-(sp)
    fc88:	             jsr 150a8 <unlinkVar>
    fc8e:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    fc90:	             movea.l 24(sp),a0
    fc94:	             moveq #6,d0
    fc96:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    fc9a:	             moveq #12,d1
    fc9c:	             move.l d1,12(sp)
    fca0:	             clr.l 8(sp)
    fca4:	             move.l 1d188 <SysBase>,d0
    fcaa:	             movea.l d0,a6
    fcac:	             move.l 12(sp),d0
    fcb0:	             move.l 8(sp),d1
    fcb4:	             jsr -684(a6)
    fcb8:	             move.l d0,4(sp)
    fcbc:	             move.l 4(sp),d0
    fcc0:	             movea.l 24(sp),a0
    fcc4:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    fcc8:	             movea.l 24(sp),a0
    fccc:	             move.l 32(a0),d0
    fcd0:	         ,-- bne.s fcd8 <builtIn_newStack+0x5e>
    fcd2:	         |   moveq #1,d0
    fcd4:	,--------|-- bra.w fd6a <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    fcd8:	|        '-> movea.l 24(sp),a0
    fcdc:	|            movea.l 32(a0),a0
    fce0:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    fce2:	|            movea.l 24(sp),a0
    fce6:	|            movea.l 32(a0),a0
    fcea:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    fcee:	|            movea.l 24(sp),a0
    fcf2:	|            movea.l 32(a0),a0
    fcf6:	|            moveq #1,d0
    fcf8:	|            move.l d0,8(a0)
    
    while (numParams--) {
    fcfc:	|     ,----- bra.s fd58 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    fcfe:	|  ,--|----> movea.l 24(sp),a0
    fd02:	|  |  |      move.l 32(a0),d0
    fd06:	|  |  |      move.l d0,d1
    fd08:	|  |  |      movea.l 24(sp),a0
    fd0c:	|  |  |      move.l 24(a0),d0
    fd10:	|  |  |      move.l d1,-(sp)
    fd12:	|  |  |      move.l d0,-(sp)
    fd14:	|  |  |      jsr 14696 <addVarToStack>
    fd1a:	|  |  |      addq.l #8,sp
    fd1c:	|  |  |      tst.w d0
    fd1e:	|  |  |  ,-- bne.s fd24 <builtIn_newStack+0xaa>
    fd20:	|  |  |  |   moveq #1,d0
    fd22:	+--|--|--|-- bra.s fd6a <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    fd24:	|  |  |  '-> movea.l 24(sp),a0
    fd28:	|  |  |      movea.l 32(a0),a0
    fd2c:	|  |  |      move.l 4(a0),d0
    fd30:	|  |  |  ,-- bne.s fd48 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    fd32:	|  |  |  |   movea.l 24(sp),a0
    fd36:	|  |  |  |   movea.l 32(a0),a1
    fd3a:	|  |  |  |   movea.l 24(sp),a0
    fd3e:	|  |  |  |   movea.l 32(a0),a0
    fd42:	|  |  |  |   move.l (a1),d0
    fd44:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    fd48:	|  |  |  '-> moveq #24,d0
    fd4a:	|  |  |      add.l 24(sp),d0
    fd4e:	|  |  |      move.l d0,-(sp)
    fd50:	|  |  |      jsr 157de <trimStack>
    fd56:	|  |  |      addq.l #4,sp
    while (numParams--) {
    fd58:	|  |  '----> move.l 20(sp),d0
    fd5c:	|  |         move.l d0,d1
    fd5e:	|  |         subq.l #1,d1
    fd60:	|  |         move.l d1,20(sp)
    fd64:	|  |         tst.l d0
    fd66:	|  '-------- bne.s fcfe <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    fd68:	|            moveq #2,d0
}
    fd6a:	'----------> movea.l (sp)+,a6
    fd6c:	             lea 12(sp),sp
    fd70:	             rts

0000fd72 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    fd72:	          movea.l 8(sp),a0
    fd76:	          movea.l 24(a0),a0
    fd7a:	          move.l (a0),d0
    fd7c:	          moveq #6,d1
    fd7e:	          cmp.l d0,d1
    fd80:	      ,-- beq.s fd9c <builtIn_stackSize+0x2a>
    fd82:	      |   moveq #10,d1
    fd84:	      |   cmp.l d0,d1
    fd86:	   ,--|-- beq.s fde0 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    fd88:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    fd8a:	   |  |   pea 1a0de <PutChar+0x1d02>
    fd90:	   |  |   jsr 1793a <KPrintF>
    fd96:	   |  |   addq.l #4,sp
	return BR_ERROR;
    fd98:	   |  |   moveq #1,d0
    fd9a:	,--|--|-- bra.s fe1a <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    fd9c:	|  |  '-> movea.l 8(sp),a0
    fda0:	|  |      movea.l 24(a0),a0
    fda4:	|  |      move.l 4(a0),d0
    fda8:	|  |      move.l d0,-(sp)
    fdaa:	|  |      jsr 157ba <stackSize>
    fdb0:	|  |      addq.l #4,sp
    fdb2:	|  |      move.l d0,d1
    fdb4:	|  |      moveq #28,d0
    fdb6:	|  |      add.l 8(sp),d0
    fdba:	|  |      move.l d1,-(sp)
    fdbc:	|  |      pea 1 <_start+0x1>
    fdc0:	|  |      move.l d0,-(sp)
    fdc2:	|  |      jsr 1574c <setVariable>
    fdc8:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    fdcc:	|  |      moveq #24,d0
    fdce:	|  |      add.l 8(sp),d0
    fdd2:	|  |      move.l d0,-(sp)
    fdd4:	|  |      jsr 157de <trimStack>
    fdda:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    fddc:	|  |      moveq #2,d0
    fdde:	+--|----- bra.s fe1a <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    fde0:	|  '----> movea.l 8(sp),a0
    fde4:	|         movea.l 24(a0),a0
    fde8:	|         movea.l 4(a0),a0
    fdec:	|         move.l 4(a0),d1
    fdf0:	|         moveq #28,d0
    fdf2:	|         add.l 8(sp),d0
    fdf6:	|         move.l d1,-(sp)
    fdf8:	|         pea 1 <_start+0x1>
    fdfc:	|         move.l d0,-(sp)
    fdfe:	|         jsr 1574c <setVariable>
    fe04:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    fe08:	|         moveq #24,d0
    fe0a:	|         add.l 8(sp),d0
    fe0e:	|         move.l d0,-(sp)
    fe10:	|         jsr 157de <trimStack>
    fe16:	|         addq.l #4,sp
			return BR_CONTINUE;
    fe18:	|         moveq #2,d0
}
    fe1a:	'-------> rts

0000fe1c <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fe1c:	       movea.l 8(sp),a0
    fe20:	       movea.l 24(a0),a0
    fe24:	       move.l (a0),d0
    fe26:	       moveq #6,d1
    fe28:	       cmp.l d0,d1
    fe2a:	   ,-- beq.s fe3e <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fe2c:	   |   pea 1a107 <PutChar+0x1d2b>
    fe32:	   |   jsr 1793a <KPrintF>
    fe38:	   |   addq.l #4,sp
		return BR_ERROR;
    fe3a:	   |   moveq #1,d0
    fe3c:	,--|-- bra.s fe72 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    fe3e:	|  '-> moveq #28,d0
    fe40:	|      add.l 8(sp),d0
    fe44:	|      movea.l 8(sp),a0
    fe48:	|      move.l 24(a0),d1
    fe4c:	|      move.l d0,-(sp)
    fe4e:	|      move.l d1,-(sp)
    fe50:	|      jsr 14960 <copyStack>
    fe56:	|      addq.l #8,sp
    fe58:	|      tst.w d0
    fe5a:	|  ,-- bne.s fe60 <builtIn_copyStack+0x44>
    fe5c:	|  |   moveq #1,d0
    fe5e:	+--|-- bra.s fe72 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    fe60:	|  '-> moveq #24,d0
    fe62:	|      add.l 8(sp),d0
    fe66:	|      move.l d0,-(sp)
    fe68:	|      jsr 157de <trimStack>
    fe6e:	|      addq.l #4,sp
	return BR_CONTINUE;
    fe70:	|      moveq #2,d0
}
    fe72:	'----> rts

0000fe74 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fe74:	       movea.l 8(sp),a0
    fe78:	       movea.l 24(a0),a0
    fe7c:	       movea.l 8(a0),a0
    fe80:	       move.l (a0),d0
    fe82:	       moveq #6,d1
    fe84:	       cmp.l d0,d1
    fe86:	   ,-- beq.s fe9c <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    fe88:	   |   pea 1a120 <PutChar+0x1d44>
    fe8e:	   |   jsr 1793a <KPrintF>
    fe94:	   |   addq.l #4,sp
		return BR_ERROR;
    fe96:	   |   moveq #1,d0
    fe98:	,--|-- bra.w ff2a <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fe9c:	|  '-> movea.l 8(sp),a0
    fea0:	|      movea.l 24(a0),a0
    fea4:	|      movea.l 8(a0),a0
    fea8:	|      move.l 4(a0),d0
    feac:	|      move.l d0,d1
    feae:	|      movea.l 8(sp),a0
    feb2:	|      move.l 24(a0),d0
    feb6:	|      move.l d1,-(sp)
    feb8:	|      move.l d0,-(sp)
    feba:	|      jsr 14696 <addVarToStack>
    fec0:	|      addq.l #8,sp
    fec2:	|      tst.w d0
    fec4:	|  ,-- bne.s feca <builtIn_pushToStack+0x56>
		return BR_ERROR;
    fec6:	|  |   moveq #1,d0
    fec8:	+--|-- bra.s ff2a <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    feca:	|  '-> movea.l 8(sp),a0
    fece:	|      movea.l 24(a0),a0
    fed2:	|      movea.l 8(a0),a0
    fed6:	|      movea.l 4(a0),a0
    feda:	|      movea.l (a0),a0
    fedc:	|      move.l 8(a0),d0
    fee0:	|  ,-- bne.s ff08 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fee2:	|  |   movea.l 8(sp),a0
    fee6:	|  |   movea.l 24(a0),a0
    feea:	|  |   movea.l 8(a0),a0
    feee:	|  |   movea.l 4(a0),a1
    fef2:	|  |   movea.l 8(sp),a0
    fef6:	|  |   movea.l 24(a0),a0
    fefa:	|  |   movea.l 8(a0),a0
    fefe:	|  |   movea.l 4(a0),a0
    ff02:	|  |   move.l (a1),d0
    ff04:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    ff08:	|  '-> moveq #24,d0
    ff0a:	|      add.l 8(sp),d0
    ff0e:	|      move.l d0,-(sp)
    ff10:	|      jsr 157de <trimStack>
    ff16:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ff18:	|      moveq #24,d0
    ff1a:	|      add.l 8(sp),d0
    ff1e:	|      move.l d0,-(sp)
    ff20:	|      jsr 157de <trimStack>
    ff26:	|      addq.l #4,sp
	return BR_CONTINUE;
    ff28:	|      moveq #2,d0
}
    ff2a:	'----> rts

0000ff2c <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ff2c:	             movea.l 8(sp),a0
    ff30:	             movea.l 24(a0),a0
    ff34:	             movea.l 8(a0),a0
    ff38:	             move.l (a0),d0
    ff3a:	             moveq #6,d1
    ff3c:	             cmp.l d0,d1
    ff3e:	         ,-- beq.s ff54 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    ff40:	         |   pea 1a120 <PutChar+0x1d44>
    ff46:	         |   jsr 1793a <KPrintF>
    ff4c:	         |   addq.l #4,sp
		return BR_ERROR;
    ff4e:	         |   moveq #1,d0
    ff50:	,--------|-- bra.w 10042 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    ff54:	|        '-> movea.l 8(sp),a0
    ff58:	|            movea.l 24(a0),a0
    ff5c:	|            movea.l 8(a0),a0
    ff60:	|            movea.l 4(a0),a0
    ff64:	|            move.l (a0),d0
    ff66:	|     ,----- bne.s ffc0 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    ff68:	|     |      movea.l 8(sp),a0
    ff6c:	|     |      movea.l 24(a0),a0
    ff70:	|     |      movea.l 8(a0),a0
    ff74:	|     |      move.l 4(a0),d0
    ff78:	|     |      move.l d0,d1
    ff7a:	|     |      movea.l 8(sp),a0
    ff7e:	|     |      move.l 24(a0),d0
    ff82:	|     |      move.l d1,-(sp)
    ff84:	|     |      move.l d0,-(sp)
    ff86:	|     |      jsr 14696 <addVarToStack>
    ff8c:	|     |      addq.l #8,sp
    ff8e:	|     |      tst.w d0
    ff90:	|     |  ,-- bne.s ff98 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    ff92:	|     |  |   moveq #1,d0
    ff94:	+-----|--|-- bra.w 10042 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    ff98:	|     |  '-> movea.l 8(sp),a0
    ff9c:	|     |      movea.l 24(a0),a0
    ffa0:	|     |      movea.l 8(a0),a0
    ffa4:	|     |      movea.l 4(a0),a1
    ffa8:	|     |      movea.l 8(sp),a0
    ffac:	|     |      movea.l 24(a0),a0
    ffb0:	|     |      movea.l 8(a0),a0
    ffb4:	|     |      movea.l 4(a0),a0
    ffb8:	|     |      move.l (a1),d0
    ffba:	|     |      move.l d0,4(a0)
    ffbe:	|  ,--|----- bra.s 10020 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    ffc0:	|  |  '----> movea.l 8(sp),a0
    ffc4:	|  |         movea.l 24(a0),a0
    ffc8:	|  |         movea.l 8(a0),a0
    ffcc:	|  |         movea.l 4(a0),a0
    ffd0:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    ffd4:	|  |         move.l d0,d1
    ffd6:	|  |         addq.l #8,d1
    ffd8:	|  |         movea.l 8(sp),a0
    ffdc:	|  |         move.l 24(a0),d0
    ffe0:	|  |         move.l d1,-(sp)
    ffe2:	|  |         move.l d0,-(sp)
    ffe4:	|  |         jsr 14696 <addVarToStack>
    ffea:	|  |         addq.l #8,sp
    ffec:	|  |         tst.w d0
    ffee:	|  |     ,-- bne.s fff4 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    fff0:	|  |     |   moveq #1,d0
    fff2:	+--|-----|-- bra.s 10042 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    fff4:	|  |     '-> movea.l 8(sp),a0
    fff8:	|  |         movea.l 24(a0),a0
    fffc:	|  |         movea.l 8(a0),a0
   10000:	|  |         movea.l 4(a0),a0
   10004:	|  |         movea.l 4(a0),a1
   10008:	|  |         movea.l 8(sp),a0
   1000c:	|  |         movea.l 24(a0),a0
   10010:	|  |         movea.l 8(a0),a0
   10014:	|  |         movea.l 4(a0),a0
   10018:	|  |         move.l 8(a1),d0
   1001c:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
   10020:	|  '-------> moveq #24,d0
   10022:	|            add.l 8(sp),d0
   10026:	|            move.l d0,-(sp)
   10028:	|            jsr 157de <trimStack>
   1002e:	|            addq.l #4,sp
	trimStack (&fun -> stack);
   10030:	|            moveq #24,d0
   10032:	|            add.l 8(sp),d0
   10036:	|            move.l d0,-(sp)
   10038:	|            jsr 157de <trimStack>
   1003e:	|            addq.l #4,sp
	return BR_CONTINUE;
   10040:	|            moveq #2,d0
}
   10042:	'----------> rts

00010044 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
   10044:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   10046:	       movea.l 12(sp),a0
   1004a:	       movea.l 24(a0),a0
   1004e:	       movea.l 8(a0),a0
   10052:	       move.l (a0),d0
   10054:	       moveq #6,d1
   10056:	       cmp.l d0,d1
   10058:	   ,-- beq.s 1006e <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
   1005a:	   |   pea 1a107 <PutChar+0x1d2b>
   10060:	   |   jsr 1793a <KPrintF>
   10066:	   |   addq.l #4,sp
		return BR_ERROR;
   10068:	   |   moveq #1,d0
   1006a:	,--|-- bra.w 10104 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
   1006e:	|  '-> movea.l 12(sp),a0
   10072:	|      movea.l 24(a0),a0
   10076:	|      movea.l 8(a0),a0
   1007a:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   1007e:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
   10080:	|      movea.l 12(sp),a0
   10084:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   10088:	|      clr.l -(sp)
   1008a:	|      move.l d1,-(sp)
   1008c:	|      move.l d0,-(sp)
   1008e:	|      jsr 14a36 <deleteVarFromStack>
   10094:	|      lea 12(sp),sp
   10098:	|      move.l d0,d1
   1009a:	|      moveq #28,d0
   1009c:	|      add.l 12(sp),d0
   100a0:	|      move.l d1,-(sp)
   100a2:	|      pea 1 <_start+0x1>
   100a6:	|      move.l d0,-(sp)
   100a8:	|      jsr 1574c <setVariable>
   100ae:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
   100b2:	|      movea.l 12(sp),a0
   100b6:	|      movea.l 24(a0),a0
   100ba:	|      movea.l 8(a0),a0
   100be:	|      movea.l 4(a0),a0
   100c2:	|      move.l (a0),d0
   100c4:	|      movea.l 12(sp),a0
   100c8:	|      movea.l 24(a0),a0
   100cc:	|      movea.l 8(a0),a0
   100d0:	|      movea.l 4(a0),a2
   100d4:	|      move.l d0,-(sp)
   100d6:	|      jsr 15796 <stackFindLast>
   100dc:	|      addq.l #4,sp
   100de:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
   100e2:	|      moveq #24,d0
   100e4:	|      add.l 12(sp),d0
   100e8:	|      move.l d0,-(sp)
   100ea:	|      jsr 157de <trimStack>
   100f0:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   100f2:	|      moveq #24,d0
   100f4:	|      add.l 12(sp),d0
   100f8:	|      move.l d0,-(sp)
   100fa:	|      jsr 157de <trimStack>
   10100:	|      addq.l #4,sp
	return BR_CONTINUE;
   10102:	|      moveq #2,d0
}
   10104:	'----> movea.l (sp)+,a2
   10106:	       rts

00010108 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
   10108:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
   1010a:	       movea.l 12(sp),a0
   1010e:	       movea.l 24(a0),a0
   10112:	       movea.l 8(a0),a0
   10116:	       move.l (a0),d0
   10118:	       moveq #6,d1
   1011a:	       cmp.l d0,d1
   1011c:	   ,-- beq.s 10132 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
   1011e:	   |   pea 1a107 <PutChar+0x1d2b>
   10124:	   |   jsr 1793a <KPrintF>
   1012a:	   |   addq.l #4,sp
		return BR_ERROR;
   1012c:	   |   moveq #1,d0
   1012e:	,--|-- bra.w 101ca <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
   10132:	|  '-> movea.l 12(sp),a0
   10136:	|      movea.l 24(a0),a0
   1013a:	|      movea.l 8(a0),a0
   1013e:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   10142:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
   10144:	|      movea.l 12(sp),a0
   10148:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
   1014c:	|      pea 1 <_start+0x1>
   10150:	|      move.l d1,-(sp)
   10152:	|      move.l d0,-(sp)
   10154:	|      jsr 14a36 <deleteVarFromStack>
   1015a:	|      lea 12(sp),sp
   1015e:	|      move.l d0,d1
   10160:	|      moveq #28,d0
   10162:	|      add.l 12(sp),d0
   10166:	|      move.l d1,-(sp)
   10168:	|      pea 1 <_start+0x1>
   1016c:	|      move.l d0,-(sp)
   1016e:	|      jsr 1574c <setVariable>
   10174:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
   10178:	|      movea.l 12(sp),a0
   1017c:	|      movea.l 24(a0),a0
   10180:	|      movea.l 8(a0),a0
   10184:	|      movea.l 4(a0),a0
   10188:	|      move.l (a0),d0
   1018a:	|      movea.l 12(sp),a0
   1018e:	|      movea.l 24(a0),a0
   10192:	|      movea.l 8(a0),a0
   10196:	|      movea.l 4(a0),a2
   1019a:	|      move.l d0,-(sp)
   1019c:	|      jsr 15796 <stackFindLast>
   101a2:	|      addq.l #4,sp
   101a4:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
   101a8:	|      moveq #24,d0
   101aa:	|      add.l 12(sp),d0
   101ae:	|      move.l d0,-(sp)
   101b0:	|      jsr 157de <trimStack>
   101b6:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   101b8:	|      moveq #24,d0
   101ba:	|      add.l 12(sp),d0
   101be:	|      move.l d0,-(sp)
   101c0:	|      jsr 157de <trimStack>
   101c6:	|      addq.l #4,sp
	return BR_CONTINUE;
   101c8:	|      moveq #2,d0
} 
   101ca:	'----> movea.l (sp)+,a2
   101cc:	       rts

000101ce <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   101ce:	       movea.l 8(sp),a0
   101d2:	       movea.l 24(a0),a0
   101d6:	       move.l (a0),d0
   101d8:	       moveq #6,d1
   101da:	       cmp.l d0,d1
   101dc:	   ,-- beq.s 101f0 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
   101de:	   |   pea 1a107 <PutChar+0x1d2b>
   101e4:	   |   jsr 1793a <KPrintF>
   101ea:	   |   addq.l #4,sp
		return BR_ERROR;
   101ec:	   |   moveq #1,d0
   101ee:	,--|-- bra.s 1025a <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   101f0:	|  '-> movea.l 8(sp),a0
   101f4:	|      movea.l 24(a0),a0
   101f8:	|      movea.l 4(a0),a0
   101fc:	|      move.l (a0),d0
   101fe:	|  ,-- bne.s 10212 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
   10200:	|  |   pea 1a138 <PutChar+0x1d5c>
   10206:	|  |   jsr 1793a <KPrintF>
   1020c:	|  |   addq.l #4,sp
		return BR_ERROR;
   1020e:	|  |   moveq #1,d0
   10210:	+--|-- bra.s 1025a <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   10212:	|  '-> moveq #28,d0
   10214:	|      add.l 8(sp),d0
   10218:	|      movea.l 8(sp),a0
   1021c:	|      movea.l 24(a0),a0
   10220:	|      movea.l 4(a0),a0
   10224:	|      move.l (a0),d1
   10226:	|      move.l d0,-(sp)
   10228:	|      move.l d1,-(sp)
   1022a:	|      jsr 15314 <copyVariable>
   10230:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
   10232:	|      movea.l 8(sp),a0
   10236:	|      movea.l 24(a0),a0
   1023a:	|      move.l 4(a0),d0
   1023e:	|      move.l d0,-(sp)
   10240:	|      jsr 157de <trimStack>
   10246:	|      addq.l #4,sp
	trimStack (&fun -> stack);
   10248:	|      moveq #24,d0
   1024a:	|      add.l 8(sp),d0
   1024e:	|      move.l d0,-(sp)
   10250:	|      jsr 157de <trimStack>
   10256:	|      addq.l #4,sp
	return BR_CONTINUE;
   10258:	|      moveq #2,d0
}
   1025a:	'----> rts

0001025c <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   1025c:	       movea.l 8(sp),a0
   10260:	       movea.l 24(a0),a0
   10264:	       move.l (a0),d0
   10266:	       moveq #6,d1
   10268:	       cmp.l d0,d1
   1026a:	   ,-- beq.s 1027e <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
   1026c:	   |   pea 1a107 <PutChar+0x1d2b>
   10272:	   |   jsr 1793a <KPrintF>
   10278:	   |   addq.l #4,sp
		return BR_ERROR;
   1027a:	   |   moveq #1,d0
   1027c:	,--|-- bra.s 102d2 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   1027e:	|  '-> movea.l 8(sp),a0
   10282:	|      movea.l 24(a0),a0
   10286:	|      movea.l 4(a0),a0
   1028a:	|      move.l (a0),d0
   1028c:	|  ,-- bne.s 102a0 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
   1028e:	|  |   pea 1a138 <PutChar+0x1d5c>
   10294:	|  |   jsr 1793a <KPrintF>
   1029a:	|  |   addq.l #4,sp
		return BR_ERROR;
   1029c:	|  |   moveq #1,d0
   1029e:	+--|-- bra.s 102d2 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   102a0:	|  '-> moveq #28,d0
   102a2:	|      add.l 8(sp),d0
   102a6:	|      movea.l 8(sp),a0
   102aa:	|      movea.l 24(a0),a0
   102ae:	|      movea.l 4(a0),a0
   102b2:	|      move.l (a0),d1
   102b4:	|      move.l d0,-(sp)
   102b6:	|      move.l d1,-(sp)
   102b8:	|      jsr 15314 <copyVariable>
   102be:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   102c0:	|      moveq #24,d0
   102c2:	|      add.l 8(sp),d0
   102c6:	|      move.l d0,-(sp)
   102c8:	|      jsr 157de <trimStack>
   102ce:	|      addq.l #4,sp
	return BR_CONTINUE;
   102d0:	|      moveq #2,d0
}
   102d2:	'----> rts

000102d4 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   102d4:	       movea.l 8(sp),a0
   102d8:	       movea.l 24(a0),a0
   102dc:	       move.l (a0),d0
   102de:	       moveq #6,d1
   102e0:	       cmp.l d0,d1
   102e2:	   ,-- beq.s 102f6 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
   102e4:	   |   pea 1a107 <PutChar+0x1d2b>
   102ea:	   |   jsr 1793a <KPrintF>
   102f0:	   |   addq.l #4,sp
		return BR_ERROR;
   102f2:	   |   moveq #1,d0
   102f4:	,--|-- bra.s 1034c <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   102f6:	|  '-> movea.l 8(sp),a0
   102fa:	|      movea.l 24(a0),a0
   102fe:	|      movea.l 4(a0),a0
   10302:	|      move.l (a0),d0
   10304:	|  ,-- bne.s 10318 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
   10306:	|  |   pea 1a138 <PutChar+0x1d5c>
   1030c:	|  |   jsr 1793a <KPrintF>
   10312:	|  |   addq.l #4,sp
		return BR_ERROR;
   10314:	|  |   moveq #1,d0
   10316:	+--|-- bra.s 1034c <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
   10318:	|  '-> moveq #28,d0
   1031a:	|      add.l 8(sp),d0
   1031e:	|      movea.l 8(sp),a0
   10322:	|      movea.l 24(a0),a0
   10326:	|      movea.l 4(a0),a0
   1032a:	|      move.l 4(a0),d1
   1032e:	|      move.l d0,-(sp)
   10330:	|      move.l d1,-(sp)
   10332:	|      jsr 15314 <copyVariable>
   10338:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   1033a:	|      moveq #24,d0
   1033c:	|      add.l 8(sp),d0
   10340:	|      move.l d0,-(sp)
   10342:	|      jsr 157de <trimStack>
   10348:	|      addq.l #4,sp
	return BR_CONTINUE;
   1034a:	|      moveq #2,d0
}
   1034c:	'----> rts

0001034e <builtIn_random>:

builtIn(random)
{
   1034e:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
   10350:	       movea.l 12(sp),a0
   10354:	       move.l 24(a0),d0
   10358:	       move.l d0,-(sp)
   1035a:	       pea 1 <_start+0x1>
   1035e:	       move.l sp,d0
   10360:	       addq.l #8,d0
   10362:	       move.l d0,-(sp)
   10364:	       jsr 14e5a <getValueType>
   1036a:	       lea 12(sp),sp
   1036e:	       tst.w d0
   10370:	   ,-- bne.s 10376 <builtIn_random+0x28>
		return BR_ERROR;
   10372:	   |   moveq #1,d0
   10374:	,--|-- bra.s 103c0 <builtIn_random+0x72>

	trimStack (&fun -> stack);
   10376:	|  '-> moveq #24,d0
   10378:	|      add.l 12(sp),d0
   1037c:	|      move.l d0,-(sp)
   1037e:	|      jsr 157de <trimStack>
   10384:	|      addq.l #4,sp
	if (num <= 0) num = 1;
   10386:	|      move.l (sp),d0
   10388:	|  ,-- bgt.s 1038e <builtIn_random+0x40>
   1038a:	|  |   moveq #1,d0
   1038c:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
   1038e:	|  '-> jsr 164fa <rand>
   10394:	|      move.l d0,d1
   10396:	|      move.l (sp),d0
   10398:	|      move.l d0,-(sp)
   1039a:	|      move.l d1,-(sp)
   1039c:	|      jsr 183a0 <__umodsi3>
   103a2:	|      addq.l #8,sp
   103a4:	|      move.l d0,d1
   103a6:	|      moveq #28,d0
   103a8:	|      add.l 12(sp),d0
   103ac:	|      move.l d1,-(sp)
   103ae:	|      pea 1 <_start+0x1>
   103b2:	|      move.l d0,-(sp)
   103b4:	|      jsr 1574c <setVariable>
   103ba:	|      lea 12(sp),sp
	return BR_CONTINUE;
   103be:	|      moveq #2,d0
}
   103c0:	'----> addq.l #4,sp
   103c2:	       rts

000103c4 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
   103c4:	nop
   103c6:	rts

000103c8 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
   103c8:	moveq #2,d0
}
   103ca:	rts

000103cc <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
   103cc:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
   103ce:	       movea.l 12(sp),a0
   103d2:	       move.l 24(a0),d0
   103d6:	       move.l d0,-(sp)
   103d8:	       pea 1 <_start+0x1>
   103dc:	       move.l sp,d0
   103de:	       addq.l #8,d0
   103e0:	       move.l d0,-(sp)
   103e2:	       jsr 14e5a <getValueType>
   103e8:	       lea 12(sp),sp
   103ec:	       tst.w d0
   103ee:	   ,-- bne.s 10402 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
   103f0:	   |   pea 1a14b <PutChar+0x1d6f>
   103f6:	   |   jsr 1793a <KPrintF>
   103fc:	   |   addq.l #4,sp
		return BR_ERROR;
   103fe:	   |   moveq #1,d0
   10400:	,--|-- bra.s 10442 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
   10402:	|  '-> moveq #24,d0
   10404:	|      add.l 12(sp),d0
   10408:	|      move.l d0,-(sp)
   1040a:	|      jsr 157de <trimStack>
   10410:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
   10412:	|      move.l (sp),d0
   10414:	|      move.l d0,d0
   10416:	|      move.w d0,1d096 <textPaletteIndex>

	if( textPaletteIndex > 31) {
   1041c:	|      move.w 1d096 <textPaletteIndex>,d0
   10422:	|      cmpi.w #31,d0
   10426:	|  ,-- bls.s 10440 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
   10428:	|  |   pea 1a172 <PutChar+0x1d96>
   1042e:	|  |   jsr 1793a <KPrintF>
   10434:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
   10436:	|  |   clr.w 1d096 <textPaletteIndex>
		return BR_ERROR;
   1043c:	|  |   moveq #1,d0
   1043e:	+--|-- bra.s 10442 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
   10440:	|  '-> moveq #2,d0
}
   10442:	'----> addq.l #4,sp
   10444:	       rts

00010446 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10446:	moveq #2,d0
}
   10448:	rts

0001044a <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   1044a:	moveq #2,d0
}
   1044c:	rts

0001044e <builtIn_setFont>:


builtIn(setFont)
{
   1044e:	       lea -16(sp),sp
   10452:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10454:	       movea.l 28(sp),a0
   10458:	       move.l 24(a0),d0
   1045c:	       move.l d0,-(sp)
   1045e:	       pea 1 <_start+0x1>
   10462:	       lea 12(sp),a0
   10466:	       move.l a0,-(sp)
   10468:	       jsr 14e5a <getValueType>
   1046e:	       lea 12(sp),sp
   10472:	       tst.w d0
   10474:	   ,-- bne.s 1047c <builtIn_setFont+0x2e>
   10476:	   |   moveq #1,d0
   10478:	,--|-- bra.w 1052a <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
   1047c:	|  '-> moveq #24,d0
   1047e:	|      add.l 28(sp),d0
   10482:	|      move.l d0,-(sp)
   10484:	|      jsr 157de <trimStack>
   1048a:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   1048c:	|      movea.l 28(sp),a0
   10490:	|      move.l 24(a0),d0
   10494:	|      move.l d0,-(sp)
   10496:	|      jsr 15430 <getTextFromAnyVar>
   1049c:	|      addq.l #4,sp
   1049e:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
   104a2:	|  ,-- bne.s 104aa <builtIn_setFont+0x5c>
   104a4:	|  |   moveq #1,d0
   104a6:	+--|-- bra.w 1052a <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
   104aa:	|  '-> moveq #24,d0
   104ac:	|      add.l 28(sp),d0
   104b0:	|      move.l d0,-(sp)
   104b2:	|      jsr 157de <trimStack>
   104b8:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   104ba:	|      movea.l 28(sp),a0
   104be:	|      move.l 24(a0),d0
   104c2:	|      move.l d0,-(sp)
   104c4:	|      pea 5 <_start+0x5>
   104c8:	|      lea 16(sp),a0
   104cc:	|      move.l a0,-(sp)
   104ce:	|      jsr 14e5a <getValueType>
   104d4:	|      lea 12(sp),sp
   104d8:	|      tst.w d0
   104da:	|  ,-- bne.s 104e0 <builtIn_setFont+0x92>
   104dc:	|  |   moveq #1,d0
   104de:	+--|-- bra.s 1052a <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
   104e0:	|  '-> moveq #24,d0
   104e2:	|      add.l 28(sp),d0
   104e6:	|      move.l d0,-(sp)
   104e8:	|      jsr 157de <trimStack>
   104ee:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
   104f0:	|      move.l 4(sp),d1
   104f4:	|      move.l 8(sp),d0
   104f8:	|      move.l d1,-(sp)
   104fa:	|      move.l 20(sp),-(sp)
   104fe:	|      move.l d0,-(sp)
   10500:	|      jsr 15c92 <loadFont>
   10506:	|      lea 12(sp),sp
   1050a:	|      tst.w d0
   1050c:	|  ,-- bne.s 10512 <builtIn_setFont+0xc4>
   1050e:	|  |   moveq #1,d0
   10510:	+--|-- bra.s 1052a <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
   10512:	|  '-> move.l 16(sp),12(sp)
   10518:	|      move.l 1d188 <SysBase>,d0
   1051e:	|      movea.l d0,a6
   10520:	|      movea.l 12(sp),a1
   10524:	|      jsr -690(a6)

    return BR_CONTINUE;
   10528:	|      moveq #2,d0
}
   1052a:	'----> movea.l (sp)+,a6
   1052c:	       lea 16(sp),sp
   10530:	       rts

00010532 <builtIn_inFont>:

builtIn(inFont)
{
   10532:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   10534:	       movea.l 12(sp),a0
   10538:	       move.l 24(a0),d0
   1053c:	       move.l d0,-(sp)
   1053e:	       jsr 15430 <getTextFromAnyVar>
   10544:	       addq.l #4,sp
   10546:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
   10548:	   ,-- bne.s 1054e <builtIn_inFont+0x1c>
   1054a:	   |   moveq #1,d0
   1054c:	,--|-- bra.s 10584 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
   1054e:	|  '-> moveq #24,d0
   10550:	|      add.l 12(sp),d0
   10554:	|      move.l d0,-(sp)
   10556:	|      jsr 157de <trimStack>
   1055c:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
   1055e:	|      move.l (sp),-(sp)
   10560:	|      jsr 15c80 <isInFont>
   10566:	|      addq.l #4,sp
   10568:	|      movea.w d0,a0
   1056a:	|      moveq #28,d0
   1056c:	|      add.l 12(sp),d0
   10570:	|      move.l a0,-(sp)
   10572:	|      pea 1 <_start+0x1>
   10576:	|      move.l d0,-(sp)
   10578:	|      jsr 1574c <setVariable>
   1057e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10582:	|      moveq #2,d0
}
   10584:	'----> addq.l #4,sp
   10586:	       rts

00010588 <builtIn_pasteString>:

builtIn(pasteString)
{
   10588:	       lea -16(sp),sp
   1058c:	       move.l a6,-(sp)
   1058e:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10590:	       movea.l 32(sp),a0
   10594:	       move.l 24(a0),d0
   10598:	       move.l d0,-(sp)
   1059a:	       jsr 15430 <getTextFromAnyVar>
   105a0:	       addq.l #4,sp
   105a2:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   105a6:	       moveq #24,d0
   105a8:	       add.l 32(sp),d0
   105ac:	       move.l d0,-(sp)
   105ae:	       jsr 157de <trimStack>
   105b4:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   105b6:	       movea.l 32(sp),a0
   105ba:	       move.l 24(a0),d0
   105be:	       move.l d0,-(sp)
   105c0:	       pea 1 <_start+0x1>
   105c4:	       lea 20(sp),a0
   105c8:	       move.l a0,-(sp)
   105ca:	       jsr 14e5a <getValueType>
   105d0:	       lea 12(sp),sp
   105d4:	       tst.w d0
   105d6:	   ,-- bne.s 105de <builtIn_pasteString+0x56>
   105d8:	   |   moveq #1,d0
   105da:	,--|-- bra.w 10680 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   105de:	|  '-> moveq #24,d0
   105e0:	|      add.l 32(sp),d0
   105e4:	|      move.l d0,-(sp)
   105e6:	|      jsr 157de <trimStack>
   105ec:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   105ee:	|      movea.l 32(sp),a0
   105f2:	|      move.l 24(a0),d0
   105f6:	|      move.l d0,-(sp)
   105f8:	|      pea 1 <_start+0x1>
   105fc:	|      lea 16(sp),a0
   10600:	|      move.l a0,-(sp)
   10602:	|      jsr 14e5a <getValueType>
   10608:	|      lea 12(sp),sp
   1060c:	|      tst.w d0
   1060e:	|  ,-- bne.s 10614 <builtIn_pasteString+0x8c>
   10610:	|  |   moveq #1,d0
   10612:	+--|-- bra.s 10680 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   10614:	|  '-> moveq #24,d0
   10616:	|      add.l 32(sp),d0
   1061a:	|      move.l d0,-(sp)
   1061c:	|      jsr 157de <trimStack>
   10622:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
   10624:	|      move.l 8(sp),d0
   10628:	|      cmpi.l #65535,d0
   1062e:	|  ,-- bne.s 1064e <builtIn_pasteString+0xc6>
		x = (winWidth - stringWidth(newText)) >> 1;
   10630:	|  |   move.l 1d0dc <winWidth>,d2
   10636:	|  |   move.l 20(sp),-(sp)
   1063a:	|  |   jsr 15f44 <stringWidth>
   10640:	|  |   addq.l #4,sp
   10642:	|  |   move.l d2,d1
   10644:	|  |   sub.l d0,d1
   10646:	|  |   move.l d1,d0
   10648:	|  |   lsr.l #1,d0
   1064a:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   1064e:	|  '-> move.l 12(sp),d1
   10652:	|      move.l 8(sp),d0
   10656:	|      move.l d1,-(sp)
   10658:	|      move.l d0,-(sp)
   1065a:	|      move.l 28(sp),-(sp)
   1065e:	|      jsr 15e66 <pasteStringToBackdrop>
   10664:	|      lea 12(sp),sp
    FreeVec(newText); 
   10668:	|      move.l 20(sp),16(sp)
   1066e:	|      move.l 1d188 <SysBase>,d0
   10674:	|      movea.l d0,a6
   10676:	|      movea.l 16(sp),a1
   1067a:	|      jsr -690(a6)
    return BR_CONTINUE;
   1067e:	|      moveq #2,d0
}
   10680:	'----> move.l (sp)+,d2
   10682:	       movea.l (sp)+,a6
   10684:	       lea 16(sp),sp
   10688:	       rts

0001068a <builtIn_anim>:

builtIn(anim)
{
   1068a:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   1068e:	       moveq #1,d0
   10690:	       cmp.l 16(sp),d0
   10694:	   ,-- blt.s 106aa <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10696:	   |   pea 1a19c <PutChar+0x1dc0>
   1069c:	   |   jsr 1793a <KPrintF>
   106a2:	   |   addq.l #4,sp
		return BR_ERROR;
   106a4:	   |   moveq #1,d0
   106a6:	,--|-- bra.w 10738 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   106aa:	|  '-> moveq #24,d1
   106ac:	|      add.l 20(sp),d1
   106b0:	|      move.l 16(sp),d0
   106b4:	|      subq.l #1,d0
   106b6:	|      move.l d1,-(sp)
   106b8:	|      move.l d0,-(sp)
   106ba:	|      jsr 9cbc <createPersonaAnim>
   106c0:	|      addq.l #8,sp
   106c2:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   106c6:	|      movea.l 20(sp),a0
   106ca:	|      move.l 24(a0),d0
   106ce:	|      move.l d0,-(sp)
   106d0:	|      pea 5 <_start+0x5>
   106d4:	|      lea 8(sp),a0
   106d8:	|      move.l a0,-(sp)
   106da:	|      jsr 14e5a <getValueType>
   106e0:	|      lea 12(sp),sp
   106e4:	|      tst.w d0
   106e6:	|  ,-- bne.s 106ec <builtIn_anim+0x62>
   106e8:	|  |   moveq #1,d0
   106ea:	+--|-- bra.s 10738 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   106ec:	|  '-> moveq #24,d0
   106ee:	|      add.l 20(sp),d0
   106f2:	|      move.l d0,-(sp)
   106f4:	|      jsr 157de <trimStack>
   106fa:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   106fc:	|      move.l (sp),d0
   106fe:	|      move.l d0,-(sp)
   10700:	|      jsr 1665c <loadBankForAnim>
   10706:	|      addq.l #4,sp
   10708:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   1070c:	|  ,-- bne.s 10712 <builtIn_anim+0x88>
   1070e:	|  |   moveq #1,d0
   10710:	+--|-- bra.s 10738 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   10712:	|  '-> move.l 4(sp),-(sp)
   10716:	|      move.l 12(sp),-(sp)
   1071a:	|      jsr bbc8 <setBankFile>
   10720:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10722:	|      moveq #28,d0
   10724:	|      add.l 20(sp),d0
   10728:	|      move.l 8(sp),-(sp)
   1072c:	|      move.l d0,-(sp)
   1072e:	|      jsr 15708 <newAnimationVariable>
   10734:	|      addq.l #8,sp
	return BR_CONTINUE;
   10736:	|      moveq #2,d0
}
   10738:	'----> lea 12(sp),sp
   1073c:	       rts

0001073e <builtIn_costume>:

builtIn(costume)
{
   1073e:	          lea -32(sp),sp
   10742:	          move.l a6,-(sp)
   10744:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10746:	          moveq #8,d0
   10748:	          move.l d0,32(sp)
   1074c:	          clr.l 28(sp)
   10750:	          move.l 1d188 <SysBase>,d0
   10756:	          movea.l d0,a6
   10758:	          move.l 32(sp),d0
   1075c:	          move.l 28(sp),d1
   10760:	          jsr -684(a6)
   10764:	          move.l d0,24(sp)
   10768:	          move.l 24(sp),d0
   1076c:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   10770:	      ,-- bne.s 10778 <builtIn_costume+0x3a>
   10772:	      |   moveq #1,d0
   10774:	,-----|-- bra.w 10860 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   10778:	|     '-> move.l 44(sp),d0
   1077c:	|         pea 3 <_start+0x3>
   10780:	|         move.l d0,-(sp)
   10782:	|         jsr 18344 <__divsi3>
   10788:	|         addq.l #8,sp
   1078a:	|         movea.l 20(sp),a0
   1078e:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10792:	|         tst.l 44(sp)
   10796:	|     ,-- beq.s 107ac <builtIn_costume+0x6e>
   10798:	|     |   movea.l 20(sp),a0
   1079c:	|     |   move.l 4(a0),d1
   107a0:	|     |   move.l d1,d0
   107a2:	|     |   add.l d0,d0
   107a4:	|     |   add.l d1,d0
   107a6:	|     |   cmp.l 44(sp),d0
   107aa:	|  ,--|-- beq.s 107c0 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   107ac:	|  |  '-> pea 1a1d6 <PutChar+0x1dfa>
   107b2:	|  |      jsr 1793a <KPrintF>
   107b8:	|  |      addq.l #4,sp
        return BR_ERROR;
   107ba:	|  |      moveq #1,d0
   107bc:	+--|----- bra.w 10860 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   107c0:	|  '----> move.l 44(sp),d0
   107c4:	|         add.l d0,d0
   107c6:	|         add.l d0,d0
   107c8:	|         move.l d0,16(sp)
   107cc:	|         clr.l 12(sp)
   107d0:	|         move.l 1d188 <SysBase>,d0
   107d6:	|         movea.l d0,a6
   107d8:	|         move.l 16(sp),d0
   107dc:	|         move.l 12(sp),d1
   107e0:	|         jsr -684(a6)
   107e4:	|         move.l d0,8(sp)
   107e8:	|         move.l 8(sp),d0
   107ec:	|         movea.l 20(sp),a0
   107f0:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   107f2:	|         movea.l 20(sp),a0
   107f6:	|         move.l (a0),d0
   107f8:	|     ,-- bne.s 107fe <builtIn_costume+0xc0>
   107fa:	|     |   moveq #1,d0
   107fc:	+-----|-- bra.s 10860 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   107fe:	|     '-> move.l 44(sp),d0
   10802:	|         subq.l #1,d0
   10804:	|         move.l d0,36(sp)
   10808:	|     ,-- bra.s 10844 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   1080a:	|  ,--|-> movea.l 48(sp),a0
   1080e:	|  |  |   move.l 24(a0),d0
   10812:	|  |  |   movea.l 20(sp),a0
   10816:	|  |  |   movea.l (a0),a0
   10818:	|  |  |   move.l 36(sp),d1
   1081c:	|  |  |   add.l d1,d1
   1081e:	|  |  |   add.l d1,d1
   10820:	|  |  |   lea (0,a0,d1.l),a2
   10824:	|  |  |   move.l d0,-(sp)
   10826:	|  |  |   jsr 15332 <getAnimationFromVar>
   1082c:	|  |  |   addq.l #4,sp
   1082e:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10830:	|  |  |   moveq #24,d0
   10832:	|  |  |   add.l 48(sp),d0
   10836:	|  |  |   move.l d0,-(sp)
   10838:	|  |  |   jsr 157de <trimStack>
   1083e:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10840:	|  |  |   subq.l #1,36(sp)
   10844:	|  |  '-> tst.l 36(sp)
   10848:	|  '----- bge.s 1080a <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   1084a:	|         moveq #28,d0
   1084c:	|         add.l 48(sp),d0
   10850:	|         move.l 20(sp),-(sp)
   10854:	|         move.l d0,-(sp)
   10856:	|         jsr 1572a <newCostumeVariable>
   1085c:	|         addq.l #8,sp
    return BR_CONTINUE;
   1085e:	|         moveq #2,d0
}
   10860:	'-------> movea.l (sp)+,a2
   10862:	          movea.l (sp)+,a6
   10864:	          lea 32(sp),sp
   10868:	          rts

0001086a <builtIn_launch>:

builtIn(launch)
{
   1086a:	          lea -20(sp),sp
   1086e:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   10870:	          movea.l 32(sp),a0
   10874:	          move.l 24(a0),d0
   10878:	          move.l d0,-(sp)
   1087a:	          jsr 15430 <getTextFromAnyVar>
   10880:	          addq.l #4,sp
   10882:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   10886:	      ,-- bne.s 1088e <builtIn_launch+0x24>
   10888:	      |   moveq #1,d0
   1088a:	,-----|-- bra.w 109bc <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   1088e:	|     '-> move.l 20(sp),-(sp)
   10892:	|         jsr 2fe <encodeFilename>
   10898:	|         addq.l #4,sp
   1089a:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   1089e:	|         moveq #24,d0
   108a0:	|         add.l 32(sp),d0
   108a4:	|         move.l d0,-(sp)
   108a6:	|         jsr 157de <trimStack>
   108ac:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   108ae:	|         movea.l 20(sp),a0
   108b2:	|         move.b (a0),d0
   108b4:	|         cmpi.b #104,d0
   108b8:	|  ,----- bne.s 10922 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   108ba:	|  |      movea.l 20(sp),a0
   108be:	|  |      addq.l #1,a0
   108c0:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   108c2:	|  |      cmpi.b #116,d0
   108c6:	|  +----- bne.s 10922 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   108c8:	|  |      movea.l 20(sp),a0
   108cc:	|  |      addq.l #2,a0
   108ce:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   108d0:	|  |      cmpi.b #116,d0
   108d4:	|  +----- bne.s 10922 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   108d6:	|  |      movea.l 20(sp),a0
   108da:	|  |      addq.l #3,a0
   108dc:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   108de:	|  |      cmpi.b #112,d0
   108e2:	|  +----- bne.s 10922 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   108e4:	|  |      movea.l 20(sp),a0
   108e8:	|  |      addq.l #4,a0
   108ea:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   108ec:	|  |      cmpi.b #58,d0
   108f0:	|  |  ,-- beq.s 1090e <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   108f2:	|  |  |   movea.l 20(sp),a0
   108f6:	|  |  |   addq.l #4,a0
   108f8:	|  |  |   move.b (a0),d0
   108fa:	|  |  |   cmpi.b #115,d0
   108fe:	|  +--|-- bne.s 10922 <builtIn_launch+0xb8>
   10900:	|  |  |   movea.l 20(sp),a0
   10904:	|  |  |   addq.l #5,a0
   10906:	|  |  |   move.b (a0),d0
   10908:	|  |  |   cmpi.b #58,d0
   1090c:	|  +--|-- bne.s 10922 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   1090e:	|  |  '-> move.l 20(sp),-(sp)
   10912:	|  |      jsr b8 <copyString>
   10918:	|  |      addq.l #4,sp
   1091a:	|  |      move.l d0,1d246 <launchMe>
   10920:	|  |  ,-- bra.s 10974 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10922:	|  '--|-> move.l 1d0f0 <gamePath>,d0
   10928:	|     |   pea 1a221 <PutChar+0x1e45>
   1092e:	|     |   move.l d0,-(sp)
   10930:	|     |   jsr 14386 <joinStrings>
   10936:	|     |   addq.l #8,sp
   10938:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   1093c:	|     |   move.l 16(sp),-(sp)
   10940:	|     |   move.l 16(sp),-(sp)
   10944:	|     |   jsr 14386 <joinStrings>
   1094a:	|     |   addq.l #8,sp
   1094c:	|     |   move.l d0,1d246 <launchMe>
        FreeVec(newText);
   10952:	|     |   move.l 16(sp),8(sp)
   10958:	|     |   move.l 1d188 <SysBase>,d0
   1095e:	|     |   movea.l d0,a6
   10960:	|     |   movea.l 8(sp),a1
   10964:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   10968:	|     |   move.l 1d246 <launchMe>,d0
   1096e:	|     +-- bne.s 10974 <builtIn_launch+0x10a>
   10970:	|     |   moveq #1,d0
   10972:	+-----|-- bra.s 109bc <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   10974:	|     '-> move.l 20(sp),4(sp)
   1097a:	|         move.l 1d188 <SysBase>,d0
   10980:	|         movea.l d0,a6
   10982:	|         movea.l 4(sp),a1
   10986:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   1098a:	|         clr.l -(sp)
   1098c:	|         jsr 4fc0 <setGraphicsWindow>
   10992:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   10994:	|         moveq #28,d0
   10996:	|         add.l 32(sp),d0
   1099a:	|         pea 1 <_start+0x1>
   1099e:	|         pea 1 <_start+0x1>
   109a2:	|         move.l d0,-(sp)
   109a4:	|         jsr 1574c <setVariable>
   109aa:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   109ae:	|         moveq #28,d0
   109b0:	|         add.l 32(sp),d0
   109b4:	|         move.l d0,1d24a <launchResult>

    return BR_KEEP_AND_PAUSE;
   109ba:	|         moveq #0,d0
}
   109bc:	'-------> movea.l (sp)+,a6
   109be:	          lea 20(sp),sp
   109c2:	          rts

000109c4 <builtIn_pause>:

builtIn(pause)
{
   109c4:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109c6:	       movea.l 12(sp),a0
   109ca:	       move.l 24(a0),d0
   109ce:	       move.l d0,-(sp)
   109d0:	       pea 1 <_start+0x1>
   109d4:	       move.l sp,d0
   109d6:	       addq.l #8,d0
   109d8:	       move.l d0,-(sp)
   109da:	       jsr 14e5a <getValueType>
   109e0:	       lea 12(sp),sp
   109e4:	       tst.w d0
   109e6:	   ,-- bne.s 109ec <builtIn_pause+0x28>
   109e8:	   |   moveq #1,d0
   109ea:	,--|-- bra.s 10a1a <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   109ec:	|  '-> moveq #24,d0
   109ee:	|      add.l 12(sp),d0
   109f2:	|      move.l d0,-(sp)
   109f4:	|      jsr 157de <trimStack>
   109fa:	|      addq.l #4,sp
	if (theTime > 0) {
   109fc:	|      move.l (sp),d0
   109fe:	|  ,-- ble.s 10a18 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   10a00:	|  |   move.l (sp),d0
   10a02:	|  |   subq.l #1,d0
   10a04:	|  |   movea.l 12(sp),a0
   10a08:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   10a0c:	|  |   movea.l 12(sp),a0
   10a10:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   10a14:	|  |   moveq #0,d0
   10a16:	+--|-- bra.s 10a1a <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   10a18:	|  '-> moveq #2,d0
}
   10a1a:	'----> addq.l #4,sp
   10a1c:	       rts

00010a1e <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   10a1e:	jsr 5754 <completeTimers>
	return BR_CONTINUE;
   10a24:	moveq #2,d0
}
   10a26:	rts

00010a28 <builtIn_callEvent>:

builtIn(callEvent)
{
   10a28:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a2c:	       movea.l 20(sp),a0
   10a30:	       move.l 24(a0),d0
   10a34:	       move.l d0,-(sp)
   10a36:	       pea 7 <_start+0x7>
   10a3a:	       lea 8(sp),a0
   10a3e:	       move.l a0,-(sp)
   10a40:	       jsr 14e5a <getValueType>
   10a46:	       lea 12(sp),sp
   10a4a:	       tst.w d0
   10a4c:	   ,-- bne.s 10a54 <builtIn_callEvent+0x2c>
   10a4e:	   |   moveq #1,d0
   10a50:	,--|-- bra.w 10aea <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10a54:	|  '-> moveq #24,d0
   10a56:	|      add.l 20(sp),d0
   10a5a:	|      move.l d0,-(sp)
   10a5c:	|      jsr 157de <trimStack>
   10a62:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a64:	|      movea.l 20(sp),a0
   10a68:	|      move.l 24(a0),d0
   10a6c:	|      move.l d0,-(sp)
   10a6e:	|      pea 7 <_start+0x7>
   10a72:	|      moveq #12,d0
   10a74:	|      add.l sp,d0
   10a76:	|      move.l d0,-(sp)
   10a78:	|      jsr 14e5a <getValueType>
   10a7e:	|      lea 12(sp),sp
   10a82:	|      tst.w d0
   10a84:	|  ,-- bne.s 10a8a <builtIn_callEvent+0x62>
   10a86:	|  |   moveq #1,d0
   10a88:	+--|-- bra.s 10aea <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10a8a:	|  '-> moveq #24,d0
   10a8c:	|      add.l 20(sp),d0
   10a90:	|      move.l d0,-(sp)
   10a92:	|      jsr 157de <trimStack>
   10a98:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10a9a:	|      move.l (sp),d1
   10a9c:	|      move.l 4(sp),d0
   10aa0:	|      move.l d1,-(sp)
   10aa2:	|      move.l d0,-(sp)
   10aa4:	|      jsr dba2 <getCombinationFunction>
   10aaa:	|      addq.l #8,sp
   10aac:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   10ab0:	|  ,-- beq.s 10ad0 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   10ab2:	|  |   moveq #28,d0
   10ab4:	|  |   add.l 20(sp),d0
   10ab8:	|  |   move.l 8(sp),-(sp)
   10abc:	|  |   pea 2 <_start+0x2>
   10ac0:	|  |   move.l d0,-(sp)
   10ac2:	|  |   jsr 1574c <setVariable>
   10ac8:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   10acc:	|  |   moveq #4,d0
   10ace:	+--|-- bra.s 10aea <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   10ad0:	|  '-> moveq #28,d0
   10ad2:	|      add.l 20(sp),d0
   10ad6:	|      clr.l -(sp)
   10ad8:	|      pea 1 <_start+0x1>
   10adc:	|      move.l d0,-(sp)
   10ade:	|      jsr 1574c <setVariable>
   10ae4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10ae8:	|      moveq #2,d0
}
   10aea:	'----> lea 12(sp),sp
   10aee:	       rts

00010af0 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   10af0:	move.w #1,1d256 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   10af8:	moveq #2,d0
}
   10afa:	rts

00010afc <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10afc:	moveq #24,d0
   10afe:	add.l 8(sp),d0
   10b02:	move.l d0,-(sp)
   10b04:	jsr 157de <trimStack>
   10b0a:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   10b0c:	pea 1a223 <PutChar+0x1e47>
   10b12:	jsr 1793a <KPrintF>
   10b18:	addq.l #4,sp
	return BR_CONTINUE;
   10b1a:	moveq #2,d0
}
   10b1c:	rts

00010b1e <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   10b1e:	pea 1a223 <PutChar+0x1e47>
   10b24:	jsr 1793a <KPrintF>
   10b2a:	addq.l #4,sp
	return BR_CONTINUE;
   10b2c:	moveq #2,d0
}
   10b2e:	rts

00010b30 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10b30:	pea 1a223 <PutChar+0x1e47>
   10b36:	jsr 1793a <KPrintF>
   10b3c:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   10b3e:	moveq #2,d0
}
   10b40:	rts

00010b42 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   10b42:	pea 1a223 <PutChar+0x1e47>
   10b48:	jsr 1793a <KPrintF>
   10b4e:	addq.l #4,sp
	return BR_CONTINUE;
   10b50:	moveq #2,d0
}
   10b52:	rts

00010b54 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10b54:	pea 1a223 <PutChar+0x1e47>
   10b5a:	jsr 1793a <KPrintF>
   10b60:	addq.l #4,sp
	return BR_CONTINUE;
   10b62:	moveq #2,d0
}
   10b64:	rts

00010b66 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10b66:	pea 1a223 <PutChar+0x1e47>
   10b6c:	jsr 1793a <KPrintF>
   10b72:	addq.l #4,sp
	return BR_CONTINUE;
   10b74:	moveq #2,d0
}
   10b76:	rts

00010b78 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   10b78:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b7c:	       movea.l 20(sp),a0
   10b80:	       move.l 24(a0),d0
   10b84:	       move.l d0,-(sp)
   10b86:	       pea 1 <_start+0x1>
   10b8a:	       moveq #16,d0
   10b8c:	       add.l sp,d0
   10b8e:	       move.l d0,-(sp)
   10b90:	       jsr 14e5a <getValueType>
   10b96:	       lea 12(sp),sp
   10b9a:	       tst.w d0
   10b9c:	   ,-- bne.s 10ba4 <builtIn_startMusic+0x2c>
   10b9e:	   |   moveq #1,d0
   10ba0:	,--|-- bra.w 10c44 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10ba4:	|  '-> moveq #24,d0
   10ba6:	|      add.l 20(sp),d0
   10baa:	|      move.l d0,-(sp)
   10bac:	|      jsr 157de <trimStack>
   10bb2:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10bb4:	|      movea.l 20(sp),a0
   10bb8:	|      move.l 24(a0),d0
   10bbc:	|      move.l d0,-(sp)
   10bbe:	|      pea 1 <_start+0x1>
   10bc2:	|      moveq #12,d0
   10bc4:	|      add.l sp,d0
   10bc6:	|      move.l d0,-(sp)
   10bc8:	|      jsr 14e5a <getValueType>
   10bce:	|      lea 12(sp),sp
   10bd2:	|      tst.w d0
   10bd4:	|  ,-- bne.s 10bda <builtIn_startMusic+0x62>
   10bd6:	|  |   moveq #1,d0
   10bd8:	+--|-- bra.s 10c44 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10bda:	|  '-> moveq #24,d0
   10bdc:	|      add.l 20(sp),d0
   10be0:	|      move.l d0,-(sp)
   10be2:	|      jsr 157de <trimStack>
   10be8:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10bea:	|      movea.l 20(sp),a0
   10bee:	|      move.l 24(a0),d0
   10bf2:	|      move.l d0,-(sp)
   10bf4:	|      pea 5 <_start+0x5>
   10bf8:	|      lea 8(sp),a0
   10bfc:	|      move.l a0,-(sp)
   10bfe:	|      jsr 14e5a <getValueType>
   10c04:	|      lea 12(sp),sp
   10c08:	|      tst.w d0
   10c0a:	|  ,-- bne.s 10c10 <builtIn_startMusic+0x98>
   10c0c:	|  |   moveq #1,d0
   10c0e:	+--|-- bra.s 10c44 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10c10:	|  '-> moveq #24,d0
   10c12:	|      add.l 20(sp),d0
   10c16:	|      move.l d0,-(sp)
   10c18:	|      jsr 157de <trimStack>
   10c1e:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10c20:	|      movea.l 8(sp),a0
   10c24:	|      move.l 4(sp),d1
   10c28:	|      move.l (sp),d0
   10c2a:	|      move.l a0,-(sp)
   10c2c:	|      move.l d1,-(sp)
   10c2e:	|      move.l d0,-(sp)
   10c30:	|      jsr d7a4 <playMOD>
   10c36:	|      lea 12(sp),sp
   10c3a:	|      tst.w d0
   10c3c:	|  ,-- bne.s 10c42 <builtIn_startMusic+0xca>
   10c3e:	|  |   moveq #2,d0
   10c40:	+--|-- bra.s 10c44 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10c42:	|  '-> moveq #2,d0
}
   10c44:	'----> lea 12(sp),sp
   10c48:	       rts

00010c4a <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10c4a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c4c:	       movea.l 12(sp),a0
   10c50:	       move.l 24(a0),d0
   10c54:	       move.l d0,-(sp)
   10c56:	       pea 1 <_start+0x1>
   10c5a:	       move.l sp,d0
   10c5c:	       addq.l #8,d0
   10c5e:	       move.l d0,-(sp)
   10c60:	       jsr 14e5a <getValueType>
   10c66:	       lea 12(sp),sp
   10c6a:	       tst.w d0
   10c6c:	   ,-- bne.s 10c72 <builtIn_stopMusic+0x28>
   10c6e:	   |   moveq #1,d0
   10c70:	,--|-- bra.s 10c90 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   10c72:	|  '-> moveq #24,d0
   10c74:	|      add.l 12(sp),d0
   10c78:	|      move.l d0,-(sp)
   10c7a:	|      jsr 157de <trimStack>
   10c80:	|      addq.l #4,sp
	stopMOD (v);
   10c82:	|      move.l (sp),d0
   10c84:	|      move.l d0,-(sp)
   10c86:	|      jsr d840 <stopMOD>
   10c8c:	|      addq.l #4,sp
	return BR_CONTINUE;
   10c8e:	|      moveq #2,d0
}
   10c90:	'----> addq.l #4,sp
   10c92:	       rts

00010c94 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   10c94:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c96:	       movea.l 16(sp),a0
   10c9a:	       move.l 24(a0),d0
   10c9e:	       move.l d0,-(sp)
   10ca0:	       pea 1 <_start+0x1>
   10ca4:	       move.l sp,d0
   10ca6:	       addq.l #8,d0
   10ca8:	       move.l d0,-(sp)
   10caa:	       jsr 14e5a <getValueType>
   10cb0:	       lea 12(sp),sp
   10cb4:	       tst.w d0
   10cb6:	   ,-- bne.s 10cbc <builtIn_setMusicVolume+0x28>
   10cb8:	   |   moveq #1,d0
   10cba:	,--|-- bra.s 10d16 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10cbc:	|  '-> moveq #24,d0
   10cbe:	|      add.l 16(sp),d0
   10cc2:	|      move.l d0,-(sp)
   10cc4:	|      jsr 157de <trimStack>
   10cca:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ccc:	|      movea.l 16(sp),a0
   10cd0:	|      move.l 24(a0),d0
   10cd4:	|      move.l d0,-(sp)
   10cd6:	|      pea 1 <_start+0x1>
   10cda:	|      moveq #12,d0
   10cdc:	|      add.l sp,d0
   10cde:	|      move.l d0,-(sp)
   10ce0:	|      jsr 14e5a <getValueType>
   10ce6:	|      lea 12(sp),sp
   10cea:	|      tst.w d0
   10cec:	|  ,-- bne.s 10cf2 <builtIn_setMusicVolume+0x5e>
   10cee:	|  |   moveq #1,d0
   10cf0:	+--|-- bra.s 10d16 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10cf2:	|  '-> moveq #24,d0
   10cf4:	|      add.l 16(sp),d0
   10cf8:	|      move.l d0,-(sp)
   10cfa:	|      jsr 157de <trimStack>
   10d00:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   10d02:	|      move.l (sp),d1
   10d04:	|      move.l 4(sp),d0
   10d08:	|      move.l d1,-(sp)
   10d0a:	|      move.l d0,-(sp)
   10d0c:	|      jsr d826 <setMusicVolume>
   10d12:	|      addq.l #8,sp
	return BR_CONTINUE;
   10d14:	|      moveq #2,d0
}
   10d16:	'----> addq.l #8,sp
   10d18:	       rts

00010d1a <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10d1a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d1c:	       movea.l 12(sp),a0
   10d20:	       move.l 24(a0),d0
   10d24:	       move.l d0,-(sp)
   10d26:	       pea 1 <_start+0x1>
   10d2a:	       move.l sp,d0
   10d2c:	       addq.l #8,d0
   10d2e:	       move.l d0,-(sp)
   10d30:	       jsr 14e5a <getValueType>
   10d36:	       lea 12(sp),sp
   10d3a:	       tst.w d0
   10d3c:	   ,-- bne.s 10d42 <builtIn_setDefaultMusicVolume+0x28>
   10d3e:	   |   moveq #1,d0
   10d40:	,--|-- bra.s 10d60 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10d42:	|  '-> moveq #24,d0
   10d44:	|      add.l 12(sp),d0
   10d48:	|      move.l d0,-(sp)
   10d4a:	|      jsr 157de <trimStack>
   10d50:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10d52:	|      move.l (sp),d0
   10d54:	|      move.l d0,-(sp)
   10d56:	|      jsr d80a <setDefaultMusicVolume>
   10d5c:	|      addq.l #4,sp
	return BR_CONTINUE;
   10d5e:	|      moveq #2,d0
}
   10d60:	'----> addq.l #4,sp
   10d62:	       rts

00010d64 <builtIn_playSound>:

builtIn(playSound)
{
   10d64:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d66:	       movea.l 12(sp),a0
   10d6a:	       move.l 24(a0),d0
   10d6e:	       move.l d0,-(sp)
   10d70:	       pea 5 <_start+0x5>
   10d74:	       move.l sp,d0
   10d76:	       addq.l #8,d0
   10d78:	       move.l d0,-(sp)
   10d7a:	       jsr 14e5a <getValueType>
   10d80:	       lea 12(sp),sp
   10d84:	       tst.w d0
   10d86:	   ,-- bne.s 10d8c <builtIn_playSound+0x28>
   10d88:	   |   moveq #1,d0
   10d8a:	,--|-- bra.s 10db4 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10d8c:	|  '-> moveq #24,d0
   10d8e:	|      add.l 12(sp),d0
   10d92:	|      move.l d0,-(sp)
   10d94:	|      jsr 157de <trimStack>
   10d9a:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   10d9c:	|      move.l (sp),d0
   10d9e:	|      clr.l -(sp)
   10da0:	|      move.l d0,-(sp)
   10da2:	|      jsr d82e <startSound>
   10da8:	|      addq.l #8,sp
   10daa:	|      tst.w d0
   10dac:	|  ,-- bne.s 10db2 <builtIn_playSound+0x4e>
   10dae:	|  |   moveq #2,d0
   10db0:	+--|-- bra.s 10db4 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   10db2:	|  '-> moveq #2,d0
}
   10db4:	'----> addq.l #4,sp
   10db6:	       rts

00010db8 <builtIn_loopSound>:

builtIn(loopSound)
{
   10db8:	             lea -28(sp),sp
   10dbc:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10dbe:	             tst.l 36(sp)
   10dc2:	         ,-- bgt.s 10dd8 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   10dc4:	         |   pea 1a246 <PutChar+0x1e6a>
   10dca:	         |   jsr 1793a <KPrintF>
   10dd0:	         |   addq.l #4,sp
		return BR_ERROR;
   10dd2:	         |   moveq #1,d0
   10dd4:	,--------|-- bra.w 10f94 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   10dd8:	|        '-> moveq #1,d0
   10dda:	|            cmp.l 36(sp),d0
   10dde:	|     ,----- blt.s 10e3a <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10de0:	|     |      movea.l 40(sp),a0
   10de4:	|     |      move.l 24(a0),d0
   10de8:	|     |      move.l d0,-(sp)
   10dea:	|     |      pea 5 <_start+0x5>
   10dee:	|     |      lea 16(sp),a0
   10df2:	|     |      move.l a0,-(sp)
   10df4:	|     |      jsr 14e5a <getValueType>
   10dfa:	|     |      lea 12(sp),sp
   10dfe:	|     |      tst.w d0
   10e00:	|     |  ,-- bne.s 10e08 <builtIn_loopSound+0x50>
   10e02:	|     |  |   moveq #1,d0
   10e04:	+-----|--|-- bra.w 10f94 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10e08:	|     |  '-> moveq #24,d0
   10e0a:	|     |      add.l 40(sp),d0
   10e0e:	|     |      move.l d0,-(sp)
   10e10:	|     |      jsr 157de <trimStack>
   10e16:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10e18:	|     |      move.l 8(sp),d0
   10e1c:	|     |      pea 1 <_start+0x1>
   10e20:	|     |      move.l d0,-(sp)
   10e22:	|     |      jsr d82e <startSound>
   10e28:	|     |      addq.l #8,sp
   10e2a:	|     |      tst.w d0
   10e2c:	|     |  ,-- bne.s 10e34 <builtIn_loopSound+0x7c>
   10e2e:	|     |  |   moveq #2,d0
   10e30:	+-----|--|-- bra.w 10f94 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10e34:	|     |  '-> moveq #2,d0
   10e36:	+-----|----- bra.w 10f94 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10e3a:	|     '----> moveq #2,d1
   10e3c:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10e40:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10e44:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10e48:	|            movea.l 40(sp),a0
   10e4c:	|            movea.l 24(a0),a0
   10e50:	|            move.l (a0),d0
   10e52:	|            moveq #5,d1
   10e54:	|            cmp.l d0,d1
   10e56:	|  ,-------- beq.w 10f2e <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10e5a:	|  |         movea.l 40(sp),a0
   10e5e:	|  |         move.l 24(a0),d0
   10e62:	|  |         move.l d0,-(sp)
   10e64:	|  |         pea 1 <_start+0x1>
   10e68:	|  |         lea 12(sp),a0
   10e6c:	|  |         move.l a0,-(sp)
   10e6e:	|  |         jsr 14e5a <getValueType>
   10e74:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10e78:	|  |         moveq #24,d0
   10e7a:	|  |         add.l 40(sp),d0
   10e7e:	|  |         move.l d0,-(sp)
   10e80:	|  |         jsr 157de <trimStack>
   10e86:	|  |         addq.l #4,sp
			numParams--;
   10e88:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10e8c:	|  +-------- bra.w 10f2e <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10e90:	|  |  ,----> movea.l 40(sp),a0
   10e94:	|  |  |      move.l 24(a0),d0
   10e98:	|  |  |      move.l d0,-(sp)
   10e9a:	|  |  |      pea 5 <_start+0x5>
   10e9e:	|  |  |      lea 16(sp),a0
   10ea2:	|  |  |      move.l a0,-(sp)
   10ea4:	|  |  |      jsr 14e5a <getValueType>
   10eaa:	|  |  |      lea 12(sp),sp
   10eae:	|  |  |      tst.w d0
   10eb0:	|  |  |  ,-- bne.s 10ec6 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   10eb2:	|  |  |  |   pea 1a284 <PutChar+0x1ea8>
   10eb8:	|  |  |  |   jsr 1793a <KPrintF>
   10ebe:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10ec0:	|  |  |  |   moveq #1,d0
   10ec2:	+--|--|--|-- bra.w 10f94 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10ec6:	|  |  |  '-> moveq #20,d0
   10ec8:	|  |  |      move.l d0,20(sp)
   10ecc:	|  |  |      clr.l 16(sp)
   10ed0:	|  |  |      move.l 1d188 <SysBase>,d0
   10ed6:	|  |  |      movea.l d0,a6
   10ed8:	|  |  |      move.l 20(sp),d0
   10edc:	|  |  |      move.l 16(sp),d1
   10ee0:	|  |  |      jsr -684(a6)
   10ee4:	|  |  |      move.l d0,12(sp)
   10ee8:	|  |  |      move.l 12(sp),d0
   10eec:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10ef0:	|  |  |  ,-- bne.s 10ef8 <builtIn_loopSound+0x140>
   10ef2:	|  |  |  |   moveq #1,d0
   10ef4:	+--|--|--|-- bra.w 10f94 <builtIn_loopSound+0x1dc>

			s->next = old;
   10ef8:	|  |  |  '-> movea.l 28(sp),a0
   10efc:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10f02:	|  |  |      movea.l 28(sp),a0
   10f06:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10f0a:	|  |  |      move.l 8(sp),d0
   10f0e:	|  |  |      movea.l 28(sp),a0
   10f12:	|  |  |      move.l d0,(a0)
			old = s;
   10f14:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10f1a:	|  |  |      moveq #24,d0
   10f1c:	|  |  |      add.l 40(sp),d0
   10f20:	|  |  |      move.l d0,-(sp)
   10f22:	|  |  |      jsr 157de <trimStack>
   10f28:	|  |  |      addq.l #4,sp
			numParams--;
   10f2a:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10f2e:	|  '--|----> tst.l 36(sp)
   10f32:	|     '----- bne.w 10e90 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10f36:	|        ,-- bra.s 10f42 <builtIn_loopSound+0x18a>
   10f38:	|     ,--|-> movea.l 28(sp),a0
   10f3c:	|     |  |   move.l 4(a0),28(sp)
   10f42:	|     |  '-> movea.l 28(sp),a0
   10f46:	|     |      move.l 4(a0),d0
   10f4a:	|     '----- bne.s 10f38 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10f4c:	|            move.l 4(sp),d0
   10f50:	|            moveq #1,d1
   10f52:	|            cmp.l d0,d1
   10f54:	|     ,----- bge.s 10f6c <builtIn_loopSound+0x1b4>
			s->next = old;
   10f56:	|     |      movea.l 28(sp),a0
   10f5a:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10f60:	|     |      movea.l 24(sp),a0
   10f64:	|     |      move.l 28(sp),8(a0)
   10f6a:	|     |  ,-- bra.s 10f7c <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10f6c:	|     '--|-> move.l 4(sp),d0
   10f70:	|        +-- beq.s 10f7c <builtIn_loopSound+0x1c4>
			s->next = s;
   10f72:	|        |   movea.l 28(sp),a0
   10f76:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10f7c:	|        '-> movea.l 24(sp),a0
   10f80:	|            moveq #-1,d0
   10f82:	|            move.l d0,16(a0)
		playSoundList(old);
   10f86:	|            move.l 24(sp),-(sp)
   10f8a:	|            jsr d7a8 <playSoundList>
   10f90:	|            addq.l #4,sp
		return BR_CONTINUE;
   10f92:	|            moveq #2,d0
	}
}
   10f94:	'----------> movea.l (sp)+,a6
   10f96:	             lea 28(sp),sp
   10f9a:	             rts

00010f9c <builtIn_stopSound>:

builtIn(stopSound)
{
   10f9c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f9e:	       movea.l 12(sp),a0
   10fa2:	       move.l 24(a0),d0
   10fa6:	       move.l d0,-(sp)
   10fa8:	       pea 5 <_start+0x5>
   10fac:	       move.l sp,d0
   10fae:	       addq.l #8,d0
   10fb0:	       move.l d0,-(sp)
   10fb2:	       jsr 14e5a <getValueType>
   10fb8:	       lea 12(sp),sp
   10fbc:	       tst.w d0
   10fbe:	   ,-- bne.s 10fc4 <builtIn_stopSound+0x28>
   10fc0:	   |   moveq #1,d0
   10fc2:	,--|-- bra.s 10fe2 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10fc4:	|  '-> moveq #24,d0
   10fc6:	|      add.l 12(sp),d0
   10fca:	|      move.l d0,-(sp)
   10fcc:	|      jsr 157de <trimStack>
   10fd2:	|      addq.l #4,sp
	huntKillSound (v);
   10fd4:	|      move.l (sp),d0
   10fd6:	|      move.l d0,-(sp)
   10fd8:	|      jsr d7a0 <huntKillSound>
   10fde:	|      addq.l #4,sp
	return BR_CONTINUE;
   10fe0:	|      moveq #2,d0
}
   10fe2:	'----> addq.l #4,sp
   10fe4:	       rts

00010fe6 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10fe6:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10fe8:	       movea.l 12(sp),a0
   10fec:	       move.l 24(a0),d0
   10ff0:	       move.l d0,-(sp)
   10ff2:	       pea 1 <_start+0x1>
   10ff6:	       move.l sp,d0
   10ff8:	       addq.l #8,d0
   10ffa:	       move.l d0,-(sp)
   10ffc:	       jsr 14e5a <getValueType>
   11002:	       lea 12(sp),sp
   11006:	       tst.w d0
   11008:	   ,-- bne.s 1100e <builtIn_setDefaultSoundVolume+0x28>
   1100a:	   |   moveq #1,d0
   1100c:	,--|-- bra.s 1102c <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   1100e:	|  '-> moveq #24,d0
   11010:	|      add.l 12(sp),d0
   11014:	|      move.l d0,-(sp)
   11016:	|      jsr 157de <trimStack>
   1101c:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   1101e:	|      move.l (sp),d0
   11020:	|      move.l d0,-(sp)
   11022:	|      jsr d816 <setDefaultSoundVolume>
   11028:	|      addq.l #4,sp
	return BR_CONTINUE;
   1102a:	|      moveq #2,d0
}
   1102c:	'----> addq.l #4,sp
   1102e:	       rts

00011030 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   11030:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11032:	       movea.l 16(sp),a0
   11036:	       move.l 24(a0),d0
   1103a:	       move.l d0,-(sp)
   1103c:	       pea 1 <_start+0x1>
   11040:	       move.l sp,d0
   11042:	       addq.l #8,d0
   11044:	       move.l d0,-(sp)
   11046:	       jsr 14e5a <getValueType>
   1104c:	       lea 12(sp),sp
   11050:	       tst.w d0
   11052:	   ,-- bne.s 11058 <builtIn_setSoundVolume+0x28>
   11054:	   |   moveq #1,d0
   11056:	,--|-- bra.s 110b2 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   11058:	|  '-> moveq #24,d0
   1105a:	|      add.l 16(sp),d0
   1105e:	|      move.l d0,-(sp)
   11060:	|      jsr 157de <trimStack>
   11066:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11068:	|      movea.l 16(sp),a0
   1106c:	|      move.l 24(a0),d0
   11070:	|      move.l d0,-(sp)
   11072:	|      pea 5 <_start+0x5>
   11076:	|      moveq #12,d0
   11078:	|      add.l sp,d0
   1107a:	|      move.l d0,-(sp)
   1107c:	|      jsr 14e5a <getValueType>
   11082:	|      lea 12(sp),sp
   11086:	|      tst.w d0
   11088:	|  ,-- bne.s 1108e <builtIn_setSoundVolume+0x5e>
   1108a:	|  |   moveq #1,d0
   1108c:	+--|-- bra.s 110b2 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   1108e:	|  '-> moveq #24,d0
   11090:	|      add.l 16(sp),d0
   11094:	|      move.l d0,-(sp)
   11096:	|      jsr 157de <trimStack>
   1109c:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   1109e:	|      move.l (sp),d1
   110a0:	|      move.l 4(sp),d0
   110a4:	|      move.l d1,-(sp)
   110a6:	|      move.l d0,-(sp)
   110a8:	|      jsr d82a <setSoundVolume>
   110ae:	|      addq.l #8,sp
	return BR_CONTINUE;
   110b0:	|      moveq #2,d0
}
   110b2:	'----> addq.l #8,sp
   110b4:	       rts

000110b6 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   110b6:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110ba:	       movea.l 20(sp),a0
   110be:	       move.l 24(a0),d0
   110c2:	       move.l d0,-(sp)
   110c4:	       pea 1 <_start+0x1>
   110c8:	       moveq #12,d0
   110ca:	       add.l sp,d0
   110cc:	       move.l d0,-(sp)
   110ce:	       jsr 14e5a <getValueType>
   110d4:	       lea 12(sp),sp
   110d8:	       tst.w d0
   110da:	   ,-- bne.s 110e2 <builtIn_setSoundLoopPoints+0x2c>
   110dc:	   |   moveq #1,d0
   110de:	,--|-- bra.w 1117a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   110e2:	|  '-> moveq #24,d0
   110e4:	|      add.l 20(sp),d0
   110e8:	|      move.l d0,-(sp)
   110ea:	|      jsr 157de <trimStack>
   110f0:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110f2:	|      movea.l 20(sp),a0
   110f6:	|      move.l 24(a0),d0
   110fa:	|      move.l d0,-(sp)
   110fc:	|      pea 1 <_start+0x1>
   11100:	|      lea 8(sp),a0
   11104:	|      move.l a0,-(sp)
   11106:	|      jsr 14e5a <getValueType>
   1110c:	|      lea 12(sp),sp
   11110:	|      tst.w d0
   11112:	|  ,-- bne.s 11118 <builtIn_setSoundLoopPoints+0x62>
   11114:	|  |   moveq #1,d0
   11116:	+--|-- bra.s 1117a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   11118:	|  '-> moveq #24,d0
   1111a:	|      add.l 20(sp),d0
   1111e:	|      move.l d0,-(sp)
   11120:	|      jsr 157de <trimStack>
   11126:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   11128:	|      movea.l 20(sp),a0
   1112c:	|      move.l 24(a0),d0
   11130:	|      move.l d0,-(sp)
   11132:	|      pea 5 <_start+0x5>
   11136:	|      moveq #16,d0
   11138:	|      add.l sp,d0
   1113a:	|      move.l d0,-(sp)
   1113c:	|      jsr 14e5a <getValueType>
   11142:	|      lea 12(sp),sp
   11146:	|      tst.w d0
   11148:	|  ,-- bne.s 1114e <builtIn_setSoundLoopPoints+0x98>
   1114a:	|  |   moveq #1,d0
   1114c:	+--|-- bra.s 1117a <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   1114e:	|  '-> moveq #24,d0
   11150:	|      add.l 20(sp),d0
   11154:	|      move.l d0,-(sp)
   11156:	|      jsr 157de <trimStack>
   1115c:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   1115e:	|      movea.l 4(sp),a0
   11162:	|      move.l (sp),d1
   11164:	|      move.l 8(sp),d0
   11168:	|      move.l a0,-(sp)
   1116a:	|      move.l d1,-(sp)
   1116c:	|      move.l d0,-(sp)
   1116e:	|      jsr d822 <setSoundLoop>
   11174:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11178:	|      moveq #2,d0
}
   1117a:	'----> lea 12(sp),sp
   1117e:	       rts

00011180 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   11180:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   11182:	          movea.l 12(sp),a0
   11186:	          movea.l 24(a0),a0
   1118a:	          move.l (a0),d0
   1118c:	          moveq #5,d1
   1118e:	          cmp.l d0,d1
   11190:	,-------- bne.s 111d4 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   11192:	|         movea.l 12(sp),a0
   11196:	|         move.l 24(a0),d0
   1119a:	|         move.l d0,-(sp)
   1119c:	|         pea 5 <_start+0x5>
   111a0:	|         move.l sp,d0
   111a2:	|         addq.l #8,d0
   111a4:	|         move.l d0,-(sp)
   111a6:	|         jsr 14e5a <getValueType>
   111ac:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   111b0:	|         moveq #24,d0
   111b2:	|         add.l 12(sp),d0
   111b6:	|         move.l d0,-(sp)
   111b8:	|         jsr 157de <trimStack>
   111be:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   111c0:	|         move.l (sp),d0
   111c2:	|         move.l d0,-(sp)
   111c4:	|         jsr 170e4 <setFloor>
   111ca:	|         addq.l #4,sp
   111cc:	|         tst.w d0
   111ce:	|  ,----- bne.s 111ea <builtIn_setFloor+0x6a>
   111d0:	|  |      moveq #1,d0
   111d2:	|  |  ,-- bra.s 111ec <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   111d4:	'--|--|-> moveq #24,d0
   111d6:	   |  |   add.l 12(sp),d0
   111da:	   |  |   move.l d0,-(sp)
   111dc:	   |  |   jsr 157de <trimStack>
   111e2:	   |  |   addq.l #4,sp
		setFloorNull ();
   111e4:	   |  |   jsr 1785e <setFloorNull>
	}
	return BR_CONTINUE;
   111ea:	   '--|-> moveq #2,d0
}
   111ec:	      '-> addq.l #4,sp
   111ee:	          rts

000111f0 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   111f0:	jsr 16960 <drawFloor>
	return BR_CONTINUE;
   111f6:	moveq #2,d0
}
   111f8:	rts

000111fa <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   111fa:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   111fc:	          movea.l 12(sp),a0
   11200:	          movea.l 24(a0),a0
   11204:	          move.l (a0),d0
   11206:	          moveq #5,d1
   11208:	          cmp.l d0,d1
   1120a:	,-------- bne.s 1124e <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   1120c:	|         movea.l 12(sp),a0
   11210:	|         move.l 24(a0),d0
   11214:	|         move.l d0,-(sp)
   11216:	|         pea 5 <_start+0x5>
   1121a:	|         move.l sp,d0
   1121c:	|         addq.l #8,d0
   1121e:	|         move.l d0,-(sp)
   11220:	|         jsr 14e5a <getValueType>
   11226:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   1122a:	|         moveq #24,d0
   1122c:	|         add.l 12(sp),d0
   11230:	|         move.l d0,-(sp)
   11232:	|         jsr 157de <trimStack>
   11238:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   1123a:	|         move.l (sp),d0
   1123c:	|         move.l d0,-(sp)
   1123e:	|         jsr 8cd0 <setZBuffer>
   11244:	|         addq.l #4,sp
   11246:	|         tst.w d0
   11248:	|  ,----- bne.s 11264 <builtIn_setZBuffer+0x6a>
   1124a:	|  |      moveq #1,d0
   1124c:	|  |  ,-- bra.s 11266 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   1124e:	'--|--|-> moveq #24,d0
   11250:	   |  |   add.l 12(sp),d0
   11254:	   |  |   move.l d0,-(sp)
   11256:	   |  |   jsr 157de <trimStack>
   1125c:	   |  |   addq.l #4,sp
		killZBuffer ();
   1125e:	   |  |   jsr 8c84 <killZBuffer>
	}
	return BR_CONTINUE;
   11264:	   '--|-> moveq #2,d0
}
   11266:	      '-> addq.l #4,sp
   11268:	          rts

0001126a <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   1126a:	pea 1a2bb <PutChar+0x1edf>
   11270:	jsr 1793a <KPrintF>
   11276:	addq.l #4,sp
	return BR_CONTINUE;
   11278:	moveq #2,d0
}
   1127a:	rts

0001127c <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1127c:	          movea.l 8(sp),a0
   11280:	          move.l 24(a0),d0
   11284:	          move.l d0,-(sp)
   11286:	          pea 1 <_start+0x1>
   1128a:	          pea 1d252 <speechMode>
   11290:	          jsr 14e5a <getValueType>
   11296:	          lea 12(sp),sp
   1129a:	          tst.w d0
   1129c:	      ,-- bne.s 112a2 <builtIn_setSpeechMode+0x26>
   1129e:	      |   moveq #1,d0
   112a0:	,-----|-- bra.s 112da <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   112a2:	|     '-> moveq #24,d0
   112a4:	|         add.l 8(sp),d0
   112a8:	|         move.l d0,-(sp)
   112aa:	|         jsr 157de <trimStack>
   112b0:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   112b2:	|         move.l 1d252 <speechMode>,d0
   112b8:	|     ,-- bmi.s 112c6 <builtIn_setSpeechMode+0x4a>
   112ba:	|     |   move.l 1d252 <speechMode>,d0
   112c0:	|     |   moveq #2,d1
   112c2:	|     |   cmp.l d0,d1
   112c4:	|  ,--|-- bge.s 112d8 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   112c6:	|  |  '-> pea 1a2d4 <PutChar+0x1ef8>
   112cc:	|  |      jsr 1793a <KPrintF>
   112d2:	|  |      addq.l #4,sp
		return BR_ERROR;
   112d4:	|  |      moveq #1,d0
   112d6:	+--|----- bra.s 112da <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   112d8:	|  '----> moveq #2,d0
}
   112da:	'-------> rts

000112dc <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   112dc:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   112de:	       jsr 4552 <isThereAnySpeechGoingOn>
   112e4:	       move.l d0,(sp)
	if (i == -1) {
   112e6:	       moveq #-1,d0
   112e8:	       cmp.l (sp),d0
   112ea:	,----- bne.s 11306 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   112ec:	|      moveq #28,d0
   112ee:	|      add.l 12(sp),d0
   112f2:	|      clr.l -(sp)
   112f4:	|      pea 1 <_start+0x1>
   112f8:	|      move.l d0,-(sp)
   112fa:	|      jsr 1574c <setVariable>
   11300:	|      lea 12(sp),sp
   11304:	|  ,-- bra.s 1131e <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   11306:	'--|-> moveq #28,d0
   11308:	   |   add.l 12(sp),d0
   1130c:	   |   move.l (sp),-(sp)
   1130e:	   |   pea 7 <_start+0x7>
   11312:	   |   move.l d0,-(sp)
   11314:	   |   jsr 1574c <setVariable>
   1131a:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1131e:	   '-> moveq #2,d0
}
   11320:	       addq.l #4,sp
   11322:	       rts

00011324 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   11324:	jsr 707e <killSpeechTimers>
	return BR_CONTINUE;
   1132a:	moveq #2,d0
}
   1132c:	rts

0001132e <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   1132e:	       move.l 1d298 <overRegion>,d0
   11334:	,----- beq.s 1135e <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   11336:	|      movea.l 1d298 <overRegion>,a0
   1133c:	|      movea.l 28(a0),a0
   11340:	|      move.l 4(a0),d1
   11344:	|      moveq #28,d0
   11346:	|      add.l 8(sp),d0
   1134a:	|      move.l d1,-(sp)
   1134c:	|      pea 7 <_start+0x7>
   11350:	|      move.l d0,-(sp)
   11352:	|      jsr 1574c <setVariable>
   11358:	|      lea 12(sp),sp
   1135c:	|  ,-- bra.s 11376 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   1135e:	'--|-> moveq #28,d0
   11360:	   |   add.l 8(sp),d0
   11364:	   |   clr.l -(sp)
   11366:	   |   pea 1 <_start+0x1>
   1136a:	   |   move.l d0,-(sp)
   1136c:	   |   jsr 1574c <setVariable>
   11372:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   11376:	   '-> moveq #2,d0
}
   11378:	       rts

0001137a <builtIn_rename>:

builtIn(rename)
{
   1137a:	       lea -16(sp),sp
   1137e:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11380:	       movea.l 28(sp),a0
   11384:	       move.l 24(a0),d0
   11388:	       move.l d0,-(sp)
   1138a:	       jsr 15430 <getTextFromAnyVar>
   11390:	       addq.l #4,sp
   11392:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   11396:	   ,-- bne.s 1139c <builtIn_rename+0x22>
   11398:	   |   moveq #1,d0
   1139a:	,--|-- bra.s 11416 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   1139c:	|  '-> moveq #24,d0
   1139e:	|      add.l 28(sp),d0
   113a2:	|      move.l d0,-(sp)
   113a4:	|      jsr 157de <trimStack>
   113aa:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   113ac:	|      movea.l 28(sp),a0
   113b0:	|      move.l 24(a0),d0
   113b4:	|      move.l d0,-(sp)
   113b6:	|      pea 7 <_start+0x7>
   113ba:	|      lea 12(sp),a0
   113be:	|      move.l a0,-(sp)
   113c0:	|      jsr 14e5a <getValueType>
   113c6:	|      lea 12(sp),sp
   113ca:	|      tst.w d0
   113cc:	|  ,-- bne.s 113d2 <builtIn_rename+0x58>
   113ce:	|  |   moveq #1,d0
   113d0:	+--|-- bra.s 11416 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   113d2:	|  '-> moveq #24,d0
   113d4:	|      add.l 28(sp),d0
   113d8:	|      move.l d0,-(sp)
   113da:	|      jsr 157de <trimStack>
   113e0:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   113e2:	|      move.l 4(sp),d0
   113e6:	|      move.l d0,-(sp)
   113e8:	|      jsr db6e <findObjectType>
   113ee:	|      addq.l #4,sp
   113f0:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   113f4:	|      movea.l 12(sp),a0
   113f8:	|      move.l (a0),8(sp)
   113fc:	|      move.l 1d188 <SysBase>,d0
   11402:	|      movea.l d0,a6
   11404:	|      movea.l 8(sp),a1
   11408:	|      jsr -690(a6)
	o->screenName = newText;
   1140c:	|      movea.l 12(sp),a0
   11410:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   11414:	|      moveq #2,d0
}
   11416:	'----> movea.l (sp)+,a6
   11418:	       lea 16(sp),sp
   1141c:	       rts

0001141e <builtIn_getObjectX>:

builtIn (getObjectX)
{
   1141e:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11422:	          movea.l 20(sp),a0
   11426:	          move.l 24(a0),d0
   1142a:	          move.l d0,-(sp)
   1142c:	          pea 7 <_start+0x7>
   11430:	          lea 8(sp),a0
   11434:	          move.l a0,-(sp)
   11436:	          jsr 14e5a <getValueType>
   1143c:	          lea 12(sp),sp
   11440:	          tst.w d0
   11442:	      ,-- bne.s 1144a <builtIn_getObjectX+0x2c>
   11444:	      |   moveq #1,d0
   11446:	,-----|-- bra.w 114e6 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   1144a:	|     '-> moveq #24,d0
   1144c:	|         add.l 20(sp),d0
   11450:	|         move.l d0,-(sp)
   11452:	|         jsr 157de <trimStack>
   11458:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   1145a:	|         move.l (sp),d0
   1145c:	|         move.l d0,-(sp)
   1145e:	|         jsr ac00 <findPerson>
   11464:	|         addq.l #4,sp
   11466:	|         move.l d0,8(sp)
	if (pers) {
   1146a:	|     ,-- beq.s 11498 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   1146c:	|     |   movea.l 8(sp),a0
   11470:	|     |   move.l (a0),d0
   11472:	|     |   move.l d0,-(sp)
   11474:	|     |   jsr 17d04 <__fixsfsi>
   1147a:	|     |   addq.l #4,sp
   1147c:	|     |   move.l d0,d1
   1147e:	|     |   moveq #28,d0
   11480:	|     |   add.l 20(sp),d0
   11484:	|     |   move.l d1,-(sp)
   11486:	|     |   pea 1 <_start+0x1>
   1148a:	|     |   move.l d0,-(sp)
   1148c:	|     |   jsr 1574c <setVariable>
   11492:	|     |   lea 12(sp),sp
   11496:	|  ,--|-- bra.s 114e4 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11498:	|  |  '-> move.l (sp),d0
   1149a:	|  |      move.l d0,-(sp)
   1149c:	|  |      jsr 1611c <getRegionForObject>
   114a2:	|  |      addq.l #4,sp
   114a4:	|  |      move.l d0,4(sp)
		if (la) {
   114a8:	|  |  ,-- beq.s 114cc <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   114aa:	|  |  |   movea.l 4(sp),a0
   114ae:	|  |  |   move.l 16(a0),d1
   114b2:	|  |  |   moveq #28,d0
   114b4:	|  |  |   add.l 20(sp),d0
   114b8:	|  |  |   move.l d1,-(sp)
   114ba:	|  |  |   pea 1 <_start+0x1>
   114be:	|  |  |   move.l d0,-(sp)
   114c0:	|  |  |   jsr 1574c <setVariable>
   114c6:	|  |  |   lea 12(sp),sp
   114ca:	|  +--|-- bra.s 114e4 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   114cc:	|  |  '-> moveq #28,d0
   114ce:	|  |      add.l 20(sp),d0
   114d2:	|  |      clr.l -(sp)
   114d4:	|  |      pea 1 <_start+0x1>
   114d8:	|  |      move.l d0,-(sp)
   114da:	|  |      jsr 1574c <setVariable>
   114e0:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   114e4:	|  '----> moveq #2,d0
}
   114e6:	'-------> lea 12(sp),sp
   114ea:	          rts

000114ec <builtIn_getObjectY>:

builtIn (getObjectY)
{
   114ec:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114f0:	          movea.l 20(sp),a0
   114f4:	          move.l 24(a0),d0
   114f8:	          move.l d0,-(sp)
   114fa:	          pea 7 <_start+0x7>
   114fe:	          lea 8(sp),a0
   11502:	          move.l a0,-(sp)
   11504:	          jsr 14e5a <getValueType>
   1150a:	          lea 12(sp),sp
   1150e:	          tst.w d0
   11510:	      ,-- bne.s 11518 <builtIn_getObjectY+0x2c>
   11512:	      |   moveq #1,d0
   11514:	,-----|-- bra.w 115b6 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   11518:	|     '-> moveq #24,d0
   1151a:	|         add.l 20(sp),d0
   1151e:	|         move.l d0,-(sp)
   11520:	|         jsr 157de <trimStack>
   11526:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11528:	|         move.l (sp),d0
   1152a:	|         move.l d0,-(sp)
   1152c:	|         jsr ac00 <findPerson>
   11532:	|         addq.l #4,sp
   11534:	|         move.l d0,8(sp)
	if (pers) {
   11538:	|     ,-- beq.s 11568 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   1153a:	|     |   movea.l 8(sp),a0
   1153e:	|     |   move.l 4(a0),d0
   11542:	|     |   move.l d0,-(sp)
   11544:	|     |   jsr 17d04 <__fixsfsi>
   1154a:	|     |   addq.l #4,sp
   1154c:	|     |   move.l d0,d1
   1154e:	|     |   moveq #28,d0
   11550:	|     |   add.l 20(sp),d0
   11554:	|     |   move.l d1,-(sp)
   11556:	|     |   pea 1 <_start+0x1>
   1155a:	|     |   move.l d0,-(sp)
   1155c:	|     |   jsr 1574c <setVariable>
   11562:	|     |   lea 12(sp),sp
   11566:	|  ,--|-- bra.s 115b4 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11568:	|  |  '-> move.l (sp),d0
   1156a:	|  |      move.l d0,-(sp)
   1156c:	|  |      jsr 1611c <getRegionForObject>
   11572:	|  |      addq.l #4,sp
   11574:	|  |      move.l d0,4(sp)
		if (la) {
   11578:	|  |  ,-- beq.s 1159c <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   1157a:	|  |  |   movea.l 4(sp),a0
   1157e:	|  |  |   move.l 20(a0),d1
   11582:	|  |  |   moveq #28,d0
   11584:	|  |  |   add.l 20(sp),d0
   11588:	|  |  |   move.l d1,-(sp)
   1158a:	|  |  |   pea 1 <_start+0x1>
   1158e:	|  |  |   move.l d0,-(sp)
   11590:	|  |  |   jsr 1574c <setVariable>
   11596:	|  |  |   lea 12(sp),sp
   1159a:	|  +--|-- bra.s 115b4 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   1159c:	|  |  '-> moveq #28,d0
   1159e:	|  |      add.l 20(sp),d0
   115a2:	|  |      clr.l -(sp)
   115a4:	|  |      pea 1 <_start+0x1>
   115a8:	|  |      move.l d0,-(sp)
   115aa:	|  |      jsr 1574c <setVariable>
   115b0:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   115b4:	|  '----> moveq #2,d0
}
   115b6:	'-------> lea 12(sp),sp
   115ba:	          rts

000115bc <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   115bc:	       lea -32(sp),sp
   115c0:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115c4:	       movea.l 56(sp),a0
   115c8:	       move.l 24(a0),d0
   115cc:	       move.l d0,-(sp)
   115ce:	       pea 1 <_start+0x1>
   115d2:	       lea 28(sp),a0
   115d6:	       move.l a0,-(sp)
   115d8:	       jsr 14e5a <getValueType>
   115de:	       lea 12(sp),sp
   115e2:	       tst.w d0
   115e4:	   ,-- bne.s 115ec <builtIn_addScreenRegion+0x30>
   115e6:	   |   moveq #1,d0
   115e8:	,--|-- bra.w 117c6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   115ec:	|  '-> moveq #24,d0
   115ee:	|      add.l 56(sp),d0
   115f2:	|      move.l d0,-(sp)
   115f4:	|      jsr 157de <trimStack>
   115fa:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115fc:	|      movea.l 56(sp),a0
   11600:	|      move.l 24(a0),d0
   11604:	|      move.l d0,-(sp)
   11606:	|      pea 1 <_start+0x1>
   1160a:	|      moveq #48,d0
   1160c:	|      add.l sp,d0
   1160e:	|      move.l d0,-(sp)
   11610:	|      jsr 14e5a <getValueType>
   11616:	|      lea 12(sp),sp
   1161a:	|      tst.w d0
   1161c:	|  ,-- bne.s 11624 <builtIn_addScreenRegion+0x68>
   1161e:	|  |   moveq #1,d0
   11620:	+--|-- bra.w 117c6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11624:	|  '-> moveq #24,d0
   11626:	|      add.l 56(sp),d0
   1162a:	|      move.l d0,-(sp)
   1162c:	|      jsr 157de <trimStack>
   11632:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11634:	|      movea.l 56(sp),a0
   11638:	|      move.l 24(a0),d0
   1163c:	|      move.l d0,-(sp)
   1163e:	|      pea 1 <_start+0x1>
   11642:	|      moveq #52,d0
   11644:	|      add.l sp,d0
   11646:	|      move.l d0,-(sp)
   11648:	|      jsr 14e5a <getValueType>
   1164e:	|      lea 12(sp),sp
   11652:	|      tst.w d0
   11654:	|  ,-- bne.s 1165c <builtIn_addScreenRegion+0xa0>
   11656:	|  |   moveq #1,d0
   11658:	+--|-- bra.w 117c6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1165c:	|  '-> moveq #24,d0
   1165e:	|      add.l 56(sp),d0
   11662:	|      move.l d0,-(sp)
   11664:	|      jsr 157de <trimStack>
   1166a:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1166c:	|      movea.l 56(sp),a0
   11670:	|      move.l 24(a0),d0
   11674:	|      move.l d0,-(sp)
   11676:	|      pea 1 <_start+0x1>
   1167a:	|      lea 32(sp),a0
   1167e:	|      move.l a0,-(sp)
   11680:	|      jsr 14e5a <getValueType>
   11686:	|      lea 12(sp),sp
   1168a:	|      tst.w d0
   1168c:	|  ,-- bne.s 11694 <builtIn_addScreenRegion+0xd8>
   1168e:	|  |   moveq #1,d0
   11690:	+--|-- bra.w 117c6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11694:	|  '-> moveq #24,d0
   11696:	|      add.l 56(sp),d0
   1169a:	|      move.l d0,-(sp)
   1169c:	|      jsr 157de <trimStack>
   116a2:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   116a4:	|      movea.l 56(sp),a0
   116a8:	|      move.l 24(a0),d0
   116ac:	|      move.l d0,-(sp)
   116ae:	|      pea 1 <_start+0x1>
   116b2:	|      lea 36(sp),a0
   116b6:	|      move.l a0,-(sp)
   116b8:	|      jsr 14e5a <getValueType>
   116be:	|      lea 12(sp),sp
   116c2:	|      tst.w d0
   116c4:	|  ,-- bne.s 116cc <builtIn_addScreenRegion+0x110>
   116c6:	|  |   moveq #1,d0
   116c8:	+--|-- bra.w 117c6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   116cc:	|  '-> moveq #24,d0
   116ce:	|      add.l 56(sp),d0
   116d2:	|      move.l d0,-(sp)
   116d4:	|      jsr 157de <trimStack>
   116da:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   116dc:	|      movea.l 56(sp),a0
   116e0:	|      move.l 24(a0),d0
   116e4:	|      move.l d0,-(sp)
   116e6:	|      pea 1 <_start+0x1>
   116ea:	|      lea 40(sp),a0
   116ee:	|      move.l a0,-(sp)
   116f0:	|      jsr 14e5a <getValueType>
   116f6:	|      lea 12(sp),sp
   116fa:	|      tst.w d0
   116fc:	|  ,-- bne.s 11704 <builtIn_addScreenRegion+0x148>
   116fe:	|  |   moveq #1,d0
   11700:	+--|-- bra.w 117c6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11704:	|  '-> moveq #24,d0
   11706:	|      add.l 56(sp),d0
   1170a:	|      move.l d0,-(sp)
   1170c:	|      jsr 157de <trimStack>
   11712:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11714:	|      movea.l 56(sp),a0
   11718:	|      move.l 24(a0),d0
   1171c:	|      move.l d0,-(sp)
   1171e:	|      pea 1 <_start+0x1>
   11722:	|      lea 44(sp),a0
   11726:	|      move.l a0,-(sp)
   11728:	|      jsr 14e5a <getValueType>
   1172e:	|      lea 12(sp),sp
   11732:	|      tst.w d0
   11734:	|  ,-- bne.s 1173c <builtIn_addScreenRegion+0x180>
   11736:	|  |   moveq #1,d0
   11738:	+--|-- bra.w 117c6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1173c:	|  '-> moveq #24,d0
   1173e:	|      add.l 56(sp),d0
   11742:	|      move.l d0,-(sp)
   11744:	|      jsr 157de <trimStack>
   1174a:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1174c:	|      movea.l 56(sp),a0
   11750:	|      move.l 24(a0),d0
   11754:	|      move.l d0,-(sp)
   11756:	|      pea 7 <_start+0x7>
   1175a:	|      lea 24(sp),a0
   1175e:	|      move.l a0,-(sp)
   11760:	|      jsr 14e5a <getValueType>
   11766:	|      lea 12(sp),sp
   1176a:	|      tst.w d0
   1176c:	|  ,-- bne.s 11772 <builtIn_addScreenRegion+0x1b6>
   1176e:	|  |   moveq #1,d0
   11770:	+--|-- bra.s 117c6 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11772:	|  '-> moveq #24,d0
   11774:	|      add.l 56(sp),d0
   11778:	|      move.l d0,-(sp)
   1177a:	|      jsr 157de <trimStack>
   11780:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   11782:	|      move.l 16(sp),d5
   11786:	|      move.l 20(sp),d4
   1178a:	|      move.l 40(sp),d3
   1178e:	|      move.l 44(sp),d2
   11792:	|      movea.l 24(sp),a1
   11796:	|      movea.l 28(sp),a0
   1179a:	|      move.l 32(sp),d1
   1179e:	|      move.l 36(sp),d0
   117a2:	|      move.l d5,-(sp)
   117a4:	|      move.l d4,-(sp)
   117a6:	|      move.l d3,-(sp)
   117a8:	|      move.l d2,-(sp)
   117aa:	|      move.l a1,-(sp)
   117ac:	|      move.l a0,-(sp)
   117ae:	|      move.l d1,-(sp)
   117b0:	|      move.l d0,-(sp)
   117b2:	|      jsr 15fd6 <addScreenRegion>
   117b8:	|      lea 32(sp),sp
   117bc:	|      tst.w d0
   117be:	|  ,-- beq.s 117c4 <builtIn_addScreenRegion+0x208>
   117c0:	|  |   moveq #2,d0
   117c2:	+--|-- bra.s 117c6 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   117c4:	|  '-> moveq #1,d0

}
   117c6:	'----> movem.l (sp)+,d2-d5
   117ca:	       lea 32(sp),sp
   117ce:	       rts

000117d0 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   117d0:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117d2:	       movea.l 12(sp),a0
   117d6:	       move.l 24(a0),d0
   117da:	       move.l d0,-(sp)
   117dc:	       pea 7 <_start+0x7>
   117e0:	       move.l sp,d0
   117e2:	       addq.l #8,d0
   117e4:	       move.l d0,-(sp)
   117e6:	       jsr 14e5a <getValueType>
   117ec:	       lea 12(sp),sp
   117f0:	       tst.w d0
   117f2:	   ,-- bne.s 117f8 <builtIn_removeScreenRegion+0x28>
   117f4:	   |   moveq #1,d0
   117f6:	,--|-- bra.s 11816 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   117f8:	|  '-> moveq #24,d0
   117fa:	|      add.l 12(sp),d0
   117fe:	|      move.l d0,-(sp)
   11800:	|      jsr 157de <trimStack>
   11806:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   11808:	|      move.l (sp),d0
   1180a:	|      move.l d0,-(sp)
   1180c:	|      jsr 162c4 <removeScreenRegion>
   11812:	|      addq.l #4,sp
	return BR_CONTINUE;
   11814:	|      moveq #2,d0
}
   11816:	'----> addq.l #4,sp
   11818:	       rts

0001181a <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   1181a:	jsr 16448 <showBoxes>
	return BR_CONTINUE;
   11820:	moveq #2,d0
}
   11822:	rts

00011824 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   11824:	jsr 1614a <killAllRegions>
	return BR_CONTINUE;
   1182a:	moveq #2,d0
}
   1182c:	rts

0001182e <builtIn_addCharacter>:

builtIn(addCharacter)
{
   1182e:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   11832:	       movea.l 24(sp),a0
   11836:	       move.l 24(a0),d0
   1183a:	       move.l d0,-(sp)
   1183c:	       jsr 14b06 <getCostumeFromVar>
   11842:	       addq.l #4,sp
   11844:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   11848:	   ,-- bne.s 11850 <builtIn_addCharacter+0x22>
   1184a:	   |   moveq #1,d0
   1184c:	,--|-- bra.w 1192c <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   11850:	|  '-> moveq #24,d0
   11852:	|      add.l 24(sp),d0
   11856:	|      move.l d0,-(sp)
   11858:	|      jsr 157de <trimStack>
   1185e:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11860:	|      movea.l 24(sp),a0
   11864:	|      move.l 24(a0),d0
   11868:	|      move.l d0,-(sp)
   1186a:	|      pea 1 <_start+0x1>
   1186e:	|      lea 12(sp),a0
   11872:	|      move.l a0,-(sp)
   11874:	|      jsr 14e5a <getValueType>
   1187a:	|      lea 12(sp),sp
   1187e:	|      tst.w d0
   11880:	|  ,-- bne.s 11888 <builtIn_addCharacter+0x5a>
   11882:	|  |   moveq #1,d0
   11884:	+--|-- bra.w 1192c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11888:	|  '-> moveq #24,d0
   1188a:	|      add.l 24(sp),d0
   1188e:	|      move.l d0,-(sp)
   11890:	|      jsr 157de <trimStack>
   11896:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11898:	|      movea.l 24(sp),a0
   1189c:	|      move.l 24(a0),d0
   118a0:	|      move.l d0,-(sp)
   118a2:	|      pea 1 <_start+0x1>
   118a6:	|      moveq #16,d0
   118a8:	|      add.l sp,d0
   118aa:	|      move.l d0,-(sp)
   118ac:	|      jsr 14e5a <getValueType>
   118b2:	|      lea 12(sp),sp
   118b6:	|      tst.w d0
   118b8:	|  ,-- bne.s 118be <builtIn_addCharacter+0x90>
   118ba:	|  |   moveq #1,d0
   118bc:	+--|-- bra.s 1192c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   118be:	|  '-> moveq #24,d0
   118c0:	|      add.l 24(sp),d0
   118c4:	|      move.l d0,-(sp)
   118c6:	|      jsr 157de <trimStack>
   118cc:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118ce:	|      movea.l 24(sp),a0
   118d2:	|      move.l 24(a0),d0
   118d6:	|      move.l d0,-(sp)
   118d8:	|      pea 7 <_start+0x7>
   118dc:	|      lea 8(sp),a0
   118e0:	|      move.l a0,-(sp)
   118e2:	|      jsr 14e5a <getValueType>
   118e8:	|      lea 12(sp),sp
   118ec:	|      tst.w d0
   118ee:	|  ,-- bne.s 118f4 <builtIn_addCharacter+0xc6>
   118f0:	|  |   moveq #1,d0
   118f2:	+--|-- bra.s 1192c <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   118f4:	|  '-> moveq #24,d0
   118f6:	|      add.l 24(sp),d0
   118fa:	|      move.l d0,-(sp)
   118fc:	|      jsr 157de <trimStack>
   11902:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   11904:	|      movea.l (sp),a0
   11906:	|      move.l 4(sp),d1
   1190a:	|      move.l 8(sp),d0
   1190e:	|      move.l 12(sp),-(sp)
   11912:	|      move.l a0,-(sp)
   11914:	|      move.l d1,-(sp)
   11916:	|      move.l d0,-(sp)
   11918:	|      jsr 97fa <addPerson>
   1191e:	|      lea 16(sp),sp
   11922:	|      tst.w d0
   11924:	|  ,-- beq.s 1192a <builtIn_addCharacter+0xfc>
   11926:	|  |   moveq #2,d0
   11928:	+--|-- bra.s 1192c <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   1192a:	|  '-> moveq #1,d0
}
   1192c:	'----> lea 16(sp),sp
   11930:	       rts

00011932 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   11932:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11934:	       movea.l 12(sp),a0
   11938:	       move.l 24(a0),d0
   1193c:	       move.l d0,-(sp)
   1193e:	       pea 7 <_start+0x7>
   11942:	       move.l sp,d0
   11944:	       addq.l #8,d0
   11946:	       move.l d0,-(sp)
   11948:	       jsr 14e5a <getValueType>
   1194e:	       lea 12(sp),sp
   11952:	       tst.w d0
   11954:	   ,-- bne.s 1195a <builtIn_hideCharacter+0x28>
   11956:	   |   moveq #1,d0
   11958:	,--|-- bra.s 1197a <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   1195a:	|  '-> moveq #24,d0
   1195c:	|      add.l 12(sp),d0
   11960:	|      move.l d0,-(sp)
   11962:	|      jsr 157de <trimStack>
   11968:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   1196a:	|      move.l (sp),d0
   1196c:	|      move.l d0,-(sp)
   1196e:	|      clr.l -(sp)
   11970:	|      jsr c296 <setShown>
   11976:	|      addq.l #8,sp
	return BR_CONTINUE;
   11978:	|      moveq #2,d0
}
   1197a:	'----> addq.l #4,sp
   1197c:	       rts

0001197e <builtIn_showCharacter>:

builtIn(showCharacter)
{
   1197e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11980:	       movea.l 12(sp),a0
   11984:	       move.l 24(a0),d0
   11988:	       move.l d0,-(sp)
   1198a:	       pea 7 <_start+0x7>
   1198e:	       move.l sp,d0
   11990:	       addq.l #8,d0
   11992:	       move.l d0,-(sp)
   11994:	       jsr 14e5a <getValueType>
   1199a:	       lea 12(sp),sp
   1199e:	       tst.w d0
   119a0:	   ,-- bne.s 119a6 <builtIn_showCharacter+0x28>
   119a2:	   |   moveq #1,d0
   119a4:	,--|-- bra.s 119c8 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   119a6:	|  '-> moveq #24,d0
   119a8:	|      add.l 12(sp),d0
   119ac:	|      move.l d0,-(sp)
   119ae:	|      jsr 157de <trimStack>
   119b4:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   119b6:	|      move.l (sp),d0
   119b8:	|      move.l d0,-(sp)
   119ba:	|      pea 1 <_start+0x1>
   119be:	|      jsr c296 <setShown>
   119c4:	|      addq.l #8,sp
	return BR_CONTINUE;
   119c6:	|      moveq #2,d0
}
   119c8:	'----> addq.l #4,sp
   119ca:	       rts

000119cc <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   119cc:	jsr 707e <killSpeechTimers>
	killMostPeople ();
   119d2:	jsr b096 <killMostPeople>
	return BR_CONTINUE;
   119d8:	moveq #2,d0
}
   119da:	rts

000119dc <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   119dc:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119de:	       movea.l 16(sp),a0
   119e2:	       move.l 24(a0),d0
   119e6:	       move.l d0,-(sp)
   119e8:	       pea 1 <_start+0x1>
   119ec:	       move.l sp,d0
   119ee:	       addq.l #8,d0
   119f0:	       move.l d0,-(sp)
   119f2:	       jsr 14e5a <getValueType>
   119f8:	       lea 12(sp),sp
   119fc:	       tst.w d0
   119fe:	   ,-- bne.s 11a04 <builtIn_setCharacterDrawMode+0x28>
   11a00:	   |   moveq #1,d0
   11a02:	,--|-- bra.s 11a5e <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11a04:	|  '-> moveq #24,d0
   11a06:	|      add.l 16(sp),d0
   11a0a:	|      move.l d0,-(sp)
   11a0c:	|      jsr 157de <trimStack>
   11a12:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a14:	|      movea.l 16(sp),a0
   11a18:	|      move.l 24(a0),d0
   11a1c:	|      move.l d0,-(sp)
   11a1e:	|      pea 7 <_start+0x7>
   11a22:	|      moveq #12,d0
   11a24:	|      add.l sp,d0
   11a26:	|      move.l d0,-(sp)
   11a28:	|      jsr 14e5a <getValueType>
   11a2e:	|      lea 12(sp),sp
   11a32:	|      tst.w d0
   11a34:	|  ,-- bne.s 11a3a <builtIn_setCharacterDrawMode+0x5e>
   11a36:	|  |   moveq #1,d0
   11a38:	+--|-- bra.s 11a5e <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11a3a:	|  '-> moveq #24,d0
   11a3c:	|      add.l 16(sp),d0
   11a40:	|      move.l d0,-(sp)
   11a42:	|      jsr 157de <trimStack>
   11a48:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11a4a:	|      move.l 4(sp),d1
   11a4e:	|      move.l (sp),d0
   11a50:	|      move.l d1,-(sp)
   11a52:	|      move.l d0,-(sp)
   11a54:	|      jsr bbd4 <setDrawMode>
   11a5a:	|      addq.l #8,sp
	return BR_CONTINUE;
   11a5c:	|      moveq #2,d0
}
   11a5e:	'----> addq.l #8,sp
   11a60:	       rts

00011a62 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   11a62:	pea 1a312 <PutChar+0x1f36>
   11a68:	jsr 1793a <KPrintF>
   11a6e:	addq.l #4,sp
	return BR_CONTINUE;
   11a70:	moveq #2,d0
}
   11a72:	rts

00011a74 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   11a74:	pea 1a345 <PutChar+0x1f69>
   11a7a:	jsr 1793a <KPrintF>
   11a80:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   11a82:	moveq #2,d0
}
   11a84:	rts

00011a86 <builtIn_setScale>:

builtIn(setScale)
{
   11a86:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a88:	       movea.l 16(sp),a0
   11a8c:	       move.l 24(a0),d0
   11a90:	       move.l d0,-(sp)
   11a92:	       pea 1 <_start+0x1>
   11a96:	       move.l sp,d0
   11a98:	       addq.l #8,d0
   11a9a:	       move.l d0,-(sp)
   11a9c:	       jsr 14e5a <getValueType>
   11aa2:	       lea 12(sp),sp
   11aa6:	       tst.w d0
   11aa8:	   ,-- bne.s 11aae <builtIn_setScale+0x28>
   11aaa:	   |   moveq #1,d0
   11aac:	,--|-- bra.s 11b10 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11aae:	|  '-> moveq #24,d0
   11ab0:	|      add.l 16(sp),d0
   11ab4:	|      move.l d0,-(sp)
   11ab6:	|      jsr 157de <trimStack>
   11abc:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11abe:	|      movea.l 16(sp),a0
   11ac2:	|      move.l 24(a0),d0
   11ac6:	|      move.l d0,-(sp)
   11ac8:	|      pea 1 <_start+0x1>
   11acc:	|      moveq #12,d0
   11ace:	|      add.l sp,d0
   11ad0:	|      move.l d0,-(sp)
   11ad2:	|      jsr 14e5a <getValueType>
   11ad8:	|      lea 12(sp),sp
   11adc:	|      tst.w d0
   11ade:	|  ,-- bne.s 11ae4 <builtIn_setScale+0x5e>
   11ae0:	|  |   moveq #1,d0
   11ae2:	+--|-- bra.s 11b10 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11ae4:	|  '-> moveq #24,d0
   11ae6:	|      add.l 16(sp),d0
   11aea:	|      move.l d0,-(sp)
   11aec:	|      jsr 157de <trimStack>
   11af2:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   11af4:	|      move.l (sp),d0
   11af6:	|      move.l d0,d0
   11af8:	|      movea.w d0,a1
   11afa:	|      move.l 4(sp),d0
   11afe:	|      move.l d0,d0
   11b00:	|      movea.w d0,a0
   11b02:	|      move.l a1,-(sp)
   11b04:	|      move.l a0,-(sp)
   11b06:	|      jsr c26e <setScale>
   11b0c:	|      addq.l #8,sp
	return BR_CONTINUE;
   11b0e:	|      moveq #2,d0
}
   11b10:	'----> addq.l #8,sp
   11b12:	       rts

00011b14 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   11b14:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b16:	       movea.l 12(sp),a0
   11b1a:	       move.l 24(a0),d0
   11b1e:	       move.l d0,-(sp)
   11b20:	       pea 7 <_start+0x7>
   11b24:	       move.l sp,d0
   11b26:	       addq.l #8,d0
   11b28:	       move.l d0,-(sp)
   11b2a:	       jsr 14e5a <getValueType>
   11b30:	       lea 12(sp),sp
   11b34:	       tst.w d0
   11b36:	   ,-- bne.s 11b3c <builtIn_stopCharacter+0x28>
   11b38:	   |   moveq #1,d0
   11b3a:	,--|-- bra.s 11b74 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   11b3c:	|  '-> moveq #24,d0
   11b3e:	|      add.l 12(sp),d0
   11b42:	|      move.l d0,-(sp)
   11b44:	|      jsr 157de <trimStack>
   11b4a:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   11b4c:	|      move.l (sp),d0
   11b4e:	|      move.l d0,-(sp)
   11b50:	|      jsr c3a2 <stopPerson>
   11b56:	|      addq.l #4,sp
   11b58:	|      movea.w d0,a0
   11b5a:	|      moveq #28,d0
   11b5c:	|      add.l 12(sp),d0
   11b60:	|      move.l a0,-(sp)
   11b62:	|      pea 1 <_start+0x1>
   11b66:	|      move.l d0,-(sp)
   11b68:	|      jsr 1574c <setVariable>
   11b6e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11b72:	|      moveq #2,d0
}
   11b74:	'----> addq.l #4,sp
   11b76:	       rts

00011b78 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   11b78:	pea 1a37f <PutChar+0x1fa3>
   11b7e:	jsr 1793a <KPrintF>
   11b84:	addq.l #4,sp
	return BR_CONTINUE;
   11b86:	moveq #2,d0
}
   11b88:	rts

00011b8a <builtIn_animate>:

builtIn(animate)
{
   11b8a:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   11b8c:	       movea.l 16(sp),a0
   11b90:	       move.l 24(a0),d0
   11b94:	       move.l d0,-(sp)
   11b96:	       jsr 15332 <getAnimationFromVar>
   11b9c:	       addq.l #4,sp
   11b9e:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11ba2:	   ,-- bne.s 11ba8 <builtIn_animate+0x1e>
   11ba4:	   |   moveq #1,d0
   11ba6:	,--|-- bra.s 11c26 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11ba8:	|  '-> moveq #24,d0
   11baa:	|      add.l 16(sp),d0
   11bae:	|      move.l d0,-(sp)
   11bb0:	|      jsr 157de <trimStack>
   11bb6:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11bb8:	|      movea.l 16(sp),a0
   11bbc:	|      move.l 24(a0),d0
   11bc0:	|      move.l d0,-(sp)
   11bc2:	|      pea 7 <_start+0x7>
   11bc6:	|      move.l sp,d0
   11bc8:	|      addq.l #8,d0
   11bca:	|      move.l d0,-(sp)
   11bcc:	|      jsr 14e5a <getValueType>
   11bd2:	|      lea 12(sp),sp
   11bd6:	|      tst.w d0
   11bd8:	|  ,-- bne.s 11bde <builtIn_animate+0x54>
   11bda:	|  |   moveq #1,d0
   11bdc:	+--|-- bra.s 11c26 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11bde:	|  '-> moveq #24,d0
   11be0:	|      add.l 16(sp),d0
   11be4:	|      move.l d0,-(sp)
   11be6:	|      jsr 157de <trimStack>
   11bec:	|      addq.l #4,sp
	animatePerson (obj, pp);
   11bee:	|      move.l (sp),d0
   11bf0:	|      move.l 4(sp),-(sp)
   11bf4:	|      move.l d0,-(sp)
   11bf6:	|      jsr 9a70 <animatePerson>
   11bfc:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   11bfe:	|      move.l 4(sp),-(sp)
   11c02:	|      jsr c3f6 <timeForAnim>
   11c08:	|      addq.l #4,sp
   11c0a:	|      move.l d0,d1
   11c0c:	|      moveq #28,d0
   11c0e:	|      add.l 16(sp),d0
   11c12:	|      move.l d1,-(sp)
   11c14:	|      pea 1 <_start+0x1>
   11c18:	|      move.l d0,-(sp)
   11c1a:	|      jsr 1574c <setVariable>
   11c20:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11c24:	|      moveq #2,d0
}
   11c26:	'----> addq.l #8,sp
   11c28:	       rts

00011c2a <builtIn_setCostume>:

builtIn(setCostume)
{
   11c2a:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11c2c:	       movea.l 16(sp),a0
   11c30:	       move.l 24(a0),d0
   11c34:	       move.l d0,-(sp)
   11c36:	       jsr 14b06 <getCostumeFromVar>
   11c3c:	       addq.l #4,sp
   11c3e:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11c42:	   ,-- bne.s 11c48 <builtIn_setCostume+0x1e>
   11c44:	   |   moveq #1,d0
   11c46:	,--|-- bra.s 11ca0 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11c48:	|  '-> moveq #24,d0
   11c4a:	|      add.l 16(sp),d0
   11c4e:	|      move.l d0,-(sp)
   11c50:	|      jsr 157de <trimStack>
   11c56:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11c58:	|      movea.l 16(sp),a0
   11c5c:	|      move.l 24(a0),d0
   11c60:	|      move.l d0,-(sp)
   11c62:	|      pea 7 <_start+0x7>
   11c66:	|      move.l sp,d0
   11c68:	|      addq.l #8,d0
   11c6a:	|      move.l d0,-(sp)
   11c6c:	|      jsr 14e5a <getValueType>
   11c72:	|      lea 12(sp),sp
   11c76:	|      tst.w d0
   11c78:	|  ,-- bne.s 11c7e <builtIn_setCostume+0x54>
   11c7a:	|  |   moveq #1,d0
   11c7c:	+--|-- bra.s 11ca0 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11c7e:	|  '-> moveq #24,d0
   11c80:	|      add.l 16(sp),d0
   11c84:	|      move.l d0,-(sp)
   11c86:	|      jsr 157de <trimStack>
   11c8c:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   11c8e:	|      move.l (sp),d0
   11c90:	|      move.l 4(sp),-(sp)
   11c94:	|      move.l d0,-(sp)
   11c96:	|      jsr 9aba <animatePersonUsingPersona>
   11c9c:	|      addq.l #8,sp
	return BR_CONTINUE;
   11c9e:	|      moveq #2,d0
}
   11ca0:	'----> addq.l #8,sp
   11ca2:	       rts

00011ca4 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   11ca4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ca6:	       movea.l 16(sp),a0
   11caa:	       move.l 24(a0),d0
   11cae:	       move.l d0,-(sp)
   11cb0:	       pea 1 <_start+0x1>
   11cb4:	       move.l sp,d0
   11cb6:	       addq.l #8,d0
   11cb8:	       move.l d0,-(sp)
   11cba:	       jsr 14e5a <getValueType>
   11cc0:	       lea 12(sp),sp
   11cc4:	       tst.w d0
   11cc6:	   ,-- bne.s 11ccc <builtIn_floatCharacter+0x28>
   11cc8:	   |   moveq #1,d0
   11cca:	,--|-- bra.s 11d40 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11ccc:	|  '-> moveq #24,d0
   11cce:	|      add.l 16(sp),d0
   11cd2:	|      move.l d0,-(sp)
   11cd4:	|      jsr 157de <trimStack>
   11cda:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11cdc:	|      movea.l 16(sp),a0
   11ce0:	|      move.l 24(a0),d0
   11ce4:	|      move.l d0,-(sp)
   11ce6:	|      pea 7 <_start+0x7>
   11cea:	|      moveq #12,d0
   11cec:	|      add.l sp,d0
   11cee:	|      move.l d0,-(sp)
   11cf0:	|      jsr 14e5a <getValueType>
   11cf6:	|      lea 12(sp),sp
   11cfa:	|      tst.w d0
   11cfc:	|  ,-- bne.s 11d02 <builtIn_floatCharacter+0x5e>
   11cfe:	|  |   moveq #1,d0
   11d00:	+--|-- bra.s 11d40 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11d02:	|  '-> moveq #24,d0
   11d04:	|      add.l 16(sp),d0
   11d08:	|      move.l d0,-(sp)
   11d0a:	|      jsr 157de <trimStack>
   11d10:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   11d12:	|      move.l 4(sp),d1
   11d16:	|      move.l (sp),d0
   11d18:	|      move.l d1,-(sp)
   11d1a:	|      move.l d0,-(sp)
   11d1c:	|      jsr ac4a <floatCharacter>
   11d22:	|      addq.l #8,sp
   11d24:	|      movea.w d0,a0
   11d26:	|      moveq #28,d0
   11d28:	|      add.l 16(sp),d0
   11d2c:	|      move.l a0,-(sp)
   11d2e:	|      pea 1 <_start+0x1>
   11d32:	|      move.l d0,-(sp)
   11d34:	|      jsr 1574c <setVariable>
   11d3a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11d3e:	|      moveq #2,d0
}
   11d40:	'----> addq.l #8,sp
   11d42:	       rts

00011d44 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11d44:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d46:	       movea.l 16(sp),a0
   11d4a:	       move.l 24(a0),d0
   11d4e:	       move.l d0,-(sp)
   11d50:	       pea 1 <_start+0x1>
   11d54:	       move.l sp,d0
   11d56:	       addq.l #8,d0
   11d58:	       move.l d0,-(sp)
   11d5a:	       jsr 14e5a <getValueType>
   11d60:	       lea 12(sp),sp
   11d64:	       tst.w d0
   11d66:	   ,-- bne.s 11d6c <builtIn_setCharacterWalkSpeed+0x28>
   11d68:	   |   moveq #1,d0
   11d6a:	,--|-- bra.s 11de0 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11d6c:	|  '-> moveq #24,d0
   11d6e:	|      add.l 16(sp),d0
   11d72:	|      move.l d0,-(sp)
   11d74:	|      jsr 157de <trimStack>
   11d7a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11d7c:	|      movea.l 16(sp),a0
   11d80:	|      move.l 24(a0),d0
   11d84:	|      move.l d0,-(sp)
   11d86:	|      pea 7 <_start+0x7>
   11d8a:	|      moveq #12,d0
   11d8c:	|      add.l sp,d0
   11d8e:	|      move.l d0,-(sp)
   11d90:	|      jsr 14e5a <getValueType>
   11d96:	|      lea 12(sp),sp
   11d9a:	|      tst.w d0
   11d9c:	|  ,-- bne.s 11da2 <builtIn_setCharacterWalkSpeed+0x5e>
   11d9e:	|  |   moveq #1,d0
   11da0:	+--|-- bra.s 11de0 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11da2:	|  '-> moveq #24,d0
   11da4:	|      add.l 16(sp),d0
   11da8:	|      move.l d0,-(sp)
   11daa:	|      jsr 157de <trimStack>
   11db0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   11db2:	|      move.l 4(sp),d1
   11db6:	|      move.l (sp),d0
   11db8:	|      move.l d1,-(sp)
   11dba:	|      move.l d0,-(sp)
   11dbc:	|      jsr c20a <setCharacterWalkSpeed>
   11dc2:	|      addq.l #8,sp
   11dc4:	|      movea.w d0,a0
   11dc6:	|      moveq #28,d0
   11dc8:	|      add.l 16(sp),d0
   11dcc:	|      move.l a0,-(sp)
   11dce:	|      pea 1 <_start+0x1>
   11dd2:	|      move.l d0,-(sp)
   11dd4:	|      jsr 1574c <setVariable>
   11dda:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11dde:	|      moveq #2,d0
}
   11de0:	'----> addq.l #8,sp
   11de2:	       rts

00011de4 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   11de4:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11de6:	       movea.l 16(sp),a0
   11dea:	       move.l 24(a0),d0
   11dee:	       move.l d0,-(sp)
   11df0:	       pea 1 <_start+0x1>
   11df4:	       move.l sp,d0
   11df6:	       addq.l #8,d0
   11df8:	       move.l d0,-(sp)
   11dfa:	       jsr 14e5a <getValueType>
   11e00:	       lea 12(sp),sp
   11e04:	       tst.w d0
   11e06:	   ,-- bne.s 11e0c <builtIn_turnCharacter+0x28>
   11e08:	   |   moveq #1,d0
   11e0a:	,--|-- bra.s 11e80 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11e0c:	|  '-> moveq #24,d0
   11e0e:	|      add.l 16(sp),d0
   11e12:	|      move.l d0,-(sp)
   11e14:	|      jsr 157de <trimStack>
   11e1a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11e1c:	|      movea.l 16(sp),a0
   11e20:	|      move.l 24(a0),d0
   11e24:	|      move.l d0,-(sp)
   11e26:	|      pea 7 <_start+0x7>
   11e2a:	|      moveq #12,d0
   11e2c:	|      add.l sp,d0
   11e2e:	|      move.l d0,-(sp)
   11e30:	|      jsr 14e5a <getValueType>
   11e36:	|      lea 12(sp),sp
   11e3a:	|      tst.w d0
   11e3c:	|  ,-- bne.s 11e42 <builtIn_turnCharacter+0x5e>
   11e3e:	|  |   moveq #1,d0
   11e40:	+--|-- bra.s 11e80 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11e42:	|  '-> moveq #24,d0
   11e44:	|      add.l 16(sp),d0
   11e48:	|      move.l d0,-(sp)
   11e4a:	|      jsr 157de <trimStack>
   11e50:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11e52:	|      move.l (sp),d1
   11e54:	|      move.l 4(sp),d0
   11e58:	|      move.l d1,-(sp)
   11e5a:	|      move.l d0,-(sp)
   11e5c:	|      jsr c4ae <turnPersonToFace>
   11e62:	|      addq.l #8,sp
   11e64:	|      movea.w d0,a0
   11e66:	|      moveq #28,d0
   11e68:	|      add.l 16(sp),d0
   11e6c:	|      move.l a0,-(sp)
   11e6e:	|      pea 1 <_start+0x1>
   11e72:	|      move.l d0,-(sp)
   11e74:	|      jsr 1574c <setVariable>
   11e7a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11e7e:	|      moveq #2,d0
}
   11e80:	'----> addq.l #8,sp
   11e82:	       rts

00011e84 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   11e84:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e86:	       movea.l 16(sp),a0
   11e8a:	       move.l 24(a0),d0
   11e8e:	       move.l d0,-(sp)
   11e90:	       pea 1 <_start+0x1>
   11e94:	       move.l sp,d0
   11e96:	       addq.l #8,d0
   11e98:	       move.l d0,-(sp)
   11e9a:	       jsr 14e5a <getValueType>
   11ea0:	       lea 12(sp),sp
   11ea4:	       tst.w d0
   11ea6:	   ,-- bne.s 11eac <builtIn_setCharacterExtra+0x28>
   11ea8:	   |   moveq #1,d0
   11eaa:	,--|-- bra.s 11f20 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11eac:	|  '-> moveq #24,d0
   11eae:	|      add.l 16(sp),d0
   11eb2:	|      move.l d0,-(sp)
   11eb4:	|      jsr 157de <trimStack>
   11eba:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11ebc:	|      movea.l 16(sp),a0
   11ec0:	|      move.l 24(a0),d0
   11ec4:	|      move.l d0,-(sp)
   11ec6:	|      pea 7 <_start+0x7>
   11eca:	|      moveq #12,d0
   11ecc:	|      add.l sp,d0
   11ece:	|      move.l d0,-(sp)
   11ed0:	|      jsr 14e5a <getValueType>
   11ed6:	|      lea 12(sp),sp
   11eda:	|      tst.w d0
   11edc:	|  ,-- bne.s 11ee2 <builtIn_setCharacterExtra+0x5e>
   11ede:	|  |   moveq #1,d0
   11ee0:	+--|-- bra.s 11f20 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11ee2:	|  '-> moveq #24,d0
   11ee4:	|      add.l 16(sp),d0
   11ee8:	|      move.l d0,-(sp)
   11eea:	|      jsr 157de <trimStack>
   11ef0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11ef2:	|      move.l (sp),d1
   11ef4:	|      move.l 4(sp),d0
   11ef8:	|      move.l d1,-(sp)
   11efa:	|      move.l d0,-(sp)
   11efc:	|      jsr c238 <setPersonExtra>
   11f02:	|      addq.l #8,sp
   11f04:	|      movea.w d0,a0
   11f06:	|      moveq #28,d0
   11f08:	|      add.l 16(sp),d0
   11f0c:	|      move.l a0,-(sp)
   11f0e:	|      pea 1 <_start+0x1>
   11f12:	|      move.l d0,-(sp)
   11f14:	|      jsr 1574c <setVariable>
   11f1a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11f1e:	|      moveq #2,d0
}
   11f20:	'----> addq.l #8,sp
   11f22:	       rts

00011f24 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11f24:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f26:	       movea.l 12(sp),a0
   11f2a:	       move.l 24(a0),d0
   11f2e:	       move.l d0,-(sp)
   11f30:	       pea 7 <_start+0x7>
   11f34:	       move.l sp,d0
   11f36:	       addq.l #8,d0
   11f38:	       move.l d0,-(sp)
   11f3a:	       jsr 14e5a <getValueType>
   11f40:	       lea 12(sp),sp
   11f44:	       tst.w d0
   11f46:	   ,-- bne.s 11f4c <builtIn_removeCharacter+0x28>
   11f48:	   |   moveq #1,d0
   11f4a:	,--|-- bra.s 11f6a <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11f4c:	|  '-> moveq #24,d0
   11f4e:	|      add.l 12(sp),d0
   11f52:	|      move.l d0,-(sp)
   11f54:	|      jsr 157de <trimStack>
   11f5a:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11f5c:	|      move.l (sp),d0
   11f5e:	|      move.l d0,-(sp)
   11f60:	|      jsr b438 <removeOneCharacter>
   11f66:	|      addq.l #4,sp
	return BR_CONTINUE;
   11f68:	|      moveq #2,d0
}
   11f6a:	'----> addq.l #4,sp
   11f6c:	       rts

00011f6e <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11f6e:	                lea -28(sp),sp
   11f72:	                move.l d2,-(sp)
   11f74:	                move.l 44(sp),d1
   11f78:	                move.l 48(sp),d0
   11f7c:	                move.w d1,d1
   11f7e:	                move.w d1,6(sp)
   11f82:	                move.w d0,d0
   11f84:	                move.w d0,4(sp)
	switch (numParams) {
   11f88:	                moveq #2,d0
   11f8a:	                cmp.l 36(sp),d0
   11f8e:	      ,-------- beq.w 120d0 <moveChr+0x162>
   11f92:	      |         moveq #3,d0
   11f94:	      |         cmp.l 36(sp),d0
   11f98:	,-----|-------- bne.w 12204 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f9c:	|     |         movea.l 40(sp),a0
   11fa0:	|     |         move.l 24(a0),d0
   11fa4:	|     |         move.l d0,-(sp)
   11fa6:	|     |         pea 1 <_start+0x1>
   11faa:	|     |         lea 20(sp),a0
   11fae:	|     |         move.l a0,-(sp)
   11fb0:	|     |         jsr 14e5a <getValueType>
   11fb6:	|     |         lea 12(sp),sp
   11fba:	|     |         tst.w d0
   11fbc:	|     |     ,-- bne.s 11fc4 <moveChr+0x56>
   11fbe:	|     |     |   moveq #1,d0
   11fc0:	|  ,--|-----|-- bra.w 12214 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11fc4:	|  |  |     '-> moveq #24,d0
   11fc6:	|  |  |         add.l 40(sp),d0
   11fca:	|  |  |         move.l d0,-(sp)
   11fcc:	|  |  |         jsr 157de <trimStack>
   11fd2:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11fd4:	|  |  |         movea.l 40(sp),a0
   11fd8:	|  |  |         move.l 24(a0),d0
   11fdc:	|  |  |         move.l d0,-(sp)
   11fde:	|  |  |         pea 1 <_start+0x1>
   11fe2:	|  |  |         lea 24(sp),a0
   11fe6:	|  |  |         move.l a0,-(sp)
   11fe8:	|  |  |         jsr 14e5a <getValueType>
   11fee:	|  |  |         lea 12(sp),sp
   11ff2:	|  |  |         tst.w d0
   11ff4:	|  |  |     ,-- bne.s 11ffc <moveChr+0x8e>
   11ff6:	|  |  |     |   moveq #1,d0
   11ff8:	|  +--|-----|-- bra.w 12214 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11ffc:	|  |  |     '-> moveq #24,d0
   11ffe:	|  |  |         add.l 40(sp),d0
   12002:	|  |  |         move.l d0,-(sp)
   12004:	|  |  |         jsr 157de <trimStack>
   1200a:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1200c:	|  |  |         movea.l 40(sp),a0
   12010:	|  |  |         move.l 24(a0),d0
   12014:	|  |  |         move.l d0,-(sp)
   12016:	|  |  |         pea 7 <_start+0x7>
   1201a:	|  |  |         lea 16(sp),a0
   1201e:	|  |  |         move.l a0,-(sp)
   12020:	|  |  |         jsr 14e5a <getValueType>
   12026:	|  |  |         lea 12(sp),sp
   1202a:	|  |  |         tst.w d0
   1202c:	|  |  |     ,-- bne.s 12034 <moveChr+0xc6>
   1202e:	|  |  |     |   moveq #1,d0
   12030:	|  +--|-----|-- bra.w 12214 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12034:	|  |  |     '-> moveq #24,d0
   12036:	|  |  |         add.l 40(sp),d0
   1203a:	|  |  |         move.l d0,-(sp)
   1203c:	|  |  |         jsr 157de <trimStack>
   12042:	|  |  |         addq.l #4,sp

			if (force) {
   12044:	|  |  |         tst.w 6(sp)
   12048:	|  |  |     ,-- beq.s 12078 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   1204a:	|  |  |     |   movea.l 8(sp),a0
   1204e:	|  |  |     |   move.l 12(sp),d1
   12052:	|  |  |     |   move.l 16(sp),d0
   12056:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb3b09>
   1205a:	|  |  |     |   move.l 44(sp),-(sp)
   1205e:	|  |  |     |   move.l a0,-(sp)
   12060:	|  |  |     |   move.l d1,-(sp)
   12062:	|  |  |     |   move.l d0,-(sp)
   12064:	|  |  |     |   jsr ac6e <forceWalkingPerson>
   1206a:	|  |  |     |   lea 20(sp),sp
   1206e:	|  |  |     |   tst.w d0
   12070:	|  |  |  ,--|-- beq.s 120ca <moveChr+0x15c>
   12072:	|  |  |  |  |   moveq #3,d0
   12074:	|  +--|--|--|-- bra.w 12214 <moveChr+0x2a6>
			} else if (immediate) {
   12078:	|  |  |  |  '-> tst.w 4(sp)
   1207c:	|  |  |  |  ,-- beq.s 1209c <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   1207e:	|  |  |  |  |   movea.l 8(sp),a0
   12082:	|  |  |  |  |   move.l 12(sp),d1
   12086:	|  |  |  |  |   move.l 16(sp),d0
   1208a:	|  |  |  |  |   move.l a0,-(sp)
   1208c:	|  |  |  |  |   move.l d1,-(sp)
   1208e:	|  |  |  |  |   move.l d0,-(sp)
   12090:	|  |  |  |  |   jsr af84 <jumpPerson>
   12096:	|  |  |  |  |   lea 12(sp),sp
   1209a:	|  |  |  +--|-- bra.s 120ca <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   1209c:	|  |  |  |  '-> movea.l 8(sp),a0
   120a0:	|  |  |  |      move.l 12(sp),d1
   120a4:	|  |  |  |      move.l 16(sp),d0
   120a8:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb3b09>
   120ac:	|  |  |  |      move.l 44(sp),-(sp)
   120b0:	|  |  |  |      move.l a0,-(sp)
   120b2:	|  |  |  |      move.l d1,-(sp)
   120b4:	|  |  |  |      move.l d0,-(sp)
   120b6:	|  |  |  |      jsr b154 <makeWalkingPerson>
   120bc:	|  |  |  |      lea 20(sp),sp
   120c0:	|  |  |  |      tst.w d0
   120c2:	|  |  |  +----- beq.s 120ca <moveChr+0x15c>
   120c4:	|  |  |  |      moveq #3,d0
   120c6:	|  +--|--|----- bra.w 12214 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   120ca:	|  |  |  '----> moveq #2,d0
   120cc:	|  +--|-------- bra.w 12214 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   120d0:	|  |  '-------> movea.l 40(sp),a0
   120d4:	|  |            move.l 24(a0),d0
   120d8:	|  |            move.l d0,-(sp)
   120da:	|  |            pea 7 <_start+0x7>
   120de:	|  |            moveq #32,d0
   120e0:	|  |            add.l sp,d0
   120e2:	|  |            move.l d0,-(sp)
   120e4:	|  |            jsr 14e5a <getValueType>
   120ea:	|  |            lea 12(sp),sp
   120ee:	|  |            tst.w d0
   120f0:	|  |        ,-- bne.s 120f8 <moveChr+0x18a>
   120f2:	|  |        |   moveq #1,d0
   120f4:	|  +--------|-- bra.w 12214 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   120f8:	|  |        '-> moveq #24,d0
   120fa:	|  |            add.l 40(sp),d0
   120fe:	|  |            move.l d0,-(sp)
   12100:	|  |            jsr 157de <trimStack>
   12106:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12108:	|  |            movea.l 40(sp),a0
   1210c:	|  |            move.l 24(a0),d0
   12110:	|  |            move.l d0,-(sp)
   12112:	|  |            pea 7 <_start+0x7>
   12116:	|  |            lea 28(sp),a0
   1211a:	|  |            move.l a0,-(sp)
   1211c:	|  |            jsr 14e5a <getValueType>
   12122:	|  |            lea 12(sp),sp
   12126:	|  |            tst.w d0
   12128:	|  |        ,-- bne.s 12130 <moveChr+0x1c2>
   1212a:	|  |        |   moveq #1,d0
   1212c:	|  +--------|-- bra.w 12214 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   12130:	|  |        '-> moveq #24,d0
   12132:	|  |            add.l 40(sp),d0
   12136:	|  |            move.l d0,-(sp)
   12138:	|  |            jsr 157de <trimStack>
   1213e:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   12140:	|  |            move.l 24(sp),d0
   12144:	|  |            move.l d0,-(sp)
   12146:	|  |            jsr 1611c <getRegionForObject>
   1214c:	|  |            addq.l #4,sp
   1214e:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   12152:	|  |        ,-- bne.s 1215a <moveChr+0x1ec>
   12154:	|  |        |   moveq #2,d0
   12156:	|  +--------|-- bra.w 12214 <moveChr+0x2a6>

			if (force)
   1215a:	|  |        '-> tst.w 6(sp)
   1215e:	|  |        ,-- beq.s 1219a <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   12160:	|  |        |   movea.l 28(sp),a0
   12164:	|  |        |   move.l 24(a0),d2
   12168:	|  |        |   movea.l 20(sp),a1
   1216c:	|  |        |   movea.l 28(sp),a0
   12170:	|  |        |   move.l 20(a0),d1
   12174:	|  |        |   movea.l 28(sp),a0
   12178:	|  |        |   move.l 16(a0),d0
   1217c:	|  |        |   move.l d2,-(sp)
   1217e:	|  |        |   move.l 44(sp),-(sp)
   12182:	|  |        |   move.l a1,-(sp)
   12184:	|  |        |   move.l d1,-(sp)
   12186:	|  |        |   move.l d0,-(sp)
   12188:	|  |        |   jsr ac6e <forceWalkingPerson>
   1218e:	|  |        |   lea 20(sp),sp
   12192:	|  |        |   tst.w d0
   12194:	|  |     ,--|-- beq.s 12200 <moveChr+0x292>
   12196:	|  |     |  |   moveq #3,d0
   12198:	|  +-----|--|-- bra.s 12214 <moveChr+0x2a6>
			}
			else if (immediate)
   1219a:	|  |     |  '-> tst.w 4(sp)
   1219e:	|  |     |  ,-- beq.s 121c6 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   121a0:	|  |     |  |   movea.l 20(sp),a1
   121a4:	|  |     |  |   movea.l 28(sp),a0
   121a8:	|  |     |  |   move.l 20(a0),d1
   121ac:	|  |     |  |   movea.l 28(sp),a0
   121b0:	|  |     |  |   move.l 16(a0),d0
   121b4:	|  |     |  |   move.l a1,-(sp)
   121b6:	|  |     |  |   move.l d1,-(sp)
   121b8:	|  |     |  |   move.l d0,-(sp)
   121ba:	|  |     |  |   jsr af84 <jumpPerson>
   121c0:	|  |     |  |   lea 12(sp),sp
   121c4:	|  |     +--|-- bra.s 12200 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   121c6:	|  |     |  '-> movea.l 28(sp),a0
   121ca:	|  |     |      move.l 24(a0),d2
   121ce:	|  |     |      movea.l 20(sp),a1
   121d2:	|  |     |      movea.l 28(sp),a0
   121d6:	|  |     |      move.l 20(a0),d1
   121da:	|  |     |      movea.l 28(sp),a0
   121de:	|  |     |      move.l 16(a0),d0
   121e2:	|  |     |      move.l d2,-(sp)
   121e4:	|  |     |      move.l 44(sp),-(sp)
   121e8:	|  |     |      move.l a1,-(sp)
   121ea:	|  |     |      move.l d1,-(sp)
   121ec:	|  |     |      move.l d0,-(sp)
   121ee:	|  |     |      jsr b154 <makeWalkingPerson>
   121f4:	|  |     |      lea 20(sp),sp
   121f8:	|  |     |      tst.w d0
   121fa:	|  |     +----- beq.s 12200 <moveChr+0x292>
   121fc:	|  |     |      moveq #3,d0
   121fe:	|  +-----|----- bra.s 12214 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   12200:	|  |     '----> moveq #2,d0
   12202:	|  +----------- bra.s 12214 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   12204:	'--|----------> pea 1a39d <PutChar+0x1fc1>
   1220a:	   |            jsr 1793a <KPrintF>
   12210:	   |            addq.l #4,sp
			return BR_ERROR;
   12212:	   |            moveq #1,d0
	}
}
   12214:	   '----------> move.l (sp)+,d2
   12216:	                lea 28(sp),sp
   1221a:	                rts

0001221c <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   1221c:	clr.l -(sp)
   1221e:	clr.l -(sp)
   12220:	move.l 16(sp),-(sp)
   12224:	move.l 16(sp),-(sp)
   12228:	jsr 11f6e <moveChr>
   1222e:	lea 16(sp),sp
}
   12232:	rts

00012234 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   12234:	clr.l -(sp)
   12236:	pea 1 <_start+0x1>
   1223a:	move.l 16(sp),-(sp)
   1223e:	move.l 16(sp),-(sp)
   12242:	jsr 11f6e <moveChr>
   12248:	lea 16(sp),sp
}
   1224c:	rts

0001224e <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   1224e:	pea 1 <_start+0x1>
   12252:	clr.l -(sp)
   12254:	move.l 16(sp),-(sp)
   12258:	move.l 16(sp),-(sp)
   1225c:	jsr 11f6e <moveChr>
   12262:	lea 16(sp),sp
}
   12266:	rts

00012268 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   12268:	jsr 88f2 <clearStatusBar>
	return BR_CONTINUE;
   1226e:	moveq #2,d0
}
   12270:	rts

00012272 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   12272:	jsr 899a <killLastStatus>
	return BR_CONTINUE;
   12278:	moveq #2,d0
}
   1227a:	rts

0001227c <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   1227c:	jsr 8888 <addStatusBar>
	return BR_CONTINUE;
   12282:	moveq #2,d0
}
   12284:	rts

00012286 <builtIn_statusText>:

builtIn(statusText)
{
   12286:	       subq.l #8,sp
   12288:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   1228a:	       movea.l 20(sp),a0
   1228e:	       move.l 24(a0),d0
   12292:	       move.l d0,-(sp)
   12294:	       jsr 15430 <getTextFromAnyVar>
   1229a:	       addq.l #4,sp
   1229c:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   122a0:	   ,-- bne.s 122a6 <builtIn_statusText+0x20>
   122a2:	   |   moveq #1,d0
   122a4:	,--|-- bra.s 122da <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   122a6:	|  '-> moveq #24,d0
   122a8:	|      add.l 20(sp),d0
   122ac:	|      move.l d0,-(sp)
   122ae:	|      jsr 157de <trimStack>
   122b4:	|      addq.l #4,sp
	setStatusBar(newText);
   122b6:	|      move.l 8(sp),-(sp)
   122ba:	|      jsr 8c1a <setStatusBar>
   122c0:	|      addq.l #4,sp
	FreeVec(newText);
   122c2:	|      move.l 8(sp),4(sp)
   122c8:	|      move.l 1d188 <SysBase>,d0
   122ce:	|      movea.l d0,a6
   122d0:	|      movea.l 4(sp),a1
   122d4:	|      jsr -690(a6)
	return BR_CONTINUE;
   122d8:	|      moveq #2,d0
}
   122da:	'----> movea.l (sp)+,a6
   122dc:	       addq.l #8,sp
   122de:	       rts

000122e0 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   122e0:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122e2:	       movea.l 12(sp),a0
   122e6:	       move.l 24(a0),d0
   122ea:	       move.l d0,-(sp)
   122ec:	       pea 1 <_start+0x1>
   122f0:	       move.l sp,d0
   122f2:	       addq.l #8,d0
   122f4:	       move.l d0,-(sp)
   122f6:	       jsr 14e5a <getValueType>
   122fc:	       lea 12(sp),sp
   12300:	       tst.w d0
   12302:	   ,-- bne.s 12308 <builtIn_lightStatus+0x28>
   12304:	   |   moveq #1,d0
   12306:	,--|-- bra.s 12326 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   12308:	|  '-> moveq #24,d0
   1230a:	|      add.l 12(sp),d0
   1230e:	|      move.l d0,-(sp)
   12310:	|      jsr 157de <trimStack>
   12316:	|      addq.l #4,sp
	setLitStatus (val);
   12318:	|      move.l (sp),d0
   1231a:	|      move.l d0,-(sp)
   1231c:	|      jsr 8c0a <setLitStatus>
   12322:	|      addq.l #4,sp
	return BR_CONTINUE;
   12324:	|      moveq #2,d0
}
   12326:	'----> addq.l #4,sp
   12328:	       rts

0001232a <builtIn_positionStatus>:

builtIn(positionStatus)
{
   1232a:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1232c:	       movea.l 16(sp),a0
   12330:	       move.l 24(a0),d0
   12334:	       move.l d0,-(sp)
   12336:	       pea 1 <_start+0x1>
   1233a:	       move.l sp,d0
   1233c:	       addq.l #8,d0
   1233e:	       move.l d0,-(sp)
   12340:	       jsr 14e5a <getValueType>
   12346:	       lea 12(sp),sp
   1234a:	       tst.w d0
   1234c:	   ,-- bne.s 12352 <builtIn_positionStatus+0x28>
   1234e:	   |   moveq #1,d0
   12350:	,--|-- bra.s 123ac <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   12352:	|  '-> moveq #24,d0
   12354:	|      add.l 16(sp),d0
   12358:	|      move.l d0,-(sp)
   1235a:	|      jsr 157de <trimStack>
   12360:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12362:	|      movea.l 16(sp),a0
   12366:	|      move.l 24(a0),d0
   1236a:	|      move.l d0,-(sp)
   1236c:	|      pea 1 <_start+0x1>
   12370:	|      moveq #12,d0
   12372:	|      add.l sp,d0
   12374:	|      move.l d0,-(sp)
   12376:	|      jsr 14e5a <getValueType>
   1237c:	|      lea 12(sp),sp
   12380:	|      tst.w d0
   12382:	|  ,-- bne.s 12388 <builtIn_positionStatus+0x5e>
   12384:	|  |   moveq #1,d0
   12386:	+--|-- bra.s 123ac <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   12388:	|  '-> moveq #24,d0
   1238a:	|      add.l 16(sp),d0
   1238e:	|      move.l d0,-(sp)
   12390:	|      jsr 157de <trimStack>
   12396:	|      addq.l #4,sp
	positionStatus (x, y);
   12398:	|      move.l (sp),d1
   1239a:	|      move.l 4(sp),d0
   1239e:	|      move.l d1,-(sp)
   123a0:	|      move.l d0,-(sp)
   123a2:	|      jsr 89fc <positionStatus>
   123a8:	|      addq.l #8,sp
	return BR_CONTINUE;
   123aa:	|      moveq #2,d0
}
   123ac:	'----> addq.l #8,sp
   123ae:	       rts

000123b0 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   123b0:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   123b2:	       movea.l 12(sp),a0
   123b6:	       move.l 24(a0),d0
   123ba:	       move.l d0,-(sp)
   123bc:	       pea 1 <_start+0x1>
   123c0:	       move.l sp,d0
   123c2:	       addq.l #8,d0
   123c4:	       move.l d0,-(sp)
   123c6:	       jsr 14e5a <getValueType>
   123cc:	       lea 12(sp),sp
   123d0:	       tst.w d0
   123d2:	   ,-- bne.s 123d8 <builtIn_alignStatus+0x28>
   123d4:	   |   moveq #1,d0
   123d6:	,--|-- bra.s 123f8 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   123d8:	|  '-> moveq #24,d0
   123da:	|      add.l 12(sp),d0
   123de:	|      move.l d0,-(sp)
   123e0:	|      jsr 157de <trimStack>
   123e6:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   123e8:	|      move.l (sp),d0
   123ea:	|      movea.l 1cb06 <nowStatus>,a0
   123f0:	|      move.l d0,d0
   123f2:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   123f6:	|      moveq #2,d0
}
   123f8:	'----> addq.l #4,sp
   123fa:	       rts

000123fc <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   123fc:	             tst.l 4(sp)
   12400:	      ,----- beq.s 1240c <getFuncNumForCallback+0x10>
   12402:	      |      moveq #1,d0
   12404:	      |      cmp.l 4(sp),d0
   12408:	      |  ,-- beq.s 12412 <getFuncNumForCallback+0x16>
   1240a:	   ,--|--|-- bra.s 12448 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   1240c:	   |  '--|-> clr.l 12(sp)
			break;
   12410:	,--|-----|-- bra.s 1245a <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   12412:	|  |     '-> movea.l 8(sp),a0
   12416:	|  |         move.l 24(a0),d0
   1241a:	|  |         move.l d0,-(sp)
   1241c:	|  |         pea 2 <_start+0x2>
   12420:	|  |         move.l 20(sp),-(sp)
   12424:	|  |         jsr 14e5a <getValueType>
   1242a:	|  |         lea 12(sp),sp
   1242e:	|  |         tst.w d0
   12430:	|  |     ,-- bne.s 12436 <getFuncNumForCallback+0x3a>
   12432:	|  |     |   clr.w d0
   12434:	|  |  ,--|-- bra.s 1245c <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   12436:	|  |  |  '-> moveq #24,d0
   12438:	|  |  |      add.l 8(sp),d0
   1243c:	|  |  |      move.l d0,-(sp)
   1243e:	|  |  |      jsr 157de <trimStack>
   12444:	|  |  |      addq.l #4,sp
			break;
   12446:	+--|--|----- bra.s 1245a <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   12448:	|  '--|----> pea 1a3d3 <PutChar+0x1ff7>
   1244e:	|     |      jsr 1793a <KPrintF>
   12454:	|     |      addq.l #4,sp
			return FALSE;
   12456:	|     |      clr.w d0
   12458:	|     +----- bra.s 1245c <getFuncNumForCallback+0x60>
	}
	return TRUE;
   1245a:	'-----|----> moveq #1,d0
}
   1245c:	      '----> rts

0001245e <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   1245e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12460:	       move.l sp,d0
   12462:	       move.l d0,-(sp)
   12464:	       move.l 16(sp),-(sp)
   12468:	       move.l 16(sp),-(sp)
   1246c:	       jsr 123fc <getFuncNumForCallback>
   12472:	       lea 12(sp),sp
   12476:	       tst.w d0
   12478:	,----- beq.s 12488 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   1247a:	|      movea.l 1caf8 <currentEvents>,a0
   12480:	|      move.l (sp),d0
   12482:	|      move.l d0,(a0)
		return BR_CONTINUE;
   12484:	|      moveq #2,d0
   12486:	|  ,-- bra.s 1248a <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   12488:	'--|-> moveq #1,d0
}
   1248a:	   '-> addq.l #4,sp
   1248c:	       rts

0001248e <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   1248e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12490:	       move.l sp,d0
   12492:	       move.l d0,-(sp)
   12494:	       move.l 16(sp),-(sp)
   12498:	       move.l 16(sp),-(sp)
   1249c:	       jsr 123fc <getFuncNumForCallback>
   124a2:	       lea 12(sp),sp
   124a6:	       tst.w d0
   124a8:	,----- beq.s 124ba <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   124aa:	|      movea.l 1caf8 <currentEvents>,a0
   124b0:	|      move.l (sp),d0
   124b2:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   124b6:	|      moveq #2,d0
   124b8:	|  ,-- bra.s 124bc <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   124ba:	'--|-> moveq #1,d0
}
   124bc:	   '-> addq.l #4,sp
   124be:	       rts

000124c0 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   124c0:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   124c2:	       move.l sp,d0
   124c4:	       move.l d0,-(sp)
   124c6:	       move.l 16(sp),-(sp)
   124ca:	       move.l 16(sp),-(sp)
   124ce:	       jsr 123fc <getFuncNumForCallback>
   124d4:	       lea 12(sp),sp
   124d8:	       tst.w d0
   124da:	,----- beq.s 124ec <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   124dc:	|      movea.l 1caf8 <currentEvents>,a0
   124e2:	|      move.l (sp),d0
   124e4:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   124e8:	|      moveq #2,d0
   124ea:	|  ,-- bra.s 124ee <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   124ec:	'--|-> moveq #1,d0
}
   124ee:	   '-> addq.l #4,sp
   124f0:	       rts

000124f2 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   124f2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   124f4:	       move.l sp,d0
   124f6:	       move.l d0,-(sp)
   124f8:	       move.l 16(sp),-(sp)
   124fc:	       move.l 16(sp),-(sp)
   12500:	       jsr 123fc <getFuncNumForCallback>
   12506:	       lea 12(sp),sp
   1250a:	       tst.w d0
   1250c:	,----- beq.s 1251e <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   1250e:	|      movea.l 1caf8 <currentEvents>,a0
   12514:	|      move.l (sp),d0
   12516:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   1251a:	|      moveq #2,d0
   1251c:	|  ,-- bra.s 12520 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   1251e:	'--|-> moveq #1,d0
}
   12520:	   '-> addq.l #4,sp
   12522:	       rts

00012524 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   12524:	          subq.l #8,sp
   12526:	          move.l a2,-(sp)
	UNUSEDALL
	int functionNum;	

	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12528:	          move.l sp,d0
   1252a:	          addq.l #4,d0
   1252c:	          move.l d0,-(sp)
   1252e:	          move.l 24(sp),-(sp)
   12532:	          move.l 24(sp),-(sp)
   12536:	          jsr 123fc <getFuncNumForCallback>
   1253c:	          lea 12(sp),sp
   12540:	          tst.w d0
   12542:	,-------- beq.s 125a0 <builtIn_onFocusChange+0x7c>
	{
		struct loadedFunction *oldfunc = currentEvents -> focusFunction;
   12544:	|         movea.l 1caf8 <currentEvents>,a0
   1254a:	|         move.l 20(a0),8(sp)
		if( functionNum != NULL) 
   12550:	|         move.l 4(sp),d0
   12554:	|  ,----- beq.s 12570 <builtIn_onFocusChange+0x4c>
			currentEvents -> focusFunction = preloadNewFunctionNum(functionNum);		
   12556:	|  |      move.l 4(sp),d0
   1255a:	|  |      movea.l 1caf8 <currentEvents>,a2
   12560:	|  |      move.l d0,-(sp)
   12562:	|  |      jsr 7706 <preloadNewFunctionNum>
   12568:	|  |      addq.l #4,sp
   1256a:	|  |      move.l d0,20(a2)
   1256e:	|  |  ,-- bra.s 1257a <builtIn_onFocusChange+0x56>
		else
			currentEvents -> focusFunction = NULL;
   12570:	|  '--|-> movea.l 1caf8 <currentEvents>,a0
   12576:	|     |   clr.l 20(a0)

		if( oldfunc != NULL && oldfunc != currentEvents -> focusFunction )
   1257a:	|     '-> tst.l 8(sp)
   1257e:	|     ,-- beq.s 1259c <builtIn_onFocusChange+0x78>
   12580:	|     |   movea.l 1caf8 <currentEvents>,a0
   12586:	|     |   move.l 20(a0),d0
   1258a:	|     |   cmp.l 8(sp),d0
   1258e:	|     +-- beq.s 1259c <builtIn_onFocusChange+0x78>
		{
			unloadFunction(oldfunc);
   12590:	|     |   move.l 8(sp),-(sp)
   12594:	|     |   jsr 7b74 <unloadFunction>
   1259a:	|     |   addq.l #4,sp
		}
		

		return BR_CONTINUE;
   1259c:	|     '-> moveq #2,d0
   1259e:	|     ,-- bra.s 125a2 <builtIn_onFocusChange+0x7e>
	}
	return BR_ERROR;
   125a0:	'-----|-> moveq #1,d0
}
   125a2:	      '-> movea.l (sp)+,a2
   125a4:	          addq.l #8,sp
   125a6:	          rts

000125a8 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   125a8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   125aa:	       move.l sp,d0
   125ac:	       move.l d0,-(sp)
   125ae:	       move.l 16(sp),-(sp)
   125b2:	       move.l 16(sp),-(sp)
   125b6:	       jsr 123fc <getFuncNumForCallback>
   125bc:	       lea 12(sp),sp
   125c0:	       tst.w d0
   125c2:	,----- beq.s 125d4 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   125c4:	|      movea.l 1caf8 <currentEvents>,a0
   125ca:	|      move.l (sp),d0
   125cc:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   125d0:	|      moveq #2,d0
   125d2:	|  ,-- bra.s 125d6 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   125d4:	'--|-> moveq #1,d0
}
   125d6:	   '-> addq.l #4,sp
   125d8:	       rts

000125da <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   125da:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   125dc:	       move.l sp,d0
   125de:	       move.l d0,-(sp)
   125e0:	       move.l 16(sp),-(sp)
   125e4:	       move.l 16(sp),-(sp)
   125e8:	       jsr 123fc <getFuncNumForCallback>
   125ee:	       lea 12(sp),sp
   125f2:	       tst.w d0
   125f4:	,----- beq.s 12606 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   125f6:	|      movea.l 1caf8 <currentEvents>,a0
   125fc:	|      move.l (sp),d0
   125fe:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   12602:	|      moveq #2,d0
   12604:	|  ,-- bra.s 12608 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   12606:	'--|-> moveq #1,d0
}
   12608:	   '-> addq.l #4,sp
   1260a:	       rts

0001260c <builtIn_spawnSub>:

builtIn (spawnSub)
{
   1260c:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1260e:	          move.l sp,d0
   12610:	          move.l d0,-(sp)
   12612:	          move.l 16(sp),-(sp)
   12616:	          move.l 16(sp),-(sp)
   1261a:	          jsr 123fc <getFuncNumForCallback>
   12620:	          lea 12(sp),sp
   12624:	          tst.w d0
   12626:	,-------- beq.s 12652 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   12628:	|         move.l 1d158 <noStack>,d1
   1262e:	|         move.l (sp),d0
   12630:	|         pea 1 <_start+0x1>
   12634:	|         move.l d1,-(sp)
   12636:	|         clr.l -(sp)
   12638:	|         clr.l -(sp)
   1263a:	|         move.l d0,-(sp)
   1263c:	|         jsr 7ac8 <startNewFunctionNum>
   12642:	|         lea 20(sp),sp
   12646:	|         tst.l d0
   12648:	|     ,-- bne.s 1264e <builtIn_spawnSub+0x42>
   1264a:	|     |   moveq #1,d0
   1264c:	|  ,--|-- bra.s 12654 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   1264e:	|  |  '-> moveq #2,d0
   12650:	|  +----- bra.s 12654 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   12652:	'--|----> moveq #1,d0
}
   12654:	   '----> addq.l #4,sp
   12656:	          rts

00012658 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   12658:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1265a:	          move.l sp,d0
   1265c:	          addq.l #4,d0
   1265e:	          move.l d0,-(sp)
   12660:	          move.l 20(sp),-(sp)
   12664:	          move.l 20(sp),-(sp)
   12668:	          jsr 123fc <getFuncNumForCallback>
   1266e:	          lea 12(sp),sp
   12672:	          tst.w d0
   12674:	,-------- beq.s 126aa <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   12676:	|         move.l 4(sp),d1
   1267a:	|         move.l sp,d0
   1267c:	|         addq.l #2,d0
   1267e:	|         move.l d0,-(sp)
   12680:	|         move.l 20(sp),-(sp)
   12684:	|         move.l d1,-(sp)
   12686:	|         jsr 5708 <cancelAFunction>
   1268c:	|         lea 12(sp),sp
		if (killedMyself) {
   12690:	|         move.w 2(sp),d0
   12694:	|  ,----- beq.s 126a6 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   12696:	|  |      move.l 16(sp),-(sp)
   1269a:	|  |      jsr 55fa <abortFunction>
   126a0:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   126a2:	|  |      moveq #5,d0
   126a4:	|  |  ,-- bra.s 126ac <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   126a6:	|  '--|-> moveq #2,d0
   126a8:	|     +-- bra.s 126ac <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   126aa:	'-----|-> moveq #1,d0
}
   126ac:	      '-> addq.l #8,sp
   126ae:	          rts

000126b0 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   126b0:	       subq.l #8,sp
   126b2:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   126b4:	       movea.l 20(sp),a0
   126b8:	       move.l 24(a0),d0
   126bc:	       move.l d0,-(sp)
   126be:	       jsr 15430 <getTextFromAnyVar>
   126c4:	       addq.l #4,sp
   126c6:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   126ca:	   ,-- bne.s 126d0 <builtIn_stringWidth+0x20>
   126cc:	   |   moveq #1,d0
   126ce:	,--|-- bra.s 1271e <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   126d0:	|  '-> moveq #24,d0
   126d2:	|      add.l 20(sp),d0
   126d6:	|      move.l d0,-(sp)
   126d8:	|      jsr 157de <trimStack>
   126de:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   126e0:	|      move.l 8(sp),-(sp)
   126e4:	|      jsr 15f44 <stringWidth>
   126ea:	|      addq.l #4,sp
   126ec:	|      move.l d0,d1
   126ee:	|      moveq #28,d0
   126f0:	|      add.l 20(sp),d0
   126f4:	|      move.l d1,-(sp)
   126f6:	|      pea 1 <_start+0x1>
   126fa:	|      move.l d0,-(sp)
   126fc:	|      jsr 1574c <setVariable>
   12702:	|      lea 12(sp),sp
	FreeVec(theText);
   12706:	|      move.l 8(sp),4(sp)
   1270c:	|      move.l 1d188 <SysBase>,d0
   12712:	|      movea.l d0,a6
   12714:	|      movea.l 4(sp),a1
   12718:	|      jsr -690(a6)
	return BR_CONTINUE;
   1271c:	|      moveq #2,d0
}
   1271e:	'----> movea.l (sp)+,a6
   12720:	       addq.l #8,sp
   12722:	       rts

00012724 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   12724:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12726:	       movea.l 12(sp),a0
   1272a:	       move.l 24(a0),d0
   1272e:	       move.l d0,-(sp)
   12730:	       pea 1 <_start+0x1>
   12734:	       move.l sp,d0
   12736:	       addq.l #8,d0
   12738:	       move.l d0,-(sp)
   1273a:	       jsr 14e5a <getValueType>
   12740:	       lea 12(sp),sp
   12744:	       tst.w d0
   12746:	   ,-- bne.s 1274c <builtIn_hardScroll+0x28>
   12748:	   |   moveq #1,d0
   1274a:	,--|-- bra.s 1276a <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   1274c:	|  '-> moveq #24,d0
   1274e:	|      add.l 12(sp),d0
   12752:	|      move.l d0,-(sp)
   12754:	|      jsr 157de <trimStack>
   1275a:	|      addq.l #4,sp
	hardScroll (v);
   1275c:	|      move.l (sp),d0
   1275e:	|      move.l d0,-(sp)
   12760:	|      jsr d8c0 <hardScroll>
   12766:	|      addq.l #4,sp
	return BR_CONTINUE;
   12768:	|      moveq #2,d0
}
   1276a:	'----> addq.l #4,sp
   1276c:	       rts

0001276e <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   1276e:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12770:	       movea.l 12(sp),a0
   12774:	       move.l 24(a0),d0
   12778:	       move.l d0,-(sp)
   1277a:	       pea 7 <_start+0x7>
   1277e:	       move.l sp,d0
   12780:	       addq.l #8,d0
   12782:	       move.l d0,-(sp)
   12784:	       jsr 14e5a <getValueType>
   1278a:	       lea 12(sp),sp
   1278e:	       tst.w d0
   12790:	   ,-- bne.s 12796 <builtIn_isScreenRegion+0x28>
   12792:	   |   moveq #1,d0
   12794:	,--|-- bra.s 127d6 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   12796:	|  '-> moveq #24,d0
   12798:	|      add.l 12(sp),d0
   1279c:	|      move.l d0,-(sp)
   1279e:	|      jsr 157de <trimStack>
   127a4:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   127a6:	|      move.l (sp),d0
   127a8:	|      move.l d0,-(sp)
   127aa:	|      jsr 1611c <getRegionForObject>
   127b0:	|      addq.l #4,sp
   127b2:	|      tst.l d0
   127b4:	|      sne d0
   127b6:	|      neg.b d0
   127b8:	|      moveq #0,d1
   127ba:	|      move.b d0,d1
   127bc:	|      moveq #28,d0
   127be:	|      add.l 12(sp),d0
   127c2:	|      move.l d1,-(sp)
   127c4:	|      pea 1 <_start+0x1>
   127c8:	|      move.l d0,-(sp)
   127ca:	|      jsr 1574c <setVariable>
   127d0:	|      lea 12(sp),sp
	return BR_CONTINUE;
   127d4:	|      moveq #2,d0
}
   127d6:	'----> addq.l #4,sp
   127d8:	       rts

000127da <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   127da:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   127dc:	       movea.l 12(sp),a0
   127e0:	       move.l 24(a0),d0
   127e4:	       move.l d0,-(sp)
   127e6:	       pea 1 <_start+0x1>
   127ea:	       move.l sp,d0
   127ec:	       addq.l #8,d0
   127ee:	       move.l d0,-(sp)
   127f0:	       jsr 14e5a <getValueType>
   127f6:	       lea 12(sp),sp
   127fa:	       tst.w d0
   127fc:	   ,-- bne.s 12802 <builtIn_setSpeechSpeed+0x28>
   127fe:	   |   moveq #1,d0
   12800:	,--|-- bra.s 12850 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   12802:	|  '-> moveq #24,d0
   12804:	|      add.l 12(sp),d0
   12808:	|      move.l d0,-(sp)
   1280a:	|      jsr 157de <trimStack>
   12810:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   12812:	|      move.l (sp),d0
   12814:	|      move.l d0,-(sp)
   12816:	|      jsr 17d6c <__floatsisf>
   1281c:	|      addq.l #4,sp
   1281e:	|      move.l #1008981770,-(sp)
   12824:	|      move.l d0,-(sp)
   12826:	|      jsr 17e1e <__mulsf3>
   1282c:	|      addq.l #8,sp
   1282e:	|      move.l d0,1caf2 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   12834:	|      moveq #28,d0
   12836:	|      add.l 12(sp),d0
   1283a:	|      pea 1 <_start+0x1>
   1283e:	|      pea 1 <_start+0x1>
   12842:	|      move.l d0,-(sp)
   12844:	|      jsr 1574c <setVariable>
   1284a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1284e:	|      moveq #2,d0
}
   12850:	'----> addq.l #4,sp
   12852:	       rts

00012854 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   12854:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12856:	       movea.l 12(sp),a0
   1285a:	       move.l 24(a0),d0
   1285e:	       move.l d0,-(sp)
   12860:	       pea 1 <_start+0x1>
   12864:	       move.l sp,d0
   12866:	       addq.l #8,d0
   12868:	       move.l d0,-(sp)
   1286a:	       jsr 14e5a <getValueType>
   12870:	       lea 12(sp),sp
   12874:	       tst.w d0
   12876:	   ,-- bne.s 1287c <builtIn_setFontSpacing+0x28>
   12878:	   |   moveq #1,d0
   1287a:	,--|-- bra.s 128b2 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   1287c:	|  '-> move.l (sp),d0
   1287e:	|      move.l d0,d0
   12880:	|      move.w d0,1d080 <fontSpace>
	trimStack (&fun -> stack);
   12886:	|      moveq #24,d0
   12888:	|      add.l 12(sp),d0
   1288c:	|      move.l d0,-(sp)
   1288e:	|      jsr 157de <trimStack>
   12894:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12896:	|      moveq #28,d0
   12898:	|      add.l 12(sp),d0
   1289c:	|      pea 1 <_start+0x1>
   128a0:	|      pea 1 <_start+0x1>
   128a4:	|      move.l d0,-(sp)
   128a6:	|      jsr 1574c <setVariable>
   128ac:	|      lea 12(sp),sp
	return BR_CONTINUE;
   128b0:	|      moveq #2,d0
}
   128b2:	'----> addq.l #4,sp
   128b4:	       rts

000128b6 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   128b6:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   128b8:	          movea.l 12(sp),a0
   128bc:	          move.l 24(a0),d0
   128c0:	          move.l d0,-(sp)
   128c2:	          pea 1 <_start+0x1>
   128c6:	          move.l sp,d0
   128c8:	          addq.l #8,d0
   128ca:	          move.l d0,-(sp)
   128cc:	          jsr 14e5a <getValueType>
   128d2:	          lea 12(sp),sp
   128d6:	          tst.w d0
   128d8:	      ,-- bne.s 128de <builtIn_transitionLevel+0x28>
   128da:	      |   moveq #1,d0
   128dc:	,-----|-- bra.s 12932 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   128de:	|     '-> moveq #24,d0
   128e0:	|         add.l 12(sp),d0
   128e4:	|         move.l d0,-(sp)
   128e6:	|         jsr 157de <trimStack>
   128ec:	|         addq.l #4,sp

	if (number < 0)
   128ee:	|         move.l (sp),d0
   128f0:	|     ,-- bpl.s 128fa <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   128f2:	|     |   clr.b 1caf6 <brightnessLevel>
   128f8:	|  ,--|-- bra.s 12916 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   128fa:	|  |  '-> move.l (sp),d0
   128fc:	|  |      cmpi.l #255,d0
   12902:	|  |  ,-- ble.s 1290c <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   12904:	|  |  |   st 1caf6 <brightnessLevel>
   1290a:	|  +--|-- bra.s 12916 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   1290c:	|  |  '-> move.l (sp),d0
   1290e:	|  |      move.l d0,d0
   12910:	|  |      move.b d0,1caf6 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   12916:	|  '----> moveq #28,d0
   12918:	|         add.l 12(sp),d0
   1291c:	|         pea 1 <_start+0x1>
   12920:	|         pea 1 <_start+0x1>
   12924:	|         move.l d0,-(sp)
   12926:	|         jsr 1574c <setVariable>
   1292c:	|         lea 12(sp),sp
	return BR_CONTINUE;
   12930:	|         moveq #2,d0
}
   12932:	'-------> addq.l #4,sp
   12934:	          rts

00012936 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   12936:	movea.l 8(sp),a0
   1293a:	move.l 24(a0),d0
   1293e:	move.l d0,-(sp)
   12940:	jsr 1539a <getBoolean>
   12946:	addq.l #4,sp
   12948:	move.w d0,1d128 <captureAllKeys>
	trimStack (&fun -> stack);
   1294e:	moveq #24,d0
   12950:	add.l 8(sp),d0
   12954:	move.l d0,-(sp)
   12956:	jsr 157de <trimStack>
   1295c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   1295e:	move.w 1d128 <captureAllKeys>,d0
   12964:	movea.w d0,a0
   12966:	moveq #28,d0
   12968:	add.l 8(sp),d0
   1296c:	move.l a0,-(sp)
   1296e:	pea 1 <_start+0x1>
   12972:	move.l d0,-(sp)
   12974:	jsr 1574c <setVariable>
   1297a:	lea 12(sp),sp
	return BR_CONTINUE;
   1297e:	moveq #2,d0
}
   12980:	rts

00012982 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12982:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12986:	       movea.l 20(sp),a0
   1298a:	       move.l 24(a0),d0
   1298e:	       move.l d0,-(sp)
   12990:	       pea 1 <_start+0x1>
   12994:	       moveq #12,d0
   12996:	       add.l sp,d0
   12998:	       move.l d0,-(sp)
   1299a:	       jsr 14e5a <getValueType>
   129a0:	       lea 12(sp),sp
   129a4:	       tst.w d0
   129a6:	   ,-- bne.s 129ae <builtIn_spinCharacter+0x2c>
   129a8:	   |   moveq #1,d0
   129aa:	,--|-- bra.w 12a5e <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   129ae:	|  '-> moveq #24,d0
   129b0:	|      add.l 20(sp),d0
   129b4:	|      move.l d0,-(sp)
   129b6:	|      jsr 157de <trimStack>
   129bc:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   129be:	|      movea.l 20(sp),a0
   129c2:	|      move.l 24(a0),d0
   129c6:	|      move.l d0,-(sp)
   129c8:	|      pea 7 <_start+0x7>
   129cc:	|      lea 8(sp),a0
   129d0:	|      move.l a0,-(sp)
   129d2:	|      jsr 14e5a <getValueType>
   129d8:	|      lea 12(sp),sp
   129dc:	|      tst.w d0
   129de:	|  ,-- bne.s 129e4 <builtIn_spinCharacter+0x62>
   129e0:	|  |   moveq #1,d0
   129e2:	+--|-- bra.s 12a5e <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   129e4:	|  '-> moveq #24,d0
   129e6:	|      add.l 20(sp),d0
   129ea:	|      move.l d0,-(sp)
   129ec:	|      jsr 157de <trimStack>
   129f2:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   129f4:	|      move.l (sp),d0
   129f6:	|      move.l d0,-(sp)
   129f8:	|      jsr ac00 <findPerson>
   129fe:	|      addq.l #4,sp
   12a00:	|      move.l d0,8(sp)
	if (thisPerson) {
   12a04:	|  ,-- beq.s 12a44 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   12a06:	|  |   move.l 4(sp),d0
   12a0a:	|  |   movea.l 8(sp),a0
   12a0e:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   12a12:	|  |   movea.l 8(sp),a0
   12a16:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   12a1c:	|  |   movea.l 8(sp),a0
   12a20:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12a26:	|  |   moveq #28,d0
   12a28:	|  |   add.l 20(sp),d0
   12a2c:	|  |   pea 1 <_start+0x1>
   12a30:	|  |   pea 1 <_start+0x1>
   12a34:	|  |   move.l d0,-(sp)
   12a36:	|  |   jsr 1574c <setVariable>
   12a3c:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   12a40:	|  |   moveq #3,d0
   12a42:	+--|-- bra.s 12a5e <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12a44:	|  '-> moveq #28,d0
   12a46:	|      add.l 20(sp),d0
   12a4a:	|      clr.l -(sp)
   12a4c:	|      pea 1 <_start+0x1>
   12a50:	|      move.l d0,-(sp)
   12a52:	|      jsr 1574c <setVariable>
   12a58:	|      lea 12(sp),sp
		return BR_CONTINUE;
   12a5c:	|      moveq #2,d0
	}
}
   12a5e:	'----> lea 12(sp),sp
   12a62:	       rts

00012a64 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   12a64:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a66:	          movea.l 16(sp),a0
   12a6a:	          move.l 24(a0),d0
   12a6e:	          move.l d0,-(sp)
   12a70:	          pea 7 <_start+0x7>
   12a74:	          move.l sp,d0
   12a76:	          addq.l #8,d0
   12a78:	          move.l d0,-(sp)
   12a7a:	          jsr 14e5a <getValueType>
   12a80:	          lea 12(sp),sp
   12a84:	          tst.w d0
   12a86:	      ,-- bne.s 12a8c <builtIn_getCharacterDirection+0x28>
   12a88:	      |   moveq #1,d0
   12a8a:	,-----|-- bra.s 12aea <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   12a8c:	|     '-> moveq #24,d0
   12a8e:	|         add.l 16(sp),d0
   12a92:	|         move.l d0,-(sp)
   12a94:	|         jsr 157de <trimStack>
   12a9a:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12a9c:	|         move.l (sp),d0
   12a9e:	|         move.l d0,-(sp)
   12aa0:	|         jsr ac00 <findPerson>
   12aa6:	|         addq.l #4,sp
   12aa8:	|         move.l d0,4(sp)
	if (thisPerson) {
   12aac:	|  ,----- beq.s 12ad0 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   12aae:	|  |      movea.l 4(sp),a0
   12ab2:	|  |      move.l 106(a0),d1
   12ab6:	|  |      moveq #28,d0
   12ab8:	|  |      add.l 16(sp),d0
   12abc:	|  |      move.l d1,-(sp)
   12abe:	|  |      pea 1 <_start+0x1>
   12ac2:	|  |      move.l d0,-(sp)
   12ac4:	|  |      jsr 1574c <setVariable>
   12aca:	|  |      lea 12(sp),sp
   12ace:	|  |  ,-- bra.s 12ae8 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12ad0:	|  '--|-> moveq #28,d0
   12ad2:	|     |   add.l 16(sp),d0
   12ad6:	|     |   clr.l -(sp)
   12ad8:	|     |   pea 1 <_start+0x1>
   12adc:	|     |   move.l d0,-(sp)
   12ade:	|     |   jsr 1574c <setVariable>
   12ae4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12ae8:	|     '-> moveq #2,d0
}
   12aea:	'-------> addq.l #8,sp
   12aec:	          rts

00012aee <builtIn_isCharacter>:

builtIn(isCharacter)
{
   12aee:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12af0:	       movea.l 16(sp),a0
   12af4:	       move.l 24(a0),d0
   12af8:	       move.l d0,-(sp)
   12afa:	       pea 7 <_start+0x7>
   12afe:	       move.l sp,d0
   12b00:	       addq.l #8,d0
   12b02:	       move.l d0,-(sp)
   12b04:	       jsr 14e5a <getValueType>
   12b0a:	       lea 12(sp),sp
   12b0e:	       tst.w d0
   12b10:	   ,-- bne.s 12b16 <builtIn_isCharacter+0x28>
   12b12:	   |   moveq #1,d0
   12b14:	,--|-- bra.s 12b58 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   12b16:	|  '-> moveq #24,d0
   12b18:	|      add.l 16(sp),d0
   12b1c:	|      move.l d0,-(sp)
   12b1e:	|      jsr 157de <trimStack>
   12b24:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12b26:	|      move.l (sp),d0
   12b28:	|      move.l d0,-(sp)
   12b2a:	|      jsr ac00 <findPerson>
   12b30:	|      addq.l #4,sp
   12b32:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   12b36:	|      sne d0
   12b38:	|      neg.b d0
   12b3a:	|      moveq #0,d1
   12b3c:	|      move.b d0,d1
   12b3e:	|      moveq #28,d0
   12b40:	|      add.l 16(sp),d0
   12b44:	|      move.l d1,-(sp)
   12b46:	|      pea 1 <_start+0x1>
   12b4a:	|      move.l d0,-(sp)
   12b4c:	|      jsr 1574c <setVariable>
   12b52:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12b56:	|      moveq #2,d0
}
   12b58:	'----> addq.l #8,sp
   12b5a:	       rts

00012b5c <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   12b5c:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12b5e:	          movea.l 16(sp),a0
   12b62:	          move.l 24(a0),d0
   12b66:	          move.l d0,-(sp)
   12b68:	          pea 7 <_start+0x7>
   12b6c:	          move.l sp,d0
   12b6e:	          addq.l #8,d0
   12b70:	          move.l d0,-(sp)
   12b72:	          jsr 14e5a <getValueType>
   12b78:	          lea 12(sp),sp
   12b7c:	          tst.w d0
   12b7e:	      ,-- bne.s 12b84 <builtIn_normalCharacter+0x28>
   12b80:	      |   moveq #1,d0
   12b82:	,-----|-- bra.s 12c00 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   12b84:	|     '-> moveq #24,d0
   12b86:	|         add.l 16(sp),d0
   12b8a:	|         move.l d0,-(sp)
   12b8c:	|         jsr 157de <trimStack>
   12b92:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12b94:	|         move.l (sp),d0
   12b96:	|         move.l d0,-(sp)
   12b98:	|         jsr ac00 <findPerson>
   12b9e:	|         addq.l #4,sp
   12ba0:	|         move.l d0,4(sp)
	if (thisPerson)
   12ba4:	|  ,----- beq.s 12be6 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   12ba6:	|  |      movea.l 4(sp),a0
   12baa:	|  |      movea.l 80(a0),a0
   12bae:	|  |      move.l (a0),d1
   12bb0:	|  |      movea.l 4(sp),a0
   12bb4:	|  |      move.l 106(a0),d0
   12bb8:	|  |      add.l d0,d0
   12bba:	|  |      add.l d0,d0
   12bbc:	|  |      movea.l d1,a0
   12bbe:	|  |      adda.l d0,a0
   12bc0:	|  |      move.l (a0),d0
   12bc2:	|  |      movea.l 4(sp),a0
   12bc6:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12bca:	|  |      moveq #28,d0
   12bcc:	|  |      add.l 16(sp),d0
   12bd0:	|  |      pea 1 <_start+0x1>
   12bd4:	|  |      pea 1 <_start+0x1>
   12bd8:	|  |      move.l d0,-(sp)
   12bda:	|  |      jsr 1574c <setVariable>
   12be0:	|  |      lea 12(sp),sp
   12be4:	|  |  ,-- bra.s 12bfe <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12be6:	|  '--|-> moveq #28,d0
   12be8:	|     |   add.l 16(sp),d0
   12bec:	|     |   clr.l -(sp)
   12bee:	|     |   pea 1 <_start+0x1>
   12bf2:	|     |   move.l d0,-(sp)
   12bf4:	|     |   jsr 1574c <setVariable>
   12bfa:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12bfe:	|     '-> moveq #2,d0
}
   12c00:	'-------> addq.l #8,sp
   12c02:	          rts

00012c04 <builtIn_isMoving>:

builtIn(isMoving)
{
   12c04:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12c06:	          movea.l 16(sp),a0
   12c0a:	          move.l 24(a0),d0
   12c0e:	          move.l d0,-(sp)
   12c10:	          pea 7 <_start+0x7>
   12c14:	          move.l sp,d0
   12c16:	          addq.l #8,d0
   12c18:	          move.l d0,-(sp)
   12c1a:	          jsr 14e5a <getValueType>
   12c20:	          lea 12(sp),sp
   12c24:	          tst.w d0
   12c26:	      ,-- bne.s 12c2c <builtIn_isMoving+0x28>
   12c28:	      |   moveq #1,d0
   12c2a:	,-----|-- bra.s 12c8c <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   12c2c:	|     '-> moveq #24,d0
   12c2e:	|         add.l 16(sp),d0
   12c32:	|         move.l d0,-(sp)
   12c34:	|         jsr 157de <trimStack>
   12c3a:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12c3c:	|         move.l (sp),d0
   12c3e:	|         move.l d0,-(sp)
   12c40:	|         jsr ac00 <findPerson>
   12c46:	|         addq.l #4,sp
   12c48:	|         move.l d0,4(sp)
	if (thisPerson)
   12c4c:	|  ,----- beq.s 12c72 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   12c4e:	|  |      movea.l 4(sp),a0
   12c52:	|  |      move.w 64(a0),d0
   12c56:	|  |      movea.w d0,a0
   12c58:	|  |      moveq #28,d0
   12c5a:	|  |      add.l 16(sp),d0
   12c5e:	|  |      move.l a0,-(sp)
   12c60:	|  |      pea 1 <_start+0x1>
   12c64:	|  |      move.l d0,-(sp)
   12c66:	|  |      jsr 1574c <setVariable>
   12c6c:	|  |      lea 12(sp),sp
   12c70:	|  |  ,-- bra.s 12c8a <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12c72:	|  '--|-> moveq #28,d0
   12c74:	|     |   add.l 16(sp),d0
   12c78:	|     |   clr.l -(sp)
   12c7a:	|     |   pea 1 <_start+0x1>
   12c7e:	|     |   move.l d0,-(sp)
   12c80:	|     |   jsr 1574c <setVariable>
   12c86:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12c8a:	|     '-> moveq #2,d0
}
   12c8c:	'-------> addq.l #8,sp
   12c8e:	          rts

00012c90 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12c90:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12c94:	          movea.l 20(sp),a0
   12c98:	          move.l 24(a0),d0
   12c9c:	          move.l d0,-(sp)
   12c9e:	          pea 7 <_start+0x7>
   12ca2:	          lea 8(sp),a0
   12ca6:	          move.l a0,-(sp)
   12ca8:	          jsr 14e5a <getValueType>
   12cae:	          lea 12(sp),sp
   12cb2:	          tst.w d0
   12cb4:	      ,-- bne.s 12cbc <builtIn_fetchEvent+0x2c>
   12cb6:	      |   moveq #1,d0
   12cb8:	,-----|-- bra.w 12d50 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12cbc:	|     '-> moveq #24,d0
   12cbe:	|         add.l 20(sp),d0
   12cc2:	|         move.l d0,-(sp)
   12cc4:	|         jsr 157de <trimStack>
   12cca:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12ccc:	|         movea.l 20(sp),a0
   12cd0:	|         move.l 24(a0),d0
   12cd4:	|         move.l d0,-(sp)
   12cd6:	|         pea 7 <_start+0x7>
   12cda:	|         moveq #12,d0
   12cdc:	|         add.l sp,d0
   12cde:	|         move.l d0,-(sp)
   12ce0:	|         jsr 14e5a <getValueType>
   12ce6:	|         lea 12(sp),sp
   12cea:	|         tst.w d0
   12cec:	|     ,-- bne.s 12cf2 <builtIn_fetchEvent+0x62>
   12cee:	|     |   moveq #1,d0
   12cf0:	+-----|-- bra.s 12d50 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12cf2:	|     '-> moveq #24,d0
   12cf4:	|         add.l 20(sp),d0
   12cf8:	|         move.l d0,-(sp)
   12cfa:	|         jsr 157de <trimStack>
   12d00:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12d02:	|         move.l (sp),d1
   12d04:	|         move.l 4(sp),d0
   12d08:	|         move.l d1,-(sp)
   12d0a:	|         move.l d0,-(sp)
   12d0c:	|         jsr dba2 <getCombinationFunction>
   12d12:	|         addq.l #8,sp
   12d14:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   12d18:	|  ,----- beq.s 12d36 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   12d1a:	|  |      moveq #28,d0
   12d1c:	|  |      add.l 20(sp),d0
   12d20:	|  |      move.l 8(sp),-(sp)
   12d24:	|  |      pea 2 <_start+0x2>
   12d28:	|  |      move.l d0,-(sp)
   12d2a:	|  |      jsr 1574c <setVariable>
   12d30:	|  |      lea 12(sp),sp
   12d34:	|  |  ,-- bra.s 12d4e <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12d36:	|  '--|-> moveq #28,d0
   12d38:	|     |   add.l 20(sp),d0
   12d3c:	|     |   clr.l -(sp)
   12d3e:	|     |   pea 1 <_start+0x1>
   12d42:	|     |   move.l d0,-(sp)
   12d44:	|     |   jsr 1574c <setVariable>
   12d4a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12d4e:	|     '-> moveq #2,d0
}
   12d50:	'-------> lea 12(sp),sp
   12d54:	          rts

00012d56 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   12d56:	       lea -24(sp),sp
   12d5a:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   12d5c:	       movea.l 36(sp),a0
   12d60:	       move.l 24(a0),d0
   12d64:	       move.l d0,-(sp)
   12d66:	       jsr 15430 <getTextFromAnyVar>
   12d6c:	       addq.l #4,sp
   12d6e:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12d72:	       moveq #24,d0
   12d74:	       add.l 36(sp),d0
   12d78:	       move.l d0,-(sp)
   12d7a:	       jsr 157de <trimStack>
   12d80:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12d82:	       move.l 24(sp),-(sp)
   12d86:	       jsr 2fe <encodeFilename>
   12d8c:	       addq.l #4,sp
   12d8e:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12d92:	       move.l 24(sp),16(sp)
   12d98:	       move.l 1d188 <SysBase>,d0
   12d9e:	       movea.l d0,a6
   12da0:	       movea.l 16(sp),a1
   12da4:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12da8:	       move.l 20(sp),-(sp)
   12dac:	       jsr e95a <failSecurityCheck>
   12db2:	       addq.l #4,sp
   12db4:	       tst.w d0
   12db6:	   ,-- beq.s 12dbc <builtIn_deleteFile+0x66>
   12db8:	   |   moveq #1,d0
   12dba:	,--|-- bra.s 12e0a <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12dbc:	|  '-> move.l 20(sp),12(sp)
   12dc2:	|      move.l 1d190 <DOSBase>,d0
   12dc8:	|      movea.l d0,a6
   12dca:	|      move.l 12(sp),d1
   12dce:	|      jsr -72(a6)
   12dd2:	|      move.l d0,8(sp)
   12dd6:	|      move.l 8(sp),d1
   12dda:	|      moveq #28,d0
   12ddc:	|      add.l 36(sp),d0
   12de0:	|      move.l d1,-(sp)
   12de2:	|      pea 1 <_start+0x1>
   12de6:	|      move.l d0,-(sp)
   12de8:	|      jsr 1574c <setVariable>
   12dee:	|      lea 12(sp),sp
    FreeVec(nam);
   12df2:	|      move.l 20(sp),4(sp)
   12df8:	|      move.l 1d188 <SysBase>,d0
   12dfe:	|      movea.l d0,a6
   12e00:	|      movea.l 4(sp),a1
   12e04:	|      jsr -690(a6)

    return BR_CONTINUE;
   12e08:	|      moveq #2,d0
}
   12e0a:	'----> movea.l (sp)+,a6
   12e0c:	       lea 24(sp),sp
   12e10:	       rts

00012e12 <builtIn_renameFile>:

builtIn(renameFile)
{
   12e12:	       lea -40(sp),sp
   12e16:	       move.l a6,-(sp)
   12e18:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12e1a:	       movea.l 56(sp),a0
   12e1e:	       move.l 24(a0),d0
   12e22:	       move.l d0,-(sp)
   12e24:	       jsr 15430 <getTextFromAnyVar>
   12e2a:	       addq.l #4,sp
   12e2c:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   12e30:	       move.l 44(sp),-(sp)
   12e34:	       jsr 2fe <encodeFilename>
   12e3a:	       addq.l #4,sp
   12e3c:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   12e40:	       moveq #24,d0
   12e42:	       add.l 56(sp),d0
   12e46:	       move.l d0,-(sp)
   12e48:	       jsr 157de <trimStack>
   12e4e:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   12e50:	       move.l 40(sp),-(sp)
   12e54:	       jsr e95a <failSecurityCheck>
   12e5a:	       addq.l #4,sp
   12e5c:	       tst.w d0
   12e5e:	   ,-- beq.s 12e66 <builtIn_renameFile+0x54>
   12e60:	   |   moveq #1,d0
   12e62:	,--|-- bra.w 12f4c <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12e66:	|  '-> move.l 44(sp),36(sp)
   12e6c:	|      move.l 1d188 <SysBase>,d0
   12e72:	|      movea.l d0,a6
   12e74:	|      movea.l 36(sp),a1
   12e78:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12e7c:	|      movea.l 56(sp),a0
   12e80:	|      move.l 24(a0),d0
   12e84:	|      move.l d0,-(sp)
   12e86:	|      jsr 15430 <getTextFromAnyVar>
   12e8c:	|      addq.l #4,sp
   12e8e:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12e92:	|      move.l 44(sp),-(sp)
   12e96:	|      jsr 2fe <encodeFilename>
   12e9c:	|      addq.l #4,sp
   12e9e:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12ea2:	|      moveq #24,d0
   12ea4:	|      add.l 56(sp),d0
   12ea8:	|      move.l d0,-(sp)
   12eaa:	|      jsr 157de <trimStack>
   12eb0:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12eb2:	|      move.l 32(sp),-(sp)
   12eb6:	|      jsr e95a <failSecurityCheck>
   12ebc:	|      addq.l #4,sp
   12ebe:	|      tst.w d0
   12ec0:	|  ,-- beq.s 12ec8 <builtIn_renameFile+0xb6>
   12ec2:	|  |   moveq #1,d0
   12ec4:	+--|-- bra.w 12f4c <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12ec8:	|  '-> move.l 44(sp),28(sp)
   12ece:	|      move.l 1d188 <SysBase>,d0
   12ed4:	|      movea.l d0,a6
   12ed6:	|      movea.l 28(sp),a1
   12eda:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12ede:	|      move.l 32(sp),24(sp)
   12ee4:	|      move.l 40(sp),20(sp)
   12eea:	|      move.l 1d190 <DOSBase>,d0
   12ef0:	|      movea.l d0,a6
   12ef2:	|      move.l 24(sp),d1
   12ef6:	|      move.l 20(sp),d2
   12efa:	|      jsr -78(a6)
   12efe:	|      move.l d0,16(sp)
   12f02:	|      move.l 16(sp),d1
   12f06:	|      moveq #28,d0
   12f08:	|      add.l 56(sp),d0
   12f0c:	|      move.l d1,-(sp)
   12f0e:	|      pea 1 <_start+0x1>
   12f12:	|      move.l d0,-(sp)
   12f14:	|      jsr 1574c <setVariable>
   12f1a:	|      lea 12(sp),sp
	FreeVec(nam);
   12f1e:	|      move.l 32(sp),12(sp)
   12f24:	|      move.l 1d188 <SysBase>,d0
   12f2a:	|      movea.l d0,a6
   12f2c:	|      movea.l 12(sp),a1
   12f30:	|      jsr -690(a6)
	FreeVec(newnam);
   12f34:	|      move.l 40(sp),8(sp)
   12f3a:	|      move.l 1d188 <SysBase>,d0
   12f40:	|      movea.l d0,a6
   12f42:	|      movea.l 8(sp),a1
   12f46:	|      jsr -690(a6)

	return BR_CONTINUE;
   12f4a:	|      moveq #2,d0
}
   12f4c:	'----> move.l (sp)+,d2
   12f4e:	       movea.l (sp)+,a6
   12f50:	       lea 40(sp),sp
   12f54:	       rts

00012f56 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   12f56:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12f58:	       movea.l 12(sp),a0
   12f5c:	       move.l 24(a0),d0
   12f60:	       move.l d0,-(sp)
   12f62:	       pea 5 <_start+0x5>
   12f66:	       move.l sp,d0
   12f68:	       addq.l #8,d0
   12f6a:	       move.l d0,-(sp)
   12f6c:	       jsr 14e5a <getValueType>
   12f72:	       lea 12(sp),sp
   12f76:	       tst.w d0
   12f78:	   ,-- bne.s 12f7e <builtIn_cacheSound+0x28>
   12f7a:	   |   moveq #1,d0
   12f7c:	,--|-- bra.s 12fa6 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12f7e:	|  '-> moveq #24,d0
   12f80:	|      add.l 12(sp),d0
   12f84:	|      move.l d0,-(sp)
   12f86:	|      jsr 157de <trimStack>
   12f8c:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12f8e:	|      move.l (sp),d0
   12f90:	|      move.l d0,-(sp)
   12f92:	|      jsr d798 <cacheSound>
   12f98:	|      addq.l #4,sp
   12f9a:	|      moveq #-1,d1
   12f9c:	|      cmp.l d0,d1
   12f9e:	|  ,-- bne.s 12fa4 <builtIn_cacheSound+0x4e>
   12fa0:	|  |   moveq #1,d0
   12fa2:	+--|-- bra.s 12fa6 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12fa4:	|  '-> moveq #2,d0
}
   12fa6:	'----> addq.l #4,sp
   12fa8:	       rts

00012faa <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12faa:	pea 1a3e8 <PutChar+0x200c>
   12fb0:	jsr 1793a <KPrintF>
   12fb6:	addq.l #4,sp
	return BR_CONTINUE;
   12fb8:	moveq #2,d0
}
   12fba:	rts

00012fbc <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12fbc:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12fc0:	          movea.l 20(sp),a0
   12fc4:	          move.l 24(a0),d0
   12fc8:	          move.l d0,-(sp)
   12fca:	          pea 1 <_start+0x1>
   12fce:	          moveq #12,d0
   12fd0:	          add.l sp,d0
   12fd2:	          move.l d0,-(sp)
   12fd4:	          jsr 14e5a <getValueType>
   12fda:	          lea 12(sp),sp
   12fde:	          tst.w d0
   12fe0:	      ,-- bne.s 12fe8 <builtIn_setCharacterSpinSpeed+0x2c>
   12fe2:	      |   moveq #1,d0
   12fe4:	,-----|-- bra.w 13082 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12fe8:	|     '-> moveq #24,d0
   12fea:	|         add.l 20(sp),d0
   12fee:	|         move.l d0,-(sp)
   12ff0:	|         jsr 157de <trimStack>
   12ff6:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12ff8:	|         movea.l 20(sp),a0
   12ffc:	|         move.l 24(a0),d0
   13000:	|         move.l d0,-(sp)
   13002:	|         pea 7 <_start+0x7>
   13006:	|         lea 8(sp),a0
   1300a:	|         move.l a0,-(sp)
   1300c:	|         jsr 14e5a <getValueType>
   13012:	|         lea 12(sp),sp
   13016:	|         tst.w d0
   13018:	|     ,-- bne.s 1301e <builtIn_setCharacterSpinSpeed+0x62>
   1301a:	|     |   moveq #1,d0
   1301c:	+-----|-- bra.s 13082 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   1301e:	|     '-> moveq #24,d0
   13020:	|         add.l 20(sp),d0
   13024:	|         move.l d0,-(sp)
   13026:	|         jsr 157de <trimStack>
   1302c:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   1302e:	|         move.l (sp),d0
   13030:	|         move.l d0,-(sp)
   13032:	|         jsr ac00 <findPerson>
   13038:	|         addq.l #4,sp
   1303a:	|         move.l d0,8(sp)

	if (thisPerson) {
   1303e:	|  ,----- beq.s 13068 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   13040:	|  |      move.l 4(sp),d0
   13044:	|  |      movea.l 8(sp),a0
   13048:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1304c:	|  |      moveq #28,d0
   1304e:	|  |      add.l 20(sp),d0
   13052:	|  |      pea 1 <_start+0x1>
   13056:	|  |      pea 1 <_start+0x1>
   1305a:	|  |      move.l d0,-(sp)
   1305c:	|  |      jsr 1574c <setVariable>
   13062:	|  |      lea 12(sp),sp
   13066:	|  |  ,-- bra.s 13080 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13068:	|  '--|-> moveq #28,d0
   1306a:	|     |   add.l 20(sp),d0
   1306e:	|     |   clr.l -(sp)
   13070:	|     |   pea 1 <_start+0x1>
   13074:	|     |   move.l d0,-(sp)
   13076:	|     |   jsr 1574c <setVariable>
   1307c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13080:	|     '-> moveq #2,d0
}
   13082:	'-------> lea 12(sp),sp
   13086:	          rts

00013088 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   13088:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1308c:	          movea.l 20(sp),a0
   13090:	          move.l 24(a0),d0
   13094:	          move.l d0,-(sp)
   13096:	          pea 1 <_start+0x1>
   1309a:	          moveq #12,d0
   1309c:	          add.l sp,d0
   1309e:	          move.l d0,-(sp)
   130a0:	          jsr 14e5a <getValueType>
   130a6:	          lea 12(sp),sp
   130aa:	          tst.w d0
   130ac:	      ,-- bne.s 130b4 <builtIn_setCharacterAngleOffset+0x2c>
   130ae:	      |   moveq #1,d0
   130b0:	,-----|-- bra.w 1314e <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   130b4:	|     '-> moveq #24,d0
   130b6:	|         add.l 20(sp),d0
   130ba:	|         move.l d0,-(sp)
   130bc:	|         jsr 157de <trimStack>
   130c2:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   130c4:	|         movea.l 20(sp),a0
   130c8:	|         move.l 24(a0),d0
   130cc:	|         move.l d0,-(sp)
   130ce:	|         pea 7 <_start+0x7>
   130d2:	|         lea 8(sp),a0
   130d6:	|         move.l a0,-(sp)
   130d8:	|         jsr 14e5a <getValueType>
   130de:	|         lea 12(sp),sp
   130e2:	|         tst.w d0
   130e4:	|     ,-- bne.s 130ea <builtIn_setCharacterAngleOffset+0x62>
   130e6:	|     |   moveq #1,d0
   130e8:	+-----|-- bra.s 1314e <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   130ea:	|     '-> moveq #24,d0
   130ec:	|         add.l 20(sp),d0
   130f0:	|         move.l d0,-(sp)
   130f2:	|         jsr 157de <trimStack>
   130f8:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   130fa:	|         move.l (sp),d0
   130fc:	|         move.l d0,-(sp)
   130fe:	|         jsr ac00 <findPerson>
   13104:	|         addq.l #4,sp
   13106:	|         move.l d0,8(sp)

	if (thisPerson) {
   1310a:	|  ,----- beq.s 13134 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   1310c:	|  |      move.l 4(sp),d0
   13110:	|  |      movea.l 8(sp),a0
   13114:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   13118:	|  |      moveq #28,d0
   1311a:	|  |      add.l 20(sp),d0
   1311e:	|  |      pea 1 <_start+0x1>
   13122:	|  |      pea 1 <_start+0x1>
   13126:	|  |      move.l d0,-(sp)
   13128:	|  |      jsr 1574c <setVariable>
   1312e:	|  |      lea 12(sp),sp
   13132:	|  |  ,-- bra.s 1314c <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13134:	|  '--|-> moveq #28,d0
   13136:	|     |   add.l 20(sp),d0
   1313a:	|     |   clr.l -(sp)
   1313c:	|     |   pea 1 <_start+0x1>
   13140:	|     |   move.l d0,-(sp)
   13142:	|     |   jsr 1574c <setVariable>
   13148:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1314c:	|     '-> moveq #2,d0
}
   1314e:	'-------> lea 12(sp),sp
   13152:	          rts

00013154 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   13154:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13156:	       movea.l 12(sp),a0
   1315a:	       move.l 24(a0),d0
   1315e:	       move.l d0,-(sp)
   13160:	       pea 1 <_start+0x1>
   13164:	       move.l sp,d0
   13166:	       addq.l #8,d0
   13168:	       move.l d0,-(sp)
   1316a:	       jsr 14e5a <getValueType>
   13170:	       lea 12(sp),sp
   13174:	       tst.w d0
   13176:	   ,-- bne.s 1317c <builtIn_transitionMode+0x28>
   13178:	   |   moveq #1,d0
   1317a:	,--|-- bra.s 131b2 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   1317c:	|  '-> move.l (sp),d0
   1317e:	|      move.l d0,d0
   13180:	|      move.b d0,1d056 <fadeMode>
	trimStack (&fun -> stack);
   13186:	|      moveq #24,d0
   13188:	|      add.l 12(sp),d0
   1318c:	|      move.l d0,-(sp)
   1318e:	|      jsr 157de <trimStack>
   13194:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   13196:	|      moveq #28,d0
   13198:	|      add.l 12(sp),d0
   1319c:	|      pea 1 <_start+0x1>
   131a0:	|      pea 1 <_start+0x1>
   131a4:	|      move.l d0,-(sp)
   131a6:	|      jsr 1574c <setVariable>
   131ac:	|      lea 12(sp),sp
	return BR_CONTINUE;
   131b0:	|      moveq #2,d0
}
   131b2:	'----> addq.l #4,sp
   131b4:	       rts

000131b6 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   131b6:	moveq #24,d0
   131b8:	add.l 8(sp),d0
   131bc:	move.l d0,-(sp)
   131be:	jsr 157de <trimStack>
   131c4:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   131c6:	moveq #28,d0
   131c8:	add.l 8(sp),d0
   131cc:	pea 1 <_start+0x1>
   131d0:	pea 1 <_start+0x1>
   131d4:	move.l d0,-(sp)
   131d6:	jsr 1574c <setVariable>
   131dc:	lea 12(sp),sp
	return BR_CONTINUE;
   131e0:	moveq #2,d0
}
   131e2:	rts

000131e4 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   131e4:	pea 1a412 <PutChar+0x2036>
   131ea:	jsr 1793a <KPrintF>
   131f0:	addq.l #4,sp
	return BR_CONTINUE;
   131f2:	moveq #2,d0
}
   131f4:	rts

000131f6 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   131f6:	       lea -16(sp),sp
   131fa:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   131fc:	       movea.l 28(sp),a0
   13200:	       move.l 24(a0),d0
   13204:	       move.l d0,-(sp)
   13206:	       jsr 15430 <getTextFromAnyVar>
   1320c:	       addq.l #4,sp
   1320e:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   13212:	   ,-- bne.s 1321a <builtIn_saveCustomData+0x24>
   13214:	   |   moveq #1,d0
   13216:	,--|-- bra.w 132cc <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   1321a:	|  '-> move.l 16(sp),-(sp)
   1321e:	|      jsr 2fe <encodeFilename>
   13224:	|      addq.l #4,sp
   13226:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   1322a:	|      move.l 16(sp),8(sp)
   13230:	|      move.l 1d188 <SysBase>,d0
   13236:	|      movea.l d0,a6
   13238:	|      movea.l 8(sp),a1
   1323c:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   13240:	|      move.l 12(sp),-(sp)
   13244:	|      jsr e95a <failSecurityCheck>
   1324a:	|      addq.l #4,sp
   1324c:	|      tst.w d0
   1324e:	|  ,-- beq.s 13254 <builtIn_saveCustomData+0x5e>
   13250:	|  |   moveq #1,d0
   13252:	+--|-- bra.s 132cc <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   13254:	|  '-> moveq #24,d0
   13256:	|      add.l 28(sp),d0
   1325a:	|      move.l d0,-(sp)
   1325c:	|      jsr 157de <trimStack>
   13262:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   13264:	|      movea.l 28(sp),a0
   13268:	|      movea.l 24(a0),a0
   1326c:	|      move.l (a0),d0
   1326e:	|      moveq #6,d1
   13270:	|      cmp.l d0,d1
   13272:	|  ,-- beq.s 13286 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   13274:	|  |   pea 1a43f <PutChar+0x2063>
   1327a:	|  |   jsr 1793a <KPrintF>
   13280:	|  |   addq.l #4,sp
		return BR_ERROR;
   13282:	|  |   moveq #1,d0
   13284:	+--|-- bra.s 132cc <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   13286:	|  '-> movea.l 28(sp),a0
   1328a:	|      move.l 24(a0),d0
   1328e:	|      move.l d0,-(sp)
   13290:	|      move.l 16(sp),-(sp)
   13294:	|      jsr e5aa <stackToFile>
   1329a:	|      addq.l #8,sp
   1329c:	|      tst.w d0
   1329e:	|  ,-- bne.s 132a4 <builtIn_saveCustomData+0xae>
   132a0:	|  |   moveq #1,d0
   132a2:	+--|-- bra.s 132cc <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   132a4:	|  '-> moveq #24,d0
   132a6:	|      add.l 28(sp),d0
   132aa:	|      move.l d0,-(sp)
   132ac:	|      jsr 157de <trimStack>
   132b2:	|      addq.l #4,sp
	FreeVec(fileName);
   132b4:	|      move.l 12(sp),4(sp)
   132ba:	|      move.l 1d188 <SysBase>,d0
   132c0:	|      movea.l d0,a6
   132c2:	|      movea.l 4(sp),a1
   132c6:	|      jsr -690(a6)
	return BR_CONTINUE;
   132ca:	|      moveq #2,d0
}
   132cc:	'----> movea.l (sp)+,a6
   132ce:	       lea 16(sp),sp
   132d2:	       rts

000132d4 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   132d4:	       lea -28(sp),sp
   132d8:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   132da:	       movea.l 40(sp),a0
   132de:	       move.l 24(a0),d0
   132e2:	       move.l d0,-(sp)
   132e4:	       jsr 15430 <getTextFromAnyVar>
   132ea:	       addq.l #4,sp
   132ec:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   132f0:	   ,-- bne.s 132f8 <builtIn_loadCustomData+0x24>
   132f2:	   |   moveq #1,d0
   132f4:	,--|-- bra.w 133f4 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   132f8:	|  '-> move.l 28(sp),-(sp)
   132fc:	|      jsr 2fe <encodeFilename>
   13302:	|      addq.l #4,sp
   13304:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   13308:	|      move.l 28(sp),20(sp)
   1330e:	|      move.l 1d188 <SysBase>,d0
   13314:	|      movea.l d0,a6
   13316:	|      movea.l 20(sp),a1
   1331a:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   1331e:	|      move.l 24(sp),-(sp)
   13322:	|      jsr e95a <failSecurityCheck>
   13328:	|      addq.l #4,sp
   1332a:	|      tst.w d0
   1332c:	|  ,-- beq.s 13334 <builtIn_loadCustomData+0x60>
   1332e:	|  |   moveq #1,d0
   13330:	+--|-- bra.w 133f4 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   13334:	|  '-> moveq #24,d0
   13336:	|      add.l 40(sp),d0
   1333a:	|      move.l d0,-(sp)
   1333c:	|      jsr 157de <trimStack>
   13342:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   13344:	|      moveq #28,d0
   13346:	|      add.l 40(sp),d0
   1334a:	|      move.l d0,-(sp)
   1334c:	|      jsr 150a8 <unlinkVar>
   13352:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   13354:	|      movea.l 40(sp),a0
   13358:	|      moveq #6,d0
   1335a:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   1335e:	|      moveq #12,d0
   13360:	|      move.l d0,16(sp)
   13364:	|      clr.l 12(sp)
   13368:	|      move.l 1d188 <SysBase>,d0
   1336e:	|      movea.l d0,a6
   13370:	|      move.l 16(sp),d0
   13374:	|      move.l 12(sp),d1
   13378:	|      jsr -684(a6)
   1337c:	|      move.l d0,8(sp)
   13380:	|      move.l 8(sp),d0
   13384:	|      movea.l 40(sp),a0
   13388:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   1338c:	|      movea.l 40(sp),a0
   13390:	|      move.l 32(a0),d0
   13394:	|  ,-- bne.s 1339a <builtIn_loadCustomData+0xc6>
   13396:	|  |   moveq #1,d0
   13398:	+--|-- bra.s 133f4 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   1339a:	|  '-> movea.l 40(sp),a0
   1339e:	|      movea.l 32(a0),a0
   133a2:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   133a4:	|      movea.l 40(sp),a0
   133a8:	|      movea.l 32(a0),a0
   133ac:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   133b0:	|      movea.l 40(sp),a0
   133b4:	|      movea.l 32(a0),a0
   133b8:	|      moveq #1,d0
   133ba:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   133be:	|      movea.l 40(sp),a0
   133c2:	|      move.l 32(a0),d0
   133c6:	|      move.l d0,-(sp)
   133c8:	|      move.l 28(sp),-(sp)
   133cc:	|      jsr dfe4 <fileToStack>
   133d2:	|      addq.l #8,sp
   133d4:	|      tst.w d0
   133d6:	|  ,-- bne.s 133dc <builtIn_loadCustomData+0x108>
   133d8:	|  |   moveq #1,d0
   133da:	+--|-- bra.s 133f4 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   133dc:	|  '-> move.l 24(sp),4(sp)
   133e2:	|      move.l 1d188 <SysBase>,d0
   133e8:	|      movea.l d0,a6
   133ea:	|      movea.l 4(sp),a1
   133ee:	|      jsr -690(a6)
	return BR_CONTINUE;
   133f2:	|      moveq #2,d0
}
   133f4:	'----> movea.l (sp)+,a6
   133f6:	       lea 28(sp),sp
   133fa:	       rts

000133fc <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   133fc:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   133fe:	       movea.l 12(sp),a0
   13402:	       move.l 24(a0),d0
   13406:	       move.l d0,-(sp)
   13408:	       pea 1 <_start+0x1>
   1340c:	       move.l sp,d0
   1340e:	       addq.l #8,d0
   13410:	       move.l d0,-(sp)
   13412:	       jsr 14e5a <getValueType>
   13418:	       lea 12(sp),sp
   1341c:	       tst.w d0
   1341e:	   ,-- bne.s 13424 <builtIn_setCustomEncoding+0x28>
   13420:	   |   moveq #1,d0
   13422:	,--|-- bra.s 1345a <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   13424:	|  '-> move.l (sp),d0
   13426:	|      move.l d0,d0
   13428:	|      move.w d0,1d23c <saveEncoding>
	trimStack (&fun -> stack);
   1342e:	|      moveq #24,d0
   13430:	|      add.l 12(sp),d0
   13434:	|      move.l d0,-(sp)
   13436:	|      jsr 157de <trimStack>
   1343c:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1343e:	|      moveq #28,d0
   13440:	|      add.l 12(sp),d0
   13444:	|      pea 1 <_start+0x1>
   13448:	|      pea 1 <_start+0x1>
   1344c:	|      move.l d0,-(sp)
   1344e:	|      jsr 1574c <setVariable>
   13454:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13458:	|      moveq #2,d0
}
   1345a:	'----> addq.l #4,sp
   1345c:	       rts

0001345e <builtIn_freeSound>:

builtIn(freeSound)
{
   1345e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   13460:	       movea.l 12(sp),a0
   13464:	       move.l 24(a0),d0
   13468:	       move.l d0,-(sp)
   1346a:	       pea 5 <_start+0x5>
   1346e:	       move.l sp,d0
   13470:	       addq.l #8,d0
   13472:	       move.l d0,-(sp)
   13474:	       jsr 14e5a <getValueType>
   1347a:	       lea 12(sp),sp
   1347e:	       tst.w d0
   13480:	   ,-- bne.s 13486 <builtIn_freeSound+0x28>
   13482:	   |   moveq #1,d0
   13484:	,--|-- bra.s 134a4 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   13486:	|  '-> moveq #24,d0
   13488:	|      add.l 12(sp),d0
   1348c:	|      move.l d0,-(sp)
   1348e:	|      jsr 157de <trimStack>
   13494:	|      addq.l #4,sp
	huntKillFreeSound (v);
   13496:	|      move.l (sp),d0
   13498:	|      move.l d0,-(sp)
   1349a:	|      jsr d79c <huntKillFreeSound>
   134a0:	|      addq.l #4,sp
	return BR_CONTINUE;
   134a2:	|      moveq #2,d0
}
   134a4:	'----> addq.l #4,sp
   134a6:	       rts

000134a8 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   134a8:	       lea -12(sp),sp
   134ac:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   134ae:	       movea.l 24(sp),a0
   134b2:	       move.l 24(a0),d0
   134b6:	       move.l d0,-(sp)
   134b8:	       pea 1 <_start+0x1>
   134bc:	       moveq #16,d0
   134be:	       add.l sp,d0
   134c0:	       move.l d0,-(sp)
   134c2:	       jsr 14e5a <getValueType>
   134c8:	       lea 12(sp),sp
   134cc:	       tst.w d0
   134ce:	   ,-- bne.s 134d6 <builtIn_parallaxAdd+0x2e>
   134d0:	   |   moveq #1,d0
   134d2:	,--|-- bra.w 135aa <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   134d6:	|  '-> moveq #24,d0
   134d8:	|      add.l 24(sp),d0
   134dc:	|      move.l d0,-(sp)
   134de:	|      jsr 157de <trimStack>
   134e4:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   134e6:	|      movea.l 24(sp),a0
   134ea:	|      move.l 24(a0),d0
   134ee:	|      move.l d0,-(sp)
   134f0:	|      pea 1 <_start+0x1>
   134f4:	|      moveq #20,d0
   134f6:	|      add.l sp,d0
   134f8:	|      move.l d0,-(sp)
   134fa:	|      jsr 14e5a <getValueType>
   13500:	|      lea 12(sp),sp
   13504:	|      tst.w d0
   13506:	|  ,-- bne.s 1350e <builtIn_parallaxAdd+0x66>
   13508:	|  |   moveq #1,d0
   1350a:	+--|-- bra.w 135aa <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1350e:	|  '-> moveq #24,d0
   13510:	|      add.l 24(sp),d0
   13514:	|      move.l d0,-(sp)
   13516:	|      jsr 157de <trimStack>
   1351c:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1351e:	|      movea.l 24(sp),a0
   13522:	|      move.l 24(a0),d0
   13526:	|      move.l d0,-(sp)
   13528:	|      pea 5 <_start+0x5>
   1352c:	|      lea 12(sp),a0
   13530:	|      move.l a0,-(sp)
   13532:	|      jsr 14e5a <getValueType>
   13538:	|      lea 12(sp),sp
   1353c:	|      tst.w d0
   1353e:	|  ,-- bne.s 13544 <builtIn_parallaxAdd+0x9c>
   13540:	|  |   moveq #1,d0
   13542:	+--|-- bra.s 135aa <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   13544:	|  '-> moveq #24,d0
   13546:	|      add.l 24(sp),d0
   1354a:	|      move.l d0,-(sp)
   1354c:	|      jsr 157de <trimStack>
   13552:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   13554:	|      move.l 8(sp),d0
   13558:	|      move.l d0,d0
   1355a:	|      moveq #0,d2
   1355c:	|      move.w d0,d2
   1355e:	|      move.l 12(sp),d0
   13562:	|      move.l d0,d0
   13564:	|      moveq #0,d1
   13566:	|      move.w d0,d1
   13568:	|      move.l 4(sp),d0
   1356c:	|      move.l d0,d0
   1356e:	|      move.w d0,d0
   13570:	|      andi.l #65535,d0
   13576:	|      move.l d2,-(sp)
   13578:	|      move.l d1,-(sp)
   1357a:	|      move.l d0,-(sp)
   1357c:	|      jsr d9c2 <loadParallax>
   13582:	|      lea 12(sp),sp
   13586:	|      tst.w d0
   13588:	|  ,-- bne.s 1358e <builtIn_parallaxAdd+0xe6>
   1358a:	|  |   moveq #1,d0
   1358c:	+--|-- bra.s 135aa <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   1358e:	|  '-> moveq #28,d0
   13590:	|      add.l 24(sp),d0
   13594:	|      pea 1 <_start+0x1>
   13598:	|      pea 1 <_start+0x1>
   1359c:	|      move.l d0,-(sp)
   1359e:	|      jsr 1574c <setVariable>
   135a4:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   135a8:	|      moveq #2,d0
}
   135aa:	'----> move.l (sp)+,d2
   135ac:	       lea 12(sp),sp
   135b0:	       rts

000135b2 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   135b2:	jsr d8fa <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   135b8:	moveq #28,d0
   135ba:	add.l 8(sp),d0
   135be:	pea 1 <_start+0x1>
   135c2:	pea 1 <_start+0x1>
   135c6:	move.l d0,-(sp)
   135c8:	jsr 1574c <setVariable>
   135ce:	lea 12(sp),sp
	return BR_CONTINUE;
   135d2:	moveq #2,d0
}
   135d4:	rts

000135d6 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   135d6:	pea 1a45d <PutChar+0x2081>
   135dc:	jsr 1793a <KPrintF>
   135e2:	addq.l #4,sp

	return BR_CONTINUE;
   135e4:	moveq #2,d0
}
   135e6:	rts

000135e8 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   135e8:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   135ea:	             movea.l 16(sp),a0
   135ee:	             movea.l 24(a0),a0
   135f2:	             move.l (a0),d0
   135f4:	             moveq #1,d1
   135f6:	             cmp.l d0,d1
   135f8:	      ,----- beq.s 13640 <builtIn_makeFastArray+0x58>
   135fa:	      |      moveq #6,d1
   135fc:	      |      cmp.l d0,d1
   135fe:	,-----|----- bne.s 1367e <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   13600:	|     |      movea.l 16(sp),a0
   13604:	|     |      movea.l 24(a0),a0
   13608:	|     |      move.l 4(a0),d1
   1360c:	|     |      moveq #28,d0
   1360e:	|     |      add.l 16(sp),d0
   13612:	|     |      move.l d1,-(sp)
   13614:	|     |      move.l d0,-(sp)
   13616:	|     |      jsr 14f0c <makeFastArrayFromStack>
   1361c:	|     |      addq.l #8,sp
   1361e:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   13622:	|     |      moveq #24,d0
   13624:	|     |      add.l 16(sp),d0
   13628:	|     |      move.l d0,-(sp)
   1362a:	|     |      jsr 157de <trimStack>
   13630:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   13632:	|     |      tst.w 6(sp)
   13636:	|     |  ,-- beq.s 1363c <builtIn_makeFastArray+0x54>
   13638:	|     |  |   moveq #2,d0
   1363a:	|  ,--|--|-- bra.s 13690 <builtIn_makeFastArray+0xa8>
   1363c:	|  |  |  '-> moveq #1,d0
   1363e:	|  +--|----- bra.s 13690 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   13640:	|  |  '----> movea.l 16(sp),a0
   13644:	|  |         movea.l 24(a0),a0
   13648:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   1364e:	|  |         moveq #24,d0
   13650:	|  |         add.l 16(sp),d0
   13654:	|  |         move.l d0,-(sp)
   13656:	|  |         jsr 157de <trimStack>
   1365c:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   1365e:	|  |         moveq #28,d0
   13660:	|  |         add.l 16(sp),d0
   13664:	|  |         move.l 2(sp),-(sp)
   13668:	|  |         move.l d0,-(sp)
   1366a:	|  |         jsr 14f76 <makeFastArraySize>
   13670:	|  |         addq.l #8,sp
   13672:	|  |         tst.w d0
   13674:	|  |     ,-- beq.s 1367a <builtIn_makeFastArray+0x92>
   13676:	|  |     |   moveq #2,d0
   13678:	|  +-----|-- bra.s 13690 <builtIn_makeFastArray+0xa8>
   1367a:	|  |     '-> moveq #1,d0
   1367c:	|  +-------- bra.s 13690 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   1367e:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   13680:	   |         pea 1a486 <PutChar+0x20aa>
   13686:	   |         jsr 1793a <KPrintF>
   1368c:	   |         addq.l #4,sp
	return BR_ERROR;
   1368e:	   |         moveq #1,d0
}
   13690:	   '-------> addq.l #8,sp
   13692:	             rts

00013694 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   13694:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13696:	          movea.l 16(sp),a0
   1369a:	          move.l 24(a0),d0
   1369e:	          move.l d0,-(sp)
   136a0:	          pea 7 <_start+0x7>
   136a4:	          move.l sp,d0
   136a6:	          addq.l #8,d0
   136a8:	          move.l d0,-(sp)
   136aa:	          jsr 14e5a <getValueType>
   136b0:	          lea 12(sp),sp
   136b4:	          tst.w d0
   136b6:	      ,-- bne.s 136bc <builtIn_getCharacterScale+0x28>
   136b8:	      |   moveq #1,d0
   136ba:	,-----|-- bra.s 13736 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   136bc:	|     '-> moveq #24,d0
   136be:	|         add.l 16(sp),d0
   136c2:	|         move.l d0,-(sp)
   136c4:	|         jsr 157de <trimStack>
   136ca:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   136cc:	|         move.l (sp),d0
   136ce:	|         move.l d0,-(sp)
   136d0:	|         jsr ac00 <findPerson>
   136d6:	|         addq.l #4,sp
   136d8:	|         move.l d0,4(sp)
	if (pers) {
   136dc:	|  ,----- beq.s 1371c <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   136de:	|  |      movea.l 4(sp),a0
   136e2:	|  |      move.l 32(a0),d0
   136e6:	|  |      move.l #1120403456,-(sp)
   136ec:	|  |      move.l d0,-(sp)
   136ee:	|  |      jsr 17e1e <__mulsf3>
   136f4:	|  |      addq.l #8,sp
   136f6:	|  |      move.l d0,-(sp)
   136f8:	|  |      jsr 17d04 <__fixsfsi>
   136fe:	|  |      addq.l #4,sp
   13700:	|  |      move.l d0,d1
   13702:	|  |      moveq #28,d0
   13704:	|  |      add.l 16(sp),d0
   13708:	|  |      move.l d1,-(sp)
   1370a:	|  |      pea 1 <_start+0x1>
   1370e:	|  |      move.l d0,-(sp)
   13710:	|  |      jsr 1574c <setVariable>
   13716:	|  |      lea 12(sp),sp
   1371a:	|  |  ,-- bra.s 13734 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1371c:	|  '--|-> moveq #28,d0
   1371e:	|     |   add.l 16(sp),d0
   13722:	|     |   clr.l -(sp)
   13724:	|     |   pea 1 <_start+0x1>
   13728:	|     |   move.l d0,-(sp)
   1372a:	|     |   jsr 1574c <setVariable>
   13730:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13734:	|     '-> moveq #2,d0
}
   13736:	'-------> addq.l #8,sp
   13738:	          rts

0001373a <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   1373a:	move.l 1d260 <gameSettings>,d0
   13740:	move.l d0,d1
   13742:	moveq #28,d0
   13744:	add.l 8(sp),d0
   13748:	move.l d1,-(sp)
   1374a:	pea 1 <_start+0x1>
   1374e:	move.l d0,-(sp)
   13750:	jsr 1574c <setVariable>
   13756:	lea 12(sp),sp
	return BR_CONTINUE;
   1375a:	moveq #2,d0
}
   1375c:	rts

0001375e <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1375e:	moveq #24,d0
   13760:	add.l 8(sp),d0
   13764:	move.l d0,-(sp)
   13766:	jsr 157de <trimStack>
   1376c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1376e:	moveq #24,d0
   13770:	add.l 8(sp),d0
   13774:	move.l d0,-(sp)
   13776:	jsr 157de <trimStack>
   1377c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   1377e:	moveq #28,d0
   13780:	add.l 8(sp),d0
   13784:	clr.l -(sp)
   13786:	pea 1 <_start+0x1>
   1378a:	move.l d0,-(sp)
   1378c:	jsr 1574c <setVariable>
   13792:	lea 12(sp),sp

	return BR_CONTINUE;
   13796:	moveq #2,d0

}
   13798:	rts

0001379a <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   1379a:	move.l 1cb00 <lastFramesPerSecond>,d1
   137a0:	moveq #28,d0
   137a2:	add.l 8(sp),d0
   137a6:	move.l d1,-(sp)
   137a8:	pea 1 <_start+0x1>
   137ac:	move.l d0,-(sp)
   137ae:	jsr 1574c <setVariable>
   137b4:	lea 12(sp),sp
	return BR_CONTINUE;
   137b8:	moveq #2,d0
}
   137ba:	rts

000137bc <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   137bc:	moveq #2,d0
}
   137be:	rts

000137c0 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   137c0:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   137c4:	          movea.l 60(sp),a0
   137c8:	          move.l 24(a0),d0
   137cc:	          move.l d0,-(sp)
   137ce:	          pea 1 <_start+0x1>
   137d2:	          pea 1d092 <thumbHeight>
   137d8:	          jsr 14e5a <getValueType>
   137de:	          lea 12(sp),sp
   137e2:	          tst.w d0
   137e4:	      ,-- bne.s 137ec <builtIn_setThumbnailSize+0x2c>
   137e6:	      |   moveq #1,d0
   137e8:	,-----|-- bra.w 138a8 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   137ec:	|     '-> moveq #24,d0
   137ee:	|         add.l 60(sp),d0
   137f2:	|         move.l d0,-(sp)
   137f4:	|         jsr 157de <trimStack>
   137fa:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   137fc:	|         movea.l 60(sp),a0
   13800:	|         move.l 24(a0),d0
   13804:	|         move.l d0,-(sp)
   13806:	|         pea 1 <_start+0x1>
   1380a:	|         pea 1d08e <thumbWidth>
   13810:	|         jsr 14e5a <getValueType>
   13816:	|         lea 12(sp),sp
   1381a:	|         tst.w d0
   1381c:	|     ,-- bne.s 13824 <builtIn_setThumbnailSize+0x64>
   1381e:	|     |   moveq #1,d0
   13820:	+-----|-- bra.w 138a8 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13824:	|     '-> moveq #24,d0
   13826:	|         add.l 60(sp),d0
   1382a:	|         move.l d0,-(sp)
   1382c:	|         jsr 157de <trimStack>
   13832:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   13834:	|         move.l 1d08e <thumbWidth>,d0
   1383a:	|     ,-- bmi.s 13868 <builtIn_setThumbnailSize+0xa8>
   1383c:	|     |   move.l 1d092 <thumbHeight>,d0
   13842:	|     +-- bmi.s 13868 <builtIn_setThumbnailSize+0xa8>
   13844:	|     |   move.l 1d08e <thumbWidth>,d0
   1384a:	|     |   move.l d0,d1
   1384c:	|     |   move.l 1d0dc <winWidth>,d0
   13852:	|     |   cmp.l d1,d0
   13854:	|     +-- bcs.s 13868 <builtIn_setThumbnailSize+0xa8>
   13856:	|     |   move.l 1d092 <thumbHeight>,d0
   1385c:	|     |   move.l d0,d1
   1385e:	|     |   move.l 1d0e0 <winHeight>,d0
   13864:	|     |   cmp.l d1,d0
   13866:	|  ,--|-- bcc.s 138a6 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   13868:	|  |  '-> move.l 1d092 <thumbHeight>,d1
   1386e:	|  |      move.l 1d08e <thumbWidth>,d0
   13874:	|  |      move.l d1,-(sp)
   13876:	|  |      move.l d0,-(sp)
   13878:	|  |      pea 1a4ad <PutChar+0x20d1>
   1387e:	|  |      lea 14(sp),a0
   13882:	|  |      move.l a0,-(sp)
   13884:	|  |      jsr 14664 <sprintf>
   1388a:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   1388e:	|  |      lea 2(sp),a0
   13892:	|  |      move.l a0,-(sp)
   13894:	|  |      pea 1a4b5 <PutChar+0x20d9>
   1389a:	|  |      jsr 1793a <KPrintF>
   138a0:	|  |      addq.l #8,sp
		return BR_ERROR;
   138a2:	|  |      moveq #1,d0
   138a4:	+--|----- bra.s 138a8 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   138a6:	|  '----> moveq #2,d0
}
   138a8:	'-------> lea 52(sp),sp
   138ac:	          rts

000138ae <builtIn_hasFlag>:

builtIn(hasFlag)
{
   138ae:	       lea -12(sp),sp
   138b2:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   138b4:	       movea.l 24(sp),a0
   138b8:	       move.l 24(a0),d0
   138bc:	       move.l d0,-(sp)
   138be:	       pea 1 <_start+0x1>
   138c2:	       lea 12(sp),a0
   138c6:	       move.l a0,-(sp)
   138c8:	       jsr 14e5a <getValueType>
   138ce:	       lea 12(sp),sp
   138d2:	       tst.w d0
   138d4:	   ,-- bne.s 138dc <builtIn_hasFlag+0x2e>
   138d6:	   |   moveq #1,d0
   138d8:	,--|-- bra.w 1396c <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   138dc:	|  '-> moveq #24,d0
   138de:	|      add.l 24(sp),d0
   138e2:	|      move.l d0,-(sp)
   138e4:	|      jsr 157de <trimStack>
   138ea:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   138ec:	|      movea.l 24(sp),a0
   138f0:	|      move.l 24(a0),d0
   138f4:	|      move.l d0,-(sp)
   138f6:	|      pea 7 <_start+0x7>
   138fa:	|      moveq #16,d0
   138fc:	|      add.l sp,d0
   138fe:	|      move.l d0,-(sp)
   13900:	|      jsr 14e5a <getValueType>
   13906:	|      lea 12(sp),sp
   1390a:	|      tst.w d0
   1390c:	|  ,-- bne.s 13912 <builtIn_hasFlag+0x64>
   1390e:	|  |   moveq #1,d0
   13910:	+--|-- bra.s 1396c <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13912:	|  '-> moveq #24,d0
   13914:	|      add.l 24(sp),d0
   13918:	|      move.l d0,-(sp)
   1391a:	|      jsr 157de <trimStack>
   13920:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   13922:	|      move.l 8(sp),d0
   13926:	|      move.l d0,-(sp)
   13928:	|      jsr db6e <findObjectType>
   1392e:	|      addq.l #4,sp
   13930:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   13934:	|  ,-- bne.s 1393a <builtIn_hasFlag+0x8c>
   13936:	|  |   moveq #1,d0
   13938:	+--|-- bra.s 1396c <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   1393a:	|  '-> movea.l 12(sp),a0
   1393e:	|      move.w 36(a0),d0
   13942:	|      moveq #0,d2
   13944:	|      move.w d0,d2
   13946:	|      move.l 4(sp),d1
   1394a:	|      moveq #1,d0
   1394c:	|      lsl.l d1,d0
   1394e:	|      move.l d2,d1
   13950:	|      and.l d0,d1
   13952:	|      moveq #28,d0
   13954:	|      add.l 24(sp),d0
   13958:	|      move.l d1,-(sp)
   1395a:	|      pea 1 <_start+0x1>
   1395e:	|      move.l d0,-(sp)
   13960:	|      jsr 1574c <setVariable>
   13966:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1396a:	|      moveq #2,d0
}
   1396c:	'----> move.l (sp)+,d2
   1396e:	       lea 12(sp),sp
   13972:	       rts

00013974 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   13974:	       jsr db5c <snapshot>
   1397a:	       tst.w d0
   1397c:	,----- beq.s 13982 <builtIn_snapshotGrab+0xe>
   1397e:	|      moveq #2,d0
   13980:	|  ,-- bra.s 13984 <builtIn_snapshotGrab+0x10>
   13982:	'--|-> moveq #1,d0
}
   13984:	   '-> rts

00013986 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   13986:	jsr da08 <nosnapshot>
	return BR_CONTINUE;
   1398c:	moveq #2,d0
}
   1398e:	rts

00013990 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   13990:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13992:	move.w 1c9d8 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1399a:	movea.l 12(sp),a0
   1399e:	move.l 24(a0),d0
   139a2:	move.l d0,-(sp)
   139a4:	jsr 1539a <getBoolean>
   139aa:	addq.l #4,sp
   139ac:	move.w d0,1c9d8 <allowAnyFilename>
	trimStack (&fun -> stack);
   139b2:	moveq #24,d0
   139b4:	add.l 12(sp),d0
   139b8:	move.l d0,-(sp)
   139ba:	jsr 157de <trimStack>
   139c0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   139c2:	movea.w 2(sp),a0
   139c6:	moveq #28,d0
   139c8:	add.l 12(sp),d0
   139cc:	move.l a0,-(sp)
   139ce:	pea 1 <_start+0x1>
   139d2:	move.l d0,-(sp)
   139d4:	jsr 1574c <setVariable>
   139da:	lea 12(sp),sp
	return BR_CONTINUE;
   139de:	moveq #2,d0
}
   139e0:	addq.l #4,sp
   139e2:	rts

000139e4 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   139e4:	moveq #24,d0
   139e6:	add.l 8(sp),d0
   139ea:	move.l d0,-(sp)
   139ec:	jsr 157de <trimStack>
   139f2:	addq.l #4,sp
	trimStack (&fun -> stack);
   139f4:	moveq #24,d0
   139f6:	add.l 8(sp),d0
   139fa:	move.l d0,-(sp)
   139fc:	jsr 157de <trimStack>
   13a02:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   13a04:	moveq #28,d0
   13a06:	add.l 8(sp),d0
   13a0a:	clr.l -(sp)
   13a0c:	pea 1 <_start+0x1>
   13a10:	move.l d0,-(sp)
   13a12:	jsr 1574c <setVariable>
   13a18:	lea 12(sp),sp

	return BR_CONTINUE;
   13a1c:	moveq #2,d0
}
   13a1e:	rts

00013a20 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   13a20:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   13a22:	movea.l 12(sp),a0
   13a26:	move.l 24(a0),d0
   13a2a:	move.l d0,-(sp)
   13a2c:	jsr 15430 <getTextFromAnyVar>
   13a32:	addq.l #4,sp
   13a34:	move.l d0,(sp)
	trimStack (&fun -> stack);
   13a36:	moveq #24,d0
   13a38:	add.l 12(sp),d0
   13a3c:	move.l d0,-(sp)
   13a3e:	jsr 157de <trimStack>
   13a44:	addq.l #4,sp
	KPrintF (mess);
   13a46:	move.l (sp),-(sp)
   13a48:	jsr 1793a <KPrintF>
   13a4e:	addq.l #4,sp
	return BR_ERROR;
   13a50:	moveq #1,d0
}
   13a52:	addq.l #4,sp
   13a54:	rts

00013a56 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13a56:	moveq #24,d0
   13a58:	add.l 8(sp),d0
   13a5c:	move.l d0,-(sp)
   13a5e:	jsr 157de <trimStack>
   13a64:	addq.l #4,sp
	trimStack (&fun -> stack);
   13a66:	moveq #24,d0
   13a68:	add.l 8(sp),d0
   13a6c:	move.l d0,-(sp)
   13a6e:	jsr 157de <trimStack>
   13a74:	addq.l #4,sp
	trimStack (&fun -> stack);
   13a76:	moveq #24,d0
   13a78:	add.l 8(sp),d0
   13a7c:	move.l d0,-(sp)
   13a7e:	jsr 157de <trimStack>
   13a84:	addq.l #4,sp
	trimStack (&fun -> stack);
   13a86:	moveq #24,d0
   13a88:	add.l 8(sp),d0
   13a8c:	move.l d0,-(sp)
   13a8e:	jsr 157de <trimStack>
   13a94:	addq.l #4,sp

	return BR_CONTINUE;
   13a96:	moveq #2,d0
}
   13a98:	rts

00013a9a <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13a9a:	moveq #24,d0
   13a9c:	add.l 8(sp),d0
   13aa0:	move.l d0,-(sp)
   13aa2:	jsr 157de <trimStack>
   13aa8:	addq.l #4,sp
	trimStack (&fun -> stack);
   13aaa:	moveq #24,d0
   13aac:	add.l 8(sp),d0
   13ab0:	move.l d0,-(sp)
   13ab2:	jsr 157de <trimStack>
   13ab8:	addq.l #4,sp
	trimStack (&fun -> stack);
   13aba:	moveq #24,d0
   13abc:	add.l 8(sp),d0
   13ac0:	move.l d0,-(sp)
   13ac2:	jsr 157de <trimStack>
   13ac8:	addq.l #4,sp

	return BR_CONTINUE;
   13aca:	moveq #2,d0

}
   13acc:	rts

00013ace <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   13ace:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   13ad0:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13ad6:	sne d0
   13ad8:	neg.b d0
   13ada:	moveq #0,d1
   13adc:	move.b d0,d1
   13ade:	moveq #28,d0
   13ae0:	add.l 12(sp),d0
   13ae4:	move.l d1,-(sp)
   13ae6:	pea 1 <_start+0x1>
   13aea:	move.l d0,-(sp)
   13aec:	jsr 1574c <setVariable>
   13af2:	lea 12(sp),sp
	return BR_CONTINUE;
   13af6:	moveq #2,d0
}
   13af8:	addq.l #4,sp
   13afa:	rts

00013afc <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   13afc:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   13afe:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   13b04:	pea 1a4cc <PutChar+0x20f0>
   13b0a:	jsr 1793a <KPrintF>
   13b10:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13b12:	tst.w 2(sp)
   13b16:	sne d0
   13b18:	neg.b d0
   13b1a:	moveq #0,d1
   13b1c:	move.b d0,d1
   13b1e:	moveq #28,d0
   13b20:	add.l 12(sp),d0
   13b24:	move.l d1,-(sp)
   13b26:	pea 1 <_start+0x1>
   13b2a:	move.l d0,-(sp)
   13b2c:	jsr 1574c <setVariable>
   13b32:	lea 12(sp),sp
	return BR_CONTINUE;
   13b36:	moveq #2,d0
}
   13b38:	addq.l #4,sp
   13b3a:	rts

00013b3c <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   13b3c:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   13b40:	             move.l 104(sp),d0
   13b44:	             cmpi.l #166,d0
   13b4a:	,----------- bhi.w 13c2c <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   13b4e:	|            move.l 104(sp),d0
   13b52:	|            add.l d0,d0
   13b54:	|            movea.l d0,a1
   13b56:	|            adda.l d0,a1
   13b58:	|            lea 1cb1e <paramNum>,a0
   13b5e:	|            move.l (0,a1,a0.l),d0
   13b62:	|            moveq #-1,d1
   13b64:	|            cmp.l d0,d1
   13b66:	|  ,-------- beq.w 13bf4 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   13b6a:	|  |         move.l 104(sp),d0
   13b6e:	|  |         add.l d0,d0
   13b70:	|  |         movea.l d0,a1
   13b72:	|  |         adda.l d0,a1
   13b74:	|  |         lea 1cb1e <paramNum>,a0
   13b7a:	|  |         move.l (0,a1,a0.l),d0
   13b7e:	|  |         cmp.l 108(sp),d0
   13b82:	|  +-------- beq.s 13bf4 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   13b84:	|  |         move.l 104(sp),d0
   13b88:	|  |         add.l d0,d0
   13b8a:	|  |         movea.l d0,a1
   13b8c:	|  |         adda.l d0,a1
   13b8e:	|  |         lea 1cb1e <paramNum>,a0
   13b94:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   13b98:	|  |         moveq #1,d1
   13b9a:	|  |         cmp.l d0,d1
   13b9c:	|  |  ,----- bne.s 13ba6 <callBuiltIn+0x6a>
   13b9e:	|  |  |      move.l #102736,d0
   13ba4:	|  |  |  ,-- bra.s 13bac <callBuiltIn+0x70>
   13ba6:	|  |  '--|-> move.l #107778,d0
   13bac:	|  |     '-> move.l 104(sp),d1
   13bb0:	|  |         add.l d1,d1
   13bb2:	|  |         movea.l d1,a1
   13bb4:	|  |         adda.l d1,a1
   13bb6:	|  |         lea 1cb1e <paramNum>,a0
   13bbc:	|  |         move.l (0,a1,a0.l),d1
   13bc0:	|  |         move.l d0,-(sp)
   13bc2:	|  |         move.l d1,-(sp)
   13bc4:	|  |         pea 1a504 <PutChar+0x2128>
   13bca:	|  |         lea 12(sp),a0
   13bce:	|  |         move.l a0,-(sp)
   13bd0:	|  |         jsr 14664 <sprintf>
   13bd6:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   13bda:	|  |         movea.l sp,a0
   13bdc:	|  |         move.l a0,-(sp)
   13bde:	|  |         jsr b8 <copyString>
   13be4:	|  |         addq.l #4,sp
   13be6:	|  |         move.l d0,-(sp)
   13be8:	|  |         jsr 1793a <KPrintF>
   13bee:	|  |         addq.l #4,sp
				return BR_ERROR;
   13bf0:	|  |         moveq #1,d0
   13bf2:	|  |     ,-- bra.s 13c3c <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   13bf4:	|  '-----|-> move.l 104(sp),d0
   13bf8:	|        |   add.l d0,d0
   13bfa:	|        |   movea.l d0,a1
   13bfc:	|        |   adda.l d0,a1
   13bfe:	|        |   lea 1cdba <builtInFunctionArray>,a0
   13c04:	|        |   move.l (0,a1,a0.l),d0
   13c08:	+--------|-- beq.s 13c2c <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   13c0a:	|        |   move.l 104(sp),d0
   13c0e:	|        |   add.l d0,d0
   13c10:	|        |   movea.l d0,a1
   13c12:	|        |   adda.l d0,a1
   13c14:	|        |   lea 1cdba <builtInFunctionArray>,a0
   13c1a:	|        |   movea.l (0,a1,a0.l),a0
   13c1e:	|        |   move.l 112(sp),-(sp)
   13c22:	|        |   move.l 112(sp),-(sp)
   13c26:	|        |   jsr (a0)
   13c28:	|        |   addq.l #8,sp
   13c2a:	|        +-- bra.s 13c3c <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   13c2c:	'--------|-> pea 1a52f <PutChar+0x2153>
   13c32:	         |   jsr 1793a <KPrintF>
   13c38:	         |   addq.l #4,sp
	return BR_ERROR;
   13c3a:	         |   moveq #1,d0
}
   13c3c:	         '-> lea 100(sp),sp
   13c40:	             rts

00013c42 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   13c42:	          subq.l #8,sp
	int indexNum = -1;
   13c44:	          moveq #-1,d0
   13c46:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13c4a:	          clr.l (sp)
   13c4c:	   ,----- bra.s 13c72 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   13c4e:	,--|----> move.l 1d258 <languageTable>,d1
   13c54:	|  |      move.l (sp),d0
   13c56:	|  |      add.l d0,d0
   13c58:	|  |      add.l d0,d0
   13c5a:	|  |      movea.l d1,a0
   13c5c:	|  |      adda.l d0,a0
   13c5e:	|  |      move.l (a0),d0
   13c60:	|  |      move.l d0,d1
   13c62:	|  |      move.l 1d260 <gameSettings>,d0
   13c68:	|  |      cmp.l d1,d0
   13c6a:	|  |  ,-- bne.s 13c70 <getLanguageForFileB+0x2e>
   13c6c:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13c70:	|  |  '-> addq.l #1,(sp)
   13c72:	|  '----> move.l 1d264 <gameSettings+0x4>,d0
   13c78:	|         cmp.l (sp),d0
   13c7a:	'-------- bcc.s 13c4e <getLanguageForFileB+0xc>
	}

	return indexNum;
   13c7c:	          move.l 4(sp),d0
}
   13c80:	          addq.l #8,sp
   13c82:	          rts

00013c84 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13c84:	          lea -20(sp),sp
   13c88:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13c8a:	          move.l 28(sp),-(sp)
   13c8e:	          jsr 14346 <strlen>
   13c94:	          addq.l #4,sp
   13c96:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13c9a:	          moveq #4,d0
   13c9c:	          cmp.l 12(sp),d0
   13ca0:	      ,-- bge.s 13cc4 <getPrefsFilename+0x40>
   13ca2:	      |   move.l 12(sp),d0
   13ca6:	      |   subq.l #4,d0
   13ca8:	      |   movea.l 28(sp),a0
   13cac:	      |   adda.l d0,a0
   13cae:	      |   move.b (a0),d0
   13cb0:	      |   cmpi.b #46,d0
   13cb4:	      +-- bne.s 13cc4 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   13cb6:	      |   move.l 12(sp),d0
   13cba:	      |   subq.l #4,d0
   13cbc:	      |   movea.l 28(sp),a0
   13cc0:	      |   adda.l d0,a0
   13cc2:	      |   clr.b (a0)
	}

	char * f = filename;
   13cc4:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   13cca:	          clr.l 20(sp)
   13cce:	   ,----- bra.s 13cf6 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13cd0:	,--|----> move.l 20(sp),d0
   13cd4:	|  |      movea.l 28(sp),a0
   13cd8:	|  |      adda.l d0,a0
   13cda:	|  |      move.b (a0),d0
   13cdc:	|  |      cmpi.b #47,d0
   13ce0:	|  |  ,-- bne.s 13cf2 <getPrefsFilename+0x6e>
   13ce2:	|  |  |   move.l 20(sp),d0
   13ce6:	|  |  |   addq.l #1,d0
   13ce8:	|  |  |   move.l 28(sp),d1
   13cec:	|  |  |   add.l d0,d1
   13cee:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13cf2:	|  |  '-> addq.l #1,20(sp)
   13cf6:	|  '----> move.l 20(sp),d0
   13cfa:	|         cmp.l 12(sp),d0
   13cfe:	'-------- blt.s 13cd0 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13d00:	          pea 1a55a <PutChar+0x217e>
   13d06:	          move.l 20(sp),-(sp)
   13d0a:	          jsr 14386 <joinStrings>
   13d10:	          addq.l #8,sp
   13d12:	          move.l d0,8(sp)

	FreeVec(filename);
   13d16:	          move.l 28(sp),4(sp)
   13d1c:	          move.l 1d188 <SysBase>,d0
   13d22:	          movea.l d0,a6
   13d24:	          movea.l 4(sp),a1
   13d28:	          jsr -690(a6)
	filename = NULL;
   13d2c:	          clr.l 28(sp)
	return joined;
   13d30:	          move.l 8(sp),d0
}
   13d34:	          movea.l (sp)+,a6
   13d36:	          lea 20(sp),sp
   13d3a:	          rts

00013d3c <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   13d3c:	             lea -28(sp),sp
   13d40:	             move.l a6,-(sp)
   13d42:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13d44:	             move.l 1d264 <gameSettings+0x4>,d0
   13d4a:	             move.l d0,d1
   13d4c:	             addq.l #1,d1
   13d4e:	             move.l d1,28(sp)
   13d52:	             clr.l 24(sp)
   13d56:	             move.l 1d188 <SysBase>,d0
   13d5c:	             movea.l d0,a6
   13d5e:	             move.l 28(sp),d0
   13d62:	             move.l 24(sp),d1
   13d66:	             jsr -684(a6)
   13d6a:	             move.l d0,20(sp)
   13d6e:	             move.l 20(sp),d0
   13d72:	             move.l d0,1d258 <languageTable>
    if( languageTable == 0) {
   13d78:	             move.l 1d258 <languageTable>,d0
   13d7e:	         ,-- bne.s 13d8e <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13d80:	         |   pea 1a55f <PutChar+0x2183>
   13d86:	         |   jsr 1793a <KPrintF>
   13d8c:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13d8e:	         '-> move.l 1d264 <gameSettings+0x4>,d0
   13d94:	             move.l d0,d1
   13d96:	             addq.l #1,d1
   13d98:	             move.l d1,16(sp)
   13d9c:	             clr.l 12(sp)
   13da0:	             move.l 1d188 <SysBase>,d0
   13da6:	             movea.l d0,a6
   13da8:	             move.l 16(sp),d0
   13dac:	             move.l 12(sp),d1
   13db0:	             jsr -684(a6)
   13db4:	             move.l d0,8(sp)
   13db8:	             move.l 8(sp),d0
   13dbc:	             move.l d0,1d25c <languageName>
	if( languageName == 0) {
   13dc2:	             move.l 1d25c <languageName>,d0
   13dc8:	         ,-- bne.s 13dd8 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13dca:	         |   pea 1a595 <PutChar+0x21b9>
   13dd0:	         |   jsr 1793a <KPrintF>
   13dd6:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13dd8:	         '-> clr.l 32(sp)
   13ddc:	   ,-------- bra.s 13e54 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13dde:	,--|-------> tst.l 32(sp)
   13de2:	|  |  ,----- beq.s 13df2 <makeLanguageTable+0xb6>
   13de4:	|  |  |      move.l 40(sp),-(sp)
   13de8:	|  |  |      jsr 6bc <get2bytes>
   13dee:	|  |  |      addq.l #4,sp
   13df0:	|  |  |  ,-- bra.s 13df4 <makeLanguageTable+0xb8>
   13df2:	|  |  '--|-> moveq #0,d0
   13df4:	|  |     '-> movea.l 1d258 <languageTable>,a0
   13dfa:	|  |         move.l 32(sp),d1
   13dfe:	|  |         add.l d1,d1
   13e00:	|  |         add.l d1,d1
   13e02:	|  |         adda.l d1,a0
   13e04:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   13e06:	|  |         move.l 1d25c <languageName>,d1
   13e0c:	|  |         move.l 32(sp),d0
   13e10:	|  |         add.l d0,d0
   13e12:	|  |         add.l d0,d0
   13e14:	|  |         movea.l d1,a0
   13e16:	|  |         adda.l d0,a0
   13e18:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   13e1a:	|  |         move.l 1d132 <gameVersion>,d0
   13e20:	|  |         cmpi.l #511,d0
   13e26:	|  |     ,-- ble.s 13e50 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   13e28:	|  |     |   move.l 1d264 <gameSettings+0x4>,d0
   13e2e:	|  |     +-- beq.s 13e50 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   13e30:	|  |     |   move.l 1d25c <languageName>,d1
   13e36:	|  |     |   move.l 32(sp),d0
   13e3a:	|  |     |   add.l d0,d0
   13e3c:	|  |     |   add.l d0,d0
   13e3e:	|  |     |   movea.l d1,a2
   13e40:	|  |     |   adda.l d0,a2
   13e42:	|  |     |   move.l 40(sp),-(sp)
   13e46:	|  |     |   jsr b02 <readString>
   13e4c:	|  |     |   addq.l #4,sp
   13e4e:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13e50:	|  |     '-> addq.l #1,32(sp)
   13e54:	|  '-------> move.l 1d264 <gameSettings+0x4>,d0
   13e5a:	|            cmp.l 32(sp),d0
   13e5e:	'----------- bcc.w 13dde <makeLanguageTable+0xa2>
		}
	}
}
   13e62:	             nop
   13e64:	             nop
   13e66:	             movea.l (sp)+,a2
   13e68:	             movea.l (sp)+,a6
   13e6a:	             lea 28(sp),sp
   13e6e:	             rts

00013e70 <readIniFile>:

void readIniFile (char * filename) {
   13e70:	                      lea -564(sp),sp
   13e74:	                      move.l a6,-(sp)
   13e76:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   13e78:	                      move.l 576(sp),-(sp)
   13e7c:	                      jsr b8 <copyString>
   13e82:	                      addq.l #4,sp
   13e84:	                      move.l d0,-(sp)
   13e86:	                      jsr 13c84 <getPrefsFilename>
   13e8c:	                      addq.l #4,sp
   13e8e:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13e92:	                      move.l 562(sp),558(sp)
   13e98:	                      move.l #1005,554(sp)
   13ea0:	                      move.l 1d190 <DOSBase>,d0
   13ea6:	                      movea.l d0,a6
   13ea8:	                      move.l 558(sp),d1
   13eac:	                      move.l 554(sp),d2
   13eb0:	                      jsr -30(a6)
   13eb4:	                      move.l d0,550(sp)
   13eb8:	                      move.l 550(sp),d0
   13ebc:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13ec0:	                      clr.l 1d260 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13ec6:	                      move.w #1,1d268 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13ece:	                      clr.l 1d26a <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13ed4:	                      moveq #1,d0
   13ed6:	                      move.l d0,1d26e <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13edc:	                      clr.w 1d272 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13ee2:	                      clr.w 1d274 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13ee8:	                      clr.w 1d276 <gameSettings+0x16>

	FreeVec(langName);
   13eee:	                      move.l 562(sp),542(sp)
   13ef4:	                      move.l 1d188 <SysBase>,d0
   13efa:	                      movea.l d0,a6
   13efc:	                      movea.l 542(sp),a1
   13f00:	                      jsr -690(a6)
	langName = NULL;
   13f04:	                      clr.l 562(sp)

	if (fp) {
   13f08:	                      tst.l 546(sp)
   13f0c:	,-------------------- beq.w 141ea <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13f10:	|                     move.l sp,d0
   13f12:	|                     addi.l #265,d0
   13f18:	|                     move.l #257,d1
   13f1e:	|                     move.l d1,-(sp)
   13f20:	|                     clr.l -(sp)
   13f22:	|                     move.l d0,-(sp)
   13f24:	|                     jsr 178be <memset>
   13f2a:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13f2e:	|                     move.l sp,d0
   13f30:	|                     addq.l #8,d0
   13f32:	|                     move.l #257,d1
   13f38:	|                     move.l d1,-(sp)
   13f3a:	|                     clr.l -(sp)
   13f3c:	|                     move.l d0,-(sp)
   13f3e:	|                     jsr 178be <memset>
   13f44:	|                     lea 12(sp),sp
		unsigned char here = 0;
   13f48:	|                     clr.b 571(sp)
		char readChar = ' ';
   13f4c:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13f52:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   13f58:	|                     clr.w 566(sp)
		LONG tmp = 0;
   13f5c:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   13f60:	|  ,----------------> move.l 546(sp),534(sp)
   13f66:	|  |                  move.l 1d190 <DOSBase>,d0
   13f6c:	|  |                  movea.l d0,a6
   13f6e:	|  |                  move.l 534(sp),d1
   13f72:	|  |                  jsr -306(a6)
   13f76:	|  |                  move.l d0,530(sp)
   13f7a:	|  |                  move.l 530(sp),d0
   13f7e:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13f82:	|  |                  moveq #-1,d1
   13f84:	|  |                  cmp.l 538(sp),d1
   13f88:	|  |           ,----- bne.s 13f96 <readIniFile+0x126>
				readChar = '\n';
   13f8a:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13f90:	|  |           |      clr.w 568(sp)
   13f94:	|  |           |  ,-- bra.s 13f9c <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13f96:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13f9c:	|  |              '-> move.b 570(sp),d0
   13fa0:	|  |                  ext.w d0
   13fa2:	|  |                  movea.w d0,a0
   13fa4:	|  |                  moveq #61,d0
   13fa6:	|  |                  cmp.l a0,d0
   13fa8:	|  |     ,----------- beq.w 14152 <readIniFile+0x2e2>
   13fac:	|  |     |            moveq #61,d1
   13fae:	|  |     |            cmp.l a0,d1
   13fb0:	|  |  ,--|----------- blt.w 1415e <readIniFile+0x2ee>
   13fb4:	|  |  |  |            moveq #10,d0
   13fb6:	|  |  |  |            cmp.l a0,d0
   13fb8:	|  |  |  |        ,-- beq.s 13fc2 <readIniFile+0x152>
   13fba:	|  |  |  |        |   moveq #13,d1
   13fbc:	|  |  |  |        |   cmp.l a0,d1
   13fbe:	|  |  +--|--------|-- bne.w 1415e <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13fc2:	|  |  |  |        '-> tst.w 566(sp)
   13fc6:	|  |  |  |     ,----- beq.w 14140 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13fca:	|  |  |  |     |      pea 1a5c9 <PutChar+0x21ed>
   13fd0:	|  |  |  |     |      move.l sp,d0
   13fd2:	|  |  |  |     |      addi.l #269,d0
   13fd8:	|  |  |  |     |      move.l d0,-(sp)
   13fda:	|  |  |  |     |      jsr 14306 <strcmp>
   13fe0:	|  |  |  |     |      addq.l #8,sp
   13fe2:	|  |  |  |     |      tst.l d0
   13fe4:	|  |  |  |     |  ,-- bne.s 13ffe <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13fe6:	|  |  |  |     |  |   move.l sp,d0
   13fe8:	|  |  |  |     |  |   addq.l #8,d0
   13fea:	|  |  |  |     |  |   move.l d0,-(sp)
   13fec:	|  |  |  |     |  |   jsr 141f6 <stringToInt>
   13ff2:	|  |  |  |     |  |   addq.l #4,sp
   13ff4:	|  |  |  |     |  |   move.l d0,1d260 <gameSettings>
   13ffa:	|  |  |  |     +--|-- bra.w 14140 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13ffe:	|  |  |  |     |  '-> pea 1a5d2 <PutChar+0x21f6>
   14004:	|  |  |  |     |      move.l sp,d0
   14006:	|  |  |  |     |      addi.l #269,d0
   1400c:	|  |  |  |     |      move.l d0,-(sp)
   1400e:	|  |  |  |     |      jsr 14306 <strcmp>
   14014:	|  |  |  |     |      addq.l #8,sp
   14016:	|  |  |  |     |      tst.l d0
   14018:	|  |  |  |     |  ,-- bne.s 1403e <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   1401a:	|  |  |  |     |  |   move.l sp,d0
   1401c:	|  |  |  |     |  |   addq.l #8,d0
   1401e:	|  |  |  |     |  |   move.l d0,-(sp)
   14020:	|  |  |  |     |  |   jsr 141f6 <stringToInt>
   14026:	|  |  |  |     |  |   addq.l #4,sp
   14028:	|  |  |  |     |  |   tst.l d0
   1402a:	|  |  |  |     |  |   seq d0
   1402c:	|  |  |  |     |  |   neg.b d0
   1402e:	|  |  |  |     |  |   move.b d0,d0
   14030:	|  |  |  |     |  |   andi.w #255,d0
   14034:	|  |  |  |     |  |   move.w d0,1d268 <gameSettings+0x8>
   1403a:	|  |  |  |     +--|-- bra.w 14140 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   1403e:	|  |  |  |     |  '-> pea 1a5d9 <PutChar+0x21fd>
   14044:	|  |  |  |     |      move.l sp,d0
   14046:	|  |  |  |     |      addi.l #269,d0
   1404c:	|  |  |  |     |      move.l d0,-(sp)
   1404e:	|  |  |  |     |      jsr 14306 <strcmp>
   14054:	|  |  |  |     |      addq.l #8,sp
   14056:	|  |  |  |     |      tst.l d0
   14058:	|  |  |  |     |  ,-- bne.s 14072 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   1405a:	|  |  |  |     |  |   move.l sp,d0
   1405c:	|  |  |  |     |  |   addq.l #8,d0
   1405e:	|  |  |  |     |  |   move.l d0,-(sp)
   14060:	|  |  |  |     |  |   jsr 141f6 <stringToInt>
   14066:	|  |  |  |     |  |   addq.l #4,sp
   14068:	|  |  |  |     |  |   move.l d0,1d26a <gameSettings+0xa>
   1406e:	|  |  |  |     +--|-- bra.w 14140 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   14072:	|  |  |  |     |  '-> pea 1a5e1 <PutChar+0x2205>
   14078:	|  |  |  |     |      move.l sp,d0
   1407a:	|  |  |  |     |      addi.l #269,d0
   14080:	|  |  |  |     |      move.l d0,-(sp)
   14082:	|  |  |  |     |      jsr 14306 <strcmp>
   14088:	|  |  |  |     |      addq.l #8,sp
   1408a:	|  |  |  |     |      tst.l d0
   1408c:	|  |  |  |     |  ,-- bne.s 140a6 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   1408e:	|  |  |  |     |  |   move.l sp,d0
   14090:	|  |  |  |     |  |   addq.l #8,d0
   14092:	|  |  |  |     |  |   move.l d0,-(sp)
   14094:	|  |  |  |     |  |   jsr 141f6 <stringToInt>
   1409a:	|  |  |  |     |  |   addq.l #4,sp
   1409c:	|  |  |  |     |  |   move.l d0,1d26e <gameSettings+0xe>
   140a2:	|  |  |  |     +--|-- bra.w 14140 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   140a6:	|  |  |  |     |  '-> pea 1a5eb <PutChar+0x220f>
   140ac:	|  |  |  |     |      move.l sp,d0
   140ae:	|  |  |  |     |      addi.l #269,d0
   140b4:	|  |  |  |     |      move.l d0,-(sp)
   140b6:	|  |  |  |     |      jsr 14306 <strcmp>
   140bc:	|  |  |  |     |      addq.l #8,sp
   140be:	|  |  |  |     |      tst.l d0
   140c0:	|  |  |  |     |  ,-- bne.s 140da <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   140c2:	|  |  |  |     |  |   move.l sp,d0
   140c4:	|  |  |  |     |  |   addq.l #8,d0
   140c6:	|  |  |  |     |  |   move.l d0,-(sp)
   140c8:	|  |  |  |     |  |   jsr 141f6 <stringToInt>
   140ce:	|  |  |  |     |  |   addq.l #4,sp
   140d0:	|  |  |  |     |  |   move.l d0,d0
   140d2:	|  |  |  |     |  |   move.w d0,1d272 <gameSettings+0x12>
   140d8:	|  |  |  |     +--|-- bra.s 14140 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   140da:	|  |  |  |     |  '-> pea 1a5f7 <PutChar+0x221b>
   140e0:	|  |  |  |     |      move.l sp,d0
   140e2:	|  |  |  |     |      addi.l #269,d0
   140e8:	|  |  |  |     |      move.l d0,-(sp)
   140ea:	|  |  |  |     |      jsr 14306 <strcmp>
   140f0:	|  |  |  |     |      addq.l #8,sp
   140f2:	|  |  |  |     |      tst.l d0
   140f4:	|  |  |  |     |  ,-- bne.s 1410e <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   140f6:	|  |  |  |     |  |   move.l sp,d0
   140f8:	|  |  |  |     |  |   addq.l #8,d0
   140fa:	|  |  |  |     |  |   move.l d0,-(sp)
   140fc:	|  |  |  |     |  |   jsr 141f6 <stringToInt>
   14102:	|  |  |  |     |  |   addq.l #4,sp
   14104:	|  |  |  |     |  |   move.l d0,d0
   14106:	|  |  |  |     |  |   move.w d0,1d274 <gameSettings+0x14>
   1410c:	|  |  |  |     +--|-- bra.s 14140 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   1410e:	|  |  |  |     |  '-> pea 1a605 <PutChar+0x2229>
   14114:	|  |  |  |     |      move.l sp,d0
   14116:	|  |  |  |     |      addi.l #269,d0
   1411c:	|  |  |  |     |      move.l d0,-(sp)
   1411e:	|  |  |  |     |      jsr 14306 <strcmp>
   14124:	|  |  |  |     |      addq.l #8,sp
   14126:	|  |  |  |     |      tst.l d0
   14128:	|  |  |  |     +----- bne.s 14140 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   1412a:	|  |  |  |     |      move.l sp,d0
   1412c:	|  |  |  |     |      addq.l #8,d0
   1412e:	|  |  |  |     |      move.l d0,-(sp)
   14130:	|  |  |  |     |      jsr 141f6 <stringToInt>
   14136:	|  |  |  |     |      addq.l #4,sp
   14138:	|  |  |  |     |      move.l d0,d0
   1413a:	|  |  |  |     |      move.w d0,1d276 <gameSettings+0x16>
					}
				}
				here = 0;
   14140:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   14144:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   14148:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   1414c:	|  |  |  |            clr.b 8(sp)
				break;
   14150:	|  |  |  |  ,-------- bra.s 141c8 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   14152:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   14158:	|  |  |     |         clr.b 571(sp)
				break;
   1415c:	|  |  |     +-------- bra.s 141c8 <readIniFile+0x358>

				default:
				if (doingSecond) {
   1415e:	|  |  '-----|-------> tst.w 566(sp)
   14162:	|  |        |  ,----- beq.s 14196 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   14164:	|  |        |  |      move.b 571(sp),d0
   14168:	|  |        |  |      move.b d0,d1
   1416a:	|  |        |  |      addq.b #1,d1
   1416c:	|  |        |  |      move.b d1,571(sp)
   14170:	|  |        |  |      move.b d0,d0
   14172:	|  |        |  |      andi.l #255,d0
   14178:	|  |        |  |      lea 572(sp),a0
   1417c:	|  |        |  |      adda.l d0,a0
   1417e:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   14184:	|  |        |  |      moveq #0,d0
   14186:	|  |        |  |      move.b 571(sp),d0
   1418a:	|  |        |  |      lea 572(sp),a0
   1418e:	|  |        |  |      adda.l d0,a0
   14190:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   14194:	|  |        |  |  ,-- bra.s 141c6 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   14196:	|  |        |  '--|-> move.b 571(sp),d0
   1419a:	|  |        |     |   move.b d0,d1
   1419c:	|  |        |     |   addq.b #1,d1
   1419e:	|  |        |     |   move.b d1,571(sp)
   141a2:	|  |        |     |   move.b d0,d0
   141a4:	|  |        |     |   andi.l #255,d0
   141aa:	|  |        |     |   lea 572(sp),a0
   141ae:	|  |        |     |   adda.l d0,a0
   141b0:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   141b6:	|  |        |     |   moveq #0,d0
   141b8:	|  |        |     |   move.b 571(sp),d0
   141bc:	|  |        |     |   lea 572(sp),a0
   141c0:	|  |        |     |   adda.l d0,a0
   141c2:	|  |        |     |   clr.b -307(a0)
				break;
   141c6:	|  |        |     '-> nop
			}
		} while (keepGoing);
   141c8:	|  |        '-------> tst.w 568(sp)
   141cc:	|  '----------------- bne.w 13f60 <readIniFile+0xf0>

		Close(fp);
   141d0:	|                     move.l 546(sp),526(sp)
   141d6:	|                     move.l 1d190 <DOSBase>,d0
   141dc:	|                     movea.l d0,a6
   141de:	|                     move.l 526(sp),d1
   141e2:	|                     jsr -36(a6)
   141e6:	|                     move.l d0,522(sp)
	}
}
   141ea:	'-------------------> nop
   141ec:	                      move.l (sp)+,d2
   141ee:	                      movea.l (sp)+,a6
   141f0:	                      lea 564(sp),sp
   141f4:	                      rts

000141f6 <stringToInt>:

unsigned int stringToInt (char * s) {
   141f6:	             subq.l #8,sp
	int i = 0;
   141f8:	             clr.l 4(sp)
	BOOL negative = FALSE;
   141fc:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   14200:	,----------> movea.l 12(sp),a0
   14204:	|            move.b (a0),d0
   14206:	|            cmpi.b #47,d0
   1420a:	|        ,-- ble.s 14242 <stringToInt+0x4c>
   1420c:	|        |   movea.l 12(sp),a0
   14210:	|        |   move.b (a0),d0
   14212:	|        |   cmpi.b #57,d0
   14216:	|        +-- bgt.s 14242 <stringToInt+0x4c>
			i *= 10;
   14218:	|        |   move.l 4(sp),d1
   1421c:	|        |   move.l d1,d0
   1421e:	|        |   add.l d0,d0
   14220:	|        |   add.l d0,d0
   14222:	|        |   add.l d1,d0
   14224:	|        |   add.l d0,d0
   14226:	|        |   move.l d0,4(sp)
			i += *s - '0';
   1422a:	|        |   movea.l 12(sp),a0
   1422e:	|        |   move.b (a0),d0
   14230:	|        |   ext.w d0
   14232:	|        |   movea.w d0,a0
   14234:	|        |   moveq #-48,d0
   14236:	|        |   add.l a0,d0
   14238:	|        |   add.l d0,4(sp)
			s ++;
   1423c:	|        |   addq.l #1,12(sp)
   14240:	|  ,-----|-- bra.s 1427a <stringToInt+0x84>
		} else if (*s == '-') {
   14242:	|  |     '-> movea.l 12(sp),a0
   14246:	|  |         move.b (a0),d0
   14248:	|  |         cmpi.b #45,d0
   1424c:	|  |     ,-- bne.s 14266 <stringToInt+0x70>
			negative = ! negative;
   1424e:	|  |     |   tst.w 2(sp)
   14252:	|  |     |   seq d0
   14254:	|  |     |   neg.b d0
   14256:	|  |     |   move.b d0,d0
   14258:	|  |     |   andi.w #255,d0
   1425c:	|  |     |   move.w d0,2(sp)
			s++;
   14260:	|  |     |   addq.l #1,12(sp)
   14264:	+--|-----|-- bra.s 14200 <stringToInt+0xa>
		} else {
			if (negative)
   14266:	|  |     '-> tst.w 2(sp)
   1426a:	|  |     ,-- beq.s 14274 <stringToInt+0x7e>
				return -i;
   1426c:	|  |     |   move.l 4(sp),d0
   14270:	|  |     |   neg.l d0
   14272:	|  |  ,--|-- bra.s 1427c <stringToInt+0x86>
			return i;
   14274:	|  |  |  '-> move.l 4(sp),d0
   14278:	|  |  +----- bra.s 1427c <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   1427a:	'--'--|----X bra.s 14200 <stringToInt+0xa>
		}
	}
   1427c:	      '----> addq.l #8,sp
   1427e:	             rts

00014280 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   14280:	    lea -28(sp),sp
   14284:	    move.l a6,-(sp)
   14286:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   14288:	    pea 1a60f <PutChar+0x2233>
   1428e:	    jsr 1793a <KPrintF>
   14294:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   14296:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   1429a:	    move.l 40(sp),30(sp)
   142a0:	    move.l #1005,26(sp)
   142a8:	    move.l 1d190 <DOSBase>,d0
   142ae:	    movea.l d0,a6
   142b0:	    move.l 30(sp),d1
   142b4:	    move.l 26(sp),d2
   142b8:	    jsr -30(a6)
   142bc:	    move.l d0,22(sp)
   142c0:	    move.l 22(sp),d0
   142c4:	    move.l d0,18(sp)
	if (tester) {
   142c8:	,-- beq.s 142f8 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   142ca:	|   pea 1a629 <PutChar+0x224d>
   142d0:	|   jsr 1793a <KPrintF>
   142d6:	|   addq.l #4,sp
		retval = 1;
   142d8:	|   move.b #1,35(sp)
		Close(tester);
   142de:	|   move.l 18(sp),14(sp)
   142e4:	|   move.l 1d190 <DOSBase>,d0
   142ea:	|   movea.l d0,a6
   142ec:	|   move.l 14(sp),d1
   142f0:	|   jsr -36(a6)
   142f4:	|   move.l d0,10(sp)
	}
	return retval;
   142f8:	'-> move.b 35(sp),d0
   142fc:	    move.l (sp)+,d2
   142fe:	    movea.l (sp)+,a6
   14300:	    lea 28(sp),sp
   14304:	    rts

00014306 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   14306:	   ,-- bra.s 14310 <strcmp+0xa>
    {
        s1++;
   14308:	,--|-> addq.l #1,4(sp)
        s2++;
   1430c:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   14310:	|  '-> movea.l 4(sp),a0
   14314:	|      move.b (a0),d0
   14316:	|  ,-- beq.s 14328 <strcmp+0x22>
   14318:	|  |   movea.l 4(sp),a0
   1431c:	|  |   move.b (a0),d1
   1431e:	|  |   movea.l 8(sp),a0
   14322:	|  |   move.b (a0),d0
   14324:	|  |   cmp.b d1,d0
   14326:	'--|-- beq.s 14308 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   14328:	   '-> movea.l 4(sp),a0
   1432c:	       move.b (a0),d0
   1432e:	       moveq #0,d1
   14330:	       move.b d0,d1
   14332:	       movea.l 8(sp),a0
   14336:	       move.b (a0),d0
   14338:	       move.b d0,d0
   1433a:	       andi.l #255,d0
   14340:	       sub.l d0,d1
   14342:	       move.l d1,d0
}
   14344:	       rts

00014346 <strlen>:

long unsigned int strlen (const char *s) 
{  
   14346:	       subq.l #4,sp
	long unsigned int i = 0;
   14348:	       clr.l (sp)
	while(s[i]) i++; 
   1434a:	   ,-- bra.s 1434e <strlen+0x8>
   1434c:	,--|-> addq.l #1,(sp)
   1434e:	|  '-> movea.l 8(sp),a0
   14352:	|      adda.l (sp),a0
   14354:	|      move.b (a0),d0
   14356:	'----- bne.s 1434c <strlen+0x6>
	return(i);
   14358:	       move.l (sp),d0
}
   1435a:	       addq.l #4,sp
   1435c:	       rts

0001435e <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   1435e:	    nop
   14360:	,-> move.l 8(sp),d0
   14364:	|   move.l d0,d1
   14366:	|   addq.l #1,d1
   14368:	|   move.l d1,8(sp)
   1436c:	|   movea.l 4(sp),a0
   14370:	|   lea 1(a0),a1
   14374:	|   move.l a1,4(sp)
   14378:	|   movea.l d0,a1
   1437a:	|   move.b (a1),d0
   1437c:	|   move.b d0,(a0)
   1437e:	|   move.b (a0),d0
   14380:	'-- bne.s 14360 <strcpy+0x2>
}
   14382:	    nop
   14384:	    rts

00014386 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   14386:	    lea -20(sp),sp
   1438a:	    move.l a6,-(sp)
   1438c:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   1438e:	    move.l 32(sp),-(sp)
   14392:	    jsr 14346 <strlen>
   14398:	    addq.l #4,sp
   1439a:	    move.l d0,d2
   1439c:	    move.l 36(sp),-(sp)
   143a0:	    jsr 14346 <strlen>
   143a6:	    addq.l #4,sp
   143a8:	    add.l d2,d0
   143aa:	    move.l d0,d1
   143ac:	    addq.l #1,d1
   143ae:	    move.l d1,20(sp)
   143b2:	    clr.l 16(sp)
   143b6:	    move.l 1d188 <SysBase>,d0
   143bc:	    movea.l d0,a6
   143be:	    move.l 20(sp),d0
   143c2:	    move.l 16(sp),d1
   143c6:	    jsr -684(a6)
   143ca:	    move.l d0,12(sp)
   143ce:	    move.l 12(sp),d0
   143d2:	    move.l d0,8(sp)
	char * t = newString;
   143d6:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   143dc:	    nop
   143de:	,-> move.l 32(sp),d0
   143e2:	|   move.l d0,d1
   143e4:	|   addq.l #1,d1
   143e6:	|   move.l d1,32(sp)
   143ea:	|   movea.l 24(sp),a0
   143ee:	|   lea 1(a0),a1
   143f2:	|   move.l a1,24(sp)
   143f6:	|   movea.l d0,a1
   143f8:	|   move.b (a1),d0
   143fa:	|   move.b d0,(a0)
   143fc:	|   move.b (a0),d0
   143fe:	'-- bne.s 143de <joinStrings+0x58>
	t--;
   14400:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   14404:	    nop
   14406:	,-> move.l 36(sp),d0
   1440a:	|   move.l d0,d1
   1440c:	|   addq.l #1,d1
   1440e:	|   move.l d1,36(sp)
   14412:	|   movea.l 24(sp),a0
   14416:	|   lea 1(a0),a1
   1441a:	|   move.l a1,24(sp)
   1441e:	|   movea.l d0,a1
   14420:	|   move.b (a1),d0
   14422:	|   move.b d0,(a0)
   14424:	|   move.b (a0),d0
   14426:	'-- bne.s 14406 <joinStrings+0x80>

	return newString;
   14428:	    move.l 8(sp),d0
}
   1442c:	    move.l (sp)+,d2
   1442e:	    movea.l (sp)+,a6
   14430:	    lea 20(sp),sp
   14434:	    rts

00014436 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   14436:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   1443a:	       moveq #10,d0
   1443c:	       cmp.l 28(sp),d0
   14440:	   ,-- bne.s 1445e <itoa+0x28>
   14442:	   |   tst.l 20(sp)
   14446:	   +-- bge.s 1445e <itoa+0x28>
        *str++ = '-';
   14448:	   |   move.l 24(sp),d0
   1444c:	   |   move.l d0,d1
   1444e:	   |   addq.l #1,d1
   14450:	   |   move.l d1,24(sp)
   14454:	   |   movea.l d0,a0
   14456:	   |   move.b #45,(a0)
        value *= -1;
   1445a:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   1445e:	   '-> move.l 24(sp),12(sp)
   14464:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   1446a:	   ,-> move.l 20(sp),d0
   1446e:	   |   move.l 28(sp),-(sp)
   14472:	   |   move.l d0,-(sp)
   14474:	   |   jsr 18372 <__modsi3>
   1447a:	   |   addq.l #8,sp
   1447c:	   |   movea.l d0,a1
   1447e:	   |   move.l 12(sp),d0
   14482:	   |   move.l d0,d1
   14484:	   |   addq.l #1,d1
   14486:	   |   move.l d1,12(sp)
   1448a:	   |   lea 1a641 <PutChar+0x2265>,a0
   14490:	   |   move.b (0,a1,a0.l),d1
   14494:	   |   movea.l d0,a0
   14496:	   |   move.b d1,(a0)
        value /= base;
   14498:	   |   move.l 28(sp),-(sp)
   1449c:	   |   move.l 24(sp),-(sp)
   144a0:	   |   jsr 18344 <__divsi3>
   144a6:	   |   addq.l #8,sp
   144a8:	   |   move.l d0,20(sp)
    } while (value);
   144ac:	   '-- bne.s 1446a <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   144ae:	       move.l 12(sp),d0
   144b2:	       move.l d0,d1
   144b4:	       subq.l #1,d1
   144b6:	       move.l d1,12(sp)
   144ba:	       movea.l d0,a0
   144bc:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   144be:	       move.l 4(sp),8(sp)
   144c4:	   ,-- bra.s 144ea <itoa+0xb4>
        char temp = *low;
   144c6:	,--|-> movea.l 8(sp),a0
   144ca:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   144ce:	|  |   movea.l 12(sp),a0
   144d2:	|  |   move.b (a0),d0
   144d4:	|  |   movea.l 8(sp),a0
   144d8:	|  |   move.b d0,(a0)
        *ptr = temp;
   144da:	|  |   movea.l 12(sp),a0
   144de:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   144e2:	|  |   addq.l #1,8(sp)
   144e6:	|  |   subq.l #1,12(sp)
   144ea:	|  '-> move.l 8(sp),d0
   144ee:	|      cmp.l 12(sp),d0
   144f2:	'----- bcs.s 144c6 <itoa+0x90>
    }
    return rc;
   144f4:	       move.l 4(sp),d0
}
   144f8:	       lea 16(sp),sp
   144fc:	       rts

000144fe <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   144fe:	                            lea -40(sp),sp
   14502:	                            move.l d2,-(sp)
    char* s = str;
   14504:	                            move.l 48(sp),40(sp)
    const char* p = format;
   1450a:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   14510:	   ,----------------------- bra.w 14644 <vsprintf2+0x146>
        if (*p == '%') {
   14514:	,--|----------------------> movea.l 36(sp),a0
   14518:	|  |                        move.b (a0),d0
   1451a:	|  |                        cmpi.b #37,d0
   1451e:	|  |  ,-------------------- bne.w 1462a <vsprintf2+0x12c>
            switch (*++p) {
   14522:	|  |  |                     addq.l #1,36(sp)
   14526:	|  |  |                     movea.l 36(sp),a0
   1452a:	|  |  |                     move.b (a0),d0
   1452c:	|  |  |                     ext.w d0
   1452e:	|  |  |                     movea.w d0,a0
   14530:	|  |  |                     moveq #115,d0
   14532:	|  |  |                     cmp.l a0,d0
   14534:	|  |  |           ,-------- beq.s 145ac <vsprintf2+0xae>
   14536:	|  |  |           |         moveq #115,d1
   14538:	|  |  |           |         cmp.l a0,d1
   1453a:	|  |  |  ,--------|-------- blt.w 14612 <vsprintf2+0x114>
   1453e:	|  |  |  |        |         moveq #99,d2
   14540:	|  |  |  |        |         cmp.l a0,d2
   14542:	|  |  |  |  ,-----|-------- beq.w 145ea <vsprintf2+0xec>
   14546:	|  |  |  |  |     |         moveq #100,d0
   14548:	|  |  |  |  |     |         cmp.l a0,d0
   1454a:	|  |  |  +--|-----|-------- bne.w 14612 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   1454e:	|  |  |  |  |     |         addq.l #4,56(sp)
   14552:	|  |  |  |  |     |         movea.l 56(sp),a0
   14556:	|  |  |  |  |     |         move.l (a0),d0
   14558:	|  |  |  |  |     |         move.l d0,d1
   1455a:	|  |  |  |  |     |         subq.l #1,d1
   1455c:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   14560:	|  |  |  |  |     |         pea a <_start+0xa>
   14564:	|  |  |  |  |     |         lea 8(sp),a0
   14568:	|  |  |  |  |     |         move.l a0,-(sp)
   1456a:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   1456e:	|  |  |  |  |     |         jsr 14436 <itoa>
   14574:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   14578:	|  |  |  |  |     |         lea 44(sp),a0
   1457c:	|  |  |  |  |     |         lea -40(a0),a0
   14580:	|  |  |  |  |     |         move.l a0,28(sp)
   14584:	|  |  |  |  |     |     ,-- bra.s 145a0 <vsprintf2+0xa2>
                        *s++ = *b;
   14586:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   1458a:	|  |  |  |  |     |  |  |   move.l d0,d1
   1458c:	|  |  |  |  |     |  |  |   addq.l #1,d1
   1458e:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   14592:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   14596:	|  |  |  |  |     |  |  |   move.b (a0),d1
   14598:	|  |  |  |  |     |  |  |   movea.l d0,a0
   1459a:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   1459c:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   145a0:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   145a4:	|  |  |  |  |     |  |      move.b (a0),d0
   145a6:	|  |  |  |  |     |  '----- bne.s 14586 <vsprintf2+0x88>
                    }
                    break;
   145a8:	|  |  |  |  |  ,--|-------- bra.w 14640 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   145ac:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   145b0:	|  |  |  |  |  |            movea.l 56(sp),a0
   145b4:	|  |  |  |  |  |            move.l (a0),d0
   145b6:	|  |  |  |  |  |            move.l d0,d1
   145b8:	|  |  |  |  |  |            subq.l #1,d1
   145ba:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   145be:	|  |  |  |  |  |        ,-- bra.s 145e0 <vsprintf2+0xe2>
                        *s++ = *sval++;
   145c0:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   145c4:	|  |  |  |  |  |     |  |   move.l d1,d2
   145c6:	|  |  |  |  |  |     |  |   addq.l #1,d2
   145c8:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   145cc:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   145d0:	|  |  |  |  |  |     |  |   move.l d0,d2
   145d2:	|  |  |  |  |  |     |  |   addq.l #1,d2
   145d4:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   145d8:	|  |  |  |  |  |     |  |   movea.l d1,a0
   145da:	|  |  |  |  |  |     |  |   move.b (a0),d1
   145dc:	|  |  |  |  |  |     |  |   movea.l d0,a0
   145de:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   145e0:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   145e4:	|  |  |  |  |  |     |      move.b (a0),d0
   145e6:	|  |  |  |  |  |     '----- bne.s 145c0 <vsprintf2+0xc2>
                    }
                    break;
   145e8:	|  |  |  |  |  +----------- bra.s 14640 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   145ea:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   145ee:	|  |  |  |     |            movea.l 56(sp),a0
   145f2:	|  |  |  |     |            move.l (a0),d0
   145f4:	|  |  |  |     |            move.l d0,d1
   145f6:	|  |  |  |     |            subq.l #1,d1
   145f8:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   145fc:	|  |  |  |     |            move.l 40(sp),d0
   14600:	|  |  |  |     |            move.l d0,d2
   14602:	|  |  |  |     |            addq.l #1,d2
   14604:	|  |  |  |     |            move.l d2,40(sp)
   14608:	|  |  |  |     |            move.l 24(sp),d1
   1460c:	|  |  |  |     |            movea.l d0,a0
   1460e:	|  |  |  |     |            move.b d1,(a0)
                    break;
   14610:	|  |  |  |     +----------- bra.s 14640 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   14612:	|  |  |  '-----|----------> move.l 40(sp),d0
   14616:	|  |  |        |            move.l d0,d1
   14618:	|  |  |        |            addq.l #1,d1
   1461a:	|  |  |        |            move.l d1,40(sp)
   1461e:	|  |  |        |            movea.l 36(sp),a0
   14622:	|  |  |        |            move.b (a0),d1
   14624:	|  |  |        |            movea.l d0,a0
   14626:	|  |  |        |            move.b d1,(a0)
                    break;
   14628:	|  |  |        +----------- bra.s 14640 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   1462a:	|  |  '--------|----------> move.l 40(sp),d0
   1462e:	|  |           |            move.l d0,d1
   14630:	|  |           |            addq.l #1,d1
   14632:	|  |           |            move.l d1,40(sp)
   14636:	|  |           |            movea.l 36(sp),a0
   1463a:	|  |           |            move.b (a0),d1
   1463c:	|  |           |            movea.l d0,a0
   1463e:	|  |           |            move.b d1,(a0)
        }
        p++;
   14640:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   14644:	|  '----------------------> movea.l 36(sp),a0
   14648:	|                           move.b (a0),d0
   1464a:	'-------------------------- bne.w 14514 <vsprintf2+0x16>
    }
    *s = '\0';
   1464e:	                            movea.l 40(sp),a0
   14652:	                            clr.b (a0)
    return s - str;
   14654:	                            move.l 40(sp),d0
   14658:	                            sub.l 48(sp),d0
}
   1465c:	                            move.l (sp)+,d2
   1465e:	                            lea 40(sp),sp
   14662:	                            rts

00014664 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   14664:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   14666:	moveq #16,d0
   14668:	add.l sp,d0
   1466a:	move.l d0,d1
   1466c:	addq.l #4,d1
   1466e:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   14672:	move.l 16(sp),d0
   14676:	move.l 4(sp),-(sp)
   1467a:	move.l d0,-(sp)
   1467c:	move.l 20(sp),-(sp)
   14680:	jsr 144fe <vsprintf2>
   14686:	lea 12(sp),sp
   1468a:	move.l d0,(sp)
    va_end(args);
   1468c:	clr.l 4(sp)

    return done;
   14690:	move.l (sp),d0
}
   14692:	addq.l #8,sp
   14694:	rts

00014696 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   14696:	       lea -20(sp),sp
   1469a:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1469c:	       moveq #12,d0
   1469e:	       move.l d0,20(sp)
   146a2:	       clr.l 16(sp)
   146a6:	       move.l 1d188 <SysBase>,d0
   146ac:	       movea.l d0,a6
   146ae:	       move.l 20(sp),d0
   146b2:	       move.l 16(sp),d1
   146b6:	       jsr -684(a6)
   146ba:	       move.l d0,12(sp)
   146be:	       move.l 12(sp),d0
   146c2:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   146c6:	   ,-- bne.s 146cc <addVarToStack+0x36>
   146c8:	   |   clr.w d0
   146ca:	,--|-- bra.s 14714 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   146cc:	|  '-> move.l 8(sp),d0
   146d0:	|      move.l d0,-(sp)
   146d2:	|      move.l 32(sp),-(sp)
   146d6:	|      jsr 151f8 <copyMain>
   146dc:	|      addq.l #8,sp
   146de:	|      tst.w d0
   146e0:	|  ,-- bne.s 146fc <addVarToStack+0x66>
        FreeVec(newStack);
   146e2:	|  |   move.l 8(sp),4(sp)
   146e8:	|  |   move.l 1d188 <SysBase>,d0
   146ee:	|  |   movea.l d0,a6
   146f0:	|  |   movea.l 4(sp),a1
   146f4:	|  |   jsr -690(a6)
        return FALSE;
   146f8:	|  |   clr.w d0
   146fa:	+--|-- bra.s 14714 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   146fc:	|  '-> movea.l 32(sp),a0
   14700:	|      move.l (a0),d0
   14702:	|      movea.l 8(sp),a0
   14706:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1470a:	|      movea.l 32(sp),a0
   1470e:	|      move.l 8(sp),(a0)
    return TRUE;
   14712:	|      moveq #1,d0
}
   14714:	'----> movea.l (sp)+,a6
   14716:	       lea 20(sp),sp
   1471a:	       rts

0001471c <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   1471c:	       lea -16(sp),sp
   14720:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14722:	       moveq #12,d0
   14724:	       move.l d0,16(sp)
   14728:	       clr.l 12(sp)
   1472c:	       move.l 1d188 <SysBase>,d0
   14732:	       movea.l d0,a6
   14734:	       move.l 16(sp),d0
   14738:	       move.l 12(sp),d1
   1473c:	       jsr -684(a6)
   14740:	       move.l d0,8(sp)
   14744:	       move.l 8(sp),d0
   14748:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   1474c:	   ,-- bne.s 14752 <addVarToStackQuick+0x36>
   1474e:	   |   clr.w d0
   14750:	,--|-- bra.s 14788 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   14752:	|  '-> move.l 4(sp),d0
   14756:	|      pea 8 <_start+0x8>
   1475a:	|      move.l 28(sp),-(sp)
   1475e:	|      move.l d0,-(sp)
   14760:	|      jsr 178ee <memcpy>
   14766:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   1476a:	|      movea.l 24(sp),a0
   1476e:	|      clr.l (a0)

    newStack->next = *thisStack;
   14770:	|      movea.l 28(sp),a0
   14774:	|      move.l (a0),d0
   14776:	|      movea.l 4(sp),a0
   1477a:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1477e:	|      movea.l 28(sp),a0
   14782:	|      move.l 4(sp),(a0)
    return TRUE;
   14786:	|      moveq #1,d0
}
   14788:	'----> movea.l (sp)+,a6
   1478a:	       lea 16(sp),sp
   1478e:	       rts

00014790 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   14790:	       lea -16(sp),sp
   14794:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   14796:	       movea.l 24(sp),a0
   1479a:	       move.l (a0),d0
   1479c:	       moveq #1,d1
   1479e:	       cmp.l d0,d1
   147a0:	   ,-- bne.s 147ca <addVariablesInSecond+0x3a>
   147a2:	   |   movea.l 28(sp),a0
   147a6:	   |   move.l (a0),d0
   147a8:	   |   moveq #1,d1
   147aa:	   |   cmp.l d0,d1
   147ac:	   +-- bne.s 147ca <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   147ae:	   |   movea.l 28(sp),a0
   147b2:	   |   move.l 4(a0),d1
   147b6:	   |   movea.l 24(sp),a0
   147ba:	   |   move.l 4(a0),d0
   147be:	   |   add.l d1,d0
   147c0:	   |   movea.l 28(sp),a0
   147c4:	   |   move.l d0,4(a0)
   147c8:	,--|-- bra.s 14844 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   147ca:	|  '-> move.l 24(sp),-(sp)
   147ce:	|      jsr 15430 <getTextFromAnyVar>
   147d4:	|      addq.l #4,sp
   147d6:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   147da:	|      move.l 28(sp),-(sp)
   147de:	|      jsr 15430 <getTextFromAnyVar>
   147e4:	|      addq.l #4,sp
   147e6:	|      move.l d0,12(sp)

		unlinkVar(var2);
   147ea:	|      move.l 28(sp),-(sp)
   147ee:	|      jsr 150a8 <unlinkVar>
   147f4:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   147f6:	|      move.l 12(sp),-(sp)
   147fa:	|      move.l 20(sp),-(sp)
   147fe:	|      jsr 14386 <joinStrings>
   14804:	|      addq.l #8,sp
   14806:	|      movea.l 28(sp),a0
   1480a:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   1480e:	|      movea.l 28(sp),a0
   14812:	|      moveq #3,d0
   14814:	|      move.l d0,(a0)
		FreeVec(string1);
   14816:	|      move.l 16(sp),8(sp)
   1481c:	|      move.l 1d188 <SysBase>,d0
   14822:	|      movea.l d0,a6
   14824:	|      movea.l 8(sp),a1
   14828:	|      jsr -690(a6)
		FreeVec(string2);
   1482c:	|      move.l 12(sp),4(sp)
   14832:	|      move.l 1d188 <SysBase>,d0
   14838:	|      movea.l d0,a6
   1483a:	|      movea.l 4(sp),a1
   1483e:	|      jsr -690(a6)
	}
}
   14842:	|      nop
   14844:	'----> nop
   14846:	       movea.l (sp)+,a6
   14848:	       lea 16(sp),sp
   1484c:	       rts

0001484e <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   1484e:	movea.l 8(sp),a0
   14852:	move.l 4(a0),-(sp)
   14856:	move.l (a0),-(sp)
   14858:	movea.l 12(sp),a0
   1485c:	move.l 4(a0),-(sp)
   14860:	move.l (a0),-(sp)
   14862:	jsr 14884 <compareVars>
   14868:	lea 16(sp),sp
   1486c:	move.l d0,-(sp)
   1486e:	pea 1 <_start+0x1>
   14872:	move.l 16(sp),-(sp)
   14876:	jsr 1574c <setVariable>
   1487c:	lea 12(sp),sp
}
   14880:	nop
   14882:	rts

00014884 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   14884:	       subq.l #4,sp
	int re = 0;
   14886:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   14888:	       move.l 8(sp),d1
   1488c:	       move.l 16(sp),d0
   14890:	       cmp.l d1,d0
   14892:	,----- bne.w 1495a <compareVars+0xd6>
		switch (var1.varType) {
   14896:	|      move.l 8(sp),d0
   1489a:	|      moveq #9,d1
   1489c:	|      cmp.l d0,d1
   1489e:	|  ,-- bcs.w 14942 <compareVars+0xbe>
   148a2:	|  |   add.l d0,d0
   148a4:	|  |   movea.l d0,a0
   148a6:	|  |   adda.l #84146,a0
   148ac:	|  |   move.w (a0),d0
   148ae:	|  |   jmp (148b2 <compareVars+0x2e>,pc,d0.w)
   148b2:	|  |   ori.b #-112,(a4)
   148b6:	|  |   ori.l #5243024,(a0)
   148bc:	|  |   ori.l #7733392,(a0)
   148c2:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   148c8:	|  |   move.l d0,(sp)
			break;
   148ca:	+--|-- bra.w 1495a <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   148ce:	|  |   move.l 12(sp),d1
   148d2:	|  |   move.l 20(sp),d0
   148d6:	|  |   cmp.l d1,d0
   148d8:	|  |   seq d0
   148da:	|  |   neg.b d0
   148dc:	|  |   move.b d0,d0
   148de:	|  |   andi.l #255,d0
   148e4:	|  |   move.l d0,(sp)
			break;
   148e6:	+--|-- bra.s 1495a <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   148e8:	|  |   move.l 12(sp),d1
   148ec:	|  |   move.l 20(sp),d0
   148f0:	|  |   cmp.l d1,d0
   148f2:	|  |   seq d0
   148f4:	|  |   neg.b d0
   148f6:	|  |   move.b d0,d0
   148f8:	|  |   andi.l #255,d0
   148fe:	|  |   move.l d0,(sp)
			break;
   14900:	+--|-- bra.s 1495a <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   14902:	|  |   move.l 20(sp),d1
   14906:	|  |   move.l 12(sp),d0
   1490a:	|  |   move.l d1,-(sp)
   1490c:	|  |   move.l d0,-(sp)
   1490e:	|  |   jsr 14306 <strcmp>
   14914:	|  |   addq.l #8,sp
   14916:	|  |   tst.l d0
   14918:	|  |   seq d0
   1491a:	|  |   neg.b d0
   1491c:	|  |   move.b d0,d0
   1491e:	|  |   andi.l #255,d0
   14924:	|  |   move.l d0,(sp)
			break;
   14926:	+--|-- bra.s 1495a <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   14928:	|  |   move.l 12(sp),d1
   1492c:	|  |   move.l 20(sp),d0
   14930:	|  |   cmp.l d1,d0
   14932:	|  |   seq d0
   14934:	|  |   neg.b d0
   14936:	|  |   move.b d0,d0
   14938:	|  |   andi.l #255,d0
   1493e:	|  |   move.l d0,(sp)
			break;
   14940:	+--|-- bra.s 1495a <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   14942:	|  '-> move.l 12(sp),d1
   14946:	|      move.l 20(sp),d0
   1494a:	|      cmp.l d1,d0
   1494c:	|      seq d0
   1494e:	|      neg.b d0
   14950:	|      move.b d0,d0
   14952:	|      andi.l #255,d0
   14958:	|      move.l d0,(sp)
		}
	}
	return re;
   1495a:	'----> move.l (sp),d0
}
   1495c:	       addq.l #4,sp
   1495e:	       rts

00014960 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   14960:	             lea -16(sp),sp
   14964:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   14966:	             movea.l 28(sp),a0
   1496a:	             moveq #6,d0
   1496c:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   1496e:	             moveq #12,d0
   14970:	             move.l d0,12(sp)
   14974:	             clr.l 8(sp)
   14978:	             move.l 1d188 <SysBase>,d0
   1497e:	             movea.l d0,a6
   14980:	             move.l 12(sp),d0
   14984:	             move.l 8(sp),d1
   14988:	             jsr -684(a6)
   1498c:	             move.l d0,4(sp)
   14990:	             move.l 4(sp),d0
   14994:	             movea.l 28(sp),a0
   14998:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   1499c:	             movea.l 28(sp),a0
   149a0:	             move.l 4(a0),d0
   149a4:	         ,-- bne.s 149ac <copyStack+0x4c>
   149a6:	         |   clr.w d0
   149a8:	,--------|-- bra.w 14a2e <copyStack+0xce>
	to->varData.theStack->first = NULL;
   149ac:	|        '-> movea.l 28(sp),a0
   149b0:	|            movea.l 4(a0),a0
   149b4:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   149b6:	|            movea.l 28(sp),a0
   149ba:	|            movea.l 4(a0),a0
   149be:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   149c2:	|            movea.l 28(sp),a0
   149c6:	|            movea.l 4(a0),a0
   149ca:	|            moveq #1,d0
   149cc:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   149d0:	|            movea.l 24(sp),a0
   149d4:	|            movea.l 4(a0),a0
   149d8:	|            move.l (a0),16(sp)

	while (a) {
   149dc:	|     ,----- bra.s 14a26 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   149de:	|  ,--|----> movea.l 28(sp),a0
   149e2:	|  |  |      move.l 4(a0),d0
   149e6:	|  |  |      move.l d0,d1
   149e8:	|  |  |      move.l 16(sp),d0
   149ec:	|  |  |      move.l d1,-(sp)
   149ee:	|  |  |      move.l d0,-(sp)
   149f0:	|  |  |      jsr 14696 <addVarToStack>
   149f6:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   149f8:	|  |  |      movea.l 28(sp),a0
   149fc:	|  |  |      movea.l 4(a0),a0
   14a00:	|  |  |      move.l 4(a0),d0
   14a04:	|  |  |  ,-- bne.s 14a1c <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   14a06:	|  |  |  |   movea.l 28(sp),a0
   14a0a:	|  |  |  |   movea.l 4(a0),a1
   14a0e:	|  |  |  |   movea.l 28(sp),a0
   14a12:	|  |  |  |   movea.l 4(a0),a0
   14a16:	|  |  |  |   move.l (a1),d0
   14a18:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   14a1c:	|  |  |  '-> movea.l 16(sp),a0
   14a20:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   14a26:	|  |  '----> tst.l 16(sp)
   14a2a:	|  '-------- bne.s 149de <copyStack+0x7e>
	}

	return TRUE;
   14a2c:	|            moveq #1,d0
}
   14a2e:	'----------> movea.l (sp)+,a6
   14a30:	             lea 16(sp),sp
   14a34:	             rts

00014a36 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   14a36:	                lea -20(sp),sp
   14a3a:	                move.l a6,-(sp)
   14a3c:	                move.l 36(sp),d0
   14a40:	                move.w d0,d0
   14a42:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   14a46:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   14a4c:	                clr.l 16(sp)

    while (*huntVar) {
   14a50:	   ,----------- bra.s 14ace <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   14a52:	,--|----------> movea.l 20(sp),a0
   14a56:	|  |            movea.l (a0),a0
   14a58:	|  |            movea.l 28(sp),a1
   14a5c:	|  |            move.l 4(a1),-(sp)
   14a60:	|  |            move.l (a1),-(sp)
   14a62:	|  |            move.l 4(a0),-(sp)
   14a66:	|  |            move.l (a0),-(sp)
   14a68:	|  |            jsr 14884 <compareVars>
   14a6e:	|  |            lea 16(sp),sp
   14a72:	|  |            tst.l d0
   14a74:	|  |  ,-------- beq.s 14ac0 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   14a76:	|  |  |         movea.l 20(sp),a0
   14a7a:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   14a7e:	|  |  |         movea.l 12(sp),a0
   14a82:	|  |  |         move.l 8(a0),d0
   14a86:	|  |  |         movea.l 20(sp),a0
   14a8a:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   14a8c:	|  |  |         move.l 12(sp),d0
   14a90:	|  |  |         move.l d0,-(sp)
   14a92:	|  |  |         jsr 150a8 <unlinkVar>
   14a98:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   14a9a:	|  |  |         move.l 12(sp),8(sp)
   14aa0:	|  |  |         move.l 1d188 <SysBase>,d0
   14aa6:	|  |  |         movea.l d0,a6
   14aa8:	|  |  |         movea.l 8(sp),a1
   14aac:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   14ab0:	|  |  |         tst.w 6(sp)
   14ab4:	|  |  |     ,-- bne.s 14aba <deleteVarFromStack+0x84>
   14ab6:	|  |  |     |   moveq #1,d0
   14ab8:	|  |  |  ,--|-- bra.s 14adc <deleteVarFromStack+0xa6>
            reply++;
   14aba:	|  |  |  |  '-> addq.l #1,16(sp)
   14abe:	|  +--|--|----- bra.s 14ace <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   14ac0:	|  |  '--|----> movea.l 20(sp),a0
   14ac4:	|  |     |      move.l (a0),d0
   14ac6:	|  |     |      move.l d0,d1
   14ac8:	|  |     |      addq.l #8,d1
   14aca:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   14ace:	|  '-----|----> movea.l 20(sp),a0
   14ad2:	|        |      move.l (a0),d0
   14ad4:	'--------|----- bne.w 14a52 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   14ad8:	         |      move.l 16(sp),d0
}
   14adc:	         '----> movea.l (sp)+,a6
   14ade:	                lea 20(sp),sp
   14ae2:	                rts

00014ae4 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14ae4:	       movea.l 4(sp),a0
   14ae8:	       move.l 4(a0),d0
   14aec:	       cmp.l 8(sp),d0
   14af0:	   ,-- bhi.s 14af6 <fastArrayGetByIndex+0x12>
   14af2:	   |   moveq #0,d0
   14af4:	,--|-- bra.s 14b04 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   14af6:	|  '-> movea.l 4(sp),a0
   14afa:	|      move.l (a0),d1
   14afc:	|      move.l 8(sp),d0
   14b00:	|      lsl.l #3,d0
   14b02:	|      add.l d1,d0
}
   14b04:	'----> rts

00014b06 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   14b06:	                lea -32(sp),sp
   14b0a:	                move.l a6,-(sp)
   14b0c:	                move.l a2,-(sp)
    struct persona *p = NULL;
   14b0e:	                clr.l 36(sp)

    switch (thisVar->varType) {
   14b12:	                movea.l 44(sp),a0
   14b16:	                move.l (a0),d0
   14b18:	                moveq #8,d1
   14b1a:	                cmp.l d0,d1
   14b1c:	            ,-- beq.s 14b2a <getCostumeFromVar+0x24>
   14b1e:	            |   moveq #9,d1
   14b20:	            |   cmp.l d0,d1
   14b22:	   ,--------|-- beq.w 14bd8 <getCostumeFromVar+0xd2>
   14b26:	,--|--------|-- bra.w 14be2 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   14b2a:	|  |        '-> moveq #8,d0
   14b2c:	|  |            move.l d0,28(sp)
   14b30:	|  |            clr.l 24(sp)
   14b34:	|  |            move.l 1d188 <SysBase>,d0
   14b3a:	|  |            movea.l d0,a6
   14b3c:	|  |            move.l 28(sp),d0
   14b40:	|  |            move.l 24(sp),d1
   14b44:	|  |            jsr -684(a6)
   14b48:	|  |            move.l d0,20(sp)
   14b4c:	|  |            move.l 20(sp),d0
   14b50:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   14b54:	|  |        ,-- bne.s 14b5c <getCostumeFromVar+0x56>
   14b56:	|  |        |   moveq #0,d0
   14b58:	|  |  ,-----|-- bra.w 14c0c <getCostumeFromVar+0x106>
            p->numDirections = 1;
   14b5c:	|  |  |     '-> movea.l 36(sp),a0
   14b60:	|  |  |         moveq #1,d1
   14b62:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   14b66:	|  |  |         moveq #12,d0
   14b68:	|  |  |         move.l d0,16(sp)
   14b6c:	|  |  |         clr.l 12(sp)
   14b70:	|  |  |         move.l 1d188 <SysBase>,d0
   14b76:	|  |  |         movea.l d0,a6
   14b78:	|  |  |         move.l 16(sp),d0
   14b7c:	|  |  |         move.l 12(sp),d1
   14b80:	|  |  |         jsr -684(a6)
   14b84:	|  |  |         move.l d0,8(sp)
   14b88:	|  |  |         move.l 8(sp),d0
   14b8c:	|  |  |         movea.l 36(sp),a0
   14b90:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14b92:	|  |  |         movea.l 36(sp),a0
   14b96:	|  |  |         move.l (a0),d0
   14b98:	|  |  |     ,-- bne.s 14b9e <getCostumeFromVar+0x98>
   14b9a:	|  |  |     |   moveq #0,d0
   14b9c:	|  |  +-----|-- bra.s 14c0c <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14b9e:	|  |  |     '-> clr.l 32(sp)
   14ba2:	|  |  |     ,-- bra.s 14bce <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14ba4:	|  |  |  ,--|-> movea.l 44(sp),a0
   14ba8:	|  |  |  |  |   move.l 4(a0),d0
   14bac:	|  |  |  |  |   movea.l 36(sp),a0
   14bb0:	|  |  |  |  |   movea.l (a0),a0
   14bb2:	|  |  |  |  |   move.l 32(sp),d1
   14bb6:	|  |  |  |  |   add.l d1,d1
   14bb8:	|  |  |  |  |   add.l d1,d1
   14bba:	|  |  |  |  |   lea (0,a0,d1.l),a2
   14bbe:	|  |  |  |  |   move.l d0,-(sp)
   14bc0:	|  |  |  |  |   jsr 9b12 <copyAnim>
   14bc6:	|  |  |  |  |   addq.l #4,sp
   14bc8:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   14bca:	|  |  |  |  |   addq.l #1,32(sp)
   14bce:	|  |  |  |  '-> moveq #2,d1
   14bd0:	|  |  |  |      cmp.l 32(sp),d1
   14bd4:	|  |  |  '----- bge.s 14ba4 <getCostumeFromVar+0x9e>
            }
            break;
   14bd6:	|  |  |     ,-- bra.s 14c08 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   14bd8:	|  '--|-----|-> movea.l 44(sp),a0
   14bdc:	|     |     |   move.l 4(a0),d0
   14be0:	|     +-----|-- bra.s 14c0c <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14be2:	'-----|-----|-> movea.l 44(sp),a0
   14be6:	      |     |   move.l (a0),d0
   14be8:	      |     |   add.l d0,d0
   14bea:	      |     |   movea.l d0,a1
   14bec:	      |     |   adda.l d0,a1
   14bee:	      |     |   lea 1d058 <typeName>,a0
   14bf4:	      |     |   move.l (0,a1,a0.l),d0
   14bf8:	      |     |   move.l d0,-(sp)
   14bfa:	      |     |   pea 1a6b3 <PutChar+0x22d7>
   14c00:	      |     |   jsr 1793a <KPrintF>
   14c06:	      |     |   addq.l #8,sp
    }

    return p;
   14c08:	      |     '-> move.l 36(sp),d0
}
   14c0c:	      '-------> movea.l (sp)+,a2
   14c0e:	                movea.l (sp)+,a6
   14c10:	                lea 32(sp),sp
   14c14:	                rts

00014c16 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   14c16:	                lea -96(sp),sp
   14c1a:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   14c1e:	                move.l 116(sp),-(sp)
   14c22:	                pea 1a6eb <PutChar+0x230f>
   14c28:	                jsr 14386 <joinStrings>
   14c2e:	                addq.l #8,sp
   14c30:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   14c34:	            ,-- bne.s 14c3c <getSavedGamesStack+0x26>
   14c36:	            |   clr.w d0
   14c38:	,-----------|-- bra.w 14e50 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   14c3c:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   14c40:	|               move.l #108269,98(sp)
   14c48:	|               moveq #-2,d0
   14c4a:	|               move.l d0,94(sp)
   14c4e:	|               move.l 1d190 <DOSBase>,d0
   14c54:	|               movea.l d0,a6
   14c56:	|               move.l 98(sp),d1
   14c5a:	|               move.l 94(sp),d2
   14c5e:	|               jsr -84(a6)
   14c62:	|               move.l d0,90(sp)
   14c66:	|               move.l 90(sp),d0
   14c6a:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   14c6e:	|           ,-- bne.s 14c76 <getSavedGamesStack+0x60>
   14c70:	|           |   clr.w d0
   14c72:	+-----------|-- bra.w 14e50 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   14c76:	|           '-> move.l #260,82(sp)
   14c7e:	|               move.l #65536,78(sp)
   14c86:	|               move.l 1d188 <SysBase>,d0
   14c8c:	|               movea.l d0,a6
   14c8e:	|               move.l 82(sp),d0
   14c92:	|               move.l 78(sp),d1
   14c96:	|               jsr -684(a6)
   14c9a:	|               move.l d0,74(sp)
   14c9e:	|               move.l 74(sp),d0
   14ca2:	|               move.l d0,70(sp)
	if (!fib) {
   14ca6:	|           ,-- bne.s 14cc4 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14ca8:	|           |   move.l 86(sp),22(sp)
   14cae:	|           |   move.l 1d190 <DOSBase>,d0
   14cb4:	|           |   movea.l d0,a6
   14cb6:	|           |   move.l 22(sp),d1
   14cba:	|           |   jsr -90(a6)
		return FALSE;
   14cbe:	|           |   clr.w d0
   14cc0:	+-----------|-- bra.w 14e50 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   14cc4:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   14cc8:	|               move.l 86(sp),66(sp)
   14cce:	|               move.l 70(sp),62(sp)
   14cd4:	|               move.l 1d190 <DOSBase>,d0
   14cda:	|               movea.l d0,a6
   14cdc:	|               move.l 66(sp),d1
   14ce0:	|               move.l 62(sp),d2
   14ce4:	|               jsr -102(a6)
   14ce8:	|               move.l d0,58(sp)
   14cec:	|               move.l 58(sp),d0
   14cf0:	|  ,----------- beq.w 14e04 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   14cf4:	|  |        ,-- bra.w 14dd0 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14cf8:	|  |  ,-----|-> move.l 70(sp),d2
   14cfc:	|  |  |     |   addq.l #8,d2
   14cfe:	|  |  |     |   move.l 70(sp),d0
   14d02:	|  |  |     |   addq.l #8,d0
   14d04:	|  |  |     |   move.l d0,-(sp)
   14d06:	|  |  |     |   jsr 14346 <strlen>
   14d0c:	|  |  |     |   addq.l #4,sp
   14d0e:	|  |  |     |   move.l d0,d3
   14d10:	|  |  |     |   move.l 116(sp),-(sp)
   14d14:	|  |  |     |   jsr 14346 <strlen>
   14d1a:	|  |  |     |   addq.l #4,sp
   14d1c:	|  |  |     |   move.l d3,d1
   14d1e:	|  |  |     |   sub.l d0,d1
   14d20:	|  |  |     |   move.l d2,d0
   14d22:	|  |  |     |   add.l d1,d0
   14d24:	|  |  |     |   move.l 116(sp),-(sp)
   14d28:	|  |  |     |   move.l d0,-(sp)
   14d2a:	|  |  |     |   jsr 14306 <strcmp>
   14d30:	|  |  |     |   addq.l #8,sp
   14d32:	|  |  |     |   tst.l d0
   14d34:	|  |  |     +-- bne.w 14dd0 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   14d38:	|  |  |     |   move.l 70(sp),d0
   14d3c:	|  |  |     |   addq.l #8,d0
   14d3e:	|  |  |     |   move.l d0,-(sp)
   14d40:	|  |  |     |   jsr 14346 <strlen>
   14d46:	|  |  |     |   addq.l #4,sp
   14d48:	|  |  |     |   move.l d0,d2
   14d4a:	|  |  |     |   move.l 116(sp),-(sp)
   14d4e:	|  |  |     |   jsr 14346 <strlen>
   14d54:	|  |  |     |   addq.l #4,sp
   14d56:	|  |  |     |   move.l d0,d1
   14d58:	|  |  |     |   move.l d2,d0
   14d5a:	|  |  |     |   sub.l d1,d0
   14d5c:	|  |  |     |   movea.l 70(sp),a0
   14d60:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14d64:	|  |  |     |   move.l 70(sp),d0
   14d68:	|  |  |     |   addq.l #8,d0
   14d6a:	|  |  |     |   move.l d0,-(sp)
   14d6c:	|  |  |     |   jsr 118 <decodeFilename>
   14d72:	|  |  |     |   addq.l #4,sp
   14d74:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   14d78:	|  |  |     |   move.l 42(sp),-(sp)
   14d7c:	|  |  |     |   lea 18(sp),a0
   14d80:	|  |  |     |   move.l a0,-(sp)
   14d82:	|  |  |     |   jsr 1507c <makeTextVar>
   14d88:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14d8a:	|  |  |     |   move.l 42(sp),38(sp)
   14d90:	|  |  |     |   move.l 1d188 <SysBase>,d0
   14d96:	|  |  |     |   movea.l d0,a6
   14d98:	|  |  |     |   movea.l 38(sp),a1
   14d9c:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14da0:	|  |  |     |   move.l 112(sp),d0
   14da4:	|  |  |     |   move.l d0,-(sp)
   14da6:	|  |  |     |   lea 18(sp),a0
   14daa:	|  |  |     |   move.l a0,-(sp)
   14dac:	|  |  |     |   jsr 14696 <addVarToStack>
   14db2:	|  |  |     |   addq.l #8,sp
   14db4:	|  |  |     |   tst.w d0
   14db6:	|  |  |  ,--|-- beq.s 14e08 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14db8:	|  |  |  |  |   movea.l 112(sp),a0
   14dbc:	|  |  |  |  |   move.l 4(a0),d0
   14dc0:	|  |  |  |  +-- bne.s 14dd0 <getSavedGamesStack+0x1ba>
   14dc2:	|  |  |  |  |   movea.l 112(sp),a0
   14dc6:	|  |  |  |  |   move.l (a0),d0
   14dc8:	|  |  |  |  |   movea.l 112(sp),a0
   14dcc:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14dd0:	|  |  |  |  '-> move.l 86(sp),54(sp)
   14dd6:	|  |  |  |      move.l 70(sp),50(sp)
   14ddc:	|  |  |  |      move.l 1d190 <DOSBase>,d0
   14de2:	|  |  |  |      movea.l d0,a6
   14de4:	|  |  |  |      move.l 54(sp),d1
   14de8:	|  |  |  |      move.l 50(sp),d2
   14dec:	|  |  |  |      jsr -108(a6)
   14df0:	|  |  |  |      move.l d0,46(sp)
   14df4:	|  |  |  |      move.l 46(sp),d0
   14df8:	|  |  '--|----- bne.w 14cf8 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14dfc:	|  |     |      move.w #1,106(sp)
   14e02:	|  |     |  ,-- bra.s 14e0a <getSavedGamesStack+0x1f4>
	}

cleanup:
   14e04:	|  '-----|--|-> nop
   14e06:	|        |  +-- bra.s 14e0a <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14e08:	|        '--|-> nop
	FreeVec(fib);
   14e0a:	|           '-> move.l 70(sp),34(sp)
   14e10:	|               move.l 1d188 <SysBase>,d0
   14e16:	|               movea.l d0,a6
   14e18:	|               movea.l 34(sp),a1
   14e1c:	|               jsr -690(a6)
	UnLock(dirLock);
   14e20:	|               move.l 86(sp),30(sp)
   14e26:	|               move.l 1d190 <DOSBase>,d0
   14e2c:	|               movea.l d0,a6
   14e2e:	|               move.l 30(sp),d1
   14e32:	|               jsr -90(a6)
	FreeVec(pattern);
   14e36:	|               move.l 102(sp),26(sp)
   14e3c:	|               move.l 1d188 <SysBase>,d0
   14e42:	|               movea.l d0,a6
   14e44:	|               movea.l 26(sp),a1
   14e48:	|               jsr -690(a6)
	return result;
   14e4c:	|               move.w 106(sp),d0
}
   14e50:	'-------------> movem.l (sp)+,d2-d3/a6
   14e54:	                lea 96(sp),sp
   14e58:	                rts

00014e5a <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   14e5a:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   14e5c:	       movea.l 20(sp),a0
   14e60:	       move.l (a0),d0
   14e62:	       cmp.l 16(sp),d0
   14e66:	,----- beq.s 14eca <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   14e68:	|      move.l 16(sp),d0
   14e6c:	|      add.l d0,d0
   14e6e:	|      movea.l d0,a1
   14e70:	|      adda.l d0,a1
   14e72:	|      lea 1d058 <typeName>,a0
   14e78:	|      move.l (0,a1,a0.l),d0
   14e7c:	|      move.l d0,-(sp)
   14e7e:	|      pea 1a6ef <PutChar+0x2313>
   14e84:	|      jsr 14386 <joinStrings>
   14e8a:	|      addq.l #8,sp
   14e8c:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14e90:	|      movea.l 20(sp),a0
   14e94:	|      move.l (a0),d0
   14e96:	|      add.l d0,d0
   14e98:	|      movea.l d0,a1
   14e9a:	|      adda.l d0,a1
   14e9c:	|      lea 1d058 <typeName>,a0
   14ea2:	|      move.l (0,a1,a0.l),d0
   14ea6:	|      move.l d0,-(sp)
   14ea8:	|      pea 1a731 <PutChar+0x2355>
   14eae:	|      jsr 14386 <joinStrings>
   14eb4:	|      addq.l #8,sp
   14eb6:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14eb8:	|      move.l (sp),-(sp)
   14eba:	|      move.l 8(sp),-(sp)
   14ebe:	|      jsr 1793a <KPrintF>
   14ec4:	|      addq.l #8,sp

		return FALSE;
   14ec6:	|      clr.w d0
   14ec8:	|  ,-- bra.s 14eda <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14eca:	'--|-> movea.l 20(sp),a0
   14ece:	   |   move.l 4(a0),d0
   14ed2:	   |   movea.l 12(sp),a0
   14ed6:	   |   move.l d0,(a0)
	return TRUE;
   14ed8:	   |   moveq #1,d0
}
   14eda:	   '-> addq.l #8,sp
   14edc:	       rts

00014ede <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14ede:	move.l 8(sp),-(sp)
   14ee2:	jsr 7c70 <getNumberedString>
   14ee8:	addq.l #4,sp
   14eea:	move.l d0,-(sp)
   14eec:	move.l 8(sp),-(sp)
   14ef0:	jsr 1507c <makeTextVar>
   14ef6:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14ef8:	movea.l 4(sp),a0
   14efc:	move.l 4(a0),d0
   14f00:	sne d0
   14f02:	neg.b d0
   14f04:	move.b d0,d0
   14f06:	andi.w #255,d0
}
   14f0a:	rts

00014f0c <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14f0c:	          subq.l #8,sp
    int size = stackSize(stacky);
   14f0e:	          move.l 16(sp),-(sp)
   14f12:	          jsr 157ba <stackSize>
   14f18:	          addq.l #4,sp
   14f1a:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14f1e:	          move.l 4(sp),-(sp)
   14f22:	          move.l 16(sp),-(sp)
   14f26:	          jsr 14f76 <makeFastArraySize>
   14f2c:	          addq.l #8,sp
   14f2e:	          tst.w d0
   14f30:	      ,-- bne.s 14f36 <makeFastArrayFromStack+0x2a>
   14f32:	      |   clr.w d0
   14f34:	,-----|-- bra.s 14f72 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   14f36:	|     '-> movea.l 16(sp),a0
   14f3a:	|         move.l (a0),(sp)
    size = 0;
   14f3c:	|         clr.l 4(sp)
    while (allV) {
   14f40:	|     ,-- bra.s 14f6c <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14f42:	|  ,--|-> movea.l 12(sp),a0
   14f46:	|  |  |   movea.l 4(a0),a0
   14f4a:	|  |  |   move.l (a0),d1
   14f4c:	|  |  |   move.l 4(sp),d0
   14f50:	|  |  |   lsl.l #3,d0
   14f52:	|  |  |   add.l d0,d1
   14f54:	|  |  |   move.l (sp),d0
   14f56:	|  |  |   move.l d1,-(sp)
   14f58:	|  |  |   move.l d0,-(sp)
   14f5a:	|  |  |   jsr 151f8 <copyMain>
   14f60:	|  |  |   addq.l #8,sp
        size++;
   14f62:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14f66:	|  |  |   movea.l (sp),a0
   14f68:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14f6c:	|  |  '-> tst.l (sp)
   14f6e:	|  '----- bne.s 14f42 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14f70:	|         moveq #1,d0
}
   14f72:	'-------> addq.l #8,sp
   14f74:	          rts

00014f76 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   14f76:	          lea -28(sp),sp
   14f7a:	          move.l a6,-(sp)
    if (size < 0) {
   14f7c:	          tst.l 40(sp)
   14f80:	      ,-- bge.s 14f96 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14f82:	      |   pea 1a776 <PutChar+0x239a>
   14f88:	      |   jsr 1793a <KPrintF>
   14f8e:	      |   addq.l #4,sp
		return FALSE;
   14f90:	      |   clr.w d0
   14f92:	,-----|-- bra.w 15074 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14f96:	|     '-> move.l 36(sp),-(sp)
   14f9a:	|         jsr 150a8 <unlinkVar>
   14fa0:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14fa2:	|         movea.l 36(sp),a0
   14fa6:	|         moveq #10,d0
   14fa8:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14faa:	|         moveq #12,d0
   14fac:	|         move.l d0,24(sp)
   14fb0:	|         clr.l 20(sp)
   14fb4:	|         move.l 1d188 <SysBase>,d0
   14fba:	|         movea.l d0,a6
   14fbc:	|         move.l 24(sp),d0
   14fc0:	|         move.l 20(sp),d1
   14fc4:	|         jsr -684(a6)
   14fc8:	|         move.l d0,16(sp)
   14fcc:	|         move.l 16(sp),d0
   14fd0:	|         movea.l 36(sp),a0
   14fd4:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14fd8:	|         movea.l 36(sp),a0
   14fdc:	|         move.l 4(a0),d0
   14fe0:	|     ,-- bne.s 14fe8 <makeFastArraySize+0x72>
   14fe2:	|     |   clr.w d0
   14fe4:	+-----|-- bra.w 15074 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14fe8:	|     '-> move.l 40(sp),d0
   14fec:	|         lsl.l #3,d0
   14fee:	|         move.l d0,12(sp)
   14ff2:	|         clr.l 8(sp)
   14ff6:	|         move.l 1d188 <SysBase>,d0
   14ffc:	|         movea.l d0,a6
   14ffe:	|         move.l 12(sp),d0
   15002:	|         move.l 8(sp),d1
   15006:	|         jsr -684(a6)
   1500a:	|         move.l d0,4(sp)
   1500e:	|         move.l 4(sp),d0
   15012:	|         movea.l 36(sp),a0
   15016:	|         movea.l 4(a0),a0
   1501a:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   1501c:	|         movea.l 36(sp),a0
   15020:	|         movea.l 4(a0),a0
   15024:	|         move.l (a0),d0
   15026:	|     ,-- bne.s 1502c <makeFastArraySize+0xb6>
   15028:	|     |   clr.w d0
   1502a:	+-----|-- bra.s 15074 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   1502c:	|     '-> clr.l 28(sp)
   15030:	|     ,-- bra.s 1504c <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   15032:	|  ,--|-> movea.l 36(sp),a0
   15036:	|  |  |   movea.l 4(a0),a0
   1503a:	|  |  |   move.l (a0),d1
   1503c:	|  |  |   move.l 28(sp),d0
   15040:	|  |  |   lsl.l #3,d0
   15042:	|  |  |   movea.l d1,a0
   15044:	|  |  |   adda.l d0,a0
   15046:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   15048:	|  |  |   addq.l #1,28(sp)
   1504c:	|  |  '-> move.l 28(sp),d0
   15050:	|  |      cmp.l 40(sp),d0
   15054:	|  '----- blt.s 15032 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   15056:	|         movea.l 36(sp),a0
   1505a:	|         movea.l 4(a0),a0
   1505e:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   15064:	|         movea.l 36(sp),a0
   15068:	|         movea.l 4(a0),a0
   1506c:	|         moveq #1,d0
   1506e:	|         move.l d0,8(a0)
    return TRUE;
   15072:	|         moveq #1,d0
}
   15074:	'-------> movea.l (sp)+,a6
   15076:	          lea 28(sp),sp
   1507a:	          rts

0001507c <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   1507c:	move.l 4(sp),-(sp)
   15080:	jsr 150a8 <unlinkVar>
   15086:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   15088:	movea.l 4(sp),a0
   1508c:	moveq #3,d0
   1508e:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   15090:	move.l 8(sp),-(sp)
   15094:	jsr b8 <copyString>
   1509a:	addq.l #4,sp
   1509c:	movea.l 4(sp),a0
   150a0:	move.l d0,4(a0)
}
   150a4:	nop
   150a6:	rts

000150a8 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   150a8:	                      lea -16(sp),sp
   150ac:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   150ae:	                      movea.l 24(sp),a0
   150b2:	                      move.l (a0),d0
   150b4:	                      moveq #10,d1
   150b6:	                      cmp.l d0,d1
   150b8:	            ,-------- beq.w 15170 <unlinkVar+0xc8>
   150bc:	            |         moveq #10,d1
   150be:	            |         cmp.l d0,d1
   150c0:	,-----------|-------- bcs.w 151e4 <unlinkVar+0x13c>
   150c4:	|           |         moveq #8,d1
   150c6:	|           |         cmp.l d0,d1
   150c8:	|  ,--------|-------- beq.w 151d0 <unlinkVar+0x128>
   150cc:	|  |        |         moveq #8,d1
   150ce:	|  |        |         cmp.l d0,d1
   150d0:	+--|--------|-------- bcs.w 151e4 <unlinkVar+0x13c>
   150d4:	|  |        |         moveq #3,d1
   150d6:	|  |        |         cmp.l d0,d1
   150d8:	|  |        |     ,-- beq.s 150e4 <unlinkVar+0x3c>
   150da:	|  |        |     |   moveq #6,d1
   150dc:	|  |        |     |   cmp.l d0,d1
   150de:	|  |        |  ,--|-- beq.s 1510a <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   150e0:	+--|--------|--|--|-- bra.w 151e4 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   150e4:	|  |        |  |  '-> movea.l 24(sp),a0
   150e8:	|  |        |  |      move.l 4(a0),4(sp)
   150ee:	|  |        |  |      move.l 1d188 <SysBase>,d0
   150f4:	|  |        |  |      movea.l d0,a6
   150f6:	|  |        |  |      movea.l 4(sp),a1
   150fa:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   150fe:	|  |        |  |      movea.l 24(sp),a0
   15102:	|  |        |  |      clr.l 4(a0)
		break;
   15106:	|  |  ,-----|--|----- bra.w 151ee <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   1510a:	|  |  |     |  '----> movea.l 24(sp),a0
   1510e:	|  |  |     |         movea.l 4(a0),a0
   15112:	|  |  |     |         move.l 8(a0),d0
   15116:	|  |  |     |         subq.l #1,d0
   15118:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   1511c:	|  |  |     |         movea.l 24(sp),a0
   15120:	|  |  |     |         movea.l 4(a0),a0
   15124:	|  |  |     |         move.l 8(a0),d0
   15128:	|  |  |  ,--|-------- bgt.w 151e8 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   1512c:	|  |  |  |  |     ,-- bra.s 15140 <unlinkVar+0x98>
   1512e:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   15132:	|  |  |  |  |  |  |   move.l 4(a0),d0
   15136:	|  |  |  |  |  |  |   move.l d0,-(sp)
   15138:	|  |  |  |  |  |  |   jsr 157de <trimStack>
   1513e:	|  |  |  |  |  |  |   addq.l #4,sp
   15140:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   15144:	|  |  |  |  |  |      movea.l 4(a0),a0
   15148:	|  |  |  |  |  |      move.l (a0),d0
   1514a:	|  |  |  |  |  '----- bne.s 1512e <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   1514c:	|  |  |  |  |         movea.l 24(sp),a0
   15150:	|  |  |  |  |         move.l 4(a0),8(sp)
   15156:	|  |  |  |  |         move.l 1d188 <SysBase>,d0
   1515c:	|  |  |  |  |         movea.l d0,a6
   1515e:	|  |  |  |  |         movea.l 8(sp),a1
   15162:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   15166:	|  |  |  |  |         movea.l 24(sp),a0
   1516a:	|  |  |  |  |         clr.l 4(a0)
		break;
   1516e:	|  |  |  +--|-------- bra.s 151e8 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   15170:	|  |  |  |  '-------> movea.l 24(sp),a0
   15174:	|  |  |  |            movea.l 4(a0),a0
   15178:	|  |  |  |            move.l 8(a0),d0
   1517c:	|  |  |  |            subq.l #1,d0
   1517e:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   15182:	|  |  |  |            movea.l 24(sp),a0
   15186:	|  |  |  |            movea.l 4(a0),a0
   1518a:	|  |  |  |            move.l 8(a0),d0
   1518e:	|  |  |  |        ,-- bgt.s 151ec <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   15190:	|  |  |  |        |   movea.l 24(sp),a0
   15194:	|  |  |  |        |   movea.l 4(a0),a0
   15198:	|  |  |  |        |   move.l (a0),16(sp)
   1519c:	|  |  |  |        |   move.l 1d188 <SysBase>,d0
   151a2:	|  |  |  |        |   movea.l d0,a6
   151a4:	|  |  |  |        |   movea.l 16(sp),a1
   151a8:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   151ac:	|  |  |  |        |   movea.l 24(sp),a0
   151b0:	|  |  |  |        |   move.l 4(a0),12(sp)
   151b6:	|  |  |  |        |   move.l 1d188 <SysBase>,d0
   151bc:	|  |  |  |        |   movea.l d0,a6
   151be:	|  |  |  |        |   movea.l 12(sp),a1
   151c2:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   151c6:	|  |  |  |        |   movea.l 24(sp),a0
   151ca:	|  |  |  |        |   clr.l 4(a0)
		break;
   151ce:	|  |  |  |        +-- bra.s 151ec <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   151d0:	|  '--|--|--------|-> movea.l 24(sp),a0
   151d4:	|     |  |        |   move.l 4(a0),d0
   151d8:	|     |  |        |   move.l d0,-(sp)
   151da:	|     |  |        |   jsr 9ede <deleteAnim>
   151e0:	|     |  |        |   addq.l #4,sp
		break;
   151e2:	|     +--|--------|-- bra.s 151ee <unlinkVar+0x146>
		break;
   151e4:	'-----|--|--------|-> nop
   151e6:	      +--|--------|-- bra.s 151ee <unlinkVar+0x146>
		break;
   151e8:	      |  '--------|-> nop
   151ea:	      +-----------|-- bra.s 151ee <unlinkVar+0x146>
		break;
   151ec:	      |           '-> nop
	}
}
   151ee:	      '-------------> nop
   151f0:	                      movea.l (sp)+,a6
   151f2:	                      lea 16(sp),sp
   151f6:	                      rts

000151f8 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   151f8:	       movea.l 4(sp),a0
   151fc:	       move.l (a0),d0
   151fe:	       movea.l 8(sp),a0
   15202:	       move.l d0,(a0)
	switch (to->varType) {
   15204:	       movea.l 8(sp),a0
   15208:	       move.l (a0),d0
   1520a:	       moveq #10,d1
   1520c:	       cmp.l d0,d1
   1520e:	,----- bcs.w 15300 <copyMain+0x108>
   15212:	|      add.l d0,d0
   15214:	|      movea.l d0,a0
   15216:	|      adda.l #86562,a0
   1521c:	|      move.w (a0),d0
   1521e:	|      jmp (15222 <copyMain+0x2a>,pc,d0.w)
   15222:	|      .short 0x00da
   15224:	|      ori.b #22,(a6)
   15228:	|      ori.w #22,(a4)
   1522c:	|      ori.b #-126,(a6)
   15230:	|      ori.b #-68,(a6)
   15234:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   1523c:	|      move.l 4(a0),d0
   15240:	|      movea.l 8(sp),a0
   15244:	|      move.l d0,4(a0)
		return TRUE;
   15248:	|      moveq #1,d0
   1524a:	|  ,-- bra.w 15312 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   1524e:	|  |   movea.l 4(sp),a0
   15252:	|  |   move.l 4(a0),d0
   15256:	|  |   movea.l 8(sp),a0
   1525a:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   1525e:	|  |   movea.l 8(sp),a0
   15262:	|  |   movea.l 4(a0),a0
   15266:	|  |   move.l 8(a0),d0
   1526a:	|  |   addq.l #1,d0
   1526c:	|  |   move.l d0,8(a0)
		return TRUE;
   15270:	|  |   moveq #1,d0
   15272:	|  +-- bra.w 15312 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   15276:	|  |   movea.l 4(sp),a0
   1527a:	|  |   move.l 4(a0),d0
   1527e:	|  |   move.l d0,-(sp)
   15280:	|  |   jsr b8 <copyString>
   15286:	|  |   addq.l #4,sp
   15288:	|  |   movea.l 8(sp),a0
   1528c:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   15290:	|  |   movea.l 8(sp),a0
   15294:	|  |   move.l 4(a0),d0
   15298:	|  |   sne d0
   1529a:	|  |   neg.b d0
   1529c:	|  |   move.b d0,d0
   1529e:	|  |   andi.w #255,d0
   152a2:	|  +-- bra.s 15312 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   152a4:	|  |   movea.l 4(sp),a0
   152a8:	|  |   move.l 4(a0),d0
   152ac:	|  |   movea.l 8(sp),a0
   152b0:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   152b4:	|  |   movea.l 8(sp),a0
   152b8:	|  |   movea.l 4(a0),a0
   152bc:	|  |   move.l 8(a0),d0
   152c0:	|  |   addq.l #1,d0
   152c2:	|  |   move.l d0,8(a0)
		return TRUE;
   152c6:	|  |   moveq #1,d0
   152c8:	|  +-- bra.s 15312 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   152ca:	|  |   movea.l 4(sp),a0
   152ce:	|  |   move.l 4(a0),d0
   152d2:	|  |   movea.l 8(sp),a0
   152d6:	|  |   move.l d0,4(a0)
		return TRUE;
   152da:	|  |   moveq #1,d0
   152dc:	|  +-- bra.s 15312 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   152de:	|  |   movea.l 4(sp),a0
   152e2:	|  |   move.l 4(a0),d0
   152e6:	|  |   move.l d0,-(sp)
   152e8:	|  |   jsr 9b12 <copyAnim>
   152ee:	|  |   addq.l #4,sp
   152f0:	|  |   movea.l 8(sp),a0
   152f4:	|  |   move.l d0,4(a0)
		return TRUE;
   152f8:	|  |   moveq #1,d0
   152fa:	|  +-- bra.s 15312 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   152fc:	|  |   moveq #1,d0
   152fe:	|  +-- bra.s 15312 <copyMain+0x11a>

		default:
		break;
   15300:	'--|-> nop
	}
	KPrintF("Unknown value type");
   15302:	   |   pea 1a7c7 <PutChar+0x23eb>
   15308:	   |   jsr 1793a <KPrintF>
   1530e:	   |   addq.l #4,sp
	return FALSE;
   15310:	   |   clr.w d0
}
   15312:	   '-> rts

00015314 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   15314:	move.l 8(sp),-(sp)
   15318:	jsr 150a8 <unlinkVar>
   1531e:	addq.l #4,sp
	return copyMain(from, to);
   15320:	move.l 8(sp),-(sp)
   15324:	move.l 8(sp),-(sp)
   15328:	jsr 151f8 <copyMain>
   1532e:	addq.l #8,sp
}
   15330:	rts

00015332 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   15332:	       movea.l 4(sp),a0
   15336:	       move.l (a0),d0
   15338:	       moveq #8,d1
   1533a:	       cmp.l d0,d1
   1533c:	   ,-- bne.s 15352 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   1533e:	   |   movea.l 4(sp),a0
   15342:	   |   move.l 4(a0),d0
   15346:	   |   move.l d0,-(sp)
   15348:	   |   jsr 9b12 <copyAnim>
   1534e:	   |   addq.l #4,sp
   15350:	,--|-- bra.s 15398 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   15352:	|  '-> movea.l 4(sp),a0
   15356:	|      move.l (a0),d0
   15358:	|      moveq #1,d1
   1535a:	|      cmp.l d0,d1
   1535c:	|  ,-- bne.s 15370 <getAnimationFromVar+0x3e>
   1535e:	|  |   movea.l 4(sp),a0
   15362:	|  |   move.l 4(a0),d0
   15366:	|  +-- bne.s 15370 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   15368:	|  |   jsr b344 <makeNullAnim>
   1536e:	+--|-- bra.s 15398 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   15370:	|  '-> movea.l 4(sp),a0
   15374:	|      move.l (a0),d0
   15376:	|      add.l d0,d0
   15378:	|      movea.l d0,a1
   1537a:	|      adda.l d0,a1
   1537c:	|      lea 1d058 <typeName>,a0
   15382:	|      move.l (0,a1,a0.l),d0
   15386:	|      move.l d0,-(sp)
   15388:	|      pea 1a6b3 <PutChar+0x22d7>
   1538e:	|      jsr 1793a <KPrintF>
   15394:	|      addq.l #8,sp
	return NULL;
   15396:	|      moveq #0,d0
}
   15398:	'----> rts

0001539a <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   1539a:	       movea.l 4(sp),a0
   1539e:	       move.l (a0),d0
   153a0:	       moveq #10,d1
   153a2:	       cmp.l d0,d1
   153a4:	,----- bcs.w 1542a <getBoolean+0x90>
   153a8:	|      add.l d0,d0
   153aa:	|      movea.l d0,a0
   153ac:	|      adda.l #86968,a0
   153b2:	|      move.w (a0),d0
   153b4:	|      jmp (153b8 <getBoolean+0x1e>,pc,d0.w)
   153b8:	|      ori.b #26,(a6)
   153bc:	|      ori.w #68,(114,a2,d0.w)
   153c2:	|      ori.w #46,(114,a2,d0.w)
   153c8:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   153ce:	|      clr.w d0
   153d0:	|  ,-- bra.s 1542e <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   153d2:	|  |   movea.l 4(sp),a0
   153d6:	|  |   move.l 4(a0),d0
   153da:	|  |   sne d0
   153dc:	|  |   neg.b d0
   153de:	|  |   move.b d0,d0
   153e0:	|  |   andi.w #255,d0
   153e4:	|  +-- bra.s 1542e <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   153e6:	|  |   movea.l 4(sp),a0
   153ea:	|  |   movea.l 4(a0),a0
   153ee:	|  |   move.l (a0),d0
   153f0:	|  |   sne d0
   153f2:	|  |   neg.b d0
   153f4:	|  |   move.b d0,d0
   153f6:	|  |   andi.w #255,d0
   153fa:	|  +-- bra.s 1542e <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   153fc:	|  |   movea.l 4(sp),a0
   15400:	|  |   movea.l 4(a0),a0
   15404:	|  |   move.b (a0),d0
   15406:	|  |   sne d0
   15408:	|  |   neg.b d0
   1540a:	|  |   move.b d0,d0
   1540c:	|  |   andi.w #255,d0
   15410:	|  +-- bra.s 1542e <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   15412:	|  |   movea.l 4(sp),a0
   15416:	|  |   movea.l 4(a0),a0
   1541a:	|  |   move.l 4(a0),d0
   1541e:	|  |   sne d0
   15420:	|  |   neg.b d0
   15422:	|  |   move.b d0,d0
   15424:	|  |   andi.w #255,d0
   15428:	|  +-- bra.s 1542e <getBoolean+0x94>

		default:
		break;
   1542a:	'--|-> nop
	}
	return TRUE;
   1542c:	   |   moveq #1,d0
}
   1542e:	   '-> rts

00015430 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   15430:	      ,----------> lea -76(sp),sp
   15434:	      |            move.l a6,-(sp)
	switch (from->varType) {
   15436:	      |            movea.l 84(sp),a0
   1543a:	      |            move.l (a0),d0
   1543c:	      |            moveq #10,d1
   1543e:	      |            cmp.l d0,d1
   15440:	,-----|----------- bcs.w 156de <getTextFromAnyVar+0x2ae>
   15444:	|     |            add.l d0,d0
   15446:	|     |            movea.l d0,a0
   15448:	|     |            adda.l #87124,a0
   1544e:	|     |            move.w (a0),d0
   15450:	|     |            jmp (15454 <getTextFromAnyVar+0x24>,pc,d0.w)
   15454:	|     |            .short 0x028a
   15456:	|     |            bset d0,(a0)+
   15458:	|     |            .short 0x028a
   1545a:	|     |            ori.b #-118,(a6)
   1545e:	|     |            andi.b #8,ccr
   15462:	|     |            andi.w #650,-(a0)
   15466:	|     |            .short 0x028a
   15468:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   1546e:	|     |            move.l 4(a0),d0
   15472:	|     |            move.l d0,-(sp)
   15474:	|     |            jsr b8 <copyString>
   1547a:	|     |            addq.l #4,sp
   1547c:	|  ,--|----------- bra.w 15700 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   15480:	|  |  |            pea 1a7da <PutChar+0x23fe>
   15486:	|  |  |            jsr b8 <copyString>
   1548c:	|  |  |            addq.l #4,sp
   1548e:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   15492:	|  |  |            clr.l 72(sp)
   15496:	|  |  |     ,----- bra.w 15540 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   1549a:	|  |  |  ,--|----> pea 1a7e0 <PutChar+0x2404>
   154a0:	|  |  |  |  |      move.l 80(sp),-(sp)
   154a4:	|  |  |  |  |      jsr 14386 <joinStrings>
   154aa:	|  |  |  |  |      addq.l #8,sp
   154ac:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   154b0:	|  |  |  |  |  ,-- bne.s 154b8 <getTextFromAnyVar+0x88>
   154b2:	|  |  |  |  |  |   moveq #0,d0
   154b4:	|  +--|--|--|--|-- bra.w 15700 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   154b8:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   154be:	|  |  |  |  |      move.l 1d188 <SysBase>,d0
   154c4:	|  |  |  |  |      movea.l d0,a6
   154c6:	|  |  |  |  |      movea.l 56(sp),a1
   154ca:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   154ce:	|  |  |  |  |      movea.l 84(sp),a0
   154d2:	|  |  |  |  |      movea.l 4(a0),a0
   154d6:	|  |  |  |  |      move.l (a0),d1
   154d8:	|  |  |  |  |      move.l 72(sp),d0
   154dc:	|  |  |  |  |      lsl.l #3,d0
   154de:	|  |  |  |  |      add.l d1,d0
   154e0:	|  |  |  |  |      move.l d0,-(sp)
   154e2:	|  |  +--|--|----- jsr 15430 <getTextFromAnyVar>(pc)
   154e6:	|  |  |  |  |      addq.l #4,sp
   154e8:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   154ec:	|  |  |  |  |      move.l 52(sp),-(sp)
   154f0:	|  |  |  |  |      move.l 64(sp),-(sp)
   154f4:	|  |  |  |  |      jsr 14386 <joinStrings>
   154fa:	|  |  |  |  |      addq.l #8,sp
   154fc:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   15500:	|  |  |  |  |  ,-- bne.s 15508 <getTextFromAnyVar+0xd8>
   15502:	|  |  |  |  |  |   moveq #0,d0
   15504:	|  +--|--|--|--|-- bra.w 15700 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   15508:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   1550e:	|  |  |  |  |      move.l 1d188 <SysBase>,d0
   15514:	|  |  |  |  |      movea.l d0,a6
   15516:	|  |  |  |  |      movea.l 48(sp),a1
   1551a:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   1551e:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   15522:	|  |  |  |  |      move.l 60(sp),44(sp)
   15528:	|  |  |  |  |      move.l 1d188 <SysBase>,d0
   1552e:	|  |  |  |  |      movea.l d0,a6
   15530:	|  |  |  |  |      movea.l 44(sp),a1
   15534:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   15538:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   1553c:	|  |  |  |  |      addq.l #1,72(sp)
   15540:	|  |  |  |  '----> movea.l 84(sp),a0
   15544:	|  |  |  |         movea.l 4(a0),a0
   15548:	|  |  |  |         move.l 4(a0),d0
   1554c:	|  |  |  |         cmp.l 72(sp),d0
   15550:	|  |  |  '-------- bgt.w 1549a <getTextFromAnyVar+0x6a>
			}
			return builder;
   15554:	|  |  |            move.l 76(sp),d0
   15558:	|  +--|----------- bra.w 15700 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   1555c:	|  |  |            pea 1a7e2 <PutChar+0x2406>
   15562:	|  |  |            jsr b8 <copyString>
   15568:	|  |  |            addq.l #4,sp
   1556a:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   1556e:	|  |  |            movea.l 84(sp),a0
   15572:	|  |  |            movea.l 4(a0),a0
   15576:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   1557a:	|  |  |     ,----- bra.w 1561c <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   1557e:	|  |  |  ,--|----> pea 1a7e0 <PutChar+0x2404>
   15584:	|  |  |  |  |      move.l 72(sp),-(sp)
   15588:	|  |  |  |  |      jsr 14386 <joinStrings>
   1558e:	|  |  |  |  |      addq.l #8,sp
   15590:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   15594:	|  |  |  |  |  ,-- bne.s 1559c <getTextFromAnyVar+0x16c>
   15596:	|  |  |  |  |  |   moveq #0,d0
   15598:	|  +--|--|--|--|-- bra.w 15700 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1559c:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   155a2:	|  |  |  |  |      move.l 1d188 <SysBase>,d0
   155a8:	|  |  |  |  |      movea.l d0,a6
   155aa:	|  |  |  |  |      movea.l 32(sp),a1
   155ae:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   155b2:	|  |  |  |  |      move.l 64(sp),d0
   155b6:	|  |  |  |  |      move.l d0,-(sp)
   155b8:	|  |  '--|--|----- jsr 15430 <getTextFromAnyVar>(pc)
   155bc:	|  |     |  |      addq.l #4,sp
   155be:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   155c2:	|  |     |  |      move.l 28(sp),-(sp)
   155c6:	|  |     |  |      move.l 40(sp),-(sp)
   155ca:	|  |     |  |      jsr 14386 <joinStrings>
   155d0:	|  |     |  |      addq.l #8,sp
   155d2:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   155d6:	|  |     |  |  ,-- bne.s 155de <getTextFromAnyVar+0x1ae>
   155d8:	|  |     |  |  |   moveq #0,d0
   155da:	|  +-----|--|--|-- bra.w 15700 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   155de:	|  |     |  |  '-> move.l 28(sp),24(sp)
   155e4:	|  |     |  |      move.l 1d188 <SysBase>,d0
   155ea:	|  |     |  |      movea.l d0,a6
   155ec:	|  |     |  |      movea.l 24(sp),a1
   155f0:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   155f4:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   155f8:	|  |     |  |      move.l 36(sp),20(sp)
   155fe:	|  |     |  |      move.l 1d188 <SysBase>,d0
   15604:	|  |     |  |      movea.l d0,a6
   15606:	|  |     |  |      movea.l 20(sp),a1
   1560a:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   1560e:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   15612:	|  |     |  |      movea.l 64(sp),a0
   15616:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   1561c:	|  |     |  '----> tst.l 64(sp)
   15620:	|  |     '-------- bne.w 1557e <getTextFromAnyVar+0x14e>
			}
			return builder;
   15624:	|  |               move.l 68(sp),d0
   15628:	|  +-------------- bra.w 15700 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   1562c:	|  |               moveq #10,d0
   1562e:	|  |               move.l d0,16(sp)
   15632:	|  |               clr.l 12(sp)
   15636:	|  |               move.l 1d188 <SysBase>,d0
   1563c:	|  |               movea.l d0,a6
   1563e:	|  |               move.l 16(sp),d0
   15642:	|  |               move.l 12(sp),d1
   15646:	|  |               jsr -684(a6)
   1564a:	|  |               move.l d0,8(sp)
   1564e:	|  |               move.l 8(sp),d0
   15652:	|  |               move.l d0,4(sp)
			if (! buff) {
   15656:	|  |           ,-- bne.s 1566c <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   15658:	|  |           |   pea 1a7e9 <PutChar+0x240d>
   1565e:	|  |           |   jsr 1793a <KPrintF>
   15664:	|  |           |   addq.l #4,sp
				return NULL;
   15666:	|  |           |   moveq #0,d0
   15668:	|  +-----------|-- bra.w 15700 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   1566c:	|  |           '-> movea.l 84(sp),a0
   15670:	|  |               move.l 4(a0),d0
   15674:	|  |               move.l d0,-(sp)
   15676:	|  |               pea 1a813 <PutChar+0x2437>
   1567c:	|  |               move.l 12(sp),-(sp)
   15680:	|  |               jsr 14664 <sprintf>
   15686:	|  |               lea 12(sp),sp
			return buff;
   1568a:	|  |               move.l 4(sp),d0
   1568e:	|  +-------------- bra.s 15700 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   15690:	|  |               movea.l 84(sp),a0
   15694:	|  |               move.l 4(a0),d0
   15698:	|  |               move.l d0,-(sp)
   1569a:	|  |               jsr 4fe0 <resourceNameFromNum>
   156a0:	|  |               addq.l #4,sp
   156a2:	|  |               move.l d0,-(sp)
   156a4:	|  |               pea 19150 <PutChar+0xd74>
   156aa:	|  |               jsr 14386 <joinStrings>
   156b0:	|  |               addq.l #8,sp
   156b2:	|  +-------------- bra.s 15700 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   156b4:	|  |               movea.l 84(sp),a0
   156b8:	|  |               move.l 4(a0),d0
   156bc:	|  |               move.l d0,-(sp)
   156be:	|  |               jsr db6e <findObjectType>
   156c4:	|  |               addq.l #4,sp
   156c6:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   156ca:	+--|-------------- beq.s 156de <getTextFromAnyVar+0x2ae>
   156cc:	|  |               movea.l 40(sp),a0
   156d0:	|  |               move.l (a0),d0
   156d2:	|  |               move.l d0,-(sp)
   156d4:	|  |               jsr b8 <copyString>
   156da:	|  |               addq.l #4,sp
   156dc:	|  +-------------- bra.s 15700 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   156de:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   156e0:	   |               movea.l 84(sp),a0
   156e4:	   |               move.l (a0),d0
   156e6:	   |               add.l d0,d0
   156e8:	   |               movea.l d0,a1
   156ea:	   |               adda.l d0,a1
   156ec:	   |               lea 1d058 <typeName>,a0
   156f2:	   |               move.l (0,a1,a0.l),d0
   156f6:	   |               move.l d0,-(sp)
   156f8:	   |               jsr b8 <copyString>
   156fe:	   |               addq.l #4,sp
}
   15700:	   '-------------> movea.l (sp)+,a6
   15702:	                   lea 76(sp),sp
   15706:	                   rts

00015708 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   15708:	move.l 4(sp),-(sp)
   1570c:	jsr 150a8 <unlinkVar>
   15712:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   15714:	movea.l 4(sp),a0
   15718:	moveq #8,d0
   1571a:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   1571c:	movea.l 4(sp),a0
   15720:	move.l 8(sp),4(a0)
}
   15726:	nop
   15728:	rts

0001572a <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   1572a:	move.l 4(sp),-(sp)
   1572e:	jsr 150a8 <unlinkVar>
   15734:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   15736:	movea.l 4(sp),a0
   1573a:	moveq #9,d0
   1573c:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   1573e:	movea.l 4(sp),a0
   15742:	move.l 8(sp),4(a0)
}
   15748:	nop
   1574a:	rts

0001574c <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   1574c:	move.l 4(sp),-(sp)
   15750:	jsr 150a8 <unlinkVar>
   15756:	addq.l #4,sp
   15758:	movea.l 4(sp),a0
   1575c:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   15760:	movea.l 4(sp),a0
   15764:	move.l 12(sp),4(a0)
   1576a:	nop
   1576c:	rts

0001576e <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   1576e:	      ,-- bra.s 15780 <stackGetByIndex+0x12>
        vS = vS->next;
   15770:	,-----|-> movea.l 4(sp),a0
   15774:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   1577a:	|     +-- bne.s 15780 <stackGetByIndex+0x12>
            return NULL;
   1577c:	|     |   moveq #0,d0
   1577e:	|  ,--|-- bra.s 15794 <stackGetByIndex+0x26>
    while (theIndex--) {
   15780:	|  |  '-> move.l 8(sp),d0
   15784:	|  |      move.l d0,d1
   15786:	|  |      subq.l #1,d1
   15788:	|  |      move.l d1,8(sp)
   1578c:	|  |      tst.l d0
   1578e:	'--|----- bne.s 15770 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   15790:	   |      move.l 4(sp),d0
}
   15794:	   '----> rts

00015796 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   15796:	          tst.l 4(sp)
   1579a:	      ,-- bne.s 157aa <stackFindLast+0x14>
		return NULL;
   1579c:	      |   moveq #0,d0
   1579e:	,-----|-- bra.s 157b8 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   157a0:	|  ,--|-> movea.l 4(sp),a0
   157a4:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   157aa:	|  |  '-> movea.l 4(sp),a0
   157ae:	|  |      move.l 8(a0),d0
   157b2:	|  '----- bne.s 157a0 <stackFindLast+0xa>

	return hunt;
   157b4:	|         move.l 4(sp),d0
}
   157b8:	'-------> rts

000157ba <stackSize>:

int stackSize (const struct stackHandler * me) {
   157ba:	       subq.l #8,sp
	int r = 0;
   157bc:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   157c0:	       movea.l 12(sp),a0
   157c4:	       move.l (a0),(sp)
	while (a) {
   157c6:	   ,-- bra.s 157d2 <stackSize+0x18>
		r ++;
   157c8:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   157cc:	|  |   movea.l (sp),a0
   157ce:	|  |   move.l 8(a0),(sp)
	while (a) {
   157d2:	|  '-> tst.l (sp)
   157d4:	'----- bne.s 157c8 <stackSize+0xe>
	}
	return r;
   157d6:	       move.l 4(sp),d0
}
   157da:	       addq.l #8,sp
   157dc:	       rts

000157de <trimStack>:

void trimStack (struct variableStack ** stack) {
   157de:	subq.l #8,sp
   157e0:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   157e2:	movea.l 16(sp),a0
   157e6:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   157ea:	movea.l 16(sp),a0
   157ee:	movea.l (a0),a0
   157f0:	move.l 8(a0),d0
   157f4:	movea.l 16(sp),a0
   157f8:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   157fa:	move.l 8(sp),d0
   157fe:	move.l d0,-(sp)
   15800:	jsr 150a8 <unlinkVar>
   15806:	addq.l #4,sp
	FreeVec(killMe);
   15808:	move.l 8(sp),4(sp)
   1580e:	move.l 1d188 <SysBase>,d0
   15814:	movea.l d0,a6
   15816:	movea.l 4(sp),a1
   1581a:	jsr -690(a6)
   1581e:	nop
   15820:	movea.l (sp)+,a6
   15822:	addq.l #8,sp
   15824:	rts

00015826 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   15826:	       lea -52(sp),sp
   1582a:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   1582c:	       pea 1a816 <PutChar+0x243a>
   15832:	       jsr 1793a <KPrintF>
   15838:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   1583a:	       moveq #68,d0
   1583c:	       move.l d0,52(sp)
   15840:	       clr.l 48(sp)
   15844:	       move.l 1d188 <SysBase>,d0
   1584a:	       movea.l d0,a6
   1584c:	       move.l 52(sp),d0
   15850:	       move.l 48(sp),d1
   15854:	       jsr -684(a6)
   15858:	       move.l d0,44(sp)
   1585c:	       move.l 44(sp),d0
   15860:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   15864:	   ,-- bne.s 1586c <freeze+0x46>
   15866:	   |   clr.w d0
   15868:	,--|-- bra.w 159fe <freeze+0x1d8>

	CstFreeze();
   1586c:	|  '-> jsr 1cca <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   15872:	|      move.l 1d220 <sceneWidth>,d0
   15878:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   1587c:	|      move.l 1d224 <sceneHeight>,d0
   15882:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   15886:	|      move.l 1d220 <sceneWidth>,d0
   1588c:	|      movea.l 40(sp),a0
   15890:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   15894:	|      move.l 1d224 <sceneHeight>,d0
   1589a:	|      movea.l 40(sp),a0
   1589e:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   158a2:	|      move.l 1d23e <cameraX>,d0
   158a8:	|      movea.l 40(sp),a0
   158ac:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   158b0:	|      move.l 1d242 <cameraY>,d0
   158b6:	|      movea.l 40(sp),a0
   158ba:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   158be:	|      move.l 1cb1a <cameraZoom>,d0
   158c4:	|      movea.l 40(sp),a0
   158c8:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   158cc:	|      move.w #1,1d22c <backdropExists>

	newFreezer -> allPeople = allPeople;
   158d4:	|      move.l 1d1e8 <allPeople>,d0
   158da:	|      movea.l 40(sp),a0
   158de:	|      move.l d0,(a0)
	allPeople = NULL;
   158e0:	|      clr.l 1d1e8 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   158e6:	|      moveq #42,d0
   158e8:	|      move.l d0,28(sp)
   158ec:	|      clr.l 24(sp)
   158f0:	|      move.l 1d188 <SysBase>,d0
   158f6:	|      movea.l d0,a6
   158f8:	|      move.l 28(sp),d0
   158fc:	|      move.l 24(sp),d1
   15900:	|      jsr -684(a6)
   15904:	|      move.l d0,20(sp)
   15908:	|      move.l 20(sp),d0
   1590c:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   15910:	|  ,-- bne.s 15918 <freeze+0xf2>
   15912:	|  |   clr.w d0
   15914:	+--|-- bra.w 159fe <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   15918:	|  '-> move.l 1d294 <allScreenRegions>,d0
   1591e:	|      movea.l 40(sp),a0
   15922:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   15926:	|      clr.l 1d294 <allScreenRegions>
	overRegion = NULL;
   1592c:	|      clr.l 1d298 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   15932:	|      move.l 1d082 <mouseCursorAnim>,d0
   15938:	|      movea.l 40(sp),a0
   1593c:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   15940:	|      move.l 1d086 <mouseCursorFrameNum>,d0
   15946:	|      movea.l 40(sp),a0
   1594a:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   1594e:	|      jsr b344 <makeNullAnim>
   15954:	|      move.l d0,1d082 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   1595a:	|      clr.l 1d086 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   15960:	|      move.l 1d1e4 <zBuffer>,d0
   15966:	|      movea.l 40(sp),a0
   1596a:	|      move.l d0,60(a0)
	zBuffer = NULL;
   1596e:	|      clr.l 1d1e4 <zBuffer>

	newFreezer -> speech = speech;
   15974:	|      move.l 1d0d8 <speech>,d0
   1597a:	|      movea.l 40(sp),a0
   1597e:	|      move.l d0,20(a0)
	initSpeech ();
   15982:	|      jsr 44d6 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   15988:	|      move.l 1caf8 <currentEvents>,d0
   1598e:	|      movea.l 40(sp),a0
   15992:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   15996:	|      moveq #28,d0
   15998:	|      move.l d0,12(sp)
   1599c:	|      clr.l 8(sp)
   159a0:	|      move.l 1d188 <SysBase>,d0
   159a6:	|      movea.l d0,a6
   159a8:	|      move.l 12(sp),d0
   159ac:	|      move.l 8(sp),d1
   159b0:	|      jsr -684(a6)
   159b4:	|      move.l d0,4(sp)
   159b8:	|      move.l 4(sp),d0
   159bc:	|      move.l d0,1caf8 <currentEvents>
	if (!currentEvents) return FALSE;
   159c2:	|      move.l 1caf8 <currentEvents>,d0
   159c8:	|  ,-- bne.s 159ce <freeze+0x1a8>
   159ca:	|  |   clr.w d0
   159cc:	+--|-- bra.s 159fe <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   159ce:	|  '-> move.l 1caf8 <currentEvents>,d0
   159d4:	|      pea 1c <_start+0x1c>
   159d8:	|      clr.l -(sp)
   159da:	|      move.l d0,-(sp)
   159dc:	|      jsr 178be <memset>
   159e2:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   159e6:	|      move.l 1d278 <frozenStuff>,d0
   159ec:	|      movea.l 40(sp),a0
   159f0:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   159f4:	|      move.l 40(sp),1d278 <frozenStuff>

	return TRUE;
   159fc:	|      moveq #1,d0
}
   159fe:	'----> movea.l (sp)+,a6
   15a00:	       lea 52(sp),sp
   15a04:	       rts

00015a06 <howFrozen>:

int howFrozen () {
   15a06:	       subq.l #8,sp
	int a = 0;
   15a08:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   15a0c:	       move.l 1d278 <frozenStuff>,(sp)
	while (f) {
   15a12:	   ,-- bra.s 15a1e <howFrozen+0x18>
		a ++;
   15a14:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   15a18:	|  |   movea.l (sp),a0
   15a1a:	|  |   move.l 64(a0),(sp)
	while (f) {
   15a1e:	|  '-> tst.l (sp)
   15a20:	'----- bne.s 15a14 <howFrozen+0xe>
	}
	return a;
   15a22:	       move.l 4(sp),d0
}
   15a26:	       addq.l #8,sp
   15a28:	       rts

00015a2a <unfreeze>:

void unfreeze () {
   15a2a:	       lea -16(sp),sp
   15a2e:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   15a30:	       move.l 1d278 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   15a38:	       move.l 1d278 <frozenStuff>,d0
   15a3e:	,----- beq.w 15c76 <unfreeze+0x24c>

	CstUnfreeze();
   15a42:	|      jsr 4080 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   15a48:	|      movea.l 1d278 <frozenStuff>,a0
   15a4e:	|      move.l 48(a0),d0
   15a52:	|      move.l d0,1d220 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   15a58:	|      movea.l 1d278 <frozenStuff>,a0
   15a5e:	|      move.l 52(a0),d0
   15a62:	|      move.l d0,1d224 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   15a68:	|      movea.l 1d278 <frozenStuff>,a0
   15a6e:	|      move.l 40(a0),d0
   15a72:	|      move.l d0,1d23e <cameraX>
	cameraY = frozenStuff -> cameraY;
   15a78:	|      movea.l 1d278 <frozenStuff>,a0
   15a7e:	|      move.l 44(a0),d0
   15a82:	|      move.l d0,1d242 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   15a88:	|      move.l 1d144 <input+0xa>,d0
   15a8e:	|      move.l d0,-(sp)
   15a90:	|      jsr 17d6c <__floatsisf>
   15a96:	|      addq.l #4,sp
   15a98:	|      move.l d0,d1
   15a9a:	|      move.l 1cb1a <cameraZoom>,d0
   15aa0:	|      move.l d0,-(sp)
   15aa2:	|      move.l d1,-(sp)
   15aa4:	|      jsr 17e1e <__mulsf3>
   15aaa:	|      addq.l #8,sp
   15aac:	|      move.l d0,-(sp)
   15aae:	|      jsr 17d04 <__fixsfsi>
   15ab4:	|      addq.l #4,sp
   15ab6:	|      move.l d0,1d144 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   15abc:	|      move.l 1d148 <input+0xe>,d0
   15ac2:	|      move.l d0,-(sp)
   15ac4:	|      jsr 17d6c <__floatsisf>
   15aca:	|      addq.l #4,sp
   15acc:	|      move.l d0,d1
   15ace:	|      move.l 1cb1a <cameraZoom>,d0
   15ad4:	|      move.l d0,-(sp)
   15ad6:	|      move.l d1,-(sp)
   15ad8:	|      jsr 17e1e <__mulsf3>
   15ade:	|      addq.l #8,sp
   15ae0:	|      move.l d0,-(sp)
   15ae2:	|      jsr 17d04 <__fixsfsi>
   15ae8:	|      addq.l #4,sp
   15aea:	|      move.l d0,1d148 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15af0:	|      movea.l 1d278 <frozenStuff>,a0
   15af6:	|      move.l 56(a0),d0
   15afa:	|      move.l d0,1cb1a <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15b00:	|      move.l 1d144 <input+0xa>,d0
   15b06:	|      move.l d0,-(sp)
   15b08:	|      jsr 17d6c <__floatsisf>
   15b0e:	|      addq.l #4,sp
   15b10:	|      move.l d0,d1
   15b12:	|      move.l 1cb1a <cameraZoom>,d0
   15b18:	|      move.l d0,-(sp)
   15b1a:	|      move.l d1,-(sp)
   15b1c:	|      jsr 17c22 <__divsf3>
   15b22:	|      addq.l #8,sp
   15b24:	|      move.l d0,-(sp)
   15b26:	|      jsr 17d04 <__fixsfsi>
   15b2c:	|      addq.l #4,sp
   15b2e:	|      move.l d0,1d144 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   15b34:	|      move.l 1d148 <input+0xe>,d0
   15b3a:	|      move.l d0,-(sp)
   15b3c:	|      jsr 17d6c <__floatsisf>
   15b42:	|      addq.l #4,sp
   15b44:	|      move.l d0,d1
   15b46:	|      move.l 1cb1a <cameraZoom>,d0
   15b4c:	|      move.l d0,-(sp)
   15b4e:	|      move.l d1,-(sp)
   15b50:	|      jsr 17c22 <__divsf3>
   15b56:	|      addq.l #8,sp
   15b58:	|      move.l d0,-(sp)
   15b5a:	|      jsr 17d04 <__fixsfsi>
   15b60:	|      addq.l #4,sp
   15b62:	|      move.l d0,1d148 <input+0xe>

	killAllPeople ();
   15b68:	|      jsr b014 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   15b6e:	|      movea.l 1d278 <frozenStuff>,a0
   15b74:	|      move.l (a0),d0
   15b76:	|      move.l d0,1d1e8 <allPeople>

	killAllRegions ();
   15b7c:	|      jsr 1614a <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15b82:	|      movea.l 1d278 <frozenStuff>,a0
   15b88:	|      move.l 4(a0),d0
   15b8c:	|      move.l d0,1d294 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15b92:	|      move.l 1d082 <mouseCursorAnim>,d0
   15b98:	|      move.l d0,-(sp)
   15b9a:	|      jsr 9ede <deleteAnim>
   15ba0:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15ba2:	|      movea.l 1d278 <frozenStuff>,a0
   15ba8:	|      move.l 32(a0),d0
   15bac:	|      move.l d0,1d082 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15bb2:	|      movea.l 1d278 <frozenStuff>,a0
   15bb8:	|      move.l 36(a0),d0
   15bbc:	|      move.l d0,1d086 <mouseCursorFrameNum>

	killZBuffer ();
   15bc2:	|      jsr 8c84 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   15bc8:	|      movea.l 1d278 <frozenStuff>,a0
   15bce:	|      move.l 60(a0),d0
   15bd2:	|      move.l d0,1d1e4 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   15bd8:	|      move.l 1caf8 <currentEvents>,d0
   15bde:	|  ,-- beq.s 15bf8 <unfreeze+0x1ce>
   15be0:	|  |   move.l 1caf8 <currentEvents>,12(sp)
   15be8:	|  |   move.l 1d188 <SysBase>,d0
   15bee:	|  |   movea.l d0,a6
   15bf0:	|  |   movea.l 12(sp),a1
   15bf4:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   15bf8:	|  '-> movea.l 1d278 <frozenStuff>,a0
   15bfe:	|      move.l 28(a0),d0
   15c02:	|      move.l d0,1caf8 <currentEvents>

	killAllSpeech ();
   15c08:	|      jsr 456e <killAllSpeech>
	if (speech) FreeVec(speech);
   15c0e:	|      move.l 1d0d8 <speech>,d0
   15c14:	|  ,-- beq.s 15c2e <unfreeze+0x204>
   15c16:	|  |   move.l 1d0d8 <speech>,8(sp)
   15c1e:	|  |   move.l 1d188 <SysBase>,d0
   15c24:	|  |   movea.l d0,a6
   15c26:	|  |   movea.l 8(sp),a1
   15c2a:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   15c2e:	|  '-> movea.l 1d278 <frozenStuff>,a0
   15c34:	|      move.l 20(a0),d0
   15c38:	|      move.l d0,1d0d8 <speech>

	frozenStuff = frozenStuff -> next;
   15c3e:	|      movea.l 1d278 <frozenStuff>,a0
   15c44:	|      move.l 64(a0),d0
   15c48:	|      move.l d0,1d278 <frozenStuff>

	overRegion = NULL;
   15c4e:	|      clr.l 1d298 <overRegion>
	if (killMe) FreeVec(killMe);
   15c54:	|      tst.l 16(sp)
   15c58:	|  ,-- beq.s 15c70 <unfreeze+0x246>
   15c5a:	|  |   move.l 16(sp),4(sp)
   15c60:	|  |   move.l 1d188 <SysBase>,d0
   15c66:	|  |   movea.l d0,a6
   15c68:	|  |   movea.l 4(sp),a1
   15c6c:	|  |   jsr -690(a6)
	killMe = NULL;
   15c70:	|  '-> clr.l 16(sp)
   15c74:	|  ,-- bra.s 15c78 <unfreeze+0x24e>
	if (! frozenStuff) return;
   15c76:	'--|-> nop
}
   15c78:	   '-> movea.l (sp)+,a6
   15c7a:	       lea 16(sp),sp
   15c7e:	       rts

00015c80 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15c80:	pea 1a828 <PutChar+0x244c>
   15c86:	jsr 1793a <KPrintF>
   15c8c:	addq.l #4,sp
	return FALSE;
   15c8e:	clr.w d0
}
   15c90:	rts

00015c92 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15c92:	          lea -32(sp),sp
   15c96:	          move.l a6,-(sp)
   15c98:	          move.l d2,-(sp)
	unsigned int a = 0;
   15c9a:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15c9e:	          move.l 1d284 <fontOrderString>,d0
   15ca4:	      ,-- beq.s 15cbe <loadFont+0x2c>
   15ca6:	      |   move.l 1d284 <fontOrderString>,24(sp)
   15cae:	      |   move.l 1d188 <SysBase>,d0
   15cb4:	      |   movea.l d0,a6
   15cb6:	      |   movea.l 24(sp),a1
   15cba:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15cbe:	      '-> move.l 48(sp),-(sp)
   15cc2:	          jsr b8 <copyString>
   15cc8:	          addq.l #4,sp
   15cca:	          move.l d0,1d284 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15cd0:	          move.l 1d290 <theFont>,d0
   15cd6:	      ,-- beq.s 15ce8 <loadFont+0x56>
   15cd8:	      |   move.l 1d290 <theFont>,d0
   15cde:	      |   move.l d0,-(sp)
   15ce0:	      |   jsr 8fc2 <forgetSpriteBank>
   15ce6:	      |   addq.l #4,sp
	theFont = NULL;
   15ce8:	      '-> clr.l 1d290 <theFont>

	loadedFontNum = filenum;
   15cee:	          move.l 44(sp),1d280 <loadedFontNum>

	fontTableSize = 0;
   15cf6:	          clr.l 1d28c <fontTableSize>
	char *tmp = charOrder;
   15cfc:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15d02:	   ,----- bra.s 15d3e <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   15d04:	,--|----> movea.l 32(sp),a0
   15d08:	|  |      move.b (a0),d0
   15d0a:	|  |      ext.w d0
   15d0c:	|  |      movea.w d0,a0
   15d0e:	|  |      move.l 1d28c <fontTableSize>,d0
   15d14:	|  |      move.l d0,d0
   15d16:	|  |      move.b d0,d0
   15d18:	|  |      andi.l #255,d0
   15d1e:	|  |      cmp.l a0,d0
   15d20:	|  |  ,-- bge.s 15d32 <loadFont+0xa0>
   15d22:	|  |  |   movea.l 32(sp),a0
   15d26:	|  |  |   move.b (a0),d0
   15d28:	|  |  |   ext.w d0
   15d2a:	|  |  |   movea.w d0,a0
   15d2c:	|  |  |   move.l a0,1d28c <fontTableSize>
		*tmp++;
   15d32:	|  |  '-> move.l 32(sp),d0
   15d36:	|  |      move.l d0,d1
   15d38:	|  |      addq.l #1,d1
   15d3a:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   15d3e:	|  '----> movea.l 32(sp),a0
   15d42:	|         move.b (a0),d0
   15d44:	'-------- bne.s 15d04 <loadFont+0x72>
	}
	fontTableSize++;
   15d46:	          move.l 1d28c <fontTableSize>,d0
   15d4c:	          addq.l #1,d0
   15d4e:	          move.l d0,1d28c <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15d54:	          move.l 1d288 <fontTable>,d0
   15d5a:	      ,-- beq.s 15d74 <loadFont+0xe2>
   15d5c:	      |   move.l 1d288 <fontTable>,20(sp)
   15d64:	      |   move.l 1d188 <SysBase>,d0
   15d6a:	      |   movea.l d0,a6
   15d6c:	      |   movea.l 20(sp),a1
   15d70:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15d74:	      '-> move.l 1d28c <fontTableSize>,d0
   15d7a:	          add.l d0,d0
   15d7c:	          add.l d0,d0
   15d7e:	          move.l d0,16(sp)
   15d82:	          clr.l 12(sp)
   15d86:	          move.l 1d188 <SysBase>,d0
   15d8c:	          movea.l d0,a6
   15d8e:	          move.l 16(sp),d0
   15d92:	          move.l 12(sp),d1
   15d96:	          jsr -684(a6)
   15d9a:	          move.l d0,8(sp)
   15d9e:	          move.l 8(sp),d0
   15da2:	          move.l d0,1d288 <fontTable>
	if (!fontTable) return FALSE;
   15da8:	          move.l 1d288 <fontTable>,d0
   15dae:	      ,-- bne.s 15db6 <loadFont+0x124>
   15db0:	      |   clr.w d0
   15db2:	,-----|-- bra.w 15e5c <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   15db6:	|     '-> clr.l 36(sp)
   15dba:	|     ,-- bra.s 15dd4 <loadFont+0x142>
		fontTable[a] = 0;
   15dbc:	|  ,--|-> move.l 1d288 <fontTable>,d1
   15dc2:	|  |  |   move.l 36(sp),d0
   15dc6:	|  |  |   add.l d0,d0
   15dc8:	|  |  |   add.l d0,d0
   15dca:	|  |  |   movea.l d1,a0
   15dcc:	|  |  |   adda.l d0,a0
   15dce:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15dd0:	|  |  |   addq.l #1,36(sp)
   15dd4:	|  |  '-> move.l 1d28c <fontTableSize>,d0
   15dda:	|  |      cmp.l 36(sp),d0
   15dde:	|  '----- bhi.s 15dbc <loadFont+0x12a>
	}
	a = 0;
   15de0:	|         clr.l 36(sp)
	int i = 0;
   15de4:	|         clr.l 28(sp)
	tmp = charOrder;
   15de8:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15dee:	|     ,-- bra.s 15e1e <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15df0:	|  ,--|-> move.l 1d288 <fontTable>,d1
   15df6:	|  |  |   move.l 32(sp),d0
   15dfa:	|  |  |   move.l d0,d2
   15dfc:	|  |  |   addq.l #1,d2
   15dfe:	|  |  |   move.l d2,32(sp)
   15e02:	|  |  |   movea.l d0,a0
   15e04:	|  |  |   move.b (a0),d0
   15e06:	|  |  |   ext.w d0
   15e08:	|  |  |   movea.w d0,a0
   15e0a:	|  |  |   move.l a0,d0
   15e0c:	|  |  |   add.l a0,d0
   15e0e:	|  |  |   add.l d0,d0
   15e10:	|  |  |   movea.l d1,a0
   15e12:	|  |  |   adda.l d0,a0
   15e14:	|  |  |   move.l 28(sp),d0
   15e18:	|  |  |   move.l d0,(a0)
		i++;
   15e1a:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   15e1e:	|  |  '-> movea.l 32(sp),a0
   15e22:	|  |      move.b (a0),d0
   15e24:	|  '----- bne.s 15df0 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   15e26:	|         move.l 44(sp),-(sp)
   15e2a:	|         jsr 1665c <loadBankForAnim>
   15e30:	|         addq.l #4,sp
   15e32:	|         move.l d0,1d290 <theFont>
	if (!theFont) {
   15e38:	|         move.l 1d290 <theFont>,d0
   15e3e:	|     ,-- bne.s 15e52 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   15e40:	|     |   pea 1a84f <PutChar+0x2473>
   15e46:	|     |   jsr 1793a <KPrintF>
   15e4c:	|     |   addq.l #4,sp
		return FALSE;
   15e4e:	|     |   clr.w d0
   15e50:	+-----|-- bra.s 15e5c <loadFont+0x1ca>
	}
	fontHeight = h;
   15e52:	|     '-> move.l 52(sp),1d27c <fontHeight>
	return TRUE;
   15e5a:	|         moveq #1,d0
}
   15e5c:	'-------> move.l (sp)+,d2
   15e5e:	          movea.l (sp)+,a6
   15e60:	          lea 32(sp),sp
   15e64:	          rts

00015e66 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15e66:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15e6a:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15e6e:	                move.l 1d28c <fontTableSize>,d0
   15e74:	,-------------- beq.w 15f3c <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   15e78:	|               move.w 1d080 <fontSpace>,d0
   15e7e:	|               asr.w #1,d0
   15e80:	|               ext.l d0
   15e82:	|               add.l d0,20(sp)
	char *tmp = theText;
   15e86:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15e8c:	|     ,-------- bra.w 15f30 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15e90:	|  ,--|-------> movea.l 1d290 <theFont>,a0
   15e96:	|  |  |         movea.l 16(a0),a0
   15e9a:	|  |  |         movea.l 8(sp),a1
   15e9e:	|  |  |         move.b (a1),d0
   15ea0:	|  |  |         move.b d0,d0
   15ea2:	|  |  |         andi.l #255,d0
   15ea8:	|  |  |         move.l 1d28c <fontTableSize>,d1
   15eae:	|  |  |         cmp.l d0,d1
   15eb0:	|  |  |  ,----- bls.s 15edc <pasteStringToBackdrop+0x76>
   15eb2:	|  |  |  |      move.l 1d288 <fontTable>,d1
   15eb8:	|  |  |  |      movea.l 8(sp),a1
   15ebc:	|  |  |  |      move.b (a1),d0
   15ebe:	|  |  |  |      move.b d0,d0
   15ec0:	|  |  |  |      andi.l #255,d0
   15ec6:	|  |  |  |      add.l d0,d0
   15ec8:	|  |  |  |      add.l d0,d0
   15eca:	|  |  |  |      movea.l d1,a1
   15ecc:	|  |  |  |      adda.l d0,a1
   15ece:	|  |  |  |      move.l (a1),d1
   15ed0:	|  |  |  |      move.l d1,d0
   15ed2:	|  |  |  |      lsl.l #3,d0
   15ed4:	|  |  |  |      sub.l d1,d0
   15ed6:	|  |  |  |      add.l d0,d0
   15ed8:	|  |  |  |      add.l d0,d0
   15eda:	|  |  |  |  ,-- bra.s 15ede <pasteStringToBackdrop+0x78>
   15edc:	|  |  |  '--|-> moveq #0,d0
   15ede:	|  |  |     '-> adda.l d0,a0
   15ee0:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15ee2:	|  |  |         move.l 24(sp),d1
   15ee6:	|  |  |         movea.l (sp),a0
   15ee8:	|  |  |         move.l 12(a0),d0
   15eec:	|  |  |         move.l d0,d0
   15eee:	|  |  |         sub.w d0,d1
   15ef0:	|  |  |         move.w d1,d0
   15ef2:	|  |  |         movea.w d0,a1
   15ef4:	|  |  |         move.l 20(sp),d1
   15ef8:	|  |  |         movea.l (sp),a0
   15efa:	|  |  |         move.l 8(a0),d0
   15efe:	|  |  |         move.l d0,d0
   15f00:	|  |  |         sub.w d0,d1
   15f02:	|  |  |         move.w d1,d0
   15f04:	|  |  |         movea.w d0,a0
   15f06:	|  |  |         move.l a1,-(sp)
   15f08:	|  |  |         move.l a0,-(sp)
   15f0a:	|  |  |         move.l 8(sp),-(sp)
   15f0e:	|  |  |         jsr 24e8 <CstPasteChar>
   15f14:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15f18:	|  |  |         movea.l (sp),a0
   15f1a:	|  |  |         move.l (a0),d1
   15f1c:	|  |  |         move.w 1d080 <fontSpace>,d0
   15f22:	|  |  |         movea.w d0,a0
   15f24:	|  |  |         move.l d1,d0
   15f26:	|  |  |         add.l a0,d0
   15f28:	|  |  |         add.l d0,20(sp)
		tmp++;
   15f2c:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   15f30:	|  |  '-------> movea.l 8(sp),a0
   15f34:	|  |            move.b (a0),d0
   15f36:	|  '----------- bne.w 15e90 <pasteStringToBackdrop+0x2a>
   15f3a:	|           ,-- bra.s 15f3e <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   15f3c:	'-----------|-> nop
    }
}
   15f3e:	            '-> lea 12(sp),sp
   15f42:	                rts

00015f44 <stringWidth>:


int stringWidth (char * theText) {
   15f44:	                lea -16(sp),sp
	int a = 0;
   15f48:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   15f4c:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   15f50:	                move.l 1d28c <fontTableSize>,d0
   15f56:	            ,-- bne.s 15f5c <stringWidth+0x18>
   15f58:	            |   moveq #0,d0
   15f5a:	,-----------|-- bra.s 15fd0 <stringWidth+0x8c>

	char *tmp = theText;
   15f5c:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   15f62:	|     ,-------- bra.s 15fc4 <stringWidth+0x80>
        c = *tmp++;
   15f64:	|  ,--|-------> move.l 8(sp),d0
   15f68:	|  |  |         move.l d0,d1
   15f6a:	|  |  |         addq.l #1,d1
   15f6c:	|  |  |         move.l d1,8(sp)
   15f70:	|  |  |         movea.l d0,a0
   15f72:	|  |  |         move.b (a0),d0
   15f74:	|  |  |         ext.w d0
   15f76:	|  |  |         movea.w d0,a0
   15f78:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   15f7a:	|  |  |         movea.l 1d290 <theFont>,a0
   15f80:	|  |  |         movea.l 16(a0),a1
   15f84:	|  |  |         move.l 1d28c <fontTableSize>,d0
   15f8a:	|  |  |         cmp.l (sp),d0
   15f8c:	|  |  |  ,----- bls.s 15fac <stringWidth+0x68>
   15f8e:	|  |  |  |      move.l 1d288 <fontTable>,d1
   15f94:	|  |  |  |      move.l (sp),d0
   15f96:	|  |  |  |      add.l d0,d0
   15f98:	|  |  |  |      add.l d0,d0
   15f9a:	|  |  |  |      movea.l d1,a0
   15f9c:	|  |  |  |      adda.l d0,a0
   15f9e:	|  |  |  |      move.l (a0),d1
   15fa0:	|  |  |  |      move.l d1,d0
   15fa2:	|  |  |  |      lsl.l #3,d0
   15fa4:	|  |  |  |      sub.l d1,d0
   15fa6:	|  |  |  |      add.l d0,d0
   15fa8:	|  |  |  |      add.l d0,d0
   15faa:	|  |  |  |  ,-- bra.s 15fae <stringWidth+0x6a>
   15fac:	|  |  |  '--|-> moveq #0,d0
   15fae:	|  |  |     '-> lea (0,a1,d0.l),a0
   15fb2:	|  |  |         move.l (a0),d1
   15fb4:	|  |  |         move.w 1d080 <fontSpace>,d0
   15fba:	|  |  |         movea.w d0,a0
   15fbc:	|  |  |         move.l d1,d0
   15fbe:	|  |  |         add.l a0,d0
   15fc0:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   15fc4:	|  |  '-------> movea.l 8(sp),a0
   15fc8:	|  |            move.b (a0),d0
   15fca:	|  '----------- bne.s 15f64 <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   15fcc:	|               move.l 12(sp),d0
}
   15fd0:	'-------------> lea 16(sp),sp
   15fd4:	                rts

00015fd6 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15fd6:	       lea -16(sp),sp
   15fda:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15fdc:	       moveq #36,d0
   15fde:	       move.l d0,16(sp)
   15fe2:	       clr.l 12(sp)
   15fe6:	       move.l 1d188 <SysBase>,d0
   15fec:	       movea.l d0,a6
   15fee:	       move.l 16(sp),d0
   15ff2:	       move.l 12(sp),d1
   15ff6:	       jsr -684(a6)
   15ffa:	       move.l d0,8(sp)
   15ffe:	       move.l 8(sp),d0
   16002:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   16006:	   ,-- bne.s 1600e <addScreenRegion+0x38>
   16008:	   |   clr.w d0
   1600a:	,--|-- bra.w 1608e <addScreenRegion+0xb8>
    newRegion->di = di;
   1600e:	|  '-> movea.l 4(sp),a0
   16012:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   16018:	|      movea.l 4(sp),a0
   1601c:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   16020:	|      movea.l 4(sp),a0
   16024:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   1602a:	|      movea.l 4(sp),a0
   1602e:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   16034:	|      movea.l 4(sp),a0
   16038:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   1603e:	|      movea.l 4(sp),a0
   16042:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   16048:	|      movea.l 4(sp),a0
   1604c:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   16052:	|      move.l 52(sp),-(sp)
   16056:	|      jsr dc5e <loadObjectType>
   1605c:	|      addq.l #4,sp
   1605e:	|      movea.l 4(sp),a0
   16062:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   16066:	|      move.l 1d294 <allScreenRegions>,d0
   1606c:	|      movea.l 4(sp),a0
   16070:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   16074:	|      move.l 4(sp),1d294 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   1607c:	|      movea.l 4(sp),a0
   16080:	|      move.l 28(a0),d0
   16084:	|      sne d0
   16086:	|      neg.b d0
   16088:	|      move.b d0,d0
   1608a:	|      andi.w #255,d0
}
   1608e:	'----> movea.l (sp)+,a6
   16090:	       lea 16(sp),sp
   16094:	       rts

00016096 <getOverRegion>:

void getOverRegion () {
   16096:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   16098:	             move.l 1d294 <allScreenRegions>,(sp)
	while (thisRegion) {
   1609e:	   ,-------- bra.s 1610c <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   160a0:	,--|-------> move.l 1d144 <input+0xa>,d0
   160a6:	|  |         movea.l (sp),a0
   160a8:	|  |         movea.l (a0),a0
   160aa:	|  |         move.l 1d23e <cameraX>,d1
   160b0:	|  |         suba.l d1,a0
   160b2:	|  |         cmpa.l d0,a0
   160b4:	|  |  ,----- bgt.s 16106 <getOverRegion+0x70>
   160b6:	|  |  |      move.l 1d148 <input+0xe>,d0
   160bc:	|  |  |      movea.l (sp),a0
   160be:	|  |  |      movea.l 4(a0),a0
   160c2:	|  |  |      move.l 1d242 <cameraY>,d1
   160c8:	|  |  |      suba.l d1,a0
   160ca:	|  |  |      cmpa.l d0,a0
   160cc:	|  |  +----- bgt.s 16106 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   160ce:	|  |  |      move.l 1d144 <input+0xa>,d0
   160d4:	|  |  |      movea.l (sp),a0
   160d6:	|  |  |      movea.l 8(a0),a0
   160da:	|  |  |      move.l 1d23e <cameraX>,d1
   160e0:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   160e2:	|  |  |      cmpa.l d0,a0
   160e4:	|  |  +----- blt.s 16106 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   160e6:	|  |  |      move.l 1d148 <input+0xe>,d0
   160ec:	|  |  |      movea.l (sp),a0
   160ee:	|  |  |      movea.l 12(a0),a0
   160f2:	|  |  |      move.l 1d242 <cameraY>,d1
   160f8:	|  |  |      suba.l d1,a0
   160fa:	|  |  |      cmpa.l d0,a0
   160fc:	|  |  +----- blt.s 16106 <getOverRegion+0x70>
			overRegion = thisRegion;
   160fe:	|  |  |      move.l (sp),1d298 <overRegion>
			return;
   16104:	|  |  |  ,-- bra.s 16118 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   16106:	|  |  '--|-> movea.l (sp),a0
   16108:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   1610c:	|  '-----|-> tst.l (sp)
   1610e:	'--------|-- bne.s 160a0 <getOverRegion+0xa>
	}
	overRegion = NULL;
   16110:	         |   clr.l 1d298 <overRegion>
	return;
   16116:	         |   nop
}
   16118:	         '-> addq.l #4,sp
   1611a:	             rts

0001611c <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   1611c:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1611e:	             move.l 1d294 <allScreenRegions>,(sp)

	while (thisRegion) {
   16124:	   ,-------- bra.s 16140 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   16126:	,--|-------> movea.l (sp),a0
   16128:	|  |         movea.l 28(a0),a0
   1612c:	|  |         move.l 4(a0),d0
   16130:	|  |         cmp.l 8(sp),d0
   16134:	|  |     ,-- bne.s 1613a <getRegionForObject+0x1e>
			return thisRegion;
   16136:	|  |     |   move.l (sp),d0
   16138:	|  |  ,--|-- bra.s 16146 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   1613a:	|  |  |  '-> movea.l (sp),a0
   1613c:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   16140:	|  '--|----> tst.l (sp)
   16142:	'-----|----- bne.s 16126 <getRegionForObject+0xa>
	}

	return NULL;
   16144:	      |      moveq #0,d0
}
   16146:	      '----> addq.l #4,sp
   16148:	             rts

0001614a <killAllRegions>:

void killAllRegions () {
   1614a:	       subq.l #8,sp
   1614c:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1614e:	   ,-- bra.s 16190 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   16150:	,--|-> move.l 1d294 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   16158:	|  |   movea.l 1d294 <allScreenRegions>,a0
   1615e:	|  |   move.l 32(a0),d0
   16162:	|  |   move.l d0,1d294 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   16168:	|  |   movea.l 8(sp),a0
   1616c:	|  |   move.l 28(a0),d0
   16170:	|  |   move.l d0,-(sp)
   16172:	|  |   jsr df16 <removeObjectType>
   16178:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   1617a:	|  |   move.l 8(sp),4(sp)
   16180:	|  |   move.l 1d188 <SysBase>,d0
   16186:	|  |   movea.l d0,a6
   16188:	|  |   movea.l 4(sp),a1
   1618c:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   16190:	|  '-> move.l 1d294 <allScreenRegions>,d0
   16196:	'----- bne.s 16150 <killAllRegions+0x6>
	}
	overRegion = NULL;
   16198:	       clr.l 1d298 <overRegion>
}
   1619e:	       nop
   161a0:	       movea.l (sp)+,a6
   161a2:	       addq.l #8,sp
   161a4:	       rts

000161a6 <loadRegions>:

void loadRegions (BPTR fp) {
   161a6:	       lea -24(sp),sp
   161aa:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   161ac:	       move.l 32(sp),-(sp)
   161b0:	       jsr 6bc <get2bytes>
   161b6:	       addq.l #4,sp
   161b8:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   161bc:	       move.l #119444,20(sp)

	while (numRegions --) {
   161c4:	   ,-- bra.w 162a2 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   161c8:	,--|-> moveq #36,d0
   161ca:	|  |   move.l d0,16(sp)
   161ce:	|  |   clr.l 12(sp)
   161d2:	|  |   move.l 1d188 <SysBase>,d0
   161d8:	|  |   movea.l d0,a6
   161da:	|  |   move.l 16(sp),d0
   161de:	|  |   move.l 12(sp),d1
   161e2:	|  |   jsr -684(a6)
   161e6:	|  |   move.l d0,8(sp)
   161ea:	|  |   move.l 8(sp),d0
   161ee:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   161f2:	|  |   movea.l 20(sp),a0
   161f6:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   161fa:	|  |   moveq #32,d1
   161fc:	|  |   add.l 4(sp),d1
   16200:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   16204:	|  |   move.l 32(sp),-(sp)
   16208:	|  |   jsr 6bc <get2bytes>
   1620e:	|  |   addq.l #4,sp
   16210:	|  |   movea.l 4(sp),a0
   16214:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   16216:	|  |   move.l 32(sp),-(sp)
   1621a:	|  |   jsr 6bc <get2bytes>
   16220:	|  |   addq.l #4,sp
   16222:	|  |   movea.l 4(sp),a0
   16226:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   1622a:	|  |   move.l 32(sp),-(sp)
   1622e:	|  |   jsr 6bc <get2bytes>
   16234:	|  |   addq.l #4,sp
   16236:	|  |   movea.l 4(sp),a0
   1623a:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   1623e:	|  |   move.l 32(sp),-(sp)
   16242:	|  |   jsr 6bc <get2bytes>
   16248:	|  |   addq.l #4,sp
   1624a:	|  |   movea.l 4(sp),a0
   1624e:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   16252:	|  |   move.l 32(sp),-(sp)
   16256:	|  |   jsr 6bc <get2bytes>
   1625c:	|  |   addq.l #4,sp
   1625e:	|  |   movea.l 4(sp),a0
   16262:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   16266:	|  |   move.l 32(sp),-(sp)
   1626a:	|  |   jsr 6bc <get2bytes>
   16270:	|  |   addq.l #4,sp
   16272:	|  |   movea.l 4(sp),a0
   16276:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   1627a:	|  |   move.l 32(sp),-(sp)
   1627e:	|  |   jsr 6bc <get2bytes>
   16284:	|  |   addq.l #4,sp
   16286:	|  |   movea.l 4(sp),a0
   1628a:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   1628e:	|  |   move.l 32(sp),-(sp)
   16292:	|  |   jsr dc0c <loadObjectRef>
   16298:	|  |   addq.l #4,sp
   1629a:	|  |   movea.l 4(sp),a0
   1629e:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   162a2:	|  '-> move.l 24(sp),d0
   162a6:	|      move.l d0,d1
   162a8:	|      subq.l #1,d1
   162aa:	|      move.l d1,24(sp)
   162ae:	|      tst.l d0
   162b0:	'----- bne.w 161c8 <loadRegions+0x22>
	}
	* pointy = NULL;
   162b4:	       movea.l 20(sp),a0
   162b8:	       clr.l (a0)
}
   162ba:	       nop
   162bc:	       movea.l (sp)+,a6
   162be:	       lea 24(sp),sp
   162c2:	       rts

000162c4 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   162c4:	             lea -12(sp),sp
   162c8:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   162ca:	             move.l #119444,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   162d2:	   ,-------- bra.s 1634c <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   162d4:	,--|-------> movea.l 12(sp),a0
   162d8:	|  |         movea.l (a0),a0
   162da:	|  |         movea.l 28(a0),a0
   162de:	|  |         move.l 4(a0),d0
   162e2:	|  |         cmp.l 20(sp),d0
   162e6:	|  |  ,----- bne.s 1633e <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   162e8:	|  |  |      movea.l 12(sp),a0
   162ec:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   162f0:	|  |  |      movea.l 8(sp),a0
   162f4:	|  |  |      move.l 32(a0),d0
   162f8:	|  |  |      movea.l 12(sp),a0
   162fc:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   162fe:	|  |  |      movea.l 8(sp),a0
   16302:	|  |  |      move.l 28(a0),d0
   16306:	|  |  |      move.l d0,-(sp)
   16308:	|  |  |      jsr df16 <removeObjectType>
   1630e:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   16310:	|  |  |      move.l 1d298 <overRegion>,d0
   16316:	|  |  |      cmp.l 8(sp),d0
   1631a:	|  |  |  ,-- bne.s 16322 <removeScreenRegion+0x5e>
   1631c:	|  |  |  |   clr.l 1d298 <overRegion>
            FreeVec(killMe);
   16322:	|  |  |  '-> move.l 8(sp),4(sp)
   16328:	|  |  |      move.l 1d188 <SysBase>,d0
   1632e:	|  |  |      movea.l d0,a6
   16330:	|  |  |      movea.l 4(sp),a1
   16334:	|  |  |      jsr -690(a6)
            killMe = NULL;
   16338:	|  |  |      clr.l 8(sp)
   1633c:	|  +--|----- bra.s 1634c <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   1633e:	|  |  '----> movea.l 12(sp),a0
   16342:	|  |         move.l (a0),d0
   16344:	|  |         moveq #32,d1
   16346:	|  |         add.l d0,d1
   16348:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   1634c:	|  '-------> movea.l 12(sp),a0
   16350:	|            move.l (a0),d0
   16352:	'----------- bne.s 162d4 <removeScreenRegion+0x10>
        }
    }
}
   16354:	             nop
   16356:	             nop
   16358:	             movea.l (sp)+,a6
   1635a:	             lea 12(sp),sp
   1635e:	             rts

00016360 <saveRegions>:

void saveRegions (BPTR fp) {
   16360:	       subq.l #8,sp
	int numRegions = 0;
   16362:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   16366:	       move.l 1d294 <allScreenRegions>,(sp)
	while (thisRegion) {
   1636c:	   ,-- bra.s 16378 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   1636e:	,--|-> movea.l (sp),a0
   16370:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   16374:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   16378:	|  '-> tst.l (sp)
   1637a:	'----- bne.s 1636e <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   1637c:	       move.l 12(sp),-(sp)
   16380:	       move.l 8(sp),-(sp)
   16384:	       jsr 8d0 <put2bytes>
   1638a:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   1638c:	       move.l 1d294 <allScreenRegions>,(sp)
	while (thisRegion) {
   16392:	,----- bra.w 1643a <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   16396:	|  ,-> movea.l (sp),a0
   16398:	|  |   move.l (a0),d0
   1639a:	|  |   move.l 12(sp),-(sp)
   1639e:	|  |   move.l d0,-(sp)
   163a0:	|  |   jsr 8d0 <put2bytes>
   163a6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   163a8:	|  |   movea.l (sp),a0
   163aa:	|  |   move.l 4(a0),d0
   163ae:	|  |   move.l 12(sp),-(sp)
   163b2:	|  |   move.l d0,-(sp)
   163b4:	|  |   jsr 8d0 <put2bytes>
   163ba:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   163bc:	|  |   movea.l (sp),a0
   163be:	|  |   move.l 8(a0),d0
   163c2:	|  |   move.l 12(sp),-(sp)
   163c6:	|  |   move.l d0,-(sp)
   163c8:	|  |   jsr 8d0 <put2bytes>
   163ce:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   163d0:	|  |   movea.l (sp),a0
   163d2:	|  |   move.l 12(a0),d0
   163d6:	|  |   move.l 12(sp),-(sp)
   163da:	|  |   move.l d0,-(sp)
   163dc:	|  |   jsr 8d0 <put2bytes>
   163e2:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   163e4:	|  |   movea.l (sp),a0
   163e6:	|  |   move.l 16(a0),d0
   163ea:	|  |   move.l 12(sp),-(sp)
   163ee:	|  |   move.l d0,-(sp)
   163f0:	|  |   jsr 8d0 <put2bytes>
   163f6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   163f8:	|  |   movea.l (sp),a0
   163fa:	|  |   move.l 20(a0),d0
   163fe:	|  |   move.l 12(sp),-(sp)
   16402:	|  |   move.l d0,-(sp)
   16404:	|  |   jsr 8d0 <put2bytes>
   1640a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   1640c:	|  |   movea.l (sp),a0
   1640e:	|  |   move.l 24(a0),d0
   16412:	|  |   move.l 12(sp),-(sp)
   16416:	|  |   move.l d0,-(sp)
   16418:	|  |   jsr 8d0 <put2bytes>
   1641e:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   16420:	|  |   movea.l (sp),a0
   16422:	|  |   move.l 28(a0),d0
   16426:	|  |   move.l 12(sp),-(sp)
   1642a:	|  |   move.l d0,-(sp)
   1642c:	|  |   jsr dfb6 <saveObjectRef>
   16432:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   16434:	|  |   movea.l (sp),a0
   16436:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   1643a:	'--|-> tst.l (sp)
   1643c:	   '-- bne.w 16396 <saveRegions+0x36>
	}
}
   16440:	       nop
   16442:	       nop
   16444:	       addq.l #8,sp
   16446:	       rts

00016448 <showBoxes>:

void showBoxes () {
   16448:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   1644a:	       move.l 1d294 <allScreenRegions>,(sp)

	while (huntRegion) {
   16450:	,----- bra.w 164ec <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   16454:	|  ,-> movea.l (sp),a0
   16456:	|  |   move.l 12(a0),d0
   1645a:	|  |   movea.l d0,a1
   1645c:	|  |   movea.l (sp),a0
   1645e:	|  |   move.l 4(a0),d0
   16462:	|  |   move.l d0,d1
   16464:	|  |   movea.l (sp),a0
   16466:	|  |   move.l (a0),d0
   16468:	|  |   move.l a1,-(sp)
   1646a:	|  |   move.l d1,-(sp)
   1646c:	|  |   move.l d0,-(sp)
   1646e:	|  |   jsr d89a <drawVerticalLine>
   16474:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   16478:	|  |   movea.l (sp),a0
   1647a:	|  |   move.l 12(a0),d0
   1647e:	|  |   movea.l d0,a1
   16480:	|  |   movea.l (sp),a0
   16482:	|  |   move.l 4(a0),d0
   16486:	|  |   move.l d0,d1
   16488:	|  |   movea.l (sp),a0
   1648a:	|  |   move.l 8(a0),d0
   1648e:	|  |   move.l a1,-(sp)
   16490:	|  |   move.l d1,-(sp)
   16492:	|  |   move.l d0,-(sp)
   16494:	|  |   jsr d89a <drawVerticalLine>
   1649a:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   1649e:	|  |   movea.l (sp),a0
   164a0:	|  |   move.l 8(a0),d0
   164a4:	|  |   movea.l d0,a1
   164a6:	|  |   movea.l (sp),a0
   164a8:	|  |   move.l 4(a0),d0
   164ac:	|  |   move.l d0,d1
   164ae:	|  |   movea.l (sp),a0
   164b0:	|  |   move.l (a0),d0
   164b2:	|  |   move.l a1,-(sp)
   164b4:	|  |   move.l d1,-(sp)
   164b6:	|  |   move.l d0,-(sp)
   164b8:	|  |   jsr d874 <drawHorizontalLine>
   164be:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   164c2:	|  |   movea.l (sp),a0
   164c4:	|  |   move.l 8(a0),d0
   164c8:	|  |   movea.l d0,a1
   164ca:	|  |   movea.l (sp),a0
   164cc:	|  |   move.l 12(a0),d0
   164d0:	|  |   move.l d0,d1
   164d2:	|  |   movea.l (sp),a0
   164d4:	|  |   move.l (a0),d0
   164d6:	|  |   move.l a1,-(sp)
   164d8:	|  |   move.l d1,-(sp)
   164da:	|  |   move.l d0,-(sp)
   164dc:	|  |   jsr d874 <drawHorizontalLine>
   164e2:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   164e6:	|  |   movea.l (sp),a0
   164e8:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   164ec:	'--|-> tst.l (sp)
   164ee:	   '-- bne.w 16454 <showBoxes+0xc>
	}
   164f2:	       nop
   164f4:	       nop
   164f6:	       addq.l #4,sp
   164f8:	       rts

000164fa <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   164fa:	       lea -88(sp),sp
   164fe:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   16500:	       move.l 1d188 <SysBase>,d0
   16506:	       movea.l d0,a6
   16508:	       jsr -666(a6)
   1650c:	       move.l d0,88(sp)
   16510:	       move.l 88(sp),d0
   16514:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   16518:	       move.l 84(sp),80(sp)
   1651e:	       moveq #40,d0
   16520:	       move.l d0,76(sp)
   16524:	       move.l 1d188 <SysBase>,d0
   1652a:	       movea.l d0,a6
   1652c:	       movea.l 80(sp),a0
   16530:	       move.l 76(sp),d0
   16534:	       jsr -654(a6)
   16538:	       move.l d0,72(sp)
   1653c:	       move.l 72(sp),d0
   16540:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   16544:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   1654a:	       move.l #108649,60(sp)
   16552:	       clr.l 56(sp)
   16556:	       move.l 64(sp),52(sp)
   1655c:	       clr.l 48(sp)
   16560:	       move.l 1d188 <SysBase>,d0
   16566:	       movea.l d0,a6
   16568:	       movea.l 60(sp),a0
   1656c:	       move.l 56(sp),d0
   16570:	       movea.l 52(sp),a1
   16574:	       move.l 48(sp),d1
   16578:	       jsr -444(a6)
   1657c:	       move.b d0,47(sp)
   16580:	       move.b 47(sp),d0
   16584:	   ,-- beq.s 1659a <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   16586:	   |   pea 1a876 <PutChar+0x249a>
   1658c:	   |   jsr 1793a <KPrintF>
   16592:	   |   addq.l #4,sp
        return 0;
   16594:	   |   moveq #0,d0
   16596:	,--|-- bra.w 16654 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   1659a:	|  '-> movea.l 64(sp),a0
   1659e:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   165a4:	|      lea 92(sp),a0
   165a8:	|      lea -86(a0),a0
   165ac:	|      move.l a0,38(sp)
   165b0:	|      movea.l 42(sp),a6
   165b4:	|      movea.l 38(sp),a0
   165b8:	|      jsr -60(a6)
   165bc:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   165c0:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   165c6:	|      move.l #1103515245,-(sp)
   165cc:	|      move.l 34(sp),-(sp)
   165d0:	|      jsr 182c6 <__mulsi3>
   165d6:	|      addq.l #8,sp
   165d8:	|      addi.l #12345,d0
   165de:	|      move.l d0,d1
   165e0:	|      bclr #31,d1
   165e4:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   165e8:	|      move.l 30(sp),d0
   165ec:	|      pea 64 <_start+0x64>
   165f0:	|      move.l d0,-(sp)
   165f2:	|      jsr 183a0 <__umodsi3>
   165f8:	|      addq.l #8,sp
   165fa:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   165fe:	|      move.l 26(sp),-(sp)
   16602:	|      pea 1a893 <PutChar+0x24b7>
   16608:	|      jsr 1793a <KPrintF>
   1660e:	|      addq.l #8,sp

    CloseDevice(ioreq);
   16610:	|      move.l 64(sp),22(sp)
   16616:	|      move.l 1d188 <SysBase>,d0
   1661c:	|      movea.l d0,a6
   1661e:	|      movea.l 22(sp),a1
   16622:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   16626:	|      move.l 64(sp),18(sp)
   1662c:	|      move.l 1d188 <SysBase>,d0
   16632:	|      movea.l d0,a6
   16634:	|      movea.l 18(sp),a0
   16638:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   1663c:	|      move.l 84(sp),14(sp)
   16642:	|      move.l 1d188 <SysBase>,d0
   16648:	|      movea.l d0,a6
   1664a:	|      movea.l 14(sp),a0
   1664e:	|      jsr -672(a6)
    return 0;
   16652:	|      moveq #0,d0
   16654:	'----> movea.l (sp)+,a6
   16656:	       lea 88(sp),sp
   1665a:	       rts

0001665c <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   1665c:	             lea -20(sp),sp
   16660:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   16662:	             move.l 1d29c <allLoadedBanks>,20(sp)
	while (returnMe) {
   1666a:	      ,----- bra.s 1669c <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   1666c:	   ,--|----> movea.l 20(sp),a0
   16670:	   |  |      move.l (a0),d0
   16672:	   |  |      cmp.l 28(sp),d0
   16676:	   |  |  ,-- bne.s 16692 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   16678:	   |  |  |   movea.l 20(sp),a0
   1667c:	   |  |  |   move.l 4(a0),d0
   16680:	   |  |  |   addq.l #1,d0
   16682:	   |  |  |   movea.l 20(sp),a0
   16686:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   1668a:	   |  |  |   move.l 20(sp),d0
   1668e:	,--|--|--|-- bra.w 16730 <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   16692:	|  |  |  '-> movea.l 20(sp),a0
   16696:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   1669c:	|  |  '----> tst.l 20(sp)
   166a0:	|  '-------- bne.s 1666c <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   166a2:	|            moveq #26,d0
   166a4:	|            move.l d0,16(sp)
   166a8:	|            clr.l 12(sp)
   166ac:	|            move.l 1d188 <SysBase>,d0
   166b2:	|            movea.l d0,a6
   166b4:	|            move.l 16(sp),d0
   166b8:	|            move.l 12(sp),d1
   166bc:	|            jsr -684(a6)
   166c0:	|            move.l d0,8(sp)
   166c4:	|            move.l 8(sp),d0
   166c8:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   166cc:	|     ,----- beq.s 1672e <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   166ce:	|     |      movea.l 20(sp),a0
   166d2:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   166d6:	|     |      move.l 20(sp),d0
   166da:	|     |      addq.l #8,d0
   166dc:	|     |      move.l d0,-(sp)
   166de:	|     |      move.l 32(sp),-(sp)
   166e2:	|     |      jsr 90ce <loadSpriteBank>
   166e8:	|     |      addq.l #8,sp
   166ea:	|     |      tst.w d0
   166ec:	|     |  ,-- beq.s 16714 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   166ee:	|     |  |   movea.l 20(sp),a0
   166f2:	|     |  |   moveq #1,d0
   166f4:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   166f8:	|     |  |   move.l 1d29c <allLoadedBanks>,d0
   166fe:	|     |  |   movea.l 20(sp),a0
   16702:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   16706:	|     |  |   move.l 20(sp),1d29c <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   1670e:	|     |  |   move.l 20(sp),d0
   16712:	+-----|--|-- bra.s 16730 <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   16714:	|     |  '-> move.l 20(sp),4(sp)
   1671a:	|     |      move.l 1d188 <SysBase>,d0
   16720:	|     |      movea.l d0,a6
   16722:	|     |      movea.l 4(sp),a1
   16726:	|     |      jsr -690(a6)
			return NULL;
   1672a:	|     |      moveq #0,d0
   1672c:	+-----|----- bra.s 16730 <loadBankForAnim+0xd4>
		}
	} else return NULL;
   1672e:	|     '----> moveq #0,d0
}
   16730:	'----------> movea.l (sp)+,a6
   16732:	             lea 20(sp),sp
   16736:	             rts

00016738 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   16738:	       lea -60(sp),sp
   1673c:	       move.l d3,-(sp)
   1673e:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   16740:	       move.l 88(sp),d0
   16744:	       sub.l 80(sp),d0
   16748:	       move.l d0,-(sp)
   1674a:	       jsr 17d2c <__floatsidf>
   16750:	       addq.l #4,sp
   16752:	       move.l d0,32(sp)
   16756:	       move.l d1,36(sp)
   1675a:	       move.l 32(sp),60(sp)
   16760:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   16766:	       move.l 92(sp),d0
   1676a:	       sub.l 84(sp),d0
   1676e:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   16772:	       move.l 96(sp),d0
   16776:	       sub.l 80(sp),d0
   1677a:	       move.l d0,-(sp)
   1677c:	       jsr 17d2c <__floatsidf>
   16782:	       addq.l #4,sp
   16784:	       move.l 64(sp),-(sp)
   16788:	       move.l 64(sp),-(sp)
   1678c:	       move.l d1,-(sp)
   1678e:	       move.l d0,-(sp)
   16790:	       jsr 17dbc <__muldf3>
   16796:	       lea 16(sp),sp
   1679a:	       move.l d0,d2
   1679c:	       move.l d1,d3
   1679e:	       move.l 100(sp),d0
   167a2:	       sub.l 84(sp),d0
   167a6:	       move.l 56(sp),-(sp)
   167aa:	       move.l d0,-(sp)
   167ac:	       jsr 182c6 <__mulsi3>
   167b2:	       addq.l #8,sp
   167b4:	       move.l d0,-(sp)
   167b6:	       jsr 17d2c <__floatsidf>
   167bc:	       addq.l #4,sp
   167be:	       move.l d1,-(sp)
   167c0:	       move.l d0,-(sp)
   167c2:	       move.l d3,-(sp)
   167c4:	       move.l d2,-(sp)
   167c6:	       jsr 17b5e <__adddf3>
   167cc:	       lea 16(sp),sp
   167d0:	       move.l d0,24(sp)
   167d4:	       move.l d1,28(sp)
   167d8:	       move.l 24(sp),48(sp)
   167de:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   167e4:	       move.l 64(sp),-(sp)
   167e8:	       move.l 64(sp),-(sp)
   167ec:	       move.l 72(sp),-(sp)
   167f0:	       move.l 72(sp),-(sp)
   167f4:	       jsr 17dbc <__muldf3>
   167fa:	       lea 16(sp),sp
   167fe:	       move.l d0,d2
   16800:	       move.l d1,d3
   16802:	       move.l 56(sp),-(sp)
   16806:	       move.l 60(sp),-(sp)
   1680a:	       jsr 182c6 <__mulsi3>
   16810:	       addq.l #8,sp
   16812:	       move.l d0,-(sp)
   16814:	       jsr 17d2c <__floatsidf>
   1681a:	       addq.l #4,sp
   1681c:	       move.l d1,-(sp)
   1681e:	       move.l d0,-(sp)
   16820:	       move.l d3,-(sp)
   16822:	       move.l d2,-(sp)
   16824:	       jsr 17b5e <__adddf3>
   1682a:	       lea 16(sp),sp
   1682e:	       move.l d1,-(sp)
   16830:	       move.l d0,-(sp)
   16832:	       move.l 60(sp),-(sp)
   16836:	       move.l 60(sp),-(sp)
   1683a:	       jsr 17bc0 <__divdf3>
   16840:	       lea 16(sp),sp
   16844:	       move.l d0,16(sp)
   16848:	       move.l d1,20(sp)
   1684c:	       move.l 16(sp),48(sp)
   16852:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   16858:	       clr.l -(sp)
   1685a:	       clr.l -(sp)
   1685c:	       move.l 60(sp),-(sp)
   16860:	       move.l 60(sp),-(sp)
   16864:	       jsr 17f44 <__ltdf2>
   1686a:	       lea 16(sp),sp
   1686e:	       tst.l d0
   16870:	   ,-- bge.s 16886 <closestPointOnLine+0x14e>
		*closestX = x1;
   16872:	   |   movea.l 72(sp),a0
   16876:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   1687a:	   |   movea.l 76(sp),a0
   1687e:	   |   move.l 84(sp),(a0)
   16882:	,--|-- bra.w 16954 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   16886:	|  '-> clr.l -(sp)
   16888:	|      move.l #1072693248,-(sp)
   1688e:	|      move.l 60(sp),-(sp)
   16892:	|      move.l 60(sp),-(sp)
   16896:	|      jsr 17e8a <__gtdf2>
   1689c:	|      lea 16(sp),sp
   168a0:	|      tst.l d0
   168a2:	|  ,-- ble.s 168b8 <closestPointOnLine+0x180>
		*closestX = x2;
   168a4:	|  |   movea.l 72(sp),a0
   168a8:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   168ac:	|  |   movea.l 76(sp),a0
   168b0:	|  |   move.l 92(sp),(a0)
   168b4:	+--|-- bra.w 16954 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   168b8:	|  '-> move.l 64(sp),-(sp)
   168bc:	|      move.l 64(sp),-(sp)
   168c0:	|      move.l 60(sp),-(sp)
   168c4:	|      move.l 60(sp),-(sp)
   168c8:	|      jsr 17dbc <__muldf3>
   168ce:	|      lea 16(sp),sp
   168d2:	|      move.l d0,8(sp)
   168d6:	|      move.l d1,12(sp)
   168da:	|      move.l 8(sp),40(sp)
   168e0:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   168e6:	|      move.l 44(sp),-(sp)
   168ea:	|      move.l 44(sp),-(sp)
   168ee:	|      jsr 17cce <__fixdfsi>
   168f4:	|      addq.l #8,sp
   168f6:	|      movea.l 72(sp),a0
   168fa:	|      move.l d0,(a0)
		*closestX += x1;
   168fc:	|      movea.l 72(sp),a0
   16900:	|      move.l (a0),d0
   16902:	|      add.l 80(sp),d0
   16906:	|      movea.l 72(sp),a0
   1690a:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   1690c:	|      move.l 56(sp),-(sp)
   16910:	|      jsr 17d2c <__floatsidf>
   16916:	|      addq.l #4,sp
   16918:	|      move.l 52(sp),-(sp)
   1691c:	|      move.l 52(sp),-(sp)
   16920:	|      move.l d1,-(sp)
   16922:	|      move.l d0,-(sp)
   16924:	|      jsr 17dbc <__muldf3>
   1692a:	|      lea 16(sp),sp
   1692e:	|      move.l d1,-(sp)
   16930:	|      move.l d0,-(sp)
   16932:	|      jsr 17cce <__fixdfsi>
   16938:	|      addq.l #8,sp
   1693a:	|      movea.l 76(sp),a0
   1693e:	|      move.l d0,(a0)
		*closestY += y1;
   16940:	|      movea.l 76(sp),a0
   16944:	|      move.l (a0),d0
   16946:	|      add.l 84(sp),d0
   1694a:	|      movea.l 76(sp),a0
   1694e:	|      move.l d0,(a0)
		return TRUE;
   16950:	|      moveq #1,d0
   16952:	|  ,-- bra.s 16956 <closestPointOnLine+0x21e>
	}
	return FALSE;
   16954:	'--|-> clr.w d0
}
   16956:	   '-> move.l (sp)+,d2
   16958:	       move.l (sp)+,d3
   1695a:	       lea 60(sp),sp
   1695e:	       rts

00016960 <drawFloor>:

void drawFloor() {
   16960:	                lea -12(sp),sp
   16964:	                move.l d3,-(sp)
   16966:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16968:	                clr.l 16(sp)
   1696c:	   ,----------- bra.w 16b80 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   16970:	,--|----------> movea.l 1d2a0 <currentFloor>,a0
   16976:	|  |            move.l 12(a0),d1
   1697a:	|  |            move.l 16(sp),d0
   1697e:	|  |            lsl.l #3,d0
   16980:	|  |            movea.l d1,a0
   16982:	|  |            adda.l d0,a0
   16984:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   16988:	|  |            moveq #1,d0
   1698a:	|  |            cmp.l 8(sp),d0
   1698e:	|  |  ,-------- bge.w 16b7c <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   16992:	|  |  |         moveq #1,d0
   16994:	|  |  |         move.l d0,12(sp)
   16998:	|  |  |     ,-- bra.w 16a92 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   1699c:	|  |  |  ,--|-> movea.l 1d2a0 <currentFloor>,a0
   169a2:	|  |  |  |  |   move.l 4(a0),d1
   169a6:	|  |  |  |  |   movea.l 1d2a0 <currentFloor>,a0
   169ac:	|  |  |  |  |   movea.l 12(a0),a0
   169b0:	|  |  |  |  |   move.l 16(sp),d0
   169b4:	|  |  |  |  |   lsl.l #3,d0
   169b6:	|  |  |  |  |   adda.l d0,a0
   169b8:	|  |  |  |  |   movea.l 4(a0),a0
   169bc:	|  |  |  |  |   move.l 12(sp),d0
   169c0:	|  |  |  |  |   add.l d0,d0
   169c2:	|  |  |  |  |   add.l d0,d0
   169c4:	|  |  |  |  |   adda.l d0,a0
   169c6:	|  |  |  |  |   move.l (a0),d0
   169c8:	|  |  |  |  |   lsl.l #3,d0
   169ca:	|  |  |  |  |   movea.l d1,a0
   169cc:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   169ce:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   169d2:	|  |  |  |  |   movea.l 1d2a0 <currentFloor>,a0
   169d8:	|  |  |  |  |   move.l 4(a0),d1
   169dc:	|  |  |  |  |   movea.l 1d2a0 <currentFloor>,a0
   169e2:	|  |  |  |  |   movea.l 12(a0),a0
   169e6:	|  |  |  |  |   move.l 16(sp),d0
   169ea:	|  |  |  |  |   lsl.l #3,d0
   169ec:	|  |  |  |  |   adda.l d0,a0
   169ee:	|  |  |  |  |   movea.l 4(a0),a0
   169f2:	|  |  |  |  |   move.l 12(sp),d0
   169f6:	|  |  |  |  |   add.l d0,d0
   169f8:	|  |  |  |  |   add.l d0,d0
   169fa:	|  |  |  |  |   adda.l d0,a0
   169fc:	|  |  |  |  |   move.l (a0),d0
   169fe:	|  |  |  |  |   lsl.l #3,d0
   16a00:	|  |  |  |  |   movea.l d1,a0
   16a02:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16a04:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16a06:	|  |  |  |  |   movea.l 1d2a0 <currentFloor>,a0
   16a0c:	|  |  |  |  |   move.l 4(a0),d1
   16a10:	|  |  |  |  |   movea.l 1d2a0 <currentFloor>,a0
   16a16:	|  |  |  |  |   movea.l 12(a0),a0
   16a1a:	|  |  |  |  |   move.l 16(sp),d0
   16a1e:	|  |  |  |  |   lsl.l #3,d0
   16a20:	|  |  |  |  |   adda.l d0,a0
   16a22:	|  |  |  |  |   movea.l 4(a0),a0
   16a26:	|  |  |  |  |   move.l 12(sp),d0
   16a2a:	|  |  |  |  |   addi.l #1073741823,d0
   16a30:	|  |  |  |  |   add.l d0,d0
   16a32:	|  |  |  |  |   add.l d0,d0
   16a34:	|  |  |  |  |   adda.l d0,a0
   16a36:	|  |  |  |  |   move.l (a0),d0
   16a38:	|  |  |  |  |   lsl.l #3,d0
   16a3a:	|  |  |  |  |   movea.l d1,a0
   16a3c:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16a3e:	|  |  |  |  |   move.l 4(a0),d1
   16a42:	|  |  |  |  |   movea.l 1d2a0 <currentFloor>,a0
   16a48:	|  |  |  |  |   move.l 4(a0),d3
   16a4c:	|  |  |  |  |   movea.l 1d2a0 <currentFloor>,a0
   16a52:	|  |  |  |  |   movea.l 12(a0),a0
   16a56:	|  |  |  |  |   move.l 16(sp),d0
   16a5a:	|  |  |  |  |   lsl.l #3,d0
   16a5c:	|  |  |  |  |   adda.l d0,a0
   16a5e:	|  |  |  |  |   movea.l 4(a0),a0
   16a62:	|  |  |  |  |   move.l 12(sp),d0
   16a66:	|  |  |  |  |   addi.l #1073741823,d0
   16a6c:	|  |  |  |  |   add.l d0,d0
   16a6e:	|  |  |  |  |   add.l d0,d0
   16a70:	|  |  |  |  |   adda.l d0,a0
   16a72:	|  |  |  |  |   move.l (a0),d0
   16a74:	|  |  |  |  |   lsl.l #3,d0
   16a76:	|  |  |  |  |   movea.l d3,a0
   16a78:	|  |  |  |  |   adda.l d0,a0
   16a7a:	|  |  |  |  |   move.l (a0),d0
   16a7c:	|  |  |  |  |   move.l d2,-(sp)
   16a7e:	|  |  |  |  |   move.l a1,-(sp)
   16a80:	|  |  |  |  |   move.l d1,-(sp)
   16a82:	|  |  |  |  |   move.l d0,-(sp)
   16a84:	|  |  |  |  |   jsr 4d4a <drawLine>
   16a8a:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   16a8e:	|  |  |  |  |   addq.l #1,12(sp)
   16a92:	|  |  |  |  '-> move.l 12(sp),d0
   16a96:	|  |  |  |      cmp.l 8(sp),d0
   16a9a:	|  |  |  '----- blt.w 1699c <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   16a9e:	|  |  |         movea.l 1d2a0 <currentFloor>,a0
   16aa4:	|  |  |         move.l 4(a0),d1
   16aa8:	|  |  |         movea.l 1d2a0 <currentFloor>,a0
   16aae:	|  |  |         movea.l 12(a0),a0
   16ab2:	|  |  |         move.l 16(sp),d0
   16ab6:	|  |  |         lsl.l #3,d0
   16ab8:	|  |  |         adda.l d0,a0
   16aba:	|  |  |         movea.l 4(a0),a0
   16abe:	|  |  |         move.l 8(sp),d0
   16ac2:	|  |  |         addi.l #1073741823,d0
   16ac8:	|  |  |         add.l d0,d0
   16aca:	|  |  |         add.l d0,d0
   16acc:	|  |  |         adda.l d0,a0
   16ace:	|  |  |         move.l (a0),d0
   16ad0:	|  |  |         lsl.l #3,d0
   16ad2:	|  |  |         movea.l d1,a0
   16ad4:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16ad6:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   16ada:	|  |  |         movea.l 1d2a0 <currentFloor>,a0
   16ae0:	|  |  |         move.l 4(a0),d1
   16ae4:	|  |  |         movea.l 1d2a0 <currentFloor>,a0
   16aea:	|  |  |         movea.l 12(a0),a0
   16aee:	|  |  |         move.l 16(sp),d0
   16af2:	|  |  |         lsl.l #3,d0
   16af4:	|  |  |         adda.l d0,a0
   16af6:	|  |  |         movea.l 4(a0),a0
   16afa:	|  |  |         move.l 8(sp),d0
   16afe:	|  |  |         addi.l #1073741823,d0
   16b04:	|  |  |         add.l d0,d0
   16b06:	|  |  |         add.l d0,d0
   16b08:	|  |  |         adda.l d0,a0
   16b0a:	|  |  |         move.l (a0),d0
   16b0c:	|  |  |         lsl.l #3,d0
   16b0e:	|  |  |         movea.l d1,a0
   16b10:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16b12:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16b14:	|  |  |         movea.l 1d2a0 <currentFloor>,a0
   16b1a:	|  |  |         move.l 4(a0),d1
   16b1e:	|  |  |         movea.l 1d2a0 <currentFloor>,a0
   16b24:	|  |  |         movea.l 12(a0),a0
   16b28:	|  |  |         move.l 16(sp),d0
   16b2c:	|  |  |         lsl.l #3,d0
   16b2e:	|  |  |         adda.l d0,a0
   16b30:	|  |  |         movea.l 4(a0),a0
   16b34:	|  |  |         move.l (a0),d0
   16b36:	|  |  |         lsl.l #3,d0
   16b38:	|  |  |         movea.l d1,a0
   16b3a:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16b3c:	|  |  |         move.l 4(a0),d1
   16b40:	|  |  |         movea.l 1d2a0 <currentFloor>,a0
   16b46:	|  |  |         move.l 4(a0),d3
   16b4a:	|  |  |         movea.l 1d2a0 <currentFloor>,a0
   16b50:	|  |  |         movea.l 12(a0),a0
   16b54:	|  |  |         move.l 16(sp),d0
   16b58:	|  |  |         lsl.l #3,d0
   16b5a:	|  |  |         adda.l d0,a0
   16b5c:	|  |  |         movea.l 4(a0),a0
   16b60:	|  |  |         move.l (a0),d0
   16b62:	|  |  |         lsl.l #3,d0
   16b64:	|  |  |         movea.l d3,a0
   16b66:	|  |  |         adda.l d0,a0
   16b68:	|  |  |         move.l (a0),d0
   16b6a:	|  |  |         move.l d2,-(sp)
   16b6c:	|  |  |         move.l a1,-(sp)
   16b6e:	|  |  |         move.l d1,-(sp)
   16b70:	|  |  |         move.l d0,-(sp)
   16b72:	|  |  |         jsr 4d4a <drawLine>
   16b78:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16b7c:	|  |  '-------> addq.l #1,16(sp)
   16b80:	|  '----------> movea.l 1d2a0 <currentFloor>,a0
   16b86:	|               move.l 8(a0),d0
   16b8a:	|               cmp.l 16(sp),d0
   16b8e:	'-------------- bgt.w 16970 <drawFloor+0x10>
        }
    }
}
   16b92:	                nop
   16b94:	                nop
   16b96:	                move.l (sp)+,d2
   16b98:	                move.l (sp)+,d3
   16b9a:	                lea 12(sp),sp
   16b9e:	                rts

00016ba0 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   16ba0:	                      lea -12(sp),sp
    int sharedVertices = 0;
   16ba4:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   16ba8:	                      clr.l 4(sp)
   16bac:	   ,----------------- bra.w 16c3e <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   16bb0:	,--|----------------> clr.l (sp)
   16bb2:	|  |     ,----------- bra.s 16c2e <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   16bb4:	|  |  ,--|----------> movea.l 16(sp),a0
   16bb8:	|  |  |  |            move.l 4(a0),d1
   16bbc:	|  |  |  |            move.l 4(sp),d0
   16bc0:	|  |  |  |            add.l d0,d0
   16bc2:	|  |  |  |            add.l d0,d0
   16bc4:	|  |  |  |            movea.l d1,a0
   16bc6:	|  |  |  |            adda.l d0,a0
   16bc8:	|  |  |  |            move.l (a0),d1
   16bca:	|  |  |  |            movea.l 20(sp),a0
   16bce:	|  |  |  |            movea.l 4(a0),a0
   16bd2:	|  |  |  |            move.l (sp),d0
   16bd4:	|  |  |  |            add.l d0,d0
   16bd6:	|  |  |  |            add.l d0,d0
   16bd8:	|  |  |  |            adda.l d0,a0
   16bda:	|  |  |  |            move.l (a0),d0
   16bdc:	|  |  |  |            cmp.l d1,d0
   16bde:	|  |  |  |  ,-------- bne.s 16c2c <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   16be0:	|  |  |  |  |         move.l 8(sp),d0
   16be4:	|  |  |  |  |         move.l d0,d1
   16be6:	|  |  |  |  |         addq.l #1,d1
   16be8:	|  |  |  |  |         move.l d1,8(sp)
   16bec:	|  |  |  |  |         tst.l d0
   16bee:	|  |  |  |  |     ,-- beq.s 16c10 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16bf0:	|  |  |  |  |     |   movea.l 16(sp),a0
   16bf4:	|  |  |  |  |     |   move.l 4(a0),d1
   16bf8:	|  |  |  |  |     |   move.l 4(sp),d0
   16bfc:	|  |  |  |  |     |   add.l d0,d0
   16bfe:	|  |  |  |  |     |   add.l d0,d0
   16c00:	|  |  |  |  |     |   movea.l d1,a0
   16c02:	|  |  |  |  |     |   adda.l d0,a0
   16c04:	|  |  |  |  |     |   move.l (a0),d0
   16c06:	|  |  |  |  |     |   movea.l 28(sp),a0
   16c0a:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16c0c:	|  |  |  |  |     |   moveq #1,d0
   16c0e:	|  |  |  |  |  ,--|-- bra.s 16c4e <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   16c10:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   16c14:	|  |  |  |  |  |      move.l 4(a0),d1
   16c18:	|  |  |  |  |  |      move.l 4(sp),d0
   16c1c:	|  |  |  |  |  |      add.l d0,d0
   16c1e:	|  |  |  |  |  |      add.l d0,d0
   16c20:	|  |  |  |  |  |      movea.l d1,a0
   16c22:	|  |  |  |  |  |      adda.l d0,a0
   16c24:	|  |  |  |  |  |      move.l (a0),d0
   16c26:	|  |  |  |  |  |      movea.l 24(sp),a0
   16c2a:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16c2c:	|  |  |  |  '--|----> addq.l #1,(sp)
   16c2e:	|  |  |  '-----|----> movea.l 20(sp),a0
   16c32:	|  |  |        |      move.l (a0),d0
   16c34:	|  |  |        |      cmp.l (sp),d0
   16c36:	|  |  '--------|----- bgt.w 16bb4 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16c3a:	|  |           |      addq.l #1,4(sp)
   16c3e:	|  '-----------|----> movea.l 16(sp),a0
   16c42:	|              |      move.l (a0),d0
   16c44:	|              |      cmp.l 4(sp),d0
   16c48:	'--------------|----- bgt.w 16bb0 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   16c4c:	               |      clr.w d0
}
   16c4e:	               '----> lea 12(sp),sp
   16c52:	                      rts

00016c54 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   16c54:	movea.l 1d2a0 <currentFloor>,a0
   16c5a:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   16c5e:	movea.l 1d2a0 <currentFloor>,a0
   16c64:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   16c68:	movea.l 1d2a0 <currentFloor>,a0
   16c6e:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   16c72:	movea.l 1d2a0 <currentFloor>,a0
   16c78:	clr.l 16(a0)
}
   16c7c:	nop
   16c7e:	rts

00016c80 <inFloor>:

int inFloor (int x, int y) {
   16c80:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   16c82:	          pea 1a8a6 <PutChar+0x24ca>
   16c88:	          jsr 1793a <KPrintF>
   16c8e:	          addq.l #4,sp
	int i, r = -1;
   16c90:	          moveq #-1,d0
   16c92:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16c94:	          clr.l 4(sp)
   16c98:	   ,----- bra.s 16ccc <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   16c9a:	,--|----> movea.l 1d2a0 <currentFloor>,a0
   16ca0:	|  |      move.l 12(a0),d1
   16ca4:	|  |      move.l 4(sp),d0
   16ca8:	|  |      lsl.l #3,d0
   16caa:	|  |      add.l d1,d0
   16cac:	|  |      move.l 16(sp),-(sp)
   16cb0:	|  |      move.l 16(sp),-(sp)
   16cb4:	|  |      move.l d0,-(sp)
   16cb6:	|  |      jsr 16ea6 <pointInFloorPolygon>
   16cbc:	|  |      lea 12(sp),sp
   16cc0:	|  |      tst.w d0
   16cc2:	|  |  ,-- beq.s 16cc8 <inFloor+0x48>
			r = i;
   16cc4:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16cc8:	|  |  '-> addq.l #1,4(sp)
   16ccc:	|  '----> movea.l 1d2a0 <currentFloor>,a0
   16cd2:	|         move.l 8(a0),d0
   16cd6:	|         cmp.l 4(sp),d0
   16cda:	'-------- bgt.s 16c9a <inFloor+0x1a>

	KPrintF("infloor finished\n");
   16cdc:	          pea 1a8b7 <PutChar+0x24db>
   16ce2:	          jsr 1793a <KPrintF>
   16ce8:	          addq.l #4,sp
	return r;
   16cea:	          move.l (sp),d0
}
   16cec:	          addq.l #8,sp
   16cee:	          rts

00016cf0 <initFloor>:

BOOL initFloor () {
   16cf0:	       lea -12(sp),sp
   16cf4:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16cf6:	       moveq #20,d0
   16cf8:	       move.l d0,12(sp)
   16cfc:	       clr.l 8(sp)
   16d00:	       move.l 1d188 <SysBase>,d0
   16d06:	       movea.l d0,a6
   16d08:	       move.l 12(sp),d0
   16d0c:	       move.l 8(sp),d1
   16d10:	       jsr -684(a6)
   16d14:	       move.l d0,4(sp)
   16d18:	       move.l 4(sp),d0
   16d1c:	       move.l d0,1d2a0 <currentFloor>

    if(currentFloor == 0) {
   16d22:	       move.l 1d2a0 <currentFloor>,d0
   16d28:	,----- bne.s 16d3c <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16d2a:	|      pea 1a8c9 <PutChar+0x24ed>
   16d30:	|      jsr 1793a <KPrintF>
   16d36:	|      addq.l #4,sp
        return FALSE;
   16d38:	|      clr.w d0
   16d3a:	|  ,-- bra.s 16d44 <initFloor+0x54>
    }

	noFloor ();
   16d3c:	'--|-> jsr 16c54 <noFloor>
	return TRUE;
   16d42:	   |   moveq #1,d0
}
   16d44:	   '-> movea.l (sp)+,a6
   16d46:	       lea 12(sp),sp
   16d4a:	       rts

00016d4c <killFloor>:

void killFloor () {
   16d4c:	       lea -24(sp),sp
   16d50:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16d52:	       clr.l 24(sp)
   16d56:	   ,-- bra.s 16db0 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16d58:	,--|-> movea.l 1d2a0 <currentFloor>,a0
   16d5e:	|  |   move.l 12(a0),d1
   16d62:	|  |   move.l 24(sp),d0
   16d66:	|  |   lsl.l #3,d0
   16d68:	|  |   movea.l d1,a0
   16d6a:	|  |   adda.l d0,a0
   16d6c:	|  |   move.l 4(a0),8(sp)
   16d72:	|  |   move.l 1d188 <SysBase>,d0
   16d78:	|  |   movea.l d0,a6
   16d7a:	|  |   movea.l 8(sp),a1
   16d7e:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16d82:	|  |   movea.l 1d2a0 <currentFloor>,a0
   16d88:	|  |   move.l 16(a0),d1
   16d8c:	|  |   move.l 24(sp),d0
   16d90:	|  |   add.l d0,d0
   16d92:	|  |   add.l d0,d0
   16d94:	|  |   movea.l d1,a0
   16d96:	|  |   adda.l d0,a0
   16d98:	|  |   move.l (a0),4(sp)
   16d9c:	|  |   move.l 1d188 <SysBase>,d0
   16da2:	|  |   movea.l d0,a6
   16da4:	|  |   movea.l 4(sp),a1
   16da8:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16dac:	|  |   addq.l #1,24(sp)
   16db0:	|  '-> movea.l 1d2a0 <currentFloor>,a0
   16db6:	|      move.l 8(a0),d0
   16dba:	|      cmp.l 24(sp),d0
   16dbe:	'----- bgt.s 16d58 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   16dc0:	       movea.l 1d2a0 <currentFloor>,a0
   16dc6:	       move.l 12(a0),20(sp)
   16dcc:	       move.l 1d188 <SysBase>,d0
   16dd2:	       movea.l d0,a6
   16dd4:	       movea.l 20(sp),a1
   16dd8:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   16ddc:	       movea.l 1d2a0 <currentFloor>,a0
   16de2:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16de6:	       movea.l 1d2a0 <currentFloor>,a0
   16dec:	       move.l 4(a0),16(sp)
   16df2:	       move.l 1d188 <SysBase>,d0
   16df8:	       movea.l d0,a6
   16dfa:	       movea.l 16(sp),a1
   16dfe:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16e02:	       movea.l 1d2a0 <currentFloor>,a0
   16e08:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16e0c:	       movea.l 1d2a0 <currentFloor>,a0
   16e12:	       move.l 16(a0),12(sp)
   16e18:	       move.l 1d188 <SysBase>,d0
   16e1e:	       movea.l d0,a6
   16e20:	       movea.l 12(sp),a1
   16e24:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16e28:	       movea.l 1d2a0 <currentFloor>,a0
   16e2e:	       clr.l 16(a0)
}
   16e32:	       nop
   16e34:	       movea.l (sp)+,a6
   16e36:	       lea 24(sp),sp
   16e3a:	       rts

00016e3c <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   16e3c:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16e40:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16e44:	                   clr.l 4(sp)
   16e48:	   ,-------------- bra.s 16e94 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   16e4a:	,--|-------------> clr.l (sp)
   16e4c:	|  |     ,-------- bra.s 16e88 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   16e4e:	|  |  ,--|-------> move.l 20(sp),d1
   16e52:	|  |  |  |         move.l 4(sp),d0
   16e56:	|  |  |  |         add.l d0,d0
   16e58:	|  |  |  |         add.l d0,d0
   16e5a:	|  |  |  |         movea.l d1,a0
   16e5c:	|  |  |  |         adda.l d0,a0
   16e5e:	|  |  |  |         move.l (a0),d1
   16e60:	|  |  |  |         movea.l 28(sp),a0
   16e64:	|  |  |  |         move.l (sp),d0
   16e66:	|  |  |  |         add.l d0,d0
   16e68:	|  |  |  |         add.l d0,d0
   16e6a:	|  |  |  |         adda.l d0,a0
   16e6c:	|  |  |  |         move.l (a0),d0
   16e6e:	|  |  |  |         cmp.l d1,d0
   16e70:	|  |  |  |     ,-- bne.s 16e86 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16e72:	|  |  |  |     |   move.l 8(sp),d0
   16e76:	|  |  |  |     |   move.l d0,d1
   16e78:	|  |  |  |     |   addq.l #1,d1
   16e7a:	|  |  |  |     |   move.l d1,8(sp)
   16e7e:	|  |  |  |     |   tst.l d0
   16e80:	|  |  |  |     +-- beq.s 16e86 <polysShareSide+0x4a>
   16e82:	|  |  |  |     |   moveq #1,d0
   16e84:	|  |  |  |  ,--|-- bra.s 16ea0 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16e86:	|  |  |  |  |  '-> addq.l #1,(sp)
   16e88:	|  |  |  '--|----> move.l 24(sp),d0
   16e8c:	|  |  |     |      cmp.l (sp),d0
   16e8e:	|  |  '-----|----- bgt.s 16e4e <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16e90:	|  |        |      addq.l #1,4(sp)
   16e94:	|  '--------|----> move.l 16(sp),d0
   16e98:	|           |      cmp.l 4(sp),d0
   16e9c:	'-----------|----- bgt.s 16e4a <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16e9e:	            |      clr.w d0
}
   16ea0:	            '----> lea 12(sp),sp
   16ea4:	                   rts

00016ea6 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16ea6:	             lea -28(sp),sp
   16eaa:	             move.l d3,-(sp)
   16eac:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   16eae:	             clr.l 32(sp)
   16eb2:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16eb6:	             movea.l 40(sp),a0
   16eba:	             move.l (a0),d0
   16ebc:	             move.l d0,d1
   16ebe:	             subq.l #1,d1
   16ec0:	             move.l d1,28(sp)
   16ec4:	   ,-------- bra.w 170be <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   16ec8:	,--|-------> movea.l 1d2a0 <currentFloor>,a0
   16ece:	|  |         move.l 4(a0),d1
   16ed2:	|  |         movea.l 40(sp),a0
   16ed6:	|  |         movea.l 4(a0),a0
   16eda:	|  |         move.l 32(sp),d0
   16ede:	|  |         add.l d0,d0
   16ee0:	|  |         add.l d0,d0
   16ee2:	|  |         adda.l d0,a0
   16ee4:	|  |         move.l (a0),d0
   16ee6:	|  |         lsl.l #3,d0
   16ee8:	|  |         movea.l d1,a0
   16eea:	|  |         adda.l d0,a0
   16eec:	|  |         move.l (a0),d0
   16eee:	|  |         move.l d0,-(sp)
   16ef0:	|  |         jsr 17d6c <__floatsisf>
   16ef6:	|  |         addq.l #4,sp
   16ef8:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16efc:	|  |         movea.l 1d2a0 <currentFloor>,a0
   16f02:	|  |         move.l 4(a0),d1
   16f06:	|  |         movea.l 40(sp),a0
   16f0a:	|  |         movea.l 4(a0),a0
   16f0e:	|  |         move.l 32(sp),d0
   16f12:	|  |         add.l d0,d0
   16f14:	|  |         add.l d0,d0
   16f16:	|  |         adda.l d0,a0
   16f18:	|  |         move.l (a0),d0
   16f1a:	|  |         lsl.l #3,d0
   16f1c:	|  |         movea.l d1,a0
   16f1e:	|  |         adda.l d0,a0
   16f20:	|  |         move.l 4(a0),d0
   16f24:	|  |         move.l d0,-(sp)
   16f26:	|  |         jsr 17d6c <__floatsisf>
   16f2c:	|  |         addq.l #4,sp
   16f2e:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16f32:	|  |         movea.l 1d2a0 <currentFloor>,a0
   16f38:	|  |         move.l 4(a0),d1
   16f3c:	|  |         movea.l 40(sp),a0
   16f40:	|  |         movea.l 4(a0),a0
   16f44:	|  |         move.l 28(sp),d0
   16f48:	|  |         add.l d0,d0
   16f4a:	|  |         add.l d0,d0
   16f4c:	|  |         adda.l d0,a0
   16f4e:	|  |         move.l (a0),d0
   16f50:	|  |         lsl.l #3,d0
   16f52:	|  |         movea.l d1,a0
   16f54:	|  |         adda.l d0,a0
   16f56:	|  |         move.l (a0),d0
   16f58:	|  |         move.l d0,-(sp)
   16f5a:	|  |         jsr 17d6c <__floatsisf>
   16f60:	|  |         addq.l #4,sp
   16f62:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16f66:	|  |         movea.l 1d2a0 <currentFloor>,a0
   16f6c:	|  |         move.l 4(a0),d1
   16f70:	|  |         movea.l 40(sp),a0
   16f74:	|  |         movea.l 4(a0),a0
   16f78:	|  |         move.l 28(sp),d0
   16f7c:	|  |         add.l d0,d0
   16f7e:	|  |         add.l d0,d0
   16f80:	|  |         adda.l d0,a0
   16f82:	|  |         move.l (a0),d0
   16f84:	|  |         lsl.l #3,d0
   16f86:	|  |         movea.l d1,a0
   16f88:	|  |         adda.l d0,a0
   16f8a:	|  |         move.l 4(a0),d0
   16f8e:	|  |         move.l d0,-(sp)
   16f90:	|  |         jsr 17d6c <__floatsisf>
   16f96:	|  |         addq.l #4,sp
   16f98:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16f9c:	|  |         move.l 48(sp),-(sp)
   16fa0:	|  |         jsr 17d6c <__floatsisf>
   16fa6:	|  |         addq.l #4,sp
   16fa8:	|  |         move.l d0,-(sp)
   16faa:	|  |         move.l 20(sp),-(sp)
   16fae:	|  |         jsr 17f0e <__lesf2>
   16fb4:	|  |         addq.l #8,sp
   16fb6:	|  |         tst.l d0
   16fb8:	|  |     ,-- bgt.s 16fd8 <pointInFloorPolygon+0x132>
   16fba:	|  |     |   move.l 48(sp),-(sp)
   16fbe:	|  |     |   jsr 17d6c <__floatsisf>
   16fc4:	|  |     |   addq.l #4,sp
   16fc6:	|  |     |   move.l d0,-(sp)
   16fc8:	|  |     |   move.l 12(sp),-(sp)
   16fcc:	|  |     |   jsr 17ed8 <__gtsf2>
   16fd2:	|  |     |   addq.l #8,sp
   16fd4:	|  |     |   tst.l d0
   16fd6:	|  |  ,--|-- bgt.s 17018 <pointInFloorPolygon+0x172>
   16fd8:	|  |  |  '-> move.l 48(sp),-(sp)
   16fdc:	|  |  |      jsr 17d6c <__floatsisf>
   16fe2:	|  |  |      addq.l #4,sp
   16fe4:	|  |  |      move.l d0,-(sp)
   16fe6:	|  |  |      move.l 12(sp),-(sp)
   16fea:	|  |  |      jsr 17f0e <__lesf2>
   16ff0:	|  |  |      addq.l #8,sp
   16ff2:	|  |  |      tst.l d0
   16ff4:	|  |  |  ,-- bgt.w 170ae <pointInFloorPolygon+0x208>
   16ff8:	|  |  |  |   move.l 48(sp),-(sp)
   16ffc:	|  |  |  |   jsr 17d6c <__floatsisf>
   17002:	|  |  |  |   addq.l #4,sp
   17004:	|  |  |  |   move.l d0,-(sp)
   17006:	|  |  |  |   move.l 20(sp),-(sp)
   1700a:	|  |  |  |   jsr 17ed8 <__gtsf2>
   17010:	|  |  |  |   addq.l #8,sp
   17012:	|  |  |  |   tst.l d0
   17014:	|  |  |  +-- ble.w 170ae <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   17018:	|  |  '--|-> move.l 44(sp),-(sp)
   1701c:	|  |     |   jsr 17d6c <__floatsisf>
   17022:	|  |     |   addq.l #4,sp
   17024:	|  |     |   move.l d0,d3
   17026:	|  |     |   move.l 20(sp),-(sp)
   1702a:	|  |     |   move.l 16(sp),-(sp)
   1702e:	|  |     |   jsr 18060 <__subsf3>
   17034:	|  |     |   addq.l #8,sp
   17036:	|  |     |   move.l d0,d2
   17038:	|  |     |   move.l 48(sp),-(sp)
   1703c:	|  |     |   jsr 17d6c <__floatsisf>
   17042:	|  |     |   addq.l #4,sp
   17044:	|  |     |   move.l 16(sp),-(sp)
   17048:	|  |     |   move.l d0,-(sp)
   1704a:	|  |     |   jsr 18060 <__subsf3>
   17050:	|  |     |   addq.l #8,sp
   17052:	|  |     |   move.l d0,-(sp)
   17054:	|  |     |   move.l d2,-(sp)
   17056:	|  |     |   jsr 17e1e <__mulsf3>
   1705c:	|  |     |   addq.l #8,sp
   1705e:	|  |     |   move.l d0,d2
   17060:	|  |     |   move.l 16(sp),-(sp)
   17064:	|  |     |   move.l 12(sp),-(sp)
   17068:	|  |     |   jsr 18060 <__subsf3>
   1706e:	|  |     |   addq.l #8,sp
   17070:	|  |     |   move.l d0,-(sp)
   17072:	|  |     |   move.l d2,-(sp)
   17074:	|  |     |   jsr 17c22 <__divsf3>
   1707a:	|  |     |   addq.l #8,sp
   1707c:	|  |     |   move.l 20(sp),-(sp)
   17080:	|  |     |   move.l d0,-(sp)
   17082:	|  |     |   jsr 17b28 <__addsf3>
   17088:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1708a:	|  |     |   move.l d0,-(sp)
   1708c:	|  |     |   move.l d3,-(sp)
   1708e:	|  |     |   jsr 17f92 <__ltsf2>
   17094:	|  |     |   addq.l #8,sp
   17096:	|  |     |   tst.l d0
   17098:	|  |     +-- bge.s 170ae <pointInFloorPolygon+0x208>

			c = !c;
   1709a:	|  |     |   tst.l 24(sp)
   1709e:	|  |     |   seq d0
   170a0:	|  |     |   neg.b d0
   170a2:	|  |     |   move.b d0,d0
   170a4:	|  |     |   andi.l #255,d0
   170aa:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   170ae:	|  |     '-> move.l 32(sp),d0
   170b2:	|  |         move.l d0,d1
   170b4:	|  |         addq.l #1,d1
   170b6:	|  |         move.l d1,32(sp)
   170ba:	|  |         move.l d0,28(sp)
   170be:	|  '-------> movea.l 40(sp),a0
   170c2:	|            move.l (a0),d0
   170c4:	|            cmp.l 32(sp),d0
   170c8:	'----------- bgt.w 16ec8 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   170cc:	             tst.l 24(sp)
   170d0:	             sne d0
   170d2:	             neg.b d0
   170d4:	             move.b d0,d0
   170d6:	             andi.w #255,d0
}
   170da:	             move.l (sp)+,d2
   170dc:	             move.l (sp)+,d3
   170de:	             lea 28(sp),sp
   170e2:	             rts

000170e4 <setFloor>:

BOOL setFloor (int fileNum) {
   170e4:	                               lea -132(sp),sp
   170e8:	                               move.l a6,-(sp)
   170ea:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   170ec:	                               jsr 16d4c <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   170f2:	                               move.l 144(sp),-(sp)
   170f6:	                               jsr 7d6e <openFileFromNum>
   170fc:	                               addq.l #4,sp
   170fe:	                               tst.l d0
   17100:	                           ,-- bne.s 17108 <setFloor+0x24>
   17102:	                           |   clr.w d0
   17104:	,--------------------------|-- bra.w 17854 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   17108:	|                          '-> movea.l 1d2a0 <currentFloor>,a0
   1710e:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   17112:	|                              move.l 1d170 <bigDataFile>,118(sp)
   1711a:	|                              move.l 1d190 <DOSBase>,d0
   17120:	|                              movea.l d0,a6
   17122:	|                              move.l 118(sp),d1
   17126:	|                              jsr -306(a6)
   1712a:	|                              move.l d0,114(sp)
   1712e:	|                              move.l 114(sp),d0
   17132:	|                              movea.l 1d2a0 <currentFloor>,a0
   17138:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   1713c:	|                              movea.l 1d2a0 <currentFloor>,a0
   17142:	|                              move.l 8(a0),d0
   17146:	|                              lsl.l #3,d0
   17148:	|                              move.l d0,110(sp)
   1714c:	|                              clr.l 106(sp)
   17150:	|                              move.l 1d188 <SysBase>,d0
   17156:	|                              movea.l d0,a6
   17158:	|                              move.l 110(sp),d0
   1715c:	|                              move.l 106(sp),d1
   17160:	|                              jsr -684(a6)
   17164:	|                              move.l d0,102(sp)
   17168:	|                              move.l 102(sp),d0
   1716c:	|                              movea.l 1d2a0 <currentFloor>,a0
   17172:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   17176:	|                              movea.l 1d2a0 <currentFloor>,a0
   1717c:	|                              move.l 12(a0),d0
   17180:	|                          ,-- bne.s 17196 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   17182:	|                          |   pea 1a8ed <PutChar+0x2511>
   17188:	|                          |   jsr 1793a <KPrintF>
   1718e:	|                          |   addq.l #4,sp
		return FALSE;
   17190:	|                          |   clr.w d0
   17192:	+--------------------------|-- bra.w 17854 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17196:	|                          '-> clr.l 136(sp)
   1719a:	|                    ,-------- bra.w 172b2 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   1719e:	|                 ,--|-------> move.l 1d170 <bigDataFile>,26(sp)
   171a6:	|                 |  |         move.l 1d190 <DOSBase>,d0
   171ac:	|                 |  |         movea.l d0,a6
   171ae:	|                 |  |         move.l 26(sp),d1
   171b2:	|                 |  |         jsr -306(a6)
   171b6:	|                 |  |         move.l d0,22(sp)
   171ba:	|                 |  |         move.l 22(sp),d1
   171be:	|                 |  |         movea.l 1d2a0 <currentFloor>,a0
   171c4:	|                 |  |         movea.l 12(a0),a0
   171c8:	|                 |  |         move.l 136(sp),d0
   171cc:	|                 |  |         lsl.l #3,d0
   171ce:	|                 |  |         adda.l d0,a0
   171d0:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   171d2:	|                 |  |         movea.l 1d2a0 <currentFloor>,a0
   171d8:	|                 |  |         move.l 12(a0),d1
   171dc:	|                 |  |         move.l 136(sp),d0
   171e0:	|                 |  |         lsl.l #3,d0
   171e2:	|                 |  |         movea.l d1,a0
   171e4:	|                 |  |         adda.l d0,a0
   171e6:	|                 |  |         move.l (a0),d0
   171e8:	|                 |  |         add.l d0,d0
   171ea:	|                 |  |         add.l d0,d0
   171ec:	|                 |  |         move.l d0,18(sp)
   171f0:	|                 |  |         clr.l 14(sp)
   171f4:	|                 |  |         move.l 1d188 <SysBase>,d0
   171fa:	|                 |  |         movea.l d0,a6
   171fc:	|                 |  |         move.l 18(sp),d0
   17200:	|                 |  |         move.l 14(sp),d1
   17204:	|                 |  |         jsr -684(a6)
   17208:	|                 |  |         move.l d0,10(sp)
   1720c:	|                 |  |         move.l 10(sp),d1
   17210:	|                 |  |         movea.l 1d2a0 <currentFloor>,a0
   17216:	|                 |  |         movea.l 12(a0),a0
   1721a:	|                 |  |         move.l 136(sp),d0
   1721e:	|                 |  |         lsl.l #3,d0
   17220:	|                 |  |         adda.l d0,a0
   17222:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   17226:	|                 |  |         movea.l 1d2a0 <currentFloor>,a0
   1722c:	|                 |  |         move.l 12(a0),d1
   17230:	|                 |  |         move.l 136(sp),d0
   17234:	|                 |  |         lsl.l #3,d0
   17236:	|                 |  |         movea.l d1,a0
   17238:	|                 |  |         adda.l d0,a0
   1723a:	|                 |  |         move.l 4(a0),d0
   1723e:	|                 |  |     ,-- bne.s 17254 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   17240:	|                 |  |     |   pea 1a8ed <PutChar+0x2511>
   17246:	|                 |  |     |   jsr 1793a <KPrintF>
   1724c:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1724e:	|                 |  |     |   clr.w d0
   17250:	+-----------------|--|-----|-- bra.w 17854 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   17254:	|                 |  |     '-> clr.l 132(sp)
   17258:	|                 |  |     ,-- bra.s 17292 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   1725a:	|                 |  |  ,--|-> move.l 1d170 <bigDataFile>,d1
   17260:	|                 |  |  |  |   movea.l 1d2a0 <currentFloor>,a0
   17266:	|                 |  |  |  |   movea.l 12(a0),a0
   1726a:	|                 |  |  |  |   move.l 136(sp),d0
   1726e:	|                 |  |  |  |   lsl.l #3,d0
   17270:	|                 |  |  |  |   adda.l d0,a0
   17272:	|                 |  |  |  |   movea.l 4(a0),a0
   17276:	|                 |  |  |  |   move.l 132(sp),d0
   1727a:	|                 |  |  |  |   add.l d0,d0
   1727c:	|                 |  |  |  |   add.l d0,d0
   1727e:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   17282:	|                 |  |  |  |   move.l d1,-(sp)
   17284:	|                 |  |  |  |   jsr 6bc <get2bytes>
   1728a:	|                 |  |  |  |   addq.l #4,sp
   1728c:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   1728e:	|                 |  |  |  |   addq.l #1,132(sp)
   17292:	|                 |  |  |  '-> movea.l 1d2a0 <currentFloor>,a0
   17298:	|                 |  |  |      move.l 12(a0),d1
   1729c:	|                 |  |  |      move.l 136(sp),d0
   172a0:	|                 |  |  |      lsl.l #3,d0
   172a2:	|                 |  |  |      movea.l d1,a0
   172a4:	|                 |  |  |      adda.l d0,a0
   172a6:	|                 |  |  |      move.l (a0),d0
   172a8:	|                 |  |  |      cmp.l 132(sp),d0
   172ac:	|                 |  |  '----- bgt.s 1725a <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   172ae:	|                 |  |         addq.l #1,136(sp)
   172b2:	|                 |  '-------> movea.l 1d2a0 <currentFloor>,a0
   172b8:	|                 |            move.l 8(a0),d0
   172bc:	|                 |            cmp.l 136(sp),d0
   172c0:	|                 '----------- bgt.w 1719e <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   172c4:	|                              move.l 1d170 <bigDataFile>,d0
   172ca:	|                              move.l d0,-(sp)
   172cc:	|                              jsr 6bc <get2bytes>
   172d2:	|                              addq.l #4,sp
   172d4:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   172d8:	|                              move.l 136(sp),d0
   172dc:	|                              lsl.l #3,d0
   172de:	|                              move.l d0,98(sp)
   172e2:	|                              clr.l 94(sp)
   172e6:	|                              move.l 1d188 <SysBase>,d0
   172ec:	|                              movea.l d0,a6
   172ee:	|                              move.l 98(sp),d0
   172f2:	|                              move.l 94(sp),d1
   172f6:	|                              jsr -684(a6)
   172fa:	|                              move.l d0,90(sp)
   172fe:	|                              move.l 90(sp),d0
   17302:	|                              movea.l 1d2a0 <currentFloor>,a0
   17308:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   1730c:	|                              movea.l 1d2a0 <currentFloor>,a0
   17312:	|                              move.l 4(a0),d0
   17316:	|                          ,-- bne.s 1732c <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   17318:	|                          |   pea 1a8ed <PutChar+0x2511>
   1731e:	|                          |   jsr 1793a <KPrintF>
   17324:	|                          |   addq.l #4,sp
		return FALSE;
   17326:	|                          |   clr.w d0
   17328:	+--------------------------|-- bra.w 17854 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   1732c:	|                          '-> clr.l 132(sp)
   17330:	|                          ,-- bra.s 17384 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   17332:	|                       ,--|-> move.l 1d170 <bigDataFile>,d1
   17338:	|                       |  |   movea.l 1d2a0 <currentFloor>,a0
   1733e:	|                       |  |   movea.l 4(a0),a0
   17342:	|                       |  |   move.l 132(sp),d0
   17346:	|                       |  |   lsl.l #3,d0
   17348:	|                       |  |   lea (0,a0,d0.l),a2
   1734c:	|                       |  |   move.l d1,-(sp)
   1734e:	|                       |  |   jsr 6bc <get2bytes>
   17354:	|                       |  |   addq.l #4,sp
   17356:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   17358:	|                       |  |   move.l 1d170 <bigDataFile>,d1
   1735e:	|                       |  |   movea.l 1d2a0 <currentFloor>,a0
   17364:	|                       |  |   movea.l 4(a0),a0
   17368:	|                       |  |   move.l 132(sp),d0
   1736c:	|                       |  |   lsl.l #3,d0
   1736e:	|                       |  |   lea (0,a0,d0.l),a2
   17372:	|                       |  |   move.l d1,-(sp)
   17374:	|                       |  |   jsr 6bc <get2bytes>
   1737a:	|                       |  |   addq.l #4,sp
   1737c:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   17380:	|                       |  |   addq.l #1,132(sp)
   17384:	|                       |  '-> move.l 132(sp),d0
   17388:	|                       |      cmp.l 136(sp),d0
   1738c:	|                       '----- blt.s 17332 <setFloor+0x24e>
	}

	finishAccess ();
   1738e:	|                              jsr 7c66 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   17394:	|                              movea.l 1d2a0 <currentFloor>,a0
   1739a:	|                              move.l 8(a0),d0
   1739e:	|                              add.l d0,d0
   173a0:	|                              add.l d0,d0
   173a2:	|                              move.l d0,86(sp)
   173a6:	|                              clr.l 82(sp)
   173aa:	|                              move.l 1d188 <SysBase>,d0
   173b0:	|                              movea.l d0,a6
   173b2:	|                              move.l 86(sp),d0
   173b6:	|                              move.l 82(sp),d1
   173ba:	|                              jsr -684(a6)
   173be:	|                              move.l d0,78(sp)
   173c2:	|                              move.l 78(sp),d0
   173c6:	|                              movea.l 1d2a0 <currentFloor>,a0
   173cc:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   173d0:	|                              movea.l 1d2a0 <currentFloor>,a0
   173d6:	|                              move.l 8(a0),d0
   173da:	|                              add.l d0,d0
   173dc:	|                              add.l d0,d0
   173de:	|                              move.l d0,74(sp)
   173e2:	|                              clr.l 70(sp)
   173e6:	|                              move.l 1d188 <SysBase>,d0
   173ec:	|                              movea.l d0,a6
   173ee:	|                              move.l 74(sp),d0
   173f2:	|                              move.l 70(sp),d1
   173f6:	|                              jsr -684(a6)
   173fa:	|                              move.l d0,66(sp)
   173fe:	|                              move.l 66(sp),d0
   17402:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   17406:	|                              movea.l 1d2a0 <currentFloor>,a0
   1740c:	|                              move.l 16(a0),d0
   17410:	|                          ,-- bne.s 17426 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   17412:	|                          |   pea 1a8ed <PutChar+0x2511>
   17418:	|                          |   jsr 1793a <KPrintF>
   1741e:	|                          |   addq.l #4,sp
		return FALSE;
   17420:	|                          |   clr.w d0
   17422:	+--------------------------|-- bra.w 17854 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17426:	|                          '-> clr.l 136(sp)
   1742a:	|                    ,-------- bra.w 1754e <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1742e:	|                 ,--|-------> movea.l 1d2a0 <currentFloor>,a0
   17434:	|                 |  |         move.l 8(a0),d0
   17438:	|                 |  |         add.l d0,d0
   1743a:	|                 |  |         add.l d0,d0
   1743c:	|                 |  |         move.l d0,50(sp)
   17440:	|                 |  |         clr.l 46(sp)
   17444:	|                 |  |         move.l 1d188 <SysBase>,d0
   1744a:	|                 |  |         movea.l d0,a6
   1744c:	|                 |  |         move.l 50(sp),d0
   17450:	|                 |  |         move.l 46(sp),d1
   17454:	|                 |  |         jsr -684(a6)
   17458:	|                 |  |         move.l d0,42(sp)
   1745c:	|                 |  |         move.l 42(sp),d0
   17460:	|                 |  |         movea.l 1d2a0 <currentFloor>,a0
   17466:	|                 |  |         movea.l 16(a0),a0
   1746a:	|                 |  |         move.l 136(sp),d1
   1746e:	|                 |  |         add.l d1,d1
   17470:	|                 |  |         add.l d1,d1
   17472:	|                 |  |         adda.l d1,a0
   17474:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   17476:	|                 |  |         movea.l 1d2a0 <currentFloor>,a0
   1747c:	|                 |  |         move.l 8(a0),d0
   17480:	|                 |  |         add.l d0,d0
   17482:	|                 |  |         add.l d0,d0
   17484:	|                 |  |         move.l d0,38(sp)
   17488:	|                 |  |         clr.l 34(sp)
   1748c:	|                 |  |         move.l 1d188 <SysBase>,d0
   17492:	|                 |  |         movea.l d0,a6
   17494:	|                 |  |         move.l 38(sp),d0
   17498:	|                 |  |         move.l 34(sp),d1
   1749c:	|                 |  |         jsr -684(a6)
   174a0:	|                 |  |         move.l d0,30(sp)
   174a4:	|                 |  |         move.l 30(sp),d1
   174a8:	|                 |  |         move.l 136(sp),d0
   174ac:	|                 |  |         add.l d0,d0
   174ae:	|                 |  |         add.l d0,d0
   174b0:	|                 |  |         movea.l 62(sp),a0
   174b4:	|                 |  |         adda.l d0,a0
   174b6:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   174b8:	|                 |  |         movea.l 1d2a0 <currentFloor>,a0
   174be:	|                 |  |         move.l 16(a0),d1
   174c2:	|                 |  |         move.l 136(sp),d0
   174c6:	|                 |  |         add.l d0,d0
   174c8:	|                 |  |         add.l d0,d0
   174ca:	|                 |  |         movea.l d1,a0
   174cc:	|                 |  |         adda.l d0,a0
   174ce:	|                 |  |         move.l (a0),d0
   174d0:	|                 |  |     ,-- bne.s 174e6 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   174d2:	|                 |  |     |   pea 1a8ed <PutChar+0x2511>
   174d8:	|                 |  |     |   jsr 1793a <KPrintF>
   174de:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   174e0:	|                 |  |     |   clr.w d0
   174e2:	+-----------------|--|-----|-- bra.w 17854 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   174e6:	|                 |  |     '-> clr.l 132(sp)
   174ea:	|                 |  |     ,-- bra.s 1753a <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   174ec:	|                 |  |  ,--|-> movea.l 1d2a0 <currentFloor>,a0
   174f2:	|                 |  |  |  |   move.l 16(a0),d1
   174f6:	|                 |  |  |  |   move.l 136(sp),d0
   174fa:	|                 |  |  |  |   add.l d0,d0
   174fc:	|                 |  |  |  |   add.l d0,d0
   174fe:	|                 |  |  |  |   movea.l d1,a0
   17500:	|                 |  |  |  |   adda.l d0,a0
   17502:	|                 |  |  |  |   move.l (a0),d1
   17504:	|                 |  |  |  |   move.l 132(sp),d0
   17508:	|                 |  |  |  |   add.l d0,d0
   1750a:	|                 |  |  |  |   add.l d0,d0
   1750c:	|                 |  |  |  |   movea.l d1,a0
   1750e:	|                 |  |  |  |   adda.l d0,a0
   17510:	|                 |  |  |  |   moveq #-1,d1
   17512:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   17514:	|                 |  |  |  |   move.l 136(sp),d0
   17518:	|                 |  |  |  |   add.l d0,d0
   1751a:	|                 |  |  |  |   add.l d0,d0
   1751c:	|                 |  |  |  |   movea.l 62(sp),a0
   17520:	|                 |  |  |  |   adda.l d0,a0
   17522:	|                 |  |  |  |   move.l (a0),d1
   17524:	|                 |  |  |  |   move.l 132(sp),d0
   17528:	|                 |  |  |  |   add.l d0,d0
   1752a:	|                 |  |  |  |   add.l d0,d0
   1752c:	|                 |  |  |  |   movea.l d1,a0
   1752e:	|                 |  |  |  |   adda.l d0,a0
   17530:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17536:	|                 |  |  |  |   addq.l #1,132(sp)
   1753a:	|                 |  |  |  '-> movea.l 1d2a0 <currentFloor>,a0
   17540:	|                 |  |  |      move.l 8(a0),d0
   17544:	|                 |  |  |      cmp.l 132(sp),d0
   17548:	|                 |  |  '----- bgt.s 174ec <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1754a:	|                 |  |         addq.l #1,136(sp)
   1754e:	|                 |  '-------> movea.l 1d2a0 <currentFloor>,a0
   17554:	|                 |            move.l 8(a0),d0
   17558:	|                 |            cmp.l 136(sp),d0
   1755c:	|                 '----------- bgt.w 1742e <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17560:	|                              clr.l 136(sp)
   17564:	|              ,-------------- bra.w 1766a <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17568:	|           ,--|-------------> clr.l 132(sp)
   1756c:	|           |  |     ,-------- bra.w 17654 <setFloor+0x570>
			if (i != j) {
   17570:	|           |  |  ,--|-------> move.l 136(sp),d0
   17574:	|           |  |  |  |         cmp.l 132(sp),d0
   17578:	|           |  |  |  |     ,-- beq.w 1760a <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   1757c:	|           |  |  |  |     |   movea.l 1d2a0 <currentFloor>,a0
   17582:	|           |  |  |  |     |   move.l 12(a0),d1
   17586:	|           |  |  |  |     |   move.l 132(sp),d0
   1758a:	|           |  |  |  |     |   lsl.l #3,d0
   1758c:	|           |  |  |  |     |   movea.l d1,a1
   1758e:	|           |  |  |  |     |   adda.l d0,a1
   17590:	|           |  |  |  |     |   movea.l 1d2a0 <currentFloor>,a0
   17596:	|           |  |  |  |     |   move.l 12(a0),d1
   1759a:	|           |  |  |  |     |   move.l 136(sp),d0
   1759e:	|           |  |  |  |     |   lsl.l #3,d0
   175a0:	|           |  |  |  |     |   movea.l d1,a0
   175a2:	|           |  |  |  |     |   adda.l d0,a0
   175a4:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   175a8:	|           |  |  |  |     |   move.l (a1),-(sp)
   175aa:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   175ae:	|           |  |  |  |     |   move.l (a0),-(sp)
   175b0:	|           |  |  |  |     |   jsr 16e3c <polysShareSide>
   175b6:	|           |  |  |  |     |   lea 16(sp),sp
   175ba:	|           |  |  |  |     |   tst.w d0
   175bc:	|           |  |  |  |  ,--|-- beq.w 17650 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   175c0:	|           |  |  |  |  |  |   movea.l 1d2a0 <currentFloor>,a0
   175c6:	|           |  |  |  |  |  |   move.l 16(a0),d1
   175ca:	|           |  |  |  |  |  |   move.l 136(sp),d0
   175ce:	|           |  |  |  |  |  |   add.l d0,d0
   175d0:	|           |  |  |  |  |  |   add.l d0,d0
   175d2:	|           |  |  |  |  |  |   movea.l d1,a0
   175d4:	|           |  |  |  |  |  |   adda.l d0,a0
   175d6:	|           |  |  |  |  |  |   move.l (a0),d1
   175d8:	|           |  |  |  |  |  |   move.l 132(sp),d0
   175dc:	|           |  |  |  |  |  |   add.l d0,d0
   175de:	|           |  |  |  |  |  |   add.l d0,d0
   175e0:	|           |  |  |  |  |  |   movea.l d1,a0
   175e2:	|           |  |  |  |  |  |   adda.l d0,a0
   175e4:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   175e8:	|           |  |  |  |  |  |   move.l 136(sp),d0
   175ec:	|           |  |  |  |  |  |   add.l d0,d0
   175ee:	|           |  |  |  |  |  |   add.l d0,d0
   175f0:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   175f4:	|           |  |  |  |  |  |   adda.l d0,a0
   175f6:	|           |  |  |  |  |  |   move.l (a0),d1
   175f8:	|           |  |  |  |  |  |   move.l 132(sp),d0
   175fc:	|           |  |  |  |  |  |   add.l d0,d0
   175fe:	|           |  |  |  |  |  |   add.l d0,d0
   17600:	|           |  |  |  |  |  |   movea.l d1,a0
   17602:	|           |  |  |  |  |  |   adda.l d0,a0
   17604:	|           |  |  |  |  |  |   moveq #1,d1
   17606:	|           |  |  |  |  |  |   move.l d1,(a0)
   17608:	|           |  |  |  |  +--|-- bra.s 17650 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   1760a:	|           |  |  |  |  |  '-> movea.l 1d2a0 <currentFloor>,a0
   17610:	|           |  |  |  |  |      move.l 16(a0),d1
   17614:	|           |  |  |  |  |      move.l 136(sp),d0
   17618:	|           |  |  |  |  |      add.l d0,d0
   1761a:	|           |  |  |  |  |      add.l d0,d0
   1761c:	|           |  |  |  |  |      movea.l d1,a0
   1761e:	|           |  |  |  |  |      adda.l d0,a0
   17620:	|           |  |  |  |  |      move.l (a0),d1
   17622:	|           |  |  |  |  |      move.l 132(sp),d0
   17626:	|           |  |  |  |  |      add.l d0,d0
   17628:	|           |  |  |  |  |      add.l d0,d0
   1762a:	|           |  |  |  |  |      movea.l d1,a0
   1762c:	|           |  |  |  |  |      adda.l d0,a0
   1762e:	|           |  |  |  |  |      moveq #-2,d0
   17630:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   17632:	|           |  |  |  |  |      move.l 136(sp),d0
   17636:	|           |  |  |  |  |      add.l d0,d0
   17638:	|           |  |  |  |  |      add.l d0,d0
   1763a:	|           |  |  |  |  |      movea.l 62(sp),a0
   1763e:	|           |  |  |  |  |      adda.l d0,a0
   17640:	|           |  |  |  |  |      move.l (a0),d1
   17642:	|           |  |  |  |  |      move.l 132(sp),d0
   17646:	|           |  |  |  |  |      add.l d0,d0
   17648:	|           |  |  |  |  |      add.l d0,d0
   1764a:	|           |  |  |  |  |      movea.l d1,a0
   1764c:	|           |  |  |  |  |      adda.l d0,a0
   1764e:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17650:	|           |  |  |  |  '----> addq.l #1,132(sp)
   17654:	|           |  |  |  '-------> movea.l 1d2a0 <currentFloor>,a0
   1765a:	|           |  |  |            move.l 8(a0),d0
   1765e:	|           |  |  |            cmp.l 132(sp),d0
   17662:	|           |  |  '----------- bgt.w 17570 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17666:	|           |  |               addq.l #1,136(sp)
   1766a:	|           |  '-------------> movea.l 1d2a0 <currentFloor>,a0
   17670:	|           |                  move.l 8(a0),d0
   17674:	|           |                  cmp.l 136(sp),d0
   17678:	|           '----------------- bgt.w 17568 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   1767c:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   17680:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   17684:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17688:	|  |                           clr.l 136(sp)
   1768c:	|  |     ,-------------------- bra.w 177e2 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17690:	|  |  ,--|-------------------> clr.l 132(sp)
   17694:	|  |  |  |     ,-------------- bra.w 177cc <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   17698:	|  |  |  |  ,--|-------------> movea.l 1d2a0 <currentFloor>,a0
   1769e:	|  |  |  |  |  |               move.l 16(a0),d1
   176a2:	|  |  |  |  |  |               move.l 136(sp),d0
   176a6:	|  |  |  |  |  |               add.l d0,d0
   176a8:	|  |  |  |  |  |               add.l d0,d0
   176aa:	|  |  |  |  |  |               movea.l d1,a0
   176ac:	|  |  |  |  |  |               adda.l d0,a0
   176ae:	|  |  |  |  |  |               move.l (a0),d1
   176b0:	|  |  |  |  |  |               move.l 132(sp),d0
   176b4:	|  |  |  |  |  |               add.l d0,d0
   176b6:	|  |  |  |  |  |               add.l d0,d0
   176b8:	|  |  |  |  |  |               movea.l d1,a0
   176ba:	|  |  |  |  |  |               adda.l d0,a0
   176bc:	|  |  |  |  |  |               move.l (a0),d0
   176be:	|  |  |  |  |  |               moveq #-1,d1
   176c0:	|  |  |  |  |  |               cmp.l d0,d1
   176c2:	|  |  |  |  |  |  ,----------- bne.w 177c8 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   176c6:	|  |  |  |  |  |  |            clr.l 122(sp)
   176ca:	|  |  |  |  |  |  |     ,----- bra.w 177b6 <setFloor+0x6d2>
						if (d != i && d != j) {
   176ce:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   176d2:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   176d6:	|  |  |  |  |  |  |  |  |  ,-- beq.w 177b2 <setFloor+0x6ce>
   176da:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   176de:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   176e2:	|  |  |  |  |  |  |  |  |  +-- beq.w 177b2 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   176e6:	|  |  |  |  |  |  |  |  |  |   movea.l 1d2a0 <currentFloor>,a0
   176ec:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   176f0:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   176f4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   176f6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   176f8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   176fa:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   176fc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   176fe:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17702:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17704:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17706:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17708:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1770a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   1770c:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   17710:	|  |  |  |  |  |  |  |  |  +-- bne.w 177b2 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   17714:	|  |  |  |  |  |  |  |  |  |   movea.l 1d2a0 <currentFloor>,a0
   1771a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1771e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17722:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17724:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17726:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17728:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1772a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1772c:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17730:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17732:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17734:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17736:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17738:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   1773a:	|  |  |  |  |  |  |  |  |  +-- bmi.s 177b2 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   1773c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17740:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17742:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17744:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17748:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1774a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1774c:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17750:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17752:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17754:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17756:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17758:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   1775a:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   1775e:	|  |  |  |  |  |  |  |  |  +-- bgt.s 177b2 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   17760:	|  |  |  |  |  |  |  |  |  |   movea.l 1d2a0 <currentFloor>,a0
   17766:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1776a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1776e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17770:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17772:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17774:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17776:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17778:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1777c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1777e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17780:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17782:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17784:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   17788:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1778c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1778e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17790:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17794:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17796:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17798:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1779c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1779e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   177a0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   177a2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   177a4:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   177a8:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   177aa:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   177ac:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   177b2:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   177b6:	|  |  |  |  |  |  |  |  '----> movea.l 1d2a0 <currentFloor>,a0
   177bc:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   177c0:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   177c4:	|  |  |  |  |  |  |  '-------- bgt.w 176ce <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   177c8:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   177cc:	|  |  |  |  |  '-------------> movea.l 1d2a0 <currentFloor>,a0
   177d2:	|  |  |  |  |                  move.l 8(a0),d0
   177d6:	|  |  |  |  |                  cmp.l 132(sp),d0
   177da:	|  |  |  |  '----------------- bgt.w 17698 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   177de:	|  |  |  |                     addq.l #1,136(sp)
   177e2:	|  |  |  '-------------------> movea.l 1d2a0 <currentFloor>,a0
   177e8:	|  |  |                        move.l 8(a0),d0
   177ec:	|  |  |                        cmp.l 136(sp),d0
   177f0:	|  |  '----------------------- bgt.w 17690 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   177f4:	|  |                           tst.w 130(sp)
   177f8:	|  '-------------------------- bne.w 17680 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   177fc:	|                              clr.l 136(sp)
   17800:	|                          ,-- bra.s 17828 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   17802:	|                       ,--|-> move.l 136(sp),d0
   17806:	|                       |  |   add.l d0,d0
   17808:	|                       |  |   add.l d0,d0
   1780a:	|                       |  |   movea.l 62(sp),a0
   1780e:	|                       |  |   adda.l d0,a0
   17810:	|                       |  |   move.l (a0),54(sp)
   17814:	|                       |  |   move.l 1d188 <SysBase>,d0
   1781a:	|                       |  |   movea.l d0,a6
   1781c:	|                       |  |   movea.l 54(sp),a1
   17820:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17824:	|                       |  |   addq.l #1,136(sp)
   17828:	|                       |  '-> movea.l 1d2a0 <currentFloor>,a0
   1782e:	|                       |      move.l 8(a0),d0
   17832:	|                       |      cmp.l 136(sp),d0
   17836:	|                       '----- bgt.s 17802 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   17838:	|                              move.l 62(sp),58(sp)
   1783e:	|                              move.l 1d188 <SysBase>,d0
   17844:	|                              movea.l d0,a6
   17846:	|                              movea.l 58(sp),a1
   1784a:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   1784e:	|                              clr.l 62(sp)

	return TRUE;
   17852:	|                              moveq #1,d0
}
   17854:	'----------------------------> movea.l (sp)+,a2
   17856:	                               movea.l (sp)+,a6
   17858:	                               lea 132(sp),sp
   1785c:	                               rts

0001785e <setFloorNull>:

void setFloorNull () {
	killFloor ();
   1785e:	jsr 16d4c <killFloor>
	noFloor ();
   17864:	jsr 16c54 <noFloor>
   1786a:	nop
   1786c:	rts

0001786e <WaitVbl>:
void WaitVbl() {
   1786e:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   17870:	   ,-> movea.l #14675972,a0
   17876:	   |   move.l (a0),d0
   17878:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   1787a:	   |   move.l (sp),d0
   1787c:	   |   andi.l #130816,d0
   17882:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   17884:	   |   move.l (sp),d0
   17886:	   |   cmpi.l #76800,d0
   1788c:	   '-- beq.s 17870 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1788e:	,----> movea.l #14675972,a0
   17894:	|      move.l (a0),d0
   17896:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   1789a:	|      move.l 4(sp),d0
   1789e:	|      andi.l #130816,d0
   178a4:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   178a8:	|      move.l 4(sp),d0
   178ac:	|      cmpi.l #76800,d0
   178b2:	|  ,-- beq.s 178b6 <WaitVbl+0x48>
	while (1) {
   178b4:	'--|-- bra.s 1788e <WaitVbl+0x20>
			break;
   178b6:	   '-> nop
}
   178b8:	       nop
   178ba:	       addq.l #8,sp
   178bc:	       rts

000178be <memset>:
void* memset(void *dest, int val, unsigned long len) {
   178be:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   178c0:	       move.l 8(sp),(sp)
	while(len-- > 0)
   178c4:	   ,-- bra.s 178d6 <memset+0x18>
		*ptr++ = val;
   178c6:	,--|-> move.l (sp),d0
   178c8:	|  |   move.l d0,d1
   178ca:	|  |   addq.l #1,d1
   178cc:	|  |   move.l d1,(sp)
   178ce:	|  |   move.l 12(sp),d1
   178d2:	|  |   movea.l d0,a0
   178d4:	|  |   move.b d1,(a0)
	while(len-- > 0)
   178d6:	|  '-> move.l 16(sp),d0
   178da:	|      move.l d0,d1
   178dc:	|      subq.l #1,d1
   178de:	|      move.l d1,16(sp)
   178e2:	|      tst.l d0
   178e4:	'----- bne.s 178c6 <memset+0x8>
	return dest;
   178e6:	       move.l 8(sp),d0
}
   178ea:	       addq.l #4,sp
   178ec:	       rts

000178ee <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   178ee:	       subq.l #8,sp
   178f0:	       move.l d2,-(sp)
	char *d = (char *)dest;
   178f2:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   178f8:	       move.l 20(sp),4(sp)
	while(len--)
   178fe:	   ,-- bra.s 17920 <memcpy+0x32>
		*d++ = *s++;
   17900:	,--|-> move.l 4(sp),d1
   17904:	|  |   move.l d1,d0
   17906:	|  |   addq.l #1,d0
   17908:	|  |   move.l d0,4(sp)
   1790c:	|  |   move.l 8(sp),d0
   17910:	|  |   move.l d0,d2
   17912:	|  |   addq.l #1,d2
   17914:	|  |   move.l d2,8(sp)
   17918:	|  |   movea.l d1,a0
   1791a:	|  |   move.b (a0),d1
   1791c:	|  |   movea.l d0,a0
   1791e:	|  |   move.b d1,(a0)
	while(len--)
   17920:	|  '-> move.l 24(sp),d0
   17924:	|      move.l d0,d1
   17926:	|      subq.l #1,d1
   17928:	|      move.l d1,24(sp)
   1792c:	|      tst.l d0
   1792e:	'----- bne.s 17900 <memcpy+0x12>
	return dest;
   17930:	       move.l 16(sp),d0
}
   17934:	       move.l (sp)+,d2
   17936:	       addq.l #8,sp
   17938:	       rts

0001793a <KPrintF>:
void KPrintF(const char* fmt, ...) {
   1793a:	       lea -128(sp),sp
   1793e:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17942:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec3a6a>,d0
   17948:	       cmpi.w #20153,d0
   1794c:	   ,-- beq.s 17970 <KPrintF+0x36>
   1794e:	   |   cmpi.w #-24562,d0
   17952:	   +-- beq.s 17970 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   17954:	   |   movea.l 1d188 <SysBase>,a6
   1795a:	   |   movea.l 144(sp),a0
   1795e:	   |   lea 148(sp),a1
   17962:	   |   lea 183ce <KPutCharX>,a2
   17968:	   |   suba.l a3,a3
   1796a:	   |   jsr -522(a6)
}
   1796e:	,--|-- bra.s 1799a <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   17970:	|  '-> movea.l 1d188 <SysBase>,a6
   17976:	|      movea.l 144(sp),a0
   1797a:	|      lea 148(sp),a1
   1797e:	|      lea 183dc <PutChar>,a2
   17984:	|      lea 12(sp),a3
   17988:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   1798c:	|      move.l a3,-(sp)
   1798e:	|      pea 56 <_start+0x56>
   17992:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec3a6a>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17998:	|      addq.l #8,sp
}
   1799a:	'----> movem.l (sp)+,a2-a3/a6
   1799e:	       lea 128(sp),sp
   179a2:	       rts

000179a4 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   179a4:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   179a6:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   179ac:	       movea.l (sp),a0
   179ae:	       move.w (a0),d0
   179b0:	       cmpi.w #20153,d0
   179b4:	   ,-- beq.s 179c0 <debug_cmd+0x1c>
   179b6:	   |   movea.l (sp),a0
   179b8:	   |   move.w (a0),d0
   179ba:	   |   cmpi.w #-24562,d0
   179be:	,--|-- bne.s 179de <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   179c0:	|  '-> move.l 20(sp),-(sp)
   179c4:	|      move.l 20(sp),-(sp)
   179c8:	|      move.l 20(sp),-(sp)
   179cc:	|      move.l 20(sp),-(sp)
   179d0:	|      pea 58 <_start+0x58>
   179d4:	|      movea.l 20(sp),a0
   179d8:	|      jsr (a0)
   179da:	|      lea 20(sp),sp
	}
}
   179de:	'----> nop
   179e0:	       addq.l #4,sp
   179e2:	       rts

000179e4 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   179e4:	       move.l d2,-(sp)
	while(*source && --num > 0)
   179e6:	   ,-- bra.s 17a08 <my_strncpy+0x24>
		*destination++ = *source++;
   179e8:	,--|-> move.l 12(sp),d1
   179ec:	|  |   move.l d1,d0
   179ee:	|  |   addq.l #1,d0
   179f0:	|  |   move.l d0,12(sp)
   179f4:	|  |   move.l 8(sp),d0
   179f8:	|  |   move.l d0,d2
   179fa:	|  |   addq.l #1,d2
   179fc:	|  |   move.l d2,8(sp)
   17a00:	|  |   movea.l d1,a0
   17a02:	|  |   move.b (a0),d1
   17a04:	|  |   movea.l d0,a0
   17a06:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17a08:	|  '-> movea.l 12(sp),a0
   17a0c:	|      move.b (a0),d0
   17a0e:	|  ,-- beq.s 17a16 <my_strncpy+0x32>
   17a10:	|  |   subq.l #1,16(sp)
   17a14:	'--|-- bne.s 179e8 <my_strncpy+0x4>
	*destination = '\0';
   17a16:	   '-> movea.l 8(sp),a0
   17a1a:	       clr.b (a0)
}
   17a1c:	       nop
   17a1e:	       move.l (sp)+,d2
   17a20:	       rts

00017a22 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17a22:	    lea -60(sp),sp
   17a26:	    movea.l 72(sp),a1
   17a2a:	    movea.l 76(sp),a0
   17a2e:	    move.l 80(sp),d1
   17a32:	    move.l 84(sp),d0
   17a36:	    movea.w a1,a1
   17a38:	    move.w a1,8(sp)
   17a3c:	    movea.w a0,a0
   17a3e:	    move.w a0,6(sp)
   17a42:	    move.w d1,d1
   17a44:	    move.w d1,4(sp)
   17a48:	    move.w d0,d0
   17a4a:	    move.w d0,2(sp)
	struct debug_resource resource = {
   17a4e:	    lea 10(sp),a0
   17a52:	    clr.l (a0)
   17a54:	    addq.l #4,a0
   17a56:	    clr.l (a0)
   17a58:	    addq.l #4,a0
   17a5a:	    clr.l (a0)
   17a5c:	    addq.l #4,a0
   17a5e:	    clr.l (a0)
   17a60:	    addq.l #4,a0
   17a62:	    clr.l (a0)
   17a64:	    addq.l #4,a0
   17a66:	    clr.l (a0)
   17a68:	    addq.l #4,a0
   17a6a:	    clr.l (a0)
   17a6c:	    addq.l #4,a0
   17a6e:	    clr.l (a0)
   17a70:	    addq.l #4,a0
   17a72:	    clr.l (a0)
   17a74:	    addq.l #4,a0
   17a76:	    clr.l (a0)
   17a78:	    addq.l #4,a0
   17a7a:	    clr.l (a0)
   17a7c:	    addq.l #4,a0
   17a7e:	    clr.l (a0)
   17a80:	    addq.l #4,a0
   17a82:	    clr.w (a0)
   17a84:	    addq.l #2,a0
		.address = (unsigned int)addr,
   17a86:	    move.l 64(sp),d0
	struct debug_resource resource = {
   17a8a:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   17a8e:	    move.w 8(sp),d0
   17a92:	,-- bpl.s 17a96 <debug_register_bitmap+0x74>
   17a94:	|   addq.w #7,d0
   17a96:	'-> asr.w #3,d0
   17a98:	    movea.w d0,a0
   17a9a:	    movea.w 6(sp),a1
   17a9e:	    move.l a1,-(sp)
   17aa0:	    move.l a0,-(sp)
   17aa2:	    jsr 182c6 <__mulsi3>
   17aa8:	    addq.l #8,sp
   17aaa:	    movea.w 4(sp),a0
   17aae:	    move.l a0,-(sp)
   17ab0:	    move.l d0,-(sp)
   17ab2:	    jsr 182c6 <__mulsi3>
   17ab8:	    addq.l #8,sp
	struct debug_resource resource = {
   17aba:	    move.l d0,14(sp)
   17abe:	    move.w 2(sp),52(sp)
   17ac4:	    move.w 8(sp),54(sp)
   17aca:	    move.w 6(sp),56(sp)
   17ad0:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   17ad6:	    moveq #0,d0
   17ad8:	    move.w 2(sp),d0
   17adc:	    moveq #2,d1
   17ade:	    and.l d1,d0
   17ae0:	,-- beq.s 17aec <debug_register_bitmap+0xca>
		resource.size *= 2;
   17ae2:	|   move.l 14(sp),d0
   17ae6:	|   add.l d0,d0
   17ae8:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   17aec:	'-> pea 20 <_start+0x20>
   17af0:	    move.l 72(sp),-(sp)
   17af4:	    lea 18(sp),a0
   17af8:	    move.l a0,d0
   17afa:	    addq.l #8,d0
   17afc:	    move.l d0,-(sp)
   17afe:	    jsr 179e4 <my_strncpy>
   17b04:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17b08:	    lea 10(sp),a0
   17b0c:	    clr.l -(sp)
   17b0e:	    clr.l -(sp)
   17b10:	    move.l a0,-(sp)
   17b12:	    pea 4 <_start+0x4>
   17b16:	    jsr 179a4 <debug_cmd>
   17b1c:	    lea 16(sp),sp
}
   17b20:	    nop
   17b22:	    lea 60(sp),sp
   17b26:	    rts

00017b28 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17b28:	lea -12(sp),sp
   17b2c:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   17b2e:	move.l 20(sp),12(sp)
   17b34:	move.l 24(sp),8(sp)
   17b3a:	move.l 1d198 <MathIeeeSingBasBase>,d0
   17b40:	movea.l d0,a6
   17b42:	move.l 12(sp),d0
   17b46:	move.l 8(sp),d1
   17b4a:	jsr -66(a6)
   17b4e:	move.l d0,4(sp)
   17b52:	move.l 4(sp),d0
}
   17b56:	movea.l (sp)+,a6
   17b58:	lea 12(sp),sp
   17b5c:	rts

00017b5e <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   17b5e:	lea -32(sp),sp
   17b62:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17b66:	move.l 48(sp),36(sp)
   17b6c:	move.l 52(sp),40(sp)
   17b72:	move.l 56(sp),28(sp)
   17b78:	move.l 60(sp),32(sp)
   17b7e:	move.l 1d1a0 <MathIeeeDoubBasBase>,d0
   17b84:	movea.l d0,a6
   17b86:	move.l 36(sp),d0
   17b8a:	move.l 40(sp),d1
   17b8e:	move.l 28(sp),d2
   17b92:	move.l 32(sp),d3
   17b96:	jsr -66(a6)
   17b9a:	move.l d0,12(sp)
   17b9e:	move.l d1,16(sp)
   17ba2:	move.l 12(sp),20(sp)
   17ba8:	move.l 16(sp),24(sp)
   17bae:	move.l 20(sp),d0
   17bb2:	move.l 24(sp),d1
}
   17bb6:	movem.l (sp)+,d2-d3/a6
   17bba:	lea 32(sp),sp
   17bbe:	rts

00017bc0 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   17bc0:	lea -32(sp),sp
   17bc4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   17bc8:	move.l 48(sp),36(sp)
   17bce:	move.l 52(sp),40(sp)
   17bd4:	move.l 56(sp),28(sp)
   17bda:	move.l 60(sp),32(sp)
   17be0:	move.l 1d1a0 <MathIeeeDoubBasBase>,d0
   17be6:	movea.l d0,a6
   17be8:	move.l 36(sp),d0
   17bec:	move.l 40(sp),d1
   17bf0:	move.l 28(sp),d2
   17bf4:	move.l 32(sp),d3
   17bf8:	jsr -84(a6)
   17bfc:	move.l d0,12(sp)
   17c00:	move.l d1,16(sp)
   17c04:	move.l 12(sp),20(sp)
   17c0a:	move.l 16(sp),24(sp)
   17c10:	move.l 20(sp),d0
   17c14:	move.l 24(sp),d1
}
   17c18:	movem.l (sp)+,d2-d3/a6
   17c1c:	lea 32(sp),sp
   17c20:	rts

00017c22 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17c22:	lea -12(sp),sp
   17c26:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17c28:	move.l 20(sp),12(sp)
   17c2e:	move.l 24(sp),8(sp)
   17c34:	move.l 1d198 <MathIeeeSingBasBase>,d0
   17c3a:	movea.l d0,a6
   17c3c:	move.l 12(sp),d0
   17c40:	move.l 8(sp),d1
   17c44:	jsr -84(a6)
   17c48:	move.l d0,4(sp)
   17c4c:	move.l 4(sp),d0
}
   17c50:	movea.l (sp)+,a6
   17c52:	lea 12(sp),sp
   17c56:	rts

00017c58 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   17c58:	lea -12(sp),sp
   17c5c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17c5e:	move.l 20(sp),12(sp)
   17c64:	move.l 24(sp),8(sp)
   17c6a:	move.l 1d198 <MathIeeeSingBasBase>,d0
   17c70:	movea.l d0,a6
   17c72:	move.l 12(sp),d0
   17c76:	move.l 8(sp),d1
   17c7a:	jsr -42(a6)
   17c7e:	move.l d0,4(sp)
   17c82:	move.l 4(sp),d0
}
   17c86:	movea.l (sp)+,a6
   17c88:	lea 12(sp),sp
   17c8c:	rts

00017c8e <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   17c8e:	lea -20(sp),sp
   17c92:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   17c94:	move.l 28(sp),20(sp)
   17c9a:	move.l 1d1a4 <MathIeeeDoubTransBase>,d0
   17ca0:	movea.l d0,a6
   17ca2:	move.l 20(sp),d0
   17ca6:	jsr -108(a6)
   17caa:	move.l d0,4(sp)
   17cae:	move.l d1,8(sp)
   17cb2:	move.l 4(sp),12(sp)
   17cb8:	move.l 8(sp),16(sp)
   17cbe:	move.l 12(sp),d0
   17cc2:	move.l 16(sp),d1
}
   17cc6:	movea.l (sp)+,a6
   17cc8:	lea 20(sp),sp
   17ccc:	rts

00017cce <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   17cce:	lea -12(sp),sp
   17cd2:	move.l a6,-(sp)
	return IEEEDPFix(value);
   17cd4:	move.l 20(sp),8(sp)
   17cda:	move.l 24(sp),12(sp)
   17ce0:	move.l 1d1a0 <MathIeeeDoubBasBase>,d0
   17ce6:	movea.l d0,a6
   17ce8:	move.l 8(sp),d0
   17cec:	move.l 12(sp),d1
   17cf0:	jsr -30(a6)
   17cf4:	move.l d0,4(sp)
   17cf8:	move.l 4(sp),d0
}
   17cfc:	movea.l (sp)+,a6
   17cfe:	lea 12(sp),sp
   17d02:	rts

00017d04 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17d04:	subq.l #8,sp
   17d06:	move.l a6,-(sp)
	return IEEESPFix(value);
   17d08:	move.l 16(sp),8(sp)
   17d0e:	move.l 1d198 <MathIeeeSingBasBase>,d0
   17d14:	movea.l d0,a6
   17d16:	move.l 8(sp),d0
   17d1a:	jsr -30(a6)
   17d1e:	move.l d0,4(sp)
   17d22:	move.l 4(sp),d0
}
   17d26:	movea.l (sp)+,a6
   17d28:	addq.l #8,sp
   17d2a:	rts

00017d2c <__floatsidf>:


DOUBLE __floatsidf (int i) {
   17d2c:	lea -20(sp),sp
   17d30:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17d32:	move.l 28(sp),20(sp)
   17d38:	move.l 1d1a0 <MathIeeeDoubBasBase>,d0
   17d3e:	movea.l d0,a6
   17d40:	move.l 20(sp),d0
   17d44:	jsr -36(a6)
   17d48:	move.l d0,4(sp)
   17d4c:	move.l d1,8(sp)
   17d50:	move.l 4(sp),12(sp)
   17d56:	move.l 8(sp),16(sp)
   17d5c:	move.l 12(sp),d0
   17d60:	move.l 16(sp),d1
}
   17d64:	movea.l (sp)+,a6
   17d66:	lea 20(sp),sp
   17d6a:	rts

00017d6c <__floatsisf>:

FLOAT __floatsisf(int i) {
   17d6c:	subq.l #8,sp
   17d6e:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17d70:	move.l 16(sp),8(sp)
   17d76:	move.l 1d198 <MathIeeeSingBasBase>,d0
   17d7c:	movea.l d0,a6
   17d7e:	move.l 8(sp),d0
   17d82:	jsr -36(a6)
   17d86:	move.l d0,4(sp)
   17d8a:	move.l 4(sp),d0
}
   17d8e:	movea.l (sp)+,a6
   17d90:	addq.l #8,sp
   17d92:	rts

00017d94 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17d94:	subq.l #8,sp
   17d96:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17d98:	move.l 16(sp),8(sp)
   17d9e:	move.l 1d198 <MathIeeeSingBasBase>,d0
   17da4:	movea.l d0,a6
   17da6:	move.l 8(sp),d0
   17daa:	jsr -36(a6)
   17dae:	move.l d0,4(sp)
   17db2:	move.l 4(sp),d0
}
   17db6:	movea.l (sp)+,a6
   17db8:	addq.l #8,sp
   17dba:	rts

00017dbc <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   17dbc:	lea -32(sp),sp
   17dc0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   17dc4:	move.l 48(sp),36(sp)
   17dca:	move.l 52(sp),40(sp)
   17dd0:	move.l 56(sp),28(sp)
   17dd6:	move.l 60(sp),32(sp)
   17ddc:	move.l 1d1a0 <MathIeeeDoubBasBase>,d0
   17de2:	movea.l d0,a6
   17de4:	move.l 36(sp),d0
   17de8:	move.l 40(sp),d1
   17dec:	move.l 28(sp),d2
   17df0:	move.l 32(sp),d3
   17df4:	jsr -78(a6)
   17df8:	move.l d0,12(sp)
   17dfc:	move.l d1,16(sp)
   17e00:	move.l 12(sp),20(sp)
   17e06:	move.l 16(sp),24(sp)
   17e0c:	move.l 20(sp),d0
   17e10:	move.l 24(sp),d1
}
   17e14:	movem.l (sp)+,d2-d3/a6
   17e18:	lea 32(sp),sp
   17e1c:	rts

00017e1e <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17e1e:	lea -12(sp),sp
   17e22:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17e24:	move.l 20(sp),12(sp)
   17e2a:	move.l 24(sp),8(sp)
   17e30:	move.l 1d198 <MathIeeeSingBasBase>,d0
   17e36:	movea.l d0,a6
   17e38:	move.l 12(sp),d0
   17e3c:	move.l 8(sp),d1
   17e40:	jsr -78(a6)
   17e44:	move.l d0,4(sp)
   17e48:	move.l 4(sp),d0
}
   17e4c:	movea.l (sp)+,a6
   17e4e:	lea 12(sp),sp
   17e52:	rts

00017e54 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17e54:	lea -12(sp),sp
   17e58:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17e5a:	move.l 20(sp),12(sp)
   17e60:	move.l 24(sp),8(sp)
   17e66:	move.l 1d198 <MathIeeeSingBasBase>,d0
   17e6c:	movea.l d0,a6
   17e6e:	move.l 12(sp),d0
   17e72:	move.l 8(sp),d1
   17e76:	jsr -42(a6)
   17e7a:	move.l d0,4(sp)
   17e7e:	move.l 4(sp),d0
}
   17e82:	movea.l (sp)+,a6
   17e84:	lea 12(sp),sp
   17e88:	rts

00017e8a <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   17e8a:	lea -20(sp),sp
   17e8e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17e92:	move.l 36(sp),24(sp)
   17e98:	move.l 40(sp),28(sp)
   17e9e:	move.l 44(sp),16(sp)
   17ea4:	move.l 48(sp),20(sp)
   17eaa:	move.l 1d1a0 <MathIeeeDoubBasBase>,d0
   17eb0:	movea.l d0,a6
   17eb2:	move.l 24(sp),d0
   17eb6:	move.l 28(sp),d1
   17eba:	move.l 16(sp),d2
   17ebe:	move.l 20(sp),d3
   17ec2:	jsr -42(a6)
   17ec6:	move.l d0,12(sp)
   17eca:	move.l 12(sp),d0
}
   17ece:	movem.l (sp)+,d2-d3/a6
   17ed2:	lea 20(sp),sp
   17ed6:	rts

00017ed8 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17ed8:	lea -12(sp),sp
   17edc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17ede:	move.l 20(sp),12(sp)
   17ee4:	move.l 24(sp),8(sp)
   17eea:	move.l 1d198 <MathIeeeSingBasBase>,d0
   17ef0:	movea.l d0,a6
   17ef2:	move.l 12(sp),d0
   17ef6:	move.l 8(sp),d1
   17efa:	jsr -42(a6)
   17efe:	move.l d0,4(sp)
   17f02:	move.l 4(sp),d0
}
   17f06:	movea.l (sp)+,a6
   17f08:	lea 12(sp),sp
   17f0c:	rts

00017f0e <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17f0e:	lea -12(sp),sp
   17f12:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17f14:	move.l 20(sp),12(sp)
   17f1a:	move.l 24(sp),8(sp)
   17f20:	move.l 1d198 <MathIeeeSingBasBase>,d0
   17f26:	movea.l d0,a6
   17f28:	move.l 12(sp),d0
   17f2c:	move.l 8(sp),d1
   17f30:	jsr -42(a6)
   17f34:	move.l d0,4(sp)
   17f38:	move.l 4(sp),d0
}
   17f3c:	movea.l (sp)+,a6
   17f3e:	lea 12(sp),sp
   17f42:	rts

00017f44 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17f44:	lea -20(sp),sp
   17f48:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17f4c:	move.l 36(sp),24(sp)
   17f52:	move.l 40(sp),28(sp)
   17f58:	move.l 44(sp),16(sp)
   17f5e:	move.l 48(sp),20(sp)
   17f64:	move.l 1d1a0 <MathIeeeDoubBasBase>,d0
   17f6a:	movea.l d0,a6
   17f6c:	move.l 24(sp),d0
   17f70:	move.l 28(sp),d1
   17f74:	move.l 16(sp),d2
   17f78:	move.l 20(sp),d3
   17f7c:	jsr -42(a6)
   17f80:	move.l d0,12(sp)
   17f84:	move.l 12(sp),d0
}
   17f88:	movem.l (sp)+,d2-d3/a6
   17f8c:	lea 20(sp),sp
   17f90:	rts

00017f92 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17f92:	lea -12(sp),sp
   17f96:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17f98:	move.l 20(sp),12(sp)
   17f9e:	move.l 24(sp),8(sp)
   17fa4:	move.l 1d198 <MathIeeeSingBasBase>,d0
   17faa:	movea.l d0,a6
   17fac:	move.l 12(sp),d0
   17fb0:	move.l 8(sp),d1
   17fb4:	jsr -42(a6)
   17fb8:	move.l d0,4(sp)
   17fbc:	move.l 4(sp),d0
}
   17fc0:	movea.l (sp)+,a6
   17fc2:	lea 12(sp),sp
   17fc6:	rts

00017fc8 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17fc8:	lea -12(sp),sp
   17fcc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17fce:	move.l 20(sp),12(sp)
   17fd4:	move.l 24(sp),8(sp)
   17fda:	move.l 1d198 <MathIeeeSingBasBase>,d0
   17fe0:	movea.l d0,a6
   17fe2:	move.l 12(sp),d0
   17fe6:	move.l 8(sp),d1
   17fea:	jsr -42(a6)
   17fee:	move.l d0,4(sp)
   17ff2:	move.l 4(sp),d0
}
   17ff6:	movea.l (sp)+,a6
   17ff8:	lea 12(sp),sp
   17ffc:	rts

00017ffe <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17ffe:	lea -32(sp),sp
   18002:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   18006:	move.l 48(sp),36(sp)
   1800c:	move.l 52(sp),40(sp)
   18012:	move.l 56(sp),28(sp)
   18018:	move.l 60(sp),32(sp)
   1801e:	move.l 1d1a0 <MathIeeeDoubBasBase>,d0
   18024:	movea.l d0,a6
   18026:	move.l 36(sp),d0
   1802a:	move.l 40(sp),d1
   1802e:	move.l 28(sp),d2
   18032:	move.l 32(sp),d3
   18036:	jsr -72(a6)
   1803a:	move.l d0,12(sp)
   1803e:	move.l d1,16(sp)
   18042:	move.l 12(sp),20(sp)
   18048:	move.l 16(sp),24(sp)
   1804e:	move.l 20(sp),d0
   18052:	move.l 24(sp),d1
}
   18056:	movem.l (sp)+,d2-d3/a6
   1805a:	lea 32(sp),sp
   1805e:	rts

00018060 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   18060:	lea -12(sp),sp
   18064:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   18066:	move.l 20(sp),12(sp)
   1806c:	move.l 24(sp),8(sp)
   18072:	move.l 1d198 <MathIeeeSingBasBase>,d0
   18078:	movea.l d0,a6
   1807a:	move.l 12(sp),d0
   1807e:	move.l 8(sp),d1
   18082:	jsr -72(a6)
   18086:	move.l d0,4(sp)
   1808a:	move.l 4(sp),d0
}
   1808e:	movea.l (sp)+,a6
   18090:	lea 12(sp),sp
   18094:	rts

00018096 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   18096:	lea -12(sp),sp
   1809a:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   1809c:	move.l 20(sp),8(sp)
   180a2:	move.l 24(sp),12(sp)
   180a8:	move.l 1d1a4 <MathIeeeDoubTransBase>,d0
   180ae:	movea.l d0,a6
   180b0:	move.l 8(sp),d0
   180b4:	move.l 12(sp),d1
   180b8:	jsr -102(a6)
   180bc:	move.l d0,4(sp)
   180c0:	move.l 4(sp),d0
}
   180c4:	movea.l (sp)+,a6
   180c6:	lea 12(sp),sp
   180ca:	rts

000180cc <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   180cc:	       lea -24(sp),sp
   180d0:	       move.l a6,-(sp)
    if (x > 0) {
   180d2:	       clr.l -(sp)
   180d4:	       move.l 40(sp),-(sp)
   180d8:	       jsr 17ed8 <__gtsf2>
   180de:	       addq.l #8,sp
   180e0:	       tst.l d0
   180e2:	   ,-- ble.s 18114 <atan2f+0x48>
        return IEEESPAtan(y / x);
   180e4:	   |   move.l 36(sp),-(sp)
   180e8:	   |   move.l 36(sp),-(sp)
   180ec:	   |   jsr 17c22 <__divsf3>
   180f2:	   |   addq.l #8,sp
   180f4:	   |   move.l d0,8(sp)
   180f8:	   |   move.l 1d19c <MathIeeeSingTransBase>,d0
   180fe:	   |   movea.l d0,a6
   18100:	   |   move.l 8(sp),d0
   18104:	   |   jsr -30(a6)
   18108:	   |   move.l d0,4(sp)
   1810c:	   |   move.l 4(sp),d0
   18110:	,--|-- bra.w 18274 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   18114:	|  '-> clr.l -(sp)
   18116:	|      move.l 40(sp),-(sp)
   1811a:	|      jsr 17f92 <__ltsf2>
   18120:	|      addq.l #8,sp
   18122:	|      tst.l d0
   18124:	|  ,-- bge.s 18198 <atan2f+0xcc>
   18126:	|  |   clr.l -(sp)
   18128:	|  |   move.l 36(sp),-(sp)
   1812c:	|  |   jsr 17e54 <__gesf2>
   18132:	|  |   addq.l #8,sp
   18134:	|  |   tst.l d0
   18136:	|  +-- blt.s 18198 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   18138:	|  |   move.l 36(sp),-(sp)
   1813c:	|  |   move.l 36(sp),-(sp)
   18140:	|  |   jsr 17c22 <__divsf3>
   18146:	|  |   addq.l #8,sp
   18148:	|  |   move.l d0,24(sp)
   1814c:	|  |   move.l 1d19c <MathIeeeSingTransBase>,d0
   18152:	|  |   movea.l d0,a6
   18154:	|  |   move.l 24(sp),d0
   18158:	|  |   jsr -30(a6)
   1815c:	|  |   move.l d0,20(sp)
   18160:	|  |   move.l 20(sp),d0
   18164:	|  |   move.l d0,-(sp)
   18166:	|  |   jsr 17c8e <__extendsfdf2>
   1816c:	|  |   addq.l #4,sp
   1816e:	|  |   move.l #1413754136,-(sp)
   18174:	|  |   move.l #1074340347,-(sp)
   1817a:	|  |   move.l d1,-(sp)
   1817c:	|  |   move.l d0,-(sp)
   1817e:	|  |   jsr 17b5e <__adddf3>
   18184:	|  |   lea 16(sp),sp
   18188:	|  |   move.l d1,-(sp)
   1818a:	|  |   move.l d0,-(sp)
   1818c:	|  |   jsr 18096 <__truncdfsf2>
   18192:	|  |   addq.l #8,sp
   18194:	+--|-- bra.w 18274 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   18198:	|  '-> clr.l -(sp)
   1819a:	|      move.l 40(sp),-(sp)
   1819e:	|      jsr 17f92 <__ltsf2>
   181a4:	|      addq.l #8,sp
   181a6:	|      tst.l d0
   181a8:	|  ,-- bge.s 1821a <atan2f+0x14e>
   181aa:	|  |   clr.l -(sp)
   181ac:	|  |   move.l 36(sp),-(sp)
   181b0:	|  |   jsr 17f92 <__ltsf2>
   181b6:	|  |   addq.l #8,sp
   181b8:	|  |   tst.l d0
   181ba:	|  +-- bge.s 1821a <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   181bc:	|  |   move.l 36(sp),-(sp)
   181c0:	|  |   move.l 36(sp),-(sp)
   181c4:	|  |   jsr 17c22 <__divsf3>
   181ca:	|  |   addq.l #8,sp
   181cc:	|  |   move.l d0,16(sp)
   181d0:	|  |   move.l 1d19c <MathIeeeSingTransBase>,d0
   181d6:	|  |   movea.l d0,a6
   181d8:	|  |   move.l 16(sp),d0
   181dc:	|  |   jsr -30(a6)
   181e0:	|  |   move.l d0,12(sp)
   181e4:	|  |   move.l 12(sp),d0
   181e8:	|  |   move.l d0,-(sp)
   181ea:	|  |   jsr 17c8e <__extendsfdf2>
   181f0:	|  |   addq.l #4,sp
   181f2:	|  |   move.l #1413754136,-(sp)
   181f8:	|  |   move.l #1074340347,-(sp)
   181fe:	|  |   move.l d1,-(sp)
   18200:	|  |   move.l d0,-(sp)
   18202:	|  |   jsr 17ffe <__subdf3>
   18208:	|  |   lea 16(sp),sp
   1820c:	|  |   move.l d1,-(sp)
   1820e:	|  |   move.l d0,-(sp)
   18210:	|  |   jsr 18096 <__truncdfsf2>
   18216:	|  |   addq.l #8,sp
   18218:	+--|-- bra.s 18274 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   1821a:	|  '-> clr.l -(sp)
   1821c:	|      move.l 40(sp),-(sp)
   18220:	|      jsr 17c58 <__eqsf2>
   18226:	|      addq.l #8,sp
   18228:	|      tst.l d0
   1822a:	|  ,-- bne.s 18246 <atan2f+0x17a>
   1822c:	|  |   clr.l -(sp)
   1822e:	|  |   move.l 36(sp),-(sp)
   18232:	|  |   jsr 17ed8 <__gtsf2>
   18238:	|  |   addq.l #8,sp
   1823a:	|  |   tst.l d0
   1823c:	|  +-- ble.s 18246 <atan2f+0x17a>
        return PI / 2;
   1823e:	|  |   move.l #1070141403,d0
   18244:	+--|-- bra.s 18274 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   18246:	|  '-> clr.l -(sp)
   18248:	|      move.l 40(sp),-(sp)
   1824c:	|      jsr 17c58 <__eqsf2>
   18252:	|      addq.l #8,sp
   18254:	|      tst.l d0
   18256:	|  ,-- bne.s 18272 <atan2f+0x1a6>
   18258:	|  |   clr.l -(sp)
   1825a:	|  |   move.l 36(sp),-(sp)
   1825e:	|  |   jsr 17f92 <__ltsf2>
   18264:	|  |   addq.l #8,sp
   18266:	|  |   tst.l d0
   18268:	|  +-- bge.s 18272 <atan2f+0x1a6>
        return -PI / 2;
   1826a:	|  |   move.l #-1077342245,d0
   18270:	+--|-- bra.s 18274 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   18272:	|  '-> moveq #0,d0
    }
}
   18274:	'----> movea.l (sp)+,a6
   18276:	       lea 24(sp),sp
   1827a:	       rts

0001827c <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   1827c:	lea -24(sp),sp
   18280:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   18282:	move.l 32(sp),20(sp)
   18288:	move.l 36(sp),24(sp)
   1828e:	move.l 1d1a4 <MathIeeeDoubTransBase>,d0
   18294:	movea.l d0,a6
   18296:	move.l 20(sp),d0
   1829a:	move.l 24(sp),d1
   1829e:	jsr -96(a6)
   182a2:	move.l d0,4(sp)
   182a6:	move.l d1,8(sp)
   182aa:	move.l 4(sp),12(sp)
   182b0:	move.l 8(sp),16(sp)
   182b6:	move.l 12(sp),d0
   182ba:	move.l 16(sp),d1
}
   182be:	movea.l (sp)+,a6
   182c0:	lea 24(sp),sp
   182c4:	rts

000182c6 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   182c6:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   182ca:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   182ce:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   182d2:	mulu.w 8(sp),d1
	addw	d1, d0
   182d6:	add.w d1,d0
	swap	d0
   182d8:	swap d0
	clrw	d0
   182da:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   182dc:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   182e0:	mulu.w 10(sp),d1
	addl	d1, d0
   182e4:	add.l d1,d0
	rts
   182e6:	rts

000182e8 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   182e8:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   182ea:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   182ee:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   182f2:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   182f8:	   ,-- bcc.s 18310 <__udivsi3+0x28>
	movel	d0, d2
   182fa:	   |   move.l d0,d2
	clrw	d2
   182fc:	   |   clr.w d2
	swap	d2
   182fe:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   18300:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   18302:	   |   move.w d2,d0
	swap	d0
   18304:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   18306:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   1830a:	   |   divu.w d1,d2
	movew	d2, d0
   1830c:	   |   move.w d2,d0
	jra	6f
   1830e:	,--|-- bra.s 18340 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   18310:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   18312:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   18314:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   18316:	|  |   cmpi.l #65536,d1
	jcc	4b
   1831c:	|  '-- bcc.s 18312 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   1831e:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   18320:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   18326:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   18328:	|      mulu.w d0,d1
	swap	d2
   1832a:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   1832c:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   1832e:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   18330:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   18332:	|  ,-- bne.s 1833e <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   18334:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   18336:	|  +-- bcs.s 1833e <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   18338:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   1833c:	+--|-- bls.s 18340 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   1833e:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   18340:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   18342:	       rts

00018344 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   18344:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   18346:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   18348:	    move.l 12(sp),d1
	jpl	1f
   1834c:	,-- bpl.s 18352 <__divsi3+0xe>
	negl	d1
   1834e:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   18350:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   18352:	'-> move.l 8(sp),d0
	jpl	2f
   18356:	,-- bpl.s 1835c <__divsi3+0x18>
	negl	d0
   18358:	|   neg.l d0
	negb	d2
   1835a:	|   neg.b d2

2:	movel	d1, sp@-
   1835c:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1835e:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   18360:	    jsr 182e8 <__udivsi3>
	addql	#8, sp
   18366:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   18368:	    tst.b d2
	jpl	3f
   1836a:	,-- bpl.s 1836e <__divsi3+0x2a>
	negl	d0
   1836c:	|   neg.l d0

3:	movel	sp@+, d2
   1836e:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   18370:	    rts

00018372 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   18372:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   18376:	move.l 4(sp),d0
	movel	d1, sp@-
   1837a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1837c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   1837e:	jsr 18344 <__divsi3>
	addql	#8, sp
   18384:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   18386:	move.l 8(sp),d1
	movel	d1, sp@-
   1838a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1838c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1838e:	jsr 182c6 <__mulsi3>
	addql	#8, sp
   18394:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   18396:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1839a:	sub.l d0,d1
	movel	d1, d0
   1839c:	move.l d1,d0
	rts
   1839e:	rts

000183a0 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   183a0:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   183a4:	move.l 4(sp),d0
	movel	d1, sp@-
   183a8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   183aa:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   183ac:	jsr 182e8 <__udivsi3>
	addql	#8, sp
   183b2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   183b4:	move.l 8(sp),d1
	movel	d1, sp@-
   183b8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   183ba:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   183bc:	jsr 182c6 <__mulsi3>
	addql	#8, sp
   183c2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   183c4:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   183c8:	sub.l d0,d1
	movel	d1, d0
   183ca:	move.l d1,d0
	rts
   183cc:	rts

000183ce <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   183ce:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   183d0:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   183d4:	jsr -516(a6)
    move.l (sp)+, a6
   183d8:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   183da:	rts

000183dc <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   183dc:	move.b d0,(a3)+
	rts
   183de:	rts
