
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #98304,d0
       8:	       subi.l #98304,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 18000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #98304,d0
      40:	       subi.l #98304,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 18000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 4a1a <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #98304,d0
      7e:	       subi.l #98304,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 18000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr fc3c <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 19c4c <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr fc54 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 18000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr fc3c <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 19c4c <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 18000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr fc3c <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 19c4c <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 13270 <PutChar+0x4>
     35c:	|  |              |   jsr 127a4 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 19c54 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 19c54 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 19c54 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 19c54 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 19c54 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 19c54 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 19c54 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 1329a <PutChar+0x2e>
     834:	|   jsr 127a4 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 19c54 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 132b6 <PutChar+0x4a>
     8a6:	|   jsr 127a4 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 19c54 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 19c54 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 19c54 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 19c54 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 19c54 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 19c54 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 19c54 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 19c54 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 19c4c <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 19c54 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr fc3c <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 19c54 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
     c58:	       lea -88(sp),sp
     c5c:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
     c5e:	       move.l 19c4c <SysBase>,d0
     c64:	       movea.l d0,a6
     c66:	       jsr -666(a6)
     c6a:	       move.l d0,88(sp)
     c6e:	       move.l 88(sp),d0
     c72:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
     c76:	       move.l 84(sp),80(sp)
     c7c:	       moveq #40,d0
     c7e:	       move.l d0,76(sp)
     c82:	       move.l 19c4c <SysBase>,d0
     c88:	       movea.l d0,a6
     c8a:	       movea.l 80(sp),a0
     c8e:	       move.l 76(sp),d0
     c92:	       jsr -654(a6)
     c96:	       move.l d0,72(sp)
     c9a:	       move.l 72(sp),d0
     c9e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
     ca2:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
     ca8:	       move.l #78558,60(sp)
     cb0:	       clr.l 56(sp)
     cb4:	       move.l 64(sp),52(sp)
     cba:	       clr.l 48(sp)
     cbe:	       move.l 19c4c <SysBase>,d0
     cc4:	       movea.l d0,a6
     cc6:	       movea.l 60(sp),a0
     cca:	       move.l 56(sp),d0
     cce:	       movea.l 52(sp),a1
     cd2:	       move.l 48(sp),d1
     cd6:	       jsr -444(a6)
     cda:	       move.b d0,47(sp)
     cde:	       move.b 47(sp),d0
     ce2:	   /-- beq.s cf8 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
     ce4:	   |   pea 132eb <PutChar+0x7f>
     cea:	   |   jsr 127a4 <KPrintF>
     cf0:	   |   addq.l #4,sp
        return 0;
     cf2:	   |   moveq #0,d0
     cf4:	/--|-- bra.w db2 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
     cf8:	|  \-> movea.l 64(sp),a0
     cfc:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
     d02:	|      lea 92(sp),a0
     d06:	|      lea -86(a0),a0
     d0a:	|      move.l a0,38(sp)
     d0e:	|      movea.l 42(sp),a6
     d12:	|      movea.l 38(sp),a0
     d16:	|      jsr -60(a6)
     d1a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
     d1e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
     d24:	|      move.l #1103515245,-(sp)
     d2a:	|      move.l 34(sp),-(sp)
     d2e:	|      jsr 13156 <__mulsi3>
     d34:	|      addq.l #8,sp
     d36:	|      addi.l #12345,d0
     d3c:	|      move.l d0,d1
     d3e:	|      bclr #31,d1
     d42:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
     d46:	|      move.l 30(sp),d0
     d4a:	|      pea 64 <_start+0x64>
     d4e:	|      move.l d0,-(sp)
     d50:	|      jsr 13230 <__umodsi3>
     d56:	|      addq.l #8,sp
     d58:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
     d5c:	|      move.l 26(sp),-(sp)
     d60:	|      pea 13308 <PutChar+0x9c>
     d66:	|      jsr 127a4 <KPrintF>
     d6c:	|      addq.l #8,sp

    CloseDevice(ioreq);
     d6e:	|      move.l 64(sp),22(sp)
     d74:	|      move.l 19c4c <SysBase>,d0
     d7a:	|      movea.l d0,a6
     d7c:	|      movea.l 22(sp),a1
     d80:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
     d84:	|      move.l 64(sp),18(sp)
     d8a:	|      move.l 19c4c <SysBase>,d0
     d90:	|      movea.l d0,a6
     d92:	|      movea.l 18(sp),a0
     d96:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
     d9a:	|      move.l 84(sp),14(sp)
     da0:	|      move.l 19c4c <SysBase>,d0
     da6:	|      movea.l d0,a6
     da8:	|      movea.l 14(sp),a0
     dac:	|      jsr -672(a6)
    return 0;
     db0:	|      moveq #0,d0
}
     db2:	\----> movea.l (sp)+,a6
     db4:	       lea 88(sp),sp
     db8:	       rts

00000dba <pickAnimCursor>:
struct personaAnimation * mouseCursorAnim;
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     dba:	move.l 19b2c <mouseCursorAnim>,d0
     dc0:	move.l d0,-(sp)
     dc2:	jsr 628a <deleteAnim>
     dc8:	addq.l #4,sp
	mouseCursorAnim = pp;
     dca:	move.l 4(sp),19b2c <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     dd2:	clr.l 19b30 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     dd8:	clr.l 19b34 <mouseCursorCountUp>
}
     dde:	nop
     de0:	rts

00000de2 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
	KPrintF("pasteCursor: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
     de2:	pea 1331b <PutChar+0xaf>
     de8:	jsr 127a4 <KPrintF>
     dee:	addq.l #4,sp
     df0:	nop
     df2:	rts

00000df4 <CstCreateCopperlist>:
  custom->bltcon0 = 0x0100;
  custom->bltdpt = CstDrawBuffer;
  custom->bltsize = (height*5)<<6+width;  
}

UWORD * CstCreateCopperlist( int width) {
     df4:	       lea -52(sp),sp
     df8:	       move.l a6,-(sp)
     dfa:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     dfc:	       move.l #400,32(sp)
     e04:	       moveq #2,d0
     e06:	       move.l d0,28(sp)
     e0a:	       move.l 19c4c <SysBase>,d0
     e10:	       movea.l d0,a6
     e12:	       move.l 32(sp),d0
     e16:	       move.l 28(sp),d1
     e1a:	       jsr -198(a6)
     e1e:	       move.l d0,24(sp)
     e22:	       move.l 24(sp),d0
     e26:	       move.l d0,20(sp)
  
  if( retval == 0) {
     e2a:	   /-- bne.s e54 <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
     e2c:	   |   pea 28 <_start+0x28>
     e30:	   |   pea 13354 <PutChar+0xe8>
     e36:	   |   jsr 127a4 <KPrintF>
     e3c:	   |   addq.l #8,sp
    Exit(1);
     e3e:	   |   moveq #1,d1
     e40:	   |   move.l d1,16(sp)
     e44:	   |   move.l 19c54 <DOSBase>,d0
     e4a:	   |   movea.l d0,a6
     e4c:	   |   move.l 16(sp),d1
     e50:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
     e54:	   \-> move.l 20(sp),56(sp)

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
     e5a:	       move.l #98306,52(sp)
  for(int i=0; i<16;i++)
     e62:	       clr.l 48(sp)
     e66:	   /-- bra.s e8c <CstCreateCopperlist+0x98>
    *cl++ = *clpartinstruction++;
     e68:	/--|-> move.l 52(sp),d1
     e6c:	|  |   move.l d1,d2
     e6e:	|  |   addq.l #4,d2
     e70:	|  |   move.l d2,52(sp)
     e74:	|  |   move.l 56(sp),d0
     e78:	|  |   move.l d0,d2
     e7a:	|  |   addq.l #4,d2
     e7c:	|  |   move.l d2,56(sp)
     e80:	|  |   movea.l d1,a0
     e82:	|  |   move.l (a0),d1
     e84:	|  |   movea.l d0,a0
     e86:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
     e88:	|  |   addq.l #1,48(sp)
     e8c:	|  \-> moveq #15,d0
     e8e:	|      cmp.l 48(sp),d0
     e92:	\----- bge.s e68 <CstCreateCopperlist+0x74>

  clpartinstruction = CstClScreen;
     e94:	       move.l #98370,52(sp)

  for(int i=0; i<12;i++)
     e9c:	       clr.l 44(sp)
     ea0:	   /-- bra.s ec6 <CstCreateCopperlist+0xd2>
    *cl++ = *clpartinstruction++;
     ea2:	/--|-> move.l 52(sp),d1
     ea6:	|  |   move.l d1,d2
     ea8:	|  |   addq.l #4,d2
     eaa:	|  |   move.l d2,52(sp)
     eae:	|  |   move.l 56(sp),d0
     eb2:	|  |   move.l d0,d2
     eb4:	|  |   addq.l #4,d2
     eb6:	|  |   move.l d2,56(sp)
     eba:	|  |   movea.l d1,a0
     ebc:	|  |   move.l (a0),d1
     ebe:	|  |   movea.l d0,a0
     ec0:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
     ec2:	|  |   addq.l #1,44(sp)
     ec6:	|  \-> moveq #11,d0
     ec8:	|      cmp.l 44(sp),d0
     ecc:	\----- bge.s ea2 <CstCreateCopperlist+0xae>

  clpartinstruction = CstClBitplanes;
     ece:	       move.l #98418,52(sp)
  for(int i=0; i<10;i++)
     ed6:	       clr.l 40(sp)
     eda:	   /-- bra.s f00 <CstCreateCopperlist+0x10c>
    *cl++ = *clpartinstruction++;        
     edc:	/--|-> move.l 52(sp),d1
     ee0:	|  |   move.l d1,d2
     ee2:	|  |   addq.l #4,d2
     ee4:	|  |   move.l d2,52(sp)
     ee8:	|  |   move.l 56(sp),d0
     eec:	|  |   move.l d0,d2
     eee:	|  |   addq.l #4,d2
     ef0:	|  |   move.l d2,56(sp)
     ef4:	|  |   movea.l d1,a0
     ef6:	|  |   move.l (a0),d1
     ef8:	|  |   movea.l d0,a0
     efa:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
     efc:	|  |   addq.l #1,40(sp)
     f00:	|  \-> moveq #9,d0
     f02:	|      cmp.l 40(sp),d0
     f06:	\----- bge.s edc <CstCreateCopperlist+0xe8>

  clpartinstruction = CstClColor;
     f08:	       move.l #98458,52(sp)
  for(int i=0; i<32;i++)
     f10:	       clr.l 36(sp)
     f14:	   /-- bra.s f3a <CstCreateCopperlist+0x146>
    *cl++ = *clpartinstruction++;        
     f16:	/--|-> move.l 52(sp),d1
     f1a:	|  |   move.l d1,d2
     f1c:	|  |   addq.l #4,d2
     f1e:	|  |   move.l d2,52(sp)
     f22:	|  |   move.l 56(sp),d0
     f26:	|  |   move.l d0,d2
     f28:	|  |   addq.l #4,d2
     f2a:	|  |   move.l d2,56(sp)
     f2e:	|  |   movea.l d1,a0
     f30:	|  |   move.l (a0),d1
     f32:	|  |   movea.l d0,a0
     f34:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
     f36:	|  |   addq.l #1,36(sp)
     f3a:	|  \-> moveq #31,d0
     f3c:	|      cmp.l 36(sp),d0
     f40:	\----- bge.s f16 <CstCreateCopperlist+0x122>

  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
     f42:	       moveq #40,d1
     f44:	       cmp.l 64(sp),d1
     f48:	   /-- bge.s fa6 <CstCreateCopperlist+0x1b2>
    int tmp = width - 40;
     f4a:	   |   moveq #-40,d2
     f4c:	   |   add.l 64(sp),d2
     f50:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
     f54:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
     f5a:	   |   move.l 8(sp),d0
     f5e:	   |   move.l d0,d1
     f60:	   |   addq.l #2,d1
     f62:	   |   move.l d1,8(sp)
     f66:	   |   movea.l d0,a0
     f68:	   |   move.w #264,(a0)
    *cw++ = tmp;
     f6c:	   |   move.l 8(sp),d0
     f70:	   |   move.l d0,d1
     f72:	   |   addq.l #2,d1
     f74:	   |   move.l d1,8(sp)
     f78:	   |   move.l 12(sp),d1
     f7c:	   |   movea.l d0,a0
     f7e:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
     f80:	   |   move.l 8(sp),d0
     f84:	   |   move.l d0,d1
     f86:	   |   addq.l #2,d1
     f88:	   |   move.l d1,8(sp)
     f8c:	   |   movea.l d0,a0
     f8e:	   |   move.w #266,(a0)
    *cw++ = tmp;     
     f92:	   |   move.l 8(sp),d0
     f96:	   |   move.l d0,d1
     f98:	   |   addq.l #2,d1
     f9a:	   |   move.l d1,8(sp)
     f9e:	   |   move.l 12(sp),d1
     fa2:	   |   movea.l d0,a0
     fa4:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
     fa6:	   \-> move.l 56(sp),d0
     faa:	       move.l d0,d1
     fac:	       addq.l #4,d1
     fae:	       move.l d1,56(sp)
     fb2:	       moveq #-2,d2
     fb4:	       movea.l d0,a0
     fb6:	       move.l d2,(a0)
  return (UWORD *) retval;  
     fb8:	       move.l 20(sp),d0
}
     fbc:	       move.l (sp)+,d2
     fbe:	       movea.l (sp)+,a6
     fc0:	       lea 52(sp),sp
     fc4:	       rts

00000fc6 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
     fc6:	subq.l #4,sp

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     fc8:	move.l #14675968,(sp)
  /*UBYTE *tmp = DrawCopper;
  DrawCopper = ViewCopper;
  ViewCopper = tmp;*/
  custom->cop1lc = (ULONG) copperlist;
     fce:	move.l 8(sp),d0
     fd2:	movea.l (sp),a0
     fd4:	move.l d0,128(a0)
  //custom->copjmp1 = tmp;
}
     fd8:	nop
     fda:	addq.l #4,sp
     fdc:	rts

00000fde <CstSludgeDisplay>:

void CstSludgeDisplay() {  
}
     fde:	nop
     fe0:	rts

00000fe2 <CstReserveBackdrop>:
  copword[CSTBPL5LOW] = lowword;
  copword[CSTBPL5HIGH] = highword;

}

BOOL CstReserveBackdrop(int width, int height) {
     fe2:	          lea -28(sp),sp
     fe6:	          move.l a6,-(sp)
     fe8:	          move.l d2,-(sp)

  width = width / 8;
     fea:	          move.l 40(sp),d0
     fee:	      /-- bpl.s ff2 <CstReserveBackdrop+0x10>
     ff0:	      |   addq.l #7,d0
     ff2:	      \-> asr.l #3,d0
     ff4:	          move.l d0,40(sp)

  if( width < 40) 
     ff8:	          moveq #39,d0
     ffa:	          cmp.l 40(sp),d0
     ffe:	      /-- blt.s 1014 <CstReserveBackdrop+0x32>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    1000:	      |   pea 1338f <PutChar+0x123>
    1006:	      |   jsr 127a4 <KPrintF>
    100c:	      |   addq.l #4,sp
    return FALSE;
    100e:	      |   clr.w d0
    1010:	/-----|-- bra.w 10de <CstReserveBackdrop+0xfc>
  }  

  CstCopperList = CstCreateCopperlist( width);
    1014:	|     \-> move.l 40(sp),-(sp)
    1018:	|         jsr df4 <CstCreateCopperlist>
    101e:	|         addq.l #4,sp
    1020:	|         move.l d0,19b40 <CstCopperList>
  int size = width*height*5;
    1026:	|         move.l 44(sp),-(sp)
    102a:	|         move.l 44(sp),-(sp)
    102e:	|         jsr 13156 <__mulsi3>
    1034:	|         addq.l #8,sp
    1036:	|         move.l d0,d1
    1038:	|         move.l d1,d0
    103a:	|         add.l d0,d0
    103c:	|         add.l d0,d0
    103e:	|         move.l d0,d2
    1040:	|         add.l d1,d2
    1042:	|         move.l d2,32(sp)
  CstDrawBuffer = AllocVec(size,MEMF_CHIP);
    1046:	|         move.l 32(sp),28(sp)
    104c:	|         moveq #2,d0
    104e:	|         move.l d0,24(sp)
    1052:	|         move.l 19c4c <SysBase>,d0
    1058:	|         movea.l d0,a6
    105a:	|         move.l 28(sp),d0
    105e:	|         move.l 24(sp),d1
    1062:	|         jsr -684(a6)
    1066:	|         move.l d0,20(sp)
    106a:	|         move.l 20(sp),d0
    106e:	|         move.l d0,19b48 <CstDrawBuffer>
  CstViewBuffer = AllocVec(size,MEMF_CHIP);
    1074:	|         move.l 32(sp),16(sp)
    107a:	|         moveq #2,d2
    107c:	|         move.l d2,12(sp)
    1080:	|         move.l 19c4c <SysBase>,d0
    1086:	|         movea.l d0,a6
    1088:	|         move.l 16(sp),d0
    108c:	|         move.l 12(sp),d1
    1090:	|         jsr -684(a6)
    1094:	|         move.l d0,8(sp)
    1098:	|         move.l 8(sp),d0
    109c:	|         move.l d0,19b44 <CstViewBuffer>
  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    10a2:	|         move.l 19b40 <CstCopperList>,d0
    10a8:	|     /-- beq.s 10ba <CstReserveBackdrop+0xd8>
    10aa:	|     |   move.l 19b48 <CstDrawBuffer>,d0
    10b0:	|     +-- beq.s 10ba <CstReserveBackdrop+0xd8>
    10b2:	|     |   move.l 19b44 <CstViewBuffer>,d0
    10b8:	|  /--|-- bne.s 10cc <CstReserveBackdrop+0xea>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    10ba:	|  |  \-> pea 133cd <PutChar+0x161>
    10c0:	|  |      jsr 127a4 <KPrintF>
    10c6:	|  |      addq.l #4,sp
    return FALSE;
    10c8:	|  |      clr.w d0
    10ca:	+--|----- bra.s 10de <CstReserveBackdrop+0xfc>
  }

  CstSetCl( CstCopperList);
    10cc:	|  \----> move.l 19b40 <CstCopperList>,d0
    10d2:	|         move.l d0,-(sp)
    10d4:	|         jsr fc6 <CstSetCl>
    10da:	|         addq.l #4,sp
  return TRUE;
    10dc:	|         moveq #1,d0

}
    10de:	\-------> move.l (sp)+,d2
    10e0:	          movea.l (sp)+,a6
    10e2:	          lea 28(sp),sp
    10e6:	          rts

000010e8 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    10e8:	    lea -12(sp),sp
    10ec:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    10ee:	    move.l 19b48 <CstDrawBuffer>,d0
    10f4:	/-- beq.s 110e <CstFreeBuffer+0x26>
    10f6:	|   move.l 19b48 <CstDrawBuffer>,12(sp)
    10fe:	|   move.l 19c4c <SysBase>,d0
    1104:	|   movea.l d0,a6
    1106:	|   movea.l 12(sp),a1
    110a:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    110e:	\-> move.l 19b44 <CstViewBuffer>,d0
    1114:	/-- beq.s 112e <CstFreeBuffer+0x46>
    1116:	|   move.l 19b44 <CstViewBuffer>,8(sp)
    111e:	|   move.l 19c4c <SysBase>,d0
    1124:	|   movea.l d0,a6
    1126:	|   movea.l 8(sp),a1
    112a:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    112e:	\-> move.l 19b40 <CstCopperList>,d0
    1134:	/-- beq.s 114e <CstFreeBuffer+0x66>
    1136:	|   move.l 19b40 <CstCopperList>,4(sp)
    113e:	|   move.l 19c4c <SysBase>,d0
    1144:	|   movea.l d0,a6
    1146:	|   movea.l 4(sp),a1
    114a:	|   jsr -690(a6)
}
    114e:	\-> nop
    1150:	    movea.l (sp)+,a6
    1152:	    lea 12(sp),sp
    1156:	    rts

00001158 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    1158:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    115c:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    1160:	       tst.l 24(sp)
    1164:	   /-- bge.s 116a <drawLine+0x12>
    1166:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    116a:	   \-> tst.l 28(sp)
    116e:	   /-- bge.s 1174 <drawLine+0x1c>
    1170:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    1174:	   \-> tst.l 32(sp)
    1178:	   /-- bge.s 117e <drawLine+0x26>
    117a:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    117e:	   \-> tst.l 36(sp)
    1182:	   /-- bge.s 1188 <drawLine+0x30>
    1184:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    1188:	   \-> move.l 19ce4 <sceneWidth>,d0
    118e:	       cmp.l 24(sp),d0
    1192:	   /-- bge.s 11a2 <drawLine+0x4a>
    1194:	   |   move.l 19ce4 <sceneWidth>,d0
    119a:	   |   move.l d0,d1
    119c:	   |   subq.l #1,d1
    119e:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    11a2:	   \-> move.l 19ce4 <sceneWidth>,d0
    11a8:	       cmp.l 32(sp),d0
    11ac:	   /-- bge.s 11bc <drawLine+0x64>
    11ae:	   |   move.l 19ce4 <sceneWidth>,d0
    11b4:	   |   move.l d0,d1
    11b6:	   |   subq.l #1,d1
    11b8:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    11bc:	   \-> move.l 19ce8 <sceneHeight>,d0
    11c2:	       cmp.l 28(sp),d0
    11c6:	   /-- bge.s 11d6 <drawLine+0x7e>
    11c8:	   |   move.l 19ce8 <sceneHeight>,d0
    11ce:	   |   move.l d0,d1
    11d0:	   |   subq.l #1,d1
    11d2:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    11d6:	   \-> move.l 19ce8 <sceneHeight>,d0
    11dc:	       cmp.l 36(sp),d0
    11e0:	   /-- bge.s 11f0 <drawLine+0x98>
    11e2:	   |   move.l 19ce8 <sceneHeight>,d0
    11e8:	   |   move.l d0,d1
    11ea:	   |   subq.l #1,d1
    11ec:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    11f0:	   \-> move.l 24(sp),d0
    11f4:	       cmp.l 32(sp),d0
    11f8:	/----- ble.s 1214 <drawLine+0xbc>
		x = x2; 
    11fa:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    1200:	|      tst.w 10(sp)
    1204:	|      seq d0
    1206:	|      neg.b d0
    1208:	|      move.b d0,d0
    120a:	|      andi.w #255,d0
    120e:	|      move.w d0,10(sp)
    1212:	|  /-- bra.s 121a <drawLine+0xc2>
	} else x = x1;
    1214:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    121a:	   \-> move.l 28(sp),d1
    121e:	       cmp.l 36(sp),d1
    1222:	/----- ble.s 123e <drawLine+0xe6>
		y = y2; 
    1224:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    122a:	|      tst.w 10(sp)
    122e:	|      seq d0
    1230:	|      neg.b d0
    1232:	|      move.b d0,d0
    1234:	|      andi.w #255,d0
    1238:	|      move.w d0,10(sp)
    123c:	|  /-- bra.s 1244 <drawLine+0xec>
	} else y = y1;	
    123e:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    1244:	   \-> move.l 32(sp),d0
    1248:	       sub.l 24(sp),d0
    124c:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    1250:	       move.l 6(sp),d0
    1254:	   /-- bpl.s 1258 <drawLine+0x100>
    1256:	   |   neg.l d0
    1258:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    125c:	       move.l 36(sp),d1
    1260:	       sub.l 28(sp),d1
    1264:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    1268:	       move.l 2(sp),d0
    126c:	   /-- bpl.s 1270 <drawLine+0x118>
    126e:	   |   neg.l d0
    1270:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    1274:	       tst.l 6(sp)
    1278:	   /-- bne.s 129c <drawLine+0x144>
		diffX = 1;
    127a:	   |   moveq #1,d0
    127c:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    1280:	   |   move.l 19ce4 <sceneWidth>,d0
    1286:	   |   subq.l #1,d0
    1288:	   |   cmp.l 16(sp),d0
    128c:	   +-- bne.s 129c <drawLine+0x144>
    128e:	   |   move.l 19ce4 <sceneWidth>,d0
    1294:	   |   move.l d0,d1
    1296:	   |   subq.l #2,d1
    1298:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    129c:	   \-> tst.l 2(sp)
    12a0:	   /-- bne.s 12c4 <drawLine+0x16c>
		diffY = 1;
    12a2:	   |   moveq #1,d0
    12a4:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    12a8:	   |   move.l 19ce8 <sceneHeight>,d0
    12ae:	   |   subq.l #1,d0
    12b0:	   |   cmp.l 12(sp),d0
    12b4:	   +-- bne.s 12c4 <drawLine+0x16c>
    12b6:	   |   move.l 19ce8 <sceneHeight>,d0
    12bc:	   |   move.l d0,d1
    12be:	   |   subq.l #2,d1
    12c0:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    12c4:	   \-> pea 133fa <cursors.c.412ac4f3+0xa>
    12ca:	       jsr 127a4 <KPrintF>
    12d0:	       addq.l #4,sp
	
}
    12d2:	       nop
    12d4:	       lea 20(sp),sp
    12d8:	       rts

000012da <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    12da:	                      lea -24(sp),sp
    12de:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    12e0:	                      move.l 19b54 <firstTexture>,d0
    12e6:	/-------------------- beq.w 13c4 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    12ea:	|                     clr.l 24(sp)
    12ee:	|     /-------------- bra.w 13b8 <deleteTextures+0xde>
			BOOL found = FALSE;
    12f2:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    12f6:	|  |  |               move.l 19b54 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    12fe:	|  |  |               movea.l 20(sp),a0
    1302:	|  |  |               move.l (a0),d1
    1304:	|  |  |               move.l 24(sp),d0
    1308:	|  |  |               add.l d0,d0
    130a:	|  |  |               add.l d0,d0
    130c:	|  |  |               movea.l 36(sp),a0
    1310:	|  |  |               adda.l d0,a0
    1312:	|  |  |               move.l (a0),d0
    1314:	|  |  |               cmp.l d1,d0
    1316:	|  |  |  /----------- bne.w 13aa <deleteTextures+0xd0>
				found = TRUE;
    131a:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    1320:	|  |  |  |            movea.l 20(sp),a0
    1324:	|  |  |  |            move.l 12(a0),d0
    1328:	|  |  |  |            move.l d0,19b54 <firstTexture>
				FreeVec(list);
    132e:	|  |  |  |            move.l 20(sp),6(sp)
    1334:	|  |  |  |            move.l 19c4c <SysBase>,d0
    133a:	|  |  |  |            movea.l d0,a6
    133c:	|  |  |  |            movea.l 6(sp),a1
    1340:	|  |  |  |            jsr -690(a6)
				continue;
    1344:	|  |  |  |  /-------- bra.s 13b4 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    1346:	|  |  |  |  |  /----> movea.l 20(sp),a0
    134a:	|  |  |  |  |  |      movea.l 12(a0),a0
    134e:	|  |  |  |  |  |      move.l (a0),d1
    1350:	|  |  |  |  |  |      move.l 24(sp),d0
    1354:	|  |  |  |  |  |      add.l d0,d0
    1356:	|  |  |  |  |  |      add.l d0,d0
    1358:	|  |  |  |  |  |      movea.l 36(sp),a0
    135c:	|  |  |  |  |  |      adda.l d0,a0
    135e:	|  |  |  |  |  |      move.l (a0),d0
    1360:	|  |  |  |  |  |      cmp.l d1,d0
    1362:	|  |  |  |  |  |  /-- bne.s 13a0 <deleteTextures+0xc6>
					found = TRUE;
    1364:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    136a:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    136e:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    1374:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1378:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    137c:	|  |  |  |  |  |  |   move.l 12(a0),d0
    1380:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    1384:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    1388:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    138e:	|  |  |  |  |  |  |   move.l 19c4c <SysBase>,d0
    1394:	|  |  |  |  |  |  |   movea.l d0,a6
    1396:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    139a:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    139e:	|  |  |  |  +--|--|-- bra.s 13b4 <deleteTextures+0xda>
				}
				list = list->next;
    13a0:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    13a4:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    13aa:	|  |  |  \--|--|----> movea.l 20(sp),a0
    13ae:	|  |  |     |  |      move.l 12(a0),d0
    13b2:	|  |  |     |  \----- bne.s 1346 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    13b4:	|  |  |     \-------> addq.l #1,24(sp)
    13b8:	|  |  \-------------> move.l 24(sp),d0
    13bc:	|  |                  cmp.l 32(sp),d0
    13c0:	|  \----------------- bcs.w 12f2 <deleteTextures+0x18>
			}
		}
	}
}
    13c4:	\-------------------> nop
    13c6:	                      movea.l (sp)+,a6
    13c8:	                      lea 24(sp),sp
    13cc:	                      rts

000013ce <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    13ce:	subq.l #4,sp
    13d0:	move.l 8(sp),d0
    13d4:	move.w d0,d0
    13d6:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    13da:	pea 1341d <cursors.c.412ac4f3+0x2d>
    13e0:	jsr 127a4 <KPrintF>
    13e6:	addq.l #4,sp
}
    13e8:	nop
    13ea:	addq.l #4,sp
    13ec:	rts

000013ee <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    13ee:	       moveq #-1,d0
    13f0:	       cmp.l 4(sp),d0
    13f4:	   /-- bne.s 13fa <resourceNameFromNum+0xc>
    13f6:	   |   moveq #0,d0
    13f8:	/--|-- bra.s 1432 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    13fa:	|  \-> move.l 19c28 <numResourceNames>,d0
    1400:	|  /-- bne.s 140a <resourceNameFromNum+0x1c>
    1402:	|  |   move.l #78925,d0
    1408:	+--|-- bra.s 1432 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    140a:	|  \-> move.l 19c28 <numResourceNames>,d0
    1410:	|      cmp.l 4(sp),d0
    1414:	|  /-- ble.s 142c <resourceNameFromNum+0x3e>
    1416:	|  |   move.l 19be4 <allResourceNames>,d1
    141c:	|  |   move.l 4(sp),d0
    1420:	|  |   add.l d0,d0
    1422:	|  |   add.l d0,d0
    1424:	|  |   movea.l d1,a0
    1426:	|  |   adda.l d0,a0
    1428:	|  |   move.l (a0),d0
    142a:	+--|-- bra.s 1432 <resourceNameFromNum+0x44>
	return "Unknown resource";
    142c:	|  \-> move.l #78934,d0
    1432:	\----> rts

00001434 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{	
    1434:	          lea -40(sp),sp
    1438:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    143c:	          move.l #320,19b4c <winWidth>
    winHeight = 256;
    1446:	          move.l #256,19b50 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    1450:	          tst.l 56(sp)
    1454:	      /-- bne.s 146c <main_sludge+0x38>
		bundleFolder = copyString("game/");
    1456:	      |   pea 13467 <cursors.c.412ac4f3+0x77>
    145c:	      |   jsr b8 <copyString>
    1462:	      |   addq.l #4,sp
    1464:	      |   move.l d0,19b64 <bundleFolder>
    146a:	   /--|-- bra.s 1482 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    146c:	   |  \-> movea.l 60(sp),a0
    1470:	   |      move.l (a0),d0
    1472:	   |      move.l d0,-(sp)
    1474:	   |      jsr b8 <copyString>
    147a:	   |      addq.l #4,sp
    147c:	   |      move.l d0,19b64 <bundleFolder>
	}
    
	int lastSlash = -1;
    1482:	   \----> moveq #-1,d0
    1484:	          move.l d0,44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    1488:	          clr.l 40(sp)
    148c:	   /----- bra.s 14ae <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    148e:	/--|----> move.l 19b64 <bundleFolder>,d1
    1494:	|  |      move.l 40(sp),d0
    1498:	|  |      movea.l d1,a0
    149a:	|  |      adda.l d0,a0
    149c:	|  |      move.b (a0),d0
    149e:	|  |      cmpi.b #47,d0
    14a2:	|  |  /-- bne.s 14aa <main_sludge+0x76>
    14a4:	|  |  |   move.l 40(sp),44(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    14aa:	|  |  \-> addq.l #1,40(sp)
    14ae:	|  \----> move.l 19b64 <bundleFolder>,d1
    14b4:	|         move.l 40(sp),d0
    14b8:	|         movea.l d1,a0
    14ba:	|         adda.l d0,a0
    14bc:	|         move.b (a0),d0
    14be:	\-------- bne.s 148e <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    14c0:	          move.l 19b64 <bundleFolder>,d0
    14c6:	          move.l 44(sp),d1
    14ca:	          addq.l #1,d1
    14cc:	          movea.l d0,a0
    14ce:	          adda.l d1,a0
    14d0:	          clr.b (a0)

	if (argc > 1) {
    14d2:	          moveq #1,d0
    14d4:	          cmp.l 56(sp),d0
    14d8:	      /-- bge.s 14f4 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    14da:	      |   move.l 56(sp),d0
    14de:	      |   addi.l #1073741823,d0
    14e4:	      |   add.l d0,d0
    14e6:	      |   add.l d0,d0
    14e8:	      |   movea.l 60(sp),a0
    14ec:	      |   adda.l d0,a0
    14ee:	      |   move.l (a0),48(sp)
    14f2:	   /--|-- bra.s 154e <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    14f4:	   |  \-> move.l 19b64 <bundleFolder>,d0
    14fa:	   |      pea 1346d <cursors.c.412ac4f3+0x7d>
    1500:	   |      move.l d0,-(sp)
    1502:	   |      jsr fc7c <joinStrings>
    1508:	   |      addq.l #8,sp
    150a:	   |      move.l d0,48(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    150e:	   |      move.l 48(sp),-(sp)
    1512:	   |      jsr fb92 <fileExists>
    1518:	   |      addq.l #4,sp
    151a:	   |      tst.b d0
    151c:	   +----- bne.s 154e <main_sludge+0x11a>
			FreeVec(sludgeFile);
    151e:	   |      move.l 48(sp),36(sp)
    1524:	   |      move.l 19c4c <SysBase>,d0
    152a:	   |      movea.l d0,a6
    152c:	   |      movea.l 36(sp),a1
    1530:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    1534:	   |      move.l 19b64 <bundleFolder>,d0
    153a:	   |      pea 1347a <cursors.c.412ac4f3+0x8a>
    1540:	   |      move.l d0,-(sp)
    1542:	   |      jsr fc7c <joinStrings>
    1548:	   |      addq.l #8,sp
    154a:	   |      move.l d0,48(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	if (! fileExists(sludgeFile) ) {	
    154e:	   \----> move.l 48(sp),-(sp)
    1552:	          jsr fb92 <fileExists>
    1558:	          addq.l #4,sp
    155a:	          tst.b d0
    155c:	      /-- bne.s 15a6 <main_sludge+0x172>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    155e:	      |   move.l 19c54 <DOSBase>,d0
    1564:	      |   movea.l d0,a6
    1566:	      |   jsr -60(a6)
    156a:	      |   move.l d0,28(sp)
    156e:	      |   move.l 28(sp),d0
    1572:	      |   move.l d0,24(sp)
    1576:	      |   move.l #78979,20(sp)
    157e:	      |   moveq #21,d0
    1580:	      |   move.l d0,16(sp)
    1584:	      |   move.l 19c54 <DOSBase>,d0
    158a:	      |   movea.l d0,a6
    158c:	      |   move.l 24(sp),d1
    1590:	      |   move.l 20(sp),d2
    1594:	      |   move.l 16(sp),d3
    1598:	      |   jsr -48(a6)
    159c:	      |   move.l d0,12(sp)
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    15a0:	      |   moveq #0,d0
    15a2:	/-----|-- bra.w 1702 <main_sludge+0x2ce>
	}

	setGameFilePath (sludgeFile);	
    15a6:	|     \-> move.l 48(sp),-(sp)
    15aa:	|         jsr 170c <setGameFilePath>
    15b0:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    15b2:	|         move.l 48(sp),-(sp)
    15b6:	|         jsr 2f86 <initSludge>
    15bc:	|         addq.l #4,sp
    15be:	|         tst.w d0
    15c0:	|     /-- bne.s 15c8 <main_sludge+0x194>
    15c2:	|     |   moveq #0,d0
    15c4:	+-----|-- bra.w 1702 <main_sludge+0x2ce>
	
	if( winWidth != 320 || winHeight != 256) {
    15c8:	|     \-> move.l 19b4c <winWidth>,d0
    15ce:	|         cmpi.l #320,d0
    15d4:	|     /-- bne.s 15e4 <main_sludge+0x1b0>
    15d6:	|     |   move.l 19b50 <winHeight>,d0
    15dc:	|     |   cmpi.l #256,d0
    15e2:	|  /--|-- beq.s 1606 <main_sludge+0x1d2>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    15e4:	|  |  \-> pea 13499 <cursors.c.412ac4f3+0xa9>
    15ea:	|  |      jsr 127a4 <KPrintF>
    15f0:	|  |      addq.l #4,sp
		winWidth = 320;
    15f2:	|  |      move.l #320,19b4c <winWidth>
		winHeight = 256;
    15fc:	|  |      move.l #256,19b50 <winHeight>
	}

	if (! resizeBackdrop (winWidth, winHeight)) {
    1606:	|  \----> move.l 19b50 <winHeight>,d0
    160c:	|         move.l d0,d1
    160e:	|         move.l 19b4c <winWidth>,d0
    1614:	|         move.l d1,-(sp)
    1616:	|         move.l d0,-(sp)
    1618:	|         jsr 948e <resizeBackdrop>
    161e:	|         addq.l #8,sp
    1620:	|         tst.w d0
    1622:	|     /-- bne.s 1638 <main_sludge+0x204>
		KPrintF("Couldn't allocate memory for backdrop");
    1624:	|     |   pea 13516 <cursors.c.412ac4f3+0x126>
    162a:	|     |   jsr 127a4 <KPrintF>
    1630:	|     |   addq.l #4,sp
		return FALSE;
    1632:	|     |   moveq #0,d0
    1634:	+-----|-- bra.w 1702 <main_sludge+0x2ce>
	}

	if (! initPeople ())
    1638:	|     \-> jsr 6cd0 <initPeople>
    163e:	|         tst.w d0
    1640:	|     /-- bne.s 1656 <main_sludge+0x222>
	{
		KPrintF("Couldn't initialise people stuff");
    1642:	|     |   pea 1353c <cursors.c.412ac4f3+0x14c>
    1648:	|     |   jsr 127a4 <KPrintF>
    164e:	|     |   addq.l #4,sp
		return FALSE;
    1650:	|     |   moveq #0,d0
    1652:	+-----|-- bra.w 1702 <main_sludge+0x2ce>
	}

	if (! initFloor ())
    1656:	|     \-> jsr 11b4e <initFloor>
    165c:	|         tst.w d0
    165e:	|     /-- bne.s 1674 <main_sludge+0x240>
	{
		KPrintF("Couldn't initialise floor stuff");
    1660:	|     |   pea 1355d <cursors.c.412ac4f3+0x16d>
    1666:	|     |   jsr 127a4 <KPrintF>
    166c:	|     |   addq.l #4,sp
		
		return FALSE;
    166e:	|     |   moveq #0,d0
    1670:	+-----|-- bra.w 1702 <main_sludge+0x2ce>
	}

	if (! initObjectTypes ())
    1674:	|     \-> jsr 963c <initObjectTypes>
    167a:	|         tst.w d0
    167c:	|     /-- bne.s 1690 <main_sludge+0x25c>
	{
		KPrintF("Couldn't initialise object type stuff");
    167e:	|     |   pea 1357d <cursors.c.412ac4f3+0x18d>
    1684:	|     |   jsr 127a4 <KPrintF>
    168a:	|     |   addq.l #4,sp
		return FALSE;
    168c:	|     |   moveq #0,d0
    168e:	+-----|-- bra.s 1702 <main_sludge+0x2ce>
	}

	initSpeech ();
    1690:	|     \-> jsr 531c <initSpeech>
	initStatusBar ();
    1696:	|         jsr 4de0 <initStatusBar>

	gameName = getNumberedString(1);
    169c:	|         pea 1 <_start+0x1>
    16a0:	|         jsr 411e <getNumberedString>
    16a6:	|         addq.l #4,sp
    16a8:	|         move.l d0,19b5c <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    16ae:	|         move.l 19c1c <noStack>,d0
    16b4:	|         pea 1 <_start+0x1>
    16b8:	|         move.l d0,-(sp)
    16ba:	|         clr.l -(sp)
    16bc:	|         clr.l -(sp)
    16be:	|         clr.l -(sp)
    16c0:	|         jsr 3fa6 <startNewFunctionNum>
    16c6:	|         lea 20(sp),sp

	weAreDoneSoQuit = 0;
    16ca:	|         clr.l 19b68 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {		
    16d0:	|     /-- bra.s 16e4 <main_sludge+0x2b0>
		handleInput();
    16d2:	|  /--|-> jsr 2f7e <handleInput>
		sludgeDisplay ();
    16d8:	|  |  |   jsr 3f58 <sludgeDisplay>
		WaitVbl();
    16de:	|  |  |   jsr 126cc <WaitVbl>
	while ( !weAreDoneSoQuit ) {		
    16e4:	|  |  \-> move.l 19b68 <weAreDoneSoQuit>,d0
    16ea:	|  \----- beq.s 16d2 <main_sludge+0x29e>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    16ec:	|         move.l 48(sp),32(sp)
    16f2:	|         move.l 19c4c <SysBase>,d0
    16f8:	|         movea.l d0,a6
    16fa:	|         movea.l 32(sp),a1
    16fe:	|         jsr -690(a6)
}
    1702:	\-------> movem.l (sp)+,d2-d3/a6
    1706:	          lea 40(sp),sp
    170a:	          rts

0000170c <setGameFilePath>:

void setGameFilePath (char * f) {
    170c:	          lea -1104(sp),sp
    1710:	          move.l a6,-(sp)
    1712:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    1714:	          move.l #1112,d0
    171a:	          add.l sp,d0
    171c:	          addi.l #-1102,d0
    1722:	          move.l d0,1100(sp)
    1726:	          move.l #998,1096(sp)
    172e:	          move.l 19c54 <DOSBase>,d0
    1734:	          movea.l d0,a6
    1736:	          move.l 1100(sp),d1
    173a:	          move.l 1096(sp),d2
    173e:	          jsr -564(a6)
    1742:	          move.w d0,1094(sp)
    1746:	          move.w 1094(sp),d0
    174a:	      /-- bne.s 175a <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    174c:	      |   pea 135a3 <cursors.c.412ac4f3+0x1b3>
    1752:	      |   jsr 127a4 <KPrintF>
    1758:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    175a:	      \-> moveq #-1,d0
    175c:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    1760:	          clr.l 1104(sp)
    1764:	   /----- bra.s 1782 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    1766:	/--|----> move.l 1104(sp),d0
    176a:	|  |      movea.l 1116(sp),a0
    176e:	|  |      adda.l d0,a0
    1770:	|  |      move.b (a0),d0
    1772:	|  |      cmpi.b #47,d0
    1776:	|  |  /-- bne.s 177e <setGameFilePath+0x72>
    1778:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    177e:	|  |  \-> addq.l #1,1104(sp)
    1782:	|  \----> move.l 1104(sp),d0
    1786:	|         movea.l 1116(sp),a0
    178a:	|         adda.l d0,a0
    178c:	|         move.b (a0),d0
    178e:	\-------- bne.s 1766 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    1790:	          moveq #-1,d0
    1792:	          cmp.l 1108(sp),d0
    1796:	   /----- beq.s 1810 <setGameFilePath+0x104>
		f[got] = 0;	
    1798:	   |      move.l 1108(sp),d0
    179c:	   |      movea.l 1116(sp),a0
    17a0:	   |      adda.l d0,a0
    17a2:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    17a4:	   |      move.l 1116(sp),1090(sp)
    17aa:	   |      moveq #-2,d0
    17ac:	   |      move.l d0,1086(sp)
    17b0:	   |      move.l 19c54 <DOSBase>,d0
    17b6:	   |      movea.l d0,a6
    17b8:	   |      move.l 1090(sp),d1
    17bc:	   |      move.l 1086(sp),d2
    17c0:	   |      jsr -84(a6)
    17c4:	   |      move.l d0,1082(sp)
    17c8:	   |      move.l 1082(sp),d0
    17cc:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    17d0:	   |      move.l 1078(sp),1074(sp)
    17d6:	   |      move.l 19c54 <DOSBase>,d0
    17dc:	   |      movea.l d0,a6
    17de:	   |      move.l 1074(sp),d1
    17e2:	   |      jsr -126(a6)
    17e6:	   |      move.l d0,1070(sp)
    17ea:	   |      move.l 1070(sp),d0
    17ee:	   |  /-- bne.s 1802 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    17f0:	   |  |   move.l 1116(sp),-(sp)
    17f4:	   |  |   pea 135c9 <cursors.c.412ac4f3+0x1d9>
    17fa:	   |  |   jsr 127a4 <KPrintF>
    1800:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    1802:	   |  \-> move.l 1108(sp),d0
    1806:	   |      movea.l 1116(sp),a0
    180a:	   |      adda.l d0,a0
    180c:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    1810:	   \----> move.l #400,1066(sp)
    1818:	          clr.l 1062(sp)
    181c:	          move.l 19c4c <SysBase>,d0
    1822:	          movea.l d0,a6
    1824:	          move.l 1066(sp),d0
    1828:	          move.l 1062(sp),d1
    182c:	          jsr -684(a6)
    1830:	          move.l d0,1058(sp)
    1834:	          move.l 1058(sp),d0
    1838:	          move.l d0,19b60 <gamePath>
	if (gamePath==0) {
    183e:	          move.l 19b60 <gamePath>,d0
    1844:	      /-- bne.s 1858 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    1846:	      |   pea 135fc <cursors.c.412ac4f3+0x20c>
    184c:	      |   jsr 127a4 <KPrintF>
    1852:	      |   addq.l #4,sp
    1854:	   /--|-- bra.w 1940 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    1858:	   |  \-> move.l 19b60 <gamePath>,1054(sp)
    1860:	   |      moveq #-2,d0
    1862:	   |      move.l d0,1050(sp)
    1866:	   |      move.l 19c54 <DOSBase>,d0
    186c:	   |      movea.l d0,a6
    186e:	   |      move.l 1054(sp),d1
    1872:	   |      move.l 1050(sp),d2
    1876:	   |      jsr -84(a6)
    187a:	   |      move.l d0,1046(sp)
    187e:	   |      move.l 1046(sp),d0
    1882:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    1886:	   |      move.l 1042(sp),1038(sp)
    188c:	   |      move.l 19c54 <DOSBase>,d0
    1892:	   |      movea.l d0,a6
    1894:	   |      move.l 1038(sp),d1
    1898:	   |      jsr -126(a6)
    189c:	   |      move.l d0,1034(sp)
    18a0:	   |      move.l 1034(sp),d0
    18a4:	   |  /-- bne.s 18b4 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    18a6:	   |  |   pea 13637 <cursors.c.412ac4f3+0x247>
    18ac:	   |  |   jsr 127a4 <KPrintF>
    18b2:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    18b4:	   |  \-> move.l #1112,d0
    18ba:	   |      add.l sp,d0
    18bc:	   |      addi.l #-1102,d0
    18c2:	   |      move.l d0,1030(sp)
    18c6:	   |      moveq #-2,d0
    18c8:	   |      move.l d0,1026(sp)
    18cc:	   |      move.l 19c54 <DOSBase>,d0
    18d2:	   |      movea.l d0,a6
    18d4:	   |      move.l 1030(sp),d1
    18d8:	   |      move.l 1026(sp),d2
    18dc:	   |      jsr -84(a6)
    18e0:	   |      move.l d0,1022(sp)
    18e4:	   |      move.l 1022(sp),d0
    18e8:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    18ec:	   |      move.l 1042(sp),1018(sp)
    18f2:	   |      move.l 19c54 <DOSBase>,d0
    18f8:	   |      movea.l d0,a6
    18fa:	   |      move.l 1018(sp),d1
    18fe:	   |      jsr -126(a6)
    1902:	   |      move.l d0,1014(sp)
    1906:	   |      move.l 1014(sp),d0
    190a:	   |  /-- bne.s 1920 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    190c:	   |  |   moveq #10,d0
    190e:	   |  |   add.l sp,d0
    1910:	   |  |   move.l d0,-(sp)
    1912:	   |  |   pea 13663 <cursors.c.412ac4f3+0x273>
    1918:	   |  |   jsr 127a4 <KPrintF>
    191e:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    1920:	   |  \-> move.l 19b60 <gamePath>,d0
    1926:	   +----- beq.s 1940 <setGameFilePath+0x234>
    1928:	   |      move.l 19b60 <gamePath>,1010(sp)
    1930:	   |      move.l 19c4c <SysBase>,d0
    1936:	   |      movea.l d0,a6
    1938:	   |      movea.l 1010(sp),a1
    193c:	   |      jsr -690(a6)
}
    1940:	   \----> move.l (sp)+,d2
    1942:	          movea.l (sp)+,a6
    1944:	          lea 1104(sp),sp
    1948:	          rts

0000194a <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    194a:	    subq.l #4,sp
    194c:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    194e:	    move.l 19bbc <zBuffer+0x50>,d0
    1954:	/-- beq.s 198c <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    1956:	|   pea 19bc0 <zBuffer+0x54>
    195c:	|   pea 1 <_start+0x1>
    1960:	|   jsr 12da <deleteTextures>
    1966:	|   addq.l #8,sp
		zBuffer.texName = 0;
    1968:	|   clr.l 19bc0 <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    196e:	|   move.l 19bbc <zBuffer+0x50>,4(sp)
    1976:	|   move.l 19c4c <SysBase>,d0
    197c:	|   movea.l d0,a6
    197e:	|   movea.l 4(sp),a1
    1982:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    1986:	|   clr.l 19bbc <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    198c:	\-> clr.l 19b74 <zBuffer+0x8>
	zBuffer.originalNum =0;
    1992:	    clr.l 19bb8 <zBuffer+0x4c>
}
    1998:	    nop
    199a:	    movea.l (sp)+,a6
    199c:	    addq.l #4,sp
    199e:	    rts

000019a0 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    19a0:	                         lea -528(sp),sp
    19a4:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    19a8:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    19ac:	                         jsr 194a <killZBuffer>

	zBuffer.originalNum = y;
    19b2:	                         move.l 544(sp),d0
    19b6:	                         move.l d0,19bb8 <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    19bc:	                         move.l 544(sp),d0
    19c0:	                         move.l d0,-(sp)
    19c2:	                         jsr 421c <openFileFromNum>
    19c8:	                         addq.l #4,sp
    19ca:	                         tst.l d0
    19cc:	                     /-- bne.s 19d4 <setZBuffer+0x34>
    19ce:	                     |   clr.w d0
    19d0:	/--------------------|-- bra.w 1db2 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    19d4:	|                    \-> move.l 19c34 <bigDataFile>,524(sp)
    19dc:	|                        move.l 19c54 <DOSBase>,d0
    19e2:	|                        movea.l d0,a6
    19e4:	|                        move.l 524(sp),d1
    19e8:	|                        jsr -306(a6)
    19ec:	|                        move.l d0,520(sp)
    19f0:	|                        move.l 520(sp),d0
    19f4:	|                        moveq #83,d1
    19f6:	|                        cmp.l d0,d1
    19f8:	|                    /-- beq.s 1a5a <setZBuffer+0xba>
    19fa:	|                    |   move.l 19c34 <bigDataFile>,516(sp)
    1a02:	|                    |   move.l 19c54 <DOSBase>,d0
    1a08:	|                    |   movea.l d0,a6
    1a0a:	|                    |   move.l 516(sp),d1
    1a0e:	|                    |   jsr -306(a6)
    1a12:	|                    |   move.l d0,512(sp)
    1a16:	|                    |   move.l 512(sp),d0
    1a1a:	|                    |   moveq #122,d1
    1a1c:	|                    |   cmp.l d0,d1
    1a1e:	|                    +-- beq.s 1a5a <setZBuffer+0xba>
    1a20:	|                    |   move.l 19c34 <bigDataFile>,508(sp)
    1a28:	|                    |   move.l 19c54 <DOSBase>,d0
    1a2e:	|                    |   movea.l d0,a6
    1a30:	|                    |   move.l 508(sp),d1
    1a34:	|                    |   jsr -306(a6)
    1a38:	|                    |   move.l d0,504(sp)
    1a3c:	|                    |   move.l 504(sp),d0
    1a40:	|                    |   moveq #98,d1
    1a42:	|                    |   cmp.l d0,d1
    1a44:	|                    +-- beq.s 1a5a <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    1a46:	|                    |   pea 13695 <cursors.c.412ac4f3+0x2a5>
    1a4c:	|                    |   jsr 127a4 <KPrintF>
    1a52:	|                    |   addq.l #4,sp
		 return FALSE;
    1a54:	|                    |   clr.w d0
    1a56:	+--------------------|-- bra.w 1db2 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    1a5a:	|                    \-> move.l 19c34 <bigDataFile>,500(sp)
    1a62:	|                        move.l 19c54 <DOSBase>,d0
    1a68:	|                        movea.l d0,a6
    1a6a:	|                        move.l 500(sp),d1
    1a6e:	|                        jsr -306(a6)
    1a72:	|                        move.l d0,496(sp)
    1a76:	|                        move.l 496(sp),d0
    1a7a:	|                    /-- beq.s 1a84 <setZBuffer+0xe4>
    1a7c:	|                    |   moveq #1,d1
    1a7e:	|                    |   cmp.l d0,d1
    1a80:	|                 /--|-- beq.s 1a9a <setZBuffer+0xfa>
    1a82:	|              /--|--|-- bra.s 1ac8 <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    1a84:	|              |  |  \-> move.l #640,19b6c <zBuffer>
		zBuffer.height = 480;
    1a8e:	|              |  |      move.l #480,19b70 <zBuffer+0x4>
		break;
    1a98:	|              |  |  /-- bra.s 1adc <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    1a9a:	|              |  \--|-> move.l 19c34 <bigDataFile>,d0
    1aa0:	|              |     |   move.l d0,-(sp)
    1aa2:	|              |     |   jsr 6bc <get2bytes>
    1aa8:	|              |     |   addq.l #4,sp
    1aaa:	|              |     |   move.l d0,19b6c <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    1ab0:	|              |     |   move.l 19c34 <bigDataFile>,d0
    1ab6:	|              |     |   move.l d0,-(sp)
    1ab8:	|              |     |   jsr 6bc <get2bytes>
    1abe:	|              |     |   addq.l #4,sp
    1ac0:	|              |     |   move.l d0,19b70 <zBuffer+0x4>
		break;
    1ac6:	|              |     +-- bra.s 1adc <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    1ac8:	|              \-----|-> pea 136a9 <cursors.c.412ac4f3+0x2b9>
    1ace:	|                    |   jsr 127a4 <KPrintF>
    1ad4:	|                    |   addq.l #4,sp
		return FALSE;
    1ad6:	|                    |   clr.w d0
    1ad8:	+--------------------|-- bra.w 1db2 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    1adc:	|                    \-> move.l 19b6c <zBuffer>,d0
    1ae2:	|                        move.l d0,d1
    1ae4:	|                        move.l 19ce4 <sceneWidth>,d0
    1aea:	|                        cmp.l d1,d0
    1aec:	|                    /-- bne.s 1b00 <setZBuffer+0x160>
    1aee:	|                    |   move.l 19b70 <zBuffer+0x4>,d0
    1af4:	|                    |   move.l d0,d1
    1af6:	|                    |   move.l 19ce8 <sceneHeight>,d0
    1afc:	|                    |   cmp.l d1,d0
    1afe:	|                 /--|-- beq.s 1b50 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    1b00:	|                 |  \-> movea.l 19ce8 <sceneHeight>,a1
    1b06:	|                 |      movea.l 19ce4 <sceneWidth>,a0
    1b0c:	|                 |      move.l 19b70 <zBuffer+0x4>,d1
    1b12:	|                 |      move.l 19b6c <zBuffer>,d0
    1b18:	|                 |      move.l a1,-(sp)
    1b1a:	|                 |      move.l a0,-(sp)
    1b1c:	|                 |      move.l d1,-(sp)
    1b1e:	|                 |      move.l d0,-(sp)
    1b20:	|                 |      pea 136f5 <cursors.c.412ac4f3+0x305>
    1b26:	|                 |      moveq #32,d0
    1b28:	|                 |      add.l sp,d0
    1b2a:	|                 |      move.l d0,-(sp)
    1b2c:	|                 |      jsr ff5a <sprintf>
    1b32:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    1b36:	|                 |      moveq #12,d0
    1b38:	|                 |      add.l sp,d0
    1b3a:	|                 |      move.l d0,-(sp)
    1b3c:	|                 |      pea 13710 <thumbnail.c.7eb31449+0x3>
    1b42:	|                 |      jsr 127a4 <KPrintF>
    1b48:	|                 |      addq.l #8,sp
		return FALSE;
    1b4a:	|                 |      clr.w d0
    1b4c:	+-----------------|----- bra.w 1db2 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    1b50:	|                 \----> move.l 19c34 <bigDataFile>,492(sp)
    1b58:	|                        move.l 19c54 <DOSBase>,d0
    1b5e:	|                        movea.l d0,a6
    1b60:	|                        move.l 492(sp),d1
    1b64:	|                        jsr -306(a6)
    1b68:	|                        move.l d0,488(sp)
    1b6c:	|                        move.l 488(sp),d0
    1b70:	|                        move.l d0,19b74 <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1b76:	|                        clr.l 544(sp)
    1b7a:	|                    /-- bra.s 1ba6 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    1b7c:	|                 /--|-> move.l 19c34 <bigDataFile>,d0
    1b82:	|                 |  |   move.l d0,-(sp)
    1b84:	|                 |  |   jsr 6bc <get2bytes>
    1b8a:	|                 |  |   addq.l #4,sp
    1b8c:	|                 |  |   move.l 544(sp),d1
    1b90:	|                 |  |   add.l d1,d1
    1b92:	|                 |  |   add.l d1,d1
    1b94:	|                 |  |   lea 540(sp),a0
    1b98:	|                 |  |   add.l a0,d1
    1b9a:	|                 |  |   movea.l d1,a0
    1b9c:	|                 |  |   lea -144(a0),a0
    1ba0:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1ba2:	|                 |  |   addq.l #1,544(sp)
    1ba6:	|                 |  \-> move.l 19b74 <zBuffer+0x8>,d0
    1bac:	|                 |      cmp.l 544(sp),d0
    1bb0:	|                 \----- bhi.s 1b7c <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    1bb2:	|                        move.l 19b74 <zBuffer+0x8>,d0
    1bb8:	|                        move.l d0,-(sp)
    1bba:	|                        move.l sp,d0
    1bbc:	|                        addi.l #336,d0
    1bc2:	|                        move.l d0,-(sp)
    1bc4:	|                        move.l sp,d0
    1bc6:	|                        addi.l #404,d0
    1bcc:	|                        move.l d0,-(sp)
    1bce:	|                        jsr 1dbc <sortZPal>
    1bd4:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1bd8:	|                        clr.l 544(sp)
    1bdc:	|                    /-- bra.s 1c54 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    1bde:	|                 /--|-> move.l 544(sp),d0
    1be2:	|                 |  |   add.l d0,d0
    1be4:	|                 |  |   add.l d0,d0
    1be6:	|                 |  |   move.l #540,d1
    1bec:	|                 |  |   add.l sp,d1
    1bee:	|                 |  |   add.l d1,d0
    1bf0:	|                 |  |   movea.l d0,a0
    1bf2:	|                 |  |   lea -208(a0),a0
    1bf6:	|                 |  |   move.l (a0),d0
    1bf8:	|                 |  |   add.l d0,d0
    1bfa:	|                 |  |   add.l d0,d0
    1bfc:	|                 |  |   lea 540(sp),a0
    1c00:	|                 |  |   add.l a0,d0
    1c02:	|                 |  |   movea.l d0,a0
    1c04:	|                 |  |   lea -144(a0),a0
    1c08:	|                 |  |   move.l (a0),d0
    1c0a:	|                 |  |   move.l 544(sp),d1
    1c0e:	|                 |  |   addq.l #3,d1
    1c10:	|                 |  |   add.l d1,d1
    1c12:	|                 |  |   movea.l d1,a1
    1c14:	|                 |  |   adda.l d1,a1
    1c16:	|                 |  |   lea 19b6c <zBuffer>,a0
    1c1c:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    1c20:	|                 |  |   move.l 544(sp),d0
    1c24:	|                 |  |   add.l d0,d0
    1c26:	|                 |  |   add.l d0,d0
    1c28:	|                 |  |   move.l #540,d1
    1c2e:	|                 |  |   add.l sp,d1
    1c30:	|                 |  |   add.l d1,d0
    1c32:	|                 |  |   movea.l d0,a0
    1c34:	|                 |  |   lea -208(a0),a0
    1c38:	|                 |  |   move.l (a0),d1
    1c3a:	|                 |  |   move.l 544(sp),d0
    1c3e:	|                 |  |   add.l d1,d1
    1c40:	|                 |  |   add.l d1,d1
    1c42:	|                 |  |   lea 540(sp),a0
    1c46:	|                 |  |   add.l a0,d1
    1c48:	|                 |  |   movea.l d1,a0
    1c4a:	|                 |  |   lea -272(a0),a0
    1c4e:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    1c50:	|                 |  |   addq.l #1,544(sp)
    1c54:	|                 |  \-> move.l 19b74 <zBuffer+0x8>,d0
    1c5a:	|                 |      cmp.l 544(sp),d0
    1c5e:	|                 \----- bhi.w 1bde <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    1c62:	|                        move.l 19ce4 <sceneWidth>,d0
    1c68:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    1c6c:	|                        move.l 19ce8 <sceneHeight>,d0
    1c72:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    1c76:	|                        move.l 484(sp),-(sp)
    1c7a:	|                        move.l 484(sp),-(sp)
    1c7e:	|                        jsr 13156 <__mulsi3>
    1c84:	|                        addq.l #8,sp
    1c86:	|                        move.l d0,476(sp)
    1c8a:	|                        clr.l 472(sp)
    1c8e:	|                        move.l 19c4c <SysBase>,d0
    1c94:	|                        movea.l d0,a6
    1c96:	|                        move.l 476(sp),d0
    1c9a:	|                        move.l 472(sp),d1
    1c9e:	|                        jsr -684(a6)
    1ca2:	|                        move.l d0,468(sp)
    1ca6:	|                        move.l 468(sp),d0
    1caa:	|                        move.l d0,19bbc <zBuffer+0x50>
	if (!zBuffer.tex) {
    1cb0:	|                        move.l 19bbc <zBuffer+0x50>,d0
    1cb6:	|                    /-- bne.s 1ccc <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    1cb8:	|                    |   pea 1374d <thumbnail.c.7eb31449+0x40>
    1cbe:	|                    |   jsr 127a4 <KPrintF>
    1cc4:	|                    |   addq.l #4,sp
		return FALSE;
    1cc6:	|                    |   clr.w d0
    1cc8:	+--------------------|-- bra.w 1db2 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    1ccc:	|                    \-> clr.l 544(sp)
    1cd0:	|     /----------------- bra.w 1d9c <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    1cd4:	|  /--|----------------> clr.l 536(sp)
    1cd8:	|  |  |     /----------- bra.w 1d88 <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    1cdc:	|  |  |  /--|----------> tst.l 528(sp)
    1ce0:	|  |  |  |  |  /-------- bne.s 1d3e <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    1ce2:	|  |  |  |  |  |         move.l 19c34 <bigDataFile>,464(sp)
    1cea:	|  |  |  |  |  |         move.l 19c54 <DOSBase>,d0
    1cf0:	|  |  |  |  |  |         movea.l d0,a6
    1cf2:	|  |  |  |  |  |         move.l 464(sp),d1
    1cf6:	|  |  |  |  |  |         jsr -306(a6)
    1cfa:	|  |  |  |  |  |         move.l d0,460(sp)
    1cfe:	|  |  |  |  |  |         move.l 460(sp),d0
    1d02:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    1d06:	|  |  |  |  |  |         move.l 532(sp),d0
    1d0a:	|  |  |  |  |  |         asr.l #4,d0
    1d0c:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    1d10:	|  |  |  |  |  |         moveq #15,d0
    1d12:	|  |  |  |  |  |         cmp.l 528(sp),d0
    1d16:	|  |  |  |  |  |  /----- bne.s 1d34 <setZBuffer+0x394>
    1d18:	|  |  |  |  |  |  |      move.l 19c34 <bigDataFile>,d0
    1d1e:	|  |  |  |  |  |  |      move.l d0,-(sp)
    1d20:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    1d26:	|  |  |  |  |  |  |      addq.l #4,sp
    1d28:	|  |  |  |  |  |  |      movea.l d0,a0
    1d2a:	|  |  |  |  |  |  |      lea 16(a0),a0
    1d2e:	|  |  |  |  |  |  |      move.l a0,528(sp)
    1d32:	|  |  |  |  |  |  |  /-- bra.s 1d38 <setZBuffer+0x398>
				else stillToGo ++;
    1d34:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    1d38:	|  |  |  |  |  |     \-> moveq #15,d1
    1d3a:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    1d3e:	|  |  |  |  |  \-------> move.l 532(sp),d0
    1d42:	|  |  |  |  |            add.l d0,d0
    1d44:	|  |  |  |  |            add.l d0,d0
    1d46:	|  |  |  |  |            lea 540(sp),a0
    1d4a:	|  |  |  |  |            add.l a0,d0
    1d4c:	|  |  |  |  |            movea.l d0,a0
    1d4e:	|  |  |  |  |            lea -272(a0),a0
    1d52:	|  |  |  |  |            move.l (a0),d0
    1d54:	|  |  |  |  |            move.l d0,d2
    1d56:	|  |  |  |  |            move.l 19bbc <zBuffer+0x50>,d3
    1d5c:	|  |  |  |  |            move.l 484(sp),d0
    1d60:	|  |  |  |  |            move.l 544(sp),-(sp)
    1d64:	|  |  |  |  |            move.l d0,-(sp)
    1d66:	|  |  |  |  |            jsr 13156 <__mulsi3>
    1d6c:	|  |  |  |  |            addq.l #8,sp
    1d6e:	|  |  |  |  |            move.l d0,d1
    1d70:	|  |  |  |  |            move.l 536(sp),d0
    1d74:	|  |  |  |  |            add.l d1,d0
    1d76:	|  |  |  |  |            movea.l d3,a0
    1d78:	|  |  |  |  |            adda.l d0,a0
    1d7a:	|  |  |  |  |            move.b d2,d0
    1d7c:	|  |  |  |  |            lsl.b #4,d0
    1d7e:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    1d80:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    1d84:	|  |  |  |  |            addq.l #1,536(sp)
    1d88:	|  |  |  |  \----------> move.l 536(sp),d1
    1d8c:	|  |  |  |               move.l 19ce4 <sceneWidth>,d0
    1d92:	|  |  |  |               cmp.l d1,d0
    1d94:	|  |  |  \-------------- bhi.w 1cdc <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    1d98:	|  |  |                  addq.l #1,544(sp)
    1d9c:	|  |  \----------------> move.l 19ce8 <sceneHeight>,d0
    1da2:	|  |                     cmp.l 544(sp),d0
    1da6:	|  \-------------------- bhi.w 1cd4 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    1daa:	|                        jsr 4114 <finishAccess>
	
	return TRUE;
    1db0:	|                        moveq #1,d0
}
    1db2:	\----------------------> movem.l (sp)+,d2-d3/a6
    1db6:	                         lea 528(sp),sp
    1dba:	                         rts

00001dbc <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    1dbc:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    1dbe:	             clr.l 4(sp)
    1dc2:	         /-- bra.s 1dda <sortZPal+0x1e>
		newpal[i] = i;
    1dc4:	      /--|-> move.l 4(sp),d0
    1dc8:	      |  |   add.l d0,d0
    1dca:	      |  |   add.l d0,d0
    1dcc:	      |  |   movea.l 16(sp),a0
    1dd0:	      |  |   adda.l d0,a0
    1dd2:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    1dd6:	      |  |   addq.l #1,4(sp)
    1dda:	      |  \-> move.l 4(sp),d0
    1dde:	      |      cmp.l 20(sp),d0
    1de2:	      \----- blt.s 1dc4 <sortZPal+0x8>
	}

	if (size < 2) return;		
    1de4:	             moveq #1,d0
    1de6:	             cmp.l 20(sp),d0
    1dea:	/----------- bge.w 1e9c <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    1dee:	|            moveq #1,d0
    1df0:	|            move.l d0,4(sp)
    1df4:	|     /----- bra.w 1e8e <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    1df8:	|  /--|----> move.l 4(sp),d0
    1dfc:	|  |  |      add.l d0,d0
    1dfe:	|  |  |      add.l d0,d0
    1e00:	|  |  |      movea.l 16(sp),a0
    1e04:	|  |  |      adda.l d0,a0
    1e06:	|  |  |      move.l (a0),d0
    1e08:	|  |  |      add.l d0,d0
    1e0a:	|  |  |      add.l d0,d0
    1e0c:	|  |  |      movea.l 12(sp),a0
    1e10:	|  |  |      adda.l d0,a0
    1e12:	|  |  |      move.l (a0),d1
    1e14:	|  |  |      move.l 4(sp),d0
    1e18:	|  |  |      addi.l #1073741823,d0
    1e1e:	|  |  |      add.l d0,d0
    1e20:	|  |  |      add.l d0,d0
    1e22:	|  |  |      movea.l 16(sp),a0
    1e26:	|  |  |      adda.l d0,a0
    1e28:	|  |  |      move.l (a0),d0
    1e2a:	|  |  |      add.l d0,d0
    1e2c:	|  |  |      add.l d0,d0
    1e2e:	|  |  |      movea.l 12(sp),a0
    1e32:	|  |  |      adda.l d0,a0
    1e34:	|  |  |      move.l (a0),d0
    1e36:	|  |  |      cmp.l d1,d0
    1e38:	|  |  |  /-- ble.s 1e8a <sortZPal+0xce>
			tmp = newpal[i];
    1e3a:	|  |  |  |   move.l 4(sp),d0
    1e3e:	|  |  |  |   add.l d0,d0
    1e40:	|  |  |  |   add.l d0,d0
    1e42:	|  |  |  |   movea.l 16(sp),a0
    1e46:	|  |  |  |   adda.l d0,a0
    1e48:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    1e4a:	|  |  |  |   move.l 4(sp),d0
    1e4e:	|  |  |  |   addi.l #1073741823,d0
    1e54:	|  |  |  |   add.l d0,d0
    1e56:	|  |  |  |   add.l d0,d0
    1e58:	|  |  |  |   movea.l 16(sp),a1
    1e5c:	|  |  |  |   adda.l d0,a1
    1e5e:	|  |  |  |   move.l 4(sp),d0
    1e62:	|  |  |  |   add.l d0,d0
    1e64:	|  |  |  |   add.l d0,d0
    1e66:	|  |  |  |   movea.l 16(sp),a0
    1e6a:	|  |  |  |   adda.l d0,a0
    1e6c:	|  |  |  |   move.l (a1),d0
    1e6e:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    1e70:	|  |  |  |   move.l 4(sp),d0
    1e74:	|  |  |  |   addi.l #1073741823,d0
    1e7a:	|  |  |  |   add.l d0,d0
    1e7c:	|  |  |  |   add.l d0,d0
    1e7e:	|  |  |  |   movea.l 16(sp),a0
    1e82:	|  |  |  |   adda.l d0,a0
    1e84:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    1e86:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    1e8a:	|  |  |  \-> addq.l #1,4(sp)
    1e8e:	|  |  \----> move.l 4(sp),d0
    1e92:	|  |         cmp.l 20(sp),d0
    1e96:	|  \-------- blt.w 1df8 <sortZPal+0x3c>
    1e9a:	|        /-- bra.s 1e9e <sortZPal+0xe2>
	if (size < 2) return;		
    1e9c:	\--------|-> nop
		}
	}
    1e9e:	         \-> addq.l #8,sp
    1ea0:	             rts

00001ea2 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    1ea2:	/-------> lea -16(sp),sp
    1ea6:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    1ea8:	|         move.l 24(sp),-(sp)
    1eac:	|         jsr 3d3a <pauseFunction>
    1eb2:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    1eb4:	|     /-- bra.s 1ec6 <abortFunction+0x24>
    1eb6:	|  /--|-> moveq #24,d0
    1eb8:	|  |  |   add.l 24(sp),d0
    1ebc:	|  |  |   move.l d0,-(sp)
    1ebe:	|  |  |   jsr 110d4 <trimStack>
    1ec4:	|  |  |   addq.l #4,sp
    1ec6:	|  |  \-> movea.l 24(sp),a0
    1eca:	|  |      move.l 24(a0),d0
    1ece:	|  \----- bne.s 1eb6 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    1ed0:	|         movea.l 24(sp),a0
    1ed4:	|         move.l 4(a0),12(sp)
    1eda:	|         move.l 19c4c <SysBase>,d0
    1ee0:	|         movea.l d0,a6
    1ee2:	|         movea.l 12(sp),a1
    1ee6:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    1eea:	|         clr.l 16(sp)
    1eee:	|     /-- bra.s 1f0e <abortFunction+0x6c>
    1ef0:	|  /--|-> movea.l 24(sp),a0
    1ef4:	|  |  |   move.l 20(a0),d1
    1ef8:	|  |  |   move.l 16(sp),d0
    1efc:	|  |  |   lsl.l #3,d0
    1efe:	|  |  |   add.l d1,d0
    1f00:	|  |  |   move.l d0,-(sp)
    1f02:	|  |  |   jsr 1099e <unlinkVar>
    1f08:	|  |  |   addq.l #4,sp
    1f0a:	|  |  |   addq.l #1,16(sp)
    1f0e:	|  |  \-> movea.l 24(sp),a0
    1f12:	|  |      move.l 8(a0),d0
    1f16:	|  |      cmp.l 16(sp),d0
    1f1a:	|  \----- bgt.s 1ef0 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    1f1c:	|         movea.l 24(sp),a0
    1f20:	|         move.l 20(a0),8(sp)
    1f26:	|         move.l 19c4c <SysBase>,d0
    1f2c:	|         movea.l d0,a6
    1f2e:	|         movea.l 8(sp),a1
    1f32:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    1f36:	|         moveq #28,d0
    1f38:	|         add.l 24(sp),d0
    1f3c:	|         move.l d0,-(sp)
    1f3e:	|         jsr 1099e <unlinkVar>
    1f44:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    1f46:	|         movea.l 24(sp),a0
    1f4a:	|         move.l 40(a0),d0
    1f4e:	|     /-- beq.s 1f60 <abortFunction+0xbe>
    1f50:	|     |   movea.l 24(sp),a0
    1f54:	|     |   move.l 40(a0),d0
    1f58:	|     |   move.l d0,-(sp)
    1f5a:	\-----|-- jsr 1ea2 <abortFunction>(pc)
    1f5e:	      |   addq.l #4,sp
	FreeVec(fun);
    1f60:	      \-> move.l 24(sp),4(sp)
    1f66:	          move.l 19c4c <SysBase>,d0
    1f6c:	          movea.l d0,a6
    1f6e:	          movea.l 4(sp),a1
    1f72:	          jsr -690(a6)
	fun = NULL;
    1f76:	          clr.l 24(sp)
}
    1f7a:	          nop
    1f7c:	          movea.l (sp)+,a6
    1f7e:	          lea 16(sp),sp
    1f82:	          rts

00001f84 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    1f84:	          subq.l #8,sp
	int n = 0;
    1f86:	          clr.l 4(sp)
	*killedMyself = FALSE;
    1f8a:	          movea.l 20(sp),a0
    1f8e:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    1f90:	          move.l 19be8 <allRunningFunctions>,(sp)
	while (fun) {
    1f96:	   /----- bra.s 1fc4 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    1f98:	/--|----> movea.l (sp),a0
    1f9a:	|  |      move.l (a0),d0
    1f9c:	|  |      cmp.l 12(sp),d0
    1fa0:	|  |  /-- bne.s 1fbe <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    1fa2:	|  |  |   movea.l (sp),a0
    1fa4:	|  |  |   move.w #1,54(a0)
			n++;
    1faa:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    1fae:	|  |  |   move.l (sp),d0
    1fb0:	|  |  |   cmp.l 16(sp),d0
    1fb4:	|  |  +-- bne.s 1fbe <cancelAFunction+0x3a>
    1fb6:	|  |  |   movea.l 20(sp),a0
    1fba:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    1fbe:	|  |  \-> movea.l (sp),a0
    1fc0:	|  |      move.l 44(a0),(sp)
	while (fun) {
    1fc4:	|  \----> tst.l (sp)
    1fc6:	\-------- bne.s 1f98 <cancelAFunction+0x14>
	}
	return n;
    1fc8:	          move.l 4(sp),d0
}
    1fcc:	          addq.l #8,sp
    1fce:	          rts

00001fd0 <completeTimers>:


void completeTimers () {
    1fd0:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    1fd2:	          move.l 19be8 <allRunningFunctions>,(sp)

	while (thisFunction) {
    1fd8:	   /----- bra.s 1fee <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    1fda:	/--|----> movea.l (sp),a0
    1fdc:	|  |      move.b 56(a0),d0
    1fe0:	|  |  /-- bne.s 1fe8 <completeTimers+0x18>
    1fe2:	|  |  |   movea.l (sp),a0
    1fe4:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    1fe8:	|  |  \-> movea.l (sp),a0
    1fea:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    1fee:	|  \----> tst.l (sp)
    1ff0:	\-------- bne.s 1fda <completeTimers+0xa>
	}
}
    1ff2:	          nop
    1ff4:	          nop
    1ff6:	          addq.l #4,sp
    1ff8:	          rts

00001ffa <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    1ffa:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    1ffe:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    2004:	                                                             movea.l 80(sp),a0
    2008:	                                                             move.w 54(a0),d0
    200c:	/----------------------------------------------------------- beq.w 2e9a <continueFunction+0xea0>
		abortFunction (fun);
    2010:	|                                                            move.l 80(sp),-(sp)
    2014:	|                                                            jsr 1ea2 <abortFunction>
    201a:	|                                                            addq.l #4,sp
		return TRUE;
    201c:	|                                                            moveq #1,d0
    201e:	|  /-------------------------------------------------------- bra.w 2ea4 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    2022:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    2028:	|  |  |                                                      movea.l 80(sp),a0
    202c:	|  |  |                                                      move.l 4(a0),d1
    2030:	|  |  |                                                      movea.l 80(sp),a0
    2034:	|  |  |                                                      move.l 36(a0),d0
    2038:	|  |  |                                                      lsl.l #3,d0
    203a:	|  |  |                                                      movea.l d1,a0
    203c:	|  |  |                                                      adda.l d0,a0
    203e:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    2044:	|  |  |                                                      movea.l 80(sp),a0
    2048:	|  |  |                                                      move.l 4(a0),d1
    204c:	|  |  |                                                      movea.l 80(sp),a0
    2050:	|  |  |                                                      move.l 36(a0),d0
    2054:	|  |  |                                                      lsl.l #3,d0
    2056:	|  |  |                                                      movea.l d1,a0
    2058:	|  |  |                                                      adda.l d0,a0
    205a:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    205e:	|  |  |                                                      moveq #41,d0
    2060:	|  |  |                                                      cmp.l 64(sp),d0
    2064:	|  |  |  /-------------------------------------------------- bcs.w 2e4e <continueFunction+0xe54>
    2068:	|  |  |  |                                                   move.l 64(sp),d0
    206c:	|  |  |  |                                                   add.l d0,d0
    206e:	|  |  |  |                                                   movea.l d0,a0
    2070:	|  |  |  |                                                   adda.l #8316,a0
    2076:	|  |  |  |                                                   move.w (a0),d0
    2078:	|  |  |  |                                                   jmp (207c <continueFunction+0x82>,pc,d0.w)
    207c:	|  |  |  |                                                   bset d6,(a2)
    207e:	|  |  |  |                                                   ori.w #2670,(a4)
    2082:	|  |  |  |                                                   eori.w #2416,d6
    2086:	|  |  |  |                                                   bchg d4,d2
    2088:	|  |  |  |                                                   bclr d4,(a4)+
    208a:	|  |  |  |                                                   andi.l #181013194,d4
    2090:	|  |  |  |                                                   .short 0x0aca
    2092:	|  |  |  |                                                   .short 0x0aca
    2094:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    209c:	|  |  |  |                                                   .short 0x0aca
    209e:	|  |  |  |                                                   andi.w #906,-(a4)
    20a2:	|  |  |  |                                                   bchg d1,196(a2)
    20a6:	|  |  |  |                                                   bset d1,580(a4)
    20aa:	|  |  |  |                                                   bclr d1,2576(a2)
    20ae:	|  |  |  |                                                   andi.b #-56,2762(a2)
    20b4:	|  |  |  |                                                   .short 0x0aca
    20b6:	|  |  |  |                                                   eori.l #63572682,d0
    20bc:	|  |  |  |                                                   .short 0x0aca
    20be:	|  |  |  |                                                   bchg d3,-(a2)
    20c0:	|  |  |  |                                                   bchg #-36,(a2)
    20c4:	|  |  |  |                                                   .short 0x08cc
    20c6:	|  |  |  |                                                   addi.b #14,1038(a0)
    20cc:	|  |  |  |                                                   .short 0x040e
    20ce:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    20d2:	|  |  |  |                                                   ori.w #8232,(a0)
    20d6:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    20dc:	|  |  |  |                                                   ori.w #12136,(a0)
    20e0:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    20e6:	|  |  |  |                                                   ori.w #12328,(a0)
    20ea:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    20f0:	|  |  |  |                                                   add.l 44(sp),d1
    20f4:	|  |  |  |                                                   moveq #28,d0
    20f6:	|  |  |  |                                                   add.l 80(sp),d0
    20fa:	|  |  |  |                                                   move.l d1,-(sp)
    20fc:	|  |  |  |                                                   move.l d0,-(sp)
    20fe:	|  |  |  |                                                   jsr 10c0a <copyVariable>
    2104:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    2106:	|  |  |  |                                                   move.l 80(sp),-(sp)
    210a:	|  |  |  |                                                   jsr 2eaa <finishFunction>
    2110:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    2112:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    2118:	|  |  |  |                                                   move.l 80(sp),-(sp)
    211c:	|  |  |  |                                                   jsr 3d7c <restartFunction>
    2122:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    2124:	|  |  |  |  /----------------------------------------------- bra.w 2e82 <continueFunction+0xe88>
				finishFunction (fun);
    2128:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    212c:	|  |  |  |  |                                                jsr 2eaa <finishFunction>
    2132:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    2134:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    2138:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    213c:	|  |  |  |  +----------------------------------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    2140:	|  |  |  |  |                                                movea.l 80(sp),a0
    2144:	|  |  |  |  |                                                move.l 28(a0),d0
    2148:	|  |  |  |  |                                                moveq #2,d1
    214a:	|  |  |  |  |                                                cmp.l d0,d1
    214c:	|  |  |  |  |                                            /-- beq.s 2158 <continueFunction+0x15e>
    214e:	|  |  |  |  |                                            |   moveq #4,d1
    2150:	|  |  |  |  |                                            |   cmp.l d0,d1
    2152:	|  |  |  |  |                                         /--|-- beq.s 21a6 <continueFunction+0x1ac>
    2154:	|  |  |  |  |                                /--------|--|-- bra.w 228e <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    2158:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    215c:	|  |  |  |  |                                |        |      jsr 3d3a <pauseFunction>
    2162:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    2164:	|  |  |  |  |                                |        |      moveq #24,d0
    2166:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    216a:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    216e:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    2172:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    2176:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    2178:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    217c:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    2180:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    2182:	|  |  |  |  |                                |        |      jsr 3fa6 <startNewFunctionNum>
    2188:	|  |  |  |  |                                |        |      lea 20(sp),sp
    218c:	|  |  |  |  |                                |        |      tst.l d0
    218e:	|  |  |  |  |                                |        |  /-- bne.s 2196 <continueFunction+0x19c>
    2190:	|  |  |  |  |                                |        |  |   clr.w d0
    2192:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 2ea4 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    2196:	|  |  |  |  |                                |        |  \-> move.l 19be8 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    219e:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    21a2:	|  |  |  |  |                                |  /-----|----- bra.w 22a2 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    21a6:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    21aa:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    21ae:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    21b2:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    21b6:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    21b8:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    21ba:	|  |  |  |  |                                |  |            jsr f44e <callBuiltIn>
    21c0:	|  |  |  |  |                                |  |            lea 12(sp),sp
    21c4:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    21c8:	|  |  |  |  |                                |  |            moveq #5,d0
    21ca:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    21ce:	|  |  |  |  |                                |  |  /-------- bcs.w 228a <continueFunction+0x290>
    21d2:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    21d6:	|  |  |  |  |                                |  |  |         add.l d0,d0
    21d8:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    21da:	|  |  |  |  |                                |  |  |         adda.l #8678,a0
    21e0:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    21e2:	|  |  |  |  |                                |  |  |         jmp (21e6 <continueFunction+0x1ec>,pc,d0.w)
    21e6:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    21ec:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    21f0:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    21f6:	|  |  |  |  |                                |  |  |         move.w (-71,a0,d4.l:8),1(a3)
    21fc:	|  |  |  |  |                                |  |  |         move.l -(a4),(-113,a3,d5.l)
							return FALSE;
    2200:	|  |  |  |  |                                |  |  |         clr.w d0
    2202:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 2ea4 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    2206:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    220a:	|  |  |  |  |                                |  |  |         jsr 3d3a <pauseFunction>
    2210:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    2212:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    2216:	|  |  |  |  |                                |  |  |  /----- bra.s 228c <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    2218:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    221c:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    2220:	|  |  |  |  |                                |  |  |  +----- bra.s 228c <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    2222:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    2226:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    222c:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    222e:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    2232:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    2236:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    223a:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    223c:	|  |  |  |  |                                |  |  |  |      jsr 11042 <setVariable>
    2242:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    2246:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    224a:	|  |  |  |  |                                |  |  |  |      jsr 3d3a <pauseFunction>
    2250:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    2252:	|  |  |  |  |                                |  |  |  |      move.l 19c1c <noStack>,d1
    2258:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    225c:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    225e:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    2260:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    2264:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    2266:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    2268:	|  |  |  |  |                                |  |  |  |      jsr 3fa6 <startNewFunctionNum>
    226e:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    2272:	|  |  |  |  |                                |  |  |  |      tst.l d0
    2274:	|  |  |  |  |                                |  |  |  |  /-- bne.s 227c <continueFunction+0x282>
    2276:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    2278:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 2ea4 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    227c:	|  |  |  |  |                                |  |  |  |  \-> move.l 19be8 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    2284:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    2288:	|  |  |  |  |                                |  |  |  +----- bra.s 228c <continueFunction+0x292>

						default:
						break;
    228a:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    228c:	|  |  |  |  |                                |  +-----\----X bra.s 22a2 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    228e:	|  |  |  |  |                                \--|----------> pea 137bb <thumbnail.c.7eb31449+0xae>
    2294:	|  |  |  |  |                                   |            jsr 127a4 <KPrintF>
    229a:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    229c:	|  |  |  |  |                                   |            clr.w d0
    229e:	|  +--|--|--|-----------------------------------|----------- bra.w 2ea4 <continueFunction+0xeaa>
			}
			break;
    22a2:	|  |  |  |  +-----------------------------------\----------X bra.w 2e82 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    22a6:	|  |  |  |  |                                                moveq #28,d0
    22a8:	|  |  |  |  |                                                add.l 80(sp),d0
    22ac:	|  |  |  |  |                                                clr.l -(sp)
    22ae:	|  |  |  |  |                                                clr.l -(sp)
    22b0:	|  |  |  |  |                                                move.l d0,-(sp)
    22b2:	|  |  |  |  |                                                jsr 11042 <setVariable>
    22b8:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    22bc:	|  |  |  |  +----------------------------------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    22c0:	|  |  |  |  |                                                move.l 68(sp),d1
    22c4:	|  |  |  |  |                                                moveq #28,d0
    22c6:	|  |  |  |  |                                                add.l 80(sp),d0
    22ca:	|  |  |  |  |                                                move.l d1,-(sp)
    22cc:	|  |  |  |  |                                                pea 5 <_start+0x5>
    22d0:	|  |  |  |  |                                                move.l d0,-(sp)
    22d2:	|  |  |  |  |                                                jsr 11042 <setVariable>
    22d8:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    22dc:	|  |  |  |  +----------------------------------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    22e0:	|  |  |  |  |                                                move.l 68(sp),d1
    22e4:	|  |  |  |  |                                                moveq #28,d0
    22e6:	|  |  |  |  |                                                add.l 80(sp),d0
    22ea:	|  |  |  |  |                                                move.l d1,-(sp)
    22ec:	|  |  |  |  |                                                pea 1 <_start+0x1>
    22f0:	|  |  |  |  |                                                move.l d0,-(sp)
    22f2:	|  |  |  |  |                                                jsr 11042 <setVariable>
    22f8:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    22fc:	|  |  |  |  +----------------------------------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    2300:	|  |  |  |  |                                                moveq #28,d0
    2302:	|  |  |  |  |                                                add.l 80(sp),d0
    2306:	|  |  |  |  |                                                movea.l 80(sp),a0
    230a:	|  |  |  |  |                                                movea.l 20(a0),a0
    230e:	|  |  |  |  |                                                move.l 68(sp),d1
    2312:	|  |  |  |  |                                                lsl.l #3,d1
    2314:	|  |  |  |  |                                                add.l a0,d1
    2316:	|  |  |  |  |                                                move.l d0,-(sp)
    2318:	|  |  |  |  |                                                move.l d1,-(sp)
    231a:	|  |  |  |  |                                                jsr 10c0a <copyVariable>
    2320:	|  |  |  |  |                                                addq.l #8,sp
    2322:	|  |  |  |  |                                                tst.w d0
    2324:	|  |  |  |  |  /-------------------------------------------- bne.w 2e60 <continueFunction+0xe66>
    2328:	|  |  |  |  |  |                                             clr.w d0
    232a:	|  +--|--|--|--|-------------------------------------------- bra.w 2ea4 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    232e:	|  |  |  |  |  |                                             moveq #28,d0
    2330:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2334:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2336:	|  |  |  |  |  |                                             jsr 10c90 <getBoolean>
    233c:	|  |  |  |  |  |                                             addq.l #4,sp
    233e:	|  |  |  |  |  |                                             tst.w d0
    2340:	|  |  |  |  |  |                                      /----- beq.s 235c <continueFunction+0x362>
    2342:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    2346:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    234a:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    234c:	|  |  |  |  |  |                                      |      jsr 10c90 <getBoolean>
    2352:	|  |  |  |  |  |                                      |      addq.l #4,sp
    2354:	|  |  |  |  |  |                                      |      tst.w d0
    2356:	|  |  |  |  |  |                                      +----- beq.s 235c <continueFunction+0x362>
    2358:	|  |  |  |  |  |                                      |      moveq #1,d0
    235a:	|  |  |  |  |  |                                      |  /-- bra.s 235e <continueFunction+0x364>
    235c:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    235e:	|  |  |  |  |  |                                         \-> moveq #28,d1
    2360:	|  |  |  |  |  |                                             add.l 80(sp),d1
    2364:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2366:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    236a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    236c:	|  |  |  |  |  |                                             jsr 11042 <setVariable>
    2372:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    2376:	|  |  |  |  |  |                                             moveq #24,d0
    2378:	|  |  |  |  |  |                                             add.l 80(sp),d0
    237c:	|  |  |  |  |  |                                             move.l d0,-(sp)
    237e:	|  |  |  |  |  |                                             jsr 110d4 <trimStack>
    2384:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    2386:	|  |  |  |  +--|-------------------------------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    238a:	|  |  |  |  |  |                                             moveq #28,d0
    238c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2390:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2392:	|  |  |  |  |  |                                             jsr 10c90 <getBoolean>
    2398:	|  |  |  |  |  |                                             addq.l #4,sp
    239a:	|  |  |  |  |  |                                             tst.w d0
    239c:	|  |  |  |  |  |                                         /-- bne.s 23b4 <continueFunction+0x3ba>
    239e:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    23a2:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    23a6:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    23a8:	|  |  |  |  |  |                                         |   jsr 10c90 <getBoolean>
    23ae:	|  |  |  |  |  |                                         |   addq.l #4,sp
    23b0:	|  |  |  |  |  |                                         |   tst.w d0
    23b2:	|  |  |  |  |  |                                      /--|-- beq.s 23b8 <continueFunction+0x3be>
    23b4:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    23b6:	|  |  |  |  |  |                                      |  /-- bra.s 23ba <continueFunction+0x3c0>
    23b8:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    23ba:	|  |  |  |  |  |                                         \-> moveq #28,d1
    23bc:	|  |  |  |  |  |                                             add.l 80(sp),d1
    23c0:	|  |  |  |  |  |                                             move.l d0,-(sp)
    23c2:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    23c6:	|  |  |  |  |  |                                             move.l d1,-(sp)
    23c8:	|  |  |  |  |  |                                             jsr 11042 <setVariable>
    23ce:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    23d2:	|  |  |  |  |  |                                             moveq #24,d0
    23d4:	|  |  |  |  |  |                                             add.l 80(sp),d0
    23d8:	|  |  |  |  |  |                                             move.l d0,-(sp)
    23da:	|  |  |  |  |  |                                             jsr 110d4 <trimStack>
    23e0:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    23e2:	|  |  |  |  +--|-------------------------------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    23e6:	|  |  |  |  |  |                                             move.l 68(sp),d1
    23ea:	|  |  |  |  |  |                                             moveq #28,d0
    23ec:	|  |  |  |  |  |                                             add.l 80(sp),d0
    23f0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    23f2:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    23f6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    23f8:	|  |  |  |  |  |                                             jsr 11042 <setVariable>
    23fe:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2402:	|  |  |  |  +--|-------------------------------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    2406:	|  |  |  |  |  |                                             move.l 68(sp),d1
    240a:	|  |  |  |  |  |                                             moveq #28,d0
    240c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2410:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2412:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    2416:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2418:	|  |  |  |  |  |                                             jsr 11042 <setVariable>
    241e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2422:	|  |  |  |  +--|-------------------------------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    2426:	|  |  |  |  |  |                                             move.l 68(sp),d1
    242a:	|  |  |  |  |  |                                             moveq #28,d0
    242c:	|  |  |  |  |  |                                             add.l 80(sp),d0
    2430:	|  |  |  |  |  |                                             move.l d1,-(sp)
    2432:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    2436:	|  |  |  |  |  |                                             move.l d0,-(sp)
    2438:	|  |  |  |  |  |                                             jsr 11042 <setVariable>
    243e:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    2442:	|  |  |  |  +--|-------------------------------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    2446:	|  |  |  |  |  |                                             move.l 19b58 <dialogValue>,d0
    244c:	|  |  |  |  |  |                                             moveq #1,d1
    244e:	|  |  |  |  |  |                                             cmp.l d0,d1
    2450:	|  |  |  |  |  |  /----------------------------------------- beq.w 2e64 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    2454:	|  |  |  |  |  |  |                                          pea 137d0 <thumbnail.c.7eb31449+0xc3>
    245a:	|  |  |  |  |  |  |                                          jsr 127a4 <KPrintF>
    2460:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    2462:	|  |  |  |  |  |  |                                          clr.w d0
    2464:	|  +--|--|--|--|--|----------------------------------------- bra.w 2ea4 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    2468:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    246c:	|  |  |  |  |  |  |                                          moveq #28,d0
    246e:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    2472:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    2474:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    2476:	|  |  |  |  |  |  |                                          jsr 107d4 <loadStringToVar>
    247c:	|  |  |  |  |  |  |                                          addq.l #8,sp
    247e:	|  |  |  |  |  |  |                                          tst.w d0
    2480:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 2e68 <continueFunction+0xe6e>
					return FALSE;
    2484:	|  |  |  |  |  |  |  |                                       clr.w d0
    2486:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 2ea4 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    248a:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    248e:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    2492:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    2494:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    2496:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    2498:	|  |  |  |  |  |  |  |                                /----- beq.s 24f6 <continueFunction+0x4fc>
    249a:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    249c:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    249e:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 268a <continueFunction+0x690>
    24a2:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    24a4:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 24b0 <continueFunction+0x4b6>
    24a6:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    24a8:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    24aa:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 24f6 <continueFunction+0x4fc>
    24ac:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 268a <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    24b0:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    24b2:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    24b6:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 24e2 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    24b8:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    24ba:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    24be:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    24c0:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    24c2:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    24c4:	|  |  |  |  |  |  |  |              |                 |  |   jsr 11042 <setVariable>
    24ca:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    24ce:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    24d0:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    24d4:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    24d6:	|  |  |  |  |  |  |  |              |                 |  |   jsr 110d4 <trimStack>
    24dc:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    24de:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 26a0 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    24e2:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 13811 <thumbnail.c.7eb31449+0x104>
    24e8:	|  |  |  |  |  |  |  |              |  |              |      jsr 127a4 <KPrintF>
    24ee:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    24f0:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    24f2:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 2ea4 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    24f6:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    24fa:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    24fe:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    2502:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    2504:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 251a <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    2506:	|  |  |  |  |  |  |  |              |  |                 |   pea 1384d <custom.c.87151361+0xc>
    250c:	|  |  |  |  |  |  |  |              |  |                 |   jsr 127a4 <KPrintF>
    2512:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    2514:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    2516:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 2ea4 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    251a:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    251c:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    2520:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    2522:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    2526:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    252a:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    252c:	|  |  |  |  |  |  |  |              |  |                     jsr 10750 <getValueType>
    2532:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    2536:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    2538:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2540 <continueFunction+0x546>
    253a:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    253c:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 2ea4 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2540:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    2544:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    2548:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    254a:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    254c:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    254e:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 2570 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    2550:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    2554:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    2556:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    255a:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    255e:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    2562:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    2564:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    2566:	|  |  |  |  |  |  |  |              |  |                 |   jsr 103da <fastArrayGetByIndex>
    256c:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    256e:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 2590 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    2570:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    2574:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    2576:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    257a:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    257e:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    2582:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    2584:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    2586:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    2588:	|  |  |  |  |  |  |  |              |  |              |      jsr 11064 <stackGetByIndex>
    258e:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    2590:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    2594:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    2596:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    259a:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    259c:	|  |  |  |  |  |  |  |              |  |                     jsr 110d4 <trimStack>
    25a2:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    25a4:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    25a8:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 25c4 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    25aa:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    25ac:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    25b0:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    25b2:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    25b4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    25b6:	|  |  |  |  |  |  |  |              |  |                 |   jsr 11042 <setVariable>
    25bc:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    25c0:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 269e <continueFunction+0x6a4>
    25c4:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    25c6:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    25ca:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 25d8 <continueFunction+0x5de>
    25cc:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    25ce:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    25d2:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 2622 <continueFunction+0x628>
    25d4:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 266a <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    25d8:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    25dc:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    25e0:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    25e4:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    25e6:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 10750 <getValueType>
    25ec:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    25f0:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    25f2:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 25fa <continueFunction+0x600>
    25f4:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    25f6:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 2684 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    25fa:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    25fc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    25fe:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    2602:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    2604:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    2608:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    260a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 11042 <setVariable>
    2610:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    2614:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    2616:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    2618:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    261c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    2620:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 2688 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    2622:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    2626:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    262a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    262e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    2630:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 10750 <getValueType>
    2636:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    263a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    263c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 2642 <continueFunction+0x648>
    263e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    2640:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 2684 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    2642:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    2644:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    2646:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    264a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    264c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    2650:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    2652:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 11042 <setVariable>
    2658:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    265c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    265e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    2660:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    2664:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    2668:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 2688 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    266a:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    266c:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    2670:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    2672:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    2676:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 10c0a <copyVariable>
    267c:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    267e:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    2680:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 269e <continueFunction+0x6a4>
    2682:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    2684:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 2ea4 <continueFunction+0xeaa>
				break;
    2688:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 269e <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    268a:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 1386b <custom.c.87151361+0x2a>
    2690:	|  |  |  |  |  |  |  |                 |  |                  jsr 127a4 <KPrintF>
    2696:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    2698:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    269a:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 2ea4 <continueFunction+0xeaa>
				break;
    269e:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    26a0:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 2e82 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    26a4:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    26a8:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    26ac:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    26ae:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    26b0:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    26b2:	|  |  |  |  |  |  |  |                                   /-- beq.s 26c0 <continueFunction+0x6c6>
    26b4:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    26b6:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    26b8:	|  |  |  |  |  |  |  |                                /--|-- beq.w 276c <continueFunction+0x772>
    26bc:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 27ca <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    26c0:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    26c4:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    26c8:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    26cc:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    26ce:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 26e4 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    26d0:	|  |  |  |  |  |  |  |                             |  |  |   pea 1384d <custom.c.87151361+0xc>
    26d6:	|  |  |  |  |  |  |  |                             |  |  |   jsr 127a4 <KPrintF>
    26dc:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    26de:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    26e0:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2ea4 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    26e4:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    26e6:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    26ea:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    26ec:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    26f0:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    26f4:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    26f6:	|  |  |  |  |  |  |  |                             |  |      jsr 10750 <getValueType>
    26fc:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    2700:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    2702:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 270a <continueFunction+0x710>
    2704:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2706:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2ea4 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    270a:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    270e:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2712:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    2716:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    2718:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    271c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    271e:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    2722:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    2726:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    272a:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    272c:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    272e:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    2730:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    2732:	|  |  |  |  |  |  |  |                             |  |      jsr 3f62 <stackSetByIndex>
    2738:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    273c:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    273e:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 2746 <continueFunction+0x74c>
						return FALSE;
    2740:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    2742:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 2ea4 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    2746:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    2748:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    274c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    274e:	|  |  |  |  |  |  |  |                             |  |      jsr 110d4 <trimStack>
    2754:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    2756:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    2758:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    275c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    275e:	|  |  |  |  |  |  |  |                             |  |      jsr 110d4 <trimStack>
    2764:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    2766:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    2768:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 2e82 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    276c:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    276e:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    2772:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    2774:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    2778:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    277c:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    277e:	|  |  |  |  |  |  |  |                             |         jsr 10750 <getValueType>
    2784:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    2788:	|  |  |  |  |  |  |  |                             |         tst.w d0
    278a:	|  |  |  |  |  |  |  |                             |     /-- bne.s 2792 <continueFunction+0x798>
    278c:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    278e:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 2ea4 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    2792:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    2796:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    2798:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    279c:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    27a0:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    27a4:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    27a6:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    27a8:	|  |  |  |  |  |  |  |                             |         jsr 103da <fastArrayGetByIndex>
    27ae:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    27b0:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    27b4:	|  |  |  |  |  |  |  |                             |     /-- bne.s 27c4 <continueFunction+0x7ca>
    27b6:	|  |  |  |  |  |  |  |                             |     |   pea 1388f <custom.c.87151361+0x4e>
    27bc:	|  |  |  |  |  |  |  |                             |     |   jsr 127a4 <KPrintF>
    27c2:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    27c4:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    27c6:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 2ea4 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    27ca:	|  |  |  |  |  |  |  |                             \-------> pea 1386b <custom.c.87151361+0x2a>
    27d0:	|  |  |  |  |  |  |  |                                       jsr 127a4 <KPrintF>
    27d6:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    27d8:	|  |  |  |  |  |  |  |                                       clr.w d0
    27da:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 2ea4 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    27de:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    27e2:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    27e6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    27ea:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    27ec:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    27ee:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    27f0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    27f4:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    27f8:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    27fa:	|  |  |  |  |  |  |  |                                       jsr 10750 <getValueType>
    2800:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    2804:	|  |  |  |  |  |  |  |                                       tst.w d0
    2806:	|  |  |  |  |  |  |  |                                   /-- bne.s 280e <continueFunction+0x814>
    2808:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    280a:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2ea4 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    280e:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    2812:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2814:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2818:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    281a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    281e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2820:	|  |  |  |  |  |  |  |                                       jsr 11042 <setVariable>
    2826:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    282a:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    282e:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2830:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    2832:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2836:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    283a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    283e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2840:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2842:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2844:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2848:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    284a:	|  |  |  |  |  |  |  |                                       jsr 11042 <setVariable>
    2850:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2854:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2858:	|  |  |  |  |  |  |  |                                       move.l 19bfe <globalVars>,d1
    285e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2862:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2864:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2866:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2868:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    286c:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    2870:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2872:	|  |  |  |  |  |  |  |                                       jsr 10750 <getValueType>
    2878:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    287c:	|  |  |  |  |  |  |  |                                       tst.w d0
    287e:	|  |  |  |  |  |  |  |                                   /-- bne.s 2886 <continueFunction+0x88c>
    2880:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2882:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2ea4 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    2886:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    288a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    288c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2890:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2892:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2896:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2898:	|  |  |  |  |  |  |  |                                       jsr 11042 <setVariable>
    289e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    28a2:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    28a6:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    28a8:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    28aa:	|  |  |  |  |  |  |  |                                       movea.l 19bfe <globalVars>,a0
    28b0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    28b4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    28b6:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    28b8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    28ba:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    28be:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    28c0:	|  |  |  |  |  |  |  |                                       jsr 11042 <setVariable>
    28c6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    28ca:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    28ce:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    28d2:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    28d6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    28da:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    28dc:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    28de:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    28e0:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    28e4:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    28e8:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    28ea:	|  |  |  |  |  |  |  |                                       jsr 10750 <getValueType>
    28f0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    28f4:	|  |  |  |  |  |  |  |                                       tst.w d0
    28f6:	|  |  |  |  |  |  |  |                                   /-- bne.s 28fe <continueFunction+0x904>
    28f8:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    28fa:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2ea4 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    28fe:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    2902:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    2904:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2908:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    290a:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    290e:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2910:	|  |  |  |  |  |  |  |                                       jsr 11042 <setVariable>
    2916:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    291a:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    291e:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2920:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    2922:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    2926:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    292a:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    292e:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2930:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    2932:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2934:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2938:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    293a:	|  |  |  |  |  |  |  |                                       jsr 11042 <setVariable>
    2940:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    2944:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    2948:	|  |  |  |  |  |  |  |                                       move.l 19bfe <globalVars>,d1
    294e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    2952:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    2954:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    2956:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2958:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    295c:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    2960:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    2962:	|  |  |  |  |  |  |  |                                       jsr 10750 <getValueType>
    2968:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    296c:	|  |  |  |  |  |  |  |                                       tst.w d0
    296e:	|  |  |  |  |  |  |  |                                   /-- bne.s 2976 <continueFunction+0x97c>
    2970:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    2972:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 2ea4 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    2976:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    297a:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    297c:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    2980:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    2982:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    2986:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    2988:	|  |  |  |  |  |  |  |                                       jsr 11042 <setVariable>
    298e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    2992:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    2996:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    2998:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    299a:	|  |  |  |  |  |  |  |                                       movea.l 19bfe <globalVars>,a0
    29a0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    29a4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    29a6:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    29a8:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    29aa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    29ae:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    29b0:	|  |  |  |  |  |  |  |                                       jsr 11042 <setVariable>
    29b6:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    29ba:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    29be:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    29c2:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    29c6:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    29ca:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    29cc:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    29ce:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    29d0:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    29d4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    29d6:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    29d8:	|  |  |  |  |  |  |  |                                       jsr 10c0a <copyVariable>
    29de:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    29e0:	|  |  |  |  |  |  |  |                                       tst.w d0
    29e2:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 2e6c <continueFunction+0xe72>
    29e6:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    29e8:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 2ea4 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    29ec:	|  |  |  |  |  |  |  |  |                                    move.l 19bfe <globalVars>,d1
    29f2:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    29f6:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    29f8:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    29fa:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    29fc:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    2a00:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    2a02:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    2a04:	|  |  |  |  |  |  |  |  |                                    jsr 10c0a <copyVariable>
    2a0a:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    2a0c:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    2a0e:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 2e70 <continueFunction+0xe76>
    2a12:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    2a14:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 2ea4 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    2a18:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    2a1a:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    2a1e:	|  |  |  |  |  |  |  |  |  |                                 movea.l 19bfe <globalVars>,a0
    2a24:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    2a28:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    2a2a:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    2a2c:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    2a2e:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    2a30:	|  |  |  |  |  |  |  |  |  |                                 jsr 10c0a <copyVariable>
    2a36:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    2a38:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    2a3a:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 2e74 <continueFunction+0xe7a>
    2a3e:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    2a40:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 2ea4 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    2a44:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    2a46:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    2a4a:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    2a4c:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    2a50:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    2a52:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    2a54:	|  |  |  |  |  |  |  |  |  |  |                              jsr ff8c <addVarToStack>
    2a5a:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    2a5c:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    2a5e:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 2e78 <continueFunction+0xe7e>
    2a62:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    2a64:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 2ea4 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    2a68:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    2a6a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    2a6e:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    2a70:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    2a74:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    2a76:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    2a78:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 10012 <addVarToStackQuick>
    2a7e:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    2a80:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    2a82:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 2e7c <continueFunction+0xe82>
    2a86:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    2a88:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 2ea4 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    2a8c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2a8e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2a92:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2a94:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 10c90 <getBoolean>
    2a9a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2a9c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2a9e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    2aa0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    2aa2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    2aa4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    2aa6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2aa8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2aac:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    2aae:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    2ab2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2ab4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 11042 <setVariable>
    2aba:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    2abe:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    2ac2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    2ac4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    2ac8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    2aca:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 10c90 <getBoolean>
    2ad0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    2ad2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    2ad4:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 2e80 <continueFunction+0xe86>
				advanceNow = FALSE;
    2ad8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    2adc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2ae0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    2ae6:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 2e80 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    2aea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    2aee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2af2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    2af8:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 2e82 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    2afc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    2afe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2b02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    2b04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    2b08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    2b0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    2b0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 10750 <getValueType>
    2b14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    2b18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    2b1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 2b22 <continueFunction+0xb28>
    2b1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    2b1e:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 2ea4 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    2b22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    2b26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    2b28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    2b2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    2b2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    2b30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    2b32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    2b36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    2b38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 11042 <setVariable>
    2b3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    2b42:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 2e82 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    2b46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    2b4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    2b4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 2e38 <continueFunction+0xe3e>
    2b52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    2b54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    2b58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 2bd4 <continueFunction+0xbda>
    2b5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    2b5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    2b60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 2c1e <continueFunction+0xc24>
    2b64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    2b66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    2b6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 2b78 <continueFunction+0xb7e>
    2b6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    2b6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    2b72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 2ba6 <continueFunction+0xbac>
    2b74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 2c1e <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    2b78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    2b7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    2b7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    2b82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    2b86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    2b88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    2b8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 10086 <addVariablesInSecond>
    2b90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    2b92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    2b94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    2b98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    2b9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 110d4 <trimStack>
    2ba0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    2ba2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 2e4c <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    2ba6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    2ba8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    2bac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    2bb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    2bb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2bb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    2bb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 10144 <compareVariablesInSecond>
    2bbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    2bc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    2bc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    2bc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    2bc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 110d4 <trimStack>
    2bce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    2bd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 2e4c <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    2bd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    2bd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    2bda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2bde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    2be2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    2be4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    2be6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 10144 <compareVariablesInSecond>
    2bec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    2bee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    2bf0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    2bf4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    2bf6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 110d4 <trimStack>
    2bfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    2bfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2c02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    2c06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    2c08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    2c0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    2c0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    2c12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    2c16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    2c1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 2e4c <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    2c1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    2c22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    2c26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2c28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    2c2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    2c30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    2c32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10750 <getValueType>
    2c38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    2c3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    2c3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 2c46 <continueFunction+0xc4c>
    2c40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    2c42:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 2ea4 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    2c46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    2c48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    2c4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2c4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    2c52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    2c56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    2c58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 10750 <getValueType>
    2c5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    2c62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    2c64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 2c6c <continueFunction+0xc72>
    2c66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    2c68:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 2ea4 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    2c6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    2c6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    2c72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    2c74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 110d4 <trimStack>
    2c7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    2c7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    2c7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    2c82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    2c84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    2c86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 2e4a <continueFunction+0xe50>
    2c8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    2c8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    2c8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #11418,a0
    2c94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    2c96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (2c9a <continueFunction+0xca0>,pc,d0.w)
    2c9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    2c9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    2ca0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2ca8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    2caa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2cb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    2cba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    2cc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    2cca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2cce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2cd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2cd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2cd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13156 <__mulsi3>
    2cdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2cde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2ce0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2ce2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2ce6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2ce8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2cec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2cee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11042 <setVariable>
    2cf4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2cf8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2e4c <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    2cfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2d00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2d04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    2d06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2d08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2d0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2d0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2d12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2d14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11042 <setVariable>
    2d1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2d1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2e4c <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    2d22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2d26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2d2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2d2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2d2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 13202 <__modsi3>
    2d34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2d36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2d38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2d3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2d3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2d40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2d44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2d46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11042 <setVariable>
    2d4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2d50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2e4c <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    2d54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    2d58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    2d5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2d5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2d60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 131d4 <__divsi3>
    2d66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    2d68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    2d6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2d6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2d70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2d72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2d76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2d78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11042 <setVariable>
    2d7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2d82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2e4c <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    2d86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2d8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2d8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2d90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    2d92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2d94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2d96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2d98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2d9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2d9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2da0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2da4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2da6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11042 <setVariable>
    2dac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2db0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 2e4c <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    2db4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2db8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2dbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2dbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    2dc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2dc2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2dc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2dc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2dc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2dcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2dce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2dd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2dd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11042 <setVariable>
    2dda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2dde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2e4c <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    2de0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2de4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2de8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2dea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    2dec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2dee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2df0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2df2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2df4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2df8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2dfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2dfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2e00:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11042 <setVariable>
    2e06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2e0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2e4c <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    2e0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    2e10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    2e14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    2e16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    2e18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    2e1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    2e1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    2e1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    2e20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    2e24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    2e26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    2e2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    2e2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 11042 <setVariable>
    2e32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    2e36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 2e4c <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    2e38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 138b0 <custom.c.87151361+0x6f>
    2e3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 127a4 <KPrintF>
    2e44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    2e46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    2e48:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 2ea4 <continueFunction+0xeaa>
						break;
    2e4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    2e4c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 2e82 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    2e4e:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 138c8 <custom.c.87151361+0x87>
    2e54:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 127a4 <KPrintF>
    2e5a:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    2e5c:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    2e5e:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 2ea4 <continueFunction+0xeaa>
			break;
    2e60:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    2e62:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 2e82 <continueFunction+0xe88>
			break;
    2e64:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    2e66:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 2e82 <continueFunction+0xe88>
			break;
    2e68:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    2e6a:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 2e82 <continueFunction+0xe88>
			break;
    2e6c:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    2e6e:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 2e82 <continueFunction+0xe88>
			break;
    2e70:	|  |  |     |              \--|--|--|--|-------------------> nop
    2e72:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 2e82 <continueFunction+0xe88>
			break;
    2e74:	|  |  |     |                 \--|--|--|-------------------> nop
    2e76:	|  |  |     +--------------------|--|--|-------------------- bra.s 2e82 <continueFunction+0xe88>
			break;
    2e78:	|  |  |     |                    \--|--|-------------------> nop
    2e7a:	|  |  |     +-----------------------|--|-------------------- bra.s 2e82 <continueFunction+0xe88>
			break;
    2e7c:	|  |  |     |                       \--|-------------------> nop
    2e7e:	|  |  |     +--------------------------|-------------------- bra.s 2e82 <continueFunction+0xe88>
			break;
    2e80:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    2e82:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    2e86:	+--|--|----------------------------------------------------- beq.s 2e9a <continueFunction+0xea0>
    2e88:	|  |  |                                                      movea.l 80(sp),a0
    2e8c:	|  |  |                                                      move.l 36(a0),d0
    2e90:	|  |  |                                                      addq.l #1,d0
    2e92:	|  |  |                                                      movea.l 80(sp),a0
    2e96:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    2e9a:	\--|--|----------------------------------------------------> tst.w 74(sp)
    2e9e:	   |  \----------------------------------------------------- bne.w 2022 <continueFunction+0x28>

	}
	return TRUE;
    2ea2:	   |                                                         moveq #1,d0
}
    2ea4:	   \-------------------------------------------------------> lea 76(sp),sp
    2ea8:	                                                             rts

00002eaa <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    2eaa:	       lea -16(sp),sp
    2eae:	       move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    2eb0:	       move.l 24(sp),-(sp)
    2eb4:	       jsr 3d3a <pauseFunction>
    2eba:	       addq.l #4,sp
	if (fun -> stack) 
    2ebc:	       movea.l 24(sp),a0
    2ec0:	       move.l 24(a0),d0
    2ec4:	   /-- beq.s 2eda <finishFunction+0x30>
		KPrintF("finishfunction:", ERROR_NON_EMPTY_STACK);
    2ec6:	   |   pea 138f4 <custom.c.87151361+0xb3>
    2ecc:	   |   pea 13921 <custom.c.87151361+0xe0>
    2ed2:	   |   jsr 127a4 <KPrintF>
    2ed8:	   |   addq.l #8,sp
	FreeVec( fun -> compiledLines);
    2eda:	   \-> movea.l 24(sp),a0
    2ede:	       move.l 4(a0),12(sp)
    2ee4:	       move.l 19c4c <SysBase>,d0
    2eea:	       movea.l d0,a6
    2eec:	       movea.l 12(sp),a1
    2ef0:	       jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    2ef4:	       clr.l 16(sp)
    2ef8:	   /-- bra.s 2f18 <finishFunction+0x6e>
    2efa:	/--|-> movea.l 24(sp),a0
    2efe:	|  |   move.l 20(a0),d1
    2f02:	|  |   move.l 16(sp),d0
    2f06:	|  |   lsl.l #3,d0
    2f08:	|  |   add.l d1,d0
    2f0a:	|  |   move.l d0,-(sp)
    2f0c:	|  |   jsr 1099e <unlinkVar>
    2f12:	|  |   addq.l #4,sp
    2f14:	|  |   addq.l #1,16(sp)
    2f18:	|  \-> movea.l 24(sp),a0
    2f1c:	|      move.l 8(a0),d0
    2f20:	|      cmp.l 16(sp),d0
    2f24:	\----- bgt.s 2efa <finishFunction+0x50>
	if( fun->numLocals > 0) {
    2f26:	       movea.l 24(sp),a0
    2f2a:	       move.l 8(a0),d0
    2f2e:	   /-- ble.s 2f4a <finishFunction+0xa0>
		FreeVec(fun -> localVars);
    2f30:	   |   movea.l 24(sp),a0
    2f34:	   |   move.l 20(a0),8(sp)
    2f3a:	   |   move.l 19c4c <SysBase>,d0
    2f40:	   |   movea.l d0,a6
    2f42:	   |   movea.l 8(sp),a1
    2f46:	   |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    2f4a:	   \-> moveq #28,d0
    2f4c:	       add.l 24(sp),d0
    2f50:	       move.l d0,-(sp)
    2f52:	       jsr 1099e <unlinkVar>
    2f58:	       addq.l #4,sp
	FreeVec(fun);
    2f5a:	       move.l 24(sp),4(sp)
    2f60:	       move.l 19c4c <SysBase>,d0
    2f66:	       movea.l d0,a6
    2f68:	       movea.l 4(sp),a1
    2f6c:	       jsr -690(a6)
	fun = NULL;
    2f70:	       clr.l 24(sp)
}
    2f74:	       nop
    2f76:	       movea.l (sp)+,a6
    2f78:	       lea 16(sp),sp
    2f7c:	       rts

00002f7e <handleInput>:

BOOL handleInput () {
	//Amiga Todo: Actually handle input
	return runSludge ();
    2f7e:	jsr 3d96 <runSludge>
}
    2f84:	rts

00002f86 <initSludge>:

BOOL initSludge (char * filename) {
    2f86:	             lea -296(sp),sp
    2f8a:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    2f8e:	             clr.l 312(sp)
	mouseCursorAnim = makeNullAnim ();
    2f92:	             jsr 7076 <makeNullAnim>
    2f98:	             move.l d0,19b2c <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    2f9e:	             pea 19bfa <gameVersion>
    2fa4:	             pea 13931 <custom.c.87151361+0xf0>
    2faa:	             pea 45 <_start+0x45>
    2fae:	             pea 47 <_start+0x47>
    2fb2:	             move.l 336(sp),-(sp)
    2fb6:	             jsr 39ca <openAndVerify>
    2fbc:	             lea 20(sp),sp
    2fc0:	             move.l d0,292(sp)
	if (! fp) return FALSE;
    2fc4:	         /-- bne.s 2fcc <initSludge+0x46>
    2fc6:	         |   clr.w d0
    2fc8:	/--------|-- bra.w 36ea <initSludge+0x764>
	if (FGetC (fp)) {
    2fcc:	|        \-> move.l 292(sp),288(sp)
    2fd2:	|            move.l 19c54 <DOSBase>,d0
    2fd8:	|            movea.l d0,a6
    2fda:	|            move.l 288(sp),d1
    2fde:	|            jsr -306(a6)
    2fe2:	|            move.l d0,284(sp)
    2fe6:	|            move.l 284(sp),d0
    2fea:	|  /-------- beq.w 3190 <initSludge+0x20a>
		numBIFNames = get2bytes (fp);
    2fee:	|  |         move.l 292(sp),-(sp)
    2ff2:	|  |         jsr 6bc <get2bytes>
    2ff8:	|  |         addq.l #4,sp
    2ffa:	|  |         move.l d0,19c20 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    3000:	|  |         move.l 19c20 <numBIFNames>,d0
    3006:	|  |         move.l d0,280(sp)
    300a:	|  |         clr.l 276(sp)
    300e:	|  |         move.l 19c4c <SysBase>,d0
    3014:	|  |         movea.l d0,a6
    3016:	|  |         move.l 280(sp),d0
    301a:	|  |         move.l 276(sp),d1
    301e:	|  |         jsr -684(a6)
    3022:	|  |         move.l d0,272(sp)
    3026:	|  |         move.l 272(sp),d0
    302a:	|  |         move.l d0,19be0 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    3030:	|  |         move.l 19be0 <allBIFNames>,d0
    3036:	|  |     /-- bne.s 303e <initSludge+0xb8>
    3038:	|  |     |   clr.w d0
    303a:	+--|-----|-- bra.w 36ea <initSludge+0x764>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    303e:	|  |     \-> clr.l 308(sp)
    3042:	|  |     /-- bra.s 3068 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    3044:	|  |  /--|-> move.l 19be0 <allBIFNames>,d1
    304a:	|  |  |  |   move.l 308(sp),d0
    304e:	|  |  |  |   add.l d0,d0
    3050:	|  |  |  |   add.l d0,d0
    3052:	|  |  |  |   movea.l d1,a2
    3054:	|  |  |  |   adda.l d0,a2
    3056:	|  |  |  |   move.l 292(sp),-(sp)
    305a:	|  |  |  |   jsr b02 <readString>
    3060:	|  |  |  |   addq.l #4,sp
    3062:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    3064:	|  |  |  |   addq.l #1,308(sp)
    3068:	|  |  |  \-> move.l 19c20 <numBIFNames>,d0
    306e:	|  |  |      cmp.l 308(sp),d0
    3072:	|  |  \----- bgt.s 3044 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    3074:	|  |         move.l 292(sp),-(sp)
    3078:	|  |         jsr 6bc <get2bytes>
    307e:	|  |         addq.l #4,sp
    3080:	|  |         move.l d0,19c2c <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    3086:	|  |         move.l 19c2c <numUserFunc>,d0
    308c:	|  |         move.l d0,268(sp)
    3090:	|  |         clr.l 264(sp)
    3094:	|  |         move.l 19c4c <SysBase>,d0
    309a:	|  |         movea.l d0,a6
    309c:	|  |         move.l 268(sp),d0
    30a0:	|  |         move.l 264(sp),d1
    30a4:	|  |         jsr -684(a6)
    30a8:	|  |         move.l d0,260(sp)
    30ac:	|  |         move.l 260(sp),d0
    30b0:	|  |         move.l d0,19bec <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    30b6:	|  |         move.l 19bec <allUserFunc>,d0
    30bc:	|  |     /-- bne.s 30c4 <initSludge+0x13e>
    30be:	|  |     |   clr.w d0
    30c0:	+--|-----|-- bra.w 36ea <initSludge+0x764>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    30c4:	|  |     \-> clr.l 304(sp)
    30c8:	|  |     /-- bra.s 30ee <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    30ca:	|  |  /--|-> move.l 19bec <allUserFunc>,d1
    30d0:	|  |  |  |   move.l 304(sp),d0
    30d4:	|  |  |  |   add.l d0,d0
    30d6:	|  |  |  |   add.l d0,d0
    30d8:	|  |  |  |   movea.l d1,a2
    30da:	|  |  |  |   adda.l d0,a2
    30dc:	|  |  |  |   move.l 292(sp),-(sp)
    30e0:	|  |  |  |   jsr b02 <readString>
    30e6:	|  |  |  |   addq.l #4,sp
    30e8:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    30ea:	|  |  |  |   addq.l #1,304(sp)
    30ee:	|  |  |  \-> move.l 19c2c <numUserFunc>,d0
    30f4:	|  |  |      cmp.l 304(sp),d0
    30f8:	|  |  \----- bgt.s 30ca <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    30fa:	|  |         move.l 19bfa <gameVersion>,d0
    3100:	|  |         cmpi.l #258,d0
    3106:	|  +-------- ble.w 3190 <initSludge+0x20a>
			numResourceNames = get2bytes (fp);
    310a:	|  |         move.l 292(sp),-(sp)
    310e:	|  |         jsr 6bc <get2bytes>
    3114:	|  |         addq.l #4,sp
    3116:	|  |         move.l d0,19c28 <numResourceNames>
			allResourceNames = AllocVec(numResourceNames,MEMF_ANY);
    311c:	|  |         move.l 19c28 <numResourceNames>,d0
    3122:	|  |         move.l d0,256(sp)
    3126:	|  |         clr.l 252(sp)
    312a:	|  |         move.l 19c4c <SysBase>,d0
    3130:	|  |         movea.l d0,a6
    3132:	|  |         move.l 256(sp),d0
    3136:	|  |         move.l 252(sp),d1
    313a:	|  |         jsr -684(a6)
    313e:	|  |         move.l d0,248(sp)
    3142:	|  |         move.l 248(sp),d0
    3146:	|  |         move.l d0,19be4 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    314c:	|  |         move.l 19be4 <allResourceNames>,d0
    3152:	|  |     /-- bne.s 315a <initSludge+0x1d4>
    3154:	|  |     |   clr.w d0
    3156:	+--|-----|-- bra.w 36ea <initSludge+0x764>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    315a:	|  |     \-> clr.l 300(sp)
    315e:	|  |     /-- bra.s 3184 <initSludge+0x1fe>
				allResourceNames[fn] =  (char *) readString (fp);
    3160:	|  |  /--|-> move.l 19be4 <allResourceNames>,d1
    3166:	|  |  |  |   move.l 300(sp),d0
    316a:	|  |  |  |   add.l d0,d0
    316c:	|  |  |  |   add.l d0,d0
    316e:	|  |  |  |   movea.l d1,a2
    3170:	|  |  |  |   adda.l d0,a2
    3172:	|  |  |  |   move.l 292(sp),-(sp)
    3176:	|  |  |  |   jsr b02 <readString>
    317c:	|  |  |  |   addq.l #4,sp
    317e:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    3180:	|  |  |  |   addq.l #1,300(sp)
    3184:	|  |  |  \-> move.l 19c28 <numResourceNames>,d0
    318a:	|  |  |      cmp.l 300(sp),d0
    318e:	|  |  \----- bgt.s 3160 <initSludge+0x1da>
			}
		}
	}
	winWidth = get2bytes (fp);
    3190:	|  \-------> move.l 292(sp),-(sp)
    3194:	|            jsr 6bc <get2bytes>
    319a:	|            addq.l #4,sp
    319c:	|            move.l d0,19b4c <winWidth>
	winHeight = get2bytes (fp);
    31a2:	|            move.l 292(sp),-(sp)
    31a6:	|            jsr 6bc <get2bytes>
    31ac:	|            addq.l #4,sp
    31ae:	|            move.l d0,19b50 <winHeight>
	specialSettings = FGetC (fp);
    31b4:	|            move.l 292(sp),244(sp)
    31ba:	|            move.l 19c54 <DOSBase>,d0
    31c0:	|            movea.l d0,a6
    31c2:	|            move.l 244(sp),d1
    31c6:	|            jsr -306(a6)
    31ca:	|            move.l d0,240(sp)
    31ce:	|            move.l 240(sp),d0
    31d2:	|            move.l d0,19c30 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    31d8:	|            move.l 292(sp),236(sp)
    31de:	|            move.l 19c54 <DOSBase>,d0
    31e4:	|            movea.l d0,a6
    31e6:	|            move.l 236(sp),d1
    31ea:	|            jsr -306(a6)
    31ee:	|            move.l d0,232(sp)
    31f2:	|            move.l 232(sp),d0
    31f6:	|            move.l d0,-(sp)
    31f8:	|            pea 3e8 <encodeFilename+0xea>
    31fc:	|            jsr 131d4 <__divsi3>
    3202:	|            addq.l #8,sp
    3204:	|            move.l d0,1813a <desiredfps>

	FreeVec(readString (fp));
    320a:	|            move.l 292(sp),-(sp)
    320e:	|            jsr b02 <readString>
    3214:	|            addq.l #4,sp
    3216:	|            move.l d0,228(sp)
    321a:	|            move.l 19c4c <SysBase>,d0
    3220:	|            movea.l d0,a6
    3222:	|            movea.l 228(sp),a1
    3226:	|            jsr -690(a6)

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    322a:	|            move.l 292(sp),224(sp)
    3230:	|            move.l #105458,220(sp)
    3238:	|            moveq #8,d0
    323a:	|            move.l d0,216(sp)
    323e:	|            moveq #1,d1
    3240:	|            move.l d1,212(sp)
    3244:	|            move.l 19c54 <DOSBase>,d0
    324a:	|            movea.l d0,a6
    324c:	|            move.l 224(sp),d1
    3250:	|            move.l 220(sp),d2
    3254:	|            move.l 216(sp),d3
    3258:	|            move.l 212(sp),d4
    325c:	|            jsr -324(a6)
    3260:	|            move.l d0,208(sp)
    3264:	|            move.l 208(sp),d0
    3268:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    326c:	|            moveq #1,d0
    326e:	|            cmp.l 204(sp),d0
    3272:	|        /-- beq.s 3282 <initSludge+0x2fc>
		KPrintF("Reading error in initSludge.\n");
    3274:	|        |   pea 1396a <custom.c.87151361+0x129>
    327a:	|        |   jsr 127a4 <KPrintF>
    3280:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    3282:	|        \-> move.l 19bfa <gameVersion>,d0
    3288:	|            cmpi.l #258,d0
    328e:	|        /-- ble.s 329e <initSludge+0x318>
    3290:	|        |   move.l 292(sp),-(sp)
    3294:	|        |   jsr b02 <readString>
    329a:	|        |   addq.l #4,sp
    329c:	|     /--|-- bra.s 32b2 <initSludge+0x32c>
    329e:	|     |  \-> pea 13988 <custom.c.87151361+0x147>
    32a4:	|     |      pea 13988 <custom.c.87151361+0x147>
    32aa:	|     |      jsr fc7c <joinStrings>
    32b0:	|     |      addq.l #8,sp
    32b2:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    32b6:	|            move.l 19bfa <gameVersion>,d0
    32bc:	|            cmpi.l #258,d0
    32c2:	|     /----- ble.s 32e4 <initSludge+0x35e>
    32c4:	|     |      move.l 292(sp),196(sp)
    32ca:	|     |      move.l 19c54 <DOSBase>,d0
    32d0:	|     |      movea.l d0,a6
    32d2:	|     |      move.l 196(sp),d1
    32d6:	|     |      jsr -306(a6)
    32da:	|     |      move.l d0,192(sp)
    32de:	|     |      move.l 192(sp),d0
    32e2:	|     |  /-- bra.s 32e6 <initSludge+0x360>
    32e4:	|     \--|-> moveq #0,d0
    32e6:	|        \-> move.l d0,19d28 <gameSettings+0x4>
	makeLanguageTable (fp);
    32ec:	|            move.l 292(sp),-(sp)
    32f0:	|            jsr f64e <makeLanguageTable>
    32f6:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    32f8:	|            move.l 19bfa <gameVersion>,d0
    32fe:	|            cmpi.l #261,d0
    3304:	|        /-- ble.s 3352 <initSludge+0x3cc>
	{
		FGetC(fp);
    3306:	|        |   move.l 292(sp),188(sp)
    330c:	|        |   move.l 19c54 <DOSBase>,d0
    3312:	|        |   movea.l d0,a6
    3314:	|        |   move.l 188(sp),d1
    3318:	|        |   jsr -306(a6)
    331c:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    3320:	|        |   move.l 292(sp),180(sp)
    3326:	|        |   move.l 19c54 <DOSBase>,d0
    332c:	|        |   movea.l d0,a6
    332e:	|        |   move.l 180(sp),d1
    3332:	|        |   jsr -306(a6)
    3336:	|        |   move.l d0,176(sp)
		getFloat (fp);
    333a:	|        |   move.l 292(sp),-(sp)
    333e:	|        |   jsr 7d8 <getFloat>
    3344:	|        |   addq.l #4,sp
		getFloat (fp);
    3346:	|        |   move.l 292(sp),-(sp)
    334a:	|        |   jsr 7d8 <getFloat>
    3350:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    3352:	|        \-> move.l 292(sp),-(sp)
    3356:	|            jsr b02 <readString>
    335c:	|            addq.l #4,sp
    335e:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    3362:	|            pea 13989 <custom.c.87151361+0x148>
    3368:	|            move.l 176(sp),-(sp)
    336c:	|            jsr fbfc <strcmp>
    3372:	|            addq.l #8,sp
    3374:	|            tst.l d0
    3376:	|        /-- beq.s 337e <initSludge+0x3f8>
		return FALSE;
    3378:	|        |   clr.w d0
    337a:	+--------|-- bra.w 36ea <initSludge+0x764>
	}
	FreeVec( checker);
    337e:	|        \-> move.l 172(sp),168(sp)
    3384:	|            move.l 19c4c <SysBase>,d0
    338a:	|            movea.l d0,a6
    338c:	|            movea.l 168(sp),a1
    3390:	|            jsr -690(a6)
	checker = NULL;
    3394:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    3398:	|            move.l 292(sp),164(sp)
    339e:	|            move.l 19c54 <DOSBase>,d0
    33a4:	|            movea.l d0,a6
    33a6:	|            move.l 164(sp),d1
    33aa:	|            jsr -306(a6)
    33ae:	|            move.l d0,160(sp)
    33b2:	|            move.l 160(sp),d0
    33b6:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    33ba:	|            moveq #0,d0
    33bc:	|            move.b 159(sp),d0
    33c0:	|            moveq #1,d1
    33c2:	|            and.l d1,d0
    33c4:	|        /-- beq.s 341c <initSludge+0x496>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    33c6:	|        |   move.l 19c54 <DOSBase>,d0
    33cc:	|        |   movea.l d0,a6
    33ce:	|        |   jsr -60(a6)
    33d2:	|        |   move.l d0,38(sp)
    33d6:	|        |   move.l 38(sp),d0
    33da:	|        |   move.l d0,34(sp)
    33de:	|        |   move.l #80273,30(sp)
    33e6:	|        |   moveq #54,d0
    33e8:	|        |   move.l d0,26(sp)
    33ec:	|        |   move.l 19c54 <DOSBase>,d0
    33f2:	|        |   movea.l d0,a6
    33f4:	|        |   move.l 34(sp),d1
    33f8:	|        |   move.l 30(sp),d2
    33fc:	|        |   move.l 26(sp),d3
    3400:	|        |   jsr -48(a6)
    3404:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    3408:	|        |   pea 139c8 <custom.c.87151361+0x187>
    340e:	|        |   jsr 127a4 <KPrintF>
    3414:	|        |   addq.l #4,sp
		return FALSE;
    3416:	|        |   clr.w d0
    3418:	+--------|-- bra.w 36ea <initSludge+0x764>
	}

	numGlobals = get2bytes (fp);
    341c:	|        \-> move.l 292(sp),-(sp)
    3420:	|            jsr 6bc <get2bytes>
    3426:	|            addq.l #4,sp
    3428:	|            move.l d0,19c24 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    342e:	|            move.l 19c24 <numGlobals>,d0
    3434:	|            lsl.l #3,d0
    3436:	|            move.l d0,154(sp)
    343a:	|            clr.l 150(sp)
    343e:	|            move.l 19c4c <SysBase>,d0
    3444:	|            movea.l d0,a6
    3446:	|            move.l 154(sp),d0
    344a:	|            move.l 150(sp),d1
    344e:	|            jsr -684(a6)
    3452:	|            move.l d0,146(sp)
    3456:	|            move.l 146(sp),d0
    345a:	|            move.l d0,19bfe <globalVars>
	if(globalVars == 0) {
    3460:	|            move.l 19bfe <globalVars>,d0
    3466:	|        /-- bne.s 347c <initSludge+0x4f6>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    3468:	|        |   pea 13a00 <custom.c.87151361+0x1bf>
    346e:	|        |   jsr 127a4 <KPrintF>
    3474:	|        |   addq.l #4,sp
		return FALSE;
    3476:	|        |   clr.w d0
    3478:	+--------|-- bra.w 36ea <initSludge+0x764>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    347c:	|        \-> clr.l 312(sp)
    3480:	|        /-- bra.s 3498 <initSludge+0x512>
    3482:	|     /--|-> move.l 19bfe <globalVars>,d1
    3488:	|     |  |   move.l 312(sp),d0
    348c:	|     |  |   lsl.l #3,d0
    348e:	|     |  |   movea.l d1,a0
    3490:	|     |  |   adda.l d0,a0
    3492:	|     |  |   clr.l (a0)
    3494:	|     |  |   addq.l #1,312(sp)
    3498:	|     |  \-> move.l 19c24 <numGlobals>,d0
    349e:	|     |      cmp.l 312(sp),d0
    34a2:	|     \----- bgt.s 3482 <initSludge+0x4fc>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    34a4:	|            move.l 19d28 <gameSettings+0x4>,d0
    34aa:	|            clr.l -(sp)
    34ac:	|            move.l d0,-(sp)
    34ae:	|            move.l 300(sp),-(sp)
    34b2:	|            jsr 4464 <setFileIndices>
    34b8:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    34bc:	|            pea 1 <_start+0x1>
    34c0:	|            jsr 411e <getNumberedString>
    34c6:	|            addq.l #4,sp
    34c8:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    34cc:	|            move.l 142(sp),-(sp)
    34d0:	|            jsr 2fe <encodeFilename>
    34d6:	|            addq.l #4,sp
    34d8:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    34dc:	|            move.l 142(sp),134(sp)
    34e2:	|            move.l 19c4c <SysBase>,d0
    34e8:	|            movea.l d0,a6
    34ea:	|            movea.l 134(sp),a1
    34ee:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    34f2:	|            move.l 138(sp),130(sp)
    34f8:	|            move.l 19c54 <DOSBase>,d0
    34fe:	|            movea.l d0,a6
    3500:	|            move.l 130(sp),d1
    3504:	|            jsr -120(a6)
    3508:	|            move.l d0,126(sp)
    350c:	|            move.l 126(sp),d0
    3510:	|            move.l d0,296(sp)
	if(lock == 0) {
    3514:	|        /-- bne.s 3542 <initSludge+0x5bc>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    3516:	|        |   move.l 138(sp),122(sp)
    351c:	|        |   moveq #-2,d1
    351e:	|        |   move.l d1,118(sp)
    3522:	|        |   move.l 19c54 <DOSBase>,d0
    3528:	|        |   movea.l d0,a6
    352a:	|        |   move.l 122(sp),d1
    352e:	|        |   move.l 118(sp),d2
    3532:	|        |   jsr -84(a6)
    3536:	|        |   move.l d0,114(sp)
    353a:	|        |   move.l 114(sp),d0
    353e:	|        |   move.l d0,296(sp)
	}

	if (!CurrentDir(lock)) {
    3542:	|        \-> move.l 296(sp),110(sp)
    3548:	|            move.l 19c54 <DOSBase>,d0
    354e:	|            movea.l d0,a6
    3550:	|            move.l 110(sp),d1
    3554:	|            jsr -126(a6)
    3558:	|            move.l d0,106(sp)
    355c:	|            move.l 106(sp),d0
    3560:	|        /-- bne.s 35bc <initSludge+0x636>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    3562:	|        |   move.l 138(sp),-(sp)
    3566:	|        |   pea 13a33 <custom.c.87151361+0x1f2>
    356c:	|        |   jsr 127a4 <KPrintF>
    3572:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    3574:	|        |   move.l 19c54 <DOSBase>,d0
    357a:	|        |   movea.l d0,a6
    357c:	|        |   jsr -60(a6)
    3580:	|        |   move.l d0,58(sp)
    3584:	|        |   move.l 58(sp),d0
    3588:	|        |   move.l d0,54(sp)
    358c:	|        |   move.l #80480,50(sp)
    3594:	|        |   moveq #40,d0
    3596:	|        |   move.l d0,46(sp)
    359a:	|        |   move.l 19c54 <DOSBase>,d0
    35a0:	|        |   movea.l d0,a6
    35a2:	|        |   move.l 54(sp),d1
    35a6:	|        |   move.l 50(sp),d2
    35aa:	|        |   move.l 46(sp),d3
    35ae:	|        |   jsr -48(a6)
    35b2:	|        |   move.l d0,42(sp)
		return FALSE;
    35b6:	|        |   clr.w d0
    35b8:	+--------|-- bra.w 36ea <initSludge+0x764>
	}

	FreeVec(gameName);
    35bc:	|        \-> move.l 138(sp),102(sp)
    35c2:	|            move.l 19c4c <SysBase>,d0
    35c8:	|            movea.l d0,a6
    35ca:	|            movea.l 102(sp),a1
    35ce:	|            jsr -690(a6)

	readIniFile (filename);
    35d2:	|            move.l 320(sp),-(sp)
    35d6:	|            jsr f782 <readIniFile>
    35dc:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    35de:	|            jsr f554 <getLanguageForFileB>
    35e4:	|            move.l d0,18120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    35ea:	|            move.l 18120 <languageNum>,d0
    35f0:	|        /-- bpl.s 3600 <initSludge+0x67a>
    35f2:	|        |   pea 13a89 <custom.c.87151361+0x248>
    35f8:	|        |   jsr 127a4 <KPrintF>
    35fe:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    3600:	|        \-> move.l 18120 <languageNum>,d0
    3606:	|            move.l d0,d1
    3608:	|            move.l 19d28 <gameSettings+0x4>,d0
    360e:	|            move.l d1,-(sp)
    3610:	|            move.l d0,-(sp)
    3612:	|            clr.l -(sp)
    3614:	|            jsr 4464 <setFileIndices>
    361a:	|            lea 12(sp),sp

	if (dataFol[0]) {
    361e:	|            movea.l 200(sp),a0
    3622:	|            move.b (a0),d0
    3624:	|     /----- beq.w 36ce <initSludge+0x748>
		char *dataFolder = encodeFilename(dataFol);
    3628:	|     |      move.l 200(sp),-(sp)
    362c:	|     |      jsr 2fe <encodeFilename>
    3632:	|     |      addq.l #4,sp
    3634:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    3638:	|     |      move.l 98(sp),94(sp)
    363e:	|     |      move.l 19c54 <DOSBase>,d0
    3644:	|     |      movea.l d0,a6
    3646:	|     |      move.l 94(sp),d1
    364a:	|     |      jsr -120(a6)
    364e:	|     |      move.l d0,90(sp)
    3652:	|     |      move.l 90(sp),d0
    3656:	|     |      move.l d0,296(sp)
		if(lock == 0) {
    365a:	|     |  /-- bne.s 3688 <initSludge+0x702>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    365c:	|     |  |   move.l 98(sp),86(sp)
    3662:	|     |  |   moveq #-2,d1
    3664:	|     |  |   move.l d1,82(sp)
    3668:	|     |  |   move.l 19c54 <DOSBase>,d0
    366e:	|     |  |   movea.l d0,a6
    3670:	|     |  |   move.l 86(sp),d1
    3674:	|     |  |   move.l 82(sp),d2
    3678:	|     |  |   jsr -84(a6)
    367c:	|     |  |   move.l d0,78(sp)
    3680:	|     |  |   move.l 78(sp),d0
    3684:	|     |  |   move.l d0,296(sp)
		}


		if (!CurrentDir(lock)) {
    3688:	|     |  \-> move.l 296(sp),74(sp)
    368e:	|     |      move.l 19c54 <DOSBase>,d0
    3694:	|     |      movea.l d0,a6
    3696:	|     |      move.l 74(sp),d1
    369a:	|     |      jsr -126(a6)
    369e:	|     |      move.l d0,70(sp)
    36a2:	|     |      move.l 70(sp),d0
    36a6:	|     |  /-- bne.s 36b8 <initSludge+0x732>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    36a8:	|     |  |   move.l 19c54 <DOSBase>,d0
    36ae:	|     |  |   movea.l d0,a6
    36b0:	|     |  |   jsr -60(a6)
    36b4:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    36b8:	|     |  \-> move.l 98(sp),62(sp)
    36be:	|     |      move.l 19c4c <SysBase>,d0
    36c4:	|     |      movea.l d0,a6
    36c6:	|     |      movea.l 62(sp),a1
    36ca:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    36ce:	|     \----> movea.l 19b50 <winHeight>,a0
    36d4:	|            lea -15(a0),a0
    36d8:	|            move.l a0,d0
    36da:	|            move.l d0,-(sp)
    36dc:	|            pea a <_start+0xa>
    36e0:	|            jsr 4e76 <positionStatus>
    36e6:	|            addq.l #8,sp

	return TRUE;
    36e8:	|            moveq #1,d0
}
    36ea:	\----------> movem.l (sp)+,d2-d4/a2/a6
    36ee:	             lea 296(sp),sp
    36f2:	             rts

000036f4 <killSpeechTimers>:

void killSpeechTimers () {
    36f4:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    36f6:	          move.l 19be8 <allRunningFunctions>,(sp)

	while (thisFunction) {
    36fc:	   /----- bra.s 3728 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    36fe:	/--|----> movea.l (sp),a0
    3700:	|  |      move.b 56(a0),d0
    3704:	|  |  /-- bne.s 3722 <killSpeechTimers+0x2e>
    3706:	|  |  |   movea.l (sp),a0
    3708:	|  |  |   move.w 50(a0),d0
    370c:	|  |  +-- beq.s 3722 <killSpeechTimers+0x2e>
    370e:	|  |  |   movea.l (sp),a0
    3710:	|  |  |   move.l 12(a0),d0
    3714:	|  |  +-- beq.s 3722 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    3716:	|  |  |   movea.l (sp),a0
    3718:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    371c:	|  |  |   movea.l (sp),a0
    371e:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    3722:	|  |  \-> movea.l (sp),a0
    3724:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    3728:	|  \----> tst.l (sp)
    372a:	\-------- bne.s 36fe <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    372c:	          jsr 53b4 <killAllSpeech>
}
    3732:	          nop
    3734:	          addq.l #4,sp
    3736:	          rts

00003738 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    3738:	             lea -52(sp),sp
    373c:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    373e:	             movea.l 60(sp),a0
    3742:	             move.l (a0),d0
    3744:	             move.l d0,-(sp)
    3746:	             jsr 43a4 <openSubSlice>
    374c:	             addq.l #4,sp
    374e:	             tst.w d0
    3750:	         /-- bne.s 3758 <loadFunctionCode+0x20>
    3752:	         |   clr.w d0
    3754:	/--------|-- bra.w 3922 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    3758:	|        \-> move.l 19c34 <bigDataFile>,44(sp)
    3760:	|            move.l 19c54 <DOSBase>,d0
    3766:	|            movea.l d0,a6
    3768:	|            move.l 44(sp),d1
    376c:	|            jsr -306(a6)
    3770:	|            move.l d0,40(sp)
    3774:	|            move.l 40(sp),d0
    3778:	|            move.l d0,d0
    377a:	|            movea.l 60(sp),a0
    377e:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    3782:	|            move.l 19c34 <bigDataFile>,d0
    3788:	|            move.l d0,-(sp)
    378a:	|            jsr 6bc <get2bytes>
    3790:	|            addq.l #4,sp
    3792:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    3796:	|            move.l 19c34 <bigDataFile>,d0
    379c:	|            move.l d0,-(sp)
    379e:	|            jsr 6bc <get2bytes>
    37a4:	|            addq.l #4,sp
    37a6:	|            movea.l 60(sp),a0
    37aa:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    37ae:	|            move.l 19c34 <bigDataFile>,d0
    37b4:	|            move.l d0,-(sp)
    37b6:	|            jsr 6bc <get2bytes>
    37bc:	|            addq.l #4,sp
    37be:	|            movea.l 60(sp),a0
    37c2:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    37c6:	|            move.l 36(sp),d0
    37ca:	|            lsl.l #3,d0
    37cc:	|            move.l d0,32(sp)
    37d0:	|            clr.l 28(sp)
    37d4:	|            move.l 19c4c <SysBase>,d0
    37da:	|            movea.l d0,a6
    37dc:	|            move.l 32(sp),d0
    37e0:	|            move.l 28(sp),d1
    37e4:	|            jsr -684(a6)
    37e8:	|            move.l d0,24(sp)
    37ec:	|            move.l 24(sp),d0
    37f0:	|            movea.l 60(sp),a0
    37f4:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    37f8:	|            movea.l 60(sp),a0
    37fc:	|            move.l 4(a0),d0
    3800:	|        /-- bne.s 3816 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    3802:	|        |   pea 13ab4 <custom.c.87151361+0x273>
    3808:	|        |   jsr 127a4 <KPrintF>
    380e:	|        |   addq.l #4,sp
		return FALSE;
    3810:	|        |   clr.w d0
    3812:	+--------|-- bra.w 3922 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3816:	|        \-> clr.l 52(sp)
    381a:	|        /-- bra.s 387c <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    381c:	|     /--|-> move.l 19c34 <bigDataFile>,8(sp)
    3824:	|     |  |   move.l 19c54 <DOSBase>,d0
    382a:	|     |  |   movea.l d0,a6
    382c:	|     |  |   move.l 8(sp),d1
    3830:	|     |  |   jsr -306(a6)
    3834:	|     |  |   move.l d0,4(sp)
    3838:	|     |  |   move.l 4(sp),d1
    383c:	|     |  |   movea.l 60(sp),a0
    3840:	|     |  |   movea.l 4(a0),a0
    3844:	|     |  |   move.l 52(sp),d0
    3848:	|     |  |   lsl.l #3,d0
    384a:	|     |  |   adda.l d0,a0
    384c:	|     |  |   move.l d1,d0
    384e:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    3850:	|     |  |   move.l 19c34 <bigDataFile>,d0
    3856:	|     |  |   move.l d0,-(sp)
    3858:	|     |  |   jsr 6bc <get2bytes>
    385e:	|     |  |   addq.l #4,sp
    3860:	|     |  |   move.l d0,d1
    3862:	|     |  |   movea.l 60(sp),a0
    3866:	|     |  |   movea.l 4(a0),a0
    386a:	|     |  |   move.l 52(sp),d0
    386e:	|     |  |   lsl.l #3,d0
    3870:	|     |  |   adda.l d0,a0
    3872:	|     |  |   move.l d1,d0
    3874:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    3878:	|     |  |   addq.l #1,52(sp)
    387c:	|     |  \-> move.l 52(sp),d0
    3880:	|     |      cmp.l 36(sp),d0
    3884:	|     \----- bcs.s 381c <loadFunctionCode+0xe4>
	}

	finishAccess ();
    3886:	|            jsr 4114 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    388c:	|            movea.l 60(sp),a0
    3890:	|            move.l 8(a0),d0
    3894:	|  /-------- ble.w 3918 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    3898:	|  |         movea.l 60(sp),a0
    389c:	|  |         move.l 8(a0),d0
    38a0:	|  |         lsl.l #3,d0
    38a2:	|  |         move.l d0,20(sp)
    38a6:	|  |         clr.l 16(sp)
    38aa:	|  |         move.l 19c4c <SysBase>,d0
    38b0:	|  |         movea.l d0,a6
    38b2:	|  |         move.l 20(sp),d0
    38b6:	|  |         move.l 16(sp),d1
    38ba:	|  |         jsr -684(a6)
    38be:	|  |         move.l d0,12(sp)
    38c2:	|  |         move.l 12(sp),d0
    38c6:	|  |         movea.l 60(sp),a0
    38ca:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    38ce:	|  |         movea.l 60(sp),a0
    38d2:	|  |         move.l 20(a0),d0
    38d6:	|  |     /-- bne.s 38ea <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    38d8:	|  |     |   pea 13ab4 <custom.c.87151361+0x273>
    38de:	|  |     |   jsr 127a4 <KPrintF>
    38e4:	|  |     |   addq.l #4,sp
			return FALSE;
    38e6:	|  |     |   clr.w d0
    38e8:	+--|-----|-- bra.s 3922 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    38ea:	|  |     \-> clr.l 48(sp)
    38ee:	|  |     /-- bra.s 3908 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    38f0:	|  |  /--|-> movea.l 60(sp),a0
    38f4:	|  |  |  |   move.l 20(a0),d1
    38f8:	|  |  |  |   move.l 48(sp),d0
    38fc:	|  |  |  |   lsl.l #3,d0
    38fe:	|  |  |  |   movea.l d1,a0
    3900:	|  |  |  |   adda.l d0,a0
    3902:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    3904:	|  |  |  |   addq.l #1,48(sp)
    3908:	|  |  |  \-> movea.l 60(sp),a0
    390c:	|  |  |      move.l 8(a0),d0
    3910:	|  |  |      cmp.l 48(sp),d0
    3914:	|  |  \----- bgt.s 38f0 <loadFunctionCode+0x1b8>
    3916:	|  |     /-- bra.s 3920 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    3918:	|  \-----|-> movea.l 60(sp),a0
    391c:	|        |   clr.l 8(a0)
	}
	return TRUE;
    3920:	|        \-> moveq #1,d0
}
    3922:	\----------> movea.l (sp)+,a6
    3924:	             lea 52(sp),sp
    3928:	             rts

0000392a <loadHandlers>:

void loadHandlers (BPTR fp) {
    392a:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    392c:	movea.l 1811c <currentEvents>,a2
    3932:	move.l 8(sp),-(sp)
    3936:	jsr 6bc <get2bytes>
    393c:	addq.l #4,sp
    393e:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    3940:	movea.l 1811c <currentEvents>,a2
    3946:	move.l 8(sp),-(sp)
    394a:	jsr 6bc <get2bytes>
    3950:	addq.l #4,sp
    3952:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    3956:	movea.l 1811c <currentEvents>,a2
    395c:	move.l 8(sp),-(sp)
    3960:	jsr 6bc <get2bytes>
    3966:	addq.l #4,sp
    3968:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    396c:	movea.l 1811c <currentEvents>,a2
    3972:	move.l 8(sp),-(sp)
    3976:	jsr 6bc <get2bytes>
    397c:	addq.l #4,sp
    397e:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    3982:	movea.l 1811c <currentEvents>,a2
    3988:	move.l 8(sp),-(sp)
    398c:	jsr 6bc <get2bytes>
    3992:	addq.l #4,sp
    3994:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    3998:	movea.l 1811c <currentEvents>,a2
    399e:	move.l 8(sp),-(sp)
    39a2:	jsr 6bc <get2bytes>
    39a8:	addq.l #4,sp
    39aa:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    39ae:	movea.l 1811c <currentEvents>,a2
    39b4:	move.l 8(sp),-(sp)
    39b8:	jsr 6bc <get2bytes>
    39be:	addq.l #4,sp
    39c0:	move.l d0,24(a2)
}
    39c4:	nop
    39c6:	movea.l (sp)+,a2
    39c8:	rts

000039ca <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    39ca:	       lea -312(sp),sp
    39ce:	       movem.l d2-d3/a6,-(sp)
    39d2:	       move.l 332(sp),d1
    39d6:	       move.l 336(sp),d0
    39da:	       move.b d1,d1
    39dc:	       move.b d1,16(sp)
    39e0:	       move.b d0,d0
    39e2:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    39e6:	       move.l 328(sp),318(sp)
    39ec:	       move.l #1005,314(sp)
    39f4:	       move.l 19c54 <DOSBase>,d0
    39fa:	       movea.l d0,a6
    39fc:	       move.l 318(sp),d1
    3a00:	       move.l 314(sp),d2
    3a04:	       jsr -30(a6)
    3a08:	       move.l d0,310(sp)
    3a0c:	       move.l 310(sp),d0
    3a10:	       move.l d0,306(sp)

	if (! fp) {
    3a14:	   /-- bne.s 3a70 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    3a16:	   |   move.l 19c54 <DOSBase>,d0
    3a1c:	   |   movea.l d0,a6
    3a1e:	   |   jsr -60(a6)
    3a22:	   |   move.l d0,154(sp)
    3a26:	   |   move.l 154(sp),d0
    3a2a:	   |   move.l d0,150(sp)
    3a2e:	   |   move.l #80605,146(sp)
    3a36:	   |   moveq #31,d0
    3a38:	   |   move.l d0,142(sp)
    3a3c:	   |   move.l 19c54 <DOSBase>,d0
    3a42:	   |   movea.l d0,a6
    3a44:	   |   move.l 150(sp),d1
    3a48:	   |   move.l 146(sp),d2
    3a4c:	   |   move.l 142(sp),d3
    3a50:	   |   jsr -48(a6)
    3a54:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    3a58:	   |   move.l 328(sp),-(sp)
    3a5c:	   |   pea 13afd <custom.c.87151361+0x2bc>
    3a62:	   |   jsr 127a4 <KPrintF>
    3a68:	   |   addq.l #8,sp
		return NULL;
    3a6a:	   |   moveq #0,d0
    3a6c:	/--|-- bra.w 3d30 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    3a70:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    3a74:	|      move.l 306(sp),302(sp)
    3a7a:	|      move.l 19c54 <DOSBase>,d0
    3a80:	|      movea.l d0,a6
    3a82:	|      move.l 302(sp),d1
    3a86:	|      jsr -306(a6)
    3a8a:	|      move.l d0,298(sp)
    3a8e:	|      move.l 298(sp),d0
    3a92:	|      moveq #83,d1
    3a94:	|      cmp.l d0,d1
    3a96:	|  /-- beq.s 3a9e <openAndVerify+0xd4>
    3a98:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    3a9e:	|  \-> move.l 306(sp),294(sp)
    3aa4:	|      move.l 19c54 <DOSBase>,d0
    3aaa:	|      movea.l d0,a6
    3aac:	|      move.l 294(sp),d1
    3ab0:	|      jsr -306(a6)
    3ab4:	|      move.l d0,290(sp)
    3ab8:	|      move.l 290(sp),d0
    3abc:	|      moveq #76,d1
    3abe:	|      cmp.l d0,d1
    3ac0:	|  /-- beq.s 3ac8 <openAndVerify+0xfe>
    3ac2:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    3ac8:	|  \-> move.l 306(sp),286(sp)
    3ace:	|      move.l 19c54 <DOSBase>,d0
    3ad4:	|      movea.l d0,a6
    3ad6:	|      move.l 286(sp),d1
    3ada:	|      jsr -306(a6)
    3ade:	|      move.l d0,282(sp)
    3ae2:	|      move.l 282(sp),d0
    3ae6:	|      moveq #85,d1
    3ae8:	|      cmp.l d0,d1
    3aea:	|  /-- beq.s 3af2 <openAndVerify+0x128>
    3aec:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    3af2:	|  \-> move.l 306(sp),278(sp)
    3af8:	|      move.l 19c54 <DOSBase>,d0
    3afe:	|      movea.l d0,a6
    3b00:	|      move.l 278(sp),d1
    3b04:	|      jsr -306(a6)
    3b08:	|      move.l d0,274(sp)
    3b0c:	|      move.l 274(sp),d0
    3b10:	|      moveq #68,d1
    3b12:	|      cmp.l d0,d1
    3b14:	|  /-- beq.s 3b1c <openAndVerify+0x152>
    3b16:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    3b1c:	|  \-> move.l 306(sp),270(sp)
    3b22:	|      move.l 19c54 <DOSBase>,d0
    3b28:	|      movea.l d0,a6
    3b2a:	|      move.l 270(sp),d1
    3b2e:	|      jsr -306(a6)
    3b32:	|      move.l d0,266(sp)
    3b36:	|      move.l 266(sp),d1
    3b3a:	|      move.b 16(sp),d0
    3b3e:	|      ext.w d0
    3b40:	|      movea.w d0,a0
    3b42:	|      cmpa.l d1,a0
    3b44:	|  /-- beq.s 3b4c <openAndVerify+0x182>
    3b46:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    3b4c:	|  \-> move.l 306(sp),262(sp)
    3b52:	|      move.l 19c54 <DOSBase>,d0
    3b58:	|      movea.l d0,a6
    3b5a:	|      move.l 262(sp),d1
    3b5e:	|      jsr -306(a6)
    3b62:	|      move.l d0,258(sp)
    3b66:	|      move.l 258(sp),d1
    3b6a:	|      move.b 14(sp),d0
    3b6e:	|      ext.w d0
    3b70:	|      movea.w d0,a0
    3b72:	|      cmpa.l d1,a0
    3b74:	|  /-- beq.s 3b7c <openAndVerify+0x1b2>
    3b76:	|  |   move.w #1,322(sp)
	if (headerBad) {
    3b7c:	|  \-> tst.w 322(sp)
    3b80:	|  /-- beq.s 3bd8 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    3b82:	|  |   move.l 19c54 <DOSBase>,d0
    3b88:	|  |   movea.l d0,a6
    3b8a:	|  |   jsr -60(a6)
    3b8e:	|  |   move.l d0,174(sp)
    3b92:	|  |   move.l 174(sp),d0
    3b96:	|  |   move.l d0,170(sp)
    3b9a:	|  |   move.l #80668,166(sp)
    3ba2:	|  |   moveq #31,d0
    3ba4:	|  |   move.l d0,162(sp)
    3ba8:	|  |   move.l 19c54 <DOSBase>,d0
    3bae:	|  |   movea.l d0,a6
    3bb0:	|  |   move.l 170(sp),d1
    3bb4:	|  |   move.l 166(sp),d2
    3bb8:	|  |   move.l 162(sp),d3
    3bbc:	|  |   jsr -48(a6)
    3bc0:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    3bc4:	|  |   pea 13b1c <custom.c.87151361+0x2db>
    3bca:	|  |   jsr 127a4 <KPrintF>
    3bd0:	|  |   addq.l #4,sp
		return NULL;
    3bd2:	|  |   moveq #0,d0
    3bd4:	+--|-- bra.w 3d30 <openAndVerify+0x366>
	}
	FGetC (fp);
    3bd8:	|  \-> move.l 306(sp),254(sp)
    3bde:	|      move.l 19c54 <DOSBase>,d0
    3be4:	|      movea.l d0,a6
    3be6:	|      move.l 254(sp),d1
    3bea:	|      jsr -306(a6)
    3bee:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    3bf2:	|      nop
    3bf4:	|  /-> move.l 306(sp),246(sp)
    3bfa:	|  |   move.l 19c54 <DOSBase>,d0
    3c00:	|  |   movea.l d0,a6
    3c02:	|  |   move.l 246(sp),d1
    3c06:	|  |   jsr -306(a6)
    3c0a:	|  |   move.l d0,242(sp)
    3c0e:	|  |   move.l 242(sp),d0
    3c12:	|  \-- bne.s 3bf4 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    3c14:	|      move.l 306(sp),238(sp)
    3c1a:	|      move.l 19c54 <DOSBase>,d0
    3c20:	|      movea.l d0,a6
    3c22:	|      move.l 238(sp),d1
    3c26:	|      jsr -306(a6)
    3c2a:	|      move.l d0,234(sp)
    3c2e:	|      move.l 234(sp),d0
    3c32:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    3c36:	|      move.l 306(sp),226(sp)
    3c3c:	|      move.l 19c54 <DOSBase>,d0
    3c42:	|      movea.l d0,a6
    3c44:	|      move.l 226(sp),d1
    3c48:	|      jsr -306(a6)
    3c4c:	|      move.l d0,222(sp)
    3c50:	|      move.l 222(sp),d0
    3c54:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    3c58:	|      move.l 230(sp),d0
    3c5c:	|      lsl.l #8,d0
    3c5e:	|      add.l 218(sp),d0
    3c62:	|      movea.l 344(sp),a0
    3c66:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    3c68:	|      movea.l 344(sp),a0
    3c6c:	|      move.l (a0),d0
    3c6e:	|      cmpi.l #514,d0
    3c74:	|  /-- ble.s 3cca <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    3c76:	|  |   move.l 19c54 <DOSBase>,d0
    3c7c:	|  |   movea.l d0,a6
    3c7e:	|  |   jsr -60(a6)
    3c82:	|  |   move.l d0,194(sp)
    3c86:	|  |   move.l 194(sp),d0
    3c8a:	|  |   move.l d0,190(sp)
    3c8e:	|  |   move.l #80695,186(sp)
    3c96:	|  |   moveq #100,d1
    3c98:	|  |   move.l d1,182(sp)
    3c9c:	|  |   move.l 19c54 <DOSBase>,d0
    3ca2:	|  |   movea.l d0,a6
    3ca4:	|  |   move.l 190(sp),d1
    3ca8:	|  |   move.l 186(sp),d2
    3cac:	|  |   move.l 182(sp),d3
    3cb0:	|  |   jsr -48(a6)
    3cb4:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    3cb8:	|  |   pea 13b37 <custom.c.87151361+0x2f6>
    3cbe:	|  |   jsr 127a4 <KPrintF>
    3cc4:	|  |   addq.l #4,sp
		return NULL;
    3cc6:	|  |   moveq #0,d0
    3cc8:	+--|-- bra.s 3d30 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    3cca:	|  \-> movea.l 344(sp),a0
    3cce:	|      move.l (a0),d0
    3cd0:	|      cmpi.l #257,d0
    3cd6:	|  /-- bgt.s 3d2c <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    3cd8:	|  |   move.l 19c54 <DOSBase>,d0
    3cde:	|  |   movea.l d0,a6
    3ce0:	|  |   jsr -60(a6)
    3ce4:	|  |   move.l d0,214(sp)
    3ce8:	|  |   move.l 214(sp),d0
    3cec:	|  |   move.l d0,210(sp)
    3cf0:	|  |   move.l #80764,206(sp)
    3cf8:	|  |   moveq #100,d0
    3cfa:	|  |   move.l d0,202(sp)
    3cfe:	|  |   move.l 19c54 <DOSBase>,d0
    3d04:	|  |   movea.l d0,a6
    3d06:	|  |   move.l 210(sp),d1
    3d0a:	|  |   move.l 206(sp),d2
    3d0e:	|  |   move.l 202(sp),d3
    3d12:	|  |   jsr -48(a6)
    3d16:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    3d1a:	|  |   pea 13b7c <custom.c.87151361+0x33b>
    3d20:	|  |   jsr 127a4 <KPrintF>
    3d26:	|  |   addq.l #4,sp
		return NULL;
    3d28:	|  |   moveq #0,d0
    3d2a:	+--|-- bra.s 3d30 <openAndVerify+0x366>
	}
	return fp;
    3d2c:	|  \-> move.l 306(sp),d0
}
    3d30:	\----> movem.l (sp)+,d2-d3/a6
    3d34:	       lea 312(sp),sp
    3d38:	       rts

00003d3a <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    3d3a:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    3d3c:	          move.l #105448,(sp)
	while (* huntAndDestroy) {
    3d42:	   /----- bra.s 3d6e <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    3d44:	/--|----> movea.l (sp),a0
    3d46:	|  |      move.l (a0),d0
    3d48:	|  |      cmp.l 8(sp),d0
    3d4c:	|  |  /-- bne.s 3d64 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    3d4e:	|  |  |   movea.l (sp),a0
    3d50:	|  |  |   movea.l (a0),a0
    3d52:	|  |  |   move.l 44(a0),d0
    3d56:	|  |  |   movea.l (sp),a0
    3d58:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    3d5a:	|  |  |   movea.l 8(sp),a0
    3d5e:	|  |  |   clr.l 44(a0)
    3d62:	|  +--|-- bra.s 3d6e <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    3d64:	|  |  \-> movea.l (sp),a0
    3d66:	|  |      move.l (a0),d0
    3d68:	|  |      moveq #44,d1
    3d6a:	|  |      add.l d0,d1
    3d6c:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    3d6e:	|  \----> movea.l (sp),a0
    3d70:	|         move.l (a0),d0
    3d72:	\-------- bne.s 3d44 <pauseFunction+0xa>
		}
	}
}
    3d74:	          nop
    3d76:	          nop
    3d78:	          addq.l #4,sp
    3d7a:	          rts

00003d7c <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    3d7c:	move.l 19be8 <allRunningFunctions>,d0
    3d82:	movea.l 4(sp),a0
    3d86:	move.l d0,44(a0)
	allRunningFunctions = fun;
    3d8a:	move.l 4(sp),19be8 <allRunningFunctions>
}
    3d92:	nop
    3d94:	rts

00003d96 <runSludge>:

BOOL runSludge () {
    3d96:	                   lea -12(sp),sp
    3d9a:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    3d9c:	                   move.l 19be8 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    3da4:	      /----------- bra.s 3e20 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    3da6:	   /--|----------> movea.l 12(sp),a0
    3daa:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    3db0:	   |  |            movea.l 12(sp),a0
    3db4:	   |  |            move.b 56(a0),d0
    3db8:	   |  |  /-------- bne.s 3e1a <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    3dba:	   |  |  |         movea.l 12(sp),a0
    3dbe:	   |  |  |         move.l 12(a0),d0
    3dc2:	   |  |  |  /----- beq.s 3dec <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    3dc4:	   |  |  |  |      movea.l 12(sp),a0
    3dc8:	   |  |  |  |      move.l 12(a0),d0
    3dcc:	   |  |  |  |  /-- bpl.s 3dd8 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    3dce:	   |  |  |  |  |   movea.l 12(sp),a0
    3dd2:	   |  |  |  |  |   clr.l 12(a0)
    3dd6:	   |  |  +--|--|-- bra.s 3e1a <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    3dd8:	   |  |  |  |  \-> movea.l 12(sp),a0
    3ddc:	   |  |  |  |      move.l 12(a0),d0
    3de0:	   |  |  |  |      subq.l #1,d0
    3de2:	   |  |  |  |      movea.l 12(sp),a0
    3de6:	   |  |  |  |      move.l d0,12(a0)
    3dea:	   |  |  +--|----- bra.s 3e1a <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    3dec:	   |  |  |  \----> movea.l 12(sp),a0
    3df0:	   |  |  |         move.w 50(a0),d0
    3df4:	   |  |  |     /-- beq.s 3e04 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    3df6:	   |  |  |     |   movea.l 12(sp),a0
    3dfa:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    3dfe:	   |  |  |     |   jsr 53b4 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    3e04:	   |  |  |     \-> move.l 12(sp),-(sp)
    3e08:	   |  |  |         jsr 1ffa <continueFunction>
    3e0e:	   |  |  |         addq.l #4,sp
    3e10:	   |  |  |         tst.w d0
    3e12:	   |  |  +-------- bne.s 3e1a <runSludge+0x84>
					return FALSE;
    3e14:	   |  |  |         clr.w d0
    3e16:	/--|--|--|-------- bra.w 3ea6 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    3e1a:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    3e20:	|  |  \----------> tst.l 12(sp)
    3e24:	|  \-------------- bne.s 3da6 <runSludge+0x10>
	}

	if (loadNow) {
    3e26:	|                  move.l 19c18 <loadNow>,d0
    3e2c:	|        /-------- beq.s 3ea4 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    3e2e:	|        |         movea.l 19c18 <loadNow>,a0
    3e34:	|        |         move.b (a0),d0
    3e36:	|        |         cmpi.b #58,d0
    3e3a:	|        |  /----- bne.s 3e6e <runSludge+0xd8>
			saveGame (loadNow + 1);
    3e3c:	|        |  |      move.l 19c18 <loadNow>,d0
    3e42:	|        |  |      addq.l #1,d0
    3e44:	|        |  |      move.l d0,-(sp)
    3e46:	|        |  |      jsr 89fc <saveGame>
    3e4c:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    3e4e:	|        |  |      movea.l 19d12 <saverFunc>,a0
    3e54:	|        |  |      lea 28(a0),a0
    3e58:	|        |  |      pea 1 <_start+0x1>
    3e5c:	|        |  |      pea 1 <_start+0x1>
    3e60:	|        |  |      move.l a0,-(sp)
    3e62:	|        |  |      jsr 11042 <setVariable>
    3e68:	|        |  |      lea 12(sp),sp
    3e6c:	|        |  |  /-- bra.s 3e86 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    3e6e:	|        |  \--|-> move.l 19c18 <loadNow>,d0
    3e74:	|        |     |   move.l d0,-(sp)
    3e76:	|        |     |   jsr 8544 <loadGame>
    3e7c:	|        |     |   addq.l #4,sp
    3e7e:	|        |     |   tst.w d0
    3e80:	|        |     +-- bne.s 3e86 <runSludge+0xf0>
    3e82:	|        |     |   clr.w d0
    3e84:	+--------|-----|-- bra.s 3ea6 <runSludge+0x110>
		}
		FreeVec(loadNow);
    3e86:	|        |     \-> move.l 19c18 <loadNow>,8(sp)
    3e8e:	|        |         move.l 19c4c <SysBase>,d0
    3e94:	|        |         movea.l d0,a6
    3e96:	|        |         movea.l 8(sp),a1
    3e9a:	|        |         jsr -690(a6)
		loadNow = NULL;
    3e9e:	|        |         clr.l 19c18 <loadNow>
	}

	return TRUE;
    3ea4:	|        \-------> moveq #1,d0
}
    3ea6:	\----------------> movea.l (sp)+,a6
    3ea8:	                   lea 12(sp),sp
    3eac:	                   rts

00003eae <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    3eae:	movea.l 1811c <currentEvents>,a0
    3eb4:	move.l (a0),d0
    3eb6:	move.l 4(sp),-(sp)
    3eba:	move.l d0,-(sp)
    3ebc:	jsr 8d0 <put2bytes>
    3ec2:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    3ec4:	movea.l 1811c <currentEvents>,a0
    3eca:	move.l 4(a0),d0
    3ece:	move.l 4(sp),-(sp)
    3ed2:	move.l d0,-(sp)
    3ed4:	jsr 8d0 <put2bytes>
    3eda:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    3edc:	movea.l 1811c <currentEvents>,a0
    3ee2:	move.l 8(a0),d0
    3ee6:	move.l 4(sp),-(sp)
    3eea:	move.l d0,-(sp)
    3eec:	jsr 8d0 <put2bytes>
    3ef2:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    3ef4:	movea.l 1811c <currentEvents>,a0
    3efa:	move.l 12(a0),d0
    3efe:	move.l 4(sp),-(sp)
    3f02:	move.l d0,-(sp)
    3f04:	jsr 8d0 <put2bytes>
    3f0a:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    3f0c:	movea.l 1811c <currentEvents>,a0
    3f12:	move.l 16(a0),d0
    3f16:	move.l 4(sp),-(sp)
    3f1a:	move.l d0,-(sp)
    3f1c:	jsr 8d0 <put2bytes>
    3f22:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    3f24:	movea.l 1811c <currentEvents>,a0
    3f2a:	move.l 20(a0),d0
    3f2e:	move.l 4(sp),-(sp)
    3f32:	move.l d0,-(sp)
    3f34:	jsr 8d0 <put2bytes>
    3f3a:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    3f3c:	movea.l 1811c <currentEvents>,a0
    3f42:	move.l 24(a0),d0
    3f46:	move.l 4(sp),-(sp)
    3f4a:	move.l d0,-(sp)
    3f4c:	jsr 8d0 <put2bytes>
    3f52:	addq.l #8,sp
}
    3f54:	nop
    3f56:	rts

00003f58 <sludgeDisplay>:

void sludgeDisplay () {
	CstSludgeDisplay();
    3f58:	jsr fde <CstSludgeDisplay>
}
    3f5e:	nop
    3f60:	rts

00003f62 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    3f62:	      /-- bra.s 3f82 <stackSetByIndex+0x20>
		vS = vS->next;
    3f64:	/-----|-> movea.l 4(sp),a0
    3f68:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    3f6e:	|     +-- bne.s 3f82 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    3f70:	|     |   pea 13bc3 <custom.c.87151361+0x382>
    3f76:	|     |   jsr 127a4 <KPrintF>
    3f7c:	|     |   addq.l #4,sp
			return FALSE;
    3f7e:	|     |   clr.w d0
    3f80:	|  /--|-- bra.s 3fa4 <stackSetByIndex+0x42>
	while (theIndex--) {
    3f82:	|  |  \-> move.l 8(sp),d0
    3f86:	|  |      move.l d0,d1
    3f88:	|  |      subq.l #1,d1
    3f8a:	|  |      move.l d1,8(sp)
    3f8e:	|  |      tst.l d0
    3f90:	\--|----- bne.s 3f64 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    3f92:	   |      move.l 4(sp),d0
    3f96:	   |      move.l d0,-(sp)
    3f98:	   |      move.l 16(sp),-(sp)
    3f9c:	   |      jsr 10c0a <copyVariable>
    3fa2:	   |      addq.l #8,sp
}
    3fa4:	   \----> rts

00003fa6 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    3fa6:	             lea -24(sp),sp
    3faa:	             move.l a6,-(sp)
    3fac:	             move.l 48(sp),d0
    3fb0:	             move.w d0,d0
    3fb2:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    3fb6:	             moveq #58,d0
    3fb8:	             move.l d0,24(sp)
    3fbc:	             clr.l 20(sp)
    3fc0:	             move.l 19c4c <SysBase>,d0
    3fc6:	             movea.l d0,a6
    3fc8:	             move.l 24(sp),d0
    3fcc:	             move.l 20(sp),d1
    3fd0:	             jsr -684(a6)
    3fd4:	             move.l d0,16(sp)
    3fd8:	             move.l 16(sp),d0
    3fdc:	             move.l d0,12(sp)
	if(!newFunc) {
    3fe0:	         /-- bne.s 3ff6 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    3fe2:	         |   pea 13bdc <custom.c.87151361+0x39b>
    3fe8:	         |   jsr 127a4 <KPrintF>
    3fee:	         |   addq.l #4,sp
		return 0;
    3ff0:	         |   moveq #0,d0
    3ff2:	/--------|-- bra.w 410c <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    3ff6:	|        \-> move.l 32(sp),d0
    3ffa:	|            movea.l 12(sp),a0
    3ffe:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    4000:	|            move.l 12(sp),-(sp)
    4004:	|            jsr 3738 <loadFunctionCode>
    400a:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    400c:	|            movea.l 12(sp),a0
    4010:	|            move.l 16(a0),d1
    4014:	|            move.l 36(sp),d0
    4018:	|            cmp.l d1,d0
    401a:	|        /-- beq.s 4030 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    401c:	|        |   pea 13c05 <custom.c.87151361+0x3c4>
    4022:	|        |   jsr 127a4 <KPrintF>
    4028:	|        |   addq.l #4,sp
		return NULL; 
    402a:	|        |   moveq #0,d0
    402c:	+--------|-- bra.w 410c <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    4030:	|        \-> movea.l 12(sp),a0
    4034:	|            move.l 16(a0),d1
    4038:	|            movea.l 12(sp),a0
    403c:	|            move.l 8(a0),d0
    4040:	|            cmp.l d1,d0
    4042:	|  /-------- bge.s 40ac <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    4044:	|  |         pea 13c21 <custom.c.87151361+0x3e0>
    404a:	|  |         jsr 127a4 <KPrintF>
    4050:	|  |         addq.l #4,sp
		return NULL; 
    4052:	|  |         moveq #0,d0
    4054:	+--|-------- bra.w 410c <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    4058:	|  |  /----> movea.l 44(sp),a0
    405c:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    4060:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    4064:	|  |  |      movea.l 44(sp),a0
    4068:	|  |  |      move.l (a0),d0
    406a:	|  |  |  /-- bne.s 4080 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    406c:	|  |  |  |   pea 13c4b <custom.c.87151361+0x40a>
    4072:	|  |  |  |   jsr 127a4 <KPrintF>
    4078:	|  |  |  |   addq.l #4,sp
			return NULL;
    407a:	|  |  |  |   moveq #0,d0
    407c:	+--|--|--|-- bra.w 410c <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    4080:	|  |  |  \-> movea.l 12(sp),a0
    4084:	|  |  |      move.l 20(a0),d1
    4088:	|  |  |      move.l 36(sp),d0
    408c:	|  |  |      lsl.l #3,d0
    408e:	|  |  |      add.l d0,d1
    4090:	|  |  |      move.l 8(sp),d0
    4094:	|  |  |      move.l d1,-(sp)
    4096:	|  |  |      move.l d0,-(sp)
    4098:	|  |  |      jsr 10c0a <copyVariable>
    409e:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    40a0:	|  |  |      move.l 44(sp),-(sp)
    40a4:	|  |  |      jsr 110d4 <trimStack>
    40aa:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    40ac:	|  \--|----> tst.l 36(sp)
    40b0:	|     \----- bne.s 4058 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    40b2:	|            movea.l 12(sp),a0
    40b6:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    40ba:	|            movea.l 12(sp),a0
    40be:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    40c2:	|            movea.l 12(sp),a0
    40c6:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    40cc:	|            movea.l 12(sp),a0
    40d0:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    40d6:	|            movea.l 12(sp),a0
    40da:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    40de:	|            movea.l 12(sp),a0
    40e2:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    40e6:	|            movea.l 12(sp),a0
    40ea:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    40ee:	|            movea.l 12(sp),a0
    40f2:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    40f6:	|            movea.l 12(sp),a0
    40fa:	|            clr.l 28(a0)

	restartFunction (newFunc);
    40fe:	|            move.l 12(sp),-(sp)
    4102:	|            jsr 3d7c <restartFunction>
    4108:	|            addq.l #4,sp
	return 1;
    410a:	|            moveq #1,d0
}
    410c:	\----------> movea.l (sp)+,a6
    410e:	             lea 24(sp),sp
    4112:	             rts

00004114 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    4114:	clr.w 18128 <sliceBusy>
}
    411a:	nop
    411c:	rts

0000411e <getNumberedString>:

char * getNumberedString (int value) {
    411e:	       lea -56(sp),sp
    4122:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    4126:	       move.w 18128 <sliceBusy>,d0
    412c:	   /-- beq.s 4176 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    412e:	   |   move.l 19c54 <DOSBase>,d0
    4134:	   |   movea.l d0,a6
    4136:	   |   jsr -60(a6)
    413a:	   |   move.l d0,28(sp)
    413e:	   |   move.l 28(sp),d0
    4142:	   |   move.l d0,24(sp)
    4146:	   |   move.l #81046,20(sp)
    414e:	   |   moveq #76,d0
    4150:	   |   move.l d0,16(sp)
    4154:	   |   move.l 19c54 <DOSBase>,d0
    415a:	   |   movea.l d0,a6
    415c:	   |   move.l 24(sp),d1
    4160:	   |   move.l 20(sp),d2
    4164:	   |   move.l 16(sp),d3
    4168:	   |   jsr -48(a6)
    416c:	   |   move.l d0,12(sp)
		return NULL;
    4170:	   |   moveq #0,d0
    4172:	/--|-- bra.w 4212 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    4176:	|  \-> move.l 19c34 <bigDataFile>,64(sp)
    417e:	|      move.l 72(sp),d0
    4182:	|      add.l d0,d0
    4184:	|      add.l d0,d0
    4186:	|      move.l d0,d1
    4188:	|      move.l 19c40 <startOfTextIndex>,d0
    418e:	|      add.l d1,d0
    4190:	|      move.l d0,60(sp)
    4194:	|      moveq #-1,d0
    4196:	|      move.l d0,56(sp)
    419a:	|      move.l 19c54 <DOSBase>,d0
    41a0:	|      movea.l d0,a6
    41a2:	|      move.l 64(sp),d1
    41a6:	|      move.l 60(sp),d2
    41aa:	|      move.l 56(sp),d3
    41ae:	|      jsr -66(a6)
    41b2:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    41b6:	|      move.l 19c34 <bigDataFile>,d0
    41bc:	|      move.l d0,-(sp)
    41be:	|      jsr 718 <get4bytes>
    41c4:	|      addq.l #4,sp
    41c6:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    41ca:	|      move.l 19c34 <bigDataFile>,48(sp)
    41d2:	|      move.l 72(sp),44(sp)
    41d8:	|      moveq #-1,d0
    41da:	|      move.l d0,40(sp)
    41de:	|      move.l 19c54 <DOSBase>,d0
    41e4:	|      movea.l d0,a6
    41e6:	|      move.l 48(sp),d1
    41ea:	|      move.l 44(sp),d2
    41ee:	|      move.l 40(sp),d3
    41f2:	|      jsr -66(a6)
    41f6:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    41fa:	|      move.l 19c34 <bigDataFile>,d0
    4200:	|      move.l d0,-(sp)
    4202:	|      jsr b02 <readString>
    4208:	|      addq.l #4,sp
    420a:	|      move.l d0,32(sp)
	
	return s;
    420e:	|      move.l 32(sp),d0
}
    4212:	\----> movem.l (sp)+,d2-d3/a6
    4216:	       lea 56(sp),sp
    421a:	       rts

0000421c <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    421c:	       lea -32(sp),sp
    4220:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    4224:	       move.w 18128 <sliceBusy>,d0
    422a:	   /-- beq.s 4246 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    422c:	   |   pea 13ce3 <custom.c.87151361+0x4a2>
    4232:	   |   pea 13d01 <custom.c.87151361+0x4c0>
    4238:	   |   jsr 127a4 <KPrintF>
    423e:	   |   addq.l #8,sp
		return 0;
    4240:	   |   moveq #0,d0
    4242:	/--|-- bra.w 42da <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    4246:	|  \-> move.l 19c34 <bigDataFile>,40(sp)
    424e:	|      move.l 48(sp),d0
    4252:	|      add.l d0,d0
    4254:	|      add.l d0,d0
    4256:	|      move.l d0,d1
    4258:	|      move.l 19c3c <startOfDataIndex>,d0
    425e:	|      add.l d1,d0
    4260:	|      move.l d0,36(sp)
    4264:	|      moveq #-1,d0
    4266:	|      move.l d0,32(sp)
    426a:	|      move.l 19c54 <DOSBase>,d0
    4270:	|      movea.l d0,a6
    4272:	|      move.l 40(sp),d1
    4276:	|      move.l 36(sp),d2
    427a:	|      move.l 32(sp),d3
    427e:	|      jsr -66(a6)
    4282:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    4286:	|      move.l 19c34 <bigDataFile>,24(sp)
    428e:	|      move.l 19c34 <bigDataFile>,d0
    4294:	|      move.l d0,-(sp)
    4296:	|      jsr 718 <get4bytes>
    429c:	|      addq.l #4,sp
    429e:	|      move.l d0,20(sp)
    42a2:	|      clr.l 16(sp)
    42a6:	|      move.l 19c54 <DOSBase>,d0
    42ac:	|      movea.l d0,a6
    42ae:	|      move.l 24(sp),d1
    42b2:	|      move.l 20(sp),d2
    42b6:	|      move.l 16(sp),d3
    42ba:	|      jsr -66(a6)
    42be:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    42c2:	|      move.w #1,18128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    42ca:	|      move.l 19c34 <bigDataFile>,d0
    42d0:	|      move.l d0,-(sp)
    42d2:	|      jsr 718 <get4bytes>
    42d8:	|      addq.l #4,sp
}
    42da:	\----> movem.l (sp)+,d2-d3/a6
    42de:	       lea 32(sp),sp
    42e2:	       rts

000042e4 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    42e4:	       lea -32(sp),sp
    42e8:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    42ec:	       move.w 18128 <sliceBusy>,d0
    42f2:	   /-- beq.s 430e <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    42f4:	   |   pea 13ce3 <custom.c.87151361+0x4a2>
    42fa:	   |   pea 13d01 <custom.c.87151361+0x4c0>
    4300:	   |   jsr 127a4 <KPrintF>
    4306:	   |   addq.l #8,sp
        return FALSE;
    4308:	   |   clr.w d0
    430a:	/--|-- bra.w 439a <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    430e:	|  \-> move.l 19c34 <bigDataFile>,40(sp)
    4316:	|      move.l 48(sp),d0
    431a:	|      add.l d0,d0
    431c:	|      add.l d0,d0
    431e:	|      move.l d0,d1
    4320:	|      move.l 19c48 <startOfObjectIndex>,d0
    4326:	|      add.l d1,d0
    4328:	|      move.l d0,36(sp)
    432c:	|      moveq #-1,d0
    432e:	|      move.l d0,32(sp)
    4332:	|      move.l 19c54 <DOSBase>,d0
    4338:	|      movea.l d0,a6
    433a:	|      move.l 40(sp),d1
    433e:	|      move.l 36(sp),d2
    4342:	|      move.l 32(sp),d3
    4346:	|      jsr -66(a6)
    434a:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    434e:	|      move.l 19c34 <bigDataFile>,24(sp)
    4356:	|      move.l 19c34 <bigDataFile>,d0
    435c:	|      move.l d0,-(sp)
    435e:	|      jsr 718 <get4bytes>
    4364:	|      addq.l #4,sp
    4366:	|      move.l d0,20(sp)
    436a:	|      moveq #-1,d0
    436c:	|      move.l d0,16(sp)
    4370:	|      move.l 19c54 <DOSBase>,d0
    4376:	|      movea.l d0,a6
    4378:	|      move.l 24(sp),d1
    437c:	|      move.l 20(sp),d2
    4380:	|      move.l 16(sp),d3
    4384:	|      jsr -66(a6)
    4388:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    438c:	|      move.w #1,18128 <sliceBusy>
    4394:	|      move.w 18128 <sliceBusy>,d0
}
    439a:	\----> movem.l (sp)+,d2-d3/a6
    439e:	       lea 32(sp),sp
    43a2:	       rts

000043a4 <openSubSlice>:

BOOL openSubSlice (int num) {
    43a4:	       lea -32(sp),sp
    43a8:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    43ac:	       move.w 18128 <sliceBusy>,d0
    43b2:	   /-- beq.s 43ce <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    43b4:	   |   pea 13ce3 <custom.c.87151361+0x4a2>
    43ba:	   |   pea 13d01 <custom.c.87151361+0x4c0>
    43c0:	   |   jsr 127a4 <KPrintF>
    43c6:	   |   addq.l #8,sp
		return FALSE;
    43c8:	   |   clr.w d0
    43ca:	/--|-- bra.w 445a <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    43ce:	|  \-> move.l 19c34 <bigDataFile>,40(sp)
    43d6:	|      move.l 48(sp),d0
    43da:	|      add.l d0,d0
    43dc:	|      add.l d0,d0
    43de:	|      move.l d0,d1
    43e0:	|      move.l 19c44 <startOfSubIndex>,d0
    43e6:	|      add.l d1,d0
    43e8:	|      move.l d0,36(sp)
    43ec:	|      moveq #-1,d0
    43ee:	|      move.l d0,32(sp)
    43f2:	|      move.l 19c54 <DOSBase>,d0
    43f8:	|      movea.l d0,a6
    43fa:	|      move.l 40(sp),d1
    43fe:	|      move.l 36(sp),d2
    4402:	|      move.l 32(sp),d3
    4406:	|      jsr -66(a6)
    440a:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    440e:	|      move.l 19c34 <bigDataFile>,24(sp)
    4416:	|      move.l 19c34 <bigDataFile>,d0
    441c:	|      move.l d0,-(sp)
    441e:	|      jsr 718 <get4bytes>
    4424:	|      addq.l #4,sp
    4426:	|      move.l d0,20(sp)
    442a:	|      moveq #-1,d0
    442c:	|      move.l d0,16(sp)
    4430:	|      move.l 19c54 <DOSBase>,d0
    4436:	|      movea.l d0,a6
    4438:	|      move.l 24(sp),d1
    443c:	|      move.l 20(sp),d2
    4440:	|      move.l 16(sp),d3
    4444:	|      jsr -66(a6)
    4448:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    444c:	|      move.w #1,18128 <sliceBusy>
    4454:	|      move.w 18128 <sliceBusy>,d0
}
    445a:	\----> movem.l (sp)+,d2-d3/a6
    445e:	       lea 32(sp),sp
    4462:	       rts

00004464 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    4464:	       lea -180(sp),sp
    4468:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    446c:	       tst.l 196(sp)
    4470:	/----- beq.s 44b0 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    4472:	|      move.l 196(sp),19c34 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    447a:	|      move.l 196(sp),168(sp)
    4480:	|      clr.l 164(sp)
    4484:	|      clr.l 160(sp)
    4488:	|      move.l 19c54 <DOSBase>,d0
    448e:	|      movea.l d0,a6
    4490:	|      move.l 168(sp),d1
    4494:	|      move.l 164(sp),d2
    4498:	|      move.l 160(sp),d3
    449c:	|      jsr -66(a6)
    44a0:	|      move.l d0,156(sp)
    44a4:	|      move.l 156(sp),d0
    44a8:	|      move.l d0,19c38 <startIndex>
    44ae:	|  /-- bra.s 44ea <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    44b0:	\--|-> move.l 19c34 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    44b8:	   |   move.l 196(sp),184(sp)
    44be:	   |   move.l 19c38 <startIndex>,d0
    44c4:	   |   move.l d0,180(sp)
    44c8:	   |   moveq #-1,d0
    44ca:	   |   move.l d0,176(sp)
    44ce:	   |   move.l 19c54 <DOSBase>,d0
    44d4:	   |   movea.l d0,a6
    44d6:	   |   move.l 184(sp),d1
    44da:	   |   move.l 180(sp),d2
    44de:	   |   move.l 176(sp),d3
    44e2:	   |   jsr -66(a6)
    44e6:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    44ea:	   \-> clr.w 18128 <sliceBusy>

	if (skipBefore > numLanguages) {
    44f0:	       move.l 204(sp),d0
    44f4:	       cmp.l 200(sp),d0
    44f8:	   /-- bls.s 450c <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    44fa:	   |   pea 13d1b <custom.c.87151361+0x4da>
    4500:	   |   jsr 127a4 <KPrintF>
    4506:	   |   addq.l #4,sp
		skipBefore = 0;
    4508:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    450c:	   \-> move.l 200(sp),d0
    4510:	       sub.l 204(sp),d0
    4514:	       move.l d0,188(sp)
	while (skipBefore) {
    4518:	   /-- bra.s 4556 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    451a:	/--|-> move.l 196(sp),24(sp)
    4520:	|  |   move.l 196(sp),-(sp)
    4524:	|  |   jsr 718 <get4bytes>
    452a:	|  |   addq.l #4,sp
    452c:	|  |   move.l d0,20(sp)
    4530:	|  |   moveq #-1,d0
    4532:	|  |   move.l d0,16(sp)
    4536:	|  |   move.l 19c54 <DOSBase>,d0
    453c:	|  |   movea.l d0,a6
    453e:	|  |   move.l 24(sp),d1
    4542:	|  |   move.l 20(sp),d2
    4546:	|  |   move.l 16(sp),d3
    454a:	|  |   jsr -66(a6)
    454e:	|  |   move.l d0,12(sp)
		skipBefore --;
    4552:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    4556:	|  \-> tst.l 204(sp)
    455a:	\----- bne.s 451a <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    455c:	       move.l 196(sp),152(sp)
    4562:	       clr.l 148(sp)
    4566:	       clr.l 144(sp)
    456a:	       move.l 19c54 <DOSBase>,d0
    4570:	       movea.l d0,a6
    4572:	       move.l 152(sp),d1
    4576:	       move.l 148(sp),d2
    457a:	       move.l 144(sp),d3
    457e:	       jsr -66(a6)
    4582:	       move.l d0,140(sp)
    4586:	       move.l 140(sp),d0
    458a:	       addq.l #4,d0
    458c:	       move.l d0,19c40 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    4592:	       move.l 196(sp),136(sp)
    4598:	       move.l 196(sp),-(sp)
    459c:	       jsr 718 <get4bytes>
    45a2:	       addq.l #4,sp
    45a4:	       move.l d0,132(sp)
    45a8:	       moveq #-1,d0
    45aa:	       move.l d0,128(sp)
    45ae:	       move.l 19c54 <DOSBase>,d0
    45b4:	       movea.l d0,a6
    45b6:	       move.l 136(sp),d1
    45ba:	       move.l 132(sp),d2
    45be:	       move.l 128(sp),d3
    45c2:	       jsr -66(a6)
    45c6:	       move.l d0,124(sp)

	while (skipAfter) {
    45ca:	   /-- bra.s 4608 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    45cc:	/--|-> move.l 196(sp),40(sp)
    45d2:	|  |   move.l 196(sp),-(sp)
    45d6:	|  |   jsr 718 <get4bytes>
    45dc:	|  |   addq.l #4,sp
    45de:	|  |   move.l d0,36(sp)
    45e2:	|  |   moveq #-1,d0
    45e4:	|  |   move.l d0,32(sp)
    45e8:	|  |   move.l 19c54 <DOSBase>,d0
    45ee:	|  |   movea.l d0,a6
    45f0:	|  |   move.l 40(sp),d1
    45f4:	|  |   move.l 36(sp),d2
    45f8:	|  |   move.l 32(sp),d3
    45fc:	|  |   jsr -66(a6)
    4600:	|  |   move.l d0,28(sp)
		skipAfter --;
    4604:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    4608:	|  \-> tst.l 188(sp)
    460c:	\----- bne.s 45cc <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    460e:	       move.l 196(sp),120(sp)
    4614:	       clr.l 116(sp)
    4618:	       clr.l 112(sp)
    461c:	       move.l 19c54 <DOSBase>,d0
    4622:	       movea.l d0,a6
    4624:	       move.l 120(sp),d1
    4628:	       move.l 116(sp),d2
    462c:	       move.l 112(sp),d3
    4630:	       jsr -66(a6)
    4634:	       move.l d0,108(sp)
    4638:	       move.l 108(sp),d0
    463c:	       addq.l #4,d0
    463e:	       move.l d0,19c44 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    4644:	       move.l 196(sp),104(sp)
    464a:	       move.l 196(sp),-(sp)
    464e:	       jsr 718 <get4bytes>
    4654:	       addq.l #4,sp
    4656:	       move.l d0,100(sp)
    465a:	       clr.l 96(sp)
    465e:	       move.l 19c54 <DOSBase>,d0
    4664:	       movea.l d0,a6
    4666:	       move.l 104(sp),d1
    466a:	       move.l 100(sp),d2
    466e:	       move.l 96(sp),d3
    4672:	       jsr -66(a6)
    4676:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    467a:	       move.l 196(sp),88(sp)
    4680:	       clr.l 84(sp)
    4684:	       clr.l 80(sp)
    4688:	       move.l 19c54 <DOSBase>,d0
    468e:	       movea.l d0,a6
    4690:	       move.l 88(sp),d1
    4694:	       move.l 84(sp),d2
    4698:	       move.l 80(sp),d3
    469c:	       jsr -66(a6)
    46a0:	       move.l d0,76(sp)
    46a4:	       move.l 76(sp),d0
    46a8:	       addq.l #4,d0
    46aa:	       move.l d0,19c48 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    46b0:	       move.l 196(sp),72(sp)
    46b6:	       move.l 196(sp),-(sp)
    46ba:	       jsr 718 <get4bytes>
    46c0:	       addq.l #4,sp
    46c2:	       move.l d0,68(sp)
    46c6:	       clr.l 64(sp)
    46ca:	       move.l 19c54 <DOSBase>,d0
    46d0:	       movea.l d0,a6
    46d2:	       move.l 72(sp),d1
    46d6:	       move.l 68(sp),d2
    46da:	       move.l 64(sp),d3
    46de:	       jsr -66(a6)
    46e2:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    46e6:	       move.l 196(sp),56(sp)
    46ec:	       clr.l 52(sp)
    46f0:	       clr.l 48(sp)
    46f4:	       move.l 19c54 <DOSBase>,d0
    46fa:	       movea.l d0,a6
    46fc:	       move.l 56(sp),d1
    4700:	       move.l 52(sp),d2
    4704:	       move.l 48(sp),d3
    4708:	       jsr -66(a6)
    470c:	       move.l d0,44(sp)
    4710:	       move.l 44(sp),d0
    4714:	       move.l d0,19c3c <startOfDataIndex>
    471a:	       nop
    471c:	       movem.l (sp)+,d2-d3/a6
    4720:	       lea 180(sp),sp
    4724:	       rts

00004726 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    4726:	    lea -20(sp),sp
    472a:	    move.l a6,-(sp)
    472c:	    move.l d7,-(sp)
	APTR vbr = 0;
    472e:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    4732:	    move.w #20090,10(sp)
    4738:	    move.w #2049,12(sp)
    473e:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    4744:	    movea.l 19c4c <SysBase>,a0
    474a:	    move.w 296(a0),d0
    474e:	    move.w d0,d0
    4750:	    andi.l #65535,d0
    4756:	    moveq #1,d1
    4758:	    and.l d1,d0
    475a:	/-- beq.s 4788 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    475c:	|   lea 28(sp),a0
    4760:	|   lea -18(a0),a0
    4764:	|   move.l a0,20(sp)
    4768:	|   move.l 19c4c <SysBase>,d0
    476e:	|   movea.l d0,a6
    4770:	|   move.l 20(sp),d7
    4774:	|   exg d7,a5
    4776:	|   jsr -30(a6)
    477a:	|   exg d7,a5
    477c:	|   move.l d0,16(sp)
    4780:	|   move.l 16(sp),d0
    4784:	|   move.l d0,24(sp)

	return vbr;
    4788:	\-> move.l 24(sp),d0
}
    478c:	    move.l (sp)+,d7
    478e:	    movea.l (sp)+,a6
    4790:	    lea 20(sp),sp
    4794:	    rts

00004796 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    4796:	movea.l 19c72 <VBR>,a0
    479c:	lea 108(a0),a0
    47a0:	move.l 4(sp),(a0)
}
    47a4:	nop
    47a6:	rts

000047a8 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    47a8:	movea.l 19c72 <VBR>,a0
    47ae:	move.l 108(a0),d0
}
    47b2:	rts

000047b4 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    47b4:	       subq.l #8,sp
    47b6:	       move.l a6,-(sp)
	Forbid();
    47b8:	       move.l 19c4c <SysBase>,d0
    47be:	       movea.l d0,a6
    47c0:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	SystemADKCON=custom->adkconr;
    47c4:	       movea.l 19c50 <custom>,a0
    47ca:	       move.w 16(a0),d0
    47ce:	       move.w d0,19c70 <SystemADKCON>
	SystemInts=custom->intenar;
    47d4:	       movea.l 19c50 <custom>,a0
    47da:	       move.w 28(a0),d0
    47de:	       move.w d0,19c6c <SystemInts>
	SystemDMA=custom->dmaconr;
    47e4:	       movea.l 19c50 <custom>,a0
    47ea:	       move.w 2(a0),d0
    47ee:	       move.w d0,19c6e <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    47f4:	       movea.l 19c58 <GfxBase>,a0
    47fa:	       move.l 34(a0),d0
    47fe:	       move.l d0,19c7a <ActiView>

	LoadView(0);
    4804:	       clr.l 4(sp)
    4808:	       move.l 19c58 <GfxBase>,d0
    480e:	       movea.l d0,a6
    4810:	       movea.l 4(sp),a1
    4814:	       jsr -222(a6)
	WaitTOF();
    4818:	       move.l 19c58 <GfxBase>,d0
    481e:	       movea.l d0,a6
    4820:	       jsr -270(a6)
	WaitTOF();
    4824:	       move.l 19c58 <GfxBase>,d0
    482a:	       movea.l d0,a6
    482c:	       jsr -270(a6)

	WaitVbl();
    4830:	       jsr 126cc <WaitVbl>
	WaitVbl();
    4836:	       jsr 126cc <WaitVbl>

	OwnBlitter();
    483c:	       move.l 19c58 <GfxBase>,d0
    4842:	       movea.l d0,a6
    4844:	       jsr -456(a6)
	WaitBlit();	
    4848:	       move.l 19c58 <GfxBase>,d0
    484e:	       movea.l d0,a6
    4850:	       jsr -228(a6)
	Disable();
    4854:	       move.l 19c4c <SysBase>,d0
    485a:	       movea.l d0,a6
    485c:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	custom->dmacon=0x7fff;//Clear all DMA channels
    4860:	       movea.l 19c50 <custom>,a0
    4866:	       move.w #32767,150(a0)

	//set all colors black
	for(int a=0;a<32;a++)
    486c:	       clr.l 8(sp)
    4870:	   /-- bra.s 488e <TakeSystem+0xda>
		custom->color[a]=0;
    4872:	/--|-> movea.l 19c50 <custom>,a0
    4878:	|  |   move.l 8(sp),d0
    487c:	|  |   addi.l #192,d0
    4882:	|  |   add.l d0,d0
    4884:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    488a:	|  |   addq.l #1,8(sp)
    488e:	|  \-> moveq #31,d0
    4890:	|      cmp.l 8(sp),d0
    4894:	\----- bge.s 4872 <TakeSystem+0xbe>

	WaitVbl();
    4896:	       jsr 126cc <WaitVbl>
	WaitVbl();
    489c:	       jsr 126cc <WaitVbl>

	VBR=GetVBR();
    48a2:	       jsr 4726 <GetVBR>
    48a8:	       move.l d0,19c72 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    48ae:	       jsr 47a8 <GetInterruptHandler>
    48b4:	       move.l d0,19c76 <SystemIrq>
}
    48ba:	       nop
    48bc:	       movea.l (sp)+,a6
    48be:	       addq.l #8,sp
    48c0:	       rts

000048c2 <FreeSystem>:

void FreeSystem() { 
    48c2:	subq.l #4,sp
    48c4:	move.l a6,-(sp)
	WaitVbl();
    48c6:	jsr 126cc <WaitVbl>
	WaitBlit();
    48cc:	move.l 19c58 <GfxBase>,d0
    48d2:	movea.l d0,a6
    48d4:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    48d8:	movea.l 19c50 <custom>,a0
    48de:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    48e4:	movea.l 19c50 <custom>,a0
    48ea:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    48f0:	movea.l 19c50 <custom>,a0
    48f6:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    48fc:	move.l 19c76 <SystemIrq>,d0
    4902:	move.l d0,-(sp)
    4904:	jsr 4796 <SetInterruptHandler>
    490a:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    490c:	movea.l 19c58 <GfxBase>,a0
    4912:	move.l 38(a0),d0
    4916:	movea.l 19c50 <custom>,a0
    491c:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    4920:	movea.l 19c58 <GfxBase>,a0
    4926:	move.l 50(a0),d0
    492a:	movea.l 19c50 <custom>,a0
    4930:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    4934:	movea.l 19c50 <custom>,a0
    493a:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    4940:	move.w 19c6e <SystemDMA>,d0
    4946:	movea.l 19c50 <custom>,a0
    494c:	ori.w #-32768,d0
    4950:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    4954:	move.w 19c70 <SystemADKCON>,d0
    495a:	movea.l 19c50 <custom>,a0
    4960:	ori.w #-32768,d0
    4964:	move.w d0,158(a0)

	WaitBlit();	
    4968:	move.l 19c58 <GfxBase>,d0
    496e:	movea.l d0,a6
    4970:	jsr -228(a6)
	DisownBlitter();
    4974:	move.l 19c58 <GfxBase>,d0
    497a:	movea.l d0,a6
    497c:	jsr -462(a6)
	Enable();
    4980:	move.l 19c4c <SysBase>,d0
    4986:	movea.l d0,a6
    4988:	jsr -126(a6)

	LoadView(ActiView);
    498c:	move.l 19c7a <ActiView>,4(sp)
    4994:	move.l 19c58 <GfxBase>,d0
    499a:	movea.l d0,a6
    499c:	movea.l 4(sp),a1
    49a0:	jsr -222(a6)
	WaitTOF();
    49a4:	move.l 19c58 <GfxBase>,d0
    49aa:	movea.l d0,a6
    49ac:	jsr -270(a6)
	WaitTOF();
    49b0:	move.l 19c58 <GfxBase>,d0
    49b6:	movea.l d0,a6
    49b8:	jsr -270(a6)

	Permit();
    49bc:	move.l 19c4c <SysBase>,d0
    49c2:	movea.l d0,a6
    49c4:	jsr -138(a6)
}
    49c8:	nop
    49ca:	movea.l (sp)+,a6
    49cc:	addq.l #4,sp
    49ce:	rts

000049d0 <p61Init>:
	// The Player® 6.1A: Copyright © 1992-95 Jarno Paananen
	// P61.testmod - Module by Skylord/Sector 7 
	INCBIN(player, "player610.6.no_cia.bin")
	INCBIN_CHIP(module, "testmod.p61")

	int p61Init(const void* module) { // returns 0 if success, non-zero otherwise
    49d0:	move.l a3,-(sp)
    49d2:	move.l a2,-(sp)
		register volatile const void* _a0 ASM("a0") = module;
    49d4:	movea.l 12(sp),a0
		register volatile const void* _a1 ASM("a1") = NULL;
    49d8:	suba.l a1,a1
		register volatile const void* _a2 ASM("a2") = NULL;
    49da:	suba.l a2,a2
		register volatile const void* _a3 ASM("a3") = player;
    49dc:	move.l 1812a <player>,d0
    49e2:	movea.l d0,a3
		register                int   _d0 ASM("d0"); // return value
		__asm volatile (
    49e4:	movem.l d1-d7/a4-a6,-(sp)
    49e8:	jsr (a3)
    49ea:	movem.l (sp)+,d1-d7/a4-a6
			"movem.l (%%sp)+,%%d1-%%d7/%%a4-%%a6"
		: "=r" (_d0), "+rf"(_a0), "+rf"(_a1), "+rf"(_a2), "+rf"(_a3)
		:
		: "cc", "memory");
		return _d0;
	}
    49ee:	movea.l (sp)+,a2
    49f0:	movea.l (sp)+,a3
    49f2:	rts

000049f4 <p61End>:
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}

	void p61End() {
    49f4:	move.l a6,-(sp)
    49f6:	move.l a3,-(sp)
		register volatile const void* _a3 ASM("a3") = player;
    49f8:	move.l 1812a <player>,d0
    49fe:	movea.l d0,a3
		register volatile const void* _a6 ASM("a6") = (void*)0xdff000;
    4a00:	movea.l #14675968,a6
		__asm volatile (
    4a06:	movem.l d0-d1/a0-a1,-(sp)
    4a0a:	jsr 8(a3)
    4a0e:	movem.l (sp)+,d0-d1/a0-a1
			"jsr 8(%%a3)\n"
			"movem.l (%%sp)+,%%d0-%%d1/%%a0-%%a1"
		: "+rf"(_a3), "+rf"(_a6)
		:
		: "cc", "memory");
	}
    4a12:	nop
    4a14:	movea.l (sp)+,a3
    4a16:	movea.l (sp)+,a6
    4a18:	rts

00004a1a <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    4a1a:	    lea -128(sp),sp
    4a1e:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    4a22:	    movea.w #4,a0
    4a26:	    move.l (a0),d0
    4a28:	    move.l d0,19c4c <SysBase>
	custom = (struct Custom*)0xdff000;	
    4a2e:	    move.l #14675968,19c50 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    4a38:	    move.l #87755,136(sp)
    4a40:	    clr.l 132(sp)
    4a44:	    move.l 19c4c <SysBase>,d0
    4a4a:	    movea.l d0,a6
    4a4c:	    movea.l 136(sp),a1
    4a50:	    move.l 132(sp),d0
    4a54:	    jsr -552(a6)
    4a58:	    move.l d0,128(sp)
    4a5c:	    move.l 128(sp),d0
    4a60:	    move.l d0,19c58 <GfxBase>
	if (!GfxBase)
    4a66:	    move.l 19c58 <GfxBase>,d0
    4a6c:	/-- bne.s 4a82 <main+0x68>
		Exit(0);
    4a6e:	|   clr.l 124(sp)
    4a72:	|   move.l 19c54 <DOSBase>,d0
    4a78:	|   movea.l d0,a6
    4a7a:	|   move.l 124(sp),d1
    4a7e:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    4a82:	\-> move.l #87772,120(sp)
    4a8a:	    clr.l 116(sp)
    4a8e:	    move.l 19c4c <SysBase>,d0
    4a94:	    movea.l d0,a6
    4a96:	    movea.l 120(sp),a1
    4a9a:	    move.l 116(sp),d0
    4a9e:	    jsr -552(a6)
    4aa2:	    move.l d0,112(sp)
    4aa6:	    move.l 112(sp),d0
    4aaa:	    move.l d0,19c54 <DOSBase>
	if (!DOSBase)
    4ab0:	    move.l 19c54 <DOSBase>,d0
    4ab6:	/-- bne.s 4acc <main+0xb2>
		Exit(0);
    4ab8:	|   clr.l 108(sp)
    4abc:	|   move.l 19c54 <DOSBase>,d0
    4ac2:	|   movea.l d0,a6
    4ac4:	|   move.l 108(sp),d1
    4ac8:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    4acc:	\-> move.l #87784,104(sp)
    4ad4:	    clr.l 100(sp)
    4ad8:	    move.l 19c4c <SysBase>,d0
    4ade:	    movea.l d0,a6
    4ae0:	    movea.l 104(sp),a1
    4ae4:	    move.l 100(sp),d0
    4ae8:	    jsr -552(a6)
    4aec:	    move.l d0,96(sp)
    4af0:	    move.l 96(sp),d0
    4af4:	    move.l d0,19c5c <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    4afa:	    move.l 19c5c <MathIeeeSingBasBase>,d0
    4b00:	/-- bne.s 4b16 <main+0xfc>
		Exit(0);	
    4b02:	|   clr.l 92(sp)
    4b06:	|   move.l 19c54 <DOSBase>,d0
    4b0c:	|   movea.l d0,a6
    4b0e:	|   move.l 92(sp),d1
    4b12:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    4b16:	\-> move.l #87808,88(sp)
    4b1e:	    clr.l 84(sp)
    4b22:	    move.l 19c4c <SysBase>,d0
    4b28:	    movea.l d0,a6
    4b2a:	    movea.l 88(sp),a1
    4b2e:	    move.l 84(sp),d0
    4b32:	    jsr -552(a6)
    4b36:	    move.l d0,80(sp)
    4b3a:	    move.l 80(sp),d0
    4b3e:	    move.l d0,19c60 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    4b44:	    move.l 19c60 <MathIeeeSingTransBase>,d0
    4b4a:	/-- bne.s 4b60 <main+0x146>
		Exit(0);
    4b4c:	|   clr.l 76(sp)
    4b50:	|   move.l 19c54 <DOSBase>,d0
    4b56:	|   movea.l d0,a6
    4b58:	|   move.l 76(sp),d1
    4b5c:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    4b60:	\-> move.l #87834,72(sp)
    4b68:	    clr.l 68(sp)
    4b6c:	    move.l 19c4c <SysBase>,d0
    4b72:	    movea.l d0,a6
    4b74:	    movea.l 72(sp),a1
    4b78:	    move.l 68(sp),d0
    4b7c:	    jsr -552(a6)
    4b80:	    move.l d0,64(sp)
    4b84:	    move.l 64(sp),d0
    4b88:	    move.l d0,19c68 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    4b8e:	    move.l 19c68 <MathIeeeDoubTransBase>,d0
    4b94:	/-- bne.s 4baa <main+0x190>
		Exit(0);
    4b96:	|   clr.l 60(sp)
    4b9a:	|   move.l 19c54 <DOSBase>,d0
    4ba0:	|   movea.l d0,a6
    4ba2:	|   move.l 60(sp),d1
    4ba6:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    4baa:	\-> move.l #87860,56(sp)
    4bb2:	    clr.l 52(sp)
    4bb6:	    move.l 19c4c <SysBase>,d0
    4bbc:	    movea.l d0,a6
    4bbe:	    movea.l 56(sp),a1
    4bc2:	    move.l 52(sp),d0
    4bc6:	    jsr -552(a6)
    4bca:	    move.l d0,48(sp)
    4bce:	    move.l 48(sp),d0
    4bd2:	    move.l d0,19c64 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    4bd8:	    move.l 19c64 <MathIeeeDoubBasBase>,d0
    4bde:	/-- bne.s 4bf4 <main+0x1da>
		Exit(0);
    4be0:	|   clr.l 44(sp)
    4be4:	|   move.l 19c54 <DOSBase>,d0
    4bea:	|   movea.l d0,a6
    4bec:	|   move.l 44(sp),d1
    4bf0:	|   jsr -144(a6)
	

	KPrintF("Hello debugger from Amiga!\n");
    4bf4:	\-> pea 1574c <newfatal.c.307beca7+0x60>
    4bfa:	    jsr 127a4 <KPrintF>
    4c00:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console!\n", 15);
    4c02:	    move.l 19c54 <DOSBase>,d0
    4c08:	    movea.l d0,a6
    4c0a:	    jsr -60(a6)
    4c0e:	    move.l d0,40(sp)
    4c12:	    move.l 40(sp),d0
    4c16:	    move.l d0,36(sp)
    4c1a:	    move.l #87912,32(sp)
    4c22:	    moveq #15,d0
    4c24:	    move.l d0,28(sp)
    4c28:	    move.l 19c54 <DOSBase>,d0
    4c2e:	    movea.l d0,a6
    4c30:	    move.l 36(sp),d1
    4c34:	    move.l 32(sp),d2
    4c38:	    move.l 28(sp),d3
    4c3c:	    jsr -48(a6)
    4c40:	    move.l d0,24(sp)
	Delay(50);
    4c44:	    moveq #50,d0
    4c46:	    move.l d0,20(sp)
    4c4a:	    move.l 19c54 <DOSBase>,d0
    4c50:	    movea.l d0,a6
    4c52:	    move.l 20(sp),d1
    4c56:	    jsr -198(a6)

	warpmode(1);
    4c5a:	    pea 1 <_start+0x1>
    4c5e:	    jsr 1280e <warpmode>
    4c64:	    addq.l #4,sp
	// TODO: precalc stuff here
#ifdef MUSIC
	if(p61Init(module) != 0)
    4c66:	    move.l 1812e <module>,d0
    4c6c:	    move.l d0,-(sp)
    4c6e:	    jsr 49d0 <p61Init>
    4c74:	    addq.l #4,sp
    4c76:	    tst.l d0
    4c78:	/-- beq.s 4c88 <main+0x26e>
		KPrintF("p61Init failed!\n");
    4c7a:	|   pea 15778 <newfatal.c.307beca7+0x8c>
    4c80:	|   jsr 127a4 <KPrintF>
    4c86:	|   addq.l #4,sp
#endif
	warpmode(0);
    4c88:	\-> clr.l -(sp)
    4c8a:	    jsr 1280e <warpmode>
    4c90:	    addq.l #4,sp

	TakeSystem();
    4c92:	    jsr 47b4 <TakeSystem>

	custom->dmacon = 0x87ff;
    4c98:	    movea.l 19c50 <custom>,a0
    4c9e:	    move.w #-30721,150(a0)
	WaitVbl();
    4ca4:	    jsr 126cc <WaitVbl>

	main_sludge(argc, argv);
    4caa:	    move.l 148(sp),-(sp)
    4cae:	    move.l 148(sp),-(sp)
    4cb2:	    jsr 1434 <main_sludge>
    4cb8:	    addq.l #8,sp
	debug_register_palette(colors, "image.pal", 32, 0);
	debug_register_copperlist(copper1, "copper1", 1024, 0);
	debug_register_copperlist(copper2, "copper2", sizeof(copper2), 0);*/

#ifdef MUSIC
	p61End();
    4cba:	    jsr 49f4 <p61End>
#endif

	// END
	FreeSystem();
    4cc0:	    jsr 48c2 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    4cc6:	    move.l 19c54 <DOSBase>,16(sp)
    4cce:	    move.l 19c4c <SysBase>,d0
    4cd4:	    movea.l d0,a6
    4cd6:	    movea.l 16(sp),a1
    4cda:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    4cde:	    move.l 19c58 <GfxBase>,12(sp)
    4ce6:	    move.l 19c4c <SysBase>,d0
    4cec:	    movea.l d0,a6
    4cee:	    movea.l 12(sp),a1
    4cf2:	    jsr -414(a6)
    4cf6:	    moveq #0,d0
}
    4cf8:	    movem.l (sp)+,d2-d3/a6
    4cfc:	    lea 128(sp),sp
    4d00:	    rts

00004d02 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    4d02:	    lea -16(sp),sp
    4d06:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    4d08:	    moveq #8,d0
    4d0a:	    move.l d0,16(sp)
    4d0e:	    clr.l 12(sp)
    4d12:	    move.l 19c4c <SysBase>,d0
    4d18:	    movea.l d0,a6
    4d1a:	    move.l 16(sp),d0
    4d1e:	    move.l 12(sp),d1
    4d22:	    jsr -684(a6)
    4d26:	    move.l d0,8(sp)
    4d2a:	    move.l 8(sp),d0
    4d2e:	    move.l d0,4(sp)
	if (!newStat) {
    4d32:	/-- bne.s 4d62 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    4d34:	|   movea.l 18132 <nowStatus>,a0
    4d3a:	|   move.l (a0),d0
    4d3c:	|   movea.l 4(sp),a0
    4d40:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    4d44:	|   pea 13988 <custom.c.87151361+0x147>
    4d4a:	|   jsr b8 <copyString>
    4d50:	|   addq.l #4,sp
    4d52:	|   movea.l 4(sp),a0
    4d56:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    4d58:	|   movea.l 18132 <nowStatus>,a0
    4d5e:	|   move.l 4(sp),(a0)
	}
}
    4d62:	\-> nop
    4d64:	    movea.l (sp)+,a6
    4d66:	    lea 16(sp),sp
    4d6a:	    rts

00004d6c <clearStatusBar>:

void clearStatusBar () {
    4d6c:	       lea -16(sp),sp
    4d70:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    4d72:	       movea.l 18132 <nowStatus>,a0
    4d78:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    4d7c:	       movea.l 18132 <nowStatus>,a0
    4d82:	       moveq #-1,d0
    4d84:	       move.l d0,6(a0)
	while (stat) {
    4d88:	   /-- bra.s 4dc8 <clearStatusBar+0x5c>
		kill = stat;
    4d8a:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    4d90:	|  |   movea.l 16(sp),a0
    4d94:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    4d9a:	|  |   movea.l 12(sp),a0
    4d9e:	|  |   move.l (a0),8(sp)
    4da2:	|  |   move.l 19c4c <SysBase>,d0
    4da8:	|  |   movea.l d0,a6
    4daa:	|  |   movea.l 8(sp),a1
    4dae:	|  |   jsr -690(a6)
		FreeVec(kill);
    4db2:	|  |   move.l 12(sp),4(sp)
    4db8:	|  |   move.l 19c4c <SysBase>,d0
    4dbe:	|  |   movea.l d0,a6
    4dc0:	|  |   movea.l 4(sp),a1
    4dc4:	|  |   jsr -690(a6)
	while (stat) {
    4dc8:	|  \-> tst.l 16(sp)
    4dcc:	\----- bne.s 4d8a <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    4dce:	       movea.l 18132 <nowStatus>,a0
    4dd4:	       clr.l (a0)
}
    4dd6:	       nop
    4dd8:	       movea.l (sp)+,a6
    4dda:	       lea 16(sp),sp
    4dde:	       rts

00004de0 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    4de0:	clr.l 19c7e <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    4de6:	move.w #-1,19c82 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    4dee:	moveq #-1,d0
    4df0:	move.l d0,19c84 <mainStatus+0x6>
	mainStatus.statusX = 10;
    4df6:	moveq #10,d0
    4df8:	move.l d0,19c88 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    4dfe:	movea.l 19b50 <winHeight>,a0
    4e04:	lea -15(a0),a0
    4e08:	move.l a0,d0
    4e0a:	move.l d0,19c8c <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    4e10:	nop
    4e12:	rts

00004e14 <killLastStatus>:

void killLastStatus () {
    4e14:	    lea -12(sp),sp
    4e18:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    4e1a:	    movea.l 18132 <nowStatus>,a0
    4e20:	    move.l (a0),d0
    4e22:	/-- beq.s 4e6c <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    4e24:	|   movea.l 18132 <nowStatus>,a0
    4e2a:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    4e2e:	|   movea.l 18132 <nowStatus>,a0
    4e34:	|   movea.l 12(sp),a1
    4e38:	|   move.l 4(a1),d0
    4e3c:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    4e3e:	|   movea.l 12(sp),a0
    4e42:	|   move.l (a0),8(sp)
    4e46:	|   move.l 19c4c <SysBase>,d0
    4e4c:	|   movea.l d0,a6
    4e4e:	|   movea.l 8(sp),a1
    4e52:	|   jsr -690(a6)
		FreeVec(kill);
    4e56:	|   move.l 12(sp),4(sp)
    4e5c:	|   move.l 19c4c <SysBase>,d0
    4e62:	|   movea.l d0,a6
    4e64:	|   movea.l 4(sp),a1
    4e68:	|   jsr -690(a6)
	}
}
    4e6c:	\-> nop
    4e6e:	    movea.l (sp)+,a6
    4e70:	    lea 12(sp),sp
    4e74:	    rts

00004e76 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    4e76:	movea.l 18132 <nowStatus>,a0
    4e7c:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    4e82:	movea.l 18132 <nowStatus>,a0
    4e88:	move.l 8(sp),14(a0)
}
    4e8e:	nop
    4e90:	rts

00004e92 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    4e92:	       lea -100(sp),sp
    4e96:	       move.l a6,-(sp)
    4e98:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    4e9a:	       movea.l 18132 <nowStatus>,a0
    4ea0:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    4ea4:	       movea.l 18132 <nowStatus>,a0
    4eaa:	       move.w 4(a0),d0
    4eae:	       move.w d0,d0
    4eb0:	       andi.l #65535,d0
    4eb6:	       move.l 112(sp),-(sp)
    4eba:	       move.l d0,-(sp)
    4ebc:	       jsr 8d0 <put2bytes>
    4ec2:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    4ec4:	       movea.l 18132 <nowStatus>,a0
    4eca:	       move.l 6(a0),d0
    4ece:	       move.l d0,d0
    4ed0:	       movea.w d0,a0
    4ed2:	       move.l 112(sp),-(sp)
    4ed6:	       move.l a0,-(sp)
    4ed8:	       jsr a9c <putSigned>
    4ede:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    4ee0:	       movea.l 18132 <nowStatus>,a0
    4ee6:	       move.l 10(a0),d0
    4eea:	       move.l 112(sp),-(sp)
    4eee:	       move.l d0,-(sp)
    4ef0:	       jsr 8d0 <put2bytes>
    4ef6:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    4ef8:	       movea.l 18132 <nowStatus>,a0
    4efe:	       move.l 14(a0),d0
    4f02:	       move.l 112(sp),-(sp)
    4f06:	       move.l d0,-(sp)
    4f08:	       jsr 8d0 <put2bytes>
    4f0e:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    4f10:	       move.l 112(sp),100(sp)
    4f16:	       movea.l 18132 <nowStatus>,a0
    4f1c:	       move.l 18(a0),96(sp)
    4f22:	       move.l 19c54 <DOSBase>,d0
    4f28:	       movea.l d0,a6
    4f2a:	       move.l 100(sp),d1
    4f2e:	       move.l 96(sp),d2
    4f32:	       jsr -312(a6)
    4f36:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    4f3a:	       move.l 112(sp),88(sp)
    4f40:	       movea.l 18132 <nowStatus>,a0
    4f46:	       move.l 22(a0),84(sp)
    4f4c:	       move.l 19c54 <DOSBase>,d0
    4f52:	       movea.l d0,a6
    4f54:	       move.l 88(sp),d1
    4f58:	       move.l 84(sp),d2
    4f5c:	       jsr -312(a6)
    4f60:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    4f64:	       move.l 112(sp),76(sp)
    4f6a:	       movea.l 18132 <nowStatus>,a0
    4f70:	       move.l 26(a0),72(sp)
    4f76:	       move.l 19c54 <DOSBase>,d0
    4f7c:	       movea.l d0,a6
    4f7e:	       move.l 76(sp),d1
    4f82:	       move.l 72(sp),d2
    4f86:	       jsr -312(a6)
    4f8a:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    4f8e:	       move.l 112(sp),64(sp)
    4f94:	       movea.l 18132 <nowStatus>,a0
    4f9a:	       move.l 30(a0),60(sp)
    4fa0:	       move.l 19c54 <DOSBase>,d0
    4fa6:	       movea.l d0,a6
    4fa8:	       move.l 64(sp),d1
    4fac:	       move.l 60(sp),d2
    4fb0:	       jsr -312(a6)
    4fb4:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    4fb8:	       move.l 112(sp),52(sp)
    4fbe:	       movea.l 18132 <nowStatus>,a0
    4fc4:	       move.l 34(a0),48(sp)
    4fca:	       move.l 19c54 <DOSBase>,d0
    4fd0:	       movea.l d0,a6
    4fd2:	       move.l 52(sp),d1
    4fd6:	       move.l 48(sp),d2
    4fda:	       jsr -312(a6)
    4fde:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    4fe2:	       move.l 112(sp),40(sp)
    4fe8:	       movea.l 18132 <nowStatus>,a0
    4fee:	       move.l 38(a0),36(sp)
    4ff4:	       move.l 19c54 <DOSBase>,d0
    4ffa:	       movea.l d0,a6
    4ffc:	       move.l 40(sp),d1
    5000:	       move.l 36(sp),d2
    5004:	       jsr -312(a6)
    5008:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    500c:	   /-- bra.s 5050 <saveStatusBars+0x1be>
		FPutC (fp,1);
    500e:	/--|-> move.l 112(sp),16(sp)
    5014:	|  |   moveq #1,d0
    5016:	|  |   move.l d0,12(sp)
    501a:	|  |   move.l 19c54 <DOSBase>,d0
    5020:	|  |   movea.l d0,a6
    5022:	|  |   move.l 16(sp),d1
    5026:	|  |   move.l 12(sp),d2
    502a:	|  |   jsr -312(a6)
    502e:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    5032:	|  |   movea.l 104(sp),a0
    5036:	|  |   move.l (a0),d0
    5038:	|  |   move.l 112(sp),-(sp)
    503c:	|  |   move.l d0,-(sp)
    503e:	|  |   jsr bd8 <writeString>
    5044:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    5046:	|  |   movea.l 104(sp),a0
    504a:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    5050:	|  \-> tst.l 104(sp)
    5054:	\----- bne.s 500e <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    5056:	       move.l 112(sp),28(sp)
    505c:	       clr.l 24(sp)
    5060:	       move.l 19c54 <DOSBase>,d0
    5066:	       movea.l d0,a6
    5068:	       move.l 28(sp),d1
    506c:	       move.l 24(sp),d2
    5070:	       jsr -312(a6)
    5074:	       move.l d0,20(sp)
}
    5078:	       nop
    507a:	       move.l (sp)+,d2
    507c:	       movea.l (sp)+,a6
    507e:	       lea 100(sp),sp
    5082:	       rts

00005084 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    5084:	movea.l 18132 <nowStatus>,a0
    508a:	move.l 4(sp),6(a0)
}
    5090:	nop
    5092:	rts

00005094 <setStatusBar>:

void setStatusBar (char * txt) {
    5094:	    subq.l #4,sp
    5096:	    move.l a6,-(sp)
    5098:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    509a:	    movea.l 18132 <nowStatus>,a0
    50a0:	    move.l (a0),d0
    50a2:	/-- beq.s 50d6 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    50a4:	|   movea.l 18132 <nowStatus>,a0
    50aa:	|   movea.l (a0),a0
    50ac:	|   move.l (a0),8(sp)
    50b0:	|   move.l 19c4c <SysBase>,d0
    50b6:	|   movea.l d0,a6
    50b8:	|   movea.l 8(sp),a1
    50bc:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    50c0:	|   movea.l 18132 <nowStatus>,a0
    50c6:	|   movea.l (a0),a2
    50c8:	|   move.l 16(sp),-(sp)
    50cc:	|   jsr b8 <copyString>
    50d2:	|   addq.l #4,sp
    50d4:	|   move.l d0,(a2)
	}
}
    50d6:	\-> nop
    50d8:	    movea.l (sp)+,a2
    50da:	    movea.l (sp)+,a6
    50dc:	    addq.l #4,sp
    50de:	    rts

000050e0 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    50e0:	       movea.l 18132 <nowStatus>,a0
    50e6:	       move.l (a0),d0
    50e8:	/----- beq.s 50f6 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    50ea:	|      movea.l 18132 <nowStatus>,a0
    50f0:	|      movea.l (a0),a0
    50f2:	|      move.l (a0),d0
    50f4:	|  /-- bra.s 50fc <statusBarText+0x1c>
	} else {
		return "";
    50f6:	\--|-> move.l #80264,d0
	}
    50fc:	   \-> rts

000050fe <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    50fe:	       lea -28(sp),sp
    5102:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    5106:	       move.l 52(sp),-(sp)
    510a:	       jsr 1112e <stringWidth>
    5110:	       addq.l #4,sp
    5112:	       asr.l #1,d0
    5114:	       move.l d0,-(sp)
    5116:	       jsr 12bfc <__floatsisf>
    511c:	       addq.l #4,sp
    511e:	       move.l d0,d1
    5120:	       move.l 1814a <cameraZoom>,d0
    5126:	       move.l d0,-(sp)
    5128:	       move.l d1,-(sp)
    512a:	       jsr 12aa8 <__divsf3>
    5130:	       addq.l #8,sp
    5132:	       move.l d0,-(sp)
    5134:	       jsr 12b94 <__fixsfsi>
    513a:	       addq.l #4,sp
    513c:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    5140:	       move.l 56(sp),d0
    5144:	       sub.l 44(sp),d0
    5148:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    514c:	       move.l 56(sp),d0
    5150:	       add.l 44(sp),d0
    5154:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    5158:	       moveq #12,d0
    515a:	       move.l d0,32(sp)
    515e:	       clr.l 28(sp)
    5162:	       move.l 19c4c <SysBase>,d0
    5168:	       movea.l d0,a6
    516a:	       move.l 32(sp),d0
    516e:	       move.l 28(sp),d1
    5172:	       jsr -684(a6)
    5176:	       move.l d0,24(sp)
    517a:	       move.l 24(sp),d0
    517e:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    5182:	       movea.l 19ca8 <speech>,a0
    5188:	       move.l 4(a0),d0
    518c:	       movea.l 20(sp),a0
    5190:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    5194:	       move.l 52(sp),-(sp)
    5198:	       jsr b8 <copyString>
    519e:	       addq.l #4,sp
    51a0:	       movea.l 20(sp),a0
    51a4:	       move.l d0,(a0)
	newLine -> x = xx1;
    51a6:	       movea.l 20(sp),a0
    51aa:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    51b0:	       movea.l 19ca8 <speech>,a0
    51b6:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    51bc:	       moveq #4,d0
    51be:	       cmp.l 40(sp),d0
    51c2:	   /-- blt.s 51e4 <addSpeechLine+0xe6>
    51c4:	   |   movea.l 60(sp),a0
    51c8:	   |   move.l (a0),d1
    51ca:	   |   moveq #5,d0
    51cc:	   |   sub.l 40(sp),d0
    51d0:	   |   cmp.l d1,d0
    51d2:	   +-- ble.s 51e4 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    51d4:	   |   moveq #5,d0
    51d6:	   |   sub.l 40(sp),d0
    51da:	   |   movea.l 60(sp),a0
    51de:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    51e0:	/--|-- bra.w 5310 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    51e4:	|  \-> move.l 36(sp),-(sp)
    51e8:	|      jsr 12bfc <__floatsisf>
    51ee:	|      addq.l #4,sp
    51f0:	|      move.l d0,d2
    51f2:	|      move.l 19b4c <winWidth>,d0
    51f8:	|      move.l d0,-(sp)
    51fa:	|      jsr 12c24 <__floatunsisf>
    5200:	|      addq.l #4,sp
    5202:	|      move.l d0,d1
    5204:	|      move.l 1814a <cameraZoom>,d0
    520a:	|      move.l d0,-(sp)
    520c:	|      move.l d1,-(sp)
    520e:	|      jsr 12aa8 <__divsf3>
    5214:	|      addq.l #8,sp
    5216:	|      move.l #1084227584,-(sp)
    521c:	|      move.l d0,-(sp)
    521e:	|      jsr 12ef0 <__subsf3>
    5224:	|      addq.l #8,sp
    5226:	|      move.l d0,-(sp)
    5228:	|      move.l d2,-(sp)
    522a:	|      jsr 12ce4 <__gesf2>
    5230:	|      addq.l #8,sp
    5232:	|      tst.l d0
    5234:	|  /-- bge.s 523a <addSpeechLine+0x13c>
}
    5236:	+--|-- bra.w 5310 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    523a:	|  \-> movea.l 60(sp),a0
    523e:	|      move.l (a0),d0
    5240:	|      move.l d0,-(sp)
    5242:	|      jsr 12bfc <__floatsisf>
    5248:	|      addq.l #4,sp
    524a:	|      move.l d0,-(sp)
    524c:	|      jsr 12b14 <__extendsfdf2>
    5252:	|      addq.l #4,sp
    5254:	|      move.l d0,d4
    5256:	|      move.l d1,d5
    5258:	|      move.l 19b4c <winWidth>,d0
    525e:	|      move.l d0,-(sp)
    5260:	|      jsr 12c24 <__floatunsisf>
    5266:	|      addq.l #4,sp
    5268:	|      move.l d0,d1
    526a:	|      move.l 1814a <cameraZoom>,d0
    5270:	|      move.l d0,-(sp)
    5272:	|      move.l d1,-(sp)
    5274:	|      jsr 12aa8 <__divsf3>
    527a:	|      addq.l #8,sp
    527c:	|      move.l d0,-(sp)
    527e:	|      jsr 12b14 <__extendsfdf2>
    5284:	|      addq.l #4,sp
    5286:	|      clr.l -(sp)
    5288:	|      move.l #1075052544,-(sp)
    528e:	|      move.l d1,-(sp)
    5290:	|      move.l d0,-(sp)
    5292:	|      jsr 12e8e <__subdf3>
    5298:	|      lea 16(sp),sp
    529c:	|      move.l d0,d2
    529e:	|      move.l d1,d3
    52a0:	|      move.l 36(sp),-(sp)
    52a4:	|      jsr 12bbc <__floatsidf>
    52aa:	|      addq.l #4,sp
    52ac:	|      move.l d1,-(sp)
    52ae:	|      move.l d0,-(sp)
    52b0:	|      move.l d3,-(sp)
    52b2:	|      move.l d2,-(sp)
    52b4:	|      jsr 12e8e <__subdf3>
    52ba:	|      lea 16(sp),sp
    52be:	|      move.l d1,-(sp)
    52c0:	|      move.l d0,-(sp)
    52c2:	|      move.l d5,-(sp)
    52c4:	|      move.l d4,-(sp)
    52c6:	|      jsr 12d1a <__gtdf2>
    52cc:	|      lea 16(sp),sp
    52d0:	|      tst.l d0
    52d2:	|  /-- bgt.s 52d6 <addSpeechLine+0x1d8>
}
    52d4:	+--|-- bra.s 5310 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    52d6:	|  \-> move.l 19b4c <winWidth>,d0
    52dc:	|      move.l d0,-(sp)
    52de:	|      jsr 12c24 <__floatunsisf>
    52e4:	|      addq.l #4,sp
    52e6:	|      move.l d0,d1
    52e8:	|      move.l 1814a <cameraZoom>,d0
    52ee:	|      move.l d0,-(sp)
    52f0:	|      move.l d1,-(sp)
    52f2:	|      jsr 12aa8 <__divsf3>
    52f8:	|      addq.l #8,sp
    52fa:	|      move.l d0,-(sp)
    52fc:	|      jsr 12b94 <__fixsfsi>
    5302:	|      addq.l #4,sp
    5304:	|      subq.l #5,d0
    5306:	|      sub.l 36(sp),d0
    530a:	|      movea.l 60(sp),a0
    530e:	|      move.l d0,(a0)
}
    5310:	\----> nop
    5312:	       movem.l (sp)+,d2-d5/a6
    5316:	       lea 28(sp),sp
    531a:	       rts

0000531c <initSpeech>:


void initSpeech () {
    531c:	       lea -12(sp),sp
    5320:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    5322:	       moveq #20,d0
    5324:	       move.l d0,12(sp)
    5328:	       clr.l 8(sp)
    532c:	       move.l 19c4c <SysBase>,d0
    5332:	       movea.l d0,a6
    5334:	       move.l 12(sp),d0
    5338:	       move.l 8(sp),d1
    533c:	       jsr -684(a6)
    5340:	       move.l d0,4(sp)
    5344:	       move.l 4(sp),d0
    5348:	       move.l d0,19ca8 <speech>
	if (speech) {
    534e:	       move.l 19ca8 <speech>,d0
    5354:	/----- beq.s 5380 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    5356:	|      movea.l 19ca8 <speech>,a0
    535c:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    535e:	|      movea.l 19ca8 <speech>,a0
    5364:	|      clr.l 4(a0)
		speech -> speechY = 0;
    5368:	|      movea.l 19ca8 <speech>,a0
    536e:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    5372:	|      movea.l 19ca8 <speech>,a0
    5378:	|      moveq #-1,d0
    537a:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    537e:	|  /-- bra.s 538e <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    5380:	\--|-> pea 157b0 <newfatal.c.307beca7+0xc4>
    5386:	   |   jsr 127a4 <KPrintF>
    538c:	   |   addq.l #4,sp
}
    538e:	   \-> nop
    5390:	       movea.l (sp)+,a6
    5392:	       lea 12(sp),sp
    5396:	       rts

00005398 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    5398:	       movea.l 19ca8 <speech>,a0
    539e:	       move.l 4(a0),d0
    53a2:	/----- beq.s 53b0 <isThereAnySpeechGoingOn+0x18>
    53a4:	|      movea.l 19ca8 <speech>,a0
    53aa:	|      move.l 16(a0),d0
    53ae:	|  /-- bra.s 53b2 <isThereAnySpeechGoingOn+0x1a>
    53b0:	\--|-> moveq #-1,d0
}
    53b2:	   \-> rts

000053b4 <killAllSpeech>:

void killAllSpeech () {
    53b4:	       lea -12(sp),sp
    53b8:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    53ba:	       movea.l 19ca8 <speech>,a0
    53c0:	       move.l 12(a0),d0
    53c4:	       moveq #-1,d1
    53c6:	       cmp.l d0,d1
    53c8:	   /-- beq.s 53d6 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    53ca:	   |   movea.l 19ca8 <speech>,a0
    53d0:	   |   moveq #-1,d0
    53d2:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    53d6:	   \-> movea.l 19ca8 <speech>,a0
    53dc:	       move.l (a0),d0
    53de:	/----- beq.w 546a <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    53e2:	|      movea.l 19ca8 <speech>,a0
    53e8:	|      move.l (a0),d0
    53ea:	|      lea -120(sp),sp
    53ee:	|      move.l sp,d1
    53f0:	|      movea.l d0,a0
    53f2:	|      moveq #120,d0
    53f4:	|      move.l d0,-(sp)
    53f6:	|      move.l a0,-(sp)
    53f8:	|      move.l d1,-(sp)
    53fa:	|      jsr 12758 <memcpy>
    5400:	|      lea 12(sp),sp
    5404:	|      jsr 6eaa <makeSilent>
    540a:	|      lea 120(sp),sp
		speech -> currentTalker = NULL;
    540e:	|      movea.l 19ca8 <speech>,a0
    5414:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    5416:	+----- bra.s 546a <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    5418:	|  /-> movea.l 19ca8 <speech>,a0
    541e:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    5424:	|  |   movea.l 19ca8 <speech>,a0
    542a:	|  |   movea.l 4(a0),a1
    542e:	|  |   movea.l 19ca8 <speech>,a0
    5434:	|  |   move.l 4(a1),d0
    5438:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    543c:	|  |   movea.l 12(sp),a0
    5440:	|  |   move.l (a0),8(sp)
    5444:	|  |   move.l 19c4c <SysBase>,d0
    544a:	|  |   movea.l d0,a6
    544c:	|  |   movea.l 8(sp),a1
    5450:	|  |   jsr -690(a6)
		FreeVec(killMe);
    5454:	|  |   move.l 12(sp),4(sp)
    545a:	|  |   move.l 19c4c <SysBase>,d0
    5460:	|  |   movea.l d0,a6
    5462:	|  |   movea.l 4(sp),a1
    5466:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    546a:	\--|-> movea.l 19ca8 <speech>,a0
    5470:	   |   move.l 4(a0),d0
    5474:	   \-- bne.s 5418 <killAllSpeech+0x64>
	}
}
    5476:	       nop
    5478:	       nop
    547a:	       movea.l (sp)+,a6
    547c:	       lea 12(sp),sp
    5480:	       rts

00005482 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    5482:	pea 2 <_start+0x2>
    5486:	move.l 8(sp),-(sp)
    548a:	jsr 55e2 <setFrames>
    5490:	addq.l #8,sp
}
    5492:	nop
    5494:	rts

00005496 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    5496:	       lea -52(sp),sp
    549a:	       move.l a6,-(sp)
    549c:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    549e:	       movea.l 64(sp),a0
    54a2:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    54a8:	       move.l 18136 <speechSpeed>,d0
    54ae:	       move.l 68(sp),-(sp)
    54b2:	       move.l d0,-(sp)
    54b4:	       jsr a46 <putFloat>
    54ba:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    54bc:	       movea.l 64(sp),a0
    54c0:	       move.l 8(a0),d0
    54c4:	       move.l 68(sp),-(sp)
    54c8:	       move.l d0,-(sp)
    54ca:	       jsr 8d0 <put2bytes>
    54d0:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    54d2:	       movea.l 64(sp),a0
    54d6:	       move.l 16(a0),d0
    54da:	       move.l 68(sp),-(sp)
    54de:	       move.l d0,-(sp)
    54e0:	       jsr 8d0 <put2bytes>
    54e6:	       addq.l #8,sp
		if (sS -> currentTalker) {
    54e8:	       movea.l 64(sp),a0
    54ec:	       move.l (a0),d0
    54ee:	   /-- beq.s 5532 <saveSpeech+0x9c>
			FPutC (fp, 1);
    54f0:	   |   move.l 68(sp),40(sp)
    54f6:	   |   moveq #1,d0
    54f8:	   |   move.l d0,36(sp)
    54fc:	   |   move.l 19c54 <DOSBase>,d0
    5502:	   |   movea.l d0,a6
    5504:	   |   move.l 40(sp),d1
    5508:	   |   move.l 36(sp),d2
    550c:	   |   jsr -312(a6)
    5510:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    5514:	   |   movea.l 64(sp),a0
    5518:	   |   movea.l (a0),a0
    551a:	   |   movea.l 102(a0),a0
    551e:	   |   move.l 4(a0),d0
    5522:	   |   move.l 68(sp),-(sp)
    5526:	   |   move.l d0,-(sp)
    5528:	   |   jsr 8d0 <put2bytes>
    552e:	   |   addq.l #8,sp
    5530:	/--|-- bra.s 55ae <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    5532:	|  \-> move.l 68(sp),52(sp)
    5538:	|      clr.l 48(sp)
    553c:	|      move.l 19c54 <DOSBase>,d0
    5542:	|      movea.l d0,a6
    5544:	|      move.l 52(sp),d1
    5548:	|      move.l 48(sp),d2
    554c:	|      jsr -312(a6)
    5550:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    5554:	+----- bra.s 55ae <saveSpeech+0x118>
			FPutC (fp, 1);
    5556:	|  /-> move.l 68(sp),16(sp)
    555c:	|  |   moveq #1,d0
    555e:	|  |   move.l d0,12(sp)
    5562:	|  |   move.l 19c54 <DOSBase>,d0
    5568:	|  |   movea.l d0,a6
    556a:	|  |   move.l 16(sp),d1
    556e:	|  |   move.l 12(sp),d2
    5572:	|  |   jsr -312(a6)
    5576:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    557a:	|  |   movea.l 56(sp),a0
    557e:	|  |   move.l (a0),d0
    5580:	|  |   move.l 68(sp),-(sp)
    5584:	|  |   move.l d0,-(sp)
    5586:	|  |   jsr bd8 <writeString>
    558c:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    558e:	|  |   movea.l 56(sp),a0
    5592:	|  |   move.l 8(a0),d0
    5596:	|  |   move.l 68(sp),-(sp)
    559a:	|  |   move.l d0,-(sp)
    559c:	|  |   jsr 8d0 <put2bytes>
    55a2:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    55a4:	|  |   movea.l 56(sp),a0
    55a8:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    55ae:	\--|-> tst.l 56(sp)
    55b2:	   \-- bne.s 5556 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    55b4:	       move.l 68(sp),28(sp)
    55ba:	       clr.l 24(sp)
    55be:	       move.l 19c54 <DOSBase>,d0
    55c4:	       movea.l d0,a6
    55c6:	       move.l 28(sp),d1
    55ca:	       move.l 24(sp),d2
    55ce:	       jsr -312(a6)
    55d2:	       move.l d0,20(sp)
}
    55d6:	       nop
    55d8:	       move.l (sp)+,d2
    55da:	       movea.l (sp)+,a6
    55dc:	       lea 52(sp),sp
    55e0:	       rts

000055e2 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    55e2:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    55e4:	movea.l 8(sp),a0
    55e8:	movea.l 68(a0),a0
    55ec:	move.l (a0),d2
    55ee:	movea.l 8(sp),a0
    55f2:	movea.l 68(a0),a0
    55f6:	move.l 4(a0),d0
    55fa:	move.l 12(sp),-(sp)
    55fe:	move.l d0,-(sp)
    5600:	jsr 13156 <__mulsi3>
    5606:	addq.l #8,sp
    5608:	move.l d0,d1
    560a:	movea.l 8(sp),a0
    560e:	move.l 94(a0),d0
    5612:	add.l d1,d0
    5614:	add.l d0,d0
    5616:	add.l d0,d0
    5618:	movea.l d2,a0
    561a:	adda.l d0,a0
    561c:	move.l (a0),d0
    561e:	movea.l 8(sp),a0
    5622:	move.l d0,60(a0)
}
    5626:	nop
    5628:	move.l (sp)+,d2
    562a:	rts

0000562c <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    562c:	       lea -20(sp),sp
    5630:	       move.l d2,-(sp)
    5632:	       move.l 40(sp),d0
    5636:	       move.w d0,d0
    5638:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    563c:	       movea.l 19ca8 <speech>,a0
    5642:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    5648:	       move.l 32(sp),-(sp)
    564c:	       jsr 6994 <findPerson>
    5652:	       addq.l #4,sp
    5654:	       move.l d0,16(sp)
    if (thisPerson) {
    5658:	   /-- beq.s 567e <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    565a:	   |   movea.w 6(sp),a0
    565e:	   |   move.l a0,-(sp)
    5660:	   |   move.l 40(sp),-(sp)
    5664:	   |   move.l 24(sp),-(sp)
    5668:	   |   move.l 40(sp),-(sp)
    566c:	   |   jsr 5744 <wrapSpeechPerson>
    5672:	   |   lea 16(sp),sp
    5676:	   |   move.l d0,20(sp)
    567a:	/--|-- bra.w 5738 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    567e:	|  \-> move.l 32(sp),-(sp)
    5682:	|      jsr 1121a <getRegionForObject>
    5688:	|      addq.l #4,sp
    568a:	|      move.l d0,12(sp)
        if (thisRegion) {
    568e:	|  /-- beq.s 56fa <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    5690:	|  |   movea.l 12(sp),a0
    5694:	|  |   movea.l 28(a0),a0
    5698:	|  |   move.l 28(a0),d0
    569c:	|  |   movea.l 12(sp),a0
    56a0:	|  |   movea.l 4(a0),a1
    56a4:	|  |   movea.l 12(sp),a0
    56a8:	|  |   movea.l 28(a0),a0
    56ac:	|  |   move.l 20(a0),d1
    56b0:	|  |   movea.l a1,a0
    56b2:	|  |   suba.l d1,a0
    56b4:	|  |   move.l 19d06 <cameraY>,d1
    56ba:	|  |   movea.l a0,a1
    56bc:	|  |   suba.l d1,a1
    56be:	|  |   movea.l 12(sp),a0
    56c2:	|  |   move.l (a0),d2
    56c4:	|  |   movea.l 12(sp),a0
    56c8:	|  |   move.l 8(a0),d1
    56cc:	|  |   add.l d2,d1
    56ce:	|  |   move.l d1,d2
    56d0:	|  |   asr.l #1,d2
    56d2:	|  |   move.l 19d02 <cameraX>,d1
    56d8:	|  |   movea.l d2,a0
    56da:	|  |   suba.l d1,a0
    56dc:	|  |   move.l 36(sp),-(sp)
    56e0:	|  |   move.l d0,-(sp)
    56e2:	|  |   move.l a1,-(sp)
    56e4:	|  |   move.l a0,-(sp)
    56e6:	|  |   move.l 44(sp),-(sp)
    56ea:	|  |   jsr 5862 <wrapSpeechXY>
    56f0:	|  |   lea 20(sp),sp
    56f4:	|  |   move.l d0,20(sp)
    56f8:	+--|-- bra.s 5738 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    56fa:	|  \-> move.l 32(sp),-(sp)
    56fe:	|      jsr 95a2 <findObjectType>
    5704:	|      addq.l #4,sp
    5706:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    570a:	|      movea.l 8(sp),a0
    570e:	|      move.l 28(a0),d1
    5712:	|      move.l 19b4c <winWidth>,d0
    5718:	|      lsr.l #1,d0
    571a:	|      move.l 36(sp),-(sp)
    571e:	|      move.l d1,-(sp)
    5720:	|      pea a <_start+0xa>
    5724:	|      move.l d0,-(sp)
    5726:	|      move.l 44(sp),-(sp)
    572a:	|      jsr 5862 <wrapSpeechXY>
    5730:	|      lea 20(sp),sp
    5734:	|      move.l d0,20(sp)
        }
    }
    return i;
    5738:	\----> move.l 20(sp),d0
}
    573c:	       move.l (sp)+,d2
    573e:	       lea 20(sp),sp
    5742:	       rts

00005744 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    5744:	    subq.l #8,sp
    5746:	    movem.l d2-d4,-(sp)
    574a:	    move.l 36(sp),d0
    574e:	    move.w d0,d0
    5750:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    5754:	    movea.l 28(sp),a0
    5758:	    movea.l 102(a0),a0
    575c:	    move.l 28(a0),d2
    5760:	    movea.l 28(sp),a0
    5764:	    move.l 4(a0),d3
    5768:	    move.l 19d06 <cameraY>,d0
    576e:	    move.l d0,-(sp)
    5770:	    jsr 12bfc <__floatsisf>
    5776:	    addq.l #4,sp
    5778:	    move.l d0,-(sp)
    577a:	    move.l d3,-(sp)
    577c:	    jsr 12ef0 <__subsf3>
    5782:	    addq.l #8,sp
    5784:	    move.l d0,d3
    5786:	    movea.l 28(sp),a0
    578a:	    move.l 20(a0),d4
    578e:	    movea.l 28(sp),a0
    5792:	    move.l 8(a0),d1
    5796:	    movea.l 28(sp),a0
    579a:	    move.l 12(a0),d0
    579e:	    sub.l d0,d1
    57a0:	    move.l d1,-(sp)
    57a2:	    jsr 12bfc <__floatsisf>
    57a8:	    addq.l #4,sp
    57aa:	    move.l d0,-(sp)
    57ac:	    move.l d4,-(sp)
    57ae:	    jsr 12cae <__mulsf3>
    57b4:	    addq.l #8,sp
    57b6:	    move.l d0,-(sp)
    57b8:	    move.l d3,-(sp)
    57ba:	    jsr 12ef0 <__subsf3>
    57c0:	    addq.l #8,sp
    57c2:	    move.l d0,d3
    57c4:	    movea.l 28(sp),a0
    57c8:	    movea.l 102(a0),a0
    57cc:	    move.l 20(a0),d0
    57d0:	    move.l d0,-(sp)
    57d2:	    jsr 12bfc <__floatsisf>
    57d8:	    addq.l #4,sp
    57da:	    move.l d0,-(sp)
    57dc:	    move.l d3,-(sp)
    57de:	    jsr 12ef0 <__subsf3>
    57e4:	    addq.l #8,sp
    57e6:	    move.l d0,-(sp)
    57e8:	    jsr 12b94 <__fixsfsi>
    57ee:	    addq.l #4,sp
    57f0:	    move.l d0,d4
    57f2:	    movea.l 28(sp),a0
    57f6:	    move.l (a0),d3
    57f8:	    move.l 19d02 <cameraX>,d0
    57fe:	    move.l d0,-(sp)
    5800:	    jsr 12bfc <__floatsisf>
    5806:	    addq.l #4,sp
    5808:	    move.l d0,-(sp)
    580a:	    move.l d3,-(sp)
    580c:	    jsr 12ef0 <__subsf3>
    5812:	    addq.l #8,sp
    5814:	    move.l d0,-(sp)
    5816:	    jsr 12b94 <__fixsfsi>
    581c:	    addq.l #4,sp
    581e:	    move.l 32(sp),-(sp)
    5822:	    move.l d2,-(sp)
    5824:	    move.l d4,-(sp)
    5826:	    move.l d0,-(sp)
    5828:	    move.l 40(sp),-(sp)
    582c:	    jsr 5862 <wrapSpeechXY>
    5832:	    lea 20(sp),sp
    5836:	    move.l d0,16(sp)
	if (animPerson) {
    583a:	    tst.w 14(sp)
    583e:	/-- beq.s 5856 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    5840:	|   move.l 28(sp),-(sp)
    5844:	|   jsr 5482 <makeTalker>
    584a:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    584c:	|   movea.l 19ca8 <speech>,a0
    5852:	|   move.l 28(sp),(a0)
	}
	return i;
    5856:	\-> move.l 16(sp),d0
}
    585a:	    movem.l (sp)+,d2-d4
    585e:	    addq.l #8,sp
    5860:	    rts

00005862 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    5862:	                   lea -16(sp),sp
    5866:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    586a:	                   clr.l 16(sp)
    killAllSpeech();
    586e:	                   jsr 53b4 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    5874:	                   move.l 36(sp),-(sp)
    5878:	                   jsr fc3c <strlen>
    587e:	                   addq.l #4,sp
    5880:	                   movea.l d0,a0
    5882:	                   lea 20(a0),a0
    5886:	                   move.l a0,-(sp)
    5888:	                   jsr 12c24 <__floatunsisf>
    588e:	                   addq.l #4,sp
    5890:	                   move.l d0,d1
    5892:	                   move.l 18136 <speechSpeed>,d0
    5898:	                   move.l d0,-(sp)
    589a:	                   move.l d1,-(sp)
    589c:	                   jsr 12cae <__mulsf3>
    58a2:	                   addq.l #8,sp
    58a4:	                   move.l d0,-(sp)
    58a6:	                   jsr 12b94 <__fixsfsi>
    58ac:	                   addq.l #4,sp
    58ae:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    58b2:	               /-- bgt.s 58ba <wrapSpeechXY+0x58>
    58b4:	               |   moveq #1,d0
    58b6:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    58ba:	               \-> moveq #-1,d1
    58bc:	                   cmp.l 52(sp),d1
    58c0:	               /-- beq.s 5900 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    58c2:	               |   move.l 19d16 <speechMode>,d0
    58c8:	               +-- ble.s 5900 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    58ca:	               |   clr.l -(sp)
    58cc:	               |   move.l 56(sp),-(sp)
    58d0:	               |   jsr 92c6 <startSound>
    58d6:	               |   addq.l #8,sp
    58d8:	               |   tst.w d0
    58da:	               +-- beq.s 5900 <wrapSpeechXY+0x9e>
                speechTime = -10;
    58dc:	               |   moveq #-10,d0
    58de:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    58e2:	               |   movea.l 19ca8 <speech>,a0
    58e8:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    58ee:	               |   move.l 19d16 <speechMode>,d0
    58f4:	               |   moveq #2,d1
    58f6:	               |   cmp.l d0,d1
    58f8:	               +-- bne.s 5900 <wrapSpeechXY+0x9e>
    58fa:	               |   moveq #-10,d0
    58fc:	/--------------|-- bra.w 5b86 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    5900:	|              \-> movea.l 19ca8 <speech>,a0
    5906:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    590c:	|     /----------- bra.w 59c0 <wrapSpeechXY+0x15e>
        a = wrap;
    5910:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    5916:	|  |  |        /-- bra.s 5926 <wrapSpeechXY+0xc4>
            a--;
    5918:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    591c:	|  |  |  |     +-- bne.s 5926 <wrapSpeechXY+0xc4>
                a = wrap;
    591e:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    5924:	|  |  |  |  /--|-- bra.s 5938 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    5926:	|  |  |  |  |  \-> move.l 28(sp),d0
    592a:	|  |  |  |  |      movea.l 36(sp),a0
    592e:	|  |  |  |  |      adda.l d0,a0
    5930:	|  |  |  |  |      move.b (a0),d0
    5932:	|  |  |  |  |      cmpi.b #32,d0
    5936:	|  |  |  \--|----- bne.s 5918 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    5938:	|  |  |     \----> move.l 28(sp),d0
    593c:	|  |  |            movea.l 36(sp),a0
    5940:	|  |  |            adda.l d0,a0
    5942:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    5944:	|  |  |            lea 16(sp),a0
    5948:	|  |  |            move.l a0,-(sp)
    594a:	|  |  |            move.l 44(sp),-(sp)
    594e:	|  |  |            move.l 44(sp),-(sp)
    5952:	|  |  |            jsr 50fe <addSpeechLine>
    5958:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    595c:	|  |  |            move.l 28(sp),d0
    5960:	|  |  |            movea.l 36(sp),a0
    5964:	|  |  |            adda.l d0,a0
    5966:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    596a:	|  |  |            move.l 28(sp),d0
    596e:	|  |  |            addq.l #1,d0
    5970:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    5974:	|  |  |            move.l 44(sp),-(sp)
    5978:	|  |  |            jsr 12bfc <__floatsisf>
    597e:	|  |  |            addq.l #4,sp
    5980:	|  |  |            move.l d0,d2
    5982:	|  |  |            move.l 19d3c <fontHeight>,d0
    5988:	|  |  |            move.l d0,-(sp)
    598a:	|  |  |            jsr 12bfc <__floatsisf>
    5990:	|  |  |            addq.l #4,sp
    5992:	|  |  |            move.l d0,d1
    5994:	|  |  |            move.l 1814a <cameraZoom>,d0
    599a:	|  |  |            move.l d0,-(sp)
    599c:	|  |  |            move.l d1,-(sp)
    599e:	|  |  |            jsr 12aa8 <__divsf3>
    59a4:	|  |  |            addq.l #8,sp
    59a6:	|  |  |            move.l d0,-(sp)
    59a8:	|  |  |            move.l d2,-(sp)
    59aa:	|  |  |            jsr 12ef0 <__subsf3>
    59b0:	|  |  |            addq.l #8,sp
    59b2:	|  |  |            move.l d0,-(sp)
    59b4:	|  |  |            jsr 12b94 <__fixsfsi>
    59ba:	|  |  |            addq.l #4,sp
    59bc:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    59c0:	|  |  \----------> move.l 36(sp),-(sp)
    59c4:	|  |               jsr fc3c <strlen>
    59ca:	|  |               addq.l #4,sp
    59cc:	|  |               move.l d0,d1
    59ce:	|  |               move.l 48(sp),d0
    59d2:	|  |               cmp.l d1,d0
    59d4:	|  \-------------- bcs.w 5910 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    59d8:	|                  lea 16(sp),a0
    59dc:	|                  move.l a0,-(sp)
    59de:	|                  move.l 44(sp),-(sp)
    59e2:	|                  move.l 44(sp),-(sp)
    59e6:	|                  jsr 50fe <addSpeechLine>
    59ec:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    59f0:	|                  move.l 44(sp),-(sp)
    59f4:	|                  jsr 12bfc <__floatsisf>
    59fa:	|                  addq.l #4,sp
    59fc:	|                  move.l d0,d2
    59fe:	|                  move.l 19d3c <fontHeight>,d0
    5a04:	|                  move.l d0,-(sp)
    5a06:	|                  jsr 12bfc <__floatsisf>
    5a0c:	|                  addq.l #4,sp
    5a0e:	|                  move.l d0,d1
    5a10:	|                  move.l 1814a <cameraZoom>,d0
    5a16:	|                  move.l d0,-(sp)
    5a18:	|                  move.l d1,-(sp)
    5a1a:	|                  jsr 12aa8 <__divsf3>
    5a20:	|                  addq.l #8,sp
    5a22:	|                  move.l d0,-(sp)
    5a24:	|                  move.l d2,-(sp)
    5a26:	|                  jsr 12ef0 <__subsf3>
    5a2c:	|                  addq.l #8,sp
    5a2e:	|                  move.l d0,-(sp)
    5a30:	|                  jsr 12b94 <__fixsfsi>
    5a36:	|                  addq.l #4,sp
    5a38:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    5a3c:	|              /-- bpl.s 5a5a <wrapSpeechXY+0x1f8>
    5a3e:	|              |   movea.l 19ca8 <speech>,a0
    5a44:	|              |   move.l 8(a0),d0
    5a48:	|              |   movea.l 19ca8 <speech>,a0
    5a4e:	|              |   sub.l 44(sp),d0
    5a52:	|              |   move.l d0,8(a0)
    5a56:	|           /--|-- bra.w 5b48 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    5a5a:	|           |  \-> movea.l 19ca8 <speech>,a0
    5a60:	|           |      move.l 8(a0),d0
    5a64:	|           |      move.l d0,-(sp)
    5a66:	|           |      jsr 12bfc <__floatsisf>
    5a6c:	|           |      addq.l #4,sp
    5a6e:	|           |      move.l d0,d2
    5a70:	|           |      move.l 19d06 <cameraY>,d0
    5a76:	|           |      move.l d0,-(sp)
    5a78:	|           |      jsr 12bfc <__floatsisf>
    5a7e:	|           |      addq.l #4,sp
    5a80:	|           |      move.l d0,d3
    5a82:	|           |      move.l 19b50 <winHeight>,d4
    5a88:	|           |      move.l 19d3c <fontHeight>,d0
    5a8e:	|           |      pea 3 <_start+0x3>
    5a92:	|           |      move.l d0,-(sp)
    5a94:	|           |      jsr 131d4 <__divsi3>
    5a9a:	|           |      addq.l #8,sp
    5a9c:	|           |      move.l d4,d1
    5a9e:	|           |      sub.l d0,d1
    5aa0:	|           |      move.l d1,-(sp)
    5aa2:	|           |      jsr 12c24 <__floatunsisf>
    5aa8:	|           |      addq.l #4,sp
    5aaa:	|           |      move.l d0,d1
    5aac:	|           |      move.l 1814a <cameraZoom>,d0
    5ab2:	|           |      move.l d0,-(sp)
    5ab4:	|           |      move.l d1,-(sp)
    5ab6:	|           |      jsr 12aa8 <__divsf3>
    5abc:	|           |      addq.l #8,sp
    5abe:	|           |      move.l d0,-(sp)
    5ac0:	|           |      move.l d3,-(sp)
    5ac2:	|           |      jsr 129ae <__addsf3>
    5ac8:	|           |      addq.l #8,sp
    5aca:	|           |      move.l d0,-(sp)
    5acc:	|           |      move.l d2,-(sp)
    5ace:	|           |      jsr 12d68 <__gtsf2>
    5ad4:	|           |      addq.l #8,sp
    5ad6:	|           |      tst.l d0
    5ad8:	|           +----- ble.s 5b48 <wrapSpeechXY+0x2e6>
    5ada:	|           |      move.l 19d06 <cameraY>,d0
    5ae0:	|           |      move.l d0,-(sp)
    5ae2:	|           |      jsr 12bfc <__floatsisf>
    5ae8:	|           |      addq.l #4,sp
    5aea:	|           |      move.l d0,d2
    5aec:	|           |      move.l 19b50 <winHeight>,d3
    5af2:	|           |      move.l 19d3c <fontHeight>,d0
    5af8:	|           |      pea 3 <_start+0x3>
    5afc:	|           |      move.l d0,-(sp)
    5afe:	|           |      jsr 131d4 <__divsi3>
    5b04:	|           |      addq.l #8,sp
    5b06:	|           |      move.l d3,d1
    5b08:	|           |      sub.l d0,d1
    5b0a:	|           |      move.l d1,-(sp)
    5b0c:	|           |      jsr 12c24 <__floatunsisf>
    5b12:	|           |      addq.l #4,sp
    5b14:	|           |      move.l d0,d1
    5b16:	|           |      move.l 1814a <cameraZoom>,d0
    5b1c:	|           |      move.l d0,-(sp)
    5b1e:	|           |      move.l d1,-(sp)
    5b20:	|           |      jsr 12aa8 <__divsf3>
    5b26:	|           |      addq.l #8,sp
    5b28:	|           |      move.l d0,-(sp)
    5b2a:	|           |      move.l d2,-(sp)
    5b2c:	|           |      jsr 129ae <__addsf3>
    5b32:	|           |      addq.l #8,sp
    5b34:	|           |      movea.l 19ca8 <speech>,a2
    5b3a:	|           |      move.l d0,-(sp)
    5b3c:	|           |      jsr 12b94 <__fixsfsi>
    5b42:	|           |      addq.l #4,sp
    5b44:	|           |      move.l d0,8(a2)

    if (offset) {
    5b48:	|           \----> move.l 16(sp),d0
    5b4c:	|        /-------- beq.s 5b82 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    5b4e:	|        |         movea.l 19ca8 <speech>,a0
    5b54:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    5b5a:	|        |     /-- bra.s 5b7c <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    5b5c:	|        |  /--|-> movea.l 20(sp),a0
    5b60:	|        |  |  |   move.l 8(a0),d1
    5b64:	|        |  |  |   move.l 16(sp),d0
    5b68:	|        |  |  |   add.l d1,d0
    5b6a:	|        |  |  |   movea.l 20(sp),a0
    5b6e:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    5b72:	|        |  |  |   movea.l 20(sp),a0
    5b76:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    5b7c:	|        |  |  \-> tst.l 20(sp)
    5b80:	|        |  \----- bne.s 5b5c <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    5b82:	|        \-------> move.l 24(sp),d0
}
    5b86:	\----------------> movem.l (sp)+,d2-d4/a2
    5b8a:	                   lea 16(sp),sp
    5b8e:	                   rts

00005b90 <loadSpriteBank>:
#include <exec/types.h>

#include "sprites.h"
#include "support/gcc8_c_support.h"

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    5b90:	subq.l #4,sp
    5b92:	move.l 16(sp),d0
    5b96:	move.w d0,d0
    5b98:	move.w d0,2(sp)
    KPrintF("loadSpriteBank: Not implemented"); //Amiga Todo
    5b9c:	pea 157ed <newfatal.c.307beca7+0x101>
    5ba2:	jsr 127a4 <KPrintF>
    5ba8:	addq.l #4,sp
    return TRUE;
    5baa:	moveq #1,d0
}    
    5bac:	addq.l #4,sp
    5bae:	rts

00005bb0 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    5bb0:	    move.l 4(sp),d0
    5bb4:	/-- bpl.s 5bb8 <TF_abs+0x8>
    5bb6:	|   neg.l d0
}
    5bb8:	\-> rts

00005bba <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    5bba:	             lea -28(sp),sp
    5bbe:	             move.l a6,-(sp)
    5bc0:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    5bc2:	             moveq #120,d0
    5bc4:	             move.l d0,28(sp)
    5bc8:	             clr.l 24(sp)
    5bcc:	             move.l 19c4c <SysBase>,d0
    5bd2:	             movea.l d0,a6
    5bd4:	             move.l 28(sp),d0
    5bd8:	             move.l 24(sp),d1
    5bdc:	             jsr -684(a6)
    5be0:	             move.l d0,20(sp)
    5be4:	             move.l 20(sp),d0
    5be8:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    5bec:	         /-- bne.s 5bf4 <addPerson+0x3a>
    5bee:	         |   clr.w d0
    5bf0:	/--------|-- bra.w 5e22 <addPerson+0x268>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    5bf4:	|        \-> move.l 48(sp),-(sp)
    5bf8:	|            jsr 9692 <loadObjectType>
    5bfe:	|            addq.l #4,sp
    5c00:	|            movea.l 16(sp),a0
    5c04:	|            move.l d0,102(a0)
    newPerson->scale = 1;
    5c08:	|            movea.l 16(sp),a0
    5c0c:	|            move.l #1065353216,20(a0)
    newPerson->extra = 0;
    5c14:	|            movea.l 16(sp),a0
    5c18:	|            clr.l 106(a0)
    newPerson->continueAfterWalking = NULL;
    5c1c:	|            movea.l 16(sp),a0
    5c20:	|            clr.l 56(a0)
    moveAndScale(newPerson, x, y);
    5c24:	|            move.l 44(sp),-(sp)
    5c28:	|            jsr 12bfc <__floatsisf>
    5c2e:	|            addq.l #4,sp
    5c30:	|            move.l d0,d2
    5c32:	|            move.l 40(sp),-(sp)
    5c36:	|            jsr 12bfc <__floatsisf>
    5c3c:	|            addq.l #4,sp
    5c3e:	|            move.l d2,-(sp)
    5c40:	|            move.l d0,-(sp)
    5c42:	|            move.l 24(sp),-(sp)
    5c46:	|            jsr 70dc <moveAndScale>
    5c4c:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    5c50:	|            movea.l 16(sp),a0
    5c54:	|            clr.l 72(a0)
    newPerson->walkToX = x;
    5c58:	|            movea.l 16(sp),a0
    5c5c:	|            move.l 40(sp),28(a0)
    newPerson->walkToY = y;
    5c62:	|            movea.l 16(sp),a0
    5c66:	|            move.l 44(sp),32(a0)
    newPerson->walking = FALSE;
    5c6c:	|            movea.l 16(sp),a0
    5c70:	|            clr.w 52(a0)
    newPerson->spinning = FALSE;
    5c74:	|            movea.l 16(sp),a0
    5c78:	|            clr.w 54(a0)
    newPerson->show = TRUE;
    5c7c:	|            movea.l 16(sp),a0
    5c80:	|            move.w #1,92(a0)
    newPerson->direction = 0;
    5c86:	|            movea.l 16(sp),a0
    5c8a:	|            clr.l 94(a0)
    newPerson->angle = 180;
    5c8e:	|            movea.l 16(sp),a0
    5c92:	|            move.l #180,80(a0)
    newPerson->wantAngle = 180;
    5c9a:	|            movea.l 16(sp),a0
    5c9e:	|            move.l #180,84(a0)
    newPerson->angleOffset = 0;
    5ca6:	|            movea.l 16(sp),a0
    5caa:	|            clr.l 88(a0)
    newPerson->floaty = 0;
    5cae:	|            movea.l 16(sp),a0
    5cb2:	|            clr.l 12(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    5cb6:	|            movea.l 16(sp),a0
    5cba:	|            movea.l 102(a0),a0
    5cbe:	|            move.l 24(a0),d0
    5cc2:	|            movea.l 16(sp),a0
    5cc6:	|            move.l d0,16(a0)
    newPerson->myAnim = NULL;
    5cca:	|            movea.l 16(sp),a0
    5cce:	|            clr.l 60(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    5cd2:	|            movea.l 16(sp),a0
    5cd6:	|            movea.l 102(a0),a0
    5cda:	|            move.l 32(a0),d0
    5cde:	|            movea.l 16(sp),a0
    5ce2:	|            move.l d0,110(a0)
    newPerson->r = 0;
    5ce6:	|            movea.l 16(sp),a0
    5cea:	|            clr.b 114(a0)
    newPerson->g = 0;
    5cee:	|            movea.l 16(sp),a0
    5cf2:	|            clr.b 115(a0)
    newPerson->b = 0;
    5cf6:	|            movea.l 16(sp),a0
    5cfa:	|            clr.b 116(a0)
    newPerson->colourmix = 0;
    5cfe:	|            movea.l 16(sp),a0
    5d02:	|            clr.b 117(a0)
    newPerson->transparency = 0;
    5d06:	|            movea.l 16(sp),a0
    5d0a:	|            clr.b 118(a0)
    newPerson->myPersona = p;
    5d0e:	|            movea.l 16(sp),a0
    5d12:	|            move.l 52(sp),68(a0)

    setFrames(newPerson, ANI_STAND);
    5d18:	|            clr.l -(sp)
    5d1a:	|            move.l 20(sp),-(sp)
    5d1e:	|            jsr 55e2 <setFrames>
    5d24:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    5d26:	|            movea.l 52(sp),a0
    5d2a:	|            movea.l (a0),a0
    5d2c:	|            movea.l (a0),a0
    5d2e:	|            movea.l 4(a0),a0
    5d32:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    5d36:	|     /----- bpl.s 5d40 <addPerson+0x186>
    5d38:	|     |      move.l 12(sp),d0
    5d3c:	|     |      neg.l d0
    5d3e:	|     |  /-- bra.s 5d42 <addPerson+0x188>
    5d40:	|     \--|-> moveq #1,d0
    5d42:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    5d46:	|            movea.l 52(sp),a0
    5d4a:	|            movea.l (a0),a0
    5d4c:	|            movea.l (a0),a0
    5d4e:	|            movea.l (a0),a0
    5d50:	|            move.l 8(a0),d0
    5d54:	|            cmp.l 8(sp),d0
    5d58:	|     /----- bgt.s 5d8a <addPerson+0x1d0>
        if (fNumSigned < 0) {
    5d5a:	|     |      tst.l 12(sp)
    5d5e:	|     |  /-- bge.s 5d6c <addPerson+0x1b2>
            newPerson->height = 5;
    5d60:	|     |  |   movea.l 16(sp),a0
    5d64:	|     |  |   moveq #5,d1
    5d66:	|     |  |   move.l d1,8(a0)
    5d6a:	|  /--|--|-- bra.s 5db4 <addPerson+0x1fa>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    5d6c:	|  |  |  \-> movea.l 52(sp),a0
    5d70:	|  |  |      movea.l (a0),a0
    5d72:	|  |  |      movea.l (a0),a0
    5d74:	|  |  |      movea.l (a0),a0
    5d76:	|  |  |      movea.l 16(a0),a0
    5d7a:	|  |  |      move.l 12(a0),d0
    5d7e:	|  |  |      addq.l #5,d0
    5d80:	|  |  |      movea.l 16(sp),a0
    5d84:	|  |  |      move.l d0,8(a0)
    5d88:	|  +--|----- bra.s 5db4 <addPerson+0x1fa>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    5d8a:	|  |  \----> movea.l 52(sp),a0
    5d8e:	|  |         movea.l (a0),a0
    5d90:	|  |         movea.l (a0),a0
    5d92:	|  |         movea.l (a0),a0
    5d94:	|  |         movea.l 16(a0),a0
    5d98:	|  |         move.l 8(sp),d1
    5d9c:	|  |         move.l d1,d0
    5d9e:	|  |         add.l d0,d0
    5da0:	|  |         add.l d1,d0
    5da2:	|  |         lsl.l #3,d0
    5da4:	|  |         adda.l d0,a0
    5da6:	|  |         move.l 12(a0),d0
    5daa:	|  |         addq.l #5,d0
    5dac:	|  |         movea.l 16(sp),a0
    5db0:	|  |         move.l d0,8(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    5db4:	|  \-------> move.l #105644,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    5dbc:	|        /-- bra.s 5dcc <addPerson+0x212>
        changethat = &((*changethat)->next);
    5dbe:	|     /--|-> movea.l 32(sp),a0
    5dc2:	|     |  |   move.l (a0),d0
    5dc4:	|     |  |   moveq #24,d1
    5dc6:	|     |  |   add.l d0,d1
    5dc8:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    5dcc:	|     |  \-> movea.l 32(sp),a0
    5dd0:	|     |      move.l (a0),d0
    5dd2:	|     |  /-- beq.s 5dfa <addPerson+0x240>
    5dd4:	|     |  |   movea.l 32(sp),a0
    5dd8:	|     |  |   movea.l (a0),a0
    5dda:	|     |  |   move.l 4(a0),d2
    5dde:	|     |  |   move.l 44(sp),-(sp)
    5de2:	|     |  |   jsr 12bfc <__floatsisf>
    5de8:	|     |  |   addq.l #4,sp
    5dea:	|     |  |   move.l d0,-(sp)
    5dec:	|     |  |   move.l d2,-(sp)
    5dee:	|     |  |   jsr 12e22 <__ltsf2>
    5df4:	|     |  |   addq.l #8,sp
    5df6:	|     |  |   tst.l d0
    5df8:	|     \--|-- blt.s 5dbe <addPerson+0x204>
    }

    newPerson->next = (*changethat);
    5dfa:	|        \-> movea.l 32(sp),a0
    5dfe:	|            move.l (a0),d0
    5e00:	|            movea.l 16(sp),a0
    5e04:	|            move.l d0,24(a0)
    (*changethat) = newPerson;
    5e08:	|            movea.l 32(sp),a0
    5e0c:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    5e10:	|            movea.l 16(sp),a0
    5e14:	|            move.l 102(a0),d0
    5e18:	|            sne d0
    5e1a:	|            neg.b d0
    5e1c:	|            move.b d0,d0
    5e1e:	|            andi.w #255,d0
}
    5e22:	\----------> move.l (sp)+,d2
    5e24:	             movea.l (sp)+,a6
    5e26:	             lea 28(sp),sp
    5e2a:	             rts

00005e2c <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    5e2c:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    5e2e:	       move.l 8(sp),-(sp)
    5e32:	       jsr 6994 <findPerson>
    5e38:	       addq.l #4,sp
    5e3a:	       move.l d0,(sp)
    if (moveMe) {
    5e3c:	/----- beq.s 5e70 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    5e3e:	|      movea.l (sp),a0
    5e40:	|      move.l 56(a0),d0
    5e44:	|  /-- beq.s 5e56 <animatePerson+0x2a>
    5e46:	|  |   movea.l (sp),a0
    5e48:	|  |   move.l 56(a0),d0
    5e4c:	|  |   move.l d0,-(sp)
    5e4e:	|  |   jsr 1ea2 <abortFunction>
    5e54:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    5e56:	|  \-> movea.l (sp),a0
    5e58:	|      clr.l 56(a0)
        moveMe -> walking = FALSE;
    5e5c:	|      movea.l (sp),a0
    5e5e:	|      clr.w 52(a0)
        moveMe -> spinning = FALSE;
    5e62:	|      movea.l (sp),a0
    5e64:	|      clr.w 54(a0)
        moveMe -> myAnim = fram;
    5e68:	|      movea.l (sp),a0
    5e6a:	|      move.l 12(sp),60(a0)
    }
}
    5e70:	\----> nop
    5e72:	       addq.l #4,sp
    5e74:	       rts

00005e76 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    5e76:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    5e78:	       move.l 8(sp),-(sp)
    5e7c:	       jsr 6994 <findPerson>
    5e82:	       addq.l #4,sp
    5e84:	       move.l d0,(sp)
    if (moveMe) {
    5e86:	/----- beq.s 5ec8 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    5e88:	|      movea.l (sp),a0
    5e8a:	|      clr.w 54(a0)
        moveMe -> myPersona = per;
    5e8e:	|      movea.l (sp),a0
    5e90:	|      move.l 12(sp),68(a0)
        rethinkAngle(moveMe);
    5e96:	|      move.l (sp),-(sp)
    5e98:	|      jsr 7226 <rethinkAngle>
    5e9e:	|      addq.l #4,sp
        if (moveMe->walking) {
    5ea0:	|      movea.l (sp),a0
    5ea2:	|      move.w 52(a0),d0
    5ea6:	|  /-- beq.s 5eba <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    5ea8:	|  |   pea 1 <_start+0x1>
    5eac:	|  |   move.l 4(sp),-(sp)
    5eb0:	|  |   jsr 55e2 <setFrames>
    5eb6:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    5eb8:	+--|-- bra.s 5ec8 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    5eba:	|  \-> clr.l -(sp)
    5ebc:	|      move.l 4(sp),-(sp)
    5ec0:	|      jsr 55e2 <setFrames>
    5ec6:	|      addq.l #8,sp
}
    5ec8:	\----> nop
    5eca:	       addq.l #4,sp
    5ecc:	       rts

00005ece <copyAnim>:


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    5ece:	             lea -36(sp),sp
    5ed2:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    5ed4:	             movea.l 44(sp),a0
    5ed8:	             move.l 8(a0),32(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    5ede:	             moveq #12,d0
    5ee0:	             move.l d0,28(sp)
    5ee4:	             clr.l 24(sp)
    5ee8:	             move.l 19c4c <SysBase>,d0
    5eee:	             movea.l d0,a6
    5ef0:	             move.l 28(sp),d0
    5ef4:	             move.l 24(sp),d1
    5ef8:	             jsr -684(a6)
    5efc:	             move.l d0,20(sp)
    5f00:	             move.l 20(sp),d0
    5f04:	             move.l d0,16(sp)
	if (!(newAnim)) {
    5f08:	         /-- bne.s 5f1e <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    5f0a:	         |   pea 1580d <newfatal.c.307beca7+0x121>
    5f10:	         |   jsr 127a4 <KPrintF>
    5f16:	         |   addq.l #4,sp
		return NULL;
    5f18:	         |   moveq #0,d0
    5f1a:	/--------|-- bra.w 6060 <copyAnim+0x192>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    5f1e:	|        \-> movea.l 44(sp),a0
    5f22:	|            move.l (a0),d0
    5f24:	|            movea.l 16(sp),a0
    5f28:	|            move.l d0,(a0)
	newAnim -> numFrames		= num;
    5f2a:	|            movea.l 16(sp),a0
    5f2e:	|            move.l 32(sp),8(a0)

	if (num) {
    5f34:	|  /-------- beq.w 6054 <copyAnim+0x186>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    5f38:	|  |         move.l 32(sp),d1
    5f3c:	|  |         move.l d1,d0
    5f3e:	|  |         add.l d0,d0
    5f40:	|  |         add.l d1,d0
    5f42:	|  |         add.l d0,d0
    5f44:	|  |         add.l d0,d0
    5f46:	|  |         move.l d0,12(sp)
    5f4a:	|  |         clr.l 8(sp)
    5f4e:	|  |         move.l 19c4c <SysBase>,d0
    5f54:	|  |         movea.l d0,a6
    5f56:	|  |         move.l 12(sp),d0
    5f5a:	|  |         move.l 8(sp),d1
    5f5e:	|  |         jsr -684(a6)
    5f62:	|  |         move.l d0,4(sp)
    5f66:	|  |         move.l 4(sp),d0
    5f6a:	|  |         movea.l 16(sp),a0
    5f6e:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    5f72:	|  |         movea.l 16(sp),a0
    5f76:	|  |         move.l 4(a0),d0
    5f7a:	|  |     /-- bne.s 5f90 <copyAnim+0xc2>
			KPrintF("copyAnim: Cannot allocate memory");
    5f7c:	|  |     |   pea 1580d <newfatal.c.307beca7+0x121>
    5f82:	|  |     |   jsr 127a4 <KPrintF>
    5f88:	|  |     |   addq.l #4,sp
			return NULL;
    5f8a:	|  |     |   moveq #0,d0
    5f8c:	+--|-----|-- bra.w 6060 <copyAnim+0x192>
		}

		for (int a = 0; a < num; a ++) {
    5f90:	|  |     \-> clr.l 36(sp)
    5f94:	|  |     /-- bra.w 6046 <copyAnim+0x178>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    5f98:	|  |  /--|-> movea.l 44(sp),a0
    5f9c:	|  |  |  |   movea.l 4(a0),a0
    5fa0:	|  |  |  |   move.l 36(sp),d1
    5fa4:	|  |  |  |   move.l d1,d0
    5fa6:	|  |  |  |   add.l d0,d0
    5fa8:	|  |  |  |   add.l d1,d0
    5faa:	|  |  |  |   add.l d0,d0
    5fac:	|  |  |  |   add.l d0,d0
    5fae:	|  |  |  |   lea (0,a0,d0.l),a1
    5fb2:	|  |  |  |   movea.l 16(sp),a0
    5fb6:	|  |  |  |   movea.l 4(a0),a0
    5fba:	|  |  |  |   move.l 36(sp),d1
    5fbe:	|  |  |  |   move.l d1,d0
    5fc0:	|  |  |  |   add.l d0,d0
    5fc2:	|  |  |  |   add.l d1,d0
    5fc4:	|  |  |  |   add.l d0,d0
    5fc6:	|  |  |  |   add.l d0,d0
    5fc8:	|  |  |  |   adda.l d0,a0
    5fca:	|  |  |  |   move.l (a1),d0
    5fcc:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    5fce:	|  |  |  |   movea.l 44(sp),a0
    5fd2:	|  |  |  |   movea.l 4(a0),a0
    5fd6:	|  |  |  |   move.l 36(sp),d1
    5fda:	|  |  |  |   move.l d1,d0
    5fdc:	|  |  |  |   add.l d0,d0
    5fde:	|  |  |  |   add.l d1,d0
    5fe0:	|  |  |  |   add.l d0,d0
    5fe2:	|  |  |  |   add.l d0,d0
    5fe4:	|  |  |  |   lea (0,a0,d0.l),a1
    5fe8:	|  |  |  |   movea.l 16(sp),a0
    5fec:	|  |  |  |   movea.l 4(a0),a0
    5ff0:	|  |  |  |   move.l 36(sp),d1
    5ff4:	|  |  |  |   move.l d1,d0
    5ff6:	|  |  |  |   add.l d0,d0
    5ff8:	|  |  |  |   add.l d1,d0
    5ffa:	|  |  |  |   add.l d0,d0
    5ffc:	|  |  |  |   add.l d0,d0
    5ffe:	|  |  |  |   adda.l d0,a0
    6000:	|  |  |  |   move.l 4(a1),d0
    6004:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    6008:	|  |  |  |   movea.l 44(sp),a0
    600c:	|  |  |  |   movea.l 4(a0),a0
    6010:	|  |  |  |   move.l 36(sp),d1
    6014:	|  |  |  |   move.l d1,d0
    6016:	|  |  |  |   add.l d0,d0
    6018:	|  |  |  |   add.l d1,d0
    601a:	|  |  |  |   add.l d0,d0
    601c:	|  |  |  |   add.l d0,d0
    601e:	|  |  |  |   lea (0,a0,d0.l),a1
    6022:	|  |  |  |   movea.l 16(sp),a0
    6026:	|  |  |  |   movea.l 4(a0),a0
    602a:	|  |  |  |   move.l 36(sp),d1
    602e:	|  |  |  |   move.l d1,d0
    6030:	|  |  |  |   add.l d0,d0
    6032:	|  |  |  |   add.l d1,d0
    6034:	|  |  |  |   add.l d0,d0
    6036:	|  |  |  |   add.l d0,d0
    6038:	|  |  |  |   adda.l d0,a0
    603a:	|  |  |  |   move.l 8(a1),d0
    603e:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    6042:	|  |  |  |   addq.l #1,36(sp)
    6046:	|  |  |  \-> move.l 36(sp),d0
    604a:	|  |  |      cmp.l 32(sp),d0
    604e:	|  |  \----- blt.w 5f98 <copyAnim+0xca>
    6052:	|  |     /-- bra.s 605c <copyAnim+0x18e>
		}
	} else {
		newAnim -> frames = NULL;
    6054:	|  \-----|-> movea.l 16(sp),a0
    6058:	|        |   clr.l 4(a0)
	}

	return newAnim;
    605c:	|        \-> move.l 16(sp),d0
}
    6060:	\----------> movea.l (sp)+,a6
    6062:	             lea 36(sp),sp
    6066:	             rts

00006068 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    6068:	                lea -44(sp),sp
    606c:	                move.l a6,-(sp)
    606e:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    6070:	                moveq #12,d0
    6072:	                move.l d0,40(sp)
    6076:	                clr.l 36(sp)
    607a:	                move.l 19c4c <SysBase>,d0
    6080:	                movea.l d0,a6
    6082:	                move.l 40(sp),d0
    6086:	                move.l 36(sp),d1
    608a:	                jsr -684(a6)
    608e:	                move.l d0,32(sp)
    6092:	                move.l 32(sp),d0
    6096:	                move.l d0,28(sp)
	if( !newP) {
    609a:	            /-- bne.s 60b0 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    609c:	            |   pea 1582e <newfatal.c.307beca7+0x142>
    60a2:	            |   jsr 127a4 <KPrintF>
    60a8:	            |   addq.l #4,sp
		return NULL;
    60aa:	            |   moveq #0,d0
    60ac:	/-----------|-- bra.w 6280 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    60b0:	|           \-> movea.l 28(sp),a0
    60b4:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    60ba:	|               move.l 56(sp),d1
    60be:	|               move.l d1,d0
    60c0:	|               add.l d0,d0
    60c2:	|               add.l d1,d0
    60c4:	|               add.l d0,d0
    60c6:	|               add.l d0,d0
    60c8:	|               move.l d0,24(sp)
    60cc:	|               clr.l 20(sp)
    60d0:	|               move.l 19c4c <SysBase>,d0
    60d6:	|               movea.l d0,a6
    60d8:	|               move.l 24(sp),d0
    60dc:	|               move.l 20(sp),d1
    60e0:	|               jsr -684(a6)
    60e4:	|               move.l d0,16(sp)
    60e8:	|               move.l 16(sp),d0
    60ec:	|               movea.l 28(sp),a0
    60f0:	|               move.l d0,4(a0)
	if( !newP->frames) {
    60f4:	|               movea.l 28(sp),a0
    60f8:	|               move.l 4(a0),d0
    60fc:	|           /-- bne.s 6112 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    60fe:	|           |   pea 1582e <newfatal.c.307beca7+0x142>
    6104:	|           |   jsr 127a4 <KPrintF>
    610a:	|           |   addq.l #4,sp
		return NULL;
    610c:	|           |   moveq #0,d0
    610e:	+-----------|-- bra.w 6280 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    6112:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    6118:	|               movea.l 60(sp),a0
    611c:	|               move.l (a0),44(sp)
	while (a) {
    6120:	|     /-------- bra.w 6274 <createPersonaAnim+0x20c>
		a --;
    6124:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    6128:	|  |  |         movea.l 28(sp),a0
    612c:	|  |  |         movea.l 4(a0),a0
    6130:	|  |  |         move.l 48(sp),d1
    6134:	|  |  |         move.l d1,d0
    6136:	|  |  |         add.l d0,d0
    6138:	|  |  |         add.l d1,d0
    613a:	|  |  |         add.l d0,d0
    613c:	|  |  |         add.l d0,d0
    613e:	|  |  |         adda.l d0,a0
    6140:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    6144:	|  |  |         movea.l 44(sp),a0
    6148:	|  |  |         move.l (a0),d0
    614a:	|  |  |         moveq #5,d1
    614c:	|  |  |         cmp.l d0,d1
    614e:	|  |  |     /-- bne.s 617a <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    6150:	|  |  |     |   movea.l 28(sp),a0
    6154:	|  |  |     |   movea.l 4(a0),a0
    6158:	|  |  |     |   move.l 48(sp),d1
    615c:	|  |  |     |   move.l d1,d0
    615e:	|  |  |     |   add.l d0,d0
    6160:	|  |  |     |   add.l d1,d0
    6162:	|  |  |     |   add.l d0,d0
    6164:	|  |  |     |   add.l d0,d0
    6166:	|  |  |     |   lea (0,a0,d0.l),a1
    616a:	|  |  |     |   movea.l 44(sp),a0
    616e:	|  |  |     |   move.l 4(a0),d0
    6172:	|  |  |     |   move.l d0,8(a1)
    6176:	|  |  |  /--|-- bra.w 6222 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    617a:	|  |  |  |  \-> movea.l 44(sp),a0
    617e:	|  |  |  |      move.l (a0),d0
    6180:	|  |  |  |      moveq #2,d1
    6182:	|  |  |  |      cmp.l d0,d1
    6184:	|  |  |  |  /-- bne.s 61b0 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    6186:	|  |  |  |  |   movea.l 44(sp),a0
    618a:	|  |  |  |  |   move.l 4(a0),d2
    618e:	|  |  |  |  |   movea.l 28(sp),a0
    6192:	|  |  |  |  |   movea.l 4(a0),a0
    6196:	|  |  |  |  |   move.l 48(sp),d1
    619a:	|  |  |  |  |   move.l d1,d0
    619c:	|  |  |  |  |   add.l d0,d0
    619e:	|  |  |  |  |   add.l d1,d0
    61a0:	|  |  |  |  |   add.l d0,d0
    61a2:	|  |  |  |  |   add.l d0,d0
    61a4:	|  |  |  |  |   adda.l d0,a0
    61a6:	|  |  |  |  |   move.l d2,d0
    61a8:	|  |  |  |  |   neg.l d0
    61aa:	|  |  |  |  |   move.l d0,8(a0)
    61ae:	|  |  |  +--|-- bra.s 6222 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    61b0:	|  |  |  |  \-> movea.l 44(sp),a0
    61b4:	|  |  |  |      move.l (a0),d0
    61b6:	|  |  |  |      moveq #6,d1
    61b8:	|  |  |  |      cmp.l d0,d1
    61ba:	|  |  |  |  /-- bne.s 6202 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    61bc:	|  |  |  |  |   movea.l 44(sp),a0
    61c0:	|  |  |  |  |   movea.l 4(a0),a0
    61c4:	|  |  |  |  |   move.l (a0),d0
    61c6:	|  |  |  |  |   move.l d0,-(sp)
    61c8:	|  |  |  |  |   pea 1 <_start+0x1>
    61cc:	|  |  |  |  |   lea 20(sp),a0
    61d0:	|  |  |  |  |   move.l a0,-(sp)
    61d2:	|  |  |  |  |   jsr 10750 <getValueType>
    61d8:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    61dc:	|  |  |  |  |   movea.l 44(sp),a0
    61e0:	|  |  |  |  |   movea.l 4(a0),a0
    61e4:	|  |  |  |  |   movea.l (a0),a0
    61e6:	|  |  |  |  |   move.l 8(a0),d0
    61ea:	|  |  |  |  |   move.l d0,-(sp)
    61ec:	|  |  |  |  |   pea 1 <_start+0x1>
    61f0:	|  |  |  |  |   lea 16(sp),a0
    61f4:	|  |  |  |  |   move.l a0,-(sp)
    61f6:	|  |  |  |  |   jsr 10750 <getValueType>
    61fc:	|  |  |  |  |   lea 12(sp),sp
    6200:	|  |  |  +--|-- bra.s 6222 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    6202:	|  |  |  |  \-> move.l 44(sp),d0
    6206:	|  |  |  |      move.l d0,-(sp)
    6208:	|  |  |  |      pea 1 <_start+0x1>
    620c:	|  |  |  |      lea 20(sp),a0
    6210:	|  |  |  |      move.l a0,-(sp)
    6212:	|  |  |  |      jsr 10750 <getValueType>
    6218:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    621c:	|  |  |  |      moveq #1,d0
    621e:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    6222:	|  |  |  \----> move.l 60(sp),-(sp)
    6226:	|  |  |         jsr 110d4 <trimStack>
    622c:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    622e:	|  |  |         movea.l 28(sp),a0
    6232:	|  |  |         movea.l 4(a0),a0
    6236:	|  |  |         move.l 48(sp),d1
    623a:	|  |  |         move.l d1,d0
    623c:	|  |  |         add.l d0,d0
    623e:	|  |  |         add.l d1,d0
    6240:	|  |  |         add.l d0,d0
    6242:	|  |  |         add.l d0,d0
    6244:	|  |  |         adda.l d0,a0
    6246:	|  |  |         move.l 12(sp),d0
    624a:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    624c:	|  |  |         movea.l 28(sp),a0
    6250:	|  |  |         movea.l 4(a0),a0
    6254:	|  |  |         move.l 48(sp),d1
    6258:	|  |  |         move.l d1,d0
    625a:	|  |  |         add.l d0,d0
    625c:	|  |  |         add.l d1,d0
    625e:	|  |  |         add.l d0,d0
    6260:	|  |  |         add.l d0,d0
    6262:	|  |  |         adda.l d0,a0
    6264:	|  |  |         move.l 8(sp),d0
    6268:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    626c:	|  |  |         movea.l 60(sp),a0
    6270:	|  |  |         move.l (a0),44(sp)
	while (a) {
    6274:	|  |  \-------> tst.l 48(sp)
    6278:	|  \----------- bne.w 6124 <createPersonaAnim+0xbc>
	}

	return newP;
    627c:	|               move.l 28(sp),d0
}
    6280:	\-------------> move.l (sp)+,d2
    6282:	                movea.l (sp)+,a6
    6284:	                lea 44(sp),sp
    6288:	                rts

0000628a <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    628a:	       subq.l #8,sp
    628c:	       move.l a6,-(sp)

	if (orig)
    628e:	       tst.l 16(sp)
    6292:	/----- beq.s 62d2 <deleteAnim+0x48>
	{
		if (orig -> numFrames) {
    6294:	|      movea.l 16(sp),a0
    6298:	|      move.l 8(a0),d0
    629c:	|  /-- beq.s 62b8 <deleteAnim+0x2e>
			FreeVec( orig->frames);
    629e:	|  |   movea.l 16(sp),a0
    62a2:	|  |   move.l 4(a0),8(sp)
    62a8:	|  |   move.l 19c4c <SysBase>,d0
    62ae:	|  |   movea.l d0,a6
    62b0:	|  |   movea.l 8(sp),a1
    62b4:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    62b8:	|  \-> move.l 16(sp),4(sp)
    62be:	|      move.l 19c4c <SysBase>,d0
    62c4:	|      movea.l d0,a6
    62c6:	|      movea.l 4(sp),a1
    62ca:	|      jsr -690(a6)
		orig = NULL;
    62ce:	|      clr.l 16(sp)
	}
}
    62d2:	\----> nop
    62d4:	       movea.l (sp)+,a6
    62d6:	       addq.l #8,sp
    62d8:	       rts

000062da <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    62da:	          lea -124(sp),sp
    62de:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    62e2:	          movea.l 152(sp),a0
    62e6:	          move.l 44(a0),d1
    62ea:	          movea.l 152(sp),a0
    62ee:	          move.l 48(a0),d0
    62f2:	          cmp.l d1,d0
    62f4:	      /-- bne.s 6324 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    62f6:	      |   movea.l 152(sp),a0
    62fa:	      |   moveq #-1,d0
    62fc:	      |   move.l d0,44(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    6300:	      |   movea.l 152(sp),a0
    6304:	      |   move.l 28(a0),d0
    6308:	      |   movea.l 152(sp),a0
    630c:	      |   move.l d0,36(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    6310:	      |   movea.l 152(sp),a0
    6314:	      |   move.l 32(a0),d0
    6318:	      |   movea.l 152(sp),a0
    631c:	      |   move.l d0,40(a0)
    6320:	   /--|-- bra.w 688a <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    6324:	   |  \-> movea.l 19d54 <currentFloor>,a0
    632a:	   |      move.l 16(a0),d1
    632e:	   |      movea.l 152(sp),a0
    6332:	   |      move.l 44(a0),d0
    6336:	   |      add.l d0,d0
    6338:	   |      add.l d0,d0
    633a:	   |      movea.l d1,a0
    633c:	   |      adda.l d0,a0
    633e:	   |      move.l (a0),d1
    6340:	   |      movea.l 152(sp),a0
    6344:	   |      move.l 48(a0),d0
    6348:	   |      add.l d0,d0
    634a:	   |      add.l d0,d0
    634c:	   |      movea.l d1,a0
    634e:	   |      adda.l d0,a0
    6350:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    6354:	   |      moveq #-1,d0
    6356:	   |      cmp.l 144(sp),d0
    635a:	   |  /-- bne.s 6362 <doBorderStuff+0x88>
    635c:	   |  |   clr.w d0
    635e:	/--|--|-- bra.w 698a <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    6362:	|  |  \-> movea.l 19d54 <currentFloor>,a0
    6368:	|  |      move.l 12(a0),d1
    636c:	|  |      move.l 144(sp),d0
    6370:	|  |      lsl.l #3,d0
    6372:	|  |      add.l d0,d1
    6374:	|  |      movea.l 19d54 <currentFloor>,a0
    637a:	|  |      movea.l 12(a0),a1
    637e:	|  |      movea.l 152(sp),a0
    6382:	|  |      move.l 44(a0),d0
    6386:	|  |      lsl.l #3,d0
    6388:	|  |      add.l a1,d0
    638a:	|  |      lea 40(sp),a0
    638e:	|  |      move.l a0,-(sp)
    6390:	|  |      lea 48(sp),a0
    6394:	|  |      move.l a0,-(sp)
    6396:	|  |      move.l d1,-(sp)
    6398:	|  |      move.l d0,-(sp)
    639a:	|  |      jsr 11a1a <getMatchingCorners>
    63a0:	|  |      lea 16(sp),sp
    63a4:	|  |      tst.w d0
    63a6:	|  |  /-- bne.s 63bc <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    63a8:	|  |  |   pea 15858 <newfatal.c.307beca7+0x16c>
    63ae:	|  |  |   jsr 127a4 <KPrintF>
    63b4:	|  |  |   addq.l #4,sp
            return FALSE;
    63b6:	|  |  |   clr.w d0
    63b8:	+--|--|-- bra.w 698a <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    63bc:	|  |  \-> movea.l 152(sp),a0
    63c0:	|  |      move.l 144(sp),44(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    63c6:	|  |      movea.l 152(sp),a0
    63ca:	|  |      move.l (a0),d0
    63cc:	|  |      move.l d0,-(sp)
    63ce:	|  |      jsr 12b94 <__fixsfsi>
    63d4:	|  |      addq.l #4,sp
    63d6:	|  |      move.l d0,140(sp)
    63da:	|  |      movea.l 152(sp),a0
    63de:	|  |      move.l 4(a0),d0
    63e2:	|  |      move.l d0,-(sp)
    63e4:	|  |      jsr 12b94 <__fixsfsi>
    63ea:	|  |      addq.l #4,sp
    63ec:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    63f0:	|  |      movea.l 152(sp),a0
    63f4:	|  |      move.l 28(a0),132(sp)
    63fa:	|  |      movea.l 152(sp),a0
    63fe:	|  |      move.l 32(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    6404:	|  |      movea.l 19d54 <currentFloor>,a0
    640a:	|  |      move.l 4(a0),d1
    640e:	|  |      move.l 44(sp),d0
    6412:	|  |      lsl.l #3,d0
    6414:	|  |      movea.l d1,a0
    6416:	|  |      adda.l d0,a0
    6418:	|  |      move.l (a0),124(sp)
    641c:	|  |      movea.l 19d54 <currentFloor>,a0
    6422:	|  |      move.l 4(a0),d1
    6426:	|  |      move.l 44(sp),d0
    642a:	|  |      lsl.l #3,d0
    642c:	|  |      movea.l d1,a0
    642e:	|  |      adda.l d0,a0
    6430:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    6436:	|  |      movea.l 19d54 <currentFloor>,a0
    643c:	|  |      move.l 4(a0),d1
    6440:	|  |      move.l 40(sp),d0
    6444:	|  |      lsl.l #3,d0
    6446:	|  |      movea.l d1,a0
    6448:	|  |      adda.l d0,a0
    644a:	|  |      move.l (a0),116(sp)
    644e:	|  |      movea.l 19d54 <currentFloor>,a0
    6454:	|  |      move.l 4(a0),d1
    6458:	|  |      move.l 40(sp),d0
    645c:	|  |      lsl.l #3,d0
    645e:	|  |      movea.l d1,a0
    6460:	|  |      adda.l d0,a0
    6462:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    6468:	|  |      move.l 140(sp),d0
    646c:	|  |      sub.l 132(sp),d0
    6470:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    6474:	|  |      move.l 136(sp),d0
    6478:	|  |      sub.l 128(sp),d0
    647c:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    6480:	|  |      move.l 116(sp),d0
    6484:	|  |      sub.l 124(sp),d0
    6488:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    648c:	|  |      move.l 112(sp),d0
    6490:	|  |      sub.l 120(sp),d0
    6494:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    6498:	|  |      move.l 124(sp),d0
    649c:	|  |      sub.l 140(sp),d0
    64a0:	|  |      move.l 104(sp),-(sp)
    64a4:	|  |      move.l d0,-(sp)
    64a6:	|  |      jsr 13156 <__mulsi3>
    64ac:	|  |      addq.l #8,sp
    64ae:	|  |      move.l d0,d2
    64b0:	|  |      move.l 120(sp),d0
    64b4:	|  |      sub.l 136(sp),d0
    64b8:	|  |      move.l 108(sp),-(sp)
    64bc:	|  |      move.l d0,-(sp)
    64be:	|  |      jsr 13156 <__mulsi3>
    64c4:	|  |      addq.l #8,sp
    64c6:	|  |      move.l d2,d1
    64c8:	|  |      sub.l d0,d1
    64ca:	|  |      move.l d1,-(sp)
    64cc:	|  |      jsr 12bbc <__floatsidf>
    64d2:	|  |      addq.l #4,sp
    64d4:	|  |      move.l d0,32(sp)
    64d8:	|  |      move.l d1,36(sp)
    64dc:	|  |      move.l 32(sp),88(sp)
    64e2:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    64e8:	|  |      move.l 96(sp),-(sp)
    64ec:	|  |      move.l 112(sp),-(sp)
    64f0:	|  |      jsr 13156 <__mulsi3>
    64f6:	|  |      addq.l #8,sp
    64f8:	|  |      move.l d0,d2
    64fa:	|  |      move.l 100(sp),-(sp)
    64fe:	|  |      move.l 108(sp),-(sp)
    6502:	|  |      jsr 13156 <__mulsi3>
    6508:	|  |      addq.l #8,sp
    650a:	|  |      move.l d2,d1
    650c:	|  |      sub.l d0,d1
    650e:	|  |      move.l d1,-(sp)
    6510:	|  |      jsr 12bbc <__floatsidf>
    6516:	|  |      addq.l #4,sp
    6518:	|  |      move.l d1,-(sp)
    651a:	|  |      move.l d0,-(sp)
    651c:	|  |      move.l 100(sp),-(sp)
    6520:	|  |      move.l 100(sp),-(sp)
    6524:	|  |      jsr 12a46 <__divdf3>
    652a:	|  |      lea 16(sp),sp
    652e:	|  |      move.l d0,24(sp)
    6532:	|  |      move.l d1,28(sp)
    6536:	|  |      move.l 24(sp),88(sp)
    653c:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    6542:	|  |      clr.l -(sp)
    6544:	|  |      clr.l -(sp)
    6546:	|  |      move.l 100(sp),-(sp)
    654a:	|  |      move.l 100(sp),-(sp)
    654e:	|  |      jsr 12d1a <__gtdf2>
    6554:	|  |      lea 16(sp),sp
    6558:	|  |      tst.l d0
    655a:	|  |  /-- ble.w 6632 <doBorderStuff+0x358>
    655e:	|  |  |   clr.l -(sp)
    6560:	|  |  |   move.l #1072693248,-(sp)
    6566:	|  |  |   move.l 100(sp),-(sp)
    656a:	|  |  |   move.l 100(sp),-(sp)
    656e:	|  |  |   jsr 12dd4 <__ltdf2>
    6574:	|  |  |   lea 16(sp),sp
    6578:	|  |  |   tst.l d0
    657a:	|  |  +-- bge.w 6632 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    657e:	|  |  |   move.l 124(sp),-(sp)
    6582:	|  |  |   jsr 12bbc <__floatsidf>
    6588:	|  |  |   addq.l #4,sp
    658a:	|  |  |   move.l d0,d2
    658c:	|  |  |   move.l d1,d3
    658e:	|  |  |   move.l 100(sp),-(sp)
    6592:	|  |  |   jsr 12bbc <__floatsidf>
    6598:	|  |  |   addq.l #4,sp
    659a:	|  |  |   move.l 92(sp),-(sp)
    659e:	|  |  |   move.l 92(sp),-(sp)
    65a2:	|  |  |   move.l d1,-(sp)
    65a4:	|  |  |   move.l d0,-(sp)
    65a6:	|  |  |   jsr 12c4c <__muldf3>
    65ac:	|  |  |   lea 16(sp),sp
    65b0:	|  |  |   move.l d1,-(sp)
    65b2:	|  |  |   move.l d0,-(sp)
    65b4:	|  |  |   move.l d3,-(sp)
    65b6:	|  |  |   move.l d2,-(sp)
    65b8:	|  |  |   jsr 129e4 <__adddf3>
    65be:	|  |  |   lea 16(sp),sp
    65c2:	|  |  |   move.l d1,-(sp)
    65c4:	|  |  |   move.l d0,-(sp)
    65c6:	|  |  |   jsr 12b54 <__fixdfsi>
    65cc:	|  |  |   addq.l #8,sp
    65ce:	|  |  |   movea.l 152(sp),a0
    65d2:	|  |  |   move.l d0,36(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    65d6:	|  |  |   move.l 120(sp),-(sp)
    65da:	|  |  |   jsr 12bbc <__floatsidf>
    65e0:	|  |  |   addq.l #4,sp
    65e2:	|  |  |   move.l d0,d2
    65e4:	|  |  |   move.l d1,d3
    65e6:	|  |  |   move.l 96(sp),-(sp)
    65ea:	|  |  |   jsr 12bbc <__floatsidf>
    65f0:	|  |  |   addq.l #4,sp
    65f2:	|  |  |   move.l 92(sp),-(sp)
    65f6:	|  |  |   move.l 92(sp),-(sp)
    65fa:	|  |  |   move.l d1,-(sp)
    65fc:	|  |  |   move.l d0,-(sp)
    65fe:	|  |  |   jsr 12c4c <__muldf3>
    6604:	|  |  |   lea 16(sp),sp
    6608:	|  |  |   move.l d1,-(sp)
    660a:	|  |  |   move.l d0,-(sp)
    660c:	|  |  |   move.l d3,-(sp)
    660e:	|  |  |   move.l d2,-(sp)
    6610:	|  |  |   jsr 129e4 <__adddf3>
    6616:	|  |  |   lea 16(sp),sp
    661a:	|  |  |   move.l d1,-(sp)
    661c:	|  |  |   move.l d0,-(sp)
    661e:	|  |  |   jsr 12b54 <__fixdfsi>
    6624:	|  |  |   addq.l #8,sp
    6626:	|  |  |   movea.l 152(sp),a0
    662a:	|  |  |   move.l d0,40(a0)
    662e:	|  +--|-- bra.w 688a <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    6632:	|  |  \-> move.l 140(sp),d0
    6636:	|  |      sub.l 124(sp),d0
    663a:	|  |      move.l d0,84(sp)
    663e:	|  |      move.l 140(sp),d0
    6642:	|  |      sub.l 116(sp),d0
    6646:	|  |      move.l d0,80(sp)
    664a:	|  |      move.l 132(sp),d0
    664e:	|  |      sub.l 124(sp),d0
    6652:	|  |      move.l d0,76(sp)
    6656:	|  |      move.l 132(sp),d0
    665a:	|  |      sub.l 116(sp),d0
    665e:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    6662:	|  |      move.l 136(sp),d0
    6666:	|  |      sub.l 120(sp),d0
    666a:	|  |      move.l d0,68(sp)
    666e:	|  |      move.l 136(sp),d0
    6672:	|  |      sub.l 112(sp),d0
    6676:	|  |      move.l d0,64(sp)
    667a:	|  |      move.l 128(sp),d0
    667e:	|  |      sub.l 120(sp),d0
    6682:	|  |      move.l d0,60(sp)
    6686:	|  |      move.l 128(sp),d0
    668a:	|  |      sub.l 112(sp),d0
    668e:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    6692:	|  |      move.l 84(sp),-(sp)
    6696:	|  |      move.l 88(sp),-(sp)
    669a:	|  |      jsr 13156 <__mulsi3>
    66a0:	|  |      addq.l #8,sp
    66a2:	|  |      move.l d0,84(sp)
    66a6:	|  |      move.l 80(sp),-(sp)
    66aa:	|  |      move.l 84(sp),-(sp)
    66ae:	|  |      jsr 13156 <__mulsi3>
    66b4:	|  |      addq.l #8,sp
    66b6:	|  |      move.l d0,80(sp)
    66ba:	|  |      move.l 76(sp),-(sp)
    66be:	|  |      move.l 80(sp),-(sp)
    66c2:	|  |      jsr 13156 <__mulsi3>
    66c8:	|  |      addq.l #8,sp
    66ca:	|  |      move.l d0,76(sp)
    66ce:	|  |      move.l 72(sp),-(sp)
    66d2:	|  |      move.l 76(sp),-(sp)
    66d6:	|  |      jsr 13156 <__mulsi3>
    66dc:	|  |      addq.l #8,sp
    66de:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    66e2:	|  |      move.l 68(sp),-(sp)
    66e6:	|  |      move.l 72(sp),-(sp)
    66ea:	|  |      jsr 13156 <__mulsi3>
    66f0:	|  |      addq.l #8,sp
    66f2:	|  |      move.l d0,68(sp)
    66f6:	|  |      move.l 64(sp),-(sp)
    66fa:	|  |      move.l 68(sp),-(sp)
    66fe:	|  |      jsr 13156 <__mulsi3>
    6704:	|  |      addq.l #8,sp
    6706:	|  |      move.l d0,64(sp)
    670a:	|  |      move.l 60(sp),-(sp)
    670e:	|  |      move.l 64(sp),-(sp)
    6712:	|  |      jsr 13156 <__mulsi3>
    6718:	|  |      addq.l #8,sp
    671a:	|  |      move.l d0,60(sp)
    671e:	|  |      move.l 56(sp),-(sp)
    6722:	|  |      move.l 60(sp),-(sp)
    6726:	|  |      jsr 13156 <__mulsi3>
    672c:	|  |      addq.l #8,sp
    672e:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    6732:	|  |      move.l 84(sp),-(sp)
    6736:	|  |      jsr 12bbc <__floatsidf>
    673c:	|  |      addq.l #4,sp
    673e:	|  |      move.l d0,d2
    6740:	|  |      move.l d1,d3
    6742:	|  |      move.l 68(sp),-(sp)
    6746:	|  |      jsr 12bbc <__floatsidf>
    674c:	|  |      addq.l #4,sp
    674e:	|  |      move.l d1,-(sp)
    6750:	|  |      move.l d0,-(sp)
    6752:	|  |      move.l d3,-(sp)
    6754:	|  |      move.l d2,-(sp)
    6756:	|  |      jsr 129e4 <__adddf3>
    675c:	|  |      lea 16(sp),sp
    6760:	|  |      move.l d1,-(sp)
    6762:	|  |      move.l d0,-(sp)
    6764:	|  |      jsr 1310c <sqrt>
    676a:	|  |      addq.l #8,sp
    676c:	|  |      move.l d0,d2
    676e:	|  |      move.l d1,d3
    6770:	|  |      move.l 76(sp),-(sp)
    6774:	|  |      jsr 12bbc <__floatsidf>
    677a:	|  |      addq.l #4,sp
    677c:	|  |      move.l d0,d4
    677e:	|  |      move.l d1,d5
    6780:	|  |      move.l 60(sp),-(sp)
    6784:	|  |      jsr 12bbc <__floatsidf>
    678a:	|  |      addq.l #4,sp
    678c:	|  |      move.l d1,-(sp)
    678e:	|  |      move.l d0,-(sp)
    6790:	|  |      move.l d5,-(sp)
    6792:	|  |      move.l d4,-(sp)
    6794:	|  |      jsr 129e4 <__adddf3>
    679a:	|  |      lea 16(sp),sp
    679e:	|  |      move.l d1,-(sp)
    67a0:	|  |      move.l d0,-(sp)
    67a2:	|  |      jsr 1310c <sqrt>
    67a8:	|  |      addq.l #8,sp
    67aa:	|  |      move.l d1,-(sp)
    67ac:	|  |      move.l d0,-(sp)
    67ae:	|  |      move.l d3,-(sp)
    67b0:	|  |      move.l d2,-(sp)
    67b2:	|  |      jsr 129e4 <__adddf3>
    67b8:	|  |      lea 16(sp),sp
    67bc:	|  |      move.l d0,d2
    67be:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    67c0:	|  |      move.l 80(sp),-(sp)
    67c4:	|  |      jsr 12bbc <__floatsidf>
    67ca:	|  |      addq.l #4,sp
    67cc:	|  |      move.l d0,d4
    67ce:	|  |      move.l d1,d5
    67d0:	|  |      move.l 64(sp),-(sp)
    67d4:	|  |      jsr 12bbc <__floatsidf>
    67da:	|  |      addq.l #4,sp
    67dc:	|  |      move.l d1,-(sp)
    67de:	|  |      move.l d0,-(sp)
    67e0:	|  |      move.l d5,-(sp)
    67e2:	|  |      move.l d4,-(sp)
    67e4:	|  |      jsr 129e4 <__adddf3>
    67ea:	|  |      lea 16(sp),sp
    67ee:	|  |      move.l d1,-(sp)
    67f0:	|  |      move.l d0,-(sp)
    67f2:	|  |      jsr 1310c <sqrt>
    67f8:	|  |      addq.l #8,sp
    67fa:	|  |      move.l d0,d4
    67fc:	|  |      move.l d1,d5
    67fe:	|  |      move.l 72(sp),-(sp)
    6802:	|  |      jsr 12bbc <__floatsidf>
    6808:	|  |      addq.l #4,sp
    680a:	|  |      move.l d0,d6
    680c:	|  |      move.l d1,d7
    680e:	|  |      move.l 56(sp),-(sp)
    6812:	|  |      jsr 12bbc <__floatsidf>
    6818:	|  |      addq.l #4,sp
    681a:	|  |      move.l d1,-(sp)
    681c:	|  |      move.l d0,-(sp)
    681e:	|  |      move.l d7,-(sp)
    6820:	|  |      move.l d6,-(sp)
    6822:	|  |      jsr 129e4 <__adddf3>
    6828:	|  |      lea 16(sp),sp
    682c:	|  |      move.l d1,-(sp)
    682e:	|  |      move.l d0,-(sp)
    6830:	|  |      jsr 1310c <sqrt>
    6836:	|  |      addq.l #8,sp
    6838:	|  |      move.l d1,-(sp)
    683a:	|  |      move.l d0,-(sp)
    683c:	|  |      move.l d5,-(sp)
    683e:	|  |      move.l d4,-(sp)
    6840:	|  |      jsr 129e4 <__adddf3>
    6846:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    684a:	|  |      move.l d1,-(sp)
    684c:	|  |      move.l d0,-(sp)
    684e:	|  |      move.l d3,-(sp)
    6850:	|  |      move.l d2,-(sp)
    6852:	|  |      jsr 12dd4 <__ltdf2>
    6858:	|  |      lea 16(sp),sp
    685c:	|  |      tst.l d0
    685e:	|  |  /-- bge.s 6876 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    6860:	|  |  |   movea.l 152(sp),a0
    6864:	|  |  |   move.l 124(sp),36(a0)
                moveMe -> thisStepY = y3;
    686a:	|  |  |   movea.l 152(sp),a0
    686e:	|  |  |   move.l 120(sp),40(a0)
    6874:	|  +--|-- bra.s 688a <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    6876:	|  |  \-> movea.l 152(sp),a0
    687a:	|  |      move.l 116(sp),36(a0)
                moveMe -> thisStepY = y4;
    6880:	|  |      movea.l 152(sp),a0
    6884:	|  |      move.l 112(sp),40(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    688a:	|  \----> movea.l 152(sp),a0
    688e:	|         move.l 40(a0),d0
    6892:	|         move.l d0,-(sp)
    6894:	|         jsr 12bfc <__floatsisf>
    689a:	|         addq.l #4,sp
    689c:	|         move.l d0,d1
    689e:	|         movea.l 152(sp),a0
    68a2:	|         move.l 4(a0),d0
    68a6:	|         move.l d0,-(sp)
    68a8:	|         move.l d1,-(sp)
    68aa:	|         jsr 12ef0 <__subsf3>
    68b0:	|         addq.l #8,sp
    68b2:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    68b6:	|         movea.l 152(sp),a0
    68ba:	|         move.l (a0),d2
    68bc:	|         movea.l 152(sp),a0
    68c0:	|         move.l 36(a0),d0
    68c4:	|         move.l d0,-(sp)
    68c6:	|         jsr 12bfc <__floatsisf>
    68cc:	|         addq.l #4,sp
    68ce:	|         move.l d0,-(sp)
    68d0:	|         move.l d2,-(sp)
    68d2:	|         jsr 12ef0 <__subsf3>
    68d8:	|         addq.l #8,sp
    68da:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    68de:	|         clr.l -(sp)
    68e0:	|         move.l 52(sp),-(sp)
    68e4:	|         jsr 12e58 <__nesf2>
    68ea:	|         addq.l #8,sp
    68ec:	|         tst.l d0
    68ee:	|     /-- bne.s 6902 <doBorderStuff+0x628>
    68f0:	|     |   clr.l -(sp)
    68f2:	|     |   move.l 56(sp),-(sp)
    68f6:	|     |   jsr 12e58 <__nesf2>
    68fc:	|     |   addq.l #8,sp
    68fe:	|     |   tst.l d0
    6900:	|  /--|-- beq.s 6978 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    6902:	|  |  \-> move.l 52(sp),d0
    6906:	|  |      move.l d0,-(sp)
    6908:	|  |      move.l d0,-(sp)
    690a:	|  |      jsr 129ae <__addsf3>
    6910:	|  |      addq.l #8,sp
    6912:	|  |      move.l d0,-(sp)
    6914:	|  |      move.l 52(sp),-(sp)
    6918:	|  |      jsr 12f5c <atan2f>
    691e:	|  |      addq.l #8,sp
    6920:	|  |      move.l d0,-(sp)
    6922:	|  |      jsr 12b14 <__extendsfdf2>
    6928:	|  |      addq.l #4,sp
    692a:	|  |      move.l #-1540411785,-(sp)
    6930:	|  |      move.l #1078765033,-(sp)
    6936:	|  |      move.l d1,-(sp)
    6938:	|  |      move.l d0,-(sp)
    693a:	|  |      jsr 12c4c <__muldf3>
    6940:	|  |      lea 16(sp),sp
    6944:	|  |      clr.l -(sp)
    6946:	|  |      move.l #1080459264,-(sp)
    694c:	|  |      move.l d1,-(sp)
    694e:	|  |      move.l d0,-(sp)
    6950:	|  |      jsr 129e4 <__adddf3>
    6956:	|  |      lea 16(sp),sp
    695a:	|  |      move.l d1,-(sp)
    695c:	|  |      move.l d0,-(sp)
    695e:	|  |      jsr 12b54 <__fixdfsi>
    6964:	|  |      addq.l #8,sp
    6966:	|  |      movea.l 152(sp),a0
    696a:	|  |      move.l d0,84(a0)
        moveMe -> spinning = TRUE;
    696e:	|  |      movea.l 152(sp),a0
    6972:	|  |      move.w #1,54(a0)
    }

    setFrames (moveMe, ANI_WALK);
    6978:	|  \----> pea 1 <_start+0x1>
    697c:	|         move.l 156(sp),-(sp)
    6980:	|         jsr 55e2 <setFrames>
    6986:	|         addq.l #8,sp
    return TRUE;
    6988:	|         moveq #1,d0
}
    698a:	\-------> movem.l (sp)+,d2-d7
    698e:	          lea 124(sp),sp
    6992:	          rts

00006994 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    6994:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    6996:	          move.l 19cac <allPeople>,(sp)
	while (thisPerson) {
    699c:	      /-- bra.s 69b4 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    699e:	/-----|-> movea.l (sp),a0
    69a0:	|     |   movea.l 102(a0),a0
    69a4:	|     |   move.l 4(a0),d0
    69a8:	|     |   cmp.l 8(sp),d0
    69ac:	|  /--|-- beq.s 69ba <findPerson+0x26>
		thisPerson = thisPerson -> next;
    69ae:	|  |  |   movea.l (sp),a0
    69b0:	|  |  |   move.l 24(a0),(sp)
	while (thisPerson) {
    69b4:	|  |  \-> tst.l (sp)
    69b6:	\--|----- bne.s 699e <findPerson+0xa>
    69b8:	   |  /-- bra.s 69bc <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    69ba:	   \--|-> nop
	}
	return thisPerson;
    69bc:	      \-> move.l (sp),d0
}
    69be:	          addq.l #4,sp
    69c0:	          rts

000069c2 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    69c2:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    69c4:	       move.l 12(sp),-(sp)
    69c8:	       jsr 6994 <findPerson>
    69ce:	       addq.l #4,sp
    69d0:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    69d2:	   /-- bne.s 69d8 <floatCharacter+0x16>
    69d4:	   |   clr.w d0
    69d6:	/--|-- bra.s 69e2 <floatCharacter+0x20>
	moveMe -> floaty = f;
    69d8:	|  \-> movea.l (sp),a0
    69da:	|      move.l 8(sp),12(a0)
	return TRUE;
    69e0:	|      moveq #1,d0
}
    69e2:	\----> addq.l #4,sp
    69e4:	       rts

000069e6 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    69e6:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    69e8:	          tst.l 8(sp)
    69ec:	      /-- bne.s 69fa <forceWalkingPerson+0x14>
    69ee:	      |   tst.l 12(sp)
    69f2:	      +-- bne.s 69fa <forceWalkingPerson+0x14>
    69f4:	      |   clr.w d0
    69f6:	/-----|-- bra.w 6a8c <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    69fa:	|     \-> move.l 16(sp),-(sp)
    69fe:	|         jsr 6994 <findPerson>
    6a04:	|         addq.l #4,sp
    6a06:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    6a08:	|     /-- bne.s 6a0e <forceWalkingPerson+0x28>
    6a0a:	|     |   clr.w d0
    6a0c:	+-----|-- bra.s 6a8c <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    6a0e:	|     \-> movea.l (sp),a0
    6a10:	|         move.l 56(a0),d0
    6a14:	|     /-- beq.s 6a26 <forceWalkingPerson+0x40>
    6a16:	|     |   movea.l (sp),a0
    6a18:	|     |   move.l 56(a0),d0
    6a1c:	|     |   move.l d0,-(sp)
    6a1e:	|     |   jsr 1ea2 <abortFunction>
    6a24:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    6a26:	|     \-> movea.l (sp),a0
    6a28:	|         move.w #1,52(a0)
    moveMe->continueAfterWalking = NULL;
    6a2e:	|         movea.l (sp),a0
    6a30:	|         clr.l 56(a0)
    moveMe->directionWhenDoneWalking = di;
    6a34:	|         movea.l (sp),a0
    6a36:	|         move.l 24(sp),98(a0)

    moveMe->walkToX = x;
    6a3c:	|         movea.l (sp),a0
    6a3e:	|         move.l 8(sp),28(a0)
    moveMe->walkToY = y;
    6a44:	|         movea.l (sp),a0
    6a46:	|         move.l 12(sp),32(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    6a4c:	|         movea.l (sp),a0
    6a4e:	|         clr.l 44(a0)
    moveMe->walkToPoly = 0;
    6a52:	|         movea.l (sp),a0
    6a54:	|         clr.l 48(a0)

    doBorderStuff(moveMe);
    6a58:	|         move.l (sp),-(sp)
    6a5a:	|         jsr 62da <doBorderStuff>
    6a60:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    6a62:	|         pea 1 <_start+0x1>
    6a66:	|         move.l 4(sp),-(sp)
    6a6a:	|         jsr 8122 <walkMe>
    6a70:	|         addq.l #8,sp
    6a72:	|         tst.w d0
    6a74:	|     /-- bne.s 6a7e <forceWalkingPerson+0x98>
    6a76:	|     |   movea.l (sp),a0
    6a78:	|     |   move.w 54(a0),d0
    6a7c:	|  /--|-- beq.s 6a8a <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    6a7e:	|  |  \-> movea.l (sp),a0
    6a80:	|  |      move.l 20(sp),56(a0)
        return TRUE;
    6a86:	|  |      moveq #1,d0
    6a88:	+--|----- bra.s 6a8c <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    6a8a:	|  \----> clr.w d0
    }
}
    6a8c:	\-------> addq.l #4,sp
    6a8e:	          rts

00006a90 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    6a90:	                lea -56(sp),sp
    6a94:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    6a96:	                move.l #320,56(sp)
    6a9e:	                move.l #200,52(sp)
    6aa6:	                moveq #-1,d0
    6aa8:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    6aac:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    6ab4:	                clr.l 44(sp)
    6ab8:	   /----------- bra.w 6c90 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    6abc:	/--|----------> movea.l 19d54 <currentFloor>,a0
    6ac2:	|  |            move.l 12(a0),d1
    6ac6:	|  |            move.l 44(sp),d0
    6aca:	|  |            lsl.l #3,d0
    6acc:	|  |            movea.l d1,a0
    6ace:	|  |            adda.l d0,a0
    6ad0:	|  |            move.l (a0),d0
    6ad2:	|  |            move.l d0,d1
    6ad4:	|  |            subq.l #1,d1
    6ad6:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    6ada:	|  |            clr.l 40(sp)
    6ade:	|  |     /----- bra.w 6c6e <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    6ae2:	|  |  /--|----> movea.l 19d54 <currentFloor>,a0
    6ae8:	|  |  |  |      move.l 4(a0),d1
    6aec:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6af2:	|  |  |  |      movea.l 12(a0),a0
    6af6:	|  |  |  |      move.l 44(sp),d0
    6afa:	|  |  |  |      lsl.l #3,d0
    6afc:	|  |  |  |      adda.l d0,a0
    6afe:	|  |  |  |      movea.l 4(a0),a0
    6b02:	|  |  |  |      move.l 40(sp),d0
    6b06:	|  |  |  |      add.l d0,d0
    6b08:	|  |  |  |      add.l d0,d0
    6b0a:	|  |  |  |      adda.l d0,a0
    6b0c:	|  |  |  |      move.l (a0),d0
    6b0e:	|  |  |  |      lsl.l #3,d0
    6b10:	|  |  |  |      movea.l d1,a0
    6b12:	|  |  |  |      adda.l d0,a0
    6b14:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    6b18:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6b1e:	|  |  |  |      move.l 4(a0),d1
    6b22:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6b28:	|  |  |  |      movea.l 12(a0),a0
    6b2c:	|  |  |  |      move.l 44(sp),d0
    6b30:	|  |  |  |      lsl.l #3,d0
    6b32:	|  |  |  |      adda.l d0,a0
    6b34:	|  |  |  |      movea.l 4(a0),a0
    6b38:	|  |  |  |      move.l 40(sp),d0
    6b3c:	|  |  |  |      add.l d0,d0
    6b3e:	|  |  |  |      add.l d0,d0
    6b40:	|  |  |  |      adda.l d0,a0
    6b42:	|  |  |  |      move.l (a0),d0
    6b44:	|  |  |  |      lsl.l #3,d0
    6b46:	|  |  |  |      movea.l d1,a0
    6b48:	|  |  |  |      adda.l d0,a0
    6b4a:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    6b50:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6b56:	|  |  |  |      move.l 4(a0),d1
    6b5a:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6b60:	|  |  |  |      movea.l 12(a0),a0
    6b64:	|  |  |  |      move.l 44(sp),d0
    6b68:	|  |  |  |      lsl.l #3,d0
    6b6a:	|  |  |  |      adda.l d0,a0
    6b6c:	|  |  |  |      movea.l 4(a0),a0
    6b70:	|  |  |  |      move.l 36(sp),d0
    6b74:	|  |  |  |      add.l d0,d0
    6b76:	|  |  |  |      add.l d0,d0
    6b78:	|  |  |  |      adda.l d0,a0
    6b7a:	|  |  |  |      move.l (a0),d0
    6b7c:	|  |  |  |      lsl.l #3,d0
    6b7e:	|  |  |  |      movea.l d1,a0
    6b80:	|  |  |  |      adda.l d0,a0
    6b82:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    6b86:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6b8c:	|  |  |  |      move.l 4(a0),d1
    6b90:	|  |  |  |      movea.l 19d54 <currentFloor>,a0
    6b96:	|  |  |  |      movea.l 12(a0),a0
    6b9a:	|  |  |  |      move.l 44(sp),d0
    6b9e:	|  |  |  |      lsl.l #3,d0
    6ba0:	|  |  |  |      adda.l d0,a0
    6ba2:	|  |  |  |      movea.l 4(a0),a0
    6ba6:	|  |  |  |      move.l 36(sp),d0
    6baa:	|  |  |  |      add.l d0,d0
    6bac:	|  |  |  |      add.l d0,d0
    6bae:	|  |  |  |      adda.l d0,a0
    6bb0:	|  |  |  |      move.l (a0),d0
    6bb2:	|  |  |  |      lsl.l #3,d0
    6bb4:	|  |  |  |      movea.l d1,a0
    6bb6:	|  |  |  |      adda.l d0,a0
    6bb8:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    6bbe:	|  |  |  |      movea.l 68(sp),a0
    6bc2:	|  |  |  |      move.l (a0),d1
    6bc4:	|  |  |  |      movea.l 64(sp),a0
    6bc8:	|  |  |  |      move.l (a0),d0
    6bca:	|  |  |  |      move.l d1,-(sp)
    6bcc:	|  |  |  |      move.l d0,-(sp)
    6bce:	|  |  |  |      move.l 24(sp),-(sp)
    6bd2:	|  |  |  |      move.l 32(sp),-(sp)
    6bd6:	|  |  |  |      move.l 40(sp),-(sp)
    6bda:	|  |  |  |      move.l 48(sp),-(sp)
    6bde:	|  |  |  |      lea 28(sp),a0
    6be2:	|  |  |  |      move.l a0,-(sp)
    6be4:	|  |  |  |      lea 36(sp),a0
    6be8:	|  |  |  |      move.l a0,-(sp)
    6bea:	|  |  |  |      jsr 115f8 <closestPointOnLine>
    6bf0:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    6bf4:	|  |  |  |      movea.l 64(sp),a0
    6bf8:	|  |  |  |      move.l (a0),d0
    6bfa:	|  |  |  |      move.l 8(sp),d1
    6bfe:	|  |  |  |      move.l d0,d2
    6c00:	|  |  |  |      sub.l d1,d2
    6c02:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    6c06:	|  |  |  |      movea.l 68(sp),a0
    6c0a:	|  |  |  |      move.l (a0),d0
    6c0c:	|  |  |  |      move.l 4(sp),d1
    6c10:	|  |  |  |      move.l d0,d2
    6c12:	|  |  |  |      sub.l d1,d2
    6c14:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    6c18:	|  |  |  |      move.l 28(sp),-(sp)
    6c1c:	|  |  |  |      move.l 32(sp),-(sp)
    6c20:	|  |  |  |      jsr 13156 <__mulsi3>
    6c26:	|  |  |  |      addq.l #8,sp
    6c28:	|  |  |  |      move.l d0,d2
    6c2a:	|  |  |  |      move.l 24(sp),-(sp)
    6c2e:	|  |  |  |      move.l 28(sp),-(sp)
    6c32:	|  |  |  |      jsr 13156 <__mulsi3>
    6c38:	|  |  |  |      addq.l #8,sp
    6c3a:	|  |  |  |      move.l d2,d1
    6c3c:	|  |  |  |      add.l d0,d1
    6c3e:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    6c42:	|  |  |  |      move.l 12(sp),d2
    6c46:	|  |  |  |      cmp.l 32(sp),d2
    6c4a:	|  |  |  |  /-- bge.s 6c64 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    6c4c:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    6c52:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    6c58:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    6c5e:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    6c64:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    6c6a:	|  |  |  |      addq.l #1,40(sp)
    6c6e:	|  |  |  \----> movea.l 19d54 <currentFloor>,a0
    6c74:	|  |  |         move.l 12(a0),d1
    6c78:	|  |  |         move.l 44(sp),d0
    6c7c:	|  |  |         lsl.l #3,d0
    6c7e:	|  |  |         movea.l d1,a0
    6c80:	|  |  |         adda.l d0,a0
    6c82:	|  |  |         move.l (a0),d0
    6c84:	|  |  |         cmp.l 40(sp),d0
    6c88:	|  |  \-------- bgt.w 6ae2 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    6c8c:	|  |            addq.l #1,44(sp)
    6c90:	|  \----------> movea.l 19d54 <currentFloor>,a0
    6c96:	|               move.l 8(a0),d0
    6c9a:	|               cmp.l 44(sp),d0
    6c9e:	\-------------- bgt.w 6abc <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    6ca2:	                moveq #-1,d0
    6ca4:	                cmp.l 48(sp),d0
    6ca8:	            /-- bne.s 6cae <handleClosestPoint+0x21e>
    6caa:	            |   clr.w d0
    6cac:	         /--|-- bra.s 6cc8 <handleClosestPoint+0x238>
	*setX = gotX;
    6cae:	         |  \-> movea.l 64(sp),a0
    6cb2:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    6cb6:	         |      movea.l 68(sp),a0
    6cba:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    6cbe:	         |      movea.l 72(sp),a0
    6cc2:	         |      move.l 48(sp),(a0)

	return TRUE;
    6cc6:	         |      moveq #1,d0
}
    6cc8:	         \----> move.l (sp)+,d2
    6cca:	                lea 56(sp),sp
    6cce:	                rts

00006cd0 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    6cd0:	clr.l 19cc0 <personRegion+0x10>
	personRegion.sY = 0;
    6cd6:	clr.l 19cc4 <personRegion+0x14>
	personRegion.di = -1;
    6cdc:	moveq #-1,d0
    6cde:	move.l d0,19cc8 <personRegion+0x18>
	allScreenRegions = NULL;
    6ce4:	clr.l 19d4c <allScreenRegions>

	return TRUE;
    6cea:	moveq #1,d0
}
    6cec:	rts

00006cee <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    6cee:	          subq.l #4,sp
    6cf0:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    6cf2:	          tst.l 12(sp)
    6cf6:	      /-- bne.s 6cfe <jumpPerson+0x10>
    6cf8:	      |   tst.l 16(sp)
    6cfc:	/-----|-- beq.s 6d72 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    6cfe:	|     \-> move.l 20(sp),-(sp)
    6d02:	|         jsr 6994 <findPerson>
    6d08:	|         addq.l #4,sp
    6d0a:	|         move.l d0,4(sp)
    if (!moveMe) return;
    6d0e:	|  /----- beq.s 6d76 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    6d10:	|  |      movea.l 4(sp),a0
    6d14:	|  |      move.l 56(a0),d0
    6d18:	|  |  /-- beq.s 6d2c <jumpPerson+0x3e>
    6d1a:	|  |  |   movea.l 4(sp),a0
    6d1e:	|  |  |   move.l 56(a0),d0
    6d22:	|  |  |   move.l d0,-(sp)
    6d24:	|  |  |   jsr 1ea2 <abortFunction>
    6d2a:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    6d2c:	|  |  \-> movea.l 4(sp),a0
    6d30:	|  |      clr.l 56(a0)
    moveMe->walking = FALSE;
    6d34:	|  |      movea.l 4(sp),a0
    6d38:	|  |      clr.w 52(a0)
    moveMe->spinning = FALSE;
    6d3c:	|  |      movea.l 4(sp),a0
    6d40:	|  |      clr.w 54(a0)
    moveAndScale(moveMe, x, y);
    6d44:	|  |      move.l 16(sp),-(sp)
    6d48:	|  |      jsr 12bfc <__floatsisf>
    6d4e:	|  |      addq.l #4,sp
    6d50:	|  |      move.l d0,d2
    6d52:	|  |      move.l 12(sp),-(sp)
    6d56:	|  |      jsr 12bfc <__floatsisf>
    6d5c:	|  |      addq.l #4,sp
    6d5e:	|  |      move.l d2,-(sp)
    6d60:	|  |      move.l d0,-(sp)
    6d62:	|  |      move.l 12(sp),-(sp)
    6d66:	|  |      jsr 70dc <moveAndScale>
    6d6c:	|  |      lea 12(sp),sp
    6d70:	|  |  /-- bra.s 6d78 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    6d72:	\--|--|-> nop
    6d74:	   |  +-- bra.s 6d78 <jumpPerson+0x8a>
    if (!moveMe) return;
    6d76:	   \--|-> nop
}
    6d78:	      \-> move.l (sp)+,d2
    6d7a:	          addq.l #4,sp
    6d7c:	          rts

00006d7e <killAllPeople>:


void killAllPeople () {
    6d7e:	          subq.l #8,sp
    6d80:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    6d82:	   /----- bra.s 6dee <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    6d84:	/--|----> movea.l 19cac <allPeople>,a0
    6d8a:	|  |      move.l 56(a0),d0
    6d8e:	|  |  /-- beq.s 6da4 <killAllPeople+0x26>
    6d90:	|  |  |   movea.l 19cac <allPeople>,a0
    6d96:	|  |  |   move.l 56(a0),d0
    6d9a:	|  |  |   move.l d0,-(sp)
    6d9c:	|  |  |   jsr 1ea2 <abortFunction>
    6da2:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    6da4:	|  |  \-> movea.l 19cac <allPeople>,a0
    6daa:	|  |      clr.l 56(a0)
		killPeople = allPeople;
    6dae:	|  |      move.l 19cac <allPeople>,8(sp)
		allPeople = allPeople -> next;
    6db6:	|  |      movea.l 19cac <allPeople>,a0
    6dbc:	|  |      move.l 24(a0),d0
    6dc0:	|  |      move.l d0,19cac <allPeople>
		removeObjectType (killPeople -> thisType);
    6dc6:	|  |      movea.l 8(sp),a0
    6dca:	|  |      move.l 102(a0),d0
    6dce:	|  |      move.l d0,-(sp)
    6dd0:	|  |      jsr 994a <removeObjectType>
    6dd6:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    6dd8:	|  |      move.l 8(sp),4(sp)
    6dde:	|  |      move.l 19c4c <SysBase>,d0
    6de4:	|  |      movea.l d0,a6
    6de6:	|  |      movea.l 4(sp),a1
    6dea:	|  |      jsr -690(a6)
	while (allPeople) {
    6dee:	|  \----> move.l 19cac <allPeople>,d0
    6df4:	\-------- bne.s 6d84 <killAllPeople+0x6>
	}
}
    6df6:	          nop
    6df8:	          nop
    6dfa:	          movea.l (sp)+,a6
    6dfc:	          addq.l #8,sp
    6dfe:	          rts

00006e00 <killMostPeople>:

void killMostPeople() {
    6e00:	          lea -12(sp),sp
    6e04:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    6e06:	          move.l #105644,12(sp)

    while (*lookyHere) {
    6e0e:	   /----- bra.w 6e94 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    6e12:	/--|----> movea.l 12(sp),a0
    6e16:	|  |      movea.l (a0),a0
    6e18:	|  |      move.l 106(a0),d0
    6e1c:	|  |      moveq #32,d1
    6e1e:	|  |      and.l d1,d0
    6e20:	|  |  /-- beq.s 6e32 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    6e22:	|  |  |   movea.l 12(sp),a0
    6e26:	|  |  |   move.l (a0),d0
    6e28:	|  |  |   moveq #24,d1
    6e2a:	|  |  |   add.l d0,d1
    6e2c:	|  |  |   move.l d1,12(sp)
    6e30:	|  +--|-- bra.s 6e94 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    6e32:	|  |  \-> movea.l 12(sp),a0
    6e36:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    6e3a:	|  |      movea.l 8(sp),a0
    6e3e:	|  |      move.l 24(a0),d0
    6e42:	|  |      movea.l 12(sp),a0
    6e46:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    6e48:	|  |      movea.l 8(sp),a0
    6e4c:	|  |      move.l 56(a0),d0
    6e50:	|  |  /-- beq.s 6e64 <killMostPeople+0x64>
    6e52:	|  |  |   movea.l 8(sp),a0
    6e56:	|  |  |   move.l 56(a0),d0
    6e5a:	|  |  |   move.l d0,-(sp)
    6e5c:	|  |  |   jsr 1ea2 <abortFunction>
    6e62:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    6e64:	|  |  \-> movea.l 8(sp),a0
    6e68:	|  |      clr.l 56(a0)
            removeObjectType(killPeople->thisType);
    6e6c:	|  |      movea.l 8(sp),a0
    6e70:	|  |      move.l 102(a0),d0
    6e74:	|  |      move.l d0,-(sp)
    6e76:	|  |      jsr 994a <removeObjectType>
    6e7c:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    6e7e:	|  |      move.l 8(sp),4(sp)
    6e84:	|  |      move.l 19c4c <SysBase>,d0
    6e8a:	|  |      movea.l d0,a6
    6e8c:	|  |      movea.l 4(sp),a1
    6e90:	|  |      jsr -690(a6)
    while (*lookyHere) {
    6e94:	|  \----> movea.l 12(sp),a0
    6e98:	|         move.l (a0),d0
    6e9a:	\-------- bne.w 6e12 <killMostPeople+0x12>
        }
    }
}
    6e9e:	          nop
    6ea0:	          nop
    6ea2:	          movea.l (sp)+,a6
    6ea4:	          lea 12(sp),sp
    6ea8:	          rts

00006eaa <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    6eaa:	clr.l -(sp)
    6eac:	move.l sp,d0
    6eae:	addq.l #8,d0
    6eb0:	move.l d0,-(sp)
    6eb2:	jsr 55e2 <setFrames>
    6eb8:	addq.l #8,sp
}
    6eba:	nop
    6ebc:	rts

00006ebe <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    6ebe:	          lea -12(sp),sp
    6ec2:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    6ec4:	          tst.l 20(sp)
    6ec8:	      /-- bne.s 6ed6 <makeWalkingPerson+0x18>
    6eca:	      |   tst.l 24(sp)
    6ece:	      +-- bne.s 6ed6 <makeWalkingPerson+0x18>
    6ed0:	      |   clr.w d0
    6ed2:	/-----|-- bra.w 706e <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    6ed6:	|     \-> movea.l 19d54 <currentFloor>,a0
    6edc:	|         move.l 8(a0),d0
    6ee0:	|     /-- bne.s 6ee8 <makeWalkingPerson+0x2a>
    6ee2:	|     |   clr.w d0
    6ee4:	+-----|-- bra.w 706e <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    6ee8:	|     \-> move.l 28(sp),-(sp)
    6eec:	|         jsr 6994 <findPerson>
    6ef2:	|         addq.l #4,sp
    6ef4:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    6ef8:	|     /-- bne.s 6f00 <makeWalkingPerson+0x42>
    6efa:	|     |   clr.w d0
    6efc:	+-----|-- bra.w 706e <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    6f00:	|     \-> movea.l 12(sp),a0
    6f04:	|         move.l 56(a0),d0
    6f08:	|     /-- beq.s 6f1c <makeWalkingPerson+0x5e>
    6f0a:	|     |   movea.l 12(sp),a0
    6f0e:	|     |   move.l 56(a0),d0
    6f12:	|     |   move.l d0,-(sp)
    6f14:	|     |   jsr 1ea2 <abortFunction>
    6f1a:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    6f1c:	|     \-> movea.l 12(sp),a0
    6f20:	|         clr.l 56(a0)
	moveMe -> walking = TRUE;
    6f24:	|         movea.l 12(sp),a0
    6f28:	|         move.w #1,52(a0)
	moveMe -> directionWhenDoneWalking = di;
    6f2e:	|         movea.l 12(sp),a0
    6f32:	|         move.l 36(sp),98(a0)

	moveMe -> walkToX = x;
    6f38:	|         movea.l 12(sp),a0
    6f3c:	|         move.l 20(sp),28(a0)
	moveMe -> walkToY = y;
    6f42:	|         movea.l 12(sp),a0
    6f46:	|         move.l 24(sp),32(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    6f4c:	|         move.l 24(sp),-(sp)
    6f50:	|         move.l 24(sp),-(sp)
    6f54:	|         jsr 11afa <inFloor>
    6f5a:	|         addq.l #8,sp
    6f5c:	|         movea.l 12(sp),a0
    6f60:	|         move.l d0,48(a0)
	if (moveMe -> walkToPoly == -1) {
    6f64:	|         movea.l 12(sp),a0
    6f68:	|         move.l 48(a0),d0
    6f6c:	|         moveq #-1,d1
    6f6e:	|         cmp.l d0,d1
    6f70:	|     /-- bne.s 6fa0 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    6f72:	|     |   movea.w #48,a0
    6f76:	|     |   adda.l 12(sp),a0
    6f7a:	|     |   moveq #32,d1
    6f7c:	|     |   add.l 12(sp),d1
    6f80:	|     |   moveq #28,d0
    6f82:	|     |   add.l 12(sp),d0
    6f86:	|     |   move.l a0,-(sp)
    6f88:	|     |   move.l d1,-(sp)
    6f8a:	|     |   move.l d0,-(sp)
    6f8c:	|     |   jsr 6a90 <handleClosestPoint>
    6f92:	|     |   lea 12(sp),sp
    6f96:	|     |   tst.w d0
    6f98:	|     +-- bne.s 6fa0 <makeWalkingPerson+0xe2>
    6f9a:	|     |   clr.w d0
    6f9c:	+-----|-- bra.w 706e <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    6fa0:	|     \-> movea.l 12(sp),a0
    6fa4:	|         move.l 4(a0),d0
    6fa8:	|         move.l d0,-(sp)
    6faa:	|         jsr 12b94 <__fixsfsi>
    6fb0:	|         addq.l #4,sp
    6fb2:	|         move.l d0,d2
    6fb4:	|         movea.l 12(sp),a0
    6fb8:	|         move.l (a0),d0
    6fba:	|         move.l d0,-(sp)
    6fbc:	|         jsr 12b94 <__fixsfsi>
    6fc2:	|         addq.l #4,sp
    6fc4:	|         move.l d2,-(sp)
    6fc6:	|         move.l d0,-(sp)
    6fc8:	|         jsr 11afa <inFloor>
    6fce:	|         addq.l #8,sp
    6fd0:	|         movea.l 12(sp),a0
    6fd4:	|         move.l d0,44(a0)
	if (moveMe -> inPoly == -1) {
    6fd8:	|         movea.l 12(sp),a0
    6fdc:	|         move.l 44(a0),d0
    6fe0:	|         moveq #-1,d1
    6fe2:	|         cmp.l d0,d1
    6fe4:	|     /-- bne.s 7036 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    6fe6:	|     |   movea.l 12(sp),a0
    6fea:	|     |   move.l (a0),d0
    6fec:	|     |   move.l d0,-(sp)
    6fee:	|     |   jsr 12b94 <__fixsfsi>
    6ff4:	|     |   addq.l #4,sp
    6ff6:	|     |   move.l d0,8(sp)
    6ffa:	|     |   movea.l 12(sp),a0
    6ffe:	|     |   move.l 4(a0),d0
    7002:	|     |   move.l d0,-(sp)
    7004:	|     |   jsr 12b94 <__fixsfsi>
    700a:	|     |   addq.l #4,sp
    700c:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    7010:	|     |   moveq #44,d0
    7012:	|     |   add.l 12(sp),d0
    7016:	|     |   move.l d0,-(sp)
    7018:	|     |   lea 8(sp),a0
    701c:	|     |   move.l a0,-(sp)
    701e:	|     |   moveq #16,d0
    7020:	|     |   add.l sp,d0
    7022:	|     |   move.l d0,-(sp)
    7024:	|     |   jsr 6a90 <handleClosestPoint>
    702a:	|     |   lea 12(sp),sp
    702e:	|     |   tst.w d0
    7030:	|     +-- bne.s 7036 <makeWalkingPerson+0x178>
    7032:	|     |   clr.w d0
    7034:	+-----|-- bra.s 706e <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    7036:	|     \-> move.l 12(sp),-(sp)
    703a:	|         jsr 62da <doBorderStuff>
    7040:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    7042:	|         clr.l -(sp)
    7044:	|         move.l 16(sp),-(sp)
    7048:	|         jsr 8122 <walkMe>
    704e:	|         addq.l #8,sp
    7050:	|         tst.w d0
    7052:	|     /-- bne.s 705e <makeWalkingPerson+0x1a0>
    7054:	|     |   movea.l 12(sp),a0
    7058:	|     |   move.w 54(a0),d0
    705c:	|  /--|-- beq.s 706c <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    705e:	|  |  \-> movea.l 12(sp),a0
    7062:	|  |      move.l 32(sp),56(a0)
		return TRUE;
    7068:	|  |      moveq #1,d0
    706a:	+--|----- bra.s 706e <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    706c:	|  \----> clr.w d0
	}
}
    706e:	\-------> move.l (sp)+,d2
    7070:	          lea 12(sp),sp
    7074:	          rts

00007076 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    7076:	       lea -16(sp),sp
    707a:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    707c:	       moveq #12,d0
    707e:	       move.l d0,16(sp)
    7082:	       clr.l 12(sp)
    7086:	       move.l 19c4c <SysBase>,d0
    708c:	       movea.l d0,a6
    708e:	       move.l 16(sp),d0
    7092:	       move.l 12(sp),d1
    7096:	       jsr -684(a6)
    709a:	       move.l d0,8(sp)
    709e:	       move.l 8(sp),d0
    70a2:	       move.l d0,4(sp)
    if(newAnim == 0) {
    70a6:	   /-- bne.s 70ba <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    70a8:	   |   pea 158d8 <newfatal.c.307beca7+0x1ec>
    70ae:	   |   jsr 127a4 <KPrintF>
    70b4:	   |   addq.l #4,sp
        return NULL;    
    70b6:	   |   moveq #0,d0
    70b8:	/--|-- bra.s 70d4 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    70ba:	|  \-> movea.l 4(sp),a0
    70be:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    70c0:	|      movea.l 4(sp),a0
    70c4:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    70c8:	|      movea.l 4(sp),a0
    70cc:	|      clr.l 4(a0)
	return newAnim;
    70d0:	|      move.l 4(sp),d0
}
    70d4:	\----> movea.l (sp)+,a6
    70d6:	       lea 16(sp),sp
    70da:	       rts

000070dc <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    70dc:	    move.l d2,-(sp)
	me->x = x;
    70de:	    movea.l 8(sp),a0
    70e2:	    move.l 12(sp),(a0)
	me->y = y;
    70e6:	    movea.l 8(sp),a0
    70ea:	    move.l 16(sp),4(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    70f0:	    movea.l 8(sp),a0
    70f4:	    move.l 106(a0),d0
    70f8:	    moveq #2,d1
    70fa:	    and.l d1,d0
    70fc:	/-- bne.s 7154 <moveAndScale+0x78>
    70fe:	|   move.w 18140 <scaleDivide>,d0
    7104:	+-- beq.s 7154 <moveAndScale+0x78>
    7106:	|   movea.l 8(sp),a0
    710a:	|   move.l 4(a0),d2
    710e:	|   move.w 1813e <scaleHorizon>,d0
    7114:	|   movea.w d0,a0
    7116:	|   move.l a0,-(sp)
    7118:	|   jsr 12bfc <__floatsisf>
    711e:	|   addq.l #4,sp
    7120:	|   move.l d0,-(sp)
    7122:	|   move.l d2,-(sp)
    7124:	|   jsr 12ef0 <__subsf3>
    712a:	|   addq.l #8,sp
    712c:	|   move.l d0,d2
    712e:	|   move.w 18140 <scaleDivide>,d0
    7134:	|   movea.w d0,a0
    7136:	|   move.l a0,-(sp)
    7138:	|   jsr 12bfc <__floatsisf>
    713e:	|   addq.l #4,sp
    7140:	|   move.l d0,-(sp)
    7142:	|   move.l d2,-(sp)
    7144:	|   jsr 12aa8 <__divsf3>
    714a:	|   addq.l #8,sp
    714c:	|   movea.l 8(sp),a0
    7150:	|   move.l d0,20(a0)
}
    7154:	\-> nop
    7156:	    move.l (sp)+,d2
    7158:	    rts

0000715a <removeOneCharacter>:

void removeOneCharacter (int i) {
    715a:	          lea -12(sp),sp
    715e:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);
    7160:	          move.l 20(sp),-(sp)
    7164:	          jsr 6994 <findPerson>
    716a:	          addq.l #4,sp
    716c:	          move.l d0,8(sp)

    if (p) {
    7170:	/-------- beq.w 721c <removeOneCharacter+0xc2>
        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    7174:	|         move.l 19d50 <overRegion>,d0
    717a:	|         cmpi.l #105648,d0
    7180:	|     /-- bne.s 719e <removeOneCharacter+0x44>
    7182:	|     |   movea.l 19d50 <overRegion>,a0
    7188:	|     |   move.l 28(a0),d1
    718c:	|     |   movea.l 8(sp),a0
    7190:	|     |   move.l 102(a0),d0
    7194:	|     |   cmp.l d1,d0
    7196:	|     +-- bne.s 719e <removeOneCharacter+0x44>
            overRegion = NULL;
    7198:	|     |   clr.l 19d50 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    719e:	|     \-> movea.l 8(sp),a0
    71a2:	|         move.l 56(a0),d0
    71a6:	|     /-- beq.s 71ba <removeOneCharacter+0x60>
    71a8:	|     |   movea.l 8(sp),a0
    71ac:	|     |   move.l 56(a0),d0
    71b0:	|     |   move.l d0,-(sp)
    71b2:	|     |   jsr 1ea2 <abortFunction>
    71b8:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    71ba:	|     \-> movea.l 8(sp),a0
    71be:	|         clr.l 56(a0)
        struct onScreenPerson ** killPeople;

        for (killPeople = &allPeople;
    71c2:	|         move.l #105644,12(sp)
    71ca:	|     /-- bra.s 71da <removeOneCharacter+0x80>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    71cc:	|  /--|-> movea.l 12(sp),a0
    71d0:	|  |  |   move.l (a0),d0
    71d2:	|  |  |   moveq #24,d1
    71d4:	|  |  |   add.l d0,d1
    71d6:	|  |  |   move.l d1,12(sp)
            *killPeople != p;
    71da:	|  |  \-> movea.l 12(sp),a0
    71de:	|  |      move.l (a0),d0
    71e0:	|  |      cmp.l 8(sp),d0
    71e4:	|  \----- bne.s 71cc <removeOneCharacter+0x72>

        *killPeople = p->next;
    71e6:	|         movea.l 8(sp),a0
    71ea:	|         move.l 24(a0),d0
    71ee:	|         movea.l 12(sp),a0
    71f2:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    71f4:	|         movea.l 8(sp),a0
    71f8:	|         move.l 102(a0),d0
    71fc:	|         move.l d0,-(sp)
    71fe:	|         jsr 994a <removeObjectType>
    7204:	|         addq.l #4,sp
        FreeVec(p);
    7206:	|         move.l 8(sp),4(sp)
    720c:	|         move.l 19c4c <SysBase>,d0
    7212:	|         movea.l d0,a6
    7214:	|         movea.l 4(sp),a1
    7218:	|         jsr -690(a6)
    }
}
    721c:	\-------> nop
    721e:	          movea.l (sp)+,a6
    7220:	          lea 12(sp),sp
    7224:	          rts

00007226 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    7226:	       subq.l #8,sp
    7228:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    722a:	       movea.l 16(sp),a0
    722e:	       movea.l 68(a0),a0
    7232:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    7238:	       movea.l 16(sp),a0
    723c:	       move.l 80(a0),d2
    7240:	       move.l 4(sp),-(sp)
    7244:	       pea b4 <_start+0xb4>
    7248:	       jsr 131d4 <__divsi3>
    724e:	       addq.l #8,sp
    7250:	       add.l d2,d0
    7252:	       move.l d0,d1
    7254:	       addi.l #180,d1
    725a:	       movea.l 16(sp),a0
    725e:	       move.l 88(a0),d0
    7262:	       move.l d1,d2
    7264:	       add.l d0,d2
    7266:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    726a:	   /-- bra.s 7274 <rethinkAngle+0x4e>
    726c:	/--|-> addi.l #-360,8(sp)
    7274:	|  \-> cmpi.l #359,8(sp)
    727c:	\----- bgt.s 726c <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    727e:	       move.l 4(sp),-(sp)
    7282:	       move.l 12(sp),-(sp)
    7286:	       jsr 13156 <__mulsi3>
    728c:	       addq.l #8,sp
    728e:	       pea 168 <decodeFilename+0x50>
    7292:	       move.l d0,-(sp)
    7294:	       jsr 131d4 <__divsi3>
    729a:	       addq.l #8,sp
    729c:	       movea.l 16(sp),a0
    72a0:	       move.l d0,94(a0)
}
    72a4:	       nop
    72a6:	       move.l (sp)+,d2
    72a8:	       addq.l #8,sp
    72aa:	       rts

000072ac <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    72ac:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    72ae:	          movea.l 8(sp),a0
    72b2:	          move.l 8(a0),d0
    72b6:	          move.l 12(sp),-(sp)
    72ba:	          move.l d0,-(sp)
    72bc:	          jsr 8d0 <put2bytes>
    72c2:	          addq.l #8,sp
	if (p -> numFrames) {
    72c4:	          movea.l 8(sp),a0
    72c8:	          move.l 8(a0),d0
    72cc:	/-------- beq.w 7370 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    72d0:	|         movea.l 8(sp),a0
    72d4:	|         movea.l (a0),a0
    72d6:	|         move.l (a0),d0
    72d8:	|         move.l 12(sp),-(sp)
    72dc:	|         move.l d0,-(sp)
    72de:	|         jsr 958 <put4bytes>
    72e4:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    72e6:	|         clr.l (sp)
    72e8:	|     /-- bra.s 7362 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    72ea:	|  /--|-> movea.l 8(sp),a0
    72ee:	|  |  |   movea.l 4(a0),a0
    72f2:	|  |  |   move.l (sp),d1
    72f4:	|  |  |   move.l d1,d0
    72f6:	|  |  |   add.l d0,d0
    72f8:	|  |  |   add.l d1,d0
    72fa:	|  |  |   add.l d0,d0
    72fc:	|  |  |   add.l d0,d0
    72fe:	|  |  |   adda.l d0,a0
    7300:	|  |  |   move.l (a0),d0
    7302:	|  |  |   move.l 12(sp),-(sp)
    7306:	|  |  |   move.l d0,-(sp)
    7308:	|  |  |   jsr 958 <put4bytes>
    730e:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    7310:	|  |  |   movea.l 8(sp),a0
    7314:	|  |  |   movea.l 4(a0),a0
    7318:	|  |  |   move.l (sp),d1
    731a:	|  |  |   move.l d1,d0
    731c:	|  |  |   add.l d0,d0
    731e:	|  |  |   add.l d1,d0
    7320:	|  |  |   add.l d0,d0
    7322:	|  |  |   add.l d0,d0
    7324:	|  |  |   adda.l d0,a0
    7326:	|  |  |   move.l 4(a0),d0
    732a:	|  |  |   move.l 12(sp),-(sp)
    732e:	|  |  |   move.l d0,-(sp)
    7330:	|  |  |   jsr 958 <put4bytes>
    7336:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    7338:	|  |  |   movea.l 8(sp),a0
    733c:	|  |  |   movea.l 4(a0),a0
    7340:	|  |  |   move.l (sp),d1
    7342:	|  |  |   move.l d1,d0
    7344:	|  |  |   add.l d0,d0
    7346:	|  |  |   add.l d1,d0
    7348:	|  |  |   add.l d0,d0
    734a:	|  |  |   add.l d0,d0
    734c:	|  |  |   adda.l d0,a0
    734e:	|  |  |   move.l 8(a0),d0
    7352:	|  |  |   move.l 12(sp),-(sp)
    7356:	|  |  |   move.l d0,-(sp)
    7358:	|  |  |   jsr 958 <put4bytes>
    735e:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    7360:	|  |  |   addq.l #1,(sp)
    7362:	|  |  \-> movea.l 8(sp),a0
    7366:	|  |      move.l 8(a0),d0
    736a:	|  |      cmp.l (sp),d0
    736c:	|  \----- bgt.w 72ea <saveAnim+0x3e>
		}
	}
	return TRUE;
    7370:	\-------> moveq #1,d0
}
    7372:	          addq.l #4,sp
    7374:	          rts

00007376 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    7376:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    7378:	             movea.l 8(sp),a0
    737c:	             move.l 4(a0),d0
    7380:	             move.l 12(sp),-(sp)
    7384:	             move.l d0,-(sp)
    7386:	             jsr 8d0 <put2bytes>
    738c:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    738e:	             clr.l (sp)
    7390:	   /-------- bra.s 73bc <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    7392:	/--|-------> movea.l 8(sp),a0
    7396:	|  |         move.l (a0),d1
    7398:	|  |         move.l (sp),d0
    739a:	|  |         add.l d0,d0
    739c:	|  |         add.l d0,d0
    739e:	|  |         movea.l d1,a0
    73a0:	|  |         adda.l d0,a0
    73a2:	|  |         move.l (a0),d0
    73a4:	|  |         move.l 12(sp),-(sp)
    73a8:	|  |         move.l d0,-(sp)
    73aa:	|  |         jsr 72ac <saveAnim>
    73b0:	|  |         addq.l #8,sp
    73b2:	|  |         tst.w d0
    73b4:	|  |     /-- bne.s 73ba <saveCostume+0x44>
    73b6:	|  |     |   clr.w d0
    73b8:	|  |  /--|-- bra.s 73d0 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    73ba:	|  |  |  \-> addq.l #1,(sp)
    73bc:	|  \--|----> movea.l 8(sp),a0
    73c0:	|     |      move.l 4(a0),d1
    73c4:	|     |      move.l d1,d0
    73c6:	|     |      add.l d0,d0
    73c8:	|     |      add.l d1,d0
    73ca:	|     |      cmp.l (sp),d0
    73cc:	\-----|----- bgt.s 7392 <saveCostume+0x1c>
	}

	return TRUE;
    73ce:	      |      moveq #1,d0
}
    73d0:	      \----> addq.l #4,sp
    73d2:	             rts

000073d4 <savePeople>:

BOOL savePeople (BPTR fp) {
    73d4:	             lea -144(sp),sp
    73d8:	             move.l a6,-(sp)
    73da:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    73dc:	             move.l 19cac <allPeople>,148(sp)
	int countPeople = 0, a;
    73e4:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    73e8:	             move.w 1813e <scaleHorizon>,d0
    73ee:	             movea.w d0,a0
    73f0:	             move.l 156(sp),-(sp)
    73f4:	             move.l a0,-(sp)
    73f6:	             jsr a9c <putSigned>
    73fc:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    73fe:	             move.w 18140 <scaleDivide>,d0
    7404:	             movea.w d0,a0
    7406:	             move.l 156(sp),-(sp)
    740a:	             move.l a0,-(sp)
    740c:	             jsr a9c <putSigned>
    7412:	             addq.l #8,sp

	while (me) {
    7414:	         /-- bra.s 7424 <savePeople+0x50>
		countPeople ++;
    7416:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    741a:	      |  |   movea.l 148(sp),a0
    741e:	      |  |   move.l 24(a0),148(sp)
	while (me) {
    7424:	      |  \-> tst.l 148(sp)
    7428:	      \----- bne.s 7416 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    742a:	             move.l 156(sp),-(sp)
    742e:	             move.l 148(sp),-(sp)
    7432:	             jsr 8d0 <put2bytes>
    7438:	             addq.l #8,sp

	me = allPeople;
    743a:	             move.l 19cac <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    7442:	             clr.l 140(sp)
    7446:	   /-------- bra.w 789e <savePeople+0x4ca>

		putFloat (me -> x, fp);
    744a:	/--|-------> movea.l 148(sp),a0
    744e:	|  |         move.l (a0),d0
    7450:	|  |         move.l 156(sp),-(sp)
    7454:	|  |         move.l d0,-(sp)
    7456:	|  |         jsr a46 <putFloat>
    745c:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    745e:	|  |         movea.l 148(sp),a0
    7462:	|  |         move.l 4(a0),d0
    7466:	|  |         move.l 156(sp),-(sp)
    746a:	|  |         move.l d0,-(sp)
    746c:	|  |         jsr a46 <putFloat>
    7472:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    7474:	|  |         movea.l 148(sp),a0
    7478:	|  |         move.l 68(a0),d0
    747c:	|  |         move.l 156(sp),-(sp)
    7480:	|  |         move.l d0,-(sp)
    7482:	|  |         jsr 7376 <saveCostume>
    7488:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    748a:	|  |         movea.l 148(sp),a0
    748e:	|  |         move.l 60(a0),d0
    7492:	|  |         move.l 156(sp),-(sp)
    7496:	|  |         move.l d0,-(sp)
    7498:	|  |         jsr 72ac <saveAnim>
    749e:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    74a0:	|  |         move.l 156(sp),136(sp)
    74a6:	|  |         movea.l 148(sp),a0
    74aa:	|  |         move.l 60(a0),d1
    74ae:	|  |         movea.l 148(sp),a0
    74b2:	|  |         move.l 64(a0),d0
    74b6:	|  |         cmp.l d1,d0
    74b8:	|  |         seq d0
    74ba:	|  |         neg.b d0
    74bc:	|  |         move.b d0,d0
    74be:	|  |         andi.l #255,d0
    74c4:	|  |         move.l d0,132(sp)
    74c8:	|  |         move.l 19c54 <DOSBase>,d0
    74ce:	|  |         movea.l d0,a6
    74d0:	|  |         move.l 136(sp),d1
    74d4:	|  |         move.l 132(sp),d2
    74d8:	|  |         jsr -312(a6)
    74dc:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    74e0:	|  |         movea.l 148(sp),a0
    74e4:	|  |         move.l 20(a0),d0
    74e8:	|  |         move.l 156(sp),-(sp)
    74ec:	|  |         move.l d0,-(sp)
    74ee:	|  |         jsr a46 <putFloat>
    74f4:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    74f6:	|  |         movea.l 148(sp),a0
    74fa:	|  |         move.l 106(a0),d0
    74fe:	|  |         move.l 156(sp),-(sp)
    7502:	|  |         move.l d0,-(sp)
    7504:	|  |         jsr 8d0 <put2bytes>
    750a:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    750c:	|  |         movea.l 148(sp),a0
    7510:	|  |         move.l 8(a0),d0
    7514:	|  |         move.l 156(sp),-(sp)
    7518:	|  |         move.l d0,-(sp)
    751a:	|  |         jsr 8d0 <put2bytes>
    7520:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    7522:	|  |         movea.l 148(sp),a0
    7526:	|  |         move.l 28(a0),d0
    752a:	|  |         move.l 156(sp),-(sp)
    752e:	|  |         move.l d0,-(sp)
    7530:	|  |         jsr 8d0 <put2bytes>
    7536:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    7538:	|  |         movea.l 148(sp),a0
    753c:	|  |         move.l 32(a0),d0
    7540:	|  |         move.l 156(sp),-(sp)
    7544:	|  |         move.l d0,-(sp)
    7546:	|  |         jsr 8d0 <put2bytes>
    754c:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    754e:	|  |         movea.l 148(sp),a0
    7552:	|  |         move.l 36(a0),d0
    7556:	|  |         move.l 156(sp),-(sp)
    755a:	|  |         move.l d0,-(sp)
    755c:	|  |         jsr 8d0 <put2bytes>
    7562:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    7564:	|  |         movea.l 148(sp),a0
    7568:	|  |         move.l 40(a0),d0
    756c:	|  |         move.l 156(sp),-(sp)
    7570:	|  |         move.l d0,-(sp)
    7572:	|  |         jsr 8d0 <put2bytes>
    7578:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    757a:	|  |         movea.l 148(sp),a0
    757e:	|  |         move.l 72(a0),d0
    7582:	|  |         move.l 156(sp),-(sp)
    7586:	|  |         move.l d0,-(sp)
    7588:	|  |         jsr 8d0 <put2bytes>
    758e:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    7590:	|  |         movea.l 148(sp),a0
    7594:	|  |         move.l 76(a0),d0
    7598:	|  |         move.l 156(sp),-(sp)
    759c:	|  |         move.l d0,-(sp)
    759e:	|  |         jsr 8d0 <put2bytes>
    75a4:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    75a6:	|  |         movea.l 148(sp),a0
    75aa:	|  |         move.l 16(a0),d0
    75ae:	|  |         move.l 156(sp),-(sp)
    75b2:	|  |         move.l d0,-(sp)
    75b4:	|  |         jsr 8d0 <put2bytes>
    75ba:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    75bc:	|  |         movea.l 148(sp),a0
    75c0:	|  |         move.l 110(a0),d0
    75c4:	|  |         move.l 156(sp),-(sp)
    75c8:	|  |         move.l d0,-(sp)
    75ca:	|  |         jsr 8d0 <put2bytes>
    75d0:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    75d2:	|  |         movea.l 148(sp),a0
    75d6:	|  |         move.l 12(a0),d0
    75da:	|  |         move.l d0,d0
    75dc:	|  |         movea.w d0,a0
    75de:	|  |         move.l 156(sp),-(sp)
    75e2:	|  |         move.l a0,-(sp)
    75e4:	|  |         jsr a9c <putSigned>
    75ea:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    75ec:	|  |         move.l 156(sp),124(sp)
    75f2:	|  |         movea.l 148(sp),a0
    75f6:	|  |         move.w 92(a0),d0
    75fa:	|  |         movea.w d0,a0
    75fc:	|  |         move.l a0,120(sp)
    7600:	|  |         move.l 19c54 <DOSBase>,d0
    7606:	|  |         movea.l d0,a6
    7608:	|  |         move.l 124(sp),d1
    760c:	|  |         move.l 120(sp),d2
    7610:	|  |         jsr -312(a6)
    7614:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    7618:	|  |         move.l 156(sp),112(sp)
    761e:	|  |         movea.l 148(sp),a0
    7622:	|  |         move.w 52(a0),d0
    7626:	|  |         movea.w d0,a0
    7628:	|  |         move.l a0,108(sp)
    762c:	|  |         move.l 19c54 <DOSBase>,d0
    7632:	|  |         movea.l d0,a6
    7634:	|  |         move.l 112(sp),d1
    7638:	|  |         move.l 108(sp),d2
    763c:	|  |         jsr -312(a6)
    7640:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    7644:	|  |         move.l 156(sp),100(sp)
    764a:	|  |         movea.l 148(sp),a0
    764e:	|  |         move.w 54(a0),d0
    7652:	|  |         movea.w d0,a0
    7654:	|  |         move.l a0,96(sp)
    7658:	|  |         move.l 19c54 <DOSBase>,d0
    765e:	|  |         movea.l d0,a6
    7660:	|  |         move.l 100(sp),d1
    7664:	|  |         move.l 96(sp),d2
    7668:	|  |         jsr -312(a6)
    766c:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    7670:	|  |         movea.l 148(sp),a0
    7674:	|  |         move.l 56(a0),d0
    7678:	|  |  /----- beq.s 76b6 <savePeople+0x2e2>
			FPutC (fp, 1);
    767a:	|  |  |      move.l 156(sp),76(sp)
    7680:	|  |  |      moveq #1,d0
    7682:	|  |  |      move.l d0,72(sp)
    7686:	|  |  |      move.l 19c54 <DOSBase>,d0
    768c:	|  |  |      movea.l d0,a6
    768e:	|  |  |      move.l 76(sp),d1
    7692:	|  |  |      move.l 72(sp),d2
    7696:	|  |  |      jsr -312(a6)
    769a:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    769e:	|  |  |      movea.l 148(sp),a0
    76a2:	|  |  |      move.l 56(a0),d0
    76a6:	|  |  |      move.l 156(sp),-(sp)
    76aa:	|  |  |      move.l d0,-(sp)
    76ac:	|  |  |      jsr 8844 <saveFunction>
    76b2:	|  |  |      addq.l #8,sp
    76b4:	|  |  |  /-- bra.s 76da <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    76b6:	|  |  \--|-> move.l 156(sp),88(sp)
    76bc:	|  |     |   moveq #1,d0
    76be:	|  |     |   move.l d0,84(sp)
    76c2:	|  |     |   move.l 19c54 <DOSBase>,d0
    76c8:	|  |     |   movea.l d0,a6
    76ca:	|  |     |   move.l 88(sp),d1
    76ce:	|  |     |   move.l 84(sp),d2
    76d2:	|  |     |   jsr -312(a6)
    76d6:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    76da:	|  |     \-> movea.l 148(sp),a0
    76de:	|  |         move.l 94(a0),d0
    76e2:	|  |         move.l 156(sp),-(sp)
    76e6:	|  |         move.l d0,-(sp)
    76e8:	|  |         jsr 8d0 <put2bytes>
    76ee:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    76f0:	|  |         movea.l 148(sp),a0
    76f4:	|  |         move.l 80(a0),d0
    76f8:	|  |         move.l 156(sp),-(sp)
    76fc:	|  |         move.l d0,-(sp)
    76fe:	|  |         jsr 8d0 <put2bytes>
    7704:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    7706:	|  |         movea.l 148(sp),a0
    770a:	|  |         move.l 88(a0),d0
    770e:	|  |         move.l 156(sp),-(sp)
    7712:	|  |         move.l d0,-(sp)
    7714:	|  |         jsr 8d0 <put2bytes>
    771a:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    771c:	|  |         movea.l 148(sp),a0
    7720:	|  |         move.l 84(a0),d0
    7724:	|  |         move.l 156(sp),-(sp)
    7728:	|  |         move.l d0,-(sp)
    772a:	|  |         jsr 8d0 <put2bytes>
    7730:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    7732:	|  |         movea.l 148(sp),a0
    7736:	|  |         move.l 98(a0),d0
    773a:	|  |         move.l d0,d0
    773c:	|  |         movea.w d0,a0
    773e:	|  |         move.l 156(sp),-(sp)
    7742:	|  |         move.l a0,-(sp)
    7744:	|  |         jsr a9c <putSigned>
    774a:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    774c:	|  |         movea.l 148(sp),a0
    7750:	|  |         move.l 44(a0),d0
    7754:	|  |         move.l d0,d0
    7756:	|  |         movea.w d0,a0
    7758:	|  |         move.l 156(sp),-(sp)
    775c:	|  |         move.l a0,-(sp)
    775e:	|  |         jsr a9c <putSigned>
    7764:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    7766:	|  |         movea.l 148(sp),a0
    776a:	|  |         move.l 48(a0),d0
    776e:	|  |         move.l d0,d0
    7770:	|  |         movea.w d0,a0
    7772:	|  |         move.l 156(sp),-(sp)
    7776:	|  |         move.l a0,-(sp)
    7778:	|  |         jsr a9c <putSigned>
    777e:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    7780:	|  |         move.l 156(sp),64(sp)
    7786:	|  |         movea.l 148(sp),a0
    778a:	|  |         move.b 114(a0),d0
    778e:	|  |         move.b d0,d0
    7790:	|  |         andi.l #255,d0
    7796:	|  |         move.l d0,60(sp)
    779a:	|  |         move.l 19c54 <DOSBase>,d0
    77a0:	|  |         movea.l d0,a6
    77a2:	|  |         move.l 64(sp),d1
    77a6:	|  |         move.l 60(sp),d2
    77aa:	|  |         jsr -312(a6)
    77ae:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    77b2:	|  |         move.l 156(sp),52(sp)
    77b8:	|  |         movea.l 148(sp),a0
    77bc:	|  |         move.b 115(a0),d0
    77c0:	|  |         move.b d0,d0
    77c2:	|  |         andi.l #255,d0
    77c8:	|  |         move.l d0,48(sp)
    77cc:	|  |         move.l 19c54 <DOSBase>,d0
    77d2:	|  |         movea.l d0,a6
    77d4:	|  |         move.l 52(sp),d1
    77d8:	|  |         move.l 48(sp),d2
    77dc:	|  |         jsr -312(a6)
    77e0:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    77e4:	|  |         move.l 156(sp),40(sp)
    77ea:	|  |         movea.l 148(sp),a0
    77ee:	|  |         move.b 116(a0),d0
    77f2:	|  |         move.b d0,d0
    77f4:	|  |         andi.l #255,d0
    77fa:	|  |         move.l d0,36(sp)
    77fe:	|  |         move.l 19c54 <DOSBase>,d0
    7804:	|  |         movea.l d0,a6
    7806:	|  |         move.l 40(sp),d1
    780a:	|  |         move.l 36(sp),d2
    780e:	|  |         jsr -312(a6)
    7812:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    7816:	|  |         move.l 156(sp),28(sp)
    781c:	|  |         movea.l 148(sp),a0
    7820:	|  |         move.b 117(a0),d0
    7824:	|  |         move.b d0,d0
    7826:	|  |         andi.l #255,d0
    782c:	|  |         move.l d0,24(sp)
    7830:	|  |         move.l 19c54 <DOSBase>,d0
    7836:	|  |         movea.l d0,a6
    7838:	|  |         move.l 28(sp),d1
    783c:	|  |         move.l 24(sp),d2
    7840:	|  |         jsr -312(a6)
    7844:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    7848:	|  |         move.l 156(sp),16(sp)
    784e:	|  |         movea.l 148(sp),a0
    7852:	|  |         move.b 118(a0),d0
    7856:	|  |         move.b d0,d0
    7858:	|  |         andi.l #255,d0
    785e:	|  |         move.l d0,12(sp)
    7862:	|  |         move.l 19c54 <DOSBase>,d0
    7868:	|  |         movea.l d0,a6
    786a:	|  |         move.l 16(sp),d1
    786e:	|  |         move.l 12(sp),d2
    7872:	|  |         jsr -312(a6)
    7876:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    787a:	|  |         movea.l 148(sp),a0
    787e:	|  |         move.l 102(a0),d0
    7882:	|  |         move.l 156(sp),-(sp)
    7886:	|  |         move.l d0,-(sp)
    7888:	|  |         jsr 99ea <saveObjectRef>
    788e:	|  |         addq.l #8,sp

		me = me -> next;
    7890:	|  |         movea.l 148(sp),a0
    7894:	|  |         move.l 24(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    789a:	|  |         addq.l #1,140(sp)
    789e:	|  \-------> movea.l 140(sp),a0
    78a2:	|            cmpa.l 144(sp),a0
    78a6:	\----------- blt.w 744a <savePeople+0x76>
	}
	return TRUE;
    78aa:	             moveq #1,d0
}
    78ac:	             move.l (sp)+,d2
    78ae:	             movea.l (sp)+,a6
    78b0:	             lea 144(sp),sp
    78b4:	             rts

000078b6 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    78b6:	movea.l 4(sp),a0
    78ba:	move.l 8(sp),(a0)
}
    78be:	nop
    78c0:	rts

000078c2 <setDrawMode>:


void setDrawMode (int h, int ob) {
    78c2:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    78c4:	       move.l 12(sp),-(sp)
    78c8:	       jsr 6994 <findPerson>
    78ce:	       addq.l #4,sp
    78d0:	       move.l d0,(sp)
	if (! moveMe) return;
    78d2:	/----- beq.s 78e6 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    78d4:	|      move.l 8(sp),-(sp)
    78d8:	|      move.l 4(sp),-(sp)
    78dc:	|      jsr 78ec <setMyDrawMode>
    78e2:	|      addq.l #8,sp
    78e4:	|  /-- bra.s 78e8 <setDrawMode+0x26>
	if (! moveMe) return;
    78e6:	\--|-> nop
}
    78e8:	   \-> addq.l #4,sp
    78ea:	       rts

000078ec <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    78ec:	       moveq #19,d0
    78ee:	       cmp.l 8(sp),d0
    78f2:	/----- bcs.w 7dca <setMyDrawMode+0x4de>
    78f6:	|      move.l 8(sp),d0
    78fa:	|      add.l d0,d0
    78fc:	|      movea.l d0,a0
    78fe:	|      adda.l #30986,a0
    7904:	|      move.w (a0),d0
    7906:	|      jmp (790a <setMyDrawMode+0x1e>,pc,d0.w)
    790a:	|      .short 0x04c0
    790c:	|      ori.l #6684712,-(a4)
    7912:	|      btst d0,-(a0)
    7914:	|      bchg d0,(a6)+
    7916:	|      bclr d0,(a4)+
    7918:	|      bset d0,(a2)+
    791a:	|      andi.b #84,(a6)
    791e:	|      andi.l #55575312,(a2)
    7924:	|      .short 0x02d0
    7926:	|      bclr d1,(a0)
    7928:	|      .short 0x044a
    792a:	|      .short 0x040c
    792c:	|      movep.l d1,1158(a6)
    7930:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7932:	|      movea.l 4(sp),a0
    7936:	|      clr.b 116(a0)
    793a:	|      movea.l 4(sp),a0
    793e:	|      move.b 116(a0),d0
    7942:	|      movea.l 4(sp),a0
    7946:	|      move.b d0,115(a0)
    794a:	|      movea.l 4(sp),a0
    794e:	|      move.b 115(a0),d0
    7952:	|      movea.l 4(sp),a0
    7956:	|      move.b d0,114(a0)
			moveMe->colourmix = 0;
    795a:	|      movea.l 4(sp),a0
    795e:	|      clr.b 117(a0)
			moveMe->transparency = 64;
    7962:	|      movea.l 4(sp),a0
    7966:	|      move.b #64,118(a0)
			break;
    796c:	|  /-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7970:	|  |   movea.l 4(sp),a0
    7974:	|  |   clr.b 116(a0)
    7978:	|  |   movea.l 4(sp),a0
    797c:	|  |   move.b 116(a0),d0
    7980:	|  |   movea.l 4(sp),a0
    7984:	|  |   move.b d0,115(a0)
    7988:	|  |   movea.l 4(sp),a0
    798c:	|  |   move.b 115(a0),d0
    7990:	|  |   movea.l 4(sp),a0
    7994:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7998:	|  |   movea.l 4(sp),a0
    799c:	|  |   clr.b 117(a0)
			moveMe->transparency = 128;
    79a0:	|  |   movea.l 4(sp),a0
    79a4:	|  |   move.b #-128,118(a0)
			break;
    79aa:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    79ae:	|  |   movea.l 4(sp),a0
    79b2:	|  |   clr.b 116(a0)
    79b6:	|  |   movea.l 4(sp),a0
    79ba:	|  |   move.b 116(a0),d0
    79be:	|  |   movea.l 4(sp),a0
    79c2:	|  |   move.b d0,115(a0)
    79c6:	|  |   movea.l 4(sp),a0
    79ca:	|  |   move.b 115(a0),d0
    79ce:	|  |   movea.l 4(sp),a0
    79d2:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    79d6:	|  |   movea.l 4(sp),a0
    79da:	|  |   clr.b 117(a0)
			moveMe->transparency = 192;
    79de:	|  |   movea.l 4(sp),a0
    79e2:	|  |   move.b #-64,118(a0)
			break;
    79e8:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    79ec:	|  |   movea.l 4(sp),a0
    79f0:	|  |   clr.b 116(a0)
    79f4:	|  |   movea.l 4(sp),a0
    79f8:	|  |   move.b 116(a0),d0
    79fc:	|  |   movea.l 4(sp),a0
    7a00:	|  |   move.b d0,115(a0)
    7a04:	|  |   movea.l 4(sp),a0
    7a08:	|  |   move.b 115(a0),d0
    7a0c:	|  |   movea.l 4(sp),a0
    7a10:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7a14:	|  |   movea.l 4(sp),a0
    7a18:	|  |   clr.b 117(a0)
			moveMe->transparency = 254;
    7a1c:	|  |   movea.l 4(sp),a0
    7a20:	|  |   move.b #-2,118(a0)
			break;
    7a26:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7a2a:	|  |   movea.l 4(sp),a0
    7a2e:	|  |   clr.b 116(a0)
    7a32:	|  |   movea.l 4(sp),a0
    7a36:	|  |   move.b 116(a0),d0
    7a3a:	|  |   movea.l 4(sp),a0
    7a3e:	|  |   move.b d0,115(a0)
    7a42:	|  |   movea.l 4(sp),a0
    7a46:	|  |   move.b 115(a0),d0
    7a4a:	|  |   movea.l 4(sp),a0
    7a4e:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    7a52:	|  |   movea.l 4(sp),a0
    7a56:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    7a5c:	|  |   movea.l 4(sp),a0
    7a60:	|  |   clr.b 118(a0)
			break;
    7a64:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7a68:	|  |   movea.l 4(sp),a0
    7a6c:	|  |   clr.b 116(a0)
    7a70:	|  |   movea.l 4(sp),a0
    7a74:	|  |   move.b 116(a0),d0
    7a78:	|  |   movea.l 4(sp),a0
    7a7c:	|  |   move.b d0,115(a0)
    7a80:	|  |   movea.l 4(sp),a0
    7a84:	|  |   move.b 115(a0),d0
    7a88:	|  |   movea.l 4(sp),a0
    7a8c:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    7a90:	|  |   movea.l 4(sp),a0
    7a94:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    7a9a:	|  |   movea.l 4(sp),a0
    7a9e:	|  |   clr.b 118(a0)
			break;
    7aa2:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7aa6:	|  |   movea.l 4(sp),a0
    7aaa:	|  |   clr.b 116(a0)
    7aae:	|  |   movea.l 4(sp),a0
    7ab2:	|  |   move.b 116(a0),d0
    7ab6:	|  |   movea.l 4(sp),a0
    7aba:	|  |   move.b d0,115(a0)
    7abe:	|  |   movea.l 4(sp),a0
    7ac2:	|  |   move.b 115(a0),d0
    7ac6:	|  |   movea.l 4(sp),a0
    7aca:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7ace:	|  |   movea.l 4(sp),a0
    7ad2:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7ad8:	|  |   movea.l 4(sp),a0
    7adc:	|  |   clr.b 118(a0)
			break;
    7ae0:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7ae4:	|  |   movea.l 4(sp),a0
    7ae8:	|  |   clr.b 116(a0)
    7aec:	|  |   movea.l 4(sp),a0
    7af0:	|  |   move.b 116(a0),d0
    7af4:	|  |   movea.l 4(sp),a0
    7af8:	|  |   move.b d0,115(a0)
    7afc:	|  |   movea.l 4(sp),a0
    7b00:	|  |   move.b 115(a0),d0
    7b04:	|  |   movea.l 4(sp),a0
    7b08:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7b0c:	|  |   movea.l 4(sp),a0
    7b10:	|  |   st 117(a0)
			moveMe->transparency = 0;
    7b14:	|  |   movea.l 4(sp),a0
    7b18:	|  |   clr.b 118(a0)
			break;
    7b1c:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7b20:	|  |   movea.l 4(sp),a0
    7b24:	|  |   clr.b 116(a0)
    7b28:	|  |   movea.l 4(sp),a0
    7b2c:	|  |   move.b 116(a0),d0
    7b30:	|  |   movea.l 4(sp),a0
    7b34:	|  |   move.b d0,115(a0)
    7b38:	|  |   movea.l 4(sp),a0
    7b3c:	|  |   move.b 115(a0),d0
    7b40:	|  |   movea.l 4(sp),a0
    7b44:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7b48:	|  |   movea.l 4(sp),a0
    7b4c:	|  |   st 117(a0)
			moveMe->transparency = 64;
    7b50:	|  |   movea.l 4(sp),a0
    7b54:	|  |   move.b #64,118(a0)
			break;
    7b5a:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7b5e:	|  |   movea.l 4(sp),a0
    7b62:	|  |   clr.b 116(a0)
    7b66:	|  |   movea.l 4(sp),a0
    7b6a:	|  |   move.b 116(a0),d0
    7b6e:	|  |   movea.l 4(sp),a0
    7b72:	|  |   move.b d0,115(a0)
    7b76:	|  |   movea.l 4(sp),a0
    7b7a:	|  |   move.b 115(a0),d0
    7b7e:	|  |   movea.l 4(sp),a0
    7b82:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7b86:	|  |   movea.l 4(sp),a0
    7b8a:	|  |   st 117(a0)
			moveMe->transparency = 128;
    7b8e:	|  |   movea.l 4(sp),a0
    7b92:	|  |   move.b #-128,118(a0)
			break;
    7b98:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7b9c:	|  |   movea.l 4(sp),a0
    7ba0:	|  |   clr.b 116(a0)
    7ba4:	|  |   movea.l 4(sp),a0
    7ba8:	|  |   move.b 116(a0),d0
    7bac:	|  |   movea.l 4(sp),a0
    7bb0:	|  |   move.b d0,115(a0)
    7bb4:	|  |   movea.l 4(sp),a0
    7bb8:	|  |   move.b 115(a0),d0
    7bbc:	|  |   movea.l 4(sp),a0
    7bc0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7bc4:	|  |   movea.l 4(sp),a0
    7bc8:	|  |   st 117(a0)
			moveMe->transparency = 192;
    7bcc:	|  |   movea.l 4(sp),a0
    7bd0:	|  |   move.b #-64,118(a0)
			break;
    7bd6:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7bda:	|  |   movea.l 4(sp),a0
    7bde:	|  |   move.b #-128,116(a0)
    7be4:	|  |   movea.l 4(sp),a0
    7be8:	|  |   move.b 116(a0),d0
    7bec:	|  |   movea.l 4(sp),a0
    7bf0:	|  |   move.b d0,115(a0)
    7bf4:	|  |   movea.l 4(sp),a0
    7bf8:	|  |   move.b 115(a0),d0
    7bfc:	|  |   movea.l 4(sp),a0
    7c00:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    7c04:	|  |   movea.l 4(sp),a0
    7c08:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    7c0e:	|  |   movea.l 4(sp),a0
    7c12:	|  |   clr.b 118(a0)
			break;
    7c16:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7c1a:	|  |   movea.l 4(sp),a0
    7c1e:	|  |   move.b #-128,116(a0)
    7c24:	|  |   movea.l 4(sp),a0
    7c28:	|  |   move.b 116(a0),d0
    7c2c:	|  |   movea.l 4(sp),a0
    7c30:	|  |   move.b d0,115(a0)
    7c34:	|  |   movea.l 4(sp),a0
    7c38:	|  |   move.b 115(a0),d0
    7c3c:	|  |   movea.l 4(sp),a0
    7c40:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    7c44:	|  |   movea.l 4(sp),a0
    7c48:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    7c4e:	|  |   movea.l 4(sp),a0
    7c52:	|  |   clr.b 118(a0)
			break;
    7c56:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7c5a:	|  |   movea.l 4(sp),a0
    7c5e:	|  |   move.b #-128,116(a0)
    7c64:	|  |   movea.l 4(sp),a0
    7c68:	|  |   move.b 116(a0),d0
    7c6c:	|  |   movea.l 4(sp),a0
    7c70:	|  |   move.b d0,115(a0)
    7c74:	|  |   movea.l 4(sp),a0
    7c78:	|  |   move.b 115(a0),d0
    7c7c:	|  |   movea.l 4(sp),a0
    7c80:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7c84:	|  |   movea.l 4(sp),a0
    7c88:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7c8e:	|  |   movea.l 4(sp),a0
    7c92:	|  |   clr.b 118(a0)
			break;
    7c96:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    7c9a:	|  |   movea.l 4(sp),a0
    7c9e:	|  |   move.b #-128,116(a0)
    7ca4:	|  |   movea.l 4(sp),a0
    7ca8:	|  |   move.b 116(a0),d0
    7cac:	|  |   movea.l 4(sp),a0
    7cb0:	|  |   move.b d0,115(a0)
    7cb4:	|  |   movea.l 4(sp),a0
    7cb8:	|  |   move.b 115(a0),d0
    7cbc:	|  |   movea.l 4(sp),a0
    7cc0:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7cc4:	|  |   movea.l 4(sp),a0
    7cc8:	|  |   st 117(a0)
			moveMe->transparency = 0;
    7ccc:	|  |   movea.l 4(sp),a0
    7cd0:	|  |   clr.b 118(a0)
			break;
    7cd4:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7cd8:	|  |   movea.l 4(sp),a0
    7cdc:	|  |   st 116(a0)
    7ce0:	|  |   movea.l 4(sp),a0
    7ce4:	|  |   move.b 116(a0),d0
    7ce8:	|  |   movea.l 4(sp),a0
    7cec:	|  |   move.b d0,115(a0)
    7cf0:	|  |   movea.l 4(sp),a0
    7cf4:	|  |   move.b 115(a0),d0
    7cf8:	|  |   movea.l 4(sp),a0
    7cfc:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 192;
    7d00:	|  |   movea.l 4(sp),a0
    7d04:	|  |   move.b #-64,117(a0)
			moveMe->transparency = 0;
    7d0a:	|  |   movea.l 4(sp),a0
    7d0e:	|  |   clr.b 118(a0)
			break;
    7d12:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7d16:	|  |   movea.l 4(sp),a0
    7d1a:	|  |   st 116(a0)
    7d1e:	|  |   movea.l 4(sp),a0
    7d22:	|  |   move.b 116(a0),d0
    7d26:	|  |   movea.l 4(sp),a0
    7d2a:	|  |   move.b d0,115(a0)
    7d2e:	|  |   movea.l 4(sp),a0
    7d32:	|  |   move.b 115(a0),d0
    7d36:	|  |   movea.l 4(sp),a0
    7d3a:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 128;
    7d3e:	|  |   movea.l 4(sp),a0
    7d42:	|  |   move.b #-128,117(a0)
			moveMe->transparency = 0;
    7d48:	|  |   movea.l 4(sp),a0
    7d4c:	|  |   clr.b 118(a0)
			break;
    7d50:	|  +-- bra.w 7e04 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7d54:	|  |   movea.l 4(sp),a0
    7d58:	|  |   st 116(a0)
    7d5c:	|  |   movea.l 4(sp),a0
    7d60:	|  |   move.b 116(a0),d0
    7d64:	|  |   movea.l 4(sp),a0
    7d68:	|  |   move.b d0,115(a0)
    7d6c:	|  |   movea.l 4(sp),a0
    7d70:	|  |   move.b 115(a0),d0
    7d74:	|  |   movea.l 4(sp),a0
    7d78:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 64;
    7d7c:	|  |   movea.l 4(sp),a0
    7d80:	|  |   move.b #64,117(a0)
			moveMe->transparency = 0;
    7d86:	|  |   movea.l 4(sp),a0
    7d8a:	|  |   clr.b 118(a0)
			break;
    7d8e:	|  +-- bra.s 7e04 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    7d90:	|  |   movea.l 4(sp),a0
    7d94:	|  |   st 116(a0)
    7d98:	|  |   movea.l 4(sp),a0
    7d9c:	|  |   move.b 116(a0),d0
    7da0:	|  |   movea.l 4(sp),a0
    7da4:	|  |   move.b d0,115(a0)
    7da8:	|  |   movea.l 4(sp),a0
    7dac:	|  |   move.b 115(a0),d0
    7db0:	|  |   movea.l 4(sp),a0
    7db4:	|  |   move.b d0,114(a0)
			moveMe->colourmix = 255;
    7db8:	|  |   movea.l 4(sp),a0
    7dbc:	|  |   st 117(a0)
			moveMe->transparency = 0;
    7dc0:	|  |   movea.l 4(sp),a0
    7dc4:	|  |   clr.b 118(a0)
			break;
    7dc8:	|  +-- bra.s 7e04 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    7dca:	\--|-> movea.l 4(sp),a0
    7dce:	   |   clr.b 116(a0)
    7dd2:	   |   movea.l 4(sp),a0
    7dd6:	   |   move.b 116(a0),d0
    7dda:	   |   movea.l 4(sp),a0
    7dde:	   |   move.b d0,115(a0)
    7de2:	   |   movea.l 4(sp),a0
    7de6:	   |   move.b 115(a0),d0
    7dea:	   |   movea.l 4(sp),a0
    7dee:	   |   move.b d0,114(a0)
			moveMe->colourmix = 0;
    7df2:	   |   movea.l 4(sp),a0
    7df6:	   |   clr.b 117(a0)
			moveMe->transparency = 0;
    7dfa:	   |   movea.l 4(sp),a0
    7dfe:	   |   clr.b 118(a0)
			break;
    7e02:	   |   nop
	}
}
    7e04:	   \-> nop
    7e06:	       rts

00007e08 <setCharacterWalkSpeed>:



BOOL setCharacterWalkSpeed (int f, int objNum) {
    7e08:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    7e0a:	       tst.l 8(sp)
    7e0e:	   /-- bgt.s 7e14 <setCharacterWalkSpeed+0xc>
    7e10:	   |   clr.w d0
    7e12:	/--|-- bra.s 7e32 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    7e14:	|  \-> move.l 12(sp),-(sp)
    7e18:	|      jsr 6994 <findPerson>
    7e1e:	|      addq.l #4,sp
    7e20:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    7e22:	|  /-- bne.s 7e28 <setCharacterWalkSpeed+0x20>
    7e24:	|  |   clr.w d0
    7e26:	+--|-- bra.s 7e32 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    7e28:	|  \-> movea.l (sp),a0
    7e2a:	|      move.l 8(sp),16(a0)
	return TRUE;
    7e30:	|      moveq #1,d0
}
    7e32:	\----> addq.l #4,sp
    7e34:	       rts

00007e36 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    7e36:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    7e38:	       move.l 8(sp),-(sp)
    7e3c:	       jsr 6994 <findPerson>
    7e42:	       addq.l #4,sp
    7e44:	       move.l d0,(sp)
    if (thisPerson) {
    7e46:	/----- beq.s 7e66 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    7e48:	|      movea.l (sp),a0
    7e4a:	|      move.l 12(sp),106(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    7e50:	|      moveq #2,d0
    7e52:	|      and.l 12(sp),d0
    7e56:	|  /-- beq.s 7e62 <setPersonExtra+0x2c>
    7e58:	|  |   movea.l (sp),a0
    7e5a:	|  |   move.l #1065353216,20(a0)
        return TRUE;
    7e62:	|  \-> moveq #1,d0
    7e64:	|  /-- bra.s 7e68 <setPersonExtra+0x32>
    }
    return FALSE;
    7e66:	\--|-> clr.w d0
}
    7e68:	   \-> addq.l #4,sp
    7e6a:	       rts

00007e6c <setScale>:


void setScale (short int h, short int d) {
    7e6c:	subq.l #4,sp
    7e6e:	move.l 8(sp),d1
    7e72:	move.l 12(sp),d0
    7e76:	move.w d1,d1
    7e78:	move.w d1,2(sp)
    7e7c:	move.w d0,d0
    7e7e:	move.w d0,(sp)
	scaleHorizon = h;
    7e80:	move.w 2(sp),1813e <scaleHorizon>
	scaleDivide = d;
    7e88:	move.w (sp),18140 <scaleDivide>
}
    7e8e:	nop
    7e90:	addq.l #4,sp
    7e92:	rts

00007e94 <setShown>:

void setShown (BOOL h, int ob) {
    7e94:	    subq.l #8,sp
    7e96:	    move.l 12(sp),d0
    7e9a:	    move.w d0,d0
    7e9c:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    7ea0:	    move.l 16(sp),-(sp)
    7ea4:	    jsr 6994 <findPerson>
    7eaa:	    addq.l #4,sp
    7eac:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    7eb0:	/-- beq.s 7ebc <setShown+0x28>
    7eb2:	|   movea.l 4(sp),a0
    7eb6:	|   move.w 2(sp),92(a0)
}
    7ebc:	\-> nop
    7ebe:	    addq.l #8,sp
    7ec0:	    rts

00007ec2 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    7ec2:	       subq.l #8,sp
    7ec4:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    7ec6:	       movea.l 16(sp),a0
    7eca:	       move.l 80(a0),d0
    7ece:	       move.l d0,d1
    7ed0:	       addi.l #360,d1
    7ed6:	       movea.l 16(sp),a0
    7eda:	       move.l 84(a0),d0
    7ede:	       move.l d1,d2
    7ee0:	       sub.l d0,d2
    7ee2:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    7ee6:	       movea.l 16(sp),a0
    7eea:	       move.l 110(a0),d0
    7eee:	   /-- beq.s 7efa <spinStep+0x38>
    7ef0:	   |   movea.l 16(sp),a0
    7ef4:	   |   move.l 110(a0),d0
    7ef8:	/--|-- bra.s 7f14 <spinStep+0x52>
    7efa:	|  \-> movea.l 16(sp),a0
    7efe:	|      movea.l 68(a0),a0
    7f02:	|      move.l 4(a0),d0
    7f06:	|      move.l d0,-(sp)
    7f08:	|      pea 168 <decodeFilename+0x50>
    7f0c:	|      jsr 131d4 <__divsi3>
    7f12:	|      addq.l #8,sp
    7f14:	\----> move.l d0,4(sp)
	while (diff > 180) {
    7f18:	   /-- bra.s 7f22 <spinStep+0x60>
		diff -= 360;
    7f1a:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    7f22:	|  \-> cmpi.l #180,8(sp)
    7f2a:	\----- bgt.s 7f1a <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    7f2c:	       move.l 8(sp),d0
    7f30:	       cmp.l 4(sp),d0
    7f34:	   /-- blt.s 7f52 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    7f36:	   |   movea.l 16(sp),a0
    7f3a:	   |   move.l 80(a0),d0
    7f3e:	   |   sub.l 4(sp),d0
    7f42:	   |   move.l d0,-(sp)
    7f44:	   |   move.l 20(sp),-(sp)
    7f48:	   |   jsr 8032 <turnMeAngle>
    7f4e:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    7f50:	/--|-- bra.s 7f98 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    7f52:	|  \-> move.l 4(sp),d0
    7f56:	|      neg.l d0
    7f58:	|      cmp.l 8(sp),d0
    7f5c:	|  /-- blt.s 7f7a <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    7f5e:	|  |   movea.l 16(sp),a0
    7f62:	|  |   move.l 80(a0),d0
    7f66:	|  |   add.l 4(sp),d0
    7f6a:	|  |   move.l d0,-(sp)
    7f6c:	|  |   move.l 20(sp),-(sp)
    7f70:	|  |   jsr 8032 <turnMeAngle>
    7f76:	|  |   addq.l #8,sp
}
    7f78:	+--|-- bra.s 7f98 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    7f7a:	|  \-> movea.l 16(sp),a0
    7f7e:	|      move.l 84(a0),d0
    7f82:	|      move.l d0,-(sp)
    7f84:	|      move.l 20(sp),-(sp)
    7f88:	|      jsr 8032 <turnMeAngle>
    7f8e:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    7f90:	|      movea.l 16(sp),a0
    7f94:	|      clr.w 54(a0)
}
    7f98:	\----> nop
    7f9a:	       move.l (sp)+,d2
    7f9c:	       addq.l #8,sp
    7f9e:	       rts

00007fa0 <stopPerson>:


BOOL stopPerson (int o) {
    7fa0:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    7fa2:	       move.l 8(sp),-(sp)
    7fa6:	       jsr 6994 <findPerson>
    7fac:	       addq.l #4,sp
    7fae:	       move.l d0,(sp)
    if (moveMe)
    7fb0:	/----- beq.s 7fee <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    7fb2:	|      movea.l (sp),a0
    7fb4:	|      move.l 56(a0),d0
    7fb8:	+----- beq.s 7fee <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    7fba:	|      movea.l (sp),a0
    7fbc:	|      move.l 56(a0),d0
    7fc0:	|      move.l d0,-(sp)
    7fc2:	|      jsr 1ea2 <abortFunction>
    7fc8:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    7fca:	|      movea.l (sp),a0
    7fcc:	|      clr.l 56(a0)
            moveMe -> walking = FALSE;
    7fd0:	|      movea.l (sp),a0
    7fd2:	|      clr.w 52(a0)
            moveMe -> spinning = FALSE;
    7fd6:	|      movea.l (sp),a0
    7fd8:	|      clr.w 54(a0)
            setFrames(moveMe, ANI_STAND);
    7fdc:	|      clr.l -(sp)
    7fde:	|      move.l 4(sp),-(sp)
    7fe2:	|      jsr 55e2 <setFrames>
    7fe8:	|      addq.l #8,sp
            return TRUE;
    7fea:	|      moveq #1,d0
    7fec:	|  /-- bra.s 7ff0 <stopPerson+0x50>
        }
    return FALSE;
    7fee:	\--|-> clr.w d0
}
    7ff0:	   \-> addq.l #4,sp
    7ff2:	       rts

00007ff4 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    7ff4:	       subq.l #8,sp
	int total = 0;
    7ff6:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    7ffa:	       clr.l (sp)
    7ffc:	   /-- bra.s 801e <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    7ffe:	/--|-> movea.l 12(sp),a0
    8002:	|  |   movea.l 4(a0),a0
    8006:	|  |   move.l (sp),d1
    8008:	|  |   move.l d1,d0
    800a:	|  |   add.l d0,d0
    800c:	|  |   add.l d1,d0
    800e:	|  |   add.l d0,d0
    8010:	|  |   add.l d0,d0
    8012:	|  |   adda.l d0,a0
    8014:	|  |   move.l 4(a0),d0
    8018:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    801c:	|  |   addq.l #1,(sp)
    801e:	|  \-> movea.l 12(sp),a0
    8022:	|      move.l 8(a0),d0
    8026:	|      cmp.l (sp),d0
    8028:	\----- bgt.s 7ffe <timeForAnim+0xa>
	}
	return total;
    802a:	       move.l 4(sp),d0
}
    802e:	       addq.l #8,sp
    8030:	       rts

00008032 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    8032:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    8034:	       movea.l 8(sp),a0
    8038:	       movea.l 68(a0),a0
    803c:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    8040:	       movea.l 8(sp),a0
    8044:	       move.l 12(sp),80(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    804a:	       move.l (sp),-(sp)
    804c:	       pea b4 <_start+0xb4>
    8050:	       jsr 131d4 <__divsi3>
    8056:	       addq.l #8,sp
    8058:	       move.l d0,d1
    805a:	       addi.l #180,d1
    8060:	       movea.l 8(sp),a0
    8064:	       move.l 88(a0),d0
    8068:	       add.l d1,d0
    806a:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    806e:	   /-- bra.s 8078 <turnMeAngle+0x46>
    8070:	/--|-> addi.l #-360,12(sp)
    8078:	|  \-> cmpi.l #359,12(sp)
    8080:	\----- bgt.s 8070 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    8082:	       move.l (sp),-(sp)
    8084:	       move.l 16(sp),-(sp)
    8088:	       jsr 13156 <__mulsi3>
    808e:	       addq.l #8,sp
    8090:	       pea 168 <decodeFilename+0x50>
    8094:	       move.l d0,-(sp)
    8096:	       jsr 131d4 <__divsi3>
    809c:	       addq.l #8,sp
    809e:	       movea.l 8(sp),a0
    80a2:	       move.l d0,94(a0)
}
    80a6:	       nop
    80a8:	       addq.l #4,sp
    80aa:	       rts

000080ac <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    80ac:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    80ae:	          move.l 8(sp),-(sp)
    80b2:	          jsr 6994 <findPerson>
    80b8:	          addq.l #4,sp
    80ba:	          move.l d0,(sp)
    if (thisPerson) {
    80bc:	/-------- beq.s 811c <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    80be:	|         movea.l (sp),a0
    80c0:	|         move.l 56(a0),d0
    80c4:	|     /-- beq.s 80d6 <turnPersonToFace+0x2a>
    80c6:	|     |   movea.l (sp),a0
    80c8:	|     |   move.l 56(a0),d0
    80cc:	|     |   move.l d0,-(sp)
    80ce:	|     |   jsr 1ea2 <abortFunction>
    80d4:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    80d6:	|     \-> movea.l (sp),a0
    80d8:	|         clr.l 56(a0)
        thisPerson -> walking = FALSE;
    80dc:	|         movea.l (sp),a0
    80de:	|         clr.w 52(a0)
        thisPerson -> spinning = FALSE;
    80e2:	|         movea.l (sp),a0
    80e4:	|         clr.w 54(a0)
        turnMeAngle(thisPerson, direc);
    80e8:	|         move.l 12(sp),-(sp)
    80ec:	|         move.l 4(sp),-(sp)
    80f0:	|         jsr 8032 <turnMeAngle>
    80f6:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    80f8:	|         movea.l 19ca8 <speech>,a0
    80fe:	|         move.l (a0),d0
    8100:	|         cmp.l (sp),d0
    8102:	|  /----- bne.s 8108 <turnPersonToFace+0x5c>
    8104:	|  |      moveq #2,d0
    8106:	|  |  /-- bra.s 810a <turnPersonToFace+0x5e>
    8108:	|  \--|-> moveq #0,d0
    810a:	|     \-> move.l d0,-(sp)
    810c:	|         move.l 4(sp),-(sp)
    8110:	|         jsr 55e2 <setFrames>
    8116:	|         addq.l #8,sp
        return TRUE;
    8118:	|         moveq #1,d0
    811a:	|     /-- bra.s 811e <turnPersonToFace+0x72>
    }
    return FALSE;
    811c:	\-----|-> clr.w d0
}
    811e:	      \-> addq.l #4,sp
    8120:	          rts

00008122 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    8122:	                lea -20(sp),sp
    8126:	                move.l d3,-(sp)
    8128:	                move.l d2,-(sp)
    812a:	                move.l 36(sp),d0
    812e:	                move.w d0,d0
    8130:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    8134:	                cmpi.w #-1,10(sp)
    813a:	/-------------- bne.s 8142 <walkMe+0x20>
    813c:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    8142:	>-------------> movea.l 32(sp),a0
    8146:	|               move.l 36(a0),d0
    814a:	|               move.l d0,-(sp)
    814c:	|               jsr 12bfc <__floatsisf>
    8152:	|               addq.l #4,sp
    8154:	|               move.l d0,d1
    8156:	|               movea.l 32(sp),a0
    815a:	|               move.l (a0),d0
    815c:	|               move.l d0,-(sp)
    815e:	|               move.l d1,-(sp)
    8160:	|               jsr 12ef0 <__subsf3>
    8166:	|               addq.l #8,sp
    8168:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    816c:	|               movea.l 32(sp),a0
    8170:	|               move.l 40(a0),d0
    8174:	|               move.l d0,-(sp)
    8176:	|               jsr 12bfc <__floatsisf>
    817c:	|               addq.l #4,sp
    817e:	|               move.l d0,d1
    8180:	|               movea.l 32(sp),a0
    8184:	|               move.l 4(a0),d0
    8188:	|               move.l d0,-(sp)
    818a:	|               move.l d1,-(sp)
    818c:	|               jsr 12ef0 <__subsf3>
    8192:	|               addq.l #8,sp
    8194:	|               move.l d0,-(sp)
    8196:	|               move.l d0,-(sp)
    8198:	|               jsr 129ae <__addsf3>
    819e:	|               addq.l #8,sp
    81a0:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    81a4:	|               movea.l 32(sp),a0
    81a8:	|               move.l 20(a0),d2
    81ac:	|               movea.l 32(sp),a0
    81b0:	|               move.l 16(a0),d0
    81b4:	|               move.l d0,-(sp)
    81b6:	|               jsr 12bfc <__floatsisf>
    81bc:	|               addq.l #4,sp
    81be:	|               move.l d0,-(sp)
    81c0:	|               move.l d2,-(sp)
    81c2:	|               jsr 12cae <__mulsf3>
    81c8:	|               addq.l #8,sp
    81ca:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    81ce:	|               move.l 24(sp),-(sp)
    81d2:	|               jsr 12b14 <__extendsfdf2>
    81d8:	|               addq.l #4,sp
    81da:	|               move.l #-1717986918,-(sp)
    81e0:	|               move.l #1070176665,-(sp)
    81e6:	|               move.l d1,-(sp)
    81e8:	|               move.l d0,-(sp)
    81ea:	|               jsr 12dd4 <__ltdf2>
    81f0:	|               lea 16(sp),sp
    81f4:	|               tst.l d0
    81f6:	|           /-- bge.s 8200 <walkMe+0xde>
    81f8:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    8200:	|           \-> move.l 20(sp),-(sp)
    8204:	|               jsr 12b94 <__fixsfsi>
    820a:	|               addq.l #4,sp
    820c:	|               move.l d0,-(sp)
    820e:	|               jsr 5bb0 <TF_abs>
    8214:	|               addq.l #4,sp
    8216:	|               move.l d0,d2
    8218:	|               move.l 16(sp),-(sp)
    821c:	|               jsr 12b94 <__fixsfsi>
    8222:	|               addq.l #4,sp
    8224:	|               move.l d0,-(sp)
    8226:	|               jsr 5bb0 <TF_abs>
    822c:	|               addq.l #4,sp
    822e:	|               cmp.l d2,d0
    8230:	|        /----- bgt.s 8254 <walkMe+0x132>
    8232:	|        |      move.l 20(sp),-(sp)
    8236:	|        |      jsr 12b94 <__fixsfsi>
    823c:	|        |      addq.l #4,sp
    823e:	|        |      move.l d0,-(sp)
    8240:	|        |      jsr 5bb0 <TF_abs>
    8246:	|        |      addq.l #4,sp
    8248:	|        |      move.l d0,-(sp)
    824a:	|        |      jsr 12bfc <__floatsisf>
    8250:	|        |      addq.l #4,sp
    8252:	|        |  /-- bra.s 8274 <walkMe+0x152>
    8254:	|        \--|-> move.l 16(sp),-(sp)
    8258:	|           |   jsr 12b94 <__fixsfsi>
    825e:	|           |   addq.l #4,sp
    8260:	|           |   move.l d0,-(sp)
    8262:	|           |   jsr 5bb0 <TF_abs>
    8268:	|           |   addq.l #4,sp
    826a:	|           |   move.l d0,-(sp)
    826c:	|           |   jsr 12bfc <__floatsisf>
    8272:	|           |   addq.l #4,sp
    8274:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    8278:	|               move.l 12(sp),-(sp)
    827c:	|               jsr 12b94 <__fixsfsi>
    8282:	|               addq.l #4,sp
    8284:	|               move.l d0,-(sp)
    8286:	|               jsr 5bb0 <TF_abs>
    828c:	|               addq.l #4,sp
    828e:	|               move.l d0,-(sp)
    8290:	|               jsr 12bfc <__floatsisf>
    8296:	|               addq.l #4,sp
    8298:	|               move.l d0,-(sp)
    829a:	|               move.l 28(sp),-(sp)
    829e:	|               jsr 12e22 <__ltsf2>
    82a4:	|               addq.l #8,sp
    82a6:	|               tst.l d0
    82a8:	|        /----- bge.w 835a <walkMe+0x238>
			if (thisPerson->spinning) {
    82ac:	|        |      movea.l 32(sp),a0
    82b0:	|        |      move.w 54(a0),d0
    82b4:	|        |  /-- beq.s 82d2 <walkMe+0x1b0>
				spinStep(thisPerson);
    82b6:	|        |  |   move.l 32(sp),-(sp)
    82ba:	|        |  |   jsr 7ec2 <spinStep>
    82c0:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    82c2:	|        |  |   pea 1 <_start+0x1>
    82c6:	|        |  |   move.l 36(sp),-(sp)
    82ca:	|        |  |   jsr 55e2 <setFrames>
    82d0:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    82d2:	|        |  \-> move.l 24(sp),-(sp)
    82d6:	|        |      move.l 16(sp),-(sp)
    82da:	|        |      jsr 12aa8 <__divsf3>
    82e0:	|        |      addq.l #8,sp
    82e2:	|        |      move.l d0,24(sp)
			if (move)
    82e6:	|        |      tst.w 10(sp)
    82ea:	|        |  /-- beq.s 8354 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    82ec:	|        |  |   movea.l 32(sp),a0
    82f0:	|        |  |   move.l 4(a0),d2
    82f4:	|        |  |   move.l 24(sp),d0
    82f8:	|        |  |   move.l d0,-(sp)
    82fa:	|        |  |   move.l d0,-(sp)
    82fc:	|        |  |   jsr 129ae <__addsf3>
    8302:	|        |  |   addq.l #8,sp
    8304:	|        |  |   move.l d0,-(sp)
    8306:	|        |  |   move.l 20(sp),-(sp)
    830a:	|        |  |   jsr 12aa8 <__divsf3>
    8310:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    8312:	|        |  |   move.l d0,-(sp)
    8314:	|        |  |   move.l d2,-(sp)
    8316:	|        |  |   jsr 129ae <__addsf3>
    831c:	|        |  |   addq.l #8,sp
    831e:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    8320:	|        |  |   movea.l 32(sp),a0
    8324:	|        |  |   move.l (a0),d3
    8326:	|        |  |   move.l 24(sp),-(sp)
    832a:	|        |  |   move.l 24(sp),-(sp)
    832e:	|        |  |   jsr 12aa8 <__divsf3>
    8334:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    8336:	|        |  |   move.l d0,-(sp)
    8338:	|        |  |   move.l d3,-(sp)
    833a:	|        |  |   jsr 129ae <__addsf3>
    8340:	|        |  |   addq.l #8,sp
    8342:	|        |  |   move.l d2,-(sp)
    8344:	|        |  |   move.l d0,-(sp)
    8346:	|        |  |   move.l 40(sp),-(sp)
    834a:	|        |  |   jsr 70dc <moveAndScale>
    8350:	|        |  |   lea 12(sp),sp
			return TRUE;
    8354:	|        |  \-> moveq #1,d0
    8356:	|  /-----|----- bra.w 8408 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    835a:	|  |     \----> movea.l 32(sp),a0
    835e:	|  |            move.l 44(a0),d0
    8362:	|  |            moveq #-1,d1
    8364:	|  |            cmp.l d0,d1
    8366:	|  |        /-- bne.s 839e <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    8368:	|  |        |   movea.l 32(sp),a0
    836c:	|  |        |   move.l 98(a0),d0
    8370:	|  |        |   moveq #-1,d1
    8372:	|  |        |   cmp.l d0,d1
    8374:	|  |  /-----|-- beq.s 83b2 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    8376:	|  |  |     |   movea.l 32(sp),a0
    837a:	|  |  |     |   move.l 98(a0),d0
    837e:	|  |  |     |   movea.l 32(sp),a0
    8382:	|  |  |     |   move.l d0,84(a0)
				thisPerson->spinning = TRUE;
    8386:	|  |  |     |   movea.l 32(sp),a0
    838a:	|  |  |     |   move.w #1,54(a0)
				spinStep(thisPerson);
    8390:	|  |  |     |   move.l 32(sp),-(sp)
    8394:	|  |  |     |   jsr 7ec2 <spinStep>
    839a:	|  |  |     |   addq.l #4,sp
			}
			break;
    839c:	|  |  +-----|-- bra.s 83b2 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    839e:	|  |  |     \-> move.l 32(sp),-(sp)
    83a2:	|  |  |         jsr 62da <doBorderStuff>
    83a8:	|  |  |         addq.l #4,sp
    83aa:	|  |  |         tst.w d0
    83ac:	|  |  |  /----- beq.s 83b6 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    83ae:	\--|--|--|----- bra.w 8142 <walkMe+0x20>
			break;
    83b2:	   |  \--|----> nop
    83b4:	   |     |  /-- bra.s 83b8 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    83b6:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    83b8:	   |        \-> movea.l 32(sp),a0
    83bc:	   |            clr.w 52(a0)
	setFrames(thisPerson, ANI_STAND);
    83c0:	   |            clr.l -(sp)
    83c2:	   |            move.l 36(sp),-(sp)
    83c6:	   |            jsr 55e2 <setFrames>
    83cc:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    83ce:	   |            movea.l 32(sp),a0
    83d2:	   |            move.l 32(a0),d0
	moveAndScale(thisPerson,
    83d6:	   |            move.l d0,-(sp)
    83d8:	   |            jsr 12bfc <__floatsisf>
    83de:	   |            addq.l #4,sp
    83e0:	   |            move.l d0,d2
				 thisPerson->walkToX,
    83e2:	   |            movea.l 32(sp),a0
    83e6:	   |            move.l 28(a0),d0
	moveAndScale(thisPerson,
    83ea:	   |            move.l d0,-(sp)
    83ec:	   |            jsr 12bfc <__floatsisf>
    83f2:	   |            addq.l #4,sp
    83f4:	   |            move.l d2,-(sp)
    83f6:	   |            move.l d0,-(sp)
    83f8:	   |            move.l 40(sp),-(sp)
    83fc:	   |            jsr 70dc <moveAndScale>
    8402:	   |            lea 12(sp),sp
	return FALSE;
    8406:	   |            clr.w d0
}
    8408:	   \----------> move.l (sp)+,d2
    840a:	                move.l (sp)+,d3
    840c:	                lea 20(sp),sp
    8410:	                rts

00008412 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
    8412:	             lea -20(sp),sp
    8416:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);
	struct loadedSpriteBank * returnMe = allLoadedBanks;
    8418:	             move.l 19cd4 <allLoadedBanks>,20(sp)
	while (returnMe) {
    8420:	      /----- bra.s 8440 <loadBankForAnim+0x2e>
		if (returnMe->ID == ID) {
    8422:	   /--|----> movea.l 20(sp),a0
    8426:	   |  |      move.l (a0),d0
    8428:	   |  |      cmp.l 28(sp),d0
    842c:	   |  |  /-- bne.s 8436 <loadBankForAnim+0x24>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			return returnMe;
    842e:	   |  |  |   move.l 20(sp),d0
    8432:	/--|--|--|-- bra.w 84f2 <loadBankForAnim+0xe0>
		}
		returnMe = returnMe->next;
    8436:	|  |  |  \-> movea.l 20(sp),a0
    843a:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
    8440:	|  |  \----> tst.l 20(sp)
    8444:	|  \-------- bne.s 8422 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
    8446:	|            moveq #26,d0
    8448:	|            move.l d0,16(sp)
    844c:	|            clr.l 12(sp)
    8450:	|            move.l 19c4c <SysBase>,d0
    8456:	|            movea.l d0,a6
    8458:	|            move.l 16(sp),d0
    845c:	|            move.l 12(sp),d1
    8460:	|            jsr -684(a6)
    8464:	|            move.l d0,8(sp)
    8468:	|            move.l 8(sp),d0
    846c:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
    8470:	|     /----- beq.s 84f0 <loadBankForAnim+0xde>
		returnMe->ID = ID;
    8472:	|     |      movea.l 20(sp),a0
    8476:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
    847a:	|     |      move.l 20(sp),d0
    847e:	|     |      addq.l #8,d0
    8480:	|     |      clr.l -(sp)
    8482:	|     |      move.l d0,-(sp)
    8484:	|     |      move.l 36(sp),-(sp)
    8488:	|     |      jsr 5b90 <loadSpriteBank>
    848e:	|     |      lea 12(sp),sp
    8492:	|     |      tst.w d0
    8494:	|     |  /-- beq.s 84c8 <loadBankForAnim+0xb6>
			returnMe->timesUsed = 0;
    8496:	|     |  |   movea.l 20(sp),a0
    849a:	|     |  |   clr.l 4(a0)
			returnMe->next = allLoadedBanks;
    849e:	|     |  |   move.l 19cd4 <allLoadedBanks>,d0
    84a4:	|     |  |   movea.l 20(sp),a0
    84a8:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
    84ac:	|     |  |   move.l 20(sp),19cd4 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
    84b4:	|     |  |   pea 158fc <main_sludge.c.2f5c5368+0x12>
    84ba:	|     |  |   jsr 127a4 <KPrintF>
    84c0:	|     |  |   addq.l #4,sp
			return returnMe;
    84c2:	|     |  |   move.l 20(sp),d0
    84c6:	+-----|--|-- bra.s 84f2 <loadBankForAnim+0xe0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
    84c8:	|     |  \-> pea 15929 <main_sludge.c.2f5c5368+0x3f>
    84ce:	|     |      jsr 127a4 <KPrintF>
    84d4:	|     |      addq.l #4,sp
			FreeVec(returnMe);
    84d6:	|     |      move.l 20(sp),4(sp)
    84dc:	|     |      move.l 19c4c <SysBase>,d0
    84e2:	|     |      movea.l d0,a6
    84e4:	|     |      movea.l 4(sp),a1
    84e8:	|     |      jsr -690(a6)
			return NULL;
    84ec:	|     |      moveq #0,d0
    84ee:	+-----|----- bra.s 84f2 <loadBankForAnim+0xe0>
		}
	} else return NULL;
    84f0:	|     \----> moveq #0,d0
}
    84f2:	\----------> movea.l (sp)+,a6
    84f4:	             lea 20(sp),sp
    84f8:	             rts

000084fa <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    84fa:	       subq.l #8,sp
    84fc:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    84fe:	   /-- bra.s 852e <clearStackLib+0x34>
		k = stackLib;
    8500:	/--|-> move.l 19cdc <stackLib>,8(sp)
		stackLib = stackLib -> next;
    8508:	|  |   movea.l 19cdc <stackLib>,a0
    850e:	|  |   move.l 4(a0),d0
    8512:	|  |   move.l d0,19cdc <stackLib>
		FreeVec(k);
    8518:	|  |   move.l 8(sp),4(sp)
    851e:	|  |   move.l 19c4c <SysBase>,d0
    8524:	|  |   movea.l d0,a6
    8526:	|  |   movea.l 4(sp),a1
    852a:	|  |   jsr -690(a6)
	while (stackLib) {
    852e:	|  \-> move.l 19cdc <stackLib>,d0
    8534:	\----- bne.s 8500 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    8536:	       clr.l 19cd8 <stackLibTotal>
}
    853c:	       nop
    853e:	       movea.l (sp)+,a6
    8540:	       addq.l #8,sp
    8542:	       rts

00008544 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    8544:	          lea -128(sp),sp
    8548:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    854c:	      /-- bra.s 855e <loadGame+0x1a>
    854e:	   /--|-> move.l 19be8 <allRunningFunctions>,d0
    8554:	   |  |   move.l d0,-(sp)
    8556:	   |  |   jsr 2eaa <finishFunction>
    855c:	   |  |   addq.l #4,sp
    855e:	   |  \-> move.l 19be8 <allRunningFunctions>,d0
    8564:	   \----- bne.s 854e <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    8566:	          pea 19ce0 <ssgVersion>
    856c:	          pea 15987 <main_sludge.c.2f5c5368+0x9d>
    8572:	          pea 41 <_start+0x41>
    8576:	          pea 53 <_start+0x53>
    857a:	          move.l 160(sp),-(sp)
    857e:	          jsr 39ca <openAndVerify>
    8584:	          lea 20(sp),sp
    8588:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    858c:	      /-- bne.s 8594 <loadGame+0x50>
    858e:	      |   clr.w d0
    8590:	/-----|-- bra.w 883a <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    8594:	|     \-> move.l 112(sp),108(sp)
    859a:	|         lea 140(sp),a0
    859e:	|         lea -126(a0),a0
    85a2:	|         move.l a0,120(sp)
    85a6:	|         moveq #8,d0
    85a8:	|         move.l d0,116(sp)
    85ac:	|         move.l 19c54 <DOSBase>,d0
    85b2:	|         movea.l d0,a6
    85b4:	|         move.l 108(sp),d1
    85b8:	|         move.l 120(sp),d2
    85bc:	|         move.l 116(sp),d3
    85c0:	|         jsr -42(a6)
    85c4:	|         move.l d0,132(sp)
    85c8:	|         move.l 132(sp),d0
    85cc:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    85d0:	|         moveq #8,d0
    85d2:	|         cmp.l 128(sp),d0
    85d6:	|     /-- beq.s 85e6 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    85d8:	|     |   pea 159a8 <main_sludge.c.2f5c5368+0xbe>
    85de:	|     |   jsr 127a4 <KPrintF>
    85e4:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    85e6:	|     \-> move.l 14(sp),d1
    85ea:	|         move.l 19bf2 <fileTime>,d0
    85f0:	|         cmp.l d1,d0
    85f2:	|     /-- bne.s 8602 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    85f4:	|     |   move.l 18(sp),d1
    85f8:	|     |   move.l 19bf6 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    85fe:	|     |   cmp.l d1,d0
    8600:	|  /--|-- beq.s 8622 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    8602:	|  |  \-> move.l 144(sp),-(sp)
    8606:	|  |      pea 159c4 <main_sludge.c.2f5c5368+0xda>
    860c:	|  |      pea 15a8b <main_sludge.c.2f5c5368+0x1a1>
    8612:	|  |      jsr 127a4 <KPrintF>
    8618:	|  |      lea 12(sp),sp
		return FALSE; 
    861c:	|  |      clr.w d0
    861e:	+--|----- bra.w 883a <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    8622:	|  \----> move.l 112(sp),124(sp)
    8628:	|         move.l 19c54 <DOSBase>,d0
    862e:	|         movea.l d0,a6
    8630:	|         move.l 124(sp),d1
    8634:	|         jsr -306(a6)
    8638:	|         move.l d0,136(sp)
    863c:	|         move.l 136(sp),d0
    8640:	|         move.l d0,d0
    8642:	|         move.w d0,18000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    8648:	|         move.l 112(sp),100(sp)
    864e:	|         move.l 19c54 <DOSBase>,d0
    8654:	|         movea.l d0,a6
    8656:	|         move.l 100(sp),d1
    865a:	|         jsr -306(a6)
    865e:	|         move.l d0,96(sp)
    8662:	|         move.l 96(sp),d0
    8666:	|         move.l d0,d0
    8668:	|         move.w d0,19bf0 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    866e:	|         move.l 112(sp),92(sp)
    8674:	|         move.l 19c54 <DOSBase>,d0
    867a:	|         movea.l d0,a6
    867c:	|         move.l 92(sp),d1
    8680:	|         jsr -306(a6)
    8684:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    8688:	|         move.l 112(sp),84(sp)
    868e:	|         move.l 19c54 <DOSBase>,d0
    8694:	|         movea.l d0,a6
    8696:	|         move.l 84(sp),d1
    869a:	|         jsr -306(a6)
    869e:	|         move.l d0,80(sp)
    86a2:	|         move.l 80(sp),d0
    86a6:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    86aa:	|     /-- beq.s 86de <loadGame+0x19a>
		fontNum = get2bytes (fp);
    86ac:	|     |   move.l 112(sp),-(sp)
    86b0:	|     |   jsr 6bc <get2bytes>
    86b6:	|     |   addq.l #4,sp
    86b8:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    86bc:	|     |   move.l 112(sp),-(sp)
    86c0:	|     |   jsr 6bc <get2bytes>
    86c6:	|     |   addq.l #4,sp
    86c8:	|     |   move.l d0,19d3c <fontHeight>
		charOrder = readString(fp);		
    86ce:	|     |   move.l 112(sp),-(sp)
    86d2:	|     |   jsr b02 <readString>
    86d8:	|     |   addq.l #4,sp
    86da:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    86de:	|     \-> move.l 104(sp),70(sp)
    86e4:	|         move.l 19c4c <SysBase>,d0
    86ea:	|         movea.l d0,a6
    86ec:	|         movea.l 70(sp),a1
    86f0:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    86f4:	|         move.l 112(sp),-(sp)
    86f8:	|         jsr 854 <getSigned>
    86fe:	|         addq.l #4,sp
    8700:	|         move.w d0,186b0 <fontSpace>

	killAllPeople ();
    8706:	|         jsr 6d7e <killAllPeople>
	killAllRegions ();
    870c:	|         jsr 11248 <killAllRegions>

	int camerX = get2bytes (fp);
    8712:	|         move.l 112(sp),-(sp)
    8716:	|         jsr 6bc <get2bytes>
    871c:	|         addq.l #4,sp
    871e:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    8722:	|         move.l 112(sp),-(sp)
    8726:	|         jsr 6bc <get2bytes>
    872c:	|         addq.l #4,sp
    872e:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    8732:	|         move.l 112(sp),-(sp)
    8736:	|         jsr 7d8 <getFloat>
    873c:	|         addq.l #4,sp
    873e:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    8742:	|         move.l 112(sp),54(sp)
    8748:	|         move.l 19c54 <DOSBase>,d0
    874e:	|         movea.l d0,a6
    8750:	|         move.l 54(sp),d1
    8754:	|         jsr -306(a6)
    8758:	|         move.l d0,50(sp)
    875c:	|         move.l 50(sp),d0
    8760:	|         move.l d0,d0
    8762:	|         move.b d0,1811a <brightnessLevel>

	loadHandlers (fp);
    8768:	|         move.l 112(sp),-(sp)
    876c:	|         jsr 392a <loadHandlers>
    8772:	|         addq.l #4,sp
	loadRegions (fp);
    8774:	|         move.l 112(sp),-(sp)
    8778:	|         jsr 112a4 <loadRegions>
    877e:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    8780:	|         moveq #12,d0
    8782:	|         move.l d0,46(sp)
    8786:	|         clr.l 42(sp)
    878a:	|         move.l 19c4c <SysBase>,d0
    8790:	|         movea.l d0,a6
    8792:	|         move.l 46(sp),d0
    8796:	|         move.l 42(sp),d1
    879a:	|         jsr -684(a6)
    879e:	|         move.l d0,38(sp)
    87a2:	|         move.l 38(sp),d0
    87a6:	|         move.l d0,19b2c <mouseCursorAnim>
	if (! mouseCursorAnim) {
    87ac:	|         move.l 19b2c <mouseCursorAnim>,d0
    87b2:	|     /-- bne.s 87c6 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    87b4:	|     |   pea 15a95 <main_sludge.c.2f5c5368+0x1ab>
    87ba:	|     |   jsr 127a4 <KPrintF>
    87c0:	|     |   addq.l #4,sp
		return FALSE;
    87c2:	|     |   clr.w d0
    87c4:	+-----|-- bra.s 883a <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    87c6:	|     \-> jsr 9456 <nosnapshot>
	if (FGetC (fp)) {
    87cc:	|         move.l 112(sp),34(sp)
    87d2:	|         move.l 19c54 <DOSBase>,d0
    87d8:	|         movea.l d0,a6
    87da:	|         move.l 34(sp),d1
    87de:	|         jsr -306(a6)
    87e2:	|         move.l d0,30(sp)
    87e6:	|         move.l 30(sp),d0
    87ea:	|     /-- beq.s 8800 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    87ec:	|     |   move.l 112(sp),-(sp)
    87f0:	|     |   jsr 94bc <restoreSnapshot>
    87f6:	|     |   addq.l #4,sp
    87f8:	|     |   tst.w d0
    87fa:	|     +-- bne.s 8800 <loadGame+0x2bc>
    87fc:	|     |   clr.w d0
    87fe:	+-----|-- bra.s 883a <loadGame+0x2f6>
	}

	Close (fp);
    8800:	|     \-> move.l 112(sp),26(sp)
    8806:	|         move.l 19c54 <DOSBase>,d0
    880c:	|         movea.l d0,a6
    880e:	|         move.l 26(sp),d1
    8812:	|         jsr -36(a6)
    8816:	|         move.l d0,22(sp)
	clearStackLib ();
    881a:	|         jsr 84fa <clearStackLib>

	cameraX = camerX;
    8820:	|         move.l 66(sp),19d02 <cameraX>
	cameraY = camerY;
    8828:	|         move.l 62(sp),19d06 <cameraY>
	cameraZoom = camerZ;
    8830:	|         move.l 58(sp),1814a <cameraZoom>

	return TRUE;
    8838:	|         moveq #1,d0
}
    883a:	\-------> movem.l (sp)+,d2-d3/a6
    883e:	          lea 128(sp),sp
    8842:	          rts

00008844 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    8844:	   /-> lea -64(sp),sp
    8848:	   |   move.l a6,-(sp)
    884a:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    884c:	   |   movea.l 76(sp),a0
    8850:	   |   move.l (a0),d0
    8852:	   |   move.l 80(sp),-(sp)
    8856:	   |   move.l d0,-(sp)
    8858:	   |   jsr 8d0 <put2bytes>
    885e:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    8860:	   |   movea.l 76(sp),a0
    8864:	   |   move.l 40(a0),d0
    8868:	/--|-- beq.s 88a4 <saveFunction+0x60>
		FPutC (fp, 1);
    886a:	|  |   move.l 80(sp),52(sp)
    8870:	|  |   moveq #1,d0
    8872:	|  |   move.l d0,48(sp)
    8876:	|  |   move.l 19c54 <DOSBase>,d0
    887c:	|  |   movea.l d0,a6
    887e:	|  |   move.l 52(sp),d1
    8882:	|  |   move.l 48(sp),d2
    8886:	|  |   jsr -312(a6)
    888a:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    888e:	|  |   movea.l 76(sp),a0
    8892:	|  |   move.l 40(a0),d0
    8896:	|  |   move.l 80(sp),-(sp)
    889a:	|  |   move.l d0,-(sp)
    889c:	|  \-- jsr 8844 <saveFunction>(pc)
    88a0:	|      addq.l #8,sp
    88a2:	|  /-- bra.s 88c6 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    88a4:	\--|-> move.l 80(sp),64(sp)
    88aa:	   |   clr.l 60(sp)
    88ae:	   |   move.l 19c54 <DOSBase>,d0
    88b4:	   |   movea.l d0,a6
    88b6:	   |   move.l 64(sp),d1
    88ba:	   |   move.l 60(sp),d2
    88be:	   |   jsr -312(a6)
    88c2:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    88c6:	   \-> movea.l 76(sp),a0
    88ca:	       move.l 12(a0),d0
    88ce:	       move.l 80(sp),-(sp)
    88d2:	       move.l d0,-(sp)
    88d4:	       jsr 958 <put4bytes>
    88da:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    88dc:	       movea.l 76(sp),a0
    88e0:	       move.l 36(a0),d0
    88e4:	       move.l 80(sp),-(sp)
    88e8:	       move.l d0,-(sp)
    88ea:	       jsr 8d0 <put2bytes>
    88f0:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    88f2:	       move.l 80(sp),40(sp)
    88f8:	       movea.l 76(sp),a0
    88fc:	       move.w 54(a0),d0
    8900:	       movea.w d0,a0
    8902:	       move.l a0,36(sp)
    8906:	       move.l 19c54 <DOSBase>,d0
    890c:	       movea.l d0,a6
    890e:	       move.l 40(sp),d1
    8912:	       move.l 36(sp),d2
    8916:	       jsr -312(a6)
    891a:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    891e:	       move.l 80(sp),28(sp)
    8924:	       movea.l 76(sp),a0
    8928:	       move.w 48(a0),d0
    892c:	       movea.w d0,a0
    892e:	       move.l a0,24(sp)
    8932:	       move.l 19c54 <DOSBase>,d0
    8938:	       movea.l d0,a6
    893a:	       move.l 28(sp),d1
    893e:	       move.l 24(sp),d2
    8942:	       jsr -312(a6)
    8946:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    894a:	       move.l 80(sp),16(sp)
    8950:	       movea.l 76(sp),a0
    8954:	       move.w 50(a0),d0
    8958:	       movea.w d0,a0
    895a:	       move.l a0,12(sp)
    895e:	       move.l 19c54 <DOSBase>,d0
    8964:	       movea.l d0,a6
    8966:	       move.l 16(sp),d1
    896a:	       move.l 12(sp),d2
    896e:	       jsr -312(a6)
    8972:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    8976:	       moveq #28,d0
    8978:	       add.l 76(sp),d0
    897c:	       move.l 80(sp),-(sp)
    8980:	       move.l d0,-(sp)
    8982:	       jsr 9100 <saveVariable>
    8988:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    898a:	       movea.l 76(sp),a0
    898e:	       move.b 56(a0),d0
    8992:	   /-- beq.s 89a2 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    8994:	   |   pea 15ab6 <main_sludge.c.2f5c5368+0x1cc>
    899a:	   |   jsr 127a4 <KPrintF>
    89a0:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    89a2:	   \-> movea.l 76(sp),a0
    89a6:	       move.l 24(a0),d0
    89aa:	       move.l 80(sp),-(sp)
    89ae:	       move.l d0,-(sp)
    89b0:	       jsr 8f74 <saveStack>
    89b6:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    89b8:	       clr.l 68(sp)
    89bc:	   /-- bra.s 89e0 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    89be:	/--|-> movea.l 76(sp),a0
    89c2:	|  |   move.l 20(a0),d1
    89c6:	|  |   move.l 68(sp),d0
    89ca:	|  |   lsl.l #3,d0
    89cc:	|  |   add.l d1,d0
    89ce:	|  |   move.l 80(sp),-(sp)
    89d2:	|  |   move.l d0,-(sp)
    89d4:	|  |   jsr 9100 <saveVariable>
    89da:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    89dc:	|  |   addq.l #1,68(sp)
    89e0:	|  \-> movea.l 76(sp),a0
    89e4:	|      move.l 8(a0),d0
    89e8:	|      cmp.l 68(sp),d0
    89ec:	\----- bgt.s 89be <saveFunction+0x17a>
	}
}
    89ee:	       nop
    89f0:	       nop
    89f2:	       move.l (sp)+,d2
    89f4:	       movea.l (sp)+,a6
    89f6:	       lea 64(sp),sp
    89fa:	       rts

000089fc <saveGame>:

BOOL saveGame (char * fname) {
    89fc:	          lea -272(sp),sp
    8a00:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    8a04:	          move.l 288(sp),268(sp)
    8a0a:	          move.l #1006,264(sp)
    8a12:	          move.l 19c54 <DOSBase>,d0
    8a18:	          movea.l d0,a6
    8a1a:	          move.l 268(sp),d1
    8a1e:	          move.l 264(sp),d2
    8a22:	          jsr -30(a6)
    8a26:	          move.l d0,260(sp)
    8a2a:	          move.l 260(sp),d0
    8a2e:	          move.l d0,256(sp)
	if (fp == NULL) {
    8a32:	      /-- bne.s 8a48 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    8a34:	      |   pea 15ad8 <main_sludge.c.2f5c5368+0x1ee>
    8a3a:	      |   jsr 127a4 <KPrintF>
    8a40:	      |   addq.l #4,sp
		return FALSE;
    8a42:	      |   clr.w d0
    8a44:	/-----|-- bra.w 8f6a <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    8a48:	|     \-> move.l 256(sp),252(sp)
    8a4e:	|         move.l #88821,248(sp)
    8a56:	|         moveq #6,d0
    8a58:	|         move.l d0,244(sp)
    8a5c:	|         move.l 19c54 <DOSBase>,d0
    8a62:	|         movea.l d0,a6
    8a64:	|         move.l 252(sp),d1
    8a68:	|         move.l 248(sp),d2
    8a6c:	|         move.l 244(sp),d3
    8a70:	|         jsr -48(a6)
    8a74:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    8a78:	|         move.l 256(sp),236(sp)
    8a7e:	|         clr.l 232(sp)
    8a82:	|         move.l 19c54 <DOSBase>,d0
    8a88:	|         movea.l d0,a6
    8a8a:	|         move.l 236(sp),d1
    8a8e:	|         move.l 232(sp),d2
    8a92:	|         jsr -312(a6)
    8a96:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    8a9a:	|         move.l 256(sp),224(sp)
    8aa0:	|         clr.l 220(sp)
    8aa4:	|         move.l 19c54 <DOSBase>,d0
    8aaa:	|         movea.l d0,a6
    8aac:	|         move.l 224(sp),d1
    8ab0:	|         move.l 220(sp),d2
    8ab4:	|         jsr -312(a6)
    8ab8:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    8abc:	|         move.l 256(sp),212(sp)
    8ac2:	|         moveq #2,d0
    8ac4:	|         move.l d0,208(sp)
    8ac8:	|         move.l 19c54 <DOSBase>,d0
    8ace:	|         movea.l d0,a6
    8ad0:	|         move.l 212(sp),d1
    8ad4:	|         move.l 208(sp),d2
    8ad8:	|         jsr -312(a6)
    8adc:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    8ae0:	|         move.l 256(sp),200(sp)
    8ae6:	|         moveq #2,d0
    8ae8:	|         move.l d0,196(sp)
    8aec:	|         move.l 19c54 <DOSBase>,d0
    8af2:	|         movea.l d0,a6
    8af4:	|         move.l 200(sp),d1
    8af8:	|         move.l 196(sp),d2
    8afc:	|         jsr -312(a6)
    8b00:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    8b04:	|         move.l 256(sp),188(sp)
    8b0a:	|         move.l #105458,184(sp)
    8b12:	|         moveq #8,d0
    8b14:	|         move.l d0,180(sp)
    8b18:	|         move.l 19c54 <DOSBase>,d0
    8b1e:	|         movea.l d0,a6
    8b20:	|         move.l 188(sp),d1
    8b24:	|         move.l 184(sp),d2
    8b28:	|         move.l 180(sp),d3
    8b2c:	|         jsr -48(a6)
    8b30:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    8b34:	|         move.l 256(sp),172(sp)
    8b3a:	|         move.w 18000 <allowAnyFilename>,d0
    8b40:	|         movea.w d0,a0
    8b42:	|         move.l a0,168(sp)
    8b46:	|         move.l 19c54 <DOSBase>,d0
    8b4c:	|         movea.l d0,a6
    8b4e:	|         move.l 172(sp),d1
    8b52:	|         move.l 168(sp),d2
    8b56:	|         jsr -312(a6)
    8b5a:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    8b5e:	|         move.l 256(sp),160(sp)
    8b64:	|         move.w 19bf0 <captureAllKeys>,d0
    8b6a:	|         movea.w d0,a0
    8b6c:	|         move.l a0,156(sp)
    8b70:	|         move.l 19c54 <DOSBase>,d0
    8b76:	|         movea.l d0,a6
    8b78:	|         move.l 160(sp),d1
    8b7c:	|         move.l 156(sp),d2
    8b80:	|         jsr -312(a6)
    8b84:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    8b88:	|         move.l 256(sp),148(sp)
    8b8e:	|         moveq #1,d0
    8b90:	|         move.l d0,144(sp)
    8b94:	|         move.l 19c54 <DOSBase>,d0
    8b9a:	|         movea.l d0,a6
    8b9c:	|         move.l 148(sp),d1
    8ba0:	|         move.l 144(sp),d2
    8ba4:	|         jsr -312(a6)
    8ba8:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    8bac:	|         move.l 256(sp),136(sp)
    8bb2:	|         move.l 19d48 <fontTableSize>,d0
    8bb8:	|         sgt d0
    8bba:	|         neg.b d0
    8bbc:	|         move.b d0,d0
    8bbe:	|         andi.l #255,d0
    8bc4:	|         move.l d0,132(sp)
    8bc8:	|         move.l 19c54 <DOSBase>,d0
    8bce:	|         movea.l d0,a6
    8bd0:	|         move.l 136(sp),d1
    8bd4:	|         move.l 132(sp),d2
    8bd8:	|         jsr -312(a6)
    8bdc:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    8be0:	|         move.l 19d48 <fontTableSize>,d0
    8be6:	|     /-- ble.s 8c24 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    8be8:	|     |   move.l 19d40 <loadedFontNum>,d0
    8bee:	|     |   move.l 256(sp),-(sp)
    8bf2:	|     |   move.l d0,-(sp)
    8bf4:	|     |   jsr 8d0 <put2bytes>
    8bfa:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    8bfc:	|     |   move.l 19d3c <fontHeight>,d0
    8c02:	|     |   move.l 256(sp),-(sp)
    8c06:	|     |   move.l d0,-(sp)
    8c08:	|     |   jsr 8d0 <put2bytes>
    8c0e:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    8c10:	|     |   move.l 19d44 <fontOrderString>,d0
    8c16:	|     |   move.l 256(sp),-(sp)
    8c1a:	|     |   move.l d0,-(sp)
    8c1c:	|     |   jsr bd8 <writeString>
    8c22:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    8c24:	|     \-> move.w 186b0 <fontSpace>,d0
    8c2a:	|         movea.w d0,a0
    8c2c:	|         move.l 256(sp),-(sp)
    8c30:	|         move.l a0,-(sp)
    8c32:	|         jsr a9c <putSigned>
    8c38:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    8c3a:	|         move.l 19d02 <cameraX>,d0
    8c40:	|         move.l 256(sp),-(sp)
    8c44:	|         move.l d0,-(sp)
    8c46:	|         jsr 8d0 <put2bytes>
    8c4c:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    8c4e:	|         move.l 19d06 <cameraY>,d0
    8c54:	|         move.l 256(sp),-(sp)
    8c58:	|         move.l d0,-(sp)
    8c5a:	|         jsr 8d0 <put2bytes>
    8c60:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    8c62:	|         move.l 1814a <cameraZoom>,d0
    8c68:	|         move.l 256(sp),-(sp)
    8c6c:	|         move.l d0,-(sp)
    8c6e:	|         jsr a46 <putFloat>
    8c74:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    8c76:	|         move.l 256(sp),124(sp)
    8c7c:	|         move.b 1811a <brightnessLevel>,d0
    8c82:	|         move.b d0,d0
    8c84:	|         andi.l #255,d0
    8c8a:	|         move.l d0,120(sp)
    8c8e:	|         move.l 19c54 <DOSBase>,d0
    8c94:	|         movea.l d0,a6
    8c96:	|         move.l 124(sp),d1
    8c9a:	|         move.l 120(sp),d2
    8c9e:	|         jsr -312(a6)
    8ca2:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    8ca6:	|         move.l 256(sp),-(sp)
    8caa:	|         jsr 3eae <saveHandlers>
    8cb0:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    8cb2:	|         move.l 256(sp),-(sp)
    8cb6:	|         jsr 1145e <saveRegions>
    8cbc:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    8cbe:	|         move.l 19b2c <mouseCursorAnim>,d0
    8cc4:	|         move.l 256(sp),-(sp)
    8cc8:	|         move.l d0,-(sp)
    8cca:	|         jsr 72ac <saveAnim>
    8cd0:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    8cd2:	|         move.l 19b30 <mouseCursorFrameNum>,d0
    8cd8:	|         move.l 256(sp),-(sp)
    8cdc:	|         move.l d0,-(sp)
    8cde:	|         jsr 8d0 <put2bytes>
    8ce4:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    8ce6:	|         move.l 19be8 <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    8cee:	|         clr.l 272(sp)
	while (thisFunction) {
    8cf2:	|     /-- bra.s 8d02 <saveGame+0x306>
		countFunctions ++;
    8cf4:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    8cf8:	|  |  |   movea.l 276(sp),a0
    8cfc:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    8d02:	|  |  \-> tst.l 276(sp)
    8d06:	|  \----- bne.s 8cf4 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    8d08:	|         move.l 256(sp),-(sp)
    8d0c:	|         move.l 276(sp),-(sp)
    8d10:	|         jsr 8d0 <put2bytes>
    8d16:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    8d18:	|         move.l 19be8 <allRunningFunctions>,276(sp)
	while (thisFunction) {
    8d20:	|     /-- bra.s 8d3c <saveGame+0x340>
		saveFunction (thisFunction, fp);
    8d22:	|  /--|-> move.l 256(sp),-(sp)
    8d26:	|  |  |   move.l 280(sp),-(sp)
    8d2a:	|  |  |   jsr 8844 <saveFunction>
    8d30:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    8d32:	|  |  |   movea.l 276(sp),a0
    8d36:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    8d3c:	|  |  \-> tst.l 276(sp)
    8d40:	|  \----- bne.s 8d22 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    8d42:	|         clr.l 280(sp)
    8d46:	|     /-- bra.s 8d68 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    8d48:	|  /--|-> move.l 19bfe <globalVars>,d1
    8d4e:	|  |  |   move.l 280(sp),d0
    8d52:	|  |  |   lsl.l #3,d0
    8d54:	|  |  |   add.l d1,d0
    8d56:	|  |  |   move.l 256(sp),-(sp)
    8d5a:	|  |  |   move.l d0,-(sp)
    8d5c:	|  |  |   jsr 9100 <saveVariable>
    8d62:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    8d64:	|  |  |   addq.l #1,280(sp)
    8d68:	|  |  \-> move.l 19c24 <numGlobals>,d0
    8d6e:	|  |      cmp.l 280(sp),d0
    8d72:	|  \----- bgt.s 8d48 <saveGame+0x34c>
	}

	savePeople (fp);
    8d74:	|         move.l 256(sp),-(sp)
    8d78:	|         jsr 73d4 <savePeople>
    8d7e:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    8d80:	|         movea.l 19d54 <currentFloor>,a0
    8d86:	|         move.l 8(a0),d0
    8d8a:	|  /----- beq.s 8dc8 <saveGame+0x3cc>
		FPutC (fp, 1);
    8d8c:	|  |      move.l 256(sp),100(sp)
    8d92:	|  |      moveq #1,d0
    8d94:	|  |      move.l d0,96(sp)
    8d98:	|  |      move.l 19c54 <DOSBase>,d0
    8d9e:	|  |      movea.l d0,a6
    8da0:	|  |      move.l 100(sp),d1
    8da4:	|  |      move.l 96(sp),d2
    8da8:	|  |      jsr -312(a6)
    8dac:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    8db0:	|  |      movea.l 19d54 <currentFloor>,a0
    8db6:	|  |      move.l (a0),d0
    8db8:	|  |      move.l 256(sp),-(sp)
    8dbc:	|  |      move.l d0,-(sp)
    8dbe:	|  |      jsr 8d0 <put2bytes>
    8dc4:	|  |      addq.l #8,sp
    8dc6:	|  |  /-- bra.s 8dea <saveGame+0x3ee>
	} else FPutC (fp, 0);
    8dc8:	|  \--|-> move.l 256(sp),112(sp)
    8dce:	|     |   clr.l 108(sp)
    8dd2:	|     |   move.l 19c54 <DOSBase>,d0
    8dd8:	|     |   movea.l d0,a6
    8dda:	|     |   move.l 112(sp),d1
    8dde:	|     |   move.l 108(sp),d2
    8de2:	|     |   jsr -312(a6)
    8de6:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    8dea:	|     \-> move.l 19bbc <zBuffer+0x50>,d0
    8df0:	|  /----- beq.s 8e2c <saveGame+0x430>
		FPutC (fp, 1);
    8df2:	|  |      move.l 256(sp),76(sp)
    8df8:	|  |      moveq #1,d0
    8dfa:	|  |      move.l d0,72(sp)
    8dfe:	|  |      move.l 19c54 <DOSBase>,d0
    8e04:	|  |      movea.l d0,a6
    8e06:	|  |      move.l 76(sp),d1
    8e0a:	|  |      move.l 72(sp),d2
    8e0e:	|  |      jsr -312(a6)
    8e12:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    8e16:	|  |      move.l 19bb8 <zBuffer+0x4c>,d0
    8e1c:	|  |      move.l 256(sp),-(sp)
    8e20:	|  |      move.l d0,-(sp)
    8e22:	|  |      jsr 8d0 <put2bytes>
    8e28:	|  |      addq.l #8,sp
    8e2a:	|  |  /-- bra.s 8e4e <saveGame+0x452>
	} else FPutC (fp,0);
    8e2c:	|  \--|-> move.l 256(sp),88(sp)
    8e32:	|     |   clr.l 84(sp)
    8e36:	|     |   move.l 19c54 <DOSBase>,d0
    8e3c:	|     |   movea.l d0,a6
    8e3e:	|     |   move.l 88(sp),d1
    8e42:	|     |   move.l 84(sp),d2
    8e46:	|     |   jsr -312(a6)
    8e4a:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    8e4e:	|     \-> move.l 256(sp),64(sp)
    8e54:	|         move.l 19d16 <speechMode>,60(sp)
    8e5c:	|         move.l 19c54 <DOSBase>,d0
    8e62:	|         movea.l d0,a6
    8e64:	|         move.l 64(sp),d1
    8e68:	|         move.l 60(sp),d2
    8e6c:	|         jsr -312(a6)
    8e70:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    8e74:	|         move.b 18686 <fadeMode>,d0
    8e7a:	|         move.b d0,d0
    8e7c:	|         andi.l #255,d0
    8e82:	|         move.l d0,52(sp)
    8e86:	|         move.l 256(sp),48(sp)
    8e8c:	|         move.l 19c54 <DOSBase>,d0
    8e92:	|         movea.l d0,a6
    8e94:	|         move.l 52(sp),d1
    8e98:	|         move.l 48(sp),d2
    8e9c:	|         jsr -312(a6)
    8ea0:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    8ea4:	|         move.l 19ca8 <speech>,d0
    8eaa:	|         move.l 256(sp),-(sp)
    8eae:	|         move.l d0,-(sp)
    8eb0:	|         jsr 5496 <saveSpeech>
    8eb6:	|         addq.l #8,sp
	saveStatusBars (fp);
    8eb8:	|         move.l 256(sp),-(sp)
    8ebc:	|         jsr 4e92 <saveStatusBars>
    8ec2:	|         addq.l #4,sp
	saveSounds (fp);
    8ec4:	|         move.l 256(sp),-(sp)
    8ec8:	|         jsr 9244 <saveSounds>
    8ece:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    8ed0:	|         move.w 19d00 <saveEncoding>,d0
    8ed6:	|         move.w d0,d0
    8ed8:	|         andi.l #65535,d0
    8ede:	|         move.l 256(sp),-(sp)
    8ee2:	|         move.l d0,-(sp)
    8ee4:	|         jsr 8d0 <put2bytes>
    8eea:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    8eec:	|         move.l 19cf2 <parallaxStuff>,d0
    8ef2:	|         move.l 256(sp),-(sp)
    8ef6:	|         move.l d0,-(sp)
    8ef8:	|         jsr 94e2 <saveParallaxRecursive>
    8efe:	|         addq.l #8,sp
	FPutC (fp, 0);
    8f00:	|         move.l 256(sp),40(sp)
    8f06:	|         clr.l 36(sp)
    8f0a:	|         move.l 19c54 <DOSBase>,d0
    8f10:	|         movea.l d0,a6
    8f12:	|         move.l 40(sp),d1
    8f16:	|         move.l 36(sp),d2
    8f1a:	|         jsr -312(a6)
    8f1e:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    8f22:	|         move.l 256(sp),28(sp)
    8f28:	|         move.l 18120 <languageNum>,24(sp)
    8f30:	|         move.l 19c54 <DOSBase>,d0
    8f36:	|         movea.l d0,a6
    8f38:	|         move.l 28(sp),d1
    8f3c:	|         move.l 24(sp),d2
    8f40:	|         jsr -312(a6)
    8f44:	|         move.l d0,20(sp)

	Close(fp);
    8f48:	|         move.l 256(sp),16(sp)
    8f4e:	|         move.l 19c54 <DOSBase>,d0
    8f54:	|         movea.l d0,a6
    8f56:	|         move.l 16(sp),d1
    8f5a:	|         jsr -36(a6)
    8f5e:	|         move.l d0,12(sp)
	clearStackLib ();
    8f62:	|         jsr 84fa <clearStackLib>
	return TRUE;
    8f68:	|         moveq #1,d0
}
    8f6a:	\-------> movem.l (sp)+,d2-d3/a6
    8f6e:	          lea 272(sp),sp
    8f72:	          rts

00008f74 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    8f74:	       lea -12(sp),sp
	int elements = 0;
    8f78:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    8f7c:	       move.l 16(sp),(sp)
	while (search) {
    8f80:	   /-- bra.s 8f8c <saveStack+0x18>
		elements ++;
    8f82:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    8f86:	|  |   movea.l (sp),a0
    8f88:	|  |   move.l 8(a0),(sp)
	while (search) {
    8f8c:	|  \-> tst.l (sp)
    8f8e:	\----- bne.s 8f82 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    8f90:	       move.l 20(sp),-(sp)
    8f94:	       move.l 12(sp),-(sp)
    8f98:	       jsr 8d0 <put2bytes>
    8f9e:	       addq.l #8,sp
	search = vs;
    8fa0:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    8fa4:	       clr.l 4(sp)
    8fa8:	   /-- bra.s 8fc4 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    8faa:	/--|-> move.l (sp),d0
    8fac:	|  |   move.l 20(sp),-(sp)
    8fb0:	|  |   move.l d0,-(sp)
    8fb2:	|  |   jsr 9100 <saveVariable>
    8fb8:	|  |   addq.l #8,sp
		search = search -> next;
    8fba:	|  |   movea.l (sp),a0
    8fbc:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    8fc0:	|  |   addq.l #1,4(sp)
    8fc4:	|  \-> move.l 4(sp),d0
    8fc8:	|      cmp.l 8(sp),d0
    8fcc:	\----- blt.s 8faa <saveStack+0x36>
	}
}
    8fce:	       nop
    8fd0:	       nop
    8fd2:	       lea 12(sp),sp
    8fd6:	       rts

00008fd8 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    8fd8:	             lea -44(sp),sp
    8fdc:	             move.l a6,-(sp)
    8fde:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    8fe0:	             move.l 19cdc <stackLib>,48(sp)
	int a = 0;
    8fe8:	             clr.l 44(sp)
	while (s) {
    8fec:	      /----- bra.s 904a <saveStackRef+0x72>
		if (s -> stack == vs) {
    8fee:	   /--|----> movea.l 48(sp),a0
    8ff2:	   |  |      move.l (a0),d0
    8ff4:	   |  |      cmp.l 56(sp),d0
    8ff8:	   |  |  /-- bne.s 903c <saveStackRef+0x64>
			FPutC (fp, 1);
    8ffa:	   |  |  |   move.l 60(sp),16(sp)
    9000:	   |  |  |   moveq #1,d0
    9002:	   |  |  |   move.l d0,12(sp)
    9006:	   |  |  |   move.l 19c54 <DOSBase>,d0
    900c:	   |  |  |   movea.l d0,a6
    900e:	   |  |  |   move.l 16(sp),d1
    9012:	   |  |  |   move.l 12(sp),d2
    9016:	   |  |  |   jsr -312(a6)
    901a:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    901e:	   |  |  |   move.l 19cd8 <stackLibTotal>,d0
    9024:	   |  |  |   sub.l 44(sp),d0
    9028:	   |  |  |   move.l 60(sp),-(sp)
    902c:	   |  |  |   move.l d0,-(sp)
    902e:	   |  |  |   jsr 8d0 <put2bytes>
    9034:	   |  |  |   addq.l #8,sp
			return TRUE;
    9036:	   |  |  |   moveq #1,d0
    9038:	/--|--|--|-- bra.w 90f6 <saveStackRef+0x11e>
		}
		s = s -> next;
    903c:	|  |  |  \-> movea.l 48(sp),a0
    9040:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    9046:	|  |  |      addq.l #1,44(sp)
	while (s) {
    904a:	|  |  \----> tst.l 48(sp)
    904e:	|  \-------- bne.s 8fee <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    9050:	|            move.l 60(sp),40(sp)
    9056:	|            clr.l 36(sp)
    905a:	|            move.l 19c54 <DOSBase>,d0
    9060:	|            movea.l d0,a6
    9062:	|            move.l 40(sp),d1
    9066:	|            move.l 36(sp),d2
    906a:	|            jsr -312(a6)
    906e:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    9072:	|            movea.l 56(sp),a0
    9076:	|            move.l (a0),d0
    9078:	|            move.l 60(sp),-(sp)
    907c:	|            move.l d0,-(sp)
    907e:	|            jsr 8f74 <saveStack>
    9084:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    9086:	|            moveq #8,d0
    9088:	|            move.l d0,28(sp)
    908c:	|            clr.l 24(sp)
    9090:	|            move.l 19c4c <SysBase>,d0
    9096:	|            movea.l d0,a6
    9098:	|            move.l 28(sp),d0
    909c:	|            move.l 24(sp),d1
    90a0:	|            jsr -684(a6)
    90a4:	|            move.l d0,20(sp)
    90a8:	|            move.l 20(sp),d0
    90ac:	|            move.l d0,48(sp)
	stackLibTotal ++;
    90b0:	|            move.l 19cd8 <stackLibTotal>,d0
    90b6:	|            addq.l #1,d0
    90b8:	|            move.l d0,19cd8 <stackLibTotal>
	if (! s) {
    90be:	|            tst.l 48(sp)
    90c2:	|        /-- bne.s 90d6 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    90c4:	|        |   pea 15b24 <main_sludge.c.2f5c5368+0x23a>
    90ca:	|        |   jsr 127a4 <KPrintF>
    90d0:	|        |   addq.l #4,sp
		return FALSE;
    90d2:	|        |   clr.w d0
    90d4:	+--------|-- bra.s 90f6 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    90d6:	|        \-> move.l 19cdc <stackLib>,d0
    90dc:	|            movea.l 48(sp),a0
    90e0:	|            move.l d0,4(a0)
	s -> stack = vs;
    90e4:	|            movea.l 48(sp),a0
    90e8:	|            move.l 56(sp),(a0)
	stackLib = s;
    90ec:	|            move.l 48(sp),19cdc <stackLib>
	return TRUE;
    90f4:	|            moveq #1,d0
}
    90f6:	\----------> move.l (sp)+,d2
    90f8:	             movea.l (sp)+,a6
    90fa:	             lea 44(sp),sp
    90fe:	             rts

00009100 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    9100:	          lea -12(sp),sp
    9104:	          move.l a6,-(sp)
    9106:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    9108:	          move.l 28(sp),16(sp)
    910e:	          movea.l 24(sp),a0
    9112:	          move.l (a0),d0
    9114:	          move.l d0,12(sp)
    9118:	          move.l 19c54 <DOSBase>,d0
    911e:	          movea.l d0,a6
    9120:	          move.l 16(sp),d1
    9124:	          move.l 12(sp),d2
    9128:	          jsr -312(a6)
    912c:	          move.l d0,8(sp)
	switch (from -> varType) {
    9130:	          movea.l 24(sp),a0
    9134:	          move.l (a0),d0
    9136:	          moveq #9,d1
    9138:	          cmp.l d0,d1
    913a:	      /-- bcs.w 91ea <saveVariable+0xea>
    913e:	      |   add.l d0,d0
    9140:	      |   movea.l d0,a0
    9142:	      |   adda.l #37198,a0
    9148:	      |   move.w (a0),d0
    914a:	      |   jmp (914e <saveVariable+0x4e>,pc,d0.w)
    914e:	      |   ori.l #1310740,(a0)+
    9154:	      |   ori.b #20,(20,a0,d0.w)
    915a:	      |   .short 0x004c
    915c:	      |   ori.b #126,(a4)
    9160:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    9164:	      |   ori.b #40,(a0)+
    9168:	      |   ori.b #47,d4
    916c:	      |   ori.b #0,(a4)+
    9170:	      |   jsr 958 <put4bytes>
    9176:	      |   addq.l #8,sp
		return TRUE;
    9178:	      |   moveq #1,d0
    917a:	/-----|-- bra.w 9226 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    917e:	|     |   movea.l 24(sp),a0
    9182:	|     |   move.l 4(a0),d0
    9186:	|     |   move.l 28(sp),-(sp)
    918a:	|     |   move.l d0,-(sp)
    918c:	|     |   jsr bd8 <writeString>
    9192:	|     |   addq.l #8,sp
		return TRUE;
    9194:	|     |   moveq #1,d0
    9196:	+-----|-- bra.w 9226 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    919a:	|     |   movea.l 24(sp),a0
    919e:	|     |   move.l 4(a0),d0
    91a2:	|     |   move.l 28(sp),-(sp)
    91a6:	|     |   move.l d0,-(sp)
    91a8:	|     |   jsr 8fd8 <saveStackRef>
    91ae:	|     |   addq.l #8,sp
    91b0:	+-----|-- bra.s 9226 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    91b2:	|     |   movea.l 24(sp),a0
    91b6:	|     |   move.l 4(a0),d0
    91ba:	|     |   move.l 28(sp),-(sp)
    91be:	|     |   move.l d0,-(sp)
    91c0:	|     |   jsr 7376 <saveCostume>
    91c6:	|     |   addq.l #8,sp
		return FALSE;
    91c8:	|     |   clr.w d0
    91ca:	+-----|-- bra.s 9226 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    91cc:	|     |   movea.l 24(sp),a0
    91d0:	|     |   move.l 4(a0),d0
    91d4:	|     |   move.l 28(sp),-(sp)
    91d8:	|     |   move.l d0,-(sp)
    91da:	|     |   jsr 72ac <saveAnim>
    91e0:	|     |   addq.l #8,sp
		return FALSE;
    91e2:	|     |   clr.w d0
    91e4:	+-----|-- bra.s 9226 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    91e6:	|     |   clr.w d0
    91e8:	+-----|-- bra.s 9226 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    91ea:	|     \-> movea.l 24(sp),a0
    91ee:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    91f0:	|         moveq #10,d1
    91f2:	|         cmp.l d0,d1
    91f4:	|  /----- bcs.s 920e <saveVariable+0x10e>
						typeName[from->varType] :
    91f6:	|  |      movea.l 24(sp),a0
    91fa:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    91fc:	|  |      add.l d0,d0
    91fe:	|  |      movea.l d0,a1
    9200:	|  |      adda.l d0,a1
    9202:	|  |      lea 18688 <typeName>,a0
    9208:	|  |      move.l (0,a1,a0.l),d0
    920c:	|  |  /-- bra.s 9214 <saveVariable+0x114>
    920e:	|  \--|-> move.l #88905,d0
    9214:	|     \-> move.l d0,-(sp)
    9216:	|         pea 15b50 <main_sludge.c.2f5c5368+0x266>
    921c:	|         jsr 127a4 <KPrintF>
    9222:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    9224:	|         moveq #1,d0
    9226:	\-------> move.l (sp)+,d2
    9228:	          movea.l (sp)+,a6
    922a:	          lea 12(sp),sp
    922e:	          rts

00009230 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    9230:	moveq #0,d0
}
    9232:	rts

00009234 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    9234:	nop
    9236:	rts

00009238 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    9238:	nop
    923a:	rts

0000923c <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    923c:	moveq #1,d0
}
    923e:	rts

00009240 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    9240:	nop
    9242:	rts

00009244 <saveSounds>:

void saveSounds (BPTR fp) {
    9244:	lea -12(sp),sp
    9248:	move.l a6,-(sp)
    924a:	move.l d2,-(sp)
	FPutC (fp,0);
    924c:	move.l 24(sp),16(sp)
    9252:	clr.l 12(sp)
    9256:	move.l 19c54 <DOSBase>,d0
    925c:	movea.l d0,a6
    925e:	move.l 16(sp),d1
    9262:	move.l 12(sp),d2
    9266:	jsr -312(a6)
    926a:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    926e:	move.l 18146 <defSoundVol>,d0
    9274:	move.l 24(sp),-(sp)
    9278:	move.l d0,-(sp)
    927a:	jsr 8d0 <put2bytes>
    9280:	addq.l #8,sp
	put2bytes (defVol, fp);
    9282:	move.l 18142 <defVol>,d0
    9288:	move.l 24(sp),-(sp)
    928c:	move.l d0,-(sp)
    928e:	jsr 8d0 <put2bytes>
    9294:	addq.l #8,sp
}
    9296:	nop
    9298:	move.l (sp)+,d2
    929a:	movea.l (sp)+,a6
    929c:	lea 12(sp),sp
    92a0:	rts

000092a2 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    92a2:	move.l 4(sp),18142 <defVol>
}
    92aa:	nop
    92ac:	rts

000092ae <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    92ae:	move.l 4(sp),18146 <defSoundVol>
}
    92b6:	nop
    92b8:	rts

000092ba <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    92ba:	nop
    92bc:	rts

000092be <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    92be:	nop
    92c0:	rts

000092c2 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    92c2:	nop
    92c4:	rts

000092c6 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    92c6:	subq.l #4,sp
    92c8:	move.l 12(sp),d0
    92cc:	move.w d0,d0
    92ce:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    92d2:	moveq #1,d0
}
    92d4:	addq.l #4,sp
    92d6:	rts

000092d8 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    92d8:	nop
    92da:	rts

000092dc <blankScreen>:
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	
}
    92dc:	nop
    92de:	rts

000092e0 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    92e0:	pea 15b73 <main_sludge.c.2f5c5368+0x289>
    92e6:	jsr 127a4 <KPrintF>
    92ec:	addq.l #4,sp
}
    92ee:	nop
    92f0:	rts

000092f2 <drawHorizontalLine>:

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    92f2:	movea.l 8(sp),a1
    92f6:	movea.l 12(sp),a0
    92fa:	move.l 8(sp),d1
    92fe:	move.l 4(sp),d0
    9302:	move.l a1,-(sp)
    9304:	move.l a0,-(sp)
    9306:	move.l d1,-(sp)
    9308:	move.l d0,-(sp)
    930a:	jsr 1158 <drawLine>
    9310:	lea 16(sp),sp
}
    9314:	nop
    9316:	rts

00009318 <drawVerticalLine>:

void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    9318:	movea.l 12(sp),a1
    931c:	movea.l 4(sp),a0
    9320:	move.l 8(sp),d1
    9324:	move.l 4(sp),d0
    9328:	move.l a1,-(sp)
    932a:	move.l a0,-(sp)
    932c:	move.l d1,-(sp)
    932e:	move.l d0,-(sp)
    9330:	jsr 1158 <drawLine>
    9336:	lea 16(sp),sp
}
    933a:	nop
    933c:	rts

0000933e <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    933e:	pea 15bac <main_sludge.c.2f5c5368+0x2c2>
    9344:	jsr 127a4 <KPrintF>
    934a:	addq.l #4,sp
}
    934c:	nop
    934e:	rts

00009350 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    9350:	jsr 10e8 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    9356:	pea 19cec <backdropTextureName>
    935c:	pea 1 <_start+0x1>
    9360:	jsr 12da <deleteTextures>
    9366:	addq.l #8,sp
	backdropTextureName = 0;
    9368:	clr.l 19cec <backdropTextureName>
	backdropExists = FALSE;
    936e:	clr.w 19cf0 <backdropExists>
}
    9374:	nop
    9376:	rts

00009378 <killParallax>:

void killParallax () {
    9378:	          lea -12(sp),sp
    937c:	          move.l a6,-(sp)
	while (parallaxStuff) {
    937e:	   /----- bra.s 93ea <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    9380:	/--|----> move.l 19cf2 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    9388:	|  |      movea.l 12(sp),a0
    938c:	|  |      move.l 42(a0),d0
    9390:	|  |      move.l d0,19cf2 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    9396:	|  |      move.l 12(sp),d0
    939a:	|  |      addq.l #4,d0
    939c:	|  |      move.l d0,-(sp)
    939e:	|  |      pea 1 <_start+0x1>
    93a2:	|  |      jsr 12da <deleteTextures>
    93a8:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    93aa:	|  |      movea.l 12(sp),a0
    93ae:	|  |      move.l (a0),d0
    93b0:	|  |  /-- beq.s 93ca <killParallax+0x52>
    93b2:	|  |  |   movea.l 12(sp),a0
    93b6:	|  |  |   move.l (a0),8(sp)
    93ba:	|  |  |   move.l 19c4c <SysBase>,d0
    93c0:	|  |  |   movea.l d0,a6
    93c2:	|  |  |   movea.l 8(sp),a1
    93c6:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    93ca:	|  |  \-> tst.l 12(sp)
    93ce:	|  |  /-- beq.s 93e6 <killParallax+0x6e>
    93d0:	|  |  |   move.l 12(sp),4(sp)
    93d6:	|  |  |   move.l 19c4c <SysBase>,d0
    93dc:	|  |  |   movea.l d0,a6
    93de:	|  |  |   movea.l 4(sp),a1
    93e2:	|  |  |   jsr -690(a6)
		k = NULL;
    93e6:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    93ea:	|  \----> move.l 19cf2 <parallaxStuff>,d0
    93f0:	\-------- bne.s 9380 <killParallax+0x8>
	}
}
    93f2:	          nop
    93f4:	          nop
    93f6:	          movea.l (sp)+,a6
    93f8:	          lea 12(sp),sp
    93fc:	          rts

000093fe <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {

	KPrintF("loadBackDrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    93fe:	pea 15bcd <main_sludge.c.2f5c5368+0x2e3>
    9404:	jsr 127a4 <KPrintF>
    940a:	addq.l #4,sp
}
    940c:	nop
    940e:	rts

00009410 <loadParallax>:

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    9410:	subq.l #8,sp
    9412:	movea.l 12(sp),a0
    9416:	move.l 16(sp),d1
    941a:	move.l 20(sp),d0
    941e:	movea.w a0,a0
    9420:	move.w a0,6(sp)
    9424:	move.w d1,d1
    9426:	move.w d1,4(sp)
    942a:	move.w d0,d0
    942c:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    9430:	pea 15c07 <main_sludge.c.2f5c5368+0x31d>
    9436:	jsr 127a4 <KPrintF>
    943c:	addq.l #4,sp

}
    943e:	nop
    9440:	addq.l #8,sp
    9442:	rts

00009444 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    9444:	pea 15c2a <main_sludge.c.2f5c5368+0x340>
    944a:	jsr 127a4 <KPrintF>
    9450:	addq.l #4,sp
}
    9452:	nop
    9454:	rts

00009456 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    9456:	pea 19cf6 <snapshotTextureName>
    945c:	pea 1 <_start+0x1>
    9460:	jsr 12da <deleteTextures>
    9466:	addq.l #8,sp
	snapshotTextureName = 0;
    9468:	clr.l 19cf6 <snapshotTextureName>
}
    946e:	nop
    9470:	rts

00009472 <reserveBackdrop>:

BOOL reserveBackdrop () {
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    9472:	move.l 19ce8 <sceneHeight>,d0
    9478:	move.l d0,d1
    947a:	move.l 19ce4 <sceneWidth>,d0
    9480:	move.l d1,-(sp)
    9482:	move.l d0,-(sp)
    9484:	jsr fe2 <CstReserveBackdrop>
    948a:	addq.l #8,sp
}
    948c:	rts

0000948e <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    948e:	jsr 9350 <killBackDrop>
	killParallax ();
    9494:	jsr 9378 <killParallax>
	killZBuffer ();
    949a:	jsr 194a <killZBuffer>
	sceneWidth = x;
    94a0:	move.l 4(sp),d0
    94a4:	move.l d0,19ce4 <sceneWidth>
	sceneHeight = y;	
    94aa:	move.l 8(sp),d0
    94ae:	move.l d0,19ce8 <sceneHeight>
	return reserveBackdrop();
    94b4:	jsr 9472 <reserveBackdrop>
}
    94ba:	rts

000094bc <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    94bc:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    94be:	move.l 12(sp),-(sp)
    94c2:	jsr 6bc <get2bytes>
    94c8:	addq.l #4,sp
    94ca:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    94ce:	move.l 12(sp),-(sp)
    94d2:	jsr 6bc <get2bytes>
    94d8:	addq.l #4,sp
    94da:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    94dc:	moveq #1,d0
}
    94de:	addq.l #8,sp
    94e0:	rts

000094e2 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    94e2:	   /-> lea -12(sp),sp
    94e6:	   |   move.l a6,-(sp)
    94e8:	   |   move.l d2,-(sp)
	if (me) {
    94ea:	   |   tst.l 24(sp)
    94ee:	/--|-- beq.w 9584 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    94f2:	|  |   movea.l 24(sp),a0
    94f6:	|  |   move.l 42(a0),d0
    94fa:	|  |   move.l 28(sp),-(sp)
    94fe:	|  |   move.l d0,-(sp)
    9500:	|  \-- jsr 94e2 <saveParallaxRecursive>(pc)
    9504:	|      addq.l #8,sp
		FPutC (fp, 1);
    9506:	|      move.l 28(sp),16(sp)
    950c:	|      moveq #1,d0
    950e:	|      move.l d0,12(sp)
    9512:	|      move.l 19c54 <DOSBase>,d0
    9518:	|      movea.l d0,a6
    951a:	|      move.l 16(sp),d1
    951e:	|      move.l 12(sp),d2
    9522:	|      jsr -312(a6)
    9526:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    952a:	|      movea.l 24(sp),a0
    952e:	|      move.w 28(a0),d0
    9532:	|      move.w d0,d0
    9534:	|      andi.l #65535,d0
    953a:	|      move.l 28(sp),-(sp)
    953e:	|      move.l d0,-(sp)
    9540:	|      jsr 8d0 <put2bytes>
    9546:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    9548:	|      movea.l 24(sp),a0
    954c:	|      move.w 30(a0),d0
    9550:	|      move.w d0,d0
    9552:	|      andi.l #65535,d0
    9558:	|      move.l 28(sp),-(sp)
    955c:	|      move.l d0,-(sp)
    955e:	|      jsr 8d0 <put2bytes>
    9564:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    9566:	|      movea.l 24(sp),a0
    956a:	|      move.w 32(a0),d0
    956e:	|      move.w d0,d0
    9570:	|      andi.l #65535,d0
    9576:	|      move.l 28(sp),-(sp)
    957a:	|      move.l d0,-(sp)
    957c:	|      jsr 8d0 <put2bytes>
    9582:	|      addq.l #8,sp
	}
}
    9584:	\----> nop
    9586:	       move.l (sp)+,d2
    9588:	       movea.l (sp)+,a6
    958a:	       lea 12(sp),sp
    958e:	       rts

00009590 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    9590:	pea 15c63 <main_sludge.c.2f5c5368+0x379>
    9596:	jsr 127a4 <KPrintF>
    959c:	addq.l #4,sp
	return TRUE;
    959e:	moveq #1,d0
    95a0:	rts

000095a2 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    95a2:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    95a4:	             move.l 19cfa <allObjectTypes>,(sp)

	while (huntType) {
    95aa:	      /----- bra.s 95c2 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    95ac:	   /--|----> movea.l (sp),a0
    95ae:	   |  |      move.l 4(a0),d0
    95b2:	   |  |      cmp.l 8(sp),d0
    95b6:	   |  |  /-- bne.s 95bc <findObjectType+0x1a>
    95b8:	   |  |  |   move.l (sp),d0
    95ba:	/--|--|--|-- bra.s 95d2 <findObjectType+0x30>
		huntType = huntType -> next;
    95bc:	|  |  |  \-> movea.l (sp),a0
    95be:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    95c2:	|  |  \----> tst.l (sp)
    95c4:	|  \-------- bne.s 95ac <findObjectType+0xa>
	}

	return loadObjectType (i);
    95c6:	|            move.l 8(sp),-(sp)
    95ca:	|            jsr 9692 <loadObjectType>
    95d0:	|            addq.l #4,sp
}
    95d2:	\----------> addq.l #4,sp
    95d4:	             rts

000095d6 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    95d6:	             lea -12(sp),sp
	int i, num = 0;
    95da:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    95de:	             move.l 20(sp),-(sp)
    95e2:	             jsr 95a2 <findObjectType>
    95e8:	             addq.l #4,sp
    95ea:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    95ec:	             clr.l 8(sp)
    95f0:	   /-------- bra.s 9626 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    95f2:	/--|-------> movea.l (sp),a0
    95f4:	|  |         move.l 38(a0),d1
    95f8:	|  |         move.l 8(sp),d0
    95fc:	|  |         lsl.l #3,d0
    95fe:	|  |         movea.l d1,a0
    9600:	|  |         adda.l d0,a0
    9602:	|  |         move.l (a0),d0
    9604:	|  |         cmp.l 16(sp),d0
    9608:	|  |  /----- bne.s 9622 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    960a:	|  |  |      movea.l (sp),a0
    960c:	|  |  |      move.l 38(a0),d1
    9610:	|  |  |      move.l 8(sp),d0
    9614:	|  |  |      lsl.l #3,d0
    9616:	|  |  |      movea.l d1,a0
    9618:	|  |  |      adda.l d0,a0
    961a:	|  |  |      move.l 4(a0),4(sp)
			break;
    9620:	|  |  |  /-- bra.s 9632 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    9622:	|  |  \--|-> addq.l #1,8(sp)
    9626:	|  \-----|-> movea.l (sp),a0
    9628:	|        |   move.l 16(a0),d0
    962c:	|        |   cmp.l 8(sp),d0
    9630:	\--------|-- bgt.s 95f2 <getCombinationFunction+0x1c>
		}
	}

	return num;
    9632:	         \-> move.l 4(sp),d0
}
    9636:	             lea 12(sp),sp
    963a:	             rts

0000963c <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    963c:	moveq #1,d0
}
    963e:	rts

00009640 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    9640:	subq.l #8,sp
    9642:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    9644:	move.l 16(sp),-(sp)
    9648:	jsr 6bc <get2bytes>
    964e:	addq.l #4,sp
    9650:	move.l d0,-(sp)
    9652:	jsr 9692 <loadObjectType>
    9658:	addq.l #4,sp
    965a:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    965e:	movea.l 8(sp),a0
    9662:	move.l (a0),4(sp)
    9666:	move.l 19c4c <SysBase>,d0
    966c:	movea.l d0,a6
    966e:	movea.l 4(sp),a1
    9672:	jsr -690(a6)
	r -> screenName = readString (fp);
    9676:	move.l 16(sp),-(sp)
    967a:	jsr b02 <readString>
    9680:	addq.l #4,sp
    9682:	movea.l 8(sp),a0
    9686:	move.l d0,(a0)
	return r;
    9688:	move.l 8(sp),d0
}
    968c:	movea.l (sp)+,a6
    968e:	addq.l #8,sp
    9690:	rts

00009692 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    9692:	          lea -84(sp),sp
    9696:	          move.l a6,-(sp)
    9698:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    969a:	          moveq #42,d0
    969c:	          move.l d0,84(sp)
    96a0:	          clr.l 80(sp)
    96a4:	          move.l 19c4c <SysBase>,d0
    96aa:	          movea.l d0,a6
    96ac:	          move.l 84(sp),d0
    96b0:	          move.l 80(sp),d1
    96b4:	          jsr -684(a6)
    96b8:	          move.l d0,76(sp)
    96bc:	          move.l 76(sp),d0
    96c0:	          move.l d0,72(sp)

    if (newType) {
    96c4:	/-------- beq.w 993e <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    96c8:	|         move.l 96(sp),-(sp)
    96cc:	|         jsr 42e4 <openObjectSlice>
    96d2:	|         addq.l #4,sp
    96d4:	|         tst.w d0
    96d6:	+-------- beq.w 993e <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    96da:	|         move.l 19c34 <bigDataFile>,d0
    96e0:	|         move.l d0,-(sp)
    96e2:	|         jsr 6bc <get2bytes>
    96e8:	|         addq.l #4,sp
    96ea:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    96ee:	|         move.l 19c34 <bigDataFile>,64(sp)
    96f6:	|         move.l 19c54 <DOSBase>,d0
    96fc:	|         movea.l d0,a6
    96fe:	|         move.l 64(sp),d1
    9702:	|         jsr -306(a6)
    9706:	|         move.l d0,60(sp)
    970a:	|         move.l 60(sp),d0
    970e:	|         move.l d0,d0
    9710:	|         movea.l 72(sp),a0
    9714:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    9718:	|         move.l 19c34 <bigDataFile>,56(sp)
    9720:	|         move.l 19c54 <DOSBase>,d0
    9726:	|         movea.l d0,a6
    9728:	|         move.l 56(sp),d1
    972c:	|         jsr -306(a6)
    9730:	|         move.l d0,52(sp)
    9734:	|         move.l 52(sp),d0
    9738:	|         move.l d0,d0
    973a:	|         movea.l 72(sp),a0
    973e:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    9742:	|         move.l 19c34 <bigDataFile>,48(sp)
    974a:	|         move.l 19c54 <DOSBase>,d0
    9750:	|         movea.l d0,a6
    9752:	|         move.l 48(sp),d1
    9756:	|         jsr -306(a6)
    975a:	|         move.l d0,44(sp)
    975e:	|         move.l 44(sp),d0
    9762:	|         move.l d0,d0
    9764:	|         movea.l 72(sp),a0
    9768:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    976c:	|         move.l 19c34 <bigDataFile>,40(sp)
    9774:	|         move.l 19c54 <DOSBase>,d0
    977a:	|         movea.l d0,a6
    977c:	|         move.l 40(sp),d1
    9780:	|         jsr -306(a6)
    9784:	|         move.l d0,36(sp)
    9788:	|         move.l 36(sp),d0
    978c:	|         movea.l 72(sp),a0
    9790:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    9794:	|         move.l 19c34 <bigDataFile>,32(sp)
    979c:	|         move.l 19c54 <DOSBase>,d0
    97a2:	|         movea.l d0,a6
    97a4:	|         move.l 32(sp),d1
    97a8:	|         jsr -306(a6)
    97ac:	|         move.l d0,28(sp)
    97b0:	|         move.l 28(sp),d0
    97b4:	|         movea.l 72(sp),a0
    97b8:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    97bc:	|         move.l 19c34 <bigDataFile>,d0
    97c2:	|         move.l d0,-(sp)
    97c4:	|         jsr 718 <get4bytes>
    97ca:	|         addq.l #4,sp
    97cc:	|         movea.l 72(sp),a0
    97d0:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    97d4:	|         move.l 19c34 <bigDataFile>,d0
    97da:	|         move.l d0,-(sp)
    97dc:	|         jsr 6bc <get2bytes>
    97e2:	|         addq.l #4,sp
    97e4:	|         movea.l 72(sp),a0
    97e8:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    97ec:	|         move.l 19c34 <bigDataFile>,24(sp)
    97f4:	|         move.l 19c54 <DOSBase>,d0
    97fa:	|         movea.l d0,a6
    97fc:	|         move.l 24(sp),d1
    9800:	|         jsr -306(a6)
    9804:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    9808:	|         move.l 19c34 <bigDataFile>,d0
    980e:	|         move.l d0,-(sp)
    9810:	|         jsr 7d8 <getFloat>
    9816:	|         addq.l #4,sp
            getFloat(bigDataFile);
    9818:	|         move.l 19c34 <bigDataFile>,d0
    981e:	|         move.l d0,-(sp)
    9820:	|         jsr 7d8 <getFloat>
    9826:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    9828:	|         move.l 19c34 <bigDataFile>,d0
    982e:	|         move.l d0,-(sp)
    9830:	|         jsr 6bc <get2bytes>
    9836:	|         addq.l #4,sp
    9838:	|         move.l d0,d0
    983a:	|         movea.l 72(sp),a0
    983e:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    9842:	|         move.l 19c34 <bigDataFile>,d0
    9848:	|         move.l d0,-(sp)
    984a:	|         jsr 6bc <get2bytes>
    9850:	|         addq.l #4,sp
    9852:	|         movea.l 72(sp),a0
    9856:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    985a:	|         movea.l 72(sp),a0
    985e:	|         move.l 16(a0),d0
    9862:	|  /----- beq.s 9894 <loadObjectType+0x202>
    9864:	|  |      movea.l 72(sp),a0
    9868:	|  |      move.l 16(a0),d0
    986c:	|  |      lsl.l #3,d0
    986e:	|  |      move.l d0,16(sp)
    9872:	|  |      clr.l 12(sp)
    9876:	|  |      move.l 19c4c <SysBase>,d0
    987c:	|  |      movea.l d0,a6
    987e:	|  |      move.l 16(sp),d0
    9882:	|  |      move.l 12(sp),d1
    9886:	|  |      jsr -684(a6)
    988a:	|  |      move.l d0,8(sp)
    988e:	|  |      move.l 8(sp),d0
    9892:	|  |  /-- bra.s 9896 <loadObjectType+0x204>
    9894:	|  \--|-> moveq #0,d0
    9896:	|     \-> movea.l 72(sp),a0
    989a:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    989e:	|         clr.l 88(sp)
    98a2:	|     /-- bra.s 98f2 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    98a4:	|  /--|-> move.l 19c34 <bigDataFile>,d1
    98aa:	|  |  |   movea.l 72(sp),a0
    98ae:	|  |  |   movea.l 38(a0),a0
    98b2:	|  |  |   move.l 88(sp),d0
    98b6:	|  |  |   lsl.l #3,d0
    98b8:	|  |  |   lea (0,a0,d0.l),a2
    98bc:	|  |  |   move.l d1,-(sp)
    98be:	|  |  |   jsr 6bc <get2bytes>
    98c4:	|  |  |   addq.l #4,sp
    98c6:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    98c8:	|  |  |   move.l 19c34 <bigDataFile>,d1
    98ce:	|  |  |   movea.l 72(sp),a0
    98d2:	|  |  |   movea.l 38(a0),a0
    98d6:	|  |  |   move.l 88(sp),d0
    98da:	|  |  |   lsl.l #3,d0
    98dc:	|  |  |   lea (0,a0,d0.l),a2
    98e0:	|  |  |   move.l d1,-(sp)
    98e2:	|  |  |   jsr 6bc <get2bytes>
    98e8:	|  |  |   addq.l #4,sp
    98ea:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    98ee:	|  |  |   addq.l #1,88(sp)
    98f2:	|  |  \-> movea.l 72(sp),a0
    98f6:	|  |      move.l 16(a0),d0
    98fa:	|  |      cmp.l 88(sp),d0
    98fe:	|  \----- bgt.s 98a4 <loadObjectType+0x212>
            }
            finishAccess();
    9900:	|         jsr 4114 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    9906:	|         move.l 68(sp),-(sp)
    990a:	|         jsr 411e <getNumberedString>
    9910:	|         addq.l #4,sp
    9912:	|         movea.l 72(sp),a0
    9916:	|         move.l d0,(a0)
            newType->objectNum = i;
    9918:	|         movea.l 72(sp),a0
    991c:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    9922:	|         move.l 19cfa <allObjectTypes>,d0
    9928:	|         movea.l 72(sp),a0
    992c:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    9930:	|         move.l 72(sp),19cfa <allObjectTypes>
            return newType;
    9938:	|         move.l 72(sp),d0
    993c:	|     /-- bra.s 9940 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    993e:	\-----|-> moveq #0,d0
}
    9940:	      \-> movea.l (sp)+,a2
    9942:	          movea.l (sp)+,a6
    9944:	          lea 84(sp),sp
    9948:	          rts

0000994a <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    994a:	             lea -16(sp),sp
    994e:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    9950:	             move.l #105722,16(sp)

	while (* huntRegion) {
    9958:	   /-------- bra.s 99cc <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    995a:	/--|-------> movea.l 16(sp),a0
    995e:	|  |         move.l (a0),d0
    9960:	|  |         cmp.l 24(sp),d0
    9964:	|  |  /----- bne.s 99be <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    9966:	|  |  |      movea.l 24(sp),a0
    996a:	|  |  |      move.l 8(a0),d0
    996e:	|  |  |      movea.l 16(sp),a0
    9972:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    9974:	|  |  |      movea.l 24(sp),a0
    9978:	|  |  |      move.l 38(a0),12(sp)
    997e:	|  |  |      move.l 19c4c <SysBase>,d0
    9984:	|  |  |      movea.l d0,a6
    9986:	|  |  |      movea.l 12(sp),a1
    998a:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    998e:	|  |  |      movea.l 24(sp),a0
    9992:	|  |  |      move.l (a0),8(sp)
    9996:	|  |  |      move.l 19c4c <SysBase>,d0
    999c:	|  |  |      movea.l d0,a6
    999e:	|  |  |      movea.l 8(sp),a1
    99a2:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    99a6:	|  |  |      move.l 24(sp),4(sp)
    99ac:	|  |  |      move.l 19c4c <SysBase>,d0
    99b2:	|  |  |      movea.l d0,a6
    99b4:	|  |  |      movea.l 4(sp),a1
    99b8:	|  |  |      jsr -690(a6)
			return;
    99bc:	|  |  |  /-- bra.s 99e2 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    99be:	|  |  \--|-> movea.l 16(sp),a0
    99c2:	|  |     |   move.l (a0),d0
    99c4:	|  |     |   move.l d0,d1
    99c6:	|  |     |   addq.l #8,d1
    99c8:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    99cc:	|  \-----|-> movea.l 16(sp),a0
    99d0:	|        |   move.l (a0),d0
    99d2:	\--------|-- bne.s 995a <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    99d4:	         |   pea 15c8a <main_sludge.c.2f5c5368+0x3a0>
    99da:	         |   jsr 127a4 <KPrintF>
    99e0:	         |   addq.l #4,sp
}
    99e2:	         \-> movea.l (sp)+,a6
    99e4:	             lea 16(sp),sp
    99e8:	             rts

000099ea <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    99ea:	movea.l 4(sp),a0
    99ee:	move.l 4(a0),d0
    99f2:	move.l 8(sp),-(sp)
    99f6:	move.l d0,-(sp)
    99f8:	jsr 8d0 <put2bytes>
    99fe:	addq.l #8,sp
	writeString (r -> screenName, fp);
    9a00:	movea.l 4(sp),a0
    9a04:	move.l (a0),d0
    9a06:	move.l 8(sp),-(sp)
    9a0a:	move.l d0,-(sp)
    9a0c:	jsr bd8 <writeString>
    9a12:	addq.l #8,sp
    9a14:	nop
    9a16:	rts

00009a18 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    9a18:	                         lea -112(sp),sp
    9a1c:	                         move.l a6,-(sp)
    9a1e:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    9a20:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    9a24:	                         move.w 19d00 <saveEncoding>,d0
    9a2a:	                  /----- beq.s 9a34 <fileToStack+0x1c>
    9a2c:	                  |      move.l #89264,d0
    9a32:	                  |  /-- bra.s 9a3a <fileToStack+0x22>
    9a34:	                  \--|-> move.l #89290,d0
    9a3a:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    9a3e:	                         move.l 124(sp),112(sp)
    9a44:	                         move.l #1005,108(sp)
    9a4c:	                         move.l 19c54 <DOSBase>,d0
    9a52:	                         movea.l d0,a6
    9a54:	                         move.l 112(sp),d1
    9a58:	                         move.l 108(sp),d2
    9a5c:	                         jsr -30(a6)
    9a60:	                         move.l d0,104(sp)
    9a64:	                         move.l 104(sp),d0
    9a68:	                         move.l d0,100(sp)
    if (!fp) {
    9a6c:	                     /-- bne.s 9a86 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    9a6e:	                     |   move.l 124(sp),-(sp)
    9a72:	                     |   pea 15ce1 <main_sludge.c.2f5c5368+0x3f7>
    9a78:	                     |   jsr 127a4 <KPrintF>
    9a7e:	                     |   addq.l #8,sp
        return FALSE;
    9a80:	                     |   clr.w d0
    9a82:	/--------------------|-- bra.w 9d7c <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    9a86:	|                    \-> move.w 19d00 <saveEncoding>,d0
    9a8c:	|                        move.l d0,d0
    9a8e:	|                        move.b d0,19cfe <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    9a94:	|                        move.w 19d00 <saveEncoding>,d0
    9a9a:	|                        lsr.w #8,d0
    9a9c:	|                        move.l d0,d0
    9a9e:	|                        move.b d0,19cff <encode2>

    while (*checker) {
    9aa4:	|                 /----- bra.s 9b08 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    9aa6:	|              /--|----> move.l 100(sp),30(sp)
    9aac:	|              |  |      move.l 19c54 <DOSBase>,d0
    9ab2:	|              |  |      movea.l d0,a6
    9ab4:	|              |  |      move.l 30(sp),d1
    9ab8:	|              |  |      jsr -306(a6)
    9abc:	|              |  |      move.l d0,26(sp)
    9ac0:	|              |  |      move.l 26(sp),d1
    9ac4:	|              |  |      movea.l 116(sp),a0
    9ac8:	|              |  |      move.b (a0),d0
    9aca:	|              |  |      ext.w d0
    9acc:	|              |  |      movea.w d0,a0
    9ace:	|              |  |      cmpa.l d1,a0
    9ad0:	|              |  |  /-- beq.s 9b04 <fileToStack+0xec>
            Close(fp);
    9ad2:	|              |  |  |   move.l 100(sp),22(sp)
    9ad8:	|              |  |  |   move.l 19c54 <DOSBase>,d0
    9ade:	|              |  |  |   movea.l d0,a6
    9ae0:	|              |  |  |   move.l 22(sp),d1
    9ae4:	|              |  |  |   jsr -36(a6)
    9ae8:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    9aec:	|              |  |  |   move.l 124(sp),-(sp)
    9af0:	|              |  |  |   pea 15cee <main_sludge.c.2f5c5368+0x404>
    9af6:	|              |  |  |   jsr 127a4 <KPrintF>
    9afc:	|              |  |  |   addq.l #8,sp
            return FALSE;
    9afe:	|              |  |  |   clr.w d0
    9b00:	+--------------|--|--|-- bra.w 9d7c <fileToStack+0x364>
        }
        checker++;
    9b04:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    9b08:	|              |  \----> movea.l 116(sp),a0
    9b0c:	|              |         move.b (a0),d0
    9b0e:	|              \-------- bne.s 9aa6 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    9b10:	|                        move.w 19d00 <saveEncoding>,d0
    9b16:	|  /-------------------- beq.s 9b8a <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    9b18:	|  |                     move.l 100(sp),-(sp)
    9b1c:	|  |                     jsr 9d86 <readStringEncoded>
    9b22:	|  |                     addq.l #4,sp
    9b24:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    9b28:	|  |                     pea 15d2f <main_sludge.c.2f5c5368+0x445>
    9b2e:	|  |                     move.l 100(sp),-(sp)
    9b32:	|  |                     jsr fbfc <strcmp>
    9b38:	|  |                     addq.l #8,sp
    9b3a:	|  |                     tst.l d0
    9b3c:	|  |                 /-- beq.s 9b70 <fileToStack+0x158>
            Close(fp);
    9b3e:	|  |                 |   move.l 100(sp),88(sp)
    9b44:	|  |                 |   move.l 19c54 <DOSBase>,d0
    9b4a:	|  |                 |   movea.l d0,a6
    9b4c:	|  |                 |   move.l 88(sp),d1
    9b50:	|  |                 |   jsr -36(a6)
    9b54:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    9b58:	|  |                 |   move.l 124(sp),-(sp)
    9b5c:	|  |                 |   pea 15d3e <main_sludge.c.2f5c5368+0x454>
    9b62:	|  |                 |   jsr 127a4 <KPrintF>
    9b68:	|  |                 |   addq.l #8,sp
            return FALSE;
    9b6a:	|  |                 |   clr.w d0
    9b6c:	+--|-----------------|-- bra.w 9d7c <fileToStack+0x364>
        }
        FreeVec(checker);
    9b70:	|  |                 \-> move.l 96(sp),92(sp)
    9b76:	|  |                     move.l 19c4c <SysBase>,d0
    9b7c:	|  |                     movea.l d0,a6
    9b7e:	|  |                     movea.l 92(sp),a1
    9b82:	|  |                     jsr -690(a6)
        checker = NULL;
    9b86:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    9b8a:	|  >-------------------> move.w 19d00 <saveEncoding>,d0
    9b90:	|  |     /-------------- beq.w 9cc4 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    9b94:	|  |     |               move.l 100(sp),76(sp)
    9b9a:	|  |     |               move.l 19c54 <DOSBase>,d0
    9ba0:	|  |     |               movea.l d0,a6
    9ba2:	|  |     |               move.l 76(sp),d1
    9ba6:	|  |     |               jsr -306(a6)
    9baa:	|  |     |               move.l d0,72(sp)
    9bae:	|  |     |               move.l 72(sp),d0
    9bb2:	|  |     |               move.b 19cfe <encode1>,d1
    9bb8:	|  |     |               ext.w d1
    9bba:	|  |     |               ext.l d1
    9bbc:	|  |     |               move.l d0,d2
    9bbe:	|  |     |               eor.l d1,d2
    9bc0:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    9bc4:	|  |     |               moveq #-1,d0
    9bc6:	|  |     |               cmp.l 68(sp),d0
    9bca:	|  |  /--|-------------- beq.w 9d5a <fileToStack+0x342>

            char i = (char) tmp;
    9bce:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    9bd4:	|  |  |  |               move.b 67(sp),d0
    9bd8:	|  |  |  |               ext.w d0
    9bda:	|  |  |  |               movea.w d0,a0
    9bdc:	|  |  |  |               moveq #2,d2
    9bde:	|  |  |  |               cmp.l a0,d2
    9be0:	|  |  |  |     /-------- beq.s 9c5c <fileToStack+0x244>
    9be2:	|  |  |  |     |         moveq #2,d0
    9be4:	|  |  |  |     |         cmp.l a0,d0
    9be6:	|  |  |  |  /--|-------- blt.w 9c92 <fileToStack+0x27a>
    9bea:	|  |  |  |  |  |         cmpa.w #0,a0
    9bee:	|  |  |  |  |  |     /-- beq.s 9bfa <fileToStack+0x1e2>
    9bf0:	|  |  |  |  |  |     |   moveq #1,d2
    9bf2:	|  |  |  |  |  |     |   cmp.l a0,d2
    9bf4:	|  |  |  |  |  |  /--|-- beq.s 9c36 <fileToStack+0x21e>
    9bf6:	|  |  |  |  +--|--|--|-- bra.w 9c92 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    9bfa:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    9bfe:	|  |  |  |  |  |  |      jsr 9d86 <readStringEncoded>
    9c04:	|  |  |  |  |  |  |      addq.l #4,sp
    9c06:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    9c0a:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    9c0e:	|  |  |  |  |  |  |      lea 14(sp),a0
    9c12:	|  |  |  |  |  |  |      move.l a0,-(sp)
    9c14:	|  |  |  |  |  |  |      jsr 10972 <makeTextVar>
    9c1a:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    9c1c:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    9c22:	|  |  |  |  |  |  |      move.l 19c4c <SysBase>,d0
    9c28:	|  |  |  |  |  |  |      movea.l d0,a6
    9c2a:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    9c2e:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    9c32:	|  |  |  |  |  |  |  /-- bra.w 9cea <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    9c36:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    9c3a:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    9c40:	|  |  |  |  |  |     |   addq.l #4,sp
    9c42:	|  |  |  |  |  |     |   move.l d0,-(sp)
    9c44:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    9c48:	|  |  |  |  |  |     |   lea 18(sp),a0
    9c4c:	|  |  |  |  |  |     |   move.l a0,-(sp)
    9c4e:	|  |  |  |  |  |     |   jsr 11042 <setVariable>
    9c54:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    9c58:	|  |  |  |  |  |     +-- bra.w 9cea <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    9c5c:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    9c62:	|  |  |  |  |        |   move.l 19c54 <DOSBase>,d0
    9c68:	|  |  |  |  |        |   movea.l d0,a6
    9c6a:	|  |  |  |  |        |   move.l 62(sp),d1
    9c6e:	|  |  |  |  |        |   jsr -306(a6)
    9c72:	|  |  |  |  |        |   move.l d0,58(sp)
    9c76:	|  |  |  |  |        |   move.l 58(sp),d0
    9c7a:	|  |  |  |  |        |   move.l d0,-(sp)
    9c7c:	|  |  |  |  |        |   pea 1 <_start+0x1>
    9c80:	|  |  |  |  |        |   lea 18(sp),a0
    9c84:	|  |  |  |  |        |   move.l a0,-(sp)
    9c86:	|  |  |  |  |        |   jsr 11042 <setVariable>
    9c8c:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    9c90:	|  |  |  |  |        +-- bra.s 9cea <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    9c92:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    9c96:	|  |  |  |           |   pea 15dc0 <main_sludge.c.2f5c5368+0x4d6>
    9c9c:	|  |  |  |           |   jsr 127a4 <KPrintF>
    9ca2:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    9ca4:	|  |  |  |           |   move.l 100(sp),46(sp)
    9caa:	|  |  |  |           |   move.l 19c54 <DOSBase>,d0
    9cb0:	|  |  |  |           |   movea.l d0,a6
    9cb2:	|  |  |  |           |   move.l 46(sp),d1
    9cb6:	|  |  |  |           |   jsr -36(a6)
    9cba:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    9cbe:	|  |  |  |           |   clr.w d0
    9cc0:	+--|--|--|-----------|-- bra.w 9d7c <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    9cc4:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    9cc8:	|  |  |              |   jsr 9e4c <readTextPlain>
    9cce:	|  |  |              |   addq.l #4,sp
    9cd0:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    9cd4:	|  |  |        /-----|-- beq.w 9d5e <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    9cd8:	|  |  |        |     |   move.l 80(sp),-(sp)
    9cdc:	|  |  |        |     |   lea 14(sp),a0
    9ce0:	|  |  |        |     |   move.l a0,-(sp)
    9ce2:	|  |  |        |     |   jsr 10972 <makeTextVar>
    9ce8:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    9cea:	|  |  |        |     \-> movea.l 128(sp),a0
    9cee:	|  |  |        |         move.l (a0),d0
    9cf0:	|  |  |        |  /----- bne.s 9d20 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    9cf2:	|  |  |        |  |      move.l 128(sp),d0
    9cf6:	|  |  |        |  |      move.l d0,-(sp)
    9cf8:	|  |  |        |  |      lea 14(sp),a0
    9cfc:	|  |  |        |  |      move.l a0,-(sp)
    9cfe:	|  |  |        |  |      jsr 10012 <addVarToStackQuick>
    9d04:	|  |  |        |  |      addq.l #8,sp
    9d06:	|  |  |        |  |      tst.w d0
    9d08:	|  |  |        |  |  /-- bne.s 9d0e <fileToStack+0x2f6>
    9d0a:	|  |  |        |  |  |   clr.w d0
    9d0c:	+--|--|--------|--|--|-- bra.s 9d7c <fileToStack+0x364>
            sH->last = sH->first;
    9d0e:	|  |  |        |  |  \-> movea.l 128(sp),a0
    9d12:	|  |  |        |  |      move.l (a0),d0
    9d14:	|  |  |        |  |      movea.l 128(sp),a0
    9d18:	|  |  |        |  |      move.l d0,4(a0)
    9d1c:	|  +--|--------|--|----- bra.w 9b8a <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    9d20:	|  |  |        |  \----> movea.l 128(sp),a0
    9d24:	|  |  |        |         move.l 4(a0),d0
    9d28:	|  |  |        |         addq.l #8,d0
    9d2a:	|  |  |        |         move.l d0,-(sp)
    9d2c:	|  |  |        |         lea 14(sp),a0
    9d30:	|  |  |        |         move.l a0,-(sp)
    9d32:	|  |  |        |         jsr 10012 <addVarToStackQuick>
    9d38:	|  |  |        |         addq.l #8,sp
    9d3a:	|  |  |        |         tst.w d0
    9d3c:	|  |  |        |     /-- bne.s 9d42 <fileToStack+0x32a>
    9d3e:	|  |  |        |     |   clr.w d0
    9d40:	+--|--|--------|-----|-- bra.s 9d7c <fileToStack+0x364>
            sH->last = sH->last->next;
    9d42:	|  |  |        |     \-> movea.l 128(sp),a0
    9d46:	|  |  |        |         movea.l 4(a0),a0
    9d4a:	|  |  |        |         move.l 8(a0),d0
    9d4e:	|  |  |        |         movea.l 128(sp),a0
    9d52:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    9d56:	|  \--|--------|-------- bra.w 9b8a <fileToStack+0x172>
            if (tmp == -1) break;
    9d5a:	|     \--------|-------> nop
    9d5c:	|              |     /-- bra.s 9d60 <fileToStack+0x348>
            if (!line) break;
    9d5e:	|              \-----|-> nop
        }
    }
    Close(fp);
    9d60:	|                    \-> move.l 100(sp),38(sp)
    9d66:	|                        move.l 19c54 <DOSBase>,d0
    9d6c:	|                        movea.l d0,a6
    9d6e:	|                        move.l 38(sp),d1
    9d72:	|                        jsr -36(a6)
    9d76:	|                        move.l d0,34(sp)
    return TRUE;
    9d7a:	|                        moveq #1,d0
}
    9d7c:	\----------------------> move.l (sp)+,d2
    9d7e:	                         movea.l (sp)+,a6
    9d80:	                         lea 112(sp),sp
    9d84:	                         rts

00009d86 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    9d86:	          lea -32(sp),sp
    9d8a:	          move.l a6,-(sp)
    9d8c:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    9d8e:	          move.l 44(sp),-(sp)
    9d92:	          jsr 6bc <get2bytes>
    9d98:	          addq.l #4,sp
    9d9a:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    9d9e:	          move.l 32(sp),d0
    9da2:	          addq.l #1,d0
    9da4:	          move.l d0,28(sp)
    9da8:	          clr.l 24(sp)
    9dac:	          move.l 19c4c <SysBase>,d0
    9db2:	          movea.l d0,a6
    9db4:	          move.l 28(sp),d0
    9db8:	          move.l 24(sp),d1
    9dbc:	          jsr -684(a6)
    9dc0:	          move.l d0,20(sp)
    9dc4:	          move.l 20(sp),d0
    9dc8:	          move.l d0,16(sp)
    if (!s) return NULL;
    9dcc:	      /-- bne.s 9dd2 <readStringEncoded+0x4c>
    9dce:	      |   moveq #0,d0
    9dd0:	/-----|-- bra.s 9e42 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    9dd2:	|     \-> clr.l 36(sp)
    9dd6:	|     /-- bra.s 9e28 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    9dd8:	|  /--|-> move.l 44(sp),12(sp)
    9dde:	|  |  |   move.l 19c54 <DOSBase>,d0
    9de4:	|  |  |   movea.l d0,a6
    9de6:	|  |  |   move.l 12(sp),d1
    9dea:	|  |  |   jsr -306(a6)
    9dee:	|  |  |   move.l d0,8(sp)
    9df2:	|  |  |   move.l 8(sp),d0
    9df6:	|  |  |   move.l d0,d1
    9df8:	|  |  |   move.b 19cfe <encode1>,d2
    9dfe:	|  |  |   move.l 36(sp),d0
    9e02:	|  |  |   movea.l 16(sp),a0
    9e06:	|  |  |   adda.l d0,a0
    9e08:	|  |  |   move.b d1,d0
    9e0a:	|  |  |   eor.b d2,d0
    9e0c:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    9e0e:	|  |  |   move.b 19cfe <encode1>,d0
    9e14:	|  |  |   move.b d0,d1
    9e16:	|  |  |   move.b 19cff <encode2>,d0
    9e1c:	|  |  |   add.b d1,d0
    9e1e:	|  |  |   move.b d0,19cfe <encode1>
    for (a = 0; a < len; a++) {
    9e24:	|  |  |   addq.l #1,36(sp)
    9e28:	|  |  \-> move.l 36(sp),d0
    9e2c:	|  |      cmp.l 32(sp),d0
    9e30:	|  \----- blt.s 9dd8 <readStringEncoded+0x52>
    }
    s[len] = 0;
    9e32:	|         move.l 32(sp),d0
    9e36:	|         movea.l 16(sp),a0
    9e3a:	|         adda.l d0,a0
    9e3c:	|         clr.b (a0)
    return s;
    9e3e:	|         move.l 16(sp),d0
}
    9e42:	\-------> move.l (sp)+,d2
    9e44:	          movea.l (sp)+,a6
    9e46:	          lea 32(sp),sp
    9e4a:	          rts

00009e4c <readTextPlain>:

char *readTextPlain(BPTR fp) {
    9e4c:	             lea -104(sp),sp
    9e50:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    9e54:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    9e58:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    9e5e:	             move.l 124(sp),106(sp)
    9e64:	             clr.l 102(sp)
    9e68:	             clr.l 98(sp)
    9e6c:	             move.l 19c54 <DOSBase>,d0
    9e72:	             movea.l d0,a6
    9e74:	             move.l 106(sp),d1
    9e78:	             move.l 102(sp),d2
    9e7c:	             move.l 98(sp),d3
    9e80:	             jsr -66(a6)
    9e84:	             move.l d0,94(sp)
    9e88:	             move.l 94(sp),d0
    9e8c:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    9e90:	   /-------- bra.s 9ed4 <readTextPlain+0x88>
        tmp = FGetC(fp);
    9e92:	/--|-------> move.l 124(sp),22(sp)
    9e98:	|  |         move.l 19c54 <DOSBase>,d0
    9e9e:	|  |         movea.l d0,a6
    9ea0:	|  |         move.l 22(sp),d1
    9ea4:	|  |         jsr -306(a6)
    9ea8:	|  |         move.l d0,18(sp)
    9eac:	|  |         move.l 18(sp),d0
    9eb0:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    9eb4:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    9eba:	|  |         cmpi.b #10,17(sp)
    9ec0:	|  |  /----- beq.s 9eca <readTextPlain+0x7e>
    9ec2:	|  |  |      moveq #-1,d0
    9ec4:	|  |  |      cmp.l 110(sp),d0
    9ec8:	|  |  |  /-- bne.s 9ed0 <readTextPlain+0x84>
            keepGoing = FALSE;
    9eca:	|  |  \--|-> clr.w 114(sp)
    9ece:	|  +-----|-- bra.s 9ed4 <readTextPlain+0x88>
        } else {
            stringSize++;
    9ed0:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    9ed4:	|  \-------> tst.w 114(sp)
    9ed8:	\----------- bne.s 9e92 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    9eda:	             tst.l 116(sp)
    9ede:	         /-- bne.s 9eee <readTextPlain+0xa2>
    9ee0:	         |   moveq #-1,d0
    9ee2:	         |   cmp.l 110(sp),d0
    9ee6:	         +-- bne.s 9eee <readTextPlain+0xa2>
        return NULL;
    9ee8:	         |   moveq #0,d0
    9eea:	      /--|-- bra.w 9fd4 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    9eee:	      |  \-> move.l 124(sp),86(sp)
    9ef4:	      |      move.l 90(sp),82(sp)
    9efa:	      |      moveq #-1,d0
    9efc:	      |      move.l d0,78(sp)
    9f00:	      |      move.l 19c54 <DOSBase>,d0
    9f06:	      |      movea.l d0,a6
    9f08:	      |      move.l 86(sp),d1
    9f0c:	      |      move.l 82(sp),d2
    9f10:	      |      move.l 78(sp),d3
    9f14:	      |      jsr -66(a6)
    9f18:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    9f1c:	      |      move.l 116(sp),d0
    9f20:	      |      addq.l #1,d0
    9f22:	      |      move.l d0,70(sp)
    9f26:	      |      clr.l 66(sp)
    9f2a:	      |      move.l 19c4c <SysBase>,d0
    9f30:	      |      movea.l d0,a6
    9f32:	      |      move.l 70(sp),d0
    9f36:	      |      move.l 66(sp),d1
    9f3a:	      |      jsr -684(a6)
    9f3e:	      |      move.l d0,62(sp)
    9f42:	      |      move.l 62(sp),d0
    9f46:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    9f4a:	      |  /-- bne.s 9f52 <readTextPlain+0x106>
    9f4c:	      |  |   moveq #0,d0
    9f4e:	      +--|-- bra.w 9fd4 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    9f52:	      |  \-> move.l 124(sp),54(sp)
    9f58:	      |      move.l 58(sp),50(sp)
    9f5e:	      |      moveq #1,d0
    9f60:	      |      move.l d0,46(sp)
    9f64:	      |      move.l 116(sp),42(sp)
    9f6a:	      |      move.l 19c54 <DOSBase>,d0
    9f70:	      |      movea.l d0,a6
    9f72:	      |      move.l 54(sp),d1
    9f76:	      |      move.l 50(sp),d2
    9f7a:	      |      move.l 46(sp),d3
    9f7e:	      |      move.l 42(sp),d4
    9f82:	      |      jsr -324(a6)
    9f86:	      |      move.l d0,38(sp)
    9f8a:	      |      move.l 38(sp),d0
    9f8e:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    9f92:	      |      move.l 34(sp),d0
    9f96:	      |      cmp.l 116(sp),d0
    9f9a:	      |  /-- beq.s 9faa <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    9f9c:	      |  |   pea 15df5 <main_sludge.c.2f5c5368+0x50b>
    9fa2:	      |  |   jsr 127a4 <KPrintF>
    9fa8:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    9faa:	      |  \-> move.l 124(sp),30(sp)
    9fb0:	      |      move.l 19c54 <DOSBase>,d0
    9fb6:	      |      movea.l d0,a6
    9fb8:	      |      move.l 30(sp),d1
    9fbc:	      |      jsr -306(a6)
    9fc0:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    9fc4:	      |      move.l 116(sp),d0
    9fc8:	      |      movea.l 58(sp),a0
    9fcc:	      |      adda.l d0,a0
    9fce:	      |      clr.b (a0)
    }

    return reply;
    9fd0:	      |      move.l 58(sp),d0
}
    9fd4:	      \----> movem.l (sp)+,d2-d4/a6
    9fd8:	             lea 104(sp),sp
    9fdc:	             rts

00009fde <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    9fde:	                      lea -144(sp),sp
    9fe2:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    9fe6:	                      move.l 160(sp),148(sp)
    9fec:	                      move.l #1006,144(sp)
    9ff4:	                      move.l 19c54 <DOSBase>,d0
    9ffa:	                      movea.l d0,a6
    9ffc:	                      move.l 148(sp),d1
    a000:	                      move.l 144(sp),d2
    a004:	                      jsr -30(a6)
    a008:	                      move.l d0,140(sp)
    a00c:	                      move.l 140(sp),d0
    a010:	                      move.l d0,136(sp)

    if (!fp) {
    a014:	                  /-- bne.s a02e <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    a016:	                  |   move.l 160(sp),-(sp)
    a01a:	                  |   pea 15e16 <main_sludge.c.2f5c5368+0x52c>
    a020:	                  |   jsr 127a4 <KPrintF>
    a026:	                  |   addq.l #8,sp
        return FALSE;
    a028:	                  |   clr.w d0
    a02a:	/-----------------|-- bra.w a2ea <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    a02e:	|                 \-> movea.l 164(sp),a0
    a032:	|                     movea.l 4(a0),a0
    a036:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    a03a:	|                     move.w 19d00 <saveEncoding>,d0
    a040:	|                     move.l d0,d0
    a042:	|                     move.b d0,19cfe <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    a048:	|                     move.w 19d00 <saveEncoding>,d0
    a04e:	|                     lsr.w #8,d0
    a050:	|                     move.l d0,d0
    a052:	|                     move.b d0,19cff <encode2>

    if (saveEncoding) {
    a058:	|                     move.w 19d00 <saveEncoding>,d0
    a05e:	|                 /-- beq.s a0b0 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    a060:	|                 |   move.l 136(sp),116(sp)
    a066:	|                 |   move.l #89264,112(sp)
    a06e:	|                 |   moveq #99,d0
    a070:	|                 |   not.b d0
    a072:	|                 |   add.l sp,d0
    a074:	|                 |   addi.l #-144,d0
    a07a:	|                 |   move.l d0,108(sp)
    a07e:	|                 |   move.l 19c54 <DOSBase>,d0
    a084:	|                 |   movea.l d0,a6
    a086:	|                 |   move.l 116(sp),d1
    a08a:	|                 |   move.l 112(sp),d2
    a08e:	|                 |   move.l 108(sp),d3
    a092:	|                 |   jsr -354(a6)
    a096:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    a09a:	|                 |   move.l 136(sp),-(sp)
    a09e:	|                 |   pea 15d2f <main_sludge.c.2f5c5368+0x445>
    a0a4:	|                 |   jsr a2f4 <writeStringEncoded>
    a0aa:	|                 |   addq.l #8,sp
    a0ac:	|  /--------------|-- bra.w a2c2 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    a0b0:	|  |              \-> move.l 136(sp),132(sp)
    a0b6:	|  |                  move.l #89290,128(sp)
    a0be:	|  |                  moveq #99,d1
    a0c0:	|  |                  not.b d1
    a0c2:	|  |                  add.l sp,d1
    a0c4:	|  |                  addi.l #-144,d1
    a0ca:	|  |                  move.l d1,124(sp)
    a0ce:	|  |                  move.l 19c54 <DOSBase>,d0
    a0d4:	|  |                  movea.l d0,a6
    a0d6:	|  |                  move.l 132(sp),d1
    a0da:	|  |                  move.l 128(sp),d2
    a0de:	|  |                  move.l 124(sp),d3
    a0e2:	|  |                  jsr -354(a6)
    a0e6:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    a0ea:	|  +----------------- bra.w a2c2 <stackToFile+0x2e4>
        if (saveEncoding) {
    a0ee:	|  |  /-------------> move.w 19d00 <saveEncoding>,d0
    a0f4:	|  |  |     /-------- beq.w a246 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    a0f8:	|  |  |     |         movea.l 152(sp),a0
    a0fc:	|  |  |     |         move.l (a0),d0
    a0fe:	|  |  |     |         moveq #1,d1
    a100:	|  |  |     |         cmp.l d0,d1
    a102:	|  |  |     |     /-- beq.s a152 <stackToFile+0x174>
    a104:	|  |  |     |     |   moveq #3,d1
    a106:	|  |  |     |     |   cmp.l d0,d1
    a108:	|  |  |     |  /--|-- bne.w a214 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    a10c:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    a112:	|  |  |     |  |  |   move.b 19cfe <encode1>,d0
    a118:	|  |  |     |  |  |   ext.w d0
    a11a:	|  |  |     |  |  |   movea.w d0,a0
    a11c:	|  |  |     |  |  |   move.l a0,72(sp)
    a120:	|  |  |     |  |  |   move.l 19c54 <DOSBase>,d0
    a126:	|  |  |     |  |  |   movea.l d0,a6
    a128:	|  |  |     |  |  |   move.l 76(sp),d1
    a12c:	|  |  |     |  |  |   move.l 72(sp),d2
    a130:	|  |  |     |  |  |   jsr -312(a6)
    a134:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    a138:	|  |  |     |  |  |   movea.l 152(sp),a0
    a13c:	|  |  |     |  |  |   move.l 4(a0),d0
    a140:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    a144:	|  |  |     |  |  |   move.l d0,-(sp)
    a146:	|  |  |     |  |  |   jsr a2f4 <writeStringEncoded>
    a14c:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    a14e:	|  |  |  /--|--|--|-- bra.w a2b8 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    a152:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    a156:	|  |  |  |  |  |      move.l 4(a0),d0
    a15a:	|  |  |  |  |  |  /-- bmi.s a1ca <stackToFile+0x1ec>
    a15c:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    a160:	|  |  |  |  |  |  |   move.l 4(a0),d0
    a164:	|  |  |  |  |  |  |   cmpi.l #255,d0
    a16a:	|  |  |  |  |  |  +-- bgt.s a1ca <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    a16c:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    a172:	|  |  |  |  |  |  |   move.b 19cfe <encode1>,d0
    a178:	|  |  |  |  |  |  |   eori.b #2,d0
    a17c:	|  |  |  |  |  |  |   ext.w d0
    a17e:	|  |  |  |  |  |  |   movea.w d0,a0
    a180:	|  |  |  |  |  |  |   move.l a0,60(sp)
    a184:	|  |  |  |  |  |  |   move.l 19c54 <DOSBase>,d0
    a18a:	|  |  |  |  |  |  |   movea.l d0,a6
    a18c:	|  |  |  |  |  |  |   move.l 64(sp),d1
    a190:	|  |  |  |  |  |  |   move.l 60(sp),d2
    a194:	|  |  |  |  |  |  |   jsr -312(a6)
    a198:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    a19c:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    a1a2:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    a1a6:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    a1ac:	|  |  |  |  |  |  |   move.l 19c54 <DOSBase>,d0
    a1b2:	|  |  |  |  |  |  |   movea.l d0,a6
    a1b4:	|  |  |  |  |  |  |   move.l 52(sp),d1
    a1b8:	|  |  |  |  |  |  |   move.l 48(sp),d2
    a1bc:	|  |  |  |  |  |  |   jsr -312(a6)
    a1c0:	|  |  |  |  |  |  |   move.l d0,44(sp)
    a1c4:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    a1c6:	|  |  |  +--|--|--|-- bra.w a2b8 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    a1ca:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    a1d0:	|  |  |  |  |  |      move.b 19cfe <encode1>,d0
    a1d6:	|  |  |  |  |  |      eori.b #1,d0
    a1da:	|  |  |  |  |  |      ext.w d0
    a1dc:	|  |  |  |  |  |      movea.w d0,a0
    a1de:	|  |  |  |  |  |      move.l a0,36(sp)
    a1e2:	|  |  |  |  |  |      move.l 19c54 <DOSBase>,d0
    a1e8:	|  |  |  |  |  |      movea.l d0,a6
    a1ea:	|  |  |  |  |  |      move.l 40(sp),d1
    a1ee:	|  |  |  |  |  |      move.l 36(sp),d2
    a1f2:	|  |  |  |  |  |      jsr -312(a6)
    a1f6:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    a1fa:	|  |  |  |  |  |      movea.l 152(sp),a0
    a1fe:	|  |  |  |  |  |      move.l 4(a0),d0
    a202:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    a206:	|  |  |  |  |  |      move.l d0,-(sp)
    a208:	|  |  |  |  |  |      jsr 958 <put4bytes>
    a20e:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    a210:	|  |  |  +--|--|----- bra.w a2b8 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    a214:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    a218:	|  |  |  |  |         pea 15e28 <main_sludge.c.2f5c5368+0x53e>
    a21e:	|  |  |  |  |         jsr 127a4 <KPrintF>
    a224:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    a226:	|  |  |  |  |         move.l 136(sp),28(sp)
    a22c:	|  |  |  |  |         move.l 19c54 <DOSBase>,d0
    a232:	|  |  |  |  |         movea.l d0,a6
    a234:	|  |  |  |  |         move.l 28(sp),d1
    a238:	|  |  |  |  |         jsr -36(a6)
    a23c:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    a240:	|  |  |  |  |         clr.w d0
    a242:	+--|--|--|--|-------- bra.w a2ea <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    a246:	|  |  |  |  \-------> move.l 152(sp),d0
    a24a:	|  |  |  |            move.l d0,-(sp)
    a24c:	|  |  |  |            jsr 10d26 <getTextFromAnyVar>
    a252:	|  |  |  |            addq.l #4,sp
    a254:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    a258:	|  |  |  |     /----- beq.s a2cc <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    a25a:	|  |  |  |     |      movea.l 100(sp),a0
    a25e:	|  |  |  |     |      move.b (a0),d0
    a260:	|  |  |  |     |      ext.w d0
    a262:	|  |  |  |     |      movea.w d0,a0
    a264:	|  |  |  |     |      move.l a0,12(sp)
    a268:	|  |  |  |     |      move.l 136(sp),96(sp)
    a26e:	|  |  |  |     |      move.l #89732,92(sp)
    a276:	|  |  |  |     |      moveq #99,d0
    a278:	|  |  |  |     |      not.b d0
    a27a:	|  |  |  |     |      add.l sp,d0
    a27c:	|  |  |  |     |      addi.l #-144,d0
    a282:	|  |  |  |     |      move.l d0,88(sp)
    a286:	|  |  |  |     |      move.l 19c54 <DOSBase>,d0
    a28c:	|  |  |  |     |      movea.l d0,a6
    a28e:	|  |  |  |     |      move.l 96(sp),d1
    a292:	|  |  |  |     |      move.l 92(sp),d2
    a296:	|  |  |  |     |      move.l 88(sp),d3
    a29a:	|  |  |  |     |      jsr -354(a6)
    a29e:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    a2a2:	|  |  |  |     |      move.l 100(sp),80(sp)
    a2a8:	|  |  |  |     |      move.l 19c4c <SysBase>,d0
    a2ae:	|  |  |  |     |      movea.l d0,a6
    a2b0:	|  |  |  |     |      movea.l 80(sp),a1
    a2b4:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    a2b8:	|  |  |  \-----|----> movea.l 152(sp),a0
    a2bc:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    a2c2:	|  \--|--------|----> tst.l 152(sp)
    a2c6:	|     \--------|----- bne.w a0ee <stackToFile+0x110>
    a2ca:	|              |  /-- bra.s a2ce <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    a2cc:	|              \--|-> nop
    }
    Close(fp);
    a2ce:	|                 \-> move.l 136(sp),20(sp)
    a2d4:	|                     move.l 19c54 <DOSBase>,d0
    a2da:	|                     movea.l d0,a6
    a2dc:	|                     move.l 20(sp),d1
    a2e0:	|                     jsr -36(a6)
    a2e4:	|                     move.l d0,16(sp)
    return TRUE;
    a2e8:	|                     moveq #1,d0
}
    a2ea:	\-------------------> movem.l (sp)+,d2-d3/a6
    a2ee:	                      lea 144(sp),sp
    a2f2:	                      rts

0000a2f4 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    a2f4:	       lea -20(sp),sp
    a2f8:	       move.l a6,-(sp)
    a2fa:	       move.l d2,-(sp)
	int a, len = strlen (s);
    a2fc:	       move.l 32(sp),-(sp)
    a300:	       jsr fc3c <strlen>
    a306:	       addq.l #4,sp
    a308:	       move.l d0,20(sp)

	put2bytes (len, fp);
    a30c:	       move.l 36(sp),-(sp)
    a310:	       move.l 24(sp),-(sp)
    a314:	       jsr 8d0 <put2bytes>
    a31a:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    a31c:	       clr.l 24(sp)
    a320:	   /-- bra.s a376 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    a322:	/--|-> move.l 36(sp),16(sp)
    a328:	|  |   move.l 24(sp),d0
    a32c:	|  |   movea.l 32(sp),a0
    a330:	|  |   adda.l d0,a0
    a332:	|  |   move.b (a0),d1
    a334:	|  |   move.b 19cfe <encode1>,d0
    a33a:	|  |   eor.b d1,d0
    a33c:	|  |   ext.w d0
    a33e:	|  |   movea.w d0,a0
    a340:	|  |   move.l a0,12(sp)
    a344:	|  |   move.l 19c54 <DOSBase>,d0
    a34a:	|  |   movea.l d0,a6
    a34c:	|  |   move.l 16(sp),d1
    a350:	|  |   move.l 12(sp),d2
    a354:	|  |   jsr -312(a6)
    a358:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    a35c:	|  |   move.b 19cfe <encode1>,d0
    a362:	|  |   move.b d0,d1
    a364:	|  |   move.b 19cff <encode2>,d0
    a36a:	|  |   add.b d1,d0
    a36c:	|  |   move.b d0,19cfe <encode1>
	for (a = 0; a < len; a ++) {
    a372:	|  |   addq.l #1,24(sp)
    a376:	|  \-> move.l 24(sp),d0
    a37a:	|      cmp.l 20(sp),d0
    a37e:	\----- blt.s a322 <writeStringEncoded+0x2e>
	}
}
    a380:	       nop
    a382:	       nop
    a384:	       move.l (sp)+,d2
    a386:	       movea.l (sp)+,a6
    a388:	       lea 20(sp),sp
    a38c:	       rts

0000a38e <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    a38e:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    a390:	                   tst.l 8(sp)
    a394:	               /-- bne.s a39a <failSecurityCheck+0xc>
    a396:	               |   moveq #1,d0
    a398:	/--------------|-- bra.s a418 <failSecurityCheck+0x8a>

	int a = 0;
    a39a:	|              \-> clr.l (sp)

	while (fn[a]) {
    a39c:	|     /----------- bra.s a40a <failSecurityCheck+0x7c>
		switch (fn[a]) {
    a39e:	|  /--|----------> move.l (sp),d0
    a3a0:	|  |  |            movea.l 8(sp),a0
    a3a4:	|  |  |            adda.l d0,a0
    a3a6:	|  |  |            move.b (a0),d0
    a3a8:	|  |  |            ext.w d0
    a3aa:	|  |  |            movea.w d0,a0
    a3ac:	|  |  |            moveq #124,d0
    a3ae:	|  |  |            cmp.l a0,d0
    a3b0:	|  |  |     /----- beq.s a3f2 <failSecurityCheck+0x64>
    a3b2:	|  |  |     |      moveq #124,d1
    a3b4:	|  |  |     |      cmp.l a0,d1
    a3b6:	|  |  |  /--|----- blt.s a408 <failSecurityCheck+0x7a>
    a3b8:	|  |  |  |  |      moveq #92,d0
    a3ba:	|  |  |  |  |      cmp.l a0,d0
    a3bc:	|  |  |  |  +----- beq.s a3f2 <failSecurityCheck+0x64>
    a3be:	|  |  |  |  |      moveq #92,d1
    a3c0:	|  |  |  |  |      cmp.l a0,d1
    a3c2:	|  |  |  +--|----- blt.s a408 <failSecurityCheck+0x7a>
    a3c4:	|  |  |  |  |      moveq #60,d0
    a3c6:	|  |  |  |  |      cmp.l a0,d0
    a3c8:	|  |  |  |  |  /-- blt.s a3e8 <failSecurityCheck+0x5a>
    a3ca:	|  |  |  |  |  |   moveq #34,d1
    a3cc:	|  |  |  |  |  |   cmp.l a0,d1
    a3ce:	|  |  |  +--|--|-- bgt.s a408 <failSecurityCheck+0x7a>
    a3d0:	|  |  |  |  |  |   moveq #-34,d1
    a3d2:	|  |  |  |  |  |   add.l a0,d1
    a3d4:	|  |  |  |  |  |   move.l #83894529,d0
    a3da:	|  |  |  |  |  |   lsr.l d1,d0
    a3dc:	|  |  |  |  |  |   moveq #1,d1
    a3de:	|  |  |  |  |  |   and.l d1,d0
    a3e0:	|  |  |  |  |  |   sne d0
    a3e2:	|  |  |  |  |  |   neg.b d0
    a3e4:	|  |  |  |  +--|-- bne.s a3f2 <failSecurityCheck+0x64>
    a3e6:	|  |  |  +--|--|-- bra.s a408 <failSecurityCheck+0x7a>
    a3e8:	|  |  |  |  |  \-> lea -62(a0),a0
    a3ec:	|  |  |  |  |      moveq #1,d0
    a3ee:	|  |  |  |  |      cmp.l a0,d0
    a3f0:	|  |  |  +--|----- bcs.s a408 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    a3f2:	|  |  |  |  \----> move.l 8(sp),-(sp)
    a3f6:	|  |  |  |         pea 15e88 <main_sludge.c.2f5c5368+0x59e>
    a3fc:	|  |  |  |         jsr 127a4 <KPrintF>
    a402:	|  |  |  |         addq.l #8,sp
				return TRUE;
    a404:	|  |  |  |         moveq #1,d0
    a406:	+--|--|--|-------- bra.s a418 <failSecurityCheck+0x8a>
		}
		a++;
    a408:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    a40a:	|  |  \----------> move.l (sp),d0
    a40c:	|  |               movea.l 8(sp),a0
    a410:	|  |               adda.l d0,a0
    a412:	|  |               move.b (a0),d0
    a414:	|  \-------------- bne.s a39e <failSecurityCheck+0x10>
	}
	return FALSE;
    a416:	|                  clr.w d0
}
    a418:	\----------------> addq.l #4,sp
    a41a:	                   rts

0000a41c <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    a41c:	             lea -24(sp),sp
    a420:	             move.l a6,-(sp)
    a422:	             move.l 40(sp),d0
    a426:	             move.w d0,d0
    a428:	             move.w d0,6(sp)
	int fileNum = -1;
    a42c:	             moveq #-1,d0
    a42e:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    a432:	             jsr 36f4 <killSpeechTimers>

	switch (numParams) {
    a438:	             moveq #2,d0
    a43a:	             cmp.l 32(sp),d0
    a43e:	      /----- beq.s a482 <sayCore+0x66>
    a440:	      |      moveq #3,d0
    a442:	      |      cmp.l 32(sp),d0
    a446:	/-----|----- bne.w a564 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    a44a:	|     |      movea.l 36(sp),a0
    a44e:	|     |      move.l 24(a0),d0
    a452:	|     |      move.l d0,-(sp)
    a454:	|     |      pea 5 <_start+0x5>
    a458:	|     |      lea 20(sp),a0
    a45c:	|     |      move.l a0,-(sp)
    a45e:	|     |      jsr 10750 <getValueType>
    a464:	|     |      lea 12(sp),sp
    a468:	|     |      tst.w d0
    a46a:	|     |  /-- bne.s a472 <sayCore+0x56>
    a46c:	|     |  |   moveq #1,d0
    a46e:	|  /--|--|-- bra.w a574 <sayCore+0x158>
			trimStack (&fun -> stack);
    a472:	|  |  |  \-> moveq #24,d0
    a474:	|  |  |      add.l 36(sp),d0
    a478:	|  |  |      move.l d0,-(sp)
    a47a:	|  |  |      jsr 110d4 <trimStack>
    a480:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    a482:	|  |  \----> movea.l 36(sp),a0
    a486:	|  |         move.l 24(a0),d0
    a48a:	|  |         move.l d0,-(sp)
    a48c:	|  |         jsr 10d26 <getTextFromAnyVar>
    a492:	|  |         addq.l #4,sp
    a494:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    a498:	|  |     /-- bne.s a4a0 <sayCore+0x84>
    a49a:	|  |     |   moveq #1,d0
    a49c:	|  +-----|-- bra.w a574 <sayCore+0x158>
			trimStack (&fun -> stack);
    a4a0:	|  |     \-> moveq #24,d0
    a4a2:	|  |         add.l 36(sp),d0
    a4a6:	|  |         move.l d0,-(sp)
    a4a8:	|  |         jsr 110d4 <trimStack>
    a4ae:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    a4b0:	|  |         movea.l 36(sp),a0
    a4b4:	|  |         move.l 24(a0),d0
    a4b8:	|  |         move.l d0,-(sp)
    a4ba:	|  |         pea 7 <_start+0x7>
    a4be:	|  |         lea 16(sp),a0
    a4c2:	|  |         move.l a0,-(sp)
    a4c4:	|  |         jsr 10750 <getValueType>
    a4ca:	|  |         lea 12(sp),sp
    a4ce:	|  |         tst.w d0
    a4d0:	|  |     /-- bne.s a4d8 <sayCore+0xbc>
    a4d2:	|  |     |   moveq #1,d0
    a4d4:	|  +-----|-- bra.w a574 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    a4d8:	|  |     \-> movea.l 36(sp),a0
    a4dc:	|  |         move.l 24(a0),d0
    a4e0:	|  |         move.l d0,-(sp)
    a4e2:	|  |         pea 7 <_start+0x7>
    a4e6:	|  |         lea 16(sp),a0
    a4ea:	|  |         move.l a0,-(sp)
    a4ec:	|  |         jsr 10750 <getValueType>
    a4f2:	|  |         lea 12(sp),sp
    a4f6:	|  |         tst.w d0
    a4f8:	|  |     /-- bne.s a4fe <sayCore+0xe2>
    a4fa:	|  |     |   moveq #1,d0
    a4fc:	|  +-----|-- bra.s a574 <sayCore+0x158>
			trimStack (&fun -> stack);
    a4fe:	|  |     \-> moveq #24,d0
    a500:	|  |         add.l 36(sp),d0
    a504:	|  |         move.l d0,-(sp)
    a506:	|  |         jsr 110d4 <trimStack>
    a50c:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    a50e:	|  |         movea.w 6(sp),a0
    a512:	|  |         move.l 12(sp),d1
    a516:	|  |         move.l 8(sp),d0
    a51a:	|  |         move.l a0,-(sp)
    a51c:	|  |         move.l d1,-(sp)
    a51e:	|  |         move.l d0,-(sp)
    a520:	|  |         move.l 36(sp),-(sp)
    a524:	|  |         jsr 562c <wrapSpeech>
    a52a:	|  |         lea 16(sp),sp
    a52e:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    a532:	|  |         movea.l 36(sp),a0
    a536:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    a53c:	|  |         movea.l 36(sp),a0
    a540:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    a546:	|  |         move.l 24(sp),16(sp)
    a54c:	|  |         move.l 19c4c <SysBase>,d0
    a552:	|  |         movea.l d0,a6
    a554:	|  |         movea.l 16(sp),a1
    a558:	|  |         jsr -690(a6)
			newText = NULL;
    a55c:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    a560:	|  |         moveq #0,d0
    a562:	|  +-------- bra.s a574 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    a564:	\--|-------> pea 15f0e <main_sludge.c.2f5c5368+0x624>
    a56a:	   |         jsr 127a4 <KPrintF>
    a570:	   |         addq.l #4,sp
	return BR_ERROR;
    a572:	   |         moveq #1,d0
}
    a574:	   \-------> movea.l (sp)+,a6
    a576:	             lea 24(sp),sp
    a57a:	             rts

0000a57c <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	//KPrintF("say something");
	return sayCore (numParams, fun, TRUE);
    a57c:	pea 1 <_start+0x1>
    a580:	move.l 12(sp),-(sp)
    a584:	move.l 12(sp),-(sp)
    a588:	jsr a41c <sayCore>
    a58e:	lea 12(sp),sp
}
    a592:	rts

0000a594 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    a594:	clr.l -(sp)
    a596:	move.l 12(sp),-(sp)
    a59a:	move.l 12(sp),-(sp)
    a59e:	jsr a41c <sayCore>
    a5a4:	lea 12(sp),sp
}
    a5a8:	rts

0000a5aa <builtIn_freeze>:
{
	UNUSEDALL
	/*freeze ();
	freezeSubs (); Amiga todo: implement */
	//fun -> freezerLevel = 0;
	return BR_CONTINUE;
    a5aa:	moveq #2,d0
}
    a5ac:	rts

0000a5ae <builtIn_unfreeze>:
builtIn(unfreeze)
{
	UNUSEDALL
	/*unfreeze ();
	unfreezeSubs (); Amiga todo: Implement*/
	return BR_CONTINUE;
    a5ae:	moveq #2,d0
}
    a5b0:	rts

0000a5b2 <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    a5b2:	nop
    a5b4:	rts

0000a5b6 <builtIn_setCursor>:

builtIn(setCursor)
{
    a5b6:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    a5b8:	movea.l 12(sp),a0
    a5bc:	move.l 24(a0),d0
    a5c0:	move.l d0,-(sp)
    a5c2:	jsr 10c28 <getAnimationFromVar>
    a5c8:	addq.l #4,sp
    a5ca:	move.l d0,(sp)
	pickAnimCursor (aa);
    a5cc:	move.l (sp),-(sp)
    a5ce:	jsr dba <pickAnimCursor>
    a5d4:	addq.l #4,sp
	trimStack (&fun -> stack);
    a5d6:	moveq #24,d0
    a5d8:	add.l 12(sp),d0
    a5dc:	move.l d0,-(sp)
    a5de:	jsr 110d4 <trimStack>
    a5e4:	addq.l #4,sp
	return BR_CONTINUE;
    a5e6:	moveq #2,d0
}
    a5e8:	addq.l #4,sp
    a5ea:	rts

0000a5ec <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    a5ec:	move.l 19c0c <input+0xa>,d1
    a5f2:	move.l 19d02 <cameraX>,d0
    a5f8:	add.l d0,d1
    a5fa:	moveq #28,d0
    a5fc:	add.l 8(sp),d0
    a600:	move.l d1,-(sp)
    a602:	pea 1 <_start+0x1>
    a606:	move.l d0,-(sp)
    a608:	jsr 11042 <setVariable>
    a60e:	lea 12(sp),sp
	return BR_CONTINUE;
    a612:	moveq #2,d0
}
    a614:	rts

0000a616 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    a616:	move.l 19c10 <input+0xe>,d1
    a61c:	move.l 19d06 <cameraY>,d0
    a622:	add.l d0,d1
    a624:	moveq #28,d0
    a626:	add.l 8(sp),d0
    a62a:	move.l d1,-(sp)
    a62c:	pea 1 <_start+0x1>
    a630:	move.l d0,-(sp)
    a632:	jsr 11042 <setVariable>
    a638:	lea 12(sp),sp
	return BR_CONTINUE;
    a63c:	moveq #2,d0
}
    a63e:	rts

0000a640 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    a640:	move.l 19c0c <input+0xa>,d0
    a646:	move.l d0,-(sp)
    a648:	jsr 12bfc <__floatsisf>
    a64e:	addq.l #4,sp
    a650:	move.l d0,d1
    a652:	move.l 1814a <cameraZoom>,d0
    a658:	move.l d0,-(sp)
    a65a:	move.l d1,-(sp)
    a65c:	jsr 12cae <__mulsf3>
    a662:	addq.l #8,sp
    a664:	move.l d0,-(sp)
    a666:	jsr 12b94 <__fixsfsi>
    a66c:	addq.l #4,sp
    a66e:	move.l d0,d1
    a670:	moveq #28,d0
    a672:	add.l 8(sp),d0
    a676:	move.l d1,-(sp)
    a678:	pea 1 <_start+0x1>
    a67c:	move.l d0,-(sp)
    a67e:	jsr 11042 <setVariable>
    a684:	lea 12(sp),sp
	return BR_CONTINUE;
    a688:	moveq #2,d0
}
    a68a:	rts

0000a68c <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    a68c:	move.l 19c10 <input+0xe>,d0
    a692:	move.l d0,-(sp)
    a694:	jsr 12bfc <__floatsisf>
    a69a:	addq.l #4,sp
    a69c:	move.l d0,d1
    a69e:	move.l 1814a <cameraZoom>,d0
    a6a4:	move.l d0,-(sp)
    a6a6:	move.l d1,-(sp)
    a6a8:	jsr 12cae <__mulsf3>
    a6ae:	addq.l #8,sp
    a6b0:	move.l d0,-(sp)
    a6b2:	jsr 12b94 <__fixsfsi>
    a6b8:	addq.l #4,sp
    a6ba:	move.l d0,d1
    a6bc:	moveq #28,d0
    a6be:	add.l 8(sp),d0
    a6c2:	move.l d1,-(sp)
    a6c4:	pea 1 <_start+0x1>
    a6c8:	move.l d0,-(sp)
    a6ca:	jsr 11042 <setVariable>
    a6d0:	lea 12(sp),sp
	return BR_CONTINUE;
    a6d4:	moveq #2,d0
}
    a6d6:	rts

0000a6d8 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    a6d8:	jsr 50e0 <statusBarText>
    a6de:	move.l d0,d1
    a6e0:	moveq #28,d0
    a6e2:	add.l 8(sp),d0
    a6e6:	move.l d1,-(sp)
    a6e8:	move.l d0,-(sp)
    a6ea:	jsr 10972 <makeTextVar>
    a6f0:	addq.l #8,sp
	return BR_CONTINUE;
    a6f2:	moveq #2,d0
}
    a6f4:	rts

0000a6f6 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    a6f6:	       lea -20(sp),sp
    a6fa:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    a6fc:	       movea.l 32(sp),a0
    a700:	       move.l 24(a0),d0
    a704:	       move.l d0,-(sp)
    a706:	       jsr 10d26 <getTextFromAnyVar>
    a70c:	       addq.l #4,sp
    a70e:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    a712:	   /-- bne.s a71a <builtIn_getMatchingFiles+0x24>
    a714:	   |   moveq #1,d0
    a716:	/--|-- bra.w a7dc <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    a71a:	|  \-> moveq #24,d0
    a71c:	|      add.l 32(sp),d0
    a720:	|      move.l d0,-(sp)
    a722:	|      jsr 110d4 <trimStack>
    a728:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    a72a:	|      moveq #28,d0
    a72c:	|      add.l 32(sp),d0
    a730:	|      move.l d0,-(sp)
    a732:	|      jsr 1099e <unlinkVar>
    a738:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    a73a:	|      movea.l 32(sp),a0
    a73e:	|      moveq #6,d0
    a740:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    a744:	|      moveq #12,d0
    a746:	|      move.l d0,16(sp)
    a74a:	|      clr.l 12(sp)
    a74e:	|      move.l 19c4c <SysBase>,d0
    a754:	|      movea.l d0,a6
    a756:	|      move.l 16(sp),d0
    a75a:	|      move.l 12(sp),d1
    a75e:	|      jsr -684(a6)
    a762:	|      move.l d0,8(sp)
    a766:	|      move.l 8(sp),d0
    a76a:	|      movea.l 32(sp),a0
    a76e:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    a772:	|      moveq #32,d0
    a774:	|      add.l 32(sp),d0
    a778:	|  /-- bne.s a77e <builtIn_getMatchingFiles+0x88>
    a77a:	|  |   moveq #1,d0
    a77c:	+--|-- bra.s a7dc <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    a77e:	|  \-> movea.l 32(sp),a0
    a782:	|      movea.l 32(a0),a0
    a786:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    a788:	|      movea.l 32(sp),a0
    a78c:	|      movea.l 32(a0),a0
    a790:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    a794:	|      movea.l 32(sp),a0
    a798:	|      movea.l 32(a0),a0
    a79c:	|      moveq #1,d0
    a79e:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    a7a2:	|      movea.l 32(sp),a0
    a7a6:	|      move.l 32(a0),d0
    a7aa:	|      move.l 20(sp),-(sp)
    a7ae:	|      move.l d0,-(sp)
    a7b0:	|      jsr 1050c <getSavedGamesStack>
    a7b6:	|      addq.l #8,sp
    a7b8:	|      tst.w d0
    a7ba:	|  /-- bne.s a7c0 <builtIn_getMatchingFiles+0xca>
    a7bc:	|  |   moveq #1,d0
    a7be:	+--|-- bra.s a7dc <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    a7c0:	|  \-> move.l 20(sp),4(sp)
    a7c6:	|      move.l 19c4c <SysBase>,d0
    a7cc:	|      movea.l d0,a6
    a7ce:	|      movea.l 4(sp),a1
    a7d2:	|      jsr -690(a6)
	newText = NULL;
    a7d6:	|      clr.l 20(sp)
	return BR_CONTINUE;
    a7da:	|      moveq #2,d0
}
    a7dc:	\----> movea.l (sp)+,a6
    a7de:	       lea 20(sp),sp
    a7e2:	       rts

0000a7e4 <builtIn_saveGame>:

builtIn(saveGame)
{
    a7e4:	       lea -12(sp),sp
    a7e8:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    a7ea:	       movea.l 24(sp),a0
    a7ee:	       move.l 24(a0),d0
    a7f2:	       move.l d0,-(sp)
    a7f4:	       jsr 10d26 <getTextFromAnyVar>
    a7fa:	       addq.l #4,sp
    a7fc:	       move.l d0,19c18 <loadNow>
    trimStack(&fun->stack);
    a802:	       moveq #24,d0
    a804:	       add.l 24(sp),d0
    a808:	       move.l d0,-(sp)
    a80a:	       jsr 110d4 <trimStack>
    a810:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    a812:	       move.l 19c18 <loadNow>,d0
    a818:	       move.l d0,-(sp)
    a81a:	       jsr 2fe <encodeFilename>
    a820:	       addq.l #4,sp
    a822:	       move.l d0,12(sp)
    FreeVec(loadNow);
    a826:	       move.l 19c18 <loadNow>,8(sp)
    a82e:	       move.l 19c4c <SysBase>,d0
    a834:	       movea.l d0,a6
    a836:	       movea.l 8(sp),a1
    a83a:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    a83e:	       move.l 12(sp),-(sp)
    a842:	       jsr a38e <failSecurityCheck>
    a848:	       addq.l #4,sp
    a84a:	       tst.w d0
    a84c:	   /-- beq.s a852 <builtIn_saveGame+0x6e>
    a84e:	   |   moveq #1,d0
    a850:	/--|-- bra.s a8a2 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    a852:	|  \-> move.l 12(sp),-(sp)
    a856:	|      pea 15f3c <main_sludge.c.2f5c5368+0x652>
    a85c:	|      jsr fc7c <joinStrings>
    a862:	|      addq.l #8,sp
    a864:	|      move.l d0,19c18 <loadNow>
    FreeVec(aaaaa);
    a86a:	|      move.l 12(sp),4(sp)
    a870:	|      move.l 19c4c <SysBase>,d0
    a876:	|      movea.l d0,a6
    a878:	|      movea.l 4(sp),a1
    a87c:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    a880:	|      moveq #28,d0
    a882:	|      add.l 24(sp),d0
    a886:	|      clr.l -(sp)
    a888:	|      pea 1 <_start+0x1>
    a88c:	|      move.l d0,-(sp)
    a88e:	|      jsr 11042 <setVariable>
    a894:	|      lea 12(sp),sp
    saverFunc = fun;
    a898:	|      move.l 24(sp),19d12 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    a8a0:	|      moveq #0,d0
}
    a8a2:	\----> movea.l (sp)+,a6
    a8a4:	       lea 12(sp),sp
    a8a8:	       rts

0000a8aa <builtIn_fileExists>:

builtIn(fileExists)
{
    a8aa:	       lea -36(sp),sp
    a8ae:	       move.l a6,-(sp)
    a8b0:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    a8b2:	       movea.l 52(sp),a0
    a8b6:	       move.l 24(a0),d0
    a8ba:	       move.l d0,-(sp)
    a8bc:	       jsr 10d26 <getTextFromAnyVar>
    a8c2:	       addq.l #4,sp
    a8c4:	       move.l d0,19c18 <loadNow>
    trimStack(&fun->stack);
    a8ca:	       moveq #24,d0
    a8cc:	       add.l 52(sp),d0
    a8d0:	       move.l d0,-(sp)
    a8d2:	       jsr 110d4 <trimStack>
    a8d8:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    a8da:	       move.l 19c18 <loadNow>,d0
    a8e0:	       move.l d0,-(sp)
    a8e2:	       jsr 2fe <encodeFilename>
    a8e8:	       addq.l #4,sp
    a8ea:	       move.l d0,40(sp)
    FreeVec(loadNow);
    a8ee:	       move.l 19c18 <loadNow>,36(sp)
    a8f6:	       move.l 19c4c <SysBase>,d0
    a8fc:	       movea.l d0,a6
    a8fe:	       movea.l 36(sp),a1
    a902:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    a906:	       move.l 40(sp),-(sp)
    a90a:	       jsr a38e <failSecurityCheck>
    a910:	       addq.l #4,sp
    a912:	       tst.w d0
    a914:	   /-- beq.s a91c <builtIn_fileExists+0x72>
    a916:	   |   moveq #1,d0
    a918:	/--|-- bra.w a9bc <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    a91c:	|  \-> move.l 40(sp),32(sp)
    a922:	|      move.l #1005,28(sp)
    a92a:	|      move.l 19c54 <DOSBase>,d0
    a930:	|      movea.l d0,a6
    a932:	|      move.l 32(sp),d1
    a936:	|      move.l 28(sp),d2
    a93a:	|      jsr -30(a6)
    a93e:	|      move.l d0,24(sp)
    a942:	|      move.l 24(sp),d0
    a946:	|      move.l d0,20(sp)
    if (!fp) {        
    a94a:	|  /-- bne.s a95a <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    a94c:	|  |   pea 15f3e <main_sludge.c.2f5c5368+0x654>
    a952:	|  |   jsr 127a4 <KPrintF>
    a958:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    a95a:	|  \-> tst.l 20(sp)
    a95e:	|      sne d0
    a960:	|      neg.b d0
    a962:	|      moveq #0,d1
    a964:	|      move.b d0,d1
    a966:	|      moveq #28,d0
    a968:	|      add.l 52(sp),d0
    a96c:	|      move.l d1,-(sp)
    a96e:	|      pea 1 <_start+0x1>
    a972:	|      move.l d0,-(sp)
    a974:	|      jsr 11042 <setVariable>
    a97a:	|      lea 12(sp),sp
    if (fp) Close(fp);
    a97e:	|      tst.l 20(sp)
    a982:	|  /-- beq.s a99e <builtIn_fileExists+0xf4>
    a984:	|  |   move.l 20(sp),16(sp)
    a98a:	|  |   move.l 19c54 <DOSBase>,d0
    a990:	|  |   movea.l d0,a6
    a992:	|  |   move.l 16(sp),d1
    a996:	|  |   jsr -36(a6)
    a99a:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    a99e:	|  \-> move.l 40(sp),8(sp)
    a9a4:	|      move.l 19c4c <SysBase>,d0
    a9aa:	|      movea.l d0,a6
    a9ac:	|      movea.l 8(sp),a1
    a9b0:	|      jsr -690(a6)
    loadNow = NULL;
    a9b4:	|      clr.l 19c18 <loadNow>
    return BR_CONTINUE;
    a9ba:	|      moveq #2,d0
}
    a9bc:	\----> move.l (sp)+,d2
    a9be:	       movea.l (sp)+,a6
    a9c0:	       lea 36(sp),sp
    a9c4:	       rts

0000a9c6 <builtIn_loadGame>:

builtIn(loadGame)
{
    a9c6:	       lea -36(sp),sp
    a9ca:	       move.l a6,-(sp)
    a9cc:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    a9ce:	       movea.l 52(sp),a0
    a9d2:	       move.l 24(a0),d0
    a9d6:	       move.l d0,-(sp)
    a9d8:	       jsr 10d26 <getTextFromAnyVar>
    a9de:	       addq.l #4,sp
    a9e0:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    a9e4:	       moveq #24,d0
    a9e6:	       add.l 52(sp),d0
    a9ea:	       move.l d0,-(sp)
    a9ec:	       jsr 110d4 <trimStack>
    a9f2:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    a9f4:	       move.l 40(sp),-(sp)
    a9f8:	       jsr 2fe <encodeFilename>
    a9fe:	       addq.l #4,sp
    aa00:	       move.l d0,19c18 <loadNow>
    FreeVec(aaaaa);
    aa06:	       move.l 40(sp),36(sp)
    aa0c:	       move.l 19c4c <SysBase>,d0
    aa12:	       movea.l d0,a6
    aa14:	       movea.l 36(sp),a1
    aa18:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    aa1c:	       move.l 19c18 <loadNow>,d0
    aa22:	       move.l d0,-(sp)
    aa24:	       jsr a38e <failSecurityCheck>
    aa2a:	       addq.l #4,sp
    aa2c:	       tst.w d0
    aa2e:	   /-- beq.s aa34 <builtIn_loadGame+0x6e>
    aa30:	   |   moveq #1,d0
    aa32:	/--|-- bra.s aaa4 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    aa34:	|  \-> move.l 19c18 <loadNow>,32(sp)
    aa3c:	|      move.l #1005,28(sp)
    aa44:	|      move.l 19c54 <DOSBase>,d0
    aa4a:	|      movea.l d0,a6
    aa4c:	|      move.l 32(sp),d1
    aa50:	|      move.l 28(sp),d2
    aa54:	|      jsr -30(a6)
    aa58:	|      move.l d0,24(sp)
    aa5c:	|      move.l 24(sp),d0
    aa60:	|      move.l d0,20(sp)
    if (fp) {
    aa64:	|  /-- beq.s aa84 <builtIn_loadGame+0xbe>
        Close(fp);
    aa66:	|  |   move.l 20(sp),12(sp)
    aa6c:	|  |   move.l 19c54 <DOSBase>,d0
    aa72:	|  |   movea.l d0,a6
    aa74:	|  |   move.l 12(sp),d1
    aa78:	|  |   jsr -36(a6)
    aa7c:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    aa80:	|  |   moveq #0,d0
    aa82:	+--|-- bra.s aaa4 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    aa84:	|  \-> move.l 19c18 <loadNow>,16(sp)
    aa8c:	|      move.l 19c4c <SysBase>,d0
    aa92:	|      movea.l d0,a6
    aa94:	|      movea.l 16(sp),a1
    aa98:	|      jsr -690(a6)
    loadNow = NULL;
    aa9c:	|      clr.l 19c18 <loadNow>
    return BR_CONTINUE;
    aaa2:	|      moveq #2,d0
}
    aaa4:	\----> move.l (sp)+,d2
    aaa6:	       movea.l (sp)+,a6
    aaa8:	       lea 36(sp),sp
    aaac:	       rts

0000aaae <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    aaae:	move.l 19ce8 <sceneHeight>,d0
    aab4:	move.l d0,d1
    aab6:	move.l 19ce4 <sceneWidth>,d0
    aabc:	move.l d1,-(sp)
    aabe:	move.l d0,-(sp)
    aac0:	clr.l -(sp)
    aac2:	clr.l -(sp)
    aac4:	jsr 92dc <blankScreen>
    aaca:	lea 16(sp),sp
	return BR_CONTINUE;
    aace:	moveq #2,d0
}
    aad0:	rts

0000aad2 <builtIn_blankArea>:

builtIn(blankArea)
{
    aad2:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    aad6:	       movea.l 24(sp),a0
    aada:	       move.l 24(a0),d0
    aade:	       move.l d0,-(sp)
    aae0:	       pea 1 <_start+0x1>
    aae4:	       lea 8(sp),a0
    aae8:	       move.l a0,-(sp)
    aaea:	       jsr 10750 <getValueType>
    aaf0:	       lea 12(sp),sp
    aaf4:	       tst.w d0
    aaf6:	   /-- bne.s aafe <builtIn_blankArea+0x2c>
    aaf8:	   |   moveq #1,d0
    aafa:	/--|-- bra.w abd4 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    aafe:	|  \-> moveq #24,d0
    ab00:	|      add.l 24(sp),d0
    ab04:	|      move.l d0,-(sp)
    ab06:	|      jsr 110d4 <trimStack>
    ab0c:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ab0e:	|      movea.l 24(sp),a0
    ab12:	|      move.l 24(a0),d0
    ab16:	|      move.l d0,-(sp)
    ab18:	|      pea 1 <_start+0x1>
    ab1c:	|      lea 12(sp),a0
    ab20:	|      move.l a0,-(sp)
    ab22:	|      jsr 10750 <getValueType>
    ab28:	|      lea 12(sp),sp
    ab2c:	|      tst.w d0
    ab2e:	|  /-- bne.s ab36 <builtIn_blankArea+0x64>
    ab30:	|  |   moveq #1,d0
    ab32:	+--|-- bra.w abd4 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ab36:	|  \-> moveq #24,d0
    ab38:	|      add.l 24(sp),d0
    ab3c:	|      move.l d0,-(sp)
    ab3e:	|      jsr 110d4 <trimStack>
    ab44:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ab46:	|      movea.l 24(sp),a0
    ab4a:	|      move.l 24(a0),d0
    ab4e:	|      move.l d0,-(sp)
    ab50:	|      pea 1 <_start+0x1>
    ab54:	|      moveq #16,d0
    ab56:	|      add.l sp,d0
    ab58:	|      move.l d0,-(sp)
    ab5a:	|      jsr 10750 <getValueType>
    ab60:	|      lea 12(sp),sp
    ab64:	|      tst.w d0
    ab66:	|  /-- bne.s ab6c <builtIn_blankArea+0x9a>
    ab68:	|  |   moveq #1,d0
    ab6a:	+--|-- bra.s abd4 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ab6c:	|  \-> moveq #24,d0
    ab6e:	|      add.l 24(sp),d0
    ab72:	|      move.l d0,-(sp)
    ab74:	|      jsr 110d4 <trimStack>
    ab7a:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ab7c:	|      movea.l 24(sp),a0
    ab80:	|      move.l 24(a0),d0
    ab84:	|      move.l d0,-(sp)
    ab86:	|      pea 1 <_start+0x1>
    ab8a:	|      moveq #20,d0
    ab8c:	|      add.l sp,d0
    ab8e:	|      move.l d0,-(sp)
    ab90:	|      jsr 10750 <getValueType>
    ab96:	|      lea 12(sp),sp
    ab9a:	|      tst.w d0
    ab9c:	|  /-- bne.s aba2 <builtIn_blankArea+0xd0>
    ab9e:	|  |   moveq #1,d0
    aba0:	+--|-- bra.s abd4 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    aba2:	|  \-> moveq #24,d0
    aba4:	|      add.l 24(sp),d0
    aba8:	|      move.l d0,-(sp)
    abaa:	|      jsr 110d4 <trimStack>
    abb0:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    abb2:	|      movea.l (sp),a1
    abb4:	|      movea.l 4(sp),a0
    abb8:	|      move.l 8(sp),d1
    abbc:	|      move.l 12(sp),d0
    abc0:	|      move.l a1,-(sp)
    abc2:	|      move.l a0,-(sp)
    abc4:	|      move.l d1,-(sp)
    abc6:	|      move.l d0,-(sp)
    abc8:	|      jsr 92dc <blankScreen>
    abce:	|      lea 16(sp),sp
	return BR_CONTINUE;
    abd2:	|      moveq #2,d0
}
    abd4:	\----> lea 16(sp),sp
    abd8:	       rts

0000abda <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    abda:	jsr 92e0 <darkScreen>
	return BR_CONTINUE;
    abe0:	moveq #2,d0
}
    abe2:	rts

0000abe4 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    abe4:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    abe8:	       movea.l 20(sp),a0
    abec:	       move.l 24(a0),d0
    abf0:	       move.l d0,-(sp)
    abf2:	       pea 1 <_start+0x1>
    abf6:	       lea 8(sp),a0
    abfa:	       move.l a0,-(sp)
    abfc:	       jsr 10750 <getValueType>
    ac02:	       lea 12(sp),sp
    ac06:	       tst.w d0
    ac08:	   /-- bne.s ac10 <builtIn_addOverlay+0x2c>
    ac0a:	   |   moveq #1,d0
    ac0c:	/--|-- bra.w aca8 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ac10:	|  \-> moveq #24,d0
    ac12:	|      add.l 20(sp),d0
    ac16:	|      move.l d0,-(sp)
    ac18:	|      jsr 110d4 <trimStack>
    ac1e:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ac20:	|      movea.l 20(sp),a0
    ac24:	|      move.l 24(a0),d0
    ac28:	|      move.l d0,-(sp)
    ac2a:	|      pea 1 <_start+0x1>
    ac2e:	|      moveq #12,d0
    ac30:	|      add.l sp,d0
    ac32:	|      move.l d0,-(sp)
    ac34:	|      jsr 10750 <getValueType>
    ac3a:	|      lea 12(sp),sp
    ac3e:	|      tst.w d0
    ac40:	|  /-- bne.s ac46 <builtIn_addOverlay+0x62>
    ac42:	|  |   moveq #1,d0
    ac44:	+--|-- bra.s aca8 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ac46:	|  \-> moveq #24,d0
    ac48:	|      add.l 20(sp),d0
    ac4c:	|      move.l d0,-(sp)
    ac4e:	|      jsr 110d4 <trimStack>
    ac54:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ac56:	|      movea.l 20(sp),a0
    ac5a:	|      move.l 24(a0),d0
    ac5e:	|      move.l d0,-(sp)
    ac60:	|      pea 5 <_start+0x5>
    ac64:	|      moveq #16,d0
    ac66:	|      add.l sp,d0
    ac68:	|      move.l d0,-(sp)
    ac6a:	|      jsr 10750 <getValueType>
    ac70:	|      lea 12(sp),sp
    ac74:	|      tst.w d0
    ac76:	|  /-- bne.s ac7c <builtIn_addOverlay+0x98>
    ac78:	|  |   moveq #1,d0
    ac7a:	+--|-- bra.s aca8 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ac7c:	|  \-> moveq #24,d0
    ac7e:	|      add.l 20(sp),d0
    ac82:	|      move.l d0,-(sp)
    ac84:	|      jsr 110d4 <trimStack>
    ac8a:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ac8c:	|      movea.l (sp),a0
    ac8e:	|      move.l 4(sp),d1
    ac92:	|      move.l 8(sp),d0
    ac96:	|      move.l a0,-(sp)
    ac98:	|      move.l d1,-(sp)
    ac9a:	|      move.l d0,-(sp)
    ac9c:	|      jsr 93fe <loadBackDrop>
    aca2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    aca6:	|      moveq #2,d0
}
    aca8:	\----> lea 12(sp),sp
    acac:	       rts

0000acae <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    acae:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    acb2:	       movea.l 20(sp),a0
    acb6:	       move.l 24(a0),d0
    acba:	       move.l d0,-(sp)
    acbc:	       pea 1 <_start+0x1>
    acc0:	       lea 8(sp),a0
    acc4:	       move.l a0,-(sp)
    acc6:	       jsr 10750 <getValueType>
    accc:	       lea 12(sp),sp
    acd0:	       tst.w d0
    acd2:	   /-- bne.s acda <builtIn_mixOverlay+0x2c>
    acd4:	   |   moveq #1,d0
    acd6:	/--|-- bra.w ad72 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    acda:	|  \-> moveq #24,d0
    acdc:	|      add.l 20(sp),d0
    ace0:	|      move.l d0,-(sp)
    ace2:	|      jsr 110d4 <trimStack>
    ace8:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    acea:	|      movea.l 20(sp),a0
    acee:	|      move.l 24(a0),d0
    acf2:	|      move.l d0,-(sp)
    acf4:	|      pea 1 <_start+0x1>
    acf8:	|      moveq #12,d0
    acfa:	|      add.l sp,d0
    acfc:	|      move.l d0,-(sp)
    acfe:	|      jsr 10750 <getValueType>
    ad04:	|      lea 12(sp),sp
    ad08:	|      tst.w d0
    ad0a:	|  /-- bne.s ad10 <builtIn_mixOverlay+0x62>
    ad0c:	|  |   moveq #1,d0
    ad0e:	+--|-- bra.s ad72 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ad10:	|  \-> moveq #24,d0
    ad12:	|      add.l 20(sp),d0
    ad16:	|      move.l d0,-(sp)
    ad18:	|      jsr 110d4 <trimStack>
    ad1e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ad20:	|      movea.l 20(sp),a0
    ad24:	|      move.l 24(a0),d0
    ad28:	|      move.l d0,-(sp)
    ad2a:	|      pea 5 <_start+0x5>
    ad2e:	|      moveq #16,d0
    ad30:	|      add.l sp,d0
    ad32:	|      move.l d0,-(sp)
    ad34:	|      jsr 10750 <getValueType>
    ad3a:	|      lea 12(sp),sp
    ad3e:	|      tst.w d0
    ad40:	|  /-- bne.s ad46 <builtIn_mixOverlay+0x98>
    ad42:	|  |   moveq #1,d0
    ad44:	+--|-- bra.s ad72 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ad46:	|  \-> moveq #24,d0
    ad48:	|      add.l 20(sp),d0
    ad4c:	|      move.l d0,-(sp)
    ad4e:	|      jsr 110d4 <trimStack>
    ad54:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ad56:	|      movea.l (sp),a0
    ad58:	|      move.l 4(sp),d1
    ad5c:	|      move.l 8(sp),d0
    ad60:	|      move.l a0,-(sp)
    ad62:	|      move.l d1,-(sp)
    ad64:	|      move.l d0,-(sp)
    ad66:	|      jsr 9444 <mixBackDrop>
    ad6c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ad70:	|      moveq #2,d0
}
    ad72:	\----> lea 12(sp),sp
    ad76:	       rts

0000ad78 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ad78:	       lea -12(sp),sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ad7c:	       movea.l 20(sp),a0
    ad80:	       move.l 24(a0),d0
    ad84:	       move.l d0,-(sp)
    ad86:	       pea 1 <_start+0x1>
    ad8a:	       lea 8(sp),a0
    ad8e:	       move.l a0,-(sp)
    ad90:	       jsr 10750 <getValueType>
    ad96:	       lea 12(sp),sp
    ad9a:	       tst.w d0
    ad9c:	   /-- bne.s ada4 <builtIn_pasteImage+0x2c>
    ad9e:	   |   moveq #1,d0
    ada0:	/--|-- bra.w ae34 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ada4:	|  \-> moveq #24,d0
    ada6:	|      add.l 20(sp),d0
    adaa:	|      move.l d0,-(sp)
    adac:	|      jsr 110d4 <trimStack>
    adb2:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    adb4:	|      movea.l 20(sp),a0
    adb8:	|      move.l 24(a0),d0
    adbc:	|      move.l d0,-(sp)
    adbe:	|      pea 1 <_start+0x1>
    adc2:	|      moveq #12,d0
    adc4:	|      add.l sp,d0
    adc6:	|      move.l d0,-(sp)
    adc8:	|      jsr 10750 <getValueType>
    adce:	|      lea 12(sp),sp
    add2:	|      tst.w d0
    add4:	|  /-- bne.s adda <builtIn_pasteImage+0x62>
    add6:	|  |   moveq #1,d0
    add8:	+--|-- bra.s ae34 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    adda:	|  \-> moveq #24,d0
    addc:	|      add.l 20(sp),d0
    ade0:	|      move.l d0,-(sp)
    ade2:	|      jsr 110d4 <trimStack>
    ade8:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    adea:	|      movea.l 20(sp),a0
    adee:	|      move.l 24(a0),d0
    adf2:	|      move.l d0,-(sp)
    adf4:	|      jsr 10c28 <getAnimationFromVar>
    adfa:	|      addq.l #4,sp
    adfc:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    ae00:	|      moveq #24,d0
    ae02:	|      add.l 20(sp),d0
    ae06:	|      move.l d0,-(sp)
    ae08:	|      jsr 110d4 <trimStack>
    ae0e:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    ae10:	|      tst.l 8(sp)
    ae14:	|  /-- bne.s ae1a <builtIn_pasteImage+0xa2>
    ae16:	|  |   moveq #2,d0
    ae18:	+--|-- bra.s ae34 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    ae1a:	|  \-> move.l (sp),d1
    ae1c:	|      move.l 4(sp),d0
    ae20:	|      move.l 8(sp),-(sp)
    ae24:	|      move.l d1,-(sp)
    ae26:	|      move.l d0,-(sp)
    ae28:	|      jsr de2 <pasteCursor>
    ae2e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ae32:	|      moveq #2,d0
}
    ae34:	\----> lea 12(sp),sp
    ae38:	       rts

0000ae3a <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ae3a:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ae3c:	       movea.l 16(sp),a0
    ae40:	       move.l 24(a0),d0
    ae44:	       move.l d0,-(sp)
    ae46:	       pea 1 <_start+0x1>
    ae4a:	       move.l sp,d0
    ae4c:	       addq.l #8,d0
    ae4e:	       move.l d0,-(sp)
    ae50:	       jsr 10750 <getValueType>
    ae56:	       lea 12(sp),sp
    ae5a:	       tst.w d0
    ae5c:	   /-- bne.s ae64 <builtIn_setSceneDimensions+0x2a>
    ae5e:	   |   moveq #1,d0
    ae60:	/--|-- bra.w aeec <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ae64:	|  \-> moveq #24,d0
    ae66:	|      add.l 16(sp),d0
    ae6a:	|      move.l d0,-(sp)
    ae6c:	|      jsr 110d4 <trimStack>
    ae72:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ae74:	|      movea.l 16(sp),a0
    ae78:	|      move.l 24(a0),d0
    ae7c:	|      move.l d0,-(sp)
    ae7e:	|      pea 1 <_start+0x1>
    ae82:	|      moveq #12,d0
    ae84:	|      add.l sp,d0
    ae86:	|      move.l d0,-(sp)
    ae88:	|      jsr 10750 <getValueType>
    ae8e:	|      lea 12(sp),sp
    ae92:	|      tst.w d0
    ae94:	|  /-- bne.s ae9a <builtIn_setSceneDimensions+0x60>
    ae96:	|  |   moveq #1,d0
    ae98:	+--|-- bra.s aeec <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ae9a:	|  \-> moveq #24,d0
    ae9c:	|      add.l 16(sp),d0
    aea0:	|      move.l d0,-(sp)
    aea2:	|      jsr 110d4 <trimStack>
    aea8:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    aeaa:	|      move.l (sp),d1
    aeac:	|      move.l 4(sp),d0
    aeb0:	|      move.l d1,-(sp)
    aeb2:	|      move.l d0,-(sp)
    aeb4:	|      jsr 948e <resizeBackdrop>
    aeba:	|      addq.l #8,sp
    aebc:	|      tst.w d0
    aebe:	|  /-- beq.s aedc <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    aec0:	|  |   move.l (sp),d1
    aec2:	|  |   move.l 4(sp),d0
    aec6:	|  |   move.l d1,-(sp)
    aec8:	|  |   move.l d0,-(sp)
    aeca:	|  |   clr.l -(sp)
    aecc:	|  |   clr.l -(sp)
    aece:	|  |   jsr 92dc <blankScreen>
    aed4:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    aed8:	|  |   moveq #2,d0
    aeda:	+--|-- bra.s aeec <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    aedc:	|  \-> pea 15f5c <main_sludge.c.2f5c5368+0x672>
    aee2:	|      jsr 127a4 <KPrintF>
    aee8:	|      addq.l #4,sp
	return BR_ERROR;
    aeea:	|      moveq #1,d0
}
    aeec:	\----> addq.l #8,sp
    aeee:	       rts

0000aef0 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    aef0:	          move.l d3,-(sp)
    aef2:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    aef4:	          movea.l 16(sp),a0
    aef8:	          move.l 24(a0),d0
    aefc:	          move.l d0,-(sp)
    aefe:	          pea 1 <_start+0x1>
    af02:	          pea 19d06 <cameraY>
    af08:	          jsr 10750 <getValueType>
    af0e:	          lea 12(sp),sp
    af12:	          tst.w d0
    af14:	      /-- bne.s af1c <builtIn_aimCamera+0x2c>
    af16:	      |   moveq #1,d0
    af18:	/-----|-- bra.w b19e <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    af1c:	|     \-> moveq #24,d0
    af1e:	|         add.l 16(sp),d0
    af22:	|         move.l d0,-(sp)
    af24:	|         jsr 110d4 <trimStack>
    af2a:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    af2c:	|         movea.l 16(sp),a0
    af30:	|         move.l 24(a0),d0
    af34:	|         move.l d0,-(sp)
    af36:	|         pea 1 <_start+0x1>
    af3a:	|         pea 19d02 <cameraX>
    af40:	|         jsr 10750 <getValueType>
    af46:	|         lea 12(sp),sp
    af4a:	|         tst.w d0
    af4c:	|     /-- bne.s af54 <builtIn_aimCamera+0x64>
    af4e:	|     |   moveq #1,d0
    af50:	+-----|-- bra.w b19e <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    af54:	|     \-> moveq #24,d0
    af56:	|         add.l 16(sp),d0
    af5a:	|         move.l d0,-(sp)
    af5c:	|         jsr 110d4 <trimStack>
    af62:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    af64:	|         move.l 19d02 <cameraX>,d0
    af6a:	|         move.l d0,-(sp)
    af6c:	|         jsr 12bfc <__floatsisf>
    af72:	|         addq.l #4,sp
    af74:	|         move.l d0,d2
    af76:	|         move.l 19b4c <winWidth>,d0
    af7c:	|         lsr.l #1,d0
    af7e:	|         move.l d0,-(sp)
    af80:	|         jsr 12c24 <__floatunsisf>
    af86:	|         addq.l #4,sp
    af88:	|         move.l d0,d1
    af8a:	|         move.l 1814a <cameraZoom>,d0
    af90:	|         move.l d0,-(sp)
    af92:	|         move.l d1,-(sp)
    af94:	|         jsr 12aa8 <__divsf3>
    af9a:	|         addq.l #8,sp
    af9c:	|         move.l d0,-(sp)
    af9e:	|         move.l d2,-(sp)
    afa0:	|         jsr 12ef0 <__subsf3>
    afa6:	|         addq.l #8,sp
    afa8:	|         move.l d0,-(sp)
    afaa:	|         jsr 12b94 <__fixsfsi>
    afb0:	|         addq.l #4,sp
    afb2:	|         move.l d0,19d02 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    afb8:	|         move.l 19d06 <cameraY>,d0
    afbe:	|         move.l d0,-(sp)
    afc0:	|         jsr 12bfc <__floatsisf>
    afc6:	|         addq.l #4,sp
    afc8:	|         move.l d0,d2
    afca:	|         move.l 19b50 <winHeight>,d0
    afd0:	|         lsr.l #1,d0
    afd2:	|         move.l d0,-(sp)
    afd4:	|         jsr 12c24 <__floatunsisf>
    afda:	|         addq.l #4,sp
    afdc:	|         move.l d0,d1
    afde:	|         move.l 1814a <cameraZoom>,d0
    afe4:	|         move.l d0,-(sp)
    afe6:	|         move.l d1,-(sp)
    afe8:	|         jsr 12aa8 <__divsf3>
    afee:	|         addq.l #8,sp
    aff0:	|         move.l d0,-(sp)
    aff2:	|         move.l d2,-(sp)
    aff4:	|         jsr 12ef0 <__subsf3>
    affa:	|         addq.l #8,sp
    affc:	|         move.l d0,-(sp)
    affe:	|         jsr 12b94 <__fixsfsi>
    b004:	|         addq.l #4,sp
    b006:	|         move.l d0,19d06 <cameraY>

	if (cameraX < 0) cameraX = 0;
    b00c:	|         move.l 19d02 <cameraX>,d0
    b012:	|     /-- bpl.s b01e <builtIn_aimCamera+0x12e>
    b014:	|     |   clr.l 19d02 <cameraX>
    b01a:	|  /--|-- bra.w b0d4 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    b01e:	|  |  \-> move.l 19d02 <cameraX>,d0
    b024:	|  |      move.l d0,-(sp)
    b026:	|  |      jsr 12bfc <__floatsisf>
    b02c:	|  |      addq.l #4,sp
    b02e:	|  |      move.l d0,d2
    b030:	|  |      move.l 19ce4 <sceneWidth>,d0
    b036:	|  |      move.l d0,-(sp)
    b038:	|  |      jsr 12c24 <__floatunsisf>
    b03e:	|  |      addq.l #4,sp
    b040:	|  |      move.l d0,d3
    b042:	|  |      move.l 19b4c <winWidth>,d0
    b048:	|  |      move.l d0,-(sp)
    b04a:	|  |      jsr 12c24 <__floatunsisf>
    b050:	|  |      addq.l #4,sp
    b052:	|  |      move.l d0,d1
    b054:	|  |      move.l 1814a <cameraZoom>,d0
    b05a:	|  |      move.l d0,-(sp)
    b05c:	|  |      move.l d1,-(sp)
    b05e:	|  |      jsr 12aa8 <__divsf3>
    b064:	|  |      addq.l #8,sp
    b066:	|  |      move.l d0,-(sp)
    b068:	|  |      move.l d3,-(sp)
    b06a:	|  |      jsr 12ef0 <__subsf3>
    b070:	|  |      addq.l #8,sp
    b072:	|  |      move.l d0,-(sp)
    b074:	|  |      move.l d2,-(sp)
    b076:	|  |      jsr 12d68 <__gtsf2>
    b07c:	|  |      addq.l #8,sp
    b07e:	|  |      tst.l d0
    b080:	|  +----- ble.s b0d4 <builtIn_aimCamera+0x1e4>
    b082:	|  |      move.l 19ce4 <sceneWidth>,d0
    b088:	|  |      move.l d0,-(sp)
    b08a:	|  |      jsr 12c24 <__floatunsisf>
    b090:	|  |      addq.l #4,sp
    b092:	|  |      move.l d0,d2
    b094:	|  |      move.l 19b4c <winWidth>,d0
    b09a:	|  |      move.l d0,-(sp)
    b09c:	|  |      jsr 12c24 <__floatunsisf>
    b0a2:	|  |      addq.l #4,sp
    b0a4:	|  |      move.l d0,d1
    b0a6:	|  |      move.l 1814a <cameraZoom>,d0
    b0ac:	|  |      move.l d0,-(sp)
    b0ae:	|  |      move.l d1,-(sp)
    b0b0:	|  |      jsr 12aa8 <__divsf3>
    b0b6:	|  |      addq.l #8,sp
    b0b8:	|  |      move.l d0,-(sp)
    b0ba:	|  |      move.l d2,-(sp)
    b0bc:	|  |      jsr 12ef0 <__subsf3>
    b0c2:	|  |      addq.l #8,sp
    b0c4:	|  |      move.l d0,-(sp)
    b0c6:	|  |      jsr 12b94 <__fixsfsi>
    b0cc:	|  |      addq.l #4,sp
    b0ce:	|  |      move.l d0,19d02 <cameraX>
	if (cameraY < 0) cameraY = 0;
    b0d4:	|  \----> move.l 19d06 <cameraY>,d0
    b0da:	|     /-- bpl.s b0e6 <builtIn_aimCamera+0x1f6>
    b0dc:	|     |   clr.l 19d06 <cameraY>
    b0e2:	|  /--|-- bra.w b19c <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    b0e6:	|  |  \-> move.l 19d06 <cameraY>,d0
    b0ec:	|  |      move.l d0,-(sp)
    b0ee:	|  |      jsr 12bfc <__floatsisf>
    b0f4:	|  |      addq.l #4,sp
    b0f6:	|  |      move.l d0,d2
    b0f8:	|  |      move.l 19ce8 <sceneHeight>,d0
    b0fe:	|  |      move.l d0,-(sp)
    b100:	|  |      jsr 12c24 <__floatunsisf>
    b106:	|  |      addq.l #4,sp
    b108:	|  |      move.l d0,d3
    b10a:	|  |      move.l 19b50 <winHeight>,d0
    b110:	|  |      move.l d0,-(sp)
    b112:	|  |      jsr 12c24 <__floatunsisf>
    b118:	|  |      addq.l #4,sp
    b11a:	|  |      move.l d0,d1
    b11c:	|  |      move.l 1814a <cameraZoom>,d0
    b122:	|  |      move.l d0,-(sp)
    b124:	|  |      move.l d1,-(sp)
    b126:	|  |      jsr 12aa8 <__divsf3>
    b12c:	|  |      addq.l #8,sp
    b12e:	|  |      move.l d0,-(sp)
    b130:	|  |      move.l d3,-(sp)
    b132:	|  |      jsr 12ef0 <__subsf3>
    b138:	|  |      addq.l #8,sp
    b13a:	|  |      move.l d0,-(sp)
    b13c:	|  |      move.l d2,-(sp)
    b13e:	|  |      jsr 12d68 <__gtsf2>
    b144:	|  |      addq.l #8,sp
    b146:	|  |      tst.l d0
    b148:	|  +----- ble.s b19c <builtIn_aimCamera+0x2ac>
    b14a:	|  |      move.l 19ce8 <sceneHeight>,d0
    b150:	|  |      move.l d0,-(sp)
    b152:	|  |      jsr 12c24 <__floatunsisf>
    b158:	|  |      addq.l #4,sp
    b15a:	|  |      move.l d0,d2
    b15c:	|  |      move.l 19b50 <winHeight>,d0
    b162:	|  |      move.l d0,-(sp)
    b164:	|  |      jsr 12c24 <__floatunsisf>
    b16a:	|  |      addq.l #4,sp
    b16c:	|  |      move.l d0,d1
    b16e:	|  |      move.l 1814a <cameraZoom>,d0
    b174:	|  |      move.l d0,-(sp)
    b176:	|  |      move.l d1,-(sp)
    b178:	|  |      jsr 12aa8 <__divsf3>
    b17e:	|  |      addq.l #8,sp
    b180:	|  |      move.l d0,-(sp)
    b182:	|  |      move.l d2,-(sp)
    b184:	|  |      jsr 12ef0 <__subsf3>
    b18a:	|  |      addq.l #8,sp
    b18c:	|  |      move.l d0,-(sp)
    b18e:	|  |      jsr 12b94 <__fixsfsi>
    b194:	|  |      addq.l #4,sp
    b196:	|  |      move.l d0,19d06 <cameraY>
	return BR_CONTINUE;
    b19c:	|  \----> moveq #2,d0
}
    b19e:	\-------> move.l (sp)+,d2
    b1a0:	          move.l (sp)+,d3
    b1a2:	          rts

0000b1a4 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    b1a4:	       subq.l #4,sp
    b1a6:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    b1a8:	       movea.l 16(sp),a0
    b1ac:	       move.l 24(a0),d0
    b1b0:	       move.l d0,-(sp)
    b1b2:	       pea 1 <_start+0x1>
    b1b6:	       moveq #12,d0
    b1b8:	       add.l sp,d0
    b1ba:	       move.l d0,-(sp)
    b1bc:	       jsr 10750 <getValueType>
    b1c2:	       lea 12(sp),sp
    b1c6:	       tst.w d0
    b1c8:	   /-- bne.s b1d0 <builtIn_zoomCamera+0x2c>
    b1ca:	   |   moveq #1,d0
    b1cc:	/--|-- bra.w b3ca <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    b1d0:	|  \-> moveq #24,d0
    b1d2:	|      add.l 16(sp),d0
    b1d6:	|      move.l d0,-(sp)
    b1d8:	|      jsr 110d4 <trimStack>
    b1de:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    b1e0:	|      move.l 19c0c <input+0xa>,d0
    b1e6:	|      move.l d0,-(sp)
    b1e8:	|      jsr 12bfc <__floatsisf>
    b1ee:	|      addq.l #4,sp
    b1f0:	|      move.l d0,d1
    b1f2:	|      move.l 1814a <cameraZoom>,d0
    b1f8:	|      move.l d0,-(sp)
    b1fa:	|      move.l d1,-(sp)
    b1fc:	|      jsr 12cae <__mulsf3>
    b202:	|      addq.l #8,sp
    b204:	|      move.l d0,-(sp)
    b206:	|      jsr 12b94 <__fixsfsi>
    b20c:	|      addq.l #4,sp
    b20e:	|      move.l d0,19c0c <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    b214:	|      move.l 19c10 <input+0xe>,d0
    b21a:	|      move.l d0,-(sp)
    b21c:	|      jsr 12bfc <__floatsisf>
    b222:	|      addq.l #4,sp
    b224:	|      move.l d0,d1
    b226:	|      move.l 1814a <cameraZoom>,d0
    b22c:	|      move.l d0,-(sp)
    b22e:	|      move.l d1,-(sp)
    b230:	|      jsr 12cae <__mulsf3>
    b236:	|      addq.l #8,sp
    b238:	|      move.l d0,-(sp)
    b23a:	|      jsr 12b94 <__fixsfsi>
    b240:	|      addq.l #4,sp
    b242:	|      move.l d0,19c10 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    b248:	|      move.l 4(sp),d0
    b24c:	|      move.l d0,-(sp)
    b24e:	|      jsr 12bfc <__floatsisf>
    b254:	|      addq.l #4,sp
    b256:	|      move.l #1008981770,-(sp)
    b25c:	|      move.l d0,-(sp)
    b25e:	|      jsr 12cae <__mulsf3>
    b264:	|      addq.l #8,sp
    b266:	|      move.l d0,1814a <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    b26c:	|      move.l 19b4c <winWidth>,d0
    b272:	|      move.l d0,-(sp)
    b274:	|      jsr 12c24 <__floatunsisf>
    b27a:	|      addq.l #4,sp
    b27c:	|      move.l d0,d1
    b27e:	|      move.l 1814a <cameraZoom>,d0
    b284:	|      move.l d0,-(sp)
    b286:	|      move.l d1,-(sp)
    b288:	|      jsr 12aa8 <__divsf3>
    b28e:	|      addq.l #8,sp
    b290:	|      move.l d0,d2
    b292:	|      move.l 19ce4 <sceneWidth>,d0
    b298:	|      move.l d0,-(sp)
    b29a:	|      jsr 12c24 <__floatunsisf>
    b2a0:	|      addq.l #4,sp
    b2a2:	|      move.l d0,-(sp)
    b2a4:	|      move.l d2,-(sp)
    b2a6:	|      jsr 12d68 <__gtsf2>
    b2ac:	|      addq.l #8,sp
    b2ae:	|      tst.l d0
    b2b0:	|  /-- ble.s b2e6 <builtIn_zoomCamera+0x142>
    b2b2:	|  |   move.l 19b4c <winWidth>,d0
    b2b8:	|  |   move.l d0,-(sp)
    b2ba:	|  |   jsr 12c24 <__floatunsisf>
    b2c0:	|  |   addq.l #4,sp
    b2c2:	|  |   move.l d0,d2
    b2c4:	|  |   move.l 19ce4 <sceneWidth>,d0
    b2ca:	|  |   move.l d0,-(sp)
    b2cc:	|  |   jsr 12c24 <__floatunsisf>
    b2d2:	|  |   addq.l #4,sp
    b2d4:	|  |   move.l d0,-(sp)
    b2d6:	|  |   move.l d2,-(sp)
    b2d8:	|  |   jsr 12aa8 <__divsf3>
    b2de:	|  |   addq.l #8,sp
    b2e0:	|  |   move.l d0,1814a <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    b2e6:	|  \-> move.l 19b50 <winHeight>,d0
    b2ec:	|      move.l d0,-(sp)
    b2ee:	|      jsr 12c24 <__floatunsisf>
    b2f4:	|      addq.l #4,sp
    b2f6:	|      move.l d0,d1
    b2f8:	|      move.l 1814a <cameraZoom>,d0
    b2fe:	|      move.l d0,-(sp)
    b300:	|      move.l d1,-(sp)
    b302:	|      jsr 12aa8 <__divsf3>
    b308:	|      addq.l #8,sp
    b30a:	|      move.l d0,d2
    b30c:	|      move.l 19ce8 <sceneHeight>,d0
    b312:	|      move.l d0,-(sp)
    b314:	|      jsr 12c24 <__floatunsisf>
    b31a:	|      addq.l #4,sp
    b31c:	|      move.l d0,-(sp)
    b31e:	|      move.l d2,-(sp)
    b320:	|      jsr 12d68 <__gtsf2>
    b326:	|      addq.l #8,sp
    b328:	|      tst.l d0
    b32a:	|  /-- ble.s b360 <builtIn_zoomCamera+0x1bc>
    b32c:	|  |   move.l 19b50 <winHeight>,d0
    b332:	|  |   move.l d0,-(sp)
    b334:	|  |   jsr 12c24 <__floatunsisf>
    b33a:	|  |   addq.l #4,sp
    b33c:	|  |   move.l d0,d2
    b33e:	|  |   move.l 19ce8 <sceneHeight>,d0
    b344:	|  |   move.l d0,-(sp)
    b346:	|  |   jsr 12c24 <__floatunsisf>
    b34c:	|  |   addq.l #4,sp
    b34e:	|  |   move.l d0,-(sp)
    b350:	|  |   move.l d2,-(sp)
    b352:	|  |   jsr 12aa8 <__divsf3>
    b358:	|  |   addq.l #8,sp
    b35a:	|  |   move.l d0,1814a <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    b360:	|  \-> move.l 19c0c <input+0xa>,d0
    b366:	|      move.l d0,-(sp)
    b368:	|      jsr 12bfc <__floatsisf>
    b36e:	|      addq.l #4,sp
    b370:	|      move.l d0,d1
    b372:	|      move.l 1814a <cameraZoom>,d0
    b378:	|      move.l d0,-(sp)
    b37a:	|      move.l d1,-(sp)
    b37c:	|      jsr 12aa8 <__divsf3>
    b382:	|      addq.l #8,sp
    b384:	|      move.l d0,-(sp)
    b386:	|      jsr 12b94 <__fixsfsi>
    b38c:	|      addq.l #4,sp
    b38e:	|      move.l d0,19c0c <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    b394:	|      move.l 19c10 <input+0xe>,d0
    b39a:	|      move.l d0,-(sp)
    b39c:	|      jsr 12bfc <__floatsisf>
    b3a2:	|      addq.l #4,sp
    b3a4:	|      move.l d0,d1
    b3a6:	|      move.l 1814a <cameraZoom>,d0
    b3ac:	|      move.l d0,-(sp)
    b3ae:	|      move.l d1,-(sp)
    b3b0:	|      jsr 12aa8 <__divsf3>
    b3b6:	|      addq.l #8,sp
    b3b8:	|      move.l d0,-(sp)
    b3ba:	|      jsr 12b94 <__fixsfsi>
    b3c0:	|      addq.l #4,sp
    b3c2:	|      move.l d0,19c10 <input+0xe>

	return BR_CONTINUE;
    b3c8:	|      moveq #2,d0
}
    b3ca:	\----> move.l (sp)+,d2
    b3cc:	       addq.l #4,sp
    b3ce:	       rts

0000b3d0 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    b3d0:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    b3d2:	             tst.l 8(sp)
    b3d6:	         /-- bne.s b3ea <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    b3d8:	         |   pea 15f81 <main_sludge.c.2f5c5368+0x697>
    b3de:	         |   jsr 127a4 <KPrintF>
    b3e4:	         |   addq.l #4,sp
		return BR_ERROR;
    b3e6:	         |   moveq #1,d0
    b3e8:	/--------|-- bra.s b44a <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    b3ea:	|        \-> jsr c58 <rand>
    b3f0:	|            move.l d0,d1
    b3f2:	|            move.l 8(sp),d0
    b3f6:	|            move.l d0,-(sp)
    b3f8:	|            move.l d1,-(sp)
    b3fa:	|            jsr 13230 <__umodsi3>
    b400:	|            addq.l #8,sp
    b402:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    b404:	|     /----- bra.s b438 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    b406:	|  /--|----> move.l (sp),d0
    b408:	|  |  |      cmp.l 8(sp),d0
    b40c:	|  |  |  /-- bne.s b428 <builtIn_pickOne+0x58>
    b40e:	|  |  |  |   moveq #28,d0
    b410:	|  |  |  |   add.l 12(sp),d0
    b414:	|  |  |  |   movea.l 12(sp),a0
    b418:	|  |  |  |   move.l 24(a0),d1
    b41c:	|  |  |  |   move.l d0,-(sp)
    b41e:	|  |  |  |   move.l d1,-(sp)
    b420:	|  |  |  |   jsr 10c0a <copyVariable>
    b426:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    b428:	|  |  |  \-> moveq #24,d0
    b42a:	|  |  |      add.l 12(sp),d0
    b42e:	|  |  |      move.l d0,-(sp)
    b430:	|  |  |      jsr 110d4 <trimStack>
    b436:	|  |  |      addq.l #4,sp
	while (numParams --) {
    b438:	|  |  \----> move.l 8(sp),d0
    b43c:	|  |         move.l d0,d1
    b43e:	|  |         subq.l #1,d1
    b440:	|  |         move.l d1,8(sp)
    b444:	|  |         tst.l d0
    b446:	|  \-------- bne.s b406 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    b448:	|            moveq #2,d0
}
    b44a:	\----------> addq.l #4,sp
    b44c:	             rts

0000b44e <builtIn_substring>:

builtIn(substring)
{
    b44e:	       lea -40(sp),sp
    b452:	       move.l a6,-(sp)
    b454:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    b456:	       movea.l 56(sp),a0
    b45a:	       move.l 24(a0),d0
    b45e:	       move.l d0,-(sp)
    b460:	       pea 1 <_start+0x1>
    b464:	       lea 16(sp),a0
    b468:	       move.l a0,-(sp)
    b46a:	       jsr 10750 <getValueType>
    b470:	       lea 12(sp),sp
    b474:	       tst.w d0
    b476:	   /-- bne.s b47e <builtIn_substring+0x30>
    b478:	   |   moveq #1,d0
    b47a:	/--|-- bra.w b5f6 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    b47e:	|  \-> moveq #24,d0
    b480:	|      add.l 56(sp),d0
    b484:	|      move.l d0,-(sp)
    b486:	|      jsr 110d4 <trimStack>
    b48c:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    b48e:	|      movea.l 56(sp),a0
    b492:	|      move.l 24(a0),d0
    b496:	|      move.l d0,-(sp)
    b498:	|      pea 1 <_start+0x1>
    b49c:	|      lea 20(sp),a0
    b4a0:	|      move.l a0,-(sp)
    b4a2:	|      jsr 10750 <getValueType>
    b4a8:	|      lea 12(sp),sp
    b4ac:	|      tst.w d0
    b4ae:	|  /-- bne.s b4b6 <builtIn_substring+0x68>
    b4b0:	|  |   moveq #1,d0
    b4b2:	+--|-- bra.w b5f6 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    b4b6:	|  \-> moveq #24,d0
    b4b8:	|      add.l 56(sp),d0
    b4bc:	|      move.l d0,-(sp)
    b4be:	|      jsr 110d4 <trimStack>
    b4c4:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    b4c6:	|      movea.l 56(sp),a0
    b4ca:	|      move.l 24(a0),d0
    b4ce:	|      move.l d0,-(sp)
    b4d0:	|      jsr 10d26 <getTextFromAnyVar>
    b4d6:	|      addq.l #4,sp
    b4d8:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    b4dc:	|      moveq #24,d0
    b4de:	|      add.l 56(sp),d0
    b4e2:	|      move.l d0,-(sp)
    b4e4:	|      jsr 110d4 <trimStack>
    b4ea:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    b4ec:	|      move.l 44(sp),-(sp)
    b4f0:	|      jsr fc3c <strlen>
    b4f6:	|      addq.l #4,sp
    b4f8:	|      move.l d0,d1
    b4fa:	|      move.l 12(sp),d0
    b4fe:	|      movea.l d0,a0
    b500:	|      move.l 8(sp),d0
    b504:	|      add.l a0,d0
    b506:	|      cmp.l d1,d0
    b508:	|  /-- bls.s b53e <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    b50a:	|  |   move.l 44(sp),-(sp)
    b50e:	|  |   jsr fc3c <strlen>
    b514:	|  |   addq.l #4,sp
    b516:	|  |   move.l d0,d1
    b518:	|  |   move.l 12(sp),d0
    b51c:	|  |   sub.l d0,d1
    b51e:	|  |   move.l d1,d0
    b520:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    b524:	|  |   move.l 44(sp),-(sp)
    b528:	|  |   jsr fc3c <strlen>
    b52e:	|  |   addq.l #4,sp
    b530:	|  |   move.l d0,d1
    b532:	|  |   move.l 12(sp),d0
    b536:	|  |   cmp.l d1,d0
    b538:	|  +-- bls.s b53e <builtIn_substring+0xf0>
            start = 0;
    b53a:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    b53e:	|  \-> move.l 8(sp),d0
    b542:	|  /-- bpl.s b548 <builtIn_substring+0xfa>
        length = 0;
    b544:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    b548:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    b54e:	|      move.l 12(sp),d1
    b552:	|      move.l 8(sp),d0
    b556:	|      move.l d1,d2
    b558:	|      add.l d0,d2
    b55a:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    b55e:	|      move.l 36(sp),d0
    b562:	|      sub.l 40(sp),d0
    b566:	|      addq.l #1,d0
    b568:	|      move.l d0,32(sp)
    b56c:	|      clr.l 28(sp)
    b570:	|      move.l 19c4c <SysBase>,d0
    b576:	|      movea.l d0,a6
    b578:	|      move.l 32(sp),d0
    b57c:	|      move.l 28(sp),d1
    b580:	|      jsr -684(a6)
    b584:	|      move.l d0,24(sp)
    b588:	|      move.l 24(sp),d0
    b58c:	|      move.l d0,20(sp)
    if (!newString) {
    b590:	|  /-- bne.s b596 <builtIn_substring+0x148>
        return BR_ERROR;
    b592:	|  |   moveq #1,d0
    b594:	+--|-- bra.s b5f6 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    b596:	|  \-> move.l 36(sp),d0
    b59a:	|      sub.l 40(sp),d0
    b59e:	|      move.l d0,d1
    b5a0:	|      move.l 40(sp),d0
    b5a4:	|      add.l 44(sp),d0
    b5a8:	|      move.l d1,-(sp)
    b5aa:	|      move.l d0,-(sp)
    b5ac:	|      move.l 28(sp),-(sp)
    b5b0:	|      jsr 12758 <memcpy>
    b5b6:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    b5ba:	|      move.l 36(sp),d0
    b5be:	|      sub.l 40(sp),d0
    b5c2:	|      movea.l 20(sp),a0
    b5c6:	|      adda.l d0,a0
    b5c8:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    b5ca:	|      moveq #28,d0
    b5cc:	|      add.l 56(sp),d0
    b5d0:	|      move.l 20(sp),-(sp)
    b5d4:	|      move.l d0,-(sp)
    b5d6:	|      jsr 10972 <makeTextVar>
    b5dc:	|      addq.l #8,sp
    FreeVec(newString);
    b5de:	|      move.l 20(sp),16(sp)
    b5e4:	|      move.l 19c4c <SysBase>,d0
    b5ea:	|      movea.l d0,a6
    b5ec:	|      movea.l 16(sp),a1
    b5f0:	|      jsr -690(a6)
    return BR_CONTINUE;
    b5f4:	|      moveq #2,d0
}
    b5f6:	\----> move.l (sp)+,d2
    b5f8:	       movea.l (sp)+,a6
    b5fa:	       lea 40(sp),sp
    b5fe:	       rts

0000b600 <builtIn_stringLength>:

builtIn(stringLength)
{
    b600:	subq.l #8,sp
    b602:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    b604:	movea.l 20(sp),a0
    b608:	move.l 24(a0),d0
    b60c:	move.l d0,-(sp)
    b60e:	jsr 10d26 <getTextFromAnyVar>
    b614:	addq.l #4,sp
    b616:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    b61a:	moveq #24,d0
    b61c:	add.l 20(sp),d0
    b620:	move.l d0,-(sp)
    b622:	jsr 110d4 <trimStack>
    b628:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    b62a:	move.l 8(sp),-(sp)
    b62e:	jsr fc3c <strlen>
    b634:	addq.l #4,sp
    b636:	move.l d0,d1
    b638:	moveq #28,d0
    b63a:	add.l 20(sp),d0
    b63e:	move.l d1,-(sp)
    b640:	pea 1 <_start+0x1>
    b644:	move.l d0,-(sp)
    b646:	jsr 11042 <setVariable>
    b64c:	lea 12(sp),sp
	FreeVec(newText);
    b650:	move.l 8(sp),4(sp)
    b656:	move.l 19c4c <SysBase>,d0
    b65c:	movea.l d0,a6
    b65e:	movea.l 4(sp),a1
    b662:	jsr -690(a6)
	return BR_CONTINUE;
    b666:	moveq #2,d0
}
    b668:	movea.l (sp)+,a6
    b66a:	addq.l #8,sp
    b66c:	rts

0000b66e <builtIn_newStack>:

builtIn(newStack)
{
    b66e:	             lea -12(sp),sp
    b672:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    b674:	             moveq #28,d0
    b676:	             add.l 24(sp),d0
    b67a:	             move.l d0,-(sp)
    b67c:	             jsr 1099e <unlinkVar>
    b682:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    b684:	             movea.l 24(sp),a0
    b688:	             moveq #6,d0
    b68a:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    b68e:	             moveq #12,d1
    b690:	             move.l d1,12(sp)
    b694:	             clr.l 8(sp)
    b698:	             move.l 19c4c <SysBase>,d0
    b69e:	             movea.l d0,a6
    b6a0:	             move.l 12(sp),d0
    b6a4:	             move.l 8(sp),d1
    b6a8:	             jsr -684(a6)
    b6ac:	             move.l d0,4(sp)
    b6b0:	             move.l 4(sp),d0
    b6b4:	             movea.l 24(sp),a0
    b6b8:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    b6bc:	             movea.l 24(sp),a0
    b6c0:	             move.l 32(a0),d0
    b6c4:	         /-- bne.s b6cc <builtIn_newStack+0x5e>
    b6c6:	         |   moveq #1,d0
    b6c8:	/--------|-- bra.w b75e <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    b6cc:	|        \-> movea.l 24(sp),a0
    b6d0:	|            movea.l 32(a0),a0
    b6d4:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    b6d6:	|            movea.l 24(sp),a0
    b6da:	|            movea.l 32(a0),a0
    b6de:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    b6e2:	|            movea.l 24(sp),a0
    b6e6:	|            movea.l 32(a0),a0
    b6ea:	|            moveq #1,d0
    b6ec:	|            move.l d0,8(a0)
    
    while (numParams--) {
    b6f0:	|     /----- bra.s b74c <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    b6f2:	|  /--|----> movea.l 24(sp),a0
    b6f6:	|  |  |      move.l 32(a0),d0
    b6fa:	|  |  |      move.l d0,d1
    b6fc:	|  |  |      movea.l 24(sp),a0
    b700:	|  |  |      move.l 24(a0),d0
    b704:	|  |  |      move.l d1,-(sp)
    b706:	|  |  |      move.l d0,-(sp)
    b708:	|  |  |      jsr ff8c <addVarToStack>
    b70e:	|  |  |      addq.l #8,sp
    b710:	|  |  |      tst.w d0
    b712:	|  |  |  /-- bne.s b718 <builtIn_newStack+0xaa>
    b714:	|  |  |  |   moveq #1,d0
    b716:	+--|--|--|-- bra.s b75e <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    b718:	|  |  |  \-> movea.l 24(sp),a0
    b71c:	|  |  |      movea.l 32(a0),a0
    b720:	|  |  |      move.l 4(a0),d0
    b724:	|  |  |  /-- bne.s b73c <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    b726:	|  |  |  |   movea.l 24(sp),a0
    b72a:	|  |  |  |   movea.l 32(a0),a1
    b72e:	|  |  |  |   movea.l 24(sp),a0
    b732:	|  |  |  |   movea.l 32(a0),a0
    b736:	|  |  |  |   move.l (a1),d0
    b738:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    b73c:	|  |  |  \-> moveq #24,d0
    b73e:	|  |  |      add.l 24(sp),d0
    b742:	|  |  |      move.l d0,-(sp)
    b744:	|  |  |      jsr 110d4 <trimStack>
    b74a:	|  |  |      addq.l #4,sp
    while (numParams--) {
    b74c:	|  |  \----> move.l 20(sp),d0
    b750:	|  |         move.l d0,d1
    b752:	|  |         subq.l #1,d1
    b754:	|  |         move.l d1,20(sp)
    b758:	|  |         tst.l d0
    b75a:	|  \-------- bne.s b6f2 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    b75c:	|            moveq #2,d0
}
    b75e:	\----------> movea.l (sp)+,a6
    b760:	             lea 12(sp),sp
    b764:	             rts

0000b766 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    b766:	          movea.l 8(sp),a0
    b76a:	          movea.l 24(a0),a0
    b76e:	          move.l (a0),d0
    b770:	          moveq #6,d1
    b772:	          cmp.l d0,d1
    b774:	      /-- beq.s b790 <builtIn_stackSize+0x2a>
    b776:	      |   moveq #10,d1
    b778:	      |   cmp.l d0,d1
    b77a:	   /--|-- beq.s b7d4 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    b77c:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    b77e:	   |  |   pea 15fb4 <main_sludge.c.2f5c5368+0x6ca>
    b784:	   |  |   jsr 127a4 <KPrintF>
    b78a:	   |  |   addq.l #4,sp
	return BR_ERROR;
    b78c:	   |  |   moveq #1,d0
    b78e:	/--|--|-- bra.s b80e <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    b790:	|  |  \-> movea.l 8(sp),a0
    b794:	|  |      movea.l 24(a0),a0
    b798:	|  |      move.l 4(a0),d0
    b79c:	|  |      move.l d0,-(sp)
    b79e:	|  |      jsr 110b0 <stackSize>
    b7a4:	|  |      addq.l #4,sp
    b7a6:	|  |      move.l d0,d1
    b7a8:	|  |      moveq #28,d0
    b7aa:	|  |      add.l 8(sp),d0
    b7ae:	|  |      move.l d1,-(sp)
    b7b0:	|  |      pea 1 <_start+0x1>
    b7b4:	|  |      move.l d0,-(sp)
    b7b6:	|  |      jsr 11042 <setVariable>
    b7bc:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    b7c0:	|  |      moveq #24,d0
    b7c2:	|  |      add.l 8(sp),d0
    b7c6:	|  |      move.l d0,-(sp)
    b7c8:	|  |      jsr 110d4 <trimStack>
    b7ce:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    b7d0:	|  |      moveq #2,d0
    b7d2:	+--|----- bra.s b80e <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    b7d4:	|  \----> movea.l 8(sp),a0
    b7d8:	|         movea.l 24(a0),a0
    b7dc:	|         movea.l 4(a0),a0
    b7e0:	|         move.l 4(a0),d1
    b7e4:	|         moveq #28,d0
    b7e6:	|         add.l 8(sp),d0
    b7ea:	|         move.l d1,-(sp)
    b7ec:	|         pea 1 <_start+0x1>
    b7f0:	|         move.l d0,-(sp)
    b7f2:	|         jsr 11042 <setVariable>
    b7f8:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    b7fc:	|         moveq #24,d0
    b7fe:	|         add.l 8(sp),d0
    b802:	|         move.l d0,-(sp)
    b804:	|         jsr 110d4 <trimStack>
    b80a:	|         addq.l #4,sp
			return BR_CONTINUE;
    b80c:	|         moveq #2,d0
}
    b80e:	\-------> rts

0000b810 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    b810:	       movea.l 8(sp),a0
    b814:	       movea.l 24(a0),a0
    b818:	       move.l (a0),d0
    b81a:	       moveq #6,d1
    b81c:	       cmp.l d0,d1
    b81e:	   /-- beq.s b832 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    b820:	   |   pea 15fdd <main_sludge.c.2f5c5368+0x6f3>
    b826:	   |   jsr 127a4 <KPrintF>
    b82c:	   |   addq.l #4,sp
		return BR_ERROR;
    b82e:	   |   moveq #1,d0
    b830:	/--|-- bra.s b866 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    b832:	|  \-> moveq #28,d0
    b834:	|      add.l 8(sp),d0
    b838:	|      movea.l 8(sp),a0
    b83c:	|      move.l 24(a0),d1
    b840:	|      move.l d0,-(sp)
    b842:	|      move.l d1,-(sp)
    b844:	|      jsr 10256 <copyStack>
    b84a:	|      addq.l #8,sp
    b84c:	|      tst.w d0
    b84e:	|  /-- bne.s b854 <builtIn_copyStack+0x44>
    b850:	|  |   moveq #1,d0
    b852:	+--|-- bra.s b866 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    b854:	|  \-> moveq #24,d0
    b856:	|      add.l 8(sp),d0
    b85a:	|      move.l d0,-(sp)
    b85c:	|      jsr 110d4 <trimStack>
    b862:	|      addq.l #4,sp
	return BR_CONTINUE;
    b864:	|      moveq #2,d0
}
    b866:	\----> rts

0000b868 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b868:	       movea.l 8(sp),a0
    b86c:	       movea.l 24(a0),a0
    b870:	       movea.l 8(a0),a0
    b874:	       move.l (a0),d0
    b876:	       moveq #6,d1
    b878:	       cmp.l d0,d1
    b87a:	   /-- beq.s b890 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    b87c:	   |   pea 15ff6 <main_sludge.c.2f5c5368+0x70c>
    b882:	   |   jsr 127a4 <KPrintF>
    b888:	   |   addq.l #4,sp
		return BR_ERROR;
    b88a:	   |   moveq #1,d0
    b88c:	/--|-- bra.w b91e <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    b890:	|  \-> movea.l 8(sp),a0
    b894:	|      movea.l 24(a0),a0
    b898:	|      movea.l 8(a0),a0
    b89c:	|      move.l 4(a0),d0
    b8a0:	|      move.l d0,d1
    b8a2:	|      movea.l 8(sp),a0
    b8a6:	|      move.l 24(a0),d0
    b8aa:	|      move.l d1,-(sp)
    b8ac:	|      move.l d0,-(sp)
    b8ae:	|      jsr ff8c <addVarToStack>
    b8b4:	|      addq.l #8,sp
    b8b6:	|      tst.w d0
    b8b8:	|  /-- bne.s b8be <builtIn_pushToStack+0x56>
		return BR_ERROR;
    b8ba:	|  |   moveq #1,d0
    b8bc:	+--|-- bra.s b91e <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    b8be:	|  \-> movea.l 8(sp),a0
    b8c2:	|      movea.l 24(a0),a0
    b8c6:	|      movea.l 8(a0),a0
    b8ca:	|      movea.l 4(a0),a0
    b8ce:	|      movea.l (a0),a0
    b8d0:	|      move.l 8(a0),d0
    b8d4:	|  /-- bne.s b8fc <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    b8d6:	|  |   movea.l 8(sp),a0
    b8da:	|  |   movea.l 24(a0),a0
    b8de:	|  |   movea.l 8(a0),a0
    b8e2:	|  |   movea.l 4(a0),a1
    b8e6:	|  |   movea.l 8(sp),a0
    b8ea:	|  |   movea.l 24(a0),a0
    b8ee:	|  |   movea.l 8(a0),a0
    b8f2:	|  |   movea.l 4(a0),a0
    b8f6:	|  |   move.l (a1),d0
    b8f8:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    b8fc:	|  \-> moveq #24,d0
    b8fe:	|      add.l 8(sp),d0
    b902:	|      move.l d0,-(sp)
    b904:	|      jsr 110d4 <trimStack>
    b90a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    b90c:	|      moveq #24,d0
    b90e:	|      add.l 8(sp),d0
    b912:	|      move.l d0,-(sp)
    b914:	|      jsr 110d4 <trimStack>
    b91a:	|      addq.l #4,sp
	return BR_CONTINUE;
    b91c:	|      moveq #2,d0
}
    b91e:	\----> rts

0000b920 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    b920:	             movea.l 8(sp),a0
    b924:	             movea.l 24(a0),a0
    b928:	             movea.l 8(a0),a0
    b92c:	             move.l (a0),d0
    b92e:	             moveq #6,d1
    b930:	             cmp.l d0,d1
    b932:	         /-- beq.s b948 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    b934:	         |   pea 15ff6 <main_sludge.c.2f5c5368+0x70c>
    b93a:	         |   jsr 127a4 <KPrintF>
    b940:	         |   addq.l #4,sp
		return BR_ERROR;
    b942:	         |   moveq #1,d0
    b944:	/--------|-- bra.w ba36 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    b948:	|        \-> movea.l 8(sp),a0
    b94c:	|            movea.l 24(a0),a0
    b950:	|            movea.l 8(a0),a0
    b954:	|            movea.l 4(a0),a0
    b958:	|            move.l (a0),d0
    b95a:	|     /----- bne.s b9b4 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    b95c:	|     |      movea.l 8(sp),a0
    b960:	|     |      movea.l 24(a0),a0
    b964:	|     |      movea.l 8(a0),a0
    b968:	|     |      move.l 4(a0),d0
    b96c:	|     |      move.l d0,d1
    b96e:	|     |      movea.l 8(sp),a0
    b972:	|     |      move.l 24(a0),d0
    b976:	|     |      move.l d1,-(sp)
    b978:	|     |      move.l d0,-(sp)
    b97a:	|     |      jsr ff8c <addVarToStack>
    b980:	|     |      addq.l #8,sp
    b982:	|     |      tst.w d0
    b984:	|     |  /-- bne.s b98c <builtIn_enqueue+0x6c>
			return BR_ERROR;
    b986:	|     |  |   moveq #1,d0
    b988:	+-----|--|-- bra.w ba36 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    b98c:	|     |  \-> movea.l 8(sp),a0
    b990:	|     |      movea.l 24(a0),a0
    b994:	|     |      movea.l 8(a0),a0
    b998:	|     |      movea.l 4(a0),a1
    b99c:	|     |      movea.l 8(sp),a0
    b9a0:	|     |      movea.l 24(a0),a0
    b9a4:	|     |      movea.l 8(a0),a0
    b9a8:	|     |      movea.l 4(a0),a0
    b9ac:	|     |      move.l (a1),d0
    b9ae:	|     |      move.l d0,4(a0)
    b9b2:	|  /--|----- bra.s ba14 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    b9b4:	|  |  \----> movea.l 8(sp),a0
    b9b8:	|  |         movea.l 24(a0),a0
    b9bc:	|  |         movea.l 8(a0),a0
    b9c0:	|  |         movea.l 4(a0),a0
    b9c4:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    b9c8:	|  |         move.l d0,d1
    b9ca:	|  |         addq.l #8,d1
    b9cc:	|  |         movea.l 8(sp),a0
    b9d0:	|  |         move.l 24(a0),d0
    b9d4:	|  |         move.l d1,-(sp)
    b9d6:	|  |         move.l d0,-(sp)
    b9d8:	|  |         jsr ff8c <addVarToStack>
    b9de:	|  |         addq.l #8,sp
    b9e0:	|  |         tst.w d0
    b9e2:	|  |     /-- bne.s b9e8 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    b9e4:	|  |     |   moveq #1,d0
    b9e6:	+--|-----|-- bra.s ba36 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    b9e8:	|  |     \-> movea.l 8(sp),a0
    b9ec:	|  |         movea.l 24(a0),a0
    b9f0:	|  |         movea.l 8(a0),a0
    b9f4:	|  |         movea.l 4(a0),a0
    b9f8:	|  |         movea.l 4(a0),a1
    b9fc:	|  |         movea.l 8(sp),a0
    ba00:	|  |         movea.l 24(a0),a0
    ba04:	|  |         movea.l 8(a0),a0
    ba08:	|  |         movea.l 4(a0),a0
    ba0c:	|  |         move.l 8(a1),d0
    ba10:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    ba14:	|  \-------> moveq #24,d0
    ba16:	|            add.l 8(sp),d0
    ba1a:	|            move.l d0,-(sp)
    ba1c:	|            jsr 110d4 <trimStack>
    ba22:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    ba24:	|            moveq #24,d0
    ba26:	|            add.l 8(sp),d0
    ba2a:	|            move.l d0,-(sp)
    ba2c:	|            jsr 110d4 <trimStack>
    ba32:	|            addq.l #4,sp
	return BR_CONTINUE;
    ba34:	|            moveq #2,d0
}
    ba36:	\----------> rts

0000ba38 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    ba38:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    ba3a:	       movea.l 12(sp),a0
    ba3e:	       movea.l 24(a0),a0
    ba42:	       movea.l 8(a0),a0
    ba46:	       move.l (a0),d0
    ba48:	       moveq #6,d1
    ba4a:	       cmp.l d0,d1
    ba4c:	   /-- beq.s ba62 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    ba4e:	   |   pea 15fdd <main_sludge.c.2f5c5368+0x6f3>
    ba54:	   |   jsr 127a4 <KPrintF>
    ba5a:	   |   addq.l #4,sp
		return BR_ERROR;
    ba5c:	   |   moveq #1,d0
    ba5e:	/--|-- bra.w baf8 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    ba62:	|  \-> movea.l 12(sp),a0
    ba66:	|      movea.l 24(a0),a0
    ba6a:	|      movea.l 8(a0),a0
    ba6e:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ba72:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    ba74:	|      movea.l 12(sp),a0
    ba78:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    ba7c:	|      clr.l -(sp)
    ba7e:	|      move.l d1,-(sp)
    ba80:	|      move.l d0,-(sp)
    ba82:	|      jsr 1032c <deleteVarFromStack>
    ba88:	|      lea 12(sp),sp
    ba8c:	|      move.l d0,d1
    ba8e:	|      moveq #28,d0
    ba90:	|      add.l 12(sp),d0
    ba94:	|      move.l d1,-(sp)
    ba96:	|      pea 1 <_start+0x1>
    ba9a:	|      move.l d0,-(sp)
    ba9c:	|      jsr 11042 <setVariable>
    baa2:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    baa6:	|      movea.l 12(sp),a0
    baaa:	|      movea.l 24(a0),a0
    baae:	|      movea.l 8(a0),a0
    bab2:	|      movea.l 4(a0),a0
    bab6:	|      move.l (a0),d0
    bab8:	|      movea.l 12(sp),a0
    babc:	|      movea.l 24(a0),a0
    bac0:	|      movea.l 8(a0),a0
    bac4:	|      movea.l 4(a0),a2
    bac8:	|      move.l d0,-(sp)
    baca:	|      jsr 1108c <stackFindLast>
    bad0:	|      addq.l #4,sp
    bad2:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    bad6:	|      moveq #24,d0
    bad8:	|      add.l 12(sp),d0
    badc:	|      move.l d0,-(sp)
    bade:	|      jsr 110d4 <trimStack>
    bae4:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    bae6:	|      moveq #24,d0
    bae8:	|      add.l 12(sp),d0
    baec:	|      move.l d0,-(sp)
    baee:	|      jsr 110d4 <trimStack>
    baf4:	|      addq.l #4,sp
	return BR_CONTINUE;
    baf6:	|      moveq #2,d0
}
    baf8:	\----> movea.l (sp)+,a2
    bafa:	       rts

0000bafc <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    bafc:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    bafe:	       movea.l 12(sp),a0
    bb02:	       movea.l 24(a0),a0
    bb06:	       movea.l 8(a0),a0
    bb0a:	       move.l (a0),d0
    bb0c:	       moveq #6,d1
    bb0e:	       cmp.l d0,d1
    bb10:	   /-- beq.s bb26 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    bb12:	   |   pea 15fdd <main_sludge.c.2f5c5368+0x6f3>
    bb18:	   |   jsr 127a4 <KPrintF>
    bb1e:	   |   addq.l #4,sp
		return BR_ERROR;
    bb20:	   |   moveq #1,d0
    bb22:	/--|-- bra.w bbbe <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    bb26:	|  \-> movea.l 12(sp),a0
    bb2a:	|      movea.l 24(a0),a0
    bb2e:	|      movea.l 8(a0),a0
    bb32:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    bb36:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    bb38:	|      movea.l 12(sp),a0
    bb3c:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    bb40:	|      pea 1 <_start+0x1>
    bb44:	|      move.l d1,-(sp)
    bb46:	|      move.l d0,-(sp)
    bb48:	|      jsr 1032c <deleteVarFromStack>
    bb4e:	|      lea 12(sp),sp
    bb52:	|      move.l d0,d1
    bb54:	|      moveq #28,d0
    bb56:	|      add.l 12(sp),d0
    bb5a:	|      move.l d1,-(sp)
    bb5c:	|      pea 1 <_start+0x1>
    bb60:	|      move.l d0,-(sp)
    bb62:	|      jsr 11042 <setVariable>
    bb68:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    bb6c:	|      movea.l 12(sp),a0
    bb70:	|      movea.l 24(a0),a0
    bb74:	|      movea.l 8(a0),a0
    bb78:	|      movea.l 4(a0),a0
    bb7c:	|      move.l (a0),d0
    bb7e:	|      movea.l 12(sp),a0
    bb82:	|      movea.l 24(a0),a0
    bb86:	|      movea.l 8(a0),a0
    bb8a:	|      movea.l 4(a0),a2
    bb8e:	|      move.l d0,-(sp)
    bb90:	|      jsr 1108c <stackFindLast>
    bb96:	|      addq.l #4,sp
    bb98:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    bb9c:	|      moveq #24,d0
    bb9e:	|      add.l 12(sp),d0
    bba2:	|      move.l d0,-(sp)
    bba4:	|      jsr 110d4 <trimStack>
    bbaa:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    bbac:	|      moveq #24,d0
    bbae:	|      add.l 12(sp),d0
    bbb2:	|      move.l d0,-(sp)
    bbb4:	|      jsr 110d4 <trimStack>
    bbba:	|      addq.l #4,sp
	return BR_CONTINUE;
    bbbc:	|      moveq #2,d0
}
    bbbe:	\----> movea.l (sp)+,a2
    bbc0:	       rts

0000bbc2 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    bbc2:	       movea.l 8(sp),a0
    bbc6:	       movea.l 24(a0),a0
    bbca:	       move.l (a0),d0
    bbcc:	       moveq #6,d1
    bbce:	       cmp.l d0,d1
    bbd0:	   /-- beq.s bbe4 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    bbd2:	   |   pea 15fdd <main_sludge.c.2f5c5368+0x6f3>
    bbd8:	   |   jsr 127a4 <KPrintF>
    bbde:	   |   addq.l #4,sp
		return BR_ERROR;
    bbe0:	   |   moveq #1,d0
    bbe2:	/--|-- bra.s bc4e <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    bbe4:	|  \-> movea.l 8(sp),a0
    bbe8:	|      movea.l 24(a0),a0
    bbec:	|      movea.l 4(a0),a0
    bbf0:	|      move.l (a0),d0
    bbf2:	|  /-- bne.s bc06 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    bbf4:	|  |   pea 1600e <main_sludge.c.2f5c5368+0x724>
    bbfa:	|  |   jsr 127a4 <KPrintF>
    bc00:	|  |   addq.l #4,sp
		return BR_ERROR;
    bc02:	|  |   moveq #1,d0
    bc04:	+--|-- bra.s bc4e <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    bc06:	|  \-> moveq #28,d0
    bc08:	|      add.l 8(sp),d0
    bc0c:	|      movea.l 8(sp),a0
    bc10:	|      movea.l 24(a0),a0
    bc14:	|      movea.l 4(a0),a0
    bc18:	|      move.l (a0),d1
    bc1a:	|      move.l d0,-(sp)
    bc1c:	|      move.l d1,-(sp)
    bc1e:	|      jsr 10c0a <copyVariable>
    bc24:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    bc26:	|      movea.l 8(sp),a0
    bc2a:	|      movea.l 24(a0),a0
    bc2e:	|      move.l 4(a0),d0
    bc32:	|      move.l d0,-(sp)
    bc34:	|      jsr 110d4 <trimStack>
    bc3a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    bc3c:	|      moveq #24,d0
    bc3e:	|      add.l 8(sp),d0
    bc42:	|      move.l d0,-(sp)
    bc44:	|      jsr 110d4 <trimStack>
    bc4a:	|      addq.l #4,sp
	return BR_CONTINUE;
    bc4c:	|      moveq #2,d0
}
    bc4e:	\----> rts

0000bc50 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    bc50:	       movea.l 8(sp),a0
    bc54:	       movea.l 24(a0),a0
    bc58:	       move.l (a0),d0
    bc5a:	       moveq #6,d1
    bc5c:	       cmp.l d0,d1
    bc5e:	   /-- beq.s bc72 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    bc60:	   |   pea 15fdd <main_sludge.c.2f5c5368+0x6f3>
    bc66:	   |   jsr 127a4 <KPrintF>
    bc6c:	   |   addq.l #4,sp
		return BR_ERROR;
    bc6e:	   |   moveq #1,d0
    bc70:	/--|-- bra.s bcc6 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    bc72:	|  \-> movea.l 8(sp),a0
    bc76:	|      movea.l 24(a0),a0
    bc7a:	|      movea.l 4(a0),a0
    bc7e:	|      move.l (a0),d0
    bc80:	|  /-- bne.s bc94 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    bc82:	|  |   pea 1600e <main_sludge.c.2f5c5368+0x724>
    bc88:	|  |   jsr 127a4 <KPrintF>
    bc8e:	|  |   addq.l #4,sp
		return BR_ERROR;
    bc90:	|  |   moveq #1,d0
    bc92:	+--|-- bra.s bcc6 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    bc94:	|  \-> moveq #28,d0
    bc96:	|      add.l 8(sp),d0
    bc9a:	|      movea.l 8(sp),a0
    bc9e:	|      movea.l 24(a0),a0
    bca2:	|      movea.l 4(a0),a0
    bca6:	|      move.l (a0),d1
    bca8:	|      move.l d0,-(sp)
    bcaa:	|      move.l d1,-(sp)
    bcac:	|      jsr 10c0a <copyVariable>
    bcb2:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    bcb4:	|      moveq #24,d0
    bcb6:	|      add.l 8(sp),d0
    bcba:	|      move.l d0,-(sp)
    bcbc:	|      jsr 110d4 <trimStack>
    bcc2:	|      addq.l #4,sp
	return BR_CONTINUE;
    bcc4:	|      moveq #2,d0
}
    bcc6:	\----> rts

0000bcc8 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    bcc8:	       movea.l 8(sp),a0
    bccc:	       movea.l 24(a0),a0
    bcd0:	       move.l (a0),d0
    bcd2:	       moveq #6,d1
    bcd4:	       cmp.l d0,d1
    bcd6:	   /-- beq.s bcea <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    bcd8:	   |   pea 15fdd <main_sludge.c.2f5c5368+0x6f3>
    bcde:	   |   jsr 127a4 <KPrintF>
    bce4:	   |   addq.l #4,sp
		return BR_ERROR;
    bce6:	   |   moveq #1,d0
    bce8:	/--|-- bra.s bd40 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    bcea:	|  \-> movea.l 8(sp),a0
    bcee:	|      movea.l 24(a0),a0
    bcf2:	|      movea.l 4(a0),a0
    bcf6:	|      move.l (a0),d0
    bcf8:	|  /-- bne.s bd0c <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    bcfa:	|  |   pea 1600e <main_sludge.c.2f5c5368+0x724>
    bd00:	|  |   jsr 127a4 <KPrintF>
    bd06:	|  |   addq.l #4,sp
		return BR_ERROR;
    bd08:	|  |   moveq #1,d0
    bd0a:	+--|-- bra.s bd40 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    bd0c:	|  \-> moveq #28,d0
    bd0e:	|      add.l 8(sp),d0
    bd12:	|      movea.l 8(sp),a0
    bd16:	|      movea.l 24(a0),a0
    bd1a:	|      movea.l 4(a0),a0
    bd1e:	|      move.l 4(a0),d1
    bd22:	|      move.l d0,-(sp)
    bd24:	|      move.l d1,-(sp)
    bd26:	|      jsr 10c0a <copyVariable>
    bd2c:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    bd2e:	|      moveq #24,d0
    bd30:	|      add.l 8(sp),d0
    bd34:	|      move.l d0,-(sp)
    bd36:	|      jsr 110d4 <trimStack>
    bd3c:	|      addq.l #4,sp
	return BR_CONTINUE;
    bd3e:	|      moveq #2,d0
}
    bd40:	\----> rts

0000bd42 <builtIn_random>:

builtIn(random)
{
    bd42:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    bd44:	       movea.l 12(sp),a0
    bd48:	       move.l 24(a0),d0
    bd4c:	       move.l d0,-(sp)
    bd4e:	       pea 1 <_start+0x1>
    bd52:	       move.l sp,d0
    bd54:	       addq.l #8,d0
    bd56:	       move.l d0,-(sp)
    bd58:	       jsr 10750 <getValueType>
    bd5e:	       lea 12(sp),sp
    bd62:	       tst.w d0
    bd64:	   /-- bne.s bd6a <builtIn_random+0x28>
		return BR_ERROR;
    bd66:	   |   moveq #1,d0
    bd68:	/--|-- bra.s bdb4 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    bd6a:	|  \-> moveq #24,d0
    bd6c:	|      add.l 12(sp),d0
    bd70:	|      move.l d0,-(sp)
    bd72:	|      jsr 110d4 <trimStack>
    bd78:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    bd7a:	|      move.l (sp),d0
    bd7c:	|  /-- bgt.s bd82 <builtIn_random+0x40>
    bd7e:	|  |   moveq #1,d0
    bd80:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    bd82:	|  \-> jsr c58 <rand>
    bd88:	|      move.l d0,d1
    bd8a:	|      move.l (sp),d0
    bd8c:	|      move.l d0,-(sp)
    bd8e:	|      move.l d1,-(sp)
    bd90:	|      jsr 13230 <__umodsi3>
    bd96:	|      addq.l #8,sp
    bd98:	|      move.l d0,d1
    bd9a:	|      moveq #28,d0
    bd9c:	|      add.l 12(sp),d0
    bda0:	|      move.l d1,-(sp)
    bda2:	|      pea 1 <_start+0x1>
    bda6:	|      move.l d0,-(sp)
    bda8:	|      jsr 11042 <setVariable>
    bdae:	|      lea 12(sp),sp
	return BR_CONTINUE;
    bdb2:	|      moveq #2,d0
}
    bdb4:	\----> addq.l #4,sp
    bdb6:	       rts

0000bdb8 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    bdb8:	nop
    bdba:	rts

0000bdbc <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    bdbc:	moveq #2,d0
}
    bdbe:	rts

0000bdc0 <builtIn_setPasteColour>:

	/*if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);Todo Amigize This?*/
	return BR_CONTINUE;
    bdc0:	moveq #2,d0
}
    bdc2:	rts

0000bdc4 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    bdc4:	moveq #2,d0
}
    bdc6:	rts

0000bdc8 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    bdc8:	moveq #2,d0
}
    bdca:	rts

0000bdcc <builtIn_setFont>:


builtIn(setFont)
{
    bdcc:	       lea -16(sp),sp
    bdd0:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    bdd2:	       movea.l 28(sp),a0
    bdd6:	       move.l 24(a0),d0
    bdda:	       move.l d0,-(sp)
    bddc:	       pea 1 <_start+0x1>
    bde0:	       lea 12(sp),a0
    bde4:	       move.l a0,-(sp)
    bde6:	       jsr 10750 <getValueType>
    bdec:	       lea 12(sp),sp
    bdf0:	       tst.w d0
    bdf2:	   /-- bne.s bdfa <builtIn_setFont+0x2e>
    bdf4:	   |   moveq #1,d0
    bdf6:	/--|-- bra.w bea8 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    bdfa:	|  \-> moveq #24,d0
    bdfc:	|      add.l 28(sp),d0
    be00:	|      move.l d0,-(sp)
    be02:	|      jsr 110d4 <trimStack>
    be08:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    be0a:	|      movea.l 28(sp),a0
    be0e:	|      move.l 24(a0),d0
    be12:	|      move.l d0,-(sp)
    be14:	|      jsr 10d26 <getTextFromAnyVar>
    be1a:	|      addq.l #4,sp
    be1c:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    be20:	|  /-- bne.s be28 <builtIn_setFont+0x5c>
    be22:	|  |   moveq #1,d0
    be24:	+--|-- bra.w bea8 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    be28:	|  \-> moveq #24,d0
    be2a:	|      add.l 28(sp),d0
    be2e:	|      move.l d0,-(sp)
    be30:	|      jsr 110d4 <trimStack>
    be36:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    be38:	|      movea.l 28(sp),a0
    be3c:	|      move.l 24(a0),d0
    be40:	|      move.l d0,-(sp)
    be42:	|      pea 5 <_start+0x5>
    be46:	|      lea 16(sp),a0
    be4a:	|      move.l a0,-(sp)
    be4c:	|      jsr 10750 <getValueType>
    be52:	|      lea 12(sp),sp
    be56:	|      tst.w d0
    be58:	|  /-- bne.s be5e <builtIn_setFont+0x92>
    be5a:	|  |   moveq #1,d0
    be5c:	+--|-- bra.s bea8 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    be5e:	|  \-> moveq #24,d0
    be60:	|      add.l 28(sp),d0
    be64:	|      move.l d0,-(sp)
    be66:	|      jsr 110d4 <trimStack>
    be6c:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    be6e:	|      move.l 4(sp),d1
    be72:	|      move.l 8(sp),d0
    be76:	|      move.l d1,-(sp)
    be78:	|      move.l 20(sp),-(sp)
    be7c:	|      move.l d0,-(sp)
    be7e:	|      jsr 11148 <loadFont>
    be84:	|      lea 12(sp),sp
    be88:	|      tst.w d0
    be8a:	|  /-- bne.s be90 <builtIn_setFont+0xc4>
    be8c:	|  |   moveq #1,d0
    be8e:	+--|-- bra.s bea8 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    be90:	|  \-> move.l 16(sp),12(sp)
    be96:	|      move.l 19c4c <SysBase>,d0
    be9c:	|      movea.l d0,a6
    be9e:	|      movea.l 12(sp),a1
    bea2:	|      jsr -690(a6)

    return BR_CONTINUE;
    bea6:	|      moveq #2,d0
}
    bea8:	\----> movea.l (sp)+,a6
    beaa:	       lea 16(sp),sp
    beae:	       rts

0000beb0 <builtIn_inFont>:

builtIn(inFont)
{
    beb0:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    beb2:	       movea.l 12(sp),a0
    beb6:	       move.l 24(a0),d0
    beba:	       move.l d0,-(sp)
    bebc:	       jsr 10d26 <getTextFromAnyVar>
    bec2:	       addq.l #4,sp
    bec4:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    bec6:	   /-- bne.s becc <builtIn_inFont+0x1c>
    bec8:	   |   moveq #1,d0
    beca:	/--|-- bra.s bf02 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    becc:	|  \-> moveq #24,d0
    bece:	|      add.l 12(sp),d0
    bed2:	|      move.l d0,-(sp)
    bed4:	|      jsr 110d4 <trimStack>
    beda:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    bedc:	|      move.l (sp),-(sp)
    bede:	|      jsr 1111c <isInFont>
    bee4:	|      addq.l #4,sp
    bee6:	|      movea.w d0,a0
    bee8:	|      moveq #28,d0
    beea:	|      add.l 12(sp),d0
    beee:	|      move.l a0,-(sp)
    bef0:	|      pea 1 <_start+0x1>
    bef4:	|      move.l d0,-(sp)
    bef6:	|      jsr 11042 <setVariable>
    befc:	|      lea 12(sp),sp
	return BR_CONTINUE;
    bf00:	|      moveq #2,d0
}
    bf02:	\----> addq.l #4,sp
    bf04:	       rts

0000bf06 <builtIn_pasteString>:

builtIn(pasteString)
{
    bf06:	       lea -16(sp),sp
    bf0a:	       move.l a6,-(sp)
    bf0c:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    bf0e:	       movea.l 32(sp),a0
    bf12:	       move.l 24(a0),d0
    bf16:	       move.l d0,-(sp)
    bf18:	       jsr 10d26 <getTextFromAnyVar>
    bf1e:	       addq.l #4,sp
    bf20:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    bf24:	       moveq #24,d0
    bf26:	       add.l 32(sp),d0
    bf2a:	       move.l d0,-(sp)
    bf2c:	       jsr 110d4 <trimStack>
    bf32:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    bf34:	       movea.l 32(sp),a0
    bf38:	       move.l 24(a0),d0
    bf3c:	       move.l d0,-(sp)
    bf3e:	       pea 1 <_start+0x1>
    bf42:	       lea 20(sp),a0
    bf46:	       move.l a0,-(sp)
    bf48:	       jsr 10750 <getValueType>
    bf4e:	       lea 12(sp),sp
    bf52:	       tst.w d0
    bf54:	   /-- bne.s bf5c <builtIn_pasteString+0x56>
    bf56:	   |   moveq #1,d0
    bf58:	/--|-- bra.w bfe4 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    bf5c:	|  \-> moveq #24,d0
    bf5e:	|      add.l 32(sp),d0
    bf62:	|      move.l d0,-(sp)
    bf64:	|      jsr 110d4 <trimStack>
    bf6a:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    bf6c:	|      movea.l 32(sp),a0
    bf70:	|      move.l 24(a0),d0
    bf74:	|      move.l d0,-(sp)
    bf76:	|      pea 1 <_start+0x1>
    bf7a:	|      lea 16(sp),a0
    bf7e:	|      move.l a0,-(sp)
    bf80:	|      jsr 10750 <getValueType>
    bf86:	|      lea 12(sp),sp
    bf8a:	|      tst.w d0
    bf8c:	|  /-- bne.s bf92 <builtIn_pasteString+0x8c>
    bf8e:	|  |   moveq #1,d0
    bf90:	+--|-- bra.s bfe4 <builtIn_pasteString+0xde>
    trimStack(&fun->stack);
    bf92:	|  \-> moveq #24,d0
    bf94:	|      add.l 32(sp),d0
    bf98:	|      move.l d0,-(sp)
    bf9a:	|      jsr 110d4 <trimStack>
    bfa0:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    bfa2:	|      move.l 8(sp),d0
    bfa6:	|      cmpi.l #65535,d0
    bfac:	|  /-- bne.s bfcc <builtIn_pasteString+0xc6>
    bfae:	|  |   move.l 19b4c <winWidth>,d2
    bfb4:	|  |   move.l 20(sp),-(sp)
    bfb8:	|  |   jsr 1112e <stringWidth>
    bfbe:	|  |   addq.l #4,sp
    bfc0:	|  |   move.l d2,d1
    bfc2:	|  |   sub.l d0,d1
    bfc4:	|  |   move.l d1,d0
    bfc6:	|  |   lsr.l #1,d0
    bfc8:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette);
    //pasteStringToBackdrop(newText, x, y, pastePalette); //Todo: Amigize this
    FreeVec(newText); 
    bfcc:	|  \-> move.l 20(sp),16(sp)
    bfd2:	|      move.l 19c4c <SysBase>,d0
    bfd8:	|      movea.l d0,a6
    bfda:	|      movea.l 16(sp),a1
    bfde:	|      jsr -690(a6)
    return BR_CONTINUE;
    bfe2:	|      moveq #2,d0
}
    bfe4:	\----> move.l (sp)+,d2
    bfe6:	       movea.l (sp)+,a6
    bfe8:	       lea 16(sp),sp
    bfec:	       rts

0000bfee <builtIn_anim>:

builtIn(anim)
{
    bfee:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    bff2:	       moveq #1,d0
    bff4:	       cmp.l 16(sp),d0
    bff8:	   /-- blt.s c00e <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    bffa:	   |   pea 16021 <main_sludge.c.2f5c5368+0x737>
    c000:	   |   jsr 127a4 <KPrintF>
    c006:	   |   addq.l #4,sp
		return BR_ERROR;
    c008:	   |   moveq #1,d0
    c00a:	/--|-- bra.w c09c <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    c00e:	|  \-> moveq #24,d1
    c010:	|      add.l 20(sp),d1
    c014:	|      move.l 16(sp),d0
    c018:	|      subq.l #1,d0
    c01a:	|      move.l d1,-(sp)
    c01c:	|      move.l d0,-(sp)
    c01e:	|      jsr 6068 <createPersonaAnim>
    c024:	|      addq.l #8,sp
    c026:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c02a:	|      movea.l 20(sp),a0
    c02e:	|      move.l 24(a0),d0
    c032:	|      move.l d0,-(sp)
    c034:	|      pea 5 <_start+0x5>
    c038:	|      lea 8(sp),a0
    c03c:	|      move.l a0,-(sp)
    c03e:	|      jsr 10750 <getValueType>
    c044:	|      lea 12(sp),sp
    c048:	|      tst.w d0
    c04a:	|  /-- bne.s c050 <builtIn_anim+0x62>
    c04c:	|  |   moveq #1,d0
    c04e:	+--|-- bra.s c09c <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    c050:	|  \-> moveq #24,d0
    c052:	|      add.l 20(sp),d0
    c056:	|      move.l d0,-(sp)
    c058:	|      jsr 110d4 <trimStack>
    c05e:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    c060:	|      move.l (sp),d0
    c062:	|      move.l d0,-(sp)
    c064:	|      jsr 8412 <loadBankForAnim>
    c06a:	|      addq.l #4,sp
    c06c:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    c070:	|  /-- bne.s c076 <builtIn_anim+0x88>
    c072:	|  |   moveq #1,d0
    c074:	+--|-- bra.s c09c <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    c076:	|  \-> move.l 4(sp),-(sp)
    c07a:	|      move.l 12(sp),-(sp)
    c07e:	|      jsr 78b6 <setBankFile>
    c084:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    c086:	|      moveq #28,d0
    c088:	|      add.l 20(sp),d0
    c08c:	|      move.l 8(sp),-(sp)
    c090:	|      move.l d0,-(sp)
    c092:	|      jsr 10ffe <newAnimationVariable>
    c098:	|      addq.l #8,sp
	return BR_CONTINUE;
    c09a:	|      moveq #2,d0
}
    c09c:	\----> lea 12(sp),sp
    c0a0:	       rts

0000c0a2 <builtIn_costume>:

builtIn(costume)
{
    c0a2:	          lea -32(sp),sp
    c0a6:	          move.l a6,-(sp)
    c0a8:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    c0aa:	          moveq #8,d0
    c0ac:	          move.l d0,32(sp)
    c0b0:	          clr.l 28(sp)
    c0b4:	          move.l 19c4c <SysBase>,d0
    c0ba:	          movea.l d0,a6
    c0bc:	          move.l 32(sp),d0
    c0c0:	          move.l 28(sp),d1
    c0c4:	          jsr -684(a6)
    c0c8:	          move.l d0,24(sp)
    c0cc:	          move.l 24(sp),d0
    c0d0:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    c0d4:	      /-- bne.s c0dc <builtIn_costume+0x3a>
    c0d6:	      |   moveq #1,d0
    c0d8:	/-----|-- bra.w c1c4 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    c0dc:	|     \-> move.l 44(sp),d0
    c0e0:	|         pea 3 <_start+0x3>
    c0e4:	|         move.l d0,-(sp)
    c0e6:	|         jsr 131d4 <__divsi3>
    c0ec:	|         addq.l #8,sp
    c0ee:	|         movea.l 20(sp),a0
    c0f2:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    c0f6:	|         tst.l 44(sp)
    c0fa:	|     /-- beq.s c110 <builtIn_costume+0x6e>
    c0fc:	|     |   movea.l 20(sp),a0
    c100:	|     |   move.l 4(a0),d1
    c104:	|     |   move.l d1,d0
    c106:	|     |   add.l d0,d0
    c108:	|     |   add.l d1,d0
    c10a:	|     |   cmp.l 44(sp),d0
    c10e:	|  /--|-- beq.s c124 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    c110:	|  |  \-> pea 1605b <main_sludge.c.2f5c5368+0x771>
    c116:	|  |      jsr 127a4 <KPrintF>
    c11c:	|  |      addq.l #4,sp
        return BR_ERROR;
    c11e:	|  |      moveq #1,d0
    c120:	+--|----- bra.w c1c4 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    c124:	|  \----> move.l 44(sp),d0
    c128:	|         add.l d0,d0
    c12a:	|         add.l d0,d0
    c12c:	|         move.l d0,16(sp)
    c130:	|         clr.l 12(sp)
    c134:	|         move.l 19c4c <SysBase>,d0
    c13a:	|         movea.l d0,a6
    c13c:	|         move.l 16(sp),d0
    c140:	|         move.l 12(sp),d1
    c144:	|         jsr -684(a6)
    c148:	|         move.l d0,8(sp)
    c14c:	|         move.l 8(sp),d0
    c150:	|         movea.l 20(sp),a0
    c154:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    c156:	|         movea.l 20(sp),a0
    c15a:	|         move.l (a0),d0
    c15c:	|     /-- bne.s c162 <builtIn_costume+0xc0>
    c15e:	|     |   moveq #1,d0
    c160:	+-----|-- bra.s c1c4 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    c162:	|     \-> move.l 44(sp),d0
    c166:	|         subq.l #1,d0
    c168:	|         move.l d0,36(sp)
    c16c:	|     /-- bra.s c1a8 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    c16e:	|  /--|-> movea.l 48(sp),a0
    c172:	|  |  |   move.l 24(a0),d0
    c176:	|  |  |   movea.l 20(sp),a0
    c17a:	|  |  |   movea.l (a0),a0
    c17c:	|  |  |   move.l 36(sp),d1
    c180:	|  |  |   add.l d1,d1
    c182:	|  |  |   add.l d1,d1
    c184:	|  |  |   lea (0,a0,d1.l),a2
    c188:	|  |  |   move.l d0,-(sp)
    c18a:	|  |  |   jsr 10c28 <getAnimationFromVar>
    c190:	|  |  |   addq.l #4,sp
    c192:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    c194:	|  |  |   moveq #24,d0
    c196:	|  |  |   add.l 48(sp),d0
    c19a:	|  |  |   move.l d0,-(sp)
    c19c:	|  |  |   jsr 110d4 <trimStack>
    c1a2:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    c1a4:	|  |  |   subq.l #1,36(sp)
    c1a8:	|  |  \-> tst.l 36(sp)
    c1ac:	|  \----- bge.s c16e <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    c1ae:	|         moveq #28,d0
    c1b0:	|         add.l 48(sp),d0
    c1b4:	|         move.l 20(sp),-(sp)
    c1b8:	|         move.l d0,-(sp)
    c1ba:	|         jsr 11020 <newCostumeVariable>
    c1c0:	|         addq.l #8,sp
    return BR_CONTINUE;
    c1c2:	|         moveq #2,d0
}
    c1c4:	\-------> movea.l (sp)+,a2
    c1c6:	          movea.l (sp)+,a6
    c1c8:	          lea 32(sp),sp
    c1cc:	          rts

0000c1ce <builtIn_launch>:

builtIn(launch)
{
    c1ce:	          lea -20(sp),sp
    c1d2:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    c1d4:	          movea.l 32(sp),a0
    c1d8:	          move.l 24(a0),d0
    c1dc:	          move.l d0,-(sp)
    c1de:	          jsr 10d26 <getTextFromAnyVar>
    c1e4:	          addq.l #4,sp
    c1e6:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    c1ea:	      /-- bne.s c1f2 <builtIn_launch+0x24>
    c1ec:	      |   moveq #1,d0
    c1ee:	/-----|-- bra.w c320 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    c1f2:	|     \-> move.l 20(sp),-(sp)
    c1f6:	|         jsr 2fe <encodeFilename>
    c1fc:	|         addq.l #4,sp
    c1fe:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    c202:	|         moveq #24,d0
    c204:	|         add.l 32(sp),d0
    c208:	|         move.l d0,-(sp)
    c20a:	|         jsr 110d4 <trimStack>
    c210:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    c212:	|         movea.l 20(sp),a0
    c216:	|         move.b (a0),d0
    c218:	|         cmpi.b #104,d0
    c21c:	|  /----- bne.s c286 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    c21e:	|  |      movea.l 20(sp),a0
    c222:	|  |      addq.l #1,a0
    c224:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    c226:	|  |      cmpi.b #116,d0
    c22a:	|  +----- bne.s c286 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    c22c:	|  |      movea.l 20(sp),a0
    c230:	|  |      addq.l #2,a0
    c232:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    c234:	|  |      cmpi.b #116,d0
    c238:	|  +----- bne.s c286 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    c23a:	|  |      movea.l 20(sp),a0
    c23e:	|  |      addq.l #3,a0
    c240:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    c242:	|  |      cmpi.b #112,d0
    c246:	|  +----- bne.s c286 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    c248:	|  |      movea.l 20(sp),a0
    c24c:	|  |      addq.l #4,a0
    c24e:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    c250:	|  |      cmpi.b #58,d0
    c254:	|  |  /-- beq.s c272 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    c256:	|  |  |   movea.l 20(sp),a0
    c25a:	|  |  |   addq.l #4,a0
    c25c:	|  |  |   move.b (a0),d0
    c25e:	|  |  |   cmpi.b #115,d0
    c262:	|  +--|-- bne.s c286 <builtIn_launch+0xb8>
    c264:	|  |  |   movea.l 20(sp),a0
    c268:	|  |  |   addq.l #5,a0
    c26a:	|  |  |   move.b (a0),d0
    c26c:	|  |  |   cmpi.b #58,d0
    c270:	|  +--|-- bne.s c286 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    c272:	|  |  \-> move.l 20(sp),-(sp)
    c276:	|  |      jsr b8 <copyString>
    c27c:	|  |      addq.l #4,sp
    c27e:	|  |      move.l d0,19d0a <launchMe>
    c284:	|  |  /-- bra.s c2d8 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    c286:	|  \--|-> move.l 19b60 <gamePath>,d0
    c28c:	|     |   pea 160a6 <main_sludge.c.2f5c5368+0x7bc>
    c292:	|     |   move.l d0,-(sp)
    c294:	|     |   jsr fc7c <joinStrings>
    c29a:	|     |   addq.l #8,sp
    c29c:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    c2a0:	|     |   move.l 16(sp),-(sp)
    c2a4:	|     |   move.l 16(sp),-(sp)
    c2a8:	|     |   jsr fc7c <joinStrings>
    c2ae:	|     |   addq.l #8,sp
    c2b0:	|     |   move.l d0,19d0a <launchMe>
        FreeVec(newText);
    c2b6:	|     |   move.l 16(sp),8(sp)
    c2bc:	|     |   move.l 19c4c <SysBase>,d0
    c2c2:	|     |   movea.l d0,a6
    c2c4:	|     |   movea.l 8(sp),a1
    c2c8:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    c2cc:	|     |   move.l 19d0a <launchMe>,d0
    c2d2:	|     +-- bne.s c2d8 <builtIn_launch+0x10a>
    c2d4:	|     |   moveq #1,d0
    c2d6:	+-----|-- bra.s c320 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    c2d8:	|     \-> move.l 20(sp),4(sp)
    c2de:	|         move.l 19c4c <SysBase>,d0
    c2e4:	|         movea.l d0,a6
    c2e6:	|         movea.l 4(sp),a1
    c2ea:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    c2ee:	|         clr.l -(sp)
    c2f0:	|         jsr 13ce <setGraphicsWindow>
    c2f6:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    c2f8:	|         moveq #28,d0
    c2fa:	|         add.l 32(sp),d0
    c2fe:	|         pea 1 <_start+0x1>
    c302:	|         pea 1 <_start+0x1>
    c306:	|         move.l d0,-(sp)
    c308:	|         jsr 11042 <setVariable>
    c30e:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    c312:	|         moveq #28,d0
    c314:	|         add.l 32(sp),d0
    c318:	|         move.l d0,19d0e <launchResult>

    return BR_KEEP_AND_PAUSE;
    c31e:	|         moveq #0,d0
}
    c320:	\-------> movea.l (sp)+,a6
    c322:	          lea 20(sp),sp
    c326:	          rts

0000c328 <builtIn_pause>:

builtIn(pause)
{
    c328:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c32a:	       movea.l 12(sp),a0
    c32e:	       move.l 24(a0),d0
    c332:	       move.l d0,-(sp)
    c334:	       pea 1 <_start+0x1>
    c338:	       move.l sp,d0
    c33a:	       addq.l #8,d0
    c33c:	       move.l d0,-(sp)
    c33e:	       jsr 10750 <getValueType>
    c344:	       lea 12(sp),sp
    c348:	       tst.w d0
    c34a:	   /-- bne.s c350 <builtIn_pause+0x28>
    c34c:	   |   moveq #1,d0
    c34e:	/--|-- bra.s c37e <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    c350:	|  \-> moveq #24,d0
    c352:	|      add.l 12(sp),d0
    c356:	|      move.l d0,-(sp)
    c358:	|      jsr 110d4 <trimStack>
    c35e:	|      addq.l #4,sp
	if (theTime > 0) {
    c360:	|      move.l (sp),d0
    c362:	|  /-- ble.s c37c <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    c364:	|  |   move.l (sp),d0
    c366:	|  |   subq.l #1,d0
    c368:	|  |   movea.l 12(sp),a0
    c36c:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    c370:	|  |   movea.l 12(sp),a0
    c374:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    c378:	|  |   moveq #0,d0
    c37a:	+--|-- bra.s c37e <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    c37c:	|  \-> moveq #2,d0
}
    c37e:	\----> addq.l #4,sp
    c380:	       rts

0000c382 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    c382:	jsr 1fd0 <completeTimers>
	return BR_CONTINUE;
    c388:	moveq #2,d0
}
    c38a:	rts

0000c38c <builtIn_callEvent>:

builtIn(callEvent)
{
    c38c:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c390:	       movea.l 20(sp),a0
    c394:	       move.l 24(a0),d0
    c398:	       move.l d0,-(sp)
    c39a:	       pea 7 <_start+0x7>
    c39e:	       lea 8(sp),a0
    c3a2:	       move.l a0,-(sp)
    c3a4:	       jsr 10750 <getValueType>
    c3aa:	       lea 12(sp),sp
    c3ae:	       tst.w d0
    c3b0:	   /-- bne.s c3b8 <builtIn_callEvent+0x2c>
    c3b2:	   |   moveq #1,d0
    c3b4:	/--|-- bra.w c44e <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    c3b8:	|  \-> moveq #24,d0
    c3ba:	|      add.l 20(sp),d0
    c3be:	|      move.l d0,-(sp)
    c3c0:	|      jsr 110d4 <trimStack>
    c3c6:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    c3c8:	|      movea.l 20(sp),a0
    c3cc:	|      move.l 24(a0),d0
    c3d0:	|      move.l d0,-(sp)
    c3d2:	|      pea 7 <_start+0x7>
    c3d6:	|      moveq #12,d0
    c3d8:	|      add.l sp,d0
    c3da:	|      move.l d0,-(sp)
    c3dc:	|      jsr 10750 <getValueType>
    c3e2:	|      lea 12(sp),sp
    c3e6:	|      tst.w d0
    c3e8:	|  /-- bne.s c3ee <builtIn_callEvent+0x62>
    c3ea:	|  |   moveq #1,d0
    c3ec:	+--|-- bra.s c44e <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    c3ee:	|  \-> moveq #24,d0
    c3f0:	|      add.l 20(sp),d0
    c3f4:	|      move.l d0,-(sp)
    c3f6:	|      jsr 110d4 <trimStack>
    c3fc:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    c3fe:	|      move.l (sp),d1
    c400:	|      move.l 4(sp),d0
    c404:	|      move.l d1,-(sp)
    c406:	|      move.l d0,-(sp)
    c408:	|      jsr 95d6 <getCombinationFunction>
    c40e:	|      addq.l #8,sp
    c410:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    c414:	|  /-- beq.s c434 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    c416:	|  |   moveq #28,d0
    c418:	|  |   add.l 20(sp),d0
    c41c:	|  |   move.l 8(sp),-(sp)
    c420:	|  |   pea 2 <_start+0x2>
    c424:	|  |   move.l d0,-(sp)
    c426:	|  |   jsr 11042 <setVariable>
    c42c:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    c430:	|  |   moveq #4,d0
    c432:	+--|-- bra.s c44e <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    c434:	|  \-> moveq #28,d0
    c436:	|      add.l 20(sp),d0
    c43a:	|      clr.l -(sp)
    c43c:	|      pea 1 <_start+0x1>
    c440:	|      move.l d0,-(sp)
    c442:	|      jsr 11042 <setVariable>
    c448:	|      lea 12(sp),sp
	return BR_CONTINUE;
    c44c:	|      moveq #2,d0
}
    c44e:	\----> lea 12(sp),sp
    c452:	       rts

0000c454 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    c454:	move.w #1,19d1a <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    c45c:	moveq #2,d0
}
    c45e:	rts

0000c460 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    c460:	moveq #24,d0
    c462:	add.l 8(sp),d0
    c466:	move.l d0,-(sp)
    c468:	jsr 110d4 <trimStack>
    c46e:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    c470:	pea 160a8 <main_sludge.c.2f5c5368+0x7be>
    c476:	jsr 127a4 <KPrintF>
    c47c:	addq.l #4,sp
	return BR_CONTINUE;
    c47e:	moveq #2,d0
}
    c480:	rts

0000c482 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    c482:	pea 160a8 <main_sludge.c.2f5c5368+0x7be>
    c488:	jsr 127a4 <KPrintF>
    c48e:	addq.l #4,sp
	return BR_CONTINUE;
    c490:	moveq #2,d0
}
    c492:	rts

0000c494 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    c494:	pea 160a8 <main_sludge.c.2f5c5368+0x7be>
    c49a:	jsr 127a4 <KPrintF>
    c4a0:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    c4a2:	moveq #2,d0
}
    c4a4:	rts

0000c4a6 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    c4a6:	pea 160a8 <main_sludge.c.2f5c5368+0x7be>
    c4ac:	jsr 127a4 <KPrintF>
    c4b2:	addq.l #4,sp
	return BR_CONTINUE;
    c4b4:	moveq #2,d0
}
    c4b6:	rts

0000c4b8 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    c4b8:	pea 160a8 <main_sludge.c.2f5c5368+0x7be>
    c4be:	jsr 127a4 <KPrintF>
    c4c4:	addq.l #4,sp
	return BR_CONTINUE;
    c4c6:	moveq #2,d0
}
    c4c8:	rts

0000c4ca <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    c4ca:	pea 160a8 <main_sludge.c.2f5c5368+0x7be>
    c4d0:	jsr 127a4 <KPrintF>
    c4d6:	addq.l #4,sp
	return BR_CONTINUE;
    c4d8:	moveq #2,d0
}
    c4da:	rts

0000c4dc <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    c4dc:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c4e0:	       movea.l 20(sp),a0
    c4e4:	       move.l 24(a0),d0
    c4e8:	       move.l d0,-(sp)
    c4ea:	       pea 1 <_start+0x1>
    c4ee:	       moveq #16,d0
    c4f0:	       add.l sp,d0
    c4f2:	       move.l d0,-(sp)
    c4f4:	       jsr 10750 <getValueType>
    c4fa:	       lea 12(sp),sp
    c4fe:	       tst.w d0
    c500:	   /-- bne.s c508 <builtIn_startMusic+0x2c>
    c502:	   |   moveq #1,d0
    c504:	/--|-- bra.w c5a8 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    c508:	|  \-> moveq #24,d0
    c50a:	|      add.l 20(sp),d0
    c50e:	|      move.l d0,-(sp)
    c510:	|      jsr 110d4 <trimStack>
    c516:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c518:	|      movea.l 20(sp),a0
    c51c:	|      move.l 24(a0),d0
    c520:	|      move.l d0,-(sp)
    c522:	|      pea 1 <_start+0x1>
    c526:	|      moveq #12,d0
    c528:	|      add.l sp,d0
    c52a:	|      move.l d0,-(sp)
    c52c:	|      jsr 10750 <getValueType>
    c532:	|      lea 12(sp),sp
    c536:	|      tst.w d0
    c538:	|  /-- bne.s c53e <builtIn_startMusic+0x62>
    c53a:	|  |   moveq #1,d0
    c53c:	+--|-- bra.s c5a8 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    c53e:	|  \-> moveq #24,d0
    c540:	|      add.l 20(sp),d0
    c544:	|      move.l d0,-(sp)
    c546:	|      jsr 110d4 <trimStack>
    c54c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c54e:	|      movea.l 20(sp),a0
    c552:	|      move.l 24(a0),d0
    c556:	|      move.l d0,-(sp)
    c558:	|      pea 5 <_start+0x5>
    c55c:	|      lea 8(sp),a0
    c560:	|      move.l a0,-(sp)
    c562:	|      jsr 10750 <getValueType>
    c568:	|      lea 12(sp),sp
    c56c:	|      tst.w d0
    c56e:	|  /-- bne.s c574 <builtIn_startMusic+0x98>
    c570:	|  |   moveq #1,d0
    c572:	+--|-- bra.s c5a8 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    c574:	|  \-> moveq #24,d0
    c576:	|      add.l 20(sp),d0
    c57a:	|      move.l d0,-(sp)
    c57c:	|      jsr 110d4 <trimStack>
    c582:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
    c584:	|      movea.l 8(sp),a0
    c588:	|      move.l 4(sp),d1
    c58c:	|      move.l (sp),d0
    c58e:	|      move.l a0,-(sp)
    c590:	|      move.l d1,-(sp)
    c592:	|      move.l d0,-(sp)
    c594:	|      jsr 923c <playMOD>
    c59a:	|      lea 12(sp),sp
    c59e:	|      tst.w d0
    c5a0:	|  /-- bne.s c5a6 <builtIn_startMusic+0xca>
    c5a2:	|  |   moveq #2,d0
    c5a4:	+--|-- bra.s c5a8 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
    c5a6:	|  \-> moveq #2,d0
}
    c5a8:	\----> lea 12(sp),sp
    c5ac:	       rts

0000c5ae <builtIn_stopMusic>:

builtIn(stopMusic)
{
    c5ae:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c5b0:	       movea.l 12(sp),a0
    c5b4:	       move.l 24(a0),d0
    c5b8:	       move.l d0,-(sp)
    c5ba:	       pea 1 <_start+0x1>
    c5be:	       move.l sp,d0
    c5c0:	       addq.l #8,d0
    c5c2:	       move.l d0,-(sp)
    c5c4:	       jsr 10750 <getValueType>
    c5ca:	       lea 12(sp),sp
    c5ce:	       tst.w d0
    c5d0:	   /-- bne.s c5d6 <builtIn_stopMusic+0x28>
    c5d2:	   |   moveq #1,d0
    c5d4:	/--|-- bra.s c5f4 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
    c5d6:	|  \-> moveq #24,d0
    c5d8:	|      add.l 12(sp),d0
    c5dc:	|      move.l d0,-(sp)
    c5de:	|      jsr 110d4 <trimStack>
    c5e4:	|      addq.l #4,sp
	stopMOD (v);
    c5e6:	|      move.l (sp),d0
    c5e8:	|      move.l d0,-(sp)
    c5ea:	|      jsr 92d8 <stopMOD>
    c5f0:	|      addq.l #4,sp
	return BR_CONTINUE;
    c5f2:	|      moveq #2,d0
}
    c5f4:	\----> addq.l #4,sp
    c5f6:	       rts

0000c5f8 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
    c5f8:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c5fa:	       movea.l 16(sp),a0
    c5fe:	       move.l 24(a0),d0
    c602:	       move.l d0,-(sp)
    c604:	       pea 1 <_start+0x1>
    c608:	       move.l sp,d0
    c60a:	       addq.l #8,d0
    c60c:	       move.l d0,-(sp)
    c60e:	       jsr 10750 <getValueType>
    c614:	       lea 12(sp),sp
    c618:	       tst.w d0
    c61a:	   /-- bne.s c620 <builtIn_setMusicVolume+0x28>
    c61c:	   |   moveq #1,d0
    c61e:	/--|-- bra.s c67a <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    c620:	|  \-> moveq #24,d0
    c622:	|      add.l 16(sp),d0
    c626:	|      move.l d0,-(sp)
    c628:	|      jsr 110d4 <trimStack>
    c62e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c630:	|      movea.l 16(sp),a0
    c634:	|      move.l 24(a0),d0
    c638:	|      move.l d0,-(sp)
    c63a:	|      pea 1 <_start+0x1>
    c63e:	|      moveq #12,d0
    c640:	|      add.l sp,d0
    c642:	|      move.l d0,-(sp)
    c644:	|      jsr 10750 <getValueType>
    c64a:	|      lea 12(sp),sp
    c64e:	|      tst.w d0
    c650:	|  /-- bne.s c656 <builtIn_setMusicVolume+0x5e>
    c652:	|  |   moveq #1,d0
    c654:	+--|-- bra.s c67a <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
    c656:	|  \-> moveq #24,d0
    c658:	|      add.l 16(sp),d0
    c65c:	|      move.l d0,-(sp)
    c65e:	|      jsr 110d4 <trimStack>
    c664:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
    c666:	|      move.l (sp),d1
    c668:	|      move.l 4(sp),d0
    c66c:	|      move.l d1,-(sp)
    c66e:	|      move.l d0,-(sp)
    c670:	|      jsr 92be <setMusicVolume>
    c676:	|      addq.l #8,sp
	return BR_CONTINUE;
    c678:	|      moveq #2,d0
}
    c67a:	\----> addq.l #8,sp
    c67c:	       rts

0000c67e <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
    c67e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c680:	       movea.l 12(sp),a0
    c684:	       move.l 24(a0),d0
    c688:	       move.l d0,-(sp)
    c68a:	       pea 1 <_start+0x1>
    c68e:	       move.l sp,d0
    c690:	       addq.l #8,d0
    c692:	       move.l d0,-(sp)
    c694:	       jsr 10750 <getValueType>
    c69a:	       lea 12(sp),sp
    c69e:	       tst.w d0
    c6a0:	   /-- bne.s c6a6 <builtIn_setDefaultMusicVolume+0x28>
    c6a2:	   |   moveq #1,d0
    c6a4:	/--|-- bra.s c6c4 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
    c6a6:	|  \-> moveq #24,d0
    c6a8:	|      add.l 12(sp),d0
    c6ac:	|      move.l d0,-(sp)
    c6ae:	|      jsr 110d4 <trimStack>
    c6b4:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
    c6b6:	|      move.l (sp),d0
    c6b8:	|      move.l d0,-(sp)
    c6ba:	|      jsr 92a2 <setDefaultMusicVolume>
    c6c0:	|      addq.l #4,sp
	return BR_CONTINUE;
    c6c2:	|      moveq #2,d0
}
    c6c4:	\----> addq.l #4,sp
    c6c6:	       rts

0000c6c8 <builtIn_playSound>:

builtIn(playSound)
{
    c6c8:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c6ca:	       movea.l 12(sp),a0
    c6ce:	       move.l 24(a0),d0
    c6d2:	       move.l d0,-(sp)
    c6d4:	       pea 5 <_start+0x5>
    c6d8:	       move.l sp,d0
    c6da:	       addq.l #8,d0
    c6dc:	       move.l d0,-(sp)
    c6de:	       jsr 10750 <getValueType>
    c6e4:	       lea 12(sp),sp
    c6e8:	       tst.w d0
    c6ea:	   /-- bne.s c6f0 <builtIn_playSound+0x28>
    c6ec:	   |   moveq #1,d0
    c6ee:	/--|-- bra.s c718 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
    c6f0:	|  \-> moveq #24,d0
    c6f2:	|      add.l 12(sp),d0
    c6f6:	|      move.l d0,-(sp)
    c6f8:	|      jsr 110d4 <trimStack>
    c6fe:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
    c700:	|      move.l (sp),d0
    c702:	|      clr.l -(sp)
    c704:	|      move.l d0,-(sp)
    c706:	|      jsr 92c6 <startSound>
    c70c:	|      addq.l #8,sp
    c70e:	|      tst.w d0
    c710:	|  /-- bne.s c716 <builtIn_playSound+0x4e>
    c712:	|  |   moveq #2,d0
    c714:	+--|-- bra.s c718 <builtIn_playSound+0x50>
	return BR_CONTINUE;
    c716:	|  \-> moveq #2,d0
}
    c718:	\----> addq.l #4,sp
    c71a:	       rts

0000c71c <builtIn_loopSound>:

builtIn(loopSound)
{
    c71c:	             lea -28(sp),sp
    c720:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
    c722:	             tst.l 36(sp)
    c726:	         /-- bgt.s c73c <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
    c728:	         |   pea 160cb <main_sludge.c.2f5c5368+0x7e1>
    c72e:	         |   jsr 127a4 <KPrintF>
    c734:	         |   addq.l #4,sp
		return BR_ERROR;
    c736:	         |   moveq #1,d0
    c738:	/--------|-- bra.w c8f8 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
    c73c:	|        \-> moveq #1,d0
    c73e:	|            cmp.l 36(sp),d0
    c742:	|     /----- blt.s c79e <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    c744:	|     |      movea.l 40(sp),a0
    c748:	|     |      move.l 24(a0),d0
    c74c:	|     |      move.l d0,-(sp)
    c74e:	|     |      pea 5 <_start+0x5>
    c752:	|     |      lea 16(sp),a0
    c756:	|     |      move.l a0,-(sp)
    c758:	|     |      jsr 10750 <getValueType>
    c75e:	|     |      lea 12(sp),sp
    c762:	|     |      tst.w d0
    c764:	|     |  /-- bne.s c76c <builtIn_loopSound+0x50>
    c766:	|     |  |   moveq #1,d0
    c768:	+-----|--|-- bra.w c8f8 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
    c76c:	|     |  \-> moveq #24,d0
    c76e:	|     |      add.l 40(sp),d0
    c772:	|     |      move.l d0,-(sp)
    c774:	|     |      jsr 110d4 <trimStack>
    c77a:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
    c77c:	|     |      move.l 8(sp),d0
    c780:	|     |      pea 1 <_start+0x1>
    c784:	|     |      move.l d0,-(sp)
    c786:	|     |      jsr 92c6 <startSound>
    c78c:	|     |      addq.l #8,sp
    c78e:	|     |      tst.w d0
    c790:	|     |  /-- bne.s c798 <builtIn_loopSound+0x7c>
    c792:	|     |  |   moveq #2,d0
    c794:	+-----|--|-- bra.w c8f8 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
    c798:	|     |  \-> moveq #2,d0
    c79a:	+-----|----- bra.w c8f8 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
    c79e:	|     \----> moveq #2,d1
    c7a0:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
    c7a4:	|            clr.l 28(sp)
		struct soundList *old = NULL;
    c7a8:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
    c7ac:	|            movea.l 40(sp),a0
    c7b0:	|            movea.l 24(a0),a0
    c7b4:	|            move.l (a0),d0
    c7b6:	|            moveq #5,d1
    c7b8:	|            cmp.l d0,d1
    c7ba:	|  /-------- beq.w c892 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
    c7be:	|  |         movea.l 40(sp),a0
    c7c2:	|  |         move.l 24(a0),d0
    c7c6:	|  |         move.l d0,-(sp)
    c7c8:	|  |         pea 1 <_start+0x1>
    c7cc:	|  |         lea 12(sp),a0
    c7d0:	|  |         move.l a0,-(sp)
    c7d2:	|  |         jsr 10750 <getValueType>
    c7d8:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
    c7dc:	|  |         moveq #24,d0
    c7de:	|  |         add.l 40(sp),d0
    c7e2:	|  |         move.l d0,-(sp)
    c7e4:	|  |         jsr 110d4 <trimStack>
    c7ea:	|  |         addq.l #4,sp
			numParams--;
    c7ec:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
    c7f0:	|  +-------- bra.w c892 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
    c7f4:	|  |  /----> movea.l 40(sp),a0
    c7f8:	|  |  |      move.l 24(a0),d0
    c7fc:	|  |  |      move.l d0,-(sp)
    c7fe:	|  |  |      pea 5 <_start+0x5>
    c802:	|  |  |      lea 16(sp),a0
    c806:	|  |  |      move.l a0,-(sp)
    c808:	|  |  |      jsr 10750 <getValueType>
    c80e:	|  |  |      lea 12(sp),sp
    c812:	|  |  |      tst.w d0
    c814:	|  |  |  /-- bne.s c82a <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
    c816:	|  |  |  |   pea 16109 <main_sludge.c.2f5c5368+0x81f>
    c81c:	|  |  |  |   jsr 127a4 <KPrintF>
    c822:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
    c824:	|  |  |  |   moveq #1,d0
    c826:	+--|--|--|-- bra.w c8f8 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
    c82a:	|  |  |  \-> moveq #20,d0
    c82c:	|  |  |      move.l d0,20(sp)
    c830:	|  |  |      clr.l 16(sp)
    c834:	|  |  |      move.l 19c4c <SysBase>,d0
    c83a:	|  |  |      movea.l d0,a6
    c83c:	|  |  |      move.l 20(sp),d0
    c840:	|  |  |      move.l 16(sp),d1
    c844:	|  |  |      jsr -684(a6)
    c848:	|  |  |      move.l d0,12(sp)
    c84c:	|  |  |      move.l 12(sp),d0
    c850:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
    c854:	|  |  |  /-- bne.s c85c <builtIn_loopSound+0x140>
    c856:	|  |  |  |   moveq #1,d0
    c858:	+--|--|--|-- bra.w c8f8 <builtIn_loopSound+0x1dc>

			s->next = old;
    c85c:	|  |  |  \-> movea.l 28(sp),a0
    c860:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
    c866:	|  |  |      movea.l 28(sp),a0
    c86a:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
    c86e:	|  |  |      move.l 8(sp),d0
    c872:	|  |  |      movea.l 28(sp),a0
    c876:	|  |  |      move.l d0,(a0)
			old = s;
    c878:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
    c87e:	|  |  |      moveq #24,d0
    c880:	|  |  |      add.l 40(sp),d0
    c884:	|  |  |      move.l d0,-(sp)
    c886:	|  |  |      jsr 110d4 <trimStack>
    c88c:	|  |  |      addq.l #4,sp
			numParams--;
    c88e:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
    c892:	|  \--|----> tst.l 36(sp)
    c896:	|     \----- bne.w c7f4 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
    c89a:	|        /-- bra.s c8a6 <builtIn_loopSound+0x18a>
    c89c:	|     /--|-> movea.l 28(sp),a0
    c8a0:	|     |  |   move.l 4(a0),28(sp)
    c8a6:	|     |  \-> movea.l 28(sp),a0
    c8aa:	|     |      move.l 4(a0),d0
    c8ae:	|     \----- bne.s c89c <builtIn_loopSound+0x180>
		if (doLoop > 1) {
    c8b0:	|            move.l 4(sp),d0
    c8b4:	|            moveq #1,d1
    c8b6:	|            cmp.l d0,d1
    c8b8:	|     /----- bge.s c8d0 <builtIn_loopSound+0x1b4>
			s->next = old;
    c8ba:	|     |      movea.l 28(sp),a0
    c8be:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
    c8c4:	|     |      movea.l 24(sp),a0
    c8c8:	|     |      move.l 28(sp),8(a0)
    c8ce:	|     |  /-- bra.s c8e0 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
    c8d0:	|     \--|-> move.l 4(sp),d0
    c8d4:	|        +-- beq.s c8e0 <builtIn_loopSound+0x1c4>
			s->next = s;
    c8d6:	|        |   movea.l 28(sp),a0
    c8da:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
    c8e0:	|        \-> movea.l 24(sp),a0
    c8e4:	|            moveq #-1,d0
    c8e6:	|            move.l d0,16(a0)
		playSoundList(old);
    c8ea:	|            move.l 24(sp),-(sp)
    c8ee:	|            jsr 9240 <playSoundList>
    c8f4:	|            addq.l #4,sp
		return BR_CONTINUE;
    c8f6:	|            moveq #2,d0
	}
}
    c8f8:	\----------> movea.l (sp)+,a6
    c8fa:	             lea 28(sp),sp
    c8fe:	             rts

0000c900 <builtIn_stopSound>:

builtIn(stopSound)
{
    c900:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c902:	       movea.l 12(sp),a0
    c906:	       move.l 24(a0),d0
    c90a:	       move.l d0,-(sp)
    c90c:	       pea 5 <_start+0x5>
    c910:	       move.l sp,d0
    c912:	       addq.l #8,d0
    c914:	       move.l d0,-(sp)
    c916:	       jsr 10750 <getValueType>
    c91c:	       lea 12(sp),sp
    c920:	       tst.w d0
    c922:	   /-- bne.s c928 <builtIn_stopSound+0x28>
    c924:	   |   moveq #1,d0
    c926:	/--|-- bra.s c946 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
    c928:	|  \-> moveq #24,d0
    c92a:	|      add.l 12(sp),d0
    c92e:	|      move.l d0,-(sp)
    c930:	|      jsr 110d4 <trimStack>
    c936:	|      addq.l #4,sp
	huntKillSound (v);
    c938:	|      move.l (sp),d0
    c93a:	|      move.l d0,-(sp)
    c93c:	|      jsr 9238 <huntKillSound>
    c942:	|      addq.l #4,sp
	return BR_CONTINUE;
    c944:	|      moveq #2,d0
}
    c946:	\----> addq.l #4,sp
    c948:	       rts

0000c94a <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
    c94a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c94c:	       movea.l 12(sp),a0
    c950:	       move.l 24(a0),d0
    c954:	       move.l d0,-(sp)
    c956:	       pea 1 <_start+0x1>
    c95a:	       move.l sp,d0
    c95c:	       addq.l #8,d0
    c95e:	       move.l d0,-(sp)
    c960:	       jsr 10750 <getValueType>
    c966:	       lea 12(sp),sp
    c96a:	       tst.w d0
    c96c:	   /-- bne.s c972 <builtIn_setDefaultSoundVolume+0x28>
    c96e:	   |   moveq #1,d0
    c970:	/--|-- bra.s c990 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
    c972:	|  \-> moveq #24,d0
    c974:	|      add.l 12(sp),d0
    c978:	|      move.l d0,-(sp)
    c97a:	|      jsr 110d4 <trimStack>
    c980:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
    c982:	|      move.l (sp),d0
    c984:	|      move.l d0,-(sp)
    c986:	|      jsr 92ae <setDefaultSoundVolume>
    c98c:	|      addq.l #4,sp
	return BR_CONTINUE;
    c98e:	|      moveq #2,d0
}
    c990:	\----> addq.l #4,sp
    c992:	       rts

0000c994 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
    c994:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    c996:	       movea.l 16(sp),a0
    c99a:	       move.l 24(a0),d0
    c99e:	       move.l d0,-(sp)
    c9a0:	       pea 1 <_start+0x1>
    c9a4:	       move.l sp,d0
    c9a6:	       addq.l #8,d0
    c9a8:	       move.l d0,-(sp)
    c9aa:	       jsr 10750 <getValueType>
    c9b0:	       lea 12(sp),sp
    c9b4:	       tst.w d0
    c9b6:	   /-- bne.s c9bc <builtIn_setSoundVolume+0x28>
    c9b8:	   |   moveq #1,d0
    c9ba:	/--|-- bra.s ca16 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    c9bc:	|  \-> moveq #24,d0
    c9be:	|      add.l 16(sp),d0
    c9c2:	|      move.l d0,-(sp)
    c9c4:	|      jsr 110d4 <trimStack>
    c9ca:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    c9cc:	|      movea.l 16(sp),a0
    c9d0:	|      move.l 24(a0),d0
    c9d4:	|      move.l d0,-(sp)
    c9d6:	|      pea 5 <_start+0x5>
    c9da:	|      moveq #12,d0
    c9dc:	|      add.l sp,d0
    c9de:	|      move.l d0,-(sp)
    c9e0:	|      jsr 10750 <getValueType>
    c9e6:	|      lea 12(sp),sp
    c9ea:	|      tst.w d0
    c9ec:	|  /-- bne.s c9f2 <builtIn_setSoundVolume+0x5e>
    c9ee:	|  |   moveq #1,d0
    c9f0:	+--|-- bra.s ca16 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
    c9f2:	|  \-> moveq #24,d0
    c9f4:	|      add.l 16(sp),d0
    c9f8:	|      move.l d0,-(sp)
    c9fa:	|      jsr 110d4 <trimStack>
    ca00:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
    ca02:	|      move.l (sp),d1
    ca04:	|      move.l 4(sp),d0
    ca08:	|      move.l d1,-(sp)
    ca0a:	|      move.l d0,-(sp)
    ca0c:	|      jsr 92c2 <setSoundVolume>
    ca12:	|      addq.l #8,sp
	return BR_CONTINUE;
    ca14:	|      moveq #2,d0
}
    ca16:	\----> addq.l #8,sp
    ca18:	       rts

0000ca1a <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
    ca1a:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ca1e:	       movea.l 20(sp),a0
    ca22:	       move.l 24(a0),d0
    ca26:	       move.l d0,-(sp)
    ca28:	       pea 1 <_start+0x1>
    ca2c:	       moveq #12,d0
    ca2e:	       add.l sp,d0
    ca30:	       move.l d0,-(sp)
    ca32:	       jsr 10750 <getValueType>
    ca38:	       lea 12(sp),sp
    ca3c:	       tst.w d0
    ca3e:	   /-- bne.s ca46 <builtIn_setSoundLoopPoints+0x2c>
    ca40:	   |   moveq #1,d0
    ca42:	/--|-- bra.w cade <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    ca46:	|  \-> moveq #24,d0
    ca48:	|      add.l 20(sp),d0
    ca4c:	|      move.l d0,-(sp)
    ca4e:	|      jsr 110d4 <trimStack>
    ca54:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ca56:	|      movea.l 20(sp),a0
    ca5a:	|      move.l 24(a0),d0
    ca5e:	|      move.l d0,-(sp)
    ca60:	|      pea 1 <_start+0x1>
    ca64:	|      lea 8(sp),a0
    ca68:	|      move.l a0,-(sp)
    ca6a:	|      jsr 10750 <getValueType>
    ca70:	|      lea 12(sp),sp
    ca74:	|      tst.w d0
    ca76:	|  /-- bne.s ca7c <builtIn_setSoundLoopPoints+0x62>
    ca78:	|  |   moveq #1,d0
    ca7a:	+--|-- bra.s cade <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    ca7c:	|  \-> moveq #24,d0
    ca7e:	|      add.l 20(sp),d0
    ca82:	|      move.l d0,-(sp)
    ca84:	|      jsr 110d4 <trimStack>
    ca8a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ca8c:	|      movea.l 20(sp),a0
    ca90:	|      move.l 24(a0),d0
    ca94:	|      move.l d0,-(sp)
    ca96:	|      pea 5 <_start+0x5>
    ca9a:	|      moveq #16,d0
    ca9c:	|      add.l sp,d0
    ca9e:	|      move.l d0,-(sp)
    caa0:	|      jsr 10750 <getValueType>
    caa6:	|      lea 12(sp),sp
    caaa:	|      tst.w d0
    caac:	|  /-- bne.s cab2 <builtIn_setSoundLoopPoints+0x98>
    caae:	|  |   moveq #1,d0
    cab0:	+--|-- bra.s cade <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
    cab2:	|  \-> moveq #24,d0
    cab4:	|      add.l 20(sp),d0
    cab8:	|      move.l d0,-(sp)
    caba:	|      jsr 110d4 <trimStack>
    cac0:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
    cac2:	|      movea.l 4(sp),a0
    cac6:	|      move.l (sp),d1
    cac8:	|      move.l 8(sp),d0
    cacc:	|      move.l a0,-(sp)
    cace:	|      move.l d1,-(sp)
    cad0:	|      move.l d0,-(sp)
    cad2:	|      jsr 92ba <setSoundLoop>
    cad8:	|      lea 12(sp),sp
	return BR_CONTINUE;
    cadc:	|      moveq #2,d0
}
    cade:	\----> lea 12(sp),sp
    cae2:	       rts

0000cae4 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
    cae4:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    cae6:	          movea.l 12(sp),a0
    caea:	          movea.l 24(a0),a0
    caee:	          move.l (a0),d0
    caf0:	          moveq #5,d1
    caf2:	          cmp.l d0,d1
    caf4:	/-------- bne.s cb38 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    caf6:	|         movea.l 12(sp),a0
    cafa:	|         move.l 24(a0),d0
    cafe:	|         move.l d0,-(sp)
    cb00:	|         pea 5 <_start+0x5>
    cb04:	|         move.l sp,d0
    cb06:	|         addq.l #8,d0
    cb08:	|         move.l d0,-(sp)
    cb0a:	|         jsr 10750 <getValueType>
    cb10:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    cb14:	|         moveq #24,d0
    cb16:	|         add.l 12(sp),d0
    cb1a:	|         move.l d0,-(sp)
    cb1c:	|         jsr 110d4 <trimStack>
    cb22:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
    cb24:	|         move.l (sp),d0
    cb26:	|         move.l d0,-(sp)
    cb28:	|         jsr 11f42 <setFloor>
    cb2e:	|         addq.l #4,sp
    cb30:	|         tst.w d0
    cb32:	|  /----- bne.s cb4e <builtIn_setFloor+0x6a>
    cb34:	|  |      moveq #1,d0
    cb36:	|  |  /-- bra.s cb50 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
    cb38:	\--|--|-> moveq #24,d0
    cb3a:	   |  |   add.l 12(sp),d0
    cb3e:	   |  |   move.l d0,-(sp)
    cb40:	   |  |   jsr 110d4 <trimStack>
    cb46:	   |  |   addq.l #4,sp
		setFloorNull ();
    cb48:	   |  |   jsr 126bc <setFloorNull>
	}
	return BR_CONTINUE;
    cb4e:	   \--|-> moveq #2,d0
}
    cb50:	      \-> addq.l #4,sp
    cb52:	          rts

0000cb54 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
    cb54:	jsr 117da <drawFloor>
	return BR_CONTINUE;
    cb5a:	moveq #2,d0
}
    cb5c:	rts

0000cb5e <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
    cb5e:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
    cb60:	          movea.l 12(sp),a0
    cb64:	          movea.l 24(a0),a0
    cb68:	          move.l (a0),d0
    cb6a:	          moveq #5,d1
    cb6c:	          cmp.l d0,d1
    cb6e:	/-------- bne.s cbb2 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
    cb70:	|         movea.l 12(sp),a0
    cb74:	|         move.l 24(a0),d0
    cb78:	|         move.l d0,-(sp)
    cb7a:	|         pea 5 <_start+0x5>
    cb7e:	|         move.l sp,d0
    cb80:	|         addq.l #8,d0
    cb82:	|         move.l d0,-(sp)
    cb84:	|         jsr 10750 <getValueType>
    cb8a:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
    cb8e:	|         moveq #24,d0
    cb90:	|         add.l 12(sp),d0
    cb94:	|         move.l d0,-(sp)
    cb96:	|         jsr 110d4 <trimStack>
    cb9c:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
    cb9e:	|         move.l (sp),d0
    cba0:	|         move.l d0,-(sp)
    cba2:	|         jsr 19a0 <setZBuffer>
    cba8:	|         addq.l #4,sp
    cbaa:	|         tst.w d0
    cbac:	|  /----- bne.s cbc8 <builtIn_setZBuffer+0x6a>
    cbae:	|  |      moveq #1,d0
    cbb0:	|  |  /-- bra.s cbca <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
    cbb2:	\--|--|-> moveq #24,d0
    cbb4:	   |  |   add.l 12(sp),d0
    cbb8:	   |  |   move.l d0,-(sp)
    cbba:	   |  |   jsr 110d4 <trimStack>
    cbc0:	   |  |   addq.l #4,sp
		killZBuffer ();
    cbc2:	   |  |   jsr 194a <killZBuffer>
	}
	return BR_CONTINUE;
    cbc8:	   \--|-> moveq #2,d0
}
    cbca:	      \-> addq.l #4,sp
    cbcc:	          rts

0000cbce <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
    cbce:	pea 16140 <main_sludge.c.2f5c5368+0x856>
    cbd4:	jsr 127a4 <KPrintF>
    cbda:	addq.l #4,sp
	return BR_CONTINUE;
    cbdc:	moveq #2,d0
}
    cbde:	rts

0000cbe0 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cbe0:	          movea.l 8(sp),a0
    cbe4:	          move.l 24(a0),d0
    cbe8:	          move.l d0,-(sp)
    cbea:	          pea 1 <_start+0x1>
    cbee:	          pea 19d16 <speechMode>
    cbf4:	          jsr 10750 <getValueType>
    cbfa:	          lea 12(sp),sp
    cbfe:	          tst.w d0
    cc00:	      /-- bne.s cc06 <builtIn_setSpeechMode+0x26>
    cc02:	      |   moveq #1,d0
    cc04:	/-----|-- bra.s cc3e <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
    cc06:	|     \-> moveq #24,d0
    cc08:	|         add.l 8(sp),d0
    cc0c:	|         move.l d0,-(sp)
    cc0e:	|         jsr 110d4 <trimStack>
    cc14:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
    cc16:	|         move.l 19d16 <speechMode>,d0
    cc1c:	|     /-- bmi.s cc2a <builtIn_setSpeechMode+0x4a>
    cc1e:	|     |   move.l 19d16 <speechMode>,d0
    cc24:	|     |   moveq #2,d1
    cc26:	|     |   cmp.l d0,d1
    cc28:	|  /--|-- bge.s cc3c <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
    cc2a:	|  |  \-> pea 16159 <main_sludge.c.2f5c5368+0x86f>
    cc30:	|  |      jsr 127a4 <KPrintF>
    cc36:	|  |      addq.l #4,sp
		return BR_ERROR;
    cc38:	|  |      moveq #1,d0
    cc3a:	+--|----- bra.s cc3e <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
    cc3c:	|  \----> moveq #2,d0
}
    cc3e:	\-------> rts

0000cc40 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
    cc40:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
    cc42:	       jsr 5398 <isThereAnySpeechGoingOn>
    cc48:	       move.l d0,(sp)
	if (i == -1) {
    cc4a:	       moveq #-1,d0
    cc4c:	       cmp.l (sp),d0
    cc4e:	/----- bne.s cc6a <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
    cc50:	|      moveq #28,d0
    cc52:	|      add.l 12(sp),d0
    cc56:	|      clr.l -(sp)
    cc58:	|      pea 1 <_start+0x1>
    cc5c:	|      move.l d0,-(sp)
    cc5e:	|      jsr 11042 <setVariable>
    cc64:	|      lea 12(sp),sp
    cc68:	|  /-- bra.s cc82 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
    cc6a:	\--|-> moveq #28,d0
    cc6c:	   |   add.l 12(sp),d0
    cc70:	   |   move.l (sp),-(sp)
    cc72:	   |   pea 7 <_start+0x7>
    cc76:	   |   move.l d0,-(sp)
    cc78:	   |   jsr 11042 <setVariable>
    cc7e:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    cc82:	   \-> moveq #2,d0
}
    cc84:	       addq.l #4,sp
    cc86:	       rts

0000cc88 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
    cc88:	jsr 36f4 <killSpeechTimers>
	return BR_CONTINUE;
    cc8e:	moveq #2,d0
}
    cc90:	rts

0000cc92 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
    cc92:	       move.l 19d50 <overRegion>,d0
    cc98:	/----- beq.s ccc2 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    cc9a:	|      movea.l 19d50 <overRegion>,a0
    cca0:	|      movea.l 28(a0),a0
    cca4:	|      move.l 4(a0),d1
    cca8:	|      moveq #28,d0
    ccaa:	|      add.l 8(sp),d0
    ccae:	|      move.l d1,-(sp)
    ccb0:	|      pea 7 <_start+0x7>
    ccb4:	|      move.l d0,-(sp)
    ccb6:	|      jsr 11042 <setVariable>
    ccbc:	|      lea 12(sp),sp
    ccc0:	|  /-- bra.s ccda <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
    ccc2:	\--|-> moveq #28,d0
    ccc4:	   |   add.l 8(sp),d0
    ccc8:	   |   clr.l -(sp)
    ccca:	   |   pea 1 <_start+0x1>
    ccce:	   |   move.l d0,-(sp)
    ccd0:	   |   jsr 11042 <setVariable>
    ccd6:	   |   lea 12(sp),sp
	return BR_CONTINUE;
    ccda:	   \-> moveq #2,d0
}
    ccdc:	       rts

0000ccde <builtIn_rename>:

builtIn(rename)
{
    ccde:	       lea -16(sp),sp
    cce2:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    cce4:	       movea.l 28(sp),a0
    cce8:	       move.l 24(a0),d0
    ccec:	       move.l d0,-(sp)
    ccee:	       jsr 10d26 <getTextFromAnyVar>
    ccf4:	       addq.l #4,sp
    ccf6:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
    ccfa:	   /-- bne.s cd00 <builtIn_rename+0x22>
    ccfc:	   |   moveq #1,d0
    ccfe:	/--|-- bra.s cd7a <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    cd00:	|  \-> moveq #24,d0
    cd02:	|      add.l 28(sp),d0
    cd06:	|      move.l d0,-(sp)
    cd08:	|      jsr 110d4 <trimStack>
    cd0e:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
    cd10:	|      movea.l 28(sp),a0
    cd14:	|      move.l 24(a0),d0
    cd18:	|      move.l d0,-(sp)
    cd1a:	|      pea 7 <_start+0x7>
    cd1e:	|      lea 12(sp),a0
    cd22:	|      move.l a0,-(sp)
    cd24:	|      jsr 10750 <getValueType>
    cd2a:	|      lea 12(sp),sp
    cd2e:	|      tst.w d0
    cd30:	|  /-- bne.s cd36 <builtIn_rename+0x58>
    cd32:	|  |   moveq #1,d0
    cd34:	+--|-- bra.s cd7a <builtIn_rename+0x9c>
	trimStack(&fun->stack);
    cd36:	|  \-> moveq #24,d0
    cd38:	|      add.l 28(sp),d0
    cd3c:	|      move.l d0,-(sp)
    cd3e:	|      jsr 110d4 <trimStack>
    cd44:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
    cd46:	|      move.l 4(sp),d0
    cd4a:	|      move.l d0,-(sp)
    cd4c:	|      jsr 95a2 <findObjectType>
    cd52:	|      addq.l #4,sp
    cd54:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
    cd58:	|      movea.l 12(sp),a0
    cd5c:	|      move.l (a0),8(sp)
    cd60:	|      move.l 19c4c <SysBase>,d0
    cd66:	|      movea.l d0,a6
    cd68:	|      movea.l 8(sp),a1
    cd6c:	|      jsr -690(a6)
	o->screenName = newText;
    cd70:	|      movea.l 12(sp),a0
    cd74:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
    cd78:	|      moveq #2,d0
}
    cd7a:	\----> movea.l (sp)+,a6
    cd7c:	       lea 16(sp),sp
    cd80:	       rts

0000cd82 <builtIn_getObjectX>:

builtIn (getObjectX)
{
    cd82:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    cd86:	          movea.l 20(sp),a0
    cd8a:	          move.l 24(a0),d0
    cd8e:	          move.l d0,-(sp)
    cd90:	          pea 7 <_start+0x7>
    cd94:	          lea 8(sp),a0
    cd98:	          move.l a0,-(sp)
    cd9a:	          jsr 10750 <getValueType>
    cda0:	          lea 12(sp),sp
    cda4:	          tst.w d0
    cda6:	      /-- bne.s cdae <builtIn_getObjectX+0x2c>
    cda8:	      |   moveq #1,d0
    cdaa:	/-----|-- bra.w ce4a <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
    cdae:	|     \-> moveq #24,d0
    cdb0:	|         add.l 20(sp),d0
    cdb4:	|         move.l d0,-(sp)
    cdb6:	|         jsr 110d4 <trimStack>
    cdbc:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    cdbe:	|         move.l (sp),d0
    cdc0:	|         move.l d0,-(sp)
    cdc2:	|         jsr 6994 <findPerson>
    cdc8:	|         addq.l #4,sp
    cdca:	|         move.l d0,8(sp)
	if (pers) {
    cdce:	|     /-- beq.s cdfc <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
    cdd0:	|     |   movea.l 8(sp),a0
    cdd4:	|     |   move.l (a0),d0
    cdd6:	|     |   move.l d0,-(sp)
    cdd8:	|     |   jsr 12b94 <__fixsfsi>
    cdde:	|     |   addq.l #4,sp
    cde0:	|     |   move.l d0,d1
    cde2:	|     |   moveq #28,d0
    cde4:	|     |   add.l 20(sp),d0
    cde8:	|     |   move.l d1,-(sp)
    cdea:	|     |   pea 1 <_start+0x1>
    cdee:	|     |   move.l d0,-(sp)
    cdf0:	|     |   jsr 11042 <setVariable>
    cdf6:	|     |   lea 12(sp),sp
    cdfa:	|  /--|-- bra.s ce48 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    cdfc:	|  |  \-> move.l (sp),d0
    cdfe:	|  |      move.l d0,-(sp)
    ce00:	|  |      jsr 1121a <getRegionForObject>
    ce06:	|  |      addq.l #4,sp
    ce08:	|  |      move.l d0,4(sp)
		if (la) {
    ce0c:	|  |  /-- beq.s ce30 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
    ce0e:	|  |  |   movea.l 4(sp),a0
    ce12:	|  |  |   move.l 16(a0),d1
    ce16:	|  |  |   moveq #28,d0
    ce18:	|  |  |   add.l 20(sp),d0
    ce1c:	|  |  |   move.l d1,-(sp)
    ce1e:	|  |  |   pea 1 <_start+0x1>
    ce22:	|  |  |   move.l d0,-(sp)
    ce24:	|  |  |   jsr 11042 <setVariable>
    ce2a:	|  |  |   lea 12(sp),sp
    ce2e:	|  +--|-- bra.s ce48 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    ce30:	|  |  \-> moveq #28,d0
    ce32:	|  |      add.l 20(sp),d0
    ce36:	|  |      clr.l -(sp)
    ce38:	|  |      pea 1 <_start+0x1>
    ce3c:	|  |      move.l d0,-(sp)
    ce3e:	|  |      jsr 11042 <setVariable>
    ce44:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    ce48:	|  \----> moveq #2,d0
}
    ce4a:	\-------> lea 12(sp),sp
    ce4e:	          rts

0000ce50 <builtIn_getObjectY>:

builtIn (getObjectY)
{
    ce50:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ce54:	          movea.l 20(sp),a0
    ce58:	          move.l 24(a0),d0
    ce5c:	          move.l d0,-(sp)
    ce5e:	          pea 7 <_start+0x7>
    ce62:	          lea 8(sp),a0
    ce66:	          move.l a0,-(sp)
    ce68:	          jsr 10750 <getValueType>
    ce6e:	          lea 12(sp),sp
    ce72:	          tst.w d0
    ce74:	      /-- bne.s ce7c <builtIn_getObjectY+0x2c>
    ce76:	      |   moveq #1,d0
    ce78:	/-----|-- bra.w cf1a <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
    ce7c:	|     \-> moveq #24,d0
    ce7e:	|         add.l 20(sp),d0
    ce82:	|         move.l d0,-(sp)
    ce84:	|         jsr 110d4 <trimStack>
    ce8a:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    ce8c:	|         move.l (sp),d0
    ce8e:	|         move.l d0,-(sp)
    ce90:	|         jsr 6994 <findPerson>
    ce96:	|         addq.l #4,sp
    ce98:	|         move.l d0,8(sp)
	if (pers) {
    ce9c:	|     /-- beq.s cecc <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
    ce9e:	|     |   movea.l 8(sp),a0
    cea2:	|     |   move.l 4(a0),d0
    cea6:	|     |   move.l d0,-(sp)
    cea8:	|     |   jsr 12b94 <__fixsfsi>
    ceae:	|     |   addq.l #4,sp
    ceb0:	|     |   move.l d0,d1
    ceb2:	|     |   moveq #28,d0
    ceb4:	|     |   add.l 20(sp),d0
    ceb8:	|     |   move.l d1,-(sp)
    ceba:	|     |   pea 1 <_start+0x1>
    cebe:	|     |   move.l d0,-(sp)
    cec0:	|     |   jsr 11042 <setVariable>
    cec6:	|     |   lea 12(sp),sp
    ceca:	|  /--|-- bra.s cf18 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
    cecc:	|  |  \-> move.l (sp),d0
    cece:	|  |      move.l d0,-(sp)
    ced0:	|  |      jsr 1121a <getRegionForObject>
    ced6:	|  |      addq.l #4,sp
    ced8:	|  |      move.l d0,4(sp)
		if (la) {
    cedc:	|  |  /-- beq.s cf00 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
    cede:	|  |  |   movea.l 4(sp),a0
    cee2:	|  |  |   move.l 20(a0),d1
    cee6:	|  |  |   moveq #28,d0
    cee8:	|  |  |   add.l 20(sp),d0
    ceec:	|  |  |   move.l d1,-(sp)
    ceee:	|  |  |   pea 1 <_start+0x1>
    cef2:	|  |  |   move.l d0,-(sp)
    cef4:	|  |  |   jsr 11042 <setVariable>
    cefa:	|  |  |   lea 12(sp),sp
    cefe:	|  +--|-- bra.s cf18 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
    cf00:	|  |  \-> moveq #28,d0
    cf02:	|  |      add.l 20(sp),d0
    cf06:	|  |      clr.l -(sp)
    cf08:	|  |      pea 1 <_start+0x1>
    cf0c:	|  |      move.l d0,-(sp)
    cf0e:	|  |      jsr 11042 <setVariable>
    cf14:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
    cf18:	|  \----> moveq #2,d0
}
    cf1a:	\-------> lea 12(sp),sp
    cf1e:	          rts

0000cf20 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
    cf20:	       lea -32(sp),sp
    cf24:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cf28:	       movea.l 56(sp),a0
    cf2c:	       move.l 24(a0),d0
    cf30:	       move.l d0,-(sp)
    cf32:	       pea 1 <_start+0x1>
    cf36:	       lea 28(sp),a0
    cf3a:	       move.l a0,-(sp)
    cf3c:	       jsr 10750 <getValueType>
    cf42:	       lea 12(sp),sp
    cf46:	       tst.w d0
    cf48:	   /-- bne.s cf50 <builtIn_addScreenRegion+0x30>
    cf4a:	   |   moveq #1,d0
    cf4c:	/--|-- bra.w d12a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    cf50:	|  \-> moveq #24,d0
    cf52:	|      add.l 56(sp),d0
    cf56:	|      move.l d0,-(sp)
    cf58:	|      jsr 110d4 <trimStack>
    cf5e:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cf60:	|      movea.l 56(sp),a0
    cf64:	|      move.l 24(a0),d0
    cf68:	|      move.l d0,-(sp)
    cf6a:	|      pea 1 <_start+0x1>
    cf6e:	|      moveq #48,d0
    cf70:	|      add.l sp,d0
    cf72:	|      move.l d0,-(sp)
    cf74:	|      jsr 10750 <getValueType>
    cf7a:	|      lea 12(sp),sp
    cf7e:	|      tst.w d0
    cf80:	|  /-- bne.s cf88 <builtIn_addScreenRegion+0x68>
    cf82:	|  |   moveq #1,d0
    cf84:	+--|-- bra.w d12a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    cf88:	|  \-> moveq #24,d0
    cf8a:	|      add.l 56(sp),d0
    cf8e:	|      move.l d0,-(sp)
    cf90:	|      jsr 110d4 <trimStack>
    cf96:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cf98:	|      movea.l 56(sp),a0
    cf9c:	|      move.l 24(a0),d0
    cfa0:	|      move.l d0,-(sp)
    cfa2:	|      pea 1 <_start+0x1>
    cfa6:	|      moveq #52,d0
    cfa8:	|      add.l sp,d0
    cfaa:	|      move.l d0,-(sp)
    cfac:	|      jsr 10750 <getValueType>
    cfb2:	|      lea 12(sp),sp
    cfb6:	|      tst.w d0
    cfb8:	|  /-- bne.s cfc0 <builtIn_addScreenRegion+0xa0>
    cfba:	|  |   moveq #1,d0
    cfbc:	+--|-- bra.w d12a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    cfc0:	|  \-> moveq #24,d0
    cfc2:	|      add.l 56(sp),d0
    cfc6:	|      move.l d0,-(sp)
    cfc8:	|      jsr 110d4 <trimStack>
    cfce:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    cfd0:	|      movea.l 56(sp),a0
    cfd4:	|      move.l 24(a0),d0
    cfd8:	|      move.l d0,-(sp)
    cfda:	|      pea 1 <_start+0x1>
    cfde:	|      lea 32(sp),a0
    cfe2:	|      move.l a0,-(sp)
    cfe4:	|      jsr 10750 <getValueType>
    cfea:	|      lea 12(sp),sp
    cfee:	|      tst.w d0
    cff0:	|  /-- bne.s cff8 <builtIn_addScreenRegion+0xd8>
    cff2:	|  |   moveq #1,d0
    cff4:	+--|-- bra.w d12a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    cff8:	|  \-> moveq #24,d0
    cffa:	|      add.l 56(sp),d0
    cffe:	|      move.l d0,-(sp)
    d000:	|      jsr 110d4 <trimStack>
    d006:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d008:	|      movea.l 56(sp),a0
    d00c:	|      move.l 24(a0),d0
    d010:	|      move.l d0,-(sp)
    d012:	|      pea 1 <_start+0x1>
    d016:	|      lea 36(sp),a0
    d01a:	|      move.l a0,-(sp)
    d01c:	|      jsr 10750 <getValueType>
    d022:	|      lea 12(sp),sp
    d026:	|      tst.w d0
    d028:	|  /-- bne.s d030 <builtIn_addScreenRegion+0x110>
    d02a:	|  |   moveq #1,d0
    d02c:	+--|-- bra.w d12a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d030:	|  \-> moveq #24,d0
    d032:	|      add.l 56(sp),d0
    d036:	|      move.l d0,-(sp)
    d038:	|      jsr 110d4 <trimStack>
    d03e:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d040:	|      movea.l 56(sp),a0
    d044:	|      move.l 24(a0),d0
    d048:	|      move.l d0,-(sp)
    d04a:	|      pea 1 <_start+0x1>
    d04e:	|      lea 40(sp),a0
    d052:	|      move.l a0,-(sp)
    d054:	|      jsr 10750 <getValueType>
    d05a:	|      lea 12(sp),sp
    d05e:	|      tst.w d0
    d060:	|  /-- bne.s d068 <builtIn_addScreenRegion+0x148>
    d062:	|  |   moveq #1,d0
    d064:	+--|-- bra.w d12a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d068:	|  \-> moveq #24,d0
    d06a:	|      add.l 56(sp),d0
    d06e:	|      move.l d0,-(sp)
    d070:	|      jsr 110d4 <trimStack>
    d076:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d078:	|      movea.l 56(sp),a0
    d07c:	|      move.l 24(a0),d0
    d080:	|      move.l d0,-(sp)
    d082:	|      pea 1 <_start+0x1>
    d086:	|      lea 44(sp),a0
    d08a:	|      move.l a0,-(sp)
    d08c:	|      jsr 10750 <getValueType>
    d092:	|      lea 12(sp),sp
    d096:	|      tst.w d0
    d098:	|  /-- bne.s d0a0 <builtIn_addScreenRegion+0x180>
    d09a:	|  |   moveq #1,d0
    d09c:	+--|-- bra.w d12a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d0a0:	|  \-> moveq #24,d0
    d0a2:	|      add.l 56(sp),d0
    d0a6:	|      move.l d0,-(sp)
    d0a8:	|      jsr 110d4 <trimStack>
    d0ae:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d0b0:	|      movea.l 56(sp),a0
    d0b4:	|      move.l 24(a0),d0
    d0b8:	|      move.l d0,-(sp)
    d0ba:	|      pea 7 <_start+0x7>
    d0be:	|      lea 24(sp),a0
    d0c2:	|      move.l a0,-(sp)
    d0c4:	|      jsr 10750 <getValueType>
    d0ca:	|      lea 12(sp),sp
    d0ce:	|      tst.w d0
    d0d0:	|  /-- bne.s d0d6 <builtIn_addScreenRegion+0x1b6>
    d0d2:	|  |   moveq #1,d0
    d0d4:	+--|-- bra.s d12a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
    d0d6:	|  \-> moveq #24,d0
    d0d8:	|      add.l 56(sp),d0
    d0dc:	|      move.l d0,-(sp)
    d0de:	|      jsr 110d4 <trimStack>
    d0e4:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
    d0e6:	|      move.l 16(sp),d5
    d0ea:	|      move.l 20(sp),d4
    d0ee:	|      move.l 40(sp),d3
    d0f2:	|      move.l 44(sp),d2
    d0f6:	|      movea.l 24(sp),a1
    d0fa:	|      movea.l 28(sp),a0
    d0fe:	|      move.l 32(sp),d1
    d102:	|      move.l 36(sp),d0
    d106:	|      move.l d5,-(sp)
    d108:	|      move.l d4,-(sp)
    d10a:	|      move.l d3,-(sp)
    d10c:	|      move.l d2,-(sp)
    d10e:	|      move.l a1,-(sp)
    d110:	|      move.l a0,-(sp)
    d112:	|      move.l d1,-(sp)
    d114:	|      move.l d0,-(sp)
    d116:	|      jsr 1115a <addScreenRegion>
    d11c:	|      lea 32(sp),sp
    d120:	|      tst.w d0
    d122:	|  /-- beq.s d128 <builtIn_addScreenRegion+0x208>
    d124:	|  |   moveq #2,d0
    d126:	+--|-- bra.s d12a <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
    d128:	|  \-> moveq #1,d0

}
    d12a:	\----> movem.l (sp)+,d2-d5
    d12e:	       lea 32(sp),sp
    d132:	       rts

0000d134 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
    d134:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d136:	       movea.l 12(sp),a0
    d13a:	       move.l 24(a0),d0
    d13e:	       move.l d0,-(sp)
    d140:	       pea 7 <_start+0x7>
    d144:	       move.l sp,d0
    d146:	       addq.l #8,d0
    d148:	       move.l d0,-(sp)
    d14a:	       jsr 10750 <getValueType>
    d150:	       lea 12(sp),sp
    d154:	       tst.w d0
    d156:	   /-- bne.s d15c <builtIn_removeScreenRegion+0x28>
    d158:	   |   moveq #1,d0
    d15a:	/--|-- bra.s d17a <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
    d15c:	|  \-> moveq #24,d0
    d15e:	|      add.l 12(sp),d0
    d162:	|      move.l d0,-(sp)
    d164:	|      jsr 110d4 <trimStack>
    d16a:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
    d16c:	|      move.l (sp),d0
    d16e:	|      move.l d0,-(sp)
    d170:	|      jsr 113c2 <removeScreenRegion>
    d176:	|      addq.l #4,sp
	return BR_CONTINUE;
    d178:	|      moveq #2,d0
}
    d17a:	\----> addq.l #4,sp
    d17c:	       rts

0000d17e <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
    d17e:	jsr 11546 <showBoxes>
	return BR_CONTINUE;
    d184:	moveq #2,d0
}
    d186:	rts

0000d188 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
    d188:	jsr 11248 <killAllRegions>
	return BR_CONTINUE;
    d18e:	moveq #2,d0
}
    d190:	rts

0000d192 <builtIn_addCharacter>:

builtIn(addCharacter)
{
    d192:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
    d196:	       movea.l 24(sp),a0
    d19a:	       move.l 24(a0),d0
    d19e:	       move.l d0,-(sp)
    d1a0:	       jsr 103fc <getCostumeFromVar>
    d1a6:	       addq.l #4,sp
    d1a8:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
    d1ac:	   /-- bne.s d1b4 <builtIn_addCharacter+0x22>
    d1ae:	   |   moveq #1,d0
    d1b0:	/--|-- bra.w d290 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
    d1b4:	|  \-> moveq #24,d0
    d1b6:	|      add.l 24(sp),d0
    d1ba:	|      move.l d0,-(sp)
    d1bc:	|      jsr 110d4 <trimStack>
    d1c2:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d1c4:	|      movea.l 24(sp),a0
    d1c8:	|      move.l 24(a0),d0
    d1cc:	|      move.l d0,-(sp)
    d1ce:	|      pea 1 <_start+0x1>
    d1d2:	|      lea 12(sp),a0
    d1d6:	|      move.l a0,-(sp)
    d1d8:	|      jsr 10750 <getValueType>
    d1de:	|      lea 12(sp),sp
    d1e2:	|      tst.w d0
    d1e4:	|  /-- bne.s d1ec <builtIn_addCharacter+0x5a>
    d1e6:	|  |   moveq #1,d0
    d1e8:	+--|-- bra.w d290 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d1ec:	|  \-> moveq #24,d0
    d1ee:	|      add.l 24(sp),d0
    d1f2:	|      move.l d0,-(sp)
    d1f4:	|      jsr 110d4 <trimStack>
    d1fa:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d1fc:	|      movea.l 24(sp),a0
    d200:	|      move.l 24(a0),d0
    d204:	|      move.l d0,-(sp)
    d206:	|      pea 1 <_start+0x1>
    d20a:	|      moveq #16,d0
    d20c:	|      add.l sp,d0
    d20e:	|      move.l d0,-(sp)
    d210:	|      jsr 10750 <getValueType>
    d216:	|      lea 12(sp),sp
    d21a:	|      tst.w d0
    d21c:	|  /-- bne.s d222 <builtIn_addCharacter+0x90>
    d21e:	|  |   moveq #1,d0
    d220:	+--|-- bra.s d290 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d222:	|  \-> moveq #24,d0
    d224:	|      add.l 24(sp),d0
    d228:	|      move.l d0,-(sp)
    d22a:	|      jsr 110d4 <trimStack>
    d230:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d232:	|      movea.l 24(sp),a0
    d236:	|      move.l 24(a0),d0
    d23a:	|      move.l d0,-(sp)
    d23c:	|      pea 7 <_start+0x7>
    d240:	|      lea 8(sp),a0
    d244:	|      move.l a0,-(sp)
    d246:	|      jsr 10750 <getValueType>
    d24c:	|      lea 12(sp),sp
    d250:	|      tst.w d0
    d252:	|  /-- bne.s d258 <builtIn_addCharacter+0xc6>
    d254:	|  |   moveq #1,d0
    d256:	+--|-- bra.s d290 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
    d258:	|  \-> moveq #24,d0
    d25a:	|      add.l 24(sp),d0
    d25e:	|      move.l d0,-(sp)
    d260:	|      jsr 110d4 <trimStack>
    d266:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
    d268:	|      movea.l (sp),a0
    d26a:	|      move.l 4(sp),d1
    d26e:	|      move.l 8(sp),d0
    d272:	|      move.l 12(sp),-(sp)
    d276:	|      move.l a0,-(sp)
    d278:	|      move.l d1,-(sp)
    d27a:	|      move.l d0,-(sp)
    d27c:	|      jsr 5bba <addPerson>
    d282:	|      lea 16(sp),sp
    d286:	|      tst.w d0
    d288:	|  /-- beq.s d28e <builtIn_addCharacter+0xfc>
    d28a:	|  |   moveq #2,d0
    d28c:	+--|-- bra.s d290 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
    d28e:	|  \-> moveq #1,d0
}
    d290:	\----> lea 16(sp),sp
    d294:	       rts

0000d296 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
    d296:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d298:	       movea.l 12(sp),a0
    d29c:	       move.l 24(a0),d0
    d2a0:	       move.l d0,-(sp)
    d2a2:	       pea 7 <_start+0x7>
    d2a6:	       move.l sp,d0
    d2a8:	       addq.l #8,d0
    d2aa:	       move.l d0,-(sp)
    d2ac:	       jsr 10750 <getValueType>
    d2b2:	       lea 12(sp),sp
    d2b6:	       tst.w d0
    d2b8:	   /-- bne.s d2be <builtIn_hideCharacter+0x28>
    d2ba:	   |   moveq #1,d0
    d2bc:	/--|-- bra.s d2de <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
    d2be:	|  \-> moveq #24,d0
    d2c0:	|      add.l 12(sp),d0
    d2c4:	|      move.l d0,-(sp)
    d2c6:	|      jsr 110d4 <trimStack>
    d2cc:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
    d2ce:	|      move.l (sp),d0
    d2d0:	|      move.l d0,-(sp)
    d2d2:	|      clr.l -(sp)
    d2d4:	|      jsr 7e94 <setShown>
    d2da:	|      addq.l #8,sp
	return BR_CONTINUE;
    d2dc:	|      moveq #2,d0
}
    d2de:	\----> addq.l #4,sp
    d2e0:	       rts

0000d2e2 <builtIn_showCharacter>:

builtIn(showCharacter)
{
    d2e2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d2e4:	       movea.l 12(sp),a0
    d2e8:	       move.l 24(a0),d0
    d2ec:	       move.l d0,-(sp)
    d2ee:	       pea 7 <_start+0x7>
    d2f2:	       move.l sp,d0
    d2f4:	       addq.l #8,d0
    d2f6:	       move.l d0,-(sp)
    d2f8:	       jsr 10750 <getValueType>
    d2fe:	       lea 12(sp),sp
    d302:	       tst.w d0
    d304:	   /-- bne.s d30a <builtIn_showCharacter+0x28>
    d306:	   |   moveq #1,d0
    d308:	/--|-- bra.s d32c <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
    d30a:	|  \-> moveq #24,d0
    d30c:	|      add.l 12(sp),d0
    d310:	|      move.l d0,-(sp)
    d312:	|      jsr 110d4 <trimStack>
    d318:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
    d31a:	|      move.l (sp),d0
    d31c:	|      move.l d0,-(sp)
    d31e:	|      pea 1 <_start+0x1>
    d322:	|      jsr 7e94 <setShown>
    d328:	|      addq.l #8,sp
	return BR_CONTINUE;
    d32a:	|      moveq #2,d0
}
    d32c:	\----> addq.l #4,sp
    d32e:	       rts

0000d330 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
    d330:	jsr 36f4 <killSpeechTimers>
	killMostPeople ();
    d336:	jsr 6e00 <killMostPeople>
	return BR_CONTINUE;
    d33c:	moveq #2,d0
}
    d33e:	rts

0000d340 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
    d340:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d342:	       movea.l 16(sp),a0
    d346:	       move.l 24(a0),d0
    d34a:	       move.l d0,-(sp)
    d34c:	       pea 1 <_start+0x1>
    d350:	       move.l sp,d0
    d352:	       addq.l #8,d0
    d354:	       move.l d0,-(sp)
    d356:	       jsr 10750 <getValueType>
    d35c:	       lea 12(sp),sp
    d360:	       tst.w d0
    d362:	   /-- bne.s d368 <builtIn_setCharacterDrawMode+0x28>
    d364:	   |   moveq #1,d0
    d366:	/--|-- bra.s d3c2 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    d368:	|  \-> moveq #24,d0
    d36a:	|      add.l 16(sp),d0
    d36e:	|      move.l d0,-(sp)
    d370:	|      jsr 110d4 <trimStack>
    d376:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d378:	|      movea.l 16(sp),a0
    d37c:	|      move.l 24(a0),d0
    d380:	|      move.l d0,-(sp)
    d382:	|      pea 7 <_start+0x7>
    d386:	|      moveq #12,d0
    d388:	|      add.l sp,d0
    d38a:	|      move.l d0,-(sp)
    d38c:	|      jsr 10750 <getValueType>
    d392:	|      lea 12(sp),sp
    d396:	|      tst.w d0
    d398:	|  /-- bne.s d39e <builtIn_setCharacterDrawMode+0x5e>
    d39a:	|  |   moveq #1,d0
    d39c:	+--|-- bra.s d3c2 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
    d39e:	|  \-> moveq #24,d0
    d3a0:	|      add.l 16(sp),d0
    d3a4:	|      move.l d0,-(sp)
    d3a6:	|      jsr 110d4 <trimStack>
    d3ac:	|      addq.l #4,sp
	setDrawMode (di, obj);
    d3ae:	|      move.l 4(sp),d1
    d3b2:	|      move.l (sp),d0
    d3b4:	|      move.l d1,-(sp)
    d3b6:	|      move.l d0,-(sp)
    d3b8:	|      jsr 78c2 <setDrawMode>
    d3be:	|      addq.l #8,sp
	return BR_CONTINUE;
    d3c0:	|      moveq #2,d0
}
    d3c2:	\----> addq.l #8,sp
    d3c4:	       rts

0000d3c6 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
    d3c6:	pea 16197 <main_sludge.c.2f5c5368+0x8ad>
    d3cc:	jsr 127a4 <KPrintF>
    d3d2:	addq.l #4,sp
	return BR_CONTINUE;
    d3d4:	moveq #2,d0
}
    d3d6:	rts

0000d3d8 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
    d3d8:	pea 161ca <main_sludge.c.2f5c5368+0x8e0>
    d3de:	jsr 127a4 <KPrintF>
    d3e4:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
    d3e6:	moveq #2,d0
}
    d3e8:	rts

0000d3ea <builtIn_setScale>:

builtIn(setScale)
{
    d3ea:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d3ec:	       movea.l 16(sp),a0
    d3f0:	       move.l 24(a0),d0
    d3f4:	       move.l d0,-(sp)
    d3f6:	       pea 1 <_start+0x1>
    d3fa:	       move.l sp,d0
    d3fc:	       addq.l #8,d0
    d3fe:	       move.l d0,-(sp)
    d400:	       jsr 10750 <getValueType>
    d406:	       lea 12(sp),sp
    d40a:	       tst.w d0
    d40c:	   /-- bne.s d412 <builtIn_setScale+0x28>
    d40e:	   |   moveq #1,d0
    d410:	/--|-- bra.s d474 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    d412:	|  \-> moveq #24,d0
    d414:	|      add.l 16(sp),d0
    d418:	|      move.l d0,-(sp)
    d41a:	|      jsr 110d4 <trimStack>
    d420:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d422:	|      movea.l 16(sp),a0
    d426:	|      move.l 24(a0),d0
    d42a:	|      move.l d0,-(sp)
    d42c:	|      pea 1 <_start+0x1>
    d430:	|      moveq #12,d0
    d432:	|      add.l sp,d0
    d434:	|      move.l d0,-(sp)
    d436:	|      jsr 10750 <getValueType>
    d43c:	|      lea 12(sp),sp
    d440:	|      tst.w d0
    d442:	|  /-- bne.s d448 <builtIn_setScale+0x5e>
    d444:	|  |   moveq #1,d0
    d446:	+--|-- bra.s d474 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
    d448:	|  \-> moveq #24,d0
    d44a:	|      add.l 16(sp),d0
    d44e:	|      move.l d0,-(sp)
    d450:	|      jsr 110d4 <trimStack>
    d456:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
    d458:	|      move.l (sp),d0
    d45a:	|      move.l d0,d0
    d45c:	|      movea.w d0,a1
    d45e:	|      move.l 4(sp),d0
    d462:	|      move.l d0,d0
    d464:	|      movea.w d0,a0
    d466:	|      move.l a1,-(sp)
    d468:	|      move.l a0,-(sp)
    d46a:	|      jsr 7e6c <setScale>
    d470:	|      addq.l #8,sp
	return BR_CONTINUE;
    d472:	|      moveq #2,d0
}
    d474:	\----> addq.l #8,sp
    d476:	       rts

0000d478 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
    d478:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d47a:	       movea.l 12(sp),a0
    d47e:	       move.l 24(a0),d0
    d482:	       move.l d0,-(sp)
    d484:	       pea 7 <_start+0x7>
    d488:	       move.l sp,d0
    d48a:	       addq.l #8,d0
    d48c:	       move.l d0,-(sp)
    d48e:	       jsr 10750 <getValueType>
    d494:	       lea 12(sp),sp
    d498:	       tst.w d0
    d49a:	   /-- bne.s d4a0 <builtIn_stopCharacter+0x28>
    d49c:	   |   moveq #1,d0
    d49e:	/--|-- bra.s d4d8 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
    d4a0:	|  \-> moveq #24,d0
    d4a2:	|      add.l 12(sp),d0
    d4a6:	|      move.l d0,-(sp)
    d4a8:	|      jsr 110d4 <trimStack>
    d4ae:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
    d4b0:	|      move.l (sp),d0
    d4b2:	|      move.l d0,-(sp)
    d4b4:	|      jsr 7fa0 <stopPerson>
    d4ba:	|      addq.l #4,sp
    d4bc:	|      movea.w d0,a0
    d4be:	|      moveq #28,d0
    d4c0:	|      add.l 12(sp),d0
    d4c4:	|      move.l a0,-(sp)
    d4c6:	|      pea 1 <_start+0x1>
    d4ca:	|      move.l d0,-(sp)
    d4cc:	|      jsr 11042 <setVariable>
    d4d2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d4d6:	|      moveq #2,d0
}
    d4d8:	\----> addq.l #4,sp
    d4da:	       rts

0000d4dc <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
    d4dc:	pea 16204 <main_sludge.c.2f5c5368+0x91a>
    d4e2:	jsr 127a4 <KPrintF>
    d4e8:	addq.l #4,sp
	return BR_CONTINUE;
    d4ea:	moveq #2,d0
}
    d4ec:	rts

0000d4ee <builtIn_animate>:

builtIn(animate)
{
    d4ee:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    d4f0:	       movea.l 16(sp),a0
    d4f4:	       move.l 24(a0),d0
    d4f8:	       move.l d0,-(sp)
    d4fa:	       jsr 10c28 <getAnimationFromVar>
    d500:	       addq.l #4,sp
    d502:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    d506:	   /-- bne.s d50c <builtIn_animate+0x1e>
    d508:	   |   moveq #1,d0
    d50a:	/--|-- bra.s d58a <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    d50c:	|  \-> moveq #24,d0
    d50e:	|      add.l 16(sp),d0
    d512:	|      move.l d0,-(sp)
    d514:	|      jsr 110d4 <trimStack>
    d51a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d51c:	|      movea.l 16(sp),a0
    d520:	|      move.l 24(a0),d0
    d524:	|      move.l d0,-(sp)
    d526:	|      pea 7 <_start+0x7>
    d52a:	|      move.l sp,d0
    d52c:	|      addq.l #8,d0
    d52e:	|      move.l d0,-(sp)
    d530:	|      jsr 10750 <getValueType>
    d536:	|      lea 12(sp),sp
    d53a:	|      tst.w d0
    d53c:	|  /-- bne.s d542 <builtIn_animate+0x54>
    d53e:	|  |   moveq #1,d0
    d540:	+--|-- bra.s d58a <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
    d542:	|  \-> moveq #24,d0
    d544:	|      add.l 16(sp),d0
    d548:	|      move.l d0,-(sp)
    d54a:	|      jsr 110d4 <trimStack>
    d550:	|      addq.l #4,sp
	animatePerson (obj, pp);
    d552:	|      move.l (sp),d0
    d554:	|      move.l 4(sp),-(sp)
    d558:	|      move.l d0,-(sp)
    d55a:	|      jsr 5e2c <animatePerson>
    d560:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
    d562:	|      move.l 4(sp),-(sp)
    d566:	|      jsr 7ff4 <timeForAnim>
    d56c:	|      addq.l #4,sp
    d56e:	|      move.l d0,d1
    d570:	|      moveq #28,d0
    d572:	|      add.l 16(sp),d0
    d576:	|      move.l d1,-(sp)
    d578:	|      pea 1 <_start+0x1>
    d57c:	|      move.l d0,-(sp)
    d57e:	|      jsr 11042 <setVariable>
    d584:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d588:	|      moveq #2,d0
}
    d58a:	\----> addq.l #8,sp
    d58c:	       rts

0000d58e <builtIn_setCostume>:

builtIn(setCostume)
{
    d58e:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
    d590:	       movea.l 16(sp),a0
    d594:	       move.l 24(a0),d0
    d598:	       move.l d0,-(sp)
    d59a:	       jsr 103fc <getCostumeFromVar>
    d5a0:	       addq.l #4,sp
    d5a2:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
    d5a6:	   /-- bne.s d5ac <builtIn_setCostume+0x1e>
    d5a8:	   |   moveq #1,d0
    d5aa:	/--|-- bra.s d604 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    d5ac:	|  \-> moveq #24,d0
    d5ae:	|      add.l 16(sp),d0
    d5b2:	|      move.l d0,-(sp)
    d5b4:	|      jsr 110d4 <trimStack>
    d5ba:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d5bc:	|      movea.l 16(sp),a0
    d5c0:	|      move.l 24(a0),d0
    d5c4:	|      move.l d0,-(sp)
    d5c6:	|      pea 7 <_start+0x7>
    d5ca:	|      move.l sp,d0
    d5cc:	|      addq.l #8,d0
    d5ce:	|      move.l d0,-(sp)
    d5d0:	|      jsr 10750 <getValueType>
    d5d6:	|      lea 12(sp),sp
    d5da:	|      tst.w d0
    d5dc:	|  /-- bne.s d5e2 <builtIn_setCostume+0x54>
    d5de:	|  |   moveq #1,d0
    d5e0:	+--|-- bra.s d604 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
    d5e2:	|  \-> moveq #24,d0
    d5e4:	|      add.l 16(sp),d0
    d5e8:	|      move.l d0,-(sp)
    d5ea:	|      jsr 110d4 <trimStack>
    d5f0:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
    d5f2:	|      move.l (sp),d0
    d5f4:	|      move.l 4(sp),-(sp)
    d5f8:	|      move.l d0,-(sp)
    d5fa:	|      jsr 5e76 <animatePersonUsingPersona>
    d600:	|      addq.l #8,sp
	return BR_CONTINUE;
    d602:	|      moveq #2,d0
}
    d604:	\----> addq.l #8,sp
    d606:	       rts

0000d608 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
    d608:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d60a:	       movea.l 16(sp),a0
    d60e:	       move.l 24(a0),d0
    d612:	       move.l d0,-(sp)
    d614:	       pea 1 <_start+0x1>
    d618:	       move.l sp,d0
    d61a:	       addq.l #8,d0
    d61c:	       move.l d0,-(sp)
    d61e:	       jsr 10750 <getValueType>
    d624:	       lea 12(sp),sp
    d628:	       tst.w d0
    d62a:	   /-- bne.s d630 <builtIn_floatCharacter+0x28>
    d62c:	   |   moveq #1,d0
    d62e:	/--|-- bra.s d6a4 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    d630:	|  \-> moveq #24,d0
    d632:	|      add.l 16(sp),d0
    d636:	|      move.l d0,-(sp)
    d638:	|      jsr 110d4 <trimStack>
    d63e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d640:	|      movea.l 16(sp),a0
    d644:	|      move.l 24(a0),d0
    d648:	|      move.l d0,-(sp)
    d64a:	|      pea 7 <_start+0x7>
    d64e:	|      moveq #12,d0
    d650:	|      add.l sp,d0
    d652:	|      move.l d0,-(sp)
    d654:	|      jsr 10750 <getValueType>
    d65a:	|      lea 12(sp),sp
    d65e:	|      tst.w d0
    d660:	|  /-- bne.s d666 <builtIn_floatCharacter+0x5e>
    d662:	|  |   moveq #1,d0
    d664:	+--|-- bra.s d6a4 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
    d666:	|  \-> moveq #24,d0
    d668:	|      add.l 16(sp),d0
    d66c:	|      move.l d0,-(sp)
    d66e:	|      jsr 110d4 <trimStack>
    d674:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
    d676:	|      move.l 4(sp),d1
    d67a:	|      move.l (sp),d0
    d67c:	|      move.l d1,-(sp)
    d67e:	|      move.l d0,-(sp)
    d680:	|      jsr 69c2 <floatCharacter>
    d686:	|      addq.l #8,sp
    d688:	|      movea.w d0,a0
    d68a:	|      moveq #28,d0
    d68c:	|      add.l 16(sp),d0
    d690:	|      move.l a0,-(sp)
    d692:	|      pea 1 <_start+0x1>
    d696:	|      move.l d0,-(sp)
    d698:	|      jsr 11042 <setVariable>
    d69e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d6a2:	|      moveq #2,d0
}
    d6a4:	\----> addq.l #8,sp
    d6a6:	       rts

0000d6a8 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
    d6a8:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d6aa:	       movea.l 16(sp),a0
    d6ae:	       move.l 24(a0),d0
    d6b2:	       move.l d0,-(sp)
    d6b4:	       pea 1 <_start+0x1>
    d6b8:	       move.l sp,d0
    d6ba:	       addq.l #8,d0
    d6bc:	       move.l d0,-(sp)
    d6be:	       jsr 10750 <getValueType>
    d6c4:	       lea 12(sp),sp
    d6c8:	       tst.w d0
    d6ca:	   /-- bne.s d6d0 <builtIn_setCharacterWalkSpeed+0x28>
    d6cc:	   |   moveq #1,d0
    d6ce:	/--|-- bra.s d744 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    d6d0:	|  \-> moveq #24,d0
    d6d2:	|      add.l 16(sp),d0
    d6d6:	|      move.l d0,-(sp)
    d6d8:	|      jsr 110d4 <trimStack>
    d6de:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d6e0:	|      movea.l 16(sp),a0
    d6e4:	|      move.l 24(a0),d0
    d6e8:	|      move.l d0,-(sp)
    d6ea:	|      pea 7 <_start+0x7>
    d6ee:	|      moveq #12,d0
    d6f0:	|      add.l sp,d0
    d6f2:	|      move.l d0,-(sp)
    d6f4:	|      jsr 10750 <getValueType>
    d6fa:	|      lea 12(sp),sp
    d6fe:	|      tst.w d0
    d700:	|  /-- bne.s d706 <builtIn_setCharacterWalkSpeed+0x5e>
    d702:	|  |   moveq #1,d0
    d704:	+--|-- bra.s d744 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
    d706:	|  \-> moveq #24,d0
    d708:	|      add.l 16(sp),d0
    d70c:	|      move.l d0,-(sp)
    d70e:	|      jsr 110d4 <trimStack>
    d714:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
    d716:	|      move.l 4(sp),d1
    d71a:	|      move.l (sp),d0
    d71c:	|      move.l d1,-(sp)
    d71e:	|      move.l d0,-(sp)
    d720:	|      jsr 7e08 <setCharacterWalkSpeed>
    d726:	|      addq.l #8,sp
    d728:	|      movea.w d0,a0
    d72a:	|      moveq #28,d0
    d72c:	|      add.l 16(sp),d0
    d730:	|      move.l a0,-(sp)
    d732:	|      pea 1 <_start+0x1>
    d736:	|      move.l d0,-(sp)
    d738:	|      jsr 11042 <setVariable>
    d73e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d742:	|      moveq #2,d0
}
    d744:	\----> addq.l #8,sp
    d746:	       rts

0000d748 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
    d748:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d74a:	       movea.l 16(sp),a0
    d74e:	       move.l 24(a0),d0
    d752:	       move.l d0,-(sp)
    d754:	       pea 1 <_start+0x1>
    d758:	       move.l sp,d0
    d75a:	       addq.l #8,d0
    d75c:	       move.l d0,-(sp)
    d75e:	       jsr 10750 <getValueType>
    d764:	       lea 12(sp),sp
    d768:	       tst.w d0
    d76a:	   /-- bne.s d770 <builtIn_turnCharacter+0x28>
    d76c:	   |   moveq #1,d0
    d76e:	/--|-- bra.s d7e4 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    d770:	|  \-> moveq #24,d0
    d772:	|      add.l 16(sp),d0
    d776:	|      move.l d0,-(sp)
    d778:	|      jsr 110d4 <trimStack>
    d77e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d780:	|      movea.l 16(sp),a0
    d784:	|      move.l 24(a0),d0
    d788:	|      move.l d0,-(sp)
    d78a:	|      pea 7 <_start+0x7>
    d78e:	|      moveq #12,d0
    d790:	|      add.l sp,d0
    d792:	|      move.l d0,-(sp)
    d794:	|      jsr 10750 <getValueType>
    d79a:	|      lea 12(sp),sp
    d79e:	|      tst.w d0
    d7a0:	|  /-- bne.s d7a6 <builtIn_turnCharacter+0x5e>
    d7a2:	|  |   moveq #1,d0
    d7a4:	+--|-- bra.s d7e4 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
    d7a6:	|  \-> moveq #24,d0
    d7a8:	|      add.l 16(sp),d0
    d7ac:	|      move.l d0,-(sp)
    d7ae:	|      jsr 110d4 <trimStack>
    d7b4:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
    d7b6:	|      move.l (sp),d1
    d7b8:	|      move.l 4(sp),d0
    d7bc:	|      move.l d1,-(sp)
    d7be:	|      move.l d0,-(sp)
    d7c0:	|      jsr 80ac <turnPersonToFace>
    d7c6:	|      addq.l #8,sp
    d7c8:	|      movea.w d0,a0
    d7ca:	|      moveq #28,d0
    d7cc:	|      add.l 16(sp),d0
    d7d0:	|      move.l a0,-(sp)
    d7d2:	|      pea 1 <_start+0x1>
    d7d6:	|      move.l d0,-(sp)
    d7d8:	|      jsr 11042 <setVariable>
    d7de:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d7e2:	|      moveq #2,d0
}
    d7e4:	\----> addq.l #8,sp
    d7e6:	       rts

0000d7e8 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
    d7e8:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d7ea:	       movea.l 16(sp),a0
    d7ee:	       move.l 24(a0),d0
    d7f2:	       move.l d0,-(sp)
    d7f4:	       pea 1 <_start+0x1>
    d7f8:	       move.l sp,d0
    d7fa:	       addq.l #8,d0
    d7fc:	       move.l d0,-(sp)
    d7fe:	       jsr 10750 <getValueType>
    d804:	       lea 12(sp),sp
    d808:	       tst.w d0
    d80a:	   /-- bne.s d810 <builtIn_setCharacterExtra+0x28>
    d80c:	   |   moveq #1,d0
    d80e:	/--|-- bra.s d884 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    d810:	|  \-> moveq #24,d0
    d812:	|      add.l 16(sp),d0
    d816:	|      move.l d0,-(sp)
    d818:	|      jsr 110d4 <trimStack>
    d81e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d820:	|      movea.l 16(sp),a0
    d824:	|      move.l 24(a0),d0
    d828:	|      move.l d0,-(sp)
    d82a:	|      pea 7 <_start+0x7>
    d82e:	|      moveq #12,d0
    d830:	|      add.l sp,d0
    d832:	|      move.l d0,-(sp)
    d834:	|      jsr 10750 <getValueType>
    d83a:	|      lea 12(sp),sp
    d83e:	|      tst.w d0
    d840:	|  /-- bne.s d846 <builtIn_setCharacterExtra+0x5e>
    d842:	|  |   moveq #1,d0
    d844:	+--|-- bra.s d884 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
    d846:	|  \-> moveq #24,d0
    d848:	|      add.l 16(sp),d0
    d84c:	|      move.l d0,-(sp)
    d84e:	|      jsr 110d4 <trimStack>
    d854:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
    d856:	|      move.l (sp),d1
    d858:	|      move.l 4(sp),d0
    d85c:	|      move.l d1,-(sp)
    d85e:	|      move.l d0,-(sp)
    d860:	|      jsr 7e36 <setPersonExtra>
    d866:	|      addq.l #8,sp
    d868:	|      movea.w d0,a0
    d86a:	|      moveq #28,d0
    d86c:	|      add.l 16(sp),d0
    d870:	|      move.l a0,-(sp)
    d872:	|      pea 1 <_start+0x1>
    d876:	|      move.l d0,-(sp)
    d878:	|      jsr 11042 <setVariable>
    d87e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    d882:	|      moveq #2,d0
}
    d884:	\----> addq.l #8,sp
    d886:	       rts

0000d888 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{
    d888:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d88a:	       movea.l 12(sp),a0
    d88e:	       move.l 24(a0),d0
    d892:	       move.l d0,-(sp)
    d894:	       pea 7 <_start+0x7>
    d898:	       move.l sp,d0
    d89a:	       addq.l #8,d0
    d89c:	       move.l d0,-(sp)
    d89e:	       jsr 10750 <getValueType>
    d8a4:	       lea 12(sp),sp
    d8a8:	       tst.w d0
    d8aa:	   /-- bne.s d8b0 <builtIn_removeCharacter+0x28>
    d8ac:	   |   moveq #1,d0
    d8ae:	/--|-- bra.s d8ce <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
    d8b0:	|  \-> moveq #24,d0
    d8b2:	|      add.l 12(sp),d0
    d8b6:	|      move.l d0,-(sp)
    d8b8:	|      jsr 110d4 <trimStack>
    d8be:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
    d8c0:	|      move.l (sp),d0
    d8c2:	|      move.l d0,-(sp)
    d8c4:	|      jsr 715a <removeOneCharacter>
    d8ca:	|      addq.l #4,sp
	return BR_CONTINUE;
    d8cc:	|      moveq #2,d0
}
    d8ce:	\----> addq.l #4,sp
    d8d0:	       rts

0000d8d2 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
    d8d2:	                lea -28(sp),sp
    d8d6:	                move.l d2,-(sp)
    d8d8:	                move.l 44(sp),d1
    d8dc:	                move.l 48(sp),d0
    d8e0:	                move.w d1,d1
    d8e2:	                move.w d1,6(sp)
    d8e6:	                move.w d0,d0
    d8e8:	                move.w d0,4(sp)
	switch (numParams) {
    d8ec:	                moveq #2,d0
    d8ee:	                cmp.l 36(sp),d0
    d8f2:	      /-------- beq.w da34 <moveChr+0x162>
    d8f6:	      |         moveq #3,d0
    d8f8:	      |         cmp.l 36(sp),d0
    d8fc:	/-----|-------- bne.w db68 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d900:	|     |         movea.l 40(sp),a0
    d904:	|     |         move.l 24(a0),d0
    d908:	|     |         move.l d0,-(sp)
    d90a:	|     |         pea 1 <_start+0x1>
    d90e:	|     |         lea 20(sp),a0
    d912:	|     |         move.l a0,-(sp)
    d914:	|     |         jsr 10750 <getValueType>
    d91a:	|     |         lea 12(sp),sp
    d91e:	|     |         tst.w d0
    d920:	|     |     /-- bne.s d928 <moveChr+0x56>
    d922:	|     |     |   moveq #1,d0
    d924:	|  /--|-----|-- bra.w db78 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d928:	|  |  |     \-> moveq #24,d0
    d92a:	|  |  |         add.l 40(sp),d0
    d92e:	|  |  |         move.l d0,-(sp)
    d930:	|  |  |         jsr 110d4 <trimStack>
    d936:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    d938:	|  |  |         movea.l 40(sp),a0
    d93c:	|  |  |         move.l 24(a0),d0
    d940:	|  |  |         move.l d0,-(sp)
    d942:	|  |  |         pea 1 <_start+0x1>
    d946:	|  |  |         lea 24(sp),a0
    d94a:	|  |  |         move.l a0,-(sp)
    d94c:	|  |  |         jsr 10750 <getValueType>
    d952:	|  |  |         lea 12(sp),sp
    d956:	|  |  |         tst.w d0
    d958:	|  |  |     /-- bne.s d960 <moveChr+0x8e>
    d95a:	|  |  |     |   moveq #1,d0
    d95c:	|  +--|-----|-- bra.w db78 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d960:	|  |  |     \-> moveq #24,d0
    d962:	|  |  |         add.l 40(sp),d0
    d966:	|  |  |         move.l d0,-(sp)
    d968:	|  |  |         jsr 110d4 <trimStack>
    d96e:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    d970:	|  |  |         movea.l 40(sp),a0
    d974:	|  |  |         move.l 24(a0),d0
    d978:	|  |  |         move.l d0,-(sp)
    d97a:	|  |  |         pea 7 <_start+0x7>
    d97e:	|  |  |         lea 16(sp),a0
    d982:	|  |  |         move.l a0,-(sp)
    d984:	|  |  |         jsr 10750 <getValueType>
    d98a:	|  |  |         lea 12(sp),sp
    d98e:	|  |  |         tst.w d0
    d990:	|  |  |     /-- bne.s d998 <moveChr+0xc6>
    d992:	|  |  |     |   moveq #1,d0
    d994:	|  +--|-----|-- bra.w db78 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    d998:	|  |  |     \-> moveq #24,d0
    d99a:	|  |  |         add.l 40(sp),d0
    d99e:	|  |  |         move.l d0,-(sp)
    d9a0:	|  |  |         jsr 110d4 <trimStack>
    d9a6:	|  |  |         addq.l #4,sp

			if (force) {
    d9a8:	|  |  |         tst.w 6(sp)
    d9ac:	|  |  |     /-- beq.s d9dc <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    d9ae:	|  |  |     |   movea.l 8(sp),a0
    d9b2:	|  |  |     |   move.l 12(sp),d1
    d9b6:	|  |  |     |   move.l 16(sp),d0
    d9ba:	|  |  |     |   pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc1ac1>
    d9be:	|  |  |     |   move.l 44(sp),-(sp)
    d9c2:	|  |  |     |   move.l a0,-(sp)
    d9c4:	|  |  |     |   move.l d1,-(sp)
    d9c6:	|  |  |     |   move.l d0,-(sp)
    d9c8:	|  |  |     |   jsr 69e6 <forceWalkingPerson>
    d9ce:	|  |  |     |   lea 20(sp),sp
    d9d2:	|  |  |     |   tst.w d0
    d9d4:	|  |  |  /--|-- beq.s da2e <moveChr+0x15c>
    d9d6:	|  |  |  |  |   moveq #3,d0
    d9d8:	|  +--|--|--|-- bra.w db78 <moveChr+0x2a6>
			} else if (immediate) {
    d9dc:	|  |  |  |  \-> tst.w 4(sp)
    d9e0:	|  |  |  |  /-- beq.s da00 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
    d9e2:	|  |  |  |  |   movea.l 8(sp),a0
    d9e6:	|  |  |  |  |   move.l 12(sp),d1
    d9ea:	|  |  |  |  |   move.l 16(sp),d0
    d9ee:	|  |  |  |  |   move.l a0,-(sp)
    d9f0:	|  |  |  |  |   move.l d1,-(sp)
    d9f2:	|  |  |  |  |   move.l d0,-(sp)
    d9f4:	|  |  |  |  |   jsr 6cee <jumpPerson>
    d9fa:	|  |  |  |  |   lea 12(sp),sp
    d9fe:	|  |  |  +--|-- bra.s da2e <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
    da00:	|  |  |  |  \-> movea.l 8(sp),a0
    da04:	|  |  |  |      move.l 12(sp),d1
    da08:	|  |  |  |      move.l 16(sp),d0
    da0c:	|  |  |  |      pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc1ac1>
    da10:	|  |  |  |      move.l 44(sp),-(sp)
    da14:	|  |  |  |      move.l a0,-(sp)
    da16:	|  |  |  |      move.l d1,-(sp)
    da18:	|  |  |  |      move.l d0,-(sp)
    da1a:	|  |  |  |      jsr 6ebe <makeWalkingPerson>
    da20:	|  |  |  |      lea 20(sp),sp
    da24:	|  |  |  |      tst.w d0
    da26:	|  |  |  +----- beq.s da2e <moveChr+0x15c>
    da28:	|  |  |  |      moveq #3,d0
    da2a:	|  +--|--|----- bra.w db78 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    da2e:	|  |  |  \----> moveq #2,d0
    da30:	|  +--|-------- bra.w db78 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    da34:	|  |  \-------> movea.l 40(sp),a0
    da38:	|  |            move.l 24(a0),d0
    da3c:	|  |            move.l d0,-(sp)
    da3e:	|  |            pea 7 <_start+0x7>
    da42:	|  |            moveq #32,d0
    da44:	|  |            add.l sp,d0
    da46:	|  |            move.l d0,-(sp)
    da48:	|  |            jsr 10750 <getValueType>
    da4e:	|  |            lea 12(sp),sp
    da52:	|  |            tst.w d0
    da54:	|  |        /-- bne.s da5c <moveChr+0x18a>
    da56:	|  |        |   moveq #1,d0
    da58:	|  +--------|-- bra.w db78 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    da5c:	|  |        \-> moveq #24,d0
    da5e:	|  |            add.l 40(sp),d0
    da62:	|  |            move.l d0,-(sp)
    da64:	|  |            jsr 110d4 <trimStack>
    da6a:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    da6c:	|  |            movea.l 40(sp),a0
    da70:	|  |            move.l 24(a0),d0
    da74:	|  |            move.l d0,-(sp)
    da76:	|  |            pea 7 <_start+0x7>
    da7a:	|  |            lea 28(sp),a0
    da7e:	|  |            move.l a0,-(sp)
    da80:	|  |            jsr 10750 <getValueType>
    da86:	|  |            lea 12(sp),sp
    da8a:	|  |            tst.w d0
    da8c:	|  |        /-- bne.s da94 <moveChr+0x1c2>
    da8e:	|  |        |   moveq #1,d0
    da90:	|  +--------|-- bra.w db78 <moveChr+0x2a6>
			trimStack (&fun -> stack);
    da94:	|  |        \-> moveq #24,d0
    da96:	|  |            add.l 40(sp),d0
    da9a:	|  |            move.l d0,-(sp)
    da9c:	|  |            jsr 110d4 <trimStack>
    daa2:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
    daa4:	|  |            move.l 24(sp),d0
    daa8:	|  |            move.l d0,-(sp)
    daaa:	|  |            jsr 1121a <getRegionForObject>
    dab0:	|  |            addq.l #4,sp
    dab2:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
    dab6:	|  |        /-- bne.s dabe <moveChr+0x1ec>
    dab8:	|  |        |   moveq #2,d0
    daba:	|  +--------|-- bra.w db78 <moveChr+0x2a6>

			if (force)
    dabe:	|  |        \-> tst.w 6(sp)
    dac2:	|  |        /-- beq.s dafe <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
    dac4:	|  |        |   movea.l 28(sp),a0
    dac8:	|  |        |   move.l 24(a0),d2
    dacc:	|  |        |   movea.l 20(sp),a1
    dad0:	|  |        |   movea.l 28(sp),a0
    dad4:	|  |        |   move.l 20(a0),d1
    dad8:	|  |        |   movea.l 28(sp),a0
    dadc:	|  |        |   move.l 16(a0),d0
    dae0:	|  |        |   move.l d2,-(sp)
    dae2:	|  |        |   move.l 44(sp),-(sp)
    dae6:	|  |        |   move.l a1,-(sp)
    dae8:	|  |        |   move.l d1,-(sp)
    daea:	|  |        |   move.l d0,-(sp)
    daec:	|  |        |   jsr 69e6 <forceWalkingPerson>
    daf2:	|  |        |   lea 20(sp),sp
    daf6:	|  |        |   tst.w d0
    daf8:	|  |     /--|-- beq.s db64 <moveChr+0x292>
    dafa:	|  |     |  |   moveq #3,d0
    dafc:	|  +-----|--|-- bra.s db78 <moveChr+0x2a6>
			}
			else if (immediate)
    dafe:	|  |     |  \-> tst.w 4(sp)
    db02:	|  |     |  /-- beq.s db2a <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
    db04:	|  |     |  |   movea.l 20(sp),a1
    db08:	|  |     |  |   movea.l 28(sp),a0
    db0c:	|  |     |  |   move.l 20(a0),d1
    db10:	|  |     |  |   movea.l 28(sp),a0
    db14:	|  |     |  |   move.l 16(a0),d0
    db18:	|  |     |  |   move.l a1,-(sp)
    db1a:	|  |     |  |   move.l d1,-(sp)
    db1c:	|  |     |  |   move.l d0,-(sp)
    db1e:	|  |     |  |   jsr 6cee <jumpPerson>
    db24:	|  |     |  |   lea 12(sp),sp
    db28:	|  |     +--|-- bra.s db64 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
    db2a:	|  |     |  \-> movea.l 28(sp),a0
    db2e:	|  |     |      move.l 24(a0),d2
    db32:	|  |     |      movea.l 20(sp),a1
    db36:	|  |     |      movea.l 28(sp),a0
    db3a:	|  |     |      move.l 20(a0),d1
    db3e:	|  |     |      movea.l 28(sp),a0
    db42:	|  |     |      move.l 16(a0),d0
    db46:	|  |     |      move.l d2,-(sp)
    db48:	|  |     |      move.l 44(sp),-(sp)
    db4c:	|  |     |      move.l a1,-(sp)
    db4e:	|  |     |      move.l d1,-(sp)
    db50:	|  |     |      move.l d0,-(sp)
    db52:	|  |     |      jsr 6ebe <makeWalkingPerson>
    db58:	|  |     |      lea 20(sp),sp
    db5c:	|  |     |      tst.w d0
    db5e:	|  |     +----- beq.s db64 <moveChr+0x292>
    db60:	|  |     |      moveq #3,d0
    db62:	|  +-----|----- bra.s db78 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
    db64:	|  |     \----> moveq #2,d0
    db66:	|  +----------- bra.s db78 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
    db68:	\--|----------> pea 16222 <main_sludge.c.2f5c5368+0x938>
    db6e:	   |            jsr 127a4 <KPrintF>
    db74:	   |            addq.l #4,sp
			return BR_ERROR;
    db76:	   |            moveq #1,d0
	}
}
    db78:	   \----------> move.l (sp)+,d2
    db7a:	                lea 28(sp),sp
    db7e:	                rts

0000db80 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
    db80:	clr.l -(sp)
    db82:	clr.l -(sp)
    db84:	move.l 16(sp),-(sp)
    db88:	move.l 16(sp),-(sp)
    db8c:	jsr d8d2 <moveChr>
    db92:	lea 16(sp),sp
}
    db96:	rts

0000db98 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
    db98:	clr.l -(sp)
    db9a:	pea 1 <_start+0x1>
    db9e:	move.l 16(sp),-(sp)
    dba2:	move.l 16(sp),-(sp)
    dba6:	jsr d8d2 <moveChr>
    dbac:	lea 16(sp),sp
}
    dbb0:	rts

0000dbb2 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
    dbb2:	pea 1 <_start+0x1>
    dbb6:	clr.l -(sp)
    dbb8:	move.l 16(sp),-(sp)
    dbbc:	move.l 16(sp),-(sp)
    dbc0:	jsr d8d2 <moveChr>
    dbc6:	lea 16(sp),sp
}
    dbca:	rts

0000dbcc <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
    dbcc:	jsr 4d6c <clearStatusBar>
	return BR_CONTINUE;
    dbd2:	moveq #2,d0
}
    dbd4:	rts

0000dbd6 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
    dbd6:	jsr 4e14 <killLastStatus>
	return BR_CONTINUE;
    dbdc:	moveq #2,d0
}
    dbde:	rts

0000dbe0 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
    dbe0:	jsr 4d02 <addStatusBar>
	return BR_CONTINUE;
    dbe6:	moveq #2,d0
}
    dbe8:	rts

0000dbea <builtIn_statusText>:

builtIn(statusText)
{
    dbea:	       subq.l #8,sp
    dbec:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
    dbee:	       movea.l 20(sp),a0
    dbf2:	       move.l 24(a0),d0
    dbf6:	       move.l d0,-(sp)
    dbf8:	       jsr 10d26 <getTextFromAnyVar>
    dbfe:	       addq.l #4,sp
    dc00:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
    dc04:	   /-- bne.s dc0a <builtIn_statusText+0x20>
    dc06:	   |   moveq #1,d0
    dc08:	/--|-- bra.s dc3e <builtIn_statusText+0x54>
	trimStack(&fun->stack);
    dc0a:	|  \-> moveq #24,d0
    dc0c:	|      add.l 20(sp),d0
    dc10:	|      move.l d0,-(sp)
    dc12:	|      jsr 110d4 <trimStack>
    dc18:	|      addq.l #4,sp
	setStatusBar(newText);
    dc1a:	|      move.l 8(sp),-(sp)
    dc1e:	|      jsr 5094 <setStatusBar>
    dc24:	|      addq.l #4,sp
	FreeVec(newText);
    dc26:	|      move.l 8(sp),4(sp)
    dc2c:	|      move.l 19c4c <SysBase>,d0
    dc32:	|      movea.l d0,a6
    dc34:	|      movea.l 4(sp),a1
    dc38:	|      jsr -690(a6)
	return BR_CONTINUE;
    dc3c:	|      moveq #2,d0
}
    dc3e:	\----> movea.l (sp)+,a6
    dc40:	       addq.l #8,sp
    dc42:	       rts

0000dc44 <builtIn_lightStatus>:

builtIn(lightStatus)
{
    dc44:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc46:	       movea.l 12(sp),a0
    dc4a:	       move.l 24(a0),d0
    dc4e:	       move.l d0,-(sp)
    dc50:	       pea 1 <_start+0x1>
    dc54:	       move.l sp,d0
    dc56:	       addq.l #8,d0
    dc58:	       move.l d0,-(sp)
    dc5a:	       jsr 10750 <getValueType>
    dc60:	       lea 12(sp),sp
    dc64:	       tst.w d0
    dc66:	   /-- bne.s dc6c <builtIn_lightStatus+0x28>
    dc68:	   |   moveq #1,d0
    dc6a:	/--|-- bra.s dc8a <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
    dc6c:	|  \-> moveq #24,d0
    dc6e:	|      add.l 12(sp),d0
    dc72:	|      move.l d0,-(sp)
    dc74:	|      jsr 110d4 <trimStack>
    dc7a:	|      addq.l #4,sp
	setLitStatus (val);
    dc7c:	|      move.l (sp),d0
    dc7e:	|      move.l d0,-(sp)
    dc80:	|      jsr 5084 <setLitStatus>
    dc86:	|      addq.l #4,sp
	return BR_CONTINUE;
    dc88:	|      moveq #2,d0
}
    dc8a:	\----> addq.l #4,sp
    dc8c:	       rts

0000dc8e <builtIn_positionStatus>:

builtIn(positionStatus)
{
    dc8e:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dc90:	       movea.l 16(sp),a0
    dc94:	       move.l 24(a0),d0
    dc98:	       move.l d0,-(sp)
    dc9a:	       pea 1 <_start+0x1>
    dc9e:	       move.l sp,d0
    dca0:	       addq.l #8,d0
    dca2:	       move.l d0,-(sp)
    dca4:	       jsr 10750 <getValueType>
    dcaa:	       lea 12(sp),sp
    dcae:	       tst.w d0
    dcb0:	   /-- bne.s dcb6 <builtIn_positionStatus+0x28>
    dcb2:	   |   moveq #1,d0
    dcb4:	/--|-- bra.s dd10 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    dcb6:	|  \-> moveq #24,d0
    dcb8:	|      add.l 16(sp),d0
    dcbc:	|      move.l d0,-(sp)
    dcbe:	|      jsr 110d4 <trimStack>
    dcc4:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dcc6:	|      movea.l 16(sp),a0
    dcca:	|      move.l 24(a0),d0
    dcce:	|      move.l d0,-(sp)
    dcd0:	|      pea 1 <_start+0x1>
    dcd4:	|      moveq #12,d0
    dcd6:	|      add.l sp,d0
    dcd8:	|      move.l d0,-(sp)
    dcda:	|      jsr 10750 <getValueType>
    dce0:	|      lea 12(sp),sp
    dce4:	|      tst.w d0
    dce6:	|  /-- bne.s dcec <builtIn_positionStatus+0x5e>
    dce8:	|  |   moveq #1,d0
    dcea:	+--|-- bra.s dd10 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
    dcec:	|  \-> moveq #24,d0
    dcee:	|      add.l 16(sp),d0
    dcf2:	|      move.l d0,-(sp)
    dcf4:	|      jsr 110d4 <trimStack>
    dcfa:	|      addq.l #4,sp
	positionStatus (x, y);
    dcfc:	|      move.l (sp),d1
    dcfe:	|      move.l 4(sp),d0
    dd02:	|      move.l d1,-(sp)
    dd04:	|      move.l d0,-(sp)
    dd06:	|      jsr 4e76 <positionStatus>
    dd0c:	|      addq.l #8,sp
	return BR_CONTINUE;
    dd0e:	|      moveq #2,d0
}
    dd10:	\----> addq.l #8,sp
    dd12:	       rts

0000dd14 <builtIn_alignStatus>:

builtIn(alignStatus)
{
    dd14:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    dd16:	       movea.l 12(sp),a0
    dd1a:	       move.l 24(a0),d0
    dd1e:	       move.l d0,-(sp)
    dd20:	       pea 1 <_start+0x1>
    dd24:	       move.l sp,d0
    dd26:	       addq.l #8,d0
    dd28:	       move.l d0,-(sp)
    dd2a:	       jsr 10750 <getValueType>
    dd30:	       lea 12(sp),sp
    dd34:	       tst.w d0
    dd36:	   /-- bne.s dd3c <builtIn_alignStatus+0x28>
    dd38:	   |   moveq #1,d0
    dd3a:	/--|-- bra.s dd5c <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
    dd3c:	|  \-> moveq #24,d0
    dd3e:	|      add.l 12(sp),d0
    dd42:	|      move.l d0,-(sp)
    dd44:	|      jsr 110d4 <trimStack>
    dd4a:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
    dd4c:	|      move.l (sp),d0
    dd4e:	|      movea.l 18132 <nowStatus>,a0
    dd54:	|      move.l d0,d0
    dd56:	|      move.w d0,4(a0)
	return BR_CONTINUE;
    dd5a:	|      moveq #2,d0
}
    dd5c:	\----> addq.l #4,sp
    dd5e:	       rts

0000dd60 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
    dd60:	             tst.l 4(sp)
    dd64:	      /----- beq.s dd70 <getFuncNumForCallback+0x10>
    dd66:	      |      moveq #1,d0
    dd68:	      |      cmp.l 4(sp),d0
    dd6c:	      |  /-- beq.s dd76 <getFuncNumForCallback+0x16>
    dd6e:	   /--|--|-- bra.s ddac <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
    dd70:	   |  \--|-> clr.l 12(sp)
			break;
    dd74:	/--|-----|-- bra.s ddbe <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
    dd76:	|  |     \-> movea.l 8(sp),a0
    dd7a:	|  |         move.l 24(a0),d0
    dd7e:	|  |         move.l d0,-(sp)
    dd80:	|  |         pea 2 <_start+0x2>
    dd84:	|  |         move.l 20(sp),-(sp)
    dd88:	|  |         jsr 10750 <getValueType>
    dd8e:	|  |         lea 12(sp),sp
    dd92:	|  |         tst.w d0
    dd94:	|  |     /-- bne.s dd9a <getFuncNumForCallback+0x3a>
    dd96:	|  |     |   clr.w d0
    dd98:	|  |  /--|-- bra.s ddc0 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
    dd9a:	|  |  |  \-> moveq #24,d0
    dd9c:	|  |  |      add.l 8(sp),d0
    dda0:	|  |  |      move.l d0,-(sp)
    dda2:	|  |  |      jsr 110d4 <trimStack>
    dda8:	|  |  |      addq.l #4,sp
			break;
    ddaa:	+--|--|----- bra.s ddbe <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
    ddac:	|  \--|----> pea 16258 <main_sludge.c.2f5c5368+0x96e>
    ddb2:	|     |      jsr 127a4 <KPrintF>
    ddb8:	|     |      addq.l #4,sp
			return FALSE;
    ddba:	|     |      clr.w d0
    ddbc:	|     +----- bra.s ddc0 <getFuncNumForCallback+0x60>
	}
	return TRUE;
    ddbe:	\-----|----> moveq #1,d0
}
    ddc0:	      \----> rts

0000ddc2 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
    ddc2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    ddc4:	       move.l sp,d0
    ddc6:	       move.l d0,-(sp)
    ddc8:	       move.l 16(sp),-(sp)
    ddcc:	       move.l 16(sp),-(sp)
    ddd0:	       jsr dd60 <getFuncNumForCallback>
    ddd6:	       lea 12(sp),sp
    ddda:	       tst.w d0
    dddc:	/----- beq.s ddec <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
    ddde:	|      movea.l 1811c <currentEvents>,a0
    dde4:	|      move.l (sp),d0
    dde6:	|      move.l d0,(a0)
		return BR_CONTINUE;
    dde8:	|      moveq #2,d0
    ddea:	|  /-- bra.s ddee <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
    ddec:	\--|-> moveq #1,d0
}
    ddee:	   \-> addq.l #4,sp
    ddf0:	       rts

0000ddf2 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
    ddf2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    ddf4:	       move.l sp,d0
    ddf6:	       move.l d0,-(sp)
    ddf8:	       move.l 16(sp),-(sp)
    ddfc:	       move.l 16(sp),-(sp)
    de00:	       jsr dd60 <getFuncNumForCallback>
    de06:	       lea 12(sp),sp
    de0a:	       tst.w d0
    de0c:	/----- beq.s de1e <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
    de0e:	|      movea.l 1811c <currentEvents>,a0
    de14:	|      move.l (sp),d0
    de16:	|      move.l d0,4(a0)
		return BR_CONTINUE;
    de1a:	|      moveq #2,d0
    de1c:	|  /-- bra.s de20 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
    de1e:	\--|-> moveq #1,d0
}
    de20:	   \-> addq.l #4,sp
    de22:	       rts

0000de24 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
    de24:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    de26:	       move.l sp,d0
    de28:	       move.l d0,-(sp)
    de2a:	       move.l 16(sp),-(sp)
    de2e:	       move.l 16(sp),-(sp)
    de32:	       jsr dd60 <getFuncNumForCallback>
    de38:	       lea 12(sp),sp
    de3c:	       tst.w d0
    de3e:	/----- beq.s de50 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
    de40:	|      movea.l 1811c <currentEvents>,a0
    de46:	|      move.l (sp),d0
    de48:	|      move.l d0,8(a0)
		return BR_CONTINUE;
    de4c:	|      moveq #2,d0
    de4e:	|  /-- bra.s de52 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
    de50:	\--|-> moveq #1,d0
}
    de52:	   \-> addq.l #4,sp
    de54:	       rts

0000de56 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
    de56:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    de58:	       move.l sp,d0
    de5a:	       move.l d0,-(sp)
    de5c:	       move.l 16(sp),-(sp)
    de60:	       move.l 16(sp),-(sp)
    de64:	       jsr dd60 <getFuncNumForCallback>
    de6a:	       lea 12(sp),sp
    de6e:	       tst.w d0
    de70:	/----- beq.s de82 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
    de72:	|      movea.l 1811c <currentEvents>,a0
    de78:	|      move.l (sp),d0
    de7a:	|      move.l d0,12(a0)
		return BR_CONTINUE;
    de7e:	|      moveq #2,d0
    de80:	|  /-- bra.s de84 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
    de82:	\--|-> moveq #1,d0
}
    de84:	   \-> addq.l #4,sp
    de86:	       rts

0000de88 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
    de88:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    de8a:	       move.l sp,d0
    de8c:	       move.l d0,-(sp)
    de8e:	       move.l 16(sp),-(sp)
    de92:	       move.l 16(sp),-(sp)
    de96:	       jsr dd60 <getFuncNumForCallback>
    de9c:	       lea 12(sp),sp
    dea0:	       tst.w d0
    dea2:	/----- beq.s deb4 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
    dea4:	|      movea.l 1811c <currentEvents>,a0
    deaa:	|      move.l (sp),d0
    deac:	|      move.l d0,20(a0)
		return BR_CONTINUE;
    deb0:	|      moveq #2,d0
    deb2:	|  /-- bra.s deb6 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
    deb4:	\--|-> moveq #1,d0
}
    deb6:	   \-> addq.l #4,sp
    deb8:	       rts

0000deba <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
    deba:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    debc:	       move.l sp,d0
    debe:	       move.l d0,-(sp)
    dec0:	       move.l 16(sp),-(sp)
    dec4:	       move.l 16(sp),-(sp)
    dec8:	       jsr dd60 <getFuncNumForCallback>
    dece:	       lea 12(sp),sp
    ded2:	       tst.w d0
    ded4:	/----- beq.s dee6 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
    ded6:	|      movea.l 1811c <currentEvents>,a0
    dedc:	|      move.l (sp),d0
    dede:	|      move.l d0,16(a0)
		return BR_CONTINUE;
    dee2:	|      moveq #2,d0
    dee4:	|  /-- bra.s dee8 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
    dee6:	\--|-> moveq #1,d0
}
    dee8:	   \-> addq.l #4,sp
    deea:	       rts

0000deec <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
    deec:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    deee:	       move.l sp,d0
    def0:	       move.l d0,-(sp)
    def2:	       move.l 16(sp),-(sp)
    def6:	       move.l 16(sp),-(sp)
    defa:	       jsr dd60 <getFuncNumForCallback>
    df00:	       lea 12(sp),sp
    df04:	       tst.w d0
    df06:	/----- beq.s df18 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
    df08:	|      movea.l 1811c <currentEvents>,a0
    df0e:	|      move.l (sp),d0
    df10:	|      move.l d0,24(a0)
		return BR_CONTINUE;
    df14:	|      moveq #2,d0
    df16:	|  /-- bra.s df1a <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
    df18:	\--|-> moveq #1,d0
}
    df1a:	   \-> addq.l #4,sp
    df1c:	       rts

0000df1e <builtIn_spawnSub>:

builtIn (spawnSub)
{
    df1e:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    df20:	          move.l sp,d0
    df22:	          move.l d0,-(sp)
    df24:	          move.l 16(sp),-(sp)
    df28:	          move.l 16(sp),-(sp)
    df2c:	          jsr dd60 <getFuncNumForCallback>
    df32:	          lea 12(sp),sp
    df36:	          tst.w d0
    df38:	/-------- beq.s df64 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
    df3a:	|         move.l 19c1c <noStack>,d1
    df40:	|         move.l (sp),d0
    df42:	|         pea 1 <_start+0x1>
    df46:	|         move.l d1,-(sp)
    df48:	|         clr.l -(sp)
    df4a:	|         clr.l -(sp)
    df4c:	|         move.l d0,-(sp)
    df4e:	|         jsr 3fa6 <startNewFunctionNum>
    df54:	|         lea 20(sp),sp
    df58:	|         tst.l d0
    df5a:	|     /-- bne.s df60 <builtIn_spawnSub+0x42>
    df5c:	|     |   moveq #1,d0
    df5e:	|  /--|-- bra.s df66 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
    df60:	|  |  \-> moveq #2,d0
    df62:	|  +----- bra.s df66 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
    df64:	\--|----> moveq #1,d0
}
    df66:	   \----> addq.l #4,sp
    df68:	          rts

0000df6a <builtIn_cancelSub>:

builtIn (cancelSub)
{
    df6a:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
    df6c:	          move.l sp,d0
    df6e:	          addq.l #4,d0
    df70:	          move.l d0,-(sp)
    df72:	          move.l 20(sp),-(sp)
    df76:	          move.l 20(sp),-(sp)
    df7a:	          jsr dd60 <getFuncNumForCallback>
    df80:	          lea 12(sp),sp
    df84:	          tst.w d0
    df86:	/-------- beq.s dfbc <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
    df88:	|         move.l 4(sp),d1
    df8c:	|         move.l sp,d0
    df8e:	|         addq.l #2,d0
    df90:	|         move.l d0,-(sp)
    df92:	|         move.l 20(sp),-(sp)
    df96:	|         move.l d1,-(sp)
    df98:	|         jsr 1f84 <cancelAFunction>
    df9e:	|         lea 12(sp),sp
		if (killedMyself) {
    dfa2:	|         move.w 2(sp),d0
    dfa6:	|  /----- beq.s dfb8 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
    dfa8:	|  |      move.l 16(sp),-(sp)
    dfac:	|  |      jsr 1ea2 <abortFunction>
    dfb2:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
    dfb4:	|  |      moveq #5,d0
    dfb6:	|  |  /-- bra.s dfbe <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
    dfb8:	|  \--|-> moveq #2,d0
    dfba:	|     +-- bra.s dfbe <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
    dfbc:	\-----|-> moveq #1,d0
}
    dfbe:	      \-> addq.l #8,sp
    dfc0:	          rts

0000dfc2 <builtIn_stringWidth>:

builtIn(stringWidth)
{
    dfc2:	       subq.l #8,sp
    dfc4:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
    dfc6:	       movea.l 20(sp),a0
    dfca:	       move.l 24(a0),d0
    dfce:	       move.l d0,-(sp)
    dfd0:	       jsr 10d26 <getTextFromAnyVar>
    dfd6:	       addq.l #4,sp
    dfd8:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
    dfdc:	   /-- bne.s dfe2 <builtIn_stringWidth+0x20>
    dfde:	   |   moveq #1,d0
    dfe0:	/--|-- bra.s e030 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
    dfe2:	|  \-> moveq #24,d0
    dfe4:	|      add.l 20(sp),d0
    dfe8:	|      move.l d0,-(sp)
    dfea:	|      jsr 110d4 <trimStack>
    dff0:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
    dff2:	|      move.l 8(sp),-(sp)
    dff6:	|      jsr 1112e <stringWidth>
    dffc:	|      addq.l #4,sp
    dffe:	|      move.l d0,d1
    e000:	|      moveq #28,d0
    e002:	|      add.l 20(sp),d0
    e006:	|      move.l d1,-(sp)
    e008:	|      pea 1 <_start+0x1>
    e00c:	|      move.l d0,-(sp)
    e00e:	|      jsr 11042 <setVariable>
    e014:	|      lea 12(sp),sp
	FreeVec(theText);
    e018:	|      move.l 8(sp),4(sp)
    e01e:	|      move.l 19c4c <SysBase>,d0
    e024:	|      movea.l d0,a6
    e026:	|      movea.l 4(sp),a1
    e02a:	|      jsr -690(a6)
	return BR_CONTINUE;
    e02e:	|      moveq #2,d0
}
    e030:	\----> movea.l (sp)+,a6
    e032:	       addq.l #8,sp
    e034:	       rts

0000e036 <builtIn_hardScroll>:

builtIn(hardScroll)
{
    e036:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e038:	       movea.l 12(sp),a0
    e03c:	       move.l 24(a0),d0
    e040:	       move.l d0,-(sp)
    e042:	       pea 1 <_start+0x1>
    e046:	       move.l sp,d0
    e048:	       addq.l #8,d0
    e04a:	       move.l d0,-(sp)
    e04c:	       jsr 10750 <getValueType>
    e052:	       lea 12(sp),sp
    e056:	       tst.w d0
    e058:	   /-- bne.s e05e <builtIn_hardScroll+0x28>
    e05a:	   |   moveq #1,d0
    e05c:	/--|-- bra.s e07c <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
    e05e:	|  \-> moveq #24,d0
    e060:	|      add.l 12(sp),d0
    e064:	|      move.l d0,-(sp)
    e066:	|      jsr 110d4 <trimStack>
    e06c:	|      addq.l #4,sp
	hardScroll (v);
    e06e:	|      move.l (sp),d0
    e070:	|      move.l d0,-(sp)
    e072:	|      jsr 933e <hardScroll>
    e078:	|      addq.l #4,sp
	return BR_CONTINUE;
    e07a:	|      moveq #2,d0
}
    e07c:	\----> addq.l #4,sp
    e07e:	       rts

0000e080 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
    e080:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e082:	       movea.l 12(sp),a0
    e086:	       move.l 24(a0),d0
    e08a:	       move.l d0,-(sp)
    e08c:	       pea 7 <_start+0x7>
    e090:	       move.l sp,d0
    e092:	       addq.l #8,d0
    e094:	       move.l d0,-(sp)
    e096:	       jsr 10750 <getValueType>
    e09c:	       lea 12(sp),sp
    e0a0:	       tst.w d0
    e0a2:	   /-- bne.s e0a8 <builtIn_isScreenRegion+0x28>
    e0a4:	   |   moveq #1,d0
    e0a6:	/--|-- bra.s e0e8 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
    e0a8:	|  \-> moveq #24,d0
    e0aa:	|      add.l 12(sp),d0
    e0ae:	|      move.l d0,-(sp)
    e0b0:	|      jsr 110d4 <trimStack>
    e0b6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
    e0b8:	|      move.l (sp),d0
    e0ba:	|      move.l d0,-(sp)
    e0bc:	|      jsr 1121a <getRegionForObject>
    e0c2:	|      addq.l #4,sp
    e0c4:	|      tst.l d0
    e0c6:	|      sne d0
    e0c8:	|      neg.b d0
    e0ca:	|      moveq #0,d1
    e0cc:	|      move.b d0,d1
    e0ce:	|      moveq #28,d0
    e0d0:	|      add.l 12(sp),d0
    e0d4:	|      move.l d1,-(sp)
    e0d6:	|      pea 1 <_start+0x1>
    e0da:	|      move.l d0,-(sp)
    e0dc:	|      jsr 11042 <setVariable>
    e0e2:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e0e6:	|      moveq #2,d0
}
    e0e8:	\----> addq.l #4,sp
    e0ea:	       rts

0000e0ec <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
    e0ec:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e0ee:	       movea.l 12(sp),a0
    e0f2:	       move.l 24(a0),d0
    e0f6:	       move.l d0,-(sp)
    e0f8:	       pea 1 <_start+0x1>
    e0fc:	       move.l sp,d0
    e0fe:	       addq.l #8,d0
    e100:	       move.l d0,-(sp)
    e102:	       jsr 10750 <getValueType>
    e108:	       lea 12(sp),sp
    e10c:	       tst.w d0
    e10e:	   /-- bne.s e114 <builtIn_setSpeechSpeed+0x28>
    e110:	   |   moveq #1,d0
    e112:	/--|-- bra.s e162 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
    e114:	|  \-> moveq #24,d0
    e116:	|      add.l 12(sp),d0
    e11a:	|      move.l d0,-(sp)
    e11c:	|      jsr 110d4 <trimStack>
    e122:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
    e124:	|      move.l (sp),d0
    e126:	|      move.l d0,-(sp)
    e128:	|      jsr 12bfc <__floatsisf>
    e12e:	|      addq.l #4,sp
    e130:	|      move.l #1008981770,-(sp)
    e136:	|      move.l d0,-(sp)
    e138:	|      jsr 12cae <__mulsf3>
    e13e:	|      addq.l #8,sp
    e140:	|      move.l d0,18136 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
    e146:	|      moveq #28,d0
    e148:	|      add.l 12(sp),d0
    e14c:	|      pea 1 <_start+0x1>
    e150:	|      pea 1 <_start+0x1>
    e154:	|      move.l d0,-(sp)
    e156:	|      jsr 11042 <setVariable>
    e15c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e160:	|      moveq #2,d0
}
    e162:	\----> addq.l #4,sp
    e164:	       rts

0000e166 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
    e166:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e168:	       movea.l 12(sp),a0
    e16c:	       move.l 24(a0),d0
    e170:	       move.l d0,-(sp)
    e172:	       pea 1 <_start+0x1>
    e176:	       move.l sp,d0
    e178:	       addq.l #8,d0
    e17a:	       move.l d0,-(sp)
    e17c:	       jsr 10750 <getValueType>
    e182:	       lea 12(sp),sp
    e186:	       tst.w d0
    e188:	   /-- bne.s e18e <builtIn_setFontSpacing+0x28>
    e18a:	   |   moveq #1,d0
    e18c:	/--|-- bra.s e1c4 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
    e18e:	|  \-> move.l (sp),d0
    e190:	|      move.l d0,d0
    e192:	|      move.w d0,186b0 <fontSpace>
	trimStack (&fun -> stack);
    e198:	|      moveq #24,d0
    e19a:	|      add.l 12(sp),d0
    e19e:	|      move.l d0,-(sp)
    e1a0:	|      jsr 110d4 <trimStack>
    e1a6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    e1a8:	|      moveq #28,d0
    e1aa:	|      add.l 12(sp),d0
    e1ae:	|      pea 1 <_start+0x1>
    e1b2:	|      pea 1 <_start+0x1>
    e1b6:	|      move.l d0,-(sp)
    e1b8:	|      jsr 11042 <setVariable>
    e1be:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e1c2:	|      moveq #2,d0
}
    e1c4:	\----> addq.l #4,sp
    e1c6:	       rts

0000e1c8 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
    e1c8:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e1ca:	          movea.l 12(sp),a0
    e1ce:	          move.l 24(a0),d0
    e1d2:	          move.l d0,-(sp)
    e1d4:	          pea 1 <_start+0x1>
    e1d8:	          move.l sp,d0
    e1da:	          addq.l #8,d0
    e1dc:	          move.l d0,-(sp)
    e1de:	          jsr 10750 <getValueType>
    e1e4:	          lea 12(sp),sp
    e1e8:	          tst.w d0
    e1ea:	      /-- bne.s e1f0 <builtIn_transitionLevel+0x28>
    e1ec:	      |   moveq #1,d0
    e1ee:	/-----|-- bra.s e244 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
    e1f0:	|     \-> moveq #24,d0
    e1f2:	|         add.l 12(sp),d0
    e1f6:	|         move.l d0,-(sp)
    e1f8:	|         jsr 110d4 <trimStack>
    e1fe:	|         addq.l #4,sp

	if (number < 0)
    e200:	|         move.l (sp),d0
    e202:	|     /-- bpl.s e20c <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
    e204:	|     |   clr.b 1811a <brightnessLevel>
    e20a:	|  /--|-- bra.s e228 <builtIn_transitionLevel+0x60>
	else if (number > 255)
    e20c:	|  |  \-> move.l (sp),d0
    e20e:	|  |      cmpi.l #255,d0
    e214:	|  |  /-- ble.s e21e <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
    e216:	|  |  |   st 1811a <brightnessLevel>
    e21c:	|  +--|-- bra.s e228 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
    e21e:	|  |  \-> move.l (sp),d0
    e220:	|  |      move.l d0,d0
    e222:	|  |      move.b d0,1811a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
    e228:	|  \----> moveq #28,d0
    e22a:	|         add.l 12(sp),d0
    e22e:	|         pea 1 <_start+0x1>
    e232:	|         pea 1 <_start+0x1>
    e236:	|         move.l d0,-(sp)
    e238:	|         jsr 11042 <setVariable>
    e23e:	|         lea 12(sp),sp
	return BR_CONTINUE;
    e242:	|         moveq #2,d0
}
    e244:	\-------> addq.l #4,sp
    e246:	          rts

0000e248 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
    e248:	movea.l 8(sp),a0
    e24c:	move.l 24(a0),d0
    e250:	move.l d0,-(sp)
    e252:	jsr 10c90 <getBoolean>
    e258:	addq.l #4,sp
    e25a:	move.w d0,19bf0 <captureAllKeys>
	trimStack (&fun -> stack);
    e260:	moveq #24,d0
    e262:	add.l 8(sp),d0
    e266:	move.l d0,-(sp)
    e268:	jsr 110d4 <trimStack>
    e26e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
    e270:	move.w 19bf0 <captureAllKeys>,d0
    e276:	movea.w d0,a0
    e278:	moveq #28,d0
    e27a:	add.l 8(sp),d0
    e27e:	move.l a0,-(sp)
    e280:	pea 1 <_start+0x1>
    e284:	move.l d0,-(sp)
    e286:	jsr 11042 <setVariable>
    e28c:	lea 12(sp),sp
	return BR_CONTINUE;
    e290:	moveq #2,d0
}
    e292:	rts

0000e294 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
    e294:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e298:	       movea.l 20(sp),a0
    e29c:	       move.l 24(a0),d0
    e2a0:	       move.l d0,-(sp)
    e2a2:	       pea 1 <_start+0x1>
    e2a6:	       moveq #12,d0
    e2a8:	       add.l sp,d0
    e2aa:	       move.l d0,-(sp)
    e2ac:	       jsr 10750 <getValueType>
    e2b2:	       lea 12(sp),sp
    e2b6:	       tst.w d0
    e2b8:	   /-- bne.s e2c0 <builtIn_spinCharacter+0x2c>
    e2ba:	   |   moveq #1,d0
    e2bc:	/--|-- bra.w e370 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    e2c0:	|  \-> moveq #24,d0
    e2c2:	|      add.l 20(sp),d0
    e2c6:	|      move.l d0,-(sp)
    e2c8:	|      jsr 110d4 <trimStack>
    e2ce:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e2d0:	|      movea.l 20(sp),a0
    e2d4:	|      move.l 24(a0),d0
    e2d8:	|      move.l d0,-(sp)
    e2da:	|      pea 7 <_start+0x7>
    e2de:	|      lea 8(sp),a0
    e2e2:	|      move.l a0,-(sp)
    e2e4:	|      jsr 10750 <getValueType>
    e2ea:	|      lea 12(sp),sp
    e2ee:	|      tst.w d0
    e2f0:	|  /-- bne.s e2f6 <builtIn_spinCharacter+0x62>
    e2f2:	|  |   moveq #1,d0
    e2f4:	+--|-- bra.s e370 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
    e2f6:	|  \-> moveq #24,d0
    e2f8:	|      add.l 20(sp),d0
    e2fc:	|      move.l d0,-(sp)
    e2fe:	|      jsr 110d4 <trimStack>
    e304:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    e306:	|      move.l (sp),d0
    e308:	|      move.l d0,-(sp)
    e30a:	|      jsr 6994 <findPerson>
    e310:	|      addq.l #4,sp
    e312:	|      move.l d0,8(sp)
	if (thisPerson) {
    e316:	|  /-- beq.s e356 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
    e318:	|  |   move.l 4(sp),d0
    e31c:	|  |   movea.l 8(sp),a0
    e320:	|  |   move.l d0,84(a0)
		thisPerson -> spinning = TRUE;
    e324:	|  |   movea.l 8(sp),a0
    e328:	|  |   move.w #1,54(a0)
		thisPerson -> continueAfterWalking = fun;
    e32e:	|  |   movea.l 8(sp),a0
    e332:	|  |   move.l 20(sp),56(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    e338:	|  |   moveq #28,d0
    e33a:	|  |   add.l 20(sp),d0
    e33e:	|  |   pea 1 <_start+0x1>
    e342:	|  |   pea 1 <_start+0x1>
    e346:	|  |   move.l d0,-(sp)
    e348:	|  |   jsr 11042 <setVariable>
    e34e:	|  |   lea 12(sp),sp
		return BR_PAUSE;
    e352:	|  |   moveq #3,d0
    e354:	+--|-- bra.s e370 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e356:	|  \-> moveq #28,d0
    e358:	|      add.l 20(sp),d0
    e35c:	|      clr.l -(sp)
    e35e:	|      pea 1 <_start+0x1>
    e362:	|      move.l d0,-(sp)
    e364:	|      jsr 11042 <setVariable>
    e36a:	|      lea 12(sp),sp
		return BR_CONTINUE;
    e36e:	|      moveq #2,d0
	}
}
    e370:	\----> lea 12(sp),sp
    e374:	       rts

0000e376 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
    e376:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e378:	          movea.l 16(sp),a0
    e37c:	          move.l 24(a0),d0
    e380:	          move.l d0,-(sp)
    e382:	          pea 7 <_start+0x7>
    e386:	          move.l sp,d0
    e388:	          addq.l #8,d0
    e38a:	          move.l d0,-(sp)
    e38c:	          jsr 10750 <getValueType>
    e392:	          lea 12(sp),sp
    e396:	          tst.w d0
    e398:	      /-- bne.s e39e <builtIn_getCharacterDirection+0x28>
    e39a:	      |   moveq #1,d0
    e39c:	/-----|-- bra.s e3fc <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
    e39e:	|     \-> moveq #24,d0
    e3a0:	|         add.l 16(sp),d0
    e3a4:	|         move.l d0,-(sp)
    e3a6:	|         jsr 110d4 <trimStack>
    e3ac:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    e3ae:	|         move.l (sp),d0
    e3b0:	|         move.l d0,-(sp)
    e3b2:	|         jsr 6994 <findPerson>
    e3b8:	|         addq.l #4,sp
    e3ba:	|         move.l d0,4(sp)
	if (thisPerson) {
    e3be:	|  /----- beq.s e3e2 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
    e3c0:	|  |      movea.l 4(sp),a0
    e3c4:	|  |      move.l 94(a0),d1
    e3c8:	|  |      moveq #28,d0
    e3ca:	|  |      add.l 16(sp),d0
    e3ce:	|  |      move.l d1,-(sp)
    e3d0:	|  |      pea 1 <_start+0x1>
    e3d4:	|  |      move.l d0,-(sp)
    e3d6:	|  |      jsr 11042 <setVariable>
    e3dc:	|  |      lea 12(sp),sp
    e3e0:	|  |  /-- bra.s e3fa <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e3e2:	|  \--|-> moveq #28,d0
    e3e4:	|     |   add.l 16(sp),d0
    e3e8:	|     |   clr.l -(sp)
    e3ea:	|     |   pea 1 <_start+0x1>
    e3ee:	|     |   move.l d0,-(sp)
    e3f0:	|     |   jsr 11042 <setVariable>
    e3f6:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e3fa:	|     \-> moveq #2,d0
}
    e3fc:	\-------> addq.l #8,sp
    e3fe:	          rts

0000e400 <builtIn_isCharacter>:

builtIn(isCharacter)
{
    e400:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e402:	       movea.l 16(sp),a0
    e406:	       move.l 24(a0),d0
    e40a:	       move.l d0,-(sp)
    e40c:	       pea 7 <_start+0x7>
    e410:	       move.l sp,d0
    e412:	       addq.l #8,d0
    e414:	       move.l d0,-(sp)
    e416:	       jsr 10750 <getValueType>
    e41c:	       lea 12(sp),sp
    e420:	       tst.w d0
    e422:	   /-- bne.s e428 <builtIn_isCharacter+0x28>
    e424:	   |   moveq #1,d0
    e426:	/--|-- bra.s e46a <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
    e428:	|  \-> moveq #24,d0
    e42a:	|      add.l 16(sp),d0
    e42e:	|      move.l d0,-(sp)
    e430:	|      jsr 110d4 <trimStack>
    e436:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    e438:	|      move.l (sp),d0
    e43a:	|      move.l d0,-(sp)
    e43c:	|      jsr 6994 <findPerson>
    e442:	|      addq.l #4,sp
    e444:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
    e448:	|      sne d0
    e44a:	|      neg.b d0
    e44c:	|      moveq #0,d1
    e44e:	|      move.b d0,d1
    e450:	|      moveq #28,d0
    e452:	|      add.l 16(sp),d0
    e456:	|      move.l d1,-(sp)
    e458:	|      pea 1 <_start+0x1>
    e45c:	|      move.l d0,-(sp)
    e45e:	|      jsr 11042 <setVariable>
    e464:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e468:	|      moveq #2,d0
}
    e46a:	\----> addq.l #8,sp
    e46c:	       rts

0000e46e <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
    e46e:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e470:	          movea.l 16(sp),a0
    e474:	          move.l 24(a0),d0
    e478:	          move.l d0,-(sp)
    e47a:	          pea 7 <_start+0x7>
    e47e:	          move.l sp,d0
    e480:	          addq.l #8,d0
    e482:	          move.l d0,-(sp)
    e484:	          jsr 10750 <getValueType>
    e48a:	          lea 12(sp),sp
    e48e:	          tst.w d0
    e490:	      /-- bne.s e496 <builtIn_normalCharacter+0x28>
    e492:	      |   moveq #1,d0
    e494:	/-----|-- bra.s e512 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
    e496:	|     \-> moveq #24,d0
    e498:	|         add.l 16(sp),d0
    e49c:	|         move.l d0,-(sp)
    e49e:	|         jsr 110d4 <trimStack>
    e4a4:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    e4a6:	|         move.l (sp),d0
    e4a8:	|         move.l d0,-(sp)
    e4aa:	|         jsr 6994 <findPerson>
    e4b0:	|         addq.l #4,sp
    e4b2:	|         move.l d0,4(sp)
	if (thisPerson)
    e4b6:	|  /----- beq.s e4f8 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
    e4b8:	|  |      movea.l 4(sp),a0
    e4bc:	|  |      movea.l 68(a0),a0
    e4c0:	|  |      move.l (a0),d1
    e4c2:	|  |      movea.l 4(sp),a0
    e4c6:	|  |      move.l 94(a0),d0
    e4ca:	|  |      add.l d0,d0
    e4cc:	|  |      add.l d0,d0
    e4ce:	|  |      movea.l d1,a0
    e4d0:	|  |      adda.l d0,a0
    e4d2:	|  |      move.l (a0),d0
    e4d4:	|  |      movea.l 4(sp),a0
    e4d8:	|  |      move.l d0,60(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    e4dc:	|  |      moveq #28,d0
    e4de:	|  |      add.l 16(sp),d0
    e4e2:	|  |      pea 1 <_start+0x1>
    e4e6:	|  |      pea 1 <_start+0x1>
    e4ea:	|  |      move.l d0,-(sp)
    e4ec:	|  |      jsr 11042 <setVariable>
    e4f2:	|  |      lea 12(sp),sp
    e4f6:	|  |  /-- bra.s e510 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e4f8:	|  \--|-> moveq #28,d0
    e4fa:	|     |   add.l 16(sp),d0
    e4fe:	|     |   clr.l -(sp)
    e500:	|     |   pea 1 <_start+0x1>
    e504:	|     |   move.l d0,-(sp)
    e506:	|     |   jsr 11042 <setVariable>
    e50c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e510:	|     \-> moveq #2,d0
}
    e512:	\-------> addq.l #8,sp
    e514:	          rts

0000e516 <builtIn_isMoving>:

builtIn(isMoving)
{
    e516:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e518:	          movea.l 16(sp),a0
    e51c:	          move.l 24(a0),d0
    e520:	          move.l d0,-(sp)
    e522:	          pea 7 <_start+0x7>
    e526:	          move.l sp,d0
    e528:	          addq.l #8,d0
    e52a:	          move.l d0,-(sp)
    e52c:	          jsr 10750 <getValueType>
    e532:	          lea 12(sp),sp
    e536:	          tst.w d0
    e538:	      /-- bne.s e53e <builtIn_isMoving+0x28>
    e53a:	      |   moveq #1,d0
    e53c:	/-----|-- bra.s e59e <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
    e53e:	|     \-> moveq #24,d0
    e540:	|         add.l 16(sp),d0
    e544:	|         move.l d0,-(sp)
    e546:	|         jsr 110d4 <trimStack>
    e54c:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
    e54e:	|         move.l (sp),d0
    e550:	|         move.l d0,-(sp)
    e552:	|         jsr 6994 <findPerson>
    e558:	|         addq.l #4,sp
    e55a:	|         move.l d0,4(sp)
	if (thisPerson)
    e55e:	|  /----- beq.s e584 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
    e560:	|  |      movea.l 4(sp),a0
    e564:	|  |      move.w 52(a0),d0
    e568:	|  |      movea.w d0,a0
    e56a:	|  |      moveq #28,d0
    e56c:	|  |      add.l 16(sp),d0
    e570:	|  |      move.l a0,-(sp)
    e572:	|  |      pea 1 <_start+0x1>
    e576:	|  |      move.l d0,-(sp)
    e578:	|  |      jsr 11042 <setVariable>
    e57e:	|  |      lea 12(sp),sp
    e582:	|  |  /-- bra.s e59c <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e584:	|  \--|-> moveq #28,d0
    e586:	|     |   add.l 16(sp),d0
    e58a:	|     |   clr.l -(sp)
    e58c:	|     |   pea 1 <_start+0x1>
    e590:	|     |   move.l d0,-(sp)
    e592:	|     |   jsr 11042 <setVariable>
    e598:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e59c:	|     \-> moveq #2,d0
}
    e59e:	\-------> addq.l #8,sp
    e5a0:	          rts

0000e5a2 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
    e5a2:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e5a6:	          movea.l 20(sp),a0
    e5aa:	          move.l 24(a0),d0
    e5ae:	          move.l d0,-(sp)
    e5b0:	          pea 7 <_start+0x7>
    e5b4:	          lea 8(sp),a0
    e5b8:	          move.l a0,-(sp)
    e5ba:	          jsr 10750 <getValueType>
    e5c0:	          lea 12(sp),sp
    e5c4:	          tst.w d0
    e5c6:	      /-- bne.s e5ce <builtIn_fetchEvent+0x2c>
    e5c8:	      |   moveq #1,d0
    e5ca:	/-----|-- bra.w e662 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    e5ce:	|     \-> moveq #24,d0
    e5d0:	|         add.l 20(sp),d0
    e5d4:	|         move.l d0,-(sp)
    e5d6:	|         jsr 110d4 <trimStack>
    e5dc:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e5de:	|         movea.l 20(sp),a0
    e5e2:	|         move.l 24(a0),d0
    e5e6:	|         move.l d0,-(sp)
    e5e8:	|         pea 7 <_start+0x7>
    e5ec:	|         moveq #12,d0
    e5ee:	|         add.l sp,d0
    e5f0:	|         move.l d0,-(sp)
    e5f2:	|         jsr 10750 <getValueType>
    e5f8:	|         lea 12(sp),sp
    e5fc:	|         tst.w d0
    e5fe:	|     /-- bne.s e604 <builtIn_fetchEvent+0x62>
    e600:	|     |   moveq #1,d0
    e602:	+-----|-- bra.s e662 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
    e604:	|     \-> moveq #24,d0
    e606:	|         add.l 20(sp),d0
    e60a:	|         move.l d0,-(sp)
    e60c:	|         jsr 110d4 <trimStack>
    e612:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    e614:	|         move.l (sp),d1
    e616:	|         move.l 4(sp),d0
    e61a:	|         move.l d1,-(sp)
    e61c:	|         move.l d0,-(sp)
    e61e:	|         jsr 95d6 <getCombinationFunction>
    e624:	|         addq.l #8,sp
    e626:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
    e62a:	|  /----- beq.s e648 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    e62c:	|  |      moveq #28,d0
    e62e:	|  |      add.l 20(sp),d0
    e632:	|  |      move.l 8(sp),-(sp)
    e636:	|  |      pea 2 <_start+0x2>
    e63a:	|  |      move.l d0,-(sp)
    e63c:	|  |      jsr 11042 <setVariable>
    e642:	|  |      lea 12(sp),sp
    e646:	|  |  /-- bra.s e660 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e648:	|  \--|-> moveq #28,d0
    e64a:	|     |   add.l 20(sp),d0
    e64e:	|     |   clr.l -(sp)
    e650:	|     |   pea 1 <_start+0x1>
    e654:	|     |   move.l d0,-(sp)
    e656:	|     |   jsr 11042 <setVariable>
    e65c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e660:	|     \-> moveq #2,d0
}
    e662:	\-------> lea 12(sp),sp
    e666:	          rts

0000e668 <builtIn_deleteFile>:

builtIn(deleteFile)
{
    e668:	       lea -24(sp),sp
    e66c:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
    e66e:	       movea.l 36(sp),a0
    e672:	       move.l 24(a0),d0
    e676:	       move.l d0,-(sp)
    e678:	       jsr 10d26 <getTextFromAnyVar>
    e67e:	       addq.l #4,sp
    e680:	       move.l d0,24(sp)
    trimStack(&fun->stack);
    e684:	       moveq #24,d0
    e686:	       add.l 36(sp),d0
    e68a:	       move.l d0,-(sp)
    e68c:	       jsr 110d4 <trimStack>
    e692:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
    e694:	       move.l 24(sp),-(sp)
    e698:	       jsr 2fe <encodeFilename>
    e69e:	       addq.l #4,sp
    e6a0:	       move.l d0,20(sp)
    FreeVec(namNormal);
    e6a4:	       move.l 24(sp),16(sp)
    e6aa:	       move.l 19c4c <SysBase>,d0
    e6b0:	       movea.l d0,a6
    e6b2:	       movea.l 16(sp),a1
    e6b6:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
    e6ba:	       move.l 20(sp),-(sp)
    e6be:	       jsr a38e <failSecurityCheck>
    e6c4:	       addq.l #4,sp
    e6c6:	       tst.w d0
    e6c8:	   /-- beq.s e6ce <builtIn_deleteFile+0x66>
    e6ca:	   |   moveq #1,d0
    e6cc:	/--|-- bra.s e71c <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
    e6ce:	|  \-> move.l 20(sp),12(sp)
    e6d4:	|      move.l 19c54 <DOSBase>,d0
    e6da:	|      movea.l d0,a6
    e6dc:	|      move.l 12(sp),d1
    e6e0:	|      jsr -72(a6)
    e6e4:	|      move.l d0,8(sp)
    e6e8:	|      move.l 8(sp),d1
    e6ec:	|      moveq #28,d0
    e6ee:	|      add.l 36(sp),d0
    e6f2:	|      move.l d1,-(sp)
    e6f4:	|      pea 1 <_start+0x1>
    e6f8:	|      move.l d0,-(sp)
    e6fa:	|      jsr 11042 <setVariable>
    e700:	|      lea 12(sp),sp
    FreeVec(nam);
    e704:	|      move.l 20(sp),4(sp)
    e70a:	|      move.l 19c4c <SysBase>,d0
    e710:	|      movea.l d0,a6
    e712:	|      movea.l 4(sp),a1
    e716:	|      jsr -690(a6)

    return BR_CONTINUE;
    e71a:	|      moveq #2,d0
}
    e71c:	\----> movea.l (sp)+,a6
    e71e:	       lea 24(sp),sp
    e722:	       rts

0000e724 <builtIn_renameFile>:

builtIn(renameFile)
{
    e724:	       lea -40(sp),sp
    e728:	       move.l a6,-(sp)
    e72a:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    e72c:	       movea.l 56(sp),a0
    e730:	       move.l 24(a0),d0
    e734:	       move.l d0,-(sp)
    e736:	       jsr 10d26 <getTextFromAnyVar>
    e73c:	       addq.l #4,sp
    e73e:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
    e742:	       move.l 44(sp),-(sp)
    e746:	       jsr 2fe <encodeFilename>
    e74c:	       addq.l #4,sp
    e74e:	       move.l d0,40(sp)
	trimStack(&fun->stack);
    e752:	       moveq #24,d0
    e754:	       add.l 56(sp),d0
    e758:	       move.l d0,-(sp)
    e75a:	       jsr 110d4 <trimStack>
    e760:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
    e762:	       move.l 40(sp),-(sp)
    e766:	       jsr a38e <failSecurityCheck>
    e76c:	       addq.l #4,sp
    e76e:	       tst.w d0
    e770:	   /-- beq.s e778 <builtIn_renameFile+0x54>
    e772:	   |   moveq #1,d0
    e774:	/--|-- bra.w e85e <builtIn_renameFile+0x13a>
	FreeVec(temp);
    e778:	|  \-> move.l 44(sp),36(sp)
    e77e:	|      move.l 19c4c <SysBase>,d0
    e784:	|      movea.l d0,a6
    e786:	|      movea.l 36(sp),a1
    e78a:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
    e78e:	|      movea.l 56(sp),a0
    e792:	|      move.l 24(a0),d0
    e796:	|      move.l d0,-(sp)
    e798:	|      jsr 10d26 <getTextFromAnyVar>
    e79e:	|      addq.l #4,sp
    e7a0:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
    e7a4:	|      move.l 44(sp),-(sp)
    e7a8:	|      jsr 2fe <encodeFilename>
    e7ae:	|      addq.l #4,sp
    e7b0:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
    e7b4:	|      moveq #24,d0
    e7b6:	|      add.l 56(sp),d0
    e7ba:	|      move.l d0,-(sp)
    e7bc:	|      jsr 110d4 <trimStack>
    e7c2:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
    e7c4:	|      move.l 32(sp),-(sp)
    e7c8:	|      jsr a38e <failSecurityCheck>
    e7ce:	|      addq.l #4,sp
    e7d0:	|      tst.w d0
    e7d2:	|  /-- beq.s e7da <builtIn_renameFile+0xb6>
    e7d4:	|  |   moveq #1,d0
    e7d6:	+--|-- bra.w e85e <builtIn_renameFile+0x13a>
	FreeVec(temp);
    e7da:	|  \-> move.l 44(sp),28(sp)
    e7e0:	|      move.l 19c4c <SysBase>,d0
    e7e6:	|      movea.l d0,a6
    e7e8:	|      movea.l 28(sp),a1
    e7ec:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
    e7f0:	|      move.l 32(sp),24(sp)
    e7f6:	|      move.l 40(sp),20(sp)
    e7fc:	|      move.l 19c54 <DOSBase>,d0
    e802:	|      movea.l d0,a6
    e804:	|      move.l 24(sp),d1
    e808:	|      move.l 20(sp),d2
    e80c:	|      jsr -78(a6)
    e810:	|      move.l d0,16(sp)
    e814:	|      move.l 16(sp),d1
    e818:	|      moveq #28,d0
    e81a:	|      add.l 56(sp),d0
    e81e:	|      move.l d1,-(sp)
    e820:	|      pea 1 <_start+0x1>
    e824:	|      move.l d0,-(sp)
    e826:	|      jsr 11042 <setVariable>
    e82c:	|      lea 12(sp),sp
	FreeVec(nam);
    e830:	|      move.l 32(sp),12(sp)
    e836:	|      move.l 19c4c <SysBase>,d0
    e83c:	|      movea.l d0,a6
    e83e:	|      movea.l 12(sp),a1
    e842:	|      jsr -690(a6)
	FreeVec(newnam);
    e846:	|      move.l 40(sp),8(sp)
    e84c:	|      move.l 19c4c <SysBase>,d0
    e852:	|      movea.l d0,a6
    e854:	|      movea.l 8(sp),a1
    e858:	|      jsr -690(a6)

	return BR_CONTINUE;
    e85c:	|      moveq #2,d0
}
    e85e:	\----> move.l (sp)+,d2
    e860:	       movea.l (sp)+,a6
    e862:	       lea 40(sp),sp
    e866:	       rts

0000e868 <builtIn_cacheSound>:

builtIn(cacheSound)
{
    e868:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e86a:	       movea.l 12(sp),a0
    e86e:	       move.l 24(a0),d0
    e872:	       move.l d0,-(sp)
    e874:	       pea 5 <_start+0x5>
    e878:	       move.l sp,d0
    e87a:	       addq.l #8,d0
    e87c:	       move.l d0,-(sp)
    e87e:	       jsr 10750 <getValueType>
    e884:	       lea 12(sp),sp
    e888:	       tst.w d0
    e88a:	   /-- bne.s e890 <builtIn_cacheSound+0x28>
    e88c:	   |   moveq #1,d0
    e88e:	/--|-- bra.s e8b8 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
    e890:	|  \-> moveq #24,d0
    e892:	|      add.l 12(sp),d0
    e896:	|      move.l d0,-(sp)
    e898:	|      jsr 110d4 <trimStack>
    e89e:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
    e8a0:	|      move.l (sp),d0
    e8a2:	|      move.l d0,-(sp)
    e8a4:	|      jsr 9230 <cacheSound>
    e8aa:	|      addq.l #4,sp
    e8ac:	|      moveq #-1,d1
    e8ae:	|      cmp.l d0,d1
    e8b0:	|  /-- bne.s e8b6 <builtIn_cacheSound+0x4e>
    e8b2:	|  |   moveq #1,d0
    e8b4:	+--|-- bra.s e8b8 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
    e8b6:	|  \-> moveq #2,d0
}
    e8b8:	\----> addq.l #4,sp
    e8ba:	       rts

0000e8bc <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
    e8bc:	pea 1626d <main_sludge.c.2f5c5368+0x983>
    e8c2:	jsr 127a4 <KPrintF>
    e8c8:	addq.l #4,sp
	return BR_CONTINUE;
    e8ca:	moveq #2,d0
}
    e8cc:	rts

0000e8ce <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
    e8ce:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e8d2:	          movea.l 20(sp),a0
    e8d6:	          move.l 24(a0),d0
    e8da:	          move.l d0,-(sp)
    e8dc:	          pea 1 <_start+0x1>
    e8e0:	          moveq #12,d0
    e8e2:	          add.l sp,d0
    e8e4:	          move.l d0,-(sp)
    e8e6:	          jsr 10750 <getValueType>
    e8ec:	          lea 12(sp),sp
    e8f0:	          tst.w d0
    e8f2:	      /-- bne.s e8fa <builtIn_setCharacterSpinSpeed+0x2c>
    e8f4:	      |   moveq #1,d0
    e8f6:	/-----|-- bra.w e994 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    e8fa:	|     \-> moveq #24,d0
    e8fc:	|         add.l 20(sp),d0
    e900:	|         move.l d0,-(sp)
    e902:	|         jsr 110d4 <trimStack>
    e908:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e90a:	|         movea.l 20(sp),a0
    e90e:	|         move.l 24(a0),d0
    e912:	|         move.l d0,-(sp)
    e914:	|         pea 7 <_start+0x7>
    e918:	|         lea 8(sp),a0
    e91c:	|         move.l a0,-(sp)
    e91e:	|         jsr 10750 <getValueType>
    e924:	|         lea 12(sp),sp
    e928:	|         tst.w d0
    e92a:	|     /-- bne.s e930 <builtIn_setCharacterSpinSpeed+0x62>
    e92c:	|     |   moveq #1,d0
    e92e:	+-----|-- bra.s e994 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
    e930:	|     \-> moveq #24,d0
    e932:	|         add.l 20(sp),d0
    e936:	|         move.l d0,-(sp)
    e938:	|         jsr 110d4 <trimStack>
    e93e:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    e940:	|         move.l (sp),d0
    e942:	|         move.l d0,-(sp)
    e944:	|         jsr 6994 <findPerson>
    e94a:	|         addq.l #4,sp
    e94c:	|         move.l d0,8(sp)

	if (thisPerson) {
    e950:	|  /----- beq.s e97a <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
    e952:	|  |      move.l 4(sp),d0
    e956:	|  |      movea.l 8(sp),a0
    e95a:	|  |      move.l d0,110(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    e95e:	|  |      moveq #28,d0
    e960:	|  |      add.l 20(sp),d0
    e964:	|  |      pea 1 <_start+0x1>
    e968:	|  |      pea 1 <_start+0x1>
    e96c:	|  |      move.l d0,-(sp)
    e96e:	|  |      jsr 11042 <setVariable>
    e974:	|  |      lea 12(sp),sp
    e978:	|  |  /-- bra.s e992 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    e97a:	|  \--|-> moveq #28,d0
    e97c:	|     |   add.l 20(sp),d0
    e980:	|     |   clr.l -(sp)
    e982:	|     |   pea 1 <_start+0x1>
    e986:	|     |   move.l d0,-(sp)
    e988:	|     |   jsr 11042 <setVariable>
    e98e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    e992:	|     \-> moveq #2,d0
}
    e994:	\-------> lea 12(sp),sp
    e998:	          rts

0000e99a <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
    e99a:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e99e:	          movea.l 20(sp),a0
    e9a2:	          move.l 24(a0),d0
    e9a6:	          move.l d0,-(sp)
    e9a8:	          pea 1 <_start+0x1>
    e9ac:	          moveq #12,d0
    e9ae:	          add.l sp,d0
    e9b0:	          move.l d0,-(sp)
    e9b2:	          jsr 10750 <getValueType>
    e9b8:	          lea 12(sp),sp
    e9bc:	          tst.w d0
    e9be:	      /-- bne.s e9c6 <builtIn_setCharacterAngleOffset+0x2c>
    e9c0:	      |   moveq #1,d0
    e9c2:	/-----|-- bra.w ea60 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    e9c6:	|     \-> moveq #24,d0
    e9c8:	|         add.l 20(sp),d0
    e9cc:	|         move.l d0,-(sp)
    e9ce:	|         jsr 110d4 <trimStack>
    e9d4:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e9d6:	|         movea.l 20(sp),a0
    e9da:	|         move.l 24(a0),d0
    e9de:	|         move.l d0,-(sp)
    e9e0:	|         pea 7 <_start+0x7>
    e9e4:	|         lea 8(sp),a0
    e9e8:	|         move.l a0,-(sp)
    e9ea:	|         jsr 10750 <getValueType>
    e9f0:	|         lea 12(sp),sp
    e9f4:	|         tst.w d0
    e9f6:	|     /-- bne.s e9fc <builtIn_setCharacterAngleOffset+0x62>
    e9f8:	|     |   moveq #1,d0
    e9fa:	+-----|-- bra.s ea60 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
    e9fc:	|     \-> moveq #24,d0
    e9fe:	|         add.l 20(sp),d0
    ea02:	|         move.l d0,-(sp)
    ea04:	|         jsr 110d4 <trimStack>
    ea0a:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
    ea0c:	|         move.l (sp),d0
    ea0e:	|         move.l d0,-(sp)
    ea10:	|         jsr 6994 <findPerson>
    ea16:	|         addq.l #4,sp
    ea18:	|         move.l d0,8(sp)

	if (thisPerson) {
    ea1c:	|  /----- beq.s ea46 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
    ea1e:	|  |      move.l 4(sp),d0
    ea22:	|  |      movea.l 8(sp),a0
    ea26:	|  |      move.l d0,88(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
    ea2a:	|  |      moveq #28,d0
    ea2c:	|  |      add.l 20(sp),d0
    ea30:	|  |      pea 1 <_start+0x1>
    ea34:	|  |      pea 1 <_start+0x1>
    ea38:	|  |      move.l d0,-(sp)
    ea3a:	|  |      jsr 11042 <setVariable>
    ea40:	|  |      lea 12(sp),sp
    ea44:	|  |  /-- bra.s ea5e <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    ea46:	|  \--|-> moveq #28,d0
    ea48:	|     |   add.l 20(sp),d0
    ea4c:	|     |   clr.l -(sp)
    ea4e:	|     |   pea 1 <_start+0x1>
    ea52:	|     |   move.l d0,-(sp)
    ea54:	|     |   jsr 11042 <setVariable>
    ea5a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    ea5e:	|     \-> moveq #2,d0
}
    ea60:	\-------> lea 12(sp),sp
    ea64:	          rts

0000ea66 <builtIn_transitionMode>:


builtIn(transitionMode)
{
    ea66:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ea68:	       movea.l 12(sp),a0
    ea6c:	       move.l 24(a0),d0
    ea70:	       move.l d0,-(sp)
    ea72:	       pea 1 <_start+0x1>
    ea76:	       move.l sp,d0
    ea78:	       addq.l #8,d0
    ea7a:	       move.l d0,-(sp)
    ea7c:	       jsr 10750 <getValueType>
    ea82:	       lea 12(sp),sp
    ea86:	       tst.w d0
    ea88:	   /-- bne.s ea8e <builtIn_transitionMode+0x28>
    ea8a:	   |   moveq #1,d0
    ea8c:	/--|-- bra.s eac4 <builtIn_transitionMode+0x5e>
	fadeMode = n;
    ea8e:	|  \-> move.l (sp),d0
    ea90:	|      move.l d0,d0
    ea92:	|      move.b d0,18686 <fadeMode>
	trimStack (&fun -> stack);
    ea98:	|      moveq #24,d0
    ea9a:	|      add.l 12(sp),d0
    ea9e:	|      move.l d0,-(sp)
    eaa0:	|      jsr 110d4 <trimStack>
    eaa6:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    eaa8:	|      moveq #28,d0
    eaaa:	|      add.l 12(sp),d0
    eaae:	|      pea 1 <_start+0x1>
    eab2:	|      pea 1 <_start+0x1>
    eab6:	|      move.l d0,-(sp)
    eab8:	|      jsr 11042 <setVariable>
    eabe:	|      lea 12(sp),sp
	return BR_CONTINUE;
    eac2:	|      moveq #2,d0
}
    eac4:	\----> addq.l #4,sp
    eac6:	       rts

0000eac8 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    eac8:	moveq #24,d0
    eaca:	add.l 8(sp),d0
    eace:	move.l d0,-(sp)
    ead0:	jsr 110d4 <trimStack>
    ead6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
    ead8:	moveq #28,d0
    eada:	add.l 8(sp),d0
    eade:	pea 1 <_start+0x1>
    eae2:	pea 1 <_start+0x1>
    eae6:	move.l d0,-(sp)
    eae8:	jsr 11042 <setVariable>
    eaee:	lea 12(sp),sp
	return BR_CONTINUE;
    eaf2:	moveq #2,d0
}
    eaf4:	rts

0000eaf6 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
    eaf6:	pea 16297 <main_sludge.c.2f5c5368+0x9ad>
    eafc:	jsr 127a4 <KPrintF>
    eb02:	addq.l #4,sp
	return BR_CONTINUE;
    eb04:	moveq #2,d0
}
    eb06:	rts

0000eb08 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
    eb08:	       lea -16(sp),sp
    eb0c:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
    eb0e:	       movea.l 28(sp),a0
    eb12:	       move.l 24(a0),d0
    eb16:	       move.l d0,-(sp)
    eb18:	       jsr 10d26 <getTextFromAnyVar>
    eb1e:	       addq.l #4,sp
    eb20:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
    eb24:	   /-- bne.s eb2c <builtIn_saveCustomData+0x24>
    eb26:	   |   moveq #1,d0
    eb28:	/--|-- bra.w ebde <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
    eb2c:	|  \-> move.l 16(sp),-(sp)
    eb30:	|      jsr 2fe <encodeFilename>
    eb36:	|      addq.l #4,sp
    eb38:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
    eb3c:	|      move.l 16(sp),8(sp)
    eb42:	|      move.l 19c4c <SysBase>,d0
    eb48:	|      movea.l d0,a6
    eb4a:	|      movea.l 8(sp),a1
    eb4e:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
    eb52:	|      move.l 12(sp),-(sp)
    eb56:	|      jsr a38e <failSecurityCheck>
    eb5c:	|      addq.l #4,sp
    eb5e:	|      tst.w d0
    eb60:	|  /-- beq.s eb66 <builtIn_saveCustomData+0x5e>
    eb62:	|  |   moveq #1,d0
    eb64:	+--|-- bra.s ebde <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    eb66:	|  \-> moveq #24,d0
    eb68:	|      add.l 28(sp),d0
    eb6c:	|      move.l d0,-(sp)
    eb6e:	|      jsr 110d4 <trimStack>
    eb74:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
    eb76:	|      movea.l 28(sp),a0
    eb7a:	|      movea.l 24(a0),a0
    eb7e:	|      move.l (a0),d0
    eb80:	|      moveq #6,d1
    eb82:	|      cmp.l d0,d1
    eb84:	|  /-- beq.s eb98 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
    eb86:	|  |   pea 162c4 <main_sludge.c.2f5c5368+0x9da>
    eb8c:	|  |   jsr 127a4 <KPrintF>
    eb92:	|  |   addq.l #4,sp
		return BR_ERROR;
    eb94:	|  |   moveq #1,d0
    eb96:	+--|-- bra.s ebde <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
    eb98:	|  \-> movea.l 28(sp),a0
    eb9c:	|      move.l 24(a0),d0
    eba0:	|      move.l d0,-(sp)
    eba2:	|      move.l 16(sp),-(sp)
    eba6:	|      jsr 9fde <stackToFile>
    ebac:	|      addq.l #8,sp
    ebae:	|      tst.w d0
    ebb0:	|  /-- bne.s ebb6 <builtIn_saveCustomData+0xae>
    ebb2:	|  |   moveq #1,d0
    ebb4:	+--|-- bra.s ebde <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
    ebb6:	|  \-> moveq #24,d0
    ebb8:	|      add.l 28(sp),d0
    ebbc:	|      move.l d0,-(sp)
    ebbe:	|      jsr 110d4 <trimStack>
    ebc4:	|      addq.l #4,sp
	FreeVec(fileName);
    ebc6:	|      move.l 12(sp),4(sp)
    ebcc:	|      move.l 19c4c <SysBase>,d0
    ebd2:	|      movea.l d0,a6
    ebd4:	|      movea.l 4(sp),a1
    ebd8:	|      jsr -690(a6)
	return BR_CONTINUE;
    ebdc:	|      moveq #2,d0
}
    ebde:	\----> movea.l (sp)+,a6
    ebe0:	       lea 16(sp),sp
    ebe4:	       rts

0000ebe6 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
    ebe6:	       lea -28(sp),sp
    ebea:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    ebec:	       movea.l 40(sp),a0
    ebf0:	       move.l 24(a0),d0
    ebf4:	       move.l d0,-(sp)
    ebf6:	       jsr 10d26 <getTextFromAnyVar>
    ebfc:	       addq.l #4,sp
    ebfe:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
    ec02:	   /-- bne.s ec0a <builtIn_loadCustomData+0x24>
    ec04:	   |   moveq #1,d0
    ec06:	/--|-- bra.w ed06 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
    ec0a:	|  \-> move.l 28(sp),-(sp)
    ec0e:	|      jsr 2fe <encodeFilename>
    ec14:	|      addq.l #4,sp
    ec16:	|      move.l d0,24(sp)
	FreeVec(newTextA);
    ec1a:	|      move.l 28(sp),20(sp)
    ec20:	|      move.l 19c4c <SysBase>,d0
    ec26:	|      movea.l d0,a6
    ec28:	|      movea.l 20(sp),a1
    ec2c:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
    ec30:	|      move.l 24(sp),-(sp)
    ec34:	|      jsr a38e <failSecurityCheck>
    ec3a:	|      addq.l #4,sp
    ec3c:	|      tst.w d0
    ec3e:	|  /-- beq.s ec46 <builtIn_loadCustomData+0x60>
    ec40:	|  |   moveq #1,d0
    ec42:	+--|-- bra.w ed06 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
    ec46:	|  \-> moveq #24,d0
    ec48:	|      add.l 40(sp),d0
    ec4c:	|      move.l d0,-(sp)
    ec4e:	|      jsr 110d4 <trimStack>
    ec54:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
    ec56:	|      moveq #28,d0
    ec58:	|      add.l 40(sp),d0
    ec5c:	|      move.l d0,-(sp)
    ec5e:	|      jsr 1099e <unlinkVar>
    ec64:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
    ec66:	|      movea.l 40(sp),a0
    ec6a:	|      moveq #6,d0
    ec6c:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    ec70:	|      moveq #12,d0
    ec72:	|      move.l d0,16(sp)
    ec76:	|      clr.l 12(sp)
    ec7a:	|      move.l 19c4c <SysBase>,d0
    ec80:	|      movea.l d0,a6
    ec82:	|      move.l 16(sp),d0
    ec86:	|      move.l 12(sp),d1
    ec8a:	|      jsr -684(a6)
    ec8e:	|      move.l d0,8(sp)
    ec92:	|      move.l 8(sp),d0
    ec96:	|      movea.l 40(sp),a0
    ec9a:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
    ec9e:	|      movea.l 40(sp),a0
    eca2:	|      move.l 32(a0),d0
    eca6:	|  /-- bne.s ecac <builtIn_loadCustomData+0xc6>
    eca8:	|  |   moveq #1,d0
    ecaa:	+--|-- bra.s ed06 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
    ecac:	|  \-> movea.l 40(sp),a0
    ecb0:	|      movea.l 32(a0),a0
    ecb4:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
    ecb6:	|      movea.l 40(sp),a0
    ecba:	|      movea.l 32(a0),a0
    ecbe:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
    ecc2:	|      movea.l 40(sp),a0
    ecc6:	|      movea.l 32(a0),a0
    ecca:	|      moveq #1,d0
    eccc:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
    ecd0:	|      movea.l 40(sp),a0
    ecd4:	|      move.l 32(a0),d0
    ecd8:	|      move.l d0,-(sp)
    ecda:	|      move.l 28(sp),-(sp)
    ecde:	|      jsr 9a18 <fileToStack>
    ece4:	|      addq.l #8,sp
    ece6:	|      tst.w d0
    ece8:	|  /-- bne.s ecee <builtIn_loadCustomData+0x108>
    ecea:	|  |   moveq #1,d0
    ecec:	+--|-- bra.s ed06 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
    ecee:	|  \-> move.l 24(sp),4(sp)
    ecf4:	|      move.l 19c4c <SysBase>,d0
    ecfa:	|      movea.l d0,a6
    ecfc:	|      movea.l 4(sp),a1
    ed00:	|      jsr -690(a6)
	return BR_CONTINUE;
    ed04:	|      moveq #2,d0
}
    ed06:	\----> movea.l (sp)+,a6
    ed08:	       lea 28(sp),sp
    ed0c:	       rts

0000ed0e <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
    ed0e:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed10:	       movea.l 12(sp),a0
    ed14:	       move.l 24(a0),d0
    ed18:	       move.l d0,-(sp)
    ed1a:	       pea 1 <_start+0x1>
    ed1e:	       move.l sp,d0
    ed20:	       addq.l #8,d0
    ed22:	       move.l d0,-(sp)
    ed24:	       jsr 10750 <getValueType>
    ed2a:	       lea 12(sp),sp
    ed2e:	       tst.w d0
    ed30:	   /-- bne.s ed36 <builtIn_setCustomEncoding+0x28>
    ed32:	   |   moveq #1,d0
    ed34:	/--|-- bra.s ed6c <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
    ed36:	|  \-> move.l (sp),d0
    ed38:	|      move.l d0,d0
    ed3a:	|      move.w d0,19d00 <saveEncoding>
	trimStack (&fun -> stack);
    ed40:	|      moveq #24,d0
    ed42:	|      add.l 12(sp),d0
    ed46:	|      move.l d0,-(sp)
    ed48:	|      jsr 110d4 <trimStack>
    ed4e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
    ed50:	|      moveq #28,d0
    ed52:	|      add.l 12(sp),d0
    ed56:	|      pea 1 <_start+0x1>
    ed5a:	|      pea 1 <_start+0x1>
    ed5e:	|      move.l d0,-(sp)
    ed60:	|      jsr 11042 <setVariable>
    ed66:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed6a:	|      moveq #2,d0
}
    ed6c:	\----> addq.l #4,sp
    ed6e:	       rts

0000ed70 <builtIn_freeSound>:

builtIn(freeSound)
{
    ed70:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed72:	       movea.l 12(sp),a0
    ed76:	       move.l 24(a0),d0
    ed7a:	       move.l d0,-(sp)
    ed7c:	       pea 5 <_start+0x5>
    ed80:	       move.l sp,d0
    ed82:	       addq.l #8,d0
    ed84:	       move.l d0,-(sp)
    ed86:	       jsr 10750 <getValueType>
    ed8c:	       lea 12(sp),sp
    ed90:	       tst.w d0
    ed92:	   /-- bne.s ed98 <builtIn_freeSound+0x28>
    ed94:	   |   moveq #1,d0
    ed96:	/--|-- bra.s edb6 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
    ed98:	|  \-> moveq #24,d0
    ed9a:	|      add.l 12(sp),d0
    ed9e:	|      move.l d0,-(sp)
    eda0:	|      jsr 110d4 <trimStack>
    eda6:	|      addq.l #4,sp
	huntKillFreeSound (v);
    eda8:	|      move.l (sp),d0
    edaa:	|      move.l d0,-(sp)
    edac:	|      jsr 9234 <huntKillFreeSound>
    edb2:	|      addq.l #4,sp
	return BR_CONTINUE;
    edb4:	|      moveq #2,d0
}
    edb6:	\----> addq.l #4,sp
    edb8:	       rts

0000edba <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
    edba:	       lea -12(sp),sp
    edbe:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edc0:	       movea.l 24(sp),a0
    edc4:	       move.l 24(a0),d0
    edc8:	       move.l d0,-(sp)
    edca:	       pea 1 <_start+0x1>
    edce:	       moveq #16,d0
    edd0:	       add.l sp,d0
    edd2:	       move.l d0,-(sp)
    edd4:	       jsr 10750 <getValueType>
    edda:	       lea 12(sp),sp
    edde:	       tst.w d0
    ede0:	   /-- bne.s ede8 <builtIn_parallaxAdd+0x2e>
    ede2:	   |   moveq #1,d0
    ede4:	/--|-- bra.w eebc <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    ede8:	|  \-> moveq #24,d0
    edea:	|      add.l 24(sp),d0
    edee:	|      move.l d0,-(sp)
    edf0:	|      jsr 110d4 <trimStack>
    edf6:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edf8:	|      movea.l 24(sp),a0
    edfc:	|      move.l 24(a0),d0
    ee00:	|      move.l d0,-(sp)
    ee02:	|      pea 1 <_start+0x1>
    ee06:	|      moveq #20,d0
    ee08:	|      add.l sp,d0
    ee0a:	|      move.l d0,-(sp)
    ee0c:	|      jsr 10750 <getValueType>
    ee12:	|      lea 12(sp),sp
    ee16:	|      tst.w d0
    ee18:	|  /-- bne.s ee20 <builtIn_parallaxAdd+0x66>
    ee1a:	|  |   moveq #1,d0
    ee1c:	+--|-- bra.w eebc <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    ee20:	|  \-> moveq #24,d0
    ee22:	|      add.l 24(sp),d0
    ee26:	|      move.l d0,-(sp)
    ee28:	|      jsr 110d4 <trimStack>
    ee2e:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee30:	|      movea.l 24(sp),a0
    ee34:	|      move.l 24(a0),d0
    ee38:	|      move.l d0,-(sp)
    ee3a:	|      pea 5 <_start+0x5>
    ee3e:	|      lea 12(sp),a0
    ee42:	|      move.l a0,-(sp)
    ee44:	|      jsr 10750 <getValueType>
    ee4a:	|      lea 12(sp),sp
    ee4e:	|      tst.w d0
    ee50:	|  /-- bne.s ee56 <builtIn_parallaxAdd+0x9c>
    ee52:	|  |   moveq #1,d0
    ee54:	+--|-- bra.s eebc <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
    ee56:	|  \-> moveq #24,d0
    ee58:	|      add.l 24(sp),d0
    ee5c:	|      move.l d0,-(sp)
    ee5e:	|      jsr 110d4 <trimStack>
    ee64:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
    ee66:	|      move.l 8(sp),d0
    ee6a:	|      move.l d0,d0
    ee6c:	|      moveq #0,d2
    ee6e:	|      move.w d0,d2
    ee70:	|      move.l 12(sp),d0
    ee74:	|      move.l d0,d0
    ee76:	|      moveq #0,d1
    ee78:	|      move.w d0,d1
    ee7a:	|      move.l 4(sp),d0
    ee7e:	|      move.l d0,d0
    ee80:	|      move.w d0,d0
    ee82:	|      andi.l #65535,d0
    ee88:	|      move.l d2,-(sp)
    ee8a:	|      move.l d1,-(sp)
    ee8c:	|      move.l d0,-(sp)
    ee8e:	|      jsr 9410 <loadParallax>
    ee94:	|      lea 12(sp),sp
    ee98:	|      tst.w d0
    ee9a:	|  /-- bne.s eea0 <builtIn_parallaxAdd+0xe6>
    ee9c:	|  |   moveq #1,d0
    ee9e:	+--|-- bra.s eebc <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
    eea0:	|  \-> moveq #28,d0
    eea2:	|      add.l 24(sp),d0
    eea6:	|      pea 1 <_start+0x1>
    eeaa:	|      pea 1 <_start+0x1>
    eeae:	|      move.l d0,-(sp)
    eeb0:	|      jsr 11042 <setVariable>
    eeb6:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
    eeba:	|      moveq #2,d0
}
    eebc:	\----> move.l (sp)+,d2
    eebe:	       lea 12(sp),sp
    eec2:	       rts

0000eec4 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
    eec4:	jsr 9378 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
    eeca:	moveq #28,d0
    eecc:	add.l 8(sp),d0
    eed0:	pea 1 <_start+0x1>
    eed4:	pea 1 <_start+0x1>
    eed8:	move.l d0,-(sp)
    eeda:	jsr 11042 <setVariable>
    eee0:	lea 12(sp),sp
	return BR_CONTINUE;
    eee4:	moveq #2,d0
}
    eee6:	rts

0000eee8 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
    eee8:	pea 162e2 <main_sludge.c.2f5c5368+0x9f8>
    eeee:	jsr 127a4 <KPrintF>
    eef4:	addq.l #4,sp

	return BR_CONTINUE;
    eef6:	moveq #2,d0
}
    eef8:	rts

0000eefa <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
    eefa:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    eefc:	             movea.l 16(sp),a0
    ef00:	             movea.l 24(a0),a0
    ef04:	             move.l (a0),d0
    ef06:	             moveq #1,d1
    ef08:	             cmp.l d0,d1
    ef0a:	      /----- beq.s ef52 <builtIn_makeFastArray+0x58>
    ef0c:	      |      moveq #6,d1
    ef0e:	      |      cmp.l d0,d1
    ef10:	/-----|----- bne.s ef90 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
    ef12:	|     |      movea.l 16(sp),a0
    ef16:	|     |      movea.l 24(a0),a0
    ef1a:	|     |      move.l 4(a0),d1
    ef1e:	|     |      moveq #28,d0
    ef20:	|     |      add.l 16(sp),d0
    ef24:	|     |      move.l d1,-(sp)
    ef26:	|     |      move.l d0,-(sp)
    ef28:	|     |      jsr 10802 <makeFastArrayFromStack>
    ef2e:	|     |      addq.l #8,sp
    ef30:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
    ef34:	|     |      moveq #24,d0
    ef36:	|     |      add.l 16(sp),d0
    ef3a:	|     |      move.l d0,-(sp)
    ef3c:	|     |      jsr 110d4 <trimStack>
    ef42:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
    ef44:	|     |      tst.w 6(sp)
    ef48:	|     |  /-- beq.s ef4e <builtIn_makeFastArray+0x54>
    ef4a:	|     |  |   moveq #2,d0
    ef4c:	|  /--|--|-- bra.s efa2 <builtIn_makeFastArray+0xa8>
    ef4e:	|  |  |  \-> moveq #1,d0
    ef50:	|  +--|----- bra.s efa2 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
    ef52:	|  |  \----> movea.l 16(sp),a0
    ef56:	|  |         movea.l 24(a0),a0
    ef5a:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
    ef60:	|  |         moveq #24,d0
    ef62:	|  |         add.l 16(sp),d0
    ef66:	|  |         move.l d0,-(sp)
    ef68:	|  |         jsr 110d4 <trimStack>
    ef6e:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
    ef70:	|  |         moveq #28,d0
    ef72:	|  |         add.l 16(sp),d0
    ef76:	|  |         move.l 2(sp),-(sp)
    ef7a:	|  |         move.l d0,-(sp)
    ef7c:	|  |         jsr 1086c <makeFastArraySize>
    ef82:	|  |         addq.l #8,sp
    ef84:	|  |         tst.w d0
    ef86:	|  |     /-- beq.s ef8c <builtIn_makeFastArray+0x92>
    ef88:	|  |     |   moveq #2,d0
    ef8a:	|  +-----|-- bra.s efa2 <builtIn_makeFastArray+0xa8>
    ef8c:	|  |     \-> moveq #1,d0
    ef8e:	|  +-------- bra.s efa2 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
    ef90:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
    ef92:	   |         pea 1630b <main_sludge.c.2f5c5368+0xa21>
    ef98:	   |         jsr 127a4 <KPrintF>
    ef9e:	   |         addq.l #4,sp
	return BR_ERROR;
    efa0:	   |         moveq #1,d0
}
    efa2:	   \-------> addq.l #8,sp
    efa4:	             rts

0000efa6 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
    efa6:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    efa8:	          movea.l 16(sp),a0
    efac:	          move.l 24(a0),d0
    efb0:	          move.l d0,-(sp)
    efb2:	          pea 7 <_start+0x7>
    efb6:	          move.l sp,d0
    efb8:	          addq.l #8,d0
    efba:	          move.l d0,-(sp)
    efbc:	          jsr 10750 <getValueType>
    efc2:	          lea 12(sp),sp
    efc6:	          tst.w d0
    efc8:	      /-- bne.s efce <builtIn_getCharacterScale+0x28>
    efca:	      |   moveq #1,d0
    efcc:	/-----|-- bra.s f048 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
    efce:	|     \-> moveq #24,d0
    efd0:	|         add.l 16(sp),d0
    efd4:	|         move.l d0,-(sp)
    efd6:	|         jsr 110d4 <trimStack>
    efdc:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
    efde:	|         move.l (sp),d0
    efe0:	|         move.l d0,-(sp)
    efe2:	|         jsr 6994 <findPerson>
    efe8:	|         addq.l #4,sp
    efea:	|         move.l d0,4(sp)
	if (pers) {
    efee:	|  /----- beq.s f02e <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
    eff0:	|  |      movea.l 4(sp),a0
    eff4:	|  |      move.l 20(a0),d0
    eff8:	|  |      move.l #1120403456,-(sp)
    effe:	|  |      move.l d0,-(sp)
    f000:	|  |      jsr 12cae <__mulsf3>
    f006:	|  |      addq.l #8,sp
    f008:	|  |      move.l d0,-(sp)
    f00a:	|  |      jsr 12b94 <__fixsfsi>
    f010:	|  |      addq.l #4,sp
    f012:	|  |      move.l d0,d1
    f014:	|  |      moveq #28,d0
    f016:	|  |      add.l 16(sp),d0
    f01a:	|  |      move.l d1,-(sp)
    f01c:	|  |      pea 1 <_start+0x1>
    f020:	|  |      move.l d0,-(sp)
    f022:	|  |      jsr 11042 <setVariable>
    f028:	|  |      lea 12(sp),sp
    f02c:	|  |  /-- bra.s f046 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
    f02e:	|  \--|-> moveq #28,d0
    f030:	|     |   add.l 16(sp),d0
    f034:	|     |   clr.l -(sp)
    f036:	|     |   pea 1 <_start+0x1>
    f03a:	|     |   move.l d0,-(sp)
    f03c:	|     |   jsr 11042 <setVariable>
    f042:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
    f046:	|     \-> moveq #2,d0
}
    f048:	\-------> addq.l #8,sp
    f04a:	          rts

0000f04c <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
    f04c:	move.l 19d24 <gameSettings>,d0
    f052:	move.l d0,d1
    f054:	moveq #28,d0
    f056:	add.l 8(sp),d0
    f05a:	move.l d1,-(sp)
    f05c:	pea 1 <_start+0x1>
    f060:	move.l d0,-(sp)
    f062:	jsr 11042 <setVariable>
    f068:	lea 12(sp),sp
	return BR_CONTINUE;
    f06c:	moveq #2,d0
}
    f06e:	rts

0000f070 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    f070:	moveq #24,d0
    f072:	add.l 8(sp),d0
    f076:	move.l d0,-(sp)
    f078:	jsr 110d4 <trimStack>
    f07e:	addq.l #4,sp
	trimStack (&fun -> stack);
    f080:	moveq #24,d0
    f082:	add.l 8(sp),d0
    f086:	move.l d0,-(sp)
    f088:	jsr 110d4 <trimStack>
    f08e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
    f090:	moveq #28,d0
    f092:	add.l 8(sp),d0
    f096:	clr.l -(sp)
    f098:	pea 1 <_start+0x1>
    f09c:	move.l d0,-(sp)
    f09e:	jsr 11042 <setVariable>
    f0a4:	lea 12(sp),sp

	return BR_CONTINUE;
    f0a8:	moveq #2,d0

}
    f0aa:	rts

0000f0ac <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
    f0ac:	move.l 18124 <lastFramesPerSecond>,d1
    f0b2:	moveq #28,d0
    f0b4:	add.l 8(sp),d0
    f0b8:	move.l d1,-(sp)
    f0ba:	pea 1 <_start+0x1>
    f0be:	move.l d0,-(sp)
    f0c0:	jsr 11042 <setVariable>
    f0c6:	lea 12(sp),sp
	return BR_CONTINUE;
    f0ca:	moveq #2,d0
}
    f0cc:	rts

0000f0ce <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
    f0ce:	moveq #2,d0
}
    f0d0:	rts

0000f0d2 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
    f0d2:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f0d6:	          movea.l 60(sp),a0
    f0da:	          move.l 24(a0),d0
    f0de:	          move.l d0,-(sp)
    f0e0:	          pea 1 <_start+0x1>
    f0e4:	          pea 19b3c <thumbHeight>
    f0ea:	          jsr 10750 <getValueType>
    f0f0:	          lea 12(sp),sp
    f0f4:	          tst.w d0
    f0f6:	      /-- bne.s f0fe <builtIn_setThumbnailSize+0x2c>
    f0f8:	      |   moveq #1,d0
    f0fa:	/-----|-- bra.w f1ba <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    f0fe:	|     \-> moveq #24,d0
    f100:	|         add.l 60(sp),d0
    f104:	|         move.l d0,-(sp)
    f106:	|         jsr 110d4 <trimStack>
    f10c:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f10e:	|         movea.l 60(sp),a0
    f112:	|         move.l 24(a0),d0
    f116:	|         move.l d0,-(sp)
    f118:	|         pea 1 <_start+0x1>
    f11c:	|         pea 19b38 <thumbWidth>
    f122:	|         jsr 10750 <getValueType>
    f128:	|         lea 12(sp),sp
    f12c:	|         tst.w d0
    f12e:	|     /-- bne.s f136 <builtIn_setThumbnailSize+0x64>
    f130:	|     |   moveq #1,d0
    f132:	+-----|-- bra.w f1ba <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
    f136:	|     \-> moveq #24,d0
    f138:	|         add.l 60(sp),d0
    f13c:	|         move.l d0,-(sp)
    f13e:	|         jsr 110d4 <trimStack>
    f144:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
    f146:	|         move.l 19b38 <thumbWidth>,d0
    f14c:	|     /-- bmi.s f17a <builtIn_setThumbnailSize+0xa8>
    f14e:	|     |   move.l 19b3c <thumbHeight>,d0
    f154:	|     +-- bmi.s f17a <builtIn_setThumbnailSize+0xa8>
    f156:	|     |   move.l 19b38 <thumbWidth>,d0
    f15c:	|     |   move.l d0,d1
    f15e:	|     |   move.l 19b4c <winWidth>,d0
    f164:	|     |   cmp.l d1,d0
    f166:	|     +-- bcs.s f17a <builtIn_setThumbnailSize+0xa8>
    f168:	|     |   move.l 19b3c <thumbHeight>,d0
    f16e:	|     |   move.l d0,d1
    f170:	|     |   move.l 19b50 <winHeight>,d0
    f176:	|     |   cmp.l d1,d0
    f178:	|  /--|-- bcc.s f1b8 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
    f17a:	|  |  \-> move.l 19b3c <thumbHeight>,d1
    f180:	|  |      move.l 19b38 <thumbWidth>,d0
    f186:	|  |      move.l d1,-(sp)
    f188:	|  |      move.l d0,-(sp)
    f18a:	|  |      pea 16332 <main_sludge.c.2f5c5368+0xa48>
    f190:	|  |      lea 14(sp),a0
    f194:	|  |      move.l a0,-(sp)
    f196:	|  |      jsr ff5a <sprintf>
    f19c:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
    f1a0:	|  |      lea 2(sp),a0
    f1a4:	|  |      move.l a0,-(sp)
    f1a6:	|  |      pea 1633a <main_sludge.c.2f5c5368+0xa50>
    f1ac:	|  |      jsr 127a4 <KPrintF>
    f1b2:	|  |      addq.l #8,sp
		return BR_ERROR;
    f1b4:	|  |      moveq #1,d0
    f1b6:	+--|----- bra.s f1ba <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
    f1b8:	|  \----> moveq #2,d0
}
    f1ba:	\-------> lea 52(sp),sp
    f1be:	          rts

0000f1c0 <builtIn_hasFlag>:

builtIn(hasFlag)
{
    f1c0:	       lea -12(sp),sp
    f1c4:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f1c6:	       movea.l 24(sp),a0
    f1ca:	       move.l 24(a0),d0
    f1ce:	       move.l d0,-(sp)
    f1d0:	       pea 1 <_start+0x1>
    f1d4:	       lea 12(sp),a0
    f1d8:	       move.l a0,-(sp)
    f1da:	       jsr 10750 <getValueType>
    f1e0:	       lea 12(sp),sp
    f1e4:	       tst.w d0
    f1e6:	   /-- bne.s f1ee <builtIn_hasFlag+0x2e>
    f1e8:	   |   moveq #1,d0
    f1ea:	/--|-- bra.w f27e <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    f1ee:	|  \-> moveq #24,d0
    f1f0:	|      add.l 24(sp),d0
    f1f4:	|      move.l d0,-(sp)
    f1f6:	|      jsr 110d4 <trimStack>
    f1fc:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    f1fe:	|      movea.l 24(sp),a0
    f202:	|      move.l 24(a0),d0
    f206:	|      move.l d0,-(sp)
    f208:	|      pea 7 <_start+0x7>
    f20c:	|      moveq #16,d0
    f20e:	|      add.l sp,d0
    f210:	|      move.l d0,-(sp)
    f212:	|      jsr 10750 <getValueType>
    f218:	|      lea 12(sp),sp
    f21c:	|      tst.w d0
    f21e:	|  /-- bne.s f224 <builtIn_hasFlag+0x64>
    f220:	|  |   moveq #1,d0
    f222:	+--|-- bra.s f27e <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
    f224:	|  \-> moveq #24,d0
    f226:	|      add.l 24(sp),d0
    f22a:	|      move.l d0,-(sp)
    f22c:	|      jsr 110d4 <trimStack>
    f232:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
    f234:	|      move.l 8(sp),d0
    f238:	|      move.l d0,-(sp)
    f23a:	|      jsr 95a2 <findObjectType>
    f240:	|      addq.l #4,sp
    f242:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
    f246:	|  /-- bne.s f24c <builtIn_hasFlag+0x8c>
    f248:	|  |   moveq #1,d0
    f24a:	+--|-- bra.s f27e <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
    f24c:	|  \-> movea.l 12(sp),a0
    f250:	|      move.w 36(a0),d0
    f254:	|      moveq #0,d2
    f256:	|      move.w d0,d2
    f258:	|      move.l 4(sp),d1
    f25c:	|      moveq #1,d0
    f25e:	|      lsl.l d1,d0
    f260:	|      move.l d2,d1
    f262:	|      and.l d0,d1
    f264:	|      moveq #28,d0
    f266:	|      add.l 24(sp),d0
    f26a:	|      move.l d1,-(sp)
    f26c:	|      pea 1 <_start+0x1>
    f270:	|      move.l d0,-(sp)
    f272:	|      jsr 11042 <setVariable>
    f278:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f27c:	|      moveq #2,d0
}
    f27e:	\----> move.l (sp)+,d2
    f280:	       lea 12(sp),sp
    f284:	       rts

0000f286 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
    f286:	       jsr 9590 <snapshot>
    f28c:	       tst.w d0
    f28e:	/----- beq.s f294 <builtIn_snapshotGrab+0xe>
    f290:	|      moveq #2,d0
    f292:	|  /-- bra.s f296 <builtIn_snapshotGrab+0x10>
    f294:	\--|-> moveq #1,d0
}
    f296:	   \-> rts

0000f298 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
    f298:	jsr 9456 <nosnapshot>
	return BR_CONTINUE;
    f29e:	moveq #2,d0
}
    f2a0:	rts

0000f2a2 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
    f2a2:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
    f2a4:	move.w 18000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
    f2ac:	movea.l 12(sp),a0
    f2b0:	move.l 24(a0),d0
    f2b4:	move.l d0,-(sp)
    f2b6:	jsr 10c90 <getBoolean>
    f2bc:	addq.l #4,sp
    f2be:	move.w d0,18000 <allowAnyFilename>
	trimStack (&fun -> stack);
    f2c4:	moveq #24,d0
    f2c6:	add.l 12(sp),d0
    f2ca:	move.l d0,-(sp)
    f2cc:	jsr 110d4 <trimStack>
    f2d2:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
    f2d4:	movea.w 2(sp),a0
    f2d8:	moveq #28,d0
    f2da:	add.l 12(sp),d0
    f2de:	move.l a0,-(sp)
    f2e0:	pea 1 <_start+0x1>
    f2e4:	move.l d0,-(sp)
    f2e6:	jsr 11042 <setVariable>
    f2ec:	lea 12(sp),sp
	return BR_CONTINUE;
    f2f0:	moveq #2,d0
}
    f2f2:	addq.l #4,sp
    f2f4:	rts

0000f2f6 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    f2f6:	moveq #24,d0
    f2f8:	add.l 8(sp),d0
    f2fc:	move.l d0,-(sp)
    f2fe:	jsr 110d4 <trimStack>
    f304:	addq.l #4,sp
	trimStack (&fun -> stack);
    f306:	moveq #24,d0
    f308:	add.l 8(sp),d0
    f30c:	move.l d0,-(sp)
    f30e:	jsr 110d4 <trimStack>
    f314:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
    f316:	moveq #28,d0
    f318:	add.l 8(sp),d0
    f31c:	clr.l -(sp)
    f31e:	pea 1 <_start+0x1>
    f322:	move.l d0,-(sp)
    f324:	jsr 11042 <setVariable>
    f32a:	lea 12(sp),sp

	return BR_CONTINUE;
    f32e:	moveq #2,d0
}
    f330:	rts

0000f332 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
    f332:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
    f334:	movea.l 12(sp),a0
    f338:	move.l 24(a0),d0
    f33c:	move.l d0,-(sp)
    f33e:	jsr 10d26 <getTextFromAnyVar>
    f344:	addq.l #4,sp
    f346:	move.l d0,(sp)
	trimStack (&fun -> stack);
    f348:	moveq #24,d0
    f34a:	add.l 12(sp),d0
    f34e:	move.l d0,-(sp)
    f350:	jsr 110d4 <trimStack>
    f356:	addq.l #4,sp
	KPrintF (mess);
    f358:	move.l (sp),-(sp)
    f35a:	jsr 127a4 <KPrintF>
    f360:	addq.l #4,sp
	return BR_ERROR;
    f362:	moveq #1,d0
}
    f364:	addq.l #4,sp
    f366:	rts

0000f368 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    f368:	moveq #24,d0
    f36a:	add.l 8(sp),d0
    f36e:	move.l d0,-(sp)
    f370:	jsr 110d4 <trimStack>
    f376:	addq.l #4,sp
	trimStack (&fun -> stack);
    f378:	moveq #24,d0
    f37a:	add.l 8(sp),d0
    f37e:	move.l d0,-(sp)
    f380:	jsr 110d4 <trimStack>
    f386:	addq.l #4,sp
	trimStack (&fun -> stack);
    f388:	moveq #24,d0
    f38a:	add.l 8(sp),d0
    f38e:	move.l d0,-(sp)
    f390:	jsr 110d4 <trimStack>
    f396:	addq.l #4,sp
	trimStack (&fun -> stack);
    f398:	moveq #24,d0
    f39a:	add.l 8(sp),d0
    f39e:	move.l d0,-(sp)
    f3a0:	jsr 110d4 <trimStack>
    f3a6:	addq.l #4,sp

	return BR_CONTINUE;
    f3a8:	moveq #2,d0
}
    f3aa:	rts

0000f3ac <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
    f3ac:	moveq #24,d0
    f3ae:	add.l 8(sp),d0
    f3b2:	move.l d0,-(sp)
    f3b4:	jsr 110d4 <trimStack>
    f3ba:	addq.l #4,sp
	trimStack (&fun -> stack);
    f3bc:	moveq #24,d0
    f3be:	add.l 8(sp),d0
    f3c2:	move.l d0,-(sp)
    f3c4:	jsr 110d4 <trimStack>
    f3ca:	addq.l #4,sp
	trimStack (&fun -> stack);
    f3cc:	moveq #24,d0
    f3ce:	add.l 8(sp),d0
    f3d2:	move.l d0,-(sp)
    f3d4:	jsr 110d4 <trimStack>
    f3da:	addq.l #4,sp

	return BR_CONTINUE;
    f3dc:	moveq #2,d0

}
    f3de:	rts

0000f3e0 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
    f3e0:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
    f3e2:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    f3e8:	sne d0
    f3ea:	neg.b d0
    f3ec:	moveq #0,d1
    f3ee:	move.b d0,d1
    f3f0:	moveq #28,d0
    f3f2:	add.l 12(sp),d0
    f3f6:	move.l d1,-(sp)
    f3f8:	pea 1 <_start+0x1>
    f3fc:	move.l d0,-(sp)
    f3fe:	jsr 11042 <setVariable>
    f404:	lea 12(sp),sp
	return BR_CONTINUE;
    f408:	moveq #2,d0
}
    f40a:	addq.l #4,sp
    f40c:	rts

0000f40e <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
    f40e:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
    f410:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
    f416:	pea 16351 <main_sludge.c.2f5c5368+0xa67>
    f41c:	jsr 127a4 <KPrintF>
    f422:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
    f424:	tst.w 2(sp)
    f428:	sne d0
    f42a:	neg.b d0
    f42c:	moveq #0,d1
    f42e:	move.b d0,d1
    f430:	moveq #28,d0
    f432:	add.l 12(sp),d0
    f436:	move.l d1,-(sp)
    f438:	pea 1 <_start+0x1>
    f43c:	move.l d0,-(sp)
    f43e:	jsr 11042 <setVariable>
    f444:	lea 12(sp),sp
	return BR_CONTINUE;
    f448:	moveq #2,d0
}
    f44a:	addq.l #4,sp
    f44c:	rts

0000f44e <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
    f44e:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
    f452:	             move.l 104(sp),d0
    f456:	             cmpi.l #166,d0
    f45c:	/----------- bhi.w f53e <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
    f460:	|            move.l 104(sp),d0
    f464:	|            add.l d0,d0
    f466:	|            movea.l d0,a1
    f468:	|            adda.l d0,a1
    f46a:	|            lea 1814e <paramNum>,a0
    f470:	|            move.l (0,a1,a0.l),d0
    f474:	|            moveq #-1,d1
    f476:	|            cmp.l d0,d1
    f478:	|  /-------- beq.w f506 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
    f47c:	|  |         move.l 104(sp),d0
    f480:	|  |         add.l d0,d0
    f482:	|  |         movea.l d0,a1
    f484:	|  |         adda.l d0,a1
    f486:	|  |         lea 1814e <paramNum>,a0
    f48c:	|  |         move.l (0,a1,a0.l),d0
    f490:	|  |         cmp.l 108(sp),d0
    f494:	|  +-------- beq.s f506 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
    f496:	|  |         move.l 104(sp),d0
    f49a:	|  |         add.l d0,d0
    f49c:	|  |         movea.l d0,a1
    f49e:	|  |         adda.l d0,a1
    f4a0:	|  |         lea 1814e <paramNum>,a0
    f4a6:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
    f4aa:	|  |         moveq #1,d1
    f4ac:	|  |         cmp.l d0,d1
    f4ae:	|  |  /----- bne.s f4b8 <callBuiltIn+0x6a>
    f4b0:	|  |  |      move.l #80264,d0
    f4b6:	|  |  |  /-- bra.s f4be <callBuiltIn+0x70>
    f4b8:	|  |  \--|-> move.l #91015,d0
    f4be:	|  |     \-> move.l 104(sp),d1
    f4c2:	|  |         add.l d1,d1
    f4c4:	|  |         movea.l d1,a1
    f4c6:	|  |         adda.l d1,a1
    f4c8:	|  |         lea 1814e <paramNum>,a0
    f4ce:	|  |         move.l (0,a1,a0.l),d1
    f4d2:	|  |         move.l d0,-(sp)
    f4d4:	|  |         move.l d1,-(sp)
    f4d6:	|  |         pea 16389 <main_sludge.c.2f5c5368+0xa9f>
    f4dc:	|  |         lea 12(sp),a0
    f4e0:	|  |         move.l a0,-(sp)
    f4e2:	|  |         jsr ff5a <sprintf>
    f4e8:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
    f4ec:	|  |         movea.l sp,a0
    f4ee:	|  |         move.l a0,-(sp)
    f4f0:	|  |         jsr b8 <copyString>
    f4f6:	|  |         addq.l #4,sp
    f4f8:	|  |         move.l d0,-(sp)
    f4fa:	|  |         jsr 127a4 <KPrintF>
    f500:	|  |         addq.l #4,sp
				return BR_ERROR;
    f502:	|  |         moveq #1,d0
    f504:	|  |     /-- bra.s f54e <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
    f506:	|  \-----|-> move.l 104(sp),d0
    f50a:	|        |   add.l d0,d0
    f50c:	|        |   movea.l d0,a1
    f50e:	|        |   adda.l d0,a1
    f510:	|        |   lea 183ea <builtInFunctionArray>,a0
    f516:	|        |   move.l (0,a1,a0.l),d0
    f51a:	+--------|-- beq.s f53e <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
    f51c:	|        |   move.l 104(sp),d0
    f520:	|        |   add.l d0,d0
    f522:	|        |   movea.l d0,a1
    f524:	|        |   adda.l d0,a1
    f526:	|        |   lea 183ea <builtInFunctionArray>,a0
    f52c:	|        |   movea.l (0,a1,a0.l),a0
    f530:	|        |   move.l 112(sp),-(sp)
    f534:	|        |   move.l 112(sp),-(sp)
    f538:	|        |   jsr (a0)
    f53a:	|        |   addq.l #8,sp
    f53c:	|        +-- bra.s f54e <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
    f53e:	\--------|-> pea 163b4 <main_sludge.c.2f5c5368+0xaca>
    f544:	         |   jsr 127a4 <KPrintF>
    f54a:	         |   addq.l #4,sp
	return BR_ERROR;
    f54c:	         |   moveq #1,d0
}
    f54e:	         \-> lea 100(sp),sp
    f552:	             rts

0000f554 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
    f554:	          subq.l #8,sp
	int indexNum = -1;
    f556:	          moveq #-1,d0
    f558:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    f55c:	          clr.l (sp)
    f55e:	   /----- bra.s f584 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
    f560:	/--|----> move.l 19d1c <languageTable>,d1
    f566:	|  |      move.l (sp),d0
    f568:	|  |      add.l d0,d0
    f56a:	|  |      add.l d0,d0
    f56c:	|  |      movea.l d1,a0
    f56e:	|  |      adda.l d0,a0
    f570:	|  |      move.l (a0),d0
    f572:	|  |      move.l d0,d1
    f574:	|  |      move.l 19d24 <gameSettings>,d0
    f57a:	|  |      cmp.l d1,d0
    f57c:	|  |  /-- bne.s f582 <getLanguageForFileB+0x2e>
    f57e:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    f582:	|  |  \-> addq.l #1,(sp)
    f584:	|  \----> move.l 19d28 <gameSettings+0x4>,d0
    f58a:	|         cmp.l (sp),d0
    f58c:	\-------- bcc.s f560 <getLanguageForFileB+0xc>
	}

	return indexNum;
    f58e:	          move.l 4(sp),d0
}
    f592:	          addq.l #8,sp
    f594:	          rts

0000f596 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
    f596:	          lea -20(sp),sp
    f59a:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
    f59c:	          move.l 28(sp),-(sp)
    f5a0:	          jsr fc3c <strlen>
    f5a6:	          addq.l #4,sp
    f5a8:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
    f5ac:	          moveq #4,d0
    f5ae:	          cmp.l 12(sp),d0
    f5b2:	      /-- bge.s f5d6 <getPrefsFilename+0x40>
    f5b4:	      |   move.l 12(sp),d0
    f5b8:	      |   subq.l #4,d0
    f5ba:	      |   movea.l 28(sp),a0
    f5be:	      |   adda.l d0,a0
    f5c0:	      |   move.b (a0),d0
    f5c2:	      |   cmpi.b #46,d0
    f5c6:	      +-- bne.s f5d6 <getPrefsFilename+0x40>
		filename[n-4] = 0;
    f5c8:	      |   move.l 12(sp),d0
    f5cc:	      |   subq.l #4,d0
    f5ce:	      |   movea.l 28(sp),a0
    f5d2:	      |   adda.l d0,a0
    f5d4:	      |   clr.b (a0)
	}

	char * f = filename;
    f5d6:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
    f5dc:	          clr.l 20(sp)
    f5e0:	   /----- bra.s f608 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
    f5e2:	/--|----> move.l 20(sp),d0
    f5e6:	|  |      movea.l 28(sp),a0
    f5ea:	|  |      adda.l d0,a0
    f5ec:	|  |      move.b (a0),d0
    f5ee:	|  |      cmpi.b #47,d0
    f5f2:	|  |  /-- bne.s f604 <getPrefsFilename+0x6e>
    f5f4:	|  |  |   move.l 20(sp),d0
    f5f8:	|  |  |   addq.l #1,d0
    f5fa:	|  |  |   move.l 28(sp),d1
    f5fe:	|  |  |   add.l d0,d1
    f600:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
    f604:	|  |  \-> addq.l #1,20(sp)
    f608:	|  \----> move.l 20(sp),d0
    f60c:	|         cmp.l 12(sp),d0
    f610:	\-------- blt.s f5e2 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
    f612:	          pea 163df <main_sludge.c.2f5c5368+0xaf5>
    f618:	          move.l 20(sp),-(sp)
    f61c:	          jsr fc7c <joinStrings>
    f622:	          addq.l #8,sp
    f624:	          move.l d0,8(sp)

	FreeVec(filename);
    f628:	          move.l 28(sp),4(sp)
    f62e:	          move.l 19c4c <SysBase>,d0
    f634:	          movea.l d0,a6
    f636:	          movea.l 4(sp),a1
    f63a:	          jsr -690(a6)
	filename = NULL;
    f63e:	          clr.l 28(sp)
	return joined;
    f642:	          move.l 8(sp),d0
}
    f646:	          movea.l (sp)+,a6
    f648:	          lea 20(sp),sp
    f64c:	          rts

0000f64e <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
    f64e:	             lea -28(sp),sp
    f652:	             move.l a6,-(sp)
    f654:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    f656:	             move.l 19d28 <gameSettings+0x4>,d0
    f65c:	             move.l d0,d1
    f65e:	             addq.l #1,d1
    f660:	             move.l d1,28(sp)
    f664:	             clr.l 24(sp)
    f668:	             move.l 19c4c <SysBase>,d0
    f66e:	             movea.l d0,a6
    f670:	             move.l 28(sp),d0
    f674:	             move.l 24(sp),d1
    f678:	             jsr -684(a6)
    f67c:	             move.l d0,20(sp)
    f680:	             move.l 20(sp),d0
    f684:	             move.l d0,19d1c <languageTable>
    if( languageTable == 0) {
    f68a:	             move.l 19d1c <languageTable>,d0
    f690:	         /-- bne.s f6a0 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
    f692:	         |   pea 163e4 <main_sludge.c.2f5c5368+0xafa>
    f698:	         |   jsr 127a4 <KPrintF>
    f69e:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
    f6a0:	         \-> move.l 19d28 <gameSettings+0x4>,d0
    f6a6:	             move.l d0,d1
    f6a8:	             addq.l #1,d1
    f6aa:	             move.l d1,16(sp)
    f6ae:	             clr.l 12(sp)
    f6b2:	             move.l 19c4c <SysBase>,d0
    f6b8:	             movea.l d0,a6
    f6ba:	             move.l 16(sp),d0
    f6be:	             move.l 12(sp),d1
    f6c2:	             jsr -684(a6)
    f6c6:	             move.l d0,8(sp)
    f6ca:	             move.l 8(sp),d0
    f6ce:	             move.l d0,19d20 <languageName>
	if( languageName == 0) {
    f6d4:	             move.l 19d20 <languageName>,d0
    f6da:	         /-- bne.s f6ea <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
    f6dc:	         |   pea 1641a <main_sludge.c.2f5c5368+0xb30>
    f6e2:	         |   jsr 127a4 <KPrintF>
    f6e8:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    f6ea:	         \-> clr.l 32(sp)
    f6ee:	   /-------- bra.s f766 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
    f6f0:	/--|-------> tst.l 32(sp)
    f6f4:	|  |  /----- beq.s f704 <makeLanguageTable+0xb6>
    f6f6:	|  |  |      move.l 40(sp),-(sp)
    f6fa:	|  |  |      jsr 6bc <get2bytes>
    f700:	|  |  |      addq.l #4,sp
    f702:	|  |  |  /-- bra.s f706 <makeLanguageTable+0xb8>
    f704:	|  |  \--|-> moveq #0,d0
    f706:	|  |     \-> movea.l 19d1c <languageTable>,a0
    f70c:	|  |         move.l 32(sp),d1
    f710:	|  |         add.l d1,d1
    f712:	|  |         add.l d1,d1
    f714:	|  |         adda.l d1,a0
    f716:	|  |         move.l d0,(a0)
		languageName[i] = 0;
    f718:	|  |         move.l 19d20 <languageName>,d1
    f71e:	|  |         move.l 32(sp),d0
    f722:	|  |         add.l d0,d0
    f724:	|  |         add.l d0,d0
    f726:	|  |         movea.l d1,a0
    f728:	|  |         adda.l d0,a0
    f72a:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
    f72c:	|  |         move.l 19bfa <gameVersion>,d0
    f732:	|  |         cmpi.l #511,d0
    f738:	|  |     /-- ble.s f762 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
    f73a:	|  |     |   move.l 19d28 <gameSettings+0x4>,d0
    f740:	|  |     +-- beq.s f762 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
    f742:	|  |     |   move.l 19d20 <languageName>,d1
    f748:	|  |     |   move.l 32(sp),d0
    f74c:	|  |     |   add.l d0,d0
    f74e:	|  |     |   add.l d0,d0
    f750:	|  |     |   movea.l d1,a2
    f752:	|  |     |   adda.l d0,a2
    f754:	|  |     |   move.l 40(sp),-(sp)
    f758:	|  |     |   jsr b02 <readString>
    f75e:	|  |     |   addq.l #4,sp
    f760:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
    f762:	|  |     \-> addq.l #1,32(sp)
    f766:	|  \-------> move.l 19d28 <gameSettings+0x4>,d0
    f76c:	|            cmp.l 32(sp),d0
    f770:	\----------- bcc.w f6f0 <makeLanguageTable+0xa2>
		}
	}
}
    f774:	             nop
    f776:	             nop
    f778:	             movea.l (sp)+,a2
    f77a:	             movea.l (sp)+,a6
    f77c:	             lea 28(sp),sp
    f780:	             rts

0000f782 <readIniFile>:

void readIniFile (char * filename) {
    f782:	                      lea -564(sp),sp
    f786:	                      move.l a6,-(sp)
    f788:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
    f78a:	                      move.l 576(sp),-(sp)
    f78e:	                      jsr b8 <copyString>
    f794:	                      addq.l #4,sp
    f796:	                      move.l d0,-(sp)
    f798:	                      jsr f596 <getPrefsFilename>
    f79e:	                      addq.l #4,sp
    f7a0:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
    f7a4:	                      move.l 562(sp),558(sp)
    f7aa:	                      move.l #1005,554(sp)
    f7b2:	                      move.l 19c54 <DOSBase>,d0
    f7b8:	                      movea.l d0,a6
    f7ba:	                      move.l 558(sp),d1
    f7be:	                      move.l 554(sp),d2
    f7c2:	                      jsr -30(a6)
    f7c6:	                      move.l d0,550(sp)
    f7ca:	                      move.l 550(sp),d0
    f7ce:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
    f7d2:	                      clr.l 19d24 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
    f7d8:	                      move.w #1,19d2c <gameSettings+0x8>
	gameSettings.refreshRate = 0;
    f7e0:	                      clr.l 19d2e <gameSettings+0xa>
	gameSettings.antiAlias = 1;
    f7e6:	                      moveq #1,d0
    f7e8:	                      move.l d0,19d32 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
    f7ee:	                      clr.w 19d36 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
    f7f4:	                      clr.w 19d38 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
    f7fa:	                      clr.w 19d3a <gameSettings+0x16>

	FreeVec(langName);
    f800:	                      move.l 562(sp),542(sp)
    f806:	                      move.l 19c4c <SysBase>,d0
    f80c:	                      movea.l d0,a6
    f80e:	                      movea.l 542(sp),a1
    f812:	                      jsr -690(a6)
	langName = NULL;
    f816:	                      clr.l 562(sp)

	if (fp) {
    f81a:	                      tst.l 546(sp)
    f81e:	/-------------------- beq.w fafc <readIniFile+0x37a>
		char lineSoFar[257] = "";
    f822:	|                     move.l sp,d0
    f824:	|                     addi.l #265,d0
    f82a:	|                     move.l #257,d1
    f830:	|                     move.l d1,-(sp)
    f832:	|                     clr.l -(sp)
    f834:	|                     move.l d0,-(sp)
    f836:	|                     jsr 12728 <memset>
    f83c:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
    f840:	|                     move.l sp,d0
    f842:	|                     addq.l #8,d0
    f844:	|                     move.l #257,d1
    f84a:	|                     move.l d1,-(sp)
    f84c:	|                     clr.l -(sp)
    f84e:	|                     move.l d0,-(sp)
    f850:	|                     jsr 12728 <memset>
    f856:	|                     lea 12(sp),sp
		unsigned char here = 0;
    f85a:	|                     clr.b 571(sp)
		char readChar = ' ';
    f85e:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
    f864:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
    f86a:	|                     clr.w 566(sp)
		LONG tmp = 0;
    f86e:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
    f872:	|  /----------------> move.l 546(sp),534(sp)
    f878:	|  |                  move.l 19c54 <DOSBase>,d0
    f87e:	|  |                  movea.l d0,a6
    f880:	|  |                  move.l 534(sp),d1
    f884:	|  |                  jsr -306(a6)
    f888:	|  |                  move.l d0,530(sp)
    f88c:	|  |                  move.l 530(sp),d0
    f890:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
    f894:	|  |                  moveq #-1,d1
    f896:	|  |                  cmp.l 538(sp),d1
    f89a:	|  |           /----- bne.s f8a8 <readIniFile+0x126>
				readChar = '\n';
    f89c:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
    f8a2:	|  |           |      clr.w 568(sp)
    f8a6:	|  |           |  /-- bra.s f8ae <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
    f8a8:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
    f8ae:	|  |              \-> move.b 570(sp),d0
    f8b2:	|  |                  ext.w d0
    f8b4:	|  |                  movea.w d0,a0
    f8b6:	|  |                  moveq #61,d0
    f8b8:	|  |                  cmp.l a0,d0
    f8ba:	|  |     /----------- beq.w fa64 <readIniFile+0x2e2>
    f8be:	|  |     |            moveq #61,d1
    f8c0:	|  |     |            cmp.l a0,d1
    f8c2:	|  |  /--|----------- blt.w fa70 <readIniFile+0x2ee>
    f8c6:	|  |  |  |            moveq #10,d0
    f8c8:	|  |  |  |            cmp.l a0,d0
    f8ca:	|  |  |  |        /-- beq.s f8d4 <readIniFile+0x152>
    f8cc:	|  |  |  |        |   moveq #13,d1
    f8ce:	|  |  |  |        |   cmp.l a0,d1
    f8d0:	|  |  +--|--------|-- bne.w fa70 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
    f8d4:	|  |  |  |        \-> tst.w 566(sp)
    f8d8:	|  |  |  |     /----- beq.w fa52 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
    f8dc:	|  |  |  |     |      pea 1644e <main_sludge.c.2f5c5368+0xb64>
    f8e2:	|  |  |  |     |      move.l sp,d0
    f8e4:	|  |  |  |     |      addi.l #269,d0
    f8ea:	|  |  |  |     |      move.l d0,-(sp)
    f8ec:	|  |  |  |     |      jsr fbfc <strcmp>
    f8f2:	|  |  |  |     |      addq.l #8,sp
    f8f4:	|  |  |  |     |      tst.l d0
    f8f6:	|  |  |  |     |  /-- bne.s f910 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
    f8f8:	|  |  |  |     |  |   move.l sp,d0
    f8fa:	|  |  |  |     |  |   addq.l #8,d0
    f8fc:	|  |  |  |     |  |   move.l d0,-(sp)
    f8fe:	|  |  |  |     |  |   jsr fb08 <stringToInt>
    f904:	|  |  |  |     |  |   addq.l #4,sp
    f906:	|  |  |  |     |  |   move.l d0,19d24 <gameSettings>
    f90c:	|  |  |  |     +--|-- bra.w fa52 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
    f910:	|  |  |  |     |  \-> pea 16457 <main_sludge.c.2f5c5368+0xb6d>
    f916:	|  |  |  |     |      move.l sp,d0
    f918:	|  |  |  |     |      addi.l #269,d0
    f91e:	|  |  |  |     |      move.l d0,-(sp)
    f920:	|  |  |  |     |      jsr fbfc <strcmp>
    f926:	|  |  |  |     |      addq.l #8,sp
    f928:	|  |  |  |     |      tst.l d0
    f92a:	|  |  |  |     |  /-- bne.s f950 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
    f92c:	|  |  |  |     |  |   move.l sp,d0
    f92e:	|  |  |  |     |  |   addq.l #8,d0
    f930:	|  |  |  |     |  |   move.l d0,-(sp)
    f932:	|  |  |  |     |  |   jsr fb08 <stringToInt>
    f938:	|  |  |  |     |  |   addq.l #4,sp
    f93a:	|  |  |  |     |  |   tst.l d0
    f93c:	|  |  |  |     |  |   seq d0
    f93e:	|  |  |  |     |  |   neg.b d0
    f940:	|  |  |  |     |  |   move.b d0,d0
    f942:	|  |  |  |     |  |   andi.w #255,d0
    f946:	|  |  |  |     |  |   move.w d0,19d2c <gameSettings+0x8>
    f94c:	|  |  |  |     +--|-- bra.w fa52 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
    f950:	|  |  |  |     |  \-> pea 1645e <main_sludge.c.2f5c5368+0xb74>
    f956:	|  |  |  |     |      move.l sp,d0
    f958:	|  |  |  |     |      addi.l #269,d0
    f95e:	|  |  |  |     |      move.l d0,-(sp)
    f960:	|  |  |  |     |      jsr fbfc <strcmp>
    f966:	|  |  |  |     |      addq.l #8,sp
    f968:	|  |  |  |     |      tst.l d0
    f96a:	|  |  |  |     |  /-- bne.s f984 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
    f96c:	|  |  |  |     |  |   move.l sp,d0
    f96e:	|  |  |  |     |  |   addq.l #8,d0
    f970:	|  |  |  |     |  |   move.l d0,-(sp)
    f972:	|  |  |  |     |  |   jsr fb08 <stringToInt>
    f978:	|  |  |  |     |  |   addq.l #4,sp
    f97a:	|  |  |  |     |  |   move.l d0,19d2e <gameSettings+0xa>
    f980:	|  |  |  |     +--|-- bra.w fa52 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
    f984:	|  |  |  |     |  \-> pea 16466 <main_sludge.c.2f5c5368+0xb7c>
    f98a:	|  |  |  |     |      move.l sp,d0
    f98c:	|  |  |  |     |      addi.l #269,d0
    f992:	|  |  |  |     |      move.l d0,-(sp)
    f994:	|  |  |  |     |      jsr fbfc <strcmp>
    f99a:	|  |  |  |     |      addq.l #8,sp
    f99c:	|  |  |  |     |      tst.l d0
    f99e:	|  |  |  |     |  /-- bne.s f9b8 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
    f9a0:	|  |  |  |     |  |   move.l sp,d0
    f9a2:	|  |  |  |     |  |   addq.l #8,d0
    f9a4:	|  |  |  |     |  |   move.l d0,-(sp)
    f9a6:	|  |  |  |     |  |   jsr fb08 <stringToInt>
    f9ac:	|  |  |  |     |  |   addq.l #4,sp
    f9ae:	|  |  |  |     |  |   move.l d0,19d32 <gameSettings+0xe>
    f9b4:	|  |  |  |     +--|-- bra.w fa52 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
    f9b8:	|  |  |  |     |  \-> pea 16470 <main_sludge.c.2f5c5368+0xb86>
    f9be:	|  |  |  |     |      move.l sp,d0
    f9c0:	|  |  |  |     |      addi.l #269,d0
    f9c6:	|  |  |  |     |      move.l d0,-(sp)
    f9c8:	|  |  |  |     |      jsr fbfc <strcmp>
    f9ce:	|  |  |  |     |      addq.l #8,sp
    f9d0:	|  |  |  |     |      tst.l d0
    f9d2:	|  |  |  |     |  /-- bne.s f9ec <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
    f9d4:	|  |  |  |     |  |   move.l sp,d0
    f9d6:	|  |  |  |     |  |   addq.l #8,d0
    f9d8:	|  |  |  |     |  |   move.l d0,-(sp)
    f9da:	|  |  |  |     |  |   jsr fb08 <stringToInt>
    f9e0:	|  |  |  |     |  |   addq.l #4,sp
    f9e2:	|  |  |  |     |  |   move.l d0,d0
    f9e4:	|  |  |  |     |  |   move.w d0,19d36 <gameSettings+0x12>
    f9ea:	|  |  |  |     +--|-- bra.s fa52 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
    f9ec:	|  |  |  |     |  \-> pea 1647c <main_sludge.c.2f5c5368+0xb92>
    f9f2:	|  |  |  |     |      move.l sp,d0
    f9f4:	|  |  |  |     |      addi.l #269,d0
    f9fa:	|  |  |  |     |      move.l d0,-(sp)
    f9fc:	|  |  |  |     |      jsr fbfc <strcmp>
    fa02:	|  |  |  |     |      addq.l #8,sp
    fa04:	|  |  |  |     |      tst.l d0
    fa06:	|  |  |  |     |  /-- bne.s fa20 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
    fa08:	|  |  |  |     |  |   move.l sp,d0
    fa0a:	|  |  |  |     |  |   addq.l #8,d0
    fa0c:	|  |  |  |     |  |   move.l d0,-(sp)
    fa0e:	|  |  |  |     |  |   jsr fb08 <stringToInt>
    fa14:	|  |  |  |     |  |   addq.l #4,sp
    fa16:	|  |  |  |     |  |   move.l d0,d0
    fa18:	|  |  |  |     |  |   move.w d0,19d38 <gameSettings+0x14>
    fa1e:	|  |  |  |     +--|-- bra.s fa52 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
    fa20:	|  |  |  |     |  \-> pea 1648a <main_sludge.c.2f5c5368+0xba0>
    fa26:	|  |  |  |     |      move.l sp,d0
    fa28:	|  |  |  |     |      addi.l #269,d0
    fa2e:	|  |  |  |     |      move.l d0,-(sp)
    fa30:	|  |  |  |     |      jsr fbfc <strcmp>
    fa36:	|  |  |  |     |      addq.l #8,sp
    fa38:	|  |  |  |     |      tst.l d0
    fa3a:	|  |  |  |     +----- bne.s fa52 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
    fa3c:	|  |  |  |     |      move.l sp,d0
    fa3e:	|  |  |  |     |      addq.l #8,d0
    fa40:	|  |  |  |     |      move.l d0,-(sp)
    fa42:	|  |  |  |     |      jsr fb08 <stringToInt>
    fa48:	|  |  |  |     |      addq.l #4,sp
    fa4a:	|  |  |  |     |      move.l d0,d0
    fa4c:	|  |  |  |     |      move.w d0,19d3a <gameSettings+0x16>
					}
				}
				here = 0;
    fa52:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
    fa56:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
    fa5a:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
    fa5e:	|  |  |  |            clr.b 8(sp)
				break;
    fa62:	|  |  |  |  /-------- bra.s fada <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
    fa64:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
    fa6a:	|  |  |     |         clr.b 571(sp)
				break;
    fa6e:	|  |  |     +-------- bra.s fada <readIniFile+0x358>

				default:
				if (doingSecond) {
    fa70:	|  |  \-----|-------> tst.w 566(sp)
    fa74:	|  |        |  /----- beq.s faa8 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
    fa76:	|  |        |  |      move.b 571(sp),d0
    fa7a:	|  |        |  |      move.b d0,d1
    fa7c:	|  |        |  |      addq.b #1,d1
    fa7e:	|  |        |  |      move.b d1,571(sp)
    fa82:	|  |        |  |      move.b d0,d0
    fa84:	|  |        |  |      andi.l #255,d0
    fa8a:	|  |        |  |      lea 572(sp),a0
    fa8e:	|  |        |  |      adda.l d0,a0
    fa90:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
    fa96:	|  |        |  |      moveq #0,d0
    fa98:	|  |        |  |      move.b 571(sp),d0
    fa9c:	|  |        |  |      lea 572(sp),a0
    faa0:	|  |        |  |      adda.l d0,a0
    faa2:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
    faa6:	|  |        |  |  /-- bra.s fad8 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
    faa8:	|  |        |  \--|-> move.b 571(sp),d0
    faac:	|  |        |     |   move.b d0,d1
    faae:	|  |        |     |   addq.b #1,d1
    fab0:	|  |        |     |   move.b d1,571(sp)
    fab4:	|  |        |     |   move.b d0,d0
    fab6:	|  |        |     |   andi.l #255,d0
    fabc:	|  |        |     |   lea 572(sp),a0
    fac0:	|  |        |     |   adda.l d0,a0
    fac2:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
    fac8:	|  |        |     |   moveq #0,d0
    faca:	|  |        |     |   move.b 571(sp),d0
    face:	|  |        |     |   lea 572(sp),a0
    fad2:	|  |        |     |   adda.l d0,a0
    fad4:	|  |        |     |   clr.b -307(a0)
				break;
    fad8:	|  |        |     \-> nop
			}
		} while (keepGoing);
    fada:	|  |        \-------> tst.w 568(sp)
    fade:	|  \----------------- bne.w f872 <readIniFile+0xf0>

		Close(fp);
    fae2:	|                     move.l 546(sp),526(sp)
    fae8:	|                     move.l 19c54 <DOSBase>,d0
    faee:	|                     movea.l d0,a6
    faf0:	|                     move.l 526(sp),d1
    faf4:	|                     jsr -36(a6)
    faf8:	|                     move.l d0,522(sp)
	}
}
    fafc:	\-------------------> nop
    fafe:	                      move.l (sp)+,d2
    fb00:	                      movea.l (sp)+,a6
    fb02:	                      lea 564(sp),sp
    fb06:	                      rts

0000fb08 <stringToInt>:

unsigned int stringToInt (char * s) {
    fb08:	             subq.l #8,sp
	int i = 0;
    fb0a:	             clr.l 4(sp)
	BOOL negative = FALSE;
    fb0e:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
    fb12:	/----------> movea.l 12(sp),a0
    fb16:	|            move.b (a0),d0
    fb18:	|            cmpi.b #47,d0
    fb1c:	|        /-- ble.s fb54 <stringToInt+0x4c>
    fb1e:	|        |   movea.l 12(sp),a0
    fb22:	|        |   move.b (a0),d0
    fb24:	|        |   cmpi.b #57,d0
    fb28:	|        +-- bgt.s fb54 <stringToInt+0x4c>
			i *= 10;
    fb2a:	|        |   move.l 4(sp),d1
    fb2e:	|        |   move.l d1,d0
    fb30:	|        |   add.l d0,d0
    fb32:	|        |   add.l d0,d0
    fb34:	|        |   add.l d1,d0
    fb36:	|        |   add.l d0,d0
    fb38:	|        |   move.l d0,4(sp)
			i += *s - '0';
    fb3c:	|        |   movea.l 12(sp),a0
    fb40:	|        |   move.b (a0),d0
    fb42:	|        |   ext.w d0
    fb44:	|        |   movea.w d0,a0
    fb46:	|        |   moveq #-48,d0
    fb48:	|        |   add.l a0,d0
    fb4a:	|        |   add.l d0,4(sp)
			s ++;
    fb4e:	|        |   addq.l #1,12(sp)
    fb52:	|  /-----|-- bra.s fb8c <stringToInt+0x84>
		} else if (*s == '-') {
    fb54:	|  |     \-> movea.l 12(sp),a0
    fb58:	|  |         move.b (a0),d0
    fb5a:	|  |         cmpi.b #45,d0
    fb5e:	|  |     /-- bne.s fb78 <stringToInt+0x70>
			negative = ! negative;
    fb60:	|  |     |   tst.w 2(sp)
    fb64:	|  |     |   seq d0
    fb66:	|  |     |   neg.b d0
    fb68:	|  |     |   move.b d0,d0
    fb6a:	|  |     |   andi.w #255,d0
    fb6e:	|  |     |   move.w d0,2(sp)
			s++;
    fb72:	|  |     |   addq.l #1,12(sp)
    fb76:	+--|-----|-- bra.s fb12 <stringToInt+0xa>
		} else {
			if (negative)
    fb78:	|  |     \-> tst.w 2(sp)
    fb7c:	|  |     /-- beq.s fb86 <stringToInt+0x7e>
				return -i;
    fb7e:	|  |     |   move.l 4(sp),d0
    fb82:	|  |     |   neg.l d0
    fb84:	|  |  /--|-- bra.s fb8e <stringToInt+0x86>
			return i;
    fb86:	|  |  |  \-> move.l 4(sp),d0
    fb8a:	|  |  +----- bra.s fb8e <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
    fb8c:	\--\--|----X bra.s fb12 <stringToInt+0xa>
		}
	}
    fb8e:	      \----> addq.l #8,sp
    fb90:	             rts

0000fb92 <fileExists>:
 *  Helper functions that don't depend on other source files.
 */
#include <proto/dos.h>
#include "helpers.h"

BYTE fileExists(const char * file) {
    fb92:	    lea -28(sp),sp
    fb96:	    move.l a6,-(sp)
    fb98:	    move.l d2,-(sp)
	BPTR tester;
	BYTE retval = 0;
    fb9a:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
    fb9e:	    move.l 40(sp),30(sp)
    fba4:	    move.l #1005,26(sp)
    fbac:	    move.l 19c54 <DOSBase>,d0
    fbb2:	    movea.l d0,a6
    fbb4:	    move.l 30(sp),d1
    fbb8:	    move.l 26(sp),d2
    fbbc:	    jsr -30(a6)
    fbc0:	    move.l d0,22(sp)
    fbc4:	    move.l 22(sp),d0
    fbc8:	    move.l d0,18(sp)
	if (tester) {
    fbcc:	/-- beq.s fbee <fileExists+0x5c>
		retval = 1;
    fbce:	|   move.b #1,35(sp)
		Close(tester);
    fbd4:	|   move.l 18(sp),14(sp)
    fbda:	|   move.l 19c54 <DOSBase>,d0
    fbe0:	|   movea.l d0,a6
    fbe2:	|   move.l 14(sp),d1
    fbe6:	|   jsr -36(a6)
    fbea:	|   move.l d0,10(sp)
	}
	return retval;
    fbee:	\-> move.b 35(sp),d0
    fbf2:	    move.l (sp)+,d2
    fbf4:	    movea.l (sp)+,a6
    fbf6:	    lea 28(sp),sp
    fbfa:	    rts

0000fbfc <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
    fbfc:	   /-- bra.s fc06 <strcmp+0xa>
    {
        s1++;
    fbfe:	/--|-> addq.l #1,4(sp)
        s2++;
    fc02:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
    fc06:	|  \-> movea.l 4(sp),a0
    fc0a:	|      move.b (a0),d0
    fc0c:	|  /-- beq.s fc1e <strcmp+0x22>
    fc0e:	|  |   movea.l 4(sp),a0
    fc12:	|  |   move.b (a0),d1
    fc14:	|  |   movea.l 8(sp),a0
    fc18:	|  |   move.b (a0),d0
    fc1a:	|  |   cmp.b d1,d0
    fc1c:	\--|-- beq.s fbfe <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
    fc1e:	   \-> movea.l 4(sp),a0
    fc22:	       move.b (a0),d0
    fc24:	       moveq #0,d1
    fc26:	       move.b d0,d1
    fc28:	       movea.l 8(sp),a0
    fc2c:	       move.b (a0),d0
    fc2e:	       move.b d0,d0
    fc30:	       andi.l #255,d0
    fc36:	       sub.l d0,d1
    fc38:	       move.l d1,d0
}
    fc3a:	       rts

0000fc3c <strlen>:

long unsigned int strlen (const char *s) 
{  
    fc3c:	       subq.l #4,sp
	long unsigned int i = 0;
    fc3e:	       clr.l (sp)
	while(s[i]) i++; 
    fc40:	   /-- bra.s fc44 <strlen+0x8>
    fc42:	/--|-> addq.l #1,(sp)
    fc44:	|  \-> movea.l 8(sp),a0
    fc48:	|      adda.l (sp),a0
    fc4a:	|      move.b (a0),d0
    fc4c:	\----- bne.s fc42 <strlen+0x6>
	return(i);
    fc4e:	       move.l (sp),d0
}
    fc50:	       addq.l #4,sp
    fc52:	       rts

0000fc54 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
    fc54:	    nop
    fc56:	/-> move.l 8(sp),d0
    fc5a:	|   move.l d0,d1
    fc5c:	|   addq.l #1,d1
    fc5e:	|   move.l d1,8(sp)
    fc62:	|   movea.l 4(sp),a0
    fc66:	|   lea 1(a0),a1
    fc6a:	|   move.l a1,4(sp)
    fc6e:	|   movea.l d0,a1
    fc70:	|   move.b (a1),d0
    fc72:	|   move.b d0,(a0)
    fc74:	|   move.b (a0),d0
    fc76:	\-- bne.s fc56 <strcpy+0x2>
}
    fc78:	    nop
    fc7a:	    rts

0000fc7c <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
    fc7c:	    lea -20(sp),sp
    fc80:	    move.l a6,-(sp)
    fc82:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
    fc84:	    move.l 32(sp),-(sp)
    fc88:	    jsr fc3c <strlen>
    fc8e:	    addq.l #4,sp
    fc90:	    move.l d0,d2
    fc92:	    move.l 36(sp),-(sp)
    fc96:	    jsr fc3c <strlen>
    fc9c:	    addq.l #4,sp
    fc9e:	    add.l d2,d0
    fca0:	    move.l d0,d1
    fca2:	    addq.l #1,d1
    fca4:	    move.l d1,20(sp)
    fca8:	    clr.l 16(sp)
    fcac:	    move.l 19c4c <SysBase>,d0
    fcb2:	    movea.l d0,a6
    fcb4:	    move.l 20(sp),d0
    fcb8:	    move.l 16(sp),d1
    fcbc:	    jsr -684(a6)
    fcc0:	    move.l d0,12(sp)
    fcc4:	    move.l 12(sp),d0
    fcc8:	    move.l d0,8(sp)
	char * t = newString;
    fccc:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
    fcd2:	    nop
    fcd4:	/-> move.l 32(sp),d0
    fcd8:	|   move.l d0,d1
    fcda:	|   addq.l #1,d1
    fcdc:	|   move.l d1,32(sp)
    fce0:	|   movea.l 24(sp),a0
    fce4:	|   lea 1(a0),a1
    fce8:	|   move.l a1,24(sp)
    fcec:	|   movea.l d0,a1
    fcee:	|   move.b (a1),d0
    fcf0:	|   move.b d0,(a0)
    fcf2:	|   move.b (a0),d0
    fcf4:	\-- bne.s fcd4 <joinStrings+0x58>
	t--;
    fcf6:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
    fcfa:	    nop
    fcfc:	/-> move.l 36(sp),d0
    fd00:	|   move.l d0,d1
    fd02:	|   addq.l #1,d1
    fd04:	|   move.l d1,36(sp)
    fd08:	|   movea.l 24(sp),a0
    fd0c:	|   lea 1(a0),a1
    fd10:	|   move.l a1,24(sp)
    fd14:	|   movea.l d0,a1
    fd16:	|   move.b (a1),d0
    fd18:	|   move.b d0,(a0)
    fd1a:	|   move.b (a0),d0
    fd1c:	\-- bne.s fcfc <joinStrings+0x80>

	return newString;
    fd1e:	    move.l 8(sp),d0
}
    fd22:	    move.l (sp)+,d2
    fd24:	    movea.l (sp)+,a6
    fd26:	    lea 20(sp),sp
    fd2a:	    rts

0000fd2c <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
    fd2c:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
    fd30:	       moveq #10,d0
    fd32:	       cmp.l 28(sp),d0
    fd36:	   /-- bne.s fd54 <itoa+0x28>
    fd38:	   |   tst.l 20(sp)
    fd3c:	   +-- bge.s fd54 <itoa+0x28>
        *str++ = '-';
    fd3e:	   |   move.l 24(sp),d0
    fd42:	   |   move.l d0,d1
    fd44:	   |   addq.l #1,d1
    fd46:	   |   move.l d1,24(sp)
    fd4a:	   |   movea.l d0,a0
    fd4c:	   |   move.b #45,(a0)
        value *= -1;
    fd50:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
    fd54:	   \-> move.l 24(sp),12(sp)
    fd5a:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
    fd60:	   /-> move.l 20(sp),d0
    fd64:	   |   move.l 28(sp),-(sp)
    fd68:	   |   move.l d0,-(sp)
    fd6a:	   |   jsr 13202 <__modsi3>
    fd70:	   |   addq.l #8,sp
    fd72:	   |   movea.l d0,a1
    fd74:	   |   move.l 12(sp),d0
    fd78:	   |   move.l d0,d1
    fd7a:	   |   addq.l #1,d1
    fd7c:	   |   move.l d1,12(sp)
    fd80:	   |   lea 16494 <main_sludge.c.2f5c5368+0xbaa>,a0
    fd86:	   |   move.b (0,a1,a0.l),d1
    fd8a:	   |   movea.l d0,a0
    fd8c:	   |   move.b d1,(a0)
        value /= base;
    fd8e:	   |   move.l 28(sp),-(sp)
    fd92:	   |   move.l 24(sp),-(sp)
    fd96:	   |   jsr 131d4 <__divsi3>
    fd9c:	   |   addq.l #8,sp
    fd9e:	   |   move.l d0,20(sp)
    } while (value);
    fda2:	   \-- bne.s fd60 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
    fda4:	       move.l 12(sp),d0
    fda8:	       move.l d0,d1
    fdaa:	       subq.l #1,d1
    fdac:	       move.l d1,12(sp)
    fdb0:	       movea.l d0,a0
    fdb2:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
    fdb4:	       move.l 4(sp),8(sp)
    fdba:	   /-- bra.s fde0 <itoa+0xb4>
        char temp = *low;
    fdbc:	/--|-> movea.l 8(sp),a0
    fdc0:	|  |   move.b (a0),3(sp)
        *low = *ptr;
    fdc4:	|  |   movea.l 12(sp),a0
    fdc8:	|  |   move.b (a0),d0
    fdca:	|  |   movea.l 8(sp),a0
    fdce:	|  |   move.b d0,(a0)
        *ptr = temp;
    fdd0:	|  |   movea.l 12(sp),a0
    fdd4:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
    fdd8:	|  |   addq.l #1,8(sp)
    fddc:	|  |   subq.l #1,12(sp)
    fde0:	|  \-> move.l 8(sp),d0
    fde4:	|      cmp.l 12(sp),d0
    fde8:	\----- bcs.s fdbc <itoa+0x90>
    }
    return rc;
    fdea:	       move.l 4(sp),d0
}
    fdee:	       lea 16(sp),sp
    fdf2:	       rts

0000fdf4 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
    fdf4:	                            lea -40(sp),sp
    fdf8:	                            move.l d2,-(sp)
    char* s = str;
    fdfa:	                            move.l 48(sp),40(sp)
    const char* p = format;
    fe00:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
    fe06:	   /----------------------- bra.w ff3a <vsprintf2+0x146>
        if (*p == '%') {
    fe0a:	/--|----------------------> movea.l 36(sp),a0
    fe0e:	|  |                        move.b (a0),d0
    fe10:	|  |                        cmpi.b #37,d0
    fe14:	|  |  /-------------------- bne.w ff20 <vsprintf2+0x12c>
            switch (*++p) {
    fe18:	|  |  |                     addq.l #1,36(sp)
    fe1c:	|  |  |                     movea.l 36(sp),a0
    fe20:	|  |  |                     move.b (a0),d0
    fe22:	|  |  |                     ext.w d0
    fe24:	|  |  |                     movea.w d0,a0
    fe26:	|  |  |                     moveq #115,d0
    fe28:	|  |  |                     cmp.l a0,d0
    fe2a:	|  |  |           /-------- beq.s fea2 <vsprintf2+0xae>
    fe2c:	|  |  |           |         moveq #115,d1
    fe2e:	|  |  |           |         cmp.l a0,d1
    fe30:	|  |  |  /--------|-------- blt.w ff08 <vsprintf2+0x114>
    fe34:	|  |  |  |        |         moveq #99,d2
    fe36:	|  |  |  |        |         cmp.l a0,d2
    fe38:	|  |  |  |  /-----|-------- beq.w fee0 <vsprintf2+0xec>
    fe3c:	|  |  |  |  |     |         moveq #100,d0
    fe3e:	|  |  |  |  |     |         cmp.l a0,d0
    fe40:	|  |  |  +--|-----|-------- bne.w ff08 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
    fe44:	|  |  |  |  |     |         addq.l #4,56(sp)
    fe48:	|  |  |  |  |     |         movea.l 56(sp),a0
    fe4c:	|  |  |  |  |     |         move.l (a0),d0
    fe4e:	|  |  |  |  |     |         move.l d0,d1
    fe50:	|  |  |  |  |     |         subq.l #1,d1
    fe52:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
    fe56:	|  |  |  |  |     |         pea a <_start+0xa>
    fe5a:	|  |  |  |  |     |         lea 8(sp),a0
    fe5e:	|  |  |  |  |     |         move.l a0,-(sp)
    fe60:	|  |  |  |  |     |         move.l 32(sp),-(sp)
    fe64:	|  |  |  |  |     |         jsr fd2c <itoa>
    fe6a:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
    fe6e:	|  |  |  |  |     |         lea 44(sp),a0
    fe72:	|  |  |  |  |     |         lea -40(a0),a0
    fe76:	|  |  |  |  |     |         move.l a0,28(sp)
    fe7a:	|  |  |  |  |     |     /-- bra.s fe96 <vsprintf2+0xa2>
                        *s++ = *b;
    fe7c:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
    fe80:	|  |  |  |  |     |  |  |   move.l d0,d1
    fe82:	|  |  |  |  |     |  |  |   addq.l #1,d1
    fe84:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
    fe88:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
    fe8c:	|  |  |  |  |     |  |  |   move.b (a0),d1
    fe8e:	|  |  |  |  |     |  |  |   movea.l d0,a0
    fe90:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
    fe92:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
    fe96:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
    fe9a:	|  |  |  |  |     |  |      move.b (a0),d0
    fe9c:	|  |  |  |  |     |  \----- bne.s fe7c <vsprintf2+0x88>
                    }
                    break;
    fe9e:	|  |  |  |  |  /--|-------- bra.w ff36 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
    fea2:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
    fea6:	|  |  |  |  |  |            movea.l 56(sp),a0
    feaa:	|  |  |  |  |  |            move.l (a0),d0
    feac:	|  |  |  |  |  |            move.l d0,d1
    feae:	|  |  |  |  |  |            subq.l #1,d1
    feb0:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
    feb4:	|  |  |  |  |  |        /-- bra.s fed6 <vsprintf2+0xe2>
                        *s++ = *sval++;
    feb6:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
    feba:	|  |  |  |  |  |     |  |   move.l d1,d2
    febc:	|  |  |  |  |  |     |  |   addq.l #1,d2
    febe:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
    fec2:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
    fec6:	|  |  |  |  |  |     |  |   move.l d0,d2
    fec8:	|  |  |  |  |  |     |  |   addq.l #1,d2
    feca:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
    fece:	|  |  |  |  |  |     |  |   movea.l d1,a0
    fed0:	|  |  |  |  |  |     |  |   move.b (a0),d1
    fed2:	|  |  |  |  |  |     |  |   movea.l d0,a0
    fed4:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
    fed6:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
    feda:	|  |  |  |  |  |     |      move.b (a0),d0
    fedc:	|  |  |  |  |  |     \----- bne.s feb6 <vsprintf2+0xc2>
                    }
                    break;
    fede:	|  |  |  |  |  +----------- bra.s ff36 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
    fee0:	|  |  |  |  \--|----------> addq.l #4,56(sp)
    fee4:	|  |  |  |     |            movea.l 56(sp),a0
    fee8:	|  |  |  |     |            move.l (a0),d0
    feea:	|  |  |  |     |            move.l d0,d1
    feec:	|  |  |  |     |            subq.l #1,d1
    feee:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
    fef2:	|  |  |  |     |            move.l 40(sp),d0
    fef6:	|  |  |  |     |            move.l d0,d2
    fef8:	|  |  |  |     |            addq.l #1,d2
    fefa:	|  |  |  |     |            move.l d2,40(sp)
    fefe:	|  |  |  |     |            move.l 24(sp),d1
    ff02:	|  |  |  |     |            movea.l d0,a0
    ff04:	|  |  |  |     |            move.b d1,(a0)
                    break;
    ff06:	|  |  |  |     +----------- bra.s ff36 <vsprintf2+0x142>
                default:
                    *s++ = *p;
    ff08:	|  |  |  \-----|----------> move.l 40(sp),d0
    ff0c:	|  |  |        |            move.l d0,d1
    ff0e:	|  |  |        |            addq.l #1,d1
    ff10:	|  |  |        |            move.l d1,40(sp)
    ff14:	|  |  |        |            movea.l 36(sp),a0
    ff18:	|  |  |        |            move.b (a0),d1
    ff1a:	|  |  |        |            movea.l d0,a0
    ff1c:	|  |  |        |            move.b d1,(a0)
                    break;
    ff1e:	|  |  |        +----------- bra.s ff36 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
    ff20:	|  |  \--------|----------> move.l 40(sp),d0
    ff24:	|  |           |            move.l d0,d1
    ff26:	|  |           |            addq.l #1,d1
    ff28:	|  |           |            move.l d1,40(sp)
    ff2c:	|  |           |            movea.l 36(sp),a0
    ff30:	|  |           |            move.b (a0),d1
    ff32:	|  |           |            movea.l d0,a0
    ff34:	|  |           |            move.b d1,(a0)
        }
        p++;
    ff36:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
    ff3a:	|  \----------------------> movea.l 36(sp),a0
    ff3e:	|                           move.b (a0),d0
    ff40:	\-------------------------- bne.w fe0a <vsprintf2+0x16>
    }
    *s = '\0';
    ff44:	                            movea.l 40(sp),a0
    ff48:	                            clr.b (a0)
    return s - str;
    ff4a:	                            move.l 40(sp),d0
    ff4e:	                            sub.l 48(sp),d0
}
    ff52:	                            move.l (sp)+,d2
    ff54:	                            lea 40(sp),sp
    ff58:	                            rts

0000ff5a <sprintf>:

int sprintf(char* str, const char* format, ...) {
    ff5a:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
    ff5c:	moveq #16,d0
    ff5e:	add.l sp,d0
    ff60:	move.l d0,d1
    ff62:	addq.l #4,d1
    ff64:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
    ff68:	move.l 16(sp),d0
    ff6c:	move.l 4(sp),-(sp)
    ff70:	move.l d0,-(sp)
    ff72:	move.l 20(sp),-(sp)
    ff76:	jsr fdf4 <vsprintf2>
    ff7c:	lea 12(sp),sp
    ff80:	move.l d0,(sp)
    va_end(args);
    ff82:	clr.l 4(sp)

    return done;
    ff86:	move.l (sp),d0
}
    ff88:	addq.l #8,sp
    ff8a:	rts

0000ff8c <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
    ff8c:	       lea -20(sp),sp
    ff90:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
    ff92:	       moveq #12,d0
    ff94:	       move.l d0,20(sp)
    ff98:	       clr.l 16(sp)
    ff9c:	       move.l 19c4c <SysBase>,d0
    ffa2:	       movea.l d0,a6
    ffa4:	       move.l 20(sp),d0
    ffa8:	       move.l 16(sp),d1
    ffac:	       jsr -684(a6)
    ffb0:	       move.l d0,12(sp)
    ffb4:	       move.l 12(sp),d0
    ffb8:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
    ffbc:	   /-- bne.s ffc2 <addVarToStack+0x36>
    ffbe:	   |   clr.w d0
    ffc0:	/--|-- bra.s 1000a <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
    ffc2:	|  \-> move.l 8(sp),d0
    ffc6:	|      move.l d0,-(sp)
    ffc8:	|      move.l 32(sp),-(sp)
    ffcc:	|      jsr 10aee <copyMain>
    ffd2:	|      addq.l #8,sp
    ffd4:	|      tst.w d0
    ffd6:	|  /-- bne.s fff2 <addVarToStack+0x66>
        FreeVec(newStack);
    ffd8:	|  |   move.l 8(sp),4(sp)
    ffde:	|  |   move.l 19c4c <SysBase>,d0
    ffe4:	|  |   movea.l d0,a6
    ffe6:	|  |   movea.l 4(sp),a1
    ffea:	|  |   jsr -690(a6)
        return FALSE;
    ffee:	|  |   clr.w d0
    fff0:	+--|-- bra.s 1000a <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
    fff2:	|  \-> movea.l 32(sp),a0
    fff6:	|      move.l (a0),d0
    fff8:	|      movea.l 8(sp),a0
    fffc:	|      move.l d0,8(a0)
    *thisStack = newStack;
   10000:	|      movea.l 32(sp),a0
   10004:	|      move.l 8(sp),(a0)
    return TRUE;
   10008:	|      moveq #1,d0
}
   1000a:	\----> movea.l (sp)+,a6
   1000c:	       lea 20(sp),sp
   10010:	       rts

00010012 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   10012:	       lea -16(sp),sp
   10016:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   10018:	       moveq #12,d0
   1001a:	       move.l d0,16(sp)
   1001e:	       clr.l 12(sp)
   10022:	       move.l 19c4c <SysBase>,d0
   10028:	       movea.l d0,a6
   1002a:	       move.l 16(sp),d0
   1002e:	       move.l 12(sp),d1
   10032:	       jsr -684(a6)
   10036:	       move.l d0,8(sp)
   1003a:	       move.l 8(sp),d0
   1003e:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   10042:	   /-- bne.s 10048 <addVarToStackQuick+0x36>
   10044:	   |   clr.w d0
   10046:	/--|-- bra.s 1007e <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   10048:	|  \-> move.l 4(sp),d0
   1004c:	|      pea 8 <_start+0x8>
   10050:	|      move.l 28(sp),-(sp)
   10054:	|      move.l d0,-(sp)
   10056:	|      jsr 12758 <memcpy>
   1005c:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   10060:	|      movea.l 24(sp),a0
   10064:	|      clr.l (a0)

    newStack->next = *thisStack;
   10066:	|      movea.l 28(sp),a0
   1006a:	|      move.l (a0),d0
   1006c:	|      movea.l 4(sp),a0
   10070:	|      move.l d0,8(a0)
    *thisStack = newStack;
   10074:	|      movea.l 28(sp),a0
   10078:	|      move.l 4(sp),(a0)
    return TRUE;
   1007c:	|      moveq #1,d0
}
   1007e:	\----> movea.l (sp)+,a6
   10080:	       lea 16(sp),sp
   10084:	       rts

00010086 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   10086:	       lea -16(sp),sp
   1008a:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   1008c:	       movea.l 24(sp),a0
   10090:	       move.l (a0),d0
   10092:	       moveq #1,d1
   10094:	       cmp.l d0,d1
   10096:	   /-- bne.s 100c0 <addVariablesInSecond+0x3a>
   10098:	   |   movea.l 28(sp),a0
   1009c:	   |   move.l (a0),d0
   1009e:	   |   moveq #1,d1
   100a0:	   |   cmp.l d0,d1
   100a2:	   +-- bne.s 100c0 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   100a4:	   |   movea.l 28(sp),a0
   100a8:	   |   move.l 4(a0),d1
   100ac:	   |   movea.l 24(sp),a0
   100b0:	   |   move.l 4(a0),d0
   100b4:	   |   add.l d1,d0
   100b6:	   |   movea.l 28(sp),a0
   100ba:	   |   move.l d0,4(a0)
   100be:	/--|-- bra.s 1013a <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   100c0:	|  \-> move.l 24(sp),-(sp)
   100c4:	|      jsr 10d26 <getTextFromAnyVar>
   100ca:	|      addq.l #4,sp
   100cc:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   100d0:	|      move.l 28(sp),-(sp)
   100d4:	|      jsr 10d26 <getTextFromAnyVar>
   100da:	|      addq.l #4,sp
   100dc:	|      move.l d0,12(sp)

		unlinkVar(var2);
   100e0:	|      move.l 28(sp),-(sp)
   100e4:	|      jsr 1099e <unlinkVar>
   100ea:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   100ec:	|      move.l 12(sp),-(sp)
   100f0:	|      move.l 20(sp),-(sp)
   100f4:	|      jsr fc7c <joinStrings>
   100fa:	|      addq.l #8,sp
   100fc:	|      movea.l 28(sp),a0
   10100:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   10104:	|      movea.l 28(sp),a0
   10108:	|      moveq #3,d0
   1010a:	|      move.l d0,(a0)
		FreeVec(string1);
   1010c:	|      move.l 16(sp),8(sp)
   10112:	|      move.l 19c4c <SysBase>,d0
   10118:	|      movea.l d0,a6
   1011a:	|      movea.l 8(sp),a1
   1011e:	|      jsr -690(a6)
		FreeVec(string2);
   10122:	|      move.l 12(sp),4(sp)
   10128:	|      move.l 19c4c <SysBase>,d0
   1012e:	|      movea.l d0,a6
   10130:	|      movea.l 4(sp),a1
   10134:	|      jsr -690(a6)
	}
}
   10138:	|      nop
   1013a:	\----> nop
   1013c:	       movea.l (sp)+,a6
   1013e:	       lea 16(sp),sp
   10142:	       rts

00010144 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   10144:	movea.l 8(sp),a0
   10148:	move.l 4(a0),-(sp)
   1014c:	move.l (a0),-(sp)
   1014e:	movea.l 12(sp),a0
   10152:	move.l 4(a0),-(sp)
   10156:	move.l (a0),-(sp)
   10158:	jsr 1017a <compareVars>
   1015e:	lea 16(sp),sp
   10162:	move.l d0,-(sp)
   10164:	pea 1 <_start+0x1>
   10168:	move.l 16(sp),-(sp)
   1016c:	jsr 11042 <setVariable>
   10172:	lea 12(sp),sp
}
   10176:	nop
   10178:	rts

0001017a <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   1017a:	       subq.l #4,sp
	int re = 0;
   1017c:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   1017e:	       move.l 8(sp),d1
   10182:	       move.l 16(sp),d0
   10186:	       cmp.l d1,d0
   10188:	/----- bne.w 10250 <compareVars+0xd6>
		switch (var1.varType) {
   1018c:	|      move.l 8(sp),d0
   10190:	|      moveq #9,d1
   10192:	|      cmp.l d0,d1
   10194:	|  /-- bcs.w 10238 <compareVars+0xbe>
   10198:	|  |   add.l d0,d0
   1019a:	|  |   movea.l d0,a0
   1019c:	|  |   adda.l #65960,a0
   101a2:	|  |   move.w (a0),d0
   101a4:	|  |   jmp (101a8 <compareVars+0x2e>,pc,d0.w)
   101a8:	|  |   ori.b #-112,(a4)
   101ac:	|  |   ori.l #5243024,(a0)
   101b2:	|  |   ori.l #7733392,(a0)
   101b8:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   101be:	|  |   move.l d0,(sp)
			break;
   101c0:	+--|-- bra.w 10250 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   101c4:	|  |   move.l 12(sp),d1
   101c8:	|  |   move.l 20(sp),d0
   101cc:	|  |   cmp.l d1,d0
   101ce:	|  |   seq d0
   101d0:	|  |   neg.b d0
   101d2:	|  |   move.b d0,d0
   101d4:	|  |   andi.l #255,d0
   101da:	|  |   move.l d0,(sp)
			break;
   101dc:	+--|-- bra.s 10250 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   101de:	|  |   move.l 12(sp),d1
   101e2:	|  |   move.l 20(sp),d0
   101e6:	|  |   cmp.l d1,d0
   101e8:	|  |   seq d0
   101ea:	|  |   neg.b d0
   101ec:	|  |   move.b d0,d0
   101ee:	|  |   andi.l #255,d0
   101f4:	|  |   move.l d0,(sp)
			break;
   101f6:	+--|-- bra.s 10250 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   101f8:	|  |   move.l 20(sp),d1
   101fc:	|  |   move.l 12(sp),d0
   10200:	|  |   move.l d1,-(sp)
   10202:	|  |   move.l d0,-(sp)
   10204:	|  |   jsr fbfc <strcmp>
   1020a:	|  |   addq.l #8,sp
   1020c:	|  |   tst.l d0
   1020e:	|  |   seq d0
   10210:	|  |   neg.b d0
   10212:	|  |   move.b d0,d0
   10214:	|  |   andi.l #255,d0
   1021a:	|  |   move.l d0,(sp)
			break;
   1021c:	+--|-- bra.s 10250 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   1021e:	|  |   move.l 12(sp),d1
   10222:	|  |   move.l 20(sp),d0
   10226:	|  |   cmp.l d1,d0
   10228:	|  |   seq d0
   1022a:	|  |   neg.b d0
   1022c:	|  |   move.b d0,d0
   1022e:	|  |   andi.l #255,d0
   10234:	|  |   move.l d0,(sp)
			break;
   10236:	+--|-- bra.s 10250 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   10238:	|  \-> move.l 12(sp),d1
   1023c:	|      move.l 20(sp),d0
   10240:	|      cmp.l d1,d0
   10242:	|      seq d0
   10244:	|      neg.b d0
   10246:	|      move.b d0,d0
   10248:	|      andi.l #255,d0
   1024e:	|      move.l d0,(sp)
		}
	}
	return re;
   10250:	\----> move.l (sp),d0
}
   10252:	       addq.l #4,sp
   10254:	       rts

00010256 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   10256:	             lea -16(sp),sp
   1025a:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   1025c:	             movea.l 28(sp),a0
   10260:	             moveq #6,d0
   10262:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   10264:	             moveq #12,d0
   10266:	             move.l d0,12(sp)
   1026a:	             clr.l 8(sp)
   1026e:	             move.l 19c4c <SysBase>,d0
   10274:	             movea.l d0,a6
   10276:	             move.l 12(sp),d0
   1027a:	             move.l 8(sp),d1
   1027e:	             jsr -684(a6)
   10282:	             move.l d0,4(sp)
   10286:	             move.l 4(sp),d0
   1028a:	             movea.l 28(sp),a0
   1028e:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   10292:	             movea.l 28(sp),a0
   10296:	             move.l 4(a0),d0
   1029a:	         /-- bne.s 102a2 <copyStack+0x4c>
   1029c:	         |   clr.w d0
   1029e:	/--------|-- bra.w 10324 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   102a2:	|        \-> movea.l 28(sp),a0
   102a6:	|            movea.l 4(a0),a0
   102aa:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   102ac:	|            movea.l 28(sp),a0
   102b0:	|            movea.l 4(a0),a0
   102b4:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   102b8:	|            movea.l 28(sp),a0
   102bc:	|            movea.l 4(a0),a0
   102c0:	|            moveq #1,d0
   102c2:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   102c6:	|            movea.l 24(sp),a0
   102ca:	|            movea.l 4(a0),a0
   102ce:	|            move.l (a0),16(sp)

	while (a) {
   102d2:	|     /----- bra.s 1031c <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   102d4:	|  /--|----> movea.l 28(sp),a0
   102d8:	|  |  |      move.l 4(a0),d0
   102dc:	|  |  |      move.l d0,d1
   102de:	|  |  |      move.l 16(sp),d0
   102e2:	|  |  |      move.l d1,-(sp)
   102e4:	|  |  |      move.l d0,-(sp)
   102e6:	|  |  |      jsr ff8c <addVarToStack>
   102ec:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   102ee:	|  |  |      movea.l 28(sp),a0
   102f2:	|  |  |      movea.l 4(a0),a0
   102f6:	|  |  |      move.l 4(a0),d0
   102fa:	|  |  |  /-- bne.s 10312 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   102fc:	|  |  |  |   movea.l 28(sp),a0
   10300:	|  |  |  |   movea.l 4(a0),a1
   10304:	|  |  |  |   movea.l 28(sp),a0
   10308:	|  |  |  |   movea.l 4(a0),a0
   1030c:	|  |  |  |   move.l (a1),d0
   1030e:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   10312:	|  |  |  \-> movea.l 16(sp),a0
   10316:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   1031c:	|  |  \----> tst.l 16(sp)
   10320:	|  \-------- bne.s 102d4 <copyStack+0x7e>
	}

	return TRUE;
   10322:	|            moveq #1,d0
}
   10324:	\----------> movea.l (sp)+,a6
   10326:	             lea 16(sp),sp
   1032a:	             rts

0001032c <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   1032c:	                lea -20(sp),sp
   10330:	                move.l a6,-(sp)
   10332:	                move.l 36(sp),d0
   10336:	                move.w d0,d0
   10338:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   1033c:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   10342:	                clr.l 16(sp)

    while (*huntVar) {
   10346:	   /----------- bra.s 103c4 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   10348:	/--|----------> movea.l 20(sp),a0
   1034c:	|  |            movea.l (a0),a0
   1034e:	|  |            movea.l 28(sp),a1
   10352:	|  |            move.l 4(a1),-(sp)
   10356:	|  |            move.l (a1),-(sp)
   10358:	|  |            move.l 4(a0),-(sp)
   1035c:	|  |            move.l (a0),-(sp)
   1035e:	|  |            jsr 1017a <compareVars>
   10364:	|  |            lea 16(sp),sp
   10368:	|  |            tst.l d0
   1036a:	|  |  /-------- beq.s 103b6 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   1036c:	|  |  |         movea.l 20(sp),a0
   10370:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   10374:	|  |  |         movea.l 12(sp),a0
   10378:	|  |  |         move.l 8(a0),d0
   1037c:	|  |  |         movea.l 20(sp),a0
   10380:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   10382:	|  |  |         move.l 12(sp),d0
   10386:	|  |  |         move.l d0,-(sp)
   10388:	|  |  |         jsr 1099e <unlinkVar>
   1038e:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   10390:	|  |  |         move.l 12(sp),8(sp)
   10396:	|  |  |         move.l 19c4c <SysBase>,d0
   1039c:	|  |  |         movea.l d0,a6
   1039e:	|  |  |         movea.l 8(sp),a1
   103a2:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   103a6:	|  |  |         tst.w 6(sp)
   103aa:	|  |  |     /-- bne.s 103b0 <deleteVarFromStack+0x84>
   103ac:	|  |  |     |   moveq #1,d0
   103ae:	|  |  |  /--|-- bra.s 103d2 <deleteVarFromStack+0xa6>
            reply++;
   103b0:	|  |  |  |  \-> addq.l #1,16(sp)
   103b4:	|  +--|--|----- bra.s 103c4 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   103b6:	|  |  \--|----> movea.l 20(sp),a0
   103ba:	|  |     |      move.l (a0),d0
   103bc:	|  |     |      move.l d0,d1
   103be:	|  |     |      addq.l #8,d1
   103c0:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   103c4:	|  \-----|----> movea.l 20(sp),a0
   103c8:	|        |      move.l (a0),d0
   103ca:	\--------|----- bne.w 10348 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   103ce:	         |      move.l 16(sp),d0
}
   103d2:	         \----> movea.l (sp)+,a6
   103d4:	                lea 20(sp),sp
   103d8:	                rts

000103da <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   103da:	       movea.l 4(sp),a0
   103de:	       move.l 4(a0),d0
   103e2:	       cmp.l 8(sp),d0
   103e6:	   /-- bhi.s 103ec <fastArrayGetByIndex+0x12>
   103e8:	   |   moveq #0,d0
   103ea:	/--|-- bra.s 103fa <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   103ec:	|  \-> movea.l 4(sp),a0
   103f0:	|      move.l (a0),d1
   103f2:	|      move.l 8(sp),d0
   103f6:	|      lsl.l #3,d0
   103f8:	|      add.l d1,d0
}
   103fa:	\----> rts

000103fc <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   103fc:	                lea -32(sp),sp
   10400:	                move.l a6,-(sp)
   10402:	                move.l a2,-(sp)
    struct persona *p = NULL;
   10404:	                clr.l 36(sp)

    switch (thisVar->varType) {
   10408:	                movea.l 44(sp),a0
   1040c:	                move.l (a0),d0
   1040e:	                moveq #8,d1
   10410:	                cmp.l d0,d1
   10412:	            /-- beq.s 10420 <getCostumeFromVar+0x24>
   10414:	            |   moveq #9,d1
   10416:	            |   cmp.l d0,d1
   10418:	   /--------|-- beq.w 104ce <getCostumeFromVar+0xd2>
   1041c:	/--|--------|-- bra.w 104d8 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   10420:	|  |        \-> moveq #8,d0
   10422:	|  |            move.l d0,28(sp)
   10426:	|  |            clr.l 24(sp)
   1042a:	|  |            move.l 19c4c <SysBase>,d0
   10430:	|  |            movea.l d0,a6
   10432:	|  |            move.l 28(sp),d0
   10436:	|  |            move.l 24(sp),d1
   1043a:	|  |            jsr -684(a6)
   1043e:	|  |            move.l d0,20(sp)
   10442:	|  |            move.l 20(sp),d0
   10446:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   1044a:	|  |        /-- bne.s 10452 <getCostumeFromVar+0x56>
   1044c:	|  |        |   moveq #0,d0
   1044e:	|  |  /-----|-- bra.w 10502 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   10452:	|  |  |     \-> movea.l 36(sp),a0
   10456:	|  |  |         moveq #1,d1
   10458:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   1045c:	|  |  |         moveq #12,d0
   1045e:	|  |  |         move.l d0,16(sp)
   10462:	|  |  |         clr.l 12(sp)
   10466:	|  |  |         move.l 19c4c <SysBase>,d0
   1046c:	|  |  |         movea.l d0,a6
   1046e:	|  |  |         move.l 16(sp),d0
   10472:	|  |  |         move.l 12(sp),d1
   10476:	|  |  |         jsr -684(a6)
   1047a:	|  |  |         move.l d0,8(sp)
   1047e:	|  |  |         move.l 8(sp),d0
   10482:	|  |  |         movea.l 36(sp),a0
   10486:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   10488:	|  |  |         movea.l 36(sp),a0
   1048c:	|  |  |         move.l (a0),d0
   1048e:	|  |  |     /-- bne.s 10494 <getCostumeFromVar+0x98>
   10490:	|  |  |     |   moveq #0,d0
   10492:	|  |  +-----|-- bra.s 10502 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   10494:	|  |  |     \-> clr.l 32(sp)
   10498:	|  |  |     /-- bra.s 104c4 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   1049a:	|  |  |  /--|-> movea.l 44(sp),a0
   1049e:	|  |  |  |  |   move.l 4(a0),d0
   104a2:	|  |  |  |  |   movea.l 36(sp),a0
   104a6:	|  |  |  |  |   movea.l (a0),a0
   104a8:	|  |  |  |  |   move.l 32(sp),d1
   104ac:	|  |  |  |  |   add.l d1,d1
   104ae:	|  |  |  |  |   add.l d1,d1
   104b0:	|  |  |  |  |   lea (0,a0,d1.l),a2
   104b4:	|  |  |  |  |   move.l d0,-(sp)
   104b6:	|  |  |  |  |   jsr 5ece <copyAnim>
   104bc:	|  |  |  |  |   addq.l #4,sp
   104be:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   104c0:	|  |  |  |  |   addq.l #1,32(sp)
   104c4:	|  |  |  |  \-> moveq #2,d1
   104c6:	|  |  |  |      cmp.l 32(sp),d1
   104ca:	|  |  |  \----- bge.s 1049a <getCostumeFromVar+0x9e>
            }
            break;
   104cc:	|  |  |     /-- bra.s 104fe <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   104ce:	|  \--|-----|-> movea.l 44(sp),a0
   104d2:	|     |     |   move.l 4(a0),d0
   104d6:	|     +-----|-- bra.s 10502 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   104d8:	\-----|-----|-> movea.l 44(sp),a0
   104dc:	      |     |   move.l (a0),d0
   104de:	      |     |   add.l d0,d0
   104e0:	      |     |   movea.l d0,a1
   104e2:	      |     |   adda.l d0,a1
   104e4:	      |     |   lea 18688 <typeName>,a0
   104ea:	      |     |   move.l (0,a1,a0.l),d0
   104ee:	      |     |   move.l d0,-(sp)
   104f0:	      |     |   pea 16506 <main_sludge.c.2f5c5368+0xc1c>
   104f6:	      |     |   jsr 127a4 <KPrintF>
   104fc:	      |     |   addq.l #8,sp
    }

    return p;
   104fe:	      |     \-> move.l 36(sp),d0
}
   10502:	      \-------> movea.l (sp)+,a2
   10504:	                movea.l (sp)+,a6
   10506:	                lea 32(sp),sp
   1050a:	                rts

0001050c <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   1050c:	                lea -96(sp),sp
   10510:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   10514:	                move.l 116(sp),-(sp)
   10518:	                pea 1653e <main_sludge.c.2f5c5368+0xc54>
   1051e:	                jsr fc7c <joinStrings>
   10524:	                addq.l #8,sp
   10526:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   1052a:	            /-- bne.s 10532 <getSavedGamesStack+0x26>
   1052c:	            |   clr.w d0
   1052e:	/-----------|-- bra.w 10746 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   10532:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   10536:	|               move.l #91456,98(sp)
   1053e:	|               moveq #-2,d0
   10540:	|               move.l d0,94(sp)
   10544:	|               move.l 19c54 <DOSBase>,d0
   1054a:	|               movea.l d0,a6
   1054c:	|               move.l 98(sp),d1
   10550:	|               move.l 94(sp),d2
   10554:	|               jsr -84(a6)
   10558:	|               move.l d0,90(sp)
   1055c:	|               move.l 90(sp),d0
   10560:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   10564:	|           /-- bne.s 1056c <getSavedGamesStack+0x60>
   10566:	|           |   clr.w d0
   10568:	+-----------|-- bra.w 10746 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   1056c:	|           \-> move.l #260,82(sp)
   10574:	|               move.l #65536,78(sp)
   1057c:	|               move.l 19c4c <SysBase>,d0
   10582:	|               movea.l d0,a6
   10584:	|               move.l 82(sp),d0
   10588:	|               move.l 78(sp),d1
   1058c:	|               jsr -684(a6)
   10590:	|               move.l d0,74(sp)
   10594:	|               move.l 74(sp),d0
   10598:	|               move.l d0,70(sp)
	if (!fib) {
   1059c:	|           /-- bne.s 105ba <getSavedGamesStack+0xae>
		UnLock(dirLock);
   1059e:	|           |   move.l 86(sp),22(sp)
   105a4:	|           |   move.l 19c54 <DOSBase>,d0
   105aa:	|           |   movea.l d0,a6
   105ac:	|           |   move.l 22(sp),d1
   105b0:	|           |   jsr -90(a6)
		return FALSE;
   105b4:	|           |   clr.w d0
   105b6:	+-----------|-- bra.w 10746 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   105ba:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   105be:	|               move.l 86(sp),66(sp)
   105c4:	|               move.l 70(sp),62(sp)
   105ca:	|               move.l 19c54 <DOSBase>,d0
   105d0:	|               movea.l d0,a6
   105d2:	|               move.l 66(sp),d1
   105d6:	|               move.l 62(sp),d2
   105da:	|               jsr -102(a6)
   105de:	|               move.l d0,58(sp)
   105e2:	|               move.l 58(sp),d0
   105e6:	|  /----------- beq.w 106fa <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   105ea:	|  |        /-- bra.w 106c6 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   105ee:	|  |  /-----|-> move.l 70(sp),d2
   105f2:	|  |  |     |   addq.l #8,d2
   105f4:	|  |  |     |   move.l 70(sp),d0
   105f8:	|  |  |     |   addq.l #8,d0
   105fa:	|  |  |     |   move.l d0,-(sp)
   105fc:	|  |  |     |   jsr fc3c <strlen>
   10602:	|  |  |     |   addq.l #4,sp
   10604:	|  |  |     |   move.l d0,d3
   10606:	|  |  |     |   move.l 116(sp),-(sp)
   1060a:	|  |  |     |   jsr fc3c <strlen>
   10610:	|  |  |     |   addq.l #4,sp
   10612:	|  |  |     |   move.l d3,d1
   10614:	|  |  |     |   sub.l d0,d1
   10616:	|  |  |     |   move.l d2,d0
   10618:	|  |  |     |   add.l d1,d0
   1061a:	|  |  |     |   move.l 116(sp),-(sp)
   1061e:	|  |  |     |   move.l d0,-(sp)
   10620:	|  |  |     |   jsr fbfc <strcmp>
   10626:	|  |  |     |   addq.l #8,sp
   10628:	|  |  |     |   tst.l d0
   1062a:	|  |  |     +-- bne.w 106c6 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   1062e:	|  |  |     |   move.l 70(sp),d0
   10632:	|  |  |     |   addq.l #8,d0
   10634:	|  |  |     |   move.l d0,-(sp)
   10636:	|  |  |     |   jsr fc3c <strlen>
   1063c:	|  |  |     |   addq.l #4,sp
   1063e:	|  |  |     |   move.l d0,d2
   10640:	|  |  |     |   move.l 116(sp),-(sp)
   10644:	|  |  |     |   jsr fc3c <strlen>
   1064a:	|  |  |     |   addq.l #4,sp
   1064c:	|  |  |     |   move.l d0,d1
   1064e:	|  |  |     |   move.l d2,d0
   10650:	|  |  |     |   sub.l d1,d0
   10652:	|  |  |     |   movea.l 70(sp),a0
   10656:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   1065a:	|  |  |     |   move.l 70(sp),d0
   1065e:	|  |  |     |   addq.l #8,d0
   10660:	|  |  |     |   move.l d0,-(sp)
   10662:	|  |  |     |   jsr 118 <decodeFilename>
   10668:	|  |  |     |   addq.l #4,sp
   1066a:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   1066e:	|  |  |     |   move.l 42(sp),-(sp)
   10672:	|  |  |     |   lea 18(sp),a0
   10676:	|  |  |     |   move.l a0,-(sp)
   10678:	|  |  |     |   jsr 10972 <makeTextVar>
   1067e:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   10680:	|  |  |     |   move.l 42(sp),38(sp)
   10686:	|  |  |     |   move.l 19c4c <SysBase>,d0
   1068c:	|  |  |     |   movea.l d0,a6
   1068e:	|  |  |     |   movea.l 38(sp),a1
   10692:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   10696:	|  |  |     |   move.l 112(sp),d0
   1069a:	|  |  |     |   move.l d0,-(sp)
   1069c:	|  |  |     |   lea 18(sp),a0
   106a0:	|  |  |     |   move.l a0,-(sp)
   106a2:	|  |  |     |   jsr ff8c <addVarToStack>
   106a8:	|  |  |     |   addq.l #8,sp
   106aa:	|  |  |     |   tst.w d0
   106ac:	|  |  |  /--|-- beq.s 106fe <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   106ae:	|  |  |  |  |   movea.l 112(sp),a0
   106b2:	|  |  |  |  |   move.l 4(a0),d0
   106b6:	|  |  |  |  +-- bne.s 106c6 <getSavedGamesStack+0x1ba>
   106b8:	|  |  |  |  |   movea.l 112(sp),a0
   106bc:	|  |  |  |  |   move.l (a0),d0
   106be:	|  |  |  |  |   movea.l 112(sp),a0
   106c2:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   106c6:	|  |  |  |  \-> move.l 86(sp),54(sp)
   106cc:	|  |  |  |      move.l 70(sp),50(sp)
   106d2:	|  |  |  |      move.l 19c54 <DOSBase>,d0
   106d8:	|  |  |  |      movea.l d0,a6
   106da:	|  |  |  |      move.l 54(sp),d1
   106de:	|  |  |  |      move.l 50(sp),d2
   106e2:	|  |  |  |      jsr -108(a6)
   106e6:	|  |  |  |      move.l d0,46(sp)
   106ea:	|  |  |  |      move.l 46(sp),d0
   106ee:	|  |  \--|----- bne.w 105ee <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   106f2:	|  |     |      move.w #1,106(sp)
   106f8:	|  |     |  /-- bra.s 10700 <getSavedGamesStack+0x1f4>
	}

cleanup:
   106fa:	|  \-----|--|-> nop
   106fc:	|        |  +-- bra.s 10700 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   106fe:	|        \--|-> nop
	FreeVec(fib);
   10700:	|           \-> move.l 70(sp),34(sp)
   10706:	|               move.l 19c4c <SysBase>,d0
   1070c:	|               movea.l d0,a6
   1070e:	|               movea.l 34(sp),a1
   10712:	|               jsr -690(a6)
	UnLock(dirLock);
   10716:	|               move.l 86(sp),30(sp)
   1071c:	|               move.l 19c54 <DOSBase>,d0
   10722:	|               movea.l d0,a6
   10724:	|               move.l 30(sp),d1
   10728:	|               jsr -90(a6)
	FreeVec(pattern);
   1072c:	|               move.l 102(sp),26(sp)
   10732:	|               move.l 19c4c <SysBase>,d0
   10738:	|               movea.l d0,a6
   1073a:	|               movea.l 26(sp),a1
   1073e:	|               jsr -690(a6)
	return result;
   10742:	|               move.w 106(sp),d0
}
   10746:	\-------------> movem.l (sp)+,d2-d3/a6
   1074a:	                lea 96(sp),sp
   1074e:	                rts

00010750 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   10750:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   10752:	       movea.l 20(sp),a0
   10756:	       move.l (a0),d0
   10758:	       cmp.l 16(sp),d0
   1075c:	/----- beq.s 107c0 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   1075e:	|      move.l 16(sp),d0
   10762:	|      add.l d0,d0
   10764:	|      movea.l d0,a1
   10766:	|      adda.l d0,a1
   10768:	|      lea 18688 <typeName>,a0
   1076e:	|      move.l (0,a1,a0.l),d0
   10772:	|      move.l d0,-(sp)
   10774:	|      pea 16542 <main_sludge.c.2f5c5368+0xc58>
   1077a:	|      jsr fc7c <joinStrings>
   10780:	|      addq.l #8,sp
   10782:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   10786:	|      movea.l 20(sp),a0
   1078a:	|      move.l (a0),d0
   1078c:	|      add.l d0,d0
   1078e:	|      movea.l d0,a1
   10790:	|      adda.l d0,a1
   10792:	|      lea 18688 <typeName>,a0
   10798:	|      move.l (0,a1,a0.l),d0
   1079c:	|      move.l d0,-(sp)
   1079e:	|      pea 16584 <main_sludge.c.2f5c5368+0xc9a>
   107a4:	|      jsr fc7c <joinStrings>
   107aa:	|      addq.l #8,sp
   107ac:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   107ae:	|      move.l (sp),-(sp)
   107b0:	|      move.l 8(sp),-(sp)
   107b4:	|      jsr 127a4 <KPrintF>
   107ba:	|      addq.l #8,sp

		return FALSE;
   107bc:	|      clr.w d0
   107be:	|  /-- bra.s 107d0 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   107c0:	\--|-> movea.l 20(sp),a0
   107c4:	   |   move.l 4(a0),d0
   107c8:	   |   movea.l 12(sp),a0
   107cc:	   |   move.l d0,(a0)
	return TRUE;
   107ce:	   |   moveq #1,d0
}
   107d0:	   \-> addq.l #8,sp
   107d2:	       rts

000107d4 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   107d4:	move.l 8(sp),-(sp)
   107d8:	jsr 411e <getNumberedString>
   107de:	addq.l #4,sp
   107e0:	move.l d0,-(sp)
   107e2:	move.l 8(sp),-(sp)
   107e6:	jsr 10972 <makeTextVar>
   107ec:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   107ee:	movea.l 4(sp),a0
   107f2:	move.l 4(a0),d0
   107f6:	sne d0
   107f8:	neg.b d0
   107fa:	move.b d0,d0
   107fc:	andi.w #255,d0
}
   10800:	rts

00010802 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   10802:	          subq.l #8,sp
    int size = stackSize(stacky);
   10804:	          move.l 16(sp),-(sp)
   10808:	          jsr 110b0 <stackSize>
   1080e:	          addq.l #4,sp
   10810:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   10814:	          move.l 4(sp),-(sp)
   10818:	          move.l 16(sp),-(sp)
   1081c:	          jsr 1086c <makeFastArraySize>
   10822:	          addq.l #8,sp
   10824:	          tst.w d0
   10826:	      /-- bne.s 1082c <makeFastArrayFromStack+0x2a>
   10828:	      |   clr.w d0
   1082a:	/-----|-- bra.s 10868 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   1082c:	|     \-> movea.l 16(sp),a0
   10830:	|         move.l (a0),(sp)
    size = 0;
   10832:	|         clr.l 4(sp)
    while (allV) {
   10836:	|     /-- bra.s 10862 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   10838:	|  /--|-> movea.l 12(sp),a0
   1083c:	|  |  |   movea.l 4(a0),a0
   10840:	|  |  |   move.l (a0),d1
   10842:	|  |  |   move.l 4(sp),d0
   10846:	|  |  |   lsl.l #3,d0
   10848:	|  |  |   add.l d0,d1
   1084a:	|  |  |   move.l (sp),d0
   1084c:	|  |  |   move.l d1,-(sp)
   1084e:	|  |  |   move.l d0,-(sp)
   10850:	|  |  |   jsr 10aee <copyMain>
   10856:	|  |  |   addq.l #8,sp
        size++;
   10858:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   1085c:	|  |  |   movea.l (sp),a0
   1085e:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   10862:	|  |  \-> tst.l (sp)
   10864:	|  \----- bne.s 10838 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   10866:	|         moveq #1,d0
}
   10868:	\-------> addq.l #8,sp
   1086a:	          rts

0001086c <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   1086c:	          lea -28(sp),sp
   10870:	          move.l a6,-(sp)
    if (size < 0) {
   10872:	          tst.l 40(sp)
   10876:	      /-- bge.s 1088c <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   10878:	      |   pea 165c9 <main_sludge.c.2f5c5368+0xcdf>
   1087e:	      |   jsr 127a4 <KPrintF>
   10884:	      |   addq.l #4,sp
		return FALSE;
   10886:	      |   clr.w d0
   10888:	/-----|-- bra.w 1096a <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   1088c:	|     \-> move.l 36(sp),-(sp)
   10890:	|         jsr 1099e <unlinkVar>
   10896:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   10898:	|         movea.l 36(sp),a0
   1089c:	|         moveq #10,d0
   1089e:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   108a0:	|         moveq #12,d0
   108a2:	|         move.l d0,24(sp)
   108a6:	|         clr.l 20(sp)
   108aa:	|         move.l 19c4c <SysBase>,d0
   108b0:	|         movea.l d0,a6
   108b2:	|         move.l 24(sp),d0
   108b6:	|         move.l 20(sp),d1
   108ba:	|         jsr -684(a6)
   108be:	|         move.l d0,16(sp)
   108c2:	|         move.l 16(sp),d0
   108c6:	|         movea.l 36(sp),a0
   108ca:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   108ce:	|         movea.l 36(sp),a0
   108d2:	|         move.l 4(a0),d0
   108d6:	|     /-- bne.s 108de <makeFastArraySize+0x72>
   108d8:	|     |   clr.w d0
   108da:	+-----|-- bra.w 1096a <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   108de:	|     \-> move.l 40(sp),d0
   108e2:	|         lsl.l #3,d0
   108e4:	|         move.l d0,12(sp)
   108e8:	|         clr.l 8(sp)
   108ec:	|         move.l 19c4c <SysBase>,d0
   108f2:	|         movea.l d0,a6
   108f4:	|         move.l 12(sp),d0
   108f8:	|         move.l 8(sp),d1
   108fc:	|         jsr -684(a6)
   10900:	|         move.l d0,4(sp)
   10904:	|         move.l 4(sp),d0
   10908:	|         movea.l 36(sp),a0
   1090c:	|         movea.l 4(a0),a0
   10910:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   10912:	|         movea.l 36(sp),a0
   10916:	|         movea.l 4(a0),a0
   1091a:	|         move.l (a0),d0
   1091c:	|     /-- bne.s 10922 <makeFastArraySize+0xb6>
   1091e:	|     |   clr.w d0
   10920:	+-----|-- bra.s 1096a <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   10922:	|     \-> clr.l 28(sp)
   10926:	|     /-- bra.s 10942 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   10928:	|  /--|-> movea.l 36(sp),a0
   1092c:	|  |  |   movea.l 4(a0),a0
   10930:	|  |  |   move.l (a0),d1
   10932:	|  |  |   move.l 28(sp),d0
   10936:	|  |  |   lsl.l #3,d0
   10938:	|  |  |   movea.l d1,a0
   1093a:	|  |  |   adda.l d0,a0
   1093c:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   1093e:	|  |  |   addq.l #1,28(sp)
   10942:	|  |  \-> move.l 28(sp),d0
   10946:	|  |      cmp.l 40(sp),d0
   1094a:	|  \----- blt.s 10928 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   1094c:	|         movea.l 36(sp),a0
   10950:	|         movea.l 4(a0),a0
   10954:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   1095a:	|         movea.l 36(sp),a0
   1095e:	|         movea.l 4(a0),a0
   10962:	|         moveq #1,d0
   10964:	|         move.l d0,8(a0)
    return TRUE;
   10968:	|         moveq #1,d0
}
   1096a:	\-------> movea.l (sp)+,a6
   1096c:	          lea 28(sp),sp
   10970:	          rts

00010972 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   10972:	move.l 4(sp),-(sp)
   10976:	jsr 1099e <unlinkVar>
   1097c:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   1097e:	movea.l 4(sp),a0
   10982:	moveq #3,d0
   10984:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   10986:	move.l 8(sp),-(sp)
   1098a:	jsr b8 <copyString>
   10990:	addq.l #4,sp
   10992:	movea.l 4(sp),a0
   10996:	move.l d0,4(a0)
}
   1099a:	nop
   1099c:	rts

0001099e <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   1099e:	                      lea -16(sp),sp
   109a2:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   109a4:	                      movea.l 24(sp),a0
   109a8:	                      move.l (a0),d0
   109aa:	                      moveq #10,d1
   109ac:	                      cmp.l d0,d1
   109ae:	            /-------- beq.w 10a66 <unlinkVar+0xc8>
   109b2:	            |         moveq #10,d1
   109b4:	            |         cmp.l d0,d1
   109b6:	/-----------|-------- bcs.w 10ada <unlinkVar+0x13c>
   109ba:	|           |         moveq #8,d1
   109bc:	|           |         cmp.l d0,d1
   109be:	|  /--------|-------- beq.w 10ac6 <unlinkVar+0x128>
   109c2:	|  |        |         moveq #8,d1
   109c4:	|  |        |         cmp.l d0,d1
   109c6:	+--|--------|-------- bcs.w 10ada <unlinkVar+0x13c>
   109ca:	|  |        |         moveq #3,d1
   109cc:	|  |        |         cmp.l d0,d1
   109ce:	|  |        |     /-- beq.s 109da <unlinkVar+0x3c>
   109d0:	|  |        |     |   moveq #6,d1
   109d2:	|  |        |     |   cmp.l d0,d1
   109d4:	|  |        |  /--|-- beq.s 10a00 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   109d6:	+--|--------|--|--|-- bra.w 10ada <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   109da:	|  |        |  |  \-> movea.l 24(sp),a0
   109de:	|  |        |  |      move.l 4(a0),4(sp)
   109e4:	|  |        |  |      move.l 19c4c <SysBase>,d0
   109ea:	|  |        |  |      movea.l d0,a6
   109ec:	|  |        |  |      movea.l 4(sp),a1
   109f0:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   109f4:	|  |        |  |      movea.l 24(sp),a0
   109f8:	|  |        |  |      clr.l 4(a0)
		break;
   109fc:	|  |  /-----|--|----- bra.w 10ae4 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   10a00:	|  |  |     |  \----> movea.l 24(sp),a0
   10a04:	|  |  |     |         movea.l 4(a0),a0
   10a08:	|  |  |     |         move.l 8(a0),d0
   10a0c:	|  |  |     |         subq.l #1,d0
   10a0e:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   10a12:	|  |  |     |         movea.l 24(sp),a0
   10a16:	|  |  |     |         movea.l 4(a0),a0
   10a1a:	|  |  |     |         move.l 8(a0),d0
   10a1e:	|  |  |  /--|-------- bgt.w 10ade <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   10a22:	|  |  |  |  |     /-- bra.s 10a36 <unlinkVar+0x98>
   10a24:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   10a28:	|  |  |  |  |  |  |   move.l 4(a0),d0
   10a2c:	|  |  |  |  |  |  |   move.l d0,-(sp)
   10a2e:	|  |  |  |  |  |  |   jsr 110d4 <trimStack>
   10a34:	|  |  |  |  |  |  |   addq.l #4,sp
   10a36:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   10a3a:	|  |  |  |  |  |      movea.l 4(a0),a0
   10a3e:	|  |  |  |  |  |      move.l (a0),d0
   10a40:	|  |  |  |  |  \----- bne.s 10a24 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   10a42:	|  |  |  |  |         movea.l 24(sp),a0
   10a46:	|  |  |  |  |         move.l 4(a0),8(sp)
   10a4c:	|  |  |  |  |         move.l 19c4c <SysBase>,d0
   10a52:	|  |  |  |  |         movea.l d0,a6
   10a54:	|  |  |  |  |         movea.l 8(sp),a1
   10a58:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   10a5c:	|  |  |  |  |         movea.l 24(sp),a0
   10a60:	|  |  |  |  |         clr.l 4(a0)
		break;
   10a64:	|  |  |  +--|-------- bra.s 10ade <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   10a66:	|  |  |  |  \-------> movea.l 24(sp),a0
   10a6a:	|  |  |  |            movea.l 4(a0),a0
   10a6e:	|  |  |  |            move.l 8(a0),d0
   10a72:	|  |  |  |            subq.l #1,d0
   10a74:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   10a78:	|  |  |  |            movea.l 24(sp),a0
   10a7c:	|  |  |  |            movea.l 4(a0),a0
   10a80:	|  |  |  |            move.l 8(a0),d0
   10a84:	|  |  |  |        /-- bgt.s 10ae2 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   10a86:	|  |  |  |        |   movea.l 24(sp),a0
   10a8a:	|  |  |  |        |   movea.l 4(a0),a0
   10a8e:	|  |  |  |        |   move.l (a0),16(sp)
   10a92:	|  |  |  |        |   move.l 19c4c <SysBase>,d0
   10a98:	|  |  |  |        |   movea.l d0,a6
   10a9a:	|  |  |  |        |   movea.l 16(sp),a1
   10a9e:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   10aa2:	|  |  |  |        |   movea.l 24(sp),a0
   10aa6:	|  |  |  |        |   move.l 4(a0),12(sp)
   10aac:	|  |  |  |        |   move.l 19c4c <SysBase>,d0
   10ab2:	|  |  |  |        |   movea.l d0,a6
   10ab4:	|  |  |  |        |   movea.l 12(sp),a1
   10ab8:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   10abc:	|  |  |  |        |   movea.l 24(sp),a0
   10ac0:	|  |  |  |        |   clr.l 4(a0)
		break;
   10ac4:	|  |  |  |        +-- bra.s 10ae2 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   10ac6:	|  \--|--|--------|-> movea.l 24(sp),a0
   10aca:	|     |  |        |   move.l 4(a0),d0
   10ace:	|     |  |        |   move.l d0,-(sp)
   10ad0:	|     |  |        |   jsr 628a <deleteAnim>
   10ad6:	|     |  |        |   addq.l #4,sp
		break;
   10ad8:	|     +--|--------|-- bra.s 10ae4 <unlinkVar+0x146>
		break;
   10ada:	\-----|--|--------|-> nop
   10adc:	      +--|--------|-- bra.s 10ae4 <unlinkVar+0x146>
		break;
   10ade:	      |  \--------|-> nop
   10ae0:	      +-----------|-- bra.s 10ae4 <unlinkVar+0x146>
		break;
   10ae2:	      |           \-> nop
	}
}
   10ae4:	      \-------------> nop
   10ae6:	                      movea.l (sp)+,a6
   10ae8:	                      lea 16(sp),sp
   10aec:	                      rts

00010aee <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   10aee:	       movea.l 4(sp),a0
   10af2:	       move.l (a0),d0
   10af4:	       movea.l 8(sp),a0
   10af8:	       move.l d0,(a0)
	switch (to->varType) {
   10afa:	       movea.l 8(sp),a0
   10afe:	       move.l (a0),d0
   10b00:	       moveq #10,d1
   10b02:	       cmp.l d0,d1
   10b04:	/----- bcs.w 10bf6 <copyMain+0x108>
   10b08:	|      add.l d0,d0
   10b0a:	|      movea.l d0,a0
   10b0c:	|      adda.l #68376,a0
   10b12:	|      move.w (a0),d0
   10b14:	|      jmp (10b18 <copyMain+0x2a>,pc,d0.w)
   10b18:	|      .short 0x00da
   10b1a:	|      ori.b #22,(a6)
   10b1e:	|      ori.w #22,(a4)
   10b22:	|      ori.b #-126,(a6)
   10b26:	|      ori.b #-68,(a6)
   10b2a:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   10b32:	|      move.l 4(a0),d0
   10b36:	|      movea.l 8(sp),a0
   10b3a:	|      move.l d0,4(a0)
		return TRUE;
   10b3e:	|      moveq #1,d0
   10b40:	|  /-- bra.w 10c08 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   10b44:	|  |   movea.l 4(sp),a0
   10b48:	|  |   move.l 4(a0),d0
   10b4c:	|  |   movea.l 8(sp),a0
   10b50:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   10b54:	|  |   movea.l 8(sp),a0
   10b58:	|  |   movea.l 4(a0),a0
   10b5c:	|  |   move.l 8(a0),d0
   10b60:	|  |   addq.l #1,d0
   10b62:	|  |   move.l d0,8(a0)
		return TRUE;
   10b66:	|  |   moveq #1,d0
   10b68:	|  +-- bra.w 10c08 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   10b6c:	|  |   movea.l 4(sp),a0
   10b70:	|  |   move.l 4(a0),d0
   10b74:	|  |   move.l d0,-(sp)
   10b76:	|  |   jsr b8 <copyString>
   10b7c:	|  |   addq.l #4,sp
   10b7e:	|  |   movea.l 8(sp),a0
   10b82:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   10b86:	|  |   movea.l 8(sp),a0
   10b8a:	|  |   move.l 4(a0),d0
   10b8e:	|  |   sne d0
   10b90:	|  |   neg.b d0
   10b92:	|  |   move.b d0,d0
   10b94:	|  |   andi.w #255,d0
   10b98:	|  +-- bra.s 10c08 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   10b9a:	|  |   movea.l 4(sp),a0
   10b9e:	|  |   move.l 4(a0),d0
   10ba2:	|  |   movea.l 8(sp),a0
   10ba6:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   10baa:	|  |   movea.l 8(sp),a0
   10bae:	|  |   movea.l 4(a0),a0
   10bb2:	|  |   move.l 8(a0),d0
   10bb6:	|  |   addq.l #1,d0
   10bb8:	|  |   move.l d0,8(a0)
		return TRUE;
   10bbc:	|  |   moveq #1,d0
   10bbe:	|  +-- bra.s 10c08 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   10bc0:	|  |   movea.l 4(sp),a0
   10bc4:	|  |   move.l 4(a0),d0
   10bc8:	|  |   movea.l 8(sp),a0
   10bcc:	|  |   move.l d0,4(a0)
		return TRUE;
   10bd0:	|  |   moveq #1,d0
   10bd2:	|  +-- bra.s 10c08 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   10bd4:	|  |   movea.l 4(sp),a0
   10bd8:	|  |   move.l 4(a0),d0
   10bdc:	|  |   move.l d0,-(sp)
   10bde:	|  |   jsr 5ece <copyAnim>
   10be4:	|  |   addq.l #4,sp
   10be6:	|  |   movea.l 8(sp),a0
   10bea:	|  |   move.l d0,4(a0)
		return TRUE;
   10bee:	|  |   moveq #1,d0
   10bf0:	|  +-- bra.s 10c08 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   10bf2:	|  |   moveq #1,d0
   10bf4:	|  +-- bra.s 10c08 <copyMain+0x11a>

		default:
		break;
   10bf6:	\--|-> nop
	}
	KPrintF("Unknown value type");
   10bf8:	   |   pea 1661a <main_sludge.c.2f5c5368+0xd30>
   10bfe:	   |   jsr 127a4 <KPrintF>
   10c04:	   |   addq.l #4,sp
	return FALSE;
   10c06:	   |   clr.w d0
}
   10c08:	   \-> rts

00010c0a <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   10c0a:	move.l 8(sp),-(sp)
   10c0e:	jsr 1099e <unlinkVar>
   10c14:	addq.l #4,sp
	return copyMain(from, to);
   10c16:	move.l 8(sp),-(sp)
   10c1a:	move.l 8(sp),-(sp)
   10c1e:	jsr 10aee <copyMain>
   10c24:	addq.l #8,sp
}
   10c26:	rts

00010c28 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   10c28:	       movea.l 4(sp),a0
   10c2c:	       move.l (a0),d0
   10c2e:	       moveq #8,d1
   10c30:	       cmp.l d0,d1
   10c32:	   /-- bne.s 10c48 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   10c34:	   |   movea.l 4(sp),a0
   10c38:	   |   move.l 4(a0),d0
   10c3c:	   |   move.l d0,-(sp)
   10c3e:	   |   jsr 5ece <copyAnim>
   10c44:	   |   addq.l #4,sp
   10c46:	/--|-- bra.s 10c8e <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   10c48:	|  \-> movea.l 4(sp),a0
   10c4c:	|      move.l (a0),d0
   10c4e:	|      moveq #1,d1
   10c50:	|      cmp.l d0,d1
   10c52:	|  /-- bne.s 10c66 <getAnimationFromVar+0x3e>
   10c54:	|  |   movea.l 4(sp),a0
   10c58:	|  |   move.l 4(a0),d0
   10c5c:	|  +-- bne.s 10c66 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   10c5e:	|  |   jsr 7076 <makeNullAnim>
   10c64:	+--|-- bra.s 10c8e <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   10c66:	|  \-> movea.l 4(sp),a0
   10c6a:	|      move.l (a0),d0
   10c6c:	|      add.l d0,d0
   10c6e:	|      movea.l d0,a1
   10c70:	|      adda.l d0,a1
   10c72:	|      lea 18688 <typeName>,a0
   10c78:	|      move.l (0,a1,a0.l),d0
   10c7c:	|      move.l d0,-(sp)
   10c7e:	|      pea 16506 <main_sludge.c.2f5c5368+0xc1c>
   10c84:	|      jsr 127a4 <KPrintF>
   10c8a:	|      addq.l #8,sp
	return NULL;
   10c8c:	|      moveq #0,d0
}
   10c8e:	\----> rts

00010c90 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   10c90:	       movea.l 4(sp),a0
   10c94:	       move.l (a0),d0
   10c96:	       moveq #10,d1
   10c98:	       cmp.l d0,d1
   10c9a:	/----- bcs.w 10d20 <getBoolean+0x90>
   10c9e:	|      add.l d0,d0
   10ca0:	|      movea.l d0,a0
   10ca2:	|      adda.l #68782,a0
   10ca8:	|      move.w (a0),d0
   10caa:	|      jmp (10cae <getBoolean+0x1e>,pc,d0.w)
   10cae:	|      ori.b #26,(a6)
   10cb2:	|      ori.w #68,(114,a2,d0.w)
   10cb8:	|      ori.w #46,(114,a2,d0.w)
   10cbe:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   10cc4:	|      clr.w d0
   10cc6:	|  /-- bra.s 10d24 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   10cc8:	|  |   movea.l 4(sp),a0
   10ccc:	|  |   move.l 4(a0),d0
   10cd0:	|  |   sne d0
   10cd2:	|  |   neg.b d0
   10cd4:	|  |   move.b d0,d0
   10cd6:	|  |   andi.w #255,d0
   10cda:	|  +-- bra.s 10d24 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   10cdc:	|  |   movea.l 4(sp),a0
   10ce0:	|  |   movea.l 4(a0),a0
   10ce4:	|  |   move.l (a0),d0
   10ce6:	|  |   sne d0
   10ce8:	|  |   neg.b d0
   10cea:	|  |   move.b d0,d0
   10cec:	|  |   andi.w #255,d0
   10cf0:	|  +-- bra.s 10d24 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   10cf2:	|  |   movea.l 4(sp),a0
   10cf6:	|  |   movea.l 4(a0),a0
   10cfa:	|  |   move.b (a0),d0
   10cfc:	|  |   sne d0
   10cfe:	|  |   neg.b d0
   10d00:	|  |   move.b d0,d0
   10d02:	|  |   andi.w #255,d0
   10d06:	|  +-- bra.s 10d24 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   10d08:	|  |   movea.l 4(sp),a0
   10d0c:	|  |   movea.l 4(a0),a0
   10d10:	|  |   move.l 4(a0),d0
   10d14:	|  |   sne d0
   10d16:	|  |   neg.b d0
   10d18:	|  |   move.b d0,d0
   10d1a:	|  |   andi.w #255,d0
   10d1e:	|  +-- bra.s 10d24 <getBoolean+0x94>

		default:
		break;
   10d20:	\--|-> nop
	}
	return TRUE;
   10d22:	   |   moveq #1,d0
}
   10d24:	   \-> rts

00010d26 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   10d26:	      /----------> lea -76(sp),sp
   10d2a:	      |            move.l a6,-(sp)
	switch (from->varType) {
   10d2c:	      |            movea.l 84(sp),a0
   10d30:	      |            move.l (a0),d0
   10d32:	      |            moveq #10,d1
   10d34:	      |            cmp.l d0,d1
   10d36:	/-----|----------- bcs.w 10fd4 <getTextFromAnyVar+0x2ae>
   10d3a:	|     |            add.l d0,d0
   10d3c:	|     |            movea.l d0,a0
   10d3e:	|     |            adda.l #68938,a0
   10d44:	|     |            move.w (a0),d0
   10d46:	|     |            jmp (10d4a <getTextFromAnyVar+0x24>,pc,d0.w)
   10d4a:	|     |            .short 0x028a
   10d4c:	|     |            bset d0,(a0)+
   10d4e:	|     |            .short 0x028a
   10d50:	|     |            ori.b #-118,(a6)
   10d54:	|     |            andi.b #8,ccr
   10d58:	|     |            andi.w #650,-(a0)
   10d5c:	|     |            .short 0x028a
   10d5e:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   10d64:	|     |            move.l 4(a0),d0
   10d68:	|     |            move.l d0,-(sp)
   10d6a:	|     |            jsr b8 <copyString>
   10d70:	|     |            addq.l #4,sp
   10d72:	|  /--|----------- bra.w 10ff6 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   10d76:	|  |  |            pea 1662d <main_sludge.c.2f5c5368+0xd43>
   10d7c:	|  |  |            jsr b8 <copyString>
   10d82:	|  |  |            addq.l #4,sp
   10d84:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   10d88:	|  |  |            clr.l 72(sp)
   10d8c:	|  |  |     /----- bra.w 10e36 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   10d90:	|  |  |  /--|----> pea 16633 <main_sludge.c.2f5c5368+0xd49>
   10d96:	|  |  |  |  |      move.l 80(sp),-(sp)
   10d9a:	|  |  |  |  |      jsr fc7c <joinStrings>
   10da0:	|  |  |  |  |      addq.l #8,sp
   10da2:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   10da6:	|  |  |  |  |  /-- bne.s 10dae <getTextFromAnyVar+0x88>
   10da8:	|  |  |  |  |  |   moveq #0,d0
   10daa:	|  +--|--|--|--|-- bra.w 10ff6 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   10dae:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   10db4:	|  |  |  |  |      move.l 19c4c <SysBase>,d0
   10dba:	|  |  |  |  |      movea.l d0,a6
   10dbc:	|  |  |  |  |      movea.l 56(sp),a1
   10dc0:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   10dc4:	|  |  |  |  |      movea.l 84(sp),a0
   10dc8:	|  |  |  |  |      movea.l 4(a0),a0
   10dcc:	|  |  |  |  |      move.l (a0),d1
   10dce:	|  |  |  |  |      move.l 72(sp),d0
   10dd2:	|  |  |  |  |      lsl.l #3,d0
   10dd4:	|  |  |  |  |      add.l d1,d0
   10dd6:	|  |  |  |  |      move.l d0,-(sp)
   10dd8:	|  |  +--|--|----- jsr 10d26 <getTextFromAnyVar>(pc)
   10ddc:	|  |  |  |  |      addq.l #4,sp
   10dde:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   10de2:	|  |  |  |  |      move.l 52(sp),-(sp)
   10de6:	|  |  |  |  |      move.l 64(sp),-(sp)
   10dea:	|  |  |  |  |      jsr fc7c <joinStrings>
   10df0:	|  |  |  |  |      addq.l #8,sp
   10df2:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   10df6:	|  |  |  |  |  /-- bne.s 10dfe <getTextFromAnyVar+0xd8>
   10df8:	|  |  |  |  |  |   moveq #0,d0
   10dfa:	|  +--|--|--|--|-- bra.w 10ff6 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   10dfe:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   10e04:	|  |  |  |  |      move.l 19c4c <SysBase>,d0
   10e0a:	|  |  |  |  |      movea.l d0,a6
   10e0c:	|  |  |  |  |      movea.l 48(sp),a1
   10e10:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   10e14:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   10e18:	|  |  |  |  |      move.l 60(sp),44(sp)
   10e1e:	|  |  |  |  |      move.l 19c4c <SysBase>,d0
   10e24:	|  |  |  |  |      movea.l d0,a6
   10e26:	|  |  |  |  |      movea.l 44(sp),a1
   10e2a:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   10e2e:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   10e32:	|  |  |  |  |      addq.l #1,72(sp)
   10e36:	|  |  |  |  \----> movea.l 84(sp),a0
   10e3a:	|  |  |  |         movea.l 4(a0),a0
   10e3e:	|  |  |  |         move.l 4(a0),d0
   10e42:	|  |  |  |         cmp.l 72(sp),d0
   10e46:	|  |  |  \-------- bgt.w 10d90 <getTextFromAnyVar+0x6a>
			}
			return builder;
   10e4a:	|  |  |            move.l 76(sp),d0
   10e4e:	|  +--|----------- bra.w 10ff6 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   10e52:	|  |  |            pea 16635 <main_sludge.c.2f5c5368+0xd4b>
   10e58:	|  |  |            jsr b8 <copyString>
   10e5e:	|  |  |            addq.l #4,sp
   10e60:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   10e64:	|  |  |            movea.l 84(sp),a0
   10e68:	|  |  |            movea.l 4(a0),a0
   10e6c:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   10e70:	|  |  |     /----- bra.w 10f12 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   10e74:	|  |  |  /--|----> pea 16633 <main_sludge.c.2f5c5368+0xd49>
   10e7a:	|  |  |  |  |      move.l 72(sp),-(sp)
   10e7e:	|  |  |  |  |      jsr fc7c <joinStrings>
   10e84:	|  |  |  |  |      addq.l #8,sp
   10e86:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   10e8a:	|  |  |  |  |  /-- bne.s 10e92 <getTextFromAnyVar+0x16c>
   10e8c:	|  |  |  |  |  |   moveq #0,d0
   10e8e:	|  +--|--|--|--|-- bra.w 10ff6 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   10e92:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   10e98:	|  |  |  |  |      move.l 19c4c <SysBase>,d0
   10e9e:	|  |  |  |  |      movea.l d0,a6
   10ea0:	|  |  |  |  |      movea.l 32(sp),a1
   10ea4:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   10ea8:	|  |  |  |  |      move.l 64(sp),d0
   10eac:	|  |  |  |  |      move.l d0,-(sp)
   10eae:	|  |  \--|--|----- jsr 10d26 <getTextFromAnyVar>(pc)
   10eb2:	|  |     |  |      addq.l #4,sp
   10eb4:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   10eb8:	|  |     |  |      move.l 28(sp),-(sp)
   10ebc:	|  |     |  |      move.l 40(sp),-(sp)
   10ec0:	|  |     |  |      jsr fc7c <joinStrings>
   10ec6:	|  |     |  |      addq.l #8,sp
   10ec8:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   10ecc:	|  |     |  |  /-- bne.s 10ed4 <getTextFromAnyVar+0x1ae>
   10ece:	|  |     |  |  |   moveq #0,d0
   10ed0:	|  +-----|--|--|-- bra.w 10ff6 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   10ed4:	|  |     |  |  \-> move.l 28(sp),24(sp)
   10eda:	|  |     |  |      move.l 19c4c <SysBase>,d0
   10ee0:	|  |     |  |      movea.l d0,a6
   10ee2:	|  |     |  |      movea.l 24(sp),a1
   10ee6:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   10eea:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   10eee:	|  |     |  |      move.l 36(sp),20(sp)
   10ef4:	|  |     |  |      move.l 19c4c <SysBase>,d0
   10efa:	|  |     |  |      movea.l d0,a6
   10efc:	|  |     |  |      movea.l 20(sp),a1
   10f00:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   10f04:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   10f08:	|  |     |  |      movea.l 64(sp),a0
   10f0c:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   10f12:	|  |     |  \----> tst.l 64(sp)
   10f16:	|  |     \-------- bne.w 10e74 <getTextFromAnyVar+0x14e>
			}
			return builder;
   10f1a:	|  |               move.l 68(sp),d0
   10f1e:	|  +-------------- bra.w 10ff6 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   10f22:	|  |               moveq #10,d0
   10f24:	|  |               move.l d0,16(sp)
   10f28:	|  |               clr.l 12(sp)
   10f2c:	|  |               move.l 19c4c <SysBase>,d0
   10f32:	|  |               movea.l d0,a6
   10f34:	|  |               move.l 16(sp),d0
   10f38:	|  |               move.l 12(sp),d1
   10f3c:	|  |               jsr -684(a6)
   10f40:	|  |               move.l d0,8(sp)
   10f44:	|  |               move.l 8(sp),d0
   10f48:	|  |               move.l d0,4(sp)
			if (! buff) {
   10f4c:	|  |           /-- bne.s 10f62 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   10f4e:	|  |           |   pea 1663c <main_sludge.c.2f5c5368+0xd52>
   10f54:	|  |           |   jsr 127a4 <KPrintF>
   10f5a:	|  |           |   addq.l #4,sp
				return NULL;
   10f5c:	|  |           |   moveq #0,d0
   10f5e:	|  +-----------|-- bra.w 10ff6 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   10f62:	|  |           \-> movea.l 84(sp),a0
   10f66:	|  |               move.l 4(a0),d0
   10f6a:	|  |               move.l d0,-(sp)
   10f6c:	|  |               pea 16666 <main_sludge.c.2f5c5368+0xd7c>
   10f72:	|  |               move.l 12(sp),-(sp)
   10f76:	|  |               jsr ff5a <sprintf>
   10f7c:	|  |               lea 12(sp),sp
			return buff;
   10f80:	|  |               move.l 4(sp),d0
   10f84:	|  +-------------- bra.s 10ff6 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   10f86:	|  |               movea.l 84(sp),a0
   10f8a:	|  |               move.l 4(a0),d0
   10f8e:	|  |               move.l d0,-(sp)
   10f90:	|  |               jsr 13ee <resourceNameFromNum>
   10f96:	|  |               addq.l #4,sp
   10f98:	|  |               move.l d0,-(sp)
   10f9a:	|  |               pea 13988 <custom.c.87151361+0x147>
   10fa0:	|  |               jsr fc7c <joinStrings>
   10fa6:	|  |               addq.l #8,sp
   10fa8:	|  +-------------- bra.s 10ff6 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   10faa:	|  |               movea.l 84(sp),a0
   10fae:	|  |               move.l 4(a0),d0
   10fb2:	|  |               move.l d0,-(sp)
   10fb4:	|  |               jsr 95a2 <findObjectType>
   10fba:	|  |               addq.l #4,sp
   10fbc:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   10fc0:	+--|-------------- beq.s 10fd4 <getTextFromAnyVar+0x2ae>
   10fc2:	|  |               movea.l 40(sp),a0
   10fc6:	|  |               move.l (a0),d0
   10fc8:	|  |               move.l d0,-(sp)
   10fca:	|  |               jsr b8 <copyString>
   10fd0:	|  |               addq.l #4,sp
   10fd2:	|  +-------------- bra.s 10ff6 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   10fd4:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   10fd6:	   |               movea.l 84(sp),a0
   10fda:	   |               move.l (a0),d0
   10fdc:	   |               add.l d0,d0
   10fde:	   |               movea.l d0,a1
   10fe0:	   |               adda.l d0,a1
   10fe2:	   |               lea 18688 <typeName>,a0
   10fe8:	   |               move.l (0,a1,a0.l),d0
   10fec:	   |               move.l d0,-(sp)
   10fee:	   |               jsr b8 <copyString>
   10ff4:	   |               addq.l #4,sp
}
   10ff6:	   \-------------> movea.l (sp)+,a6
   10ff8:	                   lea 76(sp),sp
   10ffc:	                   rts

00010ffe <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   10ffe:	move.l 4(sp),-(sp)
   11002:	jsr 1099e <unlinkVar>
   11008:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   1100a:	movea.l 4(sp),a0
   1100e:	moveq #8,d0
   11010:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   11012:	movea.l 4(sp),a0
   11016:	move.l 8(sp),4(a0)
}
   1101c:	nop
   1101e:	rts

00011020 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   11020:	move.l 4(sp),-(sp)
   11024:	jsr 1099e <unlinkVar>
   1102a:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   1102c:	movea.l 4(sp),a0
   11030:	moveq #9,d0
   11032:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   11034:	movea.l 4(sp),a0
   11038:	move.l 8(sp),4(a0)
}
   1103e:	nop
   11040:	rts

00011042 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   11042:	move.l 4(sp),-(sp)
   11046:	jsr 1099e <unlinkVar>
   1104c:	addq.l #4,sp
	thisVar->varType = vT;
   1104e:	movea.l 4(sp),a0
   11052:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   11056:	movea.l 4(sp),a0
   1105a:	move.l 12(sp),4(a0)
}
   11060:	nop
   11062:	rts

00011064 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   11064:	      /-- bra.s 11076 <stackGetByIndex+0x12>
        vS = vS->next;
   11066:	/-----|-> movea.l 4(sp),a0
   1106a:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   11070:	|     +-- bne.s 11076 <stackGetByIndex+0x12>
            return NULL;
   11072:	|     |   moveq #0,d0
   11074:	|  /--|-- bra.s 1108a <stackGetByIndex+0x26>
    while (theIndex--) {
   11076:	|  |  \-> move.l 8(sp),d0
   1107a:	|  |      move.l d0,d1
   1107c:	|  |      subq.l #1,d1
   1107e:	|  |      move.l d1,8(sp)
   11082:	|  |      tst.l d0
   11084:	\--|----- bne.s 11066 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   11086:	   |      move.l 4(sp),d0
}
   1108a:	   \----> rts

0001108c <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   1108c:	          tst.l 4(sp)
   11090:	      /-- bne.s 110a0 <stackFindLast+0x14>
		return NULL;
   11092:	      |   moveq #0,d0
   11094:	/-----|-- bra.s 110ae <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   11096:	|  /--|-> movea.l 4(sp),a0
   1109a:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   110a0:	|  |  \-> movea.l 4(sp),a0
   110a4:	|  |      move.l 8(a0),d0
   110a8:	|  \----- bne.s 11096 <stackFindLast+0xa>

	return hunt;
   110aa:	|         move.l 4(sp),d0
}
   110ae:	\-------> rts

000110b0 <stackSize>:

int stackSize (const struct stackHandler * me) {
   110b0:	       subq.l #8,sp
	int r = 0;
   110b2:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   110b6:	       movea.l 12(sp),a0
   110ba:	       move.l (a0),(sp)
	while (a) {
   110bc:	   /-- bra.s 110c8 <stackSize+0x18>
		r ++;
   110be:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   110c2:	|  |   movea.l (sp),a0
   110c4:	|  |   move.l 8(a0),(sp)
	while (a) {
   110c8:	|  \-> tst.l (sp)
   110ca:	\----- bne.s 110be <stackSize+0xe>
	}
	return r;
   110cc:	       move.l 4(sp),d0
}
   110d0:	       addq.l #8,sp
   110d2:	       rts

000110d4 <trimStack>:

void trimStack (struct variableStack ** stack) {
   110d4:	subq.l #8,sp
   110d6:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   110d8:	movea.l 16(sp),a0
   110dc:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   110e0:	movea.l 16(sp),a0
   110e4:	movea.l (a0),a0
   110e6:	move.l 8(a0),d0
   110ea:	movea.l 16(sp),a0
   110ee:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   110f0:	move.l 8(sp),d0
   110f4:	move.l d0,-(sp)
   110f6:	jsr 1099e <unlinkVar>
   110fc:	addq.l #4,sp
	FreeVec(killMe);
   110fe:	move.l 8(sp),4(sp)
   11104:	move.l 19c4c <SysBase>,d0
   1110a:	movea.l d0,a6
   1110c:	movea.l 4(sp),a1
   11110:	jsr -690(a6)
   11114:	nop
   11116:	movea.l (sp)+,a6
   11118:	addq.l #8,sp
   1111a:	rts

0001111c <isInFont>:

ULONG * fontTable = NULL;
unsigned int fontTableSize = 0;

BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   1111c:	pea 16669 <main_sludge.c.2f5c5368+0xd7f>
   11122:	jsr 127a4 <KPrintF>
   11128:	addq.l #4,sp
	return FALSE;
   1112a:	clr.w d0
}
   1112c:	rts

0001112e <stringWidth>:

int stringWidth (char * theText) {
   1112e:	       subq.l #8,sp
	int a = 0;
   11130:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   11134:	       clr.l (sp)

	if (! fontTableSize) return 0;
   11136:	       move.l 19d48 <fontTableSize>,d0
   1113c:	/----- bne.s 11142 <stringWidth+0x14>
   1113e:	|      moveq #0,d0
   11140:	|  /-- bra.s 11144 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   11142:	\--|-> move.l (sp),d0
}
   11144:	   \-> addq.l #8,sp
   11146:	       rts

00011148 <loadFont>:

	FreeVec(fontOrderString);
	fontOrderString = copyString(charOrder);*/

	//forgetSpriteBank(theFont);
	KPrintF("loadFont: Not implemented on Amiga");	
   11148:	pea 16690 <main_sludge.c.2f5c5368+0xda6>
   1114e:	jsr 127a4 <KPrintF>
   11154:	addq.l #4,sp
		return FALSE;
	}*/

	//numFontColours = theFont.myPalette.total;*/
	//fontHeight = h;
	return TRUE;
   11156:	moveq #1,d0
}
   11158:	rts

0001115a <addScreenRegion>:
#include "region.h"

struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;

BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   1115a:	       lea -16(sp),sp
   1115e:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   11160:	       moveq #36,d0
   11162:	       move.l d0,16(sp)
   11166:	       clr.l 12(sp)
   1116a:	       move.l 19c4c <SysBase>,d0
   11170:	       movea.l d0,a6
   11172:	       move.l 16(sp),d0
   11176:	       move.l 12(sp),d1
   1117a:	       jsr -684(a6)
   1117e:	       move.l d0,8(sp)
   11182:	       move.l 8(sp),d0
   11186:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   1118a:	   /-- bne.s 11192 <addScreenRegion+0x38>
   1118c:	   |   clr.w d0
   1118e:	/--|-- bra.w 11212 <addScreenRegion+0xb8>
    newRegion->di = di;
   11192:	|  \-> movea.l 4(sp),a0
   11196:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   1119c:	|      movea.l 4(sp),a0
   111a0:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   111a4:	|      movea.l 4(sp),a0
   111a8:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   111ae:	|      movea.l 4(sp),a0
   111b2:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   111b8:	|      movea.l 4(sp),a0
   111bc:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   111c2:	|      movea.l 4(sp),a0
   111c6:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   111cc:	|      movea.l 4(sp),a0
   111d0:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   111d6:	|      move.l 52(sp),-(sp)
   111da:	|      jsr 9692 <loadObjectType>
   111e0:	|      addq.l #4,sp
   111e2:	|      movea.l 4(sp),a0
   111e6:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   111ea:	|      move.l 19d4c <allScreenRegions>,d0
   111f0:	|      movea.l 4(sp),a0
   111f4:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   111f8:	|      move.l 4(sp),19d4c <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   11200:	|      movea.l 4(sp),a0
   11204:	|      move.l 28(a0),d0
   11208:	|      sne d0
   1120a:	|      neg.b d0
   1120c:	|      move.b d0,d0
   1120e:	|      andi.w #255,d0
}
   11212:	\----> movea.l (sp)+,a6
   11214:	       lea 16(sp),sp
   11218:	       rts

0001121a <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   1121a:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   1121c:	             move.l 19d4c <allScreenRegions>,(sp)

	while (thisRegion) {
   11222:	   /-------- bra.s 1123e <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   11224:	/--|-------> movea.l (sp),a0
   11226:	|  |         movea.l 28(a0),a0
   1122a:	|  |         move.l 4(a0),d0
   1122e:	|  |         cmp.l 8(sp),d0
   11232:	|  |     /-- bne.s 11238 <getRegionForObject+0x1e>
			return thisRegion;
   11234:	|  |     |   move.l (sp),d0
   11236:	|  |  /--|-- bra.s 11244 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   11238:	|  |  |  \-> movea.l (sp),a0
   1123a:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   1123e:	|  \--|----> tst.l (sp)
   11240:	\-----|----- bne.s 11224 <getRegionForObject+0xa>
	}

	return NULL;
   11242:	      |      moveq #0,d0
}
   11244:	      \----> addq.l #4,sp
   11246:	             rts

00011248 <killAllRegions>:

void killAllRegions () {
   11248:	       subq.l #8,sp
   1124a:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   1124c:	   /-- bra.s 1128e <killAllRegions+0x46>
		killRegion = allScreenRegions;
   1124e:	/--|-> move.l 19d4c <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   11256:	|  |   movea.l 19d4c <allScreenRegions>,a0
   1125c:	|  |   move.l 32(a0),d0
   11260:	|  |   move.l d0,19d4c <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   11266:	|  |   movea.l 8(sp),a0
   1126a:	|  |   move.l 28(a0),d0
   1126e:	|  |   move.l d0,-(sp)
   11270:	|  |   jsr 994a <removeObjectType>
   11276:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   11278:	|  |   move.l 8(sp),4(sp)
   1127e:	|  |   move.l 19c4c <SysBase>,d0
   11284:	|  |   movea.l d0,a6
   11286:	|  |   movea.l 4(sp),a1
   1128a:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   1128e:	|  \-> move.l 19d4c <allScreenRegions>,d0
   11294:	\----- bne.s 1124e <killAllRegions+0x6>
	}
	overRegion = NULL;
   11296:	       clr.l 19d50 <overRegion>
}
   1129c:	       nop
   1129e:	       movea.l (sp)+,a6
   112a0:	       addq.l #8,sp
   112a2:	       rts

000112a4 <loadRegions>:

void loadRegions (BPTR fp) {
   112a4:	       lea -24(sp),sp
   112a8:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   112aa:	       move.l 32(sp),-(sp)
   112ae:	       jsr 6bc <get2bytes>
   112b4:	       addq.l #4,sp
   112b6:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   112ba:	       move.l #105804,20(sp)

	while (numRegions --) {
   112c2:	   /-- bra.w 113a0 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   112c6:	/--|-> moveq #36,d0
   112c8:	|  |   move.l d0,16(sp)
   112cc:	|  |   clr.l 12(sp)
   112d0:	|  |   move.l 19c4c <SysBase>,d0
   112d6:	|  |   movea.l d0,a6
   112d8:	|  |   move.l 16(sp),d0
   112dc:	|  |   move.l 12(sp),d1
   112e0:	|  |   jsr -684(a6)
   112e4:	|  |   move.l d0,8(sp)
   112e8:	|  |   move.l 8(sp),d0
   112ec:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   112f0:	|  |   movea.l 20(sp),a0
   112f4:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   112f8:	|  |   moveq #32,d1
   112fa:	|  |   add.l 4(sp),d1
   112fe:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   11302:	|  |   move.l 32(sp),-(sp)
   11306:	|  |   jsr 6bc <get2bytes>
   1130c:	|  |   addq.l #4,sp
   1130e:	|  |   movea.l 4(sp),a0
   11312:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   11314:	|  |   move.l 32(sp),-(sp)
   11318:	|  |   jsr 6bc <get2bytes>
   1131e:	|  |   addq.l #4,sp
   11320:	|  |   movea.l 4(sp),a0
   11324:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   11328:	|  |   move.l 32(sp),-(sp)
   1132c:	|  |   jsr 6bc <get2bytes>
   11332:	|  |   addq.l #4,sp
   11334:	|  |   movea.l 4(sp),a0
   11338:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   1133c:	|  |   move.l 32(sp),-(sp)
   11340:	|  |   jsr 6bc <get2bytes>
   11346:	|  |   addq.l #4,sp
   11348:	|  |   movea.l 4(sp),a0
   1134c:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   11350:	|  |   move.l 32(sp),-(sp)
   11354:	|  |   jsr 6bc <get2bytes>
   1135a:	|  |   addq.l #4,sp
   1135c:	|  |   movea.l 4(sp),a0
   11360:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   11364:	|  |   move.l 32(sp),-(sp)
   11368:	|  |   jsr 6bc <get2bytes>
   1136e:	|  |   addq.l #4,sp
   11370:	|  |   movea.l 4(sp),a0
   11374:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   11378:	|  |   move.l 32(sp),-(sp)
   1137c:	|  |   jsr 6bc <get2bytes>
   11382:	|  |   addq.l #4,sp
   11384:	|  |   movea.l 4(sp),a0
   11388:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   1138c:	|  |   move.l 32(sp),-(sp)
   11390:	|  |   jsr 9640 <loadObjectRef>
   11396:	|  |   addq.l #4,sp
   11398:	|  |   movea.l 4(sp),a0
   1139c:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   113a0:	|  \-> move.l 24(sp),d0
   113a4:	|      move.l d0,d1
   113a6:	|      subq.l #1,d1
   113a8:	|      move.l d1,24(sp)
   113ac:	|      tst.l d0
   113ae:	\----- bne.w 112c6 <loadRegions+0x22>
	}
	* pointy = NULL;
   113b2:	       movea.l 20(sp),a0
   113b6:	       clr.l (a0)
}
   113b8:	       nop
   113ba:	       movea.l (sp)+,a6
   113bc:	       lea 24(sp),sp
   113c0:	       rts

000113c2 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   113c2:	             lea -12(sp),sp
   113c6:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   113c8:	             move.l #105804,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   113d0:	   /-------- bra.s 1144a <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   113d2:	/--|-------> movea.l 12(sp),a0
   113d6:	|  |         movea.l (a0),a0
   113d8:	|  |         movea.l 28(a0),a0
   113dc:	|  |         move.l 4(a0),d0
   113e0:	|  |         cmp.l 20(sp),d0
   113e4:	|  |  /----- bne.s 1143c <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   113e6:	|  |  |      movea.l 12(sp),a0
   113ea:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   113ee:	|  |  |      movea.l 8(sp),a0
   113f2:	|  |  |      move.l 32(a0),d0
   113f6:	|  |  |      movea.l 12(sp),a0
   113fa:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   113fc:	|  |  |      movea.l 8(sp),a0
   11400:	|  |  |      move.l 28(a0),d0
   11404:	|  |  |      move.l d0,-(sp)
   11406:	|  |  |      jsr 994a <removeObjectType>
   1140c:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   1140e:	|  |  |      move.l 19d50 <overRegion>,d0
   11414:	|  |  |      cmp.l 8(sp),d0
   11418:	|  |  |  /-- bne.s 11420 <removeScreenRegion+0x5e>
   1141a:	|  |  |  |   clr.l 19d50 <overRegion>
            FreeVec(killMe);
   11420:	|  |  |  \-> move.l 8(sp),4(sp)
   11426:	|  |  |      move.l 19c4c <SysBase>,d0
   1142c:	|  |  |      movea.l d0,a6
   1142e:	|  |  |      movea.l 4(sp),a1
   11432:	|  |  |      jsr -690(a6)
            killMe = NULL;
   11436:	|  |  |      clr.l 8(sp)
   1143a:	|  +--|----- bra.s 1144a <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   1143c:	|  |  \----> movea.l 12(sp),a0
   11440:	|  |         move.l (a0),d0
   11442:	|  |         moveq #32,d1
   11444:	|  |         add.l d0,d1
   11446:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   1144a:	|  \-------> movea.l 12(sp),a0
   1144e:	|            move.l (a0),d0
   11450:	\----------- bne.s 113d2 <removeScreenRegion+0x10>
        }
    }
}
   11452:	             nop
   11454:	             nop
   11456:	             movea.l (sp)+,a6
   11458:	             lea 12(sp),sp
   1145c:	             rts

0001145e <saveRegions>:

void saveRegions (BPTR fp) {
   1145e:	       subq.l #8,sp
	int numRegions = 0;
   11460:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   11464:	       move.l 19d4c <allScreenRegions>,(sp)
	while (thisRegion) {
   1146a:	   /-- bra.s 11476 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   1146c:	/--|-> movea.l (sp),a0
   1146e:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   11472:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   11476:	|  \-> tst.l (sp)
   11478:	\----- bne.s 1146c <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   1147a:	       move.l 12(sp),-(sp)
   1147e:	       move.l 8(sp),-(sp)
   11482:	       jsr 8d0 <put2bytes>
   11488:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   1148a:	       move.l 19d4c <allScreenRegions>,(sp)
	while (thisRegion) {
   11490:	/----- bra.w 11538 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   11494:	|  /-> movea.l (sp),a0
   11496:	|  |   move.l (a0),d0
   11498:	|  |   move.l 12(sp),-(sp)
   1149c:	|  |   move.l d0,-(sp)
   1149e:	|  |   jsr 8d0 <put2bytes>
   114a4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   114a6:	|  |   movea.l (sp),a0
   114a8:	|  |   move.l 4(a0),d0
   114ac:	|  |   move.l 12(sp),-(sp)
   114b0:	|  |   move.l d0,-(sp)
   114b2:	|  |   jsr 8d0 <put2bytes>
   114b8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   114ba:	|  |   movea.l (sp),a0
   114bc:	|  |   move.l 8(a0),d0
   114c0:	|  |   move.l 12(sp),-(sp)
   114c4:	|  |   move.l d0,-(sp)
   114c6:	|  |   jsr 8d0 <put2bytes>
   114cc:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   114ce:	|  |   movea.l (sp),a0
   114d0:	|  |   move.l 12(a0),d0
   114d4:	|  |   move.l 12(sp),-(sp)
   114d8:	|  |   move.l d0,-(sp)
   114da:	|  |   jsr 8d0 <put2bytes>
   114e0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   114e2:	|  |   movea.l (sp),a0
   114e4:	|  |   move.l 16(a0),d0
   114e8:	|  |   move.l 12(sp),-(sp)
   114ec:	|  |   move.l d0,-(sp)
   114ee:	|  |   jsr 8d0 <put2bytes>
   114f4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   114f6:	|  |   movea.l (sp),a0
   114f8:	|  |   move.l 20(a0),d0
   114fc:	|  |   move.l 12(sp),-(sp)
   11500:	|  |   move.l d0,-(sp)
   11502:	|  |   jsr 8d0 <put2bytes>
   11508:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   1150a:	|  |   movea.l (sp),a0
   1150c:	|  |   move.l 24(a0),d0
   11510:	|  |   move.l 12(sp),-(sp)
   11514:	|  |   move.l d0,-(sp)
   11516:	|  |   jsr 8d0 <put2bytes>
   1151c:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   1151e:	|  |   movea.l (sp),a0
   11520:	|  |   move.l 28(a0),d0
   11524:	|  |   move.l 12(sp),-(sp)
   11528:	|  |   move.l d0,-(sp)
   1152a:	|  |   jsr 99ea <saveObjectRef>
   11530:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   11532:	|  |   movea.l (sp),a0
   11534:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   11538:	\--|-> tst.l (sp)
   1153a:	   \-- bne.w 11494 <saveRegions+0x36>
	}
}
   1153e:	       nop
   11540:	       nop
   11542:	       addq.l #8,sp
   11544:	       rts

00011546 <showBoxes>:

void showBoxes () {
   11546:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   11548:	       move.l 19d4c <allScreenRegions>,(sp)

	while (huntRegion) {
   1154e:	/----- bra.w 115ea <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   11552:	|  /-> movea.l (sp),a0
   11554:	|  |   move.l 12(a0),d0
   11558:	|  |   movea.l d0,a1
   1155a:	|  |   movea.l (sp),a0
   1155c:	|  |   move.l 4(a0),d0
   11560:	|  |   move.l d0,d1
   11562:	|  |   movea.l (sp),a0
   11564:	|  |   move.l (a0),d0
   11566:	|  |   move.l a1,-(sp)
   11568:	|  |   move.l d1,-(sp)
   1156a:	|  |   move.l d0,-(sp)
   1156c:	|  |   jsr 9318 <drawVerticalLine>
   11572:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   11576:	|  |   movea.l (sp),a0
   11578:	|  |   move.l 12(a0),d0
   1157c:	|  |   movea.l d0,a1
   1157e:	|  |   movea.l (sp),a0
   11580:	|  |   move.l 4(a0),d0
   11584:	|  |   move.l d0,d1
   11586:	|  |   movea.l (sp),a0
   11588:	|  |   move.l 8(a0),d0
   1158c:	|  |   move.l a1,-(sp)
   1158e:	|  |   move.l d1,-(sp)
   11590:	|  |   move.l d0,-(sp)
   11592:	|  |   jsr 9318 <drawVerticalLine>
   11598:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   1159c:	|  |   movea.l (sp),a0
   1159e:	|  |   move.l 8(a0),d0
   115a2:	|  |   movea.l d0,a1
   115a4:	|  |   movea.l (sp),a0
   115a6:	|  |   move.l 4(a0),d0
   115aa:	|  |   move.l d0,d1
   115ac:	|  |   movea.l (sp),a0
   115ae:	|  |   move.l (a0),d0
   115b0:	|  |   move.l a1,-(sp)
   115b2:	|  |   move.l d1,-(sp)
   115b4:	|  |   move.l d0,-(sp)
   115b6:	|  |   jsr 92f2 <drawHorizontalLine>
   115bc:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   115c0:	|  |   movea.l (sp),a0
   115c2:	|  |   move.l 8(a0),d0
   115c6:	|  |   movea.l d0,a1
   115c8:	|  |   movea.l (sp),a0
   115ca:	|  |   move.l 12(a0),d0
   115ce:	|  |   move.l d0,d1
   115d0:	|  |   movea.l (sp),a0
   115d2:	|  |   move.l (a0),d0
   115d4:	|  |   move.l a1,-(sp)
   115d6:	|  |   move.l d1,-(sp)
   115d8:	|  |   move.l d0,-(sp)
   115da:	|  |   jsr 92f2 <drawHorizontalLine>
   115e0:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   115e4:	|  |   movea.l (sp),a0
   115e6:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   115ea:	\--|-> tst.l (sp)
   115ec:	   \-- bne.w 11552 <showBoxes+0xc>
	}
   115f0:	       nop
   115f2:	       nop
   115f4:	       addq.l #4,sp
   115f6:	       rts

000115f8 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   115f8:	       lea -32(sp),sp
   115fc:	       move.l d3,-(sp)
   115fe:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   11600:	       move.l 60(sp),d0
   11604:	       sub.l 52(sp),d0
   11608:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   1160c:	       move.l 64(sp),d0
   11610:	       sub.l 56(sp),d0
   11614:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   11618:	       move.l 68(sp),d0
   1161c:	       sub.l 52(sp),d0
   11620:	       move.l 36(sp),-(sp)
   11624:	       move.l d0,-(sp)
   11626:	       jsr 13156 <__mulsi3>
   1162c:	       addq.l #8,sp
   1162e:	       move.l d0,d2
   11630:	       move.l 72(sp),d0
   11634:	       sub.l 56(sp),d0
   11638:	       move.l 32(sp),-(sp)
   1163c:	       move.l d0,-(sp)
   1163e:	       jsr 13156 <__mulsi3>
   11644:	       addq.l #8,sp
   11646:	       add.l d2,d0
   11648:	       move.l d0,-(sp)
   1164a:	       jsr 12bbc <__floatsidf>
   11650:	       addq.l #4,sp
   11652:	       move.l d0,16(sp)
   11656:	       move.l d1,20(sp)
   1165a:	       move.l 16(sp),24(sp)
   11660:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   11666:	       move.l 36(sp),-(sp)
   1166a:	       move.l 40(sp),-(sp)
   1166e:	       jsr 13156 <__mulsi3>
   11674:	       addq.l #8,sp
   11676:	       move.l d0,d2
   11678:	       move.l 32(sp),-(sp)
   1167c:	       move.l 36(sp),-(sp)
   11680:	       jsr 13156 <__mulsi3>
   11686:	       addq.l #8,sp
   11688:	       add.l d2,d0
   1168a:	       move.l d0,-(sp)
   1168c:	       jsr 12bbc <__floatsidf>
   11692:	       addq.l #4,sp
   11694:	       move.l d1,-(sp)
   11696:	       move.l d0,-(sp)
   11698:	       move.l 36(sp),-(sp)
   1169c:	       move.l 36(sp),-(sp)
   116a0:	       jsr 12a46 <__divdf3>
   116a6:	       lea 16(sp),sp
   116aa:	       move.l d0,8(sp)
   116ae:	       move.l d1,12(sp)
   116b2:	       move.l 8(sp),24(sp)
   116b8:	       move.l 12(sp),28(sp)

	if (m < 0) {
   116be:	       clr.l -(sp)
   116c0:	       clr.l -(sp)
   116c2:	       move.l 36(sp),-(sp)
   116c6:	       move.l 36(sp),-(sp)
   116ca:	       jsr 12dd4 <__ltdf2>
   116d0:	       lea 16(sp),sp
   116d4:	       tst.l d0
   116d6:	   /-- bge.s 116ec <closestPointOnLine+0xf4>
		*closestX = x1;
   116d8:	   |   movea.l 44(sp),a0
   116dc:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   116e0:	   |   movea.l 48(sp),a0
   116e4:	   |   move.l 56(sp),(a0)
   116e8:	/--|-- bra.w 117ce <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   116ec:	|  \-> clr.l -(sp)
   116ee:	|      move.l #1072693248,-(sp)
   116f4:	|      move.l 36(sp),-(sp)
   116f8:	|      move.l 36(sp),-(sp)
   116fc:	|      jsr 12d1a <__gtdf2>
   11702:	|      lea 16(sp),sp
   11706:	|      tst.l d0
   11708:	|  /-- ble.s 1171e <closestPointOnLine+0x126>
		*closestX = x2;
   1170a:	|  |   movea.l 44(sp),a0
   1170e:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   11712:	|  |   movea.l 48(sp),a0
   11716:	|  |   move.l 64(sp),(a0)
   1171a:	+--|-- bra.w 117ce <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   1171e:	|  \-> move.l 52(sp),-(sp)
   11722:	|      jsr 12bbc <__floatsidf>
   11728:	|      addq.l #4,sp
   1172a:	|      move.l d0,d2
   1172c:	|      move.l d1,d3
   1172e:	|      move.l 36(sp),-(sp)
   11732:	|      jsr 12bbc <__floatsidf>
   11738:	|      addq.l #4,sp
   1173a:	|      move.l 28(sp),-(sp)
   1173e:	|      move.l 28(sp),-(sp)
   11742:	|      move.l d1,-(sp)
   11744:	|      move.l d0,-(sp)
   11746:	|      jsr 12c4c <__muldf3>
   1174c:	|      lea 16(sp),sp
   11750:	|      move.l d1,-(sp)
   11752:	|      move.l d0,-(sp)
   11754:	|      move.l d3,-(sp)
   11756:	|      move.l d2,-(sp)
   11758:	|      jsr 129e4 <__adddf3>
   1175e:	|      lea 16(sp),sp
   11762:	|      move.l d1,-(sp)
   11764:	|      move.l d0,-(sp)
   11766:	|      jsr 12b54 <__fixdfsi>
   1176c:	|      addq.l #8,sp
   1176e:	|      movea.l 44(sp),a0
   11772:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   11774:	|      move.l 56(sp),-(sp)
   11778:	|      jsr 12bbc <__floatsidf>
   1177e:	|      addq.l #4,sp
   11780:	|      move.l d0,d2
   11782:	|      move.l d1,d3
   11784:	|      move.l 32(sp),-(sp)
   11788:	|      jsr 12bbc <__floatsidf>
   1178e:	|      addq.l #4,sp
   11790:	|      move.l 28(sp),-(sp)
   11794:	|      move.l 28(sp),-(sp)
   11798:	|      move.l d1,-(sp)
   1179a:	|      move.l d0,-(sp)
   1179c:	|      jsr 12c4c <__muldf3>
   117a2:	|      lea 16(sp),sp
   117a6:	|      move.l d1,-(sp)
   117a8:	|      move.l d0,-(sp)
   117aa:	|      move.l d3,-(sp)
   117ac:	|      move.l d2,-(sp)
   117ae:	|      jsr 129e4 <__adddf3>
   117b4:	|      lea 16(sp),sp
   117b8:	|      move.l d1,-(sp)
   117ba:	|      move.l d0,-(sp)
   117bc:	|      jsr 12b54 <__fixdfsi>
   117c2:	|      addq.l #8,sp
   117c4:	|      movea.l 48(sp),a0
   117c8:	|      move.l d0,(a0)
		return TRUE;
   117ca:	|      moveq #1,d0
   117cc:	|  /-- bra.s 117d0 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   117ce:	\--|-> clr.w d0
}
   117d0:	   \-> move.l (sp)+,d2
   117d2:	       move.l (sp)+,d3
   117d4:	       lea 32(sp),sp
   117d8:	       rts

000117da <drawFloor>:

void drawFloor() {
   117da:	                lea -12(sp),sp
   117de:	                move.l d3,-(sp)
   117e0:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   117e2:	                clr.l 16(sp)
   117e6:	   /----------- bra.w 119fa <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   117ea:	/--|----------> movea.l 19d54 <currentFloor>,a0
   117f0:	|  |            move.l 12(a0),d1
   117f4:	|  |            move.l 16(sp),d0
   117f8:	|  |            lsl.l #3,d0
   117fa:	|  |            movea.l d1,a0
   117fc:	|  |            adda.l d0,a0
   117fe:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   11802:	|  |            moveq #1,d0
   11804:	|  |            cmp.l 8(sp),d0
   11808:	|  |  /-------- bge.w 119f6 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   1180c:	|  |  |         moveq #1,d0
   1180e:	|  |  |         move.l d0,12(sp)
   11812:	|  |  |     /-- bra.w 1190c <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   11816:	|  |  |  /--|-> movea.l 19d54 <currentFloor>,a0
   1181c:	|  |  |  |  |   move.l 4(a0),d1
   11820:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   11826:	|  |  |  |  |   movea.l 12(a0),a0
   1182a:	|  |  |  |  |   move.l 16(sp),d0
   1182e:	|  |  |  |  |   lsl.l #3,d0
   11830:	|  |  |  |  |   adda.l d0,a0
   11832:	|  |  |  |  |   movea.l 4(a0),a0
   11836:	|  |  |  |  |   move.l 12(sp),d0
   1183a:	|  |  |  |  |   add.l d0,d0
   1183c:	|  |  |  |  |   add.l d0,d0
   1183e:	|  |  |  |  |   adda.l d0,a0
   11840:	|  |  |  |  |   move.l (a0),d0
   11842:	|  |  |  |  |   lsl.l #3,d0
   11844:	|  |  |  |  |   movea.l d1,a0
   11846:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   11848:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   1184c:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   11852:	|  |  |  |  |   move.l 4(a0),d1
   11856:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   1185c:	|  |  |  |  |   movea.l 12(a0),a0
   11860:	|  |  |  |  |   move.l 16(sp),d0
   11864:	|  |  |  |  |   lsl.l #3,d0
   11866:	|  |  |  |  |   adda.l d0,a0
   11868:	|  |  |  |  |   movea.l 4(a0),a0
   1186c:	|  |  |  |  |   move.l 12(sp),d0
   11870:	|  |  |  |  |   add.l d0,d0
   11872:	|  |  |  |  |   add.l d0,d0
   11874:	|  |  |  |  |   adda.l d0,a0
   11876:	|  |  |  |  |   move.l (a0),d0
   11878:	|  |  |  |  |   lsl.l #3,d0
   1187a:	|  |  |  |  |   movea.l d1,a0
   1187c:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1187e:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   11880:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   11886:	|  |  |  |  |   move.l 4(a0),d1
   1188a:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   11890:	|  |  |  |  |   movea.l 12(a0),a0
   11894:	|  |  |  |  |   move.l 16(sp),d0
   11898:	|  |  |  |  |   lsl.l #3,d0
   1189a:	|  |  |  |  |   adda.l d0,a0
   1189c:	|  |  |  |  |   movea.l 4(a0),a0
   118a0:	|  |  |  |  |   move.l 12(sp),d0
   118a4:	|  |  |  |  |   addi.l #1073741823,d0
   118aa:	|  |  |  |  |   add.l d0,d0
   118ac:	|  |  |  |  |   add.l d0,d0
   118ae:	|  |  |  |  |   adda.l d0,a0
   118b0:	|  |  |  |  |   move.l (a0),d0
   118b2:	|  |  |  |  |   lsl.l #3,d0
   118b4:	|  |  |  |  |   movea.l d1,a0
   118b6:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   118b8:	|  |  |  |  |   move.l 4(a0),d1
   118bc:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   118c2:	|  |  |  |  |   move.l 4(a0),d3
   118c6:	|  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   118cc:	|  |  |  |  |   movea.l 12(a0),a0
   118d0:	|  |  |  |  |   move.l 16(sp),d0
   118d4:	|  |  |  |  |   lsl.l #3,d0
   118d6:	|  |  |  |  |   adda.l d0,a0
   118d8:	|  |  |  |  |   movea.l 4(a0),a0
   118dc:	|  |  |  |  |   move.l 12(sp),d0
   118e0:	|  |  |  |  |   addi.l #1073741823,d0
   118e6:	|  |  |  |  |   add.l d0,d0
   118e8:	|  |  |  |  |   add.l d0,d0
   118ea:	|  |  |  |  |   adda.l d0,a0
   118ec:	|  |  |  |  |   move.l (a0),d0
   118ee:	|  |  |  |  |   lsl.l #3,d0
   118f0:	|  |  |  |  |   movea.l d3,a0
   118f2:	|  |  |  |  |   adda.l d0,a0
   118f4:	|  |  |  |  |   move.l (a0),d0
   118f6:	|  |  |  |  |   move.l d2,-(sp)
   118f8:	|  |  |  |  |   move.l a1,-(sp)
   118fa:	|  |  |  |  |   move.l d1,-(sp)
   118fc:	|  |  |  |  |   move.l d0,-(sp)
   118fe:	|  |  |  |  |   jsr 1158 <drawLine>
   11904:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   11908:	|  |  |  |  |   addq.l #1,12(sp)
   1190c:	|  |  |  |  \-> move.l 12(sp),d0
   11910:	|  |  |  |      cmp.l 8(sp),d0
   11914:	|  |  |  \----- blt.w 11816 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   11918:	|  |  |         movea.l 19d54 <currentFloor>,a0
   1191e:	|  |  |         move.l 4(a0),d1
   11922:	|  |  |         movea.l 19d54 <currentFloor>,a0
   11928:	|  |  |         movea.l 12(a0),a0
   1192c:	|  |  |         move.l 16(sp),d0
   11930:	|  |  |         lsl.l #3,d0
   11932:	|  |  |         adda.l d0,a0
   11934:	|  |  |         movea.l 4(a0),a0
   11938:	|  |  |         move.l 8(sp),d0
   1193c:	|  |  |         addi.l #1073741823,d0
   11942:	|  |  |         add.l d0,d0
   11944:	|  |  |         add.l d0,d0
   11946:	|  |  |         adda.l d0,a0
   11948:	|  |  |         move.l (a0),d0
   1194a:	|  |  |         lsl.l #3,d0
   1194c:	|  |  |         movea.l d1,a0
   1194e:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   11950:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   11954:	|  |  |         movea.l 19d54 <currentFloor>,a0
   1195a:	|  |  |         move.l 4(a0),d1
   1195e:	|  |  |         movea.l 19d54 <currentFloor>,a0
   11964:	|  |  |         movea.l 12(a0),a0
   11968:	|  |  |         move.l 16(sp),d0
   1196c:	|  |  |         lsl.l #3,d0
   1196e:	|  |  |         adda.l d0,a0
   11970:	|  |  |         movea.l 4(a0),a0
   11974:	|  |  |         move.l 8(sp),d0
   11978:	|  |  |         addi.l #1073741823,d0
   1197e:	|  |  |         add.l d0,d0
   11980:	|  |  |         add.l d0,d0
   11982:	|  |  |         adda.l d0,a0
   11984:	|  |  |         move.l (a0),d0
   11986:	|  |  |         lsl.l #3,d0
   11988:	|  |  |         movea.l d1,a0
   1198a:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1198c:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   1198e:	|  |  |         movea.l 19d54 <currentFloor>,a0
   11994:	|  |  |         move.l 4(a0),d1
   11998:	|  |  |         movea.l 19d54 <currentFloor>,a0
   1199e:	|  |  |         movea.l 12(a0),a0
   119a2:	|  |  |         move.l 16(sp),d0
   119a6:	|  |  |         lsl.l #3,d0
   119a8:	|  |  |         adda.l d0,a0
   119aa:	|  |  |         movea.l 4(a0),a0
   119ae:	|  |  |         move.l (a0),d0
   119b0:	|  |  |         lsl.l #3,d0
   119b2:	|  |  |         movea.l d1,a0
   119b4:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   119b6:	|  |  |         move.l 4(a0),d1
   119ba:	|  |  |         movea.l 19d54 <currentFloor>,a0
   119c0:	|  |  |         move.l 4(a0),d3
   119c4:	|  |  |         movea.l 19d54 <currentFloor>,a0
   119ca:	|  |  |         movea.l 12(a0),a0
   119ce:	|  |  |         move.l 16(sp),d0
   119d2:	|  |  |         lsl.l #3,d0
   119d4:	|  |  |         adda.l d0,a0
   119d6:	|  |  |         movea.l 4(a0),a0
   119da:	|  |  |         move.l (a0),d0
   119dc:	|  |  |         lsl.l #3,d0
   119de:	|  |  |         movea.l d3,a0
   119e0:	|  |  |         adda.l d0,a0
   119e2:	|  |  |         move.l (a0),d0
   119e4:	|  |  |         move.l d2,-(sp)
   119e6:	|  |  |         move.l a1,-(sp)
   119e8:	|  |  |         move.l d1,-(sp)
   119ea:	|  |  |         move.l d0,-(sp)
   119ec:	|  |  |         jsr 1158 <drawLine>
   119f2:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   119f6:	|  |  \-------> addq.l #1,16(sp)
   119fa:	|  \----------> movea.l 19d54 <currentFloor>,a0
   11a00:	|               move.l 8(a0),d0
   11a04:	|               cmp.l 16(sp),d0
   11a08:	\-------------- bgt.w 117ea <drawFloor+0x10>
        }
    }
}
   11a0c:	                nop
   11a0e:	                nop
   11a10:	                move.l (sp)+,d2
   11a12:	                move.l (sp)+,d3
   11a14:	                lea 12(sp),sp
   11a18:	                rts

00011a1a <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   11a1a:	                      lea -12(sp),sp
    int sharedVertices = 0;
   11a1e:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   11a22:	                      clr.l 4(sp)
   11a26:	   /----------------- bra.w 11ab8 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   11a2a:	/--|----------------> clr.l (sp)
   11a2c:	|  |     /----------- bra.s 11aa8 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   11a2e:	|  |  /--|----------> movea.l 16(sp),a0
   11a32:	|  |  |  |            move.l 4(a0),d1
   11a36:	|  |  |  |            move.l 4(sp),d0
   11a3a:	|  |  |  |            add.l d0,d0
   11a3c:	|  |  |  |            add.l d0,d0
   11a3e:	|  |  |  |            movea.l d1,a0
   11a40:	|  |  |  |            adda.l d0,a0
   11a42:	|  |  |  |            move.l (a0),d1
   11a44:	|  |  |  |            movea.l 20(sp),a0
   11a48:	|  |  |  |            movea.l 4(a0),a0
   11a4c:	|  |  |  |            move.l (sp),d0
   11a4e:	|  |  |  |            add.l d0,d0
   11a50:	|  |  |  |            add.l d0,d0
   11a52:	|  |  |  |            adda.l d0,a0
   11a54:	|  |  |  |            move.l (a0),d0
   11a56:	|  |  |  |            cmp.l d1,d0
   11a58:	|  |  |  |  /-------- bne.s 11aa6 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   11a5a:	|  |  |  |  |         move.l 8(sp),d0
   11a5e:	|  |  |  |  |         move.l d0,d1
   11a60:	|  |  |  |  |         addq.l #1,d1
   11a62:	|  |  |  |  |         move.l d1,8(sp)
   11a66:	|  |  |  |  |         tst.l d0
   11a68:	|  |  |  |  |     /-- beq.s 11a8a <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   11a6a:	|  |  |  |  |     |   movea.l 16(sp),a0
   11a6e:	|  |  |  |  |     |   move.l 4(a0),d1
   11a72:	|  |  |  |  |     |   move.l 4(sp),d0
   11a76:	|  |  |  |  |     |   add.l d0,d0
   11a78:	|  |  |  |  |     |   add.l d0,d0
   11a7a:	|  |  |  |  |     |   movea.l d1,a0
   11a7c:	|  |  |  |  |     |   adda.l d0,a0
   11a7e:	|  |  |  |  |     |   move.l (a0),d0
   11a80:	|  |  |  |  |     |   movea.l 28(sp),a0
   11a84:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   11a86:	|  |  |  |  |     |   moveq #1,d0
   11a88:	|  |  |  |  |  /--|-- bra.s 11ac8 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   11a8a:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   11a8e:	|  |  |  |  |  |      move.l 4(a0),d1
   11a92:	|  |  |  |  |  |      move.l 4(sp),d0
   11a96:	|  |  |  |  |  |      add.l d0,d0
   11a98:	|  |  |  |  |  |      add.l d0,d0
   11a9a:	|  |  |  |  |  |      movea.l d1,a0
   11a9c:	|  |  |  |  |  |      adda.l d0,a0
   11a9e:	|  |  |  |  |  |      move.l (a0),d0
   11aa0:	|  |  |  |  |  |      movea.l 24(sp),a0
   11aa4:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   11aa6:	|  |  |  |  \--|----> addq.l #1,(sp)
   11aa8:	|  |  |  \-----|----> movea.l 20(sp),a0
   11aac:	|  |  |        |      move.l (a0),d0
   11aae:	|  |  |        |      cmp.l (sp),d0
   11ab0:	|  |  \--------|----- bgt.w 11a2e <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   11ab4:	|  |           |      addq.l #1,4(sp)
   11ab8:	|  \-----------|----> movea.l 16(sp),a0
   11abc:	|              |      move.l (a0),d0
   11abe:	|              |      cmp.l 4(sp),d0
   11ac2:	\--------------|----- bgt.w 11a2a <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   11ac6:	               |      clr.w d0
}
   11ac8:	               \----> lea 12(sp),sp
   11acc:	                      rts

00011ace <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   11ace:	movea.l 19d54 <currentFloor>,a0
   11ad4:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   11ad8:	movea.l 19d54 <currentFloor>,a0
   11ade:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   11ae2:	movea.l 19d54 <currentFloor>,a0
   11ae8:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   11aec:	movea.l 19d54 <currentFloor>,a0
   11af2:	clr.l 16(a0)
}
   11af6:	nop
   11af8:	rts

00011afa <inFloor>:

int inFloor (int x, int y) {
   11afa:	          subq.l #8,sp
	int i, r = -1;
   11afc:	          moveq #-1,d0
   11afe:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   11b00:	          clr.l 4(sp)
   11b04:	   /----- bra.s 11b38 <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   11b06:	/--|----> movea.l 19d54 <currentFloor>,a0
   11b0c:	|  |      move.l 12(a0),d1
   11b10:	|  |      move.l 4(sp),d0
   11b14:	|  |      lsl.l #3,d0
   11b16:	|  |      add.l d1,d0
   11b18:	|  |      move.l 16(sp),-(sp)
   11b1c:	|  |      move.l 16(sp),-(sp)
   11b20:	|  |      move.l d0,-(sp)
   11b22:	|  |      jsr 11d04 <pointInFloorPolygon>
   11b28:	|  |      lea 12(sp),sp
   11b2c:	|  |      tst.w d0
   11b2e:	|  |  /-- beq.s 11b34 <inFloor+0x3a>
			r = i;
   11b30:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   11b34:	|  |  \-> addq.l #1,4(sp)
   11b38:	|  \----> movea.l 19d54 <currentFloor>,a0
   11b3e:	|         move.l 8(a0),d0
   11b42:	|         cmp.l 4(sp),d0
   11b46:	\-------- bgt.s 11b06 <inFloor+0xc>

	return r;
   11b48:	          move.l (sp),d0
}
   11b4a:	          addq.l #8,sp
   11b4c:	          rts

00011b4e <initFloor>:

BOOL initFloor () {
   11b4e:	       lea -12(sp),sp
   11b52:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   11b54:	       moveq #20,d0
   11b56:	       move.l d0,12(sp)
   11b5a:	       clr.l 8(sp)
   11b5e:	       move.l 19c4c <SysBase>,d0
   11b64:	       movea.l d0,a6
   11b66:	       move.l 12(sp),d0
   11b6a:	       move.l 8(sp),d1
   11b6e:	       jsr -684(a6)
   11b72:	       move.l d0,4(sp)
   11b76:	       move.l 4(sp),d0
   11b7a:	       move.l d0,19d54 <currentFloor>

    if(currentFloor == 0) {
   11b80:	       move.l 19d54 <currentFloor>,d0
   11b86:	/----- bne.s 11b9a <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   11b88:	|      pea 166b3 <main_sludge.c.2f5c5368+0xdc9>
   11b8e:	|      jsr 127a4 <KPrintF>
   11b94:	|      addq.l #4,sp
        return FALSE;
   11b96:	|      clr.w d0
   11b98:	|  /-- bra.s 11ba2 <initFloor+0x54>
    }

	noFloor ();
   11b9a:	\--|-> jsr 11ace <noFloor>
	return TRUE;
   11ba0:	   |   moveq #1,d0
}
   11ba2:	   \-> movea.l (sp)+,a6
   11ba4:	       lea 12(sp),sp
   11ba8:	       rts

00011baa <killFloor>:

void killFloor () {
   11baa:	       lea -24(sp),sp
   11bae:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   11bb0:	       clr.l 24(sp)
   11bb4:	   /-- bra.s 11c0e <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   11bb6:	/--|-> movea.l 19d54 <currentFloor>,a0
   11bbc:	|  |   move.l 12(a0),d1
   11bc0:	|  |   move.l 24(sp),d0
   11bc4:	|  |   lsl.l #3,d0
   11bc6:	|  |   movea.l d1,a0
   11bc8:	|  |   adda.l d0,a0
   11bca:	|  |   move.l 4(a0),8(sp)
   11bd0:	|  |   move.l 19c4c <SysBase>,d0
   11bd6:	|  |   movea.l d0,a6
   11bd8:	|  |   movea.l 8(sp),a1
   11bdc:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   11be0:	|  |   movea.l 19d54 <currentFloor>,a0
   11be6:	|  |   move.l 16(a0),d1
   11bea:	|  |   move.l 24(sp),d0
   11bee:	|  |   add.l d0,d0
   11bf0:	|  |   add.l d0,d0
   11bf2:	|  |   movea.l d1,a0
   11bf4:	|  |   adda.l d0,a0
   11bf6:	|  |   move.l (a0),4(sp)
   11bfa:	|  |   move.l 19c4c <SysBase>,d0
   11c00:	|  |   movea.l d0,a6
   11c02:	|  |   movea.l 4(sp),a1
   11c06:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   11c0a:	|  |   addq.l #1,24(sp)
   11c0e:	|  \-> movea.l 19d54 <currentFloor>,a0
   11c14:	|      move.l 8(a0),d0
   11c18:	|      cmp.l 24(sp),d0
   11c1c:	\----- bgt.s 11bb6 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   11c1e:	       movea.l 19d54 <currentFloor>,a0
   11c24:	       move.l 12(a0),20(sp)
   11c2a:	       move.l 19c4c <SysBase>,d0
   11c30:	       movea.l d0,a6
   11c32:	       movea.l 20(sp),a1
   11c36:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   11c3a:	       movea.l 19d54 <currentFloor>,a0
   11c40:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   11c44:	       movea.l 19d54 <currentFloor>,a0
   11c4a:	       move.l 4(a0),16(sp)
   11c50:	       move.l 19c4c <SysBase>,d0
   11c56:	       movea.l d0,a6
   11c58:	       movea.l 16(sp),a1
   11c5c:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   11c60:	       movea.l 19d54 <currentFloor>,a0
   11c66:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   11c6a:	       movea.l 19d54 <currentFloor>,a0
   11c70:	       move.l 16(a0),12(sp)
   11c76:	       move.l 19c4c <SysBase>,d0
   11c7c:	       movea.l d0,a6
   11c7e:	       movea.l 12(sp),a1
   11c82:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   11c86:	       movea.l 19d54 <currentFloor>,a0
   11c8c:	       clr.l 16(a0)
}
   11c90:	       nop
   11c92:	       movea.l (sp)+,a6
   11c94:	       lea 24(sp),sp
   11c98:	       rts

00011c9a <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   11c9a:	                   lea -12(sp),sp
	int sharedVertices = 0;
   11c9e:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   11ca2:	                   clr.l 4(sp)
   11ca6:	   /-------------- bra.s 11cf2 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   11ca8:	/--|-------------> clr.l (sp)
   11caa:	|  |     /-------- bra.s 11ce6 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   11cac:	|  |  /--|-------> move.l 20(sp),d1
   11cb0:	|  |  |  |         move.l 4(sp),d0
   11cb4:	|  |  |  |         add.l d0,d0
   11cb6:	|  |  |  |         add.l d0,d0
   11cb8:	|  |  |  |         movea.l d1,a0
   11cba:	|  |  |  |         adda.l d0,a0
   11cbc:	|  |  |  |         move.l (a0),d1
   11cbe:	|  |  |  |         movea.l 28(sp),a0
   11cc2:	|  |  |  |         move.l (sp),d0
   11cc4:	|  |  |  |         add.l d0,d0
   11cc6:	|  |  |  |         add.l d0,d0
   11cc8:	|  |  |  |         adda.l d0,a0
   11cca:	|  |  |  |         move.l (a0),d0
   11ccc:	|  |  |  |         cmp.l d1,d0
   11cce:	|  |  |  |     /-- bne.s 11ce4 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   11cd0:	|  |  |  |     |   move.l 8(sp),d0
   11cd4:	|  |  |  |     |   move.l d0,d1
   11cd6:	|  |  |  |     |   addq.l #1,d1
   11cd8:	|  |  |  |     |   move.l d1,8(sp)
   11cdc:	|  |  |  |     |   tst.l d0
   11cde:	|  |  |  |     +-- beq.s 11ce4 <polysShareSide+0x4a>
   11ce0:	|  |  |  |     |   moveq #1,d0
   11ce2:	|  |  |  |  /--|-- bra.s 11cfe <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   11ce4:	|  |  |  |  |  \-> addq.l #1,(sp)
   11ce6:	|  |  |  \--|----> move.l 24(sp),d0
   11cea:	|  |  |     |      cmp.l (sp),d0
   11cec:	|  |  \-----|----- bgt.s 11cac <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   11cee:	|  |        |      addq.l #1,4(sp)
   11cf2:	|  \--------|----> move.l 16(sp),d0
   11cf6:	|           |      cmp.l 4(sp),d0
   11cfa:	\-----------|----- bgt.s 11ca8 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   11cfc:	            |      clr.w d0
}
   11cfe:	            \----> lea 12(sp),sp
   11d02:	                   rts

00011d04 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   11d04:	             lea -28(sp),sp
   11d08:	             move.l d3,-(sp)
   11d0a:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   11d0c:	             clr.l 32(sp)
   11d10:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   11d14:	             movea.l 40(sp),a0
   11d18:	             move.l (a0),d0
   11d1a:	             move.l d0,d1
   11d1c:	             subq.l #1,d1
   11d1e:	             move.l d1,28(sp)
   11d22:	   /-------- bra.w 11f1c <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   11d26:	/--|-------> movea.l 19d54 <currentFloor>,a0
   11d2c:	|  |         move.l 4(a0),d1
   11d30:	|  |         movea.l 40(sp),a0
   11d34:	|  |         movea.l 4(a0),a0
   11d38:	|  |         move.l 32(sp),d0
   11d3c:	|  |         add.l d0,d0
   11d3e:	|  |         add.l d0,d0
   11d40:	|  |         adda.l d0,a0
   11d42:	|  |         move.l (a0),d0
   11d44:	|  |         lsl.l #3,d0
   11d46:	|  |         movea.l d1,a0
   11d48:	|  |         adda.l d0,a0
   11d4a:	|  |         move.l (a0),d0
   11d4c:	|  |         move.l d0,-(sp)
   11d4e:	|  |         jsr 12bfc <__floatsisf>
   11d54:	|  |         addq.l #4,sp
   11d56:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   11d5a:	|  |         movea.l 19d54 <currentFloor>,a0
   11d60:	|  |         move.l 4(a0),d1
   11d64:	|  |         movea.l 40(sp),a0
   11d68:	|  |         movea.l 4(a0),a0
   11d6c:	|  |         move.l 32(sp),d0
   11d70:	|  |         add.l d0,d0
   11d72:	|  |         add.l d0,d0
   11d74:	|  |         adda.l d0,a0
   11d76:	|  |         move.l (a0),d0
   11d78:	|  |         lsl.l #3,d0
   11d7a:	|  |         movea.l d1,a0
   11d7c:	|  |         adda.l d0,a0
   11d7e:	|  |         move.l 4(a0),d0
   11d82:	|  |         move.l d0,-(sp)
   11d84:	|  |         jsr 12bfc <__floatsisf>
   11d8a:	|  |         addq.l #4,sp
   11d8c:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   11d90:	|  |         movea.l 19d54 <currentFloor>,a0
   11d96:	|  |         move.l 4(a0),d1
   11d9a:	|  |         movea.l 40(sp),a0
   11d9e:	|  |         movea.l 4(a0),a0
   11da2:	|  |         move.l 28(sp),d0
   11da6:	|  |         add.l d0,d0
   11da8:	|  |         add.l d0,d0
   11daa:	|  |         adda.l d0,a0
   11dac:	|  |         move.l (a0),d0
   11dae:	|  |         lsl.l #3,d0
   11db0:	|  |         movea.l d1,a0
   11db2:	|  |         adda.l d0,a0
   11db4:	|  |         move.l (a0),d0
   11db6:	|  |         move.l d0,-(sp)
   11db8:	|  |         jsr 12bfc <__floatsisf>
   11dbe:	|  |         addq.l #4,sp
   11dc0:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   11dc4:	|  |         movea.l 19d54 <currentFloor>,a0
   11dca:	|  |         move.l 4(a0),d1
   11dce:	|  |         movea.l 40(sp),a0
   11dd2:	|  |         movea.l 4(a0),a0
   11dd6:	|  |         move.l 28(sp),d0
   11dda:	|  |         add.l d0,d0
   11ddc:	|  |         add.l d0,d0
   11dde:	|  |         adda.l d0,a0
   11de0:	|  |         move.l (a0),d0
   11de2:	|  |         lsl.l #3,d0
   11de4:	|  |         movea.l d1,a0
   11de6:	|  |         adda.l d0,a0
   11de8:	|  |         move.l 4(a0),d0
   11dec:	|  |         move.l d0,-(sp)
   11dee:	|  |         jsr 12bfc <__floatsisf>
   11df4:	|  |         addq.l #4,sp
   11df6:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   11dfa:	|  |         move.l 48(sp),-(sp)
   11dfe:	|  |         jsr 12bfc <__floatsisf>
   11e04:	|  |         addq.l #4,sp
   11e06:	|  |         move.l d0,-(sp)
   11e08:	|  |         move.l 20(sp),-(sp)
   11e0c:	|  |         jsr 12d9e <__lesf2>
   11e12:	|  |         addq.l #8,sp
   11e14:	|  |         tst.l d0
   11e16:	|  |     /-- bgt.s 11e36 <pointInFloorPolygon+0x132>
   11e18:	|  |     |   move.l 48(sp),-(sp)
   11e1c:	|  |     |   jsr 12bfc <__floatsisf>
   11e22:	|  |     |   addq.l #4,sp
   11e24:	|  |     |   move.l d0,-(sp)
   11e26:	|  |     |   move.l 12(sp),-(sp)
   11e2a:	|  |     |   jsr 12d68 <__gtsf2>
   11e30:	|  |     |   addq.l #8,sp
   11e32:	|  |     |   tst.l d0
   11e34:	|  |  /--|-- bgt.s 11e76 <pointInFloorPolygon+0x172>
   11e36:	|  |  |  \-> move.l 48(sp),-(sp)
   11e3a:	|  |  |      jsr 12bfc <__floatsisf>
   11e40:	|  |  |      addq.l #4,sp
   11e42:	|  |  |      move.l d0,-(sp)
   11e44:	|  |  |      move.l 12(sp),-(sp)
   11e48:	|  |  |      jsr 12d9e <__lesf2>
   11e4e:	|  |  |      addq.l #8,sp
   11e50:	|  |  |      tst.l d0
   11e52:	|  |  |  /-- bgt.w 11f0c <pointInFloorPolygon+0x208>
   11e56:	|  |  |  |   move.l 48(sp),-(sp)
   11e5a:	|  |  |  |   jsr 12bfc <__floatsisf>
   11e60:	|  |  |  |   addq.l #4,sp
   11e62:	|  |  |  |   move.l d0,-(sp)
   11e64:	|  |  |  |   move.l 20(sp),-(sp)
   11e68:	|  |  |  |   jsr 12d68 <__gtsf2>
   11e6e:	|  |  |  |   addq.l #8,sp
   11e70:	|  |  |  |   tst.l d0
   11e72:	|  |  |  +-- ble.w 11f0c <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   11e76:	|  |  \--|-> move.l 44(sp),-(sp)
   11e7a:	|  |     |   jsr 12bfc <__floatsisf>
   11e80:	|  |     |   addq.l #4,sp
   11e82:	|  |     |   move.l d0,d3
   11e84:	|  |     |   move.l 20(sp),-(sp)
   11e88:	|  |     |   move.l 16(sp),-(sp)
   11e8c:	|  |     |   jsr 12ef0 <__subsf3>
   11e92:	|  |     |   addq.l #8,sp
   11e94:	|  |     |   move.l d0,d2
   11e96:	|  |     |   move.l 48(sp),-(sp)
   11e9a:	|  |     |   jsr 12bfc <__floatsisf>
   11ea0:	|  |     |   addq.l #4,sp
   11ea2:	|  |     |   move.l 16(sp),-(sp)
   11ea6:	|  |     |   move.l d0,-(sp)
   11ea8:	|  |     |   jsr 12ef0 <__subsf3>
   11eae:	|  |     |   addq.l #8,sp
   11eb0:	|  |     |   move.l d0,-(sp)
   11eb2:	|  |     |   move.l d2,-(sp)
   11eb4:	|  |     |   jsr 12cae <__mulsf3>
   11eba:	|  |     |   addq.l #8,sp
   11ebc:	|  |     |   move.l d0,d2
   11ebe:	|  |     |   move.l 16(sp),-(sp)
   11ec2:	|  |     |   move.l 12(sp),-(sp)
   11ec6:	|  |     |   jsr 12ef0 <__subsf3>
   11ecc:	|  |     |   addq.l #8,sp
   11ece:	|  |     |   move.l d0,-(sp)
   11ed0:	|  |     |   move.l d2,-(sp)
   11ed2:	|  |     |   jsr 12aa8 <__divsf3>
   11ed8:	|  |     |   addq.l #8,sp
   11eda:	|  |     |   move.l 20(sp),-(sp)
   11ede:	|  |     |   move.l d0,-(sp)
   11ee0:	|  |     |   jsr 129ae <__addsf3>
   11ee6:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   11ee8:	|  |     |   move.l d0,-(sp)
   11eea:	|  |     |   move.l d3,-(sp)
   11eec:	|  |     |   jsr 12e22 <__ltsf2>
   11ef2:	|  |     |   addq.l #8,sp
   11ef4:	|  |     |   tst.l d0
   11ef6:	|  |     +-- bge.s 11f0c <pointInFloorPolygon+0x208>

			c = !c;
   11ef8:	|  |     |   tst.l 24(sp)
   11efc:	|  |     |   seq d0
   11efe:	|  |     |   neg.b d0
   11f00:	|  |     |   move.b d0,d0
   11f02:	|  |     |   andi.l #255,d0
   11f08:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   11f0c:	|  |     \-> move.l 32(sp),d0
   11f10:	|  |         move.l d0,d1
   11f12:	|  |         addq.l #1,d1
   11f14:	|  |         move.l d1,32(sp)
   11f18:	|  |         move.l d0,28(sp)
   11f1c:	|  \-------> movea.l 40(sp),a0
   11f20:	|            move.l (a0),d0
   11f22:	|            cmp.l 32(sp),d0
   11f26:	\----------- bgt.w 11d26 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   11f2a:	             tst.l 24(sp)
   11f2e:	             sne d0
   11f30:	             neg.b d0
   11f32:	             move.b d0,d0
   11f34:	             andi.w #255,d0
}
   11f38:	             move.l (sp)+,d2
   11f3a:	             move.l (sp)+,d3
   11f3c:	             lea 28(sp),sp
   11f40:	             rts

00011f42 <setFloor>:

BOOL setFloor (int fileNum) {
   11f42:	                               lea -132(sp),sp
   11f46:	                               move.l a6,-(sp)
   11f48:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   11f4a:	                               jsr 11baa <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   11f50:	                               move.l 144(sp),-(sp)
   11f54:	                               jsr 421c <openFileFromNum>
   11f5a:	                               addq.l #4,sp
   11f5c:	                               tst.l d0
   11f5e:	                           /-- bne.s 11f66 <setFloor+0x24>
   11f60:	                           |   clr.w d0
   11f62:	/--------------------------|-- bra.w 126b2 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   11f66:	|                          \-> movea.l 19d54 <currentFloor>,a0
   11f6c:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   11f70:	|                              move.l 19c34 <bigDataFile>,118(sp)
   11f78:	|                              move.l 19c54 <DOSBase>,d0
   11f7e:	|                              movea.l d0,a6
   11f80:	|                              move.l 118(sp),d1
   11f84:	|                              jsr -306(a6)
   11f88:	|                              move.l d0,114(sp)
   11f8c:	|                              move.l 114(sp),d0
   11f90:	|                              movea.l 19d54 <currentFloor>,a0
   11f96:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   11f9a:	|                              movea.l 19d54 <currentFloor>,a0
   11fa0:	|                              move.l 8(a0),d0
   11fa4:	|                              lsl.l #3,d0
   11fa6:	|                              move.l d0,110(sp)
   11faa:	|                              clr.l 106(sp)
   11fae:	|                              move.l 19c4c <SysBase>,d0
   11fb4:	|                              movea.l d0,a6
   11fb6:	|                              move.l 110(sp),d0
   11fba:	|                              move.l 106(sp),d1
   11fbe:	|                              jsr -684(a6)
   11fc2:	|                              move.l d0,102(sp)
   11fc6:	|                              move.l 102(sp),d0
   11fca:	|                              movea.l 19d54 <currentFloor>,a0
   11fd0:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   11fd4:	|                              movea.l 19d54 <currentFloor>,a0
   11fda:	|                              move.l 12(a0),d0
   11fde:	|                          /-- bne.s 11ff4 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   11fe0:	|                          |   pea 166d7 <main_sludge.c.2f5c5368+0xded>
   11fe6:	|                          |   jsr 127a4 <KPrintF>
   11fec:	|                          |   addq.l #4,sp
		return FALSE;
   11fee:	|                          |   clr.w d0
   11ff0:	+--------------------------|-- bra.w 126b2 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   11ff4:	|                          \-> clr.l 136(sp)
   11ff8:	|                    /-------- bra.w 12110 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   11ffc:	|                 /--|-------> move.l 19c34 <bigDataFile>,26(sp)
   12004:	|                 |  |         move.l 19c54 <DOSBase>,d0
   1200a:	|                 |  |         movea.l d0,a6
   1200c:	|                 |  |         move.l 26(sp),d1
   12010:	|                 |  |         jsr -306(a6)
   12014:	|                 |  |         move.l d0,22(sp)
   12018:	|                 |  |         move.l 22(sp),d1
   1201c:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   12022:	|                 |  |         movea.l 12(a0),a0
   12026:	|                 |  |         move.l 136(sp),d0
   1202a:	|                 |  |         lsl.l #3,d0
   1202c:	|                 |  |         adda.l d0,a0
   1202e:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   12030:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   12036:	|                 |  |         move.l 12(a0),d1
   1203a:	|                 |  |         move.l 136(sp),d0
   1203e:	|                 |  |         lsl.l #3,d0
   12040:	|                 |  |         movea.l d1,a0
   12042:	|                 |  |         adda.l d0,a0
   12044:	|                 |  |         move.l (a0),d0
   12046:	|                 |  |         add.l d0,d0
   12048:	|                 |  |         add.l d0,d0
   1204a:	|                 |  |         move.l d0,18(sp)
   1204e:	|                 |  |         clr.l 14(sp)
   12052:	|                 |  |         move.l 19c4c <SysBase>,d0
   12058:	|                 |  |         movea.l d0,a6
   1205a:	|                 |  |         move.l 18(sp),d0
   1205e:	|                 |  |         move.l 14(sp),d1
   12062:	|                 |  |         jsr -684(a6)
   12066:	|                 |  |         move.l d0,10(sp)
   1206a:	|                 |  |         move.l 10(sp),d1
   1206e:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   12074:	|                 |  |         movea.l 12(a0),a0
   12078:	|                 |  |         move.l 136(sp),d0
   1207c:	|                 |  |         lsl.l #3,d0
   1207e:	|                 |  |         adda.l d0,a0
   12080:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   12084:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   1208a:	|                 |  |         move.l 12(a0),d1
   1208e:	|                 |  |         move.l 136(sp),d0
   12092:	|                 |  |         lsl.l #3,d0
   12094:	|                 |  |         movea.l d1,a0
   12096:	|                 |  |         adda.l d0,a0
   12098:	|                 |  |         move.l 4(a0),d0
   1209c:	|                 |  |     /-- bne.s 120b2 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   1209e:	|                 |  |     |   pea 166d7 <main_sludge.c.2f5c5368+0xded>
   120a4:	|                 |  |     |   jsr 127a4 <KPrintF>
   120aa:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   120ac:	|                 |  |     |   clr.w d0
   120ae:	+-----------------|--|-----|-- bra.w 126b2 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   120b2:	|                 |  |     \-> clr.l 132(sp)
   120b6:	|                 |  |     /-- bra.s 120f0 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   120b8:	|                 |  |  /--|-> move.l 19c34 <bigDataFile>,d1
   120be:	|                 |  |  |  |   movea.l 19d54 <currentFloor>,a0
   120c4:	|                 |  |  |  |   movea.l 12(a0),a0
   120c8:	|                 |  |  |  |   move.l 136(sp),d0
   120cc:	|                 |  |  |  |   lsl.l #3,d0
   120ce:	|                 |  |  |  |   adda.l d0,a0
   120d0:	|                 |  |  |  |   movea.l 4(a0),a0
   120d4:	|                 |  |  |  |   move.l 132(sp),d0
   120d8:	|                 |  |  |  |   add.l d0,d0
   120da:	|                 |  |  |  |   add.l d0,d0
   120dc:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   120e0:	|                 |  |  |  |   move.l d1,-(sp)
   120e2:	|                 |  |  |  |   jsr 6bc <get2bytes>
   120e8:	|                 |  |  |  |   addq.l #4,sp
   120ea:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   120ec:	|                 |  |  |  |   addq.l #1,132(sp)
   120f0:	|                 |  |  |  \-> movea.l 19d54 <currentFloor>,a0
   120f6:	|                 |  |  |      move.l 12(a0),d1
   120fa:	|                 |  |  |      move.l 136(sp),d0
   120fe:	|                 |  |  |      lsl.l #3,d0
   12100:	|                 |  |  |      movea.l d1,a0
   12102:	|                 |  |  |      adda.l d0,a0
   12104:	|                 |  |  |      move.l (a0),d0
   12106:	|                 |  |  |      cmp.l 132(sp),d0
   1210a:	|                 |  |  \----- bgt.s 120b8 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1210c:	|                 |  |         addq.l #1,136(sp)
   12110:	|                 |  \-------> movea.l 19d54 <currentFloor>,a0
   12116:	|                 |            move.l 8(a0),d0
   1211a:	|                 |            cmp.l 136(sp),d0
   1211e:	|                 \----------- bgt.w 11ffc <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   12122:	|                              move.l 19c34 <bigDataFile>,d0
   12128:	|                              move.l d0,-(sp)
   1212a:	|                              jsr 6bc <get2bytes>
   12130:	|                              addq.l #4,sp
   12132:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   12136:	|                              move.l 136(sp),d0
   1213a:	|                              lsl.l #3,d0
   1213c:	|                              move.l d0,98(sp)
   12140:	|                              clr.l 94(sp)
   12144:	|                              move.l 19c4c <SysBase>,d0
   1214a:	|                              movea.l d0,a6
   1214c:	|                              move.l 98(sp),d0
   12150:	|                              move.l 94(sp),d1
   12154:	|                              jsr -684(a6)
   12158:	|                              move.l d0,90(sp)
   1215c:	|                              move.l 90(sp),d0
   12160:	|                              movea.l 19d54 <currentFloor>,a0
   12166:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   1216a:	|                              movea.l 19d54 <currentFloor>,a0
   12170:	|                              move.l 4(a0),d0
   12174:	|                          /-- bne.s 1218a <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   12176:	|                          |   pea 166d7 <main_sludge.c.2f5c5368+0xded>
   1217c:	|                          |   jsr 127a4 <KPrintF>
   12182:	|                          |   addq.l #4,sp
		return FALSE;
   12184:	|                          |   clr.w d0
   12186:	+--------------------------|-- bra.w 126b2 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   1218a:	|                          \-> clr.l 132(sp)
   1218e:	|                          /-- bra.s 121e2 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   12190:	|                       /--|-> move.l 19c34 <bigDataFile>,d1
   12196:	|                       |  |   movea.l 19d54 <currentFloor>,a0
   1219c:	|                       |  |   movea.l 4(a0),a0
   121a0:	|                       |  |   move.l 132(sp),d0
   121a4:	|                       |  |   lsl.l #3,d0
   121a6:	|                       |  |   lea (0,a0,d0.l),a2
   121aa:	|                       |  |   move.l d1,-(sp)
   121ac:	|                       |  |   jsr 6bc <get2bytes>
   121b2:	|                       |  |   addq.l #4,sp
   121b4:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   121b6:	|                       |  |   move.l 19c34 <bigDataFile>,d1
   121bc:	|                       |  |   movea.l 19d54 <currentFloor>,a0
   121c2:	|                       |  |   movea.l 4(a0),a0
   121c6:	|                       |  |   move.l 132(sp),d0
   121ca:	|                       |  |   lsl.l #3,d0
   121cc:	|                       |  |   lea (0,a0,d0.l),a2
   121d0:	|                       |  |   move.l d1,-(sp)
   121d2:	|                       |  |   jsr 6bc <get2bytes>
   121d8:	|                       |  |   addq.l #4,sp
   121da:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   121de:	|                       |  |   addq.l #1,132(sp)
   121e2:	|                       |  \-> move.l 132(sp),d0
   121e6:	|                       |      cmp.l 136(sp),d0
   121ea:	|                       \----- blt.s 12190 <setFloor+0x24e>
	}

	finishAccess ();
   121ec:	|                              jsr 4114 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   121f2:	|                              movea.l 19d54 <currentFloor>,a0
   121f8:	|                              move.l 8(a0),d0
   121fc:	|                              add.l d0,d0
   121fe:	|                              add.l d0,d0
   12200:	|                              move.l d0,86(sp)
   12204:	|                              clr.l 82(sp)
   12208:	|                              move.l 19c4c <SysBase>,d0
   1220e:	|                              movea.l d0,a6
   12210:	|                              move.l 86(sp),d0
   12214:	|                              move.l 82(sp),d1
   12218:	|                              jsr -684(a6)
   1221c:	|                              move.l d0,78(sp)
   12220:	|                              move.l 78(sp),d0
   12224:	|                              movea.l 19d54 <currentFloor>,a0
   1222a:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   1222e:	|                              movea.l 19d54 <currentFloor>,a0
   12234:	|                              move.l 8(a0),d0
   12238:	|                              add.l d0,d0
   1223a:	|                              add.l d0,d0
   1223c:	|                              move.l d0,74(sp)
   12240:	|                              clr.l 70(sp)
   12244:	|                              move.l 19c4c <SysBase>,d0
   1224a:	|                              movea.l d0,a6
   1224c:	|                              move.l 74(sp),d0
   12250:	|                              move.l 70(sp),d1
   12254:	|                              jsr -684(a6)
   12258:	|                              move.l d0,66(sp)
   1225c:	|                              move.l 66(sp),d0
   12260:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   12264:	|                              movea.l 19d54 <currentFloor>,a0
   1226a:	|                              move.l 16(a0),d0
   1226e:	|                          /-- bne.s 12284 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   12270:	|                          |   pea 166d7 <main_sludge.c.2f5c5368+0xded>
   12276:	|                          |   jsr 127a4 <KPrintF>
   1227c:	|                          |   addq.l #4,sp
		return FALSE;
   1227e:	|                          |   clr.w d0
   12280:	+--------------------------|-- bra.w 126b2 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12284:	|                          \-> clr.l 136(sp)
   12288:	|                    /-------- bra.w 123ac <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1228c:	|                 /--|-------> movea.l 19d54 <currentFloor>,a0
   12292:	|                 |  |         move.l 8(a0),d0
   12296:	|                 |  |         add.l d0,d0
   12298:	|                 |  |         add.l d0,d0
   1229a:	|                 |  |         move.l d0,50(sp)
   1229e:	|                 |  |         clr.l 46(sp)
   122a2:	|                 |  |         move.l 19c4c <SysBase>,d0
   122a8:	|                 |  |         movea.l d0,a6
   122aa:	|                 |  |         move.l 50(sp),d0
   122ae:	|                 |  |         move.l 46(sp),d1
   122b2:	|                 |  |         jsr -684(a6)
   122b6:	|                 |  |         move.l d0,42(sp)
   122ba:	|                 |  |         move.l 42(sp),d0
   122be:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   122c4:	|                 |  |         movea.l 16(a0),a0
   122c8:	|                 |  |         move.l 136(sp),d1
   122cc:	|                 |  |         add.l d1,d1
   122ce:	|                 |  |         add.l d1,d1
   122d0:	|                 |  |         adda.l d1,a0
   122d2:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   122d4:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   122da:	|                 |  |         move.l 8(a0),d0
   122de:	|                 |  |         add.l d0,d0
   122e0:	|                 |  |         add.l d0,d0
   122e2:	|                 |  |         move.l d0,38(sp)
   122e6:	|                 |  |         clr.l 34(sp)
   122ea:	|                 |  |         move.l 19c4c <SysBase>,d0
   122f0:	|                 |  |         movea.l d0,a6
   122f2:	|                 |  |         move.l 38(sp),d0
   122f6:	|                 |  |         move.l 34(sp),d1
   122fa:	|                 |  |         jsr -684(a6)
   122fe:	|                 |  |         move.l d0,30(sp)
   12302:	|                 |  |         move.l 30(sp),d1
   12306:	|                 |  |         move.l 136(sp),d0
   1230a:	|                 |  |         add.l d0,d0
   1230c:	|                 |  |         add.l d0,d0
   1230e:	|                 |  |         movea.l 62(sp),a0
   12312:	|                 |  |         adda.l d0,a0
   12314:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   12316:	|                 |  |         movea.l 19d54 <currentFloor>,a0
   1231c:	|                 |  |         move.l 16(a0),d1
   12320:	|                 |  |         move.l 136(sp),d0
   12324:	|                 |  |         add.l d0,d0
   12326:	|                 |  |         add.l d0,d0
   12328:	|                 |  |         movea.l d1,a0
   1232a:	|                 |  |         adda.l d0,a0
   1232c:	|                 |  |         move.l (a0),d0
   1232e:	|                 |  |     /-- bne.s 12344 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   12330:	|                 |  |     |   pea 166d7 <main_sludge.c.2f5c5368+0xded>
   12336:	|                 |  |     |   jsr 127a4 <KPrintF>
   1233c:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   1233e:	|                 |  |     |   clr.w d0
   12340:	+-----------------|--|-----|-- bra.w 126b2 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12344:	|                 |  |     \-> clr.l 132(sp)
   12348:	|                 |  |     /-- bra.s 12398 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   1234a:	|                 |  |  /--|-> movea.l 19d54 <currentFloor>,a0
   12350:	|                 |  |  |  |   move.l 16(a0),d1
   12354:	|                 |  |  |  |   move.l 136(sp),d0
   12358:	|                 |  |  |  |   add.l d0,d0
   1235a:	|                 |  |  |  |   add.l d0,d0
   1235c:	|                 |  |  |  |   movea.l d1,a0
   1235e:	|                 |  |  |  |   adda.l d0,a0
   12360:	|                 |  |  |  |   move.l (a0),d1
   12362:	|                 |  |  |  |   move.l 132(sp),d0
   12366:	|                 |  |  |  |   add.l d0,d0
   12368:	|                 |  |  |  |   add.l d0,d0
   1236a:	|                 |  |  |  |   movea.l d1,a0
   1236c:	|                 |  |  |  |   adda.l d0,a0
   1236e:	|                 |  |  |  |   moveq #-1,d1
   12370:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   12372:	|                 |  |  |  |   move.l 136(sp),d0
   12376:	|                 |  |  |  |   add.l d0,d0
   12378:	|                 |  |  |  |   add.l d0,d0
   1237a:	|                 |  |  |  |   movea.l 62(sp),a0
   1237e:	|                 |  |  |  |   adda.l d0,a0
   12380:	|                 |  |  |  |   move.l (a0),d1
   12382:	|                 |  |  |  |   move.l 132(sp),d0
   12386:	|                 |  |  |  |   add.l d0,d0
   12388:	|                 |  |  |  |   add.l d0,d0
   1238a:	|                 |  |  |  |   movea.l d1,a0
   1238c:	|                 |  |  |  |   adda.l d0,a0
   1238e:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12394:	|                 |  |  |  |   addq.l #1,132(sp)
   12398:	|                 |  |  |  \-> movea.l 19d54 <currentFloor>,a0
   1239e:	|                 |  |  |      move.l 8(a0),d0
   123a2:	|                 |  |  |      cmp.l 132(sp),d0
   123a6:	|                 |  |  \----- bgt.s 1234a <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   123a8:	|                 |  |         addq.l #1,136(sp)
   123ac:	|                 |  \-------> movea.l 19d54 <currentFloor>,a0
   123b2:	|                 |            move.l 8(a0),d0
   123b6:	|                 |            cmp.l 136(sp),d0
   123ba:	|                 \----------- bgt.w 1228c <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   123be:	|                              clr.l 136(sp)
   123c2:	|              /-------------- bra.w 124c8 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   123c6:	|           /--|-------------> clr.l 132(sp)
   123ca:	|           |  |     /-------- bra.w 124b2 <setFloor+0x570>
			if (i != j) {
   123ce:	|           |  |  /--|-------> move.l 136(sp),d0
   123d2:	|           |  |  |  |         cmp.l 132(sp),d0
   123d6:	|           |  |  |  |     /-- beq.w 12468 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   123da:	|           |  |  |  |     |   movea.l 19d54 <currentFloor>,a0
   123e0:	|           |  |  |  |     |   move.l 12(a0),d1
   123e4:	|           |  |  |  |     |   move.l 132(sp),d0
   123e8:	|           |  |  |  |     |   lsl.l #3,d0
   123ea:	|           |  |  |  |     |   movea.l d1,a1
   123ec:	|           |  |  |  |     |   adda.l d0,a1
   123ee:	|           |  |  |  |     |   movea.l 19d54 <currentFloor>,a0
   123f4:	|           |  |  |  |     |   move.l 12(a0),d1
   123f8:	|           |  |  |  |     |   move.l 136(sp),d0
   123fc:	|           |  |  |  |     |   lsl.l #3,d0
   123fe:	|           |  |  |  |     |   movea.l d1,a0
   12400:	|           |  |  |  |     |   adda.l d0,a0
   12402:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   12406:	|           |  |  |  |     |   move.l (a1),-(sp)
   12408:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   1240c:	|           |  |  |  |     |   move.l (a0),-(sp)
   1240e:	|           |  |  |  |     |   jsr 11c9a <polysShareSide>
   12414:	|           |  |  |  |     |   lea 16(sp),sp
   12418:	|           |  |  |  |     |   tst.w d0
   1241a:	|           |  |  |  |  /--|-- beq.w 124ae <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   1241e:	|           |  |  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   12424:	|           |  |  |  |  |  |   move.l 16(a0),d1
   12428:	|           |  |  |  |  |  |   move.l 136(sp),d0
   1242c:	|           |  |  |  |  |  |   add.l d0,d0
   1242e:	|           |  |  |  |  |  |   add.l d0,d0
   12430:	|           |  |  |  |  |  |   movea.l d1,a0
   12432:	|           |  |  |  |  |  |   adda.l d0,a0
   12434:	|           |  |  |  |  |  |   move.l (a0),d1
   12436:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1243a:	|           |  |  |  |  |  |   add.l d0,d0
   1243c:	|           |  |  |  |  |  |   add.l d0,d0
   1243e:	|           |  |  |  |  |  |   movea.l d1,a0
   12440:	|           |  |  |  |  |  |   adda.l d0,a0
   12442:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   12446:	|           |  |  |  |  |  |   move.l 136(sp),d0
   1244a:	|           |  |  |  |  |  |   add.l d0,d0
   1244c:	|           |  |  |  |  |  |   add.l d0,d0
   1244e:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   12452:	|           |  |  |  |  |  |   adda.l d0,a0
   12454:	|           |  |  |  |  |  |   move.l (a0),d1
   12456:	|           |  |  |  |  |  |   move.l 132(sp),d0
   1245a:	|           |  |  |  |  |  |   add.l d0,d0
   1245c:	|           |  |  |  |  |  |   add.l d0,d0
   1245e:	|           |  |  |  |  |  |   movea.l d1,a0
   12460:	|           |  |  |  |  |  |   adda.l d0,a0
   12462:	|           |  |  |  |  |  |   moveq #1,d1
   12464:	|           |  |  |  |  |  |   move.l d1,(a0)
   12466:	|           |  |  |  |  +--|-- bra.s 124ae <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   12468:	|           |  |  |  |  |  \-> movea.l 19d54 <currentFloor>,a0
   1246e:	|           |  |  |  |  |      move.l 16(a0),d1
   12472:	|           |  |  |  |  |      move.l 136(sp),d0
   12476:	|           |  |  |  |  |      add.l d0,d0
   12478:	|           |  |  |  |  |      add.l d0,d0
   1247a:	|           |  |  |  |  |      movea.l d1,a0
   1247c:	|           |  |  |  |  |      adda.l d0,a0
   1247e:	|           |  |  |  |  |      move.l (a0),d1
   12480:	|           |  |  |  |  |      move.l 132(sp),d0
   12484:	|           |  |  |  |  |      add.l d0,d0
   12486:	|           |  |  |  |  |      add.l d0,d0
   12488:	|           |  |  |  |  |      movea.l d1,a0
   1248a:	|           |  |  |  |  |      adda.l d0,a0
   1248c:	|           |  |  |  |  |      moveq #-2,d0
   1248e:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   12490:	|           |  |  |  |  |      move.l 136(sp),d0
   12494:	|           |  |  |  |  |      add.l d0,d0
   12496:	|           |  |  |  |  |      add.l d0,d0
   12498:	|           |  |  |  |  |      movea.l 62(sp),a0
   1249c:	|           |  |  |  |  |      adda.l d0,a0
   1249e:	|           |  |  |  |  |      move.l (a0),d1
   124a0:	|           |  |  |  |  |      move.l 132(sp),d0
   124a4:	|           |  |  |  |  |      add.l d0,d0
   124a6:	|           |  |  |  |  |      add.l d0,d0
   124a8:	|           |  |  |  |  |      movea.l d1,a0
   124aa:	|           |  |  |  |  |      adda.l d0,a0
   124ac:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   124ae:	|           |  |  |  |  \----> addq.l #1,132(sp)
   124b2:	|           |  |  |  \-------> movea.l 19d54 <currentFloor>,a0
   124b8:	|           |  |  |            move.l 8(a0),d0
   124bc:	|           |  |  |            cmp.l 132(sp),d0
   124c0:	|           |  |  \----------- bgt.w 123ce <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   124c4:	|           |  |               addq.l #1,136(sp)
   124c8:	|           |  \-------------> movea.l 19d54 <currentFloor>,a0
   124ce:	|           |                  move.l 8(a0),d0
   124d2:	|           |                  cmp.l 136(sp),d0
   124d6:	|           \----------------- bgt.w 123c6 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   124da:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   124de:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   124e2:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   124e6:	|  |                           clr.l 136(sp)
   124ea:	|  |     /-------------------- bra.w 12640 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   124ee:	|  |  /--|-------------------> clr.l 132(sp)
   124f2:	|  |  |  |     /-------------- bra.w 1262a <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   124f6:	|  |  |  |  /--|-------------> movea.l 19d54 <currentFloor>,a0
   124fc:	|  |  |  |  |  |               move.l 16(a0),d1
   12500:	|  |  |  |  |  |               move.l 136(sp),d0
   12504:	|  |  |  |  |  |               add.l d0,d0
   12506:	|  |  |  |  |  |               add.l d0,d0
   12508:	|  |  |  |  |  |               movea.l d1,a0
   1250a:	|  |  |  |  |  |               adda.l d0,a0
   1250c:	|  |  |  |  |  |               move.l (a0),d1
   1250e:	|  |  |  |  |  |               move.l 132(sp),d0
   12512:	|  |  |  |  |  |               add.l d0,d0
   12514:	|  |  |  |  |  |               add.l d0,d0
   12516:	|  |  |  |  |  |               movea.l d1,a0
   12518:	|  |  |  |  |  |               adda.l d0,a0
   1251a:	|  |  |  |  |  |               move.l (a0),d0
   1251c:	|  |  |  |  |  |               moveq #-1,d1
   1251e:	|  |  |  |  |  |               cmp.l d0,d1
   12520:	|  |  |  |  |  |  /----------- bne.w 12626 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   12524:	|  |  |  |  |  |  |            clr.l 122(sp)
   12528:	|  |  |  |  |  |  |     /----- bra.w 12614 <setFloor+0x6d2>
						if (d != i && d != j) {
   1252c:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   12530:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   12534:	|  |  |  |  |  |  |  |  |  /-- beq.w 12610 <setFloor+0x6ce>
   12538:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   1253c:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   12540:	|  |  |  |  |  |  |  |  |  +-- beq.w 12610 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   12544:	|  |  |  |  |  |  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   1254a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1254e:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   12552:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12554:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12556:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12558:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1255a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1255c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12560:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12562:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12564:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12566:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12568:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   1256a:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   1256e:	|  |  |  |  |  |  |  |  |  +-- bne.w 12610 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   12572:	|  |  |  |  |  |  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   12578:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1257c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   12580:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12582:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12584:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12586:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12588:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1258a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1258e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12590:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   12592:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12594:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12596:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   12598:	|  |  |  |  |  |  |  |  |  +-- bmi.s 12610 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   1259a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1259e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   125a0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   125a2:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   125a6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   125a8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   125aa:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   125ae:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   125b0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   125b2:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   125b4:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   125b6:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   125b8:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   125bc:	|  |  |  |  |  |  |  |  |  +-- bgt.s 12610 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   125be:	|  |  |  |  |  |  |  |  |  |   movea.l 19d54 <currentFloor>,a0
   125c4:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   125c8:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   125cc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   125ce:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   125d0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   125d2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   125d4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   125d6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   125da:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   125dc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   125de:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   125e0:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   125e2:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   125e6:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   125ea:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   125ec:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   125ee:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   125f2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   125f4:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   125f6:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   125fa:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   125fc:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   125fe:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   12600:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   12602:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   12606:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   12608:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   1260a:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   12610:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   12614:	|  |  |  |  |  |  |  |  \----> movea.l 19d54 <currentFloor>,a0
   1261a:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   1261e:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   12622:	|  |  |  |  |  |  |  \-------- bgt.w 1252c <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   12626:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   1262a:	|  |  |  |  |  \-------------> movea.l 19d54 <currentFloor>,a0
   12630:	|  |  |  |  |                  move.l 8(a0),d0
   12634:	|  |  |  |  |                  cmp.l 132(sp),d0
   12638:	|  |  |  |  \----------------- bgt.w 124f6 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1263c:	|  |  |  |                     addq.l #1,136(sp)
   12640:	|  |  |  \-------------------> movea.l 19d54 <currentFloor>,a0
   12646:	|  |  |                        move.l 8(a0),d0
   1264a:	|  |  |                        cmp.l 136(sp),d0
   1264e:	|  |  \----------------------- bgt.w 124ee <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   12652:	|  |                           tst.w 130(sp)
   12656:	|  \-------------------------- bne.w 124de <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1265a:	|                              clr.l 136(sp)
   1265e:	|                          /-- bra.s 12686 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   12660:	|                       /--|-> move.l 136(sp),d0
   12664:	|                       |  |   add.l d0,d0
   12666:	|                       |  |   add.l d0,d0
   12668:	|                       |  |   movea.l 62(sp),a0
   1266c:	|                       |  |   adda.l d0,a0
   1266e:	|                       |  |   move.l (a0),54(sp)
   12672:	|                       |  |   move.l 19c4c <SysBase>,d0
   12678:	|                       |  |   movea.l d0,a6
   1267a:	|                       |  |   movea.l 54(sp),a1
   1267e:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   12682:	|                       |  |   addq.l #1,136(sp)
   12686:	|                       |  \-> movea.l 19d54 <currentFloor>,a0
   1268c:	|                       |      move.l 8(a0),d0
   12690:	|                       |      cmp.l 136(sp),d0
   12694:	|                       \----- bgt.s 12660 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   12696:	|                              move.l 62(sp),58(sp)
   1269c:	|                              move.l 19c4c <SysBase>,d0
   126a2:	|                              movea.l d0,a6
   126a4:	|                              movea.l 58(sp),a1
   126a8:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   126ac:	|                              clr.l 62(sp)

	return TRUE;
   126b0:	|                              moveq #1,d0
}
   126b2:	\----------------------------> movea.l (sp)+,a2
   126b4:	                               movea.l (sp)+,a6
   126b6:	                               lea 132(sp),sp
   126ba:	                               rts

000126bc <setFloorNull>:

void setFloorNull () {
	killFloor ();
   126bc:	jsr 11baa <killFloor>
	noFloor ();
   126c2:	jsr 11ace <noFloor>
   126c8:	nop
   126ca:	rts

000126cc <WaitVbl>:
void WaitVbl() {
   126cc:	       subq.l #8,sp
	debug_start_idle();
   126ce:	       jsr 1297c <debug_start_idle>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   126d4:	   /-> movea.l #14675972,a0
   126da:	   |   move.l (a0),d0
   126dc:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   126de:	   |   move.l (sp),d0
   126e0:	   |   andi.l #130816,d0
   126e6:	   |   move.l d0,(sp)
		if (vpos!=(311<<8))
   126e8:	   |   move.l (sp),d0
   126ea:	   |   cmpi.l #79616,d0
   126f0:	   \-- beq.s 126d4 <WaitVbl+0x8>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   126f2:	/----> movea.l #14675972,a0
   126f8:	|      move.l (a0),d0
   126fa:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   126fe:	|      move.l 4(sp),d0
   12702:	|      andi.l #130816,d0
   12708:	|      move.l d0,4(sp)
		if (vpos==(311<<8))
   1270c:	|      move.l 4(sp),d0
   12710:	|      cmpi.l #79616,d0
   12716:	|  /-- beq.s 1271a <WaitVbl+0x4e>
	while (1) {
   12718:	\--|-- bra.s 126f2 <WaitVbl+0x26>
			break;
   1271a:	   \-> nop
	debug_stop_idle();
   1271c:	       jsr 12996 <debug_stop_idle>
}
   12722:	       nop
   12724:	       addq.l #8,sp
   12726:	       rts

00012728 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   12728:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   1272a:	       move.l 8(sp),(sp)
	while(len-- > 0)
   1272e:	   /-- bra.s 12740 <memset+0x18>
		*ptr++ = val;
   12730:	/--|-> move.l (sp),d0
   12732:	|  |   move.l d0,d1
   12734:	|  |   addq.l #1,d1
   12736:	|  |   move.l d1,(sp)
   12738:	|  |   move.l 12(sp),d1
   1273c:	|  |   movea.l d0,a0
   1273e:	|  |   move.b d1,(a0)
	while(len-- > 0)
   12740:	|  \-> move.l 16(sp),d0
   12744:	|      move.l d0,d1
   12746:	|      subq.l #1,d1
   12748:	|      move.l d1,16(sp)
   1274c:	|      tst.l d0
   1274e:	\----- bne.s 12730 <memset+0x8>
	return dest;
   12750:	       move.l 8(sp),d0
}
   12754:	       addq.l #4,sp
   12756:	       rts

00012758 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   12758:	       subq.l #8,sp
   1275a:	       move.l d2,-(sp)
	char *d = (char *)dest;
   1275c:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   12762:	       move.l 20(sp),4(sp)
	while(len--)
   12768:	   /-- bra.s 1278a <memcpy+0x32>
		*d++ = *s++;
   1276a:	/--|-> move.l 4(sp),d1
   1276e:	|  |   move.l d1,d0
   12770:	|  |   addq.l #1,d0
   12772:	|  |   move.l d0,4(sp)
   12776:	|  |   move.l 8(sp),d0
   1277a:	|  |   move.l d0,d2
   1277c:	|  |   addq.l #1,d2
   1277e:	|  |   move.l d2,8(sp)
   12782:	|  |   movea.l d1,a0
   12784:	|  |   move.b (a0),d1
   12786:	|  |   movea.l d0,a0
   12788:	|  |   move.b d1,(a0)
	while(len--)
   1278a:	|  \-> move.l 24(sp),d0
   1278e:	|      move.l d0,d1
   12790:	|      subq.l #1,d1
   12792:	|      move.l d1,24(sp)
   12796:	|      tst.l d0
   12798:	\----- bne.s 1276a <memcpy+0x12>
	return dest;
   1279a:	       move.l 16(sp),d0
}
   1279e:	       move.l (sp)+,d2
   127a0:	       addq.l #8,sp
   127a2:	       rts

000127a4 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   127a4:	       lea -128(sp),sp
   127a8:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   127ac:	       move.w f0ff60 <gcc8_c_support.c.8bf68f31+0xed1a22>,d0
   127b2:	       cmpi.w #20153,d0
   127b6:	   /-- beq.s 127da <KPrintF+0x36>
   127b8:	   |   cmpi.w #-24562,d0
   127bc:	   +-- beq.s 127da <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   127be:	   |   movea.l 19c4c <SysBase>,a6
   127c4:	   |   movea.l 144(sp),a0
   127c8:	   |   lea 148(sp),a1
   127cc:	   |   lea 1325e <KPutCharX>,a2
   127d2:	   |   suba.l a3,a3
   127d4:	   |   jsr -522(a6)
}
   127d8:	/--|-- bra.s 12804 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   127da:	|  \-> movea.l 19c4c <SysBase>,a6
   127e0:	|      movea.l 144(sp),a0
   127e4:	|      lea 148(sp),a1
   127e8:	|      lea 1326c <PutChar>,a2
   127ee:	|      lea 12(sp),a3
   127f2:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   127f6:	|      move.l a3,-(sp)
   127f8:	|      pea 56 <_start+0x56>
   127fc:	|      jsr f0ff60 <gcc8_c_support.c.8bf68f31+0xed1a22>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   12802:	|      addq.l #8,sp
}
   12804:	\----> movem.l (sp)+,a2-a3/a6
   12808:	       lea 128(sp),sp
   1280c:	       rts

0001280e <warpmode>:

void warpmode(int on) { // bool
   1280e:	          subq.l #8,sp
	long(*UaeConf)(long mode, int index, const char* param, int param_len, char* outbuf, int outbuf_len);
	UaeConf = (long(*)(long, int, const char*, int, char*, int))0xf0ff60;
   12810:	          move.l #15794016,4(sp)
	if(*((UWORD *)UaeConf) == 0x4eb9 || *((UWORD *)UaeConf) == 0xa00e) {
   12818:	          movea.l 4(sp),a0
   1281c:	          move.w (a0),d0
   1281e:	          cmpi.w #20153,d0
   12822:	      /-- beq.s 12832 <warpmode+0x24>
   12824:	      |   movea.l 4(sp),a0
   12828:	      |   move.w (a0),d0
   1282a:	      |   cmpi.w #-24562,d0
   1282e:	/-----|-- bne.w 12936 <warpmode+0x128>
		char outbuf;
		UaeConf(82, -1, on ? "cpu_speed max" : "cpu_speed real", 0, &outbuf, 1);
   12832:	|     \-> tst.l 12(sp)
   12836:	|  /----- beq.s 12840 <warpmode+0x32>
   12838:	|  |      move.l #91896,d0
   1283e:	|  |  /-- bra.s 12846 <warpmode+0x38>
   12840:	|  \--|-> move.l #91910,d0
   12846:	|     \-> pea 1 <_start+0x1>
   1284a:	|         move.l sp,d1
   1284c:	|         addq.l #7,d1
   1284e:	|         move.l d1,-(sp)
   12850:	|         clr.l -(sp)
   12852:	|         move.l d0,-(sp)
   12854:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc1ac1>
   12858:	|         pea 52 <_start+0x52>
   1285c:	|         movea.l 28(sp),a0
   12860:	|         jsr (a0)
   12862:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_cycle_exact false" : "cpu_cycle_exact true", 0, &outbuf, 1);
   12866:	|         tst.l 12(sp)
   1286a:	|  /----- beq.s 12874 <warpmode+0x66>
   1286c:	|  |      move.l #91925,d0
   12872:	|  |  /-- bra.s 1287a <warpmode+0x6c>
   12874:	|  \--|-> move.l #91947,d0
   1287a:	|     \-> pea 1 <_start+0x1>
   1287e:	|         move.l sp,d1
   12880:	|         addq.l #7,d1
   12882:	|         move.l d1,-(sp)
   12884:	|         clr.l -(sp)
   12886:	|         move.l d0,-(sp)
   12888:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc1ac1>
   1288c:	|         pea 52 <_start+0x52>
   12890:	|         movea.l 28(sp),a0
   12894:	|         jsr (a0)
   12896:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "cpu_memory_cycle_exact false" : "cpu_memory_cycle_exact true", 0, &outbuf, 1);
   1289a:	|         tst.l 12(sp)
   1289e:	|  /----- beq.s 128a8 <warpmode+0x9a>
   128a0:	|  |      move.l #91968,d0
   128a6:	|  |  /-- bra.s 128ae <warpmode+0xa0>
   128a8:	|  \--|-> move.l #91997,d0
   128ae:	|     \-> pea 1 <_start+0x1>
   128b2:	|         move.l sp,d1
   128b4:	|         addq.l #7,d1
   128b6:	|         move.l d1,-(sp)
   128b8:	|         clr.l -(sp)
   128ba:	|         move.l d0,-(sp)
   128bc:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc1ac1>
   128c0:	|         pea 52 <_start+0x52>
   128c4:	|         movea.l 28(sp),a0
   128c8:	|         jsr (a0)
   128ca:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
   128ce:	|         tst.l 12(sp)
   128d2:	|  /----- beq.s 128dc <warpmode+0xce>
   128d4:	|  |      move.l #92025,d0
   128da:	|  |  /-- bra.s 128e2 <warpmode+0xd4>
   128dc:	|  \--|-> move.l #92051,d0
   128e2:	|     \-> pea 1 <_start+0x1>
   128e6:	|         move.l sp,d1
   128e8:	|         addq.l #7,d1
   128ea:	|         move.l d1,-(sp)
   128ec:	|         clr.l -(sp)
   128ee:	|         move.l d0,-(sp)
   128f0:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc1ac1>
   128f4:	|         pea 52 <_start+0x52>
   128f8:	|         movea.l 28(sp),a0
   128fc:	|         jsr (a0)
   128fe:	|         lea 24(sp),sp
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
   12902:	|         tst.l 12(sp)
   12906:	|  /----- beq.s 12910 <warpmode+0x102>
   12908:	|  |      move.l #92076,d0
   1290e:	|  |  /-- bra.s 12916 <warpmode+0x108>
   12910:	|  \--|-> move.l #92086,d0
   12916:	|     \-> pea 1 <_start+0x1>
   1291a:	|         move.l sp,d1
   1291c:	|         addq.l #7,d1
   1291e:	|         move.l d1,-(sp)
   12920:	|         clr.l -(sp)
   12922:	|         move.l d0,-(sp)
   12924:	|         pea ffffffff <gcc8_c_support.c.8bf68f31+0xfffc1ac1>
   12928:	|         pea 52 <_start+0x52>
   1292c:	|         movea.l 28(sp),a0
   12930:	|         jsr (a0)
   12932:	|         lea 24(sp),sp
	}
}
   12936:	\-------> nop
   12938:	          addq.l #8,sp
   1293a:	          rts

0001293c <debug_cmd>:

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   1293c:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   1293e:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   12944:	       movea.l (sp),a0
   12946:	       move.w (a0),d0
   12948:	       cmpi.w #20153,d0
   1294c:	   /-- beq.s 12958 <debug_cmd+0x1c>
   1294e:	   |   movea.l (sp),a0
   12950:	   |   move.w (a0),d0
   12952:	   |   cmpi.w #-24562,d0
   12956:	/--|-- bne.s 12976 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   12958:	|  \-> move.l 20(sp),-(sp)
   1295c:	|      move.l 20(sp),-(sp)
   12960:	|      move.l 20(sp),-(sp)
   12964:	|      move.l 20(sp),-(sp)
   12968:	|      pea 58 <_start+0x58>
   1296c:	|      movea.l 20(sp),a0
   12970:	|      jsr (a0)
   12972:	|      lea 20(sp),sp
	}
}
   12976:	\----> nop
   12978:	       addq.l #4,sp
   1297a:	       rts

0001297c <debug_start_idle>:
	debug_cmd(barto_cmd_text, (((unsigned int)left) << 16) | ((unsigned int)top), (unsigned int)text, color);
}

// profiler
void debug_start_idle() {
	debug_cmd(barto_cmd_set_idle, 1, 0, 0);
   1297c:	clr.l -(sp)
   1297e:	clr.l -(sp)
   12980:	pea 1 <_start+0x1>
   12984:	pea 5 <_start+0x5>
   12988:	jsr 1293c <debug_cmd>
   1298e:	lea 16(sp),sp
}
   12992:	nop
   12994:	rts

00012996 <debug_stop_idle>:

void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
   12996:	clr.l -(sp)
   12998:	clr.l -(sp)
   1299a:	clr.l -(sp)
   1299c:	pea 5 <_start+0x5>
   129a0:	jsr 1293c <debug_cmd>
   129a6:	lea 16(sp),sp
}
   129aa:	nop
   129ac:	rts

000129ae <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   129ae:	lea -12(sp),sp
   129b2:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   129b4:	move.l 20(sp),12(sp)
   129ba:	move.l 24(sp),8(sp)
   129c0:	move.l 19c5c <MathIeeeSingBasBase>,d0
   129c6:	movea.l d0,a6
   129c8:	move.l 12(sp),d0
   129cc:	move.l 8(sp),d1
   129d0:	jsr -66(a6)
   129d4:	move.l d0,4(sp)
   129d8:	move.l 4(sp),d0
}
   129dc:	movea.l (sp)+,a6
   129de:	lea 12(sp),sp
   129e2:	rts

000129e4 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   129e4:	lea -32(sp),sp
   129e8:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   129ec:	move.l 48(sp),36(sp)
   129f2:	move.l 52(sp),40(sp)
   129f8:	move.l 56(sp),28(sp)
   129fe:	move.l 60(sp),32(sp)
   12a04:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12a0a:	movea.l d0,a6
   12a0c:	move.l 36(sp),d0
   12a10:	move.l 40(sp),d1
   12a14:	move.l 28(sp),d2
   12a18:	move.l 32(sp),d3
   12a1c:	jsr -66(a6)
   12a20:	move.l d0,12(sp)
   12a24:	move.l d1,16(sp)
   12a28:	move.l 12(sp),20(sp)
   12a2e:	move.l 16(sp),24(sp)
   12a34:	move.l 20(sp),d0
   12a38:	move.l 24(sp),d1
}
   12a3c:	movem.l (sp)+,d2-d3/a6
   12a40:	lea 32(sp),sp
   12a44:	rts

00012a46 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   12a46:	lea -32(sp),sp
   12a4a:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   12a4e:	move.l 48(sp),36(sp)
   12a54:	move.l 52(sp),40(sp)
   12a5a:	move.l 56(sp),28(sp)
   12a60:	move.l 60(sp),32(sp)
   12a66:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12a6c:	movea.l d0,a6
   12a6e:	move.l 36(sp),d0
   12a72:	move.l 40(sp),d1
   12a76:	move.l 28(sp),d2
   12a7a:	move.l 32(sp),d3
   12a7e:	jsr -84(a6)
   12a82:	move.l d0,12(sp)
   12a86:	move.l d1,16(sp)
   12a8a:	move.l 12(sp),20(sp)
   12a90:	move.l 16(sp),24(sp)
   12a96:	move.l 20(sp),d0
   12a9a:	move.l 24(sp),d1
}
   12a9e:	movem.l (sp)+,d2-d3/a6
   12aa2:	lea 32(sp),sp
   12aa6:	rts

00012aa8 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   12aa8:	lea -12(sp),sp
   12aac:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   12aae:	move.l 20(sp),12(sp)
   12ab4:	move.l 24(sp),8(sp)
   12aba:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12ac0:	movea.l d0,a6
   12ac2:	move.l 12(sp),d0
   12ac6:	move.l 8(sp),d1
   12aca:	jsr -84(a6)
   12ace:	move.l d0,4(sp)
   12ad2:	move.l 4(sp),d0
}
   12ad6:	movea.l (sp)+,a6
   12ad8:	lea 12(sp),sp
   12adc:	rts

00012ade <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   12ade:	lea -12(sp),sp
   12ae2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12ae4:	move.l 20(sp),12(sp)
   12aea:	move.l 24(sp),8(sp)
   12af0:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12af6:	movea.l d0,a6
   12af8:	move.l 12(sp),d0
   12afc:	move.l 8(sp),d1
   12b00:	jsr -42(a6)
   12b04:	move.l d0,4(sp)
   12b08:	move.l 4(sp),d0
}
   12b0c:	movea.l (sp)+,a6
   12b0e:	lea 12(sp),sp
   12b12:	rts

00012b14 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   12b14:	lea -20(sp),sp
   12b18:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   12b1a:	move.l 28(sp),20(sp)
   12b20:	move.l 19c68 <MathIeeeDoubTransBase>,d0
   12b26:	movea.l d0,a6
   12b28:	move.l 20(sp),d0
   12b2c:	jsr -108(a6)
   12b30:	move.l d0,4(sp)
   12b34:	move.l d1,8(sp)
   12b38:	move.l 4(sp),12(sp)
   12b3e:	move.l 8(sp),16(sp)
   12b44:	move.l 12(sp),d0
   12b48:	move.l 16(sp),d1
}
   12b4c:	movea.l (sp)+,a6
   12b4e:	lea 20(sp),sp
   12b52:	rts

00012b54 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   12b54:	lea -12(sp),sp
   12b58:	move.l a6,-(sp)
	return IEEEDPFix(value);
   12b5a:	move.l 20(sp),8(sp)
   12b60:	move.l 24(sp),12(sp)
   12b66:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12b6c:	movea.l d0,a6
   12b6e:	move.l 8(sp),d0
   12b72:	move.l 12(sp),d1
   12b76:	jsr -30(a6)
   12b7a:	move.l d0,4(sp)
   12b7e:	move.l 4(sp),d0
   12b82:	move.l d0,-(sp)
   12b84:	jsr 12bbc <__floatsidf>
   12b8a:	addq.l #4,sp
}
   12b8c:	movea.l (sp)+,a6
   12b8e:	lea 12(sp),sp
   12b92:	rts

00012b94 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   12b94:	subq.l #8,sp
   12b96:	move.l a6,-(sp)
	return IEEESPFix(value);
   12b98:	move.l 16(sp),8(sp)
   12b9e:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12ba4:	movea.l d0,a6
   12ba6:	move.l 8(sp),d0
   12baa:	jsr -30(a6)
   12bae:	move.l d0,4(sp)
   12bb2:	move.l 4(sp),d0
}
   12bb6:	movea.l (sp)+,a6
   12bb8:	addq.l #8,sp
   12bba:	rts

00012bbc <__floatsidf>:


DOUBLE __floatsidf (int i) {
   12bbc:	lea -20(sp),sp
   12bc0:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   12bc2:	move.l 28(sp),20(sp)
   12bc8:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12bce:	movea.l d0,a6
   12bd0:	move.l 20(sp),d0
   12bd4:	jsr -36(a6)
   12bd8:	move.l d0,4(sp)
   12bdc:	move.l d1,8(sp)
   12be0:	move.l 4(sp),12(sp)
   12be6:	move.l 8(sp),16(sp)
   12bec:	move.l 12(sp),d0
   12bf0:	move.l 16(sp),d1
}
   12bf4:	movea.l (sp)+,a6
   12bf6:	lea 20(sp),sp
   12bfa:	rts

00012bfc <__floatsisf>:

FLOAT __floatsisf(int i) {
   12bfc:	subq.l #8,sp
   12bfe:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   12c00:	move.l 16(sp),8(sp)
   12c06:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12c0c:	movea.l d0,a6
   12c0e:	move.l 8(sp),d0
   12c12:	jsr -36(a6)
   12c16:	move.l d0,4(sp)
   12c1a:	move.l 4(sp),d0
}
   12c1e:	movea.l (sp)+,a6
   12c20:	addq.l #8,sp
   12c22:	rts

00012c24 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   12c24:	subq.l #8,sp
   12c26:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   12c28:	move.l 16(sp),8(sp)
   12c2e:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12c34:	movea.l d0,a6
   12c36:	move.l 8(sp),d0
   12c3a:	jsr -36(a6)
   12c3e:	move.l d0,4(sp)
   12c42:	move.l 4(sp),d0
}
   12c46:	movea.l (sp)+,a6
   12c48:	addq.l #8,sp
   12c4a:	rts

00012c4c <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   12c4c:	lea -32(sp),sp
   12c50:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   12c54:	move.l 48(sp),36(sp)
   12c5a:	move.l 52(sp),40(sp)
   12c60:	move.l 56(sp),28(sp)
   12c66:	move.l 60(sp),32(sp)
   12c6c:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12c72:	movea.l d0,a6
   12c74:	move.l 36(sp),d0
   12c78:	move.l 40(sp),d1
   12c7c:	move.l 28(sp),d2
   12c80:	move.l 32(sp),d3
   12c84:	jsr -78(a6)
   12c88:	move.l d0,12(sp)
   12c8c:	move.l d1,16(sp)
   12c90:	move.l 12(sp),20(sp)
   12c96:	move.l 16(sp),24(sp)
   12c9c:	move.l 20(sp),d0
   12ca0:	move.l 24(sp),d1
}
   12ca4:	movem.l (sp)+,d2-d3/a6
   12ca8:	lea 32(sp),sp
   12cac:	rts

00012cae <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   12cae:	lea -12(sp),sp
   12cb2:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   12cb4:	move.l 20(sp),12(sp)
   12cba:	move.l 24(sp),8(sp)
   12cc0:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12cc6:	movea.l d0,a6
   12cc8:	move.l 12(sp),d0
   12ccc:	move.l 8(sp),d1
   12cd0:	jsr -78(a6)
   12cd4:	move.l d0,4(sp)
   12cd8:	move.l 4(sp),d0
}
   12cdc:	movea.l (sp)+,a6
   12cde:	lea 12(sp),sp
   12ce2:	rts

00012ce4 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   12ce4:	lea -12(sp),sp
   12ce8:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12cea:	move.l 20(sp),12(sp)
   12cf0:	move.l 24(sp),8(sp)
   12cf6:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12cfc:	movea.l d0,a6
   12cfe:	move.l 12(sp),d0
   12d02:	move.l 8(sp),d1
   12d06:	jsr -42(a6)
   12d0a:	move.l d0,4(sp)
   12d0e:	move.l 4(sp),d0
}
   12d12:	movea.l (sp)+,a6
   12d14:	lea 12(sp),sp
   12d18:	rts

00012d1a <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   12d1a:	lea -20(sp),sp
   12d1e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   12d22:	move.l 36(sp),24(sp)
   12d28:	move.l 40(sp),28(sp)
   12d2e:	move.l 44(sp),16(sp)
   12d34:	move.l 48(sp),20(sp)
   12d3a:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12d40:	movea.l d0,a6
   12d42:	move.l 24(sp),d0
   12d46:	move.l 28(sp),d1
   12d4a:	move.l 16(sp),d2
   12d4e:	move.l 20(sp),d3
   12d52:	jsr -42(a6)
   12d56:	move.l d0,12(sp)
   12d5a:	move.l 12(sp),d0
}
   12d5e:	movem.l (sp)+,d2-d3/a6
   12d62:	lea 20(sp),sp
   12d66:	rts

00012d68 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   12d68:	lea -12(sp),sp
   12d6c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12d6e:	move.l 20(sp),12(sp)
   12d74:	move.l 24(sp),8(sp)
   12d7a:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12d80:	movea.l d0,a6
   12d82:	move.l 12(sp),d0
   12d86:	move.l 8(sp),d1
   12d8a:	jsr -42(a6)
   12d8e:	move.l d0,4(sp)
   12d92:	move.l 4(sp),d0
}
   12d96:	movea.l (sp)+,a6
   12d98:	lea 12(sp),sp
   12d9c:	rts

00012d9e <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   12d9e:	lea -12(sp),sp
   12da2:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12da4:	move.l 20(sp),12(sp)
   12daa:	move.l 24(sp),8(sp)
   12db0:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12db6:	movea.l d0,a6
   12db8:	move.l 12(sp),d0
   12dbc:	move.l 8(sp),d1
   12dc0:	jsr -42(a6)
   12dc4:	move.l d0,4(sp)
   12dc8:	move.l 4(sp),d0
}
   12dcc:	movea.l (sp)+,a6
   12dce:	lea 12(sp),sp
   12dd2:	rts

00012dd4 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   12dd4:	lea -20(sp),sp
   12dd8:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   12ddc:	move.l 36(sp),24(sp)
   12de2:	move.l 40(sp),28(sp)
   12de8:	move.l 44(sp),16(sp)
   12dee:	move.l 48(sp),20(sp)
   12df4:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12dfa:	movea.l d0,a6
   12dfc:	move.l 24(sp),d0
   12e00:	move.l 28(sp),d1
   12e04:	move.l 16(sp),d2
   12e08:	move.l 20(sp),d3
   12e0c:	jsr -42(a6)
   12e10:	move.l d0,12(sp)
   12e14:	move.l 12(sp),d0
}
   12e18:	movem.l (sp)+,d2-d3/a6
   12e1c:	lea 20(sp),sp
   12e20:	rts

00012e22 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   12e22:	lea -12(sp),sp
   12e26:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12e28:	move.l 20(sp),12(sp)
   12e2e:	move.l 24(sp),8(sp)
   12e34:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12e3a:	movea.l d0,a6
   12e3c:	move.l 12(sp),d0
   12e40:	move.l 8(sp),d1
   12e44:	jsr -42(a6)
   12e48:	move.l d0,4(sp)
   12e4c:	move.l 4(sp),d0
}
   12e50:	movea.l (sp)+,a6
   12e52:	lea 12(sp),sp
   12e56:	rts

00012e58 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   12e58:	lea -12(sp),sp
   12e5c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   12e5e:	move.l 20(sp),12(sp)
   12e64:	move.l 24(sp),8(sp)
   12e6a:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12e70:	movea.l d0,a6
   12e72:	move.l 12(sp),d0
   12e76:	move.l 8(sp),d1
   12e7a:	jsr -42(a6)
   12e7e:	move.l d0,4(sp)
   12e82:	move.l 4(sp),d0
}
   12e86:	movea.l (sp)+,a6
   12e88:	lea 12(sp),sp
   12e8c:	rts

00012e8e <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   12e8e:	lea -32(sp),sp
   12e92:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   12e96:	move.l 48(sp),36(sp)
   12e9c:	move.l 52(sp),40(sp)
   12ea2:	move.l 56(sp),28(sp)
   12ea8:	move.l 60(sp),32(sp)
   12eae:	move.l 19c64 <MathIeeeDoubBasBase>,d0
   12eb4:	movea.l d0,a6
   12eb6:	move.l 36(sp),d0
   12eba:	move.l 40(sp),d1
   12ebe:	move.l 28(sp),d2
   12ec2:	move.l 32(sp),d3
   12ec6:	jsr -72(a6)
   12eca:	move.l d0,12(sp)
   12ece:	move.l d1,16(sp)
   12ed2:	move.l 12(sp),20(sp)
   12ed8:	move.l 16(sp),24(sp)
   12ede:	move.l 20(sp),d0
   12ee2:	move.l 24(sp),d1
}
   12ee6:	movem.l (sp)+,d2-d3/a6
   12eea:	lea 32(sp),sp
   12eee:	rts

00012ef0 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   12ef0:	lea -12(sp),sp
   12ef4:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   12ef6:	move.l 20(sp),12(sp)
   12efc:	move.l 24(sp),8(sp)
   12f02:	move.l 19c5c <MathIeeeSingBasBase>,d0
   12f08:	movea.l d0,a6
   12f0a:	move.l 12(sp),d0
   12f0e:	move.l 8(sp),d1
   12f12:	jsr -72(a6)
   12f16:	move.l d0,4(sp)
   12f1a:	move.l 4(sp),d0
}
   12f1e:	movea.l (sp)+,a6
   12f20:	lea 12(sp),sp
   12f24:	rts

00012f26 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   12f26:	lea -12(sp),sp
   12f2a:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   12f2c:	move.l 20(sp),8(sp)
   12f32:	move.l 24(sp),12(sp)
   12f38:	move.l 19c68 <MathIeeeDoubTransBase>,d0
   12f3e:	movea.l d0,a6
   12f40:	move.l 8(sp),d0
   12f44:	move.l 12(sp),d1
   12f48:	jsr -102(a6)
   12f4c:	move.l d0,4(sp)
   12f50:	move.l 4(sp),d0
}
   12f54:	movea.l (sp)+,a6
   12f56:	lea 12(sp),sp
   12f5a:	rts

00012f5c <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   12f5c:	       lea -24(sp),sp
   12f60:	       move.l a6,-(sp)
    if (x > 0) {
   12f62:	       clr.l -(sp)
   12f64:	       move.l 40(sp),-(sp)
   12f68:	       jsr 12d68 <__gtsf2>
   12f6e:	       addq.l #8,sp
   12f70:	       tst.l d0
   12f72:	   /-- ble.s 12fa4 <atan2f+0x48>
        return IEEESPAtan(y / x);
   12f74:	   |   move.l 36(sp),-(sp)
   12f78:	   |   move.l 36(sp),-(sp)
   12f7c:	   |   jsr 12aa8 <__divsf3>
   12f82:	   |   addq.l #8,sp
   12f84:	   |   move.l d0,8(sp)
   12f88:	   |   move.l 19c60 <MathIeeeSingTransBase>,d0
   12f8e:	   |   movea.l d0,a6
   12f90:	   |   move.l 8(sp),d0
   12f94:	   |   jsr -30(a6)
   12f98:	   |   move.l d0,4(sp)
   12f9c:	   |   move.l 4(sp),d0
   12fa0:	/--|-- bra.w 13104 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   12fa4:	|  \-> clr.l -(sp)
   12fa6:	|      move.l 40(sp),-(sp)
   12faa:	|      jsr 12e22 <__ltsf2>
   12fb0:	|      addq.l #8,sp
   12fb2:	|      tst.l d0
   12fb4:	|  /-- bge.s 13028 <atan2f+0xcc>
   12fb6:	|  |   clr.l -(sp)
   12fb8:	|  |   move.l 36(sp),-(sp)
   12fbc:	|  |   jsr 12ce4 <__gesf2>
   12fc2:	|  |   addq.l #8,sp
   12fc4:	|  |   tst.l d0
   12fc6:	|  +-- blt.s 13028 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   12fc8:	|  |   move.l 36(sp),-(sp)
   12fcc:	|  |   move.l 36(sp),-(sp)
   12fd0:	|  |   jsr 12aa8 <__divsf3>
   12fd6:	|  |   addq.l #8,sp
   12fd8:	|  |   move.l d0,24(sp)
   12fdc:	|  |   move.l 19c60 <MathIeeeSingTransBase>,d0
   12fe2:	|  |   movea.l d0,a6
   12fe4:	|  |   move.l 24(sp),d0
   12fe8:	|  |   jsr -30(a6)
   12fec:	|  |   move.l d0,20(sp)
   12ff0:	|  |   move.l 20(sp),d0
   12ff4:	|  |   move.l d0,-(sp)
   12ff6:	|  |   jsr 12b14 <__extendsfdf2>
   12ffc:	|  |   addq.l #4,sp
   12ffe:	|  |   move.l #1413754136,-(sp)
   13004:	|  |   move.l #1074340347,-(sp)
   1300a:	|  |   move.l d1,-(sp)
   1300c:	|  |   move.l d0,-(sp)
   1300e:	|  |   jsr 129e4 <__adddf3>
   13014:	|  |   lea 16(sp),sp
   13018:	|  |   move.l d1,-(sp)
   1301a:	|  |   move.l d0,-(sp)
   1301c:	|  |   jsr 12f26 <__truncdfsf2>
   13022:	|  |   addq.l #8,sp
   13024:	+--|-- bra.w 13104 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   13028:	|  \-> clr.l -(sp)
   1302a:	|      move.l 40(sp),-(sp)
   1302e:	|      jsr 12e22 <__ltsf2>
   13034:	|      addq.l #8,sp
   13036:	|      tst.l d0
   13038:	|  /-- bge.s 130aa <atan2f+0x14e>
   1303a:	|  |   clr.l -(sp)
   1303c:	|  |   move.l 36(sp),-(sp)
   13040:	|  |   jsr 12e22 <__ltsf2>
   13046:	|  |   addq.l #8,sp
   13048:	|  |   tst.l d0
   1304a:	|  +-- bge.s 130aa <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   1304c:	|  |   move.l 36(sp),-(sp)
   13050:	|  |   move.l 36(sp),-(sp)
   13054:	|  |   jsr 12aa8 <__divsf3>
   1305a:	|  |   addq.l #8,sp
   1305c:	|  |   move.l d0,16(sp)
   13060:	|  |   move.l 19c60 <MathIeeeSingTransBase>,d0
   13066:	|  |   movea.l d0,a6
   13068:	|  |   move.l 16(sp),d0
   1306c:	|  |   jsr -30(a6)
   13070:	|  |   move.l d0,12(sp)
   13074:	|  |   move.l 12(sp),d0
   13078:	|  |   move.l d0,-(sp)
   1307a:	|  |   jsr 12b14 <__extendsfdf2>
   13080:	|  |   addq.l #4,sp
   13082:	|  |   move.l #1413754136,-(sp)
   13088:	|  |   move.l #1074340347,-(sp)
   1308e:	|  |   move.l d1,-(sp)
   13090:	|  |   move.l d0,-(sp)
   13092:	|  |   jsr 12e8e <__subdf3>
   13098:	|  |   lea 16(sp),sp
   1309c:	|  |   move.l d1,-(sp)
   1309e:	|  |   move.l d0,-(sp)
   130a0:	|  |   jsr 12f26 <__truncdfsf2>
   130a6:	|  |   addq.l #8,sp
   130a8:	+--|-- bra.s 13104 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   130aa:	|  \-> clr.l -(sp)
   130ac:	|      move.l 40(sp),-(sp)
   130b0:	|      jsr 12ade <__eqsf2>
   130b6:	|      addq.l #8,sp
   130b8:	|      tst.l d0
   130ba:	|  /-- bne.s 130d6 <atan2f+0x17a>
   130bc:	|  |   clr.l -(sp)
   130be:	|  |   move.l 36(sp),-(sp)
   130c2:	|  |   jsr 12d68 <__gtsf2>
   130c8:	|  |   addq.l #8,sp
   130ca:	|  |   tst.l d0
   130cc:	|  +-- ble.s 130d6 <atan2f+0x17a>
        return PI / 2;
   130ce:	|  |   move.l #1070141403,d0
   130d4:	+--|-- bra.s 13104 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   130d6:	|  \-> clr.l -(sp)
   130d8:	|      move.l 40(sp),-(sp)
   130dc:	|      jsr 12ade <__eqsf2>
   130e2:	|      addq.l #8,sp
   130e4:	|      tst.l d0
   130e6:	|  /-- bne.s 13102 <atan2f+0x1a6>
   130e8:	|  |   clr.l -(sp)
   130ea:	|  |   move.l 36(sp),-(sp)
   130ee:	|  |   jsr 12e22 <__ltsf2>
   130f4:	|  |   addq.l #8,sp
   130f6:	|  |   tst.l d0
   130f8:	|  +-- bge.s 13102 <atan2f+0x1a6>
        return -PI / 2;
   130fa:	|  |   move.l #-1077342245,d0
   13100:	+--|-- bra.s 13104 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   13102:	|  \-> moveq #0,d0
    }
}
   13104:	\----> movea.l (sp)+,a6
   13106:	       lea 24(sp),sp
   1310a:	       rts

0001310c <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   1310c:	lea -24(sp),sp
   13110:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   13112:	move.l 32(sp),20(sp)
   13118:	move.l 36(sp),24(sp)
   1311e:	move.l 19c68 <MathIeeeDoubTransBase>,d0
   13124:	movea.l d0,a6
   13126:	move.l 20(sp),d0
   1312a:	move.l 24(sp),d1
   1312e:	jsr -96(a6)
   13132:	move.l d0,4(sp)
   13136:	move.l d1,8(sp)
   1313a:	move.l 4(sp),12(sp)
   13140:	move.l 8(sp),16(sp)
   13146:	move.l 12(sp),d0
   1314a:	move.l 16(sp),d1
}
   1314e:	movea.l (sp)+,a6
   13150:	lea 24(sp),sp
   13154:	rts

00013156 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   13156:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   1315a:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1315e:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   13162:	mulu.w 8(sp),d1
	addw	d1, d0
   13166:	add.w d1,d0
	swap	d0
   13168:	swap d0
	clrw	d0
   1316a:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   1316c:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   13170:	mulu.w 10(sp),d1
	addl	d1, d0
   13174:	add.l d1,d0
	rts
   13176:	rts

00013178 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   13178:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   1317a:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   1317e:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   13182:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   13188:	   /-- bcc.s 131a0 <__udivsi3+0x28>
	movel	d0, d2
   1318a:	   |   move.l d0,d2
	clrw	d2
   1318c:	   |   clr.w d2
	swap	d2
   1318e:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   13190:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   13192:	   |   move.w d2,d0
	swap	d0
   13194:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   13196:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   1319a:	   |   divu.w d1,d2
	movew	d2, d0
   1319c:	   |   move.w d2,d0
	jra	6f
   1319e:	/--|-- bra.s 131d0 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   131a0:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   131a2:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   131a4:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   131a6:	|  |   cmpi.l #65536,d1
	jcc	4b
   131ac:	|  \-- bcc.s 131a2 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   131ae:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   131b0:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   131b6:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   131b8:	|      mulu.w d0,d1
	swap	d2
   131ba:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   131bc:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   131be:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   131c0:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   131c2:	|  /-- bne.s 131ce <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   131c4:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   131c6:	|  +-- bcs.s 131ce <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   131c8:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   131cc:	+--|-- bls.s 131d0 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   131ce:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   131d0:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   131d2:	       rts

000131d4 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   131d4:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   131d6:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   131d8:	    move.l 12(sp),d1
	jpl	1f
   131dc:	/-- bpl.s 131e2 <__divsi3+0xe>
	negl	d1
   131de:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   131e0:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   131e2:	\-> move.l 8(sp),d0
	jpl	2f
   131e6:	/-- bpl.s 131ec <__divsi3+0x18>
	negl	d0
   131e8:	|   neg.l d0
	negb	d2
   131ea:	|   neg.b d2

2:	movel	d1, sp@-
   131ec:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   131ee:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   131f0:	    jsr 13178 <__udivsi3>
	addql	#8, sp
   131f6:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   131f8:	    tst.b d2
	jpl	3f
   131fa:	/-- bpl.s 131fe <__divsi3+0x2a>
	negl	d0
   131fc:	|   neg.l d0

3:	movel	sp@+, d2
   131fe:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   13200:	    rts

00013202 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   13202:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   13206:	move.l 4(sp),d0
	movel	d1, sp@-
   1320a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1320c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   1320e:	jsr 131d4 <__divsi3>
	addql	#8, sp
   13214:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   13216:	move.l 8(sp),d1
	movel	d1, sp@-
   1321a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1321c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1321e:	jsr 13156 <__mulsi3>
	addql	#8, sp
   13224:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   13226:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1322a:	sub.l d0,d1
	movel	d1, d0
   1322c:	move.l d1,d0
	rts
   1322e:	rts

00013230 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   13230:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   13234:	move.l 4(sp),d0
	movel	d1, sp@-
   13238:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1323a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   1323c:	jsr 13178 <__udivsi3>
	addql	#8, sp
   13242:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   13244:	move.l 8(sp),d1
	movel	d1, sp@-
   13248:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1324a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   1324c:	jsr 13156 <__mulsi3>
	addql	#8, sp
   13252:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   13254:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   13258:	sub.l d0,d1
	movel	d1, d0
   1325a:	move.l d1,d0
	rts
   1325c:	rts

0001325e <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   1325e:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   13260:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   13264:	jsr -516(a6)
    move.l (sp)+, a6
   13268:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   1326a:	rts

0001326c <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   1326c:	move.b d0,(a3)+
	rts
   1326e:	rts
