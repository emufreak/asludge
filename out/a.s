
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #115427,d0
       8:	       subi.l #115427,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c2e3 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #115427,d0
      40:	       subi.l #115427,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c2e3 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 7642 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #115427,d0
      7e:	       subi.l #115427,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c2e3 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13dc6 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1ca88 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13dde <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c2e4 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13dc6 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1ca88 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1c2e4 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13dc6 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1ca88 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17de0 <PutChar+0x4>
     35c:	|  |              |   jsr 1733a <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1ca90 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1ca90 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1ca90 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1ca90 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1ca90 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1ca90 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1ca90 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17e0a <PutChar+0x2e>
     834:	|   jsr 1733a <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1ca90 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 17e26 <PutChar+0x4a>
     8a6:	|   jsr 1733a <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1ca90 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1ca90 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1ca90 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1ca90 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1ca90 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1ca90 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1ca90 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1ca90 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1ca88 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1ca90 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13dc6 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1ca90 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1c98e <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1c98e <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1c98e <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1c98e <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1c98e <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1ca48 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1c98e <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1c98e <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1ca44 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1c98e <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1c98e <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1c98e <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9a0c <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1c98e <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1c992 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1c996 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2d4e <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 17e4e <PutChar+0x72>
     e1a:	          jsr 1733a <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1c9aa <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 17e67 <PutChar+0x8b>
     e30:	      |   jsr 1733a <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1c9a4 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1ca94 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1c9aa <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 17e95 <PutChar+0xb9>
     ef0:	|         jsr 1733a <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1ca94 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 17eb5 <PutChar+0xd9>
     f3c:	|         jsr 1733a <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1c9b6 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1c9dc <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1c9cc <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1c9e0 <winHeight>,d0
     f6e:	|         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1c9cc <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 17ed5 <PutChar+0xf9>
     fbe:	|         jsr 1733a <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1ca88 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17eea <PutChar+0x10e>
    1010:	   |   jsr 1733a <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1ca90 <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1c9d8 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #115430,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #115494,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #115542,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #115582,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1c9d0 <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 17f25 <PutChar+0x149>
    11c6:	                jsr 1733a <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1c9c8 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1c9cc <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1c9c8 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1c9bc <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1ca94 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1c9dc <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1c9dc <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1c9dc <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 17cc6 <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1c9aa <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1c9dc <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 17cc6 <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1c9bc <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1c9dc <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1c9e0 <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 17cc6 <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1c9dc <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1c9e0 <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 17cc6 <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1ca94 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1c9d4 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1c9d0 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1c9d8 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1c9d8 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1c9b6 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1c9b6 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1c9b6 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstDrawZBuffer>:

UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    14e8:	                      lea -88(sp),sp
    14ec:	                      move.l a6,-(sp)
    14ee:	                      move.l d2,-(sp)
    14f0:	                      move.l 108(sp),d1
    14f4:	                      move.l 112(sp),d0
    14f8:	                      move.w d1,d1
    14fa:	                      move.w d1,10(sp)
    14fe:	                      move.w d0,d0
    1500:	                      move.w d0,8(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1504:	                      move.l #14675968,74(sp)
  //In Case nothing needs to be done return sprite mask without changes
  UBYTE *returnvalue = AllocVec( sprite->width/8*sprite->height, MEMF_CHIP); 
    150c:	                      movea.l 100(sp),a0
    1510:	                      move.l (a0),d0
    1512:	                  /-- bpl.s 1516 <CstDrawZBuffer+0x2e>
    1514:	                  |   addq.l #7,d0
    1516:	                  \-> asr.l #3,d0
    1518:	                      movea.l 100(sp),a0
    151c:	                      move.l 4(a0),d1
    1520:	                      move.l d1,-(sp)
    1522:	                      move.l d0,-(sp)
    1524:	                      jsr 17cc6 <__mulsi3>
    152a:	                      addq.l #8,sp
    152c:	                      move.l d0,70(sp)
    1530:	                      moveq #2,d0
    1532:	                      move.l d0,66(sp)
    1536:	                      move.l 1ca88 <SysBase>,d0
    153c:	                      movea.l d0,a6
    153e:	                      move.l 70(sp),d0
    1542:	                      move.l 66(sp),d1
    1546:	                      jsr -684(a6)
    154a:	                      move.l d0,62(sp)
    154e:	                      move.l 62(sp),d0
    1552:	                      move.l d0,58(sp)
  UBYTE *tmpbuffer = AllocVec( (sprite->width/8+2)*sprite->height, MEMF_CHIP);               
    1556:	                      movea.l 100(sp),a0
    155a:	                      move.l (a0),d0
    155c:	                  /-- bpl.s 1560 <CstDrawZBuffer+0x78>
    155e:	                  |   addq.l #7,d0
    1560:	                  \-> asr.l #3,d0
    1562:	                      move.l d0,d1
    1564:	                      addq.l #2,d1
    1566:	                      movea.l 100(sp),a0
    156a:	                      move.l 4(a0),d0
    156e:	                      move.l d0,-(sp)
    1570:	                      move.l d1,-(sp)
    1572:	                      jsr 17cc6 <__mulsi3>
    1578:	                      addq.l #8,sp
    157a:	                      move.l d0,54(sp)
    157e:	                      moveq #2,d1
    1580:	                      move.l d1,50(sp)
    1584:	                      move.l 1ca88 <SysBase>,d0
    158a:	                      movea.l d0,a6
    158c:	                      move.l 54(sp),d0
    1590:	                      move.l 50(sp),d1
    1594:	                      jsr -684(a6)
    1598:	                      move.l d0,46(sp)
    159c:	                      move.l 46(sp),d0
    15a0:	                      move.l d0,42(sp)
  WORD zbufferset = 0;
    15a4:	                      clr.w 94(sp)

  #ifdef EMULATOR
    debug_register_bitmap(returnvalue, "SpriteMask", sprite->width, sprite->height, 1, 0);
    15a8:	                      movea.l 100(sp),a0
    15ac:	                      move.l 4(a0),d0
    15b0:	                      move.l d0,d0
    15b2:	                      movea.w d0,a1
    15b4:	                      movea.l 100(sp),a0
    15b8:	                      move.l (a0),d0
    15ba:	                      move.l d0,d0
    15bc:	                      movea.w d0,a0
    15be:	                      clr.l -(sp)
    15c0:	                      pea 1 <_start+0x1>
    15c4:	                      move.l a1,-(sp)
    15c6:	                      move.l a0,-(sp)
    15c8:	                      pea 17f41 <PutChar+0x165>
    15ce:	                      move.l 78(sp),-(sp)
    15d2:	                      jsr 17422 <debug_register_bitmap>
    15d8:	                      lea 24(sp),sp
    debug_register_bitmap(tmpbuffer, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    15dc:	                      movea.l 100(sp),a0
    15e0:	                      move.l 4(a0),d0
    15e4:	                      move.l d0,d0
    15e6:	                      movea.w d0,a1
    15e8:	                      movea.l 100(sp),a0
    15ec:	                      move.l (a0),d0
    15ee:	                      move.l d0,d0
    15f0:	                      addi.w #16,d0
    15f4:	                      movea.w d0,a0
    15f6:	                      clr.l -(sp)
    15f8:	                      pea 1 <_start+0x1>
    15fc:	                      move.l a1,-(sp)
    15fe:	                      move.l a0,-(sp)
    1600:	                      pea 17f4c <PutChar+0x170>
    1606:	                      move.l 62(sp),-(sp)
    160a:	                      jsr 17422 <debug_register_bitmap>
    1610:	                      lea 24(sp),sp
  #endif    

  while(zbuffer) 
    1614:	   /----------------- bra.w 1b6c <CstDrawZBuffer+0x684>
  {              
    WORD spritex1oncanvas = x;
    1618:	/--|----------------> move.w 10(sp),36(sp)
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    161e:	|  |                  movea.l 100(sp),a0
    1622:	|  |                  move.l (a0),d0
    1624:	|  |                  move.l d0,d1
    1626:	|  |                  move.w 36(sp),d0
    162a:	|  |                  movea.w d1,a0
    162c:	|  |                  adda.w d0,a0
    162e:	|  |                  move.w a0,34(sp)
    WORD spritey1oncanvas = y;
    1632:	|  |                  move.w 8(sp),32(sp)
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1638:	|  |                  movea.l 100(sp),a0
    163c:	|  |                  move.l 4(a0),d0
    1640:	|  |                  move.l d0,d1
    1642:	|  |                  move.w 32(sp),d0
    1646:	|  |                  movea.w d1,a0
    1648:	|  |                  adda.w d0,a0
    164a:	|  |                  move.w a0,30(sp)

    WORD zbufferx1oncanvas = zbuffer->topx;
    164e:	|  |                  movea.l 104(sp),a0
    1652:	|  |                  move.l 8(a0),d0
    1656:	|  |                  move.w d0,28(sp)
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    165a:	|  |                  movea.l 104(sp),a0
    165e:	|  |                  move.l (a0),d0
    1660:	|  |                  move.l d0,d1
    1662:	|  |                  move.w 28(sp),d0
    1666:	|  |                  add.w d1,d0
    1668:	|  |                  move.w d0,26(sp)

    WORD zbuffery1oncanvas = zbuffer->topy;
    166c:	|  |                  movea.l 104(sp),a0
    1670:	|  |                  move.l 12(a0),d0
    1674:	|  |                  move.w d0,24(sp)
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1678:	|  |                  movea.l 104(sp),a0
    167c:	|  |                  move.l 4(a0),d0
    1680:	|  |                  move.l d0,d1
    1682:	|  |                  move.w 24(sp),d0
    1686:	|  |                  add.w d1,d0
    1688:	|  |                  move.w d0,22(sp)
  
    BOOL zbufferfromright = FALSE;
    168c:	|  |                  clr.w 92(sp)
    BOOL zbufferfromleft = FALSE;
    1690:	|  |                  clr.w 90(sp)
    BOOL zbufferfrombottom = FALSE;
    1694:	|  |                  clr.w 88(sp)
    BOOL zbufferfromtop = FALSE;
    1698:	|  |                  clr.w 86(sp)
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    169c:	|  |                  moveq #0,d0
    169e:	|  |                  move.w 30(sp),d0
    16a2:	|  |                  movea.l 104(sp),a0
    16a6:	|  |                  move.l 16(a0),d1
    16aa:	|  |                  cmp.l d0,d1
    16ac:	|  +----------------- ble.w 1b6c <CstDrawZBuffer+0x684>
    {    
      zbufferset = 1;
    16b0:	|  |                  move.w #1,94(sp)

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    16b6:	|  |                  move.w 28(sp),d0
    16ba:	|  |                  cmp.w 36(sp),d0
    16be:	|  |              /-- blt.s 16d6 <CstDrawZBuffer+0x1ee>
    16c0:	|  |              |   moveq #0,d0
    16c2:	|  |              |   move.w 34(sp),d0
    16c6:	|  |              |   movea.w 28(sp),a0
    16ca:	|  |              |   cmpa.l d0,a0
    16cc:	|  |              +-- bge.s 16d6 <CstDrawZBuffer+0x1ee>
        zbufferfromright = TRUE;
    16ce:	|  |              |   move.w #1,92(sp)
    16d4:	|  |           /--|-- bra.s 16f0 <CstDrawZBuffer+0x208>
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    16d6:	|  |           |  \-> move.w 28(sp),d1
    16da:	|  |           |      cmp.w 36(sp),d1
    16de:	|  |           +----- bge.s 16f0 <CstDrawZBuffer+0x208>
    16e0:	|  |           |      move.w 26(sp),d0
    16e4:	|  |           |      cmp.w 36(sp),d0
    16e8:	|  |           +----- ble.s 16f0 <CstDrawZBuffer+0x208>
        zbufferfromleft = TRUE;       
    16ea:	|  |           |      move.w #1,90(sp)

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
    16f0:	|  |           \----> tst.w 90(sp)
    16f4:	|  |              /-- bne.s 16fc <CstDrawZBuffer+0x214>
    16f6:	|  |              |   tst.w 92(sp)
    16fa:	|  |           /--|-- beq.s 1736 <CstDrawZBuffer+0x24e>
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    16fc:	|  |           |  \-> move.w 24(sp),d1
    1700:	|  |           |      cmp.w 32(sp),d1
    1704:	|  |           |  /-- blt.s 171c <CstDrawZBuffer+0x234>
    1706:	|  |           |  |   moveq #0,d0
    1708:	|  |           |  |   move.w 30(sp),d0
    170c:	|  |           |  |   movea.w 24(sp),a0
    1710:	|  |           |  |   cmpa.l d0,a0
    1712:	|  |           |  +-- bge.s 171c <CstDrawZBuffer+0x234>
          zbufferfrombottom = TRUE;
    1714:	|  |           |  |   move.w #1,88(sp)
    171a:	|  |           +--|-- bra.s 1736 <CstDrawZBuffer+0x24e>

        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
    171c:	|  |           |  \-> move.w 24(sp),d0
    1720:	|  |           |      cmp.w 32(sp),d0
    1724:	|  |           +----- bge.s 1736 <CstDrawZBuffer+0x24e>
    1726:	|  |           |      move.w 22(sp),d1
    172a:	|  |           |      cmp.w 32(sp),d1
    172e:	|  |           +----- ble.s 1736 <CstDrawZBuffer+0x24e>
          zbufferfromtop = TRUE;       
    1730:	|  |           |      move.w #1,86(sp)
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1736:	|  |           \----> tst.w 92(sp)
    173a:	|  |              /-- bne.s 1744 <CstDrawZBuffer+0x25c>
    173c:	|  |              |   tst.w 90(sp)
    1740:	|  +--------------|-- beq.w 1b6c <CstDrawZBuffer+0x684>
    1744:	|  |              \-> tst.w 88(sp)
    1748:	|  |              /-- bne.s 1752 <CstDrawZBuffer+0x26a>
    174a:	|  |              |   tst.w 86(sp)
    174e:	|  +--------------|-- beq.w 1b6c <CstDrawZBuffer+0x684>

        UWORD xdiff;
        UWORD xdiffbyte;          
        UWORD xdiffrest;
        UWORD bytewidth, width, rest;
        if(zbufferfromright)
    1752:	|  |              \-> tst.w 92(sp)
    1756:	|  |     /----------- beq.w 18a4 <CstDrawZBuffer+0x3bc>
        {        
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    175a:	|  |     |            move.w 28(sp),d0
    175e:	|  |     |            move.w 36(sp),d1
    1762:	|  |     |            movea.w d0,a0
    1764:	|  |     |            suba.w d1,a0
    1766:	|  |     |            move.w a0,20(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    176a:	|  |     |            move.w 20(sp),d0
    176e:	|  |     |            lsr.w #4,d0
    1770:	|  |     |            add.w d0,d0
    1772:	|  |     |            move.w d0,18(sp)
          xdiffrest = (xdiff - xdiffbyte * 8)*-1;       
    1776:	|  |     |            move.w 18(sp),d0
    177a:	|  |     |            lsl.w #3,d0
    177c:	|  |     |            move.w d0,d1
    177e:	|  |     |            sub.w 20(sp),d1
    1782:	|  |     |            move.w d1,16(sp)
          bytewidth = (sprite->width/16)*2;
    1786:	|  |     |            movea.l 100(sp),a0
    178a:	|  |     |            move.l (a0),d0
    178c:	|  |     |            movea.l d0,a0
    178e:	|  |     |            cmpa.w #0,a0
    1792:	|  |     |        /-- bge.s 1798 <CstDrawZBuffer+0x2b0>
    1794:	|  |     |        |   lea 15(a0),a0
    1798:	|  |     |        \-> move.l a0,d0
    179a:	|  |     |            asr.l #4,d0
    179c:	|  |     |            move.l d0,d0
    179e:	|  |     |            add.w d0,d0
    17a0:	|  |     |            move.w d0,80(sp)

          if( zbufferx2oncanvas > spritex2oncanvas)    
    17a4:	|  |     |            movea.w 26(sp),a0
    17a8:	|  |     |            moveq #0,d0
    17aa:	|  |     |            move.w 34(sp),d0
    17ae:	|  |     |            cmp.l a0,d0
    17b0:	|  |     |  /-------- bge.w 1890 <CstDrawZBuffer+0x3a8>
          {               
            WaitBlit();  
    17b4:	|  |     |  |         move.l 1ca94 <GfxBase>,d0
    17ba:	|  |     |  |         movea.l d0,a6
    17bc:	|  |     |  |         jsr -228(a6)
          
            custom->bltafwm = 0xffff;
    17c0:	|  |     |  |         movea.l 74(sp),a0
    17c4:	|  |     |  |         move.w #-1,68(a0)
            custom->bltalwm = 0xffff;          
    17ca:	|  |     |  |         movea.l 74(sp),a0
    17ce:	|  |     |  |         move.w #-1,70(a0)
            custom->bltdpt = tmpbuffer;        
    17d4:	|  |     |  |         movea.l 74(sp),a0
    17d8:	|  |     |  |         move.l 42(sp),84(a0)
            custom->bltcon1 = 0;               
    17de:	|  |     |  |         movea.l 74(sp),a0
    17e2:	|  |     |  |         move.w #0,66(a0)

            if (xdiffrest) {
    17e8:	|  |     |  |         tst.w 16(sp)
    17ec:	|  |     |  |  /----- beq.s 184a <CstDrawZBuffer+0x362>
              bytewidth += 2; 
    17ee:	|  |     |  |  |      addq.w #2,80(sp)
              //xdiffbyte += -2;                 
      
              bltapt = zbuffer->bitplane + xdiffbyte;          
    17f2:	|  |     |  |  |      movea.l 104(sp),a0
    17f6:	|  |     |  |  |      move.l 20(a0),d1
    17fa:	|  |     |  |  |      moveq #0,d0
    17fc:	|  |     |  |  |      move.w 18(sp),d0
    1800:	|  |     |  |  |      add.l d1,d0
    1802:	|  |     |  |  |      move.l d0,82(sp)
              custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    1806:	|  |     |  |  |      moveq #0,d0
    1808:	|  |     |  |  |      move.w 16(sp),d0
    180c:	|  |     |  |  |      moveq #16,d1
    180e:	|  |     |  |  |      sub.l d0,d1
    1810:	|  |     |  |  |      move.l d1,d0
    1812:	|  |     |  |  |      moveq #12,d1
    1814:	|  |     |  |  |      lsl.w d1,d0
    1816:	|  |     |  |  |      addi.w #2544,d0
    181a:	|  |     |  |  |      movea.l 74(sp),a0
    181e:	|  |     |  |  |      move.w d0,64(a0)
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1822:	|  |     |  |  |      movea.l 104(sp),a0
    1826:	|  |     |  |  |      move.l (a0),d0
    1828:	|  |     |  |  |  /-- bpl.s 182c <CstDrawZBuffer+0x344>
    182a:	|  |     |  |  |  |   addq.l #7,d0
    182c:	|  |     |  |  |  \-> asr.l #3,d0
    182e:	|  |     |  |  |      move.l d0,d0
    1830:	|  |     |  |  |      sub.w 80(sp),d0
    1834:	|  |     |  |  |      movea.l 74(sp),a0
    1838:	|  |     |  |  |      move.w d0,100(a0)
              custom->bltdmod = 0;                                                            
    183c:	|  |     |  |  |      movea.l 74(sp),a0
    1840:	|  |     |  |  |      move.w #0,102(a0)
    1846:	|  |  /--|--|--|----- bra.w 19f6 <CstDrawZBuffer+0x50e>
            }
            else
            {             
              bltapt = zbuffer->bitplane + xdiffbyte;          
    184a:	|  |  |  |  |  \----> movea.l 104(sp),a0
    184e:	|  |  |  |  |         move.l 20(a0),d1
    1852:	|  |  |  |  |         moveq #0,d0
    1854:	|  |  |  |  |         move.w 18(sp),d0
    1858:	|  |  |  |  |         add.l d1,d0
    185a:	|  |  |  |  |         move.l d0,82(sp)
              custom->bltcon0 = 4096 + 0x9f0;              
    185e:	|  |  |  |  |         movea.l 74(sp),a0
    1862:	|  |  |  |  |         move.w #6640,64(a0)
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1868:	|  |  |  |  |         movea.l 104(sp),a0
    186c:	|  |  |  |  |         move.l (a0),d0
    186e:	|  |  |  |  |     /-- bpl.s 1872 <CstDrawZBuffer+0x38a>
    1870:	|  |  |  |  |     |   addq.l #7,d0
    1872:	|  |  |  |  |     \-> asr.l #3,d0
    1874:	|  |  |  |  |         move.l d0,d0
    1876:	|  |  |  |  |         sub.w 80(sp),d0
    187a:	|  |  |  |  |         movea.l 74(sp),a0
    187e:	|  |  |  |  |         move.w d0,100(a0)
              custom->bltdmod = 2;                                                            
    1882:	|  |  |  |  |         movea.l 74(sp),a0
    1886:	|  |  |  |  |         move.w #2,102(a0)
    188c:	|  |  +--|--|-------- bra.w 19f6 <CstDrawZBuffer+0x50e>
            }                                     
          }            
          else
          {
              KPrintF("Cstdrawzbuffer: Current version onl supports zbuffer size equal to screen size");
    1890:	|  |  |  |  \-------> pea 17f56 <PutChar+0x17a>
    1896:	|  |  |  |            jsr 1733a <KPrintF>
    189c:	|  |  |  |            addq.l #4,sp
              return FALSE;
    189e:	|  |  |  |            moveq #0,d0
    18a0:	|  |  |  |  /-------- bra.w 1c68 <CstDrawZBuffer+0x780>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    18a4:	|  |  |  \--|-------> move.w 36(sp),d0
    18a8:	|  |  |     |         move.w 28(sp),d1
    18ac:	|  |  |     |         movea.w d0,a0
    18ae:	|  |  |     |         suba.w d1,a0
    18b0:	|  |  |     |         move.w a0,20(sp)
          xdiffbyte = (xdiff / 16) * 2;          
    18b4:	|  |  |     |         move.w 20(sp),d0
    18b8:	|  |  |     |         lsr.w #4,d0
    18ba:	|  |  |     |         add.w d0,d0
    18bc:	|  |  |     |         move.w d0,18(sp)
          xdiffrest = (xdiff - xdiffbyte * 8);    
    18c0:	|  |  |     |         move.w 18(sp),d0
    18c4:	|  |  |     |         lsl.w #3,d0
    18c6:	|  |  |     |         move.w 20(sp),d1
    18ca:	|  |  |     |         sub.w d0,d1
    18cc:	|  |  |     |         move.w d1,16(sp)

                         
          bytewidth = (sprite->width/16)*2;
    18d0:	|  |  |     |         movea.l 100(sp),a0
    18d4:	|  |  |     |         move.l (a0),d0
    18d6:	|  |  |     |         movea.l d0,a0
    18d8:	|  |  |     |         cmpa.w #0,a0
    18dc:	|  |  |     |     /-- bge.s 18e2 <CstDrawZBuffer+0x3fa>
    18de:	|  |  |     |     |   lea 15(a0),a0
    18e2:	|  |  |     |     \-> move.l a0,d0
    18e4:	|  |  |     |         asr.l #4,d0
    18e6:	|  |  |     |         move.l d0,d0
    18e8:	|  |  |     |         add.w d0,d0
    18ea:	|  |  |     |         move.w d0,80(sp)
          if(sprite->height == 60) {
    18ee:	|  |  |     |         movea.l 100(sp),a0
    18f2:	|  |  |     |         move.l 4(a0),d0
    18f6:	|  |  |     |         moveq #60,d1
    18f8:	|  |  |     |         cmp.l d0,d1
    18fa:	|  |  |     |     /-- bne.s 1906 <CstDrawZBuffer+0x41e>
            sprite->height = 60;
    18fc:	|  |  |     |     |   movea.l 100(sp),a0
    1900:	|  |  |     |     |   moveq #60,d0
    1902:	|  |  |     |     |   move.l d0,4(a0)
          }
          
          custom->bltafwm = 0xffff;
    1906:	|  |  |     |     \-> movea.l 74(sp),a0
    190a:	|  |  |     |         move.w #-1,68(a0)
          custom->bltalwm = 0xffff;                      
    1910:	|  |  |     |         movea.l 74(sp),a0
    1914:	|  |  |     |         move.w #-1,70(a0)
          custom->bltcon1 = 0;          
    191a:	|  |  |     |         movea.l 74(sp),a0
    191e:	|  |  |     |         move.w #0,66(a0)

          if (xdiffrest) {
    1924:	|  |  |     |         tst.w 16(sp)
    1928:	|  |  |     |  /----- beq.s 199a <CstDrawZBuffer+0x4b2>
            bytewidth += 2; 
    192a:	|  |  |     |  |      addq.w #2,80(sp)
            //xdiffbyte += -2;            
            bltapt = zbuffer->bitplane + xdiffbyte;  
    192e:	|  |  |     |  |      movea.l 104(sp),a0
    1932:	|  |  |     |  |      move.l 20(a0),d1
    1936:	|  |  |     |  |      moveq #0,d0
    1938:	|  |  |     |  |      move.w 18(sp),d0
    193c:	|  |  |     |  |      add.l d1,d0
    193e:	|  |  |     |  |      move.l d0,82(sp)
            WaitBlit();   
    1942:	|  |  |     |  |      move.l 1ca94 <GfxBase>,d0
    1948:	|  |  |     |  |      movea.l d0,a6
    194a:	|  |  |     |  |      jsr -228(a6)
            custom->bltdpt = tmpbuffer;                
    194e:	|  |  |     |  |      movea.l 74(sp),a0
    1952:	|  |  |     |  |      move.l 42(sp),84(a0)
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    1958:	|  |  |     |  |      moveq #0,d0
    195a:	|  |  |     |  |      move.w 16(sp),d0
    195e:	|  |  |     |  |      moveq #16,d1
    1960:	|  |  |     |  |      sub.l d0,d1
    1962:	|  |  |     |  |      move.l d1,d0
    1964:	|  |  |     |  |      moveq #12,d1
    1966:	|  |  |     |  |      lsl.w d1,d0
    1968:	|  |  |     |  |      addi.w #2544,d0
    196c:	|  |  |     |  |      movea.l 74(sp),a0
    1970:	|  |  |     |  |      move.w d0,64(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1974:	|  |  |     |  |      movea.l 104(sp),a0
    1978:	|  |  |     |  |      move.l (a0),d0
    197a:	|  |  |     |  |  /-- bpl.s 197e <CstDrawZBuffer+0x496>
    197c:	|  |  |     |  |  |   addq.l #7,d0
    197e:	|  |  |     |  |  \-> asr.l #3,d0
    1980:	|  |  |     |  |      move.l d0,d0
    1982:	|  |  |     |  |      sub.w 80(sp),d0
    1986:	|  |  |     |  |      movea.l 74(sp),a0
    198a:	|  |  |     |  |      move.w d0,100(a0)
            custom->bltdmod = 0;                                                            
    198e:	|  |  |     |  |      movea.l 74(sp),a0
    1992:	|  |  |     |  |      move.w #0,102(a0)
    1998:	|  |  +-----|--|----- bra.s 19f6 <CstDrawZBuffer+0x50e>
          }
          else
          {       
            //xdiffbyte += -2;      
            bltapt = zbuffer->bitplane + xdiffbyte;  
    199a:	|  |  |     |  \----> movea.l 104(sp),a0
    199e:	|  |  |     |         move.l 20(a0),d1
    19a2:	|  |  |     |         moveq #0,d0
    19a4:	|  |  |     |         move.w 18(sp),d0
    19a8:	|  |  |     |         add.l d1,d0
    19aa:	|  |  |     |         move.l d0,82(sp)
            WaitBlit();         
    19ae:	|  |  |     |         move.l 1ca94 <GfxBase>,d0
    19b4:	|  |  |     |         movea.l d0,a6
    19b6:	|  |  |     |         jsr -228(a6)
            custom->bltdpt = tmpbuffer + 2;       
    19ba:	|  |  |     |         move.l 42(sp),d0
    19be:	|  |  |     |         addq.l #2,d0
    19c0:	|  |  |     |         movea.l 74(sp),a0
    19c4:	|  |  |     |         move.l d0,84(a0)
            custom->bltcon0 = 4096 + 0x9f0;              
    19c8:	|  |  |     |         movea.l 74(sp),a0
    19cc:	|  |  |     |         move.w #6640,64(a0)
            custom->bltamod = zbuffer->width/8 - bytewidth;
    19d2:	|  |  |     |         movea.l 104(sp),a0
    19d6:	|  |  |     |         move.l (a0),d0
    19d8:	|  |  |     |     /-- bpl.s 19dc <CstDrawZBuffer+0x4f4>
    19da:	|  |  |     |     |   addq.l #7,d0
    19dc:	|  |  |     |     \-> asr.l #3,d0
    19de:	|  |  |     |         move.l d0,d0
    19e0:	|  |  |     |         sub.w 80(sp),d0
    19e4:	|  |  |     |         movea.l 74(sp),a0
    19e8:	|  |  |     |         move.w d0,100(a0)
            custom->bltdmod = 2;                                                            
    19ec:	|  |  |     |         movea.l 74(sp),a0
    19f0:	|  |  |     |         move.w #2,102(a0)
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    19f6:	|  |  \-----|-------> move.w 32(sp),d0
    19fa:	|  |        |         move.w 24(sp),d1
    19fe:	|  |        |         movea.w d0,a0
    1a00:	|  |        |         suba.w d1,a0
    1a02:	|  |        |         move.w a0,14(sp)

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1a06:	|  |        |         movea.w 22(sp),a0
    1a0a:	|  |        |         moveq #0,d0
    1a0c:	|  |        |         move.w 30(sp),d0
    1a10:	|  |        |         cmp.l a0,d0
    1a12:	|  |        |     /-- bge.s 1a22 <CstDrawZBuffer+0x53a>
          height = sprite->height;
    1a14:	|  |        |     |   movea.l 100(sp),a0
    1a18:	|  |        |     |   move.l 4(a0),d0
    1a1c:	|  |        |     |   move.w d0,78(sp)
    1a20:	|  |        |  /--|-- bra.s 1a32 <CstDrawZBuffer+0x54a>
        else
          height = zbuffery2oncanvas - spritey1oncanvas;
    1a22:	|  |        |  |  \-> move.w 22(sp),d0
    1a26:	|  |        |  |      move.w 32(sp),d1
    1a2a:	|  |        |  |      movea.w d0,a0
    1a2c:	|  |        |  |      suba.w d1,a0
    1a2e:	|  |        |  |      move.w a0,78(sp)

        custom->bltapt = bltapt + ydiff*zbuffer->width/8; 
    1a32:	|  |        |  \----> moveq #0,d0
    1a34:	|  |        |         move.w 14(sp),d0
    1a38:	|  |        |         movea.l 104(sp),a0
    1a3c:	|  |        |         move.l (a0),d1
    1a3e:	|  |        |         move.l d1,-(sp)
    1a40:	|  |        |         move.l d0,-(sp)
    1a42:	|  |        |         jsr 17cc6 <__mulsi3>
    1a48:	|  |        |         addq.l #8,sp
    1a4a:	|  |        |         tst.l d0
    1a4c:	|  |        |     /-- bge.s 1a50 <CstDrawZBuffer+0x568>
    1a4e:	|  |        |     |   addq.l #7,d0
    1a50:	|  |        |     \-> asr.l #3,d0
    1a52:	|  |        |         add.l 82(sp),d0
    1a56:	|  |        |         movea.l 74(sp),a0
    1a5a:	|  |        |         move.l d0,80(a0)
        UWORD bltsize =  height*64+bytewidth/2;          
    1a5e:	|  |        |         move.w 78(sp),d0
    1a62:	|  |        |         move.w d0,d1
    1a64:	|  |        |         lsl.w #6,d1
    1a66:	|  |        |         move.w 80(sp),d0
    1a6a:	|  |        |         lsr.w #1,d0
    1a6c:	|  |        |         movea.w d1,a0
    1a6e:	|  |        |         adda.w d0,a0
    1a70:	|  |        |         move.w a0,12(sp)
        custom->bltsize = height*64+bytewidth/2;
    1a74:	|  |        |         move.w 78(sp),d0
    1a78:	|  |        |         move.w d0,d1
    1a7a:	|  |        |         lsl.w #6,d1
    1a7c:	|  |        |         move.w 80(sp),d0
    1a80:	|  |        |         lsr.w #1,d0
    1a82:	|  |        |         add.w d1,d0
    1a84:	|  |        |         movea.l 74(sp),a0
    1a88:	|  |        |         move.w d0,88(a0)
       
        WaitBlit();
    1a8c:	|  |        |         move.l 1ca94 <GfxBase>,d0
    1a92:	|  |        |         movea.l d0,a6
    1a94:	|  |        |         jsr -228(a6)

        custom->bltafwm = 0xffff;
    1a98:	|  |        |         movea.l 74(sp),a0
    1a9c:	|  |        |         move.w #-1,68(a0)
        custom->bltalwm = 0xffff;
    1aa2:	|  |        |         movea.l 74(sp),a0
    1aa6:	|  |        |         move.w #-1,70(a0)
        custom->bltamod = 2;
    1aac:	|  |        |         movea.l 74(sp),a0
    1ab0:	|  |        |         move.w #2,100(a0)
        custom->bltbmod = 0;
    1ab6:	|  |        |         movea.l 74(sp),a0
    1aba:	|  |        |         move.w #0,98(a0)
        custom->bltdmod = 0;
    1ac0:	|  |        |         movea.l 74(sp),a0
    1ac4:	|  |        |         move.w #0,102(a0)
        custom->bltcon0 = 0xd0c; //Copy A to D
    1aca:	|  |        |         movea.l 74(sp),a0
    1ace:	|  |        |         move.w #3340,64(a0)
        custom->bltcon1 = 0;        
    1ad4:	|  |        |         movea.l 74(sp),a0
    1ad8:	|  |        |         move.w #0,66(a0)

        custom->bltapt = (APTR) tmpbuffer + 2;
    1ade:	|  |        |         move.l 42(sp),d0
    1ae2:	|  |        |         addq.l #2,d0
    1ae4:	|  |        |         movea.l 74(sp),a0
    1ae8:	|  |        |         move.l d0,80(a0)
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1aec:	|  |        |         movea.l 100(sp),a0
    1af0:	|  |        |         move.l 24(a0),d2
    1af4:	|  |        |         movea.l 100(sp),a0
    1af8:	|  |        |         move.l (a0),d0
    1afa:	|  |        |     /-- bpl.s 1afe <CstDrawZBuffer+0x616>
    1afc:	|  |        |     |   addq.l #7,d0
    1afe:	|  |        |     \-> asr.l #3,d0
    1b00:	|  |        |         movea.l 100(sp),a0
    1b04:	|  |        |         move.l 4(a0),d1
    1b08:	|  |        |         move.l d1,-(sp)
    1b0a:	|  |        |         move.l d0,-(sp)
    1b0c:	|  |        |         jsr 17cc6 <__mulsi3>
    1b12:	|  |        |         addq.l #8,sp
    1b14:	|  |        |         move.l d0,d1
    1b16:	|  |        |         move.l d1,d0
    1b18:	|  |        |         add.l d0,d0
    1b1a:	|  |        |         add.l d0,d0
    1b1c:	|  |        |         add.l d1,d0
    1b1e:	|  |        |         add.l d2,d0
    1b20:	|  |        |         movea.l 74(sp),a0
    1b24:	|  |        |         move.l d0,76(a0)
        custom->bltdpt = (APTR) returnvalue;
    1b28:	|  |        |         movea.l 74(sp),a0
    1b2c:	|  |        |         move.l 58(sp),84(a0)
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1b32:	|  |        |         movea.l 100(sp),a0
    1b36:	|  |        |         move.l 4(a0),d0
    1b3a:	|  |        |         move.l d0,d0
    1b3c:	|  |        |         move.w d0,d1
    1b3e:	|  |        |         lsl.w #6,d1
    1b40:	|  |        |         movea.l 100(sp),a0
    1b44:	|  |        |         move.l (a0),d0
    1b46:	|  |        |         movea.l d0,a0
    1b48:	|  |        |         cmpa.w #0,a0
    1b4c:	|  |        |     /-- bge.s 1b52 <CstDrawZBuffer+0x66a>
    1b4e:	|  |        |     |   lea 15(a0),a0
    1b52:	|  |        |     \-> move.l a0,d0
    1b54:	|  |        |         asr.l #4,d0
    1b56:	|  |        |         move.l d0,d0
    1b58:	|  |        |         add.w d1,d0
    1b5a:	|  |        |         movea.l 74(sp),a0
    1b5e:	|  |        |         move.w d0,88(a0)

        zbuffer = zbuffer->nextPanel;
    1b62:	|  |        |         movea.l 104(sp),a0
    1b66:	|  |        |         move.l 24(a0),104(sp)
  while(zbuffer) 
    1b6c:	|  \--------|-------> tst.l 104(sp)
    1b70:	\-----------|-------- bne.w 1618 <CstDrawZBuffer+0x130>
      }
    }
  }
  FreeVec( tmpbuffer);
    1b74:	            |         move.l 42(sp),38(sp)
    1b7a:	            |         move.l 1ca88 <SysBase>,d0
    1b80:	            |         movea.l d0,a6
    1b82:	            |         movea.l 38(sp),a1
    1b86:	            |         jsr -690(a6)
  if(zbufferset == 0)
    1b8a:	            |         tst.w 94(sp)
    1b8e:	            |  /----- bne.w 1c64 <CstDrawZBuffer+0x77c>
  {
    WaitBlit();
    1b92:	            |  |      move.l 1ca94 <GfxBase>,d0
    1b98:	            |  |      movea.l d0,a6
    1b9a:	            |  |      jsr -228(a6)

    custom->bltafwm = 0xffff;
    1b9e:	            |  |      movea.l 74(sp),a0
    1ba2:	            |  |      move.w #-1,68(a0)
    custom->bltalwm = 0xffff;
    1ba8:	            |  |      movea.l 74(sp),a0
    1bac:	            |  |      move.w #-1,70(a0)
    custom->bltamod = 0;
    1bb2:	            |  |      movea.l 74(sp),a0
    1bb6:	            |  |      move.w #0,100(a0)
    custom->bltbmod = 0;
    1bbc:	            |  |      movea.l 74(sp),a0
    1bc0:	            |  |      move.w #0,98(a0)
    custom->bltcmod = 0;
    1bc6:	            |  |      movea.l 74(sp),a0
    1bca:	            |  |      move.w #0,96(a0)
    custom->bltdmod = 0;
    1bd0:	            |  |      movea.l 74(sp),a0
    1bd4:	            |  |      move.w #0,102(a0)
    custom->bltcon0 = 0x9f0; //Copy A to D
    1bda:	            |  |      movea.l 74(sp),a0
    1bde:	            |  |      move.w #2544,64(a0)
    custom->bltcon1 = 0;        
    1be4:	            |  |      movea.l 74(sp),a0
    1be8:	            |  |      move.w #0,66(a0)

    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1bee:	            |  |      movea.l 100(sp),a0
    1bf2:	            |  |      move.l 24(a0),d2
    1bf6:	            |  |      movea.l 100(sp),a0
    1bfa:	            |  |      move.l (a0),d0
    1bfc:	            |  |  /-- bpl.s 1c00 <CstDrawZBuffer+0x718>
    1bfe:	            |  |  |   addq.l #7,d0
    1c00:	            |  |  \-> asr.l #3,d0
    1c02:	            |  |      movea.l 100(sp),a0
    1c06:	            |  |      move.l 4(a0),d1
    1c0a:	            |  |      move.l d1,-(sp)
    1c0c:	            |  |      move.l d0,-(sp)
    1c0e:	            |  |      jsr 17cc6 <__mulsi3>
    1c14:	            |  |      addq.l #8,sp
    1c16:	            |  |      move.l d0,d1
    1c18:	            |  |      move.l d1,d0
    1c1a:	            |  |      add.l d0,d0
    1c1c:	            |  |      add.l d0,d0
    1c1e:	            |  |      add.l d1,d0
    1c20:	            |  |      add.l d2,d0
    1c22:	            |  |      movea.l 74(sp),a0
    1c26:	            |  |      move.l d0,80(a0)
    custom->bltdpt = (APTR) returnvalue;
    1c2a:	            |  |      movea.l 74(sp),a0
    1c2e:	            |  |      move.l 58(sp),84(a0)
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1c34:	            |  |      movea.l 100(sp),a0
    1c38:	            |  |      move.l 4(a0),d0
    1c3c:	            |  |      move.l d0,d0
    1c3e:	            |  |      move.w d0,d1
    1c40:	            |  |      lsl.w #6,d1
    1c42:	            |  |      movea.l 100(sp),a0
    1c46:	            |  |      move.l (a0),d0
    1c48:	            |  |      movea.l d0,a0
    1c4a:	            |  |      cmpa.w #0,a0
    1c4e:	            |  |  /-- bge.s 1c54 <CstDrawZBuffer+0x76c>
    1c50:	            |  |  |   lea 15(a0),a0
    1c54:	            |  |  \-> move.l a0,d0
    1c56:	            |  |      asr.l #4,d0
    1c58:	            |  |      move.l d0,d0
    1c5a:	            |  |      add.w d1,d0
    1c5c:	            |  |      movea.l 74(sp),a0
    1c60:	            |  |      move.w d0,88(a0)

  }

  return returnvalue;
    1c64:	            |  \----> move.l 58(sp),d0

}
    1c68:	            \-------> move.l (sp)+,d2
    1c6a:	                      movea.l (sp)+,a6
    1c6c:	                      lea 88(sp),sp
    1c70:	                      rts

00001c72 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1c72:	    lea -20(sp),sp
    1c76:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1c78:	    move.l 1c9bc <CstDrawBuffer>,d0
    1c7e:	/-- beq.s 1c98 <CstFreeBuffer+0x26>
    1c80:	|   move.l 1c9bc <CstDrawBuffer>,20(sp)
    1c88:	|   move.l 1ca88 <SysBase>,d0
    1c8e:	|   movea.l d0,a6
    1c90:	|   movea.l 20(sp),a1
    1c94:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1c98:	\-> move.l 1c9b8 <CstViewBuffer>,d0
    1c9e:	/-- beq.s 1cb8 <CstFreeBuffer+0x46>
    1ca0:	|   move.l 1c9b8 <CstViewBuffer>,16(sp)
    1ca8:	|   move.l 1ca88 <SysBase>,d0
    1cae:	|   movea.l d0,a6
    1cb0:	|   movea.l 16(sp),a1
    1cb4:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1cb8:	\-> move.l 1c9b2 <CstCopperList>,d0
    1cbe:	/-- beq.s 1cd8 <CstFreeBuffer+0x66>
    1cc0:	|   move.l 1c9b2 <CstCopperList>,12(sp)
    1cc8:	|   move.l 1ca88 <SysBase>,d0
    1cce:	|   movea.l d0,a6
    1cd0:	|   movea.l 12(sp),a1
    1cd4:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1cd8:	\-> move.l 1c9aa <CstBackDrop>,d0
    1cde:	/-- beq.s 1cf8 <CstFreeBuffer+0x86>
    1ce0:	|   move.l 1c9aa <CstBackDrop>,8(sp)
    1ce8:	|   move.l 1ca88 <SysBase>,d0
    1cee:	|   movea.l d0,a6
    1cf0:	|   movea.l 8(sp),a1
    1cf4:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1cf8:	\-> move.l 1c9ae <CstBackDropBackup>,d0
    1cfe:	/-- beq.s 1d18 <CstFreeBuffer+0xa6>
    1d00:	|   move.l 1c9ae <CstBackDropBackup>,4(sp)
    1d08:	|   move.l 1ca88 <SysBase>,d0
    1d0e:	|   movea.l d0,a6
    1d10:	|   movea.l 4(sp),a1
    1d14:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1d18:	\-> clr.l 1c9bc <CstDrawBuffer>
  CstViewBuffer = NULL;
    1d1e:	    clr.l 1c9b8 <CstViewBuffer>
  CstCopperList = NULL;
    1d24:	    clr.l 1c9b2 <CstCopperList>
  CstBackDrop = NULL;
    1d2a:	    clr.l 1c9aa <CstBackDrop>

}
    1d30:	    nop
    1d32:	    movea.l (sp)+,a6
    1d34:	    lea 20(sp),sp
    1d38:	    rts

00001d3a <CstFreeze>:



void CstFreeze( ) {
    1d3a:	       lea -36(sp),sp
    1d3e:	       move.l a6,-(sp)
    1d40:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1d42:	       pea 17fa5 <PutChar+0x1c9>
    1d48:	       jsr 1733a <KPrintF>
    1d4e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1d50:	       move.l 1c9dc <winWidth>,d0
    1d56:	       lsr.l #3,d0
    1d58:	       move.l d0,d1
    1d5a:	       move.l 1c9e0 <winHeight>,d0
    1d60:	       move.l d0,d0
    1d62:	       muls.w d0,d1
    1d64:	       move.w d1,d0
    1d66:	       add.w d0,d0
    1d68:	       add.w d0,d0
    1d6a:	       move.w d0,d2
    1d6c:	       add.w d1,d2
    1d6e:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1d72:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1d7a:	       moveq #0,d0
    1d7c:	       move.w 26(sp),d0
    1d80:	       move.l d0,18(sp)
    1d84:	       clr.l 14(sp)
    1d88:	       move.l 1ca88 <SysBase>,d0
    1d8e:	       movea.l d0,a6
    1d90:	       move.l 18(sp),d0
    1d94:	       move.l 14(sp),d1
    1d98:	       jsr -684(a6)
    1d9c:	       move.l d0,10(sp)
    1da0:	       move.l 10(sp),d0
    1da4:	       move.l d0,1c9ae <CstBackDropBackup>
  if( !CstBackDropBackup)
    1daa:	       move.l 1c9ae <CstBackDropBackup>,d0
    1db0:	   /-- bne.s 1dc0 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1db2:	   |   pea 17fcc <PutChar+0x1f0>
    1db8:	   |   jsr 1733a <KPrintF>
    1dbe:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1dc0:	   \-> move.l 1c9e0 <winHeight>,d0
    1dc6:	       move.l d0,d0
    1dc8:	       movea.w d0,a1
    1dca:	       move.l 1c9dc <winWidth>,d0
    1dd0:	       move.l d0,d0
    1dd2:	       movea.w d0,a0
    1dd4:	       move.l 1c9ae <CstBackDropBackup>,d0
    1dda:	       clr.l -(sp)
    1ddc:	       pea 5 <_start+0x5>
    1de0:	       move.l a1,-(sp)
    1de2:	       move.l a0,-(sp)
    1de4:	       pea 18004 <PutChar+0x228>
    1dea:	       move.l d0,-(sp)
    1dec:	       jsr 17422 <debug_register_bitmap>
    1df2:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1df6:	       move.l 1c9aa <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1dfe:	       move.l 1c9ae <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    1e06:	       clr.l 32(sp)
    1e0a:	   /-- bra.s 1e30 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1e0c:	/--|-> move.l 40(sp),d1
    1e10:	|  |   move.l d1,d0
    1e12:	|  |   addq.l #4,d0
    1e14:	|  |   move.l d0,40(sp)
    1e18:	|  |   move.l 36(sp),d0
    1e1c:	|  |   move.l d0,d2
    1e1e:	|  |   addq.l #4,d2
    1e20:	|  |   move.l d2,36(sp)
    1e24:	|  |   movea.l d1,a0
    1e26:	|  |   move.l (a0),d1
    1e28:	|  |   movea.l d0,a0
    1e2a:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e2c:	|  |   addq.l #1,32(sp)
    1e30:	|  \-> move.w 26(sp),d0
    1e34:	|      lsr.w #2,d0
    1e36:	|      move.w d0,d0
    1e38:	|      andi.l #65535,d0
    1e3e:	|      cmp.l 32(sp),d0
    1e42:	\----- bgt.s 1e0c <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1e44:	       move.l 1c9b8 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    1e4c:	       move.l 1c9aa <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    1e54:	       clr.l 28(sp)
    1e58:	   /-- bra.s 1e7e <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1e5a:	/--|-> move.l 40(sp),d1
    1e5e:	|  |   move.l d1,d0
    1e60:	|  |   addq.l #4,d0
    1e62:	|  |   move.l d0,40(sp)
    1e66:	|  |   move.l 36(sp),d0
    1e6a:	|  |   move.l d0,d2
    1e6c:	|  |   addq.l #4,d2
    1e6e:	|  |   move.l d2,36(sp)
    1e72:	|  |   movea.l d1,a0
    1e74:	|  |   move.l (a0),d1
    1e76:	|  |   movea.l d0,a0
    1e78:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e7a:	|  |   addq.l #1,28(sp)
    1e7e:	|  \-> move.w 26(sp),d0
    1e82:	|      lsr.w #2,d0
    1e84:	|      move.w d0,d0
    1e86:	|      andi.l #65535,d0
    1e8c:	|      cmp.l 28(sp),d0
    1e90:	\----- bgt.s 1e5a <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1e92:	       move.w #2,1c9b6 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1e9a:	       move.l 1c9dc <winWidth>,d0
    1ea0:	       lsr.l #4,d0
    1ea2:	       movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    1ea8:	       move.l a0,d1
    1eaa:	       addq.l #2,d1
    1eac:	       move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    1eb2:	       move.l d0,d0
    1eb4:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1eb6:	       move.l 1c9e0 <winHeight>,d0
    1ebc:	       movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    1ec2:	       move.l a0,d1
    1ec4:	       addq.l #2,d1
    1ec6:	       move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    1ecc:	       move.l d0,d0
    1ece:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ed0:	       movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    1ed6:	       move.l a0,d0
    1ed8:	       addq.l #2,d0
    1eda:	       move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    1ee0:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ee2:	       movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    1ee8:	       move.l a0,d0
    1eea:	       addq.l #2,d0
    1eec:	       move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    1ef2:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1ef4:	       movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    1efa:	       move.l a0,d0
    1efc:	       addq.l #2,d0
    1efe:	       move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    1f04:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    1f06:	       pea 18013 <PutChar+0x237>
    1f0c:	       jsr 1733a <KPrintF>
    1f12:	       addq.l #4,sp

}  
    1f14:	       nop
    1f16:	       move.l (sp)+,d2
    1f18:	       movea.l (sp)+,a6
    1f1a:	       lea 36(sp),sp
    1f1e:	       rts

00001f20 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1f20:	             lea -144(sp),sp
    1f24:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    1f28:	             pea 18027 <PutChar+0x24b>
    1f2e:	             jsr 1733a <KPrintF>
    1f34:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1f36:	             move.l 164(sp),-(sp)
    1f3a:	             jsr 6bc <get2bytes>
    1f40:	             addq.l #4,sp
    1f42:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    1f46:	             move.l 164(sp),-(sp)
    1f4a:	             jsr 6bc <get2bytes>
    1f50:	             addq.l #4,sp
    1f52:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    1f56:	             move.w 134(sp),d0
    1f5a:	             lsr.w #3,d0
    1f5c:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1f60:	             move.w 130(sp),d0
    1f64:	             lsr.w #1,d0
    1f66:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1f6a:	             move.l 1c9dc <winWidth>,d0
    1f70:	             lsr.l #3,d0
    1f72:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1f76:	             move.w 130(sp),d0
    1f7a:	             muls.w 132(sp),d0
    1f7e:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1f82:	             move.w 124(sp),d1
    1f86:	             move.w d1,d0
    1f88:	             add.w d0,d0
    1f8a:	             add.w d0,d0
    1f8c:	             move.w d0,d2
    1f8e:	             add.w d1,d2
    1f90:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1f94:	             move.w 1c9a4 <CstPaletteLoaded>,d0
    1f9a:	/----------- bne.w 2034 <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1f9e:	|            move.w #384,120(sp)

    if(CstPalette) {
    1fa4:	|            move.l 1c9d4 <CstPalette>,d0
    1faa:	|        /-- beq.s 1fc4 <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1fac:	|        |   move.l 1c9d4 <CstPalette>,116(sp)
    1fb4:	|        |   move.l 1ca88 <SysBase>,d0
    1fba:	|        |   movea.l d0,a6
    1fbc:	|        |   movea.l 116(sp),a1
    1fc0:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1fc4:	|        \-> moveq #64,d0
    1fc6:	|            move.l d0,112(sp)
    1fca:	|            clr.l 108(sp)
    1fce:	|            move.l 1ca88 <SysBase>,d0
    1fd4:	|            movea.l d0,a6
    1fd6:	|            move.l 112(sp),d0
    1fda:	|            move.l 108(sp),d1
    1fde:	|            jsr -684(a6)
    1fe2:	|            move.l d0,104(sp)
    1fe6:	|            move.l 104(sp),d0
    1fea:	|            move.l d0,1c9d4 <CstPalette>
    CstPaletteLoaded = 1;
    1ff0:	|            move.w #1,1c9a4 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1ff8:	|            move.l 1c9d4 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2000:	|            clr.l 152(sp)
    2004:	|        /-- bra.s 202a <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    2006:	|     /--|-> move.l 164(sp),-(sp)
    200a:	|     |  |   jsr 6bc <get2bytes>
    2010:	|     |  |   addq.l #4,sp
    2012:	|     |  |   move.l d0,d1
    2014:	|     |  |   move.l 156(sp),d0
    2018:	|     |  |   move.l d0,d2
    201a:	|     |  |   addq.l #2,d2
    201c:	|     |  |   move.l d2,156(sp)
    2020:	|     |  |   move.l d1,d1
    2022:	|     |  |   movea.l d0,a0
    2024:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2026:	|     |  |   addq.l #1,152(sp)
    202a:	|     |  \-> moveq #31,d0
    202c:	|     |      cmp.l 152(sp),d0
    2030:	|     \----- bge.s 2006 <CstLoadBackdrop+0xe6>
    2032:	|  /-------- bra.s 2052 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2034:	\--|-------> clr.l 148(sp)
    2038:	   |     /-- bra.s 204a <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    203a:	   |  /--|-> move.l 164(sp),-(sp)
    203e:	   |  |  |   jsr 6bc <get2bytes>
    2044:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2046:	   |  |  |   addq.l #1,148(sp)
    204a:	   |  |  \-> moveq #31,d2
    204c:	   |  |      cmp.l 148(sp),d2
    2050:	   |  \----- bge.s 203a <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    2052:	   \-------> moveq #0,d0
    2054:	             move.w 122(sp),d0
    2058:	             move.l d0,100(sp)
    205c:	             moveq #2,d0
    205e:	             move.l d0,96(sp)
    2062:	             move.l 1ca88 <SysBase>,d0
    2068:	             movea.l d0,a6
    206a:	             move.l 100(sp),d0
    206e:	             move.l 96(sp),d1
    2072:	             jsr -684(a6)
    2076:	             move.l d0,92(sp)
    207a:	             move.l 92(sp),d0
    207e:	             move.l d0,88(sp)
  if( !tmpbuffer)
    2082:	         /-- bne.s 2092 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    2084:	         |   pea 18056 <PutChar+0x27a>
    208a:	         |   jsr 1733a <KPrintF>
    2090:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    2092:	         \-> moveq #0,d0
    2094:	             move.w 124(sp),d0
    2098:	             move.l d0,84(sp)
    209c:	             moveq #2,d2
    209e:	             move.l d2,80(sp)
    20a2:	             move.l 1ca88 <SysBase>,d0
    20a8:	             movea.l d0,a6
    20aa:	             move.l 84(sp),d0
    20ae:	             move.l 80(sp),d1
    20b2:	             jsr -684(a6)
    20b6:	             move.l d0,76(sp)
    20ba:	             move.l 76(sp),d0
    20be:	             move.l d0,72(sp)
  if( !tmpmask)
    20c2:	         /-- bne.s 20d2 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    20c4:	         |   pea 1808c <PutChar+0x2b0>
    20ca:	         |   jsr 1733a <KPrintF>
    20d0:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    20d2:	         \-> move.w 132(sp),d0
    20d6:	             movea.w d0,a1
    20d8:	             move.w 134(sp),d0
    20dc:	             movea.w d0,a0
    20de:	             clr.l -(sp)
    20e0:	             pea 5 <_start+0x5>
    20e4:	             move.l a1,-(sp)
    20e6:	             move.l a0,-(sp)
    20e8:	             pea 180c0 <PutChar+0x2e4>
    20ee:	             move.l 108(sp),-(sp)
    20f2:	             jsr 17422 <debug_register_bitmap>
    20f8:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    20fc:	             move.w 132(sp),d0
    2100:	             movea.w d0,a1
    2102:	             move.w 134(sp),d0
    2106:	             movea.w d0,a0
    2108:	             clr.l -(sp)
    210a:	             pea 1 <_start+0x1>
    210e:	             move.l a1,-(sp)
    2110:	             move.l a0,-(sp)
    2112:	             pea 180ce <PutChar+0x2f2>
    2118:	             move.l 108(sp),-(sp)
    211c:	             jsr 17422 <debug_register_bitmap>
    2122:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    2126:	             move.l 164(sp),68(sp)
    212c:	             move.l 88(sp),64(sp)
    2132:	             moveq #2,d0
    2134:	             move.l d0,60(sp)
    2138:	             move.w 122(sp),d0
    213c:	             lsr.w #1,d0
    213e:	             move.w d0,d0
    2140:	             andi.l #65535,d0
    2146:	             move.l d0,56(sp)
    214a:	             move.l 1ca90 <DOSBase>,d0
    2150:	             movea.l d0,a6
    2152:	             move.l 68(sp),d1
    2156:	             move.l 64(sp),d2
    215a:	             move.l 60(sp),d3
    215e:	             move.l 56(sp),d4
    2162:	             jsr -324(a6)
    2166:	             move.l d0,52(sp)
    216a:	             move.l 52(sp),d0
    216e:	             move.w d0,50(sp)
  if(!count) {
    2172:	         /-- bne.s 2186 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    2174:	         |   pea 180da <PutChar+0x2fe>
    217a:	         |   jsr 1733a <KPrintF>
    2180:	         |   addq.l #4,sp
    return;
    2182:	   /-----|-- bra.w 23d2 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    2186:	   |     \-> move.l 164(sp),46(sp)
    218c:	   |         move.l 72(sp),42(sp)
    2192:	   |         moveq #2,d2
    2194:	   |         move.l d2,38(sp)
    2198:	   |         move.w 124(sp),d0
    219c:	   |         lsr.w #1,d0
    219e:	   |         move.w d0,d0
    21a0:	   |         andi.l #65535,d0
    21a6:	   |         move.l d0,34(sp)
    21aa:	   |         move.l 1ca90 <DOSBase>,d0
    21b0:	   |         movea.l d0,a6
    21b2:	   |         move.l 46(sp),d1
    21b6:	   |         move.l 42(sp),d2
    21ba:	   |         move.l 38(sp),d3
    21be:	   |         move.l 34(sp),d4
    21c2:	   |         jsr -324(a6)
    21c6:	   |         move.l d0,30(sp)
    21ca:	   |         move.l 30(sp),d0
    21ce:	   |         move.w d0,50(sp)
   

  if(!count) {
    21d2:	   |     /-- bne.s 21e6 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    21d4:	   |     |   pea 180da <PutChar+0x2fe>
    21da:	   |     |   jsr 1733a <KPrintF>
    21e0:	   |     |   addq.l #4,sp
    return;
    21e2:	   +-----|-- bra.w 23d2 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    21e6:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    21ee:	   |         move.l 1c9aa <CstBackDrop>,d0
    21f4:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    21f8:	   |         move.l 172(sp),d0
    21fc:	   |         move.w d0,d1
    21fe:	   |         muls.w 126(sp),d1
    2202:	   |         move.l 168(sp),d0
    2206:	   |     /-- bpl.s 220a <CstLoadBackdrop+0x2ea>
    2208:	   |     |   addq.l #7,d0
    220a:	   |     \-> asr.l #3,d0
    220c:	   |         move.l d0,d0
    220e:	   |         movea.w d1,a0
    2210:	   |         adda.w d0,a0
    2212:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    2216:	   |         moveq #0,d0
    2218:	   |         move.w 24(sp),d0
    221c:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    2220:	   |         pea 180f5 <PutChar+0x319>
    2226:	   |         jsr 1733a <KPrintF>
    222c:	   |         addq.l #4,sp


  WaitBlit();
    222e:	   |         move.l 1ca94 <GfxBase>,d0
    2234:	   |         movea.l d0,a6
    2236:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    223a:	   |         movea.l 26(sp),a0
    223e:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    2244:	   |         movea.l 26(sp),a0
    2248:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    224e:	   |         movea.l 26(sp),a0
    2252:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2258:	   |         movea.l 26(sp),a0
    225c:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    2262:	   |         move.w 126(sp),d0
    2266:	   |         sub.w 130(sp),d0
    226a:	   |         movea.l 26(sp),a0
    226e:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    2272:	   |         move.w 126(sp),d0
    2276:	   |         sub.w 130(sp),d0
    227a:	   |         movea.l 26(sp),a0
    227e:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    2282:	   |         movea.l 26(sp),a0
    2286:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    228c:	   |         movea.l 26(sp),a0
    2290:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2296:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    229c:	   |         clr.l 136(sp)
    22a0:	   |     /-- bra.s 2302 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    22a2:	   |  /--|-> movea.l 26(sp),a0
    22a6:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    22ac:	   |  |  |   move.l 140(sp),d0
    22b0:	   |  |  |   movea.l 26(sp),a0
    22b4:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    22b8:	   |  |  |   move.l 144(sp),d0
    22bc:	   |  |  |   movea.l 26(sp),a0
    22c0:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    22c4:	   |  |  |   move.l 144(sp),d0
    22c8:	   |  |  |   movea.l 26(sp),a0
    22cc:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    22d0:	   |  |  |   move.w 132(sp),d0
    22d4:	   |  |  |   lsl.w #6,d0
    22d6:	   |  |  |   add.w 128(sp),d0
    22da:	   |  |  |   movea.l 26(sp),a0
    22de:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    22e2:	   |  |  |   moveq #0,d0
    22e4:	   |  |  |   move.w 124(sp),d0
    22e8:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    22ec:	   |  |  |   move.w 1c9a8 <CstBackdropSizePlane>,d0
    22f2:	   |  |  |   move.w d0,d0
    22f4:	   |  |  |   andi.l #65535,d0
    22fa:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    22fe:	   |  |  |   addq.l #1,136(sp)
    2302:	   |  |  \-> moveq #4,d0
    2304:	   |  |      cmp.l 136(sp),d0
    2308:	   |  \----- bge.s 22a2 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    230a:	   |         move.l 1ca94 <GfxBase>,d0
    2310:	   |         movea.l d0,a6
    2312:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    2316:	   |         pea 18114 <PutChar+0x338>
    231c:	   |         jsr 1733a <KPrintF>
    2322:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    2324:	   |         move.l 88(sp),20(sp)
    232a:	   |         move.l 1ca88 <SysBase>,d0
    2330:	   |         movea.l d0,a6
    2332:	   |         movea.l 20(sp),a1
    2336:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    233a:	   |         move.l 72(sp),16(sp)
    2340:	   |         move.l 1ca88 <SysBase>,d0
    2346:	   |         movea.l d0,a6
    2348:	   |         movea.l 16(sp),a1
    234c:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    2350:	   |         move.w #2,1c9b6 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    2358:	   |         move.l 1c9dc <winWidth>,d0
    235e:	   |         lsr.l #4,d0
    2360:	   |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    2366:	   |         move.l a0,d1
    2368:	   |         addq.l #2,d1
    236a:	   |         move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    2370:	   |         move.l d0,d0
    2372:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    2374:	   |         move.l 1c9e0 <winHeight>,d0
    237a:	   |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    2380:	   |         move.l a0,d1
    2382:	   |         addq.l #2,d1
    2384:	   |         move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    238a:	   |         move.l d0,d0
    238c:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    238e:	   |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    2394:	   |         move.l a0,d0
    2396:	   |         addq.l #2,d0
    2398:	   |         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    239e:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    23a0:	   |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    23a6:	   |         move.l a0,d0
    23a8:	   |         addq.l #2,d0
    23aa:	   |         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    23b0:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    23b2:	   |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    23b8:	   |         move.l a0,d0
    23ba:	   |         addq.l #2,d0
    23bc:	   |         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    23c2:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    23c4:	   |         pea 18134 <PutChar+0x358>
    23ca:	   |         jsr 1733a <KPrintF>
    23d0:	   |         addq.l #4,sp

}
    23d2:	   \-------> movem.l (sp)+,d2-d4/a6
    23d6:	             lea 144(sp),sp
    23da:	             rts

000023dc <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    23dc:	                lea -72(sp),sp
    23e0:	                move.l a6,-(sp)
    23e2:	                move.l d2,-(sp)
    23e4:	                move.l 88(sp),d1
    23e8:	                move.l 92(sp),d0
    23ec:	                move.w d1,d1
    23ee:	                move.w d1,10(sp)
    23f2:	                move.w d0,d0
    23f4:	                move.w d0,8(sp)
  UWORD *destination = 0;
    23f8:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    23fc:	                move.w #2,1c9b6 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    2404:	                move.l 1c9aa <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    240c:	                clr.l 56(sp)

  blitwidth = single->width/16;
    2410:	                movea.l 84(sp),a0
    2414:	                move.l (a0),d0
    2416:	                movea.l d0,a0
    2418:	                cmpa.w #0,a0
    241c:	            /-- bge.s 2422 <CstPasteChar+0x46>
    241e:	            |   lea 15(a0),a0
    2422:	            \-> move.l a0,d0
    2424:	                asr.l #4,d0
    2426:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    242a:	            /-- bne.s 2432 <CstPasteChar+0x56>
    242c:	            |   moveq #1,d0
    242e:	            |   move.l d0,40(sp)

  if( y < 0) {
    2432:	            \-> tst.w 8(sp)
    2436:	         /----- bge.s 247e <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    2438:	         |      movea.w 8(sp),a1
    243c:	         |      movea.l 84(sp),a0
    2440:	         |      move.l 4(a0),d0
    2444:	         |      add.l a1,d0
    2446:	         |  /-- bpl.s 245a <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2448:	         |  |   pea 1814e <PutChar+0x372>
    244e:	         |  |   jsr 1733a <KPrintF>
    2454:	         |  |   addq.l #4,sp
      return;
    2456:	/--------|--|-- bra.w 2b1a <CstPasteChar+0x73e>
    }
    ystartdst = 0;
    245a:	|        |  \-> clr.l 52(sp)
    ystartsrc = y*-1;
    245e:	|        |      move.w 8(sp),d0
    2462:	|        |      ext.l d0
    2464:	|        |      neg.l d0
    2466:	|        |      move.l d0,48(sp)
    blitheight = single->height+y;
    246a:	|        |      movea.l 84(sp),a0
    246e:	|        |      move.l 4(a0),d0
    2472:	|        |      movea.w 8(sp),a0
    2476:	|        |      add.l a0,d0
    2478:	|        |      move.l d0,44(sp)
    247c:	|     /--|----- bra.s 24f0 <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    247e:	|     |  \----> movea.w 8(sp),a1
    2482:	|     |         movea.l 84(sp),a0
    2486:	|     |         move.l 4(a0),d0
    248a:	|     |         move.l a1,d1
    248c:	|     |         add.l d0,d1
    248e:	|     |         move.l 1c9e0 <winHeight>,d0
    2494:	|     |         cmp.l d1,d0
    2496:	|     |  /----- bge.s 24d8 <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    2498:	|     |  |      movea.w 8(sp),a0
    249c:	|     |  |      move.l 1c9e0 <winHeight>,d0
    24a2:	|     |  |      cmp.l a0,d0
    24a4:	|     |  |  /-- bge.s 24b8 <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    24a6:	|     |  |  |   pea 1814e <PutChar+0x372>
    24ac:	|     |  |  |   jsr 1733a <KPrintF>
    24b2:	|     |  |  |   addq.l #4,sp
      return;
    24b4:	+-----|--|--|-- bra.w 2b1a <CstPasteChar+0x73e>
    }
    ystartdst = y;
    24b8:	|     |  |  \-> movea.w 8(sp),a0
    24bc:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    24c0:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    24c4:	|     |  |      move.l 1c9e0 <winHeight>,d0
    24ca:	|     |  |      movea.w 8(sp),a0
    24ce:	|     |  |      move.l d0,d1
    24d0:	|     |  |      sub.l a0,d1
    24d2:	|     |  |      move.l d1,44(sp)
    24d6:	|     +--|----- bra.s 24f0 <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    24d8:	|     |  \----> movea.w 8(sp),a0
    24dc:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    24e0:	|     |         clr.l 48(sp)
    blitheight = single->height;
    24e4:	|     |         movea.l 84(sp),a0
    24e8:	|     |         move.l 4(a0),d0
    24ec:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    24f0:	|     \-------> tst.w 10(sp)
    24f4:	|        /----- bge.w 2666 <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    24f8:	|        |      movea.w 10(sp),a1
    24fc:	|        |      movea.l 84(sp),a0
    2500:	|        |      move.l (a0),d0
    2502:	|        |      add.l a1,d0
    2504:	|        |  /-- bpl.s 2518 <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2506:	|        |  |   pea 1814e <PutChar+0x372>
    250c:	|        |  |   jsr 1733a <KPrintF>
    2512:	|        |  |   addq.l #4,sp
      return;
    2514:	+--------|--|-- bra.w 2b1a <CstPasteChar+0x73e>

    }
    
    extrawords = 1;
    2518:	|        |  \-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    251e:	|        |      move.w 10(sp),d0
    2522:	|        |  /-- bpl.s 2528 <CstPasteChar+0x14c>
    2524:	|        |  |   addi.w #15,d0
    2528:	|        |  \-> asr.w #4,d0
    252a:	|        |      neg.w d0
    252c:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    2530:	|        |      move.w 10(sp),d0
    2534:	|        |      ext.l d0
    2536:	|        |      neg.l d0
    2538:	|        |      andi.l #-2147483633,d0
    253e:	|        |  /-- bpl.s 2548 <CstPasteChar+0x16c>
    2540:	|        |  |   subq.l #1,d0
    2542:	|        |  |   moveq #-16,d1
    2544:	|        |  |   or.l d1,d0
    2546:	|        |  |   addq.l #1,d0
    2548:	|        |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    254c:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2550:	|        |      movea.l 84(sp),a0
    2554:	|        |      move.l 24(a0),d0
    2558:	|        |      move.l d0,d1
    255a:	|        |      moveq #0,d0
    255c:	|        |      move.w 76(sp),d0
    2560:	|        |      add.l d0,d0
    2562:	|        |      move.l d1,d2
    2564:	|        |      add.l d0,d2
    2566:	|        |      movea.l 84(sp),a0
    256a:	|        |      move.l (a0),d0
    256c:	|        |      move.l 48(sp),-(sp)
    2570:	|        |      move.l d0,-(sp)
    2572:	|        |      jsr 17cc6 <__mulsi3>
    2578:	|        |      addq.l #8,sp
    257a:	|        |      lsr.l #3,d0
    257c:	|        |      move.l d2,d1
    257e:	|        |      add.l d0,d1
    2580:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2584:	|        |      move.l 1c9dc <winWidth>,d0
    258a:	|        |      move.l 52(sp),-(sp)
    258e:	|        |      move.l d0,-(sp)
    2590:	|        |      jsr 17cc6 <__mulsi3>
    2596:	|        |      addq.l #8,sp
    2598:	|        |      lsr.l #3,d0
    259a:	|        |      move.l 28(sp),d1
    259e:	|        |      add.l d1,d0
    25a0:	|        |      move.l d0,d2
    25a2:	|        |      subq.l #2,d2
    25a4:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    25a8:	|        |      move.l 1c9dc <winWidth>,d0
    25ae:	|        |      move.l 52(sp),-(sp)
    25b2:	|        |      move.l d0,-(sp)
    25b4:	|        |      jsr 17cc6 <__mulsi3>
    25ba:	|        |      addq.l #8,sp
    25bc:	|        |      lsr.l #3,d0
    25be:	|        |      move.l 28(sp),d1
    25c2:	|        |      add.l d1,d0
    25c4:	|        |      move.l d0,d1
    25c6:	|        |      subq.l #2,d1
    25c8:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    25cc:	|        |      moveq #0,d0
    25ce:	|        |      move.w 74(sp),d0
    25d2:	|        |      moveq #16,d1
    25d4:	|        |      sub.l d0,d1
    25d6:	|        |      move.l d1,d0
    25d8:	|        |      moveq #12,d2
    25da:	|        |      lsl.l d2,d0
    25dc:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    25e0:	|        |      movea.l 84(sp),a0
    25e4:	|        |      move.l (a0),d0
    25e6:	|        |      movea.l d0,a0
    25e8:	|        |      cmpa.w #0,a0
    25ec:	|        |  /-- bge.s 25f2 <CstPasteChar+0x216>
    25ee:	|        |  |   lea 15(a0),a0
    25f2:	|        |  \-> move.l a0,d0
    25f4:	|        |      asr.l #4,d0
    25f6:	|        |      move.l d0,d0
    25f8:	|        |      add.w 76(sp),d0
    25fc:	|        |      movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    2602:	|        |      move.l a0,d1
    2604:	|        |      addq.l #2,d1
    2606:	|        |      move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    260c:	|        |      add.w 78(sp),d0
    2610:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2612:	|        |      movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    2618:	|        |      move.l a0,d0
    261a:	|        |      addq.l #2,d0
    261c:	|        |      move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    2622:	|        |      move.l 44(sp),d0
    2626:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2628:	|        |      movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    262e:	|        |      move.l a0,d0
    2630:	|        |      addq.l #2,d0
    2632:	|        |      move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    2638:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    263a:	|        |      movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    2640:	|        |      move.l a0,d0
    2642:	|        |      addq.l #2,d0
    2644:	|        |      move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    264a:	|        |      move.l 52(sp),d0
    264e:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2650:	|        |      movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    2656:	|        |      move.l a0,d0
    2658:	|        |      addq.l #2,d0
    265a:	|        |      move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    2660:	|        |      clr.w (a0)
    2662:	|     /--|----- bra.w 297a <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2666:	|     |  \----> movea.w 10(sp),a1
    266a:	|     |         movea.l 84(sp),a0
    266e:	|     |         move.l (a0),d0
    2670:	|     |         move.l a1,d1
    2672:	|     |         add.l d0,d1
    2674:	|     |         move.l 1c9dc <winWidth>,d0
    267a:	|     |         cmp.l d1,d0
    267c:	|     |  /----- bge.w 2818 <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    2680:	|     |  |      movea.w 10(sp),a1
    2684:	|     |  |      movea.l 84(sp),a0
    2688:	|     |  |      move.l (a0),d0
    268a:	|     |  |      move.l a1,d1
    268c:	|     |  |      sub.l d0,d1
    268e:	|     |  |      move.l 1c9dc <winWidth>,d0
    2694:	|     |  |      cmp.l d1,d0
    2696:	|     |  |  /-- bge.s 26aa <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2698:	|     |  |  |   pea 1814e <PutChar+0x372>
    269e:	|     |  |  |   jsr 1733a <KPrintF>
    26a4:	|     |  |  |   addq.l #4,sp
      return;
    26a6:	+-----|--|--|-- bra.w 2b1a <CstPasteChar+0x73e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    26aa:	|     |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    26ae:	|     |  |      movea.w 10(sp),a1
    26b2:	|     |  |      movea.l 84(sp),a0
    26b6:	|     |  |      move.l (a0),d0
    26b8:	|     |  |      add.l a1,d0
    26ba:	|     |  |      move.l d0,d1
    26bc:	|     |  |      move.l 1c9dc <winWidth>,d0
    26c2:	|     |  |      sub.l d0,d1
    26c4:	|     |  |      move.l d1,d0
    26c6:	|     |  |      lsr.l #4,d0
    26c8:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    26cc:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    26d0:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    26d6:	|     |  |      movea.l 84(sp),a0
    26da:	|     |  |      move.l 24(a0),d0
    26de:	|     |  |      move.l d0,d2
    26e0:	|     |  |      movea.l 84(sp),a0
    26e4:	|     |  |      move.l (a0),d0
    26e6:	|     |  |      move.l 48(sp),-(sp)
    26ea:	|     |  |      move.l d0,-(sp)
    26ec:	|     |  |      jsr 17cc6 <__mulsi3>
    26f2:	|     |  |      addq.l #8,sp
    26f4:	|     |  |      lsr.l #3,d0
    26f6:	|     |  |      move.l d2,d1
    26f8:	|     |  |      add.l d0,d1
    26fa:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    26fe:	|     |  |      move.l 1c9dc <winWidth>,d0
    2704:	|     |  |      move.l 52(sp),-(sp)
    2708:	|     |  |      move.l d0,-(sp)
    270a:	|     |  |      jsr 17cc6 <__mulsi3>
    2710:	|     |  |      addq.l #8,sp
    2712:	|     |  |      lsr.l #3,d0
    2714:	|     |  |      move.l 28(sp),d1
    2718:	|     |  |      add.l d0,d1
    271a:	|     |  |      move.w 10(sp),d0
    271e:	|     |  |  /-- bpl.s 2724 <CstPasteChar+0x348>
    2720:	|     |  |  |   addi.w #15,d0
    2724:	|     |  |  \-> asr.w #4,d0
    2726:	|     |  |      movea.w d0,a0
    2728:	|     |  |      move.l a0,d0
    272a:	|     |  |      add.l a0,d0
    272c:	|     |  |      move.l d1,d2
    272e:	|     |  |      add.l d0,d2
    2730:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2734:	|     |  |      move.l 1c9dc <winWidth>,d0
    273a:	|     |  |      move.l 52(sp),-(sp)
    273e:	|     |  |      move.l d0,-(sp)
    2740:	|     |  |      jsr 17cc6 <__mulsi3>
    2746:	|     |  |      addq.l #8,sp
    2748:	|     |  |      lsr.l #3,d0
    274a:	|     |  |      move.l 28(sp),d1
    274e:	|     |  |      add.l d0,d1
    2750:	|     |  |      move.w 10(sp),d0
    2754:	|     |  |  /-- bpl.s 275a <CstPasteChar+0x37e>
    2756:	|     |  |  |   addi.w #15,d0
    275a:	|     |  |  \-> asr.w #4,d0
    275c:	|     |  |      movea.w d0,a0
    275e:	|     |  |      move.l a0,d0
    2760:	|     |  |      add.l a0,d0
    2762:	|     |  |      move.l d1,d2
    2764:	|     |  |      add.l d0,d2
    2766:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    276a:	|     |  |      movea.l 84(sp),a0
    276e:	|     |  |      move.l (a0),d0
    2770:	|     |  |      andi.l #-2147483633,d0
    2776:	|     |  |  /-- bpl.s 2780 <CstPasteChar+0x3a4>
    2778:	|     |  |  |   subq.l #1,d0
    277a:	|     |  |  |   moveq #-16,d1
    277c:	|     |  |  |   or.l d1,d0
    277e:	|     |  |  |   addq.l #1,d0
    2780:	|     |  |  \-> moveq #12,d2
    2782:	|     |  |      lsl.l d2,d0
    2784:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2788:	|     |  |      movea.l 84(sp),a0
    278c:	|     |  |      move.l (a0),d0
    278e:	|     |  |      movea.l d0,a0
    2790:	|     |  |      cmpa.w #0,a0
    2794:	|     |  |  /-- bge.s 279a <CstPasteChar+0x3be>
    2796:	|     |  |  |   lea 15(a0),a0
    279a:	|     |  |  \-> move.l a0,d0
    279c:	|     |  |      asr.l #4,d0
    279e:	|     |  |      move.l d0,d0
    27a0:	|     |  |      movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    27a6:	|     |  |      move.l a0,d1
    27a8:	|     |  |      addq.l #2,d1
    27aa:	|     |  |      move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    27b0:	|     |  |      add.w 76(sp),d0
    27b4:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    27b6:	|     |  |      movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    27bc:	|     |  |      move.l a0,d0
    27be:	|     |  |      addq.l #2,d0
    27c0:	|     |  |      move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    27c6:	|     |  |      move.l 44(sp),d0
    27ca:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    27cc:	|     |  |      move.w 10(sp),d0
    27d0:	|     |  |  /-- bpl.s 27d6 <CstPasteChar+0x3fa>
    27d2:	|     |  |  |   addi.w #15,d0
    27d6:	|     |  |  \-> asr.w #4,d0
    27d8:	|     |  |      movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    27de:	|     |  |      move.l a0,d1
    27e0:	|     |  |      addq.l #2,d1
    27e2:	|     |  |      move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    27e8:	|     |  |      add.w d0,d0
    27ea:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    27ec:	|     |  |      movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    27f2:	|     |  |      move.l a0,d0
    27f4:	|     |  |      addq.l #2,d0
    27f6:	|     |  |      move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    27fc:	|     |  |      move.l 52(sp),d0
    2800:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2802:	|     |  |      movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    2808:	|     |  |      move.l a0,d0
    280a:	|     |  |      addq.l #2,d0
    280c:	|     |  |      move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    2812:	|     |  |      clr.w (a0)
    2814:	|     +--|----- bra.w 297a <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2818:	|     |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    281e:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    2822:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2826:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    282a:	|     |         movea.l 84(sp),a0
    282e:	|     |         move.l 24(a0),d0
    2832:	|     |         move.l d0,d2
    2834:	|     |         movea.l 84(sp),a0
    2838:	|     |         move.l (a0),d0
    283a:	|     |         movea.l d0,a0
    283c:	|     |         cmpa.w #0,a0
    2840:	|     |     /-- bge.s 2846 <CstPasteChar+0x46a>
    2842:	|     |     |   lea 15(a0),a0
    2846:	|     |     \-> move.l a0,d0
    2848:	|     |         asr.l #4,d0
    284a:	|     |         move.l 48(sp),-(sp)
    284e:	|     |         move.l d0,-(sp)
    2850:	|     |         jsr 17cc6 <__mulsi3>
    2856:	|     |         addq.l #8,sp
    2858:	|     |         add.l d0,d0
    285a:	|     |         move.l d2,d1
    285c:	|     |         add.l d0,d1
    285e:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2862:	|     |         move.l 1c9dc <winWidth>,d0
    2868:	|     |         move.l 52(sp),-(sp)
    286c:	|     |         move.l d0,-(sp)
    286e:	|     |         jsr 17cc6 <__mulsi3>
    2874:	|     |         addq.l #8,sp
    2876:	|     |         lsr.l #3,d0
    2878:	|     |         move.l 28(sp),d1
    287c:	|     |         add.l d0,d1
    287e:	|     |         move.w 10(sp),d0
    2882:	|     |     /-- bpl.s 2888 <CstPasteChar+0x4ac>
    2884:	|     |     |   addi.w #15,d0
    2888:	|     |     \-> asr.w #4,d0
    288a:	|     |         movea.w d0,a0
    288c:	|     |         move.l a0,d0
    288e:	|     |         add.l a0,d0
    2890:	|     |         move.l d1,d2
    2892:	|     |         add.l d0,d2
    2894:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2898:	|     |         move.l 1c9dc <winWidth>,d0
    289e:	|     |         move.l 52(sp),-(sp)
    28a2:	|     |         move.l d0,-(sp)
    28a4:	|     |         jsr 17cc6 <__mulsi3>
    28aa:	|     |         addq.l #8,sp
    28ac:	|     |         lsr.l #3,d0
    28ae:	|     |         move.l 28(sp),d1
    28b2:	|     |         add.l d0,d1
    28b4:	|     |         move.w 10(sp),d0
    28b8:	|     |     /-- bpl.s 28be <CstPasteChar+0x4e2>
    28ba:	|     |     |   addi.w #15,d0
    28be:	|     |     \-> asr.w #4,d0
    28c0:	|     |         movea.w d0,a0
    28c2:	|     |         move.l a0,d0
    28c4:	|     |         add.l a0,d0
    28c6:	|     |         move.l d1,d2
    28c8:	|     |         add.l d0,d2
    28ca:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    28ce:	|     |         move.w 10(sp),d0
    28d2:	|     |         andi.w #-32753,d0
    28d6:	|     |     /-- bpl.s 28e0 <CstPasteChar+0x504>
    28d8:	|     |     |   subq.w #1,d0
    28da:	|     |     |   ori.w #-16,d0
    28de:	|     |     |   addq.w #1,d0
    28e0:	|     |     \-> ext.l d0
    28e2:	|     |         moveq #12,d1
    28e4:	|     |         lsl.l d1,d0
    28e6:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    28ea:	|     |         movea.l 84(sp),a0
    28ee:	|     |         move.l (a0),d0
    28f0:	|     |         movea.l d0,a0
    28f2:	|     |         cmpa.w #0,a0
    28f6:	|     |     /-- bge.s 28fc <CstPasteChar+0x520>
    28f8:	|     |     |   lea 15(a0),a0
    28fc:	|     |     \-> move.l a0,d0
    28fe:	|     |         asr.l #4,d0
    2900:	|     |         move.l d0,d0
    2902:	|     |         add.w 76(sp),d0
    2906:	|     |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    290c:	|     |         move.l a0,d1
    290e:	|     |         addq.l #2,d1
    2910:	|     |         move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    2916:	|     |         add.w 78(sp),d0
    291a:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    291c:	|     |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    2922:	|     |         move.l a0,d0
    2924:	|     |         addq.l #2,d0
    2926:	|     |         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    292c:	|     |         move.l 44(sp),d0
    2930:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2932:	|     |         move.w 10(sp),d0
    2936:	|     |     /-- bpl.s 293c <CstPasteChar+0x560>
    2938:	|     |     |   addi.w #15,d0
    293c:	|     |     \-> asr.w #4,d0
    293e:	|     |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    2944:	|     |         move.l a0,d1
    2946:	|     |         addq.l #2,d1
    2948:	|     |         move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    294e:	|     |         add.w d0,d0
    2950:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2952:	|     |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    2958:	|     |         move.l a0,d0
    295a:	|     |         addq.l #2,d0
    295c:	|     |         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    2962:	|     |         move.l 52(sp),d0
    2966:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2968:	|     |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    296e:	|     |         move.l a0,d0
    2970:	|     |         addq.l #2,d0
    2972:	|     |         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    2978:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    297a:	|     \-------> moveq #0,d0
    297c:	|               move.w 74(sp),d0
    2980:	|               moveq #0,d1
    2982:	|               not.w d1
    2984:	|               asr.l d0,d1
    2986:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    298a:	|               moveq #0,d1
    298c:	|               move.w 76(sp),d1
    2990:	|               moveq #0,d0
    2992:	|               move.w 78(sp),d0
    2996:	|               sub.l d0,d1
    2998:	|               move.l d1,d0
    299a:	|               add.w d0,d0
    299c:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    29a0:	|               move.l 1c9dc <winWidth>,d0
    29a6:	|               lsr.l #3,d0
    29a8:	|               move.l d0,d2
    29aa:	|               move.w 76(sp),d1
    29ae:	|               sub.w 78(sp),d1
    29b2:	|               move.l 40(sp),d0
    29b6:	|               sub.w d0,d1
    29b8:	|               move.w d1,d0
    29ba:	|               add.w d1,d0
    29bc:	|               add.w d2,d0
    29be:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    29c2:	|               move.l 1c9dc <winWidth>,d0
    29c8:	|               lsr.l #3,d0
    29ca:	|               move.l d0,d2
    29cc:	|               move.w 76(sp),d1
    29d0:	|               sub.w 78(sp),d1
    29d4:	|               move.l 40(sp),d0
    29d8:	|               sub.w d0,d1
    29da:	|               move.w d1,d0
    29dc:	|               add.w d1,d0
    29de:	|               add.w d2,d0
    29e0:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    29e4:	|               move.l #14675968,16(sp)
  WaitBlit();
    29ec:	|               move.l 1ca94 <GfxBase>,d0
    29f2:	|               movea.l d0,a6
    29f4:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    29f8:	|               movea.l 16(sp),a0
    29fc:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    2a02:	|               movea.l 16(sp),a0
    2a06:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2a0c:	|               move.w 24(sp),d0
    2a10:	|               movea.l 16(sp),a0
    2a14:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2a18:	|               move.w 22(sp),d0
    2a1c:	|               movea.l 16(sp),a0
    2a20:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2a24:	|               move.w 20(sp),d0
    2a28:	|               movea.l 16(sp),a0
    2a2c:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2a30:	|               move.l 1c9dc <winWidth>,d0
    2a36:	|               lsr.l #3,d0
    2a38:	|               move.l d0,d1
    2a3a:	|               move.l 1c9e0 <winHeight>,d0
    2a40:	|               move.l d0,d0
    2a42:	|               move.w d1,d2
    2a44:	|               muls.w d0,d2
    2a46:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2a4a:	|               move.w 1c9a2 <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2a52:	|               move.w 38(sp),d0
    2a56:	|               andi.w #1,d0
    2a5a:	|               move.w d0,12(sp)
  if(tmp2) {
    2a5e:	|        /----- beq.s 2a68 <CstPasteChar+0x68c>
    minterm = 0xbfa;
    2a60:	|        |      move.w #3066,36(sp)
    2a66:	|        |  /-- bra.s 2a6e <CstPasteChar+0x692>
  } else {
    minterm = 0xb0a;
    2a68:	|        \--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2a6e:	|           \-> clr.l 32(sp)
    2a72:	|     /-------- bra.w 2b10 <CstPasteChar+0x734>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2a76:	|  /--|-------> move.l 56(sp),d0
    2a7a:	|  |  |         add.w 36(sp),d0
    2a7e:	|  |  |         movea.l 16(sp),a0
    2a82:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2a86:	|  |  |         move.l 68(sp),d0
    2a8a:	|  |  |         movea.l 16(sp),a0
    2a8e:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2a92:	|  |  |         move.l 64(sp),d0
    2a96:	|  |  |         movea.l 16(sp),a0
    2a9a:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2a9e:	|  |  |         move.l 60(sp),d0
    2aa2:	|  |  |         movea.l 16(sp),a0
    2aa6:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2aaa:	|  |  |         move.l 44(sp),d0
    2aae:	|  |  |         lsl.w #6,d0
    2ab0:	|  |  |         move.l 40(sp),d1
    2ab4:	|  |  |         add.w d1,d0
    2ab6:	|  |  |         sub.w 76(sp),d0
    2aba:	|  |  |         add.w 78(sp),d0
    2abe:	|  |  |         movea.l 16(sp),a0
    2ac2:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2ac6:	|  |  |         moveq #0,d0
    2ac8:	|  |  |         move.w 14(sp),d0
    2acc:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2ad0:	|  |  |         moveq #0,d0
    2ad2:	|  |  |         move.w 14(sp),d0
    2ad6:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2ada:	|  |  |         move.w 38(sp),d0
    2ade:	|  |  |         lsr.w #1,d0
    2ae0:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    2ae4:	|  |  |         move.w 38(sp),d1
    2ae8:	|  |  |         andi.w #1,d1
    2aec:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2af0:	|  |  |  /----- beq.s 2afa <CstPasteChar+0x71e>
      minterm = 0xbfa;
    2af2:	|  |  |  |      move.w #3066,36(sp)
    2af8:	|  |  |  |  /-- bra.s 2b00 <CstPasteChar+0x724>
    } else {
      minterm = 0xb0a;
    2afa:	|  |  |  \--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2b00:	|  |  |     \-> move.l 1ca94 <GfxBase>,d0
    2b06:	|  |  |         movea.l d0,a6
    2b08:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b0c:	|  |  |         addq.l #1,32(sp)
    2b10:	|  |  \-------> moveq #4,d2
    2b12:	|  |            cmp.l 32(sp),d2
    2b16:	|  \----------- bge.w 2a76 <CstPasteChar+0x69a>
 
  }   
}
    2b1a:	\-------------> move.l (sp)+,d2
    2b1c:	                movea.l (sp)+,a6
    2b1e:	                lea 72(sp),sp
    2b22:	                rts

00002b24 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2b24:	                   lea -24(sp),sp
    2b28:	                   move.l a6,-(sp)
    2b2a:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2b2c:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2b34:	                   move.l 1c9c4 <CstCleanupQueueDrawBuffer>,d0
    2b3a:	/----------------- beq.w 2d42 <CstRestoreScreen+0x21e>
    2b3e:	|                  move.l 1c9bc <CstDrawBuffer>,d0
    2b44:	+----------------- beq.w 2d42 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    2b48:	|                  move.l 1ca94 <GfxBase>,d0
    2b4e:	|                  movea.l d0,a6
    2b50:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2b54:	|                  movea.l 16(sp),a0
    2b58:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2b5e:	|                  movea.l 16(sp),a0
    2b62:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2b68:	|                  movea.l 16(sp),a0
    2b6c:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2b72:	|     /----------- bra.w 2d36 <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    2b76:	|  /--|----------> movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    2b7c:	|  |  |            move.l 4(a0),d0
    2b80:	|  |  |  /-------- beq.w 2d04 <CstRestoreScreen+0x1e0>
    2b84:	|  |  |  |         movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    2b8a:	|  |  |  |         movea.l 4(a0),a0
    2b8e:	|  |  |  |         move.l 16(a0),d0
    2b92:	|  |  |  |         moveq #2,d1
    2b94:	|  |  |  |         cmp.l d0,d1
    2b96:	|  |  |  +-------- blt.w 2d04 <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2b9a:	|  |  |  |         move.l 1c9dc <winWidth>,d0
    2ba0:	|  |  |  |         lsr.l #3,d0
    2ba2:	|  |  |  |         move.l d0,d1
    2ba4:	|  |  |  |         movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    2baa:	|  |  |  |         move.w 8(a0),d0
    2bae:	|  |  |  |         add.w d0,d0
    2bb0:	|  |  |  |         sub.w d0,d1
    2bb2:	|  |  |  |         movea.l 16(sp),a0
    2bb6:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2bba:	|  |  |  |         move.l 1c9dc <winWidth>,d0
    2bc0:	|  |  |  |         lsr.l #3,d0
    2bc2:	|  |  |  |         move.l d0,d1
    2bc4:	|  |  |  |         movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    2bca:	|  |  |  |         move.w 8(a0),d0
    2bce:	|  |  |  |         add.w d0,d0
    2bd0:	|  |  |  |         sub.w d0,d1
    2bd2:	|  |  |  |         movea.l 16(sp),a0
    2bd6:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2bda:	|  |  |  |         movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    2be0:	|  |  |  |         move.w 14(a0),d0
    2be4:	|  |  |  |         move.w d0,d0
    2be6:	|  |  |  |         andi.l #65535,d0
    2bec:	|  |  |  |         move.l 1c9dc <winWidth>,d1
    2bf2:	|  |  |  |         move.l d1,-(sp)
    2bf4:	|  |  |  |         move.l d0,-(sp)
    2bf6:	|  |  |  |         jsr 17cc6 <__mulsi3>
    2bfc:	|  |  |  |         addq.l #8,sp
    2bfe:	|  |  |  |         move.l d0,d1
    2c00:	|  |  |  |         lsr.l #3,d1
    2c02:	|  |  |  |         move.l 1c9aa <CstBackDrop>,d0
    2c08:	|  |  |  |         add.l d0,d1
    2c0a:	|  |  |  |         movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    2c10:	|  |  |  |         move.w 12(a0),d0
    2c14:	|  |  |  |         move.w d0,d0
    2c16:	|  |  |  |         andi.l #65535,d0
    2c1c:	|  |  |  |         move.l d1,d2
    2c1e:	|  |  |  |         add.l d0,d2
    2c20:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2c24:	|  |  |  |         movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    2c2a:	|  |  |  |         move.w 14(a0),d0
    2c2e:	|  |  |  |         move.w d0,d0
    2c30:	|  |  |  |         andi.l #65535,d0
    2c36:	|  |  |  |         move.l 1c9dc <winWidth>,d1
    2c3c:	|  |  |  |         move.l d1,-(sp)
    2c3e:	|  |  |  |         move.l d0,-(sp)
    2c40:	|  |  |  |         jsr 17cc6 <__mulsi3>
    2c46:	|  |  |  |         addq.l #8,sp
    2c48:	|  |  |  |         move.l d0,d1
    2c4a:	|  |  |  |         lsr.l #3,d1
    2c4c:	|  |  |  |         move.l 1c9bc <CstDrawBuffer>,d0
    2c52:	|  |  |  |         add.l d0,d1
    2c54:	|  |  |  |         movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    2c5a:	|  |  |  |         move.w 12(a0),d0
    2c5e:	|  |  |  |         move.w d0,d0
    2c60:	|  |  |  |         andi.l #65535,d0
    2c66:	|  |  |  |         move.l d1,d2
    2c68:	|  |  |  |         add.l d0,d2
    2c6a:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2c6e:	|  |  |  |         clr.l 20(sp)
    2c72:	|  |  |  |     /-- bra.w 2cfa <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    2c76:	|  |  |  |  /--|-> move.l 28(sp),d0
    2c7a:	|  |  |  |  |  |   movea.l 16(sp),a0
    2c7e:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2c82:	|  |  |  |  |  |   move.l 24(sp),d0
    2c86:	|  |  |  |  |  |   movea.l 16(sp),a0
    2c8a:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2c8e:	|  |  |  |  |  |   movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    2c94:	|  |  |  |  |  |   move.w 10(a0),d0
    2c98:	|  |  |  |  |  |   lsl.w #6,d0
    2c9a:	|  |  |  |  |  |   movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    2ca0:	|  |  |  |  |  |   move.w 8(a0),d1
    2ca4:	|  |  |  |  |  |   add.w d1,d0
    2ca6:	|  |  |  |  |  |   movea.l 16(sp),a0
    2caa:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2cae:	|  |  |  |  |  |   move.l 1c9dc <winWidth>,d0
    2cb4:	|  |  |  |  |  |   lsr.l #3,d0
    2cb6:	|  |  |  |  |  |   move.l 1c9e0 <winHeight>,d1
    2cbc:	|  |  |  |  |  |   move.l d1,-(sp)
    2cbe:	|  |  |  |  |  |   move.l d0,-(sp)
    2cc0:	|  |  |  |  |  |   jsr 17cc6 <__mulsi3>
    2cc6:	|  |  |  |  |  |   addq.l #8,sp
    2cc8:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2ccc:	|  |  |  |  |  |   move.l 1c9dc <winWidth>,d0
    2cd2:	|  |  |  |  |  |   lsr.l #3,d0
    2cd4:	|  |  |  |  |  |   move.l 1c9e0 <winHeight>,d1
    2cda:	|  |  |  |  |  |   move.l d1,-(sp)
    2cdc:	|  |  |  |  |  |   move.l d0,-(sp)
    2cde:	|  |  |  |  |  |   jsr 17cc6 <__mulsi3>
    2ce4:	|  |  |  |  |  |   addq.l #8,sp
    2ce6:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2cea:	|  |  |  |  |  |   move.l 1ca94 <GfxBase>,d0
    2cf0:	|  |  |  |  |  |   movea.l d0,a6
    2cf2:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2cf6:	|  |  |  |  |  |   addq.l #1,20(sp)
    2cfa:	|  |  |  |  |  \-> moveq #4,d0
    2cfc:	|  |  |  |  |      cmp.l 20(sp),d0
    2d00:	|  |  |  |  \----- bge.w 2c76 <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2d04:	|  |  |  \-------> move.l 1c9c4 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2d0c:	|  |  |            movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    2d12:	|  |  |            move.l 16(a0),d0
    2d16:	|  |  |            move.l d0,1c9c4 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2d1c:	|  |  |            move.l 12(sp),8(sp)
    2d22:	|  |  |            move.l 1ca88 <SysBase>,d0
    2d28:	|  |  |            movea.l d0,a6
    2d2a:	|  |  |            movea.l 8(sp),a1
    2d2e:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2d32:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2d36:	|  |  \----------> move.l 1c9c4 <CstCleanupQueueDrawBuffer>,d0
    2d3c:	|  \-------------- bne.w 2b76 <CstRestoreScreen+0x52>
    2d40:	|              /-- bra.s 2d44 <CstRestoreScreen+0x220>
    return;
    2d42:	\--------------|-> nop
  }
  
}
    2d44:	               \-> move.l (sp)+,d2
    2d46:	                   movea.l (sp)+,a6
    2d48:	                   lea 24(sp),sp
    2d4c:	                   rts

00002d4e <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2d4e:	                lea -132(sp),sp
    2d52:	                move.l a6,-(sp)
    2d54:	                move.l d2,-(sp)
    2d56:	                movea.l 152(sp),a0
    2d5a:	                move.l 156(sp),d1
    2d5e:	                move.l 160(sp),d0
    2d62:	                movea.w a0,a0
    2d64:	                move.w a0,12(sp)
    2d68:	                move.w d1,d1
    2d6a:	                move.w d1,10(sp)
    2d6e:	                move.w d0,d0
    2d70:	                move.w d0,8(sp)

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2d74:	                movea.w 10(sp),a1
    2d78:	                movea.w 12(sp),a0
    2d7c:	                move.l 1cae8 <zBuffer>,d0
    2d82:	                move.l a1,-(sp)
    2d84:	                move.l a0,-(sp)
    2d86:	                move.l d0,-(sp)
    2d88:	                move.l 156(sp),-(sp)
    2d8c:	                jsr 14e8 <CstDrawZBuffer>
    2d92:	                lea 16(sp),sp
    2d96:	                move.l d0,84(sp)

  UWORD *destination = 0;
    2d9a:	                clr.l 136(sp)
  switch(destinationtype)
    2d9e:	                moveq #0,d0
    2da0:	                move.w 8(sp),d0
    2da4:	                moveq #1,d1
    2da6:	                cmp.l d0,d1
    2da8:	            /-- beq.s 2db2 <CstScaleSprite+0x64>
    2daa:	            |   moveq #2,d2
    2dac:	            |   cmp.l d0,d2
    2dae:	         /--|-- beq.s 2dbc <CstScaleSprite+0x6e>
    2db0:	      /--|--|-- bra.s 2dce <CstScaleSprite+0x80>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    2db2:	      |  |  \-> move.l 1c9bc <CstDrawBuffer>,136(sp)
      break;
    2dba:	      +--|----- bra.s 2dce <CstScaleSprite+0x80>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    2dbc:	      |  \----> move.w #2,1c9b6 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2dc4:	      |         move.l 1c9aa <CstBackDrop>,136(sp)
      break;
    2dcc:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    2dce:	      \-------> tst.w 10(sp)
    2dd2:	         /----- bge.s 2e1a <CstScaleSprite+0xcc>
    if(y + single->height < 0) {
    2dd4:	         |      movea.w 10(sp),a1
    2dd8:	         |      movea.l 144(sp),a0
    2ddc:	         |      move.l 4(a0),d0
    2de0:	         |      add.l a1,d0
    2de2:	         |  /-- bpl.s 2df6 <CstScaleSprite+0xa8>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2de4:	         |  |   pea 1814e <PutChar+0x372>
    2dea:	         |  |   jsr 1733a <KPrintF>
    2df0:	         |  |   addq.l #4,sp
      return;
    2df2:	/--------|--|-- bra.w 38ac <CstScaleSprite+0xb5e>
    }
    ystartdst = 0;
    2df6:	|        |  \-> clr.l 100(sp)
    ystartsrc = y*-1;
    2dfa:	|        |      move.w 10(sp),d0
    2dfe:	|        |      ext.l d0
    2e00:	|        |      neg.l d0
    2e02:	|        |      move.l d0,96(sp)
    blitheight = single->height+y;
    2e06:	|        |      movea.l 144(sp),a0
    2e0a:	|        |      move.l 4(a0),d0
    2e0e:	|        |      movea.w 10(sp),a0
    2e12:	|        |      add.l a0,d0
    2e14:	|        |      move.l d0,92(sp)
    2e18:	|     /--|----- bra.s 2e8c <CstScaleSprite+0x13e>
  } else if(y+single->height > (int) winHeight) {
    2e1a:	|     |  \----> movea.w 10(sp),a1
    2e1e:	|     |         movea.l 144(sp),a0
    2e22:	|     |         move.l 4(a0),d0
    2e26:	|     |         move.l a1,d1
    2e28:	|     |         add.l d0,d1
    2e2a:	|     |         move.l 1c9e0 <winHeight>,d0
    2e30:	|     |         cmp.l d1,d0
    2e32:	|     |  /----- bge.s 2e74 <CstScaleSprite+0x126>
    if(y  > (int) winHeight) {
    2e34:	|     |  |      movea.w 10(sp),a0
    2e38:	|     |  |      move.l 1c9e0 <winHeight>,d0
    2e3e:	|     |  |      cmp.l a0,d0
    2e40:	|     |  |  /-- bge.s 2e54 <CstScaleSprite+0x106>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2e42:	|     |  |  |   pea 1814e <PutChar+0x372>
    2e48:	|     |  |  |   jsr 1733a <KPrintF>
    2e4e:	|     |  |  |   addq.l #4,sp
      return;
    2e50:	+-----|--|--|-- bra.w 38ac <CstScaleSprite+0xb5e>
    }
    ystartdst = y;
    2e54:	|     |  |  \-> movea.w 10(sp),a0
    2e58:	|     |  |      move.l a0,100(sp)
    ystartsrc = 0;
    2e5c:	|     |  |      clr.l 96(sp)
    blitheight = winHeight-y;
    2e60:	|     |  |      move.l 1c9e0 <winHeight>,d0
    2e66:	|     |  |      movea.w 10(sp),a0
    2e6a:	|     |  |      move.l d0,d1
    2e6c:	|     |  |      sub.l a0,d1
    2e6e:	|     |  |      move.l d1,92(sp)
    2e72:	|     +--|----- bra.s 2e8c <CstScaleSprite+0x13e>
  } else {
    ystartdst = y;
    2e74:	|     |  \----> movea.w 10(sp),a0
    2e78:	|     |         move.l a0,100(sp)
    ystartsrc = 0;
    2e7c:	|     |         clr.l 96(sp)
    blitheight = single->height;
    2e80:	|     |         movea.l 144(sp),a0
    2e84:	|     |         move.l 4(a0),d0
    2e88:	|     |         move.l d0,92(sp)
  }


  if( x < 0) 
    2e8c:	|     \-------> tst.w 12(sp)
    2e90:	|     /-------- bge.w 317a <CstScaleSprite+0x42c>
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2e94:	|     |         movea.w 12(sp),a1
    2e98:	|     |         movea.l 144(sp),a0
    2e9c:	|     |         move.l (a0),d0
    2e9e:	|     |         add.l a1,d0
    2ea0:	|     |     /-- bpl.s 2eb4 <CstScaleSprite+0x166>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2ea2:	|     |     |   pea 1814e <PutChar+0x372>
    2ea8:	|     |     |   jsr 1733a <KPrintF>
    2eae:	|     |     |   addq.l #4,sp
      return;
    2eb0:	+-----|-----|-- bra.w 38ac <CstScaleSprite+0xb5e>
    }
    
    cutwordssource = (x*-1)/16; 
    2eb4:	|     |     \-> move.w 12(sp),d0
    2eb8:	|     |     /-- bpl.s 2ebe <CstScaleSprite+0x170>
    2eba:	|     |     |   addi.w #15,d0
    2ebe:	|     |     \-> asr.w #4,d0
    2ec0:	|     |         neg.w d0
    2ec2:	|     |         move.w d0,132(sp)
    cutmaskpixel = (x*-1)%16;   
    2ec6:	|     |         move.w 12(sp),d0
    2eca:	|     |         ext.l d0
    2ecc:	|     |         neg.l d0
    2ece:	|     |         andi.l #-2147483633,d0
    2ed4:	|     |     /-- bpl.s 2ede <CstScaleSprite+0x190>
    2ed6:	|     |     |   subq.l #1,d0
    2ed8:	|     |     |   moveq #-16,d1
    2eda:	|     |     |   or.l d1,d0
    2edc:	|     |     |   addq.l #1,d0
    2ede:	|     |     \-> move.w d0,130(sp)

    extrawords = cutmaskpixel > 0 ? 1 : 0;
    2ee2:	|     |         sne d0
    2ee4:	|     |         neg.b d0
    2ee6:	|     |         move.b d0,d0
    2ee8:	|     |         andi.w #255,d0
    2eec:	|     |         move.w d0,134(sp)
    //extrawords = 1;
    if( cutmaskpixel > 0)
    2ef0:	|     |         tst.w 130(sp)
    2ef4:	|     |  /----- beq.s 2f74 <CstScaleSprite+0x226>
    {
      extrawords = 1;
    2ef6:	|     |  |      move.w #1,134(sp)
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2efc:	|     |  |      moveq #0,d0
    2efe:	|     |  |      move.w 130(sp),d0
    2f02:	|     |  |      moveq #16,d1
    2f04:	|     |  |      sub.l d0,d1
    2f06:	|     |  |      move.l d1,d0
    2f08:	|     |  |      moveq #12,d2
    2f0a:	|     |  |      lsl.l d2,d0
    2f0c:	|     |  |      addi.l #4042,d0
    2f12:	|     |  |      move.l d0,108(sp)
      bltcon1 = ((16-cutmaskpixel) << 12);
    2f16:	|     |  |      moveq #0,d0
    2f18:	|     |  |      move.w 130(sp),d0
    2f1c:	|     |  |      moveq #16,d1
    2f1e:	|     |  |      sub.l d0,d1
    2f20:	|     |  |      move.l d1,d0
    2f22:	|     |  |      moveq #12,d1
    2f24:	|     |  |      lsl.l d1,d0
    2f26:	|     |  |      move.l d0,104(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f2a:	|     |  |      move.l 1c9dc <winWidth>,d0
    2f30:	|     |  |      move.l 100(sp),-(sp)
    2f34:	|     |  |      move.l d0,-(sp)
    2f36:	|     |  |      jsr 17cc6 <__mulsi3>
    2f3c:	|     |  |      addq.l #8,sp
    2f3e:	|     |  |      lsr.l #3,d0
    2f40:	|     |  |      move.l 136(sp),d1
    2f44:	|     |  |      add.l d1,d0
    2f46:	|     |  |      move.l d0,d2
    2f48:	|     |  |      subq.l #2,d2
    2f4a:	|     |  |      move.l d2,116(sp)
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2f4e:	|     |  |      move.l 1c9dc <winWidth>,d0
    2f54:	|     |  |      move.l 100(sp),-(sp)
    2f58:	|     |  |      move.l d0,-(sp)
    2f5a:	|     |  |      jsr 17cc6 <__mulsi3>
    2f60:	|     |  |      addq.l #8,sp
    2f62:	|     |  |      lsr.l #3,d0
    2f64:	|     |  |      move.l 136(sp),d1
    2f68:	|     |  |      add.l d1,d0
    2f6a:	|     |  |      move.l d0,d1
    2f6c:	|     |  |      subq.l #2,d1
    2f6e:	|     |  |      move.l d1,112(sp)
    2f72:	|     |  |  /-- bra.s 2fc8 <CstScaleSprite+0x27a>
    }
    else
    {
      extrawords = 0;
    2f74:	|     |  \--|-> clr.w 134(sp)
      bltcon0 = 0xfca;
    2f78:	|     |     |   move.l #4042,108(sp)
      bltcon1 = 0;
    2f80:	|     |     |   clr.l 104(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    2f84:	|     |     |   move.l 1c9dc <winWidth>,d0
    2f8a:	|     |     |   move.l 100(sp),-(sp)
    2f8e:	|     |     |   move.l d0,-(sp)
    2f90:	|     |     |   jsr 17cc6 <__mulsi3>
    2f96:	|     |     |   addq.l #8,sp
    2f98:	|     |     |   lsr.l #3,d0
    2f9a:	|     |     |   move.l 136(sp),d1
    2f9e:	|     |     |   move.l d0,d2
    2fa0:	|     |     |   add.l d1,d2
    2fa2:	|     |     |   move.l d2,116(sp)
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8;   
    2fa6:	|     |     |   move.l 1c9dc <winWidth>,d0
    2fac:	|     |     |   move.l 100(sp),-(sp)
    2fb0:	|     |     |   move.l d0,-(sp)
    2fb2:	|     |     |   jsr 17cc6 <__mulsi3>
    2fb8:	|     |     |   addq.l #8,sp
    2fba:	|     |     |   lsr.l #3,d0
    2fbc:	|     |     |   move.l 136(sp),d1
    2fc0:	|     |     |   move.l d0,d2
    2fc2:	|     |     |   add.l d1,d2
    2fc4:	|     |     |   move.l d2,112(sp)
    }

    bltalwm = 0; //Last Word of this channel almost masked out
    2fc8:	|     |     \-> clr.w 128(sp)
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    2fcc:	|     |         moveq #0,d0
    2fce:	|     |         move.w 132(sp),d0
    2fd2:	|     |         add.l d0,d0
    2fd4:	|     |         move.l d0,d1
    2fd6:	|     |         move.l 84(sp),d0
    2fda:	|     |         move.l d1,d2
    2fdc:	|     |         add.l d0,d2
    2fde:	|     |         movea.l 144(sp),a0
    2fe2:	|     |         move.l (a0),d0
    2fe4:	|     |         move.l 96(sp),-(sp)
    2fe8:	|     |         move.l d0,-(sp)
    2fea:	|     |         jsr 17cc6 <__mulsi3>
    2ff0:	|     |         addq.l #8,sp
    2ff2:	|     |         lsr.l #3,d0
    2ff4:	|     |         move.l d2,d1
    2ff6:	|     |         add.l d0,d1
    2ff8:	|     |         move.l d1,124(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2ffc:	|     |         movea.l 144(sp),a0
    3000:	|     |         move.l 24(a0),d0
    3004:	|     |         move.l d0,d1
    3006:	|     |         moveq #0,d0
    3008:	|     |         move.w 132(sp),d0
    300c:	|     |         add.l d0,d0
    300e:	|     |         move.l d1,d2
    3010:	|     |         add.l d0,d2
    3012:	|     |         movea.l 144(sp),a0
    3016:	|     |         move.l (a0),d0
    3018:	|     |         move.l 96(sp),-(sp)
    301c:	|     |         move.l d0,-(sp)
    301e:	|     |         jsr 17cc6 <__mulsi3>
    3024:	|     |         addq.l #8,sp
    3026:	|     |         lsr.l #3,d0
    3028:	|     |         move.l d2,d1
    302a:	|     |         add.l d0,d1
    302c:	|     |         move.l d1,120(sp)
    
    if( destinationtype == SCREEN)
    3030:	|     |         cmpi.w #1,8(sp)
    3036:	|     |  /----- bne.w 30f4 <CstScaleSprite+0x3a6>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    303a:	|     |  |      move.l 1c9c4 <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3042:	|     |  |      moveq #20,d2
    3044:	|     |  |      move.l d2,44(sp)
    3048:	|     |  |      clr.l 40(sp)
    304c:	|     |  |      move.l 1ca88 <SysBase>,d0
    3052:	|     |  |      movea.l d0,a6
    3054:	|     |  |      move.l 44(sp),d0
    3058:	|     |  |      move.l 40(sp),d1
    305c:	|     |  |      jsr -684(a6)
    3060:	|     |  |      move.l d0,36(sp)
    3064:	|     |  |      move.l 36(sp),d0
    3068:	|     |  |      move.l d0,1c9c4 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    306e:	|     |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    3074:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    307a:	|     |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    3080:	|     |  |      move.w 12(sp),d0
    3084:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3086:	|     |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    308c:	|     |  |      move.w 10(sp),d0
    3090:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    3094:	|     |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    309a:	|     |  |      move.l 148(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    30a0:	|     |  |      movea.l 144(sp),a0
    30a4:	|     |  |      move.l (a0),d0
    30a6:	|     |  |      movea.l d0,a0
    30a8:	|     |  |      cmpa.w #0,a0
    30ac:	|     |  |  /-- bge.s 30b2 <CstScaleSprite+0x364>
    30ae:	|     |  |  |   lea 15(a0),a0
    30b2:	|     |  |  \-> move.l a0,d0
    30b4:	|     |  |      asr.l #4,d0
    30b6:	|     |  |      move.l d0,d0
    30b8:	|     |  |      add.w 132(sp),d0
    30bc:	|     |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    30c2:	|     |  |      add.w 134(sp),d0
    30c6:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    30ca:	|     |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    30d0:	|     |  |      move.l 92(sp),d0
    30d4:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    30d8:	|     |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    30de:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    30e2:	|     |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    30e8:	|     |  |      move.l 100(sp),d0
    30ec:	|     |  |      move.w d0,14(a0)
    30f0:	|  /--|--|----- bra.w 36be <CstScaleSprite+0x970>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    30f4:	|  |  |  \----> movea.l 144(sp),a0
    30f8:	|  |  |         move.l (a0),d0
    30fa:	|  |  |         movea.l d0,a0
    30fc:	|  |  |         cmpa.w #0,a0
    3100:	|  |  |     /-- bge.s 3106 <CstScaleSprite+0x3b8>
    3102:	|  |  |     |   lea 15(a0),a0
    3106:	|  |  |     \-> move.l a0,d0
    3108:	|  |  |         asr.l #4,d0
    310a:	|  |  |         move.l d0,d0
    310c:	|  |  |         add.w 132(sp),d0
    3110:	|  |  |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    3116:	|  |  |         move.l a0,d1
    3118:	|  |  |         addq.l #2,d1
    311a:	|  |  |         move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    3120:	|  |  |         add.w 134(sp),d0
    3124:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3126:	|  |  |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    312c:	|  |  |         move.l a0,d0
    312e:	|  |  |         addq.l #2,d0
    3130:	|  |  |         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    3136:	|  |  |         move.l 92(sp),d0
    313a:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    313c:	|  |  |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    3142:	|  |  |         move.l a0,d0
    3144:	|  |  |         addq.l #2,d0
    3146:	|  |  |         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    314c:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    314e:	|  |  |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    3154:	|  |  |         move.l a0,d0
    3156:	|  |  |         addq.l #2,d0
    3158:	|  |  |         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    315e:	|  |  |         move.l 100(sp),d0
    3162:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3164:	|  |  |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    316a:	|  |  |         move.l a0,d0
    316c:	|  |  |         addq.l #2,d0
    316e:	|  |  |         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    3174:	|  |  |         clr.w (a0)
    3176:	|  +--|-------- bra.w 36be <CstScaleSprite+0x970>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    317a:	|  |  \-------> movea.w 12(sp),a1
    317e:	|  |            movea.l 144(sp),a0
    3182:	|  |            move.l (a0),d0
    3184:	|  |            move.l a1,d1
    3186:	|  |            add.l d0,d1
    3188:	|  |            move.l 1c9dc <winWidth>,d0
    318e:	|  |            cmp.l d1,d0
    3190:	|  |  /-------- bge.w 3456 <CstScaleSprite+0x708>

    if(x - single->width > (int) winWidth)
    3194:	|  |  |         movea.w 12(sp),a1
    3198:	|  |  |         movea.l 144(sp),a0
    319c:	|  |  |         move.l (a0),d0
    319e:	|  |  |         move.l a1,d1
    31a0:	|  |  |         sub.l d0,d1
    31a2:	|  |  |         move.l 1c9dc <winWidth>,d0
    31a8:	|  |  |         cmp.l d1,d0
    31aa:	|  |  |     /-- bge.s 31be <CstScaleSprite+0x470>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    31ac:	|  |  |     |   pea 1814e <PutChar+0x372>
    31b2:	|  |  |     |   jsr 1733a <KPrintF>
    31b8:	|  |  |     |   addq.l #4,sp
      return;
    31ba:	+--|--|-----|-- bra.w 38ac <CstScaleSprite+0xb5e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    31be:	|  |  |     \-> clr.w 134(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    31c2:	|  |  |         movea.w 12(sp),a1
    31c6:	|  |  |         movea.l 144(sp),a0
    31ca:	|  |  |         move.l (a0),d0
    31cc:	|  |  |         add.l a1,d0
    31ce:	|  |  |         move.l d0,d1
    31d0:	|  |  |         move.l 1c9dc <winWidth>,d0
    31d6:	|  |  |         sub.l d0,d1
    31d8:	|  |  |         move.l d1,d0
    31da:	|  |  |         lsr.l #4,d0
    31dc:	|  |  |         move.w d0,132(sp)
    cutmaskpixel = 0;    
    31e0:	|  |  |         clr.w 130(sp)
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    31e4:	|  |  |         movea.l 144(sp),a0
    31e8:	|  |  |         move.l (a0),d0
    31ea:	|  |  |         move.l 96(sp),-(sp)
    31ee:	|  |  |         move.l d0,-(sp)
    31f0:	|  |  |         jsr 17cc6 <__mulsi3>
    31f6:	|  |  |         addq.l #8,sp
    31f8:	|  |  |         lsr.l #3,d0
    31fa:	|  |  |         move.l 84(sp),d1
    31fe:	|  |  |         move.l d0,d2
    3200:	|  |  |         add.l d1,d2
    3202:	|  |  |         move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3206:	|  |  |         movea.l 144(sp),a0
    320a:	|  |  |         move.l 24(a0),d0
    320e:	|  |  |         move.l d0,d2
    3210:	|  |  |         movea.l 144(sp),a0
    3214:	|  |  |         move.l (a0),d0
    3216:	|  |  |         move.l 96(sp),-(sp)
    321a:	|  |  |         move.l d0,-(sp)
    321c:	|  |  |         jsr 17cc6 <__mulsi3>
    3222:	|  |  |         addq.l #8,sp
    3224:	|  |  |         lsr.l #3,d0
    3226:	|  |  |         move.l d2,d1
    3228:	|  |  |         add.l d0,d1
    322a:	|  |  |         move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    322e:	|  |  |         move.l 1c9dc <winWidth>,d0
    3234:	|  |  |         move.l 100(sp),-(sp)
    3238:	|  |  |         move.l d0,-(sp)
    323a:	|  |  |         jsr 17cc6 <__mulsi3>
    3240:	|  |  |         addq.l #8,sp
    3242:	|  |  |         lsr.l #3,d0
    3244:	|  |  |         move.l 136(sp),d1
    3248:	|  |  |         add.l d0,d1
    324a:	|  |  |         move.w 12(sp),d0
    324e:	|  |  |     /-- bpl.s 3254 <CstScaleSprite+0x506>
    3250:	|  |  |     |   addi.w #15,d0
    3254:	|  |  |     \-> asr.w #4,d0
    3256:	|  |  |         movea.w d0,a0
    3258:	|  |  |         move.l a0,d0
    325a:	|  |  |         add.l a0,d0
    325c:	|  |  |         move.l d1,d2
    325e:	|  |  |         add.l d0,d2
    3260:	|  |  |         move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    3264:	|  |  |         move.l 1c9dc <winWidth>,d0
    326a:	|  |  |         move.l 100(sp),-(sp)
    326e:	|  |  |         move.l d0,-(sp)
    3270:	|  |  |         jsr 17cc6 <__mulsi3>
    3276:	|  |  |         addq.l #8,sp
    3278:	|  |  |         lsr.l #3,d0
    327a:	|  |  |         move.l 136(sp),d1
    327e:	|  |  |         add.l d0,d1
    3280:	|  |  |         move.w 12(sp),d0
    3284:	|  |  |     /-- bpl.s 328a <CstScaleSprite+0x53c>
    3286:	|  |  |     |   addi.w #15,d0
    328a:	|  |  |     \-> asr.w #4,d0
    328c:	|  |  |         movea.w d0,a0
    328e:	|  |  |         move.l a0,d0
    3290:	|  |  |         add.l a0,d0
    3292:	|  |  |         move.l d1,d2
    3294:	|  |  |         add.l d0,d2
    3296:	|  |  |         move.l d2,112(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    329a:	|  |  |         move.w 12(sp),d0
    329e:	|  |  |         andi.w #-32753,d0
    32a2:	|  |  |     /-- bpl.s 32ac <CstScaleSprite+0x55e>
    32a4:	|  |  |     |   subq.w #1,d0
    32a6:	|  |  |     |   ori.w #-16,d0
    32aa:	|  |  |     |   addq.w #1,d0
    32ac:	|  |  |     \-> ext.l d0
    32ae:	|  |  |         moveq #12,d1
    32b0:	|  |  |         lsl.l d1,d0
    32b2:	|  |  |         addi.l #4042,d0
    32b8:	|  |  |         move.l d0,108(sp)
    bltcon1 = ((x%16) << 12);
    32bc:	|  |  |         move.w 12(sp),d0
    32c0:	|  |  |         andi.w #-32753,d0
    32c4:	|  |  |     /-- bpl.s 32ce <CstScaleSprite+0x580>
    32c6:	|  |  |     |   subq.w #1,d0
    32c8:	|  |  |     |   ori.w #-16,d0
    32cc:	|  |  |     |   addq.w #1,d0
    32ce:	|  |  |     \-> ext.l d0
    32d0:	|  |  |         moveq #12,d2
    32d2:	|  |  |         lsl.l d2,d0
    32d4:	|  |  |         move.l d0,104(sp)
    bltalwm = 0xffff << (x%16); 
    32d8:	|  |  |         move.w 12(sp),d0
    32dc:	|  |  |         andi.w #-32753,d0
    32e0:	|  |  |     /-- bpl.s 32ea <CstScaleSprite+0x59c>
    32e2:	|  |  |     |   subq.w #1,d0
    32e4:	|  |  |     |   ori.w #-16,d0
    32e8:	|  |  |     |   addq.w #1,d0
    32ea:	|  |  |     \-> move.w d0,d1
    32ec:	|  |  |         ext.l d1
    32ee:	|  |  |         moveq #0,d0
    32f0:	|  |  |         not.w d0
    32f2:	|  |  |         lsl.l d1,d0
    32f4:	|  |  |         move.w d0,128(sp)
    if( destinationtype == SCREEN)
    32f8:	|  |  |         cmpi.w #1,8(sp)
    32fe:	|  |  |  /----- bne.w 33c6 <CstScaleSprite+0x678>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3302:	|  |  |  |      move.l 1c9c4 <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    330a:	|  |  |  |      moveq #20,d0
    330c:	|  |  |  |      move.l d0,60(sp)
    3310:	|  |  |  |      clr.l 56(sp)
    3314:	|  |  |  |      move.l 1ca88 <SysBase>,d0
    331a:	|  |  |  |      movea.l d0,a6
    331c:	|  |  |  |      move.l 60(sp),d0
    3320:	|  |  |  |      move.l 56(sp),d1
    3324:	|  |  |  |      jsr -684(a6)
    3328:	|  |  |  |      move.l d0,52(sp)
    332c:	|  |  |  |      move.l 52(sp),d0
    3330:	|  |  |  |      move.l d0,1c9c4 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3336:	|  |  |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    333c:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    3342:	|  |  |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    3348:	|  |  |  |      move.w 12(sp),d0
    334c:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    334e:	|  |  |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    3354:	|  |  |  |      move.w 10(sp),d0
    3358:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    335c:	|  |  |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    3362:	|  |  |  |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3368:	|  |  |  |      movea.l 144(sp),a0
    336c:	|  |  |  |      move.l (a0),d0
    336e:	|  |  |  |      movea.l d0,a0
    3370:	|  |  |  |      cmpa.w #0,a0
    3374:	|  |  |  |  /-- bge.s 337a <CstScaleSprite+0x62c>
    3376:	|  |  |  |  |   lea 15(a0),a0
    337a:	|  |  |  |  \-> move.l a0,d0
    337c:	|  |  |  |      asr.l #4,d0
    337e:	|  |  |  |      move.l d0,d0
    3380:	|  |  |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    3386:	|  |  |  |      add.w 132(sp),d0
    338a:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    338e:	|  |  |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    3394:	|  |  |  |      move.l 92(sp),d0
    3398:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    339c:	|  |  |  |      move.w 12(sp),d0
    33a0:	|  |  |  |  /-- bpl.s 33a6 <CstScaleSprite+0x658>
    33a2:	|  |  |  |  |   addi.w #15,d0
    33a6:	|  |  |  |  \-> asr.w #4,d0
    33a8:	|  |  |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    33ae:	|  |  |  |      add.w d0,d0
    33b0:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    33b4:	|  |  |  |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    33ba:	|  |  |  |      move.l 100(sp),d0
    33be:	|  |  |  |      move.w d0,14(a0)
    33c2:	|  +--|--|----- bra.w 36be <CstScaleSprite+0x970>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    33c6:	|  |  |  \----> movea.l 144(sp),a0
    33ca:	|  |  |         move.l (a0),d0
    33cc:	|  |  |         movea.l d0,a0
    33ce:	|  |  |         cmpa.w #0,a0
    33d2:	|  |  |     /-- bge.s 33d8 <CstScaleSprite+0x68a>
    33d4:	|  |  |     |   lea 15(a0),a0
    33d8:	|  |  |     \-> move.l a0,d0
    33da:	|  |  |         asr.l #4,d0
    33dc:	|  |  |         move.l d0,d0
    33de:	|  |  |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    33e4:	|  |  |         move.l a0,d1
    33e6:	|  |  |         addq.l #2,d1
    33e8:	|  |  |         move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    33ee:	|  |  |         add.w 132(sp),d0
    33f2:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    33f4:	|  |  |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    33fa:	|  |  |         move.l a0,d0
    33fc:	|  |  |         addq.l #2,d0
    33fe:	|  |  |         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    3404:	|  |  |         move.l 92(sp),d0
    3408:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    340a:	|  |  |         move.w 12(sp),d0
    340e:	|  |  |     /-- bpl.s 3414 <CstScaleSprite+0x6c6>
    3410:	|  |  |     |   addi.w #15,d0
    3414:	|  |  |     \-> asr.w #4,d0
    3416:	|  |  |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    341c:	|  |  |         move.l a0,d1
    341e:	|  |  |         addq.l #2,d1
    3420:	|  |  |         move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    3426:	|  |  |         add.w d0,d0
    3428:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    342a:	|  |  |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    3430:	|  |  |         move.l a0,d0
    3432:	|  |  |         addq.l #2,d0
    3434:	|  |  |         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    343a:	|  |  |         move.l 100(sp),d0
    343e:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3440:	|  |  |         movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    3446:	|  |  |         move.l a0,d0
    3448:	|  |  |         addq.l #2,d0
    344a:	|  |  |         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    3450:	|  |  |         clr.w (a0)
    3452:	|  +--|-------- bra.w 36be <CstScaleSprite+0x970>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    3456:	|  |  \-------> move.w #1,134(sp)
    cutwordssource = 0;
    345c:	|  |            clr.w 132(sp)
    cutmaskpixel = 0;
    3460:	|  |            clr.w 130(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    3464:	|  |            clr.w 128(sp)
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3468:	|  |            movea.l 144(sp),a0
    346c:	|  |            move.l (a0),d0
    346e:	|  |            move.l 96(sp),-(sp)
    3472:	|  |            move.l d0,-(sp)
    3474:	|  |            jsr 17cc6 <__mulsi3>
    347a:	|  |            addq.l #8,sp
    347c:	|  |            lsr.l #3,d0
    347e:	|  |            move.l 84(sp),d1
    3482:	|  |            move.l d0,d2
    3484:	|  |            add.l d1,d2
    3486:	|  |            move.l d2,124(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    348a:	|  |            movea.l 144(sp),a0
    348e:	|  |            move.l 24(a0),d0
    3492:	|  |            move.l d0,d2
    3494:	|  |            movea.l 144(sp),a0
    3498:	|  |            move.l (a0),d0
    349a:	|  |            move.l 96(sp),-(sp)
    349e:	|  |            move.l d0,-(sp)
    34a0:	|  |            jsr 17cc6 <__mulsi3>
    34a6:	|  |            addq.l #8,sp
    34a8:	|  |            lsr.l #3,d0
    34aa:	|  |            move.l d2,d1
    34ac:	|  |            add.l d0,d1
    34ae:	|  |            move.l d1,120(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    34b2:	|  |            move.l 1c9dc <winWidth>,d0
    34b8:	|  |            move.l 100(sp),-(sp)
    34bc:	|  |            move.l d0,-(sp)
    34be:	|  |            jsr 17cc6 <__mulsi3>
    34c4:	|  |            addq.l #8,sp
    34c6:	|  |            lsr.l #3,d0
    34c8:	|  |            move.l 136(sp),d1
    34cc:	|  |            add.l d0,d1
    34ce:	|  |            move.w 12(sp),d0
    34d2:	|  |        /-- bpl.s 34d8 <CstScaleSprite+0x78a>
    34d4:	|  |        |   addi.w #15,d0
    34d8:	|  |        \-> asr.w #4,d0
    34da:	|  |            movea.w d0,a0
    34dc:	|  |            move.l a0,d0
    34de:	|  |            add.l a0,d0
    34e0:	|  |            move.l d1,d2
    34e2:	|  |            add.l d0,d2
    34e4:	|  |            move.l d2,116(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    34e8:	|  |            move.l 1c9dc <winWidth>,d0
    34ee:	|  |            move.l 100(sp),-(sp)
    34f2:	|  |            move.l d0,-(sp)
    34f4:	|  |            jsr 17cc6 <__mulsi3>
    34fa:	|  |            addq.l #8,sp
    34fc:	|  |            lsr.l #3,d0
    34fe:	|  |            move.l 136(sp),d1
    3502:	|  |            add.l d0,d1
    3504:	|  |            move.w 12(sp),d0
    3508:	|  |        /-- bpl.s 350e <CstScaleSprite+0x7c0>
    350a:	|  |        |   addi.w #15,d0
    350e:	|  |        \-> asr.w #4,d0
    3510:	|  |            movea.w d0,a0
    3512:	|  |            move.l a0,d0
    3514:	|  |            add.l a0,d0
    3516:	|  |            move.l d1,d2
    3518:	|  |            add.l d0,d2
    351a:	|  |            move.l d2,112(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    351e:	|  |            move.w 12(sp),d0
    3522:	|  |            andi.w #-32753,d0
    3526:	|  |        /-- bpl.s 3530 <CstScaleSprite+0x7e2>
    3528:	|  |        |   subq.w #1,d0
    352a:	|  |        |   ori.w #-16,d0
    352e:	|  |        |   addq.w #1,d0
    3530:	|  |        \-> ext.l d0
    3532:	|  |            moveq #12,d1
    3534:	|  |            lsl.l d1,d0
    3536:	|  |            addi.l #4042,d0
    353c:	|  |            move.l d0,108(sp)
    bltcon1 = ((x%16) << 12);
    3540:	|  |            move.w 12(sp),d0
    3544:	|  |            andi.w #-32753,d0
    3548:	|  |        /-- bpl.s 3552 <CstScaleSprite+0x804>
    354a:	|  |        |   subq.w #1,d0
    354c:	|  |        |   ori.w #-16,d0
    3550:	|  |        |   addq.w #1,d0
    3552:	|  |        \-> ext.l d0
    3554:	|  |            moveq #12,d2
    3556:	|  |            lsl.l d2,d0
    3558:	|  |            move.l d0,104(sp)
    if( destinationtype == SCREEN)
    355c:	|  |            cmpi.w #1,8(sp)
    3562:	|  |     /----- bne.w 362e <CstScaleSprite+0x8e0>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3566:	|  |     |      move.l 1c9c4 <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    356e:	|  |     |      moveq #20,d0
    3570:	|  |     |      move.l d0,76(sp)
    3574:	|  |     |      clr.l 72(sp)
    3578:	|  |     |      move.l 1ca88 <SysBase>,d0
    357e:	|  |     |      movea.l d0,a6
    3580:	|  |     |      move.l 76(sp),d0
    3584:	|  |     |      move.l 72(sp),d1
    3588:	|  |     |      jsr -684(a6)
    358c:	|  |     |      move.l d0,68(sp)
    3590:	|  |     |      move.l 68(sp),d0
    3594:	|  |     |      move.l d0,1c9c4 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    359a:	|  |     |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    35a0:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    35a6:	|  |     |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    35ac:	|  |     |      move.w 12(sp),d0
    35b0:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    35b2:	|  |     |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    35b8:	|  |     |      move.w 10(sp),d0
    35bc:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    35c0:	|  |     |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    35c6:	|  |     |      move.l 148(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    35cc:	|  |     |      movea.l 144(sp),a0
    35d0:	|  |     |      move.l (a0),d0
    35d2:	|  |     |      movea.l d0,a0
    35d4:	|  |     |      cmpa.w #0,a0
    35d8:	|  |     |  /-- bge.s 35de <CstScaleSprite+0x890>
    35da:	|  |     |  |   lea 15(a0),a0
    35de:	|  |     |  \-> move.l a0,d0
    35e0:	|  |     |      asr.l #4,d0
    35e2:	|  |     |      move.l d0,d0
    35e4:	|  |     |      add.w 132(sp),d0
    35e8:	|  |     |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    35ee:	|  |     |      add.w 134(sp),d0
    35f2:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    35f6:	|  |     |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    35fc:	|  |     |      move.l 92(sp),d0
    3600:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3604:	|  |     |      move.w 12(sp),d0
    3608:	|  |     |  /-- bpl.s 360e <CstScaleSprite+0x8c0>
    360a:	|  |     |  |   addi.w #15,d0
    360e:	|  |     |  \-> asr.w #4,d0
    3610:	|  |     |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    3616:	|  |     |      add.w d0,d0
    3618:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    361c:	|  |     |      movea.l 1c9c4 <CstCleanupQueueDrawBuffer>,a0
    3622:	|  |     |      move.l 100(sp),d0
    3626:	|  |     |      move.w d0,14(a0)
    362a:	|  +-----|----- bra.w 36be <CstScaleSprite+0x970>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    362e:	|  |     \----> movea.l 144(sp),a0
    3632:	|  |            move.l (a0),d0
    3634:	|  |            movea.l d0,a0
    3636:	|  |            cmpa.w #0,a0
    363a:	|  |        /-- bge.s 3640 <CstScaleSprite+0x8f2>
    363c:	|  |        |   lea 15(a0),a0
    3640:	|  |        \-> move.l a0,d0
    3642:	|  |            asr.l #4,d0
    3644:	|  |            move.l d0,d0
    3646:	|  |            add.w 132(sp),d0
    364a:	|  |            movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    3650:	|  |            move.l a0,d1
    3652:	|  |            addq.l #2,d1
    3654:	|  |            move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    365a:	|  |            add.w 134(sp),d0
    365e:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3660:	|  |            movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    3666:	|  |            move.l a0,d0
    3668:	|  |            addq.l #2,d0
    366a:	|  |            move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    3670:	|  |            move.l 92(sp),d0
    3674:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3676:	|  |            move.w 12(sp),d0
    367a:	|  |        /-- bpl.s 3680 <CstScaleSprite+0x932>
    367c:	|  |        |   addi.w #15,d0
    3680:	|  |        \-> asr.w #4,d0
    3682:	|  |            movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    3688:	|  |            move.l a0,d1
    368a:	|  |            addq.l #2,d1
    368c:	|  |            move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    3692:	|  |            add.w d0,d0
    3694:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3696:	|  |            movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    369c:	|  |            move.l a0,d0
    369e:	|  |            addq.l #2,d0
    36a0:	|  |            move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    36a6:	|  |            move.l 100(sp),d0
    36aa:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    36ac:	|  |            movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    36b2:	|  |            move.l a0,d0
    36b4:	|  |            addq.l #2,d0
    36b6:	|  |            move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    36bc:	|  |            clr.w (a0)
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    36be:	|  \----------> moveq #0,d0
    36c0:	|               move.w 130(sp),d0
    36c4:	|               moveq #0,d1
    36c6:	|               not.w d1
    36c8:	|               asr.l d0,d1
    36ca:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    36ce:	|               moveq #0,d1
    36d0:	|               move.w 132(sp),d1
    36d4:	|               moveq #0,d0
    36d6:	|               move.w 134(sp),d0
    36da:	|               sub.l d0,d1
    36dc:	|               move.l d1,d0
    36de:	|               add.w d0,d0
    36e0:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    36e4:	|               moveq #0,d1
    36e6:	|               move.w 132(sp),d1
    36ea:	|               moveq #0,d0
    36ec:	|               move.w 134(sp),d0
    36f0:	|               sub.l d0,d1
    36f2:	|               move.l d1,d0
    36f4:	|               add.w d0,d0
    36f6:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    36fa:	|               move.l 1c9dc <winWidth>,d0
    3700:	|               lsr.l #3,d0
    3702:	|               move.l d0,d1
    3704:	|               movea.l 144(sp),a0
    3708:	|               move.l (a0),d0
    370a:	|           /-- bpl.s 370e <CstScaleSprite+0x9c0>
    370c:	|           |   addq.l #7,d0
    370e:	|           \-> asr.l #3,d0
    3710:	|               move.l d0,d0
    3712:	|               sub.w d0,d1
    3714:	|               move.w 132(sp),d0
    3718:	|               sub.w 134(sp),d0
    371c:	|               add.w d0,d0
    371e:	|               add.w d1,d0
    3720:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3724:	|               move.l 1c9dc <winWidth>,d0
    372a:	|               lsr.l #3,d0
    372c:	|               move.l d0,d1
    372e:	|               movea.l 144(sp),a0
    3732:	|               move.l (a0),d0
    3734:	|           /-- bpl.s 3738 <CstScaleSprite+0x9ea>
    3736:	|           |   addq.l #7,d0
    3738:	|           \-> asr.l #3,d0
    373a:	|               move.l d0,d0
    373c:	|               sub.w d0,d1
    373e:	|               move.w 132(sp),d0
    3742:	|               sub.w 134(sp),d0
    3746:	|               add.w d0,d0
    3748:	|               add.w d1,d0
    374a:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    374e:	|               move.l #14675968,22(sp)
  WaitBlit();
    3756:	|               move.l 1ca94 <GfxBase>,d0
    375c:	|               movea.l d0,a6
    375e:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    3762:	|               movea.l 22(sp),a0
    3766:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    376c:	|               movea.l 22(sp),a0
    3770:	|               move.w 128(sp),70(a0)
  custom->bltamod = bltamod;
    3776:	|               move.w 32(sp),d0
    377a:	|               movea.l 22(sp),a0
    377e:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    3782:	|               move.w 30(sp),d0
    3786:	|               movea.l 22(sp),a0
    378a:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    378e:	|               move.w 28(sp),d0
    3792:	|               movea.l 22(sp),a0
    3796:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    379a:	|               move.w 26(sp),d0
    379e:	|               movea.l 22(sp),a0
    37a2:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    37a6:	|               move.l 108(sp),d0
    37aa:	|               movea.l 22(sp),a0
    37ae:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    37b2:	|               move.l 104(sp),d0
    37b6:	|               movea.l 22(sp),a0
    37ba:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    37be:	|               movea.l 144(sp),a0
    37c2:	|               move.l (a0),d0
    37c4:	|               asr.l #3,d0
    37c6:	|               move.l d0,d1
    37c8:	|               movea.l 144(sp),a0
    37cc:	|               move.l 4(a0),d0
    37d0:	|               move.l d0,d0
    37d2:	|               move.w d1,d2
    37d4:	|               muls.w d0,d2
    37d6:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    37da:	|               move.l 1c9dc <winWidth>,d0
    37e0:	|               lsr.l #3,d0
    37e2:	|               move.l d0,d1
    37e4:	|               move.l 1c9e0 <winHeight>,d0
    37ea:	|               move.l d0,d0
    37ec:	|               move.w d1,d2
    37ee:	|               muls.w d0,d2
    37f0:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    37f4:	|               clr.l 88(sp)
    37f8:	|        /----- bra.w 388c <CstScaleSprite+0xb3e>
  {
    custom->bltapt = (APTR) bltapt;
    37fc:	|     /--|----> move.l 124(sp),d0
    3800:	|     |  |      movea.l 22(sp),a0
    3804:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    3808:	|     |  |      move.l 120(sp),d0
    380c:	|     |  |      movea.l 22(sp),a0
    3810:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    3814:	|     |  |      move.l 116(sp),d0
    3818:	|     |  |      movea.l 22(sp),a0
    381c:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    3820:	|     |  |      move.l 112(sp),d0
    3824:	|     |  |      movea.l 22(sp),a0
    3828:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    382c:	|     |  |      move.l 92(sp),d0
    3830:	|     |  |      move.w d0,d1
    3832:	|     |  |      lsl.w #6,d1
    3834:	|     |  |      movea.l 144(sp),a0
    3838:	|     |  |      move.l (a0),d0
    383a:	|     |  |      movea.l d0,a0
    383c:	|     |  |      cmpa.w #0,a0
    3840:	|     |  |  /-- bge.s 3846 <CstScaleSprite+0xaf8>
    3842:	|     |  |  |   lea 15(a0),a0
    3846:	|     |  |  \-> move.l a0,d0
    3848:	|     |  |      asr.l #4,d0
    384a:	|     |  |      move.l d0,d0
    384c:	|     |  |      add.w d1,d0
    384e:	|     |  |      sub.w 132(sp),d0
    3852:	|     |  |      add.w 134(sp),d0
    3856:	|     |  |      movea.l 22(sp),a0
    385a:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    385e:	|     |  |      moveq #0,d0
    3860:	|     |  |      move.w 20(sp),d0
    3864:	|     |  |      add.l d0,120(sp)
    bltcpt += bltcptplus;
    3868:	|     |  |      moveq #0,d0
    386a:	|     |  |      move.w 18(sp),d0
    386e:	|     |  |      add.l d0,116(sp)
    bltdpt += bltcptplus;
    3872:	|     |  |      moveq #0,d0
    3874:	|     |  |      move.w 18(sp),d0
    3878:	|     |  |      add.l d0,112(sp)
    WaitBlit();
    387c:	|     |  |      move.l 1ca94 <GfxBase>,d0
    3882:	|     |  |      movea.l d0,a6
    3884:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3888:	|     |  |      addq.l #1,88(sp)
    388c:	|     |  \----> moveq #4,d0
    388e:	|     |         cmp.l 88(sp),d0
    3892:	|     \-------- bge.w 37fc <CstScaleSprite+0xaae>
  }   

  FreeVec(mask);
    3896:	|               move.l 84(sp),14(sp)
    389c:	|               move.l 1ca88 <SysBase>,d0
    38a2:	|               movea.l d0,a6
    38a4:	|               movea.l 14(sp),a1
    38a8:	|               jsr -690(a6)
}
    38ac:	\-------------> move.l (sp)+,d2
    38ae:	                movea.l (sp)+,a6
    38b0:	                lea 132(sp),sp
    38b4:	                rts

000038b6 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    38b6:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    38b8:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    38be:	move.l 8(sp),d0
    38c2:	movea.l (sp),a0
    38c4:	move.l d0,128(a0)
}
    38c8:	nop
    38ca:	addq.l #4,sp
    38cc:	rts

000038ce <CstSwapBuffer>:

void CstSwapBuffer( ) {
    38ce:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    38d2:	move.l 1c9b8 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    38da:	move.l 1c9bc <CstDrawBuffer>,d0
    38e0:	move.l d0,1c9b8 <CstViewBuffer>
  CstDrawBuffer = tmp;
    38e6:	move.l 16(sp),1c9bc <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    38ee:	move.l 1c9c0 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    38f6:	move.l 1c9c4 <CstCleanupQueueDrawBuffer>,d0
    38fc:	move.l d0,1c9c0 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3902:	move.l 12(sp),1c9c4 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    390a:	move.l 1c9b2 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3912:	move.l 1c9b8 <CstViewBuffer>,d0
    3918:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    391c:	move.l 4(sp),d0
    3920:	clr.w d0
    3922:	swap d0
    3924:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3928:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    392c:	movea.w #118,a0
    3930:	adda.l 8(sp),a0
    3934:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3936:	movea.w #114,a0
    393a:	adda.l 8(sp),a0
    393e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3942:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    394a:	move.l 4(sp),d0
    394e:	clr.w d0
    3950:	swap d0
    3952:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3956:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    395a:	movea.w #126,a0
    395e:	adda.l 8(sp),a0
    3962:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    3964:	movea.w #122,a0
    3968:	adda.l 8(sp),a0
    396c:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    3970:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3978:	move.l 4(sp),d0
    397c:	clr.w d0
    397e:	swap d0
    3980:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3984:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    3988:	movea.l 8(sp),a0
    398c:	lea 134(a0),a0
    3990:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3992:	movea.l 8(sp),a0
    3996:	lea 130(a0),a0
    399a:	move.w 2(sp),(a0)

  ptr +=  40*256;
    399e:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    39a6:	move.l 4(sp),d0
    39aa:	clr.w d0
    39ac:	swap d0
    39ae:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    39b2:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    39b6:	movea.l 8(sp),a0
    39ba:	lea 142(a0),a0
    39be:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    39c0:	movea.l 8(sp),a0
    39c4:	lea 138(a0),a0
    39c8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    39cc:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    39d4:	move.l 4(sp),d0
    39d8:	clr.w d0
    39da:	swap d0
    39dc:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    39e0:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    39e4:	movea.l 8(sp),a0
    39e8:	lea 150(a0),a0
    39ec:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    39ee:	movea.l 8(sp),a0
    39f2:	lea 146(a0),a0
    39f6:	move.w 2(sp),(a0)

}
    39fa:	nop
    39fc:	lea 20(sp),sp
    3a00:	rts

00003a02 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3a02:	          lea -56(sp),sp
    3a06:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3a08:	          pea 18181 <PutChar+0x3a5>
    3a0e:	          jsr 1733a <KPrintF>
    3a14:	          addq.l #4,sp

  width = width / 8;
    3a16:	          move.l 64(sp),d0
    3a1a:	      /-- bpl.s 3a1e <CstReserveBackdrop+0x1c>
    3a1c:	      |   addq.l #7,d0
    3a1e:	      \-> asr.l #3,d0
    3a20:	          move.l d0,64(sp)

  if( width < 40) 
    3a24:	          moveq #39,d0
    3a26:	          cmp.l 64(sp),d0
    3a2a:	      /-- blt.s 3a40 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3a2c:	      |   pea 1819b <PutChar+0x3bf>
    3a32:	      |   jsr 1733a <KPrintF>
    3a38:	      |   addq.l #4,sp
    return FALSE;
    3a3a:	      |   clr.w d0
    3a3c:	/-----|-- bra.w 3d82 <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3a40:	|     \-> pea 181d9 <PutChar+0x3fd>
    3a46:	|         jsr 1733a <KPrintF>
    3a4c:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3a4e:	|         move.l 64(sp),-(sp)
    3a52:	|         jsr fce <CstCreateCopperlist>
    3a58:	|         addq.l #4,sp
    3a5a:	|         move.l d0,1c9b2 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3a60:	|         pea 181f9 <PutChar+0x41d>
    3a66:	|         jsr 1733a <KPrintF>
    3a6c:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3a6e:	|         move.l 64(sp),d1
    3a72:	|         move.l 68(sp),d0
    3a76:	|         muls.w d1,d0
    3a78:	|         move.w d0,1c9a8 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3a7e:	|         move.w 1c9a8 <CstBackdropSizePlane>,d1
    3a84:	|         move.w d1,d0
    3a86:	|         add.w d0,d0
    3a88:	|         add.w d0,d0
    3a8a:	|         add.w d1,d0
    3a8c:	|         move.w d0,1c9a6 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3a92:	|         move.w 1c9a6 <CstBackdropSize>,d0
    3a98:	|         move.w d0,d0
    3a9a:	|         andi.l #65535,d0
    3aa0:	|         move.l d0,48(sp)
    3aa4:	|         moveq #2,d1
    3aa6:	|         move.l d1,44(sp)
    3aaa:	|         move.l 1ca88 <SysBase>,d0
    3ab0:	|         movea.l d0,a6
    3ab2:	|         move.l 48(sp),d0
    3ab6:	|         move.l 44(sp),d1
    3aba:	|         jsr -684(a6)
    3abe:	|         move.l d0,40(sp)
    3ac2:	|         move.l 40(sp),d0
    3ac6:	|         move.l d0,1c9aa <CstBackDrop>
  if( !CstBackDrop)
    3acc:	|         move.l 1c9aa <CstBackDrop>,d0
    3ad2:	|     /-- bne.s 3ae8 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3ad4:	|     |   pea 18220 <PutChar+0x444>
    3ada:	|     |   jsr 1733a <KPrintF>
    3ae0:	|     |   addq.l #4,sp
    return FALSE;  
    3ae2:	|     |   clr.w d0
    3ae4:	+-----|-- bra.w 3d82 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3ae8:	|     \-> pea 18258 <PutChar+0x47c>
    3aee:	|         jsr 1733a <KPrintF>
    3af4:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3af6:	|         move.l 1c9aa <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3afe:	|         clr.l 52(sp)
    3b02:	|     /-- bra.s 3b18 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3b04:	|  /--|-> move.l 56(sp),d0
    3b08:	|  |  |   move.l d0,d1
    3b0a:	|  |  |   addq.l #4,d1
    3b0c:	|  |  |   move.l d1,56(sp)
    3b10:	|  |  |   movea.l d0,a0
    3b12:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3b14:	|  |  |   addq.l #1,52(sp)
    3b18:	|  |  \-> move.w 1c9a6 <CstBackdropSize>,d0
    3b1e:	|  |      lsr.w #2,d0
    3b20:	|  |      move.w d0,d0
    3b22:	|  |      andi.l #65535,d0
    3b28:	|  |      cmp.l 52(sp),d0
    3b2c:	|  \----- bgt.s 3b04 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3b2e:	|         move.w 1c9a6 <CstBackdropSize>,d0
    3b34:	|         move.w d0,d0
    3b36:	|         andi.l #65535,d0
    3b3c:	|         move.l 64(sp),d1
    3b40:	|         add.l d1,d1
    3b42:	|         add.l d1,d0
    3b44:	|         move.l d0,36(sp)
    3b48:	|         moveq #2,d0
    3b4a:	|         move.l d0,32(sp)
    3b4e:	|         move.l 1ca88 <SysBase>,d0
    3b54:	|         movea.l d0,a6
    3b56:	|         move.l 36(sp),d0
    3b5a:	|         move.l 32(sp),d1
    3b5e:	|         jsr -684(a6)
    3b62:	|         move.l d0,28(sp)
    3b66:	|         move.l 28(sp),d0
    3b6a:	|         move.l d0,1c9bc <CstDrawBuffer>
  if( !CstDrawBuffer)
    3b70:	|         move.l 1c9bc <CstDrawBuffer>,d0
    3b76:	|     /-- bne.s 3b8c <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3b78:	|     |   pea 1827e <PutChar+0x4a2>
    3b7e:	|     |   jsr 1733a <KPrintF>
    3b84:	|     |   addq.l #4,sp
    return FALSE;  
    3b86:	|     |   clr.w d0
    3b88:	+-----|-- bra.w 3d82 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3b8c:	|     \-> pea 182b8 <PutChar+0x4dc>
    3b92:	|         jsr 1733a <KPrintF>
    3b98:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3b9a:	|         move.l #10000,24(sp)
    3ba2:	|         clr.l 20(sp)
    3ba6:	|         move.l 1ca88 <SysBase>,d0
    3bac:	|         movea.l d0,a6
    3bae:	|         move.l 24(sp),d0
    3bb2:	|         move.l 20(sp),d1
    3bb6:	|         jsr -684(a6)
    3bba:	|         move.l d0,16(sp)
    3bbe:	|         move.l 16(sp),d0
    3bc2:	|         move.l d0,1c9c8 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3bc8:	|         move.l 1c9c8 <CstBackDropBufferApplyStart>,d0
    3bce:	|     /-- bne.s 3be4 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3bd0:	|     |   pea 182e0 <PutChar+0x504>
    3bd6:	|     |   jsr 1733a <KPrintF>
    3bdc:	|     |   addq.l #4,sp
    return FALSE;  
    3bde:	|     |   clr.w d0
    3be0:	+-----|-- bra.w 3d82 <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3be4:	|     \-> move.l 1c9c8 <CstBackDropBufferApplyStart>,d0
    3bea:	|         move.l d0,1c9cc <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3bf0:	|         movea.l 1c9c8 <CstBackDropBufferApplyStart>,a0
    3bf6:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3bf8:	|         movea.l 1c9c8 <CstBackDropBufferApplyStart>,a0
    3bfe:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3c00:	|         move.w 1c9a6 <CstBackdropSize>,d0
    3c06:	|         move.w d0,d0
    3c08:	|         andi.l #65535,d0
    3c0e:	|         move.l 64(sp),d1
    3c12:	|         add.l d1,d1
    3c14:	|         add.l d1,d0
    3c16:	|         move.l d0,12(sp)
    3c1a:	|         moveq #2,d1
    3c1c:	|         move.l d1,8(sp)
    3c20:	|         move.l 1ca88 <SysBase>,d0
    3c26:	|         movea.l d0,a6
    3c28:	|         move.l 12(sp),d0
    3c2c:	|         move.l 8(sp),d1
    3c30:	|         jsr -684(a6)
    3c34:	|         move.l d0,4(sp)
    3c38:	|         move.l 4(sp),d0
    3c3c:	|         move.l d0,1c9b8 <CstViewBuffer>
  if( !CstViewBuffer)
    3c42:	|         move.l 1c9b8 <CstViewBuffer>,d0
    3c48:	|     /-- bne.s 3c5e <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3c4a:	|     |   pea 1832b <PutChar+0x54f>
    3c50:	|     |   jsr 1733a <KPrintF>
    3c56:	|     |   addq.l #4,sp
    return FALSE;  
    3c58:	|     |   clr.w d0
    3c5a:	+-----|-- bra.w 3d82 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3c5e:	|     \-> pea 18365 <PutChar+0x589>
    3c64:	|         jsr 1733a <KPrintF>
    3c6a:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3c6c:	|         move.l 1c9bc <CstDrawBuffer>,d1
    3c72:	|         move.l 64(sp),d0
    3c76:	|     /-- bpl.s 3c7a <CstReserveBackdrop+0x278>
    3c78:	|     |   addq.l #3,d0
    3c7a:	|     \-> asr.l #2,d0
    3c7c:	|         add.l d0,d0
    3c7e:	|         add.l d0,d0
    3c80:	|         add.l d1,d0
    3c82:	|         move.l d0,1c9bc <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3c88:	|         move.l 1c9b8 <CstViewBuffer>,d1
    3c8e:	|         move.l 64(sp),d0
    3c92:	|     /-- bpl.s 3c96 <CstReserveBackdrop+0x294>
    3c94:	|     |   addq.l #3,d0
    3c96:	|     \-> asr.l #2,d0
    3c98:	|         add.l d0,d0
    3c9a:	|         add.l d0,d0
    3c9c:	|         add.l d1,d0
    3c9e:	|         move.l d0,1c9b8 <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3ca4:	|         move.l 1c9aa <CstBackDrop>,d0
    3caa:	|         clr.l -(sp)
    3cac:	|         pea 5 <_start+0x5>
    3cb0:	|         pea 100 <copyString+0x48>
    3cb4:	|         pea 140 <decodeFilename+0x28>
    3cb8:	|         pea 1838d <PutChar+0x5b1>
    3cbe:	|         move.l d0,-(sp)
    3cc0:	|         jsr 17422 <debug_register_bitmap>
    3cc6:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3cca:	|         move.l 68(sp),d0
    3cce:	|         movea.w d0,a1
    3cd0:	|         move.l 64(sp),d0
    3cd4:	|         lsl.w #3,d0
    3cd6:	|         movea.w d0,a0
    3cd8:	|         move.l 1c9bc <CstDrawBuffer>,d0
    3cde:	|         clr.l -(sp)
    3ce0:	|         pea 5 <_start+0x5>
    3ce4:	|         move.l a1,-(sp)
    3ce6:	|         move.l a0,-(sp)
    3ce8:	|         pea 1839d <PutChar+0x5c1>
    3cee:	|         move.l d0,-(sp)
    3cf0:	|         jsr 17422 <debug_register_bitmap>
    3cf6:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3cfa:	|         move.l 68(sp),d0
    3cfe:	|         movea.w d0,a1
    3d00:	|         move.l 64(sp),d0
    3d04:	|         lsl.w #3,d0
    3d06:	|         movea.w d0,a0
    3d08:	|         move.l 1c9b8 <CstViewBuffer>,d0
    3d0e:	|         clr.l -(sp)
    3d10:	|         pea 5 <_start+0x5>
    3d14:	|         move.l a1,-(sp)
    3d16:	|         move.l a0,-(sp)
    3d18:	|         pea 183ac <PutChar+0x5d0>
    3d1e:	|         move.l d0,-(sp)
    3d20:	|         jsr 17422 <debug_register_bitmap>
    3d26:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3d2a:	|         move.l 1c9b2 <CstCopperList>,d0
    3d30:	|     /-- beq.s 3d42 <CstReserveBackdrop+0x340>
    3d32:	|     |   move.l 1c9bc <CstDrawBuffer>,d0
    3d38:	|     +-- beq.s 3d42 <CstReserveBackdrop+0x340>
    3d3a:	|     |   move.l 1c9b8 <CstViewBuffer>,d0
    3d40:	|  /--|-- bne.s 3d54 <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3d42:	|  |  \-> pea 183bb <PutChar+0x5df>
    3d48:	|  |      jsr 1733a <KPrintF>
    3d4e:	|  |      addq.l #4,sp
    return FALSE;
    3d50:	|  |      clr.w d0
    3d52:	+--|----- bra.s 3d82 <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3d54:	|  \----> pea 183e8 <PutChar+0x60c>
    3d5a:	|         jsr 1733a <KPrintF>
    3d60:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3d62:	|         move.l 1c9b2 <CstCopperList>,d0
    3d68:	|         move.l d0,-(sp)
    3d6a:	|         jsr 38b6 <CstSetCl>
    3d70:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3d72:	|         pea 1840f <PutChar+0x633>
    3d78:	|         jsr 1733a <KPrintF>
    3d7e:	|         addq.l #4,sp
  return TRUE;
    3d80:	|         moveq #1,d0

}
    3d82:	\-------> movea.l (sp)+,a6
    3d84:	          lea 56(sp),sp
    3d88:	          rts

00003d8a <CstUnfreeze>:

void CstUnfreeze() {
    3d8a:	       lea -24(sp),sp
    3d8e:	       move.l a6,-(sp)
    3d90:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3d92:	       pea 18432 <PutChar+0x656>
    3d98:	       jsr 1733a <KPrintF>
    3d9e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3da0:	       move.l 1c9dc <winWidth>,d0
    3da6:	       lsr.l #3,d0
    3da8:	       move.l d0,d1
    3daa:	       move.l 1c9e0 <winHeight>,d0
    3db0:	       move.l d0,d0
    3db2:	       muls.w d0,d1
    3db4:	       move.w d1,d0
    3db6:	       add.w d0,d0
    3db8:	       add.w d0,d0
    3dba:	       move.w d0,d2
    3dbc:	       add.w d1,d2
    3dbe:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3dc2:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3dca:	       move.l 1c9e0 <winHeight>,d0
    3dd0:	       move.l d0,d0
    3dd2:	       movea.w d0,a1
    3dd4:	       move.l 1c9dc <winWidth>,d0
    3dda:	       move.l d0,d0
    3ddc:	       movea.w d0,a0
    3dde:	       move.l 1c9ae <CstBackDropBackup>,d0
    3de4:	       clr.l -(sp)
    3de6:	       pea 5 <_start+0x5>
    3dea:	       move.l a1,-(sp)
    3dec:	       move.l a0,-(sp)
    3dee:	       pea 18004 <PutChar+0x228>
    3df4:	       move.l d0,-(sp)
    3df6:	       jsr 17422 <debug_register_bitmap>
    3dfc:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3e00:	       move.l 1c9ae <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3e08:	       move.l 1c9aa <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3e10:	       clr.l 20(sp)
    3e14:	   /-- bra.s 3e3a <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3e16:	/--|-> move.l 28(sp),d1
    3e1a:	|  |   move.l d1,d0
    3e1c:	|  |   addq.l #4,d0
    3e1e:	|  |   move.l d0,28(sp)
    3e22:	|  |   move.l 24(sp),d0
    3e26:	|  |   move.l d0,d2
    3e28:	|  |   addq.l #4,d2
    3e2a:	|  |   move.l d2,24(sp)
    3e2e:	|  |   movea.l d1,a0
    3e30:	|  |   move.l (a0),d1
    3e32:	|  |   movea.l d0,a0
    3e34:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3e36:	|  |   addq.l #1,20(sp)
    3e3a:	|  \-> move.w 18(sp),d0
    3e3e:	|      lsr.w #2,d0
    3e40:	|      move.w d0,d0
    3e42:	|      andi.l #65535,d0
    3e48:	|      cmp.l 20(sp),d0
    3e4c:	\----- bgt.s 3e16 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3e4e:	       move.w #2,1c9b6 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3e56:	       move.l 1c9dc <winWidth>,d0
    3e5c:	       lsr.l #4,d0
    3e5e:	       movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    3e64:	       move.l a0,d1
    3e66:	       addq.l #2,d1
    3e68:	       move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    3e6e:	       move.l d0,d0
    3e70:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3e72:	       move.l 1c9e0 <winHeight>,d0
    3e78:	       movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    3e7e:	       move.l a0,d1
    3e80:	       addq.l #2,d1
    3e82:	       move.l d1,1c9cc <CstBackDropBufferApplyCursor>
    3e88:	       move.l d0,d0
    3e8a:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e8c:	       movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    3e92:	       move.l a0,d0
    3e94:	       addq.l #2,d0
    3e96:	       move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    3e9c:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e9e:	       movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    3ea4:	       move.l a0,d0
    3ea6:	       addq.l #2,d0
    3ea8:	       move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    3eae:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3eb0:	       movea.l 1c9cc <CstBackDropBufferApplyCursor>,a0
    3eb6:	       move.l a0,d0
    3eb8:	       addq.l #2,d0
    3eba:	       move.l d0,1c9cc <CstBackDropBufferApplyCursor>
    3ec0:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3ec2:	       move.l 1c9ae <CstBackDropBackup>,d0
    3ec8:	   /-- bne.s 3ee2 <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    3eca:	   |   move.l 1c9ae <CstBackDropBackup>,10(sp)
    3ed2:	   |   move.l 1ca88 <SysBase>,d0
    3ed8:	   |   movea.l d0,a6
    3eda:	   |   movea.l 10(sp),a1
    3ede:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3ee2:	   \-> pea 18013 <PutChar+0x237>
    3ee8:	       jsr 1733a <KPrintF>
    3eee:	       addq.l #4,sp

}
    3ef0:	       nop
    3ef2:	       move.l (sp)+,d2
    3ef4:	       movea.l (sp)+,a6
    3ef6:	       lea 24(sp),sp
    3efa:	       rts

00003efc <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    3efc:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    3f00:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3f04:	       tst.l 24(sp)
    3f08:	   /-- bge.s 3f0e <drawLine+0x12>
    3f0a:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    3f0e:	   \-> tst.l 28(sp)
    3f12:	   /-- bge.s 3f18 <drawLine+0x1c>
    3f14:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3f18:	   \-> tst.l 32(sp)
    3f1c:	   /-- bge.s 3f22 <drawLine+0x26>
    3f1e:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3f22:	   \-> tst.l 36(sp)
    3f26:	   /-- bge.s 3f2c <drawLine+0x30>
    3f28:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    3f2c:	   \-> move.l 1cb24 <sceneWidth>,d0
    3f32:	       cmp.l 24(sp),d0
    3f36:	   /-- bge.s 3f46 <drawLine+0x4a>
    3f38:	   |   move.l 1cb24 <sceneWidth>,d0
    3f3e:	   |   move.l d0,d1
    3f40:	   |   subq.l #1,d1
    3f42:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3f46:	   \-> move.l 1cb24 <sceneWidth>,d0
    3f4c:	       cmp.l 32(sp),d0
    3f50:	   /-- bge.s 3f60 <drawLine+0x64>
    3f52:	   |   move.l 1cb24 <sceneWidth>,d0
    3f58:	   |   move.l d0,d1
    3f5a:	   |   subq.l #1,d1
    3f5c:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    3f60:	   \-> move.l 1cb28 <sceneHeight>,d0
    3f66:	       cmp.l 28(sp),d0
    3f6a:	   /-- bge.s 3f7a <drawLine+0x7e>
    3f6c:	   |   move.l 1cb28 <sceneHeight>,d0
    3f72:	   |   move.l d0,d1
    3f74:	   |   subq.l #1,d1
    3f76:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    3f7a:	   \-> move.l 1cb28 <sceneHeight>,d0
    3f80:	       cmp.l 36(sp),d0
    3f84:	   /-- bge.s 3f94 <drawLine+0x98>
    3f86:	   |   move.l 1cb28 <sceneHeight>,d0
    3f8c:	   |   move.l d0,d1
    3f8e:	   |   subq.l #1,d1
    3f90:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    3f94:	   \-> move.l 24(sp),d0
    3f98:	       cmp.l 32(sp),d0
    3f9c:	/----- ble.s 3fb8 <drawLine+0xbc>
		x = x2; 
    3f9e:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    3fa4:	|      tst.w 10(sp)
    3fa8:	|      seq d0
    3faa:	|      neg.b d0
    3fac:	|      move.b d0,d0
    3fae:	|      andi.w #255,d0
    3fb2:	|      move.w d0,10(sp)
    3fb6:	|  /-- bra.s 3fbe <drawLine+0xc2>
	} else x = x1;
    3fb8:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    3fbe:	   \-> move.l 28(sp),d1
    3fc2:	       cmp.l 36(sp),d1
    3fc6:	/----- ble.s 3fe2 <drawLine+0xe6>
		y = y2; 
    3fc8:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    3fce:	|      tst.w 10(sp)
    3fd2:	|      seq d0
    3fd4:	|      neg.b d0
    3fd6:	|      move.b d0,d0
    3fd8:	|      andi.w #255,d0
    3fdc:	|      move.w d0,10(sp)
    3fe0:	|  /-- bra.s 3fe8 <drawLine+0xec>
	} else y = y1;	
    3fe2:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    3fe8:	   \-> move.l 32(sp),d0
    3fec:	       sub.l 24(sp),d0
    3ff0:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    3ff4:	       move.l 6(sp),d0
    3ff8:	   /-- bpl.s 3ffc <drawLine+0x100>
    3ffa:	   |   neg.l d0
    3ffc:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4000:	       move.l 36(sp),d1
    4004:	       sub.l 28(sp),d1
    4008:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    400c:	       move.l 2(sp),d0
    4010:	   /-- bpl.s 4014 <drawLine+0x118>
    4012:	   |   neg.l d0
    4014:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    4018:	       tst.l 6(sp)
    401c:	   /-- bne.s 4040 <drawLine+0x144>
		diffX = 1;
    401e:	   |   moveq #1,d0
    4020:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4024:	   |   move.l 1cb24 <sceneWidth>,d0
    402a:	   |   subq.l #1,d0
    402c:	   |   cmp.l 16(sp),d0
    4030:	   +-- bne.s 4040 <drawLine+0x144>
    4032:	   |   move.l 1cb24 <sceneWidth>,d0
    4038:	   |   move.l d0,d1
    403a:	   |   subq.l #2,d1
    403c:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4040:	   \-> tst.l 2(sp)
    4044:	   /-- bne.s 4068 <drawLine+0x16c>
		diffY = 1;
    4046:	   |   moveq #1,d0
    4048:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    404c:	   |   move.l 1cb28 <sceneHeight>,d0
    4052:	   |   subq.l #1,d0
    4054:	   |   cmp.l 12(sp),d0
    4058:	   +-- bne.s 4068 <drawLine+0x16c>
    405a:	   |   move.l 1cb28 <sceneHeight>,d0
    4060:	   |   move.l d0,d1
    4062:	   |   subq.l #2,d1
    4064:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4068:	   \-> pea 1845d <PutChar+0x681>
    406e:	       jsr 1733a <KPrintF>
    4074:	       addq.l #4,sp
	
}
    4076:	       nop
    4078:	       lea 20(sp),sp
    407c:	       rts

0000407e <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    407e:	                      lea -24(sp),sp
    4082:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4084:	                      move.l 1c9e4 <firstTexture>,d0
    408a:	/-------------------- beq.w 4168 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    408e:	|                     clr.l 24(sp)
    4092:	|     /-------------- bra.w 415c <deleteTextures+0xde>
			BOOL found = FALSE;
    4096:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    409a:	|  |  |               move.l 1c9e4 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    40a2:	|  |  |               movea.l 20(sp),a0
    40a6:	|  |  |               move.l (a0),d1
    40a8:	|  |  |               move.l 24(sp),d0
    40ac:	|  |  |               add.l d0,d0
    40ae:	|  |  |               add.l d0,d0
    40b0:	|  |  |               movea.l 36(sp),a0
    40b4:	|  |  |               adda.l d0,a0
    40b6:	|  |  |               move.l (a0),d0
    40b8:	|  |  |               cmp.l d1,d0
    40ba:	|  |  |  /----------- bne.w 414e <deleteTextures+0xd0>
				found = TRUE;
    40be:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    40c4:	|  |  |  |            movea.l 20(sp),a0
    40c8:	|  |  |  |            move.l 12(a0),d0
    40cc:	|  |  |  |            move.l d0,1c9e4 <firstTexture>
				FreeVec(list);
    40d2:	|  |  |  |            move.l 20(sp),6(sp)
    40d8:	|  |  |  |            move.l 1ca88 <SysBase>,d0
    40de:	|  |  |  |            movea.l d0,a6
    40e0:	|  |  |  |            movea.l 6(sp),a1
    40e4:	|  |  |  |            jsr -690(a6)
				continue;
    40e8:	|  |  |  |  /-------- bra.s 4158 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    40ea:	|  |  |  |  |  /----> movea.l 20(sp),a0
    40ee:	|  |  |  |  |  |      movea.l 12(a0),a0
    40f2:	|  |  |  |  |  |      move.l (a0),d1
    40f4:	|  |  |  |  |  |      move.l 24(sp),d0
    40f8:	|  |  |  |  |  |      add.l d0,d0
    40fa:	|  |  |  |  |  |      add.l d0,d0
    40fc:	|  |  |  |  |  |      movea.l 36(sp),a0
    4100:	|  |  |  |  |  |      adda.l d0,a0
    4102:	|  |  |  |  |  |      move.l (a0),d0
    4104:	|  |  |  |  |  |      cmp.l d1,d0
    4106:	|  |  |  |  |  |  /-- bne.s 4144 <deleteTextures+0xc6>
					found = TRUE;
    4108:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    410e:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4112:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4118:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    411c:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4120:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4124:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4128:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    412c:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4132:	|  |  |  |  |  |  |   move.l 1ca88 <SysBase>,d0
    4138:	|  |  |  |  |  |  |   movea.l d0,a6
    413a:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    413e:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4142:	|  |  |  |  +--|--|-- bra.s 4158 <deleteTextures+0xda>
				}
				list = list->next;
    4144:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    4148:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    414e:	|  |  |  \--|--|----> movea.l 20(sp),a0
    4152:	|  |  |     |  |      move.l 12(a0),d0
    4156:	|  |  |     |  \----- bne.s 40ea <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4158:	|  |  |     \-------> addq.l #1,24(sp)
    415c:	|  |  \-------------> move.l 24(sp),d0
    4160:	|  |                  cmp.l 32(sp),d0
    4164:	|  \----------------- bcs.w 4096 <deleteTextures+0x18>
			}
		}
	}
}
    4168:	\-------------------> nop
    416a:	                      movea.l (sp)+,a6
    416c:	                      lea 24(sp),sp
    4170:	                      rts

00004172 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4172:	subq.l #4,sp
    4174:	move.l 8(sp),d0
    4178:	move.w d0,d0
    417a:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    417e:	pea 18480 <PutChar+0x6a4>
    4184:	jsr 1733a <KPrintF>
    418a:	addq.l #4,sp
}
    418c:	nop
    418e:	addq.l #4,sp
    4190:	rts

00004192 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4192:	       moveq #-1,d0
    4194:	       cmp.l 4(sp),d0
    4198:	   /-- bne.s 419e <resourceNameFromNum+0xc>
    419a:	   |   moveq #0,d0
    419c:	/--|-- bra.s 41d6 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    419e:	|  \-> move.l 1ca64 <numResourceNames>,d0
    41a4:	|  /-- bne.s 41ae <resourceNameFromNum+0x1c>
    41a6:	|  |   move.l #99504,d0
    41ac:	+--|-- bra.s 41d6 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    41ae:	|  \-> move.l 1ca64 <numResourceNames>,d0
    41b4:	|      cmp.l 4(sp),d0
    41b8:	|  /-- ble.s 41d0 <resourceNameFromNum+0x3e>
    41ba:	|  |   move.l 1ca1c <allResourceNames>,d1
    41c0:	|  |   move.l 4(sp),d0
    41c4:	|  |   add.l d0,d0
    41c6:	|  |   add.l d0,d0
    41c8:	|  |   movea.l d1,a0
    41ca:	|  |   adda.l d0,a0
    41cc:	|  |   move.l (a0),d0
    41ce:	+--|-- bra.s 41d6 <resourceNameFromNum+0x44>
	return "Unknown resource";
    41d0:	|  \-> move.l #99513,d0
    41d6:	\----> rts

000041d8 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    41d8:	          lea -44(sp),sp
    41dc:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    41e0:	          move.l #320,1c9dc <winWidth>
    winHeight = 256;
    41ea:	          move.l #256,1c9e0 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    41f4:	          tst.l 60(sp)
    41f8:	      /-- bne.s 4210 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    41fa:	      |   pea 184ca <PutChar+0x6ee>
    4200:	      |   jsr b8 <copyString>
    4206:	      |   addq.l #4,sp
    4208:	      |   move.l d0,1c9f4 <bundleFolder>
    420e:	   /--|-- bra.s 4226 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4210:	   |  \-> movea.l 64(sp),a0
    4214:	   |      move.l (a0),d0
    4216:	   |      move.l d0,-(sp)
    4218:	   |      jsr b8 <copyString>
    421e:	   |      addq.l #4,sp
    4220:	   |      move.l d0,1c9f4 <bundleFolder>
	}
    
	int lastSlash = -1;
    4226:	   \----> moveq #-1,d0
    4228:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    422c:	          clr.l 44(sp)
    4230:	   /----- bra.s 4252 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4232:	/--|----> move.l 1c9f4 <bundleFolder>,d1
    4238:	|  |      move.l 44(sp),d0
    423c:	|  |      movea.l d1,a0
    423e:	|  |      adda.l d0,a0
    4240:	|  |      move.b (a0),d0
    4242:	|  |      cmpi.b #47,d0
    4246:	|  |  /-- bne.s 424e <main_sludge+0x76>
    4248:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    424e:	|  |  \-> addq.l #1,44(sp)
    4252:	|  \----> move.l 1c9f4 <bundleFolder>,d1
    4258:	|         move.l 44(sp),d0
    425c:	|         movea.l d1,a0
    425e:	|         adda.l d0,a0
    4260:	|         move.b (a0),d0
    4262:	\-------- bne.s 4232 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4264:	          move.l 1c9f4 <bundleFolder>,d0
    426a:	          move.l 48(sp),d1
    426e:	          addq.l #1,d1
    4270:	          movea.l d0,a0
    4272:	          adda.l d1,a0
    4274:	          clr.b (a0)

	if (argc > 1) {
    4276:	          moveq #1,d0
    4278:	          cmp.l 60(sp),d0
    427c:	      /-- bge.s 4298 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    427e:	      |   move.l 60(sp),d0
    4282:	      |   addi.l #1073741823,d0
    4288:	      |   add.l d0,d0
    428a:	      |   add.l d0,d0
    428c:	      |   movea.l 64(sp),a0
    4290:	      |   adda.l d0,a0
    4292:	      |   move.l (a0),52(sp)
    4296:	   /--|-- bra.s 42f2 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4298:	   |  \-> move.l 1c9f4 <bundleFolder>,d0
    429e:	   |      pea 184d0 <PutChar+0x6f4>
    42a4:	   |      move.l d0,-(sp)
    42a6:	   |      jsr 13e06 <joinStrings>
    42ac:	   |      addq.l #8,sp
    42ae:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    42b2:	   |      move.l 52(sp),-(sp)
    42b6:	   |      jsr 13d00 <fileExists>
    42bc:	   |      addq.l #4,sp
    42be:	   |      tst.b d0
    42c0:	   +----- bne.s 42f2 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    42c2:	   |      move.l 52(sp),40(sp)
    42c8:	   |      move.l 1ca88 <SysBase>,d0
    42ce:	   |      movea.l d0,a6
    42d0:	   |      movea.l 40(sp),a1
    42d4:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    42d8:	   |      move.l 1c9f4 <bundleFolder>,d0
    42de:	   |      pea 184dd <PutChar+0x701>
    42e4:	   |      move.l d0,-(sp)
    42e6:	   |      jsr 13e06 <joinStrings>
    42ec:	   |      addq.l #8,sp
    42ee:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    42f2:	   \----> pea 184e6 <PutChar+0x70a>
    42f8:	          jsr 1733a <KPrintF>
    42fe:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4300:	          move.l 52(sp),-(sp)
    4304:	          jsr 13d00 <fileExists>
    430a:	          addq.l #4,sp
    430c:	          tst.b d0
    430e:	      /-- bne.s 4366 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4310:	      |   move.l 1ca90 <DOSBase>,d0
    4316:	      |   movea.l d0,a6
    4318:	      |   jsr -60(a6)
    431c:	      |   move.l d0,28(sp)
    4320:	      |   move.l 28(sp),d0
    4324:	      |   move.l d0,24(sp)
    4328:	      |   move.l #99558,20(sp)
    4330:	      |   moveq #21,d0
    4332:	      |   move.l d0,16(sp)
    4336:	      |   move.l 1ca90 <DOSBase>,d0
    433c:	      |   movea.l d0,a6
    433e:	      |   move.l 24(sp),d1
    4342:	      |   move.l 20(sp),d2
    4346:	      |   move.l 16(sp),d3
    434a:	      |   jsr -48(a6)
    434e:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4352:	      |   pea 184e6 <PutChar+0x70a>
    4358:	      |   jsr 1733a <KPrintF>
    435e:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4360:	      |   moveq #0,d0
    4362:	/-----|-- bra.w 4564 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    4366:	|     \-> pea 184fc <PutChar+0x720>
    436c:	|         jsr 1733a <KPrintF>
    4372:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4374:	|         move.l 52(sp),-(sp)
    4378:	|         jsr 456e <setGameFilePath>
    437e:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4380:	|         move.l 52(sp),-(sp)
    4384:	|         jsr 5b1c <initSludge>
    438a:	|         addq.l #4,sp
    438c:	|         tst.w d0
    438e:	|     /-- bne.s 4396 <main_sludge+0x1be>
    4390:	|     |   moveq #0,d0
    4392:	+-----|-- bra.w 4564 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4396:	|     \-> move.l 1c9dc <winWidth>,d0
    439c:	|         cmpi.l #320,d0
    43a2:	|     /-- bne.s 43b2 <main_sludge+0x1da>
    43a4:	|     |   move.l 1c9e0 <winHeight>,d0
    43aa:	|     |   cmpi.l #256,d0
    43b0:	|  /--|-- beq.s 43d4 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    43b2:	|  |  \-> pea 1850d <PutChar+0x731>
    43b8:	|  |      jsr 1733a <KPrintF>
    43be:	|  |      addq.l #4,sp
		winWidth = 320;
    43c0:	|  |      move.l #320,1c9dc <winWidth>
		winHeight = 256;
    43ca:	|  |      move.l #256,1c9e0 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    43d4:	|  \----> pea 1858a <PutChar+0x7ae>
    43da:	|         jsr 1733a <KPrintF>
    43e0:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    43e2:	|         move.l 1c9e0 <winHeight>,d0
    43e8:	|         move.l d0,d1
    43ea:	|         move.l 1c9dc <winWidth>,d0
    43f0:	|         move.l d1,-(sp)
    43f2:	|         move.l d0,-(sp)
    43f4:	|         jsr d502 <resizeBackdrop>
    43fa:	|         addq.l #8,sp
    43fc:	|         tst.w d0
    43fe:	|     /-- bne.s 4414 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4400:	|     |   pea 1859d <PutChar+0x7c1>
    4406:	|     |   jsr 1733a <KPrintF>
    440c:	|     |   addq.l #4,sp
		return FALSE;
    440e:	|     |   moveq #0,d0
    4410:	+-----|-- bra.w 4564 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4414:	|     \-> pea 185c3 <PutChar+0x7e7>
    441a:	|         jsr 1733a <KPrintF>
    4420:	|         addq.l #4,sp
	if (! initPeople ())
    4422:	|         jsr aa6a <initPeople>
    4428:	|         tst.w d0
    442a:	|     /-- bne.s 4440 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    442c:	|     |   pea 185d0 <PutChar+0x7f4>
    4432:	|     |   jsr 1733a <KPrintF>
    4438:	|     |   addq.l #4,sp
		return FALSE;
    443a:	|     |   moveq #0,d0
    443c:	+-----|-- bra.w 4564 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    4440:	|     \-> pea 185f1 <PutChar+0x815>
    4446:	|         jsr 1733a <KPrintF>
    444c:	|         addq.l #4,sp
	if (! initFloor ())
    444e:	|         jsr 166f0 <initFloor>
    4454:	|         tst.w d0
    4456:	|     /-- bne.s 446c <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    4458:	|     |   pea 185fd <PutChar+0x821>
    445e:	|     |   jsr 1733a <KPrintF>
    4464:	|     |   addq.l #4,sp
		
		return FALSE;
    4466:	|     |   moveq #0,d0
    4468:	+-----|-- bra.w 4564 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    446c:	|     \-> pea 1861d <PutChar+0x841>
    4472:	|         jsr 1733a <KPrintF>
    4478:	|         addq.l #4,sp
	if (! initObjectTypes ())
    447a:	|         jsr d6be <initObjectTypes>
    4480:	|         tst.w d0
    4482:	|     /-- bne.s 4498 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    4484:	|     |   pea 1862e <PutChar+0x852>
    448a:	|     |   jsr 1733a <KPrintF>
    4490:	|     |   addq.l #4,sp
		return FALSE;
    4492:	|     |   moveq #0,d0
    4494:	+-----|-- bra.w 4564 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    4498:	|     \-> pea 18654 <PutChar+0x878>
    449e:	|         jsr 1733a <KPrintF>
    44a4:	|         addq.l #4,sp
	initSpeech ();
    44a6:	|         jsr 7f3e <initSpeech>
	KPrintF("Init status bar\n");
    44ac:	|         pea 18661 <PutChar+0x885>
    44b2:	|         jsr 1733a <KPrintF>
    44b8:	|         addq.l #4,sp
	initStatusBar ();
    44ba:	|         jsr 7a02 <initStatusBar>

	KPrintF("Get numbered string\n");
    44c0:	|         pea 18672 <PutChar+0x896>
    44c6:	|         jsr 1733a <KPrintF>
    44cc:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    44ce:	|         pea 1 <_start+0x1>
    44d2:	|         jsr 6d12 <getNumberedString>
    44d8:	|         addq.l #4,sp
    44da:	|         move.l d0,1c9ec <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    44e0:	|         pea 18687 <PutChar+0x8ab>
    44e6:	|         jsr 1733a <KPrintF>
    44ec:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    44ee:	|         move.l 1ca58 <noStack>,d0
    44f4:	|         pea 1 <_start+0x1>
    44f8:	|         move.l d0,-(sp)
    44fa:	|         clr.l -(sp)
    44fc:	|         clr.l -(sp)
    44fe:	|         clr.l -(sp)
    4500:	|         jsr 6b68 <startNewFunctionNum>
    4506:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    450a:	|         pea 1869f <PutChar+0x8c3>
    4510:	|         jsr 1733a <KPrintF>
    4516:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4518:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4520:	|         clr.l 1c9f8 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    4526:	|     /-- bra.s 4546 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    4528:	|  /--|-> jsr 6af8 <sludgeDisplay>
		CsiCheckInput();
    452e:	|  |  |   jsr d036 <CsiCheckInput>
		walkAllPeople();
    4534:	|  |  |   jsr bff0 <walkAllPeople>
		handleInput();
    453a:	|  |  |   jsr 58b6 <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    4540:	|  |  |   jsr 1726e <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    4546:	|  |  \-> move.l 1c9f8 <weAreDoneSoQuit>,d0
    454c:	|  \----- beq.s 4528 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    454e:	|         move.l 52(sp),32(sp)
    4554:	|         move.l 1ca88 <SysBase>,d0
    455a:	|         movea.l d0,a6
    455c:	|         movea.l 32(sp),a1
    4560:	|         jsr -690(a6)
}
    4564:	\-------> movem.l (sp)+,d2-d3/a6
    4568:	          lea 44(sp),sp
    456c:	          rts

0000456e <setGameFilePath>:

void setGameFilePath (char * f) {
    456e:	          lea -1104(sp),sp
    4572:	          move.l a6,-(sp)
    4574:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4576:	          move.l #1112,d0
    457c:	          add.l sp,d0
    457e:	          addi.l #-1102,d0
    4584:	          move.l d0,1100(sp)
    4588:	          move.l #998,1096(sp)
    4590:	          move.l 1ca90 <DOSBase>,d0
    4596:	          movea.l d0,a6
    4598:	          move.l 1100(sp),d1
    459c:	          move.l 1096(sp),d2
    45a0:	          jsr -564(a6)
    45a4:	          move.w d0,1094(sp)
    45a8:	          move.w 1094(sp),d0
    45ac:	      /-- bne.s 45bc <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    45ae:	      |   pea 186b2 <PutChar+0x8d6>
    45b4:	      |   jsr 1733a <KPrintF>
    45ba:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    45bc:	      \-> moveq #-1,d0
    45be:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    45c2:	          clr.l 1104(sp)
    45c6:	   /----- bra.s 45e4 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    45c8:	/--|----> move.l 1104(sp),d0
    45cc:	|  |      movea.l 1116(sp),a0
    45d0:	|  |      adda.l d0,a0
    45d2:	|  |      move.b (a0),d0
    45d4:	|  |      cmpi.b #47,d0
    45d8:	|  |  /-- bne.s 45e0 <setGameFilePath+0x72>
    45da:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    45e0:	|  |  \-> addq.l #1,1104(sp)
    45e4:	|  \----> move.l 1104(sp),d0
    45e8:	|         movea.l 1116(sp),a0
    45ec:	|         adda.l d0,a0
    45ee:	|         move.b (a0),d0
    45f0:	\-------- bne.s 45c8 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    45f2:	          moveq #-1,d0
    45f4:	          cmp.l 1108(sp),d0
    45f8:	   /----- beq.s 4672 <setGameFilePath+0x104>
		f[got] = 0;	
    45fa:	   |      move.l 1108(sp),d0
    45fe:	   |      movea.l 1116(sp),a0
    4602:	   |      adda.l d0,a0
    4604:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    4606:	   |      move.l 1116(sp),1090(sp)
    460c:	   |      moveq #-2,d0
    460e:	   |      move.l d0,1086(sp)
    4612:	   |      move.l 1ca90 <DOSBase>,d0
    4618:	   |      movea.l d0,a6
    461a:	   |      move.l 1090(sp),d1
    461e:	   |      move.l 1086(sp),d2
    4622:	   |      jsr -84(a6)
    4626:	   |      move.l d0,1082(sp)
    462a:	   |      move.l 1082(sp),d0
    462e:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    4632:	   |      move.l 1078(sp),1074(sp)
    4638:	   |      move.l 1ca90 <DOSBase>,d0
    463e:	   |      movea.l d0,a6
    4640:	   |      move.l 1074(sp),d1
    4644:	   |      jsr -126(a6)
    4648:	   |      move.l d0,1070(sp)
    464c:	   |      move.l 1070(sp),d0
    4650:	   |  /-- bne.s 4664 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    4652:	   |  |   move.l 1116(sp),-(sp)
    4656:	   |  |   pea 186d8 <PutChar+0x8fc>
    465c:	   |  |   jsr 1733a <KPrintF>
    4662:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    4664:	   |  \-> move.l 1108(sp),d0
    4668:	   |      movea.l 1116(sp),a0
    466c:	   |      adda.l d0,a0
    466e:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    4672:	   \----> move.l #400,1066(sp)
    467a:	          clr.l 1062(sp)
    467e:	          move.l 1ca88 <SysBase>,d0
    4684:	          movea.l d0,a6
    4686:	          move.l 1066(sp),d0
    468a:	          move.l 1062(sp),d1
    468e:	          jsr -684(a6)
    4692:	          move.l d0,1058(sp)
    4696:	          move.l 1058(sp),d0
    469a:	          move.l d0,1c9f0 <gamePath>
	if (gamePath==0) {
    46a0:	          move.l 1c9f0 <gamePath>,d0
    46a6:	      /-- bne.s 46ba <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    46a8:	      |   pea 1870b <PutChar+0x92f>
    46ae:	      |   jsr 1733a <KPrintF>
    46b4:	      |   addq.l #4,sp
    46b6:	   /--|-- bra.w 47a2 <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    46ba:	   |  \-> move.l 1c9f0 <gamePath>,1054(sp)
    46c2:	   |      moveq #-2,d0
    46c4:	   |      move.l d0,1050(sp)
    46c8:	   |      move.l 1ca90 <DOSBase>,d0
    46ce:	   |      movea.l d0,a6
    46d0:	   |      move.l 1054(sp),d1
    46d4:	   |      move.l 1050(sp),d2
    46d8:	   |      jsr -84(a6)
    46dc:	   |      move.l d0,1046(sp)
    46e0:	   |      move.l 1046(sp),d0
    46e4:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    46e8:	   |      move.l 1042(sp),1038(sp)
    46ee:	   |      move.l 1ca90 <DOSBase>,d0
    46f4:	   |      movea.l d0,a6
    46f6:	   |      move.l 1038(sp),d1
    46fa:	   |      jsr -126(a6)
    46fe:	   |      move.l d0,1034(sp)
    4702:	   |      move.l 1034(sp),d0
    4706:	   |  /-- bne.s 4716 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    4708:	   |  |   pea 18746 <PutChar+0x96a>
    470e:	   |  |   jsr 1733a <KPrintF>
    4714:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    4716:	   |  \-> move.l #1112,d0
    471c:	   |      add.l sp,d0
    471e:	   |      addi.l #-1102,d0
    4724:	   |      move.l d0,1030(sp)
    4728:	   |      moveq #-2,d0
    472a:	   |      move.l d0,1026(sp)
    472e:	   |      move.l 1ca90 <DOSBase>,d0
    4734:	   |      movea.l d0,a6
    4736:	   |      move.l 1030(sp),d1
    473a:	   |      move.l 1026(sp),d2
    473e:	   |      jsr -84(a6)
    4742:	   |      move.l d0,1022(sp)
    4746:	   |      move.l 1022(sp),d0
    474a:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    474e:	   |      move.l 1042(sp),1018(sp)
    4754:	   |      move.l 1ca90 <DOSBase>,d0
    475a:	   |      movea.l d0,a6
    475c:	   |      move.l 1018(sp),d1
    4760:	   |      jsr -126(a6)
    4764:	   |      move.l d0,1014(sp)
    4768:	   |      move.l 1014(sp),d0
    476c:	   |  /-- bne.s 4782 <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    476e:	   |  |   moveq #10,d0
    4770:	   |  |   add.l sp,d0
    4772:	   |  |   move.l d0,-(sp)
    4774:	   |  |   pea 18772 <PutChar+0x996>
    477a:	   |  |   jsr 1733a <KPrintF>
    4780:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    4782:	   |  \-> move.l 1c9f0 <gamePath>,d0
    4788:	   +----- beq.s 47a2 <setGameFilePath+0x234>
    478a:	   |      move.l 1c9f0 <gamePath>,1010(sp)
    4792:	   |      move.l 1ca88 <SysBase>,d0
    4798:	   |      movea.l d0,a6
    479a:	   |      movea.l 1010(sp),a1
    479e:	   |      jsr -690(a6)
}
    47a2:	   \----> move.l (sp)+,d2
    47a4:	          movea.l (sp)+,a6
    47a6:	          lea 1104(sp),sp
    47aa:	          rts

000047ac <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    47ac:	/-------> lea -16(sp),sp
    47b0:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    47b2:	|         move.l 24(sp),-(sp)
    47b6:	|         jsr 68da <pauseFunction>
    47bc:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    47be:	|     /-- bra.s 47d0 <abortFunction+0x24>
    47c0:	|  /--|-> moveq #24,d0
    47c2:	|  |  |   add.l 24(sp),d0
    47c6:	|  |  |   move.l d0,-(sp)
    47c8:	|  |  |   jsr 1525e <trimStack>
    47ce:	|  |  |   addq.l #4,sp
    47d0:	|  |  \-> movea.l 24(sp),a0
    47d4:	|  |      move.l 24(a0),d0
    47d8:	|  \----- bne.s 47c0 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    47da:	|         movea.l 24(sp),a0
    47de:	|         move.l 4(a0),12(sp)
    47e4:	|         move.l 1ca88 <SysBase>,d0
    47ea:	|         movea.l d0,a6
    47ec:	|         movea.l 12(sp),a1
    47f0:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    47f4:	|         clr.l 16(sp)
    47f8:	|     /-- bra.s 4818 <abortFunction+0x6c>
    47fa:	|  /--|-> movea.l 24(sp),a0
    47fe:	|  |  |   move.l 20(a0),d1
    4802:	|  |  |   move.l 16(sp),d0
    4806:	|  |  |   lsl.l #3,d0
    4808:	|  |  |   add.l d1,d0
    480a:	|  |  |   move.l d0,-(sp)
    480c:	|  |  |   jsr 14b28 <unlinkVar>
    4812:	|  |  |   addq.l #4,sp
    4814:	|  |  |   addq.l #1,16(sp)
    4818:	|  |  \-> movea.l 24(sp),a0
    481c:	|  |      move.l 8(a0),d0
    4820:	|  |      cmp.l 16(sp),d0
    4824:	|  \----- bgt.s 47fa <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    4826:	|         movea.l 24(sp),a0
    482a:	|         move.l 20(a0),8(sp)
    4830:	|         move.l 1ca88 <SysBase>,d0
    4836:	|         movea.l d0,a6
    4838:	|         movea.l 8(sp),a1
    483c:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    4840:	|         moveq #28,d0
    4842:	|         add.l 24(sp),d0
    4846:	|         move.l d0,-(sp)
    4848:	|         jsr 14b28 <unlinkVar>
    484e:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    4850:	|         movea.l 24(sp),a0
    4854:	|         move.l 40(a0),d0
    4858:	|     /-- beq.s 486a <abortFunction+0xbe>
    485a:	|     |   movea.l 24(sp),a0
    485e:	|     |   move.l 40(a0),d0
    4862:	|     |   move.l d0,-(sp)
    4864:	\-----|-- jsr 47ac <abortFunction>(pc)
    4868:	      |   addq.l #4,sp
	FreeVec(fun);
    486a:	      \-> move.l 24(sp),4(sp)
    4870:	          move.l 1ca88 <SysBase>,d0
    4876:	          movea.l d0,a6
    4878:	          movea.l 4(sp),a1
    487c:	          jsr -690(a6)
	fun = NULL;
    4880:	          clr.l 24(sp)
}
    4884:	          nop
    4886:	          movea.l (sp)+,a6
    4888:	          lea 16(sp),sp
    488c:	          rts

0000488e <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    488e:	          subq.l #8,sp
	int n = 0;
    4890:	          clr.l 4(sp)
	*killedMyself = FALSE;
    4894:	          movea.l 20(sp),a0
    4898:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    489a:	          move.l 1ca20 <allRunningFunctions>,(sp)
	while (fun) {
    48a0:	   /----- bra.s 48ce <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    48a2:	/--|----> movea.l (sp),a0
    48a4:	|  |      move.l (a0),d0
    48a6:	|  |      cmp.l 12(sp),d0
    48aa:	|  |  /-- bne.s 48c8 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    48ac:	|  |  |   movea.l (sp),a0
    48ae:	|  |  |   move.w #1,54(a0)
			n++;
    48b4:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    48b8:	|  |  |   move.l (sp),d0
    48ba:	|  |  |   cmp.l 16(sp),d0
    48be:	|  |  +-- bne.s 48c8 <cancelAFunction+0x3a>
    48c0:	|  |  |   movea.l 20(sp),a0
    48c4:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    48c8:	|  |  \-> movea.l (sp),a0
    48ca:	|  |      move.l 44(a0),(sp)
	while (fun) {
    48ce:	|  \----> tst.l (sp)
    48d0:	\-------- bne.s 48a2 <cancelAFunction+0x14>
	}
	return n;
    48d2:	          move.l 4(sp),d0
}
    48d6:	          addq.l #8,sp
    48d8:	          rts

000048da <completeTimers>:


void completeTimers () {
    48da:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    48dc:	          move.l 1ca20 <allRunningFunctions>,(sp)

	while (thisFunction) {
    48e2:	   /----- bra.s 48f8 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    48e4:	/--|----> movea.l (sp),a0
    48e6:	|  |      move.b 56(a0),d0
    48ea:	|  |  /-- bne.s 48f2 <completeTimers+0x18>
    48ec:	|  |  |   movea.l (sp),a0
    48ee:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    48f2:	|  |  \-> movea.l (sp),a0
    48f4:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    48f8:	|  \----> tst.l (sp)
    48fa:	\-------- bne.s 48e4 <completeTimers+0xa>
	}
}
    48fc:	          nop
    48fe:	          nop
    4900:	          addq.l #4,sp
    4902:	          rts

00004904 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    4904:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    4908:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    490e:	                                                             movea.l 80(sp),a0
    4912:	                                                             move.w 54(a0),d0
    4916:	/----------------------------------------------------------- beq.w 57a4 <continueFunction+0xea0>
		abortFunction (fun);
    491a:	|                                                            move.l 80(sp),-(sp)
    491e:	|                                                            jsr 47ac <abortFunction>
    4924:	|                                                            addq.l #4,sp
		return TRUE;
    4926:	|                                                            moveq #1,d0
    4928:	|  /-------------------------------------------------------- bra.w 57ae <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    492c:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    4932:	|  |  |                                                      movea.l 80(sp),a0
    4936:	|  |  |                                                      move.l 4(a0),d1
    493a:	|  |  |                                                      movea.l 80(sp),a0
    493e:	|  |  |                                                      move.l 36(a0),d0
    4942:	|  |  |                                                      lsl.l #3,d0
    4944:	|  |  |                                                      movea.l d1,a0
    4946:	|  |  |                                                      adda.l d0,a0
    4948:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    494e:	|  |  |                                                      movea.l 80(sp),a0
    4952:	|  |  |                                                      move.l 4(a0),d1
    4956:	|  |  |                                                      movea.l 80(sp),a0
    495a:	|  |  |                                                      move.l 36(a0),d0
    495e:	|  |  |                                                      lsl.l #3,d0
    4960:	|  |  |                                                      movea.l d1,a0
    4962:	|  |  |                                                      adda.l d0,a0
    4964:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    4968:	|  |  |                                                      moveq #41,d0
    496a:	|  |  |                                                      cmp.l 64(sp),d0
    496e:	|  |  |  /-------------------------------------------------- bcs.w 5758 <continueFunction+0xe54>
    4972:	|  |  |  |                                                   move.l 64(sp),d0
    4976:	|  |  |  |                                                   add.l d0,d0
    4978:	|  |  |  |                                                   movea.l d0,a0
    497a:	|  |  |  |                                                   adda.l #18822,a0
    4980:	|  |  |  |                                                   move.w (a0),d0
    4982:	|  |  |  |                                                   jmp (4986 <continueFunction+0x82>,pc,d0.w)
    4986:	|  |  |  |                                                   bset d6,(a2)
    4988:	|  |  |  |                                                   ori.w #2670,(a4)
    498c:	|  |  |  |                                                   eori.w #2416,d6
    4990:	|  |  |  |                                                   bchg d4,d2
    4992:	|  |  |  |                                                   bclr d4,(a4)+
    4994:	|  |  |  |                                                   andi.l #181013194,d4
    499a:	|  |  |  |                                                   .short 0x0aca
    499c:	|  |  |  |                                                   .short 0x0aca
    499e:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    49a6:	|  |  |  |                                                   .short 0x0aca
    49a8:	|  |  |  |                                                   andi.w #906,-(a4)
    49ac:	|  |  |  |                                                   bchg d1,196(a2)
    49b0:	|  |  |  |                                                   bset d1,580(a4)
    49b4:	|  |  |  |                                                   bclr d1,2576(a2)
    49b8:	|  |  |  |                                                   andi.b #-56,2762(a2)
    49be:	|  |  |  |                                                   .short 0x0aca
    49c0:	|  |  |  |                                                   eori.l #63572682,d0
    49c6:	|  |  |  |                                                   .short 0x0aca
    49c8:	|  |  |  |                                                   bchg d3,-(a2)
    49ca:	|  |  |  |                                                   bchg #-36,(a2)
    49ce:	|  |  |  |                                                   .short 0x08cc
    49d0:	|  |  |  |                                                   addi.b #14,1038(a0)
    49d6:	|  |  |  |                                                   .short 0x040e
    49d8:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    49dc:	|  |  |  |                                                   ori.w #8232,(a0)
    49e0:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    49e6:	|  |  |  |                                                   ori.w #12136,(a0)
    49ea:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    49f0:	|  |  |  |                                                   ori.w #12328,(a0)
    49f4:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    49fa:	|  |  |  |                                                   add.l 44(sp),d1
    49fe:	|  |  |  |                                                   moveq #28,d0
    4a00:	|  |  |  |                                                   add.l 80(sp),d0
    4a04:	|  |  |  |                                                   move.l d1,-(sp)
    4a06:	|  |  |  |                                                   move.l d0,-(sp)
    4a08:	|  |  |  |                                                   jsr 14d94 <copyVariable>
    4a0e:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    4a10:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4a14:	|  |  |  |                                                   jsr 57b4 <finishFunction>
    4a1a:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    4a1c:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    4a22:	|  |  |  |                                                   move.l 80(sp),-(sp)
    4a26:	|  |  |  |                                                   jsr 691c <restartFunction>
    4a2c:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    4a2e:	|  |  |  |  /----------------------------------------------- bra.w 578c <continueFunction+0xe88>
				finishFunction (fun);
    4a32:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    4a36:	|  |  |  |  |                                                jsr 57b4 <finishFunction>
    4a3c:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4a3e:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    4a42:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    4a46:	|  |  |  |  +----------------------------------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    4a4a:	|  |  |  |  |                                                movea.l 80(sp),a0
    4a4e:	|  |  |  |  |                                                move.l 28(a0),d0
    4a52:	|  |  |  |  |                                                moveq #2,d1
    4a54:	|  |  |  |  |                                                cmp.l d0,d1
    4a56:	|  |  |  |  |                                            /-- beq.s 4a62 <continueFunction+0x15e>
    4a58:	|  |  |  |  |                                            |   moveq #4,d1
    4a5a:	|  |  |  |  |                                            |   cmp.l d0,d1
    4a5c:	|  |  |  |  |                                         /--|-- beq.s 4ab0 <continueFunction+0x1ac>
    4a5e:	|  |  |  |  |                                /--------|--|-- bra.w 4b98 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    4a62:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    4a66:	|  |  |  |  |                                |        |      jsr 68da <pauseFunction>
    4a6c:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    4a6e:	|  |  |  |  |                                |        |      moveq #24,d0
    4a70:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    4a74:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    4a78:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    4a7c:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    4a80:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    4a82:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    4a86:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    4a8a:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    4a8c:	|  |  |  |  |                                |        |      jsr 6b68 <startNewFunctionNum>
    4a92:	|  |  |  |  |                                |        |      lea 20(sp),sp
    4a96:	|  |  |  |  |                                |        |      tst.l d0
    4a98:	|  |  |  |  |                                |        |  /-- bne.s 4aa0 <continueFunction+0x19c>
    4a9a:	|  |  |  |  |                                |        |  |   clr.w d0
    4a9c:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 57ae <continueFunction+0xeaa>
				fun = allRunningFunctions;
    4aa0:	|  |  |  |  |                                |        |  \-> move.l 1ca20 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4aa8:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    4aac:	|  |  |  |  |                                |  /-----|----- bra.w 4bac <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    4ab0:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    4ab4:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    4ab8:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    4abc:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    4ac0:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    4ac2:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    4ac4:	|  |  |  |  |                                |  |            jsr 135bc <callBuiltIn>
    4aca:	|  |  |  |  |                                |  |            lea 12(sp),sp
    4ace:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    4ad2:	|  |  |  |  |                                |  |            moveq #5,d0
    4ad4:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    4ad8:	|  |  |  |  |                                |  |  /-------- bcs.w 4b94 <continueFunction+0x290>
    4adc:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    4ae0:	|  |  |  |  |                                |  |  |         add.l d0,d0
    4ae2:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    4ae4:	|  |  |  |  |                                |  |  |         adda.l #19184,a0
    4aea:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    4aec:	|  |  |  |  |                                |  |  |         jmp (4af0 <continueFunction+0x1ec>,pc,d0.w)
    4af0:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    4af6:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    4afa:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    4b00:	|  |  |  |  |                                |  |  |         or.w 99bb <createPersonaAnim+0x1d1>(pc),d4
    4b04:	|  |  |  |  |                                |  |  |         ori.b #58,d1
    4b08:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4b0a:	|  |  |  |  |                                |  |  |         clr.w d0
    4b0c:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 57ae <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    4b10:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    4b14:	|  |  |  |  |                                |  |  |         jsr 68da <pauseFunction>
    4b1a:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    4b1c:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    4b20:	|  |  |  |  |                                |  |  |  /----- bra.s 4b96 <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    4b22:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    4b26:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4b2a:	|  |  |  |  |                                |  |  |  +----- bra.s 4b96 <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    4b2c:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    4b30:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    4b36:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    4b38:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    4b3c:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4b40:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4b44:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4b46:	|  |  |  |  |                                |  |  |  |      jsr 151cc <setVariable>
    4b4c:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    4b50:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    4b54:	|  |  |  |  |                                |  |  |  |      jsr 68da <pauseFunction>
    4b5a:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    4b5c:	|  |  |  |  |                                |  |  |  |      move.l 1ca58 <noStack>,d1
    4b62:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    4b66:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4b68:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    4b6a:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    4b6e:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    4b70:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    4b72:	|  |  |  |  |                                |  |  |  |      jsr 6b68 <startNewFunctionNum>
    4b78:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    4b7c:	|  |  |  |  |                                |  |  |  |      tst.l d0
    4b7e:	|  |  |  |  |                                |  |  |  |  /-- bne.s 4b86 <continueFunction+0x282>
    4b80:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    4b82:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 57ae <continueFunction+0xeaa>
							fun = allRunningFunctions;
    4b86:	|  |  |  |  |                                |  |  |  |  \-> move.l 1ca20 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    4b8e:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    4b92:	|  |  |  |  |                                |  |  |  +----- bra.s 4b96 <continueFunction+0x292>

						default:
						break;
    4b94:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    4b96:	|  |  |  |  |                                |  +-----\----X bra.s 4bac <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    4b98:	|  |  |  |  |                                \--|----------> pea 188c5 <PutChar+0xae9>
    4b9e:	|  |  |  |  |                                   |            jsr 1733a <KPrintF>
    4ba4:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    4ba6:	|  |  |  |  |                                   |            clr.w d0
    4ba8:	|  +--|--|--|-----------------------------------|----------- bra.w 57ae <continueFunction+0xeaa>
			}
			break;
    4bac:	|  |  |  |  +-----------------------------------\----------X bra.w 578c <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    4bb0:	|  |  |  |  |                                                moveq #28,d0
    4bb2:	|  |  |  |  |                                                add.l 80(sp),d0
    4bb6:	|  |  |  |  |                                                clr.l -(sp)
    4bb8:	|  |  |  |  |                                                clr.l -(sp)
    4bba:	|  |  |  |  |                                                move.l d0,-(sp)
    4bbc:	|  |  |  |  |                                                jsr 151cc <setVariable>
    4bc2:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4bc6:	|  |  |  |  +----------------------------------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    4bca:	|  |  |  |  |                                                move.l 68(sp),d1
    4bce:	|  |  |  |  |                                                moveq #28,d0
    4bd0:	|  |  |  |  |                                                add.l 80(sp),d0
    4bd4:	|  |  |  |  |                                                move.l d1,-(sp)
    4bd6:	|  |  |  |  |                                                pea 5 <_start+0x5>
    4bda:	|  |  |  |  |                                                move.l d0,-(sp)
    4bdc:	|  |  |  |  |                                                jsr 151cc <setVariable>
    4be2:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4be6:	|  |  |  |  +----------------------------------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4bea:	|  |  |  |  |                                                move.l 68(sp),d1
    4bee:	|  |  |  |  |                                                moveq #28,d0
    4bf0:	|  |  |  |  |                                                add.l 80(sp),d0
    4bf4:	|  |  |  |  |                                                move.l d1,-(sp)
    4bf6:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4bfa:	|  |  |  |  |                                                move.l d0,-(sp)
    4bfc:	|  |  |  |  |                                                jsr 151cc <setVariable>
    4c02:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    4c06:	|  |  |  |  +----------------------------------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4c0a:	|  |  |  |  |                                                moveq #28,d0
    4c0c:	|  |  |  |  |                                                add.l 80(sp),d0
    4c10:	|  |  |  |  |                                                movea.l 80(sp),a0
    4c14:	|  |  |  |  |                                                movea.l 20(a0),a0
    4c18:	|  |  |  |  |                                                move.l 68(sp),d1
    4c1c:	|  |  |  |  |                                                lsl.l #3,d1
    4c1e:	|  |  |  |  |                                                add.l a0,d1
    4c20:	|  |  |  |  |                                                move.l d0,-(sp)
    4c22:	|  |  |  |  |                                                move.l d1,-(sp)
    4c24:	|  |  |  |  |                                                jsr 14d94 <copyVariable>
    4c2a:	|  |  |  |  |                                                addq.l #8,sp
    4c2c:	|  |  |  |  |                                                tst.w d0
    4c2e:	|  |  |  |  |  /-------------------------------------------- bne.w 576a <continueFunction+0xe66>
    4c32:	|  |  |  |  |  |                                             clr.w d0
    4c34:	|  +--|--|--|--|-------------------------------------------- bra.w 57ae <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4c38:	|  |  |  |  |  |                                             moveq #28,d0
    4c3a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c3e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c40:	|  |  |  |  |  |                                             jsr 14e1a <getBoolean>
    4c46:	|  |  |  |  |  |                                             addq.l #4,sp
    4c48:	|  |  |  |  |  |                                             tst.w d0
    4c4a:	|  |  |  |  |  |                                      /----- beq.s 4c66 <continueFunction+0x362>
    4c4c:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4c50:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    4c54:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    4c56:	|  |  |  |  |  |                                      |      jsr 14e1a <getBoolean>
    4c5c:	|  |  |  |  |  |                                      |      addq.l #4,sp
    4c5e:	|  |  |  |  |  |                                      |      tst.w d0
    4c60:	|  |  |  |  |  |                                      +----- beq.s 4c66 <continueFunction+0x362>
    4c62:	|  |  |  |  |  |                                      |      moveq #1,d0
    4c64:	|  |  |  |  |  |                                      |  /-- bra.s 4c68 <continueFunction+0x364>
    4c66:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4c68:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4c6a:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4c6e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c70:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4c74:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4c76:	|  |  |  |  |  |                                             jsr 151cc <setVariable>
    4c7c:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4c80:	|  |  |  |  |  |                                             moveq #24,d0
    4c82:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c86:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c88:	|  |  |  |  |  |                                             jsr 1525e <trimStack>
    4c8e:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4c90:	|  |  |  |  +--|-------------------------------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    4c94:	|  |  |  |  |  |                                             moveq #28,d0
    4c96:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4c9a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4c9c:	|  |  |  |  |  |                                             jsr 14e1a <getBoolean>
    4ca2:	|  |  |  |  |  |                                             addq.l #4,sp
    4ca4:	|  |  |  |  |  |                                             tst.w d0
    4ca6:	|  |  |  |  |  |                                         /-- bne.s 4cbe <continueFunction+0x3ba>
    4ca8:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    4cac:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    4cb0:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    4cb2:	|  |  |  |  |  |                                         |   jsr 14e1a <getBoolean>
    4cb8:	|  |  |  |  |  |                                         |   addq.l #4,sp
    4cba:	|  |  |  |  |  |                                         |   tst.w d0
    4cbc:	|  |  |  |  |  |                                      /--|-- beq.s 4cc2 <continueFunction+0x3be>
    4cbe:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    4cc0:	|  |  |  |  |  |                                      |  /-- bra.s 4cc4 <continueFunction+0x3c0>
    4cc2:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    4cc4:	|  |  |  |  |  |                                         \-> moveq #28,d1
    4cc6:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4cca:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4ccc:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4cd0:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4cd2:	|  |  |  |  |  |                                             jsr 151cc <setVariable>
    4cd8:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4cdc:	|  |  |  |  |  |                                             moveq #24,d0
    4cde:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4ce2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4ce4:	|  |  |  |  |  |                                             jsr 1525e <trimStack>
    4cea:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4cec:	|  |  |  |  +--|-------------------------------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4cf0:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4cf4:	|  |  |  |  |  |                                             moveq #28,d0
    4cf6:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4cfa:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4cfc:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4d00:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d02:	|  |  |  |  |  |                                             jsr 151cc <setVariable>
    4d08:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4d0c:	|  |  |  |  +--|-------------------------------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4d10:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4d14:	|  |  |  |  |  |                                             moveq #28,d0
    4d16:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d1a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4d1c:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4d20:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d22:	|  |  |  |  |  |                                             jsr 151cc <setVariable>
    4d28:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4d2c:	|  |  |  |  +--|-------------------------------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4d30:	|  |  |  |  |  |                                             move.l 68(sp),d1
    4d34:	|  |  |  |  |  |                                             moveq #28,d0
    4d36:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4d3a:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4d3c:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4d40:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4d42:	|  |  |  |  |  |                                             jsr 151cc <setVariable>
    4d48:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4d4c:	|  |  |  |  +--|-------------------------------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4d50:	|  |  |  |  |  |                                             move.l 1c9e8 <dialogValue>,d0
    4d56:	|  |  |  |  |  |                                             moveq #1,d1
    4d58:	|  |  |  |  |  |                                             cmp.l d0,d1
    4d5a:	|  |  |  |  |  |  /----------------------------------------- beq.w 576e <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    4d5e:	|  |  |  |  |  |  |                                          pea 188da <PutChar+0xafe>
    4d64:	|  |  |  |  |  |  |                                          jsr 1733a <KPrintF>
    4d6a:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    4d6c:	|  |  |  |  |  |  |                                          clr.w d0
    4d6e:	|  +--|--|--|--|--|----------------------------------------- bra.w 57ae <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    4d72:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    4d76:	|  |  |  |  |  |  |                                          moveq #28,d0
    4d78:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    4d7c:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    4d7e:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    4d80:	|  |  |  |  |  |  |                                          jsr 1495e <loadStringToVar>
    4d86:	|  |  |  |  |  |  |                                          addq.l #8,sp
    4d88:	|  |  |  |  |  |  |                                          tst.w d0
    4d8a:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 5772 <continueFunction+0xe6e>
					return FALSE;
    4d8e:	|  |  |  |  |  |  |  |                                       clr.w d0
    4d90:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 57ae <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    4d94:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4d98:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4d9c:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4d9e:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    4da0:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4da2:	|  |  |  |  |  |  |  |                                /----- beq.s 4e00 <continueFunction+0x4fc>
    4da4:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    4da6:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    4da8:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 4f94 <continueFunction+0x690>
    4dac:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    4dae:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 4dba <continueFunction+0x4b6>
    4db0:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    4db2:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    4db4:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4e00 <continueFunction+0x4fc>
    4db6:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 4f94 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    4dba:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    4dbc:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    4dc0:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 4dec <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    4dc2:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    4dc4:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4dc8:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4dca:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4dcc:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4dce:	|  |  |  |  |  |  |  |              |                 |  |   jsr 151cc <setVariable>
    4dd4:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    4dd8:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    4dda:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4dde:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4de0:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1525e <trimStack>
    4de6:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4de8:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 4faa <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4dec:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 1891b <PutChar+0xb3f>
    4df2:	|  |  |  |  |  |  |  |              |  |              |      jsr 1733a <KPrintF>
    4df8:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4dfa:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4dfc:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 57ae <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4e00:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    4e04:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4e08:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4e0c:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4e0e:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4e24 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4e10:	|  |  |  |  |  |  |  |              |  |                 |   pea 18957 <PutChar+0xb7b>
    4e16:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1733a <KPrintF>
    4e1c:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4e1e:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4e20:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 57ae <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4e24:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    4e26:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4e2a:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4e2c:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4e30:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    4e34:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    4e36:	|  |  |  |  |  |  |  |              |  |                     jsr 148da <getValueType>
    4e3c:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4e40:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    4e42:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4e4a <continueFunction+0x546>
    4e44:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4e46:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 57ae <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4e4a:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4e4e:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4e52:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    4e54:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    4e56:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    4e58:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4e7a <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    4e5a:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    4e5e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    4e60:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    4e64:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    4e68:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    4e6c:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    4e6e:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4e70:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14564 <fastArrayGetByIndex>
    4e76:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    4e78:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 4e9a <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    4e7a:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    4e7e:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    4e80:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    4e84:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    4e88:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    4e8c:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    4e8e:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    4e90:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    4e92:	|  |  |  |  |  |  |  |              |  |              |      jsr 151ee <stackGetByIndex>
    4e98:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4e9a:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    4e9e:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    4ea0:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4ea4:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4ea6:	|  |  |  |  |  |  |  |              |  |                     jsr 1525e <trimStack>
    4eac:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    4eae:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    4eb2:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4ece <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    4eb4:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    4eb6:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4eba:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4ebc:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4ebe:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4ec0:	|  |  |  |  |  |  |  |              |  |                 |   jsr 151cc <setVariable>
    4ec6:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4eca:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 4fa8 <continueFunction+0x6a4>
    4ece:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    4ed0:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    4ed4:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 4ee2 <continueFunction+0x5de>
    4ed6:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4ed8:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4edc:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4f2c <continueFunction+0x628>
    4ede:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 4f74 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4ee2:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    4ee6:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4eea:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4eee:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4ef0:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 148da <getValueType>
    4ef6:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4efa:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4efc:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 4f04 <continueFunction+0x600>
    4efe:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4f00:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 4f8e <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4f04:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    4f06:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4f08:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4f0c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4f0e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    4f12:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    4f14:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 151cc <setVariable>
    4f1a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4f1e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4f20:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    4f22:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    4f26:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4f2a:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 4f92 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4f2c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    4f30:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4f34:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4f38:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4f3a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 148da <getValueType>
    4f40:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    4f44:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    4f46:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4f4c <continueFunction+0x648>
    4f48:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4f4a:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 4f8e <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4f4c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4f4e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4f50:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    4f54:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    4f56:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    4f5a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    4f5c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 151cc <setVariable>
    4f62:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    4f66:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    4f68:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    4f6a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    4f6e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    4f72:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 4f92 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    4f74:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    4f76:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    4f7a:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    4f7c:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    4f80:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14d94 <copyVariable>
    4f86:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    4f88:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    4f8a:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 4fa8 <continueFunction+0x6a4>
    4f8c:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4f8e:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 57ae <continueFunction+0xeaa>
				break;
    4f92:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 4fa8 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    4f94:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 18975 <PutChar+0xb99>
    4f9a:	|  |  |  |  |  |  |  |                 |  |                  jsr 1733a <KPrintF>
    4fa0:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    4fa2:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    4fa4:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 57ae <continueFunction+0xeaa>
				break;
    4fa8:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    4faa:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 578c <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    4fae:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4fb2:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    4fb6:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4fb8:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    4fba:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4fbc:	|  |  |  |  |  |  |  |                                   /-- beq.s 4fca <continueFunction+0x6c6>
    4fbe:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    4fc0:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    4fc2:	|  |  |  |  |  |  |  |                                /--|-- beq.w 5076 <continueFunction+0x772>
    4fc6:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 50d4 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4fca:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4fce:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4fd2:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    4fd6:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4fd8:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4fee <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    4fda:	|  |  |  |  |  |  |  |                             |  |  |   pea 18957 <PutChar+0xb7b>
    4fe0:	|  |  |  |  |  |  |  |                             |  |  |   jsr 1733a <KPrintF>
    4fe6:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    4fe8:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4fea:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 57ae <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4fee:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    4ff0:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    4ff4:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4ff6:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    4ffa:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    4ffe:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5000:	|  |  |  |  |  |  |  |                             |  |      jsr 148da <getValueType>
    5006:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    500a:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    500c:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 5014 <continueFunction+0x710>
    500e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5010:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 57ae <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    5014:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    5018:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    501c:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5020:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5022:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5026:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5028:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    502c:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5030:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5034:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5036:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5038:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    503a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    503c:	|  |  |  |  |  |  |  |                             |  |      jsr 6b24 <stackSetByIndex>
    5042:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5046:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5048:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 5050 <continueFunction+0x74c>
						return FALSE;
    504a:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    504c:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 57ae <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    5050:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    5052:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5056:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5058:	|  |  |  |  |  |  |  |                             |  |      jsr 1525e <trimStack>
    505e:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5060:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5062:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5066:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5068:	|  |  |  |  |  |  |  |                             |  |      jsr 1525e <trimStack>
    506e:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5070:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5072:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 578c <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5076:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    5078:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    507c:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    507e:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5082:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5086:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5088:	|  |  |  |  |  |  |  |                             |         jsr 148da <getValueType>
    508e:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5092:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5094:	|  |  |  |  |  |  |  |                             |     /-- bne.s 509c <continueFunction+0x798>
    5096:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5098:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 57ae <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    509c:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    50a0:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    50a2:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    50a6:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    50aa:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    50ae:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    50b0:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    50b2:	|  |  |  |  |  |  |  |                             |         jsr 14564 <fastArrayGetByIndex>
    50b8:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    50ba:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    50be:	|  |  |  |  |  |  |  |                             |     /-- bne.s 50ce <continueFunction+0x7ca>
    50c0:	|  |  |  |  |  |  |  |                             |     |   pea 18999 <PutChar+0xbbd>
    50c6:	|  |  |  |  |  |  |  |                             |     |   jsr 1733a <KPrintF>
    50cc:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    50ce:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    50d0:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 57ae <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    50d4:	|  |  |  |  |  |  |  |                             \-------> pea 18975 <PutChar+0xb99>
    50da:	|  |  |  |  |  |  |  |                                       jsr 1733a <KPrintF>
    50e0:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    50e2:	|  |  |  |  |  |  |  |                                       clr.w d0
    50e4:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 57ae <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    50e8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    50ec:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    50f0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    50f4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    50f6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    50f8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    50fa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    50fe:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5102:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5104:	|  |  |  |  |  |  |  |                                       jsr 148da <getValueType>
    510a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    510e:	|  |  |  |  |  |  |  |                                       tst.w d0
    5110:	|  |  |  |  |  |  |  |                                   /-- bne.s 5118 <continueFunction+0x814>
    5112:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5114:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 57ae <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5118:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    511c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    511e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5122:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5124:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5128:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    512a:	|  |  |  |  |  |  |  |                                       jsr 151cc <setVariable>
    5130:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5134:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5138:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    513a:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    513c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5140:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5144:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5148:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    514a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    514c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    514e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5152:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5154:	|  |  |  |  |  |  |  |                                       jsr 151cc <setVariable>
    515a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    515e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5162:	|  |  |  |  |  |  |  |                                       move.l 1ca36 <globalVars>,d1
    5168:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    516c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    516e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5170:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5172:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5176:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    517a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    517c:	|  |  |  |  |  |  |  |                                       jsr 148da <getValueType>
    5182:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5186:	|  |  |  |  |  |  |  |                                       tst.w d0
    5188:	|  |  |  |  |  |  |  |                                   /-- bne.s 5190 <continueFunction+0x88c>
    518a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    518c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 57ae <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5190:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    5194:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5196:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    519a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    519c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51a0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51a2:	|  |  |  |  |  |  |  |                                       jsr 151cc <setVariable>
    51a8:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    51ac:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    51b0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    51b2:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    51b4:	|  |  |  |  |  |  |  |                                       movea.l 1ca36 <globalVars>,a0
    51ba:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    51be:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    51c0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    51c2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    51c4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51c8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51ca:	|  |  |  |  |  |  |  |                                       jsr 151cc <setVariable>
    51d0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    51d4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    51d8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    51dc:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    51e0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    51e4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    51e6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    51e8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    51ea:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    51ee:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    51f2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    51f4:	|  |  |  |  |  |  |  |                                       jsr 148da <getValueType>
    51fa:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    51fe:	|  |  |  |  |  |  |  |                                       tst.w d0
    5200:	|  |  |  |  |  |  |  |                                   /-- bne.s 5208 <continueFunction+0x904>
    5202:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5204:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 57ae <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5208:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    520c:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    520e:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5212:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5214:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5218:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    521a:	|  |  |  |  |  |  |  |                                       jsr 151cc <setVariable>
    5220:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5224:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5228:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    522a:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    522c:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5230:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5234:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5238:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    523a:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    523c:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    523e:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5242:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5244:	|  |  |  |  |  |  |  |                                       jsr 151cc <setVariable>
    524a:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    524e:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5252:	|  |  |  |  |  |  |  |                                       move.l 1ca36 <globalVars>,d1
    5258:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    525c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    525e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5260:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5262:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5266:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    526a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    526c:	|  |  |  |  |  |  |  |                                       jsr 148da <getValueType>
    5272:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5276:	|  |  |  |  |  |  |  |                                       tst.w d0
    5278:	|  |  |  |  |  |  |  |                                   /-- bne.s 5280 <continueFunction+0x97c>
    527a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    527c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 57ae <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5280:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    5284:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5286:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    528a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    528c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5290:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5292:	|  |  |  |  |  |  |  |                                       jsr 151cc <setVariable>
    5298:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    529c:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    52a0:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    52a2:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    52a4:	|  |  |  |  |  |  |  |                                       movea.l 1ca36 <globalVars>,a0
    52aa:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    52ae:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    52b0:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    52b2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    52b4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    52b8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    52ba:	|  |  |  |  |  |  |  |                                       jsr 151cc <setVariable>
    52c0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    52c4:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    52c8:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    52cc:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    52d0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    52d4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    52d6:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    52d8:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    52da:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    52de:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    52e0:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    52e2:	|  |  |  |  |  |  |  |                                       jsr 14d94 <copyVariable>
    52e8:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    52ea:	|  |  |  |  |  |  |  |                                       tst.w d0
    52ec:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 5776 <continueFunction+0xe72>
    52f0:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    52f2:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 57ae <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    52f6:	|  |  |  |  |  |  |  |  |                                    move.l 1ca36 <globalVars>,d1
    52fc:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5300:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5302:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5304:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5306:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    530a:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    530c:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    530e:	|  |  |  |  |  |  |  |  |                                    jsr 14d94 <copyVariable>
    5314:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5316:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    5318:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 577a <continueFunction+0xe76>
    531c:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    531e:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 57ae <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5322:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    5324:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5328:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1ca36 <globalVars>,a0
    532e:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5332:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    5334:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    5336:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    5338:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    533a:	|  |  |  |  |  |  |  |  |  |                                 jsr 14d94 <copyVariable>
    5340:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    5342:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    5344:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 577e <continueFunction+0xe7a>
    5348:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    534a:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 57ae <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    534e:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    5350:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    5354:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    5356:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    535a:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    535c:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    535e:	|  |  |  |  |  |  |  |  |  |  |                              jsr 14116 <addVarToStack>
    5364:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5366:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5368:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 5782 <continueFunction+0xe7e>
    536c:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    536e:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 57ae <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5372:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5374:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5378:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    537a:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    537e:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5380:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5382:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 1419c <addVarToStackQuick>
    5388:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    538a:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    538c:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 5786 <continueFunction+0xe82>
    5390:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5392:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 57ae <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5396:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5398:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    539c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    539e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14e1a <getBoolean>
    53a4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    53a6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    53a8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    53aa:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    53ac:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    53ae:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    53b0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    53b2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    53b6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    53b8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    53bc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    53be:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 151cc <setVariable>
    53c4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    53c8:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    53cc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    53ce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    53d2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    53d4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14e1a <getBoolean>
    53da:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    53dc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    53de:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 578a <continueFunction+0xe86>
				advanceNow = FALSE;
    53e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    53e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    53ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    53f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 578a <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    53f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    53f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    53fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5402:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 578c <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5408:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    540c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    540e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 148da <getValueType>
    541e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 542c <continueFunction+0xb28>
    5426:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5428:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 57ae <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    542c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    5430:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5432:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    5434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5436:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    543a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    543c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5442:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 151cc <setVariable>
    5448:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    544c:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 578c <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    5450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    5458:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 5742 <continueFunction+0xe3e>
    545c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    545e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 54de <continueFunction+0xbda>
    5464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    546a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 5528 <continueFunction+0xc24>
    546e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5474:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 5482 <continueFunction+0xb7e>
    5476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    547c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 54b0 <continueFunction+0xbac>
    547e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5528 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    5484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5488:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    548c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5492:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5494:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14210 <addVariablesInSecond>
    549a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    549c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    549e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    54a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    54a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1525e <trimStack>
    54aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    54ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 5756 <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    54b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    54b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    54b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    54ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    54be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    54c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    54c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 142ce <compareVariablesInSecond>
    54c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    54ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    54cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    54d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    54d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1525e <trimStack>
    54d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    54da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 5756 <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    54de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    54e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    54e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    54e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    54ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    54ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    54f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 142ce <compareVariablesInSecond>
    54f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    54f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    54fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    54fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5500:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1525e <trimStack>
    5506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    550c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    5510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    5514:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5516:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    551c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5520:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    5524:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 5756 <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    552c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    5530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5536:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    553a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    553c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 148da <getValueType>
    5542:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5548:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 5550 <continueFunction+0xc4c>
    554a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    554c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 57ae <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    5550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    5552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5556:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5558:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    555c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5562:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 148da <getValueType>
    5568:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    556c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    556e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 5576 <continueFunction+0xc72>
    5570:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5572:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 57ae <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5576:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    5578:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    557c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    557e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 1525e <trimStack>
    5584:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    5586:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5588:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    558c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    558e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5590:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 5754 <continueFunction+0xe50>
    5594:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5596:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5598:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #21924,a0
    559e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    55a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (55a4 <continueFunction+0xca0>,pc,d0.w)
    55a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    55a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    55aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    55b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    55b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    55bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    55c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    55cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    55d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    55d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    55dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17cc6 <__mulsi3>
    55e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    55e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    55ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    55ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    55f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    55f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    55f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    55f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151cc <setVariable>
    55fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5602:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5756 <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    5606:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    560a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    560e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    5610:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5612:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5616:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5618:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    561c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    561e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151cc <setVariable>
    5624:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5628:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5756 <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    562c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5630:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5634:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5636:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5638:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17d72 <__modsi3>
    563e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5640:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5642:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5644:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5648:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    564a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    564e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5650:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151cc <setVariable>
    5656:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    565a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5756 <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    565e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    5662:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    5666:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5668:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    566a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17d44 <__divsi3>
    5670:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    5672:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    5674:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    5676:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    567a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    567c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5680:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5682:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151cc <setVariable>
    5688:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    568c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5756 <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    5690:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    5694:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    5698:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    569a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    569c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    569e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    56a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    56a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    56a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    56a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    56ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151cc <setVariable>
    56b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 5756 <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    56be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    56c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    56c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    56c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    56ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    56cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    56ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    56d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    56d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    56d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    56d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    56dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    56de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151cc <setVariable>
    56e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    56e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5756 <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    56ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    56ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    56f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    56f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    56f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    56f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    56fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    56fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    56fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    5702:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5704:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5708:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    570a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151cc <setVariable>
    5710:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5714:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5756 <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    5716:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    571a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    571e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    5720:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    5722:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    5724:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    5726:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    5728:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    572a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    572e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    5730:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    5734:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    5736:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 151cc <setVariable>
    573c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    5740:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 5756 <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    5742:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 189ba <PutChar+0xbde>
    5748:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 1733a <KPrintF>
    574e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    5750:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    5752:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 57ae <continueFunction+0xeaa>
						break;
    5754:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    5756:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 578c <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    5758:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 189d2 <PutChar+0xbf6>
    575e:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 1733a <KPrintF>
    5764:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    5766:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    5768:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 57ae <continueFunction+0xeaa>
			break;
    576a:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    576c:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 578c <continueFunction+0xe88>
			break;
    576e:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    5770:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 578c <continueFunction+0xe88>
			break;
    5772:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    5774:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 578c <continueFunction+0xe88>
			break;
    5776:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    5778:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 578c <continueFunction+0xe88>
			break;
    577a:	|  |  |     |              \--|--|--|--|-------------------> nop
    577c:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 578c <continueFunction+0xe88>
			break;
    577e:	|  |  |     |                 \--|--|--|-------------------> nop
    5780:	|  |  |     +--------------------|--|--|-------------------- bra.s 578c <continueFunction+0xe88>
			break;
    5782:	|  |  |     |                    \--|--|-------------------> nop
    5784:	|  |  |     +-----------------------|--|-------------------- bra.s 578c <continueFunction+0xe88>
			break;
    5786:	|  |  |     |                       \--|-------------------> nop
    5788:	|  |  |     +--------------------------|-------------------- bra.s 578c <continueFunction+0xe88>
			break;
    578a:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    578c:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    5790:	+--|--|----------------------------------------------------- beq.s 57a4 <continueFunction+0xea0>
    5792:	|  |  |                                                      movea.l 80(sp),a0
    5796:	|  |  |                                                      move.l 36(a0),d0
    579a:	|  |  |                                                      addq.l #1,d0
    579c:	|  |  |                                                      movea.l 80(sp),a0
    57a0:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    57a4:	\--|--|----------------------------------------------------> tst.w 74(sp)
    57a8:	   |  \----------------------------------------------------- bne.w 492c <continueFunction+0x28>

	}
	return TRUE;
    57ac:	   |                                                         moveq #1,d0
}
    57ae:	   \-------------------------------------------------------> lea 76(sp),sp
    57b2:	                                                             rts

000057b4 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    57b4:	          lea -16(sp),sp
    57b8:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    57ba:	          move.l 24(sp),-(sp)
    57be:	          jsr 68da <pauseFunction>
    57c4:	          addq.l #4,sp
	if (fun -> stack) 
    57c6:	          movea.l 24(sp),a0
    57ca:	          move.l 24(a0),d0
    57ce:	      /-- beq.s 57e2 <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    57d0:	      |   pea 189fe <PutChar+0xc22>
    57d6:	      |   jsr 1733a <KPrintF>
    57dc:	      |   addq.l #4,sp
		return;
    57de:	/-----|-- bra.w 587c <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    57e2:	|     \-> movea.l 24(sp),a0
    57e6:	|         move.l 4(a0),12(sp)
    57ec:	|         move.l 1ca88 <SysBase>,d0
    57f2:	|         movea.l d0,a6
    57f4:	|         movea.l 12(sp),a1
    57f8:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    57fc:	|         clr.l 16(sp)
    5800:	|     /-- bra.s 5820 <finishFunction+0x6c>
    5802:	|  /--|-> movea.l 24(sp),a0
    5806:	|  |  |   move.l 20(a0),d1
    580a:	|  |  |   move.l 16(sp),d0
    580e:	|  |  |   lsl.l #3,d0
    5810:	|  |  |   add.l d1,d0
    5812:	|  |  |   move.l d0,-(sp)
    5814:	|  |  |   jsr 14b28 <unlinkVar>
    581a:	|  |  |   addq.l #4,sp
    581c:	|  |  |   addq.l #1,16(sp)
    5820:	|  |  \-> movea.l 24(sp),a0
    5824:	|  |      move.l 8(a0),d0
    5828:	|  |      cmp.l 16(sp),d0
    582c:	|  \----- bgt.s 5802 <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    582e:	|         movea.l 24(sp),a0
    5832:	|         move.l 8(a0),d0
    5836:	|     /-- ble.s 5852 <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    5838:	|     |   movea.l 24(sp),a0
    583c:	|     |   move.l 20(a0),8(sp)
    5842:	|     |   move.l 1ca88 <SysBase>,d0
    5848:	|     |   movea.l d0,a6
    584a:	|     |   movea.l 8(sp),a1
    584e:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    5852:	|     \-> moveq #28,d0
    5854:	|         add.l 24(sp),d0
    5858:	|         move.l d0,-(sp)
    585a:	|         jsr 14b28 <unlinkVar>
    5860:	|         addq.l #4,sp
	FreeVec(fun);
    5862:	|         move.l 24(sp),4(sp)
    5868:	|         move.l 1ca88 <SysBase>,d0
    586e:	|         movea.l d0,a6
    5870:	|         movea.l 4(sp),a1
    5874:	|         jsr -690(a6)
	fun = NULL;
    5878:	|         clr.l 24(sp)
}
    587c:	\-------> movea.l (sp)+,a6
    587e:	          lea 16(sp),sp
    5882:	          rts

00005884 <freezeSubs>:

void freezeSubs () {
    5884:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5886:	          move.l 1ca20 <allRunningFunctions>,(sp)

	while (thisFunction) {
    588c:	   /----- bra.s 58aa <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    588e:	/--|----> movea.l (sp),a0
    5890:	|  |      move.w 52(a0),d0
    5894:	|  |  /-- bne.s 58a4 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    5896:	|  |  |   movea.l (sp),a0
    5898:	|  |  |   move.b 56(a0),d0
    589c:	|  |  |   addq.b #1,d0
    589e:	|  |  |   movea.l (sp),a0
    58a0:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    58a4:	|  |  \-> movea.l (sp),a0
    58a6:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    58aa:	|  \----> tst.l (sp)
    58ac:	\-------- bne.s 588e <freezeSubs+0xa>
	}
}
    58ae:	          nop
    58b0:	          nop
    58b2:	          addq.l #4,sp
    58b4:	          rts

000058b6 <handleInput>:

BOOL handleInput () {
    58b6:	             lea -16(sp),sp
    58ba:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    58bc:	             move.l 1cb9c <overRegion>,d0
    58c2:	         /-- bne.s 58ca <handleInput+0x14>
    58c4:	         |   jsr 15a96 <getOverRegion>

	if (input.justMoved) {
    58ca:	         \-> move.w 1ca3e <input+0x4>,d0
    58d0:	         /-- beq.s 590e <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    58d2:	         |   movea.l 1c400 <currentEvents>,a0
    58d8:	         |   move.l 16(a0),d0
    58dc:	         +-- beq.s 590e <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    58de:	         |   move.l 1ca58 <noStack>,d1
    58e4:	         |   movea.l 1c400 <currentEvents>,a0
    58ea:	         |   move.l 16(a0),d0
    58ee:	         |   pea 1 <_start+0x1>
    58f2:	         |   move.l d1,-(sp)
    58f4:	         |   clr.l -(sp)
    58f6:	         |   clr.l -(sp)
    58f8:	         |   move.l d0,-(sp)
    58fa:	         |   jsr 6b68 <startNewFunctionNum>
    5900:	         |   lea 20(sp),sp
    5904:	         |   tst.l d0
    5906:	         +-- bne.s 590e <handleInput+0x58>
    5908:	         |   clr.w d0
    590a:	/--------|-- bra.w 5b14 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    590e:	|        \-> clr.w 1ca3e <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    5914:	|            move.l 1ca50 <lastRegion>,d1
    591a:	|            move.l 1cb9c <overRegion>,d0
    5920:	|            cmp.l d1,d0
    5922:	|  /-------- beq.w 59fa <handleInput+0x144>
    5926:	|  |         movea.l 1c400 <currentEvents>,a0
    592c:	|  |         move.l 20(a0),d0
    5930:	|  +-------- beq.w 59fa <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    5934:	|  |         moveq #12,d0
    5936:	|  |         move.l d0,16(sp)
    593a:	|  |         clr.l 12(sp)
    593e:	|  |         move.l 1ca88 <SysBase>,d0
    5944:	|  |         movea.l d0,a6
    5946:	|  |         move.l 16(sp),d0
    594a:	|  |         move.l 12(sp),d1
    594e:	|  |         jsr -684(a6)
    5952:	|  |         move.l d0,8(sp)
    5956:	|  |         move.l 8(sp),d0
    595a:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    595e:	|  |         move.l 4(sp),d0
    5962:	|  |     /-- bne.s 5978 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    5964:	|  |     |   pea 18a24 <PutChar+0xc48>
    596a:	|  |     |   jsr 1733a <KPrintF>
    5970:	|  |     |   addq.l #4,sp
			return FALSE;
    5972:	|  |     |   clr.w d0
    5974:	+--|-----|-- bra.w 5b14 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    5978:	|  |     \-> movea.l 4(sp),a0
    597c:	|  |         clr.l (a0)
		if (overRegion) {
    597e:	|  |         move.l 1cb9c <overRegion>,d0
    5984:	|  |  /----- beq.s 59ac <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    5986:	|  |  |      movea.l 1cb9c <overRegion>,a0
    598c:	|  |  |      movea.l 28(a0),a0
    5990:	|  |  |      move.l 4(a0),d1
    5994:	|  |  |      move.l 4(sp),d0
    5998:	|  |  |      move.l d1,-(sp)
    599a:	|  |  |      pea 7 <_start+0x7>
    599e:	|  |  |      move.l d0,-(sp)
    59a0:	|  |  |      jsr 151cc <setVariable>
    59a6:	|  |  |      lea 12(sp),sp
    59aa:	|  |  |  /-- bra.s 59c2 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    59ac:	|  |  \--|-> move.l 4(sp),d0
    59b0:	|  |     |   clr.l -(sp)
    59b2:	|  |     |   pea 1 <_start+0x1>
    59b6:	|  |     |   move.l d0,-(sp)
    59b8:	|  |     |   jsr 151cc <setVariable>
    59be:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    59c2:	|  |     \-> movea.l 4(sp),a0
    59c6:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    59ca:	|  |         movea.l 1c400 <currentEvents>,a0
    59d0:	|  |         move.l 20(a0),d0
    59d4:	|  |         pea 1 <_start+0x1>
    59d8:	|  |         lea 8(sp),a0
    59dc:	|  |         move.l a0,-(sp)
    59de:	|  |         clr.l -(sp)
    59e0:	|  |         pea 1 <_start+0x1>
    59e4:	|  |         move.l d0,-(sp)
    59e6:	|  |         jsr 6b68 <startNewFunctionNum>
    59ec:	|  |         lea 20(sp),sp
    59f0:	|  |         tst.l d0
    59f2:	|  +-------- bne.s 59fa <handleInput+0x144>
    59f4:	|  |         clr.w d0
    59f6:	+--|-------- bra.w 5b14 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    59fa:	|  \-------> move.w 1ca40 <input+0x6>,d0
    5a00:	|        /-- beq.s 5a3e <handleInput+0x188>
    5a02:	|        |   movea.l 1c400 <currentEvents>,a0
    5a08:	|        |   move.l 4(a0),d0
    5a0c:	|        +-- beq.s 5a3e <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5a0e:	|        |   move.l 1ca58 <noStack>,d1
    5a14:	|        |   movea.l 1c400 <currentEvents>,a0
    5a1a:	|        |   move.l 4(a0),d0
    5a1e:	|        |   pea 1 <_start+0x1>
    5a22:	|        |   move.l d1,-(sp)
    5a24:	|        |   clr.l -(sp)
    5a26:	|        |   clr.l -(sp)
    5a28:	|        |   move.l d0,-(sp)
    5a2a:	|        |   jsr 6b68 <startNewFunctionNum>
    5a30:	|        |   lea 20(sp),sp
    5a34:	|        |   tst.l d0
    5a36:	|        +-- bne.s 5a3e <handleInput+0x188>
    5a38:	|        |   clr.w d0
    5a3a:	+--------|-- bra.w 5b14 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    5a3e:	|        \-> move.w 1ca42 <input+0x8>,d0
    5a44:	|        /-- beq.s 5a82 <handleInput+0x1cc>
    5a46:	|        |   movea.l 1c400 <currentEvents>,a0
    5a4c:	|        |   move.l 12(a0),d0
    5a50:	|        +-- beq.s 5a82 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5a52:	|        |   move.l 1ca58 <noStack>,d1
    5a58:	|        |   movea.l 1c400 <currentEvents>,a0
    5a5e:	|        |   move.l 12(a0),d0
    5a62:	|        |   pea 1 <_start+0x1>
    5a66:	|        |   move.l d1,-(sp)
    5a68:	|        |   clr.l -(sp)
    5a6a:	|        |   clr.l -(sp)
    5a6c:	|        |   move.l d0,-(sp)
    5a6e:	|        |   jsr 6b68 <startNewFunctionNum>
    5a74:	|        |   lea 20(sp),sp
    5a78:	|        |   tst.l d0
    5a7a:	|        +-- bne.s 5a82 <handleInput+0x1cc>
    5a7c:	|        |   clr.w d0
    5a7e:	+--------|-- bra.w 5b14 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    5a82:	|        \-> move.w 1ca3a <input>,d0
    5a88:	|        /-- beq.s 5ac0 <handleInput+0x20a>
    5a8a:	|        |   movea.l 1c400 <currentEvents>,a0
    5a90:	|        |   move.l (a0),d0
    5a92:	|        +-- beq.s 5ac0 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5a94:	|        |   move.l 1ca58 <noStack>,d1
    5a9a:	|        |   movea.l 1c400 <currentEvents>,a0
    5aa0:	|        |   move.l (a0),d0
    5aa2:	|        |   pea 1 <_start+0x1>
    5aa6:	|        |   move.l d1,-(sp)
    5aa8:	|        |   clr.l -(sp)
    5aaa:	|        |   clr.l -(sp)
    5aac:	|        |   move.l d0,-(sp)
    5aae:	|        |   jsr 6b68 <startNewFunctionNum>
    5ab4:	|        |   lea 20(sp),sp
    5ab8:	|        |   tst.l d0
    5aba:	|        +-- bne.s 5ac0 <handleInput+0x20a>
    5abc:	|        |   clr.w d0
    5abe:	+--------|-- bra.s 5b14 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    5ac0:	|        \-> move.w 1ca3c <input+0x2>,d0
    5ac6:	|        /-- beq.s 5b02 <handleInput+0x24c>
    5ac8:	|        |   movea.l 1c400 <currentEvents>,a0
    5ace:	|        |   move.l 8(a0),d0
    5ad2:	|        +-- beq.s 5b02 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5ad4:	|        |   move.l 1ca58 <noStack>,d1
    5ada:	|        |   movea.l 1c400 <currentEvents>,a0
    5ae0:	|        |   move.l 8(a0),d0
    5ae4:	|        |   pea 1 <_start+0x1>
    5ae8:	|        |   move.l d1,-(sp)
    5aea:	|        |   clr.l -(sp)
    5aec:	|        |   clr.l -(sp)
    5aee:	|        |   move.l d0,-(sp)
    5af0:	|        |   jsr 6b68 <startNewFunctionNum>
    5af6:	|        |   lea 20(sp),sp
    5afa:	|        |   tst.l d0
    5afc:	|        +-- bne.s 5b02 <handleInput+0x24c>
    5afe:	|        |   clr.w d0
    5b00:	+--------|-- bra.s 5b14 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    5b02:	|        \-> move.l 1cb9c <overRegion>,d0
    5b08:	|            move.l d0,1ca50 <lastRegion>
	return runSludge ();
    5b0e:	|            jsr 6936 <runSludge>
}
    5b14:	\----------> movea.l (sp)+,a6
    5b16:	             lea 16(sp),sp
    5b1a:	             rts

00005b1c <initSludge>:

BOOL initSludge (char * filename) {
    5b1c:	             lea -292(sp),sp
    5b20:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    5b24:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    5b28:	             jsr ae10 <makeNullAnim>
    5b2e:	             move.l d0,1c98e <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    5b34:	             pea 1ca32 <gameVersion>
    5b3a:	             pea 18a5a <PutChar+0xc7e>
    5b40:	             pea 45 <_start+0x45>
    5b44:	             pea 47 <_start+0x47>
    5b48:	             move.l 332(sp),-(sp)
    5b4c:	             jsr 656a <openAndVerify>
    5b52:	             lea 20(sp),sp
    5b56:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    5b5a:	         /-- bne.s 5b62 <initSludge+0x46>
    5b5c:	         |   clr.w d0
    5b5e:	/--------|-- bra.w 628a <initSludge+0x76e>
	if (FGetC (fp)) {
    5b62:	|        \-> move.l 288(sp),284(sp)
    5b68:	|            move.l 1ca90 <DOSBase>,d0
    5b6e:	|            movea.l d0,a6
    5b70:	|            move.l 284(sp),d1
    5b74:	|            jsr -306(a6)
    5b78:	|            move.l d0,280(sp)
    5b7c:	|            move.l 280(sp),d0
    5b80:	|  /-------- beq.w 5d2a <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    5b84:	|  |         move.l 288(sp),-(sp)
    5b88:	|  |         jsr 6bc <get2bytes>
    5b8e:	|  |         addq.l #4,sp
    5b90:	|  |         move.l d0,1ca5c <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    5b96:	|  |         move.l 1ca5c <numBIFNames>,d0
    5b9c:	|  |         move.l d0,276(sp)
    5ba0:	|  |         clr.l 272(sp)
    5ba4:	|  |         move.l 1ca88 <SysBase>,d0
    5baa:	|  |         movea.l d0,a6
    5bac:	|  |         move.l 276(sp),d0
    5bb0:	|  |         move.l 272(sp),d1
    5bb4:	|  |         jsr -684(a6)
    5bb8:	|  |         move.l d0,268(sp)
    5bbc:	|  |         move.l 268(sp),d0
    5bc0:	|  |         move.l d0,1ca18 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    5bc6:	|  |         move.l 1ca18 <allBIFNames>,d0
    5bcc:	|  |     /-- bne.s 5bd4 <initSludge+0xb8>
    5bce:	|  |     |   clr.w d0
    5bd0:	+--|-----|-- bra.w 628a <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5bd4:	|  |     \-> clr.l 304(sp)
    5bd8:	|  |     /-- bra.s 5bfe <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    5bda:	|  |  /--|-> move.l 1ca18 <allBIFNames>,d1
    5be0:	|  |  |  |   move.l 304(sp),d0
    5be4:	|  |  |  |   add.l d0,d0
    5be6:	|  |  |  |   add.l d0,d0
    5be8:	|  |  |  |   movea.l d1,a2
    5bea:	|  |  |  |   adda.l d0,a2
    5bec:	|  |  |  |   move.l 288(sp),-(sp)
    5bf0:	|  |  |  |   jsr b02 <readString>
    5bf6:	|  |  |  |   addq.l #4,sp
    5bf8:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5bfa:	|  |  |  |   addq.l #1,304(sp)
    5bfe:	|  |  |  \-> move.l 1ca5c <numBIFNames>,d0
    5c04:	|  |  |      cmp.l 304(sp),d0
    5c08:	|  |  \----- bgt.s 5bda <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5c0a:	|  |         move.l 288(sp),-(sp)
    5c0e:	|  |         jsr 6bc <get2bytes>
    5c14:	|  |         addq.l #4,sp
    5c16:	|  |         move.l d0,1ca68 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5c1c:	|  |         move.l 1ca68 <numUserFunc>,d0
    5c22:	|  |         move.l d0,264(sp)
    5c26:	|  |         clr.l 260(sp)
    5c2a:	|  |         move.l 1ca88 <SysBase>,d0
    5c30:	|  |         movea.l d0,a6
    5c32:	|  |         move.l 264(sp),d0
    5c36:	|  |         move.l 260(sp),d1
    5c3a:	|  |         jsr -684(a6)
    5c3e:	|  |         move.l d0,256(sp)
    5c42:	|  |         move.l 256(sp),d0
    5c46:	|  |         move.l d0,1ca24 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5c4c:	|  |         move.l 1ca24 <allUserFunc>,d0
    5c52:	|  |     /-- bne.s 5c5a <initSludge+0x13e>
    5c54:	|  |     |   clr.w d0
    5c56:	+--|-----|-- bra.w 628a <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    5c5a:	|  |     \-> clr.l 300(sp)
    5c5e:	|  |     /-- bra.s 5c84 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    5c60:	|  |  /--|-> move.l 1ca24 <allUserFunc>,d1
    5c66:	|  |  |  |   move.l 300(sp),d0
    5c6a:	|  |  |  |   add.l d0,d0
    5c6c:	|  |  |  |   add.l d0,d0
    5c6e:	|  |  |  |   movea.l d1,a2
    5c70:	|  |  |  |   adda.l d0,a2
    5c72:	|  |  |  |   move.l 288(sp),-(sp)
    5c76:	|  |  |  |   jsr b02 <readString>
    5c7c:	|  |  |  |   addq.l #4,sp
    5c7e:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    5c80:	|  |  |  |   addq.l #1,300(sp)
    5c84:	|  |  |  \-> move.l 1ca68 <numUserFunc>,d0
    5c8a:	|  |  |      cmp.l 300(sp),d0
    5c8e:	|  |  \----- bgt.s 5c60 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    5c90:	|  |         move.l 1ca32 <gameVersion>,d0
    5c96:	|  |         cmpi.l #258,d0
    5c9c:	|  +-------- ble.w 5d2a <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    5ca0:	|  |         move.l 288(sp),-(sp)
    5ca4:	|  |         jsr 6bc <get2bytes>
    5caa:	|  |         addq.l #4,sp
    5cac:	|  |         move.l d0,1ca64 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    5cb2:	|  |         move.l 1ca64 <numResourceNames>,d0
    5cb8:	|  |         add.l d0,d0
    5cba:	|  |         add.l d0,d0
    5cbc:	|  |         move.l d0,252(sp)
    5cc0:	|  |         clr.l 248(sp)
    5cc4:	|  |         move.l 1ca88 <SysBase>,d0
    5cca:	|  |         movea.l d0,a6
    5ccc:	|  |         move.l 252(sp),d0
    5cd0:	|  |         move.l 248(sp),d1
    5cd4:	|  |         jsr -684(a6)
    5cd8:	|  |         move.l d0,244(sp)
    5cdc:	|  |         move.l 244(sp),d0
    5ce0:	|  |         move.l d0,1ca1c <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    5ce6:	|  |         move.l 1ca1c <allResourceNames>,d0
    5cec:	|  |     /-- bne.s 5cf4 <initSludge+0x1d8>
    5cee:	|  |     |   clr.w d0
    5cf0:	+--|-----|-- bra.w 628a <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    5cf4:	|  |     \-> clr.l 296(sp)
    5cf8:	|  |     /-- bra.s 5d1e <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5cfa:	|  |  /--|-> move.l 1ca1c <allResourceNames>,d1
    5d00:	|  |  |  |   move.l 296(sp),d0
    5d04:	|  |  |  |   add.l d0,d0
    5d06:	|  |  |  |   add.l d0,d0
    5d08:	|  |  |  |   movea.l d1,a2
    5d0a:	|  |  |  |   adda.l d0,a2
    5d0c:	|  |  |  |   move.l 288(sp),-(sp)
    5d10:	|  |  |  |   jsr b02 <readString>
    5d16:	|  |  |  |   addq.l #4,sp
    5d18:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5d1a:	|  |  |  |   addq.l #1,296(sp)
    5d1e:	|  |  |  \-> move.l 1ca64 <numResourceNames>,d0
    5d24:	|  |  |      cmp.l 296(sp),d0
    5d28:	|  |  \----- bgt.s 5cfa <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5d2a:	|  \-------> move.l #129,1ca44 <input+0xa>
	input.mouseY = 100;
    5d34:	|            moveq #100,d0
    5d36:	|            move.l d0,1ca48 <input+0xe>
	winWidth = get2bytes (fp);
    5d3c:	|            move.l 288(sp),-(sp)
    5d40:	|            jsr 6bc <get2bytes>
    5d46:	|            addq.l #4,sp
    5d48:	|            move.l d0,1c9dc <winWidth>
	winHeight = get2bytes (fp);
    5d4e:	|            move.l 288(sp),-(sp)
    5d52:	|            jsr 6bc <get2bytes>
    5d58:	|            addq.l #4,sp
    5d5a:	|            move.l d0,1c9e0 <winHeight>
	specialSettings = FGetC (fp);
    5d60:	|            move.l 288(sp),240(sp)
    5d66:	|            move.l 1ca90 <DOSBase>,d0
    5d6c:	|            movea.l d0,a6
    5d6e:	|            move.l 240(sp),d1
    5d72:	|            jsr -306(a6)
    5d76:	|            move.l d0,236(sp)
    5d7a:	|            move.l 236(sp),d0
    5d7e:	|            move.l d0,1ca6c <specialSettings>

	desiredfps = 1000/FGetC (fp);
    5d84:	|            move.l 288(sp),232(sp)
    5d8a:	|            move.l 1ca90 <DOSBase>,d0
    5d90:	|            movea.l d0,a6
    5d92:	|            move.l 232(sp),d1
    5d96:	|            jsr -306(a6)
    5d9a:	|            move.l d0,228(sp)
    5d9e:	|            move.l 228(sp),d0
    5da2:	|            move.l d0,-(sp)
    5da4:	|            pea 3e8 <encodeFilename+0xea>
    5da8:	|            jsr 17d44 <__divsi3>
    5dae:	|            addq.l #8,sp
    5db0:	|            move.l d0,1c416 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    5db6:	|            move.l 288(sp),-(sp)
    5dba:	|            jsr b02 <readString>
    5dc0:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    5dc2:	|            move.l 288(sp),224(sp)
    5dc8:	|            move.l #117290,220(sp)
    5dd0:	|            moveq #8,d1
    5dd2:	|            move.l d1,216(sp)
    5dd6:	|            moveq #1,d0
    5dd8:	|            move.l d0,212(sp)
    5ddc:	|            move.l 1ca90 <DOSBase>,d0
    5de2:	|            movea.l d0,a6
    5de4:	|            move.l 224(sp),d1
    5de8:	|            move.l 220(sp),d2
    5dec:	|            move.l 216(sp),d3
    5df0:	|            move.l 212(sp),d4
    5df4:	|            jsr -324(a6)
    5df8:	|            move.l d0,208(sp)
    5dfc:	|            move.l 208(sp),d0
    5e00:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    5e04:	|            moveq #1,d1
    5e06:	|            cmp.l 204(sp),d1
    5e0a:	|        /-- beq.s 5e1a <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5e0c:	|        |   pea 18a93 <PutChar+0xcb7>
    5e12:	|        |   jsr 1733a <KPrintF>
    5e18:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5e1a:	|        \-> move.l 1ca32 <gameVersion>,d0
    5e20:	|            cmpi.l #258,d0
    5e26:	|        /-- ble.s 5e36 <initSludge+0x31a>
    5e28:	|        |   move.l 288(sp),-(sp)
    5e2c:	|        |   jsr b02 <readString>
    5e32:	|        |   addq.l #4,sp
    5e34:	|     /--|-- bra.s 5e4a <initSludge+0x32e>
    5e36:	|     |  \-> pea 18ab1 <PutChar+0xcd5>
    5e3c:	|     |      pea 18ab1 <PutChar+0xcd5>
    5e42:	|     |      jsr 13e06 <joinStrings>
    5e48:	|     |      addq.l #8,sp
    5e4a:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5e4e:	|            move.l 1ca32 <gameVersion>,d0
    5e54:	|            cmpi.l #258,d0
    5e5a:	|     /----- ble.s 5e7c <initSludge+0x360>
    5e5c:	|     |      move.l 288(sp),196(sp)
    5e62:	|     |      move.l 1ca90 <DOSBase>,d0
    5e68:	|     |      movea.l d0,a6
    5e6a:	|     |      move.l 196(sp),d1
    5e6e:	|     |      jsr -306(a6)
    5e72:	|     |      move.l d0,192(sp)
    5e76:	|     |      move.l 192(sp),d0
    5e7a:	|     |  /-- bra.s 5e7e <initSludge+0x362>
    5e7c:	|     \--|-> moveq #0,d0
    5e7e:	|        \-> move.l d0,1cb68 <gameSettings+0x4>
	makeLanguageTable (fp);
    5e84:	|            move.l 288(sp),-(sp)
    5e88:	|            jsr 137bc <makeLanguageTable>
    5e8e:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    5e90:	|            move.l 1ca32 <gameVersion>,d0
    5e96:	|            cmpi.l #261,d0
    5e9c:	|        /-- ble.s 5eea <initSludge+0x3ce>
	{
		FGetC(fp);
    5e9e:	|        |   move.l 288(sp),188(sp)
    5ea4:	|        |   move.l 1ca90 <DOSBase>,d0
    5eaa:	|        |   movea.l d0,a6
    5eac:	|        |   move.l 188(sp),d1
    5eb0:	|        |   jsr -306(a6)
    5eb4:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5eb8:	|        |   move.l 288(sp),180(sp)
    5ebe:	|        |   move.l 1ca90 <DOSBase>,d0
    5ec4:	|        |   movea.l d0,a6
    5ec6:	|        |   move.l 180(sp),d1
    5eca:	|        |   jsr -306(a6)
    5ece:	|        |   move.l d0,176(sp)
		getFloat (fp);
    5ed2:	|        |   move.l 288(sp),-(sp)
    5ed6:	|        |   jsr 7d8 <getFloat>
    5edc:	|        |   addq.l #4,sp
		getFloat (fp);
    5ede:	|        |   move.l 288(sp),-(sp)
    5ee2:	|        |   jsr 7d8 <getFloat>
    5ee8:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5eea:	|        \-> move.l 288(sp),-(sp)
    5eee:	|            jsr b02 <readString>
    5ef4:	|            addq.l #4,sp
    5ef6:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5efa:	|            pea 18ab2 <PutChar+0xcd6>
    5f00:	|            move.l 176(sp),-(sp)
    5f04:	|            jsr 13d86 <strcmp>
    5f0a:	|            addq.l #8,sp
    5f0c:	|            tst.l d0
    5f0e:	|        /-- beq.s 5f16 <initSludge+0x3fa>
		return FALSE;
    5f10:	|        |   clr.w d0
    5f12:	+--------|-- bra.w 628a <initSludge+0x76e>
	}
	FreeVec( checker);
    5f16:	|        \-> move.l 172(sp),168(sp)
    5f1c:	|            move.l 1ca88 <SysBase>,d0
    5f22:	|            movea.l d0,a6
    5f24:	|            movea.l 168(sp),a1
    5f28:	|            jsr -690(a6)
	checker = NULL;
    5f2c:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5f30:	|            move.l 288(sp),164(sp)
    5f36:	|            move.l 1ca90 <DOSBase>,d0
    5f3c:	|            movea.l d0,a6
    5f3e:	|            move.l 164(sp),d1
    5f42:	|            jsr -306(a6)
    5f46:	|            move.l d0,160(sp)
    5f4a:	|            move.l 160(sp),d0
    5f4e:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    5f52:	|            moveq #0,d0
    5f54:	|            move.b 159(sp),d0
    5f58:	|            moveq #1,d1
    5f5a:	|            and.l d1,d0
    5f5c:	|        /-- beq.s 5fb4 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    5f5e:	|        |   move.l 1ca90 <DOSBase>,d0
    5f64:	|        |   movea.l d0,a6
    5f66:	|        |   jsr -60(a6)
    5f6a:	|        |   move.l d0,38(sp)
    5f6e:	|        |   move.l 38(sp),d0
    5f72:	|        |   move.l d0,34(sp)
    5f76:	|        |   move.l #101050,30(sp)
    5f7e:	|        |   moveq #54,d0
    5f80:	|        |   move.l d0,26(sp)
    5f84:	|        |   move.l 1ca90 <DOSBase>,d0
    5f8a:	|        |   movea.l d0,a6
    5f8c:	|        |   move.l 34(sp),d1
    5f90:	|        |   move.l 30(sp),d2
    5f94:	|        |   move.l 26(sp),d3
    5f98:	|        |   jsr -48(a6)
    5f9c:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    5fa0:	|        |   pea 18af1 <PutChar+0xd15>
    5fa6:	|        |   jsr 1733a <KPrintF>
    5fac:	|        |   addq.l #4,sp
		return FALSE;
    5fae:	|        |   clr.w d0
    5fb0:	+--------|-- bra.w 628a <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    5fb4:	|        \-> move.l 288(sp),-(sp)
    5fb8:	|            jsr 6bc <get2bytes>
    5fbe:	|            addq.l #4,sp
    5fc0:	|            move.l d0,1ca60 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    5fc6:	|            move.l 1ca60 <numGlobals>,d0
    5fcc:	|            lsl.l #3,d0
    5fce:	|            move.l d0,154(sp)
    5fd2:	|            clr.l 150(sp)
    5fd6:	|            move.l 1ca88 <SysBase>,d0
    5fdc:	|            movea.l d0,a6
    5fde:	|            move.l 154(sp),d0
    5fe2:	|            move.l 150(sp),d1
    5fe6:	|            jsr -684(a6)
    5fea:	|            move.l d0,146(sp)
    5fee:	|            move.l 146(sp),d0
    5ff2:	|            move.l d0,1ca36 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    5ff8:	|            move.l 1ca36 <globalVars>,d0
    5ffe:	|        /-- bne.s 601c <initSludge+0x500>
    6000:	|        |   move.l 1ca60 <numGlobals>,d0
    6006:	|        +-- ble.s 601c <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    6008:	|        |   pea 18b29 <PutChar+0xd4d>
    600e:	|        |   jsr 1733a <KPrintF>
    6014:	|        |   addq.l #4,sp
		return FALSE;
    6016:	|        |   clr.w d0
    6018:	+--------|-- bra.w 628a <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    601c:	|        \-> clr.l 308(sp)
    6020:	|        /-- bra.s 6038 <initSludge+0x51c>
    6022:	|     /--|-> move.l 1ca36 <globalVars>,d1
    6028:	|     |  |   move.l 308(sp),d0
    602c:	|     |  |   lsl.l #3,d0
    602e:	|     |  |   movea.l d1,a0
    6030:	|     |  |   adda.l d0,a0
    6032:	|     |  |   clr.l (a0)
    6034:	|     |  |   addq.l #1,308(sp)
    6038:	|     |  \-> move.l 1ca60 <numGlobals>,d0
    603e:	|     |      cmp.l 308(sp),d0
    6042:	|     \----- bgt.s 6022 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6044:	|            move.l 1cb68 <gameSettings+0x4>,d0
    604a:	|            clr.l -(sp)
    604c:	|            move.l d0,-(sp)
    604e:	|            move.l 296(sp),-(sp)
    6052:	|            jsr 7058 <setFileIndices>
    6058:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    605c:	|            pea 1 <_start+0x1>
    6060:	|            jsr 6d12 <getNumberedString>
    6066:	|            addq.l #4,sp
    6068:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    606c:	|            move.l 142(sp),-(sp)
    6070:	|            jsr 2fe <encodeFilename>
    6076:	|            addq.l #4,sp
    6078:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    607c:	|            move.l 142(sp),134(sp)
    6082:	|            move.l 1ca88 <SysBase>,d0
    6088:	|            movea.l d0,a6
    608a:	|            movea.l 134(sp),a1
    608e:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6092:	|            move.l 138(sp),130(sp)
    6098:	|            move.l 1ca90 <DOSBase>,d0
    609e:	|            movea.l d0,a6
    60a0:	|            move.l 130(sp),d1
    60a4:	|            jsr -120(a6)
    60a8:	|            move.l d0,126(sp)
    60ac:	|            move.l 126(sp),d0
    60b0:	|            move.l d0,292(sp)
	if(lock == 0) {
    60b4:	|        /-- bne.s 60e2 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    60b6:	|        |   move.l 138(sp),122(sp)
    60bc:	|        |   moveq #-2,d1
    60be:	|        |   move.l d1,118(sp)
    60c2:	|        |   move.l 1ca90 <DOSBase>,d0
    60c8:	|        |   movea.l d0,a6
    60ca:	|        |   move.l 122(sp),d1
    60ce:	|        |   move.l 118(sp),d2
    60d2:	|        |   jsr -84(a6)
    60d6:	|        |   move.l d0,114(sp)
    60da:	|        |   move.l 114(sp),d0
    60de:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    60e2:	|        \-> move.l 292(sp),110(sp)
    60e8:	|            move.l 1ca90 <DOSBase>,d0
    60ee:	|            movea.l d0,a6
    60f0:	|            move.l 110(sp),d1
    60f4:	|            jsr -126(a6)
    60f8:	|            move.l d0,106(sp)
    60fc:	|            move.l 106(sp),d0
    6100:	|        /-- bne.s 615c <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6102:	|        |   move.l 138(sp),-(sp)
    6106:	|        |   pea 18b5c <PutChar+0xd80>
    610c:	|        |   jsr 1733a <KPrintF>
    6112:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6114:	|        |   move.l 1ca90 <DOSBase>,d0
    611a:	|        |   movea.l d0,a6
    611c:	|        |   jsr -60(a6)
    6120:	|        |   move.l d0,58(sp)
    6124:	|        |   move.l 58(sp),d0
    6128:	|        |   move.l d0,54(sp)
    612c:	|        |   move.l #101257,50(sp)
    6134:	|        |   moveq #40,d0
    6136:	|        |   move.l d0,46(sp)
    613a:	|        |   move.l 1ca90 <DOSBase>,d0
    6140:	|        |   movea.l d0,a6
    6142:	|        |   move.l 54(sp),d1
    6146:	|        |   move.l 50(sp),d2
    614a:	|        |   move.l 46(sp),d3
    614e:	|        |   jsr -48(a6)
    6152:	|        |   move.l d0,42(sp)
		return FALSE;
    6156:	|        |   clr.w d0
    6158:	+--------|-- bra.w 628a <initSludge+0x76e>
	}

	FreeVec(gameName);
    615c:	|        \-> move.l 138(sp),102(sp)
    6162:	|            move.l 1ca88 <SysBase>,d0
    6168:	|            movea.l d0,a6
    616a:	|            movea.l 102(sp),a1
    616e:	|            jsr -690(a6)

	readIniFile (filename);
    6172:	|            move.l 316(sp),-(sp)
    6176:	|            jsr 138f0 <readIniFile>
    617c:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    617e:	|            jsr 136c2 <getLanguageForFileB>
    6184:	|            move.l d0,1c404 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    618a:	|            move.l 1c404 <languageNum>,d0
    6190:	|        /-- bpl.s 61a0 <initSludge+0x684>
    6192:	|        |   pea 18bb2 <PutChar+0xdd6>
    6198:	|        |   jsr 1733a <KPrintF>
    619e:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    61a0:	|        \-> move.l 1c404 <languageNum>,d0
    61a6:	|            move.l d0,d1
    61a8:	|            move.l 1cb68 <gameSettings+0x4>,d0
    61ae:	|            move.l d1,-(sp)
    61b0:	|            move.l d0,-(sp)
    61b2:	|            clr.l -(sp)
    61b4:	|            jsr 7058 <setFileIndices>
    61ba:	|            lea 12(sp),sp

	if (dataFol[0]) {
    61be:	|            movea.l 200(sp),a0
    61c2:	|            move.b (a0),d0
    61c4:	|     /----- beq.w 626e <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    61c8:	|     |      move.l 200(sp),-(sp)
    61cc:	|     |      jsr 2fe <encodeFilename>
    61d2:	|     |      addq.l #4,sp
    61d4:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    61d8:	|     |      move.l 98(sp),94(sp)
    61de:	|     |      move.l 1ca90 <DOSBase>,d0
    61e4:	|     |      movea.l d0,a6
    61e6:	|     |      move.l 94(sp),d1
    61ea:	|     |      jsr -120(a6)
    61ee:	|     |      move.l d0,90(sp)
    61f2:	|     |      move.l 90(sp),d0
    61f6:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    61fa:	|     |  /-- bne.s 6228 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    61fc:	|     |  |   move.l 98(sp),86(sp)
    6202:	|     |  |   moveq #-2,d1
    6204:	|     |  |   move.l d1,82(sp)
    6208:	|     |  |   move.l 1ca90 <DOSBase>,d0
    620e:	|     |  |   movea.l d0,a6
    6210:	|     |  |   move.l 86(sp),d1
    6214:	|     |  |   move.l 82(sp),d2
    6218:	|     |  |   jsr -84(a6)
    621c:	|     |  |   move.l d0,78(sp)
    6220:	|     |  |   move.l 78(sp),d0
    6224:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6228:	|     |  \-> move.l 292(sp),74(sp)
    622e:	|     |      move.l 1ca90 <DOSBase>,d0
    6234:	|     |      movea.l d0,a6
    6236:	|     |      move.l 74(sp),d1
    623a:	|     |      jsr -126(a6)
    623e:	|     |      move.l d0,70(sp)
    6242:	|     |      move.l 70(sp),d0
    6246:	|     |  /-- bne.s 6258 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6248:	|     |  |   move.l 1ca90 <DOSBase>,d0
    624e:	|     |  |   movea.l d0,a6
    6250:	|     |  |   jsr -60(a6)
    6254:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6258:	|     |  \-> move.l 98(sp),62(sp)
    625e:	|     |      move.l 1ca88 <SysBase>,d0
    6264:	|     |      movea.l d0,a6
    6266:	|     |      movea.l 62(sp),a1
    626a:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    626e:	|     \----> movea.l 1c9e0 <winHeight>,a0
    6274:	|            lea -15(a0),a0
    6278:	|            move.l a0,d0
    627a:	|            move.l d0,-(sp)
    627c:	|            pea a <_start+0xa>
    6280:	|            jsr 7a98 <positionStatus>
    6286:	|            addq.l #8,sp

	return TRUE;
    6288:	|            moveq #1,d0
}
    628a:	\----------> movem.l (sp)+,d2-d4/a2/a6
    628e:	             lea 292(sp),sp
    6292:	             rts

00006294 <killSpeechTimers>:

void killSpeechTimers () {
    6294:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6296:	          move.l 1ca20 <allRunningFunctions>,(sp)

	while (thisFunction) {
    629c:	   /----- bra.s 62c8 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    629e:	/--|----> movea.l (sp),a0
    62a0:	|  |      move.b 56(a0),d0
    62a4:	|  |  /-- bne.s 62c2 <killSpeechTimers+0x2e>
    62a6:	|  |  |   movea.l (sp),a0
    62a8:	|  |  |   move.w 50(a0),d0
    62ac:	|  |  +-- beq.s 62c2 <killSpeechTimers+0x2e>
    62ae:	|  |  |   movea.l (sp),a0
    62b0:	|  |  |   move.l 12(a0),d0
    62b4:	|  |  +-- beq.s 62c2 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    62b6:	|  |  |   movea.l (sp),a0
    62b8:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    62bc:	|  |  |   movea.l (sp),a0
    62be:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    62c2:	|  |  \-> movea.l (sp),a0
    62c4:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    62c8:	|  \----> tst.l (sp)
    62ca:	\-------- bne.s 629e <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    62cc:	          jsr 7fd6 <killAllSpeech>
}
    62d2:	          nop
    62d4:	          addq.l #4,sp
    62d6:	          rts

000062d8 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    62d8:	             lea -52(sp),sp
    62dc:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    62de:	             movea.l 60(sp),a0
    62e2:	             move.l (a0),d0
    62e4:	             move.l d0,-(sp)
    62e6:	             jsr 6f98 <openSubSlice>
    62ec:	             addq.l #4,sp
    62ee:	             tst.w d0
    62f0:	         /-- bne.s 62f8 <loadFunctionCode+0x20>
    62f2:	         |   clr.w d0
    62f4:	/--------|-- bra.w 64c2 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    62f8:	|        \-> move.l 1ca70 <bigDataFile>,44(sp)
    6300:	|            move.l 1ca90 <DOSBase>,d0
    6306:	|            movea.l d0,a6
    6308:	|            move.l 44(sp),d1
    630c:	|            jsr -306(a6)
    6310:	|            move.l d0,40(sp)
    6314:	|            move.l 40(sp),d0
    6318:	|            move.l d0,d0
    631a:	|            movea.l 60(sp),a0
    631e:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6322:	|            move.l 1ca70 <bigDataFile>,d0
    6328:	|            move.l d0,-(sp)
    632a:	|            jsr 6bc <get2bytes>
    6330:	|            addq.l #4,sp
    6332:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    6336:	|            move.l 1ca70 <bigDataFile>,d0
    633c:	|            move.l d0,-(sp)
    633e:	|            jsr 6bc <get2bytes>
    6344:	|            addq.l #4,sp
    6346:	|            movea.l 60(sp),a0
    634a:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    634e:	|            move.l 1ca70 <bigDataFile>,d0
    6354:	|            move.l d0,-(sp)
    6356:	|            jsr 6bc <get2bytes>
    635c:	|            addq.l #4,sp
    635e:	|            movea.l 60(sp),a0
    6362:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6366:	|            move.l 36(sp),d0
    636a:	|            lsl.l #3,d0
    636c:	|            move.l d0,32(sp)
    6370:	|            clr.l 28(sp)
    6374:	|            move.l 1ca88 <SysBase>,d0
    637a:	|            movea.l d0,a6
    637c:	|            move.l 32(sp),d0
    6380:	|            move.l 28(sp),d1
    6384:	|            jsr -684(a6)
    6388:	|            move.l d0,24(sp)
    638c:	|            move.l 24(sp),d0
    6390:	|            movea.l 60(sp),a0
    6394:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6398:	|            movea.l 60(sp),a0
    639c:	|            move.l 4(a0),d0
    63a0:	|        /-- bne.s 63b6 <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    63a2:	|        |   pea 18bdd <PutChar+0xe01>
    63a8:	|        |   jsr 1733a <KPrintF>
    63ae:	|        |   addq.l #4,sp
		return FALSE;
    63b0:	|        |   clr.w d0
    63b2:	+--------|-- bra.w 64c2 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    63b6:	|        \-> clr.l 52(sp)
    63ba:	|        /-- bra.s 641c <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    63bc:	|     /--|-> move.l 1ca70 <bigDataFile>,8(sp)
    63c4:	|     |  |   move.l 1ca90 <DOSBase>,d0
    63ca:	|     |  |   movea.l d0,a6
    63cc:	|     |  |   move.l 8(sp),d1
    63d0:	|     |  |   jsr -306(a6)
    63d4:	|     |  |   move.l d0,4(sp)
    63d8:	|     |  |   move.l 4(sp),d1
    63dc:	|     |  |   movea.l 60(sp),a0
    63e0:	|     |  |   movea.l 4(a0),a0
    63e4:	|     |  |   move.l 52(sp),d0
    63e8:	|     |  |   lsl.l #3,d0
    63ea:	|     |  |   adda.l d0,a0
    63ec:	|     |  |   move.l d1,d0
    63ee:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    63f0:	|     |  |   move.l 1ca70 <bigDataFile>,d0
    63f6:	|     |  |   move.l d0,-(sp)
    63f8:	|     |  |   jsr 6bc <get2bytes>
    63fe:	|     |  |   addq.l #4,sp
    6400:	|     |  |   move.l d0,d1
    6402:	|     |  |   movea.l 60(sp),a0
    6406:	|     |  |   movea.l 4(a0),a0
    640a:	|     |  |   move.l 52(sp),d0
    640e:	|     |  |   lsl.l #3,d0
    6410:	|     |  |   adda.l d0,a0
    6412:	|     |  |   move.l d1,d0
    6414:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6418:	|     |  |   addq.l #1,52(sp)
    641c:	|     |  \-> move.l 52(sp),d0
    6420:	|     |      cmp.l 36(sp),d0
    6424:	|     \----- bcs.s 63bc <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6426:	|            jsr 6d08 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    642c:	|            movea.l 60(sp),a0
    6430:	|            move.l 8(a0),d0
    6434:	|  /-------- ble.w 64b8 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6438:	|  |         movea.l 60(sp),a0
    643c:	|  |         move.l 8(a0),d0
    6440:	|  |         lsl.l #3,d0
    6442:	|  |         move.l d0,20(sp)
    6446:	|  |         clr.l 16(sp)
    644a:	|  |         move.l 1ca88 <SysBase>,d0
    6450:	|  |         movea.l d0,a6
    6452:	|  |         move.l 20(sp),d0
    6456:	|  |         move.l 16(sp),d1
    645a:	|  |         jsr -684(a6)
    645e:	|  |         move.l d0,12(sp)
    6462:	|  |         move.l 12(sp),d0
    6466:	|  |         movea.l 60(sp),a0
    646a:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    646e:	|  |         movea.l 60(sp),a0
    6472:	|  |         move.l 20(a0),d0
    6476:	|  |     /-- bne.s 648a <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6478:	|  |     |   pea 18bdd <PutChar+0xe01>
    647e:	|  |     |   jsr 1733a <KPrintF>
    6484:	|  |     |   addq.l #4,sp
			return FALSE;
    6486:	|  |     |   clr.w d0
    6488:	+--|-----|-- bra.s 64c2 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    648a:	|  |     \-> clr.l 48(sp)
    648e:	|  |     /-- bra.s 64a8 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6490:	|  |  /--|-> movea.l 60(sp),a0
    6494:	|  |  |  |   move.l 20(a0),d1
    6498:	|  |  |  |   move.l 48(sp),d0
    649c:	|  |  |  |   lsl.l #3,d0
    649e:	|  |  |  |   movea.l d1,a0
    64a0:	|  |  |  |   adda.l d0,a0
    64a2:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    64a4:	|  |  |  |   addq.l #1,48(sp)
    64a8:	|  |  |  \-> movea.l 60(sp),a0
    64ac:	|  |  |      move.l 8(a0),d0
    64b0:	|  |  |      cmp.l 48(sp),d0
    64b4:	|  |  \----- bgt.s 6490 <loadFunctionCode+0x1b8>
    64b6:	|  |     /-- bra.s 64c0 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    64b8:	|  \-----|-> movea.l 60(sp),a0
    64bc:	|        |   clr.l 8(a0)
	}
	return TRUE;
    64c0:	|        \-> moveq #1,d0
}
    64c2:	\----------> movea.l (sp)+,a6
    64c4:	             lea 52(sp),sp
    64c8:	             rts

000064ca <loadHandlers>:

void loadHandlers (BPTR fp) {
    64ca:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    64cc:	movea.l 1c400 <currentEvents>,a2
    64d2:	move.l 8(sp),-(sp)
    64d6:	jsr 6bc <get2bytes>
    64dc:	addq.l #4,sp
    64de:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    64e0:	movea.l 1c400 <currentEvents>,a2
    64e6:	move.l 8(sp),-(sp)
    64ea:	jsr 6bc <get2bytes>
    64f0:	addq.l #4,sp
    64f2:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    64f6:	movea.l 1c400 <currentEvents>,a2
    64fc:	move.l 8(sp),-(sp)
    6500:	jsr 6bc <get2bytes>
    6506:	addq.l #4,sp
    6508:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    650c:	movea.l 1c400 <currentEvents>,a2
    6512:	move.l 8(sp),-(sp)
    6516:	jsr 6bc <get2bytes>
    651c:	addq.l #4,sp
    651e:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6522:	movea.l 1c400 <currentEvents>,a2
    6528:	move.l 8(sp),-(sp)
    652c:	jsr 6bc <get2bytes>
    6532:	addq.l #4,sp
    6534:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    6538:	movea.l 1c400 <currentEvents>,a2
    653e:	move.l 8(sp),-(sp)
    6542:	jsr 6bc <get2bytes>
    6548:	addq.l #4,sp
    654a:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    654e:	movea.l 1c400 <currentEvents>,a2
    6554:	move.l 8(sp),-(sp)
    6558:	jsr 6bc <get2bytes>
    655e:	addq.l #4,sp
    6560:	move.l d0,24(a2)
}
    6564:	nop
    6566:	movea.l (sp)+,a2
    6568:	rts

0000656a <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    656a:	       lea -312(sp),sp
    656e:	       movem.l d2-d3/a6,-(sp)
    6572:	       move.l 332(sp),d1
    6576:	       move.l 336(sp),d0
    657a:	       move.b d1,d1
    657c:	       move.b d1,16(sp)
    6580:	       move.b d0,d0
    6582:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6586:	       move.l 328(sp),318(sp)
    658c:	       move.l #1005,314(sp)
    6594:	       move.l 1ca90 <DOSBase>,d0
    659a:	       movea.l d0,a6
    659c:	       move.l 318(sp),d1
    65a0:	       move.l 314(sp),d2
    65a4:	       jsr -30(a6)
    65a8:	       move.l d0,310(sp)
    65ac:	       move.l 310(sp),d0
    65b0:	       move.l d0,306(sp)

	if (! fp) {
    65b4:	   /-- bne.s 6610 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    65b6:	   |   move.l 1ca90 <DOSBase>,d0
    65bc:	   |   movea.l d0,a6
    65be:	   |   jsr -60(a6)
    65c2:	   |   move.l d0,154(sp)
    65c6:	   |   move.l 154(sp),d0
    65ca:	   |   move.l d0,150(sp)
    65ce:	   |   move.l #101382,146(sp)
    65d6:	   |   moveq #31,d0
    65d8:	   |   move.l d0,142(sp)
    65dc:	   |   move.l 1ca90 <DOSBase>,d0
    65e2:	   |   movea.l d0,a6
    65e4:	   |   move.l 150(sp),d1
    65e8:	   |   move.l 146(sp),d2
    65ec:	   |   move.l 142(sp),d3
    65f0:	   |   jsr -48(a6)
    65f4:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    65f8:	   |   move.l 328(sp),-(sp)
    65fc:	   |   pea 18c26 <PutChar+0xe4a>
    6602:	   |   jsr 1733a <KPrintF>
    6608:	   |   addq.l #8,sp
		return NULL;
    660a:	   |   moveq #0,d0
    660c:	/--|-- bra.w 68d0 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    6610:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    6614:	|      move.l 306(sp),302(sp)
    661a:	|      move.l 1ca90 <DOSBase>,d0
    6620:	|      movea.l d0,a6
    6622:	|      move.l 302(sp),d1
    6626:	|      jsr -306(a6)
    662a:	|      move.l d0,298(sp)
    662e:	|      move.l 298(sp),d0
    6632:	|      moveq #83,d1
    6634:	|      cmp.l d0,d1
    6636:	|  /-- beq.s 663e <openAndVerify+0xd4>
    6638:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    663e:	|  \-> move.l 306(sp),294(sp)
    6644:	|      move.l 1ca90 <DOSBase>,d0
    664a:	|      movea.l d0,a6
    664c:	|      move.l 294(sp),d1
    6650:	|      jsr -306(a6)
    6654:	|      move.l d0,290(sp)
    6658:	|      move.l 290(sp),d0
    665c:	|      moveq #76,d1
    665e:	|      cmp.l d0,d1
    6660:	|  /-- beq.s 6668 <openAndVerify+0xfe>
    6662:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    6668:	|  \-> move.l 306(sp),286(sp)
    666e:	|      move.l 1ca90 <DOSBase>,d0
    6674:	|      movea.l d0,a6
    6676:	|      move.l 286(sp),d1
    667a:	|      jsr -306(a6)
    667e:	|      move.l d0,282(sp)
    6682:	|      move.l 282(sp),d0
    6686:	|      moveq #85,d1
    6688:	|      cmp.l d0,d1
    668a:	|  /-- beq.s 6692 <openAndVerify+0x128>
    668c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    6692:	|  \-> move.l 306(sp),278(sp)
    6698:	|      move.l 1ca90 <DOSBase>,d0
    669e:	|      movea.l d0,a6
    66a0:	|      move.l 278(sp),d1
    66a4:	|      jsr -306(a6)
    66a8:	|      move.l d0,274(sp)
    66ac:	|      move.l 274(sp),d0
    66b0:	|      moveq #68,d1
    66b2:	|      cmp.l d0,d1
    66b4:	|  /-- beq.s 66bc <openAndVerify+0x152>
    66b6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    66bc:	|  \-> move.l 306(sp),270(sp)
    66c2:	|      move.l 1ca90 <DOSBase>,d0
    66c8:	|      movea.l d0,a6
    66ca:	|      move.l 270(sp),d1
    66ce:	|      jsr -306(a6)
    66d2:	|      move.l d0,266(sp)
    66d6:	|      move.l 266(sp),d1
    66da:	|      move.b 16(sp),d0
    66de:	|      ext.w d0
    66e0:	|      movea.w d0,a0
    66e2:	|      cmpa.l d1,a0
    66e4:	|  /-- beq.s 66ec <openAndVerify+0x182>
    66e6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    66ec:	|  \-> move.l 306(sp),262(sp)
    66f2:	|      move.l 1ca90 <DOSBase>,d0
    66f8:	|      movea.l d0,a6
    66fa:	|      move.l 262(sp),d1
    66fe:	|      jsr -306(a6)
    6702:	|      move.l d0,258(sp)
    6706:	|      move.l 258(sp),d1
    670a:	|      move.b 14(sp),d0
    670e:	|      ext.w d0
    6710:	|      movea.w d0,a0
    6712:	|      cmpa.l d1,a0
    6714:	|  /-- beq.s 671c <openAndVerify+0x1b2>
    6716:	|  |   move.w #1,322(sp)
	if (headerBad) {
    671c:	|  \-> tst.w 322(sp)
    6720:	|  /-- beq.s 6778 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    6722:	|  |   move.l 1ca90 <DOSBase>,d0
    6728:	|  |   movea.l d0,a6
    672a:	|  |   jsr -60(a6)
    672e:	|  |   move.l d0,174(sp)
    6732:	|  |   move.l 174(sp),d0
    6736:	|  |   move.l d0,170(sp)
    673a:	|  |   move.l #101445,166(sp)
    6742:	|  |   moveq #31,d0
    6744:	|  |   move.l d0,162(sp)
    6748:	|  |   move.l 1ca90 <DOSBase>,d0
    674e:	|  |   movea.l d0,a6
    6750:	|  |   move.l 170(sp),d1
    6754:	|  |   move.l 166(sp),d2
    6758:	|  |   move.l 162(sp),d3
    675c:	|  |   jsr -48(a6)
    6760:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    6764:	|  |   pea 18c45 <PutChar+0xe69>
    676a:	|  |   jsr 1733a <KPrintF>
    6770:	|  |   addq.l #4,sp
		return NULL;
    6772:	|  |   moveq #0,d0
    6774:	+--|-- bra.w 68d0 <openAndVerify+0x366>
	}
	FGetC (fp);
    6778:	|  \-> move.l 306(sp),254(sp)
    677e:	|      move.l 1ca90 <DOSBase>,d0
    6784:	|      movea.l d0,a6
    6786:	|      move.l 254(sp),d1
    678a:	|      jsr -306(a6)
    678e:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    6792:	|      nop
    6794:	|  /-> move.l 306(sp),246(sp)
    679a:	|  |   move.l 1ca90 <DOSBase>,d0
    67a0:	|  |   movea.l d0,a6
    67a2:	|  |   move.l 246(sp),d1
    67a6:	|  |   jsr -306(a6)
    67aa:	|  |   move.l d0,242(sp)
    67ae:	|  |   move.l 242(sp),d0
    67b2:	|  \-- bne.s 6794 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    67b4:	|      move.l 306(sp),238(sp)
    67ba:	|      move.l 1ca90 <DOSBase>,d0
    67c0:	|      movea.l d0,a6
    67c2:	|      move.l 238(sp),d1
    67c6:	|      jsr -306(a6)
    67ca:	|      move.l d0,234(sp)
    67ce:	|      move.l 234(sp),d0
    67d2:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    67d6:	|      move.l 306(sp),226(sp)
    67dc:	|      move.l 1ca90 <DOSBase>,d0
    67e2:	|      movea.l d0,a6
    67e4:	|      move.l 226(sp),d1
    67e8:	|      jsr -306(a6)
    67ec:	|      move.l d0,222(sp)
    67f0:	|      move.l 222(sp),d0
    67f4:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    67f8:	|      move.l 230(sp),d0
    67fc:	|      lsl.l #8,d0
    67fe:	|      add.l 218(sp),d0
    6802:	|      movea.l 344(sp),a0
    6806:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    6808:	|      movea.l 344(sp),a0
    680c:	|      move.l (a0),d0
    680e:	|      cmpi.l #514,d0
    6814:	|  /-- ble.s 686a <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    6816:	|  |   move.l 1ca90 <DOSBase>,d0
    681c:	|  |   movea.l d0,a6
    681e:	|  |   jsr -60(a6)
    6822:	|  |   move.l d0,194(sp)
    6826:	|  |   move.l 194(sp),d0
    682a:	|  |   move.l d0,190(sp)
    682e:	|  |   move.l #101472,186(sp)
    6836:	|  |   moveq #100,d1
    6838:	|  |   move.l d1,182(sp)
    683c:	|  |   move.l 1ca90 <DOSBase>,d0
    6842:	|  |   movea.l d0,a6
    6844:	|  |   move.l 190(sp),d1
    6848:	|  |   move.l 186(sp),d2
    684c:	|  |   move.l 182(sp),d3
    6850:	|  |   jsr -48(a6)
    6854:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    6858:	|  |   pea 18c60 <PutChar+0xe84>
    685e:	|  |   jsr 1733a <KPrintF>
    6864:	|  |   addq.l #4,sp
		return NULL;
    6866:	|  |   moveq #0,d0
    6868:	+--|-- bra.s 68d0 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    686a:	|  \-> movea.l 344(sp),a0
    686e:	|      move.l (a0),d0
    6870:	|      cmpi.l #257,d0
    6876:	|  /-- bgt.s 68cc <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    6878:	|  |   move.l 1ca90 <DOSBase>,d0
    687e:	|  |   movea.l d0,a6
    6880:	|  |   jsr -60(a6)
    6884:	|  |   move.l d0,214(sp)
    6888:	|  |   move.l 214(sp),d0
    688c:	|  |   move.l d0,210(sp)
    6890:	|  |   move.l #101541,206(sp)
    6898:	|  |   moveq #100,d0
    689a:	|  |   move.l d0,202(sp)
    689e:	|  |   move.l 1ca90 <DOSBase>,d0
    68a4:	|  |   movea.l d0,a6
    68a6:	|  |   move.l 210(sp),d1
    68aa:	|  |   move.l 206(sp),d2
    68ae:	|  |   move.l 202(sp),d3
    68b2:	|  |   jsr -48(a6)
    68b6:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    68ba:	|  |   pea 18ca5 <PutChar+0xec9>
    68c0:	|  |   jsr 1733a <KPrintF>
    68c6:	|  |   addq.l #4,sp
		return NULL;
    68c8:	|  |   moveq #0,d0
    68ca:	+--|-- bra.s 68d0 <openAndVerify+0x366>
	}
	return fp;
    68cc:	|  \-> move.l 306(sp),d0
}
    68d0:	\----> movem.l (sp)+,d2-d3/a6
    68d4:	       lea 312(sp),sp
    68d8:	       rts

000068da <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    68da:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    68dc:	          move.l #117280,(sp)
	while (* huntAndDestroy) {
    68e2:	   /----- bra.s 690e <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    68e4:	/--|----> movea.l (sp),a0
    68e6:	|  |      move.l (a0),d0
    68e8:	|  |      cmp.l 8(sp),d0
    68ec:	|  |  /-- bne.s 6904 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    68ee:	|  |  |   movea.l (sp),a0
    68f0:	|  |  |   movea.l (a0),a0
    68f2:	|  |  |   move.l 44(a0),d0
    68f6:	|  |  |   movea.l (sp),a0
    68f8:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    68fa:	|  |  |   movea.l 8(sp),a0
    68fe:	|  |  |   clr.l 44(a0)
    6902:	|  +--|-- bra.s 690e <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    6904:	|  |  \-> movea.l (sp),a0
    6906:	|  |      move.l (a0),d0
    6908:	|  |      moveq #44,d1
    690a:	|  |      add.l d0,d1
    690c:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    690e:	|  \----> movea.l (sp),a0
    6910:	|         move.l (a0),d0
    6912:	\-------- bne.s 68e4 <pauseFunction+0xa>
		}
	}
}
    6914:	          nop
    6916:	          nop
    6918:	          addq.l #4,sp
    691a:	          rts

0000691c <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    691c:	move.l 1ca20 <allRunningFunctions>,d0
    6922:	movea.l 4(sp),a0
    6926:	move.l d0,44(a0)
	allRunningFunctions = fun;
    692a:	move.l 4(sp),1ca20 <allRunningFunctions>
}
    6932:	nop
    6934:	rts

00006936 <runSludge>:

BOOL runSludge () {
    6936:	                   lea -12(sp),sp
    693a:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    693c:	                   move.l 1ca20 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    6944:	      /----------- bra.s 69c0 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    6946:	   /--|----------> movea.l 12(sp),a0
    694a:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    6950:	   |  |            movea.l 12(sp),a0
    6954:	   |  |            move.b 56(a0),d0
    6958:	   |  |  /-------- bne.s 69ba <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    695a:	   |  |  |         movea.l 12(sp),a0
    695e:	   |  |  |         move.l 12(a0),d0
    6962:	   |  |  |  /----- beq.s 698c <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    6964:	   |  |  |  |      movea.l 12(sp),a0
    6968:	   |  |  |  |      move.l 12(a0),d0
    696c:	   |  |  |  |  /-- bpl.s 6978 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    696e:	   |  |  |  |  |   movea.l 12(sp),a0
    6972:	   |  |  |  |  |   clr.l 12(a0)
    6976:	   |  |  +--|--|-- bra.s 69ba <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    6978:	   |  |  |  |  \-> movea.l 12(sp),a0
    697c:	   |  |  |  |      move.l 12(a0),d0
    6980:	   |  |  |  |      subq.l #1,d0
    6982:	   |  |  |  |      movea.l 12(sp),a0
    6986:	   |  |  |  |      move.l d0,12(a0)
    698a:	   |  |  +--|----- bra.s 69ba <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    698c:	   |  |  |  \----> movea.l 12(sp),a0
    6990:	   |  |  |         move.w 50(a0),d0
    6994:	   |  |  |     /-- beq.s 69a4 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    6996:	   |  |  |     |   movea.l 12(sp),a0
    699a:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    699e:	   |  |  |     |   jsr 7fd6 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    69a4:	   |  |  |     \-> move.l 12(sp),-(sp)
    69a8:	   |  |  |         jsr 4904 <continueFunction>
    69ae:	   |  |  |         addq.l #4,sp
    69b0:	   |  |  |         tst.w d0
    69b2:	   |  |  +-------- bne.s 69ba <runSludge+0x84>
					return FALSE;
    69b4:	   |  |  |         clr.w d0
    69b6:	/--|--|--|-------- bra.w 6a46 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    69ba:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    69c0:	|  |  \----------> tst.l 12(sp)
    69c4:	|  \-------------- bne.s 6946 <runSludge+0x10>
	}

	if (loadNow) {
    69c6:	|                  move.l 1ca54 <loadNow>,d0
    69cc:	|        /-------- beq.s 6a44 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    69ce:	|        |         movea.l 1ca54 <loadNow>,a0
    69d4:	|        |         move.b (a0),d0
    69d6:	|        |         cmpi.b #58,d0
    69da:	|        |  /----- bne.s 6a0e <runSludge+0xd8>
			saveGame (loadNow + 1);
    69dc:	|        |  |      move.l 1ca54 <loadNow>,d0
    69e2:	|        |  |      addq.l #1,d0
    69e4:	|        |  |      move.l d0,-(sp)
    69e6:	|        |  |      jsr c866 <saveGame>
    69ec:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    69ee:	|        |  |      movea.l 1cb52 <saverFunc>,a0
    69f4:	|        |  |      lea 28(a0),a0
    69f8:	|        |  |      pea 1 <_start+0x1>
    69fc:	|        |  |      pea 1 <_start+0x1>
    6a00:	|        |  |      move.l a0,-(sp)
    6a02:	|        |  |      jsr 151cc <setVariable>
    6a08:	|        |  |      lea 12(sp),sp
    6a0c:	|        |  |  /-- bra.s 6a26 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    6a0e:	|        |  \--|-> move.l 1ca54 <loadNow>,d0
    6a14:	|        |     |   move.l d0,-(sp)
    6a16:	|        |     |   jsr c3ae <loadGame>
    6a1c:	|        |     |   addq.l #4,sp
    6a1e:	|        |     |   tst.w d0
    6a20:	|        |     +-- bne.s 6a26 <runSludge+0xf0>
    6a22:	|        |     |   clr.w d0
    6a24:	+--------|-----|-- bra.s 6a46 <runSludge+0x110>
		}
		FreeVec(loadNow);
    6a26:	|        |     \-> move.l 1ca54 <loadNow>,8(sp)
    6a2e:	|        |         move.l 1ca88 <SysBase>,d0
    6a34:	|        |         movea.l d0,a6
    6a36:	|        |         movea.l 8(sp),a1
    6a3a:	|        |         jsr -690(a6)
		loadNow = NULL;
    6a3e:	|        |         clr.l 1ca54 <loadNow>
	}

	return TRUE;
    6a44:	|        \-------> moveq #1,d0
}
    6a46:	\----------------> movea.l (sp)+,a6
    6a48:	                   lea 12(sp),sp
    6a4c:	                   rts

00006a4e <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    6a4e:	movea.l 1c400 <currentEvents>,a0
    6a54:	move.l (a0),d0
    6a56:	move.l 4(sp),-(sp)
    6a5a:	move.l d0,-(sp)
    6a5c:	jsr 8d0 <put2bytes>
    6a62:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    6a64:	movea.l 1c400 <currentEvents>,a0
    6a6a:	move.l 4(a0),d0
    6a6e:	move.l 4(sp),-(sp)
    6a72:	move.l d0,-(sp)
    6a74:	jsr 8d0 <put2bytes>
    6a7a:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    6a7c:	movea.l 1c400 <currentEvents>,a0
    6a82:	move.l 8(a0),d0
    6a86:	move.l 4(sp),-(sp)
    6a8a:	move.l d0,-(sp)
    6a8c:	jsr 8d0 <put2bytes>
    6a92:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    6a94:	movea.l 1c400 <currentEvents>,a0
    6a9a:	move.l 12(a0),d0
    6a9e:	move.l 4(sp),-(sp)
    6aa2:	move.l d0,-(sp)
    6aa4:	jsr 8d0 <put2bytes>
    6aaa:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    6aac:	movea.l 1c400 <currentEvents>,a0
    6ab2:	move.l 16(a0),d0
    6ab6:	move.l 4(sp),-(sp)
    6aba:	move.l d0,-(sp)
    6abc:	jsr 8d0 <put2bytes>
    6ac2:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    6ac4:	movea.l 1c400 <currentEvents>,a0
    6aca:	move.l 20(a0),d0
    6ace:	move.l 4(sp),-(sp)
    6ad2:	move.l d0,-(sp)
    6ad4:	jsr 8d0 <put2bytes>
    6ada:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    6adc:	movea.l 1c400 <currentEvents>,a0
    6ae2:	move.l 24(a0),d0
    6ae6:	move.l 4(sp),-(sp)
    6aea:	move.l d0,-(sp)
    6aec:	jsr 8d0 <put2bytes>
    6af2:	addq.l #8,sp
}
    6af4:	nop
    6af6:	rts

00006af8 <sludgeDisplay>:

void sludgeDisplay () {					
    6af8:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    6afa:	move.l #14675968,(sp)
	displayCursor();
    6b00:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    6b06:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    6b0c:	jsr 2b24 <CstRestoreScreen>
	drawPeople();
    6b12:	jsr a14a <drawPeople>
	CstSwapBuffer();
    6b18:	jsr 38ce <CstSwapBuffer>
}
    6b1e:	nop
    6b20:	addq.l #4,sp
    6b22:	rts

00006b24 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    6b24:	      /-- bra.s 6b44 <stackSetByIndex+0x20>
		vS = vS->next;
    6b26:	/-----|-> movea.l 4(sp),a0
    6b2a:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    6b30:	|     +-- bne.s 6b44 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    6b32:	|     |   pea 18cec <PutChar+0xf10>
    6b38:	|     |   jsr 1733a <KPrintF>
    6b3e:	|     |   addq.l #4,sp
			return FALSE;
    6b40:	|     |   clr.w d0
    6b42:	|  /--|-- bra.s 6b66 <stackSetByIndex+0x42>
	while (theIndex--) {
    6b44:	|  |  \-> move.l 8(sp),d0
    6b48:	|  |      move.l d0,d1
    6b4a:	|  |      subq.l #1,d1
    6b4c:	|  |      move.l d1,8(sp)
    6b50:	|  |      tst.l d0
    6b52:	\--|----- bne.s 6b26 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    6b54:	   |      move.l 4(sp),d0
    6b58:	   |      move.l d0,-(sp)
    6b5a:	   |      move.l 16(sp),-(sp)
    6b5e:	   |      jsr 14d94 <copyVariable>
    6b64:	   |      addq.l #8,sp
}
    6b66:	   \----> rts

00006b68 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    6b68:	             lea -24(sp),sp
    6b6c:	             move.l a6,-(sp)
    6b6e:	             move.l 48(sp),d0
    6b72:	             move.w d0,d0
    6b74:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    6b78:	             moveq #58,d0
    6b7a:	             move.l d0,24(sp)
    6b7e:	             clr.l 20(sp)
    6b82:	             move.l 1ca88 <SysBase>,d0
    6b88:	             movea.l d0,a6
    6b8a:	             move.l 24(sp),d0
    6b8e:	             move.l 20(sp),d1
    6b92:	             jsr -684(a6)
    6b96:	             move.l d0,16(sp)
    6b9a:	             move.l 16(sp),d0
    6b9e:	             move.l d0,12(sp)
	if(!newFunc) {
    6ba2:	         /-- bne.s 6bb8 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    6ba4:	         |   pea 18d05 <PutChar+0xf29>
    6baa:	         |   jsr 1733a <KPrintF>
    6bb0:	         |   addq.l #4,sp
		return 0;
    6bb2:	         |   moveq #0,d0
    6bb4:	/--------|-- bra.w 6cce <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    6bb8:	|        \-> move.l 32(sp),d0
    6bbc:	|            movea.l 12(sp),a0
    6bc0:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    6bc2:	|            move.l 12(sp),-(sp)
    6bc6:	|            jsr 62d8 <loadFunctionCode>
    6bcc:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    6bce:	|            movea.l 12(sp),a0
    6bd2:	|            move.l 16(a0),d1
    6bd6:	|            move.l 36(sp),d0
    6bda:	|            cmp.l d1,d0
    6bdc:	|        /-- beq.s 6bf2 <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    6bde:	|        |   pea 18d2e <PutChar+0xf52>
    6be4:	|        |   jsr 1733a <KPrintF>
    6bea:	|        |   addq.l #4,sp
		return NULL; 
    6bec:	|        |   moveq #0,d0
    6bee:	+--------|-- bra.w 6cce <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    6bf2:	|        \-> movea.l 12(sp),a0
    6bf6:	|            move.l 16(a0),d1
    6bfa:	|            movea.l 12(sp),a0
    6bfe:	|            move.l 8(a0),d0
    6c02:	|            cmp.l d1,d0
    6c04:	|  /-------- bge.s 6c6e <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    6c06:	|  |         pea 18d4a <PutChar+0xf6e>
    6c0c:	|  |         jsr 1733a <KPrintF>
    6c12:	|  |         addq.l #4,sp
		return NULL; 
    6c14:	|  |         moveq #0,d0
    6c16:	+--|-------- bra.w 6cce <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6c1a:	|  |  /----> movea.l 44(sp),a0
    6c1e:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    6c22:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    6c26:	|  |  |      movea.l 44(sp),a0
    6c2a:	|  |  |      move.l (a0),d0
    6c2c:	|  |  |  /-- bne.s 6c42 <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6c2e:	|  |  |  |   pea 18d74 <PutChar+0xf98>
    6c34:	|  |  |  |   jsr 1733a <KPrintF>
    6c3a:	|  |  |  |   addq.l #4,sp
			return NULL;
    6c3c:	|  |  |  |   moveq #0,d0
    6c3e:	+--|--|--|-- bra.w 6cce <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    6c42:	|  |  |  \-> movea.l 12(sp),a0
    6c46:	|  |  |      move.l 20(a0),d1
    6c4a:	|  |  |      move.l 36(sp),d0
    6c4e:	|  |  |      lsl.l #3,d0
    6c50:	|  |  |      add.l d0,d1
    6c52:	|  |  |      move.l 8(sp),d0
    6c56:	|  |  |      move.l d1,-(sp)
    6c58:	|  |  |      move.l d0,-(sp)
    6c5a:	|  |  |      jsr 14d94 <copyVariable>
    6c60:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    6c62:	|  |  |      move.l 44(sp),-(sp)
    6c66:	|  |  |      jsr 1525e <trimStack>
    6c6c:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    6c6e:	|  \--|----> tst.l 36(sp)
    6c72:	|     \----- bne.s 6c1a <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    6c74:	|            movea.l 12(sp),a0
    6c78:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    6c7c:	|            movea.l 12(sp),a0
    6c80:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    6c84:	|            movea.l 12(sp),a0
    6c88:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    6c8e:	|            movea.l 12(sp),a0
    6c92:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    6c98:	|            movea.l 12(sp),a0
    6c9c:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    6ca0:	|            movea.l 12(sp),a0
    6ca4:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    6ca8:	|            movea.l 12(sp),a0
    6cac:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    6cb0:	|            movea.l 12(sp),a0
    6cb4:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    6cb8:	|            movea.l 12(sp),a0
    6cbc:	|            clr.l 28(a0)

	restartFunction (newFunc);
    6cc0:	|            move.l 12(sp),-(sp)
    6cc4:	|            jsr 691c <restartFunction>
    6cca:	|            addq.l #4,sp
	return 1;
    6ccc:	|            moveq #1,d0
}
    6cce:	\----------> movea.l (sp)+,a6
    6cd0:	             lea 24(sp),sp
    6cd4:	             rts

00006cd6 <unfreezeSubs>:

void unfreezeSubs () {
    6cd6:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6cd8:	          move.l 1ca20 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6cde:	   /----- bra.s 6cfc <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    6ce0:	/--|----> movea.l (sp),a0
    6ce2:	|  |      move.b 56(a0),d0
    6ce6:	|  |  /-- beq.s 6cf6 <unfreezeSubs+0x20>
    6ce8:	|  |  |   movea.l (sp),a0
    6cea:	|  |  |   move.b 56(a0),d0
    6cee:	|  |  |   subq.b #1,d0
    6cf0:	|  |  |   movea.l (sp),a0
    6cf2:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    6cf6:	|  |  \-> movea.l (sp),a0
    6cf8:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6cfc:	|  \----> tst.l (sp)
    6cfe:	\-------- bne.s 6ce0 <unfreezeSubs+0xa>
	}
}
    6d00:	          nop
    6d02:	          nop
    6d04:	          addq.l #4,sp
    6d06:	          rts

00006d08 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6d08:	clr.w 1c40c <sliceBusy>
}
    6d0e:	nop
    6d10:	rts

00006d12 <getNumberedString>:

char * getNumberedString (int value) {
    6d12:	       lea -56(sp),sp
    6d16:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6d1a:	       move.w 1c40c <sliceBusy>,d0
    6d20:	   /-- beq.s 6d6a <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    6d22:	   |   move.l 1ca90 <DOSBase>,d0
    6d28:	   |   movea.l d0,a6
    6d2a:	   |   jsr -60(a6)
    6d2e:	   |   move.l d0,28(sp)
    6d32:	   |   move.l 28(sp),d0
    6d36:	   |   move.l d0,24(sp)
    6d3a:	   |   move.l #101823,20(sp)
    6d42:	   |   moveq #76,d0
    6d44:	   |   move.l d0,16(sp)
    6d48:	   |   move.l 1ca90 <DOSBase>,d0
    6d4e:	   |   movea.l d0,a6
    6d50:	   |   move.l 24(sp),d1
    6d54:	   |   move.l 20(sp),d2
    6d58:	   |   move.l 16(sp),d3
    6d5c:	   |   jsr -48(a6)
    6d60:	   |   move.l d0,12(sp)
		return NULL;
    6d64:	   |   moveq #0,d0
    6d66:	/--|-- bra.w 6e06 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    6d6a:	|  \-> move.l 1ca70 <bigDataFile>,64(sp)
    6d72:	|      move.l 72(sp),d0
    6d76:	|      add.l d0,d0
    6d78:	|      add.l d0,d0
    6d7a:	|      move.l d0,d1
    6d7c:	|      move.l 1ca7c <startOfTextIndex>,d0
    6d82:	|      add.l d1,d0
    6d84:	|      move.l d0,60(sp)
    6d88:	|      moveq #-1,d0
    6d8a:	|      move.l d0,56(sp)
    6d8e:	|      move.l 1ca90 <DOSBase>,d0
    6d94:	|      movea.l d0,a6
    6d96:	|      move.l 64(sp),d1
    6d9a:	|      move.l 60(sp),d2
    6d9e:	|      move.l 56(sp),d3
    6da2:	|      jsr -66(a6)
    6da6:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    6daa:	|      move.l 1ca70 <bigDataFile>,d0
    6db0:	|      move.l d0,-(sp)
    6db2:	|      jsr 718 <get4bytes>
    6db8:	|      addq.l #4,sp
    6dba:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    6dbe:	|      move.l 1ca70 <bigDataFile>,48(sp)
    6dc6:	|      move.l 72(sp),44(sp)
    6dcc:	|      moveq #-1,d0
    6dce:	|      move.l d0,40(sp)
    6dd2:	|      move.l 1ca90 <DOSBase>,d0
    6dd8:	|      movea.l d0,a6
    6dda:	|      move.l 48(sp),d1
    6dde:	|      move.l 44(sp),d2
    6de2:	|      move.l 40(sp),d3
    6de6:	|      jsr -66(a6)
    6dea:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6dee:	|      move.l 1ca70 <bigDataFile>,d0
    6df4:	|      move.l d0,-(sp)
    6df6:	|      jsr b02 <readString>
    6dfc:	|      addq.l #4,sp
    6dfe:	|      move.l d0,32(sp)
	
	return s;
    6e02:	|      move.l 32(sp),d0
}
    6e06:	\----> movem.l (sp)+,d2-d3/a6
    6e0a:	       lea 56(sp),sp
    6e0e:	       rts

00006e10 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6e10:	       lea -32(sp),sp
    6e14:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6e18:	       move.w 1c40c <sliceBusy>,d0
    6e1e:	   /-- beq.s 6e3a <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6e20:	   |   pea 18e0c <PutChar+0x1030>
    6e26:	   |   pea 18e2a <PutChar+0x104e>
    6e2c:	   |   jsr 1733a <KPrintF>
    6e32:	   |   addq.l #8,sp
		return 0;
    6e34:	   |   moveq #0,d0
    6e36:	/--|-- bra.w 6ece <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6e3a:	|  \-> move.l 1ca70 <bigDataFile>,40(sp)
    6e42:	|      move.l 48(sp),d0
    6e46:	|      add.l d0,d0
    6e48:	|      add.l d0,d0
    6e4a:	|      move.l d0,d1
    6e4c:	|      move.l 1ca78 <startOfDataIndex>,d0
    6e52:	|      add.l d1,d0
    6e54:	|      move.l d0,36(sp)
    6e58:	|      moveq #-1,d0
    6e5a:	|      move.l d0,32(sp)
    6e5e:	|      move.l 1ca90 <DOSBase>,d0
    6e64:	|      movea.l d0,a6
    6e66:	|      move.l 40(sp),d1
    6e6a:	|      move.l 36(sp),d2
    6e6e:	|      move.l 32(sp),d3
    6e72:	|      jsr -66(a6)
    6e76:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    6e7a:	|      move.l 1ca70 <bigDataFile>,24(sp)
    6e82:	|      move.l 1ca70 <bigDataFile>,d0
    6e88:	|      move.l d0,-(sp)
    6e8a:	|      jsr 718 <get4bytes>
    6e90:	|      addq.l #4,sp
    6e92:	|      move.l d0,20(sp)
    6e96:	|      clr.l 16(sp)
    6e9a:	|      move.l 1ca90 <DOSBase>,d0
    6ea0:	|      movea.l d0,a6
    6ea2:	|      move.l 24(sp),d1
    6ea6:	|      move.l 20(sp),d2
    6eaa:	|      move.l 16(sp),d3
    6eae:	|      jsr -66(a6)
    6eb2:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    6eb6:	|      move.w #1,1c40c <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6ebe:	|      move.l 1ca70 <bigDataFile>,d0
    6ec4:	|      move.l d0,-(sp)
    6ec6:	|      jsr 718 <get4bytes>
    6ecc:	|      addq.l #4,sp
}
    6ece:	\----> movem.l (sp)+,d2-d3/a6
    6ed2:	       lea 32(sp),sp
    6ed6:	       rts

00006ed8 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6ed8:	       lea -32(sp),sp
    6edc:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6ee0:	       move.w 1c40c <sliceBusy>,d0
    6ee6:	   /-- beq.s 6f02 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6ee8:	   |   pea 18e0c <PutChar+0x1030>
    6eee:	   |   pea 18e2a <PutChar+0x104e>
    6ef4:	   |   jsr 1733a <KPrintF>
    6efa:	   |   addq.l #8,sp
        return FALSE;
    6efc:	   |   clr.w d0
    6efe:	/--|-- bra.w 6f8e <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    6f02:	|  \-> move.l 1ca70 <bigDataFile>,40(sp)
    6f0a:	|      move.l 48(sp),d0
    6f0e:	|      add.l d0,d0
    6f10:	|      add.l d0,d0
    6f12:	|      move.l d0,d1
    6f14:	|      move.l 1ca84 <startOfObjectIndex>,d0
    6f1a:	|      add.l d1,d0
    6f1c:	|      move.l d0,36(sp)
    6f20:	|      moveq #-1,d0
    6f22:	|      move.l d0,32(sp)
    6f26:	|      move.l 1ca90 <DOSBase>,d0
    6f2c:	|      movea.l d0,a6
    6f2e:	|      move.l 40(sp),d1
    6f32:	|      move.l 36(sp),d2
    6f36:	|      move.l 32(sp),d3
    6f3a:	|      jsr -66(a6)
    6f3e:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    6f42:	|      move.l 1ca70 <bigDataFile>,24(sp)
    6f4a:	|      move.l 1ca70 <bigDataFile>,d0
    6f50:	|      move.l d0,-(sp)
    6f52:	|      jsr 718 <get4bytes>
    6f58:	|      addq.l #4,sp
    6f5a:	|      move.l d0,20(sp)
    6f5e:	|      moveq #-1,d0
    6f60:	|      move.l d0,16(sp)
    6f64:	|      move.l 1ca90 <DOSBase>,d0
    6f6a:	|      movea.l d0,a6
    6f6c:	|      move.l 24(sp),d1
    6f70:	|      move.l 20(sp),d2
    6f74:	|      move.l 16(sp),d3
    6f78:	|      jsr -66(a6)
    6f7c:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    6f80:	|      move.w #1,1c40c <sliceBusy>
    6f88:	|      move.w 1c40c <sliceBusy>,d0
}
    6f8e:	\----> movem.l (sp)+,d2-d3/a6
    6f92:	       lea 32(sp),sp
    6f96:	       rts

00006f98 <openSubSlice>:

BOOL openSubSlice (int num) {
    6f98:	       lea -32(sp),sp
    6f9c:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    6fa0:	       move.w 1c40c <sliceBusy>,d0
    6fa6:	   /-- beq.s 6fc2 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6fa8:	   |   pea 18e0c <PutChar+0x1030>
    6fae:	   |   pea 18e2a <PutChar+0x104e>
    6fb4:	   |   jsr 1733a <KPrintF>
    6fba:	   |   addq.l #8,sp
		return FALSE;
    6fbc:	   |   clr.w d0
    6fbe:	/--|-- bra.w 704e <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    6fc2:	|  \-> move.l 1ca70 <bigDataFile>,40(sp)
    6fca:	|      move.l 48(sp),d0
    6fce:	|      add.l d0,d0
    6fd0:	|      add.l d0,d0
    6fd2:	|      move.l d0,d1
    6fd4:	|      move.l 1ca80 <startOfSubIndex>,d0
    6fda:	|      add.l d1,d0
    6fdc:	|      move.l d0,36(sp)
    6fe0:	|      moveq #-1,d0
    6fe2:	|      move.l d0,32(sp)
    6fe6:	|      move.l 1ca90 <DOSBase>,d0
    6fec:	|      movea.l d0,a6
    6fee:	|      move.l 40(sp),d1
    6ff2:	|      move.l 36(sp),d2
    6ff6:	|      move.l 32(sp),d3
    6ffa:	|      jsr -66(a6)
    6ffe:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    7002:	|      move.l 1ca70 <bigDataFile>,24(sp)
    700a:	|      move.l 1ca70 <bigDataFile>,d0
    7010:	|      move.l d0,-(sp)
    7012:	|      jsr 718 <get4bytes>
    7018:	|      addq.l #4,sp
    701a:	|      move.l d0,20(sp)
    701e:	|      moveq #-1,d0
    7020:	|      move.l d0,16(sp)
    7024:	|      move.l 1ca90 <DOSBase>,d0
    702a:	|      movea.l d0,a6
    702c:	|      move.l 24(sp),d1
    7030:	|      move.l 20(sp),d2
    7034:	|      move.l 16(sp),d3
    7038:	|      jsr -66(a6)
    703c:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    7040:	|      move.w #1,1c40c <sliceBusy>
    7048:	|      move.w 1c40c <sliceBusy>,d0
}
    704e:	\----> movem.l (sp)+,d2-d3/a6
    7052:	       lea 32(sp),sp
    7056:	       rts

00007058 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7058:	       lea -180(sp),sp
    705c:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7060:	       tst.l 196(sp)
    7064:	/----- beq.s 70a4 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7066:	|      move.l 196(sp),1ca70 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    706e:	|      move.l 196(sp),168(sp)
    7074:	|      clr.l 164(sp)
    7078:	|      clr.l 160(sp)
    707c:	|      move.l 1ca90 <DOSBase>,d0
    7082:	|      movea.l d0,a6
    7084:	|      move.l 168(sp),d1
    7088:	|      move.l 164(sp),d2
    708c:	|      move.l 160(sp),d3
    7090:	|      jsr -66(a6)
    7094:	|      move.l d0,156(sp)
    7098:	|      move.l 156(sp),d0
    709c:	|      move.l d0,1ca74 <startIndex>
    70a2:	|  /-- bra.s 70de <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    70a4:	\--|-> move.l 1ca70 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    70ac:	   |   move.l 196(sp),184(sp)
    70b2:	   |   move.l 1ca74 <startIndex>,d0
    70b8:	   |   move.l d0,180(sp)
    70bc:	   |   moveq #-1,d0
    70be:	   |   move.l d0,176(sp)
    70c2:	   |   move.l 1ca90 <DOSBase>,d0
    70c8:	   |   movea.l d0,a6
    70ca:	   |   move.l 184(sp),d1
    70ce:	   |   move.l 180(sp),d2
    70d2:	   |   move.l 176(sp),d3
    70d6:	   |   jsr -66(a6)
    70da:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    70de:	   \-> clr.w 1c40c <sliceBusy>

	if (skipBefore > numLanguages) {
    70e4:	       move.l 204(sp),d0
    70e8:	       cmp.l 200(sp),d0
    70ec:	   /-- bls.s 7100 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    70ee:	   |   pea 18e44 <PutChar+0x1068>
    70f4:	   |   jsr 1733a <KPrintF>
    70fa:	   |   addq.l #4,sp
		skipBefore = 0;
    70fc:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    7100:	   \-> move.l 200(sp),d0
    7104:	       sub.l 204(sp),d0
    7108:	       move.l d0,188(sp)
	while (skipBefore) {
    710c:	   /-- bra.s 714a <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    710e:	/--|-> move.l 196(sp),24(sp)
    7114:	|  |   move.l 196(sp),-(sp)
    7118:	|  |   jsr 718 <get4bytes>
    711e:	|  |   addq.l #4,sp
    7120:	|  |   move.l d0,20(sp)
    7124:	|  |   moveq #-1,d0
    7126:	|  |   move.l d0,16(sp)
    712a:	|  |   move.l 1ca90 <DOSBase>,d0
    7130:	|  |   movea.l d0,a6
    7132:	|  |   move.l 24(sp),d1
    7136:	|  |   move.l 20(sp),d2
    713a:	|  |   move.l 16(sp),d3
    713e:	|  |   jsr -66(a6)
    7142:	|  |   move.l d0,12(sp)
		skipBefore --;
    7146:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    714a:	|  \-> tst.l 204(sp)
    714e:	\----- bne.s 710e <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7150:	       move.l 196(sp),152(sp)
    7156:	       clr.l 148(sp)
    715a:	       clr.l 144(sp)
    715e:	       move.l 1ca90 <DOSBase>,d0
    7164:	       movea.l d0,a6
    7166:	       move.l 152(sp),d1
    716a:	       move.l 148(sp),d2
    716e:	       move.l 144(sp),d3
    7172:	       jsr -66(a6)
    7176:	       move.l d0,140(sp)
    717a:	       move.l 140(sp),d0
    717e:	       addq.l #4,d0
    7180:	       move.l d0,1ca7c <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7186:	       move.l 196(sp),136(sp)
    718c:	       move.l 196(sp),-(sp)
    7190:	       jsr 718 <get4bytes>
    7196:	       addq.l #4,sp
    7198:	       move.l d0,132(sp)
    719c:	       moveq #-1,d0
    719e:	       move.l d0,128(sp)
    71a2:	       move.l 1ca90 <DOSBase>,d0
    71a8:	       movea.l d0,a6
    71aa:	       move.l 136(sp),d1
    71ae:	       move.l 132(sp),d2
    71b2:	       move.l 128(sp),d3
    71b6:	       jsr -66(a6)
    71ba:	       move.l d0,124(sp)

	while (skipAfter) {
    71be:	   /-- bra.s 71fc <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    71c0:	/--|-> move.l 196(sp),40(sp)
    71c6:	|  |   move.l 196(sp),-(sp)
    71ca:	|  |   jsr 718 <get4bytes>
    71d0:	|  |   addq.l #4,sp
    71d2:	|  |   move.l d0,36(sp)
    71d6:	|  |   moveq #-1,d0
    71d8:	|  |   move.l d0,32(sp)
    71dc:	|  |   move.l 1ca90 <DOSBase>,d0
    71e2:	|  |   movea.l d0,a6
    71e4:	|  |   move.l 40(sp),d1
    71e8:	|  |   move.l 36(sp),d2
    71ec:	|  |   move.l 32(sp),d3
    71f0:	|  |   jsr -66(a6)
    71f4:	|  |   move.l d0,28(sp)
		skipAfter --;
    71f8:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    71fc:	|  \-> tst.l 188(sp)
    7200:	\----- bne.s 71c0 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7202:	       move.l 196(sp),120(sp)
    7208:	       clr.l 116(sp)
    720c:	       clr.l 112(sp)
    7210:	       move.l 1ca90 <DOSBase>,d0
    7216:	       movea.l d0,a6
    7218:	       move.l 120(sp),d1
    721c:	       move.l 116(sp),d2
    7220:	       move.l 112(sp),d3
    7224:	       jsr -66(a6)
    7228:	       move.l d0,108(sp)
    722c:	       move.l 108(sp),d0
    7230:	       addq.l #4,d0
    7232:	       move.l d0,1ca80 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    7238:	       move.l 196(sp),104(sp)
    723e:	       move.l 196(sp),-(sp)
    7242:	       jsr 718 <get4bytes>
    7248:	       addq.l #4,sp
    724a:	       move.l d0,100(sp)
    724e:	       clr.l 96(sp)
    7252:	       move.l 1ca90 <DOSBase>,d0
    7258:	       movea.l d0,a6
    725a:	       move.l 104(sp),d1
    725e:	       move.l 100(sp),d2
    7262:	       move.l 96(sp),d3
    7266:	       jsr -66(a6)
    726a:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    726e:	       move.l 196(sp),88(sp)
    7274:	       clr.l 84(sp)
    7278:	       clr.l 80(sp)
    727c:	       move.l 1ca90 <DOSBase>,d0
    7282:	       movea.l d0,a6
    7284:	       move.l 88(sp),d1
    7288:	       move.l 84(sp),d2
    728c:	       move.l 80(sp),d3
    7290:	       jsr -66(a6)
    7294:	       move.l d0,76(sp)
    7298:	       move.l 76(sp),d0
    729c:	       addq.l #4,d0
    729e:	       move.l d0,1ca84 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    72a4:	       move.l 196(sp),72(sp)
    72aa:	       move.l 196(sp),-(sp)
    72ae:	       jsr 718 <get4bytes>
    72b4:	       addq.l #4,sp
    72b6:	       move.l d0,68(sp)
    72ba:	       clr.l 64(sp)
    72be:	       move.l 1ca90 <DOSBase>,d0
    72c4:	       movea.l d0,a6
    72c6:	       move.l 72(sp),d1
    72ca:	       move.l 68(sp),d2
    72ce:	       move.l 64(sp),d3
    72d2:	       jsr -66(a6)
    72d6:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    72da:	       move.l 196(sp),56(sp)
    72e0:	       clr.l 52(sp)
    72e4:	       clr.l 48(sp)
    72e8:	       move.l 1ca90 <DOSBase>,d0
    72ee:	       movea.l d0,a6
    72f0:	       move.l 56(sp),d1
    72f4:	       move.l 52(sp),d2
    72f8:	       move.l 48(sp),d3
    72fc:	       jsr -66(a6)
    7300:	       move.l d0,44(sp)
    7304:	       move.l 44(sp),d0
    7308:	       move.l d0,1ca78 <startOfDataIndex>
    730e:	       nop
    7310:	       movem.l (sp)+,d2-d3/a6
    7314:	       lea 180(sp),sp
    7318:	       rts

0000731a <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    731a:	    lea -20(sp),sp
    731e:	    move.l a6,-(sp)
    7320:	    move.l d7,-(sp)
	APTR vbr = 0;
    7322:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    7326:	    move.w #20090,10(sp)
    732c:	    move.w #2049,12(sp)
    7332:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    7338:	    movea.l 1ca88 <SysBase>,a0
    733e:	    move.w 296(a0),d0
    7342:	    move.w d0,d0
    7344:	    andi.l #65535,d0
    734a:	    moveq #1,d1
    734c:	    and.l d1,d0
    734e:	/-- beq.s 737c <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    7350:	|   lea 28(sp),a0
    7354:	|   lea -18(a0),a0
    7358:	|   move.l a0,20(sp)
    735c:	|   move.l 1ca88 <SysBase>,d0
    7362:	|   movea.l d0,a6
    7364:	|   move.l 20(sp),d7
    7368:	|   exg d7,a5
    736a:	|   jsr -30(a6)
    736e:	|   exg d7,a5
    7370:	|   move.l d0,16(sp)
    7374:	|   move.l 16(sp),d0
    7378:	|   move.l d0,24(sp)

	return vbr;
    737c:	\-> move.l 24(sp),d0
}
    7380:	    move.l (sp)+,d7
    7382:	    movea.l (sp)+,a6
    7384:	    lea 20(sp),sp
    7388:	    rts

0000738a <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    738a:	movea.l 1caae <VBR>,a0
    7390:	lea 108(a0),a0
    7394:	move.l 4(sp),(a0)
}
    7398:	nop
    739a:	rts

0000739c <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    739c:	movea.l 1caae <VBR>,a0
    73a2:	move.l 108(a0),d0
}
    73a6:	rts

000073a8 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    73a8:	       subq.l #8,sp
    73aa:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    73ac:	       pea 18e8d <PutChar+0x10b1>
    73b2:	       jsr 1733a <KPrintF>
    73b8:	       addq.l #4,sp
	Forbid();
    73ba:	       move.l 1ca88 <SysBase>,d0
    73c0:	       movea.l d0,a6
    73c2:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    73c6:	       pea 18ea5 <PutChar+0x10c9>
    73cc:	       jsr 1733a <KPrintF>
    73d2:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    73d4:	       movea.l 1ca8c <custom>,a0
    73da:	       move.w 16(a0),d0
    73de:	       move.w d0,1caac <SystemADKCON>
	SystemInts=custom->intenar;
    73e4:	       movea.l 1ca8c <custom>,a0
    73ea:	       move.w 28(a0),d0
    73ee:	       move.w d0,1caa8 <SystemInts>
	SystemDMA=custom->dmaconr;
    73f4:	       movea.l 1ca8c <custom>,a0
    73fa:	       move.w 2(a0),d0
    73fe:	       move.w d0,1caaa <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7404:	       movea.l 1ca94 <GfxBase>,a0
    740a:	       move.l 34(a0),d0
    740e:	       move.l d0,1cab6 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    7414:	       pea 18ec3 <PutChar+0x10e7>
    741a:	       jsr 1733a <KPrintF>
    7420:	       addq.l #4,sp
	LoadView(0);
    7422:	       clr.l 4(sp)
    7426:	       move.l 1ca94 <GfxBase>,d0
    742c:	       movea.l d0,a6
    742e:	       movea.l 4(sp),a1
    7432:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    7436:	       pea 18ed9 <PutChar+0x10fd>
    743c:	       jsr 1733a <KPrintF>
    7442:	       addq.l #4,sp
	WaitTOF();
    7444:	       move.l 1ca94 <GfxBase>,d0
    744a:	       movea.l d0,a6
    744c:	       jsr -270(a6)
	WaitTOF();
    7450:	       move.l 1ca94 <GfxBase>,d0
    7456:	       movea.l d0,a6
    7458:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    745c:	       pea 18eee <PutChar+0x1112>
    7462:	       jsr 1733a <KPrintF>
    7468:	       addq.l #4,sp
	WaitVbl();
    746a:	       jsr 1726e <WaitVbl>
	WaitVbl();
    7470:	       jsr 1726e <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7476:	       pea 18f03 <PutChar+0x1127>
    747c:	       jsr 1733a <KPrintF>
    7482:	       addq.l #4,sp
	OwnBlitter();
    7484:	       move.l 1ca94 <GfxBase>,d0
    748a:	       movea.l d0,a6
    748c:	       jsr -456(a6)
	WaitBlit();	
    7490:	       move.l 1ca94 <GfxBase>,d0
    7496:	       movea.l d0,a6
    7498:	       jsr -228(a6)
	Disable();
    749c:	       move.l 1ca88 <SysBase>,d0
    74a2:	       movea.l d0,a6
    74a4:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    74a8:	       pea 18f24 <PutChar+0x1148>
    74ae:	       jsr 1733a <KPrintF>
    74b4:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    74b6:	       movea.l 1ca8c <custom>,a0
    74bc:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    74c2:	       pea 18f3b <PutChar+0x115f>
    74c8:	       jsr 1733a <KPrintF>
    74ce:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    74d0:	       clr.l 8(sp)
    74d4:	   /-- bra.s 74f2 <TakeSystem+0x14a>
		custom->color[a]=0;
    74d6:	/--|-> movea.l 1ca8c <custom>,a0
    74dc:	|  |   move.l 8(sp),d0
    74e0:	|  |   addi.l #192,d0
    74e6:	|  |   add.l d0,d0
    74e8:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    74ee:	|  |   addq.l #1,8(sp)
    74f2:	|  \-> moveq #31,d0
    74f4:	|      cmp.l 8(sp),d0
    74f8:	\----- bge.s 74d6 <TakeSystem+0x12e>

	WaitVbl();
    74fa:	       jsr 1726e <WaitVbl>
	WaitVbl();
    7500:	       jsr 1726e <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    7506:	       pea 18f60 <PutChar+0x1184>
    750c:	       jsr 1733a <KPrintF>
    7512:	       addq.l #4,sp
	VBR=GetVBR();
    7514:	       jsr 731a <GetVBR>
    751a:	       move.l d0,1caae <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    7520:	       jsr 739c <GetInterruptHandler>
    7526:	       move.l d0,1cab2 <SystemIrq>
}
    752c:	       nop
    752e:	       movea.l (sp)+,a6
    7530:	       addq.l #8,sp
    7532:	       rts

00007534 <FreeSystem>:

void FreeSystem() { 
    7534:	subq.l #4,sp
    7536:	move.l a6,-(sp)
	WaitVbl();
    7538:	jsr 1726e <WaitVbl>
	WaitBlit();
    753e:	move.l 1ca94 <GfxBase>,d0
    7544:	movea.l d0,a6
    7546:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    754a:	movea.l 1ca8c <custom>,a0
    7550:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    7556:	movea.l 1ca8c <custom>,a0
    755c:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    7562:	movea.l 1ca8c <custom>,a0
    7568:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    756e:	move.l 1cab2 <SystemIrq>,d0
    7574:	move.l d0,-(sp)
    7576:	jsr 738a <SetInterruptHandler>
    757c:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    757e:	movea.l 1ca94 <GfxBase>,a0
    7584:	move.l 38(a0),d0
    7588:	movea.l 1ca8c <custom>,a0
    758e:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    7592:	movea.l 1ca94 <GfxBase>,a0
    7598:	move.l 50(a0),d0
    759c:	movea.l 1ca8c <custom>,a0
    75a2:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    75a6:	movea.l 1ca8c <custom>,a0
    75ac:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    75b2:	move.w 1caaa <SystemDMA>,d0
    75b8:	movea.l 1ca8c <custom>,a0
    75be:	ori.w #-32768,d0
    75c2:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    75c6:	move.w 1caac <SystemADKCON>,d0
    75cc:	movea.l 1ca8c <custom>,a0
    75d2:	ori.w #-32768,d0
    75d6:	move.w d0,158(a0)

	WaitBlit();	
    75da:	move.l 1ca94 <GfxBase>,d0
    75e0:	movea.l d0,a6
    75e2:	jsr -228(a6)
	DisownBlitter();
    75e6:	move.l 1ca94 <GfxBase>,d0
    75ec:	movea.l d0,a6
    75ee:	jsr -462(a6)
	Enable();
    75f2:	move.l 1ca88 <SysBase>,d0
    75f8:	movea.l d0,a6
    75fa:	jsr -126(a6)

	LoadView(ActiView);
    75fe:	move.l 1cab6 <ActiView>,4(sp)
    7606:	move.l 1ca94 <GfxBase>,d0
    760c:	movea.l d0,a6
    760e:	movea.l 4(sp),a1
    7612:	jsr -222(a6)
	WaitTOF();
    7616:	move.l 1ca94 <GfxBase>,d0
    761c:	movea.l d0,a6
    761e:	jsr -270(a6)
	WaitTOF();
    7622:	move.l 1ca94 <GfxBase>,d0
    7628:	movea.l d0,a6
    762a:	jsr -270(a6)

	Permit();
    762e:	move.l 1ca88 <SysBase>,d0
    7634:	movea.l d0,a6
    7636:	jsr -138(a6)
}
    763a:	nop
    763c:	movea.l (sp)+,a6
    763e:	addq.l #4,sp
    7640:	rts

00007642 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    7642:	    lea -132(sp),sp
    7646:	    movem.l d2-d3/a6,-(sp)

	int *bp = 0x200;
    764a:	    move.l #512,140(sp)
  	*bp = 0;
    7652:	    movea.l 140(sp),a0
    7656:	    clr.l (a0)

	SysBase = *((struct ExecBase**)4UL);
    7658:	    movea.w #4,a0
    765c:	    move.l (a0),d0
    765e:	    move.l d0,1ca88 <SysBase>
	custom = (struct Custom*)0xdff000;	
    7664:	    move.l #14675968,1ca8c <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    766e:	    move.l #102276,136(sp)
    7676:	    clr.l 132(sp)
    767a:	    move.l 1ca88 <SysBase>,d0
    7680:	    movea.l d0,a6
    7682:	    movea.l 136(sp),a1
    7686:	    move.l 132(sp),d0
    768a:	    jsr -552(a6)
    768e:	    move.l d0,128(sp)
    7692:	    move.l 128(sp),d0
    7696:	    move.l d0,1ca94 <GfxBase>
	if (!GfxBase)
    769c:	    move.l 1ca94 <GfxBase>,d0
    76a2:	/-- bne.s 76b8 <main+0x76>
		Exit(0);
    76a4:	|   clr.l 124(sp)
    76a8:	|   move.l 1ca90 <DOSBase>,d0
    76ae:	|   movea.l d0,a6
    76b0:	|   move.l 124(sp),d1
    76b4:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    76b8:	\-> move.l #102293,120(sp)
    76c0:	    clr.l 116(sp)
    76c4:	    move.l 1ca88 <SysBase>,d0
    76ca:	    movea.l d0,a6
    76cc:	    movea.l 120(sp),a1
    76d0:	    move.l 116(sp),d0
    76d4:	    jsr -552(a6)
    76d8:	    move.l d0,112(sp)
    76dc:	    move.l 112(sp),d0
    76e0:	    move.l d0,1ca90 <DOSBase>
	if (!DOSBase)
    76e6:	    move.l 1ca90 <DOSBase>,d0
    76ec:	/-- bne.s 7702 <main+0xc0>
		Exit(0);
    76ee:	|   clr.l 108(sp)
    76f2:	|   move.l 1ca90 <DOSBase>,d0
    76f8:	|   movea.l d0,a6
    76fa:	|   move.l 108(sp),d1
    76fe:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    7702:	\-> move.l #102305,104(sp)
    770a:	    clr.l 100(sp)
    770e:	    move.l 1ca88 <SysBase>,d0
    7714:	    movea.l d0,a6
    7716:	    movea.l 104(sp),a1
    771a:	    move.l 100(sp),d0
    771e:	    jsr -552(a6)
    7722:	    move.l d0,96(sp)
    7726:	    move.l 96(sp),d0
    772a:	    move.l d0,1ca98 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    7730:	    move.l 1ca98 <MathIeeeSingBasBase>,d0
    7736:	/-- bne.s 774c <main+0x10a>
		Exit(0);	
    7738:	|   clr.l 92(sp)
    773c:	|   move.l 1ca90 <DOSBase>,d0
    7742:	|   movea.l d0,a6
    7744:	|   move.l 92(sp),d1
    7748:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    774c:	\-> move.l #102329,88(sp)
    7754:	    clr.l 84(sp)
    7758:	    move.l 1ca88 <SysBase>,d0
    775e:	    movea.l d0,a6
    7760:	    movea.l 88(sp),a1
    7764:	    move.l 84(sp),d0
    7768:	    jsr -552(a6)
    776c:	    move.l d0,80(sp)
    7770:	    move.l 80(sp),d0
    7774:	    move.l d0,1ca9c <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    777a:	    move.l 1ca9c <MathIeeeSingTransBase>,d0
    7780:	/-- bne.s 7796 <main+0x154>
		Exit(0);
    7782:	|   clr.l 76(sp)
    7786:	|   move.l 1ca90 <DOSBase>,d0
    778c:	|   movea.l d0,a6
    778e:	|   move.l 76(sp),d1
    7792:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    7796:	\-> move.l #102355,72(sp)
    779e:	    clr.l 68(sp)
    77a2:	    move.l 1ca88 <SysBase>,d0
    77a8:	    movea.l d0,a6
    77aa:	    movea.l 72(sp),a1
    77ae:	    move.l 68(sp),d0
    77b2:	    jsr -552(a6)
    77b6:	    move.l d0,64(sp)
    77ba:	    move.l 64(sp),d0
    77be:	    move.l d0,1caa4 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    77c4:	    move.l 1caa4 <MathIeeeDoubTransBase>,d0
    77ca:	/-- bne.s 77e0 <main+0x19e>
		Exit(0);
    77cc:	|   clr.l 60(sp)
    77d0:	|   move.l 1ca90 <DOSBase>,d0
    77d6:	|   movea.l d0,a6
    77d8:	|   move.l 60(sp),d1
    77dc:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    77e0:	\-> move.l #102381,56(sp)
    77e8:	    clr.l 52(sp)
    77ec:	    move.l 1ca88 <SysBase>,d0
    77f2:	    movea.l d0,a6
    77f4:	    movea.l 56(sp),a1
    77f8:	    move.l 52(sp),d0
    77fc:	    jsr -552(a6)
    7800:	    move.l d0,48(sp)
    7804:	    move.l 48(sp),d0
    7808:	    move.l d0,1caa0 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    780e:	    move.l 1caa0 <MathIeeeDoubBasBase>,d0
    7814:	/-- bne.s 782a <main+0x1e8>
		Exit(0);
    7816:	|   clr.l 44(sp)
    781a:	|   move.l 1ca90 <DOSBase>,d0
    7820:	|   movea.l d0,a6
    7822:	|   move.l 44(sp),d1
    7826:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 030!\n");
    782a:	\-> pea 19005 <PutChar+0x1229>
    7830:	    jsr 1733a <KPrintF>
    7836:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 030!\n", 25);
    7838:	    move.l 1ca90 <DOSBase>,d0
    783e:	    movea.l d0,a6
    7840:	    jsr -60(a6)
    7844:	    move.l d0,40(sp)
    7848:	    move.l 40(sp),d0
    784c:	    move.l d0,36(sp)
    7850:	    move.l #102437,32(sp)
    7858:	    moveq #25,d0
    785a:	    move.l d0,28(sp)
    785e:	    move.l 1ca90 <DOSBase>,d0
    7864:	    movea.l d0,a6
    7866:	    move.l 36(sp),d1
    786a:	    move.l 32(sp),d2
    786e:	    move.l 28(sp),d3
    7872:	    jsr -48(a6)
    7876:	    move.l d0,24(sp)
	Delay(50);
    787a:	    moveq #50,d0
    787c:	    move.l d0,20(sp)
    7880:	    move.l 1ca90 <DOSBase>,d0
    7886:	    movea.l d0,a6
    7888:	    move.l 20(sp),d1
    788c:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    7890:	    pea 1903e <PutChar+0x1262>
    7896:	    jsr 1733a <KPrintF>
    789c:	    addq.l #4,sp
	TakeSystem();
    789e:	    jsr 73a8 <TakeSystem>
	KPrintF("System Taken\n");
    78a4:	    pea 1904d <PutChar+0x1271>
    78aa:	    jsr 1733a <KPrintF>
    78b0:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    78b2:	    movea.l 1ca8c <custom>,a0
    78b8:	    move.w #-30721,150(a0)
	WaitVbl();
    78be:	    jsr 1726e <WaitVbl>

	KPrintF("Starting main_sludge\n");
    78c4:	    pea 1905b <PutChar+0x127f>
    78ca:	    jsr 1733a <KPrintF>
    78d0:	    addq.l #4,sp
	main_sludge(argc, argv);	
    78d2:	    move.l 152(sp),-(sp)
    78d6:	    move.l 152(sp),-(sp)
    78da:	    jsr 41d8 <main_sludge>
    78e0:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    78e2:	    jsr 7534 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    78e8:	    move.l 1ca90 <DOSBase>,16(sp)
    78f0:	    move.l 1ca88 <SysBase>,d0
    78f6:	    movea.l d0,a6
    78f8:	    movea.l 16(sp),a1
    78fc:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    7900:	    move.l 1ca94 <GfxBase>,12(sp)
    7908:	    move.l 1ca88 <SysBase>,d0
    790e:	    movea.l d0,a6
    7910:	    movea.l 12(sp),a1
    7914:	    jsr -414(a6)
    7918:	    moveq #0,d0
}
    791a:	    movem.l (sp)+,d2-d3/a6
    791e:	    lea 132(sp),sp
    7922:	    rts

00007924 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    7924:	    lea -16(sp),sp
    7928:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    792a:	    moveq #8,d0
    792c:	    move.l d0,16(sp)
    7930:	    clr.l 12(sp)
    7934:	    move.l 1ca88 <SysBase>,d0
    793a:	    movea.l d0,a6
    793c:	    move.l 16(sp),d0
    7940:	    move.l 12(sp),d1
    7944:	    jsr -684(a6)
    7948:	    move.l d0,8(sp)
    794c:	    move.l 8(sp),d0
    7950:	    move.l d0,4(sp)
	if (!newStat) {
    7954:	/-- bne.s 7984 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    7956:	|   movea.l 1c40e <nowStatus>,a0
    795c:	|   move.l (a0),d0
    795e:	|   movea.l 4(sp),a0
    7962:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    7966:	|   pea 18ab1 <PutChar+0xcd5>
    796c:	|   jsr b8 <copyString>
    7972:	|   addq.l #4,sp
    7974:	|   movea.l 4(sp),a0
    7978:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    797a:	|   movea.l 1c40e <nowStatus>,a0
    7980:	|   move.l 4(sp),(a0)
	}
}
    7984:	\-> nop
    7986:	    movea.l (sp)+,a6
    7988:	    lea 16(sp),sp
    798c:	    rts

0000798e <clearStatusBar>:

void clearStatusBar () {
    798e:	       lea -16(sp),sp
    7992:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    7994:	       movea.l 1c40e <nowStatus>,a0
    799a:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    799e:	       movea.l 1c40e <nowStatus>,a0
    79a4:	       moveq #-1,d0
    79a6:	       move.l d0,6(a0)
	while (stat) {
    79aa:	   /-- bra.s 79ea <clearStatusBar+0x5c>
		kill = stat;
    79ac:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    79b2:	|  |   movea.l 16(sp),a0
    79b6:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    79bc:	|  |   movea.l 12(sp),a0
    79c0:	|  |   move.l (a0),8(sp)
    79c4:	|  |   move.l 1ca88 <SysBase>,d0
    79ca:	|  |   movea.l d0,a6
    79cc:	|  |   movea.l 8(sp),a1
    79d0:	|  |   jsr -690(a6)
		FreeVec(kill);
    79d4:	|  |   move.l 12(sp),4(sp)
    79da:	|  |   move.l 1ca88 <SysBase>,d0
    79e0:	|  |   movea.l d0,a6
    79e2:	|  |   movea.l 4(sp),a1
    79e6:	|  |   jsr -690(a6)
	while (stat) {
    79ea:	|  \-> tst.l 16(sp)
    79ee:	\----- bne.s 79ac <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    79f0:	       movea.l 1c40e <nowStatus>,a0
    79f6:	       clr.l (a0)
}
    79f8:	       nop
    79fa:	       movea.l (sp)+,a6
    79fc:	       lea 16(sp),sp
    7a00:	       rts

00007a02 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    7a02:	clr.l 1caba <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    7a08:	move.w #-1,1cabe <mainStatus+0x4>
	mainStatus.litStatus = -1;
    7a10:	moveq #-1,d0
    7a12:	move.l d0,1cac0 <mainStatus+0x6>
	mainStatus.statusX = 10;
    7a18:	moveq #10,d0
    7a1a:	move.l d0,1cac4 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    7a20:	movea.l 1c9e0 <winHeight>,a0
    7a26:	lea -15(a0),a0
    7a2a:	move.l a0,d0
    7a2c:	move.l d0,1cac8 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    7a32:	nop
    7a34:	rts

00007a36 <killLastStatus>:

void killLastStatus () {
    7a36:	    lea -12(sp),sp
    7a3a:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    7a3c:	    movea.l 1c40e <nowStatus>,a0
    7a42:	    move.l (a0),d0
    7a44:	/-- beq.s 7a8e <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    7a46:	|   movea.l 1c40e <nowStatus>,a0
    7a4c:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    7a50:	|   movea.l 1c40e <nowStatus>,a0
    7a56:	|   movea.l 12(sp),a1
    7a5a:	|   move.l 4(a1),d0
    7a5e:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    7a60:	|   movea.l 12(sp),a0
    7a64:	|   move.l (a0),8(sp)
    7a68:	|   move.l 1ca88 <SysBase>,d0
    7a6e:	|   movea.l d0,a6
    7a70:	|   movea.l 8(sp),a1
    7a74:	|   jsr -690(a6)
		FreeVec(kill);
    7a78:	|   move.l 12(sp),4(sp)
    7a7e:	|   move.l 1ca88 <SysBase>,d0
    7a84:	|   movea.l d0,a6
    7a86:	|   movea.l 4(sp),a1
    7a8a:	|   jsr -690(a6)
	}
}
    7a8e:	\-> nop
    7a90:	    movea.l (sp)+,a6
    7a92:	    lea 12(sp),sp
    7a96:	    rts

00007a98 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    7a98:	movea.l 1c40e <nowStatus>,a0
    7a9e:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    7aa4:	movea.l 1c40e <nowStatus>,a0
    7aaa:	move.l 8(sp),14(a0)
}
    7ab0:	nop
    7ab2:	rts

00007ab4 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    7ab4:	       lea -100(sp),sp
    7ab8:	       move.l a6,-(sp)
    7aba:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    7abc:	       movea.l 1c40e <nowStatus>,a0
    7ac2:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    7ac6:	       movea.l 1c40e <nowStatus>,a0
    7acc:	       move.w 4(a0),d0
    7ad0:	       move.w d0,d0
    7ad2:	       andi.l #65535,d0
    7ad8:	       move.l 112(sp),-(sp)
    7adc:	       move.l d0,-(sp)
    7ade:	       jsr 8d0 <put2bytes>
    7ae4:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    7ae6:	       movea.l 1c40e <nowStatus>,a0
    7aec:	       move.l 6(a0),d0
    7af0:	       move.l d0,d0
    7af2:	       movea.w d0,a0
    7af4:	       move.l 112(sp),-(sp)
    7af8:	       move.l a0,-(sp)
    7afa:	       jsr a9c <putSigned>
    7b00:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    7b02:	       movea.l 1c40e <nowStatus>,a0
    7b08:	       move.l 10(a0),d0
    7b0c:	       move.l 112(sp),-(sp)
    7b10:	       move.l d0,-(sp)
    7b12:	       jsr 8d0 <put2bytes>
    7b18:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7b1a:	       movea.l 1c40e <nowStatus>,a0
    7b20:	       move.l 14(a0),d0
    7b24:	       move.l 112(sp),-(sp)
    7b28:	       move.l d0,-(sp)
    7b2a:	       jsr 8d0 <put2bytes>
    7b30:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    7b32:	       move.l 112(sp),100(sp)
    7b38:	       movea.l 1c40e <nowStatus>,a0
    7b3e:	       move.l 18(a0),96(sp)
    7b44:	       move.l 1ca90 <DOSBase>,d0
    7b4a:	       movea.l d0,a6
    7b4c:	       move.l 100(sp),d1
    7b50:	       move.l 96(sp),d2
    7b54:	       jsr -312(a6)
    7b58:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7b5c:	       move.l 112(sp),88(sp)
    7b62:	       movea.l 1c40e <nowStatus>,a0
    7b68:	       move.l 22(a0),84(sp)
    7b6e:	       move.l 1ca90 <DOSBase>,d0
    7b74:	       movea.l d0,a6
    7b76:	       move.l 88(sp),d1
    7b7a:	       move.l 84(sp),d2
    7b7e:	       jsr -312(a6)
    7b82:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    7b86:	       move.l 112(sp),76(sp)
    7b8c:	       movea.l 1c40e <nowStatus>,a0
    7b92:	       move.l 26(a0),72(sp)
    7b98:	       move.l 1ca90 <DOSBase>,d0
    7b9e:	       movea.l d0,a6
    7ba0:	       move.l 76(sp),d1
    7ba4:	       move.l 72(sp),d2
    7ba8:	       jsr -312(a6)
    7bac:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    7bb0:	       move.l 112(sp),64(sp)
    7bb6:	       movea.l 1c40e <nowStatus>,a0
    7bbc:	       move.l 30(a0),60(sp)
    7bc2:	       move.l 1ca90 <DOSBase>,d0
    7bc8:	       movea.l d0,a6
    7bca:	       move.l 64(sp),d1
    7bce:	       move.l 60(sp),d2
    7bd2:	       jsr -312(a6)
    7bd6:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    7bda:	       move.l 112(sp),52(sp)
    7be0:	       movea.l 1c40e <nowStatus>,a0
    7be6:	       move.l 34(a0),48(sp)
    7bec:	       move.l 1ca90 <DOSBase>,d0
    7bf2:	       movea.l d0,a6
    7bf4:	       move.l 52(sp),d1
    7bf8:	       move.l 48(sp),d2
    7bfc:	       jsr -312(a6)
    7c00:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    7c04:	       move.l 112(sp),40(sp)
    7c0a:	       movea.l 1c40e <nowStatus>,a0
    7c10:	       move.l 38(a0),36(sp)
    7c16:	       move.l 1ca90 <DOSBase>,d0
    7c1c:	       movea.l d0,a6
    7c1e:	       move.l 40(sp),d1
    7c22:	       move.l 36(sp),d2
    7c26:	       jsr -312(a6)
    7c2a:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7c2e:	   /-- bra.s 7c72 <saveStatusBars+0x1be>
		FPutC (fp,1);
    7c30:	/--|-> move.l 112(sp),16(sp)
    7c36:	|  |   moveq #1,d0
    7c38:	|  |   move.l d0,12(sp)
    7c3c:	|  |   move.l 1ca90 <DOSBase>,d0
    7c42:	|  |   movea.l d0,a6
    7c44:	|  |   move.l 16(sp),d1
    7c48:	|  |   move.l 12(sp),d2
    7c4c:	|  |   jsr -312(a6)
    7c50:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    7c54:	|  |   movea.l 104(sp),a0
    7c58:	|  |   move.l (a0),d0
    7c5a:	|  |   move.l 112(sp),-(sp)
    7c5e:	|  |   move.l d0,-(sp)
    7c60:	|  |   jsr bd8 <writeString>
    7c66:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    7c68:	|  |   movea.l 104(sp),a0
    7c6c:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    7c72:	|  \-> tst.l 104(sp)
    7c76:	\----- bne.s 7c30 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    7c78:	       move.l 112(sp),28(sp)
    7c7e:	       clr.l 24(sp)
    7c82:	       move.l 1ca90 <DOSBase>,d0
    7c88:	       movea.l d0,a6
    7c8a:	       move.l 28(sp),d1
    7c8e:	       move.l 24(sp),d2
    7c92:	       jsr -312(a6)
    7c96:	       move.l d0,20(sp)
}
    7c9a:	       nop
    7c9c:	       move.l (sp)+,d2
    7c9e:	       movea.l (sp)+,a6
    7ca0:	       lea 100(sp),sp
    7ca4:	       rts

00007ca6 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    7ca6:	movea.l 1c40e <nowStatus>,a0
    7cac:	move.l 4(sp),6(a0)
}
    7cb2:	nop
    7cb4:	rts

00007cb6 <setStatusBar>:

void setStatusBar (char * txt) {
    7cb6:	    subq.l #4,sp
    7cb8:	    move.l a6,-(sp)
    7cba:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    7cbc:	    movea.l 1c40e <nowStatus>,a0
    7cc2:	    move.l (a0),d0
    7cc4:	/-- beq.s 7cf8 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    7cc6:	|   movea.l 1c40e <nowStatus>,a0
    7ccc:	|   movea.l (a0),a0
    7cce:	|   move.l (a0),8(sp)
    7cd2:	|   move.l 1ca88 <SysBase>,d0
    7cd8:	|   movea.l d0,a6
    7cda:	|   movea.l 8(sp),a1
    7cde:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    7ce2:	|   movea.l 1c40e <nowStatus>,a0
    7ce8:	|   movea.l (a0),a2
    7cea:	|   move.l 16(sp),-(sp)
    7cee:	|   jsr b8 <copyString>
    7cf4:	|   addq.l #4,sp
    7cf6:	|   move.l d0,(a2)
	}
}
    7cf8:	\-> nop
    7cfa:	    movea.l (sp)+,a2
    7cfc:	    movea.l (sp)+,a6
    7cfe:	    addq.l #4,sp
    7d00:	    rts

00007d02 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    7d02:	       movea.l 1c40e <nowStatus>,a0
    7d08:	       move.l (a0),d0
    7d0a:	/----- beq.s 7d18 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7d0c:	|      movea.l 1c40e <nowStatus>,a0
    7d12:	|      movea.l (a0),a0
    7d14:	|      move.l (a0),d0
    7d16:	|  /-- bra.s 7d1e <statusBarText+0x1c>
	} else {
		return "";
    7d18:	\--|-> move.l #101041,d0
	}
    7d1e:	   \-> rts

00007d20 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    7d20:	       lea -28(sp),sp
    7d24:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7d28:	       move.l 52(sp),-(sp)
    7d2c:	       jsr 159bc <stringWidth>
    7d32:	       addq.l #4,sp
    7d34:	       asr.l #1,d0
    7d36:	       move.l d0,-(sp)
    7d38:	       jsr 1776c <__floatsisf>
    7d3e:	       addq.l #4,sp
    7d40:	       move.l d0,d1
    7d42:	       move.l 1c426 <cameraZoom>,d0
    7d48:	       move.l d0,-(sp)
    7d4a:	       move.l d1,-(sp)
    7d4c:	       jsr 17622 <__divsf3>
    7d52:	       addq.l #8,sp
    7d54:	       move.l d0,-(sp)
    7d56:	       jsr 17704 <__fixsfsi>
    7d5c:	       addq.l #4,sp
    7d5e:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    7d62:	       move.l 56(sp),d0
    7d66:	       sub.l 44(sp),d0
    7d6a:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    7d6e:	       move.l 56(sp),d0
    7d72:	       add.l 44(sp),d0
    7d76:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    7d7a:	       moveq #12,d0
    7d7c:	       move.l d0,32(sp)
    7d80:	       clr.l 28(sp)
    7d84:	       move.l 1ca88 <SysBase>,d0
    7d8a:	       movea.l d0,a6
    7d8c:	       move.l 32(sp),d0
    7d90:	       move.l 28(sp),d1
    7d94:	       jsr -684(a6)
    7d98:	       move.l d0,24(sp)
    7d9c:	       move.l 24(sp),d0
    7da0:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    7da4:	       movea.l 1cae4 <speech>,a0
    7daa:	       move.l 4(a0),d0
    7dae:	       movea.l 20(sp),a0
    7db2:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    7db6:	       move.l 52(sp),-(sp)
    7dba:	       jsr b8 <copyString>
    7dc0:	       addq.l #4,sp
    7dc2:	       movea.l 20(sp),a0
    7dc6:	       move.l d0,(a0)
	newLine -> x = xx1;
    7dc8:	       movea.l 20(sp),a0
    7dcc:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    7dd2:	       movea.l 1cae4 <speech>,a0
    7dd8:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7dde:	       moveq #4,d0
    7de0:	       cmp.l 40(sp),d0
    7de4:	   /-- blt.s 7e06 <addSpeechLine+0xe6>
    7de6:	   |   movea.l 60(sp),a0
    7dea:	   |   move.l (a0),d1
    7dec:	   |   moveq #5,d0
    7dee:	   |   sub.l 40(sp),d0
    7df2:	   |   cmp.l d1,d0
    7df4:	   +-- ble.s 7e06 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7df6:	   |   moveq #5,d0
    7df8:	   |   sub.l 40(sp),d0
    7dfc:	   |   movea.l 60(sp),a0
    7e00:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    7e02:	/--|-- bra.w 7f32 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7e06:	|  \-> move.l 36(sp),-(sp)
    7e0a:	|      jsr 1776c <__floatsisf>
    7e10:	|      addq.l #4,sp
    7e12:	|      move.l d0,d2
    7e14:	|      move.l 1c9dc <winWidth>,d0
    7e1a:	|      move.l d0,-(sp)
    7e1c:	|      jsr 17794 <__floatunsisf>
    7e22:	|      addq.l #4,sp
    7e24:	|      move.l d0,d1
    7e26:	|      move.l 1c426 <cameraZoom>,d0
    7e2c:	|      move.l d0,-(sp)
    7e2e:	|      move.l d1,-(sp)
    7e30:	|      jsr 17622 <__divsf3>
    7e36:	|      addq.l #8,sp
    7e38:	|      move.l #1084227584,-(sp)
    7e3e:	|      move.l d0,-(sp)
    7e40:	|      jsr 17a60 <__subsf3>
    7e46:	|      addq.l #8,sp
    7e48:	|      move.l d0,-(sp)
    7e4a:	|      move.l d2,-(sp)
    7e4c:	|      jsr 17854 <__gesf2>
    7e52:	|      addq.l #8,sp
    7e54:	|      tst.l d0
    7e56:	|  /-- bge.s 7e5c <addSpeechLine+0x13c>
}
    7e58:	+--|-- bra.w 7f32 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7e5c:	|  \-> movea.l 60(sp),a0
    7e60:	|      move.l (a0),d0
    7e62:	|      move.l d0,-(sp)
    7e64:	|      jsr 1776c <__floatsisf>
    7e6a:	|      addq.l #4,sp
    7e6c:	|      move.l d0,-(sp)
    7e6e:	|      jsr 1768e <__extendsfdf2>
    7e74:	|      addq.l #4,sp
    7e76:	|      move.l d0,d4
    7e78:	|      move.l d1,d5
    7e7a:	|      move.l 1c9dc <winWidth>,d0
    7e80:	|      move.l d0,-(sp)
    7e82:	|      jsr 17794 <__floatunsisf>
    7e88:	|      addq.l #4,sp
    7e8a:	|      move.l d0,d1
    7e8c:	|      move.l 1c426 <cameraZoom>,d0
    7e92:	|      move.l d0,-(sp)
    7e94:	|      move.l d1,-(sp)
    7e96:	|      jsr 17622 <__divsf3>
    7e9c:	|      addq.l #8,sp
    7e9e:	|      move.l d0,-(sp)
    7ea0:	|      jsr 1768e <__extendsfdf2>
    7ea6:	|      addq.l #4,sp
    7ea8:	|      clr.l -(sp)
    7eaa:	|      move.l #1075052544,-(sp)
    7eb0:	|      move.l d1,-(sp)
    7eb2:	|      move.l d0,-(sp)
    7eb4:	|      jsr 179fe <__subdf3>
    7eba:	|      lea 16(sp),sp
    7ebe:	|      move.l d0,d2
    7ec0:	|      move.l d1,d3
    7ec2:	|      move.l 36(sp),-(sp)
    7ec6:	|      jsr 1772c <__floatsidf>
    7ecc:	|      addq.l #4,sp
    7ece:	|      move.l d1,-(sp)
    7ed0:	|      move.l d0,-(sp)
    7ed2:	|      move.l d3,-(sp)
    7ed4:	|      move.l d2,-(sp)
    7ed6:	|      jsr 179fe <__subdf3>
    7edc:	|      lea 16(sp),sp
    7ee0:	|      move.l d1,-(sp)
    7ee2:	|      move.l d0,-(sp)
    7ee4:	|      move.l d5,-(sp)
    7ee6:	|      move.l d4,-(sp)
    7ee8:	|      jsr 1788a <__gtdf2>
    7eee:	|      lea 16(sp),sp
    7ef2:	|      tst.l d0
    7ef4:	|  /-- bgt.s 7ef8 <addSpeechLine+0x1d8>
}
    7ef6:	+--|-- bra.s 7f32 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7ef8:	|  \-> move.l 1c9dc <winWidth>,d0
    7efe:	|      move.l d0,-(sp)
    7f00:	|      jsr 17794 <__floatunsisf>
    7f06:	|      addq.l #4,sp
    7f08:	|      move.l d0,d1
    7f0a:	|      move.l 1c426 <cameraZoom>,d0
    7f10:	|      move.l d0,-(sp)
    7f12:	|      move.l d1,-(sp)
    7f14:	|      jsr 17622 <__divsf3>
    7f1a:	|      addq.l #8,sp
    7f1c:	|      move.l d0,-(sp)
    7f1e:	|      jsr 17704 <__fixsfsi>
    7f24:	|      addq.l #4,sp
    7f26:	|      subq.l #5,d0
    7f28:	|      sub.l 36(sp),d0
    7f2c:	|      movea.l 60(sp),a0
    7f30:	|      move.l d0,(a0)
}
    7f32:	\----> nop
    7f34:	       movem.l (sp)+,d2-d5/a6
    7f38:	       lea 28(sp),sp
    7f3c:	       rts

00007f3e <initSpeech>:


void initSpeech () {
    7f3e:	       lea -12(sp),sp
    7f42:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    7f44:	       moveq #20,d0
    7f46:	       move.l d0,12(sp)
    7f4a:	       clr.l 8(sp)
    7f4e:	       move.l 1ca88 <SysBase>,d0
    7f54:	       movea.l d0,a6
    7f56:	       move.l 12(sp),d0
    7f5a:	       move.l 8(sp),d1
    7f5e:	       jsr -684(a6)
    7f62:	       move.l d0,4(sp)
    7f66:	       move.l 4(sp),d0
    7f6a:	       move.l d0,1cae4 <speech>
	if (speech) {
    7f70:	       move.l 1cae4 <speech>,d0
    7f76:	/----- beq.s 7fa2 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    7f78:	|      movea.l 1cae4 <speech>,a0
    7f7e:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    7f80:	|      movea.l 1cae4 <speech>,a0
    7f86:	|      clr.l 4(a0)
		speech -> speechY = 0;
    7f8a:	|      movea.l 1cae4 <speech>,a0
    7f90:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    7f94:	|      movea.l 1cae4 <speech>,a0
    7f9a:	|      moveq #-1,d0
    7f9c:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    7fa0:	|  /-- bra.s 7fb0 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    7fa2:	\--|-> pea 19098 <PutChar+0x12bc>
    7fa8:	   |   jsr 1733a <KPrintF>
    7fae:	   |   addq.l #4,sp
}
    7fb0:	   \-> nop
    7fb2:	       movea.l (sp)+,a6
    7fb4:	       lea 12(sp),sp
    7fb8:	       rts

00007fba <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    7fba:	       movea.l 1cae4 <speech>,a0
    7fc0:	       move.l 4(a0),d0
    7fc4:	/----- beq.s 7fd2 <isThereAnySpeechGoingOn+0x18>
    7fc6:	|      movea.l 1cae4 <speech>,a0
    7fcc:	|      move.l 16(a0),d0
    7fd0:	|  /-- bra.s 7fd4 <isThereAnySpeechGoingOn+0x1a>
    7fd2:	\--|-> moveq #-1,d0
}
    7fd4:	   \-> rts

00007fd6 <killAllSpeech>:

void killAllSpeech () {
    7fd6:	       lea -12(sp),sp
    7fda:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    7fdc:	       movea.l 1cae4 <speech>,a0
    7fe2:	       move.l 12(a0),d0
    7fe6:	       moveq #-1,d1
    7fe8:	       cmp.l d0,d1
    7fea:	   /-- beq.s 7ff8 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    7fec:	   |   movea.l 1cae4 <speech>,a0
    7ff2:	   |   moveq #-1,d0
    7ff4:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    7ff8:	   \-> movea.l 1cae4 <speech>,a0
    7ffe:	       move.l (a0),d0
    8000:	/----- beq.w 808c <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    8004:	|      movea.l 1cae4 <speech>,a0
    800a:	|      move.l (a0),d1
    800c:	|      lea -132(sp),sp
    8010:	|      move.l sp,d0
    8012:	|      movea.w #132,a0
    8016:	|      move.l a0,-(sp)
    8018:	|      move.l d1,-(sp)
    801a:	|      move.l d0,-(sp)
    801c:	|      jsr 172ee <memcpy>
    8022:	|      lea 12(sp),sp
    8026:	|      jsr ac44 <makeSilent>
    802c:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    8030:	|      movea.l 1cae4 <speech>,a0
    8036:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    8038:	+----- bra.s 808c <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    803a:	|  /-> movea.l 1cae4 <speech>,a0
    8040:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    8046:	|  |   movea.l 1cae4 <speech>,a0
    804c:	|  |   movea.l 4(a0),a1
    8050:	|  |   movea.l 1cae4 <speech>,a0
    8056:	|  |   move.l 4(a1),d0
    805a:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    805e:	|  |   movea.l 12(sp),a0
    8062:	|  |   move.l (a0),8(sp)
    8066:	|  |   move.l 1ca88 <SysBase>,d0
    806c:	|  |   movea.l d0,a6
    806e:	|  |   movea.l 8(sp),a1
    8072:	|  |   jsr -690(a6)
		FreeVec(killMe);
    8076:	|  |   move.l 12(sp),4(sp)
    807c:	|  |   move.l 1ca88 <SysBase>,d0
    8082:	|  |   movea.l d0,a6
    8084:	|  |   movea.l 4(sp),a1
    8088:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    808c:	\--|-> movea.l 1cae4 <speech>,a0
    8092:	   |   move.l 4(a0),d0
    8096:	   \-- bne.s 803a <killAllSpeech+0x64>
	}
}
    8098:	       nop
    809a:	       nop
    809c:	       movea.l (sp)+,a6
    809e:	       lea 12(sp),sp
    80a2:	       rts

000080a4 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    80a4:	pea 2 <_start+0x2>
    80a8:	move.l 8(sp),-(sp)
    80ac:	jsr 8204 <setFrames>
    80b2:	addq.l #8,sp
}
    80b4:	nop
    80b6:	rts

000080b8 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    80b8:	       lea -52(sp),sp
    80bc:	       move.l a6,-(sp)
    80be:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    80c0:	       movea.l 64(sp),a0
    80c4:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    80ca:	       move.l 1c412 <speechSpeed>,d0
    80d0:	       move.l 68(sp),-(sp)
    80d4:	       move.l d0,-(sp)
    80d6:	       jsr a46 <putFloat>
    80dc:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    80de:	       movea.l 64(sp),a0
    80e2:	       move.l 8(a0),d0
    80e6:	       move.l 68(sp),-(sp)
    80ea:	       move.l d0,-(sp)
    80ec:	       jsr 8d0 <put2bytes>
    80f2:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    80f4:	       movea.l 64(sp),a0
    80f8:	       move.l 16(a0),d0
    80fc:	       move.l 68(sp),-(sp)
    8100:	       move.l d0,-(sp)
    8102:	       jsr 8d0 <put2bytes>
    8108:	       addq.l #8,sp
		if (sS -> currentTalker) {
    810a:	       movea.l 64(sp),a0
    810e:	       move.l (a0),d0
    8110:	   /-- beq.s 8154 <saveSpeech+0x9c>
			FPutC (fp, 1);
    8112:	   |   move.l 68(sp),40(sp)
    8118:	   |   moveq #1,d0
    811a:	   |   move.l d0,36(sp)
    811e:	   |   move.l 1ca90 <DOSBase>,d0
    8124:	   |   movea.l d0,a6
    8126:	   |   move.l 40(sp),d1
    812a:	   |   move.l 36(sp),d2
    812e:	   |   jsr -312(a6)
    8132:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    8136:	   |   movea.l 64(sp),a0
    813a:	   |   movea.l (a0),a0
    813c:	   |   movea.l 114(a0),a0
    8140:	   |   move.l 4(a0),d0
    8144:	   |   move.l 68(sp),-(sp)
    8148:	   |   move.l d0,-(sp)
    814a:	   |   jsr 8d0 <put2bytes>
    8150:	   |   addq.l #8,sp
    8152:	/--|-- bra.s 81d0 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    8154:	|  \-> move.l 68(sp),52(sp)
    815a:	|      clr.l 48(sp)
    815e:	|      move.l 1ca90 <DOSBase>,d0
    8164:	|      movea.l d0,a6
    8166:	|      move.l 52(sp),d1
    816a:	|      move.l 48(sp),d2
    816e:	|      jsr -312(a6)
    8172:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    8176:	+----- bra.s 81d0 <saveSpeech+0x118>
			FPutC (fp, 1);
    8178:	|  /-> move.l 68(sp),16(sp)
    817e:	|  |   moveq #1,d0
    8180:	|  |   move.l d0,12(sp)
    8184:	|  |   move.l 1ca90 <DOSBase>,d0
    818a:	|  |   movea.l d0,a6
    818c:	|  |   move.l 16(sp),d1
    8190:	|  |   move.l 12(sp),d2
    8194:	|  |   jsr -312(a6)
    8198:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    819c:	|  |   movea.l 56(sp),a0
    81a0:	|  |   move.l (a0),d0
    81a2:	|  |   move.l 68(sp),-(sp)
    81a6:	|  |   move.l d0,-(sp)
    81a8:	|  |   jsr bd8 <writeString>
    81ae:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    81b0:	|  |   movea.l 56(sp),a0
    81b4:	|  |   move.l 8(a0),d0
    81b8:	|  |   move.l 68(sp),-(sp)
    81bc:	|  |   move.l d0,-(sp)
    81be:	|  |   jsr 8d0 <put2bytes>
    81c4:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    81c6:	|  |   movea.l 56(sp),a0
    81ca:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    81d0:	\--|-> tst.l 56(sp)
    81d4:	   \-- bne.s 8178 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    81d6:	       move.l 68(sp),28(sp)
    81dc:	       clr.l 24(sp)
    81e0:	       move.l 1ca90 <DOSBase>,d0
    81e6:	       movea.l d0,a6
    81e8:	       move.l 28(sp),d1
    81ec:	       move.l 24(sp),d2
    81f0:	       jsr -312(a6)
    81f4:	       move.l d0,20(sp)
}
    81f8:	       nop
    81fa:	       move.l (sp)+,d2
    81fc:	       movea.l (sp)+,a6
    81fe:	       lea 52(sp),sp
    8202:	       rts

00008204 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    8204:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    8206:	movea.l 8(sp),a0
    820a:	movea.l 80(a0),a0
    820e:	move.l (a0),d2
    8210:	movea.l 8(sp),a0
    8214:	movea.l 80(a0),a0
    8218:	move.l 4(a0),d0
    821c:	move.l 12(sp),-(sp)
    8220:	move.l d0,-(sp)
    8222:	jsr 17cc6 <__mulsi3>
    8228:	addq.l #8,sp
    822a:	move.l d0,d1
    822c:	movea.l 8(sp),a0
    8230:	move.l 106(a0),d0
    8234:	add.l d1,d0
    8236:	add.l d0,d0
    8238:	add.l d0,d0
    823a:	movea.l d2,a0
    823c:	adda.l d0,a0
    823e:	move.l (a0),d0
    8240:	movea.l 8(sp),a0
    8244:	move.l d0,72(a0)
}
    8248:	nop
    824a:	move.l (sp)+,d2
    824c:	rts

0000824e <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    824e:	       lea -20(sp),sp
    8252:	       move.l d2,-(sp)
    8254:	       move.l 40(sp),d0
    8258:	       move.w d0,d0
    825a:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    825e:	       movea.l 1cae4 <speech>,a0
    8264:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    826a:	       move.l 32(sp),-(sp)
    826e:	       jsr a72e <findPerson>
    8274:	       addq.l #4,sp
    8276:	       move.l d0,16(sp)
    if (thisPerson) {
    827a:	   /-- beq.s 82a0 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    827c:	   |   movea.w 6(sp),a0
    8280:	   |   move.l a0,-(sp)
    8282:	   |   move.l 40(sp),-(sp)
    8286:	   |   move.l 24(sp),-(sp)
    828a:	   |   move.l 40(sp),-(sp)
    828e:	   |   jsr 8366 <wrapSpeechPerson>
    8294:	   |   lea 16(sp),sp
    8298:	   |   move.l d0,20(sp)
    829c:	/--|-- bra.w 835a <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    82a0:	|  \-> move.l 32(sp),-(sp)
    82a4:	|      jsr 15b1c <getRegionForObject>
    82aa:	|      addq.l #4,sp
    82ac:	|      move.l d0,12(sp)
        if (thisRegion) {
    82b0:	|  /-- beq.s 831c <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    82b2:	|  |   movea.l 12(sp),a0
    82b6:	|  |   movea.l 28(a0),a0
    82ba:	|  |   move.l 28(a0),d0
    82be:	|  |   movea.l 12(sp),a0
    82c2:	|  |   movea.l 4(a0),a1
    82c6:	|  |   movea.l 12(sp),a0
    82ca:	|  |   movea.l 28(a0),a0
    82ce:	|  |   move.l 20(a0),d1
    82d2:	|  |   movea.l a1,a0
    82d4:	|  |   suba.l d1,a0
    82d6:	|  |   move.l 1cb46 <cameraY>,d1
    82dc:	|  |   movea.l a0,a1
    82de:	|  |   suba.l d1,a1
    82e0:	|  |   movea.l 12(sp),a0
    82e4:	|  |   move.l (a0),d2
    82e6:	|  |   movea.l 12(sp),a0
    82ea:	|  |   move.l 8(a0),d1
    82ee:	|  |   add.l d2,d1
    82f0:	|  |   move.l d1,d2
    82f2:	|  |   asr.l #1,d2
    82f4:	|  |   move.l 1cb42 <cameraX>,d1
    82fa:	|  |   movea.l d2,a0
    82fc:	|  |   suba.l d1,a0
    82fe:	|  |   move.l 36(sp),-(sp)
    8302:	|  |   move.l d0,-(sp)
    8304:	|  |   move.l a1,-(sp)
    8306:	|  |   move.l a0,-(sp)
    8308:	|  |   move.l 44(sp),-(sp)
    830c:	|  |   jsr 8484 <wrapSpeechXY>
    8312:	|  |   lea 20(sp),sp
    8316:	|  |   move.l d0,20(sp)
    831a:	+--|-- bra.s 835a <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    831c:	|  \-> move.l 32(sp),-(sp)
    8320:	|      jsr d624 <findObjectType>
    8326:	|      addq.l #4,sp
    8328:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    832c:	|      movea.l 8(sp),a0
    8330:	|      move.l 28(a0),d1
    8334:	|      move.l 1c9dc <winWidth>,d0
    833a:	|      lsr.l #1,d0
    833c:	|      move.l 36(sp),-(sp)
    8340:	|      move.l d1,-(sp)
    8342:	|      pea a <_start+0xa>
    8346:	|      move.l d0,-(sp)
    8348:	|      move.l 44(sp),-(sp)
    834c:	|      jsr 8484 <wrapSpeechXY>
    8352:	|      lea 20(sp),sp
    8356:	|      move.l d0,20(sp)
        }
    }
    return i;
    835a:	\----> move.l 20(sp),d0
}
    835e:	       move.l (sp)+,d2
    8360:	       lea 20(sp),sp
    8364:	       rts

00008366 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    8366:	    subq.l #8,sp
    8368:	    movem.l d2-d4,-(sp)
    836c:	    move.l 36(sp),d0
    8370:	    move.w d0,d0
    8372:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    8376:	    movea.l 28(sp),a0
    837a:	    movea.l 114(a0),a0
    837e:	    move.l 28(a0),d2
    8382:	    movea.l 28(sp),a0
    8386:	    move.l 4(a0),d3
    838a:	    move.l 1cb46 <cameraY>,d0
    8390:	    move.l d0,-(sp)
    8392:	    jsr 1776c <__floatsisf>
    8398:	    addq.l #4,sp
    839a:	    move.l d0,-(sp)
    839c:	    move.l d3,-(sp)
    839e:	    jsr 17a60 <__subsf3>
    83a4:	    addq.l #8,sp
    83a6:	    move.l d0,d3
    83a8:	    movea.l 28(sp),a0
    83ac:	    move.l 32(a0),d4
    83b0:	    movea.l 28(sp),a0
    83b4:	    move.l 20(a0),d1
    83b8:	    movea.l 28(sp),a0
    83bc:	    move.l 24(a0),d0
    83c0:	    sub.l d0,d1
    83c2:	    move.l d1,-(sp)
    83c4:	    jsr 1776c <__floatsisf>
    83ca:	    addq.l #4,sp
    83cc:	    move.l d0,-(sp)
    83ce:	    move.l d4,-(sp)
    83d0:	    jsr 1781e <__mulsf3>
    83d6:	    addq.l #8,sp
    83d8:	    move.l d0,-(sp)
    83da:	    move.l d3,-(sp)
    83dc:	    jsr 17a60 <__subsf3>
    83e2:	    addq.l #8,sp
    83e4:	    move.l d0,d3
    83e6:	    movea.l 28(sp),a0
    83ea:	    movea.l 114(a0),a0
    83ee:	    move.l 20(a0),d0
    83f2:	    move.l d0,-(sp)
    83f4:	    jsr 1776c <__floatsisf>
    83fa:	    addq.l #4,sp
    83fc:	    move.l d0,-(sp)
    83fe:	    move.l d3,-(sp)
    8400:	    jsr 17a60 <__subsf3>
    8406:	    addq.l #8,sp
    8408:	    move.l d0,-(sp)
    840a:	    jsr 17704 <__fixsfsi>
    8410:	    addq.l #4,sp
    8412:	    move.l d0,d4
    8414:	    movea.l 28(sp),a0
    8418:	    move.l (a0),d3
    841a:	    move.l 1cb42 <cameraX>,d0
    8420:	    move.l d0,-(sp)
    8422:	    jsr 1776c <__floatsisf>
    8428:	    addq.l #4,sp
    842a:	    move.l d0,-(sp)
    842c:	    move.l d3,-(sp)
    842e:	    jsr 17a60 <__subsf3>
    8434:	    addq.l #8,sp
    8436:	    move.l d0,-(sp)
    8438:	    jsr 17704 <__fixsfsi>
    843e:	    addq.l #4,sp
    8440:	    move.l 32(sp),-(sp)
    8444:	    move.l d2,-(sp)
    8446:	    move.l d4,-(sp)
    8448:	    move.l d0,-(sp)
    844a:	    move.l 40(sp),-(sp)
    844e:	    jsr 8484 <wrapSpeechXY>
    8454:	    lea 20(sp),sp
    8458:	    move.l d0,16(sp)
	if (animPerson) {
    845c:	    tst.w 14(sp)
    8460:	/-- beq.s 8478 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    8462:	|   move.l 28(sp),-(sp)
    8466:	|   jsr 80a4 <makeTalker>
    846c:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    846e:	|   movea.l 1cae4 <speech>,a0
    8474:	|   move.l 28(sp),(a0)
	}
	return i;
    8478:	\-> move.l 16(sp),d0
}
    847c:	    movem.l (sp)+,d2-d4
    8480:	    addq.l #8,sp
    8482:	    rts

00008484 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    8484:	                   lea -16(sp),sp
    8488:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    848c:	                   clr.l 16(sp)
    killAllSpeech();
    8490:	                   jsr 7fd6 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    8496:	                   move.l 36(sp),-(sp)
    849a:	                   jsr 13dc6 <strlen>
    84a0:	                   addq.l #4,sp
    84a2:	                   movea.l d0,a0
    84a4:	                   lea 20(a0),a0
    84a8:	                   move.l a0,-(sp)
    84aa:	                   jsr 17794 <__floatunsisf>
    84b0:	                   addq.l #4,sp
    84b2:	                   move.l d0,d1
    84b4:	                   move.l 1c412 <speechSpeed>,d0
    84ba:	                   move.l d0,-(sp)
    84bc:	                   move.l d1,-(sp)
    84be:	                   jsr 1781e <__mulsf3>
    84c4:	                   addq.l #8,sp
    84c6:	                   move.l d0,-(sp)
    84c8:	                   jsr 17704 <__fixsfsi>
    84ce:	                   addq.l #4,sp
    84d0:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    84d4:	               /-- bgt.s 84dc <wrapSpeechXY+0x58>
    84d6:	               |   moveq #1,d0
    84d8:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    84dc:	               \-> moveq #-1,d1
    84de:	                   cmp.l 52(sp),d1
    84e2:	               /-- beq.s 8522 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    84e4:	               |   move.l 1cb56 <speechMode>,d0
    84ea:	               +-- ble.s 8522 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    84ec:	               |   clr.l -(sp)
    84ee:	               |   move.l 56(sp),-(sp)
    84f2:	               |   jsr d2ee <startSound>
    84f8:	               |   addq.l #8,sp
    84fa:	               |   tst.w d0
    84fc:	               +-- beq.s 8522 <wrapSpeechXY+0x9e>
                speechTime = -10;
    84fe:	               |   moveq #-10,d0
    8500:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    8504:	               |   movea.l 1cae4 <speech>,a0
    850a:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    8510:	               |   move.l 1cb56 <speechMode>,d0
    8516:	               |   moveq #2,d1
    8518:	               |   cmp.l d0,d1
    851a:	               +-- bne.s 8522 <wrapSpeechXY+0x9e>
    851c:	               |   moveq #-10,d0
    851e:	/--------------|-- bra.w 87a8 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    8522:	|              \-> movea.l 1cae4 <speech>,a0
    8528:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    852e:	|     /----------- bra.w 85e2 <wrapSpeechXY+0x15e>
        a = wrap;
    8532:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    8538:	|  |  |        /-- bra.s 8548 <wrapSpeechXY+0xc4>
            a--;
    853a:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    853e:	|  |  |  |     +-- bne.s 8548 <wrapSpeechXY+0xc4>
                a = wrap;
    8540:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    8546:	|  |  |  |  /--|-- bra.s 855a <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    8548:	|  |  |  |  |  \-> move.l 28(sp),d0
    854c:	|  |  |  |  |      movea.l 36(sp),a0
    8550:	|  |  |  |  |      adda.l d0,a0
    8552:	|  |  |  |  |      move.b (a0),d0
    8554:	|  |  |  |  |      cmpi.b #32,d0
    8558:	|  |  |  \--|----- bne.s 853a <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    855a:	|  |  |     \----> move.l 28(sp),d0
    855e:	|  |  |            movea.l 36(sp),a0
    8562:	|  |  |            adda.l d0,a0
    8564:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    8566:	|  |  |            lea 16(sp),a0
    856a:	|  |  |            move.l a0,-(sp)
    856c:	|  |  |            move.l 44(sp),-(sp)
    8570:	|  |  |            move.l 44(sp),-(sp)
    8574:	|  |  |            jsr 7d20 <addSpeechLine>
    857a:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    857e:	|  |  |            move.l 28(sp),d0
    8582:	|  |  |            movea.l 36(sp),a0
    8586:	|  |  |            adda.l d0,a0
    8588:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    858c:	|  |  |            move.l 28(sp),d0
    8590:	|  |  |            addq.l #1,d0
    8592:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    8596:	|  |  |            move.l 44(sp),-(sp)
    859a:	|  |  |            jsr 1776c <__floatsisf>
    85a0:	|  |  |            addq.l #4,sp
    85a2:	|  |  |            move.l d0,d2
    85a4:	|  |  |            move.l 1cb80 <fontHeight>,d0
    85aa:	|  |  |            move.l d0,-(sp)
    85ac:	|  |  |            jsr 1776c <__floatsisf>
    85b2:	|  |  |            addq.l #4,sp
    85b4:	|  |  |            move.l d0,d1
    85b6:	|  |  |            move.l 1c426 <cameraZoom>,d0
    85bc:	|  |  |            move.l d0,-(sp)
    85be:	|  |  |            move.l d1,-(sp)
    85c0:	|  |  |            jsr 17622 <__divsf3>
    85c6:	|  |  |            addq.l #8,sp
    85c8:	|  |  |            move.l d0,-(sp)
    85ca:	|  |  |            move.l d2,-(sp)
    85cc:	|  |  |            jsr 17a60 <__subsf3>
    85d2:	|  |  |            addq.l #8,sp
    85d4:	|  |  |            move.l d0,-(sp)
    85d6:	|  |  |            jsr 17704 <__fixsfsi>
    85dc:	|  |  |            addq.l #4,sp
    85de:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    85e2:	|  |  \----------> move.l 36(sp),-(sp)
    85e6:	|  |               jsr 13dc6 <strlen>
    85ec:	|  |               addq.l #4,sp
    85ee:	|  |               move.l d0,d1
    85f0:	|  |               move.l 48(sp),d0
    85f4:	|  |               cmp.l d1,d0
    85f6:	|  \-------------- bcs.w 8532 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    85fa:	|                  lea 16(sp),a0
    85fe:	|                  move.l a0,-(sp)
    8600:	|                  move.l 44(sp),-(sp)
    8604:	|                  move.l 44(sp),-(sp)
    8608:	|                  jsr 7d20 <addSpeechLine>
    860e:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    8612:	|                  move.l 44(sp),-(sp)
    8616:	|                  jsr 1776c <__floatsisf>
    861c:	|                  addq.l #4,sp
    861e:	|                  move.l d0,d2
    8620:	|                  move.l 1cb80 <fontHeight>,d0
    8626:	|                  move.l d0,-(sp)
    8628:	|                  jsr 1776c <__floatsisf>
    862e:	|                  addq.l #4,sp
    8630:	|                  move.l d0,d1
    8632:	|                  move.l 1c426 <cameraZoom>,d0
    8638:	|                  move.l d0,-(sp)
    863a:	|                  move.l d1,-(sp)
    863c:	|                  jsr 17622 <__divsf3>
    8642:	|                  addq.l #8,sp
    8644:	|                  move.l d0,-(sp)
    8646:	|                  move.l d2,-(sp)
    8648:	|                  jsr 17a60 <__subsf3>
    864e:	|                  addq.l #8,sp
    8650:	|                  move.l d0,-(sp)
    8652:	|                  jsr 17704 <__fixsfsi>
    8658:	|                  addq.l #4,sp
    865a:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    865e:	|              /-- bpl.s 867c <wrapSpeechXY+0x1f8>
    8660:	|              |   movea.l 1cae4 <speech>,a0
    8666:	|              |   move.l 8(a0),d0
    866a:	|              |   movea.l 1cae4 <speech>,a0
    8670:	|              |   sub.l 44(sp),d0
    8674:	|              |   move.l d0,8(a0)
    8678:	|           /--|-- bra.w 876a <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    867c:	|           |  \-> movea.l 1cae4 <speech>,a0
    8682:	|           |      move.l 8(a0),d0
    8686:	|           |      move.l d0,-(sp)
    8688:	|           |      jsr 1776c <__floatsisf>
    868e:	|           |      addq.l #4,sp
    8690:	|           |      move.l d0,d2
    8692:	|           |      move.l 1cb46 <cameraY>,d0
    8698:	|           |      move.l d0,-(sp)
    869a:	|           |      jsr 1776c <__floatsisf>
    86a0:	|           |      addq.l #4,sp
    86a2:	|           |      move.l d0,d3
    86a4:	|           |      move.l 1c9e0 <winHeight>,d4
    86aa:	|           |      move.l 1cb80 <fontHeight>,d0
    86b0:	|           |      pea 3 <_start+0x3>
    86b4:	|           |      move.l d0,-(sp)
    86b6:	|           |      jsr 17d44 <__divsi3>
    86bc:	|           |      addq.l #8,sp
    86be:	|           |      move.l d4,d1
    86c0:	|           |      sub.l d0,d1
    86c2:	|           |      move.l d1,-(sp)
    86c4:	|           |      jsr 17794 <__floatunsisf>
    86ca:	|           |      addq.l #4,sp
    86cc:	|           |      move.l d0,d1
    86ce:	|           |      move.l 1c426 <cameraZoom>,d0
    86d4:	|           |      move.l d0,-(sp)
    86d6:	|           |      move.l d1,-(sp)
    86d8:	|           |      jsr 17622 <__divsf3>
    86de:	|           |      addq.l #8,sp
    86e0:	|           |      move.l d0,-(sp)
    86e2:	|           |      move.l d3,-(sp)
    86e4:	|           |      jsr 17528 <__addsf3>
    86ea:	|           |      addq.l #8,sp
    86ec:	|           |      move.l d0,-(sp)
    86ee:	|           |      move.l d2,-(sp)
    86f0:	|           |      jsr 178d8 <__gtsf2>
    86f6:	|           |      addq.l #8,sp
    86f8:	|           |      tst.l d0
    86fa:	|           +----- ble.s 876a <wrapSpeechXY+0x2e6>
    86fc:	|           |      move.l 1cb46 <cameraY>,d0
    8702:	|           |      move.l d0,-(sp)
    8704:	|           |      jsr 1776c <__floatsisf>
    870a:	|           |      addq.l #4,sp
    870c:	|           |      move.l d0,d2
    870e:	|           |      move.l 1c9e0 <winHeight>,d3
    8714:	|           |      move.l 1cb80 <fontHeight>,d0
    871a:	|           |      pea 3 <_start+0x3>
    871e:	|           |      move.l d0,-(sp)
    8720:	|           |      jsr 17d44 <__divsi3>
    8726:	|           |      addq.l #8,sp
    8728:	|           |      move.l d3,d1
    872a:	|           |      sub.l d0,d1
    872c:	|           |      move.l d1,-(sp)
    872e:	|           |      jsr 17794 <__floatunsisf>
    8734:	|           |      addq.l #4,sp
    8736:	|           |      move.l d0,d1
    8738:	|           |      move.l 1c426 <cameraZoom>,d0
    873e:	|           |      move.l d0,-(sp)
    8740:	|           |      move.l d1,-(sp)
    8742:	|           |      jsr 17622 <__divsf3>
    8748:	|           |      addq.l #8,sp
    874a:	|           |      move.l d0,-(sp)
    874c:	|           |      move.l d2,-(sp)
    874e:	|           |      jsr 17528 <__addsf3>
    8754:	|           |      addq.l #8,sp
    8756:	|           |      movea.l 1cae4 <speech>,a2
    875c:	|           |      move.l d0,-(sp)
    875e:	|           |      jsr 17704 <__fixsfsi>
    8764:	|           |      addq.l #4,sp
    8766:	|           |      move.l d0,8(a2)

    if (offset) {
    876a:	|           \----> move.l 16(sp),d0
    876e:	|        /-------- beq.s 87a4 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    8770:	|        |         movea.l 1cae4 <speech>,a0
    8776:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    877c:	|        |     /-- bra.s 879e <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    877e:	|        |  /--|-> movea.l 20(sp),a0
    8782:	|        |  |  |   move.l 8(a0),d1
    8786:	|        |  |  |   move.l 16(sp),d0
    878a:	|        |  |  |   add.l d1,d0
    878c:	|        |  |  |   movea.l 20(sp),a0
    8790:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    8794:	|        |  |  |   movea.l 20(sp),a0
    8798:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    879e:	|        |  |  \-> tst.l 20(sp)
    87a2:	|        |  \----- bne.s 877e <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    87a4:	|        \-------> move.l 24(sp),d0
}
    87a8:	\----------------> movem.l (sp)+,d2-d4/a2
    87ac:	                   lea 16(sp),sp
    87b0:	                   rts

000087b2 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    87b2:	       lea -12(sp),sp
    87b6:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    87b8:	       move.l 1cae8 <zBuffer>,12(sp)

	while(zbuffercursor) {
    87c0:	   /-- bra.s 87e8 <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    87c2:	/--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    87c8:	|  |   movea.l 12(sp),a0
    87cc:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    87d2:	|  |   move.l 8(sp),4(sp)
    87d8:	|  |   move.l 1ca88 <SysBase>,d0
    87de:	|  |   movea.l d0,a6
    87e0:	|  |   movea.l 4(sp),a1
    87e4:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    87e8:	|  \-> tst.l 12(sp)
    87ec:	\----- bne.s 87c2 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    87ee:	       clr.l 1cae8 <zBuffer>
}
    87f4:	       nop
    87f6:	       movea.l (sp)+,a6
    87f8:	       lea 12(sp),sp
    87fc:	       rts

000087fe <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    87fe:	                lea -304(sp),sp
    8802:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    8806:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    880a:	                jsr 87b2 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8810:	                move.l 328(sp),d0
    8814:	                move.l d0,-(sp)
    8816:	                jsr 6e10 <openFileFromNum>
    881c:	                addq.l #4,sp
    881e:	                tst.l d0
    8820:	            /-- bne.s 8828 <setZBuffer+0x2a>
    8822:	            |   clr.w d0
    8824:	/-----------|-- bra.w 8ae6 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    8828:	|           \-> move.l 1ca70 <bigDataFile>,310(sp)
    8830:	|               move.l 1ca90 <DOSBase>,d0
    8836:	|               movea.l d0,a6
    8838:	|               move.l 310(sp),d1
    883c:	|               jsr -306(a6)
    8840:	|               move.l d0,306(sp)
    8844:	|               move.l 306(sp),d0
    8848:	|               moveq #97,d1
    884a:	|               cmp.l d0,d1
    884c:	|        /----- bne.s 88c0 <setZBuffer+0xc2>
    884e:	|        |      move.l 1ca70 <bigDataFile>,302(sp)
    8856:	|        |      move.l 1ca90 <DOSBase>,d0
    885c:	|        |      movea.l d0,a6
    885e:	|        |      move.l 302(sp),d1
    8862:	|        |      jsr -306(a6)
    8866:	|        |      move.l d0,298(sp)
    886a:	|        |      move.l 298(sp),d0
    886e:	|        |      moveq #115,d1
    8870:	|        |      cmp.l d0,d1
    8872:	|        +----- bne.s 88c0 <setZBuffer+0xc2>
    8874:	|        |      move.l 1ca70 <bigDataFile>,294(sp)
    887c:	|        |      move.l 1ca90 <DOSBase>,d0
    8882:	|        |      movea.l d0,a6
    8884:	|        |      move.l 294(sp),d1
    8888:	|        |      jsr -306(a6)
    888c:	|        |      move.l d0,290(sp)
    8890:	|        |      move.l 290(sp),d0
    8894:	|        |      moveq #122,d1
    8896:	|        |      cmp.l d0,d1
    8898:	|        +----- bne.s 88c0 <setZBuffer+0xc2>
    889a:	|        |      move.l 1ca70 <bigDataFile>,286(sp)
    88a2:	|        |      move.l 1ca90 <DOSBase>,d0
    88a8:	|        |      movea.l d0,a6
    88aa:	|        |      move.l 286(sp),d1
    88ae:	|        |      jsr -306(a6)
    88b2:	|        |      move.l d0,282(sp)
    88b6:	|        |      move.l 282(sp),d0
    88ba:	|        |      moveq #98,d1
    88bc:	|        |      cmp.l d0,d1
    88be:	|        |  /-- beq.s 88d4 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    88c0:	|        \--|-> pea 190d5 <PutChar+0x12f9>
    88c6:	|           |   jsr 1733a <KPrintF>
    88cc:	|           |   addq.l #4,sp
		 return FALSE;
    88ce:	|           |   clr.w d0
    88d0:	+-----------|-- bra.w 8ae6 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    88d4:	|           \-> move.l 1ca70 <bigDataFile>,278(sp)
    88dc:	|               move.l 1ca90 <DOSBase>,d0
    88e2:	|               movea.l d0,a6
    88e4:	|               move.l 278(sp),d1
    88e8:	|               jsr -306(a6)
    88ec:	|               move.l d0,274(sp)
    88f0:	|               move.l 274(sp),d0
    88f4:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    88f8:	|               moveq #28,d0
    88fa:	|               move.l d0,270(sp)
    88fe:	|               clr.l 266(sp)
    8902:	|               move.l 1ca88 <SysBase>,d0
    8908:	|               movea.l d0,a6
    890a:	|               move.l 270(sp),d0
    890e:	|               move.l 266(sp),d1
    8912:	|               jsr -684(a6)
    8916:	|               move.l d0,262(sp)
    891a:	|               move.l 262(sp),d0
    891e:	|               move.l d0,1cae8 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8924:	|               move.l 1cae8 <zBuffer>,318(sp)

	while(numelements--)
    892c:	|     /-------- bra.w 8acc <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8930:	|  /--|-------> move.l 1ca70 <bigDataFile>,d0
    8936:	|  |  |         move.l d0,-(sp)
    8938:	|  |  |         jsr 6bc <get2bytes>
    893e:	|  |  |         addq.l #4,sp
    8940:	|  |  |         movea.l 318(sp),a0
    8944:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    8946:	|  |  |         move.l 1ca70 <bigDataFile>,d0
    894c:	|  |  |         move.l d0,-(sp)
    894e:	|  |  |         jsr 6bc <get2bytes>
    8954:	|  |  |         addq.l #4,sp
    8956:	|  |  |         movea.l 318(sp),a0
    895a:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    895e:	|  |  |         move.l 1ca70 <bigDataFile>,d0
    8964:	|  |  |         move.l d0,-(sp)
    8966:	|  |  |         jsr 6bc <get2bytes>
    896c:	|  |  |         addq.l #4,sp
    896e:	|  |  |         movea.l 318(sp),a0
    8972:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8976:	|  |  |         move.l 1ca70 <bigDataFile>,d0
    897c:	|  |  |         move.l d0,-(sp)
    897e:	|  |  |         jsr 6bc <get2bytes>
    8984:	|  |  |         addq.l #4,sp
    8986:	|  |  |         movea.l 318(sp),a0
    898a:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    898e:	|  |  |         move.l 1ca70 <bigDataFile>,d0
    8994:	|  |  |         move.l d0,-(sp)
    8996:	|  |  |         jsr 6bc <get2bytes>
    899c:	|  |  |         addq.l #4,sp
    899e:	|  |  |         movea.l 318(sp),a0
    89a2:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    89a6:	|  |  |         movea.l 318(sp),a0
    89aa:	|  |  |         move.l (a0),d0
    89ac:	|  |  |         movea.l 318(sp),a0
    89b0:	|  |  |         move.l 4(a0),d1
    89b4:	|  |  |         move.l d1,-(sp)
    89b6:	|  |  |         move.l d0,-(sp)
    89b8:	|  |  |         jsr 17cc6 <__mulsi3>
    89be:	|  |  |         addq.l #8,sp
    89c0:	|  |  |         tst.l d0
    89c2:	|  |  |     /-- bge.s 89c6 <setZBuffer+0x1c8>
    89c4:	|  |  |     |   addq.l #7,d0
    89c6:	|  |  |     \-> asr.l #3,d0
    89c8:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    89cc:	|  |  |         moveq #0,d0
    89ce:	|  |  |         move.w 260(sp),d0
    89d2:	|  |  |         move.l d0,256(sp)
    89d6:	|  |  |         moveq #2,d1
    89d8:	|  |  |         move.l d1,252(sp)
    89dc:	|  |  |         move.l 1ca88 <SysBase>,d0
    89e2:	|  |  |         movea.l d0,a6
    89e4:	|  |  |         move.l 256(sp),d0
    89e8:	|  |  |         move.l 252(sp),d1
    89ec:	|  |  |         jsr -684(a6)
    89f0:	|  |  |         move.l d0,248(sp)
    89f4:	|  |  |         move.l 248(sp),d0
    89f8:	|  |  |         movea.l 318(sp),a0
    89fc:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8a00:	|  |  |         move.l 1ca70 <bigDataFile>,244(sp)
    8a08:	|  |  |         movea.l 318(sp),a0
    8a0c:	|  |  |         move.l 20(a0),240(sp)
    8a12:	|  |  |         moveq #1,d0
    8a14:	|  |  |         move.l d0,236(sp)
    8a18:	|  |  |         moveq #0,d0
    8a1a:	|  |  |         move.w 260(sp),d0
    8a1e:	|  |  |         move.l d0,232(sp)
    8a22:	|  |  |         move.l 1ca90 <DOSBase>,d0
    8a28:	|  |  |         movea.l d0,a6
    8a2a:	|  |  |         move.l 244(sp),d1
    8a2e:	|  |  |         move.l 240(sp),d2
    8a32:	|  |  |         move.l 236(sp),d3
    8a36:	|  |  |         move.l 232(sp),d4
    8a3a:	|  |  |         jsr -324(a6)
    8a3e:	|  |  |         move.l d0,228(sp)
    8a42:	|  |  |         move.l 228(sp),d0
    8a46:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8a4a:	|  |  |         tst.w 322(sp)
    8a4e:	|  |  |  /----- beq.s 8a8a <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8a50:	|  |  |  |      moveq #28,d1
    8a52:	|  |  |  |      move.l d1,222(sp)
    8a56:	|  |  |  |      clr.l 218(sp)
    8a5a:	|  |  |  |      move.l 1ca88 <SysBase>,d0
    8a60:	|  |  |  |      movea.l d0,a6
    8a62:	|  |  |  |      move.l 222(sp),d0
    8a66:	|  |  |  |      move.l 218(sp),d1
    8a6a:	|  |  |  |      jsr -684(a6)
    8a6e:	|  |  |  |      move.l d0,214(sp)
    8a72:	|  |  |  |      move.l 214(sp),d0
    8a76:	|  |  |  |      movea.l 318(sp),a0
    8a7a:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8a7e:	|  |  |  |      movea.l 318(sp),a0
    8a82:	|  |  |  |      move.l 24(a0),318(sp)
    8a88:	|  |  |  |  /-- bra.s 8a92 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8a8a:	|  |  |  \--|-> movea.l 318(sp),a0
    8a8e:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8a92:	|  |  |     \-> movea.l 318(sp),a0
    8a96:	|  |  |         move.l 4(a0),d0
    8a9a:	|  |  |         move.l d0,d0
    8a9c:	|  |  |         movea.w d0,a1
    8a9e:	|  |  |         movea.l 318(sp),a0
    8aa2:	|  |  |         move.l (a0),d0
    8aa4:	|  |  |         move.l d0,d0
    8aa6:	|  |  |         movea.w d0,a0
    8aa8:	|  |  |         movea.l 318(sp),a2
    8aac:	|  |  |         move.l 20(a2),d0
    8ab0:	|  |  |         clr.l -(sp)
    8ab2:	|  |  |         pea 1 <_start+0x1>
    8ab6:	|  |  |         move.l a1,-(sp)
    8ab8:	|  |  |         move.l a0,-(sp)
    8aba:	|  |  |         pea 190e9 <PutChar+0x130d>
    8ac0:	|  |  |         move.l d0,-(sp)
    8ac2:	|  |  |         jsr 17422 <debug_register_bitmap>
    8ac8:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8acc:	|  |  \-------> move.w 322(sp),d0
    8ad0:	|  |            move.w d0,d1
    8ad2:	|  |            subq.w #1,d1
    8ad4:	|  |            move.w d1,322(sp)
    8ad8:	|  |            tst.w d0
    8ada:	|  \----------- bne.w 8930 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8ade:	|               jsr 6d08 <finishAccess>
	
	return TRUE;
    8ae4:	|               moveq #1,d0
}
    8ae6:	\-------------> movem.l (sp)+,d2-d4/a2/a6
    8aea:	                lea 304(sp),sp
    8aee:	                rts

00008af0 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8af0:	          lea -32(sp),sp
    8af4:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8af6:	          move.l 40(sp),d0
    8afa:	          addq.l #8,d0
    8afc:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8b00:	          clr.l 32(sp)
    8b04:	   /----- bra.s 8b4a <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8b06:	/--|----> movea.l 24(sp),a0
    8b0a:	|  |      movea.l 8(a0),a0
    8b0e:	|  |      move.l 32(sp),d1
    8b12:	|  |      move.l d1,d0
    8b14:	|  |      lsl.l #3,d0
    8b16:	|  |      sub.l d1,d0
    8b18:	|  |      add.l d0,d0
    8b1a:	|  |      add.l d0,d0
    8b1c:	|  |      adda.l d0,a0
    8b1e:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8b22:	|  |      movea.l 8(sp),a0
    8b26:	|  |      move.l 24(a0),d0
    8b2a:	|  |  /-- beq.s 8b46 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8b2c:	|  |  |   movea.l 8(sp),a0
    8b30:	|  |  |   move.l 24(a0),4(sp)
    8b36:	|  |  |   move.l 1ca88 <SysBase>,d0
    8b3c:	|  |  |   movea.l d0,a6
    8b3e:	|  |  |   movea.l 4(sp),a1
    8b42:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8b46:	|  |  \-> addq.l #1,32(sp)
    8b4a:	|  \----> movea.l 24(sp),a0
    8b4e:	|         move.l (a0),d0
    8b50:	|         cmp.l 32(sp),d0
    8b54:	\-------- bgt.s 8b06 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    8b56:	          movea.l 24(sp),a0
    8b5a:	          move.l 8(a0),20(sp)
    8b60:	          move.l 1ca88 <SysBase>,d0
    8b66:	          movea.l d0,a6
    8b68:	          movea.l 20(sp),a1
    8b6c:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8b70:	          move.l 1cba0 <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8b78:	      /-- bra.s 8b84 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8b7a:	   /--|-> movea.l 28(sp),a0
    8b7e:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8b84:	   |  \-> movea.l 28(sp),a0
    8b88:	   |      movea.l 22(a0),a0
    8b8c:	   |      move.l (a0),d1
    8b8e:	   |      movea.l 40(sp),a0
    8b92:	   |      move.l (a0),d0
    8b94:	   |      cmp.l d1,d0
    8b96:	   |  /-- beq.s 8b9e <forgetSpriteBank+0xae>
    8b98:	   |  |   tst.l 28(sp)
    8b9c:	   \--|-- bne.s 8b7a <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8b9e:	      \-> tst.l 28(sp)
    8ba2:	   /----- beq.s 8bcc <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8ba4:	   |      movea.l 40(sp),a0
    8ba8:	   |      move.l 22(a0),d0
    8bac:	   |      movea.l 28(sp),a0
    8bb0:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8bb4:	   |      move.l 40(sp),12(sp)
    8bba:	   |      move.l 1ca88 <SysBase>,d0
    8bc0:	   |      movea.l d0,a6
    8bc2:	   |      movea.l 12(sp),a1
    8bc6:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8bca:	   |  /-- bra.s 8bf2 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8bcc:	   \--|-> movea.l 1cba0 <allLoadedBanks>,a0
    8bd2:	      |   move.l 22(a0),d0
    8bd6:	      |   move.l d0,1cba0 <allLoadedBanks>
		FreeVec( forgetme);
    8bdc:	      |   move.l 40(sp),16(sp)
    8be2:	      |   move.l 1ca88 <SysBase>,d0
    8be8:	      |   movea.l d0,a6
    8bea:	      |   movea.l 16(sp),a1
    8bee:	      |   jsr -690(a6)
}
    8bf2:	      \-> nop
    8bf4:	          movea.l (sp)+,a6
    8bf6:	          lea 32(sp),sp
    8bfa:	          rts

00008bfc <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8bfc:	                      lea -84(sp),sp
    8c00:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8c04:	                      pea 190f5 <PutChar+0x1319>
    8c0a:	                      jsr 1733a <KPrintF>
    8c10:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8c12:	                      clr.l 94(sp)
    8c16:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8c1a:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8c1e:	                      move.l 108(sp),-(sp)
    8c22:	                      jsr 6e10 <openFileFromNum>
    8c28:	                      addq.l #4,sp
    8c2a:	                      tst.l d0
    8c2c:	                  /-- bne.s 8c42 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8c2e:	                  |   pea 1910f <PutChar+0x1333>
    8c34:	                  |   jsr 1733a <KPrintF>
    8c3a:	                  |   addq.l #4,sp
		return FALSE;
    8c3c:	                  |   clr.w d0
    8c3e:	/-----------------|-- bra.w 9036 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8c42:	|                 \-> move.l 1ca70 <bigDataFile>,d0
    8c48:	|                     move.l d0,-(sp)
    8c4a:	|                     jsr 6bc <get2bytes>
    8c50:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8c52:	|                     move.l 1ca70 <bigDataFile>,82(sp)
    8c5a:	|                     move.l 1ca90 <DOSBase>,d0
    8c60:	|                     movea.l d0,a6
    8c62:	|                     move.l 82(sp),d1
    8c66:	|                     jsr -306(a6)
    8c6a:	|                     move.l d0,78(sp)
    8c6e:	|                     move.l 78(sp),d0
    8c72:	|                     movea.l 112(sp),a0
    8c76:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8c7a:	|                     move.l 1ca70 <bigDataFile>,d0
    8c80:	|                     move.l d0,-(sp)
    8c82:	|                     jsr 6bc <get2bytes>
    8c88:	|                     addq.l #4,sp
    8c8a:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8c8e:	|                 /-- bgt.s 8ca4 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8c90:	|                 |   pea 1913d <PutChar+0x1361>
    8c96:	|                 |   jsr 1733a <KPrintF>
    8c9c:	|                 |   addq.l #4,sp
		return FALSE;
    8c9e:	|                 |   clr.w d0
    8ca0:	+-----------------|-- bra.w 9036 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8ca4:	|                 \-> movea.l 112(sp),a0
    8ca8:	|                     move.l 4(a0),d0
    8cac:	|                     moveq #3,d1
    8cae:	|                     cmp.l d0,d1
    8cb0:	|                 /-- bne.s 8cbe <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8cb2:	|                 |   movea.l 112(sp),a0
    8cb6:	|                 |   move.w #1,12(a0)
    8cbc:	|              /--|-- bra.s 8ce0 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8cbe:	|              |  \-> movea.l 112(sp),a0
    8cc2:	|              |      move.l 4(a0),d0
    8cc6:	|              |      moveq #3,d1
    8cc8:	|              |      cmp.l d0,d1
    8cca:	|              +----- bge.s 8ce0 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8ccc:	|              |      pea 1917d <PutChar+0x13a1>
    8cd2:	|              |      jsr 1733a <KPrintF>
    8cd8:	|              |      addq.l #4,sp
		return FALSE;
    8cda:	|              |      clr.w d0
    8cdc:	+--------------|----- bra.w 9036 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8ce0:	|              \----> movea.l 112(sp),a0
    8ce4:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8ce8:	|                     move.l 74(sp),d1
    8cec:	|                     move.l d1,d0
    8cee:	|                     lsl.l #3,d0
    8cf0:	|                     sub.l d1,d0
    8cf2:	|                     add.l d0,d0
    8cf4:	|                     add.l d0,d0
    8cf6:	|                     move.l d0,70(sp)
    8cfa:	|                     clr.l 66(sp)
    8cfe:	|                     move.l 1ca88 <SysBase>,d0
    8d04:	|                     movea.l d0,a6
    8d06:	|                     move.l 70(sp),d0
    8d0a:	|                     move.l 66(sp),d1
    8d0e:	|                     jsr -684(a6)
    8d12:	|                     move.l d0,62(sp)
    8d16:	|                     move.l 62(sp),d0
    8d1a:	|                     movea.l 112(sp),a0
    8d1e:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8d22:	|                     movea.l 112(sp),a0
    8d26:	|                     move.l 8(a0),d0
    8d2a:	|                 /-- bne.s 8d32 <loadSpriteBank+0x136>
    8d2c:	|                 |   clr.w d0
    8d2e:	+-----------------|-- bra.w 9036 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8d32:	|                 \-> moveq #1,d0
    8d34:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8d38:	|                     clr.l 100(sp)
    8d3c:	|     /-------------- bra.w 9014 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8d40:	|  /--|-------------> move.l 1ca70 <bigDataFile>,d0
    8d46:	|  |  |               move.l d0,-(sp)
    8d48:	|  |  |               jsr 6bc <get2bytes>
    8d4e:	|  |  |               addq.l #4,sp
    8d50:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8d54:	|  |  |               movea.l 112(sp),a0
    8d58:	|  |  |               movea.l 8(a0),a0
    8d5c:	|  |  |               move.l 100(sp),d1
    8d60:	|  |  |               move.l d1,d0
    8d62:	|  |  |               lsl.l #3,d0
    8d64:	|  |  |               sub.l d1,d0
    8d66:	|  |  |               add.l d0,d0
    8d68:	|  |  |               add.l d0,d0
    8d6a:	|  |  |               adda.l d0,a0
    8d6c:	|  |  |               moveq #0,d0
    8d6e:	|  |  |               move.w 60(sp),d0
    8d72:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8d74:	|  |  |               movea.l 1ca70 <bigDataFile>,a1
    8d7a:	|  |  |               movea.l 112(sp),a0
    8d7e:	|  |  |               movea.l 8(a0),a0
    8d82:	|  |  |               move.l 100(sp),d1
    8d86:	|  |  |               move.l d1,d0
    8d88:	|  |  |               lsl.l #3,d0
    8d8a:	|  |  |               sub.l d1,d0
    8d8c:	|  |  |               add.l d0,d0
    8d8e:	|  |  |               add.l d0,d0
    8d90:	|  |  |               lea (0,a0,d0.l),a2
    8d94:	|  |  |               move.l a1,-(sp)
    8d96:	|  |  |               jsr 6bc <get2bytes>
    8d9c:	|  |  |               addq.l #4,sp
    8d9e:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8da2:	|  |  |               movea.l 1ca70 <bigDataFile>,a1
    8da8:	|  |  |               movea.l 112(sp),a0
    8dac:	|  |  |               movea.l 8(a0),a0
    8db0:	|  |  |               move.l 100(sp),d1
    8db4:	|  |  |               move.l d1,d0
    8db6:	|  |  |               lsl.l #3,d0
    8db8:	|  |  |               sub.l d1,d0
    8dba:	|  |  |               add.l d0,d0
    8dbc:	|  |  |               add.l d0,d0
    8dbe:	|  |  |               lea (0,a0,d0.l),a2
    8dc2:	|  |  |               move.l a1,-(sp)
    8dc4:	|  |  |               jsr 6bc <get2bytes>
    8dca:	|  |  |               addq.l #4,sp
    8dcc:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8dd0:	|  |  |               movea.l 1ca70 <bigDataFile>,a1
    8dd6:	|  |  |               movea.l 112(sp),a0
    8dda:	|  |  |               movea.l 8(a0),a0
    8dde:	|  |  |               move.l 100(sp),d1
    8de2:	|  |  |               move.l d1,d0
    8de4:	|  |  |               lsl.l #3,d0
    8de6:	|  |  |               sub.l d1,d0
    8de8:	|  |  |               add.l d0,d0
    8dea:	|  |  |               add.l d0,d0
    8dec:	|  |  |               lea (0,a0,d0.l),a2
    8df0:	|  |  |               move.l a1,-(sp)
    8df2:	|  |  |               jsr 6bc <get2bytes>
    8df8:	|  |  |               addq.l #4,sp
    8dfa:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8dfe:	|  |  |               movea.l 112(sp),a0
    8e02:	|  |  |               move.l 4(a0),d0
    8e06:	|  |  |               moveq #3,d1
    8e08:	|  |  |               cmp.l d0,d1
    8e0a:	|  |  |     /-------- beq.w 8ea6 <loadSpriteBank+0x2aa>
    8e0e:	|  |  |     |         moveq #3,d1
    8e10:	|  |  |     |         cmp.l d0,d1
    8e12:	|  |  |  /--|-------- blt.w 8f4c <loadSpriteBank+0x350>
    8e16:	|  |  |  |  |         moveq #1,d1
    8e18:	|  |  |  |  |         cmp.l d0,d1
    8e1a:	|  |  |  |  |     /-- beq.s 8e26 <loadSpriteBank+0x22a>
    8e1c:	|  |  |  |  |     |   moveq #2,d1
    8e1e:	|  |  |  |  |     |   cmp.l d0,d1
    8e20:	|  |  |  |  |  /--|-- beq.s 8e52 <loadSpriteBank+0x256>
    8e22:	|  |  |  +--|--|--|-- bra.w 8f4c <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8e26:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    8e2a:	|  |  |  |  |  |      movea.l 8(a0),a0
    8e2e:	|  |  |  |  |  |      move.l 100(sp),d1
    8e32:	|  |  |  |  |  |      move.l d1,d0
    8e34:	|  |  |  |  |  |      lsl.l #3,d0
    8e36:	|  |  |  |  |  |      sub.l d1,d0
    8e38:	|  |  |  |  |  |      add.l d0,d0
    8e3a:	|  |  |  |  |  |      add.l d0,d0
    8e3c:	|  |  |  |  |  |      adda.l d0,a0
    8e3e:	|  |  |  |  |  |      move.l 4(a0),d0
    8e42:	|  |  |  |  |  |      addq.l #2,d0
    8e44:	|  |  |  |  |  |      move.l d0,d0
    8e46:	|  |  |  |  |  |      add.w d0,d0
    8e48:	|  |  |  |  |  |      add.w d0,d0
    8e4a:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8e4e:	|  |  |  +--|--|----- bra.w 8f4c <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8e52:	|  |  |  |  |  \----> movea.l 112(sp),a0
    8e56:	|  |  |  |  |         movea.l 8(a0),a0
    8e5a:	|  |  |  |  |         move.l 100(sp),d1
    8e5e:	|  |  |  |  |         move.l d1,d0
    8e60:	|  |  |  |  |         lsl.l #3,d0
    8e62:	|  |  |  |  |         sub.l d1,d0
    8e64:	|  |  |  |  |         add.l d0,d0
    8e66:	|  |  |  |  |         add.l d0,d0
    8e68:	|  |  |  |  |         adda.l d0,a0
    8e6a:	|  |  |  |  |         move.l (a0),d0
    8e6c:	|  |  |  |  |     /-- bpl.s 8e70 <loadSpriteBank+0x274>
    8e6e:	|  |  |  |  |     |   addq.l #7,d0
    8e70:	|  |  |  |  |     \-> asr.l #3,d0
    8e72:	|  |  |  |  |         move.l d0,d2
    8e74:	|  |  |  |  |         movea.l 112(sp),a0
    8e78:	|  |  |  |  |         movea.l 8(a0),a0
    8e7c:	|  |  |  |  |         move.l 100(sp),d1
    8e80:	|  |  |  |  |         move.l d1,d0
    8e82:	|  |  |  |  |         lsl.l #3,d0
    8e84:	|  |  |  |  |         sub.l d1,d0
    8e86:	|  |  |  |  |         add.l d0,d0
    8e88:	|  |  |  |  |         add.l d0,d0
    8e8a:	|  |  |  |  |         adda.l d0,a0
    8e8c:	|  |  |  |  |         move.l 4(a0),d0
    8e90:	|  |  |  |  |         move.l d0,d0
    8e92:	|  |  |  |  |         move.w d2,d1
    8e94:	|  |  |  |  |         muls.w d0,d1
    8e96:	|  |  |  |  |         move.w d1,d0
    8e98:	|  |  |  |  |         add.w d0,d0
    8e9a:	|  |  |  |  |         add.w d1,d0
    8e9c:	|  |  |  |  |         add.w d0,d0
    8e9e:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8ea2:	|  |  |  +--|-------- bra.w 8f4c <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8ea6:	|  |  |  |  \-------> movea.l 112(sp),a0
    8eaa:	|  |  |  |            movea.l 8(a0),a0
    8eae:	|  |  |  |            move.l 100(sp),d1
    8eb2:	|  |  |  |            move.l d1,d0
    8eb4:	|  |  |  |            lsl.l #3,d0
    8eb6:	|  |  |  |            sub.l d1,d0
    8eb8:	|  |  |  |            add.l d0,d0
    8eba:	|  |  |  |            add.l d0,d0
    8ebc:	|  |  |  |            adda.l d0,a0
    8ebe:	|  |  |  |            move.l (a0),d0
    8ec0:	|  |  |  |            andi.l #-2147483633,d0
    8ec6:	|  |  |  |        /-- bpl.s 8ed0 <loadSpriteBank+0x2d4>
    8ec8:	|  |  |  |        |   subq.l #1,d0
    8eca:	|  |  |  |        |   moveq #-16,d1
    8ecc:	|  |  |  |        |   or.l d1,d0
    8ece:	|  |  |  |        |   addq.l #1,d0
    8ed0:	|  |  |  |        \-> tst.l d0
    8ed2:	|  |  |  |     /----- ble.s 8ed8 <loadSpriteBank+0x2dc>
    8ed4:	|  |  |  |     |      moveq #2,d0
    8ed6:	|  |  |  |     |  /-- bra.s 8eda <loadSpriteBank+0x2de>
    8ed8:	|  |  |  |     \--|-> clr.w d0
    8eda:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8ede:	|  |  |  |            movea.l 112(sp),a0
    8ee2:	|  |  |  |            movea.l 8(a0),a0
    8ee6:	|  |  |  |            move.l 100(sp),d1
    8eea:	|  |  |  |            move.l d1,d0
    8eec:	|  |  |  |            lsl.l #3,d0
    8eee:	|  |  |  |            sub.l d1,d0
    8ef0:	|  |  |  |            add.l d0,d0
    8ef2:	|  |  |  |            add.l d0,d0
    8ef4:	|  |  |  |            adda.l d0,a0
    8ef6:	|  |  |  |            move.l (a0),d0
    8ef8:	|  |  |  |            movea.l d0,a0
    8efa:	|  |  |  |            cmpa.w #0,a0
    8efe:	|  |  |  |        /-- bge.s 8f04 <loadSpriteBank+0x308>
    8f00:	|  |  |  |        |   lea 15(a0),a0
    8f04:	|  |  |  |        \-> move.l a0,d0
    8f06:	|  |  |  |            asr.l #4,d0
    8f08:	|  |  |  |            add.l d0,d0
    8f0a:	|  |  |  |            move.l d0,d1
    8f0c:	|  |  |  |            moveq #0,d0
    8f0e:	|  |  |  |            move.w 58(sp),d0
    8f12:	|  |  |  |            add.l d1,d0
    8f14:	|  |  |  |            move.l d0,d2
    8f16:	|  |  |  |            movea.l 112(sp),a0
    8f1a:	|  |  |  |            movea.l 8(a0),a0
    8f1e:	|  |  |  |            move.l 100(sp),d1
    8f22:	|  |  |  |            move.l d1,d0
    8f24:	|  |  |  |            lsl.l #3,d0
    8f26:	|  |  |  |            sub.l d1,d0
    8f28:	|  |  |  |            add.l d0,d0
    8f2a:	|  |  |  |            add.l d0,d0
    8f2c:	|  |  |  |            adda.l d0,a0
    8f2e:	|  |  |  |            move.l 4(a0),d0
    8f32:	|  |  |  |            move.l d0,d0
    8f34:	|  |  |  |            move.w d2,d1
    8f36:	|  |  |  |            muls.w d0,d1
    8f38:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8f3c:	|  |  |  |            cmpi.w #100,98(sp)
    8f42:	|  |  |  |        /-- bls.s 8f4a <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8f44:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8f4a:	|  |  |  |        \-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8f4c:	|  |  |  \----------> moveq #0,d0
    8f4e:	|  |  |               move.w 98(sp),d0
    8f52:	|  |  |               add.l d0,d0
    8f54:	|  |  |               move.l d0,52(sp)
    8f58:	|  |  |               moveq #2,d0
    8f5a:	|  |  |               move.l d0,48(sp)
    8f5e:	|  |  |               move.l 1ca88 <SysBase>,d0
    8f64:	|  |  |               movea.l d0,a6
    8f66:	|  |  |               move.l 52(sp),d0
    8f6a:	|  |  |               move.l 48(sp),d1
    8f6e:	|  |  |               jsr -684(a6)
    8f72:	|  |  |               move.l d0,44(sp)
    8f76:	|  |  |               movea.l 44(sp),a1
    8f7a:	|  |  |               movea.l 112(sp),a0
    8f7e:	|  |  |               movea.l 8(a0),a0
    8f82:	|  |  |               move.l 100(sp),d1
    8f86:	|  |  |               move.l d1,d0
    8f88:	|  |  |               lsl.l #3,d0
    8f8a:	|  |  |               sub.l d1,d0
    8f8c:	|  |  |               add.l d0,d0
    8f8e:	|  |  |               add.l d0,d0
    8f90:	|  |  |               adda.l d0,a0
    8f92:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    8f96:	|  |  |               move.l 1ca70 <bigDataFile>,40(sp)
    8f9e:	|  |  |               movea.l 112(sp),a0
    8fa2:	|  |  |               movea.l 8(a0),a0
    8fa6:	|  |  |               move.l 100(sp),d1
    8faa:	|  |  |               move.l d1,d0
    8fac:	|  |  |               lsl.l #3,d0
    8fae:	|  |  |               sub.l d1,d0
    8fb0:	|  |  |               add.l d0,d0
    8fb2:	|  |  |               add.l d0,d0
    8fb4:	|  |  |               adda.l d0,a0
    8fb6:	|  |  |               move.l 24(a0),36(sp)
    8fbc:	|  |  |               moveq #2,d1
    8fbe:	|  |  |               move.l d1,32(sp)
    8fc2:	|  |  |               move.w 98(sp),d0
    8fc6:	|  |  |               lsr.w #1,d0
    8fc8:	|  |  |               move.w d0,d0
    8fca:	|  |  |               andi.l #65535,d0
    8fd0:	|  |  |               move.l d0,28(sp)
    8fd4:	|  |  |               move.l 1ca90 <DOSBase>,d0
    8fda:	|  |  |               movea.l d0,a6
    8fdc:	|  |  |               move.l 40(sp),d1
    8fe0:	|  |  |               move.l 36(sp),d2
    8fe4:	|  |  |               move.l 32(sp),d3
    8fe8:	|  |  |               move.l 28(sp),d4
    8fec:	|  |  |               jsr -324(a6)
    8ff0:	|  |  |               move.l d0,24(sp)
    8ff4:	|  |  |               move.l 24(sp),d0
    8ff8:	|  |  |               move.w d0,22(sp)
		if (!count) {
    8ffc:	|  |  |           /-- bne.s 9010 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8ffe:	|  |  |           |   pea 191b2 <PutChar+0x13d6>
    9004:	|  |  |           |   jsr 1733a <KPrintF>
    900a:	|  |  |           |   addq.l #4,sp
			return FALSE;
    900c:	|  |  |           |   clr.w d0
    900e:	+--|--|-----------|-- bra.s 9036 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    9010:	|  |  |           \-> addq.l #1,100(sp)
    9014:	|  |  \-------------> move.l 100(sp),d0
    9018:	|  |                  cmp.l 74(sp),d0
    901c:	|  \----------------- blt.w 8d40 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    9020:	|                     jsr 6d08 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    9026:	|                     pea 191e5 <PutChar+0x1409>
    902c:	|                     jsr 1733a <KPrintF>
    9032:	|                     addq.l #4,sp
	return TRUE;
    9034:	|                     moveq #1,d0
}
    9036:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    903a:	                      lea 84(sp),sp
    903e:	                      rts

00009040 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    9040:	                   lea -16(sp),sp
    9044:	                   move.l d2,-(sp)
    9046:	                   move.l 32(sp),d0
    904a:	                   move.w d0,d0
    904c:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    9050:	                   movea.l 28(sp),a0
    9054:	                   move.l (a0),d2
    9056:	                   movea.l 24(sp),a0
    905a:	                   move.l 8(a0),d0
    905e:	                   move.l d0,-(sp)
    9060:	                   jsr 1776c <__floatsisf>
    9066:	                   addq.l #4,sp
    9068:	                   move.l d0,-(sp)
    906a:	                   move.l d2,-(sp)
    906c:	                   jsr 17a60 <__subsf3>
    9072:	                   addq.l #8,sp
    9074:	                   move.l d0,-(sp)
    9076:	                   jsr 17704 <__fixsfsi>
    907c:	                   addq.l #4,sp
    907e:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    9082:	                   movea.l 28(sp),a0
    9086:	                   move.l 4(a0),d2
    908a:	                   movea.l 24(sp),a0
    908e:	                   move.l 12(a0),d0
    9092:	                   move.l d0,-(sp)
    9094:	                   jsr 1776c <__floatsisf>
    909a:	                   addq.l #4,sp
    909c:	                   move.l d0,-(sp)
    909e:	                   move.l d2,-(sp)
    90a0:	                   jsr 17a60 <__subsf3>
    90a6:	                   addq.l #8,sp
    90a8:	                   move.l d0,-(sp)
    90aa:	                   jsr 17704 <__fixsfsi>
    90b0:	                   addq.l #4,sp
    90b2:	                   move.w d0,8(sp)

	if( x < 0)
    90b6:	                   tst.w 18(sp)
    90ba:	               /-- bge.s 90ee <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    90bc:	               |   movea.l 28(sp),a0
    90c0:	               |   move.l (a0),d2
    90c2:	               |   movea.l 24(sp),a0
    90c6:	               |   move.l 8(a0),d0
    90ca:	               |   move.l d0,-(sp)
    90cc:	               |   jsr 1776c <__floatsisf>
    90d2:	               |   addq.l #4,sp
    90d4:	               |   move.l d0,-(sp)
    90d6:	               |   move.l d2,-(sp)
    90d8:	               |   jsr 17a60 <__subsf3>
    90de:	               |   addq.l #8,sp
    90e0:	               |   move.l d0,-(sp)
    90e2:	               |   jsr 17704 <__fixsfsi>
    90e8:	               |   addq.l #4,sp
    90ea:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    90ee:	               \-> movea.w 8(sp),a1
    90f2:	                   movea.w 18(sp),a0
    90f6:	                   pea 1 <_start+0x1>
    90fa:	                   move.l a1,-(sp)
    90fc:	                   move.l a0,-(sp)
    90fe:	                   move.l 40(sp),-(sp)
    9102:	                   move.l 40(sp),-(sp)
    9106:	                   jsr 2d4e <CstScaleSprite>
    910c:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    9110:	                   movea.l 28(sp),a0
    9114:	                   move.l 118(a0),d0
    9118:	                   moveq #8,d1
    911a:	                   and.l d1,d0
    911c:	   /-------------- beq.w 91e8 <scaleSprite+0x1a8>
		if (single->xhot < 0)
    9120:	   |               movea.l 24(sp),a0
    9124:	   |               move.l 8(a0),d0
    9128:	   |  /----------- bpl.s 9164 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    912a:	   |  |            move.w 18(sp),d0
    912e:	   |  |            tst.w 6(sp)
    9132:	   |  |     /----- beq.s 914c <scaleSprite+0x10c>
    9134:	   |  |     |      movea.l 24(sp),a0
    9138:	   |  |     |      move.l (a0),d1
    913a:	   |  |     |      move.l d1,d2
    913c:	   |  |     |      movea.l 24(sp),a0
    9140:	   |  |     |      move.l 8(a0),d1
    9144:	   |  |     |      move.l d1,d1
    9146:	   |  |     |      movea.w d2,a0
    9148:	   |  |     |      suba.w d1,a0
    914a:	   |  |     |  /-- bra.s 915a <scaleSprite+0x11a>
    914c:	   |  |     \--|-> movea.l 24(sp),a0
    9150:	   |  |        |   move.l 8(a0),d1
    9154:	   |  |        |   move.l d1,d1
    9156:	   |  |        |   movea.w d1,a0
    9158:	   |  |        |   addq.w #1,a0
    915a:	   |  |        \-> move.w d0,d1
    915c:	   |  |            sub.w a0,d1
    915e:	   |  |            move.w d1,16(sp)
    9162:	   |  |  /-------- bra.s 919c <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9164:	   |  \--|-------> move.w 18(sp),d1
    9168:	   |     |         tst.w 6(sp)
    916c:	   |     |  /----- beq.s 918a <scaleSprite+0x14a>
    916e:	   |     |  |      movea.l 24(sp),a0
    9172:	   |     |  |      move.l (a0),d0
    9174:	   |     |  |      move.l d0,d2
    9176:	   |     |  |      movea.l 24(sp),a0
    917a:	   |     |  |      move.l 8(a0),d0
    917e:	   |     |  |      move.l d0,d0
    9180:	   |     |  |      movea.w d2,a0
    9182:	   |     |  |      suba.w d0,a0
    9184:	   |     |  |      move.w a0,d0
    9186:	   |     |  |      subq.w #1,d0
    9188:	   |     |  |  /-- bra.s 9194 <scaleSprite+0x154>
    918a:	   |     |  \--|-> movea.l 24(sp),a0
    918e:	   |     |     |   move.l 8(a0),d0
    9192:	   |     |     |   move.l d0,d0
    9194:	   |     |     \-> movea.w d1,a0
    9196:	   |     |         suba.w d0,a0
    9198:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    919c:	   |     \-------> movea.l 28(sp),a0
    91a0:	   |               move.l 24(a0),d0
    91a4:	   |               move.l d0,d1
    91a6:	   |               movea.l 24(sp),a0
    91aa:	   |               move.l 12(a0),d0
    91ae:	   |               move.l d0,d0
    91b0:	   |               sub.w d0,d1
    91b2:	   |               move.w 8(sp),d0
    91b6:	   |               movea.w d1,a0
    91b8:	   |               adda.w d0,a0
    91ba:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    91be:	   |               movea.l 24(sp),a0
    91c2:	   |               move.l (a0),d0
    91c4:	   |               move.l d0,d0
    91c6:	   |               move.w 16(sp),d1
    91ca:	   |               add.w d0,d1
    91cc:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    91d0:	   |               movea.l 24(sp),a0
    91d4:	   |               move.l 4(a0),d0
    91d8:	   |               move.l d0,d0
    91da:	   |               movea.w 14(sp),a0
    91de:	   |               adda.w d0,a0
    91e0:	   |               move.w a0,10(sp)
    91e4:	/--|-------------- bra.w 92d0 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    91e8:	|  \-------------> move.w 18(sp),d1
    91ec:	|                  move.l 1cb42 <cameraX>,d0
    91f2:	|                  move.l d0,d0
    91f4:	|                  sub.w d0,d1
    91f6:	|                  move.w d1,18(sp)
		y -= cameraY;
    91fa:	|                  move.w 8(sp),d1
    91fe:	|                  move.l 1cb46 <cameraY>,d0
    9204:	|                  move.l d0,d0
    9206:	|                  sub.w d0,d1
    9208:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    920c:	|                  movea.l 24(sp),a0
    9210:	|                  move.l 8(a0),d0
    9214:	|     /----------- bpl.s 9250 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9216:	|     |            move.w 18(sp),d0
    921a:	|     |            tst.w 6(sp)
    921e:	|     |     /----- beq.s 9238 <scaleSprite+0x1f8>
    9220:	|     |     |      movea.l 24(sp),a0
    9224:	|     |     |      move.l (a0),d1
    9226:	|     |     |      move.l d1,d2
    9228:	|     |     |      movea.l 24(sp),a0
    922c:	|     |     |      move.l 8(a0),d1
    9230:	|     |     |      move.l d1,d1
    9232:	|     |     |      movea.w d2,a0
    9234:	|     |     |      suba.w d1,a0
    9236:	|     |     |  /-- bra.s 9246 <scaleSprite+0x206>
    9238:	|     |     \--|-> movea.l 24(sp),a0
    923c:	|     |        |   move.l 8(a0),d1
    9240:	|     |        |   move.l d1,d1
    9242:	|     |        |   movea.w d1,a0
    9244:	|     |        |   addq.w #1,a0
    9246:	|     |        \-> move.w d0,d1
    9248:	|     |            sub.w a0,d1
    924a:	|     |            move.w d1,16(sp)
    924e:	|     |  /-------- bra.s 9288 <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9250:	|     \--|-------> move.w 18(sp),d1
    9254:	|        |         tst.w 6(sp)
    9258:	|        |  /----- beq.s 9276 <scaleSprite+0x236>
    925a:	|        |  |      movea.l 24(sp),a0
    925e:	|        |  |      move.l (a0),d0
    9260:	|        |  |      move.l d0,d2
    9262:	|        |  |      movea.l 24(sp),a0
    9266:	|        |  |      move.l 8(a0),d0
    926a:	|        |  |      move.l d0,d0
    926c:	|        |  |      movea.w d2,a0
    926e:	|        |  |      suba.w d0,a0
    9270:	|        |  |      move.w a0,d0
    9272:	|        |  |      subq.w #1,d0
    9274:	|        |  |  /-- bra.s 9280 <scaleSprite+0x240>
    9276:	|        |  \--|-> movea.l 24(sp),a0
    927a:	|        |     |   move.l 8(a0),d0
    927e:	|        |     |   move.l d0,d0
    9280:	|        |     \-> movea.w d1,a0
    9282:	|        |         suba.w d0,a0
    9284:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9288:	|        \-------> movea.l 28(sp),a0
    928c:	|                  move.l 24(a0),d0
    9290:	|                  move.l d0,d1
    9292:	|                  movea.l 24(sp),a0
    9296:	|                  move.l 12(a0),d0
    929a:	|                  move.l d0,d0
    929c:	|                  sub.w d0,d1
    929e:	|                  move.w 8(sp),d0
    92a2:	|                  movea.w d1,a0
    92a4:	|                  adda.w d0,a0
    92a6:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    92aa:	|                  movea.l 24(sp),a0
    92ae:	|                  move.l (a0),d0
    92b0:	|                  move.l d0,d0
    92b2:	|                  move.w 16(sp),d1
    92b6:	|                  add.w d0,d1
    92b8:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    92bc:	|                  movea.l 24(sp),a0
    92c0:	|                  move.l 4(a0),d0
    92c4:	|                  move.l d0,d0
    92c6:	|                  movea.w 14(sp),a0
    92ca:	|                  adda.w d0,a0
    92cc:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    92d0:	\----------------> move.l 1ca44 <input+0xa>,d1
    92d6:	                   moveq #0,d0
    92d8:	                   move.w 16(sp),d0
    92dc:	                   cmp.l d1,d0
    92de:	            /----- bgt.s 9314 <scaleSprite+0x2d4>
    92e0:	            |      move.l 1ca44 <input+0xa>,d1
    92e6:	            |      moveq #0,d0
    92e8:	            |      move.w 12(sp),d0
    92ec:	            |      cmp.l d1,d0
    92ee:	            +----- blt.s 9314 <scaleSprite+0x2d4>
    92f0:	            |      move.l 1ca48 <input+0xe>,d1
    92f6:	            |      moveq #0,d0
    92f8:	            |      move.w 14(sp),d0
    92fc:	            |      cmp.l d1,d0
    92fe:	            +----- bgt.s 9314 <scaleSprite+0x2d4>
    9300:	            |      move.l 1ca48 <input+0xe>,d1
    9306:	            |      moveq #0,d0
    9308:	            |      move.w 10(sp),d0
    930c:	            |      cmp.l d1,d0
    930e:	            +----- blt.s 9314 <scaleSprite+0x2d4>
		return TRUE;
    9310:	            |      moveq #1,d0
    9312:	            |  /-- bra.s 9316 <scaleSprite+0x2d6>
	}
	return FALSE;
    9314:	            \--|-> clr.w d0
    9316:	               \-> move.l (sp)+,d2
    9318:	                   lea 16(sp),sp
    931c:	                   rts

0000931e <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    931e:	    move.l 4(sp),d0
    9322:	/-- bpl.s 9326 <TF_abs+0x8>
    9324:	|   neg.l d0
}
    9326:	\-> rts

00009328 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    9328:	             lea -28(sp),sp
    932c:	             move.l a6,-(sp)
    932e:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9330:	             move.l #132,28(sp)
    9338:	             clr.l 24(sp)
    933c:	             move.l 1ca88 <SysBase>,d0
    9342:	             movea.l d0,a6
    9344:	             move.l 28(sp),d0
    9348:	             move.l 24(sp),d1
    934c:	             jsr -684(a6)
    9350:	             move.l d0,20(sp)
    9354:	             move.l 20(sp),d0
    9358:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    935c:	         /-- bne.s 9364 <addPerson+0x3c>
    935e:	         |   clr.w d0
    9360:	/--------|-- bra.w 9594 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    9364:	|        \-> move.l 48(sp),-(sp)
    9368:	|            jsr d714 <loadObjectType>
    936e:	|            addq.l #4,sp
    9370:	|            movea.l 16(sp),a0
    9374:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9378:	|            movea.l 16(sp),a0
    937c:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    9384:	|            movea.l 16(sp),a0
    9388:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    938c:	|            movea.l 16(sp),a0
    9390:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    9394:	|            move.l 44(sp),-(sp)
    9398:	|            jsr 1776c <__floatsisf>
    939e:	|            addq.l #4,sp
    93a0:	|            move.l d0,d2
    93a2:	|            move.l 40(sp),-(sp)
    93a6:	|            jsr 1776c <__floatsisf>
    93ac:	|            addq.l #4,sp
    93ae:	|            move.l d2,-(sp)
    93b0:	|            move.l d0,-(sp)
    93b2:	|            move.l 24(sp),-(sp)
    93b6:	|            jsr ae76 <moveAndScale>
    93bc:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    93c0:	|            movea.l 16(sp),a0
    93c4:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    93c8:	|            movea.l 16(sp),a0
    93cc:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    93d2:	|            movea.l 16(sp),a0
    93d6:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    93dc:	|            movea.l 16(sp),a0
    93e0:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    93e4:	|            movea.l 16(sp),a0
    93e8:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    93ec:	|            movea.l 16(sp),a0
    93f0:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    93f6:	|            movea.l 16(sp),a0
    93fa:	|            clr.l 106(a0)
    newPerson->angle = 180;
    93fe:	|            movea.l 16(sp),a0
    9402:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    940a:	|            movea.l 16(sp),a0
    940e:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    9416:	|            movea.l 16(sp),a0
    941a:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    941e:	|            movea.l 16(sp),a0
    9422:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    9426:	|            movea.l 16(sp),a0
    942a:	|            movea.l 114(a0),a0
    942e:	|            move.l 24(a0),d0
    9432:	|            movea.l 16(sp),a0
    9436:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    943a:	|            movea.l 16(sp),a0
    943e:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9442:	|            movea.l 16(sp),a0
    9446:	|            movea.l 114(a0),a0
    944a:	|            move.l 32(a0),d0
    944e:	|            movea.l 16(sp),a0
    9452:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9456:	|            movea.l 16(sp),a0
    945a:	|            clr.b 126(a0)
    newPerson->g = 0;
    945e:	|            movea.l 16(sp),a0
    9462:	|            clr.b 127(a0)
    newPerson->b = 0;
    9466:	|            movea.l 16(sp),a0
    946a:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    946e:	|            movea.l 16(sp),a0
    9472:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    9476:	|            movea.l 16(sp),a0
    947a:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    947e:	|            movea.l 16(sp),a0
    9482:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    9488:	|            clr.l -(sp)
    948a:	|            move.l 20(sp),-(sp)
    948e:	|            jsr 8204 <setFrames>
    9494:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    9496:	|            movea.l 52(sp),a0
    949a:	|            movea.l (a0),a0
    949c:	|            movea.l (a0),a0
    949e:	|            movea.l 4(a0),a0
    94a2:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    94a6:	|     /----- bpl.s 94b0 <addPerson+0x188>
    94a8:	|     |      move.l 12(sp),d0
    94ac:	|     |      neg.l d0
    94ae:	|     |  /-- bra.s 94b2 <addPerson+0x18a>
    94b0:	|     \--|-> moveq #1,d0
    94b2:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    94b6:	|            movea.l 52(sp),a0
    94ba:	|            movea.l (a0),a0
    94bc:	|            movea.l (a0),a0
    94be:	|            movea.l (a0),a0
    94c0:	|            move.l 8(a0),d0
    94c4:	|            cmp.l 8(sp),d0
    94c8:	|     /----- bgt.s 94fa <addPerson+0x1d2>
        if (fNumSigned < 0) {
    94ca:	|     |      tst.l 12(sp)
    94ce:	|     |  /-- bge.s 94dc <addPerson+0x1b4>
            newPerson->height = 5;
    94d0:	|     |  |   movea.l 16(sp),a0
    94d4:	|     |  |   moveq #5,d0
    94d6:	|     |  |   move.l d0,20(a0)
    94da:	|  /--|--|-- bra.s 9526 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    94dc:	|  |  |  \-> movea.l 52(sp),a0
    94e0:	|  |  |      movea.l (a0),a0
    94e2:	|  |  |      movea.l (a0),a0
    94e4:	|  |  |      movea.l (a0),a0
    94e6:	|  |  |      movea.l 16(a0),a0
    94ea:	|  |  |      move.l 12(a0),d0
    94ee:	|  |  |      addq.l #5,d0
    94f0:	|  |  |      movea.l 16(sp),a0
    94f4:	|  |  |      move.l d0,20(a0)
    94f8:	|  +--|----- bra.s 9526 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    94fa:	|  |  \----> movea.l 52(sp),a0
    94fe:	|  |         movea.l (a0),a0
    9500:	|  |         movea.l (a0),a0
    9502:	|  |         movea.l (a0),a0
    9504:	|  |         movea.l 16(a0),a0
    9508:	|  |         move.l 8(sp),d1
    950c:	|  |         move.l d1,d0
    950e:	|  |         lsl.l #3,d0
    9510:	|  |         sub.l d1,d0
    9512:	|  |         add.l d0,d0
    9514:	|  |         add.l d0,d0
    9516:	|  |         adda.l d0,a0
    9518:	|  |         move.l 12(a0),d0
    951c:	|  |         addq.l #5,d0
    951e:	|  |         movea.l 16(sp),a0
    9522:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    9526:	|  \-------> move.l #117484,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    952e:	|        /-- bra.s 953e <addPerson+0x216>
        changethat = &((*changethat)->next);
    9530:	|     /--|-> movea.l 32(sp),a0
    9534:	|     |  |   move.l (a0),d0
    9536:	|     |  |   moveq #36,d1
    9538:	|     |  |   add.l d0,d1
    953a:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    953e:	|     |  \-> movea.l 32(sp),a0
    9542:	|     |      move.l (a0),d0
    9544:	|     |  /-- beq.s 956c <addPerson+0x244>
    9546:	|     |  |   movea.l 32(sp),a0
    954a:	|     |  |   movea.l (a0),a0
    954c:	|     |  |   move.l 4(a0),d2
    9550:	|     |  |   move.l 44(sp),-(sp)
    9554:	|     |  |   jsr 1776c <__floatsisf>
    955a:	|     |  |   addq.l #4,sp
    955c:	|     |  |   move.l d0,-(sp)
    955e:	|     |  |   move.l d2,-(sp)
    9560:	|     |  |   jsr 17992 <__ltsf2>
    9566:	|     |  |   addq.l #8,sp
    9568:	|     |  |   tst.l d0
    956a:	|     \--|-- blt.s 9530 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    956c:	|        \-> movea.l 32(sp),a0
    9570:	|            move.l (a0),d0
    9572:	|            movea.l 16(sp),a0
    9576:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    957a:	|            movea.l 32(sp),a0
    957e:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    9582:	|            movea.l 16(sp),a0
    9586:	|            move.l 114(a0),d0
    958a:	|            sne d0
    958c:	|            neg.b d0
    958e:	|            move.b d0,d0
    9590:	|            andi.w #255,d0
}
    9594:	\----------> move.l (sp)+,d2
    9596:	             movea.l (sp)+,a6
    9598:	             lea 28(sp),sp
    959c:	             rts

0000959e <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    959e:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    95a0:	       move.l 8(sp),-(sp)
    95a4:	       jsr a72e <findPerson>
    95aa:	       addq.l #4,sp
    95ac:	       move.l d0,(sp)
    if (moveMe) {
    95ae:	/----- beq.s 95e2 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    95b0:	|      movea.l (sp),a0
    95b2:	|      move.l 68(a0),d0
    95b6:	|  /-- beq.s 95c8 <animatePerson+0x2a>
    95b8:	|  |   movea.l (sp),a0
    95ba:	|  |   move.l 68(a0),d0
    95be:	|  |   move.l d0,-(sp)
    95c0:	|  |   jsr 47ac <abortFunction>
    95c6:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    95c8:	|  \-> movea.l (sp),a0
    95ca:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    95ce:	|      movea.l (sp),a0
    95d0:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    95d4:	|      movea.l (sp),a0
    95d6:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    95da:	|      movea.l (sp),a0
    95dc:	|      move.l 12(sp),72(a0)
    }
}
    95e2:	\----> nop
    95e4:	       addq.l #4,sp
    95e6:	       rts

000095e8 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    95e8:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    95ea:	       move.l 8(sp),-(sp)
    95ee:	       jsr a72e <findPerson>
    95f4:	       addq.l #4,sp
    95f6:	       move.l d0,(sp)
    if (moveMe) {
    95f8:	/----- beq.s 963a <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    95fa:	|      movea.l (sp),a0
    95fc:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9600:	|      movea.l (sp),a0
    9602:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    9608:	|      move.l (sp),-(sp)
    960a:	|      jsr b004 <rethinkAngle>
    9610:	|      addq.l #4,sp
        if (moveMe->walking) {
    9612:	|      movea.l (sp),a0
    9614:	|      move.w 64(a0),d0
    9618:	|  /-- beq.s 962c <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    961a:	|  |   pea 1 <_start+0x1>
    961e:	|  |   move.l 4(sp),-(sp)
    9622:	|  |   jsr 8204 <setFrames>
    9628:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    962a:	+--|-- bra.s 963a <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    962c:	|  \-> clr.l -(sp)
    962e:	|      move.l 4(sp),-(sp)
    9632:	|      jsr 8204 <setFrames>
    9638:	|      addq.l #8,sp
}
    963a:	\----> nop
    963c:	       addq.l #4,sp
    963e:	       rts

00009640 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9640:	             lea -36(sp),sp
    9644:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    9646:	             movea.l 44(sp),a0
    964a:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9650:	             moveq #12,d0
    9652:	             move.l d0,28(sp)
    9656:	             clr.l 24(sp)
    965a:	             move.l 1ca88 <SysBase>,d0
    9660:	             movea.l d0,a6
    9662:	             move.l 28(sp),d0
    9666:	             move.l 24(sp),d1
    966a:	             jsr -684(a6)
    966e:	             move.l d0,20(sp)
    9672:	             move.l 20(sp),d0
    9676:	             move.l d0,16(sp)
	if (!(newAnim)) {
    967a:	         /-- bne.s 9690 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    967c:	         |   pea 191ff <PutChar+0x1423>
    9682:	         |   jsr 1733a <KPrintF>
    9688:	         |   addq.l #4,sp
		return NULL;
    968a:	         |   moveq #0,d0
    968c:	/--------|-- bra.w 97e2 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9690:	|        \-> movea.l 44(sp),a0
    9694:	|            move.l (a0),d0
    9696:	|            movea.l 16(sp),a0
    969a:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    969c:	|            movea.l 16(sp),a0
    96a0:	|            movea.l (a0),a0
    96a2:	|            move.l 4(a0),d0
    96a6:	|            addq.l #1,d0
    96a8:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    96ac:	|            movea.l 16(sp),a0
    96b0:	|            move.l 32(sp),8(a0)

	if (num) {
    96b6:	|  /-------- beq.w 97d6 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    96ba:	|  |         move.l 32(sp),d1
    96be:	|  |         move.l d1,d0
    96c0:	|  |         add.l d0,d0
    96c2:	|  |         add.l d1,d0
    96c4:	|  |         add.l d0,d0
    96c6:	|  |         add.l d0,d0
    96c8:	|  |         move.l d0,12(sp)
    96cc:	|  |         clr.l 8(sp)
    96d0:	|  |         move.l 1ca88 <SysBase>,d0
    96d6:	|  |         movea.l d0,a6
    96d8:	|  |         move.l 12(sp),d0
    96dc:	|  |         move.l 8(sp),d1
    96e0:	|  |         jsr -684(a6)
    96e4:	|  |         move.l d0,4(sp)
    96e8:	|  |         move.l 4(sp),d0
    96ec:	|  |         movea.l 16(sp),a0
    96f0:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    96f4:	|  |         movea.l 16(sp),a0
    96f8:	|  |         move.l 4(a0),d0
    96fc:	|  |     /-- bne.s 9712 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    96fe:	|  |     |   pea 191ff <PutChar+0x1423>
    9704:	|  |     |   jsr 1733a <KPrintF>
    970a:	|  |     |   addq.l #4,sp
			return NULL;
    970c:	|  |     |   moveq #0,d0
    970e:	+--|-----|-- bra.w 97e2 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9712:	|  |     \-> clr.l 36(sp)
    9716:	|  |     /-- bra.w 97c8 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    971a:	|  |  /--|-> movea.l 44(sp),a0
    971e:	|  |  |  |   movea.l 4(a0),a0
    9722:	|  |  |  |   move.l 36(sp),d1
    9726:	|  |  |  |   move.l d1,d0
    9728:	|  |  |  |   add.l d0,d0
    972a:	|  |  |  |   add.l d1,d0
    972c:	|  |  |  |   add.l d0,d0
    972e:	|  |  |  |   add.l d0,d0
    9730:	|  |  |  |   lea (0,a0,d0.l),a1
    9734:	|  |  |  |   movea.l 16(sp),a0
    9738:	|  |  |  |   movea.l 4(a0),a0
    973c:	|  |  |  |   move.l 36(sp),d1
    9740:	|  |  |  |   move.l d1,d0
    9742:	|  |  |  |   add.l d0,d0
    9744:	|  |  |  |   add.l d1,d0
    9746:	|  |  |  |   add.l d0,d0
    9748:	|  |  |  |   add.l d0,d0
    974a:	|  |  |  |   adda.l d0,a0
    974c:	|  |  |  |   move.l (a1),d0
    974e:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9750:	|  |  |  |   movea.l 44(sp),a0
    9754:	|  |  |  |   movea.l 4(a0),a0
    9758:	|  |  |  |   move.l 36(sp),d1
    975c:	|  |  |  |   move.l d1,d0
    975e:	|  |  |  |   add.l d0,d0
    9760:	|  |  |  |   add.l d1,d0
    9762:	|  |  |  |   add.l d0,d0
    9764:	|  |  |  |   add.l d0,d0
    9766:	|  |  |  |   lea (0,a0,d0.l),a1
    976a:	|  |  |  |   movea.l 16(sp),a0
    976e:	|  |  |  |   movea.l 4(a0),a0
    9772:	|  |  |  |   move.l 36(sp),d1
    9776:	|  |  |  |   move.l d1,d0
    9778:	|  |  |  |   add.l d0,d0
    977a:	|  |  |  |   add.l d1,d0
    977c:	|  |  |  |   add.l d0,d0
    977e:	|  |  |  |   add.l d0,d0
    9780:	|  |  |  |   adda.l d0,a0
    9782:	|  |  |  |   move.l 4(a1),d0
    9786:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    978a:	|  |  |  |   movea.l 44(sp),a0
    978e:	|  |  |  |   movea.l 4(a0),a0
    9792:	|  |  |  |   move.l 36(sp),d1
    9796:	|  |  |  |   move.l d1,d0
    9798:	|  |  |  |   add.l d0,d0
    979a:	|  |  |  |   add.l d1,d0
    979c:	|  |  |  |   add.l d0,d0
    979e:	|  |  |  |   add.l d0,d0
    97a0:	|  |  |  |   lea (0,a0,d0.l),a1
    97a4:	|  |  |  |   movea.l 16(sp),a0
    97a8:	|  |  |  |   movea.l 4(a0),a0
    97ac:	|  |  |  |   move.l 36(sp),d1
    97b0:	|  |  |  |   move.l d1,d0
    97b2:	|  |  |  |   add.l d0,d0
    97b4:	|  |  |  |   add.l d1,d0
    97b6:	|  |  |  |   add.l d0,d0
    97b8:	|  |  |  |   add.l d0,d0
    97ba:	|  |  |  |   adda.l d0,a0
    97bc:	|  |  |  |   move.l 8(a1),d0
    97c0:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    97c4:	|  |  |  |   addq.l #1,36(sp)
    97c8:	|  |  |  \-> move.l 36(sp),d0
    97cc:	|  |  |      cmp.l 32(sp),d0
    97d0:	|  |  \----- blt.w 971a <copyAnim+0xda>
    97d4:	|  |     /-- bra.s 97de <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    97d6:	|  \-----|-> movea.l 16(sp),a0
    97da:	|        |   clr.l 4(a0)
	}

	return newAnim;
    97de:	|        \-> move.l 16(sp),d0
}
    97e2:	\----------> movea.l (sp)+,a6
    97e4:	             lea 36(sp),sp
    97e8:	             rts

000097ea <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    97ea:	                lea -44(sp),sp
    97ee:	                move.l a6,-(sp)
    97f0:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    97f2:	                moveq #12,d0
    97f4:	                move.l d0,40(sp)
    97f8:	                clr.l 36(sp)
    97fc:	                move.l 1ca88 <SysBase>,d0
    9802:	                movea.l d0,a6
    9804:	                move.l 40(sp),d0
    9808:	                move.l 36(sp),d1
    980c:	                jsr -684(a6)
    9810:	                move.l d0,32(sp)
    9814:	                move.l 32(sp),d0
    9818:	                move.l d0,28(sp)
	if( !newP) {
    981c:	            /-- bne.s 9832 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    981e:	            |   pea 19220 <PutChar+0x1444>
    9824:	            |   jsr 1733a <KPrintF>
    982a:	            |   addq.l #4,sp
		return NULL;
    982c:	            |   moveq #0,d0
    982e:	/-----------|-- bra.w 9a02 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9832:	|           \-> movea.l 28(sp),a0
    9836:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    983c:	|               move.l 56(sp),d1
    9840:	|               move.l d1,d0
    9842:	|               add.l d0,d0
    9844:	|               add.l d1,d0
    9846:	|               add.l d0,d0
    9848:	|               add.l d0,d0
    984a:	|               move.l d0,24(sp)
    984e:	|               clr.l 20(sp)
    9852:	|               move.l 1ca88 <SysBase>,d0
    9858:	|               movea.l d0,a6
    985a:	|               move.l 24(sp),d0
    985e:	|               move.l 20(sp),d1
    9862:	|               jsr -684(a6)
    9866:	|               move.l d0,16(sp)
    986a:	|               move.l 16(sp),d0
    986e:	|               movea.l 28(sp),a0
    9872:	|               move.l d0,4(a0)
	if( !newP->frames) {
    9876:	|               movea.l 28(sp),a0
    987a:	|               move.l 4(a0),d0
    987e:	|           /-- bne.s 9894 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9880:	|           |   pea 19220 <PutChar+0x1444>
    9886:	|           |   jsr 1733a <KPrintF>
    988c:	|           |   addq.l #4,sp
		return NULL;
    988e:	|           |   moveq #0,d0
    9890:	+-----------|-- bra.w 9a02 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    9894:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    989a:	|               movea.l 60(sp),a0
    989e:	|               move.l (a0),44(sp)
	while (a) {
    98a2:	|     /-------- bra.w 99f6 <createPersonaAnim+0x20c>
		a --;
    98a6:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    98aa:	|  |  |         movea.l 28(sp),a0
    98ae:	|  |  |         movea.l 4(a0),a0
    98b2:	|  |  |         move.l 48(sp),d1
    98b6:	|  |  |         move.l d1,d0
    98b8:	|  |  |         add.l d0,d0
    98ba:	|  |  |         add.l d1,d0
    98bc:	|  |  |         add.l d0,d0
    98be:	|  |  |         add.l d0,d0
    98c0:	|  |  |         adda.l d0,a0
    98c2:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    98c6:	|  |  |         movea.l 44(sp),a0
    98ca:	|  |  |         move.l (a0),d0
    98cc:	|  |  |         moveq #5,d1
    98ce:	|  |  |         cmp.l d0,d1
    98d0:	|  |  |     /-- bne.s 98fc <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    98d2:	|  |  |     |   movea.l 28(sp),a0
    98d6:	|  |  |     |   movea.l 4(a0),a0
    98da:	|  |  |     |   move.l 48(sp),d1
    98de:	|  |  |     |   move.l d1,d0
    98e0:	|  |  |     |   add.l d0,d0
    98e2:	|  |  |     |   add.l d1,d0
    98e4:	|  |  |     |   add.l d0,d0
    98e6:	|  |  |     |   add.l d0,d0
    98e8:	|  |  |     |   lea (0,a0,d0.l),a1
    98ec:	|  |  |     |   movea.l 44(sp),a0
    98f0:	|  |  |     |   move.l 4(a0),d0
    98f4:	|  |  |     |   move.l d0,8(a1)
    98f8:	|  |  |  /--|-- bra.w 99a4 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    98fc:	|  |  |  |  \-> movea.l 44(sp),a0
    9900:	|  |  |  |      move.l (a0),d0
    9902:	|  |  |  |      moveq #2,d1
    9904:	|  |  |  |      cmp.l d0,d1
    9906:	|  |  |  |  /-- bne.s 9932 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9908:	|  |  |  |  |   movea.l 44(sp),a0
    990c:	|  |  |  |  |   move.l 4(a0),d2
    9910:	|  |  |  |  |   movea.l 28(sp),a0
    9914:	|  |  |  |  |   movea.l 4(a0),a0
    9918:	|  |  |  |  |   move.l 48(sp),d1
    991c:	|  |  |  |  |   move.l d1,d0
    991e:	|  |  |  |  |   add.l d0,d0
    9920:	|  |  |  |  |   add.l d1,d0
    9922:	|  |  |  |  |   add.l d0,d0
    9924:	|  |  |  |  |   add.l d0,d0
    9926:	|  |  |  |  |   adda.l d0,a0
    9928:	|  |  |  |  |   move.l d2,d0
    992a:	|  |  |  |  |   neg.l d0
    992c:	|  |  |  |  |   move.l d0,8(a0)
    9930:	|  |  |  +--|-- bra.s 99a4 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9932:	|  |  |  |  \-> movea.l 44(sp),a0
    9936:	|  |  |  |      move.l (a0),d0
    9938:	|  |  |  |      moveq #6,d1
    993a:	|  |  |  |      cmp.l d0,d1
    993c:	|  |  |  |  /-- bne.s 9984 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    993e:	|  |  |  |  |   movea.l 44(sp),a0
    9942:	|  |  |  |  |   movea.l 4(a0),a0
    9946:	|  |  |  |  |   move.l (a0),d0
    9948:	|  |  |  |  |   move.l d0,-(sp)
    994a:	|  |  |  |  |   pea 1 <_start+0x1>
    994e:	|  |  |  |  |   lea 20(sp),a0
    9952:	|  |  |  |  |   move.l a0,-(sp)
    9954:	|  |  |  |  |   jsr 148da <getValueType>
    995a:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    995e:	|  |  |  |  |   movea.l 44(sp),a0
    9962:	|  |  |  |  |   movea.l 4(a0),a0
    9966:	|  |  |  |  |   movea.l (a0),a0
    9968:	|  |  |  |  |   move.l 8(a0),d0
    996c:	|  |  |  |  |   move.l d0,-(sp)
    996e:	|  |  |  |  |   pea 1 <_start+0x1>
    9972:	|  |  |  |  |   lea 16(sp),a0
    9976:	|  |  |  |  |   move.l a0,-(sp)
    9978:	|  |  |  |  |   jsr 148da <getValueType>
    997e:	|  |  |  |  |   lea 12(sp),sp
    9982:	|  |  |  +--|-- bra.s 99a4 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    9984:	|  |  |  |  \-> move.l 44(sp),d0
    9988:	|  |  |  |      move.l d0,-(sp)
    998a:	|  |  |  |      pea 1 <_start+0x1>
    998e:	|  |  |  |      lea 20(sp),a0
    9992:	|  |  |  |      move.l a0,-(sp)
    9994:	|  |  |  |      jsr 148da <getValueType>
    999a:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    999e:	|  |  |  |      moveq #1,d0
    99a0:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    99a4:	|  |  |  \----> move.l 60(sp),-(sp)
    99a8:	|  |  |         jsr 1525e <trimStack>
    99ae:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    99b0:	|  |  |         movea.l 28(sp),a0
    99b4:	|  |  |         movea.l 4(a0),a0
    99b8:	|  |  |         move.l 48(sp),d1
    99bc:	|  |  |         move.l d1,d0
    99be:	|  |  |         add.l d0,d0
    99c0:	|  |  |         add.l d1,d0
    99c2:	|  |  |         add.l d0,d0
    99c4:	|  |  |         add.l d0,d0
    99c6:	|  |  |         adda.l d0,a0
    99c8:	|  |  |         move.l 12(sp),d0
    99cc:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    99ce:	|  |  |         movea.l 28(sp),a0
    99d2:	|  |  |         movea.l 4(a0),a0
    99d6:	|  |  |         move.l 48(sp),d1
    99da:	|  |  |         move.l d1,d0
    99dc:	|  |  |         add.l d0,d0
    99de:	|  |  |         add.l d1,d0
    99e0:	|  |  |         add.l d0,d0
    99e2:	|  |  |         add.l d0,d0
    99e4:	|  |  |         adda.l d0,a0
    99e6:	|  |  |         move.l 8(sp),d0
    99ea:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    99ee:	|  |  |         movea.l 60(sp),a0
    99f2:	|  |  |         move.l (a0),44(sp)
	while (a) {
    99f6:	|  |  \-------> tst.l 48(sp)
    99fa:	|  \----------- bne.w 98a6 <createPersonaAnim+0xbc>
	}

	return newP;
    99fe:	|               move.l 28(sp),d0
}
    9a02:	\-------------> move.l (sp)+,d2
    9a04:	                movea.l (sp)+,a6
    9a06:	                lea 44(sp),sp
    9a0a:	                rts

00009a0c <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9a0c:	       lea -12(sp),sp
    9a10:	       move.l a6,-(sp)

	if(orig->theSprites)
    9a12:	       movea.l 20(sp),a0
    9a16:	       move.l (a0),d0
    9a18:	   /-- beq.s 9a42 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9a1a:	   |   movea.l 20(sp),a0
    9a1e:	   |   movea.l (a0),a0
    9a20:	   |   move.l 4(a0),d0
    9a24:	   |   subq.l #1,d0
    9a26:	   |   move.l d0,4(a0)
    9a2a:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9a30:	   +-- bne.s 9a42 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9a32:	   |   movea.l 20(sp),a0
    9a36:	   |   move.l (a0),d0
    9a38:	   |   move.l d0,-(sp)
    9a3a:	   |   jsr 8af0 <forgetSpriteBank>
    9a40:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9a42:	   \-> tst.l 20(sp)
    9a46:	/----- beq.s 9a86 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9a48:	|      movea.l 20(sp),a0
    9a4c:	|      move.l 8(a0),d0
    9a50:	|  /-- beq.s 9a6c <deleteAnim+0x60>
			FreeVec( orig->frames);
    9a52:	|  |   movea.l 20(sp),a0
    9a56:	|  |   move.l 4(a0),8(sp)
    9a5c:	|  |   move.l 1ca88 <SysBase>,d0
    9a62:	|  |   movea.l d0,a6
    9a64:	|  |   movea.l 8(sp),a1
    9a68:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9a6c:	|  \-> move.l 20(sp),4(sp)
    9a72:	|      move.l 1ca88 <SysBase>,d0
    9a78:	|      movea.l d0,a6
    9a7a:	|      movea.l 4(sp),a1
    9a7e:	|      jsr -690(a6)
		orig = NULL;
    9a82:	|      clr.l 20(sp)
	}	
	
}
    9a86:	\----> nop
    9a88:	       movea.l (sp)+,a6
    9a8a:	       lea 12(sp),sp
    9a8e:	       rts

00009a90 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9a90:	          lea -124(sp),sp
    9a94:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    9a98:	          movea.l 152(sp),a0
    9a9c:	          move.l 56(a0),d1
    9aa0:	          movea.l 152(sp),a0
    9aa4:	          move.l 60(a0),d0
    9aa8:	          cmp.l d1,d0
    9aaa:	      /-- bne.s 9ada <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9aac:	      |   movea.l 152(sp),a0
    9ab0:	      |   moveq #-1,d0
    9ab2:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    9ab6:	      |   movea.l 152(sp),a0
    9aba:	      |   move.l 40(a0),d0
    9abe:	      |   movea.l 152(sp),a0
    9ac2:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9ac6:	      |   movea.l 152(sp),a0
    9aca:	      |   move.l 44(a0),d0
    9ace:	      |   movea.l 152(sp),a0
    9ad2:	      |   move.l d0,52(a0)
    9ad6:	   /--|-- bra.w a040 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9ada:	   |  \-> movea.l 1cba4 <currentFloor>,a0
    9ae0:	   |      move.l 16(a0),d1
    9ae4:	   |      movea.l 152(sp),a0
    9ae8:	   |      move.l 56(a0),d0
    9aec:	   |      add.l d0,d0
    9aee:	   |      add.l d0,d0
    9af0:	   |      movea.l d1,a0
    9af2:	   |      adda.l d0,a0
    9af4:	   |      move.l (a0),d1
    9af6:	   |      movea.l 152(sp),a0
    9afa:	   |      move.l 60(a0),d0
    9afe:	   |      add.l d0,d0
    9b00:	   |      add.l d0,d0
    9b02:	   |      movea.l d1,a0
    9b04:	   |      adda.l d0,a0
    9b06:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9b0a:	   |      moveq #-1,d0
    9b0c:	   |      cmp.l 144(sp),d0
    9b10:	   |  /-- bne.s 9b18 <doBorderStuff+0x88>
    9b12:	   |  |   clr.w d0
    9b14:	/--|--|-- bra.w a140 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9b18:	|  |  \-> movea.l 1cba4 <currentFloor>,a0
    9b1e:	|  |      move.l 12(a0),d1
    9b22:	|  |      move.l 144(sp),d0
    9b26:	|  |      lsl.l #3,d0
    9b28:	|  |      add.l d0,d1
    9b2a:	|  |      movea.l 1cba4 <currentFloor>,a0
    9b30:	|  |      movea.l 12(a0),a1
    9b34:	|  |      movea.l 152(sp),a0
    9b38:	|  |      move.l 56(a0),d0
    9b3c:	|  |      lsl.l #3,d0
    9b3e:	|  |      add.l a1,d0
    9b40:	|  |      lea 40(sp),a0
    9b44:	|  |      move.l a0,-(sp)
    9b46:	|  |      lea 48(sp),a0
    9b4a:	|  |      move.l a0,-(sp)
    9b4c:	|  |      move.l d1,-(sp)
    9b4e:	|  |      move.l d0,-(sp)
    9b50:	|  |      jsr 165bc <getMatchingCorners>
    9b56:	|  |      lea 16(sp),sp
    9b5a:	|  |      tst.w d0
    9b5c:	|  |  /-- bne.s 9b72 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9b5e:	|  |  |   pea 1924a <PutChar+0x146e>
    9b64:	|  |  |   jsr 1733a <KPrintF>
    9b6a:	|  |  |   addq.l #4,sp
            return FALSE;
    9b6c:	|  |  |   clr.w d0
    9b6e:	+--|--|-- bra.w a140 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9b72:	|  |  \-> movea.l 152(sp),a0
    9b76:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9b7c:	|  |      movea.l 152(sp),a0
    9b80:	|  |      move.l (a0),d0
    9b82:	|  |      move.l d0,-(sp)
    9b84:	|  |      jsr 17704 <__fixsfsi>
    9b8a:	|  |      addq.l #4,sp
    9b8c:	|  |      move.l d0,140(sp)
    9b90:	|  |      movea.l 152(sp),a0
    9b94:	|  |      move.l 4(a0),d0
    9b98:	|  |      move.l d0,-(sp)
    9b9a:	|  |      jsr 17704 <__fixsfsi>
    9ba0:	|  |      addq.l #4,sp
    9ba2:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9ba6:	|  |      movea.l 152(sp),a0
    9baa:	|  |      move.l 40(a0),132(sp)
    9bb0:	|  |      movea.l 152(sp),a0
    9bb4:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9bba:	|  |      movea.l 1cba4 <currentFloor>,a0
    9bc0:	|  |      move.l 4(a0),d1
    9bc4:	|  |      move.l 44(sp),d0
    9bc8:	|  |      lsl.l #3,d0
    9bca:	|  |      movea.l d1,a0
    9bcc:	|  |      adda.l d0,a0
    9bce:	|  |      move.l (a0),124(sp)
    9bd2:	|  |      movea.l 1cba4 <currentFloor>,a0
    9bd8:	|  |      move.l 4(a0),d1
    9bdc:	|  |      move.l 44(sp),d0
    9be0:	|  |      lsl.l #3,d0
    9be2:	|  |      movea.l d1,a0
    9be4:	|  |      adda.l d0,a0
    9be6:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9bec:	|  |      movea.l 1cba4 <currentFloor>,a0
    9bf2:	|  |      move.l 4(a0),d1
    9bf6:	|  |      move.l 40(sp),d0
    9bfa:	|  |      lsl.l #3,d0
    9bfc:	|  |      movea.l d1,a0
    9bfe:	|  |      adda.l d0,a0
    9c00:	|  |      move.l (a0),116(sp)
    9c04:	|  |      movea.l 1cba4 <currentFloor>,a0
    9c0a:	|  |      move.l 4(a0),d1
    9c0e:	|  |      move.l 40(sp),d0
    9c12:	|  |      lsl.l #3,d0
    9c14:	|  |      movea.l d1,a0
    9c16:	|  |      adda.l d0,a0
    9c18:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9c1e:	|  |      move.l 140(sp),d0
    9c22:	|  |      sub.l 132(sp),d0
    9c26:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9c2a:	|  |      move.l 136(sp),d0
    9c2e:	|  |      sub.l 128(sp),d0
    9c32:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9c36:	|  |      move.l 116(sp),d0
    9c3a:	|  |      sub.l 124(sp),d0
    9c3e:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9c42:	|  |      move.l 112(sp),d0
    9c46:	|  |      sub.l 120(sp),d0
    9c4a:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9c4e:	|  |      move.l 124(sp),d0
    9c52:	|  |      sub.l 140(sp),d0
    9c56:	|  |      move.l 104(sp),-(sp)
    9c5a:	|  |      move.l d0,-(sp)
    9c5c:	|  |      jsr 17cc6 <__mulsi3>
    9c62:	|  |      addq.l #8,sp
    9c64:	|  |      move.l d0,d2
    9c66:	|  |      move.l 120(sp),d0
    9c6a:	|  |      sub.l 136(sp),d0
    9c6e:	|  |      move.l 108(sp),-(sp)
    9c72:	|  |      move.l d0,-(sp)
    9c74:	|  |      jsr 17cc6 <__mulsi3>
    9c7a:	|  |      addq.l #8,sp
    9c7c:	|  |      move.l d2,d1
    9c7e:	|  |      sub.l d0,d1
    9c80:	|  |      move.l d1,-(sp)
    9c82:	|  |      jsr 1772c <__floatsidf>
    9c88:	|  |      addq.l #4,sp
    9c8a:	|  |      move.l d0,32(sp)
    9c8e:	|  |      move.l d1,36(sp)
    9c92:	|  |      move.l 32(sp),88(sp)
    9c98:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9c9e:	|  |      move.l 96(sp),-(sp)
    9ca2:	|  |      move.l 112(sp),-(sp)
    9ca6:	|  |      jsr 17cc6 <__mulsi3>
    9cac:	|  |      addq.l #8,sp
    9cae:	|  |      move.l d0,d2
    9cb0:	|  |      move.l 100(sp),-(sp)
    9cb4:	|  |      move.l 108(sp),-(sp)
    9cb8:	|  |      jsr 17cc6 <__mulsi3>
    9cbe:	|  |      addq.l #8,sp
    9cc0:	|  |      move.l d2,d1
    9cc2:	|  |      sub.l d0,d1
    9cc4:	|  |      move.l d1,-(sp)
    9cc6:	|  |      jsr 1772c <__floatsidf>
    9ccc:	|  |      addq.l #4,sp
    9cce:	|  |      move.l d1,-(sp)
    9cd0:	|  |      move.l d0,-(sp)
    9cd2:	|  |      move.l 100(sp),-(sp)
    9cd6:	|  |      move.l 100(sp),-(sp)
    9cda:	|  |      jsr 175c0 <__divdf3>
    9ce0:	|  |      lea 16(sp),sp
    9ce4:	|  |      move.l d0,24(sp)
    9ce8:	|  |      move.l d1,28(sp)
    9cec:	|  |      move.l 24(sp),88(sp)
    9cf2:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9cf8:	|  |      clr.l -(sp)
    9cfa:	|  |      clr.l -(sp)
    9cfc:	|  |      move.l 100(sp),-(sp)
    9d00:	|  |      move.l 100(sp),-(sp)
    9d04:	|  |      jsr 1788a <__gtdf2>
    9d0a:	|  |      lea 16(sp),sp
    9d0e:	|  |      tst.l d0
    9d10:	|  |  /-- ble.w 9de8 <doBorderStuff+0x358>
    9d14:	|  |  |   clr.l -(sp)
    9d16:	|  |  |   move.l #1072693248,-(sp)
    9d1c:	|  |  |   move.l 100(sp),-(sp)
    9d20:	|  |  |   move.l 100(sp),-(sp)
    9d24:	|  |  |   jsr 17944 <__ltdf2>
    9d2a:	|  |  |   lea 16(sp),sp
    9d2e:	|  |  |   tst.l d0
    9d30:	|  |  +-- bge.w 9de8 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9d34:	|  |  |   move.l 124(sp),-(sp)
    9d38:	|  |  |   jsr 1772c <__floatsidf>
    9d3e:	|  |  |   addq.l #4,sp
    9d40:	|  |  |   move.l d0,d2
    9d42:	|  |  |   move.l d1,d3
    9d44:	|  |  |   move.l 100(sp),-(sp)
    9d48:	|  |  |   jsr 1772c <__floatsidf>
    9d4e:	|  |  |   addq.l #4,sp
    9d50:	|  |  |   move.l 92(sp),-(sp)
    9d54:	|  |  |   move.l 92(sp),-(sp)
    9d58:	|  |  |   move.l d1,-(sp)
    9d5a:	|  |  |   move.l d0,-(sp)
    9d5c:	|  |  |   jsr 177bc <__muldf3>
    9d62:	|  |  |   lea 16(sp),sp
    9d66:	|  |  |   move.l d1,-(sp)
    9d68:	|  |  |   move.l d0,-(sp)
    9d6a:	|  |  |   move.l d3,-(sp)
    9d6c:	|  |  |   move.l d2,-(sp)
    9d6e:	|  |  |   jsr 1755e <__adddf3>
    9d74:	|  |  |   lea 16(sp),sp
    9d78:	|  |  |   move.l d1,-(sp)
    9d7a:	|  |  |   move.l d0,-(sp)
    9d7c:	|  |  |   jsr 176ce <__fixdfsi>
    9d82:	|  |  |   addq.l #8,sp
    9d84:	|  |  |   movea.l 152(sp),a0
    9d88:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9d8c:	|  |  |   move.l 120(sp),-(sp)
    9d90:	|  |  |   jsr 1772c <__floatsidf>
    9d96:	|  |  |   addq.l #4,sp
    9d98:	|  |  |   move.l d0,d2
    9d9a:	|  |  |   move.l d1,d3
    9d9c:	|  |  |   move.l 96(sp),-(sp)
    9da0:	|  |  |   jsr 1772c <__floatsidf>
    9da6:	|  |  |   addq.l #4,sp
    9da8:	|  |  |   move.l 92(sp),-(sp)
    9dac:	|  |  |   move.l 92(sp),-(sp)
    9db0:	|  |  |   move.l d1,-(sp)
    9db2:	|  |  |   move.l d0,-(sp)
    9db4:	|  |  |   jsr 177bc <__muldf3>
    9dba:	|  |  |   lea 16(sp),sp
    9dbe:	|  |  |   move.l d1,-(sp)
    9dc0:	|  |  |   move.l d0,-(sp)
    9dc2:	|  |  |   move.l d3,-(sp)
    9dc4:	|  |  |   move.l d2,-(sp)
    9dc6:	|  |  |   jsr 1755e <__adddf3>
    9dcc:	|  |  |   lea 16(sp),sp
    9dd0:	|  |  |   move.l d1,-(sp)
    9dd2:	|  |  |   move.l d0,-(sp)
    9dd4:	|  |  |   jsr 176ce <__fixdfsi>
    9dda:	|  |  |   addq.l #8,sp
    9ddc:	|  |  |   movea.l 152(sp),a0
    9de0:	|  |  |   move.l d0,52(a0)
    9de4:	|  +--|-- bra.w a040 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9de8:	|  |  \-> move.l 140(sp),d0
    9dec:	|  |      sub.l 124(sp),d0
    9df0:	|  |      move.l d0,84(sp)
    9df4:	|  |      move.l 140(sp),d0
    9df8:	|  |      sub.l 116(sp),d0
    9dfc:	|  |      move.l d0,80(sp)
    9e00:	|  |      move.l 132(sp),d0
    9e04:	|  |      sub.l 124(sp),d0
    9e08:	|  |      move.l d0,76(sp)
    9e0c:	|  |      move.l 132(sp),d0
    9e10:	|  |      sub.l 116(sp),d0
    9e14:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9e18:	|  |      move.l 136(sp),d0
    9e1c:	|  |      sub.l 120(sp),d0
    9e20:	|  |      move.l d0,68(sp)
    9e24:	|  |      move.l 136(sp),d0
    9e28:	|  |      sub.l 112(sp),d0
    9e2c:	|  |      move.l d0,64(sp)
    9e30:	|  |      move.l 128(sp),d0
    9e34:	|  |      sub.l 120(sp),d0
    9e38:	|  |      move.l d0,60(sp)
    9e3c:	|  |      move.l 128(sp),d0
    9e40:	|  |      sub.l 112(sp),d0
    9e44:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9e48:	|  |      move.l 84(sp),-(sp)
    9e4c:	|  |      move.l 88(sp),-(sp)
    9e50:	|  |      jsr 17cc6 <__mulsi3>
    9e56:	|  |      addq.l #8,sp
    9e58:	|  |      move.l d0,84(sp)
    9e5c:	|  |      move.l 80(sp),-(sp)
    9e60:	|  |      move.l 84(sp),-(sp)
    9e64:	|  |      jsr 17cc6 <__mulsi3>
    9e6a:	|  |      addq.l #8,sp
    9e6c:	|  |      move.l d0,80(sp)
    9e70:	|  |      move.l 76(sp),-(sp)
    9e74:	|  |      move.l 80(sp),-(sp)
    9e78:	|  |      jsr 17cc6 <__mulsi3>
    9e7e:	|  |      addq.l #8,sp
    9e80:	|  |      move.l d0,76(sp)
    9e84:	|  |      move.l 72(sp),-(sp)
    9e88:	|  |      move.l 76(sp),-(sp)
    9e8c:	|  |      jsr 17cc6 <__mulsi3>
    9e92:	|  |      addq.l #8,sp
    9e94:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9e98:	|  |      move.l 68(sp),-(sp)
    9e9c:	|  |      move.l 72(sp),-(sp)
    9ea0:	|  |      jsr 17cc6 <__mulsi3>
    9ea6:	|  |      addq.l #8,sp
    9ea8:	|  |      move.l d0,68(sp)
    9eac:	|  |      move.l 64(sp),-(sp)
    9eb0:	|  |      move.l 68(sp),-(sp)
    9eb4:	|  |      jsr 17cc6 <__mulsi3>
    9eba:	|  |      addq.l #8,sp
    9ebc:	|  |      move.l d0,64(sp)
    9ec0:	|  |      move.l 60(sp),-(sp)
    9ec4:	|  |      move.l 64(sp),-(sp)
    9ec8:	|  |      jsr 17cc6 <__mulsi3>
    9ece:	|  |      addq.l #8,sp
    9ed0:	|  |      move.l d0,60(sp)
    9ed4:	|  |      move.l 56(sp),-(sp)
    9ed8:	|  |      move.l 60(sp),-(sp)
    9edc:	|  |      jsr 17cc6 <__mulsi3>
    9ee2:	|  |      addq.l #8,sp
    9ee4:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9ee8:	|  |      move.l 84(sp),-(sp)
    9eec:	|  |      jsr 1772c <__floatsidf>
    9ef2:	|  |      addq.l #4,sp
    9ef4:	|  |      move.l d0,d2
    9ef6:	|  |      move.l d1,d3
    9ef8:	|  |      move.l 68(sp),-(sp)
    9efc:	|  |      jsr 1772c <__floatsidf>
    9f02:	|  |      addq.l #4,sp
    9f04:	|  |      move.l d1,-(sp)
    9f06:	|  |      move.l d0,-(sp)
    9f08:	|  |      move.l d3,-(sp)
    9f0a:	|  |      move.l d2,-(sp)
    9f0c:	|  |      jsr 1755e <__adddf3>
    9f12:	|  |      lea 16(sp),sp
    9f16:	|  |      move.l d1,-(sp)
    9f18:	|  |      move.l d0,-(sp)
    9f1a:	|  |      jsr 17c7c <sqrt>
    9f20:	|  |      addq.l #8,sp
    9f22:	|  |      move.l d0,d2
    9f24:	|  |      move.l d1,d3
    9f26:	|  |      move.l 76(sp),-(sp)
    9f2a:	|  |      jsr 1772c <__floatsidf>
    9f30:	|  |      addq.l #4,sp
    9f32:	|  |      move.l d0,d4
    9f34:	|  |      move.l d1,d5
    9f36:	|  |      move.l 60(sp),-(sp)
    9f3a:	|  |      jsr 1772c <__floatsidf>
    9f40:	|  |      addq.l #4,sp
    9f42:	|  |      move.l d1,-(sp)
    9f44:	|  |      move.l d0,-(sp)
    9f46:	|  |      move.l d5,-(sp)
    9f48:	|  |      move.l d4,-(sp)
    9f4a:	|  |      jsr 1755e <__adddf3>
    9f50:	|  |      lea 16(sp),sp
    9f54:	|  |      move.l d1,-(sp)
    9f56:	|  |      move.l d0,-(sp)
    9f58:	|  |      jsr 17c7c <sqrt>
    9f5e:	|  |      addq.l #8,sp
    9f60:	|  |      move.l d1,-(sp)
    9f62:	|  |      move.l d0,-(sp)
    9f64:	|  |      move.l d3,-(sp)
    9f66:	|  |      move.l d2,-(sp)
    9f68:	|  |      jsr 1755e <__adddf3>
    9f6e:	|  |      lea 16(sp),sp
    9f72:	|  |      move.l d0,d2
    9f74:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    9f76:	|  |      move.l 80(sp),-(sp)
    9f7a:	|  |      jsr 1772c <__floatsidf>
    9f80:	|  |      addq.l #4,sp
    9f82:	|  |      move.l d0,d4
    9f84:	|  |      move.l d1,d5
    9f86:	|  |      move.l 64(sp),-(sp)
    9f8a:	|  |      jsr 1772c <__floatsidf>
    9f90:	|  |      addq.l #4,sp
    9f92:	|  |      move.l d1,-(sp)
    9f94:	|  |      move.l d0,-(sp)
    9f96:	|  |      move.l d5,-(sp)
    9f98:	|  |      move.l d4,-(sp)
    9f9a:	|  |      jsr 1755e <__adddf3>
    9fa0:	|  |      lea 16(sp),sp
    9fa4:	|  |      move.l d1,-(sp)
    9fa6:	|  |      move.l d0,-(sp)
    9fa8:	|  |      jsr 17c7c <sqrt>
    9fae:	|  |      addq.l #8,sp
    9fb0:	|  |      move.l d0,d4
    9fb2:	|  |      move.l d1,d5
    9fb4:	|  |      move.l 72(sp),-(sp)
    9fb8:	|  |      jsr 1772c <__floatsidf>
    9fbe:	|  |      addq.l #4,sp
    9fc0:	|  |      move.l d0,d6
    9fc2:	|  |      move.l d1,d7
    9fc4:	|  |      move.l 56(sp),-(sp)
    9fc8:	|  |      jsr 1772c <__floatsidf>
    9fce:	|  |      addq.l #4,sp
    9fd0:	|  |      move.l d1,-(sp)
    9fd2:	|  |      move.l d0,-(sp)
    9fd4:	|  |      move.l d7,-(sp)
    9fd6:	|  |      move.l d6,-(sp)
    9fd8:	|  |      jsr 1755e <__adddf3>
    9fde:	|  |      lea 16(sp),sp
    9fe2:	|  |      move.l d1,-(sp)
    9fe4:	|  |      move.l d0,-(sp)
    9fe6:	|  |      jsr 17c7c <sqrt>
    9fec:	|  |      addq.l #8,sp
    9fee:	|  |      move.l d1,-(sp)
    9ff0:	|  |      move.l d0,-(sp)
    9ff2:	|  |      move.l d5,-(sp)
    9ff4:	|  |      move.l d4,-(sp)
    9ff6:	|  |      jsr 1755e <__adddf3>
    9ffc:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a000:	|  |      move.l d1,-(sp)
    a002:	|  |      move.l d0,-(sp)
    a004:	|  |      move.l d3,-(sp)
    a006:	|  |      move.l d2,-(sp)
    a008:	|  |      jsr 17944 <__ltdf2>
    a00e:	|  |      lea 16(sp),sp
    a012:	|  |      tst.l d0
    a014:	|  |  /-- bge.s a02c <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a016:	|  |  |   movea.l 152(sp),a0
    a01a:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a020:	|  |  |   movea.l 152(sp),a0
    a024:	|  |  |   move.l 120(sp),52(a0)
    a02a:	|  +--|-- bra.s a040 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a02c:	|  |  \-> movea.l 152(sp),a0
    a030:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a036:	|  |      movea.l 152(sp),a0
    a03a:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a040:	|  \----> movea.l 152(sp),a0
    a044:	|         move.l 52(a0),d0
    a048:	|         move.l d0,-(sp)
    a04a:	|         jsr 1776c <__floatsisf>
    a050:	|         addq.l #4,sp
    a052:	|         move.l d0,d1
    a054:	|         movea.l 152(sp),a0
    a058:	|         move.l 4(a0),d0
    a05c:	|         move.l d0,-(sp)
    a05e:	|         move.l d1,-(sp)
    a060:	|         jsr 17a60 <__subsf3>
    a066:	|         addq.l #8,sp
    a068:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a06c:	|         movea.l 152(sp),a0
    a070:	|         move.l (a0),d2
    a072:	|         movea.l 152(sp),a0
    a076:	|         move.l 48(a0),d0
    a07a:	|         move.l d0,-(sp)
    a07c:	|         jsr 1776c <__floatsisf>
    a082:	|         addq.l #4,sp
    a084:	|         move.l d0,-(sp)
    a086:	|         move.l d2,-(sp)
    a088:	|         jsr 17a60 <__subsf3>
    a08e:	|         addq.l #8,sp
    a090:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a094:	|         clr.l -(sp)
    a096:	|         move.l 52(sp),-(sp)
    a09a:	|         jsr 179c8 <__nesf2>
    a0a0:	|         addq.l #8,sp
    a0a2:	|         tst.l d0
    a0a4:	|     /-- bne.s a0b8 <doBorderStuff+0x628>
    a0a6:	|     |   clr.l -(sp)
    a0a8:	|     |   move.l 56(sp),-(sp)
    a0ac:	|     |   jsr 179c8 <__nesf2>
    a0b2:	|     |   addq.l #8,sp
    a0b4:	|     |   tst.l d0
    a0b6:	|  /--|-- beq.s a12e <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a0b8:	|  |  \-> move.l 52(sp),d0
    a0bc:	|  |      move.l d0,-(sp)
    a0be:	|  |      move.l d0,-(sp)
    a0c0:	|  |      jsr 17528 <__addsf3>
    a0c6:	|  |      addq.l #8,sp
    a0c8:	|  |      move.l d0,-(sp)
    a0ca:	|  |      move.l 52(sp),-(sp)
    a0ce:	|  |      jsr 17acc <atan2f>
    a0d4:	|  |      addq.l #8,sp
    a0d6:	|  |      move.l d0,-(sp)
    a0d8:	|  |      jsr 1768e <__extendsfdf2>
    a0de:	|  |      addq.l #4,sp
    a0e0:	|  |      move.l #-1540411785,-(sp)
    a0e6:	|  |      move.l #1078765033,-(sp)
    a0ec:	|  |      move.l d1,-(sp)
    a0ee:	|  |      move.l d0,-(sp)
    a0f0:	|  |      jsr 177bc <__muldf3>
    a0f6:	|  |      lea 16(sp),sp
    a0fa:	|  |      clr.l -(sp)
    a0fc:	|  |      move.l #1080459264,-(sp)
    a102:	|  |      move.l d1,-(sp)
    a104:	|  |      move.l d0,-(sp)
    a106:	|  |      jsr 1755e <__adddf3>
    a10c:	|  |      lea 16(sp),sp
    a110:	|  |      move.l d1,-(sp)
    a112:	|  |      move.l d0,-(sp)
    a114:	|  |      jsr 176ce <__fixdfsi>
    a11a:	|  |      addq.l #8,sp
    a11c:	|  |      movea.l 152(sp),a0
    a120:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a124:	|  |      movea.l 152(sp),a0
    a128:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a12e:	|  \----> pea 1 <_start+0x1>
    a132:	|         move.l 156(sp),-(sp)
    a136:	|         jsr 8204 <setFrames>
    a13c:	|         addq.l #8,sp
    return TRUE;
    a13e:	|         moveq #1,d0
}
    a140:	\-------> movem.l (sp)+,d2-d7
    a144:	          lea 124(sp),sp
    a148:	          rts

0000a14a <drawPeople>:

void drawPeople () {
    a14a:	                   lea -24(sp),sp
    a14e:	                   move.l d2,-(sp)

	shufflePeople ();
    a150:	                   jsr bbe6 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a156:	                   move.l 1caec <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a15e:	                   clr.l 20(sp)
	overRegion = NULL;
    a162:	                   clr.l 1cb9c <overRegion>

	while (thisPerson) {
    a168:	   /-------------- bra.w a71a <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a16c:	/--|-------------> movea.l 24(sp),a0
    a170:	|  |               move.w 104(a0),d0
    a174:	|  |  /----------- beq.w a4ce <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a178:	|  |  |            movea.l 24(sp),a0
    a17c:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a182:	|  |  |            movea.l 24(sp),a0
    a186:	|  |  |            move.l 76(a0),d0
    a18a:	|  |  |            cmp.l 20(sp),d0
    a18e:	|  |  |  /-------- beq.w a35c <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a192:	|  |  |  |         movea.l 24(sp),a0
    a196:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a19a:	|  |  |  |         movea.l 24(sp),a0
    a19e:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a1a4:	|  |  |  |         movea.l 24(sp),a0
    a1a8:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a1ac:	|  |  |  |         movea.l 20(sp),a0
    a1b0:	|  |  |  |         movea.l 4(a0),a0
    a1b4:	|  |  |  |         move.l 4(a0),d0
    a1b8:	|  |  |  |         movea.l 24(sp),a0
    a1bc:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a1c0:	|  |  |  |         movea.l 20(sp),a0
    a1c4:	|  |  |  |         movea.l 4(a0),a1
    a1c8:	|  |  |  |         movea.l 24(sp),a0
    a1cc:	|  |  |  |         move.l 84(a0),d0
    a1d0:	|  |  |  |         move.l d0,d1
    a1d2:	|  |  |  |         move.l d1,d0
    a1d4:	|  |  |  |         add.l d0,d0
    a1d6:	|  |  |  |         add.l d1,d0
    a1d8:	|  |  |  |         add.l d0,d0
    a1da:	|  |  |  |         add.l d0,d0
    a1dc:	|  |  |  |         lea (0,a1,d0.l),a0
    a1e0:	|  |  |  |         move.l 8(a0),d0
    a1e4:	|  |  |  |     /-- ble.w a286 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a1e8:	|  |  |  |     |   movea.l 20(sp),a0
    a1ec:	|  |  |  |     |   movea.l 4(a0),a1
    a1f0:	|  |  |  |     |   movea.l 24(sp),a0
    a1f4:	|  |  |  |     |   move.l 84(a0),d0
    a1f8:	|  |  |  |     |   move.l d0,d1
    a1fa:	|  |  |  |     |   move.l d1,d0
    a1fc:	|  |  |  |     |   add.l d0,d0
    a1fe:	|  |  |  |     |   add.l d1,d0
    a200:	|  |  |  |     |   add.l d0,d0
    a202:	|  |  |  |     |   add.l d0,d0
    a204:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a208:	|  |  |  |     |   move.l 8(a0),d0
    a20c:	|  |  |  |     |   clr.l -(sp)
    a20e:	|  |  |  |     |   move.l d0,-(sp)
    a210:	|  |  |  |     |   jsr d2ee <startSound>
    a216:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a218:	|  |  |  |     |   movea.l 24(sp),a0
    a21c:	|  |  |  |     |   move.l 84(a0),d0
    a220:	|  |  |  |     |   addq.l #1,d0
    a222:	|  |  |  |     |   movea.l 24(sp),a0
    a226:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a22a:	|  |  |  |     |   movea.l 24(sp),a0
    a22e:	|  |  |  |     |   move.l 84(a0),d0
    a232:	|  |  |  |     |   movea.l 24(sp),a0
    a236:	|  |  |  |     |   movea.l 72(a0),a0
    a23a:	|  |  |  |     |   move.l 8(a0),d1
    a23e:	|  |  |  |     |   move.l d1,-(sp)
    a240:	|  |  |  |     |   move.l d0,-(sp)
    a242:	|  |  |  |     |   jsr 17d72 <__modsi3>
    a248:	|  |  |  |     |   addq.l #8,sp
    a24a:	|  |  |  |     |   movea.l 24(sp),a0
    a24e:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a252:	|  |  |  |     |   movea.l 24(sp),a0
    a256:	|  |  |  |     |   movea.l 72(a0),a0
    a25a:	|  |  |  |     |   movea.l 4(a0),a1
    a25e:	|  |  |  |     |   movea.l 24(sp),a0
    a262:	|  |  |  |     |   move.l 84(a0),d0
    a266:	|  |  |  |     |   move.l d0,d1
    a268:	|  |  |  |     |   move.l d1,d0
    a26a:	|  |  |  |     |   add.l d0,d0
    a26c:	|  |  |  |     |   add.l d1,d0
    a26e:	|  |  |  |     |   add.l d0,d0
    a270:	|  |  |  |     |   add.l d0,d0
    a272:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a276:	|  |  |  |     |   move.l 4(a0),d0
    a27a:	|  |  |  |     |   movea.l 24(sp),a0
    a27e:	|  |  |  |     |   move.l d0,88(a0)
    a282:	|  |  |  |  /--|-- bra.w a3c4 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a286:	|  |  |  |  |  \-> movea.l 20(sp),a0
    a28a:	|  |  |  |  |      movea.l 4(a0),a1
    a28e:	|  |  |  |  |      movea.l 24(sp),a0
    a292:	|  |  |  |  |      move.l 84(a0),d0
    a296:	|  |  |  |  |      move.l d0,d1
    a298:	|  |  |  |  |      move.l d1,d0
    a29a:	|  |  |  |  |      add.l d0,d0
    a29c:	|  |  |  |  |      add.l d1,d0
    a29e:	|  |  |  |  |      add.l d0,d0
    a2a0:	|  |  |  |  |      add.l d0,d0
    a2a2:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a2a6:	|  |  |  |  |      move.l 8(a0),d0
    a2aa:	|  |  |  |  +----- beq.w a3c4 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a2ae:	|  |  |  |  |      movea.l 1ca58 <noStack>,a1
    a2b4:	|  |  |  |  |      movea.l 20(sp),a0
    a2b8:	|  |  |  |  |      move.l 4(a0),d2
    a2bc:	|  |  |  |  |      movea.l 24(sp),a0
    a2c0:	|  |  |  |  |      move.l 84(a0),d0
    a2c4:	|  |  |  |  |      move.l d0,d1
    a2c6:	|  |  |  |  |      move.l d1,d0
    a2c8:	|  |  |  |  |      add.l d0,d0
    a2ca:	|  |  |  |  |      add.l d1,d0
    a2cc:	|  |  |  |  |      add.l d0,d0
    a2ce:	|  |  |  |  |      add.l d0,d0
    a2d0:	|  |  |  |  |      movea.l d2,a0
    a2d2:	|  |  |  |  |      adda.l d0,a0
    a2d4:	|  |  |  |  |      move.l 8(a0),d0
    a2d8:	|  |  |  |  |      neg.l d0
    a2da:	|  |  |  |  |      pea 1 <_start+0x1>
    a2de:	|  |  |  |  |      move.l a1,-(sp)
    a2e0:	|  |  |  |  |      clr.l -(sp)
    a2e2:	|  |  |  |  |      clr.l -(sp)
    a2e4:	|  |  |  |  |      move.l d0,-(sp)
    a2e6:	|  |  |  |  |      jsr 6b68 <startNewFunctionNum>
    a2ec:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a2f0:	|  |  |  |  |      movea.l 24(sp),a0
    a2f4:	|  |  |  |  |      move.l 84(a0),d0
    a2f8:	|  |  |  |  |      addq.l #1,d0
    a2fa:	|  |  |  |  |      movea.l 24(sp),a0
    a2fe:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a302:	|  |  |  |  |      movea.l 24(sp),a0
    a306:	|  |  |  |  |      move.l 84(a0),d0
    a30a:	|  |  |  |  |      movea.l 24(sp),a0
    a30e:	|  |  |  |  |      movea.l 72(a0),a0
    a312:	|  |  |  |  |      move.l 8(a0),d1
    a316:	|  |  |  |  |      move.l d1,-(sp)
    a318:	|  |  |  |  |      move.l d0,-(sp)
    a31a:	|  |  |  |  |      jsr 17d72 <__modsi3>
    a320:	|  |  |  |  |      addq.l #8,sp
    a322:	|  |  |  |  |      movea.l 24(sp),a0
    a326:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a32a:	|  |  |  |  |      movea.l 24(sp),a0
    a32e:	|  |  |  |  |      movea.l 72(a0),a0
    a332:	|  |  |  |  |      movea.l 4(a0),a1
    a336:	|  |  |  |  |      movea.l 24(sp),a0
    a33a:	|  |  |  |  |      move.l 84(a0),d0
    a33e:	|  |  |  |  |      move.l d0,d1
    a340:	|  |  |  |  |      move.l d1,d0
    a342:	|  |  |  |  |      add.l d0,d0
    a344:	|  |  |  |  |      add.l d1,d0
    a346:	|  |  |  |  |      add.l d0,d0
    a348:	|  |  |  |  |      add.l d0,d0
    a34a:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a34e:	|  |  |  |  |      move.l 4(a0),d0
    a352:	|  |  |  |  |      movea.l 24(sp),a0
    a356:	|  |  |  |  |      move.l d0,88(a0)
    a35a:	|  |  |  |  +----- bra.s a3c4 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a35c:	|  |  |  \--|----> movea.l 24(sp),a0
    a360:	|  |  |     |      move.l (a0),d0
    a362:	|  |  |     |      movea.l 24(sp),a0
    a366:	|  |  |     |      move.l 8(a0),d1
    a36a:	|  |  |     |      move.l d1,-(sp)
    a36c:	|  |  |     |      move.l d0,-(sp)
    a36e:	|  |  |     |      jsr 17658 <__eqsf2>
    a374:	|  |  |     |      addq.l #8,sp
    a376:	|  |  |     |      tst.l d0
    a378:	|  |  |     |  /-- bne.s a3bc <drawPeople+0x272>
    a37a:	|  |  |     |  |   movea.l 24(sp),a0
    a37e:	|  |  |     |  |   move.l 4(a0),d0
    a382:	|  |  |     |  |   movea.l 24(sp),a0
    a386:	|  |  |     |  |   move.l 12(a0),d1
    a38a:	|  |  |     |  |   move.l d1,-(sp)
    a38c:	|  |  |     |  |   move.l d0,-(sp)
    a38e:	|  |  |     |  |   jsr 17658 <__eqsf2>
    a394:	|  |  |     |  |   addq.l #8,sp
    a396:	|  |  |     |  |   tst.l d0
    a398:	|  |  |     |  +-- bne.s a3bc <drawPeople+0x272>
    a39a:	|  |  |     |  |   movea.l 20(sp),a0
    a39e:	|  |  |     |  |   move.l 8(a0),d0
    a3a2:	|  |  |     |  |   moveq #1,d1
    a3a4:	|  |  |     |  |   cmp.l d0,d1
    a3a6:	|  |  |     |  +-- bne.s a3bc <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a3a8:	|  |  |     |  |   movea.l 24(sp),a0
    a3ac:	|  |  |     |  |   move.l 16(a0),d0
    a3b0:	|  |  |     |  |   addq.l #1,d0
    a3b2:	|  |  |     |  |   movea.l 24(sp),a0
    a3b6:	|  |  |     |  |   move.l d0,16(a0)
    a3ba:	|  |  |     +--|-- bra.s a3c4 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a3bc:	|  |  |     |  \-> movea.l 24(sp),a0
    a3c0:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a3c4:	|  |  |     \----> movea.l 24(sp),a0
    a3c8:	|  |  |            move.l (a0),d0
    a3ca:	|  |  |            movea.l 24(sp),a0
    a3ce:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a3d2:	|  |  |            movea.l 24(sp),a0
    a3d6:	|  |  |            move.l 4(a0),d0
    a3da:	|  |  |            movea.l 24(sp),a0
    a3de:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a3e2:	|  |  |            movea.l 20(sp),a0
    a3e6:	|  |  |            movea.l 4(a0),a1
    a3ea:	|  |  |            movea.l 24(sp),a0
    a3ee:	|  |  |            move.l 84(a0),d0
    a3f2:	|  |  |            move.l d0,d1
    a3f4:	|  |  |            move.l d1,d0
    a3f6:	|  |  |            add.l d0,d0
    a3f8:	|  |  |            add.l d1,d0
    a3fa:	|  |  |            add.l d0,d0
    a3fc:	|  |  |            add.l d0,d0
    a3fe:	|  |  |            lea (0,a1,d0.l),a0
    a402:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a406:	|  |  |            move.l 8(sp),d0
    a40a:	|  |  |            add.l d0,d0
    a40c:	|  |  |            subx.l d0,d0
    a40e:	|  |  |            neg.l d0
    a410:	|  |  |            move.b d0,d0
    a412:	|  |  |            move.b d0,d0
    a414:	|  |  |            andi.l #255,d0
    a41a:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a41e:	|  |  |            move.l 8(sp),-(sp)
    a422:	|  |  |            jsr 931e <TF_abs>
    a428:	|  |  |            addq.l #4,sp
    a42a:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a42e:	|  |  |            movea.l 20(sp),a0
    a432:	|  |  |            movea.l (a0),a0
    a434:	|  |  |            move.l 8(a0),d0
    a438:	|  |  |            cmp.l 12(sp),d0
    a43c:	|  |  |        /-- bgt.s a44c <drawPeople+0x302>
				fNum = 0;
    a43e:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a442:	|  |  |        |   moveq #2,d0
    a444:	|  |  |        |   sub.l 16(sp),d0
    a448:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a44c:	|  |  |        \-> moveq #2,d1
    a44e:	|  |  |            cmp.l 16(sp),d1
    a452:	|  |  +----------- beq.s a4ce <drawPeople+0x384>
				BOOL r = FALSE;
    a454:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a458:	|  |  |            move.l 16(sp),d0
    a45c:	|  |  |            movea.w d0,a0
    a45e:	|  |  |            movea.l 20(sp),a1
    a462:	|  |  |            movea.l (a1),a1
    a464:	|  |  |            movea.l 16(a1),a1
    a468:	|  |  |            move.l 12(sp),d1
    a46c:	|  |  |            move.l d1,d0
    a46e:	|  |  |            lsl.l #3,d0
    a470:	|  |  |            sub.l d1,d0
    a472:	|  |  |            add.l d0,d0
    a474:	|  |  |            add.l d0,d0
    a476:	|  |  |            add.l a1,d0
    a478:	|  |  |            move.l a0,-(sp)
    a47a:	|  |  |            move.l 28(sp),-(sp)
    a47e:	|  |  |            move.l d0,-(sp)
    a480:	|  |  |            jsr 9040 <scaleSprite>
    a486:	|  |  |            lea 12(sp),sp
    a48a:	|  |  |            move.w d0,6(sp)
				if (r) {
    a48e:	|  |  +----------- beq.s a4ce <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a490:	|  |  |            movea.l 24(sp),a0
    a494:	|  |  |            movea.l 114(a0),a0
    a498:	|  |  |            movea.l (a0),a0
    a49a:	|  |  |            move.b (a0),d0
    a49c:	|  |  +----------- beq.s a4ce <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a49e:	|  |  |            move.l 1cb0c <personRegion+0x1c>,d1
    a4a4:	|  |  |            movea.l 24(sp),a0
    a4a8:	|  |  |            move.l 114(a0),d0
    a4ac:	|  |  |            cmp.l d1,d0
    a4ae:	|  |  |        /-- beq.s a4b6 <drawPeople+0x36c>
    a4b0:	|  |  |        |   clr.l 1ca50 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a4b6:	|  |  |        \-> movea.l 24(sp),a0
    a4ba:	|  |  |            move.l 114(a0),d0
    a4be:	|  |  |            move.l d0,1cb0c <personRegion+0x1c>
						overRegion = & personRegion;
    a4c4:	|  |  |            move.l #117488,1cb9c <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a4ce:	|  |  \----------> movea.l 24(sp),a0
    a4d2:	|  |               move.l 88(a0),d0
    a4d6:	|  |               subq.l #1,d0
    a4d8:	|  |               movea.l 24(sp),a0
    a4dc:	|  |               move.l d0,88(a0)
    a4e0:	|  |               movea.l 24(sp),a0
    a4e4:	|  |               move.l 88(a0),d0
    a4e8:	|  |        /----- bne.w a710 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a4ec:	|  |        |      movea.l 24(sp),a0
    a4f0:	|  |        |      move.l 84(a0),d0
    a4f4:	|  |        |      addq.l #1,d0
    a4f6:	|  |        |      movea.l 24(sp),a0
    a4fa:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a4fe:	|  |        |      movea.l 24(sp),a0
    a502:	|  |        |      move.l 84(a0),d0
    a506:	|  |        |      movea.l 24(sp),a0
    a50a:	|  |        |      movea.l 72(a0),a0
    a50e:	|  |        |      move.l 8(a0),d1
    a512:	|  |        |      move.l d1,-(sp)
    a514:	|  |        |      move.l d0,-(sp)
    a516:	|  |        |      jsr 17d72 <__modsi3>
    a51c:	|  |        |      addq.l #8,sp
    a51e:	|  |        |      movea.l 24(sp),a0
    a522:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a526:	|  |        |      movea.l 24(sp),a0
    a52a:	|  |        |      movea.l 72(a0),a0
    a52e:	|  |        |      movea.l 4(a0),a1
    a532:	|  |        |      movea.l 24(sp),a0
    a536:	|  |        |      move.l 84(a0),d0
    a53a:	|  |        |      move.l d0,d1
    a53c:	|  |        |      move.l d1,d0
    a53e:	|  |        |      add.l d0,d0
    a540:	|  |        |      add.l d1,d0
    a542:	|  |        |      add.l d0,d0
    a544:	|  |        |      add.l d0,d0
    a546:	|  |        |      lea (0,a1,d0.l),a0
    a54a:	|  |        |      move.l 4(a0),d0
    a54e:	|  |        |      movea.l 24(sp),a0
    a552:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a556:	|  |        |      movea.l 24(sp),a0
    a55a:	|  |        |      move.w 104(a0),d0
    a55e:	|  |        +----- beq.w a710 <drawPeople+0x5c6>
    a562:	|  |        |      tst.l 20(sp)
    a566:	|  |        +----- beq.w a710 <drawPeople+0x5c6>
    a56a:	|  |        |      movea.l 20(sp),a0
    a56e:	|  |        |      move.l 4(a0),d0
    a572:	|  |        +----- beq.w a710 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a576:	|  |        |      movea.l 20(sp),a0
    a57a:	|  |        |      movea.l 4(a0),a1
    a57e:	|  |        |      movea.l 24(sp),a0
    a582:	|  |        |      move.l 84(a0),d0
    a586:	|  |        |      move.l d0,d1
    a588:	|  |        |      move.l d1,d0
    a58a:	|  |        |      add.l d0,d0
    a58c:	|  |        |      add.l d1,d0
    a58e:	|  |        |      add.l d0,d0
    a590:	|  |        |      add.l d0,d0
    a592:	|  |        |      lea (0,a1,d0.l),a0
    a596:	|  |        |      move.l 8(a0),d0
    a59a:	|  |        |  /-- ble.w a63c <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a59e:	|  |        |  |   movea.l 20(sp),a0
    a5a2:	|  |        |  |   movea.l 4(a0),a1
    a5a6:	|  |        |  |   movea.l 24(sp),a0
    a5aa:	|  |        |  |   move.l 84(a0),d0
    a5ae:	|  |        |  |   move.l d0,d1
    a5b0:	|  |        |  |   move.l d1,d0
    a5b2:	|  |        |  |   add.l d0,d0
    a5b4:	|  |        |  |   add.l d1,d0
    a5b6:	|  |        |  |   add.l d0,d0
    a5b8:	|  |        |  |   add.l d0,d0
    a5ba:	|  |        |  |   lea (0,a1,d0.l),a0
    a5be:	|  |        |  |   move.l 8(a0),d0
    a5c2:	|  |        |  |   clr.l -(sp)
    a5c4:	|  |        |  |   move.l d0,-(sp)
    a5c6:	|  |        |  |   jsr d2ee <startSound>
    a5cc:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a5ce:	|  |        |  |   movea.l 24(sp),a0
    a5d2:	|  |        |  |   move.l 84(a0),d0
    a5d6:	|  |        |  |   addq.l #1,d0
    a5d8:	|  |        |  |   movea.l 24(sp),a0
    a5dc:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a5e0:	|  |        |  |   movea.l 24(sp),a0
    a5e4:	|  |        |  |   move.l 84(a0),d0
    a5e8:	|  |        |  |   movea.l 24(sp),a0
    a5ec:	|  |        |  |   movea.l 72(a0),a0
    a5f0:	|  |        |  |   move.l 8(a0),d1
    a5f4:	|  |        |  |   move.l d1,-(sp)
    a5f6:	|  |        |  |   move.l d0,-(sp)
    a5f8:	|  |        |  |   jsr 17d72 <__modsi3>
    a5fe:	|  |        |  |   addq.l #8,sp
    a600:	|  |        |  |   movea.l 24(sp),a0
    a604:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a608:	|  |        |  |   movea.l 24(sp),a0
    a60c:	|  |        |  |   movea.l 72(a0),a0
    a610:	|  |        |  |   movea.l 4(a0),a1
    a614:	|  |        |  |   movea.l 24(sp),a0
    a618:	|  |        |  |   move.l 84(a0),d0
    a61c:	|  |        |  |   move.l d0,d1
    a61e:	|  |        |  |   move.l d1,d0
    a620:	|  |        |  |   add.l d0,d0
    a622:	|  |        |  |   add.l d1,d0
    a624:	|  |        |  |   add.l d0,d0
    a626:	|  |        |  |   add.l d0,d0
    a628:	|  |        |  |   lea (0,a1,d0.l),a0
    a62c:	|  |        |  |   move.l 4(a0),d0
    a630:	|  |        |  |   movea.l 24(sp),a0
    a634:	|  |        |  |   move.l d0,88(a0)
    a638:	|  |        +--|-- bra.w a710 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a63c:	|  |        |  \-> movea.l 20(sp),a0
    a640:	|  |        |      movea.l 4(a0),a1
    a644:	|  |        |      movea.l 24(sp),a0
    a648:	|  |        |      move.l 84(a0),d0
    a64c:	|  |        |      move.l d0,d1
    a64e:	|  |        |      move.l d1,d0
    a650:	|  |        |      add.l d0,d0
    a652:	|  |        |      add.l d1,d0
    a654:	|  |        |      add.l d0,d0
    a656:	|  |        |      add.l d0,d0
    a658:	|  |        |      lea (0,a1,d0.l),a0
    a65c:	|  |        |      move.l 8(a0),d0
    a660:	|  |        +----- beq.w a710 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a664:	|  |        |      movea.l 1ca58 <noStack>,a1
    a66a:	|  |        |      movea.l 20(sp),a0
    a66e:	|  |        |      move.l 4(a0),d2
    a672:	|  |        |      movea.l 24(sp),a0
    a676:	|  |        |      move.l 84(a0),d0
    a67a:	|  |        |      move.l d0,d1
    a67c:	|  |        |      move.l d1,d0
    a67e:	|  |        |      add.l d0,d0
    a680:	|  |        |      add.l d1,d0
    a682:	|  |        |      add.l d0,d0
    a684:	|  |        |      add.l d0,d0
    a686:	|  |        |      movea.l d2,a0
    a688:	|  |        |      adda.l d0,a0
    a68a:	|  |        |      move.l 8(a0),d0
    a68e:	|  |        |      neg.l d0
    a690:	|  |        |      pea 1 <_start+0x1>
    a694:	|  |        |      move.l a1,-(sp)
    a696:	|  |        |      clr.l -(sp)
    a698:	|  |        |      clr.l -(sp)
    a69a:	|  |        |      move.l d0,-(sp)
    a69c:	|  |        |      jsr 6b68 <startNewFunctionNum>
    a6a2:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a6a6:	|  |        |      movea.l 24(sp),a0
    a6aa:	|  |        |      move.l 84(a0),d0
    a6ae:	|  |        |      addq.l #1,d0
    a6b0:	|  |        |      movea.l 24(sp),a0
    a6b4:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a6b8:	|  |        |      movea.l 24(sp),a0
    a6bc:	|  |        |      move.l 84(a0),d0
    a6c0:	|  |        |      movea.l 24(sp),a0
    a6c4:	|  |        |      movea.l 72(a0),a0
    a6c8:	|  |        |      move.l 8(a0),d1
    a6cc:	|  |        |      move.l d1,-(sp)
    a6ce:	|  |        |      move.l d0,-(sp)
    a6d0:	|  |        |      jsr 17d72 <__modsi3>
    a6d6:	|  |        |      addq.l #8,sp
    a6d8:	|  |        |      movea.l 24(sp),a0
    a6dc:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a6e0:	|  |        |      movea.l 24(sp),a0
    a6e4:	|  |        |      movea.l 72(a0),a0
    a6e8:	|  |        |      movea.l 4(a0),a1
    a6ec:	|  |        |      movea.l 24(sp),a0
    a6f0:	|  |        |      move.l 84(a0),d0
    a6f4:	|  |        |      move.l d0,d1
    a6f6:	|  |        |      move.l d1,d0
    a6f8:	|  |        |      add.l d0,d0
    a6fa:	|  |        |      add.l d1,d0
    a6fc:	|  |        |      add.l d0,d0
    a6fe:	|  |        |      add.l d0,d0
    a700:	|  |        |      lea (0,a1,d0.l),a0
    a704:	|  |        |      move.l 4(a0),d0
    a708:	|  |        |      movea.l 24(sp),a0
    a70c:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a710:	|  |        \----> movea.l 24(sp),a0
    a714:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a71a:	|  \-------------> tst.l 24(sp)
    a71e:	\----------------- bne.w a16c <drawPeople+0x22>
	}
}
    a722:	                   nop
    a724:	                   nop
    a726:	                   move.l (sp)+,d2
    a728:	                   lea 24(sp),sp
    a72c:	                   rts

0000a72e <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a72e:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a730:	          move.l 1caec <allPeople>,(sp)
	while (thisPerson) {
    a736:	      /-- bra.s a74e <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a738:	/-----|-> movea.l (sp),a0
    a73a:	|     |   movea.l 114(a0),a0
    a73e:	|     |   move.l 4(a0),d0
    a742:	|     |   cmp.l 8(sp),d0
    a746:	|  /--|-- beq.s a754 <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a748:	|  |  |   movea.l (sp),a0
    a74a:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a74e:	|  |  \-> tst.l (sp)
    a750:	\--|----- bne.s a738 <findPerson+0xa>
    a752:	   |  /-- bra.s a756 <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a754:	   \--|-> nop
	}
	return thisPerson;
    a756:	      \-> move.l (sp),d0
}
    a758:	          addq.l #4,sp
    a75a:	          rts

0000a75c <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a75c:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a75e:	       move.l 12(sp),-(sp)
    a762:	       jsr a72e <findPerson>
    a768:	       addq.l #4,sp
    a76a:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a76c:	   /-- bne.s a772 <floatCharacter+0x16>
    a76e:	   |   clr.w d0
    a770:	/--|-- bra.s a77c <floatCharacter+0x20>
	moveMe -> floaty = f;
    a772:	|  \-> movea.l (sp),a0
    a774:	|      move.l 8(sp),24(a0)
	return TRUE;
    a77a:	|      moveq #1,d0
}
    a77c:	\----> addq.l #4,sp
    a77e:	       rts

0000a780 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a780:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a782:	          tst.l 8(sp)
    a786:	      /-- bne.s a794 <forceWalkingPerson+0x14>
    a788:	      |   tst.l 12(sp)
    a78c:	      +-- bne.s a794 <forceWalkingPerson+0x14>
    a78e:	      |   clr.w d0
    a790:	/-----|-- bra.w a826 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a794:	|     \-> move.l 16(sp),-(sp)
    a798:	|         jsr a72e <findPerson>
    a79e:	|         addq.l #4,sp
    a7a0:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a7a2:	|     /-- bne.s a7a8 <forceWalkingPerson+0x28>
    a7a4:	|     |   clr.w d0
    a7a6:	+-----|-- bra.s a826 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a7a8:	|     \-> movea.l (sp),a0
    a7aa:	|         move.l 68(a0),d0
    a7ae:	|     /-- beq.s a7c0 <forceWalkingPerson+0x40>
    a7b0:	|     |   movea.l (sp),a0
    a7b2:	|     |   move.l 68(a0),d0
    a7b6:	|     |   move.l d0,-(sp)
    a7b8:	|     |   jsr 47ac <abortFunction>
    a7be:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a7c0:	|     \-> movea.l (sp),a0
    a7c2:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a7c8:	|         movea.l (sp),a0
    a7ca:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a7ce:	|         movea.l (sp),a0
    a7d0:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a7d6:	|         movea.l (sp),a0
    a7d8:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a7de:	|         movea.l (sp),a0
    a7e0:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a7e6:	|         movea.l (sp),a0
    a7e8:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a7ec:	|         movea.l (sp),a0
    a7ee:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a7f2:	|         move.l (sp),-(sp)
    a7f4:	|         jsr 9a90 <doBorderStuff>
    a7fa:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a7fc:	|         pea 1 <_start+0x1>
    a800:	|         move.l 4(sp),-(sp)
    a804:	|         jsr c074 <walkMe>
    a80a:	|         addq.l #8,sp
    a80c:	|         tst.w d0
    a80e:	|     /-- bne.s a818 <forceWalkingPerson+0x98>
    a810:	|     |   movea.l (sp),a0
    a812:	|     |   move.w 66(a0),d0
    a816:	|  /--|-- beq.s a824 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a818:	|  |  \-> movea.l (sp),a0
    a81a:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a820:	|  |      moveq #1,d0
    a822:	+--|----- bra.s a826 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a824:	|  \----> clr.w d0
    }
}
    a826:	\-------> addq.l #4,sp
    a828:	          rts

0000a82a <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a82a:	                lea -56(sp),sp
    a82e:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a830:	                move.l #320,56(sp)
    a838:	                move.l #200,52(sp)
    a840:	                moveq #-1,d0
    a842:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a846:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a84e:	                clr.l 44(sp)
    a852:	   /----------- bra.w aa2a <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a856:	/--|----------> movea.l 1cba4 <currentFloor>,a0
    a85c:	|  |            move.l 12(a0),d1
    a860:	|  |            move.l 44(sp),d0
    a864:	|  |            lsl.l #3,d0
    a866:	|  |            movea.l d1,a0
    a868:	|  |            adda.l d0,a0
    a86a:	|  |            move.l (a0),d0
    a86c:	|  |            move.l d0,d1
    a86e:	|  |            subq.l #1,d1
    a870:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a874:	|  |            clr.l 40(sp)
    a878:	|  |     /----- bra.w aa08 <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a87c:	|  |  /--|----> movea.l 1cba4 <currentFloor>,a0
    a882:	|  |  |  |      move.l 4(a0),d1
    a886:	|  |  |  |      movea.l 1cba4 <currentFloor>,a0
    a88c:	|  |  |  |      movea.l 12(a0),a0
    a890:	|  |  |  |      move.l 44(sp),d0
    a894:	|  |  |  |      lsl.l #3,d0
    a896:	|  |  |  |      adda.l d0,a0
    a898:	|  |  |  |      movea.l 4(a0),a0
    a89c:	|  |  |  |      move.l 40(sp),d0
    a8a0:	|  |  |  |      add.l d0,d0
    a8a2:	|  |  |  |      add.l d0,d0
    a8a4:	|  |  |  |      adda.l d0,a0
    a8a6:	|  |  |  |      move.l (a0),d0
    a8a8:	|  |  |  |      lsl.l #3,d0
    a8aa:	|  |  |  |      movea.l d1,a0
    a8ac:	|  |  |  |      adda.l d0,a0
    a8ae:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a8b2:	|  |  |  |      movea.l 1cba4 <currentFloor>,a0
    a8b8:	|  |  |  |      move.l 4(a0),d1
    a8bc:	|  |  |  |      movea.l 1cba4 <currentFloor>,a0
    a8c2:	|  |  |  |      movea.l 12(a0),a0
    a8c6:	|  |  |  |      move.l 44(sp),d0
    a8ca:	|  |  |  |      lsl.l #3,d0
    a8cc:	|  |  |  |      adda.l d0,a0
    a8ce:	|  |  |  |      movea.l 4(a0),a0
    a8d2:	|  |  |  |      move.l 40(sp),d0
    a8d6:	|  |  |  |      add.l d0,d0
    a8d8:	|  |  |  |      add.l d0,d0
    a8da:	|  |  |  |      adda.l d0,a0
    a8dc:	|  |  |  |      move.l (a0),d0
    a8de:	|  |  |  |      lsl.l #3,d0
    a8e0:	|  |  |  |      movea.l d1,a0
    a8e2:	|  |  |  |      adda.l d0,a0
    a8e4:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a8ea:	|  |  |  |      movea.l 1cba4 <currentFloor>,a0
    a8f0:	|  |  |  |      move.l 4(a0),d1
    a8f4:	|  |  |  |      movea.l 1cba4 <currentFloor>,a0
    a8fa:	|  |  |  |      movea.l 12(a0),a0
    a8fe:	|  |  |  |      move.l 44(sp),d0
    a902:	|  |  |  |      lsl.l #3,d0
    a904:	|  |  |  |      adda.l d0,a0
    a906:	|  |  |  |      movea.l 4(a0),a0
    a90a:	|  |  |  |      move.l 36(sp),d0
    a90e:	|  |  |  |      add.l d0,d0
    a910:	|  |  |  |      add.l d0,d0
    a912:	|  |  |  |      adda.l d0,a0
    a914:	|  |  |  |      move.l (a0),d0
    a916:	|  |  |  |      lsl.l #3,d0
    a918:	|  |  |  |      movea.l d1,a0
    a91a:	|  |  |  |      adda.l d0,a0
    a91c:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a920:	|  |  |  |      movea.l 1cba4 <currentFloor>,a0
    a926:	|  |  |  |      move.l 4(a0),d1
    a92a:	|  |  |  |      movea.l 1cba4 <currentFloor>,a0
    a930:	|  |  |  |      movea.l 12(a0),a0
    a934:	|  |  |  |      move.l 44(sp),d0
    a938:	|  |  |  |      lsl.l #3,d0
    a93a:	|  |  |  |      adda.l d0,a0
    a93c:	|  |  |  |      movea.l 4(a0),a0
    a940:	|  |  |  |      move.l 36(sp),d0
    a944:	|  |  |  |      add.l d0,d0
    a946:	|  |  |  |      add.l d0,d0
    a948:	|  |  |  |      adda.l d0,a0
    a94a:	|  |  |  |      move.l (a0),d0
    a94c:	|  |  |  |      lsl.l #3,d0
    a94e:	|  |  |  |      movea.l d1,a0
    a950:	|  |  |  |      adda.l d0,a0
    a952:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a958:	|  |  |  |      movea.l 68(sp),a0
    a95c:	|  |  |  |      move.l (a0),d1
    a95e:	|  |  |  |      movea.l 64(sp),a0
    a962:	|  |  |  |      move.l (a0),d0
    a964:	|  |  |  |      move.l d1,-(sp)
    a966:	|  |  |  |      move.l d0,-(sp)
    a968:	|  |  |  |      move.l 24(sp),-(sp)
    a96c:	|  |  |  |      move.l 32(sp),-(sp)
    a970:	|  |  |  |      move.l 40(sp),-(sp)
    a974:	|  |  |  |      move.l 48(sp),-(sp)
    a978:	|  |  |  |      lea 28(sp),a0
    a97c:	|  |  |  |      move.l a0,-(sp)
    a97e:	|  |  |  |      lea 36(sp),a0
    a982:	|  |  |  |      move.l a0,-(sp)
    a984:	|  |  |  |      jsr 16154 <closestPointOnLine>
    a98a:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a98e:	|  |  |  |      movea.l 64(sp),a0
    a992:	|  |  |  |      move.l (a0),d0
    a994:	|  |  |  |      move.l 8(sp),d1
    a998:	|  |  |  |      move.l d0,d2
    a99a:	|  |  |  |      sub.l d1,d2
    a99c:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a9a0:	|  |  |  |      movea.l 68(sp),a0
    a9a4:	|  |  |  |      move.l (a0),d0
    a9a6:	|  |  |  |      move.l 4(sp),d1
    a9aa:	|  |  |  |      move.l d0,d2
    a9ac:	|  |  |  |      sub.l d1,d2
    a9ae:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a9b2:	|  |  |  |      move.l 28(sp),-(sp)
    a9b6:	|  |  |  |      move.l 32(sp),-(sp)
    a9ba:	|  |  |  |      jsr 17cc6 <__mulsi3>
    a9c0:	|  |  |  |      addq.l #8,sp
    a9c2:	|  |  |  |      move.l d0,d2
    a9c4:	|  |  |  |      move.l 24(sp),-(sp)
    a9c8:	|  |  |  |      move.l 28(sp),-(sp)
    a9cc:	|  |  |  |      jsr 17cc6 <__mulsi3>
    a9d2:	|  |  |  |      addq.l #8,sp
    a9d4:	|  |  |  |      move.l d2,d1
    a9d6:	|  |  |  |      add.l d0,d1
    a9d8:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a9dc:	|  |  |  |      move.l 12(sp),d2
    a9e0:	|  |  |  |      cmp.l 32(sp),d2
    a9e4:	|  |  |  |  /-- bge.s a9fe <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a9e6:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a9ec:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a9f2:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a9f8:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a9fe:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    aa04:	|  |  |  |      addq.l #1,40(sp)
    aa08:	|  |  |  \----> movea.l 1cba4 <currentFloor>,a0
    aa0e:	|  |  |         move.l 12(a0),d1
    aa12:	|  |  |         move.l 44(sp),d0
    aa16:	|  |  |         lsl.l #3,d0
    aa18:	|  |  |         movea.l d1,a0
    aa1a:	|  |  |         adda.l d0,a0
    aa1c:	|  |  |         move.l (a0),d0
    aa1e:	|  |  |         cmp.l 40(sp),d0
    aa22:	|  |  \-------- bgt.w a87c <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    aa26:	|  |            addq.l #1,44(sp)
    aa2a:	|  \----------> movea.l 1cba4 <currentFloor>,a0
    aa30:	|               move.l 8(a0),d0
    aa34:	|               cmp.l 44(sp),d0
    aa38:	\-------------- bgt.w a856 <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    aa3c:	                moveq #-1,d0
    aa3e:	                cmp.l 48(sp),d0
    aa42:	            /-- bne.s aa48 <handleClosestPoint+0x21e>
    aa44:	            |   clr.w d0
    aa46:	         /--|-- bra.s aa62 <handleClosestPoint+0x238>
	*setX = gotX;
    aa48:	         |  \-> movea.l 64(sp),a0
    aa4c:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    aa50:	         |      movea.l 68(sp),a0
    aa54:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    aa58:	         |      movea.l 72(sp),a0
    aa5c:	         |      move.l 48(sp),(a0)

	return TRUE;
    aa60:	         |      moveq #1,d0
}
    aa62:	         \----> move.l (sp)+,d2
    aa64:	                lea 56(sp),sp
    aa68:	                rts

0000aa6a <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    aa6a:	clr.l 1cb00 <personRegion+0x10>
	personRegion.sY = 0;
    aa70:	clr.l 1cb04 <personRegion+0x14>
	personRegion.di = -1;
    aa76:	moveq #-1,d0
    aa78:	move.l d0,1cb08 <personRegion+0x18>
	allScreenRegions = NULL;
    aa7e:	clr.l 1cb98 <allScreenRegions>

	return TRUE;
    aa84:	moveq #1,d0
}
    aa86:	rts

0000aa88 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    aa88:	          subq.l #4,sp
    aa8a:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    aa8c:	          tst.l 12(sp)
    aa90:	      /-- bne.s aa98 <jumpPerson+0x10>
    aa92:	      |   tst.l 16(sp)
    aa96:	/-----|-- beq.s ab0c <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    aa98:	|     \-> move.l 20(sp),-(sp)
    aa9c:	|         jsr a72e <findPerson>
    aaa2:	|         addq.l #4,sp
    aaa4:	|         move.l d0,4(sp)
    if (!moveMe) return;
    aaa8:	|  /----- beq.s ab10 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    aaaa:	|  |      movea.l 4(sp),a0
    aaae:	|  |      move.l 68(a0),d0
    aab2:	|  |  /-- beq.s aac6 <jumpPerson+0x3e>
    aab4:	|  |  |   movea.l 4(sp),a0
    aab8:	|  |  |   move.l 68(a0),d0
    aabc:	|  |  |   move.l d0,-(sp)
    aabe:	|  |  |   jsr 47ac <abortFunction>
    aac4:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    aac6:	|  |  \-> movea.l 4(sp),a0
    aaca:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    aace:	|  |      movea.l 4(sp),a0
    aad2:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    aad6:	|  |      movea.l 4(sp),a0
    aada:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    aade:	|  |      move.l 16(sp),-(sp)
    aae2:	|  |      jsr 1776c <__floatsisf>
    aae8:	|  |      addq.l #4,sp
    aaea:	|  |      move.l d0,d2
    aaec:	|  |      move.l 12(sp),-(sp)
    aaf0:	|  |      jsr 1776c <__floatsisf>
    aaf6:	|  |      addq.l #4,sp
    aaf8:	|  |      move.l d2,-(sp)
    aafa:	|  |      move.l d0,-(sp)
    aafc:	|  |      move.l 12(sp),-(sp)
    ab00:	|  |      jsr ae76 <moveAndScale>
    ab06:	|  |      lea 12(sp),sp
    ab0a:	|  |  /-- bra.s ab12 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    ab0c:	\--|--|-> nop
    ab0e:	   |  +-- bra.s ab12 <jumpPerson+0x8a>
    if (!moveMe) return;
    ab10:	   \--|-> nop
}
    ab12:	      \-> move.l (sp)+,d2
    ab14:	          addq.l #4,sp
    ab16:	          rts

0000ab18 <killAllPeople>:


void killAllPeople () {
    ab18:	          subq.l #8,sp
    ab1a:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    ab1c:	   /----- bra.s ab88 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    ab1e:	/--|----> movea.l 1caec <allPeople>,a0
    ab24:	|  |      move.l 68(a0),d0
    ab28:	|  |  /-- beq.s ab3e <killAllPeople+0x26>
    ab2a:	|  |  |   movea.l 1caec <allPeople>,a0
    ab30:	|  |  |   move.l 68(a0),d0
    ab34:	|  |  |   move.l d0,-(sp)
    ab36:	|  |  |   jsr 47ac <abortFunction>
    ab3c:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    ab3e:	|  |  \-> movea.l 1caec <allPeople>,a0
    ab44:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    ab48:	|  |      move.l 1caec <allPeople>,8(sp)
		allPeople = allPeople -> next;
    ab50:	|  |      movea.l 1caec <allPeople>,a0
    ab56:	|  |      move.l 36(a0),d0
    ab5a:	|  |      move.l d0,1caec <allPeople>
		removeObjectType (killPeople -> thisType);
    ab60:	|  |      movea.l 8(sp),a0
    ab64:	|  |      move.l 114(a0),d0
    ab68:	|  |      move.l d0,-(sp)
    ab6a:	|  |      jsr d9cc <removeObjectType>
    ab70:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    ab72:	|  |      move.l 8(sp),4(sp)
    ab78:	|  |      move.l 1ca88 <SysBase>,d0
    ab7e:	|  |      movea.l d0,a6
    ab80:	|  |      movea.l 4(sp),a1
    ab84:	|  |      jsr -690(a6)
	while (allPeople) {
    ab88:	|  \----> move.l 1caec <allPeople>,d0
    ab8e:	\-------- bne.s ab1e <killAllPeople+0x6>
	}
}
    ab90:	          nop
    ab92:	          nop
    ab94:	          movea.l (sp)+,a6
    ab96:	          addq.l #8,sp
    ab98:	          rts

0000ab9a <killMostPeople>:

void killMostPeople() {
    ab9a:	          lea -12(sp),sp
    ab9e:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    aba0:	          move.l #117484,12(sp)

    while (*lookyHere) {
    aba8:	   /----- bra.w ac2e <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    abac:	/--|----> movea.l 12(sp),a0
    abb0:	|  |      movea.l (a0),a0
    abb2:	|  |      move.l 118(a0),d0
    abb6:	|  |      moveq #32,d1
    abb8:	|  |      and.l d1,d0
    abba:	|  |  /-- beq.s abcc <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    abbc:	|  |  |   movea.l 12(sp),a0
    abc0:	|  |  |   move.l (a0),d0
    abc2:	|  |  |   moveq #36,d1
    abc4:	|  |  |   add.l d0,d1
    abc6:	|  |  |   move.l d1,12(sp)
    abca:	|  +--|-- bra.s ac2e <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    abcc:	|  |  \-> movea.l 12(sp),a0
    abd0:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    abd4:	|  |      movea.l 8(sp),a0
    abd8:	|  |      move.l 36(a0),d0
    abdc:	|  |      movea.l 12(sp),a0
    abe0:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    abe2:	|  |      movea.l 8(sp),a0
    abe6:	|  |      move.l 68(a0),d0
    abea:	|  |  /-- beq.s abfe <killMostPeople+0x64>
    abec:	|  |  |   movea.l 8(sp),a0
    abf0:	|  |  |   move.l 68(a0),d0
    abf4:	|  |  |   move.l d0,-(sp)
    abf6:	|  |  |   jsr 47ac <abortFunction>
    abfc:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    abfe:	|  |  \-> movea.l 8(sp),a0
    ac02:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    ac06:	|  |      movea.l 8(sp),a0
    ac0a:	|  |      move.l 114(a0),d0
    ac0e:	|  |      move.l d0,-(sp)
    ac10:	|  |      jsr d9cc <removeObjectType>
    ac16:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    ac18:	|  |      move.l 8(sp),4(sp)
    ac1e:	|  |      move.l 1ca88 <SysBase>,d0
    ac24:	|  |      movea.l d0,a6
    ac26:	|  |      movea.l 4(sp),a1
    ac2a:	|  |      jsr -690(a6)
    while (*lookyHere) {
    ac2e:	|  \----> movea.l 12(sp),a0
    ac32:	|         move.l (a0),d0
    ac34:	\-------- bne.w abac <killMostPeople+0x12>
        }
    }
}
    ac38:	          nop
    ac3a:	          nop
    ac3c:	          movea.l (sp)+,a6
    ac3e:	          lea 12(sp),sp
    ac42:	          rts

0000ac44 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    ac44:	clr.l -(sp)
    ac46:	move.l sp,d0
    ac48:	addq.l #8,d0
    ac4a:	move.l d0,-(sp)
    ac4c:	jsr 8204 <setFrames>
    ac52:	addq.l #8,sp
}
    ac54:	nop
    ac56:	rts

0000ac58 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    ac58:	          lea -12(sp),sp
    ac5c:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    ac5e:	          tst.l 20(sp)
    ac62:	      /-- bne.s ac70 <makeWalkingPerson+0x18>
    ac64:	      |   tst.l 24(sp)
    ac68:	      +-- bne.s ac70 <makeWalkingPerson+0x18>
    ac6a:	      |   clr.w d0
    ac6c:	/-----|-- bra.w ae08 <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    ac70:	|     \-> movea.l 1cba4 <currentFloor>,a0
    ac76:	|         move.l 8(a0),d0
    ac7a:	|     /-- bne.s ac82 <makeWalkingPerson+0x2a>
    ac7c:	|     |   clr.w d0
    ac7e:	+-----|-- bra.w ae08 <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ac82:	|     \-> move.l 28(sp),-(sp)
    ac86:	|         jsr a72e <findPerson>
    ac8c:	|         addq.l #4,sp
    ac8e:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    ac92:	|     /-- bne.s ac9a <makeWalkingPerson+0x42>
    ac94:	|     |   clr.w d0
    ac96:	+-----|-- bra.w ae08 <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    ac9a:	|     \-> movea.l 12(sp),a0
    ac9e:	|         move.l 68(a0),d0
    aca2:	|     /-- beq.s acb6 <makeWalkingPerson+0x5e>
    aca4:	|     |   movea.l 12(sp),a0
    aca8:	|     |   move.l 68(a0),d0
    acac:	|     |   move.l d0,-(sp)
    acae:	|     |   jsr 47ac <abortFunction>
    acb4:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    acb6:	|     \-> movea.l 12(sp),a0
    acba:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    acbe:	|         movea.l 12(sp),a0
    acc2:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    acc8:	|         movea.l 12(sp),a0
    accc:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    acd2:	|         movea.l 12(sp),a0
    acd6:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    acdc:	|         movea.l 12(sp),a0
    ace0:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    ace6:	|         move.l 24(sp),-(sp)
    acea:	|         move.l 24(sp),-(sp)
    acee:	|         jsr 1669c <inFloor>
    acf4:	|         addq.l #8,sp
    acf6:	|         movea.l 12(sp),a0
    acfa:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    acfe:	|         movea.l 12(sp),a0
    ad02:	|         move.l 60(a0),d0
    ad06:	|         moveq #-1,d1
    ad08:	|         cmp.l d0,d1
    ad0a:	|     /-- bne.s ad3a <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    ad0c:	|     |   movea.w #60,a0
    ad10:	|     |   adda.l 12(sp),a0
    ad14:	|     |   moveq #44,d1
    ad16:	|     |   add.l 12(sp),d1
    ad1a:	|     |   moveq #40,d0
    ad1c:	|     |   add.l 12(sp),d0
    ad20:	|     |   move.l a0,-(sp)
    ad22:	|     |   move.l d1,-(sp)
    ad24:	|     |   move.l d0,-(sp)
    ad26:	|     |   jsr a82a <handleClosestPoint>
    ad2c:	|     |   lea 12(sp),sp
    ad30:	|     |   tst.w d0
    ad32:	|     +-- bne.s ad3a <makeWalkingPerson+0xe2>
    ad34:	|     |   clr.w d0
    ad36:	+-----|-- bra.w ae08 <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    ad3a:	|     \-> movea.l 12(sp),a0
    ad3e:	|         move.l 4(a0),d0
    ad42:	|         move.l d0,-(sp)
    ad44:	|         jsr 17704 <__fixsfsi>
    ad4a:	|         addq.l #4,sp
    ad4c:	|         move.l d0,d2
    ad4e:	|         movea.l 12(sp),a0
    ad52:	|         move.l (a0),d0
    ad54:	|         move.l d0,-(sp)
    ad56:	|         jsr 17704 <__fixsfsi>
    ad5c:	|         addq.l #4,sp
    ad5e:	|         move.l d2,-(sp)
    ad60:	|         move.l d0,-(sp)
    ad62:	|         jsr 1669c <inFloor>
    ad68:	|         addq.l #8,sp
    ad6a:	|         movea.l 12(sp),a0
    ad6e:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    ad72:	|         movea.l 12(sp),a0
    ad76:	|         move.l 56(a0),d0
    ad7a:	|         moveq #-1,d1
    ad7c:	|         cmp.l d0,d1
    ad7e:	|     /-- bne.s add0 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    ad80:	|     |   movea.l 12(sp),a0
    ad84:	|     |   move.l (a0),d0
    ad86:	|     |   move.l d0,-(sp)
    ad88:	|     |   jsr 17704 <__fixsfsi>
    ad8e:	|     |   addq.l #4,sp
    ad90:	|     |   move.l d0,8(sp)
    ad94:	|     |   movea.l 12(sp),a0
    ad98:	|     |   move.l 4(a0),d0
    ad9c:	|     |   move.l d0,-(sp)
    ad9e:	|     |   jsr 17704 <__fixsfsi>
    ada4:	|     |   addq.l #4,sp
    ada6:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    adaa:	|     |   moveq #56,d0
    adac:	|     |   add.l 12(sp),d0
    adb0:	|     |   move.l d0,-(sp)
    adb2:	|     |   lea 8(sp),a0
    adb6:	|     |   move.l a0,-(sp)
    adb8:	|     |   moveq #16,d0
    adba:	|     |   add.l sp,d0
    adbc:	|     |   move.l d0,-(sp)
    adbe:	|     |   jsr a82a <handleClosestPoint>
    adc4:	|     |   lea 12(sp),sp
    adc8:	|     |   tst.w d0
    adca:	|     +-- bne.s add0 <makeWalkingPerson+0x178>
    adcc:	|     |   clr.w d0
    adce:	+-----|-- bra.s ae08 <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    add0:	|     \-> move.l 12(sp),-(sp)
    add4:	|         jsr 9a90 <doBorderStuff>
    adda:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    addc:	|         clr.l -(sp)
    adde:	|         move.l 16(sp),-(sp)
    ade2:	|         jsr c074 <walkMe>
    ade8:	|         addq.l #8,sp
    adea:	|         tst.w d0
    adec:	|     /-- bne.s adf8 <makeWalkingPerson+0x1a0>
    adee:	|     |   movea.l 12(sp),a0
    adf2:	|     |   move.w 66(a0),d0
    adf6:	|  /--|-- beq.s ae06 <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    adf8:	|  |  \-> movea.l 12(sp),a0
    adfc:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    ae02:	|  |      moveq #1,d0
    ae04:	+--|----- bra.s ae08 <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    ae06:	|  \----> clr.w d0
	}
}
    ae08:	\-------> move.l (sp)+,d2
    ae0a:	          lea 12(sp),sp
    ae0e:	          rts

0000ae10 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    ae10:	       lea -16(sp),sp
    ae14:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    ae16:	       moveq #12,d0
    ae18:	       move.l d0,16(sp)
    ae1c:	       clr.l 12(sp)
    ae20:	       move.l 1ca88 <SysBase>,d0
    ae26:	       movea.l d0,a6
    ae28:	       move.l 16(sp),d0
    ae2c:	       move.l 12(sp),d1
    ae30:	       jsr -684(a6)
    ae34:	       move.l d0,8(sp)
    ae38:	       move.l 8(sp),d0
    ae3c:	       move.l d0,4(sp)
    if(newAnim == 0) {
    ae40:	   /-- bne.s ae54 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    ae42:	   |   pea 192ca <PutChar+0x14ee>
    ae48:	   |   jsr 1733a <KPrintF>
    ae4e:	   |   addq.l #4,sp
        return NULL;    
    ae50:	   |   moveq #0,d0
    ae52:	/--|-- bra.s ae6e <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    ae54:	|  \-> movea.l 4(sp),a0
    ae58:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    ae5a:	|      movea.l 4(sp),a0
    ae5e:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    ae62:	|      movea.l 4(sp),a0
    ae66:	|      clr.l 4(a0)
	return newAnim;
    ae6a:	|      move.l 4(sp),d0
}
    ae6e:	\----> movea.l (sp)+,a6
    ae70:	       lea 16(sp),sp
    ae74:	       rts

0000ae76 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    ae76:	    move.l d2,-(sp)
	me->x = x;
    ae78:	    movea.l 8(sp),a0
    ae7c:	    move.l 12(sp),(a0)
	me->y = y;
    ae80:	    movea.l 8(sp),a0
    ae84:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    ae8a:	    movea.l 8(sp),a0
    ae8e:	    clr.l 8(a0)
	me->oldy = 0;
    ae92:	    movea.l 8(sp),a0
    ae96:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    ae9a:	    movea.l 8(sp),a0
    ae9e:	    move.l 118(a0),d0
    aea2:	    moveq #2,d1
    aea4:	    and.l d1,d0
    aea6:	/-- bne.s aefe <moveAndScale+0x88>
    aea8:	|   move.w 1c41c <scaleDivide>,d0
    aeae:	+-- beq.s aefe <moveAndScale+0x88>
    aeb0:	|   movea.l 8(sp),a0
    aeb4:	|   move.l 4(a0),d2
    aeb8:	|   move.w 1c41a <scaleHorizon>,d0
    aebe:	|   movea.w d0,a0
    aec0:	|   move.l a0,-(sp)
    aec2:	|   jsr 1776c <__floatsisf>
    aec8:	|   addq.l #4,sp
    aeca:	|   move.l d0,-(sp)
    aecc:	|   move.l d2,-(sp)
    aece:	|   jsr 17a60 <__subsf3>
    aed4:	|   addq.l #8,sp
    aed6:	|   move.l d0,d2
    aed8:	|   move.w 1c41c <scaleDivide>,d0
    aede:	|   movea.w d0,a0
    aee0:	|   move.l a0,-(sp)
    aee2:	|   jsr 1776c <__floatsisf>
    aee8:	|   addq.l #4,sp
    aeea:	|   move.l d0,-(sp)
    aeec:	|   move.l d2,-(sp)
    aeee:	|   jsr 17622 <__divsf3>
    aef4:	|   addq.l #8,sp
    aef6:	|   movea.l 8(sp),a0
    aefa:	|   move.l d0,32(a0)
}
    aefe:	\-> nop
    af00:	    move.l (sp)+,d2
    af02:	    rts

0000af04 <removeOneCharacter>:

void removeOneCharacter (int i) {
    af04:	          lea -16(sp),sp
    af08:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    af0a:	          move.l 24(sp),-(sp)
    af0e:	          jsr a72e <findPerson>
    af14:	          addq.l #4,sp
    af16:	          move.l d0,8(sp)

    if (p) {
    af1a:	/-------- beq.w affa <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    af1e:	|         move.l 1cb9c <overRegion>,d0
    af24:	|         cmpi.l #117488,d0
    af2a:	|     /-- bne.s af48 <removeOneCharacter+0x44>
    af2c:	|     |   movea.l 1cb9c <overRegion>,a0
    af32:	|     |   move.l 28(a0),d1
    af36:	|     |   movea.l 8(sp),a0
    af3a:	|     |   move.l 114(a0),d0
    af3e:	|     |   cmp.l d1,d0
    af40:	|     +-- bne.s af48 <removeOneCharacter+0x44>
            overRegion = NULL;
    af42:	|     |   clr.l 1cb9c <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    af48:	|     \-> movea.l 8(sp),a0
    af4c:	|         move.l 68(a0),d0
    af50:	|     /-- beq.s af64 <removeOneCharacter+0x60>
    af52:	|     |   movea.l 8(sp),a0
    af56:	|     |   move.l 68(a0),d0
    af5a:	|     |   move.l d0,-(sp)
    af5c:	|     |   jsr 47ac <abortFunction>
    af62:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    af64:	|     \-> movea.l 8(sp),a0
    af68:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    af6c:	|         clr.l 12(sp)
    af70:	|     /-- bra.s af98 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    af72:	|  /--|-> movea.l 8(sp),a0
    af76:	|  |  |   movea.l 80(a0),a0
    af7a:	|  |  |   move.l (a0),d1
    af7c:	|  |  |   move.l 12(sp),d0
    af80:	|  |  |   add.l d0,d0
    af82:	|  |  |   add.l d0,d0
    af84:	|  |  |   movea.l d1,a0
    af86:	|  |  |   adda.l d0,a0
    af88:	|  |  |   move.l (a0),d0
    af8a:	|  |  |   move.l d0,-(sp)
    af8c:	|  |  |   jsr 9a0c <deleteAnim>
    af92:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    af94:	|  |  |   addq.l #1,12(sp)
    af98:	|  |  \-> moveq #2,d0
    af9a:	|  |      cmp.l 12(sp),d0
    af9e:	|  \----- bge.s af72 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    afa0:	|         move.l #117484,16(sp)
    afa8:	|     /-- bra.s afb8 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    afaa:	|  /--|-> movea.l 16(sp),a0
    afae:	|  |  |   move.l (a0),d0
    afb0:	|  |  |   moveq #36,d1
    afb2:	|  |  |   add.l d0,d1
    afb4:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    afb8:	|  |  \-> movea.l 16(sp),a0
    afbc:	|  |      move.l (a0),d0
    afbe:	|  |      cmp.l 8(sp),d0
    afc2:	|  \----- bne.s afaa <removeOneCharacter+0xa6>

        *killPeople = p->next;
    afc4:	|         movea.l 8(sp),a0
    afc8:	|         move.l 36(a0),d0
    afcc:	|         movea.l 16(sp),a0
    afd0:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    afd2:	|         movea.l 8(sp),a0
    afd6:	|         move.l 114(a0),d0
    afda:	|         move.l d0,-(sp)
    afdc:	|         jsr d9cc <removeObjectType>
    afe2:	|         addq.l #4,sp
        FreeVec(p);
    afe4:	|         move.l 8(sp),4(sp)
    afea:	|         move.l 1ca88 <SysBase>,d0
    aff0:	|         movea.l d0,a6
    aff2:	|         movea.l 4(sp),a1
    aff6:	|         jsr -690(a6)
    }
}
    affa:	\-------> nop
    affc:	          movea.l (sp)+,a6
    affe:	          lea 16(sp),sp
    b002:	          rts

0000b004 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b004:	       subq.l #8,sp
    b006:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b008:	       movea.l 16(sp),a0
    b00c:	       movea.l 80(a0),a0
    b010:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b016:	       movea.l 16(sp),a0
    b01a:	       move.l 92(a0),d2
    b01e:	       move.l 4(sp),-(sp)
    b022:	       pea b4 <_start+0xb4>
    b026:	       jsr 17d44 <__divsi3>
    b02c:	       addq.l #8,sp
    b02e:	       add.l d2,d0
    b030:	       move.l d0,d1
    b032:	       addi.l #180,d1
    b038:	       movea.l 16(sp),a0
    b03c:	       move.l 100(a0),d0
    b040:	       move.l d1,d2
    b042:	       add.l d0,d2
    b044:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b048:	   /-- bra.s b052 <rethinkAngle+0x4e>
    b04a:	/--|-> addi.l #-360,8(sp)
    b052:	|  \-> cmpi.l #359,8(sp)
    b05a:	\----- bgt.s b04a <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b05c:	       move.l 4(sp),-(sp)
    b060:	       move.l 12(sp),-(sp)
    b064:	       jsr 17cc6 <__mulsi3>
    b06a:	       addq.l #8,sp
    b06c:	       pea 168 <decodeFilename+0x50>
    b070:	       move.l d0,-(sp)
    b072:	       jsr 17d44 <__divsi3>
    b078:	       addq.l #8,sp
    b07a:	       movea.l 16(sp),a0
    b07e:	       move.l d0,106(a0)
}
    b082:	       nop
    b084:	       move.l (sp)+,d2
    b086:	       addq.l #8,sp
    b088:	       rts

0000b08a <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b08a:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b08c:	          movea.l 8(sp),a0
    b090:	          move.l 8(a0),d0
    b094:	          move.l 12(sp),-(sp)
    b098:	          move.l d0,-(sp)
    b09a:	          jsr 8d0 <put2bytes>
    b0a0:	          addq.l #8,sp
	if (p -> numFrames) {
    b0a2:	          movea.l 8(sp),a0
    b0a6:	          move.l 8(a0),d0
    b0aa:	/-------- beq.w b14e <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b0ae:	|         movea.l 8(sp),a0
    b0b2:	|         movea.l (a0),a0
    b0b4:	|         move.l (a0),d0
    b0b6:	|         move.l 12(sp),-(sp)
    b0ba:	|         move.l d0,-(sp)
    b0bc:	|         jsr 958 <put4bytes>
    b0c2:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b0c4:	|         clr.l (sp)
    b0c6:	|     /-- bra.s b140 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b0c8:	|  /--|-> movea.l 8(sp),a0
    b0cc:	|  |  |   movea.l 4(a0),a0
    b0d0:	|  |  |   move.l (sp),d1
    b0d2:	|  |  |   move.l d1,d0
    b0d4:	|  |  |   add.l d0,d0
    b0d6:	|  |  |   add.l d1,d0
    b0d8:	|  |  |   add.l d0,d0
    b0da:	|  |  |   add.l d0,d0
    b0dc:	|  |  |   adda.l d0,a0
    b0de:	|  |  |   move.l (a0),d0
    b0e0:	|  |  |   move.l 12(sp),-(sp)
    b0e4:	|  |  |   move.l d0,-(sp)
    b0e6:	|  |  |   jsr 958 <put4bytes>
    b0ec:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b0ee:	|  |  |   movea.l 8(sp),a0
    b0f2:	|  |  |   movea.l 4(a0),a0
    b0f6:	|  |  |   move.l (sp),d1
    b0f8:	|  |  |   move.l d1,d0
    b0fa:	|  |  |   add.l d0,d0
    b0fc:	|  |  |   add.l d1,d0
    b0fe:	|  |  |   add.l d0,d0
    b100:	|  |  |   add.l d0,d0
    b102:	|  |  |   adda.l d0,a0
    b104:	|  |  |   move.l 4(a0),d0
    b108:	|  |  |   move.l 12(sp),-(sp)
    b10c:	|  |  |   move.l d0,-(sp)
    b10e:	|  |  |   jsr 958 <put4bytes>
    b114:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b116:	|  |  |   movea.l 8(sp),a0
    b11a:	|  |  |   movea.l 4(a0),a0
    b11e:	|  |  |   move.l (sp),d1
    b120:	|  |  |   move.l d1,d0
    b122:	|  |  |   add.l d0,d0
    b124:	|  |  |   add.l d1,d0
    b126:	|  |  |   add.l d0,d0
    b128:	|  |  |   add.l d0,d0
    b12a:	|  |  |   adda.l d0,a0
    b12c:	|  |  |   move.l 8(a0),d0
    b130:	|  |  |   move.l 12(sp),-(sp)
    b134:	|  |  |   move.l d0,-(sp)
    b136:	|  |  |   jsr 958 <put4bytes>
    b13c:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b13e:	|  |  |   addq.l #1,(sp)
    b140:	|  |  \-> movea.l 8(sp),a0
    b144:	|  |      move.l 8(a0),d0
    b148:	|  |      cmp.l (sp),d0
    b14a:	|  \----- bgt.w b0c8 <saveAnim+0x3e>
		}
	}
	return TRUE;
    b14e:	\-------> moveq #1,d0
}
    b150:	          addq.l #4,sp
    b152:	          rts

0000b154 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b154:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b156:	             movea.l 8(sp),a0
    b15a:	             move.l 4(a0),d0
    b15e:	             move.l 12(sp),-(sp)
    b162:	             move.l d0,-(sp)
    b164:	             jsr 8d0 <put2bytes>
    b16a:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b16c:	             clr.l (sp)
    b16e:	   /-------- bra.s b19a <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b170:	/--|-------> movea.l 8(sp),a0
    b174:	|  |         move.l (a0),d1
    b176:	|  |         move.l (sp),d0
    b178:	|  |         add.l d0,d0
    b17a:	|  |         add.l d0,d0
    b17c:	|  |         movea.l d1,a0
    b17e:	|  |         adda.l d0,a0
    b180:	|  |         move.l (a0),d0
    b182:	|  |         move.l 12(sp),-(sp)
    b186:	|  |         move.l d0,-(sp)
    b188:	|  |         jsr b08a <saveAnim>
    b18e:	|  |         addq.l #8,sp
    b190:	|  |         tst.w d0
    b192:	|  |     /-- bne.s b198 <saveCostume+0x44>
    b194:	|  |     |   clr.w d0
    b196:	|  |  /--|-- bra.s b1ae <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b198:	|  |  |  \-> addq.l #1,(sp)
    b19a:	|  \--|----> movea.l 8(sp),a0
    b19e:	|     |      move.l 4(a0),d1
    b1a2:	|     |      move.l d1,d0
    b1a4:	|     |      add.l d0,d0
    b1a6:	|     |      add.l d1,d0
    b1a8:	|     |      cmp.l (sp),d0
    b1aa:	\-----|----- bgt.s b170 <saveCostume+0x1c>
	}

	return TRUE;
    b1ac:	      |      moveq #1,d0
}
    b1ae:	      \----> addq.l #4,sp
    b1b0:	             rts

0000b1b2 <savePeople>:

BOOL savePeople (BPTR fp) {
    b1b2:	             lea -144(sp),sp
    b1b6:	             move.l a6,-(sp)
    b1b8:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b1ba:	             move.l 1caec <allPeople>,148(sp)
	int countPeople = 0, a;
    b1c2:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b1c6:	             move.w 1c41a <scaleHorizon>,d0
    b1cc:	             movea.w d0,a0
    b1ce:	             move.l 156(sp),-(sp)
    b1d2:	             move.l a0,-(sp)
    b1d4:	             jsr a9c <putSigned>
    b1da:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b1dc:	             move.w 1c41c <scaleDivide>,d0
    b1e2:	             movea.w d0,a0
    b1e4:	             move.l 156(sp),-(sp)
    b1e8:	             move.l a0,-(sp)
    b1ea:	             jsr a9c <putSigned>
    b1f0:	             addq.l #8,sp

	while (me) {
    b1f2:	         /-- bra.s b202 <savePeople+0x50>
		countPeople ++;
    b1f4:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    b1f8:	      |  |   movea.l 148(sp),a0
    b1fc:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b202:	      |  \-> tst.l 148(sp)
    b206:	      \----- bne.s b1f4 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b208:	             move.l 156(sp),-(sp)
    b20c:	             move.l 148(sp),-(sp)
    b210:	             jsr 8d0 <put2bytes>
    b216:	             addq.l #8,sp

	me = allPeople;
    b218:	             move.l 1caec <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b220:	             clr.l 140(sp)
    b224:	   /-------- bra.w b67c <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b228:	/--|-------> movea.l 148(sp),a0
    b22c:	|  |         move.l (a0),d0
    b22e:	|  |         move.l 156(sp),-(sp)
    b232:	|  |         move.l d0,-(sp)
    b234:	|  |         jsr a46 <putFloat>
    b23a:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b23c:	|  |         movea.l 148(sp),a0
    b240:	|  |         move.l 4(a0),d0
    b244:	|  |         move.l 156(sp),-(sp)
    b248:	|  |         move.l d0,-(sp)
    b24a:	|  |         jsr a46 <putFloat>
    b250:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b252:	|  |         movea.l 148(sp),a0
    b256:	|  |         move.l 80(a0),d0
    b25a:	|  |         move.l 156(sp),-(sp)
    b25e:	|  |         move.l d0,-(sp)
    b260:	|  |         jsr b154 <saveCostume>
    b266:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b268:	|  |         movea.l 148(sp),a0
    b26c:	|  |         move.l 72(a0),d0
    b270:	|  |         move.l 156(sp),-(sp)
    b274:	|  |         move.l d0,-(sp)
    b276:	|  |         jsr b08a <saveAnim>
    b27c:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b27e:	|  |         move.l 156(sp),136(sp)
    b284:	|  |         movea.l 148(sp),a0
    b288:	|  |         move.l 72(a0),d1
    b28c:	|  |         movea.l 148(sp),a0
    b290:	|  |         move.l 76(a0),d0
    b294:	|  |         cmp.l d1,d0
    b296:	|  |         seq d0
    b298:	|  |         neg.b d0
    b29a:	|  |         move.b d0,d0
    b29c:	|  |         andi.l #255,d0
    b2a2:	|  |         move.l d0,132(sp)
    b2a6:	|  |         move.l 1ca90 <DOSBase>,d0
    b2ac:	|  |         movea.l d0,a6
    b2ae:	|  |         move.l 136(sp),d1
    b2b2:	|  |         move.l 132(sp),d2
    b2b6:	|  |         jsr -312(a6)
    b2ba:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b2be:	|  |         movea.l 148(sp),a0
    b2c2:	|  |         move.l 32(a0),d0
    b2c6:	|  |         move.l 156(sp),-(sp)
    b2ca:	|  |         move.l d0,-(sp)
    b2cc:	|  |         jsr a46 <putFloat>
    b2d2:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b2d4:	|  |         movea.l 148(sp),a0
    b2d8:	|  |         move.l 118(a0),d0
    b2dc:	|  |         move.l 156(sp),-(sp)
    b2e0:	|  |         move.l d0,-(sp)
    b2e2:	|  |         jsr 8d0 <put2bytes>
    b2e8:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b2ea:	|  |         movea.l 148(sp),a0
    b2ee:	|  |         move.l 20(a0),d0
    b2f2:	|  |         move.l 156(sp),-(sp)
    b2f6:	|  |         move.l d0,-(sp)
    b2f8:	|  |         jsr 8d0 <put2bytes>
    b2fe:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b300:	|  |         movea.l 148(sp),a0
    b304:	|  |         move.l 40(a0),d0
    b308:	|  |         move.l 156(sp),-(sp)
    b30c:	|  |         move.l d0,-(sp)
    b30e:	|  |         jsr 8d0 <put2bytes>
    b314:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b316:	|  |         movea.l 148(sp),a0
    b31a:	|  |         move.l 44(a0),d0
    b31e:	|  |         move.l 156(sp),-(sp)
    b322:	|  |         move.l d0,-(sp)
    b324:	|  |         jsr 8d0 <put2bytes>
    b32a:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b32c:	|  |         movea.l 148(sp),a0
    b330:	|  |         move.l 48(a0),d0
    b334:	|  |         move.l 156(sp),-(sp)
    b338:	|  |         move.l d0,-(sp)
    b33a:	|  |         jsr 8d0 <put2bytes>
    b340:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b342:	|  |         movea.l 148(sp),a0
    b346:	|  |         move.l 52(a0),d0
    b34a:	|  |         move.l 156(sp),-(sp)
    b34e:	|  |         move.l d0,-(sp)
    b350:	|  |         jsr 8d0 <put2bytes>
    b356:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b358:	|  |         movea.l 148(sp),a0
    b35c:	|  |         move.l 84(a0),d0
    b360:	|  |         move.l 156(sp),-(sp)
    b364:	|  |         move.l d0,-(sp)
    b366:	|  |         jsr 8d0 <put2bytes>
    b36c:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b36e:	|  |         movea.l 148(sp),a0
    b372:	|  |         move.l 88(a0),d0
    b376:	|  |         move.l 156(sp),-(sp)
    b37a:	|  |         move.l d0,-(sp)
    b37c:	|  |         jsr 8d0 <put2bytes>
    b382:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b384:	|  |         movea.l 148(sp),a0
    b388:	|  |         move.l 28(a0),d0
    b38c:	|  |         move.l 156(sp),-(sp)
    b390:	|  |         move.l d0,-(sp)
    b392:	|  |         jsr 8d0 <put2bytes>
    b398:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b39a:	|  |         movea.l 148(sp),a0
    b39e:	|  |         move.l 122(a0),d0
    b3a2:	|  |         move.l 156(sp),-(sp)
    b3a6:	|  |         move.l d0,-(sp)
    b3a8:	|  |         jsr 8d0 <put2bytes>
    b3ae:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b3b0:	|  |         movea.l 148(sp),a0
    b3b4:	|  |         move.l 24(a0),d0
    b3b8:	|  |         move.l d0,d0
    b3ba:	|  |         movea.w d0,a0
    b3bc:	|  |         move.l 156(sp),-(sp)
    b3c0:	|  |         move.l a0,-(sp)
    b3c2:	|  |         jsr a9c <putSigned>
    b3c8:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b3ca:	|  |         move.l 156(sp),124(sp)
    b3d0:	|  |         movea.l 148(sp),a0
    b3d4:	|  |         move.w 104(a0),d0
    b3d8:	|  |         movea.w d0,a0
    b3da:	|  |         move.l a0,120(sp)
    b3de:	|  |         move.l 1ca90 <DOSBase>,d0
    b3e4:	|  |         movea.l d0,a6
    b3e6:	|  |         move.l 124(sp),d1
    b3ea:	|  |         move.l 120(sp),d2
    b3ee:	|  |         jsr -312(a6)
    b3f2:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b3f6:	|  |         move.l 156(sp),112(sp)
    b3fc:	|  |         movea.l 148(sp),a0
    b400:	|  |         move.w 64(a0),d0
    b404:	|  |         movea.w d0,a0
    b406:	|  |         move.l a0,108(sp)
    b40a:	|  |         move.l 1ca90 <DOSBase>,d0
    b410:	|  |         movea.l d0,a6
    b412:	|  |         move.l 112(sp),d1
    b416:	|  |         move.l 108(sp),d2
    b41a:	|  |         jsr -312(a6)
    b41e:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b422:	|  |         move.l 156(sp),100(sp)
    b428:	|  |         movea.l 148(sp),a0
    b42c:	|  |         move.w 66(a0),d0
    b430:	|  |         movea.w d0,a0
    b432:	|  |         move.l a0,96(sp)
    b436:	|  |         move.l 1ca90 <DOSBase>,d0
    b43c:	|  |         movea.l d0,a6
    b43e:	|  |         move.l 100(sp),d1
    b442:	|  |         move.l 96(sp),d2
    b446:	|  |         jsr -312(a6)
    b44a:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b44e:	|  |         movea.l 148(sp),a0
    b452:	|  |         move.l 68(a0),d0
    b456:	|  |  /----- beq.s b494 <savePeople+0x2e2>
			FPutC (fp, 1);
    b458:	|  |  |      move.l 156(sp),76(sp)
    b45e:	|  |  |      moveq #1,d0
    b460:	|  |  |      move.l d0,72(sp)
    b464:	|  |  |      move.l 1ca90 <DOSBase>,d0
    b46a:	|  |  |      movea.l d0,a6
    b46c:	|  |  |      move.l 76(sp),d1
    b470:	|  |  |      move.l 72(sp),d2
    b474:	|  |  |      jsr -312(a6)
    b478:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b47c:	|  |  |      movea.l 148(sp),a0
    b480:	|  |  |      move.l 68(a0),d0
    b484:	|  |  |      move.l 156(sp),-(sp)
    b488:	|  |  |      move.l d0,-(sp)
    b48a:	|  |  |      jsr c6ae <saveFunction>
    b490:	|  |  |      addq.l #8,sp
    b492:	|  |  |  /-- bra.s b4b8 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b494:	|  |  \--|-> move.l 156(sp),88(sp)
    b49a:	|  |     |   moveq #1,d0
    b49c:	|  |     |   move.l d0,84(sp)
    b4a0:	|  |     |   move.l 1ca90 <DOSBase>,d0
    b4a6:	|  |     |   movea.l d0,a6
    b4a8:	|  |     |   move.l 88(sp),d1
    b4ac:	|  |     |   move.l 84(sp),d2
    b4b0:	|  |     |   jsr -312(a6)
    b4b4:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b4b8:	|  |     \-> movea.l 148(sp),a0
    b4bc:	|  |         move.l 106(a0),d0
    b4c0:	|  |         move.l 156(sp),-(sp)
    b4c4:	|  |         move.l d0,-(sp)
    b4c6:	|  |         jsr 8d0 <put2bytes>
    b4cc:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b4ce:	|  |         movea.l 148(sp),a0
    b4d2:	|  |         move.l 92(a0),d0
    b4d6:	|  |         move.l 156(sp),-(sp)
    b4da:	|  |         move.l d0,-(sp)
    b4dc:	|  |         jsr 8d0 <put2bytes>
    b4e2:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b4e4:	|  |         movea.l 148(sp),a0
    b4e8:	|  |         move.l 100(a0),d0
    b4ec:	|  |         move.l 156(sp),-(sp)
    b4f0:	|  |         move.l d0,-(sp)
    b4f2:	|  |         jsr 8d0 <put2bytes>
    b4f8:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b4fa:	|  |         movea.l 148(sp),a0
    b4fe:	|  |         move.l 96(a0),d0
    b502:	|  |         move.l 156(sp),-(sp)
    b506:	|  |         move.l d0,-(sp)
    b508:	|  |         jsr 8d0 <put2bytes>
    b50e:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b510:	|  |         movea.l 148(sp),a0
    b514:	|  |         move.l 110(a0),d0
    b518:	|  |         move.l d0,d0
    b51a:	|  |         movea.w d0,a0
    b51c:	|  |         move.l 156(sp),-(sp)
    b520:	|  |         move.l a0,-(sp)
    b522:	|  |         jsr a9c <putSigned>
    b528:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b52a:	|  |         movea.l 148(sp),a0
    b52e:	|  |         move.l 56(a0),d0
    b532:	|  |         move.l d0,d0
    b534:	|  |         movea.w d0,a0
    b536:	|  |         move.l 156(sp),-(sp)
    b53a:	|  |         move.l a0,-(sp)
    b53c:	|  |         jsr a9c <putSigned>
    b542:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b544:	|  |         movea.l 148(sp),a0
    b548:	|  |         move.l 60(a0),d0
    b54c:	|  |         move.l d0,d0
    b54e:	|  |         movea.w d0,a0
    b550:	|  |         move.l 156(sp),-(sp)
    b554:	|  |         move.l a0,-(sp)
    b556:	|  |         jsr a9c <putSigned>
    b55c:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b55e:	|  |         move.l 156(sp),64(sp)
    b564:	|  |         movea.l 148(sp),a0
    b568:	|  |         move.b 126(a0),d0
    b56c:	|  |         move.b d0,d0
    b56e:	|  |         andi.l #255,d0
    b574:	|  |         move.l d0,60(sp)
    b578:	|  |         move.l 1ca90 <DOSBase>,d0
    b57e:	|  |         movea.l d0,a6
    b580:	|  |         move.l 64(sp),d1
    b584:	|  |         move.l 60(sp),d2
    b588:	|  |         jsr -312(a6)
    b58c:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b590:	|  |         move.l 156(sp),52(sp)
    b596:	|  |         movea.l 148(sp),a0
    b59a:	|  |         move.b 127(a0),d0
    b59e:	|  |         move.b d0,d0
    b5a0:	|  |         andi.l #255,d0
    b5a6:	|  |         move.l d0,48(sp)
    b5aa:	|  |         move.l 1ca90 <DOSBase>,d0
    b5b0:	|  |         movea.l d0,a6
    b5b2:	|  |         move.l 52(sp),d1
    b5b6:	|  |         move.l 48(sp),d2
    b5ba:	|  |         jsr -312(a6)
    b5be:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b5c2:	|  |         move.l 156(sp),40(sp)
    b5c8:	|  |         movea.l 148(sp),a0
    b5cc:	|  |         move.b 128(a0),d0
    b5d0:	|  |         move.b d0,d0
    b5d2:	|  |         andi.l #255,d0
    b5d8:	|  |         move.l d0,36(sp)
    b5dc:	|  |         move.l 1ca90 <DOSBase>,d0
    b5e2:	|  |         movea.l d0,a6
    b5e4:	|  |         move.l 40(sp),d1
    b5e8:	|  |         move.l 36(sp),d2
    b5ec:	|  |         jsr -312(a6)
    b5f0:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b5f4:	|  |         move.l 156(sp),28(sp)
    b5fa:	|  |         movea.l 148(sp),a0
    b5fe:	|  |         move.b 129(a0),d0
    b602:	|  |         move.b d0,d0
    b604:	|  |         andi.l #255,d0
    b60a:	|  |         move.l d0,24(sp)
    b60e:	|  |         move.l 1ca90 <DOSBase>,d0
    b614:	|  |         movea.l d0,a6
    b616:	|  |         move.l 28(sp),d1
    b61a:	|  |         move.l 24(sp),d2
    b61e:	|  |         jsr -312(a6)
    b622:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b626:	|  |         move.l 156(sp),16(sp)
    b62c:	|  |         movea.l 148(sp),a0
    b630:	|  |         move.b 130(a0),d0
    b634:	|  |         move.b d0,d0
    b636:	|  |         andi.l #255,d0
    b63c:	|  |         move.l d0,12(sp)
    b640:	|  |         move.l 1ca90 <DOSBase>,d0
    b646:	|  |         movea.l d0,a6
    b648:	|  |         move.l 16(sp),d1
    b64c:	|  |         move.l 12(sp),d2
    b650:	|  |         jsr -312(a6)
    b654:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b658:	|  |         movea.l 148(sp),a0
    b65c:	|  |         move.l 114(a0),d0
    b660:	|  |         move.l 156(sp),-(sp)
    b664:	|  |         move.l d0,-(sp)
    b666:	|  |         jsr da6c <saveObjectRef>
    b66c:	|  |         addq.l #8,sp

		me = me -> next;
    b66e:	|  |         movea.l 148(sp),a0
    b672:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b678:	|  |         addq.l #1,140(sp)
    b67c:	|  \-------> movea.l 140(sp),a0
    b680:	|            cmpa.l 144(sp),a0
    b684:	\----------- blt.w b228 <savePeople+0x76>
	}
	return TRUE;
    b688:	             moveq #1,d0
}
    b68a:	             move.l (sp)+,d2
    b68c:	             movea.l (sp)+,a6
    b68e:	             lea 144(sp),sp
    b692:	             rts

0000b694 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b694:	movea.l 4(sp),a0
    b698:	move.l 8(sp),(a0)
}
    b69c:	nop
    b69e:	rts

0000b6a0 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b6a0:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b6a2:	       move.l 12(sp),-(sp)
    b6a6:	       jsr a72e <findPerson>
    b6ac:	       addq.l #4,sp
    b6ae:	       move.l d0,(sp)
	if (! moveMe) return;
    b6b0:	/----- beq.s b6c4 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b6b2:	|      move.l 8(sp),-(sp)
    b6b6:	|      move.l 4(sp),-(sp)
    b6ba:	|      jsr b6ca <setMyDrawMode>
    b6c0:	|      addq.l #8,sp
    b6c2:	|  /-- bra.s b6c6 <setDrawMode+0x26>
	if (! moveMe) return;
    b6c4:	\--|-> nop
}
    b6c6:	   \-> addq.l #4,sp
    b6c8:	       rts

0000b6ca <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b6ca:	       moveq #19,d0
    b6cc:	       cmp.l 8(sp),d0
    b6d0:	/----- bcs.w bba8 <setMyDrawMode+0x4de>
    b6d4:	|      move.l 8(sp),d0
    b6d8:	|      add.l d0,d0
    b6da:	|      movea.l d0,a0
    b6dc:	|      adda.l #46824,a0
    b6e2:	|      move.w (a0),d0
    b6e4:	|      jmp (b6e8 <setMyDrawMode+0x1e>,pc,d0.w)
    b6e8:	|      .short 0x04c0
    b6ea:	|      ori.l #6684712,-(a4)
    b6f0:	|      btst d0,-(a0)
    b6f2:	|      bchg d0,(a6)+
    b6f4:	|      bclr d0,(a4)+
    b6f6:	|      bset d0,(a2)+
    b6f8:	|      andi.b #84,(a6)
    b6fc:	|      andi.l #55575312,(a2)
    b702:	|      .short 0x02d0
    b704:	|      bclr d1,(a0)
    b706:	|      .short 0x044a
    b708:	|      .short 0x040c
    b70a:	|      movep.l d1,1158(a6)
    b70e:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b710:	|      movea.l 4(sp),a0
    b714:	|      clr.b 128(a0)
    b718:	|      movea.l 4(sp),a0
    b71c:	|      move.b 128(a0),d0
    b720:	|      movea.l 4(sp),a0
    b724:	|      move.b d0,127(a0)
    b728:	|      movea.l 4(sp),a0
    b72c:	|      move.b 127(a0),d0
    b730:	|      movea.l 4(sp),a0
    b734:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b738:	|      movea.l 4(sp),a0
    b73c:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b740:	|      movea.l 4(sp),a0
    b744:	|      move.b #64,130(a0)
			break;
    b74a:	|  /-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b74e:	|  |   movea.l 4(sp),a0
    b752:	|  |   clr.b 128(a0)
    b756:	|  |   movea.l 4(sp),a0
    b75a:	|  |   move.b 128(a0),d0
    b75e:	|  |   movea.l 4(sp),a0
    b762:	|  |   move.b d0,127(a0)
    b766:	|  |   movea.l 4(sp),a0
    b76a:	|  |   move.b 127(a0),d0
    b76e:	|  |   movea.l 4(sp),a0
    b772:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b776:	|  |   movea.l 4(sp),a0
    b77a:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b77e:	|  |   movea.l 4(sp),a0
    b782:	|  |   move.b #-128,130(a0)
			break;
    b788:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b78c:	|  |   movea.l 4(sp),a0
    b790:	|  |   clr.b 128(a0)
    b794:	|  |   movea.l 4(sp),a0
    b798:	|  |   move.b 128(a0),d0
    b79c:	|  |   movea.l 4(sp),a0
    b7a0:	|  |   move.b d0,127(a0)
    b7a4:	|  |   movea.l 4(sp),a0
    b7a8:	|  |   move.b 127(a0),d0
    b7ac:	|  |   movea.l 4(sp),a0
    b7b0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b7b4:	|  |   movea.l 4(sp),a0
    b7b8:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b7bc:	|  |   movea.l 4(sp),a0
    b7c0:	|  |   move.b #-64,130(a0)
			break;
    b7c6:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b7ca:	|  |   movea.l 4(sp),a0
    b7ce:	|  |   clr.b 128(a0)
    b7d2:	|  |   movea.l 4(sp),a0
    b7d6:	|  |   move.b 128(a0),d0
    b7da:	|  |   movea.l 4(sp),a0
    b7de:	|  |   move.b d0,127(a0)
    b7e2:	|  |   movea.l 4(sp),a0
    b7e6:	|  |   move.b 127(a0),d0
    b7ea:	|  |   movea.l 4(sp),a0
    b7ee:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b7f2:	|  |   movea.l 4(sp),a0
    b7f6:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b7fa:	|  |   movea.l 4(sp),a0
    b7fe:	|  |   move.b #-2,130(a0)
			break;
    b804:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b808:	|  |   movea.l 4(sp),a0
    b80c:	|  |   clr.b 128(a0)
    b810:	|  |   movea.l 4(sp),a0
    b814:	|  |   move.b 128(a0),d0
    b818:	|  |   movea.l 4(sp),a0
    b81c:	|  |   move.b d0,127(a0)
    b820:	|  |   movea.l 4(sp),a0
    b824:	|  |   move.b 127(a0),d0
    b828:	|  |   movea.l 4(sp),a0
    b82c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b830:	|  |   movea.l 4(sp),a0
    b834:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b83a:	|  |   movea.l 4(sp),a0
    b83e:	|  |   clr.b 130(a0)
			break;
    b842:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b846:	|  |   movea.l 4(sp),a0
    b84a:	|  |   clr.b 128(a0)
    b84e:	|  |   movea.l 4(sp),a0
    b852:	|  |   move.b 128(a0),d0
    b856:	|  |   movea.l 4(sp),a0
    b85a:	|  |   move.b d0,127(a0)
    b85e:	|  |   movea.l 4(sp),a0
    b862:	|  |   move.b 127(a0),d0
    b866:	|  |   movea.l 4(sp),a0
    b86a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b86e:	|  |   movea.l 4(sp),a0
    b872:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b878:	|  |   movea.l 4(sp),a0
    b87c:	|  |   clr.b 130(a0)
			break;
    b880:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b884:	|  |   movea.l 4(sp),a0
    b888:	|  |   clr.b 128(a0)
    b88c:	|  |   movea.l 4(sp),a0
    b890:	|  |   move.b 128(a0),d0
    b894:	|  |   movea.l 4(sp),a0
    b898:	|  |   move.b d0,127(a0)
    b89c:	|  |   movea.l 4(sp),a0
    b8a0:	|  |   move.b 127(a0),d0
    b8a4:	|  |   movea.l 4(sp),a0
    b8a8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b8ac:	|  |   movea.l 4(sp),a0
    b8b0:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b8b6:	|  |   movea.l 4(sp),a0
    b8ba:	|  |   clr.b 130(a0)
			break;
    b8be:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b8c2:	|  |   movea.l 4(sp),a0
    b8c6:	|  |   clr.b 128(a0)
    b8ca:	|  |   movea.l 4(sp),a0
    b8ce:	|  |   move.b 128(a0),d0
    b8d2:	|  |   movea.l 4(sp),a0
    b8d6:	|  |   move.b d0,127(a0)
    b8da:	|  |   movea.l 4(sp),a0
    b8de:	|  |   move.b 127(a0),d0
    b8e2:	|  |   movea.l 4(sp),a0
    b8e6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b8ea:	|  |   movea.l 4(sp),a0
    b8ee:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b8f2:	|  |   movea.l 4(sp),a0
    b8f6:	|  |   clr.b 130(a0)
			break;
    b8fa:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b8fe:	|  |   movea.l 4(sp),a0
    b902:	|  |   clr.b 128(a0)
    b906:	|  |   movea.l 4(sp),a0
    b90a:	|  |   move.b 128(a0),d0
    b90e:	|  |   movea.l 4(sp),a0
    b912:	|  |   move.b d0,127(a0)
    b916:	|  |   movea.l 4(sp),a0
    b91a:	|  |   move.b 127(a0),d0
    b91e:	|  |   movea.l 4(sp),a0
    b922:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b926:	|  |   movea.l 4(sp),a0
    b92a:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b92e:	|  |   movea.l 4(sp),a0
    b932:	|  |   move.b #64,130(a0)
			break;
    b938:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b93c:	|  |   movea.l 4(sp),a0
    b940:	|  |   clr.b 128(a0)
    b944:	|  |   movea.l 4(sp),a0
    b948:	|  |   move.b 128(a0),d0
    b94c:	|  |   movea.l 4(sp),a0
    b950:	|  |   move.b d0,127(a0)
    b954:	|  |   movea.l 4(sp),a0
    b958:	|  |   move.b 127(a0),d0
    b95c:	|  |   movea.l 4(sp),a0
    b960:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b964:	|  |   movea.l 4(sp),a0
    b968:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b96c:	|  |   movea.l 4(sp),a0
    b970:	|  |   move.b #-128,130(a0)
			break;
    b976:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b97a:	|  |   movea.l 4(sp),a0
    b97e:	|  |   clr.b 128(a0)
    b982:	|  |   movea.l 4(sp),a0
    b986:	|  |   move.b 128(a0),d0
    b98a:	|  |   movea.l 4(sp),a0
    b98e:	|  |   move.b d0,127(a0)
    b992:	|  |   movea.l 4(sp),a0
    b996:	|  |   move.b 127(a0),d0
    b99a:	|  |   movea.l 4(sp),a0
    b99e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b9a2:	|  |   movea.l 4(sp),a0
    b9a6:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b9aa:	|  |   movea.l 4(sp),a0
    b9ae:	|  |   move.b #-64,130(a0)
			break;
    b9b4:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b9b8:	|  |   movea.l 4(sp),a0
    b9bc:	|  |   move.b #-128,128(a0)
    b9c2:	|  |   movea.l 4(sp),a0
    b9c6:	|  |   move.b 128(a0),d0
    b9ca:	|  |   movea.l 4(sp),a0
    b9ce:	|  |   move.b d0,127(a0)
    b9d2:	|  |   movea.l 4(sp),a0
    b9d6:	|  |   move.b 127(a0),d0
    b9da:	|  |   movea.l 4(sp),a0
    b9de:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b9e2:	|  |   movea.l 4(sp),a0
    b9e6:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b9ec:	|  |   movea.l 4(sp),a0
    b9f0:	|  |   clr.b 130(a0)
			break;
    b9f4:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b9f8:	|  |   movea.l 4(sp),a0
    b9fc:	|  |   move.b #-128,128(a0)
    ba02:	|  |   movea.l 4(sp),a0
    ba06:	|  |   move.b 128(a0),d0
    ba0a:	|  |   movea.l 4(sp),a0
    ba0e:	|  |   move.b d0,127(a0)
    ba12:	|  |   movea.l 4(sp),a0
    ba16:	|  |   move.b 127(a0),d0
    ba1a:	|  |   movea.l 4(sp),a0
    ba1e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    ba22:	|  |   movea.l 4(sp),a0
    ba26:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    ba2c:	|  |   movea.l 4(sp),a0
    ba30:	|  |   clr.b 130(a0)
			break;
    ba34:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    ba38:	|  |   movea.l 4(sp),a0
    ba3c:	|  |   move.b #-128,128(a0)
    ba42:	|  |   movea.l 4(sp),a0
    ba46:	|  |   move.b 128(a0),d0
    ba4a:	|  |   movea.l 4(sp),a0
    ba4e:	|  |   move.b d0,127(a0)
    ba52:	|  |   movea.l 4(sp),a0
    ba56:	|  |   move.b 127(a0),d0
    ba5a:	|  |   movea.l 4(sp),a0
    ba5e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    ba62:	|  |   movea.l 4(sp),a0
    ba66:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    ba6c:	|  |   movea.l 4(sp),a0
    ba70:	|  |   clr.b 130(a0)
			break;
    ba74:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    ba78:	|  |   movea.l 4(sp),a0
    ba7c:	|  |   move.b #-128,128(a0)
    ba82:	|  |   movea.l 4(sp),a0
    ba86:	|  |   move.b 128(a0),d0
    ba8a:	|  |   movea.l 4(sp),a0
    ba8e:	|  |   move.b d0,127(a0)
    ba92:	|  |   movea.l 4(sp),a0
    ba96:	|  |   move.b 127(a0),d0
    ba9a:	|  |   movea.l 4(sp),a0
    ba9e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    baa2:	|  |   movea.l 4(sp),a0
    baa6:	|  |   st 129(a0)
			moveMe->transparency = 0;
    baaa:	|  |   movea.l 4(sp),a0
    baae:	|  |   clr.b 130(a0)
			break;
    bab2:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bab6:	|  |   movea.l 4(sp),a0
    baba:	|  |   st 128(a0)
    babe:	|  |   movea.l 4(sp),a0
    bac2:	|  |   move.b 128(a0),d0
    bac6:	|  |   movea.l 4(sp),a0
    baca:	|  |   move.b d0,127(a0)
    bace:	|  |   movea.l 4(sp),a0
    bad2:	|  |   move.b 127(a0),d0
    bad6:	|  |   movea.l 4(sp),a0
    bada:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bade:	|  |   movea.l 4(sp),a0
    bae2:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bae8:	|  |   movea.l 4(sp),a0
    baec:	|  |   clr.b 130(a0)
			break;
    baf0:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    baf4:	|  |   movea.l 4(sp),a0
    baf8:	|  |   st 128(a0)
    bafc:	|  |   movea.l 4(sp),a0
    bb00:	|  |   move.b 128(a0),d0
    bb04:	|  |   movea.l 4(sp),a0
    bb08:	|  |   move.b d0,127(a0)
    bb0c:	|  |   movea.l 4(sp),a0
    bb10:	|  |   move.b 127(a0),d0
    bb14:	|  |   movea.l 4(sp),a0
    bb18:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bb1c:	|  |   movea.l 4(sp),a0
    bb20:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bb26:	|  |   movea.l 4(sp),a0
    bb2a:	|  |   clr.b 130(a0)
			break;
    bb2e:	|  +-- bra.w bbe2 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bb32:	|  |   movea.l 4(sp),a0
    bb36:	|  |   st 128(a0)
    bb3a:	|  |   movea.l 4(sp),a0
    bb3e:	|  |   move.b 128(a0),d0
    bb42:	|  |   movea.l 4(sp),a0
    bb46:	|  |   move.b d0,127(a0)
    bb4a:	|  |   movea.l 4(sp),a0
    bb4e:	|  |   move.b 127(a0),d0
    bb52:	|  |   movea.l 4(sp),a0
    bb56:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bb5a:	|  |   movea.l 4(sp),a0
    bb5e:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bb64:	|  |   movea.l 4(sp),a0
    bb68:	|  |   clr.b 130(a0)
			break;
    bb6c:	|  +-- bra.s bbe2 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bb6e:	|  |   movea.l 4(sp),a0
    bb72:	|  |   st 128(a0)
    bb76:	|  |   movea.l 4(sp),a0
    bb7a:	|  |   move.b 128(a0),d0
    bb7e:	|  |   movea.l 4(sp),a0
    bb82:	|  |   move.b d0,127(a0)
    bb86:	|  |   movea.l 4(sp),a0
    bb8a:	|  |   move.b 127(a0),d0
    bb8e:	|  |   movea.l 4(sp),a0
    bb92:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bb96:	|  |   movea.l 4(sp),a0
    bb9a:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bb9e:	|  |   movea.l 4(sp),a0
    bba2:	|  |   clr.b 130(a0)
			break;
    bba6:	|  +-- bra.s bbe2 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bba8:	\--|-> movea.l 4(sp),a0
    bbac:	   |   clr.b 128(a0)
    bbb0:	   |   movea.l 4(sp),a0
    bbb4:	   |   move.b 128(a0),d0
    bbb8:	   |   movea.l 4(sp),a0
    bbbc:	   |   move.b d0,127(a0)
    bbc0:	   |   movea.l 4(sp),a0
    bbc4:	   |   move.b 127(a0),d0
    bbc8:	   |   movea.l 4(sp),a0
    bbcc:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bbd0:	   |   movea.l 4(sp),a0
    bbd4:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    bbd8:	   |   movea.l 4(sp),a0
    bbdc:	   |   clr.b 130(a0)
			break;
    bbe0:	   |   nop
	}
}
    bbe2:	   \-> nop
    bbe4:	       rts

0000bbe6 <shufflePeople>:

void shufflePeople () {
    bbe6:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    bbea:	             move.l #117484,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    bbf2:	             move.l 1caec <allPeople>,d0
    bbf8:	/----------- beq.w bcce <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    bbfc:	|     /----- bra.w bcbe <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    bc00:	|  /--|----> movea.l 16(sp),a0
    bc04:	|  |  |      movea.l (a0),a0
    bc06:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    bc0c:	|  |  |      movea.l 16(sp),a0
    bc10:	|  |  |      movea.l (a0),a0
    bc12:	|  |  |      move.l 118(a0),d0
    bc16:	|  |  |      moveq #1,d1
    bc18:	|  |  |      and.l d1,d0
    bc1a:	|  |  |  /-- beq.s bc32 <shufflePeople+0x4c>
    bc1c:	|  |  |  |   move.l #1148846080,-(sp)
    bc22:	|  |  |  |   move.l 16(sp),-(sp)
    bc26:	|  |  |  |   jsr 17528 <__addsf3>
    bc2c:	|  |  |  |   addq.l #8,sp
    bc2e:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bc32:	|  |  |  \-> movea.l 16(sp),a0
    bc36:	|  |  |      movea.l (a0),a0
    bc38:	|  |  |      movea.l 36(a0),a0
    bc3c:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bc42:	|  |  |      movea.l 16(sp),a0
    bc46:	|  |  |      movea.l (a0),a0
    bc48:	|  |  |      movea.l 36(a0),a0
    bc4c:	|  |  |      move.l 118(a0),d0
    bc50:	|  |  |      moveq #1,d1
    bc52:	|  |  |      and.l d1,d0
    bc54:	|  |  |  /-- beq.s bc6c <shufflePeople+0x86>
    bc56:	|  |  |  |   move.l #1148846080,-(sp)
    bc5c:	|  |  |  |   move.l 12(sp),-(sp)
    bc60:	|  |  |  |   jsr 17528 <__addsf3>
    bc66:	|  |  |  |   addq.l #8,sp
    bc68:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bc6c:	|  |  |  \-> move.l 8(sp),-(sp)
    bc70:	|  |  |      move.l 16(sp),-(sp)
    bc74:	|  |  |      jsr 178d8 <__gtsf2>
    bc7a:	|  |  |      addq.l #8,sp
    bc7c:	|  |  |      tst.l d0
    bc7e:	|  |  |  /-- ble.s bcb0 <shufflePeople+0xca>
			A = (*thisReference);
    bc80:	|  |  |  |   movea.l 16(sp),a0
    bc84:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bc88:	|  |  |  |   movea.l 16(sp),a0
    bc8c:	|  |  |  |   movea.l (a0),a0
    bc8e:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bc92:	|  |  |  |   movea.l (sp),a0
    bc94:	|  |  |  |   move.l 36(a0),d0
    bc98:	|  |  |  |   movea.l 4(sp),a0
    bc9c:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bca0:	|  |  |  |   movea.l (sp),a0
    bca2:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bca8:	|  |  |  |   movea.l 16(sp),a0
    bcac:	|  |  |  |   move.l (sp),(a0)
    bcae:	|  |  +--|-- bra.s bcbe <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bcb0:	|  |  |  \-> movea.l 16(sp),a0
    bcb4:	|  |  |      move.l (a0),d0
    bcb6:	|  |  |      moveq #36,d1
    bcb8:	|  |  |      add.l d0,d1
    bcba:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bcbe:	|  |  \----> movea.l 16(sp),a0
    bcc2:	|  |         movea.l (a0),a0
    bcc4:	|  |         move.l 36(a0),d0
    bcc8:	|  \-------- bne.w bc00 <shufflePeople+0x1a>
    bccc:	|        /-- bra.s bcd0 <shufflePeople+0xea>
	if (!allPeople) return;
    bcce:	\--------|-> nop
		}
	}
}
    bcd0:	         \-> lea 20(sp),sp
    bcd4:	             rts

0000bcd6 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bcd6:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bcd8:	       tst.l 8(sp)
    bcdc:	   /-- bgt.s bce2 <setCharacterWalkSpeed+0xc>
    bcde:	   |   clr.w d0
    bce0:	/--|-- bra.s bd00 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bce2:	|  \-> move.l 12(sp),-(sp)
    bce6:	|      jsr a72e <findPerson>
    bcec:	|      addq.l #4,sp
    bcee:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bcf0:	|  /-- bne.s bcf6 <setCharacterWalkSpeed+0x20>
    bcf2:	|  |   clr.w d0
    bcf4:	+--|-- bra.s bd00 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bcf6:	|  \-> movea.l (sp),a0
    bcf8:	|      move.l 8(sp),28(a0)
	return TRUE;
    bcfe:	|      moveq #1,d0
}
    bd00:	\----> addq.l #4,sp
    bd02:	       rts

0000bd04 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bd04:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bd06:	       move.l 8(sp),-(sp)
    bd0a:	       jsr a72e <findPerson>
    bd10:	       addq.l #4,sp
    bd12:	       move.l d0,(sp)
    if (thisPerson) {
    bd14:	/----- beq.s bd34 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bd16:	|      movea.l (sp),a0
    bd18:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bd1e:	|      moveq #2,d0
    bd20:	|      and.l 12(sp),d0
    bd24:	|  /-- beq.s bd30 <setPersonExtra+0x2c>
    bd26:	|  |   movea.l (sp),a0
    bd28:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bd30:	|  \-> moveq #1,d0
    bd32:	|  /-- bra.s bd36 <setPersonExtra+0x32>
    }
    return FALSE;
    bd34:	\--|-> clr.w d0
}
    bd36:	   \-> addq.l #4,sp
    bd38:	       rts

0000bd3a <setScale>:


void setScale (short int h, short int d) {
    bd3a:	subq.l #4,sp
    bd3c:	move.l 8(sp),d1
    bd40:	move.l 12(sp),d0
    bd44:	move.w d1,d1
    bd46:	move.w d1,2(sp)
    bd4a:	move.w d0,d0
    bd4c:	move.w d0,(sp)
	scaleHorizon = h;
    bd4e:	move.w 2(sp),1c41a <scaleHorizon>
	scaleDivide = d;
    bd56:	move.w (sp),1c41c <scaleDivide>
}
    bd5c:	nop
    bd5e:	addq.l #4,sp
    bd60:	rts

0000bd62 <setShown>:

void setShown (BOOL h, int ob) {
    bd62:	    subq.l #8,sp
    bd64:	    move.l 12(sp),d0
    bd68:	    move.w d0,d0
    bd6a:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    bd6e:	    move.l 16(sp),-(sp)
    bd72:	    jsr a72e <findPerson>
    bd78:	    addq.l #4,sp
    bd7a:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    bd7e:	/-- beq.s bd8a <setShown+0x28>
    bd80:	|   movea.l 4(sp),a0
    bd84:	|   move.w 2(sp),104(a0)
}
    bd8a:	\-> nop
    bd8c:	    addq.l #8,sp
    bd8e:	    rts

0000bd90 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bd90:	       subq.l #8,sp
    bd92:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bd94:	       movea.l 16(sp),a0
    bd98:	       move.l 92(a0),d0
    bd9c:	       move.l d0,d1
    bd9e:	       addi.l #360,d1
    bda4:	       movea.l 16(sp),a0
    bda8:	       move.l 96(a0),d0
    bdac:	       move.l d1,d2
    bdae:	       sub.l d0,d2
    bdb0:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bdb4:	       movea.l 16(sp),a0
    bdb8:	       move.l 122(a0),d0
    bdbc:	   /-- beq.s bdc8 <spinStep+0x38>
    bdbe:	   |   movea.l 16(sp),a0
    bdc2:	   |   move.l 122(a0),d0
    bdc6:	/--|-- bra.s bde2 <spinStep+0x52>
    bdc8:	|  \-> movea.l 16(sp),a0
    bdcc:	|      movea.l 80(a0),a0
    bdd0:	|      move.l 4(a0),d0
    bdd4:	|      move.l d0,-(sp)
    bdd6:	|      pea 168 <decodeFilename+0x50>
    bdda:	|      jsr 17d44 <__divsi3>
    bde0:	|      addq.l #8,sp
    bde2:	\----> move.l d0,4(sp)
	while (diff > 180) {
    bde6:	   /-- bra.s bdf0 <spinStep+0x60>
		diff -= 360;
    bde8:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bdf0:	|  \-> cmpi.l #180,8(sp)
    bdf8:	\----- bgt.s bde8 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bdfa:	       move.l 8(sp),d0
    bdfe:	       cmp.l 4(sp),d0
    be02:	   /-- blt.s be20 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    be04:	   |   movea.l 16(sp),a0
    be08:	   |   move.l 92(a0),d0
    be0c:	   |   sub.l 4(sp),d0
    be10:	   |   move.l d0,-(sp)
    be12:	   |   move.l 20(sp),-(sp)
    be16:	   |   jsr bf00 <turnMeAngle>
    be1c:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    be1e:	/--|-- bra.s be66 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    be20:	|  \-> move.l 4(sp),d0
    be24:	|      neg.l d0
    be26:	|      cmp.l 8(sp),d0
    be2a:	|  /-- blt.s be48 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    be2c:	|  |   movea.l 16(sp),a0
    be30:	|  |   move.l 92(a0),d0
    be34:	|  |   add.l 4(sp),d0
    be38:	|  |   move.l d0,-(sp)
    be3a:	|  |   move.l 20(sp),-(sp)
    be3e:	|  |   jsr bf00 <turnMeAngle>
    be44:	|  |   addq.l #8,sp
}
    be46:	+--|-- bra.s be66 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    be48:	|  \-> movea.l 16(sp),a0
    be4c:	|      move.l 96(a0),d0
    be50:	|      move.l d0,-(sp)
    be52:	|      move.l 20(sp),-(sp)
    be56:	|      jsr bf00 <turnMeAngle>
    be5c:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    be5e:	|      movea.l 16(sp),a0
    be62:	|      clr.w 66(a0)
}
    be66:	\----> nop
    be68:	       move.l (sp)+,d2
    be6a:	       addq.l #8,sp
    be6c:	       rts

0000be6e <stopPerson>:


BOOL stopPerson (int o) {
    be6e:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    be70:	       move.l 8(sp),-(sp)
    be74:	       jsr a72e <findPerson>
    be7a:	       addq.l #4,sp
    be7c:	       move.l d0,(sp)
    if (moveMe)
    be7e:	/----- beq.s bebc <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    be80:	|      movea.l (sp),a0
    be82:	|      move.l 68(a0),d0
    be86:	+----- beq.s bebc <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    be88:	|      movea.l (sp),a0
    be8a:	|      move.l 68(a0),d0
    be8e:	|      move.l d0,-(sp)
    be90:	|      jsr 47ac <abortFunction>
    be96:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    be98:	|      movea.l (sp),a0
    be9a:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    be9e:	|      movea.l (sp),a0
    bea0:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bea4:	|      movea.l (sp),a0
    bea6:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    beaa:	|      clr.l -(sp)
    beac:	|      move.l 4(sp),-(sp)
    beb0:	|      jsr 8204 <setFrames>
    beb6:	|      addq.l #8,sp
            return TRUE;
    beb8:	|      moveq #1,d0
    beba:	|  /-- bra.s bebe <stopPerson+0x50>
        }
    return FALSE;
    bebc:	\--|-> clr.w d0
}
    bebe:	   \-> addq.l #4,sp
    bec0:	       rts

0000bec2 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bec2:	       subq.l #8,sp
	int total = 0;
    bec4:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bec8:	       clr.l (sp)
    beca:	   /-- bra.s beec <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    becc:	/--|-> movea.l 12(sp),a0
    bed0:	|  |   movea.l 4(a0),a0
    bed4:	|  |   move.l (sp),d1
    bed6:	|  |   move.l d1,d0
    bed8:	|  |   add.l d0,d0
    beda:	|  |   add.l d1,d0
    bedc:	|  |   add.l d0,d0
    bede:	|  |   add.l d0,d0
    bee0:	|  |   adda.l d0,a0
    bee2:	|  |   move.l 4(a0),d0
    bee6:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    beea:	|  |   addq.l #1,(sp)
    beec:	|  \-> movea.l 12(sp),a0
    bef0:	|      move.l 8(a0),d0
    bef4:	|      cmp.l (sp),d0
    bef6:	\----- bgt.s becc <timeForAnim+0xa>
	}
	return total;
    bef8:	       move.l 4(sp),d0
}
    befc:	       addq.l #8,sp
    befe:	       rts

0000bf00 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    bf00:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    bf02:	       movea.l 8(sp),a0
    bf06:	       movea.l 80(a0),a0
    bf0a:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    bf0e:	       movea.l 8(sp),a0
    bf12:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    bf18:	       move.l (sp),-(sp)
    bf1a:	       pea b4 <_start+0xb4>
    bf1e:	       jsr 17d44 <__divsi3>
    bf24:	       addq.l #8,sp
    bf26:	       move.l d0,d1
    bf28:	       addi.l #180,d1
    bf2e:	       movea.l 8(sp),a0
    bf32:	       move.l 100(a0),d0
    bf36:	       add.l d1,d0
    bf38:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    bf3c:	   /-- bra.s bf46 <turnMeAngle+0x46>
    bf3e:	/--|-> addi.l #-360,12(sp)
    bf46:	|  \-> cmpi.l #359,12(sp)
    bf4e:	\----- bgt.s bf3e <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    bf50:	       move.l (sp),-(sp)
    bf52:	       move.l 16(sp),-(sp)
    bf56:	       jsr 17cc6 <__mulsi3>
    bf5c:	       addq.l #8,sp
    bf5e:	       pea 168 <decodeFilename+0x50>
    bf62:	       move.l d0,-(sp)
    bf64:	       jsr 17d44 <__divsi3>
    bf6a:	       addq.l #8,sp
    bf6c:	       movea.l 8(sp),a0
    bf70:	       move.l d0,106(a0)
}
    bf74:	       nop
    bf76:	       addq.l #4,sp
    bf78:	       rts

0000bf7a <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    bf7a:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bf7c:	          move.l 8(sp),-(sp)
    bf80:	          jsr a72e <findPerson>
    bf86:	          addq.l #4,sp
    bf88:	          move.l d0,(sp)
    if (thisPerson) {
    bf8a:	/-------- beq.s bfea <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    bf8c:	|         movea.l (sp),a0
    bf8e:	|         move.l 68(a0),d0
    bf92:	|     /-- beq.s bfa4 <turnPersonToFace+0x2a>
    bf94:	|     |   movea.l (sp),a0
    bf96:	|     |   move.l 68(a0),d0
    bf9a:	|     |   move.l d0,-(sp)
    bf9c:	|     |   jsr 47ac <abortFunction>
    bfa2:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    bfa4:	|     \-> movea.l (sp),a0
    bfa6:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    bfaa:	|         movea.l (sp),a0
    bfac:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    bfb0:	|         movea.l (sp),a0
    bfb2:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    bfb6:	|         move.l 12(sp),-(sp)
    bfba:	|         move.l 4(sp),-(sp)
    bfbe:	|         jsr bf00 <turnMeAngle>
    bfc4:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    bfc6:	|         movea.l 1cae4 <speech>,a0
    bfcc:	|         move.l (a0),d0
    bfce:	|         cmp.l (sp),d0
    bfd0:	|  /----- bne.s bfd6 <turnPersonToFace+0x5c>
    bfd2:	|  |      moveq #2,d0
    bfd4:	|  |  /-- bra.s bfd8 <turnPersonToFace+0x5e>
    bfd6:	|  \--|-> moveq #0,d0
    bfd8:	|     \-> move.l d0,-(sp)
    bfda:	|         move.l 4(sp),-(sp)
    bfde:	|         jsr 8204 <setFrames>
    bfe4:	|         addq.l #8,sp
        return TRUE;
    bfe6:	|         moveq #1,d0
    bfe8:	|     /-- bra.s bfec <turnPersonToFace+0x72>
    }
    return FALSE;
    bfea:	\-----|-> clr.w d0
}
    bfec:	      \-> addq.l #4,sp
    bfee:	          rts

0000bff0 <walkAllPeople>:

void walkAllPeople() {
    bff0:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    bff2:	             move.l 1caec <allPeople>,(sp)

	while (thisPerson) {
    bff8:	   /-------- bra.s c068 <walkAllPeople+0x78>
		if (thisPerson->walking) {
    bffa:	/--|-------> movea.l (sp),a0
    bffc:	|  |         move.w 64(a0),d0
    c000:	|  |     /-- beq.s c014 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    c002:	|  |     |   pea 1 <_start+0x1>
    c006:	|  |     |   move.l 4(sp),-(sp)
    c00a:	|  |     |   jsr c074 <walkMe>
    c010:	|  |     |   addq.l #8,sp
    c012:	|  |  /--|-- bra.s c034 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    c014:	|  |  |  \-> movea.l (sp),a0
    c016:	|  |  |      move.w 66(a0),d0
    c01a:	|  |  +----- beq.s c034 <walkAllPeople+0x44>
			spinStep(thisPerson);
    c01c:	|  |  |      move.l (sp),-(sp)
    c01e:	|  |  |      jsr bd90 <spinStep>
    c024:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    c026:	|  |  |      clr.l -(sp)
    c028:	|  |  |      move.l 4(sp),-(sp)
    c02c:	|  |  |      jsr 8204 <setFrames>
    c032:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    c034:	|  |  \----> movea.l (sp),a0
    c036:	|  |         move.w 64(a0),d0
    c03a:	|  |     /-- bne.s c062 <walkAllPeople+0x72>
    c03c:	|  |     |   movea.l (sp),a0
    c03e:	|  |     |   move.w 66(a0),d0
    c042:	|  |     +-- bne.s c062 <walkAllPeople+0x72>
    c044:	|  |     |   movea.l (sp),a0
    c046:	|  |     |   move.l 68(a0),d0
    c04a:	|  |     +-- beq.s c062 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    c04c:	|  |     |   movea.l (sp),a0
    c04e:	|  |     |   move.l 68(a0),d0
    c052:	|  |     |   move.l d0,-(sp)
    c054:	|  |     |   jsr 691c <restartFunction>
    c05a:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    c05c:	|  |     |   movea.l (sp),a0
    c05e:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    c062:	|  |     \-> movea.l (sp),a0
    c064:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    c068:	|  \-------> tst.l (sp)
    c06a:	\----------- bne.s bffa <walkAllPeople+0xa>
	}
}
    c06c:	             nop
    c06e:	             nop
    c070:	             addq.l #4,sp
    c072:	             rts

0000c074 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c074:	                lea -20(sp),sp
    c078:	                move.l d3,-(sp)
    c07a:	                move.l d2,-(sp)
    c07c:	                move.l 36(sp),d0
    c080:	                move.w d0,d0
    c082:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c086:	                cmpi.w #-1,10(sp)
    c08c:	/-------------- bne.s c094 <walkMe+0x20>
    c08e:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c094:	>-------------> movea.l 32(sp),a0
    c098:	|               move.l 48(a0),d0
    c09c:	|               move.l d0,-(sp)
    c09e:	|               jsr 1776c <__floatsisf>
    c0a4:	|               addq.l #4,sp
    c0a6:	|               move.l d0,d1
    c0a8:	|               movea.l 32(sp),a0
    c0ac:	|               move.l (a0),d0
    c0ae:	|               move.l d0,-(sp)
    c0b0:	|               move.l d1,-(sp)
    c0b2:	|               jsr 17a60 <__subsf3>
    c0b8:	|               addq.l #8,sp
    c0ba:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c0be:	|               movea.l 32(sp),a0
    c0c2:	|               move.l 52(a0),d0
    c0c6:	|               move.l d0,-(sp)
    c0c8:	|               jsr 1776c <__floatsisf>
    c0ce:	|               addq.l #4,sp
    c0d0:	|               move.l d0,d1
    c0d2:	|               movea.l 32(sp),a0
    c0d6:	|               move.l 4(a0),d0
    c0da:	|               move.l d0,-(sp)
    c0dc:	|               move.l d1,-(sp)
    c0de:	|               jsr 17a60 <__subsf3>
    c0e4:	|               addq.l #8,sp
    c0e6:	|               move.l d0,-(sp)
    c0e8:	|               move.l d0,-(sp)
    c0ea:	|               jsr 17528 <__addsf3>
    c0f0:	|               addq.l #8,sp
    c0f2:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c0f6:	|               movea.l 32(sp),a0
    c0fa:	|               move.l 32(a0),d2
    c0fe:	|               movea.l 32(sp),a0
    c102:	|               move.l 28(a0),d0
    c106:	|               move.l d0,-(sp)
    c108:	|               jsr 1776c <__floatsisf>
    c10e:	|               addq.l #4,sp
    c110:	|               move.l d0,-(sp)
    c112:	|               move.l d2,-(sp)
    c114:	|               jsr 1781e <__mulsf3>
    c11a:	|               addq.l #8,sp
    c11c:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c120:	|               move.l 24(sp),-(sp)
    c124:	|               jsr 1768e <__extendsfdf2>
    c12a:	|               addq.l #4,sp
    c12c:	|               move.l #-1717986918,-(sp)
    c132:	|               move.l #1070176665,-(sp)
    c138:	|               move.l d1,-(sp)
    c13a:	|               move.l d0,-(sp)
    c13c:	|               jsr 17944 <__ltdf2>
    c142:	|               lea 16(sp),sp
    c146:	|               tst.l d0
    c148:	|           /-- bge.s c152 <walkMe+0xde>
    c14a:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c152:	|           \-> move.l 20(sp),-(sp)
    c156:	|               jsr 17704 <__fixsfsi>
    c15c:	|               addq.l #4,sp
    c15e:	|               move.l d0,-(sp)
    c160:	|               jsr 931e <TF_abs>
    c166:	|               addq.l #4,sp
    c168:	|               move.l d0,d2
    c16a:	|               move.l 16(sp),-(sp)
    c16e:	|               jsr 17704 <__fixsfsi>
    c174:	|               addq.l #4,sp
    c176:	|               move.l d0,-(sp)
    c178:	|               jsr 931e <TF_abs>
    c17e:	|               addq.l #4,sp
    c180:	|               cmp.l d2,d0
    c182:	|        /----- bgt.s c1a6 <walkMe+0x132>
    c184:	|        |      move.l 20(sp),-(sp)
    c188:	|        |      jsr 17704 <__fixsfsi>
    c18e:	|        |      addq.l #4,sp
    c190:	|        |      move.l d0,-(sp)
    c192:	|        |      jsr 931e <TF_abs>
    c198:	|        |      addq.l #4,sp
    c19a:	|        |      move.l d0,-(sp)
    c19c:	|        |      jsr 1776c <__floatsisf>
    c1a2:	|        |      addq.l #4,sp
    c1a4:	|        |  /-- bra.s c1c6 <walkMe+0x152>
    c1a6:	|        \--|-> move.l 16(sp),-(sp)
    c1aa:	|           |   jsr 17704 <__fixsfsi>
    c1b0:	|           |   addq.l #4,sp
    c1b2:	|           |   move.l d0,-(sp)
    c1b4:	|           |   jsr 931e <TF_abs>
    c1ba:	|           |   addq.l #4,sp
    c1bc:	|           |   move.l d0,-(sp)
    c1be:	|           |   jsr 1776c <__floatsisf>
    c1c4:	|           |   addq.l #4,sp
    c1c6:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c1ca:	|               move.l 12(sp),-(sp)
    c1ce:	|               jsr 17704 <__fixsfsi>
    c1d4:	|               addq.l #4,sp
    c1d6:	|               move.l d0,-(sp)
    c1d8:	|               jsr 931e <TF_abs>
    c1de:	|               addq.l #4,sp
    c1e0:	|               move.l d0,-(sp)
    c1e2:	|               jsr 1776c <__floatsisf>
    c1e8:	|               addq.l #4,sp
    c1ea:	|               move.l d0,-(sp)
    c1ec:	|               move.l 28(sp),-(sp)
    c1f0:	|               jsr 17992 <__ltsf2>
    c1f6:	|               addq.l #8,sp
    c1f8:	|               tst.l d0
    c1fa:	|        /----- bge.w c2ac <walkMe+0x238>
			if (thisPerson->spinning) {
    c1fe:	|        |      movea.l 32(sp),a0
    c202:	|        |      move.w 66(a0),d0
    c206:	|        |  /-- beq.s c224 <walkMe+0x1b0>
				spinStep(thisPerson);
    c208:	|        |  |   move.l 32(sp),-(sp)
    c20c:	|        |  |   jsr bd90 <spinStep>
    c212:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c214:	|        |  |   pea 1 <_start+0x1>
    c218:	|        |  |   move.l 36(sp),-(sp)
    c21c:	|        |  |   jsr 8204 <setFrames>
    c222:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c224:	|        |  \-> move.l 24(sp),-(sp)
    c228:	|        |      move.l 16(sp),-(sp)
    c22c:	|        |      jsr 17622 <__divsf3>
    c232:	|        |      addq.l #8,sp
    c234:	|        |      move.l d0,24(sp)
			if (move)
    c238:	|        |      tst.w 10(sp)
    c23c:	|        |  /-- beq.s c2a6 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c23e:	|        |  |   movea.l 32(sp),a0
    c242:	|        |  |   move.l 4(a0),d2
    c246:	|        |  |   move.l 24(sp),d0
    c24a:	|        |  |   move.l d0,-(sp)
    c24c:	|        |  |   move.l d0,-(sp)
    c24e:	|        |  |   jsr 17528 <__addsf3>
    c254:	|        |  |   addq.l #8,sp
    c256:	|        |  |   move.l d0,-(sp)
    c258:	|        |  |   move.l 20(sp),-(sp)
    c25c:	|        |  |   jsr 17622 <__divsf3>
    c262:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c264:	|        |  |   move.l d0,-(sp)
    c266:	|        |  |   move.l d2,-(sp)
    c268:	|        |  |   jsr 17528 <__addsf3>
    c26e:	|        |  |   addq.l #8,sp
    c270:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c272:	|        |  |   movea.l 32(sp),a0
    c276:	|        |  |   move.l (a0),d3
    c278:	|        |  |   move.l 24(sp),-(sp)
    c27c:	|        |  |   move.l 24(sp),-(sp)
    c280:	|        |  |   jsr 17622 <__divsf3>
    c286:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c288:	|        |  |   move.l d0,-(sp)
    c28a:	|        |  |   move.l d3,-(sp)
    c28c:	|        |  |   jsr 17528 <__addsf3>
    c292:	|        |  |   addq.l #8,sp
    c294:	|        |  |   move.l d2,-(sp)
    c296:	|        |  |   move.l d0,-(sp)
    c298:	|        |  |   move.l 40(sp),-(sp)
    c29c:	|        |  |   jsr ae76 <moveAndScale>
    c2a2:	|        |  |   lea 12(sp),sp
			return TRUE;
    c2a6:	|        |  \-> moveq #1,d0
    c2a8:	|  /-----|----- bra.w c35a <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c2ac:	|  |     \----> movea.l 32(sp),a0
    c2b0:	|  |            move.l 56(a0),d0
    c2b4:	|  |            moveq #-1,d1
    c2b6:	|  |            cmp.l d0,d1
    c2b8:	|  |        /-- bne.s c2f0 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c2ba:	|  |        |   movea.l 32(sp),a0
    c2be:	|  |        |   move.l 110(a0),d0
    c2c2:	|  |        |   moveq #-1,d1
    c2c4:	|  |        |   cmp.l d0,d1
    c2c6:	|  |  /-----|-- beq.s c304 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c2c8:	|  |  |     |   movea.l 32(sp),a0
    c2cc:	|  |  |     |   move.l 110(a0),d0
    c2d0:	|  |  |     |   movea.l 32(sp),a0
    c2d4:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c2d8:	|  |  |     |   movea.l 32(sp),a0
    c2dc:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c2e2:	|  |  |     |   move.l 32(sp),-(sp)
    c2e6:	|  |  |     |   jsr bd90 <spinStep>
    c2ec:	|  |  |     |   addq.l #4,sp
			}
			break;
    c2ee:	|  |  +-----|-- bra.s c304 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c2f0:	|  |  |     \-> move.l 32(sp),-(sp)
    c2f4:	|  |  |         jsr 9a90 <doBorderStuff>
    c2fa:	|  |  |         addq.l #4,sp
    c2fc:	|  |  |         tst.w d0
    c2fe:	|  |  |  /----- beq.s c308 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c300:	\--|--|--|----- bra.w c094 <walkMe+0x20>
			break;
    c304:	   |  \--|----> nop
    c306:	   |     |  /-- bra.s c30a <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c308:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    c30a:	   |        \-> movea.l 32(sp),a0
    c30e:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c312:	   |            clr.l -(sp)
    c314:	   |            move.l 36(sp),-(sp)
    c318:	   |            jsr 8204 <setFrames>
    c31e:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c320:	   |            movea.l 32(sp),a0
    c324:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c328:	   |            move.l d0,-(sp)
    c32a:	   |            jsr 1776c <__floatsisf>
    c330:	   |            addq.l #4,sp
    c332:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c334:	   |            movea.l 32(sp),a0
    c338:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c33c:	   |            move.l d0,-(sp)
    c33e:	   |            jsr 1776c <__floatsisf>
    c344:	   |            addq.l #4,sp
    c346:	   |            move.l d2,-(sp)
    c348:	   |            move.l d0,-(sp)
    c34a:	   |            move.l 40(sp),-(sp)
    c34e:	   |            jsr ae76 <moveAndScale>
    c354:	   |            lea 12(sp),sp
	return FALSE;
    c358:	   |            clr.w d0
}
    c35a:	   \----------> move.l (sp)+,d2
    c35c:	                move.l (sp)+,d3
    c35e:	                lea 20(sp),sp
    c362:	                rts

0000c364 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c364:	       subq.l #8,sp
    c366:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c368:	   /-- bra.s c398 <clearStackLib+0x34>
		k = stackLib;
    c36a:	/--|-> move.l 1cb18 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c372:	|  |   movea.l 1cb18 <stackLib>,a0
    c378:	|  |   move.l 4(a0),d0
    c37c:	|  |   move.l d0,1cb18 <stackLib>
		FreeVec(k);
    c382:	|  |   move.l 8(sp),4(sp)
    c388:	|  |   move.l 1ca88 <SysBase>,d0
    c38e:	|  |   movea.l d0,a6
    c390:	|  |   movea.l 4(sp),a1
    c394:	|  |   jsr -690(a6)
	while (stackLib) {
    c398:	|  \-> move.l 1cb18 <stackLib>,d0
    c39e:	\----- bne.s c36a <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c3a0:	       clr.l 1cb14 <stackLibTotal>
}
    c3a6:	       nop
    c3a8:	       movea.l (sp)+,a6
    c3aa:	       addq.l #8,sp
    c3ac:	       rts

0000c3ae <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c3ae:	          lea -128(sp),sp
    c3b2:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c3b6:	      /-- bra.s c3c8 <loadGame+0x1a>
    c3b8:	   /--|-> move.l 1ca20 <allRunningFunctions>,d0
    c3be:	   |  |   move.l d0,-(sp)
    c3c0:	   |  |   jsr 57b4 <finishFunction>
    c3c6:	   |  |   addq.l #4,sp
    c3c8:	   |  \-> move.l 1ca20 <allRunningFunctions>,d0
    c3ce:	   \----- bne.s c3b8 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c3d0:	          pea 1cb1c <ssgVersion>
    c3d6:	          pea 19313 <PutChar+0x1537>
    c3dc:	          pea 41 <_start+0x41>
    c3e0:	          pea 53 <_start+0x53>
    c3e4:	          move.l 160(sp),-(sp)
    c3e8:	          jsr 656a <openAndVerify>
    c3ee:	          lea 20(sp),sp
    c3f2:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c3f6:	      /-- bne.s c3fe <loadGame+0x50>
    c3f8:	      |   clr.w d0
    c3fa:	/-----|-- bra.w c6a4 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c3fe:	|     \-> move.l 112(sp),108(sp)
    c404:	|         lea 140(sp),a0
    c408:	|         lea -126(a0),a0
    c40c:	|         move.l a0,120(sp)
    c410:	|         moveq #8,d0
    c412:	|         move.l d0,116(sp)
    c416:	|         move.l 1ca90 <DOSBase>,d0
    c41c:	|         movea.l d0,a6
    c41e:	|         move.l 108(sp),d1
    c422:	|         move.l 120(sp),d2
    c426:	|         move.l 116(sp),d3
    c42a:	|         jsr -42(a6)
    c42e:	|         move.l d0,132(sp)
    c432:	|         move.l 132(sp),d0
    c436:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c43a:	|         moveq #8,d0
    c43c:	|         cmp.l 128(sp),d0
    c440:	|     /-- beq.s c450 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c442:	|     |   pea 19334 <PutChar+0x1558>
    c448:	|     |   jsr 1733a <KPrintF>
    c44e:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c450:	|     \-> move.l 14(sp),d1
    c454:	|         move.l 1ca2a <fileTime>,d0
    c45a:	|         cmp.l d1,d0
    c45c:	|     /-- bne.s c46c <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c45e:	|     |   move.l 18(sp),d1
    c462:	|     |   move.l 1ca2e <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c468:	|     |   cmp.l d1,d0
    c46a:	|  /--|-- beq.s c48c <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c46c:	|  |  \-> move.l 144(sp),-(sp)
    c470:	|  |      pea 19350 <PutChar+0x1574>
    c476:	|  |      pea 19417 <PutChar+0x163b>
    c47c:	|  |      jsr 1733a <KPrintF>
    c482:	|  |      lea 12(sp),sp
		return FALSE; 
    c486:	|  |      clr.w d0
    c488:	+--|----- bra.w c6a4 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c48c:	|  \----> move.l 112(sp),124(sp)
    c492:	|         move.l 1ca90 <DOSBase>,d0
    c498:	|         movea.l d0,a6
    c49a:	|         move.l 124(sp),d1
    c49e:	|         jsr -306(a6)
    c4a2:	|         move.l d0,136(sp)
    c4a6:	|         move.l 136(sp),d0
    c4aa:	|         move.l d0,d0
    c4ac:	|         move.w d0,1c2e4 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c4b2:	|         move.l 112(sp),100(sp)
    c4b8:	|         move.l 1ca90 <DOSBase>,d0
    c4be:	|         movea.l d0,a6
    c4c0:	|         move.l 100(sp),d1
    c4c4:	|         jsr -306(a6)
    c4c8:	|         move.l d0,96(sp)
    c4cc:	|         move.l 96(sp),d0
    c4d0:	|         move.l d0,d0
    c4d2:	|         move.w d0,1ca28 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c4d8:	|         move.l 112(sp),92(sp)
    c4de:	|         move.l 1ca90 <DOSBase>,d0
    c4e4:	|         movea.l d0,a6
    c4e6:	|         move.l 92(sp),d1
    c4ea:	|         jsr -306(a6)
    c4ee:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c4f2:	|         move.l 112(sp),84(sp)
    c4f8:	|         move.l 1ca90 <DOSBase>,d0
    c4fe:	|         movea.l d0,a6
    c500:	|         move.l 84(sp),d1
    c504:	|         jsr -306(a6)
    c508:	|         move.l d0,80(sp)
    c50c:	|         move.l 80(sp),d0
    c510:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c514:	|     /-- beq.s c548 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c516:	|     |   move.l 112(sp),-(sp)
    c51a:	|     |   jsr 6bc <get2bytes>
    c520:	|     |   addq.l #4,sp
    c522:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c526:	|     |   move.l 112(sp),-(sp)
    c52a:	|     |   jsr 6bc <get2bytes>
    c530:	|     |   addq.l #4,sp
    c532:	|     |   move.l d0,1cb80 <fontHeight>
		charOrder = readString(fp);		
    c538:	|     |   move.l 112(sp),-(sp)
    c53c:	|     |   jsr b02 <readString>
    c542:	|     |   addq.l #4,sp
    c544:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c548:	|     \-> move.l 104(sp),70(sp)
    c54e:	|         move.l 1ca88 <SysBase>,d0
    c554:	|         movea.l d0,a6
    c556:	|         movea.l 70(sp),a1
    c55a:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c55e:	|         move.l 112(sp),-(sp)
    c562:	|         jsr 854 <getSigned>
    c568:	|         addq.l #4,sp
    c56a:	|         move.w d0,1c98c <fontSpace>

	killAllPeople ();
    c570:	|         jsr ab18 <killAllPeople>
	killAllRegions ();
    c576:	|         jsr 15b4a <killAllRegions>

	int camerX = get2bytes (fp);
    c57c:	|         move.l 112(sp),-(sp)
    c580:	|         jsr 6bc <get2bytes>
    c586:	|         addq.l #4,sp
    c588:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c58c:	|         move.l 112(sp),-(sp)
    c590:	|         jsr 6bc <get2bytes>
    c596:	|         addq.l #4,sp
    c598:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c59c:	|         move.l 112(sp),-(sp)
    c5a0:	|         jsr 7d8 <getFloat>
    c5a6:	|         addq.l #4,sp
    c5a8:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c5ac:	|         move.l 112(sp),54(sp)
    c5b2:	|         move.l 1ca90 <DOSBase>,d0
    c5b8:	|         movea.l d0,a6
    c5ba:	|         move.l 54(sp),d1
    c5be:	|         jsr -306(a6)
    c5c2:	|         move.l d0,50(sp)
    c5c6:	|         move.l 50(sp),d0
    c5ca:	|         move.l d0,d0
    c5cc:	|         move.b d0,1c3fe <brightnessLevel>

	loadHandlers (fp);
    c5d2:	|         move.l 112(sp),-(sp)
    c5d6:	|         jsr 64ca <loadHandlers>
    c5dc:	|         addq.l #4,sp
	loadRegions (fp);
    c5de:	|         move.l 112(sp),-(sp)
    c5e2:	|         jsr 15ba6 <loadRegions>
    c5e8:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c5ea:	|         moveq #12,d0
    c5ec:	|         move.l d0,46(sp)
    c5f0:	|         clr.l 42(sp)
    c5f4:	|         move.l 1ca88 <SysBase>,d0
    c5fa:	|         movea.l d0,a6
    c5fc:	|         move.l 46(sp),d0
    c600:	|         move.l 42(sp),d1
    c604:	|         jsr -684(a6)
    c608:	|         move.l d0,38(sp)
    c60c:	|         move.l 38(sp),d0
    c610:	|         move.l d0,1c98e <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c616:	|         move.l 1c98e <mouseCursorAnim>,d0
    c61c:	|     /-- bne.s c630 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c61e:	|     |   pea 19421 <PutChar+0x1645>
    c624:	|     |   jsr 1733a <KPrintF>
    c62a:	|     |   addq.l #4,sp
		return FALSE;
    c62c:	|     |   clr.w d0
    c62e:	+-----|-- bra.s c6a4 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c630:	|     \-> jsr d4be <nosnapshot>
	if (FGetC (fp)) {
    c636:	|         move.l 112(sp),34(sp)
    c63c:	|         move.l 1ca90 <DOSBase>,d0
    c642:	|         movea.l d0,a6
    c644:	|         move.l 34(sp),d1
    c648:	|         jsr -306(a6)
    c64c:	|         move.l d0,30(sp)
    c650:	|         move.l 30(sp),d0
    c654:	|     /-- beq.s c66a <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c656:	|     |   move.l 112(sp),-(sp)
    c65a:	|     |   jsr d53e <restoreSnapshot>
    c660:	|     |   addq.l #4,sp
    c662:	|     |   tst.w d0
    c664:	|     +-- bne.s c66a <loadGame+0x2bc>
    c666:	|     |   clr.w d0
    c668:	+-----|-- bra.s c6a4 <loadGame+0x2f6>
	}

	Close (fp);
    c66a:	|     \-> move.l 112(sp),26(sp)
    c670:	|         move.l 1ca90 <DOSBase>,d0
    c676:	|         movea.l d0,a6
    c678:	|         move.l 26(sp),d1
    c67c:	|         jsr -36(a6)
    c680:	|         move.l d0,22(sp)
	clearStackLib ();
    c684:	|         jsr c364 <clearStackLib>

	cameraX = camerX;
    c68a:	|         move.l 66(sp),1cb42 <cameraX>
	cameraY = camerY;
    c692:	|         move.l 62(sp),1cb46 <cameraY>
	cameraZoom = camerZ;
    c69a:	|         move.l 58(sp),1c426 <cameraZoom>

	return TRUE;
    c6a2:	|         moveq #1,d0
}
    c6a4:	\-------> movem.l (sp)+,d2-d3/a6
    c6a8:	          lea 128(sp),sp
    c6ac:	          rts

0000c6ae <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c6ae:	   /-> lea -64(sp),sp
    c6b2:	   |   move.l a6,-(sp)
    c6b4:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c6b6:	   |   movea.l 76(sp),a0
    c6ba:	   |   move.l (a0),d0
    c6bc:	   |   move.l 80(sp),-(sp)
    c6c0:	   |   move.l d0,-(sp)
    c6c2:	   |   jsr 8d0 <put2bytes>
    c6c8:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c6ca:	   |   movea.l 76(sp),a0
    c6ce:	   |   move.l 40(a0),d0
    c6d2:	/--|-- beq.s c70e <saveFunction+0x60>
		FPutC (fp, 1);
    c6d4:	|  |   move.l 80(sp),52(sp)
    c6da:	|  |   moveq #1,d0
    c6dc:	|  |   move.l d0,48(sp)
    c6e0:	|  |   move.l 1ca90 <DOSBase>,d0
    c6e6:	|  |   movea.l d0,a6
    c6e8:	|  |   move.l 52(sp),d1
    c6ec:	|  |   move.l 48(sp),d2
    c6f0:	|  |   jsr -312(a6)
    c6f4:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c6f8:	|  |   movea.l 76(sp),a0
    c6fc:	|  |   move.l 40(a0),d0
    c700:	|  |   move.l 80(sp),-(sp)
    c704:	|  |   move.l d0,-(sp)
    c706:	|  \-- jsr c6ae <saveFunction>(pc)
    c70a:	|      addq.l #8,sp
    c70c:	|  /-- bra.s c730 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c70e:	\--|-> move.l 80(sp),64(sp)
    c714:	   |   clr.l 60(sp)
    c718:	   |   move.l 1ca90 <DOSBase>,d0
    c71e:	   |   movea.l d0,a6
    c720:	   |   move.l 64(sp),d1
    c724:	   |   move.l 60(sp),d2
    c728:	   |   jsr -312(a6)
    c72c:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c730:	   \-> movea.l 76(sp),a0
    c734:	       move.l 12(a0),d0
    c738:	       move.l 80(sp),-(sp)
    c73c:	       move.l d0,-(sp)
    c73e:	       jsr 958 <put4bytes>
    c744:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c746:	       movea.l 76(sp),a0
    c74a:	       move.l 36(a0),d0
    c74e:	       move.l 80(sp),-(sp)
    c752:	       move.l d0,-(sp)
    c754:	       jsr 8d0 <put2bytes>
    c75a:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c75c:	       move.l 80(sp),40(sp)
    c762:	       movea.l 76(sp),a0
    c766:	       move.w 54(a0),d0
    c76a:	       movea.w d0,a0
    c76c:	       move.l a0,36(sp)
    c770:	       move.l 1ca90 <DOSBase>,d0
    c776:	       movea.l d0,a6
    c778:	       move.l 40(sp),d1
    c77c:	       move.l 36(sp),d2
    c780:	       jsr -312(a6)
    c784:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c788:	       move.l 80(sp),28(sp)
    c78e:	       movea.l 76(sp),a0
    c792:	       move.w 48(a0),d0
    c796:	       movea.w d0,a0
    c798:	       move.l a0,24(sp)
    c79c:	       move.l 1ca90 <DOSBase>,d0
    c7a2:	       movea.l d0,a6
    c7a4:	       move.l 28(sp),d1
    c7a8:	       move.l 24(sp),d2
    c7ac:	       jsr -312(a6)
    c7b0:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c7b4:	       move.l 80(sp),16(sp)
    c7ba:	       movea.l 76(sp),a0
    c7be:	       move.w 50(a0),d0
    c7c2:	       movea.w d0,a0
    c7c4:	       move.l a0,12(sp)
    c7c8:	       move.l 1ca90 <DOSBase>,d0
    c7ce:	       movea.l d0,a6
    c7d0:	       move.l 16(sp),d1
    c7d4:	       move.l 12(sp),d2
    c7d8:	       jsr -312(a6)
    c7dc:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c7e0:	       moveq #28,d0
    c7e2:	       add.l 76(sp),d0
    c7e6:	       move.l 80(sp),-(sp)
    c7ea:	       move.l d0,-(sp)
    c7ec:	       jsr cf06 <saveVariable>
    c7f2:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c7f4:	       movea.l 76(sp),a0
    c7f8:	       move.b 56(a0),d0
    c7fc:	   /-- beq.s c80c <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c7fe:	   |   pea 19442 <PutChar+0x1666>
    c804:	   |   jsr 1733a <KPrintF>
    c80a:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c80c:	   \-> movea.l 76(sp),a0
    c810:	       move.l 24(a0),d0
    c814:	       move.l 80(sp),-(sp)
    c818:	       move.l d0,-(sp)
    c81a:	       jsr cd7a <saveStack>
    c820:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c822:	       clr.l 68(sp)
    c826:	   /-- bra.s c84a <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c828:	/--|-> movea.l 76(sp),a0
    c82c:	|  |   move.l 20(a0),d1
    c830:	|  |   move.l 68(sp),d0
    c834:	|  |   lsl.l #3,d0
    c836:	|  |   add.l d1,d0
    c838:	|  |   move.l 80(sp),-(sp)
    c83c:	|  |   move.l d0,-(sp)
    c83e:	|  |   jsr cf06 <saveVariable>
    c844:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c846:	|  |   addq.l #1,68(sp)
    c84a:	|  \-> movea.l 76(sp),a0
    c84e:	|      move.l 8(a0),d0
    c852:	|      cmp.l 68(sp),d0
    c856:	\----- bgt.s c828 <saveFunction+0x17a>
	}
}
    c858:	       nop
    c85a:	       nop
    c85c:	       move.l (sp)+,d2
    c85e:	       movea.l (sp)+,a6
    c860:	       lea 64(sp),sp
    c864:	       rts

0000c866 <saveGame>:

BOOL saveGame (char * fname) {
    c866:	          lea -248(sp),sp
    c86a:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c86e:	          move.l 264(sp),244(sp)
    c874:	          move.l #1006,240(sp)
    c87c:	          move.l 1ca90 <DOSBase>,d0
    c882:	          movea.l d0,a6
    c884:	          move.l 244(sp),d1
    c888:	          move.l 240(sp),d2
    c88c:	          jsr -30(a6)
    c890:	          move.l d0,236(sp)
    c894:	          move.l 236(sp),d0
    c898:	          move.l d0,232(sp)
	if (fp == NULL) {
    c89c:	      /-- bne.s c8b2 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c89e:	      |   pea 19464 <PutChar+0x1688>
    c8a4:	      |   jsr 1733a <KPrintF>
    c8aa:	      |   addq.l #4,sp
		return FALSE;
    c8ac:	      |   clr.w d0
    c8ae:	/-----|-- bra.w cd70 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c8b2:	|     \-> move.l 232(sp),228(sp)
    c8b8:	|         move.l #103553,224(sp)
    c8c0:	|         moveq #6,d0
    c8c2:	|         move.l d0,220(sp)
    c8c6:	|         move.l 1ca90 <DOSBase>,d0
    c8cc:	|         movea.l d0,a6
    c8ce:	|         move.l 228(sp),d1
    c8d2:	|         move.l 224(sp),d2
    c8d6:	|         move.l 220(sp),d3
    c8da:	|         jsr -48(a6)
    c8de:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c8e2:	|         move.l 232(sp),212(sp)
    c8e8:	|         clr.l 208(sp)
    c8ec:	|         move.l 1ca90 <DOSBase>,d0
    c8f2:	|         movea.l d0,a6
    c8f4:	|         move.l 212(sp),d1
    c8f8:	|         move.l 208(sp),d2
    c8fc:	|         jsr -312(a6)
    c900:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    c904:	|         move.l 232(sp),200(sp)
    c90a:	|         clr.l 196(sp)
    c90e:	|         move.l 1ca90 <DOSBase>,d0
    c914:	|         movea.l d0,a6
    c916:	|         move.l 200(sp),d1
    c91a:	|         move.l 196(sp),d2
    c91e:	|         jsr -312(a6)
    c922:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    c926:	|         move.l 232(sp),188(sp)
    c92c:	|         moveq #2,d0
    c92e:	|         move.l d0,184(sp)
    c932:	|         move.l 1ca90 <DOSBase>,d0
    c938:	|         movea.l d0,a6
    c93a:	|         move.l 188(sp),d1
    c93e:	|         move.l 184(sp),d2
    c942:	|         jsr -312(a6)
    c946:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    c94a:	|         move.l 232(sp),176(sp)
    c950:	|         moveq #2,d0
    c952:	|         move.l d0,172(sp)
    c956:	|         move.l 1ca90 <DOSBase>,d0
    c95c:	|         movea.l d0,a6
    c95e:	|         move.l 176(sp),d1
    c962:	|         move.l 172(sp),d2
    c966:	|         jsr -312(a6)
    c96a:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c96e:	|         move.l 232(sp),164(sp)
    c974:	|         move.l #117290,160(sp)
    c97c:	|         moveq #8,d0
    c97e:	|         move.l d0,156(sp)
    c982:	|         move.l 1ca90 <DOSBase>,d0
    c988:	|         movea.l d0,a6
    c98a:	|         move.l 164(sp),d1
    c98e:	|         move.l 160(sp),d2
    c992:	|         move.l 156(sp),d3
    c996:	|         jsr -48(a6)
    c99a:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c99e:	|         move.l 232(sp),148(sp)
    c9a4:	|         move.w 1c2e4 <allowAnyFilename>,d0
    c9aa:	|         movea.w d0,a0
    c9ac:	|         move.l a0,144(sp)
    c9b0:	|         move.l 1ca90 <DOSBase>,d0
    c9b6:	|         movea.l d0,a6
    c9b8:	|         move.l 148(sp),d1
    c9bc:	|         move.l 144(sp),d2
    c9c0:	|         jsr -312(a6)
    c9c4:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    c9c8:	|         move.l 232(sp),136(sp)
    c9ce:	|         move.w 1ca28 <captureAllKeys>,d0
    c9d4:	|         movea.w d0,a0
    c9d6:	|         move.l a0,132(sp)
    c9da:	|         move.l 1ca90 <DOSBase>,d0
    c9e0:	|         movea.l d0,a6
    c9e2:	|         move.l 136(sp),d1
    c9e6:	|         move.l 132(sp),d2
    c9ea:	|         jsr -312(a6)
    c9ee:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    c9f2:	|         move.l 232(sp),124(sp)
    c9f8:	|         moveq #1,d0
    c9fa:	|         move.l d0,120(sp)
    c9fe:	|         move.l 1ca90 <DOSBase>,d0
    ca04:	|         movea.l d0,a6
    ca06:	|         move.l 124(sp),d1
    ca0a:	|         move.l 120(sp),d2
    ca0e:	|         jsr -312(a6)
    ca12:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    ca16:	|         move.l 232(sp),112(sp)
    ca1c:	|         move.l 1cb90 <fontTableSize>,d0
    ca22:	|         sgt d0
    ca24:	|         neg.b d0
    ca26:	|         move.b d0,d0
    ca28:	|         andi.l #255,d0
    ca2e:	|         move.l d0,108(sp)
    ca32:	|         move.l 1ca90 <DOSBase>,d0
    ca38:	|         movea.l d0,a6
    ca3a:	|         move.l 112(sp),d1
    ca3e:	|         move.l 108(sp),d2
    ca42:	|         jsr -312(a6)
    ca46:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    ca4a:	|         move.l 1cb90 <fontTableSize>,d0
    ca50:	|     /-- ble.s ca8e <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    ca52:	|     |   move.l 1cb84 <loadedFontNum>,d0
    ca58:	|     |   move.l 232(sp),-(sp)
    ca5c:	|     |   move.l d0,-(sp)
    ca5e:	|     |   jsr 8d0 <put2bytes>
    ca64:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    ca66:	|     |   move.l 1cb80 <fontHeight>,d0
    ca6c:	|     |   move.l 232(sp),-(sp)
    ca70:	|     |   move.l d0,-(sp)
    ca72:	|     |   jsr 8d0 <put2bytes>
    ca78:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    ca7a:	|     |   move.l 1cb88 <fontOrderString>,d0
    ca80:	|     |   move.l 232(sp),-(sp)
    ca84:	|     |   move.l d0,-(sp)
    ca86:	|     |   jsr bd8 <writeString>
    ca8c:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    ca8e:	|     \-> move.w 1c98c <fontSpace>,d0
    ca94:	|         movea.w d0,a0
    ca96:	|         move.l 232(sp),-(sp)
    ca9a:	|         move.l a0,-(sp)
    ca9c:	|         jsr a9c <putSigned>
    caa2:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    caa4:	|         move.l 1cb42 <cameraX>,d0
    caaa:	|         move.l 232(sp),-(sp)
    caae:	|         move.l d0,-(sp)
    cab0:	|         jsr 8d0 <put2bytes>
    cab6:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    cab8:	|         move.l 1cb46 <cameraY>,d0
    cabe:	|         move.l 232(sp),-(sp)
    cac2:	|         move.l d0,-(sp)
    cac4:	|         jsr 8d0 <put2bytes>
    caca:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    cacc:	|         move.l 1c426 <cameraZoom>,d0
    cad2:	|         move.l 232(sp),-(sp)
    cad6:	|         move.l d0,-(sp)
    cad8:	|         jsr a46 <putFloat>
    cade:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    cae0:	|         move.l 232(sp),100(sp)
    cae6:	|         move.b 1c3fe <brightnessLevel>,d0
    caec:	|         move.b d0,d0
    caee:	|         andi.l #255,d0
    caf4:	|         move.l d0,96(sp)
    caf8:	|         move.l 1ca90 <DOSBase>,d0
    cafe:	|         movea.l d0,a6
    cb00:	|         move.l 100(sp),d1
    cb04:	|         move.l 96(sp),d2
    cb08:	|         jsr -312(a6)
    cb0c:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    cb10:	|         move.l 232(sp),-(sp)
    cb14:	|         jsr 6a4e <saveHandlers>
    cb1a:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    cb1c:	|         move.l 232(sp),-(sp)
    cb20:	|         jsr 15d60 <saveRegions>
    cb26:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    cb28:	|         move.l 1c98e <mouseCursorAnim>,d0
    cb2e:	|         move.l 232(sp),-(sp)
    cb32:	|         move.l d0,-(sp)
    cb34:	|         jsr b08a <saveAnim>
    cb3a:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    cb3c:	|         move.l 1c992 <mouseCursorFrameNum>,d0
    cb42:	|         move.l 232(sp),-(sp)
    cb46:	|         move.l d0,-(sp)
    cb48:	|         jsr 8d0 <put2bytes>
    cb4e:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    cb50:	|         move.l 1ca20 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    cb58:	|         clr.l 248(sp)
	while (thisFunction) {
    cb5c:	|     /-- bra.s cb6c <saveGame+0x306>
		countFunctions ++;
    cb5e:	|  /--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    cb62:	|  |  |   movea.l 252(sp),a0
    cb66:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cb6c:	|  |  \-> tst.l 252(sp)
    cb70:	|  \----- bne.s cb5e <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    cb72:	|         move.l 232(sp),-(sp)
    cb76:	|         move.l 252(sp),-(sp)
    cb7a:	|         jsr 8d0 <put2bytes>
    cb80:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    cb82:	|         move.l 1ca20 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    cb8a:	|     /-- bra.s cba6 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    cb8c:	|  /--|-> move.l 232(sp),-(sp)
    cb90:	|  |  |   move.l 256(sp),-(sp)
    cb94:	|  |  |   jsr c6ae <saveFunction>
    cb9a:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    cb9c:	|  |  |   movea.l 252(sp),a0
    cba0:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cba6:	|  |  \-> tst.l 252(sp)
    cbaa:	|  \----- bne.s cb8c <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    cbac:	|         clr.l 256(sp)
    cbb0:	|     /-- bra.s cbd2 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    cbb2:	|  /--|-> move.l 1ca36 <globalVars>,d1
    cbb8:	|  |  |   move.l 256(sp),d0
    cbbc:	|  |  |   lsl.l #3,d0
    cbbe:	|  |  |   add.l d1,d0
    cbc0:	|  |  |   move.l 232(sp),-(sp)
    cbc4:	|  |  |   move.l d0,-(sp)
    cbc6:	|  |  |   jsr cf06 <saveVariable>
    cbcc:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    cbce:	|  |  |   addq.l #1,256(sp)
    cbd2:	|  |  \-> move.l 1ca60 <numGlobals>,d0
    cbd8:	|  |      cmp.l 256(sp),d0
    cbdc:	|  \----- bgt.s cbb2 <saveGame+0x34c>
	}

	savePeople (fp);
    cbde:	|         move.l 232(sp),-(sp)
    cbe2:	|         jsr b1b2 <savePeople>
    cbe8:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    cbea:	|         movea.l 1cba4 <currentFloor>,a0
    cbf0:	|         move.l 8(a0),d0
    cbf4:	|  /----- beq.s cc32 <saveGame+0x3cc>
		FPutC (fp, 1);
    cbf6:	|  |      move.l 232(sp),76(sp)
    cbfc:	|  |      moveq #1,d0
    cbfe:	|  |      move.l d0,72(sp)
    cc02:	|  |      move.l 1ca90 <DOSBase>,d0
    cc08:	|  |      movea.l d0,a6
    cc0a:	|  |      move.l 76(sp),d1
    cc0e:	|  |      move.l 72(sp),d2
    cc12:	|  |      jsr -312(a6)
    cc16:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cc1a:	|  |      movea.l 1cba4 <currentFloor>,a0
    cc20:	|  |      move.l (a0),d0
    cc22:	|  |      move.l 232(sp),-(sp)
    cc26:	|  |      move.l d0,-(sp)
    cc28:	|  |      jsr 8d0 <put2bytes>
    cc2e:	|  |      addq.l #8,sp
    cc30:	|  |  /-- bra.s cc54 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cc32:	|  \--|-> move.l 232(sp),88(sp)
    cc38:	|     |   clr.l 84(sp)
    cc3c:	|     |   move.l 1ca90 <DOSBase>,d0
    cc42:	|     |   movea.l d0,a6
    cc44:	|     |   move.l 88(sp),d1
    cc48:	|     |   move.l 84(sp),d2
    cc4c:	|     |   jsr -312(a6)
    cc50:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cc54:	|     \-> move.l 232(sp),64(sp)
    cc5a:	|         move.l 1cb56 <speechMode>,60(sp)
    cc62:	|         move.l 1ca90 <DOSBase>,d0
    cc68:	|         movea.l d0,a6
    cc6a:	|         move.l 64(sp),d1
    cc6e:	|         move.l 60(sp),d2
    cc72:	|         jsr -312(a6)
    cc76:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cc7a:	|         move.b 1c962 <fadeMode>,d0
    cc80:	|         move.b d0,d0
    cc82:	|         andi.l #255,d0
    cc88:	|         move.l d0,52(sp)
    cc8c:	|         move.l 232(sp),48(sp)
    cc92:	|         move.l 1ca90 <DOSBase>,d0
    cc98:	|         movea.l d0,a6
    cc9a:	|         move.l 52(sp),d1
    cc9e:	|         move.l 48(sp),d2
    cca2:	|         jsr -312(a6)
    cca6:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    ccaa:	|         move.l 1cae4 <speech>,d0
    ccb0:	|         move.l 232(sp),-(sp)
    ccb4:	|         move.l d0,-(sp)
    ccb6:	|         jsr 80b8 <saveSpeech>
    ccbc:	|         addq.l #8,sp
	saveStatusBars (fp);
    ccbe:	|         move.l 232(sp),-(sp)
    ccc2:	|         jsr 7ab4 <saveStatusBars>
    ccc8:	|         addq.l #4,sp
	saveSounds (fp);
    ccca:	|         move.l 232(sp),-(sp)
    ccce:	|         jsr d26c <saveSounds>
    ccd4:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    ccd6:	|         move.w 1cb40 <saveEncoding>,d0
    ccdc:	|         move.w d0,d0
    ccde:	|         andi.l #65535,d0
    cce4:	|         move.l 232(sp),-(sp)
    cce8:	|         move.l d0,-(sp)
    ccea:	|         jsr 8d0 <put2bytes>
    ccf0:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    ccf2:	|         move.l 1cb32 <parallaxStuff>,d0
    ccf8:	|         move.l 232(sp),-(sp)
    ccfc:	|         move.l d0,-(sp)
    ccfe:	|         jsr d564 <saveParallaxRecursive>
    cd04:	|         addq.l #8,sp
	FPutC (fp, 0);
    cd06:	|         move.l 232(sp),40(sp)
    cd0c:	|         clr.l 36(sp)
    cd10:	|         move.l 1ca90 <DOSBase>,d0
    cd16:	|         movea.l d0,a6
    cd18:	|         move.l 40(sp),d1
    cd1c:	|         move.l 36(sp),d2
    cd20:	|         jsr -312(a6)
    cd24:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cd28:	|         move.l 232(sp),28(sp)
    cd2e:	|         move.l 1c404 <languageNum>,24(sp)
    cd36:	|         move.l 1ca90 <DOSBase>,d0
    cd3c:	|         movea.l d0,a6
    cd3e:	|         move.l 28(sp),d1
    cd42:	|         move.l 24(sp),d2
    cd46:	|         jsr -312(a6)
    cd4a:	|         move.l d0,20(sp)

	Close(fp);
    cd4e:	|         move.l 232(sp),16(sp)
    cd54:	|         move.l 1ca90 <DOSBase>,d0
    cd5a:	|         movea.l d0,a6
    cd5c:	|         move.l 16(sp),d1
    cd60:	|         jsr -36(a6)
    cd64:	|         move.l d0,12(sp)
	clearStackLib ();
    cd68:	|         jsr c364 <clearStackLib>
	return TRUE;
    cd6e:	|         moveq #1,d0
}
    cd70:	\-------> movem.l (sp)+,d2-d3/a6
    cd74:	          lea 248(sp),sp
    cd78:	          rts

0000cd7a <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    cd7a:	       lea -12(sp),sp
	int elements = 0;
    cd7e:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    cd82:	       move.l 16(sp),(sp)
	while (search) {
    cd86:	   /-- bra.s cd92 <saveStack+0x18>
		elements ++;
    cd88:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    cd8c:	|  |   movea.l (sp),a0
    cd8e:	|  |   move.l 8(a0),(sp)
	while (search) {
    cd92:	|  \-> tst.l (sp)
    cd94:	\----- bne.s cd88 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cd96:	       move.l 20(sp),-(sp)
    cd9a:	       move.l 12(sp),-(sp)
    cd9e:	       jsr 8d0 <put2bytes>
    cda4:	       addq.l #8,sp
	search = vs;
    cda6:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cdaa:	       clr.l 4(sp)
    cdae:	   /-- bra.s cdca <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cdb0:	/--|-> move.l (sp),d0
    cdb2:	|  |   move.l 20(sp),-(sp)
    cdb6:	|  |   move.l d0,-(sp)
    cdb8:	|  |   jsr cf06 <saveVariable>
    cdbe:	|  |   addq.l #8,sp
		search = search -> next;
    cdc0:	|  |   movea.l (sp),a0
    cdc2:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    cdc6:	|  |   addq.l #1,4(sp)
    cdca:	|  \-> move.l 4(sp),d0
    cdce:	|      cmp.l 8(sp),d0
    cdd2:	\----- blt.s cdb0 <saveStack+0x36>
	}
}
    cdd4:	       nop
    cdd6:	       nop
    cdd8:	       lea 12(sp),sp
    cddc:	       rts

0000cdde <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    cdde:	             lea -44(sp),sp
    cde2:	             move.l a6,-(sp)
    cde4:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    cde6:	             move.l 1cb18 <stackLib>,48(sp)
	int a = 0;
    cdee:	             clr.l 44(sp)
	while (s) {
    cdf2:	      /----- bra.s ce50 <saveStackRef+0x72>
		if (s -> stack == vs) {
    cdf4:	   /--|----> movea.l 48(sp),a0
    cdf8:	   |  |      move.l (a0),d0
    cdfa:	   |  |      cmp.l 56(sp),d0
    cdfe:	   |  |  /-- bne.s ce42 <saveStackRef+0x64>
			FPutC (fp, 1);
    ce00:	   |  |  |   move.l 60(sp),16(sp)
    ce06:	   |  |  |   moveq #1,d0
    ce08:	   |  |  |   move.l d0,12(sp)
    ce0c:	   |  |  |   move.l 1ca90 <DOSBase>,d0
    ce12:	   |  |  |   movea.l d0,a6
    ce14:	   |  |  |   move.l 16(sp),d1
    ce18:	   |  |  |   move.l 12(sp),d2
    ce1c:	   |  |  |   jsr -312(a6)
    ce20:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    ce24:	   |  |  |   move.l 1cb14 <stackLibTotal>,d0
    ce2a:	   |  |  |   sub.l 44(sp),d0
    ce2e:	   |  |  |   move.l 60(sp),-(sp)
    ce32:	   |  |  |   move.l d0,-(sp)
    ce34:	   |  |  |   jsr 8d0 <put2bytes>
    ce3a:	   |  |  |   addq.l #8,sp
			return TRUE;
    ce3c:	   |  |  |   moveq #1,d0
    ce3e:	/--|--|--|-- bra.w cefc <saveStackRef+0x11e>
		}
		s = s -> next;
    ce42:	|  |  |  \-> movea.l 48(sp),a0
    ce46:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    ce4c:	|  |  |      addq.l #1,44(sp)
	while (s) {
    ce50:	|  |  \----> tst.l 48(sp)
    ce54:	|  \-------- bne.s cdf4 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    ce56:	|            move.l 60(sp),40(sp)
    ce5c:	|            clr.l 36(sp)
    ce60:	|            move.l 1ca90 <DOSBase>,d0
    ce66:	|            movea.l d0,a6
    ce68:	|            move.l 40(sp),d1
    ce6c:	|            move.l 36(sp),d2
    ce70:	|            jsr -312(a6)
    ce74:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    ce78:	|            movea.l 56(sp),a0
    ce7c:	|            move.l (a0),d0
    ce7e:	|            move.l 60(sp),-(sp)
    ce82:	|            move.l d0,-(sp)
    ce84:	|            jsr cd7a <saveStack>
    ce8a:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    ce8c:	|            moveq #8,d0
    ce8e:	|            move.l d0,28(sp)
    ce92:	|            clr.l 24(sp)
    ce96:	|            move.l 1ca88 <SysBase>,d0
    ce9c:	|            movea.l d0,a6
    ce9e:	|            move.l 28(sp),d0
    cea2:	|            move.l 24(sp),d1
    cea6:	|            jsr -684(a6)
    ceaa:	|            move.l d0,20(sp)
    ceae:	|            move.l 20(sp),d0
    ceb2:	|            move.l d0,48(sp)
	stackLibTotal ++;
    ceb6:	|            move.l 1cb14 <stackLibTotal>,d0
    cebc:	|            addq.l #1,d0
    cebe:	|            move.l d0,1cb14 <stackLibTotal>
	if (! s) {
    cec4:	|            tst.l 48(sp)
    cec8:	|        /-- bne.s cedc <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    ceca:	|        |   pea 194b0 <PutChar+0x16d4>
    ced0:	|        |   jsr 1733a <KPrintF>
    ced6:	|        |   addq.l #4,sp
		return FALSE;
    ced8:	|        |   clr.w d0
    ceda:	+--------|-- bra.s cefc <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cedc:	|        \-> move.l 1cb18 <stackLib>,d0
    cee2:	|            movea.l 48(sp),a0
    cee6:	|            move.l d0,4(a0)
	s -> stack = vs;
    ceea:	|            movea.l 48(sp),a0
    ceee:	|            move.l 56(sp),(a0)
	stackLib = s;
    cef2:	|            move.l 48(sp),1cb18 <stackLib>
	return TRUE;
    cefa:	|            moveq #1,d0
}
    cefc:	\----------> move.l (sp)+,d2
    cefe:	             movea.l (sp)+,a6
    cf00:	             lea 44(sp),sp
    cf04:	             rts

0000cf06 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    cf06:	          lea -12(sp),sp
    cf0a:	          move.l a6,-(sp)
    cf0c:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    cf0e:	          move.l 28(sp),16(sp)
    cf14:	          movea.l 24(sp),a0
    cf18:	          move.l (a0),d0
    cf1a:	          move.l d0,12(sp)
    cf1e:	          move.l 1ca90 <DOSBase>,d0
    cf24:	          movea.l d0,a6
    cf26:	          move.l 16(sp),d1
    cf2a:	          move.l 12(sp),d2
    cf2e:	          jsr -312(a6)
    cf32:	          move.l d0,8(sp)
	switch (from -> varType) {
    cf36:	          movea.l 24(sp),a0
    cf3a:	          move.l (a0),d0
    cf3c:	          moveq #9,d1
    cf3e:	          cmp.l d0,d1
    cf40:	      /-- bcs.w cff0 <saveVariable+0xea>
    cf44:	      |   add.l d0,d0
    cf46:	      |   movea.l d0,a0
    cf48:	      |   adda.l #53076,a0
    cf4e:	      |   move.w (a0),d0
    cf50:	      |   jmp (cf54 <saveVariable+0x4e>,pc,d0.w)
    cf54:	      |   ori.l #1310740,(a0)+
    cf5a:	      |   ori.b #20,(20,a0,d0.w)
    cf60:	      |   .short 0x004c
    cf62:	      |   ori.b #126,(a4)
    cf66:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    cf6a:	      |   ori.b #40,(a0)+
    cf6e:	      |   ori.b #47,d4
    cf72:	      |   ori.b #0,(a4)+
    cf76:	      |   jsr 958 <put4bytes>
    cf7c:	      |   addq.l #8,sp
		return TRUE;
    cf7e:	      |   moveq #1,d0
    cf80:	/-----|-- bra.w d02c <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    cf84:	|     |   movea.l 24(sp),a0
    cf88:	|     |   move.l 4(a0),d0
    cf8c:	|     |   move.l 28(sp),-(sp)
    cf90:	|     |   move.l d0,-(sp)
    cf92:	|     |   jsr bd8 <writeString>
    cf98:	|     |   addq.l #8,sp
		return TRUE;
    cf9a:	|     |   moveq #1,d0
    cf9c:	+-----|-- bra.w d02c <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    cfa0:	|     |   movea.l 24(sp),a0
    cfa4:	|     |   move.l 4(a0),d0
    cfa8:	|     |   move.l 28(sp),-(sp)
    cfac:	|     |   move.l d0,-(sp)
    cfae:	|     |   jsr cdde <saveStackRef>
    cfb4:	|     |   addq.l #8,sp
    cfb6:	+-----|-- bra.s d02c <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    cfb8:	|     |   movea.l 24(sp),a0
    cfbc:	|     |   move.l 4(a0),d0
    cfc0:	|     |   move.l 28(sp),-(sp)
    cfc4:	|     |   move.l d0,-(sp)
    cfc6:	|     |   jsr b154 <saveCostume>
    cfcc:	|     |   addq.l #8,sp
		return FALSE;
    cfce:	|     |   clr.w d0
    cfd0:	+-----|-- bra.s d02c <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    cfd2:	|     |   movea.l 24(sp),a0
    cfd6:	|     |   move.l 4(a0),d0
    cfda:	|     |   move.l 28(sp),-(sp)
    cfde:	|     |   move.l d0,-(sp)
    cfe0:	|     |   jsr b08a <saveAnim>
    cfe6:	|     |   addq.l #8,sp
		return FALSE;
    cfe8:	|     |   clr.w d0
    cfea:	+-----|-- bra.s d02c <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    cfec:	|     |   clr.w d0
    cfee:	+-----|-- bra.s d02c <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    cff0:	|     \-> movea.l 24(sp),a0
    cff4:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    cff6:	|         moveq #10,d1
    cff8:	|         cmp.l d0,d1
    cffa:	|  /----- bcs.s d014 <saveVariable+0x10e>
						typeName[from->varType] :
    cffc:	|  |      movea.l 24(sp),a0
    d000:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d002:	|  |      add.l d0,d0
    d004:	|  |      movea.l d0,a1
    d006:	|  |      adda.l d0,a1
    d008:	|  |      lea 1c964 <typeName>,a0
    d00e:	|  |      move.l (0,a1,a0.l),d0
    d012:	|  |  /-- bra.s d01a <saveVariable+0x114>
    d014:	|  \--|-> move.l #103637,d0
    d01a:	|     \-> move.l d0,-(sp)
    d01c:	|         pea 194dc <PutChar+0x1700>
    d022:	|         jsr 1733a <KPrintF>
    d028:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    d02a:	|         moveq #1,d0
    d02c:	\-------> move.l (sp)+,d2
    d02e:	          movea.l (sp)+,a6
    d030:	          lea 12(sp),sp
    d034:	          rts

0000d036 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    d036:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    d03a:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    d042:	          movea.l 4(sp),a0
    d046:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    d04c:	          movea.l 4(sp),a0
    d050:	          move.w 10(a0),d0
    d054:	          lsr.w #8,d0
    d056:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d05a:	          movea.l 4(sp),a0
    d05e:	          move.w 10(a0),d0
    d062:	          move.b d0,(sp)

    if(counterx_new)
    d064:	/-------- beq.w d10a <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d068:	|         clr.w d1
    d06a:	|         move.b (sp),d1
    d06c:	|         move.w 1cb20 <counterx_old>,d0
    d072:	|         sub.w d0,d1
    d074:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d078:	|         cmpi.w #128,10(sp)
    d07e:	|     /-- blt.s d096 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d080:	|     |   move.w #1,1ca3e <input+0x4>
            counterx_diff -= 256;    
    d088:	|     |   move.w 10(sp),d0
    d08c:	|     |   addi.w #-256,d0
    d090:	|     |   move.w d0,10(sp)
    d094:	|  /--|-- bra.s d0c2 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d096:	|  |  \-> cmpi.w #-129,10(sp)
    d09c:	|  |  /-- bgt.s d0b4 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d09e:	|  |  |   move.w 10(sp),d0
    d0a2:	|  |  |   addi.w #256,d0
    d0a6:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d0aa:	|  |  |   move.w #1,1ca3e <input+0x4>
    d0b2:	|  +--|-- bra.s d0c2 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d0b4:	|  |  \-> tst.w 10(sp)
    d0b8:	|  +----- beq.s d0c2 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d0ba:	|  |      move.w #1,1ca3e <input+0x4>
        }

        input.mouseX += counterx_diff;
    d0c2:	|  \----> move.l 1ca44 <input+0xa>,d0
    d0c8:	|         movea.w 10(sp),a0
    d0cc:	|         add.l a0,d0
    d0ce:	|         move.l d0,1ca44 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d0d4:	|         move.l 1ca44 <input+0xa>,d1
    d0da:	|         move.l 1c9dc <winWidth>,d0
    d0e0:	|         cmp.l d1,d0
    d0e2:	|     /-- bge.s d0f2 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    d0e4:	|     |   move.l 1c9dc <winWidth>,d0
    d0ea:	|     |   move.l d0,1ca44 <input+0xa>
    d0f0:	|  /--|-- bra.s d100 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d0f2:	|  |  \-> move.l 1ca44 <input+0xa>,d0
    d0f8:	|  +----- bpl.s d100 <CsiCheckInput+0xca>
            input.mouseX = 0;
    d0fa:	|  |      clr.l 1ca44 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d100:	|  \----> clr.w d0
    d102:	|         move.b (sp),d0
    d104:	|         move.w d0,1cb20 <counterx_old>
    }    

    if(countery_new)
    d10a:	\-------> tst.b 1(sp)
    d10e:	/-------- beq.w d1b8 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d112:	|         clr.w d1
    d114:	|         move.b 1(sp),d1
    d118:	|         move.w 1cb22 <countery_old>,d0
    d11e:	|         sub.w d0,d1
    d120:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d124:	|         cmpi.w #128,8(sp)
    d12a:	|     /-- blt.s d142 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d12c:	|     |   move.w #1,1ca3e <input+0x4>
            countery_diff -= 256;    
    d134:	|     |   move.w 8(sp),d0
    d138:	|     |   addi.w #-256,d0
    d13c:	|     |   move.w d0,8(sp)
    d140:	|  /--|-- bra.s d16e <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d142:	|  |  \-> cmpi.w #-129,8(sp)
    d148:	|  |  /-- bgt.s d160 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d14a:	|  |  |   move.w #1,1ca3e <input+0x4>
            countery_diff += 256;
    d152:	|  |  |   move.w 8(sp),d0
    d156:	|  |  |   addi.w #256,d0
    d15a:	|  |  |   move.w d0,8(sp)
    d15e:	|  +--|-- bra.s d16e <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d160:	|  |  \-> tst.w 8(sp)
    d164:	|  +----- beq.s d16e <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d166:	|  |      move.w #1,1ca3e <input+0x4>
        }

        input.mouseY += countery_diff;
    d16e:	|  \----> move.l 1ca48 <input+0xe>,d0
    d174:	|         movea.w 8(sp),a0
    d178:	|         add.l a0,d0
    d17a:	|         move.l d0,1ca48 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d180:	|         move.l 1ca48 <input+0xe>,d1
    d186:	|         move.l 1c9e0 <winHeight>,d0
    d18c:	|         cmp.l d1,d0
    d18e:	|     /-- bge.s d19e <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d190:	|     |   move.l 1c9e0 <winHeight>,d0
    d196:	|     |   move.l d0,1ca48 <input+0xe>
    d19c:	|  /--|-- bra.s d1ac <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d19e:	|  |  \-> move.l 1ca48 <input+0xe>,d0
    d1a4:	|  +----- bpl.s d1ac <CsiCheckInput+0x176>
            input.mouseY = 0;
    d1a6:	|  |      clr.l 1ca48 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d1ac:	|  \----> clr.w d0
    d1ae:	|         move.b 1(sp),d0
    d1b2:	|         move.w d0,1cb22 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d1b8:	\-------> move.w 1ca3a <input>,d0
    d1be:	      /-- beq.s d1e4 <CsiCheckInput+0x1ae>
    d1c0:	      |   movea.l #12574721,a0
    d1c6:	      |   move.b (a0),d0
    d1c8:	      |   move.b d0,d0
    d1ca:	      |   andi.l #255,d0
    d1d0:	      |   moveq #64,d1
    d1d2:	      |   and.l d1,d0
    d1d4:	      +-- beq.s d1e4 <CsiCheckInput+0x1ae>
    {
        input.leftClick = FALSE;
    d1d6:	      |   clr.w 1ca3a <input>
        input.leftRelease = TRUE;
    d1dc:	      |   move.w #1,1ca40 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d1e4:	      \-> move.w 1ca3c <input+0x2>,d0
    d1ea:	      /-- beq.s d212 <CsiCheckInput+0x1dc>
    d1ec:	      |   movea.l #14675990,a0
    d1f2:	      |   move.w (a0),d0
    d1f4:	      |   move.w d0,d0
    d1f6:	      |   andi.l #65535,d0
    d1fc:	      |   andi.l #1024,d0
    d202:	      +-- beq.s d212 <CsiCheckInput+0x1dc>
    {
        input.rightClick = FALSE;
    d204:	      |   clr.w 1ca3c <input+0x2>
        input.rightRelease = TRUE;
    d20a:	      |   move.w #1,1ca42 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d212:	      \-> movea.l #12574721,a0
    d218:	          move.b (a0),d0
    d21a:	          move.b d0,d0
    d21c:	          andi.l #255,d0
    d222:	          moveq #64,d1
    d224:	          and.l d1,d0
    d226:	      /-- bne.s d230 <CsiCheckInput+0x1fa>
        input.leftClick = TRUE;        
    d228:	      |   move.w #1,1ca3a <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d230:	      \-> movea.l #14675990,a0
    d236:	          move.w (a0),d0
    d238:	          move.w d0,d0
    d23a:	          andi.l #65535,d0
    d240:	          andi.l #1024,d0
    d246:	      /-- bne.s d250 <CsiCheckInput+0x21a>
        input.rightClick = TRUE;
    d248:	      |   move.w #1,1ca3c <input+0x2>
    }

    d250:	      \-> nop
    d252:	          lea 12(sp),sp
    d256:	          rts

0000d258 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d258:	moveq #0,d0
}
    d25a:	rts

0000d25c <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d25c:	nop
    d25e:	rts

0000d260 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d260:	nop
    d262:	rts

0000d264 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d264:	moveq #1,d0
}
    d266:	rts

0000d268 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d268:	nop
    d26a:	rts

0000d26c <saveSounds>:

void saveSounds (BPTR fp) {
    d26c:	lea -12(sp),sp
    d270:	move.l a6,-(sp)
    d272:	move.l d2,-(sp)
	FPutC (fp,0);
    d274:	move.l 24(sp),16(sp)
    d27a:	clr.l 12(sp)
    d27e:	move.l 1ca90 <DOSBase>,d0
    d284:	movea.l d0,a6
    d286:	move.l 16(sp),d1
    d28a:	move.l 12(sp),d2
    d28e:	jsr -312(a6)
    d292:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d296:	move.l 1c422 <defSoundVol>,d0
    d29c:	move.l 24(sp),-(sp)
    d2a0:	move.l d0,-(sp)
    d2a2:	jsr 8d0 <put2bytes>
    d2a8:	addq.l #8,sp
	put2bytes (defVol, fp);
    d2aa:	move.l 1c41e <defVol>,d0
    d2b0:	move.l 24(sp),-(sp)
    d2b4:	move.l d0,-(sp)
    d2b6:	jsr 8d0 <put2bytes>
    d2bc:	addq.l #8,sp
}
    d2be:	nop
    d2c0:	move.l (sp)+,d2
    d2c2:	movea.l (sp)+,a6
    d2c4:	lea 12(sp),sp
    d2c8:	rts

0000d2ca <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d2ca:	move.l 4(sp),1c41e <defVol>
}
    d2d2:	nop
    d2d4:	rts

0000d2d6 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d2d6:	move.l 4(sp),1c422 <defSoundVol>
}
    d2de:	nop
    d2e0:	rts

0000d2e2 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d2e2:	nop
    d2e4:	rts

0000d2e6 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d2e6:	nop
    d2e8:	rts

0000d2ea <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d2ea:	nop
    d2ec:	rts

0000d2ee <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d2ee:	subq.l #4,sp
    d2f0:	move.l 12(sp),d0
    d2f4:	move.w d0,d0
    d2f6:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d2fa:	moveq #1,d0
}
    d2fc:	addq.l #4,sp
    d2fe:	rts

0000d300 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d300:	nop
    d302:	rts

0000d304 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    d304:	move.l 16(sp),-(sp)
    d308:	move.l 16(sp),-(sp)
    d30c:	jsr e0e <CstBlankScreen>
    d312:	addq.l #8,sp
}
    d314:	nop
    d316:	rts

0000d318 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d318:	pea 194ff <PutChar+0x1723>
    d31e:	jsr 1733a <KPrintF>
    d324:	addq.l #4,sp
}
    d326:	nop
    d328:	rts

0000d32a <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d32a:	movea.l 8(sp),a1
    d32e:	movea.l 12(sp),a0
    d332:	move.l 8(sp),d1
    d336:	move.l 4(sp),d0
    d33a:	move.l a1,-(sp)
    d33c:	move.l a0,-(sp)
    d33e:	move.l d1,-(sp)
    d340:	move.l d0,-(sp)
    d342:	jsr 3efc <drawLine>
    d348:	lea 16(sp),sp
}
    d34c:	nop
    d34e:	rts

0000d350 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d350:	movea.l 12(sp),a1
    d354:	movea.l 4(sp),a0
    d358:	move.l 8(sp),d1
    d35c:	move.l 4(sp),d0
    d360:	move.l a1,-(sp)
    d362:	move.l a0,-(sp)
    d364:	move.l d1,-(sp)
    d366:	move.l d0,-(sp)
    d368:	jsr 3efc <drawLine>
    d36e:	lea 16(sp),sp
}
    d372:	nop
    d374:	rts

0000d376 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d376:	pea 19538 <PutChar+0x175c>
    d37c:	jsr 1733a <KPrintF>
    d382:	addq.l #4,sp
}
    d384:	nop
    d386:	rts

0000d388 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d388:	jsr 1c72 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d38e:	pea 1cb2c <backdropTextureName>
    d394:	pea 1 <_start+0x1>
    d398:	jsr 407e <deleteTextures>
    d39e:	addq.l #8,sp
	backdropTextureName = 0;
    d3a0:	clr.l 1cb2c <backdropTextureName>
	backdropExists = FALSE;
    d3a6:	clr.w 1cb30 <backdropExists>
}
    d3ac:	nop
    d3ae:	rts

0000d3b0 <killParallax>:

void killParallax () {
    d3b0:	          lea -12(sp),sp
    d3b4:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d3b6:	   /----- bra.s d422 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d3b8:	/--|----> move.l 1cb32 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d3c0:	|  |      movea.l 12(sp),a0
    d3c4:	|  |      move.l 42(a0),d0
    d3c8:	|  |      move.l d0,1cb32 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d3ce:	|  |      move.l 12(sp),d0
    d3d2:	|  |      addq.l #4,d0
    d3d4:	|  |      move.l d0,-(sp)
    d3d6:	|  |      pea 1 <_start+0x1>
    d3da:	|  |      jsr 407e <deleteTextures>
    d3e0:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d3e2:	|  |      movea.l 12(sp),a0
    d3e6:	|  |      move.l (a0),d0
    d3e8:	|  |  /-- beq.s d402 <killParallax+0x52>
    d3ea:	|  |  |   movea.l 12(sp),a0
    d3ee:	|  |  |   move.l (a0),8(sp)
    d3f2:	|  |  |   move.l 1ca88 <SysBase>,d0
    d3f8:	|  |  |   movea.l d0,a6
    d3fa:	|  |  |   movea.l 8(sp),a1
    d3fe:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d402:	|  |  \-> tst.l 12(sp)
    d406:	|  |  /-- beq.s d41e <killParallax+0x6e>
    d408:	|  |  |   move.l 12(sp),4(sp)
    d40e:	|  |  |   move.l 1ca88 <SysBase>,d0
    d414:	|  |  |   movea.l d0,a6
    d416:	|  |  |   movea.l 4(sp),a1
    d41a:	|  |  |   jsr -690(a6)
		k = NULL;
    d41e:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    d422:	|  \----> move.l 1cb32 <parallaxStuff>,d0
    d428:	\-------- bne.s d3b8 <killParallax+0x8>
	}
}
    d42a:	          nop
    d42c:	          nop
    d42e:	          movea.l (sp)+,a6
    d430:	          lea 12(sp),sp
    d434:	          rts

0000d436 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d436:	       move.l 4(sp),-(sp)
    d43a:	       jsr 6e10 <openFileFromNum>
    d440:	       addq.l #4,sp
    d442:	       tst.l d0
    d444:	   /-- bne.s d456 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d446:	   |   pea 19559 <PutChar+0x177d>
    d44c:	   |   jsr 1733a <KPrintF>
    d452:	   |   addq.l #4,sp
		return;
    d454:	/--|-- bra.s d476 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d456:	|  \-> move.l 1ca70 <bigDataFile>,d0
    d45c:	|      move.l 12(sp),-(sp)
    d460:	|      move.l 12(sp),-(sp)
    d464:	|      move.l d0,-(sp)
    d466:	|      jsr 1f20 <CstLoadBackdrop>
    d46c:	|      lea 12(sp),sp
	finishAccess ();
    d470:	|      jsr 6d08 <finishAccess>
	
}
    d476:	\----> rts

0000d478 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d478:	subq.l #8,sp
    d47a:	movea.l 12(sp),a0
    d47e:	move.l 16(sp),d1
    d482:	move.l 20(sp),d0
    d486:	movea.w a0,a0
    d488:	move.w a0,6(sp)
    d48c:	move.w d1,d1
    d48e:	move.w d1,4(sp)
    d492:	move.w d0,d0
    d494:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d498:	pea 195a8 <PutChar+0x17cc>
    d49e:	jsr 1733a <KPrintF>
    d4a4:	addq.l #4,sp

}
    d4a6:	nop
    d4a8:	addq.l #8,sp
    d4aa:	rts

0000d4ac <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d4ac:	pea 195cb <PutChar+0x17ef>
    d4b2:	jsr 1733a <KPrintF>
    d4b8:	addq.l #4,sp
}
    d4ba:	nop
    d4bc:	rts

0000d4be <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d4be:	pea 1cb36 <snapshotTextureName>
    d4c4:	pea 1 <_start+0x1>
    d4c8:	jsr 407e <deleteTextures>
    d4ce:	addq.l #8,sp
	snapshotTextureName = 0;
    d4d0:	clr.l 1cb36 <snapshotTextureName>
}
    d4d6:	nop
    d4d8:	rts

0000d4da <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d4da:	clr.l 1cb42 <cameraX>
	cameraY = 0;
    d4e0:	clr.l 1cb46 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d4e6:	move.l 1cb28 <sceneHeight>,d0
    d4ec:	move.l d0,d1
    d4ee:	move.l 1cb24 <sceneWidth>,d0
    d4f4:	move.l d1,-(sp)
    d4f6:	move.l d0,-(sp)
    d4f8:	jsr 3a02 <CstReserveBackdrop>
    d4fe:	addq.l #8,sp
}
    d500:	rts

0000d502 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d502:	jsr d388 <killBackDrop>
	killParallax ();
    d508:	jsr d3b0 <killParallax>
	killZBuffer ();
    d50e:	jsr 87b2 <killZBuffer>
	sceneWidth = x;
    d514:	move.l 4(sp),d0
    d518:	move.l d0,1cb24 <sceneWidth>
	sceneHeight = y;
    d51e:	move.l 8(sp),d0
    d522:	move.l d0,1cb28 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d528:	pea 19604 <PutChar+0x1828>
    d52e:	jsr 1733a <KPrintF>
    d534:	addq.l #4,sp
	return reserveBackdrop();
    d536:	jsr d4da <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d53c:	rts

0000d53e <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d53e:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d540:	move.l 12(sp),-(sp)
    d544:	jsr 6bc <get2bytes>
    d54a:	addq.l #4,sp
    d54c:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d550:	move.l 12(sp),-(sp)
    d554:	jsr 6bc <get2bytes>
    d55a:	addq.l #4,sp
    d55c:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d55e:	moveq #1,d0
}
    d560:	addq.l #8,sp
    d562:	rts

0000d564 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d564:	   /-> lea -12(sp),sp
    d568:	   |   move.l a6,-(sp)
    d56a:	   |   move.l d2,-(sp)
	if (me) {
    d56c:	   |   tst.l 24(sp)
    d570:	/--|-- beq.w d606 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d574:	|  |   movea.l 24(sp),a0
    d578:	|  |   move.l 42(a0),d0
    d57c:	|  |   move.l 28(sp),-(sp)
    d580:	|  |   move.l d0,-(sp)
    d582:	|  \-- jsr d564 <saveParallaxRecursive>(pc)
    d586:	|      addq.l #8,sp
		FPutC (fp, 1);
    d588:	|      move.l 28(sp),16(sp)
    d58e:	|      moveq #1,d0
    d590:	|      move.l d0,12(sp)
    d594:	|      move.l 1ca90 <DOSBase>,d0
    d59a:	|      movea.l d0,a6
    d59c:	|      move.l 16(sp),d1
    d5a0:	|      move.l 12(sp),d2
    d5a4:	|      jsr -312(a6)
    d5a8:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d5ac:	|      movea.l 24(sp),a0
    d5b0:	|      move.w 28(a0),d0
    d5b4:	|      move.w d0,d0
    d5b6:	|      andi.l #65535,d0
    d5bc:	|      move.l 28(sp),-(sp)
    d5c0:	|      move.l d0,-(sp)
    d5c2:	|      jsr 8d0 <put2bytes>
    d5c8:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d5ca:	|      movea.l 24(sp),a0
    d5ce:	|      move.w 30(a0),d0
    d5d2:	|      move.w d0,d0
    d5d4:	|      andi.l #65535,d0
    d5da:	|      move.l 28(sp),-(sp)
    d5de:	|      move.l d0,-(sp)
    d5e0:	|      jsr 8d0 <put2bytes>
    d5e6:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d5e8:	|      movea.l 24(sp),a0
    d5ec:	|      move.w 32(a0),d0
    d5f0:	|      move.w d0,d0
    d5f2:	|      andi.l #65535,d0
    d5f8:	|      move.l 28(sp),-(sp)
    d5fc:	|      move.l d0,-(sp)
    d5fe:	|      jsr 8d0 <put2bytes>
    d604:	|      addq.l #8,sp
	}
}
    d606:	\----> nop
    d608:	       move.l (sp)+,d2
    d60a:	       movea.l (sp)+,a6
    d60c:	       lea 12(sp),sp
    d610:	       rts

0000d612 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d612:	pea 1962b <PutChar+0x184f>
    d618:	jsr 1733a <KPrintF>
    d61e:	addq.l #4,sp
	return TRUE;
    d620:	moveq #1,d0
    d622:	rts

0000d624 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d624:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d626:	             move.l 1cb3a <allObjectTypes>,(sp)

	while (huntType) {
    d62c:	      /----- bra.s d644 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d62e:	   /--|----> movea.l (sp),a0
    d630:	   |  |      move.l 4(a0),d0
    d634:	   |  |      cmp.l 8(sp),d0
    d638:	   |  |  /-- bne.s d63e <findObjectType+0x1a>
    d63a:	   |  |  |   move.l (sp),d0
    d63c:	/--|--|--|-- bra.s d654 <findObjectType+0x30>
		huntType = huntType -> next;
    d63e:	|  |  |  \-> movea.l (sp),a0
    d640:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d644:	|  |  \----> tst.l (sp)
    d646:	|  \-------- bne.s d62e <findObjectType+0xa>
	}

	return loadObjectType (i);
    d648:	|            move.l 8(sp),-(sp)
    d64c:	|            jsr d714 <loadObjectType>
    d652:	|            addq.l #4,sp
}
    d654:	\----------> addq.l #4,sp
    d656:	             rts

0000d658 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d658:	             lea -12(sp),sp
	int i, num = 0;
    d65c:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d660:	             move.l 20(sp),-(sp)
    d664:	             jsr d624 <findObjectType>
    d66a:	             addq.l #4,sp
    d66c:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d66e:	             clr.l 8(sp)
    d672:	   /-------- bra.s d6a8 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d674:	/--|-------> movea.l (sp),a0
    d676:	|  |         move.l 38(a0),d1
    d67a:	|  |         move.l 8(sp),d0
    d67e:	|  |         lsl.l #3,d0
    d680:	|  |         movea.l d1,a0
    d682:	|  |         adda.l d0,a0
    d684:	|  |         move.l (a0),d0
    d686:	|  |         cmp.l 16(sp),d0
    d68a:	|  |  /----- bne.s d6a4 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d68c:	|  |  |      movea.l (sp),a0
    d68e:	|  |  |      move.l 38(a0),d1
    d692:	|  |  |      move.l 8(sp),d0
    d696:	|  |  |      lsl.l #3,d0
    d698:	|  |  |      movea.l d1,a0
    d69a:	|  |  |      adda.l d0,a0
    d69c:	|  |  |      move.l 4(a0),4(sp)
			break;
    d6a2:	|  |  |  /-- bra.s d6b4 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d6a4:	|  |  \--|-> addq.l #1,8(sp)
    d6a8:	|  \-----|-> movea.l (sp),a0
    d6aa:	|        |   move.l 16(a0),d0
    d6ae:	|        |   cmp.l 8(sp),d0
    d6b2:	\--------|-- bgt.s d674 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d6b4:	         \-> move.l 4(sp),d0
}
    d6b8:	             lea 12(sp),sp
    d6bc:	             rts

0000d6be <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d6be:	moveq #1,d0
}
    d6c0:	rts

0000d6c2 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d6c2:	subq.l #8,sp
    d6c4:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d6c6:	move.l 16(sp),-(sp)
    d6ca:	jsr 6bc <get2bytes>
    d6d0:	addq.l #4,sp
    d6d2:	move.l d0,-(sp)
    d6d4:	jsr d714 <loadObjectType>
    d6da:	addq.l #4,sp
    d6dc:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d6e0:	movea.l 8(sp),a0
    d6e4:	move.l (a0),4(sp)
    d6e8:	move.l 1ca88 <SysBase>,d0
    d6ee:	movea.l d0,a6
    d6f0:	movea.l 4(sp),a1
    d6f4:	jsr -690(a6)
	r -> screenName = readString (fp);
    d6f8:	move.l 16(sp),-(sp)
    d6fc:	jsr b02 <readString>
    d702:	addq.l #4,sp
    d704:	movea.l 8(sp),a0
    d708:	move.l d0,(a0)
	return r;
    d70a:	move.l 8(sp),d0
}
    d70e:	movea.l (sp)+,a6
    d710:	addq.l #8,sp
    d712:	rts

0000d714 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d714:	          lea -84(sp),sp
    d718:	          move.l a6,-(sp)
    d71a:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d71c:	          moveq #42,d0
    d71e:	          move.l d0,84(sp)
    d722:	          clr.l 80(sp)
    d726:	          move.l 1ca88 <SysBase>,d0
    d72c:	          movea.l d0,a6
    d72e:	          move.l 84(sp),d0
    d732:	          move.l 80(sp),d1
    d736:	          jsr -684(a6)
    d73a:	          move.l d0,76(sp)
    d73e:	          move.l 76(sp),d0
    d742:	          move.l d0,72(sp)

    if (newType) {
    d746:	/-------- beq.w d9c0 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d74a:	|         move.l 96(sp),-(sp)
    d74e:	|         jsr 6ed8 <openObjectSlice>
    d754:	|         addq.l #4,sp
    d756:	|         tst.w d0
    d758:	+-------- beq.w d9c0 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d75c:	|         move.l 1ca70 <bigDataFile>,d0
    d762:	|         move.l d0,-(sp)
    d764:	|         jsr 6bc <get2bytes>
    d76a:	|         addq.l #4,sp
    d76c:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d770:	|         move.l 1ca70 <bigDataFile>,64(sp)
    d778:	|         move.l 1ca90 <DOSBase>,d0
    d77e:	|         movea.l d0,a6
    d780:	|         move.l 64(sp),d1
    d784:	|         jsr -306(a6)
    d788:	|         move.l d0,60(sp)
    d78c:	|         move.l 60(sp),d0
    d790:	|         move.l d0,d0
    d792:	|         movea.l 72(sp),a0
    d796:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d79a:	|         move.l 1ca70 <bigDataFile>,56(sp)
    d7a2:	|         move.l 1ca90 <DOSBase>,d0
    d7a8:	|         movea.l d0,a6
    d7aa:	|         move.l 56(sp),d1
    d7ae:	|         jsr -306(a6)
    d7b2:	|         move.l d0,52(sp)
    d7b6:	|         move.l 52(sp),d0
    d7ba:	|         move.l d0,d0
    d7bc:	|         movea.l 72(sp),a0
    d7c0:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d7c4:	|         move.l 1ca70 <bigDataFile>,48(sp)
    d7cc:	|         move.l 1ca90 <DOSBase>,d0
    d7d2:	|         movea.l d0,a6
    d7d4:	|         move.l 48(sp),d1
    d7d8:	|         jsr -306(a6)
    d7dc:	|         move.l d0,44(sp)
    d7e0:	|         move.l 44(sp),d0
    d7e4:	|         move.l d0,d0
    d7e6:	|         movea.l 72(sp),a0
    d7ea:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d7ee:	|         move.l 1ca70 <bigDataFile>,40(sp)
    d7f6:	|         move.l 1ca90 <DOSBase>,d0
    d7fc:	|         movea.l d0,a6
    d7fe:	|         move.l 40(sp),d1
    d802:	|         jsr -306(a6)
    d806:	|         move.l d0,36(sp)
    d80a:	|         move.l 36(sp),d0
    d80e:	|         movea.l 72(sp),a0
    d812:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d816:	|         move.l 1ca70 <bigDataFile>,32(sp)
    d81e:	|         move.l 1ca90 <DOSBase>,d0
    d824:	|         movea.l d0,a6
    d826:	|         move.l 32(sp),d1
    d82a:	|         jsr -306(a6)
    d82e:	|         move.l d0,28(sp)
    d832:	|         move.l 28(sp),d0
    d836:	|         movea.l 72(sp),a0
    d83a:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d83e:	|         move.l 1ca70 <bigDataFile>,d0
    d844:	|         move.l d0,-(sp)
    d846:	|         jsr 718 <get4bytes>
    d84c:	|         addq.l #4,sp
    d84e:	|         movea.l 72(sp),a0
    d852:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d856:	|         move.l 1ca70 <bigDataFile>,d0
    d85c:	|         move.l d0,-(sp)
    d85e:	|         jsr 6bc <get2bytes>
    d864:	|         addq.l #4,sp
    d866:	|         movea.l 72(sp),a0
    d86a:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d86e:	|         move.l 1ca70 <bigDataFile>,24(sp)
    d876:	|         move.l 1ca90 <DOSBase>,d0
    d87c:	|         movea.l d0,a6
    d87e:	|         move.l 24(sp),d1
    d882:	|         jsr -306(a6)
    d886:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d88a:	|         move.l 1ca70 <bigDataFile>,d0
    d890:	|         move.l d0,-(sp)
    d892:	|         jsr 7d8 <getFloat>
    d898:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d89a:	|         move.l 1ca70 <bigDataFile>,d0
    d8a0:	|         move.l d0,-(sp)
    d8a2:	|         jsr 7d8 <getFloat>
    d8a8:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d8aa:	|         move.l 1ca70 <bigDataFile>,d0
    d8b0:	|         move.l d0,-(sp)
    d8b2:	|         jsr 6bc <get2bytes>
    d8b8:	|         addq.l #4,sp
    d8ba:	|         move.l d0,d0
    d8bc:	|         movea.l 72(sp),a0
    d8c0:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d8c4:	|         move.l 1ca70 <bigDataFile>,d0
    d8ca:	|         move.l d0,-(sp)
    d8cc:	|         jsr 6bc <get2bytes>
    d8d2:	|         addq.l #4,sp
    d8d4:	|         movea.l 72(sp),a0
    d8d8:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d8dc:	|         movea.l 72(sp),a0
    d8e0:	|         move.l 16(a0),d0
    d8e4:	|  /----- beq.s d916 <loadObjectType+0x202>
    d8e6:	|  |      movea.l 72(sp),a0
    d8ea:	|  |      move.l 16(a0),d0
    d8ee:	|  |      lsl.l #3,d0
    d8f0:	|  |      move.l d0,16(sp)
    d8f4:	|  |      clr.l 12(sp)
    d8f8:	|  |      move.l 1ca88 <SysBase>,d0
    d8fe:	|  |      movea.l d0,a6
    d900:	|  |      move.l 16(sp),d0
    d904:	|  |      move.l 12(sp),d1
    d908:	|  |      jsr -684(a6)
    d90c:	|  |      move.l d0,8(sp)
    d910:	|  |      move.l 8(sp),d0
    d914:	|  |  /-- bra.s d918 <loadObjectType+0x204>
    d916:	|  \--|-> moveq #0,d0
    d918:	|     \-> movea.l 72(sp),a0
    d91c:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d920:	|         clr.l 88(sp)
    d924:	|     /-- bra.s d974 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d926:	|  /--|-> move.l 1ca70 <bigDataFile>,d1
    d92c:	|  |  |   movea.l 72(sp),a0
    d930:	|  |  |   movea.l 38(a0),a0
    d934:	|  |  |   move.l 88(sp),d0
    d938:	|  |  |   lsl.l #3,d0
    d93a:	|  |  |   lea (0,a0,d0.l),a2
    d93e:	|  |  |   move.l d1,-(sp)
    d940:	|  |  |   jsr 6bc <get2bytes>
    d946:	|  |  |   addq.l #4,sp
    d948:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d94a:	|  |  |   move.l 1ca70 <bigDataFile>,d1
    d950:	|  |  |   movea.l 72(sp),a0
    d954:	|  |  |   movea.l 38(a0),a0
    d958:	|  |  |   move.l 88(sp),d0
    d95c:	|  |  |   lsl.l #3,d0
    d95e:	|  |  |   lea (0,a0,d0.l),a2
    d962:	|  |  |   move.l d1,-(sp)
    d964:	|  |  |   jsr 6bc <get2bytes>
    d96a:	|  |  |   addq.l #4,sp
    d96c:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d970:	|  |  |   addq.l #1,88(sp)
    d974:	|  |  \-> movea.l 72(sp),a0
    d978:	|  |      move.l 16(a0),d0
    d97c:	|  |      cmp.l 88(sp),d0
    d980:	|  \----- bgt.s d926 <loadObjectType+0x212>
            }
            finishAccess();
    d982:	|         jsr 6d08 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d988:	|         move.l 68(sp),-(sp)
    d98c:	|         jsr 6d12 <getNumberedString>
    d992:	|         addq.l #4,sp
    d994:	|         movea.l 72(sp),a0
    d998:	|         move.l d0,(a0)
            newType->objectNum = i;
    d99a:	|         movea.l 72(sp),a0
    d99e:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d9a4:	|         move.l 1cb3a <allObjectTypes>,d0
    d9aa:	|         movea.l 72(sp),a0
    d9ae:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d9b2:	|         move.l 72(sp),1cb3a <allObjectTypes>
            return newType;
    d9ba:	|         move.l 72(sp),d0
    d9be:	|     /-- bra.s d9c2 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d9c0:	\-----|-> moveq #0,d0
}
    d9c2:	      \-> movea.l (sp)+,a2
    d9c4:	          movea.l (sp)+,a6
    d9c6:	          lea 84(sp),sp
    d9ca:	          rts

0000d9cc <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d9cc:	             lea -16(sp),sp
    d9d0:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d9d2:	             move.l #117562,16(sp)

	while (* huntRegion) {
    d9da:	   /-------- bra.s da4e <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d9dc:	/--|-------> movea.l 16(sp),a0
    d9e0:	|  |         move.l (a0),d0
    d9e2:	|  |         cmp.l 24(sp),d0
    d9e6:	|  |  /----- bne.s da40 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d9e8:	|  |  |      movea.l 24(sp),a0
    d9ec:	|  |  |      move.l 8(a0),d0
    d9f0:	|  |  |      movea.l 16(sp),a0
    d9f4:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d9f6:	|  |  |      movea.l 24(sp),a0
    d9fa:	|  |  |      move.l 38(a0),12(sp)
    da00:	|  |  |      move.l 1ca88 <SysBase>,d0
    da06:	|  |  |      movea.l d0,a6
    da08:	|  |  |      movea.l 12(sp),a1
    da0c:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    da10:	|  |  |      movea.l 24(sp),a0
    da14:	|  |  |      move.l (a0),8(sp)
    da18:	|  |  |      move.l 1ca88 <SysBase>,d0
    da1e:	|  |  |      movea.l d0,a6
    da20:	|  |  |      movea.l 8(sp),a1
    da24:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    da28:	|  |  |      move.l 24(sp),4(sp)
    da2e:	|  |  |      move.l 1ca88 <SysBase>,d0
    da34:	|  |  |      movea.l d0,a6
    da36:	|  |  |      movea.l 4(sp),a1
    da3a:	|  |  |      jsr -690(a6)
			return;
    da3e:	|  |  |  /-- bra.s da64 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    da40:	|  |  \--|-> movea.l 16(sp),a0
    da44:	|  |     |   move.l (a0),d0
    da46:	|  |     |   move.l d0,d1
    da48:	|  |     |   addq.l #8,d1
    da4a:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    da4e:	|  \-----|-> movea.l 16(sp),a0
    da52:	|        |   move.l (a0),d0
    da54:	\--------|-- bne.s d9dc <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    da56:	         |   pea 19652 <PutChar+0x1876>
    da5c:	         |   jsr 1733a <KPrintF>
    da62:	         |   addq.l #4,sp
}
    da64:	         \-> movea.l (sp)+,a6
    da66:	             lea 16(sp),sp
    da6a:	             rts

0000da6c <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    da6c:	movea.l 4(sp),a0
    da70:	move.l 4(a0),d0
    da74:	move.l 8(sp),-(sp)
    da78:	move.l d0,-(sp)
    da7a:	jsr 8d0 <put2bytes>
    da80:	addq.l #8,sp
	writeString (r -> screenName, fp);
    da82:	movea.l 4(sp),a0
    da86:	move.l (a0),d0
    da88:	move.l 8(sp),-(sp)
    da8c:	move.l d0,-(sp)
    da8e:	jsr bd8 <writeString>
    da94:	addq.l #8,sp
    da96:	nop
    da98:	rts

0000da9a <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    da9a:	                         lea -112(sp),sp
    da9e:	                         move.l a6,-(sp)
    daa0:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    daa2:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    daa6:	                         move.w 1cb40 <saveEncoding>,d0
    daac:	                  /----- beq.s dab6 <fileToStack+0x1c>
    daae:	                  |      move.l #104056,d0
    dab4:	                  |  /-- bra.s dabc <fileToStack+0x22>
    dab6:	                  \--|-> move.l #104082,d0
    dabc:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    dac0:	                         move.l 124(sp),112(sp)
    dac6:	                         move.l #1005,108(sp)
    dace:	                         move.l 1ca90 <DOSBase>,d0
    dad4:	                         movea.l d0,a6
    dad6:	                         move.l 112(sp),d1
    dada:	                         move.l 108(sp),d2
    dade:	                         jsr -30(a6)
    dae2:	                         move.l d0,104(sp)
    dae6:	                         move.l 104(sp),d0
    daea:	                         move.l d0,100(sp)
    if (!fp) {
    daee:	                     /-- bne.s db08 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    daf0:	                     |   move.l 124(sp),-(sp)
    daf4:	                     |   pea 196a9 <PutChar+0x18cd>
    dafa:	                     |   jsr 1733a <KPrintF>
    db00:	                     |   addq.l #8,sp
        return FALSE;
    db02:	                     |   clr.w d0
    db04:	/--------------------|-- bra.w ddfe <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    db08:	|                    \-> move.w 1cb40 <saveEncoding>,d0
    db0e:	|                        move.l d0,d0
    db10:	|                        move.b d0,1cb3e <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    db16:	|                        move.w 1cb40 <saveEncoding>,d0
    db1c:	|                        lsr.w #8,d0
    db1e:	|                        move.l d0,d0
    db20:	|                        move.b d0,1cb3f <encode2>

    while (*checker) {
    db26:	|                 /----- bra.s db8a <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    db28:	|              /--|----> move.l 100(sp),30(sp)
    db2e:	|              |  |      move.l 1ca90 <DOSBase>,d0
    db34:	|              |  |      movea.l d0,a6
    db36:	|              |  |      move.l 30(sp),d1
    db3a:	|              |  |      jsr -306(a6)
    db3e:	|              |  |      move.l d0,26(sp)
    db42:	|              |  |      move.l 26(sp),d1
    db46:	|              |  |      movea.l 116(sp),a0
    db4a:	|              |  |      move.b (a0),d0
    db4c:	|              |  |      ext.w d0
    db4e:	|              |  |      movea.w d0,a0
    db50:	|              |  |      cmpa.l d1,a0
    db52:	|              |  |  /-- beq.s db86 <fileToStack+0xec>
            Close(fp);
    db54:	|              |  |  |   move.l 100(sp),22(sp)
    db5a:	|              |  |  |   move.l 1ca90 <DOSBase>,d0
    db60:	|              |  |  |   movea.l d0,a6
    db62:	|              |  |  |   move.l 22(sp),d1
    db66:	|              |  |  |   jsr -36(a6)
    db6a:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    db6e:	|              |  |  |   move.l 124(sp),-(sp)
    db72:	|              |  |  |   pea 196b6 <PutChar+0x18da>
    db78:	|              |  |  |   jsr 1733a <KPrintF>
    db7e:	|              |  |  |   addq.l #8,sp
            return FALSE;
    db80:	|              |  |  |   clr.w d0
    db82:	+--------------|--|--|-- bra.w ddfe <fileToStack+0x364>
        }
        checker++;
    db86:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    db8a:	|              |  \----> movea.l 116(sp),a0
    db8e:	|              |         move.b (a0),d0
    db90:	|              \-------- bne.s db28 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    db92:	|                        move.w 1cb40 <saveEncoding>,d0
    db98:	|  /-------------------- beq.s dc0c <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    db9a:	|  |                     move.l 100(sp),-(sp)
    db9e:	|  |                     jsr de08 <readStringEncoded>
    dba4:	|  |                     addq.l #4,sp
    dba6:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    dbaa:	|  |                     pea 196f7 <PutChar+0x191b>
    dbb0:	|  |                     move.l 100(sp),-(sp)
    dbb4:	|  |                     jsr 13d86 <strcmp>
    dbba:	|  |                     addq.l #8,sp
    dbbc:	|  |                     tst.l d0
    dbbe:	|  |                 /-- beq.s dbf2 <fileToStack+0x158>
            Close(fp);
    dbc0:	|  |                 |   move.l 100(sp),88(sp)
    dbc6:	|  |                 |   move.l 1ca90 <DOSBase>,d0
    dbcc:	|  |                 |   movea.l d0,a6
    dbce:	|  |                 |   move.l 88(sp),d1
    dbd2:	|  |                 |   jsr -36(a6)
    dbd6:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    dbda:	|  |                 |   move.l 124(sp),-(sp)
    dbde:	|  |                 |   pea 19706 <PutChar+0x192a>
    dbe4:	|  |                 |   jsr 1733a <KPrintF>
    dbea:	|  |                 |   addq.l #8,sp
            return FALSE;
    dbec:	|  |                 |   clr.w d0
    dbee:	+--|-----------------|-- bra.w ddfe <fileToStack+0x364>
        }
        FreeVec(checker);
    dbf2:	|  |                 \-> move.l 96(sp),92(sp)
    dbf8:	|  |                     move.l 1ca88 <SysBase>,d0
    dbfe:	|  |                     movea.l d0,a6
    dc00:	|  |                     movea.l 92(sp),a1
    dc04:	|  |                     jsr -690(a6)
        checker = NULL;
    dc08:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    dc0c:	|  >-------------------> move.w 1cb40 <saveEncoding>,d0
    dc12:	|  |     /-------------- beq.w dd46 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    dc16:	|  |     |               move.l 100(sp),76(sp)
    dc1c:	|  |     |               move.l 1ca90 <DOSBase>,d0
    dc22:	|  |     |               movea.l d0,a6
    dc24:	|  |     |               move.l 76(sp),d1
    dc28:	|  |     |               jsr -306(a6)
    dc2c:	|  |     |               move.l d0,72(sp)
    dc30:	|  |     |               move.l 72(sp),d0
    dc34:	|  |     |               move.b 1cb3e <encode1>,d1
    dc3a:	|  |     |               ext.w d1
    dc3c:	|  |     |               ext.l d1
    dc3e:	|  |     |               move.l d0,d2
    dc40:	|  |     |               eor.l d1,d2
    dc42:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    dc46:	|  |     |               moveq #-1,d0
    dc48:	|  |     |               cmp.l 68(sp),d0
    dc4c:	|  |  /--|-------------- beq.w dddc <fileToStack+0x342>

            char i = (char) tmp;
    dc50:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    dc56:	|  |  |  |               move.b 67(sp),d0
    dc5a:	|  |  |  |               ext.w d0
    dc5c:	|  |  |  |               movea.w d0,a0
    dc5e:	|  |  |  |               moveq #2,d2
    dc60:	|  |  |  |               cmp.l a0,d2
    dc62:	|  |  |  |     /-------- beq.s dcde <fileToStack+0x244>
    dc64:	|  |  |  |     |         moveq #2,d0
    dc66:	|  |  |  |     |         cmp.l a0,d0
    dc68:	|  |  |  |  /--|-------- blt.w dd14 <fileToStack+0x27a>
    dc6c:	|  |  |  |  |  |         cmpa.w #0,a0
    dc70:	|  |  |  |  |  |     /-- beq.s dc7c <fileToStack+0x1e2>
    dc72:	|  |  |  |  |  |     |   moveq #1,d2
    dc74:	|  |  |  |  |  |     |   cmp.l a0,d2
    dc76:	|  |  |  |  |  |  /--|-- beq.s dcb8 <fileToStack+0x21e>
    dc78:	|  |  |  |  +--|--|--|-- bra.w dd14 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    dc7c:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    dc80:	|  |  |  |  |  |  |      jsr de08 <readStringEncoded>
    dc86:	|  |  |  |  |  |  |      addq.l #4,sp
    dc88:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    dc8c:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    dc90:	|  |  |  |  |  |  |      lea 14(sp),a0
    dc94:	|  |  |  |  |  |  |      move.l a0,-(sp)
    dc96:	|  |  |  |  |  |  |      jsr 14afc <makeTextVar>
    dc9c:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    dc9e:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    dca4:	|  |  |  |  |  |  |      move.l 1ca88 <SysBase>,d0
    dcaa:	|  |  |  |  |  |  |      movea.l d0,a6
    dcac:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    dcb0:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    dcb4:	|  |  |  |  |  |  |  /-- bra.w dd6c <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    dcb8:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    dcbc:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    dcc2:	|  |  |  |  |  |     |   addq.l #4,sp
    dcc4:	|  |  |  |  |  |     |   move.l d0,-(sp)
    dcc6:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    dcca:	|  |  |  |  |  |     |   lea 18(sp),a0
    dcce:	|  |  |  |  |  |     |   move.l a0,-(sp)
    dcd0:	|  |  |  |  |  |     |   jsr 151cc <setVariable>
    dcd6:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    dcda:	|  |  |  |  |  |     +-- bra.w dd6c <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    dcde:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    dce4:	|  |  |  |  |        |   move.l 1ca90 <DOSBase>,d0
    dcea:	|  |  |  |  |        |   movea.l d0,a6
    dcec:	|  |  |  |  |        |   move.l 62(sp),d1
    dcf0:	|  |  |  |  |        |   jsr -306(a6)
    dcf4:	|  |  |  |  |        |   move.l d0,58(sp)
    dcf8:	|  |  |  |  |        |   move.l 58(sp),d0
    dcfc:	|  |  |  |  |        |   move.l d0,-(sp)
    dcfe:	|  |  |  |  |        |   pea 1 <_start+0x1>
    dd02:	|  |  |  |  |        |   lea 18(sp),a0
    dd06:	|  |  |  |  |        |   move.l a0,-(sp)
    dd08:	|  |  |  |  |        |   jsr 151cc <setVariable>
    dd0e:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    dd12:	|  |  |  |  |        +-- bra.s dd6c <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    dd14:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    dd18:	|  |  |  |           |   pea 19788 <PutChar+0x19ac>
    dd1e:	|  |  |  |           |   jsr 1733a <KPrintF>
    dd24:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dd26:	|  |  |  |           |   move.l 100(sp),46(sp)
    dd2c:	|  |  |  |           |   move.l 1ca90 <DOSBase>,d0
    dd32:	|  |  |  |           |   movea.l d0,a6
    dd34:	|  |  |  |           |   move.l 46(sp),d1
    dd38:	|  |  |  |           |   jsr -36(a6)
    dd3c:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dd40:	|  |  |  |           |   clr.w d0
    dd42:	+--|--|--|-----------|-- bra.w ddfe <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    dd46:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    dd4a:	|  |  |              |   jsr dece <readTextPlain>
    dd50:	|  |  |              |   addq.l #4,sp
    dd52:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    dd56:	|  |  |        /-----|-- beq.w dde0 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    dd5a:	|  |  |        |     |   move.l 80(sp),-(sp)
    dd5e:	|  |  |        |     |   lea 14(sp),a0
    dd62:	|  |  |        |     |   move.l a0,-(sp)
    dd64:	|  |  |        |     |   jsr 14afc <makeTextVar>
    dd6a:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    dd6c:	|  |  |        |     \-> movea.l 128(sp),a0
    dd70:	|  |  |        |         move.l (a0),d0
    dd72:	|  |  |        |  /----- bne.s dda2 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    dd74:	|  |  |        |  |      move.l 128(sp),d0
    dd78:	|  |  |        |  |      move.l d0,-(sp)
    dd7a:	|  |  |        |  |      lea 14(sp),a0
    dd7e:	|  |  |        |  |      move.l a0,-(sp)
    dd80:	|  |  |        |  |      jsr 1419c <addVarToStackQuick>
    dd86:	|  |  |        |  |      addq.l #8,sp
    dd88:	|  |  |        |  |      tst.w d0
    dd8a:	|  |  |        |  |  /-- bne.s dd90 <fileToStack+0x2f6>
    dd8c:	|  |  |        |  |  |   clr.w d0
    dd8e:	+--|--|--------|--|--|-- bra.s ddfe <fileToStack+0x364>
            sH->last = sH->first;
    dd90:	|  |  |        |  |  \-> movea.l 128(sp),a0
    dd94:	|  |  |        |  |      move.l (a0),d0
    dd96:	|  |  |        |  |      movea.l 128(sp),a0
    dd9a:	|  |  |        |  |      move.l d0,4(a0)
    dd9e:	|  +--|--------|--|----- bra.w dc0c <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    dda2:	|  |  |        |  \----> movea.l 128(sp),a0
    dda6:	|  |  |        |         move.l 4(a0),d0
    ddaa:	|  |  |        |         addq.l #8,d0
    ddac:	|  |  |        |         move.l d0,-(sp)
    ddae:	|  |  |        |         lea 14(sp),a0
    ddb2:	|  |  |        |         move.l a0,-(sp)
    ddb4:	|  |  |        |         jsr 1419c <addVarToStackQuick>
    ddba:	|  |  |        |         addq.l #8,sp
    ddbc:	|  |  |        |         tst.w d0
    ddbe:	|  |  |        |     /-- bne.s ddc4 <fileToStack+0x32a>
    ddc0:	|  |  |        |     |   clr.w d0
    ddc2:	+--|--|--------|-----|-- bra.s ddfe <fileToStack+0x364>
            sH->last = sH->last->next;
    ddc4:	|  |  |        |     \-> movea.l 128(sp),a0
    ddc8:	|  |  |        |         movea.l 4(a0),a0
    ddcc:	|  |  |        |         move.l 8(a0),d0
    ddd0:	|  |  |        |         movea.l 128(sp),a0
    ddd4:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    ddd8:	|  \--|--------|-------- bra.w dc0c <fileToStack+0x172>
            if (tmp == -1) break;
    dddc:	|     \--------|-------> nop
    ddde:	|              |     /-- bra.s dde2 <fileToStack+0x348>
            if (!line) break;
    dde0:	|              \-----|-> nop
        }
    }
    Close(fp);
    dde2:	|                    \-> move.l 100(sp),38(sp)
    dde8:	|                        move.l 1ca90 <DOSBase>,d0
    ddee:	|                        movea.l d0,a6
    ddf0:	|                        move.l 38(sp),d1
    ddf4:	|                        jsr -36(a6)
    ddf8:	|                        move.l d0,34(sp)
    return TRUE;
    ddfc:	|                        moveq #1,d0
}
    ddfe:	\----------------------> move.l (sp)+,d2
    de00:	                         movea.l (sp)+,a6
    de02:	                         lea 112(sp),sp
    de06:	                         rts

0000de08 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    de08:	          lea -32(sp),sp
    de0c:	          move.l a6,-(sp)
    de0e:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    de10:	          move.l 44(sp),-(sp)
    de14:	          jsr 6bc <get2bytes>
    de1a:	          addq.l #4,sp
    de1c:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    de20:	          move.l 32(sp),d0
    de24:	          addq.l #1,d0
    de26:	          move.l d0,28(sp)
    de2a:	          clr.l 24(sp)
    de2e:	          move.l 1ca88 <SysBase>,d0
    de34:	          movea.l d0,a6
    de36:	          move.l 28(sp),d0
    de3a:	          move.l 24(sp),d1
    de3e:	          jsr -684(a6)
    de42:	          move.l d0,20(sp)
    de46:	          move.l 20(sp),d0
    de4a:	          move.l d0,16(sp)
    if (!s) return NULL;
    de4e:	      /-- bne.s de54 <readStringEncoded+0x4c>
    de50:	      |   moveq #0,d0
    de52:	/-----|-- bra.s dec4 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    de54:	|     \-> clr.l 36(sp)
    de58:	|     /-- bra.s deaa <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    de5a:	|  /--|-> move.l 44(sp),12(sp)
    de60:	|  |  |   move.l 1ca90 <DOSBase>,d0
    de66:	|  |  |   movea.l d0,a6
    de68:	|  |  |   move.l 12(sp),d1
    de6c:	|  |  |   jsr -306(a6)
    de70:	|  |  |   move.l d0,8(sp)
    de74:	|  |  |   move.l 8(sp),d0
    de78:	|  |  |   move.l d0,d1
    de7a:	|  |  |   move.b 1cb3e <encode1>,d2
    de80:	|  |  |   move.l 36(sp),d0
    de84:	|  |  |   movea.l 16(sp),a0
    de88:	|  |  |   adda.l d0,a0
    de8a:	|  |  |   move.b d1,d0
    de8c:	|  |  |   eor.b d2,d0
    de8e:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    de90:	|  |  |   move.b 1cb3e <encode1>,d0
    de96:	|  |  |   move.b d0,d1
    de98:	|  |  |   move.b 1cb3f <encode2>,d0
    de9e:	|  |  |   add.b d1,d0
    dea0:	|  |  |   move.b d0,1cb3e <encode1>
    for (a = 0; a < len; a++) {
    dea6:	|  |  |   addq.l #1,36(sp)
    deaa:	|  |  \-> move.l 36(sp),d0
    deae:	|  |      cmp.l 32(sp),d0
    deb2:	|  \----- blt.s de5a <readStringEncoded+0x52>
    }
    s[len] = 0;
    deb4:	|         move.l 32(sp),d0
    deb8:	|         movea.l 16(sp),a0
    debc:	|         adda.l d0,a0
    debe:	|         clr.b (a0)
    return s;
    dec0:	|         move.l 16(sp),d0
}
    dec4:	\-------> move.l (sp)+,d2
    dec6:	          movea.l (sp)+,a6
    dec8:	          lea 32(sp),sp
    decc:	          rts

0000dece <readTextPlain>:

char *readTextPlain(BPTR fp) {
    dece:	             lea -104(sp),sp
    ded2:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    ded6:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    deda:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    dee0:	             move.l 124(sp),106(sp)
    dee6:	             clr.l 102(sp)
    deea:	             clr.l 98(sp)
    deee:	             move.l 1ca90 <DOSBase>,d0
    def4:	             movea.l d0,a6
    def6:	             move.l 106(sp),d1
    defa:	             move.l 102(sp),d2
    defe:	             move.l 98(sp),d3
    df02:	             jsr -66(a6)
    df06:	             move.l d0,94(sp)
    df0a:	             move.l 94(sp),d0
    df0e:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    df12:	   /-------- bra.s df56 <readTextPlain+0x88>
        tmp = FGetC(fp);
    df14:	/--|-------> move.l 124(sp),22(sp)
    df1a:	|  |         move.l 1ca90 <DOSBase>,d0
    df20:	|  |         movea.l d0,a6
    df22:	|  |         move.l 22(sp),d1
    df26:	|  |         jsr -306(a6)
    df2a:	|  |         move.l d0,18(sp)
    df2e:	|  |         move.l 18(sp),d0
    df32:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    df36:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    df3c:	|  |         cmpi.b #10,17(sp)
    df42:	|  |  /----- beq.s df4c <readTextPlain+0x7e>
    df44:	|  |  |      moveq #-1,d0
    df46:	|  |  |      cmp.l 110(sp),d0
    df4a:	|  |  |  /-- bne.s df52 <readTextPlain+0x84>
            keepGoing = FALSE;
    df4c:	|  |  \--|-> clr.w 114(sp)
    df50:	|  +-----|-- bra.s df56 <readTextPlain+0x88>
        } else {
            stringSize++;
    df52:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    df56:	|  \-------> tst.w 114(sp)
    df5a:	\----------- bne.s df14 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    df5c:	             tst.l 116(sp)
    df60:	         /-- bne.s df70 <readTextPlain+0xa2>
    df62:	         |   moveq #-1,d0
    df64:	         |   cmp.l 110(sp),d0
    df68:	         +-- bne.s df70 <readTextPlain+0xa2>
        return NULL;
    df6a:	         |   moveq #0,d0
    df6c:	      /--|-- bra.w e056 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    df70:	      |  \-> move.l 124(sp),86(sp)
    df76:	      |      move.l 90(sp),82(sp)
    df7c:	      |      moveq #-1,d0
    df7e:	      |      move.l d0,78(sp)
    df82:	      |      move.l 1ca90 <DOSBase>,d0
    df88:	      |      movea.l d0,a6
    df8a:	      |      move.l 86(sp),d1
    df8e:	      |      move.l 82(sp),d2
    df92:	      |      move.l 78(sp),d3
    df96:	      |      jsr -66(a6)
    df9a:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    df9e:	      |      move.l 116(sp),d0
    dfa2:	      |      addq.l #1,d0
    dfa4:	      |      move.l d0,70(sp)
    dfa8:	      |      clr.l 66(sp)
    dfac:	      |      move.l 1ca88 <SysBase>,d0
    dfb2:	      |      movea.l d0,a6
    dfb4:	      |      move.l 70(sp),d0
    dfb8:	      |      move.l 66(sp),d1
    dfbc:	      |      jsr -684(a6)
    dfc0:	      |      move.l d0,62(sp)
    dfc4:	      |      move.l 62(sp),d0
    dfc8:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    dfcc:	      |  /-- bne.s dfd4 <readTextPlain+0x106>
    dfce:	      |  |   moveq #0,d0
    dfd0:	      +--|-- bra.w e056 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    dfd4:	      |  \-> move.l 124(sp),54(sp)
    dfda:	      |      move.l 58(sp),50(sp)
    dfe0:	      |      moveq #1,d0
    dfe2:	      |      move.l d0,46(sp)
    dfe6:	      |      move.l 116(sp),42(sp)
    dfec:	      |      move.l 1ca90 <DOSBase>,d0
    dff2:	      |      movea.l d0,a6
    dff4:	      |      move.l 54(sp),d1
    dff8:	      |      move.l 50(sp),d2
    dffc:	      |      move.l 46(sp),d3
    e000:	      |      move.l 42(sp),d4
    e004:	      |      jsr -324(a6)
    e008:	      |      move.l d0,38(sp)
    e00c:	      |      move.l 38(sp),d0
    e010:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    e014:	      |      move.l 34(sp),d0
    e018:	      |      cmp.l 116(sp),d0
    e01c:	      |  /-- beq.s e02c <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    e01e:	      |  |   pea 197bd <PutChar+0x19e1>
    e024:	      |  |   jsr 1733a <KPrintF>
    e02a:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    e02c:	      |  \-> move.l 124(sp),30(sp)
    e032:	      |      move.l 1ca90 <DOSBase>,d0
    e038:	      |      movea.l d0,a6
    e03a:	      |      move.l 30(sp),d1
    e03e:	      |      jsr -306(a6)
    e042:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    e046:	      |      move.l 116(sp),d0
    e04a:	      |      movea.l 58(sp),a0
    e04e:	      |      adda.l d0,a0
    e050:	      |      clr.b (a0)
    }

    return reply;
    e052:	      |      move.l 58(sp),d0
}
    e056:	      \----> movem.l (sp)+,d2-d4/a6
    e05a:	             lea 104(sp),sp
    e05e:	             rts

0000e060 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e060:	                      lea -144(sp),sp
    e064:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e068:	                      move.l 160(sp),148(sp)
    e06e:	                      move.l #1006,144(sp)
    e076:	                      move.l 1ca90 <DOSBase>,d0
    e07c:	                      movea.l d0,a6
    e07e:	                      move.l 148(sp),d1
    e082:	                      move.l 144(sp),d2
    e086:	                      jsr -30(a6)
    e08a:	                      move.l d0,140(sp)
    e08e:	                      move.l 140(sp),d0
    e092:	                      move.l d0,136(sp)

    if (!fp) {
    e096:	                  /-- bne.s e0b0 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e098:	                  |   move.l 160(sp),-(sp)
    e09c:	                  |   pea 197de <PutChar+0x1a02>
    e0a2:	                  |   jsr 1733a <KPrintF>
    e0a8:	                  |   addq.l #8,sp
        return FALSE;
    e0aa:	                  |   clr.w d0
    e0ac:	/-----------------|-- bra.w e36c <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e0b0:	|                 \-> movea.l 164(sp),a0
    e0b4:	|                     movea.l 4(a0),a0
    e0b8:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e0bc:	|                     move.w 1cb40 <saveEncoding>,d0
    e0c2:	|                     move.l d0,d0
    e0c4:	|                     move.b d0,1cb3e <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e0ca:	|                     move.w 1cb40 <saveEncoding>,d0
    e0d0:	|                     lsr.w #8,d0
    e0d2:	|                     move.l d0,d0
    e0d4:	|                     move.b d0,1cb3f <encode2>

    if (saveEncoding) {
    e0da:	|                     move.w 1cb40 <saveEncoding>,d0
    e0e0:	|                 /-- beq.s e132 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    e0e2:	|                 |   move.l 136(sp),116(sp)
    e0e8:	|                 |   move.l #104056,112(sp)
    e0f0:	|                 |   moveq #99,d0
    e0f2:	|                 |   not.b d0
    e0f4:	|                 |   add.l sp,d0
    e0f6:	|                 |   addi.l #-144,d0
    e0fc:	|                 |   move.l d0,108(sp)
    e100:	|                 |   move.l 1ca90 <DOSBase>,d0
    e106:	|                 |   movea.l d0,a6
    e108:	|                 |   move.l 116(sp),d1
    e10c:	|                 |   move.l 112(sp),d2
    e110:	|                 |   move.l 108(sp),d3
    e114:	|                 |   jsr -354(a6)
    e118:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e11c:	|                 |   move.l 136(sp),-(sp)
    e120:	|                 |   pea 196f7 <PutChar+0x191b>
    e126:	|                 |   jsr e376 <writeStringEncoded>
    e12c:	|                 |   addq.l #8,sp
    e12e:	|  /--------------|-- bra.w e344 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e132:	|  |              \-> move.l 136(sp),132(sp)
    e138:	|  |                  move.l #104082,128(sp)
    e140:	|  |                  moveq #99,d1
    e142:	|  |                  not.b d1
    e144:	|  |                  add.l sp,d1
    e146:	|  |                  addi.l #-144,d1
    e14c:	|  |                  move.l d1,124(sp)
    e150:	|  |                  move.l 1ca90 <DOSBase>,d0
    e156:	|  |                  movea.l d0,a6
    e158:	|  |                  move.l 132(sp),d1
    e15c:	|  |                  move.l 128(sp),d2
    e160:	|  |                  move.l 124(sp),d3
    e164:	|  |                  jsr -354(a6)
    e168:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e16c:	|  +----------------- bra.w e344 <stackToFile+0x2e4>
        if (saveEncoding) {
    e170:	|  |  /-------------> move.w 1cb40 <saveEncoding>,d0
    e176:	|  |  |     /-------- beq.w e2c8 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e17a:	|  |  |     |         movea.l 152(sp),a0
    e17e:	|  |  |     |         move.l (a0),d0
    e180:	|  |  |     |         moveq #1,d1
    e182:	|  |  |     |         cmp.l d0,d1
    e184:	|  |  |     |     /-- beq.s e1d4 <stackToFile+0x174>
    e186:	|  |  |     |     |   moveq #3,d1
    e188:	|  |  |     |     |   cmp.l d0,d1
    e18a:	|  |  |     |  /--|-- bne.w e296 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e18e:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e194:	|  |  |     |  |  |   move.b 1cb3e <encode1>,d0
    e19a:	|  |  |     |  |  |   ext.w d0
    e19c:	|  |  |     |  |  |   movea.w d0,a0
    e19e:	|  |  |     |  |  |   move.l a0,72(sp)
    e1a2:	|  |  |     |  |  |   move.l 1ca90 <DOSBase>,d0
    e1a8:	|  |  |     |  |  |   movea.l d0,a6
    e1aa:	|  |  |     |  |  |   move.l 76(sp),d1
    e1ae:	|  |  |     |  |  |   move.l 72(sp),d2
    e1b2:	|  |  |     |  |  |   jsr -312(a6)
    e1b6:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e1ba:	|  |  |     |  |  |   movea.l 152(sp),a0
    e1be:	|  |  |     |  |  |   move.l 4(a0),d0
    e1c2:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e1c6:	|  |  |     |  |  |   move.l d0,-(sp)
    e1c8:	|  |  |     |  |  |   jsr e376 <writeStringEncoded>
    e1ce:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e1d0:	|  |  |  /--|--|--|-- bra.w e33a <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e1d4:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    e1d8:	|  |  |  |  |  |      move.l 4(a0),d0
    e1dc:	|  |  |  |  |  |  /-- bmi.s e24c <stackToFile+0x1ec>
    e1de:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e1e2:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e1e6:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e1ec:	|  |  |  |  |  |  +-- bgt.s e24c <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e1ee:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e1f4:	|  |  |  |  |  |  |   move.b 1cb3e <encode1>,d0
    e1fa:	|  |  |  |  |  |  |   eori.b #2,d0
    e1fe:	|  |  |  |  |  |  |   ext.w d0
    e200:	|  |  |  |  |  |  |   movea.w d0,a0
    e202:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e206:	|  |  |  |  |  |  |   move.l 1ca90 <DOSBase>,d0
    e20c:	|  |  |  |  |  |  |   movea.l d0,a6
    e20e:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e212:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e216:	|  |  |  |  |  |  |   jsr -312(a6)
    e21a:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e21e:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e224:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e228:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e22e:	|  |  |  |  |  |  |   move.l 1ca90 <DOSBase>,d0
    e234:	|  |  |  |  |  |  |   movea.l d0,a6
    e236:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e23a:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e23e:	|  |  |  |  |  |  |   jsr -312(a6)
    e242:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e246:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e248:	|  |  |  +--|--|--|-- bra.w e33a <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e24c:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    e252:	|  |  |  |  |  |      move.b 1cb3e <encode1>,d0
    e258:	|  |  |  |  |  |      eori.b #1,d0
    e25c:	|  |  |  |  |  |      ext.w d0
    e25e:	|  |  |  |  |  |      movea.w d0,a0
    e260:	|  |  |  |  |  |      move.l a0,36(sp)
    e264:	|  |  |  |  |  |      move.l 1ca90 <DOSBase>,d0
    e26a:	|  |  |  |  |  |      movea.l d0,a6
    e26c:	|  |  |  |  |  |      move.l 40(sp),d1
    e270:	|  |  |  |  |  |      move.l 36(sp),d2
    e274:	|  |  |  |  |  |      jsr -312(a6)
    e278:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e27c:	|  |  |  |  |  |      movea.l 152(sp),a0
    e280:	|  |  |  |  |  |      move.l 4(a0),d0
    e284:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e288:	|  |  |  |  |  |      move.l d0,-(sp)
    e28a:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e290:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e292:	|  |  |  +--|--|----- bra.w e33a <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e296:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    e29a:	|  |  |  |  |         pea 197f0 <PutChar+0x1a14>
    e2a0:	|  |  |  |  |         jsr 1733a <KPrintF>
    e2a6:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e2a8:	|  |  |  |  |         move.l 136(sp),28(sp)
    e2ae:	|  |  |  |  |         move.l 1ca90 <DOSBase>,d0
    e2b4:	|  |  |  |  |         movea.l d0,a6
    e2b6:	|  |  |  |  |         move.l 28(sp),d1
    e2ba:	|  |  |  |  |         jsr -36(a6)
    e2be:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e2c2:	|  |  |  |  |         clr.w d0
    e2c4:	+--|--|--|--|-------- bra.w e36c <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e2c8:	|  |  |  |  \-------> move.l 152(sp),d0
    e2cc:	|  |  |  |            move.l d0,-(sp)
    e2ce:	|  |  |  |            jsr 14eb0 <getTextFromAnyVar>
    e2d4:	|  |  |  |            addq.l #4,sp
    e2d6:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e2da:	|  |  |  |     /----- beq.s e34e <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e2dc:	|  |  |  |     |      movea.l 100(sp),a0
    e2e0:	|  |  |  |     |      move.b (a0),d0
    e2e2:	|  |  |  |     |      ext.w d0
    e2e4:	|  |  |  |     |      movea.w d0,a0
    e2e6:	|  |  |  |     |      move.l a0,12(sp)
    e2ea:	|  |  |  |     |      move.l 136(sp),96(sp)
    e2f0:	|  |  |  |     |      move.l #104524,92(sp)
    e2f8:	|  |  |  |     |      moveq #99,d0
    e2fa:	|  |  |  |     |      not.b d0
    e2fc:	|  |  |  |     |      add.l sp,d0
    e2fe:	|  |  |  |     |      addi.l #-144,d0
    e304:	|  |  |  |     |      move.l d0,88(sp)
    e308:	|  |  |  |     |      move.l 1ca90 <DOSBase>,d0
    e30e:	|  |  |  |     |      movea.l d0,a6
    e310:	|  |  |  |     |      move.l 96(sp),d1
    e314:	|  |  |  |     |      move.l 92(sp),d2
    e318:	|  |  |  |     |      move.l 88(sp),d3
    e31c:	|  |  |  |     |      jsr -354(a6)
    e320:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e324:	|  |  |  |     |      move.l 100(sp),80(sp)
    e32a:	|  |  |  |     |      move.l 1ca88 <SysBase>,d0
    e330:	|  |  |  |     |      movea.l d0,a6
    e332:	|  |  |  |     |      movea.l 80(sp),a1
    e336:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e33a:	|  |  |  \-----|----> movea.l 152(sp),a0
    e33e:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e344:	|  \--|--------|----> tst.l 152(sp)
    e348:	|     \--------|----- bne.w e170 <stackToFile+0x110>
    e34c:	|              |  /-- bra.s e350 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e34e:	|              \--|-> nop
    }
    Close(fp);
    e350:	|                 \-> move.l 136(sp),20(sp)
    e356:	|                     move.l 1ca90 <DOSBase>,d0
    e35c:	|                     movea.l d0,a6
    e35e:	|                     move.l 20(sp),d1
    e362:	|                     jsr -36(a6)
    e366:	|                     move.l d0,16(sp)
    return TRUE;
    e36a:	|                     moveq #1,d0
}
    e36c:	\-------------------> movem.l (sp)+,d2-d3/a6
    e370:	                      lea 144(sp),sp
    e374:	                      rts

0000e376 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e376:	       lea -20(sp),sp
    e37a:	       move.l a6,-(sp)
    e37c:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e37e:	       move.l 32(sp),-(sp)
    e382:	       jsr 13dc6 <strlen>
    e388:	       addq.l #4,sp
    e38a:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e38e:	       move.l 36(sp),-(sp)
    e392:	       move.l 24(sp),-(sp)
    e396:	       jsr 8d0 <put2bytes>
    e39c:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e39e:	       clr.l 24(sp)
    e3a2:	   /-- bra.s e3f8 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e3a4:	/--|-> move.l 36(sp),16(sp)
    e3aa:	|  |   move.l 24(sp),d0
    e3ae:	|  |   movea.l 32(sp),a0
    e3b2:	|  |   adda.l d0,a0
    e3b4:	|  |   move.b (a0),d1
    e3b6:	|  |   move.b 1cb3e <encode1>,d0
    e3bc:	|  |   eor.b d1,d0
    e3be:	|  |   ext.w d0
    e3c0:	|  |   movea.w d0,a0
    e3c2:	|  |   move.l a0,12(sp)
    e3c6:	|  |   move.l 1ca90 <DOSBase>,d0
    e3cc:	|  |   movea.l d0,a6
    e3ce:	|  |   move.l 16(sp),d1
    e3d2:	|  |   move.l 12(sp),d2
    e3d6:	|  |   jsr -312(a6)
    e3da:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e3de:	|  |   move.b 1cb3e <encode1>,d0
    e3e4:	|  |   move.b d0,d1
    e3e6:	|  |   move.b 1cb3f <encode2>,d0
    e3ec:	|  |   add.b d1,d0
    e3ee:	|  |   move.b d0,1cb3e <encode1>
	for (a = 0; a < len; a ++) {
    e3f4:	|  |   addq.l #1,24(sp)
    e3f8:	|  \-> move.l 24(sp),d0
    e3fc:	|      cmp.l 20(sp),d0
    e400:	\----- blt.s e3a4 <writeStringEncoded+0x2e>
	}
}
    e402:	       nop
    e404:	       nop
    e406:	       move.l (sp)+,d2
    e408:	       movea.l (sp)+,a6
    e40a:	       lea 20(sp),sp
    e40e:	       rts

0000e410 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e410:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e412:	                   tst.l 8(sp)
    e416:	               /-- bne.s e41c <failSecurityCheck+0xc>
    e418:	               |   moveq #1,d0
    e41a:	/--------------|-- bra.s e49a <failSecurityCheck+0x8a>

	int a = 0;
    e41c:	|              \-> clr.l (sp)

	while (fn[a]) {
    e41e:	|     /----------- bra.s e48c <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e420:	|  /--|----------> move.l (sp),d0
    e422:	|  |  |            movea.l 8(sp),a0
    e426:	|  |  |            adda.l d0,a0
    e428:	|  |  |            move.b (a0),d0
    e42a:	|  |  |            ext.w d0
    e42c:	|  |  |            movea.w d0,a0
    e42e:	|  |  |            moveq #124,d0
    e430:	|  |  |            cmp.l a0,d0
    e432:	|  |  |     /----- beq.s e474 <failSecurityCheck+0x64>
    e434:	|  |  |     |      moveq #124,d1
    e436:	|  |  |     |      cmp.l a0,d1
    e438:	|  |  |  /--|----- blt.s e48a <failSecurityCheck+0x7a>
    e43a:	|  |  |  |  |      moveq #92,d0
    e43c:	|  |  |  |  |      cmp.l a0,d0
    e43e:	|  |  |  |  +----- beq.s e474 <failSecurityCheck+0x64>
    e440:	|  |  |  |  |      moveq #92,d1
    e442:	|  |  |  |  |      cmp.l a0,d1
    e444:	|  |  |  +--|----- blt.s e48a <failSecurityCheck+0x7a>
    e446:	|  |  |  |  |      moveq #60,d0
    e448:	|  |  |  |  |      cmp.l a0,d0
    e44a:	|  |  |  |  |  /-- blt.s e46a <failSecurityCheck+0x5a>
    e44c:	|  |  |  |  |  |   moveq #34,d1
    e44e:	|  |  |  |  |  |   cmp.l a0,d1
    e450:	|  |  |  +--|--|-- bgt.s e48a <failSecurityCheck+0x7a>
    e452:	|  |  |  |  |  |   moveq #-34,d1
    e454:	|  |  |  |  |  |   add.l a0,d1
    e456:	|  |  |  |  |  |   move.l #83894529,d0
    e45c:	|  |  |  |  |  |   lsr.l d1,d0
    e45e:	|  |  |  |  |  |   moveq #1,d1
    e460:	|  |  |  |  |  |   and.l d1,d0
    e462:	|  |  |  |  |  |   sne d0
    e464:	|  |  |  |  |  |   neg.b d0
    e466:	|  |  |  |  +--|-- bne.s e474 <failSecurityCheck+0x64>
    e468:	|  |  |  +--|--|-- bra.s e48a <failSecurityCheck+0x7a>
    e46a:	|  |  |  |  |  \-> lea -62(a0),a0
    e46e:	|  |  |  |  |      moveq #1,d0
    e470:	|  |  |  |  |      cmp.l a0,d0
    e472:	|  |  |  +--|----- bcs.s e48a <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e474:	|  |  |  |  \----> move.l 8(sp),-(sp)
    e478:	|  |  |  |         pea 19850 <PutChar+0x1a74>
    e47e:	|  |  |  |         jsr 1733a <KPrintF>
    e484:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e486:	|  |  |  |         moveq #1,d0
    e488:	+--|--|--|-------- bra.s e49a <failSecurityCheck+0x8a>
		}
		a++;
    e48a:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    e48c:	|  |  \----------> move.l (sp),d0
    e48e:	|  |               movea.l 8(sp),a0
    e492:	|  |               adda.l d0,a0
    e494:	|  |               move.b (a0),d0
    e496:	|  \-------------- bne.s e420 <failSecurityCheck+0x10>
	}
	return FALSE;
    e498:	|                  clr.w d0
}
    e49a:	\----------------> addq.l #4,sp
    e49c:	                   rts

0000e49e <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e49e:	             lea -24(sp),sp
    e4a2:	             move.l a6,-(sp)
    e4a4:	             move.l 40(sp),d0
    e4a8:	             move.w d0,d0
    e4aa:	             move.w d0,6(sp)
	int fileNum = -1;
    e4ae:	             moveq #-1,d0
    e4b0:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e4b4:	             jsr 6294 <killSpeechTimers>

	switch (numParams) {
    e4ba:	             moveq #2,d0
    e4bc:	             cmp.l 32(sp),d0
    e4c0:	      /----- beq.s e504 <sayCore+0x66>
    e4c2:	      |      moveq #3,d0
    e4c4:	      |      cmp.l 32(sp),d0
    e4c8:	/-----|----- bne.w e5e6 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e4cc:	|     |      movea.l 36(sp),a0
    e4d0:	|     |      move.l 24(a0),d0
    e4d4:	|     |      move.l d0,-(sp)
    e4d6:	|     |      pea 5 <_start+0x5>
    e4da:	|     |      lea 20(sp),a0
    e4de:	|     |      move.l a0,-(sp)
    e4e0:	|     |      jsr 148da <getValueType>
    e4e6:	|     |      lea 12(sp),sp
    e4ea:	|     |      tst.w d0
    e4ec:	|     |  /-- bne.s e4f4 <sayCore+0x56>
    e4ee:	|     |  |   moveq #1,d0
    e4f0:	|  /--|--|-- bra.w e5f6 <sayCore+0x158>
			trimStack (&fun -> stack);
    e4f4:	|  |  |  \-> moveq #24,d0
    e4f6:	|  |  |      add.l 36(sp),d0
    e4fa:	|  |  |      move.l d0,-(sp)
    e4fc:	|  |  |      jsr 1525e <trimStack>
    e502:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e504:	|  |  \----> movea.l 36(sp),a0
    e508:	|  |         move.l 24(a0),d0
    e50c:	|  |         move.l d0,-(sp)
    e50e:	|  |         jsr 14eb0 <getTextFromAnyVar>
    e514:	|  |         addq.l #4,sp
    e516:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e51a:	|  |     /-- bne.s e522 <sayCore+0x84>
    e51c:	|  |     |   moveq #1,d0
    e51e:	|  +-----|-- bra.w e5f6 <sayCore+0x158>
			trimStack (&fun -> stack);
    e522:	|  |     \-> moveq #24,d0
    e524:	|  |         add.l 36(sp),d0
    e528:	|  |         move.l d0,-(sp)
    e52a:	|  |         jsr 1525e <trimStack>
    e530:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e532:	|  |         movea.l 36(sp),a0
    e536:	|  |         move.l 24(a0),d0
    e53a:	|  |         move.l d0,-(sp)
    e53c:	|  |         pea 7 <_start+0x7>
    e540:	|  |         lea 16(sp),a0
    e544:	|  |         move.l a0,-(sp)
    e546:	|  |         jsr 148da <getValueType>
    e54c:	|  |         lea 12(sp),sp
    e550:	|  |         tst.w d0
    e552:	|  |     /-- bne.s e55a <sayCore+0xbc>
    e554:	|  |     |   moveq #1,d0
    e556:	|  +-----|-- bra.w e5f6 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e55a:	|  |     \-> movea.l 36(sp),a0
    e55e:	|  |         move.l 24(a0),d0
    e562:	|  |         move.l d0,-(sp)
    e564:	|  |         pea 7 <_start+0x7>
    e568:	|  |         lea 16(sp),a0
    e56c:	|  |         move.l a0,-(sp)
    e56e:	|  |         jsr 148da <getValueType>
    e574:	|  |         lea 12(sp),sp
    e578:	|  |         tst.w d0
    e57a:	|  |     /-- bne.s e580 <sayCore+0xe2>
    e57c:	|  |     |   moveq #1,d0
    e57e:	|  +-----|-- bra.s e5f6 <sayCore+0x158>
			trimStack (&fun -> stack);
    e580:	|  |     \-> moveq #24,d0
    e582:	|  |         add.l 36(sp),d0
    e586:	|  |         move.l d0,-(sp)
    e588:	|  |         jsr 1525e <trimStack>
    e58e:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e590:	|  |         movea.w 6(sp),a0
    e594:	|  |         move.l 12(sp),d1
    e598:	|  |         move.l 8(sp),d0
    e59c:	|  |         move.l a0,-(sp)
    e59e:	|  |         move.l d1,-(sp)
    e5a0:	|  |         move.l d0,-(sp)
    e5a2:	|  |         move.l 36(sp),-(sp)
    e5a6:	|  |         jsr 824e <wrapSpeech>
    e5ac:	|  |         lea 16(sp),sp
    e5b0:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e5b4:	|  |         movea.l 36(sp),a0
    e5b8:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e5be:	|  |         movea.l 36(sp),a0
    e5c2:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e5c8:	|  |         move.l 24(sp),16(sp)
    e5ce:	|  |         move.l 1ca88 <SysBase>,d0
    e5d4:	|  |         movea.l d0,a6
    e5d6:	|  |         movea.l 16(sp),a1
    e5da:	|  |         jsr -690(a6)
			newText = NULL;
    e5de:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e5e2:	|  |         moveq #0,d0
    e5e4:	|  +-------- bra.s e5f6 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e5e6:	\--|-------> pea 198d6 <PutChar+0x1afa>
    e5ec:	   |         jsr 1733a <KPrintF>
    e5f2:	   |         addq.l #4,sp
	return BR_ERROR;
    e5f4:	   |         moveq #1,d0
}
    e5f6:	   \-------> movea.l (sp)+,a6
    e5f8:	             lea 24(sp),sp
    e5fc:	             rts

0000e5fe <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e5fe:	pea 1 <_start+0x1>
    e602:	move.l 12(sp),-(sp)
    e606:	move.l 12(sp),-(sp)
    e60a:	jsr e49e <sayCore>
    e610:	lea 12(sp),sp
}
    e614:	rts

0000e616 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e616:	clr.l -(sp)
    e618:	move.l 12(sp),-(sp)
    e61c:	move.l 12(sp),-(sp)
    e620:	jsr e49e <sayCore>
    e626:	lea 12(sp),sp
}
    e62a:	rts

0000e62c <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e62c:	jsr 152a6 <freeze>
	freezeSubs (); 
    e632:	jsr 5884 <freezeSubs>
	fun -> freezerLevel = 0;
    e638:	movea.l 8(sp),a0
    e63c:	clr.b 56(a0)
	return BR_CONTINUE;
    e640:	moveq #2,d0
}
    e642:	rts

0000e644 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e644:	jsr 154a2 <unfreeze>
	unfreezeSubs (); 
    e64a:	jsr 6cd6 <unfreezeSubs>
	return BR_CONTINUE;
    e650:	moveq #2,d0
}
    e652:	rts

0000e654 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e654:	jsr 1547e <howFrozen>
    e65a:	move.l d0,d1
    e65c:	moveq #28,d0
    e65e:	add.l 8(sp),d0
    e662:	move.l d1,-(sp)
    e664:	pea 1 <_start+0x1>
    e668:	move.l d0,-(sp)
    e66a:	jsr 151cc <setVariable>
    e670:	lea 12(sp),sp
	return BR_CONTINUE; 
    e674:	moveq #2,d0
}
    e676:	rts

0000e678 <builtIn_setCursor>:

builtIn(setCursor)
{
    e678:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e67a:	movea.l 12(sp),a0
    e67e:	move.l 24(a0),d0
    e682:	move.l d0,-(sp)
    e684:	jsr 14db2 <getAnimationFromVar>
    e68a:	addq.l #4,sp
    e68c:	move.l d0,(sp)
	pickAnimCursor (aa);
    e68e:	move.l (sp),-(sp)
    e690:	jsr d6c <pickAnimCursor>
    e696:	addq.l #4,sp
	trimStack (&fun -> stack);
    e698:	moveq #24,d0
    e69a:	add.l 12(sp),d0
    e69e:	move.l d0,-(sp)
    e6a0:	jsr 1525e <trimStack>
    e6a6:	addq.l #4,sp
	return BR_CONTINUE;
    e6a8:	moveq #2,d0
}
    e6aa:	addq.l #4,sp
    e6ac:	rts

0000e6ae <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e6ae:	move.l 1ca44 <input+0xa>,d1
    e6b4:	move.l 1cb42 <cameraX>,d0
    e6ba:	add.l d0,d1
    e6bc:	moveq #28,d0
    e6be:	add.l 8(sp),d0
    e6c2:	move.l d1,-(sp)
    e6c4:	pea 1 <_start+0x1>
    e6c8:	move.l d0,-(sp)
    e6ca:	jsr 151cc <setVariable>
    e6d0:	lea 12(sp),sp
	return BR_CONTINUE;
    e6d4:	moveq #2,d0
}
    e6d6:	rts

0000e6d8 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e6d8:	move.l 1ca48 <input+0xe>,d1
    e6de:	move.l 1cb46 <cameraY>,d0
    e6e4:	add.l d0,d1
    e6e6:	moveq #28,d0
    e6e8:	add.l 8(sp),d0
    e6ec:	move.l d1,-(sp)
    e6ee:	pea 1 <_start+0x1>
    e6f2:	move.l d0,-(sp)
    e6f4:	jsr 151cc <setVariable>
    e6fa:	lea 12(sp),sp
	return BR_CONTINUE;
    e6fe:	moveq #2,d0
}
    e700:	rts

0000e702 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e702:	move.l 1ca44 <input+0xa>,d0
    e708:	move.l d0,-(sp)
    e70a:	jsr 1776c <__floatsisf>
    e710:	addq.l #4,sp
    e712:	move.l d0,d1
    e714:	move.l 1c426 <cameraZoom>,d0
    e71a:	move.l d0,-(sp)
    e71c:	move.l d1,-(sp)
    e71e:	jsr 1781e <__mulsf3>
    e724:	addq.l #8,sp
    e726:	move.l d0,-(sp)
    e728:	jsr 17704 <__fixsfsi>
    e72e:	addq.l #4,sp
    e730:	move.l d0,d1
    e732:	moveq #28,d0
    e734:	add.l 8(sp),d0
    e738:	move.l d1,-(sp)
    e73a:	pea 1 <_start+0x1>
    e73e:	move.l d0,-(sp)
    e740:	jsr 151cc <setVariable>
    e746:	lea 12(sp),sp
	return BR_CONTINUE;
    e74a:	moveq #2,d0
}
    e74c:	rts

0000e74e <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e74e:	move.l 1ca48 <input+0xe>,d0
    e754:	move.l d0,-(sp)
    e756:	jsr 1776c <__floatsisf>
    e75c:	addq.l #4,sp
    e75e:	move.l d0,d1
    e760:	move.l 1c426 <cameraZoom>,d0
    e766:	move.l d0,-(sp)
    e768:	move.l d1,-(sp)
    e76a:	jsr 1781e <__mulsf3>
    e770:	addq.l #8,sp
    e772:	move.l d0,-(sp)
    e774:	jsr 17704 <__fixsfsi>
    e77a:	addq.l #4,sp
    e77c:	move.l d0,d1
    e77e:	moveq #28,d0
    e780:	add.l 8(sp),d0
    e784:	move.l d1,-(sp)
    e786:	pea 1 <_start+0x1>
    e78a:	move.l d0,-(sp)
    e78c:	jsr 151cc <setVariable>
    e792:	lea 12(sp),sp
	return BR_CONTINUE;
    e796:	moveq #2,d0
}
    e798:	rts

0000e79a <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e79a:	jsr 7d02 <statusBarText>
    e7a0:	move.l d0,d1
    e7a2:	moveq #28,d0
    e7a4:	add.l 8(sp),d0
    e7a8:	move.l d1,-(sp)
    e7aa:	move.l d0,-(sp)
    e7ac:	jsr 14afc <makeTextVar>
    e7b2:	addq.l #8,sp
	return BR_CONTINUE;
    e7b4:	moveq #2,d0
}
    e7b6:	rts

0000e7b8 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e7b8:	       lea -20(sp),sp
    e7bc:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e7be:	       movea.l 32(sp),a0
    e7c2:	       move.l 24(a0),d0
    e7c6:	       move.l d0,-(sp)
    e7c8:	       jsr 14eb0 <getTextFromAnyVar>
    e7ce:	       addq.l #4,sp
    e7d0:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e7d4:	   /-- bne.s e7dc <builtIn_getMatchingFiles+0x24>
    e7d6:	   |   moveq #1,d0
    e7d8:	/--|-- bra.w e89e <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e7dc:	|  \-> moveq #24,d0
    e7de:	|      add.l 32(sp),d0
    e7e2:	|      move.l d0,-(sp)
    e7e4:	|      jsr 1525e <trimStack>
    e7ea:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e7ec:	|      moveq #28,d0
    e7ee:	|      add.l 32(sp),d0
    e7f2:	|      move.l d0,-(sp)
    e7f4:	|      jsr 14b28 <unlinkVar>
    e7fa:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e7fc:	|      movea.l 32(sp),a0
    e800:	|      moveq #6,d0
    e802:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e806:	|      moveq #12,d0
    e808:	|      move.l d0,16(sp)
    e80c:	|      clr.l 12(sp)
    e810:	|      move.l 1ca88 <SysBase>,d0
    e816:	|      movea.l d0,a6
    e818:	|      move.l 16(sp),d0
    e81c:	|      move.l 12(sp),d1
    e820:	|      jsr -684(a6)
    e824:	|      move.l d0,8(sp)
    e828:	|      move.l 8(sp),d0
    e82c:	|      movea.l 32(sp),a0
    e830:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e834:	|      moveq #32,d0
    e836:	|      add.l 32(sp),d0
    e83a:	|  /-- bne.s e840 <builtIn_getMatchingFiles+0x88>
    e83c:	|  |   moveq #1,d0
    e83e:	+--|-- bra.s e89e <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e840:	|  \-> movea.l 32(sp),a0
    e844:	|      movea.l 32(a0),a0
    e848:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e84a:	|      movea.l 32(sp),a0
    e84e:	|      movea.l 32(a0),a0
    e852:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e856:	|      movea.l 32(sp),a0
    e85a:	|      movea.l 32(a0),a0
    e85e:	|      moveq #1,d0
    e860:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e864:	|      movea.l 32(sp),a0
    e868:	|      move.l 32(a0),d0
    e86c:	|      move.l 20(sp),-(sp)
    e870:	|      move.l d0,-(sp)
    e872:	|      jsr 14696 <getSavedGamesStack>
    e878:	|      addq.l #8,sp
    e87a:	|      tst.w d0
    e87c:	|  /-- bne.s e882 <builtIn_getMatchingFiles+0xca>
    e87e:	|  |   moveq #1,d0
    e880:	+--|-- bra.s e89e <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e882:	|  \-> move.l 20(sp),4(sp)
    e888:	|      move.l 1ca88 <SysBase>,d0
    e88e:	|      movea.l d0,a6
    e890:	|      movea.l 4(sp),a1
    e894:	|      jsr -690(a6)
	newText = NULL;
    e898:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e89c:	|      moveq #2,d0
}
    e89e:	\----> movea.l (sp)+,a6
    e8a0:	       lea 20(sp),sp
    e8a4:	       rts

0000e8a6 <builtIn_saveGame>:

builtIn(saveGame)
{
    e8a6:	       lea -12(sp),sp
    e8aa:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e8ac:	       movea.l 24(sp),a0
    e8b0:	       move.l 24(a0),d0
    e8b4:	       move.l d0,-(sp)
    e8b6:	       jsr 14eb0 <getTextFromAnyVar>
    e8bc:	       addq.l #4,sp
    e8be:	       move.l d0,1ca54 <loadNow>
    trimStack(&fun->stack);
    e8c4:	       moveq #24,d0
    e8c6:	       add.l 24(sp),d0
    e8ca:	       move.l d0,-(sp)
    e8cc:	       jsr 1525e <trimStack>
    e8d2:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e8d4:	       move.l 1ca54 <loadNow>,d0
    e8da:	       move.l d0,-(sp)
    e8dc:	       jsr 2fe <encodeFilename>
    e8e2:	       addq.l #4,sp
    e8e4:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e8e8:	       move.l 1ca54 <loadNow>,8(sp)
    e8f0:	       move.l 1ca88 <SysBase>,d0
    e8f6:	       movea.l d0,a6
    e8f8:	       movea.l 8(sp),a1
    e8fc:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e900:	       move.l 12(sp),-(sp)
    e904:	       jsr e410 <failSecurityCheck>
    e90a:	       addq.l #4,sp
    e90c:	       tst.w d0
    e90e:	   /-- beq.s e914 <builtIn_saveGame+0x6e>
    e910:	   |   moveq #1,d0
    e912:	/--|-- bra.s e964 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e914:	|  \-> move.l 12(sp),-(sp)
    e918:	|      pea 19904 <PutChar+0x1b28>
    e91e:	|      jsr 13e06 <joinStrings>
    e924:	|      addq.l #8,sp
    e926:	|      move.l d0,1ca54 <loadNow>
    FreeVec(aaaaa);
    e92c:	|      move.l 12(sp),4(sp)
    e932:	|      move.l 1ca88 <SysBase>,d0
    e938:	|      movea.l d0,a6
    e93a:	|      movea.l 4(sp),a1
    e93e:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e942:	|      moveq #28,d0
    e944:	|      add.l 24(sp),d0
    e948:	|      clr.l -(sp)
    e94a:	|      pea 1 <_start+0x1>
    e94e:	|      move.l d0,-(sp)
    e950:	|      jsr 151cc <setVariable>
    e956:	|      lea 12(sp),sp
    saverFunc = fun;
    e95a:	|      move.l 24(sp),1cb52 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e962:	|      moveq #0,d0
}
    e964:	\----> movea.l (sp)+,a6
    e966:	       lea 12(sp),sp
    e96a:	       rts

0000e96c <builtIn_fileExists>:

builtIn(fileExists)
{
    e96c:	       lea -36(sp),sp
    e970:	       move.l a6,-(sp)
    e972:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e974:	       movea.l 52(sp),a0
    e978:	       move.l 24(a0),d0
    e97c:	       move.l d0,-(sp)
    e97e:	       jsr 14eb0 <getTextFromAnyVar>
    e984:	       addq.l #4,sp
    e986:	       move.l d0,1ca54 <loadNow>
    trimStack(&fun->stack);
    e98c:	       moveq #24,d0
    e98e:	       add.l 52(sp),d0
    e992:	       move.l d0,-(sp)
    e994:	       jsr 1525e <trimStack>
    e99a:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e99c:	       move.l 1ca54 <loadNow>,d0
    e9a2:	       move.l d0,-(sp)
    e9a4:	       jsr 2fe <encodeFilename>
    e9aa:	       addq.l #4,sp
    e9ac:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e9b0:	       move.l 1ca54 <loadNow>,36(sp)
    e9b8:	       move.l 1ca88 <SysBase>,d0
    e9be:	       movea.l d0,a6
    e9c0:	       movea.l 36(sp),a1
    e9c4:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e9c8:	       move.l 40(sp),-(sp)
    e9cc:	       jsr e410 <failSecurityCheck>
    e9d2:	       addq.l #4,sp
    e9d4:	       tst.w d0
    e9d6:	   /-- beq.s e9de <builtIn_fileExists+0x72>
    e9d8:	   |   moveq #1,d0
    e9da:	/--|-- bra.w ea7e <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e9de:	|  \-> move.l 40(sp),32(sp)
    e9e4:	|      move.l #1005,28(sp)
    e9ec:	|      move.l 1ca90 <DOSBase>,d0
    e9f2:	|      movea.l d0,a6
    e9f4:	|      move.l 32(sp),d1
    e9f8:	|      move.l 28(sp),d2
    e9fc:	|      jsr -30(a6)
    ea00:	|      move.l d0,24(sp)
    ea04:	|      move.l 24(sp),d0
    ea08:	|      move.l d0,20(sp)
    if (!fp) {        
    ea0c:	|  /-- bne.s ea1c <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    ea0e:	|  |   pea 19906 <PutChar+0x1b2a>
    ea14:	|  |   jsr 1733a <KPrintF>
    ea1a:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    ea1c:	|  \-> tst.l 20(sp)
    ea20:	|      sne d0
    ea22:	|      neg.b d0
    ea24:	|      moveq #0,d1
    ea26:	|      move.b d0,d1
    ea28:	|      moveq #28,d0
    ea2a:	|      add.l 52(sp),d0
    ea2e:	|      move.l d1,-(sp)
    ea30:	|      pea 1 <_start+0x1>
    ea34:	|      move.l d0,-(sp)
    ea36:	|      jsr 151cc <setVariable>
    ea3c:	|      lea 12(sp),sp
    if (fp) Close(fp);
    ea40:	|      tst.l 20(sp)
    ea44:	|  /-- beq.s ea60 <builtIn_fileExists+0xf4>
    ea46:	|  |   move.l 20(sp),16(sp)
    ea4c:	|  |   move.l 1ca90 <DOSBase>,d0
    ea52:	|  |   movea.l d0,a6
    ea54:	|  |   move.l 16(sp),d1
    ea58:	|  |   jsr -36(a6)
    ea5c:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    ea60:	|  \-> move.l 40(sp),8(sp)
    ea66:	|      move.l 1ca88 <SysBase>,d0
    ea6c:	|      movea.l d0,a6
    ea6e:	|      movea.l 8(sp),a1
    ea72:	|      jsr -690(a6)
    loadNow = NULL;
    ea76:	|      clr.l 1ca54 <loadNow>
    return BR_CONTINUE;
    ea7c:	|      moveq #2,d0
}
    ea7e:	\----> move.l (sp)+,d2
    ea80:	       movea.l (sp)+,a6
    ea82:	       lea 36(sp),sp
    ea86:	       rts

0000ea88 <builtIn_loadGame>:

builtIn(loadGame)
{
    ea88:	       lea -36(sp),sp
    ea8c:	       move.l a6,-(sp)
    ea8e:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    ea90:	       movea.l 52(sp),a0
    ea94:	       move.l 24(a0),d0
    ea98:	       move.l d0,-(sp)
    ea9a:	       jsr 14eb0 <getTextFromAnyVar>
    eaa0:	       addq.l #4,sp
    eaa2:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    eaa6:	       moveq #24,d0
    eaa8:	       add.l 52(sp),d0
    eaac:	       move.l d0,-(sp)
    eaae:	       jsr 1525e <trimStack>
    eab4:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    eab6:	       move.l 40(sp),-(sp)
    eaba:	       jsr 2fe <encodeFilename>
    eac0:	       addq.l #4,sp
    eac2:	       move.l d0,1ca54 <loadNow>
    FreeVec(aaaaa);
    eac8:	       move.l 40(sp),36(sp)
    eace:	       move.l 1ca88 <SysBase>,d0
    ead4:	       movea.l d0,a6
    ead6:	       movea.l 36(sp),a1
    eada:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    eade:	       move.l 1ca54 <loadNow>,d0
    eae4:	       move.l d0,-(sp)
    eae6:	       jsr e410 <failSecurityCheck>
    eaec:	       addq.l #4,sp
    eaee:	       tst.w d0
    eaf0:	   /-- beq.s eaf6 <builtIn_loadGame+0x6e>
    eaf2:	   |   moveq #1,d0
    eaf4:	/--|-- bra.s eb66 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    eaf6:	|  \-> move.l 1ca54 <loadNow>,32(sp)
    eafe:	|      move.l #1005,28(sp)
    eb06:	|      move.l 1ca90 <DOSBase>,d0
    eb0c:	|      movea.l d0,a6
    eb0e:	|      move.l 32(sp),d1
    eb12:	|      move.l 28(sp),d2
    eb16:	|      jsr -30(a6)
    eb1a:	|      move.l d0,24(sp)
    eb1e:	|      move.l 24(sp),d0
    eb22:	|      move.l d0,20(sp)
    if (fp) {
    eb26:	|  /-- beq.s eb46 <builtIn_loadGame+0xbe>
        Close(fp);
    eb28:	|  |   move.l 20(sp),12(sp)
    eb2e:	|  |   move.l 1ca90 <DOSBase>,d0
    eb34:	|  |   movea.l d0,a6
    eb36:	|  |   move.l 12(sp),d1
    eb3a:	|  |   jsr -36(a6)
    eb3e:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    eb42:	|  |   moveq #0,d0
    eb44:	+--|-- bra.s eb66 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    eb46:	|  \-> move.l 1ca54 <loadNow>,16(sp)
    eb4e:	|      move.l 1ca88 <SysBase>,d0
    eb54:	|      movea.l d0,a6
    eb56:	|      movea.l 16(sp),a1
    eb5a:	|      jsr -690(a6)
    loadNow = NULL;
    eb5e:	|      clr.l 1ca54 <loadNow>
    return BR_CONTINUE;
    eb64:	|      moveq #2,d0
}
    eb66:	\----> move.l (sp)+,d2
    eb68:	       movea.l (sp)+,a6
    eb6a:	       lea 36(sp),sp
    eb6e:	       rts

0000eb70 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    eb70:	move.l 1cb28 <sceneHeight>,d0
    eb76:	move.l d0,d1
    eb78:	move.l 1cb24 <sceneWidth>,d0
    eb7e:	move.l d1,-(sp)
    eb80:	move.l d0,-(sp)
    eb82:	clr.l -(sp)
    eb84:	clr.l -(sp)
    eb86:	jsr d304 <blankScreen>
    eb8c:	lea 16(sp),sp
	return BR_CONTINUE;
    eb90:	moveq #2,d0
}
    eb92:	rts

0000eb94 <builtIn_blankArea>:

builtIn(blankArea)
{
    eb94:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eb98:	       movea.l 24(sp),a0
    eb9c:	       move.l 24(a0),d0
    eba0:	       move.l d0,-(sp)
    eba2:	       pea 1 <_start+0x1>
    eba6:	       lea 8(sp),a0
    ebaa:	       move.l a0,-(sp)
    ebac:	       jsr 148da <getValueType>
    ebb2:	       lea 12(sp),sp
    ebb6:	       tst.w d0
    ebb8:	   /-- bne.s ebc0 <builtIn_blankArea+0x2c>
    ebba:	   |   moveq #1,d0
    ebbc:	/--|-- bra.w ec96 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ebc0:	|  \-> moveq #24,d0
    ebc2:	|      add.l 24(sp),d0
    ebc6:	|      move.l d0,-(sp)
    ebc8:	|      jsr 1525e <trimStack>
    ebce:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ebd0:	|      movea.l 24(sp),a0
    ebd4:	|      move.l 24(a0),d0
    ebd8:	|      move.l d0,-(sp)
    ebda:	|      pea 1 <_start+0x1>
    ebde:	|      lea 12(sp),a0
    ebe2:	|      move.l a0,-(sp)
    ebe4:	|      jsr 148da <getValueType>
    ebea:	|      lea 12(sp),sp
    ebee:	|      tst.w d0
    ebf0:	|  /-- bne.s ebf8 <builtIn_blankArea+0x64>
    ebf2:	|  |   moveq #1,d0
    ebf4:	+--|-- bra.w ec96 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ebf8:	|  \-> moveq #24,d0
    ebfa:	|      add.l 24(sp),d0
    ebfe:	|      move.l d0,-(sp)
    ec00:	|      jsr 1525e <trimStack>
    ec06:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ec08:	|      movea.l 24(sp),a0
    ec0c:	|      move.l 24(a0),d0
    ec10:	|      move.l d0,-(sp)
    ec12:	|      pea 1 <_start+0x1>
    ec16:	|      moveq #16,d0
    ec18:	|      add.l sp,d0
    ec1a:	|      move.l d0,-(sp)
    ec1c:	|      jsr 148da <getValueType>
    ec22:	|      lea 12(sp),sp
    ec26:	|      tst.w d0
    ec28:	|  /-- bne.s ec2e <builtIn_blankArea+0x9a>
    ec2a:	|  |   moveq #1,d0
    ec2c:	+--|-- bra.s ec96 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ec2e:	|  \-> moveq #24,d0
    ec30:	|      add.l 24(sp),d0
    ec34:	|      move.l d0,-(sp)
    ec36:	|      jsr 1525e <trimStack>
    ec3c:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ec3e:	|      movea.l 24(sp),a0
    ec42:	|      move.l 24(a0),d0
    ec46:	|      move.l d0,-(sp)
    ec48:	|      pea 1 <_start+0x1>
    ec4c:	|      moveq #20,d0
    ec4e:	|      add.l sp,d0
    ec50:	|      move.l d0,-(sp)
    ec52:	|      jsr 148da <getValueType>
    ec58:	|      lea 12(sp),sp
    ec5c:	|      tst.w d0
    ec5e:	|  /-- bne.s ec64 <builtIn_blankArea+0xd0>
    ec60:	|  |   moveq #1,d0
    ec62:	+--|-- bra.s ec96 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ec64:	|  \-> moveq #24,d0
    ec66:	|      add.l 24(sp),d0
    ec6a:	|      move.l d0,-(sp)
    ec6c:	|      jsr 1525e <trimStack>
    ec72:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    ec74:	|      movea.l (sp),a1
    ec76:	|      movea.l 4(sp),a0
    ec7a:	|      move.l 8(sp),d1
    ec7e:	|      move.l 12(sp),d0
    ec82:	|      move.l a1,-(sp)
    ec84:	|      move.l a0,-(sp)
    ec86:	|      move.l d1,-(sp)
    ec88:	|      move.l d0,-(sp)
    ec8a:	|      jsr d304 <blankScreen>
    ec90:	|      lea 16(sp),sp
	return BR_CONTINUE;
    ec94:	|      moveq #2,d0
}
    ec96:	\----> lea 16(sp),sp
    ec9a:	       rts

0000ec9c <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    ec9c:	jsr d318 <darkScreen>
	return BR_CONTINUE;
    eca2:	moveq #2,d0
}
    eca4:	rts

0000eca6 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    eca6:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ecaa:	       movea.l 20(sp),a0
    ecae:	       move.l 24(a0),d0
    ecb2:	       move.l d0,-(sp)
    ecb4:	       pea 1 <_start+0x1>
    ecb8:	       lea 8(sp),a0
    ecbc:	       move.l a0,-(sp)
    ecbe:	       jsr 148da <getValueType>
    ecc4:	       lea 12(sp),sp
    ecc8:	       tst.w d0
    ecca:	   /-- bne.s ecd2 <builtIn_addOverlay+0x2c>
    eccc:	   |   moveq #1,d0
    ecce:	/--|-- bra.w ed6a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ecd2:	|  \-> moveq #24,d0
    ecd4:	|      add.l 20(sp),d0
    ecd8:	|      move.l d0,-(sp)
    ecda:	|      jsr 1525e <trimStack>
    ece0:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ece2:	|      movea.l 20(sp),a0
    ece6:	|      move.l 24(a0),d0
    ecea:	|      move.l d0,-(sp)
    ecec:	|      pea 1 <_start+0x1>
    ecf0:	|      moveq #12,d0
    ecf2:	|      add.l sp,d0
    ecf4:	|      move.l d0,-(sp)
    ecf6:	|      jsr 148da <getValueType>
    ecfc:	|      lea 12(sp),sp
    ed00:	|      tst.w d0
    ed02:	|  /-- bne.s ed08 <builtIn_addOverlay+0x62>
    ed04:	|  |   moveq #1,d0
    ed06:	+--|-- bra.s ed6a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ed08:	|  \-> moveq #24,d0
    ed0a:	|      add.l 20(sp),d0
    ed0e:	|      move.l d0,-(sp)
    ed10:	|      jsr 1525e <trimStack>
    ed16:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ed18:	|      movea.l 20(sp),a0
    ed1c:	|      move.l 24(a0),d0
    ed20:	|      move.l d0,-(sp)
    ed22:	|      pea 5 <_start+0x5>
    ed26:	|      moveq #16,d0
    ed28:	|      add.l sp,d0
    ed2a:	|      move.l d0,-(sp)
    ed2c:	|      jsr 148da <getValueType>
    ed32:	|      lea 12(sp),sp
    ed36:	|      tst.w d0
    ed38:	|  /-- bne.s ed3e <builtIn_addOverlay+0x98>
    ed3a:	|  |   moveq #1,d0
    ed3c:	+--|-- bra.s ed6a <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ed3e:	|  \-> moveq #24,d0
    ed40:	|      add.l 20(sp),d0
    ed44:	|      move.l d0,-(sp)
    ed46:	|      jsr 1525e <trimStack>
    ed4c:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ed4e:	|      movea.l (sp),a0
    ed50:	|      move.l 4(sp),d1
    ed54:	|      move.l 8(sp),d0
    ed58:	|      move.l a0,-(sp)
    ed5a:	|      move.l d1,-(sp)
    ed5c:	|      move.l d0,-(sp)
    ed5e:	|      jsr d436 <loadBackDrop>
    ed64:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ed68:	|      moveq #2,d0
}
    ed6a:	\----> lea 12(sp),sp
    ed6e:	       rts

0000ed70 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ed70:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ed74:	       movea.l 20(sp),a0
    ed78:	       move.l 24(a0),d0
    ed7c:	       move.l d0,-(sp)
    ed7e:	       pea 1 <_start+0x1>
    ed82:	       lea 8(sp),a0
    ed86:	       move.l a0,-(sp)
    ed88:	       jsr 148da <getValueType>
    ed8e:	       lea 12(sp),sp
    ed92:	       tst.w d0
    ed94:	   /-- bne.s ed9c <builtIn_mixOverlay+0x2c>
    ed96:	   |   moveq #1,d0
    ed98:	/--|-- bra.w ee34 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ed9c:	|  \-> moveq #24,d0
    ed9e:	|      add.l 20(sp),d0
    eda2:	|      move.l d0,-(sp)
    eda4:	|      jsr 1525e <trimStack>
    edaa:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edac:	|      movea.l 20(sp),a0
    edb0:	|      move.l 24(a0),d0
    edb4:	|      move.l d0,-(sp)
    edb6:	|      pea 1 <_start+0x1>
    edba:	|      moveq #12,d0
    edbc:	|      add.l sp,d0
    edbe:	|      move.l d0,-(sp)
    edc0:	|      jsr 148da <getValueType>
    edc6:	|      lea 12(sp),sp
    edca:	|      tst.w d0
    edcc:	|  /-- bne.s edd2 <builtIn_mixOverlay+0x62>
    edce:	|  |   moveq #1,d0
    edd0:	+--|-- bra.s ee34 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    edd2:	|  \-> moveq #24,d0
    edd4:	|      add.l 20(sp),d0
    edd8:	|      move.l d0,-(sp)
    edda:	|      jsr 1525e <trimStack>
    ede0:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ede2:	|      movea.l 20(sp),a0
    ede6:	|      move.l 24(a0),d0
    edea:	|      move.l d0,-(sp)
    edec:	|      pea 5 <_start+0x5>
    edf0:	|      moveq #16,d0
    edf2:	|      add.l sp,d0
    edf4:	|      move.l d0,-(sp)
    edf6:	|      jsr 148da <getValueType>
    edfc:	|      lea 12(sp),sp
    ee00:	|      tst.w d0
    ee02:	|  /-- bne.s ee08 <builtIn_mixOverlay+0x98>
    ee04:	|  |   moveq #1,d0
    ee06:	+--|-- bra.s ee34 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ee08:	|  \-> moveq #24,d0
    ee0a:	|      add.l 20(sp),d0
    ee0e:	|      move.l d0,-(sp)
    ee10:	|      jsr 1525e <trimStack>
    ee16:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ee18:	|      movea.l (sp),a0
    ee1a:	|      move.l 4(sp),d1
    ee1e:	|      move.l 8(sp),d0
    ee22:	|      move.l a0,-(sp)
    ee24:	|      move.l d1,-(sp)
    ee26:	|      move.l d0,-(sp)
    ee28:	|      jsr d4ac <mixBackDrop>
    ee2e:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ee32:	|      moveq #2,d0
}
    ee34:	\----> lea 12(sp),sp
    ee38:	       rts

0000ee3a <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ee3a:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    ee3e:	       pea 19924 <PutChar+0x1b48>
    ee44:	       jsr 1733a <KPrintF>
    ee4a:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee4c:	       movea.l 20(sp),a0
    ee50:	       move.l 24(a0),d0
    ee54:	       move.l d0,-(sp)
    ee56:	       pea 1 <_start+0x1>
    ee5a:	       lea 8(sp),a0
    ee5e:	       move.l a0,-(sp)
    ee60:	       jsr 148da <getValueType>
    ee66:	       lea 12(sp),sp
    ee6a:	       tst.w d0
    ee6c:	   /-- bne.s ee74 <builtIn_pasteImage+0x3a>
    ee6e:	   |   moveq #1,d0
    ee70:	/--|-- bra.w ef12 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    ee74:	|  \-> moveq #24,d0
    ee76:	|      add.l 20(sp),d0
    ee7a:	|      move.l d0,-(sp)
    ee7c:	|      jsr 1525e <trimStack>
    ee82:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee84:	|      movea.l 20(sp),a0
    ee88:	|      move.l 24(a0),d0
    ee8c:	|      move.l d0,-(sp)
    ee8e:	|      pea 1 <_start+0x1>
    ee92:	|      moveq #12,d0
    ee94:	|      add.l sp,d0
    ee96:	|      move.l d0,-(sp)
    ee98:	|      jsr 148da <getValueType>
    ee9e:	|      lea 12(sp),sp
    eea2:	|      tst.w d0
    eea4:	|  /-- bne.s eeaa <builtIn_pasteImage+0x70>
    eea6:	|  |   moveq #1,d0
    eea8:	+--|-- bra.s ef12 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    eeaa:	|  \-> moveq #24,d0
    eeac:	|      add.l 20(sp),d0
    eeb0:	|      move.l d0,-(sp)
    eeb2:	|      jsr 1525e <trimStack>
    eeb8:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    eeba:	|      movea.l 20(sp),a0
    eebe:	|      move.l 24(a0),d0
    eec2:	|      move.l d0,-(sp)
    eec4:	|      jsr 14db2 <getAnimationFromVar>
    eeca:	|      addq.l #4,sp
    eecc:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    eed0:	|      moveq #24,d0
    eed2:	|      add.l 20(sp),d0
    eed6:	|      move.l d0,-(sp)
    eed8:	|      jsr 1525e <trimStack>
    eede:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    eee0:	|      tst.l 8(sp)
    eee4:	|  /-- bne.s eeea <builtIn_pasteImage+0xb0>
    eee6:	|  |   moveq #2,d0
    eee8:	+--|-- bra.s ef12 <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    eeea:	|  \-> move.l (sp),d1
    eeec:	|      move.l 4(sp),d0
    eef0:	|      move.l 8(sp),-(sp)
    eef4:	|      move.l d1,-(sp)
    eef6:	|      move.l d0,-(sp)
    eef8:	|      jsr d94 <pasteCursor>
    eefe:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    ef02:	|      pea 19939 <PutChar+0x1b5d>
    ef08:	|      jsr 1733a <KPrintF>
    ef0e:	|      addq.l #4,sp
	return BR_CONTINUE;	
    ef10:	|      moveq #2,d0
}
    ef12:	\----> lea 12(sp),sp
    ef16:	       rts

0000ef18 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    ef18:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef1a:	       movea.l 16(sp),a0
    ef1e:	       move.l 24(a0),d0
    ef22:	       move.l d0,-(sp)
    ef24:	       pea 1 <_start+0x1>
    ef28:	       move.l sp,d0
    ef2a:	       addq.l #8,d0
    ef2c:	       move.l d0,-(sp)
    ef2e:	       jsr 148da <getValueType>
    ef34:	       lea 12(sp),sp
    ef38:	       tst.w d0
    ef3a:	   /-- bne.s ef42 <builtIn_setSceneDimensions+0x2a>
    ef3c:	   |   moveq #1,d0
    ef3e:	/--|-- bra.w efca <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ef42:	|  \-> moveq #24,d0
    ef44:	|      add.l 16(sp),d0
    ef48:	|      move.l d0,-(sp)
    ef4a:	|      jsr 1525e <trimStack>
    ef50:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef52:	|      movea.l 16(sp),a0
    ef56:	|      move.l 24(a0),d0
    ef5a:	|      move.l d0,-(sp)
    ef5c:	|      pea 1 <_start+0x1>
    ef60:	|      moveq #12,d0
    ef62:	|      add.l sp,d0
    ef64:	|      move.l d0,-(sp)
    ef66:	|      jsr 148da <getValueType>
    ef6c:	|      lea 12(sp),sp
    ef70:	|      tst.w d0
    ef72:	|  /-- bne.s ef78 <builtIn_setSceneDimensions+0x60>
    ef74:	|  |   moveq #1,d0
    ef76:	+--|-- bra.s efca <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    ef78:	|  \-> moveq #24,d0
    ef7a:	|      add.l 16(sp),d0
    ef7e:	|      move.l d0,-(sp)
    ef80:	|      jsr 1525e <trimStack>
    ef86:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    ef88:	|      move.l (sp),d1
    ef8a:	|      move.l 4(sp),d0
    ef8e:	|      move.l d1,-(sp)
    ef90:	|      move.l d0,-(sp)
    ef92:	|      jsr d502 <resizeBackdrop>
    ef98:	|      addq.l #8,sp
    ef9a:	|      tst.w d0
    ef9c:	|  /-- beq.s efba <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    ef9e:	|  |   move.l (sp),d1
    efa0:	|  |   move.l 4(sp),d0
    efa4:	|  |   move.l d1,-(sp)
    efa6:	|  |   move.l d0,-(sp)
    efa8:	|  |   clr.l -(sp)
    efaa:	|  |   clr.l -(sp)
    efac:	|  |   jsr d304 <blankScreen>
    efb2:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    efb6:	|  |   moveq #2,d0
    efb8:	+--|-- bra.s efca <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    efba:	|  \-> pea 1994f <PutChar+0x1b73>
    efc0:	|      jsr 1733a <KPrintF>
    efc6:	|      addq.l #4,sp
	return BR_ERROR;
    efc8:	|      moveq #1,d0
}
    efca:	\----> addq.l #8,sp
    efcc:	       rts

0000efce <builtIn_aimCamera>:

builtIn(aimCamera)
{
    efce:	          move.l d3,-(sp)
    efd0:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    efd2:	          movea.l 16(sp),a0
    efd6:	          move.l 24(a0),d0
    efda:	          move.l d0,-(sp)
    efdc:	          pea 1 <_start+0x1>
    efe0:	          pea 1cb46 <cameraY>
    efe6:	          jsr 148da <getValueType>
    efec:	          lea 12(sp),sp
    eff0:	          tst.w d0
    eff2:	      /-- bne.s effa <builtIn_aimCamera+0x2c>
    eff4:	      |   moveq #1,d0
    eff6:	/-----|-- bra.w f27c <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    effa:	|     \-> moveq #24,d0
    effc:	|         add.l 16(sp),d0
    f000:	|         move.l d0,-(sp)
    f002:	|         jsr 1525e <trimStack>
    f008:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f00a:	|         movea.l 16(sp),a0
    f00e:	|         move.l 24(a0),d0
    f012:	|         move.l d0,-(sp)
    f014:	|         pea 1 <_start+0x1>
    f018:	|         pea 1cb42 <cameraX>
    f01e:	|         jsr 148da <getValueType>
    f024:	|         lea 12(sp),sp
    f028:	|         tst.w d0
    f02a:	|     /-- bne.s f032 <builtIn_aimCamera+0x64>
    f02c:	|     |   moveq #1,d0
    f02e:	+-----|-- bra.w f27c <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f032:	|     \-> moveq #24,d0
    f034:	|         add.l 16(sp),d0
    f038:	|         move.l d0,-(sp)
    f03a:	|         jsr 1525e <trimStack>
    f040:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    f042:	|         move.l 1cb42 <cameraX>,d0
    f048:	|         move.l d0,-(sp)
    f04a:	|         jsr 1776c <__floatsisf>
    f050:	|         addq.l #4,sp
    f052:	|         move.l d0,d2
    f054:	|         move.l 1c9dc <winWidth>,d0
    f05a:	|         lsr.l #1,d0
    f05c:	|         move.l d0,-(sp)
    f05e:	|         jsr 17794 <__floatunsisf>
    f064:	|         addq.l #4,sp
    f066:	|         move.l d0,d1
    f068:	|         move.l 1c426 <cameraZoom>,d0
    f06e:	|         move.l d0,-(sp)
    f070:	|         move.l d1,-(sp)
    f072:	|         jsr 17622 <__divsf3>
    f078:	|         addq.l #8,sp
    f07a:	|         move.l d0,-(sp)
    f07c:	|         move.l d2,-(sp)
    f07e:	|         jsr 17a60 <__subsf3>
    f084:	|         addq.l #8,sp
    f086:	|         move.l d0,-(sp)
    f088:	|         jsr 17704 <__fixsfsi>
    f08e:	|         addq.l #4,sp
    f090:	|         move.l d0,1cb42 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    f096:	|         move.l 1cb46 <cameraY>,d0
    f09c:	|         move.l d0,-(sp)
    f09e:	|         jsr 1776c <__floatsisf>
    f0a4:	|         addq.l #4,sp
    f0a6:	|         move.l d0,d2
    f0a8:	|         move.l 1c9e0 <winHeight>,d0
    f0ae:	|         lsr.l #1,d0
    f0b0:	|         move.l d0,-(sp)
    f0b2:	|         jsr 17794 <__floatunsisf>
    f0b8:	|         addq.l #4,sp
    f0ba:	|         move.l d0,d1
    f0bc:	|         move.l 1c426 <cameraZoom>,d0
    f0c2:	|         move.l d0,-(sp)
    f0c4:	|         move.l d1,-(sp)
    f0c6:	|         jsr 17622 <__divsf3>
    f0cc:	|         addq.l #8,sp
    f0ce:	|         move.l d0,-(sp)
    f0d0:	|         move.l d2,-(sp)
    f0d2:	|         jsr 17a60 <__subsf3>
    f0d8:	|         addq.l #8,sp
    f0da:	|         move.l d0,-(sp)
    f0dc:	|         jsr 17704 <__fixsfsi>
    f0e2:	|         addq.l #4,sp
    f0e4:	|         move.l d0,1cb46 <cameraY>

	if (cameraX < 0) cameraX = 0;
    f0ea:	|         move.l 1cb42 <cameraX>,d0
    f0f0:	|     /-- bpl.s f0fc <builtIn_aimCamera+0x12e>
    f0f2:	|     |   clr.l 1cb42 <cameraX>
    f0f8:	|  /--|-- bra.w f1b2 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    f0fc:	|  |  \-> move.l 1cb42 <cameraX>,d0
    f102:	|  |      move.l d0,-(sp)
    f104:	|  |      jsr 1776c <__floatsisf>
    f10a:	|  |      addq.l #4,sp
    f10c:	|  |      move.l d0,d2
    f10e:	|  |      move.l 1cb24 <sceneWidth>,d0
    f114:	|  |      move.l d0,-(sp)
    f116:	|  |      jsr 17794 <__floatunsisf>
    f11c:	|  |      addq.l #4,sp
    f11e:	|  |      move.l d0,d3
    f120:	|  |      move.l 1c9dc <winWidth>,d0
    f126:	|  |      move.l d0,-(sp)
    f128:	|  |      jsr 17794 <__floatunsisf>
    f12e:	|  |      addq.l #4,sp
    f130:	|  |      move.l d0,d1
    f132:	|  |      move.l 1c426 <cameraZoom>,d0
    f138:	|  |      move.l d0,-(sp)
    f13a:	|  |      move.l d1,-(sp)
    f13c:	|  |      jsr 17622 <__divsf3>
    f142:	|  |      addq.l #8,sp
    f144:	|  |      move.l d0,-(sp)
    f146:	|  |      move.l d3,-(sp)
    f148:	|  |      jsr 17a60 <__subsf3>
    f14e:	|  |      addq.l #8,sp
    f150:	|  |      move.l d0,-(sp)
    f152:	|  |      move.l d2,-(sp)
    f154:	|  |      jsr 178d8 <__gtsf2>
    f15a:	|  |      addq.l #8,sp
    f15c:	|  |      tst.l d0
    f15e:	|  +----- ble.s f1b2 <builtIn_aimCamera+0x1e4>
    f160:	|  |      move.l 1cb24 <sceneWidth>,d0
    f166:	|  |      move.l d0,-(sp)
    f168:	|  |      jsr 17794 <__floatunsisf>
    f16e:	|  |      addq.l #4,sp
    f170:	|  |      move.l d0,d2
    f172:	|  |      move.l 1c9dc <winWidth>,d0
    f178:	|  |      move.l d0,-(sp)
    f17a:	|  |      jsr 17794 <__floatunsisf>
    f180:	|  |      addq.l #4,sp
    f182:	|  |      move.l d0,d1
    f184:	|  |      move.l 1c426 <cameraZoom>,d0
    f18a:	|  |      move.l d0,-(sp)
    f18c:	|  |      move.l d1,-(sp)
    f18e:	|  |      jsr 17622 <__divsf3>
    f194:	|  |      addq.l #8,sp
    f196:	|  |      move.l d0,-(sp)
    f198:	|  |      move.l d2,-(sp)
    f19a:	|  |      jsr 17a60 <__subsf3>
    f1a0:	|  |      addq.l #8,sp
    f1a2:	|  |      move.l d0,-(sp)
    f1a4:	|  |      jsr 17704 <__fixsfsi>
    f1aa:	|  |      addq.l #4,sp
    f1ac:	|  |      move.l d0,1cb42 <cameraX>
	if (cameraY < 0) cameraY = 0;
    f1b2:	|  \----> move.l 1cb46 <cameraY>,d0
    f1b8:	|     /-- bpl.s f1c4 <builtIn_aimCamera+0x1f6>
    f1ba:	|     |   clr.l 1cb46 <cameraY>
    f1c0:	|  /--|-- bra.w f27a <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f1c4:	|  |  \-> move.l 1cb46 <cameraY>,d0
    f1ca:	|  |      move.l d0,-(sp)
    f1cc:	|  |      jsr 1776c <__floatsisf>
    f1d2:	|  |      addq.l #4,sp
    f1d4:	|  |      move.l d0,d2
    f1d6:	|  |      move.l 1cb28 <sceneHeight>,d0
    f1dc:	|  |      move.l d0,-(sp)
    f1de:	|  |      jsr 17794 <__floatunsisf>
    f1e4:	|  |      addq.l #4,sp
    f1e6:	|  |      move.l d0,d3
    f1e8:	|  |      move.l 1c9e0 <winHeight>,d0
    f1ee:	|  |      move.l d0,-(sp)
    f1f0:	|  |      jsr 17794 <__floatunsisf>
    f1f6:	|  |      addq.l #4,sp
    f1f8:	|  |      move.l d0,d1
    f1fa:	|  |      move.l 1c426 <cameraZoom>,d0
    f200:	|  |      move.l d0,-(sp)
    f202:	|  |      move.l d1,-(sp)
    f204:	|  |      jsr 17622 <__divsf3>
    f20a:	|  |      addq.l #8,sp
    f20c:	|  |      move.l d0,-(sp)
    f20e:	|  |      move.l d3,-(sp)
    f210:	|  |      jsr 17a60 <__subsf3>
    f216:	|  |      addq.l #8,sp
    f218:	|  |      move.l d0,-(sp)
    f21a:	|  |      move.l d2,-(sp)
    f21c:	|  |      jsr 178d8 <__gtsf2>
    f222:	|  |      addq.l #8,sp
    f224:	|  |      tst.l d0
    f226:	|  +----- ble.s f27a <builtIn_aimCamera+0x2ac>
    f228:	|  |      move.l 1cb28 <sceneHeight>,d0
    f22e:	|  |      move.l d0,-(sp)
    f230:	|  |      jsr 17794 <__floatunsisf>
    f236:	|  |      addq.l #4,sp
    f238:	|  |      move.l d0,d2
    f23a:	|  |      move.l 1c9e0 <winHeight>,d0
    f240:	|  |      move.l d0,-(sp)
    f242:	|  |      jsr 17794 <__floatunsisf>
    f248:	|  |      addq.l #4,sp
    f24a:	|  |      move.l d0,d1
    f24c:	|  |      move.l 1c426 <cameraZoom>,d0
    f252:	|  |      move.l d0,-(sp)
    f254:	|  |      move.l d1,-(sp)
    f256:	|  |      jsr 17622 <__divsf3>
    f25c:	|  |      addq.l #8,sp
    f25e:	|  |      move.l d0,-(sp)
    f260:	|  |      move.l d2,-(sp)
    f262:	|  |      jsr 17a60 <__subsf3>
    f268:	|  |      addq.l #8,sp
    f26a:	|  |      move.l d0,-(sp)
    f26c:	|  |      jsr 17704 <__fixsfsi>
    f272:	|  |      addq.l #4,sp
    f274:	|  |      move.l d0,1cb46 <cameraY>
	return BR_CONTINUE;
    f27a:	|  \----> moveq #2,d0
}
    f27c:	\-------> move.l (sp)+,d2
    f27e:	          move.l (sp)+,d3
    f280:	          rts

0000f282 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f282:	       subq.l #4,sp
    f284:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f286:	       movea.l 16(sp),a0
    f28a:	       move.l 24(a0),d0
    f28e:	       move.l d0,-(sp)
    f290:	       pea 1 <_start+0x1>
    f294:	       moveq #12,d0
    f296:	       add.l sp,d0
    f298:	       move.l d0,-(sp)
    f29a:	       jsr 148da <getValueType>
    f2a0:	       lea 12(sp),sp
    f2a4:	       tst.w d0
    f2a6:	   /-- bne.s f2ae <builtIn_zoomCamera+0x2c>
    f2a8:	   |   moveq #1,d0
    f2aa:	/--|-- bra.w f4a8 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f2ae:	|  \-> moveq #24,d0
    f2b0:	|      add.l 16(sp),d0
    f2b4:	|      move.l d0,-(sp)
    f2b6:	|      jsr 1525e <trimStack>
    f2bc:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f2be:	|      move.l 1ca44 <input+0xa>,d0
    f2c4:	|      move.l d0,-(sp)
    f2c6:	|      jsr 1776c <__floatsisf>
    f2cc:	|      addq.l #4,sp
    f2ce:	|      move.l d0,d1
    f2d0:	|      move.l 1c426 <cameraZoom>,d0
    f2d6:	|      move.l d0,-(sp)
    f2d8:	|      move.l d1,-(sp)
    f2da:	|      jsr 1781e <__mulsf3>
    f2e0:	|      addq.l #8,sp
    f2e2:	|      move.l d0,-(sp)
    f2e4:	|      jsr 17704 <__fixsfsi>
    f2ea:	|      addq.l #4,sp
    f2ec:	|      move.l d0,1ca44 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f2f2:	|      move.l 1ca48 <input+0xe>,d0
    f2f8:	|      move.l d0,-(sp)
    f2fa:	|      jsr 1776c <__floatsisf>
    f300:	|      addq.l #4,sp
    f302:	|      move.l d0,d1
    f304:	|      move.l 1c426 <cameraZoom>,d0
    f30a:	|      move.l d0,-(sp)
    f30c:	|      move.l d1,-(sp)
    f30e:	|      jsr 1781e <__mulsf3>
    f314:	|      addq.l #8,sp
    f316:	|      move.l d0,-(sp)
    f318:	|      jsr 17704 <__fixsfsi>
    f31e:	|      addq.l #4,sp
    f320:	|      move.l d0,1ca48 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f326:	|      move.l 4(sp),d0
    f32a:	|      move.l d0,-(sp)
    f32c:	|      jsr 1776c <__floatsisf>
    f332:	|      addq.l #4,sp
    f334:	|      move.l #1008981770,-(sp)
    f33a:	|      move.l d0,-(sp)
    f33c:	|      jsr 1781e <__mulsf3>
    f342:	|      addq.l #8,sp
    f344:	|      move.l d0,1c426 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f34a:	|      move.l 1c9dc <winWidth>,d0
    f350:	|      move.l d0,-(sp)
    f352:	|      jsr 17794 <__floatunsisf>
    f358:	|      addq.l #4,sp
    f35a:	|      move.l d0,d1
    f35c:	|      move.l 1c426 <cameraZoom>,d0
    f362:	|      move.l d0,-(sp)
    f364:	|      move.l d1,-(sp)
    f366:	|      jsr 17622 <__divsf3>
    f36c:	|      addq.l #8,sp
    f36e:	|      move.l d0,d2
    f370:	|      move.l 1cb24 <sceneWidth>,d0
    f376:	|      move.l d0,-(sp)
    f378:	|      jsr 17794 <__floatunsisf>
    f37e:	|      addq.l #4,sp
    f380:	|      move.l d0,-(sp)
    f382:	|      move.l d2,-(sp)
    f384:	|      jsr 178d8 <__gtsf2>
    f38a:	|      addq.l #8,sp
    f38c:	|      tst.l d0
    f38e:	|  /-- ble.s f3c4 <builtIn_zoomCamera+0x142>
    f390:	|  |   move.l 1c9dc <winWidth>,d0
    f396:	|  |   move.l d0,-(sp)
    f398:	|  |   jsr 17794 <__floatunsisf>
    f39e:	|  |   addq.l #4,sp
    f3a0:	|  |   move.l d0,d2
    f3a2:	|  |   move.l 1cb24 <sceneWidth>,d0
    f3a8:	|  |   move.l d0,-(sp)
    f3aa:	|  |   jsr 17794 <__floatunsisf>
    f3b0:	|  |   addq.l #4,sp
    f3b2:	|  |   move.l d0,-(sp)
    f3b4:	|  |   move.l d2,-(sp)
    f3b6:	|  |   jsr 17622 <__divsf3>
    f3bc:	|  |   addq.l #8,sp
    f3be:	|  |   move.l d0,1c426 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f3c4:	|  \-> move.l 1c9e0 <winHeight>,d0
    f3ca:	|      move.l d0,-(sp)
    f3cc:	|      jsr 17794 <__floatunsisf>
    f3d2:	|      addq.l #4,sp
    f3d4:	|      move.l d0,d1
    f3d6:	|      move.l 1c426 <cameraZoom>,d0
    f3dc:	|      move.l d0,-(sp)
    f3de:	|      move.l d1,-(sp)
    f3e0:	|      jsr 17622 <__divsf3>
    f3e6:	|      addq.l #8,sp
    f3e8:	|      move.l d0,d2
    f3ea:	|      move.l 1cb28 <sceneHeight>,d0
    f3f0:	|      move.l d0,-(sp)
    f3f2:	|      jsr 17794 <__floatunsisf>
    f3f8:	|      addq.l #4,sp
    f3fa:	|      move.l d0,-(sp)
    f3fc:	|      move.l d2,-(sp)
    f3fe:	|      jsr 178d8 <__gtsf2>
    f404:	|      addq.l #8,sp
    f406:	|      tst.l d0
    f408:	|  /-- ble.s f43e <builtIn_zoomCamera+0x1bc>
    f40a:	|  |   move.l 1c9e0 <winHeight>,d0
    f410:	|  |   move.l d0,-(sp)
    f412:	|  |   jsr 17794 <__floatunsisf>
    f418:	|  |   addq.l #4,sp
    f41a:	|  |   move.l d0,d2
    f41c:	|  |   move.l 1cb28 <sceneHeight>,d0
    f422:	|  |   move.l d0,-(sp)
    f424:	|  |   jsr 17794 <__floatunsisf>
    f42a:	|  |   addq.l #4,sp
    f42c:	|  |   move.l d0,-(sp)
    f42e:	|  |   move.l d2,-(sp)
    f430:	|  |   jsr 17622 <__divsf3>
    f436:	|  |   addq.l #8,sp
    f438:	|  |   move.l d0,1c426 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f43e:	|  \-> move.l 1ca44 <input+0xa>,d0
    f444:	|      move.l d0,-(sp)
    f446:	|      jsr 1776c <__floatsisf>
    f44c:	|      addq.l #4,sp
    f44e:	|      move.l d0,d1
    f450:	|      move.l 1c426 <cameraZoom>,d0
    f456:	|      move.l d0,-(sp)
    f458:	|      move.l d1,-(sp)
    f45a:	|      jsr 17622 <__divsf3>
    f460:	|      addq.l #8,sp
    f462:	|      move.l d0,-(sp)
    f464:	|      jsr 17704 <__fixsfsi>
    f46a:	|      addq.l #4,sp
    f46c:	|      move.l d0,1ca44 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f472:	|      move.l 1ca48 <input+0xe>,d0
    f478:	|      move.l d0,-(sp)
    f47a:	|      jsr 1776c <__floatsisf>
    f480:	|      addq.l #4,sp
    f482:	|      move.l d0,d1
    f484:	|      move.l 1c426 <cameraZoom>,d0
    f48a:	|      move.l d0,-(sp)
    f48c:	|      move.l d1,-(sp)
    f48e:	|      jsr 17622 <__divsf3>
    f494:	|      addq.l #8,sp
    f496:	|      move.l d0,-(sp)
    f498:	|      jsr 17704 <__fixsfsi>
    f49e:	|      addq.l #4,sp
    f4a0:	|      move.l d0,1ca48 <input+0xe>

	return BR_CONTINUE;
    f4a6:	|      moveq #2,d0
}
    f4a8:	\----> move.l (sp)+,d2
    f4aa:	       addq.l #4,sp
    f4ac:	       rts

0000f4ae <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f4ae:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f4b0:	             tst.l 8(sp)
    f4b4:	         /-- bne.s f4c8 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f4b6:	         |   pea 19974 <PutChar+0x1b98>
    f4bc:	         |   jsr 1733a <KPrintF>
    f4c2:	         |   addq.l #4,sp
		return BR_ERROR;
    f4c4:	         |   moveq #1,d0
    f4c6:	/--------|-- bra.s f528 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f4c8:	|        \-> jsr 15efa <rand>
    f4ce:	|            move.l d0,d1
    f4d0:	|            move.l 8(sp),d0
    f4d4:	|            move.l d0,-(sp)
    f4d6:	|            move.l d1,-(sp)
    f4d8:	|            jsr 17da0 <__umodsi3>
    f4de:	|            addq.l #8,sp
    f4e0:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f4e2:	|     /----- bra.s f516 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f4e4:	|  /--|----> move.l (sp),d0
    f4e6:	|  |  |      cmp.l 8(sp),d0
    f4ea:	|  |  |  /-- bne.s f506 <builtIn_pickOne+0x58>
    f4ec:	|  |  |  |   moveq #28,d0
    f4ee:	|  |  |  |   add.l 12(sp),d0
    f4f2:	|  |  |  |   movea.l 12(sp),a0
    f4f6:	|  |  |  |   move.l 24(a0),d1
    f4fa:	|  |  |  |   move.l d0,-(sp)
    f4fc:	|  |  |  |   move.l d1,-(sp)
    f4fe:	|  |  |  |   jsr 14d94 <copyVariable>
    f504:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f506:	|  |  |  \-> moveq #24,d0
    f508:	|  |  |      add.l 12(sp),d0
    f50c:	|  |  |      move.l d0,-(sp)
    f50e:	|  |  |      jsr 1525e <trimStack>
    f514:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f516:	|  |  \----> move.l 8(sp),d0
    f51a:	|  |         move.l d0,d1
    f51c:	|  |         subq.l #1,d1
    f51e:	|  |         move.l d1,8(sp)
    f522:	|  |         tst.l d0
    f524:	|  \-------- bne.s f4e4 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f526:	|            moveq #2,d0
}
    f528:	\----------> addq.l #4,sp
    f52a:	             rts

0000f52c <builtIn_substring>:

builtIn(substring)
{
    f52c:	       lea -40(sp),sp
    f530:	       move.l a6,-(sp)
    f532:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f534:	       movea.l 56(sp),a0
    f538:	       move.l 24(a0),d0
    f53c:	       move.l d0,-(sp)
    f53e:	       pea 1 <_start+0x1>
    f542:	       lea 16(sp),a0
    f546:	       move.l a0,-(sp)
    f548:	       jsr 148da <getValueType>
    f54e:	       lea 12(sp),sp
    f552:	       tst.w d0
    f554:	   /-- bne.s f55c <builtIn_substring+0x30>
    f556:	   |   moveq #1,d0
    f558:	/--|-- bra.w f6d4 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f55c:	|  \-> moveq #24,d0
    f55e:	|      add.l 56(sp),d0
    f562:	|      move.l d0,-(sp)
    f564:	|      jsr 1525e <trimStack>
    f56a:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f56c:	|      movea.l 56(sp),a0
    f570:	|      move.l 24(a0),d0
    f574:	|      move.l d0,-(sp)
    f576:	|      pea 1 <_start+0x1>
    f57a:	|      lea 20(sp),a0
    f57e:	|      move.l a0,-(sp)
    f580:	|      jsr 148da <getValueType>
    f586:	|      lea 12(sp),sp
    f58a:	|      tst.w d0
    f58c:	|  /-- bne.s f594 <builtIn_substring+0x68>
    f58e:	|  |   moveq #1,d0
    f590:	+--|-- bra.w f6d4 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f594:	|  \-> moveq #24,d0
    f596:	|      add.l 56(sp),d0
    f59a:	|      move.l d0,-(sp)
    f59c:	|      jsr 1525e <trimStack>
    f5a2:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f5a4:	|      movea.l 56(sp),a0
    f5a8:	|      move.l 24(a0),d0
    f5ac:	|      move.l d0,-(sp)
    f5ae:	|      jsr 14eb0 <getTextFromAnyVar>
    f5b4:	|      addq.l #4,sp
    f5b6:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f5ba:	|      moveq #24,d0
    f5bc:	|      add.l 56(sp),d0
    f5c0:	|      move.l d0,-(sp)
    f5c2:	|      jsr 1525e <trimStack>
    f5c8:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f5ca:	|      move.l 44(sp),-(sp)
    f5ce:	|      jsr 13dc6 <strlen>
    f5d4:	|      addq.l #4,sp
    f5d6:	|      move.l d0,d1
    f5d8:	|      move.l 12(sp),d0
    f5dc:	|      movea.l d0,a0
    f5de:	|      move.l 8(sp),d0
    f5e2:	|      add.l a0,d0
    f5e4:	|      cmp.l d1,d0
    f5e6:	|  /-- bls.s f61c <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f5e8:	|  |   move.l 44(sp),-(sp)
    f5ec:	|  |   jsr 13dc6 <strlen>
    f5f2:	|  |   addq.l #4,sp
    f5f4:	|  |   move.l d0,d1
    f5f6:	|  |   move.l 12(sp),d0
    f5fa:	|  |   sub.l d0,d1
    f5fc:	|  |   move.l d1,d0
    f5fe:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f602:	|  |   move.l 44(sp),-(sp)
    f606:	|  |   jsr 13dc6 <strlen>
    f60c:	|  |   addq.l #4,sp
    f60e:	|  |   move.l d0,d1
    f610:	|  |   move.l 12(sp),d0
    f614:	|  |   cmp.l d1,d0
    f616:	|  +-- bls.s f61c <builtIn_substring+0xf0>
            start = 0;
    f618:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f61c:	|  \-> move.l 8(sp),d0
    f620:	|  /-- bpl.s f626 <builtIn_substring+0xfa>
        length = 0;
    f622:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f626:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f62c:	|      move.l 12(sp),d1
    f630:	|      move.l 8(sp),d0
    f634:	|      move.l d1,d2
    f636:	|      add.l d0,d2
    f638:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f63c:	|      move.l 36(sp),d0
    f640:	|      sub.l 40(sp),d0
    f644:	|      addq.l #1,d0
    f646:	|      move.l d0,32(sp)
    f64a:	|      clr.l 28(sp)
    f64e:	|      move.l 1ca88 <SysBase>,d0
    f654:	|      movea.l d0,a6
    f656:	|      move.l 32(sp),d0
    f65a:	|      move.l 28(sp),d1
    f65e:	|      jsr -684(a6)
    f662:	|      move.l d0,24(sp)
    f666:	|      move.l 24(sp),d0
    f66a:	|      move.l d0,20(sp)
    if (!newString) {
    f66e:	|  /-- bne.s f674 <builtIn_substring+0x148>
        return BR_ERROR;
    f670:	|  |   moveq #1,d0
    f672:	+--|-- bra.s f6d4 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f674:	|  \-> move.l 36(sp),d0
    f678:	|      sub.l 40(sp),d0
    f67c:	|      move.l d0,d1
    f67e:	|      move.l 40(sp),d0
    f682:	|      add.l 44(sp),d0
    f686:	|      move.l d1,-(sp)
    f688:	|      move.l d0,-(sp)
    f68a:	|      move.l 28(sp),-(sp)
    f68e:	|      jsr 172ee <memcpy>
    f694:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f698:	|      move.l 36(sp),d0
    f69c:	|      sub.l 40(sp),d0
    f6a0:	|      movea.l 20(sp),a0
    f6a4:	|      adda.l d0,a0
    f6a6:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f6a8:	|      moveq #28,d0
    f6aa:	|      add.l 56(sp),d0
    f6ae:	|      move.l 20(sp),-(sp)
    f6b2:	|      move.l d0,-(sp)
    f6b4:	|      jsr 14afc <makeTextVar>
    f6ba:	|      addq.l #8,sp
    FreeVec(newString);
    f6bc:	|      move.l 20(sp),16(sp)
    f6c2:	|      move.l 1ca88 <SysBase>,d0
    f6c8:	|      movea.l d0,a6
    f6ca:	|      movea.l 16(sp),a1
    f6ce:	|      jsr -690(a6)
    return BR_CONTINUE;
    f6d2:	|      moveq #2,d0
}
    f6d4:	\----> move.l (sp)+,d2
    f6d6:	       movea.l (sp)+,a6
    f6d8:	       lea 40(sp),sp
    f6dc:	       rts

0000f6de <builtIn_stringLength>:

builtIn(stringLength)
{
    f6de:	subq.l #8,sp
    f6e0:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f6e2:	movea.l 20(sp),a0
    f6e6:	move.l 24(a0),d0
    f6ea:	move.l d0,-(sp)
    f6ec:	jsr 14eb0 <getTextFromAnyVar>
    f6f2:	addq.l #4,sp
    f6f4:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f6f8:	moveq #24,d0
    f6fa:	add.l 20(sp),d0
    f6fe:	move.l d0,-(sp)
    f700:	jsr 1525e <trimStack>
    f706:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f708:	move.l 8(sp),-(sp)
    f70c:	jsr 13dc6 <strlen>
    f712:	addq.l #4,sp
    f714:	move.l d0,d1
    f716:	moveq #28,d0
    f718:	add.l 20(sp),d0
    f71c:	move.l d1,-(sp)
    f71e:	pea 1 <_start+0x1>
    f722:	move.l d0,-(sp)
    f724:	jsr 151cc <setVariable>
    f72a:	lea 12(sp),sp
	FreeVec(newText);
    f72e:	move.l 8(sp),4(sp)
    f734:	move.l 1ca88 <SysBase>,d0
    f73a:	movea.l d0,a6
    f73c:	movea.l 4(sp),a1
    f740:	jsr -690(a6)
	return BR_CONTINUE;
    f744:	moveq #2,d0
}
    f746:	movea.l (sp)+,a6
    f748:	addq.l #8,sp
    f74a:	rts

0000f74c <builtIn_newStack>:

builtIn(newStack)
{
    f74c:	             lea -12(sp),sp
    f750:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f752:	             moveq #28,d0
    f754:	             add.l 24(sp),d0
    f758:	             move.l d0,-(sp)
    f75a:	             jsr 14b28 <unlinkVar>
    f760:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f762:	             movea.l 24(sp),a0
    f766:	             moveq #6,d0
    f768:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f76c:	             moveq #12,d1
    f76e:	             move.l d1,12(sp)
    f772:	             clr.l 8(sp)
    f776:	             move.l 1ca88 <SysBase>,d0
    f77c:	             movea.l d0,a6
    f77e:	             move.l 12(sp),d0
    f782:	             move.l 8(sp),d1
    f786:	             jsr -684(a6)
    f78a:	             move.l d0,4(sp)
    f78e:	             move.l 4(sp),d0
    f792:	             movea.l 24(sp),a0
    f796:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f79a:	             movea.l 24(sp),a0
    f79e:	             move.l 32(a0),d0
    f7a2:	         /-- bne.s f7aa <builtIn_newStack+0x5e>
    f7a4:	         |   moveq #1,d0
    f7a6:	/--------|-- bra.w f83c <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f7aa:	|        \-> movea.l 24(sp),a0
    f7ae:	|            movea.l 32(a0),a0
    f7b2:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f7b4:	|            movea.l 24(sp),a0
    f7b8:	|            movea.l 32(a0),a0
    f7bc:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f7c0:	|            movea.l 24(sp),a0
    f7c4:	|            movea.l 32(a0),a0
    f7c8:	|            moveq #1,d0
    f7ca:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f7ce:	|     /----- bra.s f82a <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f7d0:	|  /--|----> movea.l 24(sp),a0
    f7d4:	|  |  |      move.l 32(a0),d0
    f7d8:	|  |  |      move.l d0,d1
    f7da:	|  |  |      movea.l 24(sp),a0
    f7de:	|  |  |      move.l 24(a0),d0
    f7e2:	|  |  |      move.l d1,-(sp)
    f7e4:	|  |  |      move.l d0,-(sp)
    f7e6:	|  |  |      jsr 14116 <addVarToStack>
    f7ec:	|  |  |      addq.l #8,sp
    f7ee:	|  |  |      tst.w d0
    f7f0:	|  |  |  /-- bne.s f7f6 <builtIn_newStack+0xaa>
    f7f2:	|  |  |  |   moveq #1,d0
    f7f4:	+--|--|--|-- bra.s f83c <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f7f6:	|  |  |  \-> movea.l 24(sp),a0
    f7fa:	|  |  |      movea.l 32(a0),a0
    f7fe:	|  |  |      move.l 4(a0),d0
    f802:	|  |  |  /-- bne.s f81a <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f804:	|  |  |  |   movea.l 24(sp),a0
    f808:	|  |  |  |   movea.l 32(a0),a1
    f80c:	|  |  |  |   movea.l 24(sp),a0
    f810:	|  |  |  |   movea.l 32(a0),a0
    f814:	|  |  |  |   move.l (a1),d0
    f816:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f81a:	|  |  |  \-> moveq #24,d0
    f81c:	|  |  |      add.l 24(sp),d0
    f820:	|  |  |      move.l d0,-(sp)
    f822:	|  |  |      jsr 1525e <trimStack>
    f828:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f82a:	|  |  \----> move.l 20(sp),d0
    f82e:	|  |         move.l d0,d1
    f830:	|  |         subq.l #1,d1
    f832:	|  |         move.l d1,20(sp)
    f836:	|  |         tst.l d0
    f838:	|  \-------- bne.s f7d0 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f83a:	|            moveq #2,d0
}
    f83c:	\----------> movea.l (sp)+,a6
    f83e:	             lea 12(sp),sp
    f842:	             rts

0000f844 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f844:	          movea.l 8(sp),a0
    f848:	          movea.l 24(a0),a0
    f84c:	          move.l (a0),d0
    f84e:	          moveq #6,d1
    f850:	          cmp.l d0,d1
    f852:	      /-- beq.s f86e <builtIn_stackSize+0x2a>
    f854:	      |   moveq #10,d1
    f856:	      |   cmp.l d0,d1
    f858:	   /--|-- beq.s f8b2 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f85a:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f85c:	   |  |   pea 199a7 <line.c.05397aaf+0x1b>
    f862:	   |  |   jsr 1733a <KPrintF>
    f868:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f86a:	   |  |   moveq #1,d0
    f86c:	/--|--|-- bra.s f8ec <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f86e:	|  |  \-> movea.l 8(sp),a0
    f872:	|  |      movea.l 24(a0),a0
    f876:	|  |      move.l 4(a0),d0
    f87a:	|  |      move.l d0,-(sp)
    f87c:	|  |      jsr 1523a <stackSize>
    f882:	|  |      addq.l #4,sp
    f884:	|  |      move.l d0,d1
    f886:	|  |      moveq #28,d0
    f888:	|  |      add.l 8(sp),d0
    f88c:	|  |      move.l d1,-(sp)
    f88e:	|  |      pea 1 <_start+0x1>
    f892:	|  |      move.l d0,-(sp)
    f894:	|  |      jsr 151cc <setVariable>
    f89a:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f89e:	|  |      moveq #24,d0
    f8a0:	|  |      add.l 8(sp),d0
    f8a4:	|  |      move.l d0,-(sp)
    f8a6:	|  |      jsr 1525e <trimStack>
    f8ac:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f8ae:	|  |      moveq #2,d0
    f8b0:	+--|----- bra.s f8ec <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f8b2:	|  \----> movea.l 8(sp),a0
    f8b6:	|         movea.l 24(a0),a0
    f8ba:	|         movea.l 4(a0),a0
    f8be:	|         move.l 4(a0),d1
    f8c2:	|         moveq #28,d0
    f8c4:	|         add.l 8(sp),d0
    f8c8:	|         move.l d1,-(sp)
    f8ca:	|         pea 1 <_start+0x1>
    f8ce:	|         move.l d0,-(sp)
    f8d0:	|         jsr 151cc <setVariable>
    f8d6:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f8da:	|         moveq #24,d0
    f8dc:	|         add.l 8(sp),d0
    f8e0:	|         move.l d0,-(sp)
    f8e2:	|         jsr 1525e <trimStack>
    f8e8:	|         addq.l #4,sp
			return BR_CONTINUE;
    f8ea:	|         moveq #2,d0
}
    f8ec:	\-------> rts

0000f8ee <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f8ee:	       movea.l 8(sp),a0
    f8f2:	       movea.l 24(a0),a0
    f8f6:	       move.l (a0),d0
    f8f8:	       moveq #6,d1
    f8fa:	       cmp.l d0,d1
    f8fc:	   /-- beq.s f910 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f8fe:	   |   pea 199d0 <line.c.05397aaf+0x44>
    f904:	   |   jsr 1733a <KPrintF>
    f90a:	   |   addq.l #4,sp
		return BR_ERROR;
    f90c:	   |   moveq #1,d0
    f90e:	/--|-- bra.s f944 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f910:	|  \-> moveq #28,d0
    f912:	|      add.l 8(sp),d0
    f916:	|      movea.l 8(sp),a0
    f91a:	|      move.l 24(a0),d1
    f91e:	|      move.l d0,-(sp)
    f920:	|      move.l d1,-(sp)
    f922:	|      jsr 143e0 <copyStack>
    f928:	|      addq.l #8,sp
    f92a:	|      tst.w d0
    f92c:	|  /-- bne.s f932 <builtIn_copyStack+0x44>
    f92e:	|  |   moveq #1,d0
    f930:	+--|-- bra.s f944 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f932:	|  \-> moveq #24,d0
    f934:	|      add.l 8(sp),d0
    f938:	|      move.l d0,-(sp)
    f93a:	|      jsr 1525e <trimStack>
    f940:	|      addq.l #4,sp
	return BR_CONTINUE;
    f942:	|      moveq #2,d0
}
    f944:	\----> rts

0000f946 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f946:	       movea.l 8(sp),a0
    f94a:	       movea.l 24(a0),a0
    f94e:	       movea.l 8(a0),a0
    f952:	       move.l (a0),d0
    f954:	       moveq #6,d1
    f956:	       cmp.l d0,d1
    f958:	   /-- beq.s f96e <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f95a:	   |   pea 199e9 <line.c.05397aaf+0x5d>
    f960:	   |   jsr 1733a <KPrintF>
    f966:	   |   addq.l #4,sp
		return BR_ERROR;
    f968:	   |   moveq #1,d0
    f96a:	/--|-- bra.w f9fc <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f96e:	|  \-> movea.l 8(sp),a0
    f972:	|      movea.l 24(a0),a0
    f976:	|      movea.l 8(a0),a0
    f97a:	|      move.l 4(a0),d0
    f97e:	|      move.l d0,d1
    f980:	|      movea.l 8(sp),a0
    f984:	|      move.l 24(a0),d0
    f988:	|      move.l d1,-(sp)
    f98a:	|      move.l d0,-(sp)
    f98c:	|      jsr 14116 <addVarToStack>
    f992:	|      addq.l #8,sp
    f994:	|      tst.w d0
    f996:	|  /-- bne.s f99c <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f998:	|  |   moveq #1,d0
    f99a:	+--|-- bra.s f9fc <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f99c:	|  \-> movea.l 8(sp),a0
    f9a0:	|      movea.l 24(a0),a0
    f9a4:	|      movea.l 8(a0),a0
    f9a8:	|      movea.l 4(a0),a0
    f9ac:	|      movea.l (a0),a0
    f9ae:	|      move.l 8(a0),d0
    f9b2:	|  /-- bne.s f9da <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f9b4:	|  |   movea.l 8(sp),a0
    f9b8:	|  |   movea.l 24(a0),a0
    f9bc:	|  |   movea.l 8(a0),a0
    f9c0:	|  |   movea.l 4(a0),a1
    f9c4:	|  |   movea.l 8(sp),a0
    f9c8:	|  |   movea.l 24(a0),a0
    f9cc:	|  |   movea.l 8(a0),a0
    f9d0:	|  |   movea.l 4(a0),a0
    f9d4:	|  |   move.l (a1),d0
    f9d6:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f9da:	|  \-> moveq #24,d0
    f9dc:	|      add.l 8(sp),d0
    f9e0:	|      move.l d0,-(sp)
    f9e2:	|      jsr 1525e <trimStack>
    f9e8:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f9ea:	|      moveq #24,d0
    f9ec:	|      add.l 8(sp),d0
    f9f0:	|      move.l d0,-(sp)
    f9f2:	|      jsr 1525e <trimStack>
    f9f8:	|      addq.l #4,sp
	return BR_CONTINUE;
    f9fa:	|      moveq #2,d0
}
    f9fc:	\----> rts

0000f9fe <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f9fe:	             movea.l 8(sp),a0
    fa02:	             movea.l 24(a0),a0
    fa06:	             movea.l 8(a0),a0
    fa0a:	             move.l (a0),d0
    fa0c:	             moveq #6,d1
    fa0e:	             cmp.l d0,d1
    fa10:	         /-- beq.s fa26 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    fa12:	         |   pea 199e9 <line.c.05397aaf+0x5d>
    fa18:	         |   jsr 1733a <KPrintF>
    fa1e:	         |   addq.l #4,sp
		return BR_ERROR;
    fa20:	         |   moveq #1,d0
    fa22:	/--------|-- bra.w fb14 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    fa26:	|        \-> movea.l 8(sp),a0
    fa2a:	|            movea.l 24(a0),a0
    fa2e:	|            movea.l 8(a0),a0
    fa32:	|            movea.l 4(a0),a0
    fa36:	|            move.l (a0),d0
    fa38:	|     /----- bne.s fa92 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fa3a:	|     |      movea.l 8(sp),a0
    fa3e:	|     |      movea.l 24(a0),a0
    fa42:	|     |      movea.l 8(a0),a0
    fa46:	|     |      move.l 4(a0),d0
    fa4a:	|     |      move.l d0,d1
    fa4c:	|     |      movea.l 8(sp),a0
    fa50:	|     |      move.l 24(a0),d0
    fa54:	|     |      move.l d1,-(sp)
    fa56:	|     |      move.l d0,-(sp)
    fa58:	|     |      jsr 14116 <addVarToStack>
    fa5e:	|     |      addq.l #8,sp
    fa60:	|     |      tst.w d0
    fa62:	|     |  /-- bne.s fa6a <builtIn_enqueue+0x6c>
			return BR_ERROR;
    fa64:	|     |  |   moveq #1,d0
    fa66:	+-----|--|-- bra.w fb14 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fa6a:	|     |  \-> movea.l 8(sp),a0
    fa6e:	|     |      movea.l 24(a0),a0
    fa72:	|     |      movea.l 8(a0),a0
    fa76:	|     |      movea.l 4(a0),a1
    fa7a:	|     |      movea.l 8(sp),a0
    fa7e:	|     |      movea.l 24(a0),a0
    fa82:	|     |      movea.l 8(a0),a0
    fa86:	|     |      movea.l 4(a0),a0
    fa8a:	|     |      move.l (a1),d0
    fa8c:	|     |      move.l d0,4(a0)
    fa90:	|  /--|----- bra.s faf2 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    fa92:	|  |  \----> movea.l 8(sp),a0
    fa96:	|  |         movea.l 24(a0),a0
    fa9a:	|  |         movea.l 8(a0),a0
    fa9e:	|  |         movea.l 4(a0),a0
    faa2:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    faa6:	|  |         move.l d0,d1
    faa8:	|  |         addq.l #8,d1
    faaa:	|  |         movea.l 8(sp),a0
    faae:	|  |         move.l 24(a0),d0
    fab2:	|  |         move.l d1,-(sp)
    fab4:	|  |         move.l d0,-(sp)
    fab6:	|  |         jsr 14116 <addVarToStack>
    fabc:	|  |         addq.l #8,sp
    fabe:	|  |         tst.w d0
    fac0:	|  |     /-- bne.s fac6 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    fac2:	|  |     |   moveq #1,d0
    fac4:	+--|-----|-- bra.s fb14 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    fac6:	|  |     \-> movea.l 8(sp),a0
    faca:	|  |         movea.l 24(a0),a0
    face:	|  |         movea.l 8(a0),a0
    fad2:	|  |         movea.l 4(a0),a0
    fad6:	|  |         movea.l 4(a0),a1
    fada:	|  |         movea.l 8(sp),a0
    fade:	|  |         movea.l 24(a0),a0
    fae2:	|  |         movea.l 8(a0),a0
    fae6:	|  |         movea.l 4(a0),a0
    faea:	|  |         move.l 8(a1),d0
    faee:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    faf2:	|  \-------> moveq #24,d0
    faf4:	|            add.l 8(sp),d0
    faf8:	|            move.l d0,-(sp)
    fafa:	|            jsr 1525e <trimStack>
    fb00:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    fb02:	|            moveq #24,d0
    fb04:	|            add.l 8(sp),d0
    fb08:	|            move.l d0,-(sp)
    fb0a:	|            jsr 1525e <trimStack>
    fb10:	|            addq.l #4,sp
	return BR_CONTINUE;
    fb12:	|            moveq #2,d0
}
    fb14:	\----------> rts

0000fb16 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    fb16:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fb18:	       movea.l 12(sp),a0
    fb1c:	       movea.l 24(a0),a0
    fb20:	       movea.l 8(a0),a0
    fb24:	       move.l (a0),d0
    fb26:	       moveq #6,d1
    fb28:	       cmp.l d0,d1
    fb2a:	   /-- beq.s fb40 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fb2c:	   |   pea 199d0 <line.c.05397aaf+0x44>
    fb32:	   |   jsr 1733a <KPrintF>
    fb38:	   |   addq.l #4,sp
		return BR_ERROR;
    fb3a:	   |   moveq #1,d0
    fb3c:	/--|-- bra.w fbd6 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    fb40:	|  \-> movea.l 12(sp),a0
    fb44:	|      movea.l 24(a0),a0
    fb48:	|      movea.l 8(a0),a0
    fb4c:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb50:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fb52:	|      movea.l 12(sp),a0
    fb56:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fb5a:	|      clr.l -(sp)
    fb5c:	|      move.l d1,-(sp)
    fb5e:	|      move.l d0,-(sp)
    fb60:	|      jsr 144b6 <deleteVarFromStack>
    fb66:	|      lea 12(sp),sp
    fb6a:	|      move.l d0,d1
    fb6c:	|      moveq #28,d0
    fb6e:	|      add.l 12(sp),d0
    fb72:	|      move.l d1,-(sp)
    fb74:	|      pea 1 <_start+0x1>
    fb78:	|      move.l d0,-(sp)
    fb7a:	|      jsr 151cc <setVariable>
    fb80:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fb84:	|      movea.l 12(sp),a0
    fb88:	|      movea.l 24(a0),a0
    fb8c:	|      movea.l 8(a0),a0
    fb90:	|      movea.l 4(a0),a0
    fb94:	|      move.l (a0),d0
    fb96:	|      movea.l 12(sp),a0
    fb9a:	|      movea.l 24(a0),a0
    fb9e:	|      movea.l 8(a0),a0
    fba2:	|      movea.l 4(a0),a2
    fba6:	|      move.l d0,-(sp)
    fba8:	|      jsr 15216 <stackFindLast>
    fbae:	|      addq.l #4,sp
    fbb0:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fbb4:	|      moveq #24,d0
    fbb6:	|      add.l 12(sp),d0
    fbba:	|      move.l d0,-(sp)
    fbbc:	|      jsr 1525e <trimStack>
    fbc2:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fbc4:	|      moveq #24,d0
    fbc6:	|      add.l 12(sp),d0
    fbca:	|      move.l d0,-(sp)
    fbcc:	|      jsr 1525e <trimStack>
    fbd2:	|      addq.l #4,sp
	return BR_CONTINUE;
    fbd4:	|      moveq #2,d0
}
    fbd6:	\----> movea.l (sp)+,a2
    fbd8:	       rts

0000fbda <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fbda:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fbdc:	       movea.l 12(sp),a0
    fbe0:	       movea.l 24(a0),a0
    fbe4:	       movea.l 8(a0),a0
    fbe8:	       move.l (a0),d0
    fbea:	       moveq #6,d1
    fbec:	       cmp.l d0,d1
    fbee:	   /-- beq.s fc04 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fbf0:	   |   pea 199d0 <line.c.05397aaf+0x44>
    fbf6:	   |   jsr 1733a <KPrintF>
    fbfc:	   |   addq.l #4,sp
		return BR_ERROR;
    fbfe:	   |   moveq #1,d0
    fc00:	/--|-- bra.w fc9c <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fc04:	|  \-> movea.l 12(sp),a0
    fc08:	|      movea.l 24(a0),a0
    fc0c:	|      movea.l 8(a0),a0
    fc10:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fc14:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fc16:	|      movea.l 12(sp),a0
    fc1a:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fc1e:	|      pea 1 <_start+0x1>
    fc22:	|      move.l d1,-(sp)
    fc24:	|      move.l d0,-(sp)
    fc26:	|      jsr 144b6 <deleteVarFromStack>
    fc2c:	|      lea 12(sp),sp
    fc30:	|      move.l d0,d1
    fc32:	|      moveq #28,d0
    fc34:	|      add.l 12(sp),d0
    fc38:	|      move.l d1,-(sp)
    fc3a:	|      pea 1 <_start+0x1>
    fc3e:	|      move.l d0,-(sp)
    fc40:	|      jsr 151cc <setVariable>
    fc46:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fc4a:	|      movea.l 12(sp),a0
    fc4e:	|      movea.l 24(a0),a0
    fc52:	|      movea.l 8(a0),a0
    fc56:	|      movea.l 4(a0),a0
    fc5a:	|      move.l (a0),d0
    fc5c:	|      movea.l 12(sp),a0
    fc60:	|      movea.l 24(a0),a0
    fc64:	|      movea.l 8(a0),a0
    fc68:	|      movea.l 4(a0),a2
    fc6c:	|      move.l d0,-(sp)
    fc6e:	|      jsr 15216 <stackFindLast>
    fc74:	|      addq.l #4,sp
    fc76:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fc7a:	|      moveq #24,d0
    fc7c:	|      add.l 12(sp),d0
    fc80:	|      move.l d0,-(sp)
    fc82:	|      jsr 1525e <trimStack>
    fc88:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fc8a:	|      moveq #24,d0
    fc8c:	|      add.l 12(sp),d0
    fc90:	|      move.l d0,-(sp)
    fc92:	|      jsr 1525e <trimStack>
    fc98:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc9a:	|      moveq #2,d0
}
    fc9c:	\----> movea.l (sp)+,a2
    fc9e:	       rts

0000fca0 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fca0:	       movea.l 8(sp),a0
    fca4:	       movea.l 24(a0),a0
    fca8:	       move.l (a0),d0
    fcaa:	       moveq #6,d1
    fcac:	       cmp.l d0,d1
    fcae:	   /-- beq.s fcc2 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fcb0:	   |   pea 199d0 <line.c.05397aaf+0x44>
    fcb6:	   |   jsr 1733a <KPrintF>
    fcbc:	   |   addq.l #4,sp
		return BR_ERROR;
    fcbe:	   |   moveq #1,d0
    fcc0:	/--|-- bra.s fd2c <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fcc2:	|  \-> movea.l 8(sp),a0
    fcc6:	|      movea.l 24(a0),a0
    fcca:	|      movea.l 4(a0),a0
    fcce:	|      move.l (a0),d0
    fcd0:	|  /-- bne.s fce4 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fcd2:	|  |   pea 19a01 <line.c.05397aaf+0x75>
    fcd8:	|  |   jsr 1733a <KPrintF>
    fcde:	|  |   addq.l #4,sp
		return BR_ERROR;
    fce0:	|  |   moveq #1,d0
    fce2:	+--|-- bra.s fd2c <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fce4:	|  \-> moveq #28,d0
    fce6:	|      add.l 8(sp),d0
    fcea:	|      movea.l 8(sp),a0
    fcee:	|      movea.l 24(a0),a0
    fcf2:	|      movea.l 4(a0),a0
    fcf6:	|      move.l (a0),d1
    fcf8:	|      move.l d0,-(sp)
    fcfa:	|      move.l d1,-(sp)
    fcfc:	|      jsr 14d94 <copyVariable>
    fd02:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fd04:	|      movea.l 8(sp),a0
    fd08:	|      movea.l 24(a0),a0
    fd0c:	|      move.l 4(a0),d0
    fd10:	|      move.l d0,-(sp)
    fd12:	|      jsr 1525e <trimStack>
    fd18:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fd1a:	|      moveq #24,d0
    fd1c:	|      add.l 8(sp),d0
    fd20:	|      move.l d0,-(sp)
    fd22:	|      jsr 1525e <trimStack>
    fd28:	|      addq.l #4,sp
	return BR_CONTINUE;
    fd2a:	|      moveq #2,d0
}
    fd2c:	\----> rts

0000fd2e <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fd2e:	       movea.l 8(sp),a0
    fd32:	       movea.l 24(a0),a0
    fd36:	       move.l (a0),d0
    fd38:	       moveq #6,d1
    fd3a:	       cmp.l d0,d1
    fd3c:	   /-- beq.s fd50 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fd3e:	   |   pea 199d0 <line.c.05397aaf+0x44>
    fd44:	   |   jsr 1733a <KPrintF>
    fd4a:	   |   addq.l #4,sp
		return BR_ERROR;
    fd4c:	   |   moveq #1,d0
    fd4e:	/--|-- bra.s fda4 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fd50:	|  \-> movea.l 8(sp),a0
    fd54:	|      movea.l 24(a0),a0
    fd58:	|      movea.l 4(a0),a0
    fd5c:	|      move.l (a0),d0
    fd5e:	|  /-- bne.s fd72 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fd60:	|  |   pea 19a01 <line.c.05397aaf+0x75>
    fd66:	|  |   jsr 1733a <KPrintF>
    fd6c:	|  |   addq.l #4,sp
		return BR_ERROR;
    fd6e:	|  |   moveq #1,d0
    fd70:	+--|-- bra.s fda4 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fd72:	|  \-> moveq #28,d0
    fd74:	|      add.l 8(sp),d0
    fd78:	|      movea.l 8(sp),a0
    fd7c:	|      movea.l 24(a0),a0
    fd80:	|      movea.l 4(a0),a0
    fd84:	|      move.l (a0),d1
    fd86:	|      move.l d0,-(sp)
    fd88:	|      move.l d1,-(sp)
    fd8a:	|      jsr 14d94 <copyVariable>
    fd90:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fd92:	|      moveq #24,d0
    fd94:	|      add.l 8(sp),d0
    fd98:	|      move.l d0,-(sp)
    fd9a:	|      jsr 1525e <trimStack>
    fda0:	|      addq.l #4,sp
	return BR_CONTINUE;
    fda2:	|      moveq #2,d0
}
    fda4:	\----> rts

0000fda6 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fda6:	       movea.l 8(sp),a0
    fdaa:	       movea.l 24(a0),a0
    fdae:	       move.l (a0),d0
    fdb0:	       moveq #6,d1
    fdb2:	       cmp.l d0,d1
    fdb4:	   /-- beq.s fdc8 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fdb6:	   |   pea 199d0 <line.c.05397aaf+0x44>
    fdbc:	   |   jsr 1733a <KPrintF>
    fdc2:	   |   addq.l #4,sp
		return BR_ERROR;
    fdc4:	   |   moveq #1,d0
    fdc6:	/--|-- bra.s fe1e <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fdc8:	|  \-> movea.l 8(sp),a0
    fdcc:	|      movea.l 24(a0),a0
    fdd0:	|      movea.l 4(a0),a0
    fdd4:	|      move.l (a0),d0
    fdd6:	|  /-- bne.s fdea <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fdd8:	|  |   pea 19a01 <line.c.05397aaf+0x75>
    fdde:	|  |   jsr 1733a <KPrintF>
    fde4:	|  |   addq.l #4,sp
		return BR_ERROR;
    fde6:	|  |   moveq #1,d0
    fde8:	+--|-- bra.s fe1e <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fdea:	|  \-> moveq #28,d0
    fdec:	|      add.l 8(sp),d0
    fdf0:	|      movea.l 8(sp),a0
    fdf4:	|      movea.l 24(a0),a0
    fdf8:	|      movea.l 4(a0),a0
    fdfc:	|      move.l 4(a0),d1
    fe00:	|      move.l d0,-(sp)
    fe02:	|      move.l d1,-(sp)
    fe04:	|      jsr 14d94 <copyVariable>
    fe0a:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fe0c:	|      moveq #24,d0
    fe0e:	|      add.l 8(sp),d0
    fe12:	|      move.l d0,-(sp)
    fe14:	|      jsr 1525e <trimStack>
    fe1a:	|      addq.l #4,sp
	return BR_CONTINUE;
    fe1c:	|      moveq #2,d0
}
    fe1e:	\----> rts

0000fe20 <builtIn_random>:

builtIn(random)
{
    fe20:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    fe22:	       movea.l 12(sp),a0
    fe26:	       move.l 24(a0),d0
    fe2a:	       move.l d0,-(sp)
    fe2c:	       pea 1 <_start+0x1>
    fe30:	       move.l sp,d0
    fe32:	       addq.l #8,d0
    fe34:	       move.l d0,-(sp)
    fe36:	       jsr 148da <getValueType>
    fe3c:	       lea 12(sp),sp
    fe40:	       tst.w d0
    fe42:	   /-- bne.s fe48 <builtIn_random+0x28>
		return BR_ERROR;
    fe44:	   |   moveq #1,d0
    fe46:	/--|-- bra.s fe92 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    fe48:	|  \-> moveq #24,d0
    fe4a:	|      add.l 12(sp),d0
    fe4e:	|      move.l d0,-(sp)
    fe50:	|      jsr 1525e <trimStack>
    fe56:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    fe58:	|      move.l (sp),d0
    fe5a:	|  /-- bgt.s fe60 <builtIn_random+0x40>
    fe5c:	|  |   moveq #1,d0
    fe5e:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    fe60:	|  \-> jsr 15efa <rand>
    fe66:	|      move.l d0,d1
    fe68:	|      move.l (sp),d0
    fe6a:	|      move.l d0,-(sp)
    fe6c:	|      move.l d1,-(sp)
    fe6e:	|      jsr 17da0 <__umodsi3>
    fe74:	|      addq.l #8,sp
    fe76:	|      move.l d0,d1
    fe78:	|      moveq #28,d0
    fe7a:	|      add.l 12(sp),d0
    fe7e:	|      move.l d1,-(sp)
    fe80:	|      pea 1 <_start+0x1>
    fe84:	|      move.l d0,-(sp)
    fe86:	|      jsr 151cc <setVariable>
    fe8c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    fe90:	|      moveq #2,d0
}
    fe92:	\----> addq.l #4,sp
    fe94:	       rts

0000fe96 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    fe96:	nop
    fe98:	rts

0000fe9a <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    fe9a:	moveq #2,d0
}
    fe9c:	rts

0000fe9e <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    fe9e:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    fea0:	       movea.l 12(sp),a0
    fea4:	       move.l 24(a0),d0
    fea8:	       move.l d0,-(sp)
    feaa:	       pea 1 <_start+0x1>
    feae:	       move.l sp,d0
    feb0:	       addq.l #8,d0
    feb2:	       move.l d0,-(sp)
    feb4:	       jsr 148da <getValueType>
    feba:	       lea 12(sp),sp
    febe:	       tst.w d0
    fec0:	   /-- bne.s fed4 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    fec2:	   |   pea 19a14 <line.c.05397aaf+0x88>
    fec8:	   |   jsr 1733a <KPrintF>
    fece:	   |   addq.l #4,sp
		return BR_ERROR;
    fed0:	   |   moveq #1,d0
    fed2:	/--|-- bra.s ff14 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    fed4:	|  \-> moveq #24,d0
    fed6:	|      add.l 12(sp),d0
    feda:	|      move.l d0,-(sp)
    fedc:	|      jsr 1525e <trimStack>
    fee2:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fee4:	|      move.l (sp),d0
    fee6:	|      move.l d0,d0
    fee8:	|      move.w d0,1c9a2 <textPaletteIndex>

	if( textPaletteIndex > 31) {
    feee:	|      move.w 1c9a2 <textPaletteIndex>,d0
    fef4:	|      cmpi.w #31,d0
    fef8:	|  /-- bls.s ff12 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    fefa:	|  |   pea 19a3b <line.c.05397aaf+0xaf>
    ff00:	|  |   jsr 1733a <KPrintF>
    ff06:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    ff08:	|  |   clr.w 1c9a2 <textPaletteIndex>
		return BR_ERROR;
    ff0e:	|  |   moveq #1,d0
    ff10:	+--|-- bra.s ff14 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    ff12:	|  \-> moveq #2,d0
}
    ff14:	\----> addq.l #4,sp
    ff16:	       rts

0000ff18 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ff18:	moveq #2,d0
}
    ff1a:	rts

0000ff1c <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    ff1c:	moveq #2,d0
}
    ff1e:	rts

0000ff20 <builtIn_setFont>:


builtIn(setFont)
{
    ff20:	       lea -16(sp),sp
    ff24:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    ff26:	       movea.l 28(sp),a0
    ff2a:	       move.l 24(a0),d0
    ff2e:	       move.l d0,-(sp)
    ff30:	       pea 1 <_start+0x1>
    ff34:	       lea 12(sp),a0
    ff38:	       move.l a0,-(sp)
    ff3a:	       jsr 148da <getValueType>
    ff40:	       lea 12(sp),sp
    ff44:	       tst.w d0
    ff46:	   /-- bne.s ff4e <builtIn_setFont+0x2e>
    ff48:	   |   moveq #1,d0
    ff4a:	/--|-- bra.w fffc <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    ff4e:	|  \-> moveq #24,d0
    ff50:	|      add.l 28(sp),d0
    ff54:	|      move.l d0,-(sp)
    ff56:	|      jsr 1525e <trimStack>
    ff5c:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    ff5e:	|      movea.l 28(sp),a0
    ff62:	|      move.l 24(a0),d0
    ff66:	|      move.l d0,-(sp)
    ff68:	|      jsr 14eb0 <getTextFromAnyVar>
    ff6e:	|      addq.l #4,sp
    ff70:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    ff74:	|  /-- bne.s ff7c <builtIn_setFont+0x5c>
    ff76:	|  |   moveq #1,d0
    ff78:	+--|-- bra.w fffc <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    ff7c:	|  \-> moveq #24,d0
    ff7e:	|      add.l 28(sp),d0
    ff82:	|      move.l d0,-(sp)
    ff84:	|      jsr 1525e <trimStack>
    ff8a:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    ff8c:	|      movea.l 28(sp),a0
    ff90:	|      move.l 24(a0),d0
    ff94:	|      move.l d0,-(sp)
    ff96:	|      pea 5 <_start+0x5>
    ff9a:	|      lea 16(sp),a0
    ff9e:	|      move.l a0,-(sp)
    ffa0:	|      jsr 148da <getValueType>
    ffa6:	|      lea 12(sp),sp
    ffaa:	|      tst.w d0
    ffac:	|  /-- bne.s ffb2 <builtIn_setFont+0x92>
    ffae:	|  |   moveq #1,d0
    ffb0:	+--|-- bra.s fffc <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    ffb2:	|  \-> moveq #24,d0
    ffb4:	|      add.l 28(sp),d0
    ffb8:	|      move.l d0,-(sp)
    ffba:	|      jsr 1525e <trimStack>
    ffc0:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    ffc2:	|      move.l 4(sp),d1
    ffc6:	|      move.l 8(sp),d0
    ffca:	|      move.l d1,-(sp)
    ffcc:	|      move.l 20(sp),-(sp)
    ffd0:	|      move.l d0,-(sp)
    ffd2:	|      jsr 1570a <loadFont>
    ffd8:	|      lea 12(sp),sp
    ffdc:	|      tst.w d0
    ffde:	|  /-- bne.s ffe4 <builtIn_setFont+0xc4>
    ffe0:	|  |   moveq #1,d0
    ffe2:	+--|-- bra.s fffc <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    ffe4:	|  \-> move.l 16(sp),12(sp)
    ffea:	|      move.l 1ca88 <SysBase>,d0
    fff0:	|      movea.l d0,a6
    fff2:	|      movea.l 12(sp),a1
    fff6:	|      jsr -690(a6)

    return BR_CONTINUE;
    fffa:	|      moveq #2,d0
}
    fffc:	\----> movea.l (sp)+,a6
    fffe:	       lea 16(sp),sp
   10002:	       rts

00010004 <builtIn_inFont>:

builtIn(inFont)
{
   10004:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   10006:	       movea.l 12(sp),a0
   1000a:	       move.l 24(a0),d0
   1000e:	       move.l d0,-(sp)
   10010:	       jsr 14eb0 <getTextFromAnyVar>
   10016:	       addq.l #4,sp
   10018:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
   1001a:	   /-- bne.s 10020 <builtIn_inFont+0x1c>
   1001c:	   |   moveq #1,d0
   1001e:	/--|-- bra.s 10056 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
   10020:	|  \-> moveq #24,d0
   10022:	|      add.l 12(sp),d0
   10026:	|      move.l d0,-(sp)
   10028:	|      jsr 1525e <trimStack>
   1002e:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
   10030:	|      move.l (sp),-(sp)
   10032:	|      jsr 156f8 <isInFont>
   10038:	|      addq.l #4,sp
   1003a:	|      movea.w d0,a0
   1003c:	|      moveq #28,d0
   1003e:	|      add.l 12(sp),d0
   10042:	|      move.l a0,-(sp)
   10044:	|      pea 1 <_start+0x1>
   10048:	|      move.l d0,-(sp)
   1004a:	|      jsr 151cc <setVariable>
   10050:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10054:	|      moveq #2,d0
}
   10056:	\----> addq.l #4,sp
   10058:	       rts

0001005a <builtIn_pasteString>:

builtIn(pasteString)
{
   1005a:	       lea -16(sp),sp
   1005e:	       move.l a6,-(sp)
   10060:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10062:	       movea.l 32(sp),a0
   10066:	       move.l 24(a0),d0
   1006a:	       move.l d0,-(sp)
   1006c:	       jsr 14eb0 <getTextFromAnyVar>
   10072:	       addq.l #4,sp
   10074:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   10078:	       moveq #24,d0
   1007a:	       add.l 32(sp),d0
   1007e:	       move.l d0,-(sp)
   10080:	       jsr 1525e <trimStack>
   10086:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10088:	       movea.l 32(sp),a0
   1008c:	       move.l 24(a0),d0
   10090:	       move.l d0,-(sp)
   10092:	       pea 1 <_start+0x1>
   10096:	       lea 20(sp),a0
   1009a:	       move.l a0,-(sp)
   1009c:	       jsr 148da <getValueType>
   100a2:	       lea 12(sp),sp
   100a6:	       tst.w d0
   100a8:	   /-- bne.s 100b0 <builtIn_pasteString+0x56>
   100aa:	   |   moveq #1,d0
   100ac:	/--|-- bra.w 10152 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   100b0:	|  \-> moveq #24,d0
   100b2:	|      add.l 32(sp),d0
   100b6:	|      move.l d0,-(sp)
   100b8:	|      jsr 1525e <trimStack>
   100be:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   100c0:	|      movea.l 32(sp),a0
   100c4:	|      move.l 24(a0),d0
   100c8:	|      move.l d0,-(sp)
   100ca:	|      pea 1 <_start+0x1>
   100ce:	|      lea 16(sp),a0
   100d2:	|      move.l a0,-(sp)
   100d4:	|      jsr 148da <getValueType>
   100da:	|      lea 12(sp),sp
   100de:	|      tst.w d0
   100e0:	|  /-- bne.s 100e6 <builtIn_pasteString+0x8c>
   100e2:	|  |   moveq #1,d0
   100e4:	+--|-- bra.s 10152 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   100e6:	|  \-> moveq #24,d0
   100e8:	|      add.l 32(sp),d0
   100ec:	|      move.l d0,-(sp)
   100ee:	|      jsr 1525e <trimStack>
   100f4:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
   100f6:	|      move.l 8(sp),d0
   100fa:	|      cmpi.l #65535,d0
   10100:	|  /-- bne.s 10120 <builtIn_pasteString+0xc6>
   10102:	|  |   move.l 1c9dc <winWidth>,d2
   10108:	|  |   move.l 20(sp),-(sp)
   1010c:	|  |   jsr 159bc <stringWidth>
   10112:	|  |   addq.l #4,sp
   10114:	|  |   move.l d2,d1
   10116:	|  |   sub.l d0,d1
   10118:	|  |   move.l d1,d0
   1011a:	|  |   lsr.l #1,d0
   1011c:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   10120:	|  \-> move.l 12(sp),d1
   10124:	|      move.l 8(sp),d0
   10128:	|      move.l d1,-(sp)
   1012a:	|      move.l d0,-(sp)
   1012c:	|      move.l 28(sp),-(sp)
   10130:	|      jsr 158de <pasteStringToBackdrop>
   10136:	|      lea 12(sp),sp
    FreeVec(newText); 
   1013a:	|      move.l 20(sp),16(sp)
   10140:	|      move.l 1ca88 <SysBase>,d0
   10146:	|      movea.l d0,a6
   10148:	|      movea.l 16(sp),a1
   1014c:	|      jsr -690(a6)
    return BR_CONTINUE;
   10150:	|      moveq #2,d0
}
   10152:	\----> move.l (sp)+,d2
   10154:	       movea.l (sp)+,a6
   10156:	       lea 16(sp),sp
   1015a:	       rts

0001015c <builtIn_anim>:

builtIn(anim)
{
   1015c:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   10160:	       moveq #1,d0
   10162:	       cmp.l 16(sp),d0
   10166:	   /-- blt.s 1017c <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10168:	   |   pea 19a65 <line.c.05397aaf+0xd9>
   1016e:	   |   jsr 1733a <KPrintF>
   10174:	   |   addq.l #4,sp
		return BR_ERROR;
   10176:	   |   moveq #1,d0
   10178:	/--|-- bra.w 1020a <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   1017c:	|  \-> moveq #24,d1
   1017e:	|      add.l 20(sp),d1
   10182:	|      move.l 16(sp),d0
   10186:	|      subq.l #1,d0
   10188:	|      move.l d1,-(sp)
   1018a:	|      move.l d0,-(sp)
   1018c:	|      jsr 97ea <createPersonaAnim>
   10192:	|      addq.l #8,sp
   10194:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10198:	|      movea.l 20(sp),a0
   1019c:	|      move.l 24(a0),d0
   101a0:	|      move.l d0,-(sp)
   101a2:	|      pea 5 <_start+0x5>
   101a6:	|      lea 8(sp),a0
   101aa:	|      move.l a0,-(sp)
   101ac:	|      jsr 148da <getValueType>
   101b2:	|      lea 12(sp),sp
   101b6:	|      tst.w d0
   101b8:	|  /-- bne.s 101be <builtIn_anim+0x62>
   101ba:	|  |   moveq #1,d0
   101bc:	+--|-- bra.s 1020a <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   101be:	|  \-> moveq #24,d0
   101c0:	|      add.l 20(sp),d0
   101c4:	|      move.l d0,-(sp)
   101c6:	|      jsr 1525e <trimStack>
   101cc:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   101ce:	|      move.l (sp),d0
   101d0:	|      move.l d0,-(sp)
   101d2:	|      jsr 1605c <loadBankForAnim>
   101d8:	|      addq.l #4,sp
   101da:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   101de:	|  /-- bne.s 101e4 <builtIn_anim+0x88>
   101e0:	|  |   moveq #1,d0
   101e2:	+--|-- bra.s 1020a <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   101e4:	|  \-> move.l 4(sp),-(sp)
   101e8:	|      move.l 12(sp),-(sp)
   101ec:	|      jsr b694 <setBankFile>
   101f2:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   101f4:	|      moveq #28,d0
   101f6:	|      add.l 20(sp),d0
   101fa:	|      move.l 8(sp),-(sp)
   101fe:	|      move.l d0,-(sp)
   10200:	|      jsr 15188 <newAnimationVariable>
   10206:	|      addq.l #8,sp
	return BR_CONTINUE;
   10208:	|      moveq #2,d0
}
   1020a:	\----> lea 12(sp),sp
   1020e:	       rts

00010210 <builtIn_costume>:

builtIn(costume)
{
   10210:	          lea -32(sp),sp
   10214:	          move.l a6,-(sp)
   10216:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10218:	          moveq #8,d0
   1021a:	          move.l d0,32(sp)
   1021e:	          clr.l 28(sp)
   10222:	          move.l 1ca88 <SysBase>,d0
   10228:	          movea.l d0,a6
   1022a:	          move.l 32(sp),d0
   1022e:	          move.l 28(sp),d1
   10232:	          jsr -684(a6)
   10236:	          move.l d0,24(sp)
   1023a:	          move.l 24(sp),d0
   1023e:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   10242:	      /-- bne.s 1024a <builtIn_costume+0x3a>
   10244:	      |   moveq #1,d0
   10246:	/-----|-- bra.w 10332 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   1024a:	|     \-> move.l 44(sp),d0
   1024e:	|         pea 3 <_start+0x3>
   10252:	|         move.l d0,-(sp)
   10254:	|         jsr 17d44 <__divsi3>
   1025a:	|         addq.l #8,sp
   1025c:	|         movea.l 20(sp),a0
   10260:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10264:	|         tst.l 44(sp)
   10268:	|     /-- beq.s 1027e <builtIn_costume+0x6e>
   1026a:	|     |   movea.l 20(sp),a0
   1026e:	|     |   move.l 4(a0),d1
   10272:	|     |   move.l d1,d0
   10274:	|     |   add.l d0,d0
   10276:	|     |   add.l d1,d0
   10278:	|     |   cmp.l 44(sp),d0
   1027c:	|  /--|-- beq.s 10292 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   1027e:	|  |  \-> pea 19a9f <line.c.05397aaf+0x113>
   10284:	|  |      jsr 1733a <KPrintF>
   1028a:	|  |      addq.l #4,sp
        return BR_ERROR;
   1028c:	|  |      moveq #1,d0
   1028e:	+--|----- bra.w 10332 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   10292:	|  \----> move.l 44(sp),d0
   10296:	|         add.l d0,d0
   10298:	|         add.l d0,d0
   1029a:	|         move.l d0,16(sp)
   1029e:	|         clr.l 12(sp)
   102a2:	|         move.l 1ca88 <SysBase>,d0
   102a8:	|         movea.l d0,a6
   102aa:	|         move.l 16(sp),d0
   102ae:	|         move.l 12(sp),d1
   102b2:	|         jsr -684(a6)
   102b6:	|         move.l d0,8(sp)
   102ba:	|         move.l 8(sp),d0
   102be:	|         movea.l 20(sp),a0
   102c2:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   102c4:	|         movea.l 20(sp),a0
   102c8:	|         move.l (a0),d0
   102ca:	|     /-- bne.s 102d0 <builtIn_costume+0xc0>
   102cc:	|     |   moveq #1,d0
   102ce:	+-----|-- bra.s 10332 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   102d0:	|     \-> move.l 44(sp),d0
   102d4:	|         subq.l #1,d0
   102d6:	|         move.l d0,36(sp)
   102da:	|     /-- bra.s 10316 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   102dc:	|  /--|-> movea.l 48(sp),a0
   102e0:	|  |  |   move.l 24(a0),d0
   102e4:	|  |  |   movea.l 20(sp),a0
   102e8:	|  |  |   movea.l (a0),a0
   102ea:	|  |  |   move.l 36(sp),d1
   102ee:	|  |  |   add.l d1,d1
   102f0:	|  |  |   add.l d1,d1
   102f2:	|  |  |   lea (0,a0,d1.l),a2
   102f6:	|  |  |   move.l d0,-(sp)
   102f8:	|  |  |   jsr 14db2 <getAnimationFromVar>
   102fe:	|  |  |   addq.l #4,sp
   10300:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   10302:	|  |  |   moveq #24,d0
   10304:	|  |  |   add.l 48(sp),d0
   10308:	|  |  |   move.l d0,-(sp)
   1030a:	|  |  |   jsr 1525e <trimStack>
   10310:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   10312:	|  |  |   subq.l #1,36(sp)
   10316:	|  |  \-> tst.l 36(sp)
   1031a:	|  \----- bge.s 102dc <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   1031c:	|         moveq #28,d0
   1031e:	|         add.l 48(sp),d0
   10322:	|         move.l 20(sp),-(sp)
   10326:	|         move.l d0,-(sp)
   10328:	|         jsr 151aa <newCostumeVariable>
   1032e:	|         addq.l #8,sp
    return BR_CONTINUE;
   10330:	|         moveq #2,d0
}
   10332:	\-------> movea.l (sp)+,a2
   10334:	          movea.l (sp)+,a6
   10336:	          lea 32(sp),sp
   1033a:	          rts

0001033c <builtIn_launch>:

builtIn(launch)
{
   1033c:	          lea -20(sp),sp
   10340:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   10342:	          movea.l 32(sp),a0
   10346:	          move.l 24(a0),d0
   1034a:	          move.l d0,-(sp)
   1034c:	          jsr 14eb0 <getTextFromAnyVar>
   10352:	          addq.l #4,sp
   10354:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   10358:	      /-- bne.s 10360 <builtIn_launch+0x24>
   1035a:	      |   moveq #1,d0
   1035c:	/-----|-- bra.w 1048e <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   10360:	|     \-> move.l 20(sp),-(sp)
   10364:	|         jsr 2fe <encodeFilename>
   1036a:	|         addq.l #4,sp
   1036c:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   10370:	|         moveq #24,d0
   10372:	|         add.l 32(sp),d0
   10376:	|         move.l d0,-(sp)
   10378:	|         jsr 1525e <trimStack>
   1037e:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   10380:	|         movea.l 20(sp),a0
   10384:	|         move.b (a0),d0
   10386:	|         cmpi.b #104,d0
   1038a:	|  /----- bne.s 103f4 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   1038c:	|  |      movea.l 20(sp),a0
   10390:	|  |      addq.l #1,a0
   10392:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   10394:	|  |      cmpi.b #116,d0
   10398:	|  +----- bne.s 103f4 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   1039a:	|  |      movea.l 20(sp),a0
   1039e:	|  |      addq.l #2,a0
   103a0:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   103a2:	|  |      cmpi.b #116,d0
   103a6:	|  +----- bne.s 103f4 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   103a8:	|  |      movea.l 20(sp),a0
   103ac:	|  |      addq.l #3,a0
   103ae:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   103b0:	|  |      cmpi.b #112,d0
   103b4:	|  +----- bne.s 103f4 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   103b6:	|  |      movea.l 20(sp),a0
   103ba:	|  |      addq.l #4,a0
   103bc:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   103be:	|  |      cmpi.b #58,d0
   103c2:	|  |  /-- beq.s 103e0 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   103c4:	|  |  |   movea.l 20(sp),a0
   103c8:	|  |  |   addq.l #4,a0
   103ca:	|  |  |   move.b (a0),d0
   103cc:	|  |  |   cmpi.b #115,d0
   103d0:	|  +--|-- bne.s 103f4 <builtIn_launch+0xb8>
   103d2:	|  |  |   movea.l 20(sp),a0
   103d6:	|  |  |   addq.l #5,a0
   103d8:	|  |  |   move.b (a0),d0
   103da:	|  |  |   cmpi.b #58,d0
   103de:	|  +--|-- bne.s 103f4 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   103e0:	|  |  \-> move.l 20(sp),-(sp)
   103e4:	|  |      jsr b8 <copyString>
   103ea:	|  |      addq.l #4,sp
   103ec:	|  |      move.l d0,1cb4a <launchMe>
   103f2:	|  |  /-- bra.s 10446 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   103f4:	|  \--|-> move.l 1c9f0 <gamePath>,d0
   103fa:	|     |   pea 19aea <line.c.05397aaf+0x15e>
   10400:	|     |   move.l d0,-(sp)
   10402:	|     |   jsr 13e06 <joinStrings>
   10408:	|     |   addq.l #8,sp
   1040a:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   1040e:	|     |   move.l 16(sp),-(sp)
   10412:	|     |   move.l 16(sp),-(sp)
   10416:	|     |   jsr 13e06 <joinStrings>
   1041c:	|     |   addq.l #8,sp
   1041e:	|     |   move.l d0,1cb4a <launchMe>
        FreeVec(newText);
   10424:	|     |   move.l 16(sp),8(sp)
   1042a:	|     |   move.l 1ca88 <SysBase>,d0
   10430:	|     |   movea.l d0,a6
   10432:	|     |   movea.l 8(sp),a1
   10436:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   1043a:	|     |   move.l 1cb4a <launchMe>,d0
   10440:	|     +-- bne.s 10446 <builtIn_launch+0x10a>
   10442:	|     |   moveq #1,d0
   10444:	+-----|-- bra.s 1048e <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   10446:	|     \-> move.l 20(sp),4(sp)
   1044c:	|         move.l 1ca88 <SysBase>,d0
   10452:	|         movea.l d0,a6
   10454:	|         movea.l 4(sp),a1
   10458:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   1045c:	|         clr.l -(sp)
   1045e:	|         jsr 4172 <setGraphicsWindow>
   10464:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   10466:	|         moveq #28,d0
   10468:	|         add.l 32(sp),d0
   1046c:	|         pea 1 <_start+0x1>
   10470:	|         pea 1 <_start+0x1>
   10474:	|         move.l d0,-(sp)
   10476:	|         jsr 151cc <setVariable>
   1047c:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   10480:	|         moveq #28,d0
   10482:	|         add.l 32(sp),d0
   10486:	|         move.l d0,1cb4e <launchResult>

    return BR_KEEP_AND_PAUSE;
   1048c:	|         moveq #0,d0
}
   1048e:	\-------> movea.l (sp)+,a6
   10490:	          lea 20(sp),sp
   10494:	          rts

00010496 <builtIn_pause>:

builtIn(pause)
{
   10496:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10498:	       movea.l 12(sp),a0
   1049c:	       move.l 24(a0),d0
   104a0:	       move.l d0,-(sp)
   104a2:	       pea 1 <_start+0x1>
   104a6:	       move.l sp,d0
   104a8:	       addq.l #8,d0
   104aa:	       move.l d0,-(sp)
   104ac:	       jsr 148da <getValueType>
   104b2:	       lea 12(sp),sp
   104b6:	       tst.w d0
   104b8:	   /-- bne.s 104be <builtIn_pause+0x28>
   104ba:	   |   moveq #1,d0
   104bc:	/--|-- bra.s 104ec <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   104be:	|  \-> moveq #24,d0
   104c0:	|      add.l 12(sp),d0
   104c4:	|      move.l d0,-(sp)
   104c6:	|      jsr 1525e <trimStack>
   104cc:	|      addq.l #4,sp
	if (theTime > 0) {
   104ce:	|      move.l (sp),d0
   104d0:	|  /-- ble.s 104ea <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   104d2:	|  |   move.l (sp),d0
   104d4:	|  |   subq.l #1,d0
   104d6:	|  |   movea.l 12(sp),a0
   104da:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   104de:	|  |   movea.l 12(sp),a0
   104e2:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   104e6:	|  |   moveq #0,d0
   104e8:	+--|-- bra.s 104ec <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   104ea:	|  \-> moveq #2,d0
}
   104ec:	\----> addq.l #4,sp
   104ee:	       rts

000104f0 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   104f0:	jsr 48da <completeTimers>
	return BR_CONTINUE;
   104f6:	moveq #2,d0
}
   104f8:	rts

000104fa <builtIn_callEvent>:

builtIn(callEvent)
{
   104fa:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   104fe:	       movea.l 20(sp),a0
   10502:	       move.l 24(a0),d0
   10506:	       move.l d0,-(sp)
   10508:	       pea 7 <_start+0x7>
   1050c:	       lea 8(sp),a0
   10510:	       move.l a0,-(sp)
   10512:	       jsr 148da <getValueType>
   10518:	       lea 12(sp),sp
   1051c:	       tst.w d0
   1051e:	   /-- bne.s 10526 <builtIn_callEvent+0x2c>
   10520:	   |   moveq #1,d0
   10522:	/--|-- bra.w 105bc <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10526:	|  \-> moveq #24,d0
   10528:	|      add.l 20(sp),d0
   1052c:	|      move.l d0,-(sp)
   1052e:	|      jsr 1525e <trimStack>
   10534:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10536:	|      movea.l 20(sp),a0
   1053a:	|      move.l 24(a0),d0
   1053e:	|      move.l d0,-(sp)
   10540:	|      pea 7 <_start+0x7>
   10544:	|      moveq #12,d0
   10546:	|      add.l sp,d0
   10548:	|      move.l d0,-(sp)
   1054a:	|      jsr 148da <getValueType>
   10550:	|      lea 12(sp),sp
   10554:	|      tst.w d0
   10556:	|  /-- bne.s 1055c <builtIn_callEvent+0x62>
   10558:	|  |   moveq #1,d0
   1055a:	+--|-- bra.s 105bc <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   1055c:	|  \-> moveq #24,d0
   1055e:	|      add.l 20(sp),d0
   10562:	|      move.l d0,-(sp)
   10564:	|      jsr 1525e <trimStack>
   1056a:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1056c:	|      move.l (sp),d1
   1056e:	|      move.l 4(sp),d0
   10572:	|      move.l d1,-(sp)
   10574:	|      move.l d0,-(sp)
   10576:	|      jsr d658 <getCombinationFunction>
   1057c:	|      addq.l #8,sp
   1057e:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   10582:	|  /-- beq.s 105a2 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   10584:	|  |   moveq #28,d0
   10586:	|  |   add.l 20(sp),d0
   1058a:	|  |   move.l 8(sp),-(sp)
   1058e:	|  |   pea 2 <_start+0x2>
   10592:	|  |   move.l d0,-(sp)
   10594:	|  |   jsr 151cc <setVariable>
   1059a:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   1059e:	|  |   moveq #4,d0
   105a0:	+--|-- bra.s 105bc <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   105a2:	|  \-> moveq #28,d0
   105a4:	|      add.l 20(sp),d0
   105a8:	|      clr.l -(sp)
   105aa:	|      pea 1 <_start+0x1>
   105ae:	|      move.l d0,-(sp)
   105b0:	|      jsr 151cc <setVariable>
   105b6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   105ba:	|      moveq #2,d0
}
   105bc:	\----> lea 12(sp),sp
   105c0:	       rts

000105c2 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   105c2:	move.w #1,1cb5a <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   105ca:	moveq #2,d0
}
   105cc:	rts

000105ce <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   105ce:	moveq #24,d0
   105d0:	add.l 8(sp),d0
   105d4:	move.l d0,-(sp)
   105d6:	jsr 1525e <trimStack>
   105dc:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   105de:	pea 19aec <line.c.05397aaf+0x160>
   105e4:	jsr 1733a <KPrintF>
   105ea:	addq.l #4,sp
	return BR_CONTINUE;
   105ec:	moveq #2,d0
}
   105ee:	rts

000105f0 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   105f0:	pea 19aec <line.c.05397aaf+0x160>
   105f6:	jsr 1733a <KPrintF>
   105fc:	addq.l #4,sp
	return BR_CONTINUE;
   105fe:	moveq #2,d0
}
   10600:	rts

00010602 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   10602:	pea 19aec <line.c.05397aaf+0x160>
   10608:	jsr 1733a <KPrintF>
   1060e:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   10610:	moveq #2,d0
}
   10612:	rts

00010614 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   10614:	pea 19aec <line.c.05397aaf+0x160>
   1061a:	jsr 1733a <KPrintF>
   10620:	addq.l #4,sp
	return BR_CONTINUE;
   10622:	moveq #2,d0
}
   10624:	rts

00010626 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10626:	pea 19aec <line.c.05397aaf+0x160>
   1062c:	jsr 1733a <KPrintF>
   10632:	addq.l #4,sp
	return BR_CONTINUE;
   10634:	moveq #2,d0
}
   10636:	rts

00010638 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10638:	pea 19aec <line.c.05397aaf+0x160>
   1063e:	jsr 1733a <KPrintF>
   10644:	addq.l #4,sp
	return BR_CONTINUE;
   10646:	moveq #2,d0
}
   10648:	rts

0001064a <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   1064a:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1064e:	       movea.l 20(sp),a0
   10652:	       move.l 24(a0),d0
   10656:	       move.l d0,-(sp)
   10658:	       pea 1 <_start+0x1>
   1065c:	       moveq #16,d0
   1065e:	       add.l sp,d0
   10660:	       move.l d0,-(sp)
   10662:	       jsr 148da <getValueType>
   10668:	       lea 12(sp),sp
   1066c:	       tst.w d0
   1066e:	   /-- bne.s 10676 <builtIn_startMusic+0x2c>
   10670:	   |   moveq #1,d0
   10672:	/--|-- bra.w 10716 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10676:	|  \-> moveq #24,d0
   10678:	|      add.l 20(sp),d0
   1067c:	|      move.l d0,-(sp)
   1067e:	|      jsr 1525e <trimStack>
   10684:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10686:	|      movea.l 20(sp),a0
   1068a:	|      move.l 24(a0),d0
   1068e:	|      move.l d0,-(sp)
   10690:	|      pea 1 <_start+0x1>
   10694:	|      moveq #12,d0
   10696:	|      add.l sp,d0
   10698:	|      move.l d0,-(sp)
   1069a:	|      jsr 148da <getValueType>
   106a0:	|      lea 12(sp),sp
   106a4:	|      tst.w d0
   106a6:	|  /-- bne.s 106ac <builtIn_startMusic+0x62>
   106a8:	|  |   moveq #1,d0
   106aa:	+--|-- bra.s 10716 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   106ac:	|  \-> moveq #24,d0
   106ae:	|      add.l 20(sp),d0
   106b2:	|      move.l d0,-(sp)
   106b4:	|      jsr 1525e <trimStack>
   106ba:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   106bc:	|      movea.l 20(sp),a0
   106c0:	|      move.l 24(a0),d0
   106c4:	|      move.l d0,-(sp)
   106c6:	|      pea 5 <_start+0x5>
   106ca:	|      lea 8(sp),a0
   106ce:	|      move.l a0,-(sp)
   106d0:	|      jsr 148da <getValueType>
   106d6:	|      lea 12(sp),sp
   106da:	|      tst.w d0
   106dc:	|  /-- bne.s 106e2 <builtIn_startMusic+0x98>
   106de:	|  |   moveq #1,d0
   106e0:	+--|-- bra.s 10716 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   106e2:	|  \-> moveq #24,d0
   106e4:	|      add.l 20(sp),d0
   106e8:	|      move.l d0,-(sp)
   106ea:	|      jsr 1525e <trimStack>
   106f0:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   106f2:	|      movea.l 8(sp),a0
   106f6:	|      move.l 4(sp),d1
   106fa:	|      move.l (sp),d0
   106fc:	|      move.l a0,-(sp)
   106fe:	|      move.l d1,-(sp)
   10700:	|      move.l d0,-(sp)
   10702:	|      jsr d264 <playMOD>
   10708:	|      lea 12(sp),sp
   1070c:	|      tst.w d0
   1070e:	|  /-- bne.s 10714 <builtIn_startMusic+0xca>
   10710:	|  |   moveq #2,d0
   10712:	+--|-- bra.s 10716 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10714:	|  \-> moveq #2,d0
}
   10716:	\----> lea 12(sp),sp
   1071a:	       rts

0001071c <builtIn_stopMusic>:

builtIn(stopMusic)
{
   1071c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1071e:	       movea.l 12(sp),a0
   10722:	       move.l 24(a0),d0
   10726:	       move.l d0,-(sp)
   10728:	       pea 1 <_start+0x1>
   1072c:	       move.l sp,d0
   1072e:	       addq.l #8,d0
   10730:	       move.l d0,-(sp)
   10732:	       jsr 148da <getValueType>
   10738:	       lea 12(sp),sp
   1073c:	       tst.w d0
   1073e:	   /-- bne.s 10744 <builtIn_stopMusic+0x28>
   10740:	   |   moveq #1,d0
   10742:	/--|-- bra.s 10762 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   10744:	|  \-> moveq #24,d0
   10746:	|      add.l 12(sp),d0
   1074a:	|      move.l d0,-(sp)
   1074c:	|      jsr 1525e <trimStack>
   10752:	|      addq.l #4,sp
	stopMOD (v);
   10754:	|      move.l (sp),d0
   10756:	|      move.l d0,-(sp)
   10758:	|      jsr d300 <stopMOD>
   1075e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10760:	|      moveq #2,d0
}
   10762:	\----> addq.l #4,sp
   10764:	       rts

00010766 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   10766:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10768:	       movea.l 16(sp),a0
   1076c:	       move.l 24(a0),d0
   10770:	       move.l d0,-(sp)
   10772:	       pea 1 <_start+0x1>
   10776:	       move.l sp,d0
   10778:	       addq.l #8,d0
   1077a:	       move.l d0,-(sp)
   1077c:	       jsr 148da <getValueType>
   10782:	       lea 12(sp),sp
   10786:	       tst.w d0
   10788:	   /-- bne.s 1078e <builtIn_setMusicVolume+0x28>
   1078a:	   |   moveq #1,d0
   1078c:	/--|-- bra.s 107e8 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   1078e:	|  \-> moveq #24,d0
   10790:	|      add.l 16(sp),d0
   10794:	|      move.l d0,-(sp)
   10796:	|      jsr 1525e <trimStack>
   1079c:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1079e:	|      movea.l 16(sp),a0
   107a2:	|      move.l 24(a0),d0
   107a6:	|      move.l d0,-(sp)
   107a8:	|      pea 1 <_start+0x1>
   107ac:	|      moveq #12,d0
   107ae:	|      add.l sp,d0
   107b0:	|      move.l d0,-(sp)
   107b2:	|      jsr 148da <getValueType>
   107b8:	|      lea 12(sp),sp
   107bc:	|      tst.w d0
   107be:	|  /-- bne.s 107c4 <builtIn_setMusicVolume+0x5e>
   107c0:	|  |   moveq #1,d0
   107c2:	+--|-- bra.s 107e8 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   107c4:	|  \-> moveq #24,d0
   107c6:	|      add.l 16(sp),d0
   107ca:	|      move.l d0,-(sp)
   107cc:	|      jsr 1525e <trimStack>
   107d2:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   107d4:	|      move.l (sp),d1
   107d6:	|      move.l 4(sp),d0
   107da:	|      move.l d1,-(sp)
   107dc:	|      move.l d0,-(sp)
   107de:	|      jsr d2e6 <setMusicVolume>
   107e4:	|      addq.l #8,sp
	return BR_CONTINUE;
   107e6:	|      moveq #2,d0
}
   107e8:	\----> addq.l #8,sp
   107ea:	       rts

000107ec <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   107ec:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   107ee:	       movea.l 12(sp),a0
   107f2:	       move.l 24(a0),d0
   107f6:	       move.l d0,-(sp)
   107f8:	       pea 1 <_start+0x1>
   107fc:	       move.l sp,d0
   107fe:	       addq.l #8,d0
   10800:	       move.l d0,-(sp)
   10802:	       jsr 148da <getValueType>
   10808:	       lea 12(sp),sp
   1080c:	       tst.w d0
   1080e:	   /-- bne.s 10814 <builtIn_setDefaultMusicVolume+0x28>
   10810:	   |   moveq #1,d0
   10812:	/--|-- bra.s 10832 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10814:	|  \-> moveq #24,d0
   10816:	|      add.l 12(sp),d0
   1081a:	|      move.l d0,-(sp)
   1081c:	|      jsr 1525e <trimStack>
   10822:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10824:	|      move.l (sp),d0
   10826:	|      move.l d0,-(sp)
   10828:	|      jsr d2ca <setDefaultMusicVolume>
   1082e:	|      addq.l #4,sp
	return BR_CONTINUE;
   10830:	|      moveq #2,d0
}
   10832:	\----> addq.l #4,sp
   10834:	       rts

00010836 <builtIn_playSound>:

builtIn(playSound)
{
   10836:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10838:	       movea.l 12(sp),a0
   1083c:	       move.l 24(a0),d0
   10840:	       move.l d0,-(sp)
   10842:	       pea 5 <_start+0x5>
   10846:	       move.l sp,d0
   10848:	       addq.l #8,d0
   1084a:	       move.l d0,-(sp)
   1084c:	       jsr 148da <getValueType>
   10852:	       lea 12(sp),sp
   10856:	       tst.w d0
   10858:	   /-- bne.s 1085e <builtIn_playSound+0x28>
   1085a:	   |   moveq #1,d0
   1085c:	/--|-- bra.s 10886 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   1085e:	|  \-> moveq #24,d0
   10860:	|      add.l 12(sp),d0
   10864:	|      move.l d0,-(sp)
   10866:	|      jsr 1525e <trimStack>
   1086c:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   1086e:	|      move.l (sp),d0
   10870:	|      clr.l -(sp)
   10872:	|      move.l d0,-(sp)
   10874:	|      jsr d2ee <startSound>
   1087a:	|      addq.l #8,sp
   1087c:	|      tst.w d0
   1087e:	|  /-- bne.s 10884 <builtIn_playSound+0x4e>
   10880:	|  |   moveq #2,d0
   10882:	+--|-- bra.s 10886 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   10884:	|  \-> moveq #2,d0
}
   10886:	\----> addq.l #4,sp
   10888:	       rts

0001088a <builtIn_loopSound>:

builtIn(loopSound)
{
   1088a:	             lea -28(sp),sp
   1088e:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10890:	             tst.l 36(sp)
   10894:	         /-- bgt.s 108aa <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   10896:	         |   pea 19b0f <line.c.05397aaf+0x183>
   1089c:	         |   jsr 1733a <KPrintF>
   108a2:	         |   addq.l #4,sp
		return BR_ERROR;
   108a4:	         |   moveq #1,d0
   108a6:	/--------|-- bra.w 10a66 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   108aa:	|        \-> moveq #1,d0
   108ac:	|            cmp.l 36(sp),d0
   108b0:	|     /----- blt.s 1090c <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   108b2:	|     |      movea.l 40(sp),a0
   108b6:	|     |      move.l 24(a0),d0
   108ba:	|     |      move.l d0,-(sp)
   108bc:	|     |      pea 5 <_start+0x5>
   108c0:	|     |      lea 16(sp),a0
   108c4:	|     |      move.l a0,-(sp)
   108c6:	|     |      jsr 148da <getValueType>
   108cc:	|     |      lea 12(sp),sp
   108d0:	|     |      tst.w d0
   108d2:	|     |  /-- bne.s 108da <builtIn_loopSound+0x50>
   108d4:	|     |  |   moveq #1,d0
   108d6:	+-----|--|-- bra.w 10a66 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   108da:	|     |  \-> moveq #24,d0
   108dc:	|     |      add.l 40(sp),d0
   108e0:	|     |      move.l d0,-(sp)
   108e2:	|     |      jsr 1525e <trimStack>
   108e8:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   108ea:	|     |      move.l 8(sp),d0
   108ee:	|     |      pea 1 <_start+0x1>
   108f2:	|     |      move.l d0,-(sp)
   108f4:	|     |      jsr d2ee <startSound>
   108fa:	|     |      addq.l #8,sp
   108fc:	|     |      tst.w d0
   108fe:	|     |  /-- bne.s 10906 <builtIn_loopSound+0x7c>
   10900:	|     |  |   moveq #2,d0
   10902:	+-----|--|-- bra.w 10a66 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10906:	|     |  \-> moveq #2,d0
   10908:	+-----|----- bra.w 10a66 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   1090c:	|     \----> moveq #2,d1
   1090e:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10912:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10916:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   1091a:	|            movea.l 40(sp),a0
   1091e:	|            movea.l 24(a0),a0
   10922:	|            move.l (a0),d0
   10924:	|            moveq #5,d1
   10926:	|            cmp.l d0,d1
   10928:	|  /-------- beq.w 10a00 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   1092c:	|  |         movea.l 40(sp),a0
   10930:	|  |         move.l 24(a0),d0
   10934:	|  |         move.l d0,-(sp)
   10936:	|  |         pea 1 <_start+0x1>
   1093a:	|  |         lea 12(sp),a0
   1093e:	|  |         move.l a0,-(sp)
   10940:	|  |         jsr 148da <getValueType>
   10946:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   1094a:	|  |         moveq #24,d0
   1094c:	|  |         add.l 40(sp),d0
   10950:	|  |         move.l d0,-(sp)
   10952:	|  |         jsr 1525e <trimStack>
   10958:	|  |         addq.l #4,sp
			numParams--;
   1095a:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   1095e:	|  +-------- bra.w 10a00 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10962:	|  |  /----> movea.l 40(sp),a0
   10966:	|  |  |      move.l 24(a0),d0
   1096a:	|  |  |      move.l d0,-(sp)
   1096c:	|  |  |      pea 5 <_start+0x5>
   10970:	|  |  |      lea 16(sp),a0
   10974:	|  |  |      move.l a0,-(sp)
   10976:	|  |  |      jsr 148da <getValueType>
   1097c:	|  |  |      lea 12(sp),sp
   10980:	|  |  |      tst.w d0
   10982:	|  |  |  /-- bne.s 10998 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   10984:	|  |  |  |   pea 19b4d <line.c.05397aaf+0x1c1>
   1098a:	|  |  |  |   jsr 1733a <KPrintF>
   10990:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10992:	|  |  |  |   moveq #1,d0
   10994:	+--|--|--|-- bra.w 10a66 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10998:	|  |  |  \-> moveq #20,d0
   1099a:	|  |  |      move.l d0,20(sp)
   1099e:	|  |  |      clr.l 16(sp)
   109a2:	|  |  |      move.l 1ca88 <SysBase>,d0
   109a8:	|  |  |      movea.l d0,a6
   109aa:	|  |  |      move.l 20(sp),d0
   109ae:	|  |  |      move.l 16(sp),d1
   109b2:	|  |  |      jsr -684(a6)
   109b6:	|  |  |      move.l d0,12(sp)
   109ba:	|  |  |      move.l 12(sp),d0
   109be:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   109c2:	|  |  |  /-- bne.s 109ca <builtIn_loopSound+0x140>
   109c4:	|  |  |  |   moveq #1,d0
   109c6:	+--|--|--|-- bra.w 10a66 <builtIn_loopSound+0x1dc>

			s->next = old;
   109ca:	|  |  |  \-> movea.l 28(sp),a0
   109ce:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   109d4:	|  |  |      movea.l 28(sp),a0
   109d8:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   109dc:	|  |  |      move.l 8(sp),d0
   109e0:	|  |  |      movea.l 28(sp),a0
   109e4:	|  |  |      move.l d0,(a0)
			old = s;
   109e6:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   109ec:	|  |  |      moveq #24,d0
   109ee:	|  |  |      add.l 40(sp),d0
   109f2:	|  |  |      move.l d0,-(sp)
   109f4:	|  |  |      jsr 1525e <trimStack>
   109fa:	|  |  |      addq.l #4,sp
			numParams--;
   109fc:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10a00:	|  \--|----> tst.l 36(sp)
   10a04:	|     \----- bne.w 10962 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10a08:	|        /-- bra.s 10a14 <builtIn_loopSound+0x18a>
   10a0a:	|     /--|-> movea.l 28(sp),a0
   10a0e:	|     |  |   move.l 4(a0),28(sp)
   10a14:	|     |  \-> movea.l 28(sp),a0
   10a18:	|     |      move.l 4(a0),d0
   10a1c:	|     \----- bne.s 10a0a <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10a1e:	|            move.l 4(sp),d0
   10a22:	|            moveq #1,d1
   10a24:	|            cmp.l d0,d1
   10a26:	|     /----- bge.s 10a3e <builtIn_loopSound+0x1b4>
			s->next = old;
   10a28:	|     |      movea.l 28(sp),a0
   10a2c:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10a32:	|     |      movea.l 24(sp),a0
   10a36:	|     |      move.l 28(sp),8(a0)
   10a3c:	|     |  /-- bra.s 10a4e <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10a3e:	|     \--|-> move.l 4(sp),d0
   10a42:	|        +-- beq.s 10a4e <builtIn_loopSound+0x1c4>
			s->next = s;
   10a44:	|        |   movea.l 28(sp),a0
   10a48:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10a4e:	|        \-> movea.l 24(sp),a0
   10a52:	|            moveq #-1,d0
   10a54:	|            move.l d0,16(a0)
		playSoundList(old);
   10a58:	|            move.l 24(sp),-(sp)
   10a5c:	|            jsr d268 <playSoundList>
   10a62:	|            addq.l #4,sp
		return BR_CONTINUE;
   10a64:	|            moveq #2,d0
	}
}
   10a66:	\----------> movea.l (sp)+,a6
   10a68:	             lea 28(sp),sp
   10a6c:	             rts

00010a6e <builtIn_stopSound>:

builtIn(stopSound)
{
   10a6e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10a70:	       movea.l 12(sp),a0
   10a74:	       move.l 24(a0),d0
   10a78:	       move.l d0,-(sp)
   10a7a:	       pea 5 <_start+0x5>
   10a7e:	       move.l sp,d0
   10a80:	       addq.l #8,d0
   10a82:	       move.l d0,-(sp)
   10a84:	       jsr 148da <getValueType>
   10a8a:	       lea 12(sp),sp
   10a8e:	       tst.w d0
   10a90:	   /-- bne.s 10a96 <builtIn_stopSound+0x28>
   10a92:	   |   moveq #1,d0
   10a94:	/--|-- bra.s 10ab4 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10a96:	|  \-> moveq #24,d0
   10a98:	|      add.l 12(sp),d0
   10a9c:	|      move.l d0,-(sp)
   10a9e:	|      jsr 1525e <trimStack>
   10aa4:	|      addq.l #4,sp
	huntKillSound (v);
   10aa6:	|      move.l (sp),d0
   10aa8:	|      move.l d0,-(sp)
   10aaa:	|      jsr d260 <huntKillSound>
   10ab0:	|      addq.l #4,sp
	return BR_CONTINUE;
   10ab2:	|      moveq #2,d0
}
   10ab4:	\----> addq.l #4,sp
   10ab6:	       rts

00010ab8 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10ab8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10aba:	       movea.l 12(sp),a0
   10abe:	       move.l 24(a0),d0
   10ac2:	       move.l d0,-(sp)
   10ac4:	       pea 1 <_start+0x1>
   10ac8:	       move.l sp,d0
   10aca:	       addq.l #8,d0
   10acc:	       move.l d0,-(sp)
   10ace:	       jsr 148da <getValueType>
   10ad4:	       lea 12(sp),sp
   10ad8:	       tst.w d0
   10ada:	   /-- bne.s 10ae0 <builtIn_setDefaultSoundVolume+0x28>
   10adc:	   |   moveq #1,d0
   10ade:	/--|-- bra.s 10afe <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10ae0:	|  \-> moveq #24,d0
   10ae2:	|      add.l 12(sp),d0
   10ae6:	|      move.l d0,-(sp)
   10ae8:	|      jsr 1525e <trimStack>
   10aee:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10af0:	|      move.l (sp),d0
   10af2:	|      move.l d0,-(sp)
   10af4:	|      jsr d2d6 <setDefaultSoundVolume>
   10afa:	|      addq.l #4,sp
	return BR_CONTINUE;
   10afc:	|      moveq #2,d0
}
   10afe:	\----> addq.l #4,sp
   10b00:	       rts

00010b02 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10b02:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b04:	       movea.l 16(sp),a0
   10b08:	       move.l 24(a0),d0
   10b0c:	       move.l d0,-(sp)
   10b0e:	       pea 1 <_start+0x1>
   10b12:	       move.l sp,d0
   10b14:	       addq.l #8,d0
   10b16:	       move.l d0,-(sp)
   10b18:	       jsr 148da <getValueType>
   10b1e:	       lea 12(sp),sp
   10b22:	       tst.w d0
   10b24:	   /-- bne.s 10b2a <builtIn_setSoundVolume+0x28>
   10b26:	   |   moveq #1,d0
   10b28:	/--|-- bra.s 10b84 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10b2a:	|  \-> moveq #24,d0
   10b2c:	|      add.l 16(sp),d0
   10b30:	|      move.l d0,-(sp)
   10b32:	|      jsr 1525e <trimStack>
   10b38:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b3a:	|      movea.l 16(sp),a0
   10b3e:	|      move.l 24(a0),d0
   10b42:	|      move.l d0,-(sp)
   10b44:	|      pea 5 <_start+0x5>
   10b48:	|      moveq #12,d0
   10b4a:	|      add.l sp,d0
   10b4c:	|      move.l d0,-(sp)
   10b4e:	|      jsr 148da <getValueType>
   10b54:	|      lea 12(sp),sp
   10b58:	|      tst.w d0
   10b5a:	|  /-- bne.s 10b60 <builtIn_setSoundVolume+0x5e>
   10b5c:	|  |   moveq #1,d0
   10b5e:	+--|-- bra.s 10b84 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10b60:	|  \-> moveq #24,d0
   10b62:	|      add.l 16(sp),d0
   10b66:	|      move.l d0,-(sp)
   10b68:	|      jsr 1525e <trimStack>
   10b6e:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10b70:	|      move.l (sp),d1
   10b72:	|      move.l 4(sp),d0
   10b76:	|      move.l d1,-(sp)
   10b78:	|      move.l d0,-(sp)
   10b7a:	|      jsr d2ea <setSoundVolume>
   10b80:	|      addq.l #8,sp
	return BR_CONTINUE;
   10b82:	|      moveq #2,d0
}
   10b84:	\----> addq.l #8,sp
   10b86:	       rts

00010b88 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10b88:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b8c:	       movea.l 20(sp),a0
   10b90:	       move.l 24(a0),d0
   10b94:	       move.l d0,-(sp)
   10b96:	       pea 1 <_start+0x1>
   10b9a:	       moveq #12,d0
   10b9c:	       add.l sp,d0
   10b9e:	       move.l d0,-(sp)
   10ba0:	       jsr 148da <getValueType>
   10ba6:	       lea 12(sp),sp
   10baa:	       tst.w d0
   10bac:	   /-- bne.s 10bb4 <builtIn_setSoundLoopPoints+0x2c>
   10bae:	   |   moveq #1,d0
   10bb0:	/--|-- bra.w 10c4c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10bb4:	|  \-> moveq #24,d0
   10bb6:	|      add.l 20(sp),d0
   10bba:	|      move.l d0,-(sp)
   10bbc:	|      jsr 1525e <trimStack>
   10bc2:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10bc4:	|      movea.l 20(sp),a0
   10bc8:	|      move.l 24(a0),d0
   10bcc:	|      move.l d0,-(sp)
   10bce:	|      pea 1 <_start+0x1>
   10bd2:	|      lea 8(sp),a0
   10bd6:	|      move.l a0,-(sp)
   10bd8:	|      jsr 148da <getValueType>
   10bde:	|      lea 12(sp),sp
   10be2:	|      tst.w d0
   10be4:	|  /-- bne.s 10bea <builtIn_setSoundLoopPoints+0x62>
   10be6:	|  |   moveq #1,d0
   10be8:	+--|-- bra.s 10c4c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10bea:	|  \-> moveq #24,d0
   10bec:	|      add.l 20(sp),d0
   10bf0:	|      move.l d0,-(sp)
   10bf2:	|      jsr 1525e <trimStack>
   10bf8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10bfa:	|      movea.l 20(sp),a0
   10bfe:	|      move.l 24(a0),d0
   10c02:	|      move.l d0,-(sp)
   10c04:	|      pea 5 <_start+0x5>
   10c08:	|      moveq #16,d0
   10c0a:	|      add.l sp,d0
   10c0c:	|      move.l d0,-(sp)
   10c0e:	|      jsr 148da <getValueType>
   10c14:	|      lea 12(sp),sp
   10c18:	|      tst.w d0
   10c1a:	|  /-- bne.s 10c20 <builtIn_setSoundLoopPoints+0x98>
   10c1c:	|  |   moveq #1,d0
   10c1e:	+--|-- bra.s 10c4c <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10c20:	|  \-> moveq #24,d0
   10c22:	|      add.l 20(sp),d0
   10c26:	|      move.l d0,-(sp)
   10c28:	|      jsr 1525e <trimStack>
   10c2e:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10c30:	|      movea.l 4(sp),a0
   10c34:	|      move.l (sp),d1
   10c36:	|      move.l 8(sp),d0
   10c3a:	|      move.l a0,-(sp)
   10c3c:	|      move.l d1,-(sp)
   10c3e:	|      move.l d0,-(sp)
   10c40:	|      jsr d2e2 <setSoundLoop>
   10c46:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10c4a:	|      moveq #2,d0
}
   10c4c:	\----> lea 12(sp),sp
   10c50:	       rts

00010c52 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10c52:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10c54:	          movea.l 12(sp),a0
   10c58:	          movea.l 24(a0),a0
   10c5c:	          move.l (a0),d0
   10c5e:	          moveq #5,d1
   10c60:	          cmp.l d0,d1
   10c62:	/-------- bne.s 10ca6 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10c64:	|         movea.l 12(sp),a0
   10c68:	|         move.l 24(a0),d0
   10c6c:	|         move.l d0,-(sp)
   10c6e:	|         pea 5 <_start+0x5>
   10c72:	|         move.l sp,d0
   10c74:	|         addq.l #8,d0
   10c76:	|         move.l d0,-(sp)
   10c78:	|         jsr 148da <getValueType>
   10c7e:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10c82:	|         moveq #24,d0
   10c84:	|         add.l 12(sp),d0
   10c88:	|         move.l d0,-(sp)
   10c8a:	|         jsr 1525e <trimStack>
   10c90:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10c92:	|         move.l (sp),d0
   10c94:	|         move.l d0,-(sp)
   10c96:	|         jsr 16ae4 <setFloor>
   10c9c:	|         addq.l #4,sp
   10c9e:	|         tst.w d0
   10ca0:	|  /----- bne.s 10cbc <builtIn_setFloor+0x6a>
   10ca2:	|  |      moveq #1,d0
   10ca4:	|  |  /-- bra.s 10cbe <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10ca6:	\--|--|-> moveq #24,d0
   10ca8:	   |  |   add.l 12(sp),d0
   10cac:	   |  |   move.l d0,-(sp)
   10cae:	   |  |   jsr 1525e <trimStack>
   10cb4:	   |  |   addq.l #4,sp
		setFloorNull ();
   10cb6:	   |  |   jsr 1725e <setFloorNull>
	}
	return BR_CONTINUE;
   10cbc:	   \--|-> moveq #2,d0
}
   10cbe:	      \-> addq.l #4,sp
   10cc0:	          rts

00010cc2 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10cc2:	jsr 1637c <drawFloor>
	return BR_CONTINUE;
   10cc8:	moveq #2,d0
}
   10cca:	rts

00010ccc <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10ccc:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10cce:	          movea.l 12(sp),a0
   10cd2:	          movea.l 24(a0),a0
   10cd6:	          move.l (a0),d0
   10cd8:	          moveq #5,d1
   10cda:	          cmp.l d0,d1
   10cdc:	/-------- bne.s 10d20 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10cde:	|         movea.l 12(sp),a0
   10ce2:	|         move.l 24(a0),d0
   10ce6:	|         move.l d0,-(sp)
   10ce8:	|         pea 5 <_start+0x5>
   10cec:	|         move.l sp,d0
   10cee:	|         addq.l #8,d0
   10cf0:	|         move.l d0,-(sp)
   10cf2:	|         jsr 148da <getValueType>
   10cf8:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10cfc:	|         moveq #24,d0
   10cfe:	|         add.l 12(sp),d0
   10d02:	|         move.l d0,-(sp)
   10d04:	|         jsr 1525e <trimStack>
   10d0a:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10d0c:	|         move.l (sp),d0
   10d0e:	|         move.l d0,-(sp)
   10d10:	|         jsr 87fe <setZBuffer>
   10d16:	|         addq.l #4,sp
   10d18:	|         tst.w d0
   10d1a:	|  /----- bne.s 10d36 <builtIn_setZBuffer+0x6a>
   10d1c:	|  |      moveq #1,d0
   10d1e:	|  |  /-- bra.s 10d38 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10d20:	\--|--|-> moveq #24,d0
   10d22:	   |  |   add.l 12(sp),d0
   10d26:	   |  |   move.l d0,-(sp)
   10d28:	   |  |   jsr 1525e <trimStack>
   10d2e:	   |  |   addq.l #4,sp
		killZBuffer ();
   10d30:	   |  |   jsr 87b2 <killZBuffer>
	}
	return BR_CONTINUE;
   10d36:	   \--|-> moveq #2,d0
}
   10d38:	      \-> addq.l #4,sp
   10d3a:	          rts

00010d3c <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10d3c:	pea 19b84 <line.c.05397aaf+0x1f8>
   10d42:	jsr 1733a <KPrintF>
   10d48:	addq.l #4,sp
	return BR_CONTINUE;
   10d4a:	moveq #2,d0
}
   10d4c:	rts

00010d4e <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d4e:	          movea.l 8(sp),a0
   10d52:	          move.l 24(a0),d0
   10d56:	          move.l d0,-(sp)
   10d58:	          pea 1 <_start+0x1>
   10d5c:	          pea 1cb56 <speechMode>
   10d62:	          jsr 148da <getValueType>
   10d68:	          lea 12(sp),sp
   10d6c:	          tst.w d0
   10d6e:	      /-- bne.s 10d74 <builtIn_setSpeechMode+0x26>
   10d70:	      |   moveq #1,d0
   10d72:	/-----|-- bra.s 10dac <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10d74:	|     \-> moveq #24,d0
   10d76:	|         add.l 8(sp),d0
   10d7a:	|         move.l d0,-(sp)
   10d7c:	|         jsr 1525e <trimStack>
   10d82:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10d84:	|         move.l 1cb56 <speechMode>,d0
   10d8a:	|     /-- bmi.s 10d98 <builtIn_setSpeechMode+0x4a>
   10d8c:	|     |   move.l 1cb56 <speechMode>,d0
   10d92:	|     |   moveq #2,d1
   10d94:	|     |   cmp.l d0,d1
   10d96:	|  /--|-- bge.s 10daa <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10d98:	|  |  \-> pea 19b9d <line.c.05397aaf+0x211>
   10d9e:	|  |      jsr 1733a <KPrintF>
   10da4:	|  |      addq.l #4,sp
		return BR_ERROR;
   10da6:	|  |      moveq #1,d0
   10da8:	+--|----- bra.s 10dac <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10daa:	|  \----> moveq #2,d0
}
   10dac:	\-------> rts

00010dae <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10dae:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10db0:	       jsr 7fba <isThereAnySpeechGoingOn>
   10db6:	       move.l d0,(sp)
	if (i == -1) {
   10db8:	       moveq #-1,d0
   10dba:	       cmp.l (sp),d0
   10dbc:	/----- bne.s 10dd8 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10dbe:	|      moveq #28,d0
   10dc0:	|      add.l 12(sp),d0
   10dc4:	|      clr.l -(sp)
   10dc6:	|      pea 1 <_start+0x1>
   10dca:	|      move.l d0,-(sp)
   10dcc:	|      jsr 151cc <setVariable>
   10dd2:	|      lea 12(sp),sp
   10dd6:	|  /-- bra.s 10df0 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10dd8:	\--|-> moveq #28,d0
   10dda:	   |   add.l 12(sp),d0
   10dde:	   |   move.l (sp),-(sp)
   10de0:	   |   pea 7 <_start+0x7>
   10de4:	   |   move.l d0,-(sp)
   10de6:	   |   jsr 151cc <setVariable>
   10dec:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10df0:	   \-> moveq #2,d0
}
   10df2:	       addq.l #4,sp
   10df4:	       rts

00010df6 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10df6:	jsr 6294 <killSpeechTimers>
	return BR_CONTINUE;
   10dfc:	moveq #2,d0
}
   10dfe:	rts

00010e00 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10e00:	       move.l 1cb9c <overRegion>,d0
   10e06:	/----- beq.s 10e30 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10e08:	|      movea.l 1cb9c <overRegion>,a0
   10e0e:	|      movea.l 28(a0),a0
   10e12:	|      move.l 4(a0),d1
   10e16:	|      moveq #28,d0
   10e18:	|      add.l 8(sp),d0
   10e1c:	|      move.l d1,-(sp)
   10e1e:	|      pea 7 <_start+0x7>
   10e22:	|      move.l d0,-(sp)
   10e24:	|      jsr 151cc <setVariable>
   10e2a:	|      lea 12(sp),sp
   10e2e:	|  /-- bra.s 10e48 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10e30:	\--|-> moveq #28,d0
   10e32:	   |   add.l 8(sp),d0
   10e36:	   |   clr.l -(sp)
   10e38:	   |   pea 1 <_start+0x1>
   10e3c:	   |   move.l d0,-(sp)
   10e3e:	   |   jsr 151cc <setVariable>
   10e44:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10e48:	   \-> moveq #2,d0
}
   10e4a:	       rts

00010e4c <builtIn_rename>:

builtIn(rename)
{
   10e4c:	       lea -16(sp),sp
   10e50:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10e52:	       movea.l 28(sp),a0
   10e56:	       move.l 24(a0),d0
   10e5a:	       move.l d0,-(sp)
   10e5c:	       jsr 14eb0 <getTextFromAnyVar>
   10e62:	       addq.l #4,sp
   10e64:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10e68:	   /-- bne.s 10e6e <builtIn_rename+0x22>
   10e6a:	   |   moveq #1,d0
   10e6c:	/--|-- bra.s 10ee8 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10e6e:	|  \-> moveq #24,d0
   10e70:	|      add.l 28(sp),d0
   10e74:	|      move.l d0,-(sp)
   10e76:	|      jsr 1525e <trimStack>
   10e7c:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10e7e:	|      movea.l 28(sp),a0
   10e82:	|      move.l 24(a0),d0
   10e86:	|      move.l d0,-(sp)
   10e88:	|      pea 7 <_start+0x7>
   10e8c:	|      lea 12(sp),a0
   10e90:	|      move.l a0,-(sp)
   10e92:	|      jsr 148da <getValueType>
   10e98:	|      lea 12(sp),sp
   10e9c:	|      tst.w d0
   10e9e:	|  /-- bne.s 10ea4 <builtIn_rename+0x58>
   10ea0:	|  |   moveq #1,d0
   10ea2:	+--|-- bra.s 10ee8 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10ea4:	|  \-> moveq #24,d0
   10ea6:	|      add.l 28(sp),d0
   10eaa:	|      move.l d0,-(sp)
   10eac:	|      jsr 1525e <trimStack>
   10eb2:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10eb4:	|      move.l 4(sp),d0
   10eb8:	|      move.l d0,-(sp)
   10eba:	|      jsr d624 <findObjectType>
   10ec0:	|      addq.l #4,sp
   10ec2:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10ec6:	|      movea.l 12(sp),a0
   10eca:	|      move.l (a0),8(sp)
   10ece:	|      move.l 1ca88 <SysBase>,d0
   10ed4:	|      movea.l d0,a6
   10ed6:	|      movea.l 8(sp),a1
   10eda:	|      jsr -690(a6)
	o->screenName = newText;
   10ede:	|      movea.l 12(sp),a0
   10ee2:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10ee6:	|      moveq #2,d0
}
   10ee8:	\----> movea.l (sp)+,a6
   10eea:	       lea 16(sp),sp
   10eee:	       rts

00010ef0 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10ef0:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ef4:	          movea.l 20(sp),a0
   10ef8:	          move.l 24(a0),d0
   10efc:	          move.l d0,-(sp)
   10efe:	          pea 7 <_start+0x7>
   10f02:	          lea 8(sp),a0
   10f06:	          move.l a0,-(sp)
   10f08:	          jsr 148da <getValueType>
   10f0e:	          lea 12(sp),sp
   10f12:	          tst.w d0
   10f14:	      /-- bne.s 10f1c <builtIn_getObjectX+0x2c>
   10f16:	      |   moveq #1,d0
   10f18:	/-----|-- bra.w 10fb8 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   10f1c:	|     \-> moveq #24,d0
   10f1e:	|         add.l 20(sp),d0
   10f22:	|         move.l d0,-(sp)
   10f24:	|         jsr 1525e <trimStack>
   10f2a:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10f2c:	|         move.l (sp),d0
   10f2e:	|         move.l d0,-(sp)
   10f30:	|         jsr a72e <findPerson>
   10f36:	|         addq.l #4,sp
   10f38:	|         move.l d0,8(sp)
	if (pers) {
   10f3c:	|     /-- beq.s 10f6a <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   10f3e:	|     |   movea.l 8(sp),a0
   10f42:	|     |   move.l (a0),d0
   10f44:	|     |   move.l d0,-(sp)
   10f46:	|     |   jsr 17704 <__fixsfsi>
   10f4c:	|     |   addq.l #4,sp
   10f4e:	|     |   move.l d0,d1
   10f50:	|     |   moveq #28,d0
   10f52:	|     |   add.l 20(sp),d0
   10f56:	|     |   move.l d1,-(sp)
   10f58:	|     |   pea 1 <_start+0x1>
   10f5c:	|     |   move.l d0,-(sp)
   10f5e:	|     |   jsr 151cc <setVariable>
   10f64:	|     |   lea 12(sp),sp
   10f68:	|  /--|-- bra.s 10fb6 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   10f6a:	|  |  \-> move.l (sp),d0
   10f6c:	|  |      move.l d0,-(sp)
   10f6e:	|  |      jsr 15b1c <getRegionForObject>
   10f74:	|  |      addq.l #4,sp
   10f76:	|  |      move.l d0,4(sp)
		if (la) {
   10f7a:	|  |  /-- beq.s 10f9e <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10f7c:	|  |  |   movea.l 4(sp),a0
   10f80:	|  |  |   move.l 16(a0),d1
   10f84:	|  |  |   moveq #28,d0
   10f86:	|  |  |   add.l 20(sp),d0
   10f8a:	|  |  |   move.l d1,-(sp)
   10f8c:	|  |  |   pea 1 <_start+0x1>
   10f90:	|  |  |   move.l d0,-(sp)
   10f92:	|  |  |   jsr 151cc <setVariable>
   10f98:	|  |  |   lea 12(sp),sp
   10f9c:	|  +--|-- bra.s 10fb6 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10f9e:	|  |  \-> moveq #28,d0
   10fa0:	|  |      add.l 20(sp),d0
   10fa4:	|  |      clr.l -(sp)
   10fa6:	|  |      pea 1 <_start+0x1>
   10faa:	|  |      move.l d0,-(sp)
   10fac:	|  |      jsr 151cc <setVariable>
   10fb2:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10fb6:	|  \----> moveq #2,d0
}
   10fb8:	\-------> lea 12(sp),sp
   10fbc:	          rts

00010fbe <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10fbe:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10fc2:	          movea.l 20(sp),a0
   10fc6:	          move.l 24(a0),d0
   10fca:	          move.l d0,-(sp)
   10fcc:	          pea 7 <_start+0x7>
   10fd0:	          lea 8(sp),a0
   10fd4:	          move.l a0,-(sp)
   10fd6:	          jsr 148da <getValueType>
   10fdc:	          lea 12(sp),sp
   10fe0:	          tst.w d0
   10fe2:	      /-- bne.s 10fea <builtIn_getObjectY+0x2c>
   10fe4:	      |   moveq #1,d0
   10fe6:	/-----|-- bra.w 11088 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10fea:	|     \-> moveq #24,d0
   10fec:	|         add.l 20(sp),d0
   10ff0:	|         move.l d0,-(sp)
   10ff2:	|         jsr 1525e <trimStack>
   10ff8:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10ffa:	|         move.l (sp),d0
   10ffc:	|         move.l d0,-(sp)
   10ffe:	|         jsr a72e <findPerson>
   11004:	|         addq.l #4,sp
   11006:	|         move.l d0,8(sp)
	if (pers) {
   1100a:	|     /-- beq.s 1103a <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   1100c:	|     |   movea.l 8(sp),a0
   11010:	|     |   move.l 4(a0),d0
   11014:	|     |   move.l d0,-(sp)
   11016:	|     |   jsr 17704 <__fixsfsi>
   1101c:	|     |   addq.l #4,sp
   1101e:	|     |   move.l d0,d1
   11020:	|     |   moveq #28,d0
   11022:	|     |   add.l 20(sp),d0
   11026:	|     |   move.l d1,-(sp)
   11028:	|     |   pea 1 <_start+0x1>
   1102c:	|     |   move.l d0,-(sp)
   1102e:	|     |   jsr 151cc <setVariable>
   11034:	|     |   lea 12(sp),sp
   11038:	|  /--|-- bra.s 11086 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   1103a:	|  |  \-> move.l (sp),d0
   1103c:	|  |      move.l d0,-(sp)
   1103e:	|  |      jsr 15b1c <getRegionForObject>
   11044:	|  |      addq.l #4,sp
   11046:	|  |      move.l d0,4(sp)
		if (la) {
   1104a:	|  |  /-- beq.s 1106e <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   1104c:	|  |  |   movea.l 4(sp),a0
   11050:	|  |  |   move.l 20(a0),d1
   11054:	|  |  |   moveq #28,d0
   11056:	|  |  |   add.l 20(sp),d0
   1105a:	|  |  |   move.l d1,-(sp)
   1105c:	|  |  |   pea 1 <_start+0x1>
   11060:	|  |  |   move.l d0,-(sp)
   11062:	|  |  |   jsr 151cc <setVariable>
   11068:	|  |  |   lea 12(sp),sp
   1106c:	|  +--|-- bra.s 11086 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   1106e:	|  |  \-> moveq #28,d0
   11070:	|  |      add.l 20(sp),d0
   11074:	|  |      clr.l -(sp)
   11076:	|  |      pea 1 <_start+0x1>
   1107a:	|  |      move.l d0,-(sp)
   1107c:	|  |      jsr 151cc <setVariable>
   11082:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11086:	|  \----> moveq #2,d0
}
   11088:	\-------> lea 12(sp),sp
   1108c:	          rts

0001108e <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   1108e:	       lea -32(sp),sp
   11092:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11096:	       movea.l 56(sp),a0
   1109a:	       move.l 24(a0),d0
   1109e:	       move.l d0,-(sp)
   110a0:	       pea 1 <_start+0x1>
   110a4:	       lea 28(sp),a0
   110a8:	       move.l a0,-(sp)
   110aa:	       jsr 148da <getValueType>
   110b0:	       lea 12(sp),sp
   110b4:	       tst.w d0
   110b6:	   /-- bne.s 110be <builtIn_addScreenRegion+0x30>
   110b8:	   |   moveq #1,d0
   110ba:	/--|-- bra.w 11298 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110be:	|  \-> moveq #24,d0
   110c0:	|      add.l 56(sp),d0
   110c4:	|      move.l d0,-(sp)
   110c6:	|      jsr 1525e <trimStack>
   110cc:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110ce:	|      movea.l 56(sp),a0
   110d2:	|      move.l 24(a0),d0
   110d6:	|      move.l d0,-(sp)
   110d8:	|      pea 1 <_start+0x1>
   110dc:	|      moveq #48,d0
   110de:	|      add.l sp,d0
   110e0:	|      move.l d0,-(sp)
   110e2:	|      jsr 148da <getValueType>
   110e8:	|      lea 12(sp),sp
   110ec:	|      tst.w d0
   110ee:	|  /-- bne.s 110f6 <builtIn_addScreenRegion+0x68>
   110f0:	|  |   moveq #1,d0
   110f2:	+--|-- bra.w 11298 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   110f6:	|  \-> moveq #24,d0
   110f8:	|      add.l 56(sp),d0
   110fc:	|      move.l d0,-(sp)
   110fe:	|      jsr 1525e <trimStack>
   11104:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11106:	|      movea.l 56(sp),a0
   1110a:	|      move.l 24(a0),d0
   1110e:	|      move.l d0,-(sp)
   11110:	|      pea 1 <_start+0x1>
   11114:	|      moveq #52,d0
   11116:	|      add.l sp,d0
   11118:	|      move.l d0,-(sp)
   1111a:	|      jsr 148da <getValueType>
   11120:	|      lea 12(sp),sp
   11124:	|      tst.w d0
   11126:	|  /-- bne.s 1112e <builtIn_addScreenRegion+0xa0>
   11128:	|  |   moveq #1,d0
   1112a:	+--|-- bra.w 11298 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1112e:	|  \-> moveq #24,d0
   11130:	|      add.l 56(sp),d0
   11134:	|      move.l d0,-(sp)
   11136:	|      jsr 1525e <trimStack>
   1113c:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1113e:	|      movea.l 56(sp),a0
   11142:	|      move.l 24(a0),d0
   11146:	|      move.l d0,-(sp)
   11148:	|      pea 1 <_start+0x1>
   1114c:	|      lea 32(sp),a0
   11150:	|      move.l a0,-(sp)
   11152:	|      jsr 148da <getValueType>
   11158:	|      lea 12(sp),sp
   1115c:	|      tst.w d0
   1115e:	|  /-- bne.s 11166 <builtIn_addScreenRegion+0xd8>
   11160:	|  |   moveq #1,d0
   11162:	+--|-- bra.w 11298 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11166:	|  \-> moveq #24,d0
   11168:	|      add.l 56(sp),d0
   1116c:	|      move.l d0,-(sp)
   1116e:	|      jsr 1525e <trimStack>
   11174:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11176:	|      movea.l 56(sp),a0
   1117a:	|      move.l 24(a0),d0
   1117e:	|      move.l d0,-(sp)
   11180:	|      pea 1 <_start+0x1>
   11184:	|      lea 36(sp),a0
   11188:	|      move.l a0,-(sp)
   1118a:	|      jsr 148da <getValueType>
   11190:	|      lea 12(sp),sp
   11194:	|      tst.w d0
   11196:	|  /-- bne.s 1119e <builtIn_addScreenRegion+0x110>
   11198:	|  |   moveq #1,d0
   1119a:	+--|-- bra.w 11298 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1119e:	|  \-> moveq #24,d0
   111a0:	|      add.l 56(sp),d0
   111a4:	|      move.l d0,-(sp)
   111a6:	|      jsr 1525e <trimStack>
   111ac:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111ae:	|      movea.l 56(sp),a0
   111b2:	|      move.l 24(a0),d0
   111b6:	|      move.l d0,-(sp)
   111b8:	|      pea 1 <_start+0x1>
   111bc:	|      lea 40(sp),a0
   111c0:	|      move.l a0,-(sp)
   111c2:	|      jsr 148da <getValueType>
   111c8:	|      lea 12(sp),sp
   111cc:	|      tst.w d0
   111ce:	|  /-- bne.s 111d6 <builtIn_addScreenRegion+0x148>
   111d0:	|  |   moveq #1,d0
   111d2:	+--|-- bra.w 11298 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   111d6:	|  \-> moveq #24,d0
   111d8:	|      add.l 56(sp),d0
   111dc:	|      move.l d0,-(sp)
   111de:	|      jsr 1525e <trimStack>
   111e4:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111e6:	|      movea.l 56(sp),a0
   111ea:	|      move.l 24(a0),d0
   111ee:	|      move.l d0,-(sp)
   111f0:	|      pea 1 <_start+0x1>
   111f4:	|      lea 44(sp),a0
   111f8:	|      move.l a0,-(sp)
   111fa:	|      jsr 148da <getValueType>
   11200:	|      lea 12(sp),sp
   11204:	|      tst.w d0
   11206:	|  /-- bne.s 1120e <builtIn_addScreenRegion+0x180>
   11208:	|  |   moveq #1,d0
   1120a:	+--|-- bra.w 11298 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1120e:	|  \-> moveq #24,d0
   11210:	|      add.l 56(sp),d0
   11214:	|      move.l d0,-(sp)
   11216:	|      jsr 1525e <trimStack>
   1121c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1121e:	|      movea.l 56(sp),a0
   11222:	|      move.l 24(a0),d0
   11226:	|      move.l d0,-(sp)
   11228:	|      pea 7 <_start+0x7>
   1122c:	|      lea 24(sp),a0
   11230:	|      move.l a0,-(sp)
   11232:	|      jsr 148da <getValueType>
   11238:	|      lea 12(sp),sp
   1123c:	|      tst.w d0
   1123e:	|  /-- bne.s 11244 <builtIn_addScreenRegion+0x1b6>
   11240:	|  |   moveq #1,d0
   11242:	+--|-- bra.s 11298 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11244:	|  \-> moveq #24,d0
   11246:	|      add.l 56(sp),d0
   1124a:	|      move.l d0,-(sp)
   1124c:	|      jsr 1525e <trimStack>
   11252:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   11254:	|      move.l 16(sp),d5
   11258:	|      move.l 20(sp),d4
   1125c:	|      move.l 40(sp),d3
   11260:	|      move.l 44(sp),d2
   11264:	|      movea.l 24(sp),a1
   11268:	|      movea.l 28(sp),a0
   1126c:	|      move.l 32(sp),d1
   11270:	|      move.l 36(sp),d0
   11274:	|      move.l d5,-(sp)
   11276:	|      move.l d4,-(sp)
   11278:	|      move.l d3,-(sp)
   1127a:	|      move.l d2,-(sp)
   1127c:	|      move.l a1,-(sp)
   1127e:	|      move.l a0,-(sp)
   11280:	|      move.l d1,-(sp)
   11282:	|      move.l d0,-(sp)
   11284:	|      jsr 159d6 <addScreenRegion>
   1128a:	|      lea 32(sp),sp
   1128e:	|      tst.w d0
   11290:	|  /-- beq.s 11296 <builtIn_addScreenRegion+0x208>
   11292:	|  |   moveq #2,d0
   11294:	+--|-- bra.s 11298 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   11296:	|  \-> moveq #1,d0

}
   11298:	\----> movem.l (sp)+,d2-d5
   1129c:	       lea 32(sp),sp
   112a0:	       rts

000112a2 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   112a2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   112a4:	       movea.l 12(sp),a0
   112a8:	       move.l 24(a0),d0
   112ac:	       move.l d0,-(sp)
   112ae:	       pea 7 <_start+0x7>
   112b2:	       move.l sp,d0
   112b4:	       addq.l #8,d0
   112b6:	       move.l d0,-(sp)
   112b8:	       jsr 148da <getValueType>
   112be:	       lea 12(sp),sp
   112c2:	       tst.w d0
   112c4:	   /-- bne.s 112ca <builtIn_removeScreenRegion+0x28>
   112c6:	   |   moveq #1,d0
   112c8:	/--|-- bra.s 112e8 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   112ca:	|  \-> moveq #24,d0
   112cc:	|      add.l 12(sp),d0
   112d0:	|      move.l d0,-(sp)
   112d2:	|      jsr 1525e <trimStack>
   112d8:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   112da:	|      move.l (sp),d0
   112dc:	|      move.l d0,-(sp)
   112de:	|      jsr 15cc4 <removeScreenRegion>
   112e4:	|      addq.l #4,sp
	return BR_CONTINUE;
   112e6:	|      moveq #2,d0
}
   112e8:	\----> addq.l #4,sp
   112ea:	       rts

000112ec <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   112ec:	jsr 15e48 <showBoxes>
	return BR_CONTINUE;
   112f2:	moveq #2,d0
}
   112f4:	rts

000112f6 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   112f6:	jsr 15b4a <killAllRegions>
	return BR_CONTINUE;
   112fc:	moveq #2,d0
}
   112fe:	rts

00011300 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   11300:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   11304:	       movea.l 24(sp),a0
   11308:	       move.l 24(a0),d0
   1130c:	       move.l d0,-(sp)
   1130e:	       jsr 14586 <getCostumeFromVar>
   11314:	       addq.l #4,sp
   11316:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   1131a:	   /-- bne.s 11322 <builtIn_addCharacter+0x22>
   1131c:	   |   moveq #1,d0
   1131e:	/--|-- bra.w 113fe <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   11322:	|  \-> moveq #24,d0
   11324:	|      add.l 24(sp),d0
   11328:	|      move.l d0,-(sp)
   1132a:	|      jsr 1525e <trimStack>
   11330:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11332:	|      movea.l 24(sp),a0
   11336:	|      move.l 24(a0),d0
   1133a:	|      move.l d0,-(sp)
   1133c:	|      pea 1 <_start+0x1>
   11340:	|      lea 12(sp),a0
   11344:	|      move.l a0,-(sp)
   11346:	|      jsr 148da <getValueType>
   1134c:	|      lea 12(sp),sp
   11350:	|      tst.w d0
   11352:	|  /-- bne.s 1135a <builtIn_addCharacter+0x5a>
   11354:	|  |   moveq #1,d0
   11356:	+--|-- bra.w 113fe <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1135a:	|  \-> moveq #24,d0
   1135c:	|      add.l 24(sp),d0
   11360:	|      move.l d0,-(sp)
   11362:	|      jsr 1525e <trimStack>
   11368:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1136a:	|      movea.l 24(sp),a0
   1136e:	|      move.l 24(a0),d0
   11372:	|      move.l d0,-(sp)
   11374:	|      pea 1 <_start+0x1>
   11378:	|      moveq #16,d0
   1137a:	|      add.l sp,d0
   1137c:	|      move.l d0,-(sp)
   1137e:	|      jsr 148da <getValueType>
   11384:	|      lea 12(sp),sp
   11388:	|      tst.w d0
   1138a:	|  /-- bne.s 11390 <builtIn_addCharacter+0x90>
   1138c:	|  |   moveq #1,d0
   1138e:	+--|-- bra.s 113fe <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11390:	|  \-> moveq #24,d0
   11392:	|      add.l 24(sp),d0
   11396:	|      move.l d0,-(sp)
   11398:	|      jsr 1525e <trimStack>
   1139e:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113a0:	|      movea.l 24(sp),a0
   113a4:	|      move.l 24(a0),d0
   113a8:	|      move.l d0,-(sp)
   113aa:	|      pea 7 <_start+0x7>
   113ae:	|      lea 8(sp),a0
   113b2:	|      move.l a0,-(sp)
   113b4:	|      jsr 148da <getValueType>
   113ba:	|      lea 12(sp),sp
   113be:	|      tst.w d0
   113c0:	|  /-- bne.s 113c6 <builtIn_addCharacter+0xc6>
   113c2:	|  |   moveq #1,d0
   113c4:	+--|-- bra.s 113fe <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   113c6:	|  \-> moveq #24,d0
   113c8:	|      add.l 24(sp),d0
   113cc:	|      move.l d0,-(sp)
   113ce:	|      jsr 1525e <trimStack>
   113d4:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   113d6:	|      movea.l (sp),a0
   113d8:	|      move.l 4(sp),d1
   113dc:	|      move.l 8(sp),d0
   113e0:	|      move.l 12(sp),-(sp)
   113e4:	|      move.l a0,-(sp)
   113e6:	|      move.l d1,-(sp)
   113e8:	|      move.l d0,-(sp)
   113ea:	|      jsr 9328 <addPerson>
   113f0:	|      lea 16(sp),sp
   113f4:	|      tst.w d0
   113f6:	|  /-- beq.s 113fc <builtIn_addCharacter+0xfc>
   113f8:	|  |   moveq #2,d0
   113fa:	+--|-- bra.s 113fe <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   113fc:	|  \-> moveq #1,d0
}
   113fe:	\----> lea 16(sp),sp
   11402:	       rts

00011404 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   11404:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11406:	       movea.l 12(sp),a0
   1140a:	       move.l 24(a0),d0
   1140e:	       move.l d0,-(sp)
   11410:	       pea 7 <_start+0x7>
   11414:	       move.l sp,d0
   11416:	       addq.l #8,d0
   11418:	       move.l d0,-(sp)
   1141a:	       jsr 148da <getValueType>
   11420:	       lea 12(sp),sp
   11424:	       tst.w d0
   11426:	   /-- bne.s 1142c <builtIn_hideCharacter+0x28>
   11428:	   |   moveq #1,d0
   1142a:	/--|-- bra.s 1144c <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   1142c:	|  \-> moveq #24,d0
   1142e:	|      add.l 12(sp),d0
   11432:	|      move.l d0,-(sp)
   11434:	|      jsr 1525e <trimStack>
   1143a:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   1143c:	|      move.l (sp),d0
   1143e:	|      move.l d0,-(sp)
   11440:	|      clr.l -(sp)
   11442:	|      jsr bd62 <setShown>
   11448:	|      addq.l #8,sp
	return BR_CONTINUE;
   1144a:	|      moveq #2,d0
}
   1144c:	\----> addq.l #4,sp
   1144e:	       rts

00011450 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   11450:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11452:	       movea.l 12(sp),a0
   11456:	       move.l 24(a0),d0
   1145a:	       move.l d0,-(sp)
   1145c:	       pea 7 <_start+0x7>
   11460:	       move.l sp,d0
   11462:	       addq.l #8,d0
   11464:	       move.l d0,-(sp)
   11466:	       jsr 148da <getValueType>
   1146c:	       lea 12(sp),sp
   11470:	       tst.w d0
   11472:	   /-- bne.s 11478 <builtIn_showCharacter+0x28>
   11474:	   |   moveq #1,d0
   11476:	/--|-- bra.s 1149a <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   11478:	|  \-> moveq #24,d0
   1147a:	|      add.l 12(sp),d0
   1147e:	|      move.l d0,-(sp)
   11480:	|      jsr 1525e <trimStack>
   11486:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   11488:	|      move.l (sp),d0
   1148a:	|      move.l d0,-(sp)
   1148c:	|      pea 1 <_start+0x1>
   11490:	|      jsr bd62 <setShown>
   11496:	|      addq.l #8,sp
	return BR_CONTINUE;
   11498:	|      moveq #2,d0
}
   1149a:	\----> addq.l #4,sp
   1149c:	       rts

0001149e <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   1149e:	jsr 6294 <killSpeechTimers>
	killMostPeople ();
   114a4:	jsr ab9a <killMostPeople>
	return BR_CONTINUE;
   114aa:	moveq #2,d0
}
   114ac:	rts

000114ae <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   114ae:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   114b0:	       movea.l 16(sp),a0
   114b4:	       move.l 24(a0),d0
   114b8:	       move.l d0,-(sp)
   114ba:	       pea 1 <_start+0x1>
   114be:	       move.l sp,d0
   114c0:	       addq.l #8,d0
   114c2:	       move.l d0,-(sp)
   114c4:	       jsr 148da <getValueType>
   114ca:	       lea 12(sp),sp
   114ce:	       tst.w d0
   114d0:	   /-- bne.s 114d6 <builtIn_setCharacterDrawMode+0x28>
   114d2:	   |   moveq #1,d0
   114d4:	/--|-- bra.s 11530 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   114d6:	|  \-> moveq #24,d0
   114d8:	|      add.l 16(sp),d0
   114dc:	|      move.l d0,-(sp)
   114de:	|      jsr 1525e <trimStack>
   114e4:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114e6:	|      movea.l 16(sp),a0
   114ea:	|      move.l 24(a0),d0
   114ee:	|      move.l d0,-(sp)
   114f0:	|      pea 7 <_start+0x7>
   114f4:	|      moveq #12,d0
   114f6:	|      add.l sp,d0
   114f8:	|      move.l d0,-(sp)
   114fa:	|      jsr 148da <getValueType>
   11500:	|      lea 12(sp),sp
   11504:	|      tst.w d0
   11506:	|  /-- bne.s 1150c <builtIn_setCharacterDrawMode+0x5e>
   11508:	|  |   moveq #1,d0
   1150a:	+--|-- bra.s 11530 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   1150c:	|  \-> moveq #24,d0
   1150e:	|      add.l 16(sp),d0
   11512:	|      move.l d0,-(sp)
   11514:	|      jsr 1525e <trimStack>
   1151a:	|      addq.l #4,sp
	setDrawMode (di, obj);
   1151c:	|      move.l 4(sp),d1
   11520:	|      move.l (sp),d0
   11522:	|      move.l d1,-(sp)
   11524:	|      move.l d0,-(sp)
   11526:	|      jsr b6a0 <setDrawMode>
   1152c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1152e:	|      moveq #2,d0
}
   11530:	\----> addq.l #8,sp
   11532:	       rts

00011534 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   11534:	pea 19bdb <line.c.05397aaf+0x24f>
   1153a:	jsr 1733a <KPrintF>
   11540:	addq.l #4,sp
	return BR_CONTINUE;
   11542:	moveq #2,d0
}
   11544:	rts

00011546 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   11546:	pea 19c0e <graphics.c.1c13408a+0x26>
   1154c:	jsr 1733a <KPrintF>
   11552:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   11554:	moveq #2,d0
}
   11556:	rts

00011558 <builtIn_setScale>:

builtIn(setScale)
{
   11558:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1155a:	       movea.l 16(sp),a0
   1155e:	       move.l 24(a0),d0
   11562:	       move.l d0,-(sp)
   11564:	       pea 1 <_start+0x1>
   11568:	       move.l sp,d0
   1156a:	       addq.l #8,d0
   1156c:	       move.l d0,-(sp)
   1156e:	       jsr 148da <getValueType>
   11574:	       lea 12(sp),sp
   11578:	       tst.w d0
   1157a:	   /-- bne.s 11580 <builtIn_setScale+0x28>
   1157c:	   |   moveq #1,d0
   1157e:	/--|-- bra.s 115e2 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11580:	|  \-> moveq #24,d0
   11582:	|      add.l 16(sp),d0
   11586:	|      move.l d0,-(sp)
   11588:	|      jsr 1525e <trimStack>
   1158e:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11590:	|      movea.l 16(sp),a0
   11594:	|      move.l 24(a0),d0
   11598:	|      move.l d0,-(sp)
   1159a:	|      pea 1 <_start+0x1>
   1159e:	|      moveq #12,d0
   115a0:	|      add.l sp,d0
   115a2:	|      move.l d0,-(sp)
   115a4:	|      jsr 148da <getValueType>
   115aa:	|      lea 12(sp),sp
   115ae:	|      tst.w d0
   115b0:	|  /-- bne.s 115b6 <builtIn_setScale+0x5e>
   115b2:	|  |   moveq #1,d0
   115b4:	+--|-- bra.s 115e2 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   115b6:	|  \-> moveq #24,d0
   115b8:	|      add.l 16(sp),d0
   115bc:	|      move.l d0,-(sp)
   115be:	|      jsr 1525e <trimStack>
   115c4:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   115c6:	|      move.l (sp),d0
   115c8:	|      move.l d0,d0
   115ca:	|      movea.w d0,a1
   115cc:	|      move.l 4(sp),d0
   115d0:	|      move.l d0,d0
   115d2:	|      movea.w d0,a0
   115d4:	|      move.l a1,-(sp)
   115d6:	|      move.l a0,-(sp)
   115d8:	|      jsr bd3a <setScale>
   115de:	|      addq.l #8,sp
	return BR_CONTINUE;
   115e0:	|      moveq #2,d0
}
   115e2:	\----> addq.l #8,sp
   115e4:	       rts

000115e6 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   115e6:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   115e8:	       movea.l 12(sp),a0
   115ec:	       move.l 24(a0),d0
   115f0:	       move.l d0,-(sp)
   115f2:	       pea 7 <_start+0x7>
   115f6:	       move.l sp,d0
   115f8:	       addq.l #8,d0
   115fa:	       move.l d0,-(sp)
   115fc:	       jsr 148da <getValueType>
   11602:	       lea 12(sp),sp
   11606:	       tst.w d0
   11608:	   /-- bne.s 1160e <builtIn_stopCharacter+0x28>
   1160a:	   |   moveq #1,d0
   1160c:	/--|-- bra.s 11646 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   1160e:	|  \-> moveq #24,d0
   11610:	|      add.l 12(sp),d0
   11614:	|      move.l d0,-(sp)
   11616:	|      jsr 1525e <trimStack>
   1161c:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   1161e:	|      move.l (sp),d0
   11620:	|      move.l d0,-(sp)
   11622:	|      jsr be6e <stopPerson>
   11628:	|      addq.l #4,sp
   1162a:	|      movea.w d0,a0
   1162c:	|      moveq #28,d0
   1162e:	|      add.l 12(sp),d0
   11632:	|      move.l a0,-(sp)
   11634:	|      pea 1 <_start+0x1>
   11638:	|      move.l d0,-(sp)
   1163a:	|      jsr 151cc <setVariable>
   11640:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11644:	|      moveq #2,d0
}
   11646:	\----> addq.l #4,sp
   11648:	       rts

0001164a <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   1164a:	pea 19c48 <graphics.c.1c13408a+0x60>
   11650:	jsr 1733a <KPrintF>
   11656:	addq.l #4,sp
	return BR_CONTINUE;
   11658:	moveq #2,d0
}
   1165a:	rts

0001165c <builtIn_animate>:

builtIn(animate)
{
   1165c:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   1165e:	       movea.l 16(sp),a0
   11662:	       move.l 24(a0),d0
   11666:	       move.l d0,-(sp)
   11668:	       jsr 14db2 <getAnimationFromVar>
   1166e:	       addq.l #4,sp
   11670:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11674:	   /-- bne.s 1167a <builtIn_animate+0x1e>
   11676:	   |   moveq #1,d0
   11678:	/--|-- bra.s 116f8 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   1167a:	|  \-> moveq #24,d0
   1167c:	|      add.l 16(sp),d0
   11680:	|      move.l d0,-(sp)
   11682:	|      jsr 1525e <trimStack>
   11688:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1168a:	|      movea.l 16(sp),a0
   1168e:	|      move.l 24(a0),d0
   11692:	|      move.l d0,-(sp)
   11694:	|      pea 7 <_start+0x7>
   11698:	|      move.l sp,d0
   1169a:	|      addq.l #8,d0
   1169c:	|      move.l d0,-(sp)
   1169e:	|      jsr 148da <getValueType>
   116a4:	|      lea 12(sp),sp
   116a8:	|      tst.w d0
   116aa:	|  /-- bne.s 116b0 <builtIn_animate+0x54>
   116ac:	|  |   moveq #1,d0
   116ae:	+--|-- bra.s 116f8 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   116b0:	|  \-> moveq #24,d0
   116b2:	|      add.l 16(sp),d0
   116b6:	|      move.l d0,-(sp)
   116b8:	|      jsr 1525e <trimStack>
   116be:	|      addq.l #4,sp
	animatePerson (obj, pp);
   116c0:	|      move.l (sp),d0
   116c2:	|      move.l 4(sp),-(sp)
   116c6:	|      move.l d0,-(sp)
   116c8:	|      jsr 959e <animatePerson>
   116ce:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   116d0:	|      move.l 4(sp),-(sp)
   116d4:	|      jsr bec2 <timeForAnim>
   116da:	|      addq.l #4,sp
   116dc:	|      move.l d0,d1
   116de:	|      moveq #28,d0
   116e0:	|      add.l 16(sp),d0
   116e4:	|      move.l d1,-(sp)
   116e6:	|      pea 1 <_start+0x1>
   116ea:	|      move.l d0,-(sp)
   116ec:	|      jsr 151cc <setVariable>
   116f2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   116f6:	|      moveq #2,d0
}
   116f8:	\----> addq.l #8,sp
   116fa:	       rts

000116fc <builtIn_setCostume>:

builtIn(setCostume)
{
   116fc:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   116fe:	       movea.l 16(sp),a0
   11702:	       move.l 24(a0),d0
   11706:	       move.l d0,-(sp)
   11708:	       jsr 14586 <getCostumeFromVar>
   1170e:	       addq.l #4,sp
   11710:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11714:	   /-- bne.s 1171a <builtIn_setCostume+0x1e>
   11716:	   |   moveq #1,d0
   11718:	/--|-- bra.s 11772 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1171a:	|  \-> moveq #24,d0
   1171c:	|      add.l 16(sp),d0
   11720:	|      move.l d0,-(sp)
   11722:	|      jsr 1525e <trimStack>
   11728:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1172a:	|      movea.l 16(sp),a0
   1172e:	|      move.l 24(a0),d0
   11732:	|      move.l d0,-(sp)
   11734:	|      pea 7 <_start+0x7>
   11738:	|      move.l sp,d0
   1173a:	|      addq.l #8,d0
   1173c:	|      move.l d0,-(sp)
   1173e:	|      jsr 148da <getValueType>
   11744:	|      lea 12(sp),sp
   11748:	|      tst.w d0
   1174a:	|  /-- bne.s 11750 <builtIn_setCostume+0x54>
   1174c:	|  |   moveq #1,d0
   1174e:	+--|-- bra.s 11772 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11750:	|  \-> moveq #24,d0
   11752:	|      add.l 16(sp),d0
   11756:	|      move.l d0,-(sp)
   11758:	|      jsr 1525e <trimStack>
   1175e:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   11760:	|      move.l (sp),d0
   11762:	|      move.l 4(sp),-(sp)
   11766:	|      move.l d0,-(sp)
   11768:	|      jsr 95e8 <animatePersonUsingPersona>
   1176e:	|      addq.l #8,sp
	return BR_CONTINUE;
   11770:	|      moveq #2,d0
}
   11772:	\----> addq.l #8,sp
   11774:	       rts

00011776 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   11776:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11778:	       movea.l 16(sp),a0
   1177c:	       move.l 24(a0),d0
   11780:	       move.l d0,-(sp)
   11782:	       pea 1 <_start+0x1>
   11786:	       move.l sp,d0
   11788:	       addq.l #8,d0
   1178a:	       move.l d0,-(sp)
   1178c:	       jsr 148da <getValueType>
   11792:	       lea 12(sp),sp
   11796:	       tst.w d0
   11798:	   /-- bne.s 1179e <builtIn_floatCharacter+0x28>
   1179a:	   |   moveq #1,d0
   1179c:	/--|-- bra.s 11812 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1179e:	|  \-> moveq #24,d0
   117a0:	|      add.l 16(sp),d0
   117a4:	|      move.l d0,-(sp)
   117a6:	|      jsr 1525e <trimStack>
   117ac:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   117ae:	|      movea.l 16(sp),a0
   117b2:	|      move.l 24(a0),d0
   117b6:	|      move.l d0,-(sp)
   117b8:	|      pea 7 <_start+0x7>
   117bc:	|      moveq #12,d0
   117be:	|      add.l sp,d0
   117c0:	|      move.l d0,-(sp)
   117c2:	|      jsr 148da <getValueType>
   117c8:	|      lea 12(sp),sp
   117cc:	|      tst.w d0
   117ce:	|  /-- bne.s 117d4 <builtIn_floatCharacter+0x5e>
   117d0:	|  |   moveq #1,d0
   117d2:	+--|-- bra.s 11812 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   117d4:	|  \-> moveq #24,d0
   117d6:	|      add.l 16(sp),d0
   117da:	|      move.l d0,-(sp)
   117dc:	|      jsr 1525e <trimStack>
   117e2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   117e4:	|      move.l 4(sp),d1
   117e8:	|      move.l (sp),d0
   117ea:	|      move.l d1,-(sp)
   117ec:	|      move.l d0,-(sp)
   117ee:	|      jsr a75c <floatCharacter>
   117f4:	|      addq.l #8,sp
   117f6:	|      movea.w d0,a0
   117f8:	|      moveq #28,d0
   117fa:	|      add.l 16(sp),d0
   117fe:	|      move.l a0,-(sp)
   11800:	|      pea 1 <_start+0x1>
   11804:	|      move.l d0,-(sp)
   11806:	|      jsr 151cc <setVariable>
   1180c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11810:	|      moveq #2,d0
}
   11812:	\----> addq.l #8,sp
   11814:	       rts

00011816 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11816:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11818:	       movea.l 16(sp),a0
   1181c:	       move.l 24(a0),d0
   11820:	       move.l d0,-(sp)
   11822:	       pea 1 <_start+0x1>
   11826:	       move.l sp,d0
   11828:	       addq.l #8,d0
   1182a:	       move.l d0,-(sp)
   1182c:	       jsr 148da <getValueType>
   11832:	       lea 12(sp),sp
   11836:	       tst.w d0
   11838:	   /-- bne.s 1183e <builtIn_setCharacterWalkSpeed+0x28>
   1183a:	   |   moveq #1,d0
   1183c:	/--|-- bra.s 118b2 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   1183e:	|  \-> moveq #24,d0
   11840:	|      add.l 16(sp),d0
   11844:	|      move.l d0,-(sp)
   11846:	|      jsr 1525e <trimStack>
   1184c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1184e:	|      movea.l 16(sp),a0
   11852:	|      move.l 24(a0),d0
   11856:	|      move.l d0,-(sp)
   11858:	|      pea 7 <_start+0x7>
   1185c:	|      moveq #12,d0
   1185e:	|      add.l sp,d0
   11860:	|      move.l d0,-(sp)
   11862:	|      jsr 148da <getValueType>
   11868:	|      lea 12(sp),sp
   1186c:	|      tst.w d0
   1186e:	|  /-- bne.s 11874 <builtIn_setCharacterWalkSpeed+0x5e>
   11870:	|  |   moveq #1,d0
   11872:	+--|-- bra.s 118b2 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11874:	|  \-> moveq #24,d0
   11876:	|      add.l 16(sp),d0
   1187a:	|      move.l d0,-(sp)
   1187c:	|      jsr 1525e <trimStack>
   11882:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   11884:	|      move.l 4(sp),d1
   11888:	|      move.l (sp),d0
   1188a:	|      move.l d1,-(sp)
   1188c:	|      move.l d0,-(sp)
   1188e:	|      jsr bcd6 <setCharacterWalkSpeed>
   11894:	|      addq.l #8,sp
   11896:	|      movea.w d0,a0
   11898:	|      moveq #28,d0
   1189a:	|      add.l 16(sp),d0
   1189e:	|      move.l a0,-(sp)
   118a0:	|      pea 1 <_start+0x1>
   118a4:	|      move.l d0,-(sp)
   118a6:	|      jsr 151cc <setVariable>
   118ac:	|      lea 12(sp),sp
	return BR_CONTINUE;
   118b0:	|      moveq #2,d0
}
   118b2:	\----> addq.l #8,sp
   118b4:	       rts

000118b6 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   118b6:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   118b8:	       movea.l 16(sp),a0
   118bc:	       move.l 24(a0),d0
   118c0:	       move.l d0,-(sp)
   118c2:	       pea 1 <_start+0x1>
   118c6:	       move.l sp,d0
   118c8:	       addq.l #8,d0
   118ca:	       move.l d0,-(sp)
   118cc:	       jsr 148da <getValueType>
   118d2:	       lea 12(sp),sp
   118d6:	       tst.w d0
   118d8:	   /-- bne.s 118de <builtIn_turnCharacter+0x28>
   118da:	   |   moveq #1,d0
   118dc:	/--|-- bra.s 11952 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   118de:	|  \-> moveq #24,d0
   118e0:	|      add.l 16(sp),d0
   118e4:	|      move.l d0,-(sp)
   118e6:	|      jsr 1525e <trimStack>
   118ec:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118ee:	|      movea.l 16(sp),a0
   118f2:	|      move.l 24(a0),d0
   118f6:	|      move.l d0,-(sp)
   118f8:	|      pea 7 <_start+0x7>
   118fc:	|      moveq #12,d0
   118fe:	|      add.l sp,d0
   11900:	|      move.l d0,-(sp)
   11902:	|      jsr 148da <getValueType>
   11908:	|      lea 12(sp),sp
   1190c:	|      tst.w d0
   1190e:	|  /-- bne.s 11914 <builtIn_turnCharacter+0x5e>
   11910:	|  |   moveq #1,d0
   11912:	+--|-- bra.s 11952 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11914:	|  \-> moveq #24,d0
   11916:	|      add.l 16(sp),d0
   1191a:	|      move.l d0,-(sp)
   1191c:	|      jsr 1525e <trimStack>
   11922:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11924:	|      move.l (sp),d1
   11926:	|      move.l 4(sp),d0
   1192a:	|      move.l d1,-(sp)
   1192c:	|      move.l d0,-(sp)
   1192e:	|      jsr bf7a <turnPersonToFace>
   11934:	|      addq.l #8,sp
   11936:	|      movea.w d0,a0
   11938:	|      moveq #28,d0
   1193a:	|      add.l 16(sp),d0
   1193e:	|      move.l a0,-(sp)
   11940:	|      pea 1 <_start+0x1>
   11944:	|      move.l d0,-(sp)
   11946:	|      jsr 151cc <setVariable>
   1194c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11950:	|      moveq #2,d0
}
   11952:	\----> addq.l #8,sp
   11954:	       rts

00011956 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   11956:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11958:	       movea.l 16(sp),a0
   1195c:	       move.l 24(a0),d0
   11960:	       move.l d0,-(sp)
   11962:	       pea 1 <_start+0x1>
   11966:	       move.l sp,d0
   11968:	       addq.l #8,d0
   1196a:	       move.l d0,-(sp)
   1196c:	       jsr 148da <getValueType>
   11972:	       lea 12(sp),sp
   11976:	       tst.w d0
   11978:	   /-- bne.s 1197e <builtIn_setCharacterExtra+0x28>
   1197a:	   |   moveq #1,d0
   1197c:	/--|-- bra.s 119f2 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   1197e:	|  \-> moveq #24,d0
   11980:	|      add.l 16(sp),d0
   11984:	|      move.l d0,-(sp)
   11986:	|      jsr 1525e <trimStack>
   1198c:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1198e:	|      movea.l 16(sp),a0
   11992:	|      move.l 24(a0),d0
   11996:	|      move.l d0,-(sp)
   11998:	|      pea 7 <_start+0x7>
   1199c:	|      moveq #12,d0
   1199e:	|      add.l sp,d0
   119a0:	|      move.l d0,-(sp)
   119a2:	|      jsr 148da <getValueType>
   119a8:	|      lea 12(sp),sp
   119ac:	|      tst.w d0
   119ae:	|  /-- bne.s 119b4 <builtIn_setCharacterExtra+0x5e>
   119b0:	|  |   moveq #1,d0
   119b2:	+--|-- bra.s 119f2 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   119b4:	|  \-> moveq #24,d0
   119b6:	|      add.l 16(sp),d0
   119ba:	|      move.l d0,-(sp)
   119bc:	|      jsr 1525e <trimStack>
   119c2:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   119c4:	|      move.l (sp),d1
   119c6:	|      move.l 4(sp),d0
   119ca:	|      move.l d1,-(sp)
   119cc:	|      move.l d0,-(sp)
   119ce:	|      jsr bd04 <setPersonExtra>
   119d4:	|      addq.l #8,sp
   119d6:	|      movea.w d0,a0
   119d8:	|      moveq #28,d0
   119da:	|      add.l 16(sp),d0
   119de:	|      move.l a0,-(sp)
   119e0:	|      pea 1 <_start+0x1>
   119e4:	|      move.l d0,-(sp)
   119e6:	|      jsr 151cc <setVariable>
   119ec:	|      lea 12(sp),sp
	return BR_CONTINUE;
   119f0:	|      moveq #2,d0
}
   119f2:	\----> addq.l #8,sp
   119f4:	       rts

000119f6 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   119f6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   119f8:	       movea.l 12(sp),a0
   119fc:	       move.l 24(a0),d0
   11a00:	       move.l d0,-(sp)
   11a02:	       pea 7 <_start+0x7>
   11a06:	       move.l sp,d0
   11a08:	       addq.l #8,d0
   11a0a:	       move.l d0,-(sp)
   11a0c:	       jsr 148da <getValueType>
   11a12:	       lea 12(sp),sp
   11a16:	       tst.w d0
   11a18:	   /-- bne.s 11a1e <builtIn_removeCharacter+0x28>
   11a1a:	   |   moveq #1,d0
   11a1c:	/--|-- bra.s 11a3c <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11a1e:	|  \-> moveq #24,d0
   11a20:	|      add.l 12(sp),d0
   11a24:	|      move.l d0,-(sp)
   11a26:	|      jsr 1525e <trimStack>
   11a2c:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11a2e:	|      move.l (sp),d0
   11a30:	|      move.l d0,-(sp)
   11a32:	|      jsr af04 <removeOneCharacter>
   11a38:	|      addq.l #4,sp
	return BR_CONTINUE;
   11a3a:	|      moveq #2,d0
}
   11a3c:	\----> addq.l #4,sp
   11a3e:	       rts

00011a40 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11a40:	                lea -28(sp),sp
   11a44:	                move.l d2,-(sp)
   11a46:	                move.l 44(sp),d1
   11a4a:	                move.l 48(sp),d0
   11a4e:	                move.w d1,d1
   11a50:	                move.w d1,6(sp)
   11a54:	                move.w d0,d0
   11a56:	                move.w d0,4(sp)
	switch (numParams) {
   11a5a:	                moveq #2,d0
   11a5c:	                cmp.l 36(sp),d0
   11a60:	      /-------- beq.w 11ba2 <moveChr+0x162>
   11a64:	      |         moveq #3,d0
   11a66:	      |         cmp.l 36(sp),d0
   11a6a:	/-----|-------- bne.w 11cd6 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a6e:	|     |         movea.l 40(sp),a0
   11a72:	|     |         move.l 24(a0),d0
   11a76:	|     |         move.l d0,-(sp)
   11a78:	|     |         pea 1 <_start+0x1>
   11a7c:	|     |         lea 20(sp),a0
   11a80:	|     |         move.l a0,-(sp)
   11a82:	|     |         jsr 148da <getValueType>
   11a88:	|     |         lea 12(sp),sp
   11a8c:	|     |         tst.w d0
   11a8e:	|     |     /-- bne.s 11a96 <moveChr+0x56>
   11a90:	|     |     |   moveq #1,d0
   11a92:	|  /--|-----|-- bra.w 11ce6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11a96:	|  |  |     \-> moveq #24,d0
   11a98:	|  |  |         add.l 40(sp),d0
   11a9c:	|  |  |         move.l d0,-(sp)
   11a9e:	|  |  |         jsr 1525e <trimStack>
   11aa4:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11aa6:	|  |  |         movea.l 40(sp),a0
   11aaa:	|  |  |         move.l 24(a0),d0
   11aae:	|  |  |         move.l d0,-(sp)
   11ab0:	|  |  |         pea 1 <_start+0x1>
   11ab4:	|  |  |         lea 24(sp),a0
   11ab8:	|  |  |         move.l a0,-(sp)
   11aba:	|  |  |         jsr 148da <getValueType>
   11ac0:	|  |  |         lea 12(sp),sp
   11ac4:	|  |  |         tst.w d0
   11ac6:	|  |  |     /-- bne.s 11ace <moveChr+0x8e>
   11ac8:	|  |  |     |   moveq #1,d0
   11aca:	|  +--|-----|-- bra.w 11ce6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11ace:	|  |  |     \-> moveq #24,d0
   11ad0:	|  |  |         add.l 40(sp),d0
   11ad4:	|  |  |         move.l d0,-(sp)
   11ad6:	|  |  |         jsr 1525e <trimStack>
   11adc:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11ade:	|  |  |         movea.l 40(sp),a0
   11ae2:	|  |  |         move.l 24(a0),d0
   11ae6:	|  |  |         move.l d0,-(sp)
   11ae8:	|  |  |         pea 7 <_start+0x7>
   11aec:	|  |  |         lea 16(sp),a0
   11af0:	|  |  |         move.l a0,-(sp)
   11af2:	|  |  |         jsr 148da <getValueType>
   11af8:	|  |  |         lea 12(sp),sp
   11afc:	|  |  |         tst.w d0
   11afe:	|  |  |     /-- bne.s 11b06 <moveChr+0xc6>
   11b00:	|  |  |     |   moveq #1,d0
   11b02:	|  +--|-----|-- bra.w 11ce6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11b06:	|  |  |     \-> moveq #24,d0
   11b08:	|  |  |         add.l 40(sp),d0
   11b0c:	|  |  |         move.l d0,-(sp)
   11b0e:	|  |  |         jsr 1525e <trimStack>
   11b14:	|  |  |         addq.l #4,sp

			if (force) {
   11b16:	|  |  |         tst.w 6(sp)
   11b1a:	|  |  |     /-- beq.s 11b4a <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11b1c:	|  |  |     |   movea.l 8(sp),a0
   11b20:	|  |  |     |   move.l 12(sp),d1
   11b24:	|  |  |     |   move.l 16(sp),d0
   11b28:	|  |  |     |   pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4d7e>
   11b2c:	|  |  |     |   move.l 44(sp),-(sp)
   11b30:	|  |  |     |   move.l a0,-(sp)
   11b32:	|  |  |     |   move.l d1,-(sp)
   11b34:	|  |  |     |   move.l d0,-(sp)
   11b36:	|  |  |     |   jsr a780 <forceWalkingPerson>
   11b3c:	|  |  |     |   lea 20(sp),sp
   11b40:	|  |  |     |   tst.w d0
   11b42:	|  |  |  /--|-- beq.s 11b9c <moveChr+0x15c>
   11b44:	|  |  |  |  |   moveq #3,d0
   11b46:	|  +--|--|--|-- bra.w 11ce6 <moveChr+0x2a6>
			} else if (immediate) {
   11b4a:	|  |  |  |  \-> tst.w 4(sp)
   11b4e:	|  |  |  |  /-- beq.s 11b6e <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11b50:	|  |  |  |  |   movea.l 8(sp),a0
   11b54:	|  |  |  |  |   move.l 12(sp),d1
   11b58:	|  |  |  |  |   move.l 16(sp),d0
   11b5c:	|  |  |  |  |   move.l a0,-(sp)
   11b5e:	|  |  |  |  |   move.l d1,-(sp)
   11b60:	|  |  |  |  |   move.l d0,-(sp)
   11b62:	|  |  |  |  |   jsr aa88 <jumpPerson>
   11b68:	|  |  |  |  |   lea 12(sp),sp
   11b6c:	|  |  |  +--|-- bra.s 11b9c <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11b6e:	|  |  |  |  \-> movea.l 8(sp),a0
   11b72:	|  |  |  |      move.l 12(sp),d1
   11b76:	|  |  |  |      move.l 16(sp),d0
   11b7a:	|  |  |  |      pea ffffffff <gcc8_c_support.c.1fed348d+0xfffb4d7e>
   11b7e:	|  |  |  |      move.l 44(sp),-(sp)
   11b82:	|  |  |  |      move.l a0,-(sp)
   11b84:	|  |  |  |      move.l d1,-(sp)
   11b86:	|  |  |  |      move.l d0,-(sp)
   11b88:	|  |  |  |      jsr ac58 <makeWalkingPerson>
   11b8e:	|  |  |  |      lea 20(sp),sp
   11b92:	|  |  |  |      tst.w d0
   11b94:	|  |  |  +----- beq.s 11b9c <moveChr+0x15c>
   11b96:	|  |  |  |      moveq #3,d0
   11b98:	|  +--|--|----- bra.w 11ce6 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11b9c:	|  |  |  \----> moveq #2,d0
   11b9e:	|  +--|-------- bra.w 11ce6 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11ba2:	|  |  \-------> movea.l 40(sp),a0
   11ba6:	|  |            move.l 24(a0),d0
   11baa:	|  |            move.l d0,-(sp)
   11bac:	|  |            pea 7 <_start+0x7>
   11bb0:	|  |            moveq #32,d0
   11bb2:	|  |            add.l sp,d0
   11bb4:	|  |            move.l d0,-(sp)
   11bb6:	|  |            jsr 148da <getValueType>
   11bbc:	|  |            lea 12(sp),sp
   11bc0:	|  |            tst.w d0
   11bc2:	|  |        /-- bne.s 11bca <moveChr+0x18a>
   11bc4:	|  |        |   moveq #1,d0
   11bc6:	|  +--------|-- bra.w 11ce6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11bca:	|  |        \-> moveq #24,d0
   11bcc:	|  |            add.l 40(sp),d0
   11bd0:	|  |            move.l d0,-(sp)
   11bd2:	|  |            jsr 1525e <trimStack>
   11bd8:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11bda:	|  |            movea.l 40(sp),a0
   11bde:	|  |            move.l 24(a0),d0
   11be2:	|  |            move.l d0,-(sp)
   11be4:	|  |            pea 7 <_start+0x7>
   11be8:	|  |            lea 28(sp),a0
   11bec:	|  |            move.l a0,-(sp)
   11bee:	|  |            jsr 148da <getValueType>
   11bf4:	|  |            lea 12(sp),sp
   11bf8:	|  |            tst.w d0
   11bfa:	|  |        /-- bne.s 11c02 <moveChr+0x1c2>
   11bfc:	|  |        |   moveq #1,d0
   11bfe:	|  +--------|-- bra.w 11ce6 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11c02:	|  |        \-> moveq #24,d0
   11c04:	|  |            add.l 40(sp),d0
   11c08:	|  |            move.l d0,-(sp)
   11c0a:	|  |            jsr 1525e <trimStack>
   11c10:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11c12:	|  |            move.l 24(sp),d0
   11c16:	|  |            move.l d0,-(sp)
   11c18:	|  |            jsr 15b1c <getRegionForObject>
   11c1e:	|  |            addq.l #4,sp
   11c20:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11c24:	|  |        /-- bne.s 11c2c <moveChr+0x1ec>
   11c26:	|  |        |   moveq #2,d0
   11c28:	|  +--------|-- bra.w 11ce6 <moveChr+0x2a6>

			if (force)
   11c2c:	|  |        \-> tst.w 6(sp)
   11c30:	|  |        /-- beq.s 11c6c <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11c32:	|  |        |   movea.l 28(sp),a0
   11c36:	|  |        |   move.l 24(a0),d2
   11c3a:	|  |        |   movea.l 20(sp),a1
   11c3e:	|  |        |   movea.l 28(sp),a0
   11c42:	|  |        |   move.l 20(a0),d1
   11c46:	|  |        |   movea.l 28(sp),a0
   11c4a:	|  |        |   move.l 16(a0),d0
   11c4e:	|  |        |   move.l d2,-(sp)
   11c50:	|  |        |   move.l 44(sp),-(sp)
   11c54:	|  |        |   move.l a1,-(sp)
   11c56:	|  |        |   move.l d1,-(sp)
   11c58:	|  |        |   move.l d0,-(sp)
   11c5a:	|  |        |   jsr a780 <forceWalkingPerson>
   11c60:	|  |        |   lea 20(sp),sp
   11c64:	|  |        |   tst.w d0
   11c66:	|  |     /--|-- beq.s 11cd2 <moveChr+0x292>
   11c68:	|  |     |  |   moveq #3,d0
   11c6a:	|  +-----|--|-- bra.s 11ce6 <moveChr+0x2a6>
			}
			else if (immediate)
   11c6c:	|  |     |  \-> tst.w 4(sp)
   11c70:	|  |     |  /-- beq.s 11c98 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11c72:	|  |     |  |   movea.l 20(sp),a1
   11c76:	|  |     |  |   movea.l 28(sp),a0
   11c7a:	|  |     |  |   move.l 20(a0),d1
   11c7e:	|  |     |  |   movea.l 28(sp),a0
   11c82:	|  |     |  |   move.l 16(a0),d0
   11c86:	|  |     |  |   move.l a1,-(sp)
   11c88:	|  |     |  |   move.l d1,-(sp)
   11c8a:	|  |     |  |   move.l d0,-(sp)
   11c8c:	|  |     |  |   jsr aa88 <jumpPerson>
   11c92:	|  |     |  |   lea 12(sp),sp
   11c96:	|  |     +--|-- bra.s 11cd2 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11c98:	|  |     |  \-> movea.l 28(sp),a0
   11c9c:	|  |     |      move.l 24(a0),d2
   11ca0:	|  |     |      movea.l 20(sp),a1
   11ca4:	|  |     |      movea.l 28(sp),a0
   11ca8:	|  |     |      move.l 20(a0),d1
   11cac:	|  |     |      movea.l 28(sp),a0
   11cb0:	|  |     |      move.l 16(a0),d0
   11cb4:	|  |     |      move.l d2,-(sp)
   11cb6:	|  |     |      move.l 44(sp),-(sp)
   11cba:	|  |     |      move.l a1,-(sp)
   11cbc:	|  |     |      move.l d1,-(sp)
   11cbe:	|  |     |      move.l d0,-(sp)
   11cc0:	|  |     |      jsr ac58 <makeWalkingPerson>
   11cc6:	|  |     |      lea 20(sp),sp
   11cca:	|  |     |      tst.w d0
   11ccc:	|  |     +----- beq.s 11cd2 <moveChr+0x292>
   11cce:	|  |     |      moveq #3,d0
   11cd0:	|  +-----|----- bra.s 11ce6 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11cd2:	|  |     \----> moveq #2,d0
   11cd4:	|  +----------- bra.s 11ce6 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11cd6:	\--|----------> pea 19c66 <graphics.c.1c13408a+0x7e>
   11cdc:	   |            jsr 1733a <KPrintF>
   11ce2:	   |            addq.l #4,sp
			return BR_ERROR;
   11ce4:	   |            moveq #1,d0
	}
}
   11ce6:	   \----------> move.l (sp)+,d2
   11ce8:	                lea 28(sp),sp
   11cec:	                rts

00011cee <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11cee:	clr.l -(sp)
   11cf0:	clr.l -(sp)
   11cf2:	move.l 16(sp),-(sp)
   11cf6:	move.l 16(sp),-(sp)
   11cfa:	jsr 11a40 <moveChr>
   11d00:	lea 16(sp),sp
}
   11d04:	rts

00011d06 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11d06:	clr.l -(sp)
   11d08:	pea 1 <_start+0x1>
   11d0c:	move.l 16(sp),-(sp)
   11d10:	move.l 16(sp),-(sp)
   11d14:	jsr 11a40 <moveChr>
   11d1a:	lea 16(sp),sp
}
   11d1e:	rts

00011d20 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11d20:	pea 1 <_start+0x1>
   11d24:	clr.l -(sp)
   11d26:	move.l 16(sp),-(sp)
   11d2a:	move.l 16(sp),-(sp)
   11d2e:	jsr 11a40 <moveChr>
   11d34:	lea 16(sp),sp
}
   11d38:	rts

00011d3a <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11d3a:	jsr 798e <clearStatusBar>
	return BR_CONTINUE;
   11d40:	moveq #2,d0
}
   11d42:	rts

00011d44 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11d44:	jsr 7a36 <killLastStatus>
	return BR_CONTINUE;
   11d4a:	moveq #2,d0
}
   11d4c:	rts

00011d4e <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11d4e:	jsr 7924 <addStatusBar>
	return BR_CONTINUE;
   11d54:	moveq #2,d0
}
   11d56:	rts

00011d58 <builtIn_statusText>:

builtIn(statusText)
{
   11d58:	       subq.l #8,sp
   11d5a:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11d5c:	       movea.l 20(sp),a0
   11d60:	       move.l 24(a0),d0
   11d64:	       move.l d0,-(sp)
   11d66:	       jsr 14eb0 <getTextFromAnyVar>
   11d6c:	       addq.l #4,sp
   11d6e:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11d72:	   /-- bne.s 11d78 <builtIn_statusText+0x20>
   11d74:	   |   moveq #1,d0
   11d76:	/--|-- bra.s 11dac <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11d78:	|  \-> moveq #24,d0
   11d7a:	|      add.l 20(sp),d0
   11d7e:	|      move.l d0,-(sp)
   11d80:	|      jsr 1525e <trimStack>
   11d86:	|      addq.l #4,sp
	setStatusBar(newText);
   11d88:	|      move.l 8(sp),-(sp)
   11d8c:	|      jsr 7cb6 <setStatusBar>
   11d92:	|      addq.l #4,sp
	FreeVec(newText);
   11d94:	|      move.l 8(sp),4(sp)
   11d9a:	|      move.l 1ca88 <SysBase>,d0
   11da0:	|      movea.l d0,a6
   11da2:	|      movea.l 4(sp),a1
   11da6:	|      jsr -690(a6)
	return BR_CONTINUE;
   11daa:	|      moveq #2,d0
}
   11dac:	\----> movea.l (sp)+,a6
   11dae:	       addq.l #8,sp
   11db0:	       rts

00011db2 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11db2:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11db4:	       movea.l 12(sp),a0
   11db8:	       move.l 24(a0),d0
   11dbc:	       move.l d0,-(sp)
   11dbe:	       pea 1 <_start+0x1>
   11dc2:	       move.l sp,d0
   11dc4:	       addq.l #8,d0
   11dc6:	       move.l d0,-(sp)
   11dc8:	       jsr 148da <getValueType>
   11dce:	       lea 12(sp),sp
   11dd2:	       tst.w d0
   11dd4:	   /-- bne.s 11dda <builtIn_lightStatus+0x28>
   11dd6:	   |   moveq #1,d0
   11dd8:	/--|-- bra.s 11df8 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11dda:	|  \-> moveq #24,d0
   11ddc:	|      add.l 12(sp),d0
   11de0:	|      move.l d0,-(sp)
   11de2:	|      jsr 1525e <trimStack>
   11de8:	|      addq.l #4,sp
	setLitStatus (val);
   11dea:	|      move.l (sp),d0
   11dec:	|      move.l d0,-(sp)
   11dee:	|      jsr 7ca6 <setLitStatus>
   11df4:	|      addq.l #4,sp
	return BR_CONTINUE;
   11df6:	|      moveq #2,d0
}
   11df8:	\----> addq.l #4,sp
   11dfa:	       rts

00011dfc <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11dfc:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11dfe:	       movea.l 16(sp),a0
   11e02:	       move.l 24(a0),d0
   11e06:	       move.l d0,-(sp)
   11e08:	       pea 1 <_start+0x1>
   11e0c:	       move.l sp,d0
   11e0e:	       addq.l #8,d0
   11e10:	       move.l d0,-(sp)
   11e12:	       jsr 148da <getValueType>
   11e18:	       lea 12(sp),sp
   11e1c:	       tst.w d0
   11e1e:	   /-- bne.s 11e24 <builtIn_positionStatus+0x28>
   11e20:	   |   moveq #1,d0
   11e22:	/--|-- bra.s 11e7e <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11e24:	|  \-> moveq #24,d0
   11e26:	|      add.l 16(sp),d0
   11e2a:	|      move.l d0,-(sp)
   11e2c:	|      jsr 1525e <trimStack>
   11e32:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e34:	|      movea.l 16(sp),a0
   11e38:	|      move.l 24(a0),d0
   11e3c:	|      move.l d0,-(sp)
   11e3e:	|      pea 1 <_start+0x1>
   11e42:	|      moveq #12,d0
   11e44:	|      add.l sp,d0
   11e46:	|      move.l d0,-(sp)
   11e48:	|      jsr 148da <getValueType>
   11e4e:	|      lea 12(sp),sp
   11e52:	|      tst.w d0
   11e54:	|  /-- bne.s 11e5a <builtIn_positionStatus+0x5e>
   11e56:	|  |   moveq #1,d0
   11e58:	+--|-- bra.s 11e7e <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11e5a:	|  \-> moveq #24,d0
   11e5c:	|      add.l 16(sp),d0
   11e60:	|      move.l d0,-(sp)
   11e62:	|      jsr 1525e <trimStack>
   11e68:	|      addq.l #4,sp
	positionStatus (x, y);
   11e6a:	|      move.l (sp),d1
   11e6c:	|      move.l 4(sp),d0
   11e70:	|      move.l d1,-(sp)
   11e72:	|      move.l d0,-(sp)
   11e74:	|      jsr 7a98 <positionStatus>
   11e7a:	|      addq.l #8,sp
	return BR_CONTINUE;
   11e7c:	|      moveq #2,d0
}
   11e7e:	\----> addq.l #8,sp
   11e80:	       rts

00011e82 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11e82:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11e84:	       movea.l 12(sp),a0
   11e88:	       move.l 24(a0),d0
   11e8c:	       move.l d0,-(sp)
   11e8e:	       pea 1 <_start+0x1>
   11e92:	       move.l sp,d0
   11e94:	       addq.l #8,d0
   11e96:	       move.l d0,-(sp)
   11e98:	       jsr 148da <getValueType>
   11e9e:	       lea 12(sp),sp
   11ea2:	       tst.w d0
   11ea4:	   /-- bne.s 11eaa <builtIn_alignStatus+0x28>
   11ea6:	   |   moveq #1,d0
   11ea8:	/--|-- bra.s 11eca <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11eaa:	|  \-> moveq #24,d0
   11eac:	|      add.l 12(sp),d0
   11eb0:	|      move.l d0,-(sp)
   11eb2:	|      jsr 1525e <trimStack>
   11eb8:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11eba:	|      move.l (sp),d0
   11ebc:	|      movea.l 1c40e <nowStatus>,a0
   11ec2:	|      move.l d0,d0
   11ec4:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11ec8:	|      moveq #2,d0
}
   11eca:	\----> addq.l #4,sp
   11ecc:	       rts

00011ece <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11ece:	             tst.l 4(sp)
   11ed2:	      /----- beq.s 11ede <getFuncNumForCallback+0x10>
   11ed4:	      |      moveq #1,d0
   11ed6:	      |      cmp.l 4(sp),d0
   11eda:	      |  /-- beq.s 11ee4 <getFuncNumForCallback+0x16>
   11edc:	   /--|--|-- bra.s 11f1a <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11ede:	   |  \--|-> clr.l 12(sp)
			break;
   11ee2:	/--|-----|-- bra.s 11f2c <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11ee4:	|  |     \-> movea.l 8(sp),a0
   11ee8:	|  |         move.l 24(a0),d0
   11eec:	|  |         move.l d0,-(sp)
   11eee:	|  |         pea 2 <_start+0x2>
   11ef2:	|  |         move.l 20(sp),-(sp)
   11ef6:	|  |         jsr 148da <getValueType>
   11efc:	|  |         lea 12(sp),sp
   11f00:	|  |         tst.w d0
   11f02:	|  |     /-- bne.s 11f08 <getFuncNumForCallback+0x3a>
   11f04:	|  |     |   clr.w d0
   11f06:	|  |  /--|-- bra.s 11f2e <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   11f08:	|  |  |  \-> moveq #24,d0
   11f0a:	|  |  |      add.l 8(sp),d0
   11f0e:	|  |  |      move.l d0,-(sp)
   11f10:	|  |  |      jsr 1525e <trimStack>
   11f16:	|  |  |      addq.l #4,sp
			break;
   11f18:	+--|--|----- bra.s 11f2c <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   11f1a:	|  \--|----> pea 19c9c <graphics.c.1c13408a+0xb4>
   11f20:	|     |      jsr 1733a <KPrintF>
   11f26:	|     |      addq.l #4,sp
			return FALSE;
   11f28:	|     |      clr.w d0
   11f2a:	|     +----- bra.s 11f2e <getFuncNumForCallback+0x60>
	}
	return TRUE;
   11f2c:	\-----|----> moveq #1,d0
}
   11f2e:	      \----> rts

00011f30 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   11f30:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f32:	       move.l sp,d0
   11f34:	       move.l d0,-(sp)
   11f36:	       move.l 16(sp),-(sp)
   11f3a:	       move.l 16(sp),-(sp)
   11f3e:	       jsr 11ece <getFuncNumForCallback>
   11f44:	       lea 12(sp),sp
   11f48:	       tst.w d0
   11f4a:	/----- beq.s 11f5a <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   11f4c:	|      movea.l 1c400 <currentEvents>,a0
   11f52:	|      move.l (sp),d0
   11f54:	|      move.l d0,(a0)
		return BR_CONTINUE;
   11f56:	|      moveq #2,d0
   11f58:	|  /-- bra.s 11f5c <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   11f5a:	\--|-> moveq #1,d0
}
   11f5c:	   \-> addq.l #4,sp
   11f5e:	       rts

00011f60 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   11f60:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f62:	       move.l sp,d0
   11f64:	       move.l d0,-(sp)
   11f66:	       move.l 16(sp),-(sp)
   11f6a:	       move.l 16(sp),-(sp)
   11f6e:	       jsr 11ece <getFuncNumForCallback>
   11f74:	       lea 12(sp),sp
   11f78:	       tst.w d0
   11f7a:	/----- beq.s 11f8c <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11f7c:	|      movea.l 1c400 <currentEvents>,a0
   11f82:	|      move.l (sp),d0
   11f84:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   11f88:	|      moveq #2,d0
   11f8a:	|  /-- bra.s 11f8e <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11f8c:	\--|-> moveq #1,d0
}
   11f8e:	   \-> addq.l #4,sp
   11f90:	       rts

00011f92 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11f92:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11f94:	       move.l sp,d0
   11f96:	       move.l d0,-(sp)
   11f98:	       move.l 16(sp),-(sp)
   11f9c:	       move.l 16(sp),-(sp)
   11fa0:	       jsr 11ece <getFuncNumForCallback>
   11fa6:	       lea 12(sp),sp
   11faa:	       tst.w d0
   11fac:	/----- beq.s 11fbe <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11fae:	|      movea.l 1c400 <currentEvents>,a0
   11fb4:	|      move.l (sp),d0
   11fb6:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11fba:	|      moveq #2,d0
   11fbc:	|  /-- bra.s 11fc0 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11fbe:	\--|-> moveq #1,d0
}
   11fc0:	   \-> addq.l #4,sp
   11fc2:	       rts

00011fc4 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   11fc4:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11fc6:	       move.l sp,d0
   11fc8:	       move.l d0,-(sp)
   11fca:	       move.l 16(sp),-(sp)
   11fce:	       move.l 16(sp),-(sp)
   11fd2:	       jsr 11ece <getFuncNumForCallback>
   11fd8:	       lea 12(sp),sp
   11fdc:	       tst.w d0
   11fde:	/----- beq.s 11ff0 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11fe0:	|      movea.l 1c400 <currentEvents>,a0
   11fe6:	|      move.l (sp),d0
   11fe8:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11fec:	|      moveq #2,d0
   11fee:	|  /-- bra.s 11ff2 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11ff0:	\--|-> moveq #1,d0
}
   11ff2:	   \-> addq.l #4,sp
   11ff4:	       rts

00011ff6 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   11ff6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11ff8:	       move.l sp,d0
   11ffa:	       move.l d0,-(sp)
   11ffc:	       move.l 16(sp),-(sp)
   12000:	       move.l 16(sp),-(sp)
   12004:	       jsr 11ece <getFuncNumForCallback>
   1200a:	       lea 12(sp),sp
   1200e:	       tst.w d0
   12010:	/----- beq.s 12022 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   12012:	|      movea.l 1c400 <currentEvents>,a0
   12018:	|      move.l (sp),d0
   1201a:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   1201e:	|      moveq #2,d0
   12020:	|  /-- bra.s 12024 <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   12022:	\--|-> moveq #1,d0
}
   12024:	   \-> addq.l #4,sp
   12026:	       rts

00012028 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   12028:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1202a:	       move.l sp,d0
   1202c:	       move.l d0,-(sp)
   1202e:	       move.l 16(sp),-(sp)
   12032:	       move.l 16(sp),-(sp)
   12036:	       jsr 11ece <getFuncNumForCallback>
   1203c:	       lea 12(sp),sp
   12040:	       tst.w d0
   12042:	/----- beq.s 12054 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   12044:	|      movea.l 1c400 <currentEvents>,a0
   1204a:	|      move.l (sp),d0
   1204c:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   12050:	|      moveq #2,d0
   12052:	|  /-- bra.s 12056 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   12054:	\--|-> moveq #1,d0
}
   12056:	   \-> addq.l #4,sp
   12058:	       rts

0001205a <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   1205a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1205c:	       move.l sp,d0
   1205e:	       move.l d0,-(sp)
   12060:	       move.l 16(sp),-(sp)
   12064:	       move.l 16(sp),-(sp)
   12068:	       jsr 11ece <getFuncNumForCallback>
   1206e:	       lea 12(sp),sp
   12072:	       tst.w d0
   12074:	/----- beq.s 12086 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   12076:	|      movea.l 1c400 <currentEvents>,a0
   1207c:	|      move.l (sp),d0
   1207e:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   12082:	|      moveq #2,d0
   12084:	|  /-- bra.s 12088 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   12086:	\--|-> moveq #1,d0
}
   12088:	   \-> addq.l #4,sp
   1208a:	       rts

0001208c <builtIn_spawnSub>:

builtIn (spawnSub)
{
   1208c:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1208e:	          move.l sp,d0
   12090:	          move.l d0,-(sp)
   12092:	          move.l 16(sp),-(sp)
   12096:	          move.l 16(sp),-(sp)
   1209a:	          jsr 11ece <getFuncNumForCallback>
   120a0:	          lea 12(sp),sp
   120a4:	          tst.w d0
   120a6:	/-------- beq.s 120d2 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   120a8:	|         move.l 1ca58 <noStack>,d1
   120ae:	|         move.l (sp),d0
   120b0:	|         pea 1 <_start+0x1>
   120b4:	|         move.l d1,-(sp)
   120b6:	|         clr.l -(sp)
   120b8:	|         clr.l -(sp)
   120ba:	|         move.l d0,-(sp)
   120bc:	|         jsr 6b68 <startNewFunctionNum>
   120c2:	|         lea 20(sp),sp
   120c6:	|         tst.l d0
   120c8:	|     /-- bne.s 120ce <builtIn_spawnSub+0x42>
   120ca:	|     |   moveq #1,d0
   120cc:	|  /--|-- bra.s 120d4 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   120ce:	|  |  \-> moveq #2,d0
   120d0:	|  +----- bra.s 120d4 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   120d2:	\--|----> moveq #1,d0
}
   120d4:	   \----> addq.l #4,sp
   120d6:	          rts

000120d8 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   120d8:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   120da:	          move.l sp,d0
   120dc:	          addq.l #4,d0
   120de:	          move.l d0,-(sp)
   120e0:	          move.l 20(sp),-(sp)
   120e4:	          move.l 20(sp),-(sp)
   120e8:	          jsr 11ece <getFuncNumForCallback>
   120ee:	          lea 12(sp),sp
   120f2:	          tst.w d0
   120f4:	/-------- beq.s 1212a <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   120f6:	|         move.l 4(sp),d1
   120fa:	|         move.l sp,d0
   120fc:	|         addq.l #2,d0
   120fe:	|         move.l d0,-(sp)
   12100:	|         move.l 20(sp),-(sp)
   12104:	|         move.l d1,-(sp)
   12106:	|         jsr 488e <cancelAFunction>
   1210c:	|         lea 12(sp),sp
		if (killedMyself) {
   12110:	|         move.w 2(sp),d0
   12114:	|  /----- beq.s 12126 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   12116:	|  |      move.l 16(sp),-(sp)
   1211a:	|  |      jsr 47ac <abortFunction>
   12120:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   12122:	|  |      moveq #5,d0
   12124:	|  |  /-- bra.s 1212c <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   12126:	|  \--|-> moveq #2,d0
   12128:	|     +-- bra.s 1212c <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   1212a:	\-----|-> moveq #1,d0
}
   1212c:	      \-> addq.l #8,sp
   1212e:	          rts

00012130 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   12130:	       subq.l #8,sp
   12132:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   12134:	       movea.l 20(sp),a0
   12138:	       move.l 24(a0),d0
   1213c:	       move.l d0,-(sp)
   1213e:	       jsr 14eb0 <getTextFromAnyVar>
   12144:	       addq.l #4,sp
   12146:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   1214a:	   /-- bne.s 12150 <builtIn_stringWidth+0x20>
   1214c:	   |   moveq #1,d0
   1214e:	/--|-- bra.s 1219e <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   12150:	|  \-> moveq #24,d0
   12152:	|      add.l 20(sp),d0
   12156:	|      move.l d0,-(sp)
   12158:	|      jsr 1525e <trimStack>
   1215e:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   12160:	|      move.l 8(sp),-(sp)
   12164:	|      jsr 159bc <stringWidth>
   1216a:	|      addq.l #4,sp
   1216c:	|      move.l d0,d1
   1216e:	|      moveq #28,d0
   12170:	|      add.l 20(sp),d0
   12174:	|      move.l d1,-(sp)
   12176:	|      pea 1 <_start+0x1>
   1217a:	|      move.l d0,-(sp)
   1217c:	|      jsr 151cc <setVariable>
   12182:	|      lea 12(sp),sp
	FreeVec(theText);
   12186:	|      move.l 8(sp),4(sp)
   1218c:	|      move.l 1ca88 <SysBase>,d0
   12192:	|      movea.l d0,a6
   12194:	|      movea.l 4(sp),a1
   12198:	|      jsr -690(a6)
	return BR_CONTINUE;
   1219c:	|      moveq #2,d0
}
   1219e:	\----> movea.l (sp)+,a6
   121a0:	       addq.l #8,sp
   121a2:	       rts

000121a4 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   121a4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   121a6:	       movea.l 12(sp),a0
   121aa:	       move.l 24(a0),d0
   121ae:	       move.l d0,-(sp)
   121b0:	       pea 1 <_start+0x1>
   121b4:	       move.l sp,d0
   121b6:	       addq.l #8,d0
   121b8:	       move.l d0,-(sp)
   121ba:	       jsr 148da <getValueType>
   121c0:	       lea 12(sp),sp
   121c4:	       tst.w d0
   121c6:	   /-- bne.s 121cc <builtIn_hardScroll+0x28>
   121c8:	   |   moveq #1,d0
   121ca:	/--|-- bra.s 121ea <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   121cc:	|  \-> moveq #24,d0
   121ce:	|      add.l 12(sp),d0
   121d2:	|      move.l d0,-(sp)
   121d4:	|      jsr 1525e <trimStack>
   121da:	|      addq.l #4,sp
	hardScroll (v);
   121dc:	|      move.l (sp),d0
   121de:	|      move.l d0,-(sp)
   121e0:	|      jsr d376 <hardScroll>
   121e6:	|      addq.l #4,sp
	return BR_CONTINUE;
   121e8:	|      moveq #2,d0
}
   121ea:	\----> addq.l #4,sp
   121ec:	       rts

000121ee <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   121ee:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   121f0:	       movea.l 12(sp),a0
   121f4:	       move.l 24(a0),d0
   121f8:	       move.l d0,-(sp)
   121fa:	       pea 7 <_start+0x7>
   121fe:	       move.l sp,d0
   12200:	       addq.l #8,d0
   12202:	       move.l d0,-(sp)
   12204:	       jsr 148da <getValueType>
   1220a:	       lea 12(sp),sp
   1220e:	       tst.w d0
   12210:	   /-- bne.s 12216 <builtIn_isScreenRegion+0x28>
   12212:	   |   moveq #1,d0
   12214:	/--|-- bra.s 12256 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   12216:	|  \-> moveq #24,d0
   12218:	|      add.l 12(sp),d0
   1221c:	|      move.l d0,-(sp)
   1221e:	|      jsr 1525e <trimStack>
   12224:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   12226:	|      move.l (sp),d0
   12228:	|      move.l d0,-(sp)
   1222a:	|      jsr 15b1c <getRegionForObject>
   12230:	|      addq.l #4,sp
   12232:	|      tst.l d0
   12234:	|      sne d0
   12236:	|      neg.b d0
   12238:	|      moveq #0,d1
   1223a:	|      move.b d0,d1
   1223c:	|      moveq #28,d0
   1223e:	|      add.l 12(sp),d0
   12242:	|      move.l d1,-(sp)
   12244:	|      pea 1 <_start+0x1>
   12248:	|      move.l d0,-(sp)
   1224a:	|      jsr 151cc <setVariable>
   12250:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12254:	|      moveq #2,d0
}
   12256:	\----> addq.l #4,sp
   12258:	       rts

0001225a <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   1225a:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1225c:	       movea.l 12(sp),a0
   12260:	       move.l 24(a0),d0
   12264:	       move.l d0,-(sp)
   12266:	       pea 1 <_start+0x1>
   1226a:	       move.l sp,d0
   1226c:	       addq.l #8,d0
   1226e:	       move.l d0,-(sp)
   12270:	       jsr 148da <getValueType>
   12276:	       lea 12(sp),sp
   1227a:	       tst.w d0
   1227c:	   /-- bne.s 12282 <builtIn_setSpeechSpeed+0x28>
   1227e:	   |   moveq #1,d0
   12280:	/--|-- bra.s 122d0 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   12282:	|  \-> moveq #24,d0
   12284:	|      add.l 12(sp),d0
   12288:	|      move.l d0,-(sp)
   1228a:	|      jsr 1525e <trimStack>
   12290:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   12292:	|      move.l (sp),d0
   12294:	|      move.l d0,-(sp)
   12296:	|      jsr 1776c <__floatsisf>
   1229c:	|      addq.l #4,sp
   1229e:	|      move.l #1008981770,-(sp)
   122a4:	|      move.l d0,-(sp)
   122a6:	|      jsr 1781e <__mulsf3>
   122ac:	|      addq.l #8,sp
   122ae:	|      move.l d0,1c412 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   122b4:	|      moveq #28,d0
   122b6:	|      add.l 12(sp),d0
   122ba:	|      pea 1 <_start+0x1>
   122be:	|      pea 1 <_start+0x1>
   122c2:	|      move.l d0,-(sp)
   122c4:	|      jsr 151cc <setVariable>
   122ca:	|      lea 12(sp),sp
	return BR_CONTINUE;
   122ce:	|      moveq #2,d0
}
   122d0:	\----> addq.l #4,sp
   122d2:	       rts

000122d4 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   122d4:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   122d6:	       movea.l 12(sp),a0
   122da:	       move.l 24(a0),d0
   122de:	       move.l d0,-(sp)
   122e0:	       pea 1 <_start+0x1>
   122e4:	       move.l sp,d0
   122e6:	       addq.l #8,d0
   122e8:	       move.l d0,-(sp)
   122ea:	       jsr 148da <getValueType>
   122f0:	       lea 12(sp),sp
   122f4:	       tst.w d0
   122f6:	   /-- bne.s 122fc <builtIn_setFontSpacing+0x28>
   122f8:	   |   moveq #1,d0
   122fa:	/--|-- bra.s 12332 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   122fc:	|  \-> move.l (sp),d0
   122fe:	|      move.l d0,d0
   12300:	|      move.w d0,1c98c <fontSpace>
	trimStack (&fun -> stack);
   12306:	|      moveq #24,d0
   12308:	|      add.l 12(sp),d0
   1230c:	|      move.l d0,-(sp)
   1230e:	|      jsr 1525e <trimStack>
   12314:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12316:	|      moveq #28,d0
   12318:	|      add.l 12(sp),d0
   1231c:	|      pea 1 <_start+0x1>
   12320:	|      pea 1 <_start+0x1>
   12324:	|      move.l d0,-(sp)
   12326:	|      jsr 151cc <setVariable>
   1232c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12330:	|      moveq #2,d0
}
   12332:	\----> addq.l #4,sp
   12334:	       rts

00012336 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   12336:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12338:	          movea.l 12(sp),a0
   1233c:	          move.l 24(a0),d0
   12340:	          move.l d0,-(sp)
   12342:	          pea 1 <_start+0x1>
   12346:	          move.l sp,d0
   12348:	          addq.l #8,d0
   1234a:	          move.l d0,-(sp)
   1234c:	          jsr 148da <getValueType>
   12352:	          lea 12(sp),sp
   12356:	          tst.w d0
   12358:	      /-- bne.s 1235e <builtIn_transitionLevel+0x28>
   1235a:	      |   moveq #1,d0
   1235c:	/-----|-- bra.s 123b2 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   1235e:	|     \-> moveq #24,d0
   12360:	|         add.l 12(sp),d0
   12364:	|         move.l d0,-(sp)
   12366:	|         jsr 1525e <trimStack>
   1236c:	|         addq.l #4,sp

	if (number < 0)
   1236e:	|         move.l (sp),d0
   12370:	|     /-- bpl.s 1237a <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   12372:	|     |   clr.b 1c3fe <brightnessLevel>
   12378:	|  /--|-- bra.s 12396 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   1237a:	|  |  \-> move.l (sp),d0
   1237c:	|  |      cmpi.l #255,d0
   12382:	|  |  /-- ble.s 1238c <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   12384:	|  |  |   st 1c3fe <brightnessLevel>
   1238a:	|  +--|-- bra.s 12396 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   1238c:	|  |  \-> move.l (sp),d0
   1238e:	|  |      move.l d0,d0
   12390:	|  |      move.b d0,1c3fe <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   12396:	|  \----> moveq #28,d0
   12398:	|         add.l 12(sp),d0
   1239c:	|         pea 1 <_start+0x1>
   123a0:	|         pea 1 <_start+0x1>
   123a4:	|         move.l d0,-(sp)
   123a6:	|         jsr 151cc <setVariable>
   123ac:	|         lea 12(sp),sp
	return BR_CONTINUE;
   123b0:	|         moveq #2,d0
}
   123b2:	\-------> addq.l #4,sp
   123b4:	          rts

000123b6 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   123b6:	movea.l 8(sp),a0
   123ba:	move.l 24(a0),d0
   123be:	move.l d0,-(sp)
   123c0:	jsr 14e1a <getBoolean>
   123c6:	addq.l #4,sp
   123c8:	move.w d0,1ca28 <captureAllKeys>
	trimStack (&fun -> stack);
   123ce:	moveq #24,d0
   123d0:	add.l 8(sp),d0
   123d4:	move.l d0,-(sp)
   123d6:	jsr 1525e <trimStack>
   123dc:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   123de:	move.w 1ca28 <captureAllKeys>,d0
   123e4:	movea.w d0,a0
   123e6:	moveq #28,d0
   123e8:	add.l 8(sp),d0
   123ec:	move.l a0,-(sp)
   123ee:	pea 1 <_start+0x1>
   123f2:	move.l d0,-(sp)
   123f4:	jsr 151cc <setVariable>
   123fa:	lea 12(sp),sp
	return BR_CONTINUE;
   123fe:	moveq #2,d0
}
   12400:	rts

00012402 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12402:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12406:	       movea.l 20(sp),a0
   1240a:	       move.l 24(a0),d0
   1240e:	       move.l d0,-(sp)
   12410:	       pea 1 <_start+0x1>
   12414:	       moveq #12,d0
   12416:	       add.l sp,d0
   12418:	       move.l d0,-(sp)
   1241a:	       jsr 148da <getValueType>
   12420:	       lea 12(sp),sp
   12424:	       tst.w d0
   12426:	   /-- bne.s 1242e <builtIn_spinCharacter+0x2c>
   12428:	   |   moveq #1,d0
   1242a:	/--|-- bra.w 124de <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1242e:	|  \-> moveq #24,d0
   12430:	|      add.l 20(sp),d0
   12434:	|      move.l d0,-(sp)
   12436:	|      jsr 1525e <trimStack>
   1243c:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1243e:	|      movea.l 20(sp),a0
   12442:	|      move.l 24(a0),d0
   12446:	|      move.l d0,-(sp)
   12448:	|      pea 7 <_start+0x7>
   1244c:	|      lea 8(sp),a0
   12450:	|      move.l a0,-(sp)
   12452:	|      jsr 148da <getValueType>
   12458:	|      lea 12(sp),sp
   1245c:	|      tst.w d0
   1245e:	|  /-- bne.s 12464 <builtIn_spinCharacter+0x62>
   12460:	|  |   moveq #1,d0
   12462:	+--|-- bra.s 124de <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12464:	|  \-> moveq #24,d0
   12466:	|      add.l 20(sp),d0
   1246a:	|      move.l d0,-(sp)
   1246c:	|      jsr 1525e <trimStack>
   12472:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12474:	|      move.l (sp),d0
   12476:	|      move.l d0,-(sp)
   12478:	|      jsr a72e <findPerson>
   1247e:	|      addq.l #4,sp
   12480:	|      move.l d0,8(sp)
	if (thisPerson) {
   12484:	|  /-- beq.s 124c4 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   12486:	|  |   move.l 4(sp),d0
   1248a:	|  |   movea.l 8(sp),a0
   1248e:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   12492:	|  |   movea.l 8(sp),a0
   12496:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   1249c:	|  |   movea.l 8(sp),a0
   124a0:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   124a6:	|  |   moveq #28,d0
   124a8:	|  |   add.l 20(sp),d0
   124ac:	|  |   pea 1 <_start+0x1>
   124b0:	|  |   pea 1 <_start+0x1>
   124b4:	|  |   move.l d0,-(sp)
   124b6:	|  |   jsr 151cc <setVariable>
   124bc:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   124c0:	|  |   moveq #3,d0
   124c2:	+--|-- bra.s 124de <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   124c4:	|  \-> moveq #28,d0
   124c6:	|      add.l 20(sp),d0
   124ca:	|      clr.l -(sp)
   124cc:	|      pea 1 <_start+0x1>
   124d0:	|      move.l d0,-(sp)
   124d2:	|      jsr 151cc <setVariable>
   124d8:	|      lea 12(sp),sp
		return BR_CONTINUE;
   124dc:	|      moveq #2,d0
	}
}
   124de:	\----> lea 12(sp),sp
   124e2:	       rts

000124e4 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   124e4:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124e6:	          movea.l 16(sp),a0
   124ea:	          move.l 24(a0),d0
   124ee:	          move.l d0,-(sp)
   124f0:	          pea 7 <_start+0x7>
   124f4:	          move.l sp,d0
   124f6:	          addq.l #8,d0
   124f8:	          move.l d0,-(sp)
   124fa:	          jsr 148da <getValueType>
   12500:	          lea 12(sp),sp
   12504:	          tst.w d0
   12506:	      /-- bne.s 1250c <builtIn_getCharacterDirection+0x28>
   12508:	      |   moveq #1,d0
   1250a:	/-----|-- bra.s 1256a <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   1250c:	|     \-> moveq #24,d0
   1250e:	|         add.l 16(sp),d0
   12512:	|         move.l d0,-(sp)
   12514:	|         jsr 1525e <trimStack>
   1251a:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1251c:	|         move.l (sp),d0
   1251e:	|         move.l d0,-(sp)
   12520:	|         jsr a72e <findPerson>
   12526:	|         addq.l #4,sp
   12528:	|         move.l d0,4(sp)
	if (thisPerson) {
   1252c:	|  /----- beq.s 12550 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   1252e:	|  |      movea.l 4(sp),a0
   12532:	|  |      move.l 106(a0),d1
   12536:	|  |      moveq #28,d0
   12538:	|  |      add.l 16(sp),d0
   1253c:	|  |      move.l d1,-(sp)
   1253e:	|  |      pea 1 <_start+0x1>
   12542:	|  |      move.l d0,-(sp)
   12544:	|  |      jsr 151cc <setVariable>
   1254a:	|  |      lea 12(sp),sp
   1254e:	|  |  /-- bra.s 12568 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12550:	|  \--|-> moveq #28,d0
   12552:	|     |   add.l 16(sp),d0
   12556:	|     |   clr.l -(sp)
   12558:	|     |   pea 1 <_start+0x1>
   1255c:	|     |   move.l d0,-(sp)
   1255e:	|     |   jsr 151cc <setVariable>
   12564:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12568:	|     \-> moveq #2,d0
}
   1256a:	\-------> addq.l #8,sp
   1256c:	          rts

0001256e <builtIn_isCharacter>:

builtIn(isCharacter)
{
   1256e:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12570:	       movea.l 16(sp),a0
   12574:	       move.l 24(a0),d0
   12578:	       move.l d0,-(sp)
   1257a:	       pea 7 <_start+0x7>
   1257e:	       move.l sp,d0
   12580:	       addq.l #8,d0
   12582:	       move.l d0,-(sp)
   12584:	       jsr 148da <getValueType>
   1258a:	       lea 12(sp),sp
   1258e:	       tst.w d0
   12590:	   /-- bne.s 12596 <builtIn_isCharacter+0x28>
   12592:	   |   moveq #1,d0
   12594:	/--|-- bra.s 125d8 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   12596:	|  \-> moveq #24,d0
   12598:	|      add.l 16(sp),d0
   1259c:	|      move.l d0,-(sp)
   1259e:	|      jsr 1525e <trimStack>
   125a4:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   125a6:	|      move.l (sp),d0
   125a8:	|      move.l d0,-(sp)
   125aa:	|      jsr a72e <findPerson>
   125b0:	|      addq.l #4,sp
   125b2:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   125b6:	|      sne d0
   125b8:	|      neg.b d0
   125ba:	|      moveq #0,d1
   125bc:	|      move.b d0,d1
   125be:	|      moveq #28,d0
   125c0:	|      add.l 16(sp),d0
   125c4:	|      move.l d1,-(sp)
   125c6:	|      pea 1 <_start+0x1>
   125ca:	|      move.l d0,-(sp)
   125cc:	|      jsr 151cc <setVariable>
   125d2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   125d6:	|      moveq #2,d0
}
   125d8:	\----> addq.l #8,sp
   125da:	       rts

000125dc <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   125dc:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   125de:	          movea.l 16(sp),a0
   125e2:	          move.l 24(a0),d0
   125e6:	          move.l d0,-(sp)
   125e8:	          pea 7 <_start+0x7>
   125ec:	          move.l sp,d0
   125ee:	          addq.l #8,d0
   125f0:	          move.l d0,-(sp)
   125f2:	          jsr 148da <getValueType>
   125f8:	          lea 12(sp),sp
   125fc:	          tst.w d0
   125fe:	      /-- bne.s 12604 <builtIn_normalCharacter+0x28>
   12600:	      |   moveq #1,d0
   12602:	/-----|-- bra.s 12680 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   12604:	|     \-> moveq #24,d0
   12606:	|         add.l 16(sp),d0
   1260a:	|         move.l d0,-(sp)
   1260c:	|         jsr 1525e <trimStack>
   12612:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12614:	|         move.l (sp),d0
   12616:	|         move.l d0,-(sp)
   12618:	|         jsr a72e <findPerson>
   1261e:	|         addq.l #4,sp
   12620:	|         move.l d0,4(sp)
	if (thisPerson)
   12624:	|  /----- beq.s 12666 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   12626:	|  |      movea.l 4(sp),a0
   1262a:	|  |      movea.l 80(a0),a0
   1262e:	|  |      move.l (a0),d1
   12630:	|  |      movea.l 4(sp),a0
   12634:	|  |      move.l 106(a0),d0
   12638:	|  |      add.l d0,d0
   1263a:	|  |      add.l d0,d0
   1263c:	|  |      movea.l d1,a0
   1263e:	|  |      adda.l d0,a0
   12640:	|  |      move.l (a0),d0
   12642:	|  |      movea.l 4(sp),a0
   12646:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1264a:	|  |      moveq #28,d0
   1264c:	|  |      add.l 16(sp),d0
   12650:	|  |      pea 1 <_start+0x1>
   12654:	|  |      pea 1 <_start+0x1>
   12658:	|  |      move.l d0,-(sp)
   1265a:	|  |      jsr 151cc <setVariable>
   12660:	|  |      lea 12(sp),sp
   12664:	|  |  /-- bra.s 1267e <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12666:	|  \--|-> moveq #28,d0
   12668:	|     |   add.l 16(sp),d0
   1266c:	|     |   clr.l -(sp)
   1266e:	|     |   pea 1 <_start+0x1>
   12672:	|     |   move.l d0,-(sp)
   12674:	|     |   jsr 151cc <setVariable>
   1267a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1267e:	|     \-> moveq #2,d0
}
   12680:	\-------> addq.l #8,sp
   12682:	          rts

00012684 <builtIn_isMoving>:

builtIn(isMoving)
{
   12684:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12686:	          movea.l 16(sp),a0
   1268a:	          move.l 24(a0),d0
   1268e:	          move.l d0,-(sp)
   12690:	          pea 7 <_start+0x7>
   12694:	          move.l sp,d0
   12696:	          addq.l #8,d0
   12698:	          move.l d0,-(sp)
   1269a:	          jsr 148da <getValueType>
   126a0:	          lea 12(sp),sp
   126a4:	          tst.w d0
   126a6:	      /-- bne.s 126ac <builtIn_isMoving+0x28>
   126a8:	      |   moveq #1,d0
   126aa:	/-----|-- bra.s 1270c <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   126ac:	|     \-> moveq #24,d0
   126ae:	|         add.l 16(sp),d0
   126b2:	|         move.l d0,-(sp)
   126b4:	|         jsr 1525e <trimStack>
   126ba:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   126bc:	|         move.l (sp),d0
   126be:	|         move.l d0,-(sp)
   126c0:	|         jsr a72e <findPerson>
   126c6:	|         addq.l #4,sp
   126c8:	|         move.l d0,4(sp)
	if (thisPerson)
   126cc:	|  /----- beq.s 126f2 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   126ce:	|  |      movea.l 4(sp),a0
   126d2:	|  |      move.w 64(a0),d0
   126d6:	|  |      movea.w d0,a0
   126d8:	|  |      moveq #28,d0
   126da:	|  |      add.l 16(sp),d0
   126de:	|  |      move.l a0,-(sp)
   126e0:	|  |      pea 1 <_start+0x1>
   126e4:	|  |      move.l d0,-(sp)
   126e6:	|  |      jsr 151cc <setVariable>
   126ec:	|  |      lea 12(sp),sp
   126f0:	|  |  /-- bra.s 1270a <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   126f2:	|  \--|-> moveq #28,d0
   126f4:	|     |   add.l 16(sp),d0
   126f8:	|     |   clr.l -(sp)
   126fa:	|     |   pea 1 <_start+0x1>
   126fe:	|     |   move.l d0,-(sp)
   12700:	|     |   jsr 151cc <setVariable>
   12706:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1270a:	|     \-> moveq #2,d0
}
   1270c:	\-------> addq.l #8,sp
   1270e:	          rts

00012710 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12710:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12714:	          movea.l 20(sp),a0
   12718:	          move.l 24(a0),d0
   1271c:	          move.l d0,-(sp)
   1271e:	          pea 7 <_start+0x7>
   12722:	          lea 8(sp),a0
   12726:	          move.l a0,-(sp)
   12728:	          jsr 148da <getValueType>
   1272e:	          lea 12(sp),sp
   12732:	          tst.w d0
   12734:	      /-- bne.s 1273c <builtIn_fetchEvent+0x2c>
   12736:	      |   moveq #1,d0
   12738:	/-----|-- bra.w 127d0 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1273c:	|     \-> moveq #24,d0
   1273e:	|         add.l 20(sp),d0
   12742:	|         move.l d0,-(sp)
   12744:	|         jsr 1525e <trimStack>
   1274a:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1274c:	|         movea.l 20(sp),a0
   12750:	|         move.l 24(a0),d0
   12754:	|         move.l d0,-(sp)
   12756:	|         pea 7 <_start+0x7>
   1275a:	|         moveq #12,d0
   1275c:	|         add.l sp,d0
   1275e:	|         move.l d0,-(sp)
   12760:	|         jsr 148da <getValueType>
   12766:	|         lea 12(sp),sp
   1276a:	|         tst.w d0
   1276c:	|     /-- bne.s 12772 <builtIn_fetchEvent+0x62>
   1276e:	|     |   moveq #1,d0
   12770:	+-----|-- bra.s 127d0 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12772:	|     \-> moveq #24,d0
   12774:	|         add.l 20(sp),d0
   12778:	|         move.l d0,-(sp)
   1277a:	|         jsr 1525e <trimStack>
   12780:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12782:	|         move.l (sp),d1
   12784:	|         move.l 4(sp),d0
   12788:	|         move.l d1,-(sp)
   1278a:	|         move.l d0,-(sp)
   1278c:	|         jsr d658 <getCombinationFunction>
   12792:	|         addq.l #8,sp
   12794:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   12798:	|  /----- beq.s 127b6 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   1279a:	|  |      moveq #28,d0
   1279c:	|  |      add.l 20(sp),d0
   127a0:	|  |      move.l 8(sp),-(sp)
   127a4:	|  |      pea 2 <_start+0x2>
   127a8:	|  |      move.l d0,-(sp)
   127aa:	|  |      jsr 151cc <setVariable>
   127b0:	|  |      lea 12(sp),sp
   127b4:	|  |  /-- bra.s 127ce <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   127b6:	|  \--|-> moveq #28,d0
   127b8:	|     |   add.l 20(sp),d0
   127bc:	|     |   clr.l -(sp)
   127be:	|     |   pea 1 <_start+0x1>
   127c2:	|     |   move.l d0,-(sp)
   127c4:	|     |   jsr 151cc <setVariable>
   127ca:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   127ce:	|     \-> moveq #2,d0
}
   127d0:	\-------> lea 12(sp),sp
   127d4:	          rts

000127d6 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   127d6:	       lea -24(sp),sp
   127da:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   127dc:	       movea.l 36(sp),a0
   127e0:	       move.l 24(a0),d0
   127e4:	       move.l d0,-(sp)
   127e6:	       jsr 14eb0 <getTextFromAnyVar>
   127ec:	       addq.l #4,sp
   127ee:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   127f2:	       moveq #24,d0
   127f4:	       add.l 36(sp),d0
   127f8:	       move.l d0,-(sp)
   127fa:	       jsr 1525e <trimStack>
   12800:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12802:	       move.l 24(sp),-(sp)
   12806:	       jsr 2fe <encodeFilename>
   1280c:	       addq.l #4,sp
   1280e:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12812:	       move.l 24(sp),16(sp)
   12818:	       move.l 1ca88 <SysBase>,d0
   1281e:	       movea.l d0,a6
   12820:	       movea.l 16(sp),a1
   12824:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12828:	       move.l 20(sp),-(sp)
   1282c:	       jsr e410 <failSecurityCheck>
   12832:	       addq.l #4,sp
   12834:	       tst.w d0
   12836:	   /-- beq.s 1283c <builtIn_deleteFile+0x66>
   12838:	   |   moveq #1,d0
   1283a:	/--|-- bra.s 1288a <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   1283c:	|  \-> move.l 20(sp),12(sp)
   12842:	|      move.l 1ca90 <DOSBase>,d0
   12848:	|      movea.l d0,a6
   1284a:	|      move.l 12(sp),d1
   1284e:	|      jsr -72(a6)
   12852:	|      move.l d0,8(sp)
   12856:	|      move.l 8(sp),d1
   1285a:	|      moveq #28,d0
   1285c:	|      add.l 36(sp),d0
   12860:	|      move.l d1,-(sp)
   12862:	|      pea 1 <_start+0x1>
   12866:	|      move.l d0,-(sp)
   12868:	|      jsr 151cc <setVariable>
   1286e:	|      lea 12(sp),sp
    FreeVec(nam);
   12872:	|      move.l 20(sp),4(sp)
   12878:	|      move.l 1ca88 <SysBase>,d0
   1287e:	|      movea.l d0,a6
   12880:	|      movea.l 4(sp),a1
   12884:	|      jsr -690(a6)

    return BR_CONTINUE;
   12888:	|      moveq #2,d0
}
   1288a:	\----> movea.l (sp)+,a6
   1288c:	       lea 24(sp),sp
   12890:	       rts

00012892 <builtIn_renameFile>:

builtIn(renameFile)
{
   12892:	       lea -40(sp),sp
   12896:	       move.l a6,-(sp)
   12898:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   1289a:	       movea.l 56(sp),a0
   1289e:	       move.l 24(a0),d0
   128a2:	       move.l d0,-(sp)
   128a4:	       jsr 14eb0 <getTextFromAnyVar>
   128aa:	       addq.l #4,sp
   128ac:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   128b0:	       move.l 44(sp),-(sp)
   128b4:	       jsr 2fe <encodeFilename>
   128ba:	       addq.l #4,sp
   128bc:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   128c0:	       moveq #24,d0
   128c2:	       add.l 56(sp),d0
   128c6:	       move.l d0,-(sp)
   128c8:	       jsr 1525e <trimStack>
   128ce:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   128d0:	       move.l 40(sp),-(sp)
   128d4:	       jsr e410 <failSecurityCheck>
   128da:	       addq.l #4,sp
   128dc:	       tst.w d0
   128de:	   /-- beq.s 128e6 <builtIn_renameFile+0x54>
   128e0:	   |   moveq #1,d0
   128e2:	/--|-- bra.w 129cc <builtIn_renameFile+0x13a>
	FreeVec(temp);
   128e6:	|  \-> move.l 44(sp),36(sp)
   128ec:	|      move.l 1ca88 <SysBase>,d0
   128f2:	|      movea.l d0,a6
   128f4:	|      movea.l 36(sp),a1
   128f8:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   128fc:	|      movea.l 56(sp),a0
   12900:	|      move.l 24(a0),d0
   12904:	|      move.l d0,-(sp)
   12906:	|      jsr 14eb0 <getTextFromAnyVar>
   1290c:	|      addq.l #4,sp
   1290e:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12912:	|      move.l 44(sp),-(sp)
   12916:	|      jsr 2fe <encodeFilename>
   1291c:	|      addq.l #4,sp
   1291e:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12922:	|      moveq #24,d0
   12924:	|      add.l 56(sp),d0
   12928:	|      move.l d0,-(sp)
   1292a:	|      jsr 1525e <trimStack>
   12930:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12932:	|      move.l 32(sp),-(sp)
   12936:	|      jsr e410 <failSecurityCheck>
   1293c:	|      addq.l #4,sp
   1293e:	|      tst.w d0
   12940:	|  /-- beq.s 12948 <builtIn_renameFile+0xb6>
   12942:	|  |   moveq #1,d0
   12944:	+--|-- bra.w 129cc <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12948:	|  \-> move.l 44(sp),28(sp)
   1294e:	|      move.l 1ca88 <SysBase>,d0
   12954:	|      movea.l d0,a6
   12956:	|      movea.l 28(sp),a1
   1295a:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   1295e:	|      move.l 32(sp),24(sp)
   12964:	|      move.l 40(sp),20(sp)
   1296a:	|      move.l 1ca90 <DOSBase>,d0
   12970:	|      movea.l d0,a6
   12972:	|      move.l 24(sp),d1
   12976:	|      move.l 20(sp),d2
   1297a:	|      jsr -78(a6)
   1297e:	|      move.l d0,16(sp)
   12982:	|      move.l 16(sp),d1
   12986:	|      moveq #28,d0
   12988:	|      add.l 56(sp),d0
   1298c:	|      move.l d1,-(sp)
   1298e:	|      pea 1 <_start+0x1>
   12992:	|      move.l d0,-(sp)
   12994:	|      jsr 151cc <setVariable>
   1299a:	|      lea 12(sp),sp
	FreeVec(nam);
   1299e:	|      move.l 32(sp),12(sp)
   129a4:	|      move.l 1ca88 <SysBase>,d0
   129aa:	|      movea.l d0,a6
   129ac:	|      movea.l 12(sp),a1
   129b0:	|      jsr -690(a6)
	FreeVec(newnam);
   129b4:	|      move.l 40(sp),8(sp)
   129ba:	|      move.l 1ca88 <SysBase>,d0
   129c0:	|      movea.l d0,a6
   129c2:	|      movea.l 8(sp),a1
   129c6:	|      jsr -690(a6)

	return BR_CONTINUE;
   129ca:	|      moveq #2,d0
}
   129cc:	\----> move.l (sp)+,d2
   129ce:	       movea.l (sp)+,a6
   129d0:	       lea 40(sp),sp
   129d4:	       rts

000129d6 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   129d6:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   129d8:	       movea.l 12(sp),a0
   129dc:	       move.l 24(a0),d0
   129e0:	       move.l d0,-(sp)
   129e2:	       pea 5 <_start+0x5>
   129e6:	       move.l sp,d0
   129e8:	       addq.l #8,d0
   129ea:	       move.l d0,-(sp)
   129ec:	       jsr 148da <getValueType>
   129f2:	       lea 12(sp),sp
   129f6:	       tst.w d0
   129f8:	   /-- bne.s 129fe <builtIn_cacheSound+0x28>
   129fa:	   |   moveq #1,d0
   129fc:	/--|-- bra.s 12a26 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   129fe:	|  \-> moveq #24,d0
   12a00:	|      add.l 12(sp),d0
   12a04:	|      move.l d0,-(sp)
   12a06:	|      jsr 1525e <trimStack>
   12a0c:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12a0e:	|      move.l (sp),d0
   12a10:	|      move.l d0,-(sp)
   12a12:	|      jsr d258 <cacheSound>
   12a18:	|      addq.l #4,sp
   12a1a:	|      moveq #-1,d1
   12a1c:	|      cmp.l d0,d1
   12a1e:	|  /-- bne.s 12a24 <builtIn_cacheSound+0x4e>
   12a20:	|  |   moveq #1,d0
   12a22:	+--|-- bra.s 12a26 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12a24:	|  \-> moveq #2,d0
}
   12a26:	\----> addq.l #4,sp
   12a28:	       rts

00012a2a <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12a2a:	pea 19cb1 <graphics.c.1c13408a+0xc9>
   12a30:	jsr 1733a <KPrintF>
   12a36:	addq.l #4,sp
	return BR_CONTINUE;
   12a38:	moveq #2,d0
}
   12a3a:	rts

00012a3c <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12a3c:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12a40:	          movea.l 20(sp),a0
   12a44:	          move.l 24(a0),d0
   12a48:	          move.l d0,-(sp)
   12a4a:	          pea 1 <_start+0x1>
   12a4e:	          moveq #12,d0
   12a50:	          add.l sp,d0
   12a52:	          move.l d0,-(sp)
   12a54:	          jsr 148da <getValueType>
   12a5a:	          lea 12(sp),sp
   12a5e:	          tst.w d0
   12a60:	      /-- bne.s 12a68 <builtIn_setCharacterSpinSpeed+0x2c>
   12a62:	      |   moveq #1,d0
   12a64:	/-----|-- bra.w 12b02 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12a68:	|     \-> moveq #24,d0
   12a6a:	|         add.l 20(sp),d0
   12a6e:	|         move.l d0,-(sp)
   12a70:	|         jsr 1525e <trimStack>
   12a76:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a78:	|         movea.l 20(sp),a0
   12a7c:	|         move.l 24(a0),d0
   12a80:	|         move.l d0,-(sp)
   12a82:	|         pea 7 <_start+0x7>
   12a86:	|         lea 8(sp),a0
   12a8a:	|         move.l a0,-(sp)
   12a8c:	|         jsr 148da <getValueType>
   12a92:	|         lea 12(sp),sp
   12a96:	|         tst.w d0
   12a98:	|     /-- bne.s 12a9e <builtIn_setCharacterSpinSpeed+0x62>
   12a9a:	|     |   moveq #1,d0
   12a9c:	+-----|-- bra.s 12b02 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12a9e:	|     \-> moveq #24,d0
   12aa0:	|         add.l 20(sp),d0
   12aa4:	|         move.l d0,-(sp)
   12aa6:	|         jsr 1525e <trimStack>
   12aac:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12aae:	|         move.l (sp),d0
   12ab0:	|         move.l d0,-(sp)
   12ab2:	|         jsr a72e <findPerson>
   12ab8:	|         addq.l #4,sp
   12aba:	|         move.l d0,8(sp)

	if (thisPerson) {
   12abe:	|  /----- beq.s 12ae8 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12ac0:	|  |      move.l 4(sp),d0
   12ac4:	|  |      movea.l 8(sp),a0
   12ac8:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12acc:	|  |      moveq #28,d0
   12ace:	|  |      add.l 20(sp),d0
   12ad2:	|  |      pea 1 <_start+0x1>
   12ad6:	|  |      pea 1 <_start+0x1>
   12ada:	|  |      move.l d0,-(sp)
   12adc:	|  |      jsr 151cc <setVariable>
   12ae2:	|  |      lea 12(sp),sp
   12ae6:	|  |  /-- bra.s 12b00 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12ae8:	|  \--|-> moveq #28,d0
   12aea:	|     |   add.l 20(sp),d0
   12aee:	|     |   clr.l -(sp)
   12af0:	|     |   pea 1 <_start+0x1>
   12af4:	|     |   move.l d0,-(sp)
   12af6:	|     |   jsr 151cc <setVariable>
   12afc:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12b00:	|     \-> moveq #2,d0
}
   12b02:	\-------> lea 12(sp),sp
   12b06:	          rts

00012b08 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12b08:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12b0c:	          movea.l 20(sp),a0
   12b10:	          move.l 24(a0),d0
   12b14:	          move.l d0,-(sp)
   12b16:	          pea 1 <_start+0x1>
   12b1a:	          moveq #12,d0
   12b1c:	          add.l sp,d0
   12b1e:	          move.l d0,-(sp)
   12b20:	          jsr 148da <getValueType>
   12b26:	          lea 12(sp),sp
   12b2a:	          tst.w d0
   12b2c:	      /-- bne.s 12b34 <builtIn_setCharacterAngleOffset+0x2c>
   12b2e:	      |   moveq #1,d0
   12b30:	/-----|-- bra.w 12bce <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12b34:	|     \-> moveq #24,d0
   12b36:	|         add.l 20(sp),d0
   12b3a:	|         move.l d0,-(sp)
   12b3c:	|         jsr 1525e <trimStack>
   12b42:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12b44:	|         movea.l 20(sp),a0
   12b48:	|         move.l 24(a0),d0
   12b4c:	|         move.l d0,-(sp)
   12b4e:	|         pea 7 <_start+0x7>
   12b52:	|         lea 8(sp),a0
   12b56:	|         move.l a0,-(sp)
   12b58:	|         jsr 148da <getValueType>
   12b5e:	|         lea 12(sp),sp
   12b62:	|         tst.w d0
   12b64:	|     /-- bne.s 12b6a <builtIn_setCharacterAngleOffset+0x62>
   12b66:	|     |   moveq #1,d0
   12b68:	+-----|-- bra.s 12bce <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12b6a:	|     \-> moveq #24,d0
   12b6c:	|         add.l 20(sp),d0
   12b70:	|         move.l d0,-(sp)
   12b72:	|         jsr 1525e <trimStack>
   12b78:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12b7a:	|         move.l (sp),d0
   12b7c:	|         move.l d0,-(sp)
   12b7e:	|         jsr a72e <findPerson>
   12b84:	|         addq.l #4,sp
   12b86:	|         move.l d0,8(sp)

	if (thisPerson) {
   12b8a:	|  /----- beq.s 12bb4 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12b8c:	|  |      move.l 4(sp),d0
   12b90:	|  |      movea.l 8(sp),a0
   12b94:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12b98:	|  |      moveq #28,d0
   12b9a:	|  |      add.l 20(sp),d0
   12b9e:	|  |      pea 1 <_start+0x1>
   12ba2:	|  |      pea 1 <_start+0x1>
   12ba6:	|  |      move.l d0,-(sp)
   12ba8:	|  |      jsr 151cc <setVariable>
   12bae:	|  |      lea 12(sp),sp
   12bb2:	|  |  /-- bra.s 12bcc <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12bb4:	|  \--|-> moveq #28,d0
   12bb6:	|     |   add.l 20(sp),d0
   12bba:	|     |   clr.l -(sp)
   12bbc:	|     |   pea 1 <_start+0x1>
   12bc0:	|     |   move.l d0,-(sp)
   12bc2:	|     |   jsr 151cc <setVariable>
   12bc8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12bcc:	|     \-> moveq #2,d0
}
   12bce:	\-------> lea 12(sp),sp
   12bd2:	          rts

00012bd4 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12bd4:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12bd6:	       movea.l 12(sp),a0
   12bda:	       move.l 24(a0),d0
   12bde:	       move.l d0,-(sp)
   12be0:	       pea 1 <_start+0x1>
   12be4:	       move.l sp,d0
   12be6:	       addq.l #8,d0
   12be8:	       move.l d0,-(sp)
   12bea:	       jsr 148da <getValueType>
   12bf0:	       lea 12(sp),sp
   12bf4:	       tst.w d0
   12bf6:	   /-- bne.s 12bfc <builtIn_transitionMode+0x28>
   12bf8:	   |   moveq #1,d0
   12bfa:	/--|-- bra.s 12c32 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12bfc:	|  \-> move.l (sp),d0
   12bfe:	|      move.l d0,d0
   12c00:	|      move.b d0,1c962 <fadeMode>
	trimStack (&fun -> stack);
   12c06:	|      moveq #24,d0
   12c08:	|      add.l 12(sp),d0
   12c0c:	|      move.l d0,-(sp)
   12c0e:	|      jsr 1525e <trimStack>
   12c14:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12c16:	|      moveq #28,d0
   12c18:	|      add.l 12(sp),d0
   12c1c:	|      pea 1 <_start+0x1>
   12c20:	|      pea 1 <_start+0x1>
   12c24:	|      move.l d0,-(sp)
   12c26:	|      jsr 151cc <setVariable>
   12c2c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12c30:	|      moveq #2,d0
}
   12c32:	\----> addq.l #4,sp
   12c34:	       rts

00012c36 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12c36:	moveq #24,d0
   12c38:	add.l 8(sp),d0
   12c3c:	move.l d0,-(sp)
   12c3e:	jsr 1525e <trimStack>
   12c44:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12c46:	moveq #28,d0
   12c48:	add.l 8(sp),d0
   12c4c:	pea 1 <_start+0x1>
   12c50:	pea 1 <_start+0x1>
   12c54:	move.l d0,-(sp)
   12c56:	jsr 151cc <setVariable>
   12c5c:	lea 12(sp),sp
	return BR_CONTINUE;
   12c60:	moveq #2,d0
}
   12c62:	rts

00012c64 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12c64:	pea 19cdb <graphics.c.1c13408a+0xf3>
   12c6a:	jsr 1733a <KPrintF>
   12c70:	addq.l #4,sp
	return BR_CONTINUE;
   12c72:	moveq #2,d0
}
   12c74:	rts

00012c76 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12c76:	       lea -16(sp),sp
   12c7a:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12c7c:	       movea.l 28(sp),a0
   12c80:	       move.l 24(a0),d0
   12c84:	       move.l d0,-(sp)
   12c86:	       jsr 14eb0 <getTextFromAnyVar>
   12c8c:	       addq.l #4,sp
   12c8e:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12c92:	   /-- bne.s 12c9a <builtIn_saveCustomData+0x24>
   12c94:	   |   moveq #1,d0
   12c96:	/--|-- bra.w 12d4c <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12c9a:	|  \-> move.l 16(sp),-(sp)
   12c9e:	|      jsr 2fe <encodeFilename>
   12ca4:	|      addq.l #4,sp
   12ca6:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12caa:	|      move.l 16(sp),8(sp)
   12cb0:	|      move.l 1ca88 <SysBase>,d0
   12cb6:	|      movea.l d0,a6
   12cb8:	|      movea.l 8(sp),a1
   12cbc:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12cc0:	|      move.l 12(sp),-(sp)
   12cc4:	|      jsr e410 <failSecurityCheck>
   12cca:	|      addq.l #4,sp
   12ccc:	|      tst.w d0
   12cce:	|  /-- beq.s 12cd4 <builtIn_saveCustomData+0x5e>
   12cd0:	|  |   moveq #1,d0
   12cd2:	+--|-- bra.s 12d4c <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12cd4:	|  \-> moveq #24,d0
   12cd6:	|      add.l 28(sp),d0
   12cda:	|      move.l d0,-(sp)
   12cdc:	|      jsr 1525e <trimStack>
   12ce2:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12ce4:	|      movea.l 28(sp),a0
   12ce8:	|      movea.l 24(a0),a0
   12cec:	|      move.l (a0),d0
   12cee:	|      moveq #6,d1
   12cf0:	|      cmp.l d0,d1
   12cf2:	|  /-- beq.s 12d06 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12cf4:	|  |   pea 19d08 <graphics.c.1c13408a+0x120>
   12cfa:	|  |   jsr 1733a <KPrintF>
   12d00:	|  |   addq.l #4,sp
		return BR_ERROR;
   12d02:	|  |   moveq #1,d0
   12d04:	+--|-- bra.s 12d4c <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12d06:	|  \-> movea.l 28(sp),a0
   12d0a:	|      move.l 24(a0),d0
   12d0e:	|      move.l d0,-(sp)
   12d10:	|      move.l 16(sp),-(sp)
   12d14:	|      jsr e060 <stackToFile>
   12d1a:	|      addq.l #8,sp
   12d1c:	|      tst.w d0
   12d1e:	|  /-- bne.s 12d24 <builtIn_saveCustomData+0xae>
   12d20:	|  |   moveq #1,d0
   12d22:	+--|-- bra.s 12d4c <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12d24:	|  \-> moveq #24,d0
   12d26:	|      add.l 28(sp),d0
   12d2a:	|      move.l d0,-(sp)
   12d2c:	|      jsr 1525e <trimStack>
   12d32:	|      addq.l #4,sp
	FreeVec(fileName);
   12d34:	|      move.l 12(sp),4(sp)
   12d3a:	|      move.l 1ca88 <SysBase>,d0
   12d40:	|      movea.l d0,a6
   12d42:	|      movea.l 4(sp),a1
   12d46:	|      jsr -690(a6)
	return BR_CONTINUE;
   12d4a:	|      moveq #2,d0
}
   12d4c:	\----> movea.l (sp)+,a6
   12d4e:	       lea 16(sp),sp
   12d52:	       rts

00012d54 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12d54:	       lea -28(sp),sp
   12d58:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12d5a:	       movea.l 40(sp),a0
   12d5e:	       move.l 24(a0),d0
   12d62:	       move.l d0,-(sp)
   12d64:	       jsr 14eb0 <getTextFromAnyVar>
   12d6a:	       addq.l #4,sp
   12d6c:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12d70:	   /-- bne.s 12d78 <builtIn_loadCustomData+0x24>
   12d72:	   |   moveq #1,d0
   12d74:	/--|-- bra.w 12e74 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12d78:	|  \-> move.l 28(sp),-(sp)
   12d7c:	|      jsr 2fe <encodeFilename>
   12d82:	|      addq.l #4,sp
   12d84:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12d88:	|      move.l 28(sp),20(sp)
   12d8e:	|      move.l 1ca88 <SysBase>,d0
   12d94:	|      movea.l d0,a6
   12d96:	|      movea.l 20(sp),a1
   12d9a:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12d9e:	|      move.l 24(sp),-(sp)
   12da2:	|      jsr e410 <failSecurityCheck>
   12da8:	|      addq.l #4,sp
   12daa:	|      tst.w d0
   12dac:	|  /-- beq.s 12db4 <builtIn_loadCustomData+0x60>
   12dae:	|  |   moveq #1,d0
   12db0:	+--|-- bra.w 12e74 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12db4:	|  \-> moveq #24,d0
   12db6:	|      add.l 40(sp),d0
   12dba:	|      move.l d0,-(sp)
   12dbc:	|      jsr 1525e <trimStack>
   12dc2:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12dc4:	|      moveq #28,d0
   12dc6:	|      add.l 40(sp),d0
   12dca:	|      move.l d0,-(sp)
   12dcc:	|      jsr 14b28 <unlinkVar>
   12dd2:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12dd4:	|      movea.l 40(sp),a0
   12dd8:	|      moveq #6,d0
   12dda:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12dde:	|      moveq #12,d0
   12de0:	|      move.l d0,16(sp)
   12de4:	|      clr.l 12(sp)
   12de8:	|      move.l 1ca88 <SysBase>,d0
   12dee:	|      movea.l d0,a6
   12df0:	|      move.l 16(sp),d0
   12df4:	|      move.l 12(sp),d1
   12df8:	|      jsr -684(a6)
   12dfc:	|      move.l d0,8(sp)
   12e00:	|      move.l 8(sp),d0
   12e04:	|      movea.l 40(sp),a0
   12e08:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12e0c:	|      movea.l 40(sp),a0
   12e10:	|      move.l 32(a0),d0
   12e14:	|  /-- bne.s 12e1a <builtIn_loadCustomData+0xc6>
   12e16:	|  |   moveq #1,d0
   12e18:	+--|-- bra.s 12e74 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12e1a:	|  \-> movea.l 40(sp),a0
   12e1e:	|      movea.l 32(a0),a0
   12e22:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12e24:	|      movea.l 40(sp),a0
   12e28:	|      movea.l 32(a0),a0
   12e2c:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12e30:	|      movea.l 40(sp),a0
   12e34:	|      movea.l 32(a0),a0
   12e38:	|      moveq #1,d0
   12e3a:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12e3e:	|      movea.l 40(sp),a0
   12e42:	|      move.l 32(a0),d0
   12e46:	|      move.l d0,-(sp)
   12e48:	|      move.l 28(sp),-(sp)
   12e4c:	|      jsr da9a <fileToStack>
   12e52:	|      addq.l #8,sp
   12e54:	|      tst.w d0
   12e56:	|  /-- bne.s 12e5c <builtIn_loadCustomData+0x108>
   12e58:	|  |   moveq #1,d0
   12e5a:	+--|-- bra.s 12e74 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12e5c:	|  \-> move.l 24(sp),4(sp)
   12e62:	|      move.l 1ca88 <SysBase>,d0
   12e68:	|      movea.l d0,a6
   12e6a:	|      movea.l 4(sp),a1
   12e6e:	|      jsr -690(a6)
	return BR_CONTINUE;
   12e72:	|      moveq #2,d0
}
   12e74:	\----> movea.l (sp)+,a6
   12e76:	       lea 28(sp),sp
   12e7a:	       rts

00012e7c <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12e7c:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e7e:	       movea.l 12(sp),a0
   12e82:	       move.l 24(a0),d0
   12e86:	       move.l d0,-(sp)
   12e88:	       pea 1 <_start+0x1>
   12e8c:	       move.l sp,d0
   12e8e:	       addq.l #8,d0
   12e90:	       move.l d0,-(sp)
   12e92:	       jsr 148da <getValueType>
   12e98:	       lea 12(sp),sp
   12e9c:	       tst.w d0
   12e9e:	   /-- bne.s 12ea4 <builtIn_setCustomEncoding+0x28>
   12ea0:	   |   moveq #1,d0
   12ea2:	/--|-- bra.s 12eda <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   12ea4:	|  \-> move.l (sp),d0
   12ea6:	|      move.l d0,d0
   12ea8:	|      move.w d0,1cb40 <saveEncoding>
	trimStack (&fun -> stack);
   12eae:	|      moveq #24,d0
   12eb0:	|      add.l 12(sp),d0
   12eb4:	|      move.l d0,-(sp)
   12eb6:	|      jsr 1525e <trimStack>
   12ebc:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12ebe:	|      moveq #28,d0
   12ec0:	|      add.l 12(sp),d0
   12ec4:	|      pea 1 <_start+0x1>
   12ec8:	|      pea 1 <_start+0x1>
   12ecc:	|      move.l d0,-(sp)
   12ece:	|      jsr 151cc <setVariable>
   12ed4:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12ed8:	|      moveq #2,d0
}
   12eda:	\----> addq.l #4,sp
   12edc:	       rts

00012ede <builtIn_freeSound>:

builtIn(freeSound)
{
   12ede:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12ee0:	       movea.l 12(sp),a0
   12ee4:	       move.l 24(a0),d0
   12ee8:	       move.l d0,-(sp)
   12eea:	       pea 5 <_start+0x5>
   12eee:	       move.l sp,d0
   12ef0:	       addq.l #8,d0
   12ef2:	       move.l d0,-(sp)
   12ef4:	       jsr 148da <getValueType>
   12efa:	       lea 12(sp),sp
   12efe:	       tst.w d0
   12f00:	   /-- bne.s 12f06 <builtIn_freeSound+0x28>
   12f02:	   |   moveq #1,d0
   12f04:	/--|-- bra.s 12f24 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   12f06:	|  \-> moveq #24,d0
   12f08:	|      add.l 12(sp),d0
   12f0c:	|      move.l d0,-(sp)
   12f0e:	|      jsr 1525e <trimStack>
   12f14:	|      addq.l #4,sp
	huntKillFreeSound (v);
   12f16:	|      move.l (sp),d0
   12f18:	|      move.l d0,-(sp)
   12f1a:	|      jsr d25c <huntKillFreeSound>
   12f20:	|      addq.l #4,sp
	return BR_CONTINUE;
   12f22:	|      moveq #2,d0
}
   12f24:	\----> addq.l #4,sp
   12f26:	       rts

00012f28 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   12f28:	       lea -12(sp),sp
   12f2c:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f2e:	       movea.l 24(sp),a0
   12f32:	       move.l 24(a0),d0
   12f36:	       move.l d0,-(sp)
   12f38:	       pea 1 <_start+0x1>
   12f3c:	       moveq #16,d0
   12f3e:	       add.l sp,d0
   12f40:	       move.l d0,-(sp)
   12f42:	       jsr 148da <getValueType>
   12f48:	       lea 12(sp),sp
   12f4c:	       tst.w d0
   12f4e:	   /-- bne.s 12f56 <builtIn_parallaxAdd+0x2e>
   12f50:	   |   moveq #1,d0
   12f52:	/--|-- bra.w 1302a <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12f56:	|  \-> moveq #24,d0
   12f58:	|      add.l 24(sp),d0
   12f5c:	|      move.l d0,-(sp)
   12f5e:	|      jsr 1525e <trimStack>
   12f64:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12f66:	|      movea.l 24(sp),a0
   12f6a:	|      move.l 24(a0),d0
   12f6e:	|      move.l d0,-(sp)
   12f70:	|      pea 1 <_start+0x1>
   12f74:	|      moveq #20,d0
   12f76:	|      add.l sp,d0
   12f78:	|      move.l d0,-(sp)
   12f7a:	|      jsr 148da <getValueType>
   12f80:	|      lea 12(sp),sp
   12f84:	|      tst.w d0
   12f86:	|  /-- bne.s 12f8e <builtIn_parallaxAdd+0x66>
   12f88:	|  |   moveq #1,d0
   12f8a:	+--|-- bra.w 1302a <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12f8e:	|  \-> moveq #24,d0
   12f90:	|      add.l 24(sp),d0
   12f94:	|      move.l d0,-(sp)
   12f96:	|      jsr 1525e <trimStack>
   12f9c:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12f9e:	|      movea.l 24(sp),a0
   12fa2:	|      move.l 24(a0),d0
   12fa6:	|      move.l d0,-(sp)
   12fa8:	|      pea 5 <_start+0x5>
   12fac:	|      lea 12(sp),a0
   12fb0:	|      move.l a0,-(sp)
   12fb2:	|      jsr 148da <getValueType>
   12fb8:	|      lea 12(sp),sp
   12fbc:	|      tst.w d0
   12fbe:	|  /-- bne.s 12fc4 <builtIn_parallaxAdd+0x9c>
   12fc0:	|  |   moveq #1,d0
   12fc2:	+--|-- bra.s 1302a <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12fc4:	|  \-> moveq #24,d0
   12fc6:	|      add.l 24(sp),d0
   12fca:	|      move.l d0,-(sp)
   12fcc:	|      jsr 1525e <trimStack>
   12fd2:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   12fd4:	|      move.l 8(sp),d0
   12fd8:	|      move.l d0,d0
   12fda:	|      moveq #0,d2
   12fdc:	|      move.w d0,d2
   12fde:	|      move.l 12(sp),d0
   12fe2:	|      move.l d0,d0
   12fe4:	|      moveq #0,d1
   12fe6:	|      move.w d0,d1
   12fe8:	|      move.l 4(sp),d0
   12fec:	|      move.l d0,d0
   12fee:	|      move.w d0,d0
   12ff0:	|      andi.l #65535,d0
   12ff6:	|      move.l d2,-(sp)
   12ff8:	|      move.l d1,-(sp)
   12ffa:	|      move.l d0,-(sp)
   12ffc:	|      jsr d478 <loadParallax>
   13002:	|      lea 12(sp),sp
   13006:	|      tst.w d0
   13008:	|  /-- bne.s 1300e <builtIn_parallaxAdd+0xe6>
   1300a:	|  |   moveq #1,d0
   1300c:	+--|-- bra.s 1302a <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   1300e:	|  \-> moveq #28,d0
   13010:	|      add.l 24(sp),d0
   13014:	|      pea 1 <_start+0x1>
   13018:	|      pea 1 <_start+0x1>
   1301c:	|      move.l d0,-(sp)
   1301e:	|      jsr 151cc <setVariable>
   13024:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   13028:	|      moveq #2,d0
}
   1302a:	\----> move.l (sp)+,d2
   1302c:	       lea 12(sp),sp
   13030:	       rts

00013032 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   13032:	jsr d3b0 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   13038:	moveq #28,d0
   1303a:	add.l 8(sp),d0
   1303e:	pea 1 <_start+0x1>
   13042:	pea 1 <_start+0x1>
   13046:	move.l d0,-(sp)
   13048:	jsr 151cc <setVariable>
   1304e:	lea 12(sp),sp
	return BR_CONTINUE;
   13052:	moveq #2,d0
}
   13054:	rts

00013056 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   13056:	pea 19d26 <graphics.c.1c13408a+0x13e>
   1305c:	jsr 1733a <KPrintF>
   13062:	addq.l #4,sp

	return BR_CONTINUE;
   13064:	moveq #2,d0
}
   13066:	rts

00013068 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   13068:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   1306a:	             movea.l 16(sp),a0
   1306e:	             movea.l 24(a0),a0
   13072:	             move.l (a0),d0
   13074:	             moveq #1,d1
   13076:	             cmp.l d0,d1
   13078:	      /----- beq.s 130c0 <builtIn_makeFastArray+0x58>
   1307a:	      |      moveq #6,d1
   1307c:	      |      cmp.l d0,d1
   1307e:	/-----|----- bne.s 130fe <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   13080:	|     |      movea.l 16(sp),a0
   13084:	|     |      movea.l 24(a0),a0
   13088:	|     |      move.l 4(a0),d1
   1308c:	|     |      moveq #28,d0
   1308e:	|     |      add.l 16(sp),d0
   13092:	|     |      move.l d1,-(sp)
   13094:	|     |      move.l d0,-(sp)
   13096:	|     |      jsr 1498c <makeFastArrayFromStack>
   1309c:	|     |      addq.l #8,sp
   1309e:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   130a2:	|     |      moveq #24,d0
   130a4:	|     |      add.l 16(sp),d0
   130a8:	|     |      move.l d0,-(sp)
   130aa:	|     |      jsr 1525e <trimStack>
   130b0:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   130b2:	|     |      tst.w 6(sp)
   130b6:	|     |  /-- beq.s 130bc <builtIn_makeFastArray+0x54>
   130b8:	|     |  |   moveq #2,d0
   130ba:	|  /--|--|-- bra.s 13110 <builtIn_makeFastArray+0xa8>
   130bc:	|  |  |  \-> moveq #1,d0
   130be:	|  +--|----- bra.s 13110 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   130c0:	|  |  \----> movea.l 16(sp),a0
   130c4:	|  |         movea.l 24(a0),a0
   130c8:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   130ce:	|  |         moveq #24,d0
   130d0:	|  |         add.l 16(sp),d0
   130d4:	|  |         move.l d0,-(sp)
   130d6:	|  |         jsr 1525e <trimStack>
   130dc:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   130de:	|  |         moveq #28,d0
   130e0:	|  |         add.l 16(sp),d0
   130e4:	|  |         move.l 2(sp),-(sp)
   130e8:	|  |         move.l d0,-(sp)
   130ea:	|  |         jsr 149f6 <makeFastArraySize>
   130f0:	|  |         addq.l #8,sp
   130f2:	|  |         tst.w d0
   130f4:	|  |     /-- beq.s 130fa <builtIn_makeFastArray+0x92>
   130f6:	|  |     |   moveq #2,d0
   130f8:	|  +-----|-- bra.s 13110 <builtIn_makeFastArray+0xa8>
   130fa:	|  |     \-> moveq #1,d0
   130fc:	|  +-------- bra.s 13110 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   130fe:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   13100:	   |         pea 19d4f <graphics.c.1c13408a+0x167>
   13106:	   |         jsr 1733a <KPrintF>
   1310c:	   |         addq.l #4,sp
	return BR_ERROR;
   1310e:	   |         moveq #1,d0
}
   13110:	   \-------> addq.l #8,sp
   13112:	             rts

00013114 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   13114:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13116:	          movea.l 16(sp),a0
   1311a:	          move.l 24(a0),d0
   1311e:	          move.l d0,-(sp)
   13120:	          pea 7 <_start+0x7>
   13124:	          move.l sp,d0
   13126:	          addq.l #8,d0
   13128:	          move.l d0,-(sp)
   1312a:	          jsr 148da <getValueType>
   13130:	          lea 12(sp),sp
   13134:	          tst.w d0
   13136:	      /-- bne.s 1313c <builtIn_getCharacterScale+0x28>
   13138:	      |   moveq #1,d0
   1313a:	/-----|-- bra.s 131b6 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   1313c:	|     \-> moveq #24,d0
   1313e:	|         add.l 16(sp),d0
   13142:	|         move.l d0,-(sp)
   13144:	|         jsr 1525e <trimStack>
   1314a:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   1314c:	|         move.l (sp),d0
   1314e:	|         move.l d0,-(sp)
   13150:	|         jsr a72e <findPerson>
   13156:	|         addq.l #4,sp
   13158:	|         move.l d0,4(sp)
	if (pers) {
   1315c:	|  /----- beq.s 1319c <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   1315e:	|  |      movea.l 4(sp),a0
   13162:	|  |      move.l 32(a0),d0
   13166:	|  |      move.l #1120403456,-(sp)
   1316c:	|  |      move.l d0,-(sp)
   1316e:	|  |      jsr 1781e <__mulsf3>
   13174:	|  |      addq.l #8,sp
   13176:	|  |      move.l d0,-(sp)
   13178:	|  |      jsr 17704 <__fixsfsi>
   1317e:	|  |      addq.l #4,sp
   13180:	|  |      move.l d0,d1
   13182:	|  |      moveq #28,d0
   13184:	|  |      add.l 16(sp),d0
   13188:	|  |      move.l d1,-(sp)
   1318a:	|  |      pea 1 <_start+0x1>
   1318e:	|  |      move.l d0,-(sp)
   13190:	|  |      jsr 151cc <setVariable>
   13196:	|  |      lea 12(sp),sp
   1319a:	|  |  /-- bra.s 131b4 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1319c:	|  \--|-> moveq #28,d0
   1319e:	|     |   add.l 16(sp),d0
   131a2:	|     |   clr.l -(sp)
   131a4:	|     |   pea 1 <_start+0x1>
   131a8:	|     |   move.l d0,-(sp)
   131aa:	|     |   jsr 151cc <setVariable>
   131b0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   131b4:	|     \-> moveq #2,d0
}
   131b6:	\-------> addq.l #8,sp
   131b8:	          rts

000131ba <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   131ba:	move.l 1cb64 <gameSettings>,d0
   131c0:	move.l d0,d1
   131c2:	moveq #28,d0
   131c4:	add.l 8(sp),d0
   131c8:	move.l d1,-(sp)
   131ca:	pea 1 <_start+0x1>
   131ce:	move.l d0,-(sp)
   131d0:	jsr 151cc <setVariable>
   131d6:	lea 12(sp),sp
	return BR_CONTINUE;
   131da:	moveq #2,d0
}
   131dc:	rts

000131de <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   131de:	moveq #24,d0
   131e0:	add.l 8(sp),d0
   131e4:	move.l d0,-(sp)
   131e6:	jsr 1525e <trimStack>
   131ec:	addq.l #4,sp
	trimStack (&fun -> stack);
   131ee:	moveq #24,d0
   131f0:	add.l 8(sp),d0
   131f4:	move.l d0,-(sp)
   131f6:	jsr 1525e <trimStack>
   131fc:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   131fe:	moveq #28,d0
   13200:	add.l 8(sp),d0
   13204:	clr.l -(sp)
   13206:	pea 1 <_start+0x1>
   1320a:	move.l d0,-(sp)
   1320c:	jsr 151cc <setVariable>
   13212:	lea 12(sp),sp

	return BR_CONTINUE;
   13216:	moveq #2,d0

}
   13218:	rts

0001321a <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   1321a:	move.l 1c408 <lastFramesPerSecond>,d1
   13220:	moveq #28,d0
   13222:	add.l 8(sp),d0
   13226:	move.l d1,-(sp)
   13228:	pea 1 <_start+0x1>
   1322c:	move.l d0,-(sp)
   1322e:	jsr 151cc <setVariable>
   13234:	lea 12(sp),sp
	return BR_CONTINUE;
   13238:	moveq #2,d0
}
   1323a:	rts

0001323c <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   1323c:	moveq #2,d0
}
   1323e:	rts

00013240 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   13240:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13244:	          movea.l 60(sp),a0
   13248:	          move.l 24(a0),d0
   1324c:	          move.l d0,-(sp)
   1324e:	          pea 1 <_start+0x1>
   13252:	          pea 1c99e <thumbHeight>
   13258:	          jsr 148da <getValueType>
   1325e:	          lea 12(sp),sp
   13262:	          tst.w d0
   13264:	      /-- bne.s 1326c <builtIn_setThumbnailSize+0x2c>
   13266:	      |   moveq #1,d0
   13268:	/-----|-- bra.w 13328 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   1326c:	|     \-> moveq #24,d0
   1326e:	|         add.l 60(sp),d0
   13272:	|         move.l d0,-(sp)
   13274:	|         jsr 1525e <trimStack>
   1327a:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1327c:	|         movea.l 60(sp),a0
   13280:	|         move.l 24(a0),d0
   13284:	|         move.l d0,-(sp)
   13286:	|         pea 1 <_start+0x1>
   1328a:	|         pea 1c99a <thumbWidth>
   13290:	|         jsr 148da <getValueType>
   13296:	|         lea 12(sp),sp
   1329a:	|         tst.w d0
   1329c:	|     /-- bne.s 132a4 <builtIn_setThumbnailSize+0x64>
   1329e:	|     |   moveq #1,d0
   132a0:	+-----|-- bra.w 13328 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   132a4:	|     \-> moveq #24,d0
   132a6:	|         add.l 60(sp),d0
   132aa:	|         move.l d0,-(sp)
   132ac:	|         jsr 1525e <trimStack>
   132b2:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   132b4:	|         move.l 1c99a <thumbWidth>,d0
   132ba:	|     /-- bmi.s 132e8 <builtIn_setThumbnailSize+0xa8>
   132bc:	|     |   move.l 1c99e <thumbHeight>,d0
   132c2:	|     +-- bmi.s 132e8 <builtIn_setThumbnailSize+0xa8>
   132c4:	|     |   move.l 1c99a <thumbWidth>,d0
   132ca:	|     |   move.l d0,d1
   132cc:	|     |   move.l 1c9dc <winWidth>,d0
   132d2:	|     |   cmp.l d1,d0
   132d4:	|     +-- bcs.s 132e8 <builtIn_setThumbnailSize+0xa8>
   132d6:	|     |   move.l 1c99e <thumbHeight>,d0
   132dc:	|     |   move.l d0,d1
   132de:	|     |   move.l 1c9e0 <winHeight>,d0
   132e4:	|     |   cmp.l d1,d0
   132e6:	|  /--|-- bcc.s 13326 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   132e8:	|  |  \-> move.l 1c99e <thumbHeight>,d1
   132ee:	|  |      move.l 1c99a <thumbWidth>,d0
   132f4:	|  |      move.l d1,-(sp)
   132f6:	|  |      move.l d0,-(sp)
   132f8:	|  |      pea 19d76 <graphics.c.1c13408a+0x18e>
   132fe:	|  |      lea 14(sp),a0
   13302:	|  |      move.l a0,-(sp)
   13304:	|  |      jsr 140e4 <sprintf>
   1330a:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   1330e:	|  |      lea 2(sp),a0
   13312:	|  |      move.l a0,-(sp)
   13314:	|  |      pea 19d7e <graphics.c.1c13408a+0x196>
   1331a:	|  |      jsr 1733a <KPrintF>
   13320:	|  |      addq.l #8,sp
		return BR_ERROR;
   13322:	|  |      moveq #1,d0
   13324:	+--|----- bra.s 13328 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   13326:	|  \----> moveq #2,d0
}
   13328:	\-------> lea 52(sp),sp
   1332c:	          rts

0001332e <builtIn_hasFlag>:

builtIn(hasFlag)
{
   1332e:	       lea -12(sp),sp
   13332:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13334:	       movea.l 24(sp),a0
   13338:	       move.l 24(a0),d0
   1333c:	       move.l d0,-(sp)
   1333e:	       pea 1 <_start+0x1>
   13342:	       lea 12(sp),a0
   13346:	       move.l a0,-(sp)
   13348:	       jsr 148da <getValueType>
   1334e:	       lea 12(sp),sp
   13352:	       tst.w d0
   13354:	   /-- bne.s 1335c <builtIn_hasFlag+0x2e>
   13356:	   |   moveq #1,d0
   13358:	/--|-- bra.w 133ec <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   1335c:	|  \-> moveq #24,d0
   1335e:	|      add.l 24(sp),d0
   13362:	|      move.l d0,-(sp)
   13364:	|      jsr 1525e <trimStack>
   1336a:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1336c:	|      movea.l 24(sp),a0
   13370:	|      move.l 24(a0),d0
   13374:	|      move.l d0,-(sp)
   13376:	|      pea 7 <_start+0x7>
   1337a:	|      moveq #16,d0
   1337c:	|      add.l sp,d0
   1337e:	|      move.l d0,-(sp)
   13380:	|      jsr 148da <getValueType>
   13386:	|      lea 12(sp),sp
   1338a:	|      tst.w d0
   1338c:	|  /-- bne.s 13392 <builtIn_hasFlag+0x64>
   1338e:	|  |   moveq #1,d0
   13390:	+--|-- bra.s 133ec <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13392:	|  \-> moveq #24,d0
   13394:	|      add.l 24(sp),d0
   13398:	|      move.l d0,-(sp)
   1339a:	|      jsr 1525e <trimStack>
   133a0:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   133a2:	|      move.l 8(sp),d0
   133a6:	|      move.l d0,-(sp)
   133a8:	|      jsr d624 <findObjectType>
   133ae:	|      addq.l #4,sp
   133b0:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   133b4:	|  /-- bne.s 133ba <builtIn_hasFlag+0x8c>
   133b6:	|  |   moveq #1,d0
   133b8:	+--|-- bra.s 133ec <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   133ba:	|  \-> movea.l 12(sp),a0
   133be:	|      move.w 36(a0),d0
   133c2:	|      moveq #0,d2
   133c4:	|      move.w d0,d2
   133c6:	|      move.l 4(sp),d1
   133ca:	|      moveq #1,d0
   133cc:	|      lsl.l d1,d0
   133ce:	|      move.l d2,d1
   133d0:	|      and.l d0,d1
   133d2:	|      moveq #28,d0
   133d4:	|      add.l 24(sp),d0
   133d8:	|      move.l d1,-(sp)
   133da:	|      pea 1 <_start+0x1>
   133de:	|      move.l d0,-(sp)
   133e0:	|      jsr 151cc <setVariable>
   133e6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   133ea:	|      moveq #2,d0
}
   133ec:	\----> move.l (sp)+,d2
   133ee:	       lea 12(sp),sp
   133f2:	       rts

000133f4 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   133f4:	       jsr d612 <snapshot>
   133fa:	       tst.w d0
   133fc:	/----- beq.s 13402 <builtIn_snapshotGrab+0xe>
   133fe:	|      moveq #2,d0
   13400:	|  /-- bra.s 13404 <builtIn_snapshotGrab+0x10>
   13402:	\--|-> moveq #1,d0
}
   13404:	   \-> rts

00013406 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   13406:	jsr d4be <nosnapshot>
	return BR_CONTINUE;
   1340c:	moveq #2,d0
}
   1340e:	rts

00013410 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   13410:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13412:	move.w 1c2e4 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1341a:	movea.l 12(sp),a0
   1341e:	move.l 24(a0),d0
   13422:	move.l d0,-(sp)
   13424:	jsr 14e1a <getBoolean>
   1342a:	addq.l #4,sp
   1342c:	move.w d0,1c2e4 <allowAnyFilename>
	trimStack (&fun -> stack);
   13432:	moveq #24,d0
   13434:	add.l 12(sp),d0
   13438:	move.l d0,-(sp)
   1343a:	jsr 1525e <trimStack>
   13440:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   13442:	movea.w 2(sp),a0
   13446:	moveq #28,d0
   13448:	add.l 12(sp),d0
   1344c:	move.l a0,-(sp)
   1344e:	pea 1 <_start+0x1>
   13452:	move.l d0,-(sp)
   13454:	jsr 151cc <setVariable>
   1345a:	lea 12(sp),sp
	return BR_CONTINUE;
   1345e:	moveq #2,d0
}
   13460:	addq.l #4,sp
   13462:	rts

00013464 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13464:	moveq #24,d0
   13466:	add.l 8(sp),d0
   1346a:	move.l d0,-(sp)
   1346c:	jsr 1525e <trimStack>
   13472:	addq.l #4,sp
	trimStack (&fun -> stack);
   13474:	moveq #24,d0
   13476:	add.l 8(sp),d0
   1347a:	move.l d0,-(sp)
   1347c:	jsr 1525e <trimStack>
   13482:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   13484:	moveq #28,d0
   13486:	add.l 8(sp),d0
   1348a:	clr.l -(sp)
   1348c:	pea 1 <_start+0x1>
   13490:	move.l d0,-(sp)
   13492:	jsr 151cc <setVariable>
   13498:	lea 12(sp),sp

	return BR_CONTINUE;
   1349c:	moveq #2,d0
}
   1349e:	rts

000134a0 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   134a0:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   134a2:	movea.l 12(sp),a0
   134a6:	move.l 24(a0),d0
   134aa:	move.l d0,-(sp)
   134ac:	jsr 14eb0 <getTextFromAnyVar>
   134b2:	addq.l #4,sp
   134b4:	move.l d0,(sp)
	trimStack (&fun -> stack);
   134b6:	moveq #24,d0
   134b8:	add.l 12(sp),d0
   134bc:	move.l d0,-(sp)
   134be:	jsr 1525e <trimStack>
   134c4:	addq.l #4,sp
	KPrintF (mess);
   134c6:	move.l (sp),-(sp)
   134c8:	jsr 1733a <KPrintF>
   134ce:	addq.l #4,sp
	return BR_ERROR;
   134d0:	moveq #1,d0
}
   134d2:	addq.l #4,sp
   134d4:	rts

000134d6 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   134d6:	moveq #24,d0
   134d8:	add.l 8(sp),d0
   134dc:	move.l d0,-(sp)
   134de:	jsr 1525e <trimStack>
   134e4:	addq.l #4,sp
	trimStack (&fun -> stack);
   134e6:	moveq #24,d0
   134e8:	add.l 8(sp),d0
   134ec:	move.l d0,-(sp)
   134ee:	jsr 1525e <trimStack>
   134f4:	addq.l #4,sp
	trimStack (&fun -> stack);
   134f6:	moveq #24,d0
   134f8:	add.l 8(sp),d0
   134fc:	move.l d0,-(sp)
   134fe:	jsr 1525e <trimStack>
   13504:	addq.l #4,sp
	trimStack (&fun -> stack);
   13506:	moveq #24,d0
   13508:	add.l 8(sp),d0
   1350c:	move.l d0,-(sp)
   1350e:	jsr 1525e <trimStack>
   13514:	addq.l #4,sp

	return BR_CONTINUE;
   13516:	moveq #2,d0
}
   13518:	rts

0001351a <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1351a:	moveq #24,d0
   1351c:	add.l 8(sp),d0
   13520:	move.l d0,-(sp)
   13522:	jsr 1525e <trimStack>
   13528:	addq.l #4,sp
	trimStack (&fun -> stack);
   1352a:	moveq #24,d0
   1352c:	add.l 8(sp),d0
   13530:	move.l d0,-(sp)
   13532:	jsr 1525e <trimStack>
   13538:	addq.l #4,sp
	trimStack (&fun -> stack);
   1353a:	moveq #24,d0
   1353c:	add.l 8(sp),d0
   13540:	move.l d0,-(sp)
   13542:	jsr 1525e <trimStack>
   13548:	addq.l #4,sp

	return BR_CONTINUE;
   1354a:	moveq #2,d0

}
   1354c:	rts

0001354e <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   1354e:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   13550:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13556:	sne d0
   13558:	neg.b d0
   1355a:	moveq #0,d1
   1355c:	move.b d0,d1
   1355e:	moveq #28,d0
   13560:	add.l 12(sp),d0
   13564:	move.l d1,-(sp)
   13566:	pea 1 <_start+0x1>
   1356a:	move.l d0,-(sp)
   1356c:	jsr 151cc <setVariable>
   13572:	lea 12(sp),sp
	return BR_CONTINUE;
   13576:	moveq #2,d0
}
   13578:	addq.l #4,sp
   1357a:	rts

0001357c <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   1357c:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   1357e:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   13584:	pea 19d95 <graphics.c.1c13408a+0x1ad>
   1358a:	jsr 1733a <KPrintF>
   13590:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13592:	tst.w 2(sp)
   13596:	sne d0
   13598:	neg.b d0
   1359a:	moveq #0,d1
   1359c:	move.b d0,d1
   1359e:	moveq #28,d0
   135a0:	add.l 12(sp),d0
   135a4:	move.l d1,-(sp)
   135a6:	pea 1 <_start+0x1>
   135aa:	move.l d0,-(sp)
   135ac:	jsr 151cc <setVariable>
   135b2:	lea 12(sp),sp
	return BR_CONTINUE;
   135b6:	moveq #2,d0
}
   135b8:	addq.l #4,sp
   135ba:	rts

000135bc <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   135bc:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   135c0:	             move.l 104(sp),d0
   135c4:	             cmpi.l #166,d0
   135ca:	/----------- bhi.w 136ac <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   135ce:	|            move.l 104(sp),d0
   135d2:	|            add.l d0,d0
   135d4:	|            movea.l d0,a1
   135d6:	|            adda.l d0,a1
   135d8:	|            lea 1c42a <paramNum>,a0
   135de:	|            move.l (0,a1,a0.l),d0
   135e2:	|            moveq #-1,d1
   135e4:	|            cmp.l d0,d1
   135e6:	|  /-------- beq.w 13674 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   135ea:	|  |         move.l 104(sp),d0
   135ee:	|  |         add.l d0,d0
   135f0:	|  |         movea.l d0,a1
   135f2:	|  |         adda.l d0,a1
   135f4:	|  |         lea 1c42a <paramNum>,a0
   135fa:	|  |         move.l (0,a1,a0.l),d0
   135fe:	|  |         cmp.l 108(sp),d0
   13602:	|  +-------- beq.s 13674 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   13604:	|  |         move.l 104(sp),d0
   13608:	|  |         add.l d0,d0
   1360a:	|  |         movea.l d0,a1
   1360c:	|  |         adda.l d0,a1
   1360e:	|  |         lea 1c42a <paramNum>,a0
   13614:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   13618:	|  |         moveq #1,d1
   1361a:	|  |         cmp.l d0,d1
   1361c:	|  |  /----- bne.s 13626 <callBuiltIn+0x6a>
   1361e:	|  |  |      move.l #101041,d0
   13624:	|  |  |  /-- bra.s 1362c <callBuiltIn+0x70>
   13626:	|  |  \--|-> move.l #105931,d0
   1362c:	|  |     \-> move.l 104(sp),d1
   13630:	|  |         add.l d1,d1
   13632:	|  |         movea.l d1,a1
   13634:	|  |         adda.l d1,a1
   13636:	|  |         lea 1c42a <paramNum>,a0
   1363c:	|  |         move.l (0,a1,a0.l),d1
   13640:	|  |         move.l d0,-(sp)
   13642:	|  |         move.l d1,-(sp)
   13644:	|  |         pea 19dcd <graphics.c.1c13408a+0x1e5>
   1364a:	|  |         lea 12(sp),a0
   1364e:	|  |         move.l a0,-(sp)
   13650:	|  |         jsr 140e4 <sprintf>
   13656:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   1365a:	|  |         movea.l sp,a0
   1365c:	|  |         move.l a0,-(sp)
   1365e:	|  |         jsr b8 <copyString>
   13664:	|  |         addq.l #4,sp
   13666:	|  |         move.l d0,-(sp)
   13668:	|  |         jsr 1733a <KPrintF>
   1366e:	|  |         addq.l #4,sp
				return BR_ERROR;
   13670:	|  |         moveq #1,d0
   13672:	|  |     /-- bra.s 136bc <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   13674:	|  \-----|-> move.l 104(sp),d0
   13678:	|        |   add.l d0,d0
   1367a:	|        |   movea.l d0,a1
   1367c:	|        |   adda.l d0,a1
   1367e:	|        |   lea 1c6c6 <builtInFunctionArray>,a0
   13684:	|        |   move.l (0,a1,a0.l),d0
   13688:	+--------|-- beq.s 136ac <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   1368a:	|        |   move.l 104(sp),d0
   1368e:	|        |   add.l d0,d0
   13690:	|        |   movea.l d0,a1
   13692:	|        |   adda.l d0,a1
   13694:	|        |   lea 1c6c6 <builtInFunctionArray>,a0
   1369a:	|        |   movea.l (0,a1,a0.l),a0
   1369e:	|        |   move.l 112(sp),-(sp)
   136a2:	|        |   move.l 112(sp),-(sp)
   136a6:	|        |   jsr (a0)
   136a8:	|        |   addq.l #8,sp
   136aa:	|        +-- bra.s 136bc <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   136ac:	\--------|-> pea 19df8 <graphics.c.1c13408a+0x210>
   136b2:	         |   jsr 1733a <KPrintF>
   136b8:	         |   addq.l #4,sp
	return BR_ERROR;
   136ba:	         |   moveq #1,d0
}
   136bc:	         \-> lea 100(sp),sp
   136c0:	             rts

000136c2 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   136c2:	          subq.l #8,sp
	int indexNum = -1;
   136c4:	          moveq #-1,d0
   136c6:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   136ca:	          clr.l (sp)
   136cc:	   /----- bra.s 136f2 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   136ce:	/--|----> move.l 1cb5c <languageTable>,d1
   136d4:	|  |      move.l (sp),d0
   136d6:	|  |      add.l d0,d0
   136d8:	|  |      add.l d0,d0
   136da:	|  |      movea.l d1,a0
   136dc:	|  |      adda.l d0,a0
   136de:	|  |      move.l (a0),d0
   136e0:	|  |      move.l d0,d1
   136e2:	|  |      move.l 1cb64 <gameSettings>,d0
   136e8:	|  |      cmp.l d1,d0
   136ea:	|  |  /-- bne.s 136f0 <getLanguageForFileB+0x2e>
   136ec:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   136f0:	|  |  \-> addq.l #1,(sp)
   136f2:	|  \----> move.l 1cb68 <gameSettings+0x4>,d0
   136f8:	|         cmp.l (sp),d0
   136fa:	\-------- bcc.s 136ce <getLanguageForFileB+0xc>
	}

	return indexNum;
   136fc:	          move.l 4(sp),d0
}
   13700:	          addq.l #8,sp
   13702:	          rts

00013704 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13704:	          lea -20(sp),sp
   13708:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   1370a:	          move.l 28(sp),-(sp)
   1370e:	          jsr 13dc6 <strlen>
   13714:	          addq.l #4,sp
   13716:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   1371a:	          moveq #4,d0
   1371c:	          cmp.l 12(sp),d0
   13720:	      /-- bge.s 13744 <getPrefsFilename+0x40>
   13722:	      |   move.l 12(sp),d0
   13726:	      |   subq.l #4,d0
   13728:	      |   movea.l 28(sp),a0
   1372c:	      |   adda.l d0,a0
   1372e:	      |   move.b (a0),d0
   13730:	      |   cmpi.b #46,d0
   13734:	      +-- bne.s 13744 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   13736:	      |   move.l 12(sp),d0
   1373a:	      |   subq.l #4,d0
   1373c:	      |   movea.l 28(sp),a0
   13740:	      |   adda.l d0,a0
   13742:	      |   clr.b (a0)
	}

	char * f = filename;
   13744:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   1374a:	          clr.l 20(sp)
   1374e:	   /----- bra.s 13776 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13750:	/--|----> move.l 20(sp),d0
   13754:	|  |      movea.l 28(sp),a0
   13758:	|  |      adda.l d0,a0
   1375a:	|  |      move.b (a0),d0
   1375c:	|  |      cmpi.b #47,d0
   13760:	|  |  /-- bne.s 13772 <getPrefsFilename+0x6e>
   13762:	|  |  |   move.l 20(sp),d0
   13766:	|  |  |   addq.l #1,d0
   13768:	|  |  |   move.l 28(sp),d1
   1376c:	|  |  |   add.l d0,d1
   1376e:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13772:	|  |  \-> addq.l #1,20(sp)
   13776:	|  \----> move.l 20(sp),d0
   1377a:	|         cmp.l 12(sp),d0
   1377e:	\-------- blt.s 13750 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13780:	          pea 19e23 <graphics.c.1c13408a+0x23b>
   13786:	          move.l 20(sp),-(sp)
   1378a:	          jsr 13e06 <joinStrings>
   13790:	          addq.l #8,sp
   13792:	          move.l d0,8(sp)

	FreeVec(filename);
   13796:	          move.l 28(sp),4(sp)
   1379c:	          move.l 1ca88 <SysBase>,d0
   137a2:	          movea.l d0,a6
   137a4:	          movea.l 4(sp),a1
   137a8:	          jsr -690(a6)
	filename = NULL;
   137ac:	          clr.l 28(sp)
	return joined;
   137b0:	          move.l 8(sp),d0
}
   137b4:	          movea.l (sp)+,a6
   137b6:	          lea 20(sp),sp
   137ba:	          rts

000137bc <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   137bc:	             lea -28(sp),sp
   137c0:	             move.l a6,-(sp)
   137c2:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   137c4:	             move.l 1cb68 <gameSettings+0x4>,d0
   137ca:	             move.l d0,d1
   137cc:	             addq.l #1,d1
   137ce:	             move.l d1,28(sp)
   137d2:	             clr.l 24(sp)
   137d6:	             move.l 1ca88 <SysBase>,d0
   137dc:	             movea.l d0,a6
   137de:	             move.l 28(sp),d0
   137e2:	             move.l 24(sp),d1
   137e6:	             jsr -684(a6)
   137ea:	             move.l d0,20(sp)
   137ee:	             move.l 20(sp),d0
   137f2:	             move.l d0,1cb5c <languageTable>
    if( languageTable == 0) {
   137f8:	             move.l 1cb5c <languageTable>,d0
   137fe:	         /-- bne.s 1380e <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13800:	         |   pea 19e28 <graphics.c.1c13408a+0x240>
   13806:	         |   jsr 1733a <KPrintF>
   1380c:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1380e:	         \-> move.l 1cb68 <gameSettings+0x4>,d0
   13814:	             move.l d0,d1
   13816:	             addq.l #1,d1
   13818:	             move.l d1,16(sp)
   1381c:	             clr.l 12(sp)
   13820:	             move.l 1ca88 <SysBase>,d0
   13826:	             movea.l d0,a6
   13828:	             move.l 16(sp),d0
   1382c:	             move.l 12(sp),d1
   13830:	             jsr -684(a6)
   13834:	             move.l d0,8(sp)
   13838:	             move.l 8(sp),d0
   1383c:	             move.l d0,1cb60 <languageName>
	if( languageName == 0) {
   13842:	             move.l 1cb60 <languageName>,d0
   13848:	         /-- bne.s 13858 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   1384a:	         |   pea 19e5e <graphics.c.1c13408a+0x276>
   13850:	         |   jsr 1733a <KPrintF>
   13856:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13858:	         \-> clr.l 32(sp)
   1385c:	   /-------- bra.s 138d4 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   1385e:	/--|-------> tst.l 32(sp)
   13862:	|  |  /----- beq.s 13872 <makeLanguageTable+0xb6>
   13864:	|  |  |      move.l 40(sp),-(sp)
   13868:	|  |  |      jsr 6bc <get2bytes>
   1386e:	|  |  |      addq.l #4,sp
   13870:	|  |  |  /-- bra.s 13874 <makeLanguageTable+0xb8>
   13872:	|  |  \--|-> moveq #0,d0
   13874:	|  |     \-> movea.l 1cb5c <languageTable>,a0
   1387a:	|  |         move.l 32(sp),d1
   1387e:	|  |         add.l d1,d1
   13880:	|  |         add.l d1,d1
   13882:	|  |         adda.l d1,a0
   13884:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   13886:	|  |         move.l 1cb60 <languageName>,d1
   1388c:	|  |         move.l 32(sp),d0
   13890:	|  |         add.l d0,d0
   13892:	|  |         add.l d0,d0
   13894:	|  |         movea.l d1,a0
   13896:	|  |         adda.l d0,a0
   13898:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   1389a:	|  |         move.l 1ca32 <gameVersion>,d0
   138a0:	|  |         cmpi.l #511,d0
   138a6:	|  |     /-- ble.s 138d0 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   138a8:	|  |     |   move.l 1cb68 <gameSettings+0x4>,d0
   138ae:	|  |     +-- beq.s 138d0 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   138b0:	|  |     |   move.l 1cb60 <languageName>,d1
   138b6:	|  |     |   move.l 32(sp),d0
   138ba:	|  |     |   add.l d0,d0
   138bc:	|  |     |   add.l d0,d0
   138be:	|  |     |   movea.l d1,a2
   138c0:	|  |     |   adda.l d0,a2
   138c2:	|  |     |   move.l 40(sp),-(sp)
   138c6:	|  |     |   jsr b02 <readString>
   138cc:	|  |     |   addq.l #4,sp
   138ce:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   138d0:	|  |     \-> addq.l #1,32(sp)
   138d4:	|  \-------> move.l 1cb68 <gameSettings+0x4>,d0
   138da:	|            cmp.l 32(sp),d0
   138de:	\----------- bcc.w 1385e <makeLanguageTable+0xa2>
		}
	}
}
   138e2:	             nop
   138e4:	             nop
   138e6:	             movea.l (sp)+,a2
   138e8:	             movea.l (sp)+,a6
   138ea:	             lea 28(sp),sp
   138ee:	             rts

000138f0 <readIniFile>:

void readIniFile (char * filename) {
   138f0:	                      lea -564(sp),sp
   138f4:	                      move.l a6,-(sp)
   138f6:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   138f8:	                      move.l 576(sp),-(sp)
   138fc:	                      jsr b8 <copyString>
   13902:	                      addq.l #4,sp
   13904:	                      move.l d0,-(sp)
   13906:	                      jsr 13704 <getPrefsFilename>
   1390c:	                      addq.l #4,sp
   1390e:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13912:	                      move.l 562(sp),558(sp)
   13918:	                      move.l #1005,554(sp)
   13920:	                      move.l 1ca90 <DOSBase>,d0
   13926:	                      movea.l d0,a6
   13928:	                      move.l 558(sp),d1
   1392c:	                      move.l 554(sp),d2
   13930:	                      jsr -30(a6)
   13934:	                      move.l d0,550(sp)
   13938:	                      move.l 550(sp),d0
   1393c:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13940:	                      clr.l 1cb64 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13946:	                      move.w #1,1cb6c <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   1394e:	                      clr.l 1cb6e <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13954:	                      moveq #1,d0
   13956:	                      move.l d0,1cb72 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   1395c:	                      clr.w 1cb76 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13962:	                      clr.w 1cb78 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13968:	                      clr.w 1cb7a <gameSettings+0x16>

	FreeVec(langName);
   1396e:	                      move.l 562(sp),542(sp)
   13974:	                      move.l 1ca88 <SysBase>,d0
   1397a:	                      movea.l d0,a6
   1397c:	                      movea.l 542(sp),a1
   13980:	                      jsr -690(a6)
	langName = NULL;
   13984:	                      clr.l 562(sp)

	if (fp) {
   13988:	                      tst.l 546(sp)
   1398c:	/-------------------- beq.w 13c6a <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13990:	|                     move.l sp,d0
   13992:	|                     addi.l #265,d0
   13998:	|                     move.l #257,d1
   1399e:	|                     move.l d1,-(sp)
   139a0:	|                     clr.l -(sp)
   139a2:	|                     move.l d0,-(sp)
   139a4:	|                     jsr 172be <memset>
   139aa:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   139ae:	|                     move.l sp,d0
   139b0:	|                     addq.l #8,d0
   139b2:	|                     move.l #257,d1
   139b8:	|                     move.l d1,-(sp)
   139ba:	|                     clr.l -(sp)
   139bc:	|                     move.l d0,-(sp)
   139be:	|                     jsr 172be <memset>
   139c4:	|                     lea 12(sp),sp
		unsigned char here = 0;
   139c8:	|                     clr.b 571(sp)
		char readChar = ' ';
   139cc:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   139d2:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   139d8:	|                     clr.w 566(sp)
		LONG tmp = 0;
   139dc:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   139e0:	|  /----------------> move.l 546(sp),534(sp)
   139e6:	|  |                  move.l 1ca90 <DOSBase>,d0
   139ec:	|  |                  movea.l d0,a6
   139ee:	|  |                  move.l 534(sp),d1
   139f2:	|  |                  jsr -306(a6)
   139f6:	|  |                  move.l d0,530(sp)
   139fa:	|  |                  move.l 530(sp),d0
   139fe:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13a02:	|  |                  moveq #-1,d1
   13a04:	|  |                  cmp.l 538(sp),d1
   13a08:	|  |           /----- bne.s 13a16 <readIniFile+0x126>
				readChar = '\n';
   13a0a:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13a10:	|  |           |      clr.w 568(sp)
   13a14:	|  |           |  /-- bra.s 13a1c <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13a16:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13a1c:	|  |              \-> move.b 570(sp),d0
   13a20:	|  |                  ext.w d0
   13a22:	|  |                  movea.w d0,a0
   13a24:	|  |                  moveq #61,d0
   13a26:	|  |                  cmp.l a0,d0
   13a28:	|  |     /----------- beq.w 13bd2 <readIniFile+0x2e2>
   13a2c:	|  |     |            moveq #61,d1
   13a2e:	|  |     |            cmp.l a0,d1
   13a30:	|  |  /--|----------- blt.w 13bde <readIniFile+0x2ee>
   13a34:	|  |  |  |            moveq #10,d0
   13a36:	|  |  |  |            cmp.l a0,d0
   13a38:	|  |  |  |        /-- beq.s 13a42 <readIniFile+0x152>
   13a3a:	|  |  |  |        |   moveq #13,d1
   13a3c:	|  |  |  |        |   cmp.l a0,d1
   13a3e:	|  |  +--|--------|-- bne.w 13bde <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13a42:	|  |  |  |        \-> tst.w 566(sp)
   13a46:	|  |  |  |     /----- beq.w 13bc0 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13a4a:	|  |  |  |     |      pea 19e92 <graphics.c.1c13408a+0x2aa>
   13a50:	|  |  |  |     |      move.l sp,d0
   13a52:	|  |  |  |     |      addi.l #269,d0
   13a58:	|  |  |  |     |      move.l d0,-(sp)
   13a5a:	|  |  |  |     |      jsr 13d86 <strcmp>
   13a60:	|  |  |  |     |      addq.l #8,sp
   13a62:	|  |  |  |     |      tst.l d0
   13a64:	|  |  |  |     |  /-- bne.s 13a7e <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13a66:	|  |  |  |     |  |   move.l sp,d0
   13a68:	|  |  |  |     |  |   addq.l #8,d0
   13a6a:	|  |  |  |     |  |   move.l d0,-(sp)
   13a6c:	|  |  |  |     |  |   jsr 13c76 <stringToInt>
   13a72:	|  |  |  |     |  |   addq.l #4,sp
   13a74:	|  |  |  |     |  |   move.l d0,1cb64 <gameSettings>
   13a7a:	|  |  |  |     +--|-- bra.w 13bc0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13a7e:	|  |  |  |     |  \-> pea 19e9b <graphics.c.1c13408a+0x2b3>
   13a84:	|  |  |  |     |      move.l sp,d0
   13a86:	|  |  |  |     |      addi.l #269,d0
   13a8c:	|  |  |  |     |      move.l d0,-(sp)
   13a8e:	|  |  |  |     |      jsr 13d86 <strcmp>
   13a94:	|  |  |  |     |      addq.l #8,sp
   13a96:	|  |  |  |     |      tst.l d0
   13a98:	|  |  |  |     |  /-- bne.s 13abe <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13a9a:	|  |  |  |     |  |   move.l sp,d0
   13a9c:	|  |  |  |     |  |   addq.l #8,d0
   13a9e:	|  |  |  |     |  |   move.l d0,-(sp)
   13aa0:	|  |  |  |     |  |   jsr 13c76 <stringToInt>
   13aa6:	|  |  |  |     |  |   addq.l #4,sp
   13aa8:	|  |  |  |     |  |   tst.l d0
   13aaa:	|  |  |  |     |  |   seq d0
   13aac:	|  |  |  |     |  |   neg.b d0
   13aae:	|  |  |  |     |  |   move.b d0,d0
   13ab0:	|  |  |  |     |  |   andi.w #255,d0
   13ab4:	|  |  |  |     |  |   move.w d0,1cb6c <gameSettings+0x8>
   13aba:	|  |  |  |     +--|-- bra.w 13bc0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13abe:	|  |  |  |     |  \-> pea 19ea2 <graphics.c.1c13408a+0x2ba>
   13ac4:	|  |  |  |     |      move.l sp,d0
   13ac6:	|  |  |  |     |      addi.l #269,d0
   13acc:	|  |  |  |     |      move.l d0,-(sp)
   13ace:	|  |  |  |     |      jsr 13d86 <strcmp>
   13ad4:	|  |  |  |     |      addq.l #8,sp
   13ad6:	|  |  |  |     |      tst.l d0
   13ad8:	|  |  |  |     |  /-- bne.s 13af2 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13ada:	|  |  |  |     |  |   move.l sp,d0
   13adc:	|  |  |  |     |  |   addq.l #8,d0
   13ade:	|  |  |  |     |  |   move.l d0,-(sp)
   13ae0:	|  |  |  |     |  |   jsr 13c76 <stringToInt>
   13ae6:	|  |  |  |     |  |   addq.l #4,sp
   13ae8:	|  |  |  |     |  |   move.l d0,1cb6e <gameSettings+0xa>
   13aee:	|  |  |  |     +--|-- bra.w 13bc0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13af2:	|  |  |  |     |  \-> pea 19eaa <graphics.c.1c13408a+0x2c2>
   13af8:	|  |  |  |     |      move.l sp,d0
   13afa:	|  |  |  |     |      addi.l #269,d0
   13b00:	|  |  |  |     |      move.l d0,-(sp)
   13b02:	|  |  |  |     |      jsr 13d86 <strcmp>
   13b08:	|  |  |  |     |      addq.l #8,sp
   13b0a:	|  |  |  |     |      tst.l d0
   13b0c:	|  |  |  |     |  /-- bne.s 13b26 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13b0e:	|  |  |  |     |  |   move.l sp,d0
   13b10:	|  |  |  |     |  |   addq.l #8,d0
   13b12:	|  |  |  |     |  |   move.l d0,-(sp)
   13b14:	|  |  |  |     |  |   jsr 13c76 <stringToInt>
   13b1a:	|  |  |  |     |  |   addq.l #4,sp
   13b1c:	|  |  |  |     |  |   move.l d0,1cb72 <gameSettings+0xe>
   13b22:	|  |  |  |     +--|-- bra.w 13bc0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13b26:	|  |  |  |     |  \-> pea 19eb4 <graphics.c.1c13408a+0x2cc>
   13b2c:	|  |  |  |     |      move.l sp,d0
   13b2e:	|  |  |  |     |      addi.l #269,d0
   13b34:	|  |  |  |     |      move.l d0,-(sp)
   13b36:	|  |  |  |     |      jsr 13d86 <strcmp>
   13b3c:	|  |  |  |     |      addq.l #8,sp
   13b3e:	|  |  |  |     |      tst.l d0
   13b40:	|  |  |  |     |  /-- bne.s 13b5a <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13b42:	|  |  |  |     |  |   move.l sp,d0
   13b44:	|  |  |  |     |  |   addq.l #8,d0
   13b46:	|  |  |  |     |  |   move.l d0,-(sp)
   13b48:	|  |  |  |     |  |   jsr 13c76 <stringToInt>
   13b4e:	|  |  |  |     |  |   addq.l #4,sp
   13b50:	|  |  |  |     |  |   move.l d0,d0
   13b52:	|  |  |  |     |  |   move.w d0,1cb76 <gameSettings+0x12>
   13b58:	|  |  |  |     +--|-- bra.s 13bc0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13b5a:	|  |  |  |     |  \-> pea 19ec0 <graphics.c.1c13408a+0x2d8>
   13b60:	|  |  |  |     |      move.l sp,d0
   13b62:	|  |  |  |     |      addi.l #269,d0
   13b68:	|  |  |  |     |      move.l d0,-(sp)
   13b6a:	|  |  |  |     |      jsr 13d86 <strcmp>
   13b70:	|  |  |  |     |      addq.l #8,sp
   13b72:	|  |  |  |     |      tst.l d0
   13b74:	|  |  |  |     |  /-- bne.s 13b8e <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13b76:	|  |  |  |     |  |   move.l sp,d0
   13b78:	|  |  |  |     |  |   addq.l #8,d0
   13b7a:	|  |  |  |     |  |   move.l d0,-(sp)
   13b7c:	|  |  |  |     |  |   jsr 13c76 <stringToInt>
   13b82:	|  |  |  |     |  |   addq.l #4,sp
   13b84:	|  |  |  |     |  |   move.l d0,d0
   13b86:	|  |  |  |     |  |   move.w d0,1cb78 <gameSettings+0x14>
   13b8c:	|  |  |  |     +--|-- bra.s 13bc0 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13b8e:	|  |  |  |     |  \-> pea 19ece <graphics.c.1c13408a+0x2e6>
   13b94:	|  |  |  |     |      move.l sp,d0
   13b96:	|  |  |  |     |      addi.l #269,d0
   13b9c:	|  |  |  |     |      move.l d0,-(sp)
   13b9e:	|  |  |  |     |      jsr 13d86 <strcmp>
   13ba4:	|  |  |  |     |      addq.l #8,sp
   13ba6:	|  |  |  |     |      tst.l d0
   13ba8:	|  |  |  |     +----- bne.s 13bc0 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13baa:	|  |  |  |     |      move.l sp,d0
   13bac:	|  |  |  |     |      addq.l #8,d0
   13bae:	|  |  |  |     |      move.l d0,-(sp)
   13bb0:	|  |  |  |     |      jsr 13c76 <stringToInt>
   13bb6:	|  |  |  |     |      addq.l #4,sp
   13bb8:	|  |  |  |     |      move.l d0,d0
   13bba:	|  |  |  |     |      move.w d0,1cb7a <gameSettings+0x16>
					}
				}
				here = 0;
   13bc0:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   13bc4:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13bc8:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13bcc:	|  |  |  |            clr.b 8(sp)
				break;
   13bd0:	|  |  |  |  /-------- bra.s 13c48 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13bd2:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   13bd8:	|  |  |     |         clr.b 571(sp)
				break;
   13bdc:	|  |  |     +-------- bra.s 13c48 <readIniFile+0x358>

				default:
				if (doingSecond) {
   13bde:	|  |  \-----|-------> tst.w 566(sp)
   13be2:	|  |        |  /----- beq.s 13c16 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13be4:	|  |        |  |      move.b 571(sp),d0
   13be8:	|  |        |  |      move.b d0,d1
   13bea:	|  |        |  |      addq.b #1,d1
   13bec:	|  |        |  |      move.b d1,571(sp)
   13bf0:	|  |        |  |      move.b d0,d0
   13bf2:	|  |        |  |      andi.l #255,d0
   13bf8:	|  |        |  |      lea 572(sp),a0
   13bfc:	|  |        |  |      adda.l d0,a0
   13bfe:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13c04:	|  |        |  |      moveq #0,d0
   13c06:	|  |        |  |      move.b 571(sp),d0
   13c0a:	|  |        |  |      lea 572(sp),a0
   13c0e:	|  |        |  |      adda.l d0,a0
   13c10:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13c14:	|  |        |  |  /-- bra.s 13c46 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13c16:	|  |        |  \--|-> move.b 571(sp),d0
   13c1a:	|  |        |     |   move.b d0,d1
   13c1c:	|  |        |     |   addq.b #1,d1
   13c1e:	|  |        |     |   move.b d1,571(sp)
   13c22:	|  |        |     |   move.b d0,d0
   13c24:	|  |        |     |   andi.l #255,d0
   13c2a:	|  |        |     |   lea 572(sp),a0
   13c2e:	|  |        |     |   adda.l d0,a0
   13c30:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13c36:	|  |        |     |   moveq #0,d0
   13c38:	|  |        |     |   move.b 571(sp),d0
   13c3c:	|  |        |     |   lea 572(sp),a0
   13c40:	|  |        |     |   adda.l d0,a0
   13c42:	|  |        |     |   clr.b -307(a0)
				break;
   13c46:	|  |        |     \-> nop
			}
		} while (keepGoing);
   13c48:	|  |        \-------> tst.w 568(sp)
   13c4c:	|  \----------------- bne.w 139e0 <readIniFile+0xf0>

		Close(fp);
   13c50:	|                     move.l 546(sp),526(sp)
   13c56:	|                     move.l 1ca90 <DOSBase>,d0
   13c5c:	|                     movea.l d0,a6
   13c5e:	|                     move.l 526(sp),d1
   13c62:	|                     jsr -36(a6)
   13c66:	|                     move.l d0,522(sp)
	}
}
   13c6a:	\-------------------> nop
   13c6c:	                      move.l (sp)+,d2
   13c6e:	                      movea.l (sp)+,a6
   13c70:	                      lea 564(sp),sp
   13c74:	                      rts

00013c76 <stringToInt>:

unsigned int stringToInt (char * s) {
   13c76:	             subq.l #8,sp
	int i = 0;
   13c78:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13c7c:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13c80:	/----------> movea.l 12(sp),a0
   13c84:	|            move.b (a0),d0
   13c86:	|            cmpi.b #47,d0
   13c8a:	|        /-- ble.s 13cc2 <stringToInt+0x4c>
   13c8c:	|        |   movea.l 12(sp),a0
   13c90:	|        |   move.b (a0),d0
   13c92:	|        |   cmpi.b #57,d0
   13c96:	|        +-- bgt.s 13cc2 <stringToInt+0x4c>
			i *= 10;
   13c98:	|        |   move.l 4(sp),d1
   13c9c:	|        |   move.l d1,d0
   13c9e:	|        |   add.l d0,d0
   13ca0:	|        |   add.l d0,d0
   13ca2:	|        |   add.l d1,d0
   13ca4:	|        |   add.l d0,d0
   13ca6:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13caa:	|        |   movea.l 12(sp),a0
   13cae:	|        |   move.b (a0),d0
   13cb0:	|        |   ext.w d0
   13cb2:	|        |   movea.w d0,a0
   13cb4:	|        |   moveq #-48,d0
   13cb6:	|        |   add.l a0,d0
   13cb8:	|        |   add.l d0,4(sp)
			s ++;
   13cbc:	|        |   addq.l #1,12(sp)
   13cc0:	|  /-----|-- bra.s 13cfa <stringToInt+0x84>
		} else if (*s == '-') {
   13cc2:	|  |     \-> movea.l 12(sp),a0
   13cc6:	|  |         move.b (a0),d0
   13cc8:	|  |         cmpi.b #45,d0
   13ccc:	|  |     /-- bne.s 13ce6 <stringToInt+0x70>
			negative = ! negative;
   13cce:	|  |     |   tst.w 2(sp)
   13cd2:	|  |     |   seq d0
   13cd4:	|  |     |   neg.b d0
   13cd6:	|  |     |   move.b d0,d0
   13cd8:	|  |     |   andi.w #255,d0
   13cdc:	|  |     |   move.w d0,2(sp)
			s++;
   13ce0:	|  |     |   addq.l #1,12(sp)
   13ce4:	+--|-----|-- bra.s 13c80 <stringToInt+0xa>
		} else {
			if (negative)
   13ce6:	|  |     \-> tst.w 2(sp)
   13cea:	|  |     /-- beq.s 13cf4 <stringToInt+0x7e>
				return -i;
   13cec:	|  |     |   move.l 4(sp),d0
   13cf0:	|  |     |   neg.l d0
   13cf2:	|  |  /--|-- bra.s 13cfc <stringToInt+0x86>
			return i;
   13cf4:	|  |  |  \-> move.l 4(sp),d0
   13cf8:	|  |  +----- bra.s 13cfc <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13cfa:	\--\--|----X bra.s 13c80 <stringToInt+0xa>
		}
	}
   13cfc:	      \----> addq.l #8,sp
   13cfe:	             rts

00013d00 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13d00:	    lea -28(sp),sp
   13d04:	    move.l a6,-(sp)
   13d06:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13d08:	    pea 19ed8 <graphics.c.1c13408a+0x2f0>
   13d0e:	    jsr 1733a <KPrintF>
   13d14:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13d16:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13d1a:	    move.l 40(sp),30(sp)
   13d20:	    move.l #1005,26(sp)
   13d28:	    move.l 1ca90 <DOSBase>,d0
   13d2e:	    movea.l d0,a6
   13d30:	    move.l 30(sp),d1
   13d34:	    move.l 26(sp),d2
   13d38:	    jsr -30(a6)
   13d3c:	    move.l d0,22(sp)
   13d40:	    move.l 22(sp),d0
   13d44:	    move.l d0,18(sp)
	if (tester) {
   13d48:	/-- beq.s 13d78 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13d4a:	|   pea 19ef2 <graphics.c.1c13408a+0x30a>
   13d50:	|   jsr 1733a <KPrintF>
   13d56:	|   addq.l #4,sp
		retval = 1;
   13d58:	|   move.b #1,35(sp)
		Close(tester);
   13d5e:	|   move.l 18(sp),14(sp)
   13d64:	|   move.l 1ca90 <DOSBase>,d0
   13d6a:	|   movea.l d0,a6
   13d6c:	|   move.l 14(sp),d1
   13d70:	|   jsr -36(a6)
   13d74:	|   move.l d0,10(sp)
	}
	return retval;
   13d78:	\-> move.b 35(sp),d0
   13d7c:	    move.l (sp)+,d2
   13d7e:	    movea.l (sp)+,a6
   13d80:	    lea 28(sp),sp
   13d84:	    rts

00013d86 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13d86:	   /-- bra.s 13d90 <strcmp+0xa>
    {
        s1++;
   13d88:	/--|-> addq.l #1,4(sp)
        s2++;
   13d8c:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13d90:	|  \-> movea.l 4(sp),a0
   13d94:	|      move.b (a0),d0
   13d96:	|  /-- beq.s 13da8 <strcmp+0x22>
   13d98:	|  |   movea.l 4(sp),a0
   13d9c:	|  |   move.b (a0),d1
   13d9e:	|  |   movea.l 8(sp),a0
   13da2:	|  |   move.b (a0),d0
   13da4:	|  |   cmp.b d1,d0
   13da6:	\--|-- beq.s 13d88 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13da8:	   \-> movea.l 4(sp),a0
   13dac:	       move.b (a0),d0
   13dae:	       moveq #0,d1
   13db0:	       move.b d0,d1
   13db2:	       movea.l 8(sp),a0
   13db6:	       move.b (a0),d0
   13db8:	       move.b d0,d0
   13dba:	       andi.l #255,d0
   13dc0:	       sub.l d0,d1
   13dc2:	       move.l d1,d0
}
   13dc4:	       rts

00013dc6 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13dc6:	       subq.l #4,sp
	long unsigned int i = 0;
   13dc8:	       clr.l (sp)
	while(s[i]) i++; 
   13dca:	   /-- bra.s 13dce <strlen+0x8>
   13dcc:	/--|-> addq.l #1,(sp)
   13dce:	|  \-> movea.l 8(sp),a0
   13dd2:	|      adda.l (sp),a0
   13dd4:	|      move.b (a0),d0
   13dd6:	\----- bne.s 13dcc <strlen+0x6>
	return(i);
   13dd8:	       move.l (sp),d0
}
   13dda:	       addq.l #4,sp
   13ddc:	       rts

00013dde <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13dde:	    nop
   13de0:	/-> move.l 8(sp),d0
   13de4:	|   move.l d0,d1
   13de6:	|   addq.l #1,d1
   13de8:	|   move.l d1,8(sp)
   13dec:	|   movea.l 4(sp),a0
   13df0:	|   lea 1(a0),a1
   13df4:	|   move.l a1,4(sp)
   13df8:	|   movea.l d0,a1
   13dfa:	|   move.b (a1),d0
   13dfc:	|   move.b d0,(a0)
   13dfe:	|   move.b (a0),d0
   13e00:	\-- bne.s 13de0 <strcpy+0x2>
}
   13e02:	    nop
   13e04:	    rts

00013e06 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13e06:	    lea -20(sp),sp
   13e0a:	    move.l a6,-(sp)
   13e0c:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13e0e:	    move.l 32(sp),-(sp)
   13e12:	    jsr 13dc6 <strlen>
   13e18:	    addq.l #4,sp
   13e1a:	    move.l d0,d2
   13e1c:	    move.l 36(sp),-(sp)
   13e20:	    jsr 13dc6 <strlen>
   13e26:	    addq.l #4,sp
   13e28:	    add.l d2,d0
   13e2a:	    move.l d0,d1
   13e2c:	    addq.l #1,d1
   13e2e:	    move.l d1,20(sp)
   13e32:	    clr.l 16(sp)
   13e36:	    move.l 1ca88 <SysBase>,d0
   13e3c:	    movea.l d0,a6
   13e3e:	    move.l 20(sp),d0
   13e42:	    move.l 16(sp),d1
   13e46:	    jsr -684(a6)
   13e4a:	    move.l d0,12(sp)
   13e4e:	    move.l 12(sp),d0
   13e52:	    move.l d0,8(sp)
	char * t = newString;
   13e56:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13e5c:	    nop
   13e5e:	/-> move.l 32(sp),d0
   13e62:	|   move.l d0,d1
   13e64:	|   addq.l #1,d1
   13e66:	|   move.l d1,32(sp)
   13e6a:	|   movea.l 24(sp),a0
   13e6e:	|   lea 1(a0),a1
   13e72:	|   move.l a1,24(sp)
   13e76:	|   movea.l d0,a1
   13e78:	|   move.b (a1),d0
   13e7a:	|   move.b d0,(a0)
   13e7c:	|   move.b (a0),d0
   13e7e:	\-- bne.s 13e5e <joinStrings+0x58>
	t--;
   13e80:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13e84:	    nop
   13e86:	/-> move.l 36(sp),d0
   13e8a:	|   move.l d0,d1
   13e8c:	|   addq.l #1,d1
   13e8e:	|   move.l d1,36(sp)
   13e92:	|   movea.l 24(sp),a0
   13e96:	|   lea 1(a0),a1
   13e9a:	|   move.l a1,24(sp)
   13e9e:	|   movea.l d0,a1
   13ea0:	|   move.b (a1),d0
   13ea2:	|   move.b d0,(a0)
   13ea4:	|   move.b (a0),d0
   13ea6:	\-- bne.s 13e86 <joinStrings+0x80>

	return newString;
   13ea8:	    move.l 8(sp),d0
}
   13eac:	    move.l (sp)+,d2
   13eae:	    movea.l (sp)+,a6
   13eb0:	    lea 20(sp),sp
   13eb4:	    rts

00013eb6 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   13eb6:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13eba:	       moveq #10,d0
   13ebc:	       cmp.l 28(sp),d0
   13ec0:	   /-- bne.s 13ede <itoa+0x28>
   13ec2:	   |   tst.l 20(sp)
   13ec6:	   +-- bge.s 13ede <itoa+0x28>
        *str++ = '-';
   13ec8:	   |   move.l 24(sp),d0
   13ecc:	   |   move.l d0,d1
   13ece:	   |   addq.l #1,d1
   13ed0:	   |   move.l d1,24(sp)
   13ed4:	   |   movea.l d0,a0
   13ed6:	   |   move.b #45,(a0)
        value *= -1;
   13eda:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13ede:	   \-> move.l 24(sp),12(sp)
   13ee4:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13eea:	   /-> move.l 20(sp),d0
   13eee:	   |   move.l 28(sp),-(sp)
   13ef2:	   |   move.l d0,-(sp)
   13ef4:	   |   jsr 17d72 <__modsi3>
   13efa:	   |   addq.l #8,sp
   13efc:	   |   movea.l d0,a1
   13efe:	   |   move.l 12(sp),d0
   13f02:	   |   move.l d0,d1
   13f04:	   |   addq.l #1,d1
   13f06:	   |   move.l d1,12(sp)
   13f0a:	   |   lea 19f0a <graphics.c.1c13408a+0x322>,a0
   13f10:	   |   move.b (0,a1,a0.l),d1
   13f14:	   |   movea.l d0,a0
   13f16:	   |   move.b d1,(a0)
        value /= base;
   13f18:	   |   move.l 28(sp),-(sp)
   13f1c:	   |   move.l 24(sp),-(sp)
   13f20:	   |   jsr 17d44 <__divsi3>
   13f26:	   |   addq.l #8,sp
   13f28:	   |   move.l d0,20(sp)
    } while (value);
   13f2c:	   \-- bne.s 13eea <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   13f2e:	       move.l 12(sp),d0
   13f32:	       move.l d0,d1
   13f34:	       subq.l #1,d1
   13f36:	       move.l d1,12(sp)
   13f3a:	       movea.l d0,a0
   13f3c:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   13f3e:	       move.l 4(sp),8(sp)
   13f44:	   /-- bra.s 13f6a <itoa+0xb4>
        char temp = *low;
   13f46:	/--|-> movea.l 8(sp),a0
   13f4a:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   13f4e:	|  |   movea.l 12(sp),a0
   13f52:	|  |   move.b (a0),d0
   13f54:	|  |   movea.l 8(sp),a0
   13f58:	|  |   move.b d0,(a0)
        *ptr = temp;
   13f5a:	|  |   movea.l 12(sp),a0
   13f5e:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   13f62:	|  |   addq.l #1,8(sp)
   13f66:	|  |   subq.l #1,12(sp)
   13f6a:	|  \-> move.l 8(sp),d0
   13f6e:	|      cmp.l 12(sp),d0
   13f72:	\----- bcs.s 13f46 <itoa+0x90>
    }
    return rc;
   13f74:	       move.l 4(sp),d0
}
   13f78:	       lea 16(sp),sp
   13f7c:	       rts

00013f7e <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13f7e:	                            lea -40(sp),sp
   13f82:	                            move.l d2,-(sp)
    char* s = str;
   13f84:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13f8a:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13f90:	   /----------------------- bra.w 140c4 <vsprintf2+0x146>
        if (*p == '%') {
   13f94:	/--|----------------------> movea.l 36(sp),a0
   13f98:	|  |                        move.b (a0),d0
   13f9a:	|  |                        cmpi.b #37,d0
   13f9e:	|  |  /-------------------- bne.w 140aa <vsprintf2+0x12c>
            switch (*++p) {
   13fa2:	|  |  |                     addq.l #1,36(sp)
   13fa6:	|  |  |                     movea.l 36(sp),a0
   13faa:	|  |  |                     move.b (a0),d0
   13fac:	|  |  |                     ext.w d0
   13fae:	|  |  |                     movea.w d0,a0
   13fb0:	|  |  |                     moveq #115,d0
   13fb2:	|  |  |                     cmp.l a0,d0
   13fb4:	|  |  |           /-------- beq.s 1402c <vsprintf2+0xae>
   13fb6:	|  |  |           |         moveq #115,d1
   13fb8:	|  |  |           |         cmp.l a0,d1
   13fba:	|  |  |  /--------|-------- blt.w 14092 <vsprintf2+0x114>
   13fbe:	|  |  |  |        |         moveq #99,d2
   13fc0:	|  |  |  |        |         cmp.l a0,d2
   13fc2:	|  |  |  |  /-----|-------- beq.w 1406a <vsprintf2+0xec>
   13fc6:	|  |  |  |  |     |         moveq #100,d0
   13fc8:	|  |  |  |  |     |         cmp.l a0,d0
   13fca:	|  |  |  +--|-----|-------- bne.w 14092 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13fce:	|  |  |  |  |     |         addq.l #4,56(sp)
   13fd2:	|  |  |  |  |     |         movea.l 56(sp),a0
   13fd6:	|  |  |  |  |     |         move.l (a0),d0
   13fd8:	|  |  |  |  |     |         move.l d0,d1
   13fda:	|  |  |  |  |     |         subq.l #1,d1
   13fdc:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13fe0:	|  |  |  |  |     |         pea a <_start+0xa>
   13fe4:	|  |  |  |  |     |         lea 8(sp),a0
   13fe8:	|  |  |  |  |     |         move.l a0,-(sp)
   13fea:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13fee:	|  |  |  |  |     |         jsr 13eb6 <itoa>
   13ff4:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   13ff8:	|  |  |  |  |     |         lea 44(sp),a0
   13ffc:	|  |  |  |  |     |         lea -40(a0),a0
   14000:	|  |  |  |  |     |         move.l a0,28(sp)
   14004:	|  |  |  |  |     |     /-- bra.s 14020 <vsprintf2+0xa2>
                        *s++ = *b;
   14006:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   1400a:	|  |  |  |  |     |  |  |   move.l d0,d1
   1400c:	|  |  |  |  |     |  |  |   addq.l #1,d1
   1400e:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   14012:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   14016:	|  |  |  |  |     |  |  |   move.b (a0),d1
   14018:	|  |  |  |  |     |  |  |   movea.l d0,a0
   1401a:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   1401c:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   14020:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   14024:	|  |  |  |  |     |  |      move.b (a0),d0
   14026:	|  |  |  |  |     |  \----- bne.s 14006 <vsprintf2+0x88>
                    }
                    break;
   14028:	|  |  |  |  |  /--|-------- bra.w 140c0 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   1402c:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   14030:	|  |  |  |  |  |            movea.l 56(sp),a0
   14034:	|  |  |  |  |  |            move.l (a0),d0
   14036:	|  |  |  |  |  |            move.l d0,d1
   14038:	|  |  |  |  |  |            subq.l #1,d1
   1403a:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   1403e:	|  |  |  |  |  |        /-- bra.s 14060 <vsprintf2+0xe2>
                        *s++ = *sval++;
   14040:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   14044:	|  |  |  |  |  |     |  |   move.l d1,d2
   14046:	|  |  |  |  |  |     |  |   addq.l #1,d2
   14048:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   1404c:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   14050:	|  |  |  |  |  |     |  |   move.l d0,d2
   14052:	|  |  |  |  |  |     |  |   addq.l #1,d2
   14054:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   14058:	|  |  |  |  |  |     |  |   movea.l d1,a0
   1405a:	|  |  |  |  |  |     |  |   move.b (a0),d1
   1405c:	|  |  |  |  |  |     |  |   movea.l d0,a0
   1405e:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   14060:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   14064:	|  |  |  |  |  |     |      move.b (a0),d0
   14066:	|  |  |  |  |  |     \----- bne.s 14040 <vsprintf2+0xc2>
                    }
                    break;
   14068:	|  |  |  |  |  +----------- bra.s 140c0 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   1406a:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   1406e:	|  |  |  |     |            movea.l 56(sp),a0
   14072:	|  |  |  |     |            move.l (a0),d0
   14074:	|  |  |  |     |            move.l d0,d1
   14076:	|  |  |  |     |            subq.l #1,d1
   14078:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   1407c:	|  |  |  |     |            move.l 40(sp),d0
   14080:	|  |  |  |     |            move.l d0,d2
   14082:	|  |  |  |     |            addq.l #1,d2
   14084:	|  |  |  |     |            move.l d2,40(sp)
   14088:	|  |  |  |     |            move.l 24(sp),d1
   1408c:	|  |  |  |     |            movea.l d0,a0
   1408e:	|  |  |  |     |            move.b d1,(a0)
                    break;
   14090:	|  |  |  |     +----------- bra.s 140c0 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   14092:	|  |  |  \-----|----------> move.l 40(sp),d0
   14096:	|  |  |        |            move.l d0,d1
   14098:	|  |  |        |            addq.l #1,d1
   1409a:	|  |  |        |            move.l d1,40(sp)
   1409e:	|  |  |        |            movea.l 36(sp),a0
   140a2:	|  |  |        |            move.b (a0),d1
   140a4:	|  |  |        |            movea.l d0,a0
   140a6:	|  |  |        |            move.b d1,(a0)
                    break;
   140a8:	|  |  |        +----------- bra.s 140c0 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   140aa:	|  |  \--------|----------> move.l 40(sp),d0
   140ae:	|  |           |            move.l d0,d1
   140b0:	|  |           |            addq.l #1,d1
   140b2:	|  |           |            move.l d1,40(sp)
   140b6:	|  |           |            movea.l 36(sp),a0
   140ba:	|  |           |            move.b (a0),d1
   140bc:	|  |           |            movea.l d0,a0
   140be:	|  |           |            move.b d1,(a0)
        }
        p++;
   140c0:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   140c4:	|  \----------------------> movea.l 36(sp),a0
   140c8:	|                           move.b (a0),d0
   140ca:	\-------------------------- bne.w 13f94 <vsprintf2+0x16>
    }
    *s = '\0';
   140ce:	                            movea.l 40(sp),a0
   140d2:	                            clr.b (a0)
    return s - str;
   140d4:	                            move.l 40(sp),d0
   140d8:	                            sub.l 48(sp),d0
}
   140dc:	                            move.l (sp)+,d2
   140de:	                            lea 40(sp),sp
   140e2:	                            rts

000140e4 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   140e4:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   140e6:	moveq #16,d0
   140e8:	add.l sp,d0
   140ea:	move.l d0,d1
   140ec:	addq.l #4,d1
   140ee:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   140f2:	move.l 16(sp),d0
   140f6:	move.l 4(sp),-(sp)
   140fa:	move.l d0,-(sp)
   140fc:	move.l 20(sp),-(sp)
   14100:	jsr 13f7e <vsprintf2>
   14106:	lea 12(sp),sp
   1410a:	move.l d0,(sp)
    va_end(args);
   1410c:	clr.l 4(sp)

    return done;
   14110:	move.l (sp),d0
}
   14112:	addq.l #8,sp
   14114:	rts

00014116 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   14116:	       lea -20(sp),sp
   1411a:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1411c:	       moveq #12,d0
   1411e:	       move.l d0,20(sp)
   14122:	       clr.l 16(sp)
   14126:	       move.l 1ca88 <SysBase>,d0
   1412c:	       movea.l d0,a6
   1412e:	       move.l 20(sp),d0
   14132:	       move.l 16(sp),d1
   14136:	       jsr -684(a6)
   1413a:	       move.l d0,12(sp)
   1413e:	       move.l 12(sp),d0
   14142:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   14146:	   /-- bne.s 1414c <addVarToStack+0x36>
   14148:	   |   clr.w d0
   1414a:	/--|-- bra.s 14194 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   1414c:	|  \-> move.l 8(sp),d0
   14150:	|      move.l d0,-(sp)
   14152:	|      move.l 32(sp),-(sp)
   14156:	|      jsr 14c78 <copyMain>
   1415c:	|      addq.l #8,sp
   1415e:	|      tst.w d0
   14160:	|  /-- bne.s 1417c <addVarToStack+0x66>
        FreeVec(newStack);
   14162:	|  |   move.l 8(sp),4(sp)
   14168:	|  |   move.l 1ca88 <SysBase>,d0
   1416e:	|  |   movea.l d0,a6
   14170:	|  |   movea.l 4(sp),a1
   14174:	|  |   jsr -690(a6)
        return FALSE;
   14178:	|  |   clr.w d0
   1417a:	+--|-- bra.s 14194 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   1417c:	|  \-> movea.l 32(sp),a0
   14180:	|      move.l (a0),d0
   14182:	|      movea.l 8(sp),a0
   14186:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1418a:	|      movea.l 32(sp),a0
   1418e:	|      move.l 8(sp),(a0)
    return TRUE;
   14192:	|      moveq #1,d0
}
   14194:	\----> movea.l (sp)+,a6
   14196:	       lea 20(sp),sp
   1419a:	       rts

0001419c <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   1419c:	       lea -16(sp),sp
   141a0:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   141a2:	       moveq #12,d0
   141a4:	       move.l d0,16(sp)
   141a8:	       clr.l 12(sp)
   141ac:	       move.l 1ca88 <SysBase>,d0
   141b2:	       movea.l d0,a6
   141b4:	       move.l 16(sp),d0
   141b8:	       move.l 12(sp),d1
   141bc:	       jsr -684(a6)
   141c0:	       move.l d0,8(sp)
   141c4:	       move.l 8(sp),d0
   141c8:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   141cc:	   /-- bne.s 141d2 <addVarToStackQuick+0x36>
   141ce:	   |   clr.w d0
   141d0:	/--|-- bra.s 14208 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   141d2:	|  \-> move.l 4(sp),d0
   141d6:	|      pea 8 <_start+0x8>
   141da:	|      move.l 28(sp),-(sp)
   141de:	|      move.l d0,-(sp)
   141e0:	|      jsr 172ee <memcpy>
   141e6:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   141ea:	|      movea.l 24(sp),a0
   141ee:	|      clr.l (a0)

    newStack->next = *thisStack;
   141f0:	|      movea.l 28(sp),a0
   141f4:	|      move.l (a0),d0
   141f6:	|      movea.l 4(sp),a0
   141fa:	|      move.l d0,8(a0)
    *thisStack = newStack;
   141fe:	|      movea.l 28(sp),a0
   14202:	|      move.l 4(sp),(a0)
    return TRUE;
   14206:	|      moveq #1,d0
}
   14208:	\----> movea.l (sp)+,a6
   1420a:	       lea 16(sp),sp
   1420e:	       rts

00014210 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   14210:	       lea -16(sp),sp
   14214:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   14216:	       movea.l 24(sp),a0
   1421a:	       move.l (a0),d0
   1421c:	       moveq #1,d1
   1421e:	       cmp.l d0,d1
   14220:	   /-- bne.s 1424a <addVariablesInSecond+0x3a>
   14222:	   |   movea.l 28(sp),a0
   14226:	   |   move.l (a0),d0
   14228:	   |   moveq #1,d1
   1422a:	   |   cmp.l d0,d1
   1422c:	   +-- bne.s 1424a <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   1422e:	   |   movea.l 28(sp),a0
   14232:	   |   move.l 4(a0),d1
   14236:	   |   movea.l 24(sp),a0
   1423a:	   |   move.l 4(a0),d0
   1423e:	   |   add.l d1,d0
   14240:	   |   movea.l 28(sp),a0
   14244:	   |   move.l d0,4(a0)
   14248:	/--|-- bra.s 142c4 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   1424a:	|  \-> move.l 24(sp),-(sp)
   1424e:	|      jsr 14eb0 <getTextFromAnyVar>
   14254:	|      addq.l #4,sp
   14256:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   1425a:	|      move.l 28(sp),-(sp)
   1425e:	|      jsr 14eb0 <getTextFromAnyVar>
   14264:	|      addq.l #4,sp
   14266:	|      move.l d0,12(sp)

		unlinkVar(var2);
   1426a:	|      move.l 28(sp),-(sp)
   1426e:	|      jsr 14b28 <unlinkVar>
   14274:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   14276:	|      move.l 12(sp),-(sp)
   1427a:	|      move.l 20(sp),-(sp)
   1427e:	|      jsr 13e06 <joinStrings>
   14284:	|      addq.l #8,sp
   14286:	|      movea.l 28(sp),a0
   1428a:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   1428e:	|      movea.l 28(sp),a0
   14292:	|      moveq #3,d0
   14294:	|      move.l d0,(a0)
		FreeVec(string1);
   14296:	|      move.l 16(sp),8(sp)
   1429c:	|      move.l 1ca88 <SysBase>,d0
   142a2:	|      movea.l d0,a6
   142a4:	|      movea.l 8(sp),a1
   142a8:	|      jsr -690(a6)
		FreeVec(string2);
   142ac:	|      move.l 12(sp),4(sp)
   142b2:	|      move.l 1ca88 <SysBase>,d0
   142b8:	|      movea.l d0,a6
   142ba:	|      movea.l 4(sp),a1
   142be:	|      jsr -690(a6)
	}
}
   142c2:	|      nop
   142c4:	\----> nop
   142c6:	       movea.l (sp)+,a6
   142c8:	       lea 16(sp),sp
   142cc:	       rts

000142ce <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   142ce:	movea.l 8(sp),a0
   142d2:	move.l 4(a0),-(sp)
   142d6:	move.l (a0),-(sp)
   142d8:	movea.l 12(sp),a0
   142dc:	move.l 4(a0),-(sp)
   142e0:	move.l (a0),-(sp)
   142e2:	jsr 14304 <compareVars>
   142e8:	lea 16(sp),sp
   142ec:	move.l d0,-(sp)
   142ee:	pea 1 <_start+0x1>
   142f2:	move.l 16(sp),-(sp)
   142f6:	jsr 151cc <setVariable>
   142fc:	lea 12(sp),sp
}
   14300:	nop
   14302:	rts

00014304 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   14304:	       subq.l #4,sp
	int re = 0;
   14306:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   14308:	       move.l 8(sp),d1
   1430c:	       move.l 16(sp),d0
   14310:	       cmp.l d1,d0
   14312:	/----- bne.w 143da <compareVars+0xd6>
		switch (var1.varType) {
   14316:	|      move.l 8(sp),d0
   1431a:	|      moveq #9,d1
   1431c:	|      cmp.l d0,d1
   1431e:	|  /-- bcs.w 143c2 <compareVars+0xbe>
   14322:	|  |   add.l d0,d0
   14324:	|  |   movea.l d0,a0
   14326:	|  |   adda.l #82738,a0
   1432c:	|  |   move.w (a0),d0
   1432e:	|  |   jmp (14332 <compareVars+0x2e>,pc,d0.w)
   14332:	|  |   ori.b #-112,(a4)
   14336:	|  |   ori.l #5243024,(a0)
   1433c:	|  |   ori.l #7733392,(a0)
   14342:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   14348:	|  |   move.l d0,(sp)
			break;
   1434a:	+--|-- bra.w 143da <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   1434e:	|  |   move.l 12(sp),d1
   14352:	|  |   move.l 20(sp),d0
   14356:	|  |   cmp.l d1,d0
   14358:	|  |   seq d0
   1435a:	|  |   neg.b d0
   1435c:	|  |   move.b d0,d0
   1435e:	|  |   andi.l #255,d0
   14364:	|  |   move.l d0,(sp)
			break;
   14366:	+--|-- bra.s 143da <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   14368:	|  |   move.l 12(sp),d1
   1436c:	|  |   move.l 20(sp),d0
   14370:	|  |   cmp.l d1,d0
   14372:	|  |   seq d0
   14374:	|  |   neg.b d0
   14376:	|  |   move.b d0,d0
   14378:	|  |   andi.l #255,d0
   1437e:	|  |   move.l d0,(sp)
			break;
   14380:	+--|-- bra.s 143da <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   14382:	|  |   move.l 20(sp),d1
   14386:	|  |   move.l 12(sp),d0
   1438a:	|  |   move.l d1,-(sp)
   1438c:	|  |   move.l d0,-(sp)
   1438e:	|  |   jsr 13d86 <strcmp>
   14394:	|  |   addq.l #8,sp
   14396:	|  |   tst.l d0
   14398:	|  |   seq d0
   1439a:	|  |   neg.b d0
   1439c:	|  |   move.b d0,d0
   1439e:	|  |   andi.l #255,d0
   143a4:	|  |   move.l d0,(sp)
			break;
   143a6:	+--|-- bra.s 143da <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   143a8:	|  |   move.l 12(sp),d1
   143ac:	|  |   move.l 20(sp),d0
   143b0:	|  |   cmp.l d1,d0
   143b2:	|  |   seq d0
   143b4:	|  |   neg.b d0
   143b6:	|  |   move.b d0,d0
   143b8:	|  |   andi.l #255,d0
   143be:	|  |   move.l d0,(sp)
			break;
   143c0:	+--|-- bra.s 143da <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   143c2:	|  \-> move.l 12(sp),d1
   143c6:	|      move.l 20(sp),d0
   143ca:	|      cmp.l d1,d0
   143cc:	|      seq d0
   143ce:	|      neg.b d0
   143d0:	|      move.b d0,d0
   143d2:	|      andi.l #255,d0
   143d8:	|      move.l d0,(sp)
		}
	}
	return re;
   143da:	\----> move.l (sp),d0
}
   143dc:	       addq.l #4,sp
   143de:	       rts

000143e0 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   143e0:	             lea -16(sp),sp
   143e4:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   143e6:	             movea.l 28(sp),a0
   143ea:	             moveq #6,d0
   143ec:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   143ee:	             moveq #12,d0
   143f0:	             move.l d0,12(sp)
   143f4:	             clr.l 8(sp)
   143f8:	             move.l 1ca88 <SysBase>,d0
   143fe:	             movea.l d0,a6
   14400:	             move.l 12(sp),d0
   14404:	             move.l 8(sp),d1
   14408:	             jsr -684(a6)
   1440c:	             move.l d0,4(sp)
   14410:	             move.l 4(sp),d0
   14414:	             movea.l 28(sp),a0
   14418:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   1441c:	             movea.l 28(sp),a0
   14420:	             move.l 4(a0),d0
   14424:	         /-- bne.s 1442c <copyStack+0x4c>
   14426:	         |   clr.w d0
   14428:	/--------|-- bra.w 144ae <copyStack+0xce>
	to->varData.theStack->first = NULL;
   1442c:	|        \-> movea.l 28(sp),a0
   14430:	|            movea.l 4(a0),a0
   14434:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   14436:	|            movea.l 28(sp),a0
   1443a:	|            movea.l 4(a0),a0
   1443e:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   14442:	|            movea.l 28(sp),a0
   14446:	|            movea.l 4(a0),a0
   1444a:	|            moveq #1,d0
   1444c:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   14450:	|            movea.l 24(sp),a0
   14454:	|            movea.l 4(a0),a0
   14458:	|            move.l (a0),16(sp)

	while (a) {
   1445c:	|     /----- bra.s 144a6 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   1445e:	|  /--|----> movea.l 28(sp),a0
   14462:	|  |  |      move.l 4(a0),d0
   14466:	|  |  |      move.l d0,d1
   14468:	|  |  |      move.l 16(sp),d0
   1446c:	|  |  |      move.l d1,-(sp)
   1446e:	|  |  |      move.l d0,-(sp)
   14470:	|  |  |      jsr 14116 <addVarToStack>
   14476:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   14478:	|  |  |      movea.l 28(sp),a0
   1447c:	|  |  |      movea.l 4(a0),a0
   14480:	|  |  |      move.l 4(a0),d0
   14484:	|  |  |  /-- bne.s 1449c <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   14486:	|  |  |  |   movea.l 28(sp),a0
   1448a:	|  |  |  |   movea.l 4(a0),a1
   1448e:	|  |  |  |   movea.l 28(sp),a0
   14492:	|  |  |  |   movea.l 4(a0),a0
   14496:	|  |  |  |   move.l (a1),d0
   14498:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   1449c:	|  |  |  \-> movea.l 16(sp),a0
   144a0:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   144a6:	|  |  \----> tst.l 16(sp)
   144aa:	|  \-------- bne.s 1445e <copyStack+0x7e>
	}

	return TRUE;
   144ac:	|            moveq #1,d0
}
   144ae:	\----------> movea.l (sp)+,a6
   144b0:	             lea 16(sp),sp
   144b4:	             rts

000144b6 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   144b6:	                lea -20(sp),sp
   144ba:	                move.l a6,-(sp)
   144bc:	                move.l 36(sp),d0
   144c0:	                move.w d0,d0
   144c2:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   144c6:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   144cc:	                clr.l 16(sp)

    while (*huntVar) {
   144d0:	   /----------- bra.s 1454e <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   144d2:	/--|----------> movea.l 20(sp),a0
   144d6:	|  |            movea.l (a0),a0
   144d8:	|  |            movea.l 28(sp),a1
   144dc:	|  |            move.l 4(a1),-(sp)
   144e0:	|  |            move.l (a1),-(sp)
   144e2:	|  |            move.l 4(a0),-(sp)
   144e6:	|  |            move.l (a0),-(sp)
   144e8:	|  |            jsr 14304 <compareVars>
   144ee:	|  |            lea 16(sp),sp
   144f2:	|  |            tst.l d0
   144f4:	|  |  /-------- beq.s 14540 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   144f6:	|  |  |         movea.l 20(sp),a0
   144fa:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   144fe:	|  |  |         movea.l 12(sp),a0
   14502:	|  |  |         move.l 8(a0),d0
   14506:	|  |  |         movea.l 20(sp),a0
   1450a:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   1450c:	|  |  |         move.l 12(sp),d0
   14510:	|  |  |         move.l d0,-(sp)
   14512:	|  |  |         jsr 14b28 <unlinkVar>
   14518:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1451a:	|  |  |         move.l 12(sp),8(sp)
   14520:	|  |  |         move.l 1ca88 <SysBase>,d0
   14526:	|  |  |         movea.l d0,a6
   14528:	|  |  |         movea.l 8(sp),a1
   1452c:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   14530:	|  |  |         tst.w 6(sp)
   14534:	|  |  |     /-- bne.s 1453a <deleteVarFromStack+0x84>
   14536:	|  |  |     |   moveq #1,d0
   14538:	|  |  |  /--|-- bra.s 1455c <deleteVarFromStack+0xa6>
            reply++;
   1453a:	|  |  |  |  \-> addq.l #1,16(sp)
   1453e:	|  +--|--|----- bra.s 1454e <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   14540:	|  |  \--|----> movea.l 20(sp),a0
   14544:	|  |     |      move.l (a0),d0
   14546:	|  |     |      move.l d0,d1
   14548:	|  |     |      addq.l #8,d1
   1454a:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   1454e:	|  \-----|----> movea.l 20(sp),a0
   14552:	|        |      move.l (a0),d0
   14554:	\--------|----- bne.w 144d2 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   14558:	         |      move.l 16(sp),d0
}
   1455c:	         \----> movea.l (sp)+,a6
   1455e:	                lea 20(sp),sp
   14562:	                rts

00014564 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14564:	       movea.l 4(sp),a0
   14568:	       move.l 4(a0),d0
   1456c:	       cmp.l 8(sp),d0
   14570:	   /-- bhi.s 14576 <fastArrayGetByIndex+0x12>
   14572:	   |   moveq #0,d0
   14574:	/--|-- bra.s 14584 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   14576:	|  \-> movea.l 4(sp),a0
   1457a:	|      move.l (a0),d1
   1457c:	|      move.l 8(sp),d0
   14580:	|      lsl.l #3,d0
   14582:	|      add.l d1,d0
}
   14584:	\----> rts

00014586 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   14586:	                lea -32(sp),sp
   1458a:	                move.l a6,-(sp)
   1458c:	                move.l a2,-(sp)
    struct persona *p = NULL;
   1458e:	                clr.l 36(sp)

    switch (thisVar->varType) {
   14592:	                movea.l 44(sp),a0
   14596:	                move.l (a0),d0
   14598:	                moveq #8,d1
   1459a:	                cmp.l d0,d1
   1459c:	            /-- beq.s 145aa <getCostumeFromVar+0x24>
   1459e:	            |   moveq #9,d1
   145a0:	            |   cmp.l d0,d1
   145a2:	   /--------|-- beq.w 14658 <getCostumeFromVar+0xd2>
   145a6:	/--|--------|-- bra.w 14662 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   145aa:	|  |        \-> moveq #8,d0
   145ac:	|  |            move.l d0,28(sp)
   145b0:	|  |            clr.l 24(sp)
   145b4:	|  |            move.l 1ca88 <SysBase>,d0
   145ba:	|  |            movea.l d0,a6
   145bc:	|  |            move.l 28(sp),d0
   145c0:	|  |            move.l 24(sp),d1
   145c4:	|  |            jsr -684(a6)
   145c8:	|  |            move.l d0,20(sp)
   145cc:	|  |            move.l 20(sp),d0
   145d0:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   145d4:	|  |        /-- bne.s 145dc <getCostumeFromVar+0x56>
   145d6:	|  |        |   moveq #0,d0
   145d8:	|  |  /-----|-- bra.w 1468c <getCostumeFromVar+0x106>
            p->numDirections = 1;
   145dc:	|  |  |     \-> movea.l 36(sp),a0
   145e0:	|  |  |         moveq #1,d1
   145e2:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   145e6:	|  |  |         moveq #12,d0
   145e8:	|  |  |         move.l d0,16(sp)
   145ec:	|  |  |         clr.l 12(sp)
   145f0:	|  |  |         move.l 1ca88 <SysBase>,d0
   145f6:	|  |  |         movea.l d0,a6
   145f8:	|  |  |         move.l 16(sp),d0
   145fc:	|  |  |         move.l 12(sp),d1
   14600:	|  |  |         jsr -684(a6)
   14604:	|  |  |         move.l d0,8(sp)
   14608:	|  |  |         move.l 8(sp),d0
   1460c:	|  |  |         movea.l 36(sp),a0
   14610:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14612:	|  |  |         movea.l 36(sp),a0
   14616:	|  |  |         move.l (a0),d0
   14618:	|  |  |     /-- bne.s 1461e <getCostumeFromVar+0x98>
   1461a:	|  |  |     |   moveq #0,d0
   1461c:	|  |  +-----|-- bra.s 1468c <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   1461e:	|  |  |     \-> clr.l 32(sp)
   14622:	|  |  |     /-- bra.s 1464e <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14624:	|  |  |  /--|-> movea.l 44(sp),a0
   14628:	|  |  |  |  |   move.l 4(a0),d0
   1462c:	|  |  |  |  |   movea.l 36(sp),a0
   14630:	|  |  |  |  |   movea.l (a0),a0
   14632:	|  |  |  |  |   move.l 32(sp),d1
   14636:	|  |  |  |  |   add.l d1,d1
   14638:	|  |  |  |  |   add.l d1,d1
   1463a:	|  |  |  |  |   lea (0,a0,d1.l),a2
   1463e:	|  |  |  |  |   move.l d0,-(sp)
   14640:	|  |  |  |  |   jsr 9640 <copyAnim>
   14646:	|  |  |  |  |   addq.l #4,sp
   14648:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   1464a:	|  |  |  |  |   addq.l #1,32(sp)
   1464e:	|  |  |  |  \-> moveq #2,d1
   14650:	|  |  |  |      cmp.l 32(sp),d1
   14654:	|  |  |  \----- bge.s 14624 <getCostumeFromVar+0x9e>
            }
            break;
   14656:	|  |  |     /-- bra.s 14688 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   14658:	|  \--|-----|-> movea.l 44(sp),a0
   1465c:	|     |     |   move.l 4(a0),d0
   14660:	|     +-----|-- bra.s 1468c <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14662:	\-----|-----|-> movea.l 44(sp),a0
   14666:	      |     |   move.l (a0),d0
   14668:	      |     |   add.l d0,d0
   1466a:	      |     |   movea.l d0,a1
   1466c:	      |     |   adda.l d0,a1
   1466e:	      |     |   lea 1c964 <typeName>,a0
   14674:	      |     |   move.l (0,a1,a0.l),d0
   14678:	      |     |   move.l d0,-(sp)
   1467a:	      |     |   pea 19f7c <graphics.c.1c13408a+0x394>
   14680:	      |     |   jsr 1733a <KPrintF>
   14686:	      |     |   addq.l #8,sp
    }

    return p;
   14688:	      |     \-> move.l 36(sp),d0
}
   1468c:	      \-------> movea.l (sp)+,a2
   1468e:	                movea.l (sp)+,a6
   14690:	                lea 32(sp),sp
   14694:	                rts

00014696 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   14696:	                lea -96(sp),sp
   1469a:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   1469e:	                move.l 116(sp),-(sp)
   146a2:	                pea 19fb4 <graphics.c.1c13408a+0x3cc>
   146a8:	                jsr 13e06 <joinStrings>
   146ae:	                addq.l #8,sp
   146b0:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   146b4:	            /-- bne.s 146bc <getSavedGamesStack+0x26>
   146b6:	            |   clr.w d0
   146b8:	/-----------|-- bra.w 148d0 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   146bc:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   146c0:	|               move.l #106422,98(sp)
   146c8:	|               moveq #-2,d0
   146ca:	|               move.l d0,94(sp)
   146ce:	|               move.l 1ca90 <DOSBase>,d0
   146d4:	|               movea.l d0,a6
   146d6:	|               move.l 98(sp),d1
   146da:	|               move.l 94(sp),d2
   146de:	|               jsr -84(a6)
   146e2:	|               move.l d0,90(sp)
   146e6:	|               move.l 90(sp),d0
   146ea:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   146ee:	|           /-- bne.s 146f6 <getSavedGamesStack+0x60>
   146f0:	|           |   clr.w d0
   146f2:	+-----------|-- bra.w 148d0 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   146f6:	|           \-> move.l #260,82(sp)
   146fe:	|               move.l #65536,78(sp)
   14706:	|               move.l 1ca88 <SysBase>,d0
   1470c:	|               movea.l d0,a6
   1470e:	|               move.l 82(sp),d0
   14712:	|               move.l 78(sp),d1
   14716:	|               jsr -684(a6)
   1471a:	|               move.l d0,74(sp)
   1471e:	|               move.l 74(sp),d0
   14722:	|               move.l d0,70(sp)
	if (!fib) {
   14726:	|           /-- bne.s 14744 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14728:	|           |   move.l 86(sp),22(sp)
   1472e:	|           |   move.l 1ca90 <DOSBase>,d0
   14734:	|           |   movea.l d0,a6
   14736:	|           |   move.l 22(sp),d1
   1473a:	|           |   jsr -90(a6)
		return FALSE;
   1473e:	|           |   clr.w d0
   14740:	+-----------|-- bra.w 148d0 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   14744:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   14748:	|               move.l 86(sp),66(sp)
   1474e:	|               move.l 70(sp),62(sp)
   14754:	|               move.l 1ca90 <DOSBase>,d0
   1475a:	|               movea.l d0,a6
   1475c:	|               move.l 66(sp),d1
   14760:	|               move.l 62(sp),d2
   14764:	|               jsr -102(a6)
   14768:	|               move.l d0,58(sp)
   1476c:	|               move.l 58(sp),d0
   14770:	|  /----------- beq.w 14884 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   14774:	|  |        /-- bra.w 14850 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14778:	|  |  /-----|-> move.l 70(sp),d2
   1477c:	|  |  |     |   addq.l #8,d2
   1477e:	|  |  |     |   move.l 70(sp),d0
   14782:	|  |  |     |   addq.l #8,d0
   14784:	|  |  |     |   move.l d0,-(sp)
   14786:	|  |  |     |   jsr 13dc6 <strlen>
   1478c:	|  |  |     |   addq.l #4,sp
   1478e:	|  |  |     |   move.l d0,d3
   14790:	|  |  |     |   move.l 116(sp),-(sp)
   14794:	|  |  |     |   jsr 13dc6 <strlen>
   1479a:	|  |  |     |   addq.l #4,sp
   1479c:	|  |  |     |   move.l d3,d1
   1479e:	|  |  |     |   sub.l d0,d1
   147a0:	|  |  |     |   move.l d2,d0
   147a2:	|  |  |     |   add.l d1,d0
   147a4:	|  |  |     |   move.l 116(sp),-(sp)
   147a8:	|  |  |     |   move.l d0,-(sp)
   147aa:	|  |  |     |   jsr 13d86 <strcmp>
   147b0:	|  |  |     |   addq.l #8,sp
   147b2:	|  |  |     |   tst.l d0
   147b4:	|  |  |     +-- bne.w 14850 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   147b8:	|  |  |     |   move.l 70(sp),d0
   147bc:	|  |  |     |   addq.l #8,d0
   147be:	|  |  |     |   move.l d0,-(sp)
   147c0:	|  |  |     |   jsr 13dc6 <strlen>
   147c6:	|  |  |     |   addq.l #4,sp
   147c8:	|  |  |     |   move.l d0,d2
   147ca:	|  |  |     |   move.l 116(sp),-(sp)
   147ce:	|  |  |     |   jsr 13dc6 <strlen>
   147d4:	|  |  |     |   addq.l #4,sp
   147d6:	|  |  |     |   move.l d0,d1
   147d8:	|  |  |     |   move.l d2,d0
   147da:	|  |  |     |   sub.l d1,d0
   147dc:	|  |  |     |   movea.l 70(sp),a0
   147e0:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   147e4:	|  |  |     |   move.l 70(sp),d0
   147e8:	|  |  |     |   addq.l #8,d0
   147ea:	|  |  |     |   move.l d0,-(sp)
   147ec:	|  |  |     |   jsr 118 <decodeFilename>
   147f2:	|  |  |     |   addq.l #4,sp
   147f4:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   147f8:	|  |  |     |   move.l 42(sp),-(sp)
   147fc:	|  |  |     |   lea 18(sp),a0
   14800:	|  |  |     |   move.l a0,-(sp)
   14802:	|  |  |     |   jsr 14afc <makeTextVar>
   14808:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   1480a:	|  |  |     |   move.l 42(sp),38(sp)
   14810:	|  |  |     |   move.l 1ca88 <SysBase>,d0
   14816:	|  |  |     |   movea.l d0,a6
   14818:	|  |  |     |   movea.l 38(sp),a1
   1481c:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14820:	|  |  |     |   move.l 112(sp),d0
   14824:	|  |  |     |   move.l d0,-(sp)
   14826:	|  |  |     |   lea 18(sp),a0
   1482a:	|  |  |     |   move.l a0,-(sp)
   1482c:	|  |  |     |   jsr 14116 <addVarToStack>
   14832:	|  |  |     |   addq.l #8,sp
   14834:	|  |  |     |   tst.w d0
   14836:	|  |  |  /--|-- beq.s 14888 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14838:	|  |  |  |  |   movea.l 112(sp),a0
   1483c:	|  |  |  |  |   move.l 4(a0),d0
   14840:	|  |  |  |  +-- bne.s 14850 <getSavedGamesStack+0x1ba>
   14842:	|  |  |  |  |   movea.l 112(sp),a0
   14846:	|  |  |  |  |   move.l (a0),d0
   14848:	|  |  |  |  |   movea.l 112(sp),a0
   1484c:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14850:	|  |  |  |  \-> move.l 86(sp),54(sp)
   14856:	|  |  |  |      move.l 70(sp),50(sp)
   1485c:	|  |  |  |      move.l 1ca90 <DOSBase>,d0
   14862:	|  |  |  |      movea.l d0,a6
   14864:	|  |  |  |      move.l 54(sp),d1
   14868:	|  |  |  |      move.l 50(sp),d2
   1486c:	|  |  |  |      jsr -108(a6)
   14870:	|  |  |  |      move.l d0,46(sp)
   14874:	|  |  |  |      move.l 46(sp),d0
   14878:	|  |  \--|----- bne.w 14778 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   1487c:	|  |     |      move.w #1,106(sp)
   14882:	|  |     |  /-- bra.s 1488a <getSavedGamesStack+0x1f4>
	}

cleanup:
   14884:	|  \-----|--|-> nop
   14886:	|        |  +-- bra.s 1488a <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14888:	|        \--|-> nop
	FreeVec(fib);
   1488a:	|           \-> move.l 70(sp),34(sp)
   14890:	|               move.l 1ca88 <SysBase>,d0
   14896:	|               movea.l d0,a6
   14898:	|               movea.l 34(sp),a1
   1489c:	|               jsr -690(a6)
	UnLock(dirLock);
   148a0:	|               move.l 86(sp),30(sp)
   148a6:	|               move.l 1ca90 <DOSBase>,d0
   148ac:	|               movea.l d0,a6
   148ae:	|               move.l 30(sp),d1
   148b2:	|               jsr -90(a6)
	FreeVec(pattern);
   148b6:	|               move.l 102(sp),26(sp)
   148bc:	|               move.l 1ca88 <SysBase>,d0
   148c2:	|               movea.l d0,a6
   148c4:	|               movea.l 26(sp),a1
   148c8:	|               jsr -690(a6)
	return result;
   148cc:	|               move.w 106(sp),d0
}
   148d0:	\-------------> movem.l (sp)+,d2-d3/a6
   148d4:	                lea 96(sp),sp
   148d8:	                rts

000148da <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   148da:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   148dc:	       movea.l 20(sp),a0
   148e0:	       move.l (a0),d0
   148e2:	       cmp.l 16(sp),d0
   148e6:	/----- beq.s 1494a <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   148e8:	|      move.l 16(sp),d0
   148ec:	|      add.l d0,d0
   148ee:	|      movea.l d0,a1
   148f0:	|      adda.l d0,a1
   148f2:	|      lea 1c964 <typeName>,a0
   148f8:	|      move.l (0,a1,a0.l),d0
   148fc:	|      move.l d0,-(sp)
   148fe:	|      pea 19fb8 <graphics.c.1c13408a+0x3d0>
   14904:	|      jsr 13e06 <joinStrings>
   1490a:	|      addq.l #8,sp
   1490c:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14910:	|      movea.l 20(sp),a0
   14914:	|      move.l (a0),d0
   14916:	|      add.l d0,d0
   14918:	|      movea.l d0,a1
   1491a:	|      adda.l d0,a1
   1491c:	|      lea 1c964 <typeName>,a0
   14922:	|      move.l (0,a1,a0.l),d0
   14926:	|      move.l d0,-(sp)
   14928:	|      pea 19ffa <newfatal.c.307beca7+0x12>
   1492e:	|      jsr 13e06 <joinStrings>
   14934:	|      addq.l #8,sp
   14936:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14938:	|      move.l (sp),-(sp)
   1493a:	|      move.l 8(sp),-(sp)
   1493e:	|      jsr 1733a <KPrintF>
   14944:	|      addq.l #8,sp

		return FALSE;
   14946:	|      clr.w d0
   14948:	|  /-- bra.s 1495a <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   1494a:	\--|-> movea.l 20(sp),a0
   1494e:	   |   move.l 4(a0),d0
   14952:	   |   movea.l 12(sp),a0
   14956:	   |   move.l d0,(a0)
	return TRUE;
   14958:	   |   moveq #1,d0
}
   1495a:	   \-> addq.l #8,sp
   1495c:	       rts

0001495e <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   1495e:	move.l 8(sp),-(sp)
   14962:	jsr 6d12 <getNumberedString>
   14968:	addq.l #4,sp
   1496a:	move.l d0,-(sp)
   1496c:	move.l 8(sp),-(sp)
   14970:	jsr 14afc <makeTextVar>
   14976:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14978:	movea.l 4(sp),a0
   1497c:	move.l 4(a0),d0
   14980:	sne d0
   14982:	neg.b d0
   14984:	move.b d0,d0
   14986:	andi.w #255,d0
}
   1498a:	rts

0001498c <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   1498c:	          subq.l #8,sp
    int size = stackSize(stacky);
   1498e:	          move.l 16(sp),-(sp)
   14992:	          jsr 1523a <stackSize>
   14998:	          addq.l #4,sp
   1499a:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   1499e:	          move.l 4(sp),-(sp)
   149a2:	          move.l 16(sp),-(sp)
   149a6:	          jsr 149f6 <makeFastArraySize>
   149ac:	          addq.l #8,sp
   149ae:	          tst.w d0
   149b0:	      /-- bne.s 149b6 <makeFastArrayFromStack+0x2a>
   149b2:	      |   clr.w d0
   149b4:	/-----|-- bra.s 149f2 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   149b6:	|     \-> movea.l 16(sp),a0
   149ba:	|         move.l (a0),(sp)
    size = 0;
   149bc:	|         clr.l 4(sp)
    while (allV) {
   149c0:	|     /-- bra.s 149ec <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   149c2:	|  /--|-> movea.l 12(sp),a0
   149c6:	|  |  |   movea.l 4(a0),a0
   149ca:	|  |  |   move.l (a0),d1
   149cc:	|  |  |   move.l 4(sp),d0
   149d0:	|  |  |   lsl.l #3,d0
   149d2:	|  |  |   add.l d0,d1
   149d4:	|  |  |   move.l (sp),d0
   149d6:	|  |  |   move.l d1,-(sp)
   149d8:	|  |  |   move.l d0,-(sp)
   149da:	|  |  |   jsr 14c78 <copyMain>
   149e0:	|  |  |   addq.l #8,sp
        size++;
   149e2:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   149e6:	|  |  |   movea.l (sp),a0
   149e8:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   149ec:	|  |  \-> tst.l (sp)
   149ee:	|  \----- bne.s 149c2 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   149f0:	|         moveq #1,d0
}
   149f2:	\-------> addq.l #8,sp
   149f4:	          rts

000149f6 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   149f6:	          lea -28(sp),sp
   149fa:	          move.l a6,-(sp)
    if (size < 0) {
   149fc:	          tst.l 40(sp)
   14a00:	      /-- bge.s 14a16 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14a02:	      |   pea 1a03f <newfatal.c.307beca7+0x57>
   14a08:	      |   jsr 1733a <KPrintF>
   14a0e:	      |   addq.l #4,sp
		return FALSE;
   14a10:	      |   clr.w d0
   14a12:	/-----|-- bra.w 14af4 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14a16:	|     \-> move.l 36(sp),-(sp)
   14a1a:	|         jsr 14b28 <unlinkVar>
   14a20:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14a22:	|         movea.l 36(sp),a0
   14a26:	|         moveq #10,d0
   14a28:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14a2a:	|         moveq #12,d0
   14a2c:	|         move.l d0,24(sp)
   14a30:	|         clr.l 20(sp)
   14a34:	|         move.l 1ca88 <SysBase>,d0
   14a3a:	|         movea.l d0,a6
   14a3c:	|         move.l 24(sp),d0
   14a40:	|         move.l 20(sp),d1
   14a44:	|         jsr -684(a6)
   14a48:	|         move.l d0,16(sp)
   14a4c:	|         move.l 16(sp),d0
   14a50:	|         movea.l 36(sp),a0
   14a54:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14a58:	|         movea.l 36(sp),a0
   14a5c:	|         move.l 4(a0),d0
   14a60:	|     /-- bne.s 14a68 <makeFastArraySize+0x72>
   14a62:	|     |   clr.w d0
   14a64:	+-----|-- bra.w 14af4 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14a68:	|     \-> move.l 40(sp),d0
   14a6c:	|         lsl.l #3,d0
   14a6e:	|         move.l d0,12(sp)
   14a72:	|         clr.l 8(sp)
   14a76:	|         move.l 1ca88 <SysBase>,d0
   14a7c:	|         movea.l d0,a6
   14a7e:	|         move.l 12(sp),d0
   14a82:	|         move.l 8(sp),d1
   14a86:	|         jsr -684(a6)
   14a8a:	|         move.l d0,4(sp)
   14a8e:	|         move.l 4(sp),d0
   14a92:	|         movea.l 36(sp),a0
   14a96:	|         movea.l 4(a0),a0
   14a9a:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14a9c:	|         movea.l 36(sp),a0
   14aa0:	|         movea.l 4(a0),a0
   14aa4:	|         move.l (a0),d0
   14aa6:	|     /-- bne.s 14aac <makeFastArraySize+0xb6>
   14aa8:	|     |   clr.w d0
   14aaa:	+-----|-- bra.s 14af4 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14aac:	|     \-> clr.l 28(sp)
   14ab0:	|     /-- bra.s 14acc <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14ab2:	|  /--|-> movea.l 36(sp),a0
   14ab6:	|  |  |   movea.l 4(a0),a0
   14aba:	|  |  |   move.l (a0),d1
   14abc:	|  |  |   move.l 28(sp),d0
   14ac0:	|  |  |   lsl.l #3,d0
   14ac2:	|  |  |   movea.l d1,a0
   14ac4:	|  |  |   adda.l d0,a0
   14ac6:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   14ac8:	|  |  |   addq.l #1,28(sp)
   14acc:	|  |  \-> move.l 28(sp),d0
   14ad0:	|  |      cmp.l 40(sp),d0
   14ad4:	|  \----- blt.s 14ab2 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14ad6:	|         movea.l 36(sp),a0
   14ada:	|         movea.l 4(a0),a0
   14ade:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14ae4:	|         movea.l 36(sp),a0
   14ae8:	|         movea.l 4(a0),a0
   14aec:	|         moveq #1,d0
   14aee:	|         move.l d0,8(a0)
    return TRUE;
   14af2:	|         moveq #1,d0
}
   14af4:	\-------> movea.l (sp)+,a6
   14af6:	          lea 28(sp),sp
   14afa:	          rts

00014afc <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14afc:	move.l 4(sp),-(sp)
   14b00:	jsr 14b28 <unlinkVar>
   14b06:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14b08:	movea.l 4(sp),a0
   14b0c:	moveq #3,d0
   14b0e:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14b10:	move.l 8(sp),-(sp)
   14b14:	jsr b8 <copyString>
   14b1a:	addq.l #4,sp
   14b1c:	movea.l 4(sp),a0
   14b20:	move.l d0,4(a0)
}
   14b24:	nop
   14b26:	rts

00014b28 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14b28:	                      lea -16(sp),sp
   14b2c:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14b2e:	                      movea.l 24(sp),a0
   14b32:	                      move.l (a0),d0
   14b34:	                      moveq #10,d1
   14b36:	                      cmp.l d0,d1
   14b38:	            /-------- beq.w 14bf0 <unlinkVar+0xc8>
   14b3c:	            |         moveq #10,d1
   14b3e:	            |         cmp.l d0,d1
   14b40:	/-----------|-------- bcs.w 14c64 <unlinkVar+0x13c>
   14b44:	|           |         moveq #8,d1
   14b46:	|           |         cmp.l d0,d1
   14b48:	|  /--------|-------- beq.w 14c50 <unlinkVar+0x128>
   14b4c:	|  |        |         moveq #8,d1
   14b4e:	|  |        |         cmp.l d0,d1
   14b50:	+--|--------|-------- bcs.w 14c64 <unlinkVar+0x13c>
   14b54:	|  |        |         moveq #3,d1
   14b56:	|  |        |         cmp.l d0,d1
   14b58:	|  |        |     /-- beq.s 14b64 <unlinkVar+0x3c>
   14b5a:	|  |        |     |   moveq #6,d1
   14b5c:	|  |        |     |   cmp.l d0,d1
   14b5e:	|  |        |  /--|-- beq.s 14b8a <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14b60:	+--|--------|--|--|-- bra.w 14c64 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14b64:	|  |        |  |  \-> movea.l 24(sp),a0
   14b68:	|  |        |  |      move.l 4(a0),4(sp)
   14b6e:	|  |        |  |      move.l 1ca88 <SysBase>,d0
   14b74:	|  |        |  |      movea.l d0,a6
   14b76:	|  |        |  |      movea.l 4(sp),a1
   14b7a:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14b7e:	|  |        |  |      movea.l 24(sp),a0
   14b82:	|  |        |  |      clr.l 4(a0)
		break;
   14b86:	|  |  /-----|--|----- bra.w 14c6e <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14b8a:	|  |  |     |  \----> movea.l 24(sp),a0
   14b8e:	|  |  |     |         movea.l 4(a0),a0
   14b92:	|  |  |     |         move.l 8(a0),d0
   14b96:	|  |  |     |         subq.l #1,d0
   14b98:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14b9c:	|  |  |     |         movea.l 24(sp),a0
   14ba0:	|  |  |     |         movea.l 4(a0),a0
   14ba4:	|  |  |     |         move.l 8(a0),d0
   14ba8:	|  |  |  /--|-------- bgt.w 14c68 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14bac:	|  |  |  |  |     /-- bra.s 14bc0 <unlinkVar+0x98>
   14bae:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   14bb2:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14bb6:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14bb8:	|  |  |  |  |  |  |   jsr 1525e <trimStack>
   14bbe:	|  |  |  |  |  |  |   addq.l #4,sp
   14bc0:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   14bc4:	|  |  |  |  |  |      movea.l 4(a0),a0
   14bc8:	|  |  |  |  |  |      move.l (a0),d0
   14bca:	|  |  |  |  |  \----- bne.s 14bae <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14bcc:	|  |  |  |  |         movea.l 24(sp),a0
   14bd0:	|  |  |  |  |         move.l 4(a0),8(sp)
   14bd6:	|  |  |  |  |         move.l 1ca88 <SysBase>,d0
   14bdc:	|  |  |  |  |         movea.l d0,a6
   14bde:	|  |  |  |  |         movea.l 8(sp),a1
   14be2:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14be6:	|  |  |  |  |         movea.l 24(sp),a0
   14bea:	|  |  |  |  |         clr.l 4(a0)
		break;
   14bee:	|  |  |  +--|-------- bra.s 14c68 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14bf0:	|  |  |  |  \-------> movea.l 24(sp),a0
   14bf4:	|  |  |  |            movea.l 4(a0),a0
   14bf8:	|  |  |  |            move.l 8(a0),d0
   14bfc:	|  |  |  |            subq.l #1,d0
   14bfe:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14c02:	|  |  |  |            movea.l 24(sp),a0
   14c06:	|  |  |  |            movea.l 4(a0),a0
   14c0a:	|  |  |  |            move.l 8(a0),d0
   14c0e:	|  |  |  |        /-- bgt.s 14c6c <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14c10:	|  |  |  |        |   movea.l 24(sp),a0
   14c14:	|  |  |  |        |   movea.l 4(a0),a0
   14c18:	|  |  |  |        |   move.l (a0),16(sp)
   14c1c:	|  |  |  |        |   move.l 1ca88 <SysBase>,d0
   14c22:	|  |  |  |        |   movea.l d0,a6
   14c24:	|  |  |  |        |   movea.l 16(sp),a1
   14c28:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14c2c:	|  |  |  |        |   movea.l 24(sp),a0
   14c30:	|  |  |  |        |   move.l 4(a0),12(sp)
   14c36:	|  |  |  |        |   move.l 1ca88 <SysBase>,d0
   14c3c:	|  |  |  |        |   movea.l d0,a6
   14c3e:	|  |  |  |        |   movea.l 12(sp),a1
   14c42:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14c46:	|  |  |  |        |   movea.l 24(sp),a0
   14c4a:	|  |  |  |        |   clr.l 4(a0)
		break;
   14c4e:	|  |  |  |        +-- bra.s 14c6c <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14c50:	|  \--|--|--------|-> movea.l 24(sp),a0
   14c54:	|     |  |        |   move.l 4(a0),d0
   14c58:	|     |  |        |   move.l d0,-(sp)
   14c5a:	|     |  |        |   jsr 9a0c <deleteAnim>
   14c60:	|     |  |        |   addq.l #4,sp
		break;
   14c62:	|     +--|--------|-- bra.s 14c6e <unlinkVar+0x146>
		break;
   14c64:	\-----|--|--------|-> nop
   14c66:	      +--|--------|-- bra.s 14c6e <unlinkVar+0x146>
		break;
   14c68:	      |  \--------|-> nop
   14c6a:	      +-----------|-- bra.s 14c6e <unlinkVar+0x146>
		break;
   14c6c:	      |           \-> nop
	}
}
   14c6e:	      \-------------> nop
   14c70:	                      movea.l (sp)+,a6
   14c72:	                      lea 16(sp),sp
   14c76:	                      rts

00014c78 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14c78:	       movea.l 4(sp),a0
   14c7c:	       move.l (a0),d0
   14c7e:	       movea.l 8(sp),a0
   14c82:	       move.l d0,(a0)
	switch (to->varType) {
   14c84:	       movea.l 8(sp),a0
   14c88:	       move.l (a0),d0
   14c8a:	       moveq #10,d1
   14c8c:	       cmp.l d0,d1
   14c8e:	/----- bcs.w 14d80 <copyMain+0x108>
   14c92:	|      add.l d0,d0
   14c94:	|      movea.l d0,a0
   14c96:	|      adda.l #85154,a0
   14c9c:	|      move.w (a0),d0
   14c9e:	|      jmp (14ca2 <copyMain+0x2a>,pc,d0.w)
   14ca2:	|      .short 0x00da
   14ca4:	|      ori.b #22,(a6)
   14ca8:	|      ori.w #22,(a4)
   14cac:	|      ori.b #-126,(a6)
   14cb0:	|      ori.b #-68,(a6)
   14cb4:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14cbc:	|      move.l 4(a0),d0
   14cc0:	|      movea.l 8(sp),a0
   14cc4:	|      move.l d0,4(a0)
		return TRUE;
   14cc8:	|      moveq #1,d0
   14cca:	|  /-- bra.w 14d92 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14cce:	|  |   movea.l 4(sp),a0
   14cd2:	|  |   move.l 4(a0),d0
   14cd6:	|  |   movea.l 8(sp),a0
   14cda:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14cde:	|  |   movea.l 8(sp),a0
   14ce2:	|  |   movea.l 4(a0),a0
   14ce6:	|  |   move.l 8(a0),d0
   14cea:	|  |   addq.l #1,d0
   14cec:	|  |   move.l d0,8(a0)
		return TRUE;
   14cf0:	|  |   moveq #1,d0
   14cf2:	|  +-- bra.w 14d92 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14cf6:	|  |   movea.l 4(sp),a0
   14cfa:	|  |   move.l 4(a0),d0
   14cfe:	|  |   move.l d0,-(sp)
   14d00:	|  |   jsr b8 <copyString>
   14d06:	|  |   addq.l #4,sp
   14d08:	|  |   movea.l 8(sp),a0
   14d0c:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14d10:	|  |   movea.l 8(sp),a0
   14d14:	|  |   move.l 4(a0),d0
   14d18:	|  |   sne d0
   14d1a:	|  |   neg.b d0
   14d1c:	|  |   move.b d0,d0
   14d1e:	|  |   andi.w #255,d0
   14d22:	|  +-- bra.s 14d92 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14d24:	|  |   movea.l 4(sp),a0
   14d28:	|  |   move.l 4(a0),d0
   14d2c:	|  |   movea.l 8(sp),a0
   14d30:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14d34:	|  |   movea.l 8(sp),a0
   14d38:	|  |   movea.l 4(a0),a0
   14d3c:	|  |   move.l 8(a0),d0
   14d40:	|  |   addq.l #1,d0
   14d42:	|  |   move.l d0,8(a0)
		return TRUE;
   14d46:	|  |   moveq #1,d0
   14d48:	|  +-- bra.s 14d92 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14d4a:	|  |   movea.l 4(sp),a0
   14d4e:	|  |   move.l 4(a0),d0
   14d52:	|  |   movea.l 8(sp),a0
   14d56:	|  |   move.l d0,4(a0)
		return TRUE;
   14d5a:	|  |   moveq #1,d0
   14d5c:	|  +-- bra.s 14d92 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14d5e:	|  |   movea.l 4(sp),a0
   14d62:	|  |   move.l 4(a0),d0
   14d66:	|  |   move.l d0,-(sp)
   14d68:	|  |   jsr 9640 <copyAnim>
   14d6e:	|  |   addq.l #4,sp
   14d70:	|  |   movea.l 8(sp),a0
   14d74:	|  |   move.l d0,4(a0)
		return TRUE;
   14d78:	|  |   moveq #1,d0
   14d7a:	|  +-- bra.s 14d92 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14d7c:	|  |   moveq #1,d0
   14d7e:	|  +-- bra.s 14d92 <copyMain+0x11a>

		default:
		break;
   14d80:	\--|-> nop
	}
	KPrintF("Unknown value type");
   14d82:	   |   pea 1a090 <newfatal.c.307beca7+0xa8>
   14d88:	   |   jsr 1733a <KPrintF>
   14d8e:	   |   addq.l #4,sp
	return FALSE;
   14d90:	   |   clr.w d0
}
   14d92:	   \-> rts

00014d94 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14d94:	move.l 8(sp),-(sp)
   14d98:	jsr 14b28 <unlinkVar>
   14d9e:	addq.l #4,sp
	return copyMain(from, to);
   14da0:	move.l 8(sp),-(sp)
   14da4:	move.l 8(sp),-(sp)
   14da8:	jsr 14c78 <copyMain>
   14dae:	addq.l #8,sp
}
   14db0:	rts

00014db2 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14db2:	       movea.l 4(sp),a0
   14db6:	       move.l (a0),d0
   14db8:	       moveq #8,d1
   14dba:	       cmp.l d0,d1
   14dbc:	   /-- bne.s 14dd2 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14dbe:	   |   movea.l 4(sp),a0
   14dc2:	   |   move.l 4(a0),d0
   14dc6:	   |   move.l d0,-(sp)
   14dc8:	   |   jsr 9640 <copyAnim>
   14dce:	   |   addq.l #4,sp
   14dd0:	/--|-- bra.s 14e18 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14dd2:	|  \-> movea.l 4(sp),a0
   14dd6:	|      move.l (a0),d0
   14dd8:	|      moveq #1,d1
   14dda:	|      cmp.l d0,d1
   14ddc:	|  /-- bne.s 14df0 <getAnimationFromVar+0x3e>
   14dde:	|  |   movea.l 4(sp),a0
   14de2:	|  |   move.l 4(a0),d0
   14de6:	|  +-- bne.s 14df0 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14de8:	|  |   jsr ae10 <makeNullAnim>
   14dee:	+--|-- bra.s 14e18 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14df0:	|  \-> movea.l 4(sp),a0
   14df4:	|      move.l (a0),d0
   14df6:	|      add.l d0,d0
   14df8:	|      movea.l d0,a1
   14dfa:	|      adda.l d0,a1
   14dfc:	|      lea 1c964 <typeName>,a0
   14e02:	|      move.l (0,a1,a0.l),d0
   14e06:	|      move.l d0,-(sp)
   14e08:	|      pea 19f7c <graphics.c.1c13408a+0x394>
   14e0e:	|      jsr 1733a <KPrintF>
   14e14:	|      addq.l #8,sp
	return NULL;
   14e16:	|      moveq #0,d0
}
   14e18:	\----> rts

00014e1a <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14e1a:	       movea.l 4(sp),a0
   14e1e:	       move.l (a0),d0
   14e20:	       moveq #10,d1
   14e22:	       cmp.l d0,d1
   14e24:	/----- bcs.w 14eaa <getBoolean+0x90>
   14e28:	|      add.l d0,d0
   14e2a:	|      movea.l d0,a0
   14e2c:	|      adda.l #85560,a0
   14e32:	|      move.w (a0),d0
   14e34:	|      jmp (14e38 <getBoolean+0x1e>,pc,d0.w)
   14e38:	|      ori.b #26,(a6)
   14e3c:	|      ori.w #68,(114,a2,d0.w)
   14e42:	|      ori.w #46,(114,a2,d0.w)
   14e48:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14e4e:	|      clr.w d0
   14e50:	|  /-- bra.s 14eae <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14e52:	|  |   movea.l 4(sp),a0
   14e56:	|  |   move.l 4(a0),d0
   14e5a:	|  |   sne d0
   14e5c:	|  |   neg.b d0
   14e5e:	|  |   move.b d0,d0
   14e60:	|  |   andi.w #255,d0
   14e64:	|  +-- bra.s 14eae <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14e66:	|  |   movea.l 4(sp),a0
   14e6a:	|  |   movea.l 4(a0),a0
   14e6e:	|  |   move.l (a0),d0
   14e70:	|  |   sne d0
   14e72:	|  |   neg.b d0
   14e74:	|  |   move.b d0,d0
   14e76:	|  |   andi.w #255,d0
   14e7a:	|  +-- bra.s 14eae <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14e7c:	|  |   movea.l 4(sp),a0
   14e80:	|  |   movea.l 4(a0),a0
   14e84:	|  |   move.b (a0),d0
   14e86:	|  |   sne d0
   14e88:	|  |   neg.b d0
   14e8a:	|  |   move.b d0,d0
   14e8c:	|  |   andi.w #255,d0
   14e90:	|  +-- bra.s 14eae <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14e92:	|  |   movea.l 4(sp),a0
   14e96:	|  |   movea.l 4(a0),a0
   14e9a:	|  |   move.l 4(a0),d0
   14e9e:	|  |   sne d0
   14ea0:	|  |   neg.b d0
   14ea2:	|  |   move.b d0,d0
   14ea4:	|  |   andi.w #255,d0
   14ea8:	|  +-- bra.s 14eae <getBoolean+0x94>

		default:
		break;
   14eaa:	\--|-> nop
	}
	return TRUE;
   14eac:	   |   moveq #1,d0
}
   14eae:	   \-> rts

00014eb0 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14eb0:	      /----------> lea -76(sp),sp
   14eb4:	      |            move.l a6,-(sp)
	switch (from->varType) {
   14eb6:	      |            movea.l 84(sp),a0
   14eba:	      |            move.l (a0),d0
   14ebc:	      |            moveq #10,d1
   14ebe:	      |            cmp.l d0,d1
   14ec0:	/-----|----------- bcs.w 1515e <getTextFromAnyVar+0x2ae>
   14ec4:	|     |            add.l d0,d0
   14ec6:	|     |            movea.l d0,a0
   14ec8:	|     |            adda.l #85716,a0
   14ece:	|     |            move.w (a0),d0
   14ed0:	|     |            jmp (14ed4 <getTextFromAnyVar+0x24>,pc,d0.w)
   14ed4:	|     |            .short 0x028a
   14ed6:	|     |            bset d0,(a0)+
   14ed8:	|     |            .short 0x028a
   14eda:	|     |            ori.b #-118,(a6)
   14ede:	|     |            andi.b #8,ccr
   14ee2:	|     |            andi.w #650,-(a0)
   14ee6:	|     |            .short 0x028a
   14ee8:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14eee:	|     |            move.l 4(a0),d0
   14ef2:	|     |            move.l d0,-(sp)
   14ef4:	|     |            jsr b8 <copyString>
   14efa:	|     |            addq.l #4,sp
   14efc:	|  /--|----------- bra.w 15180 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14f00:	|  |  |            pea 1a0a3 <newfatal.c.307beca7+0xbb>
   14f06:	|  |  |            jsr b8 <copyString>
   14f0c:	|  |  |            addq.l #4,sp
   14f0e:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14f12:	|  |  |            clr.l 72(sp)
   14f16:	|  |  |     /----- bra.w 14fc0 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   14f1a:	|  |  |  /--|----> pea 1a0a9 <newfatal.c.307beca7+0xc1>
   14f20:	|  |  |  |  |      move.l 80(sp),-(sp)
   14f24:	|  |  |  |  |      jsr 13e06 <joinStrings>
   14f2a:	|  |  |  |  |      addq.l #8,sp
   14f2c:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   14f30:	|  |  |  |  |  /-- bne.s 14f38 <getTextFromAnyVar+0x88>
   14f32:	|  |  |  |  |  |   moveq #0,d0
   14f34:	|  +--|--|--|--|-- bra.w 15180 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   14f38:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   14f3e:	|  |  |  |  |      move.l 1ca88 <SysBase>,d0
   14f44:	|  |  |  |  |      movea.l d0,a6
   14f46:	|  |  |  |  |      movea.l 56(sp),a1
   14f4a:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   14f4e:	|  |  |  |  |      movea.l 84(sp),a0
   14f52:	|  |  |  |  |      movea.l 4(a0),a0
   14f56:	|  |  |  |  |      move.l (a0),d1
   14f58:	|  |  |  |  |      move.l 72(sp),d0
   14f5c:	|  |  |  |  |      lsl.l #3,d0
   14f5e:	|  |  |  |  |      add.l d1,d0
   14f60:	|  |  |  |  |      move.l d0,-(sp)
   14f62:	|  |  +--|--|----- jsr 14eb0 <getTextFromAnyVar>(pc)
   14f66:	|  |  |  |  |      addq.l #4,sp
   14f68:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   14f6c:	|  |  |  |  |      move.l 52(sp),-(sp)
   14f70:	|  |  |  |  |      move.l 64(sp),-(sp)
   14f74:	|  |  |  |  |      jsr 13e06 <joinStrings>
   14f7a:	|  |  |  |  |      addq.l #8,sp
   14f7c:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14f80:	|  |  |  |  |  /-- bne.s 14f88 <getTextFromAnyVar+0xd8>
   14f82:	|  |  |  |  |  |   moveq #0,d0
   14f84:	|  +--|--|--|--|-- bra.w 15180 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   14f88:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14f8e:	|  |  |  |  |      move.l 1ca88 <SysBase>,d0
   14f94:	|  |  |  |  |      movea.l d0,a6
   14f96:	|  |  |  |  |      movea.l 48(sp),a1
   14f9a:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14f9e:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14fa2:	|  |  |  |  |      move.l 60(sp),44(sp)
   14fa8:	|  |  |  |  |      move.l 1ca88 <SysBase>,d0
   14fae:	|  |  |  |  |      movea.l d0,a6
   14fb0:	|  |  |  |  |      movea.l 44(sp),a1
   14fb4:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   14fb8:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14fbc:	|  |  |  |  |      addq.l #1,72(sp)
   14fc0:	|  |  |  |  \----> movea.l 84(sp),a0
   14fc4:	|  |  |  |         movea.l 4(a0),a0
   14fc8:	|  |  |  |         move.l 4(a0),d0
   14fcc:	|  |  |  |         cmp.l 72(sp),d0
   14fd0:	|  |  |  \-------- bgt.w 14f1a <getTextFromAnyVar+0x6a>
			}
			return builder;
   14fd4:	|  |  |            move.l 76(sp),d0
   14fd8:	|  +--|----------- bra.w 15180 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14fdc:	|  |  |            pea 1a0ab <newfatal.c.307beca7+0xc3>
   14fe2:	|  |  |            jsr b8 <copyString>
   14fe8:	|  |  |            addq.l #4,sp
   14fea:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14fee:	|  |  |            movea.l 84(sp),a0
   14ff2:	|  |  |            movea.l 4(a0),a0
   14ff6:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14ffa:	|  |  |     /----- bra.w 1509c <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14ffe:	|  |  |  /--|----> pea 1a0a9 <newfatal.c.307beca7+0xc1>
   15004:	|  |  |  |  |      move.l 72(sp),-(sp)
   15008:	|  |  |  |  |      jsr 13e06 <joinStrings>
   1500e:	|  |  |  |  |      addq.l #8,sp
   15010:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   15014:	|  |  |  |  |  /-- bne.s 1501c <getTextFromAnyVar+0x16c>
   15016:	|  |  |  |  |  |   moveq #0,d0
   15018:	|  +--|--|--|--|-- bra.w 15180 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1501c:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   15022:	|  |  |  |  |      move.l 1ca88 <SysBase>,d0
   15028:	|  |  |  |  |      movea.l d0,a6
   1502a:	|  |  |  |  |      movea.l 32(sp),a1
   1502e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   15032:	|  |  |  |  |      move.l 64(sp),d0
   15036:	|  |  |  |  |      move.l d0,-(sp)
   15038:	|  |  \--|--|----- jsr 14eb0 <getTextFromAnyVar>(pc)
   1503c:	|  |     |  |      addq.l #4,sp
   1503e:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   15042:	|  |     |  |      move.l 28(sp),-(sp)
   15046:	|  |     |  |      move.l 40(sp),-(sp)
   1504a:	|  |     |  |      jsr 13e06 <joinStrings>
   15050:	|  |     |  |      addq.l #8,sp
   15052:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   15056:	|  |     |  |  /-- bne.s 1505e <getTextFromAnyVar+0x1ae>
   15058:	|  |     |  |  |   moveq #0,d0
   1505a:	|  +-----|--|--|-- bra.w 15180 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1505e:	|  |     |  |  \-> move.l 28(sp),24(sp)
   15064:	|  |     |  |      move.l 1ca88 <SysBase>,d0
   1506a:	|  |     |  |      movea.l d0,a6
   1506c:	|  |     |  |      movea.l 24(sp),a1
   15070:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   15074:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   15078:	|  |     |  |      move.l 36(sp),20(sp)
   1507e:	|  |     |  |      move.l 1ca88 <SysBase>,d0
   15084:	|  |     |  |      movea.l d0,a6
   15086:	|  |     |  |      movea.l 20(sp),a1
   1508a:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   1508e:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   15092:	|  |     |  |      movea.l 64(sp),a0
   15096:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   1509c:	|  |     |  \----> tst.l 64(sp)
   150a0:	|  |     \-------- bne.w 14ffe <getTextFromAnyVar+0x14e>
			}
			return builder;
   150a4:	|  |               move.l 68(sp),d0
   150a8:	|  +-------------- bra.w 15180 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   150ac:	|  |               moveq #10,d0
   150ae:	|  |               move.l d0,16(sp)
   150b2:	|  |               clr.l 12(sp)
   150b6:	|  |               move.l 1ca88 <SysBase>,d0
   150bc:	|  |               movea.l d0,a6
   150be:	|  |               move.l 16(sp),d0
   150c2:	|  |               move.l 12(sp),d1
   150c6:	|  |               jsr -684(a6)
   150ca:	|  |               move.l d0,8(sp)
   150ce:	|  |               move.l 8(sp),d0
   150d2:	|  |               move.l d0,4(sp)
			if (! buff) {
   150d6:	|  |           /-- bne.s 150ec <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   150d8:	|  |           |   pea 1a0b2 <newfatal.c.307beca7+0xca>
   150de:	|  |           |   jsr 1733a <KPrintF>
   150e4:	|  |           |   addq.l #4,sp
				return NULL;
   150e6:	|  |           |   moveq #0,d0
   150e8:	|  +-----------|-- bra.w 15180 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   150ec:	|  |           \-> movea.l 84(sp),a0
   150f0:	|  |               move.l 4(a0),d0
   150f4:	|  |               move.l d0,-(sp)
   150f6:	|  |               pea 1a0dc <newfatal.c.307beca7+0xf4>
   150fc:	|  |               move.l 12(sp),-(sp)
   15100:	|  |               jsr 140e4 <sprintf>
   15106:	|  |               lea 12(sp),sp
			return buff;
   1510a:	|  |               move.l 4(sp),d0
   1510e:	|  +-------------- bra.s 15180 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   15110:	|  |               movea.l 84(sp),a0
   15114:	|  |               move.l 4(a0),d0
   15118:	|  |               move.l d0,-(sp)
   1511a:	|  |               jsr 4192 <resourceNameFromNum>
   15120:	|  |               addq.l #4,sp
   15122:	|  |               move.l d0,-(sp)
   15124:	|  |               pea 18ab1 <PutChar+0xcd5>
   1512a:	|  |               jsr 13e06 <joinStrings>
   15130:	|  |               addq.l #8,sp
   15132:	|  +-------------- bra.s 15180 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   15134:	|  |               movea.l 84(sp),a0
   15138:	|  |               move.l 4(a0),d0
   1513c:	|  |               move.l d0,-(sp)
   1513e:	|  |               jsr d624 <findObjectType>
   15144:	|  |               addq.l #4,sp
   15146:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   1514a:	+--|-------------- beq.s 1515e <getTextFromAnyVar+0x2ae>
   1514c:	|  |               movea.l 40(sp),a0
   15150:	|  |               move.l (a0),d0
   15152:	|  |               move.l d0,-(sp)
   15154:	|  |               jsr b8 <copyString>
   1515a:	|  |               addq.l #4,sp
   1515c:	|  +-------------- bra.s 15180 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   1515e:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   15160:	   |               movea.l 84(sp),a0
   15164:	   |               move.l (a0),d0
   15166:	   |               add.l d0,d0
   15168:	   |               movea.l d0,a1
   1516a:	   |               adda.l d0,a1
   1516c:	   |               lea 1c964 <typeName>,a0
   15172:	   |               move.l (0,a1,a0.l),d0
   15176:	   |               move.l d0,-(sp)
   15178:	   |               jsr b8 <copyString>
   1517e:	   |               addq.l #4,sp
}
   15180:	   \-------------> movea.l (sp)+,a6
   15182:	                   lea 76(sp),sp
   15186:	                   rts

00015188 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   15188:	move.l 4(sp),-(sp)
   1518c:	jsr 14b28 <unlinkVar>
   15192:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   15194:	movea.l 4(sp),a0
   15198:	moveq #8,d0
   1519a:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   1519c:	movea.l 4(sp),a0
   151a0:	move.l 8(sp),4(a0)
}
   151a6:	nop
   151a8:	rts

000151aa <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   151aa:	move.l 4(sp),-(sp)
   151ae:	jsr 14b28 <unlinkVar>
   151b4:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   151b6:	movea.l 4(sp),a0
   151ba:	moveq #9,d0
   151bc:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   151be:	movea.l 4(sp),a0
   151c2:	move.l 8(sp),4(a0)
}
   151c8:	nop
   151ca:	rts

000151cc <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   151cc:	move.l 4(sp),-(sp)
   151d0:	jsr 14b28 <unlinkVar>
   151d6:	addq.l #4,sp
	thisVar->varType = vT;
   151d8:	movea.l 4(sp),a0
   151dc:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   151e0:	movea.l 4(sp),a0
   151e4:	move.l 12(sp),4(a0)
}
   151ea:	nop
   151ec:	rts

000151ee <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   151ee:	      /-- bra.s 15200 <stackGetByIndex+0x12>
        vS = vS->next;
   151f0:	/-----|-> movea.l 4(sp),a0
   151f4:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   151fa:	|     +-- bne.s 15200 <stackGetByIndex+0x12>
            return NULL;
   151fc:	|     |   moveq #0,d0
   151fe:	|  /--|-- bra.s 15214 <stackGetByIndex+0x26>
    while (theIndex--) {
   15200:	|  |  \-> move.l 8(sp),d0
   15204:	|  |      move.l d0,d1
   15206:	|  |      subq.l #1,d1
   15208:	|  |      move.l d1,8(sp)
   1520c:	|  |      tst.l d0
   1520e:	\--|----- bne.s 151f0 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   15210:	   |      move.l 4(sp),d0
}
   15214:	   \----> rts

00015216 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   15216:	          tst.l 4(sp)
   1521a:	      /-- bne.s 1522a <stackFindLast+0x14>
		return NULL;
   1521c:	      |   moveq #0,d0
   1521e:	/-----|-- bra.s 15238 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   15220:	|  /--|-> movea.l 4(sp),a0
   15224:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   1522a:	|  |  \-> movea.l 4(sp),a0
   1522e:	|  |      move.l 8(a0),d0
   15232:	|  \----- bne.s 15220 <stackFindLast+0xa>

	return hunt;
   15234:	|         move.l 4(sp),d0
}
   15238:	\-------> rts

0001523a <stackSize>:

int stackSize (const struct stackHandler * me) {
   1523a:	       subq.l #8,sp
	int r = 0;
   1523c:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   15240:	       movea.l 12(sp),a0
   15244:	       move.l (a0),(sp)
	while (a) {
   15246:	   /-- bra.s 15252 <stackSize+0x18>
		r ++;
   15248:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   1524c:	|  |   movea.l (sp),a0
   1524e:	|  |   move.l 8(a0),(sp)
	while (a) {
   15252:	|  \-> tst.l (sp)
   15254:	\----- bne.s 15248 <stackSize+0xe>
	}
	return r;
   15256:	       move.l 4(sp),d0
}
   1525a:	       addq.l #8,sp
   1525c:	       rts

0001525e <trimStack>:

void trimStack (struct variableStack ** stack) {
   1525e:	subq.l #8,sp
   15260:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   15262:	movea.l 16(sp),a0
   15266:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   1526a:	movea.l 16(sp),a0
   1526e:	movea.l (a0),a0
   15270:	move.l 8(a0),d0
   15274:	movea.l 16(sp),a0
   15278:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   1527a:	move.l 8(sp),d0
   1527e:	move.l d0,-(sp)
   15280:	jsr 14b28 <unlinkVar>
   15286:	addq.l #4,sp
	FreeVec(killMe);
   15288:	move.l 8(sp),4(sp)
   1528e:	move.l 1ca88 <SysBase>,d0
   15294:	movea.l d0,a6
   15296:	movea.l 4(sp),a1
   1529a:	jsr -690(a6)
   1529e:	nop
   152a0:	movea.l (sp)+,a6
   152a2:	addq.l #8,sp
   152a4:	rts

000152a6 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   152a6:	       lea -52(sp),sp
   152aa:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   152ac:	       pea 1a0df <newfatal.c.307beca7+0xf7>
   152b2:	       jsr 1733a <KPrintF>
   152b8:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   152ba:	       moveq #68,d0
   152bc:	       move.l d0,52(sp)
   152c0:	       clr.l 48(sp)
   152c4:	       move.l 1ca88 <SysBase>,d0
   152ca:	       movea.l d0,a6
   152cc:	       move.l 52(sp),d0
   152d0:	       move.l 48(sp),d1
   152d4:	       jsr -684(a6)
   152d8:	       move.l d0,44(sp)
   152dc:	       move.l 44(sp),d0
   152e0:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   152e4:	   /-- bne.s 152ec <freeze+0x46>
   152e6:	   |   clr.w d0
   152e8:	/--|-- bra.w 15476 <freeze+0x1d0>

	CstFreeze();
   152ec:	|  \-> jsr 1d3a <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   152f2:	|      move.l 1cb24 <sceneWidth>,d0
   152f8:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   152fc:	|      move.l 1cb28 <sceneHeight>,d0
   15302:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   15306:	|      move.l 1cb24 <sceneWidth>,d0
   1530c:	|      movea.l 40(sp),a0
   15310:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   15314:	|      move.l 1cb28 <sceneHeight>,d0
   1531a:	|      movea.l 40(sp),a0
   1531e:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   15322:	|      move.l 1cb42 <cameraX>,d0
   15328:	|      movea.l 40(sp),a0
   1532c:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   15330:	|      move.l 1cb46 <cameraY>,d0
   15336:	|      movea.l 40(sp),a0
   1533a:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   1533e:	|      move.l 1c426 <cameraZoom>,d0
   15344:	|      movea.l 40(sp),a0
   15348:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   1534c:	|      move.w #1,1cb30 <backdropExists>

	newFreezer -> allPeople = allPeople;
   15354:	|      move.l 1caec <allPeople>,d0
   1535a:	|      movea.l 40(sp),a0
   1535e:	|      move.l d0,(a0)
	allPeople = NULL;
   15360:	|      clr.l 1caec <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   15366:	|      moveq #42,d0
   15368:	|      move.l d0,28(sp)
   1536c:	|      clr.l 24(sp)
   15370:	|      move.l 1ca88 <SysBase>,d0
   15376:	|      movea.l d0,a6
   15378:	|      move.l 28(sp),d0
   1537c:	|      move.l 24(sp),d1
   15380:	|      jsr -684(a6)
   15384:	|      move.l d0,20(sp)
   15388:	|      move.l 20(sp),d0
   1538c:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   15390:	|  /-- bne.s 15398 <freeze+0xf2>
   15392:	|  |   clr.w d0
   15394:	+--|-- bra.w 15476 <freeze+0x1d0>

	newFreezer -> allScreenRegions = allScreenRegions;
   15398:	|  \-> move.l 1cb98 <allScreenRegions>,d0
   1539e:	|      movea.l 40(sp),a0
   153a2:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   153a6:	|      clr.l 1cb98 <allScreenRegions>
	overRegion = NULL;
   153ac:	|      clr.l 1cb9c <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   153b2:	|      move.l 1c98e <mouseCursorAnim>,d0
   153b8:	|      movea.l 40(sp),a0
   153bc:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   153c0:	|      move.l 1c992 <mouseCursorFrameNum>,d0
   153c6:	|      movea.l 40(sp),a0
   153ca:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   153ce:	|      jsr ae10 <makeNullAnim>
   153d4:	|      move.l d0,1c98e <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   153da:	|      clr.l 1c992 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   153e0:	|      move.l 1cae8 <zBuffer>,d0
   153e6:	|      movea.l 40(sp),a0
   153ea:	|      move.l d0,60(a0)
	zBuffer = NULL;
   153ee:	|      clr.l 1cae8 <zBuffer>

	newFreezer -> speech = speech;
   153f4:	|      move.l 1cae4 <speech>,d0
   153fa:	|      movea.l 40(sp),a0
   153fe:	|      move.l d0,20(a0)
	initSpeech ();
   15402:	|      jsr 7f3e <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   15408:	|      moveq #28,d0
   1540a:	|      move.l d0,12(sp)
   1540e:	|      clr.l 8(sp)
   15412:	|      move.l 1ca88 <SysBase>,d0
   15418:	|      movea.l d0,a6
   1541a:	|      move.l 12(sp),d0
   1541e:	|      move.l 8(sp),d1
   15422:	|      jsr -684(a6)
   15426:	|      move.l d0,4(sp)
   1542a:	|      move.l 4(sp),d0
   1542e:	|      movea.l 40(sp),a0
   15432:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   15436:	|      movea.l 40(sp),a0
   1543a:	|      move.l 28(a0),d0
   1543e:	|  /-- bne.s 15444 <freeze+0x19e>
   15440:	|  |   clr.w d0
   15442:	+--|-- bra.s 15476 <freeze+0x1d0>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   15444:	|  \-> movea.l 40(sp),a0
   15448:	|      move.l 28(a0),d0
   1544c:	|      pea 1c <_start+0x1c>
   15450:	|      clr.l -(sp)
   15452:	|      move.l d0,-(sp)
   15454:	|      jsr 172be <memset>
   1545a:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   1545e:	|      move.l 1cb7c <frozenStuff>,d0
   15464:	|      movea.l 40(sp),a0
   15468:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   1546c:	|      move.l 40(sp),1cb7c <frozenStuff>

	return TRUE;
   15474:	|      moveq #1,d0
}
   15476:	\----> movea.l (sp)+,a6
   15478:	       lea 52(sp),sp
   1547c:	       rts

0001547e <howFrozen>:

int howFrozen () {
   1547e:	       subq.l #8,sp
	int a = 0;
   15480:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   15484:	       move.l 1cb7c <frozenStuff>,(sp)
	while (f) {
   1548a:	   /-- bra.s 15496 <howFrozen+0x18>
		a ++;
   1548c:	/--|-> addq.l #1,4(sp)
		f = f -> next;
   15490:	|  |   movea.l (sp),a0
   15492:	|  |   move.l 64(a0),(sp)
	while (f) {
   15496:	|  \-> tst.l (sp)
   15498:	\----- bne.s 1548c <howFrozen+0xe>
	}
	return a;
   1549a:	       move.l 4(sp),d0
}
   1549e:	       addq.l #8,sp
   154a0:	       rts

000154a2 <unfreeze>:

void unfreeze () {
   154a2:	       lea -16(sp),sp
   154a6:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   154a8:	       move.l 1cb7c <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   154b0:	       move.l 1cb7c <frozenStuff>,d0
   154b6:	/----- beq.w 156ee <unfreeze+0x24c>

	CstUnfreeze();
   154ba:	|      jsr 3d8a <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   154c0:	|      movea.l 1cb7c <frozenStuff>,a0
   154c6:	|      move.l 48(a0),d0
   154ca:	|      move.l d0,1cb24 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   154d0:	|      movea.l 1cb7c <frozenStuff>,a0
   154d6:	|      move.l 52(a0),d0
   154da:	|      move.l d0,1cb28 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   154e0:	|      movea.l 1cb7c <frozenStuff>,a0
   154e6:	|      move.l 40(a0),d0
   154ea:	|      move.l d0,1cb42 <cameraX>
	cameraY = frozenStuff -> cameraY;
   154f0:	|      movea.l 1cb7c <frozenStuff>,a0
   154f6:	|      move.l 44(a0),d0
   154fa:	|      move.l d0,1cb46 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   15500:	|      move.l 1ca44 <input+0xa>,d0
   15506:	|      move.l d0,-(sp)
   15508:	|      jsr 1776c <__floatsisf>
   1550e:	|      addq.l #4,sp
   15510:	|      move.l d0,d1
   15512:	|      move.l 1c426 <cameraZoom>,d0
   15518:	|      move.l d0,-(sp)
   1551a:	|      move.l d1,-(sp)
   1551c:	|      jsr 1781e <__mulsf3>
   15522:	|      addq.l #8,sp
   15524:	|      move.l d0,-(sp)
   15526:	|      jsr 17704 <__fixsfsi>
   1552c:	|      addq.l #4,sp
   1552e:	|      move.l d0,1ca44 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   15534:	|      move.l 1ca48 <input+0xe>,d0
   1553a:	|      move.l d0,-(sp)
   1553c:	|      jsr 1776c <__floatsisf>
   15542:	|      addq.l #4,sp
   15544:	|      move.l d0,d1
   15546:	|      move.l 1c426 <cameraZoom>,d0
   1554c:	|      move.l d0,-(sp)
   1554e:	|      move.l d1,-(sp)
   15550:	|      jsr 1781e <__mulsf3>
   15556:	|      addq.l #8,sp
   15558:	|      move.l d0,-(sp)
   1555a:	|      jsr 17704 <__fixsfsi>
   15560:	|      addq.l #4,sp
   15562:	|      move.l d0,1ca48 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15568:	|      movea.l 1cb7c <frozenStuff>,a0
   1556e:	|      move.l 56(a0),d0
   15572:	|      move.l d0,1c426 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15578:	|      move.l 1ca44 <input+0xa>,d0
   1557e:	|      move.l d0,-(sp)
   15580:	|      jsr 1776c <__floatsisf>
   15586:	|      addq.l #4,sp
   15588:	|      move.l d0,d1
   1558a:	|      move.l 1c426 <cameraZoom>,d0
   15590:	|      move.l d0,-(sp)
   15592:	|      move.l d1,-(sp)
   15594:	|      jsr 17622 <__divsf3>
   1559a:	|      addq.l #8,sp
   1559c:	|      move.l d0,-(sp)
   1559e:	|      jsr 17704 <__fixsfsi>
   155a4:	|      addq.l #4,sp
   155a6:	|      move.l d0,1ca44 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   155ac:	|      move.l 1ca48 <input+0xe>,d0
   155b2:	|      move.l d0,-(sp)
   155b4:	|      jsr 1776c <__floatsisf>
   155ba:	|      addq.l #4,sp
   155bc:	|      move.l d0,d1
   155be:	|      move.l 1c426 <cameraZoom>,d0
   155c4:	|      move.l d0,-(sp)
   155c6:	|      move.l d1,-(sp)
   155c8:	|      jsr 17622 <__divsf3>
   155ce:	|      addq.l #8,sp
   155d0:	|      move.l d0,-(sp)
   155d2:	|      jsr 17704 <__fixsfsi>
   155d8:	|      addq.l #4,sp
   155da:	|      move.l d0,1ca48 <input+0xe>

	killAllPeople ();
   155e0:	|      jsr ab18 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   155e6:	|      movea.l 1cb7c <frozenStuff>,a0
   155ec:	|      move.l (a0),d0
   155ee:	|      move.l d0,1caec <allPeople>

	killAllRegions ();
   155f4:	|      jsr 15b4a <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   155fa:	|      movea.l 1cb7c <frozenStuff>,a0
   15600:	|      move.l 4(a0),d0
   15604:	|      move.l d0,1cb98 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   1560a:	|      move.l 1c98e <mouseCursorAnim>,d0
   15610:	|      move.l d0,-(sp)
   15612:	|      jsr 9a0c <deleteAnim>
   15618:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   1561a:	|      movea.l 1cb7c <frozenStuff>,a0
   15620:	|      move.l 32(a0),d0
   15624:	|      move.l d0,1c98e <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   1562a:	|      movea.l 1cb7c <frozenStuff>,a0
   15630:	|      move.l 36(a0),d0
   15634:	|      move.l d0,1c992 <mouseCursorFrameNum>

	killZBuffer ();
   1563a:	|      jsr 87b2 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   15640:	|      movea.l 1cb7c <frozenStuff>,a0
   15646:	|      move.l 60(a0),d0
   1564a:	|      move.l d0,1cae8 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   15650:	|      move.l 1c400 <currentEvents>,d0
   15656:	|  /-- beq.s 15670 <unfreeze+0x1ce>
   15658:	|  |   move.l 1c400 <currentEvents>,12(sp)
   15660:	|  |   move.l 1ca88 <SysBase>,d0
   15666:	|  |   movea.l d0,a6
   15668:	|  |   movea.l 12(sp),a1
   1566c:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   15670:	|  \-> movea.l 1cb7c <frozenStuff>,a0
   15676:	|      move.l 28(a0),d0
   1567a:	|      move.l d0,1c400 <currentEvents>

	killAllSpeech ();
   15680:	|      jsr 7fd6 <killAllSpeech>
	if (speech) FreeVec(speech);
   15686:	|      move.l 1cae4 <speech>,d0
   1568c:	|  /-- beq.s 156a6 <unfreeze+0x204>
   1568e:	|  |   move.l 1cae4 <speech>,8(sp)
   15696:	|  |   move.l 1ca88 <SysBase>,d0
   1569c:	|  |   movea.l d0,a6
   1569e:	|  |   movea.l 8(sp),a1
   156a2:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   156a6:	|  \-> movea.l 1cb7c <frozenStuff>,a0
   156ac:	|      move.l 20(a0),d0
   156b0:	|      move.l d0,1cae4 <speech>

	frozenStuff = frozenStuff -> next;
   156b6:	|      movea.l 1cb7c <frozenStuff>,a0
   156bc:	|      move.l 64(a0),d0
   156c0:	|      move.l d0,1cb7c <frozenStuff>

	overRegion = NULL;
   156c6:	|      clr.l 1cb9c <overRegion>
	if (killMe) FreeVec(killMe);
   156cc:	|      tst.l 16(sp)
   156d0:	|  /-- beq.s 156e8 <unfreeze+0x246>
   156d2:	|  |   move.l 16(sp),4(sp)
   156d8:	|  |   move.l 1ca88 <SysBase>,d0
   156de:	|  |   movea.l d0,a6
   156e0:	|  |   movea.l 4(sp),a1
   156e4:	|  |   jsr -690(a6)
	killMe = NULL;
   156e8:	|  \-> clr.l 16(sp)
   156ec:	|  /-- bra.s 156f0 <unfreeze+0x24e>
	if (! frozenStuff) return;
   156ee:	\--|-> nop
}
   156f0:	   \-> movea.l (sp)+,a6
   156f2:	       lea 16(sp),sp
   156f6:	       rts

000156f8 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   156f8:	pea 1a0f1 <newfatal.c.307beca7+0x109>
   156fe:	jsr 1733a <KPrintF>
   15704:	addq.l #4,sp
	return FALSE;
   15706:	clr.w d0
}
   15708:	rts

0001570a <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   1570a:	          lea -32(sp),sp
   1570e:	          move.l a6,-(sp)
   15710:	          move.l d2,-(sp)
	unsigned int a = 0;
   15712:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15716:	          move.l 1cb88 <fontOrderString>,d0
   1571c:	      /-- beq.s 15736 <loadFont+0x2c>
   1571e:	      |   move.l 1cb88 <fontOrderString>,24(sp)
   15726:	      |   move.l 1ca88 <SysBase>,d0
   1572c:	      |   movea.l d0,a6
   1572e:	      |   movea.l 24(sp),a1
   15732:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15736:	      \-> move.l 48(sp),-(sp)
   1573a:	          jsr b8 <copyString>
   15740:	          addq.l #4,sp
   15742:	          move.l d0,1cb88 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15748:	          move.l 1cb94 <theFont>,d0
   1574e:	      /-- beq.s 15760 <loadFont+0x56>
   15750:	      |   move.l 1cb94 <theFont>,d0
   15756:	      |   move.l d0,-(sp)
   15758:	      |   jsr 8af0 <forgetSpriteBank>
   1575e:	      |   addq.l #4,sp
	theFont = NULL;
   15760:	      \-> clr.l 1cb94 <theFont>

	loadedFontNum = filenum;
   15766:	          move.l 44(sp),1cb84 <loadedFontNum>

	fontTableSize = 0;
   1576e:	          clr.l 1cb90 <fontTableSize>
	char *tmp = charOrder;
   15774:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   1577a:	   /----- bra.s 157b6 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   1577c:	/--|----> movea.l 32(sp),a0
   15780:	|  |      move.b (a0),d0
   15782:	|  |      ext.w d0
   15784:	|  |      movea.w d0,a0
   15786:	|  |      move.l 1cb90 <fontTableSize>,d0
   1578c:	|  |      move.l d0,d0
   1578e:	|  |      move.b d0,d0
   15790:	|  |      andi.l #255,d0
   15796:	|  |      cmp.l a0,d0
   15798:	|  |  /-- bge.s 157aa <loadFont+0xa0>
   1579a:	|  |  |   movea.l 32(sp),a0
   1579e:	|  |  |   move.b (a0),d0
   157a0:	|  |  |   ext.w d0
   157a2:	|  |  |   movea.w d0,a0
   157a4:	|  |  |   move.l a0,1cb90 <fontTableSize>
		*tmp++;
   157aa:	|  |  \-> move.l 32(sp),d0
   157ae:	|  |      move.l d0,d1
   157b0:	|  |      addq.l #1,d1
   157b2:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   157b6:	|  \----> movea.l 32(sp),a0
   157ba:	|         move.b (a0),d0
   157bc:	\-------- bne.s 1577c <loadFont+0x72>
	}
	fontTableSize++;
   157be:	          move.l 1cb90 <fontTableSize>,d0
   157c4:	          addq.l #1,d0
   157c6:	          move.l d0,1cb90 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   157cc:	          move.l 1cb8c <fontTable>,d0
   157d2:	      /-- beq.s 157ec <loadFont+0xe2>
   157d4:	      |   move.l 1cb8c <fontTable>,20(sp)
   157dc:	      |   move.l 1ca88 <SysBase>,d0
   157e2:	      |   movea.l d0,a6
   157e4:	      |   movea.l 20(sp),a1
   157e8:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   157ec:	      \-> move.l 1cb90 <fontTableSize>,d0
   157f2:	          add.l d0,d0
   157f4:	          add.l d0,d0
   157f6:	          move.l d0,16(sp)
   157fa:	          clr.l 12(sp)
   157fe:	          move.l 1ca88 <SysBase>,d0
   15804:	          movea.l d0,a6
   15806:	          move.l 16(sp),d0
   1580a:	          move.l 12(sp),d1
   1580e:	          jsr -684(a6)
   15812:	          move.l d0,8(sp)
   15816:	          move.l 8(sp),d0
   1581a:	          move.l d0,1cb8c <fontTable>
	if (!fontTable) return FALSE;
   15820:	          move.l 1cb8c <fontTable>,d0
   15826:	      /-- bne.s 1582e <loadFont+0x124>
   15828:	      |   clr.w d0
   1582a:	/-----|-- bra.w 158d4 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   1582e:	|     \-> clr.l 36(sp)
   15832:	|     /-- bra.s 1584c <loadFont+0x142>
		fontTable[a] = 0;
   15834:	|  /--|-> move.l 1cb8c <fontTable>,d1
   1583a:	|  |  |   move.l 36(sp),d0
   1583e:	|  |  |   add.l d0,d0
   15840:	|  |  |   add.l d0,d0
   15842:	|  |  |   movea.l d1,a0
   15844:	|  |  |   adda.l d0,a0
   15846:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15848:	|  |  |   addq.l #1,36(sp)
   1584c:	|  |  \-> move.l 1cb90 <fontTableSize>,d0
   15852:	|  |      cmp.l 36(sp),d0
   15856:	|  \----- bhi.s 15834 <loadFont+0x12a>
	}
	a = 0;
   15858:	|         clr.l 36(sp)
	int i = 0;
   1585c:	|         clr.l 28(sp)
	tmp = charOrder;
   15860:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15866:	|     /-- bra.s 15896 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15868:	|  /--|-> move.l 1cb8c <fontTable>,d1
   1586e:	|  |  |   move.l 32(sp),d0
   15872:	|  |  |   move.l d0,d2
   15874:	|  |  |   addq.l #1,d2
   15876:	|  |  |   move.l d2,32(sp)
   1587a:	|  |  |   movea.l d0,a0
   1587c:	|  |  |   move.b (a0),d0
   1587e:	|  |  |   ext.w d0
   15880:	|  |  |   movea.w d0,a0
   15882:	|  |  |   move.l a0,d0
   15884:	|  |  |   add.l a0,d0
   15886:	|  |  |   add.l d0,d0
   15888:	|  |  |   movea.l d1,a0
   1588a:	|  |  |   adda.l d0,a0
   1588c:	|  |  |   move.l 28(sp),d0
   15890:	|  |  |   move.l d0,(a0)
		i++;
   15892:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   15896:	|  |  \-> movea.l 32(sp),a0
   1589a:	|  |      move.b (a0),d0
   1589c:	|  \----- bne.s 15868 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   1589e:	|         move.l 44(sp),-(sp)
   158a2:	|         jsr 1605c <loadBankForAnim>
   158a8:	|         addq.l #4,sp
   158aa:	|         move.l d0,1cb94 <theFont>
	if (!theFont) {
   158b0:	|         move.l 1cb94 <theFont>,d0
   158b6:	|     /-- bne.s 158ca <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   158b8:	|     |   pea 1a118 <newfatal.c.307beca7+0x130>
   158be:	|     |   jsr 1733a <KPrintF>
   158c4:	|     |   addq.l #4,sp
		return FALSE;
   158c6:	|     |   clr.w d0
   158c8:	+-----|-- bra.s 158d4 <loadFont+0x1ca>
	}
	fontHeight = h;
   158ca:	|     \-> move.l 52(sp),1cb80 <fontHeight>
	return TRUE;
   158d2:	|         moveq #1,d0
}
   158d4:	\-------> move.l (sp)+,d2
   158d6:	          movea.l (sp)+,a6
   158d8:	          lea 32(sp),sp
   158dc:	          rts

000158de <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   158de:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   158e2:	                clr.l 4(sp)

    if (!fontTableSize) return;
   158e6:	                move.l 1cb90 <fontTableSize>,d0
   158ec:	/-------------- beq.w 159b4 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   158f0:	|               move.w 1c98c <fontSpace>,d0
   158f6:	|               asr.w #1,d0
   158f8:	|               ext.l d0
   158fa:	|               add.l d0,20(sp)
	char *tmp = theText;
   158fe:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15904:	|     /-------- bra.w 159a8 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15908:	|  /--|-------> movea.l 1cb94 <theFont>,a0
   1590e:	|  |  |         movea.l 16(a0),a0
   15912:	|  |  |         movea.l 8(sp),a1
   15916:	|  |  |         move.b (a1),d0
   15918:	|  |  |         move.b d0,d0
   1591a:	|  |  |         andi.l #255,d0
   15920:	|  |  |         move.l 1cb90 <fontTableSize>,d1
   15926:	|  |  |         cmp.l d0,d1
   15928:	|  |  |  /----- bls.s 15954 <pasteStringToBackdrop+0x76>
   1592a:	|  |  |  |      move.l 1cb8c <fontTable>,d1
   15930:	|  |  |  |      movea.l 8(sp),a1
   15934:	|  |  |  |      move.b (a1),d0
   15936:	|  |  |  |      move.b d0,d0
   15938:	|  |  |  |      andi.l #255,d0
   1593e:	|  |  |  |      add.l d0,d0
   15940:	|  |  |  |      add.l d0,d0
   15942:	|  |  |  |      movea.l d1,a1
   15944:	|  |  |  |      adda.l d0,a1
   15946:	|  |  |  |      move.l (a1),d1
   15948:	|  |  |  |      move.l d1,d0
   1594a:	|  |  |  |      lsl.l #3,d0
   1594c:	|  |  |  |      sub.l d1,d0
   1594e:	|  |  |  |      add.l d0,d0
   15950:	|  |  |  |      add.l d0,d0
   15952:	|  |  |  |  /-- bra.s 15956 <pasteStringToBackdrop+0x78>
   15954:	|  |  |  \--|-> moveq #0,d0
   15956:	|  |  |     \-> adda.l d0,a0
   15958:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   1595a:	|  |  |         move.l 24(sp),d1
   1595e:	|  |  |         movea.l (sp),a0
   15960:	|  |  |         move.l 12(a0),d0
   15964:	|  |  |         move.l d0,d0
   15966:	|  |  |         sub.w d0,d1
   15968:	|  |  |         move.w d1,d0
   1596a:	|  |  |         movea.w d0,a1
   1596c:	|  |  |         move.l 20(sp),d1
   15970:	|  |  |         movea.l (sp),a0
   15972:	|  |  |         move.l 8(a0),d0
   15976:	|  |  |         move.l d0,d0
   15978:	|  |  |         sub.w d0,d1
   1597a:	|  |  |         move.w d1,d0
   1597c:	|  |  |         movea.w d0,a0
   1597e:	|  |  |         move.l a1,-(sp)
   15980:	|  |  |         move.l a0,-(sp)
   15982:	|  |  |         move.l 8(sp),-(sp)
   15986:	|  |  |         jsr 23dc <CstPasteChar>
   1598c:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15990:	|  |  |         movea.l (sp),a0
   15992:	|  |  |         move.l (a0),d1
   15994:	|  |  |         move.w 1c98c <fontSpace>,d0
   1599a:	|  |  |         movea.w d0,a0
   1599c:	|  |  |         move.l d1,d0
   1599e:	|  |  |         add.l a0,d0
   159a0:	|  |  |         add.l d0,20(sp)
		tmp++;
   159a4:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   159a8:	|  |  \-------> movea.l 8(sp),a0
   159ac:	|  |            move.b (a0),d0
   159ae:	|  \----------- bne.w 15908 <pasteStringToBackdrop+0x2a>
   159b2:	|           /-- bra.s 159b6 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   159b4:	\-----------|-> nop
    }
}
   159b6:	            \-> lea 12(sp),sp
   159ba:	                rts

000159bc <stringWidth>:


int stringWidth (char * theText) {
   159bc:	       subq.l #8,sp
	int a = 0;
   159be:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   159c2:	       clr.l (sp)

	if (! fontTableSize) return 0;
   159c4:	       move.l 1cb90 <fontTableSize>,d0
   159ca:	/----- bne.s 159d0 <stringWidth+0x14>
   159cc:	|      moveq #0,d0
   159ce:	|  /-- bra.s 159d2 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   159d0:	\--|-> move.l (sp),d0
}
   159d2:	   \-> addq.l #8,sp
   159d4:	       rts

000159d6 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   159d6:	       lea -16(sp),sp
   159da:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   159dc:	       moveq #36,d0
   159de:	       move.l d0,16(sp)
   159e2:	       clr.l 12(sp)
   159e6:	       move.l 1ca88 <SysBase>,d0
   159ec:	       movea.l d0,a6
   159ee:	       move.l 16(sp),d0
   159f2:	       move.l 12(sp),d1
   159f6:	       jsr -684(a6)
   159fa:	       move.l d0,8(sp)
   159fe:	       move.l 8(sp),d0
   15a02:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15a06:	   /-- bne.s 15a0e <addScreenRegion+0x38>
   15a08:	   |   clr.w d0
   15a0a:	/--|-- bra.w 15a8e <addScreenRegion+0xb8>
    newRegion->di = di;
   15a0e:	|  \-> movea.l 4(sp),a0
   15a12:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15a18:	|      movea.l 4(sp),a0
   15a1c:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   15a20:	|      movea.l 4(sp),a0
   15a24:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15a2a:	|      movea.l 4(sp),a0
   15a2e:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15a34:	|      movea.l 4(sp),a0
   15a38:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   15a3e:	|      movea.l 4(sp),a0
   15a42:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15a48:	|      movea.l 4(sp),a0
   15a4c:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15a52:	|      move.l 52(sp),-(sp)
   15a56:	|      jsr d714 <loadObjectType>
   15a5c:	|      addq.l #4,sp
   15a5e:	|      movea.l 4(sp),a0
   15a62:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15a66:	|      move.l 1cb98 <allScreenRegions>,d0
   15a6c:	|      movea.l 4(sp),a0
   15a70:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15a74:	|      move.l 4(sp),1cb98 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15a7c:	|      movea.l 4(sp),a0
   15a80:	|      move.l 28(a0),d0
   15a84:	|      sne d0
   15a86:	|      neg.b d0
   15a88:	|      move.b d0,d0
   15a8a:	|      andi.w #255,d0
}
   15a8e:	\----> movea.l (sp)+,a6
   15a90:	       lea 16(sp),sp
   15a94:	       rts

00015a96 <getOverRegion>:

void getOverRegion () {
   15a96:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15a98:	             move.l 1cb98 <allScreenRegions>,(sp)
	while (thisRegion) {
   15a9e:	   /-------- bra.s 15b0c <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15aa0:	/--|-------> move.l 1ca44 <input+0xa>,d0
   15aa6:	|  |         movea.l (sp),a0
   15aa8:	|  |         movea.l (a0),a0
   15aaa:	|  |         move.l 1cb42 <cameraX>,d1
   15ab0:	|  |         suba.l d1,a0
   15ab2:	|  |         cmpa.l d0,a0
   15ab4:	|  |  /----- bgt.s 15b06 <getOverRegion+0x70>
   15ab6:	|  |  |      move.l 1ca48 <input+0xe>,d0
   15abc:	|  |  |      movea.l (sp),a0
   15abe:	|  |  |      movea.l 4(a0),a0
   15ac2:	|  |  |      move.l 1cb46 <cameraY>,d1
   15ac8:	|  |  |      suba.l d1,a0
   15aca:	|  |  |      cmpa.l d0,a0
   15acc:	|  |  +----- bgt.s 15b06 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15ace:	|  |  |      move.l 1ca44 <input+0xa>,d0
   15ad4:	|  |  |      movea.l (sp),a0
   15ad6:	|  |  |      movea.l 8(a0),a0
   15ada:	|  |  |      move.l 1cb42 <cameraX>,d1
   15ae0:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15ae2:	|  |  |      cmpa.l d0,a0
   15ae4:	|  |  +----- blt.s 15b06 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15ae6:	|  |  |      move.l 1ca48 <input+0xe>,d0
   15aec:	|  |  |      movea.l (sp),a0
   15aee:	|  |  |      movea.l 12(a0),a0
   15af2:	|  |  |      move.l 1cb46 <cameraY>,d1
   15af8:	|  |  |      suba.l d1,a0
   15afa:	|  |  |      cmpa.l d0,a0
   15afc:	|  |  +----- blt.s 15b06 <getOverRegion+0x70>
			overRegion = thisRegion;
   15afe:	|  |  |      move.l (sp),1cb9c <overRegion>
			return;
   15b04:	|  |  |  /-- bra.s 15b18 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15b06:	|  |  \--|-> movea.l (sp),a0
   15b08:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15b0c:	|  \-----|-> tst.l (sp)
   15b0e:	\--------|-- bne.s 15aa0 <getOverRegion+0xa>
	}
	overRegion = NULL;
   15b10:	         |   clr.l 1cb9c <overRegion>
	return;
   15b16:	         |   nop
}
   15b18:	         \-> addq.l #4,sp
   15b1a:	             rts

00015b1c <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15b1c:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15b1e:	             move.l 1cb98 <allScreenRegions>,(sp)

	while (thisRegion) {
   15b24:	   /-------- bra.s 15b40 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15b26:	/--|-------> movea.l (sp),a0
   15b28:	|  |         movea.l 28(a0),a0
   15b2c:	|  |         move.l 4(a0),d0
   15b30:	|  |         cmp.l 8(sp),d0
   15b34:	|  |     /-- bne.s 15b3a <getRegionForObject+0x1e>
			return thisRegion;
   15b36:	|  |     |   move.l (sp),d0
   15b38:	|  |  /--|-- bra.s 15b46 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15b3a:	|  |  |  \-> movea.l (sp),a0
   15b3c:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15b40:	|  \--|----> tst.l (sp)
   15b42:	\-----|----- bne.s 15b26 <getRegionForObject+0xa>
	}

	return NULL;
   15b44:	      |      moveq #0,d0
}
   15b46:	      \----> addq.l #4,sp
   15b48:	             rts

00015b4a <killAllRegions>:

void killAllRegions () {
   15b4a:	       subq.l #8,sp
   15b4c:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15b4e:	   /-- bra.s 15b90 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15b50:	/--|-> move.l 1cb98 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15b58:	|  |   movea.l 1cb98 <allScreenRegions>,a0
   15b5e:	|  |   move.l 32(a0),d0
   15b62:	|  |   move.l d0,1cb98 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15b68:	|  |   movea.l 8(sp),a0
   15b6c:	|  |   move.l 28(a0),d0
   15b70:	|  |   move.l d0,-(sp)
   15b72:	|  |   jsr d9cc <removeObjectType>
   15b78:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15b7a:	|  |   move.l 8(sp),4(sp)
   15b80:	|  |   move.l 1ca88 <SysBase>,d0
   15b86:	|  |   movea.l d0,a6
   15b88:	|  |   movea.l 4(sp),a1
   15b8c:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15b90:	|  \-> move.l 1cb98 <allScreenRegions>,d0
   15b96:	\----- bne.s 15b50 <killAllRegions+0x6>
	}
	overRegion = NULL;
   15b98:	       clr.l 1cb9c <overRegion>
}
   15b9e:	       nop
   15ba0:	       movea.l (sp)+,a6
   15ba2:	       addq.l #8,sp
   15ba4:	       rts

00015ba6 <loadRegions>:

void loadRegions (BPTR fp) {
   15ba6:	       lea -24(sp),sp
   15baa:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15bac:	       move.l 32(sp),-(sp)
   15bb0:	       jsr 6bc <get2bytes>
   15bb6:	       addq.l #4,sp
   15bb8:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15bbc:	       move.l #117656,20(sp)

	while (numRegions --) {
   15bc4:	   /-- bra.w 15ca2 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15bc8:	/--|-> moveq #36,d0
   15bca:	|  |   move.l d0,16(sp)
   15bce:	|  |   clr.l 12(sp)
   15bd2:	|  |   move.l 1ca88 <SysBase>,d0
   15bd8:	|  |   movea.l d0,a6
   15bda:	|  |   move.l 16(sp),d0
   15bde:	|  |   move.l 12(sp),d1
   15be2:	|  |   jsr -684(a6)
   15be6:	|  |   move.l d0,8(sp)
   15bea:	|  |   move.l 8(sp),d0
   15bee:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15bf2:	|  |   movea.l 20(sp),a0
   15bf6:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15bfa:	|  |   moveq #32,d1
   15bfc:	|  |   add.l 4(sp),d1
   15c00:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15c04:	|  |   move.l 32(sp),-(sp)
   15c08:	|  |   jsr 6bc <get2bytes>
   15c0e:	|  |   addq.l #4,sp
   15c10:	|  |   movea.l 4(sp),a0
   15c14:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15c16:	|  |   move.l 32(sp),-(sp)
   15c1a:	|  |   jsr 6bc <get2bytes>
   15c20:	|  |   addq.l #4,sp
   15c22:	|  |   movea.l 4(sp),a0
   15c26:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15c2a:	|  |   move.l 32(sp),-(sp)
   15c2e:	|  |   jsr 6bc <get2bytes>
   15c34:	|  |   addq.l #4,sp
   15c36:	|  |   movea.l 4(sp),a0
   15c3a:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15c3e:	|  |   move.l 32(sp),-(sp)
   15c42:	|  |   jsr 6bc <get2bytes>
   15c48:	|  |   addq.l #4,sp
   15c4a:	|  |   movea.l 4(sp),a0
   15c4e:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15c52:	|  |   move.l 32(sp),-(sp)
   15c56:	|  |   jsr 6bc <get2bytes>
   15c5c:	|  |   addq.l #4,sp
   15c5e:	|  |   movea.l 4(sp),a0
   15c62:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15c66:	|  |   move.l 32(sp),-(sp)
   15c6a:	|  |   jsr 6bc <get2bytes>
   15c70:	|  |   addq.l #4,sp
   15c72:	|  |   movea.l 4(sp),a0
   15c76:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15c7a:	|  |   move.l 32(sp),-(sp)
   15c7e:	|  |   jsr 6bc <get2bytes>
   15c84:	|  |   addq.l #4,sp
   15c86:	|  |   movea.l 4(sp),a0
   15c8a:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15c8e:	|  |   move.l 32(sp),-(sp)
   15c92:	|  |   jsr d6c2 <loadObjectRef>
   15c98:	|  |   addq.l #4,sp
   15c9a:	|  |   movea.l 4(sp),a0
   15c9e:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15ca2:	|  \-> move.l 24(sp),d0
   15ca6:	|      move.l d0,d1
   15ca8:	|      subq.l #1,d1
   15caa:	|      move.l d1,24(sp)
   15cae:	|      tst.l d0
   15cb0:	\----- bne.w 15bc8 <loadRegions+0x22>
	}
	* pointy = NULL;
   15cb4:	       movea.l 20(sp),a0
   15cb8:	       clr.l (a0)
}
   15cba:	       nop
   15cbc:	       movea.l (sp)+,a6
   15cbe:	       lea 24(sp),sp
   15cc2:	       rts

00015cc4 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15cc4:	             lea -12(sp),sp
   15cc8:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15cca:	             move.l #117656,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15cd2:	   /-------- bra.s 15d4c <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15cd4:	/--|-------> movea.l 12(sp),a0
   15cd8:	|  |         movea.l (a0),a0
   15cda:	|  |         movea.l 28(a0),a0
   15cde:	|  |         move.l 4(a0),d0
   15ce2:	|  |         cmp.l 20(sp),d0
   15ce6:	|  |  /----- bne.s 15d3e <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15ce8:	|  |  |      movea.l 12(sp),a0
   15cec:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15cf0:	|  |  |      movea.l 8(sp),a0
   15cf4:	|  |  |      move.l 32(a0),d0
   15cf8:	|  |  |      movea.l 12(sp),a0
   15cfc:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15cfe:	|  |  |      movea.l 8(sp),a0
   15d02:	|  |  |      move.l 28(a0),d0
   15d06:	|  |  |      move.l d0,-(sp)
   15d08:	|  |  |      jsr d9cc <removeObjectType>
   15d0e:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15d10:	|  |  |      move.l 1cb9c <overRegion>,d0
   15d16:	|  |  |      cmp.l 8(sp),d0
   15d1a:	|  |  |  /-- bne.s 15d22 <removeScreenRegion+0x5e>
   15d1c:	|  |  |  |   clr.l 1cb9c <overRegion>
            FreeVec(killMe);
   15d22:	|  |  |  \-> move.l 8(sp),4(sp)
   15d28:	|  |  |      move.l 1ca88 <SysBase>,d0
   15d2e:	|  |  |      movea.l d0,a6
   15d30:	|  |  |      movea.l 4(sp),a1
   15d34:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15d38:	|  |  |      clr.l 8(sp)
   15d3c:	|  +--|----- bra.s 15d4c <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15d3e:	|  |  \----> movea.l 12(sp),a0
   15d42:	|  |         move.l (a0),d0
   15d44:	|  |         moveq #32,d1
   15d46:	|  |         add.l d0,d1
   15d48:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15d4c:	|  \-------> movea.l 12(sp),a0
   15d50:	|            move.l (a0),d0
   15d52:	\----------- bne.s 15cd4 <removeScreenRegion+0x10>
        }
    }
}
   15d54:	             nop
   15d56:	             nop
   15d58:	             movea.l (sp)+,a6
   15d5a:	             lea 12(sp),sp
   15d5e:	             rts

00015d60 <saveRegions>:

void saveRegions (BPTR fp) {
   15d60:	       subq.l #8,sp
	int numRegions = 0;
   15d62:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15d66:	       move.l 1cb98 <allScreenRegions>,(sp)
	while (thisRegion) {
   15d6c:	   /-- bra.s 15d78 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15d6e:	/--|-> movea.l (sp),a0
   15d70:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15d74:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15d78:	|  \-> tst.l (sp)
   15d7a:	\----- bne.s 15d6e <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15d7c:	       move.l 12(sp),-(sp)
   15d80:	       move.l 8(sp),-(sp)
   15d84:	       jsr 8d0 <put2bytes>
   15d8a:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15d8c:	       move.l 1cb98 <allScreenRegions>,(sp)
	while (thisRegion) {
   15d92:	/----- bra.w 15e3a <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15d96:	|  /-> movea.l (sp),a0
   15d98:	|  |   move.l (a0),d0
   15d9a:	|  |   move.l 12(sp),-(sp)
   15d9e:	|  |   move.l d0,-(sp)
   15da0:	|  |   jsr 8d0 <put2bytes>
   15da6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15da8:	|  |   movea.l (sp),a0
   15daa:	|  |   move.l 4(a0),d0
   15dae:	|  |   move.l 12(sp),-(sp)
   15db2:	|  |   move.l d0,-(sp)
   15db4:	|  |   jsr 8d0 <put2bytes>
   15dba:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15dbc:	|  |   movea.l (sp),a0
   15dbe:	|  |   move.l 8(a0),d0
   15dc2:	|  |   move.l 12(sp),-(sp)
   15dc6:	|  |   move.l d0,-(sp)
   15dc8:	|  |   jsr 8d0 <put2bytes>
   15dce:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15dd0:	|  |   movea.l (sp),a0
   15dd2:	|  |   move.l 12(a0),d0
   15dd6:	|  |   move.l 12(sp),-(sp)
   15dda:	|  |   move.l d0,-(sp)
   15ddc:	|  |   jsr 8d0 <put2bytes>
   15de2:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15de4:	|  |   movea.l (sp),a0
   15de6:	|  |   move.l 16(a0),d0
   15dea:	|  |   move.l 12(sp),-(sp)
   15dee:	|  |   move.l d0,-(sp)
   15df0:	|  |   jsr 8d0 <put2bytes>
   15df6:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15df8:	|  |   movea.l (sp),a0
   15dfa:	|  |   move.l 20(a0),d0
   15dfe:	|  |   move.l 12(sp),-(sp)
   15e02:	|  |   move.l d0,-(sp)
   15e04:	|  |   jsr 8d0 <put2bytes>
   15e0a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15e0c:	|  |   movea.l (sp),a0
   15e0e:	|  |   move.l 24(a0),d0
   15e12:	|  |   move.l 12(sp),-(sp)
   15e16:	|  |   move.l d0,-(sp)
   15e18:	|  |   jsr 8d0 <put2bytes>
   15e1e:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15e20:	|  |   movea.l (sp),a0
   15e22:	|  |   move.l 28(a0),d0
   15e26:	|  |   move.l 12(sp),-(sp)
   15e2a:	|  |   move.l d0,-(sp)
   15e2c:	|  |   jsr da6c <saveObjectRef>
   15e32:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15e34:	|  |   movea.l (sp),a0
   15e36:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   15e3a:	\--|-> tst.l (sp)
   15e3c:	   \-- bne.w 15d96 <saveRegions+0x36>
	}
}
   15e40:	       nop
   15e42:	       nop
   15e44:	       addq.l #8,sp
   15e46:	       rts

00015e48 <showBoxes>:

void showBoxes () {
   15e48:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   15e4a:	       move.l 1cb98 <allScreenRegions>,(sp)

	while (huntRegion) {
   15e50:	/----- bra.w 15eec <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   15e54:	|  /-> movea.l (sp),a0
   15e56:	|  |   move.l 12(a0),d0
   15e5a:	|  |   movea.l d0,a1
   15e5c:	|  |   movea.l (sp),a0
   15e5e:	|  |   move.l 4(a0),d0
   15e62:	|  |   move.l d0,d1
   15e64:	|  |   movea.l (sp),a0
   15e66:	|  |   move.l (a0),d0
   15e68:	|  |   move.l a1,-(sp)
   15e6a:	|  |   move.l d1,-(sp)
   15e6c:	|  |   move.l d0,-(sp)
   15e6e:	|  |   jsr d350 <drawVerticalLine>
   15e74:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   15e78:	|  |   movea.l (sp),a0
   15e7a:	|  |   move.l 12(a0),d0
   15e7e:	|  |   movea.l d0,a1
   15e80:	|  |   movea.l (sp),a0
   15e82:	|  |   move.l 4(a0),d0
   15e86:	|  |   move.l d0,d1
   15e88:	|  |   movea.l (sp),a0
   15e8a:	|  |   move.l 8(a0),d0
   15e8e:	|  |   move.l a1,-(sp)
   15e90:	|  |   move.l d1,-(sp)
   15e92:	|  |   move.l d0,-(sp)
   15e94:	|  |   jsr d350 <drawVerticalLine>
   15e9a:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15e9e:	|  |   movea.l (sp),a0
   15ea0:	|  |   move.l 8(a0),d0
   15ea4:	|  |   movea.l d0,a1
   15ea6:	|  |   movea.l (sp),a0
   15ea8:	|  |   move.l 4(a0),d0
   15eac:	|  |   move.l d0,d1
   15eae:	|  |   movea.l (sp),a0
   15eb0:	|  |   move.l (a0),d0
   15eb2:	|  |   move.l a1,-(sp)
   15eb4:	|  |   move.l d1,-(sp)
   15eb6:	|  |   move.l d0,-(sp)
   15eb8:	|  |   jsr d32a <drawHorizontalLine>
   15ebe:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15ec2:	|  |   movea.l (sp),a0
   15ec4:	|  |   move.l 8(a0),d0
   15ec8:	|  |   movea.l d0,a1
   15eca:	|  |   movea.l (sp),a0
   15ecc:	|  |   move.l 12(a0),d0
   15ed0:	|  |   move.l d0,d1
   15ed2:	|  |   movea.l (sp),a0
   15ed4:	|  |   move.l (a0),d0
   15ed6:	|  |   move.l a1,-(sp)
   15ed8:	|  |   move.l d1,-(sp)
   15eda:	|  |   move.l d0,-(sp)
   15edc:	|  |   jsr d32a <drawHorizontalLine>
   15ee2:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   15ee6:	|  |   movea.l (sp),a0
   15ee8:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15eec:	\--|-> tst.l (sp)
   15eee:	   \-- bne.w 15e54 <showBoxes+0xc>
	}
   15ef2:	       nop
   15ef4:	       nop
   15ef6:	       addq.l #4,sp
   15ef8:	       rts

00015efa <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   15efa:	       lea -88(sp),sp
   15efe:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15f00:	       move.l 1ca88 <SysBase>,d0
   15f06:	       movea.l d0,a6
   15f08:	       jsr -666(a6)
   15f0c:	       move.l d0,88(sp)
   15f10:	       move.l 88(sp),d0
   15f14:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   15f18:	       move.l 84(sp),80(sp)
   15f1e:	       moveq #40,d0
   15f20:	       move.l d0,76(sp)
   15f24:	       move.l 1ca88 <SysBase>,d0
   15f2a:	       movea.l d0,a6
   15f2c:	       movea.l 80(sp),a0
   15f30:	       move.l 76(sp),d0
   15f34:	       jsr -654(a6)
   15f38:	       move.l d0,72(sp)
   15f3c:	       move.l 72(sp),d0
   15f40:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   15f44:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   15f4a:	       move.l #106802,60(sp)
   15f52:	       clr.l 56(sp)
   15f56:	       move.l 64(sp),52(sp)
   15f5c:	       clr.l 48(sp)
   15f60:	       move.l 1ca88 <SysBase>,d0
   15f66:	       movea.l d0,a6
   15f68:	       movea.l 60(sp),a0
   15f6c:	       move.l 56(sp),d0
   15f70:	       movea.l 52(sp),a1
   15f74:	       move.l 48(sp),d1
   15f78:	       jsr -444(a6)
   15f7c:	       move.b d0,47(sp)
   15f80:	       move.b 47(sp),d0
   15f84:	   /-- beq.s 15f9a <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   15f86:	   |   pea 1a13f <newfatal.c.307beca7+0x157>
   15f8c:	   |   jsr 1733a <KPrintF>
   15f92:	   |   addq.l #4,sp
        return 0;
   15f94:	   |   moveq #0,d0
   15f96:	/--|-- bra.w 16054 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   15f9a:	|  \-> movea.l 64(sp),a0
   15f9e:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15fa4:	|      lea 92(sp),a0
   15fa8:	|      lea -86(a0),a0
   15fac:	|      move.l a0,38(sp)
   15fb0:	|      movea.l 42(sp),a6
   15fb4:	|      movea.l 38(sp),a0
   15fb8:	|      jsr -60(a6)
   15fbc:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15fc0:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   15fc6:	|      move.l #1103515245,-(sp)
   15fcc:	|      move.l 34(sp),-(sp)
   15fd0:	|      jsr 17cc6 <__mulsi3>
   15fd6:	|      addq.l #8,sp
   15fd8:	|      addi.l #12345,d0
   15fde:	|      move.l d0,d1
   15fe0:	|      bclr #31,d1
   15fe4:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   15fe8:	|      move.l 30(sp),d0
   15fec:	|      pea 64 <_start+0x64>
   15ff0:	|      move.l d0,-(sp)
   15ff2:	|      jsr 17da0 <__umodsi3>
   15ff8:	|      addq.l #8,sp
   15ffa:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15ffe:	|      move.l 26(sp),-(sp)
   16002:	|      pea 1a15c <newfatal.c.307beca7+0x174>
   16008:	|      jsr 1733a <KPrintF>
   1600e:	|      addq.l #8,sp

    CloseDevice(ioreq);
   16010:	|      move.l 64(sp),22(sp)
   16016:	|      move.l 1ca88 <SysBase>,d0
   1601c:	|      movea.l d0,a6
   1601e:	|      movea.l 22(sp),a1
   16022:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   16026:	|      move.l 64(sp),18(sp)
   1602c:	|      move.l 1ca88 <SysBase>,d0
   16032:	|      movea.l d0,a6
   16034:	|      movea.l 18(sp),a0
   16038:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   1603c:	|      move.l 84(sp),14(sp)
   16042:	|      move.l 1ca88 <SysBase>,d0
   16048:	|      movea.l d0,a6
   1604a:	|      movea.l 14(sp),a0
   1604e:	|      jsr -672(a6)
    return 0;
   16052:	|      moveq #0,d0
   16054:	\----> movea.l (sp)+,a6
   16056:	       lea 88(sp),sp
   1605a:	       rts

0001605c <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   1605c:	             lea -20(sp),sp
   16060:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   16062:	             move.l 1cba0 <allLoadedBanks>,20(sp)
	while (returnMe) {
   1606a:	      /----- bra.s 1609c <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   1606c:	   /--|----> movea.l 20(sp),a0
   16070:	   |  |      move.l (a0),d0
   16072:	   |  |      cmp.l 28(sp),d0
   16076:	   |  |  /-- bne.s 16092 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   16078:	   |  |  |   movea.l 20(sp),a0
   1607c:	   |  |  |   move.l 4(a0),d0
   16080:	   |  |  |   addq.l #1,d0
   16082:	   |  |  |   movea.l 20(sp),a0
   16086:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   1608a:	   |  |  |   move.l 20(sp),d0
   1608e:	/--|--|--|-- bra.w 1614c <loadBankForAnim+0xf0>
		}		
		returnMe = returnMe->next;
   16092:	|  |  |  \-> movea.l 20(sp),a0
   16096:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   1609c:	|  |  \----> tst.l 20(sp)
   160a0:	|  \-------- bne.s 1606c <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   160a2:	|            moveq #26,d0
   160a4:	|            move.l d0,16(sp)
   160a8:	|            clr.l 12(sp)
   160ac:	|            move.l 1ca88 <SysBase>,d0
   160b2:	|            movea.l d0,a6
   160b4:	|            move.l 16(sp),d0
   160b8:	|            move.l 12(sp),d1
   160bc:	|            jsr -684(a6)
   160c0:	|            move.l d0,8(sp)
   160c4:	|            move.l 8(sp),d0
   160c8:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   160cc:	|     /----- beq.s 1614a <loadBankForAnim+0xee>
		returnMe->ID = ID;
   160ce:	|     |      movea.l 20(sp),a0
   160d2:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank)) {
   160d6:	|     |      move.l 20(sp),d0
   160da:	|     |      addq.l #8,d0
   160dc:	|     |      move.l d0,-(sp)
   160de:	|     |      move.l 32(sp),-(sp)
   160e2:	|     |      jsr 8bfc <loadSpriteBank>
   160e8:	|     |      addq.l #8,sp
   160ea:	|     |      tst.w d0
   160ec:	|     |  /-- beq.s 16122 <loadBankForAnim+0xc6>
			returnMe->timesUsed = 1;
   160ee:	|     |  |   movea.l 20(sp),a0
   160f2:	|     |  |   moveq #1,d0
   160f4:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   160f8:	|     |  |   move.l 1cba0 <allLoadedBanks>,d0
   160fe:	|     |  |   movea.l 20(sp),a0
   16102:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   16106:	|     |  |   move.l 20(sp),1cba0 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   1610e:	|     |  |   pea 1a16f <newfatal.c.307beca7+0x187>
   16114:	|     |  |   jsr 1733a <KPrintF>
   1611a:	|     |  |   addq.l #4,sp
			return returnMe;
   1611c:	|     |  |   move.l 20(sp),d0
   16120:	+-----|--|-- bra.s 1614c <loadBankForAnim+0xf0>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   16122:	|     |  \-> pea 1a19c <newfatal.c.307beca7+0x1b4>
   16128:	|     |      jsr 1733a <KPrintF>
   1612e:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   16130:	|     |      move.l 20(sp),4(sp)
   16136:	|     |      move.l 1ca88 <SysBase>,d0
   1613c:	|     |      movea.l d0,a6
   1613e:	|     |      movea.l 4(sp),a1
   16142:	|     |      jsr -690(a6)
			return NULL;
   16146:	|     |      moveq #0,d0
   16148:	+-----|----- bra.s 1614c <loadBankForAnim+0xf0>
		}
	} else return NULL;
   1614a:	|     \----> moveq #0,d0
}
   1614c:	\----------> movea.l (sp)+,a6
   1614e:	             lea 20(sp),sp
   16152:	             rts

00016154 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   16154:	       lea -60(sp),sp
   16158:	       move.l d3,-(sp)
   1615a:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   1615c:	       move.l 88(sp),d0
   16160:	       sub.l 80(sp),d0
   16164:	       move.l d0,-(sp)
   16166:	       jsr 1772c <__floatsidf>
   1616c:	       addq.l #4,sp
   1616e:	       move.l d0,32(sp)
   16172:	       move.l d1,36(sp)
   16176:	       move.l 32(sp),60(sp)
   1617c:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   16182:	       move.l 92(sp),d0
   16186:	       sub.l 84(sp),d0
   1618a:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   1618e:	       move.l 96(sp),d0
   16192:	       sub.l 80(sp),d0
   16196:	       move.l d0,-(sp)
   16198:	       jsr 1772c <__floatsidf>
   1619e:	       addq.l #4,sp
   161a0:	       move.l 64(sp),-(sp)
   161a4:	       move.l 64(sp),-(sp)
   161a8:	       move.l d1,-(sp)
   161aa:	       move.l d0,-(sp)
   161ac:	       jsr 177bc <__muldf3>
   161b2:	       lea 16(sp),sp
   161b6:	       move.l d0,d2
   161b8:	       move.l d1,d3
   161ba:	       move.l 100(sp),d0
   161be:	       sub.l 84(sp),d0
   161c2:	       move.l 56(sp),-(sp)
   161c6:	       move.l d0,-(sp)
   161c8:	       jsr 17cc6 <__mulsi3>
   161ce:	       addq.l #8,sp
   161d0:	       move.l d0,-(sp)
   161d2:	       jsr 1772c <__floatsidf>
   161d8:	       addq.l #4,sp
   161da:	       move.l d1,-(sp)
   161dc:	       move.l d0,-(sp)
   161de:	       move.l d3,-(sp)
   161e0:	       move.l d2,-(sp)
   161e2:	       jsr 1755e <__adddf3>
   161e8:	       lea 16(sp),sp
   161ec:	       move.l d0,24(sp)
   161f0:	       move.l d1,28(sp)
   161f4:	       move.l 24(sp),48(sp)
   161fa:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   16200:	       move.l 64(sp),-(sp)
   16204:	       move.l 64(sp),-(sp)
   16208:	       move.l 72(sp),-(sp)
   1620c:	       move.l 72(sp),-(sp)
   16210:	       jsr 177bc <__muldf3>
   16216:	       lea 16(sp),sp
   1621a:	       move.l d0,d2
   1621c:	       move.l d1,d3
   1621e:	       move.l 56(sp),-(sp)
   16222:	       move.l 60(sp),-(sp)
   16226:	       jsr 17cc6 <__mulsi3>
   1622c:	       addq.l #8,sp
   1622e:	       move.l d0,-(sp)
   16230:	       jsr 1772c <__floatsidf>
   16236:	       addq.l #4,sp
   16238:	       move.l d1,-(sp)
   1623a:	       move.l d0,-(sp)
   1623c:	       move.l d3,-(sp)
   1623e:	       move.l d2,-(sp)
   16240:	       jsr 1755e <__adddf3>
   16246:	       lea 16(sp),sp
   1624a:	       move.l d1,-(sp)
   1624c:	       move.l d0,-(sp)
   1624e:	       move.l 60(sp),-(sp)
   16252:	       move.l 60(sp),-(sp)
   16256:	       jsr 175c0 <__divdf3>
   1625c:	       lea 16(sp),sp
   16260:	       move.l d0,16(sp)
   16264:	       move.l d1,20(sp)
   16268:	       move.l 16(sp),48(sp)
   1626e:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   16274:	       clr.l -(sp)
   16276:	       clr.l -(sp)
   16278:	       move.l 60(sp),-(sp)
   1627c:	       move.l 60(sp),-(sp)
   16280:	       jsr 17944 <__ltdf2>
   16286:	       lea 16(sp),sp
   1628a:	       tst.l d0
   1628c:	   /-- bge.s 162a2 <closestPointOnLine+0x14e>
		*closestX = x1;
   1628e:	   |   movea.l 72(sp),a0
   16292:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   16296:	   |   movea.l 76(sp),a0
   1629a:	   |   move.l 84(sp),(a0)
   1629e:	/--|-- bra.w 16370 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   162a2:	|  \-> clr.l -(sp)
   162a4:	|      move.l #1072693248,-(sp)
   162aa:	|      move.l 60(sp),-(sp)
   162ae:	|      move.l 60(sp),-(sp)
   162b2:	|      jsr 1788a <__gtdf2>
   162b8:	|      lea 16(sp),sp
   162bc:	|      tst.l d0
   162be:	|  /-- ble.s 162d4 <closestPointOnLine+0x180>
		*closestX = x2;
   162c0:	|  |   movea.l 72(sp),a0
   162c4:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   162c8:	|  |   movea.l 76(sp),a0
   162cc:	|  |   move.l 92(sp),(a0)
   162d0:	+--|-- bra.w 16370 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   162d4:	|  \-> move.l 64(sp),-(sp)
   162d8:	|      move.l 64(sp),-(sp)
   162dc:	|      move.l 60(sp),-(sp)
   162e0:	|      move.l 60(sp),-(sp)
   162e4:	|      jsr 177bc <__muldf3>
   162ea:	|      lea 16(sp),sp
   162ee:	|      move.l d0,8(sp)
   162f2:	|      move.l d1,12(sp)
   162f6:	|      move.l 8(sp),40(sp)
   162fc:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   16302:	|      move.l 44(sp),-(sp)
   16306:	|      move.l 44(sp),-(sp)
   1630a:	|      jsr 176ce <__fixdfsi>
   16310:	|      addq.l #8,sp
   16312:	|      movea.l 72(sp),a0
   16316:	|      move.l d0,(a0)
		*closestX += x1;
   16318:	|      movea.l 72(sp),a0
   1631c:	|      move.l (a0),d0
   1631e:	|      add.l 80(sp),d0
   16322:	|      movea.l 72(sp),a0
   16326:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   16328:	|      move.l 56(sp),-(sp)
   1632c:	|      jsr 1772c <__floatsidf>
   16332:	|      addq.l #4,sp
   16334:	|      move.l 52(sp),-(sp)
   16338:	|      move.l 52(sp),-(sp)
   1633c:	|      move.l d1,-(sp)
   1633e:	|      move.l d0,-(sp)
   16340:	|      jsr 177bc <__muldf3>
   16346:	|      lea 16(sp),sp
   1634a:	|      move.l d1,-(sp)
   1634c:	|      move.l d0,-(sp)
   1634e:	|      jsr 176ce <__fixdfsi>
   16354:	|      addq.l #8,sp
   16356:	|      movea.l 76(sp),a0
   1635a:	|      move.l d0,(a0)
		*closestY += y1;
   1635c:	|      movea.l 76(sp),a0
   16360:	|      move.l (a0),d0
   16362:	|      add.l 84(sp),d0
   16366:	|      movea.l 76(sp),a0
   1636a:	|      move.l d0,(a0)
		return TRUE;
   1636c:	|      moveq #1,d0
   1636e:	|  /-- bra.s 16372 <closestPointOnLine+0x21e>
	}
	return FALSE;
   16370:	\--|-> clr.w d0
}
   16372:	   \-> move.l (sp)+,d2
   16374:	       move.l (sp)+,d3
   16376:	       lea 60(sp),sp
   1637a:	       rts

0001637c <drawFloor>:

void drawFloor() {
   1637c:	                lea -12(sp),sp
   16380:	                move.l d3,-(sp)
   16382:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16384:	                clr.l 16(sp)
   16388:	   /----------- bra.w 1659c <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   1638c:	/--|----------> movea.l 1cba4 <currentFloor>,a0
   16392:	|  |            move.l 12(a0),d1
   16396:	|  |            move.l 16(sp),d0
   1639a:	|  |            lsl.l #3,d0
   1639c:	|  |            movea.l d1,a0
   1639e:	|  |            adda.l d0,a0
   163a0:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   163a4:	|  |            moveq #1,d0
   163a6:	|  |            cmp.l 8(sp),d0
   163aa:	|  |  /-------- bge.w 16598 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   163ae:	|  |  |         moveq #1,d0
   163b0:	|  |  |         move.l d0,12(sp)
   163b4:	|  |  |     /-- bra.w 164ae <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   163b8:	|  |  |  /--|-> movea.l 1cba4 <currentFloor>,a0
   163be:	|  |  |  |  |   move.l 4(a0),d1
   163c2:	|  |  |  |  |   movea.l 1cba4 <currentFloor>,a0
   163c8:	|  |  |  |  |   movea.l 12(a0),a0
   163cc:	|  |  |  |  |   move.l 16(sp),d0
   163d0:	|  |  |  |  |   lsl.l #3,d0
   163d2:	|  |  |  |  |   adda.l d0,a0
   163d4:	|  |  |  |  |   movea.l 4(a0),a0
   163d8:	|  |  |  |  |   move.l 12(sp),d0
   163dc:	|  |  |  |  |   add.l d0,d0
   163de:	|  |  |  |  |   add.l d0,d0
   163e0:	|  |  |  |  |   adda.l d0,a0
   163e2:	|  |  |  |  |   move.l (a0),d0
   163e4:	|  |  |  |  |   lsl.l #3,d0
   163e6:	|  |  |  |  |   movea.l d1,a0
   163e8:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   163ea:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   163ee:	|  |  |  |  |   movea.l 1cba4 <currentFloor>,a0
   163f4:	|  |  |  |  |   move.l 4(a0),d1
   163f8:	|  |  |  |  |   movea.l 1cba4 <currentFloor>,a0
   163fe:	|  |  |  |  |   movea.l 12(a0),a0
   16402:	|  |  |  |  |   move.l 16(sp),d0
   16406:	|  |  |  |  |   lsl.l #3,d0
   16408:	|  |  |  |  |   adda.l d0,a0
   1640a:	|  |  |  |  |   movea.l 4(a0),a0
   1640e:	|  |  |  |  |   move.l 12(sp),d0
   16412:	|  |  |  |  |   add.l d0,d0
   16414:	|  |  |  |  |   add.l d0,d0
   16416:	|  |  |  |  |   adda.l d0,a0
   16418:	|  |  |  |  |   move.l (a0),d0
   1641a:	|  |  |  |  |   lsl.l #3,d0
   1641c:	|  |  |  |  |   movea.l d1,a0
   1641e:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16420:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   16422:	|  |  |  |  |   movea.l 1cba4 <currentFloor>,a0
   16428:	|  |  |  |  |   move.l 4(a0),d1
   1642c:	|  |  |  |  |   movea.l 1cba4 <currentFloor>,a0
   16432:	|  |  |  |  |   movea.l 12(a0),a0
   16436:	|  |  |  |  |   move.l 16(sp),d0
   1643a:	|  |  |  |  |   lsl.l #3,d0
   1643c:	|  |  |  |  |   adda.l d0,a0
   1643e:	|  |  |  |  |   movea.l 4(a0),a0
   16442:	|  |  |  |  |   move.l 12(sp),d0
   16446:	|  |  |  |  |   addi.l #1073741823,d0
   1644c:	|  |  |  |  |   add.l d0,d0
   1644e:	|  |  |  |  |   add.l d0,d0
   16450:	|  |  |  |  |   adda.l d0,a0
   16452:	|  |  |  |  |   move.l (a0),d0
   16454:	|  |  |  |  |   lsl.l #3,d0
   16456:	|  |  |  |  |   movea.l d1,a0
   16458:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1645a:	|  |  |  |  |   move.l 4(a0),d1
   1645e:	|  |  |  |  |   movea.l 1cba4 <currentFloor>,a0
   16464:	|  |  |  |  |   move.l 4(a0),d3
   16468:	|  |  |  |  |   movea.l 1cba4 <currentFloor>,a0
   1646e:	|  |  |  |  |   movea.l 12(a0),a0
   16472:	|  |  |  |  |   move.l 16(sp),d0
   16476:	|  |  |  |  |   lsl.l #3,d0
   16478:	|  |  |  |  |   adda.l d0,a0
   1647a:	|  |  |  |  |   movea.l 4(a0),a0
   1647e:	|  |  |  |  |   move.l 12(sp),d0
   16482:	|  |  |  |  |   addi.l #1073741823,d0
   16488:	|  |  |  |  |   add.l d0,d0
   1648a:	|  |  |  |  |   add.l d0,d0
   1648c:	|  |  |  |  |   adda.l d0,a0
   1648e:	|  |  |  |  |   move.l (a0),d0
   16490:	|  |  |  |  |   lsl.l #3,d0
   16492:	|  |  |  |  |   movea.l d3,a0
   16494:	|  |  |  |  |   adda.l d0,a0
   16496:	|  |  |  |  |   move.l (a0),d0
   16498:	|  |  |  |  |   move.l d2,-(sp)
   1649a:	|  |  |  |  |   move.l a1,-(sp)
   1649c:	|  |  |  |  |   move.l d1,-(sp)
   1649e:	|  |  |  |  |   move.l d0,-(sp)
   164a0:	|  |  |  |  |   jsr 3efc <drawLine>
   164a6:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   164aa:	|  |  |  |  |   addq.l #1,12(sp)
   164ae:	|  |  |  |  \-> move.l 12(sp),d0
   164b2:	|  |  |  |      cmp.l 8(sp),d0
   164b6:	|  |  |  \----- blt.w 163b8 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   164ba:	|  |  |         movea.l 1cba4 <currentFloor>,a0
   164c0:	|  |  |         move.l 4(a0),d1
   164c4:	|  |  |         movea.l 1cba4 <currentFloor>,a0
   164ca:	|  |  |         movea.l 12(a0),a0
   164ce:	|  |  |         move.l 16(sp),d0
   164d2:	|  |  |         lsl.l #3,d0
   164d4:	|  |  |         adda.l d0,a0
   164d6:	|  |  |         movea.l 4(a0),a0
   164da:	|  |  |         move.l 8(sp),d0
   164de:	|  |  |         addi.l #1073741823,d0
   164e4:	|  |  |         add.l d0,d0
   164e6:	|  |  |         add.l d0,d0
   164e8:	|  |  |         adda.l d0,a0
   164ea:	|  |  |         move.l (a0),d0
   164ec:	|  |  |         lsl.l #3,d0
   164ee:	|  |  |         movea.l d1,a0
   164f0:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   164f2:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   164f6:	|  |  |         movea.l 1cba4 <currentFloor>,a0
   164fc:	|  |  |         move.l 4(a0),d1
   16500:	|  |  |         movea.l 1cba4 <currentFloor>,a0
   16506:	|  |  |         movea.l 12(a0),a0
   1650a:	|  |  |         move.l 16(sp),d0
   1650e:	|  |  |         lsl.l #3,d0
   16510:	|  |  |         adda.l d0,a0
   16512:	|  |  |         movea.l 4(a0),a0
   16516:	|  |  |         move.l 8(sp),d0
   1651a:	|  |  |         addi.l #1073741823,d0
   16520:	|  |  |         add.l d0,d0
   16522:	|  |  |         add.l d0,d0
   16524:	|  |  |         adda.l d0,a0
   16526:	|  |  |         move.l (a0),d0
   16528:	|  |  |         lsl.l #3,d0
   1652a:	|  |  |         movea.l d1,a0
   1652c:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1652e:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16530:	|  |  |         movea.l 1cba4 <currentFloor>,a0
   16536:	|  |  |         move.l 4(a0),d1
   1653a:	|  |  |         movea.l 1cba4 <currentFloor>,a0
   16540:	|  |  |         movea.l 12(a0),a0
   16544:	|  |  |         move.l 16(sp),d0
   16548:	|  |  |         lsl.l #3,d0
   1654a:	|  |  |         adda.l d0,a0
   1654c:	|  |  |         movea.l 4(a0),a0
   16550:	|  |  |         move.l (a0),d0
   16552:	|  |  |         lsl.l #3,d0
   16554:	|  |  |         movea.l d1,a0
   16556:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16558:	|  |  |         move.l 4(a0),d1
   1655c:	|  |  |         movea.l 1cba4 <currentFloor>,a0
   16562:	|  |  |         move.l 4(a0),d3
   16566:	|  |  |         movea.l 1cba4 <currentFloor>,a0
   1656c:	|  |  |         movea.l 12(a0),a0
   16570:	|  |  |         move.l 16(sp),d0
   16574:	|  |  |         lsl.l #3,d0
   16576:	|  |  |         adda.l d0,a0
   16578:	|  |  |         movea.l 4(a0),a0
   1657c:	|  |  |         move.l (a0),d0
   1657e:	|  |  |         lsl.l #3,d0
   16580:	|  |  |         movea.l d3,a0
   16582:	|  |  |         adda.l d0,a0
   16584:	|  |  |         move.l (a0),d0
   16586:	|  |  |         move.l d2,-(sp)
   16588:	|  |  |         move.l a1,-(sp)
   1658a:	|  |  |         move.l d1,-(sp)
   1658c:	|  |  |         move.l d0,-(sp)
   1658e:	|  |  |         jsr 3efc <drawLine>
   16594:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16598:	|  |  \-------> addq.l #1,16(sp)
   1659c:	|  \----------> movea.l 1cba4 <currentFloor>,a0
   165a2:	|               move.l 8(a0),d0
   165a6:	|               cmp.l 16(sp),d0
   165aa:	\-------------- bgt.w 1638c <drawFloor+0x10>
        }
    }
}
   165ae:	                nop
   165b0:	                nop
   165b2:	                move.l (sp)+,d2
   165b4:	                move.l (sp)+,d3
   165b6:	                lea 12(sp),sp
   165ba:	                rts

000165bc <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   165bc:	                      lea -12(sp),sp
    int sharedVertices = 0;
   165c0:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   165c4:	                      clr.l 4(sp)
   165c8:	   /----------------- bra.w 1665a <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   165cc:	/--|----------------> clr.l (sp)
   165ce:	|  |     /----------- bra.s 1664a <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   165d0:	|  |  /--|----------> movea.l 16(sp),a0
   165d4:	|  |  |  |            move.l 4(a0),d1
   165d8:	|  |  |  |            move.l 4(sp),d0
   165dc:	|  |  |  |            add.l d0,d0
   165de:	|  |  |  |            add.l d0,d0
   165e0:	|  |  |  |            movea.l d1,a0
   165e2:	|  |  |  |            adda.l d0,a0
   165e4:	|  |  |  |            move.l (a0),d1
   165e6:	|  |  |  |            movea.l 20(sp),a0
   165ea:	|  |  |  |            movea.l 4(a0),a0
   165ee:	|  |  |  |            move.l (sp),d0
   165f0:	|  |  |  |            add.l d0,d0
   165f2:	|  |  |  |            add.l d0,d0
   165f4:	|  |  |  |            adda.l d0,a0
   165f6:	|  |  |  |            move.l (a0),d0
   165f8:	|  |  |  |            cmp.l d1,d0
   165fa:	|  |  |  |  /-------- bne.s 16648 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   165fc:	|  |  |  |  |         move.l 8(sp),d0
   16600:	|  |  |  |  |         move.l d0,d1
   16602:	|  |  |  |  |         addq.l #1,d1
   16604:	|  |  |  |  |         move.l d1,8(sp)
   16608:	|  |  |  |  |         tst.l d0
   1660a:	|  |  |  |  |     /-- beq.s 1662c <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   1660c:	|  |  |  |  |     |   movea.l 16(sp),a0
   16610:	|  |  |  |  |     |   move.l 4(a0),d1
   16614:	|  |  |  |  |     |   move.l 4(sp),d0
   16618:	|  |  |  |  |     |   add.l d0,d0
   1661a:	|  |  |  |  |     |   add.l d0,d0
   1661c:	|  |  |  |  |     |   movea.l d1,a0
   1661e:	|  |  |  |  |     |   adda.l d0,a0
   16620:	|  |  |  |  |     |   move.l (a0),d0
   16622:	|  |  |  |  |     |   movea.l 28(sp),a0
   16626:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16628:	|  |  |  |  |     |   moveq #1,d0
   1662a:	|  |  |  |  |  /--|-- bra.s 1666a <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   1662c:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   16630:	|  |  |  |  |  |      move.l 4(a0),d1
   16634:	|  |  |  |  |  |      move.l 4(sp),d0
   16638:	|  |  |  |  |  |      add.l d0,d0
   1663a:	|  |  |  |  |  |      add.l d0,d0
   1663c:	|  |  |  |  |  |      movea.l d1,a0
   1663e:	|  |  |  |  |  |      adda.l d0,a0
   16640:	|  |  |  |  |  |      move.l (a0),d0
   16642:	|  |  |  |  |  |      movea.l 24(sp),a0
   16646:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   16648:	|  |  |  |  \--|----> addq.l #1,(sp)
   1664a:	|  |  |  \-----|----> movea.l 20(sp),a0
   1664e:	|  |  |        |      move.l (a0),d0
   16650:	|  |  |        |      cmp.l (sp),d0
   16652:	|  |  \--------|----- bgt.w 165d0 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16656:	|  |           |      addq.l #1,4(sp)
   1665a:	|  \-----------|----> movea.l 16(sp),a0
   1665e:	|              |      move.l (a0),d0
   16660:	|              |      cmp.l 4(sp),d0
   16664:	\--------------|----- bgt.w 165cc <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   16668:	               |      clr.w d0
}
   1666a:	               \----> lea 12(sp),sp
   1666e:	                      rts

00016670 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   16670:	movea.l 1cba4 <currentFloor>,a0
   16676:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   1667a:	movea.l 1cba4 <currentFloor>,a0
   16680:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   16684:	movea.l 1cba4 <currentFloor>,a0
   1668a:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   1668e:	movea.l 1cba4 <currentFloor>,a0
   16694:	clr.l 16(a0)
}
   16698:	nop
   1669a:	rts

0001669c <inFloor>:

int inFloor (int x, int y) {
   1669c:	          subq.l #8,sp
	int i, r = -1;
   1669e:	          moveq #-1,d0
   166a0:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   166a2:	          clr.l 4(sp)
   166a6:	   /----- bra.s 166da <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   166a8:	/--|----> movea.l 1cba4 <currentFloor>,a0
   166ae:	|  |      move.l 12(a0),d1
   166b2:	|  |      move.l 4(sp),d0
   166b6:	|  |      lsl.l #3,d0
   166b8:	|  |      add.l d1,d0
   166ba:	|  |      move.l 16(sp),-(sp)
   166be:	|  |      move.l 16(sp),-(sp)
   166c2:	|  |      move.l d0,-(sp)
   166c4:	|  |      jsr 168a6 <pointInFloorPolygon>
   166ca:	|  |      lea 12(sp),sp
   166ce:	|  |      tst.w d0
   166d0:	|  |  /-- beq.s 166d6 <inFloor+0x3a>
			r = i;
   166d2:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   166d6:	|  |  \-> addq.l #1,4(sp)
   166da:	|  \----> movea.l 1cba4 <currentFloor>,a0
   166e0:	|         move.l 8(a0),d0
   166e4:	|         cmp.l 4(sp),d0
   166e8:	\-------- bgt.s 166a8 <inFloor+0xc>

	return r;
   166ea:	          move.l (sp),d0
}
   166ec:	          addq.l #8,sp
   166ee:	          rts

000166f0 <initFloor>:

BOOL initFloor () {
   166f0:	       lea -12(sp),sp
   166f4:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   166f6:	       moveq #20,d0
   166f8:	       move.l d0,12(sp)
   166fc:	       clr.l 8(sp)
   16700:	       move.l 1ca88 <SysBase>,d0
   16706:	       movea.l d0,a6
   16708:	       move.l 12(sp),d0
   1670c:	       move.l 8(sp),d1
   16710:	       jsr -684(a6)
   16714:	       move.l d0,4(sp)
   16718:	       move.l 4(sp),d0
   1671c:	       move.l d0,1cba4 <currentFloor>

    if(currentFloor == 0) {
   16722:	       move.l 1cba4 <currentFloor>,d0
   16728:	/----- bne.s 1673c <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   1672a:	|      pea 1a1d5 <newfatal.c.307beca7+0x1ed>
   16730:	|      jsr 1733a <KPrintF>
   16736:	|      addq.l #4,sp
        return FALSE;
   16738:	|      clr.w d0
   1673a:	|  /-- bra.s 16744 <initFloor+0x54>
    }

	noFloor ();
   1673c:	\--|-> jsr 16670 <noFloor>
	return TRUE;
   16742:	   |   moveq #1,d0
}
   16744:	   \-> movea.l (sp)+,a6
   16746:	       lea 12(sp),sp
   1674a:	       rts

0001674c <killFloor>:

void killFloor () {
   1674c:	       lea -24(sp),sp
   16750:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16752:	       clr.l 24(sp)
   16756:	   /-- bra.s 167b0 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16758:	/--|-> movea.l 1cba4 <currentFloor>,a0
   1675e:	|  |   move.l 12(a0),d1
   16762:	|  |   move.l 24(sp),d0
   16766:	|  |   lsl.l #3,d0
   16768:	|  |   movea.l d1,a0
   1676a:	|  |   adda.l d0,a0
   1676c:	|  |   move.l 4(a0),8(sp)
   16772:	|  |   move.l 1ca88 <SysBase>,d0
   16778:	|  |   movea.l d0,a6
   1677a:	|  |   movea.l 8(sp),a1
   1677e:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16782:	|  |   movea.l 1cba4 <currentFloor>,a0
   16788:	|  |   move.l 16(a0),d1
   1678c:	|  |   move.l 24(sp),d0
   16790:	|  |   add.l d0,d0
   16792:	|  |   add.l d0,d0
   16794:	|  |   movea.l d1,a0
   16796:	|  |   adda.l d0,a0
   16798:	|  |   move.l (a0),4(sp)
   1679c:	|  |   move.l 1ca88 <SysBase>,d0
   167a2:	|  |   movea.l d0,a6
   167a4:	|  |   movea.l 4(sp),a1
   167a8:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   167ac:	|  |   addq.l #1,24(sp)
   167b0:	|  \-> movea.l 1cba4 <currentFloor>,a0
   167b6:	|      move.l 8(a0),d0
   167ba:	|      cmp.l 24(sp),d0
   167be:	\----- bgt.s 16758 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   167c0:	       movea.l 1cba4 <currentFloor>,a0
   167c6:	       move.l 12(a0),20(sp)
   167cc:	       move.l 1ca88 <SysBase>,d0
   167d2:	       movea.l d0,a6
   167d4:	       movea.l 20(sp),a1
   167d8:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   167dc:	       movea.l 1cba4 <currentFloor>,a0
   167e2:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   167e6:	       movea.l 1cba4 <currentFloor>,a0
   167ec:	       move.l 4(a0),16(sp)
   167f2:	       move.l 1ca88 <SysBase>,d0
   167f8:	       movea.l d0,a6
   167fa:	       movea.l 16(sp),a1
   167fe:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16802:	       movea.l 1cba4 <currentFloor>,a0
   16808:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   1680c:	       movea.l 1cba4 <currentFloor>,a0
   16812:	       move.l 16(a0),12(sp)
   16818:	       move.l 1ca88 <SysBase>,d0
   1681e:	       movea.l d0,a6
   16820:	       movea.l 12(sp),a1
   16824:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16828:	       movea.l 1cba4 <currentFloor>,a0
   1682e:	       clr.l 16(a0)
}
   16832:	       nop
   16834:	       movea.l (sp)+,a6
   16836:	       lea 24(sp),sp
   1683a:	       rts

0001683c <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   1683c:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16840:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16844:	                   clr.l 4(sp)
   16848:	   /-------------- bra.s 16894 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   1684a:	/--|-------------> clr.l (sp)
   1684c:	|  |     /-------- bra.s 16888 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   1684e:	|  |  /--|-------> move.l 20(sp),d1
   16852:	|  |  |  |         move.l 4(sp),d0
   16856:	|  |  |  |         add.l d0,d0
   16858:	|  |  |  |         add.l d0,d0
   1685a:	|  |  |  |         movea.l d1,a0
   1685c:	|  |  |  |         adda.l d0,a0
   1685e:	|  |  |  |         move.l (a0),d1
   16860:	|  |  |  |         movea.l 28(sp),a0
   16864:	|  |  |  |         move.l (sp),d0
   16866:	|  |  |  |         add.l d0,d0
   16868:	|  |  |  |         add.l d0,d0
   1686a:	|  |  |  |         adda.l d0,a0
   1686c:	|  |  |  |         move.l (a0),d0
   1686e:	|  |  |  |         cmp.l d1,d0
   16870:	|  |  |  |     /-- bne.s 16886 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16872:	|  |  |  |     |   move.l 8(sp),d0
   16876:	|  |  |  |     |   move.l d0,d1
   16878:	|  |  |  |     |   addq.l #1,d1
   1687a:	|  |  |  |     |   move.l d1,8(sp)
   1687e:	|  |  |  |     |   tst.l d0
   16880:	|  |  |  |     +-- beq.s 16886 <polysShareSide+0x4a>
   16882:	|  |  |  |     |   moveq #1,d0
   16884:	|  |  |  |  /--|-- bra.s 168a0 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16886:	|  |  |  |  |  \-> addq.l #1,(sp)
   16888:	|  |  |  \--|----> move.l 24(sp),d0
   1688c:	|  |  |     |      cmp.l (sp),d0
   1688e:	|  |  \-----|----- bgt.s 1684e <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16890:	|  |        |      addq.l #1,4(sp)
   16894:	|  \--------|----> move.l 16(sp),d0
   16898:	|           |      cmp.l 4(sp),d0
   1689c:	\-----------|----- bgt.s 1684a <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   1689e:	            |      clr.w d0
}
   168a0:	            \----> lea 12(sp),sp
   168a4:	                   rts

000168a6 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   168a6:	             lea -28(sp),sp
   168aa:	             move.l d3,-(sp)
   168ac:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   168ae:	             clr.l 32(sp)
   168b2:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   168b6:	             movea.l 40(sp),a0
   168ba:	             move.l (a0),d0
   168bc:	             move.l d0,d1
   168be:	             subq.l #1,d1
   168c0:	             move.l d1,28(sp)
   168c4:	   /-------- bra.w 16abe <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   168c8:	/--|-------> movea.l 1cba4 <currentFloor>,a0
   168ce:	|  |         move.l 4(a0),d1
   168d2:	|  |         movea.l 40(sp),a0
   168d6:	|  |         movea.l 4(a0),a0
   168da:	|  |         move.l 32(sp),d0
   168de:	|  |         add.l d0,d0
   168e0:	|  |         add.l d0,d0
   168e2:	|  |         adda.l d0,a0
   168e4:	|  |         move.l (a0),d0
   168e6:	|  |         lsl.l #3,d0
   168e8:	|  |         movea.l d1,a0
   168ea:	|  |         adda.l d0,a0
   168ec:	|  |         move.l (a0),d0
   168ee:	|  |         move.l d0,-(sp)
   168f0:	|  |         jsr 1776c <__floatsisf>
   168f6:	|  |         addq.l #4,sp
   168f8:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   168fc:	|  |         movea.l 1cba4 <currentFloor>,a0
   16902:	|  |         move.l 4(a0),d1
   16906:	|  |         movea.l 40(sp),a0
   1690a:	|  |         movea.l 4(a0),a0
   1690e:	|  |         move.l 32(sp),d0
   16912:	|  |         add.l d0,d0
   16914:	|  |         add.l d0,d0
   16916:	|  |         adda.l d0,a0
   16918:	|  |         move.l (a0),d0
   1691a:	|  |         lsl.l #3,d0
   1691c:	|  |         movea.l d1,a0
   1691e:	|  |         adda.l d0,a0
   16920:	|  |         move.l 4(a0),d0
   16924:	|  |         move.l d0,-(sp)
   16926:	|  |         jsr 1776c <__floatsisf>
   1692c:	|  |         addq.l #4,sp
   1692e:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16932:	|  |         movea.l 1cba4 <currentFloor>,a0
   16938:	|  |         move.l 4(a0),d1
   1693c:	|  |         movea.l 40(sp),a0
   16940:	|  |         movea.l 4(a0),a0
   16944:	|  |         move.l 28(sp),d0
   16948:	|  |         add.l d0,d0
   1694a:	|  |         add.l d0,d0
   1694c:	|  |         adda.l d0,a0
   1694e:	|  |         move.l (a0),d0
   16950:	|  |         lsl.l #3,d0
   16952:	|  |         movea.l d1,a0
   16954:	|  |         adda.l d0,a0
   16956:	|  |         move.l (a0),d0
   16958:	|  |         move.l d0,-(sp)
   1695a:	|  |         jsr 1776c <__floatsisf>
   16960:	|  |         addq.l #4,sp
   16962:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16966:	|  |         movea.l 1cba4 <currentFloor>,a0
   1696c:	|  |         move.l 4(a0),d1
   16970:	|  |         movea.l 40(sp),a0
   16974:	|  |         movea.l 4(a0),a0
   16978:	|  |         move.l 28(sp),d0
   1697c:	|  |         add.l d0,d0
   1697e:	|  |         add.l d0,d0
   16980:	|  |         adda.l d0,a0
   16982:	|  |         move.l (a0),d0
   16984:	|  |         lsl.l #3,d0
   16986:	|  |         movea.l d1,a0
   16988:	|  |         adda.l d0,a0
   1698a:	|  |         move.l 4(a0),d0
   1698e:	|  |         move.l d0,-(sp)
   16990:	|  |         jsr 1776c <__floatsisf>
   16996:	|  |         addq.l #4,sp
   16998:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   1699c:	|  |         move.l 48(sp),-(sp)
   169a0:	|  |         jsr 1776c <__floatsisf>
   169a6:	|  |         addq.l #4,sp
   169a8:	|  |         move.l d0,-(sp)
   169aa:	|  |         move.l 20(sp),-(sp)
   169ae:	|  |         jsr 1790e <__lesf2>
   169b4:	|  |         addq.l #8,sp
   169b6:	|  |         tst.l d0
   169b8:	|  |     /-- bgt.s 169d8 <pointInFloorPolygon+0x132>
   169ba:	|  |     |   move.l 48(sp),-(sp)
   169be:	|  |     |   jsr 1776c <__floatsisf>
   169c4:	|  |     |   addq.l #4,sp
   169c6:	|  |     |   move.l d0,-(sp)
   169c8:	|  |     |   move.l 12(sp),-(sp)
   169cc:	|  |     |   jsr 178d8 <__gtsf2>
   169d2:	|  |     |   addq.l #8,sp
   169d4:	|  |     |   tst.l d0
   169d6:	|  |  /--|-- bgt.s 16a18 <pointInFloorPolygon+0x172>
   169d8:	|  |  |  \-> move.l 48(sp),-(sp)
   169dc:	|  |  |      jsr 1776c <__floatsisf>
   169e2:	|  |  |      addq.l #4,sp
   169e4:	|  |  |      move.l d0,-(sp)
   169e6:	|  |  |      move.l 12(sp),-(sp)
   169ea:	|  |  |      jsr 1790e <__lesf2>
   169f0:	|  |  |      addq.l #8,sp
   169f2:	|  |  |      tst.l d0
   169f4:	|  |  |  /-- bgt.w 16aae <pointInFloorPolygon+0x208>
   169f8:	|  |  |  |   move.l 48(sp),-(sp)
   169fc:	|  |  |  |   jsr 1776c <__floatsisf>
   16a02:	|  |  |  |   addq.l #4,sp
   16a04:	|  |  |  |   move.l d0,-(sp)
   16a06:	|  |  |  |   move.l 20(sp),-(sp)
   16a0a:	|  |  |  |   jsr 178d8 <__gtsf2>
   16a10:	|  |  |  |   addq.l #8,sp
   16a12:	|  |  |  |   tst.l d0
   16a14:	|  |  |  +-- ble.w 16aae <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16a18:	|  |  \--|-> move.l 44(sp),-(sp)
   16a1c:	|  |     |   jsr 1776c <__floatsisf>
   16a22:	|  |     |   addq.l #4,sp
   16a24:	|  |     |   move.l d0,d3
   16a26:	|  |     |   move.l 20(sp),-(sp)
   16a2a:	|  |     |   move.l 16(sp),-(sp)
   16a2e:	|  |     |   jsr 17a60 <__subsf3>
   16a34:	|  |     |   addq.l #8,sp
   16a36:	|  |     |   move.l d0,d2
   16a38:	|  |     |   move.l 48(sp),-(sp)
   16a3c:	|  |     |   jsr 1776c <__floatsisf>
   16a42:	|  |     |   addq.l #4,sp
   16a44:	|  |     |   move.l 16(sp),-(sp)
   16a48:	|  |     |   move.l d0,-(sp)
   16a4a:	|  |     |   jsr 17a60 <__subsf3>
   16a50:	|  |     |   addq.l #8,sp
   16a52:	|  |     |   move.l d0,-(sp)
   16a54:	|  |     |   move.l d2,-(sp)
   16a56:	|  |     |   jsr 1781e <__mulsf3>
   16a5c:	|  |     |   addq.l #8,sp
   16a5e:	|  |     |   move.l d0,d2
   16a60:	|  |     |   move.l 16(sp),-(sp)
   16a64:	|  |     |   move.l 12(sp),-(sp)
   16a68:	|  |     |   jsr 17a60 <__subsf3>
   16a6e:	|  |     |   addq.l #8,sp
   16a70:	|  |     |   move.l d0,-(sp)
   16a72:	|  |     |   move.l d2,-(sp)
   16a74:	|  |     |   jsr 17622 <__divsf3>
   16a7a:	|  |     |   addq.l #8,sp
   16a7c:	|  |     |   move.l 20(sp),-(sp)
   16a80:	|  |     |   move.l d0,-(sp)
   16a82:	|  |     |   jsr 17528 <__addsf3>
   16a88:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16a8a:	|  |     |   move.l d0,-(sp)
   16a8c:	|  |     |   move.l d3,-(sp)
   16a8e:	|  |     |   jsr 17992 <__ltsf2>
   16a94:	|  |     |   addq.l #8,sp
   16a96:	|  |     |   tst.l d0
   16a98:	|  |     +-- bge.s 16aae <pointInFloorPolygon+0x208>

			c = !c;
   16a9a:	|  |     |   tst.l 24(sp)
   16a9e:	|  |     |   seq d0
   16aa0:	|  |     |   neg.b d0
   16aa2:	|  |     |   move.b d0,d0
   16aa4:	|  |     |   andi.l #255,d0
   16aaa:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16aae:	|  |     \-> move.l 32(sp),d0
   16ab2:	|  |         move.l d0,d1
   16ab4:	|  |         addq.l #1,d1
   16ab6:	|  |         move.l d1,32(sp)
   16aba:	|  |         move.l d0,28(sp)
   16abe:	|  \-------> movea.l 40(sp),a0
   16ac2:	|            move.l (a0),d0
   16ac4:	|            cmp.l 32(sp),d0
   16ac8:	\----------- bgt.w 168c8 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16acc:	             tst.l 24(sp)
   16ad0:	             sne d0
   16ad2:	             neg.b d0
   16ad4:	             move.b d0,d0
   16ad6:	             andi.w #255,d0
}
   16ada:	             move.l (sp)+,d2
   16adc:	             move.l (sp)+,d3
   16ade:	             lea 28(sp),sp
   16ae2:	             rts

00016ae4 <setFloor>:

BOOL setFloor (int fileNum) {
   16ae4:	                               lea -132(sp),sp
   16ae8:	                               move.l a6,-(sp)
   16aea:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16aec:	                               jsr 1674c <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16af2:	                               move.l 144(sp),-(sp)
   16af6:	                               jsr 6e10 <openFileFromNum>
   16afc:	                               addq.l #4,sp
   16afe:	                               tst.l d0
   16b00:	                           /-- bne.s 16b08 <setFloor+0x24>
   16b02:	                           |   clr.w d0
   16b04:	/--------------------------|-- bra.w 17254 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16b08:	|                          \-> movea.l 1cba4 <currentFloor>,a0
   16b0e:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16b12:	|                              move.l 1ca70 <bigDataFile>,118(sp)
   16b1a:	|                              move.l 1ca90 <DOSBase>,d0
   16b20:	|                              movea.l d0,a6
   16b22:	|                              move.l 118(sp),d1
   16b26:	|                              jsr -306(a6)
   16b2a:	|                              move.l d0,114(sp)
   16b2e:	|                              move.l 114(sp),d0
   16b32:	|                              movea.l 1cba4 <currentFloor>,a0
   16b38:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16b3c:	|                              movea.l 1cba4 <currentFloor>,a0
   16b42:	|                              move.l 8(a0),d0
   16b46:	|                              lsl.l #3,d0
   16b48:	|                              move.l d0,110(sp)
   16b4c:	|                              clr.l 106(sp)
   16b50:	|                              move.l 1ca88 <SysBase>,d0
   16b56:	|                              movea.l d0,a6
   16b58:	|                              move.l 110(sp),d0
   16b5c:	|                              move.l 106(sp),d1
   16b60:	|                              jsr -684(a6)
   16b64:	|                              move.l d0,102(sp)
   16b68:	|                              move.l 102(sp),d0
   16b6c:	|                              movea.l 1cba4 <currentFloor>,a0
   16b72:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16b76:	|                              movea.l 1cba4 <currentFloor>,a0
   16b7c:	|                              move.l 12(a0),d0
   16b80:	|                          /-- bne.s 16b96 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16b82:	|                          |   pea 1a1f9 <main_sludge.c.c09e4a78+0x13>
   16b88:	|                          |   jsr 1733a <KPrintF>
   16b8e:	|                          |   addq.l #4,sp
		return FALSE;
   16b90:	|                          |   clr.w d0
   16b92:	+--------------------------|-- bra.w 17254 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b96:	|                          \-> clr.l 136(sp)
   16b9a:	|                    /-------- bra.w 16cb2 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16b9e:	|                 /--|-------> move.l 1ca70 <bigDataFile>,26(sp)
   16ba6:	|                 |  |         move.l 1ca90 <DOSBase>,d0
   16bac:	|                 |  |         movea.l d0,a6
   16bae:	|                 |  |         move.l 26(sp),d1
   16bb2:	|                 |  |         jsr -306(a6)
   16bb6:	|                 |  |         move.l d0,22(sp)
   16bba:	|                 |  |         move.l 22(sp),d1
   16bbe:	|                 |  |         movea.l 1cba4 <currentFloor>,a0
   16bc4:	|                 |  |         movea.l 12(a0),a0
   16bc8:	|                 |  |         move.l 136(sp),d0
   16bcc:	|                 |  |         lsl.l #3,d0
   16bce:	|                 |  |         adda.l d0,a0
   16bd0:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16bd2:	|                 |  |         movea.l 1cba4 <currentFloor>,a0
   16bd8:	|                 |  |         move.l 12(a0),d1
   16bdc:	|                 |  |         move.l 136(sp),d0
   16be0:	|                 |  |         lsl.l #3,d0
   16be2:	|                 |  |         movea.l d1,a0
   16be4:	|                 |  |         adda.l d0,a0
   16be6:	|                 |  |         move.l (a0),d0
   16be8:	|                 |  |         add.l d0,d0
   16bea:	|                 |  |         add.l d0,d0
   16bec:	|                 |  |         move.l d0,18(sp)
   16bf0:	|                 |  |         clr.l 14(sp)
   16bf4:	|                 |  |         move.l 1ca88 <SysBase>,d0
   16bfa:	|                 |  |         movea.l d0,a6
   16bfc:	|                 |  |         move.l 18(sp),d0
   16c00:	|                 |  |         move.l 14(sp),d1
   16c04:	|                 |  |         jsr -684(a6)
   16c08:	|                 |  |         move.l d0,10(sp)
   16c0c:	|                 |  |         move.l 10(sp),d1
   16c10:	|                 |  |         movea.l 1cba4 <currentFloor>,a0
   16c16:	|                 |  |         movea.l 12(a0),a0
   16c1a:	|                 |  |         move.l 136(sp),d0
   16c1e:	|                 |  |         lsl.l #3,d0
   16c20:	|                 |  |         adda.l d0,a0
   16c22:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16c26:	|                 |  |         movea.l 1cba4 <currentFloor>,a0
   16c2c:	|                 |  |         move.l 12(a0),d1
   16c30:	|                 |  |         move.l 136(sp),d0
   16c34:	|                 |  |         lsl.l #3,d0
   16c36:	|                 |  |         movea.l d1,a0
   16c38:	|                 |  |         adda.l d0,a0
   16c3a:	|                 |  |         move.l 4(a0),d0
   16c3e:	|                 |  |     /-- bne.s 16c54 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16c40:	|                 |  |     |   pea 1a1f9 <main_sludge.c.c09e4a78+0x13>
   16c46:	|                 |  |     |   jsr 1733a <KPrintF>
   16c4c:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16c4e:	|                 |  |     |   clr.w d0
   16c50:	+-----------------|--|-----|-- bra.w 17254 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16c54:	|                 |  |     \-> clr.l 132(sp)
   16c58:	|                 |  |     /-- bra.s 16c92 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16c5a:	|                 |  |  /--|-> move.l 1ca70 <bigDataFile>,d1
   16c60:	|                 |  |  |  |   movea.l 1cba4 <currentFloor>,a0
   16c66:	|                 |  |  |  |   movea.l 12(a0),a0
   16c6a:	|                 |  |  |  |   move.l 136(sp),d0
   16c6e:	|                 |  |  |  |   lsl.l #3,d0
   16c70:	|                 |  |  |  |   adda.l d0,a0
   16c72:	|                 |  |  |  |   movea.l 4(a0),a0
   16c76:	|                 |  |  |  |   move.l 132(sp),d0
   16c7a:	|                 |  |  |  |   add.l d0,d0
   16c7c:	|                 |  |  |  |   add.l d0,d0
   16c7e:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16c82:	|                 |  |  |  |   move.l d1,-(sp)
   16c84:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16c8a:	|                 |  |  |  |   addq.l #4,sp
   16c8c:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16c8e:	|                 |  |  |  |   addq.l #1,132(sp)
   16c92:	|                 |  |  |  \-> movea.l 1cba4 <currentFloor>,a0
   16c98:	|                 |  |  |      move.l 12(a0),d1
   16c9c:	|                 |  |  |      move.l 136(sp),d0
   16ca0:	|                 |  |  |      lsl.l #3,d0
   16ca2:	|                 |  |  |      movea.l d1,a0
   16ca4:	|                 |  |  |      adda.l d0,a0
   16ca6:	|                 |  |  |      move.l (a0),d0
   16ca8:	|                 |  |  |      cmp.l 132(sp),d0
   16cac:	|                 |  |  \----- bgt.s 16c5a <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16cae:	|                 |  |         addq.l #1,136(sp)
   16cb2:	|                 |  \-------> movea.l 1cba4 <currentFloor>,a0
   16cb8:	|                 |            move.l 8(a0),d0
   16cbc:	|                 |            cmp.l 136(sp),d0
   16cc0:	|                 \----------- bgt.w 16b9e <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16cc4:	|                              move.l 1ca70 <bigDataFile>,d0
   16cca:	|                              move.l d0,-(sp)
   16ccc:	|                              jsr 6bc <get2bytes>
   16cd2:	|                              addq.l #4,sp
   16cd4:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16cd8:	|                              move.l 136(sp),d0
   16cdc:	|                              lsl.l #3,d0
   16cde:	|                              move.l d0,98(sp)
   16ce2:	|                              clr.l 94(sp)
   16ce6:	|                              move.l 1ca88 <SysBase>,d0
   16cec:	|                              movea.l d0,a6
   16cee:	|                              move.l 98(sp),d0
   16cf2:	|                              move.l 94(sp),d1
   16cf6:	|                              jsr -684(a6)
   16cfa:	|                              move.l d0,90(sp)
   16cfe:	|                              move.l 90(sp),d0
   16d02:	|                              movea.l 1cba4 <currentFloor>,a0
   16d08:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16d0c:	|                              movea.l 1cba4 <currentFloor>,a0
   16d12:	|                              move.l 4(a0),d0
   16d16:	|                          /-- bne.s 16d2c <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16d18:	|                          |   pea 1a1f9 <main_sludge.c.c09e4a78+0x13>
   16d1e:	|                          |   jsr 1733a <KPrintF>
   16d24:	|                          |   addq.l #4,sp
		return FALSE;
   16d26:	|                          |   clr.w d0
   16d28:	+--------------------------|-- bra.w 17254 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16d2c:	|                          \-> clr.l 132(sp)
   16d30:	|                          /-- bra.s 16d84 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16d32:	|                       /--|-> move.l 1ca70 <bigDataFile>,d1
   16d38:	|                       |  |   movea.l 1cba4 <currentFloor>,a0
   16d3e:	|                       |  |   movea.l 4(a0),a0
   16d42:	|                       |  |   move.l 132(sp),d0
   16d46:	|                       |  |   lsl.l #3,d0
   16d48:	|                       |  |   lea (0,a0,d0.l),a2
   16d4c:	|                       |  |   move.l d1,-(sp)
   16d4e:	|                       |  |   jsr 6bc <get2bytes>
   16d54:	|                       |  |   addq.l #4,sp
   16d56:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16d58:	|                       |  |   move.l 1ca70 <bigDataFile>,d1
   16d5e:	|                       |  |   movea.l 1cba4 <currentFloor>,a0
   16d64:	|                       |  |   movea.l 4(a0),a0
   16d68:	|                       |  |   move.l 132(sp),d0
   16d6c:	|                       |  |   lsl.l #3,d0
   16d6e:	|                       |  |   lea (0,a0,d0.l),a2
   16d72:	|                       |  |   move.l d1,-(sp)
   16d74:	|                       |  |   jsr 6bc <get2bytes>
   16d7a:	|                       |  |   addq.l #4,sp
   16d7c:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16d80:	|                       |  |   addq.l #1,132(sp)
   16d84:	|                       |  \-> move.l 132(sp),d0
   16d88:	|                       |      cmp.l 136(sp),d0
   16d8c:	|                       \----- blt.s 16d32 <setFloor+0x24e>
	}

	finishAccess ();
   16d8e:	|                              jsr 6d08 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16d94:	|                              movea.l 1cba4 <currentFloor>,a0
   16d9a:	|                              move.l 8(a0),d0
   16d9e:	|                              add.l d0,d0
   16da0:	|                              add.l d0,d0
   16da2:	|                              move.l d0,86(sp)
   16da6:	|                              clr.l 82(sp)
   16daa:	|                              move.l 1ca88 <SysBase>,d0
   16db0:	|                              movea.l d0,a6
   16db2:	|                              move.l 86(sp),d0
   16db6:	|                              move.l 82(sp),d1
   16dba:	|                              jsr -684(a6)
   16dbe:	|                              move.l d0,78(sp)
   16dc2:	|                              move.l 78(sp),d0
   16dc6:	|                              movea.l 1cba4 <currentFloor>,a0
   16dcc:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16dd0:	|                              movea.l 1cba4 <currentFloor>,a0
   16dd6:	|                              move.l 8(a0),d0
   16dda:	|                              add.l d0,d0
   16ddc:	|                              add.l d0,d0
   16dde:	|                              move.l d0,74(sp)
   16de2:	|                              clr.l 70(sp)
   16de6:	|                              move.l 1ca88 <SysBase>,d0
   16dec:	|                              movea.l d0,a6
   16dee:	|                              move.l 74(sp),d0
   16df2:	|                              move.l 70(sp),d1
   16df6:	|                              jsr -684(a6)
   16dfa:	|                              move.l d0,66(sp)
   16dfe:	|                              move.l 66(sp),d0
   16e02:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16e06:	|                              movea.l 1cba4 <currentFloor>,a0
   16e0c:	|                              move.l 16(a0),d0
   16e10:	|                          /-- bne.s 16e26 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16e12:	|                          |   pea 1a1f9 <main_sludge.c.c09e4a78+0x13>
   16e18:	|                          |   jsr 1733a <KPrintF>
   16e1e:	|                          |   addq.l #4,sp
		return FALSE;
   16e20:	|                          |   clr.w d0
   16e22:	+--------------------------|-- bra.w 17254 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e26:	|                          \-> clr.l 136(sp)
   16e2a:	|                    /-------- bra.w 16f4e <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16e2e:	|                 /--|-------> movea.l 1cba4 <currentFloor>,a0
   16e34:	|                 |  |         move.l 8(a0),d0
   16e38:	|                 |  |         add.l d0,d0
   16e3a:	|                 |  |         add.l d0,d0
   16e3c:	|                 |  |         move.l d0,50(sp)
   16e40:	|                 |  |         clr.l 46(sp)
   16e44:	|                 |  |         move.l 1ca88 <SysBase>,d0
   16e4a:	|                 |  |         movea.l d0,a6
   16e4c:	|                 |  |         move.l 50(sp),d0
   16e50:	|                 |  |         move.l 46(sp),d1
   16e54:	|                 |  |         jsr -684(a6)
   16e58:	|                 |  |         move.l d0,42(sp)
   16e5c:	|                 |  |         move.l 42(sp),d0
   16e60:	|                 |  |         movea.l 1cba4 <currentFloor>,a0
   16e66:	|                 |  |         movea.l 16(a0),a0
   16e6a:	|                 |  |         move.l 136(sp),d1
   16e6e:	|                 |  |         add.l d1,d1
   16e70:	|                 |  |         add.l d1,d1
   16e72:	|                 |  |         adda.l d1,a0
   16e74:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16e76:	|                 |  |         movea.l 1cba4 <currentFloor>,a0
   16e7c:	|                 |  |         move.l 8(a0),d0
   16e80:	|                 |  |         add.l d0,d0
   16e82:	|                 |  |         add.l d0,d0
   16e84:	|                 |  |         move.l d0,38(sp)
   16e88:	|                 |  |         clr.l 34(sp)
   16e8c:	|                 |  |         move.l 1ca88 <SysBase>,d0
   16e92:	|                 |  |         movea.l d0,a6
   16e94:	|                 |  |         move.l 38(sp),d0
   16e98:	|                 |  |         move.l 34(sp),d1
   16e9c:	|                 |  |         jsr -684(a6)
   16ea0:	|                 |  |         move.l d0,30(sp)
   16ea4:	|                 |  |         move.l 30(sp),d1
   16ea8:	|                 |  |         move.l 136(sp),d0
   16eac:	|                 |  |         add.l d0,d0
   16eae:	|                 |  |         add.l d0,d0
   16eb0:	|                 |  |         movea.l 62(sp),a0
   16eb4:	|                 |  |         adda.l d0,a0
   16eb6:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   16eb8:	|                 |  |         movea.l 1cba4 <currentFloor>,a0
   16ebe:	|                 |  |         move.l 16(a0),d1
   16ec2:	|                 |  |         move.l 136(sp),d0
   16ec6:	|                 |  |         add.l d0,d0
   16ec8:	|                 |  |         add.l d0,d0
   16eca:	|                 |  |         movea.l d1,a0
   16ecc:	|                 |  |         adda.l d0,a0
   16ece:	|                 |  |         move.l (a0),d0
   16ed0:	|                 |  |     /-- bne.s 16ee6 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   16ed2:	|                 |  |     |   pea 1a1f9 <main_sludge.c.c09e4a78+0x13>
   16ed8:	|                 |  |     |   jsr 1733a <KPrintF>
   16ede:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16ee0:	|                 |  |     |   clr.w d0
   16ee2:	+-----------------|--|-----|-- bra.w 17254 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16ee6:	|                 |  |     \-> clr.l 132(sp)
   16eea:	|                 |  |     /-- bra.s 16f3a <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16eec:	|                 |  |  /--|-> movea.l 1cba4 <currentFloor>,a0
   16ef2:	|                 |  |  |  |   move.l 16(a0),d1
   16ef6:	|                 |  |  |  |   move.l 136(sp),d0
   16efa:	|                 |  |  |  |   add.l d0,d0
   16efc:	|                 |  |  |  |   add.l d0,d0
   16efe:	|                 |  |  |  |   movea.l d1,a0
   16f00:	|                 |  |  |  |   adda.l d0,a0
   16f02:	|                 |  |  |  |   move.l (a0),d1
   16f04:	|                 |  |  |  |   move.l 132(sp),d0
   16f08:	|                 |  |  |  |   add.l d0,d0
   16f0a:	|                 |  |  |  |   add.l d0,d0
   16f0c:	|                 |  |  |  |   movea.l d1,a0
   16f0e:	|                 |  |  |  |   adda.l d0,a0
   16f10:	|                 |  |  |  |   moveq #-1,d1
   16f12:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16f14:	|                 |  |  |  |   move.l 136(sp),d0
   16f18:	|                 |  |  |  |   add.l d0,d0
   16f1a:	|                 |  |  |  |   add.l d0,d0
   16f1c:	|                 |  |  |  |   movea.l 62(sp),a0
   16f20:	|                 |  |  |  |   adda.l d0,a0
   16f22:	|                 |  |  |  |   move.l (a0),d1
   16f24:	|                 |  |  |  |   move.l 132(sp),d0
   16f28:	|                 |  |  |  |   add.l d0,d0
   16f2a:	|                 |  |  |  |   add.l d0,d0
   16f2c:	|                 |  |  |  |   movea.l d1,a0
   16f2e:	|                 |  |  |  |   adda.l d0,a0
   16f30:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f36:	|                 |  |  |  |   addq.l #1,132(sp)
   16f3a:	|                 |  |  |  \-> movea.l 1cba4 <currentFloor>,a0
   16f40:	|                 |  |  |      move.l 8(a0),d0
   16f44:	|                 |  |  |      cmp.l 132(sp),d0
   16f48:	|                 |  |  \----- bgt.s 16eec <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f4a:	|                 |  |         addq.l #1,136(sp)
   16f4e:	|                 |  \-------> movea.l 1cba4 <currentFloor>,a0
   16f54:	|                 |            move.l 8(a0),d0
   16f58:	|                 |            cmp.l 136(sp),d0
   16f5c:	|                 \----------- bgt.w 16e2e <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f60:	|                              clr.l 136(sp)
   16f64:	|              /-------------- bra.w 1706a <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16f68:	|           /--|-------------> clr.l 132(sp)
   16f6c:	|           |  |     /-------- bra.w 17054 <setFloor+0x570>
			if (i != j) {
   16f70:	|           |  |  /--|-------> move.l 136(sp),d0
   16f74:	|           |  |  |  |         cmp.l 132(sp),d0
   16f78:	|           |  |  |  |     /-- beq.w 1700a <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   16f7c:	|           |  |  |  |     |   movea.l 1cba4 <currentFloor>,a0
   16f82:	|           |  |  |  |     |   move.l 12(a0),d1
   16f86:	|           |  |  |  |     |   move.l 132(sp),d0
   16f8a:	|           |  |  |  |     |   lsl.l #3,d0
   16f8c:	|           |  |  |  |     |   movea.l d1,a1
   16f8e:	|           |  |  |  |     |   adda.l d0,a1
   16f90:	|           |  |  |  |     |   movea.l 1cba4 <currentFloor>,a0
   16f96:	|           |  |  |  |     |   move.l 12(a0),d1
   16f9a:	|           |  |  |  |     |   move.l 136(sp),d0
   16f9e:	|           |  |  |  |     |   lsl.l #3,d0
   16fa0:	|           |  |  |  |     |   movea.l d1,a0
   16fa2:	|           |  |  |  |     |   adda.l d0,a0
   16fa4:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   16fa8:	|           |  |  |  |     |   move.l (a1),-(sp)
   16faa:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   16fae:	|           |  |  |  |     |   move.l (a0),-(sp)
   16fb0:	|           |  |  |  |     |   jsr 1683c <polysShareSide>
   16fb6:	|           |  |  |  |     |   lea 16(sp),sp
   16fba:	|           |  |  |  |     |   tst.w d0
   16fbc:	|           |  |  |  |  /--|-- beq.w 17050 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   16fc0:	|           |  |  |  |  |  |   movea.l 1cba4 <currentFloor>,a0
   16fc6:	|           |  |  |  |  |  |   move.l 16(a0),d1
   16fca:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16fce:	|           |  |  |  |  |  |   add.l d0,d0
   16fd0:	|           |  |  |  |  |  |   add.l d0,d0
   16fd2:	|           |  |  |  |  |  |   movea.l d1,a0
   16fd4:	|           |  |  |  |  |  |   adda.l d0,a0
   16fd6:	|           |  |  |  |  |  |   move.l (a0),d1
   16fd8:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16fdc:	|           |  |  |  |  |  |   add.l d0,d0
   16fde:	|           |  |  |  |  |  |   add.l d0,d0
   16fe0:	|           |  |  |  |  |  |   movea.l d1,a0
   16fe2:	|           |  |  |  |  |  |   adda.l d0,a0
   16fe4:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   16fe8:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16fec:	|           |  |  |  |  |  |   add.l d0,d0
   16fee:	|           |  |  |  |  |  |   add.l d0,d0
   16ff0:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16ff4:	|           |  |  |  |  |  |   adda.l d0,a0
   16ff6:	|           |  |  |  |  |  |   move.l (a0),d1
   16ff8:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16ffc:	|           |  |  |  |  |  |   add.l d0,d0
   16ffe:	|           |  |  |  |  |  |   add.l d0,d0
   17000:	|           |  |  |  |  |  |   movea.l d1,a0
   17002:	|           |  |  |  |  |  |   adda.l d0,a0
   17004:	|           |  |  |  |  |  |   moveq #1,d1
   17006:	|           |  |  |  |  |  |   move.l d1,(a0)
   17008:	|           |  |  |  |  +--|-- bra.s 17050 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   1700a:	|           |  |  |  |  |  \-> movea.l 1cba4 <currentFloor>,a0
   17010:	|           |  |  |  |  |      move.l 16(a0),d1
   17014:	|           |  |  |  |  |      move.l 136(sp),d0
   17018:	|           |  |  |  |  |      add.l d0,d0
   1701a:	|           |  |  |  |  |      add.l d0,d0
   1701c:	|           |  |  |  |  |      movea.l d1,a0
   1701e:	|           |  |  |  |  |      adda.l d0,a0
   17020:	|           |  |  |  |  |      move.l (a0),d1
   17022:	|           |  |  |  |  |      move.l 132(sp),d0
   17026:	|           |  |  |  |  |      add.l d0,d0
   17028:	|           |  |  |  |  |      add.l d0,d0
   1702a:	|           |  |  |  |  |      movea.l d1,a0
   1702c:	|           |  |  |  |  |      adda.l d0,a0
   1702e:	|           |  |  |  |  |      moveq #-2,d0
   17030:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   17032:	|           |  |  |  |  |      move.l 136(sp),d0
   17036:	|           |  |  |  |  |      add.l d0,d0
   17038:	|           |  |  |  |  |      add.l d0,d0
   1703a:	|           |  |  |  |  |      movea.l 62(sp),a0
   1703e:	|           |  |  |  |  |      adda.l d0,a0
   17040:	|           |  |  |  |  |      move.l (a0),d1
   17042:	|           |  |  |  |  |      move.l 132(sp),d0
   17046:	|           |  |  |  |  |      add.l d0,d0
   17048:	|           |  |  |  |  |      add.l d0,d0
   1704a:	|           |  |  |  |  |      movea.l d1,a0
   1704c:	|           |  |  |  |  |      adda.l d0,a0
   1704e:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17050:	|           |  |  |  |  \----> addq.l #1,132(sp)
   17054:	|           |  |  |  \-------> movea.l 1cba4 <currentFloor>,a0
   1705a:	|           |  |  |            move.l 8(a0),d0
   1705e:	|           |  |  |            cmp.l 132(sp),d0
   17062:	|           |  |  \----------- bgt.w 16f70 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17066:	|           |  |               addq.l #1,136(sp)
   1706a:	|           |  \-------------> movea.l 1cba4 <currentFloor>,a0
   17070:	|           |                  move.l 8(a0),d0
   17074:	|           |                  cmp.l 136(sp),d0
   17078:	|           \----------------- bgt.w 16f68 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   1707c:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   17080:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   17084:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17088:	|  |                           clr.l 136(sp)
   1708c:	|  |     /-------------------- bra.w 171e2 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17090:	|  |  /--|-------------------> clr.l 132(sp)
   17094:	|  |  |  |     /-------------- bra.w 171cc <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   17098:	|  |  |  |  /--|-------------> movea.l 1cba4 <currentFloor>,a0
   1709e:	|  |  |  |  |  |               move.l 16(a0),d1
   170a2:	|  |  |  |  |  |               move.l 136(sp),d0
   170a6:	|  |  |  |  |  |               add.l d0,d0
   170a8:	|  |  |  |  |  |               add.l d0,d0
   170aa:	|  |  |  |  |  |               movea.l d1,a0
   170ac:	|  |  |  |  |  |               adda.l d0,a0
   170ae:	|  |  |  |  |  |               move.l (a0),d1
   170b0:	|  |  |  |  |  |               move.l 132(sp),d0
   170b4:	|  |  |  |  |  |               add.l d0,d0
   170b6:	|  |  |  |  |  |               add.l d0,d0
   170b8:	|  |  |  |  |  |               movea.l d1,a0
   170ba:	|  |  |  |  |  |               adda.l d0,a0
   170bc:	|  |  |  |  |  |               move.l (a0),d0
   170be:	|  |  |  |  |  |               moveq #-1,d1
   170c0:	|  |  |  |  |  |               cmp.l d0,d1
   170c2:	|  |  |  |  |  |  /----------- bne.w 171c8 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   170c6:	|  |  |  |  |  |  |            clr.l 122(sp)
   170ca:	|  |  |  |  |  |  |     /----- bra.w 171b6 <setFloor+0x6d2>
						if (d != i && d != j) {
   170ce:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   170d2:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   170d6:	|  |  |  |  |  |  |  |  |  /-- beq.w 171b2 <setFloor+0x6ce>
   170da:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   170de:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   170e2:	|  |  |  |  |  |  |  |  |  +-- beq.w 171b2 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   170e6:	|  |  |  |  |  |  |  |  |  |   movea.l 1cba4 <currentFloor>,a0
   170ec:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   170f0:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   170f4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170f6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   170f8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   170fa:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   170fc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   170fe:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17102:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17104:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17106:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17108:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1710a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   1710c:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   17110:	|  |  |  |  |  |  |  |  |  +-- bne.w 171b2 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   17114:	|  |  |  |  |  |  |  |  |  |   movea.l 1cba4 <currentFloor>,a0
   1711a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1711e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17122:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17124:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17126:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17128:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1712a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1712c:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17130:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17132:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17134:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17136:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17138:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   1713a:	|  |  |  |  |  |  |  |  |  +-- bmi.s 171b2 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   1713c:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17140:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17142:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17144:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17148:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1714a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1714c:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17150:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17152:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17154:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17156:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17158:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   1715a:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   1715e:	|  |  |  |  |  |  |  |  |  +-- bgt.s 171b2 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   17160:	|  |  |  |  |  |  |  |  |  |   movea.l 1cba4 <currentFloor>,a0
   17166:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   1716a:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1716e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17170:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17172:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17174:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17176:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17178:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1717c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1717e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17180:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17182:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17184:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   17188:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1718c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1718e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17190:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17194:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17196:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17198:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1719c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1719e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   171a0:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   171a2:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   171a4:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   171a8:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   171aa:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   171ac:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   171b2:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   171b6:	|  |  |  |  |  |  |  |  \----> movea.l 1cba4 <currentFloor>,a0
   171bc:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   171c0:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   171c4:	|  |  |  |  |  |  |  \-------- bgt.w 170ce <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   171c8:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   171cc:	|  |  |  |  |  \-------------> movea.l 1cba4 <currentFloor>,a0
   171d2:	|  |  |  |  |                  move.l 8(a0),d0
   171d6:	|  |  |  |  |                  cmp.l 132(sp),d0
   171da:	|  |  |  |  \----------------- bgt.w 17098 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   171de:	|  |  |  |                     addq.l #1,136(sp)
   171e2:	|  |  |  \-------------------> movea.l 1cba4 <currentFloor>,a0
   171e8:	|  |  |                        move.l 8(a0),d0
   171ec:	|  |  |                        cmp.l 136(sp),d0
   171f0:	|  |  \----------------------- bgt.w 17090 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   171f4:	|  |                           tst.w 130(sp)
   171f8:	|  \-------------------------- bne.w 17080 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   171fc:	|                              clr.l 136(sp)
   17200:	|                          /-- bra.s 17228 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   17202:	|                       /--|-> move.l 136(sp),d0
   17206:	|                       |  |   add.l d0,d0
   17208:	|                       |  |   add.l d0,d0
   1720a:	|                       |  |   movea.l 62(sp),a0
   1720e:	|                       |  |   adda.l d0,a0
   17210:	|                       |  |   move.l (a0),54(sp)
   17214:	|                       |  |   move.l 1ca88 <SysBase>,d0
   1721a:	|                       |  |   movea.l d0,a6
   1721c:	|                       |  |   movea.l 54(sp),a1
   17220:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17224:	|                       |  |   addq.l #1,136(sp)
   17228:	|                       |  \-> movea.l 1cba4 <currentFloor>,a0
   1722e:	|                       |      move.l 8(a0),d0
   17232:	|                       |      cmp.l 136(sp),d0
   17236:	|                       \----- bgt.s 17202 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   17238:	|                              move.l 62(sp),58(sp)
   1723e:	|                              move.l 1ca88 <SysBase>,d0
   17244:	|                              movea.l d0,a6
   17246:	|                              movea.l 58(sp),a1
   1724a:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   1724e:	|                              clr.l 62(sp)

	return TRUE;
   17252:	|                              moveq #1,d0
}
   17254:	\----------------------------> movea.l (sp)+,a2
   17256:	                               movea.l (sp)+,a6
   17258:	                               lea 132(sp),sp
   1725c:	                               rts

0001725e <setFloorNull>:

void setFloorNull () {
	killFloor ();
   1725e:	jsr 1674c <killFloor>
	noFloor ();
   17264:	jsr 16670 <noFloor>
   1726a:	nop
   1726c:	rts

0001726e <WaitVbl>:
void WaitVbl() {
   1726e:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   17270:	   /-> movea.l #14675972,a0
   17276:	   |   move.l (a0),d0
   17278:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   1727a:	   |   move.l (sp),d0
   1727c:	   |   andi.l #130816,d0
   17282:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   17284:	   |   move.l (sp),d0
   17286:	   |   cmpi.l #76800,d0
   1728c:	   \-- beq.s 17270 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1728e:	/----> movea.l #14675972,a0
   17294:	|      move.l (a0),d0
   17296:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   1729a:	|      move.l 4(sp),d0
   1729e:	|      andi.l #130816,d0
   172a4:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   172a8:	|      move.l 4(sp),d0
   172ac:	|      cmpi.l #76800,d0
   172b2:	|  /-- beq.s 172b6 <WaitVbl+0x48>
	while (1) {
   172b4:	\--|-- bra.s 1728e <WaitVbl+0x20>
			break;
   172b6:	   \-> nop
}
   172b8:	       nop
   172ba:	       addq.l #8,sp
   172bc:	       rts

000172be <memset>:
void* memset(void *dest, int val, unsigned long len) {
   172be:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   172c0:	       move.l 8(sp),(sp)
	while(len-- > 0)
   172c4:	   /-- bra.s 172d6 <memset+0x18>
		*ptr++ = val;
   172c6:	/--|-> move.l (sp),d0
   172c8:	|  |   move.l d0,d1
   172ca:	|  |   addq.l #1,d1
   172cc:	|  |   move.l d1,(sp)
   172ce:	|  |   move.l 12(sp),d1
   172d2:	|  |   movea.l d0,a0
   172d4:	|  |   move.b d1,(a0)
	while(len-- > 0)
   172d6:	|  \-> move.l 16(sp),d0
   172da:	|      move.l d0,d1
   172dc:	|      subq.l #1,d1
   172de:	|      move.l d1,16(sp)
   172e2:	|      tst.l d0
   172e4:	\----- bne.s 172c6 <memset+0x8>
	return dest;
   172e6:	       move.l 8(sp),d0
}
   172ea:	       addq.l #4,sp
   172ec:	       rts

000172ee <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   172ee:	       subq.l #8,sp
   172f0:	       move.l d2,-(sp)
	char *d = (char *)dest;
   172f2:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   172f8:	       move.l 20(sp),4(sp)
	while(len--)
   172fe:	   /-- bra.s 17320 <memcpy+0x32>
		*d++ = *s++;
   17300:	/--|-> move.l 4(sp),d1
   17304:	|  |   move.l d1,d0
   17306:	|  |   addq.l #1,d0
   17308:	|  |   move.l d0,4(sp)
   1730c:	|  |   move.l 8(sp),d0
   17310:	|  |   move.l d0,d2
   17312:	|  |   addq.l #1,d2
   17314:	|  |   move.l d2,8(sp)
   17318:	|  |   movea.l d1,a0
   1731a:	|  |   move.b (a0),d1
   1731c:	|  |   movea.l d0,a0
   1731e:	|  |   move.b d1,(a0)
	while(len--)
   17320:	|  \-> move.l 24(sp),d0
   17324:	|      move.l d0,d1
   17326:	|      subq.l #1,d1
   17328:	|      move.l d1,24(sp)
   1732c:	|      tst.l d0
   1732e:	\----- bne.s 17300 <memcpy+0x12>
	return dest;
   17330:	       move.l 16(sp),d0
}
   17334:	       move.l (sp)+,d2
   17336:	       addq.l #8,sp
   17338:	       rts

0001733a <KPrintF>:
void KPrintF(const char* fmt, ...) {
   1733a:	       lea -128(sp),sp
   1733e:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17342:	       move.w f0ff60 <gcc8_c_support.c.1fed348d+0xec4cdf>,d0
   17348:	       cmpi.w #20153,d0
   1734c:	   /-- beq.s 17370 <KPrintF+0x36>
   1734e:	   |   cmpi.w #-24562,d0
   17352:	   +-- beq.s 17370 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   17354:	   |   movea.l 1ca88 <SysBase>,a6
   1735a:	   |   movea.l 144(sp),a0
   1735e:	   |   lea 148(sp),a1
   17362:	   |   lea 17dce <KPutCharX>,a2
   17368:	   |   suba.l a3,a3
   1736a:	   |   jsr -522(a6)
}
   1736e:	/--|-- bra.s 1739a <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   17370:	|  \-> movea.l 1ca88 <SysBase>,a6
   17376:	|      movea.l 144(sp),a0
   1737a:	|      lea 148(sp),a1
   1737e:	|      lea 17ddc <PutChar>,a2
   17384:	|      lea 12(sp),a3
   17388:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   1738c:	|      move.l a3,-(sp)
   1738e:	|      pea 56 <_start+0x56>
   17392:	|      jsr f0ff60 <gcc8_c_support.c.1fed348d+0xec4cdf>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17398:	|      addq.l #8,sp
}
   1739a:	\----> movem.l (sp)+,a2-a3/a6
   1739e:	       lea 128(sp),sp
   173a2:	       rts

000173a4 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   173a4:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   173a6:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   173ac:	       movea.l (sp),a0
   173ae:	       move.w (a0),d0
   173b0:	       cmpi.w #20153,d0
   173b4:	   /-- beq.s 173c0 <debug_cmd+0x1c>
   173b6:	   |   movea.l (sp),a0
   173b8:	   |   move.w (a0),d0
   173ba:	   |   cmpi.w #-24562,d0
   173be:	/--|-- bne.s 173de <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   173c0:	|  \-> move.l 20(sp),-(sp)
   173c4:	|      move.l 20(sp),-(sp)
   173c8:	|      move.l 20(sp),-(sp)
   173cc:	|      move.l 20(sp),-(sp)
   173d0:	|      pea 58 <_start+0x58>
   173d4:	|      movea.l 20(sp),a0
   173d8:	|      jsr (a0)
   173da:	|      lea 20(sp),sp
	}
}
   173de:	\----> nop
   173e0:	       addq.l #4,sp
   173e2:	       rts

000173e4 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   173e4:	       move.l d2,-(sp)
	while(*source && --num > 0)
   173e6:	   /-- bra.s 17408 <my_strncpy+0x24>
		*destination++ = *source++;
   173e8:	/--|-> move.l 12(sp),d1
   173ec:	|  |   move.l d1,d0
   173ee:	|  |   addq.l #1,d0
   173f0:	|  |   move.l d0,12(sp)
   173f4:	|  |   move.l 8(sp),d0
   173f8:	|  |   move.l d0,d2
   173fa:	|  |   addq.l #1,d2
   173fc:	|  |   move.l d2,8(sp)
   17400:	|  |   movea.l d1,a0
   17402:	|  |   move.b (a0),d1
   17404:	|  |   movea.l d0,a0
   17406:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   17408:	|  \-> movea.l 12(sp),a0
   1740c:	|      move.b (a0),d0
   1740e:	|  /-- beq.s 17416 <my_strncpy+0x32>
   17410:	|  |   subq.l #1,16(sp)
   17414:	\--|-- bne.s 173e8 <my_strncpy+0x4>
	*destination = '\0';
   17416:	   \-> movea.l 8(sp),a0
   1741a:	       clr.b (a0)
}
   1741c:	       nop
   1741e:	       move.l (sp)+,d2
   17420:	       rts

00017422 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17422:	    lea -60(sp),sp
   17426:	    movea.l 72(sp),a1
   1742a:	    movea.l 76(sp),a0
   1742e:	    move.l 80(sp),d1
   17432:	    move.l 84(sp),d0
   17436:	    movea.w a1,a1
   17438:	    move.w a1,8(sp)
   1743c:	    movea.w a0,a0
   1743e:	    move.w a0,6(sp)
   17442:	    move.w d1,d1
   17444:	    move.w d1,4(sp)
   17448:	    move.w d0,d0
   1744a:	    move.w d0,2(sp)
	struct debug_resource resource = {
   1744e:	    lea 10(sp),a0
   17452:	    clr.l (a0)
   17454:	    addq.l #4,a0
   17456:	    clr.l (a0)
   17458:	    addq.l #4,a0
   1745a:	    clr.l (a0)
   1745c:	    addq.l #4,a0
   1745e:	    clr.l (a0)
   17460:	    addq.l #4,a0
   17462:	    clr.l (a0)
   17464:	    addq.l #4,a0
   17466:	    clr.l (a0)
   17468:	    addq.l #4,a0
   1746a:	    clr.l (a0)
   1746c:	    addq.l #4,a0
   1746e:	    clr.l (a0)
   17470:	    addq.l #4,a0
   17472:	    clr.l (a0)
   17474:	    addq.l #4,a0
   17476:	    clr.l (a0)
   17478:	    addq.l #4,a0
   1747a:	    clr.l (a0)
   1747c:	    addq.l #4,a0
   1747e:	    clr.l (a0)
   17480:	    addq.l #4,a0
   17482:	    clr.w (a0)
   17484:	    addq.l #2,a0
		.address = (unsigned int)addr,
   17486:	    move.l 64(sp),d0
	struct debug_resource resource = {
   1748a:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   1748e:	    move.w 8(sp),d0
   17492:	/-- bpl.s 17496 <debug_register_bitmap+0x74>
   17494:	|   addq.w #7,d0
   17496:	\-> asr.w #3,d0
   17498:	    movea.w d0,a0
   1749a:	    movea.w 6(sp),a1
   1749e:	    move.l a1,-(sp)
   174a0:	    move.l a0,-(sp)
   174a2:	    jsr 17cc6 <__mulsi3>
   174a8:	    addq.l #8,sp
   174aa:	    movea.w 4(sp),a0
   174ae:	    move.l a0,-(sp)
   174b0:	    move.l d0,-(sp)
   174b2:	    jsr 17cc6 <__mulsi3>
   174b8:	    addq.l #8,sp
	struct debug_resource resource = {
   174ba:	    move.l d0,14(sp)
   174be:	    move.w 2(sp),52(sp)
   174c4:	    move.w 8(sp),54(sp)
   174ca:	    move.w 6(sp),56(sp)
   174d0:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   174d6:	    moveq #0,d0
   174d8:	    move.w 2(sp),d0
   174dc:	    moveq #2,d1
   174de:	    and.l d1,d0
   174e0:	/-- beq.s 174ec <debug_register_bitmap+0xca>
		resource.size *= 2;
   174e2:	|   move.l 14(sp),d0
   174e6:	|   add.l d0,d0
   174e8:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   174ec:	\-> pea 20 <_start+0x20>
   174f0:	    move.l 72(sp),-(sp)
   174f4:	    lea 18(sp),a0
   174f8:	    move.l a0,d0
   174fa:	    addq.l #8,d0
   174fc:	    move.l d0,-(sp)
   174fe:	    jsr 173e4 <my_strncpy>
   17504:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   17508:	    lea 10(sp),a0
   1750c:	    clr.l -(sp)
   1750e:	    clr.l -(sp)
   17510:	    move.l a0,-(sp)
   17512:	    pea 4 <_start+0x4>
   17516:	    jsr 173a4 <debug_cmd>
   1751c:	    lea 16(sp),sp
}
   17520:	    nop
   17522:	    lea 60(sp),sp
   17526:	    rts

00017528 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17528:	lea -12(sp),sp
   1752c:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   1752e:	move.l 20(sp),12(sp)
   17534:	move.l 24(sp),8(sp)
   1753a:	move.l 1ca98 <MathIeeeSingBasBase>,d0
   17540:	movea.l d0,a6
   17542:	move.l 12(sp),d0
   17546:	move.l 8(sp),d1
   1754a:	jsr -66(a6)
   1754e:	move.l d0,4(sp)
   17552:	move.l 4(sp),d0
}
   17556:	movea.l (sp)+,a6
   17558:	lea 12(sp),sp
   1755c:	rts

0001755e <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   1755e:	lea -32(sp),sp
   17562:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17566:	move.l 48(sp),36(sp)
   1756c:	move.l 52(sp),40(sp)
   17572:	move.l 56(sp),28(sp)
   17578:	move.l 60(sp),32(sp)
   1757e:	move.l 1caa0 <MathIeeeDoubBasBase>,d0
   17584:	movea.l d0,a6
   17586:	move.l 36(sp),d0
   1758a:	move.l 40(sp),d1
   1758e:	move.l 28(sp),d2
   17592:	move.l 32(sp),d3
   17596:	jsr -66(a6)
   1759a:	move.l d0,12(sp)
   1759e:	move.l d1,16(sp)
   175a2:	move.l 12(sp),20(sp)
   175a8:	move.l 16(sp),24(sp)
   175ae:	move.l 20(sp),d0
   175b2:	move.l 24(sp),d1
}
   175b6:	movem.l (sp)+,d2-d3/a6
   175ba:	lea 32(sp),sp
   175be:	rts

000175c0 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   175c0:	lea -32(sp),sp
   175c4:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   175c8:	move.l 48(sp),36(sp)
   175ce:	move.l 52(sp),40(sp)
   175d4:	move.l 56(sp),28(sp)
   175da:	move.l 60(sp),32(sp)
   175e0:	move.l 1caa0 <MathIeeeDoubBasBase>,d0
   175e6:	movea.l d0,a6
   175e8:	move.l 36(sp),d0
   175ec:	move.l 40(sp),d1
   175f0:	move.l 28(sp),d2
   175f4:	move.l 32(sp),d3
   175f8:	jsr -84(a6)
   175fc:	move.l d0,12(sp)
   17600:	move.l d1,16(sp)
   17604:	move.l 12(sp),20(sp)
   1760a:	move.l 16(sp),24(sp)
   17610:	move.l 20(sp),d0
   17614:	move.l 24(sp),d1
}
   17618:	movem.l (sp)+,d2-d3/a6
   1761c:	lea 32(sp),sp
   17620:	rts

00017622 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17622:	lea -12(sp),sp
   17626:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17628:	move.l 20(sp),12(sp)
   1762e:	move.l 24(sp),8(sp)
   17634:	move.l 1ca98 <MathIeeeSingBasBase>,d0
   1763a:	movea.l d0,a6
   1763c:	move.l 12(sp),d0
   17640:	move.l 8(sp),d1
   17644:	jsr -84(a6)
   17648:	move.l d0,4(sp)
   1764c:	move.l 4(sp),d0
}
   17650:	movea.l (sp)+,a6
   17652:	lea 12(sp),sp
   17656:	rts

00017658 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   17658:	lea -12(sp),sp
   1765c:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1765e:	move.l 20(sp),12(sp)
   17664:	move.l 24(sp),8(sp)
   1766a:	move.l 1ca98 <MathIeeeSingBasBase>,d0
   17670:	movea.l d0,a6
   17672:	move.l 12(sp),d0
   17676:	move.l 8(sp),d1
   1767a:	jsr -42(a6)
   1767e:	move.l d0,4(sp)
   17682:	move.l 4(sp),d0
}
   17686:	movea.l (sp)+,a6
   17688:	lea 12(sp),sp
   1768c:	rts

0001768e <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   1768e:	lea -20(sp),sp
   17692:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   17694:	move.l 28(sp),20(sp)
   1769a:	move.l 1caa4 <MathIeeeDoubTransBase>,d0
   176a0:	movea.l d0,a6
   176a2:	move.l 20(sp),d0
   176a6:	jsr -108(a6)
   176aa:	move.l d0,4(sp)
   176ae:	move.l d1,8(sp)
   176b2:	move.l 4(sp),12(sp)
   176b8:	move.l 8(sp),16(sp)
   176be:	move.l 12(sp),d0
   176c2:	move.l 16(sp),d1
}
   176c6:	movea.l (sp)+,a6
   176c8:	lea 20(sp),sp
   176cc:	rts

000176ce <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   176ce:	lea -12(sp),sp
   176d2:	move.l a6,-(sp)
	return IEEEDPFix(value);
   176d4:	move.l 20(sp),8(sp)
   176da:	move.l 24(sp),12(sp)
   176e0:	move.l 1caa0 <MathIeeeDoubBasBase>,d0
   176e6:	movea.l d0,a6
   176e8:	move.l 8(sp),d0
   176ec:	move.l 12(sp),d1
   176f0:	jsr -30(a6)
   176f4:	move.l d0,4(sp)
   176f8:	move.l 4(sp),d0
}
   176fc:	movea.l (sp)+,a6
   176fe:	lea 12(sp),sp
   17702:	rts

00017704 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17704:	subq.l #8,sp
   17706:	move.l a6,-(sp)
	return IEEESPFix(value);
   17708:	move.l 16(sp),8(sp)
   1770e:	move.l 1ca98 <MathIeeeSingBasBase>,d0
   17714:	movea.l d0,a6
   17716:	move.l 8(sp),d0
   1771a:	jsr -30(a6)
   1771e:	move.l d0,4(sp)
   17722:	move.l 4(sp),d0
}
   17726:	movea.l (sp)+,a6
   17728:	addq.l #8,sp
   1772a:	rts

0001772c <__floatsidf>:


DOUBLE __floatsidf (int i) {
   1772c:	lea -20(sp),sp
   17730:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17732:	move.l 28(sp),20(sp)
   17738:	move.l 1caa0 <MathIeeeDoubBasBase>,d0
   1773e:	movea.l d0,a6
   17740:	move.l 20(sp),d0
   17744:	jsr -36(a6)
   17748:	move.l d0,4(sp)
   1774c:	move.l d1,8(sp)
   17750:	move.l 4(sp),12(sp)
   17756:	move.l 8(sp),16(sp)
   1775c:	move.l 12(sp),d0
   17760:	move.l 16(sp),d1
}
   17764:	movea.l (sp)+,a6
   17766:	lea 20(sp),sp
   1776a:	rts

0001776c <__floatsisf>:

FLOAT __floatsisf(int i) {
   1776c:	subq.l #8,sp
   1776e:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17770:	move.l 16(sp),8(sp)
   17776:	move.l 1ca98 <MathIeeeSingBasBase>,d0
   1777c:	movea.l d0,a6
   1777e:	move.l 8(sp),d0
   17782:	jsr -36(a6)
   17786:	move.l d0,4(sp)
   1778a:	move.l 4(sp),d0
}
   1778e:	movea.l (sp)+,a6
   17790:	addq.l #8,sp
   17792:	rts

00017794 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17794:	subq.l #8,sp
   17796:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17798:	move.l 16(sp),8(sp)
   1779e:	move.l 1ca98 <MathIeeeSingBasBase>,d0
   177a4:	movea.l d0,a6
   177a6:	move.l 8(sp),d0
   177aa:	jsr -36(a6)
   177ae:	move.l d0,4(sp)
   177b2:	move.l 4(sp),d0
}
   177b6:	movea.l (sp)+,a6
   177b8:	addq.l #8,sp
   177ba:	rts

000177bc <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   177bc:	lea -32(sp),sp
   177c0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   177c4:	move.l 48(sp),36(sp)
   177ca:	move.l 52(sp),40(sp)
   177d0:	move.l 56(sp),28(sp)
   177d6:	move.l 60(sp),32(sp)
   177dc:	move.l 1caa0 <MathIeeeDoubBasBase>,d0
   177e2:	movea.l d0,a6
   177e4:	move.l 36(sp),d0
   177e8:	move.l 40(sp),d1
   177ec:	move.l 28(sp),d2
   177f0:	move.l 32(sp),d3
   177f4:	jsr -78(a6)
   177f8:	move.l d0,12(sp)
   177fc:	move.l d1,16(sp)
   17800:	move.l 12(sp),20(sp)
   17806:	move.l 16(sp),24(sp)
   1780c:	move.l 20(sp),d0
   17810:	move.l 24(sp),d1
}
   17814:	movem.l (sp)+,d2-d3/a6
   17818:	lea 32(sp),sp
   1781c:	rts

0001781e <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   1781e:	lea -12(sp),sp
   17822:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17824:	move.l 20(sp),12(sp)
   1782a:	move.l 24(sp),8(sp)
   17830:	move.l 1ca98 <MathIeeeSingBasBase>,d0
   17836:	movea.l d0,a6
   17838:	move.l 12(sp),d0
   1783c:	move.l 8(sp),d1
   17840:	jsr -78(a6)
   17844:	move.l d0,4(sp)
   17848:	move.l 4(sp),d0
}
   1784c:	movea.l (sp)+,a6
   1784e:	lea 12(sp),sp
   17852:	rts

00017854 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17854:	lea -12(sp),sp
   17858:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1785a:	move.l 20(sp),12(sp)
   17860:	move.l 24(sp),8(sp)
   17866:	move.l 1ca98 <MathIeeeSingBasBase>,d0
   1786c:	movea.l d0,a6
   1786e:	move.l 12(sp),d0
   17872:	move.l 8(sp),d1
   17876:	jsr -42(a6)
   1787a:	move.l d0,4(sp)
   1787e:	move.l 4(sp),d0
}
   17882:	movea.l (sp)+,a6
   17884:	lea 12(sp),sp
   17888:	rts

0001788a <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   1788a:	lea -20(sp),sp
   1788e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17892:	move.l 36(sp),24(sp)
   17898:	move.l 40(sp),28(sp)
   1789e:	move.l 44(sp),16(sp)
   178a4:	move.l 48(sp),20(sp)
   178aa:	move.l 1caa0 <MathIeeeDoubBasBase>,d0
   178b0:	movea.l d0,a6
   178b2:	move.l 24(sp),d0
   178b6:	move.l 28(sp),d1
   178ba:	move.l 16(sp),d2
   178be:	move.l 20(sp),d3
   178c2:	jsr -42(a6)
   178c6:	move.l d0,12(sp)
   178ca:	move.l 12(sp),d0
}
   178ce:	movem.l (sp)+,d2-d3/a6
   178d2:	lea 20(sp),sp
   178d6:	rts

000178d8 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   178d8:	lea -12(sp),sp
   178dc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   178de:	move.l 20(sp),12(sp)
   178e4:	move.l 24(sp),8(sp)
   178ea:	move.l 1ca98 <MathIeeeSingBasBase>,d0
   178f0:	movea.l d0,a6
   178f2:	move.l 12(sp),d0
   178f6:	move.l 8(sp),d1
   178fa:	jsr -42(a6)
   178fe:	move.l d0,4(sp)
   17902:	move.l 4(sp),d0
}
   17906:	movea.l (sp)+,a6
   17908:	lea 12(sp),sp
   1790c:	rts

0001790e <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   1790e:	lea -12(sp),sp
   17912:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17914:	move.l 20(sp),12(sp)
   1791a:	move.l 24(sp),8(sp)
   17920:	move.l 1ca98 <MathIeeeSingBasBase>,d0
   17926:	movea.l d0,a6
   17928:	move.l 12(sp),d0
   1792c:	move.l 8(sp),d1
   17930:	jsr -42(a6)
   17934:	move.l d0,4(sp)
   17938:	move.l 4(sp),d0
}
   1793c:	movea.l (sp)+,a6
   1793e:	lea 12(sp),sp
   17942:	rts

00017944 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17944:	lea -20(sp),sp
   17948:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1794c:	move.l 36(sp),24(sp)
   17952:	move.l 40(sp),28(sp)
   17958:	move.l 44(sp),16(sp)
   1795e:	move.l 48(sp),20(sp)
   17964:	move.l 1caa0 <MathIeeeDoubBasBase>,d0
   1796a:	movea.l d0,a6
   1796c:	move.l 24(sp),d0
   17970:	move.l 28(sp),d1
   17974:	move.l 16(sp),d2
   17978:	move.l 20(sp),d3
   1797c:	jsr -42(a6)
   17980:	move.l d0,12(sp)
   17984:	move.l 12(sp),d0
}
   17988:	movem.l (sp)+,d2-d3/a6
   1798c:	lea 20(sp),sp
   17990:	rts

00017992 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17992:	lea -12(sp),sp
   17996:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17998:	move.l 20(sp),12(sp)
   1799e:	move.l 24(sp),8(sp)
   179a4:	move.l 1ca98 <MathIeeeSingBasBase>,d0
   179aa:	movea.l d0,a6
   179ac:	move.l 12(sp),d0
   179b0:	move.l 8(sp),d1
   179b4:	jsr -42(a6)
   179b8:	move.l d0,4(sp)
   179bc:	move.l 4(sp),d0
}
   179c0:	movea.l (sp)+,a6
   179c2:	lea 12(sp),sp
   179c6:	rts

000179c8 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   179c8:	lea -12(sp),sp
   179cc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   179ce:	move.l 20(sp),12(sp)
   179d4:	move.l 24(sp),8(sp)
   179da:	move.l 1ca98 <MathIeeeSingBasBase>,d0
   179e0:	movea.l d0,a6
   179e2:	move.l 12(sp),d0
   179e6:	move.l 8(sp),d1
   179ea:	jsr -42(a6)
   179ee:	move.l d0,4(sp)
   179f2:	move.l 4(sp),d0
}
   179f6:	movea.l (sp)+,a6
   179f8:	lea 12(sp),sp
   179fc:	rts

000179fe <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   179fe:	lea -32(sp),sp
   17a02:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17a06:	move.l 48(sp),36(sp)
   17a0c:	move.l 52(sp),40(sp)
   17a12:	move.l 56(sp),28(sp)
   17a18:	move.l 60(sp),32(sp)
   17a1e:	move.l 1caa0 <MathIeeeDoubBasBase>,d0
   17a24:	movea.l d0,a6
   17a26:	move.l 36(sp),d0
   17a2a:	move.l 40(sp),d1
   17a2e:	move.l 28(sp),d2
   17a32:	move.l 32(sp),d3
   17a36:	jsr -72(a6)
   17a3a:	move.l d0,12(sp)
   17a3e:	move.l d1,16(sp)
   17a42:	move.l 12(sp),20(sp)
   17a48:	move.l 16(sp),24(sp)
   17a4e:	move.l 20(sp),d0
   17a52:	move.l 24(sp),d1
}
   17a56:	movem.l (sp)+,d2-d3/a6
   17a5a:	lea 32(sp),sp
   17a5e:	rts

00017a60 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17a60:	lea -12(sp),sp
   17a64:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17a66:	move.l 20(sp),12(sp)
   17a6c:	move.l 24(sp),8(sp)
   17a72:	move.l 1ca98 <MathIeeeSingBasBase>,d0
   17a78:	movea.l d0,a6
   17a7a:	move.l 12(sp),d0
   17a7e:	move.l 8(sp),d1
   17a82:	jsr -72(a6)
   17a86:	move.l d0,4(sp)
   17a8a:	move.l 4(sp),d0
}
   17a8e:	movea.l (sp)+,a6
   17a90:	lea 12(sp),sp
   17a94:	rts

00017a96 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17a96:	lea -12(sp),sp
   17a9a:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17a9c:	move.l 20(sp),8(sp)
   17aa2:	move.l 24(sp),12(sp)
   17aa8:	move.l 1caa4 <MathIeeeDoubTransBase>,d0
   17aae:	movea.l d0,a6
   17ab0:	move.l 8(sp),d0
   17ab4:	move.l 12(sp),d1
   17ab8:	jsr -102(a6)
   17abc:	move.l d0,4(sp)
   17ac0:	move.l 4(sp),d0
}
   17ac4:	movea.l (sp)+,a6
   17ac6:	lea 12(sp),sp
   17aca:	rts

00017acc <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   17acc:	       lea -24(sp),sp
   17ad0:	       move.l a6,-(sp)
    if (x > 0) {
   17ad2:	       clr.l -(sp)
   17ad4:	       move.l 40(sp),-(sp)
   17ad8:	       jsr 178d8 <__gtsf2>
   17ade:	       addq.l #8,sp
   17ae0:	       tst.l d0
   17ae2:	   /-- ble.s 17b14 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17ae4:	   |   move.l 36(sp),-(sp)
   17ae8:	   |   move.l 36(sp),-(sp)
   17aec:	   |   jsr 17622 <__divsf3>
   17af2:	   |   addq.l #8,sp
   17af4:	   |   move.l d0,8(sp)
   17af8:	   |   move.l 1ca9c <MathIeeeSingTransBase>,d0
   17afe:	   |   movea.l d0,a6
   17b00:	   |   move.l 8(sp),d0
   17b04:	   |   jsr -30(a6)
   17b08:	   |   move.l d0,4(sp)
   17b0c:	   |   move.l 4(sp),d0
   17b10:	/--|-- bra.w 17c74 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17b14:	|  \-> clr.l -(sp)
   17b16:	|      move.l 40(sp),-(sp)
   17b1a:	|      jsr 17992 <__ltsf2>
   17b20:	|      addq.l #8,sp
   17b22:	|      tst.l d0
   17b24:	|  /-- bge.s 17b98 <atan2f+0xcc>
   17b26:	|  |   clr.l -(sp)
   17b28:	|  |   move.l 36(sp),-(sp)
   17b2c:	|  |   jsr 17854 <__gesf2>
   17b32:	|  |   addq.l #8,sp
   17b34:	|  |   tst.l d0
   17b36:	|  +-- blt.s 17b98 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17b38:	|  |   move.l 36(sp),-(sp)
   17b3c:	|  |   move.l 36(sp),-(sp)
   17b40:	|  |   jsr 17622 <__divsf3>
   17b46:	|  |   addq.l #8,sp
   17b48:	|  |   move.l d0,24(sp)
   17b4c:	|  |   move.l 1ca9c <MathIeeeSingTransBase>,d0
   17b52:	|  |   movea.l d0,a6
   17b54:	|  |   move.l 24(sp),d0
   17b58:	|  |   jsr -30(a6)
   17b5c:	|  |   move.l d0,20(sp)
   17b60:	|  |   move.l 20(sp),d0
   17b64:	|  |   move.l d0,-(sp)
   17b66:	|  |   jsr 1768e <__extendsfdf2>
   17b6c:	|  |   addq.l #4,sp
   17b6e:	|  |   move.l #1413754136,-(sp)
   17b74:	|  |   move.l #1074340347,-(sp)
   17b7a:	|  |   move.l d1,-(sp)
   17b7c:	|  |   move.l d0,-(sp)
   17b7e:	|  |   jsr 1755e <__adddf3>
   17b84:	|  |   lea 16(sp),sp
   17b88:	|  |   move.l d1,-(sp)
   17b8a:	|  |   move.l d0,-(sp)
   17b8c:	|  |   jsr 17a96 <__truncdfsf2>
   17b92:	|  |   addq.l #8,sp
   17b94:	+--|-- bra.w 17c74 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17b98:	|  \-> clr.l -(sp)
   17b9a:	|      move.l 40(sp),-(sp)
   17b9e:	|      jsr 17992 <__ltsf2>
   17ba4:	|      addq.l #8,sp
   17ba6:	|      tst.l d0
   17ba8:	|  /-- bge.s 17c1a <atan2f+0x14e>
   17baa:	|  |   clr.l -(sp)
   17bac:	|  |   move.l 36(sp),-(sp)
   17bb0:	|  |   jsr 17992 <__ltsf2>
   17bb6:	|  |   addq.l #8,sp
   17bb8:	|  |   tst.l d0
   17bba:	|  +-- bge.s 17c1a <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17bbc:	|  |   move.l 36(sp),-(sp)
   17bc0:	|  |   move.l 36(sp),-(sp)
   17bc4:	|  |   jsr 17622 <__divsf3>
   17bca:	|  |   addq.l #8,sp
   17bcc:	|  |   move.l d0,16(sp)
   17bd0:	|  |   move.l 1ca9c <MathIeeeSingTransBase>,d0
   17bd6:	|  |   movea.l d0,a6
   17bd8:	|  |   move.l 16(sp),d0
   17bdc:	|  |   jsr -30(a6)
   17be0:	|  |   move.l d0,12(sp)
   17be4:	|  |   move.l 12(sp),d0
   17be8:	|  |   move.l d0,-(sp)
   17bea:	|  |   jsr 1768e <__extendsfdf2>
   17bf0:	|  |   addq.l #4,sp
   17bf2:	|  |   move.l #1413754136,-(sp)
   17bf8:	|  |   move.l #1074340347,-(sp)
   17bfe:	|  |   move.l d1,-(sp)
   17c00:	|  |   move.l d0,-(sp)
   17c02:	|  |   jsr 179fe <__subdf3>
   17c08:	|  |   lea 16(sp),sp
   17c0c:	|  |   move.l d1,-(sp)
   17c0e:	|  |   move.l d0,-(sp)
   17c10:	|  |   jsr 17a96 <__truncdfsf2>
   17c16:	|  |   addq.l #8,sp
   17c18:	+--|-- bra.s 17c74 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17c1a:	|  \-> clr.l -(sp)
   17c1c:	|      move.l 40(sp),-(sp)
   17c20:	|      jsr 17658 <__eqsf2>
   17c26:	|      addq.l #8,sp
   17c28:	|      tst.l d0
   17c2a:	|  /-- bne.s 17c46 <atan2f+0x17a>
   17c2c:	|  |   clr.l -(sp)
   17c2e:	|  |   move.l 36(sp),-(sp)
   17c32:	|  |   jsr 178d8 <__gtsf2>
   17c38:	|  |   addq.l #8,sp
   17c3a:	|  |   tst.l d0
   17c3c:	|  +-- ble.s 17c46 <atan2f+0x17a>
        return PI / 2;
   17c3e:	|  |   move.l #1070141403,d0
   17c44:	+--|-- bra.s 17c74 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17c46:	|  \-> clr.l -(sp)
   17c48:	|      move.l 40(sp),-(sp)
   17c4c:	|      jsr 17658 <__eqsf2>
   17c52:	|      addq.l #8,sp
   17c54:	|      tst.l d0
   17c56:	|  /-- bne.s 17c72 <atan2f+0x1a6>
   17c58:	|  |   clr.l -(sp)
   17c5a:	|  |   move.l 36(sp),-(sp)
   17c5e:	|  |   jsr 17992 <__ltsf2>
   17c64:	|  |   addq.l #8,sp
   17c66:	|  |   tst.l d0
   17c68:	|  +-- bge.s 17c72 <atan2f+0x1a6>
        return -PI / 2;
   17c6a:	|  |   move.l #-1077342245,d0
   17c70:	+--|-- bra.s 17c74 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17c72:	|  \-> moveq #0,d0
    }
}
   17c74:	\----> movea.l (sp)+,a6
   17c76:	       lea 24(sp),sp
   17c7a:	       rts

00017c7c <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17c7c:	lea -24(sp),sp
   17c80:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17c82:	move.l 32(sp),20(sp)
   17c88:	move.l 36(sp),24(sp)
   17c8e:	move.l 1caa4 <MathIeeeDoubTransBase>,d0
   17c94:	movea.l d0,a6
   17c96:	move.l 20(sp),d0
   17c9a:	move.l 24(sp),d1
   17c9e:	jsr -96(a6)
   17ca2:	move.l d0,4(sp)
   17ca6:	move.l d1,8(sp)
   17caa:	move.l 4(sp),12(sp)
   17cb0:	move.l 8(sp),16(sp)
   17cb6:	move.l 12(sp),d0
   17cba:	move.l 16(sp),d1
}
   17cbe:	movea.l (sp)+,a6
   17cc0:	lea 24(sp),sp
   17cc4:	rts

00017cc6 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17cc6:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17cca:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17cce:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17cd2:	mulu.w 8(sp),d1
	addw	d1, d0
   17cd6:	add.w d1,d0
	swap	d0
   17cd8:	swap d0
	clrw	d0
   17cda:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17cdc:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17ce0:	mulu.w 10(sp),d1
	addl	d1, d0
   17ce4:	add.l d1,d0
	rts
   17ce6:	rts

00017ce8 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17ce8:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17cea:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17cee:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17cf2:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17cf8:	   /-- bcc.s 17d10 <__udivsi3+0x28>
	movel	d0, d2
   17cfa:	   |   move.l d0,d2
	clrw	d2
   17cfc:	   |   clr.w d2
	swap	d2
   17cfe:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17d00:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17d02:	   |   move.w d2,d0
	swap	d0
   17d04:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17d06:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17d0a:	   |   divu.w d1,d2
	movew	d2, d0
   17d0c:	   |   move.w d2,d0
	jra	6f
   17d0e:	/--|-- bra.s 17d40 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17d10:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17d12:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17d14:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17d16:	|  |   cmpi.l #65536,d1
	jcc	4b
   17d1c:	|  \-- bcc.s 17d12 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17d1e:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17d20:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17d26:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17d28:	|      mulu.w d0,d1
	swap	d2
   17d2a:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17d2c:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17d2e:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17d30:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17d32:	|  /-- bne.s 17d3e <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17d34:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17d36:	|  +-- bcs.s 17d3e <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17d38:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17d3c:	+--|-- bls.s 17d40 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17d3e:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   17d40:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17d42:	       rts

00017d44 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17d44:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17d46:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17d48:	    move.l 12(sp),d1
	jpl	1f
   17d4c:	/-- bpl.s 17d52 <__divsi3+0xe>
	negl	d1
   17d4e:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17d50:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17d52:	\-> move.l 8(sp),d0
	jpl	2f
   17d56:	/-- bpl.s 17d5c <__divsi3+0x18>
	negl	d0
   17d58:	|   neg.l d0
	negb	d2
   17d5a:	|   neg.b d2

2:	movel	d1, sp@-
   17d5c:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17d5e:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17d60:	    jsr 17ce8 <__udivsi3>
	addql	#8, sp
   17d66:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17d68:	    tst.b d2
	jpl	3f
   17d6a:	/-- bpl.s 17d6e <__divsi3+0x2a>
	negl	d0
   17d6c:	|   neg.l d0

3:	movel	sp@+, d2
   17d6e:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17d70:	    rts

00017d72 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17d72:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17d76:	move.l 4(sp),d0
	movel	d1, sp@-
   17d7a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17d7c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17d7e:	jsr 17d44 <__divsi3>
	addql	#8, sp
   17d84:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17d86:	move.l 8(sp),d1
	movel	d1, sp@-
   17d8a:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17d8c:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17d8e:	jsr 17cc6 <__mulsi3>
	addql	#8, sp
   17d94:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17d96:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17d9a:	sub.l d0,d1
	movel	d1, d0
   17d9c:	move.l d1,d0
	rts
   17d9e:	rts

00017da0 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17da0:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17da4:	move.l 4(sp),d0
	movel	d1, sp@-
   17da8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17daa:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17dac:	jsr 17ce8 <__udivsi3>
	addql	#8, sp
   17db2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17db4:	move.l 8(sp),d1
	movel	d1, sp@-
   17db8:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17dba:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17dbc:	jsr 17cc6 <__mulsi3>
	addql	#8, sp
   17dc2:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17dc4:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17dc8:	sub.l d0,d1
	movel	d1, d0
   17dca:	move.l d1,d0
	rts
   17dcc:	rts

00017dce <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17dce:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17dd0:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17dd4:	jsr -516(a6)
    move.l (sp)+, a6
   17dd8:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17dda:	rts

00017ddc <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17ddc:	move.b d0,(a3)+
	rts
   17dde:	rts
