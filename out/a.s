
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #116452,d0
       8:	       subi.l #116452,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c6e4 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #116452,d0
      40:	       subi.l #116452,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c6e4 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 8314 <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #116452,d0
      7e:	       subi.l #116452,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c6e4 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 140ba <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1ce8a <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 140d2 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c6e4 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 140ba <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1ce8a <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c6e4 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 140ba <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1ce8a <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 18154 <PutChar+0x4>
     35c:	|  |              |   jsr 176ae <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1ce92 <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1ce92 <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1ce92 <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1ce92 <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1ce92 <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1ce92 <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1ce92 <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 1817e <PutChar+0x2e>
     834:	|   jsr 176ae <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1ce92 <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 1819a <PutChar+0x4a>
     8a6:	|   jsr 176ae <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1ce92 <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1ce92 <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1ce92 <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1ce92 <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1ce92 <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1ce92 <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1ce92 <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1ce92 <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1ce8a <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1ce92 <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 140ba <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1ce92 <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1cd8e <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1cd8e <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1cd8e <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1cd8e <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1cd8e <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1ce4a <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1cd8e <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1cd8e <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1ce46 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1cd8e <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1cd8e <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 12ac <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1cd8e <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9c52 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1cd8e <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1cd92 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1cd96 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2f08 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -48(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 181c2 <PutChar+0x72>
     e1a:	          jsr 176ae <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1cdaa <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 181db <PutChar+0x8b>
     e30:	      |   jsr 176ae <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w 10c2 <CstBlankScreen+0x2b4>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1cda4 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,40(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1ce96 <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 64(sp),d0
     e5a:	|         sub.l 56(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,38(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 68(sp),d0
     e6c:	|         move.l 60(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,36(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 40(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 40(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 40(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 40(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 40(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 38(sp),d0
     eb0:	|         movea.l 40(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 40(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 40(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1cdaa <CstBackDrop>,d0
     ed2:	|         move.l d0,48(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 56(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 60(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,48(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 36(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 38(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,34(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 38(sp),d0
     f10:	|         muls.w 36(sp),d0
     f14:	|         move.w d0,32(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 18209 <PutChar+0xb9>
     f1e:	|         jsr 176ae <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 44(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 48(sp),d0
     f30:	|  |  |   movea.l 40(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 40(sp),a0
     f3c:	|  |  |   move.w 34(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1ce96 <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,48(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,44(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 44(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 18229 <PutChar+0xd9>
     f68:	|         jsr 176ae <KPrintF>
     f6e:	|         addq.l #4,sp

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
     f70:	|         move.l 1cdc2 <CstCleanupQueueDrawBuffer>,28(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
     f78:	|         moveq #20,d0
     f7a:	|         move.l d0,24(sp)
     f7e:	|         clr.l 20(sp)
     f82:	|         move.l 1ce8a <SysBase>,d0
     f88:	|         movea.l d0,a6
     f8a:	|         move.l 24(sp),d0
     f8e:	|         move.l 20(sp),d1
     f92:	|         jsr -684(a6)
     f96:	|         move.l d0,16(sp)
     f9a:	|         move.l 16(sp),d0
     f9e:	|         move.l d0,1cdc2 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
     fa4:	|         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
     faa:	|         move.l 28(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = x1;
     fb0:	|         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
     fb6:	|         move.l 56(sp),d0
     fba:	|         move.w d0,(a0)
  CstCleanupQueueDrawBuffer->y = y1;
     fbc:	|         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
     fc2:	|         move.l 60(sp),d0
     fc6:	|         move.w d0,2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
     fca:	|         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
     fd0:	|         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = width/16;
     fd4:	|         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
     fda:	|         move.w 38(sp),d0
     fde:	|         lsr.w #4,d0
     fe0:	|         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = height;
     fe4:	|         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
     fea:	|         move.w 36(sp),10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = x1/8;;
     ff0:	|         move.l 56(sp),d0
     ff4:	|     ,-- bpl.s ff8 <CstBlankScreen+0x1ea>
     ff6:	|     |   addq.l #7,d0
     ff8:	|     '-> asr.l #3,d0
     ffa:	|         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    1000:	|         move.l d0,d0
    1002:	|         move.w d0,12(a0)
  CstCleanupQueueDrawBuffer->starty = y1;
    1006:	|         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    100c:	|         move.l 60(sp),d0
    1010:	|         move.w d0,14(a0)

  next = CstCleanupQueueViewBuffer;
    1014:	|         move.l 1cdbe <CstCleanupQueueViewBuffer>,28(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    101c:	|         moveq #20,d0
    101e:	|         move.l d0,12(sp)
    1022:	|         clr.l 8(sp)
    1026:	|         move.l 1ce8a <SysBase>,d0
    102c:	|         movea.l d0,a6
    102e:	|         move.l 12(sp),d0
    1032:	|         move.l 8(sp),d1
    1036:	|         jsr -684(a6)
    103a:	|         move.l d0,4(sp)
    103e:	|         move.l 4(sp),d0
    1042:	|         move.l d0,1cdbe <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1048:	|         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    104e:	|         move.l 28(sp),16(a0)
  CstCleanupQueueViewBuffer->x = x1;
    1054:	|         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    105a:	|         move.l 56(sp),d0
    105e:	|         move.w d0,(a0)
  CstCleanupQueueViewBuffer->y = y1;
    1060:	|         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    1066:	|         move.l 60(sp),d0
    106a:	|         move.w d0,2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    106e:	|         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    1074:	|         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = width/16;
    1078:	|         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    107e:	|         move.w 38(sp),d0
    1082:	|         lsr.w #4,d0
    1084:	|         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = height;
    1088:	|         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    108e:	|         move.w 36(sp),10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = x1/8;
    1094:	|         move.l 56(sp),d0
    1098:	|     ,-- bpl.s 109c <CstBlankScreen+0x28e>
    109a:	|     |   addq.l #7,d0
    109c:	|     '-> asr.l #3,d0
    109e:	|         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    10a4:	|         move.l d0,d0
    10a6:	|         move.w d0,12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    10aa:	|         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    10b0:	|         clr.w 14(a0)

  KPrintF("CstBlankScreen: end\n");
    10b4:	|         pea 18249 <PutChar+0xf9>
    10ba:	|         jsr 176ae <KPrintF>
    10c0:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
    10c2:	'-------> movea.l (sp)+,a6
    10c4:	          lea 48(sp),sp
    10c8:	          rts

000010ca <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
    10ca:	       lea -52(sp),sp
    10ce:	       move.l a6,-(sp)
    10d0:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    10d2:	       move.l #400,32(sp)
    10da:	       moveq #2,d0
    10dc:	       move.l d0,28(sp)
    10e0:	       move.l 1ce8a <SysBase>,d0
    10e6:	       movea.l d0,a6
    10e8:	       move.l 32(sp),d0
    10ec:	       move.l 28(sp),d1
    10f0:	       jsr -198(a6)
    10f4:	       move.l d0,24(sp)
    10f8:	       move.l 24(sp),d0
    10fc:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1100:	   ,-- bne.s 112a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1102:	   |   pea 28 <_start+0x28>
    1106:	   |   pea 1825e <PutChar+0x10e>
    110c:	   |   jsr 176ae <KPrintF>
    1112:	   |   addq.l #8,sp
    Exit(1);
    1114:	   |   moveq #1,d1
    1116:	   |   move.l d1,16(sp)
    111a:	   |   move.l 1ce92 <DOSBase>,d0
    1120:	   |   movea.l d0,a6
    1122:	   |   move.l 16(sp),d1
    1126:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    112a:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1130:	       move.l 56(sp),1cdce <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1138:	       move.l #116454,52(sp)
  for(int i=0; i<16;i++)
    1140:	       clr.l 48(sp)
    1144:	   ,-- bra.s 116a <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1146:	,--|-> move.l 52(sp),d1
    114a:	|  |   move.l d1,d2
    114c:	|  |   addq.l #4,d2
    114e:	|  |   move.l d2,52(sp)
    1152:	|  |   move.l 56(sp),d0
    1156:	|  |   move.l d0,d2
    1158:	|  |   addq.l #4,d2
    115a:	|  |   move.l d2,56(sp)
    115e:	|  |   movea.l d1,a0
    1160:	|  |   move.l (a0),d1
    1162:	|  |   movea.l d0,a0
    1164:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1166:	|  |   addq.l #1,48(sp)
    116a:	|  '-> moveq #15,d0
    116c:	|      cmp.l 48(sp),d0
    1170:	'----- bge.s 1146 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1172:	       move.l #116518,52(sp)

  for(int i=0; i<12;i++)
    117a:	       clr.l 44(sp)
    117e:	   ,-- bra.s 11a4 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1180:	,--|-> move.l 52(sp),d1
    1184:	|  |   move.l d1,d2
    1186:	|  |   addq.l #4,d2
    1188:	|  |   move.l d2,52(sp)
    118c:	|  |   move.l 56(sp),d0
    1190:	|  |   move.l d0,d2
    1192:	|  |   addq.l #4,d2
    1194:	|  |   move.l d2,56(sp)
    1198:	|  |   movea.l d1,a0
    119a:	|  |   move.l (a0),d1
    119c:	|  |   movea.l d0,a0
    119e:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    11a0:	|  |   addq.l #1,44(sp)
    11a4:	|  '-> moveq #11,d0
    11a6:	|      cmp.l 44(sp),d0
    11aa:	'----- bge.s 1180 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    11ac:	       move.l #116566,52(sp)
  for(int i=0; i<10;i++)
    11b4:	       clr.l 40(sp)
    11b8:	   ,-- bra.s 11de <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    11ba:	,--|-> move.l 52(sp),d1
    11be:	|  |   move.l d1,d2
    11c0:	|  |   addq.l #4,d2
    11c2:	|  |   move.l d2,52(sp)
    11c6:	|  |   move.l 56(sp),d0
    11ca:	|  |   move.l d0,d2
    11cc:	|  |   addq.l #4,d2
    11ce:	|  |   move.l d2,56(sp)
    11d2:	|  |   movea.l d1,a0
    11d4:	|  |   move.l (a0),d1
    11d6:	|  |   movea.l d0,a0
    11d8:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    11da:	|  |   addq.l #1,40(sp)
    11de:	|  '-> moveq #9,d0
    11e0:	|      cmp.l 40(sp),d0
    11e4:	'----- bge.s 11ba <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    11e6:	       move.l #116606,52(sp)
  CstClColor = (UWORD *) cl;
    11ee:	       move.l 56(sp),1cdc6 <CstClColor>
  for(int i=0; i<32;i++)
    11f6:	       clr.l 36(sp)
    11fa:	   ,-- bra.s 1220 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    11fc:	,--|-> move.l 52(sp),d1
    1200:	|  |   move.l d1,d2
    1202:	|  |   addq.l #4,d2
    1204:	|  |   move.l d2,52(sp)
    1208:	|  |   move.l 56(sp),d0
    120c:	|  |   move.l d0,d2
    120e:	|  |   addq.l #4,d2
    1210:	|  |   move.l d2,56(sp)
    1214:	|  |   movea.l d1,a0
    1216:	|  |   move.l (a0),d1
    1218:	|  |   movea.l d0,a0
    121a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    121c:	|  |   addq.l #1,36(sp)
    1220:	|  '-> moveq #31,d0
    1222:	|      cmp.l 36(sp),d0
    1226:	'----- bge.s 11fc <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1228:	       moveq #40,d1
    122a:	       cmp.l 64(sp),d1
    122e:	   ,-- bge.s 128c <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1230:	   |   moveq #-40,d2
    1232:	   |   add.l 64(sp),d2
    1236:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    123a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1240:	   |   move.l 8(sp),d0
    1244:	   |   move.l d0,d1
    1246:	   |   addq.l #2,d1
    1248:	   |   move.l d1,8(sp)
    124c:	   |   movea.l d0,a0
    124e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1252:	   |   move.l 8(sp),d0
    1256:	   |   move.l d0,d1
    1258:	   |   addq.l #2,d1
    125a:	   |   move.l d1,8(sp)
    125e:	   |   move.l 12(sp),d1
    1262:	   |   movea.l d0,a0
    1264:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1266:	   |   move.l 8(sp),d0
    126a:	   |   move.l d0,d1
    126c:	   |   addq.l #2,d1
    126e:	   |   move.l d1,8(sp)
    1272:	   |   movea.l d0,a0
    1274:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    1278:	   |   move.l 8(sp),d0
    127c:	   |   move.l d0,d1
    127e:	   |   addq.l #2,d1
    1280:	   |   move.l d1,8(sp)
    1284:	   |   move.l 12(sp),d1
    1288:	   |   movea.l d0,a0
    128a:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    128c:	   '-> move.l 56(sp),d0
    1290:	       move.l d0,d1
    1292:	       addq.l #4,d1
    1294:	       move.l d1,56(sp)
    1298:	       moveq #-2,d2
    129a:	       movea.l d0,a0
    129c:	       move.l d2,(a0)
  return (UWORD *) retval;  
    129e:	       move.l 20(sp),d0
}
    12a2:	       move.l (sp)+,d2
    12a4:	       movea.l (sp)+,a6
    12a6:	       lea 52(sp),sp
    12aa:	       rts

000012ac <CstDisplayCursor>:



void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    12ac:	lea -20(sp),sp
    12b0:	movea.l 24(sp),a0
    12b4:	move.l 28(sp),d1
    12b8:	move.l 32(sp),d0
    12bc:	movea.w a0,a0
    12be:	move.w a0,4(sp)
    12c2:	move.w d1,d1
    12c4:	move.w d1,2(sp)
    12c8:	move.w d0,d0
    12ca:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    12cc:	move.w 2(sp),d0
    12d0:	movea.l 36(sp),a0
    12d4:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    12d6:	move.w 4(sp),d0
    12da:	lsr.w #1,d0
    12dc:	movea.l 36(sp),a0
    12e0:	addq.l #1,a0
    12e2:	move.l d0,d0
    12e4:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    12e6:	move.w 2(sp),d1
    12ea:	move.w (sp),d0
    12ec:	movea.l 36(sp),a0
    12f0:	addq.l #2,a0
    12f2:	add.b d1,d0
    12f4:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    12f6:	move.w 4(sp),d0
    12fa:	andi.w #1,d0
    12fe:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1302:	move.w 2(sp),d0
    1306:	add.w (sp),d0
    1308:	move.w d0,d0
    130a:	andi.l #65535,d0
    1310:	asr.l #7,d0
    1312:	move.l d0,d0
    1314:	move.w d0,d1
    1316:	andi.w #2,d1
    131a:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    131e:	moveq #0,d0
    1320:	move.w 2(sp),d0
    1324:	asr.l #6,d0
    1326:	move.l d0,d0
    1328:	move.w d0,d1
    132a:	andi.w #4,d1
    132e:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1332:	move.w 18(sp),d1
    1336:	move.w 16(sp),d0
    133a:	add.b d0,d1
    133c:	move.w 14(sp),d0
    1340:	movea.l 36(sp),a0
    1344:	addq.l #3,a0
    1346:	add.b d1,d0
    1348:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    134a:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1350:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1356:	move.l 10(sp),d0
    135a:	clr.w d0
    135c:	swap d0
    135e:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    1362:	move.l 1cdce <CstClCursor>,d0
    1368:	movea.l d0,a0
    136a:	addq.l #2,a0
    136c:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    1370:	move.l 1cdce <CstClCursor>,d0
    1376:	movea.l d0,a0
    1378:	addq.l #6,a0
    137a:	move.w 8(sp),(a0)

}
    137e:	nop
    1380:	lea 20(sp),sp
    1384:	rts

00001386 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    1386:	                                                             subq.l #8,sp
    1388:	                                                             movem.l d2-d7/a2-a6,-(sp)
    138c:	                                                             movea.l 56(sp),a3
    1390:	                                                             movea.l 60(sp),a2
    1394:	                                                             move.l 64(sp),d2
    1398:	                                                             move.l 68(sp),d7
    139c:	                                                             movea.w d2,a4
    139e:	                                                             move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    13a2:	                                                             clr.l -(sp)
    13a4:	                                                             pea 1 <_start+0x1>
    13a8:	                                                             movea.w 6(a3),a0
    13ac:	                                                             move.l a0,-(sp)
    13ae:	                                                             movea.w 2(a3),a0
    13b2:	                                                             move.l a0,-(sp)
    13b4:	                                                             pea 18299 <PutChar+0x149>
    13ba:	                                                             move.l 1cdd2 <CstZBufferResult>,-(sp)
    13c0:	                                                             lea 17796 <debug_register_bitmap>,a5
    13c6:	                                                             jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    13c8:	                                                             clr.l -(sp)
    13ca:	                                                             pea 1 <_start+0x1>
    13ce:	                                                             movea.w 6(a3),a0
    13d2:	                                                             move.l a0,-(sp)
    13d4:	                                                             move.w 2(a3),d0
    13d8:	                                                             addi.w #16,d0
    13dc:	                                                             movea.w d0,a0
    13de:	                                                             move.l a0,-(sp)
    13e0:	                                                             pea 182a4 <PutChar+0x154>
    13e6:	                                                             move.l 1cdd6 <CstZBufferWork>,-(sp)
    13ec:	                                                             jsr (a5)
  #endif    

  while(zbuffer) 
    13ee:	                                                             lea 48(sp),sp
    13f2:	                                                             cmpa.w #0,a2
    13f6:	,----------------------------------------------------------- beq.w 1892 <CstDrawZBuffer+0x50c>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    13fa:	|                                                            move.w d2,48(sp)
    13fe:	|                                                            move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1400:	|                                                            movea.l 4(a3),a5
  WORD zbufferset = 0;
    1404:	|                                                            clr.w d0
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1406:	|                       ,----------------------------------> move.w a5,d3
    1408:	|                       |                                    add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    140a:	|                       |                                    andi.l #65535,d3
    1410:	|                       |                                    cmp.l 16(a2),d3
    1414:	|                       |  ,-------------------------------- bge.w 15ae <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    1418:	|                       |  |                                 move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    141c:	|                       |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    1420:	|                       |  |                                 move.w d6,d0
    1422:	|                       |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1426:	|                       |  |                                 move.w 6(a2),d4
    142a:	|                       |  |                                 add.w d5,d4
    {    
      zbufferset = 1;

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    142c:	|                       |  |                                 cmp.w a4,d6
    142e:	|                    ,--|--|-------------------------------- bge.w 1726 <CstDrawZBuffer+0x3a0>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    1432:	|                    |  |  |                                 cmp.w a4,d0
    1434:	|        ,-----------|--|--|-------------------------------- ble.w 15ac <CstDrawZBuffer+0x226>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1438:	|        |           |  |  |                                 move.w 50(sp),d0
    143c:	|        |           |  |  |                                 cmp.w d0,d5
    143e:	|        |     ,-----|--|--|-------------------------------- blt.w 1872 <CstDrawZBuffer+0x4ec>
    1442:	|        |     |     |  |  |                                 movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1444:	|        |     |     |  |  |                                 cmpa.l d3,a0
    1446:	|        +-----|-----|--|--|-------------------------------- bge.w 15ac <CstDrawZBuffer+0x226>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    144a:	|        |     |     |  |  |                                 move.w 48(sp),d0
    144e:	|        |     |     |  |  |                                 sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1450:	|        |     |     |  |  |                                 move.w d0,d6
    1452:	|        |     |     |  |  |                                 andi.w #15,d6
    1456:	|        |     |     |  |  |                                 movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    1458:	|        |     |     |  |  |                                 tst.l d2
    145a:	|        |  ,--|-----|--|--|-------------------------------- blt.w 15ce <CstDrawZBuffer+0x248>
    145e:	|        |  |  |  ,--|--|--|-------------------------------> asr.l #4,d2
    1460:	|        |  |  |  |  |  |  |                                 add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    1462:	|        |  |  |  |  |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2ee8>
          custom->bltalwm = 0xffff;                      
    146a:	|        |  |  |  |  |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2eea>
          custom->bltcon1 = 0;          
    1472:	|        |  |  |  |  |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2ee6>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    147a:	|        |  |  |  |  |  |  |                                 lea 1ce96 <GfxBase>,a0
    1480:	|        |  |  |  |  |  |  |                                 movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1482:	|        |  |  |  |  |  |  |                                 lsr.w #4,d0
    1484:	|        |  |  |  |  |  |  |                                 move.w d0,d6
    1486:	|        |  |  |  |  |  |  |                                 add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    1488:	|        |  |  |  |  |  |  |                                 andi.l #65535,d6
    148e:	|        |  |  |  |  |  |  |                                 add.l 20(a2),d6
          if (xdiffrest) {
    1492:	|        |  |  |  |  |  |  |                                 clr.w d0
    1494:	|        |  |  |  |  |  |  |                                 cmp.w a5,d0
    1496:	|        |  |  |  |  |  |  |           ,-------------------- beq.w 160e <CstDrawZBuffer+0x288>
            bytewidth += 2; 
    149a:	|        |  |  |  |  |  |  |           |     ,-------------> addq.w #2,d2
            WaitBlit();   
    149c:	|        |  |  |  |  |  |  |           |     |               jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    14a0:	|        |  |  |  |  |  |  |           |     |               move.l 1cdd6 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    14aa:	|        |  |  |  |  |  |  |           |     |               move.w a5,d0
    14ac:	|        |  |  |  |  |  |  |           |     |               moveq #12,d1
    14ae:	|        |  |  |  |  |  |  |           |     |               lsl.w d1,d0
    14b0:	|        |  |  |  |  |  |  |           |     |               move.w #2544,d1
    14b4:	|        |  |  |  |  |  |  |           |     |               sub.w d0,d1
    14b6:	|        |  |  |  |  |  |  |           |     |               move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2ee4>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    14bc:	|        |  |  |  |  |  |  |           |     |               move.l (a2),d0
    14be:	|        |  |  |  |  |  |  |           |     |               move.l d0,d1
    14c0:	|  ,-----|--|--|--|--|--|--|-----------|-----|-------------- bmi.w 192c <CstDrawZBuffer+0x5a6>
    14c4:	|  |     |  |  |  |  |  |  |           |     |               asr.l #3,d1
    14c6:	|  |     |  |  |  |  |  |  |           |     |               sub.w d2,d1
    14c8:	|  |     |  |  |  |  |  |  |           |     |               move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2f08>
            custom->bltdmod = 0;                                                            
    14ce:	|  |     |  |  |  |  |  |  |           |     |               move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2f0a>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    14d6:	|  |  ,--|--|--|--|--|--|--|-----------|-----|-------------> move.w d7,d1
    14d8:	|  |  |  |  |  |  |  |  |  |           |     |               sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    14da:	|  |  |  |  |  |  |  |  |  |           |     |               movea.w d4,a0
    14dc:	|  |  |  |  |  |  |  |  |  |           |     |               cmpa.l d3,a0
    14de:	|  |  |  |  |  |  |  |  |  |           |  ,--|-------------- ble.w 164e <CstDrawZBuffer+0x2c8>
          height = sprite->height;
    14e2:	|  |  |  |  |  |  |  |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    14e6:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.l d0,-(sp)
    14e8:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.w d1,-(sp)
    14ea:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      clr.w -(sp)
    14ec:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      jsr 1803a <__mulsi3>
    14f2:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      addq.l #8,sp
    14f4:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      tst.l d0
    14f6:	|  |  |  |  |  |  |  |  |  |           |  |  |  ,-----|----- blt.w 1664 <CstDrawZBuffer+0x2de>
    14fa:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    14fc:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.l d6,d0
    14fe:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
        UWORD bltsize =  height*64+bytewidth/2;          
    1504:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    1506:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1508:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.w d2,d4
    150a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
       
        WaitBlit();
    1510:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lea 1ce96 <GfxBase>,a0
    1516:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    1518:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    151c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2ee8>
        custom->bltalwm = 0xffff;
    1524:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2eea>
        custom->bltamod = 2;
    152c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2f08>
        custom->bltbmod = 0;
    1534:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2f06>
        custom->bltdmod = 0;
    153c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2f0a>
        custom->bltcon0 = 0xd0c; //Copy A to D
    1544:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2ee4>
        custom->bltcon1 = 0;        
    154c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2ee6>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    1554:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l 1cdd6 <CstZBufferWork>,d0
    155a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   addq.l #2,d0
    155c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1562:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l (a3),d2
    1564:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l 4(a3),a5
    1568:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d2,d0
    156a:	|  |  |  |  |  |  |  |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 16ee <CstDrawZBuffer+0x368>
    156e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    1570:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l a5,-(sp)
    1572:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    1574:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   jsr 1803a <__mulsi3>
    157a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    157c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    157e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    1580:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    1582:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    1584:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    1588:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2ef0>
        custom->bltdpt = (APTR) CstZBufferResult;
    158e:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l 1cdd2 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1598:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.w a5,d1
    159a:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    159c:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    159e:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 16dc <CstDrawZBuffer+0x356>
    15a2:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    15a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    15a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
      zbufferset = 1;
    15ac:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d0

      }
    }
    zbuffer = zbuffer->nextPanel;
    15ae:	|  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    15b2:	|  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    15b6:	|  |  |  |  |  |  |  |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 1406 <CstDrawZBuffer+0x80>
  }
  
  if(zbufferset == 0)
    15ba:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.w d0
    15bc:	+--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- beq.w 1892 <CstDrawZBuffer+0x50c>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    15c0:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 1cdd2 <CstZBufferResult>,d0

}
    15c6:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    15ca:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    15cc:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    15ce:	|  |  |  |  >--|--|--|--------|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    15d0:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    15d2:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    15d4:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    15d6:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2ee8>
          custom->bltalwm = 0xffff;                      
    15de:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2eea>
          custom->bltcon1 = 0;          
    15e6:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2ee6>
            WaitBlit();   
    15ee:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 1ce96 <GfxBase>,a0
    15f4:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    15f6:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    15f8:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    15fa:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    15fc:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    1602:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    1606:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   clr.w d0
    1608:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    160a:	|  |  |  |  |  |  |  |        |  |  |  |  |  '--|--|--|--|-- bne.w 149a <CstDrawZBuffer+0x114>
            WaitBlit();         
    160e:	|  |  |  |  |  |  |  |        |  |  |  '--|-----|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    1612:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l 1cdd6 <CstZBufferWork>,d0
    1618:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   addq.l #2,d0
    161a:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
            custom->bltcon0 = 4096 + 0x9f0;              
    1620:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2ee4>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1628:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l (a2),d0
    162a:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,d1
    162c:	|  |  |  |  |  |  |  |  ,-----|--|--|-----|-----|--|--|--|-- bmi.w 1944 <CstDrawZBuffer+0x5be>
    1630:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   asr.l #3,d1
    1632:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   sub.w d2,d1
    1634:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2f08>
            custom->bltdmod = 2;                                                            
    163a:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2f0a>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1642:	|  |  |  |  |  |  |  |  |  ,--|--|--|-----|-----|--|--|--|-> move.w d7,d1
    1644:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1646:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   movea.w d4,a0
    1648:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   cmpa.l d3,a0
    164a:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  '--|-- bgt.w 14e2 <CstDrawZBuffer+0x15c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    164e:	|  |  |  |  |  |  |  |  |  |  |  |  |     '-----|--|-----|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1650:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    1652:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    1654:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    1656:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr 1803a <__mulsi3>
    165c:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    165e:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    1660:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 14fa <CstDrawZBuffer+0x174>
    1664:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    1666:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    1668:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l d6,d0
    166a:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
        UWORD bltsize =  height*64+bytewidth/2;          
    1670:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    1672:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1674:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    1676:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
        WaitBlit();
    167c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1ce96 <GfxBase>,a0
    1682:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    1684:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    1688:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2ee8>
        custom->bltalwm = 0xffff;
    1690:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2eea>
        custom->bltamod = 2;
    1698:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2f08>
        custom->bltbmod = 0;
    16a0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2f06>
        custom->bltdmod = 0;
    16a8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2f0a>
        custom->bltcon0 = 0xd0c; //Copy A to D
    16b0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2ee4>
        custom->bltcon1 = 0;        
    16b8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2ee6>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    16c0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 1cdd6 <CstZBufferWork>,d0
    16c6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         addq.l #2,d0
    16c8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16ce:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    16d0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l 4(a3),a5
    16d4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    16d6:	|  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 156e <CstDrawZBuffer+0x1e8>
    16da:	|  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 16ee <CstDrawZBuffer+0x368>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    16dc:	|  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    16de:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    16e0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    16e2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    16e4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
    16ea:	|  |  |  +--|--|--|--|--|--|--|--|--|----------------------- bra.w 15ac <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    16ee:	|  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    16f0:	|  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    16f2:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l a5,-(sp)
    16f4:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    16f6:	|  |  |  |  |  |  |  |  |  |  |     |                        jsr 1803a <__mulsi3>
    16fc:	|  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    16fe:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    1700:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1702:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1704:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1706:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    170a:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2ef0>
        custom->bltdpt = (APTR) CstZBufferResult;
    1710:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l 1cdd2 <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    171a:	|  |  |  |  |  |  |  |  |  |  |     |                        move.w a5,d1
    171c:	|  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    171e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    1720:	|  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 15a2 <CstDrawZBuffer+0x21c>
    1724:	|  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 16dc <CstDrawZBuffer+0x356>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1726:	|  |  |  |  |  |  |  '--|--|-------------------------------> move.w 48(sp),d1
    172a:	|  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    172c:	|  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    1732:	|  |  |  |  |  |  |     |  |                                 movea.l d1,a6
    1734:	|  |  |  |  |  |  |     |  |                                 movea.w d6,a1
    1736:	|  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    1738:	|  |  |  +--|--|--|-----|--|-------------------------------- bge.w 15ac <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    173c:	|  |  |  |  |  |  |     |  |                                 move.w 50(sp),d1
    1740:	|  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    1742:	|  |  |  |  |  |  |     |  |           ,-------------------- bge.w 184e <CstDrawZBuffer+0x4c8>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1746:	|  |  |  |  |  |  |     |  |           |                     cmp.w 50(sp),d4
    174a:	|  |  |  +--|--|--|-----|--|-----------|-------------------- ble.w 15ac <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    174e:	|  |  |  |  |  |  |     |  |           |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1752:	|  |  |  |  |  |  |     |  |           |                     move.w d6,d1
    1754:	|  |  |  |  |  |  |     |  |           |                     lsr.w #4,d1
    1756:	|  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1758:	|  |  |  |  |  |  |     |  |           |                     andi.w #15,d6
    175c:	|  |  |  |  |  |  |     |  |           |                     move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1760:	|  |  |  |  |  |  |     |  |           |                     tst.l d2
    1762:	|  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 17ec <CstDrawZBuffer+0x466>
    1766:	|  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    1768:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    176a:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    176c:	|  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    176e:	|  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l a0,a6
    1770:	|  |  |  |  |  |  |     |  |        |  |  |  ,-------------- bge.w 17fe <CstDrawZBuffer+0x478>
            WaitBlit();  
    1774:	|  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1ce96 <GfxBase>,a0
    177a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    177c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    1780:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2ee8>
            custom->bltalwm = 0xffff;          
    1788:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2eea>
            custom->bltdpt = CstZBufferWork;        
    1790:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 1cdd6 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
            custom->bltcon1 = 0;               
    179a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2ee6>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    17a2:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    17a6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    17a8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    17aa:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.s 1816 <CstDrawZBuffer+0x490>
    17ac:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    17ae:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a6
    17b0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    17b2:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      tst.w 46(sp)
    17b6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.s 1824 <CstDrawZBuffer+0x49e>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    17b8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w 46(sp),d6
    17bc:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    17be:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d6
    17c0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addi.w #2544,d6
    17c4:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2ee4>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    17ca:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2f08>
              custom->bltdmod = 0;                                                            
    17d0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2f0a>
              xdiffbyte += 2;                 
    17d8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,d1
    17da:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d1
    17dc:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    17de:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d1
    17e4:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,d6
    17e6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   sub.l d1,d6
    17e8:	|  |  +--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 14d6 <CstDrawZBuffer+0x150>
          bytewidth = (sprite->width/16)*2 + 2;
    17ec:	|  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d6
    17ee:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d6,d2
    17f0:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    17f2:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    17f4:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    17f6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    17f8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l a0,a6
    17fa:	|  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- blt.w 1774 <CstDrawZBuffer+0x3ee>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    17fe:	|  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 182ae <PutChar+0x15e>
    1804:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 176ae <KPrintF>
              return FALSE;
    180a:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    180c:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   moveq #0,d0
}
    180e:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1812:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #8,sp
    1814:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1816:	|  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    1818:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    181a:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a6
    181c:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    181e:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   tst.w 46(sp)
    1822:	|  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 17b8 <CstDrawZBuffer+0x432>
              custom->bltcon0 = 0x9f0;              
    1824:	|  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2ee4>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    182c:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2f08>
              custom->bltdmod = 0;                                                            
    1832:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2f0a>
              xdiffbyte += 2;                 
    183a:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a5,d1
    183c:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d1
    183e:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1840:	|  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d1
    1846:	|  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,d6
    1848:	|  |  |  |  |  |  |     |  |        |  |  |                  sub.l d1,d6
    184a:	|  |  +--|--|--|--|-----|--|--------|--|--|----------------- bra.w 14d6 <CstDrawZBuffer+0x150>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    184e:	|  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1850:	|  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    1852:	|  |  |  +--|--|--|-----|--|--------|-----|----------------- bge.w 15ac <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1856:	|  |  |  |  |  |  |     |  |        |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    185a:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,d1
    185c:	|  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d1
    185e:	|  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1860:	|  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d6
    1864:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1868:	|  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    186a:	|  |  |  |  |  |  |     |  |        |     '----------------- bge.w 1766 <CstDrawZBuffer+0x3e0>
    186e:	|  |  |  |  |  |  |     |  |        '----------------------- bra.w 17ec <CstDrawZBuffer+0x466>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1872:	|  |  |  |  |  '--|-----|--|-------------------------------> cmp.w 50(sp),d4
    1876:	|  |  |  '--|-----|-----|--|-------------------------------- ble.w 15ac <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    187a:	|  |  |     |     |     |  |                                 move.w 48(sp),d0
    187e:	|  |  |     |     |     |  |                                 sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1880:	|  |  |     |     |     |  |                                 move.w d0,d6
    1882:	|  |  |     |     |     |  |                                 andi.w #15,d6
    1886:	|  |  |     |     |     |  |                                 movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1888:	|  |  |     |     |     |  |                                 tst.l d2
    188a:	|  |  |     |     '-----|--|-------------------------------- bge.w 145e <CstDrawZBuffer+0xd8>
    188e:	|  |  |     '-----------|--|-------------------------------- bra.w 15ce <CstDrawZBuffer+0x248>
    WaitBlit();
    1892:	'--|--|-----------------|--|-------------------------------> movea.l 1ce96 <GfxBase>,a6
    1898:	   |  |                 |  |                                 jsr -228(a6)
    custom->bltafwm = 0xffff;
    189c:	   |  |                 |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb2ee8>
    custom->bltalwm = 0xffff;
    18a4:	   |  |                 |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2eea>
    custom->bltamod = 0;
    18ac:	   |  |                 |  |                                 move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2f08>
    custom->bltbmod = 0;
    18b4:	   |  |                 |  |                                 move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2f06>
    custom->bltcmod = 0;
    18bc:	   |  |                 |  |                                 move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2f04>
    custom->bltdmod = 0;
    18c4:	   |  |                 |  |                                 move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2f0a>
    custom->bltcon0 = 0x9f0; //Copy A to D
    18cc:	   |  |                 |  |                                 move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb2ee4>
    custom->bltcon1 = 0;        
    18d4:	   |  |                 |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb2ee6>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    18dc:	   |  |                 |  |                                 move.l (a3),d2
    18de:	   |  |                 |  |                                 move.l 4(a3),d3
    18e2:	   |  |                 |  |                                 move.l d2,d0
    18e4:	   |  |                 |  |                       ,-------- bmi.w 196c <CstDrawZBuffer+0x5e6>
    18e8:	   |  |                 |  |                       |         asr.l #3,d0
    18ea:	   |  |                 |  |                       |         move.l d3,-(sp)
    18ec:	   |  |                 |  |                       |         move.l d0,-(sp)
    18ee:	   |  |                 |  |                       |         jsr 1803a <__mulsi3>
    18f4:	   |  |                 |  |                       |         addq.l #8,sp
    18f6:	   |  |                 |  |                       |         move.l d0,d1
    18f8:	   |  |                 |  |                       |         add.l d0,d1
    18fa:	   |  |                 |  |                       |         add.l d1,d1
    18fc:	   |  |                 |  |                       |         add.l d1,d0
    18fe:	   |  |                 |  |                       |         add.l 24(a3),d0
    1902:	   |  |                 |  |                       |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
    custom->bltdpt = (APTR) CstZBufferResult;
    1908:	   |  |                 |  |                       |         move.l 1cdd2 <CstZBufferResult>,d0
    190e:	   |  |                 |  |                       |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1914:	   |  |                 |  |                       |         lsl.w #6,d3
    1916:	   |  |                 |  |                       |         tst.l d2
    1918:	   |  |                 |  |                    ,--|-------- blt.s 195c <CstDrawZBuffer+0x5d6>
    191a:	   |  |                 |  |                    |  |  ,----> asr.l #4,d2
    191c:	   |  |                 |  |                    |  |  |      add.w d2,d3
    191e:	   |  |                 |  |                    |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
}
    1924:	   |  |                 |  |                    |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1928:	   |  |                 |  |                    |  |  |  |   addq.l #8,sp
    192a:	   |  |                 |  |                    |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    192c:	   '--|-----------------|--|--------------------|--|--|--|-> addq.l #7,d1
    192e:	      |                 |  |                    |  |  |  |   asr.l #3,d1
    1930:	      |                 |  |                    |  |  |  |   sub.w d2,d1
    1932:	      |                 |  |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2f08>
            custom->bltdmod = 0;                                                            
    1938:	      |                 |  |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2f0a>
    1940:	      '-----------------|--|--------------------|--|--|--|-- bra.w 14d6 <CstDrawZBuffer+0x150>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1944:	                        '--|--------------------|--|--|--|-> addq.l #7,d1
    1946:	                           |                    |  |  |  |   asr.l #3,d1
    1948:	                           |                    |  |  |  |   sub.w d2,d1
    194a:	                           |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2f08>
            custom->bltdmod = 2;                                                            
    1950:	                           |                    |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2f0a>
    1958:	                           '--------------------|--|--|--|-- bra.w 1642 <CstDrawZBuffer+0x2bc>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    195c:	                                                >--|--|--|-> moveq #15,d1
    195e:	                                                |  |  |  |   add.l d1,d2
    1960:	                                                |  |  |  |   asr.l #4,d2
    1962:	                                                |  |  |  |   add.w d2,d3
    1964:	                                                |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
  return CstZBufferResult;
    196a:	                                                |  |  |  '-- bra.s 1924 <CstDrawZBuffer+0x59e>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    196c:	                                                |  '--|----> addq.l #7,d0
    196e:	                                                |     |      asr.l #3,d0
    1970:	                                                |     |      move.l d3,-(sp)
    1972:	                                                |     |      move.l d0,-(sp)
    1974:	                                                |     |      jsr 1803a <__mulsi3>
    197a:	                                                |     |      addq.l #8,sp
    197c:	                                                |     |      move.l d0,d1
    197e:	                                                |     |      add.l d0,d1
    1980:	                                                |     |      add.l d1,d1
    1982:	                                                |     |      add.l d1,d0
    1984:	                                                |     |      add.l 24(a3),d0
    1988:	                                                |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
    custom->bltdpt = (APTR) CstZBufferResult;
    198e:	                                                |     |      move.l 1cdd2 <CstZBufferResult>,d0
    1994:	                                                |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    199a:	                                                |     |      lsl.w #6,d3
    199c:	                                                |     |      tst.l d2
    199e:	                                                |     '----- bge.w 191a <CstDrawZBuffer+0x594>
    19a2:	                                                '----------- bra.s 195c <CstDrawZBuffer+0x5d6>

000019a4 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    19a4:	    lea -20(sp),sp
    19a8:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    19aa:	    move.l 1cdba <CstDrawBuffer>,d0
    19b0:	,-- beq.s 19ca <CstFreeBuffer+0x26>
    19b2:	|   move.l 1cdba <CstDrawBuffer>,20(sp)
    19ba:	|   move.l 1ce8a <SysBase>,d0
    19c0:	|   movea.l d0,a6
    19c2:	|   movea.l 20(sp),a1
    19c6:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    19ca:	'-> move.l 1cdb6 <CstViewBuffer>,d0
    19d0:	,-- beq.s 19ea <CstFreeBuffer+0x46>
    19d2:	|   move.l 1cdb6 <CstViewBuffer>,16(sp)
    19da:	|   move.l 1ce8a <SysBase>,d0
    19e0:	|   movea.l d0,a6
    19e2:	|   movea.l 16(sp),a1
    19e6:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    19ea:	'-> move.l 1cdb2 <CstCopperList>,d0
    19f0:	,-- beq.s 1a0a <CstFreeBuffer+0x66>
    19f2:	|   move.l 1cdb2 <CstCopperList>,12(sp)
    19fa:	|   move.l 1ce8a <SysBase>,d0
    1a00:	|   movea.l d0,a6
    1a02:	|   movea.l 12(sp),a1
    1a06:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1a0a:	'-> move.l 1cdaa <CstBackDrop>,d0
    1a10:	,-- beq.s 1a2a <CstFreeBuffer+0x86>
    1a12:	|   move.l 1cdaa <CstBackDrop>,8(sp)
    1a1a:	|   move.l 1ce8a <SysBase>,d0
    1a20:	|   movea.l d0,a6
    1a22:	|   movea.l 8(sp),a1
    1a26:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1a2a:	'-> move.l 1cdae <CstBackDropBackup>,d0
    1a30:	,-- beq.s 1a4a <CstFreeBuffer+0xa6>
    1a32:	|   move.l 1cdae <CstBackDropBackup>,4(sp)
    1a3a:	|   move.l 1ce8a <SysBase>,d0
    1a40:	|   movea.l d0,a6
    1a42:	|   movea.l 4(sp),a1
    1a46:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1a4a:	'-> clr.l 1cdba <CstDrawBuffer>
  CstViewBuffer = NULL;
    1a50:	    clr.l 1cdb6 <CstViewBuffer>
  CstCopperList = NULL;
    1a56:	    clr.l 1cdb2 <CstCopperList>
  CstBackDrop = NULL;
    1a5c:	    clr.l 1cdaa <CstBackDrop>

}
    1a62:	    nop
    1a64:	    movea.l (sp)+,a6
    1a66:	    lea 20(sp),sp
    1a6a:	    rts

00001a6c <CstFreeze>:



void CstFreeze( ) {
    1a6c:	       lea -64(sp),sp
    1a70:	       move.l a6,-(sp)
    1a72:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1a74:	       pea 182fe <PutChar+0x1ae>
    1a7a:	       jsr 176ae <KPrintF>
    1a80:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1a82:	       move.l 1cdde <winWidth>,d0
    1a88:	       lsr.l #3,d0
    1a8a:	       move.l d0,d1
    1a8c:	       move.l 1cde2 <winHeight>,d0
    1a92:	       move.l d0,d0
    1a94:	       muls.w d0,d1
    1a96:	       move.w d1,d0
    1a98:	       add.w d0,d0
    1a9a:	       add.w d0,d0
    1a9c:	       move.w d0,d2
    1a9e:	       add.w d1,d2
    1aa0:	       move.w d2,54(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1aa4:	       move.l #14675968,50(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1aac:	       moveq #0,d0
    1aae:	       move.w 54(sp),d0
    1ab2:	       move.l d0,46(sp)
    1ab6:	       clr.l 42(sp)
    1aba:	       move.l 1ce8a <SysBase>,d0
    1ac0:	       movea.l d0,a6
    1ac2:	       move.l 46(sp),d0
    1ac6:	       move.l 42(sp),d1
    1aca:	       jsr -684(a6)
    1ace:	       move.l d0,38(sp)
    1ad2:	       move.l 38(sp),d0
    1ad6:	       move.l d0,1cdae <CstBackDropBackup>
  if( !CstBackDropBackup)
    1adc:	       move.l 1cdae <CstBackDropBackup>,d0
    1ae2:	   ,-- bne.s 1af2 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1ae4:	   |   pea 18325 <PutChar+0x1d5>
    1aea:	   |   jsr 176ae <KPrintF>
    1af0:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1af2:	   '-> move.l 1cde2 <winHeight>,d0
    1af8:	       move.l d0,d0
    1afa:	       movea.w d0,a1
    1afc:	       move.l 1cdde <winWidth>,d0
    1b02:	       move.l d0,d0
    1b04:	       movea.w d0,a0
    1b06:	       move.l 1cdae <CstBackDropBackup>,d0
    1b0c:	       clr.l -(sp)
    1b0e:	       pea 5 <_start+0x5>
    1b12:	       move.l a1,-(sp)
    1b14:	       move.l a0,-(sp)
    1b16:	       pea 1835d <PutChar+0x20d>
    1b1c:	       move.l d0,-(sp)
    1b1e:	       jsr 17796 <debug_register_bitmap>
    1b24:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1b28:	       move.l 1cdaa <CstBackDrop>,68(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1b30:	       move.l 1cdae <CstBackDropBackup>,64(sp)
  for(int i=0;i<size/4;i++) 
    1b38:	       clr.l 60(sp)
    1b3c:	   ,-- bra.s 1b62 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1b3e:	,--|-> move.l 68(sp),d1
    1b42:	|  |   move.l d1,d0
    1b44:	|  |   addq.l #4,d0
    1b46:	|  |   move.l d0,68(sp)
    1b4a:	|  |   move.l 64(sp),d0
    1b4e:	|  |   move.l d0,d2
    1b50:	|  |   addq.l #4,d2
    1b52:	|  |   move.l d2,64(sp)
    1b56:	|  |   movea.l d1,a0
    1b58:	|  |   move.l (a0),d1
    1b5a:	|  |   movea.l d0,a0
    1b5c:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1b5e:	|  |   addq.l #1,60(sp)
    1b62:	|  '-> move.w 54(sp),d0
    1b66:	|      lsr.w #2,d0
    1b68:	|      move.w d0,d0
    1b6a:	|      andi.l #65535,d0
    1b70:	|      cmp.l 60(sp),d0
    1b74:	'----- bgt.s 1b3e <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1b76:	       move.l 1cdb6 <CstViewBuffer>,68(sp)
  dst = (ULONG *) CstBackDrop;
    1b7e:	       move.l 1cdaa <CstBackDrop>,64(sp)

  for(int i=0;i<size/4;i++) 
    1b86:	       clr.l 56(sp)
    1b8a:	   ,-- bra.s 1bb0 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1b8c:	,--|-> move.l 68(sp),d1
    1b90:	|  |   move.l d1,d0
    1b92:	|  |   addq.l #4,d0
    1b94:	|  |   move.l d0,68(sp)
    1b98:	|  |   move.l 64(sp),d0
    1b9c:	|  |   move.l d0,d2
    1b9e:	|  |   addq.l #4,d2
    1ba0:	|  |   move.l d2,64(sp)
    1ba4:	|  |   movea.l d1,a0
    1ba6:	|  |   move.l (a0),d1
    1ba8:	|  |   movea.l d0,a0
    1baa:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1bac:	|  |   addq.l #1,56(sp)
    1bb0:	|  '-> move.w 54(sp),d0
    1bb4:	|      lsr.w #2,d0
    1bb6:	|      move.w d0,d0
    1bb8:	|      andi.l #65535,d0
    1bbe:	|      cmp.l 56(sp),d0
    1bc2:	'----- bgt.s 1b8c <CstFreeze+0x120>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    1bc4:	       move.l 1cdc2 <CstCleanupQueueDrawBuffer>,34(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1bcc:	       moveq #20,d0
    1bce:	       move.l d0,30(sp)
    1bd2:	       clr.l 26(sp)
    1bd6:	       move.l 1ce8a <SysBase>,d0
    1bdc:	       movea.l d0,a6
    1bde:	       move.l 30(sp),d0
    1be2:	       move.l 26(sp),d1
    1be6:	       jsr -684(a6)
    1bea:	       move.l d0,22(sp)
    1bee:	       move.l 22(sp),d0
    1bf2:	       move.l d0,1cdc2 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    1bf8:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    1bfe:	       move.l 34(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    1c04:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    1c0a:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    1c0c:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    1c12:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    1c16:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    1c1c:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    1c20:	       move.l 1cdde <winWidth>,d0
    1c26:	       lsr.l #4,d0
    1c28:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    1c2e:	       move.l d0,d0
    1c30:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    1c34:	       move.l 1cde2 <winHeight>,d0
    1c3a:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    1c40:	       move.l d0,d0
    1c42:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    1c46:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    1c4c:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    1c50:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    1c56:	       clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    1c5a:	       move.l 1cdbe <CstCleanupQueueViewBuffer>,34(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1c62:	       moveq #20,d2
    1c64:	       move.l d2,18(sp)
    1c68:	       clr.l 14(sp)
    1c6c:	       move.l 1ce8a <SysBase>,d0
    1c72:	       movea.l d0,a6
    1c74:	       move.l 18(sp),d0
    1c78:	       move.l 14(sp),d1
    1c7c:	       jsr -684(a6)
    1c80:	       move.l d0,10(sp)
    1c84:	       move.l 10(sp),d0
    1c88:	       move.l d0,1cdbe <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1c8e:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    1c94:	       move.l 34(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    1c9a:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    1ca0:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    1ca2:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    1ca8:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    1cac:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    1cb2:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    1cb6:	       move.l 1cdde <winWidth>,d0
    1cbc:	       lsr.l #4,d0
    1cbe:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    1cc4:	       move.l d0,d0
    1cc6:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    1cca:	       move.l 1cde2 <winHeight>,d0
    1cd0:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    1cd6:	       move.l d0,d0
    1cd8:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    1cdc:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    1ce2:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    1ce6:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    1cec:	       clr.w 14(a0)

  KPrintF("CstFreeze: Finished");
    1cf0:	       pea 1836c <PutChar+0x21c>
    1cf6:	       jsr 176ae <KPrintF>
    1cfc:	       addq.l #4,sp

}  
    1cfe:	       nop
    1d00:	       move.l (sp)+,d2
    1d02:	       movea.l (sp)+,a6
    1d04:	       lea 64(sp),sp
    1d08:	       rts

00001d0a <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1d0a:	             lea -172(sp),sp
    1d0e:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1d12:	             pea 18380 <PutChar+0x230>
    1d18:	             jsr 176ae <KPrintF>
    1d1e:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1d20:	             move.l 192(sp),-(sp)
    1d24:	             jsr 6bc <get2bytes>
    1d2a:	             addq.l #4,sp
    1d2c:	             move.w d0,162(sp)
  UWORD height = get2bytes(fp);  
    1d30:	             move.l 192(sp),-(sp)
    1d34:	             jsr 6bc <get2bytes>
    1d3a:	             addq.l #4,sp
    1d3c:	             move.w d0,160(sp)

  UWORD widthbyteslayer = width/8;
    1d40:	             move.w 162(sp),d0
    1d44:	             lsr.w #3,d0
    1d46:	             move.w d0,158(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1d4a:	             move.w 158(sp),d0
    1d4e:	             lsr.w #1,d0
    1d50:	             move.w d0,156(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1d54:	             move.l 1cdde <winWidth>,d0
    1d5a:	             lsr.l #3,d0
    1d5c:	             move.w d0,154(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1d60:	             move.w 158(sp),d0
    1d64:	             muls.w 160(sp),d0
    1d68:	             move.w d0,152(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1d6c:	             move.w 152(sp),d1
    1d70:	             move.w d1,d0
    1d72:	             add.w d0,d0
    1d74:	             add.w d0,d0
    1d76:	             move.w d0,d2
    1d78:	             add.w d1,d2
    1d7a:	             move.w d2,150(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1d7e:	             move.w 1cda4 <CstPaletteLoaded>,d0
    1d84:	,----------- bne.w 1e1e <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1d88:	|            move.w #384,148(sp)

    if(CstPalette) {
    1d8e:	|            move.l 1cdca <CstPalette>,d0
    1d94:	|        ,-- beq.s 1dae <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1d96:	|        |   move.l 1cdca <CstPalette>,144(sp)
    1d9e:	|        |   move.l 1ce8a <SysBase>,d0
    1da4:	|        |   movea.l d0,a6
    1da6:	|        |   movea.l 144(sp),a1
    1daa:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    1dae:	|        '-> moveq #64,d0
    1db0:	|            move.l d0,140(sp)
    1db4:	|            clr.l 136(sp)
    1db8:	|            move.l 1ce8a <SysBase>,d0
    1dbe:	|            movea.l d0,a6
    1dc0:	|            move.l 140(sp),d0
    1dc4:	|            move.l 136(sp),d1
    1dc8:	|            jsr -684(a6)
    1dcc:	|            move.l d0,132(sp)
    1dd0:	|            move.l 132(sp),d0
    1dd4:	|            move.l d0,1cdca <CstPalette>
    CstPaletteLoaded = 1;
    1dda:	|            move.w #1,1cda4 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    1de2:	|            move.l 1cdca <CstPalette>,184(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1dea:	|            clr.l 180(sp)
    1dee:	|        ,-- bra.s 1e14 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    1df0:	|     ,--|-> move.l 192(sp),-(sp)
    1df4:	|     |  |   jsr 6bc <get2bytes>
    1dfa:	|     |  |   addq.l #4,sp
    1dfc:	|     |  |   move.l d0,d1
    1dfe:	|     |  |   move.l 184(sp),d0
    1e02:	|     |  |   move.l d0,d2
    1e04:	|     |  |   addq.l #2,d2
    1e06:	|     |  |   move.l d2,184(sp)
    1e0a:	|     |  |   move.l d1,d1
    1e0c:	|     |  |   movea.l d0,a0
    1e0e:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e10:	|     |  |   addq.l #1,180(sp)
    1e14:	|     |  '-> moveq #31,d0
    1e16:	|     |      cmp.l 180(sp),d0
    1e1a:	|     '----- bge.s 1df0 <CstLoadBackdrop+0xe6>
    1e1c:	|  ,-------- bra.s 1e3c <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e1e:	'--|-------> clr.l 176(sp)
    1e22:	   |     ,-- bra.s 1e34 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    1e24:	   |  ,--|-> move.l 192(sp),-(sp)
    1e28:	   |  |  |   jsr 6bc <get2bytes>
    1e2e:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1e30:	   |  |  |   addq.l #1,176(sp)
    1e34:	   |  |  '-> moveq #31,d2
    1e36:	   |  |      cmp.l 176(sp),d2
    1e3a:	   |  '----- bge.s 1e24 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    1e3c:	   '-------> moveq #0,d0
    1e3e:	             move.w 150(sp),d0
    1e42:	             move.l d0,128(sp)
    1e46:	             moveq #2,d0
    1e48:	             move.l d0,124(sp)
    1e4c:	             move.l 1ce8a <SysBase>,d0
    1e52:	             movea.l d0,a6
    1e54:	             move.l 128(sp),d0
    1e58:	             move.l 124(sp),d1
    1e5c:	             jsr -684(a6)
    1e60:	             move.l d0,120(sp)
    1e64:	             move.l 120(sp),d0
    1e68:	             move.l d0,116(sp)
  if( !tmpbuffer)
    1e6c:	         ,-- bne.s 1e7c <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    1e6e:	         |   pea 183af <PutChar+0x25f>
    1e74:	         |   jsr 176ae <KPrintF>
    1e7a:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1e7c:	         '-> moveq #0,d0
    1e7e:	             move.w 152(sp),d0
    1e82:	             move.l d0,112(sp)
    1e86:	             moveq #2,d2
    1e88:	             move.l d2,108(sp)
    1e8c:	             move.l 1ce8a <SysBase>,d0
    1e92:	             movea.l d0,a6
    1e94:	             move.l 112(sp),d0
    1e98:	             move.l 108(sp),d1
    1e9c:	             jsr -684(a6)
    1ea0:	             move.l d0,104(sp)
    1ea4:	             move.l 104(sp),d0
    1ea8:	             move.l d0,100(sp)
  if( !tmpmask)
    1eac:	         ,-- bne.s 1ebc <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    1eae:	         |   pea 183e5 <PutChar+0x295>
    1eb4:	         |   jsr 176ae <KPrintF>
    1eba:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    1ebc:	         '-> move.w 160(sp),d0
    1ec0:	             movea.w d0,a1
    1ec2:	             move.w 162(sp),d0
    1ec6:	             movea.w d0,a0
    1ec8:	             clr.l -(sp)
    1eca:	             pea 5 <_start+0x5>
    1ece:	             move.l a1,-(sp)
    1ed0:	             move.l a0,-(sp)
    1ed2:	             pea 18419 <PutChar+0x2c9>
    1ed8:	             move.l 136(sp),-(sp)
    1edc:	             jsr 17796 <debug_register_bitmap>
    1ee2:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1ee6:	             move.w 160(sp),d0
    1eea:	             movea.w d0,a1
    1eec:	             move.w 162(sp),d0
    1ef0:	             movea.w d0,a0
    1ef2:	             clr.l -(sp)
    1ef4:	             pea 1 <_start+0x1>
    1ef8:	             move.l a1,-(sp)
    1efa:	             move.l a0,-(sp)
    1efc:	             pea 18427 <PutChar+0x2d7>
    1f02:	             move.l 136(sp),-(sp)
    1f06:	             jsr 17796 <debug_register_bitmap>
    1f0c:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    1f10:	             move.l 192(sp),96(sp)
    1f16:	             move.l 116(sp),92(sp)
    1f1c:	             moveq #2,d0
    1f1e:	             move.l d0,88(sp)
    1f22:	             move.w 150(sp),d0
    1f26:	             lsr.w #1,d0
    1f28:	             move.w d0,d0
    1f2a:	             andi.l #65535,d0
    1f30:	             move.l d0,84(sp)
    1f34:	             move.l 1ce92 <DOSBase>,d0
    1f3a:	             movea.l d0,a6
    1f3c:	             move.l 96(sp),d1
    1f40:	             move.l 92(sp),d2
    1f44:	             move.l 88(sp),d3
    1f48:	             move.l 84(sp),d4
    1f4c:	             jsr -324(a6)
    1f50:	             move.l d0,80(sp)
    1f54:	             move.l 80(sp),d0
    1f58:	             move.w d0,78(sp)
  if(!count) {
    1f5c:	         ,-- bne.s 1f70 <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    1f5e:	         |   pea 18433 <PutChar+0x2e3>
    1f64:	         |   jsr 176ae <KPrintF>
    1f6a:	         |   addq.l #4,sp
    return;
    1f6c:	   ,-----|-- bra.w 2280 <CstLoadBackdrop+0x576>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    1f70:	   |     '-> move.l 192(sp),74(sp)
    1f76:	   |         move.l 100(sp),70(sp)
    1f7c:	   |         moveq #2,d2
    1f7e:	   |         move.l d2,66(sp)
    1f82:	   |         move.w 152(sp),d0
    1f86:	   |         lsr.w #1,d0
    1f88:	   |         move.w d0,d0
    1f8a:	   |         andi.l #65535,d0
    1f90:	   |         move.l d0,62(sp)
    1f94:	   |         move.l 1ce92 <DOSBase>,d0
    1f9a:	   |         movea.l d0,a6
    1f9c:	   |         move.l 74(sp),d1
    1fa0:	   |         move.l 70(sp),d2
    1fa4:	   |         move.l 66(sp),d3
    1fa8:	   |         move.l 62(sp),d4
    1fac:	   |         jsr -324(a6)
    1fb0:	   |         move.l d0,58(sp)
    1fb4:	   |         move.l 58(sp),d0
    1fb8:	   |         move.w d0,78(sp)
   

  if(!count) {
    1fbc:	   |     ,-- bne.s 1fd0 <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    1fbe:	   |     |   pea 18433 <PutChar+0x2e3>
    1fc4:	   |     |   jsr 176ae <KPrintF>
    1fca:	   |     |   addq.l #4,sp
    return;
    1fcc:	   +-----|-- bra.w 2280 <CstLoadBackdrop+0x576>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1fd0:	   |     '-> move.l #14675968,54(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    1fd8:	   |         move.l 1cdaa <CstBackDrop>,d0
    1fde:	   |         move.l d0,172(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    1fe2:	   |         move.l 200(sp),d0
    1fe6:	   |         move.w d0,d1
    1fe8:	   |         muls.w 154(sp),d1
    1fec:	   |         move.l 196(sp),d0
    1ff0:	   |     ,-- bpl.s 1ff4 <CstLoadBackdrop+0x2ea>
    1ff2:	   |     |   addq.l #7,d0
    1ff4:	   |     '-> asr.l #3,d0
    1ff6:	   |         move.l d0,d0
    1ff8:	   |         movea.w d1,a0
    1ffa:	   |         adda.w d0,a0
    1ffc:	   |         move.w a0,52(sp)
  backdropcursor += offset; 
    2000:	   |         moveq #0,d0
    2002:	   |         move.w 52(sp),d0
    2006:	   |         add.l d0,172(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    200a:	   |         pea 1844e <PutChar+0x2fe>
    2010:	   |         jsr 176ae <KPrintF>
    2016:	   |         addq.l #4,sp


  WaitBlit();
    2018:	   |         move.l 1ce96 <GfxBase>,d0
    201e:	   |         movea.l d0,a6
    2020:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    2024:	   |         movea.l 54(sp),a0
    2028:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    202e:	   |         movea.l 54(sp),a0
    2032:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2038:	   |         movea.l 54(sp),a0
    203c:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    2042:	   |         movea.l 54(sp),a0
    2046:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    204c:	   |         move.w 154(sp),d0
    2050:	   |         sub.w 158(sp),d0
    2054:	   |         movea.l 54(sp),a0
    2058:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    205c:	   |         move.w 154(sp),d0
    2060:	   |         sub.w 158(sp),d0
    2064:	   |         movea.l 54(sp),a0
    2068:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    206c:	   |         movea.l 54(sp),a0
    2070:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    2076:	   |         movea.l 54(sp),a0
    207a:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    2080:	   |         move.l 116(sp),168(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2086:	   |         clr.l 164(sp)
    208a:	   |     ,-- bra.s 20f8 <CstLoadBackdrop+0x3ee>
  {   
    WaitBlit(); 
    208c:	   |  ,--|-> move.l 1ce96 <GfxBase>,d0
    2092:	   |  |  |   movea.l d0,a6
    2094:	   |  |  |   jsr -228(a6)
    custom->bltapt = (APTR) tmpmask;
    2098:	   |  |  |   movea.l 54(sp),a0
    209c:	   |  |  |   move.l 100(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    20a2:	   |  |  |   move.l 168(sp),d0
    20a6:	   |  |  |   movea.l 54(sp),a0
    20aa:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    20ae:	   |  |  |   move.l 172(sp),d0
    20b2:	   |  |  |   movea.l 54(sp),a0
    20b6:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    20ba:	   |  |  |   move.l 172(sp),d0
    20be:	   |  |  |   movea.l 54(sp),a0
    20c2:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    20c6:	   |  |  |   move.w 160(sp),d0
    20ca:	   |  |  |   lsl.w #6,d0
    20cc:	   |  |  |   add.w 156(sp),d0
    20d0:	   |  |  |   movea.l 54(sp),a0
    20d4:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    20d8:	   |  |  |   moveq #0,d0
    20da:	   |  |  |   move.w 152(sp),d0
    20de:	   |  |  |   add.l d0,168(sp)
    backdropcursor += CstBackdropSizePlane;
    20e2:	   |  |  |   move.w 1cda8 <CstBackdropSizePlane>,d0
    20e8:	   |  |  |   move.w d0,d0
    20ea:	   |  |  |   andi.l #65535,d0
    20f0:	   |  |  |   add.l d0,172(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    20f4:	   |  |  |   addq.l #1,164(sp)
    20f8:	   |  |  '-> moveq #4,d0
    20fa:	   |  |      cmp.l 164(sp),d0
    20fe:	   |  '----- bge.s 208c <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    2100:	   |         move.l 1ce96 <GfxBase>,d0
    2106:	   |         movea.l d0,a6
    2108:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    210c:	   |         pea 1846d <PutChar+0x31d>
    2112:	   |         jsr 176ae <KPrintF>
    2118:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    211a:	   |         move.l 116(sp),48(sp)
    2120:	   |         move.l 1ce8a <SysBase>,d0
    2126:	   |         movea.l d0,a6
    2128:	   |         movea.l 48(sp),a1
    212c:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    2130:	   |         move.l 100(sp),44(sp)
    2136:	   |         move.l 1ce8a <SysBase>,d0
    213c:	   |         movea.l d0,a6
    213e:	   |         movea.l 44(sp),a1
    2142:	   |         jsr -690(a6)

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2146:	   |         move.l 1cdc2 <CstCleanupQueueDrawBuffer>,40(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    214e:	   |         moveq #20,d2
    2150:	   |         move.l d2,36(sp)
    2154:	   |         clr.l 32(sp)
    2158:	   |         move.l 1ce8a <SysBase>,d0
    215e:	   |         movea.l d0,a6
    2160:	   |         move.l 36(sp),d0
    2164:	   |         move.l 32(sp),d1
    2168:	   |         jsr -684(a6)
    216c:	   |         move.l d0,28(sp)
    2170:	   |         move.l 28(sp),d0
    2174:	   |         move.l d0,1cdc2 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    217a:	   |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2180:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    2186:	   |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    218c:	   |         clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    218e:	   |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2194:	   |         clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    2198:	   |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    219e:	   |         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    21a2:	   |         move.l 1cdde <winWidth>,d0
    21a8:	   |         lsr.l #4,d0
    21aa:	   |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    21b0:	   |         move.l d0,d0
    21b2:	   |         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    21b6:	   |         move.l 1cde2 <winHeight>,d0
    21bc:	   |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    21c2:	   |         move.l d0,d0
    21c4:	   |         move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    21c8:	   |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    21ce:	   |         clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    21d2:	   |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    21d8:	   |         clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    21dc:	   |         move.l 1cdbe <CstCleanupQueueViewBuffer>,40(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    21e4:	   |         moveq #20,d0
    21e6:	   |         move.l d0,24(sp)
    21ea:	   |         clr.l 20(sp)
    21ee:	   |         move.l 1ce8a <SysBase>,d0
    21f4:	   |         movea.l d0,a6
    21f6:	   |         move.l 24(sp),d0
    21fa:	   |         move.l 20(sp),d1
    21fe:	   |         jsr -684(a6)
    2202:	   |         move.l d0,16(sp)
    2206:	   |         move.l 16(sp),d0
    220a:	   |         move.l d0,1cdbe <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    2210:	   |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2216:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    221c:	   |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2222:	   |         clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    2224:	   |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    222a:	   |         clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    222e:	   |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2234:	   |         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    2238:	   |         move.l 1cdde <winWidth>,d0
    223e:	   |         lsr.l #4,d0
    2240:	   |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2246:	   |         move.l d0,d0
    2248:	   |         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    224c:	   |         move.l 1cde2 <winHeight>,d0
    2252:	   |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2258:	   |         move.l d0,d0
    225a:	   |         move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    225e:	   |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2264:	   |         clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    2268:	   |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    226e:	   |         clr.w 14(a0)

  KPrintF("CstLoadBackDrop: Finished");
    2272:	   |         pea 1848d <PutChar+0x33d>
    2278:	   |         jsr 176ae <KPrintF>
    227e:	   |         addq.l #4,sp

}
    2280:	   '-------> movem.l (sp)+,d2-d4/a6
    2284:	             lea 172(sp),sp
    2288:	             rts

0000228a <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    228a:	                lea -156(sp),sp
    228e:	                move.l a6,-(sp)
    2290:	                move.l d2,-(sp)
    2292:	                move.l 172(sp),d1
    2296:	                move.l 176(sp),d0
    229a:	                move.w d1,d1
    229c:	                move.w d1,10(sp)
    22a0:	                move.w d0,d0
    22a2:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    22a6:	                move.l #14675968,112(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    22ae:	                clr.l 108(sp)
  destination = (UWORD *) CstBackDrop;      
    22b2:	                move.l 1cdaa <CstBackDrop>,108(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    22ba:	                clr.l 140(sp)

  blitwidth = single->width/16;
    22be:	                movea.l 168(sp),a0
    22c2:	                move.l (a0),d0
    22c4:	                movea.l d0,a0
    22c6:	                cmpa.w #0,a0
    22ca:	            ,-- bge.s 22d0 <CstPasteChar+0x46>
    22cc:	            |   lea 15(a0),a0
    22d0:	            '-> move.l a0,d0
    22d2:	                asr.l #4,d0
    22d4:	                move.l d0,124(sp)
  if(blitwidth == 0) blitwidth = 1;
    22d8:	            ,-- bne.s 22e0 <CstPasteChar+0x56>
    22da:	            |   moveq #1,d0
    22dc:	            |   move.l d0,124(sp)

  if( y < 0) {
    22e0:	            '-> tst.w 8(sp)
    22e4:	         ,----- bge.s 232e <CstPasteChar+0xa4>
    if(y + single->height < 0) {
    22e6:	         |      movea.w 8(sp),a1
    22ea:	         |      movea.l 168(sp),a0
    22ee:	         |      move.l 4(a0),d0
    22f2:	         |      add.l a1,d0
    22f4:	         |  ,-- bpl.s 2308 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    22f6:	         |  |   pea 184a7 <PutChar+0x357>
    22fc:	         |  |   jsr 176ae <KPrintF>
    2302:	         |  |   addq.l #4,sp
      return;
    2304:	,--------|--|-- bra.w 2c7c <CstPasteChar+0x9f2>
    }
    ystartdst = 0;
    2308:	|        |  '-> clr.l 136(sp)
    ystartsrc = y*-1;
    230c:	|        |      move.w 8(sp),d0
    2310:	|        |      ext.l d0
    2312:	|        |      move.l d0,d1
    2314:	|        |      neg.l d1
    2316:	|        |      move.l d1,132(sp)
    blitheight = single->height+y;
    231a:	|        |      movea.l 168(sp),a0
    231e:	|        |      move.l 4(a0),d0
    2322:	|        |      movea.w 8(sp),a0
    2326:	|        |      add.l a0,d0
    2328:	|        |      move.l d0,128(sp)
    232c:	|     ,--|----- bra.s 23a0 <CstPasteChar+0x116>
  } else if(y+single->height > (int) winHeight) {
    232e:	|     |  '----> movea.w 8(sp),a1
    2332:	|     |         movea.l 168(sp),a0
    2336:	|     |         move.l 4(a0),d0
    233a:	|     |         move.l a1,d1
    233c:	|     |         add.l d0,d1
    233e:	|     |         move.l 1cde2 <winHeight>,d0
    2344:	|     |         cmp.l d1,d0
    2346:	|     |  ,----- bge.s 2388 <CstPasteChar+0xfe>
    if(y  > (int) winHeight) {
    2348:	|     |  |      movea.w 8(sp),a0
    234c:	|     |  |      move.l 1cde2 <winHeight>,d0
    2352:	|     |  |      cmp.l a0,d0
    2354:	|     |  |  ,-- bge.s 2368 <CstPasteChar+0xde>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2356:	|     |  |  |   pea 184a7 <PutChar+0x357>
    235c:	|     |  |  |   jsr 176ae <KPrintF>
    2362:	|     |  |  |   addq.l #4,sp
      return;
    2364:	+-----|--|--|-- bra.w 2c7c <CstPasteChar+0x9f2>
    }
    ystartdst = y;
    2368:	|     |  |  '-> movea.w 8(sp),a0
    236c:	|     |  |      move.l a0,136(sp)
    ystartsrc = 0;
    2370:	|     |  |      clr.l 132(sp)
    blitheight = winHeight-y;
    2374:	|     |  |      move.l 1cde2 <winHeight>,d0
    237a:	|     |  |      movea.w 8(sp),a0
    237e:	|     |  |      move.l d0,d1
    2380:	|     |  |      sub.l a0,d1
    2382:	|     |  |      move.l d1,128(sp)
    2386:	|     +--|----- bra.s 23a0 <CstPasteChar+0x116>
  } else {
    ystartdst = y;
    2388:	|     |  '----> movea.w 8(sp),a0
    238c:	|     |         move.l a0,136(sp)
    ystartsrc = 0;
    2390:	|     |         clr.l 132(sp)
    blitheight = single->height;
    2394:	|     |         movea.l 168(sp),a0
    2398:	|     |         move.l 4(a0),d0
    239c:	|     |         move.l d0,128(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    23a0:	|     '-------> tst.w 10(sp)
    23a4:	|        ,----- bge.w 25ec <CstPasteChar+0x362>
    if(x + single->width < 0) {
    23a8:	|        |      movea.w 10(sp),a1
    23ac:	|        |      movea.l 168(sp),a0
    23b0:	|        |      move.l (a0),d0
    23b2:	|        |      add.l a1,d0
    23b4:	|        |  ,-- bpl.s 23c8 <CstPasteChar+0x13e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    23b6:	|        |  |   pea 184a7 <PutChar+0x357>
    23bc:	|        |  |   jsr 176ae <KPrintF>
    23c2:	|        |  |   addq.l #4,sp
      return;
    23c4:	+--------|--|-- bra.w 2c7c <CstPasteChar+0x9f2>

    }
    
    extrawords = 1;
    23c8:	|        |  '-> move.w #1,162(sp)

    cutwordssource = (x*-1)/16; 
    23ce:	|        |      move.w 10(sp),d0
    23d2:	|        |  ,-- bpl.s 23d8 <CstPasteChar+0x14e>
    23d4:	|        |  |   addi.w #15,d0
    23d8:	|        |  '-> asr.w #4,d0
    23da:	|        |      neg.w d0
    23dc:	|        |      move.w d0,160(sp)
    cutmaskpixel = (x*-1)%16;     
    23e0:	|        |      move.w 10(sp),d0
    23e4:	|        |      ext.l d0
    23e6:	|        |      neg.l d0
    23e8:	|        |      andi.l #-2147483633,d0
    23ee:	|        |  ,-- bpl.s 23f8 <CstPasteChar+0x16e>
    23f0:	|        |  |   subq.l #1,d0
    23f2:	|        |  |   moveq #-16,d1
    23f4:	|        |  |   or.l d1,d0
    23f6:	|        |  |   addq.l #1,d0
    23f8:	|        |  '-> move.w d0,158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    23fc:	|        |      clr.w 156(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2400:	|        |      movea.l 168(sp),a0
    2404:	|        |      move.l 24(a0),d0
    2408:	|        |      move.l d0,d1
    240a:	|        |      moveq #0,d0
    240c:	|        |      move.w 160(sp),d0
    2410:	|        |      add.l d0,d0
    2412:	|        |      move.l d1,d2
    2414:	|        |      add.l d0,d2
    2416:	|        |      movea.l 168(sp),a0
    241a:	|        |      move.l (a0),d0
    241c:	|        |      move.l 132(sp),-(sp)
    2420:	|        |      move.l d0,-(sp)
    2422:	|        |      jsr 1803a <__mulsi3>
    2428:	|        |      addq.l #8,sp
    242a:	|        |      lsr.l #3,d0
    242c:	|        |      move.l d2,d1
    242e:	|        |      add.l d0,d1
    2430:	|        |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2434:	|        |      move.l 1cdde <winWidth>,d0
    243a:	|        |      move.l 136(sp),-(sp)
    243e:	|        |      move.l d0,-(sp)
    2440:	|        |      jsr 1803a <__mulsi3>
    2446:	|        |      addq.l #8,sp
    2448:	|        |      lsr.l #3,d0
    244a:	|        |      move.l 108(sp),d1
    244e:	|        |      add.l d1,d0
    2450:	|        |      move.l d0,d2
    2452:	|        |      subq.l #2,d2
    2454:	|        |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    2458:	|        |      move.l 1cdde <winWidth>,d0
    245e:	|        |      move.l 136(sp),-(sp)
    2462:	|        |      move.l d0,-(sp)
    2464:	|        |      jsr 1803a <__mulsi3>
    246a:	|        |      addq.l #8,sp
    246c:	|        |      lsr.l #3,d0
    246e:	|        |      move.l 108(sp),d1
    2472:	|        |      add.l d1,d0
    2474:	|        |      move.l d0,d1
    2476:	|        |      subq.l #2,d1
    2478:	|        |      move.l d1,144(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    247c:	|        |      moveq #0,d0
    247e:	|        |      move.w 158(sp),d0
    2482:	|        |      moveq #16,d1
    2484:	|        |      sub.l d0,d1
    2486:	|        |      move.l d1,d0
    2488:	|        |      moveq #12,d2
    248a:	|        |      lsl.l d2,d0
    248c:	|        |      move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2490:	|        |      move.l 1cdc2 <CstCleanupQueueDrawBuffer>,48(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2498:	|        |      moveq #20,d0
    249a:	|        |      move.l d0,44(sp)
    249e:	|        |      clr.l 40(sp)
    24a2:	|        |      move.l 1ce8a <SysBase>,d0
    24a8:	|        |      movea.l d0,a6
    24aa:	|        |      move.l 44(sp),d0
    24ae:	|        |      move.l 40(sp),d1
    24b2:	|        |      jsr -684(a6)
    24b6:	|        |      move.l d0,36(sp)
    24ba:	|        |      move.l 36(sp),d0
    24be:	|        |      move.l d0,1cdc2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    24c4:	|        |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    24ca:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = 0;
    24d0:	|        |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    24d6:	|        |      clr.w (a0)
    CstCleanupQueueDrawBuffer->y = 0;
    24d8:	|        |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    24de:	|        |      clr.w 2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    24e2:	|        |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    24e8:	|        |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    24ec:	|        |      movea.l 168(sp),a0
    24f0:	|        |      move.l (a0),d0
    24f2:	|        |      movea.l d0,a0
    24f4:	|        |      cmpa.w #0,a0
    24f8:	|        |  ,-- bge.s 24fe <CstPasteChar+0x274>
    24fa:	|        |  |   lea 15(a0),a0
    24fe:	|        |  '-> move.l a0,d0
    2500:	|        |      asr.l #4,d0
    2502:	|        |      move.l d0,d0
    2504:	|        |      add.w 160(sp),d0
    2508:	|        |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    250e:	|        |      add.w 162(sp),d0
    2512:	|        |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2516:	|        |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    251c:	|        |      move.l 128(sp),d0
    2520:	|        |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    2524:	|        |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    252a:	|        |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    252e:	|        |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2534:	|        |      move.l 136(sp),d0
    2538:	|        |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    253c:	|        |      move.l 1cdbe <CstCleanupQueueViewBuffer>,48(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2544:	|        |      moveq #20,d1
    2546:	|        |      move.l d1,32(sp)
    254a:	|        |      clr.l 28(sp)
    254e:	|        |      move.l 1ce8a <SysBase>,d0
    2554:	|        |      movea.l d0,a6
    2556:	|        |      move.l 32(sp),d0
    255a:	|        |      move.l 28(sp),d1
    255e:	|        |      jsr -684(a6)
    2562:	|        |      move.l d0,24(sp)
    2566:	|        |      move.l 24(sp),d0
    256a:	|        |      move.l d0,1cdbe <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2570:	|        |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2576:	|        |      move.l 48(sp),16(a0)
    CstCleanupQueueViewBuffer->x = 0;
    257c:	|        |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2582:	|        |      clr.w (a0)
    CstCleanupQueueViewBuffer->y = 0;
    2584:	|        |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    258a:	|        |      clr.w 2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    258e:	|        |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2594:	|        |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2598:	|        |      movea.l 168(sp),a0
    259c:	|        |      move.l (a0),d0
    259e:	|        |      movea.l d0,a0
    25a0:	|        |      cmpa.w #0,a0
    25a4:	|        |  ,-- bge.s 25aa <CstPasteChar+0x320>
    25a6:	|        |  |   lea 15(a0),a0
    25aa:	|        |  '-> move.l a0,d0
    25ac:	|        |      asr.l #4,d0
    25ae:	|        |      move.l d0,d0
    25b0:	|        |      add.w 160(sp),d0
    25b4:	|        |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    25ba:	|        |      add.w 162(sp),d0
    25be:	|        |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    25c2:	|        |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    25c8:	|        |      move.l 128(sp),d0
    25cc:	|        |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = 0;
    25d0:	|        |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    25d6:	|        |      clr.w 12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst; 
    25da:	|        |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    25e0:	|        |      move.l 136(sp),d0
    25e4:	|        |      move.w d0,14(a0)
    25e8:	|     ,--|----- bra.w 2ae4 <CstPasteChar+0x85a>
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    25ec:	|     |  '----> movea.w 10(sp),a1
    25f0:	|     |         movea.l 168(sp),a0
    25f4:	|     |         move.l (a0),d0
    25f6:	|     |         move.l a1,d1
    25f8:	|     |         add.l d0,d1
    25fa:	|     |         move.l 1cdde <winWidth>,d0
    2600:	|     |         cmp.l d1,d0
    2602:	|     |  ,----- bge.w 288e <CstPasteChar+0x604>

    if(x - single->width > (int) winWidth)
    2606:	|     |  |      movea.w 10(sp),a1
    260a:	|     |  |      movea.l 168(sp),a0
    260e:	|     |  |      move.l (a0),d0
    2610:	|     |  |      move.l a1,d1
    2612:	|     |  |      sub.l d0,d1
    2614:	|     |  |      move.l 1cdde <winWidth>,d0
    261a:	|     |  |      cmp.l d1,d0
    261c:	|     |  |  ,-- bge.s 2630 <CstPasteChar+0x3a6>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    261e:	|     |  |  |   pea 184a7 <PutChar+0x357>
    2624:	|     |  |  |   jsr 176ae <KPrintF>
    262a:	|     |  |  |   addq.l #4,sp
      return;
    262c:	+-----|--|--|-- bra.w 2c7c <CstPasteChar+0x9f2>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2630:	|     |  |  '-> clr.w 162(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    2634:	|     |  |      movea.w 10(sp),a1
    2638:	|     |  |      movea.l 168(sp),a0
    263c:	|     |  |      move.l (a0),d0
    263e:	|     |  |      add.l a1,d0
    2640:	|     |  |      move.l d0,d1
    2642:	|     |  |      move.l 1cdde <winWidth>,d0
    2648:	|     |  |      sub.l d0,d1
    264a:	|     |  |      move.l d1,d0
    264c:	|     |  |      lsr.l #4,d0
    264e:	|     |  |      move.w d0,160(sp)
    cutmaskpixel = 0;
    2652:	|     |  |      clr.w 158(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    2656:	|     |  |      move.w #-1,156(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    265c:	|     |  |      movea.l 168(sp),a0
    2660:	|     |  |      move.l 24(a0),d0
    2664:	|     |  |      move.l d0,d2
    2666:	|     |  |      movea.l 168(sp),a0
    266a:	|     |  |      move.l (a0),d0
    266c:	|     |  |      move.l 132(sp),-(sp)
    2670:	|     |  |      move.l d0,-(sp)
    2672:	|     |  |      jsr 1803a <__mulsi3>
    2678:	|     |  |      addq.l #8,sp
    267a:	|     |  |      lsr.l #3,d0
    267c:	|     |  |      move.l d2,d1
    267e:	|     |  |      add.l d0,d1
    2680:	|     |  |      move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2684:	|     |  |      move.l 1cdde <winWidth>,d0
    268a:	|     |  |      move.l 136(sp),-(sp)
    268e:	|     |  |      move.l d0,-(sp)
    2690:	|     |  |      jsr 1803a <__mulsi3>
    2696:	|     |  |      addq.l #8,sp
    2698:	|     |  |      lsr.l #3,d0
    269a:	|     |  |      move.l 108(sp),d1
    269e:	|     |  |      add.l d0,d1
    26a0:	|     |  |      move.w 10(sp),d0
    26a4:	|     |  |  ,-- bpl.s 26aa <CstPasteChar+0x420>
    26a6:	|     |  |  |   addi.w #15,d0
    26aa:	|     |  |  '-> asr.w #4,d0
    26ac:	|     |  |      movea.w d0,a0
    26ae:	|     |  |      move.l a0,d0
    26b0:	|     |  |      add.l a0,d0
    26b2:	|     |  |      move.l d1,d2
    26b4:	|     |  |      add.l d0,d2
    26b6:	|     |  |      move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    26ba:	|     |  |      move.l 1cdde <winWidth>,d0
    26c0:	|     |  |      move.l 136(sp),-(sp)
    26c4:	|     |  |      move.l d0,-(sp)
    26c6:	|     |  |      jsr 1803a <__mulsi3>
    26cc:	|     |  |      addq.l #8,sp
    26ce:	|     |  |      lsr.l #3,d0
    26d0:	|     |  |      move.l 108(sp),d1
    26d4:	|     |  |      add.l d0,d1
    26d6:	|     |  |      move.w 10(sp),d0
    26da:	|     |  |  ,-- bpl.s 26e0 <CstPasteChar+0x456>
    26dc:	|     |  |  |   addi.w #15,d0
    26e0:	|     |  |  '-> asr.w #4,d0
    26e2:	|     |  |      movea.w d0,a0
    26e4:	|     |  |      move.l a0,d0
    26e6:	|     |  |      add.l a0,d0
    26e8:	|     |  |      move.l d1,d2
    26ea:	|     |  |      add.l d0,d2
    26ec:	|     |  |      move.l d2,144(sp)
    bltcon0 = ((single->width%16) << 12);    
    26f0:	|     |  |      movea.l 168(sp),a0
    26f4:	|     |  |      move.l (a0),d0
    26f6:	|     |  |      andi.l #-2147483633,d0
    26fc:	|     |  |  ,-- bpl.s 2706 <CstPasteChar+0x47c>
    26fe:	|     |  |  |   subq.l #1,d0
    2700:	|     |  |  |   moveq #-16,d1
    2702:	|     |  |  |   or.l d1,d0
    2704:	|     |  |  |   addq.l #1,d0
    2706:	|     |  |  '-> moveq #12,d2
    2708:	|     |  |      lsl.l d2,d0
    270a:	|     |  |      move.l d0,140(sp)
    
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    270e:	|     |  |      move.l 1cdc2 <CstCleanupQueueDrawBuffer>,76(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2716:	|     |  |      moveq #20,d0
    2718:	|     |  |      move.l d0,72(sp)
    271c:	|     |  |      clr.l 68(sp)
    2720:	|     |  |      move.l 1ce8a <SysBase>,d0
    2726:	|     |  |      movea.l d0,a6
    2728:	|     |  |      move.l 72(sp),d0
    272c:	|     |  |      move.l 68(sp),d1
    2730:	|     |  |      jsr -684(a6)
    2734:	|     |  |      move.l d0,64(sp)
    2738:	|     |  |      move.l 64(sp),d0
    273c:	|     |  |      move.l d0,1cdc2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2742:	|     |  |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2748:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    274e:	|     |  |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2754:	|     |  |      move.w 10(sp),d0
    2758:	|     |  |      move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    275a:	|     |  |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2760:	|     |  |      move.l 136(sp),d0
    2764:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    2768:	|     |  |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    276e:	|     |  |      clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource;
    2772:	|     |  |      movea.l 168(sp),a0
    2776:	|     |  |      move.l (a0),d0
    2778:	|     |  |      movea.l d0,a0
    277a:	|     |  |      cmpa.w #0,a0
    277e:	|     |  |  ,-- bge.s 2784 <CstPasteChar+0x4fa>
    2780:	|     |  |  |   lea 15(a0),a0
    2784:	|     |  |  '-> move.l a0,d0
    2786:	|     |  |      asr.l #4,d0
    2788:	|     |  |      move.l d0,d0
    278a:	|     |  |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2790:	|     |  |      add.w 160(sp),d0
    2794:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    2798:	|     |  |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    279e:	|     |  |      move.l 128(sp),d0
    27a2:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    27a6:	|     |  |      move.w 10(sp),d0
    27aa:	|     |  |  ,-- bpl.s 27b0 <CstPasteChar+0x526>
    27ac:	|     |  |  |   addi.w #15,d0
    27b0:	|     |  |  '-> asr.w #4,d0
    27b2:	|     |  |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    27b8:	|     |  |      add.w d0,d0
    27ba:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    27be:	|     |  |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    27c4:	|     |  |      move.l 136(sp),d0
    27c8:	|     |  |      move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    27cc:	|     |  |      move.l 1cdbe <CstCleanupQueueViewBuffer>,76(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    27d4:	|     |  |      moveq #20,d1
    27d6:	|     |  |      move.l d1,60(sp)
    27da:	|     |  |      clr.l 56(sp)
    27de:	|     |  |      move.l 1ce8a <SysBase>,d0
    27e4:	|     |  |      movea.l d0,a6
    27e6:	|     |  |      move.l 60(sp),d0
    27ea:	|     |  |      move.l 56(sp),d1
    27ee:	|     |  |      jsr -684(a6)
    27f2:	|     |  |      move.l d0,52(sp)
    27f6:	|     |  |      move.l 52(sp),d0
    27fa:	|     |  |      move.l d0,1cdbe <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2800:	|     |  |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2806:	|     |  |      move.l 76(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    280c:	|     |  |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2812:	|     |  |      move.w 10(sp),d0
    2816:	|     |  |      move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2818:	|     |  |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    281e:	|     |  |      move.l 136(sp),d0
    2822:	|     |  |      move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2826:	|     |  |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    282c:	|     |  |      clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    2830:	|     |  |      movea.l 168(sp),a0
    2834:	|     |  |      move.l (a0),d0
    2836:	|     |  |      movea.l d0,a0
    2838:	|     |  |      cmpa.w #0,a0
    283c:	|     |  |  ,-- bge.s 2842 <CstPasteChar+0x5b8>
    283e:	|     |  |  |   lea 15(a0),a0
    2842:	|     |  |  '-> move.l a0,d0
    2844:	|     |  |      asr.l #4,d0
    2846:	|     |  |      move.l d0,d0
    2848:	|     |  |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    284e:	|     |  |      add.w 160(sp),d0
    2852:	|     |  |      move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2856:	|     |  |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    285c:	|     |  |      move.l 128(sp),d0
    2860:	|     |  |      move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2864:	|     |  |      move.w 10(sp),d0
    2868:	|     |  |  ,-- bpl.s 286e <CstPasteChar+0x5e4>
    286a:	|     |  |  |   addi.w #15,d0
    286e:	|     |  |  '-> asr.w #4,d0
    2870:	|     |  |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2876:	|     |  |      add.w d0,d0
    2878:	|     |  |      move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;     
    287c:	|     |  |      movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2882:	|     |  |      move.l 136(sp),d0
    2886:	|     |  |      move.w d0,14(a0)
    288a:	|     +--|----- bra.w 2ae4 <CstPasteChar+0x85a>
  } else { //Whole Sprite on Screen

    extrawords = 1;
    288e:	|     |  '----> move.w #1,162(sp)
    cutwordssource = 0;
    2894:	|     |         clr.w 160(sp)
    cutmaskpixel = 0;
    2898:	|     |         clr.w 158(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    289c:	|     |         clr.w 156(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    28a0:	|     |         movea.l 168(sp),a0
    28a4:	|     |         move.l 24(a0),d0
    28a8:	|     |         move.l d0,d2
    28aa:	|     |         movea.l 168(sp),a0
    28ae:	|     |         move.l (a0),d0
    28b0:	|     |         movea.l d0,a0
    28b2:	|     |         cmpa.w #0,a0
    28b6:	|     |     ,-- bge.s 28bc <CstPasteChar+0x632>
    28b8:	|     |     |   lea 15(a0),a0
    28bc:	|     |     '-> move.l a0,d0
    28be:	|     |         asr.l #4,d0
    28c0:	|     |         move.l 132(sp),-(sp)
    28c4:	|     |         move.l d0,-(sp)
    28c6:	|     |         jsr 1803a <__mulsi3>
    28cc:	|     |         addq.l #8,sp
    28ce:	|     |         add.l d0,d0
    28d0:	|     |         move.l d2,d1
    28d2:	|     |         add.l d0,d1
    28d4:	|     |         move.l d1,152(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    28d8:	|     |         move.l 1cdde <winWidth>,d0
    28de:	|     |         move.l 136(sp),-(sp)
    28e2:	|     |         move.l d0,-(sp)
    28e4:	|     |         jsr 1803a <__mulsi3>
    28ea:	|     |         addq.l #8,sp
    28ec:	|     |         lsr.l #3,d0
    28ee:	|     |         move.l 108(sp),d1
    28f2:	|     |         add.l d0,d1
    28f4:	|     |         move.w 10(sp),d0
    28f8:	|     |     ,-- bpl.s 28fe <CstPasteChar+0x674>
    28fa:	|     |     |   addi.w #15,d0
    28fe:	|     |     '-> asr.w #4,d0
    2900:	|     |         movea.w d0,a0
    2902:	|     |         move.l a0,d0
    2904:	|     |         add.l a0,d0
    2906:	|     |         move.l d1,d2
    2908:	|     |         add.l d0,d2
    290a:	|     |         move.l d2,148(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    290e:	|     |         move.l 1cdde <winWidth>,d0
    2914:	|     |         move.l 136(sp),-(sp)
    2918:	|     |         move.l d0,-(sp)
    291a:	|     |         jsr 1803a <__mulsi3>
    2920:	|     |         addq.l #8,sp
    2922:	|     |         lsr.l #3,d0
    2924:	|     |         move.l 108(sp),d1
    2928:	|     |         add.l d0,d1
    292a:	|     |         move.w 10(sp),d0
    292e:	|     |     ,-- bpl.s 2934 <CstPasteChar+0x6aa>
    2930:	|     |     |   addi.w #15,d0
    2934:	|     |     '-> asr.w #4,d0
    2936:	|     |         movea.w d0,a0
    2938:	|     |         move.l a0,d0
    293a:	|     |         add.l a0,d0
    293c:	|     |         move.l d1,d2
    293e:	|     |         add.l d0,d2
    2940:	|     |         move.l d2,144(sp)
    bltcon0 = ((x%16) << 12);
    2944:	|     |         move.w 10(sp),d0
    2948:	|     |         andi.w #-32753,d0
    294c:	|     |     ,-- bpl.s 2956 <CstPasteChar+0x6cc>
    294e:	|     |     |   subq.w #1,d0
    2950:	|     |     |   ori.w #-16,d0
    2954:	|     |     |   addq.w #1,d0
    2956:	|     |     '-> ext.l d0
    2958:	|     |         moveq #12,d1
    295a:	|     |         lsl.l d1,d0
    295c:	|     |         move.l d0,140(sp)

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2960:	|     |         move.l 1cdc2 <CstCleanupQueueDrawBuffer>,104(sp)
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2968:	|     |         moveq #20,d2
    296a:	|     |         move.l d2,100(sp)
    296e:	|     |         clr.l 96(sp)
    2972:	|     |         move.l 1ce8a <SysBase>,d0
    2978:	|     |         movea.l d0,a6
    297a:	|     |         move.l 100(sp),d0
    297e:	|     |         move.l 96(sp),d1
    2982:	|     |         jsr -684(a6)
    2986:	|     |         move.l d0,92(sp)
    298a:	|     |         move.l 92(sp),d0
    298e:	|     |         move.l d0,1cdc2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;
    2994:	|     |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    299a:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    29a0:	|     |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    29a6:	|     |         move.w 10(sp),d0
    29aa:	|     |         move.w d0,(a0)
    CstCleanupQueueDrawBuffer->y = ystartdst;
    29ac:	|     |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    29b2:	|     |         move.l 136(sp),d0
    29b6:	|     |         move.w d0,2(a0)
    CstCleanupQueueDrawBuffer->person = NULL;
    29ba:	|     |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    29c0:	|     |         clr.l 4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    29c4:	|     |         movea.l 168(sp),a0
    29c8:	|     |         move.l (a0),d0
    29ca:	|     |         movea.l d0,a0
    29cc:	|     |         cmpa.w #0,a0
    29d0:	|     |     ,-- bge.s 29d6 <CstPasteChar+0x74c>
    29d2:	|     |     |   lea 15(a0),a0
    29d6:	|     |     '-> move.l a0,d0
    29d8:	|     |         asr.l #4,d0
    29da:	|     |         move.l d0,d0
    29dc:	|     |         add.w 160(sp),d0
    29e0:	|     |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    29e6:	|     |         add.w 162(sp),d0
    29ea:	|     |         move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    29ee:	|     |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    29f4:	|     |         move.l 128(sp),d0
    29f8:	|     |         move.w d0,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = (x/16)*2;
    29fc:	|     |         move.w 10(sp),d0
    2a00:	|     |     ,-- bpl.s 2a06 <CstPasteChar+0x77c>
    2a02:	|     |     |   addi.w #15,d0
    2a06:	|     |     '-> asr.w #4,d0
    2a08:	|     |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2a0e:	|     |         add.w d0,d0
    2a10:	|     |         move.w d0,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    2a14:	|     |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2a1a:	|     |         move.l 136(sp),d0
    2a1e:	|     |         move.w d0,14(a0)

    next = CstCleanupQueueViewBuffer;
    2a22:	|     |         move.l 1cdbe <CstCleanupQueueViewBuffer>,104(sp)
    CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2a2a:	|     |         moveq #20,d0
    2a2c:	|     |         move.l d0,88(sp)
    2a30:	|     |         clr.l 84(sp)
    2a34:	|     |         move.l 1ce8a <SysBase>,d0
    2a3a:	|     |         movea.l d0,a6
    2a3c:	|     |         move.l 88(sp),d0
    2a40:	|     |         move.l 84(sp),d1
    2a44:	|     |         jsr -684(a6)
    2a48:	|     |         move.l d0,80(sp)
    2a4c:	|     |         move.l 80(sp),d0
    2a50:	|     |         move.l d0,1cdbe <CstCleanupQueueViewBuffer>
    CstCleanupQueueViewBuffer->next = next;
    2a56:	|     |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2a5c:	|     |         move.l 104(sp),16(a0)
    CstCleanupQueueViewBuffer->x = x;
    2a62:	|     |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2a68:	|     |         move.w 10(sp),d0
    2a6c:	|     |         move.w d0,(a0)
    CstCleanupQueueViewBuffer->y = ystartdst;
    2a6e:	|     |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2a74:	|     |         move.l 136(sp),d0
    2a78:	|     |         move.w d0,2(a0)
    CstCleanupQueueViewBuffer->person = NULL;
    2a7c:	|     |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2a82:	|     |         clr.l 4(a0)
    CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords;
    2a86:	|     |         movea.l 168(sp),a0
    2a8a:	|     |         move.l (a0),d0
    2a8c:	|     |         movea.l d0,a0
    2a8e:	|     |         cmpa.w #0,a0
    2a92:	|     |     ,-- bge.s 2a98 <CstPasteChar+0x80e>
    2a94:	|     |     |   lea 15(a0),a0
    2a98:	|     |     '-> move.l a0,d0
    2a9a:	|     |         asr.l #4,d0
    2a9c:	|     |         move.l d0,d0
    2a9e:	|     |         add.w 160(sp),d0
    2aa2:	|     |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2aa8:	|     |         add.w 162(sp),d0
    2aac:	|     |         move.w d0,8(a0)
    CstCleanupQueueViewBuffer->height = blitheight;
    2ab0:	|     |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2ab6:	|     |         move.l 128(sp),d0
    2aba:	|     |         move.w d0,10(a0)
    CstCleanupQueueViewBuffer->startxinbytes = (x/16)*2;
    2abe:	|     |         move.w 10(sp),d0
    2ac2:	|     |     ,-- bpl.s 2ac8 <CstPasteChar+0x83e>
    2ac4:	|     |     |   addi.w #15,d0
    2ac8:	|     |     '-> asr.w #4,d0
    2aca:	|     |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2ad0:	|     |         add.w d0,d0
    2ad2:	|     |         move.w d0,12(a0)
    CstCleanupQueueViewBuffer->starty = ystartdst;    
    2ad6:	|     |         movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    2adc:	|     |         move.l 136(sp),d0
    2ae0:	|     |         move.w d0,14(a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2ae4:	|     '-------> moveq #0,d0
    2ae6:	|               move.w 158(sp),d0
    2aea:	|               moveq #0,d1
    2aec:	|               not.w d1
    2aee:	|               asr.l d0,d1
    2af0:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2af4:	|               moveq #0,d1
    2af6:	|               move.w 160(sp),d1
    2afa:	|               moveq #0,d0
    2afc:	|               move.w 162(sp),d0
    2b00:	|               sub.l d0,d1
    2b02:	|               move.l d1,d0
    2b04:	|               add.w d0,d0
    2b06:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2b0a:	|               move.l 1cdde <winWidth>,d0
    2b10:	|               lsr.l #3,d0
    2b12:	|               move.l d0,d2
    2b14:	|               move.w 160(sp),d1
    2b18:	|               sub.w 162(sp),d1
    2b1c:	|               move.l 124(sp),d0
    2b20:	|               sub.w d0,d1
    2b22:	|               move.w d1,d0
    2b24:	|               add.w d1,d0
    2b26:	|               add.w d2,d0
    2b28:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2b2c:	|               move.l 1cdde <winWidth>,d0
    2b32:	|               lsr.l #3,d0
    2b34:	|               move.l d0,d2
    2b36:	|               move.w 160(sp),d1
    2b3a:	|               sub.w 162(sp),d1
    2b3e:	|               move.l 124(sp),d0
    2b42:	|               sub.w d0,d1
    2b44:	|               move.w d1,d0
    2b46:	|               add.w d1,d0
    2b48:	|               add.w d2,d0
    2b4a:	|               move.w d0,16(sp)

  WaitBlit();
    2b4e:	|               move.l 1ce96 <GfxBase>,d0
    2b54:	|               movea.l d0,a6
    2b56:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2b5a:	|               movea.l 112(sp),a0
    2b5e:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    2b64:	|               movea.l 112(sp),a0
    2b68:	|               move.w 156(sp),70(a0)
  custom->bltamod = bltamod;
    2b6e:	|               move.w 20(sp),d0
    2b72:	|               movea.l 112(sp),a0
    2b76:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2b7a:	|               move.w 18(sp),d0
    2b7e:	|               movea.l 112(sp),a0
    2b82:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2b86:	|               move.w 16(sp),d0
    2b8a:	|               movea.l 112(sp),a0
    2b8e:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2b92:	|               move.l 1cdde <winWidth>,d0
    2b98:	|               lsr.l #3,d0
    2b9a:	|               move.l d0,d1
    2b9c:	|               move.l 1cde2 <winHeight>,d0
    2ba2:	|               move.l d0,d0
    2ba4:	|               move.w d1,d2
    2ba6:	|               muls.w d0,d2
    2ba8:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2bac:	|               move.w 1cda2 <textPaletteIndex>,122(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2bb4:	|               move.w 122(sp),d0
    2bb8:	|               andi.w #1,d0
    2bbc:	|               move.w d0,12(sp)
  if(tmp2) {
    2bc0:	|        ,----- beq.s 2bca <CstPasteChar+0x940>
    minterm = 0xbfa;
    2bc2:	|        |      move.w #3066,120(sp)
    2bc8:	|        |  ,-- bra.s 2bd0 <CstPasteChar+0x946>
  } else {
    minterm = 0xb0a;
    2bca:	|        '--|-> move.w #2826,120(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2bd0:	|           '-> clr.l 116(sp)
    2bd4:	|     ,-------- bra.w 2c72 <CstPasteChar+0x9e8>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2bd8:	|  ,--|-------> move.l 140(sp),d0
    2bdc:	|  |  |         add.w 120(sp),d0
    2be0:	|  |  |         movea.l 112(sp),a0
    2be4:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2be8:	|  |  |         move.l 152(sp),d0
    2bec:	|  |  |         movea.l 112(sp),a0
    2bf0:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2bf4:	|  |  |         move.l 148(sp),d0
    2bf8:	|  |  |         movea.l 112(sp),a0
    2bfc:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2c00:	|  |  |         move.l 144(sp),d0
    2c04:	|  |  |         movea.l 112(sp),a0
    2c08:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2c0c:	|  |  |         move.l 128(sp),d0
    2c10:	|  |  |         lsl.w #6,d0
    2c12:	|  |  |         move.l 124(sp),d1
    2c16:	|  |  |         add.w d1,d0
    2c18:	|  |  |         sub.w 160(sp),d0
    2c1c:	|  |  |         add.w 162(sp),d0
    2c20:	|  |  |         movea.l 112(sp),a0
    2c24:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2c28:	|  |  |         moveq #0,d0
    2c2a:	|  |  |         move.w 14(sp),d0
    2c2e:	|  |  |         add.l d0,148(sp)
    bltdpt += bltcptplus;
    2c32:	|  |  |         moveq #0,d0
    2c34:	|  |  |         move.w 14(sp),d0
    2c38:	|  |  |         add.l d0,144(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2c3c:	|  |  |         move.w 122(sp),d0
    2c40:	|  |  |         lsr.w #1,d0
    2c42:	|  |  |         move.w d0,122(sp)
    tmp2 = tmp & 0x01;
    2c46:	|  |  |         move.w 122(sp),d1
    2c4a:	|  |  |         andi.w #1,d1
    2c4e:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2c52:	|  |  |  ,----- beq.s 2c5c <CstPasteChar+0x9d2>
      minterm = 0xbfa;
    2c54:	|  |  |  |      move.w #3066,120(sp)
    2c5a:	|  |  |  |  ,-- bra.s 2c62 <CstPasteChar+0x9d8>
    } else {
      minterm = 0xb0a;
    2c5c:	|  |  |  '--|-> move.w #2826,120(sp)
    }   

    WaitBlit();     
    2c62:	|  |  |     '-> move.l 1ce96 <GfxBase>,d0
    2c68:	|  |  |         movea.l d0,a6
    2c6a:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2c6e:	|  |  |         addq.l #1,116(sp)
    2c72:	|  |  '-------> moveq #4,d2
    2c74:	|  |            cmp.l 116(sp),d2
    2c78:	|  '----------- bge.w 2bd8 <CstPasteChar+0x94e>
  }   
  //custom->color[0] = 0x000;
}
    2c7c:	'-------------> move.l (sp)+,d2
    2c7e:	                movea.l (sp)+,a6
    2c80:	                lea 156(sp),sp
    2c84:	                rts

00002c86 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2c86:	                   lea -36(sp),sp
    2c8a:	                   move.l a6,-(sp)
    2c8c:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2c8e:	                   move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2c96:	                   move.l 1cdc2 <CstCleanupQueueDrawBuffer>,d0
    2c9c:	,----------------- beq.w 2efc <CstRestoreScreen+0x276>
    2ca0:	|                  move.l 1cdba <CstDrawBuffer>,d0
    2ca6:	+----------------- beq.w 2efc <CstRestoreScreen+0x276>
    return;
  } 

  UWORD *colorpos = CstPalette;
    2caa:	|                  move.l 1cdca <CstPalette>,40(sp)
  UWORD *tmp = CstClColor;
    2cb2:	|                  move.l 1cdc6 <CstClColor>,36(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2cba:	|                  clr.l 32(sp)
    2cbe:	|              ,-- bra.s 2cf0 <CstRestoreScreen+0x6a>
    *tmp++;
    2cc0:	|           ,--|-> move.l 36(sp),d0
    2cc4:	|           |  |   move.l d0,d1
    2cc6:	|           |  |   addq.l #2,d1
    2cc8:	|           |  |   move.l d1,36(sp)
    *tmp++ = *colorpos++;
    2ccc:	|           |  |   move.l 40(sp),d1
    2cd0:	|           |  |   move.l d1,d2
    2cd2:	|           |  |   addq.l #2,d2
    2cd4:	|           |  |   move.l d2,40(sp)
    2cd8:	|           |  |   move.l 36(sp),d0
    2cdc:	|           |  |   move.l d0,d2
    2cde:	|           |  |   addq.l #2,d2
    2ce0:	|           |  |   move.l d2,36(sp)
    2ce4:	|           |  |   movea.l d1,a0
    2ce6:	|           |  |   move.w (a0),d1
    2ce8:	|           |  |   movea.l d0,a0
    2cea:	|           |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    2cec:	|           |  |   addq.l #1,32(sp)
    2cf0:	|           |  '-> moveq #31,d0
    2cf2:	|           |      cmp.l 32(sp),d0
    2cf6:	|           '----- bge.s 2cc0 <CstRestoreScreen+0x3a>
  }

  WaitBlit();
    2cf8:	|                  move.l 1ce96 <GfxBase>,d0
    2cfe:	|                  movea.l d0,a6
    2d00:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2d04:	|                  movea.l 16(sp),a0
    2d08:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2d0e:	|                  movea.l 16(sp),a0
    2d12:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2d18:	|                  movea.l 16(sp),a0
    2d1c:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2d22:	|     ,----------- bra.w 2ef0 <CstRestoreScreen+0x26a>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3
    2d26:	|  ,--|----------> movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2d2c:	|  |  |            move.l 4(a0),d0
    2d30:	|  |  |     ,----- beq.s 2d46 <CstRestoreScreen+0xc0>
    2d32:	|  |  |     |      movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2d38:	|  |  |     |      movea.l 4(a0),a0
    2d3c:	|  |  |     |      move.l 16(a0),d0
    2d40:	|  |  |     |      moveq #2,d1
    2d42:	|  |  |     |      cmp.l d0,d1
    2d44:	|  |  |     |  ,-- bge.s 2d54 <CstRestoreScreen+0xce>
      || CstCleanupQueueDrawBuffer->person == NULL)
    2d46:	|  |  |     '--|-> movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2d4c:	|  |  |        |   move.l 4(a0),d0
    2d50:	|  |  |  ,-----|-- bne.w 2ebe <CstRestoreScreen+0x238>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2d54:	|  |  |  |     '-> move.l 1cdde <winWidth>,d0
    2d5a:	|  |  |  |         lsr.l #3,d0
    2d5c:	|  |  |  |         move.l d0,d1
    2d5e:	|  |  |  |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2d64:	|  |  |  |         move.w 8(a0),d0
    2d68:	|  |  |  |         add.w d0,d0
    2d6a:	|  |  |  |         sub.w d0,d1
    2d6c:	|  |  |  |         movea.l 16(sp),a0
    2d70:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2d74:	|  |  |  |         move.l 1cdde <winWidth>,d0
    2d7a:	|  |  |  |         lsr.l #3,d0
    2d7c:	|  |  |  |         move.l d0,d1
    2d7e:	|  |  |  |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2d84:	|  |  |  |         move.w 8(a0),d0
    2d88:	|  |  |  |         add.w d0,d0
    2d8a:	|  |  |  |         sub.w d0,d1
    2d8c:	|  |  |  |         movea.l 16(sp),a0
    2d90:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2d94:	|  |  |  |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2d9a:	|  |  |  |         move.w 14(a0),d0
    2d9e:	|  |  |  |         move.w d0,d0
    2da0:	|  |  |  |         andi.l #65535,d0
    2da6:	|  |  |  |         move.l 1cdde <winWidth>,d1
    2dac:	|  |  |  |         move.l d1,-(sp)
    2dae:	|  |  |  |         move.l d0,-(sp)
    2db0:	|  |  |  |         jsr 1803a <__mulsi3>
    2db6:	|  |  |  |         addq.l #8,sp
    2db8:	|  |  |  |         move.l d0,d1
    2dba:	|  |  |  |         lsr.l #3,d1
    2dbc:	|  |  |  |         move.l 1cdaa <CstBackDrop>,d0
    2dc2:	|  |  |  |         add.l d0,d1
    2dc4:	|  |  |  |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2dca:	|  |  |  |         move.w 12(a0),d0
    2dce:	|  |  |  |         move.w d0,d0
    2dd0:	|  |  |  |         andi.l #65535,d0
    2dd6:	|  |  |  |         move.l d1,d2
    2dd8:	|  |  |  |         add.l d0,d2
    2dda:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2dde:	|  |  |  |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2de4:	|  |  |  |         move.w 14(a0),d0
    2de8:	|  |  |  |         move.w d0,d0
    2dea:	|  |  |  |         andi.l #65535,d0
    2df0:	|  |  |  |         move.l 1cdde <winWidth>,d1
    2df6:	|  |  |  |         move.l d1,-(sp)
    2df8:	|  |  |  |         move.l d0,-(sp)
    2dfa:	|  |  |  |         jsr 1803a <__mulsi3>
    2e00:	|  |  |  |         addq.l #8,sp
    2e02:	|  |  |  |         move.l d0,d1
    2e04:	|  |  |  |         lsr.l #3,d1
    2e06:	|  |  |  |         move.l 1cdba <CstDrawBuffer>,d0
    2e0c:	|  |  |  |         add.l d0,d1
    2e0e:	|  |  |  |         movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2e14:	|  |  |  |         move.w 12(a0),d0
    2e18:	|  |  |  |         move.w d0,d0
    2e1a:	|  |  |  |         andi.l #65535,d0
    2e20:	|  |  |  |         move.l d1,d2
    2e22:	|  |  |  |         add.l d0,d2
    2e24:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2e28:	|  |  |  |         clr.l 20(sp)
    2e2c:	|  |  |  |     ,-- bra.w 2eb4 <CstRestoreScreen+0x22e>
      {
        custom->bltapt = (APTR) bltapt;
    2e30:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2e34:	|  |  |  |  |  |   movea.l 16(sp),a0
    2e38:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2e3c:	|  |  |  |  |  |   move.l 24(sp),d0
    2e40:	|  |  |  |  |  |   movea.l 16(sp),a0
    2e44:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2e48:	|  |  |  |  |  |   movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2e4e:	|  |  |  |  |  |   move.w 10(a0),d0
    2e52:	|  |  |  |  |  |   lsl.w #6,d0
    2e54:	|  |  |  |  |  |   movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2e5a:	|  |  |  |  |  |   move.w 8(a0),d1
    2e5e:	|  |  |  |  |  |   add.w d1,d0
    2e60:	|  |  |  |  |  |   movea.l 16(sp),a0
    2e64:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2e68:	|  |  |  |  |  |   move.l 1cdde <winWidth>,d0
    2e6e:	|  |  |  |  |  |   lsr.l #3,d0
    2e70:	|  |  |  |  |  |   move.l 1cde2 <winHeight>,d1
    2e76:	|  |  |  |  |  |   move.l d1,-(sp)
    2e78:	|  |  |  |  |  |   move.l d0,-(sp)
    2e7a:	|  |  |  |  |  |   jsr 1803a <__mulsi3>
    2e80:	|  |  |  |  |  |   addq.l #8,sp
    2e82:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2e86:	|  |  |  |  |  |   move.l 1cdde <winWidth>,d0
    2e8c:	|  |  |  |  |  |   lsr.l #3,d0
    2e8e:	|  |  |  |  |  |   move.l 1cde2 <winHeight>,d1
    2e94:	|  |  |  |  |  |   move.l d1,-(sp)
    2e96:	|  |  |  |  |  |   move.l d0,-(sp)
    2e98:	|  |  |  |  |  |   jsr 1803a <__mulsi3>
    2e9e:	|  |  |  |  |  |   addq.l #8,sp
    2ea0:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2ea4:	|  |  |  |  |  |   move.l 1ce96 <GfxBase>,d0
    2eaa:	|  |  |  |  |  |   movea.l d0,a6
    2eac:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2eb0:	|  |  |  |  |  |   addq.l #1,20(sp)
    2eb4:	|  |  |  |  |  '-> moveq #4,d0
    2eb6:	|  |  |  |  |      cmp.l 20(sp),d0
    2eba:	|  |  |  |  '----- bge.w 2e30 <CstRestoreScreen+0x1aa>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2ebe:	|  |  |  '-------> move.l 1cdc2 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2ec6:	|  |  |            movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    2ecc:	|  |  |            move.l 16(a0),d0
    2ed0:	|  |  |            move.l d0,1cdc2 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2ed6:	|  |  |            move.l 12(sp),8(sp)
    2edc:	|  |  |            move.l 1ce8a <SysBase>,d0
    2ee2:	|  |  |            movea.l d0,a6
    2ee4:	|  |  |            movea.l 8(sp),a1
    2ee8:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2eec:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2ef0:	|  |  '----------> move.l 1cdc2 <CstCleanupQueueDrawBuffer>,d0
    2ef6:	|  '-------------- bne.w 2d26 <CstRestoreScreen+0xa0>
    2efa:	|              ,-- bra.s 2efe <CstRestoreScreen+0x278>
    return;
    2efc:	'--------------|-> nop
  }
  //custom->color[0] = 0x000;
}
    2efe:	               '-> move.l (sp)+,d2
    2f00:	                   movea.l (sp)+,a6
    2f02:	                   lea 36(sp),sp
    2f06:	                   rts

00002f08 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2f08:	                                                                                           lea -40(sp),sp
    2f0c:	                                                                                           movem.l d2-d7/a2-a6,-(sp)
    2f10:	                                                                                           movea.l 88(sp),a2
    2f14:	                                                                                           move.l 92(sp),64(sp)
    2f1a:	                                                                                           move.l 96(sp),d4
    2f1e:	                                                                                           movea.l 100(sp),a3
    2f22:	                                                                                           move.w d4,d2
    2f24:	                                                                                           move.w a3,d3
    2f26:	                                                                                           move.w 106(sp),52(sp)
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2f2c:	                                                                                           movea.w a3,a5
    2f2e:	                                                                                           movea.w d4,a6
    2f30:	                                                                                           move.l a5,-(sp)
    2f32:	                                                                                           move.l a6,-(sp)
    2f34:	                                                                                           move.l 1cee6 <zBuffer>,-(sp)
    2f3a:	                                                                                           move.l a2,-(sp)
    2f3c:	                                                                                           jsr 1386 <CstDrawZBuffer>
    2f42:	                                                                                           move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    2f44:	                                                                                           lea 16(sp),sp
    2f48:	                                                                                           cmpi.w #1,52(sp)
    2f4e:	                                                            ,----------------------------- beq.w 342e <CstScaleSprite+0x526>
    2f52:	                                                            |                              cmpi.w #2,52(sp)
    2f58:	                                                            |                 ,----------- beq.w 328c <CstScaleSprite+0x384>
    2f5c:	                                                            |                 |            suba.l a4,a4
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2f5e:	                                                            |  ,--------------|----------> move.l 4(a2),d1
    2f62:	                                                            |  |              |            move.l a5,d0
    2f64:	                                                            |  |              |            add.l d1,d0
  if( y < 0) {
    2f66:	                                                            |  |              |            tst.w d3
    2f68:	                                                            |  |           ,--|----------- blt.w 32a0 <CstScaleSprite+0x398>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2f6c:	                                                            |  |           |  |  ,-------> movea.l 1cde2 <winHeight>,a0
    2f72:	                                                            |  |           |  |  |         cmp.l a0,d0
    2f74:	                                                            |  |  ,--------|--|--|-------- ble.w 3438 <CstScaleSprite+0x530>
    if(y  > (int) winHeight) {
    2f78:	                                                            |  |  |        |  |  |         cmpa.l a5,a0
    2f7a:	                     ,--------------------------------------|--|--|--------|--|--|-------- blt.w 356a <CstScaleSprite+0x662>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    2f7e:	                     |                                      |  |  |        |  |  |         move.l a5,d7
    ystartsrc = 0;
    blitheight = winHeight-y;
    2f80:	                     |                                      |  |  |        |  |  |         suba.l a5,a0
    2f82:	                     |                                      |  |  |        |  |  |         move.l a0,48(sp)
    ystartsrc = 0;
    2f86:	                     |                                      |  |  |        |  |  |         moveq #0,d3


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2f88:	                     |                                      |  |  |  ,-----|--|--|-------> move.l (a2),d1
    2f8a:	                     |                                      |  |  |  |     |  |  |         move.l a6,d0
    2f8c:	                     |                                      |  |  |  |     |  |  |         add.l d1,d0
  if( x < 0) 
    2f8e:	                     |                                      |  |  |  |     |  |  |         tst.w d2
    2f90:	                     |                                      |  |  |  |     |  |  |  ,----- blt.w 32bc <CstScaleSprite+0x3b4>
      CstCleanupQueueViewBuffer->height = blitheight; 
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    }           
  } 
  else if(x + single->width > (int) winWidth) 
    2f94:	                     |                                      |  |  |  |     |  |  |  |  ,-> movea.l 1cdde <winWidth>,a5
    2f9a:	                     |                                      |  |  |  |     |  |  |  |  |   cmp.l a5,d0
    2f9c:	                     |                                      |  |  |  |  ,--|--|--|--|--|-- ble.w 3444 <CstScaleSprite+0x53c>
  { //Rightmost part outside screen   

    if(x - single->width > (int) winWidth)
    2fa0:	                     |                                      |  |  |  |  |  |  |  |  |  |   suba.l d1,a6
    2fa2:	                     |                                      |  |  |  |  |  |  |  |  |  |   cmpa.l a5,a6
    2fa4:	                     +--------------------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 356a <CstScaleSprite+0x662>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2fa8:	                     |                                      |  |  |  |  |  |  |  |  |  |   sub.l a5,d0
    2faa:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #4,d0
    2fac:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,56(sp)
    2fb0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2fb2:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 1803a <__mulsi3>,a6
    2fb8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2fba:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    2fbc:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    2fbe:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2fc0:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2fc2:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2fc4:	                     |                                      |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2fc8:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2fcc:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,d2
    2fce:	                     |                                      |  |  |  |  |  |  |  |  |  |   asr.w #4,d2
    2fd0:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d7,-(sp)
    2fd2:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,-(sp)
    2fd4:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr (a6)
    2fd6:	                     |                                      |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2fd8:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2fda:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.w d2,a0
    2fdc:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a0
    2fde:	                     |                                      |  |  |  |  |  |  |  |  |  |   adda.l a0,a4
    2fe0:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea (0,a4,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2fe4:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,d3
    2fe6:	                     |                                      |  |  |  |  |  |  |  |  |  |   andi.w #15,d3
    2fea:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,76(sp)
    2fee:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2ff0:	                     |                                      |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    2ff2:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    2ff4:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d3
    2ff6:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d3,d1
    2ff8:	                     |                                      |  |  |  |  |  |  |  |  |  |   addi.l #4042,d1
    2ffe:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,72(sp)
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    3002:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    3008:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l a4,d1
    300a:	                     |                                      |  |  |  |  |  |  |  |  |  |   lsl.l d0,d1
    300c:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d1,a4

    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    300e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 1cdc2 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3014:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l #118410,68(sp)
    301c:	                     |                                      |  |  |  |  |  |  |  |  |  |   lea 1ce8a <SysBase>,a0
    3022:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3024:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    3026:	                     |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    3028:	                     |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    302c:	                     |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    302e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1cdc2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3034:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d3,16(a0)

    CstCleanupQueueDrawBuffer->x = x;
    3038:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    303a:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    303e:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3044:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    3046:	                     |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    3048:	         ,-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3846 <CstScaleSprite+0x93e>
    304c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    304e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   movea.w 58(sp),a1
    3052:	         |           |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    3054:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3058:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),d3
    305c:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3060:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d2,d2
    3062:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,78(sp)
    3066:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    306a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,48(sp)
    306e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,14(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    } 
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3072:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 58(sp),d7
    3076:	         |           |                                      |  |  |  |  |  |  |  |  |  |   add.w d7,d7
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    3078:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 74(sp),72(sp)
  custom->bltcon1 = bltcon1;  
    307e:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w 76(sp),d2
    3082:	         |           |                                      |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    3084:	         |           |                                      |  |  |  |  |  |  |  |  |  |   lsl.w d0,d2
    3086:	         |           |                                      |  |  |  |  |  |  |  |  |  |   move.w d2,76(sp)
    if( destinationtype != SCREEN)
    308a:	         |           |                                      |  |  |  |  |  |  |  |  |  |   cmpi.w #1,52(sp)
    3090:	      ,--|-----------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 38b6 <CstScaleSprite+0x9ae>
      next = CstCleanupQueueViewBuffer;
    3094:	      |  |  ,--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1cdbe <CstCleanupQueueViewBuffer>,d2
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    309a:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    309e:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    30a0:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    30a2:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    30a4:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    30a8:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    30aa:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,1cdbe <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    30b0:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d2,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    30b4:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    30b6:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    30ba:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    30c0:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    30c2:	      |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    30c4:	   ,--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 3900 <CstScaleSprite+0x9f8>
    30c8:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    30ca:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   movea.w 58(sp),a1
    30ce:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   adda.w d0,a1
    30d0:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w a1,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    30d4:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    30d8:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 78(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    30de:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w 48(sp),14(a0)
    30e4:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    30ea:	   |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    30ec:	,--|--|--|--|--------|--------------------------------------|--|--|--|--|--|--|--|--|--|-> move.l 1cdde <winWidth>,d0
    30f2:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    30f4:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    30f6:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    30f8:	|  |  |  |  |        |                                      |  |  |  |  |  |  |  |  |  |   tst.l d1
    30fa:	|  |  |  |  |  ,-----|--------------------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3646 <CstScaleSprite+0x73e>
    30fe:	|  |  |  |  |  |  ,--|--------------------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    3100:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    3102:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lea 1ce96 <GfxBase>,a3
    3108:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    310a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    310e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 50(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb2ee8>
  custom->bltalwm = bltalwm;
    3116:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2eea>
  custom->bltamod = bltamod;
    311c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2f08>
  custom->bltbmod = bltbmod;
    3122:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d7,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2f06>
  custom->bltcmod = bltcmod;
    3128:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2f04>
  custom->bltdmod = bltdmod;
    312e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2f0a>
  custom->bltcon0 = bltcon0;
    3134:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb2ee4>
  custom->bltcon1 = bltcon1;  
    313c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb2ee6>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    3144:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3146:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsl.w #6,d3
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3148:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d0,d7
    314a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   asr.l #3,d7
    314c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d7
    bltbpt += bltbptplus;
    3150:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d7
  UWORD bltcptplus = winWidth/8*winHeight;
    3156:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 1cdde <winWidth>,d4
    315c:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    315e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   muls.w 1cde4 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    3164:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    316a:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
    custom->bltbpt = (APTR) bltbpt;
    3170:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb2ef0>
    custom->bltcpt = (APTR) bltcpt;
    3178:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2eec>
    custom->bltdpt = (APTR) bltdpt;
    317e:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3184:	|  |  |  |  |  |  |  |                                      |  |  |  |  |  |  |  |  |  |   tst.l d0
    3186:	|  |  |  |  |  |  |  |                       ,--------------|--|--|--|--|--|--|--|--|--|-- blt.w 36d4 <CstScaleSprite+0x7cc>
    318a:	|  |  |  |  |  |  |  |                       |     ,--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    318c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    318e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    3190:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3192:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
    bltbpt += bltbptplus;
    3198:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l 60(sp),a4
    319c:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    319e:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    31a0:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    31a2:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31a6:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    31a8:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
    custom->bltbpt = (APTR) bltbpt;
    31ae:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2ef0>
    custom->bltcpt = (APTR) bltcpt;
    31b4:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2eec>
    custom->bltdpt = (APTR) bltdpt;
    31ba:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31c0:	|  |  |  |  |  |  |  |                       |     |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    31c2:	|  |  |  |  |  |  |  |                 ,-----|-----|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3714 <CstScaleSprite+0x80c>
    31c6:	|  |  |  |  |  |  |  |                 |     |  ,--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    31c8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    31ca:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    31cc:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    31ce:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
    bltbpt += bltbptplus;
    31d4:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    31d6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    31d8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    31da:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31de:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    31e0:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
    custom->bltbpt = (APTR) bltbpt;
    31e6:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2ef0>
    custom->bltcpt = (APTR) bltcpt;
    31ec:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2eec>
    custom->bltdpt = (APTR) bltdpt;
    31f2:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    31f8:	|  |  |  |  |  |  |  |                 |     |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    31fa:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 3750 <CstScaleSprite+0x848>
    31fe:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3200:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3202:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    3204:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3206:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
    bltbpt += bltbptplus;
    320c:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d7,a4
    bltcpt += bltcptplus;
    320e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    3210:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    3212:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3216:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3218:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
    custom->bltbpt = (APTR) bltbpt;
    321e:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2ef0>
    custom->bltcpt = (APTR) bltcpt;
    3224:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2eec>
    custom->bltdpt = (APTR) bltdpt;
    322a:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3230:	|  |  |  |  |  |  |  |           |     |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    3232:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 378c <CstScaleSprite+0x884>
    3236:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3238:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    323a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d0
    323c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    323e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
    bltbpt += bltbptplus;
    3244:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a4,d7
    bltcpt += bltcptplus;
    3246:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    3248:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    324a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    324e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3250:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
    custom->bltbpt = (APTR) bltbpt;
    3256:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d7,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2ef0>
    custom->bltcpt = (APTR) bltcpt;
    325c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2eec>
    custom->bltdpt = (APTR) bltdpt;
    3262:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3268:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.l d0
    326a:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- blt.w 37c8 <CstScaleSprite+0x8c0>
    326e:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    3272:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d3,d2
    3274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    3276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
    WaitBlit();
    327c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a3),a6
    327e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    3282:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 40(sp),sp
    328a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
      destination = (UWORD *) CstBackDrop;      
    328c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  '--|--|--|-> movea.l 1cdaa <CstBackDrop>,a4
    if(y + single->height < 0) {
    3292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l 4(a2),d1
    3296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   move.l a5,d0
    3298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   add.l d1,d0
  if( y < 0) {
    329a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |  |  |   tst.w d3
    329c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     '--|--|-- bge.w 2f6c <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    32a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  '--------|--|-> tst.l d0
    32a2:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|-----------|--|-- blt.w 356a <CstScaleSprite+0x662>
    ystartsrc = y*-1;
    32a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a5,d3
    32a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   neg.l d3
    blitheight = single->height+y;
    32aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l d0,48(sp)
    ystartdst = 0;
    32ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   moveq #0,d7
    if(x + single->width < 0) {
    32b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l (a2),d1
    32b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   move.l a6,d0
    32b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   add.l d1,d0
  if( x < 0) 
    32b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  |   tst.w d2
    32b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           |  '-- bge.w 2f94 <CstScaleSprite+0x8c>
    if(x + single->width < 0) {
    32bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |           '----> tst.l d0
    32be:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--------|--|--|--|--|----------------- blt.w 356a <CstScaleSprite+0x662>
    cutwordssource = (x*-1)/16; 
    32c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d4,d0
    32c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addi.w #15,d0
    32c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  asr.w #4,d0
    32ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.w d0
    32cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,56(sp)
    32d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    32d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l a6,d0
    32d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  neg.l d0
    32d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  moveq #15,d2
    32d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  and.l d0,d2
    32da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d2,78(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    32de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lea 1803a <__mulsi3>,a6
    32e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 1cdde <winWidth>,-(sp)
    32ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d7,-(sp)
    32ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l d1,52(sp)
    32f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  jsr (a6)
    32f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  addq.l #8,sp
    32f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    32f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  move.l 44(sp),d1
    32fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |                  tst.l d2
    32fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  ,-------------- beq.w 3580 <CstScaleSprite+0x678>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3300:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea (-2,a4,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    3304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w 56(sp),d2
    3308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               subq.w #1,d2
    330a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,82(sp)
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    330e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w #16,a0
    3312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               suba.l 78(sp),a0
    3316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l a0,d2
    3318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #12,d0
    331a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    331c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addi.w #4042,d2
    3320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,72(sp)
  custom->bltcon1 = bltcon1;  
    3324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a0,d2
    3326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsl.w d0,d2
    3328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d2,76(sp)
      extrawords = 1;
    332c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    332e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.w 56(sp),a4
    3332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l a4,a4
    3334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d3,-(sp)
    3336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,-(sp)
    3338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr (a6)
    333a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               addq.l #8,sp
    333c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lsr.l #3,d0
    333e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d5
    3340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    3342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               adda.l 24(a2),a4
    3346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               add.l a4,d0
    3348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    334c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 1cdc2 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3352:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l #118410,68(sp)
    335a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               lea 1ce8a <SysBase>,a0
    3360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l (a0),a6
    3362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #20,d0
    3364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               moveq #0,d1
    3366:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               jsr -684(a6)
    336a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               movea.l d0,a0
    336c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d0,1cdc2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    3372:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    3376:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    3378:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    337c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3382:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l (a2),d1
    3384:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |               move.l d1,d0
    3386:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     ,-------- bmi.w 35f2 <CstScaleSprite+0x6ea>
    338a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     ,-> asr.l #4,d0
    338c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w 56(sp),d0
    3390:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d2,d0
    3392:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    3396:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 50(sp),d3
    339a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    339e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    33a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   movea.w d7,a4
    33a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d7,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    33a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   moveq #0,d0
    33aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   not.w d0
    33ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.l 78(sp),d7
    33b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   asr.l d7,d0
    33b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w d0,50(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    33b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   move.w 82(sp),d7
    33ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   add.w d7,d7
    if( destinationtype != SCREEN)
    33bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |     |     |   cmpi.w #1,52(sp)
    33c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  ,--|-----|-- beq.w 3632 <CstScaleSprite+0x72a>
      next = CstCleanupQueueViewBuffer;
    33c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  ,--|-> move.l 1cdbe <CstCleanupQueueViewBuffer>,52(sp)
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    33ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    33d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    33d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #20,d0
    33d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   moveq #0,d1
    33d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   jsr -684(a6)
    33dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l d0,a0
    33de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d0,1cdbe <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;
    33e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 52(sp),16(a0)
      CstCleanupQueueViewBuffer->x = x;
    33ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    33ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person;
    33f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    33f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l (a2),d1
    33f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    33fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|--|--|-- bmi.w 3894 <CstScaleSprite+0x98c>
    33fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3400:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w 56(sp),d0
    3404:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3406:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    340a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    340e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    3412:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   move.w a4,14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    3416:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3418:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|-> move.l 1cdde <winWidth>,d0
    341e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    3420:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    3422:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    3424:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3426:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 30fe <CstScaleSprite+0x1f6>
    342a:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3646 <CstScaleSprite+0x73e>
      destination = (UWORD *) CstDrawBuffer;      
    342e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|-> movea.l 1cdba <CstDrawBuffer>,a4
      break;
    3434:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--|--|--|--|--|-- bra.w 2f5e <CstScaleSprite+0x56>
    ystartdst = y;
    3438:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--|--|--|--|--|-> move.l a5,d7
    blitheight = single->height;
    343a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   move.l d1,48(sp)
    ystartsrc = 0;
    343e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |  |  |  |  |  |   moveq #0,d3
    3440:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--|--|--|--|--|-- bra.w 2f88 <CstScaleSprite+0x80>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    3444:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--|--|--|--|--|-> lea 1803a <__mulsi3>,a6
    344a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d3,-(sp)
    344c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,-(sp)
    344e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a6)
    3450:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    3452:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    3454:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    3456:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   add.l 24(a2),d0
    345a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,60(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    345e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,d2
    3460:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   asr.w #4,d2
    3462:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d7,-(sp)
    3464:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l a5,-(sp)
    3466:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr (a6)
    3468:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   addq.l #8,sp
    346a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsr.l #3,d0
    346c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.w d2,a0
    346e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a0
    3470:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   adda.l a0,a4
    3472:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea (0,a4,d0.l),a5
    bltcon0 = 0xfca + ((x%16) << 12);
    3476:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,d6
    3478:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   andi.w #15,d6
    347c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #15,d0
    347e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   and.l d4,d0
    3480:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #12,d1
    3482:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lsl.l d1,d0
    3484:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a4
    3486:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 4042(a4),a4
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    348a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 1cdc2 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3490:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l #118410,68(sp)
    3498:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   lea 1ce8a <SysBase>,a0
    349e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l (a0),a6
    34a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #20,d0
    34a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   moveq #0,d1
    34a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   jsr -684(a6)
    34a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   movea.l d0,a0
    34aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d0,1cdc2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    34b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    34b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    34b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person; 
    34ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    34c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l (a2),d1
    34c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                 |  |  |  |  |   move.l d1,d0
    34c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-----|--|--|--|--|-- bmi.w 37ea <CstScaleSprite+0x8e2>
    34c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   asr.l #4,d0
    34ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   addq.w #1,d0
    34cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    34d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w 50(sp),d3
    34d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    34d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   add.w d2,d2
    34da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    34de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,48(sp)
    34e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d7,14(a0)
  custom->bltcon0 = bltcon0;
    34e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    34ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   moveq #12,d0
    34ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   lsl.w d0,d6
    34ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   move.w d6,76(sp)
    if( destinationtype != SCREEN)
    34f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |     |  |  |  |  |   cmpi.w #1,52(sp)
    34f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|-----|--|--|--|--|-- beq.w 3822 <CstScaleSprite+0x91a>
      next = CstCleanupQueueViewBuffer;
    34fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,--|--|--|--|--|-> move.l 1cdbe <CstCleanupQueueViewBuffer>,d6
      CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3502:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l 68(sp),a0
    3506:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l (a0),a6
    3508:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #20,d0
    350a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   moveq #0,d1
    350c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   jsr -684(a6)
    3510:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   movea.l d0,a0
    3512:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d0,1cdbe <CstCleanupQueueViewBuffer>
      CstCleanupQueueViewBuffer->next = next;   
    3518:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d6,16(a0)
      CstCleanupQueueViewBuffer->x = x;
    351c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w d4,(a0)
      CstCleanupQueueViewBuffer->y = y;
    351e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.w a3,2(a0)
      CstCleanupQueueViewBuffer->person = person; 
    3522:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l 64(sp),4(a0)
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3528:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l (a2),d1
    352a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |   move.l d1,d0
    352c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|--|--|--|--|--|--|--|-- bmi.w 38d4 <CstScaleSprite+0x9cc>
    3530:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   asr.l #4,d0
    3532:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   addq.w #1,d0
    3534:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    3538:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    353c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w d2,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    3540:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w 48(sp),14(a0)
    3546:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   move.w #-1,50(sp)
    354c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    354e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3550:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    3552:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3554:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|-> move.l 1cdde <winWidth>,d0
    355a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    355c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d7,d4
    355e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d4
    3560:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d1
    3562:	|  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bge.w 30fe <CstScaleSprite+0x1f6>
    3566:	|  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- bra.w 3646 <CstScaleSprite+0x73e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    356a:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> move.l #99495,88(sp)
}
    3572:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3576:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 40(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    357a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jmp 176ae <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    3580:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|-> lea (0,a4,d0.l),a5
    3584:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w 56(sp),82(sp)
    358a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w 76(sp)
    358e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w #4042,72(sp)
      extrawords = 0;
    3594:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3596:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.w 56(sp),a4
    359a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l a4,a4
    359c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d3,-(sp)
    359e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,-(sp)
    35a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr (a6)
    35a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   addq.l #8,sp
    35a4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lsr.l #3,d0
    35a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d5
    35a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    35aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   adda.l 24(a2),a4
    35ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   add.l a4,d0
    35b0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,60(sp)
    struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    35b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 1cdc2 <CstCleanupQueueDrawBuffer>,d3
    CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    35ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l #118410,68(sp)
    35c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   lea 1ce8a <SysBase>,a0
    35c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l (a0),a6
    35ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #20,d0
    35cc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   moveq #0,d1
    35ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   jsr -684(a6)
    35d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   movea.l d0,a0
    35d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d0,1cdc2 <CstCleanupQueueDrawBuffer>
    CstCleanupQueueDrawBuffer->next = next;   
    35da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d3,16(a0)
    CstCleanupQueueDrawBuffer->x = x;
    35de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w d4,(a0)
    CstCleanupQueueDrawBuffer->y = y;
    35e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.w a3,2(a0)
    CstCleanupQueueDrawBuffer->person = person;      
    35e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l 64(sp),4(a0)
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    35ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l (a2),d1
    35ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  |   move.l d1,d0
    35ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-- bpl.w 338a <CstScaleSprite+0x482>
    35f2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  '--|----> moveq #15,d0
    35f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.l d1,d0
    35f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l #4,d0
    35f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w 56(sp),d0
    35fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d2,d0
    35fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height = blitheight;
    3602:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 50(sp),d3
    3606:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes = 0;
    360a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      clr.w 12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    360e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      movea.w d7,a4
    3610:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d7,14(a0)
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    3614:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      moveq #0,d0
    3616:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      not.w d0
    3618:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.l 78(sp),d7
    361c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      asr.l d7,d0
    361e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w d0,50(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3622:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      move.w 82(sp),d7
    3626:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      add.w d7,d7
    if( destinationtype != SCREEN)
    3628:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     |      cmpi.w #1,52(sp)
    362e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |     '----- bne.w 33c6 <CstScaleSprite+0x4be>
    bltalwm = 0; //Last Word of this channel almost masked out
    3632:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '----------> suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3634:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1cdde <winWidth>,d0
    363a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    363c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,d4
    363e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  add.w d0,d4
    3640:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d1
    3642:	|  |  |  |  |  |  +-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- bge.w 30fe <CstScaleSprite+0x1f6>
    3646:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|----------------> addq.l #7,d1
    3648:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d1
    364a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  sub.w d1,d4
  WaitBlit();
    364c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 1ce96 <GfxBase>,a3
    3652:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l (a3),a6
    3654:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr -228(a6)
  custom->bltafwm = bltafwm;
    3658:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 50(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb2ee8>
  custom->bltalwm = bltalwm;
    3660:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb2eea>
  custom->bltamod = bltamod;
    3666:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,dff064 <gcc8_c_support.c.c60c1f2b+0xdb2f08>
  custom->bltbmod = bltbmod;
    366c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d7,dff062 <gcc8_c_support.c.c60c1f2b+0xdb2f06>
  custom->bltcmod = bltcmod;
    3672:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb2f04>
  custom->bltdmod = bltdmod;
    3678:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb2f0a>
  custom->bltcon0 = bltcon0;
    367e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 72(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb2ee4>
  custom->bltcon1 = bltcon1;  
    3686:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w 76(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb2ee6>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    368e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3690:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsl.w #6,d3
  UWORD bltbptplus = (single->width >> 3)*single->height;
    3692:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d0,d7
    3694:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.l #3,d7
    3696:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 6(a2),d7
    bltbpt += bltbptplus;
    369a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d7
  UWORD bltcptplus = winWidth/8*winHeight;
    36a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1cdde <winWidth>,d4
    36a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d4
    36a8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  muls.w 1cde4 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    36ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    36b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
    custom->bltbpt = (APTR) bltbpt;
    36ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 60(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb2ef0>
    custom->bltcpt = (APTR) bltcpt;
    36c2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2eec>
    custom->bltdpt = (APTR) bltdpt;
    36c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    36ce:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d0
    36d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|----------------- bge.w 318a <CstScaleSprite+0x282>
    36d4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--|-----|--|--|--|--|--|--|----------------> moveq #15,d1
    36d6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.l d1,d0
    36d8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  asr.l #4,d0
    36da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d2,d0
    36dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  add.w d3,d0
    36de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  sub.w d6,d0
    36e0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
    bltbpt += bltbptplus;
    36e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l 60(sp),a4
    36ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    36ec:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    36ee:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  movea.l (a3),a6
    36f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    36f4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    36f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
    custom->bltbpt = (APTR) bltbpt;
    36fc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2ef0>
    custom->bltcpt = (APTR) bltcpt;
    3702:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2eec>
    custom->bltdpt = (APTR) bltdpt;
    3708:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    370e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     |     |  |  |  |  |  |  |                  tst.l d0
    3710:	|  |  |  |  |  |  |     |  |  |  |  |  |  |     '-----|--|--|--|--|--|--|----------------- bge.w 31c6 <CstScaleSprite+0x2be>
    3714:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|--|--|----------------> moveq #15,d1
    3716:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.l d1,d0
    3718:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  asr.l #4,d0
    371a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d2,d0
    371c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  add.w d3,d0
    371e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  sub.w d6,d0
    3720:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
    bltbpt += bltbptplus;
    3726:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    3728:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    372a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  movea.l (a3),a6
    372c:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3730:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3732:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
    custom->bltbpt = (APTR) bltbpt;
    3738:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2ef0>
    custom->bltcpt = (APTR) bltcpt;
    373e:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2eec>
    custom->bltdpt = (APTR) bltdpt;
    3744:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    374a:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |  |  |                  tst.l d0
    374c:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|--|--|----------------- bge.w 31fe <CstScaleSprite+0x2f6>
    3750:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|--|--|----------------> moveq #15,d1
    3752:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.l d1,d0
    3754:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  asr.l #4,d0
    3756:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d2,d0
    3758:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  add.w d3,d0
    375a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  sub.w d6,d0
    375c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
    bltbpt += bltbptplus;
    3762:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d7,a4
    bltcpt += bltcptplus;
    3764:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  adda.l d4,a5
    WaitBlit();
    3766:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  movea.l (a3),a6
    3768:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    376c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    376e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
    custom->bltbpt = (APTR) bltbpt;
    3774:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2ef0>
    custom->bltcpt = (APTR) bltcpt;
    377a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2eec>
    custom->bltdpt = (APTR) bltdpt;
    3780:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3786:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |  |  |                  tst.l d0
    3788:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|--|--|----------------- bge.w 3236 <CstScaleSprite+0x32e>
    378c:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|--|--|----------------> moveq #15,d1
    378e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l d1,d0
    3790:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  asr.l #4,d0
    3792:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d2,d0
    3794:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.w d3,d0
    3796:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  sub.w d6,d0
    3798:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
    bltbpt += bltbptplus;
    379e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a4,d7
    bltcpt += bltcptplus;
    37a0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  add.l a5,d4
    WaitBlit();
    37a2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  movea.l (a3),a6
    37a4:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    37a8:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    37aa:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb2ef4>
    custom->bltbpt = (APTR) bltbpt;
    37b0:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d7,dff04c <gcc8_c_support.c.c60c1f2b+0xdb2ef0>
    custom->bltcpt = (APTR) bltcpt;
    37b6:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb2eec>
    custom->bltdpt = (APTR) bltdpt;
    37bc:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb2ef8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    37c2:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |  |  |                  tst.l d0
    37c4:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|--|--|----------------- bge.w 326e <CstScaleSprite+0x366>
    37c8:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|--|--|----------------> moveq #15,d7
    37ca:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.l d7,d0
    37cc:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  asr.l #4,d0
    37ce:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d0,d2
    37d0:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  add.w d3,d2
    37d2:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  sub.w d6,d2
    37d4:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb2efc>
    WaitBlit();
    37da:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movea.l (a3),a6
    37dc:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  jsr -228(a6)
}
    37e0:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  movem.l (sp)+,d2-d7/a2-a6
    37e4:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  lea 40(sp),sp
    37e8:	|  |  |  |  |  |  |                                   |  |  |  |  |  |  |                  rts
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    37ea:	|  |  |  |  |  |  |                                   |  |  |  |  |  '--|----------------> moveq #15,d0
    37ec:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.l d1,d0
    37ee:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  asr.l #4,d0
    37f0:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  addq.w #1,d0
    37f2:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d0,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; 
    37f6:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w 50(sp),d3
    37fa:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    37fe:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  add.w d2,d2
    3800:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3804:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,48(sp)
    3808:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d7,14(a0)
  custom->bltcon0 = bltcon0;
    380c:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w a4,72(sp)
  custom->bltcon1 = bltcon1;  
    3810:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  moveq #12,d0
    3812:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  lsl.w d0,d6
    3814:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  move.w d6,76(sp)
    if( destinationtype != SCREEN)
    3818:	|  |  |  |  |  |  |                                   |  |  |  |  |     |                  cmpi.w #1,52(sp)
    381e:	|  |  |  |  |  |  |                                   |  |  |  |  |     '----------------- bne.w 34fc <CstScaleSprite+0x5f4>
    extrawords = 1;
    3822:	|  |  |  |  |  |  |                                   |  |  |  |  '----------------------> moveq #1,d2
    3824:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w #-1,50(sp)
    382a:	|  |  |  |  |  |  |                                   |  |  |  |                           moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    382c:	|  |  |  |  |  |  |                                   |  |  |  |                           suba.l a4,a4
    cutwordssource = 0;
    382e:	|  |  |  |  |  |  |                                   |  |  |  |                           clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3830:	|  |  |  |  |  |  |                                   |  |  |  |                           move.l 1cdde <winWidth>,d0
    3836:	|  |  |  |  |  |  |                                   |  |  |  |                           lsr.l #3,d0
    3838:	|  |  |  |  |  |  |                                   |  |  |  |                           move.w d7,d4
    383a:	|  |  |  |  |  |  |                                   |  |  |  |                           add.w d0,d4
    383c:	|  |  |  |  |  |  |                                   |  |  |  |                           tst.l d1
    383e:	|  |  |  |  |  |  +-----------------------------------|--|--|--|-------------------------- bge.w 30fe <CstScaleSprite+0x1f6>
    3842:	|  |  |  |  |  +--|-----------------------------------|--|--|--|-------------------------- bra.w 3646 <CstScaleSprite+0x73e>
    CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    3846:	|  |  |  '--|--|--|-----------------------------------|--|--|--|-------------------------> moveq #15,d0
    3848:	|  |  |     |  |  |                                   |  |  |  |                           add.l d1,d0
    384a:	|  |  |     |  |  |                                   |  |  |  |                           asr.l #4,d0
    384c:	|  |  |     |  |  |                                   |  |  |  |                           movea.w 58(sp),a1
    3850:	|  |  |     |  |  |                                   |  |  |  |                           adda.w d0,a1
    3852:	|  |  |     |  |  |                                   |  |  |  |                           move.w a1,8(a0)
    CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    3856:	|  |  |     |  |  |                                   |  |  |  |                           move.w 50(sp),d3
    385a:	|  |  |     |  |  |                                   |  |  |  |                           move.w d3,10(a0)
    CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    385e:	|  |  |     |  |  |                                   |  |  |  |                           add.w d2,d2
    3860:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,78(sp)
    3864:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,12(a0)
    CstCleanupQueueDrawBuffer->starty = ystartdst;
    3868:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,48(sp)
    386c:	|  |  |     |  |  |                                   |  |  |  |                           move.w d7,14(a0)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    3870:	|  |  |     |  |  |                                   |  |  |  |                           move.w 58(sp),d7
    3874:	|  |  |     |  |  |                                   |  |  |  |                           add.w d7,d7
  custom->bltcon0 = bltcon0;
    3876:	|  |  |     |  |  |                                   |  |  |  |                           move.w 74(sp),72(sp)
  custom->bltcon1 = bltcon1;  
    387c:	|  |  |     |  |  |                                   |  |  |  |                           move.w 76(sp),d2
    3880:	|  |  |     |  |  |                                   |  |  |  |                           moveq #12,d0
    3882:	|  |  |     |  |  |                                   |  |  |  |                           lsl.w d0,d2
    3884:	|  |  |     |  |  |                                   |  |  |  |                           move.w d2,76(sp)
    if( destinationtype != SCREEN)
    3888:	|  |  |     |  |  |                                   |  |  |  |                           cmpi.w #1,52(sp)
    388e:	|  |  |     '--|--|-----------------------------------|--|--|--|-------------------------- bne.w 3094 <CstScaleSprite+0x18c>
    3892:	|  |  +--------|--|-----------------------------------|--|--|--|-------------------------- bra.s 38b6 <CstScaleSprite+0x9ae>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3894:	|  |  |        |  |                                   |  '--|--|-------------------------> moveq #15,d0
    3896:	|  |  |        |  |                                   |     |  |                           add.l d1,d0
    3898:	|  |  |        |  |                                   |     |  |                           asr.l #4,d0
    389a:	|  |  |        |  |                                   |     |  |                           add.w 56(sp),d0
    389e:	|  |  |        |  |                                   |     |  |                           add.w d2,d0
    38a0:	|  |  |        |  |                                   |     |  |                           move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height = blitheight; 
    38a4:	|  |  |        |  |                                   |     |  |                           move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes = 0; 
    38a8:	|  |  |        |  |                                   |     |  |                           clr.w 12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;  
    38ac:	|  |  |        |  |                                   |     |  |                           move.w a4,14(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    38b0:	|  |  |        |  |                                   |     |  |                           suba.l a4,a4
    38b2:	|  |  |        |  |                                   '-----|--|-------------------------- bra.w 3418 <CstScaleSprite+0x510>
    38b6:	|  |  '--------|--|-----------------------------------------|--|-------------------------> move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    38bc:	|  |           |  |                                         |  |                           clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    38be:	|  |           |  |                                         |  |                           move.l 1cdde <winWidth>,d0
    38c4:	|  |           |  |                                         |  |                           lsr.l #3,d0
    38c6:	|  |           |  |                                         |  |                           move.w d7,d4
    38c8:	|  |           |  |                                         |  |                           add.w d0,d4
    38ca:	|  |           |  |                                         |  |                           tst.l d1
    38cc:	|  |           |  '-----------------------------------------|--|-------------------------- bge.w 30fe <CstScaleSprite+0x1f6>
    38d0:	|  |           '--------------------------------------------|--|-------------------------- bra.w 3646 <CstScaleSprite+0x73e>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    38d4:	|  |                                                        |  '-------------------------> moveq #15,d0
    38d6:	|  |                                                        |                              add.l d1,d0
    38d8:	|  |                                                        |                              asr.l #4,d0
    38da:	|  |                                                        |                              addq.w #1,d0
    38dc:	|  |                                                        |                              move.w d0,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight; 
    38e0:	|  |                                                        |                              move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; 
    38e4:	|  |                                                        |                              move.w d2,12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst;
    38e8:	|  |                                                        |                              move.w 48(sp),14(a0)
    38ee:	|  |                                                        |                              move.w #-1,50(sp)
    38f4:	|  |                                                        |                              moveq #-2,d7
    bltalwm = 0; //Last Word of this channel almost masked out
    38f6:	|  |                                                        |                              suba.l a4,a4
    cutwordssource = 0;
    38f8:	|  |                                                        |                              clr.w d6
    extrawords = 1;
    38fa:	|  |                                                        |                              moveq #1,d2
    38fc:	|  |                                                        '----------------------------- bra.w 3554 <CstScaleSprite+0x64c>
      CstCleanupQueueViewBuffer->widthinwords = single->width/16+cutwordssource;
    3900:	|  '-------------------------------------------------------------------------------------> moveq #15,d0
    3902:	|                                                                                          add.l d1,d0
    3904:	|                                                                                          asr.l #4,d0
    3906:	|                                                                                          movea.w 58(sp),a1
    390a:	|                                                                                          adda.w d0,a1
    390c:	|                                                                                          move.w a1,8(a0)
      CstCleanupQueueViewBuffer->height =  blitheight;
    3910:	|                                                                                          move.w d3,10(a0)
      CstCleanupQueueViewBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    3914:	|                                                                                          move.w 78(sp),12(a0)
      CstCleanupQueueViewBuffer->starty = ystartdst; 
    391a:	|                                                                                          move.w 48(sp),14(a0)
    3920:	|                                                                                          move.w #-1,50(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    3926:	|                                                                                          clr.w d2
    3928:	'----------------------------------------------------------------------------------------- bra.w 30ec <CstScaleSprite+0x1e4>

0000392c <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    392c:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    392e:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    3934:	move.l 8(sp),d0
    3938:	movea.l (sp),a0
    393a:	move.l d0,128(a0)
}
    393e:	nop
    3940:	addq.l #4,sp
    3942:	rts

00003944 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3944:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3948:	move.l 1cdb6 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3950:	move.l 1cdba <CstDrawBuffer>,d0
    3956:	move.l d0,1cdb6 <CstViewBuffer>
  CstDrawBuffer = tmp;
    395c:	move.l 16(sp),1cdba <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3964:	move.l 1cdbe <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    396c:	move.l 1cdc2 <CstCleanupQueueDrawBuffer>,d0
    3972:	move.l d0,1cdbe <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3978:	move.l 12(sp),1cdc2 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3980:	move.l 1cdb2 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3988:	move.l 1cdb6 <CstViewBuffer>,d0
    398e:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3992:	move.l 4(sp),d0
    3996:	clr.w d0
    3998:	swap d0
    399a:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    399e:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    39a2:	movea.w #118,a0
    39a6:	adda.l 8(sp),a0
    39aa:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    39ac:	movea.w #114,a0
    39b0:	adda.l 8(sp),a0
    39b4:	move.w 2(sp),(a0)

  ptr +=  40*256;
    39b8:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    39c0:	move.l 4(sp),d0
    39c4:	clr.w d0
    39c6:	swap d0
    39c8:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    39cc:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    39d0:	movea.w #126,a0
    39d4:	adda.l 8(sp),a0
    39d8:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    39da:	movea.w #122,a0
    39de:	adda.l 8(sp),a0
    39e2:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    39e6:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    39ee:	move.l 4(sp),d0
    39f2:	clr.w d0
    39f4:	swap d0
    39f6:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    39fa:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    39fe:	movea.l 8(sp),a0
    3a02:	lea 134(a0),a0
    3a06:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    3a08:	movea.l 8(sp),a0
    3a0c:	lea 130(a0),a0
    3a10:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3a14:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3a1c:	move.l 4(sp),d0
    3a20:	clr.w d0
    3a22:	swap d0
    3a24:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3a28:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3a2c:	movea.l 8(sp),a0
    3a30:	lea 142(a0),a0
    3a34:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    3a36:	movea.l 8(sp),a0
    3a3a:	lea 138(a0),a0
    3a3e:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3a42:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3a4a:	move.l 4(sp),d0
    3a4e:	clr.w d0
    3a50:	swap d0
    3a52:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3a56:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3a5a:	movea.l 8(sp),a0
    3a5e:	lea 150(a0),a0
    3a62:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3a64:	movea.l 8(sp),a0
    3a68:	lea 146(a0),a0
    3a6c:	move.w 2(sp),(a0)

}
    3a70:	nop
    3a72:	lea 20(sp),sp
    3a76:	rts

00003a78 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3a78:	          lea -68(sp),sp
    3a7c:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3a7e:	          pea 184da <PutChar+0x38a>
    3a84:	          jsr 176ae <KPrintF>
    3a8a:	          addq.l #4,sp

  width = width / 8;
    3a8c:	          move.l 76(sp),d0
    3a90:	      ,-- bpl.s 3a94 <CstReserveBackdrop+0x1c>
    3a92:	      |   addq.l #7,d0
    3a94:	      '-> asr.l #3,d0
    3a96:	          move.l d0,76(sp)

  if( width < 40) 
    3a9a:	          moveq #39,d0
    3a9c:	          cmp.l 76(sp),d0
    3aa0:	      ,-- blt.s 3ab6 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3aa2:	      |   pea 184f4 <PutChar+0x3a4>
    3aa8:	      |   jsr 176ae <KPrintF>
    3aae:	      |   addq.l #4,sp
    return FALSE;
    3ab0:	      |   clr.w d0
    3ab2:	,-----|-- bra.w 3df2 <CstReserveBackdrop+0x37a>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3ab6:	|     '-> pea 18532 <PutChar+0x3e2>
    3abc:	|         jsr 176ae <KPrintF>
    3ac2:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3ac4:	|         move.l 76(sp),-(sp)
    3ac8:	|         jsr 10ca <CstCreateCopperlist>
    3ace:	|         addq.l #4,sp
    3ad0:	|         move.l d0,1cdb2 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3ad6:	|         pea 18552 <PutChar+0x402>
    3adc:	|         jsr 176ae <KPrintF>
    3ae2:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    3ae4:	|         move.l 76(sp),d1
    3ae8:	|         move.l 80(sp),d0
    3aec:	|         muls.w d1,d0
    3aee:	|         move.w d0,1cda8 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    3af4:	|         move.w 1cda8 <CstBackdropSizePlane>,d1
    3afa:	|         move.w d1,d0
    3afc:	|         add.w d0,d0
    3afe:	|         add.w d0,d0
    3b00:	|         add.w d1,d0
    3b02:	|         move.w d0,1cda6 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    3b08:	|         move.w 1cda6 <CstBackdropSize>,d0
    3b0e:	|         move.w d0,d0
    3b10:	|         andi.l #65535,d0
    3b16:	|         move.l d0,60(sp)
    3b1a:	|         moveq #2,d1
    3b1c:	|         move.l d1,56(sp)
    3b20:	|         move.l 1ce8a <SysBase>,d0
    3b26:	|         movea.l d0,a6
    3b28:	|         move.l 60(sp),d0
    3b2c:	|         move.l 56(sp),d1
    3b30:	|         jsr -684(a6)
    3b34:	|         move.l d0,52(sp)
    3b38:	|         move.l 52(sp),d0
    3b3c:	|         move.l d0,1cdaa <CstBackDrop>
  if( !CstBackDrop)
    3b42:	|         move.l 1cdaa <CstBackDrop>,d0
    3b48:	|     ,-- bne.s 3b5e <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3b4a:	|     |   pea 18579 <PutChar+0x429>
    3b50:	|     |   jsr 176ae <KPrintF>
    3b56:	|     |   addq.l #4,sp
    return FALSE;  
    3b58:	|     |   clr.w d0
    3b5a:	+-----|-- bra.w 3df2 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3b5e:	|     '-> pea 185b1 <PutChar+0x461>
    3b64:	|         jsr 176ae <KPrintF>
    3b6a:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3b6c:	|         move.l 1cdaa <CstBackDrop>,68(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3b74:	|         clr.l 64(sp)
    3b78:	|     ,-- bra.s 3b8e <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3b7a:	|  ,--|-> move.l 68(sp),d0
    3b7e:	|  |  |   move.l d0,d1
    3b80:	|  |  |   addq.l #4,d1
    3b82:	|  |  |   move.l d1,68(sp)
    3b86:	|  |  |   movea.l d0,a0
    3b88:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3b8a:	|  |  |   addq.l #1,64(sp)
    3b8e:	|  |  '-> move.w 1cda6 <CstBackdropSize>,d0
    3b94:	|  |      lsr.w #2,d0
    3b96:	|  |      move.w d0,d0
    3b98:	|  |      andi.l #65535,d0
    3b9e:	|  |      cmp.l 64(sp),d0
    3ba2:	|  '----- bgt.s 3b7a <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3ba4:	|         move.w 1cda6 <CstBackdropSize>,d0
    3baa:	|         move.w d0,d0
    3bac:	|         andi.l #65535,d0
    3bb2:	|         move.l 76(sp),d1
    3bb6:	|         add.l d1,d1
    3bb8:	|         add.l d1,d0
    3bba:	|         move.l d0,48(sp)
    3bbe:	|         moveq #2,d0
    3bc0:	|         move.l d0,44(sp)
    3bc4:	|         move.l 1ce8a <SysBase>,d0
    3bca:	|         movea.l d0,a6
    3bcc:	|         move.l 48(sp),d0
    3bd0:	|         move.l 44(sp),d1
    3bd4:	|         jsr -684(a6)
    3bd8:	|         move.l d0,40(sp)
    3bdc:	|         move.l 40(sp),d0
    3be0:	|         move.l d0,1cdba <CstDrawBuffer>
  if( !CstDrawBuffer)
    3be6:	|         move.l 1cdba <CstDrawBuffer>,d0
    3bec:	|     ,-- bne.s 3c02 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3bee:	|     |   pea 185d7 <PutChar+0x487>
    3bf4:	|     |   jsr 176ae <KPrintF>
    3bfa:	|     |   addq.l #4,sp
    return FALSE;  
    3bfc:	|     |   clr.w d0
    3bfe:	+-----|-- bra.w 3df2 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3c02:	|     '-> pea 18611 <PutChar+0x4c1>
    3c08:	|         jsr 176ae <KPrintF>
    3c0e:	|         addq.l #4,sp
    
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3c10:	|         move.w 1cda6 <CstBackdropSize>,d0
    3c16:	|         move.w d0,d0
    3c18:	|         andi.l #65535,d0
    3c1e:	|         move.l 76(sp),d1
    3c22:	|         add.l d1,d1
    3c24:	|         add.l d1,d0
    3c26:	|         move.l d0,36(sp)
    3c2a:	|         moveq #2,d1
    3c2c:	|         move.l d1,32(sp)
    3c30:	|         move.l 1ce8a <SysBase>,d0
    3c36:	|         movea.l d0,a6
    3c38:	|         move.l 36(sp),d0
    3c3c:	|         move.l 32(sp),d1
    3c40:	|         jsr -684(a6)
    3c44:	|         move.l d0,28(sp)
    3c48:	|         move.l 28(sp),d0
    3c4c:	|         move.l d0,1cdb6 <CstViewBuffer>
  if( !CstViewBuffer)
    3c52:	|         move.l 1cdb6 <CstViewBuffer>,d0
    3c58:	|     ,-- bne.s 3c6e <CstReserveBackdrop+0x1f6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3c5a:	|     |   pea 18639 <PutChar+0x4e9>
    3c60:	|     |   jsr 176ae <KPrintF>
    3c66:	|     |   addq.l #4,sp
    return FALSE;  
    3c68:	|     |   clr.w d0
    3c6a:	+-----|-- bra.w 3df2 <CstReserveBackdrop+0x37a>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3c6e:	|     '-> pea 18673 <PutChar+0x523>
    3c74:	|         jsr 176ae <KPrintF>
    3c7a:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3c7c:	|         move.l 1cdba <CstDrawBuffer>,d1
    3c82:	|         move.l 76(sp),d0
    3c86:	|     ,-- bpl.s 3c8a <CstReserveBackdrop+0x212>
    3c88:	|     |   addq.l #3,d0
    3c8a:	|     '-> asr.l #2,d0
    3c8c:	|         add.l d0,d0
    3c8e:	|         add.l d0,d0
    3c90:	|         add.l d1,d0
    3c92:	|         move.l d0,1cdba <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3c98:	|         move.l 1cdb6 <CstViewBuffer>,d1
    3c9e:	|         move.l 76(sp),d0
    3ca2:	|     ,-- bpl.s 3ca6 <CstReserveBackdrop+0x22e>
    3ca4:	|     |   addq.l #3,d0
    3ca6:	|     '-> asr.l #2,d0
    3ca8:	|         add.l d0,d0
    3caa:	|         add.l d0,d0
    3cac:	|         add.l d1,d0
    3cae:	|         move.l d0,1cdb6 <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3cb4:	|         move.l #5200,24(sp)
    3cbc:	|         moveq #2,d0
    3cbe:	|         move.l d0,20(sp)
    3cc2:	|         move.l 1ce8a <SysBase>,d0
    3cc8:	|         movea.l d0,a6
    3cca:	|         move.l 24(sp),d0
    3cce:	|         move.l 20(sp),d1
    3cd2:	|         jsr -684(a6)
    3cd6:	|         move.l d0,16(sp)
    3cda:	|         move.l 16(sp),d0
    3cde:	|         move.l d0,1cdd2 <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3ce4:	|         move.l #5600,12(sp)
    3cec:	|         moveq #2,d1
    3cee:	|         move.l d1,8(sp)
    3cf2:	|         move.l 1ce8a <SysBase>,d0
    3cf8:	|         movea.l d0,a6
    3cfa:	|         move.l 12(sp),d0
    3cfe:	|         move.l 8(sp),d1
    3d02:	|         jsr -684(a6)
    3d06:	|         move.l d0,4(sp)
    3d0a:	|         move.l 4(sp),d0
    3d0e:	|         move.l d0,1cdd6 <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3d14:	|         move.l 1cdaa <CstBackDrop>,d0
    3d1a:	|         clr.l -(sp)
    3d1c:	|         pea 5 <_start+0x5>
    3d20:	|         pea 100 <copyString+0x48>
    3d24:	|         pea 140 <decodeFilename+0x28>
    3d28:	|         pea 1869b <PutChar+0x54b>
    3d2e:	|         move.l d0,-(sp)
    3d30:	|         jsr 17796 <debug_register_bitmap>
    3d36:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3d3a:	|         move.l 80(sp),d0
    3d3e:	|         movea.w d0,a1
    3d40:	|         move.l 76(sp),d0
    3d44:	|         lsl.w #3,d0
    3d46:	|         movea.w d0,a0
    3d48:	|         move.l 1cdba <CstDrawBuffer>,d0
    3d4e:	|         clr.l -(sp)
    3d50:	|         pea 5 <_start+0x5>
    3d54:	|         move.l a1,-(sp)
    3d56:	|         move.l a0,-(sp)
    3d58:	|         pea 186ab <PutChar+0x55b>
    3d5e:	|         move.l d0,-(sp)
    3d60:	|         jsr 17796 <debug_register_bitmap>
    3d66:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3d6a:	|         move.l 80(sp),d0
    3d6e:	|         movea.w d0,a1
    3d70:	|         move.l 76(sp),d0
    3d74:	|         lsl.w #3,d0
    3d76:	|         movea.w d0,a0
    3d78:	|         move.l 1cdb6 <CstViewBuffer>,d0
    3d7e:	|         clr.l -(sp)
    3d80:	|         pea 5 <_start+0x5>
    3d84:	|         move.l a1,-(sp)
    3d86:	|         move.l a0,-(sp)
    3d88:	|         pea 186ba <PutChar+0x56a>
    3d8e:	|         move.l d0,-(sp)
    3d90:	|         jsr 17796 <debug_register_bitmap>
    3d96:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3d9a:	|         move.l 1cdb2 <CstCopperList>,d0
    3da0:	|     ,-- beq.s 3db2 <CstReserveBackdrop+0x33a>
    3da2:	|     |   move.l 1cdba <CstDrawBuffer>,d0
    3da8:	|     +-- beq.s 3db2 <CstReserveBackdrop+0x33a>
    3daa:	|     |   move.l 1cdb6 <CstViewBuffer>,d0
    3db0:	|  ,--|-- bne.s 3dc4 <CstReserveBackdrop+0x34c>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3db2:	|  |  '-> pea 186c9 <PutChar+0x579>
    3db8:	|  |      jsr 176ae <KPrintF>
    3dbe:	|  |      addq.l #4,sp
    return FALSE;
    3dc0:	|  |      clr.w d0
    3dc2:	+--|----- bra.s 3df2 <CstReserveBackdrop+0x37a>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3dc4:	|  '----> pea 186f6 <PutChar+0x5a6>
    3dca:	|         jsr 176ae <KPrintF>
    3dd0:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3dd2:	|         move.l 1cdb2 <CstCopperList>,d0
    3dd8:	|         move.l d0,-(sp)
    3dda:	|         jsr 392c <CstSetCl>
    3de0:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3de2:	|         pea 1871d <PutChar+0x5cd>
    3de8:	|         jsr 176ae <KPrintF>
    3dee:	|         addq.l #4,sp
  return TRUE;
    3df0:	|         moveq #1,d0

}
    3df2:	'-------> movea.l (sp)+,a6
    3df4:	          lea 68(sp),sp
    3df8:	          rts

00003dfa <CstUnfreeze>:

void CstUnfreeze() {
    3dfa:	       lea -52(sp),sp
    3dfe:	       move.l a6,-(sp)
    3e00:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3e02:	       pea 18740 <PutChar+0x5f0>
    3e08:	       jsr 176ae <KPrintF>
    3e0e:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3e10:	       move.l 1cdde <winWidth>,d0
    3e16:	       lsr.l #3,d0
    3e18:	       move.l d0,d1
    3e1a:	       move.l 1cde2 <winHeight>,d0
    3e20:	       move.l d0,d0
    3e22:	       muls.w d0,d1
    3e24:	       move.w d1,d0
    3e26:	       add.w d0,d0
    3e28:	       add.w d0,d0
    3e2a:	       move.w d0,d2
    3e2c:	       add.w d1,d2
    3e2e:	       move.w d2,46(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3e32:	       move.l #14675968,42(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3e3a:	       move.l 1cde2 <winHeight>,d0
    3e40:	       move.l d0,d0
    3e42:	       movea.w d0,a1
    3e44:	       move.l 1cdde <winWidth>,d0
    3e4a:	       move.l d0,d0
    3e4c:	       movea.w d0,a0
    3e4e:	       move.l 1cdae <CstBackDropBackup>,d0
    3e54:	       clr.l -(sp)
    3e56:	       pea 5 <_start+0x5>
    3e5a:	       move.l a1,-(sp)
    3e5c:	       move.l a0,-(sp)
    3e5e:	       pea 1835d <PutChar+0x20d>
    3e64:	       move.l d0,-(sp)
    3e66:	       jsr 17796 <debug_register_bitmap>
    3e6c:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3e70:	       move.l 1cdae <CstBackDropBackup>,56(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3e78:	       move.l 1cdaa <CstBackDrop>,52(sp)
  for(int i=0;i<size/4;i++) 
    3e80:	       clr.l 48(sp)
    3e84:	   ,-- bra.s 3eaa <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3e86:	,--|-> move.l 56(sp),d1
    3e8a:	|  |   move.l d1,d0
    3e8c:	|  |   addq.l #4,d0
    3e8e:	|  |   move.l d0,56(sp)
    3e92:	|  |   move.l 52(sp),d0
    3e96:	|  |   move.l d0,d2
    3e98:	|  |   addq.l #4,d2
    3e9a:	|  |   move.l d2,52(sp)
    3e9e:	|  |   movea.l d1,a0
    3ea0:	|  |   move.l (a0),d1
    3ea2:	|  |   movea.l d0,a0
    3ea4:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3ea6:	|  |   addq.l #1,48(sp)
    3eaa:	|  '-> move.w 46(sp),d0
    3eae:	|      lsr.w #2,d0
    3eb0:	|      move.w d0,d0
    3eb2:	|      andi.l #65535,d0
    3eb8:	|      cmp.l 48(sp),d0
    3ebc:	'----- bgt.s 3e86 <CstUnfreeze+0x8c>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3ebe:	       move.l 1cdc2 <CstCleanupQueueDrawBuffer>,38(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    3ec6:	       moveq #20,d0
    3ec8:	       move.l d0,34(sp)
    3ecc:	       clr.l 30(sp)
    3ed0:	       move.l 1ce8a <SysBase>,d0
    3ed6:	       movea.l d0,a6
    3ed8:	       move.l 34(sp),d0
    3edc:	       move.l 30(sp),d1
    3ee0:	       jsr -684(a6)
    3ee4:	       move.l d0,26(sp)
    3ee8:	       move.l 26(sp),d0
    3eec:	       move.l d0,1cdc2 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    3ef2:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    3ef8:	       move.l 38(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    3efe:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    3f04:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    3f06:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    3f0c:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    3f10:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    3f16:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    3f1a:	       move.l 1cdde <winWidth>,d0
    3f20:	       lsr.l #4,d0
    3f22:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    3f28:	       move.l d0,d0
    3f2a:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    3f2e:	       move.l 1cde2 <winHeight>,d0
    3f34:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    3f3a:	       move.l d0,d0
    3f3c:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3f40:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    3f46:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    3f4a:	       movea.l 1cdc2 <CstCleanupQueueDrawBuffer>,a0
    3f50:	       clr.w 14(a0)
  next = CstCleanupQueueViewBuffer;
    3f54:	       move.l 1cdbe <CstCleanupQueueViewBuffer>,38(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    3f5c:	       moveq #20,d2
    3f5e:	       move.l d2,22(sp)
    3f62:	       clr.l 18(sp)
    3f66:	       move.l 1ce8a <SysBase>,d0
    3f6c:	       movea.l d0,a6
    3f6e:	       move.l 22(sp),d0
    3f72:	       move.l 18(sp),d1
    3f76:	       jsr -684(a6)
    3f7a:	       move.l d0,14(sp)
    3f7e:	       move.l 14(sp),d0
    3f82:	       move.l d0,1cdbe <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    3f88:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    3f8e:	       move.l 38(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    3f94:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    3f9a:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    3f9c:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    3fa2:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    3fa6:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    3fac:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    3fb0:	       move.l 1cdde <winWidth>,d0
    3fb6:	       lsr.l #4,d0
    3fb8:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    3fbe:	       move.l d0,d0
    3fc0:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    3fc4:	       move.l 1cde2 <winHeight>,d0
    3fca:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    3fd0:	       move.l d0,d0
    3fd2:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    3fd6:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    3fdc:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0;  
    3fe0:	       movea.l 1cdbe <CstCleanupQueueViewBuffer>,a0
    3fe6:	       clr.w 14(a0)
  
  if( CstBackDropBackup) {
    3fea:	       move.l 1cdae <CstBackDropBackup>,d0
    3ff0:	   ,-- beq.s 4018 <CstUnfreeze+0x21e>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    3ff2:	   |   pea 1876b <PutChar+0x61b>
    3ff8:	   |   jsr 176ae <KPrintF>
    3ffe:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    4000:	   |   move.l 1cdae <CstBackDropBackup>,10(sp)
    4008:	   |   move.l 1ce8a <SysBase>,d0
    400e:	   |   movea.l d0,a6
    4010:	   |   movea.l 10(sp),a1
    4014:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    4018:	   '-> pea 1878f <PutChar+0x63f>
    401e:	       jsr 176ae <KPrintF>
    4024:	       addq.l #4,sp

}
    4026:	       nop
    4028:	       move.l (sp)+,d2
    402a:	       movea.l (sp)+,a6
    402c:	       lea 52(sp),sp
    4030:	       rts

00004032 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    4032:	       lea -28(sp),sp
    4036:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    403a:	       move.l 52(sp),-(sp)
    403e:	       jsr 15cb8 <stringWidth>
    4044:	       addq.l #4,sp
    4046:	       asr.l #1,d0
    4048:	       move.l d0,-(sp)
    404a:	       jsr 17ae0 <__floatsisf>
    4050:	       addq.l #4,sp
    4052:	       move.l d0,d1
    4054:	       move.l 1c826 <cameraZoom>,d0
    405a:	       move.l d0,-(sp)
    405c:	       move.l d1,-(sp)
    405e:	       jsr 17996 <__divsf3>
    4064:	       addq.l #8,sp
    4066:	       move.l d0,-(sp)
    4068:	       jsr 17a78 <__fixsfsi>
    406e:	       addq.l #4,sp
    4070:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    4074:	       move.l 56(sp),d0
    4078:	       sub.l 44(sp),d0
    407c:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    4080:	       move.l 56(sp),d0
    4084:	       add.l 44(sp),d0
    4088:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    408c:	       moveq #12,d0
    408e:	       move.l d0,32(sp)
    4092:	       clr.l 28(sp)
    4096:	       move.l 1ce8a <SysBase>,d0
    409c:	       movea.l d0,a6
    409e:	       move.l 32(sp),d0
    40a2:	       move.l 28(sp),d1
    40a6:	       jsr -684(a6)
    40aa:	       move.l d0,24(sp)
    40ae:	       move.l 24(sp),d0
    40b2:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    40b6:	       movea.l 1cdda <speech>,a0
    40bc:	       move.l 4(a0),d0
    40c0:	       movea.l 20(sp),a0
    40c4:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    40c8:	       move.l 52(sp),-(sp)
    40cc:	       jsr b8 <copyString>
    40d2:	       addq.l #4,sp
    40d4:	       movea.l 20(sp),a0
    40d8:	       move.l d0,(a0)
	newLine -> x = xx1;
    40da:	       movea.l 20(sp),a0
    40de:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    40e4:	       movea.l 1cdda <speech>,a0
    40ea:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    40f0:	       moveq #4,d0
    40f2:	       cmp.l 40(sp),d0
    40f6:	   ,-- blt.s 4118 <addSpeechLine+0xe6>
    40f8:	   |   movea.l 60(sp),a0
    40fc:	   |   move.l (a0),d1
    40fe:	   |   moveq #5,d0
    4100:	   |   sub.l 40(sp),d0
    4104:	   |   cmp.l d1,d0
    4106:	   +-- ble.s 4118 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    4108:	   |   moveq #5,d0
    410a:	   |   sub.l 40(sp),d0
    410e:	   |   movea.l 60(sp),a0
    4112:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    4114:	,--|-- bra.w 4244 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    4118:	|  '-> move.l 36(sp),-(sp)
    411c:	|      jsr 17ae0 <__floatsisf>
    4122:	|      addq.l #4,sp
    4124:	|      move.l d0,d2
    4126:	|      move.l 1cdde <winWidth>,d0
    412c:	|      move.l d0,-(sp)
    412e:	|      jsr 17b08 <__floatunsisf>
    4134:	|      addq.l #4,sp
    4136:	|      move.l d0,d1
    4138:	|      move.l 1c826 <cameraZoom>,d0
    413e:	|      move.l d0,-(sp)
    4140:	|      move.l d1,-(sp)
    4142:	|      jsr 17996 <__divsf3>
    4148:	|      addq.l #8,sp
    414a:	|      move.l #1084227584,-(sp)
    4150:	|      move.l d0,-(sp)
    4152:	|      jsr 17dd4 <__subsf3>
    4158:	|      addq.l #8,sp
    415a:	|      move.l d0,-(sp)
    415c:	|      move.l d2,-(sp)
    415e:	|      jsr 17bc8 <__gesf2>
    4164:	|      addq.l #8,sp
    4166:	|      tst.l d0
    4168:	|  ,-- bge.s 416e <addSpeechLine+0x13c>
}
    416a:	+--|-- bra.w 4244 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    416e:	|  '-> movea.l 60(sp),a0
    4172:	|      move.l (a0),d0
    4174:	|      move.l d0,-(sp)
    4176:	|      jsr 17ae0 <__floatsisf>
    417c:	|      addq.l #4,sp
    417e:	|      move.l d0,-(sp)
    4180:	|      jsr 17a02 <__extendsfdf2>
    4186:	|      addq.l #4,sp
    4188:	|      move.l d0,d4
    418a:	|      move.l d1,d5
    418c:	|      move.l 1cdde <winWidth>,d0
    4192:	|      move.l d0,-(sp)
    4194:	|      jsr 17b08 <__floatunsisf>
    419a:	|      addq.l #4,sp
    419c:	|      move.l d0,d1
    419e:	|      move.l 1c826 <cameraZoom>,d0
    41a4:	|      move.l d0,-(sp)
    41a6:	|      move.l d1,-(sp)
    41a8:	|      jsr 17996 <__divsf3>
    41ae:	|      addq.l #8,sp
    41b0:	|      move.l d0,-(sp)
    41b2:	|      jsr 17a02 <__extendsfdf2>
    41b8:	|      addq.l #4,sp
    41ba:	|      clr.l -(sp)
    41bc:	|      move.l #1075052544,-(sp)
    41c2:	|      move.l d1,-(sp)
    41c4:	|      move.l d0,-(sp)
    41c6:	|      jsr 17d72 <__subdf3>
    41cc:	|      lea 16(sp),sp
    41d0:	|      move.l d0,d2
    41d2:	|      move.l d1,d3
    41d4:	|      move.l 36(sp),-(sp)
    41d8:	|      jsr 17aa0 <__floatsidf>
    41de:	|      addq.l #4,sp
    41e0:	|      move.l d1,-(sp)
    41e2:	|      move.l d0,-(sp)
    41e4:	|      move.l d3,-(sp)
    41e6:	|      move.l d2,-(sp)
    41e8:	|      jsr 17d72 <__subdf3>
    41ee:	|      lea 16(sp),sp
    41f2:	|      move.l d1,-(sp)
    41f4:	|      move.l d0,-(sp)
    41f6:	|      move.l d5,-(sp)
    41f8:	|      move.l d4,-(sp)
    41fa:	|      jsr 17bfe <__gtdf2>
    4200:	|      lea 16(sp),sp
    4204:	|      tst.l d0
    4206:	|  ,-- bgt.s 420a <addSpeechLine+0x1d8>
}
    4208:	+--|-- bra.s 4244 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    420a:	|  '-> move.l 1cdde <winWidth>,d0
    4210:	|      move.l d0,-(sp)
    4212:	|      jsr 17b08 <__floatunsisf>
    4218:	|      addq.l #4,sp
    421a:	|      move.l d0,d1
    421c:	|      move.l 1c826 <cameraZoom>,d0
    4222:	|      move.l d0,-(sp)
    4224:	|      move.l d1,-(sp)
    4226:	|      jsr 17996 <__divsf3>
    422c:	|      addq.l #8,sp
    422e:	|      move.l d0,-(sp)
    4230:	|      jsr 17a78 <__fixsfsi>
    4236:	|      addq.l #4,sp
    4238:	|      subq.l #5,d0
    423a:	|      sub.l 36(sp),d0
    423e:	|      movea.l 60(sp),a0
    4242:	|      move.l d0,(a0)
}
    4244:	'----> nop
    4246:	       movem.l (sp)+,d2-d5/a6
    424a:	       lea 28(sp),sp
    424e:	       rts

00004250 <initSpeech>:


void initSpeech () {
    4250:	       lea -12(sp),sp
    4254:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    4256:	       moveq #20,d0
    4258:	       move.l d0,12(sp)
    425c:	       clr.l 8(sp)
    4260:	       move.l 1ce8a <SysBase>,d0
    4266:	       movea.l d0,a6
    4268:	       move.l 12(sp),d0
    426c:	       move.l 8(sp),d1
    4270:	       jsr -684(a6)
    4274:	       move.l d0,4(sp)
    4278:	       move.l 4(sp),d0
    427c:	       move.l d0,1cdda <speech>
	if (speech) {
    4282:	       move.l 1cdda <speech>,d0
    4288:	,----- beq.s 42b4 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    428a:	|      movea.l 1cdda <speech>,a0
    4290:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    4292:	|      movea.l 1cdda <speech>,a0
    4298:	|      clr.l 4(a0)
		speech -> speechY = 0;
    429c:	|      movea.l 1cdda <speech>,a0
    42a2:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    42a6:	|      movea.l 1cdda <speech>,a0
    42ac:	|      moveq #-1,d0
    42ae:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    42b2:	|  ,-- bra.s 42c2 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    42b4:	'--|-> pea 187a5 <PutChar+0x655>
    42ba:	   |   jsr 176ae <KPrintF>
    42c0:	   |   addq.l #4,sp
}
    42c2:	   '-> nop
    42c4:	       movea.l (sp)+,a6
    42c6:	       lea 12(sp),sp
    42ca:	       rts

000042cc <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    42cc:	       movea.l 1cdda <speech>,a0
    42d2:	       move.l 4(a0),d0
    42d6:	,----- beq.s 42e4 <isThereAnySpeechGoingOn+0x18>
    42d8:	|      movea.l 1cdda <speech>,a0
    42de:	|      move.l 16(a0),d0
    42e2:	|  ,-- bra.s 42e6 <isThereAnySpeechGoingOn+0x1a>
    42e4:	'--|-> moveq #-1,d0
}
    42e6:	   '-> rts

000042e8 <killAllSpeech>:

void killAllSpeech () {
    42e8:	       lea -12(sp),sp
    42ec:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    42ee:	       movea.l 1cdda <speech>,a0
    42f4:	       move.l 12(a0),d0
    42f8:	       moveq #-1,d1
    42fa:	       cmp.l d0,d1
    42fc:	   ,-- beq.s 430a <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    42fe:	   |   movea.l 1cdda <speech>,a0
    4304:	   |   moveq #-1,d0
    4306:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    430a:	   '-> movea.l 1cdda <speech>,a0
    4310:	       move.l (a0),d0
    4312:	,----- beq.w 439e <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    4316:	|      movea.l 1cdda <speech>,a0
    431c:	|      move.l (a0),d1
    431e:	|      lea -132(sp),sp
    4322:	|      move.l sp,d0
    4324:	|      movea.w #132,a0
    4328:	|      move.l a0,-(sp)
    432a:	|      move.l d1,-(sp)
    432c:	|      move.l d0,-(sp)
    432e:	|      jsr 17662 <memcpy>
    4334:	|      lea 12(sp),sp
    4338:	|      jsr aeb4 <makeSilent>
    433e:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    4342:	|      movea.l 1cdda <speech>,a0
    4348:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    434a:	+----- bra.s 439e <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    434c:	|  ,-> movea.l 1cdda <speech>,a0
    4352:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    4358:	|  |   movea.l 1cdda <speech>,a0
    435e:	|  |   movea.l 4(a0),a1
    4362:	|  |   movea.l 1cdda <speech>,a0
    4368:	|  |   move.l 4(a1),d0
    436c:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    4370:	|  |   movea.l 12(sp),a0
    4374:	|  |   move.l (a0),8(sp)
    4378:	|  |   move.l 1ce8a <SysBase>,d0
    437e:	|  |   movea.l d0,a6
    4380:	|  |   movea.l 8(sp),a1
    4384:	|  |   jsr -690(a6)
		FreeVec(killMe);
    4388:	|  |   move.l 12(sp),4(sp)
    438e:	|  |   move.l 1ce8a <SysBase>,d0
    4394:	|  |   movea.l d0,a6
    4396:	|  |   movea.l 4(sp),a1
    439a:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    439e:	'--|-> movea.l 1cdda <speech>,a0
    43a4:	   |   move.l 4(a0),d0
    43a8:	   '-- bne.s 434c <killAllSpeech+0x64>
	}
}
    43aa:	       nop
    43ac:	       nop
    43ae:	       movea.l (sp)+,a6
    43b0:	       lea 12(sp),sp
    43b4:	       rts

000043b6 <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    43b6:	pea 2 <_start+0x2>
    43ba:	move.l 8(sp),-(sp)
    43be:	jsr 4516 <setFrames>
    43c4:	addq.l #8,sp
}
    43c6:	nop
    43c8:	rts

000043ca <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    43ca:	       lea -52(sp),sp
    43ce:	       move.l a6,-(sp)
    43d0:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    43d2:	       movea.l 64(sp),a0
    43d6:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    43dc:	       move.l 1c7fe <speechSpeed>,d0
    43e2:	       move.l 68(sp),-(sp)
    43e6:	       move.l d0,-(sp)
    43e8:	       jsr a46 <putFloat>
    43ee:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    43f0:	       movea.l 64(sp),a0
    43f4:	       move.l 8(a0),d0
    43f8:	       move.l 68(sp),-(sp)
    43fc:	       move.l d0,-(sp)
    43fe:	       jsr 8d0 <put2bytes>
    4404:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    4406:	       movea.l 64(sp),a0
    440a:	       move.l 16(a0),d0
    440e:	       move.l 68(sp),-(sp)
    4412:	       move.l d0,-(sp)
    4414:	       jsr 8d0 <put2bytes>
    441a:	       addq.l #8,sp
		if (sS -> currentTalker) {
    441c:	       movea.l 64(sp),a0
    4420:	       move.l (a0),d0
    4422:	   ,-- beq.s 4466 <saveSpeech+0x9c>
			FPutC (fp, 1);
    4424:	   |   move.l 68(sp),40(sp)
    442a:	   |   moveq #1,d0
    442c:	   |   move.l d0,36(sp)
    4430:	   |   move.l 1ce92 <DOSBase>,d0
    4436:	   |   movea.l d0,a6
    4438:	   |   move.l 40(sp),d1
    443c:	   |   move.l 36(sp),d2
    4440:	   |   jsr -312(a6)
    4444:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    4448:	   |   movea.l 64(sp),a0
    444c:	   |   movea.l (a0),a0
    444e:	   |   movea.l 114(a0),a0
    4452:	   |   move.l 4(a0),d0
    4456:	   |   move.l 68(sp),-(sp)
    445a:	   |   move.l d0,-(sp)
    445c:	   |   jsr 8d0 <put2bytes>
    4462:	   |   addq.l #8,sp
    4464:	,--|-- bra.s 44e2 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    4466:	|  '-> move.l 68(sp),52(sp)
    446c:	|      clr.l 48(sp)
    4470:	|      move.l 1ce92 <DOSBase>,d0
    4476:	|      movea.l d0,a6
    4478:	|      move.l 52(sp),d1
    447c:	|      move.l 48(sp),d2
    4480:	|      jsr -312(a6)
    4484:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    4488:	+----- bra.s 44e2 <saveSpeech+0x118>
			FPutC (fp, 1);
    448a:	|  ,-> move.l 68(sp),16(sp)
    4490:	|  |   moveq #1,d0
    4492:	|  |   move.l d0,12(sp)
    4496:	|  |   move.l 1ce92 <DOSBase>,d0
    449c:	|  |   movea.l d0,a6
    449e:	|  |   move.l 16(sp),d1
    44a2:	|  |   move.l 12(sp),d2
    44a6:	|  |   jsr -312(a6)
    44aa:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    44ae:	|  |   movea.l 56(sp),a0
    44b2:	|  |   move.l (a0),d0
    44b4:	|  |   move.l 68(sp),-(sp)
    44b8:	|  |   move.l d0,-(sp)
    44ba:	|  |   jsr bd8 <writeString>
    44c0:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    44c2:	|  |   movea.l 56(sp),a0
    44c6:	|  |   move.l 8(a0),d0
    44ca:	|  |   move.l 68(sp),-(sp)
    44ce:	|  |   move.l d0,-(sp)
    44d0:	|  |   jsr 8d0 <put2bytes>
    44d6:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    44d8:	|  |   movea.l 56(sp),a0
    44dc:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    44e2:	'--|-> tst.l 56(sp)
    44e6:	   '-- bne.s 448a <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    44e8:	       move.l 68(sp),28(sp)
    44ee:	       clr.l 24(sp)
    44f2:	       move.l 1ce92 <DOSBase>,d0
    44f8:	       movea.l d0,a6
    44fa:	       move.l 28(sp),d1
    44fe:	       move.l 24(sp),d2
    4502:	       jsr -312(a6)
    4506:	       move.l d0,20(sp)
}
    450a:	       nop
    450c:	       move.l (sp)+,d2
    450e:	       movea.l (sp)+,a6
    4510:	       lea 52(sp),sp
    4514:	       rts

00004516 <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    4516:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    4518:	movea.l 8(sp),a0
    451c:	movea.l 80(a0),a0
    4520:	move.l (a0),d2
    4522:	movea.l 8(sp),a0
    4526:	movea.l 80(a0),a0
    452a:	move.l 4(a0),d0
    452e:	move.l 12(sp),-(sp)
    4532:	move.l d0,-(sp)
    4534:	jsr 1803a <__mulsi3>
    453a:	addq.l #8,sp
    453c:	move.l d0,d1
    453e:	movea.l 8(sp),a0
    4542:	move.l 106(a0),d0
    4546:	add.l d1,d0
    4548:	add.l d0,d0
    454a:	add.l d0,d0
    454c:	movea.l d2,a0
    454e:	adda.l d0,a0
    4550:	move.l (a0),d0
    4552:	movea.l 8(sp),a0
    4556:	move.l d0,72(a0)
}
    455a:	nop
    455c:	move.l (sp)+,d2
    455e:	rts

00004560 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    4560:	       lea -20(sp),sp
    4564:	       move.l d2,-(sp)
    4566:	       move.l 40(sp),d0
    456a:	       move.w d0,d0
    456c:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    4570:	       movea.l 1cdda <speech>,a0
    4576:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    457c:	       move.l 32(sp),-(sp)
    4580:	       jsr a974 <findPerson>
    4586:	       addq.l #4,sp
    4588:	       move.l d0,16(sp)
    if (thisPerson) {
    458c:	   ,-- beq.s 45b2 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    458e:	   |   movea.w 6(sp),a0
    4592:	   |   move.l a0,-(sp)
    4594:	   |   move.l 40(sp),-(sp)
    4598:	   |   move.l 24(sp),-(sp)
    459c:	   |   move.l 40(sp),-(sp)
    45a0:	   |   jsr 4678 <wrapSpeechPerson>
    45a6:	   |   lea 16(sp),sp
    45aa:	   |   move.l d0,20(sp)
    45ae:	,--|-- bra.w 466c <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    45b2:	|  '-> move.l 32(sp),-(sp)
    45b6:	|      jsr 15e90 <getRegionForObject>
    45bc:	|      addq.l #4,sp
    45be:	|      move.l d0,12(sp)
        if (thisRegion) {
    45c2:	|  ,-- beq.s 462e <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    45c4:	|  |   movea.l 12(sp),a0
    45c8:	|  |   movea.l 28(a0),a0
    45cc:	|  |   move.l 28(a0),d0
    45d0:	|  |   movea.l 12(sp),a0
    45d4:	|  |   movea.l 4(a0),a1
    45d8:	|  |   movea.l 12(sp),a0
    45dc:	|  |   movea.l 28(a0),a0
    45e0:	|  |   move.l 20(a0),d1
    45e4:	|  |   movea.l a1,a0
    45e6:	|  |   suba.l d1,a0
    45e8:	|  |   move.l 1cf44 <cameraY>,d1
    45ee:	|  |   movea.l a0,a1
    45f0:	|  |   suba.l d1,a1
    45f2:	|  |   movea.l 12(sp),a0
    45f6:	|  |   move.l (a0),d2
    45f8:	|  |   movea.l 12(sp),a0
    45fc:	|  |   move.l 8(a0),d1
    4600:	|  |   add.l d2,d1
    4602:	|  |   move.l d1,d2
    4604:	|  |   asr.l #1,d2
    4606:	|  |   move.l 1cf40 <cameraX>,d1
    460c:	|  |   movea.l d2,a0
    460e:	|  |   suba.l d1,a0
    4610:	|  |   move.l 36(sp),-(sp)
    4614:	|  |   move.l d0,-(sp)
    4616:	|  |   move.l a1,-(sp)
    4618:	|  |   move.l a0,-(sp)
    461a:	|  |   move.l 44(sp),-(sp)
    461e:	|  |   jsr 4796 <wrapSpeechXY>
    4624:	|  |   lea 20(sp),sp
    4628:	|  |   move.l d0,20(sp)
    462c:	+--|-- bra.s 466c <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    462e:	|  '-> move.l 32(sp),-(sp)
    4632:	|      jsr d8e2 <findObjectType>
    4638:	|      addq.l #4,sp
    463a:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    463e:	|      movea.l 8(sp),a0
    4642:	|      move.l 28(a0),d1
    4646:	|      move.l 1cdde <winWidth>,d0
    464c:	|      lsr.l #1,d0
    464e:	|      move.l 36(sp),-(sp)
    4652:	|      move.l d1,-(sp)
    4654:	|      pea a <_start+0xa>
    4658:	|      move.l d0,-(sp)
    465a:	|      move.l 44(sp),-(sp)
    465e:	|      jsr 4796 <wrapSpeechXY>
    4664:	|      lea 20(sp),sp
    4668:	|      move.l d0,20(sp)
        }
    }
    return i;
    466c:	'----> move.l 20(sp),d0
}
    4670:	       move.l (sp)+,d2
    4672:	       lea 20(sp),sp
    4676:	       rts

00004678 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    4678:	    subq.l #8,sp
    467a:	    movem.l d2-d4,-(sp)
    467e:	    move.l 36(sp),d0
    4682:	    move.w d0,d0
    4684:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    4688:	    movea.l 28(sp),a0
    468c:	    movea.l 114(a0),a0
    4690:	    move.l 28(a0),d2
    4694:	    movea.l 28(sp),a0
    4698:	    move.l 4(a0),d3
    469c:	    move.l 1cf44 <cameraY>,d0
    46a2:	    move.l d0,-(sp)
    46a4:	    jsr 17ae0 <__floatsisf>
    46aa:	    addq.l #4,sp
    46ac:	    move.l d0,-(sp)
    46ae:	    move.l d3,-(sp)
    46b0:	    jsr 17dd4 <__subsf3>
    46b6:	    addq.l #8,sp
    46b8:	    move.l d0,d3
    46ba:	    movea.l 28(sp),a0
    46be:	    move.l 32(a0),d4
    46c2:	    movea.l 28(sp),a0
    46c6:	    move.l 20(a0),d1
    46ca:	    movea.l 28(sp),a0
    46ce:	    move.l 24(a0),d0
    46d2:	    sub.l d0,d1
    46d4:	    move.l d1,-(sp)
    46d6:	    jsr 17ae0 <__floatsisf>
    46dc:	    addq.l #4,sp
    46de:	    move.l d0,-(sp)
    46e0:	    move.l d4,-(sp)
    46e2:	    jsr 17b92 <__mulsf3>
    46e8:	    addq.l #8,sp
    46ea:	    move.l d0,-(sp)
    46ec:	    move.l d3,-(sp)
    46ee:	    jsr 17dd4 <__subsf3>
    46f4:	    addq.l #8,sp
    46f6:	    move.l d0,d3
    46f8:	    movea.l 28(sp),a0
    46fc:	    movea.l 114(a0),a0
    4700:	    move.l 20(a0),d0
    4704:	    move.l d0,-(sp)
    4706:	    jsr 17ae0 <__floatsisf>
    470c:	    addq.l #4,sp
    470e:	    move.l d0,-(sp)
    4710:	    move.l d3,-(sp)
    4712:	    jsr 17dd4 <__subsf3>
    4718:	    addq.l #8,sp
    471a:	    move.l d0,-(sp)
    471c:	    jsr 17a78 <__fixsfsi>
    4722:	    addq.l #4,sp
    4724:	    move.l d0,d4
    4726:	    movea.l 28(sp),a0
    472a:	    move.l (a0),d3
    472c:	    move.l 1cf40 <cameraX>,d0
    4732:	    move.l d0,-(sp)
    4734:	    jsr 17ae0 <__floatsisf>
    473a:	    addq.l #4,sp
    473c:	    move.l d0,-(sp)
    473e:	    move.l d3,-(sp)
    4740:	    jsr 17dd4 <__subsf3>
    4746:	    addq.l #8,sp
    4748:	    move.l d0,-(sp)
    474a:	    jsr 17a78 <__fixsfsi>
    4750:	    addq.l #4,sp
    4752:	    move.l 32(sp),-(sp)
    4756:	    move.l d2,-(sp)
    4758:	    move.l d4,-(sp)
    475a:	    move.l d0,-(sp)
    475c:	    move.l 40(sp),-(sp)
    4760:	    jsr 4796 <wrapSpeechXY>
    4766:	    lea 20(sp),sp
    476a:	    move.l d0,16(sp)
	if (animPerson) {
    476e:	    tst.w 14(sp)
    4772:	,-- beq.s 478a <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    4774:	|   move.l 28(sp),-(sp)
    4778:	|   jsr 43b6 <makeTalker>
    477e:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    4780:	|   movea.l 1cdda <speech>,a0
    4786:	|   move.l 28(sp),(a0)
	}
	return i;
    478a:	'-> move.l 16(sp),d0
}
    478e:	    movem.l (sp)+,d2-d4
    4792:	    addq.l #8,sp
    4794:	    rts

00004796 <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    4796:	                   lea -16(sp),sp
    479a:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    479e:	                   clr.l 16(sp)
    killAllSpeech();
    47a2:	                   jsr 42e8 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    47a8:	                   move.l 36(sp),-(sp)
    47ac:	                   jsr 140ba <strlen>
    47b2:	                   addq.l #4,sp
    47b4:	                   movea.l d0,a0
    47b6:	                   lea 20(a0),a0
    47ba:	                   move.l a0,-(sp)
    47bc:	                   jsr 17b08 <__floatunsisf>
    47c2:	                   addq.l #4,sp
    47c4:	                   move.l d0,d1
    47c6:	                   move.l 1c7fe <speechSpeed>,d0
    47cc:	                   move.l d0,-(sp)
    47ce:	                   move.l d1,-(sp)
    47d0:	                   jsr 17b92 <__mulsf3>
    47d6:	                   addq.l #8,sp
    47d8:	                   move.l d0,-(sp)
    47da:	                   jsr 17a78 <__fixsfsi>
    47e0:	                   addq.l #4,sp
    47e2:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    47e6:	               ,-- bgt.s 47ee <wrapSpeechXY+0x58>
    47e8:	               |   moveq #1,d0
    47ea:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    47ee:	               '-> moveq #-1,d1
    47f0:	                   cmp.l 52(sp),d1
    47f4:	               ,-- beq.s 4834 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    47f6:	               |   move.l 1cf54 <speechMode>,d0
    47fc:	               +-- ble.s 4834 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    47fe:	               |   clr.l -(sp)
    4800:	               |   move.l 56(sp),-(sp)
    4804:	               |   jsr d5a2 <startSound>
    480a:	               |   addq.l #8,sp
    480c:	               |   tst.w d0
    480e:	               +-- beq.s 4834 <wrapSpeechXY+0x9e>
                speechTime = -10;
    4810:	               |   moveq #-10,d0
    4812:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    4816:	               |   movea.l 1cdda <speech>,a0
    481c:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    4822:	               |   move.l 1cf54 <speechMode>,d0
    4828:	               |   moveq #2,d1
    482a:	               |   cmp.l d0,d1
    482c:	               +-- bne.s 4834 <wrapSpeechXY+0x9e>
    482e:	               |   moveq #-10,d0
    4830:	,--------------|-- bra.w 4aba <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    4834:	|              '-> movea.l 1cdda <speech>,a0
    483a:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    4840:	|     ,----------- bra.w 48f4 <wrapSpeechXY+0x15e>
        a = wrap;
    4844:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    484a:	|  |  |        ,-- bra.s 485a <wrapSpeechXY+0xc4>
            a--;
    484c:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    4850:	|  |  |  |     +-- bne.s 485a <wrapSpeechXY+0xc4>
                a = wrap;
    4852:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    4858:	|  |  |  |  ,--|-- bra.s 486c <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    485a:	|  |  |  |  |  '-> move.l 28(sp),d0
    485e:	|  |  |  |  |      movea.l 36(sp),a0
    4862:	|  |  |  |  |      adda.l d0,a0
    4864:	|  |  |  |  |      move.b (a0),d0
    4866:	|  |  |  |  |      cmpi.b #32,d0
    486a:	|  |  |  '--|----- bne.s 484c <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    486c:	|  |  |     '----> move.l 28(sp),d0
    4870:	|  |  |            movea.l 36(sp),a0
    4874:	|  |  |            adda.l d0,a0
    4876:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    4878:	|  |  |            lea 16(sp),a0
    487c:	|  |  |            move.l a0,-(sp)
    487e:	|  |  |            move.l 44(sp),-(sp)
    4882:	|  |  |            move.l 44(sp),-(sp)
    4886:	|  |  |            jsr 4032 <addSpeechLine>
    488c:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    4890:	|  |  |            move.l 28(sp),d0
    4894:	|  |  |            movea.l 36(sp),a0
    4898:	|  |  |            adda.l d0,a0
    489a:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    489e:	|  |  |            move.l 28(sp),d0
    48a2:	|  |  |            addq.l #1,d0
    48a4:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    48a8:	|  |  |            move.l 44(sp),-(sp)
    48ac:	|  |  |            jsr 17ae0 <__floatsisf>
    48b2:	|  |  |            addq.l #4,sp
    48b4:	|  |  |            move.l d0,d2
    48b6:	|  |  |            move.l 1cf7e <fontHeight>,d0
    48bc:	|  |  |            move.l d0,-(sp)
    48be:	|  |  |            jsr 17ae0 <__floatsisf>
    48c4:	|  |  |            addq.l #4,sp
    48c6:	|  |  |            move.l d0,d1
    48c8:	|  |  |            move.l 1c826 <cameraZoom>,d0
    48ce:	|  |  |            move.l d0,-(sp)
    48d0:	|  |  |            move.l d1,-(sp)
    48d2:	|  |  |            jsr 17996 <__divsf3>
    48d8:	|  |  |            addq.l #8,sp
    48da:	|  |  |            move.l d0,-(sp)
    48dc:	|  |  |            move.l d2,-(sp)
    48de:	|  |  |            jsr 17dd4 <__subsf3>
    48e4:	|  |  |            addq.l #8,sp
    48e6:	|  |  |            move.l d0,-(sp)
    48e8:	|  |  |            jsr 17a78 <__fixsfsi>
    48ee:	|  |  |            addq.l #4,sp
    48f0:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    48f4:	|  |  '----------> move.l 36(sp),-(sp)
    48f8:	|  |               jsr 140ba <strlen>
    48fe:	|  |               addq.l #4,sp
    4900:	|  |               move.l d0,d1
    4902:	|  |               move.l 48(sp),d0
    4906:	|  |               cmp.l d1,d0
    4908:	|  '-------------- bcs.w 4844 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    490c:	|                  lea 16(sp),a0
    4910:	|                  move.l a0,-(sp)
    4912:	|                  move.l 44(sp),-(sp)
    4916:	|                  move.l 44(sp),-(sp)
    491a:	|                  jsr 4032 <addSpeechLine>
    4920:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    4924:	|                  move.l 44(sp),-(sp)
    4928:	|                  jsr 17ae0 <__floatsisf>
    492e:	|                  addq.l #4,sp
    4930:	|                  move.l d0,d2
    4932:	|                  move.l 1cf7e <fontHeight>,d0
    4938:	|                  move.l d0,-(sp)
    493a:	|                  jsr 17ae0 <__floatsisf>
    4940:	|                  addq.l #4,sp
    4942:	|                  move.l d0,d1
    4944:	|                  move.l 1c826 <cameraZoom>,d0
    494a:	|                  move.l d0,-(sp)
    494c:	|                  move.l d1,-(sp)
    494e:	|                  jsr 17996 <__divsf3>
    4954:	|                  addq.l #8,sp
    4956:	|                  move.l d0,-(sp)
    4958:	|                  move.l d2,-(sp)
    495a:	|                  jsr 17dd4 <__subsf3>
    4960:	|                  addq.l #8,sp
    4962:	|                  move.l d0,-(sp)
    4964:	|                  jsr 17a78 <__fixsfsi>
    496a:	|                  addq.l #4,sp
    496c:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    4970:	|              ,-- bpl.s 498e <wrapSpeechXY+0x1f8>
    4972:	|              |   movea.l 1cdda <speech>,a0
    4978:	|              |   move.l 8(a0),d0
    497c:	|              |   movea.l 1cdda <speech>,a0
    4982:	|              |   sub.l 44(sp),d0
    4986:	|              |   move.l d0,8(a0)
    498a:	|           ,--|-- bra.w 4a7c <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    498e:	|           |  '-> movea.l 1cdda <speech>,a0
    4994:	|           |      move.l 8(a0),d0
    4998:	|           |      move.l d0,-(sp)
    499a:	|           |      jsr 17ae0 <__floatsisf>
    49a0:	|           |      addq.l #4,sp
    49a2:	|           |      move.l d0,d2
    49a4:	|           |      move.l 1cf44 <cameraY>,d0
    49aa:	|           |      move.l d0,-(sp)
    49ac:	|           |      jsr 17ae0 <__floatsisf>
    49b2:	|           |      addq.l #4,sp
    49b4:	|           |      move.l d0,d3
    49b6:	|           |      move.l 1cde2 <winHeight>,d4
    49bc:	|           |      move.l 1cf7e <fontHeight>,d0
    49c2:	|           |      pea 3 <_start+0x3>
    49c6:	|           |      move.l d0,-(sp)
    49c8:	|           |      jsr 180b8 <__divsi3>
    49ce:	|           |      addq.l #8,sp
    49d0:	|           |      move.l d4,d1
    49d2:	|           |      sub.l d0,d1
    49d4:	|           |      move.l d1,-(sp)
    49d6:	|           |      jsr 17b08 <__floatunsisf>
    49dc:	|           |      addq.l #4,sp
    49de:	|           |      move.l d0,d1
    49e0:	|           |      move.l 1c826 <cameraZoom>,d0
    49e6:	|           |      move.l d0,-(sp)
    49e8:	|           |      move.l d1,-(sp)
    49ea:	|           |      jsr 17996 <__divsf3>
    49f0:	|           |      addq.l #8,sp
    49f2:	|           |      move.l d0,-(sp)
    49f4:	|           |      move.l d3,-(sp)
    49f6:	|           |      jsr 1789c <__addsf3>
    49fc:	|           |      addq.l #8,sp
    49fe:	|           |      move.l d0,-(sp)
    4a00:	|           |      move.l d2,-(sp)
    4a02:	|           |      jsr 17c4c <__gtsf2>
    4a08:	|           |      addq.l #8,sp
    4a0a:	|           |      tst.l d0
    4a0c:	|           +----- ble.s 4a7c <wrapSpeechXY+0x2e6>
    4a0e:	|           |      move.l 1cf44 <cameraY>,d0
    4a14:	|           |      move.l d0,-(sp)
    4a16:	|           |      jsr 17ae0 <__floatsisf>
    4a1c:	|           |      addq.l #4,sp
    4a1e:	|           |      move.l d0,d2
    4a20:	|           |      move.l 1cde2 <winHeight>,d3
    4a26:	|           |      move.l 1cf7e <fontHeight>,d0
    4a2c:	|           |      pea 3 <_start+0x3>
    4a30:	|           |      move.l d0,-(sp)
    4a32:	|           |      jsr 180b8 <__divsi3>
    4a38:	|           |      addq.l #8,sp
    4a3a:	|           |      move.l d3,d1
    4a3c:	|           |      sub.l d0,d1
    4a3e:	|           |      move.l d1,-(sp)
    4a40:	|           |      jsr 17b08 <__floatunsisf>
    4a46:	|           |      addq.l #4,sp
    4a48:	|           |      move.l d0,d1
    4a4a:	|           |      move.l 1c826 <cameraZoom>,d0
    4a50:	|           |      move.l d0,-(sp)
    4a52:	|           |      move.l d1,-(sp)
    4a54:	|           |      jsr 17996 <__divsf3>
    4a5a:	|           |      addq.l #8,sp
    4a5c:	|           |      move.l d0,-(sp)
    4a5e:	|           |      move.l d2,-(sp)
    4a60:	|           |      jsr 1789c <__addsf3>
    4a66:	|           |      addq.l #8,sp
    4a68:	|           |      movea.l 1cdda <speech>,a2
    4a6e:	|           |      move.l d0,-(sp)
    4a70:	|           |      jsr 17a78 <__fixsfsi>
    4a76:	|           |      addq.l #4,sp
    4a78:	|           |      move.l d0,8(a2)

    if (offset) {
    4a7c:	|           '----> move.l 16(sp),d0
    4a80:	|        ,-------- beq.s 4ab6 <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    4a82:	|        |         movea.l 1cdda <speech>,a0
    4a88:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    4a8e:	|        |     ,-- bra.s 4ab0 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    4a90:	|        |  ,--|-> movea.l 20(sp),a0
    4a94:	|        |  |  |   move.l 8(a0),d1
    4a98:	|        |  |  |   move.l 16(sp),d0
    4a9c:	|        |  |  |   add.l d1,d0
    4a9e:	|        |  |  |   movea.l 20(sp),a0
    4aa2:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    4aa6:	|        |  |  |   movea.l 20(sp),a0
    4aaa:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    4ab0:	|        |  |  '-> tst.l 20(sp)
    4ab4:	|        |  '----- bne.s 4a90 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    4ab6:	|        '-------> move.l 24(sp),d0
}
    4aba:	'----------------> movem.l (sp)+,d2-d4/a2
    4abe:	                   lea 16(sp),sp
    4ac2:	                   rts

00004ac4 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    4ac4:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    4ac8:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    4acc:	       tst.l 24(sp)
    4ad0:	   ,-- bge.s 4ad6 <drawLine+0x12>
    4ad2:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    4ad6:	   '-> tst.l 28(sp)
    4ada:	   ,-- bge.s 4ae0 <drawLine+0x1c>
    4adc:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4ae0:	   '-> tst.l 32(sp)
    4ae4:	   ,-- bge.s 4aea <drawLine+0x26>
    4ae6:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    4aea:	   '-> tst.l 36(sp)
    4aee:	   ,-- bge.s 4af4 <drawLine+0x30>
    4af0:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    4af4:	   '-> move.l 1cf22 <sceneWidth>,d0
    4afa:	       cmp.l 24(sp),d0
    4afe:	   ,-- bge.s 4b0e <drawLine+0x4a>
    4b00:	   |   move.l 1cf22 <sceneWidth>,d0
    4b06:	   |   move.l d0,d1
    4b08:	   |   subq.l #1,d1
    4b0a:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    4b0e:	   '-> move.l 1cf22 <sceneWidth>,d0
    4b14:	       cmp.l 32(sp),d0
    4b18:	   ,-- bge.s 4b28 <drawLine+0x64>
    4b1a:	   |   move.l 1cf22 <sceneWidth>,d0
    4b20:	   |   move.l d0,d1
    4b22:	   |   subq.l #1,d1
    4b24:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    4b28:	   '-> move.l 1cf26 <sceneHeight>,d0
    4b2e:	       cmp.l 28(sp),d0
    4b32:	   ,-- bge.s 4b42 <drawLine+0x7e>
    4b34:	   |   move.l 1cf26 <sceneHeight>,d0
    4b3a:	   |   move.l d0,d1
    4b3c:	   |   subq.l #1,d1
    4b3e:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    4b42:	   '-> move.l 1cf26 <sceneHeight>,d0
    4b48:	       cmp.l 36(sp),d0
    4b4c:	   ,-- bge.s 4b5c <drawLine+0x98>
    4b4e:	   |   move.l 1cf26 <sceneHeight>,d0
    4b54:	   |   move.l d0,d1
    4b56:	   |   subq.l #1,d1
    4b58:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    4b5c:	   '-> move.l 24(sp),d0
    4b60:	       cmp.l 32(sp),d0
    4b64:	,----- ble.s 4b80 <drawLine+0xbc>
		x = x2; 
    4b66:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    4b6c:	|      tst.w 10(sp)
    4b70:	|      seq d0
    4b72:	|      neg.b d0
    4b74:	|      move.b d0,d0
    4b76:	|      andi.w #255,d0
    4b7a:	|      move.w d0,10(sp)
    4b7e:	|  ,-- bra.s 4b86 <drawLine+0xc2>
	} else x = x1;
    4b80:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    4b86:	   '-> move.l 28(sp),d1
    4b8a:	       cmp.l 36(sp),d1
    4b8e:	,----- ble.s 4baa <drawLine+0xe6>
		y = y2; 
    4b90:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    4b96:	|      tst.w 10(sp)
    4b9a:	|      seq d0
    4b9c:	|      neg.b d0
    4b9e:	|      move.b d0,d0
    4ba0:	|      andi.w #255,d0
    4ba4:	|      move.w d0,10(sp)
    4ba8:	|  ,-- bra.s 4bb0 <drawLine+0xec>
	} else y = y1;	
    4baa:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4bb0:	   '-> move.l 32(sp),d0
    4bb4:	       sub.l 24(sp),d0
    4bb8:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    4bbc:	       move.l 6(sp),d0
    4bc0:	   ,-- bpl.s 4bc4 <drawLine+0x100>
    4bc2:	   |   neg.l d0
    4bc4:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4bc8:	       move.l 36(sp),d1
    4bcc:	       sub.l 28(sp),d1
    4bd0:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    4bd4:	       move.l 2(sp),d0
    4bd8:	   ,-- bpl.s 4bdc <drawLine+0x118>
    4bda:	   |   neg.l d0
    4bdc:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4be0:	       tst.l 6(sp)
    4be4:	   ,-- bne.s 4c08 <drawLine+0x144>
		diffX = 1;
    4be6:	   |   moveq #1,d0
    4be8:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4bec:	   |   move.l 1cf22 <sceneWidth>,d0
    4bf2:	   |   subq.l #1,d0
    4bf4:	   |   cmp.l 16(sp),d0
    4bf8:	   +-- bne.s 4c08 <drawLine+0x144>
    4bfa:	   |   move.l 1cf22 <sceneWidth>,d0
    4c00:	   |   move.l d0,d1
    4c02:	   |   subq.l #2,d1
    4c04:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4c08:	   '-> tst.l 2(sp)
    4c0c:	   ,-- bne.s 4c30 <drawLine+0x16c>
		diffY = 1;
    4c0e:	   |   moveq #1,d0
    4c10:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    4c14:	   |   move.l 1cf26 <sceneHeight>,d0
    4c1a:	   |   subq.l #1,d0
    4c1c:	   |   cmp.l 12(sp),d0
    4c20:	   +-- bne.s 4c30 <drawLine+0x16c>
    4c22:	   |   move.l 1cf26 <sceneHeight>,d0
    4c28:	   |   move.l d0,d1
    4c2a:	   |   subq.l #2,d1
    4c2c:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4c30:	   '-> pea 187e2 <PutChar+0x692>
    4c36:	       jsr 176ae <KPrintF>
    4c3c:	       addq.l #4,sp
	
}
    4c3e:	       nop
    4c40:	       lea 20(sp),sp
    4c44:	       rts

00004c46 <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4c46:	                      lea -24(sp),sp
    4c4a:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4c4c:	                      move.l 1cde6 <firstTexture>,d0
    4c52:	,-------------------- beq.w 4d30 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4c56:	|                     clr.l 24(sp)
    4c5a:	|     ,-------------- bra.w 4d24 <deleteTextures+0xde>
			BOOL found = FALSE;
    4c5e:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4c62:	|  |  |               move.l 1cde6 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4c6a:	|  |  |               movea.l 20(sp),a0
    4c6e:	|  |  |               move.l (a0),d1
    4c70:	|  |  |               move.l 24(sp),d0
    4c74:	|  |  |               add.l d0,d0
    4c76:	|  |  |               add.l d0,d0
    4c78:	|  |  |               movea.l 36(sp),a0
    4c7c:	|  |  |               adda.l d0,a0
    4c7e:	|  |  |               move.l (a0),d0
    4c80:	|  |  |               cmp.l d1,d0
    4c82:	|  |  |  ,----------- bne.w 4d16 <deleteTextures+0xd0>
				found = TRUE;
    4c86:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4c8c:	|  |  |  |            movea.l 20(sp),a0
    4c90:	|  |  |  |            move.l 12(a0),d0
    4c94:	|  |  |  |            move.l d0,1cde6 <firstTexture>
				FreeVec(list);
    4c9a:	|  |  |  |            move.l 20(sp),6(sp)
    4ca0:	|  |  |  |            move.l 1ce8a <SysBase>,d0
    4ca6:	|  |  |  |            movea.l d0,a6
    4ca8:	|  |  |  |            movea.l 6(sp),a1
    4cac:	|  |  |  |            jsr -690(a6)
				continue;
    4cb0:	|  |  |  |  ,-------- bra.s 4d20 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4cb2:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    4cb6:	|  |  |  |  |  |      movea.l 12(a0),a0
    4cba:	|  |  |  |  |  |      move.l (a0),d1
    4cbc:	|  |  |  |  |  |      move.l 24(sp),d0
    4cc0:	|  |  |  |  |  |      add.l d0,d0
    4cc2:	|  |  |  |  |  |      add.l d0,d0
    4cc4:	|  |  |  |  |  |      movea.l 36(sp),a0
    4cc8:	|  |  |  |  |  |      adda.l d0,a0
    4cca:	|  |  |  |  |  |      move.l (a0),d0
    4ccc:	|  |  |  |  |  |      cmp.l d1,d0
    4cce:	|  |  |  |  |  |  ,-- bne.s 4d0c <deleteTextures+0xc6>
					found = TRUE;
    4cd0:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    4cd6:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4cda:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4ce0:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4ce4:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4ce8:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4cec:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4cf0:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4cf4:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4cfa:	|  |  |  |  |  |  |   move.l 1ce8a <SysBase>,d0
    4d00:	|  |  |  |  |  |  |   movea.l d0,a6
    4d02:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    4d06:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4d0a:	|  |  |  |  +--|--|-- bra.s 4d20 <deleteTextures+0xda>
				}
				list = list->next;
    4d0c:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4d10:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4d16:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4d1a:	|  |  |     |  |      move.l 12(a0),d0
    4d1e:	|  |  |     |  '----- bne.s 4cb2 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4d20:	|  |  |     '-------> addq.l #1,24(sp)
    4d24:	|  |  '-------------> move.l 24(sp),d0
    4d28:	|  |                  cmp.l 32(sp),d0
    4d2c:	|  '----------------- bcs.w 4c5e <deleteTextures+0x18>
			}
		}
	}
}
    4d30:	'-------------------> nop
    4d32:	                      movea.l (sp)+,a6
    4d34:	                      lea 24(sp),sp
    4d38:	                      rts

00004d3a <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4d3a:	subq.l #4,sp
    4d3c:	move.l 8(sp),d0
    4d40:	move.w d0,d0
    4d42:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4d46:	pea 18805 <PutChar+0x6b5>
    4d4c:	jsr 176ae <KPrintF>
    4d52:	addq.l #4,sp
}
    4d54:	nop
    4d56:	addq.l #4,sp
    4d58:	rts

00004d5a <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4d5a:	       moveq #-1,d0
    4d5c:	       cmp.l 4(sp),d0
    4d60:	   ,-- bne.s 4d66 <resourceNameFromNum+0xc>
    4d62:	   |   moveq #0,d0
    4d64:	,--|-- bra.s 4d9e <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4d66:	|  '-> move.l 1ce66 <numResourceNames>,d0
    4d6c:	|  ,-- bne.s 4d76 <resourceNameFromNum+0x1c>
    4d6e:	|  |   move.l #100405,d0
    4d74:	+--|-- bra.s 4d9e <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4d76:	|  '-> move.l 1ce66 <numResourceNames>,d0
    4d7c:	|      cmp.l 4(sp),d0
    4d80:	|  ,-- ble.s 4d98 <resourceNameFromNum+0x3e>
    4d82:	|  |   move.l 1ce1e <allResourceNames>,d1
    4d88:	|  |   move.l 4(sp),d0
    4d8c:	|  |   add.l d0,d0
    4d8e:	|  |   add.l d0,d0
    4d90:	|  |   movea.l d1,a0
    4d92:	|  |   adda.l d0,a0
    4d94:	|  |   move.l (a0),d0
    4d96:	+--|-- bra.s 4d9e <resourceNameFromNum+0x44>
	return "Unknown resource";
    4d98:	|  '-> move.l #100414,d0
    4d9e:	'----> rts

00004da0 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4da0:	          lea -44(sp),sp
    4da4:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4da8:	          move.l #320,1cdde <winWidth>
    winHeight = 256;
    4db2:	          move.l #256,1cde2 <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4dbc:	          tst.l 60(sp)
    4dc0:	      ,-- bne.s 4dd8 <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4dc2:	      |   pea 1884f <PutChar+0x6ff>
    4dc8:	      |   jsr b8 <copyString>
    4dce:	      |   addq.l #4,sp
    4dd0:	      |   move.l d0,1cdf6 <bundleFolder>
    4dd6:	   ,--|-- bra.s 4dee <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4dd8:	   |  '-> movea.l 64(sp),a0
    4ddc:	   |      move.l (a0),d0
    4dde:	   |      move.l d0,-(sp)
    4de0:	   |      jsr b8 <copyString>
    4de6:	   |      addq.l #4,sp
    4de8:	   |      move.l d0,1cdf6 <bundleFolder>
	}
    
	int lastSlash = -1;
    4dee:	   '----> moveq #-1,d0
    4df0:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4df4:	          clr.l 44(sp)
    4df8:	   ,----- bra.s 4e1a <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4dfa:	,--|----> move.l 1cdf6 <bundleFolder>,d1
    4e00:	|  |      move.l 44(sp),d0
    4e04:	|  |      movea.l d1,a0
    4e06:	|  |      adda.l d0,a0
    4e08:	|  |      move.b (a0),d0
    4e0a:	|  |      cmpi.b #47,d0
    4e0e:	|  |  ,-- bne.s 4e16 <main_sludge+0x76>
    4e10:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4e16:	|  |  '-> addq.l #1,44(sp)
    4e1a:	|  '----> move.l 1cdf6 <bundleFolder>,d1
    4e20:	|         move.l 44(sp),d0
    4e24:	|         movea.l d1,a0
    4e26:	|         adda.l d0,a0
    4e28:	|         move.b (a0),d0
    4e2a:	'-------- bne.s 4dfa <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4e2c:	          move.l 1cdf6 <bundleFolder>,d0
    4e32:	          move.l 48(sp),d1
    4e36:	          addq.l #1,d1
    4e38:	          movea.l d0,a0
    4e3a:	          adda.l d1,a0
    4e3c:	          clr.b (a0)

	if (argc > 1) {
    4e3e:	          moveq #1,d0
    4e40:	          cmp.l 60(sp),d0
    4e44:	      ,-- bge.s 4e60 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4e46:	      |   move.l 60(sp),d0
    4e4a:	      |   addi.l #1073741823,d0
    4e50:	      |   add.l d0,d0
    4e52:	      |   add.l d0,d0
    4e54:	      |   movea.l 64(sp),a0
    4e58:	      |   adda.l d0,a0
    4e5a:	      |   move.l (a0),52(sp)
    4e5e:	   ,--|-- bra.s 4eba <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4e60:	   |  '-> move.l 1cdf6 <bundleFolder>,d0
    4e66:	   |      pea 18855 <PutChar+0x705>
    4e6c:	   |      move.l d0,-(sp)
    4e6e:	   |      jsr 140fa <joinStrings>
    4e74:	   |      addq.l #8,sp
    4e76:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4e7a:	   |      move.l 52(sp),-(sp)
    4e7e:	   |      jsr 13ff4 <fileExists>
    4e84:	   |      addq.l #4,sp
    4e86:	   |      tst.b d0
    4e88:	   +----- bne.s 4eba <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4e8a:	   |      move.l 52(sp),40(sp)
    4e90:	   |      move.l 1ce8a <SysBase>,d0
    4e96:	   |      movea.l d0,a6
    4e98:	   |      movea.l 40(sp),a1
    4e9c:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4ea0:	   |      move.l 1cdf6 <bundleFolder>,d0
    4ea6:	   |      pea 18862 <PutChar+0x712>
    4eac:	   |      move.l d0,-(sp)
    4eae:	   |      jsr 140fa <joinStrings>
    4eb4:	   |      addq.l #8,sp
    4eb6:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4eba:	   '----> pea 1886b <PutChar+0x71b>
    4ec0:	          jsr 176ae <KPrintF>
    4ec6:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4ec8:	          move.l 52(sp),-(sp)
    4ecc:	          jsr 13ff4 <fileExists>
    4ed2:	          addq.l #4,sp
    4ed4:	          tst.b d0
    4ed6:	      ,-- bne.s 4f2e <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4ed8:	      |   move.l 1ce92 <DOSBase>,d0
    4ede:	      |   movea.l d0,a6
    4ee0:	      |   jsr -60(a6)
    4ee4:	      |   move.l d0,28(sp)
    4ee8:	      |   move.l 28(sp),d0
    4eec:	      |   move.l d0,24(sp)
    4ef0:	      |   move.l #100459,20(sp)
    4ef8:	      |   moveq #21,d0
    4efa:	      |   move.l d0,16(sp)
    4efe:	      |   move.l 1ce92 <DOSBase>,d0
    4f04:	      |   movea.l d0,a6
    4f06:	      |   move.l 24(sp),d1
    4f0a:	      |   move.l 20(sp),d2
    4f0e:	      |   move.l 16(sp),d3
    4f12:	      |   jsr -48(a6)
    4f16:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4f1a:	      |   pea 1886b <PutChar+0x71b>
    4f20:	      |   jsr 176ae <KPrintF>
    4f26:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4f28:	      |   moveq #0,d0
    4f2a:	,-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    4f2e:	|     '-> pea 18881 <PutChar+0x731>
    4f34:	|         jsr 176ae <KPrintF>
    4f3a:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4f3c:	|         move.l 52(sp),-(sp)
    4f40:	|         jsr 5136 <setGameFilePath>
    4f46:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4f48:	|         move.l 52(sp),-(sp)
    4f4c:	|         jsr 6680 <initSludge>
    4f52:	|         addq.l #4,sp
    4f54:	|         tst.w d0
    4f56:	|     ,-- bne.s 4f5e <main_sludge+0x1be>
    4f58:	|     |   moveq #0,d0
    4f5a:	+-----|-- bra.w 512c <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4f5e:	|     '-> move.l 1cdde <winWidth>,d0
    4f64:	|         cmpi.l #320,d0
    4f6a:	|     ,-- bne.s 4f7a <main_sludge+0x1da>
    4f6c:	|     |   move.l 1cde2 <winHeight>,d0
    4f72:	|     |   cmpi.l #256,d0
    4f78:	|  ,--|-- beq.s 4f9c <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4f7a:	|  |  '-> pea 18892 <PutChar+0x742>
    4f80:	|  |      jsr 176ae <KPrintF>
    4f86:	|  |      addq.l #4,sp
		winWidth = 320;
    4f88:	|  |      move.l #320,1cdde <winWidth>
		winHeight = 256;
    4f92:	|  |      move.l #256,1cde2 <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4f9c:	|  '----> pea 1890f <PutChar+0x7bf>
    4fa2:	|         jsr 176ae <KPrintF>
    4fa8:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4faa:	|         move.l 1cde2 <winHeight>,d0
    4fb0:	|         move.l d0,d1
    4fb2:	|         move.l 1cdde <winWidth>,d0
    4fb8:	|         move.l d1,-(sp)
    4fba:	|         move.l d0,-(sp)
    4fbc:	|         jsr d7c0 <resizeBackdrop>
    4fc2:	|         addq.l #8,sp
    4fc4:	|         tst.w d0
    4fc6:	|     ,-- bne.s 4fdc <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4fc8:	|     |   pea 18922 <PutChar+0x7d2>
    4fce:	|     |   jsr 176ae <KPrintF>
    4fd4:	|     |   addq.l #4,sp
		return FALSE;
    4fd6:	|     |   moveq #0,d0
    4fd8:	+-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4fdc:	|     '-> pea 18948 <PutChar+0x7f8>
    4fe2:	|         jsr 176ae <KPrintF>
    4fe8:	|         addq.l #4,sp
	if (! initPeople ())
    4fea:	|         jsr acda <initPeople>
    4ff0:	|         tst.w d0
    4ff2:	|     ,-- bne.s 5008 <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4ff4:	|     |   pea 18955 <PutChar+0x805>
    4ffa:	|     |   jsr 176ae <KPrintF>
    5000:	|     |   addq.l #4,sp
		return FALSE;
    5002:	|     |   moveq #0,d0
    5004:	+-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    5008:	|     '-> pea 18976 <PutChar+0x826>
    500e:	|         jsr 176ae <KPrintF>
    5014:	|         addq.l #4,sp
	if (! initFloor ())
    5016:	|         jsr 16a64 <initFloor>
    501c:	|         tst.w d0
    501e:	|     ,-- bne.s 5034 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    5020:	|     |   pea 18982 <PutChar+0x832>
    5026:	|     |   jsr 176ae <KPrintF>
    502c:	|     |   addq.l #4,sp
		
		return FALSE;
    502e:	|     |   moveq #0,d0
    5030:	+-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    5034:	|     '-> pea 189a2 <PutChar+0x852>
    503a:	|         jsr 176ae <KPrintF>
    5040:	|         addq.l #4,sp
	if (! initObjectTypes ())
    5042:	|         jsr d97c <initObjectTypes>
    5048:	|         tst.w d0
    504a:	|     ,-- bne.s 5060 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    504c:	|     |   pea 189b3 <PutChar+0x863>
    5052:	|     |   jsr 176ae <KPrintF>
    5058:	|     |   addq.l #4,sp
		return FALSE;
    505a:	|     |   moveq #0,d0
    505c:	+-----|-- bra.w 512c <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    5060:	|     '-> pea 189d9 <PutChar+0x889>
    5066:	|         jsr 176ae <KPrintF>
    506c:	|         addq.l #4,sp
	initSpeech ();
    506e:	|         jsr 4250 <initSpeech>
	KPrintF("Init status bar\n");
    5074:	|         pea 189e6 <PutChar+0x896>
    507a:	|         jsr 176ae <KPrintF>
    5080:	|         addq.l #4,sp
	initStatusBar ();
    5082:	|         jsr 86da <initStatusBar>

	KPrintF("Get numbered string\n");
    5088:	|         pea 189f7 <PutChar+0x8a7>
    508e:	|         jsr 176ae <KPrintF>
    5094:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    5096:	|         pea 1 <_start+0x1>
    509a:	|         jsr 79e4 <getNumberedString>
    50a0:	|         addq.l #4,sp
    50a2:	|         move.l d0,1cdee <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    50a8:	|         pea 18a0c <PutChar+0x8bc>
    50ae:	|         jsr 176ae <KPrintF>
    50b4:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    50b6:	|         move.l 1ce5a <noStack>,d0
    50bc:	|         pea 1 <_start+0x1>
    50c0:	|         move.l d0,-(sp)
    50c2:	|         clr.l -(sp)
    50c4:	|         clr.l -(sp)
    50c6:	|         clr.l -(sp)
    50c8:	|         jsr 783c <startNewFunctionNum>
    50ce:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    50d2:	|         pea 18a24 <PutChar+0x8d4>
    50d8:	|         jsr 176ae <KPrintF>
    50de:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    50e0:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    50e8:	|         clr.l 1cdfa <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    50ee:	|     ,-- bra.s 510e <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    50f0:	|  ,--|-> jsr 76c2 <sludgeDisplay>
		CsiCheckInput();
    50f6:	|  |  |   jsr d2de <CsiCheckInput>
		walkAllPeople();
    50fc:	|  |  |   jsr c298 <walkAllPeople>
		handleInput();
    5102:	|  |  |   jsr 641a <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    5108:	|  |  |   jsr 175e2 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    510e:	|  |  '-> move.l 1cdfa <weAreDoneSoQuit>,d0
    5114:	|  '----- beq.s 50f0 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    5116:	|         move.l 52(sp),32(sp)
    511c:	|         move.l 1ce8a <SysBase>,d0
    5122:	|         movea.l d0,a6
    5124:	|         movea.l 32(sp),a1
    5128:	|         jsr -690(a6)
}
    512c:	'-------> movem.l (sp)+,d2-d3/a6
    5130:	          lea 44(sp),sp
    5134:	          rts

00005136 <setGameFilePath>:

void setGameFilePath (char * f) {
    5136:	          lea -1104(sp),sp
    513a:	          move.l a6,-(sp)
    513c:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    513e:	          move.l #1112,d0
    5144:	          add.l sp,d0
    5146:	          addi.l #-1102,d0
    514c:	          move.l d0,1100(sp)
    5150:	          move.l #998,1096(sp)
    5158:	          move.l 1ce92 <DOSBase>,d0
    515e:	          movea.l d0,a6
    5160:	          move.l 1100(sp),d1
    5164:	          move.l 1096(sp),d2
    5168:	          jsr -564(a6)
    516c:	          move.w d0,1094(sp)
    5170:	          move.w 1094(sp),d0
    5174:	      ,-- bne.s 5184 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    5176:	      |   pea 18a37 <PutChar+0x8e7>
    517c:	      |   jsr 176ae <KPrintF>
    5182:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    5184:	      '-> moveq #-1,d0
    5186:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    518a:	          clr.l 1104(sp)
    518e:	   ,----- bra.s 51ac <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    5190:	,--|----> move.l 1104(sp),d0
    5194:	|  |      movea.l 1116(sp),a0
    5198:	|  |      adda.l d0,a0
    519a:	|  |      move.b (a0),d0
    519c:	|  |      cmpi.b #47,d0
    51a0:	|  |  ,-- bne.s 51a8 <setGameFilePath+0x72>
    51a2:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    51a8:	|  |  '-> addq.l #1,1104(sp)
    51ac:	|  '----> move.l 1104(sp),d0
    51b0:	|         movea.l 1116(sp),a0
    51b4:	|         adda.l d0,a0
    51b6:	|         move.b (a0),d0
    51b8:	'-------- bne.s 5190 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    51ba:	          moveq #-1,d0
    51bc:	          cmp.l 1108(sp),d0
    51c0:	   ,----- beq.s 523a <setGameFilePath+0x104>
		f[got] = 0;	
    51c2:	   |      move.l 1108(sp),d0
    51c6:	   |      movea.l 1116(sp),a0
    51ca:	   |      adda.l d0,a0
    51cc:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    51ce:	   |      move.l 1116(sp),1090(sp)
    51d4:	   |      moveq #-2,d0
    51d6:	   |      move.l d0,1086(sp)
    51da:	   |      move.l 1ce92 <DOSBase>,d0
    51e0:	   |      movea.l d0,a6
    51e2:	   |      move.l 1090(sp),d1
    51e6:	   |      move.l 1086(sp),d2
    51ea:	   |      jsr -84(a6)
    51ee:	   |      move.l d0,1082(sp)
    51f2:	   |      move.l 1082(sp),d0
    51f6:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    51fa:	   |      move.l 1078(sp),1074(sp)
    5200:	   |      move.l 1ce92 <DOSBase>,d0
    5206:	   |      movea.l d0,a6
    5208:	   |      move.l 1074(sp),d1
    520c:	   |      jsr -126(a6)
    5210:	   |      move.l d0,1070(sp)
    5214:	   |      move.l 1070(sp),d0
    5218:	   |  ,-- bne.s 522c <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    521a:	   |  |   move.l 1116(sp),-(sp)
    521e:	   |  |   pea 18a5d <PutChar+0x90d>
    5224:	   |  |   jsr 176ae <KPrintF>
    522a:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    522c:	   |  '-> move.l 1108(sp),d0
    5230:	   |      movea.l 1116(sp),a0
    5234:	   |      adda.l d0,a0
    5236:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    523a:	   '----> move.l #400,1066(sp)
    5242:	          clr.l 1062(sp)
    5246:	          move.l 1ce8a <SysBase>,d0
    524c:	          movea.l d0,a6
    524e:	          move.l 1066(sp),d0
    5252:	          move.l 1062(sp),d1
    5256:	          jsr -684(a6)
    525a:	          move.l d0,1058(sp)
    525e:	          move.l 1058(sp),d0
    5262:	          move.l d0,1cdf2 <gamePath>
	if (gamePath==0) {
    5268:	          move.l 1cdf2 <gamePath>,d0
    526e:	      ,-- bne.s 5282 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    5270:	      |   pea 18a90 <PutChar+0x940>
    5276:	      |   jsr 176ae <KPrintF>
    527c:	      |   addq.l #4,sp
    527e:	   ,--|-- bra.w 536a <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    5282:	   |  '-> move.l 1cdf2 <gamePath>,1054(sp)
    528a:	   |      moveq #-2,d0
    528c:	   |      move.l d0,1050(sp)
    5290:	   |      move.l 1ce92 <DOSBase>,d0
    5296:	   |      movea.l d0,a6
    5298:	   |      move.l 1054(sp),d1
    529c:	   |      move.l 1050(sp),d2
    52a0:	   |      jsr -84(a6)
    52a4:	   |      move.l d0,1046(sp)
    52a8:	   |      move.l 1046(sp),d0
    52ac:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    52b0:	   |      move.l 1042(sp),1038(sp)
    52b6:	   |      move.l 1ce92 <DOSBase>,d0
    52bc:	   |      movea.l d0,a6
    52be:	   |      move.l 1038(sp),d1
    52c2:	   |      jsr -126(a6)
    52c6:	   |      move.l d0,1034(sp)
    52ca:	   |      move.l 1034(sp),d0
    52ce:	   |  ,-- bne.s 52de <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    52d0:	   |  |   pea 18acb <PutChar+0x97b>
    52d6:	   |  |   jsr 176ae <KPrintF>
    52dc:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    52de:	   |  '-> move.l #1112,d0
    52e4:	   |      add.l sp,d0
    52e6:	   |      addi.l #-1102,d0
    52ec:	   |      move.l d0,1030(sp)
    52f0:	   |      moveq #-2,d0
    52f2:	   |      move.l d0,1026(sp)
    52f6:	   |      move.l 1ce92 <DOSBase>,d0
    52fc:	   |      movea.l d0,a6
    52fe:	   |      move.l 1030(sp),d1
    5302:	   |      move.l 1026(sp),d2
    5306:	   |      jsr -84(a6)
    530a:	   |      move.l d0,1022(sp)
    530e:	   |      move.l 1022(sp),d0
    5312:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    5316:	   |      move.l 1042(sp),1018(sp)
    531c:	   |      move.l 1ce92 <DOSBase>,d0
    5322:	   |      movea.l d0,a6
    5324:	   |      move.l 1018(sp),d1
    5328:	   |      jsr -126(a6)
    532c:	   |      move.l d0,1014(sp)
    5330:	   |      move.l 1014(sp),d0
    5334:	   |  ,-- bne.s 534a <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    5336:	   |  |   moveq #10,d0
    5338:	   |  |   add.l sp,d0
    533a:	   |  |   move.l d0,-(sp)
    533c:	   |  |   pea 18af7 <PutChar+0x9a7>
    5342:	   |  |   jsr 176ae <KPrintF>
    5348:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    534a:	   |  '-> move.l 1cdf2 <gamePath>,d0
    5350:	   +----- beq.s 536a <setGameFilePath+0x234>
    5352:	   |      move.l 1cdf2 <gamePath>,1010(sp)
    535a:	   |      move.l 1ce8a <SysBase>,d0
    5360:	   |      movea.l d0,a6
    5362:	   |      movea.l 1010(sp),a1
    5366:	   |      jsr -690(a6)
}
    536a:	   '----> move.l (sp)+,d2
    536c:	          movea.l (sp)+,a6
    536e:	          lea 1104(sp),sp
    5372:	          rts

00005374 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    5374:	,-------> lea -16(sp),sp
    5378:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    537a:	|         move.l 24(sp),d0
    537e:	|         move.l d0,-(sp)
    5380:	|         pea 18bff <PutChar+0xaaf>
    5386:	|         jsr 176ae <KPrintF>
    538c:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    538e:	|         move.l 24(sp),-(sp)
    5392:	|         jsr 743e <pauseFunction>
    5398:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    539a:	|     ,-- bra.s 53ac <abortFunction+0x38>
    539c:	|  ,--|-> moveq #24,d0
    539e:	|  |  |   add.l 24(sp),d0
    53a2:	|  |  |   move.l d0,-(sp)
    53a4:	|  |  |   jsr 15552 <trimStack>
    53aa:	|  |  |   addq.l #4,sp
    53ac:	|  |  '-> movea.l 24(sp),a0
    53b0:	|  |      move.l 24(a0),d0
    53b4:	|  '----- bne.s 539c <abortFunction+0x28>
	FreeVec( fun -> compiledLines);
    53b6:	|         movea.l 24(sp),a0
    53ba:	|         move.l 4(a0),12(sp)
    53c0:	|         move.l 1ce8a <SysBase>,d0
    53c6:	|         movea.l d0,a6
    53c8:	|         movea.l 12(sp),a1
    53cc:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    53d0:	|         clr.l 16(sp)
    53d4:	|     ,-- bra.s 53f4 <abortFunction+0x80>
    53d6:	|  ,--|-> movea.l 24(sp),a0
    53da:	|  |  |   move.l 20(a0),d1
    53de:	|  |  |   move.l 16(sp),d0
    53e2:	|  |  |   lsl.l #3,d0
    53e4:	|  |  |   add.l d1,d0
    53e6:	|  |  |   move.l d0,-(sp)
    53e8:	|  |  |   jsr 14e1c <unlinkVar>
    53ee:	|  |  |   addq.l #4,sp
    53f0:	|  |  |   addq.l #1,16(sp)
    53f4:	|  |  '-> movea.l 24(sp),a0
    53f8:	|  |      move.l 8(a0),d0
    53fc:	|  |      cmp.l 16(sp),d0
    5400:	|  '----- bgt.s 53d6 <abortFunction+0x62>
	if( fun -> numLocals > 0) {
    5402:	|         movea.l 24(sp),a0
    5406:	|         move.l 8(a0),d0
    540a:	|     ,-- ble.s 5426 <abortFunction+0xb2>
		FreeVec(fun -> localVars);
    540c:	|     |   movea.l 24(sp),a0
    5410:	|     |   move.l 20(a0),8(sp)
    5416:	|     |   move.l 1ce8a <SysBase>,d0
    541c:	|     |   movea.l d0,a6
    541e:	|     |   movea.l 8(sp),a1
    5422:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    5426:	|     '-> moveq #28,d0
    5428:	|         add.l 24(sp),d0
    542c:	|         move.l d0,-(sp)
    542e:	|         jsr 14e1c <unlinkVar>
    5434:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    5436:	|         movea.l 24(sp),a0
    543a:	|         move.l 40(a0),d0
    543e:	|     ,-- beq.s 5450 <abortFunction+0xdc>
    5440:	|     |   movea.l 24(sp),a0
    5444:	|     |   move.l 40(a0),d0
    5448:	|     |   move.l d0,-(sp)
    544a:	'-----|-- jsr 5374 <abortFunction>(pc)
    544e:	      |   addq.l #4,sp
	FreeVec(fun);
    5450:	      '-> move.l 24(sp),4(sp)
    5456:	          move.l 1ce8a <SysBase>,d0
    545c:	          movea.l d0,a6
    545e:	          movea.l 4(sp),a1
    5462:	          jsr -690(a6)
	fun = NULL;
    5466:	          clr.l 24(sp)
	KPrintF("abortFunction finished\n");
    546a:	          pea 18c19 <PutChar+0xac9>
    5470:	          jsr 176ae <KPrintF>
    5476:	          addq.l #4,sp
}
    5478:	          nop
    547a:	          movea.l (sp)+,a6
    547c:	          lea 16(sp),sp
    5480:	          rts

00005482 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    5482:	          subq.l #8,sp
	int n = 0;
    5484:	          clr.l 4(sp)
	*killedMyself = FALSE;
    5488:	          movea.l 20(sp),a0
    548c:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    548e:	          move.l 1ce22 <allRunningFunctions>,(sp)
	while (fun) {
    5494:	   ,----- bra.s 54c2 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    5496:	,--|----> movea.l (sp),a0
    5498:	|  |      move.l (a0),d0
    549a:	|  |      cmp.l 12(sp),d0
    549e:	|  |  ,-- bne.s 54bc <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    54a0:	|  |  |   movea.l (sp),a0
    54a2:	|  |  |   move.w #1,54(a0)
			n++;
    54a8:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    54ac:	|  |  |   move.l (sp),d0
    54ae:	|  |  |   cmp.l 16(sp),d0
    54b2:	|  |  +-- bne.s 54bc <cancelAFunction+0x3a>
    54b4:	|  |  |   movea.l 20(sp),a0
    54b8:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    54bc:	|  |  '-> movea.l (sp),a0
    54be:	|  |      move.l 44(a0),(sp)
	while (fun) {
    54c2:	|  '----> tst.l (sp)
    54c4:	'-------- bne.s 5496 <cancelAFunction+0x14>
	}
	return n;
    54c6:	          move.l 4(sp),d0
}
    54ca:	          addq.l #8,sp
    54cc:	          rts

000054ce <completeTimers>:


void completeTimers () {
    54ce:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    54d0:	          move.l 1ce22 <allRunningFunctions>,(sp)

	while (thisFunction) {
    54d6:	   ,----- bra.s 54ec <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    54d8:	,--|----> movea.l (sp),a0
    54da:	|  |      move.b 56(a0),d0
    54de:	|  |  ,-- bne.s 54e6 <completeTimers+0x18>
    54e0:	|  |  |   movea.l (sp),a0
    54e2:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    54e6:	|  |  '-> movea.l (sp),a0
    54e8:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    54ec:	|  '----> tst.l (sp)
    54ee:	'-------- bne.s 54d8 <completeTimers+0xa>
	}
}
    54f0:	          nop
    54f2:	          nop
    54f4:	          addq.l #4,sp
    54f6:	          rts

000054f8 <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    54f8:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    54fc:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    5502:	                                                             movea.l 80(sp),a0
    5506:	                                                             move.w 54(a0),d0
    550a:	,----------------------------------------------------------- beq.w 6398 <continueFunction+0xea0>
		abortFunction (fun);
    550e:	|                                                            move.l 80(sp),-(sp)
    5512:	|                                                            jsr 5374 <abortFunction>
    5518:	|                                                            addq.l #4,sp
		return TRUE;
    551a:	|                                                            moveq #1,d0
    551c:	|  ,-------------------------------------------------------- bra.w 63a2 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    5520:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    5526:	|  |  |                                                      movea.l 80(sp),a0
    552a:	|  |  |                                                      move.l 4(a0),d1
    552e:	|  |  |                                                      movea.l 80(sp),a0
    5532:	|  |  |                                                      move.l 36(a0),d0
    5536:	|  |  |                                                      lsl.l #3,d0
    5538:	|  |  |                                                      movea.l d1,a0
    553a:	|  |  |                                                      adda.l d0,a0
    553c:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    5542:	|  |  |                                                      movea.l 80(sp),a0
    5546:	|  |  |                                                      move.l 4(a0),d1
    554a:	|  |  |                                                      movea.l 80(sp),a0
    554e:	|  |  |                                                      move.l 36(a0),d0
    5552:	|  |  |                                                      lsl.l #3,d0
    5554:	|  |  |                                                      movea.l d1,a0
    5556:	|  |  |                                                      adda.l d0,a0
    5558:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    555c:	|  |  |                                                      moveq #41,d0
    555e:	|  |  |                                                      cmp.l 64(sp),d0
    5562:	|  |  |  ,-------------------------------------------------- bcs.w 634c <continueFunction+0xe54>
    5566:	|  |  |  |                                                   move.l 64(sp),d0
    556a:	|  |  |  |                                                   add.l d0,d0
    556c:	|  |  |  |                                                   movea.l d0,a0
    556e:	|  |  |  |                                                   adda.l #21882,a0
    5574:	|  |  |  |                                                   move.w (a0),d0
    5576:	|  |  |  |                                                   jmp (557a <continueFunction+0x82>,pc,d0.w)
    557a:	|  |  |  |                                                   bset d6,(a2)
    557c:	|  |  |  |                                                   ori.w #2670,(a4)
    5580:	|  |  |  |                                                   eori.w #2416,d6
    5584:	|  |  |  |                                                   bchg d4,d2
    5586:	|  |  |  |                                                   bclr d4,(a4)+
    5588:	|  |  |  |                                                   andi.l #181013194,d4
    558e:	|  |  |  |                                                   .short 0x0aca
    5590:	|  |  |  |                                                   .short 0x0aca
    5592:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    559a:	|  |  |  |                                                   .short 0x0aca
    559c:	|  |  |  |                                                   andi.w #906,-(a4)
    55a0:	|  |  |  |                                                   bchg d1,196(a2)
    55a4:	|  |  |  |                                                   bset d1,580(a4)
    55a8:	|  |  |  |                                                   bclr d1,2576(a2)
    55ac:	|  |  |  |                                                   andi.b #-56,2762(a2)
    55b2:	|  |  |  |                                                   .short 0x0aca
    55b4:	|  |  |  |                                                   eori.l #63572682,d0
    55ba:	|  |  |  |                                                   .short 0x0aca
    55bc:	|  |  |  |                                                   bchg d3,-(a2)
    55be:	|  |  |  |                                                   bchg #-36,(a2)
    55c2:	|  |  |  |                                                   .short 0x08cc
    55c4:	|  |  |  |                                                   addi.b #14,1038(a0)
    55ca:	|  |  |  |                                                   .short 0x040e
    55cc:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    55d0:	|  |  |  |                                                   ori.w #8232,(a0)
    55d4:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    55da:	|  |  |  |                                                   ori.w #12136,(a0)
    55de:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    55e4:	|  |  |  |                                                   ori.w #12328,(a0)
    55e8:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    55ee:	|  |  |  |                                                   add.l 44(sp),d1
    55f2:	|  |  |  |                                                   moveq #28,d0
    55f4:	|  |  |  |                                                   add.l 80(sp),d0
    55f8:	|  |  |  |                                                   move.l d1,-(sp)
    55fa:	|  |  |  |                                                   move.l d0,-(sp)
    55fc:	|  |  |  |                                                   jsr 15088 <copyVariable>
    5602:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    5604:	|  |  |  |                                                   move.l 80(sp),-(sp)
    5608:	|  |  |  |                                                   jsr 63a8 <finishFunction>
    560e:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    5610:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    5616:	|  |  |  |                                                   move.l 80(sp),-(sp)
    561a:	|  |  |  |                                                   jsr 74e6 <restartFunction>
    5620:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    5622:	|  |  |  |  ,----------------------------------------------- bra.w 6380 <continueFunction+0xe88>
				finishFunction (fun);
    5626:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    562a:	|  |  |  |  |                                                jsr 63a8 <finishFunction>
    5630:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5632:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    5636:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    563a:	|  |  |  |  +----------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    563e:	|  |  |  |  |                                                movea.l 80(sp),a0
    5642:	|  |  |  |  |                                                move.l 28(a0),d0
    5646:	|  |  |  |  |                                                moveq #2,d1
    5648:	|  |  |  |  |                                                cmp.l d0,d1
    564a:	|  |  |  |  |                                            ,-- beq.s 5656 <continueFunction+0x15e>
    564c:	|  |  |  |  |                                            |   moveq #4,d1
    564e:	|  |  |  |  |                                            |   cmp.l d0,d1
    5650:	|  |  |  |  |                                         ,--|-- beq.s 56a4 <continueFunction+0x1ac>
    5652:	|  |  |  |  |                                ,--------|--|-- bra.w 578c <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    5656:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    565a:	|  |  |  |  |                                |        |      jsr 743e <pauseFunction>
    5660:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    5662:	|  |  |  |  |                                |        |      moveq #24,d0
    5664:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    5668:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    566c:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    5670:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    5674:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    5676:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    567a:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    567e:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    5680:	|  |  |  |  |                                |        |      jsr 783c <startNewFunctionNum>
    5686:	|  |  |  |  |                                |        |      lea 20(sp),sp
    568a:	|  |  |  |  |                                |        |      tst.l d0
    568c:	|  |  |  |  |                                |        |  ,-- bne.s 5694 <continueFunction+0x19c>
    568e:	|  |  |  |  |                                |        |  |   clr.w d0
    5690:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 63a2 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    5694:	|  |  |  |  |                                |        |  '-> move.l 1ce22 <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    569c:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    56a0:	|  |  |  |  |                                |  ,-----|----- bra.w 57a0 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    56a4:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    56a8:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    56ac:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    56b0:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    56b4:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    56b6:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    56b8:	|  |  |  |  |                                |  |            jsr 138b0 <callBuiltIn>
    56be:	|  |  |  |  |                                |  |            lea 12(sp),sp
    56c2:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    56c6:	|  |  |  |  |                                |  |            moveq #5,d0
    56c8:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    56cc:	|  |  |  |  |                                |  |  ,-------- bcs.w 5788 <continueFunction+0x290>
    56d0:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    56d4:	|  |  |  |  |                                |  |  |         add.l d0,d0
    56d6:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    56d8:	|  |  |  |  |                                |  |  |         adda.l #22244,a0
    56de:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    56e0:	|  |  |  |  |                                |  |  |         jmp (56e4 <continueFunction+0x1ec>,pc,d0.w)
    56e4:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    56ea:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    56ee:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    56f4:	|  |  |  |  |                                |  |  |         or.b (-71,a1,d4.l:8),d6
    56f8:	|  |  |  |  |                                |  |  |         ori.b #-82,d1
    56fc:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    56fe:	|  |  |  |  |                                |  |  |         clr.w d0
    5700:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 63a2 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    5704:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    5708:	|  |  |  |  |                                |  |  |         jsr 743e <pauseFunction>
    570e:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    5710:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    5714:	|  |  |  |  |                                |  |  |  ,----- bra.s 578a <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    5716:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    571a:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    571e:	|  |  |  |  |                                |  |  |  +----- bra.s 578a <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    5720:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    5724:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    572a:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    572c:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    5730:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5734:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5738:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    573a:	|  |  |  |  |                                |  |  |  |      jsr 154c0 <setVariable>
    5740:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    5744:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    5748:	|  |  |  |  |                                |  |  |  |      jsr 743e <pauseFunction>
    574e:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    5750:	|  |  |  |  |                                |  |  |  |      move.l 1ce5a <noStack>,d1
    5756:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    575a:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    575c:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    575e:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    5762:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    5764:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    5766:	|  |  |  |  |                                |  |  |  |      jsr 783c <startNewFunctionNum>
    576c:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    5770:	|  |  |  |  |                                |  |  |  |      tst.l d0
    5772:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 577a <continueFunction+0x282>
    5774:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    5776:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 63a2 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    577a:	|  |  |  |  |                                |  |  |  |  '-> move.l 1ce22 <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    5782:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    5786:	|  |  |  |  |                                |  |  |  +----- bra.s 578a <continueFunction+0x292>

						default:
						break;
    5788:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    578a:	|  |  |  |  |                                |  +-----'----X bra.s 57a0 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    578c:	|  |  |  |  |                                '--|----------> pea 18c7c <PutChar+0xb2c>
    5792:	|  |  |  |  |                                   |            jsr 176ae <KPrintF>
    5798:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    579a:	|  |  |  |  |                                   |            clr.w d0
    579c:	|  +--|--|--|-----------------------------------|----------- bra.w 63a2 <continueFunction+0xeaa>
			}
			break;
    57a0:	|  |  |  |  +-----------------------------------'----------X bra.w 6380 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    57a4:	|  |  |  |  |                                                moveq #28,d0
    57a6:	|  |  |  |  |                                                add.l 80(sp),d0
    57aa:	|  |  |  |  |                                                clr.l -(sp)
    57ac:	|  |  |  |  |                                                clr.l -(sp)
    57ae:	|  |  |  |  |                                                move.l d0,-(sp)
    57b0:	|  |  |  |  |                                                jsr 154c0 <setVariable>
    57b6:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    57ba:	|  |  |  |  +----------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    57be:	|  |  |  |  |                                                move.l 68(sp),d1
    57c2:	|  |  |  |  |                                                moveq #28,d0
    57c4:	|  |  |  |  |                                                add.l 80(sp),d0
    57c8:	|  |  |  |  |                                                move.l d1,-(sp)
    57ca:	|  |  |  |  |                                                pea 5 <_start+0x5>
    57ce:	|  |  |  |  |                                                move.l d0,-(sp)
    57d0:	|  |  |  |  |                                                jsr 154c0 <setVariable>
    57d6:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    57da:	|  |  |  |  +----------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    57de:	|  |  |  |  |                                                move.l 68(sp),d1
    57e2:	|  |  |  |  |                                                moveq #28,d0
    57e4:	|  |  |  |  |                                                add.l 80(sp),d0
    57e8:	|  |  |  |  |                                                move.l d1,-(sp)
    57ea:	|  |  |  |  |                                                pea 1 <_start+0x1>
    57ee:	|  |  |  |  |                                                move.l d0,-(sp)
    57f0:	|  |  |  |  |                                                jsr 154c0 <setVariable>
    57f6:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    57fa:	|  |  |  |  +----------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    57fe:	|  |  |  |  |                                                moveq #28,d0
    5800:	|  |  |  |  |                                                add.l 80(sp),d0
    5804:	|  |  |  |  |                                                movea.l 80(sp),a0
    5808:	|  |  |  |  |                                                movea.l 20(a0),a0
    580c:	|  |  |  |  |                                                move.l 68(sp),d1
    5810:	|  |  |  |  |                                                lsl.l #3,d1
    5812:	|  |  |  |  |                                                add.l a0,d1
    5814:	|  |  |  |  |                                                move.l d0,-(sp)
    5816:	|  |  |  |  |                                                move.l d1,-(sp)
    5818:	|  |  |  |  |                                                jsr 15088 <copyVariable>
    581e:	|  |  |  |  |                                                addq.l #8,sp
    5820:	|  |  |  |  |                                                tst.w d0
    5822:	|  |  |  |  |  ,-------------------------------------------- bne.w 635e <continueFunction+0xe66>
    5826:	|  |  |  |  |  |                                             clr.w d0
    5828:	|  +--|--|--|--|-------------------------------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    582c:	|  |  |  |  |  |                                             moveq #28,d0
    582e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5832:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5834:	|  |  |  |  |  |                                             jsr 1510e <getBoolean>
    583a:	|  |  |  |  |  |                                             addq.l #4,sp
    583c:	|  |  |  |  |  |                                             tst.w d0
    583e:	|  |  |  |  |  |                                      ,----- beq.s 585a <continueFunction+0x362>
    5840:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    5844:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    5848:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    584a:	|  |  |  |  |  |                                      |      jsr 1510e <getBoolean>
    5850:	|  |  |  |  |  |                                      |      addq.l #4,sp
    5852:	|  |  |  |  |  |                                      |      tst.w d0
    5854:	|  |  |  |  |  |                                      +----- beq.s 585a <continueFunction+0x362>
    5856:	|  |  |  |  |  |                                      |      moveq #1,d0
    5858:	|  |  |  |  |  |                                      |  ,-- bra.s 585c <continueFunction+0x364>
    585a:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    585c:	|  |  |  |  |  |                                         '-> moveq #28,d1
    585e:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5862:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5864:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5868:	|  |  |  |  |  |                                             move.l d1,-(sp)
    586a:	|  |  |  |  |  |                                             jsr 154c0 <setVariable>
    5870:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5874:	|  |  |  |  |  |                                             moveq #24,d0
    5876:	|  |  |  |  |  |                                             add.l 80(sp),d0
    587a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    587c:	|  |  |  |  |  |                                             jsr 15552 <trimStack>
    5882:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5884:	|  |  |  |  +--|-------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    5888:	|  |  |  |  |  |                                             moveq #28,d0
    588a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    588e:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5890:	|  |  |  |  |  |                                             jsr 1510e <getBoolean>
    5896:	|  |  |  |  |  |                                             addq.l #4,sp
    5898:	|  |  |  |  |  |                                             tst.w d0
    589a:	|  |  |  |  |  |                                         ,-- bne.s 58b2 <continueFunction+0x3ba>
    589c:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    58a0:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    58a4:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    58a6:	|  |  |  |  |  |                                         |   jsr 1510e <getBoolean>
    58ac:	|  |  |  |  |  |                                         |   addq.l #4,sp
    58ae:	|  |  |  |  |  |                                         |   tst.w d0
    58b0:	|  |  |  |  |  |                                      ,--|-- beq.s 58b6 <continueFunction+0x3be>
    58b2:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    58b4:	|  |  |  |  |  |                                      |  ,-- bra.s 58b8 <continueFunction+0x3c0>
    58b6:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    58b8:	|  |  |  |  |  |                                         '-> moveq #28,d1
    58ba:	|  |  |  |  |  |                                             add.l 80(sp),d1
    58be:	|  |  |  |  |  |                                             move.l d0,-(sp)
    58c0:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    58c4:	|  |  |  |  |  |                                             move.l d1,-(sp)
    58c6:	|  |  |  |  |  |                                             jsr 154c0 <setVariable>
    58cc:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    58d0:	|  |  |  |  |  |                                             moveq #24,d0
    58d2:	|  |  |  |  |  |                                             add.l 80(sp),d0
    58d6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    58d8:	|  |  |  |  |  |                                             jsr 15552 <trimStack>
    58de:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    58e0:	|  |  |  |  +--|-------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    58e4:	|  |  |  |  |  |                                             move.l 68(sp),d1
    58e8:	|  |  |  |  |  |                                             moveq #28,d0
    58ea:	|  |  |  |  |  |                                             add.l 80(sp),d0
    58ee:	|  |  |  |  |  |                                             move.l d1,-(sp)
    58f0:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    58f4:	|  |  |  |  |  |                                             move.l d0,-(sp)
    58f6:	|  |  |  |  |  |                                             jsr 154c0 <setVariable>
    58fc:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5900:	|  |  |  |  +--|-------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    5904:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5908:	|  |  |  |  |  |                                             moveq #28,d0
    590a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    590e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5910:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    5914:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5916:	|  |  |  |  |  |                                             jsr 154c0 <setVariable>
    591c:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5920:	|  |  |  |  +--|-------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    5924:	|  |  |  |  |  |                                             move.l 68(sp),d1
    5928:	|  |  |  |  |  |                                             moveq #28,d0
    592a:	|  |  |  |  |  |                                             add.l 80(sp),d0
    592e:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5930:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    5934:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5936:	|  |  |  |  |  |                                             jsr 154c0 <setVariable>
    593c:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5940:	|  |  |  |  +--|-------------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    5944:	|  |  |  |  |  |                                             move.l 1cdea <dialogValue>,d0
    594a:	|  |  |  |  |  |                                             moveq #1,d1
    594c:	|  |  |  |  |  |                                             cmp.l d0,d1
    594e:	|  |  |  |  |  |  ,----------------------------------------- beq.w 6362 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    5952:	|  |  |  |  |  |  |                                          pea 18c91 <PutChar+0xb41>
    5958:	|  |  |  |  |  |  |                                          jsr 176ae <KPrintF>
    595e:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    5960:	|  |  |  |  |  |  |                                          clr.w d0
    5962:	|  +--|--|--|--|--|----------------------------------------- bra.w 63a2 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    5966:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    596a:	|  |  |  |  |  |  |                                          moveq #28,d0
    596c:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    5970:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    5972:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    5974:	|  |  |  |  |  |  |                                          jsr 14c52 <loadStringToVar>
    597a:	|  |  |  |  |  |  |                                          addq.l #8,sp
    597c:	|  |  |  |  |  |  |                                          tst.w d0
    597e:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 6366 <continueFunction+0xe6e>
					return FALSE;
    5982:	|  |  |  |  |  |  |  |                                       clr.w d0
    5984:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    5988:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    598c:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5990:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5992:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    5994:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5996:	|  |  |  |  |  |  |  |                                ,----- beq.s 59f4 <continueFunction+0x4fc>
    5998:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    599a:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    599c:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 5b88 <continueFunction+0x690>
    59a0:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    59a2:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 59ae <continueFunction+0x4b6>
    59a4:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    59a6:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    59a8:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 59f4 <continueFunction+0x4fc>
    59aa:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 5b88 <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    59ae:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    59b0:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    59b4:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 59e0 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    59b6:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    59b8:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    59bc:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    59be:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    59c0:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    59c2:	|  |  |  |  |  |  |  |              |                 |  |   jsr 154c0 <setVariable>
    59c8:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    59cc:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    59ce:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    59d2:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    59d4:	|  |  |  |  |  |  |  |              |                 |  |   jsr 15552 <trimStack>
    59da:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    59dc:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 5b9e <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    59e0:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 18cd2 <PutChar+0xb82>
    59e6:	|  |  |  |  |  |  |  |              |  |              |      jsr 176ae <KPrintF>
    59ec:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    59ee:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    59f0:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 63a2 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    59f4:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    59f8:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    59fc:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    5a00:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    5a02:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5a18 <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    5a04:	|  |  |  |  |  |  |  |              |  |                 |   pea 18d0e <PutChar+0xbbe>
    5a0a:	|  |  |  |  |  |  |  |              |  |                 |   jsr 176ae <KPrintF>
    5a10:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    5a12:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5a14:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 63a2 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5a18:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    5a1a:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5a1e:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5a20:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    5a24:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    5a28:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    5a2a:	|  |  |  |  |  |  |  |              |  |                     jsr 14bce <getValueType>
    5a30:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    5a34:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    5a36:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5a3e <continueFunction+0x546>
    5a38:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5a3a:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 63a2 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5a3e:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    5a42:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5a46:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    5a48:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    5a4a:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    5a4c:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5a6e <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    5a4e:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    5a52:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    5a54:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    5a58:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    5a5c:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    5a60:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    5a62:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5a64:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14858 <fastArrayGetByIndex>
    5a6a:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    5a6c:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 5a8e <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    5a6e:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    5a72:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    5a74:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    5a78:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    5a7c:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    5a80:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    5a82:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    5a84:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    5a86:	|  |  |  |  |  |  |  |              |  |              |      jsr 154e2 <stackGetByIndex>
    5a8c:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    5a8e:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    5a92:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    5a94:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5a98:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5a9a:	|  |  |  |  |  |  |  |              |  |                     jsr 15552 <trimStack>
    5aa0:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5aa2:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    5aa6:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5ac2 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    5aa8:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    5aaa:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    5aae:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5ab0:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5ab2:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5ab4:	|  |  |  |  |  |  |  |              |  |                 |   jsr 154c0 <setVariable>
    5aba:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    5abe:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 5b9c <continueFunction+0x6a4>
						switch (com) {
    5ac2:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    5ac4:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    5ac8:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 5ad6 <continueFunction+0x5de>
    5aca:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    5acc:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    5ad0:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 5b20 <continueFunction+0x628>
    5ad2:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 5b68 <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5ad6:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    5ada:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    5ade:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    5ae2:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    5ae4:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 14bce <getValueType>
    5aea:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    5aee:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    5af0:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 5af8 <continueFunction+0x600>
    5af2:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    5af4:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 5b82 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5af8:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    5afa:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    5afc:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    5b00:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    5b02:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    5b06:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    5b08:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 154c0 <setVariable>
    5b0e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    5b12:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    5b14:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    5b16:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    5b1a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    5b1e:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 5b86 <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5b20:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    5b24:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5b28:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    5b2c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    5b2e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14bce <getValueType>
    5b34:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    5b38:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    5b3a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 5b40 <continueFunction+0x648>
    5b3c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    5b3e:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 5b82 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    5b40:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    5b42:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    5b44:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    5b48:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    5b4a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    5b4e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    5b50:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 154c0 <setVariable>
    5b56:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    5b5a:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    5b5c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    5b5e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    5b62:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    5b66:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 5b86 <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    5b68:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    5b6a:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    5b6e:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    5b70:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    5b74:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 15088 <copyVariable>
    5b7a:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    5b7c:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    5b7e:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 5b9c <continueFunction+0x6a4>
    5b80:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5b82:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 63a2 <continueFunction+0xeaa>
				break;
    5b86:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 5b9c <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    5b88:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 18d2c <PutChar+0xbdc>
    5b8e:	|  |  |  |  |  |  |  |                 |  |                  jsr 176ae <KPrintF>
    5b94:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    5b96:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    5b98:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 63a2 <continueFunction+0xeaa>
				break;
    5b9c:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    5b9e:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 6380 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5ba2:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5ba6:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5baa:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5bac:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    5bae:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5bb0:	|  |  |  |  |  |  |  |                                   ,-- beq.s 5bbe <continueFunction+0x6c6>
    5bb2:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5bb4:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5bb6:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5c6a <continueFunction+0x772>
    5bba:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 5cc8 <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5bbe:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5bc2:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5bc6:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5bca:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5bcc:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5be2 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    5bce:	|  |  |  |  |  |  |  |                             |  |  |   pea 18d0e <PutChar+0xbbe>
    5bd4:	|  |  |  |  |  |  |  |                             |  |  |   jsr 176ae <KPrintF>
    5bda:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    5bdc:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5bde:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 63a2 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5be2:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    5be4:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5be8:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5bea:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    5bee:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5bf2:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5bf4:	|  |  |  |  |  |  |  |                             |  |      jsr 14bce <getValueType>
    5bfa:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5bfe:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5c00:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5c08 <continueFunction+0x710>
    5c02:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5c04:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 63a2 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    5c08:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5c0c:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5c10:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5c14:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5c16:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5c1a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5c1c:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    5c20:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5c24:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5c28:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5c2a:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5c2c:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    5c2e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5c30:	|  |  |  |  |  |  |  |                             |  |      jsr 76e8 <stackSetByIndex>
    5c36:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5c3a:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5c3c:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5c44 <continueFunction+0x74c>
						return FALSE;
    5c3e:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5c40:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 63a2 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    5c44:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    5c46:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5c4a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5c4c:	|  |  |  |  |  |  |  |                             |  |      jsr 15552 <trimStack>
    5c52:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5c54:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5c56:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5c5a:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5c5c:	|  |  |  |  |  |  |  |                             |  |      jsr 15552 <trimStack>
    5c62:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5c64:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5c66:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 6380 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5c6a:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    5c6c:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    5c70:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5c72:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5c76:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5c7a:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5c7c:	|  |  |  |  |  |  |  |                             |         jsr 14bce <getValueType>
    5c82:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5c86:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5c88:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5c90 <continueFunction+0x798>
    5c8a:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5c8c:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 63a2 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5c90:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5c94:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5c96:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5c9a:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5c9e:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5ca2:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5ca4:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5ca6:	|  |  |  |  |  |  |  |                             |         jsr 14858 <fastArrayGetByIndex>
    5cac:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5cae:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5cb2:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5cc2 <continueFunction+0x7ca>
    5cb4:	|  |  |  |  |  |  |  |                             |     |   pea 18d50 <PutChar+0xc00>
    5cba:	|  |  |  |  |  |  |  |                             |     |   jsr 176ae <KPrintF>
    5cc0:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5cc2:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    5cc4:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 63a2 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5cc8:	|  |  |  |  |  |  |  |                             '-------> pea 18d2c <PutChar+0xbdc>
    5cce:	|  |  |  |  |  |  |  |                                       jsr 176ae <KPrintF>
    5cd4:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5cd6:	|  |  |  |  |  |  |  |                                       clr.w d0
    5cd8:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 63a2 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5cdc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5ce0:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5ce4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5ce8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5cea:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5cec:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5cee:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5cf2:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5cf6:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5cf8:	|  |  |  |  |  |  |  |                                       jsr 14bce <getValueType>
    5cfe:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5d02:	|  |  |  |  |  |  |  |                                       tst.w d0
    5d04:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5d0c <continueFunction+0x814>
    5d06:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5d08:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 63a2 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5d0c:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    5d10:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5d12:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5d16:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5d18:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5d1c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d1e:	|  |  |  |  |  |  |  |                                       jsr 154c0 <setVariable>
    5d24:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5d28:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5d2c:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5d2e:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5d30:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5d34:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5d38:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5d3c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5d3e:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5d40:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5d42:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5d46:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d48:	|  |  |  |  |  |  |  |                                       jsr 154c0 <setVariable>
    5d4e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5d52:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5d56:	|  |  |  |  |  |  |  |                                       move.l 1ce38 <globalVars>,d1
    5d5c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5d60:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5d62:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5d64:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d66:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5d6a:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5d6e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5d70:	|  |  |  |  |  |  |  |                                       jsr 14bce <getValueType>
    5d76:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5d7a:	|  |  |  |  |  |  |  |                                       tst.w d0
    5d7c:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5d84 <continueFunction+0x88c>
    5d7e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5d80:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 63a2 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5d84:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5d88:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5d8a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5d8e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5d90:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5d94:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d96:	|  |  |  |  |  |  |  |                                       jsr 154c0 <setVariable>
    5d9c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5da0:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5da4:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5da6:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5da8:	|  |  |  |  |  |  |  |                                       movea.l 1ce38 <globalVars>,a0
    5dae:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5db2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5db4:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5db6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5db8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5dbc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5dbe:	|  |  |  |  |  |  |  |                                       jsr 154c0 <setVariable>
    5dc4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5dc8:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5dcc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5dd0:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5dd4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5dd8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5dda:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5ddc:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5dde:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5de2:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5de6:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5de8:	|  |  |  |  |  |  |  |                                       jsr 14bce <getValueType>
    5dee:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5df2:	|  |  |  |  |  |  |  |                                       tst.w d0
    5df4:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5dfc <continueFunction+0x904>
    5df6:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5df8:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 63a2 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5dfc:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    5e00:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5e02:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5e06:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5e08:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5e0c:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5e0e:	|  |  |  |  |  |  |  |                                       jsr 154c0 <setVariable>
    5e14:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5e18:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5e1c:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5e1e:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5e20:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5e24:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5e28:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5e2c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5e2e:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5e30:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5e32:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5e36:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5e38:	|  |  |  |  |  |  |  |                                       jsr 154c0 <setVariable>
    5e3e:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5e42:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5e46:	|  |  |  |  |  |  |  |                                       move.l 1ce38 <globalVars>,d1
    5e4c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5e50:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5e52:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5e54:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5e56:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5e5a:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    5e5e:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5e60:	|  |  |  |  |  |  |  |                                       jsr 14bce <getValueType>
    5e66:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5e6a:	|  |  |  |  |  |  |  |                                       tst.w d0
    5e6c:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5e74 <continueFunction+0x97c>
    5e6e:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5e70:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 63a2 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5e74:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    5e78:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5e7a:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5e7e:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5e80:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5e84:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5e86:	|  |  |  |  |  |  |  |                                       jsr 154c0 <setVariable>
    5e8c:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    5e90:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5e94:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5e96:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5e98:	|  |  |  |  |  |  |  |                                       movea.l 1ce38 <globalVars>,a0
    5e9e:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5ea2:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5ea4:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5ea6:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ea8:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5eac:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5eae:	|  |  |  |  |  |  |  |                                       jsr 154c0 <setVariable>
    5eb4:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5eb8:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5ebc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5ec0:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5ec4:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5ec8:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5eca:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5ecc:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5ece:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5ed2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ed4:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5ed6:	|  |  |  |  |  |  |  |                                       jsr 15088 <copyVariable>
    5edc:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5ede:	|  |  |  |  |  |  |  |                                       tst.w d0
    5ee0:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 636a <continueFunction+0xe72>
    5ee4:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5ee6:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5eea:	|  |  |  |  |  |  |  |  |                                    move.l 1ce38 <globalVars>,d1
    5ef0:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5ef4:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5ef6:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5ef8:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5efa:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5efe:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5f00:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5f02:	|  |  |  |  |  |  |  |  |                                    jsr 15088 <copyVariable>
    5f08:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5f0a:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    5f0c:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 636e <continueFunction+0xe76>
    5f10:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    5f12:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5f16:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    5f18:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5f1c:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1ce38 <globalVars>,a0
    5f22:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5f26:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    5f28:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    5f2a:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    5f2c:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    5f2e:	|  |  |  |  |  |  |  |  |  |                                 jsr 15088 <copyVariable>
    5f34:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    5f36:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    5f38:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 6372 <continueFunction+0xe7a>
    5f3c:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    5f3e:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    5f42:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    5f44:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    5f48:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    5f4a:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    5f4e:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    5f50:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    5f52:	|  |  |  |  |  |  |  |  |  |  |                              jsr 1440a <addVarToStack>
    5f58:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5f5a:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5f5c:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 6376 <continueFunction+0xe7e>
    5f60:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5f62:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5f66:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5f68:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5f6c:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    5f6e:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5f72:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5f74:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5f76:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 14490 <addVarToStackQuick>
    5f7c:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    5f7e:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    5f80:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 637a <continueFunction+0xe82>
    5f84:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5f86:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 63a2 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5f8c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5f90:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5f92:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1510e <getBoolean>
    5f98:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5f9c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5f9e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    5fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5fa2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5fa4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5fa6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5faa:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5fac:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    5fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5fb2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 154c0 <setVariable>
    5fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5fbc:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    5fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5fc2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5fc8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1510e <getBoolean>
    5fce:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5fd0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5fd2:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 637e <continueFunction+0xe86>
				advanceNow = FALSE;
    5fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5fda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 637e <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5ff6:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6380 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5ffa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    6000:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    6002:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    6006:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    600a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    600c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14bce <getValueType>
    6012:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    6016:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    6018:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 6020 <continueFunction+0xb28>
    601a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    601c:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 63a2 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    6020:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    6024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    6026:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    6028:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    602a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    602e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    6030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    6034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    6036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 154c0 <setVariable>
    603c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    6040:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 6380 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    6044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    6048:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    604c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 6336 <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    6050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    6052:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    6056:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 60d2 <continueFunction+0xbda>
    6058:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    605a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    605e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 611c <continueFunction+0xc24>
    6062:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    6064:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    6068:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 6076 <continueFunction+0xb7e>
    606a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    606c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    6070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 60a4 <continueFunction+0xbac>
    6072:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 611c <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    6076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    6078:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    607c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    6080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    6084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    6086:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    6088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14504 <addVariablesInSecond>
    608e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    6090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    6092:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    6096:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    6098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 15552 <trimStack>
    609e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    60a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 634a <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    60a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    60a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    60aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    60ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    60b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    60b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    60b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 145c2 <compareVariablesInSecond>
    60bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    60be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    60c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    60c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    60c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 15552 <trimStack>
    60cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    60ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 634a <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    60d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    60d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    60d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    60dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    60e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    60e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    60e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 145c2 <compareVariablesInSecond>
    60ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    60ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    60ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    60f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    60f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 15552 <trimStack>
    60fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    60fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    6100:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    6104:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    6106:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    6108:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    610a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    6110:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    6114:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    6118:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 634a <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    611c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    6120:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    6124:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    6126:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    612a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    612e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    6130:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14bce <getValueType>
    6136:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    613a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    613c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 6144 <continueFunction+0xc4c>
    613e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    6140:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 63a2 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    6144:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    6146:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    614a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    614c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    6150:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    6154:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    6156:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14bce <getValueType>
    615c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    6160:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    6162:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 616a <continueFunction+0xc72>
    6164:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    6166:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 63a2 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    616a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    616c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    6170:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    6172:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 15552 <trimStack>
    6178:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    617a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    617c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    6180:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    6182:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    6184:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 6348 <continueFunction+0xe50>
    6188:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    618a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    618c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #24984,a0
    6192:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    6194:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (6198 <continueFunction+0xca0>,pc,d0.w)
    6198:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    619c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    619e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    61a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    61a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    61b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    61b8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    61c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    61c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    61cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    61d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    61d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    61d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1803a <__mulsi3>
    61da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    61dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    61de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    61e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    61e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    61e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    61ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    61ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 154c0 <setVariable>
    61f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    61f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 634a <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    61fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    61fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6202:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    6204:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6206:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    620a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    620c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6210:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6212:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 154c0 <setVariable>
    6218:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    621c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 634a <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    6220:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    6224:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    6228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    622a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    622c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 180e6 <__modsi3>
    6232:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    6234:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    6236:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6238:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    623c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    623e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6242:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6244:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 154c0 <setVariable>
    624a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    624e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 634a <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    6252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    6256:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    625a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    625c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    625e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 180b8 <__divsi3>
    6264:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    6266:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    6268:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    626a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    626e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6274:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6276:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 154c0 <setVariable>
    627c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6280:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 634a <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    6284:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6288:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    628c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    628e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    6290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    629c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    629e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    62a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    62a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 154c0 <setVariable>
    62aa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    62ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 634a <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    62b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    62b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    62ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    62bc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    62be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    62c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    62c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    62c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    62c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    62ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    62cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    62d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    62d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 154c0 <setVariable>
    62d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    62dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 634a <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    62de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    62e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    62e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    62e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    62ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    62ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    62ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    62f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    62f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    62f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    62f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    62fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    62fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 154c0 <setVariable>
    6304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 634a <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    630a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    630e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6312:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    6316:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    631a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    631c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    631e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6322:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6324:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    632a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 154c0 <setVariable>
    6330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6334:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 634a <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    6336:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 18d71 <PutChar+0xc21>
    633c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 176ae <KPrintF>
    6342:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    6344:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    6346:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 63a2 <continueFunction+0xeaa>
						break;
    6348:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    634a:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 6380 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    634c:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 18d89 <PutChar+0xc39>
    6352:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 176ae <KPrintF>
    6358:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    635a:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    635c:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 63a2 <continueFunction+0xeaa>
			break;
    635e:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    6360:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    6362:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    6364:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    6366:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    6368:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    636a:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    636c:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    636e:	|  |  |     |              '--|--|--|--|-------------------> nop
    6370:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    6372:	|  |  |     |                 '--|--|--|-------------------> nop
    6374:	|  |  |     +--------------------|--|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    6376:	|  |  |     |                    '--|--|-------------------> nop
    6378:	|  |  |     +-----------------------|--|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    637a:	|  |  |     |                       '--|-------------------> nop
    637c:	|  |  |     +--------------------------|-------------------- bra.s 6380 <continueFunction+0xe88>
			break;
    637e:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    6380:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    6384:	+--|--|----------------------------------------------------- beq.s 6398 <continueFunction+0xea0>
    6386:	|  |  |                                                      movea.l 80(sp),a0
    638a:	|  |  |                                                      move.l 36(a0),d0
    638e:	|  |  |                                                      addq.l #1,d0
    6390:	|  |  |                                                      movea.l 80(sp),a0
    6394:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    6398:	'--|--|----------------------------------------------------> tst.w 74(sp)
    639c:	   |  '----------------------------------------------------- bne.w 5520 <continueFunction+0x28>

	}
	return TRUE;
    63a0:	   |                                                         moveq #1,d0
}
    63a2:	   '-------------------------------------------------------> lea 76(sp),sp
    63a6:	                                                             rts

000063a8 <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	KPrintF("finishFunction %d started\n", &fun->originalNumber);
    63a8:	    move.l 4(sp),d0
    63ac:	    move.l d0,-(sp)
    63ae:	    pea 18db5 <PutChar+0xc65>
    63b4:	    jsr 176ae <KPrintF>
    63ba:	    addq.l #8,sp

	pauseFunction (fun);
    63bc:	    move.l 4(sp),-(sp)
    63c0:	    jsr 743e <pauseFunction>
    63c6:	    addq.l #4,sp

	//Keep function loaed in memory if it is the focus function
	if( fun != currentEvents -> focusFunction) {	
    63c8:	    movea.l 1c804 <currentEvents>,a0
    63ce:	    move.l 20(a0),d0
    63d2:	    cmp.l 4(sp),d0
    63d6:	,-- beq.s 63e4 <finishFunction+0x3c>
		unloadFunction (fun);
    63d8:	|   move.l 4(sp),-(sp)
    63dc:	|   jsr 78e8 <unloadFunction>
    63e2:	|   addq.l #4,sp
	}	
}
    63e4:	'-> nop
    63e6:	    rts

000063e8 <freezeSubs>:

void freezeSubs () {
    63e8:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    63ea:	          move.l 1ce22 <allRunningFunctions>,(sp)

	while (thisFunction) {
    63f0:	   ,----- bra.s 640e <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    63f2:	,--|----> movea.l (sp),a0
    63f4:	|  |      move.w 52(a0),d0
    63f8:	|  |  ,-- bne.s 6408 <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    63fa:	|  |  |   movea.l (sp),a0
    63fc:	|  |  |   move.b 56(a0),d0
    6400:	|  |  |   addq.b #1,d0
    6402:	|  |  |   movea.l (sp),a0
    6404:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    6408:	|  |  '-> movea.l (sp),a0
    640a:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    640e:	|  '----> tst.l (sp)
    6410:	'-------- bne.s 63f2 <freezeSubs+0xa>
	}
}
    6412:	          nop
    6414:	          nop
    6416:	          addq.l #4,sp
    6418:	          rts

0000641a <handleInput>:

BOOL handleInput () {
    641a:	             lea -16(sp),sp
    641e:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    6420:	             move.l 1cf9a <overRegion>,d0
    6426:	         ,-- bne.s 642e <handleInput+0x14>
    6428:	         |   jsr 15e0a <getOverRegion>

	if (input.justMoved) {
    642e:	         '-> move.w 1ce40 <input+0x4>,d0
    6434:	         ,-- beq.s 6472 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    6436:	         |   movea.l 1c804 <currentEvents>,a0
    643c:	         |   move.l 16(a0),d0
    6440:	         +-- beq.s 6472 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6442:	         |   move.l 1ce5a <noStack>,d1
    6448:	         |   movea.l 1c804 <currentEvents>,a0
    644e:	         |   move.l 16(a0),d0
    6452:	         |   pea 1 <_start+0x1>
    6456:	         |   move.l d1,-(sp)
    6458:	         |   clr.l -(sp)
    645a:	         |   clr.l -(sp)
    645c:	         |   move.l d0,-(sp)
    645e:	         |   jsr 783c <startNewFunctionNum>
    6464:	         |   lea 20(sp),sp
    6468:	         |   tst.l d0
    646a:	         +-- bne.s 6472 <handleInput+0x58>
    646c:	         |   clr.w d0
    646e:	,--------|-- bra.w 6678 <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    6472:	|        '-> clr.w 1ce40 <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    6478:	|            move.l 1ce52 <lastRegion>,d1
    647e:	|            move.l 1cf9a <overRegion>,d0
    6484:	|            cmp.l d1,d0
    6486:	|  ,-------- beq.w 655e <handleInput+0x144>
    648a:	|  |         movea.l 1c804 <currentEvents>,a0
    6490:	|  |         move.l 20(a0),d0
    6494:	|  +-------- beq.w 655e <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    6498:	|  |         moveq #12,d0
    649a:	|  |         move.l d0,16(sp)
    649e:	|  |         clr.l 12(sp)
    64a2:	|  |         move.l 1ce8a <SysBase>,d0
    64a8:	|  |         movea.l d0,a6
    64aa:	|  |         move.l 16(sp),d0
    64ae:	|  |         move.l 12(sp),d1
    64b2:	|  |         jsr -684(a6)
    64b6:	|  |         move.l d0,8(sp)
    64ba:	|  |         move.l 8(sp),d0
    64be:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    64c2:	|  |         move.l 4(sp),d0
    64c6:	|  |     ,-- bne.s 64dc <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    64c8:	|  |     |   pea 18dd0 <PutChar+0xc80>
    64ce:	|  |     |   jsr 176ae <KPrintF>
    64d4:	|  |     |   addq.l #4,sp
			return FALSE;
    64d6:	|  |     |   clr.w d0
    64d8:	+--|-----|-- bra.w 6678 <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    64dc:	|  |     '-> movea.l 4(sp),a0
    64e0:	|  |         clr.l (a0)
		if (overRegion) {
    64e2:	|  |         move.l 1cf9a <overRegion>,d0
    64e8:	|  |  ,----- beq.s 6510 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    64ea:	|  |  |      movea.l 1cf9a <overRegion>,a0
    64f0:	|  |  |      movea.l 28(a0),a0
    64f4:	|  |  |      move.l 4(a0),d1
    64f8:	|  |  |      move.l 4(sp),d0
    64fc:	|  |  |      move.l d1,-(sp)
    64fe:	|  |  |      pea 7 <_start+0x7>
    6502:	|  |  |      move.l d0,-(sp)
    6504:	|  |  |      jsr 154c0 <setVariable>
    650a:	|  |  |      lea 12(sp),sp
    650e:	|  |  |  ,-- bra.s 6526 <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    6510:	|  |  '--|-> move.l 4(sp),d0
    6514:	|  |     |   clr.l -(sp)
    6516:	|  |     |   pea 1 <_start+0x1>
    651a:	|  |     |   move.l d0,-(sp)
    651c:	|  |     |   jsr 154c0 <setVariable>
    6522:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;		
    6526:	|  |     '-> movea.l 4(sp),a0
    652a:	|  |         clr.l 8(a0)
		if (! startNewFunctionLoaded (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    652e:	|  |         movea.l 1c804 <currentEvents>,a0
    6534:	|  |         move.l 20(a0),d0
    6538:	|  |         pea 1 <_start+0x1>
    653c:	|  |         lea 8(sp),a0
    6540:	|  |         move.l a0,-(sp)
    6542:	|  |         clr.l -(sp)
    6544:	|  |         pea 1 <_start+0x1>
    6548:	|  |         move.l d0,-(sp)
    654a:	|  |         jsr 772c <startNewFunctionLoaded>
    6550:	|  |         lea 20(sp),sp
    6554:	|  |         tst.l d0
    6556:	|  +-------- bne.s 655e <handleInput+0x144>
    6558:	|  |         clr.w d0
    655a:	+--|-------- bra.w 6678 <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    655e:	|  '-------> move.w 1ce42 <input+0x6>,d0
    6564:	|        ,-- beq.s 65a2 <handleInput+0x188>
    6566:	|        |   movea.l 1c804 <currentEvents>,a0
    656c:	|        |   move.l 4(a0),d0
    6570:	|        +-- beq.s 65a2 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6572:	|        |   move.l 1ce5a <noStack>,d1
    6578:	|        |   movea.l 1c804 <currentEvents>,a0
    657e:	|        |   move.l 4(a0),d0
    6582:	|        |   pea 1 <_start+0x1>
    6586:	|        |   move.l d1,-(sp)
    6588:	|        |   clr.l -(sp)
    658a:	|        |   clr.l -(sp)
    658c:	|        |   move.l d0,-(sp)
    658e:	|        |   jsr 783c <startNewFunctionNum>
    6594:	|        |   lea 20(sp),sp
    6598:	|        |   tst.l d0
    659a:	|        +-- bne.s 65a2 <handleInput+0x188>
    659c:	|        |   clr.w d0
    659e:	+--------|-- bra.w 6678 <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    65a2:	|        '-> move.w 1ce44 <input+0x8>,d0
    65a8:	|        ,-- beq.s 65e6 <handleInput+0x1cc>
    65aa:	|        |   movea.l 1c804 <currentEvents>,a0
    65b0:	|        |   move.l 12(a0),d0
    65b4:	|        +-- beq.s 65e6 <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    65b6:	|        |   move.l 1ce5a <noStack>,d1
    65bc:	|        |   movea.l 1c804 <currentEvents>,a0
    65c2:	|        |   move.l 12(a0),d0
    65c6:	|        |   pea 1 <_start+0x1>
    65ca:	|        |   move.l d1,-(sp)
    65cc:	|        |   clr.l -(sp)
    65ce:	|        |   clr.l -(sp)
    65d0:	|        |   move.l d0,-(sp)
    65d2:	|        |   jsr 783c <startNewFunctionNum>
    65d8:	|        |   lea 20(sp),sp
    65dc:	|        |   tst.l d0
    65de:	|        +-- bne.s 65e6 <handleInput+0x1cc>
    65e0:	|        |   clr.w d0
    65e2:	+--------|-- bra.w 6678 <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    65e6:	|        '-> move.w 1ce3c <input>,d0
    65ec:	|        ,-- beq.s 6624 <handleInput+0x20a>
    65ee:	|        |   movea.l 1c804 <currentEvents>,a0
    65f4:	|        |   move.l (a0),d0
    65f6:	|        +-- beq.s 6624 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    65f8:	|        |   move.l 1ce5a <noStack>,d1
    65fe:	|        |   movea.l 1c804 <currentEvents>,a0
    6604:	|        |   move.l (a0),d0
    6606:	|        |   pea 1 <_start+0x1>
    660a:	|        |   move.l d1,-(sp)
    660c:	|        |   clr.l -(sp)
    660e:	|        |   clr.l -(sp)
    6610:	|        |   move.l d0,-(sp)
    6612:	|        |   jsr 783c <startNewFunctionNum>
    6618:	|        |   lea 20(sp),sp
    661c:	|        |   tst.l d0
    661e:	|        +-- bne.s 6624 <handleInput+0x20a>
    6620:	|        |   clr.w d0
    6622:	+--------|-- bra.s 6678 <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    6624:	|        '-> move.w 1ce3e <input+0x2>,d0
    662a:	|        ,-- beq.s 6666 <handleInput+0x24c>
    662c:	|        |   movea.l 1c804 <currentEvents>,a0
    6632:	|        |   move.l 8(a0),d0
    6636:	|        +-- beq.s 6666 <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    6638:	|        |   move.l 1ce5a <noStack>,d1
    663e:	|        |   movea.l 1c804 <currentEvents>,a0
    6644:	|        |   move.l 8(a0),d0
    6648:	|        |   pea 1 <_start+0x1>
    664c:	|        |   move.l d1,-(sp)
    664e:	|        |   clr.l -(sp)
    6650:	|        |   clr.l -(sp)
    6652:	|        |   move.l d0,-(sp)
    6654:	|        |   jsr 783c <startNewFunctionNum>
    665a:	|        |   lea 20(sp),sp
    665e:	|        |   tst.l d0
    6660:	|        +-- bne.s 6666 <handleInput+0x24c>
    6662:	|        |   clr.w d0
    6664:	+--------|-- bra.s 6678 <handleInput+0x25e>
	}

	lastRegion = overRegion;
    6666:	|        '-> move.l 1cf9a <overRegion>,d0
    666c:	|            move.l d0,1ce52 <lastRegion>
	return runSludge ();
    6672:	|            jsr 7500 <runSludge>
}
    6678:	'----------> movea.l (sp)+,a6
    667a:	             lea 16(sp),sp
    667e:	             rts

00006680 <initSludge>:

BOOL initSludge (char * filename) {
    6680:	             lea -292(sp),sp
    6684:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    6688:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    668c:	             jsr b0b8 <makeNullAnim>
    6692:	             move.l d0,1cd8e <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    6698:	             pea 1ce34 <gameVersion>
    669e:	             pea 18e06 <PutChar+0xcb6>
    66a4:	             pea 45 <_start+0x45>
    66a8:	             pea 47 <_start+0x47>
    66ac:	             move.l 332(sp),-(sp)
    66b0:	             jsr 70ce <openAndVerify>
    66b6:	             lea 20(sp),sp
    66ba:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    66be:	         ,-- bne.s 66c6 <initSludge+0x46>
    66c0:	         |   clr.w d0
    66c2:	,--------|-- bra.w 6dee <initSludge+0x76e>
	if (FGetC (fp)) {
    66c6:	|        '-> move.l 288(sp),284(sp)
    66cc:	|            move.l 1ce92 <DOSBase>,d0
    66d2:	|            movea.l d0,a6
    66d4:	|            move.l 284(sp),d1
    66d8:	|            jsr -306(a6)
    66dc:	|            move.l d0,280(sp)
    66e0:	|            move.l 280(sp),d0
    66e4:	|  ,-------- beq.w 688e <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    66e8:	|  |         move.l 288(sp),-(sp)
    66ec:	|  |         jsr 6bc <get2bytes>
    66f2:	|  |         addq.l #4,sp
    66f4:	|  |         move.l d0,1ce5e <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    66fa:	|  |         move.l 1ce5e <numBIFNames>,d0
    6700:	|  |         move.l d0,276(sp)
    6704:	|  |         clr.l 272(sp)
    6708:	|  |         move.l 1ce8a <SysBase>,d0
    670e:	|  |         movea.l d0,a6
    6710:	|  |         move.l 276(sp),d0
    6714:	|  |         move.l 272(sp),d1
    6718:	|  |         jsr -684(a6)
    671c:	|  |         move.l d0,268(sp)
    6720:	|  |         move.l 268(sp),d0
    6724:	|  |         move.l d0,1ce1a <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    672a:	|  |         move.l 1ce1a <allBIFNames>,d0
    6730:	|  |     ,-- bne.s 6738 <initSludge+0xb8>
    6732:	|  |     |   clr.w d0
    6734:	+--|-----|-- bra.w 6dee <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    6738:	|  |     '-> clr.l 304(sp)
    673c:	|  |     ,-- bra.s 6762 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    673e:	|  |  ,--|-> move.l 1ce1a <allBIFNames>,d1
    6744:	|  |  |  |   move.l 304(sp),d0
    6748:	|  |  |  |   add.l d0,d0
    674a:	|  |  |  |   add.l d0,d0
    674c:	|  |  |  |   movea.l d1,a2
    674e:	|  |  |  |   adda.l d0,a2
    6750:	|  |  |  |   move.l 288(sp),-(sp)
    6754:	|  |  |  |   jsr b02 <readString>
    675a:	|  |  |  |   addq.l #4,sp
    675c:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    675e:	|  |  |  |   addq.l #1,304(sp)
    6762:	|  |  |  '-> move.l 1ce5e <numBIFNames>,d0
    6768:	|  |  |      cmp.l 304(sp),d0
    676c:	|  |  '----- bgt.s 673e <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    676e:	|  |         move.l 288(sp),-(sp)
    6772:	|  |         jsr 6bc <get2bytes>
    6778:	|  |         addq.l #4,sp
    677a:	|  |         move.l d0,1ce6a <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    6780:	|  |         move.l 1ce6a <numUserFunc>,d0
    6786:	|  |         move.l d0,264(sp)
    678a:	|  |         clr.l 260(sp)
    678e:	|  |         move.l 1ce8a <SysBase>,d0
    6794:	|  |         movea.l d0,a6
    6796:	|  |         move.l 264(sp),d0
    679a:	|  |         move.l 260(sp),d1
    679e:	|  |         jsr -684(a6)
    67a2:	|  |         move.l d0,256(sp)
    67a6:	|  |         move.l 256(sp),d0
    67aa:	|  |         move.l d0,1ce26 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    67b0:	|  |         move.l 1ce26 <allUserFunc>,d0
    67b6:	|  |     ,-- bne.s 67be <initSludge+0x13e>
    67b8:	|  |     |   clr.w d0
    67ba:	+--|-----|-- bra.w 6dee <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    67be:	|  |     '-> clr.l 300(sp)
    67c2:	|  |     ,-- bra.s 67e8 <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    67c4:	|  |  ,--|-> move.l 1ce26 <allUserFunc>,d1
    67ca:	|  |  |  |   move.l 300(sp),d0
    67ce:	|  |  |  |   add.l d0,d0
    67d0:	|  |  |  |   add.l d0,d0
    67d2:	|  |  |  |   movea.l d1,a2
    67d4:	|  |  |  |   adda.l d0,a2
    67d6:	|  |  |  |   move.l 288(sp),-(sp)
    67da:	|  |  |  |   jsr b02 <readString>
    67e0:	|  |  |  |   addq.l #4,sp
    67e2:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    67e4:	|  |  |  |   addq.l #1,300(sp)
    67e8:	|  |  |  '-> move.l 1ce6a <numUserFunc>,d0
    67ee:	|  |  |      cmp.l 300(sp),d0
    67f2:	|  |  '----- bgt.s 67c4 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    67f4:	|  |         move.l 1ce34 <gameVersion>,d0
    67fa:	|  |         cmpi.l #258,d0
    6800:	|  +-------- ble.w 688e <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    6804:	|  |         move.l 288(sp),-(sp)
    6808:	|  |         jsr 6bc <get2bytes>
    680e:	|  |         addq.l #4,sp
    6810:	|  |         move.l d0,1ce66 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    6816:	|  |         move.l 1ce66 <numResourceNames>,d0
    681c:	|  |         add.l d0,d0
    681e:	|  |         add.l d0,d0
    6820:	|  |         move.l d0,252(sp)
    6824:	|  |         clr.l 248(sp)
    6828:	|  |         move.l 1ce8a <SysBase>,d0
    682e:	|  |         movea.l d0,a6
    6830:	|  |         move.l 252(sp),d0
    6834:	|  |         move.l 248(sp),d1
    6838:	|  |         jsr -684(a6)
    683c:	|  |         move.l d0,244(sp)
    6840:	|  |         move.l 244(sp),d0
    6844:	|  |         move.l d0,1ce1e <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    684a:	|  |         move.l 1ce1e <allResourceNames>,d0
    6850:	|  |     ,-- bne.s 6858 <initSludge+0x1d8>
    6852:	|  |     |   clr.w d0
    6854:	+--|-----|-- bra.w 6dee <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    6858:	|  |     '-> clr.l 296(sp)
    685c:	|  |     ,-- bra.s 6882 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    685e:	|  |  ,--|-> move.l 1ce1e <allResourceNames>,d1
    6864:	|  |  |  |   move.l 296(sp),d0
    6868:	|  |  |  |   add.l d0,d0
    686a:	|  |  |  |   add.l d0,d0
    686c:	|  |  |  |   movea.l d1,a2
    686e:	|  |  |  |   adda.l d0,a2
    6870:	|  |  |  |   move.l 288(sp),-(sp)
    6874:	|  |  |  |   jsr b02 <readString>
    687a:	|  |  |  |   addq.l #4,sp
    687c:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    687e:	|  |  |  |   addq.l #1,296(sp)
    6882:	|  |  |  '-> move.l 1ce66 <numResourceNames>,d0
    6888:	|  |  |      cmp.l 296(sp),d0
    688c:	|  |  '----- bgt.s 685e <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    688e:	|  '-------> move.l #129,1ce46 <input+0xa>
	input.mouseY = 100;
    6898:	|            moveq #100,d0
    689a:	|            move.l d0,1ce4a <input+0xe>
	winWidth = get2bytes (fp);
    68a0:	|            move.l 288(sp),-(sp)
    68a4:	|            jsr 6bc <get2bytes>
    68aa:	|            addq.l #4,sp
    68ac:	|            move.l d0,1cdde <winWidth>
	winHeight = get2bytes (fp);
    68b2:	|            move.l 288(sp),-(sp)
    68b6:	|            jsr 6bc <get2bytes>
    68bc:	|            addq.l #4,sp
    68be:	|            move.l d0,1cde2 <winHeight>
	specialSettings = FGetC (fp);
    68c4:	|            move.l 288(sp),240(sp)
    68ca:	|            move.l 1ce92 <DOSBase>,d0
    68d0:	|            movea.l d0,a6
    68d2:	|            move.l 240(sp),d1
    68d6:	|            jsr -306(a6)
    68da:	|            move.l d0,236(sp)
    68de:	|            move.l 236(sp),d0
    68e2:	|            move.l d0,1ce6e <specialSettings>

	desiredfps = 1000/FGetC (fp);
    68e8:	|            move.l 288(sp),232(sp)
    68ee:	|            move.l 1ce92 <DOSBase>,d0
    68f4:	|            movea.l d0,a6
    68f6:	|            move.l 232(sp),d1
    68fa:	|            jsr -306(a6)
    68fe:	|            move.l d0,228(sp)
    6902:	|            move.l 228(sp),d0
    6906:	|            move.l d0,-(sp)
    6908:	|            pea 3e8 <encodeFilename+0xea>
    690c:	|            jsr 180b8 <__divsi3>
    6912:	|            addq.l #8,sp
    6914:	|            move.l d0,1c816 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    691a:	|            move.l 288(sp),-(sp)
    691e:	|            jsr b02 <readString>
    6924:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    6926:	|            move.l 288(sp),224(sp)
    692c:	|            move.l #118316,220(sp)
    6934:	|            moveq #8,d1
    6936:	|            move.l d1,216(sp)
    693a:	|            moveq #1,d0
    693c:	|            move.l d0,212(sp)
    6940:	|            move.l 1ce92 <DOSBase>,d0
    6946:	|            movea.l d0,a6
    6948:	|            move.l 224(sp),d1
    694c:	|            move.l 220(sp),d2
    6950:	|            move.l 216(sp),d3
    6954:	|            move.l 212(sp),d4
    6958:	|            jsr -324(a6)
    695c:	|            move.l d0,208(sp)
    6960:	|            move.l 208(sp),d0
    6964:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    6968:	|            moveq #1,d1
    696a:	|            cmp.l 204(sp),d1
    696e:	|        ,-- beq.s 697e <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    6970:	|        |   pea 18e3f <PutChar+0xcef>
    6976:	|        |   jsr 176ae <KPrintF>
    697c:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    697e:	|        '-> move.l 1ce34 <gameVersion>,d0
    6984:	|            cmpi.l #258,d0
    698a:	|        ,-- ble.s 699a <initSludge+0x31a>
    698c:	|        |   move.l 288(sp),-(sp)
    6990:	|        |   jsr b02 <readString>
    6996:	|        |   addq.l #4,sp
    6998:	|     ,--|-- bra.s 69ae <initSludge+0x32e>
    699a:	|     |  '-> pea 18e5d <PutChar+0xd0d>
    69a0:	|     |      pea 18e5d <PutChar+0xd0d>
    69a6:	|     |      jsr 140fa <joinStrings>
    69ac:	|     |      addq.l #8,sp
    69ae:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    69b2:	|            move.l 1ce34 <gameVersion>,d0
    69b8:	|            cmpi.l #258,d0
    69be:	|     ,----- ble.s 69e0 <initSludge+0x360>
    69c0:	|     |      move.l 288(sp),196(sp)
    69c6:	|     |      move.l 1ce92 <DOSBase>,d0
    69cc:	|     |      movea.l d0,a6
    69ce:	|     |      move.l 196(sp),d1
    69d2:	|     |      jsr -306(a6)
    69d6:	|     |      move.l d0,192(sp)
    69da:	|     |      move.l 192(sp),d0
    69de:	|     |  ,-- bra.s 69e2 <initSludge+0x362>
    69e0:	|     '--|-> moveq #0,d0
    69e2:	|        '-> move.l d0,1cf66 <gameSettings+0x4>
	makeLanguageTable (fp);
    69e8:	|            move.l 288(sp),-(sp)
    69ec:	|            jsr 13ab0 <makeLanguageTable>
    69f2:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    69f4:	|            move.l 1ce34 <gameVersion>,d0
    69fa:	|            cmpi.l #261,d0
    6a00:	|        ,-- ble.s 6a4e <initSludge+0x3ce>
	{
		FGetC(fp);
    6a02:	|        |   move.l 288(sp),188(sp)
    6a08:	|        |   move.l 1ce92 <DOSBase>,d0
    6a0e:	|        |   movea.l d0,a6
    6a10:	|        |   move.l 188(sp),d1
    6a14:	|        |   jsr -306(a6)
    6a18:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    6a1c:	|        |   move.l 288(sp),180(sp)
    6a22:	|        |   move.l 1ce92 <DOSBase>,d0
    6a28:	|        |   movea.l d0,a6
    6a2a:	|        |   move.l 180(sp),d1
    6a2e:	|        |   jsr -306(a6)
    6a32:	|        |   move.l d0,176(sp)
		getFloat (fp);
    6a36:	|        |   move.l 288(sp),-(sp)
    6a3a:	|        |   jsr 7d8 <getFloat>
    6a40:	|        |   addq.l #4,sp
		getFloat (fp);
    6a42:	|        |   move.l 288(sp),-(sp)
    6a46:	|        |   jsr 7d8 <getFloat>
    6a4c:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    6a4e:	|        '-> move.l 288(sp),-(sp)
    6a52:	|            jsr b02 <readString>
    6a58:	|            addq.l #4,sp
    6a5a:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    6a5e:	|            pea 18e5e <PutChar+0xd0e>
    6a64:	|            move.l 176(sp),-(sp)
    6a68:	|            jsr 1407a <strcmp>
    6a6e:	|            addq.l #8,sp
    6a70:	|            tst.l d0
    6a72:	|        ,-- beq.s 6a7a <initSludge+0x3fa>
		return FALSE;
    6a74:	|        |   clr.w d0
    6a76:	+--------|-- bra.w 6dee <initSludge+0x76e>
	}
	FreeVec( checker);
    6a7a:	|        '-> move.l 172(sp),168(sp)
    6a80:	|            move.l 1ce8a <SysBase>,d0
    6a86:	|            movea.l d0,a6
    6a88:	|            movea.l 168(sp),a1
    6a8c:	|            jsr -690(a6)
	checker = NULL;
    6a90:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    6a94:	|            move.l 288(sp),164(sp)
    6a9a:	|            move.l 1ce92 <DOSBase>,d0
    6aa0:	|            movea.l d0,a6
    6aa2:	|            move.l 164(sp),d1
    6aa6:	|            jsr -306(a6)
    6aaa:	|            move.l d0,160(sp)
    6aae:	|            move.l 160(sp),d0
    6ab2:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    6ab6:	|            moveq #0,d0
    6ab8:	|            move.b 159(sp),d0
    6abc:	|            moveq #1,d1
    6abe:	|            and.l d1,d0
    6ac0:	|        ,-- beq.s 6b18 <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6ac2:	|        |   move.l 1ce92 <DOSBase>,d0
    6ac8:	|        |   movea.l d0,a6
    6aca:	|        |   jsr -60(a6)
    6ace:	|        |   move.l d0,38(sp)
    6ad2:	|        |   move.l 38(sp),d0
    6ad6:	|        |   move.l d0,34(sp)
    6ada:	|        |   move.l #101990,30(sp)
    6ae2:	|        |   moveq #54,d0
    6ae4:	|        |   move.l d0,26(sp)
    6ae8:	|        |   move.l 1ce92 <DOSBase>,d0
    6aee:	|        |   movea.l d0,a6
    6af0:	|        |   move.l 34(sp),d1
    6af4:	|        |   move.l 30(sp),d2
    6af8:	|        |   move.l 26(sp),d3
    6afc:	|        |   jsr -48(a6)
    6b00:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6b04:	|        |   pea 18e9d <PutChar+0xd4d>
    6b0a:	|        |   jsr 176ae <KPrintF>
    6b10:	|        |   addq.l #4,sp
		return FALSE;
    6b12:	|        |   clr.w d0
    6b14:	+--------|-- bra.w 6dee <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    6b18:	|        '-> move.l 288(sp),-(sp)
    6b1c:	|            jsr 6bc <get2bytes>
    6b22:	|            addq.l #4,sp
    6b24:	|            move.l d0,1ce62 <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    6b2a:	|            move.l 1ce62 <numGlobals>,d0
    6b30:	|            lsl.l #3,d0
    6b32:	|            move.l d0,154(sp)
    6b36:	|            clr.l 150(sp)
    6b3a:	|            move.l 1ce8a <SysBase>,d0
    6b40:	|            movea.l d0,a6
    6b42:	|            move.l 154(sp),d0
    6b46:	|            move.l 150(sp),d1
    6b4a:	|            jsr -684(a6)
    6b4e:	|            move.l d0,146(sp)
    6b52:	|            move.l 146(sp),d0
    6b56:	|            move.l d0,1ce38 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    6b5c:	|            move.l 1ce38 <globalVars>,d0
    6b62:	|        ,-- bne.s 6b80 <initSludge+0x500>
    6b64:	|        |   move.l 1ce62 <numGlobals>,d0
    6b6a:	|        +-- ble.s 6b80 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    6b6c:	|        |   pea 18ed5 <PutChar+0xd85>
    6b72:	|        |   jsr 176ae <KPrintF>
    6b78:	|        |   addq.l #4,sp
		return FALSE;
    6b7a:	|        |   clr.w d0
    6b7c:	+--------|-- bra.w 6dee <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    6b80:	|        '-> clr.l 308(sp)
    6b84:	|        ,-- bra.s 6b9c <initSludge+0x51c>
    6b86:	|     ,--|-> move.l 1ce38 <globalVars>,d1
    6b8c:	|     |  |   move.l 308(sp),d0
    6b90:	|     |  |   lsl.l #3,d0
    6b92:	|     |  |   movea.l d1,a0
    6b94:	|     |  |   adda.l d0,a0
    6b96:	|     |  |   clr.l (a0)
    6b98:	|     |  |   addq.l #1,308(sp)
    6b9c:	|     |  '-> move.l 1ce62 <numGlobals>,d0
    6ba2:	|     |      cmp.l 308(sp),d0
    6ba6:	|     '----- bgt.s 6b86 <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6ba8:	|            move.l 1cf66 <gameSettings+0x4>,d0
    6bae:	|            clr.l -(sp)
    6bb0:	|            move.l d0,-(sp)
    6bb2:	|            move.l 296(sp),-(sp)
    6bb6:	|            jsr 7d2a <setFileIndices>
    6bbc:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6bc0:	|            pea 1 <_start+0x1>
    6bc4:	|            jsr 79e4 <getNumberedString>
    6bca:	|            addq.l #4,sp
    6bcc:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6bd0:	|            move.l 142(sp),-(sp)
    6bd4:	|            jsr 2fe <encodeFilename>
    6bda:	|            addq.l #4,sp
    6bdc:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6be0:	|            move.l 142(sp),134(sp)
    6be6:	|            move.l 1ce8a <SysBase>,d0
    6bec:	|            movea.l d0,a6
    6bee:	|            movea.l 134(sp),a1
    6bf2:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6bf6:	|            move.l 138(sp),130(sp)
    6bfc:	|            move.l 1ce92 <DOSBase>,d0
    6c02:	|            movea.l d0,a6
    6c04:	|            move.l 130(sp),d1
    6c08:	|            jsr -120(a6)
    6c0c:	|            move.l d0,126(sp)
    6c10:	|            move.l 126(sp),d0
    6c14:	|            move.l d0,292(sp)
	if(lock == 0) {
    6c18:	|        ,-- bne.s 6c46 <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6c1a:	|        |   move.l 138(sp),122(sp)
    6c20:	|        |   moveq #-2,d1
    6c22:	|        |   move.l d1,118(sp)
    6c26:	|        |   move.l 1ce92 <DOSBase>,d0
    6c2c:	|        |   movea.l d0,a6
    6c2e:	|        |   move.l 122(sp),d1
    6c32:	|        |   move.l 118(sp),d2
    6c36:	|        |   jsr -84(a6)
    6c3a:	|        |   move.l d0,114(sp)
    6c3e:	|        |   move.l 114(sp),d0
    6c42:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6c46:	|        '-> move.l 292(sp),110(sp)
    6c4c:	|            move.l 1ce92 <DOSBase>,d0
    6c52:	|            movea.l d0,a6
    6c54:	|            move.l 110(sp),d1
    6c58:	|            jsr -126(a6)
    6c5c:	|            move.l d0,106(sp)
    6c60:	|            move.l 106(sp),d0
    6c64:	|        ,-- bne.s 6cc0 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6c66:	|        |   move.l 138(sp),-(sp)
    6c6a:	|        |   pea 18f08 <PutChar+0xdb8>
    6c70:	|        |   jsr 176ae <KPrintF>
    6c76:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6c78:	|        |   move.l 1ce92 <DOSBase>,d0
    6c7e:	|        |   movea.l d0,a6
    6c80:	|        |   jsr -60(a6)
    6c84:	|        |   move.l d0,58(sp)
    6c88:	|        |   move.l 58(sp),d0
    6c8c:	|        |   move.l d0,54(sp)
    6c90:	|        |   move.l #102197,50(sp)
    6c98:	|        |   moveq #40,d0
    6c9a:	|        |   move.l d0,46(sp)
    6c9e:	|        |   move.l 1ce92 <DOSBase>,d0
    6ca4:	|        |   movea.l d0,a6
    6ca6:	|        |   move.l 54(sp),d1
    6caa:	|        |   move.l 50(sp),d2
    6cae:	|        |   move.l 46(sp),d3
    6cb2:	|        |   jsr -48(a6)
    6cb6:	|        |   move.l d0,42(sp)
		return FALSE;
    6cba:	|        |   clr.w d0
    6cbc:	+--------|-- bra.w 6dee <initSludge+0x76e>
	}

	FreeVec(gameName);
    6cc0:	|        '-> move.l 138(sp),102(sp)
    6cc6:	|            move.l 1ce8a <SysBase>,d0
    6ccc:	|            movea.l d0,a6
    6cce:	|            movea.l 102(sp),a1
    6cd2:	|            jsr -690(a6)

	readIniFile (filename);
    6cd6:	|            move.l 316(sp),-(sp)
    6cda:	|            jsr 13be4 <readIniFile>
    6ce0:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6ce2:	|            jsr 139b6 <getLanguageForFileB>
    6ce8:	|            move.l d0,1c808 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6cee:	|            move.l 1c808 <languageNum>,d0
    6cf4:	|        ,-- bpl.s 6d04 <initSludge+0x684>
    6cf6:	|        |   pea 18f5e <PutChar+0xe0e>
    6cfc:	|        |   jsr 176ae <KPrintF>
    6d02:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6d04:	|        '-> move.l 1c808 <languageNum>,d0
    6d0a:	|            move.l d0,d1
    6d0c:	|            move.l 1cf66 <gameSettings+0x4>,d0
    6d12:	|            move.l d1,-(sp)
    6d14:	|            move.l d0,-(sp)
    6d16:	|            clr.l -(sp)
    6d18:	|            jsr 7d2a <setFileIndices>
    6d1e:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6d22:	|            movea.l 200(sp),a0
    6d26:	|            move.b (a0),d0
    6d28:	|     ,----- beq.w 6dd2 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6d2c:	|     |      move.l 200(sp),-(sp)
    6d30:	|     |      jsr 2fe <encodeFilename>
    6d36:	|     |      addq.l #4,sp
    6d38:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6d3c:	|     |      move.l 98(sp),94(sp)
    6d42:	|     |      move.l 1ce92 <DOSBase>,d0
    6d48:	|     |      movea.l d0,a6
    6d4a:	|     |      move.l 94(sp),d1
    6d4e:	|     |      jsr -120(a6)
    6d52:	|     |      move.l d0,90(sp)
    6d56:	|     |      move.l 90(sp),d0
    6d5a:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6d5e:	|     |  ,-- bne.s 6d8c <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6d60:	|     |  |   move.l 98(sp),86(sp)
    6d66:	|     |  |   moveq #-2,d1
    6d68:	|     |  |   move.l d1,82(sp)
    6d6c:	|     |  |   move.l 1ce92 <DOSBase>,d0
    6d72:	|     |  |   movea.l d0,a6
    6d74:	|     |  |   move.l 86(sp),d1
    6d78:	|     |  |   move.l 82(sp),d2
    6d7c:	|     |  |   jsr -84(a6)
    6d80:	|     |  |   move.l d0,78(sp)
    6d84:	|     |  |   move.l 78(sp),d0
    6d88:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6d8c:	|     |  '-> move.l 292(sp),74(sp)
    6d92:	|     |      move.l 1ce92 <DOSBase>,d0
    6d98:	|     |      movea.l d0,a6
    6d9a:	|     |      move.l 74(sp),d1
    6d9e:	|     |      jsr -126(a6)
    6da2:	|     |      move.l d0,70(sp)
    6da6:	|     |      move.l 70(sp),d0
    6daa:	|     |  ,-- bne.s 6dbc <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6dac:	|     |  |   move.l 1ce92 <DOSBase>,d0
    6db2:	|     |  |   movea.l d0,a6
    6db4:	|     |  |   jsr -60(a6)
    6db8:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6dbc:	|     |  '-> move.l 98(sp),62(sp)
    6dc2:	|     |      move.l 1ce8a <SysBase>,d0
    6dc8:	|     |      movea.l d0,a6
    6dca:	|     |      movea.l 62(sp),a1
    6dce:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6dd2:	|     '----> movea.l 1cde2 <winHeight>,a0
    6dd8:	|            lea -15(a0),a0
    6ddc:	|            move.l a0,d0
    6dde:	|            move.l d0,-(sp)
    6de0:	|            pea a <_start+0xa>
    6de4:	|            jsr 8770 <positionStatus>
    6dea:	|            addq.l #8,sp

	return TRUE;
    6dec:	|            moveq #1,d0
}
    6dee:	'----------> movem.l (sp)+,d2-d4/a2/a6
    6df2:	             lea 292(sp),sp
    6df6:	             rts

00006df8 <killSpeechTimers>:

void killSpeechTimers () {
    6df8:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6dfa:	          move.l 1ce22 <allRunningFunctions>,(sp)

	while (thisFunction) {
    6e00:	   ,----- bra.s 6e2c <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6e02:	,--|----> movea.l (sp),a0
    6e04:	|  |      move.b 56(a0),d0
    6e08:	|  |  ,-- bne.s 6e26 <killSpeechTimers+0x2e>
    6e0a:	|  |  |   movea.l (sp),a0
    6e0c:	|  |  |   move.w 50(a0),d0
    6e10:	|  |  +-- beq.s 6e26 <killSpeechTimers+0x2e>
    6e12:	|  |  |   movea.l (sp),a0
    6e14:	|  |  |   move.l 12(a0),d0
    6e18:	|  |  +-- beq.s 6e26 <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6e1a:	|  |  |   movea.l (sp),a0
    6e1c:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6e20:	|  |  |   movea.l (sp),a0
    6e22:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6e26:	|  |  '-> movea.l (sp),a0
    6e28:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6e2c:	|  '----> tst.l (sp)
    6e2e:	'-------- bne.s 6e02 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6e30:	          jsr 42e8 <killAllSpeech>
}
    6e36:	          nop
    6e38:	          addq.l #4,sp
    6e3a:	          rts

00006e3c <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    6e3c:	             lea -52(sp),sp
    6e40:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    6e42:	             movea.l 60(sp),a0
    6e46:	             move.l (a0),d0
    6e48:	             move.l d0,-(sp)
    6e4a:	             jsr 7c6a <openSubSlice>
    6e50:	             addq.l #4,sp
    6e52:	             tst.w d0
    6e54:	         ,-- bne.s 6e5c <loadFunctionCode+0x20>
    6e56:	         |   clr.w d0
    6e58:	,--------|-- bra.w 7026 <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6e5c:	|        '-> move.l 1ce72 <bigDataFile>,44(sp)
    6e64:	|            move.l 1ce92 <DOSBase>,d0
    6e6a:	|            movea.l d0,a6
    6e6c:	|            move.l 44(sp),d1
    6e70:	|            jsr -306(a6)
    6e74:	|            move.l d0,40(sp)
    6e78:	|            move.l 40(sp),d0
    6e7c:	|            move.l d0,d0
    6e7e:	|            movea.l 60(sp),a0
    6e82:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6e86:	|            move.l 1ce72 <bigDataFile>,d0
    6e8c:	|            move.l d0,-(sp)
    6e8e:	|            jsr 6bc <get2bytes>
    6e94:	|            addq.l #4,sp
    6e96:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    6e9a:	|            move.l 1ce72 <bigDataFile>,d0
    6ea0:	|            move.l d0,-(sp)
    6ea2:	|            jsr 6bc <get2bytes>
    6ea8:	|            addq.l #4,sp
    6eaa:	|            movea.l 60(sp),a0
    6eae:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    6eb2:	|            move.l 1ce72 <bigDataFile>,d0
    6eb8:	|            move.l d0,-(sp)
    6eba:	|            jsr 6bc <get2bytes>
    6ec0:	|            addq.l #4,sp
    6ec2:	|            movea.l 60(sp),a0
    6ec6:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6eca:	|            move.l 36(sp),d0
    6ece:	|            lsl.l #3,d0
    6ed0:	|            move.l d0,32(sp)
    6ed4:	|            clr.l 28(sp)
    6ed8:	|            move.l 1ce8a <SysBase>,d0
    6ede:	|            movea.l d0,a6
    6ee0:	|            move.l 32(sp),d0
    6ee4:	|            move.l 28(sp),d1
    6ee8:	|            jsr -684(a6)
    6eec:	|            move.l d0,24(sp)
    6ef0:	|            move.l 24(sp),d0
    6ef4:	|            movea.l 60(sp),a0
    6ef8:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6efc:	|            movea.l 60(sp),a0
    6f00:	|            move.l 4(a0),d0
    6f04:	|        ,-- bne.s 6f1a <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6f06:	|        |   pea 18f89 <PutChar+0xe39>
    6f0c:	|        |   jsr 176ae <KPrintF>
    6f12:	|        |   addq.l #4,sp
		return FALSE;
    6f14:	|        |   clr.w d0
    6f16:	+--------|-- bra.w 7026 <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6f1a:	|        '-> clr.l 52(sp)
    6f1e:	|        ,-- bra.s 6f80 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    6f20:	|     ,--|-> move.l 1ce72 <bigDataFile>,8(sp)
    6f28:	|     |  |   move.l 1ce92 <DOSBase>,d0
    6f2e:	|     |  |   movea.l d0,a6
    6f30:	|     |  |   move.l 8(sp),d1
    6f34:	|     |  |   jsr -306(a6)
    6f38:	|     |  |   move.l d0,4(sp)
    6f3c:	|     |  |   move.l 4(sp),d1
    6f40:	|     |  |   movea.l 60(sp),a0
    6f44:	|     |  |   movea.l 4(a0),a0
    6f48:	|     |  |   move.l 52(sp),d0
    6f4c:	|     |  |   lsl.l #3,d0
    6f4e:	|     |  |   adda.l d0,a0
    6f50:	|     |  |   move.l d1,d0
    6f52:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6f54:	|     |  |   move.l 1ce72 <bigDataFile>,d0
    6f5a:	|     |  |   move.l d0,-(sp)
    6f5c:	|     |  |   jsr 6bc <get2bytes>
    6f62:	|     |  |   addq.l #4,sp
    6f64:	|     |  |   move.l d0,d1
    6f66:	|     |  |   movea.l 60(sp),a0
    6f6a:	|     |  |   movea.l 4(a0),a0
    6f6e:	|     |  |   move.l 52(sp),d0
    6f72:	|     |  |   lsl.l #3,d0
    6f74:	|     |  |   adda.l d0,a0
    6f76:	|     |  |   move.l d1,d0
    6f78:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6f7c:	|     |  |   addq.l #1,52(sp)
    6f80:	|     |  '-> move.l 52(sp),d0
    6f84:	|     |      cmp.l 36(sp),d0
    6f88:	|     '----- bcs.s 6f20 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6f8a:	|            jsr 79da <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6f90:	|            movea.l 60(sp),a0
    6f94:	|            move.l 8(a0),d0
    6f98:	|  ,-------- ble.w 701c <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6f9c:	|  |         movea.l 60(sp),a0
    6fa0:	|  |         move.l 8(a0),d0
    6fa4:	|  |         lsl.l #3,d0
    6fa6:	|  |         move.l d0,20(sp)
    6faa:	|  |         clr.l 16(sp)
    6fae:	|  |         move.l 1ce8a <SysBase>,d0
    6fb4:	|  |         movea.l d0,a6
    6fb6:	|  |         move.l 20(sp),d0
    6fba:	|  |         move.l 16(sp),d1
    6fbe:	|  |         jsr -684(a6)
    6fc2:	|  |         move.l d0,12(sp)
    6fc6:	|  |         move.l 12(sp),d0
    6fca:	|  |         movea.l 60(sp),a0
    6fce:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    6fd2:	|  |         movea.l 60(sp),a0
    6fd6:	|  |         move.l 20(a0),d0
    6fda:	|  |     ,-- bne.s 6fee <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6fdc:	|  |     |   pea 18f89 <PutChar+0xe39>
    6fe2:	|  |     |   jsr 176ae <KPrintF>
    6fe8:	|  |     |   addq.l #4,sp
			return FALSE;
    6fea:	|  |     |   clr.w d0
    6fec:	+--|-----|-- bra.s 7026 <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    6fee:	|  |     '-> clr.l 48(sp)
    6ff2:	|  |     ,-- bra.s 700c <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6ff4:	|  |  ,--|-> movea.l 60(sp),a0
    6ff8:	|  |  |  |   move.l 20(a0),d1
    6ffc:	|  |  |  |   move.l 48(sp),d0
    7000:	|  |  |  |   lsl.l #3,d0
    7002:	|  |  |  |   movea.l d1,a0
    7004:	|  |  |  |   adda.l d0,a0
    7006:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    7008:	|  |  |  |   addq.l #1,48(sp)
    700c:	|  |  |  '-> movea.l 60(sp),a0
    7010:	|  |  |      move.l 8(a0),d0
    7014:	|  |  |      cmp.l 48(sp),d0
    7018:	|  |  '----- bgt.s 6ff4 <loadFunctionCode+0x1b8>
    701a:	|  |     ,-- bra.s 7024 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    701c:	|  '-----|-> movea.l 60(sp),a0
    7020:	|        |   clr.l 8(a0)
	}
	return TRUE;
    7024:	|        '-> moveq #1,d0
}
    7026:	'----------> movea.l (sp)+,a6
    7028:	             lea 52(sp),sp
    702c:	             rts

0000702e <loadHandlers>:

void loadHandlers (BPTR fp) {
    702e:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    7030:	movea.l 1c804 <currentEvents>,a2
    7036:	move.l 8(sp),-(sp)
    703a:	jsr 6bc <get2bytes>
    7040:	addq.l #4,sp
    7042:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    7044:	movea.l 1c804 <currentEvents>,a2
    704a:	move.l 8(sp),-(sp)
    704e:	jsr 6bc <get2bytes>
    7054:	addq.l #4,sp
    7056:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    705a:	movea.l 1c804 <currentEvents>,a2
    7060:	move.l 8(sp),-(sp)
    7064:	jsr 6bc <get2bytes>
    706a:	addq.l #4,sp
    706c:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    7070:	movea.l 1c804 <currentEvents>,a2
    7076:	move.l 8(sp),-(sp)
    707a:	jsr 6bc <get2bytes>
    7080:	addq.l #4,sp
    7082:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    7086:	movea.l 1c804 <currentEvents>,a2
    708c:	move.l 8(sp),-(sp)
    7090:	jsr 6bc <get2bytes>
    7096:	addq.l #4,sp
    7098:	move.l d0,16(a2)
	currentEvents -> focusFunction			= (struct loadedFunction *) get4bytes (fp); //Todo: Changed to pointer type. Check if this is correct.
    709c:	move.l 8(sp),-(sp)
    70a0:	jsr 718 <get4bytes>
    70a6:	addq.l #4,sp
    70a8:	movea.l 1c804 <currentEvents>,a0
    70ae:	move.l d0,20(a0)
	currentEvents -> spaceFunction			= get2bytes (fp);
    70b2:	movea.l 1c804 <currentEvents>,a2
    70b8:	move.l 8(sp),-(sp)
    70bc:	jsr 6bc <get2bytes>
    70c2:	addq.l #4,sp
    70c4:	move.l d0,24(a2)
}
    70c8:	nop
    70ca:	movea.l (sp)+,a2
    70cc:	rts

000070ce <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    70ce:	       lea -312(sp),sp
    70d2:	       movem.l d2-d3/a6,-(sp)
    70d6:	       move.l 332(sp),d1
    70da:	       move.l 336(sp),d0
    70de:	       move.b d1,d1
    70e0:	       move.b d1,16(sp)
    70e4:	       move.b d0,d0
    70e6:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    70ea:	       move.l 328(sp),318(sp)
    70f0:	       move.l #1005,314(sp)
    70f8:	       move.l 1ce92 <DOSBase>,d0
    70fe:	       movea.l d0,a6
    7100:	       move.l 318(sp),d1
    7104:	       move.l 314(sp),d2
    7108:	       jsr -30(a6)
    710c:	       move.l d0,310(sp)
    7110:	       move.l 310(sp),d0
    7114:	       move.l d0,306(sp)

	if (! fp) {
    7118:	   ,-- bne.s 7174 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    711a:	   |   move.l 1ce92 <DOSBase>,d0
    7120:	   |   movea.l d0,a6
    7122:	   |   jsr -60(a6)
    7126:	   |   move.l d0,154(sp)
    712a:	   |   move.l 154(sp),d0
    712e:	   |   move.l d0,150(sp)
    7132:	   |   move.l #102322,146(sp)
    713a:	   |   moveq #31,d0
    713c:	   |   move.l d0,142(sp)
    7140:	   |   move.l 1ce92 <DOSBase>,d0
    7146:	   |   movea.l d0,a6
    7148:	   |   move.l 150(sp),d1
    714c:	   |   move.l 146(sp),d2
    7150:	   |   move.l 142(sp),d3
    7154:	   |   jsr -48(a6)
    7158:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    715c:	   |   move.l 328(sp),-(sp)
    7160:	   |   pea 18fd2 <PutChar+0xe82>
    7166:	   |   jsr 176ae <KPrintF>
    716c:	   |   addq.l #8,sp
		return NULL;
    716e:	   |   moveq #0,d0
    7170:	,--|-- bra.w 7434 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    7174:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    7178:	|      move.l 306(sp),302(sp)
    717e:	|      move.l 1ce92 <DOSBase>,d0
    7184:	|      movea.l d0,a6
    7186:	|      move.l 302(sp),d1
    718a:	|      jsr -306(a6)
    718e:	|      move.l d0,298(sp)
    7192:	|      move.l 298(sp),d0
    7196:	|      moveq #83,d1
    7198:	|      cmp.l d0,d1
    719a:	|  ,-- beq.s 71a2 <openAndVerify+0xd4>
    719c:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    71a2:	|  '-> move.l 306(sp),294(sp)
    71a8:	|      move.l 1ce92 <DOSBase>,d0
    71ae:	|      movea.l d0,a6
    71b0:	|      move.l 294(sp),d1
    71b4:	|      jsr -306(a6)
    71b8:	|      move.l d0,290(sp)
    71bc:	|      move.l 290(sp),d0
    71c0:	|      moveq #76,d1
    71c2:	|      cmp.l d0,d1
    71c4:	|  ,-- beq.s 71cc <openAndVerify+0xfe>
    71c6:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    71cc:	|  '-> move.l 306(sp),286(sp)
    71d2:	|      move.l 1ce92 <DOSBase>,d0
    71d8:	|      movea.l d0,a6
    71da:	|      move.l 286(sp),d1
    71de:	|      jsr -306(a6)
    71e2:	|      move.l d0,282(sp)
    71e6:	|      move.l 282(sp),d0
    71ea:	|      moveq #85,d1
    71ec:	|      cmp.l d0,d1
    71ee:	|  ,-- beq.s 71f6 <openAndVerify+0x128>
    71f0:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    71f6:	|  '-> move.l 306(sp),278(sp)
    71fc:	|      move.l 1ce92 <DOSBase>,d0
    7202:	|      movea.l d0,a6
    7204:	|      move.l 278(sp),d1
    7208:	|      jsr -306(a6)
    720c:	|      move.l d0,274(sp)
    7210:	|      move.l 274(sp),d0
    7214:	|      moveq #68,d1
    7216:	|      cmp.l d0,d1
    7218:	|  ,-- beq.s 7220 <openAndVerify+0x152>
    721a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    7220:	|  '-> move.l 306(sp),270(sp)
    7226:	|      move.l 1ce92 <DOSBase>,d0
    722c:	|      movea.l d0,a6
    722e:	|      move.l 270(sp),d1
    7232:	|      jsr -306(a6)
    7236:	|      move.l d0,266(sp)
    723a:	|      move.l 266(sp),d1
    723e:	|      move.b 16(sp),d0
    7242:	|      ext.w d0
    7244:	|      movea.w d0,a0
    7246:	|      cmpa.l d1,a0
    7248:	|  ,-- beq.s 7250 <openAndVerify+0x182>
    724a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    7250:	|  '-> move.l 306(sp),262(sp)
    7256:	|      move.l 1ce92 <DOSBase>,d0
    725c:	|      movea.l d0,a6
    725e:	|      move.l 262(sp),d1
    7262:	|      jsr -306(a6)
    7266:	|      move.l d0,258(sp)
    726a:	|      move.l 258(sp),d1
    726e:	|      move.b 14(sp),d0
    7272:	|      ext.w d0
    7274:	|      movea.w d0,a0
    7276:	|      cmpa.l d1,a0
    7278:	|  ,-- beq.s 7280 <openAndVerify+0x1b2>
    727a:	|  |   move.w #1,322(sp)
	if (headerBad) {
    7280:	|  '-> tst.w 322(sp)
    7284:	|  ,-- beq.s 72dc <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    7286:	|  |   move.l 1ce92 <DOSBase>,d0
    728c:	|  |   movea.l d0,a6
    728e:	|  |   jsr -60(a6)
    7292:	|  |   move.l d0,174(sp)
    7296:	|  |   move.l 174(sp),d0
    729a:	|  |   move.l d0,170(sp)
    729e:	|  |   move.l #102385,166(sp)
    72a6:	|  |   moveq #31,d0
    72a8:	|  |   move.l d0,162(sp)
    72ac:	|  |   move.l 1ce92 <DOSBase>,d0
    72b2:	|  |   movea.l d0,a6
    72b4:	|  |   move.l 170(sp),d1
    72b8:	|  |   move.l 166(sp),d2
    72bc:	|  |   move.l 162(sp),d3
    72c0:	|  |   jsr -48(a6)
    72c4:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    72c8:	|  |   pea 18ff1 <PutChar+0xea1>
    72ce:	|  |   jsr 176ae <KPrintF>
    72d4:	|  |   addq.l #4,sp
		return NULL;
    72d6:	|  |   moveq #0,d0
    72d8:	+--|-- bra.w 7434 <openAndVerify+0x366>
	}
	FGetC (fp);
    72dc:	|  '-> move.l 306(sp),254(sp)
    72e2:	|      move.l 1ce92 <DOSBase>,d0
    72e8:	|      movea.l d0,a6
    72ea:	|      move.l 254(sp),d1
    72ee:	|      jsr -306(a6)
    72f2:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    72f6:	|      nop
    72f8:	|  ,-> move.l 306(sp),246(sp)
    72fe:	|  |   move.l 1ce92 <DOSBase>,d0
    7304:	|  |   movea.l d0,a6
    7306:	|  |   move.l 246(sp),d1
    730a:	|  |   jsr -306(a6)
    730e:	|  |   move.l d0,242(sp)
    7312:	|  |   move.l 242(sp),d0
    7316:	|  '-- bne.s 72f8 <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    7318:	|      move.l 306(sp),238(sp)
    731e:	|      move.l 1ce92 <DOSBase>,d0
    7324:	|      movea.l d0,a6
    7326:	|      move.l 238(sp),d1
    732a:	|      jsr -306(a6)
    732e:	|      move.l d0,234(sp)
    7332:	|      move.l 234(sp),d0
    7336:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    733a:	|      move.l 306(sp),226(sp)
    7340:	|      move.l 1ce92 <DOSBase>,d0
    7346:	|      movea.l d0,a6
    7348:	|      move.l 226(sp),d1
    734c:	|      jsr -306(a6)
    7350:	|      move.l d0,222(sp)
    7354:	|      move.l 222(sp),d0
    7358:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    735c:	|      move.l 230(sp),d0
    7360:	|      lsl.l #8,d0
    7362:	|      add.l 218(sp),d0
    7366:	|      movea.l 344(sp),a0
    736a:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    736c:	|      movea.l 344(sp),a0
    7370:	|      move.l (a0),d0
    7372:	|      cmpi.l #514,d0
    7378:	|  ,-- ble.s 73ce <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    737a:	|  |   move.l 1ce92 <DOSBase>,d0
    7380:	|  |   movea.l d0,a6
    7382:	|  |   jsr -60(a6)
    7386:	|  |   move.l d0,194(sp)
    738a:	|  |   move.l 194(sp),d0
    738e:	|  |   move.l d0,190(sp)
    7392:	|  |   move.l #102412,186(sp)
    739a:	|  |   moveq #100,d1
    739c:	|  |   move.l d1,182(sp)
    73a0:	|  |   move.l 1ce92 <DOSBase>,d0
    73a6:	|  |   movea.l d0,a6
    73a8:	|  |   move.l 190(sp),d1
    73ac:	|  |   move.l 186(sp),d2
    73b0:	|  |   move.l 182(sp),d3
    73b4:	|  |   jsr -48(a6)
    73b8:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    73bc:	|  |   pea 1900c <PutChar+0xebc>
    73c2:	|  |   jsr 176ae <KPrintF>
    73c8:	|  |   addq.l #4,sp
		return NULL;
    73ca:	|  |   moveq #0,d0
    73cc:	+--|-- bra.s 7434 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    73ce:	|  '-> movea.l 344(sp),a0
    73d2:	|      move.l (a0),d0
    73d4:	|      cmpi.l #257,d0
    73da:	|  ,-- bgt.s 7430 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    73dc:	|  |   move.l 1ce92 <DOSBase>,d0
    73e2:	|  |   movea.l d0,a6
    73e4:	|  |   jsr -60(a6)
    73e8:	|  |   move.l d0,214(sp)
    73ec:	|  |   move.l 214(sp),d0
    73f0:	|  |   move.l d0,210(sp)
    73f4:	|  |   move.l #102481,206(sp)
    73fc:	|  |   moveq #100,d0
    73fe:	|  |   move.l d0,202(sp)
    7402:	|  |   move.l 1ce92 <DOSBase>,d0
    7408:	|  |   movea.l d0,a6
    740a:	|  |   move.l 210(sp),d1
    740e:	|  |   move.l 206(sp),d2
    7412:	|  |   move.l 202(sp),d3
    7416:	|  |   jsr -48(a6)
    741a:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    741e:	|  |   pea 19051 <PutChar+0xf01>
    7424:	|  |   jsr 176ae <KPrintF>
    742a:	|  |   addq.l #4,sp
		return NULL;
    742c:	|  |   moveq #0,d0
    742e:	+--|-- bra.s 7434 <openAndVerify+0x366>
	}
	return fp;
    7430:	|  '-> move.l 306(sp),d0
}
    7434:	'----> movem.l (sp)+,d2-d3/a6
    7438:	       lea 312(sp),sp
    743c:	       rts

0000743e <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    743e:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    7440:	          move.l #118306,(sp)
	while (* huntAndDestroy) {
    7446:	   ,----- bra.s 7472 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    7448:	,--|----> movea.l (sp),a0
    744a:	|  |      move.l (a0),d0
    744c:	|  |      cmp.l 8(sp),d0
    7450:	|  |  ,-- bne.s 7468 <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    7452:	|  |  |   movea.l (sp),a0
    7454:	|  |  |   movea.l (a0),a0
    7456:	|  |  |   move.l 44(a0),d0
    745a:	|  |  |   movea.l (sp),a0
    745c:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    745e:	|  |  |   movea.l 8(sp),a0
    7462:	|  |  |   clr.l 44(a0)
    7466:	|  +--|-- bra.s 7472 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    7468:	|  |  '-> movea.l (sp),a0
    746a:	|  |      move.l (a0),d0
    746c:	|  |      moveq #44,d1
    746e:	|  |      add.l d0,d1
    7470:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    7472:	|  '----> movea.l (sp),a0
    7474:	|         move.l (a0),d0
    7476:	'-------- bne.s 7448 <pauseFunction+0xa>
		}
	}
}
    7478:	          nop
    747a:	          nop
    747c:	          addq.l #4,sp
    747e:	          rts

00007480 <preloadNewFunctionNum>:

struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {
    7480:	       lea -16(sp),sp
    7484:	       move.l a6,-(sp)
	
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    7486:	       moveq #58,d0
    7488:	       move.l d0,16(sp)
    748c:	       clr.l 12(sp)
    7490:	       move.l 1ce8a <SysBase>,d0
    7496:	       movea.l d0,a6
    7498:	       move.l 16(sp),d0
    749c:	       move.l 12(sp),d1
    74a0:	       jsr -684(a6)
    74a4:	       move.l d0,8(sp)
    74a8:	       move.l 8(sp),d0
    74ac:	       move.l d0,4(sp)
	if(!newFunc) {
    74b0:	   ,-- bne.s 74c4 <preloadNewFunctionNum+0x44>
		KPrintF("startNewFunction: Cannot allocate memory");
    74b2:	   |   pea 19098 <PutChar+0xf48>
    74b8:	   |   jsr 176ae <KPrintF>
    74be:	   |   addq.l #4,sp
		return 0;
    74c0:	   |   moveq #0,d0
    74c2:	,--|-- bra.s 74de <preloadNewFunctionNum+0x5e>
	}

	newFunc -> originalNumber = funcNum;
    74c4:	|  '-> move.l 24(sp),d0
    74c8:	|      movea.l 4(sp),a0
    74cc:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    74ce:	|      move.l 4(sp),-(sp)
    74d2:	|      jsr 6e3c <loadFunctionCode>
    74d8:	|      addq.l #4,sp

	return newFunc;
    74da:	|      move.l 4(sp),d0
}
    74de:	'----> movea.l (sp)+,a6
    74e0:	       lea 16(sp),sp
    74e4:	       rts

000074e6 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    74e6:	move.l 1ce22 <allRunningFunctions>,d0
    74ec:	movea.l 4(sp),a0
    74f0:	move.l d0,44(a0)
	allRunningFunctions = fun;
    74f4:	move.l 4(sp),1ce22 <allRunningFunctions>
}
    74fc:	nop
    74fe:	rts

00007500 <runSludge>:

BOOL runSludge () {
    7500:	                   lea -12(sp),sp
    7504:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    7506:	                   move.l 1ce22 <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    750e:	      ,----------- bra.s 758a <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    7510:	   ,--|----------> movea.l 12(sp),a0
    7514:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    751a:	   |  |            movea.l 12(sp),a0
    751e:	   |  |            move.b 56(a0),d0
    7522:	   |  |  ,-------- bne.s 7584 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    7524:	   |  |  |         movea.l 12(sp),a0
    7528:	   |  |  |         move.l 12(a0),d0
    752c:	   |  |  |  ,----- beq.s 7556 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    752e:	   |  |  |  |      movea.l 12(sp),a0
    7532:	   |  |  |  |      move.l 12(a0),d0
    7536:	   |  |  |  |  ,-- bpl.s 7542 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    7538:	   |  |  |  |  |   movea.l 12(sp),a0
    753c:	   |  |  |  |  |   clr.l 12(a0)
    7540:	   |  |  +--|--|-- bra.s 7584 <runSludge+0x84>
				} else if (
					! -- (thisFunction -> timeLeft)) {
    7542:	   |  |  |  |  '-> movea.l 12(sp),a0
    7546:	   |  |  |  |      move.l 12(a0),d0
    754a:	   |  |  |  |      subq.l #1,d0
				} else if (
    754c:	   |  |  |  |      movea.l 12(sp),a0
    7550:	   |  |  |  |      move.l d0,12(a0)
    7554:	   |  |  +--|----- bra.s 7584 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    7556:	   |  |  |  '----> movea.l 12(sp),a0
    755a:	   |  |  |         move.w 50(a0),d0
    755e:	   |  |  |     ,-- beq.s 756e <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    7560:	   |  |  |     |   movea.l 12(sp),a0
    7564:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    7568:	   |  |  |     |   jsr 42e8 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    756e:	   |  |  |     '-> move.l 12(sp),-(sp)
    7572:	   |  |  |         jsr 54f8 <continueFunction>
    7578:	   |  |  |         addq.l #4,sp
    757a:	   |  |  |         tst.w d0
    757c:	   |  |  +-------- bne.s 7584 <runSludge+0x84>
					return FALSE;
    757e:	   |  |  |         clr.w d0
    7580:	,--|--|--|-------- bra.w 7610 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    7584:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    758a:	|  |  '----------> tst.l 12(sp)
    758e:	|  '-------------- bne.s 7510 <runSludge+0x10>
	}

	if (loadNow) {
    7590:	|                  move.l 1ce56 <loadNow>,d0
    7596:	|        ,-------- beq.s 760e <runSludge+0x10e>
		if (loadNow[0] == ':') {
    7598:	|        |         movea.l 1ce56 <loadNow>,a0
    759e:	|        |         move.b (a0),d0
    75a0:	|        |         cmpi.b #58,d0
    75a4:	|        |  ,----- bne.s 75d8 <runSludge+0xd8>
			saveGame (loadNow + 1);
    75a6:	|        |  |      move.l 1ce56 <loadNow>,d0
    75ac:	|        |  |      addq.l #1,d0
    75ae:	|        |  |      move.l d0,-(sp)
    75b0:	|        |  |      jsr cb0e <saveGame>
    75b6:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    75b8:	|        |  |      movea.l 1cf50 <saverFunc>,a0
    75be:	|        |  |      lea 28(a0),a0
    75c2:	|        |  |      pea 1 <_start+0x1>
    75c6:	|        |  |      pea 1 <_start+0x1>
    75ca:	|        |  |      move.l a0,-(sp)
    75cc:	|        |  |      jsr 154c0 <setVariable>
    75d2:	|        |  |      lea 12(sp),sp
    75d6:	|        |  |  ,-- bra.s 75f0 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    75d8:	|        |  '--|-> move.l 1ce56 <loadNow>,d0
    75de:	|        |     |   move.l d0,-(sp)
    75e0:	|        |     |   jsr c656 <loadGame>
    75e6:	|        |     |   addq.l #4,sp
    75e8:	|        |     |   tst.w d0
    75ea:	|        |     +-- bne.s 75f0 <runSludge+0xf0>
    75ec:	|        |     |   clr.w d0
    75ee:	+--------|-----|-- bra.s 7610 <runSludge+0x110>
		}
		FreeVec(loadNow);
    75f0:	|        |     '-> move.l 1ce56 <loadNow>,8(sp)
    75f8:	|        |         move.l 1ce8a <SysBase>,d0
    75fe:	|        |         movea.l d0,a6
    7600:	|        |         movea.l 8(sp),a1
    7604:	|        |         jsr -690(a6)
		loadNow = NULL;
    7608:	|        |         clr.l 1ce56 <loadNow>
	}

	return TRUE;
    760e:	|        '-------> moveq #1,d0
}
    7610:	'----------------> movea.l (sp)+,a6
    7612:	                   lea 12(sp),sp
    7616:	                   rts

00007618 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    7618:	movea.l 1c804 <currentEvents>,a0
    761e:	move.l (a0),d0
    7620:	move.l 4(sp),-(sp)
    7624:	move.l d0,-(sp)
    7626:	jsr 8d0 <put2bytes>
    762c:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    762e:	movea.l 1c804 <currentEvents>,a0
    7634:	move.l 4(a0),d0
    7638:	move.l 4(sp),-(sp)
    763c:	move.l d0,-(sp)
    763e:	jsr 8d0 <put2bytes>
    7644:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    7646:	movea.l 1c804 <currentEvents>,a0
    764c:	move.l 8(a0),d0
    7650:	move.l 4(sp),-(sp)
    7654:	move.l d0,-(sp)
    7656:	jsr 8d0 <put2bytes>
    765c:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    765e:	movea.l 1c804 <currentEvents>,a0
    7664:	move.l 12(a0),d0
    7668:	move.l 4(sp),-(sp)
    766c:	move.l d0,-(sp)
    766e:	jsr 8d0 <put2bytes>
    7674:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    7676:	movea.l 1c804 <currentEvents>,a0
    767c:	move.l 16(a0),d0
    7680:	move.l 4(sp),-(sp)
    7684:	move.l d0,-(sp)
    7686:	jsr 8d0 <put2bytes>
    768c:	addq.l #8,sp
	put4bytes ((ULONG) currentEvents -> focusFunction,			fp); //Todo: Changed to pointer type. Check if this is correct.
    768e:	movea.l 1c804 <currentEvents>,a0
    7694:	move.l 20(a0),d0
    7698:	move.l 4(sp),-(sp)
    769c:	move.l d0,-(sp)
    769e:	jsr 958 <put4bytes>
    76a4:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    76a6:	movea.l 1c804 <currentEvents>,a0
    76ac:	move.l 24(a0),d0
    76b0:	move.l 4(sp),-(sp)
    76b4:	move.l d0,-(sp)
    76b6:	jsr 8d0 <put2bytes>
    76bc:	addq.l #8,sp
}
    76be:	nop
    76c0:	rts

000076c2 <sludgeDisplay>:

void sludgeDisplay () {					
    76c2:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    76c4:	move.l #14675968,(sp)
	displayCursor();
    76ca:	jsr c58 <displayCursor>
	CstRestoreScreen();
    76d0:	jsr 2c86 <CstRestoreScreen>
	drawPeople();
    76d6:	jsr a390 <drawPeople>
	CstSwapBuffer();
    76dc:	jsr 3944 <CstSwapBuffer>
}
    76e2:	nop
    76e4:	addq.l #4,sp
    76e6:	rts

000076e8 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    76e8:	      ,-- bra.s 7708 <stackSetByIndex+0x20>
		vS = vS->next;
    76ea:	,-----|-> movea.l 4(sp),a0
    76ee:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    76f4:	|     +-- bne.s 7708 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    76f6:	|     |   pea 190c1 <PutChar+0xf71>
    76fc:	|     |   jsr 176ae <KPrintF>
    7702:	|     |   addq.l #4,sp
			return FALSE;
    7704:	|     |   clr.w d0
    7706:	|  ,--|-- bra.s 772a <stackSetByIndex+0x42>
	while (theIndex--) {
    7708:	|  |  '-> move.l 8(sp),d0
    770c:	|  |      move.l d0,d1
    770e:	|  |      subq.l #1,d1
    7710:	|  |      move.l d1,8(sp)
    7714:	|  |      tst.l d0
    7716:	'--|----- bne.s 76ea <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    7718:	   |      move.l 4(sp),d0
    771c:	   |      move.l d0,-(sp)
    771e:	   |      move.l 16(sp),-(sp)
    7722:	   |      jsr 15088 <copyVariable>
    7728:	   |      addq.l #8,sp
}
    772a:	   '----> rts

0000772c <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    772c:	             subq.l #8,sp
    772e:	             move.l 28(sp),d0
    7732:	             move.w d0,d0
    7734:	             move.w d0,2(sp)
	
	if (newFunc -> numArgs != (int)numParamsExpected) {
    7738:	             movea.l 12(sp),a0
    773c:	             move.l 16(a0),d1
    7740:	             move.l 16(sp),d0
    7744:	             cmp.l d1,d0
    7746:	         ,-- beq.s 775c <startNewFunctionLoaded+0x30>
		KPrintF("Wrong number of parameters!");
    7748:	         |   pea 190da <PutChar+0xf8a>
    774e:	         |   jsr 176ae <KPrintF>
    7754:	         |   addq.l #4,sp
		return NULL; 
    7756:	         |   moveq #0,d0
    7758:	,--------|-- bra.w 7838 <startNewFunctionLoaded+0x10c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    775c:	|        '-> movea.l 12(sp),a0
    7760:	|            move.l 16(a0),d1
    7764:	|            movea.l 12(sp),a0
    7768:	|            move.l 8(a0),d0
    776c:	|            cmp.l d1,d0
    776e:	|  ,-------- bge.s 77d8 <startNewFunctionLoaded+0xac>
		KPrintF ("More arguments than local variable space!");
    7770:	|  |         pea 190f6 <PutChar+0xfa6>
    7776:	|  |         jsr 176ae <KPrintF>
    777c:	|  |         addq.l #4,sp
		return NULL; 
    777e:	|  |         moveq #0,d0
    7780:	+--|-------- bra.w 7838 <startNewFunctionLoaded+0x10c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    7784:	|  |  ,----> movea.l 24(sp),a0
    7788:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    778c:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    7790:	|  |  |      movea.l 24(sp),a0
    7794:	|  |  |      move.l (a0),d0
    7796:	|  |  |  ,-- bne.s 77ac <startNewFunctionLoaded+0x80>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    7798:	|  |  |  |   pea 19120 <PutChar+0xfd0>
    779e:	|  |  |  |   jsr 176ae <KPrintF>
    77a4:	|  |  |  |   addq.l #4,sp
			return NULL;
    77a6:	|  |  |  |   moveq #0,d0
    77a8:	+--|--|--|-- bra.w 7838 <startNewFunctionLoaded+0x10c>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    77ac:	|  |  |  '-> movea.l 12(sp),a0
    77b0:	|  |  |      move.l 20(a0),d1
    77b4:	|  |  |      move.l 16(sp),d0
    77b8:	|  |  |      lsl.l #3,d0
    77ba:	|  |  |      add.l d0,d1
    77bc:	|  |  |      move.l 4(sp),d0
    77c0:	|  |  |      move.l d1,-(sp)
    77c2:	|  |  |      move.l d0,-(sp)
    77c4:	|  |  |      jsr 15088 <copyVariable>
    77ca:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    77cc:	|  |  |      move.l 24(sp),-(sp)
    77d0:	|  |  |      jsr 15552 <trimStack>
    77d6:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    77d8:	|  '--|----> tst.l 16(sp)
    77dc:	|     '----- bne.s 7784 <startNewFunctionLoaded+0x58>
	}

	newFunc -> cancelMe = FALSE;
    77de:	|            movea.l 12(sp),a0
    77e2:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    77e6:	|            movea.l 12(sp),a0
    77ea:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    77ee:	|            movea.l 12(sp),a0
    77f2:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    77f8:	|            movea.l 12(sp),a0
    77fc:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    7802:	|            movea.l 12(sp),a0
    7806:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    780a:	|            movea.l 12(sp),a0
    780e:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    7812:	|            movea.l 12(sp),a0
    7816:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    781a:	|            movea.l 12(sp),a0
    781e:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    7822:	|            movea.l 12(sp),a0
    7826:	|            clr.l 28(a0)

	restartFunction (newFunc);
    782a:	|            move.l 12(sp),-(sp)
    782e:	|            jsr 74e6 <restartFunction>
    7834:	|            addq.l #4,sp
	return 1;
    7836:	|            moveq #1,d0
}
    7838:	'----------> addq.l #8,sp
    783a:	             rts

0000783c <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    783c:	       lea -24(sp),sp
    7840:	       move.l a6,-(sp)
    7842:	       move.l 48(sp),d0
    7846:	       move.w d0,d0
    7848:	       move.w d0,6(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    784c:	       move.l #14675968,24(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    7854:	       moveq #58,d0
    7856:	       move.l d0,20(sp)
    785a:	       clr.l 16(sp)
    785e:	       move.l 1ce8a <SysBase>,d0
    7864:	       movea.l d0,a6
    7866:	       move.l 20(sp),d0
    786a:	       move.l 16(sp),d1
    786e:	       jsr -684(a6)
    7872:	       move.l d0,12(sp)
    7876:	       move.l 12(sp),d0
    787a:	       move.l d0,8(sp)
	if(!newFunc) {
    787e:	   ,-- bne.s 7892 <startNewFunctionNum+0x56>
		KPrintF("startNewFunction: Cannot allocate memory");
    7880:	   |   pea 19098 <PutChar+0xf48>
    7886:	   |   jsr 176ae <KPrintF>
    788c:	   |   addq.l #4,sp
		return 0;
    788e:	   |   moveq #0,d0
    7890:	,--|-- bra.s 78e0 <startNewFunctionNum+0xa4>
	}
	if(funcNum == 145) {
    7892:	|  '-> cmpi.l #145,32(sp)
    789a:	|  ,-- bne.s 78aa <startNewFunctionNum+0x6e>
		KPrintF("startNewFunction: funcNum 145");
    789c:	|  |   pea 1916b <PutChar+0x101b>
    78a2:	|  |   jsr 176ae <KPrintF>
    78a8:	|  |   addq.l #4,sp
	}

	newFunc -> originalNumber = funcNum;
    78aa:	|  '-> move.l 32(sp),d0
    78ae:	|      movea.l 8(sp),a0
    78b2:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    78b4:	|      move.l 8(sp),-(sp)
    78b8:	|      jsr 6e3c <loadFunctionCode>
    78be:	|      addq.l #4,sp
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    78c0:	|      movea.w 6(sp),a0
    78c4:	|      move.l a0,-(sp)
    78c6:	|      move.l 48(sp),-(sp)
    78ca:	|      move.l 48(sp),-(sp)
    78ce:	|      move.l 48(sp),-(sp)
    78d2:	|      move.l 24(sp),-(sp)
    78d6:	|      jsr 772c <startNewFunctionLoaded>
    78dc:	|      lea 20(sp),sp
}
    78e0:	'----> movea.l (sp)+,a6
    78e2:	       lea 24(sp),sp
    78e6:	       rts

000078e8 <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    78e8:	             lea -12(sp),sp
    78ec:	             move.l a6,-(sp)

	int a;

	//Keep function loaed in memory
	if( fun == currentEvents -> focusFunction) {	
    78ee:	             movea.l 1c804 <currentEvents>,a0
    78f4:	             move.l 20(a0),d0
    78f8:	             cmp.l 20(sp),d0
    78fc:	,----------- beq.w 799e <unloadFunction+0xb6>
		return;
	}

	if (fun -> stack) 
    7900:	|            movea.l 20(sp),a0
    7904:	|            move.l 24(a0),d0
    7908:	|        ,-- beq.s 791c <unloadFunction+0x34>
	{
		KPrintF("unloadfunction: error non empty stack");
    790a:	|        |   pea 19189 <PutChar+0x1039>
    7910:	|        |   jsr 176ae <KPrintF>
    7916:	|        |   addq.l #4,sp
		return;
    7918:	|  ,-----|-- bra.w 79a0 <unloadFunction+0xb8>
	}
	FreeVec( fun -> compiledLines);
    791c:	|  |     '-> movea.l 20(sp),a0
    7920:	|  |         move.l 4(a0),8(sp)
    7926:	|  |         move.l 1ce8a <SysBase>,d0
    792c:	|  |         movea.l d0,a6
    792e:	|  |         movea.l 8(sp),a1
    7932:	|  |         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    7936:	|  |         clr.l 12(sp)
    793a:	|  |     ,-- bra.s 795a <unloadFunction+0x72>
    793c:	|  |  ,--|-> movea.l 20(sp),a0
    7940:	|  |  |  |   move.l 20(a0),d1
    7944:	|  |  |  |   move.l 12(sp),d0
    7948:	|  |  |  |   lsl.l #3,d0
    794a:	|  |  |  |   add.l d1,d0
    794c:	|  |  |  |   move.l d0,-(sp)
    794e:	|  |  |  |   jsr 14e1c <unlinkVar>
    7954:	|  |  |  |   addq.l #4,sp
    7956:	|  |  |  |   addq.l #1,12(sp)
    795a:	|  |  |  '-> movea.l 20(sp),a0
    795e:	|  |  |      move.l 8(a0),d0
    7962:	|  |  |      cmp.l 12(sp),d0
    7966:	|  |  '----- bgt.s 793c <unloadFunction+0x54>
	if( fun->numLocals > 0) {
    7968:	|  |         movea.l 20(sp),a0
    796c:	|  |         move.l 8(a0),d0
    7970:	|  |     ,-- ble.s 798c <unloadFunction+0xa4>
		FreeVec(fun -> localVars);
    7972:	|  |     |   movea.l 20(sp),a0
    7976:	|  |     |   move.l 20(a0),4(sp)
    797c:	|  |     |   move.l 1ce8a <SysBase>,d0
    7982:	|  |     |   movea.l d0,a6
    7984:	|  |     |   movea.l 4(sp),a1
    7988:	|  |     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    798c:	|  |     '-> moveq #28,d0
    798e:	|  |         add.l 20(sp),d0
    7992:	|  |         move.l d0,-(sp)
    7994:	|  |         jsr 14e1c <unlinkVar>
    799a:	|  |         addq.l #4,sp
    799c:	|  +-------- bra.s 79a0 <unloadFunction+0xb8>
		return;
    799e:	'--|-------> nop
}
    79a0:	   '-------> movea.l (sp)+,a6
    79a2:	             lea 12(sp),sp
    79a6:	             rts

000079a8 <unfreezeSubs>:

void unfreezeSubs () {
    79a8:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    79aa:	          move.l 1ce22 <allRunningFunctions>,(sp)

	while (thisFunction) {
    79b0:	   ,----- bra.s 79ce <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    79b2:	,--|----> movea.l (sp),a0
    79b4:	|  |      move.b 56(a0),d0
    79b8:	|  |  ,-- beq.s 79c8 <unfreezeSubs+0x20>
    79ba:	|  |  |   movea.l (sp),a0
    79bc:	|  |  |   move.b 56(a0),d0
    79c0:	|  |  |   subq.b #1,d0
    79c2:	|  |  |   movea.l (sp),a0
    79c4:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    79c8:	|  |  '-> movea.l (sp),a0
    79ca:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    79ce:	|  '----> tst.l (sp)
    79d0:	'-------- bne.s 79b2 <unfreezeSubs+0xa>
	}
}
    79d2:	          nop
    79d4:	          nop
    79d6:	          addq.l #4,sp
    79d8:	          rts

000079da <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    79da:	clr.w 1c810 <sliceBusy>
}
    79e0:	nop
    79e2:	rts

000079e4 <getNumberedString>:

char * getNumberedString (int value) {
    79e4:	       lea -56(sp),sp
    79e8:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    79ec:	       move.w 1c810 <sliceBusy>,d0
    79f2:	   ,-- beq.s 7a3c <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    79f4:	   |   move.l 1ce92 <DOSBase>,d0
    79fa:	   |   movea.l d0,a6
    79fc:	   |   jsr -60(a6)
    7a00:	   |   move.l d0,28(sp)
    7a04:	   |   move.l 28(sp),d0
    7a08:	   |   move.l d0,24(sp)
    7a0c:	   |   move.l #102831,20(sp)
    7a14:	   |   moveq #76,d0
    7a16:	   |   move.l d0,16(sp)
    7a1a:	   |   move.l 1ce92 <DOSBase>,d0
    7a20:	   |   movea.l d0,a6
    7a22:	   |   move.l 24(sp),d1
    7a26:	   |   move.l 20(sp),d2
    7a2a:	   |   move.l 16(sp),d3
    7a2e:	   |   jsr -48(a6)
    7a32:	   |   move.l d0,12(sp)
		return NULL;
    7a36:	   |   moveq #0,d0
    7a38:	,--|-- bra.w 7ad8 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    7a3c:	|  '-> move.l 1ce72 <bigDataFile>,64(sp)
    7a44:	|      move.l 72(sp),d0
    7a48:	|      add.l d0,d0
    7a4a:	|      add.l d0,d0
    7a4c:	|      move.l d0,d1
    7a4e:	|      move.l 1ce7e <startOfTextIndex>,d0
    7a54:	|      add.l d1,d0
    7a56:	|      move.l d0,60(sp)
    7a5a:	|      moveq #-1,d0
    7a5c:	|      move.l d0,56(sp)
    7a60:	|      move.l 1ce92 <DOSBase>,d0
    7a66:	|      movea.l d0,a6
    7a68:	|      move.l 64(sp),d1
    7a6c:	|      move.l 60(sp),d2
    7a70:	|      move.l 56(sp),d3
    7a74:	|      jsr -66(a6)
    7a78:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    7a7c:	|      move.l 1ce72 <bigDataFile>,d0
    7a82:	|      move.l d0,-(sp)
    7a84:	|      jsr 718 <get4bytes>
    7a8a:	|      addq.l #4,sp
    7a8c:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    7a90:	|      move.l 1ce72 <bigDataFile>,48(sp)
    7a98:	|      move.l 72(sp),44(sp)
    7a9e:	|      moveq #-1,d0
    7aa0:	|      move.l d0,40(sp)
    7aa4:	|      move.l 1ce92 <DOSBase>,d0
    7aaa:	|      movea.l d0,a6
    7aac:	|      move.l 48(sp),d1
    7ab0:	|      move.l 44(sp),d2
    7ab4:	|      move.l 40(sp),d3
    7ab8:	|      jsr -66(a6)
    7abc:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    7ac0:	|      move.l 1ce72 <bigDataFile>,d0
    7ac6:	|      move.l d0,-(sp)
    7ac8:	|      jsr b02 <readString>
    7ace:	|      addq.l #4,sp
    7ad0:	|      move.l d0,32(sp)
	
	return s;
    7ad4:	|      move.l 32(sp),d0
}
    7ad8:	'----> movem.l (sp)+,d2-d3/a6
    7adc:	       lea 56(sp),sp
    7ae0:	       rts

00007ae2 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    7ae2:	       lea -32(sp),sp
    7ae6:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    7aea:	       move.w 1c810 <sliceBusy>,d0
    7af0:	   ,-- beq.s 7b0c <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7af2:	   |   pea 191fc <PutChar+0x10ac>
    7af8:	   |   pea 1921a <PutChar+0x10ca>
    7afe:	   |   jsr 176ae <KPrintF>
    7b04:	   |   addq.l #8,sp
		return 0;
    7b06:	   |   moveq #0,d0
    7b08:	,--|-- bra.w 7ba0 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    7b0c:	|  '-> move.l 1ce72 <bigDataFile>,40(sp)
    7b14:	|      move.l 48(sp),d0
    7b18:	|      add.l d0,d0
    7b1a:	|      add.l d0,d0
    7b1c:	|      move.l d0,d1
    7b1e:	|      move.l 1ce7a <startOfDataIndex>,d0
    7b24:	|      add.l d1,d0
    7b26:	|      move.l d0,36(sp)
    7b2a:	|      moveq #-1,d0
    7b2c:	|      move.l d0,32(sp)
    7b30:	|      move.l 1ce92 <DOSBase>,d0
    7b36:	|      movea.l d0,a6
    7b38:	|      move.l 40(sp),d1
    7b3c:	|      move.l 36(sp),d2
    7b40:	|      move.l 32(sp),d3
    7b44:	|      jsr -66(a6)
    7b48:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    7b4c:	|      move.l 1ce72 <bigDataFile>,24(sp)
    7b54:	|      move.l 1ce72 <bigDataFile>,d0
    7b5a:	|      move.l d0,-(sp)
    7b5c:	|      jsr 718 <get4bytes>
    7b62:	|      addq.l #4,sp
    7b64:	|      move.l d0,20(sp)
    7b68:	|      clr.l 16(sp)
    7b6c:	|      move.l 1ce92 <DOSBase>,d0
    7b72:	|      movea.l d0,a6
    7b74:	|      move.l 24(sp),d1
    7b78:	|      move.l 20(sp),d2
    7b7c:	|      move.l 16(sp),d3
    7b80:	|      jsr -66(a6)
    7b84:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    7b88:	|      move.w #1,1c810 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    7b90:	|      move.l 1ce72 <bigDataFile>,d0
    7b96:	|      move.l d0,-(sp)
    7b98:	|      jsr 718 <get4bytes>
    7b9e:	|      addq.l #4,sp
}
    7ba0:	'----> movem.l (sp)+,d2-d3/a6
    7ba4:	       lea 32(sp),sp
    7ba8:	       rts

00007baa <openObjectSlice>:

BOOL openObjectSlice (int num) {
    7baa:	       lea -32(sp),sp
    7bae:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    7bb2:	       move.w 1c810 <sliceBusy>,d0
    7bb8:	   ,-- beq.s 7bd4 <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    7bba:	   |   pea 191fc <PutChar+0x10ac>
    7bc0:	   |   pea 1921a <PutChar+0x10ca>
    7bc6:	   |   jsr 176ae <KPrintF>
    7bcc:	   |   addq.l #8,sp
        return FALSE;
    7bce:	   |   clr.w d0
    7bd0:	,--|-- bra.w 7c60 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    7bd4:	|  '-> move.l 1ce72 <bigDataFile>,40(sp)
    7bdc:	|      move.l 48(sp),d0
    7be0:	|      add.l d0,d0
    7be2:	|      add.l d0,d0
    7be4:	|      move.l d0,d1
    7be6:	|      move.l 1ce86 <startOfObjectIndex>,d0
    7bec:	|      add.l d1,d0
    7bee:	|      move.l d0,36(sp)
    7bf2:	|      moveq #-1,d0
    7bf4:	|      move.l d0,32(sp)
    7bf8:	|      move.l 1ce92 <DOSBase>,d0
    7bfe:	|      movea.l d0,a6
    7c00:	|      move.l 40(sp),d1
    7c04:	|      move.l 36(sp),d2
    7c08:	|      move.l 32(sp),d3
    7c0c:	|      jsr -66(a6)
    7c10:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    7c14:	|      move.l 1ce72 <bigDataFile>,24(sp)
    7c1c:	|      move.l 1ce72 <bigDataFile>,d0
    7c22:	|      move.l d0,-(sp)
    7c24:	|      jsr 718 <get4bytes>
    7c2a:	|      addq.l #4,sp
    7c2c:	|      move.l d0,20(sp)
    7c30:	|      moveq #-1,d0
    7c32:	|      move.l d0,16(sp)
    7c36:	|      move.l 1ce92 <DOSBase>,d0
    7c3c:	|      movea.l d0,a6
    7c3e:	|      move.l 24(sp),d1
    7c42:	|      move.l 20(sp),d2
    7c46:	|      move.l 16(sp),d3
    7c4a:	|      jsr -66(a6)
    7c4e:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    7c52:	|      move.w #1,1c810 <sliceBusy>
    7c5a:	|      move.w 1c810 <sliceBusy>,d0
}
    7c60:	'----> movem.l (sp)+,d2-d3/a6
    7c64:	       lea 32(sp),sp
    7c68:	       rts

00007c6a <openSubSlice>:

BOOL openSubSlice (int num) {
    7c6a:	       lea -32(sp),sp
    7c6e:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    7c72:	       move.w 1c810 <sliceBusy>,d0
    7c78:	   ,-- beq.s 7c94 <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7c7a:	   |   pea 191fc <PutChar+0x10ac>
    7c80:	   |   pea 1921a <PutChar+0x10ca>
    7c86:	   |   jsr 176ae <KPrintF>
    7c8c:	   |   addq.l #8,sp
		return FALSE;
    7c8e:	   |   clr.w d0
    7c90:	,--|-- bra.w 7d20 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    7c94:	|  '-> move.l 1ce72 <bigDataFile>,40(sp)
    7c9c:	|      move.l 48(sp),d0
    7ca0:	|      add.l d0,d0
    7ca2:	|      add.l d0,d0
    7ca4:	|      move.l d0,d1
    7ca6:	|      move.l 1ce82 <startOfSubIndex>,d0
    7cac:	|      add.l d1,d0
    7cae:	|      move.l d0,36(sp)
    7cb2:	|      moveq #-1,d0
    7cb4:	|      move.l d0,32(sp)
    7cb8:	|      move.l 1ce92 <DOSBase>,d0
    7cbe:	|      movea.l d0,a6
    7cc0:	|      move.l 40(sp),d1
    7cc4:	|      move.l 36(sp),d2
    7cc8:	|      move.l 32(sp),d3
    7ccc:	|      jsr -66(a6)
    7cd0:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    7cd4:	|      move.l 1ce72 <bigDataFile>,24(sp)
    7cdc:	|      move.l 1ce72 <bigDataFile>,d0
    7ce2:	|      move.l d0,-(sp)
    7ce4:	|      jsr 718 <get4bytes>
    7cea:	|      addq.l #4,sp
    7cec:	|      move.l d0,20(sp)
    7cf0:	|      moveq #-1,d0
    7cf2:	|      move.l d0,16(sp)
    7cf6:	|      move.l 1ce92 <DOSBase>,d0
    7cfc:	|      movea.l d0,a6
    7cfe:	|      move.l 24(sp),d1
    7d02:	|      move.l 20(sp),d2
    7d06:	|      move.l 16(sp),d3
    7d0a:	|      jsr -66(a6)
    7d0e:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    7d12:	|      move.w #1,1c810 <sliceBusy>
    7d1a:	|      move.w 1c810 <sliceBusy>,d0
}
    7d20:	'----> movem.l (sp)+,d2-d3/a6
    7d24:	       lea 32(sp),sp
    7d28:	       rts

00007d2a <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7d2a:	       lea -180(sp),sp
    7d2e:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7d32:	       tst.l 196(sp)
    7d36:	,----- beq.s 7d76 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7d38:	|      move.l 196(sp),1ce72 <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    7d40:	|      move.l 196(sp),168(sp)
    7d46:	|      clr.l 164(sp)
    7d4a:	|      clr.l 160(sp)
    7d4e:	|      move.l 1ce92 <DOSBase>,d0
    7d54:	|      movea.l d0,a6
    7d56:	|      move.l 168(sp),d1
    7d5a:	|      move.l 164(sp),d2
    7d5e:	|      move.l 160(sp),d3
    7d62:	|      jsr -66(a6)
    7d66:	|      move.l d0,156(sp)
    7d6a:	|      move.l 156(sp),d0
    7d6e:	|      move.l d0,1ce76 <startIndex>
    7d74:	|  ,-- bra.s 7db0 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7d76:	'--|-> move.l 1ce72 <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    7d7e:	   |   move.l 196(sp),184(sp)
    7d84:	   |   move.l 1ce76 <startIndex>,d0
    7d8a:	   |   move.l d0,180(sp)
    7d8e:	   |   moveq #-1,d0
    7d90:	   |   move.l d0,176(sp)
    7d94:	   |   move.l 1ce92 <DOSBase>,d0
    7d9a:	   |   movea.l d0,a6
    7d9c:	   |   move.l 184(sp),d1
    7da0:	   |   move.l 180(sp),d2
    7da4:	   |   move.l 176(sp),d3
    7da8:	   |   jsr -66(a6)
    7dac:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    7db0:	   '-> clr.w 1c810 <sliceBusy>

	if (skipBefore > numLanguages) {
    7db6:	       move.l 204(sp),d0
    7dba:	       cmp.l 200(sp),d0
    7dbe:	   ,-- bls.s 7dd2 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    7dc0:	   |   pea 19234 <PutChar+0x10e4>
    7dc6:	   |   jsr 176ae <KPrintF>
    7dcc:	   |   addq.l #4,sp
		skipBefore = 0;
    7dce:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    7dd2:	   '-> move.l 200(sp),d0
    7dd6:	       sub.l 204(sp),d0
    7dda:	       move.l d0,188(sp)
	while (skipBefore) {
    7dde:	   ,-- bra.s 7e1c <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    7de0:	,--|-> move.l 196(sp),24(sp)
    7de6:	|  |   move.l 196(sp),-(sp)
    7dea:	|  |   jsr 718 <get4bytes>
    7df0:	|  |   addq.l #4,sp
    7df2:	|  |   move.l d0,20(sp)
    7df6:	|  |   moveq #-1,d0
    7df8:	|  |   move.l d0,16(sp)
    7dfc:	|  |   move.l 1ce92 <DOSBase>,d0
    7e02:	|  |   movea.l d0,a6
    7e04:	|  |   move.l 24(sp),d1
    7e08:	|  |   move.l 20(sp),d2
    7e0c:	|  |   move.l 16(sp),d3
    7e10:	|  |   jsr -66(a6)
    7e14:	|  |   move.l d0,12(sp)
		skipBefore --;
    7e18:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    7e1c:	|  '-> tst.l 204(sp)
    7e20:	'----- bne.s 7de0 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7e22:	       move.l 196(sp),152(sp)
    7e28:	       clr.l 148(sp)
    7e2c:	       clr.l 144(sp)
    7e30:	       move.l 1ce92 <DOSBase>,d0
    7e36:	       movea.l d0,a6
    7e38:	       move.l 152(sp),d1
    7e3c:	       move.l 148(sp),d2
    7e40:	       move.l 144(sp),d3
    7e44:	       jsr -66(a6)
    7e48:	       move.l d0,140(sp)
    7e4c:	       move.l 140(sp),d0
    7e50:	       addq.l #4,d0
    7e52:	       move.l d0,1ce7e <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7e58:	       move.l 196(sp),136(sp)
    7e5e:	       move.l 196(sp),-(sp)
    7e62:	       jsr 718 <get4bytes>
    7e68:	       addq.l #4,sp
    7e6a:	       move.l d0,132(sp)
    7e6e:	       moveq #-1,d0
    7e70:	       move.l d0,128(sp)
    7e74:	       move.l 1ce92 <DOSBase>,d0
    7e7a:	       movea.l d0,a6
    7e7c:	       move.l 136(sp),d1
    7e80:	       move.l 132(sp),d2
    7e84:	       move.l 128(sp),d3
    7e88:	       jsr -66(a6)
    7e8c:	       move.l d0,124(sp)

	while (skipAfter) {
    7e90:	   ,-- bra.s 7ece <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7e92:	,--|-> move.l 196(sp),40(sp)
    7e98:	|  |   move.l 196(sp),-(sp)
    7e9c:	|  |   jsr 718 <get4bytes>
    7ea2:	|  |   addq.l #4,sp
    7ea4:	|  |   move.l d0,36(sp)
    7ea8:	|  |   moveq #-1,d0
    7eaa:	|  |   move.l d0,32(sp)
    7eae:	|  |   move.l 1ce92 <DOSBase>,d0
    7eb4:	|  |   movea.l d0,a6
    7eb6:	|  |   move.l 40(sp),d1
    7eba:	|  |   move.l 36(sp),d2
    7ebe:	|  |   move.l 32(sp),d3
    7ec2:	|  |   jsr -66(a6)
    7ec6:	|  |   move.l d0,28(sp)
		skipAfter --;
    7eca:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    7ece:	|  '-> tst.l 188(sp)
    7ed2:	'----- bne.s 7e92 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7ed4:	       move.l 196(sp),120(sp)
    7eda:	       clr.l 116(sp)
    7ede:	       clr.l 112(sp)
    7ee2:	       move.l 1ce92 <DOSBase>,d0
    7ee8:	       movea.l d0,a6
    7eea:	       move.l 120(sp),d1
    7eee:	       move.l 116(sp),d2
    7ef2:	       move.l 112(sp),d3
    7ef6:	       jsr -66(a6)
    7efa:	       move.l d0,108(sp)
    7efe:	       move.l 108(sp),d0
    7f02:	       addq.l #4,d0
    7f04:	       move.l d0,1ce82 <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    7f0a:	       move.l 196(sp),104(sp)
    7f10:	       move.l 196(sp),-(sp)
    7f14:	       jsr 718 <get4bytes>
    7f1a:	       addq.l #4,sp
    7f1c:	       move.l d0,100(sp)
    7f20:	       clr.l 96(sp)
    7f24:	       move.l 1ce92 <DOSBase>,d0
    7f2a:	       movea.l d0,a6
    7f2c:	       move.l 104(sp),d1
    7f30:	       move.l 100(sp),d2
    7f34:	       move.l 96(sp),d3
    7f38:	       jsr -66(a6)
    7f3c:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7f40:	       move.l 196(sp),88(sp)
    7f46:	       clr.l 84(sp)
    7f4a:	       clr.l 80(sp)
    7f4e:	       move.l 1ce92 <DOSBase>,d0
    7f54:	       movea.l d0,a6
    7f56:	       move.l 88(sp),d1
    7f5a:	       move.l 84(sp),d2
    7f5e:	       move.l 80(sp),d3
    7f62:	       jsr -66(a6)
    7f66:	       move.l d0,76(sp)
    7f6a:	       move.l 76(sp),d0
    7f6e:	       addq.l #4,d0
    7f70:	       move.l d0,1ce86 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7f76:	       move.l 196(sp),72(sp)
    7f7c:	       move.l 196(sp),-(sp)
    7f80:	       jsr 718 <get4bytes>
    7f86:	       addq.l #4,sp
    7f88:	       move.l d0,68(sp)
    7f8c:	       clr.l 64(sp)
    7f90:	       move.l 1ce92 <DOSBase>,d0
    7f96:	       movea.l d0,a6
    7f98:	       move.l 72(sp),d1
    7f9c:	       move.l 68(sp),d2
    7fa0:	       move.l 64(sp),d3
    7fa4:	       jsr -66(a6)
    7fa8:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    7fac:	       move.l 196(sp),56(sp)
    7fb2:	       clr.l 52(sp)
    7fb6:	       clr.l 48(sp)
    7fba:	       move.l 1ce92 <DOSBase>,d0
    7fc0:	       movea.l d0,a6
    7fc2:	       move.l 56(sp),d1
    7fc6:	       move.l 52(sp),d2
    7fca:	       move.l 48(sp),d3
    7fce:	       jsr -66(a6)
    7fd2:	       move.l d0,44(sp)
    7fd6:	       move.l 44(sp),d0
    7fda:	       move.l d0,1ce7a <startOfDataIndex>
    7fe0:	       nop
    7fe2:	       movem.l (sp)+,d2-d3/a6
    7fe6:	       lea 180(sp),sp
    7fea:	       rts

00007fec <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    7fec:	    lea -20(sp),sp
    7ff0:	    move.l a6,-(sp)
    7ff2:	    move.l d7,-(sp)
	APTR vbr = 0;
    7ff4:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    7ff8:	    move.w #20090,10(sp)
    7ffe:	    move.w #2049,12(sp)
    8004:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    800a:	    movea.l 1ce8a <SysBase>,a0
    8010:	    move.w 296(a0),d0
    8014:	    move.w d0,d0
    8016:	    andi.l #65535,d0
    801c:	    moveq #1,d1
    801e:	    and.l d1,d0
    8020:	,-- beq.s 804e <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    8022:	|   lea 28(sp),a0
    8026:	|   lea -18(a0),a0
    802a:	|   move.l a0,20(sp)
    802e:	|   move.l 1ce8a <SysBase>,d0
    8034:	|   movea.l d0,a6
    8036:	|   move.l 20(sp),d7
    803a:	|   exg d7,a5
    803c:	|   jsr -30(a6)
    8040:	|   exg d7,a5
    8042:	|   move.l d0,16(sp)
    8046:	|   move.l 16(sp),d0
    804a:	|   move.l d0,24(sp)

	return vbr;
    804e:	'-> move.l 24(sp),d0
}
    8052:	    move.l (sp)+,d7
    8054:	    movea.l (sp)+,a6
    8056:	    lea 20(sp),sp
    805a:	    rts

0000805c <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    805c:	movea.l 1ceb0 <VBR>,a0
    8062:	lea 108(a0),a0
    8066:	move.l 4(sp),(a0)
}
    806a:	nop
    806c:	rts

0000806e <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    806e:	movea.l 1ceb0 <VBR>,a0
    8074:	move.l 108(a0),d0
}
    8078:	rts

0000807a <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    807a:	       subq.l #8,sp
    807c:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    807e:	       pea 1927d <PutChar+0x112d>
    8084:	       jsr 176ae <KPrintF>
    808a:	       addq.l #4,sp
	Forbid();
    808c:	       move.l 1ce8a <SysBase>,d0
    8092:	       movea.l d0,a6
    8094:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    8098:	       pea 19295 <PutChar+0x1145>
    809e:	       jsr 176ae <KPrintF>
    80a4:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    80a6:	       movea.l 1ce8e <custom>,a0
    80ac:	       move.w 16(a0),d0
    80b0:	       move.w d0,1ceae <SystemADKCON>
	SystemInts=custom->intenar;
    80b6:	       movea.l 1ce8e <custom>,a0
    80bc:	       move.w 28(a0),d0
    80c0:	       move.w d0,1ceaa <SystemInts>
	SystemDMA=custom->dmaconr;
    80c6:	       movea.l 1ce8e <custom>,a0
    80cc:	       move.w 2(a0),d0
    80d0:	       move.w d0,1ceac <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    80d6:	       movea.l 1ce96 <GfxBase>,a0
    80dc:	       move.l 34(a0),d0
    80e0:	       move.l d0,1ceb8 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    80e6:	       pea 192b3 <PutChar+0x1163>
    80ec:	       jsr 176ae <KPrintF>
    80f2:	       addq.l #4,sp
	LoadView(0);
    80f4:	       clr.l 4(sp)
    80f8:	       move.l 1ce96 <GfxBase>,d0
    80fe:	       movea.l d0,a6
    8100:	       movea.l 4(sp),a1
    8104:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    8108:	       pea 192c9 <PutChar+0x1179>
    810e:	       jsr 176ae <KPrintF>
    8114:	       addq.l #4,sp
	WaitTOF();
    8116:	       move.l 1ce96 <GfxBase>,d0
    811c:	       movea.l d0,a6
    811e:	       jsr -270(a6)
	WaitTOF();
    8122:	       move.l 1ce96 <GfxBase>,d0
    8128:	       movea.l d0,a6
    812a:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    812e:	       pea 192de <PutChar+0x118e>
    8134:	       jsr 176ae <KPrintF>
    813a:	       addq.l #4,sp
	WaitVbl();
    813c:	       jsr 175e2 <WaitVbl>
	WaitVbl();
    8142:	       jsr 175e2 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    8148:	       pea 192f3 <PutChar+0x11a3>
    814e:	       jsr 176ae <KPrintF>
    8154:	       addq.l #4,sp
	OwnBlitter();
    8156:	       move.l 1ce96 <GfxBase>,d0
    815c:	       movea.l d0,a6
    815e:	       jsr -456(a6)
	WaitBlit();	
    8162:	       move.l 1ce96 <GfxBase>,d0
    8168:	       movea.l d0,a6
    816a:	       jsr -228(a6)
	Disable();
    816e:	       move.l 1ce8a <SysBase>,d0
    8174:	       movea.l d0,a6
    8176:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    817a:	       pea 19314 <PutChar+0x11c4>
    8180:	       jsr 176ae <KPrintF>
    8186:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    8188:	       movea.l 1ce8e <custom>,a0
    818e:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    8194:	       pea 1932b <PutChar+0x11db>
    819a:	       jsr 176ae <KPrintF>
    81a0:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    81a2:	       clr.l 8(sp)
    81a6:	   ,-- bra.s 81c4 <TakeSystem+0x14a>
		custom->color[a]=0;
    81a8:	,--|-> movea.l 1ce8e <custom>,a0
    81ae:	|  |   move.l 8(sp),d0
    81b2:	|  |   addi.l #192,d0
    81b8:	|  |   add.l d0,d0
    81ba:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    81c0:	|  |   addq.l #1,8(sp)
    81c4:	|  '-> moveq #31,d0
    81c6:	|      cmp.l 8(sp),d0
    81ca:	'----- bge.s 81a8 <TakeSystem+0x12e>

	WaitVbl();
    81cc:	       jsr 175e2 <WaitVbl>
	WaitVbl();
    81d2:	       jsr 175e2 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    81d8:	       pea 19350 <PutChar+0x1200>
    81de:	       jsr 176ae <KPrintF>
    81e4:	       addq.l #4,sp
	VBR=GetVBR();
    81e6:	       jsr 7fec <GetVBR>
    81ec:	       move.l d0,1ceb0 <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    81f2:	       jsr 806e <GetInterruptHandler>
    81f8:	       move.l d0,1ceb4 <SystemIrq>
}
    81fe:	       nop
    8200:	       movea.l (sp)+,a6
    8202:	       addq.l #8,sp
    8204:	       rts

00008206 <FreeSystem>:

void FreeSystem() { 
    8206:	subq.l #4,sp
    8208:	move.l a6,-(sp)
	WaitVbl();
    820a:	jsr 175e2 <WaitVbl>
	WaitBlit();
    8210:	move.l 1ce96 <GfxBase>,d0
    8216:	movea.l d0,a6
    8218:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    821c:	movea.l 1ce8e <custom>,a0
    8222:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    8228:	movea.l 1ce8e <custom>,a0
    822e:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    8234:	movea.l 1ce8e <custom>,a0
    823a:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    8240:	move.l 1ceb4 <SystemIrq>,d0
    8246:	move.l d0,-(sp)
    8248:	jsr 805c <SetInterruptHandler>
    824e:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    8250:	movea.l 1ce96 <GfxBase>,a0
    8256:	move.l 38(a0),d0
    825a:	movea.l 1ce8e <custom>,a0
    8260:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    8264:	movea.l 1ce96 <GfxBase>,a0
    826a:	move.l 50(a0),d0
    826e:	movea.l 1ce8e <custom>,a0
    8274:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    8278:	movea.l 1ce8e <custom>,a0
    827e:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    8284:	move.w 1ceac <SystemDMA>,d0
    828a:	movea.l 1ce8e <custom>,a0
    8290:	ori.w #-32768,d0
    8294:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    8298:	move.w 1ceae <SystemADKCON>,d0
    829e:	movea.l 1ce8e <custom>,a0
    82a4:	ori.w #-32768,d0
    82a8:	move.w d0,158(a0)

	WaitBlit();	
    82ac:	move.l 1ce96 <GfxBase>,d0
    82b2:	movea.l d0,a6
    82b4:	jsr -228(a6)
	DisownBlitter();
    82b8:	move.l 1ce96 <GfxBase>,d0
    82be:	movea.l d0,a6
    82c0:	jsr -462(a6)
	Enable();
    82c4:	move.l 1ce8a <SysBase>,d0
    82ca:	movea.l d0,a6
    82cc:	jsr -126(a6)

	LoadView(ActiView);
    82d0:	move.l 1ceb8 <ActiView>,4(sp)
    82d8:	move.l 1ce96 <GfxBase>,d0
    82de:	movea.l d0,a6
    82e0:	movea.l 4(sp),a1
    82e4:	jsr -222(a6)
	WaitTOF();
    82e8:	move.l 1ce96 <GfxBase>,d0
    82ee:	movea.l d0,a6
    82f0:	jsr -270(a6)
	WaitTOF();
    82f4:	move.l 1ce96 <GfxBase>,d0
    82fa:	movea.l d0,a6
    82fc:	jsr -270(a6)

	Permit();
    8300:	move.l 1ce8a <SysBase>,d0
    8306:	movea.l d0,a6
    8308:	jsr -138(a6)
}
    830c:	nop
    830e:	movea.l (sp)+,a6
    8310:	addq.l #4,sp
    8312:	rts

00008314 <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    8314:	       lea -132(sp),sp
    8318:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    831c:	       clr.l 140(sp)
    8320:	   ,-- bra.s 8326 <main+0x12>
    8322:	,--|-> addq.l #1,140(sp)
    8326:	|  '-> cmpi.l #999,140(sp)
    832e:	'----- ble.s 8322 <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    8330:	       movea.w #4,a0
    8334:	       move.l (a0),d0
    8336:	       move.l d0,1ce8a <SysBase>
	custom = (struct Custom*)0xdff000;	
    833c:	       move.l #14675968,1ce8e <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    8346:	       move.l #103284,136(sp)
    834e:	       clr.l 132(sp)
    8352:	       move.l 1ce8a <SysBase>,d0
    8358:	       movea.l d0,a6
    835a:	       movea.l 136(sp),a1
    835e:	       move.l 132(sp),d0
    8362:	       jsr -552(a6)
    8366:	       move.l d0,128(sp)
    836a:	       move.l 128(sp),d0
    836e:	       move.l d0,1ce96 <GfxBase>
	if (!GfxBase)
    8374:	       move.l 1ce96 <GfxBase>,d0
    837a:	   ,-- bne.s 8390 <main+0x7c>
		Exit(0);
    837c:	   |   clr.l 124(sp)
    8380:	   |   move.l 1ce92 <DOSBase>,d0
    8386:	   |   movea.l d0,a6
    8388:	   |   move.l 124(sp),d1
    838c:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    8390:	   '-> move.l #103301,120(sp)
    8398:	       clr.l 116(sp)
    839c:	       move.l 1ce8a <SysBase>,d0
    83a2:	       movea.l d0,a6
    83a4:	       movea.l 120(sp),a1
    83a8:	       move.l 116(sp),d0
    83ac:	       jsr -552(a6)
    83b0:	       move.l d0,112(sp)
    83b4:	       move.l 112(sp),d0
    83b8:	       move.l d0,1ce92 <DOSBase>
	if (!DOSBase)
    83be:	       move.l 1ce92 <DOSBase>,d0
    83c4:	   ,-- bne.s 83da <main+0xc6>
		Exit(0);
    83c6:	   |   clr.l 108(sp)
    83ca:	   |   move.l 1ce92 <DOSBase>,d0
    83d0:	   |   movea.l d0,a6
    83d2:	   |   move.l 108(sp),d1
    83d6:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    83da:	   '-> move.l #103313,104(sp)
    83e2:	       clr.l 100(sp)
    83e6:	       move.l 1ce8a <SysBase>,d0
    83ec:	       movea.l d0,a6
    83ee:	       movea.l 104(sp),a1
    83f2:	       move.l 100(sp),d0
    83f6:	       jsr -552(a6)
    83fa:	       move.l d0,96(sp)
    83fe:	       move.l 96(sp),d0
    8402:	       move.l d0,1ce9a <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    8408:	       move.l 1ce9a <MathIeeeSingBasBase>,d0
    840e:	   ,-- bne.s 8424 <main+0x110>
		Exit(0);	
    8410:	   |   clr.l 92(sp)
    8414:	   |   move.l 1ce92 <DOSBase>,d0
    841a:	   |   movea.l d0,a6
    841c:	   |   move.l 92(sp),d1
    8420:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    8424:	   '-> move.l #103337,88(sp)
    842c:	       clr.l 84(sp)
    8430:	       move.l 1ce8a <SysBase>,d0
    8436:	       movea.l d0,a6
    8438:	       movea.l 88(sp),a1
    843c:	       move.l 84(sp),d0
    8440:	       jsr -552(a6)
    8444:	       move.l d0,80(sp)
    8448:	       move.l 80(sp),d0
    844c:	       move.l d0,1ce9e <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    8452:	       move.l 1ce9e <MathIeeeSingTransBase>,d0
    8458:	   ,-- bne.s 846e <main+0x15a>
		Exit(0);
    845a:	   |   clr.l 76(sp)
    845e:	   |   move.l 1ce92 <DOSBase>,d0
    8464:	   |   movea.l d0,a6
    8466:	   |   move.l 76(sp),d1
    846a:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    846e:	   '-> move.l #103363,72(sp)
    8476:	       clr.l 68(sp)
    847a:	       move.l 1ce8a <SysBase>,d0
    8480:	       movea.l d0,a6
    8482:	       movea.l 72(sp),a1
    8486:	       move.l 68(sp),d0
    848a:	       jsr -552(a6)
    848e:	       move.l d0,64(sp)
    8492:	       move.l 64(sp),d0
    8496:	       move.l d0,1cea6 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    849c:	       move.l 1cea6 <MathIeeeDoubTransBase>,d0
    84a2:	   ,-- bne.s 84b8 <main+0x1a4>
		Exit(0);
    84a4:	   |   clr.l 60(sp)
    84a8:	   |   move.l 1ce92 <DOSBase>,d0
    84ae:	   |   movea.l d0,a6
    84b0:	   |   move.l 60(sp),d1
    84b4:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    84b8:	   '-> move.l #103389,56(sp)
    84c0:	       clr.l 52(sp)
    84c4:	       move.l 1ce8a <SysBase>,d0
    84ca:	       movea.l d0,a6
    84cc:	       movea.l 56(sp),a1
    84d0:	       move.l 52(sp),d0
    84d4:	       jsr -552(a6)
    84d8:	       move.l d0,48(sp)
    84dc:	       move.l 48(sp),d0
    84e0:	       move.l d0,1cea2 <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    84e6:	       move.l 1cea2 <MathIeeeDoubBasBase>,d0
    84ec:	   ,-- bne.s 8502 <main+0x1ee>
		Exit(0);
    84ee:	   |   clr.l 44(sp)
    84f2:	   |   move.l 1ce92 <DOSBase>,d0
    84f8:	   |   movea.l d0,a6
    84fa:	   |   move.l 44(sp),d1
    84fe:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 035!\n");
    8502:	   '-> pea 193f5 <PutChar+0x12a5>
    8508:	       jsr 176ae <KPrintF>
    850e:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    8510:	       move.l 1ce92 <DOSBase>,d0
    8516:	       movea.l d0,a6
    8518:	       jsr -60(a6)
    851c:	       move.l d0,40(sp)
    8520:	       move.l 40(sp),d0
    8524:	       move.l d0,36(sp)
    8528:	       move.l #103445,32(sp)
    8530:	       moveq #25,d0
    8532:	       move.l d0,28(sp)
    8536:	       move.l 1ce92 <DOSBase>,d0
    853c:	       movea.l d0,a6
    853e:	       move.l 36(sp),d1
    8542:	       move.l 32(sp),d2
    8546:	       move.l 28(sp),d3
    854a:	       jsr -48(a6)
    854e:	       move.l d0,24(sp)
	Delay(50);
    8552:	       moveq #50,d0
    8554:	       move.l d0,20(sp)
    8558:	       move.l 1ce92 <DOSBase>,d0
    855e:	       movea.l d0,a6
    8560:	       move.l 20(sp),d1
    8564:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    8568:	       pea 1942e <PutChar+0x12de>
    856e:	       jsr 176ae <KPrintF>
    8574:	       addq.l #4,sp
	TakeSystem();
    8576:	       jsr 807a <TakeSystem>
	KPrintF("System Taken\n");
    857c:	       pea 1943d <PutChar+0x12ed>
    8582:	       jsr 176ae <KPrintF>
    8588:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    858a:	       movea.l 1ce8e <custom>,a0
    8590:	       move.w #-30721,150(a0)
	WaitVbl();
    8596:	       jsr 175e2 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    859c:	       pea 1944b <PutChar+0x12fb>
    85a2:	       jsr 176ae <KPrintF>
    85a8:	       addq.l #4,sp
	main_sludge(argc, argv);	
    85aa:	       move.l 152(sp),-(sp)
    85ae:	       move.l 152(sp),-(sp)
    85b2:	       jsr 4da0 <main_sludge>
    85b8:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    85ba:	       jsr 8206 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    85c0:	       move.l 1ce92 <DOSBase>,16(sp)
    85c8:	       move.l 1ce8a <SysBase>,d0
    85ce:	       movea.l d0,a6
    85d0:	       movea.l 16(sp),a1
    85d4:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    85d8:	       move.l 1ce96 <GfxBase>,12(sp)
    85e0:	       move.l 1ce8a <SysBase>,d0
    85e6:	       movea.l d0,a6
    85e8:	       movea.l 12(sp),a1
    85ec:	       jsr -414(a6)
    85f0:	       moveq #0,d0
}
    85f2:	       movem.l (sp)+,d2-d3/a6
    85f6:	       lea 132(sp),sp
    85fa:	       rts

000085fc <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    85fc:	    lea -16(sp),sp
    8600:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    8602:	    moveq #8,d0
    8604:	    move.l d0,16(sp)
    8608:	    clr.l 12(sp)
    860c:	    move.l 1ce8a <SysBase>,d0
    8612:	    movea.l d0,a6
    8614:	    move.l 16(sp),d0
    8618:	    move.l 12(sp),d1
    861c:	    jsr -684(a6)
    8620:	    move.l d0,8(sp)
    8624:	    move.l 8(sp),d0
    8628:	    move.l d0,4(sp)
	if (!newStat) {
    862c:	,-- bne.s 865c <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    862e:	|   movea.l 1c812 <nowStatus>,a0
    8634:	|   move.l (a0),d0
    8636:	|   movea.l 4(sp),a0
    863a:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    863e:	|   pea 18e5d <PutChar+0xd0d>
    8644:	|   jsr b8 <copyString>
    864a:	|   addq.l #4,sp
    864c:	|   movea.l 4(sp),a0
    8650:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    8652:	|   movea.l 1c812 <nowStatus>,a0
    8658:	|   move.l 4(sp),(a0)
	}
}
    865c:	'-> nop
    865e:	    movea.l (sp)+,a6
    8660:	    lea 16(sp),sp
    8664:	    rts

00008666 <clearStatusBar>:

void clearStatusBar () {
    8666:	       lea -16(sp),sp
    866a:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    866c:	       movea.l 1c812 <nowStatus>,a0
    8672:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    8676:	       movea.l 1c812 <nowStatus>,a0
    867c:	       moveq #-1,d0
    867e:	       move.l d0,6(a0)
	while (stat) {
    8682:	   ,-- bra.s 86c2 <clearStatusBar+0x5c>
		kill = stat;
    8684:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    868a:	|  |   movea.l 16(sp),a0
    868e:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    8694:	|  |   movea.l 12(sp),a0
    8698:	|  |   move.l (a0),8(sp)
    869c:	|  |   move.l 1ce8a <SysBase>,d0
    86a2:	|  |   movea.l d0,a6
    86a4:	|  |   movea.l 8(sp),a1
    86a8:	|  |   jsr -690(a6)
		FreeVec(kill);
    86ac:	|  |   move.l 12(sp),4(sp)
    86b2:	|  |   move.l 1ce8a <SysBase>,d0
    86b8:	|  |   movea.l d0,a6
    86ba:	|  |   movea.l 4(sp),a1
    86be:	|  |   jsr -690(a6)
	while (stat) {
    86c2:	|  '-> tst.l 16(sp)
    86c6:	'----- bne.s 8684 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    86c8:	       movea.l 1c812 <nowStatus>,a0
    86ce:	       clr.l (a0)
}
    86d0:	       nop
    86d2:	       movea.l (sp)+,a6
    86d4:	       lea 16(sp),sp
    86d8:	       rts

000086da <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    86da:	clr.l 1cebc <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    86e0:	move.w #-1,1cec0 <mainStatus+0x4>
	mainStatus.litStatus = -1;
    86e8:	moveq #-1,d0
    86ea:	move.l d0,1cec2 <mainStatus+0x6>
	mainStatus.statusX = 10;
    86f0:	moveq #10,d0
    86f2:	move.l d0,1cec6 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    86f8:	movea.l 1cde2 <winHeight>,a0
    86fe:	lea -15(a0),a0
    8702:	move.l a0,d0
    8704:	move.l d0,1ceca <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    870a:	nop
    870c:	rts

0000870e <killLastStatus>:

void killLastStatus () {
    870e:	    lea -12(sp),sp
    8712:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    8714:	    movea.l 1c812 <nowStatus>,a0
    871a:	    move.l (a0),d0
    871c:	,-- beq.s 8766 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    871e:	|   movea.l 1c812 <nowStatus>,a0
    8724:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    8728:	|   movea.l 1c812 <nowStatus>,a0
    872e:	|   movea.l 12(sp),a1
    8732:	|   move.l 4(a1),d0
    8736:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    8738:	|   movea.l 12(sp),a0
    873c:	|   move.l (a0),8(sp)
    8740:	|   move.l 1ce8a <SysBase>,d0
    8746:	|   movea.l d0,a6
    8748:	|   movea.l 8(sp),a1
    874c:	|   jsr -690(a6)
		FreeVec(kill);
    8750:	|   move.l 12(sp),4(sp)
    8756:	|   move.l 1ce8a <SysBase>,d0
    875c:	|   movea.l d0,a6
    875e:	|   movea.l 4(sp),a1
    8762:	|   jsr -690(a6)
	}
}
    8766:	'-> nop
    8768:	    movea.l (sp)+,a6
    876a:	    lea 12(sp),sp
    876e:	    rts

00008770 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    8770:	movea.l 1c812 <nowStatus>,a0
    8776:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    877c:	movea.l 1c812 <nowStatus>,a0
    8782:	move.l 8(sp),14(a0)
}
    8788:	nop
    878a:	rts

0000878c <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    878c:	       lea -100(sp),sp
    8790:	       move.l a6,-(sp)
    8792:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    8794:	       movea.l 1c812 <nowStatus>,a0
    879a:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    879e:	       movea.l 1c812 <nowStatus>,a0
    87a4:	       move.w 4(a0),d0
    87a8:	       move.w d0,d0
    87aa:	       andi.l #65535,d0
    87b0:	       move.l 112(sp),-(sp)
    87b4:	       move.l d0,-(sp)
    87b6:	       jsr 8d0 <put2bytes>
    87bc:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    87be:	       movea.l 1c812 <nowStatus>,a0
    87c4:	       move.l 6(a0),d0
    87c8:	       move.l d0,d0
    87ca:	       movea.w d0,a0
    87cc:	       move.l 112(sp),-(sp)
    87d0:	       move.l a0,-(sp)
    87d2:	       jsr a9c <putSigned>
    87d8:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    87da:	       movea.l 1c812 <nowStatus>,a0
    87e0:	       move.l 10(a0),d0
    87e4:	       move.l 112(sp),-(sp)
    87e8:	       move.l d0,-(sp)
    87ea:	       jsr 8d0 <put2bytes>
    87f0:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    87f2:	       movea.l 1c812 <nowStatus>,a0
    87f8:	       move.l 14(a0),d0
    87fc:	       move.l 112(sp),-(sp)
    8800:	       move.l d0,-(sp)
    8802:	       jsr 8d0 <put2bytes>
    8808:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    880a:	       move.l 112(sp),100(sp)
    8810:	       movea.l 1c812 <nowStatus>,a0
    8816:	       move.l 18(a0),96(sp)
    881c:	       move.l 1ce92 <DOSBase>,d0
    8822:	       movea.l d0,a6
    8824:	       move.l 100(sp),d1
    8828:	       move.l 96(sp),d2
    882c:	       jsr -312(a6)
    8830:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    8834:	       move.l 112(sp),88(sp)
    883a:	       movea.l 1c812 <nowStatus>,a0
    8840:	       move.l 22(a0),84(sp)
    8846:	       move.l 1ce92 <DOSBase>,d0
    884c:	       movea.l d0,a6
    884e:	       move.l 88(sp),d1
    8852:	       move.l 84(sp),d2
    8856:	       jsr -312(a6)
    885a:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    885e:	       move.l 112(sp),76(sp)
    8864:	       movea.l 1c812 <nowStatus>,a0
    886a:	       move.l 26(a0),72(sp)
    8870:	       move.l 1ce92 <DOSBase>,d0
    8876:	       movea.l d0,a6
    8878:	       move.l 76(sp),d1
    887c:	       move.l 72(sp),d2
    8880:	       jsr -312(a6)
    8884:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    8888:	       move.l 112(sp),64(sp)
    888e:	       movea.l 1c812 <nowStatus>,a0
    8894:	       move.l 30(a0),60(sp)
    889a:	       move.l 1ce92 <DOSBase>,d0
    88a0:	       movea.l d0,a6
    88a2:	       move.l 64(sp),d1
    88a6:	       move.l 60(sp),d2
    88aa:	       jsr -312(a6)
    88ae:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    88b2:	       move.l 112(sp),52(sp)
    88b8:	       movea.l 1c812 <nowStatus>,a0
    88be:	       move.l 34(a0),48(sp)
    88c4:	       move.l 1ce92 <DOSBase>,d0
    88ca:	       movea.l d0,a6
    88cc:	       move.l 52(sp),d1
    88d0:	       move.l 48(sp),d2
    88d4:	       jsr -312(a6)
    88d8:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    88dc:	       move.l 112(sp),40(sp)
    88e2:	       movea.l 1c812 <nowStatus>,a0
    88e8:	       move.l 38(a0),36(sp)
    88ee:	       move.l 1ce92 <DOSBase>,d0
    88f4:	       movea.l d0,a6
    88f6:	       move.l 40(sp),d1
    88fa:	       move.l 36(sp),d2
    88fe:	       jsr -312(a6)
    8902:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    8906:	   ,-- bra.s 894a <saveStatusBars+0x1be>
		FPutC (fp,1);
    8908:	,--|-> move.l 112(sp),16(sp)
    890e:	|  |   moveq #1,d0
    8910:	|  |   move.l d0,12(sp)
    8914:	|  |   move.l 1ce92 <DOSBase>,d0
    891a:	|  |   movea.l d0,a6
    891c:	|  |   move.l 16(sp),d1
    8920:	|  |   move.l 12(sp),d2
    8924:	|  |   jsr -312(a6)
    8928:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    892c:	|  |   movea.l 104(sp),a0
    8930:	|  |   move.l (a0),d0
    8932:	|  |   move.l 112(sp),-(sp)
    8936:	|  |   move.l d0,-(sp)
    8938:	|  |   jsr bd8 <writeString>
    893e:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    8940:	|  |   movea.l 104(sp),a0
    8944:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    894a:	|  '-> tst.l 104(sp)
    894e:	'----- bne.s 8908 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    8950:	       move.l 112(sp),28(sp)
    8956:	       clr.l 24(sp)
    895a:	       move.l 1ce92 <DOSBase>,d0
    8960:	       movea.l d0,a6
    8962:	       move.l 28(sp),d1
    8966:	       move.l 24(sp),d2
    896a:	       jsr -312(a6)
    896e:	       move.l d0,20(sp)
}
    8972:	       nop
    8974:	       move.l (sp)+,d2
    8976:	       movea.l (sp)+,a6
    8978:	       lea 100(sp),sp
    897c:	       rts

0000897e <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    897e:	movea.l 1c812 <nowStatus>,a0
    8984:	move.l 4(sp),6(a0)
}
    898a:	nop
    898c:	rts

0000898e <setStatusBar>:

void setStatusBar (char * txt) {
    898e:	    subq.l #4,sp
    8990:	    move.l a6,-(sp)
    8992:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    8994:	    movea.l 1c812 <nowStatus>,a0
    899a:	    move.l (a0),d0
    899c:	,-- beq.s 89d0 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    899e:	|   movea.l 1c812 <nowStatus>,a0
    89a4:	|   movea.l (a0),a0
    89a6:	|   move.l (a0),8(sp)
    89aa:	|   move.l 1ce8a <SysBase>,d0
    89b0:	|   movea.l d0,a6
    89b2:	|   movea.l 8(sp),a1
    89b6:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    89ba:	|   movea.l 1c812 <nowStatus>,a0
    89c0:	|   movea.l (a0),a2
    89c2:	|   move.l 16(sp),-(sp)
    89c6:	|   jsr b8 <copyString>
    89cc:	|   addq.l #4,sp
    89ce:	|   move.l d0,(a2)
	}
}
    89d0:	'-> nop
    89d2:	    movea.l (sp)+,a2
    89d4:	    movea.l (sp)+,a6
    89d6:	    addq.l #4,sp
    89d8:	    rts

000089da <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    89da:	       movea.l 1c812 <nowStatus>,a0
    89e0:	       move.l (a0),d0
    89e2:	,----- beq.s 89f0 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    89e4:	|      movea.l 1c812 <nowStatus>,a0
    89ea:	|      movea.l (a0),a0
    89ec:	|      move.l (a0),d0
    89ee:	|  ,-- bra.s 89f6 <statusBarText+0x1c>
	} else {
		return "";
    89f0:	'--|-> move.l #101981,d0
	}
    89f6:	   '-> rts

000089f8 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    89f8:	       lea -12(sp),sp
    89fc:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    89fe:	       move.l 1cee6 <zBuffer>,12(sp)

	while(zbuffercursor) {
    8a06:	   ,-- bra.s 8a2e <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8a08:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    8a0e:	|  |   movea.l 12(sp),a0
    8a12:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8a18:	|  |   move.l 8(sp),4(sp)
    8a1e:	|  |   move.l 1ce8a <SysBase>,d0
    8a24:	|  |   movea.l d0,a6
    8a26:	|  |   movea.l 4(sp),a1
    8a2a:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    8a2e:	|  '-> tst.l 12(sp)
    8a32:	'----- bne.s 8a08 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    8a34:	       clr.l 1cee6 <zBuffer>
}
    8a3a:	       nop
    8a3c:	       movea.l (sp)+,a6
    8a3e:	       lea 12(sp),sp
    8a42:	       rts

00008a44 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8a44:	                lea -304(sp),sp
    8a48:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    8a4c:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    8a50:	                jsr 89f8 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    8a56:	                move.l 328(sp),d0
    8a5a:	                move.l d0,-(sp)
    8a5c:	                jsr 7ae2 <openFileFromNum>
    8a62:	                addq.l #4,sp
    8a64:	                tst.l d0
    8a66:	            ,-- bne.s 8a6e <setZBuffer+0x2a>
    8a68:	            |   clr.w d0
    8a6a:	,-----------|-- bra.w 8d2c <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    8a6e:	|           '-> move.l 1ce72 <bigDataFile>,310(sp)
    8a76:	|               move.l 1ce92 <DOSBase>,d0
    8a7c:	|               movea.l d0,a6
    8a7e:	|               move.l 310(sp),d1
    8a82:	|               jsr -306(a6)
    8a86:	|               move.l d0,306(sp)
    8a8a:	|               move.l 306(sp),d0
    8a8e:	|               moveq #97,d1
    8a90:	|               cmp.l d0,d1
    8a92:	|        ,----- bne.s 8b06 <setZBuffer+0xc2>
    8a94:	|        |      move.l 1ce72 <bigDataFile>,302(sp)
    8a9c:	|        |      move.l 1ce92 <DOSBase>,d0
    8aa2:	|        |      movea.l d0,a6
    8aa4:	|        |      move.l 302(sp),d1
    8aa8:	|        |      jsr -306(a6)
    8aac:	|        |      move.l d0,298(sp)
    8ab0:	|        |      move.l 298(sp),d0
    8ab4:	|        |      moveq #115,d1
    8ab6:	|        |      cmp.l d0,d1
    8ab8:	|        +----- bne.s 8b06 <setZBuffer+0xc2>
    8aba:	|        |      move.l 1ce72 <bigDataFile>,294(sp)
    8ac2:	|        |      move.l 1ce92 <DOSBase>,d0
    8ac8:	|        |      movea.l d0,a6
    8aca:	|        |      move.l 294(sp),d1
    8ace:	|        |      jsr -306(a6)
    8ad2:	|        |      move.l d0,290(sp)
    8ad6:	|        |      move.l 290(sp),d0
    8ada:	|        |      moveq #122,d1
    8adc:	|        |      cmp.l d0,d1
    8ade:	|        +----- bne.s 8b06 <setZBuffer+0xc2>
    8ae0:	|        |      move.l 1ce72 <bigDataFile>,286(sp)
    8ae8:	|        |      move.l 1ce92 <DOSBase>,d0
    8aee:	|        |      movea.l d0,a6
    8af0:	|        |      move.l 286(sp),d1
    8af4:	|        |      jsr -306(a6)
    8af8:	|        |      move.l d0,282(sp)
    8afc:	|        |      move.l 282(sp),d0
    8b00:	|        |      moveq #98,d1
    8b02:	|        |      cmp.l d0,d1
    8b04:	|        |  ,-- beq.s 8b1a <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8b06:	|        '--|-> pea 19488 <PutChar+0x1338>
    8b0c:	|           |   jsr 176ae <KPrintF>
    8b12:	|           |   addq.l #4,sp
		 return FALSE;
    8b14:	|           |   clr.w d0
    8b16:	+-----------|-- bra.w 8d2c <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8b1a:	|           '-> move.l 1ce72 <bigDataFile>,278(sp)
    8b22:	|               move.l 1ce92 <DOSBase>,d0
    8b28:	|               movea.l d0,a6
    8b2a:	|               move.l 278(sp),d1
    8b2e:	|               jsr -306(a6)
    8b32:	|               move.l d0,274(sp)
    8b36:	|               move.l 274(sp),d0
    8b3a:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8b3e:	|               moveq #28,d0
    8b40:	|               move.l d0,270(sp)
    8b44:	|               clr.l 266(sp)
    8b48:	|               move.l 1ce8a <SysBase>,d0
    8b4e:	|               movea.l d0,a6
    8b50:	|               move.l 270(sp),d0
    8b54:	|               move.l 266(sp),d1
    8b58:	|               jsr -684(a6)
    8b5c:	|               move.l d0,262(sp)
    8b60:	|               move.l 262(sp),d0
    8b64:	|               move.l d0,1cee6 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    8b6a:	|               move.l 1cee6 <zBuffer>,318(sp)

	while(numelements--)
    8b72:	|     ,-------- bra.w 8d12 <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    8b76:	|  ,--|-------> move.l 1ce72 <bigDataFile>,d0
    8b7c:	|  |  |         move.l d0,-(sp)
    8b7e:	|  |  |         jsr 6bc <get2bytes>
    8b84:	|  |  |         addq.l #4,sp
    8b86:	|  |  |         movea.l 318(sp),a0
    8b8a:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    8b8c:	|  |  |         move.l 1ce72 <bigDataFile>,d0
    8b92:	|  |  |         move.l d0,-(sp)
    8b94:	|  |  |         jsr 6bc <get2bytes>
    8b9a:	|  |  |         addq.l #4,sp
    8b9c:	|  |  |         movea.l 318(sp),a0
    8ba0:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    8ba4:	|  |  |         move.l 1ce72 <bigDataFile>,d0
    8baa:	|  |  |         move.l d0,-(sp)
    8bac:	|  |  |         jsr 6bc <get2bytes>
    8bb2:	|  |  |         addq.l #4,sp
    8bb4:	|  |  |         movea.l 318(sp),a0
    8bb8:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8bbc:	|  |  |         move.l 1ce72 <bigDataFile>,d0
    8bc2:	|  |  |         move.l d0,-(sp)
    8bc4:	|  |  |         jsr 6bc <get2bytes>
    8bca:	|  |  |         addq.l #4,sp
    8bcc:	|  |  |         movea.l 318(sp),a0
    8bd0:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    8bd4:	|  |  |         move.l 1ce72 <bigDataFile>,d0
    8bda:	|  |  |         move.l d0,-(sp)
    8bdc:	|  |  |         jsr 6bc <get2bytes>
    8be2:	|  |  |         addq.l #4,sp
    8be4:	|  |  |         movea.l 318(sp),a0
    8be8:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8bec:	|  |  |         movea.l 318(sp),a0
    8bf0:	|  |  |         move.l (a0),d0
    8bf2:	|  |  |         movea.l 318(sp),a0
    8bf6:	|  |  |         move.l 4(a0),d1
    8bfa:	|  |  |         move.l d1,-(sp)
    8bfc:	|  |  |         move.l d0,-(sp)
    8bfe:	|  |  |         jsr 1803a <__mulsi3>
    8c04:	|  |  |         addq.l #8,sp
    8c06:	|  |  |         tst.l d0
    8c08:	|  |  |     ,-- bge.s 8c0c <setZBuffer+0x1c8>
    8c0a:	|  |  |     |   addq.l #7,d0
    8c0c:	|  |  |     '-> asr.l #3,d0
    8c0e:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8c12:	|  |  |         moveq #0,d0
    8c14:	|  |  |         move.w 260(sp),d0
    8c18:	|  |  |         move.l d0,256(sp)
    8c1c:	|  |  |         moveq #2,d1
    8c1e:	|  |  |         move.l d1,252(sp)
    8c22:	|  |  |         move.l 1ce8a <SysBase>,d0
    8c28:	|  |  |         movea.l d0,a6
    8c2a:	|  |  |         move.l 256(sp),d0
    8c2e:	|  |  |         move.l 252(sp),d1
    8c32:	|  |  |         jsr -684(a6)
    8c36:	|  |  |         move.l d0,248(sp)
    8c3a:	|  |  |         move.l 248(sp),d0
    8c3e:	|  |  |         movea.l 318(sp),a0
    8c42:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8c46:	|  |  |         move.l 1ce72 <bigDataFile>,244(sp)
    8c4e:	|  |  |         movea.l 318(sp),a0
    8c52:	|  |  |         move.l 20(a0),240(sp)
    8c58:	|  |  |         moveq #1,d0
    8c5a:	|  |  |         move.l d0,236(sp)
    8c5e:	|  |  |         moveq #0,d0
    8c60:	|  |  |         move.w 260(sp),d0
    8c64:	|  |  |         move.l d0,232(sp)
    8c68:	|  |  |         move.l 1ce92 <DOSBase>,d0
    8c6e:	|  |  |         movea.l d0,a6
    8c70:	|  |  |         move.l 244(sp),d1
    8c74:	|  |  |         move.l 240(sp),d2
    8c78:	|  |  |         move.l 236(sp),d3
    8c7c:	|  |  |         move.l 232(sp),d4
    8c80:	|  |  |         jsr -324(a6)
    8c84:	|  |  |         move.l d0,228(sp)
    8c88:	|  |  |         move.l 228(sp),d0
    8c8c:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8c90:	|  |  |         tst.w 322(sp)
    8c94:	|  |  |  ,----- beq.s 8cd0 <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8c96:	|  |  |  |      moveq #28,d1
    8c98:	|  |  |  |      move.l d1,222(sp)
    8c9c:	|  |  |  |      clr.l 218(sp)
    8ca0:	|  |  |  |      move.l 1ce8a <SysBase>,d0
    8ca6:	|  |  |  |      movea.l d0,a6
    8ca8:	|  |  |  |      move.l 222(sp),d0
    8cac:	|  |  |  |      move.l 218(sp),d1
    8cb0:	|  |  |  |      jsr -684(a6)
    8cb4:	|  |  |  |      move.l d0,214(sp)
    8cb8:	|  |  |  |      move.l 214(sp),d0
    8cbc:	|  |  |  |      movea.l 318(sp),a0
    8cc0:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8cc4:	|  |  |  |      movea.l 318(sp),a0
    8cc8:	|  |  |  |      move.l 24(a0),318(sp)
    8cce:	|  |  |  |  ,-- bra.s 8cd8 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8cd0:	|  |  |  '--|-> movea.l 318(sp),a0
    8cd4:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8cd8:	|  |  |     '-> movea.l 318(sp),a0
    8cdc:	|  |  |         move.l 4(a0),d0
    8ce0:	|  |  |         move.l d0,d0
    8ce2:	|  |  |         movea.w d0,a1
    8ce4:	|  |  |         movea.l 318(sp),a0
    8ce8:	|  |  |         move.l (a0),d0
    8cea:	|  |  |         move.l d0,d0
    8cec:	|  |  |         movea.w d0,a0
    8cee:	|  |  |         movea.l 318(sp),a2
    8cf2:	|  |  |         move.l 20(a2),d0
    8cf6:	|  |  |         clr.l -(sp)
    8cf8:	|  |  |         pea 1 <_start+0x1>
    8cfc:	|  |  |         move.l a1,-(sp)
    8cfe:	|  |  |         move.l a0,-(sp)
    8d00:	|  |  |         pea 1949c <PutChar+0x134c>
    8d06:	|  |  |         move.l d0,-(sp)
    8d08:	|  |  |         jsr 17796 <debug_register_bitmap>
    8d0e:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8d12:	|  |  '-------> move.w 322(sp),d0
    8d16:	|  |            move.w d0,d1
    8d18:	|  |            subq.w #1,d1
    8d1a:	|  |            move.w d1,322(sp)
    8d1e:	|  |            tst.w d0
    8d20:	|  '----------- bne.w 8b76 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8d24:	|               jsr 79da <finishAccess>
	
	return TRUE;
    8d2a:	|               moveq #1,d0
}
    8d2c:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    8d30:	                lea 304(sp),sp
    8d34:	                rts

00008d36 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8d36:	          lea -32(sp),sp
    8d3a:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8d3c:	          move.l 40(sp),d0
    8d40:	          addq.l #8,d0
    8d42:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8d46:	          clr.l 32(sp)
    8d4a:	   ,----- bra.s 8d90 <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8d4c:	,--|----> movea.l 24(sp),a0
    8d50:	|  |      movea.l 8(a0),a0
    8d54:	|  |      move.l 32(sp),d1
    8d58:	|  |      move.l d1,d0
    8d5a:	|  |      lsl.l #3,d0
    8d5c:	|  |      sub.l d1,d0
    8d5e:	|  |      add.l d0,d0
    8d60:	|  |      add.l d0,d0
    8d62:	|  |      adda.l d0,a0
    8d64:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8d68:	|  |      movea.l 8(sp),a0
    8d6c:	|  |      move.l 24(a0),d0
    8d70:	|  |  ,-- beq.s 8d8c <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8d72:	|  |  |   movea.l 8(sp),a0
    8d76:	|  |  |   move.l 24(a0),4(sp)
    8d7c:	|  |  |   move.l 1ce8a <SysBase>,d0
    8d82:	|  |  |   movea.l d0,a6
    8d84:	|  |  |   movea.l 4(sp),a1
    8d88:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8d8c:	|  |  '-> addq.l #1,32(sp)
    8d90:	|  '----> movea.l 24(sp),a0
    8d94:	|         move.l (a0),d0
    8d96:	|         cmp.l 32(sp),d0
    8d9a:	'-------- bgt.s 8d4c <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    8d9c:	          movea.l 24(sp),a0
    8da0:	          move.l 8(a0),20(sp)
    8da6:	          move.l 1ce8a <SysBase>,d0
    8dac:	          movea.l d0,a6
    8dae:	          movea.l 20(sp),a1
    8db2:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8db6:	          move.l 1cf9e <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8dbe:	      ,-- bra.s 8dca <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8dc0:	   ,--|-> movea.l 28(sp),a0
    8dc4:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8dca:	   |  '-> movea.l 28(sp),a0
    8dce:	   |      movea.l 22(a0),a0
    8dd2:	   |      move.l (a0),d1
    8dd4:	   |      movea.l 40(sp),a0
    8dd8:	   |      move.l (a0),d0
    8dda:	   |      cmp.l d1,d0
    8ddc:	   |  ,-- beq.s 8de4 <forgetSpriteBank+0xae>
    8dde:	   |  |   tst.l 28(sp)
    8de2:	   '--|-- bne.s 8dc0 <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8de4:	      '-> tst.l 28(sp)
    8de8:	   ,----- beq.s 8e12 <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8dea:	   |      movea.l 40(sp),a0
    8dee:	   |      move.l 22(a0),d0
    8df2:	   |      movea.l 28(sp),a0
    8df6:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8dfa:	   |      move.l 40(sp),12(sp)
    8e00:	   |      move.l 1ce8a <SysBase>,d0
    8e06:	   |      movea.l d0,a6
    8e08:	   |      movea.l 12(sp),a1
    8e0c:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8e10:	   |  ,-- bra.s 8e38 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8e12:	   '--|-> movea.l 1cf9e <allLoadedBanks>,a0
    8e18:	      |   move.l 22(a0),d0
    8e1c:	      |   move.l d0,1cf9e <allLoadedBanks>
		FreeVec( forgetme);
    8e22:	      |   move.l 40(sp),16(sp)
    8e28:	      |   move.l 1ce8a <SysBase>,d0
    8e2e:	      |   movea.l d0,a6
    8e30:	      |   movea.l 16(sp),a1
    8e34:	      |   jsr -690(a6)
}
    8e38:	      '-> nop
    8e3a:	          movea.l (sp)+,a6
    8e3c:	          lea 32(sp),sp
    8e40:	          rts

00008e42 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8e42:	                      lea -84(sp),sp
    8e46:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8e4a:	                      pea 194a8 <PutChar+0x1358>
    8e50:	                      jsr 176ae <KPrintF>
    8e56:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8e58:	                      clr.l 94(sp)
    8e5c:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8e60:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8e64:	                      move.l 108(sp),-(sp)
    8e68:	                      jsr 7ae2 <openFileFromNum>
    8e6e:	                      addq.l #4,sp
    8e70:	                      tst.l d0
    8e72:	                  ,-- bne.s 8e88 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8e74:	                  |   pea 194c2 <PutChar+0x1372>
    8e7a:	                  |   jsr 176ae <KPrintF>
    8e80:	                  |   addq.l #4,sp
		return FALSE;
    8e82:	                  |   clr.w d0
    8e84:	,-----------------|-- bra.w 927c <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8e88:	|                 '-> move.l 1ce72 <bigDataFile>,d0
    8e8e:	|                     move.l d0,-(sp)
    8e90:	|                     jsr 6bc <get2bytes>
    8e96:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8e98:	|                     move.l 1ce72 <bigDataFile>,82(sp)
    8ea0:	|                     move.l 1ce92 <DOSBase>,d0
    8ea6:	|                     movea.l d0,a6
    8ea8:	|                     move.l 82(sp),d1
    8eac:	|                     jsr -306(a6)
    8eb0:	|                     move.l d0,78(sp)
    8eb4:	|                     move.l 78(sp),d0
    8eb8:	|                     movea.l 112(sp),a0
    8ebc:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8ec0:	|                     move.l 1ce72 <bigDataFile>,d0
    8ec6:	|                     move.l d0,-(sp)
    8ec8:	|                     jsr 6bc <get2bytes>
    8ece:	|                     addq.l #4,sp
    8ed0:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8ed4:	|                 ,-- bgt.s 8eea <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8ed6:	|                 |   pea 194f0 <PutChar+0x13a0>
    8edc:	|                 |   jsr 176ae <KPrintF>
    8ee2:	|                 |   addq.l #4,sp
		return FALSE;
    8ee4:	|                 |   clr.w d0
    8ee6:	+-----------------|-- bra.w 927c <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8eea:	|                 '-> movea.l 112(sp),a0
    8eee:	|                     move.l 4(a0),d0
    8ef2:	|                     moveq #3,d1
    8ef4:	|                     cmp.l d0,d1
    8ef6:	|                 ,-- bne.s 8f04 <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8ef8:	|                 |   movea.l 112(sp),a0
    8efc:	|                 |   move.w #1,12(a0)
    8f02:	|              ,--|-- bra.s 8f26 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8f04:	|              |  '-> movea.l 112(sp),a0
    8f08:	|              |      move.l 4(a0),d0
    8f0c:	|              |      moveq #3,d1
    8f0e:	|              |      cmp.l d0,d1
    8f10:	|              +----- bge.s 8f26 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8f12:	|              |      pea 19530 <PutChar+0x13e0>
    8f18:	|              |      jsr 176ae <KPrintF>
    8f1e:	|              |      addq.l #4,sp
		return FALSE;
    8f20:	|              |      clr.w d0
    8f22:	+--------------|----- bra.w 927c <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8f26:	|              '----> movea.l 112(sp),a0
    8f2a:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8f2e:	|                     move.l 74(sp),d1
    8f32:	|                     move.l d1,d0
    8f34:	|                     lsl.l #3,d0
    8f36:	|                     sub.l d1,d0
    8f38:	|                     add.l d0,d0
    8f3a:	|                     add.l d0,d0
    8f3c:	|                     move.l d0,70(sp)
    8f40:	|                     clr.l 66(sp)
    8f44:	|                     move.l 1ce8a <SysBase>,d0
    8f4a:	|                     movea.l d0,a6
    8f4c:	|                     move.l 70(sp),d0
    8f50:	|                     move.l 66(sp),d1
    8f54:	|                     jsr -684(a6)
    8f58:	|                     move.l d0,62(sp)
    8f5c:	|                     move.l 62(sp),d0
    8f60:	|                     movea.l 112(sp),a0
    8f64:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8f68:	|                     movea.l 112(sp),a0
    8f6c:	|                     move.l 8(a0),d0
    8f70:	|                 ,-- bne.s 8f78 <loadSpriteBank+0x136>
    8f72:	|                 |   clr.w d0
    8f74:	+-----------------|-- bra.w 927c <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8f78:	|                 '-> moveq #1,d0
    8f7a:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8f7e:	|                     clr.l 100(sp)
    8f82:	|     ,-------------- bra.w 925a <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8f86:	|  ,--|-------------> move.l 1ce72 <bigDataFile>,d0
    8f8c:	|  |  |               move.l d0,-(sp)
    8f8e:	|  |  |               jsr 6bc <get2bytes>
    8f94:	|  |  |               addq.l #4,sp
    8f96:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8f9a:	|  |  |               movea.l 112(sp),a0
    8f9e:	|  |  |               movea.l 8(a0),a0
    8fa2:	|  |  |               move.l 100(sp),d1
    8fa6:	|  |  |               move.l d1,d0
    8fa8:	|  |  |               lsl.l #3,d0
    8faa:	|  |  |               sub.l d1,d0
    8fac:	|  |  |               add.l d0,d0
    8fae:	|  |  |               add.l d0,d0
    8fb0:	|  |  |               adda.l d0,a0
    8fb2:	|  |  |               moveq #0,d0
    8fb4:	|  |  |               move.w 60(sp),d0
    8fb8:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8fba:	|  |  |               movea.l 1ce72 <bigDataFile>,a1
    8fc0:	|  |  |               movea.l 112(sp),a0
    8fc4:	|  |  |               movea.l 8(a0),a0
    8fc8:	|  |  |               move.l 100(sp),d1
    8fcc:	|  |  |               move.l d1,d0
    8fce:	|  |  |               lsl.l #3,d0
    8fd0:	|  |  |               sub.l d1,d0
    8fd2:	|  |  |               add.l d0,d0
    8fd4:	|  |  |               add.l d0,d0
    8fd6:	|  |  |               lea (0,a0,d0.l),a2
    8fda:	|  |  |               move.l a1,-(sp)
    8fdc:	|  |  |               jsr 6bc <get2bytes>
    8fe2:	|  |  |               addq.l #4,sp
    8fe4:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8fe8:	|  |  |               movea.l 1ce72 <bigDataFile>,a1
    8fee:	|  |  |               movea.l 112(sp),a0
    8ff2:	|  |  |               movea.l 8(a0),a0
    8ff6:	|  |  |               move.l 100(sp),d1
    8ffa:	|  |  |               move.l d1,d0
    8ffc:	|  |  |               lsl.l #3,d0
    8ffe:	|  |  |               sub.l d1,d0
    9000:	|  |  |               add.l d0,d0
    9002:	|  |  |               add.l d0,d0
    9004:	|  |  |               lea (0,a0,d0.l),a2
    9008:	|  |  |               move.l a1,-(sp)
    900a:	|  |  |               jsr 6bc <get2bytes>
    9010:	|  |  |               addq.l #4,sp
    9012:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    9016:	|  |  |               movea.l 1ce72 <bigDataFile>,a1
    901c:	|  |  |               movea.l 112(sp),a0
    9020:	|  |  |               movea.l 8(a0),a0
    9024:	|  |  |               move.l 100(sp),d1
    9028:	|  |  |               move.l d1,d0
    902a:	|  |  |               lsl.l #3,d0
    902c:	|  |  |               sub.l d1,d0
    902e:	|  |  |               add.l d0,d0
    9030:	|  |  |               add.l d0,d0
    9032:	|  |  |               lea (0,a0,d0.l),a2
    9036:	|  |  |               move.l a1,-(sp)
    9038:	|  |  |               jsr 6bc <get2bytes>
    903e:	|  |  |               addq.l #4,sp
    9040:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    9044:	|  |  |               movea.l 112(sp),a0
    9048:	|  |  |               move.l 4(a0),d0
    904c:	|  |  |               moveq #3,d1
    904e:	|  |  |               cmp.l d0,d1
    9050:	|  |  |     ,-------- beq.w 90ec <loadSpriteBank+0x2aa>
    9054:	|  |  |     |         moveq #3,d1
    9056:	|  |  |     |         cmp.l d0,d1
    9058:	|  |  |  ,--|-------- blt.w 9192 <loadSpriteBank+0x350>
    905c:	|  |  |  |  |         moveq #1,d1
    905e:	|  |  |  |  |         cmp.l d0,d1
    9060:	|  |  |  |  |     ,-- beq.s 906c <loadSpriteBank+0x22a>
    9062:	|  |  |  |  |     |   moveq #2,d1
    9064:	|  |  |  |  |     |   cmp.l d0,d1
    9066:	|  |  |  |  |  ,--|-- beq.s 9098 <loadSpriteBank+0x256>
    9068:	|  |  |  +--|--|--|-- bra.w 9192 <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    906c:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    9070:	|  |  |  |  |  |      movea.l 8(a0),a0
    9074:	|  |  |  |  |  |      move.l 100(sp),d1
    9078:	|  |  |  |  |  |      move.l d1,d0
    907a:	|  |  |  |  |  |      lsl.l #3,d0
    907c:	|  |  |  |  |  |      sub.l d1,d0
    907e:	|  |  |  |  |  |      add.l d0,d0
    9080:	|  |  |  |  |  |      add.l d0,d0
    9082:	|  |  |  |  |  |      adda.l d0,a0
    9084:	|  |  |  |  |  |      move.l 4(a0),d0
    9088:	|  |  |  |  |  |      addq.l #2,d0
    908a:	|  |  |  |  |  |      move.l d0,d0
    908c:	|  |  |  |  |  |      add.w d0,d0
    908e:	|  |  |  |  |  |      add.w d0,d0
    9090:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    9094:	|  |  |  +--|--|----- bra.w 9192 <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    9098:	|  |  |  |  |  '----> movea.l 112(sp),a0
    909c:	|  |  |  |  |         movea.l 8(a0),a0
    90a0:	|  |  |  |  |         move.l 100(sp),d1
    90a4:	|  |  |  |  |         move.l d1,d0
    90a6:	|  |  |  |  |         lsl.l #3,d0
    90a8:	|  |  |  |  |         sub.l d1,d0
    90aa:	|  |  |  |  |         add.l d0,d0
    90ac:	|  |  |  |  |         add.l d0,d0
    90ae:	|  |  |  |  |         adda.l d0,a0
    90b0:	|  |  |  |  |         move.l (a0),d0
    90b2:	|  |  |  |  |     ,-- bpl.s 90b6 <loadSpriteBank+0x274>
    90b4:	|  |  |  |  |     |   addq.l #7,d0
    90b6:	|  |  |  |  |     '-> asr.l #3,d0
    90b8:	|  |  |  |  |         move.l d0,d2
    90ba:	|  |  |  |  |         movea.l 112(sp),a0
    90be:	|  |  |  |  |         movea.l 8(a0),a0
    90c2:	|  |  |  |  |         move.l 100(sp),d1
    90c6:	|  |  |  |  |         move.l d1,d0
    90c8:	|  |  |  |  |         lsl.l #3,d0
    90ca:	|  |  |  |  |         sub.l d1,d0
    90cc:	|  |  |  |  |         add.l d0,d0
    90ce:	|  |  |  |  |         add.l d0,d0
    90d0:	|  |  |  |  |         adda.l d0,a0
    90d2:	|  |  |  |  |         move.l 4(a0),d0
    90d6:	|  |  |  |  |         move.l d0,d0
    90d8:	|  |  |  |  |         move.w d2,d1
    90da:	|  |  |  |  |         muls.w d0,d1
    90dc:	|  |  |  |  |         move.w d1,d0
    90de:	|  |  |  |  |         add.w d0,d0
    90e0:	|  |  |  |  |         add.w d1,d0
    90e2:	|  |  |  |  |         add.w d0,d0
    90e4:	|  |  |  |  |         move.w d0,98(sp)
				break;
    90e8:	|  |  |  +--|-------- bra.w 9192 <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    90ec:	|  |  |  |  '-------> movea.l 112(sp),a0
    90f0:	|  |  |  |            movea.l 8(a0),a0
    90f4:	|  |  |  |            move.l 100(sp),d1
    90f8:	|  |  |  |            move.l d1,d0
    90fa:	|  |  |  |            lsl.l #3,d0
    90fc:	|  |  |  |            sub.l d1,d0
    90fe:	|  |  |  |            add.l d0,d0
    9100:	|  |  |  |            add.l d0,d0
    9102:	|  |  |  |            adda.l d0,a0
    9104:	|  |  |  |            move.l (a0),d0
    9106:	|  |  |  |            andi.l #-2147483633,d0
    910c:	|  |  |  |        ,-- bpl.s 9116 <loadSpriteBank+0x2d4>
    910e:	|  |  |  |        |   subq.l #1,d0
    9110:	|  |  |  |        |   moveq #-16,d1
    9112:	|  |  |  |        |   or.l d1,d0
    9114:	|  |  |  |        |   addq.l #1,d0
    9116:	|  |  |  |        '-> tst.l d0
    9118:	|  |  |  |     ,----- ble.s 911e <loadSpriteBank+0x2dc>
    911a:	|  |  |  |     |      moveq #2,d0
    911c:	|  |  |  |     |  ,-- bra.s 9120 <loadSpriteBank+0x2de>
    911e:	|  |  |  |     '--|-> clr.w d0
    9120:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    9124:	|  |  |  |            movea.l 112(sp),a0
    9128:	|  |  |  |            movea.l 8(a0),a0
    912c:	|  |  |  |            move.l 100(sp),d1
    9130:	|  |  |  |            move.l d1,d0
    9132:	|  |  |  |            lsl.l #3,d0
    9134:	|  |  |  |            sub.l d1,d0
    9136:	|  |  |  |            add.l d0,d0
    9138:	|  |  |  |            add.l d0,d0
    913a:	|  |  |  |            adda.l d0,a0
    913c:	|  |  |  |            move.l (a0),d0
    913e:	|  |  |  |            movea.l d0,a0
    9140:	|  |  |  |            cmpa.w #0,a0
    9144:	|  |  |  |        ,-- bge.s 914a <loadSpriteBank+0x308>
    9146:	|  |  |  |        |   lea 15(a0),a0
    914a:	|  |  |  |        '-> move.l a0,d0
    914c:	|  |  |  |            asr.l #4,d0
    914e:	|  |  |  |            add.l d0,d0
    9150:	|  |  |  |            move.l d0,d1
    9152:	|  |  |  |            moveq #0,d0
    9154:	|  |  |  |            move.w 58(sp),d0
    9158:	|  |  |  |            add.l d1,d0
    915a:	|  |  |  |            move.l d0,d2
    915c:	|  |  |  |            movea.l 112(sp),a0
    9160:	|  |  |  |            movea.l 8(a0),a0
    9164:	|  |  |  |            move.l 100(sp),d1
    9168:	|  |  |  |            move.l d1,d0
    916a:	|  |  |  |            lsl.l #3,d0
    916c:	|  |  |  |            sub.l d1,d0
    916e:	|  |  |  |            add.l d0,d0
    9170:	|  |  |  |            add.l d0,d0
    9172:	|  |  |  |            adda.l d0,a0
    9174:	|  |  |  |            move.l 4(a0),d0
    9178:	|  |  |  |            move.l d0,d0
    917a:	|  |  |  |            move.w d2,d1
    917c:	|  |  |  |            muls.w d0,d1
    917e:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    9182:	|  |  |  |            cmpi.w #100,98(sp)
    9188:	|  |  |  |        ,-- bls.s 9190 <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    918a:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    9190:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    9192:	|  |  |  '----------> moveq #0,d0
    9194:	|  |  |               move.w 98(sp),d0
    9198:	|  |  |               add.l d0,d0
    919a:	|  |  |               move.l d0,52(sp)
    919e:	|  |  |               moveq #2,d0
    91a0:	|  |  |               move.l d0,48(sp)
    91a4:	|  |  |               move.l 1ce8a <SysBase>,d0
    91aa:	|  |  |               movea.l d0,a6
    91ac:	|  |  |               move.l 52(sp),d0
    91b0:	|  |  |               move.l 48(sp),d1
    91b4:	|  |  |               jsr -684(a6)
    91b8:	|  |  |               move.l d0,44(sp)
    91bc:	|  |  |               movea.l 44(sp),a1
    91c0:	|  |  |               movea.l 112(sp),a0
    91c4:	|  |  |               movea.l 8(a0),a0
    91c8:	|  |  |               move.l 100(sp),d1
    91cc:	|  |  |               move.l d1,d0
    91ce:	|  |  |               lsl.l #3,d0
    91d0:	|  |  |               sub.l d1,d0
    91d2:	|  |  |               add.l d0,d0
    91d4:	|  |  |               add.l d0,d0
    91d6:	|  |  |               adda.l d0,a0
    91d8:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    91dc:	|  |  |               move.l 1ce72 <bigDataFile>,40(sp)
    91e4:	|  |  |               movea.l 112(sp),a0
    91e8:	|  |  |               movea.l 8(a0),a0
    91ec:	|  |  |               move.l 100(sp),d1
    91f0:	|  |  |               move.l d1,d0
    91f2:	|  |  |               lsl.l #3,d0
    91f4:	|  |  |               sub.l d1,d0
    91f6:	|  |  |               add.l d0,d0
    91f8:	|  |  |               add.l d0,d0
    91fa:	|  |  |               adda.l d0,a0
    91fc:	|  |  |               move.l 24(a0),36(sp)
    9202:	|  |  |               moveq #2,d1
    9204:	|  |  |               move.l d1,32(sp)
    9208:	|  |  |               move.w 98(sp),d0
    920c:	|  |  |               lsr.w #1,d0
    920e:	|  |  |               move.w d0,d0
    9210:	|  |  |               andi.l #65535,d0
    9216:	|  |  |               move.l d0,28(sp)
    921a:	|  |  |               move.l 1ce92 <DOSBase>,d0
    9220:	|  |  |               movea.l d0,a6
    9222:	|  |  |               move.l 40(sp),d1
    9226:	|  |  |               move.l 36(sp),d2
    922a:	|  |  |               move.l 32(sp),d3
    922e:	|  |  |               move.l 28(sp),d4
    9232:	|  |  |               jsr -324(a6)
    9236:	|  |  |               move.l d0,24(sp)
    923a:	|  |  |               move.l 24(sp),d0
    923e:	|  |  |               move.w d0,22(sp)
		if (!count) {
    9242:	|  |  |           ,-- bne.s 9256 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    9244:	|  |  |           |   pea 19565 <PutChar+0x1415>
    924a:	|  |  |           |   jsr 176ae <KPrintF>
    9250:	|  |  |           |   addq.l #4,sp
			return FALSE;
    9252:	|  |  |           |   clr.w d0
    9254:	+--|--|-----------|-- bra.s 927c <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    9256:	|  |  |           '-> addq.l #1,100(sp)
    925a:	|  |  '-------------> move.l 100(sp),d0
    925e:	|  |                  cmp.l 74(sp),d0
    9262:	|  '----------------- blt.w 8f86 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    9266:	|                     jsr 79da <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    926c:	|                     pea 19598 <PutChar+0x1448>
    9272:	|                     jsr 176ae <KPrintF>
    9278:	|                     addq.l #4,sp
	return TRUE;
    927a:	|                     moveq #1,d0
}
    927c:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    9280:	                      lea 84(sp),sp
    9284:	                      rts

00009286 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    9286:	                   lea -16(sp),sp
    928a:	                   move.l d2,-(sp)
    928c:	                   move.l 32(sp),d0
    9290:	                   move.w d0,d0
    9292:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    9296:	                   movea.l 28(sp),a0
    929a:	                   move.l (a0),d2
    929c:	                   movea.l 24(sp),a0
    92a0:	                   move.l 8(a0),d0
    92a4:	                   move.l d0,-(sp)
    92a6:	                   jsr 17ae0 <__floatsisf>
    92ac:	                   addq.l #4,sp
    92ae:	                   move.l d0,-(sp)
    92b0:	                   move.l d2,-(sp)
    92b2:	                   jsr 17dd4 <__subsf3>
    92b8:	                   addq.l #8,sp
    92ba:	                   move.l d0,-(sp)
    92bc:	                   jsr 17a78 <__fixsfsi>
    92c2:	                   addq.l #4,sp
    92c4:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    92c8:	                   movea.l 28(sp),a0
    92cc:	                   move.l 4(a0),d2
    92d0:	                   movea.l 24(sp),a0
    92d4:	                   move.l 12(a0),d0
    92d8:	                   move.l d0,-(sp)
    92da:	                   jsr 17ae0 <__floatsisf>
    92e0:	                   addq.l #4,sp
    92e2:	                   move.l d0,-(sp)
    92e4:	                   move.l d2,-(sp)
    92e6:	                   jsr 17dd4 <__subsf3>
    92ec:	                   addq.l #8,sp
    92ee:	                   move.l d0,-(sp)
    92f0:	                   jsr 17a78 <__fixsfsi>
    92f6:	                   addq.l #4,sp
    92f8:	                   move.w d0,8(sp)

	if( x < 0)
    92fc:	                   tst.w 18(sp)
    9300:	               ,-- bge.s 9334 <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    9302:	               |   movea.l 28(sp),a0
    9306:	               |   move.l (a0),d2
    9308:	               |   movea.l 24(sp),a0
    930c:	               |   move.l 8(a0),d0
    9310:	               |   move.l d0,-(sp)
    9312:	               |   jsr 17ae0 <__floatsisf>
    9318:	               |   addq.l #4,sp
    931a:	               |   move.l d0,-(sp)
    931c:	               |   move.l d2,-(sp)
    931e:	               |   jsr 17dd4 <__subsf3>
    9324:	               |   addq.l #8,sp
    9326:	               |   move.l d0,-(sp)
    9328:	               |   jsr 17a78 <__fixsfsi>
    932e:	               |   addq.l #4,sp
    9330:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    9334:	               '-> movea.w 8(sp),a1
    9338:	                   movea.w 18(sp),a0
    933c:	                   pea 1 <_start+0x1>
    9340:	                   move.l a1,-(sp)
    9342:	                   move.l a0,-(sp)
    9344:	                   move.l 40(sp),-(sp)
    9348:	                   move.l 40(sp),-(sp)
    934c:	                   jsr 2f08 <CstScaleSprite>
    9352:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    9356:	                   movea.l 28(sp),a0
    935a:	                   move.l 118(a0),d0
    935e:	                   moveq #8,d1
    9360:	                   and.l d1,d0
    9362:	   ,-------------- beq.w 942e <scaleSprite+0x1a8>
		if (single->xhot < 0)
    9366:	   |               movea.l 24(sp),a0
    936a:	   |               move.l 8(a0),d0
    936e:	   |  ,----------- bpl.s 93aa <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    9370:	   |  |            move.w 18(sp),d0
    9374:	   |  |            tst.w 6(sp)
    9378:	   |  |     ,----- beq.s 9392 <scaleSprite+0x10c>
    937a:	   |  |     |      movea.l 24(sp),a0
    937e:	   |  |     |      move.l (a0),d1
    9380:	   |  |     |      move.l d1,d2
    9382:	   |  |     |      movea.l 24(sp),a0
    9386:	   |  |     |      move.l 8(a0),d1
    938a:	   |  |     |      move.l d1,d1
    938c:	   |  |     |      movea.w d2,a0
    938e:	   |  |     |      suba.w d1,a0
    9390:	   |  |     |  ,-- bra.s 93a0 <scaleSprite+0x11a>
    9392:	   |  |     '--|-> movea.l 24(sp),a0
    9396:	   |  |        |   move.l 8(a0),d1
    939a:	   |  |        |   move.l d1,d1
    939c:	   |  |        |   movea.w d1,a0
    939e:	   |  |        |   addq.w #1,a0
    93a0:	   |  |        '-> move.w d0,d1
    93a2:	   |  |            sub.w a0,d1
    93a4:	   |  |            move.w d1,16(sp)
    93a8:	   |  |  ,-------- bra.s 93e2 <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    93aa:	   |  '--|-------> move.w 18(sp),d1
    93ae:	   |     |         tst.w 6(sp)
    93b2:	   |     |  ,----- beq.s 93d0 <scaleSprite+0x14a>
    93b4:	   |     |  |      movea.l 24(sp),a0
    93b8:	   |     |  |      move.l (a0),d0
    93ba:	   |     |  |      move.l d0,d2
    93bc:	   |     |  |      movea.l 24(sp),a0
    93c0:	   |     |  |      move.l 8(a0),d0
    93c4:	   |     |  |      move.l d0,d0
    93c6:	   |     |  |      movea.w d2,a0
    93c8:	   |     |  |      suba.w d0,a0
    93ca:	   |     |  |      move.w a0,d0
    93cc:	   |     |  |      subq.w #1,d0
    93ce:	   |     |  |  ,-- bra.s 93da <scaleSprite+0x154>
    93d0:	   |     |  '--|-> movea.l 24(sp),a0
    93d4:	   |     |     |   move.l 8(a0),d0
    93d8:	   |     |     |   move.l d0,d0
    93da:	   |     |     '-> movea.w d1,a0
    93dc:	   |     |         suba.w d0,a0
    93de:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    93e2:	   |     '-------> movea.l 28(sp),a0
    93e6:	   |               move.l 24(a0),d0
    93ea:	   |               move.l d0,d1
    93ec:	   |               movea.l 24(sp),a0
    93f0:	   |               move.l 12(a0),d0
    93f4:	   |               move.l d0,d0
    93f6:	   |               sub.w d0,d1
    93f8:	   |               move.w 8(sp),d0
    93fc:	   |               movea.w d1,a0
    93fe:	   |               adda.w d0,a0
    9400:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    9404:	   |               movea.l 24(sp),a0
    9408:	   |               move.l (a0),d0
    940a:	   |               move.l d0,d0
    940c:	   |               move.w 16(sp),d1
    9410:	   |               add.w d0,d1
    9412:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    9416:	   |               movea.l 24(sp),a0
    941a:	   |               move.l 4(a0),d0
    941e:	   |               move.l d0,d0
    9420:	   |               movea.w 14(sp),a0
    9424:	   |               adda.w d0,a0
    9426:	   |               move.w a0,10(sp)
    942a:	,--|-------------- bra.w 9516 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    942e:	|  '-------------> move.w 18(sp),d1
    9432:	|                  move.l 1cf40 <cameraX>,d0
    9438:	|                  move.l d0,d0
    943a:	|                  sub.w d0,d1
    943c:	|                  move.w d1,18(sp)
		y -= cameraY;
    9440:	|                  move.w 8(sp),d1
    9444:	|                  move.l 1cf44 <cameraY>,d0
    944a:	|                  move.l d0,d0
    944c:	|                  sub.w d0,d1
    944e:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    9452:	|                  movea.l 24(sp),a0
    9456:	|                  move.l 8(a0),d0
    945a:	|     ,----------- bpl.s 9496 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    945c:	|     |            move.w 18(sp),d0
    9460:	|     |            tst.w 6(sp)
    9464:	|     |     ,----- beq.s 947e <scaleSprite+0x1f8>
    9466:	|     |     |      movea.l 24(sp),a0
    946a:	|     |     |      move.l (a0),d1
    946c:	|     |     |      move.l d1,d2
    946e:	|     |     |      movea.l 24(sp),a0
    9472:	|     |     |      move.l 8(a0),d1
    9476:	|     |     |      move.l d1,d1
    9478:	|     |     |      movea.w d2,a0
    947a:	|     |     |      suba.w d1,a0
    947c:	|     |     |  ,-- bra.s 948c <scaleSprite+0x206>
    947e:	|     |     '--|-> movea.l 24(sp),a0
    9482:	|     |        |   move.l 8(a0),d1
    9486:	|     |        |   move.l d1,d1
    9488:	|     |        |   movea.w d1,a0
    948a:	|     |        |   addq.w #1,a0
    948c:	|     |        '-> move.w d0,d1
    948e:	|     |            sub.w a0,d1
    9490:	|     |            move.w d1,16(sp)
    9494:	|     |  ,-------- bra.s 94ce <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9496:	|     '--|-------> move.w 18(sp),d1
    949a:	|        |         tst.w 6(sp)
    949e:	|        |  ,----- beq.s 94bc <scaleSprite+0x236>
    94a0:	|        |  |      movea.l 24(sp),a0
    94a4:	|        |  |      move.l (a0),d0
    94a6:	|        |  |      move.l d0,d2
    94a8:	|        |  |      movea.l 24(sp),a0
    94ac:	|        |  |      move.l 8(a0),d0
    94b0:	|        |  |      move.l d0,d0
    94b2:	|        |  |      movea.w d2,a0
    94b4:	|        |  |      suba.w d0,a0
    94b6:	|        |  |      move.w a0,d0
    94b8:	|        |  |      subq.w #1,d0
    94ba:	|        |  |  ,-- bra.s 94c6 <scaleSprite+0x240>
    94bc:	|        |  '--|-> movea.l 24(sp),a0
    94c0:	|        |     |   move.l 8(a0),d0
    94c4:	|        |     |   move.l d0,d0
    94c6:	|        |     '-> movea.w d1,a0
    94c8:	|        |         suba.w d0,a0
    94ca:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    94ce:	|        '-------> movea.l 28(sp),a0
    94d2:	|                  move.l 24(a0),d0
    94d6:	|                  move.l d0,d1
    94d8:	|                  movea.l 24(sp),a0
    94dc:	|                  move.l 12(a0),d0
    94e0:	|                  move.l d0,d0
    94e2:	|                  sub.w d0,d1
    94e4:	|                  move.w 8(sp),d0
    94e8:	|                  movea.w d1,a0
    94ea:	|                  adda.w d0,a0
    94ec:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    94f0:	|                  movea.l 24(sp),a0
    94f4:	|                  move.l (a0),d0
    94f6:	|                  move.l d0,d0
    94f8:	|                  move.w 16(sp),d1
    94fc:	|                  add.w d0,d1
    94fe:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    9502:	|                  movea.l 24(sp),a0
    9506:	|                  move.l 4(a0),d0
    950a:	|                  move.l d0,d0
    950c:	|                  movea.w 14(sp),a0
    9510:	|                  adda.w d0,a0
    9512:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    9516:	'----------------> move.l 1ce46 <input+0xa>,d1
    951c:	                   moveq #0,d0
    951e:	                   move.w 16(sp),d0
    9522:	                   cmp.l d1,d0
    9524:	            ,----- bgt.s 955a <scaleSprite+0x2d4>
    9526:	            |      move.l 1ce46 <input+0xa>,d1
    952c:	            |      moveq #0,d0
    952e:	            |      move.w 12(sp),d0
    9532:	            |      cmp.l d1,d0
    9534:	            +----- blt.s 955a <scaleSprite+0x2d4>
    9536:	            |      move.l 1ce4a <input+0xe>,d1
    953c:	            |      moveq #0,d0
    953e:	            |      move.w 14(sp),d0
    9542:	            |      cmp.l d1,d0
    9544:	            +----- bgt.s 955a <scaleSprite+0x2d4>
    9546:	            |      move.l 1ce4a <input+0xe>,d1
    954c:	            |      moveq #0,d0
    954e:	            |      move.w 10(sp),d0
    9552:	            |      cmp.l d1,d0
    9554:	            +----- blt.s 955a <scaleSprite+0x2d4>
		return TRUE;
    9556:	            |      moveq #1,d0
    9558:	            |  ,-- bra.s 955c <scaleSprite+0x2d6>
	}
	return FALSE;
    955a:	            '--|-> clr.w d0
    955c:	               '-> move.l (sp)+,d2
    955e:	                   lea 16(sp),sp
    9562:	                   rts

00009564 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    9564:	    move.l 4(sp),d0
    9568:	,-- bpl.s 956c <TF_abs+0x8>
    956a:	|   neg.l d0
}
    956c:	'-> rts

0000956e <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    956e:	             lea -28(sp),sp
    9572:	             move.l a6,-(sp)
    9574:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    9576:	             move.l #132,28(sp)
    957e:	             clr.l 24(sp)
    9582:	             move.l 1ce8a <SysBase>,d0
    9588:	             movea.l d0,a6
    958a:	             move.l 28(sp),d0
    958e:	             move.l 24(sp),d1
    9592:	             jsr -684(a6)
    9596:	             move.l d0,20(sp)
    959a:	             move.l 20(sp),d0
    959e:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    95a2:	         ,-- bne.s 95aa <addPerson+0x3c>
    95a4:	         |   clr.w d0
    95a6:	,--------|-- bra.w 97da <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    95aa:	|        '-> move.l 48(sp),-(sp)
    95ae:	|            jsr d9d2 <loadObjectType>
    95b4:	|            addq.l #4,sp
    95b6:	|            movea.l 16(sp),a0
    95ba:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    95be:	|            movea.l 16(sp),a0
    95c2:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    95ca:	|            movea.l 16(sp),a0
    95ce:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    95d2:	|            movea.l 16(sp),a0
    95d6:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    95da:	|            move.l 44(sp),-(sp)
    95de:	|            jsr 17ae0 <__floatsisf>
    95e4:	|            addq.l #4,sp
    95e6:	|            move.l d0,d2
    95e8:	|            move.l 40(sp),-(sp)
    95ec:	|            jsr 17ae0 <__floatsisf>
    95f2:	|            addq.l #4,sp
    95f4:	|            move.l d2,-(sp)
    95f6:	|            move.l d0,-(sp)
    95f8:	|            move.l 24(sp),-(sp)
    95fc:	|            jsr b11e <moveAndScale>
    9602:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9606:	|            movea.l 16(sp),a0
    960a:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    960e:	|            movea.l 16(sp),a0
    9612:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9618:	|            movea.l 16(sp),a0
    961c:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    9622:	|            movea.l 16(sp),a0
    9626:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    962a:	|            movea.l 16(sp),a0
    962e:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    9632:	|            movea.l 16(sp),a0
    9636:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    963c:	|            movea.l 16(sp),a0
    9640:	|            clr.l 106(a0)
    newPerson->angle = 180;
    9644:	|            movea.l 16(sp),a0
    9648:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    9650:	|            movea.l 16(sp),a0
    9654:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    965c:	|            movea.l 16(sp),a0
    9660:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    9664:	|            movea.l 16(sp),a0
    9668:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    966c:	|            movea.l 16(sp),a0
    9670:	|            movea.l 114(a0),a0
    9674:	|            move.l 24(a0),d0
    9678:	|            movea.l 16(sp),a0
    967c:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    9680:	|            movea.l 16(sp),a0
    9684:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    9688:	|            movea.l 16(sp),a0
    968c:	|            movea.l 114(a0),a0
    9690:	|            move.l 32(a0),d0
    9694:	|            movea.l 16(sp),a0
    9698:	|            move.l d0,122(a0)
    newPerson->r = 0;
    969c:	|            movea.l 16(sp),a0
    96a0:	|            clr.b 126(a0)
    newPerson->g = 0;
    96a4:	|            movea.l 16(sp),a0
    96a8:	|            clr.b 127(a0)
    newPerson->b = 0;
    96ac:	|            movea.l 16(sp),a0
    96b0:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    96b4:	|            movea.l 16(sp),a0
    96b8:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    96bc:	|            movea.l 16(sp),a0
    96c0:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    96c4:	|            movea.l 16(sp),a0
    96c8:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    96ce:	|            clr.l -(sp)
    96d0:	|            move.l 20(sp),-(sp)
    96d4:	|            jsr 4516 <setFrames>
    96da:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    96dc:	|            movea.l 52(sp),a0
    96e0:	|            movea.l (a0),a0
    96e2:	|            movea.l (a0),a0
    96e4:	|            movea.l 4(a0),a0
    96e8:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    96ec:	|     ,----- bpl.s 96f6 <addPerson+0x188>
    96ee:	|     |      move.l 12(sp),d0
    96f2:	|     |      neg.l d0
    96f4:	|     |  ,-- bra.s 96f8 <addPerson+0x18a>
    96f6:	|     '--|-> moveq #1,d0
    96f8:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    96fc:	|            movea.l 52(sp),a0
    9700:	|            movea.l (a0),a0
    9702:	|            movea.l (a0),a0
    9704:	|            movea.l (a0),a0
    9706:	|            move.l 8(a0),d0
    970a:	|            cmp.l 8(sp),d0
    970e:	|     ,----- bgt.s 9740 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    9710:	|     |      tst.l 12(sp)
    9714:	|     |  ,-- bge.s 9722 <addPerson+0x1b4>
            newPerson->height = 5;
    9716:	|     |  |   movea.l 16(sp),a0
    971a:	|     |  |   moveq #5,d0
    971c:	|     |  |   move.l d0,20(a0)
    9720:	|  ,--|--|-- bra.s 976c <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    9722:	|  |  |  '-> movea.l 52(sp),a0
    9726:	|  |  |      movea.l (a0),a0
    9728:	|  |  |      movea.l (a0),a0
    972a:	|  |  |      movea.l (a0),a0
    972c:	|  |  |      movea.l 16(a0),a0
    9730:	|  |  |      move.l 12(a0),d0
    9734:	|  |  |      addq.l #5,d0
    9736:	|  |  |      movea.l 16(sp),a0
    973a:	|  |  |      move.l d0,20(a0)
    973e:	|  +--|----- bra.s 976c <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    9740:	|  |  '----> movea.l 52(sp),a0
    9744:	|  |         movea.l (a0),a0
    9746:	|  |         movea.l (a0),a0
    9748:	|  |         movea.l (a0),a0
    974a:	|  |         movea.l 16(a0),a0
    974e:	|  |         move.l 8(sp),d1
    9752:	|  |         move.l d1,d0
    9754:	|  |         lsl.l #3,d0
    9756:	|  |         sub.l d1,d0
    9758:	|  |         add.l d0,d0
    975a:	|  |         add.l d0,d0
    975c:	|  |         adda.l d0,a0
    975e:	|  |         move.l 12(a0),d0
    9762:	|  |         addq.l #5,d0
    9764:	|  |         movea.l 16(sp),a0
    9768:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    976c:	|  '-------> move.l #118506,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9774:	|        ,-- bra.s 9784 <addPerson+0x216>
        changethat = &((*changethat)->next);
    9776:	|     ,--|-> movea.l 32(sp),a0
    977a:	|     |  |   move.l (a0),d0
    977c:	|     |  |   moveq #36,d1
    977e:	|     |  |   add.l d0,d1
    9780:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    9784:	|     |  '-> movea.l 32(sp),a0
    9788:	|     |      move.l (a0),d0
    978a:	|     |  ,-- beq.s 97b2 <addPerson+0x244>
    978c:	|     |  |   movea.l 32(sp),a0
    9790:	|     |  |   movea.l (a0),a0
    9792:	|     |  |   move.l 4(a0),d2
    9796:	|     |  |   move.l 44(sp),-(sp)
    979a:	|     |  |   jsr 17ae0 <__floatsisf>
    97a0:	|     |  |   addq.l #4,sp
    97a2:	|     |  |   move.l d0,-(sp)
    97a4:	|     |  |   move.l d2,-(sp)
    97a6:	|     |  |   jsr 17d06 <__ltsf2>
    97ac:	|     |  |   addq.l #8,sp
    97ae:	|     |  |   tst.l d0
    97b0:	|     '--|-- blt.s 9776 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    97b2:	|        '-> movea.l 32(sp),a0
    97b6:	|            move.l (a0),d0
    97b8:	|            movea.l 16(sp),a0
    97bc:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    97c0:	|            movea.l 32(sp),a0
    97c4:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    97c8:	|            movea.l 16(sp),a0
    97cc:	|            move.l 114(a0),d0
    97d0:	|            sne d0
    97d2:	|            neg.b d0
    97d4:	|            move.b d0,d0
    97d6:	|            andi.w #255,d0
}
    97da:	'----------> move.l (sp)+,d2
    97dc:	             movea.l (sp)+,a6
    97de:	             lea 28(sp),sp
    97e2:	             rts

000097e4 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    97e4:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    97e6:	       move.l 8(sp),-(sp)
    97ea:	       jsr a974 <findPerson>
    97f0:	       addq.l #4,sp
    97f2:	       move.l d0,(sp)
    if (moveMe) {
    97f4:	,----- beq.s 9828 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    97f6:	|      movea.l (sp),a0
    97f8:	|      move.l 68(a0),d0
    97fc:	|  ,-- beq.s 980e <animatePerson+0x2a>
    97fe:	|  |   movea.l (sp),a0
    9800:	|  |   move.l 68(a0),d0
    9804:	|  |   move.l d0,-(sp)
    9806:	|  |   jsr 5374 <abortFunction>
    980c:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    980e:	|  '-> movea.l (sp),a0
    9810:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    9814:	|      movea.l (sp),a0
    9816:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    981a:	|      movea.l (sp),a0
    981c:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    9820:	|      movea.l (sp),a0
    9822:	|      move.l 12(sp),72(a0)
    }
}
    9828:	'----> nop
    982a:	       addq.l #4,sp
    982c:	       rts

0000982e <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    982e:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9830:	       move.l 8(sp),-(sp)
    9834:	       jsr a974 <findPerson>
    983a:	       addq.l #4,sp
    983c:	       move.l d0,(sp)
    if (moveMe) {
    983e:	,----- beq.s 9880 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    9840:	|      movea.l (sp),a0
    9842:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    9846:	|      movea.l (sp),a0
    9848:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    984e:	|      move.l (sp),-(sp)
    9850:	|      jsr b2ac <rethinkAngle>
    9856:	|      addq.l #4,sp
        if (moveMe->walking) {
    9858:	|      movea.l (sp),a0
    985a:	|      move.w 64(a0),d0
    985e:	|  ,-- beq.s 9872 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    9860:	|  |   pea 1 <_start+0x1>
    9864:	|  |   move.l 4(sp),-(sp)
    9868:	|  |   jsr 4516 <setFrames>
    986e:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    9870:	+--|-- bra.s 9880 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    9872:	|  '-> clr.l -(sp)
    9874:	|      move.l 4(sp),-(sp)
    9878:	|      jsr 4516 <setFrames>
    987e:	|      addq.l #8,sp
}
    9880:	'----> nop
    9882:	       addq.l #4,sp
    9884:	       rts

00009886 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9886:	             lea -36(sp),sp
    988a:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    988c:	             movea.l 44(sp),a0
    9890:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9896:	             moveq #12,d0
    9898:	             move.l d0,28(sp)
    989c:	             clr.l 24(sp)
    98a0:	             move.l 1ce8a <SysBase>,d0
    98a6:	             movea.l d0,a6
    98a8:	             move.l 28(sp),d0
    98ac:	             move.l 24(sp),d1
    98b0:	             jsr -684(a6)
    98b4:	             move.l d0,20(sp)
    98b8:	             move.l 20(sp),d0
    98bc:	             move.l d0,16(sp)
	if (!(newAnim)) {
    98c0:	         ,-- bne.s 98d6 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    98c2:	         |   pea 195b2 <PutChar+0x1462>
    98c8:	         |   jsr 176ae <KPrintF>
    98ce:	         |   addq.l #4,sp
		return NULL;
    98d0:	         |   moveq #0,d0
    98d2:	,--------|-- bra.w 9a28 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    98d6:	|        '-> movea.l 44(sp),a0
    98da:	|            move.l (a0),d0
    98dc:	|            movea.l 16(sp),a0
    98e0:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    98e2:	|            movea.l 16(sp),a0
    98e6:	|            movea.l (a0),a0
    98e8:	|            move.l 4(a0),d0
    98ec:	|            addq.l #1,d0
    98ee:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    98f2:	|            movea.l 16(sp),a0
    98f6:	|            move.l 32(sp),8(a0)

	if (num) {
    98fc:	|  ,-------- beq.w 9a1c <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    9900:	|  |         move.l 32(sp),d1
    9904:	|  |         move.l d1,d0
    9906:	|  |         add.l d0,d0
    9908:	|  |         add.l d1,d0
    990a:	|  |         add.l d0,d0
    990c:	|  |         add.l d0,d0
    990e:	|  |         move.l d0,12(sp)
    9912:	|  |         clr.l 8(sp)
    9916:	|  |         move.l 1ce8a <SysBase>,d0
    991c:	|  |         movea.l d0,a6
    991e:	|  |         move.l 12(sp),d0
    9922:	|  |         move.l 8(sp),d1
    9926:	|  |         jsr -684(a6)
    992a:	|  |         move.l d0,4(sp)
    992e:	|  |         move.l 4(sp),d0
    9932:	|  |         movea.l 16(sp),a0
    9936:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    993a:	|  |         movea.l 16(sp),a0
    993e:	|  |         move.l 4(a0),d0
    9942:	|  |     ,-- bne.s 9958 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    9944:	|  |     |   pea 195b2 <PutChar+0x1462>
    994a:	|  |     |   jsr 176ae <KPrintF>
    9950:	|  |     |   addq.l #4,sp
			return NULL;
    9952:	|  |     |   moveq #0,d0
    9954:	+--|-----|-- bra.w 9a28 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    9958:	|  |     '-> clr.l 36(sp)
    995c:	|  |     ,-- bra.w 9a0e <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    9960:	|  |  ,--|-> movea.l 44(sp),a0
    9964:	|  |  |  |   movea.l 4(a0),a0
    9968:	|  |  |  |   move.l 36(sp),d1
    996c:	|  |  |  |   move.l d1,d0
    996e:	|  |  |  |   add.l d0,d0
    9970:	|  |  |  |   add.l d1,d0
    9972:	|  |  |  |   add.l d0,d0
    9974:	|  |  |  |   add.l d0,d0
    9976:	|  |  |  |   lea (0,a0,d0.l),a1
    997a:	|  |  |  |   movea.l 16(sp),a0
    997e:	|  |  |  |   movea.l 4(a0),a0
    9982:	|  |  |  |   move.l 36(sp),d1
    9986:	|  |  |  |   move.l d1,d0
    9988:	|  |  |  |   add.l d0,d0
    998a:	|  |  |  |   add.l d1,d0
    998c:	|  |  |  |   add.l d0,d0
    998e:	|  |  |  |   add.l d0,d0
    9990:	|  |  |  |   adda.l d0,a0
    9992:	|  |  |  |   move.l (a1),d0
    9994:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9996:	|  |  |  |   movea.l 44(sp),a0
    999a:	|  |  |  |   movea.l 4(a0),a0
    999e:	|  |  |  |   move.l 36(sp),d1
    99a2:	|  |  |  |   move.l d1,d0
    99a4:	|  |  |  |   add.l d0,d0
    99a6:	|  |  |  |   add.l d1,d0
    99a8:	|  |  |  |   add.l d0,d0
    99aa:	|  |  |  |   add.l d0,d0
    99ac:	|  |  |  |   lea (0,a0,d0.l),a1
    99b0:	|  |  |  |   movea.l 16(sp),a0
    99b4:	|  |  |  |   movea.l 4(a0),a0
    99b8:	|  |  |  |   move.l 36(sp),d1
    99bc:	|  |  |  |   move.l d1,d0
    99be:	|  |  |  |   add.l d0,d0
    99c0:	|  |  |  |   add.l d1,d0
    99c2:	|  |  |  |   add.l d0,d0
    99c4:	|  |  |  |   add.l d0,d0
    99c6:	|  |  |  |   adda.l d0,a0
    99c8:	|  |  |  |   move.l 4(a1),d0
    99cc:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    99d0:	|  |  |  |   movea.l 44(sp),a0
    99d4:	|  |  |  |   movea.l 4(a0),a0
    99d8:	|  |  |  |   move.l 36(sp),d1
    99dc:	|  |  |  |   move.l d1,d0
    99de:	|  |  |  |   add.l d0,d0
    99e0:	|  |  |  |   add.l d1,d0
    99e2:	|  |  |  |   add.l d0,d0
    99e4:	|  |  |  |   add.l d0,d0
    99e6:	|  |  |  |   lea (0,a0,d0.l),a1
    99ea:	|  |  |  |   movea.l 16(sp),a0
    99ee:	|  |  |  |   movea.l 4(a0),a0
    99f2:	|  |  |  |   move.l 36(sp),d1
    99f6:	|  |  |  |   move.l d1,d0
    99f8:	|  |  |  |   add.l d0,d0
    99fa:	|  |  |  |   add.l d1,d0
    99fc:	|  |  |  |   add.l d0,d0
    99fe:	|  |  |  |   add.l d0,d0
    9a00:	|  |  |  |   adda.l d0,a0
    9a02:	|  |  |  |   move.l 8(a1),d0
    9a06:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    9a0a:	|  |  |  |   addq.l #1,36(sp)
    9a0e:	|  |  |  '-> move.l 36(sp),d0
    9a12:	|  |  |      cmp.l 32(sp),d0
    9a16:	|  |  '----- blt.w 9960 <copyAnim+0xda>
    9a1a:	|  |     ,-- bra.s 9a24 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    9a1c:	|  '-----|-> movea.l 16(sp),a0
    9a20:	|        |   clr.l 4(a0)
	}

	return newAnim;
    9a24:	|        '-> move.l 16(sp),d0
}
    9a28:	'----------> movea.l (sp)+,a6
    9a2a:	             lea 36(sp),sp
    9a2e:	             rts

00009a30 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    9a30:	                lea -44(sp),sp
    9a34:	                move.l a6,-(sp)
    9a36:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    9a38:	                moveq #12,d0
    9a3a:	                move.l d0,40(sp)
    9a3e:	                clr.l 36(sp)
    9a42:	                move.l 1ce8a <SysBase>,d0
    9a48:	                movea.l d0,a6
    9a4a:	                move.l 40(sp),d0
    9a4e:	                move.l 36(sp),d1
    9a52:	                jsr -684(a6)
    9a56:	                move.l d0,32(sp)
    9a5a:	                move.l 32(sp),d0
    9a5e:	                move.l d0,28(sp)
	if( !newP) {
    9a62:	            ,-- bne.s 9a78 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9a64:	            |   pea 195d3 <PutChar+0x1483>
    9a6a:	            |   jsr 176ae <KPrintF>
    9a70:	            |   addq.l #4,sp
		return NULL;
    9a72:	            |   moveq #0,d0
    9a74:	,-----------|-- bra.w 9c48 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    9a78:	|           '-> movea.l 28(sp),a0
    9a7c:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9a82:	|               move.l 56(sp),d1
    9a86:	|               move.l d1,d0
    9a88:	|               add.l d0,d0
    9a8a:	|               add.l d1,d0
    9a8c:	|               add.l d0,d0
    9a8e:	|               add.l d0,d0
    9a90:	|               move.l d0,24(sp)
    9a94:	|               clr.l 20(sp)
    9a98:	|               move.l 1ce8a <SysBase>,d0
    9a9e:	|               movea.l d0,a6
    9aa0:	|               move.l 24(sp),d0
    9aa4:	|               move.l 20(sp),d1
    9aa8:	|               jsr -684(a6)
    9aac:	|               move.l d0,16(sp)
    9ab0:	|               move.l 16(sp),d0
    9ab4:	|               movea.l 28(sp),a0
    9ab8:	|               move.l d0,4(a0)
	if( !newP->frames) {
    9abc:	|               movea.l 28(sp),a0
    9ac0:	|               move.l 4(a0),d0
    9ac4:	|           ,-- bne.s 9ada <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9ac6:	|           |   pea 195d3 <PutChar+0x1483>
    9acc:	|           |   jsr 176ae <KPrintF>
    9ad2:	|           |   addq.l #4,sp
		return NULL;
    9ad4:	|           |   moveq #0,d0
    9ad6:	+-----------|-- bra.w 9c48 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    9ada:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    9ae0:	|               movea.l 60(sp),a0
    9ae4:	|               move.l (a0),44(sp)
	while (a) {
    9ae8:	|     ,-------- bra.w 9c3c <createPersonaAnim+0x20c>
		a --;
    9aec:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    9af0:	|  |  |         movea.l 28(sp),a0
    9af4:	|  |  |         movea.l 4(a0),a0
    9af8:	|  |  |         move.l 48(sp),d1
    9afc:	|  |  |         move.l d1,d0
    9afe:	|  |  |         add.l d0,d0
    9b00:	|  |  |         add.l d1,d0
    9b02:	|  |  |         add.l d0,d0
    9b04:	|  |  |         add.l d0,d0
    9b06:	|  |  |         adda.l d0,a0
    9b08:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    9b0c:	|  |  |         movea.l 44(sp),a0
    9b10:	|  |  |         move.l (a0),d0
    9b12:	|  |  |         moveq #5,d1
    9b14:	|  |  |         cmp.l d0,d1
    9b16:	|  |  |     ,-- bne.s 9b42 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9b18:	|  |  |     |   movea.l 28(sp),a0
    9b1c:	|  |  |     |   movea.l 4(a0),a0
    9b20:	|  |  |     |   move.l 48(sp),d1
    9b24:	|  |  |     |   move.l d1,d0
    9b26:	|  |  |     |   add.l d0,d0
    9b28:	|  |  |     |   add.l d1,d0
    9b2a:	|  |  |     |   add.l d0,d0
    9b2c:	|  |  |     |   add.l d0,d0
    9b2e:	|  |  |     |   lea (0,a0,d0.l),a1
    9b32:	|  |  |     |   movea.l 44(sp),a0
    9b36:	|  |  |     |   move.l 4(a0),d0
    9b3a:	|  |  |     |   move.l d0,8(a1)
    9b3e:	|  |  |  ,--|-- bra.w 9bea <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    9b42:	|  |  |  |  '-> movea.l 44(sp),a0
    9b46:	|  |  |  |      move.l (a0),d0
    9b48:	|  |  |  |      moveq #2,d1
    9b4a:	|  |  |  |      cmp.l d0,d1
    9b4c:	|  |  |  |  ,-- bne.s 9b78 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    9b4e:	|  |  |  |  |   movea.l 44(sp),a0
    9b52:	|  |  |  |  |   move.l 4(a0),d2
    9b56:	|  |  |  |  |   movea.l 28(sp),a0
    9b5a:	|  |  |  |  |   movea.l 4(a0),a0
    9b5e:	|  |  |  |  |   move.l 48(sp),d1
    9b62:	|  |  |  |  |   move.l d1,d0
    9b64:	|  |  |  |  |   add.l d0,d0
    9b66:	|  |  |  |  |   add.l d1,d0
    9b68:	|  |  |  |  |   add.l d0,d0
    9b6a:	|  |  |  |  |   add.l d0,d0
    9b6c:	|  |  |  |  |   adda.l d0,a0
    9b6e:	|  |  |  |  |   move.l d2,d0
    9b70:	|  |  |  |  |   neg.l d0
    9b72:	|  |  |  |  |   move.l d0,8(a0)
    9b76:	|  |  |  +--|-- bra.s 9bea <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    9b78:	|  |  |  |  '-> movea.l 44(sp),a0
    9b7c:	|  |  |  |      move.l (a0),d0
    9b7e:	|  |  |  |      moveq #6,d1
    9b80:	|  |  |  |      cmp.l d0,d1
    9b82:	|  |  |  |  ,-- bne.s 9bca <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9b84:	|  |  |  |  |   movea.l 44(sp),a0
    9b88:	|  |  |  |  |   movea.l 4(a0),a0
    9b8c:	|  |  |  |  |   move.l (a0),d0
    9b8e:	|  |  |  |  |   move.l d0,-(sp)
    9b90:	|  |  |  |  |   pea 1 <_start+0x1>
    9b94:	|  |  |  |  |   lea 20(sp),a0
    9b98:	|  |  |  |  |   move.l a0,-(sp)
    9b9a:	|  |  |  |  |   jsr 14bce <getValueType>
    9ba0:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9ba4:	|  |  |  |  |   movea.l 44(sp),a0
    9ba8:	|  |  |  |  |   movea.l 4(a0),a0
    9bac:	|  |  |  |  |   movea.l (a0),a0
    9bae:	|  |  |  |  |   move.l 8(a0),d0
    9bb2:	|  |  |  |  |   move.l d0,-(sp)
    9bb4:	|  |  |  |  |   pea 1 <_start+0x1>
    9bb8:	|  |  |  |  |   lea 16(sp),a0
    9bbc:	|  |  |  |  |   move.l a0,-(sp)
    9bbe:	|  |  |  |  |   jsr 14bce <getValueType>
    9bc4:	|  |  |  |  |   lea 12(sp),sp
    9bc8:	|  |  |  +--|-- bra.s 9bea <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    9bca:	|  |  |  |  '-> move.l 44(sp),d0
    9bce:	|  |  |  |      move.l d0,-(sp)
    9bd0:	|  |  |  |      pea 1 <_start+0x1>
    9bd4:	|  |  |  |      lea 20(sp),a0
    9bd8:	|  |  |  |      move.l a0,-(sp)
    9bda:	|  |  |  |      jsr 14bce <getValueType>
    9be0:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    9be4:	|  |  |  |      moveq #1,d0
    9be6:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    9bea:	|  |  |  '----> move.l 60(sp),-(sp)
    9bee:	|  |  |         jsr 15552 <trimStack>
    9bf4:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9bf6:	|  |  |         movea.l 28(sp),a0
    9bfa:	|  |  |         movea.l 4(a0),a0
    9bfe:	|  |  |         move.l 48(sp),d1
    9c02:	|  |  |         move.l d1,d0
    9c04:	|  |  |         add.l d0,d0
    9c06:	|  |  |         add.l d1,d0
    9c08:	|  |  |         add.l d0,d0
    9c0a:	|  |  |         add.l d0,d0
    9c0c:	|  |  |         adda.l d0,a0
    9c0e:	|  |  |         move.l 12(sp),d0
    9c12:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9c14:	|  |  |         movea.l 28(sp),a0
    9c18:	|  |  |         movea.l 4(a0),a0
    9c1c:	|  |  |         move.l 48(sp),d1
    9c20:	|  |  |         move.l d1,d0
    9c22:	|  |  |         add.l d0,d0
    9c24:	|  |  |         add.l d1,d0
    9c26:	|  |  |         add.l d0,d0
    9c28:	|  |  |         add.l d0,d0
    9c2a:	|  |  |         adda.l d0,a0
    9c2c:	|  |  |         move.l 8(sp),d0
    9c30:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9c34:	|  |  |         movea.l 60(sp),a0
    9c38:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9c3c:	|  |  '-------> tst.l 48(sp)
    9c40:	|  '----------- bne.w 9aec <createPersonaAnim+0xbc>
	}

	return newP;
    9c44:	|               move.l 28(sp),d0
}
    9c48:	'-------------> move.l (sp)+,d2
    9c4a:	                movea.l (sp)+,a6
    9c4c:	                lea 44(sp),sp
    9c50:	                rts

00009c52 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9c52:	       lea -12(sp),sp
    9c56:	       move.l a6,-(sp)

	if(orig->theSprites)
    9c58:	       movea.l 20(sp),a0
    9c5c:	       move.l (a0),d0
    9c5e:	   ,-- beq.s 9c88 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9c60:	   |   movea.l 20(sp),a0
    9c64:	   |   movea.l (a0),a0
    9c66:	   |   move.l 4(a0),d0
    9c6a:	   |   subq.l #1,d0
    9c6c:	   |   move.l d0,4(a0)
    9c70:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9c76:	   +-- bne.s 9c88 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9c78:	   |   movea.l 20(sp),a0
    9c7c:	   |   move.l (a0),d0
    9c7e:	   |   move.l d0,-(sp)
    9c80:	   |   jsr 8d36 <forgetSpriteBank>
    9c86:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9c88:	   '-> tst.l 20(sp)
    9c8c:	,----- beq.s 9ccc <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9c8e:	|      movea.l 20(sp),a0
    9c92:	|      move.l 8(a0),d0
    9c96:	|  ,-- beq.s 9cb2 <deleteAnim+0x60>
			FreeVec( orig->frames);
    9c98:	|  |   movea.l 20(sp),a0
    9c9c:	|  |   move.l 4(a0),8(sp)
    9ca2:	|  |   move.l 1ce8a <SysBase>,d0
    9ca8:	|  |   movea.l d0,a6
    9caa:	|  |   movea.l 8(sp),a1
    9cae:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9cb2:	|  '-> move.l 20(sp),4(sp)
    9cb8:	|      move.l 1ce8a <SysBase>,d0
    9cbe:	|      movea.l d0,a6
    9cc0:	|      movea.l 4(sp),a1
    9cc4:	|      jsr -690(a6)
		orig = NULL;
    9cc8:	|      clr.l 20(sp)
	}	
	
}
    9ccc:	'----> nop
    9cce:	       movea.l (sp)+,a6
    9cd0:	       lea 12(sp),sp
    9cd4:	       rts

00009cd6 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9cd6:	          lea -124(sp),sp
    9cda:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    9cde:	          movea.l 152(sp),a0
    9ce2:	          move.l 56(a0),d1
    9ce6:	          movea.l 152(sp),a0
    9cea:	          move.l 60(a0),d0
    9cee:	          cmp.l d1,d0
    9cf0:	      ,-- bne.s 9d20 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9cf2:	      |   movea.l 152(sp),a0
    9cf6:	      |   moveq #-1,d0
    9cf8:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    9cfc:	      |   movea.l 152(sp),a0
    9d00:	      |   move.l 40(a0),d0
    9d04:	      |   movea.l 152(sp),a0
    9d08:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9d0c:	      |   movea.l 152(sp),a0
    9d10:	      |   move.l 44(a0),d0
    9d14:	      |   movea.l 152(sp),a0
    9d18:	      |   move.l d0,52(a0)
    9d1c:	   ,--|-- bra.w a286 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9d20:	   |  '-> movea.l 1cfa2 <currentFloor>,a0
    9d26:	   |      move.l 16(a0),d1
    9d2a:	   |      movea.l 152(sp),a0
    9d2e:	   |      move.l 56(a0),d0
    9d32:	   |      add.l d0,d0
    9d34:	   |      add.l d0,d0
    9d36:	   |      movea.l d1,a0
    9d38:	   |      adda.l d0,a0
    9d3a:	   |      move.l (a0),d1
    9d3c:	   |      movea.l 152(sp),a0
    9d40:	   |      move.l 60(a0),d0
    9d44:	   |      add.l d0,d0
    9d46:	   |      add.l d0,d0
    9d48:	   |      movea.l d1,a0
    9d4a:	   |      adda.l d0,a0
    9d4c:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9d50:	   |      moveq #-1,d0
    9d52:	   |      cmp.l 144(sp),d0
    9d56:	   |  ,-- bne.s 9d5e <doBorderStuff+0x88>
    9d58:	   |  |   clr.w d0
    9d5a:	,--|--|-- bra.w a386 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9d5e:	|  |  '-> movea.l 1cfa2 <currentFloor>,a0
    9d64:	|  |      move.l 12(a0),d1
    9d68:	|  |      move.l 144(sp),d0
    9d6c:	|  |      lsl.l #3,d0
    9d6e:	|  |      add.l d0,d1
    9d70:	|  |      movea.l 1cfa2 <currentFloor>,a0
    9d76:	|  |      movea.l 12(a0),a1
    9d7a:	|  |      movea.l 152(sp),a0
    9d7e:	|  |      move.l 56(a0),d0
    9d82:	|  |      lsl.l #3,d0
    9d84:	|  |      add.l a1,d0
    9d86:	|  |      lea 40(sp),a0
    9d8a:	|  |      move.l a0,-(sp)
    9d8c:	|  |      lea 48(sp),a0
    9d90:	|  |      move.l a0,-(sp)
    9d92:	|  |      move.l d1,-(sp)
    9d94:	|  |      move.l d0,-(sp)
    9d96:	|  |      jsr 16914 <getMatchingCorners>
    9d9c:	|  |      lea 16(sp),sp
    9da0:	|  |      tst.w d0
    9da2:	|  |  ,-- bne.s 9db8 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9da4:	|  |  |   pea 195fd <PutChar+0x14ad>
    9daa:	|  |  |   jsr 176ae <KPrintF>
    9db0:	|  |  |   addq.l #4,sp
            return FALSE;
    9db2:	|  |  |   clr.w d0
    9db4:	+--|--|-- bra.w a386 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9db8:	|  |  '-> movea.l 152(sp),a0
    9dbc:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9dc2:	|  |      movea.l 152(sp),a0
    9dc6:	|  |      move.l (a0),d0
    9dc8:	|  |      move.l d0,-(sp)
    9dca:	|  |      jsr 17a78 <__fixsfsi>
    9dd0:	|  |      addq.l #4,sp
    9dd2:	|  |      move.l d0,140(sp)
    9dd6:	|  |      movea.l 152(sp),a0
    9dda:	|  |      move.l 4(a0),d0
    9dde:	|  |      move.l d0,-(sp)
    9de0:	|  |      jsr 17a78 <__fixsfsi>
    9de6:	|  |      addq.l #4,sp
    9de8:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9dec:	|  |      movea.l 152(sp),a0
    9df0:	|  |      move.l 40(a0),132(sp)
    9df6:	|  |      movea.l 152(sp),a0
    9dfa:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9e00:	|  |      movea.l 1cfa2 <currentFloor>,a0
    9e06:	|  |      move.l 4(a0),d1
    9e0a:	|  |      move.l 44(sp),d0
    9e0e:	|  |      lsl.l #3,d0
    9e10:	|  |      movea.l d1,a0
    9e12:	|  |      adda.l d0,a0
    9e14:	|  |      move.l (a0),124(sp)
    9e18:	|  |      movea.l 1cfa2 <currentFloor>,a0
    9e1e:	|  |      move.l 4(a0),d1
    9e22:	|  |      move.l 44(sp),d0
    9e26:	|  |      lsl.l #3,d0
    9e28:	|  |      movea.l d1,a0
    9e2a:	|  |      adda.l d0,a0
    9e2c:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9e32:	|  |      movea.l 1cfa2 <currentFloor>,a0
    9e38:	|  |      move.l 4(a0),d1
    9e3c:	|  |      move.l 40(sp),d0
    9e40:	|  |      lsl.l #3,d0
    9e42:	|  |      movea.l d1,a0
    9e44:	|  |      adda.l d0,a0
    9e46:	|  |      move.l (a0),116(sp)
    9e4a:	|  |      movea.l 1cfa2 <currentFloor>,a0
    9e50:	|  |      move.l 4(a0),d1
    9e54:	|  |      move.l 40(sp),d0
    9e58:	|  |      lsl.l #3,d0
    9e5a:	|  |      movea.l d1,a0
    9e5c:	|  |      adda.l d0,a0
    9e5e:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9e64:	|  |      move.l 140(sp),d0
    9e68:	|  |      sub.l 132(sp),d0
    9e6c:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9e70:	|  |      move.l 136(sp),d0
    9e74:	|  |      sub.l 128(sp),d0
    9e78:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9e7c:	|  |      move.l 116(sp),d0
    9e80:	|  |      sub.l 124(sp),d0
    9e84:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9e88:	|  |      move.l 112(sp),d0
    9e8c:	|  |      sub.l 120(sp),d0
    9e90:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9e94:	|  |      move.l 124(sp),d0
    9e98:	|  |      sub.l 140(sp),d0
    9e9c:	|  |      move.l 104(sp),-(sp)
    9ea0:	|  |      move.l d0,-(sp)
    9ea2:	|  |      jsr 1803a <__mulsi3>
    9ea8:	|  |      addq.l #8,sp
    9eaa:	|  |      move.l d0,d2
    9eac:	|  |      move.l 120(sp),d0
    9eb0:	|  |      sub.l 136(sp),d0
    9eb4:	|  |      move.l 108(sp),-(sp)
    9eb8:	|  |      move.l d0,-(sp)
    9eba:	|  |      jsr 1803a <__mulsi3>
    9ec0:	|  |      addq.l #8,sp
    9ec2:	|  |      move.l d2,d1
    9ec4:	|  |      sub.l d0,d1
    9ec6:	|  |      move.l d1,-(sp)
    9ec8:	|  |      jsr 17aa0 <__floatsidf>
    9ece:	|  |      addq.l #4,sp
    9ed0:	|  |      move.l d0,32(sp)
    9ed4:	|  |      move.l d1,36(sp)
    9ed8:	|  |      move.l 32(sp),88(sp)
    9ede:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9ee4:	|  |      move.l 96(sp),-(sp)
    9ee8:	|  |      move.l 112(sp),-(sp)
    9eec:	|  |      jsr 1803a <__mulsi3>
    9ef2:	|  |      addq.l #8,sp
    9ef4:	|  |      move.l d0,d2
    9ef6:	|  |      move.l 100(sp),-(sp)
    9efa:	|  |      move.l 108(sp),-(sp)
    9efe:	|  |      jsr 1803a <__mulsi3>
    9f04:	|  |      addq.l #8,sp
    9f06:	|  |      move.l d2,d1
    9f08:	|  |      sub.l d0,d1
    9f0a:	|  |      move.l d1,-(sp)
    9f0c:	|  |      jsr 17aa0 <__floatsidf>
    9f12:	|  |      addq.l #4,sp
    9f14:	|  |      move.l d1,-(sp)
    9f16:	|  |      move.l d0,-(sp)
    9f18:	|  |      move.l 100(sp),-(sp)
    9f1c:	|  |      move.l 100(sp),-(sp)
    9f20:	|  |      jsr 17934 <__divdf3>
    9f26:	|  |      lea 16(sp),sp
    9f2a:	|  |      move.l d0,24(sp)
    9f2e:	|  |      move.l d1,28(sp)
    9f32:	|  |      move.l 24(sp),88(sp)
    9f38:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9f3e:	|  |      clr.l -(sp)
    9f40:	|  |      clr.l -(sp)
    9f42:	|  |      move.l 100(sp),-(sp)
    9f46:	|  |      move.l 100(sp),-(sp)
    9f4a:	|  |      jsr 17bfe <__gtdf2>
    9f50:	|  |      lea 16(sp),sp
    9f54:	|  |      tst.l d0
    9f56:	|  |  ,-- ble.w a02e <doBorderStuff+0x358>
    9f5a:	|  |  |   clr.l -(sp)
    9f5c:	|  |  |   move.l #1072693248,-(sp)
    9f62:	|  |  |   move.l 100(sp),-(sp)
    9f66:	|  |  |   move.l 100(sp),-(sp)
    9f6a:	|  |  |   jsr 17cb8 <__ltdf2>
    9f70:	|  |  |   lea 16(sp),sp
    9f74:	|  |  |   tst.l d0
    9f76:	|  |  +-- bge.w a02e <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9f7a:	|  |  |   move.l 124(sp),-(sp)
    9f7e:	|  |  |   jsr 17aa0 <__floatsidf>
    9f84:	|  |  |   addq.l #4,sp
    9f86:	|  |  |   move.l d0,d2
    9f88:	|  |  |   move.l d1,d3
    9f8a:	|  |  |   move.l 100(sp),-(sp)
    9f8e:	|  |  |   jsr 17aa0 <__floatsidf>
    9f94:	|  |  |   addq.l #4,sp
    9f96:	|  |  |   move.l 92(sp),-(sp)
    9f9a:	|  |  |   move.l 92(sp),-(sp)
    9f9e:	|  |  |   move.l d1,-(sp)
    9fa0:	|  |  |   move.l d0,-(sp)
    9fa2:	|  |  |   jsr 17b30 <__muldf3>
    9fa8:	|  |  |   lea 16(sp),sp
    9fac:	|  |  |   move.l d1,-(sp)
    9fae:	|  |  |   move.l d0,-(sp)
    9fb0:	|  |  |   move.l d3,-(sp)
    9fb2:	|  |  |   move.l d2,-(sp)
    9fb4:	|  |  |   jsr 178d2 <__adddf3>
    9fba:	|  |  |   lea 16(sp),sp
    9fbe:	|  |  |   move.l d1,-(sp)
    9fc0:	|  |  |   move.l d0,-(sp)
    9fc2:	|  |  |   jsr 17a42 <__fixdfsi>
    9fc8:	|  |  |   addq.l #8,sp
    9fca:	|  |  |   movea.l 152(sp),a0
    9fce:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9fd2:	|  |  |   move.l 120(sp),-(sp)
    9fd6:	|  |  |   jsr 17aa0 <__floatsidf>
    9fdc:	|  |  |   addq.l #4,sp
    9fde:	|  |  |   move.l d0,d2
    9fe0:	|  |  |   move.l d1,d3
    9fe2:	|  |  |   move.l 96(sp),-(sp)
    9fe6:	|  |  |   jsr 17aa0 <__floatsidf>
    9fec:	|  |  |   addq.l #4,sp
    9fee:	|  |  |   move.l 92(sp),-(sp)
    9ff2:	|  |  |   move.l 92(sp),-(sp)
    9ff6:	|  |  |   move.l d1,-(sp)
    9ff8:	|  |  |   move.l d0,-(sp)
    9ffa:	|  |  |   jsr 17b30 <__muldf3>
    a000:	|  |  |   lea 16(sp),sp
    a004:	|  |  |   move.l d1,-(sp)
    a006:	|  |  |   move.l d0,-(sp)
    a008:	|  |  |   move.l d3,-(sp)
    a00a:	|  |  |   move.l d2,-(sp)
    a00c:	|  |  |   jsr 178d2 <__adddf3>
    a012:	|  |  |   lea 16(sp),sp
    a016:	|  |  |   move.l d1,-(sp)
    a018:	|  |  |   move.l d0,-(sp)
    a01a:	|  |  |   jsr 17a42 <__fixdfsi>
    a020:	|  |  |   addq.l #8,sp
    a022:	|  |  |   movea.l 152(sp),a0
    a026:	|  |  |   move.l d0,52(a0)
    a02a:	|  +--|-- bra.w a286 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    a02e:	|  |  '-> move.l 140(sp),d0
    a032:	|  |      sub.l 124(sp),d0
    a036:	|  |      move.l d0,84(sp)
    a03a:	|  |      move.l 140(sp),d0
    a03e:	|  |      sub.l 116(sp),d0
    a042:	|  |      move.l d0,80(sp)
    a046:	|  |      move.l 132(sp),d0
    a04a:	|  |      sub.l 124(sp),d0
    a04e:	|  |      move.l d0,76(sp)
    a052:	|  |      move.l 132(sp),d0
    a056:	|  |      sub.l 116(sp),d0
    a05a:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    a05e:	|  |      move.l 136(sp),d0
    a062:	|  |      sub.l 120(sp),d0
    a066:	|  |      move.l d0,68(sp)
    a06a:	|  |      move.l 136(sp),d0
    a06e:	|  |      sub.l 112(sp),d0
    a072:	|  |      move.l d0,64(sp)
    a076:	|  |      move.l 128(sp),d0
    a07a:	|  |      sub.l 120(sp),d0
    a07e:	|  |      move.l d0,60(sp)
    a082:	|  |      move.l 128(sp),d0
    a086:	|  |      sub.l 112(sp),d0
    a08a:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    a08e:	|  |      move.l 84(sp),-(sp)
    a092:	|  |      move.l 88(sp),-(sp)
    a096:	|  |      jsr 1803a <__mulsi3>
    a09c:	|  |      addq.l #8,sp
    a09e:	|  |      move.l d0,84(sp)
    a0a2:	|  |      move.l 80(sp),-(sp)
    a0a6:	|  |      move.l 84(sp),-(sp)
    a0aa:	|  |      jsr 1803a <__mulsi3>
    a0b0:	|  |      addq.l #8,sp
    a0b2:	|  |      move.l d0,80(sp)
    a0b6:	|  |      move.l 76(sp),-(sp)
    a0ba:	|  |      move.l 80(sp),-(sp)
    a0be:	|  |      jsr 1803a <__mulsi3>
    a0c4:	|  |      addq.l #8,sp
    a0c6:	|  |      move.l d0,76(sp)
    a0ca:	|  |      move.l 72(sp),-(sp)
    a0ce:	|  |      move.l 76(sp),-(sp)
    a0d2:	|  |      jsr 1803a <__mulsi3>
    a0d8:	|  |      addq.l #8,sp
    a0da:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    a0de:	|  |      move.l 68(sp),-(sp)
    a0e2:	|  |      move.l 72(sp),-(sp)
    a0e6:	|  |      jsr 1803a <__mulsi3>
    a0ec:	|  |      addq.l #8,sp
    a0ee:	|  |      move.l d0,68(sp)
    a0f2:	|  |      move.l 64(sp),-(sp)
    a0f6:	|  |      move.l 68(sp),-(sp)
    a0fa:	|  |      jsr 1803a <__mulsi3>
    a100:	|  |      addq.l #8,sp
    a102:	|  |      move.l d0,64(sp)
    a106:	|  |      move.l 60(sp),-(sp)
    a10a:	|  |      move.l 64(sp),-(sp)
    a10e:	|  |      jsr 1803a <__mulsi3>
    a114:	|  |      addq.l #8,sp
    a116:	|  |      move.l d0,60(sp)
    a11a:	|  |      move.l 56(sp),-(sp)
    a11e:	|  |      move.l 60(sp),-(sp)
    a122:	|  |      jsr 1803a <__mulsi3>
    a128:	|  |      addq.l #8,sp
    a12a:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a12e:	|  |      move.l 84(sp),-(sp)
    a132:	|  |      jsr 17aa0 <__floatsidf>
    a138:	|  |      addq.l #4,sp
    a13a:	|  |      move.l d0,d2
    a13c:	|  |      move.l d1,d3
    a13e:	|  |      move.l 68(sp),-(sp)
    a142:	|  |      jsr 17aa0 <__floatsidf>
    a148:	|  |      addq.l #4,sp
    a14a:	|  |      move.l d1,-(sp)
    a14c:	|  |      move.l d0,-(sp)
    a14e:	|  |      move.l d3,-(sp)
    a150:	|  |      move.l d2,-(sp)
    a152:	|  |      jsr 178d2 <__adddf3>
    a158:	|  |      lea 16(sp),sp
    a15c:	|  |      move.l d1,-(sp)
    a15e:	|  |      move.l d0,-(sp)
    a160:	|  |      jsr 17ff0 <sqrt>
    a166:	|  |      addq.l #8,sp
    a168:	|  |      move.l d0,d2
    a16a:	|  |      move.l d1,d3
    a16c:	|  |      move.l 76(sp),-(sp)
    a170:	|  |      jsr 17aa0 <__floatsidf>
    a176:	|  |      addq.l #4,sp
    a178:	|  |      move.l d0,d4
    a17a:	|  |      move.l d1,d5
    a17c:	|  |      move.l 60(sp),-(sp)
    a180:	|  |      jsr 17aa0 <__floatsidf>
    a186:	|  |      addq.l #4,sp
    a188:	|  |      move.l d1,-(sp)
    a18a:	|  |      move.l d0,-(sp)
    a18c:	|  |      move.l d5,-(sp)
    a18e:	|  |      move.l d4,-(sp)
    a190:	|  |      jsr 178d2 <__adddf3>
    a196:	|  |      lea 16(sp),sp
    a19a:	|  |      move.l d1,-(sp)
    a19c:	|  |      move.l d0,-(sp)
    a19e:	|  |      jsr 17ff0 <sqrt>
    a1a4:	|  |      addq.l #8,sp
    a1a6:	|  |      move.l d1,-(sp)
    a1a8:	|  |      move.l d0,-(sp)
    a1aa:	|  |      move.l d3,-(sp)
    a1ac:	|  |      move.l d2,-(sp)
    a1ae:	|  |      jsr 178d2 <__adddf3>
    a1b4:	|  |      lea 16(sp),sp
    a1b8:	|  |      move.l d0,d2
    a1ba:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    a1bc:	|  |      move.l 80(sp),-(sp)
    a1c0:	|  |      jsr 17aa0 <__floatsidf>
    a1c6:	|  |      addq.l #4,sp
    a1c8:	|  |      move.l d0,d4
    a1ca:	|  |      move.l d1,d5
    a1cc:	|  |      move.l 64(sp),-(sp)
    a1d0:	|  |      jsr 17aa0 <__floatsidf>
    a1d6:	|  |      addq.l #4,sp
    a1d8:	|  |      move.l d1,-(sp)
    a1da:	|  |      move.l d0,-(sp)
    a1dc:	|  |      move.l d5,-(sp)
    a1de:	|  |      move.l d4,-(sp)
    a1e0:	|  |      jsr 178d2 <__adddf3>
    a1e6:	|  |      lea 16(sp),sp
    a1ea:	|  |      move.l d1,-(sp)
    a1ec:	|  |      move.l d0,-(sp)
    a1ee:	|  |      jsr 17ff0 <sqrt>
    a1f4:	|  |      addq.l #8,sp
    a1f6:	|  |      move.l d0,d4
    a1f8:	|  |      move.l d1,d5
    a1fa:	|  |      move.l 72(sp),-(sp)
    a1fe:	|  |      jsr 17aa0 <__floatsidf>
    a204:	|  |      addq.l #4,sp
    a206:	|  |      move.l d0,d6
    a208:	|  |      move.l d1,d7
    a20a:	|  |      move.l 56(sp),-(sp)
    a20e:	|  |      jsr 17aa0 <__floatsidf>
    a214:	|  |      addq.l #4,sp
    a216:	|  |      move.l d1,-(sp)
    a218:	|  |      move.l d0,-(sp)
    a21a:	|  |      move.l d7,-(sp)
    a21c:	|  |      move.l d6,-(sp)
    a21e:	|  |      jsr 178d2 <__adddf3>
    a224:	|  |      lea 16(sp),sp
    a228:	|  |      move.l d1,-(sp)
    a22a:	|  |      move.l d0,-(sp)
    a22c:	|  |      jsr 17ff0 <sqrt>
    a232:	|  |      addq.l #8,sp
    a234:	|  |      move.l d1,-(sp)
    a236:	|  |      move.l d0,-(sp)
    a238:	|  |      move.l d5,-(sp)
    a23a:	|  |      move.l d4,-(sp)
    a23c:	|  |      jsr 178d2 <__adddf3>
    a242:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a246:	|  |      move.l d1,-(sp)
    a248:	|  |      move.l d0,-(sp)
    a24a:	|  |      move.l d3,-(sp)
    a24c:	|  |      move.l d2,-(sp)
    a24e:	|  |      jsr 17cb8 <__ltdf2>
    a254:	|  |      lea 16(sp),sp
    a258:	|  |      tst.l d0
    a25a:	|  |  ,-- bge.s a272 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a25c:	|  |  |   movea.l 152(sp),a0
    a260:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a266:	|  |  |   movea.l 152(sp),a0
    a26a:	|  |  |   move.l 120(sp),52(a0)
    a270:	|  +--|-- bra.s a286 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a272:	|  |  '-> movea.l 152(sp),a0
    a276:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a27c:	|  |      movea.l 152(sp),a0
    a280:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a286:	|  '----> movea.l 152(sp),a0
    a28a:	|         move.l 52(a0),d0
    a28e:	|         move.l d0,-(sp)
    a290:	|         jsr 17ae0 <__floatsisf>
    a296:	|         addq.l #4,sp
    a298:	|         move.l d0,d1
    a29a:	|         movea.l 152(sp),a0
    a29e:	|         move.l 4(a0),d0
    a2a2:	|         move.l d0,-(sp)
    a2a4:	|         move.l d1,-(sp)
    a2a6:	|         jsr 17dd4 <__subsf3>
    a2ac:	|         addq.l #8,sp
    a2ae:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a2b2:	|         movea.l 152(sp),a0
    a2b6:	|         move.l (a0),d2
    a2b8:	|         movea.l 152(sp),a0
    a2bc:	|         move.l 48(a0),d0
    a2c0:	|         move.l d0,-(sp)
    a2c2:	|         jsr 17ae0 <__floatsisf>
    a2c8:	|         addq.l #4,sp
    a2ca:	|         move.l d0,-(sp)
    a2cc:	|         move.l d2,-(sp)
    a2ce:	|         jsr 17dd4 <__subsf3>
    a2d4:	|         addq.l #8,sp
    a2d6:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a2da:	|         clr.l -(sp)
    a2dc:	|         move.l 52(sp),-(sp)
    a2e0:	|         jsr 17d3c <__nesf2>
    a2e6:	|         addq.l #8,sp
    a2e8:	|         tst.l d0
    a2ea:	|     ,-- bne.s a2fe <doBorderStuff+0x628>
    a2ec:	|     |   clr.l -(sp)
    a2ee:	|     |   move.l 56(sp),-(sp)
    a2f2:	|     |   jsr 17d3c <__nesf2>
    a2f8:	|     |   addq.l #8,sp
    a2fa:	|     |   tst.l d0
    a2fc:	|  ,--|-- beq.s a374 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a2fe:	|  |  '-> move.l 52(sp),d0
    a302:	|  |      move.l d0,-(sp)
    a304:	|  |      move.l d0,-(sp)
    a306:	|  |      jsr 1789c <__addsf3>
    a30c:	|  |      addq.l #8,sp
    a30e:	|  |      move.l d0,-(sp)
    a310:	|  |      move.l 52(sp),-(sp)
    a314:	|  |      jsr 17e40 <atan2f>
    a31a:	|  |      addq.l #8,sp
    a31c:	|  |      move.l d0,-(sp)
    a31e:	|  |      jsr 17a02 <__extendsfdf2>
    a324:	|  |      addq.l #4,sp
    a326:	|  |      move.l #-1540411785,-(sp)
    a32c:	|  |      move.l #1078765033,-(sp)
    a332:	|  |      move.l d1,-(sp)
    a334:	|  |      move.l d0,-(sp)
    a336:	|  |      jsr 17b30 <__muldf3>
    a33c:	|  |      lea 16(sp),sp
    a340:	|  |      clr.l -(sp)
    a342:	|  |      move.l #1080459264,-(sp)
    a348:	|  |      move.l d1,-(sp)
    a34a:	|  |      move.l d0,-(sp)
    a34c:	|  |      jsr 178d2 <__adddf3>
    a352:	|  |      lea 16(sp),sp
    a356:	|  |      move.l d1,-(sp)
    a358:	|  |      move.l d0,-(sp)
    a35a:	|  |      jsr 17a42 <__fixdfsi>
    a360:	|  |      addq.l #8,sp
    a362:	|  |      movea.l 152(sp),a0
    a366:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a36a:	|  |      movea.l 152(sp),a0
    a36e:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a374:	|  '----> pea 1 <_start+0x1>
    a378:	|         move.l 156(sp),-(sp)
    a37c:	|         jsr 4516 <setFrames>
    a382:	|         addq.l #8,sp
    return TRUE;
    a384:	|         moveq #1,d0
}
    a386:	'-------> movem.l (sp)+,d2-d7
    a38a:	          lea 124(sp),sp
    a38e:	          rts

0000a390 <drawPeople>:

void drawPeople () {
    a390:	                   lea -24(sp),sp
    a394:	                   move.l d2,-(sp)

	shufflePeople ();
    a396:	                   jsr be8e <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a39c:	                   move.l 1ceea <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a3a4:	                   clr.l 20(sp)
	overRegion = NULL;
    a3a8:	                   clr.l 1cf9a <overRegion>

	while (thisPerson) {
    a3ae:	   ,-------------- bra.w a960 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a3b2:	,--|-------------> movea.l 24(sp),a0
    a3b6:	|  |               move.w 104(a0),d0
    a3ba:	|  |  ,----------- beq.w a714 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a3be:	|  |  |            movea.l 24(sp),a0
    a3c2:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a3c8:	|  |  |            movea.l 24(sp),a0
    a3cc:	|  |  |            move.l 76(a0),d0
    a3d0:	|  |  |            cmp.l 20(sp),d0
    a3d4:	|  |  |  ,-------- beq.w a5a2 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a3d8:	|  |  |  |         movea.l 24(sp),a0
    a3dc:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a3e0:	|  |  |  |         movea.l 24(sp),a0
    a3e4:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a3ea:	|  |  |  |         movea.l 24(sp),a0
    a3ee:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a3f2:	|  |  |  |         movea.l 20(sp),a0
    a3f6:	|  |  |  |         movea.l 4(a0),a0
    a3fa:	|  |  |  |         move.l 4(a0),d0
    a3fe:	|  |  |  |         movea.l 24(sp),a0
    a402:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a406:	|  |  |  |         movea.l 20(sp),a0
    a40a:	|  |  |  |         movea.l 4(a0),a1
    a40e:	|  |  |  |         movea.l 24(sp),a0
    a412:	|  |  |  |         move.l 84(a0),d0
    a416:	|  |  |  |         move.l d0,d1
    a418:	|  |  |  |         move.l d1,d0
    a41a:	|  |  |  |         add.l d0,d0
    a41c:	|  |  |  |         add.l d1,d0
    a41e:	|  |  |  |         add.l d0,d0
    a420:	|  |  |  |         add.l d0,d0
    a422:	|  |  |  |         lea (0,a1,d0.l),a0
    a426:	|  |  |  |         move.l 8(a0),d0
    a42a:	|  |  |  |     ,-- ble.w a4cc <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a42e:	|  |  |  |     |   movea.l 20(sp),a0
    a432:	|  |  |  |     |   movea.l 4(a0),a1
    a436:	|  |  |  |     |   movea.l 24(sp),a0
    a43a:	|  |  |  |     |   move.l 84(a0),d0
    a43e:	|  |  |  |     |   move.l d0,d1
    a440:	|  |  |  |     |   move.l d1,d0
    a442:	|  |  |  |     |   add.l d0,d0
    a444:	|  |  |  |     |   add.l d1,d0
    a446:	|  |  |  |     |   add.l d0,d0
    a448:	|  |  |  |     |   add.l d0,d0
    a44a:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a44e:	|  |  |  |     |   move.l 8(a0),d0
    a452:	|  |  |  |     |   clr.l -(sp)
    a454:	|  |  |  |     |   move.l d0,-(sp)
    a456:	|  |  |  |     |   jsr d5a2 <startSound>
    a45c:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a45e:	|  |  |  |     |   movea.l 24(sp),a0
    a462:	|  |  |  |     |   move.l 84(a0),d0
    a466:	|  |  |  |     |   addq.l #1,d0
    a468:	|  |  |  |     |   movea.l 24(sp),a0
    a46c:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a470:	|  |  |  |     |   movea.l 24(sp),a0
    a474:	|  |  |  |     |   move.l 84(a0),d0
    a478:	|  |  |  |     |   movea.l 24(sp),a0
    a47c:	|  |  |  |     |   movea.l 72(a0),a0
    a480:	|  |  |  |     |   move.l 8(a0),d1
    a484:	|  |  |  |     |   move.l d1,-(sp)
    a486:	|  |  |  |     |   move.l d0,-(sp)
    a488:	|  |  |  |     |   jsr 180e6 <__modsi3>
    a48e:	|  |  |  |     |   addq.l #8,sp
    a490:	|  |  |  |     |   movea.l 24(sp),a0
    a494:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a498:	|  |  |  |     |   movea.l 24(sp),a0
    a49c:	|  |  |  |     |   movea.l 72(a0),a0
    a4a0:	|  |  |  |     |   movea.l 4(a0),a1
    a4a4:	|  |  |  |     |   movea.l 24(sp),a0
    a4a8:	|  |  |  |     |   move.l 84(a0),d0
    a4ac:	|  |  |  |     |   move.l d0,d1
    a4ae:	|  |  |  |     |   move.l d1,d0
    a4b0:	|  |  |  |     |   add.l d0,d0
    a4b2:	|  |  |  |     |   add.l d1,d0
    a4b4:	|  |  |  |     |   add.l d0,d0
    a4b6:	|  |  |  |     |   add.l d0,d0
    a4b8:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a4bc:	|  |  |  |     |   move.l 4(a0),d0
    a4c0:	|  |  |  |     |   movea.l 24(sp),a0
    a4c4:	|  |  |  |     |   move.l d0,88(a0)
    a4c8:	|  |  |  |  ,--|-- bra.w a60a <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a4cc:	|  |  |  |  |  '-> movea.l 20(sp),a0
    a4d0:	|  |  |  |  |      movea.l 4(a0),a1
    a4d4:	|  |  |  |  |      movea.l 24(sp),a0
    a4d8:	|  |  |  |  |      move.l 84(a0),d0
    a4dc:	|  |  |  |  |      move.l d0,d1
    a4de:	|  |  |  |  |      move.l d1,d0
    a4e0:	|  |  |  |  |      add.l d0,d0
    a4e2:	|  |  |  |  |      add.l d1,d0
    a4e4:	|  |  |  |  |      add.l d0,d0
    a4e6:	|  |  |  |  |      add.l d0,d0
    a4e8:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a4ec:	|  |  |  |  |      move.l 8(a0),d0
    a4f0:	|  |  |  |  +----- beq.w a60a <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a4f4:	|  |  |  |  |      movea.l 1ce5a <noStack>,a1
    a4fa:	|  |  |  |  |      movea.l 20(sp),a0
    a4fe:	|  |  |  |  |      move.l 4(a0),d2
    a502:	|  |  |  |  |      movea.l 24(sp),a0
    a506:	|  |  |  |  |      move.l 84(a0),d0
    a50a:	|  |  |  |  |      move.l d0,d1
    a50c:	|  |  |  |  |      move.l d1,d0
    a50e:	|  |  |  |  |      add.l d0,d0
    a510:	|  |  |  |  |      add.l d1,d0
    a512:	|  |  |  |  |      add.l d0,d0
    a514:	|  |  |  |  |      add.l d0,d0
    a516:	|  |  |  |  |      movea.l d2,a0
    a518:	|  |  |  |  |      adda.l d0,a0
    a51a:	|  |  |  |  |      move.l 8(a0),d0
    a51e:	|  |  |  |  |      neg.l d0
    a520:	|  |  |  |  |      pea 1 <_start+0x1>
    a524:	|  |  |  |  |      move.l a1,-(sp)
    a526:	|  |  |  |  |      clr.l -(sp)
    a528:	|  |  |  |  |      clr.l -(sp)
    a52a:	|  |  |  |  |      move.l d0,-(sp)
    a52c:	|  |  |  |  |      jsr 783c <startNewFunctionNum>
    a532:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a536:	|  |  |  |  |      movea.l 24(sp),a0
    a53a:	|  |  |  |  |      move.l 84(a0),d0
    a53e:	|  |  |  |  |      addq.l #1,d0
    a540:	|  |  |  |  |      movea.l 24(sp),a0
    a544:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a548:	|  |  |  |  |      movea.l 24(sp),a0
    a54c:	|  |  |  |  |      move.l 84(a0),d0
    a550:	|  |  |  |  |      movea.l 24(sp),a0
    a554:	|  |  |  |  |      movea.l 72(a0),a0
    a558:	|  |  |  |  |      move.l 8(a0),d1
    a55c:	|  |  |  |  |      move.l d1,-(sp)
    a55e:	|  |  |  |  |      move.l d0,-(sp)
    a560:	|  |  |  |  |      jsr 180e6 <__modsi3>
    a566:	|  |  |  |  |      addq.l #8,sp
    a568:	|  |  |  |  |      movea.l 24(sp),a0
    a56c:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a570:	|  |  |  |  |      movea.l 24(sp),a0
    a574:	|  |  |  |  |      movea.l 72(a0),a0
    a578:	|  |  |  |  |      movea.l 4(a0),a1
    a57c:	|  |  |  |  |      movea.l 24(sp),a0
    a580:	|  |  |  |  |      move.l 84(a0),d0
    a584:	|  |  |  |  |      move.l d0,d1
    a586:	|  |  |  |  |      move.l d1,d0
    a588:	|  |  |  |  |      add.l d0,d0
    a58a:	|  |  |  |  |      add.l d1,d0
    a58c:	|  |  |  |  |      add.l d0,d0
    a58e:	|  |  |  |  |      add.l d0,d0
    a590:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a594:	|  |  |  |  |      move.l 4(a0),d0
    a598:	|  |  |  |  |      movea.l 24(sp),a0
    a59c:	|  |  |  |  |      move.l d0,88(a0)
    a5a0:	|  |  |  |  +----- bra.s a60a <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a5a2:	|  |  |  '--|----> movea.l 24(sp),a0
    a5a6:	|  |  |     |      move.l (a0),d0
    a5a8:	|  |  |     |      movea.l 24(sp),a0
    a5ac:	|  |  |     |      move.l 8(a0),d1
    a5b0:	|  |  |     |      move.l d1,-(sp)
    a5b2:	|  |  |     |      move.l d0,-(sp)
    a5b4:	|  |  |     |      jsr 179cc <__eqsf2>
    a5ba:	|  |  |     |      addq.l #8,sp
    a5bc:	|  |  |     |      tst.l d0
    a5be:	|  |  |     |  ,-- bne.s a602 <drawPeople+0x272>
    a5c0:	|  |  |     |  |   movea.l 24(sp),a0
    a5c4:	|  |  |     |  |   move.l 4(a0),d0
    a5c8:	|  |  |     |  |   movea.l 24(sp),a0
    a5cc:	|  |  |     |  |   move.l 12(a0),d1
    a5d0:	|  |  |     |  |   move.l d1,-(sp)
    a5d2:	|  |  |     |  |   move.l d0,-(sp)
    a5d4:	|  |  |     |  |   jsr 179cc <__eqsf2>
    a5da:	|  |  |     |  |   addq.l #8,sp
    a5dc:	|  |  |     |  |   tst.l d0
    a5de:	|  |  |     |  +-- bne.s a602 <drawPeople+0x272>
    a5e0:	|  |  |     |  |   movea.l 20(sp),a0
    a5e4:	|  |  |     |  |   move.l 8(a0),d0
    a5e8:	|  |  |     |  |   moveq #1,d1
    a5ea:	|  |  |     |  |   cmp.l d0,d1
    a5ec:	|  |  |     |  +-- bne.s a602 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a5ee:	|  |  |     |  |   movea.l 24(sp),a0
    a5f2:	|  |  |     |  |   move.l 16(a0),d0
    a5f6:	|  |  |     |  |   addq.l #1,d0
    a5f8:	|  |  |     |  |   movea.l 24(sp),a0
    a5fc:	|  |  |     |  |   move.l d0,16(a0)
    a600:	|  |  |     +--|-- bra.s a60a <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a602:	|  |  |     |  '-> movea.l 24(sp),a0
    a606:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a60a:	|  |  |     '----> movea.l 24(sp),a0
    a60e:	|  |  |            move.l (a0),d0
    a610:	|  |  |            movea.l 24(sp),a0
    a614:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a618:	|  |  |            movea.l 24(sp),a0
    a61c:	|  |  |            move.l 4(a0),d0
    a620:	|  |  |            movea.l 24(sp),a0
    a624:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a628:	|  |  |            movea.l 20(sp),a0
    a62c:	|  |  |            movea.l 4(a0),a1
    a630:	|  |  |            movea.l 24(sp),a0
    a634:	|  |  |            move.l 84(a0),d0
    a638:	|  |  |            move.l d0,d1
    a63a:	|  |  |            move.l d1,d0
    a63c:	|  |  |            add.l d0,d0
    a63e:	|  |  |            add.l d1,d0
    a640:	|  |  |            add.l d0,d0
    a642:	|  |  |            add.l d0,d0
    a644:	|  |  |            lea (0,a1,d0.l),a0
    a648:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a64c:	|  |  |            move.l 8(sp),d0
    a650:	|  |  |            add.l d0,d0
    a652:	|  |  |            subx.l d0,d0
    a654:	|  |  |            neg.l d0
    a656:	|  |  |            move.b d0,d0
    a658:	|  |  |            move.b d0,d0
    a65a:	|  |  |            andi.l #255,d0
    a660:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a664:	|  |  |            move.l 8(sp),-(sp)
    a668:	|  |  |            jsr 9564 <TF_abs>
    a66e:	|  |  |            addq.l #4,sp
    a670:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a674:	|  |  |            movea.l 20(sp),a0
    a678:	|  |  |            movea.l (a0),a0
    a67a:	|  |  |            move.l 8(a0),d0
    a67e:	|  |  |            cmp.l 12(sp),d0
    a682:	|  |  |        ,-- bgt.s a692 <drawPeople+0x302>
				fNum = 0;
    a684:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a688:	|  |  |        |   moveq #2,d0
    a68a:	|  |  |        |   sub.l 16(sp),d0
    a68e:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a692:	|  |  |        '-> moveq #2,d1
    a694:	|  |  |            cmp.l 16(sp),d1
    a698:	|  |  +----------- beq.s a714 <drawPeople+0x384>
				BOOL r = FALSE;
    a69a:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a69e:	|  |  |            move.l 16(sp),d0
    a6a2:	|  |  |            movea.w d0,a0
    a6a4:	|  |  |            movea.l 20(sp),a1
    a6a8:	|  |  |            movea.l (a1),a1
    a6aa:	|  |  |            movea.l 16(a1),a1
    a6ae:	|  |  |            move.l 12(sp),d1
    a6b2:	|  |  |            move.l d1,d0
    a6b4:	|  |  |            lsl.l #3,d0
    a6b6:	|  |  |            sub.l d1,d0
    a6b8:	|  |  |            add.l d0,d0
    a6ba:	|  |  |            add.l d0,d0
    a6bc:	|  |  |            add.l a1,d0
    a6be:	|  |  |            move.l a0,-(sp)
    a6c0:	|  |  |            move.l 28(sp),-(sp)
    a6c4:	|  |  |            move.l d0,-(sp)
    a6c6:	|  |  |            jsr 9286 <scaleSprite>
    a6cc:	|  |  |            lea 12(sp),sp
    a6d0:	|  |  |            move.w d0,6(sp)
				if (r) {
    a6d4:	|  |  +----------- beq.s a714 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a6d6:	|  |  |            movea.l 24(sp),a0
    a6da:	|  |  |            movea.l 114(a0),a0
    a6de:	|  |  |            movea.l (a0),a0
    a6e0:	|  |  |            move.b (a0),d0
    a6e2:	|  |  +----------- beq.s a714 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a6e4:	|  |  |            move.l 1cf0a <personRegion+0x1c>,d1
    a6ea:	|  |  |            movea.l 24(sp),a0
    a6ee:	|  |  |            move.l 114(a0),d0
    a6f2:	|  |  |            cmp.l d1,d0
    a6f4:	|  |  |        ,-- beq.s a6fc <drawPeople+0x36c>
    a6f6:	|  |  |        |   clr.l 1ce52 <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a6fc:	|  |  |        '-> movea.l 24(sp),a0
    a700:	|  |  |            move.l 114(a0),d0
    a704:	|  |  |            move.l d0,1cf0a <personRegion+0x1c>
						overRegion = & personRegion;
    a70a:	|  |  |            move.l #118510,1cf9a <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a714:	|  |  '----------> movea.l 24(sp),a0
    a718:	|  |               move.l 88(a0),d0
    a71c:	|  |               subq.l #1,d0
    a71e:	|  |               movea.l 24(sp),a0
    a722:	|  |               move.l d0,88(a0)
    a726:	|  |               movea.l 24(sp),a0
    a72a:	|  |               move.l 88(a0),d0
    a72e:	|  |        ,----- bne.w a956 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a732:	|  |        |      movea.l 24(sp),a0
    a736:	|  |        |      move.l 84(a0),d0
    a73a:	|  |        |      addq.l #1,d0
    a73c:	|  |        |      movea.l 24(sp),a0
    a740:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a744:	|  |        |      movea.l 24(sp),a0
    a748:	|  |        |      move.l 84(a0),d0
    a74c:	|  |        |      movea.l 24(sp),a0
    a750:	|  |        |      movea.l 72(a0),a0
    a754:	|  |        |      move.l 8(a0),d1
    a758:	|  |        |      move.l d1,-(sp)
    a75a:	|  |        |      move.l d0,-(sp)
    a75c:	|  |        |      jsr 180e6 <__modsi3>
    a762:	|  |        |      addq.l #8,sp
    a764:	|  |        |      movea.l 24(sp),a0
    a768:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a76c:	|  |        |      movea.l 24(sp),a0
    a770:	|  |        |      movea.l 72(a0),a0
    a774:	|  |        |      movea.l 4(a0),a1
    a778:	|  |        |      movea.l 24(sp),a0
    a77c:	|  |        |      move.l 84(a0),d0
    a780:	|  |        |      move.l d0,d1
    a782:	|  |        |      move.l d1,d0
    a784:	|  |        |      add.l d0,d0
    a786:	|  |        |      add.l d1,d0
    a788:	|  |        |      add.l d0,d0
    a78a:	|  |        |      add.l d0,d0
    a78c:	|  |        |      lea (0,a1,d0.l),a0
    a790:	|  |        |      move.l 4(a0),d0
    a794:	|  |        |      movea.l 24(sp),a0
    a798:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a79c:	|  |        |      movea.l 24(sp),a0
    a7a0:	|  |        |      move.w 104(a0),d0
    a7a4:	|  |        +----- beq.w a956 <drawPeople+0x5c6>
    a7a8:	|  |        |      tst.l 20(sp)
    a7ac:	|  |        +----- beq.w a956 <drawPeople+0x5c6>
    a7b0:	|  |        |      movea.l 20(sp),a0
    a7b4:	|  |        |      move.l 4(a0),d0
    a7b8:	|  |        +----- beq.w a956 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a7bc:	|  |        |      movea.l 20(sp),a0
    a7c0:	|  |        |      movea.l 4(a0),a1
    a7c4:	|  |        |      movea.l 24(sp),a0
    a7c8:	|  |        |      move.l 84(a0),d0
    a7cc:	|  |        |      move.l d0,d1
    a7ce:	|  |        |      move.l d1,d0
    a7d0:	|  |        |      add.l d0,d0
    a7d2:	|  |        |      add.l d1,d0
    a7d4:	|  |        |      add.l d0,d0
    a7d6:	|  |        |      add.l d0,d0
    a7d8:	|  |        |      lea (0,a1,d0.l),a0
    a7dc:	|  |        |      move.l 8(a0),d0
    a7e0:	|  |        |  ,-- ble.w a882 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a7e4:	|  |        |  |   movea.l 20(sp),a0
    a7e8:	|  |        |  |   movea.l 4(a0),a1
    a7ec:	|  |        |  |   movea.l 24(sp),a0
    a7f0:	|  |        |  |   move.l 84(a0),d0
    a7f4:	|  |        |  |   move.l d0,d1
    a7f6:	|  |        |  |   move.l d1,d0
    a7f8:	|  |        |  |   add.l d0,d0
    a7fa:	|  |        |  |   add.l d1,d0
    a7fc:	|  |        |  |   add.l d0,d0
    a7fe:	|  |        |  |   add.l d0,d0
    a800:	|  |        |  |   lea (0,a1,d0.l),a0
    a804:	|  |        |  |   move.l 8(a0),d0
    a808:	|  |        |  |   clr.l -(sp)
    a80a:	|  |        |  |   move.l d0,-(sp)
    a80c:	|  |        |  |   jsr d5a2 <startSound>
    a812:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a814:	|  |        |  |   movea.l 24(sp),a0
    a818:	|  |        |  |   move.l 84(a0),d0
    a81c:	|  |        |  |   addq.l #1,d0
    a81e:	|  |        |  |   movea.l 24(sp),a0
    a822:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a826:	|  |        |  |   movea.l 24(sp),a0
    a82a:	|  |        |  |   move.l 84(a0),d0
    a82e:	|  |        |  |   movea.l 24(sp),a0
    a832:	|  |        |  |   movea.l 72(a0),a0
    a836:	|  |        |  |   move.l 8(a0),d1
    a83a:	|  |        |  |   move.l d1,-(sp)
    a83c:	|  |        |  |   move.l d0,-(sp)
    a83e:	|  |        |  |   jsr 180e6 <__modsi3>
    a844:	|  |        |  |   addq.l #8,sp
    a846:	|  |        |  |   movea.l 24(sp),a0
    a84a:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a84e:	|  |        |  |   movea.l 24(sp),a0
    a852:	|  |        |  |   movea.l 72(a0),a0
    a856:	|  |        |  |   movea.l 4(a0),a1
    a85a:	|  |        |  |   movea.l 24(sp),a0
    a85e:	|  |        |  |   move.l 84(a0),d0
    a862:	|  |        |  |   move.l d0,d1
    a864:	|  |        |  |   move.l d1,d0
    a866:	|  |        |  |   add.l d0,d0
    a868:	|  |        |  |   add.l d1,d0
    a86a:	|  |        |  |   add.l d0,d0
    a86c:	|  |        |  |   add.l d0,d0
    a86e:	|  |        |  |   lea (0,a1,d0.l),a0
    a872:	|  |        |  |   move.l 4(a0),d0
    a876:	|  |        |  |   movea.l 24(sp),a0
    a87a:	|  |        |  |   move.l d0,88(a0)
    a87e:	|  |        +--|-- bra.w a956 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a882:	|  |        |  '-> movea.l 20(sp),a0
    a886:	|  |        |      movea.l 4(a0),a1
    a88a:	|  |        |      movea.l 24(sp),a0
    a88e:	|  |        |      move.l 84(a0),d0
    a892:	|  |        |      move.l d0,d1
    a894:	|  |        |      move.l d1,d0
    a896:	|  |        |      add.l d0,d0
    a898:	|  |        |      add.l d1,d0
    a89a:	|  |        |      add.l d0,d0
    a89c:	|  |        |      add.l d0,d0
    a89e:	|  |        |      lea (0,a1,d0.l),a0
    a8a2:	|  |        |      move.l 8(a0),d0
    a8a6:	|  |        +----- beq.w a956 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a8aa:	|  |        |      movea.l 1ce5a <noStack>,a1
    a8b0:	|  |        |      movea.l 20(sp),a0
    a8b4:	|  |        |      move.l 4(a0),d2
    a8b8:	|  |        |      movea.l 24(sp),a0
    a8bc:	|  |        |      move.l 84(a0),d0
    a8c0:	|  |        |      move.l d0,d1
    a8c2:	|  |        |      move.l d1,d0
    a8c4:	|  |        |      add.l d0,d0
    a8c6:	|  |        |      add.l d1,d0
    a8c8:	|  |        |      add.l d0,d0
    a8ca:	|  |        |      add.l d0,d0
    a8cc:	|  |        |      movea.l d2,a0
    a8ce:	|  |        |      adda.l d0,a0
    a8d0:	|  |        |      move.l 8(a0),d0
    a8d4:	|  |        |      neg.l d0
    a8d6:	|  |        |      pea 1 <_start+0x1>
    a8da:	|  |        |      move.l a1,-(sp)
    a8dc:	|  |        |      clr.l -(sp)
    a8de:	|  |        |      clr.l -(sp)
    a8e0:	|  |        |      move.l d0,-(sp)
    a8e2:	|  |        |      jsr 783c <startNewFunctionNum>
    a8e8:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a8ec:	|  |        |      movea.l 24(sp),a0
    a8f0:	|  |        |      move.l 84(a0),d0
    a8f4:	|  |        |      addq.l #1,d0
    a8f6:	|  |        |      movea.l 24(sp),a0
    a8fa:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a8fe:	|  |        |      movea.l 24(sp),a0
    a902:	|  |        |      move.l 84(a0),d0
    a906:	|  |        |      movea.l 24(sp),a0
    a90a:	|  |        |      movea.l 72(a0),a0
    a90e:	|  |        |      move.l 8(a0),d1
    a912:	|  |        |      move.l d1,-(sp)
    a914:	|  |        |      move.l d0,-(sp)
    a916:	|  |        |      jsr 180e6 <__modsi3>
    a91c:	|  |        |      addq.l #8,sp
    a91e:	|  |        |      movea.l 24(sp),a0
    a922:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a926:	|  |        |      movea.l 24(sp),a0
    a92a:	|  |        |      movea.l 72(a0),a0
    a92e:	|  |        |      movea.l 4(a0),a1
    a932:	|  |        |      movea.l 24(sp),a0
    a936:	|  |        |      move.l 84(a0),d0
    a93a:	|  |        |      move.l d0,d1
    a93c:	|  |        |      move.l d1,d0
    a93e:	|  |        |      add.l d0,d0
    a940:	|  |        |      add.l d1,d0
    a942:	|  |        |      add.l d0,d0
    a944:	|  |        |      add.l d0,d0
    a946:	|  |        |      lea (0,a1,d0.l),a0
    a94a:	|  |        |      move.l 4(a0),d0
    a94e:	|  |        |      movea.l 24(sp),a0
    a952:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a956:	|  |        '----> movea.l 24(sp),a0
    a95a:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a960:	|  '-------------> tst.l 24(sp)
    a964:	'----------------- bne.w a3b2 <drawPeople+0x22>
	}
}
    a968:	                   nop
    a96a:	                   nop
    a96c:	                   move.l (sp)+,d2
    a96e:	                   lea 24(sp),sp
    a972:	                   rts

0000a974 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a974:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    a976:	          pea 19615 <PutChar+0x14c5>
    a97c:	          jsr 176ae <KPrintF>
    a982:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a984:	          move.l 1ceea <allPeople>,(sp)
	while (thisPerson) {
    a98a:	      ,-- bra.s a9a2 <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    a98c:	,-----|-> movea.l (sp),a0
    a98e:	|     |   movea.l 114(a0),a0
    a992:	|     |   move.l 4(a0),d0
    a996:	|     |   cmp.l 8(sp),d0
    a99a:	|  ,--|-- beq.s a9a8 <findPerson+0x34>
		thisPerson = thisPerson -> next;
    a99c:	|  |  |   movea.l (sp),a0
    a99e:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a9a2:	|  |  '-> tst.l (sp)
    a9a4:	'--|----- bne.s a98c <findPerson+0x18>
    a9a6:	   |  ,-- bra.s a9aa <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    a9a8:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    a9aa:	      '-> pea 19629 <PutChar+0x14d9>
    a9b0:	          jsr 176ae <KPrintF>
    a9b6:	          addq.l #4,sp
	return thisPerson;
    a9b8:	          move.l (sp),d0
}
    a9ba:	          addq.l #4,sp
    a9bc:	          rts

0000a9be <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a9be:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a9c0:	       move.l 12(sp),-(sp)
    a9c4:	       jsr a974 <findPerson>
    a9ca:	       addq.l #4,sp
    a9cc:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a9ce:	   ,-- bne.s a9d4 <floatCharacter+0x16>
    a9d0:	   |   clr.w d0
    a9d2:	,--|-- bra.s a9de <floatCharacter+0x20>
	moveMe -> floaty = f;
    a9d4:	|  '-> movea.l (sp),a0
    a9d6:	|      move.l 8(sp),24(a0)
	return TRUE;
    a9dc:	|      moveq #1,d0
}
    a9de:	'----> addq.l #4,sp
    a9e0:	       rts

0000a9e2 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a9e2:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a9e4:	          tst.l 8(sp)
    a9e8:	      ,-- bne.s a9f6 <forceWalkingPerson+0x14>
    a9ea:	      |   tst.l 12(sp)
    a9ee:	      +-- bne.s a9f6 <forceWalkingPerson+0x14>
    a9f0:	      |   clr.w d0
    a9f2:	,-----|-- bra.w aa88 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a9f6:	|     '-> move.l 16(sp),-(sp)
    a9fa:	|         jsr a974 <findPerson>
    aa00:	|         addq.l #4,sp
    aa02:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    aa04:	|     ,-- bne.s aa0a <forceWalkingPerson+0x28>
    aa06:	|     |   clr.w d0
    aa08:	+-----|-- bra.s aa88 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    aa0a:	|     '-> movea.l (sp),a0
    aa0c:	|         move.l 68(a0),d0
    aa10:	|     ,-- beq.s aa22 <forceWalkingPerson+0x40>
    aa12:	|     |   movea.l (sp),a0
    aa14:	|     |   move.l 68(a0),d0
    aa18:	|     |   move.l d0,-(sp)
    aa1a:	|     |   jsr 5374 <abortFunction>
    aa20:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    aa22:	|     '-> movea.l (sp),a0
    aa24:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    aa2a:	|         movea.l (sp),a0
    aa2c:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    aa30:	|         movea.l (sp),a0
    aa32:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    aa38:	|         movea.l (sp),a0
    aa3a:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    aa40:	|         movea.l (sp),a0
    aa42:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    aa48:	|         movea.l (sp),a0
    aa4a:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    aa4e:	|         movea.l (sp),a0
    aa50:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    aa54:	|         move.l (sp),-(sp)
    aa56:	|         jsr 9cd6 <doBorderStuff>
    aa5c:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    aa5e:	|         pea 1 <_start+0x1>
    aa62:	|         move.l 4(sp),-(sp)
    aa66:	|         jsr c31c <walkMe>
    aa6c:	|         addq.l #8,sp
    aa6e:	|         tst.w d0
    aa70:	|     ,-- bne.s aa7a <forceWalkingPerson+0x98>
    aa72:	|     |   movea.l (sp),a0
    aa74:	|     |   move.w 66(a0),d0
    aa78:	|  ,--|-- beq.s aa86 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    aa7a:	|  |  '-> movea.l (sp),a0
    aa7c:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    aa82:	|  |      moveq #1,d0
    aa84:	+--|----- bra.s aa88 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    aa86:	|  '----> clr.w d0
    }
}
    aa88:	'-------> addq.l #4,sp
    aa8a:	          rts

0000aa8c <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    aa8c:	                lea -56(sp),sp
    aa90:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    aa92:	                pea 1963e <PutChar+0x14ee>
    aa98:	                jsr 176ae <KPrintF>
    aa9e:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    aaa0:	                move.l #320,56(sp)
    aaa8:	                move.l #200,52(sp)
    aab0:	                moveq #-1,d0
    aab2:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    aab6:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    aabe:	                clr.l 44(sp)
    aac2:	   ,----------- bra.w ac9a <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    aac6:	,--|----------> movea.l 1cfa2 <currentFloor>,a0
    aacc:	|  |            move.l 12(a0),d1
    aad0:	|  |            move.l 44(sp),d0
    aad4:	|  |            lsl.l #3,d0
    aad6:	|  |            movea.l d1,a0
    aad8:	|  |            adda.l d0,a0
    aada:	|  |            move.l (a0),d0
    aadc:	|  |            move.l d0,d1
    aade:	|  |            subq.l #1,d1
    aae0:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    aae4:	|  |            clr.l 40(sp)
    aae8:	|  |     ,----- bra.w ac78 <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    aaec:	|  |  ,--|----> movea.l 1cfa2 <currentFloor>,a0
    aaf2:	|  |  |  |      move.l 4(a0),d1
    aaf6:	|  |  |  |      movea.l 1cfa2 <currentFloor>,a0
    aafc:	|  |  |  |      movea.l 12(a0),a0
    ab00:	|  |  |  |      move.l 44(sp),d0
    ab04:	|  |  |  |      lsl.l #3,d0
    ab06:	|  |  |  |      adda.l d0,a0
    ab08:	|  |  |  |      movea.l 4(a0),a0
    ab0c:	|  |  |  |      move.l 40(sp),d0
    ab10:	|  |  |  |      add.l d0,d0
    ab12:	|  |  |  |      add.l d0,d0
    ab14:	|  |  |  |      adda.l d0,a0
    ab16:	|  |  |  |      move.l (a0),d0
    ab18:	|  |  |  |      lsl.l #3,d0
    ab1a:	|  |  |  |      movea.l d1,a0
    ab1c:	|  |  |  |      adda.l d0,a0
    ab1e:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    ab22:	|  |  |  |      movea.l 1cfa2 <currentFloor>,a0
    ab28:	|  |  |  |      move.l 4(a0),d1
    ab2c:	|  |  |  |      movea.l 1cfa2 <currentFloor>,a0
    ab32:	|  |  |  |      movea.l 12(a0),a0
    ab36:	|  |  |  |      move.l 44(sp),d0
    ab3a:	|  |  |  |      lsl.l #3,d0
    ab3c:	|  |  |  |      adda.l d0,a0
    ab3e:	|  |  |  |      movea.l 4(a0),a0
    ab42:	|  |  |  |      move.l 40(sp),d0
    ab46:	|  |  |  |      add.l d0,d0
    ab48:	|  |  |  |      add.l d0,d0
    ab4a:	|  |  |  |      adda.l d0,a0
    ab4c:	|  |  |  |      move.l (a0),d0
    ab4e:	|  |  |  |      lsl.l #3,d0
    ab50:	|  |  |  |      movea.l d1,a0
    ab52:	|  |  |  |      adda.l d0,a0
    ab54:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    ab5a:	|  |  |  |      movea.l 1cfa2 <currentFloor>,a0
    ab60:	|  |  |  |      move.l 4(a0),d1
    ab64:	|  |  |  |      movea.l 1cfa2 <currentFloor>,a0
    ab6a:	|  |  |  |      movea.l 12(a0),a0
    ab6e:	|  |  |  |      move.l 44(sp),d0
    ab72:	|  |  |  |      lsl.l #3,d0
    ab74:	|  |  |  |      adda.l d0,a0
    ab76:	|  |  |  |      movea.l 4(a0),a0
    ab7a:	|  |  |  |      move.l 36(sp),d0
    ab7e:	|  |  |  |      add.l d0,d0
    ab80:	|  |  |  |      add.l d0,d0
    ab82:	|  |  |  |      adda.l d0,a0
    ab84:	|  |  |  |      move.l (a0),d0
    ab86:	|  |  |  |      lsl.l #3,d0
    ab88:	|  |  |  |      movea.l d1,a0
    ab8a:	|  |  |  |      adda.l d0,a0
    ab8c:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    ab90:	|  |  |  |      movea.l 1cfa2 <currentFloor>,a0
    ab96:	|  |  |  |      move.l 4(a0),d1
    ab9a:	|  |  |  |      movea.l 1cfa2 <currentFloor>,a0
    aba0:	|  |  |  |      movea.l 12(a0),a0
    aba4:	|  |  |  |      move.l 44(sp),d0
    aba8:	|  |  |  |      lsl.l #3,d0
    abaa:	|  |  |  |      adda.l d0,a0
    abac:	|  |  |  |      movea.l 4(a0),a0
    abb0:	|  |  |  |      move.l 36(sp),d0
    abb4:	|  |  |  |      add.l d0,d0
    abb6:	|  |  |  |      add.l d0,d0
    abb8:	|  |  |  |      adda.l d0,a0
    abba:	|  |  |  |      move.l (a0),d0
    abbc:	|  |  |  |      lsl.l #3,d0
    abbe:	|  |  |  |      movea.l d1,a0
    abc0:	|  |  |  |      adda.l d0,a0
    abc2:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    abc8:	|  |  |  |      movea.l 68(sp),a0
    abcc:	|  |  |  |      move.l (a0),d1
    abce:	|  |  |  |      movea.l 64(sp),a0
    abd2:	|  |  |  |      move.l (a0),d0
    abd4:	|  |  |  |      move.l d1,-(sp)
    abd6:	|  |  |  |      move.l d0,-(sp)
    abd8:	|  |  |  |      move.l 24(sp),-(sp)
    abdc:	|  |  |  |      move.l 32(sp),-(sp)
    abe0:	|  |  |  |      move.l 40(sp),-(sp)
    abe4:	|  |  |  |      move.l 48(sp),-(sp)
    abe8:	|  |  |  |      lea 28(sp),a0
    abec:	|  |  |  |      move.l a0,-(sp)
    abee:	|  |  |  |      lea 36(sp),a0
    abf2:	|  |  |  |      move.l a0,-(sp)
    abf4:	|  |  |  |      jsr 164ac <closestPointOnLine>
    abfa:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    abfe:	|  |  |  |      movea.l 64(sp),a0
    ac02:	|  |  |  |      move.l (a0),d0
    ac04:	|  |  |  |      move.l 8(sp),d1
    ac08:	|  |  |  |      move.l d0,d2
    ac0a:	|  |  |  |      sub.l d1,d2
    ac0c:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    ac10:	|  |  |  |      movea.l 68(sp),a0
    ac14:	|  |  |  |      move.l (a0),d0
    ac16:	|  |  |  |      move.l 4(sp),d1
    ac1a:	|  |  |  |      move.l d0,d2
    ac1c:	|  |  |  |      sub.l d1,d2
    ac1e:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    ac22:	|  |  |  |      move.l 28(sp),-(sp)
    ac26:	|  |  |  |      move.l 32(sp),-(sp)
    ac2a:	|  |  |  |      jsr 1803a <__mulsi3>
    ac30:	|  |  |  |      addq.l #8,sp
    ac32:	|  |  |  |      move.l d0,d2
    ac34:	|  |  |  |      move.l 24(sp),-(sp)
    ac38:	|  |  |  |      move.l 28(sp),-(sp)
    ac3c:	|  |  |  |      jsr 1803a <__mulsi3>
    ac42:	|  |  |  |      addq.l #8,sp
    ac44:	|  |  |  |      move.l d2,d1
    ac46:	|  |  |  |      add.l d0,d1
    ac48:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    ac4c:	|  |  |  |      move.l 12(sp),d2
    ac50:	|  |  |  |      cmp.l 32(sp),d2
    ac54:	|  |  |  |  ,-- bge.s ac6e <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    ac56:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    ac5c:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    ac62:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    ac68:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    ac6e:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    ac74:	|  |  |  |      addq.l #1,40(sp)
    ac78:	|  |  |  '----> movea.l 1cfa2 <currentFloor>,a0
    ac7e:	|  |  |         move.l 12(a0),d1
    ac82:	|  |  |         move.l 44(sp),d0
    ac86:	|  |  |         lsl.l #3,d0
    ac88:	|  |  |         movea.l d1,a0
    ac8a:	|  |  |         adda.l d0,a0
    ac8c:	|  |  |         move.l (a0),d0
    ac8e:	|  |  |         cmp.l 40(sp),d0
    ac92:	|  |  '-------- bgt.w aaec <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    ac96:	|  |            addq.l #1,44(sp)
    ac9a:	|  '----------> movea.l 1cfa2 <currentFloor>,a0
    aca0:	|               move.l 8(a0),d0
    aca4:	|               cmp.l 44(sp),d0
    aca8:	'-------------- bgt.w aac6 <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    acac:	                moveq #-1,d0
    acae:	                cmp.l 48(sp),d0
    acb2:	            ,-- bne.s acb8 <handleClosestPoint+0x22c>
    acb4:	            |   clr.w d0
    acb6:	         ,--|-- bra.s acd2 <handleClosestPoint+0x246>
	*setX = gotX;
    acb8:	         |  '-> movea.l 64(sp),a0
    acbc:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    acc0:	         |      movea.l 68(sp),a0
    acc4:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    acc8:	         |      movea.l 72(sp),a0
    accc:	         |      move.l 48(sp),(a0)

	return TRUE;
    acd0:	         |      moveq #1,d0
}
    acd2:	         '----> move.l (sp)+,d2
    acd4:	                lea 56(sp),sp
    acd8:	                rts

0000acda <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    acda:	clr.l 1cefe <personRegion+0x10>
	personRegion.sY = 0;
    ace0:	clr.l 1cf02 <personRegion+0x14>
	personRegion.di = -1;
    ace6:	moveq #-1,d0
    ace8:	move.l d0,1cf06 <personRegion+0x18>
	allScreenRegions = NULL;
    acee:	clr.l 1cf96 <allScreenRegions>

	return TRUE;
    acf4:	moveq #1,d0
}
    acf6:	rts

0000acf8 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    acf8:	          subq.l #4,sp
    acfa:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    acfc:	          tst.l 12(sp)
    ad00:	      ,-- bne.s ad08 <jumpPerson+0x10>
    ad02:	      |   tst.l 16(sp)
    ad06:	,-----|-- beq.s ad7c <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    ad08:	|     '-> move.l 20(sp),-(sp)
    ad0c:	|         jsr a974 <findPerson>
    ad12:	|         addq.l #4,sp
    ad14:	|         move.l d0,4(sp)
    if (!moveMe) return;
    ad18:	|  ,----- beq.s ad80 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    ad1a:	|  |      movea.l 4(sp),a0
    ad1e:	|  |      move.l 68(a0),d0
    ad22:	|  |  ,-- beq.s ad36 <jumpPerson+0x3e>
    ad24:	|  |  |   movea.l 4(sp),a0
    ad28:	|  |  |   move.l 68(a0),d0
    ad2c:	|  |  |   move.l d0,-(sp)
    ad2e:	|  |  |   jsr 5374 <abortFunction>
    ad34:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    ad36:	|  |  '-> movea.l 4(sp),a0
    ad3a:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    ad3e:	|  |      movea.l 4(sp),a0
    ad42:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    ad46:	|  |      movea.l 4(sp),a0
    ad4a:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    ad4e:	|  |      move.l 16(sp),-(sp)
    ad52:	|  |      jsr 17ae0 <__floatsisf>
    ad58:	|  |      addq.l #4,sp
    ad5a:	|  |      move.l d0,d2
    ad5c:	|  |      move.l 12(sp),-(sp)
    ad60:	|  |      jsr 17ae0 <__floatsisf>
    ad66:	|  |      addq.l #4,sp
    ad68:	|  |      move.l d2,-(sp)
    ad6a:	|  |      move.l d0,-(sp)
    ad6c:	|  |      move.l 12(sp),-(sp)
    ad70:	|  |      jsr b11e <moveAndScale>
    ad76:	|  |      lea 12(sp),sp
    ad7a:	|  |  ,-- bra.s ad82 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    ad7c:	'--|--|-> nop
    ad7e:	   |  +-- bra.s ad82 <jumpPerson+0x8a>
    if (!moveMe) return;
    ad80:	   '--|-> nop
}
    ad82:	      '-> move.l (sp)+,d2
    ad84:	          addq.l #4,sp
    ad86:	          rts

0000ad88 <killAllPeople>:


void killAllPeople () {
    ad88:	          subq.l #8,sp
    ad8a:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    ad8c:	   ,----- bra.s adf8 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    ad8e:	,--|----> movea.l 1ceea <allPeople>,a0
    ad94:	|  |      move.l 68(a0),d0
    ad98:	|  |  ,-- beq.s adae <killAllPeople+0x26>
    ad9a:	|  |  |   movea.l 1ceea <allPeople>,a0
    ada0:	|  |  |   move.l 68(a0),d0
    ada4:	|  |  |   move.l d0,-(sp)
    ada6:	|  |  |   jsr 5374 <abortFunction>
    adac:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    adae:	|  |  '-> movea.l 1ceea <allPeople>,a0
    adb4:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    adb8:	|  |      move.l 1ceea <allPeople>,8(sp)
		allPeople = allPeople -> next;
    adc0:	|  |      movea.l 1ceea <allPeople>,a0
    adc6:	|  |      move.l 36(a0),d0
    adca:	|  |      move.l d0,1ceea <allPeople>
		removeObjectType (killPeople -> thisType);
    add0:	|  |      movea.l 8(sp),a0
    add4:	|  |      move.l 114(a0),d0
    add8:	|  |      move.l d0,-(sp)
    adda:	|  |      jsr dc8a <removeObjectType>
    ade0:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    ade2:	|  |      move.l 8(sp),4(sp)
    ade8:	|  |      move.l 1ce8a <SysBase>,d0
    adee:	|  |      movea.l d0,a6
    adf0:	|  |      movea.l 4(sp),a1
    adf4:	|  |      jsr -690(a6)
	while (allPeople) {
    adf8:	|  '----> move.l 1ceea <allPeople>,d0
    adfe:	'-------- bne.s ad8e <killAllPeople+0x6>
	}
}
    ae00:	          nop
    ae02:	          nop
    ae04:	          movea.l (sp)+,a6
    ae06:	          addq.l #8,sp
    ae08:	          rts

0000ae0a <killMostPeople>:

void killMostPeople() {
    ae0a:	          lea -12(sp),sp
    ae0e:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    ae10:	          move.l #118506,12(sp)

    while (*lookyHere) {
    ae18:	   ,----- bra.w ae9e <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    ae1c:	,--|----> movea.l 12(sp),a0
    ae20:	|  |      movea.l (a0),a0
    ae22:	|  |      move.l 118(a0),d0
    ae26:	|  |      moveq #32,d1
    ae28:	|  |      and.l d1,d0
    ae2a:	|  |  ,-- beq.s ae3c <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    ae2c:	|  |  |   movea.l 12(sp),a0
    ae30:	|  |  |   move.l (a0),d0
    ae32:	|  |  |   moveq #36,d1
    ae34:	|  |  |   add.l d0,d1
    ae36:	|  |  |   move.l d1,12(sp)
    ae3a:	|  +--|-- bra.s ae9e <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    ae3c:	|  |  '-> movea.l 12(sp),a0
    ae40:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    ae44:	|  |      movea.l 8(sp),a0
    ae48:	|  |      move.l 36(a0),d0
    ae4c:	|  |      movea.l 12(sp),a0
    ae50:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    ae52:	|  |      movea.l 8(sp),a0
    ae56:	|  |      move.l 68(a0),d0
    ae5a:	|  |  ,-- beq.s ae6e <killMostPeople+0x64>
    ae5c:	|  |  |   movea.l 8(sp),a0
    ae60:	|  |  |   move.l 68(a0),d0
    ae64:	|  |  |   move.l d0,-(sp)
    ae66:	|  |  |   jsr 5374 <abortFunction>
    ae6c:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    ae6e:	|  |  '-> movea.l 8(sp),a0
    ae72:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    ae76:	|  |      movea.l 8(sp),a0
    ae7a:	|  |      move.l 114(a0),d0
    ae7e:	|  |      move.l d0,-(sp)
    ae80:	|  |      jsr dc8a <removeObjectType>
    ae86:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    ae88:	|  |      move.l 8(sp),4(sp)
    ae8e:	|  |      move.l 1ce8a <SysBase>,d0
    ae94:	|  |      movea.l d0,a6
    ae96:	|  |      movea.l 4(sp),a1
    ae9a:	|  |      jsr -690(a6)
    while (*lookyHere) {
    ae9e:	|  '----> movea.l 12(sp),a0
    aea2:	|         move.l (a0),d0
    aea4:	'-------- bne.w ae1c <killMostPeople+0x12>
        }
    }
}
    aea8:	          nop
    aeaa:	          nop
    aeac:	          movea.l (sp)+,a6
    aeae:	          lea 12(sp),sp
    aeb2:	          rts

0000aeb4 <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    aeb4:	clr.l -(sp)
    aeb6:	move.l sp,d0
    aeb8:	addq.l #8,d0
    aeba:	move.l d0,-(sp)
    aebc:	jsr 4516 <setFrames>
    aec2:	addq.l #8,sp
}
    aec4:	nop
    aec6:	rts

0000aec8 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    aec8:	          lea -12(sp),sp
    aecc:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    aece:	          pea 196c2 <PutChar+0x1572>
    aed4:	          jsr 176ae <KPrintF>
    aeda:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    aedc:	          tst.l 20(sp)
    aee0:	      ,-- bne.s aeee <makeWalkingPerson+0x26>
    aee2:	      |   tst.l 24(sp)
    aee6:	      +-- bne.s aeee <makeWalkingPerson+0x26>
    aee8:	      |   clr.w d0
    aeea:	,-----|-- bra.w b0b0 <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    aeee:	|     '-> movea.l 1cfa2 <currentFloor>,a0
    aef4:	|         move.l 8(a0),d0
    aef8:	|     ,-- bne.s af00 <makeWalkingPerson+0x38>
    aefa:	|     |   clr.w d0
    aefc:	+-----|-- bra.w b0b0 <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    af00:	|     '-> move.l 28(sp),d0
    af04:	|         move.l d0,-(sp)
    af06:	|         jsr a974 <findPerson>
    af0c:	|         addq.l #4,sp
    af0e:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    af12:	|     ,-- bne.s af2e <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    af14:	|     |   move.l 28(sp),d0
    af18:	|     |   move.l d0,-(sp)
    af1a:	|     |   pea 196dd <PutChar+0x158d>
    af20:	|     |   jsr 176ae <KPrintF>
    af26:	|     |   addq.l #8,sp
		return FALSE;
    af28:	|     |   clr.w d0
    af2a:	+-----|-- bra.w b0b0 <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    af2e:	|     '-> movea.l 12(sp),a0
    af32:	|         move.l 68(a0),d0
    af36:	|     ,-- beq.s af4a <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    af38:	|     |   movea.l 12(sp),a0
    af3c:	|     |   move.l 68(a0),d0
    af40:	|     |   move.l d0,-(sp)
    af42:	|     |   jsr 5374 <abortFunction>
    af48:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    af4a:	|     '-> movea.l 12(sp),a0
    af4e:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    af52:	|         movea.l 12(sp),a0
    af56:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    af5c:	|         movea.l 12(sp),a0
    af60:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    af66:	|         movea.l 12(sp),a0
    af6a:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    af70:	|         movea.l 12(sp),a0
    af74:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    af7a:	|         move.l 24(sp),-(sp)
    af7e:	|         move.l 24(sp),-(sp)
    af82:	|         jsr 169f4 <inFloor>
    af88:	|         addq.l #8,sp
    af8a:	|         movea.l 12(sp),a0
    af8e:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    af92:	|         movea.l 12(sp),a0
    af96:	|         move.l 60(a0),d0
    af9a:	|         moveq #-1,d1
    af9c:	|         cmp.l d0,d1
    af9e:	|     ,-- bne.s afce <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    afa0:	|     |   movea.w #60,a0
    afa4:	|     |   adda.l 12(sp),a0
    afa8:	|     |   moveq #44,d1
    afaa:	|     |   add.l 12(sp),d1
    afae:	|     |   moveq #40,d0
    afb0:	|     |   add.l 12(sp),d0
    afb4:	|     |   move.l a0,-(sp)
    afb6:	|     |   move.l d1,-(sp)
    afb8:	|     |   move.l d0,-(sp)
    afba:	|     |   jsr aa8c <handleClosestPoint>
    afc0:	|     |   lea 12(sp),sp
    afc4:	|     |   tst.w d0
    afc6:	|     +-- bne.s afce <makeWalkingPerson+0x106>
    afc8:	|     |   clr.w d0
    afca:	+-----|-- bra.w b0b0 <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    afce:	|     '-> movea.l 12(sp),a0
    afd2:	|         move.l 4(a0),d0
    afd6:	|         move.l d0,-(sp)
    afd8:	|         jsr 17a78 <__fixsfsi>
    afde:	|         addq.l #4,sp
    afe0:	|         move.l d0,d2
    afe2:	|         movea.l 12(sp),a0
    afe6:	|         move.l (a0),d0
    afe8:	|         move.l d0,-(sp)
    afea:	|         jsr 17a78 <__fixsfsi>
    aff0:	|         addq.l #4,sp
    aff2:	|         move.l d2,-(sp)
    aff4:	|         move.l d0,-(sp)
    aff6:	|         jsr 169f4 <inFloor>
    affc:	|         addq.l #8,sp
    affe:	|         movea.l 12(sp),a0
    b002:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    b006:	|         movea.l 12(sp),a0
    b00a:	|         move.l 56(a0),d0
    b00e:	|         moveq #-1,d1
    b010:	|         cmp.l d0,d1
    b012:	|     ,-- bne.s b064 <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    b014:	|     |   movea.l 12(sp),a0
    b018:	|     |   move.l (a0),d0
    b01a:	|     |   move.l d0,-(sp)
    b01c:	|     |   jsr 17a78 <__fixsfsi>
    b022:	|     |   addq.l #4,sp
    b024:	|     |   move.l d0,8(sp)
    b028:	|     |   movea.l 12(sp),a0
    b02c:	|     |   move.l 4(a0),d0
    b030:	|     |   move.l d0,-(sp)
    b032:	|     |   jsr 17a78 <__fixsfsi>
    b038:	|     |   addq.l #4,sp
    b03a:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    b03e:	|     |   moveq #56,d0
    b040:	|     |   add.l 12(sp),d0
    b044:	|     |   move.l d0,-(sp)
    b046:	|     |   lea 8(sp),a0
    b04a:	|     |   move.l a0,-(sp)
    b04c:	|     |   moveq #16,d0
    b04e:	|     |   add.l sp,d0
    b050:	|     |   move.l d0,-(sp)
    b052:	|     |   jsr aa8c <handleClosestPoint>
    b058:	|     |   lea 12(sp),sp
    b05c:	|     |   tst.w d0
    b05e:	|     +-- bne.s b064 <makeWalkingPerson+0x19c>
    b060:	|     |   clr.w d0
    b062:	+-----|-- bra.s b0b0 <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    b064:	|     '-> move.l 12(sp),-(sp)
    b068:	|         jsr 9cd6 <doBorderStuff>
    b06e:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    b070:	|         clr.l -(sp)
    b072:	|         move.l 16(sp),-(sp)
    b076:	|         jsr c31c <walkMe>
    b07c:	|         addq.l #8,sp
    b07e:	|         tst.w d0
    b080:	|     ,-- bne.s b08c <makeWalkingPerson+0x1c4>
    b082:	|     |   movea.l 12(sp),a0
    b086:	|     |   move.w 66(a0),d0
    b08a:	|  ,--|-- beq.s b0ae <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    b08c:	|  |  '-> lea 28(sp),a0
    b090:	|  |      move.l a0,-(sp)
    b092:	|  |      pea 19706 <PutChar+0x15b6>
    b098:	|  |      jsr 176ae <KPrintF>
    b09e:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    b0a0:	|  |      movea.l 12(sp),a0
    b0a4:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    b0aa:	|  |      moveq #1,d0
    b0ac:	+--|----- bra.s b0b0 <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    b0ae:	|  '----> clr.w d0
	}
}
    b0b0:	'-------> move.l (sp)+,d2
    b0b2:	          lea 12(sp),sp
    b0b6:	          rts

0000b0b8 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    b0b8:	       lea -16(sp),sp
    b0bc:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    b0be:	       moveq #12,d0
    b0c0:	       move.l d0,16(sp)
    b0c4:	       clr.l 12(sp)
    b0c8:	       move.l 1ce8a <SysBase>,d0
    b0ce:	       movea.l d0,a6
    b0d0:	       move.l 16(sp),d0
    b0d4:	       move.l 12(sp),d1
    b0d8:	       jsr -684(a6)
    b0dc:	       move.l d0,8(sp)
    b0e0:	       move.l 8(sp),d0
    b0e4:	       move.l d0,4(sp)
    if(newAnim == 0) {
    b0e8:	   ,-- bne.s b0fc <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    b0ea:	   |   pea 19739 <PutChar+0x15e9>
    b0f0:	   |   jsr 176ae <KPrintF>
    b0f6:	   |   addq.l #4,sp
        return NULL;    
    b0f8:	   |   moveq #0,d0
    b0fa:	,--|-- bra.s b116 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    b0fc:	|  '-> movea.l 4(sp),a0
    b100:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    b102:	|      movea.l 4(sp),a0
    b106:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    b10a:	|      movea.l 4(sp),a0
    b10e:	|      clr.l 4(a0)
	return newAnim;
    b112:	|      move.l 4(sp),d0
}
    b116:	'----> movea.l (sp)+,a6
    b118:	       lea 16(sp),sp
    b11c:	       rts

0000b11e <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    b11e:	    move.l d2,-(sp)
	me->x = x;
    b120:	    movea.l 8(sp),a0
    b124:	    move.l 12(sp),(a0)
	me->y = y;
    b128:	    movea.l 8(sp),a0
    b12c:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    b132:	    movea.l 8(sp),a0
    b136:	    clr.l 8(a0)
	me->oldy = 0;
    b13a:	    movea.l 8(sp),a0
    b13e:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    b142:	    movea.l 8(sp),a0
    b146:	    move.l 118(a0),d0
    b14a:	    moveq #2,d1
    b14c:	    and.l d1,d0
    b14e:	,-- bne.s b1a6 <moveAndScale+0x88>
    b150:	|   move.w 1c81c <scaleDivide>,d0
    b156:	+-- beq.s b1a6 <moveAndScale+0x88>
    b158:	|   movea.l 8(sp),a0
    b15c:	|   move.l 4(a0),d2
    b160:	|   move.w 1c81a <scaleHorizon>,d0
    b166:	|   movea.w d0,a0
    b168:	|   move.l a0,-(sp)
    b16a:	|   jsr 17ae0 <__floatsisf>
    b170:	|   addq.l #4,sp
    b172:	|   move.l d0,-(sp)
    b174:	|   move.l d2,-(sp)
    b176:	|   jsr 17dd4 <__subsf3>
    b17c:	|   addq.l #8,sp
    b17e:	|   move.l d0,d2
    b180:	|   move.w 1c81c <scaleDivide>,d0
    b186:	|   movea.w d0,a0
    b188:	|   move.l a0,-(sp)
    b18a:	|   jsr 17ae0 <__floatsisf>
    b190:	|   addq.l #4,sp
    b192:	|   move.l d0,-(sp)
    b194:	|   move.l d2,-(sp)
    b196:	|   jsr 17996 <__divsf3>
    b19c:	|   addq.l #8,sp
    b19e:	|   movea.l 8(sp),a0
    b1a2:	|   move.l d0,32(a0)
}
    b1a6:	'-> nop
    b1a8:	    move.l (sp)+,d2
    b1aa:	    rts

0000b1ac <removeOneCharacter>:

void removeOneCharacter (int i) {
    b1ac:	          lea -16(sp),sp
    b1b0:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    b1b2:	          move.l 24(sp),-(sp)
    b1b6:	          jsr a974 <findPerson>
    b1bc:	          addq.l #4,sp
    b1be:	          move.l d0,8(sp)

    if (p) {
    b1c2:	,-------- beq.w b2a2 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    b1c6:	|         move.l 1cf9a <overRegion>,d0
    b1cc:	|         cmpi.l #118510,d0
    b1d2:	|     ,-- bne.s b1f0 <removeOneCharacter+0x44>
    b1d4:	|     |   movea.l 1cf9a <overRegion>,a0
    b1da:	|     |   move.l 28(a0),d1
    b1de:	|     |   movea.l 8(sp),a0
    b1e2:	|     |   move.l 114(a0),d0
    b1e6:	|     |   cmp.l d1,d0
    b1e8:	|     +-- bne.s b1f0 <removeOneCharacter+0x44>
            overRegion = NULL;
    b1ea:	|     |   clr.l 1cf9a <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    b1f0:	|     '-> movea.l 8(sp),a0
    b1f4:	|         move.l 68(a0),d0
    b1f8:	|     ,-- beq.s b20c <removeOneCharacter+0x60>
    b1fa:	|     |   movea.l 8(sp),a0
    b1fe:	|     |   move.l 68(a0),d0
    b202:	|     |   move.l d0,-(sp)
    b204:	|     |   jsr 5374 <abortFunction>
    b20a:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    b20c:	|     '-> movea.l 8(sp),a0
    b210:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    b214:	|         clr.l 12(sp)
    b218:	|     ,-- bra.s b240 <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    b21a:	|  ,--|-> movea.l 8(sp),a0
    b21e:	|  |  |   movea.l 80(a0),a0
    b222:	|  |  |   move.l (a0),d1
    b224:	|  |  |   move.l 12(sp),d0
    b228:	|  |  |   add.l d0,d0
    b22a:	|  |  |   add.l d0,d0
    b22c:	|  |  |   movea.l d1,a0
    b22e:	|  |  |   adda.l d0,a0
    b230:	|  |  |   move.l (a0),d0
    b232:	|  |  |   move.l d0,-(sp)
    b234:	|  |  |   jsr 9c52 <deleteAnim>
    b23a:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    b23c:	|  |  |   addq.l #1,12(sp)
    b240:	|  |  '-> moveq #2,d0
    b242:	|  |      cmp.l 12(sp),d0
    b246:	|  '----- bge.s b21a <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    b248:	|         move.l #118506,16(sp)
    b250:	|     ,-- bra.s b260 <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    b252:	|  ,--|-> movea.l 16(sp),a0
    b256:	|  |  |   move.l (a0),d0
    b258:	|  |  |   moveq #36,d1
    b25a:	|  |  |   add.l d0,d1
    b25c:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    b260:	|  |  '-> movea.l 16(sp),a0
    b264:	|  |      move.l (a0),d0
    b266:	|  |      cmp.l 8(sp),d0
    b26a:	|  '----- bne.s b252 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    b26c:	|         movea.l 8(sp),a0
    b270:	|         move.l 36(a0),d0
    b274:	|         movea.l 16(sp),a0
    b278:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    b27a:	|         movea.l 8(sp),a0
    b27e:	|         move.l 114(a0),d0
    b282:	|         move.l d0,-(sp)
    b284:	|         jsr dc8a <removeObjectType>
    b28a:	|         addq.l #4,sp
        FreeVec(p);
    b28c:	|         move.l 8(sp),4(sp)
    b292:	|         move.l 1ce8a <SysBase>,d0
    b298:	|         movea.l d0,a6
    b29a:	|         movea.l 4(sp),a1
    b29e:	|         jsr -690(a6)
		
    }
}
    b2a2:	'-------> nop
    b2a4:	          movea.l (sp)+,a6
    b2a6:	          lea 16(sp),sp
    b2aa:	          rts

0000b2ac <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b2ac:	       subq.l #8,sp
    b2ae:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b2b0:	       movea.l 16(sp),a0
    b2b4:	       movea.l 80(a0),a0
    b2b8:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b2be:	       movea.l 16(sp),a0
    b2c2:	       move.l 92(a0),d2
    b2c6:	       move.l 4(sp),-(sp)
    b2ca:	       pea b4 <_start+0xb4>
    b2ce:	       jsr 180b8 <__divsi3>
    b2d4:	       addq.l #8,sp
    b2d6:	       add.l d2,d0
    b2d8:	       move.l d0,d1
    b2da:	       addi.l #180,d1
    b2e0:	       movea.l 16(sp),a0
    b2e4:	       move.l 100(a0),d0
    b2e8:	       move.l d1,d2
    b2ea:	       add.l d0,d2
    b2ec:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b2f0:	   ,-- bra.s b2fa <rethinkAngle+0x4e>
    b2f2:	,--|-> addi.l #-360,8(sp)
    b2fa:	|  '-> cmpi.l #359,8(sp)
    b302:	'----- bgt.s b2f2 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b304:	       move.l 4(sp),-(sp)
    b308:	       move.l 12(sp),-(sp)
    b30c:	       jsr 1803a <__mulsi3>
    b312:	       addq.l #8,sp
    b314:	       pea 168 <decodeFilename+0x50>
    b318:	       move.l d0,-(sp)
    b31a:	       jsr 180b8 <__divsi3>
    b320:	       addq.l #8,sp
    b322:	       movea.l 16(sp),a0
    b326:	       move.l d0,106(a0)
}
    b32a:	       nop
    b32c:	       move.l (sp)+,d2
    b32e:	       addq.l #8,sp
    b330:	       rts

0000b332 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b332:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b334:	          movea.l 8(sp),a0
    b338:	          move.l 8(a0),d0
    b33c:	          move.l 12(sp),-(sp)
    b340:	          move.l d0,-(sp)
    b342:	          jsr 8d0 <put2bytes>
    b348:	          addq.l #8,sp
	if (p -> numFrames) {
    b34a:	          movea.l 8(sp),a0
    b34e:	          move.l 8(a0),d0
    b352:	,-------- beq.w b3f6 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b356:	|         movea.l 8(sp),a0
    b35a:	|         movea.l (a0),a0
    b35c:	|         move.l (a0),d0
    b35e:	|         move.l 12(sp),-(sp)
    b362:	|         move.l d0,-(sp)
    b364:	|         jsr 958 <put4bytes>
    b36a:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b36c:	|         clr.l (sp)
    b36e:	|     ,-- bra.s b3e8 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b370:	|  ,--|-> movea.l 8(sp),a0
    b374:	|  |  |   movea.l 4(a0),a0
    b378:	|  |  |   move.l (sp),d1
    b37a:	|  |  |   move.l d1,d0
    b37c:	|  |  |   add.l d0,d0
    b37e:	|  |  |   add.l d1,d0
    b380:	|  |  |   add.l d0,d0
    b382:	|  |  |   add.l d0,d0
    b384:	|  |  |   adda.l d0,a0
    b386:	|  |  |   move.l (a0),d0
    b388:	|  |  |   move.l 12(sp),-(sp)
    b38c:	|  |  |   move.l d0,-(sp)
    b38e:	|  |  |   jsr 958 <put4bytes>
    b394:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b396:	|  |  |   movea.l 8(sp),a0
    b39a:	|  |  |   movea.l 4(a0),a0
    b39e:	|  |  |   move.l (sp),d1
    b3a0:	|  |  |   move.l d1,d0
    b3a2:	|  |  |   add.l d0,d0
    b3a4:	|  |  |   add.l d1,d0
    b3a6:	|  |  |   add.l d0,d0
    b3a8:	|  |  |   add.l d0,d0
    b3aa:	|  |  |   adda.l d0,a0
    b3ac:	|  |  |   move.l 4(a0),d0
    b3b0:	|  |  |   move.l 12(sp),-(sp)
    b3b4:	|  |  |   move.l d0,-(sp)
    b3b6:	|  |  |   jsr 958 <put4bytes>
    b3bc:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b3be:	|  |  |   movea.l 8(sp),a0
    b3c2:	|  |  |   movea.l 4(a0),a0
    b3c6:	|  |  |   move.l (sp),d1
    b3c8:	|  |  |   move.l d1,d0
    b3ca:	|  |  |   add.l d0,d0
    b3cc:	|  |  |   add.l d1,d0
    b3ce:	|  |  |   add.l d0,d0
    b3d0:	|  |  |   add.l d0,d0
    b3d2:	|  |  |   adda.l d0,a0
    b3d4:	|  |  |   move.l 8(a0),d0
    b3d8:	|  |  |   move.l 12(sp),-(sp)
    b3dc:	|  |  |   move.l d0,-(sp)
    b3de:	|  |  |   jsr 958 <put4bytes>
    b3e4:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b3e6:	|  |  |   addq.l #1,(sp)
    b3e8:	|  |  '-> movea.l 8(sp),a0
    b3ec:	|  |      move.l 8(a0),d0
    b3f0:	|  |      cmp.l (sp),d0
    b3f2:	|  '----- bgt.w b370 <saveAnim+0x3e>
		}
	}
	return TRUE;
    b3f6:	'-------> moveq #1,d0
}
    b3f8:	          addq.l #4,sp
    b3fa:	          rts

0000b3fc <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b3fc:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b3fe:	             movea.l 8(sp),a0
    b402:	             move.l 4(a0),d0
    b406:	             move.l 12(sp),-(sp)
    b40a:	             move.l d0,-(sp)
    b40c:	             jsr 8d0 <put2bytes>
    b412:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b414:	             clr.l (sp)
    b416:	   ,-------- bra.s b442 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b418:	,--|-------> movea.l 8(sp),a0
    b41c:	|  |         move.l (a0),d1
    b41e:	|  |         move.l (sp),d0
    b420:	|  |         add.l d0,d0
    b422:	|  |         add.l d0,d0
    b424:	|  |         movea.l d1,a0
    b426:	|  |         adda.l d0,a0
    b428:	|  |         move.l (a0),d0
    b42a:	|  |         move.l 12(sp),-(sp)
    b42e:	|  |         move.l d0,-(sp)
    b430:	|  |         jsr b332 <saveAnim>
    b436:	|  |         addq.l #8,sp
    b438:	|  |         tst.w d0
    b43a:	|  |     ,-- bne.s b440 <saveCostume+0x44>
    b43c:	|  |     |   clr.w d0
    b43e:	|  |  ,--|-- bra.s b456 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b440:	|  |  |  '-> addq.l #1,(sp)
    b442:	|  '--|----> movea.l 8(sp),a0
    b446:	|     |      move.l 4(a0),d1
    b44a:	|     |      move.l d1,d0
    b44c:	|     |      add.l d0,d0
    b44e:	|     |      add.l d1,d0
    b450:	|     |      cmp.l (sp),d0
    b452:	'-----|----- bgt.s b418 <saveCostume+0x1c>
	}

	return TRUE;
    b454:	      |      moveq #1,d0
}
    b456:	      '----> addq.l #4,sp
    b458:	             rts

0000b45a <savePeople>:

BOOL savePeople (BPTR fp) {
    b45a:	             lea -144(sp),sp
    b45e:	             move.l a6,-(sp)
    b460:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b462:	             move.l 1ceea <allPeople>,148(sp)
	int countPeople = 0, a;
    b46a:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b46e:	             move.w 1c81a <scaleHorizon>,d0
    b474:	             movea.w d0,a0
    b476:	             move.l 156(sp),-(sp)
    b47a:	             move.l a0,-(sp)
    b47c:	             jsr a9c <putSigned>
    b482:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b484:	             move.w 1c81c <scaleDivide>,d0
    b48a:	             movea.w d0,a0
    b48c:	             move.l 156(sp),-(sp)
    b490:	             move.l a0,-(sp)
    b492:	             jsr a9c <putSigned>
    b498:	             addq.l #8,sp

	while (me) {
    b49a:	         ,-- bra.s b4aa <savePeople+0x50>
		countPeople ++;
    b49c:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    b4a0:	      |  |   movea.l 148(sp),a0
    b4a4:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b4aa:	      |  '-> tst.l 148(sp)
    b4ae:	      '----- bne.s b49c <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b4b0:	             move.l 156(sp),-(sp)
    b4b4:	             move.l 148(sp),-(sp)
    b4b8:	             jsr 8d0 <put2bytes>
    b4be:	             addq.l #8,sp

	me = allPeople;
    b4c0:	             move.l 1ceea <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b4c8:	             clr.l 140(sp)
    b4cc:	   ,-------- bra.w b924 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b4d0:	,--|-------> movea.l 148(sp),a0
    b4d4:	|  |         move.l (a0),d0
    b4d6:	|  |         move.l 156(sp),-(sp)
    b4da:	|  |         move.l d0,-(sp)
    b4dc:	|  |         jsr a46 <putFloat>
    b4e2:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b4e4:	|  |         movea.l 148(sp),a0
    b4e8:	|  |         move.l 4(a0),d0
    b4ec:	|  |         move.l 156(sp),-(sp)
    b4f0:	|  |         move.l d0,-(sp)
    b4f2:	|  |         jsr a46 <putFloat>
    b4f8:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b4fa:	|  |         movea.l 148(sp),a0
    b4fe:	|  |         move.l 80(a0),d0
    b502:	|  |         move.l 156(sp),-(sp)
    b506:	|  |         move.l d0,-(sp)
    b508:	|  |         jsr b3fc <saveCostume>
    b50e:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b510:	|  |         movea.l 148(sp),a0
    b514:	|  |         move.l 72(a0),d0
    b518:	|  |         move.l 156(sp),-(sp)
    b51c:	|  |         move.l d0,-(sp)
    b51e:	|  |         jsr b332 <saveAnim>
    b524:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b526:	|  |         move.l 156(sp),136(sp)
    b52c:	|  |         movea.l 148(sp),a0
    b530:	|  |         move.l 72(a0),d1
    b534:	|  |         movea.l 148(sp),a0
    b538:	|  |         move.l 76(a0),d0
    b53c:	|  |         cmp.l d1,d0
    b53e:	|  |         seq d0
    b540:	|  |         neg.b d0
    b542:	|  |         move.b d0,d0
    b544:	|  |         andi.l #255,d0
    b54a:	|  |         move.l d0,132(sp)
    b54e:	|  |         move.l 1ce92 <DOSBase>,d0
    b554:	|  |         movea.l d0,a6
    b556:	|  |         move.l 136(sp),d1
    b55a:	|  |         move.l 132(sp),d2
    b55e:	|  |         jsr -312(a6)
    b562:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b566:	|  |         movea.l 148(sp),a0
    b56a:	|  |         move.l 32(a0),d0
    b56e:	|  |         move.l 156(sp),-(sp)
    b572:	|  |         move.l d0,-(sp)
    b574:	|  |         jsr a46 <putFloat>
    b57a:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b57c:	|  |         movea.l 148(sp),a0
    b580:	|  |         move.l 118(a0),d0
    b584:	|  |         move.l 156(sp),-(sp)
    b588:	|  |         move.l d0,-(sp)
    b58a:	|  |         jsr 8d0 <put2bytes>
    b590:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b592:	|  |         movea.l 148(sp),a0
    b596:	|  |         move.l 20(a0),d0
    b59a:	|  |         move.l 156(sp),-(sp)
    b59e:	|  |         move.l d0,-(sp)
    b5a0:	|  |         jsr 8d0 <put2bytes>
    b5a6:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b5a8:	|  |         movea.l 148(sp),a0
    b5ac:	|  |         move.l 40(a0),d0
    b5b0:	|  |         move.l 156(sp),-(sp)
    b5b4:	|  |         move.l d0,-(sp)
    b5b6:	|  |         jsr 8d0 <put2bytes>
    b5bc:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b5be:	|  |         movea.l 148(sp),a0
    b5c2:	|  |         move.l 44(a0),d0
    b5c6:	|  |         move.l 156(sp),-(sp)
    b5ca:	|  |         move.l d0,-(sp)
    b5cc:	|  |         jsr 8d0 <put2bytes>
    b5d2:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b5d4:	|  |         movea.l 148(sp),a0
    b5d8:	|  |         move.l 48(a0),d0
    b5dc:	|  |         move.l 156(sp),-(sp)
    b5e0:	|  |         move.l d0,-(sp)
    b5e2:	|  |         jsr 8d0 <put2bytes>
    b5e8:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b5ea:	|  |         movea.l 148(sp),a0
    b5ee:	|  |         move.l 52(a0),d0
    b5f2:	|  |         move.l 156(sp),-(sp)
    b5f6:	|  |         move.l d0,-(sp)
    b5f8:	|  |         jsr 8d0 <put2bytes>
    b5fe:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b600:	|  |         movea.l 148(sp),a0
    b604:	|  |         move.l 84(a0),d0
    b608:	|  |         move.l 156(sp),-(sp)
    b60c:	|  |         move.l d0,-(sp)
    b60e:	|  |         jsr 8d0 <put2bytes>
    b614:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b616:	|  |         movea.l 148(sp),a0
    b61a:	|  |         move.l 88(a0),d0
    b61e:	|  |         move.l 156(sp),-(sp)
    b622:	|  |         move.l d0,-(sp)
    b624:	|  |         jsr 8d0 <put2bytes>
    b62a:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b62c:	|  |         movea.l 148(sp),a0
    b630:	|  |         move.l 28(a0),d0
    b634:	|  |         move.l 156(sp),-(sp)
    b638:	|  |         move.l d0,-(sp)
    b63a:	|  |         jsr 8d0 <put2bytes>
    b640:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b642:	|  |         movea.l 148(sp),a0
    b646:	|  |         move.l 122(a0),d0
    b64a:	|  |         move.l 156(sp),-(sp)
    b64e:	|  |         move.l d0,-(sp)
    b650:	|  |         jsr 8d0 <put2bytes>
    b656:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b658:	|  |         movea.l 148(sp),a0
    b65c:	|  |         move.l 24(a0),d0
    b660:	|  |         move.l d0,d0
    b662:	|  |         movea.w d0,a0
    b664:	|  |         move.l 156(sp),-(sp)
    b668:	|  |         move.l a0,-(sp)
    b66a:	|  |         jsr a9c <putSigned>
    b670:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b672:	|  |         move.l 156(sp),124(sp)
    b678:	|  |         movea.l 148(sp),a0
    b67c:	|  |         move.w 104(a0),d0
    b680:	|  |         movea.w d0,a0
    b682:	|  |         move.l a0,120(sp)
    b686:	|  |         move.l 1ce92 <DOSBase>,d0
    b68c:	|  |         movea.l d0,a6
    b68e:	|  |         move.l 124(sp),d1
    b692:	|  |         move.l 120(sp),d2
    b696:	|  |         jsr -312(a6)
    b69a:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b69e:	|  |         move.l 156(sp),112(sp)
    b6a4:	|  |         movea.l 148(sp),a0
    b6a8:	|  |         move.w 64(a0),d0
    b6ac:	|  |         movea.w d0,a0
    b6ae:	|  |         move.l a0,108(sp)
    b6b2:	|  |         move.l 1ce92 <DOSBase>,d0
    b6b8:	|  |         movea.l d0,a6
    b6ba:	|  |         move.l 112(sp),d1
    b6be:	|  |         move.l 108(sp),d2
    b6c2:	|  |         jsr -312(a6)
    b6c6:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b6ca:	|  |         move.l 156(sp),100(sp)
    b6d0:	|  |         movea.l 148(sp),a0
    b6d4:	|  |         move.w 66(a0),d0
    b6d8:	|  |         movea.w d0,a0
    b6da:	|  |         move.l a0,96(sp)
    b6de:	|  |         move.l 1ce92 <DOSBase>,d0
    b6e4:	|  |         movea.l d0,a6
    b6e6:	|  |         move.l 100(sp),d1
    b6ea:	|  |         move.l 96(sp),d2
    b6ee:	|  |         jsr -312(a6)
    b6f2:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b6f6:	|  |         movea.l 148(sp),a0
    b6fa:	|  |         move.l 68(a0),d0
    b6fe:	|  |  ,----- beq.s b73c <savePeople+0x2e2>
			FPutC (fp, 1);
    b700:	|  |  |      move.l 156(sp),76(sp)
    b706:	|  |  |      moveq #1,d0
    b708:	|  |  |      move.l d0,72(sp)
    b70c:	|  |  |      move.l 1ce92 <DOSBase>,d0
    b712:	|  |  |      movea.l d0,a6
    b714:	|  |  |      move.l 76(sp),d1
    b718:	|  |  |      move.l 72(sp),d2
    b71c:	|  |  |      jsr -312(a6)
    b720:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b724:	|  |  |      movea.l 148(sp),a0
    b728:	|  |  |      move.l 68(a0),d0
    b72c:	|  |  |      move.l 156(sp),-(sp)
    b730:	|  |  |      move.l d0,-(sp)
    b732:	|  |  |      jsr c956 <saveFunction>
    b738:	|  |  |      addq.l #8,sp
    b73a:	|  |  |  ,-- bra.s b760 <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b73c:	|  |  '--|-> move.l 156(sp),88(sp)
    b742:	|  |     |   moveq #1,d0
    b744:	|  |     |   move.l d0,84(sp)
    b748:	|  |     |   move.l 1ce92 <DOSBase>,d0
    b74e:	|  |     |   movea.l d0,a6
    b750:	|  |     |   move.l 88(sp),d1
    b754:	|  |     |   move.l 84(sp),d2
    b758:	|  |     |   jsr -312(a6)
    b75c:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b760:	|  |     '-> movea.l 148(sp),a0
    b764:	|  |         move.l 106(a0),d0
    b768:	|  |         move.l 156(sp),-(sp)
    b76c:	|  |         move.l d0,-(sp)
    b76e:	|  |         jsr 8d0 <put2bytes>
    b774:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b776:	|  |         movea.l 148(sp),a0
    b77a:	|  |         move.l 92(a0),d0
    b77e:	|  |         move.l 156(sp),-(sp)
    b782:	|  |         move.l d0,-(sp)
    b784:	|  |         jsr 8d0 <put2bytes>
    b78a:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b78c:	|  |         movea.l 148(sp),a0
    b790:	|  |         move.l 100(a0),d0
    b794:	|  |         move.l 156(sp),-(sp)
    b798:	|  |         move.l d0,-(sp)
    b79a:	|  |         jsr 8d0 <put2bytes>
    b7a0:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b7a2:	|  |         movea.l 148(sp),a0
    b7a6:	|  |         move.l 96(a0),d0
    b7aa:	|  |         move.l 156(sp),-(sp)
    b7ae:	|  |         move.l d0,-(sp)
    b7b0:	|  |         jsr 8d0 <put2bytes>
    b7b6:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b7b8:	|  |         movea.l 148(sp),a0
    b7bc:	|  |         move.l 110(a0),d0
    b7c0:	|  |         move.l d0,d0
    b7c2:	|  |         movea.w d0,a0
    b7c4:	|  |         move.l 156(sp),-(sp)
    b7c8:	|  |         move.l a0,-(sp)
    b7ca:	|  |         jsr a9c <putSigned>
    b7d0:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b7d2:	|  |         movea.l 148(sp),a0
    b7d6:	|  |         move.l 56(a0),d0
    b7da:	|  |         move.l d0,d0
    b7dc:	|  |         movea.w d0,a0
    b7de:	|  |         move.l 156(sp),-(sp)
    b7e2:	|  |         move.l a0,-(sp)
    b7e4:	|  |         jsr a9c <putSigned>
    b7ea:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b7ec:	|  |         movea.l 148(sp),a0
    b7f0:	|  |         move.l 60(a0),d0
    b7f4:	|  |         move.l d0,d0
    b7f6:	|  |         movea.w d0,a0
    b7f8:	|  |         move.l 156(sp),-(sp)
    b7fc:	|  |         move.l a0,-(sp)
    b7fe:	|  |         jsr a9c <putSigned>
    b804:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b806:	|  |         move.l 156(sp),64(sp)
    b80c:	|  |         movea.l 148(sp),a0
    b810:	|  |         move.b 126(a0),d0
    b814:	|  |         move.b d0,d0
    b816:	|  |         andi.l #255,d0
    b81c:	|  |         move.l d0,60(sp)
    b820:	|  |         move.l 1ce92 <DOSBase>,d0
    b826:	|  |         movea.l d0,a6
    b828:	|  |         move.l 64(sp),d1
    b82c:	|  |         move.l 60(sp),d2
    b830:	|  |         jsr -312(a6)
    b834:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b838:	|  |         move.l 156(sp),52(sp)
    b83e:	|  |         movea.l 148(sp),a0
    b842:	|  |         move.b 127(a0),d0
    b846:	|  |         move.b d0,d0
    b848:	|  |         andi.l #255,d0
    b84e:	|  |         move.l d0,48(sp)
    b852:	|  |         move.l 1ce92 <DOSBase>,d0
    b858:	|  |         movea.l d0,a6
    b85a:	|  |         move.l 52(sp),d1
    b85e:	|  |         move.l 48(sp),d2
    b862:	|  |         jsr -312(a6)
    b866:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b86a:	|  |         move.l 156(sp),40(sp)
    b870:	|  |         movea.l 148(sp),a0
    b874:	|  |         move.b 128(a0),d0
    b878:	|  |         move.b d0,d0
    b87a:	|  |         andi.l #255,d0
    b880:	|  |         move.l d0,36(sp)
    b884:	|  |         move.l 1ce92 <DOSBase>,d0
    b88a:	|  |         movea.l d0,a6
    b88c:	|  |         move.l 40(sp),d1
    b890:	|  |         move.l 36(sp),d2
    b894:	|  |         jsr -312(a6)
    b898:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b89c:	|  |         move.l 156(sp),28(sp)
    b8a2:	|  |         movea.l 148(sp),a0
    b8a6:	|  |         move.b 129(a0),d0
    b8aa:	|  |         move.b d0,d0
    b8ac:	|  |         andi.l #255,d0
    b8b2:	|  |         move.l d0,24(sp)
    b8b6:	|  |         move.l 1ce92 <DOSBase>,d0
    b8bc:	|  |         movea.l d0,a6
    b8be:	|  |         move.l 28(sp),d1
    b8c2:	|  |         move.l 24(sp),d2
    b8c6:	|  |         jsr -312(a6)
    b8ca:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b8ce:	|  |         move.l 156(sp),16(sp)
    b8d4:	|  |         movea.l 148(sp),a0
    b8d8:	|  |         move.b 130(a0),d0
    b8dc:	|  |         move.b d0,d0
    b8de:	|  |         andi.l #255,d0
    b8e4:	|  |         move.l d0,12(sp)
    b8e8:	|  |         move.l 1ce92 <DOSBase>,d0
    b8ee:	|  |         movea.l d0,a6
    b8f0:	|  |         move.l 16(sp),d1
    b8f4:	|  |         move.l 12(sp),d2
    b8f8:	|  |         jsr -312(a6)
    b8fc:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b900:	|  |         movea.l 148(sp),a0
    b904:	|  |         move.l 114(a0),d0
    b908:	|  |         move.l 156(sp),-(sp)
    b90c:	|  |         move.l d0,-(sp)
    b90e:	|  |         jsr dd2a <saveObjectRef>
    b914:	|  |         addq.l #8,sp

		me = me -> next;
    b916:	|  |         movea.l 148(sp),a0
    b91a:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b920:	|  |         addq.l #1,140(sp)
    b924:	|  '-------> movea.l 140(sp),a0
    b928:	|            cmpa.l 144(sp),a0
    b92c:	'----------- blt.w b4d0 <savePeople+0x76>
	}
	return TRUE;
    b930:	             moveq #1,d0
}
    b932:	             move.l (sp)+,d2
    b934:	             movea.l (sp)+,a6
    b936:	             lea 144(sp),sp
    b93a:	             rts

0000b93c <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b93c:	movea.l 4(sp),a0
    b940:	move.l 8(sp),(a0)
}
    b944:	nop
    b946:	rts

0000b948 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b948:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b94a:	       move.l 12(sp),-(sp)
    b94e:	       jsr a974 <findPerson>
    b954:	       addq.l #4,sp
    b956:	       move.l d0,(sp)
	if (! moveMe) return;
    b958:	,----- beq.s b96c <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b95a:	|      move.l 8(sp),-(sp)
    b95e:	|      move.l 4(sp),-(sp)
    b962:	|      jsr b972 <setMyDrawMode>
    b968:	|      addq.l #8,sp
    b96a:	|  ,-- bra.s b96e <setDrawMode+0x26>
	if (! moveMe) return;
    b96c:	'--|-> nop
}
    b96e:	   '-> addq.l #4,sp
    b970:	       rts

0000b972 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b972:	       moveq #19,d0
    b974:	       cmp.l 8(sp),d0
    b978:	,----- bcs.w be50 <setMyDrawMode+0x4de>
    b97c:	|      move.l 8(sp),d0
    b980:	|      add.l d0,d0
    b982:	|      movea.l d0,a0
    b984:	|      adda.l #47504,a0
    b98a:	|      move.w (a0),d0
    b98c:	|      jmp (b990 <setMyDrawMode+0x1e>,pc,d0.w)
    b990:	|      .short 0x04c0
    b992:	|      ori.l #6684712,-(a4)
    b998:	|      btst d0,-(a0)
    b99a:	|      bchg d0,(a6)+
    b99c:	|      bclr d0,(a4)+
    b99e:	|      bset d0,(a2)+
    b9a0:	|      andi.b #84,(a6)
    b9a4:	|      andi.l #55575312,(a2)
    b9aa:	|      .short 0x02d0
    b9ac:	|      bclr d1,(a0)
    b9ae:	|      .short 0x044a
    b9b0:	|      .short 0x040c
    b9b2:	|      movep.l d1,1158(a6)
    b9b6:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b9b8:	|      movea.l 4(sp),a0
    b9bc:	|      clr.b 128(a0)
    b9c0:	|      movea.l 4(sp),a0
    b9c4:	|      move.b 128(a0),d0
    b9c8:	|      movea.l 4(sp),a0
    b9cc:	|      move.b d0,127(a0)
    b9d0:	|      movea.l 4(sp),a0
    b9d4:	|      move.b 127(a0),d0
    b9d8:	|      movea.l 4(sp),a0
    b9dc:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b9e0:	|      movea.l 4(sp),a0
    b9e4:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b9e8:	|      movea.l 4(sp),a0
    b9ec:	|      move.b #64,130(a0)
			break;
    b9f2:	|  ,-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b9f6:	|  |   movea.l 4(sp),a0
    b9fa:	|  |   clr.b 128(a0)
    b9fe:	|  |   movea.l 4(sp),a0
    ba02:	|  |   move.b 128(a0),d0
    ba06:	|  |   movea.l 4(sp),a0
    ba0a:	|  |   move.b d0,127(a0)
    ba0e:	|  |   movea.l 4(sp),a0
    ba12:	|  |   move.b 127(a0),d0
    ba16:	|  |   movea.l 4(sp),a0
    ba1a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    ba1e:	|  |   movea.l 4(sp),a0
    ba22:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    ba26:	|  |   movea.l 4(sp),a0
    ba2a:	|  |   move.b #-128,130(a0)
			break;
    ba30:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ba34:	|  |   movea.l 4(sp),a0
    ba38:	|  |   clr.b 128(a0)
    ba3c:	|  |   movea.l 4(sp),a0
    ba40:	|  |   move.b 128(a0),d0
    ba44:	|  |   movea.l 4(sp),a0
    ba48:	|  |   move.b d0,127(a0)
    ba4c:	|  |   movea.l 4(sp),a0
    ba50:	|  |   move.b 127(a0),d0
    ba54:	|  |   movea.l 4(sp),a0
    ba58:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    ba5c:	|  |   movea.l 4(sp),a0
    ba60:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    ba64:	|  |   movea.l 4(sp),a0
    ba68:	|  |   move.b #-64,130(a0)
			break;
    ba6e:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ba72:	|  |   movea.l 4(sp),a0
    ba76:	|  |   clr.b 128(a0)
    ba7a:	|  |   movea.l 4(sp),a0
    ba7e:	|  |   move.b 128(a0),d0
    ba82:	|  |   movea.l 4(sp),a0
    ba86:	|  |   move.b d0,127(a0)
    ba8a:	|  |   movea.l 4(sp),a0
    ba8e:	|  |   move.b 127(a0),d0
    ba92:	|  |   movea.l 4(sp),a0
    ba96:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    ba9a:	|  |   movea.l 4(sp),a0
    ba9e:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    baa2:	|  |   movea.l 4(sp),a0
    baa6:	|  |   move.b #-2,130(a0)
			break;
    baac:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bab0:	|  |   movea.l 4(sp),a0
    bab4:	|  |   clr.b 128(a0)
    bab8:	|  |   movea.l 4(sp),a0
    babc:	|  |   move.b 128(a0),d0
    bac0:	|  |   movea.l 4(sp),a0
    bac4:	|  |   move.b d0,127(a0)
    bac8:	|  |   movea.l 4(sp),a0
    bacc:	|  |   move.b 127(a0),d0
    bad0:	|  |   movea.l 4(sp),a0
    bad4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bad8:	|  |   movea.l 4(sp),a0
    badc:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bae2:	|  |   movea.l 4(sp),a0
    bae6:	|  |   clr.b 130(a0)
			break;
    baea:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    baee:	|  |   movea.l 4(sp),a0
    baf2:	|  |   clr.b 128(a0)
    baf6:	|  |   movea.l 4(sp),a0
    bafa:	|  |   move.b 128(a0),d0
    bafe:	|  |   movea.l 4(sp),a0
    bb02:	|  |   move.b d0,127(a0)
    bb06:	|  |   movea.l 4(sp),a0
    bb0a:	|  |   move.b 127(a0),d0
    bb0e:	|  |   movea.l 4(sp),a0
    bb12:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bb16:	|  |   movea.l 4(sp),a0
    bb1a:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bb20:	|  |   movea.l 4(sp),a0
    bb24:	|  |   clr.b 130(a0)
			break;
    bb28:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bb2c:	|  |   movea.l 4(sp),a0
    bb30:	|  |   clr.b 128(a0)
    bb34:	|  |   movea.l 4(sp),a0
    bb38:	|  |   move.b 128(a0),d0
    bb3c:	|  |   movea.l 4(sp),a0
    bb40:	|  |   move.b d0,127(a0)
    bb44:	|  |   movea.l 4(sp),a0
    bb48:	|  |   move.b 127(a0),d0
    bb4c:	|  |   movea.l 4(sp),a0
    bb50:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bb54:	|  |   movea.l 4(sp),a0
    bb58:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bb5e:	|  |   movea.l 4(sp),a0
    bb62:	|  |   clr.b 130(a0)
			break;
    bb66:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bb6a:	|  |   movea.l 4(sp),a0
    bb6e:	|  |   clr.b 128(a0)
    bb72:	|  |   movea.l 4(sp),a0
    bb76:	|  |   move.b 128(a0),d0
    bb7a:	|  |   movea.l 4(sp),a0
    bb7e:	|  |   move.b d0,127(a0)
    bb82:	|  |   movea.l 4(sp),a0
    bb86:	|  |   move.b 127(a0),d0
    bb8a:	|  |   movea.l 4(sp),a0
    bb8e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bb92:	|  |   movea.l 4(sp),a0
    bb96:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bb9a:	|  |   movea.l 4(sp),a0
    bb9e:	|  |   clr.b 130(a0)
			break;
    bba2:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bba6:	|  |   movea.l 4(sp),a0
    bbaa:	|  |   clr.b 128(a0)
    bbae:	|  |   movea.l 4(sp),a0
    bbb2:	|  |   move.b 128(a0),d0
    bbb6:	|  |   movea.l 4(sp),a0
    bbba:	|  |   move.b d0,127(a0)
    bbbe:	|  |   movea.l 4(sp),a0
    bbc2:	|  |   move.b 127(a0),d0
    bbc6:	|  |   movea.l 4(sp),a0
    bbca:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bbce:	|  |   movea.l 4(sp),a0
    bbd2:	|  |   st 129(a0)
			moveMe->transparency = 64;
    bbd6:	|  |   movea.l 4(sp),a0
    bbda:	|  |   move.b #64,130(a0)
			break;
    bbe0:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bbe4:	|  |   movea.l 4(sp),a0
    bbe8:	|  |   clr.b 128(a0)
    bbec:	|  |   movea.l 4(sp),a0
    bbf0:	|  |   move.b 128(a0),d0
    bbf4:	|  |   movea.l 4(sp),a0
    bbf8:	|  |   move.b d0,127(a0)
    bbfc:	|  |   movea.l 4(sp),a0
    bc00:	|  |   move.b 127(a0),d0
    bc04:	|  |   movea.l 4(sp),a0
    bc08:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bc0c:	|  |   movea.l 4(sp),a0
    bc10:	|  |   st 129(a0)
			moveMe->transparency = 128;
    bc14:	|  |   movea.l 4(sp),a0
    bc18:	|  |   move.b #-128,130(a0)
			break;
    bc1e:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bc22:	|  |   movea.l 4(sp),a0
    bc26:	|  |   clr.b 128(a0)
    bc2a:	|  |   movea.l 4(sp),a0
    bc2e:	|  |   move.b 128(a0),d0
    bc32:	|  |   movea.l 4(sp),a0
    bc36:	|  |   move.b d0,127(a0)
    bc3a:	|  |   movea.l 4(sp),a0
    bc3e:	|  |   move.b 127(a0),d0
    bc42:	|  |   movea.l 4(sp),a0
    bc46:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bc4a:	|  |   movea.l 4(sp),a0
    bc4e:	|  |   st 129(a0)
			moveMe->transparency = 192;
    bc52:	|  |   movea.l 4(sp),a0
    bc56:	|  |   move.b #-64,130(a0)
			break;
    bc5c:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bc60:	|  |   movea.l 4(sp),a0
    bc64:	|  |   move.b #-128,128(a0)
    bc6a:	|  |   movea.l 4(sp),a0
    bc6e:	|  |   move.b 128(a0),d0
    bc72:	|  |   movea.l 4(sp),a0
    bc76:	|  |   move.b d0,127(a0)
    bc7a:	|  |   movea.l 4(sp),a0
    bc7e:	|  |   move.b 127(a0),d0
    bc82:	|  |   movea.l 4(sp),a0
    bc86:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bc8a:	|  |   movea.l 4(sp),a0
    bc8e:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bc94:	|  |   movea.l 4(sp),a0
    bc98:	|  |   clr.b 130(a0)
			break;
    bc9c:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bca0:	|  |   movea.l 4(sp),a0
    bca4:	|  |   move.b #-128,128(a0)
    bcaa:	|  |   movea.l 4(sp),a0
    bcae:	|  |   move.b 128(a0),d0
    bcb2:	|  |   movea.l 4(sp),a0
    bcb6:	|  |   move.b d0,127(a0)
    bcba:	|  |   movea.l 4(sp),a0
    bcbe:	|  |   move.b 127(a0),d0
    bcc2:	|  |   movea.l 4(sp),a0
    bcc6:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bcca:	|  |   movea.l 4(sp),a0
    bcce:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bcd4:	|  |   movea.l 4(sp),a0
    bcd8:	|  |   clr.b 130(a0)
			break;
    bcdc:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bce0:	|  |   movea.l 4(sp),a0
    bce4:	|  |   move.b #-128,128(a0)
    bcea:	|  |   movea.l 4(sp),a0
    bcee:	|  |   move.b 128(a0),d0
    bcf2:	|  |   movea.l 4(sp),a0
    bcf6:	|  |   move.b d0,127(a0)
    bcfa:	|  |   movea.l 4(sp),a0
    bcfe:	|  |   move.b 127(a0),d0
    bd02:	|  |   movea.l 4(sp),a0
    bd06:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bd0a:	|  |   movea.l 4(sp),a0
    bd0e:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bd14:	|  |   movea.l 4(sp),a0
    bd18:	|  |   clr.b 130(a0)
			break;
    bd1c:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bd20:	|  |   movea.l 4(sp),a0
    bd24:	|  |   move.b #-128,128(a0)
    bd2a:	|  |   movea.l 4(sp),a0
    bd2e:	|  |   move.b 128(a0),d0
    bd32:	|  |   movea.l 4(sp),a0
    bd36:	|  |   move.b d0,127(a0)
    bd3a:	|  |   movea.l 4(sp),a0
    bd3e:	|  |   move.b 127(a0),d0
    bd42:	|  |   movea.l 4(sp),a0
    bd46:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bd4a:	|  |   movea.l 4(sp),a0
    bd4e:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bd52:	|  |   movea.l 4(sp),a0
    bd56:	|  |   clr.b 130(a0)
			break;
    bd5a:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bd5e:	|  |   movea.l 4(sp),a0
    bd62:	|  |   st 128(a0)
    bd66:	|  |   movea.l 4(sp),a0
    bd6a:	|  |   move.b 128(a0),d0
    bd6e:	|  |   movea.l 4(sp),a0
    bd72:	|  |   move.b d0,127(a0)
    bd76:	|  |   movea.l 4(sp),a0
    bd7a:	|  |   move.b 127(a0),d0
    bd7e:	|  |   movea.l 4(sp),a0
    bd82:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bd86:	|  |   movea.l 4(sp),a0
    bd8a:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bd90:	|  |   movea.l 4(sp),a0
    bd94:	|  |   clr.b 130(a0)
			break;
    bd98:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bd9c:	|  |   movea.l 4(sp),a0
    bda0:	|  |   st 128(a0)
    bda4:	|  |   movea.l 4(sp),a0
    bda8:	|  |   move.b 128(a0),d0
    bdac:	|  |   movea.l 4(sp),a0
    bdb0:	|  |   move.b d0,127(a0)
    bdb4:	|  |   movea.l 4(sp),a0
    bdb8:	|  |   move.b 127(a0),d0
    bdbc:	|  |   movea.l 4(sp),a0
    bdc0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bdc4:	|  |   movea.l 4(sp),a0
    bdc8:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bdce:	|  |   movea.l 4(sp),a0
    bdd2:	|  |   clr.b 130(a0)
			break;
    bdd6:	|  +-- bra.w be8a <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bdda:	|  |   movea.l 4(sp),a0
    bdde:	|  |   st 128(a0)
    bde2:	|  |   movea.l 4(sp),a0
    bde6:	|  |   move.b 128(a0),d0
    bdea:	|  |   movea.l 4(sp),a0
    bdee:	|  |   move.b d0,127(a0)
    bdf2:	|  |   movea.l 4(sp),a0
    bdf6:	|  |   move.b 127(a0),d0
    bdfa:	|  |   movea.l 4(sp),a0
    bdfe:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    be02:	|  |   movea.l 4(sp),a0
    be06:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    be0c:	|  |   movea.l 4(sp),a0
    be10:	|  |   clr.b 130(a0)
			break;
    be14:	|  +-- bra.s be8a <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    be16:	|  |   movea.l 4(sp),a0
    be1a:	|  |   st 128(a0)
    be1e:	|  |   movea.l 4(sp),a0
    be22:	|  |   move.b 128(a0),d0
    be26:	|  |   movea.l 4(sp),a0
    be2a:	|  |   move.b d0,127(a0)
    be2e:	|  |   movea.l 4(sp),a0
    be32:	|  |   move.b 127(a0),d0
    be36:	|  |   movea.l 4(sp),a0
    be3a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    be3e:	|  |   movea.l 4(sp),a0
    be42:	|  |   st 129(a0)
			moveMe->transparency = 0;
    be46:	|  |   movea.l 4(sp),a0
    be4a:	|  |   clr.b 130(a0)
			break;
    be4e:	|  +-- bra.s be8a <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    be50:	'--|-> movea.l 4(sp),a0
    be54:	   |   clr.b 128(a0)
    be58:	   |   movea.l 4(sp),a0
    be5c:	   |   move.b 128(a0),d0
    be60:	   |   movea.l 4(sp),a0
    be64:	   |   move.b d0,127(a0)
    be68:	   |   movea.l 4(sp),a0
    be6c:	   |   move.b 127(a0),d0
    be70:	   |   movea.l 4(sp),a0
    be74:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    be78:	   |   movea.l 4(sp),a0
    be7c:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    be80:	   |   movea.l 4(sp),a0
    be84:	   |   clr.b 130(a0)
			break;
    be88:	   |   nop
	}
}
    be8a:	   '-> nop
    be8c:	       rts

0000be8e <shufflePeople>:

void shufflePeople () {
    be8e:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    be92:	             move.l #118506,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    be9a:	             move.l 1ceea <allPeople>,d0
    bea0:	,----------- beq.w bf76 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    bea4:	|     ,----- bra.w bf66 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    bea8:	|  ,--|----> movea.l 16(sp),a0
    beac:	|  |  |      movea.l (a0),a0
    beae:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    beb4:	|  |  |      movea.l 16(sp),a0
    beb8:	|  |  |      movea.l (a0),a0
    beba:	|  |  |      move.l 118(a0),d0
    bebe:	|  |  |      moveq #1,d1
    bec0:	|  |  |      and.l d1,d0
    bec2:	|  |  |  ,-- beq.s beda <shufflePeople+0x4c>
    bec4:	|  |  |  |   move.l #1148846080,-(sp)
    beca:	|  |  |  |   move.l 16(sp),-(sp)
    bece:	|  |  |  |   jsr 1789c <__addsf3>
    bed4:	|  |  |  |   addq.l #8,sp
    bed6:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    beda:	|  |  |  '-> movea.l 16(sp),a0
    bede:	|  |  |      movea.l (a0),a0
    bee0:	|  |  |      movea.l 36(a0),a0
    bee4:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    beea:	|  |  |      movea.l 16(sp),a0
    beee:	|  |  |      movea.l (a0),a0
    bef0:	|  |  |      movea.l 36(a0),a0
    bef4:	|  |  |      move.l 118(a0),d0
    bef8:	|  |  |      moveq #1,d1
    befa:	|  |  |      and.l d1,d0
    befc:	|  |  |  ,-- beq.s bf14 <shufflePeople+0x86>
    befe:	|  |  |  |   move.l #1148846080,-(sp)
    bf04:	|  |  |  |   move.l 12(sp),-(sp)
    bf08:	|  |  |  |   jsr 1789c <__addsf3>
    bf0e:	|  |  |  |   addq.l #8,sp
    bf10:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bf14:	|  |  |  '-> move.l 8(sp),-(sp)
    bf18:	|  |  |      move.l 16(sp),-(sp)
    bf1c:	|  |  |      jsr 17c4c <__gtsf2>
    bf22:	|  |  |      addq.l #8,sp
    bf24:	|  |  |      tst.l d0
    bf26:	|  |  |  ,-- ble.s bf58 <shufflePeople+0xca>
			A = (*thisReference);
    bf28:	|  |  |  |   movea.l 16(sp),a0
    bf2c:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bf30:	|  |  |  |   movea.l 16(sp),a0
    bf34:	|  |  |  |   movea.l (a0),a0
    bf36:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bf3a:	|  |  |  |   movea.l (sp),a0
    bf3c:	|  |  |  |   move.l 36(a0),d0
    bf40:	|  |  |  |   movea.l 4(sp),a0
    bf44:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bf48:	|  |  |  |   movea.l (sp),a0
    bf4a:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bf50:	|  |  |  |   movea.l 16(sp),a0
    bf54:	|  |  |  |   move.l (sp),(a0)
    bf56:	|  |  +--|-- bra.s bf66 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bf58:	|  |  |  '-> movea.l 16(sp),a0
    bf5c:	|  |  |      move.l (a0),d0
    bf5e:	|  |  |      moveq #36,d1
    bf60:	|  |  |      add.l d0,d1
    bf62:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bf66:	|  |  '----> movea.l 16(sp),a0
    bf6a:	|  |         movea.l (a0),a0
    bf6c:	|  |         move.l 36(a0),d0
    bf70:	|  '-------- bne.w bea8 <shufflePeople+0x1a>
    bf74:	|        ,-- bra.s bf78 <shufflePeople+0xea>
	if (!allPeople) return;
    bf76:	'--------|-> nop
		}
	}
}
    bf78:	         '-> lea 20(sp),sp
    bf7c:	             rts

0000bf7e <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bf7e:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bf80:	       tst.l 8(sp)
    bf84:	   ,-- bgt.s bf8a <setCharacterWalkSpeed+0xc>
    bf86:	   |   clr.w d0
    bf88:	,--|-- bra.s bfa8 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bf8a:	|  '-> move.l 12(sp),-(sp)
    bf8e:	|      jsr a974 <findPerson>
    bf94:	|      addq.l #4,sp
    bf96:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    bf98:	|  ,-- bne.s bf9e <setCharacterWalkSpeed+0x20>
    bf9a:	|  |   clr.w d0
    bf9c:	+--|-- bra.s bfa8 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    bf9e:	|  '-> movea.l (sp),a0
    bfa0:	|      move.l 8(sp),28(a0)
	return TRUE;
    bfa6:	|      moveq #1,d0
}
    bfa8:	'----> addq.l #4,sp
    bfaa:	       rts

0000bfac <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    bfac:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    bfae:	       move.l 8(sp),-(sp)
    bfb2:	       jsr a974 <findPerson>
    bfb8:	       addq.l #4,sp
    bfba:	       move.l d0,(sp)
    if (thisPerson) {
    bfbc:	,----- beq.s bfdc <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    bfbe:	|      movea.l (sp),a0
    bfc0:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    bfc6:	|      moveq #2,d0
    bfc8:	|      and.l 12(sp),d0
    bfcc:	|  ,-- beq.s bfd8 <setPersonExtra+0x2c>
    bfce:	|  |   movea.l (sp),a0
    bfd0:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    bfd8:	|  '-> moveq #1,d0
    bfda:	|  ,-- bra.s bfde <setPersonExtra+0x32>
    }
    return FALSE;
    bfdc:	'--|-> clr.w d0
}
    bfde:	   '-> addq.l #4,sp
    bfe0:	       rts

0000bfe2 <setScale>:


void setScale (short int h, short int d) {
    bfe2:	subq.l #4,sp
    bfe4:	move.l 8(sp),d1
    bfe8:	move.l 12(sp),d0
    bfec:	move.w d1,d1
    bfee:	move.w d1,2(sp)
    bff2:	move.w d0,d0
    bff4:	move.w d0,(sp)
	scaleHorizon = h;
    bff6:	move.w 2(sp),1c81a <scaleHorizon>
	scaleDivide = d;
    bffe:	move.w (sp),1c81c <scaleDivide>
}
    c004:	nop
    c006:	addq.l #4,sp
    c008:	rts

0000c00a <setShown>:

void setShown (BOOL h, int ob) {
    c00a:	    subq.l #8,sp
    c00c:	    move.l 12(sp),d0
    c010:	    move.w d0,d0
    c012:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    c016:	    move.l 16(sp),-(sp)
    c01a:	    jsr a974 <findPerson>
    c020:	    addq.l #4,sp
    c022:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    c026:	,-- beq.s c032 <setShown+0x28>
    c028:	|   movea.l 4(sp),a0
    c02c:	|   move.w 2(sp),104(a0)
}
    c032:	'-> nop
    c034:	    addq.l #8,sp
    c036:	    rts

0000c038 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    c038:	       subq.l #8,sp
    c03a:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    c03c:	       movea.l 16(sp),a0
    c040:	       move.l 92(a0),d0
    c044:	       move.l d0,d1
    c046:	       addi.l #360,d1
    c04c:	       movea.l 16(sp),a0
    c050:	       move.l 96(a0),d0
    c054:	       move.l d1,d2
    c056:	       sub.l d0,d2
    c058:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    c05c:	       movea.l 16(sp),a0
    c060:	       move.l 122(a0),d0
    c064:	   ,-- beq.s c070 <spinStep+0x38>
    c066:	   |   movea.l 16(sp),a0
    c06a:	   |   move.l 122(a0),d0
    c06e:	,--|-- bra.s c08a <spinStep+0x52>
    c070:	|  '-> movea.l 16(sp),a0
    c074:	|      movea.l 80(a0),a0
    c078:	|      move.l 4(a0),d0
    c07c:	|      move.l d0,-(sp)
    c07e:	|      pea 168 <decodeFilename+0x50>
    c082:	|      jsr 180b8 <__divsi3>
    c088:	|      addq.l #8,sp
    c08a:	'----> move.l d0,4(sp)
	while (diff > 180) {
    c08e:	   ,-- bra.s c098 <spinStep+0x60>
		diff -= 360;
    c090:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    c098:	|  '-> cmpi.l #180,8(sp)
    c0a0:	'----- bgt.s c090 <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    c0a2:	       move.l 8(sp),d0
    c0a6:	       cmp.l 4(sp),d0
    c0aa:	   ,-- blt.s c0c8 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    c0ac:	   |   movea.l 16(sp),a0
    c0b0:	   |   move.l 92(a0),d0
    c0b4:	   |   sub.l 4(sp),d0
    c0b8:	   |   move.l d0,-(sp)
    c0ba:	   |   move.l 20(sp),-(sp)
    c0be:	   |   jsr c1a8 <turnMeAngle>
    c0c4:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    c0c6:	,--|-- bra.s c10e <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    c0c8:	|  '-> move.l 4(sp),d0
    c0cc:	|      neg.l d0
    c0ce:	|      cmp.l 8(sp),d0
    c0d2:	|  ,-- blt.s c0f0 <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    c0d4:	|  |   movea.l 16(sp),a0
    c0d8:	|  |   move.l 92(a0),d0
    c0dc:	|  |   add.l 4(sp),d0
    c0e0:	|  |   move.l d0,-(sp)
    c0e2:	|  |   move.l 20(sp),-(sp)
    c0e6:	|  |   jsr c1a8 <turnMeAngle>
    c0ec:	|  |   addq.l #8,sp
}
    c0ee:	+--|-- bra.s c10e <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    c0f0:	|  '-> movea.l 16(sp),a0
    c0f4:	|      move.l 96(a0),d0
    c0f8:	|      move.l d0,-(sp)
    c0fa:	|      move.l 20(sp),-(sp)
    c0fe:	|      jsr c1a8 <turnMeAngle>
    c104:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    c106:	|      movea.l 16(sp),a0
    c10a:	|      clr.w 66(a0)
}
    c10e:	'----> nop
    c110:	       move.l (sp)+,d2
    c112:	       addq.l #8,sp
    c114:	       rts

0000c116 <stopPerson>:


BOOL stopPerson (int o) {
    c116:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    c118:	       move.l 8(sp),-(sp)
    c11c:	       jsr a974 <findPerson>
    c122:	       addq.l #4,sp
    c124:	       move.l d0,(sp)
    if (moveMe)
    c126:	,----- beq.s c164 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    c128:	|      movea.l (sp),a0
    c12a:	|      move.l 68(a0),d0
    c12e:	+----- beq.s c164 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    c130:	|      movea.l (sp),a0
    c132:	|      move.l 68(a0),d0
    c136:	|      move.l d0,-(sp)
    c138:	|      jsr 5374 <abortFunction>
    c13e:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    c140:	|      movea.l (sp),a0
    c142:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    c146:	|      movea.l (sp),a0
    c148:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    c14c:	|      movea.l (sp),a0
    c14e:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    c152:	|      clr.l -(sp)
    c154:	|      move.l 4(sp),-(sp)
    c158:	|      jsr 4516 <setFrames>
    c15e:	|      addq.l #8,sp
            return TRUE;
    c160:	|      moveq #1,d0
    c162:	|  ,-- bra.s c166 <stopPerson+0x50>
        }
    return FALSE;
    c164:	'--|-> clr.w d0
}
    c166:	   '-> addq.l #4,sp
    c168:	       rts

0000c16a <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    c16a:	       subq.l #8,sp
	int total = 0;
    c16c:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c170:	       clr.l (sp)
    c172:	   ,-- bra.s c194 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    c174:	,--|-> movea.l 12(sp),a0
    c178:	|  |   movea.l 4(a0),a0
    c17c:	|  |   move.l (sp),d1
    c17e:	|  |   move.l d1,d0
    c180:	|  |   add.l d0,d0
    c182:	|  |   add.l d1,d0
    c184:	|  |   add.l d0,d0
    c186:	|  |   add.l d0,d0
    c188:	|  |   adda.l d0,a0
    c18a:	|  |   move.l 4(a0),d0
    c18e:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    c192:	|  |   addq.l #1,(sp)
    c194:	|  '-> movea.l 12(sp),a0
    c198:	|      move.l 8(a0),d0
    c19c:	|      cmp.l (sp),d0
    c19e:	'----- bgt.s c174 <timeForAnim+0xa>
	}
	return total;
    c1a0:	       move.l 4(sp),d0
}
    c1a4:	       addq.l #8,sp
    c1a6:	       rts

0000c1a8 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    c1a8:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    c1aa:	       movea.l 8(sp),a0
    c1ae:	       movea.l 80(a0),a0
    c1b2:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    c1b6:	       movea.l 8(sp),a0
    c1ba:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    c1c0:	       move.l (sp),-(sp)
    c1c2:	       pea b4 <_start+0xb4>
    c1c6:	       jsr 180b8 <__divsi3>
    c1cc:	       addq.l #8,sp
    c1ce:	       move.l d0,d1
    c1d0:	       addi.l #180,d1
    c1d6:	       movea.l 8(sp),a0
    c1da:	       move.l 100(a0),d0
    c1de:	       add.l d1,d0
    c1e0:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    c1e4:	   ,-- bra.s c1ee <turnMeAngle+0x46>
    c1e6:	,--|-> addi.l #-360,12(sp)
    c1ee:	|  '-> cmpi.l #359,12(sp)
    c1f6:	'----- bgt.s c1e6 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    c1f8:	       move.l (sp),-(sp)
    c1fa:	       move.l 16(sp),-(sp)
    c1fe:	       jsr 1803a <__mulsi3>
    c204:	       addq.l #8,sp
    c206:	       pea 168 <decodeFilename+0x50>
    c20a:	       move.l d0,-(sp)
    c20c:	       jsr 180b8 <__divsi3>
    c212:	       addq.l #8,sp
    c214:	       movea.l 8(sp),a0
    c218:	       move.l d0,106(a0)
}
    c21c:	       nop
    c21e:	       addq.l #4,sp
    c220:	       rts

0000c222 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    c222:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c224:	          move.l 8(sp),-(sp)
    c228:	          jsr a974 <findPerson>
    c22e:	          addq.l #4,sp
    c230:	          move.l d0,(sp)
    if (thisPerson) {
    c232:	,-------- beq.s c292 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    c234:	|         movea.l (sp),a0
    c236:	|         move.l 68(a0),d0
    c23a:	|     ,-- beq.s c24c <turnPersonToFace+0x2a>
    c23c:	|     |   movea.l (sp),a0
    c23e:	|     |   move.l 68(a0),d0
    c242:	|     |   move.l d0,-(sp)
    c244:	|     |   jsr 5374 <abortFunction>
    c24a:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    c24c:	|     '-> movea.l (sp),a0
    c24e:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    c252:	|         movea.l (sp),a0
    c254:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    c258:	|         movea.l (sp),a0
    c25a:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    c25e:	|         move.l 12(sp),-(sp)
    c262:	|         move.l 4(sp),-(sp)
    c266:	|         jsr c1a8 <turnMeAngle>
    c26c:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    c26e:	|         movea.l 1cdda <speech>,a0
    c274:	|         move.l (a0),d0
    c276:	|         cmp.l (sp),d0
    c278:	|  ,----- bne.s c27e <turnPersonToFace+0x5c>
    c27a:	|  |      moveq #2,d0
    c27c:	|  |  ,-- bra.s c280 <turnPersonToFace+0x5e>
    c27e:	|  '--|-> moveq #0,d0
    c280:	|     '-> move.l d0,-(sp)
    c282:	|         move.l 4(sp),-(sp)
    c286:	|         jsr 4516 <setFrames>
    c28c:	|         addq.l #8,sp
        return TRUE;
    c28e:	|         moveq #1,d0
    c290:	|     ,-- bra.s c294 <turnPersonToFace+0x72>
    }
    return FALSE;
    c292:	'-----|-> clr.w d0
}
    c294:	      '-> addq.l #4,sp
    c296:	          rts

0000c298 <walkAllPeople>:

void walkAllPeople() {
    c298:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    c29a:	             move.l 1ceea <allPeople>,(sp)

	while (thisPerson) {
    c2a0:	   ,-------- bra.s c310 <walkAllPeople+0x78>
		if (thisPerson->walking) {
    c2a2:	,--|-------> movea.l (sp),a0
    c2a4:	|  |         move.w 64(a0),d0
    c2a8:	|  |     ,-- beq.s c2bc <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    c2aa:	|  |     |   pea 1 <_start+0x1>
    c2ae:	|  |     |   move.l 4(sp),-(sp)
    c2b2:	|  |     |   jsr c31c <walkMe>
    c2b8:	|  |     |   addq.l #8,sp
    c2ba:	|  |  ,--|-- bra.s c2dc <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    c2bc:	|  |  |  '-> movea.l (sp),a0
    c2be:	|  |  |      move.w 66(a0),d0
    c2c2:	|  |  +----- beq.s c2dc <walkAllPeople+0x44>
			spinStep(thisPerson);
    c2c4:	|  |  |      move.l (sp),-(sp)
    c2c6:	|  |  |      jsr c038 <spinStep>
    c2cc:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    c2ce:	|  |  |      clr.l -(sp)
    c2d0:	|  |  |      move.l 4(sp),-(sp)
    c2d4:	|  |  |      jsr 4516 <setFrames>
    c2da:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    c2dc:	|  |  '----> movea.l (sp),a0
    c2de:	|  |         move.w 64(a0),d0
    c2e2:	|  |     ,-- bne.s c30a <walkAllPeople+0x72>
    c2e4:	|  |     |   movea.l (sp),a0
    c2e6:	|  |     |   move.w 66(a0),d0
    c2ea:	|  |     +-- bne.s c30a <walkAllPeople+0x72>
    c2ec:	|  |     |   movea.l (sp),a0
    c2ee:	|  |     |   move.l 68(a0),d0
    c2f2:	|  |     +-- beq.s c30a <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    c2f4:	|  |     |   movea.l (sp),a0
    c2f6:	|  |     |   move.l 68(a0),d0
    c2fa:	|  |     |   move.l d0,-(sp)
    c2fc:	|  |     |   jsr 74e6 <restartFunction>
    c302:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    c304:	|  |     |   movea.l (sp),a0
    c306:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    c30a:	|  |     '-> movea.l (sp),a0
    c30c:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    c310:	|  '-------> tst.l (sp)
    c312:	'----------- bne.s c2a2 <walkAllPeople+0xa>
	}
}
    c314:	             nop
    c316:	             nop
    c318:	             addq.l #4,sp
    c31a:	             rts

0000c31c <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c31c:	                lea -20(sp),sp
    c320:	                move.l d3,-(sp)
    c322:	                move.l d2,-(sp)
    c324:	                move.l 36(sp),d0
    c328:	                move.w d0,d0
    c32a:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c32e:	                cmpi.w #-1,10(sp)
    c334:	,-------------- bne.s c33c <walkMe+0x20>
    c336:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c33c:	>-------------> movea.l 32(sp),a0
    c340:	|               move.l 48(a0),d0
    c344:	|               move.l d0,-(sp)
    c346:	|               jsr 17ae0 <__floatsisf>
    c34c:	|               addq.l #4,sp
    c34e:	|               move.l d0,d1
    c350:	|               movea.l 32(sp),a0
    c354:	|               move.l (a0),d0
    c356:	|               move.l d0,-(sp)
    c358:	|               move.l d1,-(sp)
    c35a:	|               jsr 17dd4 <__subsf3>
    c360:	|               addq.l #8,sp
    c362:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c366:	|               movea.l 32(sp),a0
    c36a:	|               move.l 52(a0),d0
    c36e:	|               move.l d0,-(sp)
    c370:	|               jsr 17ae0 <__floatsisf>
    c376:	|               addq.l #4,sp
    c378:	|               move.l d0,d1
    c37a:	|               movea.l 32(sp),a0
    c37e:	|               move.l 4(a0),d0
    c382:	|               move.l d0,-(sp)
    c384:	|               move.l d1,-(sp)
    c386:	|               jsr 17dd4 <__subsf3>
    c38c:	|               addq.l #8,sp
    c38e:	|               move.l d0,-(sp)
    c390:	|               move.l d0,-(sp)
    c392:	|               jsr 1789c <__addsf3>
    c398:	|               addq.l #8,sp
    c39a:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c39e:	|               movea.l 32(sp),a0
    c3a2:	|               move.l 32(a0),d2
    c3a6:	|               movea.l 32(sp),a0
    c3aa:	|               move.l 28(a0),d0
    c3ae:	|               move.l d0,-(sp)
    c3b0:	|               jsr 17ae0 <__floatsisf>
    c3b6:	|               addq.l #4,sp
    c3b8:	|               move.l d0,-(sp)
    c3ba:	|               move.l d2,-(sp)
    c3bc:	|               jsr 17b92 <__mulsf3>
    c3c2:	|               addq.l #8,sp
    c3c4:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c3c8:	|               move.l 24(sp),-(sp)
    c3cc:	|               jsr 17a02 <__extendsfdf2>
    c3d2:	|               addq.l #4,sp
    c3d4:	|               move.l #-1717986918,-(sp)
    c3da:	|               move.l #1070176665,-(sp)
    c3e0:	|               move.l d1,-(sp)
    c3e2:	|               move.l d0,-(sp)
    c3e4:	|               jsr 17cb8 <__ltdf2>
    c3ea:	|               lea 16(sp),sp
    c3ee:	|               tst.l d0
    c3f0:	|           ,-- bge.s c3fa <walkMe+0xde>
    c3f2:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c3fa:	|           '-> move.l 20(sp),-(sp)
    c3fe:	|               jsr 17a78 <__fixsfsi>
    c404:	|               addq.l #4,sp
    c406:	|               move.l d0,-(sp)
    c408:	|               jsr 9564 <TF_abs>
    c40e:	|               addq.l #4,sp
    c410:	|               move.l d0,d2
    c412:	|               move.l 16(sp),-(sp)
    c416:	|               jsr 17a78 <__fixsfsi>
    c41c:	|               addq.l #4,sp
    c41e:	|               move.l d0,-(sp)
    c420:	|               jsr 9564 <TF_abs>
    c426:	|               addq.l #4,sp
    c428:	|               cmp.l d2,d0
    c42a:	|        ,----- bgt.s c44e <walkMe+0x132>
    c42c:	|        |      move.l 20(sp),-(sp)
    c430:	|        |      jsr 17a78 <__fixsfsi>
    c436:	|        |      addq.l #4,sp
    c438:	|        |      move.l d0,-(sp)
    c43a:	|        |      jsr 9564 <TF_abs>
    c440:	|        |      addq.l #4,sp
    c442:	|        |      move.l d0,-(sp)
    c444:	|        |      jsr 17ae0 <__floatsisf>
    c44a:	|        |      addq.l #4,sp
    c44c:	|        |  ,-- bra.s c46e <walkMe+0x152>
    c44e:	|        '--|-> move.l 16(sp),-(sp)
    c452:	|           |   jsr 17a78 <__fixsfsi>
    c458:	|           |   addq.l #4,sp
    c45a:	|           |   move.l d0,-(sp)
    c45c:	|           |   jsr 9564 <TF_abs>
    c462:	|           |   addq.l #4,sp
    c464:	|           |   move.l d0,-(sp)
    c466:	|           |   jsr 17ae0 <__floatsisf>
    c46c:	|           |   addq.l #4,sp
    c46e:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c472:	|               move.l 12(sp),-(sp)
    c476:	|               jsr 17a78 <__fixsfsi>
    c47c:	|               addq.l #4,sp
    c47e:	|               move.l d0,-(sp)
    c480:	|               jsr 9564 <TF_abs>
    c486:	|               addq.l #4,sp
    c488:	|               move.l d0,-(sp)
    c48a:	|               jsr 17ae0 <__floatsisf>
    c490:	|               addq.l #4,sp
    c492:	|               move.l d0,-(sp)
    c494:	|               move.l 28(sp),-(sp)
    c498:	|               jsr 17d06 <__ltsf2>
    c49e:	|               addq.l #8,sp
    c4a0:	|               tst.l d0
    c4a2:	|        ,----- bge.w c554 <walkMe+0x238>
			if (thisPerson->spinning) {
    c4a6:	|        |      movea.l 32(sp),a0
    c4aa:	|        |      move.w 66(a0),d0
    c4ae:	|        |  ,-- beq.s c4cc <walkMe+0x1b0>
				spinStep(thisPerson);
    c4b0:	|        |  |   move.l 32(sp),-(sp)
    c4b4:	|        |  |   jsr c038 <spinStep>
    c4ba:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c4bc:	|        |  |   pea 1 <_start+0x1>
    c4c0:	|        |  |   move.l 36(sp),-(sp)
    c4c4:	|        |  |   jsr 4516 <setFrames>
    c4ca:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c4cc:	|        |  '-> move.l 24(sp),-(sp)
    c4d0:	|        |      move.l 16(sp),-(sp)
    c4d4:	|        |      jsr 17996 <__divsf3>
    c4da:	|        |      addq.l #8,sp
    c4dc:	|        |      move.l d0,24(sp)
			if (move)
    c4e0:	|        |      tst.w 10(sp)
    c4e4:	|        |  ,-- beq.s c54e <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c4e6:	|        |  |   movea.l 32(sp),a0
    c4ea:	|        |  |   move.l 4(a0),d2
    c4ee:	|        |  |   move.l 24(sp),d0
    c4f2:	|        |  |   move.l d0,-(sp)
    c4f4:	|        |  |   move.l d0,-(sp)
    c4f6:	|        |  |   jsr 1789c <__addsf3>
    c4fc:	|        |  |   addq.l #8,sp
    c4fe:	|        |  |   move.l d0,-(sp)
    c500:	|        |  |   move.l 20(sp),-(sp)
    c504:	|        |  |   jsr 17996 <__divsf3>
    c50a:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c50c:	|        |  |   move.l d0,-(sp)
    c50e:	|        |  |   move.l d2,-(sp)
    c510:	|        |  |   jsr 1789c <__addsf3>
    c516:	|        |  |   addq.l #8,sp
    c518:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c51a:	|        |  |   movea.l 32(sp),a0
    c51e:	|        |  |   move.l (a0),d3
    c520:	|        |  |   move.l 24(sp),-(sp)
    c524:	|        |  |   move.l 24(sp),-(sp)
    c528:	|        |  |   jsr 17996 <__divsf3>
    c52e:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c530:	|        |  |   move.l d0,-(sp)
    c532:	|        |  |   move.l d3,-(sp)
    c534:	|        |  |   jsr 1789c <__addsf3>
    c53a:	|        |  |   addq.l #8,sp
    c53c:	|        |  |   move.l d2,-(sp)
    c53e:	|        |  |   move.l d0,-(sp)
    c540:	|        |  |   move.l 40(sp),-(sp)
    c544:	|        |  |   jsr b11e <moveAndScale>
    c54a:	|        |  |   lea 12(sp),sp
			return TRUE;
    c54e:	|        |  '-> moveq #1,d0
    c550:	|  ,-----|----- bra.w c602 <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c554:	|  |     '----> movea.l 32(sp),a0
    c558:	|  |            move.l 56(a0),d0
    c55c:	|  |            moveq #-1,d1
    c55e:	|  |            cmp.l d0,d1
    c560:	|  |        ,-- bne.s c598 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c562:	|  |        |   movea.l 32(sp),a0
    c566:	|  |        |   move.l 110(a0),d0
    c56a:	|  |        |   moveq #-1,d1
    c56c:	|  |        |   cmp.l d0,d1
    c56e:	|  |  ,-----|-- beq.s c5ac <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c570:	|  |  |     |   movea.l 32(sp),a0
    c574:	|  |  |     |   move.l 110(a0),d0
    c578:	|  |  |     |   movea.l 32(sp),a0
    c57c:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c580:	|  |  |     |   movea.l 32(sp),a0
    c584:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c58a:	|  |  |     |   move.l 32(sp),-(sp)
    c58e:	|  |  |     |   jsr c038 <spinStep>
    c594:	|  |  |     |   addq.l #4,sp
			}
			break;
    c596:	|  |  +-----|-- bra.s c5ac <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c598:	|  |  |     '-> move.l 32(sp),-(sp)
    c59c:	|  |  |         jsr 9cd6 <doBorderStuff>
    c5a2:	|  |  |         addq.l #4,sp
    c5a4:	|  |  |         tst.w d0
    c5a6:	|  |  |  ,----- beq.s c5b0 <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c5a8:	'--|--|--|----- bra.w c33c <walkMe+0x20>
			break;
    c5ac:	   |  '--|----> nop
    c5ae:	   |     |  ,-- bra.s c5b2 <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c5b0:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    c5b2:	   |        '-> movea.l 32(sp),a0
    c5b6:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c5ba:	   |            clr.l -(sp)
    c5bc:	   |            move.l 36(sp),-(sp)
    c5c0:	   |            jsr 4516 <setFrames>
    c5c6:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c5c8:	   |            movea.l 32(sp),a0
    c5cc:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c5d0:	   |            move.l d0,-(sp)
    c5d2:	   |            jsr 17ae0 <__floatsisf>
    c5d8:	   |            addq.l #4,sp
    c5da:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c5dc:	   |            movea.l 32(sp),a0
    c5e0:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c5e4:	   |            move.l d0,-(sp)
    c5e6:	   |            jsr 17ae0 <__floatsisf>
    c5ec:	   |            addq.l #4,sp
    c5ee:	   |            move.l d2,-(sp)
    c5f0:	   |            move.l d0,-(sp)
    c5f2:	   |            move.l 40(sp),-(sp)
    c5f6:	   |            jsr b11e <moveAndScale>
    c5fc:	   |            lea 12(sp),sp
	return FALSE;
    c600:	   |            clr.w d0
}
    c602:	   '----------> move.l (sp)+,d2
    c604:	                move.l (sp)+,d3
    c606:	                lea 20(sp),sp
    c60a:	                rts

0000c60c <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c60c:	       subq.l #8,sp
    c60e:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c610:	   ,-- bra.s c640 <clearStackLib+0x34>
		k = stackLib;
    c612:	,--|-> move.l 1cf16 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c61a:	|  |   movea.l 1cf16 <stackLib>,a0
    c620:	|  |   move.l 4(a0),d0
    c624:	|  |   move.l d0,1cf16 <stackLib>
		FreeVec(k);
    c62a:	|  |   move.l 8(sp),4(sp)
    c630:	|  |   move.l 1ce8a <SysBase>,d0
    c636:	|  |   movea.l d0,a6
    c638:	|  |   movea.l 4(sp),a1
    c63c:	|  |   jsr -690(a6)
	while (stackLib) {
    c640:	|  '-> move.l 1cf16 <stackLib>,d0
    c646:	'----- bne.s c612 <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c648:	       clr.l 1cf12 <stackLibTotal>
}
    c64e:	       nop
    c650:	       movea.l (sp)+,a6
    c652:	       addq.l #8,sp
    c654:	       rts

0000c656 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c656:	          lea -128(sp),sp
    c65a:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c65e:	      ,-- bra.s c670 <loadGame+0x1a>
    c660:	   ,--|-> move.l 1ce22 <allRunningFunctions>,d0
    c666:	   |  |   move.l d0,-(sp)
    c668:	   |  |   jsr 63a8 <finishFunction>
    c66e:	   |  |   addq.l #4,sp
    c670:	   |  '-> move.l 1ce22 <allRunningFunctions>,d0
    c676:	   '----- bne.s c660 <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c678:	          pea 1cf1a <ssgVersion>
    c67e:	          pea 19782 <PutChar+0x1632>
    c684:	          pea 41 <_start+0x41>
    c688:	          pea 53 <_start+0x53>
    c68c:	          move.l 160(sp),-(sp)
    c690:	          jsr 70ce <openAndVerify>
    c696:	          lea 20(sp),sp
    c69a:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c69e:	      ,-- bne.s c6a6 <loadGame+0x50>
    c6a0:	      |   clr.w d0
    c6a2:	,-----|-- bra.w c94c <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c6a6:	|     '-> move.l 112(sp),108(sp)
    c6ac:	|         lea 140(sp),a0
    c6b0:	|         lea -126(a0),a0
    c6b4:	|         move.l a0,120(sp)
    c6b8:	|         moveq #8,d0
    c6ba:	|         move.l d0,116(sp)
    c6be:	|         move.l 1ce92 <DOSBase>,d0
    c6c4:	|         movea.l d0,a6
    c6c6:	|         move.l 108(sp),d1
    c6ca:	|         move.l 120(sp),d2
    c6ce:	|         move.l 116(sp),d3
    c6d2:	|         jsr -42(a6)
    c6d6:	|         move.l d0,132(sp)
    c6da:	|         move.l 132(sp),d0
    c6de:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c6e2:	|         moveq #8,d0
    c6e4:	|         cmp.l 128(sp),d0
    c6e8:	|     ,-- beq.s c6f8 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c6ea:	|     |   pea 197a3 <PutChar+0x1653>
    c6f0:	|     |   jsr 176ae <KPrintF>
    c6f6:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c6f8:	|     '-> move.l 14(sp),d1
    c6fc:	|         move.l 1ce2c <fileTime>,d0
    c702:	|         cmp.l d1,d0
    c704:	|     ,-- bne.s c714 <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c706:	|     |   move.l 18(sp),d1
    c70a:	|     |   move.l 1ce30 <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c710:	|     |   cmp.l d1,d0
    c712:	|  ,--|-- beq.s c734 <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c714:	|  |  '-> move.l 144(sp),-(sp)
    c718:	|  |      pea 197bf <PutChar+0x166f>
    c71e:	|  |      pea 19886 <PutChar+0x1736>
    c724:	|  |      jsr 176ae <KPrintF>
    c72a:	|  |      lea 12(sp),sp
		return FALSE; 
    c72e:	|  |      clr.w d0
    c730:	+--|----- bra.w c94c <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c734:	|  '----> move.l 112(sp),124(sp)
    c73a:	|         move.l 1ce92 <DOSBase>,d0
    c740:	|         movea.l d0,a6
    c742:	|         move.l 124(sp),d1
    c746:	|         jsr -306(a6)
    c74a:	|         move.l d0,136(sp)
    c74e:	|         move.l 136(sp),d0
    c752:	|         move.l d0,d0
    c754:	|         move.w d0,1c6e4 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c75a:	|         move.l 112(sp),100(sp)
    c760:	|         move.l 1ce92 <DOSBase>,d0
    c766:	|         movea.l d0,a6
    c768:	|         move.l 100(sp),d1
    c76c:	|         jsr -306(a6)
    c770:	|         move.l d0,96(sp)
    c774:	|         move.l 96(sp),d0
    c778:	|         move.l d0,d0
    c77a:	|         move.w d0,1ce2a <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c780:	|         move.l 112(sp),92(sp)
    c786:	|         move.l 1ce92 <DOSBase>,d0
    c78c:	|         movea.l d0,a6
    c78e:	|         move.l 92(sp),d1
    c792:	|         jsr -306(a6)
    c796:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c79a:	|         move.l 112(sp),84(sp)
    c7a0:	|         move.l 1ce92 <DOSBase>,d0
    c7a6:	|         movea.l d0,a6
    c7a8:	|         move.l 84(sp),d1
    c7ac:	|         jsr -306(a6)
    c7b0:	|         move.l d0,80(sp)
    c7b4:	|         move.l 80(sp),d0
    c7b8:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c7bc:	|     ,-- beq.s c7f0 <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c7be:	|     |   move.l 112(sp),-(sp)
    c7c2:	|     |   jsr 6bc <get2bytes>
    c7c8:	|     |   addq.l #4,sp
    c7ca:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c7ce:	|     |   move.l 112(sp),-(sp)
    c7d2:	|     |   jsr 6bc <get2bytes>
    c7d8:	|     |   addq.l #4,sp
    c7da:	|     |   move.l d0,1cf7e <fontHeight>
		charOrder = readString(fp);		
    c7e0:	|     |   move.l 112(sp),-(sp)
    c7e4:	|     |   jsr b02 <readString>
    c7ea:	|     |   addq.l #4,sp
    c7ec:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c7f0:	|     '-> move.l 104(sp),70(sp)
    c7f6:	|         move.l 1ce8a <SysBase>,d0
    c7fc:	|         movea.l d0,a6
    c7fe:	|         movea.l 70(sp),a1
    c802:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c806:	|         move.l 112(sp),-(sp)
    c80a:	|         jsr 854 <getSigned>
    c810:	|         addq.l #4,sp
    c812:	|         move.w d0,1cd8c <fontSpace>

	killAllPeople ();
    c818:	|         jsr ad88 <killAllPeople>
	killAllRegions ();
    c81e:	|         jsr 15ebe <killAllRegions>

	int camerX = get2bytes (fp);
    c824:	|         move.l 112(sp),-(sp)
    c828:	|         jsr 6bc <get2bytes>
    c82e:	|         addq.l #4,sp
    c830:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c834:	|         move.l 112(sp),-(sp)
    c838:	|         jsr 6bc <get2bytes>
    c83e:	|         addq.l #4,sp
    c840:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c844:	|         move.l 112(sp),-(sp)
    c848:	|         jsr 7d8 <getFloat>
    c84e:	|         addq.l #4,sp
    c850:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c854:	|         move.l 112(sp),54(sp)
    c85a:	|         move.l 1ce92 <DOSBase>,d0
    c860:	|         movea.l d0,a6
    c862:	|         move.l 54(sp),d1
    c866:	|         jsr -306(a6)
    c86a:	|         move.l d0,50(sp)
    c86e:	|         move.l 50(sp),d0
    c872:	|         move.l d0,d0
    c874:	|         move.b d0,1c802 <brightnessLevel>

	loadHandlers (fp);
    c87a:	|         move.l 112(sp),-(sp)
    c87e:	|         jsr 702e <loadHandlers>
    c884:	|         addq.l #4,sp
	loadRegions (fp);
    c886:	|         move.l 112(sp),-(sp)
    c88a:	|         jsr 15f1a <loadRegions>
    c890:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c892:	|         moveq #12,d0
    c894:	|         move.l d0,46(sp)
    c898:	|         clr.l 42(sp)
    c89c:	|         move.l 1ce8a <SysBase>,d0
    c8a2:	|         movea.l d0,a6
    c8a4:	|         move.l 46(sp),d0
    c8a8:	|         move.l 42(sp),d1
    c8ac:	|         jsr -684(a6)
    c8b0:	|         move.l d0,38(sp)
    c8b4:	|         move.l 38(sp),d0
    c8b8:	|         move.l d0,1cd8e <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c8be:	|         move.l 1cd8e <mouseCursorAnim>,d0
    c8c4:	|     ,-- bne.s c8d8 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c8c6:	|     |   pea 19890 <PutChar+0x1740>
    c8cc:	|     |   jsr 176ae <KPrintF>
    c8d2:	|     |   addq.l #4,sp
		return FALSE;
    c8d4:	|     |   clr.w d0
    c8d6:	+-----|-- bra.s c94c <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c8d8:	|     '-> jsr d77c <nosnapshot>
	if (FGetC (fp)) {
    c8de:	|         move.l 112(sp),34(sp)
    c8e4:	|         move.l 1ce92 <DOSBase>,d0
    c8ea:	|         movea.l d0,a6
    c8ec:	|         move.l 34(sp),d1
    c8f0:	|         jsr -306(a6)
    c8f4:	|         move.l d0,30(sp)
    c8f8:	|         move.l 30(sp),d0
    c8fc:	|     ,-- beq.s c912 <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c8fe:	|     |   move.l 112(sp),-(sp)
    c902:	|     |   jsr d7fc <restoreSnapshot>
    c908:	|     |   addq.l #4,sp
    c90a:	|     |   tst.w d0
    c90c:	|     +-- bne.s c912 <loadGame+0x2bc>
    c90e:	|     |   clr.w d0
    c910:	+-----|-- bra.s c94c <loadGame+0x2f6>
	}

	Close (fp);
    c912:	|     '-> move.l 112(sp),26(sp)
    c918:	|         move.l 1ce92 <DOSBase>,d0
    c91e:	|         movea.l d0,a6
    c920:	|         move.l 26(sp),d1
    c924:	|         jsr -36(a6)
    c928:	|         move.l d0,22(sp)
	clearStackLib ();
    c92c:	|         jsr c60c <clearStackLib>

	cameraX = camerX;
    c932:	|         move.l 66(sp),1cf40 <cameraX>
	cameraY = camerY;
    c93a:	|         move.l 62(sp),1cf44 <cameraY>
	cameraZoom = camerZ;
    c942:	|         move.l 58(sp),1c826 <cameraZoom>

	return TRUE;
    c94a:	|         moveq #1,d0
}
    c94c:	'-------> movem.l (sp)+,d2-d3/a6
    c950:	          lea 128(sp),sp
    c954:	          rts

0000c956 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c956:	   ,-> lea -64(sp),sp
    c95a:	   |   move.l a6,-(sp)
    c95c:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c95e:	   |   movea.l 76(sp),a0
    c962:	   |   move.l (a0),d0
    c964:	   |   move.l 80(sp),-(sp)
    c968:	   |   move.l d0,-(sp)
    c96a:	   |   jsr 8d0 <put2bytes>
    c970:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c972:	   |   movea.l 76(sp),a0
    c976:	   |   move.l 40(a0),d0
    c97a:	,--|-- beq.s c9b6 <saveFunction+0x60>
		FPutC (fp, 1);
    c97c:	|  |   move.l 80(sp),52(sp)
    c982:	|  |   moveq #1,d0
    c984:	|  |   move.l d0,48(sp)
    c988:	|  |   move.l 1ce92 <DOSBase>,d0
    c98e:	|  |   movea.l d0,a6
    c990:	|  |   move.l 52(sp),d1
    c994:	|  |   move.l 48(sp),d2
    c998:	|  |   jsr -312(a6)
    c99c:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c9a0:	|  |   movea.l 76(sp),a0
    c9a4:	|  |   move.l 40(a0),d0
    c9a8:	|  |   move.l 80(sp),-(sp)
    c9ac:	|  |   move.l d0,-(sp)
    c9ae:	|  '-- jsr c956 <saveFunction>(pc)
    c9b2:	|      addq.l #8,sp
    c9b4:	|  ,-- bra.s c9d8 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c9b6:	'--|-> move.l 80(sp),64(sp)
    c9bc:	   |   clr.l 60(sp)
    c9c0:	   |   move.l 1ce92 <DOSBase>,d0
    c9c6:	   |   movea.l d0,a6
    c9c8:	   |   move.l 64(sp),d1
    c9cc:	   |   move.l 60(sp),d2
    c9d0:	   |   jsr -312(a6)
    c9d4:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c9d8:	   '-> movea.l 76(sp),a0
    c9dc:	       move.l 12(a0),d0
    c9e0:	       move.l 80(sp),-(sp)
    c9e4:	       move.l d0,-(sp)
    c9e6:	       jsr 958 <put4bytes>
    c9ec:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c9ee:	       movea.l 76(sp),a0
    c9f2:	       move.l 36(a0),d0
    c9f6:	       move.l 80(sp),-(sp)
    c9fa:	       move.l d0,-(sp)
    c9fc:	       jsr 8d0 <put2bytes>
    ca02:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    ca04:	       move.l 80(sp),40(sp)
    ca0a:	       movea.l 76(sp),a0
    ca0e:	       move.w 54(a0),d0
    ca12:	       movea.w d0,a0
    ca14:	       move.l a0,36(sp)
    ca18:	       move.l 1ce92 <DOSBase>,d0
    ca1e:	       movea.l d0,a6
    ca20:	       move.l 40(sp),d1
    ca24:	       move.l 36(sp),d2
    ca28:	       jsr -312(a6)
    ca2c:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    ca30:	       move.l 80(sp),28(sp)
    ca36:	       movea.l 76(sp),a0
    ca3a:	       move.w 48(a0),d0
    ca3e:	       movea.w d0,a0
    ca40:	       move.l a0,24(sp)
    ca44:	       move.l 1ce92 <DOSBase>,d0
    ca4a:	       movea.l d0,a6
    ca4c:	       move.l 28(sp),d1
    ca50:	       move.l 24(sp),d2
    ca54:	       jsr -312(a6)
    ca58:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    ca5c:	       move.l 80(sp),16(sp)
    ca62:	       movea.l 76(sp),a0
    ca66:	       move.w 50(a0),d0
    ca6a:	       movea.w d0,a0
    ca6c:	       move.l a0,12(sp)
    ca70:	       move.l 1ce92 <DOSBase>,d0
    ca76:	       movea.l d0,a6
    ca78:	       move.l 16(sp),d1
    ca7c:	       move.l 12(sp),d2
    ca80:	       jsr -312(a6)
    ca84:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    ca88:	       moveq #28,d0
    ca8a:	       add.l 76(sp),d0
    ca8e:	       move.l 80(sp),-(sp)
    ca92:	       move.l d0,-(sp)
    ca94:	       jsr d1ae <saveVariable>
    ca9a:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    ca9c:	       movea.l 76(sp),a0
    caa0:	       move.b 56(a0),d0
    caa4:	   ,-- beq.s cab4 <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    caa6:	   |   pea 198b1 <PutChar+0x1761>
    caac:	   |   jsr 176ae <KPrintF>
    cab2:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    cab4:	   '-> movea.l 76(sp),a0
    cab8:	       move.l 24(a0),d0
    cabc:	       move.l 80(sp),-(sp)
    cac0:	       move.l d0,-(sp)
    cac2:	       jsr d022 <saveStack>
    cac8:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    caca:	       clr.l 68(sp)
    cace:	   ,-- bra.s caf2 <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    cad0:	,--|-> movea.l 76(sp),a0
    cad4:	|  |   move.l 20(a0),d1
    cad8:	|  |   move.l 68(sp),d0
    cadc:	|  |   lsl.l #3,d0
    cade:	|  |   add.l d1,d0
    cae0:	|  |   move.l 80(sp),-(sp)
    cae4:	|  |   move.l d0,-(sp)
    cae6:	|  |   jsr d1ae <saveVariable>
    caec:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    caee:	|  |   addq.l #1,68(sp)
    caf2:	|  '-> movea.l 76(sp),a0
    caf6:	|      move.l 8(a0),d0
    cafa:	|      cmp.l 68(sp),d0
    cafe:	'----- bgt.s cad0 <saveFunction+0x17a>
	}
}
    cb00:	       nop
    cb02:	       nop
    cb04:	       move.l (sp)+,d2
    cb06:	       movea.l (sp)+,a6
    cb08:	       lea 64(sp),sp
    cb0c:	       rts

0000cb0e <saveGame>:

BOOL saveGame (char * fname) {
    cb0e:	          lea -248(sp),sp
    cb12:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    cb16:	          move.l 264(sp),244(sp)
    cb1c:	          move.l #1006,240(sp)
    cb24:	          move.l 1ce92 <DOSBase>,d0
    cb2a:	          movea.l d0,a6
    cb2c:	          move.l 244(sp),d1
    cb30:	          move.l 240(sp),d2
    cb34:	          jsr -30(a6)
    cb38:	          move.l d0,236(sp)
    cb3c:	          move.l 236(sp),d0
    cb40:	          move.l d0,232(sp)
	if (fp == NULL) {
    cb44:	      ,-- bne.s cb5a <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    cb46:	      |   pea 198d3 <PutChar+0x1783>
    cb4c:	      |   jsr 176ae <KPrintF>
    cb52:	      |   addq.l #4,sp
		return FALSE;
    cb54:	      |   clr.w d0
    cb56:	,-----|-- bra.w d018 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    cb5a:	|     '-> move.l 232(sp),228(sp)
    cb60:	|         move.l #104688,224(sp)
    cb68:	|         moveq #6,d0
    cb6a:	|         move.l d0,220(sp)
    cb6e:	|         move.l 1ce92 <DOSBase>,d0
    cb74:	|         movea.l d0,a6
    cb76:	|         move.l 228(sp),d1
    cb7a:	|         move.l 224(sp),d2
    cb7e:	|         move.l 220(sp),d3
    cb82:	|         jsr -48(a6)
    cb86:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    cb8a:	|         move.l 232(sp),212(sp)
    cb90:	|         clr.l 208(sp)
    cb94:	|         move.l 1ce92 <DOSBase>,d0
    cb9a:	|         movea.l d0,a6
    cb9c:	|         move.l 212(sp),d1
    cba0:	|         move.l 208(sp),d2
    cba4:	|         jsr -312(a6)
    cba8:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    cbac:	|         move.l 232(sp),200(sp)
    cbb2:	|         clr.l 196(sp)
    cbb6:	|         move.l 1ce92 <DOSBase>,d0
    cbbc:	|         movea.l d0,a6
    cbbe:	|         move.l 200(sp),d1
    cbc2:	|         move.l 196(sp),d2
    cbc6:	|         jsr -312(a6)
    cbca:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    cbce:	|         move.l 232(sp),188(sp)
    cbd4:	|         moveq #2,d0
    cbd6:	|         move.l d0,184(sp)
    cbda:	|         move.l 1ce92 <DOSBase>,d0
    cbe0:	|         movea.l d0,a6
    cbe2:	|         move.l 188(sp),d1
    cbe6:	|         move.l 184(sp),d2
    cbea:	|         jsr -312(a6)
    cbee:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    cbf2:	|         move.l 232(sp),176(sp)
    cbf8:	|         moveq #2,d0
    cbfa:	|         move.l d0,172(sp)
    cbfe:	|         move.l 1ce92 <DOSBase>,d0
    cc04:	|         movea.l d0,a6
    cc06:	|         move.l 176(sp),d1
    cc0a:	|         move.l 172(sp),d2
    cc0e:	|         jsr -312(a6)
    cc12:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    cc16:	|         move.l 232(sp),164(sp)
    cc1c:	|         move.l #118316,160(sp)
    cc24:	|         moveq #8,d0
    cc26:	|         move.l d0,156(sp)
    cc2a:	|         move.l 1ce92 <DOSBase>,d0
    cc30:	|         movea.l d0,a6
    cc32:	|         move.l 164(sp),d1
    cc36:	|         move.l 160(sp),d2
    cc3a:	|         move.l 156(sp),d3
    cc3e:	|         jsr -48(a6)
    cc42:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    cc46:	|         move.l 232(sp),148(sp)
    cc4c:	|         move.w 1c6e4 <allowAnyFilename>,d0
    cc52:	|         movea.w d0,a0
    cc54:	|         move.l a0,144(sp)
    cc58:	|         move.l 1ce92 <DOSBase>,d0
    cc5e:	|         movea.l d0,a6
    cc60:	|         move.l 148(sp),d1
    cc64:	|         move.l 144(sp),d2
    cc68:	|         jsr -312(a6)
    cc6c:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    cc70:	|         move.l 232(sp),136(sp)
    cc76:	|         move.w 1ce2a <captureAllKeys>,d0
    cc7c:	|         movea.w d0,a0
    cc7e:	|         move.l a0,132(sp)
    cc82:	|         move.l 1ce92 <DOSBase>,d0
    cc88:	|         movea.l d0,a6
    cc8a:	|         move.l 136(sp),d1
    cc8e:	|         move.l 132(sp),d2
    cc92:	|         jsr -312(a6)
    cc96:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    cc9a:	|         move.l 232(sp),124(sp)
    cca0:	|         moveq #1,d0
    cca2:	|         move.l d0,120(sp)
    cca6:	|         move.l 1ce92 <DOSBase>,d0
    ccac:	|         movea.l d0,a6
    ccae:	|         move.l 124(sp),d1
    ccb2:	|         move.l 120(sp),d2
    ccb6:	|         jsr -312(a6)
    ccba:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    ccbe:	|         move.l 232(sp),112(sp)
    ccc4:	|         move.l 1cf8e <fontTableSize>,d0
    ccca:	|         sgt d0
    cccc:	|         neg.b d0
    ccce:	|         move.b d0,d0
    ccd0:	|         andi.l #255,d0
    ccd6:	|         move.l d0,108(sp)
    ccda:	|         move.l 1ce92 <DOSBase>,d0
    cce0:	|         movea.l d0,a6
    cce2:	|         move.l 112(sp),d1
    cce6:	|         move.l 108(sp),d2
    ccea:	|         jsr -312(a6)
    ccee:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    ccf2:	|         move.l 1cf8e <fontTableSize>,d0
    ccf8:	|     ,-- ble.s cd36 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    ccfa:	|     |   move.l 1cf82 <loadedFontNum>,d0
    cd00:	|     |   move.l 232(sp),-(sp)
    cd04:	|     |   move.l d0,-(sp)
    cd06:	|     |   jsr 8d0 <put2bytes>
    cd0c:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    cd0e:	|     |   move.l 1cf7e <fontHeight>,d0
    cd14:	|     |   move.l 232(sp),-(sp)
    cd18:	|     |   move.l d0,-(sp)
    cd1a:	|     |   jsr 8d0 <put2bytes>
    cd20:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    cd22:	|     |   move.l 1cf86 <fontOrderString>,d0
    cd28:	|     |   move.l 232(sp),-(sp)
    cd2c:	|     |   move.l d0,-(sp)
    cd2e:	|     |   jsr bd8 <writeString>
    cd34:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    cd36:	|     '-> move.w 1cd8c <fontSpace>,d0
    cd3c:	|         movea.w d0,a0
    cd3e:	|         move.l 232(sp),-(sp)
    cd42:	|         move.l a0,-(sp)
    cd44:	|         jsr a9c <putSigned>
    cd4a:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    cd4c:	|         move.l 1cf40 <cameraX>,d0
    cd52:	|         move.l 232(sp),-(sp)
    cd56:	|         move.l d0,-(sp)
    cd58:	|         jsr 8d0 <put2bytes>
    cd5e:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    cd60:	|         move.l 1cf44 <cameraY>,d0
    cd66:	|         move.l 232(sp),-(sp)
    cd6a:	|         move.l d0,-(sp)
    cd6c:	|         jsr 8d0 <put2bytes>
    cd72:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    cd74:	|         move.l 1c826 <cameraZoom>,d0
    cd7a:	|         move.l 232(sp),-(sp)
    cd7e:	|         move.l d0,-(sp)
    cd80:	|         jsr a46 <putFloat>
    cd86:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    cd88:	|         move.l 232(sp),100(sp)
    cd8e:	|         move.b 1c802 <brightnessLevel>,d0
    cd94:	|         move.b d0,d0
    cd96:	|         andi.l #255,d0
    cd9c:	|         move.l d0,96(sp)
    cda0:	|         move.l 1ce92 <DOSBase>,d0
    cda6:	|         movea.l d0,a6
    cda8:	|         move.l 100(sp),d1
    cdac:	|         move.l 96(sp),d2
    cdb0:	|         jsr -312(a6)
    cdb4:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    cdb8:	|         move.l 232(sp),-(sp)
    cdbc:	|         jsr 7618 <saveHandlers>
    cdc2:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    cdc4:	|         move.l 232(sp),-(sp)
    cdc8:	|         jsr 160d4 <saveRegions>
    cdce:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    cdd0:	|         move.l 1cd8e <mouseCursorAnim>,d0
    cdd6:	|         move.l 232(sp),-(sp)
    cdda:	|         move.l d0,-(sp)
    cddc:	|         jsr b332 <saveAnim>
    cde2:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    cde4:	|         move.l 1cd92 <mouseCursorFrameNum>,d0
    cdea:	|         move.l 232(sp),-(sp)
    cdee:	|         move.l d0,-(sp)
    cdf0:	|         jsr 8d0 <put2bytes>
    cdf6:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    cdf8:	|         move.l 1ce22 <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    ce00:	|         clr.l 248(sp)
	while (thisFunction) {
    ce04:	|     ,-- bra.s ce14 <saveGame+0x306>
		countFunctions ++;
    ce06:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    ce0a:	|  |  |   movea.l 252(sp),a0
    ce0e:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ce14:	|  |  '-> tst.l 252(sp)
    ce18:	|  '----- bne.s ce06 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    ce1a:	|         move.l 232(sp),-(sp)
    ce1e:	|         move.l 252(sp),-(sp)
    ce22:	|         jsr 8d0 <put2bytes>
    ce28:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    ce2a:	|         move.l 1ce22 <allRunningFunctions>,252(sp)
	while (thisFunction) {
    ce32:	|     ,-- bra.s ce4e <saveGame+0x340>
		saveFunction (thisFunction, fp);
    ce34:	|  ,--|-> move.l 232(sp),-(sp)
    ce38:	|  |  |   move.l 256(sp),-(sp)
    ce3c:	|  |  |   jsr c956 <saveFunction>
    ce42:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    ce44:	|  |  |   movea.l 252(sp),a0
    ce48:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ce4e:	|  |  '-> tst.l 252(sp)
    ce52:	|  '----- bne.s ce34 <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    ce54:	|         clr.l 256(sp)
    ce58:	|     ,-- bra.s ce7a <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    ce5a:	|  ,--|-> move.l 1ce38 <globalVars>,d1
    ce60:	|  |  |   move.l 256(sp),d0
    ce64:	|  |  |   lsl.l #3,d0
    ce66:	|  |  |   add.l d1,d0
    ce68:	|  |  |   move.l 232(sp),-(sp)
    ce6c:	|  |  |   move.l d0,-(sp)
    ce6e:	|  |  |   jsr d1ae <saveVariable>
    ce74:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    ce76:	|  |  |   addq.l #1,256(sp)
    ce7a:	|  |  '-> move.l 1ce62 <numGlobals>,d0
    ce80:	|  |      cmp.l 256(sp),d0
    ce84:	|  '----- bgt.s ce5a <saveGame+0x34c>
	}

	savePeople (fp);
    ce86:	|         move.l 232(sp),-(sp)
    ce8a:	|         jsr b45a <savePeople>
    ce90:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    ce92:	|         movea.l 1cfa2 <currentFloor>,a0
    ce98:	|         move.l 8(a0),d0
    ce9c:	|  ,----- beq.s ceda <saveGame+0x3cc>
		FPutC (fp, 1);
    ce9e:	|  |      move.l 232(sp),76(sp)
    cea4:	|  |      moveq #1,d0
    cea6:	|  |      move.l d0,72(sp)
    ceaa:	|  |      move.l 1ce92 <DOSBase>,d0
    ceb0:	|  |      movea.l d0,a6
    ceb2:	|  |      move.l 76(sp),d1
    ceb6:	|  |      move.l 72(sp),d2
    ceba:	|  |      jsr -312(a6)
    cebe:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cec2:	|  |      movea.l 1cfa2 <currentFloor>,a0
    cec8:	|  |      move.l (a0),d0
    ceca:	|  |      move.l 232(sp),-(sp)
    cece:	|  |      move.l d0,-(sp)
    ced0:	|  |      jsr 8d0 <put2bytes>
    ced6:	|  |      addq.l #8,sp
    ced8:	|  |  ,-- bra.s cefc <saveGame+0x3ee>
	} else FPutC (fp, 0);
    ceda:	|  '--|-> move.l 232(sp),88(sp)
    cee0:	|     |   clr.l 84(sp)
    cee4:	|     |   move.l 1ce92 <DOSBase>,d0
    ceea:	|     |   movea.l d0,a6
    ceec:	|     |   move.l 88(sp),d1
    cef0:	|     |   move.l 84(sp),d2
    cef4:	|     |   jsr -312(a6)
    cef8:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cefc:	|     '-> move.l 232(sp),64(sp)
    cf02:	|         move.l 1cf54 <speechMode>,60(sp)
    cf0a:	|         move.l 1ce92 <DOSBase>,d0
    cf10:	|         movea.l d0,a6
    cf12:	|         move.l 64(sp),d1
    cf16:	|         move.l 60(sp),d2
    cf1a:	|         jsr -312(a6)
    cf1e:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cf22:	|         move.b 1cd62 <fadeMode>,d0
    cf28:	|         move.b d0,d0
    cf2a:	|         andi.l #255,d0
    cf30:	|         move.l d0,52(sp)
    cf34:	|         move.l 232(sp),48(sp)
    cf3a:	|         move.l 1ce92 <DOSBase>,d0
    cf40:	|         movea.l d0,a6
    cf42:	|         move.l 52(sp),d1
    cf46:	|         move.l 48(sp),d2
    cf4a:	|         jsr -312(a6)
    cf4e:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    cf52:	|         move.l 1cdda <speech>,d0
    cf58:	|         move.l 232(sp),-(sp)
    cf5c:	|         move.l d0,-(sp)
    cf5e:	|         jsr 43ca <saveSpeech>
    cf64:	|         addq.l #8,sp
	saveStatusBars (fp);
    cf66:	|         move.l 232(sp),-(sp)
    cf6a:	|         jsr 878c <saveStatusBars>
    cf70:	|         addq.l #4,sp
	saveSounds (fp);
    cf72:	|         move.l 232(sp),-(sp)
    cf76:	|         jsr d520 <saveSounds>
    cf7c:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cf7e:	|         move.w 1cf3e <saveEncoding>,d0
    cf84:	|         move.w d0,d0
    cf86:	|         andi.l #65535,d0
    cf8c:	|         move.l 232(sp),-(sp)
    cf90:	|         move.l d0,-(sp)
    cf92:	|         jsr 8d0 <put2bytes>
    cf98:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    cf9a:	|         move.l 1cf30 <parallaxStuff>,d0
    cfa0:	|         move.l 232(sp),-(sp)
    cfa4:	|         move.l d0,-(sp)
    cfa6:	|         jsr d822 <saveParallaxRecursive>
    cfac:	|         addq.l #8,sp
	FPutC (fp, 0);
    cfae:	|         move.l 232(sp),40(sp)
    cfb4:	|         clr.l 36(sp)
    cfb8:	|         move.l 1ce92 <DOSBase>,d0
    cfbe:	|         movea.l d0,a6
    cfc0:	|         move.l 40(sp),d1
    cfc4:	|         move.l 36(sp),d2
    cfc8:	|         jsr -312(a6)
    cfcc:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    cfd0:	|         move.l 232(sp),28(sp)
    cfd6:	|         move.l 1c808 <languageNum>,24(sp)
    cfde:	|         move.l 1ce92 <DOSBase>,d0
    cfe4:	|         movea.l d0,a6
    cfe6:	|         move.l 28(sp),d1
    cfea:	|         move.l 24(sp),d2
    cfee:	|         jsr -312(a6)
    cff2:	|         move.l d0,20(sp)

	Close(fp);
    cff6:	|         move.l 232(sp),16(sp)
    cffc:	|         move.l 1ce92 <DOSBase>,d0
    d002:	|         movea.l d0,a6
    d004:	|         move.l 16(sp),d1
    d008:	|         jsr -36(a6)
    d00c:	|         move.l d0,12(sp)
	clearStackLib ();
    d010:	|         jsr c60c <clearStackLib>
	return TRUE;
    d016:	|         moveq #1,d0
}
    d018:	'-------> movem.l (sp)+,d2-d3/a6
    d01c:	          lea 248(sp),sp
    d020:	          rts

0000d022 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    d022:	       lea -12(sp),sp
	int elements = 0;
    d026:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    d02a:	       move.l 16(sp),(sp)
	while (search) {
    d02e:	   ,-- bra.s d03a <saveStack+0x18>
		elements ++;
    d030:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    d034:	|  |   movea.l (sp),a0
    d036:	|  |   move.l 8(a0),(sp)
	while (search) {
    d03a:	|  '-> tst.l (sp)
    d03c:	'----- bne.s d030 <saveStack+0xe>
	}

	put2bytes (elements, fp);
    d03e:	       move.l 20(sp),-(sp)
    d042:	       move.l 12(sp),-(sp)
    d046:	       jsr 8d0 <put2bytes>
    d04c:	       addq.l #8,sp
	search = vs;
    d04e:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    d052:	       clr.l 4(sp)
    d056:	   ,-- bra.s d072 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    d058:	,--|-> move.l (sp),d0
    d05a:	|  |   move.l 20(sp),-(sp)
    d05e:	|  |   move.l d0,-(sp)
    d060:	|  |   jsr d1ae <saveVariable>
    d066:	|  |   addq.l #8,sp
		search = search -> next;
    d068:	|  |   movea.l (sp),a0
    d06a:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    d06e:	|  |   addq.l #1,4(sp)
    d072:	|  '-> move.l 4(sp),d0
    d076:	|      cmp.l 8(sp),d0
    d07a:	'----- blt.s d058 <saveStack+0x36>
	}
}
    d07c:	       nop
    d07e:	       nop
    d080:	       lea 12(sp),sp
    d084:	       rts

0000d086 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    d086:	             lea -44(sp),sp
    d08a:	             move.l a6,-(sp)
    d08c:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    d08e:	             move.l 1cf16 <stackLib>,48(sp)
	int a = 0;
    d096:	             clr.l 44(sp)
	while (s) {
    d09a:	      ,----- bra.s d0f8 <saveStackRef+0x72>
		if (s -> stack == vs) {
    d09c:	   ,--|----> movea.l 48(sp),a0
    d0a0:	   |  |      move.l (a0),d0
    d0a2:	   |  |      cmp.l 56(sp),d0
    d0a6:	   |  |  ,-- bne.s d0ea <saveStackRef+0x64>
			FPutC (fp, 1);
    d0a8:	   |  |  |   move.l 60(sp),16(sp)
    d0ae:	   |  |  |   moveq #1,d0
    d0b0:	   |  |  |   move.l d0,12(sp)
    d0b4:	   |  |  |   move.l 1ce92 <DOSBase>,d0
    d0ba:	   |  |  |   movea.l d0,a6
    d0bc:	   |  |  |   move.l 16(sp),d1
    d0c0:	   |  |  |   move.l 12(sp),d2
    d0c4:	   |  |  |   jsr -312(a6)
    d0c8:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    d0cc:	   |  |  |   move.l 1cf12 <stackLibTotal>,d0
    d0d2:	   |  |  |   sub.l 44(sp),d0
    d0d6:	   |  |  |   move.l 60(sp),-(sp)
    d0da:	   |  |  |   move.l d0,-(sp)
    d0dc:	   |  |  |   jsr 8d0 <put2bytes>
    d0e2:	   |  |  |   addq.l #8,sp
			return TRUE;
    d0e4:	   |  |  |   moveq #1,d0
    d0e6:	,--|--|--|-- bra.w d1a4 <saveStackRef+0x11e>
		}
		s = s -> next;
    d0ea:	|  |  |  '-> movea.l 48(sp),a0
    d0ee:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    d0f4:	|  |  |      addq.l #1,44(sp)
	while (s) {
    d0f8:	|  |  '----> tst.l 48(sp)
    d0fc:	|  '-------- bne.s d09c <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    d0fe:	|            move.l 60(sp),40(sp)
    d104:	|            clr.l 36(sp)
    d108:	|            move.l 1ce92 <DOSBase>,d0
    d10e:	|            movea.l d0,a6
    d110:	|            move.l 40(sp),d1
    d114:	|            move.l 36(sp),d2
    d118:	|            jsr -312(a6)
    d11c:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    d120:	|            movea.l 56(sp),a0
    d124:	|            move.l (a0),d0
    d126:	|            move.l 60(sp),-(sp)
    d12a:	|            move.l d0,-(sp)
    d12c:	|            jsr d022 <saveStack>
    d132:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    d134:	|            moveq #8,d0
    d136:	|            move.l d0,28(sp)
    d13a:	|            clr.l 24(sp)
    d13e:	|            move.l 1ce8a <SysBase>,d0
    d144:	|            movea.l d0,a6
    d146:	|            move.l 28(sp),d0
    d14a:	|            move.l 24(sp),d1
    d14e:	|            jsr -684(a6)
    d152:	|            move.l d0,20(sp)
    d156:	|            move.l 20(sp),d0
    d15a:	|            move.l d0,48(sp)
	stackLibTotal ++;
    d15e:	|            move.l 1cf12 <stackLibTotal>,d0
    d164:	|            addq.l #1,d0
    d166:	|            move.l d0,1cf12 <stackLibTotal>
	if (! s) {
    d16c:	|            tst.l 48(sp)
    d170:	|        ,-- bne.s d184 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    d172:	|        |   pea 1991f <PutChar+0x17cf>
    d178:	|        |   jsr 176ae <KPrintF>
    d17e:	|        |   addq.l #4,sp
		return FALSE;
    d180:	|        |   clr.w d0
    d182:	+--------|-- bra.s d1a4 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    d184:	|        '-> move.l 1cf16 <stackLib>,d0
    d18a:	|            movea.l 48(sp),a0
    d18e:	|            move.l d0,4(a0)
	s -> stack = vs;
    d192:	|            movea.l 48(sp),a0
    d196:	|            move.l 56(sp),(a0)
	stackLib = s;
    d19a:	|            move.l 48(sp),1cf16 <stackLib>
	return TRUE;
    d1a2:	|            moveq #1,d0
}
    d1a4:	'----------> move.l (sp)+,d2
    d1a6:	             movea.l (sp)+,a6
    d1a8:	             lea 44(sp),sp
    d1ac:	             rts

0000d1ae <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    d1ae:	          lea -12(sp),sp
    d1b2:	          move.l a6,-(sp)
    d1b4:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    d1b6:	          move.l 28(sp),16(sp)
    d1bc:	          movea.l 24(sp),a0
    d1c0:	          move.l (a0),d0
    d1c2:	          move.l d0,12(sp)
    d1c6:	          move.l 1ce92 <DOSBase>,d0
    d1cc:	          movea.l d0,a6
    d1ce:	          move.l 16(sp),d1
    d1d2:	          move.l 12(sp),d2
    d1d6:	          jsr -312(a6)
    d1da:	          move.l d0,8(sp)
	switch (from -> varType) {
    d1de:	          movea.l 24(sp),a0
    d1e2:	          move.l (a0),d0
    d1e4:	          moveq #9,d1
    d1e6:	          cmp.l d0,d1
    d1e8:	      ,-- bcs.w d298 <saveVariable+0xea>
    d1ec:	      |   add.l d0,d0
    d1ee:	      |   movea.l d0,a0
    d1f0:	      |   adda.l #53756,a0
    d1f6:	      |   move.w (a0),d0
    d1f8:	      |   jmp (d1fc <saveVariable+0x4e>,pc,d0.w)
    d1fc:	      |   ori.l #1310740,(a0)+
    d202:	      |   ori.b #20,(20,a0,d0.w)
    d208:	      |   .short 0x004c
    d20a:	      |   ori.b #126,(a4)
    d20e:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    d212:	      |   ori.b #40,(a0)+
    d216:	      |   ori.b #47,d4
    d21a:	      |   ori.b #0,(a4)+
    d21e:	      |   jsr 958 <put4bytes>
    d224:	      |   addq.l #8,sp
		return TRUE;
    d226:	      |   moveq #1,d0
    d228:	,-----|-- bra.w d2d4 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    d22c:	|     |   movea.l 24(sp),a0
    d230:	|     |   move.l 4(a0),d0
    d234:	|     |   move.l 28(sp),-(sp)
    d238:	|     |   move.l d0,-(sp)
    d23a:	|     |   jsr bd8 <writeString>
    d240:	|     |   addq.l #8,sp
		return TRUE;
    d242:	|     |   moveq #1,d0
    d244:	+-----|-- bra.w d2d4 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    d248:	|     |   movea.l 24(sp),a0
    d24c:	|     |   move.l 4(a0),d0
    d250:	|     |   move.l 28(sp),-(sp)
    d254:	|     |   move.l d0,-(sp)
    d256:	|     |   jsr d086 <saveStackRef>
    d25c:	|     |   addq.l #8,sp
    d25e:	+-----|-- bra.s d2d4 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    d260:	|     |   movea.l 24(sp),a0
    d264:	|     |   move.l 4(a0),d0
    d268:	|     |   move.l 28(sp),-(sp)
    d26c:	|     |   move.l d0,-(sp)
    d26e:	|     |   jsr b3fc <saveCostume>
    d274:	|     |   addq.l #8,sp
		return FALSE;
    d276:	|     |   clr.w d0
    d278:	+-----|-- bra.s d2d4 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    d27a:	|     |   movea.l 24(sp),a0
    d27e:	|     |   move.l 4(a0),d0
    d282:	|     |   move.l 28(sp),-(sp)
    d286:	|     |   move.l d0,-(sp)
    d288:	|     |   jsr b332 <saveAnim>
    d28e:	|     |   addq.l #8,sp
		return FALSE;
    d290:	|     |   clr.w d0
    d292:	+-----|-- bra.s d2d4 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    d294:	|     |   clr.w d0
    d296:	+-----|-- bra.s d2d4 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    d298:	|     '-> movea.l 24(sp),a0
    d29c:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d29e:	|         moveq #10,d1
    d2a0:	|         cmp.l d0,d1
    d2a2:	|  ,----- bcs.s d2bc <saveVariable+0x10e>
						typeName[from->varType] :
    d2a4:	|  |      movea.l 24(sp),a0
    d2a8:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d2aa:	|  |      add.l d0,d0
    d2ac:	|  |      movea.l d0,a1
    d2ae:	|  |      adda.l d0,a1
    d2b0:	|  |      lea 1cd64 <typeName>,a0
    d2b6:	|  |      move.l (0,a1,a0.l),d0
    d2ba:	|  |  ,-- bra.s d2c2 <saveVariable+0x114>
    d2bc:	|  '--|-> move.l #104772,d0
    d2c2:	|     '-> move.l d0,-(sp)
    d2c4:	|         pea 1994b <PutChar+0x17fb>
    d2ca:	|         jsr 176ae <KPrintF>
    d2d0:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    d2d2:	|         moveq #1,d0
    d2d4:	'-------> move.l (sp)+,d2
    d2d6:	          movea.l (sp)+,a6
    d2d8:	          lea 12(sp),sp
    d2dc:	          rts

0000d2de <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    d2de:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    d2e2:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    d2ea:	          movea.l 4(sp),a0
    d2ee:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    d2f4:	          movea.l 4(sp),a0
    d2f8:	          move.w 10(a0),d0
    d2fc:	          lsr.w #8,d0
    d2fe:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d302:	          movea.l 4(sp),a0
    d306:	          move.w 10(a0),d0
    d30a:	          move.b d0,(sp)

    if(counterx_new)
    d30c:	,-------- beq.w d3b2 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d310:	|         clr.w d1
    d312:	|         move.b (sp),d1
    d314:	|         move.w 1cf1e <counterx_old>,d0
    d31a:	|         sub.w d0,d1
    d31c:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d320:	|         cmpi.w #128,10(sp)
    d326:	|     ,-- blt.s d33e <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d328:	|     |   move.w #1,1ce40 <input+0x4>
            counterx_diff -= 256;    
    d330:	|     |   move.w 10(sp),d0
    d334:	|     |   addi.w #-256,d0
    d338:	|     |   move.w d0,10(sp)
    d33c:	|  ,--|-- bra.s d36a <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d33e:	|  |  '-> cmpi.w #-129,10(sp)
    d344:	|  |  ,-- bgt.s d35c <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d346:	|  |  |   move.w 10(sp),d0
    d34a:	|  |  |   addi.w #256,d0
    d34e:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d352:	|  |  |   move.w #1,1ce40 <input+0x4>
    d35a:	|  +--|-- bra.s d36a <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d35c:	|  |  '-> tst.w 10(sp)
    d360:	|  +----- beq.s d36a <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d362:	|  |      move.w #1,1ce40 <input+0x4>
        }

        input.mouseX += counterx_diff;
    d36a:	|  '----> move.l 1ce46 <input+0xa>,d0
    d370:	|         movea.w 10(sp),a0
    d374:	|         add.l a0,d0
    d376:	|         move.l d0,1ce46 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d37c:	|         move.l 1ce46 <input+0xa>,d1
    d382:	|         move.l 1cdde <winWidth>,d0
    d388:	|         cmp.l d1,d0
    d38a:	|     ,-- bge.s d39a <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    d38c:	|     |   move.l 1cdde <winWidth>,d0
    d392:	|     |   move.l d0,1ce46 <input+0xa>
    d398:	|  ,--|-- bra.s d3a8 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d39a:	|  |  '-> move.l 1ce46 <input+0xa>,d0
    d3a0:	|  +----- bpl.s d3a8 <CsiCheckInput+0xca>
            input.mouseX = 0;
    d3a2:	|  |      clr.l 1ce46 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d3a8:	|  '----> clr.w d0
    d3aa:	|         move.b (sp),d0
    d3ac:	|         move.w d0,1cf1e <counterx_old>
    }    

    if(countery_new)
    d3b2:	'-------> tst.b 1(sp)
    d3b6:	,-------- beq.w d460 <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d3ba:	|         clr.w d1
    d3bc:	|         move.b 1(sp),d1
    d3c0:	|         move.w 1cf20 <countery_old>,d0
    d3c6:	|         sub.w d0,d1
    d3c8:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d3cc:	|         cmpi.w #128,8(sp)
    d3d2:	|     ,-- blt.s d3ea <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d3d4:	|     |   move.w #1,1ce40 <input+0x4>
            countery_diff -= 256;    
    d3dc:	|     |   move.w 8(sp),d0
    d3e0:	|     |   addi.w #-256,d0
    d3e4:	|     |   move.w d0,8(sp)
    d3e8:	|  ,--|-- bra.s d416 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d3ea:	|  |  '-> cmpi.w #-129,8(sp)
    d3f0:	|  |  ,-- bgt.s d408 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d3f2:	|  |  |   move.w #1,1ce40 <input+0x4>
            countery_diff += 256;
    d3fa:	|  |  |   move.w 8(sp),d0
    d3fe:	|  |  |   addi.w #256,d0
    d402:	|  |  |   move.w d0,8(sp)
    d406:	|  +--|-- bra.s d416 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d408:	|  |  '-> tst.w 8(sp)
    d40c:	|  +----- beq.s d416 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d40e:	|  |      move.w #1,1ce40 <input+0x4>
        }

        input.mouseY += countery_diff;
    d416:	|  '----> move.l 1ce4a <input+0xe>,d0
    d41c:	|         movea.w 8(sp),a0
    d420:	|         add.l a0,d0
    d422:	|         move.l d0,1ce4a <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d428:	|         move.l 1ce4a <input+0xe>,d1
    d42e:	|         move.l 1cde2 <winHeight>,d0
    d434:	|         cmp.l d1,d0
    d436:	|     ,-- bge.s d446 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d438:	|     |   move.l 1cde2 <winHeight>,d0
    d43e:	|     |   move.l d0,1ce4a <input+0xe>
    d444:	|  ,--|-- bra.s d454 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d446:	|  |  '-> move.l 1ce4a <input+0xe>,d0
    d44c:	|  +----- bpl.s d454 <CsiCheckInput+0x176>
            input.mouseY = 0;
    d44e:	|  |      clr.l 1ce4a <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d454:	|  '----> clr.w d0
    d456:	|         move.b 1(sp),d0
    d45a:	|         move.w d0,1cf20 <countery_old>
    } 

    input.leftRelease = FALSE;
    d460:	'-------> clr.w 1ce42 <input+0x6>
    input.rightRelease = FALSE;
    d466:	          clr.w 1ce44 <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d46c:	          move.w 1ce3c <input>,d0
    d472:	      ,-- beq.s d498 <CsiCheckInput+0x1ba>
    d474:	      |   movea.l #12574721,a0
    d47a:	      |   move.b (a0),d0
    d47c:	      |   move.b d0,d0
    d47e:	      |   andi.l #255,d0
    d484:	      |   moveq #64,d1
    d486:	      |   and.l d1,d0
    d488:	      +-- beq.s d498 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    d48a:	      |   clr.w 1ce3c <input>
        input.leftRelease = TRUE;
    d490:	      |   move.w #1,1ce42 <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d498:	      '-> move.w 1ce3e <input+0x2>,d0
    d49e:	      ,-- beq.s d4c6 <CsiCheckInput+0x1e8>
    d4a0:	      |   movea.l #14675990,a0
    d4a6:	      |   move.w (a0),d0
    d4a8:	      |   move.w d0,d0
    d4aa:	      |   andi.l #65535,d0
    d4b0:	      |   andi.l #1024,d0
    d4b6:	      +-- beq.s d4c6 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    d4b8:	      |   clr.w 1ce3e <input+0x2>
        input.rightRelease = TRUE;
    d4be:	      |   move.w #1,1ce44 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d4c6:	      '-> movea.l #12574721,a0
    d4cc:	          move.b (a0),d0
    d4ce:	          move.b d0,d0
    d4d0:	          andi.l #255,d0
    d4d6:	          moveq #64,d1
    d4d8:	          and.l d1,d0
    d4da:	      ,-- bne.s d4e4 <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    d4dc:	      |   move.w #1,1ce3c <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d4e4:	      '-> movea.l #14675990,a0
    d4ea:	          move.w (a0),d0
    d4ec:	          move.w d0,d0
    d4ee:	          andi.l #65535,d0
    d4f4:	          andi.l #1024,d0
    d4fa:	      ,-- bne.s d504 <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    d4fc:	      |   move.w #1,1ce3e <input+0x2>
    }

    d504:	      '-> nop
    d506:	          lea 12(sp),sp
    d50a:	          rts

0000d50c <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d50c:	moveq #0,d0
}
    d50e:	rts

0000d510 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d510:	nop
    d512:	rts

0000d514 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d514:	nop
    d516:	rts

0000d518 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d518:	moveq #1,d0
}
    d51a:	rts

0000d51c <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d51c:	nop
    d51e:	rts

0000d520 <saveSounds>:

void saveSounds (BPTR fp) {
    d520:	lea -12(sp),sp
    d524:	move.l a6,-(sp)
    d526:	move.l d2,-(sp)
	FPutC (fp,0);
    d528:	move.l 24(sp),16(sp)
    d52e:	clr.l 12(sp)
    d532:	move.l 1ce92 <DOSBase>,d0
    d538:	movea.l d0,a6
    d53a:	move.l 16(sp),d1
    d53e:	move.l 12(sp),d2
    d542:	jsr -312(a6)
    d546:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d54a:	move.l 1c822 <defSoundVol>,d0
    d550:	move.l 24(sp),-(sp)
    d554:	move.l d0,-(sp)
    d556:	jsr 8d0 <put2bytes>
    d55c:	addq.l #8,sp
	put2bytes (defVol, fp);
    d55e:	move.l 1c81e <defVol>,d0
    d564:	move.l 24(sp),-(sp)
    d568:	move.l d0,-(sp)
    d56a:	jsr 8d0 <put2bytes>
    d570:	addq.l #8,sp
}
    d572:	nop
    d574:	move.l (sp)+,d2
    d576:	movea.l (sp)+,a6
    d578:	lea 12(sp),sp
    d57c:	rts

0000d57e <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d57e:	move.l 4(sp),1c81e <defVol>
}
    d586:	nop
    d588:	rts

0000d58a <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d58a:	move.l 4(sp),1c822 <defSoundVol>
}
    d592:	nop
    d594:	rts

0000d596 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d596:	nop
    d598:	rts

0000d59a <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d59a:	nop
    d59c:	rts

0000d59e <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d59e:	nop
    d5a0:	rts

0000d5a2 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d5a2:	subq.l #4,sp
    d5a4:	move.l 12(sp),d0
    d5a8:	move.w d0,d0
    d5aa:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d5ae:	moveq #1,d0
}
    d5b0:	addq.l #4,sp
    d5b2:	rts

0000d5b4 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d5b4:	nop
    d5b6:	rts

0000d5b8 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    d5b8:	move.l 16(sp),-(sp)
    d5bc:	move.l 16(sp),-(sp)
    d5c0:	move.l 16(sp),-(sp)
    d5c4:	move.l 16(sp),-(sp)
    d5c8:	jsr e0e <CstBlankScreen>
    d5ce:	lea 16(sp),sp
}
    d5d2:	nop
    d5d4:	rts

0000d5d6 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d5d6:	pea 1996e <PutChar+0x181e>
    d5dc:	jsr 176ae <KPrintF>
    d5e2:	addq.l #4,sp
}
    d5e4:	nop
    d5e6:	rts

0000d5e8 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d5e8:	movea.l 8(sp),a1
    d5ec:	movea.l 12(sp),a0
    d5f0:	move.l 8(sp),d1
    d5f4:	move.l 4(sp),d0
    d5f8:	move.l a1,-(sp)
    d5fa:	move.l a0,-(sp)
    d5fc:	move.l d1,-(sp)
    d5fe:	move.l d0,-(sp)
    d600:	jsr 4ac4 <drawLine>
    d606:	lea 16(sp),sp
}
    d60a:	nop
    d60c:	rts

0000d60e <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d60e:	movea.l 12(sp),a1
    d612:	movea.l 4(sp),a0
    d616:	move.l 8(sp),d1
    d61a:	move.l 4(sp),d0
    d61e:	move.l a1,-(sp)
    d620:	move.l a0,-(sp)
    d622:	move.l d1,-(sp)
    d624:	move.l d0,-(sp)
    d626:	jsr 4ac4 <drawLine>
    d62c:	lea 16(sp),sp
}
    d630:	nop
    d632:	rts

0000d634 <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d634:	pea 199a7 <PutChar+0x1857>
    d63a:	jsr 176ae <KPrintF>
    d640:	addq.l #4,sp
}
    d642:	nop
    d644:	rts

0000d646 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d646:	jsr 19a4 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d64c:	pea 1cf2a <backdropTextureName>
    d652:	pea 1 <_start+0x1>
    d656:	jsr 4c46 <deleteTextures>
    d65c:	addq.l #8,sp
	backdropTextureName = 0;
    d65e:	clr.l 1cf2a <backdropTextureName>
	backdropExists = FALSE;
    d664:	clr.w 1cf2e <backdropExists>
}
    d66a:	nop
    d66c:	rts

0000d66e <killParallax>:

void killParallax () {
    d66e:	          lea -12(sp),sp
    d672:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d674:	   ,----- bra.s d6e0 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d676:	,--|----> move.l 1cf30 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d67e:	|  |      movea.l 12(sp),a0
    d682:	|  |      move.l 42(a0),d0
    d686:	|  |      move.l d0,1cf30 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d68c:	|  |      move.l 12(sp),d0
    d690:	|  |      addq.l #4,d0
    d692:	|  |      move.l d0,-(sp)
    d694:	|  |      pea 1 <_start+0x1>
    d698:	|  |      jsr 4c46 <deleteTextures>
    d69e:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d6a0:	|  |      movea.l 12(sp),a0
    d6a4:	|  |      move.l (a0),d0
    d6a6:	|  |  ,-- beq.s d6c0 <killParallax+0x52>
    d6a8:	|  |  |   movea.l 12(sp),a0
    d6ac:	|  |  |   move.l (a0),8(sp)
    d6b0:	|  |  |   move.l 1ce8a <SysBase>,d0
    d6b6:	|  |  |   movea.l d0,a6
    d6b8:	|  |  |   movea.l 8(sp),a1
    d6bc:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d6c0:	|  |  '-> tst.l 12(sp)
    d6c4:	|  |  ,-- beq.s d6dc <killParallax+0x6e>
    d6c6:	|  |  |   move.l 12(sp),4(sp)
    d6cc:	|  |  |   move.l 1ce8a <SysBase>,d0
    d6d2:	|  |  |   movea.l d0,a6
    d6d4:	|  |  |   movea.l 4(sp),a1
    d6d8:	|  |  |   jsr -690(a6)
		k = NULL;
    d6dc:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d6e0:	|  '----> move.l 1cf30 <parallaxStuff>,d0
    d6e6:	'-------- bne.s d676 <killParallax+0x8>
	}
}
    d6e8:	          nop
    d6ea:	          nop
    d6ec:	          movea.l (sp)+,a6
    d6ee:	          lea 12(sp),sp
    d6f2:	          rts

0000d6f4 <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d6f4:	       move.l 4(sp),-(sp)
    d6f8:	       jsr 7ae2 <openFileFromNum>
    d6fe:	       addq.l #4,sp
    d700:	       tst.l d0
    d702:	   ,-- bne.s d714 <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d704:	   |   pea 199c8 <PutChar+0x1878>
    d70a:	   |   jsr 176ae <KPrintF>
    d710:	   |   addq.l #4,sp
		return;
    d712:	,--|-- bra.s d734 <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d714:	|  '-> move.l 1ce72 <bigDataFile>,d0
    d71a:	|      move.l 12(sp),-(sp)
    d71e:	|      move.l 12(sp),-(sp)
    d722:	|      move.l d0,-(sp)
    d724:	|      jsr 1d0a <CstLoadBackdrop>
    d72a:	|      lea 12(sp),sp
	finishAccess ();
    d72e:	|      jsr 79da <finishAccess>
	
}
    d734:	'----> rts

0000d736 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d736:	subq.l #8,sp
    d738:	movea.l 12(sp),a0
    d73c:	move.l 16(sp),d1
    d740:	move.l 20(sp),d0
    d744:	movea.w a0,a0
    d746:	move.w a0,6(sp)
    d74a:	move.w d1,d1
    d74c:	move.w d1,4(sp)
    d750:	move.w d0,d0
    d752:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d756:	pea 19a17 <PutChar+0x18c7>
    d75c:	jsr 176ae <KPrintF>
    d762:	addq.l #4,sp

}
    d764:	nop
    d766:	addq.l #8,sp
    d768:	rts

0000d76a <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d76a:	pea 19a3a <PutChar+0x18ea>
    d770:	jsr 176ae <KPrintF>
    d776:	addq.l #4,sp
}
    d778:	nop
    d77a:	rts

0000d77c <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d77c:	pea 1cf34 <snapshotTextureName>
    d782:	pea 1 <_start+0x1>
    d786:	jsr 4c46 <deleteTextures>
    d78c:	addq.l #8,sp
	snapshotTextureName = 0;
    d78e:	clr.l 1cf34 <snapshotTextureName>
}
    d794:	nop
    d796:	rts

0000d798 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d798:	clr.l 1cf40 <cameraX>
	cameraY = 0;
    d79e:	clr.l 1cf44 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d7a4:	move.l 1cf26 <sceneHeight>,d0
    d7aa:	move.l d0,d1
    d7ac:	move.l 1cf22 <sceneWidth>,d0
    d7b2:	move.l d1,-(sp)
    d7b4:	move.l d0,-(sp)
    d7b6:	jsr 3a78 <CstReserveBackdrop>
    d7bc:	addq.l #8,sp
}
    d7be:	rts

0000d7c0 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d7c0:	jsr d646 <killBackDrop>
	killParallax ();
    d7c6:	jsr d66e <killParallax>
	killZBuffer ();
    d7cc:	jsr 89f8 <killZBuffer>
	sceneWidth = x;
    d7d2:	move.l 4(sp),d0
    d7d6:	move.l d0,1cf22 <sceneWidth>
	sceneHeight = y;
    d7dc:	move.l 8(sp),d0
    d7e0:	move.l d0,1cf26 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d7e6:	pea 19a73 <PutChar+0x1923>
    d7ec:	jsr 176ae <KPrintF>
    d7f2:	addq.l #4,sp
	return reserveBackdrop();
    d7f4:	jsr d798 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d7fa:	rts

0000d7fc <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d7fc:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d7fe:	move.l 12(sp),-(sp)
    d802:	jsr 6bc <get2bytes>
    d808:	addq.l #4,sp
    d80a:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d80e:	move.l 12(sp),-(sp)
    d812:	jsr 6bc <get2bytes>
    d818:	addq.l #4,sp
    d81a:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d81c:	moveq #1,d0
}
    d81e:	addq.l #8,sp
    d820:	rts

0000d822 <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d822:	   ,-> lea -12(sp),sp
    d826:	   |   move.l a6,-(sp)
    d828:	   |   move.l d2,-(sp)
	if (me) {
    d82a:	   |   tst.l 24(sp)
    d82e:	,--|-- beq.w d8c4 <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d832:	|  |   movea.l 24(sp),a0
    d836:	|  |   move.l 42(a0),d0
    d83a:	|  |   move.l 28(sp),-(sp)
    d83e:	|  |   move.l d0,-(sp)
    d840:	|  '-- jsr d822 <saveParallaxRecursive>(pc)
    d844:	|      addq.l #8,sp
		FPutC (fp, 1);
    d846:	|      move.l 28(sp),16(sp)
    d84c:	|      moveq #1,d0
    d84e:	|      move.l d0,12(sp)
    d852:	|      move.l 1ce92 <DOSBase>,d0
    d858:	|      movea.l d0,a6
    d85a:	|      move.l 16(sp),d1
    d85e:	|      move.l 12(sp),d2
    d862:	|      jsr -312(a6)
    d866:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d86a:	|      movea.l 24(sp),a0
    d86e:	|      move.w 28(a0),d0
    d872:	|      move.w d0,d0
    d874:	|      andi.l #65535,d0
    d87a:	|      move.l 28(sp),-(sp)
    d87e:	|      move.l d0,-(sp)
    d880:	|      jsr 8d0 <put2bytes>
    d886:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d888:	|      movea.l 24(sp),a0
    d88c:	|      move.w 30(a0),d0
    d890:	|      move.w d0,d0
    d892:	|      andi.l #65535,d0
    d898:	|      move.l 28(sp),-(sp)
    d89c:	|      move.l d0,-(sp)
    d89e:	|      jsr 8d0 <put2bytes>
    d8a4:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d8a6:	|      movea.l 24(sp),a0
    d8aa:	|      move.w 32(a0),d0
    d8ae:	|      move.w d0,d0
    d8b0:	|      andi.l #65535,d0
    d8b6:	|      move.l 28(sp),-(sp)
    d8ba:	|      move.l d0,-(sp)
    d8bc:	|      jsr 8d0 <put2bytes>
    d8c2:	|      addq.l #8,sp
	}
}
    d8c4:	'----> nop
    d8c6:	       move.l (sp)+,d2
    d8c8:	       movea.l (sp)+,a6
    d8ca:	       lea 12(sp),sp
    d8ce:	       rts

0000d8d0 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d8d0:	pea 19a9a <PutChar+0x194a>
    d8d6:	jsr 176ae <KPrintF>
    d8dc:	addq.l #4,sp
	return TRUE;
    d8de:	moveq #1,d0
    d8e0:	rts

0000d8e2 <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d8e2:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d8e4:	             move.l 1cf38 <allObjectTypes>,(sp)

	while (huntType) {
    d8ea:	      ,----- bra.s d902 <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d8ec:	   ,--|----> movea.l (sp),a0
    d8ee:	   |  |      move.l 4(a0),d0
    d8f2:	   |  |      cmp.l 8(sp),d0
    d8f6:	   |  |  ,-- bne.s d8fc <findObjectType+0x1a>
    d8f8:	   |  |  |   move.l (sp),d0
    d8fa:	,--|--|--|-- bra.s d912 <findObjectType+0x30>
		huntType = huntType -> next;
    d8fc:	|  |  |  '-> movea.l (sp),a0
    d8fe:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d902:	|  |  '----> tst.l (sp)
    d904:	|  '-------- bne.s d8ec <findObjectType+0xa>
	}

	return loadObjectType (i);
    d906:	|            move.l 8(sp),-(sp)
    d90a:	|            jsr d9d2 <loadObjectType>
    d910:	|            addq.l #4,sp
}
    d912:	'----------> addq.l #4,sp
    d914:	             rts

0000d916 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d916:	             lea -12(sp),sp
	int i, num = 0;
    d91a:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d91e:	             move.l 20(sp),-(sp)
    d922:	             jsr d8e2 <findObjectType>
    d928:	             addq.l #4,sp
    d92a:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d92c:	             clr.l 8(sp)
    d930:	   ,-------- bra.s d966 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d932:	,--|-------> movea.l (sp),a0
    d934:	|  |         move.l 38(a0),d1
    d938:	|  |         move.l 8(sp),d0
    d93c:	|  |         lsl.l #3,d0
    d93e:	|  |         movea.l d1,a0
    d940:	|  |         adda.l d0,a0
    d942:	|  |         move.l (a0),d0
    d944:	|  |         cmp.l 16(sp),d0
    d948:	|  |  ,----- bne.s d962 <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d94a:	|  |  |      movea.l (sp),a0
    d94c:	|  |  |      move.l 38(a0),d1
    d950:	|  |  |      move.l 8(sp),d0
    d954:	|  |  |      lsl.l #3,d0
    d956:	|  |  |      movea.l d1,a0
    d958:	|  |  |      adda.l d0,a0
    d95a:	|  |  |      move.l 4(a0),4(sp)
			break;
    d960:	|  |  |  ,-- bra.s d972 <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d962:	|  |  '--|-> addq.l #1,8(sp)
    d966:	|  '-----|-> movea.l (sp),a0
    d968:	|        |   move.l 16(a0),d0
    d96c:	|        |   cmp.l 8(sp),d0
    d970:	'--------|-- bgt.s d932 <getCombinationFunction+0x1c>
		}
	}

	return num;
    d972:	         '-> move.l 4(sp),d0
}
    d976:	             lea 12(sp),sp
    d97a:	             rts

0000d97c <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d97c:	moveq #1,d0
}
    d97e:	rts

0000d980 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d980:	subq.l #8,sp
    d982:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d984:	move.l 16(sp),-(sp)
    d988:	jsr 6bc <get2bytes>
    d98e:	addq.l #4,sp
    d990:	move.l d0,-(sp)
    d992:	jsr d9d2 <loadObjectType>
    d998:	addq.l #4,sp
    d99a:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d99e:	movea.l 8(sp),a0
    d9a2:	move.l (a0),4(sp)
    d9a6:	move.l 1ce8a <SysBase>,d0
    d9ac:	movea.l d0,a6
    d9ae:	movea.l 4(sp),a1
    d9b2:	jsr -690(a6)
	r -> screenName = readString (fp);
    d9b6:	move.l 16(sp),-(sp)
    d9ba:	jsr b02 <readString>
    d9c0:	addq.l #4,sp
    d9c2:	movea.l 8(sp),a0
    d9c6:	move.l d0,(a0)
	return r;
    d9c8:	move.l 8(sp),d0
}
    d9cc:	movea.l (sp)+,a6
    d9ce:	addq.l #8,sp
    d9d0:	rts

0000d9d2 <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d9d2:	          lea -84(sp),sp
    d9d6:	          move.l a6,-(sp)
    d9d8:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d9da:	          moveq #42,d0
    d9dc:	          move.l d0,84(sp)
    d9e0:	          clr.l 80(sp)
    d9e4:	          move.l 1ce8a <SysBase>,d0
    d9ea:	          movea.l d0,a6
    d9ec:	          move.l 84(sp),d0
    d9f0:	          move.l 80(sp),d1
    d9f4:	          jsr -684(a6)
    d9f8:	          move.l d0,76(sp)
    d9fc:	          move.l 76(sp),d0
    da00:	          move.l d0,72(sp)

    if (newType) {
    da04:	,-------- beq.w dc7e <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    da08:	|         move.l 96(sp),-(sp)
    da0c:	|         jsr 7baa <openObjectSlice>
    da12:	|         addq.l #4,sp
    da14:	|         tst.w d0
    da16:	+-------- beq.w dc7e <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    da1a:	|         move.l 1ce72 <bigDataFile>,d0
    da20:	|         move.l d0,-(sp)
    da22:	|         jsr 6bc <get2bytes>
    da28:	|         addq.l #4,sp
    da2a:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    da2e:	|         move.l 1ce72 <bigDataFile>,64(sp)
    da36:	|         move.l 1ce92 <DOSBase>,d0
    da3c:	|         movea.l d0,a6
    da3e:	|         move.l 64(sp),d1
    da42:	|         jsr -306(a6)
    da46:	|         move.l d0,60(sp)
    da4a:	|         move.l 60(sp),d0
    da4e:	|         move.l d0,d0
    da50:	|         movea.l 72(sp),a0
    da54:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    da58:	|         move.l 1ce72 <bigDataFile>,56(sp)
    da60:	|         move.l 1ce92 <DOSBase>,d0
    da66:	|         movea.l d0,a6
    da68:	|         move.l 56(sp),d1
    da6c:	|         jsr -306(a6)
    da70:	|         move.l d0,52(sp)
    da74:	|         move.l 52(sp),d0
    da78:	|         move.l d0,d0
    da7a:	|         movea.l 72(sp),a0
    da7e:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    da82:	|         move.l 1ce72 <bigDataFile>,48(sp)
    da8a:	|         move.l 1ce92 <DOSBase>,d0
    da90:	|         movea.l d0,a6
    da92:	|         move.l 48(sp),d1
    da96:	|         jsr -306(a6)
    da9a:	|         move.l d0,44(sp)
    da9e:	|         move.l 44(sp),d0
    daa2:	|         move.l d0,d0
    daa4:	|         movea.l 72(sp),a0
    daa8:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    daac:	|         move.l 1ce72 <bigDataFile>,40(sp)
    dab4:	|         move.l 1ce92 <DOSBase>,d0
    daba:	|         movea.l d0,a6
    dabc:	|         move.l 40(sp),d1
    dac0:	|         jsr -306(a6)
    dac4:	|         move.l d0,36(sp)
    dac8:	|         move.l 36(sp),d0
    dacc:	|         movea.l 72(sp),a0
    dad0:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    dad4:	|         move.l 1ce72 <bigDataFile>,32(sp)
    dadc:	|         move.l 1ce92 <DOSBase>,d0
    dae2:	|         movea.l d0,a6
    dae4:	|         move.l 32(sp),d1
    dae8:	|         jsr -306(a6)
    daec:	|         move.l d0,28(sp)
    daf0:	|         move.l 28(sp),d0
    daf4:	|         movea.l 72(sp),a0
    daf8:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    dafc:	|         move.l 1ce72 <bigDataFile>,d0
    db02:	|         move.l d0,-(sp)
    db04:	|         jsr 718 <get4bytes>
    db0a:	|         addq.l #4,sp
    db0c:	|         movea.l 72(sp),a0
    db10:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    db14:	|         move.l 1ce72 <bigDataFile>,d0
    db1a:	|         move.l d0,-(sp)
    db1c:	|         jsr 6bc <get2bytes>
    db22:	|         addq.l #4,sp
    db24:	|         movea.l 72(sp),a0
    db28:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    db2c:	|         move.l 1ce72 <bigDataFile>,24(sp)
    db34:	|         move.l 1ce92 <DOSBase>,d0
    db3a:	|         movea.l d0,a6
    db3c:	|         move.l 24(sp),d1
    db40:	|         jsr -306(a6)
    db44:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    db48:	|         move.l 1ce72 <bigDataFile>,d0
    db4e:	|         move.l d0,-(sp)
    db50:	|         jsr 7d8 <getFloat>
    db56:	|         addq.l #4,sp
            getFloat(bigDataFile);
    db58:	|         move.l 1ce72 <bigDataFile>,d0
    db5e:	|         move.l d0,-(sp)
    db60:	|         jsr 7d8 <getFloat>
    db66:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    db68:	|         move.l 1ce72 <bigDataFile>,d0
    db6e:	|         move.l d0,-(sp)
    db70:	|         jsr 6bc <get2bytes>
    db76:	|         addq.l #4,sp
    db78:	|         move.l d0,d0
    db7a:	|         movea.l 72(sp),a0
    db7e:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    db82:	|         move.l 1ce72 <bigDataFile>,d0
    db88:	|         move.l d0,-(sp)
    db8a:	|         jsr 6bc <get2bytes>
    db90:	|         addq.l #4,sp
    db92:	|         movea.l 72(sp),a0
    db96:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    db9a:	|         movea.l 72(sp),a0
    db9e:	|         move.l 16(a0),d0
    dba2:	|  ,----- beq.s dbd4 <loadObjectType+0x202>
    dba4:	|  |      movea.l 72(sp),a0
    dba8:	|  |      move.l 16(a0),d0
    dbac:	|  |      lsl.l #3,d0
    dbae:	|  |      move.l d0,16(sp)
    dbb2:	|  |      clr.l 12(sp)
    dbb6:	|  |      move.l 1ce8a <SysBase>,d0
    dbbc:	|  |      movea.l d0,a6
    dbbe:	|  |      move.l 16(sp),d0
    dbc2:	|  |      move.l 12(sp),d1
    dbc6:	|  |      jsr -684(a6)
    dbca:	|  |      move.l d0,8(sp)
    dbce:	|  |      move.l 8(sp),d0
    dbd2:	|  |  ,-- bra.s dbd6 <loadObjectType+0x204>
    dbd4:	|  '--|-> moveq #0,d0
    dbd6:	|     '-> movea.l 72(sp),a0
    dbda:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    dbde:	|         clr.l 88(sp)
    dbe2:	|     ,-- bra.s dc32 <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    dbe4:	|  ,--|-> move.l 1ce72 <bigDataFile>,d1
    dbea:	|  |  |   movea.l 72(sp),a0
    dbee:	|  |  |   movea.l 38(a0),a0
    dbf2:	|  |  |   move.l 88(sp),d0
    dbf6:	|  |  |   lsl.l #3,d0
    dbf8:	|  |  |   lea (0,a0,d0.l),a2
    dbfc:	|  |  |   move.l d1,-(sp)
    dbfe:	|  |  |   jsr 6bc <get2bytes>
    dc04:	|  |  |   addq.l #4,sp
    dc06:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    dc08:	|  |  |   move.l 1ce72 <bigDataFile>,d1
    dc0e:	|  |  |   movea.l 72(sp),a0
    dc12:	|  |  |   movea.l 38(a0),a0
    dc16:	|  |  |   move.l 88(sp),d0
    dc1a:	|  |  |   lsl.l #3,d0
    dc1c:	|  |  |   lea (0,a0,d0.l),a2
    dc20:	|  |  |   move.l d1,-(sp)
    dc22:	|  |  |   jsr 6bc <get2bytes>
    dc28:	|  |  |   addq.l #4,sp
    dc2a:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    dc2e:	|  |  |   addq.l #1,88(sp)
    dc32:	|  |  '-> movea.l 72(sp),a0
    dc36:	|  |      move.l 16(a0),d0
    dc3a:	|  |      cmp.l 88(sp),d0
    dc3e:	|  '----- bgt.s dbe4 <loadObjectType+0x212>
            }
            finishAccess();
    dc40:	|         jsr 79da <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    dc46:	|         move.l 68(sp),-(sp)
    dc4a:	|         jsr 79e4 <getNumberedString>
    dc50:	|         addq.l #4,sp
    dc52:	|         movea.l 72(sp),a0
    dc56:	|         move.l d0,(a0)
            newType->objectNum = i;
    dc58:	|         movea.l 72(sp),a0
    dc5c:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    dc62:	|         move.l 1cf38 <allObjectTypes>,d0
    dc68:	|         movea.l 72(sp),a0
    dc6c:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    dc70:	|         move.l 72(sp),1cf38 <allObjectTypes>
            return newType;
    dc78:	|         move.l 72(sp),d0
    dc7c:	|     ,-- bra.s dc80 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    dc7e:	'-----|-> moveq #0,d0
}
    dc80:	      '-> movea.l (sp)+,a2
    dc82:	          movea.l (sp)+,a6
    dc84:	          lea 84(sp),sp
    dc88:	          rts

0000dc8a <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    dc8a:	             lea -16(sp),sp
    dc8e:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    dc90:	             move.l #118584,16(sp)

	while (* huntRegion) {
    dc98:	   ,-------- bra.s dd0c <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    dc9a:	,--|-------> movea.l 16(sp),a0
    dc9e:	|  |         move.l (a0),d0
    dca0:	|  |         cmp.l 24(sp),d0
    dca4:	|  |  ,----- bne.s dcfe <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    dca6:	|  |  |      movea.l 24(sp),a0
    dcaa:	|  |  |      move.l 8(a0),d0
    dcae:	|  |  |      movea.l 16(sp),a0
    dcb2:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    dcb4:	|  |  |      movea.l 24(sp),a0
    dcb8:	|  |  |      move.l 38(a0),12(sp)
    dcbe:	|  |  |      move.l 1ce8a <SysBase>,d0
    dcc4:	|  |  |      movea.l d0,a6
    dcc6:	|  |  |      movea.l 12(sp),a1
    dcca:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    dcce:	|  |  |      movea.l 24(sp),a0
    dcd2:	|  |  |      move.l (a0),8(sp)
    dcd6:	|  |  |      move.l 1ce8a <SysBase>,d0
    dcdc:	|  |  |      movea.l d0,a6
    dcde:	|  |  |      movea.l 8(sp),a1
    dce2:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    dce6:	|  |  |      move.l 24(sp),4(sp)
    dcec:	|  |  |      move.l 1ce8a <SysBase>,d0
    dcf2:	|  |  |      movea.l d0,a6
    dcf4:	|  |  |      movea.l 4(sp),a1
    dcf8:	|  |  |      jsr -690(a6)
			return;
    dcfc:	|  |  |  ,-- bra.s dd22 <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    dcfe:	|  |  '--|-> movea.l 16(sp),a0
    dd02:	|  |     |   move.l (a0),d0
    dd04:	|  |     |   move.l d0,d1
    dd06:	|  |     |   addq.l #8,d1
    dd08:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    dd0c:	|  '-----|-> movea.l 16(sp),a0
    dd10:	|        |   move.l (a0),d0
    dd12:	'--------|-- bne.s dc9a <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    dd14:	         |   pea 19ac1 <PutChar+0x1971>
    dd1a:	         |   jsr 176ae <KPrintF>
    dd20:	         |   addq.l #4,sp
}
    dd22:	         '-> movea.l (sp)+,a6
    dd24:	             lea 16(sp),sp
    dd28:	             rts

0000dd2a <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    dd2a:	movea.l 4(sp),a0
    dd2e:	move.l 4(a0),d0
    dd32:	move.l 8(sp),-(sp)
    dd36:	move.l d0,-(sp)
    dd38:	jsr 8d0 <put2bytes>
    dd3e:	addq.l #8,sp
	writeString (r -> screenName, fp);
    dd40:	movea.l 4(sp),a0
    dd44:	move.l (a0),d0
    dd46:	move.l 8(sp),-(sp)
    dd4a:	move.l d0,-(sp)
    dd4c:	jsr bd8 <writeString>
    dd52:	addq.l #8,sp
    dd54:	nop
    dd56:	rts

0000dd58 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    dd58:	                         lea -112(sp),sp
    dd5c:	                         move.l a6,-(sp)
    dd5e:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    dd60:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    dd64:	                         move.w 1cf3e <saveEncoding>,d0
    dd6a:	                  ,----- beq.s dd74 <fileToStack+0x1c>
    dd6c:	                  |      move.l #105191,d0
    dd72:	                  |  ,-- bra.s dd7a <fileToStack+0x22>
    dd74:	                  '--|-> move.l #105217,d0
    dd7a:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    dd7e:	                         move.l 124(sp),112(sp)
    dd84:	                         move.l #1005,108(sp)
    dd8c:	                         move.l 1ce92 <DOSBase>,d0
    dd92:	                         movea.l d0,a6
    dd94:	                         move.l 112(sp),d1
    dd98:	                         move.l 108(sp),d2
    dd9c:	                         jsr -30(a6)
    dda0:	                         move.l d0,104(sp)
    dda4:	                         move.l 104(sp),d0
    dda8:	                         move.l d0,100(sp)
    if (!fp) {
    ddac:	                     ,-- bne.s ddc6 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    ddae:	                     |   move.l 124(sp),-(sp)
    ddb2:	                     |   pea 19b18 <PutChar+0x19c8>
    ddb8:	                     |   jsr 176ae <KPrintF>
    ddbe:	                     |   addq.l #8,sp
        return FALSE;
    ddc0:	                     |   clr.w d0
    ddc2:	,--------------------|-- bra.w e0bc <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    ddc6:	|                    '-> move.w 1cf3e <saveEncoding>,d0
    ddcc:	|                        move.l d0,d0
    ddce:	|                        move.b d0,1cf3c <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    ddd4:	|                        move.w 1cf3e <saveEncoding>,d0
    ddda:	|                        lsr.w #8,d0
    dddc:	|                        move.l d0,d0
    ddde:	|                        move.b d0,1cf3d <encode2>

    while (*checker) {
    dde4:	|                 ,----- bra.s de48 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    dde6:	|              ,--|----> move.l 100(sp),30(sp)
    ddec:	|              |  |      move.l 1ce92 <DOSBase>,d0
    ddf2:	|              |  |      movea.l d0,a6
    ddf4:	|              |  |      move.l 30(sp),d1
    ddf8:	|              |  |      jsr -306(a6)
    ddfc:	|              |  |      move.l d0,26(sp)
    de00:	|              |  |      move.l 26(sp),d1
    de04:	|              |  |      movea.l 116(sp),a0
    de08:	|              |  |      move.b (a0),d0
    de0a:	|              |  |      ext.w d0
    de0c:	|              |  |      movea.w d0,a0
    de0e:	|              |  |      cmpa.l d1,a0
    de10:	|              |  |  ,-- beq.s de44 <fileToStack+0xec>
            Close(fp);
    de12:	|              |  |  |   move.l 100(sp),22(sp)
    de18:	|              |  |  |   move.l 1ce92 <DOSBase>,d0
    de1e:	|              |  |  |   movea.l d0,a6
    de20:	|              |  |  |   move.l 22(sp),d1
    de24:	|              |  |  |   jsr -36(a6)
    de28:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    de2c:	|              |  |  |   move.l 124(sp),-(sp)
    de30:	|              |  |  |   pea 19b25 <PutChar+0x19d5>
    de36:	|              |  |  |   jsr 176ae <KPrintF>
    de3c:	|              |  |  |   addq.l #8,sp
            return FALSE;
    de3e:	|              |  |  |   clr.w d0
    de40:	+--------------|--|--|-- bra.w e0bc <fileToStack+0x364>
        }
        checker++;
    de44:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    de48:	|              |  '----> movea.l 116(sp),a0
    de4c:	|              |         move.b (a0),d0
    de4e:	|              '-------- bne.s dde6 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    de50:	|                        move.w 1cf3e <saveEncoding>,d0
    de56:	|  ,-------------------- beq.s deca <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    de58:	|  |                     move.l 100(sp),-(sp)
    de5c:	|  |                     jsr e0c6 <readStringEncoded>
    de62:	|  |                     addq.l #4,sp
    de64:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    de68:	|  |                     pea 19b66 <PutChar+0x1a16>
    de6e:	|  |                     move.l 100(sp),-(sp)
    de72:	|  |                     jsr 1407a <strcmp>
    de78:	|  |                     addq.l #8,sp
    de7a:	|  |                     tst.l d0
    de7c:	|  |                 ,-- beq.s deb0 <fileToStack+0x158>
            Close(fp);
    de7e:	|  |                 |   move.l 100(sp),88(sp)
    de84:	|  |                 |   move.l 1ce92 <DOSBase>,d0
    de8a:	|  |                 |   movea.l d0,a6
    de8c:	|  |                 |   move.l 88(sp),d1
    de90:	|  |                 |   jsr -36(a6)
    de94:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    de98:	|  |                 |   move.l 124(sp),-(sp)
    de9c:	|  |                 |   pea 19b75 <PutChar+0x1a25>
    dea2:	|  |                 |   jsr 176ae <KPrintF>
    dea8:	|  |                 |   addq.l #8,sp
            return FALSE;
    deaa:	|  |                 |   clr.w d0
    deac:	+--|-----------------|-- bra.w e0bc <fileToStack+0x364>
        }
        FreeVec(checker);
    deb0:	|  |                 '-> move.l 96(sp),92(sp)
    deb6:	|  |                     move.l 1ce8a <SysBase>,d0
    debc:	|  |                     movea.l d0,a6
    debe:	|  |                     movea.l 92(sp),a1
    dec2:	|  |                     jsr -690(a6)
        checker = NULL;
    dec6:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    deca:	|  >-------------------> move.w 1cf3e <saveEncoding>,d0
    ded0:	|  |     ,-------------- beq.w e004 <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    ded4:	|  |     |               move.l 100(sp),76(sp)
    deda:	|  |     |               move.l 1ce92 <DOSBase>,d0
    dee0:	|  |     |               movea.l d0,a6
    dee2:	|  |     |               move.l 76(sp),d1
    dee6:	|  |     |               jsr -306(a6)
    deea:	|  |     |               move.l d0,72(sp)
    deee:	|  |     |               move.l 72(sp),d0
    def2:	|  |     |               move.b 1cf3c <encode1>,d1
    def8:	|  |     |               ext.w d1
    defa:	|  |     |               ext.l d1
    defc:	|  |     |               move.l d0,d2
    defe:	|  |     |               eor.l d1,d2
    df00:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    df04:	|  |     |               moveq #-1,d0
    df06:	|  |     |               cmp.l 68(sp),d0
    df0a:	|  |  ,--|-------------- beq.w e09a <fileToStack+0x342>

            char i = (char) tmp;
    df0e:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    df14:	|  |  |  |               move.b 67(sp),d0
    df18:	|  |  |  |               ext.w d0
    df1a:	|  |  |  |               movea.w d0,a0
    df1c:	|  |  |  |               moveq #2,d2
    df1e:	|  |  |  |               cmp.l a0,d2
    df20:	|  |  |  |     ,-------- beq.s df9c <fileToStack+0x244>
    df22:	|  |  |  |     |         moveq #2,d0
    df24:	|  |  |  |     |         cmp.l a0,d0
    df26:	|  |  |  |  ,--|-------- blt.w dfd2 <fileToStack+0x27a>
    df2a:	|  |  |  |  |  |         cmpa.w #0,a0
    df2e:	|  |  |  |  |  |     ,-- beq.s df3a <fileToStack+0x1e2>
    df30:	|  |  |  |  |  |     |   moveq #1,d2
    df32:	|  |  |  |  |  |     |   cmp.l a0,d2
    df34:	|  |  |  |  |  |  ,--|-- beq.s df76 <fileToStack+0x21e>
    df36:	|  |  |  |  +--|--|--|-- bra.w dfd2 <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    df3a:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    df3e:	|  |  |  |  |  |  |      jsr e0c6 <readStringEncoded>
    df44:	|  |  |  |  |  |  |      addq.l #4,sp
    df46:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    df4a:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    df4e:	|  |  |  |  |  |  |      lea 14(sp),a0
    df52:	|  |  |  |  |  |  |      move.l a0,-(sp)
    df54:	|  |  |  |  |  |  |      jsr 14df0 <makeTextVar>
    df5a:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    df5c:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    df62:	|  |  |  |  |  |  |      move.l 1ce8a <SysBase>,d0
    df68:	|  |  |  |  |  |  |      movea.l d0,a6
    df6a:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    df6e:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    df72:	|  |  |  |  |  |  |  ,-- bra.w e02a <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    df76:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    df7a:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    df80:	|  |  |  |  |  |     |   addq.l #4,sp
    df82:	|  |  |  |  |  |     |   move.l d0,-(sp)
    df84:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    df88:	|  |  |  |  |  |     |   lea 18(sp),a0
    df8c:	|  |  |  |  |  |     |   move.l a0,-(sp)
    df8e:	|  |  |  |  |  |     |   jsr 154c0 <setVariable>
    df94:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    df98:	|  |  |  |  |  |     +-- bra.w e02a <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    df9c:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    dfa2:	|  |  |  |  |        |   move.l 1ce92 <DOSBase>,d0
    dfa8:	|  |  |  |  |        |   movea.l d0,a6
    dfaa:	|  |  |  |  |        |   move.l 62(sp),d1
    dfae:	|  |  |  |  |        |   jsr -306(a6)
    dfb2:	|  |  |  |  |        |   move.l d0,58(sp)
    dfb6:	|  |  |  |  |        |   move.l 58(sp),d0
    dfba:	|  |  |  |  |        |   move.l d0,-(sp)
    dfbc:	|  |  |  |  |        |   pea 1 <_start+0x1>
    dfc0:	|  |  |  |  |        |   lea 18(sp),a0
    dfc4:	|  |  |  |  |        |   move.l a0,-(sp)
    dfc6:	|  |  |  |  |        |   jsr 154c0 <setVariable>
    dfcc:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    dfd0:	|  |  |  |  |        +-- bra.s e02a <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    dfd2:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    dfd6:	|  |  |  |           |   pea 19bf7 <PutChar+0x1aa7>
    dfdc:	|  |  |  |           |   jsr 176ae <KPrintF>
    dfe2:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    dfe4:	|  |  |  |           |   move.l 100(sp),46(sp)
    dfea:	|  |  |  |           |   move.l 1ce92 <DOSBase>,d0
    dff0:	|  |  |  |           |   movea.l d0,a6
    dff2:	|  |  |  |           |   move.l 46(sp),d1
    dff6:	|  |  |  |           |   jsr -36(a6)
    dffa:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    dffe:	|  |  |  |           |   clr.w d0
    e000:	+--|--|--|-----------|-- bra.w e0bc <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    e004:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    e008:	|  |  |              |   jsr e18c <readTextPlain>
    e00e:	|  |  |              |   addq.l #4,sp
    e010:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    e014:	|  |  |        ,-----|-- beq.w e09e <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    e018:	|  |  |        |     |   move.l 80(sp),-(sp)
    e01c:	|  |  |        |     |   lea 14(sp),a0
    e020:	|  |  |        |     |   move.l a0,-(sp)
    e022:	|  |  |        |     |   jsr 14df0 <makeTextVar>
    e028:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    e02a:	|  |  |        |     '-> movea.l 128(sp),a0
    e02e:	|  |  |        |         move.l (a0),d0
    e030:	|  |  |        |  ,----- bne.s e060 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    e032:	|  |  |        |  |      move.l 128(sp),d0
    e036:	|  |  |        |  |      move.l d0,-(sp)
    e038:	|  |  |        |  |      lea 14(sp),a0
    e03c:	|  |  |        |  |      move.l a0,-(sp)
    e03e:	|  |  |        |  |      jsr 14490 <addVarToStackQuick>
    e044:	|  |  |        |  |      addq.l #8,sp
    e046:	|  |  |        |  |      tst.w d0
    e048:	|  |  |        |  |  ,-- bne.s e04e <fileToStack+0x2f6>
    e04a:	|  |  |        |  |  |   clr.w d0
    e04c:	+--|--|--------|--|--|-- bra.s e0bc <fileToStack+0x364>
            sH->last = sH->first;
    e04e:	|  |  |        |  |  '-> movea.l 128(sp),a0
    e052:	|  |  |        |  |      move.l (a0),d0
    e054:	|  |  |        |  |      movea.l 128(sp),a0
    e058:	|  |  |        |  |      move.l d0,4(a0)
    e05c:	|  +--|--------|--|----- bra.w deca <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    e060:	|  |  |        |  '----> movea.l 128(sp),a0
    e064:	|  |  |        |         move.l 4(a0),d0
    e068:	|  |  |        |         addq.l #8,d0
    e06a:	|  |  |        |         move.l d0,-(sp)
    e06c:	|  |  |        |         lea 14(sp),a0
    e070:	|  |  |        |         move.l a0,-(sp)
    e072:	|  |  |        |         jsr 14490 <addVarToStackQuick>
    e078:	|  |  |        |         addq.l #8,sp
    e07a:	|  |  |        |         tst.w d0
    e07c:	|  |  |        |     ,-- bne.s e082 <fileToStack+0x32a>
    e07e:	|  |  |        |     |   clr.w d0
    e080:	+--|--|--------|-----|-- bra.s e0bc <fileToStack+0x364>
            sH->last = sH->last->next;
    e082:	|  |  |        |     '-> movea.l 128(sp),a0
    e086:	|  |  |        |         movea.l 4(a0),a0
    e08a:	|  |  |        |         move.l 8(a0),d0
    e08e:	|  |  |        |         movea.l 128(sp),a0
    e092:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    e096:	|  '--|--------|-------- bra.w deca <fileToStack+0x172>
            if (tmp == -1) break;
    e09a:	|     '--------|-------> nop
    e09c:	|              |     ,-- bra.s e0a0 <fileToStack+0x348>
            if (!line) break;
    e09e:	|              '-----|-> nop
        }
    }
    Close(fp);
    e0a0:	|                    '-> move.l 100(sp),38(sp)
    e0a6:	|                        move.l 1ce92 <DOSBase>,d0
    e0ac:	|                        movea.l d0,a6
    e0ae:	|                        move.l 38(sp),d1
    e0b2:	|                        jsr -36(a6)
    e0b6:	|                        move.l d0,34(sp)
    return TRUE;
    e0ba:	|                        moveq #1,d0
}
    e0bc:	'----------------------> move.l (sp)+,d2
    e0be:	                         movea.l (sp)+,a6
    e0c0:	                         lea 112(sp),sp
    e0c4:	                         rts

0000e0c6 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    e0c6:	          lea -32(sp),sp
    e0ca:	          move.l a6,-(sp)
    e0cc:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    e0ce:	          move.l 44(sp),-(sp)
    e0d2:	          jsr 6bc <get2bytes>
    e0d8:	          addq.l #4,sp
    e0da:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    e0de:	          move.l 32(sp),d0
    e0e2:	          addq.l #1,d0
    e0e4:	          move.l d0,28(sp)
    e0e8:	          clr.l 24(sp)
    e0ec:	          move.l 1ce8a <SysBase>,d0
    e0f2:	          movea.l d0,a6
    e0f4:	          move.l 28(sp),d0
    e0f8:	          move.l 24(sp),d1
    e0fc:	          jsr -684(a6)
    e100:	          move.l d0,20(sp)
    e104:	          move.l 20(sp),d0
    e108:	          move.l d0,16(sp)
    if (!s) return NULL;
    e10c:	      ,-- bne.s e112 <readStringEncoded+0x4c>
    e10e:	      |   moveq #0,d0
    e110:	,-----|-- bra.s e182 <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    e112:	|     '-> clr.l 36(sp)
    e116:	|     ,-- bra.s e168 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    e118:	|  ,--|-> move.l 44(sp),12(sp)
    e11e:	|  |  |   move.l 1ce92 <DOSBase>,d0
    e124:	|  |  |   movea.l d0,a6
    e126:	|  |  |   move.l 12(sp),d1
    e12a:	|  |  |   jsr -306(a6)
    e12e:	|  |  |   move.l d0,8(sp)
    e132:	|  |  |   move.l 8(sp),d0
    e136:	|  |  |   move.l d0,d1
    e138:	|  |  |   move.b 1cf3c <encode1>,d2
    e13e:	|  |  |   move.l 36(sp),d0
    e142:	|  |  |   movea.l 16(sp),a0
    e146:	|  |  |   adda.l d0,a0
    e148:	|  |  |   move.b d1,d0
    e14a:	|  |  |   eor.b d2,d0
    e14c:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    e14e:	|  |  |   move.b 1cf3c <encode1>,d0
    e154:	|  |  |   move.b d0,d1
    e156:	|  |  |   move.b 1cf3d <encode2>,d0
    e15c:	|  |  |   add.b d1,d0
    e15e:	|  |  |   move.b d0,1cf3c <encode1>
    for (a = 0; a < len; a++) {
    e164:	|  |  |   addq.l #1,36(sp)
    e168:	|  |  '-> move.l 36(sp),d0
    e16c:	|  |      cmp.l 32(sp),d0
    e170:	|  '----- blt.s e118 <readStringEncoded+0x52>
    }
    s[len] = 0;
    e172:	|         move.l 32(sp),d0
    e176:	|         movea.l 16(sp),a0
    e17a:	|         adda.l d0,a0
    e17c:	|         clr.b (a0)
    return s;
    e17e:	|         move.l 16(sp),d0
}
    e182:	'-------> move.l (sp)+,d2
    e184:	          movea.l (sp)+,a6
    e186:	          lea 32(sp),sp
    e18a:	          rts

0000e18c <readTextPlain>:

char *readTextPlain(BPTR fp) {
    e18c:	             lea -104(sp),sp
    e190:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    e194:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    e198:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    e19e:	             move.l 124(sp),106(sp)
    e1a4:	             clr.l 102(sp)
    e1a8:	             clr.l 98(sp)
    e1ac:	             move.l 1ce92 <DOSBase>,d0
    e1b2:	             movea.l d0,a6
    e1b4:	             move.l 106(sp),d1
    e1b8:	             move.l 102(sp),d2
    e1bc:	             move.l 98(sp),d3
    e1c0:	             jsr -66(a6)
    e1c4:	             move.l d0,94(sp)
    e1c8:	             move.l 94(sp),d0
    e1cc:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    e1d0:	   ,-------- bra.s e214 <readTextPlain+0x88>
        tmp = FGetC(fp);
    e1d2:	,--|-------> move.l 124(sp),22(sp)
    e1d8:	|  |         move.l 1ce92 <DOSBase>,d0
    e1de:	|  |         movea.l d0,a6
    e1e0:	|  |         move.l 22(sp),d1
    e1e4:	|  |         jsr -306(a6)
    e1e8:	|  |         move.l d0,18(sp)
    e1ec:	|  |         move.l 18(sp),d0
    e1f0:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    e1f4:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    e1fa:	|  |         cmpi.b #10,17(sp)
    e200:	|  |  ,----- beq.s e20a <readTextPlain+0x7e>
    e202:	|  |  |      moveq #-1,d0
    e204:	|  |  |      cmp.l 110(sp),d0
    e208:	|  |  |  ,-- bne.s e210 <readTextPlain+0x84>
            keepGoing = FALSE;
    e20a:	|  |  '--|-> clr.w 114(sp)
    e20e:	|  +-----|-- bra.s e214 <readTextPlain+0x88>
        } else {
            stringSize++;
    e210:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    e214:	|  '-------> tst.w 114(sp)
    e218:	'----------- bne.s e1d2 <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    e21a:	             tst.l 116(sp)
    e21e:	         ,-- bne.s e22e <readTextPlain+0xa2>
    e220:	         |   moveq #-1,d0
    e222:	         |   cmp.l 110(sp),d0
    e226:	         +-- bne.s e22e <readTextPlain+0xa2>
        return NULL;
    e228:	         |   moveq #0,d0
    e22a:	      ,--|-- bra.w e314 <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    e22e:	      |  '-> move.l 124(sp),86(sp)
    e234:	      |      move.l 90(sp),82(sp)
    e23a:	      |      moveq #-1,d0
    e23c:	      |      move.l d0,78(sp)
    e240:	      |      move.l 1ce92 <DOSBase>,d0
    e246:	      |      movea.l d0,a6
    e248:	      |      move.l 86(sp),d1
    e24c:	      |      move.l 82(sp),d2
    e250:	      |      move.l 78(sp),d3
    e254:	      |      jsr -66(a6)
    e258:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    e25c:	      |      move.l 116(sp),d0
    e260:	      |      addq.l #1,d0
    e262:	      |      move.l d0,70(sp)
    e266:	      |      clr.l 66(sp)
    e26a:	      |      move.l 1ce8a <SysBase>,d0
    e270:	      |      movea.l d0,a6
    e272:	      |      move.l 70(sp),d0
    e276:	      |      move.l 66(sp),d1
    e27a:	      |      jsr -684(a6)
    e27e:	      |      move.l d0,62(sp)
    e282:	      |      move.l 62(sp),d0
    e286:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    e28a:	      |  ,-- bne.s e292 <readTextPlain+0x106>
    e28c:	      |  |   moveq #0,d0
    e28e:	      +--|-- bra.w e314 <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    e292:	      |  '-> move.l 124(sp),54(sp)
    e298:	      |      move.l 58(sp),50(sp)
    e29e:	      |      moveq #1,d0
    e2a0:	      |      move.l d0,46(sp)
    e2a4:	      |      move.l 116(sp),42(sp)
    e2aa:	      |      move.l 1ce92 <DOSBase>,d0
    e2b0:	      |      movea.l d0,a6
    e2b2:	      |      move.l 54(sp),d1
    e2b6:	      |      move.l 50(sp),d2
    e2ba:	      |      move.l 46(sp),d3
    e2be:	      |      move.l 42(sp),d4
    e2c2:	      |      jsr -324(a6)
    e2c6:	      |      move.l d0,38(sp)
    e2ca:	      |      move.l 38(sp),d0
    e2ce:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    e2d2:	      |      move.l 34(sp),d0
    e2d6:	      |      cmp.l 116(sp),d0
    e2da:	      |  ,-- beq.s e2ea <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    e2dc:	      |  |   pea 19c2c <PutChar+0x1adc>
    e2e2:	      |  |   jsr 176ae <KPrintF>
    e2e8:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    e2ea:	      |  '-> move.l 124(sp),30(sp)
    e2f0:	      |      move.l 1ce92 <DOSBase>,d0
    e2f6:	      |      movea.l d0,a6
    e2f8:	      |      move.l 30(sp),d1
    e2fc:	      |      jsr -306(a6)
    e300:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    e304:	      |      move.l 116(sp),d0
    e308:	      |      movea.l 58(sp),a0
    e30c:	      |      adda.l d0,a0
    e30e:	      |      clr.b (a0)
    }

    return reply;
    e310:	      |      move.l 58(sp),d0
}
    e314:	      '----> movem.l (sp)+,d2-d4/a6
    e318:	             lea 104(sp),sp
    e31c:	             rts

0000e31e <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e31e:	                      lea -144(sp),sp
    e322:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e326:	                      move.l 160(sp),148(sp)
    e32c:	                      move.l #1006,144(sp)
    e334:	                      move.l 1ce92 <DOSBase>,d0
    e33a:	                      movea.l d0,a6
    e33c:	                      move.l 148(sp),d1
    e340:	                      move.l 144(sp),d2
    e344:	                      jsr -30(a6)
    e348:	                      move.l d0,140(sp)
    e34c:	                      move.l 140(sp),d0
    e350:	                      move.l d0,136(sp)

    if (!fp) {
    e354:	                  ,-- bne.s e36e <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e356:	                  |   move.l 160(sp),-(sp)
    e35a:	                  |   pea 19c4d <PutChar+0x1afd>
    e360:	                  |   jsr 176ae <KPrintF>
    e366:	                  |   addq.l #8,sp
        return FALSE;
    e368:	                  |   clr.w d0
    e36a:	,-----------------|-- bra.w e62a <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e36e:	|                 '-> movea.l 164(sp),a0
    e372:	|                     movea.l 4(a0),a0
    e376:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e37a:	|                     move.w 1cf3e <saveEncoding>,d0
    e380:	|                     move.l d0,d0
    e382:	|                     move.b d0,1cf3c <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e388:	|                     move.w 1cf3e <saveEncoding>,d0
    e38e:	|                     lsr.w #8,d0
    e390:	|                     move.l d0,d0
    e392:	|                     move.b d0,1cf3d <encode2>

    if (saveEncoding) {
    e398:	|                     move.w 1cf3e <saveEncoding>,d0
    e39e:	|                 ,-- beq.s e3f0 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    e3a0:	|                 |   move.l 136(sp),116(sp)
    e3a6:	|                 |   move.l #105191,112(sp)
    e3ae:	|                 |   moveq #99,d0
    e3b0:	|                 |   not.b d0
    e3b2:	|                 |   add.l sp,d0
    e3b4:	|                 |   addi.l #-144,d0
    e3ba:	|                 |   move.l d0,108(sp)
    e3be:	|                 |   move.l 1ce92 <DOSBase>,d0
    e3c4:	|                 |   movea.l d0,a6
    e3c6:	|                 |   move.l 116(sp),d1
    e3ca:	|                 |   move.l 112(sp),d2
    e3ce:	|                 |   move.l 108(sp),d3
    e3d2:	|                 |   jsr -354(a6)
    e3d6:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e3da:	|                 |   move.l 136(sp),-(sp)
    e3de:	|                 |   pea 19b66 <PutChar+0x1a16>
    e3e4:	|                 |   jsr e634 <writeStringEncoded>
    e3ea:	|                 |   addq.l #8,sp
    e3ec:	|  ,--------------|-- bra.w e602 <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e3f0:	|  |              '-> move.l 136(sp),132(sp)
    e3f6:	|  |                  move.l #105217,128(sp)
    e3fe:	|  |                  moveq #99,d1
    e400:	|  |                  not.b d1
    e402:	|  |                  add.l sp,d1
    e404:	|  |                  addi.l #-144,d1
    e40a:	|  |                  move.l d1,124(sp)
    e40e:	|  |                  move.l 1ce92 <DOSBase>,d0
    e414:	|  |                  movea.l d0,a6
    e416:	|  |                  move.l 132(sp),d1
    e41a:	|  |                  move.l 128(sp),d2
    e41e:	|  |                  move.l 124(sp),d3
    e422:	|  |                  jsr -354(a6)
    e426:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e42a:	|  +----------------- bra.w e602 <stackToFile+0x2e4>
        if (saveEncoding) {
    e42e:	|  |  ,-------------> move.w 1cf3e <saveEncoding>,d0
    e434:	|  |  |     ,-------- beq.w e586 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e438:	|  |  |     |         movea.l 152(sp),a0
    e43c:	|  |  |     |         move.l (a0),d0
    e43e:	|  |  |     |         moveq #1,d1
    e440:	|  |  |     |         cmp.l d0,d1
    e442:	|  |  |     |     ,-- beq.s e492 <stackToFile+0x174>
    e444:	|  |  |     |     |   moveq #3,d1
    e446:	|  |  |     |     |   cmp.l d0,d1
    e448:	|  |  |     |  ,--|-- bne.w e554 <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e44c:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e452:	|  |  |     |  |  |   move.b 1cf3c <encode1>,d0
    e458:	|  |  |     |  |  |   ext.w d0
    e45a:	|  |  |     |  |  |   movea.w d0,a0
    e45c:	|  |  |     |  |  |   move.l a0,72(sp)
    e460:	|  |  |     |  |  |   move.l 1ce92 <DOSBase>,d0
    e466:	|  |  |     |  |  |   movea.l d0,a6
    e468:	|  |  |     |  |  |   move.l 76(sp),d1
    e46c:	|  |  |     |  |  |   move.l 72(sp),d2
    e470:	|  |  |     |  |  |   jsr -312(a6)
    e474:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e478:	|  |  |     |  |  |   movea.l 152(sp),a0
    e47c:	|  |  |     |  |  |   move.l 4(a0),d0
    e480:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e484:	|  |  |     |  |  |   move.l d0,-(sp)
    e486:	|  |  |     |  |  |   jsr e634 <writeStringEncoded>
    e48c:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e48e:	|  |  |  ,--|--|--|-- bra.w e5f8 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e492:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    e496:	|  |  |  |  |  |      move.l 4(a0),d0
    e49a:	|  |  |  |  |  |  ,-- bmi.s e50a <stackToFile+0x1ec>
    e49c:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e4a0:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e4a4:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e4aa:	|  |  |  |  |  |  +-- bgt.s e50a <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e4ac:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e4b2:	|  |  |  |  |  |  |   move.b 1cf3c <encode1>,d0
    e4b8:	|  |  |  |  |  |  |   eori.b #2,d0
    e4bc:	|  |  |  |  |  |  |   ext.w d0
    e4be:	|  |  |  |  |  |  |   movea.w d0,a0
    e4c0:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e4c4:	|  |  |  |  |  |  |   move.l 1ce92 <DOSBase>,d0
    e4ca:	|  |  |  |  |  |  |   movea.l d0,a6
    e4cc:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e4d0:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e4d4:	|  |  |  |  |  |  |   jsr -312(a6)
    e4d8:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e4dc:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e4e2:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e4e6:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e4ec:	|  |  |  |  |  |  |   move.l 1ce92 <DOSBase>,d0
    e4f2:	|  |  |  |  |  |  |   movea.l d0,a6
    e4f4:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e4f8:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e4fc:	|  |  |  |  |  |  |   jsr -312(a6)
    e500:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e504:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e506:	|  |  |  +--|--|--|-- bra.w e5f8 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e50a:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    e510:	|  |  |  |  |  |      move.b 1cf3c <encode1>,d0
    e516:	|  |  |  |  |  |      eori.b #1,d0
    e51a:	|  |  |  |  |  |      ext.w d0
    e51c:	|  |  |  |  |  |      movea.w d0,a0
    e51e:	|  |  |  |  |  |      move.l a0,36(sp)
    e522:	|  |  |  |  |  |      move.l 1ce92 <DOSBase>,d0
    e528:	|  |  |  |  |  |      movea.l d0,a6
    e52a:	|  |  |  |  |  |      move.l 40(sp),d1
    e52e:	|  |  |  |  |  |      move.l 36(sp),d2
    e532:	|  |  |  |  |  |      jsr -312(a6)
    e536:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e53a:	|  |  |  |  |  |      movea.l 152(sp),a0
    e53e:	|  |  |  |  |  |      move.l 4(a0),d0
    e542:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e546:	|  |  |  |  |  |      move.l d0,-(sp)
    e548:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e54e:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e550:	|  |  |  +--|--|----- bra.w e5f8 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e554:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    e558:	|  |  |  |  |         pea 19c5f <PutChar+0x1b0f>
    e55e:	|  |  |  |  |         jsr 176ae <KPrintF>
    e564:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e566:	|  |  |  |  |         move.l 136(sp),28(sp)
    e56c:	|  |  |  |  |         move.l 1ce92 <DOSBase>,d0
    e572:	|  |  |  |  |         movea.l d0,a6
    e574:	|  |  |  |  |         move.l 28(sp),d1
    e578:	|  |  |  |  |         jsr -36(a6)
    e57c:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e580:	|  |  |  |  |         clr.w d0
    e582:	+--|--|--|--|-------- bra.w e62a <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e586:	|  |  |  |  '-------> move.l 152(sp),d0
    e58a:	|  |  |  |            move.l d0,-(sp)
    e58c:	|  |  |  |            jsr 151a4 <getTextFromAnyVar>
    e592:	|  |  |  |            addq.l #4,sp
    e594:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e598:	|  |  |  |     ,----- beq.s e60c <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e59a:	|  |  |  |     |      movea.l 100(sp),a0
    e59e:	|  |  |  |     |      move.b (a0),d0
    e5a0:	|  |  |  |     |      ext.w d0
    e5a2:	|  |  |  |     |      movea.w d0,a0
    e5a4:	|  |  |  |     |      move.l a0,12(sp)
    e5a8:	|  |  |  |     |      move.l 136(sp),96(sp)
    e5ae:	|  |  |  |     |      move.l #105659,92(sp)
    e5b6:	|  |  |  |     |      moveq #99,d0
    e5b8:	|  |  |  |     |      not.b d0
    e5ba:	|  |  |  |     |      add.l sp,d0
    e5bc:	|  |  |  |     |      addi.l #-144,d0
    e5c2:	|  |  |  |     |      move.l d0,88(sp)
    e5c6:	|  |  |  |     |      move.l 1ce92 <DOSBase>,d0
    e5cc:	|  |  |  |     |      movea.l d0,a6
    e5ce:	|  |  |  |     |      move.l 96(sp),d1
    e5d2:	|  |  |  |     |      move.l 92(sp),d2
    e5d6:	|  |  |  |     |      move.l 88(sp),d3
    e5da:	|  |  |  |     |      jsr -354(a6)
    e5de:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e5e2:	|  |  |  |     |      move.l 100(sp),80(sp)
    e5e8:	|  |  |  |     |      move.l 1ce8a <SysBase>,d0
    e5ee:	|  |  |  |     |      movea.l d0,a6
    e5f0:	|  |  |  |     |      movea.l 80(sp),a1
    e5f4:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e5f8:	|  |  |  '-----|----> movea.l 152(sp),a0
    e5fc:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e602:	|  '--|--------|----> tst.l 152(sp)
    e606:	|     '--------|----- bne.w e42e <stackToFile+0x110>
    e60a:	|              |  ,-- bra.s e60e <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e60c:	|              '--|-> nop
    }
    Close(fp);
    e60e:	|                 '-> move.l 136(sp),20(sp)
    e614:	|                     move.l 1ce92 <DOSBase>,d0
    e61a:	|                     movea.l d0,a6
    e61c:	|                     move.l 20(sp),d1
    e620:	|                     jsr -36(a6)
    e624:	|                     move.l d0,16(sp)
    return TRUE;
    e628:	|                     moveq #1,d0
}
    e62a:	'-------------------> movem.l (sp)+,d2-d3/a6
    e62e:	                      lea 144(sp),sp
    e632:	                      rts

0000e634 <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e634:	       lea -20(sp),sp
    e638:	       move.l a6,-(sp)
    e63a:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e63c:	       move.l 32(sp),-(sp)
    e640:	       jsr 140ba <strlen>
    e646:	       addq.l #4,sp
    e648:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e64c:	       move.l 36(sp),-(sp)
    e650:	       move.l 24(sp),-(sp)
    e654:	       jsr 8d0 <put2bytes>
    e65a:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e65c:	       clr.l 24(sp)
    e660:	   ,-- bra.s e6b6 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e662:	,--|-> move.l 36(sp),16(sp)
    e668:	|  |   move.l 24(sp),d0
    e66c:	|  |   movea.l 32(sp),a0
    e670:	|  |   adda.l d0,a0
    e672:	|  |   move.b (a0),d1
    e674:	|  |   move.b 1cf3c <encode1>,d0
    e67a:	|  |   eor.b d1,d0
    e67c:	|  |   ext.w d0
    e67e:	|  |   movea.w d0,a0
    e680:	|  |   move.l a0,12(sp)
    e684:	|  |   move.l 1ce92 <DOSBase>,d0
    e68a:	|  |   movea.l d0,a6
    e68c:	|  |   move.l 16(sp),d1
    e690:	|  |   move.l 12(sp),d2
    e694:	|  |   jsr -312(a6)
    e698:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e69c:	|  |   move.b 1cf3c <encode1>,d0
    e6a2:	|  |   move.b d0,d1
    e6a4:	|  |   move.b 1cf3d <encode2>,d0
    e6aa:	|  |   add.b d1,d0
    e6ac:	|  |   move.b d0,1cf3c <encode1>
	for (a = 0; a < len; a ++) {
    e6b2:	|  |   addq.l #1,24(sp)
    e6b6:	|  '-> move.l 24(sp),d0
    e6ba:	|      cmp.l 20(sp),d0
    e6be:	'----- blt.s e662 <writeStringEncoded+0x2e>
	}
}
    e6c0:	       nop
    e6c2:	       nop
    e6c4:	       move.l (sp)+,d2
    e6c6:	       movea.l (sp)+,a6
    e6c8:	       lea 20(sp),sp
    e6cc:	       rts

0000e6ce <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e6ce:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e6d0:	                   tst.l 8(sp)
    e6d4:	               ,-- bne.s e6da <failSecurityCheck+0xc>
    e6d6:	               |   moveq #1,d0
    e6d8:	,--------------|-- bra.s e758 <failSecurityCheck+0x8a>

	int a = 0;
    e6da:	|              '-> clr.l (sp)

	while (fn[a]) {
    e6dc:	|     ,----------- bra.s e74a <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e6de:	|  ,--|----------> move.l (sp),d0
    e6e0:	|  |  |            movea.l 8(sp),a0
    e6e4:	|  |  |            adda.l d0,a0
    e6e6:	|  |  |            move.b (a0),d0
    e6e8:	|  |  |            ext.w d0
    e6ea:	|  |  |            movea.w d0,a0
    e6ec:	|  |  |            moveq #124,d0
    e6ee:	|  |  |            cmp.l a0,d0
    e6f0:	|  |  |     ,----- beq.s e732 <failSecurityCheck+0x64>
    e6f2:	|  |  |     |      moveq #124,d1
    e6f4:	|  |  |     |      cmp.l a0,d1
    e6f6:	|  |  |  ,--|----- blt.s e748 <failSecurityCheck+0x7a>
    e6f8:	|  |  |  |  |      moveq #92,d0
    e6fa:	|  |  |  |  |      cmp.l a0,d0
    e6fc:	|  |  |  |  +----- beq.s e732 <failSecurityCheck+0x64>
    e6fe:	|  |  |  |  |      moveq #92,d1
    e700:	|  |  |  |  |      cmp.l a0,d1
    e702:	|  |  |  +--|----- blt.s e748 <failSecurityCheck+0x7a>
    e704:	|  |  |  |  |      moveq #60,d0
    e706:	|  |  |  |  |      cmp.l a0,d0
    e708:	|  |  |  |  |  ,-- blt.s e728 <failSecurityCheck+0x5a>
    e70a:	|  |  |  |  |  |   moveq #34,d1
    e70c:	|  |  |  |  |  |   cmp.l a0,d1
    e70e:	|  |  |  +--|--|-- bgt.s e748 <failSecurityCheck+0x7a>
    e710:	|  |  |  |  |  |   moveq #-34,d1
    e712:	|  |  |  |  |  |   add.l a0,d1
    e714:	|  |  |  |  |  |   move.l #83894529,d0
    e71a:	|  |  |  |  |  |   lsr.l d1,d0
    e71c:	|  |  |  |  |  |   moveq #1,d1
    e71e:	|  |  |  |  |  |   and.l d1,d0
    e720:	|  |  |  |  |  |   sne d0
    e722:	|  |  |  |  |  |   neg.b d0
    e724:	|  |  |  |  +--|-- bne.s e732 <failSecurityCheck+0x64>
    e726:	|  |  |  +--|--|-- bra.s e748 <failSecurityCheck+0x7a>
    e728:	|  |  |  |  |  '-> lea -62(a0),a0
    e72c:	|  |  |  |  |      moveq #1,d0
    e72e:	|  |  |  |  |      cmp.l a0,d0
    e730:	|  |  |  +--|----- bcs.s e748 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e732:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e736:	|  |  |  |         pea 19cbf <PutChar+0x1b6f>
    e73c:	|  |  |  |         jsr 176ae <KPrintF>
    e742:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e744:	|  |  |  |         moveq #1,d0
    e746:	+--|--|--|-------- bra.s e758 <failSecurityCheck+0x8a>
		}
		a++;
    e748:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e74a:	|  |  '----------> move.l (sp),d0
    e74c:	|  |               movea.l 8(sp),a0
    e750:	|  |               adda.l d0,a0
    e752:	|  |               move.b (a0),d0
    e754:	|  '-------------- bne.s e6de <failSecurityCheck+0x10>
	}
	return FALSE;
    e756:	|                  clr.w d0
}
    e758:	'----------------> addq.l #4,sp
    e75a:	                   rts

0000e75c <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e75c:	             lea -24(sp),sp
    e760:	             move.l a6,-(sp)
    e762:	             move.l 40(sp),d0
    e766:	             move.w d0,d0
    e768:	             move.w d0,6(sp)
	int fileNum = -1;
    e76c:	             moveq #-1,d0
    e76e:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e772:	             jsr 6df8 <killSpeechTimers>

	switch (numParams) {
    e778:	             moveq #2,d0
    e77a:	             cmp.l 32(sp),d0
    e77e:	      ,----- beq.s e7c2 <sayCore+0x66>
    e780:	      |      moveq #3,d0
    e782:	      |      cmp.l 32(sp),d0
    e786:	,-----|----- bne.w e8a4 <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e78a:	|     |      movea.l 36(sp),a0
    e78e:	|     |      move.l 24(a0),d0
    e792:	|     |      move.l d0,-(sp)
    e794:	|     |      pea 5 <_start+0x5>
    e798:	|     |      lea 20(sp),a0
    e79c:	|     |      move.l a0,-(sp)
    e79e:	|     |      jsr 14bce <getValueType>
    e7a4:	|     |      lea 12(sp),sp
    e7a8:	|     |      tst.w d0
    e7aa:	|     |  ,-- bne.s e7b2 <sayCore+0x56>
    e7ac:	|     |  |   moveq #1,d0
    e7ae:	|  ,--|--|-- bra.w e8b4 <sayCore+0x158>
			trimStack (&fun -> stack);
    e7b2:	|  |  |  '-> moveq #24,d0
    e7b4:	|  |  |      add.l 36(sp),d0
    e7b8:	|  |  |      move.l d0,-(sp)
    e7ba:	|  |  |      jsr 15552 <trimStack>
    e7c0:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e7c2:	|  |  '----> movea.l 36(sp),a0
    e7c6:	|  |         move.l 24(a0),d0
    e7ca:	|  |         move.l d0,-(sp)
    e7cc:	|  |         jsr 151a4 <getTextFromAnyVar>
    e7d2:	|  |         addq.l #4,sp
    e7d4:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e7d8:	|  |     ,-- bne.s e7e0 <sayCore+0x84>
    e7da:	|  |     |   moveq #1,d0
    e7dc:	|  +-----|-- bra.w e8b4 <sayCore+0x158>
			trimStack (&fun -> stack);
    e7e0:	|  |     '-> moveq #24,d0
    e7e2:	|  |         add.l 36(sp),d0
    e7e6:	|  |         move.l d0,-(sp)
    e7e8:	|  |         jsr 15552 <trimStack>
    e7ee:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e7f0:	|  |         movea.l 36(sp),a0
    e7f4:	|  |         move.l 24(a0),d0
    e7f8:	|  |         move.l d0,-(sp)
    e7fa:	|  |         pea 7 <_start+0x7>
    e7fe:	|  |         lea 16(sp),a0
    e802:	|  |         move.l a0,-(sp)
    e804:	|  |         jsr 14bce <getValueType>
    e80a:	|  |         lea 12(sp),sp
    e80e:	|  |         tst.w d0
    e810:	|  |     ,-- bne.s e818 <sayCore+0xbc>
    e812:	|  |     |   moveq #1,d0
    e814:	|  +-----|-- bra.w e8b4 <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e818:	|  |     '-> movea.l 36(sp),a0
    e81c:	|  |         move.l 24(a0),d0
    e820:	|  |         move.l d0,-(sp)
    e822:	|  |         pea 7 <_start+0x7>
    e826:	|  |         lea 16(sp),a0
    e82a:	|  |         move.l a0,-(sp)
    e82c:	|  |         jsr 14bce <getValueType>
    e832:	|  |         lea 12(sp),sp
    e836:	|  |         tst.w d0
    e838:	|  |     ,-- bne.s e83e <sayCore+0xe2>
    e83a:	|  |     |   moveq #1,d0
    e83c:	|  +-----|-- bra.s e8b4 <sayCore+0x158>
			trimStack (&fun -> stack);
    e83e:	|  |     '-> moveq #24,d0
    e840:	|  |         add.l 36(sp),d0
    e844:	|  |         move.l d0,-(sp)
    e846:	|  |         jsr 15552 <trimStack>
    e84c:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e84e:	|  |         movea.w 6(sp),a0
    e852:	|  |         move.l 12(sp),d1
    e856:	|  |         move.l 8(sp),d0
    e85a:	|  |         move.l a0,-(sp)
    e85c:	|  |         move.l d1,-(sp)
    e85e:	|  |         move.l d0,-(sp)
    e860:	|  |         move.l 36(sp),-(sp)
    e864:	|  |         jsr 4560 <wrapSpeech>
    e86a:	|  |         lea 16(sp),sp
    e86e:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e872:	|  |         movea.l 36(sp),a0
    e876:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e87c:	|  |         movea.l 36(sp),a0
    e880:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e886:	|  |         move.l 24(sp),16(sp)
    e88c:	|  |         move.l 1ce8a <SysBase>,d0
    e892:	|  |         movea.l d0,a6
    e894:	|  |         movea.l 16(sp),a1
    e898:	|  |         jsr -690(a6)
			newText = NULL;
    e89c:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e8a0:	|  |         moveq #0,d0
    e8a2:	|  +-------- bra.s e8b4 <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e8a4:	'--|-------> pea 19d45 <PutChar+0x1bf5>
    e8aa:	   |         jsr 176ae <KPrintF>
    e8b0:	   |         addq.l #4,sp
	return BR_ERROR;
    e8b2:	   |         moveq #1,d0
}
    e8b4:	   '-------> movea.l (sp)+,a6
    e8b6:	             lea 24(sp),sp
    e8ba:	             rts

0000e8bc <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e8bc:	pea 1 <_start+0x1>
    e8c0:	move.l 12(sp),-(sp)
    e8c4:	move.l 12(sp),-(sp)
    e8c8:	jsr e75c <sayCore>
    e8ce:	lea 12(sp),sp
}
    e8d2:	rts

0000e8d4 <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e8d4:	clr.l -(sp)
    e8d6:	move.l 12(sp),-(sp)
    e8da:	move.l 12(sp),-(sp)
    e8de:	jsr e75c <sayCore>
    e8e4:	lea 12(sp),sp
}
    e8e8:	rts

0000e8ea <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e8ea:	jsr 1559a <freeze>
	freezeSubs (); 
    e8f0:	jsr 63e8 <freezeSubs>
	fun -> freezerLevel = 0;
    e8f6:	movea.l 8(sp),a0
    e8fa:	clr.b 56(a0)
	return BR_CONTINUE;
    e8fe:	moveq #2,d0
}
    e900:	rts

0000e902 <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e902:	jsr 1579e <unfreeze>
	unfreezeSubs (); 
    e908:	jsr 79a8 <unfreezeSubs>
	return BR_CONTINUE;
    e90e:	moveq #2,d0
}
    e910:	rts

0000e912 <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e912:	jsr 1577a <howFrozen>
    e918:	move.l d0,d1
    e91a:	moveq #28,d0
    e91c:	add.l 8(sp),d0
    e920:	move.l d1,-(sp)
    e922:	pea 1 <_start+0x1>
    e926:	move.l d0,-(sp)
    e928:	jsr 154c0 <setVariable>
    e92e:	lea 12(sp),sp
	return BR_CONTINUE; 
    e932:	moveq #2,d0
}
    e934:	rts

0000e936 <builtIn_setCursor>:

builtIn(setCursor)
{
    e936:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e938:	movea.l 12(sp),a0
    e93c:	move.l 24(a0),d0
    e940:	move.l d0,-(sp)
    e942:	jsr 150a6 <getAnimationFromVar>
    e948:	addq.l #4,sp
    e94a:	move.l d0,(sp)
	pickAnimCursor (aa);
    e94c:	move.l (sp),-(sp)
    e94e:	jsr d6c <pickAnimCursor>
    e954:	addq.l #4,sp
	trimStack (&fun -> stack);
    e956:	moveq #24,d0
    e958:	add.l 12(sp),d0
    e95c:	move.l d0,-(sp)
    e95e:	jsr 15552 <trimStack>
    e964:	addq.l #4,sp
	return BR_CONTINUE;
    e966:	moveq #2,d0
}
    e968:	addq.l #4,sp
    e96a:	rts

0000e96c <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e96c:	move.l 1ce46 <input+0xa>,d1
    e972:	move.l 1cf40 <cameraX>,d0
    e978:	add.l d0,d1
    e97a:	moveq #28,d0
    e97c:	add.l 8(sp),d0
    e980:	move.l d1,-(sp)
    e982:	pea 1 <_start+0x1>
    e986:	move.l d0,-(sp)
    e988:	jsr 154c0 <setVariable>
    e98e:	lea 12(sp),sp
	return BR_CONTINUE;
    e992:	moveq #2,d0
}
    e994:	rts

0000e996 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e996:	move.l 1ce4a <input+0xe>,d1
    e99c:	move.l 1cf44 <cameraY>,d0
    e9a2:	add.l d0,d1
    e9a4:	moveq #28,d0
    e9a6:	add.l 8(sp),d0
    e9aa:	move.l d1,-(sp)
    e9ac:	pea 1 <_start+0x1>
    e9b0:	move.l d0,-(sp)
    e9b2:	jsr 154c0 <setVariable>
    e9b8:	lea 12(sp),sp
	return BR_CONTINUE;
    e9bc:	moveq #2,d0
}
    e9be:	rts

0000e9c0 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e9c0:	move.l 1ce46 <input+0xa>,d0
    e9c6:	move.l d0,-(sp)
    e9c8:	jsr 17ae0 <__floatsisf>
    e9ce:	addq.l #4,sp
    e9d0:	move.l d0,d1
    e9d2:	move.l 1c826 <cameraZoom>,d0
    e9d8:	move.l d0,-(sp)
    e9da:	move.l d1,-(sp)
    e9dc:	jsr 17b92 <__mulsf3>
    e9e2:	addq.l #8,sp
    e9e4:	move.l d0,-(sp)
    e9e6:	jsr 17a78 <__fixsfsi>
    e9ec:	addq.l #4,sp
    e9ee:	move.l d0,d1
    e9f0:	moveq #28,d0
    e9f2:	add.l 8(sp),d0
    e9f6:	move.l d1,-(sp)
    e9f8:	pea 1 <_start+0x1>
    e9fc:	move.l d0,-(sp)
    e9fe:	jsr 154c0 <setVariable>
    ea04:	lea 12(sp),sp
	return BR_CONTINUE;
    ea08:	moveq #2,d0
}
    ea0a:	rts

0000ea0c <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    ea0c:	move.l 1ce4a <input+0xe>,d0
    ea12:	move.l d0,-(sp)
    ea14:	jsr 17ae0 <__floatsisf>
    ea1a:	addq.l #4,sp
    ea1c:	move.l d0,d1
    ea1e:	move.l 1c826 <cameraZoom>,d0
    ea24:	move.l d0,-(sp)
    ea26:	move.l d1,-(sp)
    ea28:	jsr 17b92 <__mulsf3>
    ea2e:	addq.l #8,sp
    ea30:	move.l d0,-(sp)
    ea32:	jsr 17a78 <__fixsfsi>
    ea38:	addq.l #4,sp
    ea3a:	move.l d0,d1
    ea3c:	moveq #28,d0
    ea3e:	add.l 8(sp),d0
    ea42:	move.l d1,-(sp)
    ea44:	pea 1 <_start+0x1>
    ea48:	move.l d0,-(sp)
    ea4a:	jsr 154c0 <setVariable>
    ea50:	lea 12(sp),sp
	return BR_CONTINUE;
    ea54:	moveq #2,d0
}
    ea56:	rts

0000ea58 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    ea58:	jsr 89da <statusBarText>
    ea5e:	move.l d0,d1
    ea60:	moveq #28,d0
    ea62:	add.l 8(sp),d0
    ea66:	move.l d1,-(sp)
    ea68:	move.l d0,-(sp)
    ea6a:	jsr 14df0 <makeTextVar>
    ea70:	addq.l #8,sp
	return BR_CONTINUE;
    ea72:	moveq #2,d0
}
    ea74:	rts

0000ea76 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    ea76:	       lea -20(sp),sp
    ea7a:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    ea7c:	       movea.l 32(sp),a0
    ea80:	       move.l 24(a0),d0
    ea84:	       move.l d0,-(sp)
    ea86:	       jsr 151a4 <getTextFromAnyVar>
    ea8c:	       addq.l #4,sp
    ea8e:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    ea92:	   ,-- bne.s ea9a <builtIn_getMatchingFiles+0x24>
    ea94:	   |   moveq #1,d0
    ea96:	,--|-- bra.w eb5c <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    ea9a:	|  '-> moveq #24,d0
    ea9c:	|      add.l 32(sp),d0
    eaa0:	|      move.l d0,-(sp)
    eaa2:	|      jsr 15552 <trimStack>
    eaa8:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    eaaa:	|      moveq #28,d0
    eaac:	|      add.l 32(sp),d0
    eab0:	|      move.l d0,-(sp)
    eab2:	|      jsr 14e1c <unlinkVar>
    eab8:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    eaba:	|      movea.l 32(sp),a0
    eabe:	|      moveq #6,d0
    eac0:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    eac4:	|      moveq #12,d0
    eac6:	|      move.l d0,16(sp)
    eaca:	|      clr.l 12(sp)
    eace:	|      move.l 1ce8a <SysBase>,d0
    ead4:	|      movea.l d0,a6
    ead6:	|      move.l 16(sp),d0
    eada:	|      move.l 12(sp),d1
    eade:	|      jsr -684(a6)
    eae2:	|      move.l d0,8(sp)
    eae6:	|      move.l 8(sp),d0
    eaea:	|      movea.l 32(sp),a0
    eaee:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    eaf2:	|      moveq #32,d0
    eaf4:	|      add.l 32(sp),d0
    eaf8:	|  ,-- bne.s eafe <builtIn_getMatchingFiles+0x88>
    eafa:	|  |   moveq #1,d0
    eafc:	+--|-- bra.s eb5c <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    eafe:	|  '-> movea.l 32(sp),a0
    eb02:	|      movea.l 32(a0),a0
    eb06:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    eb08:	|      movea.l 32(sp),a0
    eb0c:	|      movea.l 32(a0),a0
    eb10:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    eb14:	|      movea.l 32(sp),a0
    eb18:	|      movea.l 32(a0),a0
    eb1c:	|      moveq #1,d0
    eb1e:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    eb22:	|      movea.l 32(sp),a0
    eb26:	|      move.l 32(a0),d0
    eb2a:	|      move.l 20(sp),-(sp)
    eb2e:	|      move.l d0,-(sp)
    eb30:	|      jsr 1498a <getSavedGamesStack>
    eb36:	|      addq.l #8,sp
    eb38:	|      tst.w d0
    eb3a:	|  ,-- bne.s eb40 <builtIn_getMatchingFiles+0xca>
    eb3c:	|  |   moveq #1,d0
    eb3e:	+--|-- bra.s eb5c <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    eb40:	|  '-> move.l 20(sp),4(sp)
    eb46:	|      move.l 1ce8a <SysBase>,d0
    eb4c:	|      movea.l d0,a6
    eb4e:	|      movea.l 4(sp),a1
    eb52:	|      jsr -690(a6)
	newText = NULL;
    eb56:	|      clr.l 20(sp)
	return BR_CONTINUE;
    eb5a:	|      moveq #2,d0
}
    eb5c:	'----> movea.l (sp)+,a6
    eb5e:	       lea 20(sp),sp
    eb62:	       rts

0000eb64 <builtIn_saveGame>:

builtIn(saveGame)
{
    eb64:	       lea -12(sp),sp
    eb68:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    eb6a:	       movea.l 24(sp),a0
    eb6e:	       move.l 24(a0),d0
    eb72:	       move.l d0,-(sp)
    eb74:	       jsr 151a4 <getTextFromAnyVar>
    eb7a:	       addq.l #4,sp
    eb7c:	       move.l d0,1ce56 <loadNow>
    trimStack(&fun->stack);
    eb82:	       moveq #24,d0
    eb84:	       add.l 24(sp),d0
    eb88:	       move.l d0,-(sp)
    eb8a:	       jsr 15552 <trimStack>
    eb90:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    eb92:	       move.l 1ce56 <loadNow>,d0
    eb98:	       move.l d0,-(sp)
    eb9a:	       jsr 2fe <encodeFilename>
    eba0:	       addq.l #4,sp
    eba2:	       move.l d0,12(sp)
    FreeVec(loadNow);
    eba6:	       move.l 1ce56 <loadNow>,8(sp)
    ebae:	       move.l 1ce8a <SysBase>,d0
    ebb4:	       movea.l d0,a6
    ebb6:	       movea.l 8(sp),a1
    ebba:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    ebbe:	       move.l 12(sp),-(sp)
    ebc2:	       jsr e6ce <failSecurityCheck>
    ebc8:	       addq.l #4,sp
    ebca:	       tst.w d0
    ebcc:	   ,-- beq.s ebd2 <builtIn_saveGame+0x6e>
    ebce:	   |   moveq #1,d0
    ebd0:	,--|-- bra.s ec22 <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    ebd2:	|  '-> move.l 12(sp),-(sp)
    ebd6:	|      pea 19d73 <PutChar+0x1c23>
    ebdc:	|      jsr 140fa <joinStrings>
    ebe2:	|      addq.l #8,sp
    ebe4:	|      move.l d0,1ce56 <loadNow>
    FreeVec(aaaaa);
    ebea:	|      move.l 12(sp),4(sp)
    ebf0:	|      move.l 1ce8a <SysBase>,d0
    ebf6:	|      movea.l d0,a6
    ebf8:	|      movea.l 4(sp),a1
    ebfc:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    ec00:	|      moveq #28,d0
    ec02:	|      add.l 24(sp),d0
    ec06:	|      clr.l -(sp)
    ec08:	|      pea 1 <_start+0x1>
    ec0c:	|      move.l d0,-(sp)
    ec0e:	|      jsr 154c0 <setVariable>
    ec14:	|      lea 12(sp),sp
    saverFunc = fun;
    ec18:	|      move.l 24(sp),1cf50 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    ec20:	|      moveq #0,d0
}
    ec22:	'----> movea.l (sp)+,a6
    ec24:	       lea 12(sp),sp
    ec28:	       rts

0000ec2a <builtIn_fileExists>:

builtIn(fileExists)
{
    ec2a:	       lea -36(sp),sp
    ec2e:	       move.l a6,-(sp)
    ec30:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    ec32:	       movea.l 52(sp),a0
    ec36:	       move.l 24(a0),d0
    ec3a:	       move.l d0,-(sp)
    ec3c:	       jsr 151a4 <getTextFromAnyVar>
    ec42:	       addq.l #4,sp
    ec44:	       move.l d0,1ce56 <loadNow>
    trimStack(&fun->stack);
    ec4a:	       moveq #24,d0
    ec4c:	       add.l 52(sp),d0
    ec50:	       move.l d0,-(sp)
    ec52:	       jsr 15552 <trimStack>
    ec58:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    ec5a:	       move.l 1ce56 <loadNow>,d0
    ec60:	       move.l d0,-(sp)
    ec62:	       jsr 2fe <encodeFilename>
    ec68:	       addq.l #4,sp
    ec6a:	       move.l d0,40(sp)
    FreeVec(loadNow);
    ec6e:	       move.l 1ce56 <loadNow>,36(sp)
    ec76:	       move.l 1ce8a <SysBase>,d0
    ec7c:	       movea.l d0,a6
    ec7e:	       movea.l 36(sp),a1
    ec82:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    ec86:	       move.l 40(sp),-(sp)
    ec8a:	       jsr e6ce <failSecurityCheck>
    ec90:	       addq.l #4,sp
    ec92:	       tst.w d0
    ec94:	   ,-- beq.s ec9c <builtIn_fileExists+0x72>
    ec96:	   |   moveq #1,d0
    ec98:	,--|-- bra.w ed3c <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    ec9c:	|  '-> move.l 40(sp),32(sp)
    eca2:	|      move.l #1005,28(sp)
    ecaa:	|      move.l 1ce92 <DOSBase>,d0
    ecb0:	|      movea.l d0,a6
    ecb2:	|      move.l 32(sp),d1
    ecb6:	|      move.l 28(sp),d2
    ecba:	|      jsr -30(a6)
    ecbe:	|      move.l d0,24(sp)
    ecc2:	|      move.l 24(sp),d0
    ecc6:	|      move.l d0,20(sp)
    if (!fp) {        
    ecca:	|  ,-- bne.s ecda <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    eccc:	|  |   pea 19d75 <PutChar+0x1c25>
    ecd2:	|  |   jsr 176ae <KPrintF>
    ecd8:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    ecda:	|  '-> tst.l 20(sp)
    ecde:	|      sne d0
    ece0:	|      neg.b d0
    ece2:	|      moveq #0,d1
    ece4:	|      move.b d0,d1
    ece6:	|      moveq #28,d0
    ece8:	|      add.l 52(sp),d0
    ecec:	|      move.l d1,-(sp)
    ecee:	|      pea 1 <_start+0x1>
    ecf2:	|      move.l d0,-(sp)
    ecf4:	|      jsr 154c0 <setVariable>
    ecfa:	|      lea 12(sp),sp
    if (fp) Close(fp);
    ecfe:	|      tst.l 20(sp)
    ed02:	|  ,-- beq.s ed1e <builtIn_fileExists+0xf4>
    ed04:	|  |   move.l 20(sp),16(sp)
    ed0a:	|  |   move.l 1ce92 <DOSBase>,d0
    ed10:	|  |   movea.l d0,a6
    ed12:	|  |   move.l 16(sp),d1
    ed16:	|  |   jsr -36(a6)
    ed1a:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    ed1e:	|  '-> move.l 40(sp),8(sp)
    ed24:	|      move.l 1ce8a <SysBase>,d0
    ed2a:	|      movea.l d0,a6
    ed2c:	|      movea.l 8(sp),a1
    ed30:	|      jsr -690(a6)
    loadNow = NULL;
    ed34:	|      clr.l 1ce56 <loadNow>
    return BR_CONTINUE;
    ed3a:	|      moveq #2,d0
}
    ed3c:	'----> move.l (sp)+,d2
    ed3e:	       movea.l (sp)+,a6
    ed40:	       lea 36(sp),sp
    ed44:	       rts

0000ed46 <builtIn_loadGame>:

builtIn(loadGame)
{
    ed46:	       lea -36(sp),sp
    ed4a:	       move.l a6,-(sp)
    ed4c:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    ed4e:	       movea.l 52(sp),a0
    ed52:	       move.l 24(a0),d0
    ed56:	       move.l d0,-(sp)
    ed58:	       jsr 151a4 <getTextFromAnyVar>
    ed5e:	       addq.l #4,sp
    ed60:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    ed64:	       moveq #24,d0
    ed66:	       add.l 52(sp),d0
    ed6a:	       move.l d0,-(sp)
    ed6c:	       jsr 15552 <trimStack>
    ed72:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    ed74:	       move.l 40(sp),-(sp)
    ed78:	       jsr 2fe <encodeFilename>
    ed7e:	       addq.l #4,sp
    ed80:	       move.l d0,1ce56 <loadNow>
    FreeVec(aaaaa);
    ed86:	       move.l 40(sp),36(sp)
    ed8c:	       move.l 1ce8a <SysBase>,d0
    ed92:	       movea.l d0,a6
    ed94:	       movea.l 36(sp),a1
    ed98:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    ed9c:	       move.l 1ce56 <loadNow>,d0
    eda2:	       move.l d0,-(sp)
    eda4:	       jsr e6ce <failSecurityCheck>
    edaa:	       addq.l #4,sp
    edac:	       tst.w d0
    edae:	   ,-- beq.s edb4 <builtIn_loadGame+0x6e>
    edb0:	   |   moveq #1,d0
    edb2:	,--|-- bra.s ee24 <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    edb4:	|  '-> move.l 1ce56 <loadNow>,32(sp)
    edbc:	|      move.l #1005,28(sp)
    edc4:	|      move.l 1ce92 <DOSBase>,d0
    edca:	|      movea.l d0,a6
    edcc:	|      move.l 32(sp),d1
    edd0:	|      move.l 28(sp),d2
    edd4:	|      jsr -30(a6)
    edd8:	|      move.l d0,24(sp)
    eddc:	|      move.l 24(sp),d0
    ede0:	|      move.l d0,20(sp)
    if (fp) {
    ede4:	|  ,-- beq.s ee04 <builtIn_loadGame+0xbe>
        Close(fp);
    ede6:	|  |   move.l 20(sp),12(sp)
    edec:	|  |   move.l 1ce92 <DOSBase>,d0
    edf2:	|  |   movea.l d0,a6
    edf4:	|  |   move.l 12(sp),d1
    edf8:	|  |   jsr -36(a6)
    edfc:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    ee00:	|  |   moveq #0,d0
    ee02:	+--|-- bra.s ee24 <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    ee04:	|  '-> move.l 1ce56 <loadNow>,16(sp)
    ee0c:	|      move.l 1ce8a <SysBase>,d0
    ee12:	|      movea.l d0,a6
    ee14:	|      movea.l 16(sp),a1
    ee18:	|      jsr -690(a6)
    loadNow = NULL;
    ee1c:	|      clr.l 1ce56 <loadNow>
    return BR_CONTINUE;
    ee22:	|      moveq #2,d0
}
    ee24:	'----> move.l (sp)+,d2
    ee26:	       movea.l (sp)+,a6
    ee28:	       lea 36(sp),sp
    ee2c:	       rts

0000ee2e <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    ee2e:	move.l 1cf26 <sceneHeight>,d0
    ee34:	move.l d0,d1
    ee36:	move.l 1cf22 <sceneWidth>,d0
    ee3c:	move.l d1,-(sp)
    ee3e:	move.l d0,-(sp)
    ee40:	clr.l -(sp)
    ee42:	clr.l -(sp)
    ee44:	jsr d5b8 <blankScreen>
    ee4a:	lea 16(sp),sp
	return BR_CONTINUE;
    ee4e:	moveq #2,d0
}
    ee50:	rts

0000ee52 <builtIn_blankArea>:

builtIn(blankArea)
{
    ee52:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ee56:	       movea.l 24(sp),a0
    ee5a:	       move.l 24(a0),d0
    ee5e:	       move.l d0,-(sp)
    ee60:	       pea 1 <_start+0x1>
    ee64:	       lea 8(sp),a0
    ee68:	       move.l a0,-(sp)
    ee6a:	       jsr 14bce <getValueType>
    ee70:	       lea 12(sp),sp
    ee74:	       tst.w d0
    ee76:	   ,-- bne.s ee7e <builtIn_blankArea+0x2c>
    ee78:	   |   moveq #1,d0
    ee7a:	,--|-- bra.w ef54 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ee7e:	|  '-> moveq #24,d0
    ee80:	|      add.l 24(sp),d0
    ee84:	|      move.l d0,-(sp)
    ee86:	|      jsr 15552 <trimStack>
    ee8c:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ee8e:	|      movea.l 24(sp),a0
    ee92:	|      move.l 24(a0),d0
    ee96:	|      move.l d0,-(sp)
    ee98:	|      pea 1 <_start+0x1>
    ee9c:	|      lea 12(sp),a0
    eea0:	|      move.l a0,-(sp)
    eea2:	|      jsr 14bce <getValueType>
    eea8:	|      lea 12(sp),sp
    eeac:	|      tst.w d0
    eeae:	|  ,-- bne.s eeb6 <builtIn_blankArea+0x64>
    eeb0:	|  |   moveq #1,d0
    eeb2:	+--|-- bra.w ef54 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eeb6:	|  '-> moveq #24,d0
    eeb8:	|      add.l 24(sp),d0
    eebc:	|      move.l d0,-(sp)
    eebe:	|      jsr 15552 <trimStack>
    eec4:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eec6:	|      movea.l 24(sp),a0
    eeca:	|      move.l 24(a0),d0
    eece:	|      move.l d0,-(sp)
    eed0:	|      pea 1 <_start+0x1>
    eed4:	|      moveq #16,d0
    eed6:	|      add.l sp,d0
    eed8:	|      move.l d0,-(sp)
    eeda:	|      jsr 14bce <getValueType>
    eee0:	|      lea 12(sp),sp
    eee4:	|      tst.w d0
    eee6:	|  ,-- bne.s eeec <builtIn_blankArea+0x9a>
    eee8:	|  |   moveq #1,d0
    eeea:	+--|-- bra.s ef54 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    eeec:	|  '-> moveq #24,d0
    eeee:	|      add.l 24(sp),d0
    eef2:	|      move.l d0,-(sp)
    eef4:	|      jsr 15552 <trimStack>
    eefa:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    eefc:	|      movea.l 24(sp),a0
    ef00:	|      move.l 24(a0),d0
    ef04:	|      move.l d0,-(sp)
    ef06:	|      pea 1 <_start+0x1>
    ef0a:	|      moveq #20,d0
    ef0c:	|      add.l sp,d0
    ef0e:	|      move.l d0,-(sp)
    ef10:	|      jsr 14bce <getValueType>
    ef16:	|      lea 12(sp),sp
    ef1a:	|      tst.w d0
    ef1c:	|  ,-- bne.s ef22 <builtIn_blankArea+0xd0>
    ef1e:	|  |   moveq #1,d0
    ef20:	+--|-- bra.s ef54 <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ef22:	|  '-> moveq #24,d0
    ef24:	|      add.l 24(sp),d0
    ef28:	|      move.l d0,-(sp)
    ef2a:	|      jsr 15552 <trimStack>
    ef30:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    ef32:	|      movea.l (sp),a1
    ef34:	|      movea.l 4(sp),a0
    ef38:	|      move.l 8(sp),d1
    ef3c:	|      move.l 12(sp),d0
    ef40:	|      move.l a1,-(sp)
    ef42:	|      move.l a0,-(sp)
    ef44:	|      move.l d1,-(sp)
    ef46:	|      move.l d0,-(sp)
    ef48:	|      jsr d5b8 <blankScreen>
    ef4e:	|      lea 16(sp),sp
	return BR_CONTINUE;
    ef52:	|      moveq #2,d0
}
    ef54:	'----> lea 16(sp),sp
    ef58:	       rts

0000ef5a <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    ef5a:	jsr d5d6 <darkScreen>
	return BR_CONTINUE;
    ef60:	moveq #2,d0
}
    ef62:	rts

0000ef64 <builtIn_addOverlay>:

builtIn(addOverlay)
{
    ef64:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef68:	       movea.l 20(sp),a0
    ef6c:	       move.l 24(a0),d0
    ef70:	       move.l d0,-(sp)
    ef72:	       pea 1 <_start+0x1>
    ef76:	       lea 8(sp),a0
    ef7a:	       move.l a0,-(sp)
    ef7c:	       jsr 14bce <getValueType>
    ef82:	       lea 12(sp),sp
    ef86:	       tst.w d0
    ef88:	   ,-- bne.s ef90 <builtIn_addOverlay+0x2c>
    ef8a:	   |   moveq #1,d0
    ef8c:	,--|-- bra.w f028 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ef90:	|  '-> moveq #24,d0
    ef92:	|      add.l 20(sp),d0
    ef96:	|      move.l d0,-(sp)
    ef98:	|      jsr 15552 <trimStack>
    ef9e:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    efa0:	|      movea.l 20(sp),a0
    efa4:	|      move.l 24(a0),d0
    efa8:	|      move.l d0,-(sp)
    efaa:	|      pea 1 <_start+0x1>
    efae:	|      moveq #12,d0
    efb0:	|      add.l sp,d0
    efb2:	|      move.l d0,-(sp)
    efb4:	|      jsr 14bce <getValueType>
    efba:	|      lea 12(sp),sp
    efbe:	|      tst.w d0
    efc0:	|  ,-- bne.s efc6 <builtIn_addOverlay+0x62>
    efc2:	|  |   moveq #1,d0
    efc4:	+--|-- bra.s f028 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    efc6:	|  '-> moveq #24,d0
    efc8:	|      add.l 20(sp),d0
    efcc:	|      move.l d0,-(sp)
    efce:	|      jsr 15552 <trimStack>
    efd4:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    efd6:	|      movea.l 20(sp),a0
    efda:	|      move.l 24(a0),d0
    efde:	|      move.l d0,-(sp)
    efe0:	|      pea 5 <_start+0x5>
    efe4:	|      moveq #16,d0
    efe6:	|      add.l sp,d0
    efe8:	|      move.l d0,-(sp)
    efea:	|      jsr 14bce <getValueType>
    eff0:	|      lea 12(sp),sp
    eff4:	|      tst.w d0
    eff6:	|  ,-- bne.s effc <builtIn_addOverlay+0x98>
    eff8:	|  |   moveq #1,d0
    effa:	+--|-- bra.s f028 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    effc:	|  '-> moveq #24,d0
    effe:	|      add.l 20(sp),d0
    f002:	|      move.l d0,-(sp)
    f004:	|      jsr 15552 <trimStack>
    f00a:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    f00c:	|      movea.l (sp),a0
    f00e:	|      move.l 4(sp),d1
    f012:	|      move.l 8(sp),d0
    f016:	|      move.l a0,-(sp)
    f018:	|      move.l d1,-(sp)
    f01a:	|      move.l d0,-(sp)
    f01c:	|      jsr d6f4 <loadBackDrop>
    f022:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f026:	|      moveq #2,d0
}
    f028:	'----> lea 12(sp),sp
    f02c:	       rts

0000f02e <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    f02e:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f032:	       movea.l 20(sp),a0
    f036:	       move.l 24(a0),d0
    f03a:	       move.l d0,-(sp)
    f03c:	       pea 1 <_start+0x1>
    f040:	       lea 8(sp),a0
    f044:	       move.l a0,-(sp)
    f046:	       jsr 14bce <getValueType>
    f04c:	       lea 12(sp),sp
    f050:	       tst.w d0
    f052:	   ,-- bne.s f05a <builtIn_mixOverlay+0x2c>
    f054:	   |   moveq #1,d0
    f056:	,--|-- bra.w f0f2 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f05a:	|  '-> moveq #24,d0
    f05c:	|      add.l 20(sp),d0
    f060:	|      move.l d0,-(sp)
    f062:	|      jsr 15552 <trimStack>
    f068:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f06a:	|      movea.l 20(sp),a0
    f06e:	|      move.l 24(a0),d0
    f072:	|      move.l d0,-(sp)
    f074:	|      pea 1 <_start+0x1>
    f078:	|      moveq #12,d0
    f07a:	|      add.l sp,d0
    f07c:	|      move.l d0,-(sp)
    f07e:	|      jsr 14bce <getValueType>
    f084:	|      lea 12(sp),sp
    f088:	|      tst.w d0
    f08a:	|  ,-- bne.s f090 <builtIn_mixOverlay+0x62>
    f08c:	|  |   moveq #1,d0
    f08e:	+--|-- bra.s f0f2 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f090:	|  '-> moveq #24,d0
    f092:	|      add.l 20(sp),d0
    f096:	|      move.l d0,-(sp)
    f098:	|      jsr 15552 <trimStack>
    f09e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    f0a0:	|      movea.l 20(sp),a0
    f0a4:	|      move.l 24(a0),d0
    f0a8:	|      move.l d0,-(sp)
    f0aa:	|      pea 5 <_start+0x5>
    f0ae:	|      moveq #16,d0
    f0b0:	|      add.l sp,d0
    f0b2:	|      move.l d0,-(sp)
    f0b4:	|      jsr 14bce <getValueType>
    f0ba:	|      lea 12(sp),sp
    f0be:	|      tst.w d0
    f0c0:	|  ,-- bne.s f0c6 <builtIn_mixOverlay+0x98>
    f0c2:	|  |   moveq #1,d0
    f0c4:	+--|-- bra.s f0f2 <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    f0c6:	|  '-> moveq #24,d0
    f0c8:	|      add.l 20(sp),d0
    f0cc:	|      move.l d0,-(sp)
    f0ce:	|      jsr 15552 <trimStack>
    f0d4:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    f0d6:	|      movea.l (sp),a0
    f0d8:	|      move.l 4(sp),d1
    f0dc:	|      move.l 8(sp),d0
    f0e0:	|      move.l a0,-(sp)
    f0e2:	|      move.l d1,-(sp)
    f0e4:	|      move.l d0,-(sp)
    f0e6:	|      jsr d76a <mixBackDrop>
    f0ec:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f0f0:	|      moveq #2,d0
}
    f0f2:	'----> lea 12(sp),sp
    f0f6:	       rts

0000f0f8 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    f0f8:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f0fc:	       movea.l 20(sp),a0
    f100:	       move.l 24(a0),d0
    f104:	       move.l d0,-(sp)
    f106:	       pea 1 <_start+0x1>
    f10a:	       lea 8(sp),a0
    f10e:	       move.l a0,-(sp)
    f110:	       jsr 14bce <getValueType>
    f116:	       lea 12(sp),sp
    f11a:	       tst.w d0
    f11c:	   ,-- bne.s f124 <builtIn_pasteImage+0x2c>
    f11e:	   |   moveq #1,d0
    f120:	,--|-- bra.w f1b4 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    f124:	|  '-> moveq #24,d0
    f126:	|      add.l 20(sp),d0
    f12a:	|      move.l d0,-(sp)
    f12c:	|      jsr 15552 <trimStack>
    f132:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f134:	|      movea.l 20(sp),a0
    f138:	|      move.l 24(a0),d0
    f13c:	|      move.l d0,-(sp)
    f13e:	|      pea 1 <_start+0x1>
    f142:	|      moveq #12,d0
    f144:	|      add.l sp,d0
    f146:	|      move.l d0,-(sp)
    f148:	|      jsr 14bce <getValueType>
    f14e:	|      lea 12(sp),sp
    f152:	|      tst.w d0
    f154:	|  ,-- bne.s f15a <builtIn_pasteImage+0x62>
    f156:	|  |   moveq #1,d0
    f158:	+--|-- bra.s f1b4 <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    f15a:	|  '-> moveq #24,d0
    f15c:	|      add.l 20(sp),d0
    f160:	|      move.l d0,-(sp)
    f162:	|      jsr 15552 <trimStack>
    f168:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    f16a:	|      movea.l 20(sp),a0
    f16e:	|      move.l 24(a0),d0
    f172:	|      move.l d0,-(sp)
    f174:	|      jsr 150a6 <getAnimationFromVar>
    f17a:	|      addq.l #4,sp
    f17c:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    f180:	|      moveq #24,d0
    f182:	|      add.l 20(sp),d0
    f186:	|      move.l d0,-(sp)
    f188:	|      jsr 15552 <trimStack>
    f18e:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    f190:	|      tst.l 8(sp)
    f194:	|  ,-- bne.s f19a <builtIn_pasteImage+0xa2>
    f196:	|  |   moveq #2,d0
    f198:	+--|-- bra.s f1b4 <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    f19a:	|  '-> move.l (sp),d1
    f19c:	|      move.l 4(sp),d0
    f1a0:	|      move.l 8(sp),-(sp)
    f1a4:	|      move.l d1,-(sp)
    f1a6:	|      move.l d0,-(sp)
    f1a8:	|      jsr d94 <pasteCursor>
    f1ae:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    f1b2:	|      moveq #2,d0
}
    f1b4:	'----> lea 12(sp),sp
    f1b8:	       rts

0000f1ba <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    f1ba:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f1bc:	       movea.l 16(sp),a0
    f1c0:	       move.l 24(a0),d0
    f1c4:	       move.l d0,-(sp)
    f1c6:	       pea 1 <_start+0x1>
    f1ca:	       move.l sp,d0
    f1cc:	       addq.l #8,d0
    f1ce:	       move.l d0,-(sp)
    f1d0:	       jsr 14bce <getValueType>
    f1d6:	       lea 12(sp),sp
    f1da:	       tst.w d0
    f1dc:	   ,-- bne.s f1e4 <builtIn_setSceneDimensions+0x2a>
    f1de:	   |   moveq #1,d0
    f1e0:	,--|-- bra.w f26c <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    f1e4:	|  '-> moveq #24,d0
    f1e6:	|      add.l 16(sp),d0
    f1ea:	|      move.l d0,-(sp)
    f1ec:	|      jsr 15552 <trimStack>
    f1f2:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f1f4:	|      movea.l 16(sp),a0
    f1f8:	|      move.l 24(a0),d0
    f1fc:	|      move.l d0,-(sp)
    f1fe:	|      pea 1 <_start+0x1>
    f202:	|      moveq #12,d0
    f204:	|      add.l sp,d0
    f206:	|      move.l d0,-(sp)
    f208:	|      jsr 14bce <getValueType>
    f20e:	|      lea 12(sp),sp
    f212:	|      tst.w d0
    f214:	|  ,-- bne.s f21a <builtIn_setSceneDimensions+0x60>
    f216:	|  |   moveq #1,d0
    f218:	+--|-- bra.s f26c <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    f21a:	|  '-> moveq #24,d0
    f21c:	|      add.l 16(sp),d0
    f220:	|      move.l d0,-(sp)
    f222:	|      jsr 15552 <trimStack>
    f228:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    f22a:	|      move.l (sp),d1
    f22c:	|      move.l 4(sp),d0
    f230:	|      move.l d1,-(sp)
    f232:	|      move.l d0,-(sp)
    f234:	|      jsr d7c0 <resizeBackdrop>
    f23a:	|      addq.l #8,sp
    f23c:	|      tst.w d0
    f23e:	|  ,-- beq.s f25c <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    f240:	|  |   move.l (sp),d1
    f242:	|  |   move.l 4(sp),d0
    f246:	|  |   move.l d1,-(sp)
    f248:	|  |   move.l d0,-(sp)
    f24a:	|  |   clr.l -(sp)
    f24c:	|  |   clr.l -(sp)
    f24e:	|  |   jsr d5b8 <blankScreen>
    f254:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    f258:	|  |   moveq #2,d0
    f25a:	+--|-- bra.s f26c <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    f25c:	|  '-> pea 19d93 <PutChar+0x1c43>
    f262:	|      jsr 176ae <KPrintF>
    f268:	|      addq.l #4,sp
	return BR_ERROR;
    f26a:	|      moveq #1,d0
}
    f26c:	'----> addq.l #8,sp
    f26e:	       rts

0000f270 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    f270:	          move.l d3,-(sp)
    f272:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f274:	          movea.l 16(sp),a0
    f278:	          move.l 24(a0),d0
    f27c:	          move.l d0,-(sp)
    f27e:	          pea 1 <_start+0x1>
    f282:	          pea 1cf44 <cameraY>
    f288:	          jsr 14bce <getValueType>
    f28e:	          lea 12(sp),sp
    f292:	          tst.w d0
    f294:	      ,-- bne.s f29c <builtIn_aimCamera+0x2c>
    f296:	      |   moveq #1,d0
    f298:	,-----|-- bra.w f51e <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f29c:	|     '-> moveq #24,d0
    f29e:	|         add.l 16(sp),d0
    f2a2:	|         move.l d0,-(sp)
    f2a4:	|         jsr 15552 <trimStack>
    f2aa:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f2ac:	|         movea.l 16(sp),a0
    f2b0:	|         move.l 24(a0),d0
    f2b4:	|         move.l d0,-(sp)
    f2b6:	|         pea 1 <_start+0x1>
    f2ba:	|         pea 1cf40 <cameraX>
    f2c0:	|         jsr 14bce <getValueType>
    f2c6:	|         lea 12(sp),sp
    f2ca:	|         tst.w d0
    f2cc:	|     ,-- bne.s f2d4 <builtIn_aimCamera+0x64>
    f2ce:	|     |   moveq #1,d0
    f2d0:	+-----|-- bra.w f51e <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f2d4:	|     '-> moveq #24,d0
    f2d6:	|         add.l 16(sp),d0
    f2da:	|         move.l d0,-(sp)
    f2dc:	|         jsr 15552 <trimStack>
    f2e2:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    f2e4:	|         move.l 1cf40 <cameraX>,d0
    f2ea:	|         move.l d0,-(sp)
    f2ec:	|         jsr 17ae0 <__floatsisf>
    f2f2:	|         addq.l #4,sp
    f2f4:	|         move.l d0,d2
    f2f6:	|         move.l 1cdde <winWidth>,d0
    f2fc:	|         lsr.l #1,d0
    f2fe:	|         move.l d0,-(sp)
    f300:	|         jsr 17b08 <__floatunsisf>
    f306:	|         addq.l #4,sp
    f308:	|         move.l d0,d1
    f30a:	|         move.l 1c826 <cameraZoom>,d0
    f310:	|         move.l d0,-(sp)
    f312:	|         move.l d1,-(sp)
    f314:	|         jsr 17996 <__divsf3>
    f31a:	|         addq.l #8,sp
    f31c:	|         move.l d0,-(sp)
    f31e:	|         move.l d2,-(sp)
    f320:	|         jsr 17dd4 <__subsf3>
    f326:	|         addq.l #8,sp
    f328:	|         move.l d0,-(sp)
    f32a:	|         jsr 17a78 <__fixsfsi>
    f330:	|         addq.l #4,sp
    f332:	|         move.l d0,1cf40 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    f338:	|         move.l 1cf44 <cameraY>,d0
    f33e:	|         move.l d0,-(sp)
    f340:	|         jsr 17ae0 <__floatsisf>
    f346:	|         addq.l #4,sp
    f348:	|         move.l d0,d2
    f34a:	|         move.l 1cde2 <winHeight>,d0
    f350:	|         lsr.l #1,d0
    f352:	|         move.l d0,-(sp)
    f354:	|         jsr 17b08 <__floatunsisf>
    f35a:	|         addq.l #4,sp
    f35c:	|         move.l d0,d1
    f35e:	|         move.l 1c826 <cameraZoom>,d0
    f364:	|         move.l d0,-(sp)
    f366:	|         move.l d1,-(sp)
    f368:	|         jsr 17996 <__divsf3>
    f36e:	|         addq.l #8,sp
    f370:	|         move.l d0,-(sp)
    f372:	|         move.l d2,-(sp)
    f374:	|         jsr 17dd4 <__subsf3>
    f37a:	|         addq.l #8,sp
    f37c:	|         move.l d0,-(sp)
    f37e:	|         jsr 17a78 <__fixsfsi>
    f384:	|         addq.l #4,sp
    f386:	|         move.l d0,1cf44 <cameraY>

	if (cameraX < 0) cameraX = 0;
    f38c:	|         move.l 1cf40 <cameraX>,d0
    f392:	|     ,-- bpl.s f39e <builtIn_aimCamera+0x12e>
    f394:	|     |   clr.l 1cf40 <cameraX>
    f39a:	|  ,--|-- bra.w f454 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    f39e:	|  |  '-> move.l 1cf40 <cameraX>,d0
    f3a4:	|  |      move.l d0,-(sp)
    f3a6:	|  |      jsr 17ae0 <__floatsisf>
    f3ac:	|  |      addq.l #4,sp
    f3ae:	|  |      move.l d0,d2
    f3b0:	|  |      move.l 1cf22 <sceneWidth>,d0
    f3b6:	|  |      move.l d0,-(sp)
    f3b8:	|  |      jsr 17b08 <__floatunsisf>
    f3be:	|  |      addq.l #4,sp
    f3c0:	|  |      move.l d0,d3
    f3c2:	|  |      move.l 1cdde <winWidth>,d0
    f3c8:	|  |      move.l d0,-(sp)
    f3ca:	|  |      jsr 17b08 <__floatunsisf>
    f3d0:	|  |      addq.l #4,sp
    f3d2:	|  |      move.l d0,d1
    f3d4:	|  |      move.l 1c826 <cameraZoom>,d0
    f3da:	|  |      move.l d0,-(sp)
    f3dc:	|  |      move.l d1,-(sp)
    f3de:	|  |      jsr 17996 <__divsf3>
    f3e4:	|  |      addq.l #8,sp
    f3e6:	|  |      move.l d0,-(sp)
    f3e8:	|  |      move.l d3,-(sp)
    f3ea:	|  |      jsr 17dd4 <__subsf3>
    f3f0:	|  |      addq.l #8,sp
    f3f2:	|  |      move.l d0,-(sp)
    f3f4:	|  |      move.l d2,-(sp)
    f3f6:	|  |      jsr 17c4c <__gtsf2>
    f3fc:	|  |      addq.l #8,sp
    f3fe:	|  |      tst.l d0
    f400:	|  +----- ble.s f454 <builtIn_aimCamera+0x1e4>
    f402:	|  |      move.l 1cf22 <sceneWidth>,d0
    f408:	|  |      move.l d0,-(sp)
    f40a:	|  |      jsr 17b08 <__floatunsisf>
    f410:	|  |      addq.l #4,sp
    f412:	|  |      move.l d0,d2
    f414:	|  |      move.l 1cdde <winWidth>,d0
    f41a:	|  |      move.l d0,-(sp)
    f41c:	|  |      jsr 17b08 <__floatunsisf>
    f422:	|  |      addq.l #4,sp
    f424:	|  |      move.l d0,d1
    f426:	|  |      move.l 1c826 <cameraZoom>,d0
    f42c:	|  |      move.l d0,-(sp)
    f42e:	|  |      move.l d1,-(sp)
    f430:	|  |      jsr 17996 <__divsf3>
    f436:	|  |      addq.l #8,sp
    f438:	|  |      move.l d0,-(sp)
    f43a:	|  |      move.l d2,-(sp)
    f43c:	|  |      jsr 17dd4 <__subsf3>
    f442:	|  |      addq.l #8,sp
    f444:	|  |      move.l d0,-(sp)
    f446:	|  |      jsr 17a78 <__fixsfsi>
    f44c:	|  |      addq.l #4,sp
    f44e:	|  |      move.l d0,1cf40 <cameraX>
	if (cameraY < 0) cameraY = 0;
    f454:	|  '----> move.l 1cf44 <cameraY>,d0
    f45a:	|     ,-- bpl.s f466 <builtIn_aimCamera+0x1f6>
    f45c:	|     |   clr.l 1cf44 <cameraY>
    f462:	|  ,--|-- bra.w f51c <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f466:	|  |  '-> move.l 1cf44 <cameraY>,d0
    f46c:	|  |      move.l d0,-(sp)
    f46e:	|  |      jsr 17ae0 <__floatsisf>
    f474:	|  |      addq.l #4,sp
    f476:	|  |      move.l d0,d2
    f478:	|  |      move.l 1cf26 <sceneHeight>,d0
    f47e:	|  |      move.l d0,-(sp)
    f480:	|  |      jsr 17b08 <__floatunsisf>
    f486:	|  |      addq.l #4,sp
    f488:	|  |      move.l d0,d3
    f48a:	|  |      move.l 1cde2 <winHeight>,d0
    f490:	|  |      move.l d0,-(sp)
    f492:	|  |      jsr 17b08 <__floatunsisf>
    f498:	|  |      addq.l #4,sp
    f49a:	|  |      move.l d0,d1
    f49c:	|  |      move.l 1c826 <cameraZoom>,d0
    f4a2:	|  |      move.l d0,-(sp)
    f4a4:	|  |      move.l d1,-(sp)
    f4a6:	|  |      jsr 17996 <__divsf3>
    f4ac:	|  |      addq.l #8,sp
    f4ae:	|  |      move.l d0,-(sp)
    f4b0:	|  |      move.l d3,-(sp)
    f4b2:	|  |      jsr 17dd4 <__subsf3>
    f4b8:	|  |      addq.l #8,sp
    f4ba:	|  |      move.l d0,-(sp)
    f4bc:	|  |      move.l d2,-(sp)
    f4be:	|  |      jsr 17c4c <__gtsf2>
    f4c4:	|  |      addq.l #8,sp
    f4c6:	|  |      tst.l d0
    f4c8:	|  +----- ble.s f51c <builtIn_aimCamera+0x2ac>
    f4ca:	|  |      move.l 1cf26 <sceneHeight>,d0
    f4d0:	|  |      move.l d0,-(sp)
    f4d2:	|  |      jsr 17b08 <__floatunsisf>
    f4d8:	|  |      addq.l #4,sp
    f4da:	|  |      move.l d0,d2
    f4dc:	|  |      move.l 1cde2 <winHeight>,d0
    f4e2:	|  |      move.l d0,-(sp)
    f4e4:	|  |      jsr 17b08 <__floatunsisf>
    f4ea:	|  |      addq.l #4,sp
    f4ec:	|  |      move.l d0,d1
    f4ee:	|  |      move.l 1c826 <cameraZoom>,d0
    f4f4:	|  |      move.l d0,-(sp)
    f4f6:	|  |      move.l d1,-(sp)
    f4f8:	|  |      jsr 17996 <__divsf3>
    f4fe:	|  |      addq.l #8,sp
    f500:	|  |      move.l d0,-(sp)
    f502:	|  |      move.l d2,-(sp)
    f504:	|  |      jsr 17dd4 <__subsf3>
    f50a:	|  |      addq.l #8,sp
    f50c:	|  |      move.l d0,-(sp)
    f50e:	|  |      jsr 17a78 <__fixsfsi>
    f514:	|  |      addq.l #4,sp
    f516:	|  |      move.l d0,1cf44 <cameraY>
	return BR_CONTINUE;
    f51c:	|  '----> moveq #2,d0
}
    f51e:	'-------> move.l (sp)+,d2
    f520:	          move.l (sp)+,d3
    f522:	          rts

0000f524 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f524:	       subq.l #4,sp
    f526:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f528:	       movea.l 16(sp),a0
    f52c:	       move.l 24(a0),d0
    f530:	       move.l d0,-(sp)
    f532:	       pea 1 <_start+0x1>
    f536:	       moveq #12,d0
    f538:	       add.l sp,d0
    f53a:	       move.l d0,-(sp)
    f53c:	       jsr 14bce <getValueType>
    f542:	       lea 12(sp),sp
    f546:	       tst.w d0
    f548:	   ,-- bne.s f550 <builtIn_zoomCamera+0x2c>
    f54a:	   |   moveq #1,d0
    f54c:	,--|-- bra.w f74a <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f550:	|  '-> moveq #24,d0
    f552:	|      add.l 16(sp),d0
    f556:	|      move.l d0,-(sp)
    f558:	|      jsr 15552 <trimStack>
    f55e:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f560:	|      move.l 1ce46 <input+0xa>,d0
    f566:	|      move.l d0,-(sp)
    f568:	|      jsr 17ae0 <__floatsisf>
    f56e:	|      addq.l #4,sp
    f570:	|      move.l d0,d1
    f572:	|      move.l 1c826 <cameraZoom>,d0
    f578:	|      move.l d0,-(sp)
    f57a:	|      move.l d1,-(sp)
    f57c:	|      jsr 17b92 <__mulsf3>
    f582:	|      addq.l #8,sp
    f584:	|      move.l d0,-(sp)
    f586:	|      jsr 17a78 <__fixsfsi>
    f58c:	|      addq.l #4,sp
    f58e:	|      move.l d0,1ce46 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f594:	|      move.l 1ce4a <input+0xe>,d0
    f59a:	|      move.l d0,-(sp)
    f59c:	|      jsr 17ae0 <__floatsisf>
    f5a2:	|      addq.l #4,sp
    f5a4:	|      move.l d0,d1
    f5a6:	|      move.l 1c826 <cameraZoom>,d0
    f5ac:	|      move.l d0,-(sp)
    f5ae:	|      move.l d1,-(sp)
    f5b0:	|      jsr 17b92 <__mulsf3>
    f5b6:	|      addq.l #8,sp
    f5b8:	|      move.l d0,-(sp)
    f5ba:	|      jsr 17a78 <__fixsfsi>
    f5c0:	|      addq.l #4,sp
    f5c2:	|      move.l d0,1ce4a <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f5c8:	|      move.l 4(sp),d0
    f5cc:	|      move.l d0,-(sp)
    f5ce:	|      jsr 17ae0 <__floatsisf>
    f5d4:	|      addq.l #4,sp
    f5d6:	|      move.l #1008981770,-(sp)
    f5dc:	|      move.l d0,-(sp)
    f5de:	|      jsr 17b92 <__mulsf3>
    f5e4:	|      addq.l #8,sp
    f5e6:	|      move.l d0,1c826 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f5ec:	|      move.l 1cdde <winWidth>,d0
    f5f2:	|      move.l d0,-(sp)
    f5f4:	|      jsr 17b08 <__floatunsisf>
    f5fa:	|      addq.l #4,sp
    f5fc:	|      move.l d0,d1
    f5fe:	|      move.l 1c826 <cameraZoom>,d0
    f604:	|      move.l d0,-(sp)
    f606:	|      move.l d1,-(sp)
    f608:	|      jsr 17996 <__divsf3>
    f60e:	|      addq.l #8,sp
    f610:	|      move.l d0,d2
    f612:	|      move.l 1cf22 <sceneWidth>,d0
    f618:	|      move.l d0,-(sp)
    f61a:	|      jsr 17b08 <__floatunsisf>
    f620:	|      addq.l #4,sp
    f622:	|      move.l d0,-(sp)
    f624:	|      move.l d2,-(sp)
    f626:	|      jsr 17c4c <__gtsf2>
    f62c:	|      addq.l #8,sp
    f62e:	|      tst.l d0
    f630:	|  ,-- ble.s f666 <builtIn_zoomCamera+0x142>
    f632:	|  |   move.l 1cdde <winWidth>,d0
    f638:	|  |   move.l d0,-(sp)
    f63a:	|  |   jsr 17b08 <__floatunsisf>
    f640:	|  |   addq.l #4,sp
    f642:	|  |   move.l d0,d2
    f644:	|  |   move.l 1cf22 <sceneWidth>,d0
    f64a:	|  |   move.l d0,-(sp)
    f64c:	|  |   jsr 17b08 <__floatunsisf>
    f652:	|  |   addq.l #4,sp
    f654:	|  |   move.l d0,-(sp)
    f656:	|  |   move.l d2,-(sp)
    f658:	|  |   jsr 17996 <__divsf3>
    f65e:	|  |   addq.l #8,sp
    f660:	|  |   move.l d0,1c826 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f666:	|  '-> move.l 1cde2 <winHeight>,d0
    f66c:	|      move.l d0,-(sp)
    f66e:	|      jsr 17b08 <__floatunsisf>
    f674:	|      addq.l #4,sp
    f676:	|      move.l d0,d1
    f678:	|      move.l 1c826 <cameraZoom>,d0
    f67e:	|      move.l d0,-(sp)
    f680:	|      move.l d1,-(sp)
    f682:	|      jsr 17996 <__divsf3>
    f688:	|      addq.l #8,sp
    f68a:	|      move.l d0,d2
    f68c:	|      move.l 1cf26 <sceneHeight>,d0
    f692:	|      move.l d0,-(sp)
    f694:	|      jsr 17b08 <__floatunsisf>
    f69a:	|      addq.l #4,sp
    f69c:	|      move.l d0,-(sp)
    f69e:	|      move.l d2,-(sp)
    f6a0:	|      jsr 17c4c <__gtsf2>
    f6a6:	|      addq.l #8,sp
    f6a8:	|      tst.l d0
    f6aa:	|  ,-- ble.s f6e0 <builtIn_zoomCamera+0x1bc>
    f6ac:	|  |   move.l 1cde2 <winHeight>,d0
    f6b2:	|  |   move.l d0,-(sp)
    f6b4:	|  |   jsr 17b08 <__floatunsisf>
    f6ba:	|  |   addq.l #4,sp
    f6bc:	|  |   move.l d0,d2
    f6be:	|  |   move.l 1cf26 <sceneHeight>,d0
    f6c4:	|  |   move.l d0,-(sp)
    f6c6:	|  |   jsr 17b08 <__floatunsisf>
    f6cc:	|  |   addq.l #4,sp
    f6ce:	|  |   move.l d0,-(sp)
    f6d0:	|  |   move.l d2,-(sp)
    f6d2:	|  |   jsr 17996 <__divsf3>
    f6d8:	|  |   addq.l #8,sp
    f6da:	|  |   move.l d0,1c826 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f6e0:	|  '-> move.l 1ce46 <input+0xa>,d0
    f6e6:	|      move.l d0,-(sp)
    f6e8:	|      jsr 17ae0 <__floatsisf>
    f6ee:	|      addq.l #4,sp
    f6f0:	|      move.l d0,d1
    f6f2:	|      move.l 1c826 <cameraZoom>,d0
    f6f8:	|      move.l d0,-(sp)
    f6fa:	|      move.l d1,-(sp)
    f6fc:	|      jsr 17996 <__divsf3>
    f702:	|      addq.l #8,sp
    f704:	|      move.l d0,-(sp)
    f706:	|      jsr 17a78 <__fixsfsi>
    f70c:	|      addq.l #4,sp
    f70e:	|      move.l d0,1ce46 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f714:	|      move.l 1ce4a <input+0xe>,d0
    f71a:	|      move.l d0,-(sp)
    f71c:	|      jsr 17ae0 <__floatsisf>
    f722:	|      addq.l #4,sp
    f724:	|      move.l d0,d1
    f726:	|      move.l 1c826 <cameraZoom>,d0
    f72c:	|      move.l d0,-(sp)
    f72e:	|      move.l d1,-(sp)
    f730:	|      jsr 17996 <__divsf3>
    f736:	|      addq.l #8,sp
    f738:	|      move.l d0,-(sp)
    f73a:	|      jsr 17a78 <__fixsfsi>
    f740:	|      addq.l #4,sp
    f742:	|      move.l d0,1ce4a <input+0xe>

	return BR_CONTINUE;
    f748:	|      moveq #2,d0
}
    f74a:	'----> move.l (sp)+,d2
    f74c:	       addq.l #4,sp
    f74e:	       rts

0000f750 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f750:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f752:	             tst.l 8(sp)
    f756:	         ,-- bne.s f76a <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f758:	         |   pea 19db8 <PutChar+0x1c68>
    f75e:	         |   jsr 176ae <KPrintF>
    f764:	         |   addq.l #4,sp
		return BR_ERROR;
    f766:	         |   moveq #1,d0
    f768:	,--------|-- bra.s f7ca <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f76a:	|        '-> jsr 1626e <rand>
    f770:	|            move.l d0,d1
    f772:	|            move.l 8(sp),d0
    f776:	|            move.l d0,-(sp)
    f778:	|            move.l d1,-(sp)
    f77a:	|            jsr 18114 <__umodsi3>
    f780:	|            addq.l #8,sp
    f782:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f784:	|     ,----- bra.s f7b8 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f786:	|  ,--|----> move.l (sp),d0
    f788:	|  |  |      cmp.l 8(sp),d0
    f78c:	|  |  |  ,-- bne.s f7a8 <builtIn_pickOne+0x58>
    f78e:	|  |  |  |   moveq #28,d0
    f790:	|  |  |  |   add.l 12(sp),d0
    f794:	|  |  |  |   movea.l 12(sp),a0
    f798:	|  |  |  |   move.l 24(a0),d1
    f79c:	|  |  |  |   move.l d0,-(sp)
    f79e:	|  |  |  |   move.l d1,-(sp)
    f7a0:	|  |  |  |   jsr 15088 <copyVariable>
    f7a6:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f7a8:	|  |  |  '-> moveq #24,d0
    f7aa:	|  |  |      add.l 12(sp),d0
    f7ae:	|  |  |      move.l d0,-(sp)
    f7b0:	|  |  |      jsr 15552 <trimStack>
    f7b6:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f7b8:	|  |  '----> move.l 8(sp),d0
    f7bc:	|  |         move.l d0,d1
    f7be:	|  |         subq.l #1,d1
    f7c0:	|  |         move.l d1,8(sp)
    f7c4:	|  |         tst.l d0
    f7c6:	|  '-------- bne.s f786 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f7c8:	|            moveq #2,d0
}
    f7ca:	'----------> addq.l #4,sp
    f7cc:	             rts

0000f7ce <builtIn_substring>:

builtIn(substring)
{
    f7ce:	       lea -40(sp),sp
    f7d2:	       move.l a6,-(sp)
    f7d4:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f7d6:	       movea.l 56(sp),a0
    f7da:	       move.l 24(a0),d0
    f7de:	       move.l d0,-(sp)
    f7e0:	       pea 1 <_start+0x1>
    f7e4:	       lea 16(sp),a0
    f7e8:	       move.l a0,-(sp)
    f7ea:	       jsr 14bce <getValueType>
    f7f0:	       lea 12(sp),sp
    f7f4:	       tst.w d0
    f7f6:	   ,-- bne.s f7fe <builtIn_substring+0x30>
    f7f8:	   |   moveq #1,d0
    f7fa:	,--|-- bra.w f976 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f7fe:	|  '-> moveq #24,d0
    f800:	|      add.l 56(sp),d0
    f804:	|      move.l d0,-(sp)
    f806:	|      jsr 15552 <trimStack>
    f80c:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f80e:	|      movea.l 56(sp),a0
    f812:	|      move.l 24(a0),d0
    f816:	|      move.l d0,-(sp)
    f818:	|      pea 1 <_start+0x1>
    f81c:	|      lea 20(sp),a0
    f820:	|      move.l a0,-(sp)
    f822:	|      jsr 14bce <getValueType>
    f828:	|      lea 12(sp),sp
    f82c:	|      tst.w d0
    f82e:	|  ,-- bne.s f836 <builtIn_substring+0x68>
    f830:	|  |   moveq #1,d0
    f832:	+--|-- bra.w f976 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f836:	|  '-> moveq #24,d0
    f838:	|      add.l 56(sp),d0
    f83c:	|      move.l d0,-(sp)
    f83e:	|      jsr 15552 <trimStack>
    f844:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f846:	|      movea.l 56(sp),a0
    f84a:	|      move.l 24(a0),d0
    f84e:	|      move.l d0,-(sp)
    f850:	|      jsr 151a4 <getTextFromAnyVar>
    f856:	|      addq.l #4,sp
    f858:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f85c:	|      moveq #24,d0
    f85e:	|      add.l 56(sp),d0
    f862:	|      move.l d0,-(sp)
    f864:	|      jsr 15552 <trimStack>
    f86a:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f86c:	|      move.l 44(sp),-(sp)
    f870:	|      jsr 140ba <strlen>
    f876:	|      addq.l #4,sp
    f878:	|      move.l d0,d1
    f87a:	|      move.l 12(sp),d0
    f87e:	|      movea.l d0,a0
    f880:	|      move.l 8(sp),d0
    f884:	|      add.l a0,d0
    f886:	|      cmp.l d1,d0
    f888:	|  ,-- bls.s f8be <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f88a:	|  |   move.l 44(sp),-(sp)
    f88e:	|  |   jsr 140ba <strlen>
    f894:	|  |   addq.l #4,sp
    f896:	|  |   move.l d0,d1
    f898:	|  |   move.l 12(sp),d0
    f89c:	|  |   sub.l d0,d1
    f89e:	|  |   move.l d1,d0
    f8a0:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f8a4:	|  |   move.l 44(sp),-(sp)
    f8a8:	|  |   jsr 140ba <strlen>
    f8ae:	|  |   addq.l #4,sp
    f8b0:	|  |   move.l d0,d1
    f8b2:	|  |   move.l 12(sp),d0
    f8b6:	|  |   cmp.l d1,d0
    f8b8:	|  +-- bls.s f8be <builtIn_substring+0xf0>
            start = 0;
    f8ba:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f8be:	|  '-> move.l 8(sp),d0
    f8c2:	|  ,-- bpl.s f8c8 <builtIn_substring+0xfa>
        length = 0;
    f8c4:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f8c8:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f8ce:	|      move.l 12(sp),d1
    f8d2:	|      move.l 8(sp),d0
    f8d6:	|      move.l d1,d2
    f8d8:	|      add.l d0,d2
    f8da:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f8de:	|      move.l 36(sp),d0
    f8e2:	|      sub.l 40(sp),d0
    f8e6:	|      addq.l #1,d0
    f8e8:	|      move.l d0,32(sp)
    f8ec:	|      clr.l 28(sp)
    f8f0:	|      move.l 1ce8a <SysBase>,d0
    f8f6:	|      movea.l d0,a6
    f8f8:	|      move.l 32(sp),d0
    f8fc:	|      move.l 28(sp),d1
    f900:	|      jsr -684(a6)
    f904:	|      move.l d0,24(sp)
    f908:	|      move.l 24(sp),d0
    f90c:	|      move.l d0,20(sp)
    if (!newString) {
    f910:	|  ,-- bne.s f916 <builtIn_substring+0x148>
        return BR_ERROR;
    f912:	|  |   moveq #1,d0
    f914:	+--|-- bra.s f976 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f916:	|  '-> move.l 36(sp),d0
    f91a:	|      sub.l 40(sp),d0
    f91e:	|      move.l d0,d1
    f920:	|      move.l 40(sp),d0
    f924:	|      add.l 44(sp),d0
    f928:	|      move.l d1,-(sp)
    f92a:	|      move.l d0,-(sp)
    f92c:	|      move.l 28(sp),-(sp)
    f930:	|      jsr 17662 <memcpy>
    f936:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f93a:	|      move.l 36(sp),d0
    f93e:	|      sub.l 40(sp),d0
    f942:	|      movea.l 20(sp),a0
    f946:	|      adda.l d0,a0
    f948:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f94a:	|      moveq #28,d0
    f94c:	|      add.l 56(sp),d0
    f950:	|      move.l 20(sp),-(sp)
    f954:	|      move.l d0,-(sp)
    f956:	|      jsr 14df0 <makeTextVar>
    f95c:	|      addq.l #8,sp
    FreeVec(newString);
    f95e:	|      move.l 20(sp),16(sp)
    f964:	|      move.l 1ce8a <SysBase>,d0
    f96a:	|      movea.l d0,a6
    f96c:	|      movea.l 16(sp),a1
    f970:	|      jsr -690(a6)
    return BR_CONTINUE;
    f974:	|      moveq #2,d0
}
    f976:	'----> move.l (sp)+,d2
    f978:	       movea.l (sp)+,a6
    f97a:	       lea 40(sp),sp
    f97e:	       rts

0000f980 <builtIn_stringLength>:

builtIn(stringLength)
{
    f980:	subq.l #8,sp
    f982:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f984:	movea.l 20(sp),a0
    f988:	move.l 24(a0),d0
    f98c:	move.l d0,-(sp)
    f98e:	jsr 151a4 <getTextFromAnyVar>
    f994:	addq.l #4,sp
    f996:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f99a:	moveq #24,d0
    f99c:	add.l 20(sp),d0
    f9a0:	move.l d0,-(sp)
    f9a2:	jsr 15552 <trimStack>
    f9a8:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f9aa:	move.l 8(sp),-(sp)
    f9ae:	jsr 140ba <strlen>
    f9b4:	addq.l #4,sp
    f9b6:	move.l d0,d1
    f9b8:	moveq #28,d0
    f9ba:	add.l 20(sp),d0
    f9be:	move.l d1,-(sp)
    f9c0:	pea 1 <_start+0x1>
    f9c4:	move.l d0,-(sp)
    f9c6:	jsr 154c0 <setVariable>
    f9cc:	lea 12(sp),sp
	FreeVec(newText);
    f9d0:	move.l 8(sp),4(sp)
    f9d6:	move.l 1ce8a <SysBase>,d0
    f9dc:	movea.l d0,a6
    f9de:	movea.l 4(sp),a1
    f9e2:	jsr -690(a6)
	return BR_CONTINUE;
    f9e6:	moveq #2,d0
}
    f9e8:	movea.l (sp)+,a6
    f9ea:	addq.l #8,sp
    f9ec:	rts

0000f9ee <builtIn_newStack>:

builtIn(newStack)
{
    f9ee:	             lea -12(sp),sp
    f9f2:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f9f4:	             moveq #28,d0
    f9f6:	             add.l 24(sp),d0
    f9fa:	             move.l d0,-(sp)
    f9fc:	             jsr 14e1c <unlinkVar>
    fa02:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    fa04:	             movea.l 24(sp),a0
    fa08:	             moveq #6,d0
    fa0a:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    fa0e:	             moveq #12,d1
    fa10:	             move.l d1,12(sp)
    fa14:	             clr.l 8(sp)
    fa18:	             move.l 1ce8a <SysBase>,d0
    fa1e:	             movea.l d0,a6
    fa20:	             move.l 12(sp),d0
    fa24:	             move.l 8(sp),d1
    fa28:	             jsr -684(a6)
    fa2c:	             move.l d0,4(sp)
    fa30:	             move.l 4(sp),d0
    fa34:	             movea.l 24(sp),a0
    fa38:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    fa3c:	             movea.l 24(sp),a0
    fa40:	             move.l 32(a0),d0
    fa44:	         ,-- bne.s fa4c <builtIn_newStack+0x5e>
    fa46:	         |   moveq #1,d0
    fa48:	,--------|-- bra.w fade <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    fa4c:	|        '-> movea.l 24(sp),a0
    fa50:	|            movea.l 32(a0),a0
    fa54:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    fa56:	|            movea.l 24(sp),a0
    fa5a:	|            movea.l 32(a0),a0
    fa5e:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    fa62:	|            movea.l 24(sp),a0
    fa66:	|            movea.l 32(a0),a0
    fa6a:	|            moveq #1,d0
    fa6c:	|            move.l d0,8(a0)
    
    while (numParams--) {
    fa70:	|     ,----- bra.s facc <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    fa72:	|  ,--|----> movea.l 24(sp),a0
    fa76:	|  |  |      move.l 32(a0),d0
    fa7a:	|  |  |      move.l d0,d1
    fa7c:	|  |  |      movea.l 24(sp),a0
    fa80:	|  |  |      move.l 24(a0),d0
    fa84:	|  |  |      move.l d1,-(sp)
    fa86:	|  |  |      move.l d0,-(sp)
    fa88:	|  |  |      jsr 1440a <addVarToStack>
    fa8e:	|  |  |      addq.l #8,sp
    fa90:	|  |  |      tst.w d0
    fa92:	|  |  |  ,-- bne.s fa98 <builtIn_newStack+0xaa>
    fa94:	|  |  |  |   moveq #1,d0
    fa96:	+--|--|--|-- bra.s fade <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    fa98:	|  |  |  '-> movea.l 24(sp),a0
    fa9c:	|  |  |      movea.l 32(a0),a0
    faa0:	|  |  |      move.l 4(a0),d0
    faa4:	|  |  |  ,-- bne.s fabc <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    faa6:	|  |  |  |   movea.l 24(sp),a0
    faaa:	|  |  |  |   movea.l 32(a0),a1
    faae:	|  |  |  |   movea.l 24(sp),a0
    fab2:	|  |  |  |   movea.l 32(a0),a0
    fab6:	|  |  |  |   move.l (a1),d0
    fab8:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    fabc:	|  |  |  '-> moveq #24,d0
    fabe:	|  |  |      add.l 24(sp),d0
    fac2:	|  |  |      move.l d0,-(sp)
    fac4:	|  |  |      jsr 15552 <trimStack>
    faca:	|  |  |      addq.l #4,sp
    while (numParams--) {
    facc:	|  |  '----> move.l 20(sp),d0
    fad0:	|  |         move.l d0,d1
    fad2:	|  |         subq.l #1,d1
    fad4:	|  |         move.l d1,20(sp)
    fad8:	|  |         tst.l d0
    fada:	|  '-------- bne.s fa72 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    fadc:	|            moveq #2,d0
}
    fade:	'----------> movea.l (sp)+,a6
    fae0:	             lea 12(sp),sp
    fae4:	             rts

0000fae6 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    fae6:	          movea.l 8(sp),a0
    faea:	          movea.l 24(a0),a0
    faee:	          move.l (a0),d0
    faf0:	          moveq #6,d1
    faf2:	          cmp.l d0,d1
    faf4:	      ,-- beq.s fb10 <builtIn_stackSize+0x2a>
    faf6:	      |   moveq #10,d1
    faf8:	      |   cmp.l d0,d1
    fafa:	   ,--|-- beq.s fb54 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    fafc:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    fafe:	   |  |   pea 19deb <PutChar+0x1c9b>
    fb04:	   |  |   jsr 176ae <KPrintF>
    fb0a:	   |  |   addq.l #4,sp
	return BR_ERROR;
    fb0c:	   |  |   moveq #1,d0
    fb0e:	,--|--|-- bra.s fb8e <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    fb10:	|  |  '-> movea.l 8(sp),a0
    fb14:	|  |      movea.l 24(a0),a0
    fb18:	|  |      move.l 4(a0),d0
    fb1c:	|  |      move.l d0,-(sp)
    fb1e:	|  |      jsr 1552e <stackSize>
    fb24:	|  |      addq.l #4,sp
    fb26:	|  |      move.l d0,d1
    fb28:	|  |      moveq #28,d0
    fb2a:	|  |      add.l 8(sp),d0
    fb2e:	|  |      move.l d1,-(sp)
    fb30:	|  |      pea 1 <_start+0x1>
    fb34:	|  |      move.l d0,-(sp)
    fb36:	|  |      jsr 154c0 <setVariable>
    fb3c:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    fb40:	|  |      moveq #24,d0
    fb42:	|  |      add.l 8(sp),d0
    fb46:	|  |      move.l d0,-(sp)
    fb48:	|  |      jsr 15552 <trimStack>
    fb4e:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    fb50:	|  |      moveq #2,d0
    fb52:	+--|----- bra.s fb8e <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    fb54:	|  '----> movea.l 8(sp),a0
    fb58:	|         movea.l 24(a0),a0
    fb5c:	|         movea.l 4(a0),a0
    fb60:	|         move.l 4(a0),d1
    fb64:	|         moveq #28,d0
    fb66:	|         add.l 8(sp),d0
    fb6a:	|         move.l d1,-(sp)
    fb6c:	|         pea 1 <_start+0x1>
    fb70:	|         move.l d0,-(sp)
    fb72:	|         jsr 154c0 <setVariable>
    fb78:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    fb7c:	|         moveq #24,d0
    fb7e:	|         add.l 8(sp),d0
    fb82:	|         move.l d0,-(sp)
    fb84:	|         jsr 15552 <trimStack>
    fb8a:	|         addq.l #4,sp
			return BR_CONTINUE;
    fb8c:	|         moveq #2,d0
}
    fb8e:	'-------> rts

0000fb90 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fb90:	       movea.l 8(sp),a0
    fb94:	       movea.l 24(a0),a0
    fb98:	       move.l (a0),d0
    fb9a:	       moveq #6,d1
    fb9c:	       cmp.l d0,d1
    fb9e:	   ,-- beq.s fbb2 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fba0:	   |   pea 19e14 <PutChar+0x1cc4>
    fba6:	   |   jsr 176ae <KPrintF>
    fbac:	   |   addq.l #4,sp
		return BR_ERROR;
    fbae:	   |   moveq #1,d0
    fbb0:	,--|-- bra.s fbe6 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    fbb2:	|  '-> moveq #28,d0
    fbb4:	|      add.l 8(sp),d0
    fbb8:	|      movea.l 8(sp),a0
    fbbc:	|      move.l 24(a0),d1
    fbc0:	|      move.l d0,-(sp)
    fbc2:	|      move.l d1,-(sp)
    fbc4:	|      jsr 146d4 <copyStack>
    fbca:	|      addq.l #8,sp
    fbcc:	|      tst.w d0
    fbce:	|  ,-- bne.s fbd4 <builtIn_copyStack+0x44>
    fbd0:	|  |   moveq #1,d0
    fbd2:	+--|-- bra.s fbe6 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    fbd4:	|  '-> moveq #24,d0
    fbd6:	|      add.l 8(sp),d0
    fbda:	|      move.l d0,-(sp)
    fbdc:	|      jsr 15552 <trimStack>
    fbe2:	|      addq.l #4,sp
	return BR_CONTINUE;
    fbe4:	|      moveq #2,d0
}
    fbe6:	'----> rts

0000fbe8 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fbe8:	       movea.l 8(sp),a0
    fbec:	       movea.l 24(a0),a0
    fbf0:	       movea.l 8(a0),a0
    fbf4:	       move.l (a0),d0
    fbf6:	       moveq #6,d1
    fbf8:	       cmp.l d0,d1
    fbfa:	   ,-- beq.s fc10 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    fbfc:	   |   pea 19e2d <PutChar+0x1cdd>
    fc02:	   |   jsr 176ae <KPrintF>
    fc08:	   |   addq.l #4,sp
		return BR_ERROR;
    fc0a:	   |   moveq #1,d0
    fc0c:	,--|-- bra.w fc9e <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fc10:	|  '-> movea.l 8(sp),a0
    fc14:	|      movea.l 24(a0),a0
    fc18:	|      movea.l 8(a0),a0
    fc1c:	|      move.l 4(a0),d0
    fc20:	|      move.l d0,d1
    fc22:	|      movea.l 8(sp),a0
    fc26:	|      move.l 24(a0),d0
    fc2a:	|      move.l d1,-(sp)
    fc2c:	|      move.l d0,-(sp)
    fc2e:	|      jsr 1440a <addVarToStack>
    fc34:	|      addq.l #8,sp
    fc36:	|      tst.w d0
    fc38:	|  ,-- bne.s fc3e <builtIn_pushToStack+0x56>
		return BR_ERROR;
    fc3a:	|  |   moveq #1,d0
    fc3c:	+--|-- bra.s fc9e <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    fc3e:	|  '-> movea.l 8(sp),a0
    fc42:	|      movea.l 24(a0),a0
    fc46:	|      movea.l 8(a0),a0
    fc4a:	|      movea.l 4(a0),a0
    fc4e:	|      movea.l (a0),a0
    fc50:	|      move.l 8(a0),d0
    fc54:	|  ,-- bne.s fc7c <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fc56:	|  |   movea.l 8(sp),a0
    fc5a:	|  |   movea.l 24(a0),a0
    fc5e:	|  |   movea.l 8(a0),a0
    fc62:	|  |   movea.l 4(a0),a1
    fc66:	|  |   movea.l 8(sp),a0
    fc6a:	|  |   movea.l 24(a0),a0
    fc6e:	|  |   movea.l 8(a0),a0
    fc72:	|  |   movea.l 4(a0),a0
    fc76:	|  |   move.l (a1),d0
    fc78:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    fc7c:	|  '-> moveq #24,d0
    fc7e:	|      add.l 8(sp),d0
    fc82:	|      move.l d0,-(sp)
    fc84:	|      jsr 15552 <trimStack>
    fc8a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fc8c:	|      moveq #24,d0
    fc8e:	|      add.l 8(sp),d0
    fc92:	|      move.l d0,-(sp)
    fc94:	|      jsr 15552 <trimStack>
    fc9a:	|      addq.l #4,sp
	return BR_CONTINUE;
    fc9c:	|      moveq #2,d0
}
    fc9e:	'----> rts

0000fca0 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fca0:	             movea.l 8(sp),a0
    fca4:	             movea.l 24(a0),a0
    fca8:	             movea.l 8(a0),a0
    fcac:	             move.l (a0),d0
    fcae:	             moveq #6,d1
    fcb0:	             cmp.l d0,d1
    fcb2:	         ,-- beq.s fcc8 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    fcb4:	         |   pea 19e2d <PutChar+0x1cdd>
    fcba:	         |   jsr 176ae <KPrintF>
    fcc0:	         |   addq.l #4,sp
		return BR_ERROR;
    fcc2:	         |   moveq #1,d0
    fcc4:	,--------|-- bra.w fdb6 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    fcc8:	|        '-> movea.l 8(sp),a0
    fccc:	|            movea.l 24(a0),a0
    fcd0:	|            movea.l 8(a0),a0
    fcd4:	|            movea.l 4(a0),a0
    fcd8:	|            move.l (a0),d0
    fcda:	|     ,----- bne.s fd34 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fcdc:	|     |      movea.l 8(sp),a0
    fce0:	|     |      movea.l 24(a0),a0
    fce4:	|     |      movea.l 8(a0),a0
    fce8:	|     |      move.l 4(a0),d0
    fcec:	|     |      move.l d0,d1
    fcee:	|     |      movea.l 8(sp),a0
    fcf2:	|     |      move.l 24(a0),d0
    fcf6:	|     |      move.l d1,-(sp)
    fcf8:	|     |      move.l d0,-(sp)
    fcfa:	|     |      jsr 1440a <addVarToStack>
    fd00:	|     |      addq.l #8,sp
    fd02:	|     |      tst.w d0
    fd04:	|     |  ,-- bne.s fd0c <builtIn_enqueue+0x6c>
			return BR_ERROR;
    fd06:	|     |  |   moveq #1,d0
    fd08:	+-----|--|-- bra.w fdb6 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fd0c:	|     |  '-> movea.l 8(sp),a0
    fd10:	|     |      movea.l 24(a0),a0
    fd14:	|     |      movea.l 8(a0),a0
    fd18:	|     |      movea.l 4(a0),a1
    fd1c:	|     |      movea.l 8(sp),a0
    fd20:	|     |      movea.l 24(a0),a0
    fd24:	|     |      movea.l 8(a0),a0
    fd28:	|     |      movea.l 4(a0),a0
    fd2c:	|     |      move.l (a1),d0
    fd2e:	|     |      move.l d0,4(a0)
    fd32:	|  ,--|----- bra.s fd94 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    fd34:	|  |  '----> movea.l 8(sp),a0
    fd38:	|  |         movea.l 24(a0),a0
    fd3c:	|  |         movea.l 8(a0),a0
    fd40:	|  |         movea.l 4(a0),a0
    fd44:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    fd48:	|  |         move.l d0,d1
    fd4a:	|  |         addq.l #8,d1
    fd4c:	|  |         movea.l 8(sp),a0
    fd50:	|  |         move.l 24(a0),d0
    fd54:	|  |         move.l d1,-(sp)
    fd56:	|  |         move.l d0,-(sp)
    fd58:	|  |         jsr 1440a <addVarToStack>
    fd5e:	|  |         addq.l #8,sp
    fd60:	|  |         tst.w d0
    fd62:	|  |     ,-- bne.s fd68 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    fd64:	|  |     |   moveq #1,d0
    fd66:	+--|-----|-- bra.s fdb6 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    fd68:	|  |     '-> movea.l 8(sp),a0
    fd6c:	|  |         movea.l 24(a0),a0
    fd70:	|  |         movea.l 8(a0),a0
    fd74:	|  |         movea.l 4(a0),a0
    fd78:	|  |         movea.l 4(a0),a1
    fd7c:	|  |         movea.l 8(sp),a0
    fd80:	|  |         movea.l 24(a0),a0
    fd84:	|  |         movea.l 8(a0),a0
    fd88:	|  |         movea.l 4(a0),a0
    fd8c:	|  |         move.l 8(a1),d0
    fd90:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    fd94:	|  '-------> moveq #24,d0
    fd96:	|            add.l 8(sp),d0
    fd9a:	|            move.l d0,-(sp)
    fd9c:	|            jsr 15552 <trimStack>
    fda2:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    fda4:	|            moveq #24,d0
    fda6:	|            add.l 8(sp),d0
    fdaa:	|            move.l d0,-(sp)
    fdac:	|            jsr 15552 <trimStack>
    fdb2:	|            addq.l #4,sp
	return BR_CONTINUE;
    fdb4:	|            moveq #2,d0
}
    fdb6:	'----------> rts

0000fdb8 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    fdb8:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fdba:	       movea.l 12(sp),a0
    fdbe:	       movea.l 24(a0),a0
    fdc2:	       movea.l 8(a0),a0
    fdc6:	       move.l (a0),d0
    fdc8:	       moveq #6,d1
    fdca:	       cmp.l d0,d1
    fdcc:	   ,-- beq.s fde2 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fdce:	   |   pea 19e14 <PutChar+0x1cc4>
    fdd4:	   |   jsr 176ae <KPrintF>
    fdda:	   |   addq.l #4,sp
		return BR_ERROR;
    fddc:	   |   moveq #1,d0
    fdde:	,--|-- bra.w fe78 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    fde2:	|  '-> movea.l 12(sp),a0
    fde6:	|      movea.l 24(a0),a0
    fdea:	|      movea.l 8(a0),a0
    fdee:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fdf2:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fdf4:	|      movea.l 12(sp),a0
    fdf8:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fdfc:	|      clr.l -(sp)
    fdfe:	|      move.l d1,-(sp)
    fe00:	|      move.l d0,-(sp)
    fe02:	|      jsr 147aa <deleteVarFromStack>
    fe08:	|      lea 12(sp),sp
    fe0c:	|      move.l d0,d1
    fe0e:	|      moveq #28,d0
    fe10:	|      add.l 12(sp),d0
    fe14:	|      move.l d1,-(sp)
    fe16:	|      pea 1 <_start+0x1>
    fe1a:	|      move.l d0,-(sp)
    fe1c:	|      jsr 154c0 <setVariable>
    fe22:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fe26:	|      movea.l 12(sp),a0
    fe2a:	|      movea.l 24(a0),a0
    fe2e:	|      movea.l 8(a0),a0
    fe32:	|      movea.l 4(a0),a0
    fe36:	|      move.l (a0),d0
    fe38:	|      movea.l 12(sp),a0
    fe3c:	|      movea.l 24(a0),a0
    fe40:	|      movea.l 8(a0),a0
    fe44:	|      movea.l 4(a0),a2
    fe48:	|      move.l d0,-(sp)
    fe4a:	|      jsr 1550a <stackFindLast>
    fe50:	|      addq.l #4,sp
    fe52:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fe56:	|      moveq #24,d0
    fe58:	|      add.l 12(sp),d0
    fe5c:	|      move.l d0,-(sp)
    fe5e:	|      jsr 15552 <trimStack>
    fe64:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fe66:	|      moveq #24,d0
    fe68:	|      add.l 12(sp),d0
    fe6c:	|      move.l d0,-(sp)
    fe6e:	|      jsr 15552 <trimStack>
    fe74:	|      addq.l #4,sp
	return BR_CONTINUE;
    fe76:	|      moveq #2,d0
}
    fe78:	'----> movea.l (sp)+,a2
    fe7a:	       rts

0000fe7c <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fe7c:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fe7e:	       movea.l 12(sp),a0
    fe82:	       movea.l 24(a0),a0
    fe86:	       movea.l 8(a0),a0
    fe8a:	       move.l (a0),d0
    fe8c:	       moveq #6,d1
    fe8e:	       cmp.l d0,d1
    fe90:	   ,-- beq.s fea6 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fe92:	   |   pea 19e14 <PutChar+0x1cc4>
    fe98:	   |   jsr 176ae <KPrintF>
    fe9e:	   |   addq.l #4,sp
		return BR_ERROR;
    fea0:	   |   moveq #1,d0
    fea2:	,--|-- bra.w ff3e <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fea6:	|  '-> movea.l 12(sp),a0
    feaa:	|      movea.l 24(a0),a0
    feae:	|      movea.l 8(a0),a0
    feb2:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    feb6:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    feb8:	|      movea.l 12(sp),a0
    febc:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fec0:	|      pea 1 <_start+0x1>
    fec4:	|      move.l d1,-(sp)
    fec6:	|      move.l d0,-(sp)
    fec8:	|      jsr 147aa <deleteVarFromStack>
    fece:	|      lea 12(sp),sp
    fed2:	|      move.l d0,d1
    fed4:	|      moveq #28,d0
    fed6:	|      add.l 12(sp),d0
    feda:	|      move.l d1,-(sp)
    fedc:	|      pea 1 <_start+0x1>
    fee0:	|      move.l d0,-(sp)
    fee2:	|      jsr 154c0 <setVariable>
    fee8:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    feec:	|      movea.l 12(sp),a0
    fef0:	|      movea.l 24(a0),a0
    fef4:	|      movea.l 8(a0),a0
    fef8:	|      movea.l 4(a0),a0
    fefc:	|      move.l (a0),d0
    fefe:	|      movea.l 12(sp),a0
    ff02:	|      movea.l 24(a0),a0
    ff06:	|      movea.l 8(a0),a0
    ff0a:	|      movea.l 4(a0),a2
    ff0e:	|      move.l d0,-(sp)
    ff10:	|      jsr 1550a <stackFindLast>
    ff16:	|      addq.l #4,sp
    ff18:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    ff1c:	|      moveq #24,d0
    ff1e:	|      add.l 12(sp),d0
    ff22:	|      move.l d0,-(sp)
    ff24:	|      jsr 15552 <trimStack>
    ff2a:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ff2c:	|      moveq #24,d0
    ff2e:	|      add.l 12(sp),d0
    ff32:	|      move.l d0,-(sp)
    ff34:	|      jsr 15552 <trimStack>
    ff3a:	|      addq.l #4,sp
	return BR_CONTINUE;
    ff3c:	|      moveq #2,d0
} 
    ff3e:	'----> movea.l (sp)+,a2
    ff40:	       rts

0000ff42 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ff42:	       movea.l 8(sp),a0
    ff46:	       movea.l 24(a0),a0
    ff4a:	       move.l (a0),d0
    ff4c:	       moveq #6,d1
    ff4e:	       cmp.l d0,d1
    ff50:	   ,-- beq.s ff64 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    ff52:	   |   pea 19e14 <PutChar+0x1cc4>
    ff58:	   |   jsr 176ae <KPrintF>
    ff5e:	   |   addq.l #4,sp
		return BR_ERROR;
    ff60:	   |   moveq #1,d0
    ff62:	,--|-- bra.s ffce <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    ff64:	|  '-> movea.l 8(sp),a0
    ff68:	|      movea.l 24(a0),a0
    ff6c:	|      movea.l 4(a0),a0
    ff70:	|      move.l (a0),d0
    ff72:	|  ,-- bne.s ff86 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    ff74:	|  |   pea 19e45 <PutChar+0x1cf5>
    ff7a:	|  |   jsr 176ae <KPrintF>
    ff80:	|  |   addq.l #4,sp
		return BR_ERROR;
    ff82:	|  |   moveq #1,d0
    ff84:	+--|-- bra.s ffce <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    ff86:	|  '-> moveq #28,d0
    ff88:	|      add.l 8(sp),d0
    ff8c:	|      movea.l 8(sp),a0
    ff90:	|      movea.l 24(a0),a0
    ff94:	|      movea.l 4(a0),a0
    ff98:	|      move.l (a0),d1
    ff9a:	|      move.l d0,-(sp)
    ff9c:	|      move.l d1,-(sp)
    ff9e:	|      jsr 15088 <copyVariable>
    ffa4:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    ffa6:	|      movea.l 8(sp),a0
    ffaa:	|      movea.l 24(a0),a0
    ffae:	|      move.l 4(a0),d0
    ffb2:	|      move.l d0,-(sp)
    ffb4:	|      jsr 15552 <trimStack>
    ffba:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    ffbc:	|      moveq #24,d0
    ffbe:	|      add.l 8(sp),d0
    ffc2:	|      move.l d0,-(sp)
    ffc4:	|      jsr 15552 <trimStack>
    ffca:	|      addq.l #4,sp
	return BR_CONTINUE;
    ffcc:	|      moveq #2,d0
}
    ffce:	'----> rts

0000ffd0 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    ffd0:	       movea.l 8(sp),a0
    ffd4:	       movea.l 24(a0),a0
    ffd8:	       move.l (a0),d0
    ffda:	       moveq #6,d1
    ffdc:	       cmp.l d0,d1
    ffde:	   ,-- beq.s fff2 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    ffe0:	   |   pea 19e14 <PutChar+0x1cc4>
    ffe6:	   |   jsr 176ae <KPrintF>
    ffec:	   |   addq.l #4,sp
		return BR_ERROR;
    ffee:	   |   moveq #1,d0
    fff0:	,--|-- bra.s 10046 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fff2:	|  '-> movea.l 8(sp),a0
    fff6:	|      movea.l 24(a0),a0
    fffa:	|      movea.l 4(a0),a0
    fffe:	|      move.l (a0),d0
   10000:	|  ,-- bne.s 10014 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
   10002:	|  |   pea 19e45 <PutChar+0x1cf5>
   10008:	|  |   jsr 176ae <KPrintF>
   1000e:	|  |   addq.l #4,sp
		return BR_ERROR;
   10010:	|  |   moveq #1,d0
   10012:	+--|-- bra.s 10046 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
   10014:	|  '-> moveq #28,d0
   10016:	|      add.l 8(sp),d0
   1001a:	|      movea.l 8(sp),a0
   1001e:	|      movea.l 24(a0),a0
   10022:	|      movea.l 4(a0),a0
   10026:	|      move.l (a0),d1
   10028:	|      move.l d0,-(sp)
   1002a:	|      move.l d1,-(sp)
   1002c:	|      jsr 15088 <copyVariable>
   10032:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   10034:	|      moveq #24,d0
   10036:	|      add.l 8(sp),d0
   1003a:	|      move.l d0,-(sp)
   1003c:	|      jsr 15552 <trimStack>
   10042:	|      addq.l #4,sp
	return BR_CONTINUE;
   10044:	|      moveq #2,d0
}
   10046:	'----> rts

00010048 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
   10048:	       movea.l 8(sp),a0
   1004c:	       movea.l 24(a0),a0
   10050:	       move.l (a0),d0
   10052:	       moveq #6,d1
   10054:	       cmp.l d0,d1
   10056:	   ,-- beq.s 1006a <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
   10058:	   |   pea 19e14 <PutChar+0x1cc4>
   1005e:	   |   jsr 176ae <KPrintF>
   10064:	   |   addq.l #4,sp
		return BR_ERROR;
   10066:	   |   moveq #1,d0
   10068:	,--|-- bra.s 100c0 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
   1006a:	|  '-> movea.l 8(sp),a0
   1006e:	|      movea.l 24(a0),a0
   10072:	|      movea.l 4(a0),a0
   10076:	|      move.l (a0),d0
   10078:	|  ,-- bne.s 1008c <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
   1007a:	|  |   pea 19e45 <PutChar+0x1cf5>
   10080:	|  |   jsr 176ae <KPrintF>
   10086:	|  |   addq.l #4,sp
		return BR_ERROR;
   10088:	|  |   moveq #1,d0
   1008a:	+--|-- bra.s 100c0 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
   1008c:	|  '-> moveq #28,d0
   1008e:	|      add.l 8(sp),d0
   10092:	|      movea.l 8(sp),a0
   10096:	|      movea.l 24(a0),a0
   1009a:	|      movea.l 4(a0),a0
   1009e:	|      move.l 4(a0),d1
   100a2:	|      move.l d0,-(sp)
   100a4:	|      move.l d1,-(sp)
   100a6:	|      jsr 15088 <copyVariable>
   100ac:	|      addq.l #8,sp
	trimStack (&fun -> stack);
   100ae:	|      moveq #24,d0
   100b0:	|      add.l 8(sp),d0
   100b4:	|      move.l d0,-(sp)
   100b6:	|      jsr 15552 <trimStack>
   100bc:	|      addq.l #4,sp
	return BR_CONTINUE;
   100be:	|      moveq #2,d0
}
   100c0:	'----> rts

000100c2 <builtIn_random>:

builtIn(random)
{
   100c2:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
   100c4:	       movea.l 12(sp),a0
   100c8:	       move.l 24(a0),d0
   100cc:	       move.l d0,-(sp)
   100ce:	       pea 1 <_start+0x1>
   100d2:	       move.l sp,d0
   100d4:	       addq.l #8,d0
   100d6:	       move.l d0,-(sp)
   100d8:	       jsr 14bce <getValueType>
   100de:	       lea 12(sp),sp
   100e2:	       tst.w d0
   100e4:	   ,-- bne.s 100ea <builtIn_random+0x28>
		return BR_ERROR;
   100e6:	   |   moveq #1,d0
   100e8:	,--|-- bra.s 10134 <builtIn_random+0x72>

	trimStack (&fun -> stack);
   100ea:	|  '-> moveq #24,d0
   100ec:	|      add.l 12(sp),d0
   100f0:	|      move.l d0,-(sp)
   100f2:	|      jsr 15552 <trimStack>
   100f8:	|      addq.l #4,sp
	if (num <= 0) num = 1;
   100fa:	|      move.l (sp),d0
   100fc:	|  ,-- bgt.s 10102 <builtIn_random+0x40>
   100fe:	|  |   moveq #1,d0
   10100:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
   10102:	|  '-> jsr 1626e <rand>
   10108:	|      move.l d0,d1
   1010a:	|      move.l (sp),d0
   1010c:	|      move.l d0,-(sp)
   1010e:	|      move.l d1,-(sp)
   10110:	|      jsr 18114 <__umodsi3>
   10116:	|      addq.l #8,sp
   10118:	|      move.l d0,d1
   1011a:	|      moveq #28,d0
   1011c:	|      add.l 12(sp),d0
   10120:	|      move.l d1,-(sp)
   10122:	|      pea 1 <_start+0x1>
   10126:	|      move.l d0,-(sp)
   10128:	|      jsr 154c0 <setVariable>
   1012e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10132:	|      moveq #2,d0
}
   10134:	'----> addq.l #4,sp
   10136:	       rts

00010138 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
   10138:	nop
   1013a:	rts

0001013c <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
   1013c:	moveq #2,d0
}
   1013e:	rts

00010140 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
   10140:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
   10142:	       movea.l 12(sp),a0
   10146:	       move.l 24(a0),d0
   1014a:	       move.l d0,-(sp)
   1014c:	       pea 1 <_start+0x1>
   10150:	       move.l sp,d0
   10152:	       addq.l #8,d0
   10154:	       move.l d0,-(sp)
   10156:	       jsr 14bce <getValueType>
   1015c:	       lea 12(sp),sp
   10160:	       tst.w d0
   10162:	   ,-- bne.s 10176 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
   10164:	   |   pea 19e58 <PutChar+0x1d08>
   1016a:	   |   jsr 176ae <KPrintF>
   10170:	   |   addq.l #4,sp
		return BR_ERROR;
   10172:	   |   moveq #1,d0
   10174:	,--|-- bra.s 101b6 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
   10176:	|  '-> moveq #24,d0
   10178:	|      add.l 12(sp),d0
   1017c:	|      move.l d0,-(sp)
   1017e:	|      jsr 15552 <trimStack>
   10184:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
   10186:	|      move.l (sp),d0
   10188:	|      move.l d0,d0
   1018a:	|      move.w d0,1cda2 <textPaletteIndex>

	if( textPaletteIndex > 31) {
   10190:	|      move.w 1cda2 <textPaletteIndex>,d0
   10196:	|      cmpi.w #31,d0
   1019a:	|  ,-- bls.s 101b4 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
   1019c:	|  |   pea 19e7f <PutChar+0x1d2f>
   101a2:	|  |   jsr 176ae <KPrintF>
   101a8:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
   101aa:	|  |   clr.w 1cda2 <textPaletteIndex>
		return BR_ERROR;
   101b0:	|  |   moveq #1,d0
   101b2:	+--|-- bra.s 101b6 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
   101b4:	|  '-> moveq #2,d0
}
   101b6:	'----> addq.l #4,sp
   101b8:	       rts

000101ba <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   101ba:	moveq #2,d0
}
   101bc:	rts

000101be <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   101be:	moveq #2,d0
}
   101c0:	rts

000101c2 <builtIn_setFont>:


builtIn(setFont)
{
   101c2:	       lea -16(sp),sp
   101c6:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   101c8:	       movea.l 28(sp),a0
   101cc:	       move.l 24(a0),d0
   101d0:	       move.l d0,-(sp)
   101d2:	       pea 1 <_start+0x1>
   101d6:	       lea 12(sp),a0
   101da:	       move.l a0,-(sp)
   101dc:	       jsr 14bce <getValueType>
   101e2:	       lea 12(sp),sp
   101e6:	       tst.w d0
   101e8:	   ,-- bne.s 101f0 <builtIn_setFont+0x2e>
   101ea:	   |   moveq #1,d0
   101ec:	,--|-- bra.w 1029e <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
   101f0:	|  '-> moveq #24,d0
   101f2:	|      add.l 28(sp),d0
   101f6:	|      move.l d0,-(sp)
   101f8:	|      jsr 15552 <trimStack>
   101fe:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10200:	|      movea.l 28(sp),a0
   10204:	|      move.l 24(a0),d0
   10208:	|      move.l d0,-(sp)
   1020a:	|      jsr 151a4 <getTextFromAnyVar>
   10210:	|      addq.l #4,sp
   10212:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
   10216:	|  ,-- bne.s 1021e <builtIn_setFont+0x5c>
   10218:	|  |   moveq #1,d0
   1021a:	+--|-- bra.w 1029e <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
   1021e:	|  '-> moveq #24,d0
   10220:	|      add.l 28(sp),d0
   10224:	|      move.l d0,-(sp)
   10226:	|      jsr 15552 <trimStack>
   1022c:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   1022e:	|      movea.l 28(sp),a0
   10232:	|      move.l 24(a0),d0
   10236:	|      move.l d0,-(sp)
   10238:	|      pea 5 <_start+0x5>
   1023c:	|      lea 16(sp),a0
   10240:	|      move.l a0,-(sp)
   10242:	|      jsr 14bce <getValueType>
   10248:	|      lea 12(sp),sp
   1024c:	|      tst.w d0
   1024e:	|  ,-- bne.s 10254 <builtIn_setFont+0x92>
   10250:	|  |   moveq #1,d0
   10252:	+--|-- bra.s 1029e <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
   10254:	|  '-> moveq #24,d0
   10256:	|      add.l 28(sp),d0
   1025a:	|      move.l d0,-(sp)
   1025c:	|      jsr 15552 <trimStack>
   10262:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
   10264:	|      move.l 4(sp),d1
   10268:	|      move.l 8(sp),d0
   1026c:	|      move.l d1,-(sp)
   1026e:	|      move.l 20(sp),-(sp)
   10272:	|      move.l d0,-(sp)
   10274:	|      jsr 15a06 <loadFont>
   1027a:	|      lea 12(sp),sp
   1027e:	|      tst.w d0
   10280:	|  ,-- bne.s 10286 <builtIn_setFont+0xc4>
   10282:	|  |   moveq #1,d0
   10284:	+--|-- bra.s 1029e <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
   10286:	|  '-> move.l 16(sp),12(sp)
   1028c:	|      move.l 1ce8a <SysBase>,d0
   10292:	|      movea.l d0,a6
   10294:	|      movea.l 12(sp),a1
   10298:	|      jsr -690(a6)

    return BR_CONTINUE;
   1029c:	|      moveq #2,d0
}
   1029e:	'----> movea.l (sp)+,a6
   102a0:	       lea 16(sp),sp
   102a4:	       rts

000102a6 <builtIn_inFont>:

builtIn(inFont)
{
   102a6:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   102a8:	       movea.l 12(sp),a0
   102ac:	       move.l 24(a0),d0
   102b0:	       move.l d0,-(sp)
   102b2:	       jsr 151a4 <getTextFromAnyVar>
   102b8:	       addq.l #4,sp
   102ba:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
   102bc:	   ,-- bne.s 102c2 <builtIn_inFont+0x1c>
   102be:	   |   moveq #1,d0
   102c0:	,--|-- bra.s 102f8 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
   102c2:	|  '-> moveq #24,d0
   102c4:	|      add.l 12(sp),d0
   102c8:	|      move.l d0,-(sp)
   102ca:	|      jsr 15552 <trimStack>
   102d0:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
   102d2:	|      move.l (sp),-(sp)
   102d4:	|      jsr 159f4 <isInFont>
   102da:	|      addq.l #4,sp
   102dc:	|      movea.w d0,a0
   102de:	|      moveq #28,d0
   102e0:	|      add.l 12(sp),d0
   102e4:	|      move.l a0,-(sp)
   102e6:	|      pea 1 <_start+0x1>
   102ea:	|      move.l d0,-(sp)
   102ec:	|      jsr 154c0 <setVariable>
   102f2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   102f6:	|      moveq #2,d0
}
   102f8:	'----> addq.l #4,sp
   102fa:	       rts

000102fc <builtIn_pasteString>:

builtIn(pasteString)
{
   102fc:	       lea -16(sp),sp
   10300:	       move.l a6,-(sp)
   10302:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10304:	       movea.l 32(sp),a0
   10308:	       move.l 24(a0),d0
   1030c:	       move.l d0,-(sp)
   1030e:	       jsr 151a4 <getTextFromAnyVar>
   10314:	       addq.l #4,sp
   10316:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   1031a:	       moveq #24,d0
   1031c:	       add.l 32(sp),d0
   10320:	       move.l d0,-(sp)
   10322:	       jsr 15552 <trimStack>
   10328:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   1032a:	       movea.l 32(sp),a0
   1032e:	       move.l 24(a0),d0
   10332:	       move.l d0,-(sp)
   10334:	       pea 1 <_start+0x1>
   10338:	       lea 20(sp),a0
   1033c:	       move.l a0,-(sp)
   1033e:	       jsr 14bce <getValueType>
   10344:	       lea 12(sp),sp
   10348:	       tst.w d0
   1034a:	   ,-- bne.s 10352 <builtIn_pasteString+0x56>
   1034c:	   |   moveq #1,d0
   1034e:	,--|-- bra.w 103f4 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   10352:	|  '-> moveq #24,d0
   10354:	|      add.l 32(sp),d0
   10358:	|      move.l d0,-(sp)
   1035a:	|      jsr 15552 <trimStack>
   10360:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10362:	|      movea.l 32(sp),a0
   10366:	|      move.l 24(a0),d0
   1036a:	|      move.l d0,-(sp)
   1036c:	|      pea 1 <_start+0x1>
   10370:	|      lea 16(sp),a0
   10374:	|      move.l a0,-(sp)
   10376:	|      jsr 14bce <getValueType>
   1037c:	|      lea 12(sp),sp
   10380:	|      tst.w d0
   10382:	|  ,-- bne.s 10388 <builtIn_pasteString+0x8c>
   10384:	|  |   moveq #1,d0
   10386:	+--|-- bra.s 103f4 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   10388:	|  '-> moveq #24,d0
   1038a:	|      add.l 32(sp),d0
   1038e:	|      move.l d0,-(sp)
   10390:	|      jsr 15552 <trimStack>
   10396:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
   10398:	|      move.l 8(sp),d0
   1039c:	|      cmpi.l #65535,d0
   103a2:	|  ,-- bne.s 103c2 <builtIn_pasteString+0xc6>
		x = (winWidth - stringWidth(newText)) >> 1;
   103a4:	|  |   move.l 1cdde <winWidth>,d2
   103aa:	|  |   move.l 20(sp),-(sp)
   103ae:	|  |   jsr 15cb8 <stringWidth>
   103b4:	|  |   addq.l #4,sp
   103b6:	|  |   move.l d2,d1
   103b8:	|  |   sub.l d0,d1
   103ba:	|  |   move.l d1,d0
   103bc:	|  |   lsr.l #1,d0
   103be:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   103c2:	|  '-> move.l 12(sp),d1
   103c6:	|      move.l 8(sp),d0
   103ca:	|      move.l d1,-(sp)
   103cc:	|      move.l d0,-(sp)
   103ce:	|      move.l 28(sp),-(sp)
   103d2:	|      jsr 15bda <pasteStringToBackdrop>
   103d8:	|      lea 12(sp),sp
    FreeVec(newText); 
   103dc:	|      move.l 20(sp),16(sp)
   103e2:	|      move.l 1ce8a <SysBase>,d0
   103e8:	|      movea.l d0,a6
   103ea:	|      movea.l 16(sp),a1
   103ee:	|      jsr -690(a6)
    return BR_CONTINUE;
   103f2:	|      moveq #2,d0
}
   103f4:	'----> move.l (sp)+,d2
   103f6:	       movea.l (sp)+,a6
   103f8:	       lea 16(sp),sp
   103fc:	       rts

000103fe <builtIn_anim>:

builtIn(anim)
{
   103fe:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   10402:	       moveq #1,d0
   10404:	       cmp.l 16(sp),d0
   10408:	   ,-- blt.s 1041e <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   1040a:	   |   pea 19ea9 <PutChar+0x1d59>
   10410:	   |   jsr 176ae <KPrintF>
   10416:	   |   addq.l #4,sp
		return BR_ERROR;
   10418:	   |   moveq #1,d0
   1041a:	,--|-- bra.w 104ac <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   1041e:	|  '-> moveq #24,d1
   10420:	|      add.l 20(sp),d1
   10424:	|      move.l 16(sp),d0
   10428:	|      subq.l #1,d0
   1042a:	|      move.l d1,-(sp)
   1042c:	|      move.l d0,-(sp)
   1042e:	|      jsr 9a30 <createPersonaAnim>
   10434:	|      addq.l #8,sp
   10436:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1043a:	|      movea.l 20(sp),a0
   1043e:	|      move.l 24(a0),d0
   10442:	|      move.l d0,-(sp)
   10444:	|      pea 5 <_start+0x5>
   10448:	|      lea 8(sp),a0
   1044c:	|      move.l a0,-(sp)
   1044e:	|      jsr 14bce <getValueType>
   10454:	|      lea 12(sp),sp
   10458:	|      tst.w d0
   1045a:	|  ,-- bne.s 10460 <builtIn_anim+0x62>
   1045c:	|  |   moveq #1,d0
   1045e:	+--|-- bra.s 104ac <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   10460:	|  '-> moveq #24,d0
   10462:	|      add.l 20(sp),d0
   10466:	|      move.l d0,-(sp)
   10468:	|      jsr 15552 <trimStack>
   1046e:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   10470:	|      move.l (sp),d0
   10472:	|      move.l d0,-(sp)
   10474:	|      jsr 163d0 <loadBankForAnim>
   1047a:	|      addq.l #4,sp
   1047c:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   10480:	|  ,-- bne.s 10486 <builtIn_anim+0x88>
   10482:	|  |   moveq #1,d0
   10484:	+--|-- bra.s 104ac <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   10486:	|  '-> move.l 4(sp),-(sp)
   1048a:	|      move.l 12(sp),-(sp)
   1048e:	|      jsr b93c <setBankFile>
   10494:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10496:	|      moveq #28,d0
   10498:	|      add.l 20(sp),d0
   1049c:	|      move.l 8(sp),-(sp)
   104a0:	|      move.l d0,-(sp)
   104a2:	|      jsr 1547c <newAnimationVariable>
   104a8:	|      addq.l #8,sp
	return BR_CONTINUE;
   104aa:	|      moveq #2,d0
}
   104ac:	'----> lea 12(sp),sp
   104b0:	       rts

000104b2 <builtIn_costume>:

builtIn(costume)
{
   104b2:	          lea -32(sp),sp
   104b6:	          move.l a6,-(sp)
   104b8:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   104ba:	          moveq #8,d0
   104bc:	          move.l d0,32(sp)
   104c0:	          clr.l 28(sp)
   104c4:	          move.l 1ce8a <SysBase>,d0
   104ca:	          movea.l d0,a6
   104cc:	          move.l 32(sp),d0
   104d0:	          move.l 28(sp),d1
   104d4:	          jsr -684(a6)
   104d8:	          move.l d0,24(sp)
   104dc:	          move.l 24(sp),d0
   104e0:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   104e4:	      ,-- bne.s 104ec <builtIn_costume+0x3a>
   104e6:	      |   moveq #1,d0
   104e8:	,-----|-- bra.w 105d4 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   104ec:	|     '-> move.l 44(sp),d0
   104f0:	|         pea 3 <_start+0x3>
   104f4:	|         move.l d0,-(sp)
   104f6:	|         jsr 180b8 <__divsi3>
   104fc:	|         addq.l #8,sp
   104fe:	|         movea.l 20(sp),a0
   10502:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10506:	|         tst.l 44(sp)
   1050a:	|     ,-- beq.s 10520 <builtIn_costume+0x6e>
   1050c:	|     |   movea.l 20(sp),a0
   10510:	|     |   move.l 4(a0),d1
   10514:	|     |   move.l d1,d0
   10516:	|     |   add.l d0,d0
   10518:	|     |   add.l d1,d0
   1051a:	|     |   cmp.l 44(sp),d0
   1051e:	|  ,--|-- beq.s 10534 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   10520:	|  |  '-> pea 19ee3 <PutChar+0x1d93>
   10526:	|  |      jsr 176ae <KPrintF>
   1052c:	|  |      addq.l #4,sp
        return BR_ERROR;
   1052e:	|  |      moveq #1,d0
   10530:	+--|----- bra.w 105d4 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   10534:	|  '----> move.l 44(sp),d0
   10538:	|         add.l d0,d0
   1053a:	|         add.l d0,d0
   1053c:	|         move.l d0,16(sp)
   10540:	|         clr.l 12(sp)
   10544:	|         move.l 1ce8a <SysBase>,d0
   1054a:	|         movea.l d0,a6
   1054c:	|         move.l 16(sp),d0
   10550:	|         move.l 12(sp),d1
   10554:	|         jsr -684(a6)
   10558:	|         move.l d0,8(sp)
   1055c:	|         move.l 8(sp),d0
   10560:	|         movea.l 20(sp),a0
   10564:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   10566:	|         movea.l 20(sp),a0
   1056a:	|         move.l (a0),d0
   1056c:	|     ,-- bne.s 10572 <builtIn_costume+0xc0>
   1056e:	|     |   moveq #1,d0
   10570:	+-----|-- bra.s 105d4 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   10572:	|     '-> move.l 44(sp),d0
   10576:	|         subq.l #1,d0
   10578:	|         move.l d0,36(sp)
   1057c:	|     ,-- bra.s 105b8 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   1057e:	|  ,--|-> movea.l 48(sp),a0
   10582:	|  |  |   move.l 24(a0),d0
   10586:	|  |  |   movea.l 20(sp),a0
   1058a:	|  |  |   movea.l (a0),a0
   1058c:	|  |  |   move.l 36(sp),d1
   10590:	|  |  |   add.l d1,d1
   10592:	|  |  |   add.l d1,d1
   10594:	|  |  |   lea (0,a0,d1.l),a2
   10598:	|  |  |   move.l d0,-(sp)
   1059a:	|  |  |   jsr 150a6 <getAnimationFromVar>
   105a0:	|  |  |   addq.l #4,sp
   105a2:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   105a4:	|  |  |   moveq #24,d0
   105a6:	|  |  |   add.l 48(sp),d0
   105aa:	|  |  |   move.l d0,-(sp)
   105ac:	|  |  |   jsr 15552 <trimStack>
   105b2:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   105b4:	|  |  |   subq.l #1,36(sp)
   105b8:	|  |  '-> tst.l 36(sp)
   105bc:	|  '----- bge.s 1057e <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   105be:	|         moveq #28,d0
   105c0:	|         add.l 48(sp),d0
   105c4:	|         move.l 20(sp),-(sp)
   105c8:	|         move.l d0,-(sp)
   105ca:	|         jsr 1549e <newCostumeVariable>
   105d0:	|         addq.l #8,sp
    return BR_CONTINUE;
   105d2:	|         moveq #2,d0
}
   105d4:	'-------> movea.l (sp)+,a2
   105d6:	          movea.l (sp)+,a6
   105d8:	          lea 32(sp),sp
   105dc:	          rts

000105de <builtIn_launch>:

builtIn(launch)
{
   105de:	          lea -20(sp),sp
   105e2:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   105e4:	          movea.l 32(sp),a0
   105e8:	          move.l 24(a0),d0
   105ec:	          move.l d0,-(sp)
   105ee:	          jsr 151a4 <getTextFromAnyVar>
   105f4:	          addq.l #4,sp
   105f6:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   105fa:	      ,-- bne.s 10602 <builtIn_launch+0x24>
   105fc:	      |   moveq #1,d0
   105fe:	,-----|-- bra.w 10730 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   10602:	|     '-> move.l 20(sp),-(sp)
   10606:	|         jsr 2fe <encodeFilename>
   1060c:	|         addq.l #4,sp
   1060e:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   10612:	|         moveq #24,d0
   10614:	|         add.l 32(sp),d0
   10618:	|         move.l d0,-(sp)
   1061a:	|         jsr 15552 <trimStack>
   10620:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   10622:	|         movea.l 20(sp),a0
   10626:	|         move.b (a0),d0
   10628:	|         cmpi.b #104,d0
   1062c:	|  ,----- bne.s 10696 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   1062e:	|  |      movea.l 20(sp),a0
   10632:	|  |      addq.l #1,a0
   10634:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   10636:	|  |      cmpi.b #116,d0
   1063a:	|  +----- bne.s 10696 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   1063c:	|  |      movea.l 20(sp),a0
   10640:	|  |      addq.l #2,a0
   10642:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   10644:	|  |      cmpi.b #116,d0
   10648:	|  +----- bne.s 10696 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   1064a:	|  |      movea.l 20(sp),a0
   1064e:	|  |      addq.l #3,a0
   10650:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   10652:	|  |      cmpi.b #112,d0
   10656:	|  +----- bne.s 10696 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10658:	|  |      movea.l 20(sp),a0
   1065c:	|  |      addq.l #4,a0
   1065e:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   10660:	|  |      cmpi.b #58,d0
   10664:	|  |  ,-- beq.s 10682 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   10666:	|  |  |   movea.l 20(sp),a0
   1066a:	|  |  |   addq.l #4,a0
   1066c:	|  |  |   move.b (a0),d0
   1066e:	|  |  |   cmpi.b #115,d0
   10672:	|  +--|-- bne.s 10696 <builtIn_launch+0xb8>
   10674:	|  |  |   movea.l 20(sp),a0
   10678:	|  |  |   addq.l #5,a0
   1067a:	|  |  |   move.b (a0),d0
   1067c:	|  |  |   cmpi.b #58,d0
   10680:	|  +--|-- bne.s 10696 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   10682:	|  |  '-> move.l 20(sp),-(sp)
   10686:	|  |      jsr b8 <copyString>
   1068c:	|  |      addq.l #4,sp
   1068e:	|  |      move.l d0,1cf48 <launchMe>
   10694:	|  |  ,-- bra.s 106e8 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10696:	|  '--|-> move.l 1cdf2 <gamePath>,d0
   1069c:	|     |   pea 19f2e <PutChar+0x1dde>
   106a2:	|     |   move.l d0,-(sp)
   106a4:	|     |   jsr 140fa <joinStrings>
   106aa:	|     |   addq.l #8,sp
   106ac:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   106b0:	|     |   move.l 16(sp),-(sp)
   106b4:	|     |   move.l 16(sp),-(sp)
   106b8:	|     |   jsr 140fa <joinStrings>
   106be:	|     |   addq.l #8,sp
   106c0:	|     |   move.l d0,1cf48 <launchMe>
        FreeVec(newText);
   106c6:	|     |   move.l 16(sp),8(sp)
   106cc:	|     |   move.l 1ce8a <SysBase>,d0
   106d2:	|     |   movea.l d0,a6
   106d4:	|     |   movea.l 8(sp),a1
   106d8:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   106dc:	|     |   move.l 1cf48 <launchMe>,d0
   106e2:	|     +-- bne.s 106e8 <builtIn_launch+0x10a>
   106e4:	|     |   moveq #1,d0
   106e6:	+-----|-- bra.s 10730 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   106e8:	|     '-> move.l 20(sp),4(sp)
   106ee:	|         move.l 1ce8a <SysBase>,d0
   106f4:	|         movea.l d0,a6
   106f6:	|         movea.l 4(sp),a1
   106fa:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   106fe:	|         clr.l -(sp)
   10700:	|         jsr 4d3a <setGraphicsWindow>
   10706:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   10708:	|         moveq #28,d0
   1070a:	|         add.l 32(sp),d0
   1070e:	|         pea 1 <_start+0x1>
   10712:	|         pea 1 <_start+0x1>
   10716:	|         move.l d0,-(sp)
   10718:	|         jsr 154c0 <setVariable>
   1071e:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   10722:	|         moveq #28,d0
   10724:	|         add.l 32(sp),d0
   10728:	|         move.l d0,1cf4c <launchResult>

    return BR_KEEP_AND_PAUSE;
   1072e:	|         moveq #0,d0
}
   10730:	'-------> movea.l (sp)+,a6
   10732:	          lea 20(sp),sp
   10736:	          rts

00010738 <builtIn_pause>:

builtIn(pause)
{
   10738:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1073a:	       movea.l 12(sp),a0
   1073e:	       move.l 24(a0),d0
   10742:	       move.l d0,-(sp)
   10744:	       pea 1 <_start+0x1>
   10748:	       move.l sp,d0
   1074a:	       addq.l #8,d0
   1074c:	       move.l d0,-(sp)
   1074e:	       jsr 14bce <getValueType>
   10754:	       lea 12(sp),sp
   10758:	       tst.w d0
   1075a:	   ,-- bne.s 10760 <builtIn_pause+0x28>
   1075c:	   |   moveq #1,d0
   1075e:	,--|-- bra.s 1078e <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   10760:	|  '-> moveq #24,d0
   10762:	|      add.l 12(sp),d0
   10766:	|      move.l d0,-(sp)
   10768:	|      jsr 15552 <trimStack>
   1076e:	|      addq.l #4,sp
	if (theTime > 0) {
   10770:	|      move.l (sp),d0
   10772:	|  ,-- ble.s 1078c <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   10774:	|  |   move.l (sp),d0
   10776:	|  |   subq.l #1,d0
   10778:	|  |   movea.l 12(sp),a0
   1077c:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   10780:	|  |   movea.l 12(sp),a0
   10784:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   10788:	|  |   moveq #0,d0
   1078a:	+--|-- bra.s 1078e <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   1078c:	|  '-> moveq #2,d0
}
   1078e:	'----> addq.l #4,sp
   10790:	       rts

00010792 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   10792:	jsr 54ce <completeTimers>
	return BR_CONTINUE;
   10798:	moveq #2,d0
}
   1079a:	rts

0001079c <builtIn_callEvent>:

builtIn(callEvent)
{
   1079c:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   107a0:	       movea.l 20(sp),a0
   107a4:	       move.l 24(a0),d0
   107a8:	       move.l d0,-(sp)
   107aa:	       pea 7 <_start+0x7>
   107ae:	       lea 8(sp),a0
   107b2:	       move.l a0,-(sp)
   107b4:	       jsr 14bce <getValueType>
   107ba:	       lea 12(sp),sp
   107be:	       tst.w d0
   107c0:	   ,-- bne.s 107c8 <builtIn_callEvent+0x2c>
   107c2:	   |   moveq #1,d0
   107c4:	,--|-- bra.w 1085e <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   107c8:	|  '-> moveq #24,d0
   107ca:	|      add.l 20(sp),d0
   107ce:	|      move.l d0,-(sp)
   107d0:	|      jsr 15552 <trimStack>
   107d6:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   107d8:	|      movea.l 20(sp),a0
   107dc:	|      move.l 24(a0),d0
   107e0:	|      move.l d0,-(sp)
   107e2:	|      pea 7 <_start+0x7>
   107e6:	|      moveq #12,d0
   107e8:	|      add.l sp,d0
   107ea:	|      move.l d0,-(sp)
   107ec:	|      jsr 14bce <getValueType>
   107f2:	|      lea 12(sp),sp
   107f6:	|      tst.w d0
   107f8:	|  ,-- bne.s 107fe <builtIn_callEvent+0x62>
   107fa:	|  |   moveq #1,d0
   107fc:	+--|-- bra.s 1085e <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   107fe:	|  '-> moveq #24,d0
   10800:	|      add.l 20(sp),d0
   10804:	|      move.l d0,-(sp)
   10806:	|      jsr 15552 <trimStack>
   1080c:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   1080e:	|      move.l (sp),d1
   10810:	|      move.l 4(sp),d0
   10814:	|      move.l d1,-(sp)
   10816:	|      move.l d0,-(sp)
   10818:	|      jsr d916 <getCombinationFunction>
   1081e:	|      addq.l #8,sp
   10820:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   10824:	|  ,-- beq.s 10844 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   10826:	|  |   moveq #28,d0
   10828:	|  |   add.l 20(sp),d0
   1082c:	|  |   move.l 8(sp),-(sp)
   10830:	|  |   pea 2 <_start+0x2>
   10834:	|  |   move.l d0,-(sp)
   10836:	|  |   jsr 154c0 <setVariable>
   1083c:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   10840:	|  |   moveq #4,d0
   10842:	+--|-- bra.s 1085e <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   10844:	|  '-> moveq #28,d0
   10846:	|      add.l 20(sp),d0
   1084a:	|      clr.l -(sp)
   1084c:	|      pea 1 <_start+0x1>
   10850:	|      move.l d0,-(sp)
   10852:	|      jsr 154c0 <setVariable>
   10858:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1085c:	|      moveq #2,d0
}
   1085e:	'----> lea 12(sp),sp
   10862:	       rts

00010864 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   10864:	move.w #1,1cf58 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   1086c:	moveq #2,d0
}
   1086e:	rts

00010870 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   10870:	moveq #24,d0
   10872:	add.l 8(sp),d0
   10876:	move.l d0,-(sp)
   10878:	jsr 15552 <trimStack>
   1087e:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   10880:	pea 19f30 <PutChar+0x1de0>
   10886:	jsr 176ae <KPrintF>
   1088c:	addq.l #4,sp
	return BR_CONTINUE;
   1088e:	moveq #2,d0
}
   10890:	rts

00010892 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   10892:	pea 19f30 <PutChar+0x1de0>
   10898:	jsr 176ae <KPrintF>
   1089e:	addq.l #4,sp
	return BR_CONTINUE;
   108a0:	moveq #2,d0
}
   108a2:	rts

000108a4 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   108a4:	pea 19f30 <PutChar+0x1de0>
   108aa:	jsr 176ae <KPrintF>
   108b0:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   108b2:	moveq #2,d0
}
   108b4:	rts

000108b6 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   108b6:	pea 19f30 <PutChar+0x1de0>
   108bc:	jsr 176ae <KPrintF>
   108c2:	addq.l #4,sp
	return BR_CONTINUE;
   108c4:	moveq #2,d0
}
   108c6:	rts

000108c8 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   108c8:	pea 19f30 <PutChar+0x1de0>
   108ce:	jsr 176ae <KPrintF>
   108d4:	addq.l #4,sp
	return BR_CONTINUE;
   108d6:	moveq #2,d0
}
   108d8:	rts

000108da <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   108da:	pea 19f30 <PutChar+0x1de0>
   108e0:	jsr 176ae <KPrintF>
   108e6:	addq.l #4,sp
	return BR_CONTINUE;
   108e8:	moveq #2,d0
}
   108ea:	rts

000108ec <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   108ec:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108f0:	       movea.l 20(sp),a0
   108f4:	       move.l 24(a0),d0
   108f8:	       move.l d0,-(sp)
   108fa:	       pea 1 <_start+0x1>
   108fe:	       moveq #16,d0
   10900:	       add.l sp,d0
   10902:	       move.l d0,-(sp)
   10904:	       jsr 14bce <getValueType>
   1090a:	       lea 12(sp),sp
   1090e:	       tst.w d0
   10910:	   ,-- bne.s 10918 <builtIn_startMusic+0x2c>
   10912:	   |   moveq #1,d0
   10914:	,--|-- bra.w 109b8 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10918:	|  '-> moveq #24,d0
   1091a:	|      add.l 20(sp),d0
   1091e:	|      move.l d0,-(sp)
   10920:	|      jsr 15552 <trimStack>
   10926:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10928:	|      movea.l 20(sp),a0
   1092c:	|      move.l 24(a0),d0
   10930:	|      move.l d0,-(sp)
   10932:	|      pea 1 <_start+0x1>
   10936:	|      moveq #12,d0
   10938:	|      add.l sp,d0
   1093a:	|      move.l d0,-(sp)
   1093c:	|      jsr 14bce <getValueType>
   10942:	|      lea 12(sp),sp
   10946:	|      tst.w d0
   10948:	|  ,-- bne.s 1094e <builtIn_startMusic+0x62>
   1094a:	|  |   moveq #1,d0
   1094c:	+--|-- bra.s 109b8 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   1094e:	|  '-> moveq #24,d0
   10950:	|      add.l 20(sp),d0
   10954:	|      move.l d0,-(sp)
   10956:	|      jsr 15552 <trimStack>
   1095c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1095e:	|      movea.l 20(sp),a0
   10962:	|      move.l 24(a0),d0
   10966:	|      move.l d0,-(sp)
   10968:	|      pea 5 <_start+0x5>
   1096c:	|      lea 8(sp),a0
   10970:	|      move.l a0,-(sp)
   10972:	|      jsr 14bce <getValueType>
   10978:	|      lea 12(sp),sp
   1097c:	|      tst.w d0
   1097e:	|  ,-- bne.s 10984 <builtIn_startMusic+0x98>
   10980:	|  |   moveq #1,d0
   10982:	+--|-- bra.s 109b8 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10984:	|  '-> moveq #24,d0
   10986:	|      add.l 20(sp),d0
   1098a:	|      move.l d0,-(sp)
   1098c:	|      jsr 15552 <trimStack>
   10992:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10994:	|      movea.l 8(sp),a0
   10998:	|      move.l 4(sp),d1
   1099c:	|      move.l (sp),d0
   1099e:	|      move.l a0,-(sp)
   109a0:	|      move.l d1,-(sp)
   109a2:	|      move.l d0,-(sp)
   109a4:	|      jsr d518 <playMOD>
   109aa:	|      lea 12(sp),sp
   109ae:	|      tst.w d0
   109b0:	|  ,-- bne.s 109b6 <builtIn_startMusic+0xca>
   109b2:	|  |   moveq #2,d0
   109b4:	+--|-- bra.s 109b8 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   109b6:	|  '-> moveq #2,d0
}
   109b8:	'----> lea 12(sp),sp
   109bc:	       rts

000109be <builtIn_stopMusic>:

builtIn(stopMusic)
{
   109be:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   109c0:	       movea.l 12(sp),a0
   109c4:	       move.l 24(a0),d0
   109c8:	       move.l d0,-(sp)
   109ca:	       pea 1 <_start+0x1>
   109ce:	       move.l sp,d0
   109d0:	       addq.l #8,d0
   109d2:	       move.l d0,-(sp)
   109d4:	       jsr 14bce <getValueType>
   109da:	       lea 12(sp),sp
   109de:	       tst.w d0
   109e0:	   ,-- bne.s 109e6 <builtIn_stopMusic+0x28>
   109e2:	   |   moveq #1,d0
   109e4:	,--|-- bra.s 10a04 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   109e6:	|  '-> moveq #24,d0
   109e8:	|      add.l 12(sp),d0
   109ec:	|      move.l d0,-(sp)
   109ee:	|      jsr 15552 <trimStack>
   109f4:	|      addq.l #4,sp
	stopMOD (v);
   109f6:	|      move.l (sp),d0
   109f8:	|      move.l d0,-(sp)
   109fa:	|      jsr d5b4 <stopMOD>
   10a00:	|      addq.l #4,sp
	return BR_CONTINUE;
   10a02:	|      moveq #2,d0
}
   10a04:	'----> addq.l #4,sp
   10a06:	       rts

00010a08 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   10a08:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a0a:	       movea.l 16(sp),a0
   10a0e:	       move.l 24(a0),d0
   10a12:	       move.l d0,-(sp)
   10a14:	       pea 1 <_start+0x1>
   10a18:	       move.l sp,d0
   10a1a:	       addq.l #8,d0
   10a1c:	       move.l d0,-(sp)
   10a1e:	       jsr 14bce <getValueType>
   10a24:	       lea 12(sp),sp
   10a28:	       tst.w d0
   10a2a:	   ,-- bne.s 10a30 <builtIn_setMusicVolume+0x28>
   10a2c:	   |   moveq #1,d0
   10a2e:	,--|-- bra.s 10a8a <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10a30:	|  '-> moveq #24,d0
   10a32:	|      add.l 16(sp),d0
   10a36:	|      move.l d0,-(sp)
   10a38:	|      jsr 15552 <trimStack>
   10a3e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a40:	|      movea.l 16(sp),a0
   10a44:	|      move.l 24(a0),d0
   10a48:	|      move.l d0,-(sp)
   10a4a:	|      pea 1 <_start+0x1>
   10a4e:	|      moveq #12,d0
   10a50:	|      add.l sp,d0
   10a52:	|      move.l d0,-(sp)
   10a54:	|      jsr 14bce <getValueType>
   10a5a:	|      lea 12(sp),sp
   10a5e:	|      tst.w d0
   10a60:	|  ,-- bne.s 10a66 <builtIn_setMusicVolume+0x5e>
   10a62:	|  |   moveq #1,d0
   10a64:	+--|-- bra.s 10a8a <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10a66:	|  '-> moveq #24,d0
   10a68:	|      add.l 16(sp),d0
   10a6c:	|      move.l d0,-(sp)
   10a6e:	|      jsr 15552 <trimStack>
   10a74:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   10a76:	|      move.l (sp),d1
   10a78:	|      move.l 4(sp),d0
   10a7c:	|      move.l d1,-(sp)
   10a7e:	|      move.l d0,-(sp)
   10a80:	|      jsr d59a <setMusicVolume>
   10a86:	|      addq.l #8,sp
	return BR_CONTINUE;
   10a88:	|      moveq #2,d0
}
   10a8a:	'----> addq.l #8,sp
   10a8c:	       rts

00010a8e <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10a8e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a90:	       movea.l 12(sp),a0
   10a94:	       move.l 24(a0),d0
   10a98:	       move.l d0,-(sp)
   10a9a:	       pea 1 <_start+0x1>
   10a9e:	       move.l sp,d0
   10aa0:	       addq.l #8,d0
   10aa2:	       move.l d0,-(sp)
   10aa4:	       jsr 14bce <getValueType>
   10aaa:	       lea 12(sp),sp
   10aae:	       tst.w d0
   10ab0:	   ,-- bne.s 10ab6 <builtIn_setDefaultMusicVolume+0x28>
   10ab2:	   |   moveq #1,d0
   10ab4:	,--|-- bra.s 10ad4 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10ab6:	|  '-> moveq #24,d0
   10ab8:	|      add.l 12(sp),d0
   10abc:	|      move.l d0,-(sp)
   10abe:	|      jsr 15552 <trimStack>
   10ac4:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10ac6:	|      move.l (sp),d0
   10ac8:	|      move.l d0,-(sp)
   10aca:	|      jsr d57e <setDefaultMusicVolume>
   10ad0:	|      addq.l #4,sp
	return BR_CONTINUE;
   10ad2:	|      moveq #2,d0
}
   10ad4:	'----> addq.l #4,sp
   10ad6:	       rts

00010ad8 <builtIn_playSound>:

builtIn(playSound)
{
   10ad8:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ada:	       movea.l 12(sp),a0
   10ade:	       move.l 24(a0),d0
   10ae2:	       move.l d0,-(sp)
   10ae4:	       pea 5 <_start+0x5>
   10ae8:	       move.l sp,d0
   10aea:	       addq.l #8,d0
   10aec:	       move.l d0,-(sp)
   10aee:	       jsr 14bce <getValueType>
   10af4:	       lea 12(sp),sp
   10af8:	       tst.w d0
   10afa:	   ,-- bne.s 10b00 <builtIn_playSound+0x28>
   10afc:	   |   moveq #1,d0
   10afe:	,--|-- bra.s 10b28 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   10b00:	|  '-> moveq #24,d0
   10b02:	|      add.l 12(sp),d0
   10b06:	|      move.l d0,-(sp)
   10b08:	|      jsr 15552 <trimStack>
   10b0e:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   10b10:	|      move.l (sp),d0
   10b12:	|      clr.l -(sp)
   10b14:	|      move.l d0,-(sp)
   10b16:	|      jsr d5a2 <startSound>
   10b1c:	|      addq.l #8,sp
   10b1e:	|      tst.w d0
   10b20:	|  ,-- bne.s 10b26 <builtIn_playSound+0x4e>
   10b22:	|  |   moveq #2,d0
   10b24:	+--|-- bra.s 10b28 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   10b26:	|  '-> moveq #2,d0
}
   10b28:	'----> addq.l #4,sp
   10b2a:	       rts

00010b2c <builtIn_loopSound>:

builtIn(loopSound)
{
   10b2c:	             lea -28(sp),sp
   10b30:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10b32:	             tst.l 36(sp)
   10b36:	         ,-- bgt.s 10b4c <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   10b38:	         |   pea 19f53 <PutChar+0x1e03>
   10b3e:	         |   jsr 176ae <KPrintF>
   10b44:	         |   addq.l #4,sp
		return BR_ERROR;
   10b46:	         |   moveq #1,d0
   10b48:	,--------|-- bra.w 10d08 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   10b4c:	|        '-> moveq #1,d0
   10b4e:	|            cmp.l 36(sp),d0
   10b52:	|     ,----- blt.s 10bae <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10b54:	|     |      movea.l 40(sp),a0
   10b58:	|     |      move.l 24(a0),d0
   10b5c:	|     |      move.l d0,-(sp)
   10b5e:	|     |      pea 5 <_start+0x5>
   10b62:	|     |      lea 16(sp),a0
   10b66:	|     |      move.l a0,-(sp)
   10b68:	|     |      jsr 14bce <getValueType>
   10b6e:	|     |      lea 12(sp),sp
   10b72:	|     |      tst.w d0
   10b74:	|     |  ,-- bne.s 10b7c <builtIn_loopSound+0x50>
   10b76:	|     |  |   moveq #1,d0
   10b78:	+-----|--|-- bra.w 10d08 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10b7c:	|     |  '-> moveq #24,d0
   10b7e:	|     |      add.l 40(sp),d0
   10b82:	|     |      move.l d0,-(sp)
   10b84:	|     |      jsr 15552 <trimStack>
   10b8a:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10b8c:	|     |      move.l 8(sp),d0
   10b90:	|     |      pea 1 <_start+0x1>
   10b94:	|     |      move.l d0,-(sp)
   10b96:	|     |      jsr d5a2 <startSound>
   10b9c:	|     |      addq.l #8,sp
   10b9e:	|     |      tst.w d0
   10ba0:	|     |  ,-- bne.s 10ba8 <builtIn_loopSound+0x7c>
   10ba2:	|     |  |   moveq #2,d0
   10ba4:	+-----|--|-- bra.w 10d08 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10ba8:	|     |  '-> moveq #2,d0
   10baa:	+-----|----- bra.w 10d08 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10bae:	|     '----> moveq #2,d1
   10bb0:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10bb4:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10bb8:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10bbc:	|            movea.l 40(sp),a0
   10bc0:	|            movea.l 24(a0),a0
   10bc4:	|            move.l (a0),d0
   10bc6:	|            moveq #5,d1
   10bc8:	|            cmp.l d0,d1
   10bca:	|  ,-------- beq.w 10ca2 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10bce:	|  |         movea.l 40(sp),a0
   10bd2:	|  |         move.l 24(a0),d0
   10bd6:	|  |         move.l d0,-(sp)
   10bd8:	|  |         pea 1 <_start+0x1>
   10bdc:	|  |         lea 12(sp),a0
   10be0:	|  |         move.l a0,-(sp)
   10be2:	|  |         jsr 14bce <getValueType>
   10be8:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10bec:	|  |         moveq #24,d0
   10bee:	|  |         add.l 40(sp),d0
   10bf2:	|  |         move.l d0,-(sp)
   10bf4:	|  |         jsr 15552 <trimStack>
   10bfa:	|  |         addq.l #4,sp
			numParams--;
   10bfc:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10c00:	|  +-------- bra.w 10ca2 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10c04:	|  |  ,----> movea.l 40(sp),a0
   10c08:	|  |  |      move.l 24(a0),d0
   10c0c:	|  |  |      move.l d0,-(sp)
   10c0e:	|  |  |      pea 5 <_start+0x5>
   10c12:	|  |  |      lea 16(sp),a0
   10c16:	|  |  |      move.l a0,-(sp)
   10c18:	|  |  |      jsr 14bce <getValueType>
   10c1e:	|  |  |      lea 12(sp),sp
   10c22:	|  |  |      tst.w d0
   10c24:	|  |  |  ,-- bne.s 10c3a <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   10c26:	|  |  |  |   pea 19f91 <PutChar+0x1e41>
   10c2c:	|  |  |  |   jsr 176ae <KPrintF>
   10c32:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10c34:	|  |  |  |   moveq #1,d0
   10c36:	+--|--|--|-- bra.w 10d08 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10c3a:	|  |  |  '-> moveq #20,d0
   10c3c:	|  |  |      move.l d0,20(sp)
   10c40:	|  |  |      clr.l 16(sp)
   10c44:	|  |  |      move.l 1ce8a <SysBase>,d0
   10c4a:	|  |  |      movea.l d0,a6
   10c4c:	|  |  |      move.l 20(sp),d0
   10c50:	|  |  |      move.l 16(sp),d1
   10c54:	|  |  |      jsr -684(a6)
   10c58:	|  |  |      move.l d0,12(sp)
   10c5c:	|  |  |      move.l 12(sp),d0
   10c60:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10c64:	|  |  |  ,-- bne.s 10c6c <builtIn_loopSound+0x140>
   10c66:	|  |  |  |   moveq #1,d0
   10c68:	+--|--|--|-- bra.w 10d08 <builtIn_loopSound+0x1dc>

			s->next = old;
   10c6c:	|  |  |  '-> movea.l 28(sp),a0
   10c70:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10c76:	|  |  |      movea.l 28(sp),a0
   10c7a:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10c7e:	|  |  |      move.l 8(sp),d0
   10c82:	|  |  |      movea.l 28(sp),a0
   10c86:	|  |  |      move.l d0,(a0)
			old = s;
   10c88:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10c8e:	|  |  |      moveq #24,d0
   10c90:	|  |  |      add.l 40(sp),d0
   10c94:	|  |  |      move.l d0,-(sp)
   10c96:	|  |  |      jsr 15552 <trimStack>
   10c9c:	|  |  |      addq.l #4,sp
			numParams--;
   10c9e:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10ca2:	|  '--|----> tst.l 36(sp)
   10ca6:	|     '----- bne.w 10c04 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10caa:	|        ,-- bra.s 10cb6 <builtIn_loopSound+0x18a>
   10cac:	|     ,--|-> movea.l 28(sp),a0
   10cb0:	|     |  |   move.l 4(a0),28(sp)
   10cb6:	|     |  '-> movea.l 28(sp),a0
   10cba:	|     |      move.l 4(a0),d0
   10cbe:	|     '----- bne.s 10cac <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10cc0:	|            move.l 4(sp),d0
   10cc4:	|            moveq #1,d1
   10cc6:	|            cmp.l d0,d1
   10cc8:	|     ,----- bge.s 10ce0 <builtIn_loopSound+0x1b4>
			s->next = old;
   10cca:	|     |      movea.l 28(sp),a0
   10cce:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10cd4:	|     |      movea.l 24(sp),a0
   10cd8:	|     |      move.l 28(sp),8(a0)
   10cde:	|     |  ,-- bra.s 10cf0 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10ce0:	|     '--|-> move.l 4(sp),d0
   10ce4:	|        +-- beq.s 10cf0 <builtIn_loopSound+0x1c4>
			s->next = s;
   10ce6:	|        |   movea.l 28(sp),a0
   10cea:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10cf0:	|        '-> movea.l 24(sp),a0
   10cf4:	|            moveq #-1,d0
   10cf6:	|            move.l d0,16(a0)
		playSoundList(old);
   10cfa:	|            move.l 24(sp),-(sp)
   10cfe:	|            jsr d51c <playSoundList>
   10d04:	|            addq.l #4,sp
		return BR_CONTINUE;
   10d06:	|            moveq #2,d0
	}
}
   10d08:	'----------> movea.l (sp)+,a6
   10d0a:	             lea 28(sp),sp
   10d0e:	             rts

00010d10 <builtIn_stopSound>:

builtIn(stopSound)
{
   10d10:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d12:	       movea.l 12(sp),a0
   10d16:	       move.l 24(a0),d0
   10d1a:	       move.l d0,-(sp)
   10d1c:	       pea 5 <_start+0x5>
   10d20:	       move.l sp,d0
   10d22:	       addq.l #8,d0
   10d24:	       move.l d0,-(sp)
   10d26:	       jsr 14bce <getValueType>
   10d2c:	       lea 12(sp),sp
   10d30:	       tst.w d0
   10d32:	   ,-- bne.s 10d38 <builtIn_stopSound+0x28>
   10d34:	   |   moveq #1,d0
   10d36:	,--|-- bra.s 10d56 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10d38:	|  '-> moveq #24,d0
   10d3a:	|      add.l 12(sp),d0
   10d3e:	|      move.l d0,-(sp)
   10d40:	|      jsr 15552 <trimStack>
   10d46:	|      addq.l #4,sp
	huntKillSound (v);
   10d48:	|      move.l (sp),d0
   10d4a:	|      move.l d0,-(sp)
   10d4c:	|      jsr d514 <huntKillSound>
   10d52:	|      addq.l #4,sp
	return BR_CONTINUE;
   10d54:	|      moveq #2,d0
}
   10d56:	'----> addq.l #4,sp
   10d58:	       rts

00010d5a <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10d5a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10d5c:	       movea.l 12(sp),a0
   10d60:	       move.l 24(a0),d0
   10d64:	       move.l d0,-(sp)
   10d66:	       pea 1 <_start+0x1>
   10d6a:	       move.l sp,d0
   10d6c:	       addq.l #8,d0
   10d6e:	       move.l d0,-(sp)
   10d70:	       jsr 14bce <getValueType>
   10d76:	       lea 12(sp),sp
   10d7a:	       tst.w d0
   10d7c:	   ,-- bne.s 10d82 <builtIn_setDefaultSoundVolume+0x28>
   10d7e:	   |   moveq #1,d0
   10d80:	,--|-- bra.s 10da0 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10d82:	|  '-> moveq #24,d0
   10d84:	|      add.l 12(sp),d0
   10d88:	|      move.l d0,-(sp)
   10d8a:	|      jsr 15552 <trimStack>
   10d90:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10d92:	|      move.l (sp),d0
   10d94:	|      move.l d0,-(sp)
   10d96:	|      jsr d58a <setDefaultSoundVolume>
   10d9c:	|      addq.l #4,sp
	return BR_CONTINUE;
   10d9e:	|      moveq #2,d0
}
   10da0:	'----> addq.l #4,sp
   10da2:	       rts

00010da4 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10da4:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10da6:	       movea.l 16(sp),a0
   10daa:	       move.l 24(a0),d0
   10dae:	       move.l d0,-(sp)
   10db0:	       pea 1 <_start+0x1>
   10db4:	       move.l sp,d0
   10db6:	       addq.l #8,d0
   10db8:	       move.l d0,-(sp)
   10dba:	       jsr 14bce <getValueType>
   10dc0:	       lea 12(sp),sp
   10dc4:	       tst.w d0
   10dc6:	   ,-- bne.s 10dcc <builtIn_setSoundVolume+0x28>
   10dc8:	   |   moveq #1,d0
   10dca:	,--|-- bra.s 10e26 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10dcc:	|  '-> moveq #24,d0
   10dce:	|      add.l 16(sp),d0
   10dd2:	|      move.l d0,-(sp)
   10dd4:	|      jsr 15552 <trimStack>
   10dda:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ddc:	|      movea.l 16(sp),a0
   10de0:	|      move.l 24(a0),d0
   10de4:	|      move.l d0,-(sp)
   10de6:	|      pea 5 <_start+0x5>
   10dea:	|      moveq #12,d0
   10dec:	|      add.l sp,d0
   10dee:	|      move.l d0,-(sp)
   10df0:	|      jsr 14bce <getValueType>
   10df6:	|      lea 12(sp),sp
   10dfa:	|      tst.w d0
   10dfc:	|  ,-- bne.s 10e02 <builtIn_setSoundVolume+0x5e>
   10dfe:	|  |   moveq #1,d0
   10e00:	+--|-- bra.s 10e26 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10e02:	|  '-> moveq #24,d0
   10e04:	|      add.l 16(sp),d0
   10e08:	|      move.l d0,-(sp)
   10e0a:	|      jsr 15552 <trimStack>
   10e10:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10e12:	|      move.l (sp),d1
   10e14:	|      move.l 4(sp),d0
   10e18:	|      move.l d1,-(sp)
   10e1a:	|      move.l d0,-(sp)
   10e1c:	|      jsr d59e <setSoundVolume>
   10e22:	|      addq.l #8,sp
	return BR_CONTINUE;
   10e24:	|      moveq #2,d0
}
   10e26:	'----> addq.l #8,sp
   10e28:	       rts

00010e2a <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10e2a:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e2e:	       movea.l 20(sp),a0
   10e32:	       move.l 24(a0),d0
   10e36:	       move.l d0,-(sp)
   10e38:	       pea 1 <_start+0x1>
   10e3c:	       moveq #12,d0
   10e3e:	       add.l sp,d0
   10e40:	       move.l d0,-(sp)
   10e42:	       jsr 14bce <getValueType>
   10e48:	       lea 12(sp),sp
   10e4c:	       tst.w d0
   10e4e:	   ,-- bne.s 10e56 <builtIn_setSoundLoopPoints+0x2c>
   10e50:	   |   moveq #1,d0
   10e52:	,--|-- bra.w 10eee <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10e56:	|  '-> moveq #24,d0
   10e58:	|      add.l 20(sp),d0
   10e5c:	|      move.l d0,-(sp)
   10e5e:	|      jsr 15552 <trimStack>
   10e64:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e66:	|      movea.l 20(sp),a0
   10e6a:	|      move.l 24(a0),d0
   10e6e:	|      move.l d0,-(sp)
   10e70:	|      pea 1 <_start+0x1>
   10e74:	|      lea 8(sp),a0
   10e78:	|      move.l a0,-(sp)
   10e7a:	|      jsr 14bce <getValueType>
   10e80:	|      lea 12(sp),sp
   10e84:	|      tst.w d0
   10e86:	|  ,-- bne.s 10e8c <builtIn_setSoundLoopPoints+0x62>
   10e88:	|  |   moveq #1,d0
   10e8a:	+--|-- bra.s 10eee <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10e8c:	|  '-> moveq #24,d0
   10e8e:	|      add.l 20(sp),d0
   10e92:	|      move.l d0,-(sp)
   10e94:	|      jsr 15552 <trimStack>
   10e9a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e9c:	|      movea.l 20(sp),a0
   10ea0:	|      move.l 24(a0),d0
   10ea4:	|      move.l d0,-(sp)
   10ea6:	|      pea 5 <_start+0x5>
   10eaa:	|      moveq #16,d0
   10eac:	|      add.l sp,d0
   10eae:	|      move.l d0,-(sp)
   10eb0:	|      jsr 14bce <getValueType>
   10eb6:	|      lea 12(sp),sp
   10eba:	|      tst.w d0
   10ebc:	|  ,-- bne.s 10ec2 <builtIn_setSoundLoopPoints+0x98>
   10ebe:	|  |   moveq #1,d0
   10ec0:	+--|-- bra.s 10eee <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10ec2:	|  '-> moveq #24,d0
   10ec4:	|      add.l 20(sp),d0
   10ec8:	|      move.l d0,-(sp)
   10eca:	|      jsr 15552 <trimStack>
   10ed0:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10ed2:	|      movea.l 4(sp),a0
   10ed6:	|      move.l (sp),d1
   10ed8:	|      move.l 8(sp),d0
   10edc:	|      move.l a0,-(sp)
   10ede:	|      move.l d1,-(sp)
   10ee0:	|      move.l d0,-(sp)
   10ee2:	|      jsr d596 <setSoundLoop>
   10ee8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10eec:	|      moveq #2,d0
}
   10eee:	'----> lea 12(sp),sp
   10ef2:	       rts

00010ef4 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10ef4:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10ef6:	          movea.l 12(sp),a0
   10efa:	          movea.l 24(a0),a0
   10efe:	          move.l (a0),d0
   10f00:	          moveq #5,d1
   10f02:	          cmp.l d0,d1
   10f04:	,-------- bne.s 10f48 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10f06:	|         movea.l 12(sp),a0
   10f0a:	|         move.l 24(a0),d0
   10f0e:	|         move.l d0,-(sp)
   10f10:	|         pea 5 <_start+0x5>
   10f14:	|         move.l sp,d0
   10f16:	|         addq.l #8,d0
   10f18:	|         move.l d0,-(sp)
   10f1a:	|         jsr 14bce <getValueType>
   10f20:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10f24:	|         moveq #24,d0
   10f26:	|         add.l 12(sp),d0
   10f2a:	|         move.l d0,-(sp)
   10f2c:	|         jsr 15552 <trimStack>
   10f32:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10f34:	|         move.l (sp),d0
   10f36:	|         move.l d0,-(sp)
   10f38:	|         jsr 16e58 <setFloor>
   10f3e:	|         addq.l #4,sp
   10f40:	|         tst.w d0
   10f42:	|  ,----- bne.s 10f5e <builtIn_setFloor+0x6a>
   10f44:	|  |      moveq #1,d0
   10f46:	|  |  ,-- bra.s 10f60 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10f48:	'--|--|-> moveq #24,d0
   10f4a:	   |  |   add.l 12(sp),d0
   10f4e:	   |  |   move.l d0,-(sp)
   10f50:	   |  |   jsr 15552 <trimStack>
   10f56:	   |  |   addq.l #4,sp
		setFloorNull ();
   10f58:	   |  |   jsr 175d2 <setFloorNull>
	}
	return BR_CONTINUE;
   10f5e:	   '--|-> moveq #2,d0
}
   10f60:	      '-> addq.l #4,sp
   10f62:	          rts

00010f64 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10f64:	jsr 166d4 <drawFloor>
	return BR_CONTINUE;
   10f6a:	moveq #2,d0
}
   10f6c:	rts

00010f6e <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10f6e:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10f70:	          movea.l 12(sp),a0
   10f74:	          movea.l 24(a0),a0
   10f78:	          move.l (a0),d0
   10f7a:	          moveq #5,d1
   10f7c:	          cmp.l d0,d1
   10f7e:	,-------- bne.s 10fc2 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10f80:	|         movea.l 12(sp),a0
   10f84:	|         move.l 24(a0),d0
   10f88:	|         move.l d0,-(sp)
   10f8a:	|         pea 5 <_start+0x5>
   10f8e:	|         move.l sp,d0
   10f90:	|         addq.l #8,d0
   10f92:	|         move.l d0,-(sp)
   10f94:	|         jsr 14bce <getValueType>
   10f9a:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10f9e:	|         moveq #24,d0
   10fa0:	|         add.l 12(sp),d0
   10fa4:	|         move.l d0,-(sp)
   10fa6:	|         jsr 15552 <trimStack>
   10fac:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10fae:	|         move.l (sp),d0
   10fb0:	|         move.l d0,-(sp)
   10fb2:	|         jsr 8a44 <setZBuffer>
   10fb8:	|         addq.l #4,sp
   10fba:	|         tst.w d0
   10fbc:	|  ,----- bne.s 10fd8 <builtIn_setZBuffer+0x6a>
   10fbe:	|  |      moveq #1,d0
   10fc0:	|  |  ,-- bra.s 10fda <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10fc2:	'--|--|-> moveq #24,d0
   10fc4:	   |  |   add.l 12(sp),d0
   10fc8:	   |  |   move.l d0,-(sp)
   10fca:	   |  |   jsr 15552 <trimStack>
   10fd0:	   |  |   addq.l #4,sp
		killZBuffer ();
   10fd2:	   |  |   jsr 89f8 <killZBuffer>
	}
	return BR_CONTINUE;
   10fd8:	   '--|-> moveq #2,d0
}
   10fda:	      '-> addq.l #4,sp
   10fdc:	          rts

00010fde <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10fde:	pea 19fc8 <PutChar+0x1e78>
   10fe4:	jsr 176ae <KPrintF>
   10fea:	addq.l #4,sp
	return BR_CONTINUE;
   10fec:	moveq #2,d0
}
   10fee:	rts

00010ff0 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ff0:	          movea.l 8(sp),a0
   10ff4:	          move.l 24(a0),d0
   10ff8:	          move.l d0,-(sp)
   10ffa:	          pea 1 <_start+0x1>
   10ffe:	          pea 1cf54 <speechMode>
   11004:	          jsr 14bce <getValueType>
   1100a:	          lea 12(sp),sp
   1100e:	          tst.w d0
   11010:	      ,-- bne.s 11016 <builtIn_setSpeechMode+0x26>
   11012:	      |   moveq #1,d0
   11014:	,-----|-- bra.s 1104e <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   11016:	|     '-> moveq #24,d0
   11018:	|         add.l 8(sp),d0
   1101c:	|         move.l d0,-(sp)
   1101e:	|         jsr 15552 <trimStack>
   11024:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   11026:	|         move.l 1cf54 <speechMode>,d0
   1102c:	|     ,-- bmi.s 1103a <builtIn_setSpeechMode+0x4a>
   1102e:	|     |   move.l 1cf54 <speechMode>,d0
   11034:	|     |   moveq #2,d1
   11036:	|     |   cmp.l d0,d1
   11038:	|  ,--|-- bge.s 1104c <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   1103a:	|  |  '-> pea 19fe1 <PutChar+0x1e91>
   11040:	|  |      jsr 176ae <KPrintF>
   11046:	|  |      addq.l #4,sp
		return BR_ERROR;
   11048:	|  |      moveq #1,d0
   1104a:	+--|----- bra.s 1104e <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   1104c:	|  '----> moveq #2,d0
}
   1104e:	'-------> rts

00011050 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   11050:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   11052:	       jsr 42cc <isThereAnySpeechGoingOn>
   11058:	       move.l d0,(sp)
	if (i == -1) {
   1105a:	       moveq #-1,d0
   1105c:	       cmp.l (sp),d0
   1105e:	,----- bne.s 1107a <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   11060:	|      moveq #28,d0
   11062:	|      add.l 12(sp),d0
   11066:	|      clr.l -(sp)
   11068:	|      pea 1 <_start+0x1>
   1106c:	|      move.l d0,-(sp)
   1106e:	|      jsr 154c0 <setVariable>
   11074:	|      lea 12(sp),sp
   11078:	|  ,-- bra.s 11092 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   1107a:	'--|-> moveq #28,d0
   1107c:	   |   add.l 12(sp),d0
   11080:	   |   move.l (sp),-(sp)
   11082:	   |   pea 7 <_start+0x7>
   11086:	   |   move.l d0,-(sp)
   11088:	   |   jsr 154c0 <setVariable>
   1108e:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11092:	   '-> moveq #2,d0
}
   11094:	       addq.l #4,sp
   11096:	       rts

00011098 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   11098:	jsr 6df8 <killSpeechTimers>
	return BR_CONTINUE;
   1109e:	moveq #2,d0
}
   110a0:	rts

000110a2 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   110a2:	       move.l 1cf9a <overRegion>,d0
   110a8:	,----- beq.s 110d2 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   110aa:	|      movea.l 1cf9a <overRegion>,a0
   110b0:	|      movea.l 28(a0),a0
   110b4:	|      move.l 4(a0),d1
   110b8:	|      moveq #28,d0
   110ba:	|      add.l 8(sp),d0
   110be:	|      move.l d1,-(sp)
   110c0:	|      pea 7 <_start+0x7>
   110c4:	|      move.l d0,-(sp)
   110c6:	|      jsr 154c0 <setVariable>
   110cc:	|      lea 12(sp),sp
   110d0:	|  ,-- bra.s 110ea <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   110d2:	'--|-> moveq #28,d0
   110d4:	   |   add.l 8(sp),d0
   110d8:	   |   clr.l -(sp)
   110da:	   |   pea 1 <_start+0x1>
   110de:	   |   move.l d0,-(sp)
   110e0:	   |   jsr 154c0 <setVariable>
   110e6:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   110ea:	   '-> moveq #2,d0
}
   110ec:	       rts

000110ee <builtIn_rename>:

builtIn(rename)
{
   110ee:	       lea -16(sp),sp
   110f2:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   110f4:	       movea.l 28(sp),a0
   110f8:	       move.l 24(a0),d0
   110fc:	       move.l d0,-(sp)
   110fe:	       jsr 151a4 <getTextFromAnyVar>
   11104:	       addq.l #4,sp
   11106:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   1110a:	   ,-- bne.s 11110 <builtIn_rename+0x22>
   1110c:	   |   moveq #1,d0
   1110e:	,--|-- bra.s 1118a <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   11110:	|  '-> moveq #24,d0
   11112:	|      add.l 28(sp),d0
   11116:	|      move.l d0,-(sp)
   11118:	|      jsr 15552 <trimStack>
   1111e:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   11120:	|      movea.l 28(sp),a0
   11124:	|      move.l 24(a0),d0
   11128:	|      move.l d0,-(sp)
   1112a:	|      pea 7 <_start+0x7>
   1112e:	|      lea 12(sp),a0
   11132:	|      move.l a0,-(sp)
   11134:	|      jsr 14bce <getValueType>
   1113a:	|      lea 12(sp),sp
   1113e:	|      tst.w d0
   11140:	|  ,-- bne.s 11146 <builtIn_rename+0x58>
   11142:	|  |   moveq #1,d0
   11144:	+--|-- bra.s 1118a <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   11146:	|  '-> moveq #24,d0
   11148:	|      add.l 28(sp),d0
   1114c:	|      move.l d0,-(sp)
   1114e:	|      jsr 15552 <trimStack>
   11154:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   11156:	|      move.l 4(sp),d0
   1115a:	|      move.l d0,-(sp)
   1115c:	|      jsr d8e2 <findObjectType>
   11162:	|      addq.l #4,sp
   11164:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   11168:	|      movea.l 12(sp),a0
   1116c:	|      move.l (a0),8(sp)
   11170:	|      move.l 1ce8a <SysBase>,d0
   11176:	|      movea.l d0,a6
   11178:	|      movea.l 8(sp),a1
   1117c:	|      jsr -690(a6)
	o->screenName = newText;
   11180:	|      movea.l 12(sp),a0
   11184:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   11188:	|      moveq #2,d0
}
   1118a:	'----> movea.l (sp)+,a6
   1118c:	       lea 16(sp),sp
   11190:	       rts

00011192 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   11192:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11196:	          movea.l 20(sp),a0
   1119a:	          move.l 24(a0),d0
   1119e:	          move.l d0,-(sp)
   111a0:	          pea 7 <_start+0x7>
   111a4:	          lea 8(sp),a0
   111a8:	          move.l a0,-(sp)
   111aa:	          jsr 14bce <getValueType>
   111b0:	          lea 12(sp),sp
   111b4:	          tst.w d0
   111b6:	      ,-- bne.s 111be <builtIn_getObjectX+0x2c>
   111b8:	      |   moveq #1,d0
   111ba:	,-----|-- bra.w 1125a <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   111be:	|     '-> moveq #24,d0
   111c0:	|         add.l 20(sp),d0
   111c4:	|         move.l d0,-(sp)
   111c6:	|         jsr 15552 <trimStack>
   111cc:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   111ce:	|         move.l (sp),d0
   111d0:	|         move.l d0,-(sp)
   111d2:	|         jsr a974 <findPerson>
   111d8:	|         addq.l #4,sp
   111da:	|         move.l d0,8(sp)
	if (pers) {
   111de:	|     ,-- beq.s 1120c <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   111e0:	|     |   movea.l 8(sp),a0
   111e4:	|     |   move.l (a0),d0
   111e6:	|     |   move.l d0,-(sp)
   111e8:	|     |   jsr 17a78 <__fixsfsi>
   111ee:	|     |   addq.l #4,sp
   111f0:	|     |   move.l d0,d1
   111f2:	|     |   moveq #28,d0
   111f4:	|     |   add.l 20(sp),d0
   111f8:	|     |   move.l d1,-(sp)
   111fa:	|     |   pea 1 <_start+0x1>
   111fe:	|     |   move.l d0,-(sp)
   11200:	|     |   jsr 154c0 <setVariable>
   11206:	|     |   lea 12(sp),sp
   1120a:	|  ,--|-- bra.s 11258 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   1120c:	|  |  '-> move.l (sp),d0
   1120e:	|  |      move.l d0,-(sp)
   11210:	|  |      jsr 15e90 <getRegionForObject>
   11216:	|  |      addq.l #4,sp
   11218:	|  |      move.l d0,4(sp)
		if (la) {
   1121c:	|  |  ,-- beq.s 11240 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   1121e:	|  |  |   movea.l 4(sp),a0
   11222:	|  |  |   move.l 16(a0),d1
   11226:	|  |  |   moveq #28,d0
   11228:	|  |  |   add.l 20(sp),d0
   1122c:	|  |  |   move.l d1,-(sp)
   1122e:	|  |  |   pea 1 <_start+0x1>
   11232:	|  |  |   move.l d0,-(sp)
   11234:	|  |  |   jsr 154c0 <setVariable>
   1123a:	|  |  |   lea 12(sp),sp
   1123e:	|  +--|-- bra.s 11258 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   11240:	|  |  '-> moveq #28,d0
   11242:	|  |      add.l 20(sp),d0
   11246:	|  |      clr.l -(sp)
   11248:	|  |      pea 1 <_start+0x1>
   1124c:	|  |      move.l d0,-(sp)
   1124e:	|  |      jsr 154c0 <setVariable>
   11254:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11258:	|  '----> moveq #2,d0
}
   1125a:	'-------> lea 12(sp),sp
   1125e:	          rts

00011260 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   11260:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11264:	          movea.l 20(sp),a0
   11268:	          move.l 24(a0),d0
   1126c:	          move.l d0,-(sp)
   1126e:	          pea 7 <_start+0x7>
   11272:	          lea 8(sp),a0
   11276:	          move.l a0,-(sp)
   11278:	          jsr 14bce <getValueType>
   1127e:	          lea 12(sp),sp
   11282:	          tst.w d0
   11284:	      ,-- bne.s 1128c <builtIn_getObjectY+0x2c>
   11286:	      |   moveq #1,d0
   11288:	,-----|-- bra.w 1132a <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   1128c:	|     '-> moveq #24,d0
   1128e:	|         add.l 20(sp),d0
   11292:	|         move.l d0,-(sp)
   11294:	|         jsr 15552 <trimStack>
   1129a:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   1129c:	|         move.l (sp),d0
   1129e:	|         move.l d0,-(sp)
   112a0:	|         jsr a974 <findPerson>
   112a6:	|         addq.l #4,sp
   112a8:	|         move.l d0,8(sp)
	if (pers) {
   112ac:	|     ,-- beq.s 112dc <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   112ae:	|     |   movea.l 8(sp),a0
   112b2:	|     |   move.l 4(a0),d0
   112b6:	|     |   move.l d0,-(sp)
   112b8:	|     |   jsr 17a78 <__fixsfsi>
   112be:	|     |   addq.l #4,sp
   112c0:	|     |   move.l d0,d1
   112c2:	|     |   moveq #28,d0
   112c4:	|     |   add.l 20(sp),d0
   112c8:	|     |   move.l d1,-(sp)
   112ca:	|     |   pea 1 <_start+0x1>
   112ce:	|     |   move.l d0,-(sp)
   112d0:	|     |   jsr 154c0 <setVariable>
   112d6:	|     |   lea 12(sp),sp
   112da:	|  ,--|-- bra.s 11328 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   112dc:	|  |  '-> move.l (sp),d0
   112de:	|  |      move.l d0,-(sp)
   112e0:	|  |      jsr 15e90 <getRegionForObject>
   112e6:	|  |      addq.l #4,sp
   112e8:	|  |      move.l d0,4(sp)
		if (la) {
   112ec:	|  |  ,-- beq.s 11310 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   112ee:	|  |  |   movea.l 4(sp),a0
   112f2:	|  |  |   move.l 20(a0),d1
   112f6:	|  |  |   moveq #28,d0
   112f8:	|  |  |   add.l 20(sp),d0
   112fc:	|  |  |   move.l d1,-(sp)
   112fe:	|  |  |   pea 1 <_start+0x1>
   11302:	|  |  |   move.l d0,-(sp)
   11304:	|  |  |   jsr 154c0 <setVariable>
   1130a:	|  |  |   lea 12(sp),sp
   1130e:	|  +--|-- bra.s 11328 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   11310:	|  |  '-> moveq #28,d0
   11312:	|  |      add.l 20(sp),d0
   11316:	|  |      clr.l -(sp)
   11318:	|  |      pea 1 <_start+0x1>
   1131c:	|  |      move.l d0,-(sp)
   1131e:	|  |      jsr 154c0 <setVariable>
   11324:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11328:	|  '----> moveq #2,d0
}
   1132a:	'-------> lea 12(sp),sp
   1132e:	          rts

00011330 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   11330:	       lea -32(sp),sp
   11334:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11338:	       movea.l 56(sp),a0
   1133c:	       move.l 24(a0),d0
   11340:	       move.l d0,-(sp)
   11342:	       pea 1 <_start+0x1>
   11346:	       lea 28(sp),a0
   1134a:	       move.l a0,-(sp)
   1134c:	       jsr 14bce <getValueType>
   11352:	       lea 12(sp),sp
   11356:	       tst.w d0
   11358:	   ,-- bne.s 11360 <builtIn_addScreenRegion+0x30>
   1135a:	   |   moveq #1,d0
   1135c:	,--|-- bra.w 1153a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11360:	|  '-> moveq #24,d0
   11362:	|      add.l 56(sp),d0
   11366:	|      move.l d0,-(sp)
   11368:	|      jsr 15552 <trimStack>
   1136e:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11370:	|      movea.l 56(sp),a0
   11374:	|      move.l 24(a0),d0
   11378:	|      move.l d0,-(sp)
   1137a:	|      pea 1 <_start+0x1>
   1137e:	|      moveq #48,d0
   11380:	|      add.l sp,d0
   11382:	|      move.l d0,-(sp)
   11384:	|      jsr 14bce <getValueType>
   1138a:	|      lea 12(sp),sp
   1138e:	|      tst.w d0
   11390:	|  ,-- bne.s 11398 <builtIn_addScreenRegion+0x68>
   11392:	|  |   moveq #1,d0
   11394:	+--|-- bra.w 1153a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11398:	|  '-> moveq #24,d0
   1139a:	|      add.l 56(sp),d0
   1139e:	|      move.l d0,-(sp)
   113a0:	|      jsr 15552 <trimStack>
   113a6:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113a8:	|      movea.l 56(sp),a0
   113ac:	|      move.l 24(a0),d0
   113b0:	|      move.l d0,-(sp)
   113b2:	|      pea 1 <_start+0x1>
   113b6:	|      moveq #52,d0
   113b8:	|      add.l sp,d0
   113ba:	|      move.l d0,-(sp)
   113bc:	|      jsr 14bce <getValueType>
   113c2:	|      lea 12(sp),sp
   113c6:	|      tst.w d0
   113c8:	|  ,-- bne.s 113d0 <builtIn_addScreenRegion+0xa0>
   113ca:	|  |   moveq #1,d0
   113cc:	+--|-- bra.w 1153a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   113d0:	|  '-> moveq #24,d0
   113d2:	|      add.l 56(sp),d0
   113d6:	|      move.l d0,-(sp)
   113d8:	|      jsr 15552 <trimStack>
   113de:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113e0:	|      movea.l 56(sp),a0
   113e4:	|      move.l 24(a0),d0
   113e8:	|      move.l d0,-(sp)
   113ea:	|      pea 1 <_start+0x1>
   113ee:	|      lea 32(sp),a0
   113f2:	|      move.l a0,-(sp)
   113f4:	|      jsr 14bce <getValueType>
   113fa:	|      lea 12(sp),sp
   113fe:	|      tst.w d0
   11400:	|  ,-- bne.s 11408 <builtIn_addScreenRegion+0xd8>
   11402:	|  |   moveq #1,d0
   11404:	+--|-- bra.w 1153a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11408:	|  '-> moveq #24,d0
   1140a:	|      add.l 56(sp),d0
   1140e:	|      move.l d0,-(sp)
   11410:	|      jsr 15552 <trimStack>
   11416:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11418:	|      movea.l 56(sp),a0
   1141c:	|      move.l 24(a0),d0
   11420:	|      move.l d0,-(sp)
   11422:	|      pea 1 <_start+0x1>
   11426:	|      lea 36(sp),a0
   1142a:	|      move.l a0,-(sp)
   1142c:	|      jsr 14bce <getValueType>
   11432:	|      lea 12(sp),sp
   11436:	|      tst.w d0
   11438:	|  ,-- bne.s 11440 <builtIn_addScreenRegion+0x110>
   1143a:	|  |   moveq #1,d0
   1143c:	+--|-- bra.w 1153a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11440:	|  '-> moveq #24,d0
   11442:	|      add.l 56(sp),d0
   11446:	|      move.l d0,-(sp)
   11448:	|      jsr 15552 <trimStack>
   1144e:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11450:	|      movea.l 56(sp),a0
   11454:	|      move.l 24(a0),d0
   11458:	|      move.l d0,-(sp)
   1145a:	|      pea 1 <_start+0x1>
   1145e:	|      lea 40(sp),a0
   11462:	|      move.l a0,-(sp)
   11464:	|      jsr 14bce <getValueType>
   1146a:	|      lea 12(sp),sp
   1146e:	|      tst.w d0
   11470:	|  ,-- bne.s 11478 <builtIn_addScreenRegion+0x148>
   11472:	|  |   moveq #1,d0
   11474:	+--|-- bra.w 1153a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11478:	|  '-> moveq #24,d0
   1147a:	|      add.l 56(sp),d0
   1147e:	|      move.l d0,-(sp)
   11480:	|      jsr 15552 <trimStack>
   11486:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11488:	|      movea.l 56(sp),a0
   1148c:	|      move.l 24(a0),d0
   11490:	|      move.l d0,-(sp)
   11492:	|      pea 1 <_start+0x1>
   11496:	|      lea 44(sp),a0
   1149a:	|      move.l a0,-(sp)
   1149c:	|      jsr 14bce <getValueType>
   114a2:	|      lea 12(sp),sp
   114a6:	|      tst.w d0
   114a8:	|  ,-- bne.s 114b0 <builtIn_addScreenRegion+0x180>
   114aa:	|  |   moveq #1,d0
   114ac:	+--|-- bra.w 1153a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   114b0:	|  '-> moveq #24,d0
   114b2:	|      add.l 56(sp),d0
   114b6:	|      move.l d0,-(sp)
   114b8:	|      jsr 15552 <trimStack>
   114be:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114c0:	|      movea.l 56(sp),a0
   114c4:	|      move.l 24(a0),d0
   114c8:	|      move.l d0,-(sp)
   114ca:	|      pea 7 <_start+0x7>
   114ce:	|      lea 24(sp),a0
   114d2:	|      move.l a0,-(sp)
   114d4:	|      jsr 14bce <getValueType>
   114da:	|      lea 12(sp),sp
   114de:	|      tst.w d0
   114e0:	|  ,-- bne.s 114e6 <builtIn_addScreenRegion+0x1b6>
   114e2:	|  |   moveq #1,d0
   114e4:	+--|-- bra.s 1153a <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   114e6:	|  '-> moveq #24,d0
   114e8:	|      add.l 56(sp),d0
   114ec:	|      move.l d0,-(sp)
   114ee:	|      jsr 15552 <trimStack>
   114f4:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   114f6:	|      move.l 16(sp),d5
   114fa:	|      move.l 20(sp),d4
   114fe:	|      move.l 40(sp),d3
   11502:	|      move.l 44(sp),d2
   11506:	|      movea.l 24(sp),a1
   1150a:	|      movea.l 28(sp),a0
   1150e:	|      move.l 32(sp),d1
   11512:	|      move.l 36(sp),d0
   11516:	|      move.l d5,-(sp)
   11518:	|      move.l d4,-(sp)
   1151a:	|      move.l d3,-(sp)
   1151c:	|      move.l d2,-(sp)
   1151e:	|      move.l a1,-(sp)
   11520:	|      move.l a0,-(sp)
   11522:	|      move.l d1,-(sp)
   11524:	|      move.l d0,-(sp)
   11526:	|      jsr 15d4a <addScreenRegion>
   1152c:	|      lea 32(sp),sp
   11530:	|      tst.w d0
   11532:	|  ,-- beq.s 11538 <builtIn_addScreenRegion+0x208>
   11534:	|  |   moveq #2,d0
   11536:	+--|-- bra.s 1153a <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   11538:	|  '-> moveq #1,d0

}
   1153a:	'----> movem.l (sp)+,d2-d5
   1153e:	       lea 32(sp),sp
   11542:	       rts

00011544 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   11544:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11546:	       movea.l 12(sp),a0
   1154a:	       move.l 24(a0),d0
   1154e:	       move.l d0,-(sp)
   11550:	       pea 7 <_start+0x7>
   11554:	       move.l sp,d0
   11556:	       addq.l #8,d0
   11558:	       move.l d0,-(sp)
   1155a:	       jsr 14bce <getValueType>
   11560:	       lea 12(sp),sp
   11564:	       tst.w d0
   11566:	   ,-- bne.s 1156c <builtIn_removeScreenRegion+0x28>
   11568:	   |   moveq #1,d0
   1156a:	,--|-- bra.s 1158a <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   1156c:	|  '-> moveq #24,d0
   1156e:	|      add.l 12(sp),d0
   11572:	|      move.l d0,-(sp)
   11574:	|      jsr 15552 <trimStack>
   1157a:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   1157c:	|      move.l (sp),d0
   1157e:	|      move.l d0,-(sp)
   11580:	|      jsr 16038 <removeScreenRegion>
   11586:	|      addq.l #4,sp
	return BR_CONTINUE;
   11588:	|      moveq #2,d0
}
   1158a:	'----> addq.l #4,sp
   1158c:	       rts

0001158e <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   1158e:	jsr 161bc <showBoxes>
	return BR_CONTINUE;
   11594:	moveq #2,d0
}
   11596:	rts

00011598 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   11598:	jsr 15ebe <killAllRegions>
	return BR_CONTINUE;
   1159e:	moveq #2,d0
}
   115a0:	rts

000115a2 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   115a2:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   115a6:	       movea.l 24(sp),a0
   115aa:	       move.l 24(a0),d0
   115ae:	       move.l d0,-(sp)
   115b0:	       jsr 1487a <getCostumeFromVar>
   115b6:	       addq.l #4,sp
   115b8:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   115bc:	   ,-- bne.s 115c4 <builtIn_addCharacter+0x22>
   115be:	   |   moveq #1,d0
   115c0:	,--|-- bra.w 116a0 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   115c4:	|  '-> moveq #24,d0
   115c6:	|      add.l 24(sp),d0
   115ca:	|      move.l d0,-(sp)
   115cc:	|      jsr 15552 <trimStack>
   115d2:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115d4:	|      movea.l 24(sp),a0
   115d8:	|      move.l 24(a0),d0
   115dc:	|      move.l d0,-(sp)
   115de:	|      pea 1 <_start+0x1>
   115e2:	|      lea 12(sp),a0
   115e6:	|      move.l a0,-(sp)
   115e8:	|      jsr 14bce <getValueType>
   115ee:	|      lea 12(sp),sp
   115f2:	|      tst.w d0
   115f4:	|  ,-- bne.s 115fc <builtIn_addCharacter+0x5a>
   115f6:	|  |   moveq #1,d0
   115f8:	+--|-- bra.w 116a0 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   115fc:	|  '-> moveq #24,d0
   115fe:	|      add.l 24(sp),d0
   11602:	|      move.l d0,-(sp)
   11604:	|      jsr 15552 <trimStack>
   1160a:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1160c:	|      movea.l 24(sp),a0
   11610:	|      move.l 24(a0),d0
   11614:	|      move.l d0,-(sp)
   11616:	|      pea 1 <_start+0x1>
   1161a:	|      moveq #16,d0
   1161c:	|      add.l sp,d0
   1161e:	|      move.l d0,-(sp)
   11620:	|      jsr 14bce <getValueType>
   11626:	|      lea 12(sp),sp
   1162a:	|      tst.w d0
   1162c:	|  ,-- bne.s 11632 <builtIn_addCharacter+0x90>
   1162e:	|  |   moveq #1,d0
   11630:	+--|-- bra.s 116a0 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11632:	|  '-> moveq #24,d0
   11634:	|      add.l 24(sp),d0
   11638:	|      move.l d0,-(sp)
   1163a:	|      jsr 15552 <trimStack>
   11640:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11642:	|      movea.l 24(sp),a0
   11646:	|      move.l 24(a0),d0
   1164a:	|      move.l d0,-(sp)
   1164c:	|      pea 7 <_start+0x7>
   11650:	|      lea 8(sp),a0
   11654:	|      move.l a0,-(sp)
   11656:	|      jsr 14bce <getValueType>
   1165c:	|      lea 12(sp),sp
   11660:	|      tst.w d0
   11662:	|  ,-- bne.s 11668 <builtIn_addCharacter+0xc6>
   11664:	|  |   moveq #1,d0
   11666:	+--|-- bra.s 116a0 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11668:	|  '-> moveq #24,d0
   1166a:	|      add.l 24(sp),d0
   1166e:	|      move.l d0,-(sp)
   11670:	|      jsr 15552 <trimStack>
   11676:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   11678:	|      movea.l (sp),a0
   1167a:	|      move.l 4(sp),d1
   1167e:	|      move.l 8(sp),d0
   11682:	|      move.l 12(sp),-(sp)
   11686:	|      move.l a0,-(sp)
   11688:	|      move.l d1,-(sp)
   1168a:	|      move.l d0,-(sp)
   1168c:	|      jsr 956e <addPerson>
   11692:	|      lea 16(sp),sp
   11696:	|      tst.w d0
   11698:	|  ,-- beq.s 1169e <builtIn_addCharacter+0xfc>
   1169a:	|  |   moveq #2,d0
   1169c:	+--|-- bra.s 116a0 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   1169e:	|  '-> moveq #1,d0
}
   116a0:	'----> lea 16(sp),sp
   116a4:	       rts

000116a6 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   116a6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116a8:	       movea.l 12(sp),a0
   116ac:	       move.l 24(a0),d0
   116b0:	       move.l d0,-(sp)
   116b2:	       pea 7 <_start+0x7>
   116b6:	       move.l sp,d0
   116b8:	       addq.l #8,d0
   116ba:	       move.l d0,-(sp)
   116bc:	       jsr 14bce <getValueType>
   116c2:	       lea 12(sp),sp
   116c6:	       tst.w d0
   116c8:	   ,-- bne.s 116ce <builtIn_hideCharacter+0x28>
   116ca:	   |   moveq #1,d0
   116cc:	,--|-- bra.s 116ee <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   116ce:	|  '-> moveq #24,d0
   116d0:	|      add.l 12(sp),d0
   116d4:	|      move.l d0,-(sp)
   116d6:	|      jsr 15552 <trimStack>
   116dc:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   116de:	|      move.l (sp),d0
   116e0:	|      move.l d0,-(sp)
   116e2:	|      clr.l -(sp)
   116e4:	|      jsr c00a <setShown>
   116ea:	|      addq.l #8,sp
	return BR_CONTINUE;
   116ec:	|      moveq #2,d0
}
   116ee:	'----> addq.l #4,sp
   116f0:	       rts

000116f2 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   116f2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116f4:	       movea.l 12(sp),a0
   116f8:	       move.l 24(a0),d0
   116fc:	       move.l d0,-(sp)
   116fe:	       pea 7 <_start+0x7>
   11702:	       move.l sp,d0
   11704:	       addq.l #8,d0
   11706:	       move.l d0,-(sp)
   11708:	       jsr 14bce <getValueType>
   1170e:	       lea 12(sp),sp
   11712:	       tst.w d0
   11714:	   ,-- bne.s 1171a <builtIn_showCharacter+0x28>
   11716:	   |   moveq #1,d0
   11718:	,--|-- bra.s 1173c <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   1171a:	|  '-> moveq #24,d0
   1171c:	|      add.l 12(sp),d0
   11720:	|      move.l d0,-(sp)
   11722:	|      jsr 15552 <trimStack>
   11728:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   1172a:	|      move.l (sp),d0
   1172c:	|      move.l d0,-(sp)
   1172e:	|      pea 1 <_start+0x1>
   11732:	|      jsr c00a <setShown>
   11738:	|      addq.l #8,sp
	return BR_CONTINUE;
   1173a:	|      moveq #2,d0
}
   1173c:	'----> addq.l #4,sp
   1173e:	       rts

00011740 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   11740:	jsr 6df8 <killSpeechTimers>
	killMostPeople ();
   11746:	jsr ae0a <killMostPeople>
	return BR_CONTINUE;
   1174c:	moveq #2,d0
}
   1174e:	rts

00011750 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   11750:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11752:	       movea.l 16(sp),a0
   11756:	       move.l 24(a0),d0
   1175a:	       move.l d0,-(sp)
   1175c:	       pea 1 <_start+0x1>
   11760:	       move.l sp,d0
   11762:	       addq.l #8,d0
   11764:	       move.l d0,-(sp)
   11766:	       jsr 14bce <getValueType>
   1176c:	       lea 12(sp),sp
   11770:	       tst.w d0
   11772:	   ,-- bne.s 11778 <builtIn_setCharacterDrawMode+0x28>
   11774:	   |   moveq #1,d0
   11776:	,--|-- bra.s 117d2 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11778:	|  '-> moveq #24,d0
   1177a:	|      add.l 16(sp),d0
   1177e:	|      move.l d0,-(sp)
   11780:	|      jsr 15552 <trimStack>
   11786:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11788:	|      movea.l 16(sp),a0
   1178c:	|      move.l 24(a0),d0
   11790:	|      move.l d0,-(sp)
   11792:	|      pea 7 <_start+0x7>
   11796:	|      moveq #12,d0
   11798:	|      add.l sp,d0
   1179a:	|      move.l d0,-(sp)
   1179c:	|      jsr 14bce <getValueType>
   117a2:	|      lea 12(sp),sp
   117a6:	|      tst.w d0
   117a8:	|  ,-- bne.s 117ae <builtIn_setCharacterDrawMode+0x5e>
   117aa:	|  |   moveq #1,d0
   117ac:	+--|-- bra.s 117d2 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   117ae:	|  '-> moveq #24,d0
   117b0:	|      add.l 16(sp),d0
   117b4:	|      move.l d0,-(sp)
   117b6:	|      jsr 15552 <trimStack>
   117bc:	|      addq.l #4,sp
	setDrawMode (di, obj);
   117be:	|      move.l 4(sp),d1
   117c2:	|      move.l (sp),d0
   117c4:	|      move.l d1,-(sp)
   117c6:	|      move.l d0,-(sp)
   117c8:	|      jsr b948 <setDrawMode>
   117ce:	|      addq.l #8,sp
	return BR_CONTINUE;
   117d0:	|      moveq #2,d0
}
   117d2:	'----> addq.l #8,sp
   117d4:	       rts

000117d6 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   117d6:	pea 1a01f <PutChar+0x1ecf>
   117dc:	jsr 176ae <KPrintF>
   117e2:	addq.l #4,sp
	return BR_CONTINUE;
   117e4:	moveq #2,d0
}
   117e6:	rts

000117e8 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   117e8:	pea 1a052 <PutChar+0x1f02>
   117ee:	jsr 176ae <KPrintF>
   117f4:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   117f6:	moveq #2,d0
}
   117f8:	rts

000117fa <builtIn_setScale>:

builtIn(setScale)
{
   117fa:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117fc:	       movea.l 16(sp),a0
   11800:	       move.l 24(a0),d0
   11804:	       move.l d0,-(sp)
   11806:	       pea 1 <_start+0x1>
   1180a:	       move.l sp,d0
   1180c:	       addq.l #8,d0
   1180e:	       move.l d0,-(sp)
   11810:	       jsr 14bce <getValueType>
   11816:	       lea 12(sp),sp
   1181a:	       tst.w d0
   1181c:	   ,-- bne.s 11822 <builtIn_setScale+0x28>
   1181e:	   |   moveq #1,d0
   11820:	,--|-- bra.s 11884 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11822:	|  '-> moveq #24,d0
   11824:	|      add.l 16(sp),d0
   11828:	|      move.l d0,-(sp)
   1182a:	|      jsr 15552 <trimStack>
   11830:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11832:	|      movea.l 16(sp),a0
   11836:	|      move.l 24(a0),d0
   1183a:	|      move.l d0,-(sp)
   1183c:	|      pea 1 <_start+0x1>
   11840:	|      moveq #12,d0
   11842:	|      add.l sp,d0
   11844:	|      move.l d0,-(sp)
   11846:	|      jsr 14bce <getValueType>
   1184c:	|      lea 12(sp),sp
   11850:	|      tst.w d0
   11852:	|  ,-- bne.s 11858 <builtIn_setScale+0x5e>
   11854:	|  |   moveq #1,d0
   11856:	+--|-- bra.s 11884 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   11858:	|  '-> moveq #24,d0
   1185a:	|      add.l 16(sp),d0
   1185e:	|      move.l d0,-(sp)
   11860:	|      jsr 15552 <trimStack>
   11866:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   11868:	|      move.l (sp),d0
   1186a:	|      move.l d0,d0
   1186c:	|      movea.w d0,a1
   1186e:	|      move.l 4(sp),d0
   11872:	|      move.l d0,d0
   11874:	|      movea.w d0,a0
   11876:	|      move.l a1,-(sp)
   11878:	|      move.l a0,-(sp)
   1187a:	|      jsr bfe2 <setScale>
   11880:	|      addq.l #8,sp
	return BR_CONTINUE;
   11882:	|      moveq #2,d0
}
   11884:	'----> addq.l #8,sp
   11886:	       rts

00011888 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   11888:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1188a:	       movea.l 12(sp),a0
   1188e:	       move.l 24(a0),d0
   11892:	       move.l d0,-(sp)
   11894:	       pea 7 <_start+0x7>
   11898:	       move.l sp,d0
   1189a:	       addq.l #8,d0
   1189c:	       move.l d0,-(sp)
   1189e:	       jsr 14bce <getValueType>
   118a4:	       lea 12(sp),sp
   118a8:	       tst.w d0
   118aa:	   ,-- bne.s 118b0 <builtIn_stopCharacter+0x28>
   118ac:	   |   moveq #1,d0
   118ae:	,--|-- bra.s 118e8 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   118b0:	|  '-> moveq #24,d0
   118b2:	|      add.l 12(sp),d0
   118b6:	|      move.l d0,-(sp)
   118b8:	|      jsr 15552 <trimStack>
   118be:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   118c0:	|      move.l (sp),d0
   118c2:	|      move.l d0,-(sp)
   118c4:	|      jsr c116 <stopPerson>
   118ca:	|      addq.l #4,sp
   118cc:	|      movea.w d0,a0
   118ce:	|      moveq #28,d0
   118d0:	|      add.l 12(sp),d0
   118d4:	|      move.l a0,-(sp)
   118d6:	|      pea 1 <_start+0x1>
   118da:	|      move.l d0,-(sp)
   118dc:	|      jsr 154c0 <setVariable>
   118e2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   118e6:	|      moveq #2,d0
}
   118e8:	'----> addq.l #4,sp
   118ea:	       rts

000118ec <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   118ec:	pea 1a08c <PutChar+0x1f3c>
   118f2:	jsr 176ae <KPrintF>
   118f8:	addq.l #4,sp
	return BR_CONTINUE;
   118fa:	moveq #2,d0
}
   118fc:	rts

000118fe <builtIn_animate>:

builtIn(animate)
{
   118fe:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   11900:	       movea.l 16(sp),a0
   11904:	       move.l 24(a0),d0
   11908:	       move.l d0,-(sp)
   1190a:	       jsr 150a6 <getAnimationFromVar>
   11910:	       addq.l #4,sp
   11912:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11916:	   ,-- bne.s 1191c <builtIn_animate+0x1e>
   11918:	   |   moveq #1,d0
   1191a:	,--|-- bra.s 1199a <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   1191c:	|  '-> moveq #24,d0
   1191e:	|      add.l 16(sp),d0
   11922:	|      move.l d0,-(sp)
   11924:	|      jsr 15552 <trimStack>
   1192a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1192c:	|      movea.l 16(sp),a0
   11930:	|      move.l 24(a0),d0
   11934:	|      move.l d0,-(sp)
   11936:	|      pea 7 <_start+0x7>
   1193a:	|      move.l sp,d0
   1193c:	|      addq.l #8,d0
   1193e:	|      move.l d0,-(sp)
   11940:	|      jsr 14bce <getValueType>
   11946:	|      lea 12(sp),sp
   1194a:	|      tst.w d0
   1194c:	|  ,-- bne.s 11952 <builtIn_animate+0x54>
   1194e:	|  |   moveq #1,d0
   11950:	+--|-- bra.s 1199a <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11952:	|  '-> moveq #24,d0
   11954:	|      add.l 16(sp),d0
   11958:	|      move.l d0,-(sp)
   1195a:	|      jsr 15552 <trimStack>
   11960:	|      addq.l #4,sp
	animatePerson (obj, pp);
   11962:	|      move.l (sp),d0
   11964:	|      move.l 4(sp),-(sp)
   11968:	|      move.l d0,-(sp)
   1196a:	|      jsr 97e4 <animatePerson>
   11970:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   11972:	|      move.l 4(sp),-(sp)
   11976:	|      jsr c16a <timeForAnim>
   1197c:	|      addq.l #4,sp
   1197e:	|      move.l d0,d1
   11980:	|      moveq #28,d0
   11982:	|      add.l 16(sp),d0
   11986:	|      move.l d1,-(sp)
   11988:	|      pea 1 <_start+0x1>
   1198c:	|      move.l d0,-(sp)
   1198e:	|      jsr 154c0 <setVariable>
   11994:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11998:	|      moveq #2,d0
}
   1199a:	'----> addq.l #8,sp
   1199c:	       rts

0001199e <builtIn_setCostume>:

builtIn(setCostume)
{
   1199e:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   119a0:	       movea.l 16(sp),a0
   119a4:	       move.l 24(a0),d0
   119a8:	       move.l d0,-(sp)
   119aa:	       jsr 1487a <getCostumeFromVar>
   119b0:	       addq.l #4,sp
   119b2:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   119b6:	   ,-- bne.s 119bc <builtIn_setCostume+0x1e>
   119b8:	   |   moveq #1,d0
   119ba:	,--|-- bra.s 11a14 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   119bc:	|  '-> moveq #24,d0
   119be:	|      add.l 16(sp),d0
   119c2:	|      move.l d0,-(sp)
   119c4:	|      jsr 15552 <trimStack>
   119ca:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   119cc:	|      movea.l 16(sp),a0
   119d0:	|      move.l 24(a0),d0
   119d4:	|      move.l d0,-(sp)
   119d6:	|      pea 7 <_start+0x7>
   119da:	|      move.l sp,d0
   119dc:	|      addq.l #8,d0
   119de:	|      move.l d0,-(sp)
   119e0:	|      jsr 14bce <getValueType>
   119e6:	|      lea 12(sp),sp
   119ea:	|      tst.w d0
   119ec:	|  ,-- bne.s 119f2 <builtIn_setCostume+0x54>
   119ee:	|  |   moveq #1,d0
   119f0:	+--|-- bra.s 11a14 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   119f2:	|  '-> moveq #24,d0
   119f4:	|      add.l 16(sp),d0
   119f8:	|      move.l d0,-(sp)
   119fa:	|      jsr 15552 <trimStack>
   11a00:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   11a02:	|      move.l (sp),d0
   11a04:	|      move.l 4(sp),-(sp)
   11a08:	|      move.l d0,-(sp)
   11a0a:	|      jsr 982e <animatePersonUsingPersona>
   11a10:	|      addq.l #8,sp
	return BR_CONTINUE;
   11a12:	|      moveq #2,d0
}
   11a14:	'----> addq.l #8,sp
   11a16:	       rts

00011a18 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   11a18:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a1a:	       movea.l 16(sp),a0
   11a1e:	       move.l 24(a0),d0
   11a22:	       move.l d0,-(sp)
   11a24:	       pea 1 <_start+0x1>
   11a28:	       move.l sp,d0
   11a2a:	       addq.l #8,d0
   11a2c:	       move.l d0,-(sp)
   11a2e:	       jsr 14bce <getValueType>
   11a34:	       lea 12(sp),sp
   11a38:	       tst.w d0
   11a3a:	   ,-- bne.s 11a40 <builtIn_floatCharacter+0x28>
   11a3c:	   |   moveq #1,d0
   11a3e:	,--|-- bra.s 11ab4 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11a40:	|  '-> moveq #24,d0
   11a42:	|      add.l 16(sp),d0
   11a46:	|      move.l d0,-(sp)
   11a48:	|      jsr 15552 <trimStack>
   11a4e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a50:	|      movea.l 16(sp),a0
   11a54:	|      move.l 24(a0),d0
   11a58:	|      move.l d0,-(sp)
   11a5a:	|      pea 7 <_start+0x7>
   11a5e:	|      moveq #12,d0
   11a60:	|      add.l sp,d0
   11a62:	|      move.l d0,-(sp)
   11a64:	|      jsr 14bce <getValueType>
   11a6a:	|      lea 12(sp),sp
   11a6e:	|      tst.w d0
   11a70:	|  ,-- bne.s 11a76 <builtIn_floatCharacter+0x5e>
   11a72:	|  |   moveq #1,d0
   11a74:	+--|-- bra.s 11ab4 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11a76:	|  '-> moveq #24,d0
   11a78:	|      add.l 16(sp),d0
   11a7c:	|      move.l d0,-(sp)
   11a7e:	|      jsr 15552 <trimStack>
   11a84:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   11a86:	|      move.l 4(sp),d1
   11a8a:	|      move.l (sp),d0
   11a8c:	|      move.l d1,-(sp)
   11a8e:	|      move.l d0,-(sp)
   11a90:	|      jsr a9be <floatCharacter>
   11a96:	|      addq.l #8,sp
   11a98:	|      movea.w d0,a0
   11a9a:	|      moveq #28,d0
   11a9c:	|      add.l 16(sp),d0
   11aa0:	|      move.l a0,-(sp)
   11aa2:	|      pea 1 <_start+0x1>
   11aa6:	|      move.l d0,-(sp)
   11aa8:	|      jsr 154c0 <setVariable>
   11aae:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11ab2:	|      moveq #2,d0
}
   11ab4:	'----> addq.l #8,sp
   11ab6:	       rts

00011ab8 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11ab8:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11aba:	       movea.l 16(sp),a0
   11abe:	       move.l 24(a0),d0
   11ac2:	       move.l d0,-(sp)
   11ac4:	       pea 1 <_start+0x1>
   11ac8:	       move.l sp,d0
   11aca:	       addq.l #8,d0
   11acc:	       move.l d0,-(sp)
   11ace:	       jsr 14bce <getValueType>
   11ad4:	       lea 12(sp),sp
   11ad8:	       tst.w d0
   11ada:	   ,-- bne.s 11ae0 <builtIn_setCharacterWalkSpeed+0x28>
   11adc:	   |   moveq #1,d0
   11ade:	,--|-- bra.s 11b54 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11ae0:	|  '-> moveq #24,d0
   11ae2:	|      add.l 16(sp),d0
   11ae6:	|      move.l d0,-(sp)
   11ae8:	|      jsr 15552 <trimStack>
   11aee:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11af0:	|      movea.l 16(sp),a0
   11af4:	|      move.l 24(a0),d0
   11af8:	|      move.l d0,-(sp)
   11afa:	|      pea 7 <_start+0x7>
   11afe:	|      moveq #12,d0
   11b00:	|      add.l sp,d0
   11b02:	|      move.l d0,-(sp)
   11b04:	|      jsr 14bce <getValueType>
   11b0a:	|      lea 12(sp),sp
   11b0e:	|      tst.w d0
   11b10:	|  ,-- bne.s 11b16 <builtIn_setCharacterWalkSpeed+0x5e>
   11b12:	|  |   moveq #1,d0
   11b14:	+--|-- bra.s 11b54 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11b16:	|  '-> moveq #24,d0
   11b18:	|      add.l 16(sp),d0
   11b1c:	|      move.l d0,-(sp)
   11b1e:	|      jsr 15552 <trimStack>
   11b24:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   11b26:	|      move.l 4(sp),d1
   11b2a:	|      move.l (sp),d0
   11b2c:	|      move.l d1,-(sp)
   11b2e:	|      move.l d0,-(sp)
   11b30:	|      jsr bf7e <setCharacterWalkSpeed>
   11b36:	|      addq.l #8,sp
   11b38:	|      movea.w d0,a0
   11b3a:	|      moveq #28,d0
   11b3c:	|      add.l 16(sp),d0
   11b40:	|      move.l a0,-(sp)
   11b42:	|      pea 1 <_start+0x1>
   11b46:	|      move.l d0,-(sp)
   11b48:	|      jsr 154c0 <setVariable>
   11b4e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11b52:	|      moveq #2,d0
}
   11b54:	'----> addq.l #8,sp
   11b56:	       rts

00011b58 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   11b58:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b5a:	       movea.l 16(sp),a0
   11b5e:	       move.l 24(a0),d0
   11b62:	       move.l d0,-(sp)
   11b64:	       pea 1 <_start+0x1>
   11b68:	       move.l sp,d0
   11b6a:	       addq.l #8,d0
   11b6c:	       move.l d0,-(sp)
   11b6e:	       jsr 14bce <getValueType>
   11b74:	       lea 12(sp),sp
   11b78:	       tst.w d0
   11b7a:	   ,-- bne.s 11b80 <builtIn_turnCharacter+0x28>
   11b7c:	   |   moveq #1,d0
   11b7e:	,--|-- bra.s 11bf4 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11b80:	|  '-> moveq #24,d0
   11b82:	|      add.l 16(sp),d0
   11b86:	|      move.l d0,-(sp)
   11b88:	|      jsr 15552 <trimStack>
   11b8e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b90:	|      movea.l 16(sp),a0
   11b94:	|      move.l 24(a0),d0
   11b98:	|      move.l d0,-(sp)
   11b9a:	|      pea 7 <_start+0x7>
   11b9e:	|      moveq #12,d0
   11ba0:	|      add.l sp,d0
   11ba2:	|      move.l d0,-(sp)
   11ba4:	|      jsr 14bce <getValueType>
   11baa:	|      lea 12(sp),sp
   11bae:	|      tst.w d0
   11bb0:	|  ,-- bne.s 11bb6 <builtIn_turnCharacter+0x5e>
   11bb2:	|  |   moveq #1,d0
   11bb4:	+--|-- bra.s 11bf4 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11bb6:	|  '-> moveq #24,d0
   11bb8:	|      add.l 16(sp),d0
   11bbc:	|      move.l d0,-(sp)
   11bbe:	|      jsr 15552 <trimStack>
   11bc4:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11bc6:	|      move.l (sp),d1
   11bc8:	|      move.l 4(sp),d0
   11bcc:	|      move.l d1,-(sp)
   11bce:	|      move.l d0,-(sp)
   11bd0:	|      jsr c222 <turnPersonToFace>
   11bd6:	|      addq.l #8,sp
   11bd8:	|      movea.w d0,a0
   11bda:	|      moveq #28,d0
   11bdc:	|      add.l 16(sp),d0
   11be0:	|      move.l a0,-(sp)
   11be2:	|      pea 1 <_start+0x1>
   11be6:	|      move.l d0,-(sp)
   11be8:	|      jsr 154c0 <setVariable>
   11bee:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11bf2:	|      moveq #2,d0
}
   11bf4:	'----> addq.l #8,sp
   11bf6:	       rts

00011bf8 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   11bf8:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11bfa:	       movea.l 16(sp),a0
   11bfe:	       move.l 24(a0),d0
   11c02:	       move.l d0,-(sp)
   11c04:	       pea 1 <_start+0x1>
   11c08:	       move.l sp,d0
   11c0a:	       addq.l #8,d0
   11c0c:	       move.l d0,-(sp)
   11c0e:	       jsr 14bce <getValueType>
   11c14:	       lea 12(sp),sp
   11c18:	       tst.w d0
   11c1a:	   ,-- bne.s 11c20 <builtIn_setCharacterExtra+0x28>
   11c1c:	   |   moveq #1,d0
   11c1e:	,--|-- bra.s 11c94 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11c20:	|  '-> moveq #24,d0
   11c22:	|      add.l 16(sp),d0
   11c26:	|      move.l d0,-(sp)
   11c28:	|      jsr 15552 <trimStack>
   11c2e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11c30:	|      movea.l 16(sp),a0
   11c34:	|      move.l 24(a0),d0
   11c38:	|      move.l d0,-(sp)
   11c3a:	|      pea 7 <_start+0x7>
   11c3e:	|      moveq #12,d0
   11c40:	|      add.l sp,d0
   11c42:	|      move.l d0,-(sp)
   11c44:	|      jsr 14bce <getValueType>
   11c4a:	|      lea 12(sp),sp
   11c4e:	|      tst.w d0
   11c50:	|  ,-- bne.s 11c56 <builtIn_setCharacterExtra+0x5e>
   11c52:	|  |   moveq #1,d0
   11c54:	+--|-- bra.s 11c94 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11c56:	|  '-> moveq #24,d0
   11c58:	|      add.l 16(sp),d0
   11c5c:	|      move.l d0,-(sp)
   11c5e:	|      jsr 15552 <trimStack>
   11c64:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11c66:	|      move.l (sp),d1
   11c68:	|      move.l 4(sp),d0
   11c6c:	|      move.l d1,-(sp)
   11c6e:	|      move.l d0,-(sp)
   11c70:	|      jsr bfac <setPersonExtra>
   11c76:	|      addq.l #8,sp
   11c78:	|      movea.w d0,a0
   11c7a:	|      moveq #28,d0
   11c7c:	|      add.l 16(sp),d0
   11c80:	|      move.l a0,-(sp)
   11c82:	|      pea 1 <_start+0x1>
   11c86:	|      move.l d0,-(sp)
   11c88:	|      jsr 154c0 <setVariable>
   11c8e:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11c92:	|      moveq #2,d0
}
   11c94:	'----> addq.l #8,sp
   11c96:	       rts

00011c98 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11c98:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11c9a:	       movea.l 12(sp),a0
   11c9e:	       move.l 24(a0),d0
   11ca2:	       move.l d0,-(sp)
   11ca4:	       pea 7 <_start+0x7>
   11ca8:	       move.l sp,d0
   11caa:	       addq.l #8,d0
   11cac:	       move.l d0,-(sp)
   11cae:	       jsr 14bce <getValueType>
   11cb4:	       lea 12(sp),sp
   11cb8:	       tst.w d0
   11cba:	   ,-- bne.s 11cc0 <builtIn_removeCharacter+0x28>
   11cbc:	   |   moveq #1,d0
   11cbe:	,--|-- bra.s 11cde <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11cc0:	|  '-> moveq #24,d0
   11cc2:	|      add.l 12(sp),d0
   11cc6:	|      move.l d0,-(sp)
   11cc8:	|      jsr 15552 <trimStack>
   11cce:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11cd0:	|      move.l (sp),d0
   11cd2:	|      move.l d0,-(sp)
   11cd4:	|      jsr b1ac <removeOneCharacter>
   11cda:	|      addq.l #4,sp
	return BR_CONTINUE;
   11cdc:	|      moveq #2,d0
}
   11cde:	'----> addq.l #4,sp
   11ce0:	       rts

00011ce2 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11ce2:	                lea -28(sp),sp
   11ce6:	                move.l d2,-(sp)
   11ce8:	                move.l 44(sp),d1
   11cec:	                move.l 48(sp),d0
   11cf0:	                move.w d1,d1
   11cf2:	                move.w d1,6(sp)
   11cf6:	                move.w d0,d0
   11cf8:	                move.w d0,4(sp)
	switch (numParams) {
   11cfc:	                moveq #2,d0
   11cfe:	                cmp.l 36(sp),d0
   11d02:	      ,-------- beq.w 11e44 <moveChr+0x162>
   11d06:	      |         moveq #3,d0
   11d08:	      |         cmp.l 36(sp),d0
   11d0c:	,-----|-------- bne.w 11f78 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d10:	|     |         movea.l 40(sp),a0
   11d14:	|     |         move.l 24(a0),d0
   11d18:	|     |         move.l d0,-(sp)
   11d1a:	|     |         pea 1 <_start+0x1>
   11d1e:	|     |         lea 20(sp),a0
   11d22:	|     |         move.l a0,-(sp)
   11d24:	|     |         jsr 14bce <getValueType>
   11d2a:	|     |         lea 12(sp),sp
   11d2e:	|     |         tst.w d0
   11d30:	|     |     ,-- bne.s 11d38 <moveChr+0x56>
   11d32:	|     |     |   moveq #1,d0
   11d34:	|  ,--|-----|-- bra.w 11f88 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11d38:	|  |  |     '-> moveq #24,d0
   11d3a:	|  |  |         add.l 40(sp),d0
   11d3e:	|  |  |         move.l d0,-(sp)
   11d40:	|  |  |         jsr 15552 <trimStack>
   11d46:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d48:	|  |  |         movea.l 40(sp),a0
   11d4c:	|  |  |         move.l 24(a0),d0
   11d50:	|  |  |         move.l d0,-(sp)
   11d52:	|  |  |         pea 1 <_start+0x1>
   11d56:	|  |  |         lea 24(sp),a0
   11d5a:	|  |  |         move.l a0,-(sp)
   11d5c:	|  |  |         jsr 14bce <getValueType>
   11d62:	|  |  |         lea 12(sp),sp
   11d66:	|  |  |         tst.w d0
   11d68:	|  |  |     ,-- bne.s 11d70 <moveChr+0x8e>
   11d6a:	|  |  |     |   moveq #1,d0
   11d6c:	|  +--|-----|-- bra.w 11f88 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11d70:	|  |  |     '-> moveq #24,d0
   11d72:	|  |  |         add.l 40(sp),d0
   11d76:	|  |  |         move.l d0,-(sp)
   11d78:	|  |  |         jsr 15552 <trimStack>
   11d7e:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11d80:	|  |  |         movea.l 40(sp),a0
   11d84:	|  |  |         move.l 24(a0),d0
   11d88:	|  |  |         move.l d0,-(sp)
   11d8a:	|  |  |         pea 7 <_start+0x7>
   11d8e:	|  |  |         lea 16(sp),a0
   11d92:	|  |  |         move.l a0,-(sp)
   11d94:	|  |  |         jsr 14bce <getValueType>
   11d9a:	|  |  |         lea 12(sp),sp
   11d9e:	|  |  |         tst.w d0
   11da0:	|  |  |     ,-- bne.s 11da8 <moveChr+0xc6>
   11da2:	|  |  |     |   moveq #1,d0
   11da4:	|  +--|-----|-- bra.w 11f88 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11da8:	|  |  |     '-> moveq #24,d0
   11daa:	|  |  |         add.l 40(sp),d0
   11dae:	|  |  |         move.l d0,-(sp)
   11db0:	|  |  |         jsr 15552 <trimStack>
   11db6:	|  |  |         addq.l #4,sp

			if (force) {
   11db8:	|  |  |         tst.w 6(sp)
   11dbc:	|  |  |     ,-- beq.s 11dec <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11dbe:	|  |  |     |   movea.l 8(sp),a0
   11dc2:	|  |  |     |   move.l 12(sp),d1
   11dc6:	|  |  |     |   move.l 16(sp),d0
   11dca:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb3ea3>
   11dce:	|  |  |     |   move.l 44(sp),-(sp)
   11dd2:	|  |  |     |   move.l a0,-(sp)
   11dd4:	|  |  |     |   move.l d1,-(sp)
   11dd6:	|  |  |     |   move.l d0,-(sp)
   11dd8:	|  |  |     |   jsr a9e2 <forceWalkingPerson>
   11dde:	|  |  |     |   lea 20(sp),sp
   11de2:	|  |  |     |   tst.w d0
   11de4:	|  |  |  ,--|-- beq.s 11e3e <moveChr+0x15c>
   11de6:	|  |  |  |  |   moveq #3,d0
   11de8:	|  +--|--|--|-- bra.w 11f88 <moveChr+0x2a6>
			} else if (immediate) {
   11dec:	|  |  |  |  '-> tst.w 4(sp)
   11df0:	|  |  |  |  ,-- beq.s 11e10 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11df2:	|  |  |  |  |   movea.l 8(sp),a0
   11df6:	|  |  |  |  |   move.l 12(sp),d1
   11dfa:	|  |  |  |  |   move.l 16(sp),d0
   11dfe:	|  |  |  |  |   move.l a0,-(sp)
   11e00:	|  |  |  |  |   move.l d1,-(sp)
   11e02:	|  |  |  |  |   move.l d0,-(sp)
   11e04:	|  |  |  |  |   jsr acf8 <jumpPerson>
   11e0a:	|  |  |  |  |   lea 12(sp),sp
   11e0e:	|  |  |  +--|-- bra.s 11e3e <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11e10:	|  |  |  |  '-> movea.l 8(sp),a0
   11e14:	|  |  |  |      move.l 12(sp),d1
   11e18:	|  |  |  |      move.l 16(sp),d0
   11e1c:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb3ea3>
   11e20:	|  |  |  |      move.l 44(sp),-(sp)
   11e24:	|  |  |  |      move.l a0,-(sp)
   11e26:	|  |  |  |      move.l d1,-(sp)
   11e28:	|  |  |  |      move.l d0,-(sp)
   11e2a:	|  |  |  |      jsr aec8 <makeWalkingPerson>
   11e30:	|  |  |  |      lea 20(sp),sp
   11e34:	|  |  |  |      tst.w d0
   11e36:	|  |  |  +----- beq.s 11e3e <moveChr+0x15c>
   11e38:	|  |  |  |      moveq #3,d0
   11e3a:	|  +--|--|----- bra.w 11f88 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11e3e:	|  |  |  '----> moveq #2,d0
   11e40:	|  +--|-------- bra.w 11f88 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11e44:	|  |  '-------> movea.l 40(sp),a0
   11e48:	|  |            move.l 24(a0),d0
   11e4c:	|  |            move.l d0,-(sp)
   11e4e:	|  |            pea 7 <_start+0x7>
   11e52:	|  |            moveq #32,d0
   11e54:	|  |            add.l sp,d0
   11e56:	|  |            move.l d0,-(sp)
   11e58:	|  |            jsr 14bce <getValueType>
   11e5e:	|  |            lea 12(sp),sp
   11e62:	|  |            tst.w d0
   11e64:	|  |        ,-- bne.s 11e6c <moveChr+0x18a>
   11e66:	|  |        |   moveq #1,d0
   11e68:	|  +--------|-- bra.w 11f88 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11e6c:	|  |        '-> moveq #24,d0
   11e6e:	|  |            add.l 40(sp),d0
   11e72:	|  |            move.l d0,-(sp)
   11e74:	|  |            jsr 15552 <trimStack>
   11e7a:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11e7c:	|  |            movea.l 40(sp),a0
   11e80:	|  |            move.l 24(a0),d0
   11e84:	|  |            move.l d0,-(sp)
   11e86:	|  |            pea 7 <_start+0x7>
   11e8a:	|  |            lea 28(sp),a0
   11e8e:	|  |            move.l a0,-(sp)
   11e90:	|  |            jsr 14bce <getValueType>
   11e96:	|  |            lea 12(sp),sp
   11e9a:	|  |            tst.w d0
   11e9c:	|  |        ,-- bne.s 11ea4 <moveChr+0x1c2>
   11e9e:	|  |        |   moveq #1,d0
   11ea0:	|  +--------|-- bra.w 11f88 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11ea4:	|  |        '-> moveq #24,d0
   11ea6:	|  |            add.l 40(sp),d0
   11eaa:	|  |            move.l d0,-(sp)
   11eac:	|  |            jsr 15552 <trimStack>
   11eb2:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11eb4:	|  |            move.l 24(sp),d0
   11eb8:	|  |            move.l d0,-(sp)
   11eba:	|  |            jsr 15e90 <getRegionForObject>
   11ec0:	|  |            addq.l #4,sp
   11ec2:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11ec6:	|  |        ,-- bne.s 11ece <moveChr+0x1ec>
   11ec8:	|  |        |   moveq #2,d0
   11eca:	|  +--------|-- bra.w 11f88 <moveChr+0x2a6>

			if (force)
   11ece:	|  |        '-> tst.w 6(sp)
   11ed2:	|  |        ,-- beq.s 11f0e <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11ed4:	|  |        |   movea.l 28(sp),a0
   11ed8:	|  |        |   move.l 24(a0),d2
   11edc:	|  |        |   movea.l 20(sp),a1
   11ee0:	|  |        |   movea.l 28(sp),a0
   11ee4:	|  |        |   move.l 20(a0),d1
   11ee8:	|  |        |   movea.l 28(sp),a0
   11eec:	|  |        |   move.l 16(a0),d0
   11ef0:	|  |        |   move.l d2,-(sp)
   11ef2:	|  |        |   move.l 44(sp),-(sp)
   11ef6:	|  |        |   move.l a1,-(sp)
   11ef8:	|  |        |   move.l d1,-(sp)
   11efa:	|  |        |   move.l d0,-(sp)
   11efc:	|  |        |   jsr a9e2 <forceWalkingPerson>
   11f02:	|  |        |   lea 20(sp),sp
   11f06:	|  |        |   tst.w d0
   11f08:	|  |     ,--|-- beq.s 11f74 <moveChr+0x292>
   11f0a:	|  |     |  |   moveq #3,d0
   11f0c:	|  +-----|--|-- bra.s 11f88 <moveChr+0x2a6>
			}
			else if (immediate)
   11f0e:	|  |     |  '-> tst.w 4(sp)
   11f12:	|  |     |  ,-- beq.s 11f3a <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11f14:	|  |     |  |   movea.l 20(sp),a1
   11f18:	|  |     |  |   movea.l 28(sp),a0
   11f1c:	|  |     |  |   move.l 20(a0),d1
   11f20:	|  |     |  |   movea.l 28(sp),a0
   11f24:	|  |     |  |   move.l 16(a0),d0
   11f28:	|  |     |  |   move.l a1,-(sp)
   11f2a:	|  |     |  |   move.l d1,-(sp)
   11f2c:	|  |     |  |   move.l d0,-(sp)
   11f2e:	|  |     |  |   jsr acf8 <jumpPerson>
   11f34:	|  |     |  |   lea 12(sp),sp
   11f38:	|  |     +--|-- bra.s 11f74 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11f3a:	|  |     |  '-> movea.l 28(sp),a0
   11f3e:	|  |     |      move.l 24(a0),d2
   11f42:	|  |     |      movea.l 20(sp),a1
   11f46:	|  |     |      movea.l 28(sp),a0
   11f4a:	|  |     |      move.l 20(a0),d1
   11f4e:	|  |     |      movea.l 28(sp),a0
   11f52:	|  |     |      move.l 16(a0),d0
   11f56:	|  |     |      move.l d2,-(sp)
   11f58:	|  |     |      move.l 44(sp),-(sp)
   11f5c:	|  |     |      move.l a1,-(sp)
   11f5e:	|  |     |      move.l d1,-(sp)
   11f60:	|  |     |      move.l d0,-(sp)
   11f62:	|  |     |      jsr aec8 <makeWalkingPerson>
   11f68:	|  |     |      lea 20(sp),sp
   11f6c:	|  |     |      tst.w d0
   11f6e:	|  |     +----- beq.s 11f74 <moveChr+0x292>
   11f70:	|  |     |      moveq #3,d0
   11f72:	|  +-----|----- bra.s 11f88 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11f74:	|  |     '----> moveq #2,d0
   11f76:	|  +----------- bra.s 11f88 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11f78:	'--|----------> pea 1a0aa <PutChar+0x1f5a>
   11f7e:	   |            jsr 176ae <KPrintF>
   11f84:	   |            addq.l #4,sp
			return BR_ERROR;
   11f86:	   |            moveq #1,d0
	}
}
   11f88:	   '----------> move.l (sp)+,d2
   11f8a:	                lea 28(sp),sp
   11f8e:	                rts

00011f90 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11f90:	clr.l -(sp)
   11f92:	clr.l -(sp)
   11f94:	move.l 16(sp),-(sp)
   11f98:	move.l 16(sp),-(sp)
   11f9c:	jsr 11ce2 <moveChr>
   11fa2:	lea 16(sp),sp
}
   11fa6:	rts

00011fa8 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11fa8:	clr.l -(sp)
   11faa:	pea 1 <_start+0x1>
   11fae:	move.l 16(sp),-(sp)
   11fb2:	move.l 16(sp),-(sp)
   11fb6:	jsr 11ce2 <moveChr>
   11fbc:	lea 16(sp),sp
}
   11fc0:	rts

00011fc2 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11fc2:	pea 1 <_start+0x1>
   11fc6:	clr.l -(sp)
   11fc8:	move.l 16(sp),-(sp)
   11fcc:	move.l 16(sp),-(sp)
   11fd0:	jsr 11ce2 <moveChr>
   11fd6:	lea 16(sp),sp
}
   11fda:	rts

00011fdc <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11fdc:	jsr 8666 <clearStatusBar>
	return BR_CONTINUE;
   11fe2:	moveq #2,d0
}
   11fe4:	rts

00011fe6 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11fe6:	jsr 870e <killLastStatus>
	return BR_CONTINUE;
   11fec:	moveq #2,d0
}
   11fee:	rts

00011ff0 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11ff0:	jsr 85fc <addStatusBar>
	return BR_CONTINUE;
   11ff6:	moveq #2,d0
}
   11ff8:	rts

00011ffa <builtIn_statusText>:

builtIn(statusText)
{
   11ffa:	       subq.l #8,sp
   11ffc:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11ffe:	       movea.l 20(sp),a0
   12002:	       move.l 24(a0),d0
   12006:	       move.l d0,-(sp)
   12008:	       jsr 151a4 <getTextFromAnyVar>
   1200e:	       addq.l #4,sp
   12010:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   12014:	   ,-- bne.s 1201a <builtIn_statusText+0x20>
   12016:	   |   moveq #1,d0
   12018:	,--|-- bra.s 1204e <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   1201a:	|  '-> moveq #24,d0
   1201c:	|      add.l 20(sp),d0
   12020:	|      move.l d0,-(sp)
   12022:	|      jsr 15552 <trimStack>
   12028:	|      addq.l #4,sp
	setStatusBar(newText);
   1202a:	|      move.l 8(sp),-(sp)
   1202e:	|      jsr 898e <setStatusBar>
   12034:	|      addq.l #4,sp
	FreeVec(newText);
   12036:	|      move.l 8(sp),4(sp)
   1203c:	|      move.l 1ce8a <SysBase>,d0
   12042:	|      movea.l d0,a6
   12044:	|      movea.l 4(sp),a1
   12048:	|      jsr -690(a6)
	return BR_CONTINUE;
   1204c:	|      moveq #2,d0
}
   1204e:	'----> movea.l (sp)+,a6
   12050:	       addq.l #8,sp
   12052:	       rts

00012054 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   12054:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12056:	       movea.l 12(sp),a0
   1205a:	       move.l 24(a0),d0
   1205e:	       move.l d0,-(sp)
   12060:	       pea 1 <_start+0x1>
   12064:	       move.l sp,d0
   12066:	       addq.l #8,d0
   12068:	       move.l d0,-(sp)
   1206a:	       jsr 14bce <getValueType>
   12070:	       lea 12(sp),sp
   12074:	       tst.w d0
   12076:	   ,-- bne.s 1207c <builtIn_lightStatus+0x28>
   12078:	   |   moveq #1,d0
   1207a:	,--|-- bra.s 1209a <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   1207c:	|  '-> moveq #24,d0
   1207e:	|      add.l 12(sp),d0
   12082:	|      move.l d0,-(sp)
   12084:	|      jsr 15552 <trimStack>
   1208a:	|      addq.l #4,sp
	setLitStatus (val);
   1208c:	|      move.l (sp),d0
   1208e:	|      move.l d0,-(sp)
   12090:	|      jsr 897e <setLitStatus>
   12096:	|      addq.l #4,sp
	return BR_CONTINUE;
   12098:	|      moveq #2,d0
}
   1209a:	'----> addq.l #4,sp
   1209c:	       rts

0001209e <builtIn_positionStatus>:

builtIn(positionStatus)
{
   1209e:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   120a0:	       movea.l 16(sp),a0
   120a4:	       move.l 24(a0),d0
   120a8:	       move.l d0,-(sp)
   120aa:	       pea 1 <_start+0x1>
   120ae:	       move.l sp,d0
   120b0:	       addq.l #8,d0
   120b2:	       move.l d0,-(sp)
   120b4:	       jsr 14bce <getValueType>
   120ba:	       lea 12(sp),sp
   120be:	       tst.w d0
   120c0:	   ,-- bne.s 120c6 <builtIn_positionStatus+0x28>
   120c2:	   |   moveq #1,d0
   120c4:	,--|-- bra.s 12120 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   120c6:	|  '-> moveq #24,d0
   120c8:	|      add.l 16(sp),d0
   120cc:	|      move.l d0,-(sp)
   120ce:	|      jsr 15552 <trimStack>
   120d4:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   120d6:	|      movea.l 16(sp),a0
   120da:	|      move.l 24(a0),d0
   120de:	|      move.l d0,-(sp)
   120e0:	|      pea 1 <_start+0x1>
   120e4:	|      moveq #12,d0
   120e6:	|      add.l sp,d0
   120e8:	|      move.l d0,-(sp)
   120ea:	|      jsr 14bce <getValueType>
   120f0:	|      lea 12(sp),sp
   120f4:	|      tst.w d0
   120f6:	|  ,-- bne.s 120fc <builtIn_positionStatus+0x5e>
   120f8:	|  |   moveq #1,d0
   120fa:	+--|-- bra.s 12120 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   120fc:	|  '-> moveq #24,d0
   120fe:	|      add.l 16(sp),d0
   12102:	|      move.l d0,-(sp)
   12104:	|      jsr 15552 <trimStack>
   1210a:	|      addq.l #4,sp
	positionStatus (x, y);
   1210c:	|      move.l (sp),d1
   1210e:	|      move.l 4(sp),d0
   12112:	|      move.l d1,-(sp)
   12114:	|      move.l d0,-(sp)
   12116:	|      jsr 8770 <positionStatus>
   1211c:	|      addq.l #8,sp
	return BR_CONTINUE;
   1211e:	|      moveq #2,d0
}
   12120:	'----> addq.l #8,sp
   12122:	       rts

00012124 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   12124:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12126:	       movea.l 12(sp),a0
   1212a:	       move.l 24(a0),d0
   1212e:	       move.l d0,-(sp)
   12130:	       pea 1 <_start+0x1>
   12134:	       move.l sp,d0
   12136:	       addq.l #8,d0
   12138:	       move.l d0,-(sp)
   1213a:	       jsr 14bce <getValueType>
   12140:	       lea 12(sp),sp
   12144:	       tst.w d0
   12146:	   ,-- bne.s 1214c <builtIn_alignStatus+0x28>
   12148:	   |   moveq #1,d0
   1214a:	,--|-- bra.s 1216c <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   1214c:	|  '-> moveq #24,d0
   1214e:	|      add.l 12(sp),d0
   12152:	|      move.l d0,-(sp)
   12154:	|      jsr 15552 <trimStack>
   1215a:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   1215c:	|      move.l (sp),d0
   1215e:	|      movea.l 1c812 <nowStatus>,a0
   12164:	|      move.l d0,d0
   12166:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   1216a:	|      moveq #2,d0
}
   1216c:	'----> addq.l #4,sp
   1216e:	       rts

00012170 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   12170:	             tst.l 4(sp)
   12174:	      ,----- beq.s 12180 <getFuncNumForCallback+0x10>
   12176:	      |      moveq #1,d0
   12178:	      |      cmp.l 4(sp),d0
   1217c:	      |  ,-- beq.s 12186 <getFuncNumForCallback+0x16>
   1217e:	   ,--|--|-- bra.s 121bc <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   12180:	   |  '--|-> clr.l 12(sp)
			break;
   12184:	,--|-----|-- bra.s 121ce <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   12186:	|  |     '-> movea.l 8(sp),a0
   1218a:	|  |         move.l 24(a0),d0
   1218e:	|  |         move.l d0,-(sp)
   12190:	|  |         pea 2 <_start+0x2>
   12194:	|  |         move.l 20(sp),-(sp)
   12198:	|  |         jsr 14bce <getValueType>
   1219e:	|  |         lea 12(sp),sp
   121a2:	|  |         tst.w d0
   121a4:	|  |     ,-- bne.s 121aa <getFuncNumForCallback+0x3a>
   121a6:	|  |     |   clr.w d0
   121a8:	|  |  ,--|-- bra.s 121d0 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   121aa:	|  |  |  '-> moveq #24,d0
   121ac:	|  |  |      add.l 8(sp),d0
   121b0:	|  |  |      move.l d0,-(sp)
   121b2:	|  |  |      jsr 15552 <trimStack>
   121b8:	|  |  |      addq.l #4,sp
			break;
   121ba:	+--|--|----- bra.s 121ce <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   121bc:	|  '--|----> pea 1a0e0 <PutChar+0x1f90>
   121c2:	|     |      jsr 176ae <KPrintF>
   121c8:	|     |      addq.l #4,sp
			return FALSE;
   121ca:	|     |      clr.w d0
   121cc:	|     +----- bra.s 121d0 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   121ce:	'-----|----> moveq #1,d0
}
   121d0:	      '----> rts

000121d2 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   121d2:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   121d4:	       move.l sp,d0
   121d6:	       move.l d0,-(sp)
   121d8:	       move.l 16(sp),-(sp)
   121dc:	       move.l 16(sp),-(sp)
   121e0:	       jsr 12170 <getFuncNumForCallback>
   121e6:	       lea 12(sp),sp
   121ea:	       tst.w d0
   121ec:	,----- beq.s 121fc <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   121ee:	|      movea.l 1c804 <currentEvents>,a0
   121f4:	|      move.l (sp),d0
   121f6:	|      move.l d0,(a0)
		return BR_CONTINUE;
   121f8:	|      moveq #2,d0
   121fa:	|  ,-- bra.s 121fe <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   121fc:	'--|-> moveq #1,d0
}
   121fe:	   '-> addq.l #4,sp
   12200:	       rts

00012202 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   12202:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12204:	       move.l sp,d0
   12206:	       move.l d0,-(sp)
   12208:	       move.l 16(sp),-(sp)
   1220c:	       move.l 16(sp),-(sp)
   12210:	       jsr 12170 <getFuncNumForCallback>
   12216:	       lea 12(sp),sp
   1221a:	       tst.w d0
   1221c:	,----- beq.s 1222e <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   1221e:	|      movea.l 1c804 <currentEvents>,a0
   12224:	|      move.l (sp),d0
   12226:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   1222a:	|      moveq #2,d0
   1222c:	|  ,-- bra.s 12230 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   1222e:	'--|-> moveq #1,d0
}
   12230:	   '-> addq.l #4,sp
   12232:	       rts

00012234 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   12234:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12236:	       move.l sp,d0
   12238:	       move.l d0,-(sp)
   1223a:	       move.l 16(sp),-(sp)
   1223e:	       move.l 16(sp),-(sp)
   12242:	       jsr 12170 <getFuncNumForCallback>
   12248:	       lea 12(sp),sp
   1224c:	       tst.w d0
   1224e:	,----- beq.s 12260 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   12250:	|      movea.l 1c804 <currentEvents>,a0
   12256:	|      move.l (sp),d0
   12258:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   1225c:	|      moveq #2,d0
   1225e:	|  ,-- bra.s 12262 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   12260:	'--|-> moveq #1,d0
}
   12262:	   '-> addq.l #4,sp
   12264:	       rts

00012266 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   12266:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12268:	       move.l sp,d0
   1226a:	       move.l d0,-(sp)
   1226c:	       move.l 16(sp),-(sp)
   12270:	       move.l 16(sp),-(sp)
   12274:	       jsr 12170 <getFuncNumForCallback>
   1227a:	       lea 12(sp),sp
   1227e:	       tst.w d0
   12280:	,----- beq.s 12292 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   12282:	|      movea.l 1c804 <currentEvents>,a0
   12288:	|      move.l (sp),d0
   1228a:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   1228e:	|      moveq #2,d0
   12290:	|  ,-- bra.s 12294 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   12292:	'--|-> moveq #1,d0
}
   12294:	   '-> addq.l #4,sp
   12296:	       rts

00012298 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   12298:	          subq.l #8,sp
   1229a:	          move.l a2,-(sp)
	UNUSEDALL
	int functionNum;	

	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1229c:	          move.l sp,d0
   1229e:	          addq.l #4,d0
   122a0:	          move.l d0,-(sp)
   122a2:	          move.l 24(sp),-(sp)
   122a6:	          move.l 24(sp),-(sp)
   122aa:	          jsr 12170 <getFuncNumForCallback>
   122b0:	          lea 12(sp),sp
   122b4:	          tst.w d0
   122b6:	,-------- beq.s 12314 <builtIn_onFocusChange+0x7c>
	{
		struct loadedFunction *oldfunc = currentEvents -> focusFunction;
   122b8:	|         movea.l 1c804 <currentEvents>,a0
   122be:	|         move.l 20(a0),8(sp)
		if( functionNum != NULL) 
   122c4:	|         move.l 4(sp),d0
   122c8:	|  ,----- beq.s 122e4 <builtIn_onFocusChange+0x4c>
			currentEvents -> focusFunction = preloadNewFunctionNum(functionNum);		
   122ca:	|  |      move.l 4(sp),d0
   122ce:	|  |      movea.l 1c804 <currentEvents>,a2
   122d4:	|  |      move.l d0,-(sp)
   122d6:	|  |      jsr 7480 <preloadNewFunctionNum>
   122dc:	|  |      addq.l #4,sp
   122de:	|  |      move.l d0,20(a2)
   122e2:	|  |  ,-- bra.s 122ee <builtIn_onFocusChange+0x56>
		else
			currentEvents -> focusFunction = NULL;
   122e4:	|  '--|-> movea.l 1c804 <currentEvents>,a0
   122ea:	|     |   clr.l 20(a0)

		if( oldfunc != NULL && oldfunc != currentEvents -> focusFunction )
   122ee:	|     '-> tst.l 8(sp)
   122f2:	|     ,-- beq.s 12310 <builtIn_onFocusChange+0x78>
   122f4:	|     |   movea.l 1c804 <currentEvents>,a0
   122fa:	|     |   move.l 20(a0),d0
   122fe:	|     |   cmp.l 8(sp),d0
   12302:	|     +-- beq.s 12310 <builtIn_onFocusChange+0x78>
		{
			unloadFunction(oldfunc);
   12304:	|     |   move.l 8(sp),-(sp)
   12308:	|     |   jsr 78e8 <unloadFunction>
   1230e:	|     |   addq.l #4,sp
		}
		

		return BR_CONTINUE;
   12310:	|     '-> moveq #2,d0
   12312:	|     ,-- bra.s 12316 <builtIn_onFocusChange+0x7e>
	}
	return BR_ERROR;
   12314:	'-----|-> moveq #1,d0
}
   12316:	      '-> movea.l (sp)+,a2
   12318:	          addq.l #8,sp
   1231a:	          rts

0001231c <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   1231c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1231e:	       move.l sp,d0
   12320:	       move.l d0,-(sp)
   12322:	       move.l 16(sp),-(sp)
   12326:	       move.l 16(sp),-(sp)
   1232a:	       jsr 12170 <getFuncNumForCallback>
   12330:	       lea 12(sp),sp
   12334:	       tst.w d0
   12336:	,----- beq.s 12348 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   12338:	|      movea.l 1c804 <currentEvents>,a0
   1233e:	|      move.l (sp),d0
   12340:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   12344:	|      moveq #2,d0
   12346:	|  ,-- bra.s 1234a <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   12348:	'--|-> moveq #1,d0
}
   1234a:	   '-> addq.l #4,sp
   1234c:	       rts

0001234e <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   1234e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12350:	       move.l sp,d0
   12352:	       move.l d0,-(sp)
   12354:	       move.l 16(sp),-(sp)
   12358:	       move.l 16(sp),-(sp)
   1235c:	       jsr 12170 <getFuncNumForCallback>
   12362:	       lea 12(sp),sp
   12366:	       tst.w d0
   12368:	,----- beq.s 1237a <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   1236a:	|      movea.l 1c804 <currentEvents>,a0
   12370:	|      move.l (sp),d0
   12372:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   12376:	|      moveq #2,d0
   12378:	|  ,-- bra.s 1237c <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   1237a:	'--|-> moveq #1,d0
}
   1237c:	   '-> addq.l #4,sp
   1237e:	       rts

00012380 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   12380:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12382:	          move.l sp,d0
   12384:	          move.l d0,-(sp)
   12386:	          move.l 16(sp),-(sp)
   1238a:	          move.l 16(sp),-(sp)
   1238e:	          jsr 12170 <getFuncNumForCallback>
   12394:	          lea 12(sp),sp
   12398:	          tst.w d0
   1239a:	,-------- beq.s 123c6 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   1239c:	|         move.l 1ce5a <noStack>,d1
   123a2:	|         move.l (sp),d0
   123a4:	|         pea 1 <_start+0x1>
   123a8:	|         move.l d1,-(sp)
   123aa:	|         clr.l -(sp)
   123ac:	|         clr.l -(sp)
   123ae:	|         move.l d0,-(sp)
   123b0:	|         jsr 783c <startNewFunctionNum>
   123b6:	|         lea 20(sp),sp
   123ba:	|         tst.l d0
   123bc:	|     ,-- bne.s 123c2 <builtIn_spawnSub+0x42>
   123be:	|     |   moveq #1,d0
   123c0:	|  ,--|-- bra.s 123c8 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   123c2:	|  |  '-> moveq #2,d0
   123c4:	|  +----- bra.s 123c8 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   123c6:	'--|----> moveq #1,d0
}
   123c8:	   '----> addq.l #4,sp
   123ca:	          rts

000123cc <builtIn_cancelSub>:

builtIn (cancelSub)
{
   123cc:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   123ce:	          move.l sp,d0
   123d0:	          addq.l #4,d0
   123d2:	          move.l d0,-(sp)
   123d4:	          move.l 20(sp),-(sp)
   123d8:	          move.l 20(sp),-(sp)
   123dc:	          jsr 12170 <getFuncNumForCallback>
   123e2:	          lea 12(sp),sp
   123e6:	          tst.w d0
   123e8:	,-------- beq.s 1241e <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   123ea:	|         move.l 4(sp),d1
   123ee:	|         move.l sp,d0
   123f0:	|         addq.l #2,d0
   123f2:	|         move.l d0,-(sp)
   123f4:	|         move.l 20(sp),-(sp)
   123f8:	|         move.l d1,-(sp)
   123fa:	|         jsr 5482 <cancelAFunction>
   12400:	|         lea 12(sp),sp
		if (killedMyself) {
   12404:	|         move.w 2(sp),d0
   12408:	|  ,----- beq.s 1241a <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   1240a:	|  |      move.l 16(sp),-(sp)
   1240e:	|  |      jsr 5374 <abortFunction>
   12414:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   12416:	|  |      moveq #5,d0
   12418:	|  |  ,-- bra.s 12420 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   1241a:	|  '--|-> moveq #2,d0
   1241c:	|     +-- bra.s 12420 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   1241e:	'-----|-> moveq #1,d0
}
   12420:	      '-> addq.l #8,sp
   12422:	          rts

00012424 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   12424:	       subq.l #8,sp
   12426:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   12428:	       movea.l 20(sp),a0
   1242c:	       move.l 24(a0),d0
   12430:	       move.l d0,-(sp)
   12432:	       jsr 151a4 <getTextFromAnyVar>
   12438:	       addq.l #4,sp
   1243a:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   1243e:	   ,-- bne.s 12444 <builtIn_stringWidth+0x20>
   12440:	   |   moveq #1,d0
   12442:	,--|-- bra.s 12492 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   12444:	|  '-> moveq #24,d0
   12446:	|      add.l 20(sp),d0
   1244a:	|      move.l d0,-(sp)
   1244c:	|      jsr 15552 <trimStack>
   12452:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   12454:	|      move.l 8(sp),-(sp)
   12458:	|      jsr 15cb8 <stringWidth>
   1245e:	|      addq.l #4,sp
   12460:	|      move.l d0,d1
   12462:	|      moveq #28,d0
   12464:	|      add.l 20(sp),d0
   12468:	|      move.l d1,-(sp)
   1246a:	|      pea 1 <_start+0x1>
   1246e:	|      move.l d0,-(sp)
   12470:	|      jsr 154c0 <setVariable>
   12476:	|      lea 12(sp),sp
	FreeVec(theText);
   1247a:	|      move.l 8(sp),4(sp)
   12480:	|      move.l 1ce8a <SysBase>,d0
   12486:	|      movea.l d0,a6
   12488:	|      movea.l 4(sp),a1
   1248c:	|      jsr -690(a6)
	return BR_CONTINUE;
   12490:	|      moveq #2,d0
}
   12492:	'----> movea.l (sp)+,a6
   12494:	       addq.l #8,sp
   12496:	       rts

00012498 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   12498:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1249a:	       movea.l 12(sp),a0
   1249e:	       move.l 24(a0),d0
   124a2:	       move.l d0,-(sp)
   124a4:	       pea 1 <_start+0x1>
   124a8:	       move.l sp,d0
   124aa:	       addq.l #8,d0
   124ac:	       move.l d0,-(sp)
   124ae:	       jsr 14bce <getValueType>
   124b4:	       lea 12(sp),sp
   124b8:	       tst.w d0
   124ba:	   ,-- bne.s 124c0 <builtIn_hardScroll+0x28>
   124bc:	   |   moveq #1,d0
   124be:	,--|-- bra.s 124de <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   124c0:	|  '-> moveq #24,d0
   124c2:	|      add.l 12(sp),d0
   124c6:	|      move.l d0,-(sp)
   124c8:	|      jsr 15552 <trimStack>
   124ce:	|      addq.l #4,sp
	hardScroll (v);
   124d0:	|      move.l (sp),d0
   124d2:	|      move.l d0,-(sp)
   124d4:	|      jsr d634 <hardScroll>
   124da:	|      addq.l #4,sp
	return BR_CONTINUE;
   124dc:	|      moveq #2,d0
}
   124de:	'----> addq.l #4,sp
   124e0:	       rts

000124e2 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   124e2:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124e4:	       movea.l 12(sp),a0
   124e8:	       move.l 24(a0),d0
   124ec:	       move.l d0,-(sp)
   124ee:	       pea 7 <_start+0x7>
   124f2:	       move.l sp,d0
   124f4:	       addq.l #8,d0
   124f6:	       move.l d0,-(sp)
   124f8:	       jsr 14bce <getValueType>
   124fe:	       lea 12(sp),sp
   12502:	       tst.w d0
   12504:	   ,-- bne.s 1250a <builtIn_isScreenRegion+0x28>
   12506:	   |   moveq #1,d0
   12508:	,--|-- bra.s 1254a <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   1250a:	|  '-> moveq #24,d0
   1250c:	|      add.l 12(sp),d0
   12510:	|      move.l d0,-(sp)
   12512:	|      jsr 15552 <trimStack>
   12518:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   1251a:	|      move.l (sp),d0
   1251c:	|      move.l d0,-(sp)
   1251e:	|      jsr 15e90 <getRegionForObject>
   12524:	|      addq.l #4,sp
   12526:	|      tst.l d0
   12528:	|      sne d0
   1252a:	|      neg.b d0
   1252c:	|      moveq #0,d1
   1252e:	|      move.b d0,d1
   12530:	|      moveq #28,d0
   12532:	|      add.l 12(sp),d0
   12536:	|      move.l d1,-(sp)
   12538:	|      pea 1 <_start+0x1>
   1253c:	|      move.l d0,-(sp)
   1253e:	|      jsr 154c0 <setVariable>
   12544:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12548:	|      moveq #2,d0
}
   1254a:	'----> addq.l #4,sp
   1254c:	       rts

0001254e <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   1254e:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12550:	       movea.l 12(sp),a0
   12554:	       move.l 24(a0),d0
   12558:	       move.l d0,-(sp)
   1255a:	       pea 1 <_start+0x1>
   1255e:	       move.l sp,d0
   12560:	       addq.l #8,d0
   12562:	       move.l d0,-(sp)
   12564:	       jsr 14bce <getValueType>
   1256a:	       lea 12(sp),sp
   1256e:	       tst.w d0
   12570:	   ,-- bne.s 12576 <builtIn_setSpeechSpeed+0x28>
   12572:	   |   moveq #1,d0
   12574:	,--|-- bra.s 125c4 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   12576:	|  '-> moveq #24,d0
   12578:	|      add.l 12(sp),d0
   1257c:	|      move.l d0,-(sp)
   1257e:	|      jsr 15552 <trimStack>
   12584:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   12586:	|      move.l (sp),d0
   12588:	|      move.l d0,-(sp)
   1258a:	|      jsr 17ae0 <__floatsisf>
   12590:	|      addq.l #4,sp
   12592:	|      move.l #1008981770,-(sp)
   12598:	|      move.l d0,-(sp)
   1259a:	|      jsr 17b92 <__mulsf3>
   125a0:	|      addq.l #8,sp
   125a2:	|      move.l d0,1c7fe <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   125a8:	|      moveq #28,d0
   125aa:	|      add.l 12(sp),d0
   125ae:	|      pea 1 <_start+0x1>
   125b2:	|      pea 1 <_start+0x1>
   125b6:	|      move.l d0,-(sp)
   125b8:	|      jsr 154c0 <setVariable>
   125be:	|      lea 12(sp),sp
	return BR_CONTINUE;
   125c2:	|      moveq #2,d0
}
   125c4:	'----> addq.l #4,sp
   125c6:	       rts

000125c8 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   125c8:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   125ca:	       movea.l 12(sp),a0
   125ce:	       move.l 24(a0),d0
   125d2:	       move.l d0,-(sp)
   125d4:	       pea 1 <_start+0x1>
   125d8:	       move.l sp,d0
   125da:	       addq.l #8,d0
   125dc:	       move.l d0,-(sp)
   125de:	       jsr 14bce <getValueType>
   125e4:	       lea 12(sp),sp
   125e8:	       tst.w d0
   125ea:	   ,-- bne.s 125f0 <builtIn_setFontSpacing+0x28>
   125ec:	   |   moveq #1,d0
   125ee:	,--|-- bra.s 12626 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   125f0:	|  '-> move.l (sp),d0
   125f2:	|      move.l d0,d0
   125f4:	|      move.w d0,1cd8c <fontSpace>
	trimStack (&fun -> stack);
   125fa:	|      moveq #24,d0
   125fc:	|      add.l 12(sp),d0
   12600:	|      move.l d0,-(sp)
   12602:	|      jsr 15552 <trimStack>
   12608:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1260a:	|      moveq #28,d0
   1260c:	|      add.l 12(sp),d0
   12610:	|      pea 1 <_start+0x1>
   12614:	|      pea 1 <_start+0x1>
   12618:	|      move.l d0,-(sp)
   1261a:	|      jsr 154c0 <setVariable>
   12620:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12624:	|      moveq #2,d0
}
   12626:	'----> addq.l #4,sp
   12628:	       rts

0001262a <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   1262a:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1262c:	          movea.l 12(sp),a0
   12630:	          move.l 24(a0),d0
   12634:	          move.l d0,-(sp)
   12636:	          pea 1 <_start+0x1>
   1263a:	          move.l sp,d0
   1263c:	          addq.l #8,d0
   1263e:	          move.l d0,-(sp)
   12640:	          jsr 14bce <getValueType>
   12646:	          lea 12(sp),sp
   1264a:	          tst.w d0
   1264c:	      ,-- bne.s 12652 <builtIn_transitionLevel+0x28>
   1264e:	      |   moveq #1,d0
   12650:	,-----|-- bra.s 126a6 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   12652:	|     '-> moveq #24,d0
   12654:	|         add.l 12(sp),d0
   12658:	|         move.l d0,-(sp)
   1265a:	|         jsr 15552 <trimStack>
   12660:	|         addq.l #4,sp

	if (number < 0)
   12662:	|         move.l (sp),d0
   12664:	|     ,-- bpl.s 1266e <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   12666:	|     |   clr.b 1c802 <brightnessLevel>
   1266c:	|  ,--|-- bra.s 1268a <builtIn_transitionLevel+0x60>
	else if (number > 255)
   1266e:	|  |  '-> move.l (sp),d0
   12670:	|  |      cmpi.l #255,d0
   12676:	|  |  ,-- ble.s 12680 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   12678:	|  |  |   st 1c802 <brightnessLevel>
   1267e:	|  +--|-- bra.s 1268a <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   12680:	|  |  '-> move.l (sp),d0
   12682:	|  |      move.l d0,d0
   12684:	|  |      move.b d0,1c802 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   1268a:	|  '----> moveq #28,d0
   1268c:	|         add.l 12(sp),d0
   12690:	|         pea 1 <_start+0x1>
   12694:	|         pea 1 <_start+0x1>
   12698:	|         move.l d0,-(sp)
   1269a:	|         jsr 154c0 <setVariable>
   126a0:	|         lea 12(sp),sp
	return BR_CONTINUE;
   126a4:	|         moveq #2,d0
}
   126a6:	'-------> addq.l #4,sp
   126a8:	          rts

000126aa <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   126aa:	movea.l 8(sp),a0
   126ae:	move.l 24(a0),d0
   126b2:	move.l d0,-(sp)
   126b4:	jsr 1510e <getBoolean>
   126ba:	addq.l #4,sp
   126bc:	move.w d0,1ce2a <captureAllKeys>
	trimStack (&fun -> stack);
   126c2:	moveq #24,d0
   126c4:	add.l 8(sp),d0
   126c8:	move.l d0,-(sp)
   126ca:	jsr 15552 <trimStack>
   126d0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   126d2:	move.w 1ce2a <captureAllKeys>,d0
   126d8:	movea.w d0,a0
   126da:	moveq #28,d0
   126dc:	add.l 8(sp),d0
   126e0:	move.l a0,-(sp)
   126e2:	pea 1 <_start+0x1>
   126e6:	move.l d0,-(sp)
   126e8:	jsr 154c0 <setVariable>
   126ee:	lea 12(sp),sp
	return BR_CONTINUE;
   126f2:	moveq #2,d0
}
   126f4:	rts

000126f6 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   126f6:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   126fa:	       movea.l 20(sp),a0
   126fe:	       move.l 24(a0),d0
   12702:	       move.l d0,-(sp)
   12704:	       pea 1 <_start+0x1>
   12708:	       moveq #12,d0
   1270a:	       add.l sp,d0
   1270c:	       move.l d0,-(sp)
   1270e:	       jsr 14bce <getValueType>
   12714:	       lea 12(sp),sp
   12718:	       tst.w d0
   1271a:	   ,-- bne.s 12722 <builtIn_spinCharacter+0x2c>
   1271c:	   |   moveq #1,d0
   1271e:	,--|-- bra.w 127d2 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12722:	|  '-> moveq #24,d0
   12724:	|      add.l 20(sp),d0
   12728:	|      move.l d0,-(sp)
   1272a:	|      jsr 15552 <trimStack>
   12730:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12732:	|      movea.l 20(sp),a0
   12736:	|      move.l 24(a0),d0
   1273a:	|      move.l d0,-(sp)
   1273c:	|      pea 7 <_start+0x7>
   12740:	|      lea 8(sp),a0
   12744:	|      move.l a0,-(sp)
   12746:	|      jsr 14bce <getValueType>
   1274c:	|      lea 12(sp),sp
   12750:	|      tst.w d0
   12752:	|  ,-- bne.s 12758 <builtIn_spinCharacter+0x62>
   12754:	|  |   moveq #1,d0
   12756:	+--|-- bra.s 127d2 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   12758:	|  '-> moveq #24,d0
   1275a:	|      add.l 20(sp),d0
   1275e:	|      move.l d0,-(sp)
   12760:	|      jsr 15552 <trimStack>
   12766:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12768:	|      move.l (sp),d0
   1276a:	|      move.l d0,-(sp)
   1276c:	|      jsr a974 <findPerson>
   12772:	|      addq.l #4,sp
   12774:	|      move.l d0,8(sp)
	if (thisPerson) {
   12778:	|  ,-- beq.s 127b8 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   1277a:	|  |   move.l 4(sp),d0
   1277e:	|  |   movea.l 8(sp),a0
   12782:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   12786:	|  |   movea.l 8(sp),a0
   1278a:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   12790:	|  |   movea.l 8(sp),a0
   12794:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1279a:	|  |   moveq #28,d0
   1279c:	|  |   add.l 20(sp),d0
   127a0:	|  |   pea 1 <_start+0x1>
   127a4:	|  |   pea 1 <_start+0x1>
   127a8:	|  |   move.l d0,-(sp)
   127aa:	|  |   jsr 154c0 <setVariable>
   127b0:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   127b4:	|  |   moveq #3,d0
   127b6:	+--|-- bra.s 127d2 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   127b8:	|  '-> moveq #28,d0
   127ba:	|      add.l 20(sp),d0
   127be:	|      clr.l -(sp)
   127c0:	|      pea 1 <_start+0x1>
   127c4:	|      move.l d0,-(sp)
   127c6:	|      jsr 154c0 <setVariable>
   127cc:	|      lea 12(sp),sp
		return BR_CONTINUE;
   127d0:	|      moveq #2,d0
	}
}
   127d2:	'----> lea 12(sp),sp
   127d6:	       rts

000127d8 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   127d8:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   127da:	          movea.l 16(sp),a0
   127de:	          move.l 24(a0),d0
   127e2:	          move.l d0,-(sp)
   127e4:	          pea 7 <_start+0x7>
   127e8:	          move.l sp,d0
   127ea:	          addq.l #8,d0
   127ec:	          move.l d0,-(sp)
   127ee:	          jsr 14bce <getValueType>
   127f4:	          lea 12(sp),sp
   127f8:	          tst.w d0
   127fa:	      ,-- bne.s 12800 <builtIn_getCharacterDirection+0x28>
   127fc:	      |   moveq #1,d0
   127fe:	,-----|-- bra.s 1285e <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   12800:	|     '-> moveq #24,d0
   12802:	|         add.l 16(sp),d0
   12806:	|         move.l d0,-(sp)
   12808:	|         jsr 15552 <trimStack>
   1280e:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12810:	|         move.l (sp),d0
   12812:	|         move.l d0,-(sp)
   12814:	|         jsr a974 <findPerson>
   1281a:	|         addq.l #4,sp
   1281c:	|         move.l d0,4(sp)
	if (thisPerson) {
   12820:	|  ,----- beq.s 12844 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   12822:	|  |      movea.l 4(sp),a0
   12826:	|  |      move.l 106(a0),d1
   1282a:	|  |      moveq #28,d0
   1282c:	|  |      add.l 16(sp),d0
   12830:	|  |      move.l d1,-(sp)
   12832:	|  |      pea 1 <_start+0x1>
   12836:	|  |      move.l d0,-(sp)
   12838:	|  |      jsr 154c0 <setVariable>
   1283e:	|  |      lea 12(sp),sp
   12842:	|  |  ,-- bra.s 1285c <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12844:	|  '--|-> moveq #28,d0
   12846:	|     |   add.l 16(sp),d0
   1284a:	|     |   clr.l -(sp)
   1284c:	|     |   pea 1 <_start+0x1>
   12850:	|     |   move.l d0,-(sp)
   12852:	|     |   jsr 154c0 <setVariable>
   12858:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1285c:	|     '-> moveq #2,d0
}
   1285e:	'-------> addq.l #8,sp
   12860:	          rts

00012862 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   12862:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12864:	       movea.l 16(sp),a0
   12868:	       move.l 24(a0),d0
   1286c:	       move.l d0,-(sp)
   1286e:	       pea 7 <_start+0x7>
   12872:	       move.l sp,d0
   12874:	       addq.l #8,d0
   12876:	       move.l d0,-(sp)
   12878:	       jsr 14bce <getValueType>
   1287e:	       lea 12(sp),sp
   12882:	       tst.w d0
   12884:	   ,-- bne.s 1288a <builtIn_isCharacter+0x28>
   12886:	   |   moveq #1,d0
   12888:	,--|-- bra.s 128cc <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   1288a:	|  '-> moveq #24,d0
   1288c:	|      add.l 16(sp),d0
   12890:	|      move.l d0,-(sp)
   12892:	|      jsr 15552 <trimStack>
   12898:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1289a:	|      move.l (sp),d0
   1289c:	|      move.l d0,-(sp)
   1289e:	|      jsr a974 <findPerson>
   128a4:	|      addq.l #4,sp
   128a6:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   128aa:	|      sne d0
   128ac:	|      neg.b d0
   128ae:	|      moveq #0,d1
   128b0:	|      move.b d0,d1
   128b2:	|      moveq #28,d0
   128b4:	|      add.l 16(sp),d0
   128b8:	|      move.l d1,-(sp)
   128ba:	|      pea 1 <_start+0x1>
   128be:	|      move.l d0,-(sp)
   128c0:	|      jsr 154c0 <setVariable>
   128c6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   128ca:	|      moveq #2,d0
}
   128cc:	'----> addq.l #8,sp
   128ce:	       rts

000128d0 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   128d0:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   128d2:	          movea.l 16(sp),a0
   128d6:	          move.l 24(a0),d0
   128da:	          move.l d0,-(sp)
   128dc:	          pea 7 <_start+0x7>
   128e0:	          move.l sp,d0
   128e2:	          addq.l #8,d0
   128e4:	          move.l d0,-(sp)
   128e6:	          jsr 14bce <getValueType>
   128ec:	          lea 12(sp),sp
   128f0:	          tst.w d0
   128f2:	      ,-- bne.s 128f8 <builtIn_normalCharacter+0x28>
   128f4:	      |   moveq #1,d0
   128f6:	,-----|-- bra.s 12974 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   128f8:	|     '-> moveq #24,d0
   128fa:	|         add.l 16(sp),d0
   128fe:	|         move.l d0,-(sp)
   12900:	|         jsr 15552 <trimStack>
   12906:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12908:	|         move.l (sp),d0
   1290a:	|         move.l d0,-(sp)
   1290c:	|         jsr a974 <findPerson>
   12912:	|         addq.l #4,sp
   12914:	|         move.l d0,4(sp)
	if (thisPerson)
   12918:	|  ,----- beq.s 1295a <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   1291a:	|  |      movea.l 4(sp),a0
   1291e:	|  |      movea.l 80(a0),a0
   12922:	|  |      move.l (a0),d1
   12924:	|  |      movea.l 4(sp),a0
   12928:	|  |      move.l 106(a0),d0
   1292c:	|  |      add.l d0,d0
   1292e:	|  |      add.l d0,d0
   12930:	|  |      movea.l d1,a0
   12932:	|  |      adda.l d0,a0
   12934:	|  |      move.l (a0),d0
   12936:	|  |      movea.l 4(sp),a0
   1293a:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1293e:	|  |      moveq #28,d0
   12940:	|  |      add.l 16(sp),d0
   12944:	|  |      pea 1 <_start+0x1>
   12948:	|  |      pea 1 <_start+0x1>
   1294c:	|  |      move.l d0,-(sp)
   1294e:	|  |      jsr 154c0 <setVariable>
   12954:	|  |      lea 12(sp),sp
   12958:	|  |  ,-- bra.s 12972 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1295a:	|  '--|-> moveq #28,d0
   1295c:	|     |   add.l 16(sp),d0
   12960:	|     |   clr.l -(sp)
   12962:	|     |   pea 1 <_start+0x1>
   12966:	|     |   move.l d0,-(sp)
   12968:	|     |   jsr 154c0 <setVariable>
   1296e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12972:	|     '-> moveq #2,d0
}
   12974:	'-------> addq.l #8,sp
   12976:	          rts

00012978 <builtIn_isMoving>:

builtIn(isMoving)
{
   12978:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1297a:	          movea.l 16(sp),a0
   1297e:	          move.l 24(a0),d0
   12982:	          move.l d0,-(sp)
   12984:	          pea 7 <_start+0x7>
   12988:	          move.l sp,d0
   1298a:	          addq.l #8,d0
   1298c:	          move.l d0,-(sp)
   1298e:	          jsr 14bce <getValueType>
   12994:	          lea 12(sp),sp
   12998:	          tst.w d0
   1299a:	      ,-- bne.s 129a0 <builtIn_isMoving+0x28>
   1299c:	      |   moveq #1,d0
   1299e:	,-----|-- bra.s 12a00 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   129a0:	|     '-> moveq #24,d0
   129a2:	|         add.l 16(sp),d0
   129a6:	|         move.l d0,-(sp)
   129a8:	|         jsr 15552 <trimStack>
   129ae:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   129b0:	|         move.l (sp),d0
   129b2:	|         move.l d0,-(sp)
   129b4:	|         jsr a974 <findPerson>
   129ba:	|         addq.l #4,sp
   129bc:	|         move.l d0,4(sp)
	if (thisPerson)
   129c0:	|  ,----- beq.s 129e6 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   129c2:	|  |      movea.l 4(sp),a0
   129c6:	|  |      move.w 64(a0),d0
   129ca:	|  |      movea.w d0,a0
   129cc:	|  |      moveq #28,d0
   129ce:	|  |      add.l 16(sp),d0
   129d2:	|  |      move.l a0,-(sp)
   129d4:	|  |      pea 1 <_start+0x1>
   129d8:	|  |      move.l d0,-(sp)
   129da:	|  |      jsr 154c0 <setVariable>
   129e0:	|  |      lea 12(sp),sp
   129e4:	|  |  ,-- bra.s 129fe <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   129e6:	|  '--|-> moveq #28,d0
   129e8:	|     |   add.l 16(sp),d0
   129ec:	|     |   clr.l -(sp)
   129ee:	|     |   pea 1 <_start+0x1>
   129f2:	|     |   move.l d0,-(sp)
   129f4:	|     |   jsr 154c0 <setVariable>
   129fa:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   129fe:	|     '-> moveq #2,d0
}
   12a00:	'-------> addq.l #8,sp
   12a02:	          rts

00012a04 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12a04:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a08:	          movea.l 20(sp),a0
   12a0c:	          move.l 24(a0),d0
   12a10:	          move.l d0,-(sp)
   12a12:	          pea 7 <_start+0x7>
   12a16:	          lea 8(sp),a0
   12a1a:	          move.l a0,-(sp)
   12a1c:	          jsr 14bce <getValueType>
   12a22:	          lea 12(sp),sp
   12a26:	          tst.w d0
   12a28:	      ,-- bne.s 12a30 <builtIn_fetchEvent+0x2c>
   12a2a:	      |   moveq #1,d0
   12a2c:	,-----|-- bra.w 12ac4 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12a30:	|     '-> moveq #24,d0
   12a32:	|         add.l 20(sp),d0
   12a36:	|         move.l d0,-(sp)
   12a38:	|         jsr 15552 <trimStack>
   12a3e:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a40:	|         movea.l 20(sp),a0
   12a44:	|         move.l 24(a0),d0
   12a48:	|         move.l d0,-(sp)
   12a4a:	|         pea 7 <_start+0x7>
   12a4e:	|         moveq #12,d0
   12a50:	|         add.l sp,d0
   12a52:	|         move.l d0,-(sp)
   12a54:	|         jsr 14bce <getValueType>
   12a5a:	|         lea 12(sp),sp
   12a5e:	|         tst.w d0
   12a60:	|     ,-- bne.s 12a66 <builtIn_fetchEvent+0x62>
   12a62:	|     |   moveq #1,d0
   12a64:	+-----|-- bra.s 12ac4 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   12a66:	|     '-> moveq #24,d0
   12a68:	|         add.l 20(sp),d0
   12a6c:	|         move.l d0,-(sp)
   12a6e:	|         jsr 15552 <trimStack>
   12a74:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12a76:	|         move.l (sp),d1
   12a78:	|         move.l 4(sp),d0
   12a7c:	|         move.l d1,-(sp)
   12a7e:	|         move.l d0,-(sp)
   12a80:	|         jsr d916 <getCombinationFunction>
   12a86:	|         addq.l #8,sp
   12a88:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   12a8c:	|  ,----- beq.s 12aaa <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   12a8e:	|  |      moveq #28,d0
   12a90:	|  |      add.l 20(sp),d0
   12a94:	|  |      move.l 8(sp),-(sp)
   12a98:	|  |      pea 2 <_start+0x2>
   12a9c:	|  |      move.l d0,-(sp)
   12a9e:	|  |      jsr 154c0 <setVariable>
   12aa4:	|  |      lea 12(sp),sp
   12aa8:	|  |  ,-- bra.s 12ac2 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12aaa:	|  '--|-> moveq #28,d0
   12aac:	|     |   add.l 20(sp),d0
   12ab0:	|     |   clr.l -(sp)
   12ab2:	|     |   pea 1 <_start+0x1>
   12ab6:	|     |   move.l d0,-(sp)
   12ab8:	|     |   jsr 154c0 <setVariable>
   12abe:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12ac2:	|     '-> moveq #2,d0
}
   12ac4:	'-------> lea 12(sp),sp
   12ac8:	          rts

00012aca <builtIn_deleteFile>:

builtIn(deleteFile)
{
   12aca:	       lea -24(sp),sp
   12ace:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   12ad0:	       movea.l 36(sp),a0
   12ad4:	       move.l 24(a0),d0
   12ad8:	       move.l d0,-(sp)
   12ada:	       jsr 151a4 <getTextFromAnyVar>
   12ae0:	       addq.l #4,sp
   12ae2:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12ae6:	       moveq #24,d0
   12ae8:	       add.l 36(sp),d0
   12aec:	       move.l d0,-(sp)
   12aee:	       jsr 15552 <trimStack>
   12af4:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12af6:	       move.l 24(sp),-(sp)
   12afa:	       jsr 2fe <encodeFilename>
   12b00:	       addq.l #4,sp
   12b02:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12b06:	       move.l 24(sp),16(sp)
   12b0c:	       move.l 1ce8a <SysBase>,d0
   12b12:	       movea.l d0,a6
   12b14:	       movea.l 16(sp),a1
   12b18:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12b1c:	       move.l 20(sp),-(sp)
   12b20:	       jsr e6ce <failSecurityCheck>
   12b26:	       addq.l #4,sp
   12b28:	       tst.w d0
   12b2a:	   ,-- beq.s 12b30 <builtIn_deleteFile+0x66>
   12b2c:	   |   moveq #1,d0
   12b2e:	,--|-- bra.s 12b7e <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   12b30:	|  '-> move.l 20(sp),12(sp)
   12b36:	|      move.l 1ce92 <DOSBase>,d0
   12b3c:	|      movea.l d0,a6
   12b3e:	|      move.l 12(sp),d1
   12b42:	|      jsr -72(a6)
   12b46:	|      move.l d0,8(sp)
   12b4a:	|      move.l 8(sp),d1
   12b4e:	|      moveq #28,d0
   12b50:	|      add.l 36(sp),d0
   12b54:	|      move.l d1,-(sp)
   12b56:	|      pea 1 <_start+0x1>
   12b5a:	|      move.l d0,-(sp)
   12b5c:	|      jsr 154c0 <setVariable>
   12b62:	|      lea 12(sp),sp
    FreeVec(nam);
   12b66:	|      move.l 20(sp),4(sp)
   12b6c:	|      move.l 1ce8a <SysBase>,d0
   12b72:	|      movea.l d0,a6
   12b74:	|      movea.l 4(sp),a1
   12b78:	|      jsr -690(a6)

    return BR_CONTINUE;
   12b7c:	|      moveq #2,d0
}
   12b7e:	'----> movea.l (sp)+,a6
   12b80:	       lea 24(sp),sp
   12b84:	       rts

00012b86 <builtIn_renameFile>:

builtIn(renameFile)
{
   12b86:	       lea -40(sp),sp
   12b8a:	       move.l a6,-(sp)
   12b8c:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12b8e:	       movea.l 56(sp),a0
   12b92:	       move.l 24(a0),d0
   12b96:	       move.l d0,-(sp)
   12b98:	       jsr 151a4 <getTextFromAnyVar>
   12b9e:	       addq.l #4,sp
   12ba0:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   12ba4:	       move.l 44(sp),-(sp)
   12ba8:	       jsr 2fe <encodeFilename>
   12bae:	       addq.l #4,sp
   12bb0:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   12bb4:	       moveq #24,d0
   12bb6:	       add.l 56(sp),d0
   12bba:	       move.l d0,-(sp)
   12bbc:	       jsr 15552 <trimStack>
   12bc2:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   12bc4:	       move.l 40(sp),-(sp)
   12bc8:	       jsr e6ce <failSecurityCheck>
   12bce:	       addq.l #4,sp
   12bd0:	       tst.w d0
   12bd2:	   ,-- beq.s 12bda <builtIn_renameFile+0x54>
   12bd4:	   |   moveq #1,d0
   12bd6:	,--|-- bra.w 12cc0 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12bda:	|  '-> move.l 44(sp),36(sp)
   12be0:	|      move.l 1ce8a <SysBase>,d0
   12be6:	|      movea.l d0,a6
   12be8:	|      movea.l 36(sp),a1
   12bec:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12bf0:	|      movea.l 56(sp),a0
   12bf4:	|      move.l 24(a0),d0
   12bf8:	|      move.l d0,-(sp)
   12bfa:	|      jsr 151a4 <getTextFromAnyVar>
   12c00:	|      addq.l #4,sp
   12c02:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12c06:	|      move.l 44(sp),-(sp)
   12c0a:	|      jsr 2fe <encodeFilename>
   12c10:	|      addq.l #4,sp
   12c12:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12c16:	|      moveq #24,d0
   12c18:	|      add.l 56(sp),d0
   12c1c:	|      move.l d0,-(sp)
   12c1e:	|      jsr 15552 <trimStack>
   12c24:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12c26:	|      move.l 32(sp),-(sp)
   12c2a:	|      jsr e6ce <failSecurityCheck>
   12c30:	|      addq.l #4,sp
   12c32:	|      tst.w d0
   12c34:	|  ,-- beq.s 12c3c <builtIn_renameFile+0xb6>
   12c36:	|  |   moveq #1,d0
   12c38:	+--|-- bra.w 12cc0 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12c3c:	|  '-> move.l 44(sp),28(sp)
   12c42:	|      move.l 1ce8a <SysBase>,d0
   12c48:	|      movea.l d0,a6
   12c4a:	|      movea.l 28(sp),a1
   12c4e:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12c52:	|      move.l 32(sp),24(sp)
   12c58:	|      move.l 40(sp),20(sp)
   12c5e:	|      move.l 1ce92 <DOSBase>,d0
   12c64:	|      movea.l d0,a6
   12c66:	|      move.l 24(sp),d1
   12c6a:	|      move.l 20(sp),d2
   12c6e:	|      jsr -78(a6)
   12c72:	|      move.l d0,16(sp)
   12c76:	|      move.l 16(sp),d1
   12c7a:	|      moveq #28,d0
   12c7c:	|      add.l 56(sp),d0
   12c80:	|      move.l d1,-(sp)
   12c82:	|      pea 1 <_start+0x1>
   12c86:	|      move.l d0,-(sp)
   12c88:	|      jsr 154c0 <setVariable>
   12c8e:	|      lea 12(sp),sp
	FreeVec(nam);
   12c92:	|      move.l 32(sp),12(sp)
   12c98:	|      move.l 1ce8a <SysBase>,d0
   12c9e:	|      movea.l d0,a6
   12ca0:	|      movea.l 12(sp),a1
   12ca4:	|      jsr -690(a6)
	FreeVec(newnam);
   12ca8:	|      move.l 40(sp),8(sp)
   12cae:	|      move.l 1ce8a <SysBase>,d0
   12cb4:	|      movea.l d0,a6
   12cb6:	|      movea.l 8(sp),a1
   12cba:	|      jsr -690(a6)

	return BR_CONTINUE;
   12cbe:	|      moveq #2,d0
}
   12cc0:	'----> move.l (sp)+,d2
   12cc2:	       movea.l (sp)+,a6
   12cc4:	       lea 40(sp),sp
   12cc8:	       rts

00012cca <builtIn_cacheSound>:

builtIn(cacheSound)
{
   12cca:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12ccc:	       movea.l 12(sp),a0
   12cd0:	       move.l 24(a0),d0
   12cd4:	       move.l d0,-(sp)
   12cd6:	       pea 5 <_start+0x5>
   12cda:	       move.l sp,d0
   12cdc:	       addq.l #8,d0
   12cde:	       move.l d0,-(sp)
   12ce0:	       jsr 14bce <getValueType>
   12ce6:	       lea 12(sp),sp
   12cea:	       tst.w d0
   12cec:	   ,-- bne.s 12cf2 <builtIn_cacheSound+0x28>
   12cee:	   |   moveq #1,d0
   12cf0:	,--|-- bra.s 12d1a <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12cf2:	|  '-> moveq #24,d0
   12cf4:	|      add.l 12(sp),d0
   12cf8:	|      move.l d0,-(sp)
   12cfa:	|      jsr 15552 <trimStack>
   12d00:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12d02:	|      move.l (sp),d0
   12d04:	|      move.l d0,-(sp)
   12d06:	|      jsr d50c <cacheSound>
   12d0c:	|      addq.l #4,sp
   12d0e:	|      moveq #-1,d1
   12d10:	|      cmp.l d0,d1
   12d12:	|  ,-- bne.s 12d18 <builtIn_cacheSound+0x4e>
   12d14:	|  |   moveq #1,d0
   12d16:	+--|-- bra.s 12d1a <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12d18:	|  '-> moveq #2,d0
}
   12d1a:	'----> addq.l #4,sp
   12d1c:	       rts

00012d1e <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12d1e:	pea 1a0f5 <PutChar+0x1fa5>
   12d24:	jsr 176ae <KPrintF>
   12d2a:	addq.l #4,sp
	return BR_CONTINUE;
   12d2c:	moveq #2,d0
}
   12d2e:	rts

00012d30 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12d30:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d34:	          movea.l 20(sp),a0
   12d38:	          move.l 24(a0),d0
   12d3c:	          move.l d0,-(sp)
   12d3e:	          pea 1 <_start+0x1>
   12d42:	          moveq #12,d0
   12d44:	          add.l sp,d0
   12d46:	          move.l d0,-(sp)
   12d48:	          jsr 14bce <getValueType>
   12d4e:	          lea 12(sp),sp
   12d52:	          tst.w d0
   12d54:	      ,-- bne.s 12d5c <builtIn_setCharacterSpinSpeed+0x2c>
   12d56:	      |   moveq #1,d0
   12d58:	,-----|-- bra.w 12df6 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12d5c:	|     '-> moveq #24,d0
   12d5e:	|         add.l 20(sp),d0
   12d62:	|         move.l d0,-(sp)
   12d64:	|         jsr 15552 <trimStack>
   12d6a:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12d6c:	|         movea.l 20(sp),a0
   12d70:	|         move.l 24(a0),d0
   12d74:	|         move.l d0,-(sp)
   12d76:	|         pea 7 <_start+0x7>
   12d7a:	|         lea 8(sp),a0
   12d7e:	|         move.l a0,-(sp)
   12d80:	|         jsr 14bce <getValueType>
   12d86:	|         lea 12(sp),sp
   12d8a:	|         tst.w d0
   12d8c:	|     ,-- bne.s 12d92 <builtIn_setCharacterSpinSpeed+0x62>
   12d8e:	|     |   moveq #1,d0
   12d90:	+-----|-- bra.s 12df6 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12d92:	|     '-> moveq #24,d0
   12d94:	|         add.l 20(sp),d0
   12d98:	|         move.l d0,-(sp)
   12d9a:	|         jsr 15552 <trimStack>
   12da0:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12da2:	|         move.l (sp),d0
   12da4:	|         move.l d0,-(sp)
   12da6:	|         jsr a974 <findPerson>
   12dac:	|         addq.l #4,sp
   12dae:	|         move.l d0,8(sp)

	if (thisPerson) {
   12db2:	|  ,----- beq.s 12ddc <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12db4:	|  |      move.l 4(sp),d0
   12db8:	|  |      movea.l 8(sp),a0
   12dbc:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12dc0:	|  |      moveq #28,d0
   12dc2:	|  |      add.l 20(sp),d0
   12dc6:	|  |      pea 1 <_start+0x1>
   12dca:	|  |      pea 1 <_start+0x1>
   12dce:	|  |      move.l d0,-(sp)
   12dd0:	|  |      jsr 154c0 <setVariable>
   12dd6:	|  |      lea 12(sp),sp
   12dda:	|  |  ,-- bra.s 12df4 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12ddc:	|  '--|-> moveq #28,d0
   12dde:	|     |   add.l 20(sp),d0
   12de2:	|     |   clr.l -(sp)
   12de4:	|     |   pea 1 <_start+0x1>
   12de8:	|     |   move.l d0,-(sp)
   12dea:	|     |   jsr 154c0 <setVariable>
   12df0:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12df4:	|     '-> moveq #2,d0
}
   12df6:	'-------> lea 12(sp),sp
   12dfa:	          rts

00012dfc <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12dfc:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12e00:	          movea.l 20(sp),a0
   12e04:	          move.l 24(a0),d0
   12e08:	          move.l d0,-(sp)
   12e0a:	          pea 1 <_start+0x1>
   12e0e:	          moveq #12,d0
   12e10:	          add.l sp,d0
   12e12:	          move.l d0,-(sp)
   12e14:	          jsr 14bce <getValueType>
   12e1a:	          lea 12(sp),sp
   12e1e:	          tst.w d0
   12e20:	      ,-- bne.s 12e28 <builtIn_setCharacterAngleOffset+0x2c>
   12e22:	      |   moveq #1,d0
   12e24:	,-----|-- bra.w 12ec2 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12e28:	|     '-> moveq #24,d0
   12e2a:	|         add.l 20(sp),d0
   12e2e:	|         move.l d0,-(sp)
   12e30:	|         jsr 15552 <trimStack>
   12e36:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12e38:	|         movea.l 20(sp),a0
   12e3c:	|         move.l 24(a0),d0
   12e40:	|         move.l d0,-(sp)
   12e42:	|         pea 7 <_start+0x7>
   12e46:	|         lea 8(sp),a0
   12e4a:	|         move.l a0,-(sp)
   12e4c:	|         jsr 14bce <getValueType>
   12e52:	|         lea 12(sp),sp
   12e56:	|         tst.w d0
   12e58:	|     ,-- bne.s 12e5e <builtIn_setCharacterAngleOffset+0x62>
   12e5a:	|     |   moveq #1,d0
   12e5c:	+-----|-- bra.s 12ec2 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12e5e:	|     '-> moveq #24,d0
   12e60:	|         add.l 20(sp),d0
   12e64:	|         move.l d0,-(sp)
   12e66:	|         jsr 15552 <trimStack>
   12e6c:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12e6e:	|         move.l (sp),d0
   12e70:	|         move.l d0,-(sp)
   12e72:	|         jsr a974 <findPerson>
   12e78:	|         addq.l #4,sp
   12e7a:	|         move.l d0,8(sp)

	if (thisPerson) {
   12e7e:	|  ,----- beq.s 12ea8 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12e80:	|  |      move.l 4(sp),d0
   12e84:	|  |      movea.l 8(sp),a0
   12e88:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12e8c:	|  |      moveq #28,d0
   12e8e:	|  |      add.l 20(sp),d0
   12e92:	|  |      pea 1 <_start+0x1>
   12e96:	|  |      pea 1 <_start+0x1>
   12e9a:	|  |      move.l d0,-(sp)
   12e9c:	|  |      jsr 154c0 <setVariable>
   12ea2:	|  |      lea 12(sp),sp
   12ea6:	|  |  ,-- bra.s 12ec0 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12ea8:	|  '--|-> moveq #28,d0
   12eaa:	|     |   add.l 20(sp),d0
   12eae:	|     |   clr.l -(sp)
   12eb0:	|     |   pea 1 <_start+0x1>
   12eb4:	|     |   move.l d0,-(sp)
   12eb6:	|     |   jsr 154c0 <setVariable>
   12ebc:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12ec0:	|     '-> moveq #2,d0
}
   12ec2:	'-------> lea 12(sp),sp
   12ec6:	          rts

00012ec8 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12ec8:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12eca:	       movea.l 12(sp),a0
   12ece:	       move.l 24(a0),d0
   12ed2:	       move.l d0,-(sp)
   12ed4:	       pea 1 <_start+0x1>
   12ed8:	       move.l sp,d0
   12eda:	       addq.l #8,d0
   12edc:	       move.l d0,-(sp)
   12ede:	       jsr 14bce <getValueType>
   12ee4:	       lea 12(sp),sp
   12ee8:	       tst.w d0
   12eea:	   ,-- bne.s 12ef0 <builtIn_transitionMode+0x28>
   12eec:	   |   moveq #1,d0
   12eee:	,--|-- bra.s 12f26 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12ef0:	|  '-> move.l (sp),d0
   12ef2:	|      move.l d0,d0
   12ef4:	|      move.b d0,1cd62 <fadeMode>
	trimStack (&fun -> stack);
   12efa:	|      moveq #24,d0
   12efc:	|      add.l 12(sp),d0
   12f00:	|      move.l d0,-(sp)
   12f02:	|      jsr 15552 <trimStack>
   12f08:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12f0a:	|      moveq #28,d0
   12f0c:	|      add.l 12(sp),d0
   12f10:	|      pea 1 <_start+0x1>
   12f14:	|      pea 1 <_start+0x1>
   12f18:	|      move.l d0,-(sp)
   12f1a:	|      jsr 154c0 <setVariable>
   12f20:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12f24:	|      moveq #2,d0
}
   12f26:	'----> addq.l #4,sp
   12f28:	       rts

00012f2a <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12f2a:	moveq #24,d0
   12f2c:	add.l 8(sp),d0
   12f30:	move.l d0,-(sp)
   12f32:	jsr 15552 <trimStack>
   12f38:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12f3a:	moveq #28,d0
   12f3c:	add.l 8(sp),d0
   12f40:	pea 1 <_start+0x1>
   12f44:	pea 1 <_start+0x1>
   12f48:	move.l d0,-(sp)
   12f4a:	jsr 154c0 <setVariable>
   12f50:	lea 12(sp),sp
	return BR_CONTINUE;
   12f54:	moveq #2,d0
}
   12f56:	rts

00012f58 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12f58:	pea 1a11f <PutChar+0x1fcf>
   12f5e:	jsr 176ae <KPrintF>
   12f64:	addq.l #4,sp
	return BR_CONTINUE;
   12f66:	moveq #2,d0
}
   12f68:	rts

00012f6a <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12f6a:	       lea -16(sp),sp
   12f6e:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12f70:	       movea.l 28(sp),a0
   12f74:	       move.l 24(a0),d0
   12f78:	       move.l d0,-(sp)
   12f7a:	       jsr 151a4 <getTextFromAnyVar>
   12f80:	       addq.l #4,sp
   12f82:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12f86:	   ,-- bne.s 12f8e <builtIn_saveCustomData+0x24>
   12f88:	   |   moveq #1,d0
   12f8a:	,--|-- bra.w 13040 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12f8e:	|  '-> move.l 16(sp),-(sp)
   12f92:	|      jsr 2fe <encodeFilename>
   12f98:	|      addq.l #4,sp
   12f9a:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12f9e:	|      move.l 16(sp),8(sp)
   12fa4:	|      move.l 1ce8a <SysBase>,d0
   12faa:	|      movea.l d0,a6
   12fac:	|      movea.l 8(sp),a1
   12fb0:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12fb4:	|      move.l 12(sp),-(sp)
   12fb8:	|      jsr e6ce <failSecurityCheck>
   12fbe:	|      addq.l #4,sp
   12fc0:	|      tst.w d0
   12fc2:	|  ,-- beq.s 12fc8 <builtIn_saveCustomData+0x5e>
   12fc4:	|  |   moveq #1,d0
   12fc6:	+--|-- bra.s 13040 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12fc8:	|  '-> moveq #24,d0
   12fca:	|      add.l 28(sp),d0
   12fce:	|      move.l d0,-(sp)
   12fd0:	|      jsr 15552 <trimStack>
   12fd6:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12fd8:	|      movea.l 28(sp),a0
   12fdc:	|      movea.l 24(a0),a0
   12fe0:	|      move.l (a0),d0
   12fe2:	|      moveq #6,d1
   12fe4:	|      cmp.l d0,d1
   12fe6:	|  ,-- beq.s 12ffa <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12fe8:	|  |   pea 1a14c <PutChar+0x1ffc>
   12fee:	|  |   jsr 176ae <KPrintF>
   12ff4:	|  |   addq.l #4,sp
		return BR_ERROR;
   12ff6:	|  |   moveq #1,d0
   12ff8:	+--|-- bra.s 13040 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12ffa:	|  '-> movea.l 28(sp),a0
   12ffe:	|      move.l 24(a0),d0
   13002:	|      move.l d0,-(sp)
   13004:	|      move.l 16(sp),-(sp)
   13008:	|      jsr e31e <stackToFile>
   1300e:	|      addq.l #8,sp
   13010:	|      tst.w d0
   13012:	|  ,-- bne.s 13018 <builtIn_saveCustomData+0xae>
   13014:	|  |   moveq #1,d0
   13016:	+--|-- bra.s 13040 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   13018:	|  '-> moveq #24,d0
   1301a:	|      add.l 28(sp),d0
   1301e:	|      move.l d0,-(sp)
   13020:	|      jsr 15552 <trimStack>
   13026:	|      addq.l #4,sp
	FreeVec(fileName);
   13028:	|      move.l 12(sp),4(sp)
   1302e:	|      move.l 1ce8a <SysBase>,d0
   13034:	|      movea.l d0,a6
   13036:	|      movea.l 4(sp),a1
   1303a:	|      jsr -690(a6)
	return BR_CONTINUE;
   1303e:	|      moveq #2,d0
}
   13040:	'----> movea.l (sp)+,a6
   13042:	       lea 16(sp),sp
   13046:	       rts

00013048 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   13048:	       lea -28(sp),sp
   1304c:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   1304e:	       movea.l 40(sp),a0
   13052:	       move.l 24(a0),d0
   13056:	       move.l d0,-(sp)
   13058:	       jsr 151a4 <getTextFromAnyVar>
   1305e:	       addq.l #4,sp
   13060:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   13064:	   ,-- bne.s 1306c <builtIn_loadCustomData+0x24>
   13066:	   |   moveq #1,d0
   13068:	,--|-- bra.w 13168 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   1306c:	|  '-> move.l 28(sp),-(sp)
   13070:	|      jsr 2fe <encodeFilename>
   13076:	|      addq.l #4,sp
   13078:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   1307c:	|      move.l 28(sp),20(sp)
   13082:	|      move.l 1ce8a <SysBase>,d0
   13088:	|      movea.l d0,a6
   1308a:	|      movea.l 20(sp),a1
   1308e:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   13092:	|      move.l 24(sp),-(sp)
   13096:	|      jsr e6ce <failSecurityCheck>
   1309c:	|      addq.l #4,sp
   1309e:	|      tst.w d0
   130a0:	|  ,-- beq.s 130a8 <builtIn_loadCustomData+0x60>
   130a2:	|  |   moveq #1,d0
   130a4:	+--|-- bra.w 13168 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   130a8:	|  '-> moveq #24,d0
   130aa:	|      add.l 40(sp),d0
   130ae:	|      move.l d0,-(sp)
   130b0:	|      jsr 15552 <trimStack>
   130b6:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   130b8:	|      moveq #28,d0
   130ba:	|      add.l 40(sp),d0
   130be:	|      move.l d0,-(sp)
   130c0:	|      jsr 14e1c <unlinkVar>
   130c6:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   130c8:	|      movea.l 40(sp),a0
   130cc:	|      moveq #6,d0
   130ce:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   130d2:	|      moveq #12,d0
   130d4:	|      move.l d0,16(sp)
   130d8:	|      clr.l 12(sp)
   130dc:	|      move.l 1ce8a <SysBase>,d0
   130e2:	|      movea.l d0,a6
   130e4:	|      move.l 16(sp),d0
   130e8:	|      move.l 12(sp),d1
   130ec:	|      jsr -684(a6)
   130f0:	|      move.l d0,8(sp)
   130f4:	|      move.l 8(sp),d0
   130f8:	|      movea.l 40(sp),a0
   130fc:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   13100:	|      movea.l 40(sp),a0
   13104:	|      move.l 32(a0),d0
   13108:	|  ,-- bne.s 1310e <builtIn_loadCustomData+0xc6>
   1310a:	|  |   moveq #1,d0
   1310c:	+--|-- bra.s 13168 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   1310e:	|  '-> movea.l 40(sp),a0
   13112:	|      movea.l 32(a0),a0
   13116:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   13118:	|      movea.l 40(sp),a0
   1311c:	|      movea.l 32(a0),a0
   13120:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   13124:	|      movea.l 40(sp),a0
   13128:	|      movea.l 32(a0),a0
   1312c:	|      moveq #1,d0
   1312e:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   13132:	|      movea.l 40(sp),a0
   13136:	|      move.l 32(a0),d0
   1313a:	|      move.l d0,-(sp)
   1313c:	|      move.l 28(sp),-(sp)
   13140:	|      jsr dd58 <fileToStack>
   13146:	|      addq.l #8,sp
   13148:	|      tst.w d0
   1314a:	|  ,-- bne.s 13150 <builtIn_loadCustomData+0x108>
   1314c:	|  |   moveq #1,d0
   1314e:	+--|-- bra.s 13168 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   13150:	|  '-> move.l 24(sp),4(sp)
   13156:	|      move.l 1ce8a <SysBase>,d0
   1315c:	|      movea.l d0,a6
   1315e:	|      movea.l 4(sp),a1
   13162:	|      jsr -690(a6)
	return BR_CONTINUE;
   13166:	|      moveq #2,d0
}
   13168:	'----> movea.l (sp)+,a6
   1316a:	       lea 28(sp),sp
   1316e:	       rts

00013170 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   13170:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13172:	       movea.l 12(sp),a0
   13176:	       move.l 24(a0),d0
   1317a:	       move.l d0,-(sp)
   1317c:	       pea 1 <_start+0x1>
   13180:	       move.l sp,d0
   13182:	       addq.l #8,d0
   13184:	       move.l d0,-(sp)
   13186:	       jsr 14bce <getValueType>
   1318c:	       lea 12(sp),sp
   13190:	       tst.w d0
   13192:	   ,-- bne.s 13198 <builtIn_setCustomEncoding+0x28>
   13194:	   |   moveq #1,d0
   13196:	,--|-- bra.s 131ce <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   13198:	|  '-> move.l (sp),d0
   1319a:	|      move.l d0,d0
   1319c:	|      move.w d0,1cf3e <saveEncoding>
	trimStack (&fun -> stack);
   131a2:	|      moveq #24,d0
   131a4:	|      add.l 12(sp),d0
   131a8:	|      move.l d0,-(sp)
   131aa:	|      jsr 15552 <trimStack>
   131b0:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   131b2:	|      moveq #28,d0
   131b4:	|      add.l 12(sp),d0
   131b8:	|      pea 1 <_start+0x1>
   131bc:	|      pea 1 <_start+0x1>
   131c0:	|      move.l d0,-(sp)
   131c2:	|      jsr 154c0 <setVariable>
   131c8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   131cc:	|      moveq #2,d0
}
   131ce:	'----> addq.l #4,sp
   131d0:	       rts

000131d2 <builtIn_freeSound>:

builtIn(freeSound)
{
   131d2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   131d4:	       movea.l 12(sp),a0
   131d8:	       move.l 24(a0),d0
   131dc:	       move.l d0,-(sp)
   131de:	       pea 5 <_start+0x5>
   131e2:	       move.l sp,d0
   131e4:	       addq.l #8,d0
   131e6:	       move.l d0,-(sp)
   131e8:	       jsr 14bce <getValueType>
   131ee:	       lea 12(sp),sp
   131f2:	       tst.w d0
   131f4:	   ,-- bne.s 131fa <builtIn_freeSound+0x28>
   131f6:	   |   moveq #1,d0
   131f8:	,--|-- bra.s 13218 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   131fa:	|  '-> moveq #24,d0
   131fc:	|      add.l 12(sp),d0
   13200:	|      move.l d0,-(sp)
   13202:	|      jsr 15552 <trimStack>
   13208:	|      addq.l #4,sp
	huntKillFreeSound (v);
   1320a:	|      move.l (sp),d0
   1320c:	|      move.l d0,-(sp)
   1320e:	|      jsr d510 <huntKillFreeSound>
   13214:	|      addq.l #4,sp
	return BR_CONTINUE;
   13216:	|      moveq #2,d0
}
   13218:	'----> addq.l #4,sp
   1321a:	       rts

0001321c <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   1321c:	       lea -12(sp),sp
   13220:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13222:	       movea.l 24(sp),a0
   13226:	       move.l 24(a0),d0
   1322a:	       move.l d0,-(sp)
   1322c:	       pea 1 <_start+0x1>
   13230:	       moveq #16,d0
   13232:	       add.l sp,d0
   13234:	       move.l d0,-(sp)
   13236:	       jsr 14bce <getValueType>
   1323c:	       lea 12(sp),sp
   13240:	       tst.w d0
   13242:	   ,-- bne.s 1324a <builtIn_parallaxAdd+0x2e>
   13244:	   |   moveq #1,d0
   13246:	,--|-- bra.w 1331e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1324a:	|  '-> moveq #24,d0
   1324c:	|      add.l 24(sp),d0
   13250:	|      move.l d0,-(sp)
   13252:	|      jsr 15552 <trimStack>
   13258:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1325a:	|      movea.l 24(sp),a0
   1325e:	|      move.l 24(a0),d0
   13262:	|      move.l d0,-(sp)
   13264:	|      pea 1 <_start+0x1>
   13268:	|      moveq #20,d0
   1326a:	|      add.l sp,d0
   1326c:	|      move.l d0,-(sp)
   1326e:	|      jsr 14bce <getValueType>
   13274:	|      lea 12(sp),sp
   13278:	|      tst.w d0
   1327a:	|  ,-- bne.s 13282 <builtIn_parallaxAdd+0x66>
   1327c:	|  |   moveq #1,d0
   1327e:	+--|-- bra.w 1331e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   13282:	|  '-> moveq #24,d0
   13284:	|      add.l 24(sp),d0
   13288:	|      move.l d0,-(sp)
   1328a:	|      jsr 15552 <trimStack>
   13290:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   13292:	|      movea.l 24(sp),a0
   13296:	|      move.l 24(a0),d0
   1329a:	|      move.l d0,-(sp)
   1329c:	|      pea 5 <_start+0x5>
   132a0:	|      lea 12(sp),a0
   132a4:	|      move.l a0,-(sp)
   132a6:	|      jsr 14bce <getValueType>
   132ac:	|      lea 12(sp),sp
   132b0:	|      tst.w d0
   132b2:	|  ,-- bne.s 132b8 <builtIn_parallaxAdd+0x9c>
   132b4:	|  |   moveq #1,d0
   132b6:	+--|-- bra.s 1331e <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   132b8:	|  '-> moveq #24,d0
   132ba:	|      add.l 24(sp),d0
   132be:	|      move.l d0,-(sp)
   132c0:	|      jsr 15552 <trimStack>
   132c6:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   132c8:	|      move.l 8(sp),d0
   132cc:	|      move.l d0,d0
   132ce:	|      moveq #0,d2
   132d0:	|      move.w d0,d2
   132d2:	|      move.l 12(sp),d0
   132d6:	|      move.l d0,d0
   132d8:	|      moveq #0,d1
   132da:	|      move.w d0,d1
   132dc:	|      move.l 4(sp),d0
   132e0:	|      move.l d0,d0
   132e2:	|      move.w d0,d0
   132e4:	|      andi.l #65535,d0
   132ea:	|      move.l d2,-(sp)
   132ec:	|      move.l d1,-(sp)
   132ee:	|      move.l d0,-(sp)
   132f0:	|      jsr d736 <loadParallax>
   132f6:	|      lea 12(sp),sp
   132fa:	|      tst.w d0
   132fc:	|  ,-- bne.s 13302 <builtIn_parallaxAdd+0xe6>
   132fe:	|  |   moveq #1,d0
   13300:	+--|-- bra.s 1331e <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   13302:	|  '-> moveq #28,d0
   13304:	|      add.l 24(sp),d0
   13308:	|      pea 1 <_start+0x1>
   1330c:	|      pea 1 <_start+0x1>
   13310:	|      move.l d0,-(sp)
   13312:	|      jsr 154c0 <setVariable>
   13318:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   1331c:	|      moveq #2,d0
}
   1331e:	'----> move.l (sp)+,d2
   13320:	       lea 12(sp),sp
   13324:	       rts

00013326 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   13326:	jsr d66e <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   1332c:	moveq #28,d0
   1332e:	add.l 8(sp),d0
   13332:	pea 1 <_start+0x1>
   13336:	pea 1 <_start+0x1>
   1333a:	move.l d0,-(sp)
   1333c:	jsr 154c0 <setVariable>
   13342:	lea 12(sp),sp
	return BR_CONTINUE;
   13346:	moveq #2,d0
}
   13348:	rts

0001334a <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   1334a:	pea 1a16a <PutChar+0x201a>
   13350:	jsr 176ae <KPrintF>
   13356:	addq.l #4,sp

	return BR_CONTINUE;
   13358:	moveq #2,d0
}
   1335a:	rts

0001335c <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   1335c:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   1335e:	             movea.l 16(sp),a0
   13362:	             movea.l 24(a0),a0
   13366:	             move.l (a0),d0
   13368:	             moveq #1,d1
   1336a:	             cmp.l d0,d1
   1336c:	      ,----- beq.s 133b4 <builtIn_makeFastArray+0x58>
   1336e:	      |      moveq #6,d1
   13370:	      |      cmp.l d0,d1
   13372:	,-----|----- bne.s 133f2 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   13374:	|     |      movea.l 16(sp),a0
   13378:	|     |      movea.l 24(a0),a0
   1337c:	|     |      move.l 4(a0),d1
   13380:	|     |      moveq #28,d0
   13382:	|     |      add.l 16(sp),d0
   13386:	|     |      move.l d1,-(sp)
   13388:	|     |      move.l d0,-(sp)
   1338a:	|     |      jsr 14c80 <makeFastArrayFromStack>
   13390:	|     |      addq.l #8,sp
   13392:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   13396:	|     |      moveq #24,d0
   13398:	|     |      add.l 16(sp),d0
   1339c:	|     |      move.l d0,-(sp)
   1339e:	|     |      jsr 15552 <trimStack>
   133a4:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   133a6:	|     |      tst.w 6(sp)
   133aa:	|     |  ,-- beq.s 133b0 <builtIn_makeFastArray+0x54>
   133ac:	|     |  |   moveq #2,d0
   133ae:	|  ,--|--|-- bra.s 13404 <builtIn_makeFastArray+0xa8>
   133b0:	|  |  |  '-> moveq #1,d0
   133b2:	|  +--|----- bra.s 13404 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   133b4:	|  |  '----> movea.l 16(sp),a0
   133b8:	|  |         movea.l 24(a0),a0
   133bc:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   133c2:	|  |         moveq #24,d0
   133c4:	|  |         add.l 16(sp),d0
   133c8:	|  |         move.l d0,-(sp)
   133ca:	|  |         jsr 15552 <trimStack>
   133d0:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   133d2:	|  |         moveq #28,d0
   133d4:	|  |         add.l 16(sp),d0
   133d8:	|  |         move.l 2(sp),-(sp)
   133dc:	|  |         move.l d0,-(sp)
   133de:	|  |         jsr 14cea <makeFastArraySize>
   133e4:	|  |         addq.l #8,sp
   133e6:	|  |         tst.w d0
   133e8:	|  |     ,-- beq.s 133ee <builtIn_makeFastArray+0x92>
   133ea:	|  |     |   moveq #2,d0
   133ec:	|  +-----|-- bra.s 13404 <builtIn_makeFastArray+0xa8>
   133ee:	|  |     '-> moveq #1,d0
   133f0:	|  +-------- bra.s 13404 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   133f2:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   133f4:	   |         pea 1a193 <PutChar+0x2043>
   133fa:	   |         jsr 176ae <KPrintF>
   13400:	   |         addq.l #4,sp
	return BR_ERROR;
   13402:	   |         moveq #1,d0
}
   13404:	   '-------> addq.l #8,sp
   13406:	             rts

00013408 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   13408:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1340a:	          movea.l 16(sp),a0
   1340e:	          move.l 24(a0),d0
   13412:	          move.l d0,-(sp)
   13414:	          pea 7 <_start+0x7>
   13418:	          move.l sp,d0
   1341a:	          addq.l #8,d0
   1341c:	          move.l d0,-(sp)
   1341e:	          jsr 14bce <getValueType>
   13424:	          lea 12(sp),sp
   13428:	          tst.w d0
   1342a:	      ,-- bne.s 13430 <builtIn_getCharacterScale+0x28>
   1342c:	      |   moveq #1,d0
   1342e:	,-----|-- bra.s 134aa <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   13430:	|     '-> moveq #24,d0
   13432:	|         add.l 16(sp),d0
   13436:	|         move.l d0,-(sp)
   13438:	|         jsr 15552 <trimStack>
   1343e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   13440:	|         move.l (sp),d0
   13442:	|         move.l d0,-(sp)
   13444:	|         jsr a974 <findPerson>
   1344a:	|         addq.l #4,sp
   1344c:	|         move.l d0,4(sp)
	if (pers) {
   13450:	|  ,----- beq.s 13490 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   13452:	|  |      movea.l 4(sp),a0
   13456:	|  |      move.l 32(a0),d0
   1345a:	|  |      move.l #1120403456,-(sp)
   13460:	|  |      move.l d0,-(sp)
   13462:	|  |      jsr 17b92 <__mulsf3>
   13468:	|  |      addq.l #8,sp
   1346a:	|  |      move.l d0,-(sp)
   1346c:	|  |      jsr 17a78 <__fixsfsi>
   13472:	|  |      addq.l #4,sp
   13474:	|  |      move.l d0,d1
   13476:	|  |      moveq #28,d0
   13478:	|  |      add.l 16(sp),d0
   1347c:	|  |      move.l d1,-(sp)
   1347e:	|  |      pea 1 <_start+0x1>
   13482:	|  |      move.l d0,-(sp)
   13484:	|  |      jsr 154c0 <setVariable>
   1348a:	|  |      lea 12(sp),sp
   1348e:	|  |  ,-- bra.s 134a8 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   13490:	|  '--|-> moveq #28,d0
   13492:	|     |   add.l 16(sp),d0
   13496:	|     |   clr.l -(sp)
   13498:	|     |   pea 1 <_start+0x1>
   1349c:	|     |   move.l d0,-(sp)
   1349e:	|     |   jsr 154c0 <setVariable>
   134a4:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   134a8:	|     '-> moveq #2,d0
}
   134aa:	'-------> addq.l #8,sp
   134ac:	          rts

000134ae <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   134ae:	move.l 1cf62 <gameSettings>,d0
   134b4:	move.l d0,d1
   134b6:	moveq #28,d0
   134b8:	add.l 8(sp),d0
   134bc:	move.l d1,-(sp)
   134be:	pea 1 <_start+0x1>
   134c2:	move.l d0,-(sp)
   134c4:	jsr 154c0 <setVariable>
   134ca:	lea 12(sp),sp
	return BR_CONTINUE;
   134ce:	moveq #2,d0
}
   134d0:	rts

000134d2 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   134d2:	moveq #24,d0
   134d4:	add.l 8(sp),d0
   134d8:	move.l d0,-(sp)
   134da:	jsr 15552 <trimStack>
   134e0:	addq.l #4,sp
	trimStack (&fun -> stack);
   134e2:	moveq #24,d0
   134e4:	add.l 8(sp),d0
   134e8:	move.l d0,-(sp)
   134ea:	jsr 15552 <trimStack>
   134f0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   134f2:	moveq #28,d0
   134f4:	add.l 8(sp),d0
   134f8:	clr.l -(sp)
   134fa:	pea 1 <_start+0x1>
   134fe:	move.l d0,-(sp)
   13500:	jsr 154c0 <setVariable>
   13506:	lea 12(sp),sp

	return BR_CONTINUE;
   1350a:	moveq #2,d0

}
   1350c:	rts

0001350e <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   1350e:	move.l 1c80c <lastFramesPerSecond>,d1
   13514:	moveq #28,d0
   13516:	add.l 8(sp),d0
   1351a:	move.l d1,-(sp)
   1351c:	pea 1 <_start+0x1>
   13520:	move.l d0,-(sp)
   13522:	jsr 154c0 <setVariable>
   13528:	lea 12(sp),sp
	return BR_CONTINUE;
   1352c:	moveq #2,d0
}
   1352e:	rts

00013530 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   13530:	moveq #2,d0
}
   13532:	rts

00013534 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   13534:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13538:	          movea.l 60(sp),a0
   1353c:	          move.l 24(a0),d0
   13540:	          move.l d0,-(sp)
   13542:	          pea 1 <_start+0x1>
   13546:	          pea 1cd9e <thumbHeight>
   1354c:	          jsr 14bce <getValueType>
   13552:	          lea 12(sp),sp
   13556:	          tst.w d0
   13558:	      ,-- bne.s 13560 <builtIn_setThumbnailSize+0x2c>
   1355a:	      |   moveq #1,d0
   1355c:	,-----|-- bra.w 1361c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13560:	|     '-> moveq #24,d0
   13562:	|         add.l 60(sp),d0
   13566:	|         move.l d0,-(sp)
   13568:	|         jsr 15552 <trimStack>
   1356e:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13570:	|         movea.l 60(sp),a0
   13574:	|         move.l 24(a0),d0
   13578:	|         move.l d0,-(sp)
   1357a:	|         pea 1 <_start+0x1>
   1357e:	|         pea 1cd9a <thumbWidth>
   13584:	|         jsr 14bce <getValueType>
   1358a:	|         lea 12(sp),sp
   1358e:	|         tst.w d0
   13590:	|     ,-- bne.s 13598 <builtIn_setThumbnailSize+0x64>
   13592:	|     |   moveq #1,d0
   13594:	+-----|-- bra.w 1361c <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13598:	|     '-> moveq #24,d0
   1359a:	|         add.l 60(sp),d0
   1359e:	|         move.l d0,-(sp)
   135a0:	|         jsr 15552 <trimStack>
   135a6:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   135a8:	|         move.l 1cd9a <thumbWidth>,d0
   135ae:	|     ,-- bmi.s 135dc <builtIn_setThumbnailSize+0xa8>
   135b0:	|     |   move.l 1cd9e <thumbHeight>,d0
   135b6:	|     +-- bmi.s 135dc <builtIn_setThumbnailSize+0xa8>
   135b8:	|     |   move.l 1cd9a <thumbWidth>,d0
   135be:	|     |   move.l d0,d1
   135c0:	|     |   move.l 1cdde <winWidth>,d0
   135c6:	|     |   cmp.l d1,d0
   135c8:	|     +-- bcs.s 135dc <builtIn_setThumbnailSize+0xa8>
   135ca:	|     |   move.l 1cd9e <thumbHeight>,d0
   135d0:	|     |   move.l d0,d1
   135d2:	|     |   move.l 1cde2 <winHeight>,d0
   135d8:	|     |   cmp.l d1,d0
   135da:	|  ,--|-- bcc.s 1361a <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   135dc:	|  |  '-> move.l 1cd9e <thumbHeight>,d1
   135e2:	|  |      move.l 1cd9a <thumbWidth>,d0
   135e8:	|  |      move.l d1,-(sp)
   135ea:	|  |      move.l d0,-(sp)
   135ec:	|  |      pea 1a1ba <PutChar+0x206a>
   135f2:	|  |      lea 14(sp),a0
   135f6:	|  |      move.l a0,-(sp)
   135f8:	|  |      jsr 143d8 <sprintf>
   135fe:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   13602:	|  |      lea 2(sp),a0
   13606:	|  |      move.l a0,-(sp)
   13608:	|  |      pea 1a1c2 <PutChar+0x2072>
   1360e:	|  |      jsr 176ae <KPrintF>
   13614:	|  |      addq.l #8,sp
		return BR_ERROR;
   13616:	|  |      moveq #1,d0
   13618:	+--|----- bra.s 1361c <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   1361a:	|  '----> moveq #2,d0
}
   1361c:	'-------> lea 52(sp),sp
   13620:	          rts

00013622 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   13622:	       lea -12(sp),sp
   13626:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13628:	       movea.l 24(sp),a0
   1362c:	       move.l 24(a0),d0
   13630:	       move.l d0,-(sp)
   13632:	       pea 1 <_start+0x1>
   13636:	       lea 12(sp),a0
   1363a:	       move.l a0,-(sp)
   1363c:	       jsr 14bce <getValueType>
   13642:	       lea 12(sp),sp
   13646:	       tst.w d0
   13648:	   ,-- bne.s 13650 <builtIn_hasFlag+0x2e>
   1364a:	   |   moveq #1,d0
   1364c:	,--|-- bra.w 136e0 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13650:	|  '-> moveq #24,d0
   13652:	|      add.l 24(sp),d0
   13656:	|      move.l d0,-(sp)
   13658:	|      jsr 15552 <trimStack>
   1365e:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13660:	|      movea.l 24(sp),a0
   13664:	|      move.l 24(a0),d0
   13668:	|      move.l d0,-(sp)
   1366a:	|      pea 7 <_start+0x7>
   1366e:	|      moveq #16,d0
   13670:	|      add.l sp,d0
   13672:	|      move.l d0,-(sp)
   13674:	|      jsr 14bce <getValueType>
   1367a:	|      lea 12(sp),sp
   1367e:	|      tst.w d0
   13680:	|  ,-- bne.s 13686 <builtIn_hasFlag+0x64>
   13682:	|  |   moveq #1,d0
   13684:	+--|-- bra.s 136e0 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   13686:	|  '-> moveq #24,d0
   13688:	|      add.l 24(sp),d0
   1368c:	|      move.l d0,-(sp)
   1368e:	|      jsr 15552 <trimStack>
   13694:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   13696:	|      move.l 8(sp),d0
   1369a:	|      move.l d0,-(sp)
   1369c:	|      jsr d8e2 <findObjectType>
   136a2:	|      addq.l #4,sp
   136a4:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   136a8:	|  ,-- bne.s 136ae <builtIn_hasFlag+0x8c>
   136aa:	|  |   moveq #1,d0
   136ac:	+--|-- bra.s 136e0 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   136ae:	|  '-> movea.l 12(sp),a0
   136b2:	|      move.w 36(a0),d0
   136b6:	|      moveq #0,d2
   136b8:	|      move.w d0,d2
   136ba:	|      move.l 4(sp),d1
   136be:	|      moveq #1,d0
   136c0:	|      lsl.l d1,d0
   136c2:	|      move.l d2,d1
   136c4:	|      and.l d0,d1
   136c6:	|      moveq #28,d0
   136c8:	|      add.l 24(sp),d0
   136cc:	|      move.l d1,-(sp)
   136ce:	|      pea 1 <_start+0x1>
   136d2:	|      move.l d0,-(sp)
   136d4:	|      jsr 154c0 <setVariable>
   136da:	|      lea 12(sp),sp
	return BR_CONTINUE;
   136de:	|      moveq #2,d0
}
   136e0:	'----> move.l (sp)+,d2
   136e2:	       lea 12(sp),sp
   136e6:	       rts

000136e8 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   136e8:	       jsr d8d0 <snapshot>
   136ee:	       tst.w d0
   136f0:	,----- beq.s 136f6 <builtIn_snapshotGrab+0xe>
   136f2:	|      moveq #2,d0
   136f4:	|  ,-- bra.s 136f8 <builtIn_snapshotGrab+0x10>
   136f6:	'--|-> moveq #1,d0
}
   136f8:	   '-> rts

000136fa <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   136fa:	jsr d77c <nosnapshot>
	return BR_CONTINUE;
   13700:	moveq #2,d0
}
   13702:	rts

00013704 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   13704:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13706:	move.w 1c6e4 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   1370e:	movea.l 12(sp),a0
   13712:	move.l 24(a0),d0
   13716:	move.l d0,-(sp)
   13718:	jsr 1510e <getBoolean>
   1371e:	addq.l #4,sp
   13720:	move.w d0,1c6e4 <allowAnyFilename>
	trimStack (&fun -> stack);
   13726:	moveq #24,d0
   13728:	add.l 12(sp),d0
   1372c:	move.l d0,-(sp)
   1372e:	jsr 15552 <trimStack>
   13734:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   13736:	movea.w 2(sp),a0
   1373a:	moveq #28,d0
   1373c:	add.l 12(sp),d0
   13740:	move.l a0,-(sp)
   13742:	pea 1 <_start+0x1>
   13746:	move.l d0,-(sp)
   13748:	jsr 154c0 <setVariable>
   1374e:	lea 12(sp),sp
	return BR_CONTINUE;
   13752:	moveq #2,d0
}
   13754:	addq.l #4,sp
   13756:	rts

00013758 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   13758:	moveq #24,d0
   1375a:	add.l 8(sp),d0
   1375e:	move.l d0,-(sp)
   13760:	jsr 15552 <trimStack>
   13766:	addq.l #4,sp
	trimStack (&fun -> stack);
   13768:	moveq #24,d0
   1376a:	add.l 8(sp),d0
   1376e:	move.l d0,-(sp)
   13770:	jsr 15552 <trimStack>
   13776:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   13778:	moveq #28,d0
   1377a:	add.l 8(sp),d0
   1377e:	clr.l -(sp)
   13780:	pea 1 <_start+0x1>
   13784:	move.l d0,-(sp)
   13786:	jsr 154c0 <setVariable>
   1378c:	lea 12(sp),sp

	return BR_CONTINUE;
   13790:	moveq #2,d0
}
   13792:	rts

00013794 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   13794:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   13796:	movea.l 12(sp),a0
   1379a:	move.l 24(a0),d0
   1379e:	move.l d0,-(sp)
   137a0:	jsr 151a4 <getTextFromAnyVar>
   137a6:	addq.l #4,sp
   137a8:	move.l d0,(sp)
	trimStack (&fun -> stack);
   137aa:	moveq #24,d0
   137ac:	add.l 12(sp),d0
   137b0:	move.l d0,-(sp)
   137b2:	jsr 15552 <trimStack>
   137b8:	addq.l #4,sp
	KPrintF (mess);
   137ba:	move.l (sp),-(sp)
   137bc:	jsr 176ae <KPrintF>
   137c2:	addq.l #4,sp
	return BR_ERROR;
   137c4:	moveq #1,d0
}
   137c6:	addq.l #4,sp
   137c8:	rts

000137ca <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   137ca:	moveq #24,d0
   137cc:	add.l 8(sp),d0
   137d0:	move.l d0,-(sp)
   137d2:	jsr 15552 <trimStack>
   137d8:	addq.l #4,sp
	trimStack (&fun -> stack);
   137da:	moveq #24,d0
   137dc:	add.l 8(sp),d0
   137e0:	move.l d0,-(sp)
   137e2:	jsr 15552 <trimStack>
   137e8:	addq.l #4,sp
	trimStack (&fun -> stack);
   137ea:	moveq #24,d0
   137ec:	add.l 8(sp),d0
   137f0:	move.l d0,-(sp)
   137f2:	jsr 15552 <trimStack>
   137f8:	addq.l #4,sp
	trimStack (&fun -> stack);
   137fa:	moveq #24,d0
   137fc:	add.l 8(sp),d0
   13800:	move.l d0,-(sp)
   13802:	jsr 15552 <trimStack>
   13808:	addq.l #4,sp

	return BR_CONTINUE;
   1380a:	moveq #2,d0
}
   1380c:	rts

0001380e <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1380e:	moveq #24,d0
   13810:	add.l 8(sp),d0
   13814:	move.l d0,-(sp)
   13816:	jsr 15552 <trimStack>
   1381c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1381e:	moveq #24,d0
   13820:	add.l 8(sp),d0
   13824:	move.l d0,-(sp)
   13826:	jsr 15552 <trimStack>
   1382c:	addq.l #4,sp
	trimStack (&fun -> stack);
   1382e:	moveq #24,d0
   13830:	add.l 8(sp),d0
   13834:	move.l d0,-(sp)
   13836:	jsr 15552 <trimStack>
   1383c:	addq.l #4,sp

	return BR_CONTINUE;
   1383e:	moveq #2,d0

}
   13840:	rts

00013842 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   13842:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   13844:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   1384a:	sne d0
   1384c:	neg.b d0
   1384e:	moveq #0,d1
   13850:	move.b d0,d1
   13852:	moveq #28,d0
   13854:	add.l 12(sp),d0
   13858:	move.l d1,-(sp)
   1385a:	pea 1 <_start+0x1>
   1385e:	move.l d0,-(sp)
   13860:	jsr 154c0 <setVariable>
   13866:	lea 12(sp),sp
	return BR_CONTINUE;
   1386a:	moveq #2,d0
}
   1386c:	addq.l #4,sp
   1386e:	rts

00013870 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   13870:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   13872:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   13878:	pea 1a1d9 <PutChar+0x2089>
   1387e:	jsr 176ae <KPrintF>
   13884:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   13886:	tst.w 2(sp)
   1388a:	sne d0
   1388c:	neg.b d0
   1388e:	moveq #0,d1
   13890:	move.b d0,d1
   13892:	moveq #28,d0
   13894:	add.l 12(sp),d0
   13898:	move.l d1,-(sp)
   1389a:	pea 1 <_start+0x1>
   1389e:	move.l d0,-(sp)
   138a0:	jsr 154c0 <setVariable>
   138a6:	lea 12(sp),sp
	return BR_CONTINUE;
   138aa:	moveq #2,d0
}
   138ac:	addq.l #4,sp
   138ae:	rts

000138b0 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   138b0:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   138b4:	             move.l 104(sp),d0
   138b8:	             cmpi.l #166,d0
   138be:	,----------- bhi.w 139a0 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   138c2:	|            move.l 104(sp),d0
   138c6:	|            add.l d0,d0
   138c8:	|            movea.l d0,a1
   138ca:	|            adda.l d0,a1
   138cc:	|            lea 1c82a <paramNum>,a0
   138d2:	|            move.l (0,a1,a0.l),d0
   138d6:	|            moveq #-1,d1
   138d8:	|            cmp.l d0,d1
   138da:	|  ,-------- beq.w 13968 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   138de:	|  |         move.l 104(sp),d0
   138e2:	|  |         add.l d0,d0
   138e4:	|  |         movea.l d0,a1
   138e6:	|  |         adda.l d0,a1
   138e8:	|  |         lea 1c82a <paramNum>,a0
   138ee:	|  |         move.l (0,a1,a0.l),d0
   138f2:	|  |         cmp.l 108(sp),d0
   138f6:	|  +-------- beq.s 13968 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   138f8:	|  |         move.l 104(sp),d0
   138fc:	|  |         add.l d0,d0
   138fe:	|  |         movea.l d0,a1
   13900:	|  |         adda.l d0,a1
   13902:	|  |         lea 1c82a <paramNum>,a0
   13908:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   1390c:	|  |         moveq #1,d1
   1390e:	|  |         cmp.l d0,d1
   13910:	|  |  ,----- bne.s 1391a <callBuiltIn+0x6a>
   13912:	|  |  |      move.l #101981,d0
   13918:	|  |  |  ,-- bra.s 13920 <callBuiltIn+0x70>
   1391a:	|  |  '--|-> move.l #107023,d0
   13920:	|  |     '-> move.l 104(sp),d1
   13924:	|  |         add.l d1,d1
   13926:	|  |         movea.l d1,a1
   13928:	|  |         adda.l d1,a1
   1392a:	|  |         lea 1c82a <paramNum>,a0
   13930:	|  |         move.l (0,a1,a0.l),d1
   13934:	|  |         move.l d0,-(sp)
   13936:	|  |         move.l d1,-(sp)
   13938:	|  |         pea 1a211 <PutChar+0x20c1>
   1393e:	|  |         lea 12(sp),a0
   13942:	|  |         move.l a0,-(sp)
   13944:	|  |         jsr 143d8 <sprintf>
   1394a:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   1394e:	|  |         movea.l sp,a0
   13950:	|  |         move.l a0,-(sp)
   13952:	|  |         jsr b8 <copyString>
   13958:	|  |         addq.l #4,sp
   1395a:	|  |         move.l d0,-(sp)
   1395c:	|  |         jsr 176ae <KPrintF>
   13962:	|  |         addq.l #4,sp
				return BR_ERROR;
   13964:	|  |         moveq #1,d0
   13966:	|  |     ,-- bra.s 139b0 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   13968:	|  '-----|-> move.l 104(sp),d0
   1396c:	|        |   add.l d0,d0
   1396e:	|        |   movea.l d0,a1
   13970:	|        |   adda.l d0,a1
   13972:	|        |   lea 1cac6 <builtInFunctionArray>,a0
   13978:	|        |   move.l (0,a1,a0.l),d0
   1397c:	+--------|-- beq.s 139a0 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   1397e:	|        |   move.l 104(sp),d0
   13982:	|        |   add.l d0,d0
   13984:	|        |   movea.l d0,a1
   13986:	|        |   adda.l d0,a1
   13988:	|        |   lea 1cac6 <builtInFunctionArray>,a0
   1398e:	|        |   movea.l (0,a1,a0.l),a0
   13992:	|        |   move.l 112(sp),-(sp)
   13996:	|        |   move.l 112(sp),-(sp)
   1399a:	|        |   jsr (a0)
   1399c:	|        |   addq.l #8,sp
   1399e:	|        +-- bra.s 139b0 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   139a0:	'--------|-> pea 1a23c <PutChar+0x20ec>
   139a6:	         |   jsr 176ae <KPrintF>
   139ac:	         |   addq.l #4,sp
	return BR_ERROR;
   139ae:	         |   moveq #1,d0
}
   139b0:	         '-> lea 100(sp),sp
   139b4:	             rts

000139b6 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   139b6:	          subq.l #8,sp
	int indexNum = -1;
   139b8:	          moveq #-1,d0
   139ba:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   139be:	          clr.l (sp)
   139c0:	   ,----- bra.s 139e6 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   139c2:	,--|----> move.l 1cf5a <languageTable>,d1
   139c8:	|  |      move.l (sp),d0
   139ca:	|  |      add.l d0,d0
   139cc:	|  |      add.l d0,d0
   139ce:	|  |      movea.l d1,a0
   139d0:	|  |      adda.l d0,a0
   139d2:	|  |      move.l (a0),d0
   139d4:	|  |      move.l d0,d1
   139d6:	|  |      move.l 1cf62 <gameSettings>,d0
   139dc:	|  |      cmp.l d1,d0
   139de:	|  |  ,-- bne.s 139e4 <getLanguageForFileB+0x2e>
   139e0:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   139e4:	|  |  '-> addq.l #1,(sp)
   139e6:	|  '----> move.l 1cf66 <gameSettings+0x4>,d0
   139ec:	|         cmp.l (sp),d0
   139ee:	'-------- bcc.s 139c2 <getLanguageForFileB+0xc>
	}

	return indexNum;
   139f0:	          move.l 4(sp),d0
}
   139f4:	          addq.l #8,sp
   139f6:	          rts

000139f8 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   139f8:	          lea -20(sp),sp
   139fc:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   139fe:	          move.l 28(sp),-(sp)
   13a02:	          jsr 140ba <strlen>
   13a08:	          addq.l #4,sp
   13a0a:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13a0e:	          moveq #4,d0
   13a10:	          cmp.l 12(sp),d0
   13a14:	      ,-- bge.s 13a38 <getPrefsFilename+0x40>
   13a16:	      |   move.l 12(sp),d0
   13a1a:	      |   subq.l #4,d0
   13a1c:	      |   movea.l 28(sp),a0
   13a20:	      |   adda.l d0,a0
   13a22:	      |   move.b (a0),d0
   13a24:	      |   cmpi.b #46,d0
   13a28:	      +-- bne.s 13a38 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   13a2a:	      |   move.l 12(sp),d0
   13a2e:	      |   subq.l #4,d0
   13a30:	      |   movea.l 28(sp),a0
   13a34:	      |   adda.l d0,a0
   13a36:	      |   clr.b (a0)
	}

	char * f = filename;
   13a38:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   13a3e:	          clr.l 20(sp)
   13a42:	   ,----- bra.s 13a6a <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   13a44:	,--|----> move.l 20(sp),d0
   13a48:	|  |      movea.l 28(sp),a0
   13a4c:	|  |      adda.l d0,a0
   13a4e:	|  |      move.b (a0),d0
   13a50:	|  |      cmpi.b #47,d0
   13a54:	|  |  ,-- bne.s 13a66 <getPrefsFilename+0x6e>
   13a56:	|  |  |   move.l 20(sp),d0
   13a5a:	|  |  |   addq.l #1,d0
   13a5c:	|  |  |   move.l 28(sp),d1
   13a60:	|  |  |   add.l d0,d1
   13a62:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   13a66:	|  |  '-> addq.l #1,20(sp)
   13a6a:	|  '----> move.l 20(sp),d0
   13a6e:	|         cmp.l 12(sp),d0
   13a72:	'-------- blt.s 13a44 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13a74:	          pea 1a267 <PutChar+0x2117>
   13a7a:	          move.l 20(sp),-(sp)
   13a7e:	          jsr 140fa <joinStrings>
   13a84:	          addq.l #8,sp
   13a86:	          move.l d0,8(sp)

	FreeVec(filename);
   13a8a:	          move.l 28(sp),4(sp)
   13a90:	          move.l 1ce8a <SysBase>,d0
   13a96:	          movea.l d0,a6
   13a98:	          movea.l 4(sp),a1
   13a9c:	          jsr -690(a6)
	filename = NULL;
   13aa0:	          clr.l 28(sp)
	return joined;
   13aa4:	          move.l 8(sp),d0
}
   13aa8:	          movea.l (sp)+,a6
   13aaa:	          lea 20(sp),sp
   13aae:	          rts

00013ab0 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   13ab0:	             lea -28(sp),sp
   13ab4:	             move.l a6,-(sp)
   13ab6:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13ab8:	             move.l 1cf66 <gameSettings+0x4>,d0
   13abe:	             move.l d0,d1
   13ac0:	             addq.l #1,d1
   13ac2:	             move.l d1,28(sp)
   13ac6:	             clr.l 24(sp)
   13aca:	             move.l 1ce8a <SysBase>,d0
   13ad0:	             movea.l d0,a6
   13ad2:	             move.l 28(sp),d0
   13ad6:	             move.l 24(sp),d1
   13ada:	             jsr -684(a6)
   13ade:	             move.l d0,20(sp)
   13ae2:	             move.l 20(sp),d0
   13ae6:	             move.l d0,1cf5a <languageTable>
    if( languageTable == 0) {
   13aec:	             move.l 1cf5a <languageTable>,d0
   13af2:	         ,-- bne.s 13b02 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13af4:	         |   pea 1a26c <PutChar+0x211c>
   13afa:	         |   jsr 176ae <KPrintF>
   13b00:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13b02:	         '-> move.l 1cf66 <gameSettings+0x4>,d0
   13b08:	             move.l d0,d1
   13b0a:	             addq.l #1,d1
   13b0c:	             move.l d1,16(sp)
   13b10:	             clr.l 12(sp)
   13b14:	             move.l 1ce8a <SysBase>,d0
   13b1a:	             movea.l d0,a6
   13b1c:	             move.l 16(sp),d0
   13b20:	             move.l 12(sp),d1
   13b24:	             jsr -684(a6)
   13b28:	             move.l d0,8(sp)
   13b2c:	             move.l 8(sp),d0
   13b30:	             move.l d0,1cf5e <languageName>
	if( languageName == 0) {
   13b36:	             move.l 1cf5e <languageName>,d0
   13b3c:	         ,-- bne.s 13b4c <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   13b3e:	         |   pea 1a2a2 <PutChar+0x2152>
   13b44:	         |   jsr 176ae <KPrintF>
   13b4a:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13b4c:	         '-> clr.l 32(sp)
   13b50:	   ,-------- bra.s 13bc8 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   13b52:	,--|-------> tst.l 32(sp)
   13b56:	|  |  ,----- beq.s 13b66 <makeLanguageTable+0xb6>
   13b58:	|  |  |      move.l 40(sp),-(sp)
   13b5c:	|  |  |      jsr 6bc <get2bytes>
   13b62:	|  |  |      addq.l #4,sp
   13b64:	|  |  |  ,-- bra.s 13b68 <makeLanguageTable+0xb8>
   13b66:	|  |  '--|-> moveq #0,d0
   13b68:	|  |     '-> movea.l 1cf5a <languageTable>,a0
   13b6e:	|  |         move.l 32(sp),d1
   13b72:	|  |         add.l d1,d1
   13b74:	|  |         add.l d1,d1
   13b76:	|  |         adda.l d1,a0
   13b78:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   13b7a:	|  |         move.l 1cf5e <languageName>,d1
   13b80:	|  |         move.l 32(sp),d0
   13b84:	|  |         add.l d0,d0
   13b86:	|  |         add.l d0,d0
   13b88:	|  |         movea.l d1,a0
   13b8a:	|  |         adda.l d0,a0
   13b8c:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   13b8e:	|  |         move.l 1ce34 <gameVersion>,d0
   13b94:	|  |         cmpi.l #511,d0
   13b9a:	|  |     ,-- ble.s 13bc4 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   13b9c:	|  |     |   move.l 1cf66 <gameSettings+0x4>,d0
   13ba2:	|  |     +-- beq.s 13bc4 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   13ba4:	|  |     |   move.l 1cf5e <languageName>,d1
   13baa:	|  |     |   move.l 32(sp),d0
   13bae:	|  |     |   add.l d0,d0
   13bb0:	|  |     |   add.l d0,d0
   13bb2:	|  |     |   movea.l d1,a2
   13bb4:	|  |     |   adda.l d0,a2
   13bb6:	|  |     |   move.l 40(sp),-(sp)
   13bba:	|  |     |   jsr b02 <readString>
   13bc0:	|  |     |   addq.l #4,sp
   13bc2:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13bc4:	|  |     '-> addq.l #1,32(sp)
   13bc8:	|  '-------> move.l 1cf66 <gameSettings+0x4>,d0
   13bce:	|            cmp.l 32(sp),d0
   13bd2:	'----------- bcc.w 13b52 <makeLanguageTable+0xa2>
		}
	}
}
   13bd6:	             nop
   13bd8:	             nop
   13bda:	             movea.l (sp)+,a2
   13bdc:	             movea.l (sp)+,a6
   13bde:	             lea 28(sp),sp
   13be2:	             rts

00013be4 <readIniFile>:

void readIniFile (char * filename) {
   13be4:	                      lea -564(sp),sp
   13be8:	                      move.l a6,-(sp)
   13bea:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   13bec:	                      move.l 576(sp),-(sp)
   13bf0:	                      jsr b8 <copyString>
   13bf6:	                      addq.l #4,sp
   13bf8:	                      move.l d0,-(sp)
   13bfa:	                      jsr 139f8 <getPrefsFilename>
   13c00:	                      addq.l #4,sp
   13c02:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13c06:	                      move.l 562(sp),558(sp)
   13c0c:	                      move.l #1005,554(sp)
   13c14:	                      move.l 1ce92 <DOSBase>,d0
   13c1a:	                      movea.l d0,a6
   13c1c:	                      move.l 558(sp),d1
   13c20:	                      move.l 554(sp),d2
   13c24:	                      jsr -30(a6)
   13c28:	                      move.l d0,550(sp)
   13c2c:	                      move.l 550(sp),d0
   13c30:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13c34:	                      clr.l 1cf62 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13c3a:	                      move.w #1,1cf6a <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13c42:	                      clr.l 1cf6c <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13c48:	                      moveq #1,d0
   13c4a:	                      move.l d0,1cf70 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13c50:	                      clr.w 1cf74 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13c56:	                      clr.w 1cf76 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13c5c:	                      clr.w 1cf78 <gameSettings+0x16>

	FreeVec(langName);
   13c62:	                      move.l 562(sp),542(sp)
   13c68:	                      move.l 1ce8a <SysBase>,d0
   13c6e:	                      movea.l d0,a6
   13c70:	                      movea.l 542(sp),a1
   13c74:	                      jsr -690(a6)
	langName = NULL;
   13c78:	                      clr.l 562(sp)

	if (fp) {
   13c7c:	                      tst.l 546(sp)
   13c80:	,-------------------- beq.w 13f5e <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13c84:	|                     move.l sp,d0
   13c86:	|                     addi.l #265,d0
   13c8c:	|                     move.l #257,d1
   13c92:	|                     move.l d1,-(sp)
   13c94:	|                     clr.l -(sp)
   13c96:	|                     move.l d0,-(sp)
   13c98:	|                     jsr 17632 <memset>
   13c9e:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13ca2:	|                     move.l sp,d0
   13ca4:	|                     addq.l #8,d0
   13ca6:	|                     move.l #257,d1
   13cac:	|                     move.l d1,-(sp)
   13cae:	|                     clr.l -(sp)
   13cb0:	|                     move.l d0,-(sp)
   13cb2:	|                     jsr 17632 <memset>
   13cb8:	|                     lea 12(sp),sp
		unsigned char here = 0;
   13cbc:	|                     clr.b 571(sp)
		char readChar = ' ';
   13cc0:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13cc6:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   13ccc:	|                     clr.w 566(sp)
		LONG tmp = 0;
   13cd0:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   13cd4:	|  ,----------------> move.l 546(sp),534(sp)
   13cda:	|  |                  move.l 1ce92 <DOSBase>,d0
   13ce0:	|  |                  movea.l d0,a6
   13ce2:	|  |                  move.l 534(sp),d1
   13ce6:	|  |                  jsr -306(a6)
   13cea:	|  |                  move.l d0,530(sp)
   13cee:	|  |                  move.l 530(sp),d0
   13cf2:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13cf6:	|  |                  moveq #-1,d1
   13cf8:	|  |                  cmp.l 538(sp),d1
   13cfc:	|  |           ,----- bne.s 13d0a <readIniFile+0x126>
				readChar = '\n';
   13cfe:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13d04:	|  |           |      clr.w 568(sp)
   13d08:	|  |           |  ,-- bra.s 13d10 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13d0a:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13d10:	|  |              '-> move.b 570(sp),d0
   13d14:	|  |                  ext.w d0
   13d16:	|  |                  movea.w d0,a0
   13d18:	|  |                  moveq #61,d0
   13d1a:	|  |                  cmp.l a0,d0
   13d1c:	|  |     ,----------- beq.w 13ec6 <readIniFile+0x2e2>
   13d20:	|  |     |            moveq #61,d1
   13d22:	|  |     |            cmp.l a0,d1
   13d24:	|  |  ,--|----------- blt.w 13ed2 <readIniFile+0x2ee>
   13d28:	|  |  |  |            moveq #10,d0
   13d2a:	|  |  |  |            cmp.l a0,d0
   13d2c:	|  |  |  |        ,-- beq.s 13d36 <readIniFile+0x152>
   13d2e:	|  |  |  |        |   moveq #13,d1
   13d30:	|  |  |  |        |   cmp.l a0,d1
   13d32:	|  |  +--|--------|-- bne.w 13ed2 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13d36:	|  |  |  |        '-> tst.w 566(sp)
   13d3a:	|  |  |  |     ,----- beq.w 13eb4 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13d3e:	|  |  |  |     |      pea 1a2d6 <PutChar+0x2186>
   13d44:	|  |  |  |     |      move.l sp,d0
   13d46:	|  |  |  |     |      addi.l #269,d0
   13d4c:	|  |  |  |     |      move.l d0,-(sp)
   13d4e:	|  |  |  |     |      jsr 1407a <strcmp>
   13d54:	|  |  |  |     |      addq.l #8,sp
   13d56:	|  |  |  |     |      tst.l d0
   13d58:	|  |  |  |     |  ,-- bne.s 13d72 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13d5a:	|  |  |  |     |  |   move.l sp,d0
   13d5c:	|  |  |  |     |  |   addq.l #8,d0
   13d5e:	|  |  |  |     |  |   move.l d0,-(sp)
   13d60:	|  |  |  |     |  |   jsr 13f6a <stringToInt>
   13d66:	|  |  |  |     |  |   addq.l #4,sp
   13d68:	|  |  |  |     |  |   move.l d0,1cf62 <gameSettings>
   13d6e:	|  |  |  |     +--|-- bra.w 13eb4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13d72:	|  |  |  |     |  '-> pea 1a2df <PutChar+0x218f>
   13d78:	|  |  |  |     |      move.l sp,d0
   13d7a:	|  |  |  |     |      addi.l #269,d0
   13d80:	|  |  |  |     |      move.l d0,-(sp)
   13d82:	|  |  |  |     |      jsr 1407a <strcmp>
   13d88:	|  |  |  |     |      addq.l #8,sp
   13d8a:	|  |  |  |     |      tst.l d0
   13d8c:	|  |  |  |     |  ,-- bne.s 13db2 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13d8e:	|  |  |  |     |  |   move.l sp,d0
   13d90:	|  |  |  |     |  |   addq.l #8,d0
   13d92:	|  |  |  |     |  |   move.l d0,-(sp)
   13d94:	|  |  |  |     |  |   jsr 13f6a <stringToInt>
   13d9a:	|  |  |  |     |  |   addq.l #4,sp
   13d9c:	|  |  |  |     |  |   tst.l d0
   13d9e:	|  |  |  |     |  |   seq d0
   13da0:	|  |  |  |     |  |   neg.b d0
   13da2:	|  |  |  |     |  |   move.b d0,d0
   13da4:	|  |  |  |     |  |   andi.w #255,d0
   13da8:	|  |  |  |     |  |   move.w d0,1cf6a <gameSettings+0x8>
   13dae:	|  |  |  |     +--|-- bra.w 13eb4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13db2:	|  |  |  |     |  '-> pea 1a2e6 <PutChar+0x2196>
   13db8:	|  |  |  |     |      move.l sp,d0
   13dba:	|  |  |  |     |      addi.l #269,d0
   13dc0:	|  |  |  |     |      move.l d0,-(sp)
   13dc2:	|  |  |  |     |      jsr 1407a <strcmp>
   13dc8:	|  |  |  |     |      addq.l #8,sp
   13dca:	|  |  |  |     |      tst.l d0
   13dcc:	|  |  |  |     |  ,-- bne.s 13de6 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13dce:	|  |  |  |     |  |   move.l sp,d0
   13dd0:	|  |  |  |     |  |   addq.l #8,d0
   13dd2:	|  |  |  |     |  |   move.l d0,-(sp)
   13dd4:	|  |  |  |     |  |   jsr 13f6a <stringToInt>
   13dda:	|  |  |  |     |  |   addq.l #4,sp
   13ddc:	|  |  |  |     |  |   move.l d0,1cf6c <gameSettings+0xa>
   13de2:	|  |  |  |     +--|-- bra.w 13eb4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13de6:	|  |  |  |     |  '-> pea 1a2ee <PutChar+0x219e>
   13dec:	|  |  |  |     |      move.l sp,d0
   13dee:	|  |  |  |     |      addi.l #269,d0
   13df4:	|  |  |  |     |      move.l d0,-(sp)
   13df6:	|  |  |  |     |      jsr 1407a <strcmp>
   13dfc:	|  |  |  |     |      addq.l #8,sp
   13dfe:	|  |  |  |     |      tst.l d0
   13e00:	|  |  |  |     |  ,-- bne.s 13e1a <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13e02:	|  |  |  |     |  |   move.l sp,d0
   13e04:	|  |  |  |     |  |   addq.l #8,d0
   13e06:	|  |  |  |     |  |   move.l d0,-(sp)
   13e08:	|  |  |  |     |  |   jsr 13f6a <stringToInt>
   13e0e:	|  |  |  |     |  |   addq.l #4,sp
   13e10:	|  |  |  |     |  |   move.l d0,1cf70 <gameSettings+0xe>
   13e16:	|  |  |  |     +--|-- bra.w 13eb4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13e1a:	|  |  |  |     |  '-> pea 1a2f8 <PutChar+0x21a8>
   13e20:	|  |  |  |     |      move.l sp,d0
   13e22:	|  |  |  |     |      addi.l #269,d0
   13e28:	|  |  |  |     |      move.l d0,-(sp)
   13e2a:	|  |  |  |     |      jsr 1407a <strcmp>
   13e30:	|  |  |  |     |      addq.l #8,sp
   13e32:	|  |  |  |     |      tst.l d0
   13e34:	|  |  |  |     |  ,-- bne.s 13e4e <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13e36:	|  |  |  |     |  |   move.l sp,d0
   13e38:	|  |  |  |     |  |   addq.l #8,d0
   13e3a:	|  |  |  |     |  |   move.l d0,-(sp)
   13e3c:	|  |  |  |     |  |   jsr 13f6a <stringToInt>
   13e42:	|  |  |  |     |  |   addq.l #4,sp
   13e44:	|  |  |  |     |  |   move.l d0,d0
   13e46:	|  |  |  |     |  |   move.w d0,1cf74 <gameSettings+0x12>
   13e4c:	|  |  |  |     +--|-- bra.s 13eb4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13e4e:	|  |  |  |     |  '-> pea 1a304 <PutChar+0x21b4>
   13e54:	|  |  |  |     |      move.l sp,d0
   13e56:	|  |  |  |     |      addi.l #269,d0
   13e5c:	|  |  |  |     |      move.l d0,-(sp)
   13e5e:	|  |  |  |     |      jsr 1407a <strcmp>
   13e64:	|  |  |  |     |      addq.l #8,sp
   13e66:	|  |  |  |     |      tst.l d0
   13e68:	|  |  |  |     |  ,-- bne.s 13e82 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13e6a:	|  |  |  |     |  |   move.l sp,d0
   13e6c:	|  |  |  |     |  |   addq.l #8,d0
   13e6e:	|  |  |  |     |  |   move.l d0,-(sp)
   13e70:	|  |  |  |     |  |   jsr 13f6a <stringToInt>
   13e76:	|  |  |  |     |  |   addq.l #4,sp
   13e78:	|  |  |  |     |  |   move.l d0,d0
   13e7a:	|  |  |  |     |  |   move.w d0,1cf76 <gameSettings+0x14>
   13e80:	|  |  |  |     +--|-- bra.s 13eb4 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13e82:	|  |  |  |     |  '-> pea 1a312 <PutChar+0x21c2>
   13e88:	|  |  |  |     |      move.l sp,d0
   13e8a:	|  |  |  |     |      addi.l #269,d0
   13e90:	|  |  |  |     |      move.l d0,-(sp)
   13e92:	|  |  |  |     |      jsr 1407a <strcmp>
   13e98:	|  |  |  |     |      addq.l #8,sp
   13e9a:	|  |  |  |     |      tst.l d0
   13e9c:	|  |  |  |     +----- bne.s 13eb4 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13e9e:	|  |  |  |     |      move.l sp,d0
   13ea0:	|  |  |  |     |      addq.l #8,d0
   13ea2:	|  |  |  |     |      move.l d0,-(sp)
   13ea4:	|  |  |  |     |      jsr 13f6a <stringToInt>
   13eaa:	|  |  |  |     |      addq.l #4,sp
   13eac:	|  |  |  |     |      move.l d0,d0
   13eae:	|  |  |  |     |      move.w d0,1cf78 <gameSettings+0x16>
					}
				}
				here = 0;
   13eb4:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   13eb8:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13ebc:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13ec0:	|  |  |  |            clr.b 8(sp)
				break;
   13ec4:	|  |  |  |  ,-------- bra.s 13f3c <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13ec6:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   13ecc:	|  |  |     |         clr.b 571(sp)
				break;
   13ed0:	|  |  |     +-------- bra.s 13f3c <readIniFile+0x358>

				default:
				if (doingSecond) {
   13ed2:	|  |  '-----|-------> tst.w 566(sp)
   13ed6:	|  |        |  ,----- beq.s 13f0a <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13ed8:	|  |        |  |      move.b 571(sp),d0
   13edc:	|  |        |  |      move.b d0,d1
   13ede:	|  |        |  |      addq.b #1,d1
   13ee0:	|  |        |  |      move.b d1,571(sp)
   13ee4:	|  |        |  |      move.b d0,d0
   13ee6:	|  |        |  |      andi.l #255,d0
   13eec:	|  |        |  |      lea 572(sp),a0
   13ef0:	|  |        |  |      adda.l d0,a0
   13ef2:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13ef8:	|  |        |  |      moveq #0,d0
   13efa:	|  |        |  |      move.b 571(sp),d0
   13efe:	|  |        |  |      lea 572(sp),a0
   13f02:	|  |        |  |      adda.l d0,a0
   13f04:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13f08:	|  |        |  |  ,-- bra.s 13f3a <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13f0a:	|  |        |  '--|-> move.b 571(sp),d0
   13f0e:	|  |        |     |   move.b d0,d1
   13f10:	|  |        |     |   addq.b #1,d1
   13f12:	|  |        |     |   move.b d1,571(sp)
   13f16:	|  |        |     |   move.b d0,d0
   13f18:	|  |        |     |   andi.l #255,d0
   13f1e:	|  |        |     |   lea 572(sp),a0
   13f22:	|  |        |     |   adda.l d0,a0
   13f24:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13f2a:	|  |        |     |   moveq #0,d0
   13f2c:	|  |        |     |   move.b 571(sp),d0
   13f30:	|  |        |     |   lea 572(sp),a0
   13f34:	|  |        |     |   adda.l d0,a0
   13f36:	|  |        |     |   clr.b -307(a0)
				break;
   13f3a:	|  |        |     '-> nop
			}
		} while (keepGoing);
   13f3c:	|  |        '-------> tst.w 568(sp)
   13f40:	|  '----------------- bne.w 13cd4 <readIniFile+0xf0>

		Close(fp);
   13f44:	|                     move.l 546(sp),526(sp)
   13f4a:	|                     move.l 1ce92 <DOSBase>,d0
   13f50:	|                     movea.l d0,a6
   13f52:	|                     move.l 526(sp),d1
   13f56:	|                     jsr -36(a6)
   13f5a:	|                     move.l d0,522(sp)
	}
}
   13f5e:	'-------------------> nop
   13f60:	                      move.l (sp)+,d2
   13f62:	                      movea.l (sp)+,a6
   13f64:	                      lea 564(sp),sp
   13f68:	                      rts

00013f6a <stringToInt>:

unsigned int stringToInt (char * s) {
   13f6a:	             subq.l #8,sp
	int i = 0;
   13f6c:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13f70:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13f74:	,----------> movea.l 12(sp),a0
   13f78:	|            move.b (a0),d0
   13f7a:	|            cmpi.b #47,d0
   13f7e:	|        ,-- ble.s 13fb6 <stringToInt+0x4c>
   13f80:	|        |   movea.l 12(sp),a0
   13f84:	|        |   move.b (a0),d0
   13f86:	|        |   cmpi.b #57,d0
   13f8a:	|        +-- bgt.s 13fb6 <stringToInt+0x4c>
			i *= 10;
   13f8c:	|        |   move.l 4(sp),d1
   13f90:	|        |   move.l d1,d0
   13f92:	|        |   add.l d0,d0
   13f94:	|        |   add.l d0,d0
   13f96:	|        |   add.l d1,d0
   13f98:	|        |   add.l d0,d0
   13f9a:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13f9e:	|        |   movea.l 12(sp),a0
   13fa2:	|        |   move.b (a0),d0
   13fa4:	|        |   ext.w d0
   13fa6:	|        |   movea.w d0,a0
   13fa8:	|        |   moveq #-48,d0
   13faa:	|        |   add.l a0,d0
   13fac:	|        |   add.l d0,4(sp)
			s ++;
   13fb0:	|        |   addq.l #1,12(sp)
   13fb4:	|  ,-----|-- bra.s 13fee <stringToInt+0x84>
		} else if (*s == '-') {
   13fb6:	|  |     '-> movea.l 12(sp),a0
   13fba:	|  |         move.b (a0),d0
   13fbc:	|  |         cmpi.b #45,d0
   13fc0:	|  |     ,-- bne.s 13fda <stringToInt+0x70>
			negative = ! negative;
   13fc2:	|  |     |   tst.w 2(sp)
   13fc6:	|  |     |   seq d0
   13fc8:	|  |     |   neg.b d0
   13fca:	|  |     |   move.b d0,d0
   13fcc:	|  |     |   andi.w #255,d0
   13fd0:	|  |     |   move.w d0,2(sp)
			s++;
   13fd4:	|  |     |   addq.l #1,12(sp)
   13fd8:	+--|-----|-- bra.s 13f74 <stringToInt+0xa>
		} else {
			if (negative)
   13fda:	|  |     '-> tst.w 2(sp)
   13fde:	|  |     ,-- beq.s 13fe8 <stringToInt+0x7e>
				return -i;
   13fe0:	|  |     |   move.l 4(sp),d0
   13fe4:	|  |     |   neg.l d0
   13fe6:	|  |  ,--|-- bra.s 13ff0 <stringToInt+0x86>
			return i;
   13fe8:	|  |  |  '-> move.l 4(sp),d0
   13fec:	|  |  +----- bra.s 13ff0 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13fee:	'--'--|----X bra.s 13f74 <stringToInt+0xa>
		}
	}
   13ff0:	      '----> addq.l #8,sp
   13ff2:	             rts

00013ff4 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13ff4:	    lea -28(sp),sp
   13ff8:	    move.l a6,-(sp)
   13ffa:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13ffc:	    pea 1a31c <PutChar+0x21cc>
   14002:	    jsr 176ae <KPrintF>
   14008:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   1400a:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   1400e:	    move.l 40(sp),30(sp)
   14014:	    move.l #1005,26(sp)
   1401c:	    move.l 1ce92 <DOSBase>,d0
   14022:	    movea.l d0,a6
   14024:	    move.l 30(sp),d1
   14028:	    move.l 26(sp),d2
   1402c:	    jsr -30(a6)
   14030:	    move.l d0,22(sp)
   14034:	    move.l 22(sp),d0
   14038:	    move.l d0,18(sp)
	if (tester) {
   1403c:	,-- beq.s 1406c <fileExists+0x78>
		KPrintF("fileexists: File exists");
   1403e:	|   pea 1a336 <PutChar+0x21e6>
   14044:	|   jsr 176ae <KPrintF>
   1404a:	|   addq.l #4,sp
		retval = 1;
   1404c:	|   move.b #1,35(sp)
		Close(tester);
   14052:	|   move.l 18(sp),14(sp)
   14058:	|   move.l 1ce92 <DOSBase>,d0
   1405e:	|   movea.l d0,a6
   14060:	|   move.l 14(sp),d1
   14064:	|   jsr -36(a6)
   14068:	|   move.l d0,10(sp)
	}
	return retval;
   1406c:	'-> move.b 35(sp),d0
   14070:	    move.l (sp)+,d2
   14072:	    movea.l (sp)+,a6
   14074:	    lea 28(sp),sp
   14078:	    rts

0001407a <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   1407a:	   ,-- bra.s 14084 <strcmp+0xa>
    {
        s1++;
   1407c:	,--|-> addq.l #1,4(sp)
        s2++;
   14080:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   14084:	|  '-> movea.l 4(sp),a0
   14088:	|      move.b (a0),d0
   1408a:	|  ,-- beq.s 1409c <strcmp+0x22>
   1408c:	|  |   movea.l 4(sp),a0
   14090:	|  |   move.b (a0),d1
   14092:	|  |   movea.l 8(sp),a0
   14096:	|  |   move.b (a0),d0
   14098:	|  |   cmp.b d1,d0
   1409a:	'--|-- beq.s 1407c <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   1409c:	   '-> movea.l 4(sp),a0
   140a0:	       move.b (a0),d0
   140a2:	       moveq #0,d1
   140a4:	       move.b d0,d1
   140a6:	       movea.l 8(sp),a0
   140aa:	       move.b (a0),d0
   140ac:	       move.b d0,d0
   140ae:	       andi.l #255,d0
   140b4:	       sub.l d0,d1
   140b6:	       move.l d1,d0
}
   140b8:	       rts

000140ba <strlen>:

long unsigned int strlen (const char *s) 
{  
   140ba:	       subq.l #4,sp
	long unsigned int i = 0;
   140bc:	       clr.l (sp)
	while(s[i]) i++; 
   140be:	   ,-- bra.s 140c2 <strlen+0x8>
   140c0:	,--|-> addq.l #1,(sp)
   140c2:	|  '-> movea.l 8(sp),a0
   140c6:	|      adda.l (sp),a0
   140c8:	|      move.b (a0),d0
   140ca:	'----- bne.s 140c0 <strlen+0x6>
	return(i);
   140cc:	       move.l (sp),d0
}
   140ce:	       addq.l #4,sp
   140d0:	       rts

000140d2 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   140d2:	    nop
   140d4:	,-> move.l 8(sp),d0
   140d8:	|   move.l d0,d1
   140da:	|   addq.l #1,d1
   140dc:	|   move.l d1,8(sp)
   140e0:	|   movea.l 4(sp),a0
   140e4:	|   lea 1(a0),a1
   140e8:	|   move.l a1,4(sp)
   140ec:	|   movea.l d0,a1
   140ee:	|   move.b (a1),d0
   140f0:	|   move.b d0,(a0)
   140f2:	|   move.b (a0),d0
   140f4:	'-- bne.s 140d4 <strcpy+0x2>
}
   140f6:	    nop
   140f8:	    rts

000140fa <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   140fa:	    lea -20(sp),sp
   140fe:	    move.l a6,-(sp)
   14100:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   14102:	    move.l 32(sp),-(sp)
   14106:	    jsr 140ba <strlen>
   1410c:	    addq.l #4,sp
   1410e:	    move.l d0,d2
   14110:	    move.l 36(sp),-(sp)
   14114:	    jsr 140ba <strlen>
   1411a:	    addq.l #4,sp
   1411c:	    add.l d2,d0
   1411e:	    move.l d0,d1
   14120:	    addq.l #1,d1
   14122:	    move.l d1,20(sp)
   14126:	    clr.l 16(sp)
   1412a:	    move.l 1ce8a <SysBase>,d0
   14130:	    movea.l d0,a6
   14132:	    move.l 20(sp),d0
   14136:	    move.l 16(sp),d1
   1413a:	    jsr -684(a6)
   1413e:	    move.l d0,12(sp)
   14142:	    move.l 12(sp),d0
   14146:	    move.l d0,8(sp)
	char * t = newString;
   1414a:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   14150:	    nop
   14152:	,-> move.l 32(sp),d0
   14156:	|   move.l d0,d1
   14158:	|   addq.l #1,d1
   1415a:	|   move.l d1,32(sp)
   1415e:	|   movea.l 24(sp),a0
   14162:	|   lea 1(a0),a1
   14166:	|   move.l a1,24(sp)
   1416a:	|   movea.l d0,a1
   1416c:	|   move.b (a1),d0
   1416e:	|   move.b d0,(a0)
   14170:	|   move.b (a0),d0
   14172:	'-- bne.s 14152 <joinStrings+0x58>
	t--;
   14174:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   14178:	    nop
   1417a:	,-> move.l 36(sp),d0
   1417e:	|   move.l d0,d1
   14180:	|   addq.l #1,d1
   14182:	|   move.l d1,36(sp)
   14186:	|   movea.l 24(sp),a0
   1418a:	|   lea 1(a0),a1
   1418e:	|   move.l a1,24(sp)
   14192:	|   movea.l d0,a1
   14194:	|   move.b (a1),d0
   14196:	|   move.b d0,(a0)
   14198:	|   move.b (a0),d0
   1419a:	'-- bne.s 1417a <joinStrings+0x80>

	return newString;
   1419c:	    move.l 8(sp),d0
}
   141a0:	    move.l (sp)+,d2
   141a2:	    movea.l (sp)+,a6
   141a4:	    lea 20(sp),sp
   141a8:	    rts

000141aa <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   141aa:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   141ae:	       moveq #10,d0
   141b0:	       cmp.l 28(sp),d0
   141b4:	   ,-- bne.s 141d2 <itoa+0x28>
   141b6:	   |   tst.l 20(sp)
   141ba:	   +-- bge.s 141d2 <itoa+0x28>
        *str++ = '-';
   141bc:	   |   move.l 24(sp),d0
   141c0:	   |   move.l d0,d1
   141c2:	   |   addq.l #1,d1
   141c4:	   |   move.l d1,24(sp)
   141c8:	   |   movea.l d0,a0
   141ca:	   |   move.b #45,(a0)
        value *= -1;
   141ce:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   141d2:	   '-> move.l 24(sp),12(sp)
   141d8:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   141de:	   ,-> move.l 20(sp),d0
   141e2:	   |   move.l 28(sp),-(sp)
   141e6:	   |   move.l d0,-(sp)
   141e8:	   |   jsr 180e6 <__modsi3>
   141ee:	   |   addq.l #8,sp
   141f0:	   |   movea.l d0,a1
   141f2:	   |   move.l 12(sp),d0
   141f6:	   |   move.l d0,d1
   141f8:	   |   addq.l #1,d1
   141fa:	   |   move.l d1,12(sp)
   141fe:	   |   lea 1a34e <PutChar+0x21fe>,a0
   14204:	   |   move.b (0,a1,a0.l),d1
   14208:	   |   movea.l d0,a0
   1420a:	   |   move.b d1,(a0)
        value /= base;
   1420c:	   |   move.l 28(sp),-(sp)
   14210:	   |   move.l 24(sp),-(sp)
   14214:	   |   jsr 180b8 <__divsi3>
   1421a:	   |   addq.l #8,sp
   1421c:	   |   move.l d0,20(sp)
    } while (value);
   14220:	   '-- bne.s 141de <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   14222:	       move.l 12(sp),d0
   14226:	       move.l d0,d1
   14228:	       subq.l #1,d1
   1422a:	       move.l d1,12(sp)
   1422e:	       movea.l d0,a0
   14230:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   14232:	       move.l 4(sp),8(sp)
   14238:	   ,-- bra.s 1425e <itoa+0xb4>
        char temp = *low;
   1423a:	,--|-> movea.l 8(sp),a0
   1423e:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   14242:	|  |   movea.l 12(sp),a0
   14246:	|  |   move.b (a0),d0
   14248:	|  |   movea.l 8(sp),a0
   1424c:	|  |   move.b d0,(a0)
        *ptr = temp;
   1424e:	|  |   movea.l 12(sp),a0
   14252:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   14256:	|  |   addq.l #1,8(sp)
   1425a:	|  |   subq.l #1,12(sp)
   1425e:	|  '-> move.l 8(sp),d0
   14262:	|      cmp.l 12(sp),d0
   14266:	'----- bcs.s 1423a <itoa+0x90>
    }
    return rc;
   14268:	       move.l 4(sp),d0
}
   1426c:	       lea 16(sp),sp
   14270:	       rts

00014272 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   14272:	                            lea -40(sp),sp
   14276:	                            move.l d2,-(sp)
    char* s = str;
   14278:	                            move.l 48(sp),40(sp)
    const char* p = format;
   1427e:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   14284:	   ,----------------------- bra.w 143b8 <vsprintf2+0x146>
        if (*p == '%') {
   14288:	,--|----------------------> movea.l 36(sp),a0
   1428c:	|  |                        move.b (a0),d0
   1428e:	|  |                        cmpi.b #37,d0
   14292:	|  |  ,-------------------- bne.w 1439e <vsprintf2+0x12c>
            switch (*++p) {
   14296:	|  |  |                     addq.l #1,36(sp)
   1429a:	|  |  |                     movea.l 36(sp),a0
   1429e:	|  |  |                     move.b (a0),d0
   142a0:	|  |  |                     ext.w d0
   142a2:	|  |  |                     movea.w d0,a0
   142a4:	|  |  |                     moveq #115,d0
   142a6:	|  |  |                     cmp.l a0,d0
   142a8:	|  |  |           ,-------- beq.s 14320 <vsprintf2+0xae>
   142aa:	|  |  |           |         moveq #115,d1
   142ac:	|  |  |           |         cmp.l a0,d1
   142ae:	|  |  |  ,--------|-------- blt.w 14386 <vsprintf2+0x114>
   142b2:	|  |  |  |        |         moveq #99,d2
   142b4:	|  |  |  |        |         cmp.l a0,d2
   142b6:	|  |  |  |  ,-----|-------- beq.w 1435e <vsprintf2+0xec>
   142ba:	|  |  |  |  |     |         moveq #100,d0
   142bc:	|  |  |  |  |     |         cmp.l a0,d0
   142be:	|  |  |  +--|-----|-------- bne.w 14386 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   142c2:	|  |  |  |  |     |         addq.l #4,56(sp)
   142c6:	|  |  |  |  |     |         movea.l 56(sp),a0
   142ca:	|  |  |  |  |     |         move.l (a0),d0
   142cc:	|  |  |  |  |     |         move.l d0,d1
   142ce:	|  |  |  |  |     |         subq.l #1,d1
   142d0:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   142d4:	|  |  |  |  |     |         pea a <_start+0xa>
   142d8:	|  |  |  |  |     |         lea 8(sp),a0
   142dc:	|  |  |  |  |     |         move.l a0,-(sp)
   142de:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   142e2:	|  |  |  |  |     |         jsr 141aa <itoa>
   142e8:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   142ec:	|  |  |  |  |     |         lea 44(sp),a0
   142f0:	|  |  |  |  |     |         lea -40(a0),a0
   142f4:	|  |  |  |  |     |         move.l a0,28(sp)
   142f8:	|  |  |  |  |     |     ,-- bra.s 14314 <vsprintf2+0xa2>
                        *s++ = *b;
   142fa:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   142fe:	|  |  |  |  |     |  |  |   move.l d0,d1
   14300:	|  |  |  |  |     |  |  |   addq.l #1,d1
   14302:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   14306:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   1430a:	|  |  |  |  |     |  |  |   move.b (a0),d1
   1430c:	|  |  |  |  |     |  |  |   movea.l d0,a0
   1430e:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   14310:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   14314:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   14318:	|  |  |  |  |     |  |      move.b (a0),d0
   1431a:	|  |  |  |  |     |  '----- bne.s 142fa <vsprintf2+0x88>
                    }
                    break;
   1431c:	|  |  |  |  |  ,--|-------- bra.w 143b4 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   14320:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   14324:	|  |  |  |  |  |            movea.l 56(sp),a0
   14328:	|  |  |  |  |  |            move.l (a0),d0
   1432a:	|  |  |  |  |  |            move.l d0,d1
   1432c:	|  |  |  |  |  |            subq.l #1,d1
   1432e:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   14332:	|  |  |  |  |  |        ,-- bra.s 14354 <vsprintf2+0xe2>
                        *s++ = *sval++;
   14334:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   14338:	|  |  |  |  |  |     |  |   move.l d1,d2
   1433a:	|  |  |  |  |  |     |  |   addq.l #1,d2
   1433c:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   14340:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   14344:	|  |  |  |  |  |     |  |   move.l d0,d2
   14346:	|  |  |  |  |  |     |  |   addq.l #1,d2
   14348:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   1434c:	|  |  |  |  |  |     |  |   movea.l d1,a0
   1434e:	|  |  |  |  |  |     |  |   move.b (a0),d1
   14350:	|  |  |  |  |  |     |  |   movea.l d0,a0
   14352:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   14354:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   14358:	|  |  |  |  |  |     |      move.b (a0),d0
   1435a:	|  |  |  |  |  |     '----- bne.s 14334 <vsprintf2+0xc2>
                    }
                    break;
   1435c:	|  |  |  |  |  +----------- bra.s 143b4 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   1435e:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   14362:	|  |  |  |     |            movea.l 56(sp),a0
   14366:	|  |  |  |     |            move.l (a0),d0
   14368:	|  |  |  |     |            move.l d0,d1
   1436a:	|  |  |  |     |            subq.l #1,d1
   1436c:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   14370:	|  |  |  |     |            move.l 40(sp),d0
   14374:	|  |  |  |     |            move.l d0,d2
   14376:	|  |  |  |     |            addq.l #1,d2
   14378:	|  |  |  |     |            move.l d2,40(sp)
   1437c:	|  |  |  |     |            move.l 24(sp),d1
   14380:	|  |  |  |     |            movea.l d0,a0
   14382:	|  |  |  |     |            move.b d1,(a0)
                    break;
   14384:	|  |  |  |     +----------- bra.s 143b4 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   14386:	|  |  |  '-----|----------> move.l 40(sp),d0
   1438a:	|  |  |        |            move.l d0,d1
   1438c:	|  |  |        |            addq.l #1,d1
   1438e:	|  |  |        |            move.l d1,40(sp)
   14392:	|  |  |        |            movea.l 36(sp),a0
   14396:	|  |  |        |            move.b (a0),d1
   14398:	|  |  |        |            movea.l d0,a0
   1439a:	|  |  |        |            move.b d1,(a0)
                    break;
   1439c:	|  |  |        +----------- bra.s 143b4 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   1439e:	|  |  '--------|----------> move.l 40(sp),d0
   143a2:	|  |           |            move.l d0,d1
   143a4:	|  |           |            addq.l #1,d1
   143a6:	|  |           |            move.l d1,40(sp)
   143aa:	|  |           |            movea.l 36(sp),a0
   143ae:	|  |           |            move.b (a0),d1
   143b0:	|  |           |            movea.l d0,a0
   143b2:	|  |           |            move.b d1,(a0)
        }
        p++;
   143b4:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   143b8:	|  '----------------------> movea.l 36(sp),a0
   143bc:	|                           move.b (a0),d0
   143be:	'-------------------------- bne.w 14288 <vsprintf2+0x16>
    }
    *s = '\0';
   143c2:	                            movea.l 40(sp),a0
   143c6:	                            clr.b (a0)
    return s - str;
   143c8:	                            move.l 40(sp),d0
   143cc:	                            sub.l 48(sp),d0
}
   143d0:	                            move.l (sp)+,d2
   143d2:	                            lea 40(sp),sp
   143d6:	                            rts

000143d8 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   143d8:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   143da:	moveq #16,d0
   143dc:	add.l sp,d0
   143de:	move.l d0,d1
   143e0:	addq.l #4,d1
   143e2:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   143e6:	move.l 16(sp),d0
   143ea:	move.l 4(sp),-(sp)
   143ee:	move.l d0,-(sp)
   143f0:	move.l 20(sp),-(sp)
   143f4:	jsr 14272 <vsprintf2>
   143fa:	lea 12(sp),sp
   143fe:	move.l d0,(sp)
    va_end(args);
   14400:	clr.l 4(sp)

    return done;
   14404:	move.l (sp),d0
}
   14406:	addq.l #8,sp
   14408:	rts

0001440a <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   1440a:	       lea -20(sp),sp
   1440e:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14410:	       moveq #12,d0
   14412:	       move.l d0,20(sp)
   14416:	       clr.l 16(sp)
   1441a:	       move.l 1ce8a <SysBase>,d0
   14420:	       movea.l d0,a6
   14422:	       move.l 20(sp),d0
   14426:	       move.l 16(sp),d1
   1442a:	       jsr -684(a6)
   1442e:	       move.l d0,12(sp)
   14432:	       move.l 12(sp),d0
   14436:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   1443a:	   ,-- bne.s 14440 <addVarToStack+0x36>
   1443c:	   |   clr.w d0
   1443e:	,--|-- bra.s 14488 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   14440:	|  '-> move.l 8(sp),d0
   14444:	|      move.l d0,-(sp)
   14446:	|      move.l 32(sp),-(sp)
   1444a:	|      jsr 14f6c <copyMain>
   14450:	|      addq.l #8,sp
   14452:	|      tst.w d0
   14454:	|  ,-- bne.s 14470 <addVarToStack+0x66>
        FreeVec(newStack);
   14456:	|  |   move.l 8(sp),4(sp)
   1445c:	|  |   move.l 1ce8a <SysBase>,d0
   14462:	|  |   movea.l d0,a6
   14464:	|  |   movea.l 4(sp),a1
   14468:	|  |   jsr -690(a6)
        return FALSE;
   1446c:	|  |   clr.w d0
   1446e:	+--|-- bra.s 14488 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   14470:	|  '-> movea.l 32(sp),a0
   14474:	|      move.l (a0),d0
   14476:	|      movea.l 8(sp),a0
   1447a:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1447e:	|      movea.l 32(sp),a0
   14482:	|      move.l 8(sp),(a0)
    return TRUE;
   14486:	|      moveq #1,d0
}
   14488:	'----> movea.l (sp)+,a6
   1448a:	       lea 20(sp),sp
   1448e:	       rts

00014490 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   14490:	       lea -16(sp),sp
   14494:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14496:	       moveq #12,d0
   14498:	       move.l d0,16(sp)
   1449c:	       clr.l 12(sp)
   144a0:	       move.l 1ce8a <SysBase>,d0
   144a6:	       movea.l d0,a6
   144a8:	       move.l 16(sp),d0
   144ac:	       move.l 12(sp),d1
   144b0:	       jsr -684(a6)
   144b4:	       move.l d0,8(sp)
   144b8:	       move.l 8(sp),d0
   144bc:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   144c0:	   ,-- bne.s 144c6 <addVarToStackQuick+0x36>
   144c2:	   |   clr.w d0
   144c4:	,--|-- bra.s 144fc <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   144c6:	|  '-> move.l 4(sp),d0
   144ca:	|      pea 8 <_start+0x8>
   144ce:	|      move.l 28(sp),-(sp)
   144d2:	|      move.l d0,-(sp)
   144d4:	|      jsr 17662 <memcpy>
   144da:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   144de:	|      movea.l 24(sp),a0
   144e2:	|      clr.l (a0)

    newStack->next = *thisStack;
   144e4:	|      movea.l 28(sp),a0
   144e8:	|      move.l (a0),d0
   144ea:	|      movea.l 4(sp),a0
   144ee:	|      move.l d0,8(a0)
    *thisStack = newStack;
   144f2:	|      movea.l 28(sp),a0
   144f6:	|      move.l 4(sp),(a0)
    return TRUE;
   144fa:	|      moveq #1,d0
}
   144fc:	'----> movea.l (sp)+,a6
   144fe:	       lea 16(sp),sp
   14502:	       rts

00014504 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   14504:	       lea -16(sp),sp
   14508:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   1450a:	       movea.l 24(sp),a0
   1450e:	       move.l (a0),d0
   14510:	       moveq #1,d1
   14512:	       cmp.l d0,d1
   14514:	   ,-- bne.s 1453e <addVariablesInSecond+0x3a>
   14516:	   |   movea.l 28(sp),a0
   1451a:	   |   move.l (a0),d0
   1451c:	   |   moveq #1,d1
   1451e:	   |   cmp.l d0,d1
   14520:	   +-- bne.s 1453e <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   14522:	   |   movea.l 28(sp),a0
   14526:	   |   move.l 4(a0),d1
   1452a:	   |   movea.l 24(sp),a0
   1452e:	   |   move.l 4(a0),d0
   14532:	   |   add.l d1,d0
   14534:	   |   movea.l 28(sp),a0
   14538:	   |   move.l d0,4(a0)
   1453c:	,--|-- bra.s 145b8 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   1453e:	|  '-> move.l 24(sp),-(sp)
   14542:	|      jsr 151a4 <getTextFromAnyVar>
   14548:	|      addq.l #4,sp
   1454a:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   1454e:	|      move.l 28(sp),-(sp)
   14552:	|      jsr 151a4 <getTextFromAnyVar>
   14558:	|      addq.l #4,sp
   1455a:	|      move.l d0,12(sp)

		unlinkVar(var2);
   1455e:	|      move.l 28(sp),-(sp)
   14562:	|      jsr 14e1c <unlinkVar>
   14568:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   1456a:	|      move.l 12(sp),-(sp)
   1456e:	|      move.l 20(sp),-(sp)
   14572:	|      jsr 140fa <joinStrings>
   14578:	|      addq.l #8,sp
   1457a:	|      movea.l 28(sp),a0
   1457e:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   14582:	|      movea.l 28(sp),a0
   14586:	|      moveq #3,d0
   14588:	|      move.l d0,(a0)
		FreeVec(string1);
   1458a:	|      move.l 16(sp),8(sp)
   14590:	|      move.l 1ce8a <SysBase>,d0
   14596:	|      movea.l d0,a6
   14598:	|      movea.l 8(sp),a1
   1459c:	|      jsr -690(a6)
		FreeVec(string2);
   145a0:	|      move.l 12(sp),4(sp)
   145a6:	|      move.l 1ce8a <SysBase>,d0
   145ac:	|      movea.l d0,a6
   145ae:	|      movea.l 4(sp),a1
   145b2:	|      jsr -690(a6)
	}
}
   145b6:	|      nop
   145b8:	'----> nop
   145ba:	       movea.l (sp)+,a6
   145bc:	       lea 16(sp),sp
   145c0:	       rts

000145c2 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   145c2:	movea.l 8(sp),a0
   145c6:	move.l 4(a0),-(sp)
   145ca:	move.l (a0),-(sp)
   145cc:	movea.l 12(sp),a0
   145d0:	move.l 4(a0),-(sp)
   145d4:	move.l (a0),-(sp)
   145d6:	jsr 145f8 <compareVars>
   145dc:	lea 16(sp),sp
   145e0:	move.l d0,-(sp)
   145e2:	pea 1 <_start+0x1>
   145e6:	move.l 16(sp),-(sp)
   145ea:	jsr 154c0 <setVariable>
   145f0:	lea 12(sp),sp
}
   145f4:	nop
   145f6:	rts

000145f8 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   145f8:	       subq.l #4,sp
	int re = 0;
   145fa:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   145fc:	       move.l 8(sp),d1
   14600:	       move.l 16(sp),d0
   14604:	       cmp.l d1,d0
   14606:	,----- bne.w 146ce <compareVars+0xd6>
		switch (var1.varType) {
   1460a:	|      move.l 8(sp),d0
   1460e:	|      moveq #9,d1
   14610:	|      cmp.l d0,d1
   14612:	|  ,-- bcs.w 146b6 <compareVars+0xbe>
   14616:	|  |   add.l d0,d0
   14618:	|  |   movea.l d0,a0
   1461a:	|  |   adda.l #83494,a0
   14620:	|  |   move.w (a0),d0
   14622:	|  |   jmp (14626 <compareVars+0x2e>,pc,d0.w)
   14626:	|  |   ori.b #-112,(a4)
   1462a:	|  |   ori.l #5243024,(a0)
   14630:	|  |   ori.l #7733392,(a0)
   14636:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   1463c:	|  |   move.l d0,(sp)
			break;
   1463e:	+--|-- bra.w 146ce <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   14642:	|  |   move.l 12(sp),d1
   14646:	|  |   move.l 20(sp),d0
   1464a:	|  |   cmp.l d1,d0
   1464c:	|  |   seq d0
   1464e:	|  |   neg.b d0
   14650:	|  |   move.b d0,d0
   14652:	|  |   andi.l #255,d0
   14658:	|  |   move.l d0,(sp)
			break;
   1465a:	+--|-- bra.s 146ce <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   1465c:	|  |   move.l 12(sp),d1
   14660:	|  |   move.l 20(sp),d0
   14664:	|  |   cmp.l d1,d0
   14666:	|  |   seq d0
   14668:	|  |   neg.b d0
   1466a:	|  |   move.b d0,d0
   1466c:	|  |   andi.l #255,d0
   14672:	|  |   move.l d0,(sp)
			break;
   14674:	+--|-- bra.s 146ce <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   14676:	|  |   move.l 20(sp),d1
   1467a:	|  |   move.l 12(sp),d0
   1467e:	|  |   move.l d1,-(sp)
   14680:	|  |   move.l d0,-(sp)
   14682:	|  |   jsr 1407a <strcmp>
   14688:	|  |   addq.l #8,sp
   1468a:	|  |   tst.l d0
   1468c:	|  |   seq d0
   1468e:	|  |   neg.b d0
   14690:	|  |   move.b d0,d0
   14692:	|  |   andi.l #255,d0
   14698:	|  |   move.l d0,(sp)
			break;
   1469a:	+--|-- bra.s 146ce <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   1469c:	|  |   move.l 12(sp),d1
   146a0:	|  |   move.l 20(sp),d0
   146a4:	|  |   cmp.l d1,d0
   146a6:	|  |   seq d0
   146a8:	|  |   neg.b d0
   146aa:	|  |   move.b d0,d0
   146ac:	|  |   andi.l #255,d0
   146b2:	|  |   move.l d0,(sp)
			break;
   146b4:	+--|-- bra.s 146ce <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   146b6:	|  '-> move.l 12(sp),d1
   146ba:	|      move.l 20(sp),d0
   146be:	|      cmp.l d1,d0
   146c0:	|      seq d0
   146c2:	|      neg.b d0
   146c4:	|      move.b d0,d0
   146c6:	|      andi.l #255,d0
   146cc:	|      move.l d0,(sp)
		}
	}
	return re;
   146ce:	'----> move.l (sp),d0
}
   146d0:	       addq.l #4,sp
   146d2:	       rts

000146d4 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   146d4:	             lea -16(sp),sp
   146d8:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   146da:	             movea.l 28(sp),a0
   146de:	             moveq #6,d0
   146e0:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   146e2:	             moveq #12,d0
   146e4:	             move.l d0,12(sp)
   146e8:	             clr.l 8(sp)
   146ec:	             move.l 1ce8a <SysBase>,d0
   146f2:	             movea.l d0,a6
   146f4:	             move.l 12(sp),d0
   146f8:	             move.l 8(sp),d1
   146fc:	             jsr -684(a6)
   14700:	             move.l d0,4(sp)
   14704:	             move.l 4(sp),d0
   14708:	             movea.l 28(sp),a0
   1470c:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   14710:	             movea.l 28(sp),a0
   14714:	             move.l 4(a0),d0
   14718:	         ,-- bne.s 14720 <copyStack+0x4c>
   1471a:	         |   clr.w d0
   1471c:	,--------|-- bra.w 147a2 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   14720:	|        '-> movea.l 28(sp),a0
   14724:	|            movea.l 4(a0),a0
   14728:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   1472a:	|            movea.l 28(sp),a0
   1472e:	|            movea.l 4(a0),a0
   14732:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   14736:	|            movea.l 28(sp),a0
   1473a:	|            movea.l 4(a0),a0
   1473e:	|            moveq #1,d0
   14740:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   14744:	|            movea.l 24(sp),a0
   14748:	|            movea.l 4(a0),a0
   1474c:	|            move.l (a0),16(sp)

	while (a) {
   14750:	|     ,----- bra.s 1479a <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   14752:	|  ,--|----> movea.l 28(sp),a0
   14756:	|  |  |      move.l 4(a0),d0
   1475a:	|  |  |      move.l d0,d1
   1475c:	|  |  |      move.l 16(sp),d0
   14760:	|  |  |      move.l d1,-(sp)
   14762:	|  |  |      move.l d0,-(sp)
   14764:	|  |  |      jsr 1440a <addVarToStack>
   1476a:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   1476c:	|  |  |      movea.l 28(sp),a0
   14770:	|  |  |      movea.l 4(a0),a0
   14774:	|  |  |      move.l 4(a0),d0
   14778:	|  |  |  ,-- bne.s 14790 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   1477a:	|  |  |  |   movea.l 28(sp),a0
   1477e:	|  |  |  |   movea.l 4(a0),a1
   14782:	|  |  |  |   movea.l 28(sp),a0
   14786:	|  |  |  |   movea.l 4(a0),a0
   1478a:	|  |  |  |   move.l (a1),d0
   1478c:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   14790:	|  |  |  '-> movea.l 16(sp),a0
   14794:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   1479a:	|  |  '----> tst.l 16(sp)
   1479e:	|  '-------- bne.s 14752 <copyStack+0x7e>
	}

	return TRUE;
   147a0:	|            moveq #1,d0
}
   147a2:	'----------> movea.l (sp)+,a6
   147a4:	             lea 16(sp),sp
   147a8:	             rts

000147aa <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   147aa:	                lea -20(sp),sp
   147ae:	                move.l a6,-(sp)
   147b0:	                move.l 36(sp),d0
   147b4:	                move.w d0,d0
   147b6:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   147ba:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   147c0:	                clr.l 16(sp)

    while (*huntVar) {
   147c4:	   ,----------- bra.s 14842 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   147c6:	,--|----------> movea.l 20(sp),a0
   147ca:	|  |            movea.l (a0),a0
   147cc:	|  |            movea.l 28(sp),a1
   147d0:	|  |            move.l 4(a1),-(sp)
   147d4:	|  |            move.l (a1),-(sp)
   147d6:	|  |            move.l 4(a0),-(sp)
   147da:	|  |            move.l (a0),-(sp)
   147dc:	|  |            jsr 145f8 <compareVars>
   147e2:	|  |            lea 16(sp),sp
   147e6:	|  |            tst.l d0
   147e8:	|  |  ,-------- beq.s 14834 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   147ea:	|  |  |         movea.l 20(sp),a0
   147ee:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   147f2:	|  |  |         movea.l 12(sp),a0
   147f6:	|  |  |         move.l 8(a0),d0
   147fa:	|  |  |         movea.l 20(sp),a0
   147fe:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   14800:	|  |  |         move.l 12(sp),d0
   14804:	|  |  |         move.l d0,-(sp)
   14806:	|  |  |         jsr 14e1c <unlinkVar>
   1480c:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   1480e:	|  |  |         move.l 12(sp),8(sp)
   14814:	|  |  |         move.l 1ce8a <SysBase>,d0
   1481a:	|  |  |         movea.l d0,a6
   1481c:	|  |  |         movea.l 8(sp),a1
   14820:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   14824:	|  |  |         tst.w 6(sp)
   14828:	|  |  |     ,-- bne.s 1482e <deleteVarFromStack+0x84>
   1482a:	|  |  |     |   moveq #1,d0
   1482c:	|  |  |  ,--|-- bra.s 14850 <deleteVarFromStack+0xa6>
            reply++;
   1482e:	|  |  |  |  '-> addq.l #1,16(sp)
   14832:	|  +--|--|----- bra.s 14842 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   14834:	|  |  '--|----> movea.l 20(sp),a0
   14838:	|  |     |      move.l (a0),d0
   1483a:	|  |     |      move.l d0,d1
   1483c:	|  |     |      addq.l #8,d1
   1483e:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   14842:	|  '-----|----> movea.l 20(sp),a0
   14846:	|        |      move.l (a0),d0
   14848:	'--------|----- bne.w 147c6 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   1484c:	         |      move.l 16(sp),d0
}
   14850:	         '----> movea.l (sp)+,a6
   14852:	                lea 20(sp),sp
   14856:	                rts

00014858 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   14858:	       movea.l 4(sp),a0
   1485c:	       move.l 4(a0),d0
   14860:	       cmp.l 8(sp),d0
   14864:	   ,-- bhi.s 1486a <fastArrayGetByIndex+0x12>
   14866:	   |   moveq #0,d0
   14868:	,--|-- bra.s 14878 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   1486a:	|  '-> movea.l 4(sp),a0
   1486e:	|      move.l (a0),d1
   14870:	|      move.l 8(sp),d0
   14874:	|      lsl.l #3,d0
   14876:	|      add.l d1,d0
}
   14878:	'----> rts

0001487a <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   1487a:	                lea -32(sp),sp
   1487e:	                move.l a6,-(sp)
   14880:	                move.l a2,-(sp)
    struct persona *p = NULL;
   14882:	                clr.l 36(sp)

    switch (thisVar->varType) {
   14886:	                movea.l 44(sp),a0
   1488a:	                move.l (a0),d0
   1488c:	                moveq #8,d1
   1488e:	                cmp.l d0,d1
   14890:	            ,-- beq.s 1489e <getCostumeFromVar+0x24>
   14892:	            |   moveq #9,d1
   14894:	            |   cmp.l d0,d1
   14896:	   ,--------|-- beq.w 1494c <getCostumeFromVar+0xd2>
   1489a:	,--|--------|-- bra.w 14956 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   1489e:	|  |        '-> moveq #8,d0
   148a0:	|  |            move.l d0,28(sp)
   148a4:	|  |            clr.l 24(sp)
   148a8:	|  |            move.l 1ce8a <SysBase>,d0
   148ae:	|  |            movea.l d0,a6
   148b0:	|  |            move.l 28(sp),d0
   148b4:	|  |            move.l 24(sp),d1
   148b8:	|  |            jsr -684(a6)
   148bc:	|  |            move.l d0,20(sp)
   148c0:	|  |            move.l 20(sp),d0
   148c4:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   148c8:	|  |        ,-- bne.s 148d0 <getCostumeFromVar+0x56>
   148ca:	|  |        |   moveq #0,d0
   148cc:	|  |  ,-----|-- bra.w 14980 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   148d0:	|  |  |     '-> movea.l 36(sp),a0
   148d4:	|  |  |         moveq #1,d1
   148d6:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   148da:	|  |  |         moveq #12,d0
   148dc:	|  |  |         move.l d0,16(sp)
   148e0:	|  |  |         clr.l 12(sp)
   148e4:	|  |  |         move.l 1ce8a <SysBase>,d0
   148ea:	|  |  |         movea.l d0,a6
   148ec:	|  |  |         move.l 16(sp),d0
   148f0:	|  |  |         move.l 12(sp),d1
   148f4:	|  |  |         jsr -684(a6)
   148f8:	|  |  |         move.l d0,8(sp)
   148fc:	|  |  |         move.l 8(sp),d0
   14900:	|  |  |         movea.l 36(sp),a0
   14904:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14906:	|  |  |         movea.l 36(sp),a0
   1490a:	|  |  |         move.l (a0),d0
   1490c:	|  |  |     ,-- bne.s 14912 <getCostumeFromVar+0x98>
   1490e:	|  |  |     |   moveq #0,d0
   14910:	|  |  +-----|-- bra.s 14980 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   14912:	|  |  |     '-> clr.l 32(sp)
   14916:	|  |  |     ,-- bra.s 14942 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14918:	|  |  |  ,--|-> movea.l 44(sp),a0
   1491c:	|  |  |  |  |   move.l 4(a0),d0
   14920:	|  |  |  |  |   movea.l 36(sp),a0
   14924:	|  |  |  |  |   movea.l (a0),a0
   14926:	|  |  |  |  |   move.l 32(sp),d1
   1492a:	|  |  |  |  |   add.l d1,d1
   1492c:	|  |  |  |  |   add.l d1,d1
   1492e:	|  |  |  |  |   lea (0,a0,d1.l),a2
   14932:	|  |  |  |  |   move.l d0,-(sp)
   14934:	|  |  |  |  |   jsr 9886 <copyAnim>
   1493a:	|  |  |  |  |   addq.l #4,sp
   1493c:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   1493e:	|  |  |  |  |   addq.l #1,32(sp)
   14942:	|  |  |  |  '-> moveq #2,d1
   14944:	|  |  |  |      cmp.l 32(sp),d1
   14948:	|  |  |  '----- bge.s 14918 <getCostumeFromVar+0x9e>
            }
            break;
   1494a:	|  |  |     ,-- bra.s 1497c <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   1494c:	|  '--|-----|-> movea.l 44(sp),a0
   14950:	|     |     |   move.l 4(a0),d0
   14954:	|     +-----|-- bra.s 14980 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14956:	'-----|-----|-> movea.l 44(sp),a0
   1495a:	      |     |   move.l (a0),d0
   1495c:	      |     |   add.l d0,d0
   1495e:	      |     |   movea.l d0,a1
   14960:	      |     |   adda.l d0,a1
   14962:	      |     |   lea 1cd64 <typeName>,a0
   14968:	      |     |   move.l (0,a1,a0.l),d0
   1496c:	      |     |   move.l d0,-(sp)
   1496e:	      |     |   pea 1a3c0 <PutChar+0x2270>
   14974:	      |     |   jsr 176ae <KPrintF>
   1497a:	      |     |   addq.l #8,sp
    }

    return p;
   1497c:	      |     '-> move.l 36(sp),d0
}
   14980:	      '-------> movea.l (sp)+,a2
   14982:	                movea.l (sp)+,a6
   14984:	                lea 32(sp),sp
   14988:	                rts

0001498a <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   1498a:	                lea -96(sp),sp
   1498e:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   14992:	                move.l 116(sp),-(sp)
   14996:	                pea 1a3f8 <PutChar+0x22a8>
   1499c:	                jsr 140fa <joinStrings>
   149a2:	                addq.l #8,sp
   149a4:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   149a8:	            ,-- bne.s 149b0 <getSavedGamesStack+0x26>
   149aa:	            |   clr.w d0
   149ac:	,-----------|-- bra.w 14bc4 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   149b0:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   149b4:	|               move.l #107514,98(sp)
   149bc:	|               moveq #-2,d0
   149be:	|               move.l d0,94(sp)
   149c2:	|               move.l 1ce92 <DOSBase>,d0
   149c8:	|               movea.l d0,a6
   149ca:	|               move.l 98(sp),d1
   149ce:	|               move.l 94(sp),d2
   149d2:	|               jsr -84(a6)
   149d6:	|               move.l d0,90(sp)
   149da:	|               move.l 90(sp),d0
   149de:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   149e2:	|           ,-- bne.s 149ea <getSavedGamesStack+0x60>
   149e4:	|           |   clr.w d0
   149e6:	+-----------|-- bra.w 14bc4 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   149ea:	|           '-> move.l #260,82(sp)
   149f2:	|               move.l #65536,78(sp)
   149fa:	|               move.l 1ce8a <SysBase>,d0
   14a00:	|               movea.l d0,a6
   14a02:	|               move.l 82(sp),d0
   14a06:	|               move.l 78(sp),d1
   14a0a:	|               jsr -684(a6)
   14a0e:	|               move.l d0,74(sp)
   14a12:	|               move.l 74(sp),d0
   14a16:	|               move.l d0,70(sp)
	if (!fib) {
   14a1a:	|           ,-- bne.s 14a38 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14a1c:	|           |   move.l 86(sp),22(sp)
   14a22:	|           |   move.l 1ce92 <DOSBase>,d0
   14a28:	|           |   movea.l d0,a6
   14a2a:	|           |   move.l 22(sp),d1
   14a2e:	|           |   jsr -90(a6)
		return FALSE;
   14a32:	|           |   clr.w d0
   14a34:	+-----------|-- bra.w 14bc4 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   14a38:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   14a3c:	|               move.l 86(sp),66(sp)
   14a42:	|               move.l 70(sp),62(sp)
   14a48:	|               move.l 1ce92 <DOSBase>,d0
   14a4e:	|               movea.l d0,a6
   14a50:	|               move.l 66(sp),d1
   14a54:	|               move.l 62(sp),d2
   14a58:	|               jsr -102(a6)
   14a5c:	|               move.l d0,58(sp)
   14a60:	|               move.l 58(sp),d0
   14a64:	|  ,----------- beq.w 14b78 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   14a68:	|  |        ,-- bra.w 14b44 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   14a6c:	|  |  ,-----|-> move.l 70(sp),d2
   14a70:	|  |  |     |   addq.l #8,d2
   14a72:	|  |  |     |   move.l 70(sp),d0
   14a76:	|  |  |     |   addq.l #8,d0
   14a78:	|  |  |     |   move.l d0,-(sp)
   14a7a:	|  |  |     |   jsr 140ba <strlen>
   14a80:	|  |  |     |   addq.l #4,sp
   14a82:	|  |  |     |   move.l d0,d3
   14a84:	|  |  |     |   move.l 116(sp),-(sp)
   14a88:	|  |  |     |   jsr 140ba <strlen>
   14a8e:	|  |  |     |   addq.l #4,sp
   14a90:	|  |  |     |   move.l d3,d1
   14a92:	|  |  |     |   sub.l d0,d1
   14a94:	|  |  |     |   move.l d2,d0
   14a96:	|  |  |     |   add.l d1,d0
   14a98:	|  |  |     |   move.l 116(sp),-(sp)
   14a9c:	|  |  |     |   move.l d0,-(sp)
   14a9e:	|  |  |     |   jsr 1407a <strcmp>
   14aa4:	|  |  |     |   addq.l #8,sp
   14aa6:	|  |  |     |   tst.l d0
   14aa8:	|  |  |     +-- bne.w 14b44 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   14aac:	|  |  |     |   move.l 70(sp),d0
   14ab0:	|  |  |     |   addq.l #8,d0
   14ab2:	|  |  |     |   move.l d0,-(sp)
   14ab4:	|  |  |     |   jsr 140ba <strlen>
   14aba:	|  |  |     |   addq.l #4,sp
   14abc:	|  |  |     |   move.l d0,d2
   14abe:	|  |  |     |   move.l 116(sp),-(sp)
   14ac2:	|  |  |     |   jsr 140ba <strlen>
   14ac8:	|  |  |     |   addq.l #4,sp
   14aca:	|  |  |     |   move.l d0,d1
   14acc:	|  |  |     |   move.l d2,d0
   14ace:	|  |  |     |   sub.l d1,d0
   14ad0:	|  |  |     |   movea.l 70(sp),a0
   14ad4:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14ad8:	|  |  |     |   move.l 70(sp),d0
   14adc:	|  |  |     |   addq.l #8,d0
   14ade:	|  |  |     |   move.l d0,-(sp)
   14ae0:	|  |  |     |   jsr 118 <decodeFilename>
   14ae6:	|  |  |     |   addq.l #4,sp
   14ae8:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   14aec:	|  |  |     |   move.l 42(sp),-(sp)
   14af0:	|  |  |     |   lea 18(sp),a0
   14af4:	|  |  |     |   move.l a0,-(sp)
   14af6:	|  |  |     |   jsr 14df0 <makeTextVar>
   14afc:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14afe:	|  |  |     |   move.l 42(sp),38(sp)
   14b04:	|  |  |     |   move.l 1ce8a <SysBase>,d0
   14b0a:	|  |  |     |   movea.l d0,a6
   14b0c:	|  |  |     |   movea.l 38(sp),a1
   14b10:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14b14:	|  |  |     |   move.l 112(sp),d0
   14b18:	|  |  |     |   move.l d0,-(sp)
   14b1a:	|  |  |     |   lea 18(sp),a0
   14b1e:	|  |  |     |   move.l a0,-(sp)
   14b20:	|  |  |     |   jsr 1440a <addVarToStack>
   14b26:	|  |  |     |   addq.l #8,sp
   14b28:	|  |  |     |   tst.w d0
   14b2a:	|  |  |  ,--|-- beq.s 14b7c <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14b2c:	|  |  |  |  |   movea.l 112(sp),a0
   14b30:	|  |  |  |  |   move.l 4(a0),d0
   14b34:	|  |  |  |  +-- bne.s 14b44 <getSavedGamesStack+0x1ba>
   14b36:	|  |  |  |  |   movea.l 112(sp),a0
   14b3a:	|  |  |  |  |   move.l (a0),d0
   14b3c:	|  |  |  |  |   movea.l 112(sp),a0
   14b40:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   14b44:	|  |  |  |  '-> move.l 86(sp),54(sp)
   14b4a:	|  |  |  |      move.l 70(sp),50(sp)
   14b50:	|  |  |  |      move.l 1ce92 <DOSBase>,d0
   14b56:	|  |  |  |      movea.l d0,a6
   14b58:	|  |  |  |      move.l 54(sp),d1
   14b5c:	|  |  |  |      move.l 50(sp),d2
   14b60:	|  |  |  |      jsr -108(a6)
   14b64:	|  |  |  |      move.l d0,46(sp)
   14b68:	|  |  |  |      move.l 46(sp),d0
   14b6c:	|  |  '--|----- bne.w 14a6c <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14b70:	|  |     |      move.w #1,106(sp)
   14b76:	|  |     |  ,-- bra.s 14b7e <getSavedGamesStack+0x1f4>
	}

cleanup:
   14b78:	|  '-----|--|-> nop
   14b7a:	|        |  +-- bra.s 14b7e <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   14b7c:	|        '--|-> nop
	FreeVec(fib);
   14b7e:	|           '-> move.l 70(sp),34(sp)
   14b84:	|               move.l 1ce8a <SysBase>,d0
   14b8a:	|               movea.l d0,a6
   14b8c:	|               movea.l 34(sp),a1
   14b90:	|               jsr -690(a6)
	UnLock(dirLock);
   14b94:	|               move.l 86(sp),30(sp)
   14b9a:	|               move.l 1ce92 <DOSBase>,d0
   14ba0:	|               movea.l d0,a6
   14ba2:	|               move.l 30(sp),d1
   14ba6:	|               jsr -90(a6)
	FreeVec(pattern);
   14baa:	|               move.l 102(sp),26(sp)
   14bb0:	|               move.l 1ce8a <SysBase>,d0
   14bb6:	|               movea.l d0,a6
   14bb8:	|               movea.l 26(sp),a1
   14bbc:	|               jsr -690(a6)
	return result;
   14bc0:	|               move.w 106(sp),d0
}
   14bc4:	'-------------> movem.l (sp)+,d2-d3/a6
   14bc8:	                lea 96(sp),sp
   14bcc:	                rts

00014bce <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   14bce:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   14bd0:	       movea.l 20(sp),a0
   14bd4:	       move.l (a0),d0
   14bd6:	       cmp.l 16(sp),d0
   14bda:	,----- beq.s 14c3e <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   14bdc:	|      move.l 16(sp),d0
   14be0:	|      add.l d0,d0
   14be2:	|      movea.l d0,a1
   14be4:	|      adda.l d0,a1
   14be6:	|      lea 1cd64 <typeName>,a0
   14bec:	|      move.l (0,a1,a0.l),d0
   14bf0:	|      move.l d0,-(sp)
   14bf2:	|      pea 1a3fc <PutChar+0x22ac>
   14bf8:	|      jsr 140fa <joinStrings>
   14bfe:	|      addq.l #8,sp
   14c00:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14c04:	|      movea.l 20(sp),a0
   14c08:	|      move.l (a0),d0
   14c0a:	|      add.l d0,d0
   14c0c:	|      movea.l d0,a1
   14c0e:	|      adda.l d0,a1
   14c10:	|      lea 1cd64 <typeName>,a0
   14c16:	|      move.l (0,a1,a0.l),d0
   14c1a:	|      move.l d0,-(sp)
   14c1c:	|      pea 1a43e <PutChar+0x22ee>
   14c22:	|      jsr 140fa <joinStrings>
   14c28:	|      addq.l #8,sp
   14c2a:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14c2c:	|      move.l (sp),-(sp)
   14c2e:	|      move.l 8(sp),-(sp)
   14c32:	|      jsr 176ae <KPrintF>
   14c38:	|      addq.l #8,sp

		return FALSE;
   14c3a:	|      clr.w d0
   14c3c:	|  ,-- bra.s 14c4e <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14c3e:	'--|-> movea.l 20(sp),a0
   14c42:	   |   move.l 4(a0),d0
   14c46:	   |   movea.l 12(sp),a0
   14c4a:	   |   move.l d0,(a0)
	return TRUE;
   14c4c:	   |   moveq #1,d0
}
   14c4e:	   '-> addq.l #8,sp
   14c50:	       rts

00014c52 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14c52:	move.l 8(sp),-(sp)
   14c56:	jsr 79e4 <getNumberedString>
   14c5c:	addq.l #4,sp
   14c5e:	move.l d0,-(sp)
   14c60:	move.l 8(sp),-(sp)
   14c64:	jsr 14df0 <makeTextVar>
   14c6a:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14c6c:	movea.l 4(sp),a0
   14c70:	move.l 4(a0),d0
   14c74:	sne d0
   14c76:	neg.b d0
   14c78:	move.b d0,d0
   14c7a:	andi.w #255,d0
}
   14c7e:	rts

00014c80 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14c80:	          subq.l #8,sp
    int size = stackSize(stacky);
   14c82:	          move.l 16(sp),-(sp)
   14c86:	          jsr 1552e <stackSize>
   14c8c:	          addq.l #4,sp
   14c8e:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14c92:	          move.l 4(sp),-(sp)
   14c96:	          move.l 16(sp),-(sp)
   14c9a:	          jsr 14cea <makeFastArraySize>
   14ca0:	          addq.l #8,sp
   14ca2:	          tst.w d0
   14ca4:	      ,-- bne.s 14caa <makeFastArrayFromStack+0x2a>
   14ca6:	      |   clr.w d0
   14ca8:	,-----|-- bra.s 14ce6 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   14caa:	|     '-> movea.l 16(sp),a0
   14cae:	|         move.l (a0),(sp)
    size = 0;
   14cb0:	|         clr.l 4(sp)
    while (allV) {
   14cb4:	|     ,-- bra.s 14ce0 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14cb6:	|  ,--|-> movea.l 12(sp),a0
   14cba:	|  |  |   movea.l 4(a0),a0
   14cbe:	|  |  |   move.l (a0),d1
   14cc0:	|  |  |   move.l 4(sp),d0
   14cc4:	|  |  |   lsl.l #3,d0
   14cc6:	|  |  |   add.l d0,d1
   14cc8:	|  |  |   move.l (sp),d0
   14cca:	|  |  |   move.l d1,-(sp)
   14ccc:	|  |  |   move.l d0,-(sp)
   14cce:	|  |  |   jsr 14f6c <copyMain>
   14cd4:	|  |  |   addq.l #8,sp
        size++;
   14cd6:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14cda:	|  |  |   movea.l (sp),a0
   14cdc:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14ce0:	|  |  '-> tst.l (sp)
   14ce2:	|  '----- bne.s 14cb6 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14ce4:	|         moveq #1,d0
}
   14ce6:	'-------> addq.l #8,sp
   14ce8:	          rts

00014cea <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   14cea:	          lea -28(sp),sp
   14cee:	          move.l a6,-(sp)
    if (size < 0) {
   14cf0:	          tst.l 40(sp)
   14cf4:	      ,-- bge.s 14d0a <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14cf6:	      |   pea 1a483 <PutChar+0x2333>
   14cfc:	      |   jsr 176ae <KPrintF>
   14d02:	      |   addq.l #4,sp
		return FALSE;
   14d04:	      |   clr.w d0
   14d06:	,-----|-- bra.w 14de8 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14d0a:	|     '-> move.l 36(sp),-(sp)
   14d0e:	|         jsr 14e1c <unlinkVar>
   14d14:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14d16:	|         movea.l 36(sp),a0
   14d1a:	|         moveq #10,d0
   14d1c:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14d1e:	|         moveq #12,d0
   14d20:	|         move.l d0,24(sp)
   14d24:	|         clr.l 20(sp)
   14d28:	|         move.l 1ce8a <SysBase>,d0
   14d2e:	|         movea.l d0,a6
   14d30:	|         move.l 24(sp),d0
   14d34:	|         move.l 20(sp),d1
   14d38:	|         jsr -684(a6)
   14d3c:	|         move.l d0,16(sp)
   14d40:	|         move.l 16(sp),d0
   14d44:	|         movea.l 36(sp),a0
   14d48:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14d4c:	|         movea.l 36(sp),a0
   14d50:	|         move.l 4(a0),d0
   14d54:	|     ,-- bne.s 14d5c <makeFastArraySize+0x72>
   14d56:	|     |   clr.w d0
   14d58:	+-----|-- bra.w 14de8 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14d5c:	|     '-> move.l 40(sp),d0
   14d60:	|         lsl.l #3,d0
   14d62:	|         move.l d0,12(sp)
   14d66:	|         clr.l 8(sp)
   14d6a:	|         move.l 1ce8a <SysBase>,d0
   14d70:	|         movea.l d0,a6
   14d72:	|         move.l 12(sp),d0
   14d76:	|         move.l 8(sp),d1
   14d7a:	|         jsr -684(a6)
   14d7e:	|         move.l d0,4(sp)
   14d82:	|         move.l 4(sp),d0
   14d86:	|         movea.l 36(sp),a0
   14d8a:	|         movea.l 4(a0),a0
   14d8e:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14d90:	|         movea.l 36(sp),a0
   14d94:	|         movea.l 4(a0),a0
   14d98:	|         move.l (a0),d0
   14d9a:	|     ,-- bne.s 14da0 <makeFastArraySize+0xb6>
   14d9c:	|     |   clr.w d0
   14d9e:	+-----|-- bra.s 14de8 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14da0:	|     '-> clr.l 28(sp)
   14da4:	|     ,-- bra.s 14dc0 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14da6:	|  ,--|-> movea.l 36(sp),a0
   14daa:	|  |  |   movea.l 4(a0),a0
   14dae:	|  |  |   move.l (a0),d1
   14db0:	|  |  |   move.l 28(sp),d0
   14db4:	|  |  |   lsl.l #3,d0
   14db6:	|  |  |   movea.l d1,a0
   14db8:	|  |  |   adda.l d0,a0
   14dba:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   14dbc:	|  |  |   addq.l #1,28(sp)
   14dc0:	|  |  '-> move.l 28(sp),d0
   14dc4:	|  |      cmp.l 40(sp),d0
   14dc8:	|  '----- blt.s 14da6 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14dca:	|         movea.l 36(sp),a0
   14dce:	|         movea.l 4(a0),a0
   14dd2:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14dd8:	|         movea.l 36(sp),a0
   14ddc:	|         movea.l 4(a0),a0
   14de0:	|         moveq #1,d0
   14de2:	|         move.l d0,8(a0)
    return TRUE;
   14de6:	|         moveq #1,d0
}
   14de8:	'-------> movea.l (sp)+,a6
   14dea:	          lea 28(sp),sp
   14dee:	          rts

00014df0 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14df0:	move.l 4(sp),-(sp)
   14df4:	jsr 14e1c <unlinkVar>
   14dfa:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14dfc:	movea.l 4(sp),a0
   14e00:	moveq #3,d0
   14e02:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14e04:	move.l 8(sp),-(sp)
   14e08:	jsr b8 <copyString>
   14e0e:	addq.l #4,sp
   14e10:	movea.l 4(sp),a0
   14e14:	move.l d0,4(a0)
}
   14e18:	nop
   14e1a:	rts

00014e1c <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14e1c:	                      lea -16(sp),sp
   14e20:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14e22:	                      movea.l 24(sp),a0
   14e26:	                      move.l (a0),d0
   14e28:	                      moveq #10,d1
   14e2a:	                      cmp.l d0,d1
   14e2c:	            ,-------- beq.w 14ee4 <unlinkVar+0xc8>
   14e30:	            |         moveq #10,d1
   14e32:	            |         cmp.l d0,d1
   14e34:	,-----------|-------- bcs.w 14f58 <unlinkVar+0x13c>
   14e38:	|           |         moveq #8,d1
   14e3a:	|           |         cmp.l d0,d1
   14e3c:	|  ,--------|-------- beq.w 14f44 <unlinkVar+0x128>
   14e40:	|  |        |         moveq #8,d1
   14e42:	|  |        |         cmp.l d0,d1
   14e44:	+--|--------|-------- bcs.w 14f58 <unlinkVar+0x13c>
   14e48:	|  |        |         moveq #3,d1
   14e4a:	|  |        |         cmp.l d0,d1
   14e4c:	|  |        |     ,-- beq.s 14e58 <unlinkVar+0x3c>
   14e4e:	|  |        |     |   moveq #6,d1
   14e50:	|  |        |     |   cmp.l d0,d1
   14e52:	|  |        |  ,--|-- beq.s 14e7e <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14e54:	+--|--------|--|--|-- bra.w 14f58 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14e58:	|  |        |  |  '-> movea.l 24(sp),a0
   14e5c:	|  |        |  |      move.l 4(a0),4(sp)
   14e62:	|  |        |  |      move.l 1ce8a <SysBase>,d0
   14e68:	|  |        |  |      movea.l d0,a6
   14e6a:	|  |        |  |      movea.l 4(sp),a1
   14e6e:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14e72:	|  |        |  |      movea.l 24(sp),a0
   14e76:	|  |        |  |      clr.l 4(a0)
		break;
   14e7a:	|  |  ,-----|--|----- bra.w 14f62 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14e7e:	|  |  |     |  '----> movea.l 24(sp),a0
   14e82:	|  |  |     |         movea.l 4(a0),a0
   14e86:	|  |  |     |         move.l 8(a0),d0
   14e8a:	|  |  |     |         subq.l #1,d0
   14e8c:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14e90:	|  |  |     |         movea.l 24(sp),a0
   14e94:	|  |  |     |         movea.l 4(a0),a0
   14e98:	|  |  |     |         move.l 8(a0),d0
   14e9c:	|  |  |  ,--|-------- bgt.w 14f5c <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14ea0:	|  |  |  |  |     ,-- bra.s 14eb4 <unlinkVar+0x98>
   14ea2:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   14ea6:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14eaa:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14eac:	|  |  |  |  |  |  |   jsr 15552 <trimStack>
   14eb2:	|  |  |  |  |  |  |   addq.l #4,sp
   14eb4:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   14eb8:	|  |  |  |  |  |      movea.l 4(a0),a0
   14ebc:	|  |  |  |  |  |      move.l (a0),d0
   14ebe:	|  |  |  |  |  '----- bne.s 14ea2 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14ec0:	|  |  |  |  |         movea.l 24(sp),a0
   14ec4:	|  |  |  |  |         move.l 4(a0),8(sp)
   14eca:	|  |  |  |  |         move.l 1ce8a <SysBase>,d0
   14ed0:	|  |  |  |  |         movea.l d0,a6
   14ed2:	|  |  |  |  |         movea.l 8(sp),a1
   14ed6:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14eda:	|  |  |  |  |         movea.l 24(sp),a0
   14ede:	|  |  |  |  |         clr.l 4(a0)
		break;
   14ee2:	|  |  |  +--|-------- bra.s 14f5c <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14ee4:	|  |  |  |  '-------> movea.l 24(sp),a0
   14ee8:	|  |  |  |            movea.l 4(a0),a0
   14eec:	|  |  |  |            move.l 8(a0),d0
   14ef0:	|  |  |  |            subq.l #1,d0
   14ef2:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14ef6:	|  |  |  |            movea.l 24(sp),a0
   14efa:	|  |  |  |            movea.l 4(a0),a0
   14efe:	|  |  |  |            move.l 8(a0),d0
   14f02:	|  |  |  |        ,-- bgt.s 14f60 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14f04:	|  |  |  |        |   movea.l 24(sp),a0
   14f08:	|  |  |  |        |   movea.l 4(a0),a0
   14f0c:	|  |  |  |        |   move.l (a0),16(sp)
   14f10:	|  |  |  |        |   move.l 1ce8a <SysBase>,d0
   14f16:	|  |  |  |        |   movea.l d0,a6
   14f18:	|  |  |  |        |   movea.l 16(sp),a1
   14f1c:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14f20:	|  |  |  |        |   movea.l 24(sp),a0
   14f24:	|  |  |  |        |   move.l 4(a0),12(sp)
   14f2a:	|  |  |  |        |   move.l 1ce8a <SysBase>,d0
   14f30:	|  |  |  |        |   movea.l d0,a6
   14f32:	|  |  |  |        |   movea.l 12(sp),a1
   14f36:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14f3a:	|  |  |  |        |   movea.l 24(sp),a0
   14f3e:	|  |  |  |        |   clr.l 4(a0)
		break;
   14f42:	|  |  |  |        +-- bra.s 14f60 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14f44:	|  '--|--|--------|-> movea.l 24(sp),a0
   14f48:	|     |  |        |   move.l 4(a0),d0
   14f4c:	|     |  |        |   move.l d0,-(sp)
   14f4e:	|     |  |        |   jsr 9c52 <deleteAnim>
   14f54:	|     |  |        |   addq.l #4,sp
		break;
   14f56:	|     +--|--------|-- bra.s 14f62 <unlinkVar+0x146>
		break;
   14f58:	'-----|--|--------|-> nop
   14f5a:	      +--|--------|-- bra.s 14f62 <unlinkVar+0x146>
		break;
   14f5c:	      |  '--------|-> nop
   14f5e:	      +-----------|-- bra.s 14f62 <unlinkVar+0x146>
		break;
   14f60:	      |           '-> nop
	}
}
   14f62:	      '-------------> nop
   14f64:	                      movea.l (sp)+,a6
   14f66:	                      lea 16(sp),sp
   14f6a:	                      rts

00014f6c <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14f6c:	       movea.l 4(sp),a0
   14f70:	       move.l (a0),d0
   14f72:	       movea.l 8(sp),a0
   14f76:	       move.l d0,(a0)
	switch (to->varType) {
   14f78:	       movea.l 8(sp),a0
   14f7c:	       move.l (a0),d0
   14f7e:	       moveq #10,d1
   14f80:	       cmp.l d0,d1
   14f82:	,----- bcs.w 15074 <copyMain+0x108>
   14f86:	|      add.l d0,d0
   14f88:	|      movea.l d0,a0
   14f8a:	|      adda.l #85910,a0
   14f90:	|      move.w (a0),d0
   14f92:	|      jmp (14f96 <copyMain+0x2a>,pc,d0.w)
   14f96:	|      .short 0x00da
   14f98:	|      ori.b #22,(a6)
   14f9c:	|      ori.w #22,(a4)
   14fa0:	|      ori.b #-126,(a6)
   14fa4:	|      ori.b #-68,(a6)
   14fa8:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14fb0:	|      move.l 4(a0),d0
   14fb4:	|      movea.l 8(sp),a0
   14fb8:	|      move.l d0,4(a0)
		return TRUE;
   14fbc:	|      moveq #1,d0
   14fbe:	|  ,-- bra.w 15086 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14fc2:	|  |   movea.l 4(sp),a0
   14fc6:	|  |   move.l 4(a0),d0
   14fca:	|  |   movea.l 8(sp),a0
   14fce:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14fd2:	|  |   movea.l 8(sp),a0
   14fd6:	|  |   movea.l 4(a0),a0
   14fda:	|  |   move.l 8(a0),d0
   14fde:	|  |   addq.l #1,d0
   14fe0:	|  |   move.l d0,8(a0)
		return TRUE;
   14fe4:	|  |   moveq #1,d0
   14fe6:	|  +-- bra.w 15086 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14fea:	|  |   movea.l 4(sp),a0
   14fee:	|  |   move.l 4(a0),d0
   14ff2:	|  |   move.l d0,-(sp)
   14ff4:	|  |   jsr b8 <copyString>
   14ffa:	|  |   addq.l #4,sp
   14ffc:	|  |   movea.l 8(sp),a0
   15000:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   15004:	|  |   movea.l 8(sp),a0
   15008:	|  |   move.l 4(a0),d0
   1500c:	|  |   sne d0
   1500e:	|  |   neg.b d0
   15010:	|  |   move.b d0,d0
   15012:	|  |   andi.w #255,d0
   15016:	|  +-- bra.s 15086 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   15018:	|  |   movea.l 4(sp),a0
   1501c:	|  |   move.l 4(a0),d0
   15020:	|  |   movea.l 8(sp),a0
   15024:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   15028:	|  |   movea.l 8(sp),a0
   1502c:	|  |   movea.l 4(a0),a0
   15030:	|  |   move.l 8(a0),d0
   15034:	|  |   addq.l #1,d0
   15036:	|  |   move.l d0,8(a0)
		return TRUE;
   1503a:	|  |   moveq #1,d0
   1503c:	|  +-- bra.s 15086 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   1503e:	|  |   movea.l 4(sp),a0
   15042:	|  |   move.l 4(a0),d0
   15046:	|  |   movea.l 8(sp),a0
   1504a:	|  |   move.l d0,4(a0)
		return TRUE;
   1504e:	|  |   moveq #1,d0
   15050:	|  +-- bra.s 15086 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   15052:	|  |   movea.l 4(sp),a0
   15056:	|  |   move.l 4(a0),d0
   1505a:	|  |   move.l d0,-(sp)
   1505c:	|  |   jsr 9886 <copyAnim>
   15062:	|  |   addq.l #4,sp
   15064:	|  |   movea.l 8(sp),a0
   15068:	|  |   move.l d0,4(a0)
		return TRUE;
   1506c:	|  |   moveq #1,d0
   1506e:	|  +-- bra.s 15086 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   15070:	|  |   moveq #1,d0
   15072:	|  +-- bra.s 15086 <copyMain+0x11a>

		default:
		break;
   15074:	'--|-> nop
	}
	KPrintF("Unknown value type");
   15076:	   |   pea 1a4d4 <PutChar+0x2384>
   1507c:	   |   jsr 176ae <KPrintF>
   15082:	   |   addq.l #4,sp
	return FALSE;
   15084:	   |   clr.w d0
}
   15086:	   '-> rts

00015088 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   15088:	move.l 8(sp),-(sp)
   1508c:	jsr 14e1c <unlinkVar>
   15092:	addq.l #4,sp
	return copyMain(from, to);
   15094:	move.l 8(sp),-(sp)
   15098:	move.l 8(sp),-(sp)
   1509c:	jsr 14f6c <copyMain>
   150a2:	addq.l #8,sp
}
   150a4:	rts

000150a6 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   150a6:	       movea.l 4(sp),a0
   150aa:	       move.l (a0),d0
   150ac:	       moveq #8,d1
   150ae:	       cmp.l d0,d1
   150b0:	   ,-- bne.s 150c6 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   150b2:	   |   movea.l 4(sp),a0
   150b6:	   |   move.l 4(a0),d0
   150ba:	   |   move.l d0,-(sp)
   150bc:	   |   jsr 9886 <copyAnim>
   150c2:	   |   addq.l #4,sp
   150c4:	,--|-- bra.s 1510c <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   150c6:	|  '-> movea.l 4(sp),a0
   150ca:	|      move.l (a0),d0
   150cc:	|      moveq #1,d1
   150ce:	|      cmp.l d0,d1
   150d0:	|  ,-- bne.s 150e4 <getAnimationFromVar+0x3e>
   150d2:	|  |   movea.l 4(sp),a0
   150d6:	|  |   move.l 4(a0),d0
   150da:	|  +-- bne.s 150e4 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   150dc:	|  |   jsr b0b8 <makeNullAnim>
   150e2:	+--|-- bra.s 1510c <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   150e4:	|  '-> movea.l 4(sp),a0
   150e8:	|      move.l (a0),d0
   150ea:	|      add.l d0,d0
   150ec:	|      movea.l d0,a1
   150ee:	|      adda.l d0,a1
   150f0:	|      lea 1cd64 <typeName>,a0
   150f6:	|      move.l (0,a1,a0.l),d0
   150fa:	|      move.l d0,-(sp)
   150fc:	|      pea 1a3c0 <PutChar+0x2270>
   15102:	|      jsr 176ae <KPrintF>
   15108:	|      addq.l #8,sp
	return NULL;
   1510a:	|      moveq #0,d0
}
   1510c:	'----> rts

0001510e <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   1510e:	       movea.l 4(sp),a0
   15112:	       move.l (a0),d0
   15114:	       moveq #10,d1
   15116:	       cmp.l d0,d1
   15118:	,----- bcs.w 1519e <getBoolean+0x90>
   1511c:	|      add.l d0,d0
   1511e:	|      movea.l d0,a0
   15120:	|      adda.l #86316,a0
   15126:	|      move.w (a0),d0
   15128:	|      jmp (1512c <getBoolean+0x1e>,pc,d0.w)
   1512c:	|      ori.b #26,(a6)
   15130:	|      ori.w #68,(114,a2,d0.w)
   15136:	|      ori.w #46,(114,a2,d0.w)
   1513c:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   15142:	|      clr.w d0
   15144:	|  ,-- bra.s 151a2 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   15146:	|  |   movea.l 4(sp),a0
   1514a:	|  |   move.l 4(a0),d0
   1514e:	|  |   sne d0
   15150:	|  |   neg.b d0
   15152:	|  |   move.b d0,d0
   15154:	|  |   andi.w #255,d0
   15158:	|  +-- bra.s 151a2 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   1515a:	|  |   movea.l 4(sp),a0
   1515e:	|  |   movea.l 4(a0),a0
   15162:	|  |   move.l (a0),d0
   15164:	|  |   sne d0
   15166:	|  |   neg.b d0
   15168:	|  |   move.b d0,d0
   1516a:	|  |   andi.w #255,d0
   1516e:	|  +-- bra.s 151a2 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   15170:	|  |   movea.l 4(sp),a0
   15174:	|  |   movea.l 4(a0),a0
   15178:	|  |   move.b (a0),d0
   1517a:	|  |   sne d0
   1517c:	|  |   neg.b d0
   1517e:	|  |   move.b d0,d0
   15180:	|  |   andi.w #255,d0
   15184:	|  +-- bra.s 151a2 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   15186:	|  |   movea.l 4(sp),a0
   1518a:	|  |   movea.l 4(a0),a0
   1518e:	|  |   move.l 4(a0),d0
   15192:	|  |   sne d0
   15194:	|  |   neg.b d0
   15196:	|  |   move.b d0,d0
   15198:	|  |   andi.w #255,d0
   1519c:	|  +-- bra.s 151a2 <getBoolean+0x94>

		default:
		break;
   1519e:	'--|-> nop
	}
	return TRUE;
   151a0:	   |   moveq #1,d0
}
   151a2:	   '-> rts

000151a4 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   151a4:	      ,----------> lea -76(sp),sp
   151a8:	      |            move.l a6,-(sp)
	switch (from->varType) {
   151aa:	      |            movea.l 84(sp),a0
   151ae:	      |            move.l (a0),d0
   151b0:	      |            moveq #10,d1
   151b2:	      |            cmp.l d0,d1
   151b4:	,-----|----------- bcs.w 15452 <getTextFromAnyVar+0x2ae>
   151b8:	|     |            add.l d0,d0
   151ba:	|     |            movea.l d0,a0
   151bc:	|     |            adda.l #86472,a0
   151c2:	|     |            move.w (a0),d0
   151c4:	|     |            jmp (151c8 <getTextFromAnyVar+0x24>,pc,d0.w)
   151c8:	|     |            .short 0x028a
   151ca:	|     |            bset d0,(a0)+
   151cc:	|     |            .short 0x028a
   151ce:	|     |            ori.b #-118,(a6)
   151d2:	|     |            andi.b #8,ccr
   151d6:	|     |            andi.w #650,-(a0)
   151da:	|     |            .short 0x028a
   151dc:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   151e2:	|     |            move.l 4(a0),d0
   151e6:	|     |            move.l d0,-(sp)
   151e8:	|     |            jsr b8 <copyString>
   151ee:	|     |            addq.l #4,sp
   151f0:	|  ,--|----------- bra.w 15474 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   151f4:	|  |  |            pea 1a4e7 <PutChar+0x2397>
   151fa:	|  |  |            jsr b8 <copyString>
   15200:	|  |  |            addq.l #4,sp
   15202:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   15206:	|  |  |            clr.l 72(sp)
   1520a:	|  |  |     ,----- bra.w 152b4 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   1520e:	|  |  |  ,--|----> pea 1a4ed <PutChar+0x239d>
   15214:	|  |  |  |  |      move.l 80(sp),-(sp)
   15218:	|  |  |  |  |      jsr 140fa <joinStrings>
   1521e:	|  |  |  |  |      addq.l #8,sp
   15220:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   15224:	|  |  |  |  |  ,-- bne.s 1522c <getTextFromAnyVar+0x88>
   15226:	|  |  |  |  |  |   moveq #0,d0
   15228:	|  +--|--|--|--|-- bra.w 15474 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1522c:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   15232:	|  |  |  |  |      move.l 1ce8a <SysBase>,d0
   15238:	|  |  |  |  |      movea.l d0,a6
   1523a:	|  |  |  |  |      movea.l 56(sp),a1
   1523e:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   15242:	|  |  |  |  |      movea.l 84(sp),a0
   15246:	|  |  |  |  |      movea.l 4(a0),a0
   1524a:	|  |  |  |  |      move.l (a0),d1
   1524c:	|  |  |  |  |      move.l 72(sp),d0
   15250:	|  |  |  |  |      lsl.l #3,d0
   15252:	|  |  |  |  |      add.l d1,d0
   15254:	|  |  |  |  |      move.l d0,-(sp)
   15256:	|  |  +--|--|----- jsr 151a4 <getTextFromAnyVar>(pc)
   1525a:	|  |  |  |  |      addq.l #4,sp
   1525c:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   15260:	|  |  |  |  |      move.l 52(sp),-(sp)
   15264:	|  |  |  |  |      move.l 64(sp),-(sp)
   15268:	|  |  |  |  |      jsr 140fa <joinStrings>
   1526e:	|  |  |  |  |      addq.l #8,sp
   15270:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   15274:	|  |  |  |  |  ,-- bne.s 1527c <getTextFromAnyVar+0xd8>
   15276:	|  |  |  |  |  |   moveq #0,d0
   15278:	|  +--|--|--|--|-- bra.w 15474 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1527c:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   15282:	|  |  |  |  |      move.l 1ce8a <SysBase>,d0
   15288:	|  |  |  |  |      movea.l d0,a6
   1528a:	|  |  |  |  |      movea.l 48(sp),a1
   1528e:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   15292:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   15296:	|  |  |  |  |      move.l 60(sp),44(sp)
   1529c:	|  |  |  |  |      move.l 1ce8a <SysBase>,d0
   152a2:	|  |  |  |  |      movea.l d0,a6
   152a4:	|  |  |  |  |      movea.l 44(sp),a1
   152a8:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   152ac:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   152b0:	|  |  |  |  |      addq.l #1,72(sp)
   152b4:	|  |  |  |  '----> movea.l 84(sp),a0
   152b8:	|  |  |  |         movea.l 4(a0),a0
   152bc:	|  |  |  |         move.l 4(a0),d0
   152c0:	|  |  |  |         cmp.l 72(sp),d0
   152c4:	|  |  |  '-------- bgt.w 1520e <getTextFromAnyVar+0x6a>
			}
			return builder;
   152c8:	|  |  |            move.l 76(sp),d0
   152cc:	|  +--|----------- bra.w 15474 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   152d0:	|  |  |            pea 1a4ef <PutChar+0x239f>
   152d6:	|  |  |            jsr b8 <copyString>
   152dc:	|  |  |            addq.l #4,sp
   152de:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   152e2:	|  |  |            movea.l 84(sp),a0
   152e6:	|  |  |            movea.l 4(a0),a0
   152ea:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   152ee:	|  |  |     ,----- bra.w 15390 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   152f2:	|  |  |  ,--|----> pea 1a4ed <PutChar+0x239d>
   152f8:	|  |  |  |  |      move.l 72(sp),-(sp)
   152fc:	|  |  |  |  |      jsr 140fa <joinStrings>
   15302:	|  |  |  |  |      addq.l #8,sp
   15304:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   15308:	|  |  |  |  |  ,-- bne.s 15310 <getTextFromAnyVar+0x16c>
   1530a:	|  |  |  |  |  |   moveq #0,d0
   1530c:	|  +--|--|--|--|-- bra.w 15474 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   15310:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   15316:	|  |  |  |  |      move.l 1ce8a <SysBase>,d0
   1531c:	|  |  |  |  |      movea.l d0,a6
   1531e:	|  |  |  |  |      movea.l 32(sp),a1
   15322:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   15326:	|  |  |  |  |      move.l 64(sp),d0
   1532a:	|  |  |  |  |      move.l d0,-(sp)
   1532c:	|  |  '--|--|----- jsr 151a4 <getTextFromAnyVar>(pc)
   15330:	|  |     |  |      addq.l #4,sp
   15332:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   15336:	|  |     |  |      move.l 28(sp),-(sp)
   1533a:	|  |     |  |      move.l 40(sp),-(sp)
   1533e:	|  |     |  |      jsr 140fa <joinStrings>
   15344:	|  |     |  |      addq.l #8,sp
   15346:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   1534a:	|  |     |  |  ,-- bne.s 15352 <getTextFromAnyVar+0x1ae>
   1534c:	|  |     |  |  |   moveq #0,d0
   1534e:	|  +-----|--|--|-- bra.w 15474 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   15352:	|  |     |  |  '-> move.l 28(sp),24(sp)
   15358:	|  |     |  |      move.l 1ce8a <SysBase>,d0
   1535e:	|  |     |  |      movea.l d0,a6
   15360:	|  |     |  |      movea.l 24(sp),a1
   15364:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   15368:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   1536c:	|  |     |  |      move.l 36(sp),20(sp)
   15372:	|  |     |  |      move.l 1ce8a <SysBase>,d0
   15378:	|  |     |  |      movea.l d0,a6
   1537a:	|  |     |  |      movea.l 20(sp),a1
   1537e:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   15382:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   15386:	|  |     |  |      movea.l 64(sp),a0
   1538a:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   15390:	|  |     |  '----> tst.l 64(sp)
   15394:	|  |     '-------- bne.w 152f2 <getTextFromAnyVar+0x14e>
			}
			return builder;
   15398:	|  |               move.l 68(sp),d0
   1539c:	|  +-------------- bra.w 15474 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   153a0:	|  |               moveq #10,d0
   153a2:	|  |               move.l d0,16(sp)
   153a6:	|  |               clr.l 12(sp)
   153aa:	|  |               move.l 1ce8a <SysBase>,d0
   153b0:	|  |               movea.l d0,a6
   153b2:	|  |               move.l 16(sp),d0
   153b6:	|  |               move.l 12(sp),d1
   153ba:	|  |               jsr -684(a6)
   153be:	|  |               move.l d0,8(sp)
   153c2:	|  |               move.l 8(sp),d0
   153c6:	|  |               move.l d0,4(sp)
			if (! buff) {
   153ca:	|  |           ,-- bne.s 153e0 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   153cc:	|  |           |   pea 1a4f6 <PutChar+0x23a6>
   153d2:	|  |           |   jsr 176ae <KPrintF>
   153d8:	|  |           |   addq.l #4,sp
				return NULL;
   153da:	|  |           |   moveq #0,d0
   153dc:	|  +-----------|-- bra.w 15474 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   153e0:	|  |           '-> movea.l 84(sp),a0
   153e4:	|  |               move.l 4(a0),d0
   153e8:	|  |               move.l d0,-(sp)
   153ea:	|  |               pea 1a520 <PutChar+0x23d0>
   153f0:	|  |               move.l 12(sp),-(sp)
   153f4:	|  |               jsr 143d8 <sprintf>
   153fa:	|  |               lea 12(sp),sp
			return buff;
   153fe:	|  |               move.l 4(sp),d0
   15402:	|  +-------------- bra.s 15474 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   15404:	|  |               movea.l 84(sp),a0
   15408:	|  |               move.l 4(a0),d0
   1540c:	|  |               move.l d0,-(sp)
   1540e:	|  |               jsr 4d5a <resourceNameFromNum>
   15414:	|  |               addq.l #4,sp
   15416:	|  |               move.l d0,-(sp)
   15418:	|  |               pea 18e5d <PutChar+0xd0d>
   1541e:	|  |               jsr 140fa <joinStrings>
   15424:	|  |               addq.l #8,sp
   15426:	|  +-------------- bra.s 15474 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   15428:	|  |               movea.l 84(sp),a0
   1542c:	|  |               move.l 4(a0),d0
   15430:	|  |               move.l d0,-(sp)
   15432:	|  |               jsr d8e2 <findObjectType>
   15438:	|  |               addq.l #4,sp
   1543a:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   1543e:	+--|-------------- beq.s 15452 <getTextFromAnyVar+0x2ae>
   15440:	|  |               movea.l 40(sp),a0
   15444:	|  |               move.l (a0),d0
   15446:	|  |               move.l d0,-(sp)
   15448:	|  |               jsr b8 <copyString>
   1544e:	|  |               addq.l #4,sp
   15450:	|  +-------------- bra.s 15474 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   15452:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   15454:	   |               movea.l 84(sp),a0
   15458:	   |               move.l (a0),d0
   1545a:	   |               add.l d0,d0
   1545c:	   |               movea.l d0,a1
   1545e:	   |               adda.l d0,a1
   15460:	   |               lea 1cd64 <typeName>,a0
   15466:	   |               move.l (0,a1,a0.l),d0
   1546a:	   |               move.l d0,-(sp)
   1546c:	   |               jsr b8 <copyString>
   15472:	   |               addq.l #4,sp
}
   15474:	   '-------------> movea.l (sp)+,a6
   15476:	                   lea 76(sp),sp
   1547a:	                   rts

0001547c <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   1547c:	move.l 4(sp),-(sp)
   15480:	jsr 14e1c <unlinkVar>
   15486:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   15488:	movea.l 4(sp),a0
   1548c:	moveq #8,d0
   1548e:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   15490:	movea.l 4(sp),a0
   15494:	move.l 8(sp),4(a0)
}
   1549a:	nop
   1549c:	rts

0001549e <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   1549e:	move.l 4(sp),-(sp)
   154a2:	jsr 14e1c <unlinkVar>
   154a8:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   154aa:	movea.l 4(sp),a0
   154ae:	moveq #9,d0
   154b0:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   154b2:	movea.l 4(sp),a0
   154b6:	move.l 8(sp),4(a0)
}
   154bc:	nop
   154be:	rts

000154c0 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   154c0:	move.l 4(sp),-(sp)
   154c4:	jsr 14e1c <unlinkVar>
   154ca:	addq.l #4,sp
   154cc:	movea.l 4(sp),a0
   154d0:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   154d4:	movea.l 4(sp),a0
   154d8:	move.l 12(sp),4(a0)
   154de:	nop
   154e0:	rts

000154e2 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   154e2:	      ,-- bra.s 154f4 <stackGetByIndex+0x12>
        vS = vS->next;
   154e4:	,-----|-> movea.l 4(sp),a0
   154e8:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   154ee:	|     +-- bne.s 154f4 <stackGetByIndex+0x12>
            return NULL;
   154f0:	|     |   moveq #0,d0
   154f2:	|  ,--|-- bra.s 15508 <stackGetByIndex+0x26>
    while (theIndex--) {
   154f4:	|  |  '-> move.l 8(sp),d0
   154f8:	|  |      move.l d0,d1
   154fa:	|  |      subq.l #1,d1
   154fc:	|  |      move.l d1,8(sp)
   15500:	|  |      tst.l d0
   15502:	'--|----- bne.s 154e4 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   15504:	   |      move.l 4(sp),d0
}
   15508:	   '----> rts

0001550a <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   1550a:	          tst.l 4(sp)
   1550e:	      ,-- bne.s 1551e <stackFindLast+0x14>
		return NULL;
   15510:	      |   moveq #0,d0
   15512:	,-----|-- bra.s 1552c <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   15514:	|  ,--|-> movea.l 4(sp),a0
   15518:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   1551e:	|  |  '-> movea.l 4(sp),a0
   15522:	|  |      move.l 8(a0),d0
   15526:	|  '----- bne.s 15514 <stackFindLast+0xa>

	return hunt;
   15528:	|         move.l 4(sp),d0
}
   1552c:	'-------> rts

0001552e <stackSize>:

int stackSize (const struct stackHandler * me) {
   1552e:	       subq.l #8,sp
	int r = 0;
   15530:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   15534:	       movea.l 12(sp),a0
   15538:	       move.l (a0),(sp)
	while (a) {
   1553a:	   ,-- bra.s 15546 <stackSize+0x18>
		r ++;
   1553c:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   15540:	|  |   movea.l (sp),a0
   15542:	|  |   move.l 8(a0),(sp)
	while (a) {
   15546:	|  '-> tst.l (sp)
   15548:	'----- bne.s 1553c <stackSize+0xe>
	}
	return r;
   1554a:	       move.l 4(sp),d0
}
   1554e:	       addq.l #8,sp
   15550:	       rts

00015552 <trimStack>:

void trimStack (struct variableStack ** stack) {
   15552:	subq.l #8,sp
   15554:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   15556:	movea.l 16(sp),a0
   1555a:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   1555e:	movea.l 16(sp),a0
   15562:	movea.l (a0),a0
   15564:	move.l 8(a0),d0
   15568:	movea.l 16(sp),a0
   1556c:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   1556e:	move.l 8(sp),d0
   15572:	move.l d0,-(sp)
   15574:	jsr 14e1c <unlinkVar>
   1557a:	addq.l #4,sp
	FreeVec(killMe);
   1557c:	move.l 8(sp),4(sp)
   15582:	move.l 1ce8a <SysBase>,d0
   15588:	movea.l d0,a6
   1558a:	movea.l 4(sp),a1
   1558e:	jsr -690(a6)
   15592:	nop
   15594:	movea.l (sp)+,a6
   15596:	addq.l #8,sp
   15598:	rts

0001559a <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   1559a:	       lea -52(sp),sp
   1559e:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   155a0:	       pea 1a523 <PutChar+0x23d3>
   155a6:	       jsr 176ae <KPrintF>
   155ac:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   155ae:	       moveq #68,d0
   155b0:	       move.l d0,52(sp)
   155b4:	       clr.l 48(sp)
   155b8:	       move.l 1ce8a <SysBase>,d0
   155be:	       movea.l d0,a6
   155c0:	       move.l 52(sp),d0
   155c4:	       move.l 48(sp),d1
   155c8:	       jsr -684(a6)
   155cc:	       move.l d0,44(sp)
   155d0:	       move.l 44(sp),d0
   155d4:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   155d8:	   ,-- bne.s 155e0 <freeze+0x46>
   155da:	   |   clr.w d0
   155dc:	,--|-- bra.w 15772 <freeze+0x1d8>

	CstFreeze();
   155e0:	|  '-> jsr 1a6c <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   155e6:	|      move.l 1cf22 <sceneWidth>,d0
   155ec:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   155f0:	|      move.l 1cf26 <sceneHeight>,d0
   155f6:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   155fa:	|      move.l 1cf22 <sceneWidth>,d0
   15600:	|      movea.l 40(sp),a0
   15604:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   15608:	|      move.l 1cf26 <sceneHeight>,d0
   1560e:	|      movea.l 40(sp),a0
   15612:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   15616:	|      move.l 1cf40 <cameraX>,d0
   1561c:	|      movea.l 40(sp),a0
   15620:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   15624:	|      move.l 1cf44 <cameraY>,d0
   1562a:	|      movea.l 40(sp),a0
   1562e:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   15632:	|      move.l 1c826 <cameraZoom>,d0
   15638:	|      movea.l 40(sp),a0
   1563c:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   15640:	|      move.w #1,1cf2e <backdropExists>

	newFreezer -> allPeople = allPeople;
   15648:	|      move.l 1ceea <allPeople>,d0
   1564e:	|      movea.l 40(sp),a0
   15652:	|      move.l d0,(a0)
	allPeople = NULL;
   15654:	|      clr.l 1ceea <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   1565a:	|      moveq #42,d0
   1565c:	|      move.l d0,28(sp)
   15660:	|      clr.l 24(sp)
   15664:	|      move.l 1ce8a <SysBase>,d0
   1566a:	|      movea.l d0,a6
   1566c:	|      move.l 28(sp),d0
   15670:	|      move.l 24(sp),d1
   15674:	|      jsr -684(a6)
   15678:	|      move.l d0,20(sp)
   1567c:	|      move.l 20(sp),d0
   15680:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   15684:	|  ,-- bne.s 1568c <freeze+0xf2>
   15686:	|  |   clr.w d0
   15688:	+--|-- bra.w 15772 <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   1568c:	|  '-> move.l 1cf96 <allScreenRegions>,d0
   15692:	|      movea.l 40(sp),a0
   15696:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   1569a:	|      clr.l 1cf96 <allScreenRegions>
	overRegion = NULL;
   156a0:	|      clr.l 1cf9a <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   156a6:	|      move.l 1cd8e <mouseCursorAnim>,d0
   156ac:	|      movea.l 40(sp),a0
   156b0:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   156b4:	|      move.l 1cd92 <mouseCursorFrameNum>,d0
   156ba:	|      movea.l 40(sp),a0
   156be:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   156c2:	|      jsr b0b8 <makeNullAnim>
   156c8:	|      move.l d0,1cd8e <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   156ce:	|      clr.l 1cd92 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   156d4:	|      move.l 1cee6 <zBuffer>,d0
   156da:	|      movea.l 40(sp),a0
   156de:	|      move.l d0,60(a0)
	zBuffer = NULL;
   156e2:	|      clr.l 1cee6 <zBuffer>

	newFreezer -> speech = speech;
   156e8:	|      move.l 1cdda <speech>,d0
   156ee:	|      movea.l 40(sp),a0
   156f2:	|      move.l d0,20(a0)
	initSpeech ();
   156f6:	|      jsr 4250 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   156fc:	|      move.l 1c804 <currentEvents>,d0
   15702:	|      movea.l 40(sp),a0
   15706:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   1570a:	|      moveq #28,d0
   1570c:	|      move.l d0,12(sp)
   15710:	|      clr.l 8(sp)
   15714:	|      move.l 1ce8a <SysBase>,d0
   1571a:	|      movea.l d0,a6
   1571c:	|      move.l 12(sp),d0
   15720:	|      move.l 8(sp),d1
   15724:	|      jsr -684(a6)
   15728:	|      move.l d0,4(sp)
   1572c:	|      move.l 4(sp),d0
   15730:	|      move.l d0,1c804 <currentEvents>
	if (!currentEvents) return FALSE;
   15736:	|      move.l 1c804 <currentEvents>,d0
   1573c:	|  ,-- bne.s 15742 <freeze+0x1a8>
   1573e:	|  |   clr.w d0
   15740:	+--|-- bra.s 15772 <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   15742:	|  '-> move.l 1c804 <currentEvents>,d0
   15748:	|      pea 1c <_start+0x1c>
   1574c:	|      clr.l -(sp)
   1574e:	|      move.l d0,-(sp)
   15750:	|      jsr 17632 <memset>
   15756:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   1575a:	|      move.l 1cf7a <frozenStuff>,d0
   15760:	|      movea.l 40(sp),a0
   15764:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   15768:	|      move.l 40(sp),1cf7a <frozenStuff>

	return TRUE;
   15770:	|      moveq #1,d0
}
   15772:	'----> movea.l (sp)+,a6
   15774:	       lea 52(sp),sp
   15778:	       rts

0001577a <howFrozen>:

int howFrozen () {
   1577a:	       subq.l #8,sp
	int a = 0;
   1577c:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   15780:	       move.l 1cf7a <frozenStuff>,(sp)
	while (f) {
   15786:	   ,-- bra.s 15792 <howFrozen+0x18>
		a ++;
   15788:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   1578c:	|  |   movea.l (sp),a0
   1578e:	|  |   move.l 64(a0),(sp)
	while (f) {
   15792:	|  '-> tst.l (sp)
   15794:	'----- bne.s 15788 <howFrozen+0xe>
	}
	return a;
   15796:	       move.l 4(sp),d0
}
   1579a:	       addq.l #8,sp
   1579c:	       rts

0001579e <unfreeze>:

void unfreeze () {
   1579e:	       lea -16(sp),sp
   157a2:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   157a4:	       move.l 1cf7a <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   157ac:	       move.l 1cf7a <frozenStuff>,d0
   157b2:	,----- beq.w 159ea <unfreeze+0x24c>

	CstUnfreeze();
   157b6:	|      jsr 3dfa <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   157bc:	|      movea.l 1cf7a <frozenStuff>,a0
   157c2:	|      move.l 48(a0),d0
   157c6:	|      move.l d0,1cf22 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   157cc:	|      movea.l 1cf7a <frozenStuff>,a0
   157d2:	|      move.l 52(a0),d0
   157d6:	|      move.l d0,1cf26 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   157dc:	|      movea.l 1cf7a <frozenStuff>,a0
   157e2:	|      move.l 40(a0),d0
   157e6:	|      move.l d0,1cf40 <cameraX>
	cameraY = frozenStuff -> cameraY;
   157ec:	|      movea.l 1cf7a <frozenStuff>,a0
   157f2:	|      move.l 44(a0),d0
   157f6:	|      move.l d0,1cf44 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   157fc:	|      move.l 1ce46 <input+0xa>,d0
   15802:	|      move.l d0,-(sp)
   15804:	|      jsr 17ae0 <__floatsisf>
   1580a:	|      addq.l #4,sp
   1580c:	|      move.l d0,d1
   1580e:	|      move.l 1c826 <cameraZoom>,d0
   15814:	|      move.l d0,-(sp)
   15816:	|      move.l d1,-(sp)
   15818:	|      jsr 17b92 <__mulsf3>
   1581e:	|      addq.l #8,sp
   15820:	|      move.l d0,-(sp)
   15822:	|      jsr 17a78 <__fixsfsi>
   15828:	|      addq.l #4,sp
   1582a:	|      move.l d0,1ce46 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   15830:	|      move.l 1ce4a <input+0xe>,d0
   15836:	|      move.l d0,-(sp)
   15838:	|      jsr 17ae0 <__floatsisf>
   1583e:	|      addq.l #4,sp
   15840:	|      move.l d0,d1
   15842:	|      move.l 1c826 <cameraZoom>,d0
   15848:	|      move.l d0,-(sp)
   1584a:	|      move.l d1,-(sp)
   1584c:	|      jsr 17b92 <__mulsf3>
   15852:	|      addq.l #8,sp
   15854:	|      move.l d0,-(sp)
   15856:	|      jsr 17a78 <__fixsfsi>
   1585c:	|      addq.l #4,sp
   1585e:	|      move.l d0,1ce4a <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   15864:	|      movea.l 1cf7a <frozenStuff>,a0
   1586a:	|      move.l 56(a0),d0
   1586e:	|      move.l d0,1c826 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   15874:	|      move.l 1ce46 <input+0xa>,d0
   1587a:	|      move.l d0,-(sp)
   1587c:	|      jsr 17ae0 <__floatsisf>
   15882:	|      addq.l #4,sp
   15884:	|      move.l d0,d1
   15886:	|      move.l 1c826 <cameraZoom>,d0
   1588c:	|      move.l d0,-(sp)
   1588e:	|      move.l d1,-(sp)
   15890:	|      jsr 17996 <__divsf3>
   15896:	|      addq.l #8,sp
   15898:	|      move.l d0,-(sp)
   1589a:	|      jsr 17a78 <__fixsfsi>
   158a0:	|      addq.l #4,sp
   158a2:	|      move.l d0,1ce46 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   158a8:	|      move.l 1ce4a <input+0xe>,d0
   158ae:	|      move.l d0,-(sp)
   158b0:	|      jsr 17ae0 <__floatsisf>
   158b6:	|      addq.l #4,sp
   158b8:	|      move.l d0,d1
   158ba:	|      move.l 1c826 <cameraZoom>,d0
   158c0:	|      move.l d0,-(sp)
   158c2:	|      move.l d1,-(sp)
   158c4:	|      jsr 17996 <__divsf3>
   158ca:	|      addq.l #8,sp
   158cc:	|      move.l d0,-(sp)
   158ce:	|      jsr 17a78 <__fixsfsi>
   158d4:	|      addq.l #4,sp
   158d6:	|      move.l d0,1ce4a <input+0xe>

	killAllPeople ();
   158dc:	|      jsr ad88 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   158e2:	|      movea.l 1cf7a <frozenStuff>,a0
   158e8:	|      move.l (a0),d0
   158ea:	|      move.l d0,1ceea <allPeople>

	killAllRegions ();
   158f0:	|      jsr 15ebe <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   158f6:	|      movea.l 1cf7a <frozenStuff>,a0
   158fc:	|      move.l 4(a0),d0
   15900:	|      move.l d0,1cf96 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15906:	|      move.l 1cd8e <mouseCursorAnim>,d0
   1590c:	|      move.l d0,-(sp)
   1590e:	|      jsr 9c52 <deleteAnim>
   15914:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15916:	|      movea.l 1cf7a <frozenStuff>,a0
   1591c:	|      move.l 32(a0),d0
   15920:	|      move.l d0,1cd8e <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15926:	|      movea.l 1cf7a <frozenStuff>,a0
   1592c:	|      move.l 36(a0),d0
   15930:	|      move.l d0,1cd92 <mouseCursorFrameNum>

	killZBuffer ();
   15936:	|      jsr 89f8 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   1593c:	|      movea.l 1cf7a <frozenStuff>,a0
   15942:	|      move.l 60(a0),d0
   15946:	|      move.l d0,1cee6 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   1594c:	|      move.l 1c804 <currentEvents>,d0
   15952:	|  ,-- beq.s 1596c <unfreeze+0x1ce>
   15954:	|  |   move.l 1c804 <currentEvents>,12(sp)
   1595c:	|  |   move.l 1ce8a <SysBase>,d0
   15962:	|  |   movea.l d0,a6
   15964:	|  |   movea.l 12(sp),a1
   15968:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   1596c:	|  '-> movea.l 1cf7a <frozenStuff>,a0
   15972:	|      move.l 28(a0),d0
   15976:	|      move.l d0,1c804 <currentEvents>

	killAllSpeech ();
   1597c:	|      jsr 42e8 <killAllSpeech>
	if (speech) FreeVec(speech);
   15982:	|      move.l 1cdda <speech>,d0
   15988:	|  ,-- beq.s 159a2 <unfreeze+0x204>
   1598a:	|  |   move.l 1cdda <speech>,8(sp)
   15992:	|  |   move.l 1ce8a <SysBase>,d0
   15998:	|  |   movea.l d0,a6
   1599a:	|  |   movea.l 8(sp),a1
   1599e:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   159a2:	|  '-> movea.l 1cf7a <frozenStuff>,a0
   159a8:	|      move.l 20(a0),d0
   159ac:	|      move.l d0,1cdda <speech>

	frozenStuff = frozenStuff -> next;
   159b2:	|      movea.l 1cf7a <frozenStuff>,a0
   159b8:	|      move.l 64(a0),d0
   159bc:	|      move.l d0,1cf7a <frozenStuff>

	overRegion = NULL;
   159c2:	|      clr.l 1cf9a <overRegion>
	if (killMe) FreeVec(killMe);
   159c8:	|      tst.l 16(sp)
   159cc:	|  ,-- beq.s 159e4 <unfreeze+0x246>
   159ce:	|  |   move.l 16(sp),4(sp)
   159d4:	|  |   move.l 1ce8a <SysBase>,d0
   159da:	|  |   movea.l d0,a6
   159dc:	|  |   movea.l 4(sp),a1
   159e0:	|  |   jsr -690(a6)
	killMe = NULL;
   159e4:	|  '-> clr.l 16(sp)
   159e8:	|  ,-- bra.s 159ec <unfreeze+0x24e>
	if (! frozenStuff) return;
   159ea:	'--|-> nop
}
   159ec:	   '-> movea.l (sp)+,a6
   159ee:	       lea 16(sp),sp
   159f2:	       rts

000159f4 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   159f4:	pea 1a535 <PutChar+0x23e5>
   159fa:	jsr 176ae <KPrintF>
   15a00:	addq.l #4,sp
	return FALSE;
   15a02:	clr.w d0
}
   15a04:	rts

00015a06 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15a06:	          lea -32(sp),sp
   15a0a:	          move.l a6,-(sp)
   15a0c:	          move.l d2,-(sp)
	unsigned int a = 0;
   15a0e:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   15a12:	          move.l 1cf86 <fontOrderString>,d0
   15a18:	      ,-- beq.s 15a32 <loadFont+0x2c>
   15a1a:	      |   move.l 1cf86 <fontOrderString>,24(sp)
   15a22:	      |   move.l 1ce8a <SysBase>,d0
   15a28:	      |   movea.l d0,a6
   15a2a:	      |   movea.l 24(sp),a1
   15a2e:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   15a32:	      '-> move.l 48(sp),-(sp)
   15a36:	          jsr b8 <copyString>
   15a3c:	          addq.l #4,sp
   15a3e:	          move.l d0,1cf86 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   15a44:	          move.l 1cf92 <theFont>,d0
   15a4a:	      ,-- beq.s 15a5c <loadFont+0x56>
   15a4c:	      |   move.l 1cf92 <theFont>,d0
   15a52:	      |   move.l d0,-(sp)
   15a54:	      |   jsr 8d36 <forgetSpriteBank>
   15a5a:	      |   addq.l #4,sp
	theFont = NULL;
   15a5c:	      '-> clr.l 1cf92 <theFont>

	loadedFontNum = filenum;
   15a62:	          move.l 44(sp),1cf82 <loadedFontNum>

	fontTableSize = 0;
   15a6a:	          clr.l 1cf8e <fontTableSize>
	char *tmp = charOrder;
   15a70:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   15a76:	   ,----- bra.s 15ab2 <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   15a78:	,--|----> movea.l 32(sp),a0
   15a7c:	|  |      move.b (a0),d0
   15a7e:	|  |      ext.w d0
   15a80:	|  |      movea.w d0,a0
   15a82:	|  |      move.l 1cf8e <fontTableSize>,d0
   15a88:	|  |      move.l d0,d0
   15a8a:	|  |      move.b d0,d0
   15a8c:	|  |      andi.l #255,d0
   15a92:	|  |      cmp.l a0,d0
   15a94:	|  |  ,-- bge.s 15aa6 <loadFont+0xa0>
   15a96:	|  |  |   movea.l 32(sp),a0
   15a9a:	|  |  |   move.b (a0),d0
   15a9c:	|  |  |   ext.w d0
   15a9e:	|  |  |   movea.w d0,a0
   15aa0:	|  |  |   move.l a0,1cf8e <fontTableSize>
		*tmp++;
   15aa6:	|  |  '-> move.l 32(sp),d0
   15aaa:	|  |      move.l d0,d1
   15aac:	|  |      addq.l #1,d1
   15aae:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   15ab2:	|  '----> movea.l 32(sp),a0
   15ab6:	|         move.b (a0),d0
   15ab8:	'-------- bne.s 15a78 <loadFont+0x72>
	}
	fontTableSize++;
   15aba:	          move.l 1cf8e <fontTableSize>,d0
   15ac0:	          addq.l #1,d0
   15ac2:	          move.l d0,1cf8e <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15ac8:	          move.l 1cf8a <fontTable>,d0
   15ace:	      ,-- beq.s 15ae8 <loadFont+0xe2>
   15ad0:	      |   move.l 1cf8a <fontTable>,20(sp)
   15ad8:	      |   move.l 1ce8a <SysBase>,d0
   15ade:	      |   movea.l d0,a6
   15ae0:	      |   movea.l 20(sp),a1
   15ae4:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15ae8:	      '-> move.l 1cf8e <fontTableSize>,d0
   15aee:	          add.l d0,d0
   15af0:	          add.l d0,d0
   15af2:	          move.l d0,16(sp)
   15af6:	          clr.l 12(sp)
   15afa:	          move.l 1ce8a <SysBase>,d0
   15b00:	          movea.l d0,a6
   15b02:	          move.l 16(sp),d0
   15b06:	          move.l 12(sp),d1
   15b0a:	          jsr -684(a6)
   15b0e:	          move.l d0,8(sp)
   15b12:	          move.l 8(sp),d0
   15b16:	          move.l d0,1cf8a <fontTable>
	if (!fontTable) return FALSE;
   15b1c:	          move.l 1cf8a <fontTable>,d0
   15b22:	      ,-- bne.s 15b2a <loadFont+0x124>
   15b24:	      |   clr.w d0
   15b26:	,-----|-- bra.w 15bd0 <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   15b2a:	|     '-> clr.l 36(sp)
   15b2e:	|     ,-- bra.s 15b48 <loadFont+0x142>
		fontTable[a] = 0;
   15b30:	|  ,--|-> move.l 1cf8a <fontTable>,d1
   15b36:	|  |  |   move.l 36(sp),d0
   15b3a:	|  |  |   add.l d0,d0
   15b3c:	|  |  |   add.l d0,d0
   15b3e:	|  |  |   movea.l d1,a0
   15b40:	|  |  |   adda.l d0,a0
   15b42:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   15b44:	|  |  |   addq.l #1,36(sp)
   15b48:	|  |  '-> move.l 1cf8e <fontTableSize>,d0
   15b4e:	|  |      cmp.l 36(sp),d0
   15b52:	|  '----- bhi.s 15b30 <loadFont+0x12a>
	}
	a = 0;
   15b54:	|         clr.l 36(sp)
	int i = 0;
   15b58:	|         clr.l 28(sp)
	tmp = charOrder;
   15b5c:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   15b62:	|     ,-- bra.s 15b92 <loadFont+0x18c>
		fontTable[*tmp++] = i;
   15b64:	|  ,--|-> move.l 1cf8a <fontTable>,d1
   15b6a:	|  |  |   move.l 32(sp),d0
   15b6e:	|  |  |   move.l d0,d2
   15b70:	|  |  |   addq.l #1,d2
   15b72:	|  |  |   move.l d2,32(sp)
   15b76:	|  |  |   movea.l d0,a0
   15b78:	|  |  |   move.b (a0),d0
   15b7a:	|  |  |   ext.w d0
   15b7c:	|  |  |   movea.w d0,a0
   15b7e:	|  |  |   move.l a0,d0
   15b80:	|  |  |   add.l a0,d0
   15b82:	|  |  |   add.l d0,d0
   15b84:	|  |  |   movea.l d1,a0
   15b86:	|  |  |   adda.l d0,a0
   15b88:	|  |  |   move.l 28(sp),d0
   15b8c:	|  |  |   move.l d0,(a0)
		i++;
   15b8e:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   15b92:	|  |  '-> movea.l 32(sp),a0
   15b96:	|  |      move.b (a0),d0
   15b98:	|  '----- bne.s 15b64 <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   15b9a:	|         move.l 44(sp),-(sp)
   15b9e:	|         jsr 163d0 <loadBankForAnim>
   15ba4:	|         addq.l #4,sp
   15ba6:	|         move.l d0,1cf92 <theFont>
	if (!theFont) {
   15bac:	|         move.l 1cf92 <theFont>,d0
   15bb2:	|     ,-- bne.s 15bc6 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   15bb4:	|     |   pea 1a55c <PutChar+0x240c>
   15bba:	|     |   jsr 176ae <KPrintF>
   15bc0:	|     |   addq.l #4,sp
		return FALSE;
   15bc2:	|     |   clr.w d0
   15bc4:	+-----|-- bra.s 15bd0 <loadFont+0x1ca>
	}
	fontHeight = h;
   15bc6:	|     '-> move.l 52(sp),1cf7e <fontHeight>
	return TRUE;
   15bce:	|         moveq #1,d0
}
   15bd0:	'-------> move.l (sp)+,d2
   15bd2:	          movea.l (sp)+,a6
   15bd4:	          lea 32(sp),sp
   15bd8:	          rts

00015bda <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15bda:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15bde:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15be2:	                move.l 1cf8e <fontTableSize>,d0
   15be8:	,-------------- beq.w 15cb0 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   15bec:	|               move.w 1cd8c <fontSpace>,d0
   15bf2:	|               asr.w #1,d0
   15bf4:	|               ext.l d0
   15bf6:	|               add.l d0,20(sp)
	char *tmp = theText;
   15bfa:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15c00:	|     ,-------- bra.w 15ca4 <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15c04:	|  ,--|-------> movea.l 1cf92 <theFont>,a0
   15c0a:	|  |  |         movea.l 16(a0),a0
   15c0e:	|  |  |         movea.l 8(sp),a1
   15c12:	|  |  |         move.b (a1),d0
   15c14:	|  |  |         move.b d0,d0
   15c16:	|  |  |         andi.l #255,d0
   15c1c:	|  |  |         move.l 1cf8e <fontTableSize>,d1
   15c22:	|  |  |         cmp.l d0,d1
   15c24:	|  |  |  ,----- bls.s 15c50 <pasteStringToBackdrop+0x76>
   15c26:	|  |  |  |      move.l 1cf8a <fontTable>,d1
   15c2c:	|  |  |  |      movea.l 8(sp),a1
   15c30:	|  |  |  |      move.b (a1),d0
   15c32:	|  |  |  |      move.b d0,d0
   15c34:	|  |  |  |      andi.l #255,d0
   15c3a:	|  |  |  |      add.l d0,d0
   15c3c:	|  |  |  |      add.l d0,d0
   15c3e:	|  |  |  |      movea.l d1,a1
   15c40:	|  |  |  |      adda.l d0,a1
   15c42:	|  |  |  |      move.l (a1),d1
   15c44:	|  |  |  |      move.l d1,d0
   15c46:	|  |  |  |      lsl.l #3,d0
   15c48:	|  |  |  |      sub.l d1,d0
   15c4a:	|  |  |  |      add.l d0,d0
   15c4c:	|  |  |  |      add.l d0,d0
   15c4e:	|  |  |  |  ,-- bra.s 15c52 <pasteStringToBackdrop+0x78>
   15c50:	|  |  |  '--|-> moveq #0,d0
   15c52:	|  |  |     '-> adda.l d0,a0
   15c54:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15c56:	|  |  |         move.l 24(sp),d1
   15c5a:	|  |  |         movea.l (sp),a0
   15c5c:	|  |  |         move.l 12(a0),d0
   15c60:	|  |  |         move.l d0,d0
   15c62:	|  |  |         sub.w d0,d1
   15c64:	|  |  |         move.w d1,d0
   15c66:	|  |  |         movea.w d0,a1
   15c68:	|  |  |         move.l 20(sp),d1
   15c6c:	|  |  |         movea.l (sp),a0
   15c6e:	|  |  |         move.l 8(a0),d0
   15c72:	|  |  |         move.l d0,d0
   15c74:	|  |  |         sub.w d0,d1
   15c76:	|  |  |         move.w d1,d0
   15c78:	|  |  |         movea.w d0,a0
   15c7a:	|  |  |         move.l a1,-(sp)
   15c7c:	|  |  |         move.l a0,-(sp)
   15c7e:	|  |  |         move.l 8(sp),-(sp)
   15c82:	|  |  |         jsr 228a <CstPasteChar>
   15c88:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15c8c:	|  |  |         movea.l (sp),a0
   15c8e:	|  |  |         move.l (a0),d1
   15c90:	|  |  |         move.w 1cd8c <fontSpace>,d0
   15c96:	|  |  |         movea.w d0,a0
   15c98:	|  |  |         move.l d1,d0
   15c9a:	|  |  |         add.l a0,d0
   15c9c:	|  |  |         add.l d0,20(sp)
		tmp++;
   15ca0:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   15ca4:	|  |  '-------> movea.l 8(sp),a0
   15ca8:	|  |            move.b (a0),d0
   15caa:	|  '----------- bne.w 15c04 <pasteStringToBackdrop+0x2a>
   15cae:	|           ,-- bra.s 15cb2 <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   15cb0:	'-----------|-> nop
    }
}
   15cb2:	            '-> lea 12(sp),sp
   15cb6:	                rts

00015cb8 <stringWidth>:


int stringWidth (char * theText) {
   15cb8:	                lea -16(sp),sp
	int a = 0;
   15cbc:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   15cc0:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   15cc4:	                move.l 1cf8e <fontTableSize>,d0
   15cca:	            ,-- bne.s 15cd0 <stringWidth+0x18>
   15ccc:	            |   moveq #0,d0
   15cce:	,-----------|-- bra.s 15d44 <stringWidth+0x8c>

	char *tmp = theText;
   15cd0:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   15cd6:	|     ,-------- bra.s 15d38 <stringWidth+0x80>
        c = *tmp++;
   15cd8:	|  ,--|-------> move.l 8(sp),d0
   15cdc:	|  |  |         move.l d0,d1
   15cde:	|  |  |         addq.l #1,d1
   15ce0:	|  |  |         move.l d1,8(sp)
   15ce4:	|  |  |         movea.l d0,a0
   15ce6:	|  |  |         move.b (a0),d0
   15ce8:	|  |  |         ext.w d0
   15cea:	|  |  |         movea.w d0,a0
   15cec:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   15cee:	|  |  |         movea.l 1cf92 <theFont>,a0
   15cf4:	|  |  |         movea.l 16(a0),a1
   15cf8:	|  |  |         move.l 1cf8e <fontTableSize>,d0
   15cfe:	|  |  |         cmp.l (sp),d0
   15d00:	|  |  |  ,----- bls.s 15d20 <stringWidth+0x68>
   15d02:	|  |  |  |      move.l 1cf8a <fontTable>,d1
   15d08:	|  |  |  |      move.l (sp),d0
   15d0a:	|  |  |  |      add.l d0,d0
   15d0c:	|  |  |  |      add.l d0,d0
   15d0e:	|  |  |  |      movea.l d1,a0
   15d10:	|  |  |  |      adda.l d0,a0
   15d12:	|  |  |  |      move.l (a0),d1
   15d14:	|  |  |  |      move.l d1,d0
   15d16:	|  |  |  |      lsl.l #3,d0
   15d18:	|  |  |  |      sub.l d1,d0
   15d1a:	|  |  |  |      add.l d0,d0
   15d1c:	|  |  |  |      add.l d0,d0
   15d1e:	|  |  |  |  ,-- bra.s 15d22 <stringWidth+0x6a>
   15d20:	|  |  |  '--|-> moveq #0,d0
   15d22:	|  |  |     '-> lea (0,a1,d0.l),a0
   15d26:	|  |  |         move.l (a0),d1
   15d28:	|  |  |         move.w 1cd8c <fontSpace>,d0
   15d2e:	|  |  |         movea.w d0,a0
   15d30:	|  |  |         move.l d1,d0
   15d32:	|  |  |         add.l a0,d0
   15d34:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   15d38:	|  |  '-------> movea.l 8(sp),a0
   15d3c:	|  |            move.b (a0),d0
   15d3e:	|  '----------- bne.s 15cd8 <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   15d40:	|               move.l 12(sp),d0
}
   15d44:	'-------------> lea 16(sp),sp
   15d48:	                rts

00015d4a <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15d4a:	       lea -16(sp),sp
   15d4e:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15d50:	       moveq #36,d0
   15d52:	       move.l d0,16(sp)
   15d56:	       clr.l 12(sp)
   15d5a:	       move.l 1ce8a <SysBase>,d0
   15d60:	       movea.l d0,a6
   15d62:	       move.l 16(sp),d0
   15d66:	       move.l 12(sp),d1
   15d6a:	       jsr -684(a6)
   15d6e:	       move.l d0,8(sp)
   15d72:	       move.l 8(sp),d0
   15d76:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15d7a:	   ,-- bne.s 15d82 <addScreenRegion+0x38>
   15d7c:	   |   clr.w d0
   15d7e:	,--|-- bra.w 15e02 <addScreenRegion+0xb8>
    newRegion->di = di;
   15d82:	|  '-> movea.l 4(sp),a0
   15d86:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15d8c:	|      movea.l 4(sp),a0
   15d90:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   15d94:	|      movea.l 4(sp),a0
   15d98:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15d9e:	|      movea.l 4(sp),a0
   15da2:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15da8:	|      movea.l 4(sp),a0
   15dac:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   15db2:	|      movea.l 4(sp),a0
   15db6:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15dbc:	|      movea.l 4(sp),a0
   15dc0:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15dc6:	|      move.l 52(sp),-(sp)
   15dca:	|      jsr d9d2 <loadObjectType>
   15dd0:	|      addq.l #4,sp
   15dd2:	|      movea.l 4(sp),a0
   15dd6:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15dda:	|      move.l 1cf96 <allScreenRegions>,d0
   15de0:	|      movea.l 4(sp),a0
   15de4:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15de8:	|      move.l 4(sp),1cf96 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15df0:	|      movea.l 4(sp),a0
   15df4:	|      move.l 28(a0),d0
   15df8:	|      sne d0
   15dfa:	|      neg.b d0
   15dfc:	|      move.b d0,d0
   15dfe:	|      andi.w #255,d0
}
   15e02:	'----> movea.l (sp)+,a6
   15e04:	       lea 16(sp),sp
   15e08:	       rts

00015e0a <getOverRegion>:

void getOverRegion () {
   15e0a:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15e0c:	             move.l 1cf96 <allScreenRegions>,(sp)
	while (thisRegion) {
   15e12:	   ,-------- bra.s 15e80 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15e14:	,--|-------> move.l 1ce46 <input+0xa>,d0
   15e1a:	|  |         movea.l (sp),a0
   15e1c:	|  |         movea.l (a0),a0
   15e1e:	|  |         move.l 1cf40 <cameraX>,d1
   15e24:	|  |         suba.l d1,a0
   15e26:	|  |         cmpa.l d0,a0
   15e28:	|  |  ,----- bgt.s 15e7a <getOverRegion+0x70>
   15e2a:	|  |  |      move.l 1ce4a <input+0xe>,d0
   15e30:	|  |  |      movea.l (sp),a0
   15e32:	|  |  |      movea.l 4(a0),a0
   15e36:	|  |  |      move.l 1cf44 <cameraY>,d1
   15e3c:	|  |  |      suba.l d1,a0
   15e3e:	|  |  |      cmpa.l d0,a0
   15e40:	|  |  +----- bgt.s 15e7a <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15e42:	|  |  |      move.l 1ce46 <input+0xa>,d0
   15e48:	|  |  |      movea.l (sp),a0
   15e4a:	|  |  |      movea.l 8(a0),a0
   15e4e:	|  |  |      move.l 1cf40 <cameraX>,d1
   15e54:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15e56:	|  |  |      cmpa.l d0,a0
   15e58:	|  |  +----- blt.s 15e7a <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15e5a:	|  |  |      move.l 1ce4a <input+0xe>,d0
   15e60:	|  |  |      movea.l (sp),a0
   15e62:	|  |  |      movea.l 12(a0),a0
   15e66:	|  |  |      move.l 1cf44 <cameraY>,d1
   15e6c:	|  |  |      suba.l d1,a0
   15e6e:	|  |  |      cmpa.l d0,a0
   15e70:	|  |  +----- blt.s 15e7a <getOverRegion+0x70>
			overRegion = thisRegion;
   15e72:	|  |  |      move.l (sp),1cf9a <overRegion>
			return;
   15e78:	|  |  |  ,-- bra.s 15e8c <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15e7a:	|  |  '--|-> movea.l (sp),a0
   15e7c:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15e80:	|  '-----|-> tst.l (sp)
   15e82:	'--------|-- bne.s 15e14 <getOverRegion+0xa>
	}
	overRegion = NULL;
   15e84:	         |   clr.l 1cf9a <overRegion>
	return;
   15e8a:	         |   nop
}
   15e8c:	         '-> addq.l #4,sp
   15e8e:	             rts

00015e90 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15e90:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15e92:	             move.l 1cf96 <allScreenRegions>,(sp)

	while (thisRegion) {
   15e98:	   ,-------- bra.s 15eb4 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15e9a:	,--|-------> movea.l (sp),a0
   15e9c:	|  |         movea.l 28(a0),a0
   15ea0:	|  |         move.l 4(a0),d0
   15ea4:	|  |         cmp.l 8(sp),d0
   15ea8:	|  |     ,-- bne.s 15eae <getRegionForObject+0x1e>
			return thisRegion;
   15eaa:	|  |     |   move.l (sp),d0
   15eac:	|  |  ,--|-- bra.s 15eba <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15eae:	|  |  |  '-> movea.l (sp),a0
   15eb0:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15eb4:	|  '--|----> tst.l (sp)
   15eb6:	'-----|----- bne.s 15e9a <getRegionForObject+0xa>
	}

	return NULL;
   15eb8:	      |      moveq #0,d0
}
   15eba:	      '----> addq.l #4,sp
   15ebc:	             rts

00015ebe <killAllRegions>:

void killAllRegions () {
   15ebe:	       subq.l #8,sp
   15ec0:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15ec2:	   ,-- bra.s 15f04 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15ec4:	,--|-> move.l 1cf96 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15ecc:	|  |   movea.l 1cf96 <allScreenRegions>,a0
   15ed2:	|  |   move.l 32(a0),d0
   15ed6:	|  |   move.l d0,1cf96 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15edc:	|  |   movea.l 8(sp),a0
   15ee0:	|  |   move.l 28(a0),d0
   15ee4:	|  |   move.l d0,-(sp)
   15ee6:	|  |   jsr dc8a <removeObjectType>
   15eec:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15eee:	|  |   move.l 8(sp),4(sp)
   15ef4:	|  |   move.l 1ce8a <SysBase>,d0
   15efa:	|  |   movea.l d0,a6
   15efc:	|  |   movea.l 4(sp),a1
   15f00:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15f04:	|  '-> move.l 1cf96 <allScreenRegions>,d0
   15f0a:	'----- bne.s 15ec4 <killAllRegions+0x6>
	}
	overRegion = NULL;
   15f0c:	       clr.l 1cf9a <overRegion>
}
   15f12:	       nop
   15f14:	       movea.l (sp)+,a6
   15f16:	       addq.l #8,sp
   15f18:	       rts

00015f1a <loadRegions>:

void loadRegions (BPTR fp) {
   15f1a:	       lea -24(sp),sp
   15f1e:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15f20:	       move.l 32(sp),-(sp)
   15f24:	       jsr 6bc <get2bytes>
   15f2a:	       addq.l #4,sp
   15f2c:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15f30:	       move.l #118678,20(sp)

	while (numRegions --) {
   15f38:	   ,-- bra.w 16016 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15f3c:	,--|-> moveq #36,d0
   15f3e:	|  |   move.l d0,16(sp)
   15f42:	|  |   clr.l 12(sp)
   15f46:	|  |   move.l 1ce8a <SysBase>,d0
   15f4c:	|  |   movea.l d0,a6
   15f4e:	|  |   move.l 16(sp),d0
   15f52:	|  |   move.l 12(sp),d1
   15f56:	|  |   jsr -684(a6)
   15f5a:	|  |   move.l d0,8(sp)
   15f5e:	|  |   move.l 8(sp),d0
   15f62:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15f66:	|  |   movea.l 20(sp),a0
   15f6a:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15f6e:	|  |   moveq #32,d1
   15f70:	|  |   add.l 4(sp),d1
   15f74:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15f78:	|  |   move.l 32(sp),-(sp)
   15f7c:	|  |   jsr 6bc <get2bytes>
   15f82:	|  |   addq.l #4,sp
   15f84:	|  |   movea.l 4(sp),a0
   15f88:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15f8a:	|  |   move.l 32(sp),-(sp)
   15f8e:	|  |   jsr 6bc <get2bytes>
   15f94:	|  |   addq.l #4,sp
   15f96:	|  |   movea.l 4(sp),a0
   15f9a:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15f9e:	|  |   move.l 32(sp),-(sp)
   15fa2:	|  |   jsr 6bc <get2bytes>
   15fa8:	|  |   addq.l #4,sp
   15faa:	|  |   movea.l 4(sp),a0
   15fae:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15fb2:	|  |   move.l 32(sp),-(sp)
   15fb6:	|  |   jsr 6bc <get2bytes>
   15fbc:	|  |   addq.l #4,sp
   15fbe:	|  |   movea.l 4(sp),a0
   15fc2:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15fc6:	|  |   move.l 32(sp),-(sp)
   15fca:	|  |   jsr 6bc <get2bytes>
   15fd0:	|  |   addq.l #4,sp
   15fd2:	|  |   movea.l 4(sp),a0
   15fd6:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15fda:	|  |   move.l 32(sp),-(sp)
   15fde:	|  |   jsr 6bc <get2bytes>
   15fe4:	|  |   addq.l #4,sp
   15fe6:	|  |   movea.l 4(sp),a0
   15fea:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15fee:	|  |   move.l 32(sp),-(sp)
   15ff2:	|  |   jsr 6bc <get2bytes>
   15ff8:	|  |   addq.l #4,sp
   15ffa:	|  |   movea.l 4(sp),a0
   15ffe:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   16002:	|  |   move.l 32(sp),-(sp)
   16006:	|  |   jsr d980 <loadObjectRef>
   1600c:	|  |   addq.l #4,sp
   1600e:	|  |   movea.l 4(sp),a0
   16012:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   16016:	|  '-> move.l 24(sp),d0
   1601a:	|      move.l d0,d1
   1601c:	|      subq.l #1,d1
   1601e:	|      move.l d1,24(sp)
   16022:	|      tst.l d0
   16024:	'----- bne.w 15f3c <loadRegions+0x22>
	}
	* pointy = NULL;
   16028:	       movea.l 20(sp),a0
   1602c:	       clr.l (a0)
}
   1602e:	       nop
   16030:	       movea.l (sp)+,a6
   16032:	       lea 24(sp),sp
   16036:	       rts

00016038 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   16038:	             lea -12(sp),sp
   1603c:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   1603e:	             move.l #118678,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   16046:	   ,-------- bra.s 160c0 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   16048:	,--|-------> movea.l 12(sp),a0
   1604c:	|  |         movea.l (a0),a0
   1604e:	|  |         movea.l 28(a0),a0
   16052:	|  |         move.l 4(a0),d0
   16056:	|  |         cmp.l 20(sp),d0
   1605a:	|  |  ,----- bne.s 160b2 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   1605c:	|  |  |      movea.l 12(sp),a0
   16060:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   16064:	|  |  |      movea.l 8(sp),a0
   16068:	|  |  |      move.l 32(a0),d0
   1606c:	|  |  |      movea.l 12(sp),a0
   16070:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   16072:	|  |  |      movea.l 8(sp),a0
   16076:	|  |  |      move.l 28(a0),d0
   1607a:	|  |  |      move.l d0,-(sp)
   1607c:	|  |  |      jsr dc8a <removeObjectType>
   16082:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   16084:	|  |  |      move.l 1cf9a <overRegion>,d0
   1608a:	|  |  |      cmp.l 8(sp),d0
   1608e:	|  |  |  ,-- bne.s 16096 <removeScreenRegion+0x5e>
   16090:	|  |  |  |   clr.l 1cf9a <overRegion>
            FreeVec(killMe);
   16096:	|  |  |  '-> move.l 8(sp),4(sp)
   1609c:	|  |  |      move.l 1ce8a <SysBase>,d0
   160a2:	|  |  |      movea.l d0,a6
   160a4:	|  |  |      movea.l 4(sp),a1
   160a8:	|  |  |      jsr -690(a6)
            killMe = NULL;
   160ac:	|  |  |      clr.l 8(sp)
   160b0:	|  +--|----- bra.s 160c0 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   160b2:	|  |  '----> movea.l 12(sp),a0
   160b6:	|  |         move.l (a0),d0
   160b8:	|  |         moveq #32,d1
   160ba:	|  |         add.l d0,d1
   160bc:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   160c0:	|  '-------> movea.l 12(sp),a0
   160c4:	|            move.l (a0),d0
   160c6:	'----------- bne.s 16048 <removeScreenRegion+0x10>
        }
    }
}
   160c8:	             nop
   160ca:	             nop
   160cc:	             movea.l (sp)+,a6
   160ce:	             lea 12(sp),sp
   160d2:	             rts

000160d4 <saveRegions>:

void saveRegions (BPTR fp) {
   160d4:	       subq.l #8,sp
	int numRegions = 0;
   160d6:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   160da:	       move.l 1cf96 <allScreenRegions>,(sp)
	while (thisRegion) {
   160e0:	   ,-- bra.s 160ec <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   160e2:	,--|-> movea.l (sp),a0
   160e4:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   160e8:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   160ec:	|  '-> tst.l (sp)
   160ee:	'----- bne.s 160e2 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   160f0:	       move.l 12(sp),-(sp)
   160f4:	       move.l 8(sp),-(sp)
   160f8:	       jsr 8d0 <put2bytes>
   160fe:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   16100:	       move.l 1cf96 <allScreenRegions>,(sp)
	while (thisRegion) {
   16106:	,----- bra.w 161ae <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   1610a:	|  ,-> movea.l (sp),a0
   1610c:	|  |   move.l (a0),d0
   1610e:	|  |   move.l 12(sp),-(sp)
   16112:	|  |   move.l d0,-(sp)
   16114:	|  |   jsr 8d0 <put2bytes>
   1611a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   1611c:	|  |   movea.l (sp),a0
   1611e:	|  |   move.l 4(a0),d0
   16122:	|  |   move.l 12(sp),-(sp)
   16126:	|  |   move.l d0,-(sp)
   16128:	|  |   jsr 8d0 <put2bytes>
   1612e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   16130:	|  |   movea.l (sp),a0
   16132:	|  |   move.l 8(a0),d0
   16136:	|  |   move.l 12(sp),-(sp)
   1613a:	|  |   move.l d0,-(sp)
   1613c:	|  |   jsr 8d0 <put2bytes>
   16142:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   16144:	|  |   movea.l (sp),a0
   16146:	|  |   move.l 12(a0),d0
   1614a:	|  |   move.l 12(sp),-(sp)
   1614e:	|  |   move.l d0,-(sp)
   16150:	|  |   jsr 8d0 <put2bytes>
   16156:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   16158:	|  |   movea.l (sp),a0
   1615a:	|  |   move.l 16(a0),d0
   1615e:	|  |   move.l 12(sp),-(sp)
   16162:	|  |   move.l d0,-(sp)
   16164:	|  |   jsr 8d0 <put2bytes>
   1616a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   1616c:	|  |   movea.l (sp),a0
   1616e:	|  |   move.l 20(a0),d0
   16172:	|  |   move.l 12(sp),-(sp)
   16176:	|  |   move.l d0,-(sp)
   16178:	|  |   jsr 8d0 <put2bytes>
   1617e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   16180:	|  |   movea.l (sp),a0
   16182:	|  |   move.l 24(a0),d0
   16186:	|  |   move.l 12(sp),-(sp)
   1618a:	|  |   move.l d0,-(sp)
   1618c:	|  |   jsr 8d0 <put2bytes>
   16192:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   16194:	|  |   movea.l (sp),a0
   16196:	|  |   move.l 28(a0),d0
   1619a:	|  |   move.l 12(sp),-(sp)
   1619e:	|  |   move.l d0,-(sp)
   161a0:	|  |   jsr dd2a <saveObjectRef>
   161a6:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   161a8:	|  |   movea.l (sp),a0
   161aa:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   161ae:	'--|-> tst.l (sp)
   161b0:	   '-- bne.w 1610a <saveRegions+0x36>
	}
}
   161b4:	       nop
   161b6:	       nop
   161b8:	       addq.l #8,sp
   161ba:	       rts

000161bc <showBoxes>:

void showBoxes () {
   161bc:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   161be:	       move.l 1cf96 <allScreenRegions>,(sp)

	while (huntRegion) {
   161c4:	,----- bra.w 16260 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   161c8:	|  ,-> movea.l (sp),a0
   161ca:	|  |   move.l 12(a0),d0
   161ce:	|  |   movea.l d0,a1
   161d0:	|  |   movea.l (sp),a0
   161d2:	|  |   move.l 4(a0),d0
   161d6:	|  |   move.l d0,d1
   161d8:	|  |   movea.l (sp),a0
   161da:	|  |   move.l (a0),d0
   161dc:	|  |   move.l a1,-(sp)
   161de:	|  |   move.l d1,-(sp)
   161e0:	|  |   move.l d0,-(sp)
   161e2:	|  |   jsr d60e <drawVerticalLine>
   161e8:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   161ec:	|  |   movea.l (sp),a0
   161ee:	|  |   move.l 12(a0),d0
   161f2:	|  |   movea.l d0,a1
   161f4:	|  |   movea.l (sp),a0
   161f6:	|  |   move.l 4(a0),d0
   161fa:	|  |   move.l d0,d1
   161fc:	|  |   movea.l (sp),a0
   161fe:	|  |   move.l 8(a0),d0
   16202:	|  |   move.l a1,-(sp)
   16204:	|  |   move.l d1,-(sp)
   16206:	|  |   move.l d0,-(sp)
   16208:	|  |   jsr d60e <drawVerticalLine>
   1620e:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   16212:	|  |   movea.l (sp),a0
   16214:	|  |   move.l 8(a0),d0
   16218:	|  |   movea.l d0,a1
   1621a:	|  |   movea.l (sp),a0
   1621c:	|  |   move.l 4(a0),d0
   16220:	|  |   move.l d0,d1
   16222:	|  |   movea.l (sp),a0
   16224:	|  |   move.l (a0),d0
   16226:	|  |   move.l a1,-(sp)
   16228:	|  |   move.l d1,-(sp)
   1622a:	|  |   move.l d0,-(sp)
   1622c:	|  |   jsr d5e8 <drawHorizontalLine>
   16232:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   16236:	|  |   movea.l (sp),a0
   16238:	|  |   move.l 8(a0),d0
   1623c:	|  |   movea.l d0,a1
   1623e:	|  |   movea.l (sp),a0
   16240:	|  |   move.l 12(a0),d0
   16244:	|  |   move.l d0,d1
   16246:	|  |   movea.l (sp),a0
   16248:	|  |   move.l (a0),d0
   1624a:	|  |   move.l a1,-(sp)
   1624c:	|  |   move.l d1,-(sp)
   1624e:	|  |   move.l d0,-(sp)
   16250:	|  |   jsr d5e8 <drawHorizontalLine>
   16256:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   1625a:	|  |   movea.l (sp),a0
   1625c:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   16260:	'--|-> tst.l (sp)
   16262:	   '-- bne.w 161c8 <showBoxes+0xc>
	}
   16266:	       nop
   16268:	       nop
   1626a:	       addq.l #4,sp
   1626c:	       rts

0001626e <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   1626e:	       lea -88(sp),sp
   16272:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   16274:	       move.l 1ce8a <SysBase>,d0
   1627a:	       movea.l d0,a6
   1627c:	       jsr -666(a6)
   16280:	       move.l d0,88(sp)
   16284:	       move.l 88(sp),d0
   16288:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   1628c:	       move.l 84(sp),80(sp)
   16292:	       moveq #40,d0
   16294:	       move.l d0,76(sp)
   16298:	       move.l 1ce8a <SysBase>,d0
   1629e:	       movea.l d0,a6
   162a0:	       movea.l 80(sp),a0
   162a4:	       move.l 76(sp),d0
   162a8:	       jsr -654(a6)
   162ac:	       move.l d0,72(sp)
   162b0:	       move.l 72(sp),d0
   162b4:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   162b8:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   162be:	       move.l #107894,60(sp)
   162c6:	       clr.l 56(sp)
   162ca:	       move.l 64(sp),52(sp)
   162d0:	       clr.l 48(sp)
   162d4:	       move.l 1ce8a <SysBase>,d0
   162da:	       movea.l d0,a6
   162dc:	       movea.l 60(sp),a0
   162e0:	       move.l 56(sp),d0
   162e4:	       movea.l 52(sp),a1
   162e8:	       move.l 48(sp),d1
   162ec:	       jsr -444(a6)
   162f0:	       move.b d0,47(sp)
   162f4:	       move.b 47(sp),d0
   162f8:	   ,-- beq.s 1630e <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   162fa:	   |   pea 1a583 <PutChar+0x2433>
   16300:	   |   jsr 176ae <KPrintF>
   16306:	   |   addq.l #4,sp
        return 0;
   16308:	   |   moveq #0,d0
   1630a:	,--|-- bra.w 163c8 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   1630e:	|  '-> movea.l 64(sp),a0
   16312:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   16318:	|      lea 92(sp),a0
   1631c:	|      lea -86(a0),a0
   16320:	|      move.l a0,38(sp)
   16324:	|      movea.l 42(sp),a6
   16328:	|      movea.l 38(sp),a0
   1632c:	|      jsr -60(a6)
   16330:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   16334:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   1633a:	|      move.l #1103515245,-(sp)
   16340:	|      move.l 34(sp),-(sp)
   16344:	|      jsr 1803a <__mulsi3>
   1634a:	|      addq.l #8,sp
   1634c:	|      addi.l #12345,d0
   16352:	|      move.l d0,d1
   16354:	|      bclr #31,d1
   16358:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   1635c:	|      move.l 30(sp),d0
   16360:	|      pea 64 <_start+0x64>
   16364:	|      move.l d0,-(sp)
   16366:	|      jsr 18114 <__umodsi3>
   1636c:	|      addq.l #8,sp
   1636e:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   16372:	|      move.l 26(sp),-(sp)
   16376:	|      pea 1a5a0 <PutChar+0x2450>
   1637c:	|      jsr 176ae <KPrintF>
   16382:	|      addq.l #8,sp

    CloseDevice(ioreq);
   16384:	|      move.l 64(sp),22(sp)
   1638a:	|      move.l 1ce8a <SysBase>,d0
   16390:	|      movea.l d0,a6
   16392:	|      movea.l 22(sp),a1
   16396:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   1639a:	|      move.l 64(sp),18(sp)
   163a0:	|      move.l 1ce8a <SysBase>,d0
   163a6:	|      movea.l d0,a6
   163a8:	|      movea.l 18(sp),a0
   163ac:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   163b0:	|      move.l 84(sp),14(sp)
   163b6:	|      move.l 1ce8a <SysBase>,d0
   163bc:	|      movea.l d0,a6
   163be:	|      movea.l 14(sp),a0
   163c2:	|      jsr -672(a6)
    return 0;
   163c6:	|      moveq #0,d0
   163c8:	'----> movea.l (sp)+,a6
   163ca:	       lea 88(sp),sp
   163ce:	       rts

000163d0 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   163d0:	             lea -20(sp),sp
   163d4:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   163d6:	             move.l 1cf9e <allLoadedBanks>,20(sp)
	while (returnMe) {
   163de:	      ,----- bra.s 16410 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   163e0:	   ,--|----> movea.l 20(sp),a0
   163e4:	   |  |      move.l (a0),d0
   163e6:	   |  |      cmp.l 28(sp),d0
   163ea:	   |  |  ,-- bne.s 16406 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   163ec:	   |  |  |   movea.l 20(sp),a0
   163f0:	   |  |  |   move.l 4(a0),d0
   163f4:	   |  |  |   addq.l #1,d0
   163f6:	   |  |  |   movea.l 20(sp),a0
   163fa:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   163fe:	   |  |  |   move.l 20(sp),d0
   16402:	,--|--|--|-- bra.w 164a4 <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   16406:	|  |  |  '-> movea.l 20(sp),a0
   1640a:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   16410:	|  |  '----> tst.l 20(sp)
   16414:	|  '-------- bne.s 163e0 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   16416:	|            moveq #26,d0
   16418:	|            move.l d0,16(sp)
   1641c:	|            clr.l 12(sp)
   16420:	|            move.l 1ce8a <SysBase>,d0
   16426:	|            movea.l d0,a6
   16428:	|            move.l 16(sp),d0
   1642c:	|            move.l 12(sp),d1
   16430:	|            jsr -684(a6)
   16434:	|            move.l d0,8(sp)
   16438:	|            move.l 8(sp),d0
   1643c:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   16440:	|     ,----- beq.s 164a2 <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   16442:	|     |      movea.l 20(sp),a0
   16446:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   1644a:	|     |      move.l 20(sp),d0
   1644e:	|     |      addq.l #8,d0
   16450:	|     |      move.l d0,-(sp)
   16452:	|     |      move.l 32(sp),-(sp)
   16456:	|     |      jsr 8e42 <loadSpriteBank>
   1645c:	|     |      addq.l #8,sp
   1645e:	|     |      tst.w d0
   16460:	|     |  ,-- beq.s 16488 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   16462:	|     |  |   movea.l 20(sp),a0
   16466:	|     |  |   moveq #1,d0
   16468:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   1646c:	|     |  |   move.l 1cf9e <allLoadedBanks>,d0
   16472:	|     |  |   movea.l 20(sp),a0
   16476:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   1647a:	|     |  |   move.l 20(sp),1cf9e <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   16482:	|     |  |   move.l 20(sp),d0
   16486:	+-----|--|-- bra.s 164a4 <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   16488:	|     |  '-> move.l 20(sp),4(sp)
   1648e:	|     |      move.l 1ce8a <SysBase>,d0
   16494:	|     |      movea.l d0,a6
   16496:	|     |      movea.l 4(sp),a1
   1649a:	|     |      jsr -690(a6)
			return NULL;
   1649e:	|     |      moveq #0,d0
   164a0:	+-----|----- bra.s 164a4 <loadBankForAnim+0xd4>
		}
	} else return NULL;
   164a2:	|     '----> moveq #0,d0
}
   164a4:	'----------> movea.l (sp)+,a6
   164a6:	             lea 20(sp),sp
   164aa:	             rts

000164ac <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   164ac:	       lea -60(sp),sp
   164b0:	       move.l d3,-(sp)
   164b2:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   164b4:	       move.l 88(sp),d0
   164b8:	       sub.l 80(sp),d0
   164bc:	       move.l d0,-(sp)
   164be:	       jsr 17aa0 <__floatsidf>
   164c4:	       addq.l #4,sp
   164c6:	       move.l d0,32(sp)
   164ca:	       move.l d1,36(sp)
   164ce:	       move.l 32(sp),60(sp)
   164d4:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   164da:	       move.l 92(sp),d0
   164de:	       sub.l 84(sp),d0
   164e2:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   164e6:	       move.l 96(sp),d0
   164ea:	       sub.l 80(sp),d0
   164ee:	       move.l d0,-(sp)
   164f0:	       jsr 17aa0 <__floatsidf>
   164f6:	       addq.l #4,sp
   164f8:	       move.l 64(sp),-(sp)
   164fc:	       move.l 64(sp),-(sp)
   16500:	       move.l d1,-(sp)
   16502:	       move.l d0,-(sp)
   16504:	       jsr 17b30 <__muldf3>
   1650a:	       lea 16(sp),sp
   1650e:	       move.l d0,d2
   16510:	       move.l d1,d3
   16512:	       move.l 100(sp),d0
   16516:	       sub.l 84(sp),d0
   1651a:	       move.l 56(sp),-(sp)
   1651e:	       move.l d0,-(sp)
   16520:	       jsr 1803a <__mulsi3>
   16526:	       addq.l #8,sp
   16528:	       move.l d0,-(sp)
   1652a:	       jsr 17aa0 <__floatsidf>
   16530:	       addq.l #4,sp
   16532:	       move.l d1,-(sp)
   16534:	       move.l d0,-(sp)
   16536:	       move.l d3,-(sp)
   16538:	       move.l d2,-(sp)
   1653a:	       jsr 178d2 <__adddf3>
   16540:	       lea 16(sp),sp
   16544:	       move.l d0,24(sp)
   16548:	       move.l d1,28(sp)
   1654c:	       move.l 24(sp),48(sp)
   16552:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   16558:	       move.l 64(sp),-(sp)
   1655c:	       move.l 64(sp),-(sp)
   16560:	       move.l 72(sp),-(sp)
   16564:	       move.l 72(sp),-(sp)
   16568:	       jsr 17b30 <__muldf3>
   1656e:	       lea 16(sp),sp
   16572:	       move.l d0,d2
   16574:	       move.l d1,d3
   16576:	       move.l 56(sp),-(sp)
   1657a:	       move.l 60(sp),-(sp)
   1657e:	       jsr 1803a <__mulsi3>
   16584:	       addq.l #8,sp
   16586:	       move.l d0,-(sp)
   16588:	       jsr 17aa0 <__floatsidf>
   1658e:	       addq.l #4,sp
   16590:	       move.l d1,-(sp)
   16592:	       move.l d0,-(sp)
   16594:	       move.l d3,-(sp)
   16596:	       move.l d2,-(sp)
   16598:	       jsr 178d2 <__adddf3>
   1659e:	       lea 16(sp),sp
   165a2:	       move.l d1,-(sp)
   165a4:	       move.l d0,-(sp)
   165a6:	       move.l 60(sp),-(sp)
   165aa:	       move.l 60(sp),-(sp)
   165ae:	       jsr 17934 <__divdf3>
   165b4:	       lea 16(sp),sp
   165b8:	       move.l d0,16(sp)
   165bc:	       move.l d1,20(sp)
   165c0:	       move.l 16(sp),48(sp)
   165c6:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   165cc:	       clr.l -(sp)
   165ce:	       clr.l -(sp)
   165d0:	       move.l 60(sp),-(sp)
   165d4:	       move.l 60(sp),-(sp)
   165d8:	       jsr 17cb8 <__ltdf2>
   165de:	       lea 16(sp),sp
   165e2:	       tst.l d0
   165e4:	   ,-- bge.s 165fa <closestPointOnLine+0x14e>
		*closestX = x1;
   165e6:	   |   movea.l 72(sp),a0
   165ea:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   165ee:	   |   movea.l 76(sp),a0
   165f2:	   |   move.l 84(sp),(a0)
   165f6:	,--|-- bra.w 166c8 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   165fa:	|  '-> clr.l -(sp)
   165fc:	|      move.l #1072693248,-(sp)
   16602:	|      move.l 60(sp),-(sp)
   16606:	|      move.l 60(sp),-(sp)
   1660a:	|      jsr 17bfe <__gtdf2>
   16610:	|      lea 16(sp),sp
   16614:	|      tst.l d0
   16616:	|  ,-- ble.s 1662c <closestPointOnLine+0x180>
		*closestX = x2;
   16618:	|  |   movea.l 72(sp),a0
   1661c:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   16620:	|  |   movea.l 76(sp),a0
   16624:	|  |   move.l 92(sp),(a0)
   16628:	+--|-- bra.w 166c8 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   1662c:	|  '-> move.l 64(sp),-(sp)
   16630:	|      move.l 64(sp),-(sp)
   16634:	|      move.l 60(sp),-(sp)
   16638:	|      move.l 60(sp),-(sp)
   1663c:	|      jsr 17b30 <__muldf3>
   16642:	|      lea 16(sp),sp
   16646:	|      move.l d0,8(sp)
   1664a:	|      move.l d1,12(sp)
   1664e:	|      move.l 8(sp),40(sp)
   16654:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   1665a:	|      move.l 44(sp),-(sp)
   1665e:	|      move.l 44(sp),-(sp)
   16662:	|      jsr 17a42 <__fixdfsi>
   16668:	|      addq.l #8,sp
   1666a:	|      movea.l 72(sp),a0
   1666e:	|      move.l d0,(a0)
		*closestX += x1;
   16670:	|      movea.l 72(sp),a0
   16674:	|      move.l (a0),d0
   16676:	|      add.l 80(sp),d0
   1667a:	|      movea.l 72(sp),a0
   1667e:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   16680:	|      move.l 56(sp),-(sp)
   16684:	|      jsr 17aa0 <__floatsidf>
   1668a:	|      addq.l #4,sp
   1668c:	|      move.l 52(sp),-(sp)
   16690:	|      move.l 52(sp),-(sp)
   16694:	|      move.l d1,-(sp)
   16696:	|      move.l d0,-(sp)
   16698:	|      jsr 17b30 <__muldf3>
   1669e:	|      lea 16(sp),sp
   166a2:	|      move.l d1,-(sp)
   166a4:	|      move.l d0,-(sp)
   166a6:	|      jsr 17a42 <__fixdfsi>
   166ac:	|      addq.l #8,sp
   166ae:	|      movea.l 76(sp),a0
   166b2:	|      move.l d0,(a0)
		*closestY += y1;
   166b4:	|      movea.l 76(sp),a0
   166b8:	|      move.l (a0),d0
   166ba:	|      add.l 84(sp),d0
   166be:	|      movea.l 76(sp),a0
   166c2:	|      move.l d0,(a0)
		return TRUE;
   166c4:	|      moveq #1,d0
   166c6:	|  ,-- bra.s 166ca <closestPointOnLine+0x21e>
	}
	return FALSE;
   166c8:	'--|-> clr.w d0
}
   166ca:	   '-> move.l (sp)+,d2
   166cc:	       move.l (sp)+,d3
   166ce:	       lea 60(sp),sp
   166d2:	       rts

000166d4 <drawFloor>:

void drawFloor() {
   166d4:	                lea -12(sp),sp
   166d8:	                move.l d3,-(sp)
   166da:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   166dc:	                clr.l 16(sp)
   166e0:	   ,----------- bra.w 168f4 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   166e4:	,--|----------> movea.l 1cfa2 <currentFloor>,a0
   166ea:	|  |            move.l 12(a0),d1
   166ee:	|  |            move.l 16(sp),d0
   166f2:	|  |            lsl.l #3,d0
   166f4:	|  |            movea.l d1,a0
   166f6:	|  |            adda.l d0,a0
   166f8:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   166fc:	|  |            moveq #1,d0
   166fe:	|  |            cmp.l 8(sp),d0
   16702:	|  |  ,-------- bge.w 168f0 <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   16706:	|  |  |         moveq #1,d0
   16708:	|  |  |         move.l d0,12(sp)
   1670c:	|  |  |     ,-- bra.w 16806 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   16710:	|  |  |  ,--|-> movea.l 1cfa2 <currentFloor>,a0
   16716:	|  |  |  |  |   move.l 4(a0),d1
   1671a:	|  |  |  |  |   movea.l 1cfa2 <currentFloor>,a0
   16720:	|  |  |  |  |   movea.l 12(a0),a0
   16724:	|  |  |  |  |   move.l 16(sp),d0
   16728:	|  |  |  |  |   lsl.l #3,d0
   1672a:	|  |  |  |  |   adda.l d0,a0
   1672c:	|  |  |  |  |   movea.l 4(a0),a0
   16730:	|  |  |  |  |   move.l 12(sp),d0
   16734:	|  |  |  |  |   add.l d0,d0
   16736:	|  |  |  |  |   add.l d0,d0
   16738:	|  |  |  |  |   adda.l d0,a0
   1673a:	|  |  |  |  |   move.l (a0),d0
   1673c:	|  |  |  |  |   lsl.l #3,d0
   1673e:	|  |  |  |  |   movea.l d1,a0
   16740:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16742:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   16746:	|  |  |  |  |   movea.l 1cfa2 <currentFloor>,a0
   1674c:	|  |  |  |  |   move.l 4(a0),d1
   16750:	|  |  |  |  |   movea.l 1cfa2 <currentFloor>,a0
   16756:	|  |  |  |  |   movea.l 12(a0),a0
   1675a:	|  |  |  |  |   move.l 16(sp),d0
   1675e:	|  |  |  |  |   lsl.l #3,d0
   16760:	|  |  |  |  |   adda.l d0,a0
   16762:	|  |  |  |  |   movea.l 4(a0),a0
   16766:	|  |  |  |  |   move.l 12(sp),d0
   1676a:	|  |  |  |  |   add.l d0,d0
   1676c:	|  |  |  |  |   add.l d0,d0
   1676e:	|  |  |  |  |   adda.l d0,a0
   16770:	|  |  |  |  |   move.l (a0),d0
   16772:	|  |  |  |  |   lsl.l #3,d0
   16774:	|  |  |  |  |   movea.l d1,a0
   16776:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   16778:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   1677a:	|  |  |  |  |   movea.l 1cfa2 <currentFloor>,a0
   16780:	|  |  |  |  |   move.l 4(a0),d1
   16784:	|  |  |  |  |   movea.l 1cfa2 <currentFloor>,a0
   1678a:	|  |  |  |  |   movea.l 12(a0),a0
   1678e:	|  |  |  |  |   move.l 16(sp),d0
   16792:	|  |  |  |  |   lsl.l #3,d0
   16794:	|  |  |  |  |   adda.l d0,a0
   16796:	|  |  |  |  |   movea.l 4(a0),a0
   1679a:	|  |  |  |  |   move.l 12(sp),d0
   1679e:	|  |  |  |  |   addi.l #1073741823,d0
   167a4:	|  |  |  |  |   add.l d0,d0
   167a6:	|  |  |  |  |   add.l d0,d0
   167a8:	|  |  |  |  |   adda.l d0,a0
   167aa:	|  |  |  |  |   move.l (a0),d0
   167ac:	|  |  |  |  |   lsl.l #3,d0
   167ae:	|  |  |  |  |   movea.l d1,a0
   167b0:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   167b2:	|  |  |  |  |   move.l 4(a0),d1
   167b6:	|  |  |  |  |   movea.l 1cfa2 <currentFloor>,a0
   167bc:	|  |  |  |  |   move.l 4(a0),d3
   167c0:	|  |  |  |  |   movea.l 1cfa2 <currentFloor>,a0
   167c6:	|  |  |  |  |   movea.l 12(a0),a0
   167ca:	|  |  |  |  |   move.l 16(sp),d0
   167ce:	|  |  |  |  |   lsl.l #3,d0
   167d0:	|  |  |  |  |   adda.l d0,a0
   167d2:	|  |  |  |  |   movea.l 4(a0),a0
   167d6:	|  |  |  |  |   move.l 12(sp),d0
   167da:	|  |  |  |  |   addi.l #1073741823,d0
   167e0:	|  |  |  |  |   add.l d0,d0
   167e2:	|  |  |  |  |   add.l d0,d0
   167e4:	|  |  |  |  |   adda.l d0,a0
   167e6:	|  |  |  |  |   move.l (a0),d0
   167e8:	|  |  |  |  |   lsl.l #3,d0
   167ea:	|  |  |  |  |   movea.l d3,a0
   167ec:	|  |  |  |  |   adda.l d0,a0
   167ee:	|  |  |  |  |   move.l (a0),d0
   167f0:	|  |  |  |  |   move.l d2,-(sp)
   167f2:	|  |  |  |  |   move.l a1,-(sp)
   167f4:	|  |  |  |  |   move.l d1,-(sp)
   167f6:	|  |  |  |  |   move.l d0,-(sp)
   167f8:	|  |  |  |  |   jsr 4ac4 <drawLine>
   167fe:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   16802:	|  |  |  |  |   addq.l #1,12(sp)
   16806:	|  |  |  |  '-> move.l 12(sp),d0
   1680a:	|  |  |  |      cmp.l 8(sp),d0
   1680e:	|  |  |  '----- blt.w 16710 <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   16812:	|  |  |         movea.l 1cfa2 <currentFloor>,a0
   16818:	|  |  |         move.l 4(a0),d1
   1681c:	|  |  |         movea.l 1cfa2 <currentFloor>,a0
   16822:	|  |  |         movea.l 12(a0),a0
   16826:	|  |  |         move.l 16(sp),d0
   1682a:	|  |  |         lsl.l #3,d0
   1682c:	|  |  |         adda.l d0,a0
   1682e:	|  |  |         movea.l 4(a0),a0
   16832:	|  |  |         move.l 8(sp),d0
   16836:	|  |  |         addi.l #1073741823,d0
   1683c:	|  |  |         add.l d0,d0
   1683e:	|  |  |         add.l d0,d0
   16840:	|  |  |         adda.l d0,a0
   16842:	|  |  |         move.l (a0),d0
   16844:	|  |  |         lsl.l #3,d0
   16846:	|  |  |         movea.l d1,a0
   16848:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1684a:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   1684e:	|  |  |         movea.l 1cfa2 <currentFloor>,a0
   16854:	|  |  |         move.l 4(a0),d1
   16858:	|  |  |         movea.l 1cfa2 <currentFloor>,a0
   1685e:	|  |  |         movea.l 12(a0),a0
   16862:	|  |  |         move.l 16(sp),d0
   16866:	|  |  |         lsl.l #3,d0
   16868:	|  |  |         adda.l d0,a0
   1686a:	|  |  |         movea.l 4(a0),a0
   1686e:	|  |  |         move.l 8(sp),d0
   16872:	|  |  |         addi.l #1073741823,d0
   16878:	|  |  |         add.l d0,d0
   1687a:	|  |  |         add.l d0,d0
   1687c:	|  |  |         adda.l d0,a0
   1687e:	|  |  |         move.l (a0),d0
   16880:	|  |  |         lsl.l #3,d0
   16882:	|  |  |         movea.l d1,a0
   16884:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   16886:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   16888:	|  |  |         movea.l 1cfa2 <currentFloor>,a0
   1688e:	|  |  |         move.l 4(a0),d1
   16892:	|  |  |         movea.l 1cfa2 <currentFloor>,a0
   16898:	|  |  |         movea.l 12(a0),a0
   1689c:	|  |  |         move.l 16(sp),d0
   168a0:	|  |  |         lsl.l #3,d0
   168a2:	|  |  |         adda.l d0,a0
   168a4:	|  |  |         movea.l 4(a0),a0
   168a8:	|  |  |         move.l (a0),d0
   168aa:	|  |  |         lsl.l #3,d0
   168ac:	|  |  |         movea.l d1,a0
   168ae:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   168b0:	|  |  |         move.l 4(a0),d1
   168b4:	|  |  |         movea.l 1cfa2 <currentFloor>,a0
   168ba:	|  |  |         move.l 4(a0),d3
   168be:	|  |  |         movea.l 1cfa2 <currentFloor>,a0
   168c4:	|  |  |         movea.l 12(a0),a0
   168c8:	|  |  |         move.l 16(sp),d0
   168cc:	|  |  |         lsl.l #3,d0
   168ce:	|  |  |         adda.l d0,a0
   168d0:	|  |  |         movea.l 4(a0),a0
   168d4:	|  |  |         move.l (a0),d0
   168d6:	|  |  |         lsl.l #3,d0
   168d8:	|  |  |         movea.l d3,a0
   168da:	|  |  |         adda.l d0,a0
   168dc:	|  |  |         move.l (a0),d0
   168de:	|  |  |         move.l d2,-(sp)
   168e0:	|  |  |         move.l a1,-(sp)
   168e2:	|  |  |         move.l d1,-(sp)
   168e4:	|  |  |         move.l d0,-(sp)
   168e6:	|  |  |         jsr 4ac4 <drawLine>
   168ec:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   168f0:	|  |  '-------> addq.l #1,16(sp)
   168f4:	|  '----------> movea.l 1cfa2 <currentFloor>,a0
   168fa:	|               move.l 8(a0),d0
   168fe:	|               cmp.l 16(sp),d0
   16902:	'-------------- bgt.w 166e4 <drawFloor+0x10>
        }
    }
}
   16906:	                nop
   16908:	                nop
   1690a:	                move.l (sp)+,d2
   1690c:	                move.l (sp)+,d3
   1690e:	                lea 12(sp),sp
   16912:	                rts

00016914 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   16914:	                      lea -12(sp),sp
    int sharedVertices = 0;
   16918:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   1691c:	                      clr.l 4(sp)
   16920:	   ,----------------- bra.w 169b2 <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   16924:	,--|----------------> clr.l (sp)
   16926:	|  |     ,----------- bra.s 169a2 <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   16928:	|  |  ,--|----------> movea.l 16(sp),a0
   1692c:	|  |  |  |            move.l 4(a0),d1
   16930:	|  |  |  |            move.l 4(sp),d0
   16934:	|  |  |  |            add.l d0,d0
   16936:	|  |  |  |            add.l d0,d0
   16938:	|  |  |  |            movea.l d1,a0
   1693a:	|  |  |  |            adda.l d0,a0
   1693c:	|  |  |  |            move.l (a0),d1
   1693e:	|  |  |  |            movea.l 20(sp),a0
   16942:	|  |  |  |            movea.l 4(a0),a0
   16946:	|  |  |  |            move.l (sp),d0
   16948:	|  |  |  |            add.l d0,d0
   1694a:	|  |  |  |            add.l d0,d0
   1694c:	|  |  |  |            adda.l d0,a0
   1694e:	|  |  |  |            move.l (a0),d0
   16950:	|  |  |  |            cmp.l d1,d0
   16952:	|  |  |  |  ,-------- bne.s 169a0 <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   16954:	|  |  |  |  |         move.l 8(sp),d0
   16958:	|  |  |  |  |         move.l d0,d1
   1695a:	|  |  |  |  |         addq.l #1,d1
   1695c:	|  |  |  |  |         move.l d1,8(sp)
   16960:	|  |  |  |  |         tst.l d0
   16962:	|  |  |  |  |     ,-- beq.s 16984 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   16964:	|  |  |  |  |     |   movea.l 16(sp),a0
   16968:	|  |  |  |  |     |   move.l 4(a0),d1
   1696c:	|  |  |  |  |     |   move.l 4(sp),d0
   16970:	|  |  |  |  |     |   add.l d0,d0
   16972:	|  |  |  |  |     |   add.l d0,d0
   16974:	|  |  |  |  |     |   movea.l d1,a0
   16976:	|  |  |  |  |     |   adda.l d0,a0
   16978:	|  |  |  |  |     |   move.l (a0),d0
   1697a:	|  |  |  |  |     |   movea.l 28(sp),a0
   1697e:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   16980:	|  |  |  |  |     |   moveq #1,d0
   16982:	|  |  |  |  |  ,--|-- bra.s 169c2 <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   16984:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   16988:	|  |  |  |  |  |      move.l 4(a0),d1
   1698c:	|  |  |  |  |  |      move.l 4(sp),d0
   16990:	|  |  |  |  |  |      add.l d0,d0
   16992:	|  |  |  |  |  |      add.l d0,d0
   16994:	|  |  |  |  |  |      movea.l d1,a0
   16996:	|  |  |  |  |  |      adda.l d0,a0
   16998:	|  |  |  |  |  |      move.l (a0),d0
   1699a:	|  |  |  |  |  |      movea.l 24(sp),a0
   1699e:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   169a0:	|  |  |  |  '--|----> addq.l #1,(sp)
   169a2:	|  |  |  '-----|----> movea.l 20(sp),a0
   169a6:	|  |  |        |      move.l (a0),d0
   169a8:	|  |  |        |      cmp.l (sp),d0
   169aa:	|  |  '--------|----- bgt.w 16928 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   169ae:	|  |           |      addq.l #1,4(sp)
   169b2:	|  '-----------|----> movea.l 16(sp),a0
   169b6:	|              |      move.l (a0),d0
   169b8:	|              |      cmp.l 4(sp),d0
   169bc:	'--------------|----- bgt.w 16924 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   169c0:	               |      clr.w d0
}
   169c2:	               '----> lea 12(sp),sp
   169c6:	                      rts

000169c8 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   169c8:	movea.l 1cfa2 <currentFloor>,a0
   169ce:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   169d2:	movea.l 1cfa2 <currentFloor>,a0
   169d8:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   169dc:	movea.l 1cfa2 <currentFloor>,a0
   169e2:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   169e6:	movea.l 1cfa2 <currentFloor>,a0
   169ec:	clr.l 16(a0)
}
   169f0:	nop
   169f2:	rts

000169f4 <inFloor>:

int inFloor (int x, int y) {
   169f4:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   169f6:	          pea 1a5b3 <PutChar+0x2463>
   169fc:	          jsr 176ae <KPrintF>
   16a02:	          addq.l #4,sp
	int i, r = -1;
   16a04:	          moveq #-1,d0
   16a06:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16a08:	          clr.l 4(sp)
   16a0c:	   ,----- bra.s 16a40 <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   16a0e:	,--|----> movea.l 1cfa2 <currentFloor>,a0
   16a14:	|  |      move.l 12(a0),d1
   16a18:	|  |      move.l 4(sp),d0
   16a1c:	|  |      lsl.l #3,d0
   16a1e:	|  |      add.l d1,d0
   16a20:	|  |      move.l 16(sp),-(sp)
   16a24:	|  |      move.l 16(sp),-(sp)
   16a28:	|  |      move.l d0,-(sp)
   16a2a:	|  |      jsr 16c1a <pointInFloorPolygon>
   16a30:	|  |      lea 12(sp),sp
   16a34:	|  |      tst.w d0
   16a36:	|  |  ,-- beq.s 16a3c <inFloor+0x48>
			r = i;
   16a38:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16a3c:	|  |  '-> addq.l #1,4(sp)
   16a40:	|  '----> movea.l 1cfa2 <currentFloor>,a0
   16a46:	|         move.l 8(a0),d0
   16a4a:	|         cmp.l 4(sp),d0
   16a4e:	'-------- bgt.s 16a0e <inFloor+0x1a>

	KPrintF("infloor finished\n");
   16a50:	          pea 1a5c4 <PutChar+0x2474>
   16a56:	          jsr 176ae <KPrintF>
   16a5c:	          addq.l #4,sp
	return r;
   16a5e:	          move.l (sp),d0
}
   16a60:	          addq.l #8,sp
   16a62:	          rts

00016a64 <initFloor>:

BOOL initFloor () {
   16a64:	       lea -12(sp),sp
   16a68:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   16a6a:	       moveq #20,d0
   16a6c:	       move.l d0,12(sp)
   16a70:	       clr.l 8(sp)
   16a74:	       move.l 1ce8a <SysBase>,d0
   16a7a:	       movea.l d0,a6
   16a7c:	       move.l 12(sp),d0
   16a80:	       move.l 8(sp),d1
   16a84:	       jsr -684(a6)
   16a88:	       move.l d0,4(sp)
   16a8c:	       move.l 4(sp),d0
   16a90:	       move.l d0,1cfa2 <currentFloor>

    if(currentFloor == 0) {
   16a96:	       move.l 1cfa2 <currentFloor>,d0
   16a9c:	,----- bne.s 16ab0 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16a9e:	|      pea 1a5d6 <PutChar+0x2486>
   16aa4:	|      jsr 176ae <KPrintF>
   16aaa:	|      addq.l #4,sp
        return FALSE;
   16aac:	|      clr.w d0
   16aae:	|  ,-- bra.s 16ab8 <initFloor+0x54>
    }

	noFloor ();
   16ab0:	'--|-> jsr 169c8 <noFloor>
	return TRUE;
   16ab6:	   |   moveq #1,d0
}
   16ab8:	   '-> movea.l (sp)+,a6
   16aba:	       lea 12(sp),sp
   16abe:	       rts

00016ac0 <killFloor>:

void killFloor () {
   16ac0:	       lea -24(sp),sp
   16ac4:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16ac6:	       clr.l 24(sp)
   16aca:	   ,-- bra.s 16b24 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16acc:	,--|-> movea.l 1cfa2 <currentFloor>,a0
   16ad2:	|  |   move.l 12(a0),d1
   16ad6:	|  |   move.l 24(sp),d0
   16ada:	|  |   lsl.l #3,d0
   16adc:	|  |   movea.l d1,a0
   16ade:	|  |   adda.l d0,a0
   16ae0:	|  |   move.l 4(a0),8(sp)
   16ae6:	|  |   move.l 1ce8a <SysBase>,d0
   16aec:	|  |   movea.l d0,a6
   16aee:	|  |   movea.l 8(sp),a1
   16af2:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16af6:	|  |   movea.l 1cfa2 <currentFloor>,a0
   16afc:	|  |   move.l 16(a0),d1
   16b00:	|  |   move.l 24(sp),d0
   16b04:	|  |   add.l d0,d0
   16b06:	|  |   add.l d0,d0
   16b08:	|  |   movea.l d1,a0
   16b0a:	|  |   adda.l d0,a0
   16b0c:	|  |   move.l (a0),4(sp)
   16b10:	|  |   move.l 1ce8a <SysBase>,d0
   16b16:	|  |   movea.l d0,a6
   16b18:	|  |   movea.l 4(sp),a1
   16b1c:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16b20:	|  |   addq.l #1,24(sp)
   16b24:	|  '-> movea.l 1cfa2 <currentFloor>,a0
   16b2a:	|      move.l 8(a0),d0
   16b2e:	|      cmp.l 24(sp),d0
   16b32:	'----- bgt.s 16acc <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   16b34:	       movea.l 1cfa2 <currentFloor>,a0
   16b3a:	       move.l 12(a0),20(sp)
   16b40:	       move.l 1ce8a <SysBase>,d0
   16b46:	       movea.l d0,a6
   16b48:	       movea.l 20(sp),a1
   16b4c:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   16b50:	       movea.l 1cfa2 <currentFloor>,a0
   16b56:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   16b5a:	       movea.l 1cfa2 <currentFloor>,a0
   16b60:	       move.l 4(a0),16(sp)
   16b66:	       move.l 1ce8a <SysBase>,d0
   16b6c:	       movea.l d0,a6
   16b6e:	       movea.l 16(sp),a1
   16b72:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16b76:	       movea.l 1cfa2 <currentFloor>,a0
   16b7c:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16b80:	       movea.l 1cfa2 <currentFloor>,a0
   16b86:	       move.l 16(a0),12(sp)
   16b8c:	       move.l 1ce8a <SysBase>,d0
   16b92:	       movea.l d0,a6
   16b94:	       movea.l 12(sp),a1
   16b98:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16b9c:	       movea.l 1cfa2 <currentFloor>,a0
   16ba2:	       clr.l 16(a0)
}
   16ba6:	       nop
   16ba8:	       movea.l (sp)+,a6
   16baa:	       lea 24(sp),sp
   16bae:	       rts

00016bb0 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   16bb0:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16bb4:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16bb8:	                   clr.l 4(sp)
   16bbc:	   ,-------------- bra.s 16c08 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   16bbe:	,--|-------------> clr.l (sp)
   16bc0:	|  |     ,-------- bra.s 16bfc <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   16bc2:	|  |  ,--|-------> move.l 20(sp),d1
   16bc6:	|  |  |  |         move.l 4(sp),d0
   16bca:	|  |  |  |         add.l d0,d0
   16bcc:	|  |  |  |         add.l d0,d0
   16bce:	|  |  |  |         movea.l d1,a0
   16bd0:	|  |  |  |         adda.l d0,a0
   16bd2:	|  |  |  |         move.l (a0),d1
   16bd4:	|  |  |  |         movea.l 28(sp),a0
   16bd8:	|  |  |  |         move.l (sp),d0
   16bda:	|  |  |  |         add.l d0,d0
   16bdc:	|  |  |  |         add.l d0,d0
   16bde:	|  |  |  |         adda.l d0,a0
   16be0:	|  |  |  |         move.l (a0),d0
   16be2:	|  |  |  |         cmp.l d1,d0
   16be4:	|  |  |  |     ,-- bne.s 16bfa <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16be6:	|  |  |  |     |   move.l 8(sp),d0
   16bea:	|  |  |  |     |   move.l d0,d1
   16bec:	|  |  |  |     |   addq.l #1,d1
   16bee:	|  |  |  |     |   move.l d1,8(sp)
   16bf2:	|  |  |  |     |   tst.l d0
   16bf4:	|  |  |  |     +-- beq.s 16bfa <polysShareSide+0x4a>
   16bf6:	|  |  |  |     |   moveq #1,d0
   16bf8:	|  |  |  |  ,--|-- bra.s 16c14 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16bfa:	|  |  |  |  |  '-> addq.l #1,(sp)
   16bfc:	|  |  |  '--|----> move.l 24(sp),d0
   16c00:	|  |  |     |      cmp.l (sp),d0
   16c02:	|  |  '-----|----- bgt.s 16bc2 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16c04:	|  |        |      addq.l #1,4(sp)
   16c08:	|  '--------|----> move.l 16(sp),d0
   16c0c:	|           |      cmp.l 4(sp),d0
   16c10:	'-----------|----- bgt.s 16bbe <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16c12:	            |      clr.w d0
}
   16c14:	            '----> lea 12(sp),sp
   16c18:	                   rts

00016c1a <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16c1a:	             lea -28(sp),sp
   16c1e:	             move.l d3,-(sp)
   16c20:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   16c22:	             clr.l 32(sp)
   16c26:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16c2a:	             movea.l 40(sp),a0
   16c2e:	             move.l (a0),d0
   16c30:	             move.l d0,d1
   16c32:	             subq.l #1,d1
   16c34:	             move.l d1,28(sp)
   16c38:	   ,-------- bra.w 16e32 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   16c3c:	,--|-------> movea.l 1cfa2 <currentFloor>,a0
   16c42:	|  |         move.l 4(a0),d1
   16c46:	|  |         movea.l 40(sp),a0
   16c4a:	|  |         movea.l 4(a0),a0
   16c4e:	|  |         move.l 32(sp),d0
   16c52:	|  |         add.l d0,d0
   16c54:	|  |         add.l d0,d0
   16c56:	|  |         adda.l d0,a0
   16c58:	|  |         move.l (a0),d0
   16c5a:	|  |         lsl.l #3,d0
   16c5c:	|  |         movea.l d1,a0
   16c5e:	|  |         adda.l d0,a0
   16c60:	|  |         move.l (a0),d0
   16c62:	|  |         move.l d0,-(sp)
   16c64:	|  |         jsr 17ae0 <__floatsisf>
   16c6a:	|  |         addq.l #4,sp
   16c6c:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16c70:	|  |         movea.l 1cfa2 <currentFloor>,a0
   16c76:	|  |         move.l 4(a0),d1
   16c7a:	|  |         movea.l 40(sp),a0
   16c7e:	|  |         movea.l 4(a0),a0
   16c82:	|  |         move.l 32(sp),d0
   16c86:	|  |         add.l d0,d0
   16c88:	|  |         add.l d0,d0
   16c8a:	|  |         adda.l d0,a0
   16c8c:	|  |         move.l (a0),d0
   16c8e:	|  |         lsl.l #3,d0
   16c90:	|  |         movea.l d1,a0
   16c92:	|  |         adda.l d0,a0
   16c94:	|  |         move.l 4(a0),d0
   16c98:	|  |         move.l d0,-(sp)
   16c9a:	|  |         jsr 17ae0 <__floatsisf>
   16ca0:	|  |         addq.l #4,sp
   16ca2:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16ca6:	|  |         movea.l 1cfa2 <currentFloor>,a0
   16cac:	|  |         move.l 4(a0),d1
   16cb0:	|  |         movea.l 40(sp),a0
   16cb4:	|  |         movea.l 4(a0),a0
   16cb8:	|  |         move.l 28(sp),d0
   16cbc:	|  |         add.l d0,d0
   16cbe:	|  |         add.l d0,d0
   16cc0:	|  |         adda.l d0,a0
   16cc2:	|  |         move.l (a0),d0
   16cc4:	|  |         lsl.l #3,d0
   16cc6:	|  |         movea.l d1,a0
   16cc8:	|  |         adda.l d0,a0
   16cca:	|  |         move.l (a0),d0
   16ccc:	|  |         move.l d0,-(sp)
   16cce:	|  |         jsr 17ae0 <__floatsisf>
   16cd4:	|  |         addq.l #4,sp
   16cd6:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16cda:	|  |         movea.l 1cfa2 <currentFloor>,a0
   16ce0:	|  |         move.l 4(a0),d1
   16ce4:	|  |         movea.l 40(sp),a0
   16ce8:	|  |         movea.l 4(a0),a0
   16cec:	|  |         move.l 28(sp),d0
   16cf0:	|  |         add.l d0,d0
   16cf2:	|  |         add.l d0,d0
   16cf4:	|  |         adda.l d0,a0
   16cf6:	|  |         move.l (a0),d0
   16cf8:	|  |         lsl.l #3,d0
   16cfa:	|  |         movea.l d1,a0
   16cfc:	|  |         adda.l d0,a0
   16cfe:	|  |         move.l 4(a0),d0
   16d02:	|  |         move.l d0,-(sp)
   16d04:	|  |         jsr 17ae0 <__floatsisf>
   16d0a:	|  |         addq.l #4,sp
   16d0c:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16d10:	|  |         move.l 48(sp),-(sp)
   16d14:	|  |         jsr 17ae0 <__floatsisf>
   16d1a:	|  |         addq.l #4,sp
   16d1c:	|  |         move.l d0,-(sp)
   16d1e:	|  |         move.l 20(sp),-(sp)
   16d22:	|  |         jsr 17c82 <__lesf2>
   16d28:	|  |         addq.l #8,sp
   16d2a:	|  |         tst.l d0
   16d2c:	|  |     ,-- bgt.s 16d4c <pointInFloorPolygon+0x132>
   16d2e:	|  |     |   move.l 48(sp),-(sp)
   16d32:	|  |     |   jsr 17ae0 <__floatsisf>
   16d38:	|  |     |   addq.l #4,sp
   16d3a:	|  |     |   move.l d0,-(sp)
   16d3c:	|  |     |   move.l 12(sp),-(sp)
   16d40:	|  |     |   jsr 17c4c <__gtsf2>
   16d46:	|  |     |   addq.l #8,sp
   16d48:	|  |     |   tst.l d0
   16d4a:	|  |  ,--|-- bgt.s 16d8c <pointInFloorPolygon+0x172>
   16d4c:	|  |  |  '-> move.l 48(sp),-(sp)
   16d50:	|  |  |      jsr 17ae0 <__floatsisf>
   16d56:	|  |  |      addq.l #4,sp
   16d58:	|  |  |      move.l d0,-(sp)
   16d5a:	|  |  |      move.l 12(sp),-(sp)
   16d5e:	|  |  |      jsr 17c82 <__lesf2>
   16d64:	|  |  |      addq.l #8,sp
   16d66:	|  |  |      tst.l d0
   16d68:	|  |  |  ,-- bgt.w 16e22 <pointInFloorPolygon+0x208>
   16d6c:	|  |  |  |   move.l 48(sp),-(sp)
   16d70:	|  |  |  |   jsr 17ae0 <__floatsisf>
   16d76:	|  |  |  |   addq.l #4,sp
   16d78:	|  |  |  |   move.l d0,-(sp)
   16d7a:	|  |  |  |   move.l 20(sp),-(sp)
   16d7e:	|  |  |  |   jsr 17c4c <__gtsf2>
   16d84:	|  |  |  |   addq.l #8,sp
   16d86:	|  |  |  |   tst.l d0
   16d88:	|  |  |  +-- ble.w 16e22 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16d8c:	|  |  '--|-> move.l 44(sp),-(sp)
   16d90:	|  |     |   jsr 17ae0 <__floatsisf>
   16d96:	|  |     |   addq.l #4,sp
   16d98:	|  |     |   move.l d0,d3
   16d9a:	|  |     |   move.l 20(sp),-(sp)
   16d9e:	|  |     |   move.l 16(sp),-(sp)
   16da2:	|  |     |   jsr 17dd4 <__subsf3>
   16da8:	|  |     |   addq.l #8,sp
   16daa:	|  |     |   move.l d0,d2
   16dac:	|  |     |   move.l 48(sp),-(sp)
   16db0:	|  |     |   jsr 17ae0 <__floatsisf>
   16db6:	|  |     |   addq.l #4,sp
   16db8:	|  |     |   move.l 16(sp),-(sp)
   16dbc:	|  |     |   move.l d0,-(sp)
   16dbe:	|  |     |   jsr 17dd4 <__subsf3>
   16dc4:	|  |     |   addq.l #8,sp
   16dc6:	|  |     |   move.l d0,-(sp)
   16dc8:	|  |     |   move.l d2,-(sp)
   16dca:	|  |     |   jsr 17b92 <__mulsf3>
   16dd0:	|  |     |   addq.l #8,sp
   16dd2:	|  |     |   move.l d0,d2
   16dd4:	|  |     |   move.l 16(sp),-(sp)
   16dd8:	|  |     |   move.l 12(sp),-(sp)
   16ddc:	|  |     |   jsr 17dd4 <__subsf3>
   16de2:	|  |     |   addq.l #8,sp
   16de4:	|  |     |   move.l d0,-(sp)
   16de6:	|  |     |   move.l d2,-(sp)
   16de8:	|  |     |   jsr 17996 <__divsf3>
   16dee:	|  |     |   addq.l #8,sp
   16df0:	|  |     |   move.l 20(sp),-(sp)
   16df4:	|  |     |   move.l d0,-(sp)
   16df6:	|  |     |   jsr 1789c <__addsf3>
   16dfc:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16dfe:	|  |     |   move.l d0,-(sp)
   16e00:	|  |     |   move.l d3,-(sp)
   16e02:	|  |     |   jsr 17d06 <__ltsf2>
   16e08:	|  |     |   addq.l #8,sp
   16e0a:	|  |     |   tst.l d0
   16e0c:	|  |     +-- bge.s 16e22 <pointInFloorPolygon+0x208>

			c = !c;
   16e0e:	|  |     |   tst.l 24(sp)
   16e12:	|  |     |   seq d0
   16e14:	|  |     |   neg.b d0
   16e16:	|  |     |   move.b d0,d0
   16e18:	|  |     |   andi.l #255,d0
   16e1e:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16e22:	|  |     '-> move.l 32(sp),d0
   16e26:	|  |         move.l d0,d1
   16e28:	|  |         addq.l #1,d1
   16e2a:	|  |         move.l d1,32(sp)
   16e2e:	|  |         move.l d0,28(sp)
   16e32:	|  '-------> movea.l 40(sp),a0
   16e36:	|            move.l (a0),d0
   16e38:	|            cmp.l 32(sp),d0
   16e3c:	'----------- bgt.w 16c3c <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16e40:	             tst.l 24(sp)
   16e44:	             sne d0
   16e46:	             neg.b d0
   16e48:	             move.b d0,d0
   16e4a:	             andi.w #255,d0
}
   16e4e:	             move.l (sp)+,d2
   16e50:	             move.l (sp)+,d3
   16e52:	             lea 28(sp),sp
   16e56:	             rts

00016e58 <setFloor>:

BOOL setFloor (int fileNum) {
   16e58:	                               lea -132(sp),sp
   16e5c:	                               move.l a6,-(sp)
   16e5e:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16e60:	                               jsr 16ac0 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16e66:	                               move.l 144(sp),-(sp)
   16e6a:	                               jsr 7ae2 <openFileFromNum>
   16e70:	                               addq.l #4,sp
   16e72:	                               tst.l d0
   16e74:	                           ,-- bne.s 16e7c <setFloor+0x24>
   16e76:	                           |   clr.w d0
   16e78:	,--------------------------|-- bra.w 175c8 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16e7c:	|                          '-> movea.l 1cfa2 <currentFloor>,a0
   16e82:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16e86:	|                              move.l 1ce72 <bigDataFile>,118(sp)
   16e8e:	|                              move.l 1ce92 <DOSBase>,d0
   16e94:	|                              movea.l d0,a6
   16e96:	|                              move.l 118(sp),d1
   16e9a:	|                              jsr -306(a6)
   16e9e:	|                              move.l d0,114(sp)
   16ea2:	|                              move.l 114(sp),d0
   16ea6:	|                              movea.l 1cfa2 <currentFloor>,a0
   16eac:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16eb0:	|                              movea.l 1cfa2 <currentFloor>,a0
   16eb6:	|                              move.l 8(a0),d0
   16eba:	|                              lsl.l #3,d0
   16ebc:	|                              move.l d0,110(sp)
   16ec0:	|                              clr.l 106(sp)
   16ec4:	|                              move.l 1ce8a <SysBase>,d0
   16eca:	|                              movea.l d0,a6
   16ecc:	|                              move.l 110(sp),d0
   16ed0:	|                              move.l 106(sp),d1
   16ed4:	|                              jsr -684(a6)
   16ed8:	|                              move.l d0,102(sp)
   16edc:	|                              move.l 102(sp),d0
   16ee0:	|                              movea.l 1cfa2 <currentFloor>,a0
   16ee6:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16eea:	|                              movea.l 1cfa2 <currentFloor>,a0
   16ef0:	|                              move.l 12(a0),d0
   16ef4:	|                          ,-- bne.s 16f0a <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16ef6:	|                          |   pea 1a5fa <PutChar+0x24aa>
   16efc:	|                          |   jsr 176ae <KPrintF>
   16f02:	|                          |   addq.l #4,sp
		return FALSE;
   16f04:	|                          |   clr.w d0
   16f06:	+--------------------------|-- bra.w 175c8 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16f0a:	|                          '-> clr.l 136(sp)
   16f0e:	|                    ,-------- bra.w 17026 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16f12:	|                 ,--|-------> move.l 1ce72 <bigDataFile>,26(sp)
   16f1a:	|                 |  |         move.l 1ce92 <DOSBase>,d0
   16f20:	|                 |  |         movea.l d0,a6
   16f22:	|                 |  |         move.l 26(sp),d1
   16f26:	|                 |  |         jsr -306(a6)
   16f2a:	|                 |  |         move.l d0,22(sp)
   16f2e:	|                 |  |         move.l 22(sp),d1
   16f32:	|                 |  |         movea.l 1cfa2 <currentFloor>,a0
   16f38:	|                 |  |         movea.l 12(a0),a0
   16f3c:	|                 |  |         move.l 136(sp),d0
   16f40:	|                 |  |         lsl.l #3,d0
   16f42:	|                 |  |         adda.l d0,a0
   16f44:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16f46:	|                 |  |         movea.l 1cfa2 <currentFloor>,a0
   16f4c:	|                 |  |         move.l 12(a0),d1
   16f50:	|                 |  |         move.l 136(sp),d0
   16f54:	|                 |  |         lsl.l #3,d0
   16f56:	|                 |  |         movea.l d1,a0
   16f58:	|                 |  |         adda.l d0,a0
   16f5a:	|                 |  |         move.l (a0),d0
   16f5c:	|                 |  |         add.l d0,d0
   16f5e:	|                 |  |         add.l d0,d0
   16f60:	|                 |  |         move.l d0,18(sp)
   16f64:	|                 |  |         clr.l 14(sp)
   16f68:	|                 |  |         move.l 1ce8a <SysBase>,d0
   16f6e:	|                 |  |         movea.l d0,a6
   16f70:	|                 |  |         move.l 18(sp),d0
   16f74:	|                 |  |         move.l 14(sp),d1
   16f78:	|                 |  |         jsr -684(a6)
   16f7c:	|                 |  |         move.l d0,10(sp)
   16f80:	|                 |  |         move.l 10(sp),d1
   16f84:	|                 |  |         movea.l 1cfa2 <currentFloor>,a0
   16f8a:	|                 |  |         movea.l 12(a0),a0
   16f8e:	|                 |  |         move.l 136(sp),d0
   16f92:	|                 |  |         lsl.l #3,d0
   16f94:	|                 |  |         adda.l d0,a0
   16f96:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16f9a:	|                 |  |         movea.l 1cfa2 <currentFloor>,a0
   16fa0:	|                 |  |         move.l 12(a0),d1
   16fa4:	|                 |  |         move.l 136(sp),d0
   16fa8:	|                 |  |         lsl.l #3,d0
   16faa:	|                 |  |         movea.l d1,a0
   16fac:	|                 |  |         adda.l d0,a0
   16fae:	|                 |  |         move.l 4(a0),d0
   16fb2:	|                 |  |     ,-- bne.s 16fc8 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16fb4:	|                 |  |     |   pea 1a5fa <PutChar+0x24aa>
   16fba:	|                 |  |     |   jsr 176ae <KPrintF>
   16fc0:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16fc2:	|                 |  |     |   clr.w d0
   16fc4:	+-----------------|--|-----|-- bra.w 175c8 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16fc8:	|                 |  |     '-> clr.l 132(sp)
   16fcc:	|                 |  |     ,-- bra.s 17006 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16fce:	|                 |  |  ,--|-> move.l 1ce72 <bigDataFile>,d1
   16fd4:	|                 |  |  |  |   movea.l 1cfa2 <currentFloor>,a0
   16fda:	|                 |  |  |  |   movea.l 12(a0),a0
   16fde:	|                 |  |  |  |   move.l 136(sp),d0
   16fe2:	|                 |  |  |  |   lsl.l #3,d0
   16fe4:	|                 |  |  |  |   adda.l d0,a0
   16fe6:	|                 |  |  |  |   movea.l 4(a0),a0
   16fea:	|                 |  |  |  |   move.l 132(sp),d0
   16fee:	|                 |  |  |  |   add.l d0,d0
   16ff0:	|                 |  |  |  |   add.l d0,d0
   16ff2:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16ff6:	|                 |  |  |  |   move.l d1,-(sp)
   16ff8:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16ffe:	|                 |  |  |  |   addq.l #4,sp
   17000:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   17002:	|                 |  |  |  |   addq.l #1,132(sp)
   17006:	|                 |  |  |  '-> movea.l 1cfa2 <currentFloor>,a0
   1700c:	|                 |  |  |      move.l 12(a0),d1
   17010:	|                 |  |  |      move.l 136(sp),d0
   17014:	|                 |  |  |      lsl.l #3,d0
   17016:	|                 |  |  |      movea.l d1,a0
   17018:	|                 |  |  |      adda.l d0,a0
   1701a:	|                 |  |  |      move.l (a0),d0
   1701c:	|                 |  |  |      cmp.l 132(sp),d0
   17020:	|                 |  |  '----- bgt.s 16fce <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17022:	|                 |  |         addq.l #1,136(sp)
   17026:	|                 |  '-------> movea.l 1cfa2 <currentFloor>,a0
   1702c:	|                 |            move.l 8(a0),d0
   17030:	|                 |            cmp.l 136(sp),d0
   17034:	|                 '----------- bgt.w 16f12 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   17038:	|                              move.l 1ce72 <bigDataFile>,d0
   1703e:	|                              move.l d0,-(sp)
   17040:	|                              jsr 6bc <get2bytes>
   17046:	|                              addq.l #4,sp
   17048:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   1704c:	|                              move.l 136(sp),d0
   17050:	|                              lsl.l #3,d0
   17052:	|                              move.l d0,98(sp)
   17056:	|                              clr.l 94(sp)
   1705a:	|                              move.l 1ce8a <SysBase>,d0
   17060:	|                              movea.l d0,a6
   17062:	|                              move.l 98(sp),d0
   17066:	|                              move.l 94(sp),d1
   1706a:	|                              jsr -684(a6)
   1706e:	|                              move.l d0,90(sp)
   17072:	|                              move.l 90(sp),d0
   17076:	|                              movea.l 1cfa2 <currentFloor>,a0
   1707c:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   17080:	|                              movea.l 1cfa2 <currentFloor>,a0
   17086:	|                              move.l 4(a0),d0
   1708a:	|                          ,-- bne.s 170a0 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   1708c:	|                          |   pea 1a5fa <PutChar+0x24aa>
   17092:	|                          |   jsr 176ae <KPrintF>
   17098:	|                          |   addq.l #4,sp
		return FALSE;
   1709a:	|                          |   clr.w d0
   1709c:	+--------------------------|-- bra.w 175c8 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   170a0:	|                          '-> clr.l 132(sp)
   170a4:	|                          ,-- bra.s 170f8 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   170a6:	|                       ,--|-> move.l 1ce72 <bigDataFile>,d1
   170ac:	|                       |  |   movea.l 1cfa2 <currentFloor>,a0
   170b2:	|                       |  |   movea.l 4(a0),a0
   170b6:	|                       |  |   move.l 132(sp),d0
   170ba:	|                       |  |   lsl.l #3,d0
   170bc:	|                       |  |   lea (0,a0,d0.l),a2
   170c0:	|                       |  |   move.l d1,-(sp)
   170c2:	|                       |  |   jsr 6bc <get2bytes>
   170c8:	|                       |  |   addq.l #4,sp
   170ca:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   170cc:	|                       |  |   move.l 1ce72 <bigDataFile>,d1
   170d2:	|                       |  |   movea.l 1cfa2 <currentFloor>,a0
   170d8:	|                       |  |   movea.l 4(a0),a0
   170dc:	|                       |  |   move.l 132(sp),d0
   170e0:	|                       |  |   lsl.l #3,d0
   170e2:	|                       |  |   lea (0,a0,d0.l),a2
   170e6:	|                       |  |   move.l d1,-(sp)
   170e8:	|                       |  |   jsr 6bc <get2bytes>
   170ee:	|                       |  |   addq.l #4,sp
   170f0:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   170f4:	|                       |  |   addq.l #1,132(sp)
   170f8:	|                       |  '-> move.l 132(sp),d0
   170fc:	|                       |      cmp.l 136(sp),d0
   17100:	|                       '----- blt.s 170a6 <setFloor+0x24e>
	}

	finishAccess ();
   17102:	|                              jsr 79da <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   17108:	|                              movea.l 1cfa2 <currentFloor>,a0
   1710e:	|                              move.l 8(a0),d0
   17112:	|                              add.l d0,d0
   17114:	|                              add.l d0,d0
   17116:	|                              move.l d0,86(sp)
   1711a:	|                              clr.l 82(sp)
   1711e:	|                              move.l 1ce8a <SysBase>,d0
   17124:	|                              movea.l d0,a6
   17126:	|                              move.l 86(sp),d0
   1712a:	|                              move.l 82(sp),d1
   1712e:	|                              jsr -684(a6)
   17132:	|                              move.l d0,78(sp)
   17136:	|                              move.l 78(sp),d0
   1713a:	|                              movea.l 1cfa2 <currentFloor>,a0
   17140:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   17144:	|                              movea.l 1cfa2 <currentFloor>,a0
   1714a:	|                              move.l 8(a0),d0
   1714e:	|                              add.l d0,d0
   17150:	|                              add.l d0,d0
   17152:	|                              move.l d0,74(sp)
   17156:	|                              clr.l 70(sp)
   1715a:	|                              move.l 1ce8a <SysBase>,d0
   17160:	|                              movea.l d0,a6
   17162:	|                              move.l 74(sp),d0
   17166:	|                              move.l 70(sp),d1
   1716a:	|                              jsr -684(a6)
   1716e:	|                              move.l d0,66(sp)
   17172:	|                              move.l 66(sp),d0
   17176:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   1717a:	|                              movea.l 1cfa2 <currentFloor>,a0
   17180:	|                              move.l 16(a0),d0
   17184:	|                          ,-- bne.s 1719a <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   17186:	|                          |   pea 1a5fa <PutChar+0x24aa>
   1718c:	|                          |   jsr 176ae <KPrintF>
   17192:	|                          |   addq.l #4,sp
		return FALSE;
   17194:	|                          |   clr.w d0
   17196:	+--------------------------|-- bra.w 175c8 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1719a:	|                          '-> clr.l 136(sp)
   1719e:	|                    ,-------- bra.w 172c2 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   171a2:	|                 ,--|-------> movea.l 1cfa2 <currentFloor>,a0
   171a8:	|                 |  |         move.l 8(a0),d0
   171ac:	|                 |  |         add.l d0,d0
   171ae:	|                 |  |         add.l d0,d0
   171b0:	|                 |  |         move.l d0,50(sp)
   171b4:	|                 |  |         clr.l 46(sp)
   171b8:	|                 |  |         move.l 1ce8a <SysBase>,d0
   171be:	|                 |  |         movea.l d0,a6
   171c0:	|                 |  |         move.l 50(sp),d0
   171c4:	|                 |  |         move.l 46(sp),d1
   171c8:	|                 |  |         jsr -684(a6)
   171cc:	|                 |  |         move.l d0,42(sp)
   171d0:	|                 |  |         move.l 42(sp),d0
   171d4:	|                 |  |         movea.l 1cfa2 <currentFloor>,a0
   171da:	|                 |  |         movea.l 16(a0),a0
   171de:	|                 |  |         move.l 136(sp),d1
   171e2:	|                 |  |         add.l d1,d1
   171e4:	|                 |  |         add.l d1,d1
   171e6:	|                 |  |         adda.l d1,a0
   171e8:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   171ea:	|                 |  |         movea.l 1cfa2 <currentFloor>,a0
   171f0:	|                 |  |         move.l 8(a0),d0
   171f4:	|                 |  |         add.l d0,d0
   171f6:	|                 |  |         add.l d0,d0
   171f8:	|                 |  |         move.l d0,38(sp)
   171fc:	|                 |  |         clr.l 34(sp)
   17200:	|                 |  |         move.l 1ce8a <SysBase>,d0
   17206:	|                 |  |         movea.l d0,a6
   17208:	|                 |  |         move.l 38(sp),d0
   1720c:	|                 |  |         move.l 34(sp),d1
   17210:	|                 |  |         jsr -684(a6)
   17214:	|                 |  |         move.l d0,30(sp)
   17218:	|                 |  |         move.l 30(sp),d1
   1721c:	|                 |  |         move.l 136(sp),d0
   17220:	|                 |  |         add.l d0,d0
   17222:	|                 |  |         add.l d0,d0
   17224:	|                 |  |         movea.l 62(sp),a0
   17228:	|                 |  |         adda.l d0,a0
   1722a:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   1722c:	|                 |  |         movea.l 1cfa2 <currentFloor>,a0
   17232:	|                 |  |         move.l 16(a0),d1
   17236:	|                 |  |         move.l 136(sp),d0
   1723a:	|                 |  |         add.l d0,d0
   1723c:	|                 |  |         add.l d0,d0
   1723e:	|                 |  |         movea.l d1,a0
   17240:	|                 |  |         adda.l d0,a0
   17242:	|                 |  |         move.l (a0),d0
   17244:	|                 |  |     ,-- bne.s 1725a <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   17246:	|                 |  |     |   pea 1a5fa <PutChar+0x24aa>
   1724c:	|                 |  |     |   jsr 176ae <KPrintF>
   17252:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   17254:	|                 |  |     |   clr.w d0
   17256:	+-----------------|--|-----|-- bra.w 175c8 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1725a:	|                 |  |     '-> clr.l 132(sp)
   1725e:	|                 |  |     ,-- bra.s 172ae <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   17260:	|                 |  |  ,--|-> movea.l 1cfa2 <currentFloor>,a0
   17266:	|                 |  |  |  |   move.l 16(a0),d1
   1726a:	|                 |  |  |  |   move.l 136(sp),d0
   1726e:	|                 |  |  |  |   add.l d0,d0
   17270:	|                 |  |  |  |   add.l d0,d0
   17272:	|                 |  |  |  |   movea.l d1,a0
   17274:	|                 |  |  |  |   adda.l d0,a0
   17276:	|                 |  |  |  |   move.l (a0),d1
   17278:	|                 |  |  |  |   move.l 132(sp),d0
   1727c:	|                 |  |  |  |   add.l d0,d0
   1727e:	|                 |  |  |  |   add.l d0,d0
   17280:	|                 |  |  |  |   movea.l d1,a0
   17282:	|                 |  |  |  |   adda.l d0,a0
   17284:	|                 |  |  |  |   moveq #-1,d1
   17286:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   17288:	|                 |  |  |  |   move.l 136(sp),d0
   1728c:	|                 |  |  |  |   add.l d0,d0
   1728e:	|                 |  |  |  |   add.l d0,d0
   17290:	|                 |  |  |  |   movea.l 62(sp),a0
   17294:	|                 |  |  |  |   adda.l d0,a0
   17296:	|                 |  |  |  |   move.l (a0),d1
   17298:	|                 |  |  |  |   move.l 132(sp),d0
   1729c:	|                 |  |  |  |   add.l d0,d0
   1729e:	|                 |  |  |  |   add.l d0,d0
   172a0:	|                 |  |  |  |   movea.l d1,a0
   172a2:	|                 |  |  |  |   adda.l d0,a0
   172a4:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   172aa:	|                 |  |  |  |   addq.l #1,132(sp)
   172ae:	|                 |  |  |  '-> movea.l 1cfa2 <currentFloor>,a0
   172b4:	|                 |  |  |      move.l 8(a0),d0
   172b8:	|                 |  |  |      cmp.l 132(sp),d0
   172bc:	|                 |  |  '----- bgt.s 17260 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   172be:	|                 |  |         addq.l #1,136(sp)
   172c2:	|                 |  '-------> movea.l 1cfa2 <currentFloor>,a0
   172c8:	|                 |            move.l 8(a0),d0
   172cc:	|                 |            cmp.l 136(sp),d0
   172d0:	|                 '----------- bgt.w 171a2 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   172d4:	|                              clr.l 136(sp)
   172d8:	|              ,-------------- bra.w 173de <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   172dc:	|           ,--|-------------> clr.l 132(sp)
   172e0:	|           |  |     ,-------- bra.w 173c8 <setFloor+0x570>
			if (i != j) {
   172e4:	|           |  |  ,--|-------> move.l 136(sp),d0
   172e8:	|           |  |  |  |         cmp.l 132(sp),d0
   172ec:	|           |  |  |  |     ,-- beq.w 1737e <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   172f0:	|           |  |  |  |     |   movea.l 1cfa2 <currentFloor>,a0
   172f6:	|           |  |  |  |     |   move.l 12(a0),d1
   172fa:	|           |  |  |  |     |   move.l 132(sp),d0
   172fe:	|           |  |  |  |     |   lsl.l #3,d0
   17300:	|           |  |  |  |     |   movea.l d1,a1
   17302:	|           |  |  |  |     |   adda.l d0,a1
   17304:	|           |  |  |  |     |   movea.l 1cfa2 <currentFloor>,a0
   1730a:	|           |  |  |  |     |   move.l 12(a0),d1
   1730e:	|           |  |  |  |     |   move.l 136(sp),d0
   17312:	|           |  |  |  |     |   lsl.l #3,d0
   17314:	|           |  |  |  |     |   movea.l d1,a0
   17316:	|           |  |  |  |     |   adda.l d0,a0
   17318:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   1731c:	|           |  |  |  |     |   move.l (a1),-(sp)
   1731e:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   17322:	|           |  |  |  |     |   move.l (a0),-(sp)
   17324:	|           |  |  |  |     |   jsr 16bb0 <polysShareSide>
   1732a:	|           |  |  |  |     |   lea 16(sp),sp
   1732e:	|           |  |  |  |     |   tst.w d0
   17330:	|           |  |  |  |  ,--|-- beq.w 173c4 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   17334:	|           |  |  |  |  |  |   movea.l 1cfa2 <currentFloor>,a0
   1733a:	|           |  |  |  |  |  |   move.l 16(a0),d1
   1733e:	|           |  |  |  |  |  |   move.l 136(sp),d0
   17342:	|           |  |  |  |  |  |   add.l d0,d0
   17344:	|           |  |  |  |  |  |   add.l d0,d0
   17346:	|           |  |  |  |  |  |   movea.l d1,a0
   17348:	|           |  |  |  |  |  |   adda.l d0,a0
   1734a:	|           |  |  |  |  |  |   move.l (a0),d1
   1734c:	|           |  |  |  |  |  |   move.l 132(sp),d0
   17350:	|           |  |  |  |  |  |   add.l d0,d0
   17352:	|           |  |  |  |  |  |   add.l d0,d0
   17354:	|           |  |  |  |  |  |   movea.l d1,a0
   17356:	|           |  |  |  |  |  |   adda.l d0,a0
   17358:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   1735c:	|           |  |  |  |  |  |   move.l 136(sp),d0
   17360:	|           |  |  |  |  |  |   add.l d0,d0
   17362:	|           |  |  |  |  |  |   add.l d0,d0
   17364:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   17368:	|           |  |  |  |  |  |   adda.l d0,a0
   1736a:	|           |  |  |  |  |  |   move.l (a0),d1
   1736c:	|           |  |  |  |  |  |   move.l 132(sp),d0
   17370:	|           |  |  |  |  |  |   add.l d0,d0
   17372:	|           |  |  |  |  |  |   add.l d0,d0
   17374:	|           |  |  |  |  |  |   movea.l d1,a0
   17376:	|           |  |  |  |  |  |   adda.l d0,a0
   17378:	|           |  |  |  |  |  |   moveq #1,d1
   1737a:	|           |  |  |  |  |  |   move.l d1,(a0)
   1737c:	|           |  |  |  |  +--|-- bra.s 173c4 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   1737e:	|           |  |  |  |  |  '-> movea.l 1cfa2 <currentFloor>,a0
   17384:	|           |  |  |  |  |      move.l 16(a0),d1
   17388:	|           |  |  |  |  |      move.l 136(sp),d0
   1738c:	|           |  |  |  |  |      add.l d0,d0
   1738e:	|           |  |  |  |  |      add.l d0,d0
   17390:	|           |  |  |  |  |      movea.l d1,a0
   17392:	|           |  |  |  |  |      adda.l d0,a0
   17394:	|           |  |  |  |  |      move.l (a0),d1
   17396:	|           |  |  |  |  |      move.l 132(sp),d0
   1739a:	|           |  |  |  |  |      add.l d0,d0
   1739c:	|           |  |  |  |  |      add.l d0,d0
   1739e:	|           |  |  |  |  |      movea.l d1,a0
   173a0:	|           |  |  |  |  |      adda.l d0,a0
   173a2:	|           |  |  |  |  |      moveq #-2,d0
   173a4:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   173a6:	|           |  |  |  |  |      move.l 136(sp),d0
   173aa:	|           |  |  |  |  |      add.l d0,d0
   173ac:	|           |  |  |  |  |      add.l d0,d0
   173ae:	|           |  |  |  |  |      movea.l 62(sp),a0
   173b2:	|           |  |  |  |  |      adda.l d0,a0
   173b4:	|           |  |  |  |  |      move.l (a0),d1
   173b6:	|           |  |  |  |  |      move.l 132(sp),d0
   173ba:	|           |  |  |  |  |      add.l d0,d0
   173bc:	|           |  |  |  |  |      add.l d0,d0
   173be:	|           |  |  |  |  |      movea.l d1,a0
   173c0:	|           |  |  |  |  |      adda.l d0,a0
   173c2:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   173c4:	|           |  |  |  |  '----> addq.l #1,132(sp)
   173c8:	|           |  |  |  '-------> movea.l 1cfa2 <currentFloor>,a0
   173ce:	|           |  |  |            move.l 8(a0),d0
   173d2:	|           |  |  |            cmp.l 132(sp),d0
   173d6:	|           |  |  '----------- bgt.w 172e4 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   173da:	|           |  |               addq.l #1,136(sp)
   173de:	|           |  '-------------> movea.l 1cfa2 <currentFloor>,a0
   173e4:	|           |                  move.l 8(a0),d0
   173e8:	|           |                  cmp.l 136(sp),d0
   173ec:	|           '----------------- bgt.w 172dc <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   173f0:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   173f4:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   173f8:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   173fc:	|  |                           clr.l 136(sp)
   17400:	|  |     ,-------------------- bra.w 17556 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17404:	|  |  ,--|-------------------> clr.l 132(sp)
   17408:	|  |  |  |     ,-------------- bra.w 17540 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   1740c:	|  |  |  |  ,--|-------------> movea.l 1cfa2 <currentFloor>,a0
   17412:	|  |  |  |  |  |               move.l 16(a0),d1
   17416:	|  |  |  |  |  |               move.l 136(sp),d0
   1741a:	|  |  |  |  |  |               add.l d0,d0
   1741c:	|  |  |  |  |  |               add.l d0,d0
   1741e:	|  |  |  |  |  |               movea.l d1,a0
   17420:	|  |  |  |  |  |               adda.l d0,a0
   17422:	|  |  |  |  |  |               move.l (a0),d1
   17424:	|  |  |  |  |  |               move.l 132(sp),d0
   17428:	|  |  |  |  |  |               add.l d0,d0
   1742a:	|  |  |  |  |  |               add.l d0,d0
   1742c:	|  |  |  |  |  |               movea.l d1,a0
   1742e:	|  |  |  |  |  |               adda.l d0,a0
   17430:	|  |  |  |  |  |               move.l (a0),d0
   17432:	|  |  |  |  |  |               moveq #-1,d1
   17434:	|  |  |  |  |  |               cmp.l d0,d1
   17436:	|  |  |  |  |  |  ,----------- bne.w 1753c <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   1743a:	|  |  |  |  |  |  |            clr.l 122(sp)
   1743e:	|  |  |  |  |  |  |     ,----- bra.w 1752a <setFloor+0x6d2>
						if (d != i && d != j) {
   17442:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   17446:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   1744a:	|  |  |  |  |  |  |  |  |  ,-- beq.w 17526 <setFloor+0x6ce>
   1744e:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   17452:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   17456:	|  |  |  |  |  |  |  |  |  +-- beq.w 17526 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   1745a:	|  |  |  |  |  |  |  |  |  |   movea.l 1cfa2 <currentFloor>,a0
   17460:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17464:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17468:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1746a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1746c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1746e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17470:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17472:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17476:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17478:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1747a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1747c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1747e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   17480:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   17484:	|  |  |  |  |  |  |  |  |  +-- bne.w 17526 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   17488:	|  |  |  |  |  |  |  |  |  |   movea.l 1cfa2 <currentFloor>,a0
   1748e:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17492:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17496:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17498:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1749a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   1749c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1749e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   174a0:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   174a4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   174a6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   174a8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   174aa:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   174ac:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   174ae:	|  |  |  |  |  |  |  |  |  +-- bmi.s 17526 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   174b0:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   174b4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   174b6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   174b8:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   174bc:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   174be:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   174c0:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   174c4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   174c6:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   174c8:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   174ca:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   174cc:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   174ce:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   174d2:	|  |  |  |  |  |  |  |  |  +-- bgt.s 17526 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   174d4:	|  |  |  |  |  |  |  |  |  |   movea.l 1cfa2 <currentFloor>,a0
   174da:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   174de:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   174e2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   174e4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   174e6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   174e8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   174ea:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   174ec:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   174f0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   174f2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   174f4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   174f6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   174f8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   174fc:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   17500:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17502:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17504:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17508:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   1750a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1750c:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   17510:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17512:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17514:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17516:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17518:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   1751c:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   1751e:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   17520:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   17526:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   1752a:	|  |  |  |  |  |  |  |  '----> movea.l 1cfa2 <currentFloor>,a0
   17530:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   17534:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   17538:	|  |  |  |  |  |  |  '-------- bgt.w 17442 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1753c:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   17540:	|  |  |  |  |  '-------------> movea.l 1cfa2 <currentFloor>,a0
   17546:	|  |  |  |  |                  move.l 8(a0),d0
   1754a:	|  |  |  |  |                  cmp.l 132(sp),d0
   1754e:	|  |  |  |  '----------------- bgt.w 1740c <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17552:	|  |  |  |                     addq.l #1,136(sp)
   17556:	|  |  |  '-------------------> movea.l 1cfa2 <currentFloor>,a0
   1755c:	|  |  |                        move.l 8(a0),d0
   17560:	|  |  |                        cmp.l 136(sp),d0
   17564:	|  |  '----------------------- bgt.w 17404 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   17568:	|  |                           tst.w 130(sp)
   1756c:	|  '-------------------------- bne.w 173f4 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17570:	|                              clr.l 136(sp)
   17574:	|                          ,-- bra.s 1759c <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   17576:	|                       ,--|-> move.l 136(sp),d0
   1757a:	|                       |  |   add.l d0,d0
   1757c:	|                       |  |   add.l d0,d0
   1757e:	|                       |  |   movea.l 62(sp),a0
   17582:	|                       |  |   adda.l d0,a0
   17584:	|                       |  |   move.l (a0),54(sp)
   17588:	|                       |  |   move.l 1ce8a <SysBase>,d0
   1758e:	|                       |  |   movea.l d0,a6
   17590:	|                       |  |   movea.l 54(sp),a1
   17594:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17598:	|                       |  |   addq.l #1,136(sp)
   1759c:	|                       |  '-> movea.l 1cfa2 <currentFloor>,a0
   175a2:	|                       |      move.l 8(a0),d0
   175a6:	|                       |      cmp.l 136(sp),d0
   175aa:	|                       '----- bgt.s 17576 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   175ac:	|                              move.l 62(sp),58(sp)
   175b2:	|                              move.l 1ce8a <SysBase>,d0
   175b8:	|                              movea.l d0,a6
   175ba:	|                              movea.l 58(sp),a1
   175be:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   175c2:	|                              clr.l 62(sp)

	return TRUE;
   175c6:	|                              moveq #1,d0
}
   175c8:	'----------------------------> movea.l (sp)+,a2
   175ca:	                               movea.l (sp)+,a6
   175cc:	                               lea 132(sp),sp
   175d0:	                               rts

000175d2 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   175d2:	jsr 16ac0 <killFloor>
	noFloor ();
   175d8:	jsr 169c8 <noFloor>
   175de:	nop
   175e0:	rts

000175e2 <WaitVbl>:
void WaitVbl() {
   175e2:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   175e4:	   ,-> movea.l #14675972,a0
   175ea:	   |   move.l (a0),d0
   175ec:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   175ee:	   |   move.l (sp),d0
   175f0:	   |   andi.l #130816,d0
   175f6:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   175f8:	   |   move.l (sp),d0
   175fa:	   |   cmpi.l #76800,d0
   17600:	   '-- beq.s 175e4 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   17602:	,----> movea.l #14675972,a0
   17608:	|      move.l (a0),d0
   1760a:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   1760e:	|      move.l 4(sp),d0
   17612:	|      andi.l #130816,d0
   17618:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   1761c:	|      move.l 4(sp),d0
   17620:	|      cmpi.l #76800,d0
   17626:	|  ,-- beq.s 1762a <WaitVbl+0x48>
	while (1) {
   17628:	'--|-- bra.s 17602 <WaitVbl+0x20>
			break;
   1762a:	   '-> nop
}
   1762c:	       nop
   1762e:	       addq.l #8,sp
   17630:	       rts

00017632 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   17632:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   17634:	       move.l 8(sp),(sp)
	while(len-- > 0)
   17638:	   ,-- bra.s 1764a <memset+0x18>
		*ptr++ = val;
   1763a:	,--|-> move.l (sp),d0
   1763c:	|  |   move.l d0,d1
   1763e:	|  |   addq.l #1,d1
   17640:	|  |   move.l d1,(sp)
   17642:	|  |   move.l 12(sp),d1
   17646:	|  |   movea.l d0,a0
   17648:	|  |   move.b d1,(a0)
	while(len-- > 0)
   1764a:	|  '-> move.l 16(sp),d0
   1764e:	|      move.l d0,d1
   17650:	|      subq.l #1,d1
   17652:	|      move.l d1,16(sp)
   17656:	|      tst.l d0
   17658:	'----- bne.s 1763a <memset+0x8>
	return dest;
   1765a:	       move.l 8(sp),d0
}
   1765e:	       addq.l #4,sp
   17660:	       rts

00017662 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   17662:	       subq.l #8,sp
   17664:	       move.l d2,-(sp)
	char *d = (char *)dest;
   17666:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   1766c:	       move.l 20(sp),4(sp)
	while(len--)
   17672:	   ,-- bra.s 17694 <memcpy+0x32>
		*d++ = *s++;
   17674:	,--|-> move.l 4(sp),d1
   17678:	|  |   move.l d1,d0
   1767a:	|  |   addq.l #1,d0
   1767c:	|  |   move.l d0,4(sp)
   17680:	|  |   move.l 8(sp),d0
   17684:	|  |   move.l d0,d2
   17686:	|  |   addq.l #1,d2
   17688:	|  |   move.l d2,8(sp)
   1768c:	|  |   movea.l d1,a0
   1768e:	|  |   move.b (a0),d1
   17690:	|  |   movea.l d0,a0
   17692:	|  |   move.b d1,(a0)
	while(len--)
   17694:	|  '-> move.l 24(sp),d0
   17698:	|      move.l d0,d1
   1769a:	|      subq.l #1,d1
   1769c:	|      move.l d1,24(sp)
   176a0:	|      tst.l d0
   176a2:	'----- bne.s 17674 <memcpy+0x12>
	return dest;
   176a4:	       move.l 16(sp),d0
}
   176a8:	       move.l (sp)+,d2
   176aa:	       addq.l #8,sp
   176ac:	       rts

000176ae <KPrintF>:
void KPrintF(const char* fmt, ...) {
   176ae:	       lea -128(sp),sp
   176b2:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   176b6:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec3e04>,d0
   176bc:	       cmpi.w #20153,d0
   176c0:	   ,-- beq.s 176e4 <KPrintF+0x36>
   176c2:	   |   cmpi.w #-24562,d0
   176c6:	   +-- beq.s 176e4 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   176c8:	   |   movea.l 1ce8a <SysBase>,a6
   176ce:	   |   movea.l 144(sp),a0
   176d2:	   |   lea 148(sp),a1
   176d6:	   |   lea 18142 <KPutCharX>,a2
   176dc:	   |   suba.l a3,a3
   176de:	   |   jsr -522(a6)
}
   176e2:	,--|-- bra.s 1770e <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   176e4:	|  '-> movea.l 1ce8a <SysBase>,a6
   176ea:	|      movea.l 144(sp),a0
   176ee:	|      lea 148(sp),a1
   176f2:	|      lea 18150 <PutChar>,a2
   176f8:	|      lea 12(sp),a3
   176fc:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   17700:	|      move.l a3,-(sp)
   17702:	|      pea 56 <_start+0x56>
   17706:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec3e04>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   1770c:	|      addq.l #8,sp
}
   1770e:	'----> movem.l (sp)+,a2-a3/a6
   17712:	       lea 128(sp),sp
   17716:	       rts

00017718 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   17718:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   1771a:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   17720:	       movea.l (sp),a0
   17722:	       move.w (a0),d0
   17724:	       cmpi.w #20153,d0
   17728:	   ,-- beq.s 17734 <debug_cmd+0x1c>
   1772a:	   |   movea.l (sp),a0
   1772c:	   |   move.w (a0),d0
   1772e:	   |   cmpi.w #-24562,d0
   17732:	,--|-- bne.s 17752 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   17734:	|  '-> move.l 20(sp),-(sp)
   17738:	|      move.l 20(sp),-(sp)
   1773c:	|      move.l 20(sp),-(sp)
   17740:	|      move.l 20(sp),-(sp)
   17744:	|      pea 58 <_start+0x58>
   17748:	|      movea.l 20(sp),a0
   1774c:	|      jsr (a0)
   1774e:	|      lea 20(sp),sp
	}
}
   17752:	'----> nop
   17754:	       addq.l #4,sp
   17756:	       rts

00017758 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   17758:	       move.l d2,-(sp)
	while(*source && --num > 0)
   1775a:	   ,-- bra.s 1777c <my_strncpy+0x24>
		*destination++ = *source++;
   1775c:	,--|-> move.l 12(sp),d1
   17760:	|  |   move.l d1,d0
   17762:	|  |   addq.l #1,d0
   17764:	|  |   move.l d0,12(sp)
   17768:	|  |   move.l 8(sp),d0
   1776c:	|  |   move.l d0,d2
   1776e:	|  |   addq.l #1,d2
   17770:	|  |   move.l d2,8(sp)
   17774:	|  |   movea.l d1,a0
   17776:	|  |   move.b (a0),d1
   17778:	|  |   movea.l d0,a0
   1777a:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   1777c:	|  '-> movea.l 12(sp),a0
   17780:	|      move.b (a0),d0
   17782:	|  ,-- beq.s 1778a <my_strncpy+0x32>
   17784:	|  |   subq.l #1,16(sp)
   17788:	'--|-- bne.s 1775c <my_strncpy+0x4>
	*destination = '\0';
   1778a:	   '-> movea.l 8(sp),a0
   1778e:	       clr.b (a0)
}
   17790:	       nop
   17792:	       move.l (sp)+,d2
   17794:	       rts

00017796 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17796:	    lea -60(sp),sp
   1779a:	    movea.l 72(sp),a1
   1779e:	    movea.l 76(sp),a0
   177a2:	    move.l 80(sp),d1
   177a6:	    move.l 84(sp),d0
   177aa:	    movea.w a1,a1
   177ac:	    move.w a1,8(sp)
   177b0:	    movea.w a0,a0
   177b2:	    move.w a0,6(sp)
   177b6:	    move.w d1,d1
   177b8:	    move.w d1,4(sp)
   177bc:	    move.w d0,d0
   177be:	    move.w d0,2(sp)
	struct debug_resource resource = {
   177c2:	    lea 10(sp),a0
   177c6:	    clr.l (a0)
   177c8:	    addq.l #4,a0
   177ca:	    clr.l (a0)
   177cc:	    addq.l #4,a0
   177ce:	    clr.l (a0)
   177d0:	    addq.l #4,a0
   177d2:	    clr.l (a0)
   177d4:	    addq.l #4,a0
   177d6:	    clr.l (a0)
   177d8:	    addq.l #4,a0
   177da:	    clr.l (a0)
   177dc:	    addq.l #4,a0
   177de:	    clr.l (a0)
   177e0:	    addq.l #4,a0
   177e2:	    clr.l (a0)
   177e4:	    addq.l #4,a0
   177e6:	    clr.l (a0)
   177e8:	    addq.l #4,a0
   177ea:	    clr.l (a0)
   177ec:	    addq.l #4,a0
   177ee:	    clr.l (a0)
   177f0:	    addq.l #4,a0
   177f2:	    clr.l (a0)
   177f4:	    addq.l #4,a0
   177f6:	    clr.w (a0)
   177f8:	    addq.l #2,a0
		.address = (unsigned int)addr,
   177fa:	    move.l 64(sp),d0
	struct debug_resource resource = {
   177fe:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   17802:	    move.w 8(sp),d0
   17806:	,-- bpl.s 1780a <debug_register_bitmap+0x74>
   17808:	|   addq.w #7,d0
   1780a:	'-> asr.w #3,d0
   1780c:	    movea.w d0,a0
   1780e:	    movea.w 6(sp),a1
   17812:	    move.l a1,-(sp)
   17814:	    move.l a0,-(sp)
   17816:	    jsr 1803a <__mulsi3>
   1781c:	    addq.l #8,sp
   1781e:	    movea.w 4(sp),a0
   17822:	    move.l a0,-(sp)
   17824:	    move.l d0,-(sp)
   17826:	    jsr 1803a <__mulsi3>
   1782c:	    addq.l #8,sp
	struct debug_resource resource = {
   1782e:	    move.l d0,14(sp)
   17832:	    move.w 2(sp),52(sp)
   17838:	    move.w 8(sp),54(sp)
   1783e:	    move.w 6(sp),56(sp)
   17844:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   1784a:	    moveq #0,d0
   1784c:	    move.w 2(sp),d0
   17850:	    moveq #2,d1
   17852:	    and.l d1,d0
   17854:	,-- beq.s 17860 <debug_register_bitmap+0xca>
		resource.size *= 2;
   17856:	|   move.l 14(sp),d0
   1785a:	|   add.l d0,d0
   1785c:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   17860:	'-> pea 20 <_start+0x20>
   17864:	    move.l 72(sp),-(sp)
   17868:	    lea 18(sp),a0
   1786c:	    move.l a0,d0
   1786e:	    addq.l #8,d0
   17870:	    move.l d0,-(sp)
   17872:	    jsr 17758 <my_strncpy>
   17878:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   1787c:	    lea 10(sp),a0
   17880:	    clr.l -(sp)
   17882:	    clr.l -(sp)
   17884:	    move.l a0,-(sp)
   17886:	    pea 4 <_start+0x4>
   1788a:	    jsr 17718 <debug_cmd>
   17890:	    lea 16(sp),sp
}
   17894:	    nop
   17896:	    lea 60(sp),sp
   1789a:	    rts

0001789c <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   1789c:	lea -12(sp),sp
   178a0:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   178a2:	move.l 20(sp),12(sp)
   178a8:	move.l 24(sp),8(sp)
   178ae:	move.l 1ce9a <MathIeeeSingBasBase>,d0
   178b4:	movea.l d0,a6
   178b6:	move.l 12(sp),d0
   178ba:	move.l 8(sp),d1
   178be:	jsr -66(a6)
   178c2:	move.l d0,4(sp)
   178c6:	move.l 4(sp),d0
}
   178ca:	movea.l (sp)+,a6
   178cc:	lea 12(sp),sp
   178d0:	rts

000178d2 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   178d2:	lea -32(sp),sp
   178d6:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   178da:	move.l 48(sp),36(sp)
   178e0:	move.l 52(sp),40(sp)
   178e6:	move.l 56(sp),28(sp)
   178ec:	move.l 60(sp),32(sp)
   178f2:	move.l 1cea2 <MathIeeeDoubBasBase>,d0
   178f8:	movea.l d0,a6
   178fa:	move.l 36(sp),d0
   178fe:	move.l 40(sp),d1
   17902:	move.l 28(sp),d2
   17906:	move.l 32(sp),d3
   1790a:	jsr -66(a6)
   1790e:	move.l d0,12(sp)
   17912:	move.l d1,16(sp)
   17916:	move.l 12(sp),20(sp)
   1791c:	move.l 16(sp),24(sp)
   17922:	move.l 20(sp),d0
   17926:	move.l 24(sp),d1
}
   1792a:	movem.l (sp)+,d2-d3/a6
   1792e:	lea 32(sp),sp
   17932:	rts

00017934 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   17934:	lea -32(sp),sp
   17938:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   1793c:	move.l 48(sp),36(sp)
   17942:	move.l 52(sp),40(sp)
   17948:	move.l 56(sp),28(sp)
   1794e:	move.l 60(sp),32(sp)
   17954:	move.l 1cea2 <MathIeeeDoubBasBase>,d0
   1795a:	movea.l d0,a6
   1795c:	move.l 36(sp),d0
   17960:	move.l 40(sp),d1
   17964:	move.l 28(sp),d2
   17968:	move.l 32(sp),d3
   1796c:	jsr -84(a6)
   17970:	move.l d0,12(sp)
   17974:	move.l d1,16(sp)
   17978:	move.l 12(sp),20(sp)
   1797e:	move.l 16(sp),24(sp)
   17984:	move.l 20(sp),d0
   17988:	move.l 24(sp),d1
}
   1798c:	movem.l (sp)+,d2-d3/a6
   17990:	lea 32(sp),sp
   17994:	rts

00017996 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17996:	lea -12(sp),sp
   1799a:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   1799c:	move.l 20(sp),12(sp)
   179a2:	move.l 24(sp),8(sp)
   179a8:	move.l 1ce9a <MathIeeeSingBasBase>,d0
   179ae:	movea.l d0,a6
   179b0:	move.l 12(sp),d0
   179b4:	move.l 8(sp),d1
   179b8:	jsr -84(a6)
   179bc:	move.l d0,4(sp)
   179c0:	move.l 4(sp),d0
}
   179c4:	movea.l (sp)+,a6
   179c6:	lea 12(sp),sp
   179ca:	rts

000179cc <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   179cc:	lea -12(sp),sp
   179d0:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   179d2:	move.l 20(sp),12(sp)
   179d8:	move.l 24(sp),8(sp)
   179de:	move.l 1ce9a <MathIeeeSingBasBase>,d0
   179e4:	movea.l d0,a6
   179e6:	move.l 12(sp),d0
   179ea:	move.l 8(sp),d1
   179ee:	jsr -42(a6)
   179f2:	move.l d0,4(sp)
   179f6:	move.l 4(sp),d0
}
   179fa:	movea.l (sp)+,a6
   179fc:	lea 12(sp),sp
   17a00:	rts

00017a02 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   17a02:	lea -20(sp),sp
   17a06:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   17a08:	move.l 28(sp),20(sp)
   17a0e:	move.l 1cea6 <MathIeeeDoubTransBase>,d0
   17a14:	movea.l d0,a6
   17a16:	move.l 20(sp),d0
   17a1a:	jsr -108(a6)
   17a1e:	move.l d0,4(sp)
   17a22:	move.l d1,8(sp)
   17a26:	move.l 4(sp),12(sp)
   17a2c:	move.l 8(sp),16(sp)
   17a32:	move.l 12(sp),d0
   17a36:	move.l 16(sp),d1
}
   17a3a:	movea.l (sp)+,a6
   17a3c:	lea 20(sp),sp
   17a40:	rts

00017a42 <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   17a42:	lea -12(sp),sp
   17a46:	move.l a6,-(sp)
	return IEEEDPFix(value);
   17a48:	move.l 20(sp),8(sp)
   17a4e:	move.l 24(sp),12(sp)
   17a54:	move.l 1cea2 <MathIeeeDoubBasBase>,d0
   17a5a:	movea.l d0,a6
   17a5c:	move.l 8(sp),d0
   17a60:	move.l 12(sp),d1
   17a64:	jsr -30(a6)
   17a68:	move.l d0,4(sp)
   17a6c:	move.l 4(sp),d0
}
   17a70:	movea.l (sp)+,a6
   17a72:	lea 12(sp),sp
   17a76:	rts

00017a78 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17a78:	subq.l #8,sp
   17a7a:	move.l a6,-(sp)
	return IEEESPFix(value);
   17a7c:	move.l 16(sp),8(sp)
   17a82:	move.l 1ce9a <MathIeeeSingBasBase>,d0
   17a88:	movea.l d0,a6
   17a8a:	move.l 8(sp),d0
   17a8e:	jsr -30(a6)
   17a92:	move.l d0,4(sp)
   17a96:	move.l 4(sp),d0
}
   17a9a:	movea.l (sp)+,a6
   17a9c:	addq.l #8,sp
   17a9e:	rts

00017aa0 <__floatsidf>:


DOUBLE __floatsidf (int i) {
   17aa0:	lea -20(sp),sp
   17aa4:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17aa6:	move.l 28(sp),20(sp)
   17aac:	move.l 1cea2 <MathIeeeDoubBasBase>,d0
   17ab2:	movea.l d0,a6
   17ab4:	move.l 20(sp),d0
   17ab8:	jsr -36(a6)
   17abc:	move.l d0,4(sp)
   17ac0:	move.l d1,8(sp)
   17ac4:	move.l 4(sp),12(sp)
   17aca:	move.l 8(sp),16(sp)
   17ad0:	move.l 12(sp),d0
   17ad4:	move.l 16(sp),d1
}
   17ad8:	movea.l (sp)+,a6
   17ada:	lea 20(sp),sp
   17ade:	rts

00017ae0 <__floatsisf>:

FLOAT __floatsisf(int i) {
   17ae0:	subq.l #8,sp
   17ae2:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17ae4:	move.l 16(sp),8(sp)
   17aea:	move.l 1ce9a <MathIeeeSingBasBase>,d0
   17af0:	movea.l d0,a6
   17af2:	move.l 8(sp),d0
   17af6:	jsr -36(a6)
   17afa:	move.l d0,4(sp)
   17afe:	move.l 4(sp),d0
}
   17b02:	movea.l (sp)+,a6
   17b04:	addq.l #8,sp
   17b06:	rts

00017b08 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17b08:	subq.l #8,sp
   17b0a:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17b0c:	move.l 16(sp),8(sp)
   17b12:	move.l 1ce9a <MathIeeeSingBasBase>,d0
   17b18:	movea.l d0,a6
   17b1a:	move.l 8(sp),d0
   17b1e:	jsr -36(a6)
   17b22:	move.l d0,4(sp)
   17b26:	move.l 4(sp),d0
}
   17b2a:	movea.l (sp)+,a6
   17b2c:	addq.l #8,sp
   17b2e:	rts

00017b30 <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   17b30:	lea -32(sp),sp
   17b34:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   17b38:	move.l 48(sp),36(sp)
   17b3e:	move.l 52(sp),40(sp)
   17b44:	move.l 56(sp),28(sp)
   17b4a:	move.l 60(sp),32(sp)
   17b50:	move.l 1cea2 <MathIeeeDoubBasBase>,d0
   17b56:	movea.l d0,a6
   17b58:	move.l 36(sp),d0
   17b5c:	move.l 40(sp),d1
   17b60:	move.l 28(sp),d2
   17b64:	move.l 32(sp),d3
   17b68:	jsr -78(a6)
   17b6c:	move.l d0,12(sp)
   17b70:	move.l d1,16(sp)
   17b74:	move.l 12(sp),20(sp)
   17b7a:	move.l 16(sp),24(sp)
   17b80:	move.l 20(sp),d0
   17b84:	move.l 24(sp),d1
}
   17b88:	movem.l (sp)+,d2-d3/a6
   17b8c:	lea 32(sp),sp
   17b90:	rts

00017b92 <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   17b92:	lea -12(sp),sp
   17b96:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17b98:	move.l 20(sp),12(sp)
   17b9e:	move.l 24(sp),8(sp)
   17ba4:	move.l 1ce9a <MathIeeeSingBasBase>,d0
   17baa:	movea.l d0,a6
   17bac:	move.l 12(sp),d0
   17bb0:	move.l 8(sp),d1
   17bb4:	jsr -78(a6)
   17bb8:	move.l d0,4(sp)
   17bbc:	move.l 4(sp),d0
}
   17bc0:	movea.l (sp)+,a6
   17bc2:	lea 12(sp),sp
   17bc6:	rts

00017bc8 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17bc8:	lea -12(sp),sp
   17bcc:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17bce:	move.l 20(sp),12(sp)
   17bd4:	move.l 24(sp),8(sp)
   17bda:	move.l 1ce9a <MathIeeeSingBasBase>,d0
   17be0:	movea.l d0,a6
   17be2:	move.l 12(sp),d0
   17be6:	move.l 8(sp),d1
   17bea:	jsr -42(a6)
   17bee:	move.l d0,4(sp)
   17bf2:	move.l 4(sp),d0
}
   17bf6:	movea.l (sp)+,a6
   17bf8:	lea 12(sp),sp
   17bfc:	rts

00017bfe <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   17bfe:	lea -20(sp),sp
   17c02:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17c06:	move.l 36(sp),24(sp)
   17c0c:	move.l 40(sp),28(sp)
   17c12:	move.l 44(sp),16(sp)
   17c18:	move.l 48(sp),20(sp)
   17c1e:	move.l 1cea2 <MathIeeeDoubBasBase>,d0
   17c24:	movea.l d0,a6
   17c26:	move.l 24(sp),d0
   17c2a:	move.l 28(sp),d1
   17c2e:	move.l 16(sp),d2
   17c32:	move.l 20(sp),d3
   17c36:	jsr -42(a6)
   17c3a:	move.l d0,12(sp)
   17c3e:	move.l 12(sp),d0
}
   17c42:	movem.l (sp)+,d2-d3/a6
   17c46:	lea 20(sp),sp
   17c4a:	rts

00017c4c <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17c4c:	lea -12(sp),sp
   17c50:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17c52:	move.l 20(sp),12(sp)
   17c58:	move.l 24(sp),8(sp)
   17c5e:	move.l 1ce9a <MathIeeeSingBasBase>,d0
   17c64:	movea.l d0,a6
   17c66:	move.l 12(sp),d0
   17c6a:	move.l 8(sp),d1
   17c6e:	jsr -42(a6)
   17c72:	move.l d0,4(sp)
   17c76:	move.l 4(sp),d0
}
   17c7a:	movea.l (sp)+,a6
   17c7c:	lea 12(sp),sp
   17c80:	rts

00017c82 <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17c82:	lea -12(sp),sp
   17c86:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17c88:	move.l 20(sp),12(sp)
   17c8e:	move.l 24(sp),8(sp)
   17c94:	move.l 1ce9a <MathIeeeSingBasBase>,d0
   17c9a:	movea.l d0,a6
   17c9c:	move.l 12(sp),d0
   17ca0:	move.l 8(sp),d1
   17ca4:	jsr -42(a6)
   17ca8:	move.l d0,4(sp)
   17cac:	move.l 4(sp),d0
}
   17cb0:	movea.l (sp)+,a6
   17cb2:	lea 12(sp),sp
   17cb6:	rts

00017cb8 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17cb8:	lea -20(sp),sp
   17cbc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17cc0:	move.l 36(sp),24(sp)
   17cc6:	move.l 40(sp),28(sp)
   17ccc:	move.l 44(sp),16(sp)
   17cd2:	move.l 48(sp),20(sp)
   17cd8:	move.l 1cea2 <MathIeeeDoubBasBase>,d0
   17cde:	movea.l d0,a6
   17ce0:	move.l 24(sp),d0
   17ce4:	move.l 28(sp),d1
   17ce8:	move.l 16(sp),d2
   17cec:	move.l 20(sp),d3
   17cf0:	jsr -42(a6)
   17cf4:	move.l d0,12(sp)
   17cf8:	move.l 12(sp),d0
}
   17cfc:	movem.l (sp)+,d2-d3/a6
   17d00:	lea 20(sp),sp
   17d04:	rts

00017d06 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17d06:	lea -12(sp),sp
   17d0a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17d0c:	move.l 20(sp),12(sp)
   17d12:	move.l 24(sp),8(sp)
   17d18:	move.l 1ce9a <MathIeeeSingBasBase>,d0
   17d1e:	movea.l d0,a6
   17d20:	move.l 12(sp),d0
   17d24:	move.l 8(sp),d1
   17d28:	jsr -42(a6)
   17d2c:	move.l d0,4(sp)
   17d30:	move.l 4(sp),d0
}
   17d34:	movea.l (sp)+,a6
   17d36:	lea 12(sp),sp
   17d3a:	rts

00017d3c <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17d3c:	lea -12(sp),sp
   17d40:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17d42:	move.l 20(sp),12(sp)
   17d48:	move.l 24(sp),8(sp)
   17d4e:	move.l 1ce9a <MathIeeeSingBasBase>,d0
   17d54:	movea.l d0,a6
   17d56:	move.l 12(sp),d0
   17d5a:	move.l 8(sp),d1
   17d5e:	jsr -42(a6)
   17d62:	move.l d0,4(sp)
   17d66:	move.l 4(sp),d0
}
   17d6a:	movea.l (sp)+,a6
   17d6c:	lea 12(sp),sp
   17d70:	rts

00017d72 <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17d72:	lea -32(sp),sp
   17d76:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17d7a:	move.l 48(sp),36(sp)
   17d80:	move.l 52(sp),40(sp)
   17d86:	move.l 56(sp),28(sp)
   17d8c:	move.l 60(sp),32(sp)
   17d92:	move.l 1cea2 <MathIeeeDoubBasBase>,d0
   17d98:	movea.l d0,a6
   17d9a:	move.l 36(sp),d0
   17d9e:	move.l 40(sp),d1
   17da2:	move.l 28(sp),d2
   17da6:	move.l 32(sp),d3
   17daa:	jsr -72(a6)
   17dae:	move.l d0,12(sp)
   17db2:	move.l d1,16(sp)
   17db6:	move.l 12(sp),20(sp)
   17dbc:	move.l 16(sp),24(sp)
   17dc2:	move.l 20(sp),d0
   17dc6:	move.l 24(sp),d1
}
   17dca:	movem.l (sp)+,d2-d3/a6
   17dce:	lea 32(sp),sp
   17dd2:	rts

00017dd4 <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17dd4:	lea -12(sp),sp
   17dd8:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17dda:	move.l 20(sp),12(sp)
   17de0:	move.l 24(sp),8(sp)
   17de6:	move.l 1ce9a <MathIeeeSingBasBase>,d0
   17dec:	movea.l d0,a6
   17dee:	move.l 12(sp),d0
   17df2:	move.l 8(sp),d1
   17df6:	jsr -72(a6)
   17dfa:	move.l d0,4(sp)
   17dfe:	move.l 4(sp),d0
}
   17e02:	movea.l (sp)+,a6
   17e04:	lea 12(sp),sp
   17e08:	rts

00017e0a <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17e0a:	lea -12(sp),sp
   17e0e:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17e10:	move.l 20(sp),8(sp)
   17e16:	move.l 24(sp),12(sp)
   17e1c:	move.l 1cea6 <MathIeeeDoubTransBase>,d0
   17e22:	movea.l d0,a6
   17e24:	move.l 8(sp),d0
   17e28:	move.l 12(sp),d1
   17e2c:	jsr -102(a6)
   17e30:	move.l d0,4(sp)
   17e34:	move.l 4(sp),d0
}
   17e38:	movea.l (sp)+,a6
   17e3a:	lea 12(sp),sp
   17e3e:	rts

00017e40 <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   17e40:	       lea -24(sp),sp
   17e44:	       move.l a6,-(sp)
    if (x > 0) {
   17e46:	       clr.l -(sp)
   17e48:	       move.l 40(sp),-(sp)
   17e4c:	       jsr 17c4c <__gtsf2>
   17e52:	       addq.l #8,sp
   17e54:	       tst.l d0
   17e56:	   ,-- ble.s 17e88 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17e58:	   |   move.l 36(sp),-(sp)
   17e5c:	   |   move.l 36(sp),-(sp)
   17e60:	   |   jsr 17996 <__divsf3>
   17e66:	   |   addq.l #8,sp
   17e68:	   |   move.l d0,8(sp)
   17e6c:	   |   move.l 1ce9e <MathIeeeSingTransBase>,d0
   17e72:	   |   movea.l d0,a6
   17e74:	   |   move.l 8(sp),d0
   17e78:	   |   jsr -30(a6)
   17e7c:	   |   move.l d0,4(sp)
   17e80:	   |   move.l 4(sp),d0
   17e84:	,--|-- bra.w 17fe8 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17e88:	|  '-> clr.l -(sp)
   17e8a:	|      move.l 40(sp),-(sp)
   17e8e:	|      jsr 17d06 <__ltsf2>
   17e94:	|      addq.l #8,sp
   17e96:	|      tst.l d0
   17e98:	|  ,-- bge.s 17f0c <atan2f+0xcc>
   17e9a:	|  |   clr.l -(sp)
   17e9c:	|  |   move.l 36(sp),-(sp)
   17ea0:	|  |   jsr 17bc8 <__gesf2>
   17ea6:	|  |   addq.l #8,sp
   17ea8:	|  |   tst.l d0
   17eaa:	|  +-- blt.s 17f0c <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17eac:	|  |   move.l 36(sp),-(sp)
   17eb0:	|  |   move.l 36(sp),-(sp)
   17eb4:	|  |   jsr 17996 <__divsf3>
   17eba:	|  |   addq.l #8,sp
   17ebc:	|  |   move.l d0,24(sp)
   17ec0:	|  |   move.l 1ce9e <MathIeeeSingTransBase>,d0
   17ec6:	|  |   movea.l d0,a6
   17ec8:	|  |   move.l 24(sp),d0
   17ecc:	|  |   jsr -30(a6)
   17ed0:	|  |   move.l d0,20(sp)
   17ed4:	|  |   move.l 20(sp),d0
   17ed8:	|  |   move.l d0,-(sp)
   17eda:	|  |   jsr 17a02 <__extendsfdf2>
   17ee0:	|  |   addq.l #4,sp
   17ee2:	|  |   move.l #1413754136,-(sp)
   17ee8:	|  |   move.l #1074340347,-(sp)
   17eee:	|  |   move.l d1,-(sp)
   17ef0:	|  |   move.l d0,-(sp)
   17ef2:	|  |   jsr 178d2 <__adddf3>
   17ef8:	|  |   lea 16(sp),sp
   17efc:	|  |   move.l d1,-(sp)
   17efe:	|  |   move.l d0,-(sp)
   17f00:	|  |   jsr 17e0a <__truncdfsf2>
   17f06:	|  |   addq.l #8,sp
   17f08:	+--|-- bra.w 17fe8 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17f0c:	|  '-> clr.l -(sp)
   17f0e:	|      move.l 40(sp),-(sp)
   17f12:	|      jsr 17d06 <__ltsf2>
   17f18:	|      addq.l #8,sp
   17f1a:	|      tst.l d0
   17f1c:	|  ,-- bge.s 17f8e <atan2f+0x14e>
   17f1e:	|  |   clr.l -(sp)
   17f20:	|  |   move.l 36(sp),-(sp)
   17f24:	|  |   jsr 17d06 <__ltsf2>
   17f2a:	|  |   addq.l #8,sp
   17f2c:	|  |   tst.l d0
   17f2e:	|  +-- bge.s 17f8e <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17f30:	|  |   move.l 36(sp),-(sp)
   17f34:	|  |   move.l 36(sp),-(sp)
   17f38:	|  |   jsr 17996 <__divsf3>
   17f3e:	|  |   addq.l #8,sp
   17f40:	|  |   move.l d0,16(sp)
   17f44:	|  |   move.l 1ce9e <MathIeeeSingTransBase>,d0
   17f4a:	|  |   movea.l d0,a6
   17f4c:	|  |   move.l 16(sp),d0
   17f50:	|  |   jsr -30(a6)
   17f54:	|  |   move.l d0,12(sp)
   17f58:	|  |   move.l 12(sp),d0
   17f5c:	|  |   move.l d0,-(sp)
   17f5e:	|  |   jsr 17a02 <__extendsfdf2>
   17f64:	|  |   addq.l #4,sp
   17f66:	|  |   move.l #1413754136,-(sp)
   17f6c:	|  |   move.l #1074340347,-(sp)
   17f72:	|  |   move.l d1,-(sp)
   17f74:	|  |   move.l d0,-(sp)
   17f76:	|  |   jsr 17d72 <__subdf3>
   17f7c:	|  |   lea 16(sp),sp
   17f80:	|  |   move.l d1,-(sp)
   17f82:	|  |   move.l d0,-(sp)
   17f84:	|  |   jsr 17e0a <__truncdfsf2>
   17f8a:	|  |   addq.l #8,sp
   17f8c:	+--|-- bra.s 17fe8 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17f8e:	|  '-> clr.l -(sp)
   17f90:	|      move.l 40(sp),-(sp)
   17f94:	|      jsr 179cc <__eqsf2>
   17f9a:	|      addq.l #8,sp
   17f9c:	|      tst.l d0
   17f9e:	|  ,-- bne.s 17fba <atan2f+0x17a>
   17fa0:	|  |   clr.l -(sp)
   17fa2:	|  |   move.l 36(sp),-(sp)
   17fa6:	|  |   jsr 17c4c <__gtsf2>
   17fac:	|  |   addq.l #8,sp
   17fae:	|  |   tst.l d0
   17fb0:	|  +-- ble.s 17fba <atan2f+0x17a>
        return PI / 2;
   17fb2:	|  |   move.l #1070141403,d0
   17fb8:	+--|-- bra.s 17fe8 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17fba:	|  '-> clr.l -(sp)
   17fbc:	|      move.l 40(sp),-(sp)
   17fc0:	|      jsr 179cc <__eqsf2>
   17fc6:	|      addq.l #8,sp
   17fc8:	|      tst.l d0
   17fca:	|  ,-- bne.s 17fe6 <atan2f+0x1a6>
   17fcc:	|  |   clr.l -(sp)
   17fce:	|  |   move.l 36(sp),-(sp)
   17fd2:	|  |   jsr 17d06 <__ltsf2>
   17fd8:	|  |   addq.l #8,sp
   17fda:	|  |   tst.l d0
   17fdc:	|  +-- bge.s 17fe6 <atan2f+0x1a6>
        return -PI / 2;
   17fde:	|  |   move.l #-1077342245,d0
   17fe4:	+--|-- bra.s 17fe8 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17fe6:	|  '-> moveq #0,d0
    }
}
   17fe8:	'----> movea.l (sp)+,a6
   17fea:	       lea 24(sp),sp
   17fee:	       rts

00017ff0 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17ff0:	lea -24(sp),sp
   17ff4:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17ff6:	move.l 32(sp),20(sp)
   17ffc:	move.l 36(sp),24(sp)
   18002:	move.l 1cea6 <MathIeeeDoubTransBase>,d0
   18008:	movea.l d0,a6
   1800a:	move.l 20(sp),d0
   1800e:	move.l 24(sp),d1
   18012:	jsr -96(a6)
   18016:	move.l d0,4(sp)
   1801a:	move.l d1,8(sp)
   1801e:	move.l 4(sp),12(sp)
   18024:	move.l 8(sp),16(sp)
   1802a:	move.l 12(sp),d0
   1802e:	move.l 16(sp),d1
}
   18032:	movea.l (sp)+,a6
   18034:	lea 24(sp),sp
   18038:	rts

0001803a <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   1803a:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   1803e:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   18042:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   18046:	mulu.w 8(sp),d1
	addw	d1, d0
   1804a:	add.w d1,d0
	swap	d0
   1804c:	swap d0
	clrw	d0
   1804e:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   18050:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   18054:	mulu.w 10(sp),d1
	addl	d1, d0
   18058:	add.l d1,d0
	rts
   1805a:	rts

0001805c <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   1805c:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   1805e:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   18062:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   18066:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   1806c:	   ,-- bcc.s 18084 <__udivsi3+0x28>
	movel	d0, d2
   1806e:	   |   move.l d0,d2
	clrw	d2
   18070:	   |   clr.w d2
	swap	d2
   18072:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   18074:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   18076:	   |   move.w d2,d0
	swap	d0
   18078:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   1807a:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   1807e:	   |   divu.w d1,d2
	movew	d2, d0
   18080:	   |   move.w d2,d0
	jra	6f
   18082:	,--|-- bra.s 180b4 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   18084:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   18086:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   18088:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   1808a:	|  |   cmpi.l #65536,d1
	jcc	4b
   18090:	|  '-- bcc.s 18086 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   18092:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   18094:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   1809a:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   1809c:	|      mulu.w d0,d1
	swap	d2
   1809e:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   180a0:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   180a2:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   180a4:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   180a6:	|  ,-- bne.s 180b2 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   180a8:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   180aa:	|  +-- bcs.s 180b2 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   180ac:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   180b0:	+--|-- bls.s 180b4 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   180b2:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   180b4:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   180b6:	       rts

000180b8 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   180b8:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   180ba:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   180bc:	    move.l 12(sp),d1
	jpl	1f
   180c0:	,-- bpl.s 180c6 <__divsi3+0xe>
	negl	d1
   180c2:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   180c4:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   180c6:	'-> move.l 8(sp),d0
	jpl	2f
   180ca:	,-- bpl.s 180d0 <__divsi3+0x18>
	negl	d0
   180cc:	|   neg.l d0
	negb	d2
   180ce:	|   neg.b d2

2:	movel	d1, sp@-
   180d0:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   180d2:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   180d4:	    jsr 1805c <__udivsi3>
	addql	#8, sp
   180da:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   180dc:	    tst.b d2
	jpl	3f
   180de:	,-- bpl.s 180e2 <__divsi3+0x2a>
	negl	d0
   180e0:	|   neg.l d0

3:	movel	sp@+, d2
   180e2:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   180e4:	    rts

000180e6 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   180e6:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   180ea:	move.l 4(sp),d0
	movel	d1, sp@-
   180ee:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   180f0:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   180f2:	jsr 180b8 <__divsi3>
	addql	#8, sp
   180f8:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   180fa:	move.l 8(sp),d1
	movel	d1, sp@-
   180fe:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   18100:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   18102:	jsr 1803a <__mulsi3>
	addql	#8, sp
   18108:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   1810a:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1810e:	sub.l d0,d1
	movel	d1, d0
   18110:	move.l d1,d0
	rts
   18112:	rts

00018114 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   18114:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   18118:	move.l 4(sp),d0
	movel	d1, sp@-
   1811c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1811e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   18120:	jsr 1805c <__udivsi3>
	addql	#8, sp
   18126:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   18128:	move.l 8(sp),d1
	movel	d1, sp@-
   1812c:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   1812e:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   18130:	jsr 1803a <__mulsi3>
	addql	#8, sp
   18136:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   18138:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1813c:	sub.l d0,d1
	movel	d1, d0
   1813e:	move.l d1,d0
	rts
   18140:	rts

00018142 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   18142:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   18144:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   18148:	jsr -516(a6)
    move.l (sp)+, a6
   1814c:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   1814e:	rts

00018150 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   18150:	move.b d0,(a3)+
	rts
   18152:	rts
