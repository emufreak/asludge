
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #116149,d0
       8:	       subi.l #116149,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   ,-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	,--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1c5b5 <__fini_array_end>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  '-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	'----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #116149,d0
      40:	       subi.l #116149,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   ,-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	,--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1c5b5 <__fini_array_end>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  '-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	'----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 817e <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #116149,d0
      7e:	       subi.l #116149,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   ,-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	,--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1c5b5 <__fini_array_end>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  '-> tst.l 4(sp)
      ae:	'----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 13f24 <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1cd66 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   ,-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	,--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  '-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13f3c <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	'----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1c5b6 <allowAnyFilename>,d0
     124:	,-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 13f24 <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1cd66 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 ,-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  ,--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              '-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     ,----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  ,--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  ,-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  ,----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  ,-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  '--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  '-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        '-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  '----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  '-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	'--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   '----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  ,-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	,-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 '-> move.w 1c5b6 <allowAnyFilename>,d0
     316:	|  ,----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 13f24 <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1cd66 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              ,-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17fbe <PutChar+0x4>
     35c:	|  |              |   jsr 17518 <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              '-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     ,----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  ,--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        ,-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  ,-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     '-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     ,-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  ,--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  '-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  '--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     '----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  '----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  '-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  '----------------> clr.l 20(sp)
     648:	|              ,----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           ,--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  ,-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  '-> addq.l #1,20(sp)
     66e:	|           |  '----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           '-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	'-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1cd6e <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1cd6e <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1cd6e <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1cd6e <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1cd6e <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1cd6e <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1cd6e <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	,-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17fe8 <PutChar+0x2e>
     834:	|   jsr 17518 <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	'-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1cd6e <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	,-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 18004 <PutChar+0x4a>
     8a6:	|   jsr 17518 <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	'-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	,-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	'-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1cd6e <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	,-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	'-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1cd6e <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1cd6e <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1cd6e <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1cd6e <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1cd6e <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1cd6e <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1cd6e <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1cd66 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      ,-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	,-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     '-> clr.l 32(sp)
     b50:	|     ,-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  ,--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1cd6e <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  '-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  '----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	'-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 13f24 <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   ,-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	,--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1cd6e <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  '-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	'----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1cc60 <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	,-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1cc60 <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1cc60 <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1cc60 <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1cc60 <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1cd26 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1cc60 <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1cc60 <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1cd22 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1cc60 <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1cc60 <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 14ea <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	'-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1cc60 <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 9abc <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1cc60 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1cc64 <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1cc68 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 2e48 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int x1, int y1, int x2, int y2) {
     e0e:	          lea -48(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 1802c <PutChar+0x72>
     e1a:	          jsr 17518 <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1cc7c <CstBackDrop>,d0
     e28:	      ,-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 18045 <PutChar+0x8b>
     e30:	      |   jsr 17518 <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	,-----|-- bra.w 10c2 <CstBlankScreen+0x2b4>
  }  

  CstPaletteLoaded = 0;
     e3c:	|     '-> clr.w 1cc76 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,40(sp)
  //custom->color[0] = 0xf00;


  WaitBlit();
     e4a:	|         move.l 1cd72 <GfxBase>,d0
     e50:	|         movea.l d0,a6
     e52:	|         jsr -228(a6)

  UWORD width = (x2 - x1)/8;
     e56:	|         move.l 64(sp),d0
     e5a:	|         sub.l 56(sp),d0
     e5e:	|     ,-- bpl.s e62 <CstBlankScreen+0x54>
     e60:	|     |   addq.l #7,d0
     e62:	|     '-> asr.l #3,d0
     e64:	|         move.w d0,38(sp)
  UWORD height = (y2 - y1);
     e68:	|         move.l 68(sp),d0
     e6c:	|         move.l 60(sp),d1
     e70:	|         movea.w d0,a0
     e72:	|         suba.w d1,a0
     e74:	|         move.w a0,36(sp)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e78:	|         movea.l 40(sp),a0
     e7c:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e82:	|         movea.l 40(sp),a0
     e86:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e8c:	|         movea.l 40(sp),a0
     e90:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e96:	|         movea.l 40(sp),a0
     e9a:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     ea0:	|         movea.l 40(sp),a0
     ea4:	|         move.w #0,96(a0)
  custom->bltdmod = 40 - width;
     eaa:	|         moveq #40,d0
     eac:	|         sub.w 38(sp),d0
     eb0:	|         movea.l 40(sp),a0
     eb4:	|         move.w d0,102(a0)
  custom->bltcon1 = 0;
     eb8:	|         movea.l 40(sp),a0
     ebc:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     ec2:	|         movea.l 40(sp),a0
     ec6:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ecc:	|         move.l 1cc7c <CstBackDrop>,d0
     ed2:	|         move.l d0,48(sp)
  bltdpt += x1/8 + y1*40;
     ed6:	|         move.l 56(sp),d0
     eda:	|     ,-- bpl.s ede <CstBlankScreen+0xd0>
     edc:	|     |   addq.l #7,d0
     ede:	|     '-> asr.l #3,d0
     ee0:	|         movea.l d0,a0
     ee2:	|         move.l 60(sp),d1
     ee6:	|         move.l d1,d0
     ee8:	|         add.l d0,d0
     eea:	|         add.l d0,d0
     eec:	|         add.l d1,d0
     eee:	|         lsl.l #3,d0
     ef0:	|         add.l a0,d0
     ef2:	|         add.l d0,48(sp)

  UWORD bltsize = height*64+width/2;    
     ef6:	|         move.w 36(sp),d0
     efa:	|         move.w d0,d1
     efc:	|         lsl.w #6,d1
     efe:	|         move.w 38(sp),d0
     f02:	|         lsr.w #1,d0
     f04:	|         movea.w d1,a0
     f06:	|         adda.w d0,a0
     f08:	|         move.w a0,34(sp)
  UWORD blitsize = width*height;
     f0c:	|         move.w 38(sp),d0
     f10:	|         muls.w 36(sp),d0
     f14:	|         move.w d0,32(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     f18:	|         pea 18073 <PutChar+0xb9>
     f1e:	|         jsr 17518 <KPrintF>
     f24:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     f26:	|         clr.l 44(sp)
     f2a:	|     ,-- bra.s f5a <CstBlankScreen+0x14c>
  {            
    custom->bltdpt = (APTR) bltdpt;
     f2c:	|  ,--|-> move.l 48(sp),d0
     f30:	|  |  |   movea.l 40(sp),a0
     f34:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f38:	|  |  |   movea.l 40(sp),a0
     f3c:	|  |  |   move.w 34(sp),88(a0)
    WaitBlit();
     f42:	|  |  |   move.l 1cd72 <GfxBase>,d0
     f48:	|  |  |   movea.l d0,a6
     f4a:	|  |  |   jsr -228(a6)
    bltdpt += 40*256;
     f4e:	|  |  |   addi.l #10240,48(sp)
  for(int i2=0;i2<5;i2++)
     f56:	|  |  |   addq.l #1,44(sp)
     f5a:	|  |  '-> moveq #4,d0
     f5c:	|  |      cmp.l 44(sp),d0
     f60:	|  '----- bge.s f2c <CstBlankScreen+0x11e>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f62:	|         pea 18093 <PutChar+0xd9>
     f68:	|         jsr 17518 <KPrintF>
     f6e:	|         addq.l #4,sp

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
     f70:	|         move.l 1cc96 <CstCleanupQueueDrawBuffer>,28(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
     f78:	|         moveq #20,d0
     f7a:	|         move.l d0,24(sp)
     f7e:	|         clr.l 20(sp)
     f82:	|         move.l 1cd66 <SysBase>,d0
     f88:	|         movea.l d0,a6
     f8a:	|         move.l 24(sp),d0
     f8e:	|         move.l 20(sp),d1
     f92:	|         jsr -684(a6)
     f96:	|         move.l d0,16(sp)
     f9a:	|         move.l 16(sp),d0
     f9e:	|         move.l d0,1cc96 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
     fa4:	|         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
     faa:	|         move.l 28(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = x1;
     fb0:	|         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
     fb6:	|         move.l 56(sp),d0
     fba:	|         move.w d0,(a0)
  CstCleanupQueueDrawBuffer->y = y1;
     fbc:	|         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
     fc2:	|         move.l 60(sp),d0
     fc6:	|         move.w d0,2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
     fca:	|         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
     fd0:	|         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = width/16;
     fd4:	|         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
     fda:	|         move.w 38(sp),d0
     fde:	|         lsr.w #4,d0
     fe0:	|         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = height;
     fe4:	|         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
     fea:	|         move.w 36(sp),10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = x1/8;;
     ff0:	|         move.l 56(sp),d0
     ff4:	|     ,-- bpl.s ff8 <CstBlankScreen+0x1ea>
     ff6:	|     |   addq.l #7,d0
     ff8:	|     '-> asr.l #3,d0
     ffa:	|         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    1000:	|         move.l d0,d0
    1002:	|         move.w d0,12(a0)
  CstCleanupQueueDrawBuffer->starty = y1;
    1006:	|         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    100c:	|         move.l 60(sp),d0
    1010:	|         move.w d0,14(a0)

  next = CstCleanupQueueViewBuffer;
    1014:	|         move.l 1cc92 <CstCleanupQueueViewBuffer>,28(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    101c:	|         moveq #20,d0
    101e:	|         move.l d0,12(sp)
    1022:	|         clr.l 8(sp)
    1026:	|         move.l 1cd66 <SysBase>,d0
    102c:	|         movea.l d0,a6
    102e:	|         move.l 12(sp),d0
    1032:	|         move.l 8(sp),d1
    1036:	|         jsr -684(a6)
    103a:	|         move.l d0,4(sp)
    103e:	|         move.l 4(sp),d0
    1042:	|         move.l d0,1cc92 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1048:	|         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    104e:	|         move.l 28(sp),16(a0)
  CstCleanupQueueViewBuffer->x = x1;
    1054:	|         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    105a:	|         move.l 56(sp),d0
    105e:	|         move.w d0,(a0)
  CstCleanupQueueViewBuffer->y = y1;
    1060:	|         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    1066:	|         move.l 60(sp),d0
    106a:	|         move.w d0,2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    106e:	|         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    1074:	|         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = width/16;
    1078:	|         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    107e:	|         move.w 38(sp),d0
    1082:	|         lsr.w #4,d0
    1084:	|         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = height;
    1088:	|         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    108e:	|         move.w 36(sp),10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = x1/8;
    1094:	|         move.l 56(sp),d0
    1098:	|     ,-- bpl.s 109c <CstBlankScreen+0x28e>
    109a:	|     |   addq.l #7,d0
    109c:	|     '-> asr.l #3,d0
    109e:	|         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    10a4:	|         move.l d0,d0
    10a6:	|         move.w d0,12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    10aa:	|         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    10b0:	|         clr.w 14(a0)

  KPrintF("CstBlankScreen: end\n");
    10b4:	|         pea 180b3 <PutChar+0xf9>
    10ba:	|         jsr 17518 <KPrintF>
    10c0:	|         addq.l #4,sp

  //custom->color[0] = 0x000;	
}
    10c2:	'-------> movea.l (sp)+,a6
    10c4:	          lea 48(sp),sp
    10c8:	          rts

000010ca <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
    10ca:	       lea -52(sp),sp
    10ce:	       move.l a6,-(sp)
    10d0:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
    10d2:	       move.l #400,32(sp)
    10da:	       moveq #2,d0
    10dc:	       move.l d0,28(sp)
    10e0:	       move.l 1cd66 <SysBase>,d0
    10e6:	       movea.l d0,a6
    10e8:	       move.l 32(sp),d0
    10ec:	       move.l 28(sp),d1
    10f0:	       jsr -198(a6)
    10f4:	       move.l d0,24(sp)
    10f8:	       move.l 24(sp),d0
    10fc:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1100:	   ,-- bne.s 112a <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1102:	   |   pea 28 <_start+0x28>
    1106:	   |   pea 180c8 <PutChar+0x10e>
    110c:	   |   jsr 17518 <KPrintF>
    1112:	   |   addq.l #8,sp
    Exit(1);
    1114:	   |   moveq #1,d1
    1116:	   |   move.l d1,16(sp)
    111a:	   |   move.l 1cd6e <DOSBase>,d0
    1120:	   |   movea.l d0,a6
    1122:	   |   move.l 16(sp),d1
    1126:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    112a:	   '-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1130:	       move.l 56(sp),1ccaa <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    1138:	       move.l #116152,52(sp)
  for(int i=0; i<16;i++)
    1140:	       clr.l 48(sp)
    1144:	   ,-- bra.s 116a <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    1146:	,--|-> move.l 52(sp),d1
    114a:	|  |   move.l d1,d2
    114c:	|  |   addq.l #4,d2
    114e:	|  |   move.l d2,52(sp)
    1152:	|  |   move.l 56(sp),d0
    1156:	|  |   move.l d0,d2
    1158:	|  |   addq.l #4,d2
    115a:	|  |   move.l d2,56(sp)
    115e:	|  |   movea.l d1,a0
    1160:	|  |   move.l (a0),d1
    1162:	|  |   movea.l d0,a0
    1164:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    1166:	|  |   addq.l #1,48(sp)
    116a:	|  '-> moveq #15,d0
    116c:	|      cmp.l 48(sp),d0
    1170:	'----- bge.s 1146 <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1172:	       move.l #116216,52(sp)

  for(int i=0; i<12;i++)
    117a:	       clr.l 44(sp)
    117e:	   ,-- bra.s 11a4 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1180:	,--|-> move.l 52(sp),d1
    1184:	|  |   move.l d1,d2
    1186:	|  |   addq.l #4,d2
    1188:	|  |   move.l d2,52(sp)
    118c:	|  |   move.l 56(sp),d0
    1190:	|  |   move.l d0,d2
    1192:	|  |   addq.l #4,d2
    1194:	|  |   move.l d2,56(sp)
    1198:	|  |   movea.l d1,a0
    119a:	|  |   move.l (a0),d1
    119c:	|  |   movea.l d0,a0
    119e:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    11a0:	|  |   addq.l #1,44(sp)
    11a4:	|  '-> moveq #11,d0
    11a6:	|      cmp.l 44(sp),d0
    11aa:	'----- bge.s 1180 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    11ac:	       move.l #116264,52(sp)
  for(int i=0; i<10;i++)
    11b4:	       clr.l 40(sp)
    11b8:	   ,-- bra.s 11de <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    11ba:	,--|-> move.l 52(sp),d1
    11be:	|  |   move.l d1,d2
    11c0:	|  |   addq.l #4,d2
    11c2:	|  |   move.l d2,52(sp)
    11c6:	|  |   move.l 56(sp),d0
    11ca:	|  |   move.l d0,d2
    11cc:	|  |   addq.l #4,d2
    11ce:	|  |   move.l d2,56(sp)
    11d2:	|  |   movea.l d1,a0
    11d4:	|  |   move.l (a0),d1
    11d6:	|  |   movea.l d0,a0
    11d8:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    11da:	|  |   addq.l #1,40(sp)
    11de:	|  '-> moveq #9,d0
    11e0:	|      cmp.l 40(sp),d0
    11e4:	'----- bge.s 11ba <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    11e6:	       move.l #116304,52(sp)
  CstClColor = (UWORD *) cl;
    11ee:	       move.l 56(sp),1cca2 <CstClColor>
  for(int i=0; i<32;i++)
    11f6:	       clr.l 36(sp)
    11fa:	   ,-- bra.s 1220 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    11fc:	,--|-> move.l 52(sp),d1
    1200:	|  |   move.l d1,d2
    1202:	|  |   addq.l #4,d2
    1204:	|  |   move.l d2,52(sp)
    1208:	|  |   move.l 56(sp),d0
    120c:	|  |   move.l d0,d2
    120e:	|  |   addq.l #4,d2
    1210:	|  |   move.l d2,56(sp)
    1214:	|  |   movea.l d1,a0
    1216:	|  |   move.l (a0),d1
    1218:	|  |   movea.l d0,a0
    121a:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    121c:	|  |   addq.l #1,36(sp)
    1220:	|  '-> moveq #31,d0
    1222:	|      cmp.l 36(sp),d0
    1226:	'----- bge.s 11fc <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    1228:	       moveq #40,d1
    122a:	       cmp.l 64(sp),d1
    122e:	   ,-- bge.s 128c <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1230:	   |   moveq #-40,d2
    1232:	   |   add.l 64(sp),d2
    1236:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    123a:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1240:	   |   move.l 8(sp),d0
    1244:	   |   move.l d0,d1
    1246:	   |   addq.l #2,d1
    1248:	   |   move.l d1,8(sp)
    124c:	   |   movea.l d0,a0
    124e:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1252:	   |   move.l 8(sp),d0
    1256:	   |   move.l d0,d1
    1258:	   |   addq.l #2,d1
    125a:	   |   move.l d1,8(sp)
    125e:	   |   move.l 12(sp),d1
    1262:	   |   movea.l d0,a0
    1264:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    1266:	   |   move.l 8(sp),d0
    126a:	   |   move.l d0,d1
    126c:	   |   addq.l #2,d1
    126e:	   |   move.l d1,8(sp)
    1272:	   |   movea.l d0,a0
    1274:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    1278:	   |   move.l 8(sp),d0
    127c:	   |   move.l d0,d1
    127e:	   |   addq.l #2,d1
    1280:	   |   move.l d1,8(sp)
    1284:	   |   move.l 12(sp),d1
    1288:	   |   movea.l d0,a0
    128a:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    128c:	   '-> move.l 56(sp),d0
    1290:	       move.l d0,d1
    1292:	       addq.l #4,d1
    1294:	       move.l d1,56(sp)
    1298:	       moveq #-2,d2
    129a:	       movea.l d0,a0
    129c:	       move.l d2,(a0)
  return (UWORD *) retval;  
    129e:	       move.l 20(sp),d0
}
    12a2:	       move.l (sp)+,d2
    12a4:	       movea.l (sp)+,a6
    12a6:	       lea 52(sp),sp
    12aa:	       rts

000012ac <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    12ac:	                lea -40(sp),sp
    12b0:	                move.l a6,-(sp)
    12b2:	                move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    12b4:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    12bc:	                pea 18103 <PutChar+0x149>
    12c2:	                jsr 17518 <KPrintF>
    12c8:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    12ca:	                move.l 1cc9a <CstBackDropBufferApplyStart>,d0
    12d0:	                move.l d0,1cc9e <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    12d6:	                move.l 1cc9a <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    12de:	                movea.l 44(sp),a0
    12e2:	                move.w (a0),d0
    12e4:	,-------------- beq.w 14de <CstDisplayBackDrop+0x232>
    12e8:	|               move.l 1cc8e <CstDrawBuffer>,d0
    12ee:	+-------------- beq.w 14de <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    12f2:	|               move.l 1cd72 <GfxBase>,d0
    12f8:	|               movea.l d0,a6
    12fa:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    12fe:	|               movea.l 16(sp),a0
    1302:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    1308:	|               movea.l 16(sp),a0
    130c:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1312:	|               movea.l 16(sp),a0
    1316:	|               move.w #2544,64(a0)
  
  while(*cursor)
    131c:	|     ,-------- bra.w 1484 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1320:	|  ,--|-------> move.l 44(sp),d0
    1324:	|  |  |         move.l d0,d1
    1326:	|  |  |         addq.l #2,d1
    1328:	|  |  |         move.l d1,44(sp)
    132c:	|  |  |         movea.l d0,a0
    132e:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1332:	|  |  |         move.l 44(sp),d0
    1336:	|  |  |         move.l d0,d1
    1338:	|  |  |         addq.l #2,d1
    133a:	|  |  |         move.l d1,44(sp)
    133e:	|  |  |         movea.l d0,a0
    1340:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1344:	|  |  |         move.l 44(sp),d0
    1348:	|  |  |         move.l d0,d1
    134a:	|  |  |         addq.l #2,d1
    134c:	|  |  |         move.l d1,44(sp)
    1350:	|  |  |         movea.l d0,a0
    1352:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    1356:	|  |  |         move.l 44(sp),d0
    135a:	|  |  |         move.l d0,d1
    135c:	|  |  |         addq.l #2,d1
    135e:	|  |  |         move.l d1,44(sp)
    1362:	|  |  |         movea.l d0,a0
    1364:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    1368:	|  |  |         move.l 1ccba <winWidth>,d0
    136e:	|  |  |         lsr.l #3,d0
    1370:	|  |  |         move.l d0,d1
    1372:	|  |  |         move.w 14(sp),d0
    1376:	|  |  |         add.w d0,d0
    1378:	|  |  |         sub.w d0,d1
    137a:	|  |  |         movea.l 16(sp),a0
    137e:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1382:	|  |  |         move.l 1ccba <winWidth>,d0
    1388:	|  |  |         lsr.l #3,d0
    138a:	|  |  |         move.l d0,d1
    138c:	|  |  |         move.w 14(sp),d0
    1390:	|  |  |         add.w d0,d0
    1392:	|  |  |         sub.w d0,d1
    1394:	|  |  |         movea.l 16(sp),a0
    1398:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    139c:	|  |  |         moveq #0,d0
    139e:	|  |  |         move.w 8(sp),d0
    13a2:	|  |  |         move.l 1ccba <winWidth>,d1
    13a8:	|  |  |         move.l d1,-(sp)
    13aa:	|  |  |         move.l d0,-(sp)
    13ac:	|  |  |         jsr 17ea4 <__mulsi3>
    13b2:	|  |  |         addq.l #8,sp
    13b4:	|  |  |         move.l d0,d1
    13b6:	|  |  |         lsr.l #3,d1
    13b8:	|  |  |         move.l 1cc7c <CstBackDrop>,d0
    13be:	|  |  |         add.l d0,d1
    13c0:	|  |  |         moveq #0,d0
    13c2:	|  |  |         move.w 10(sp),d0
    13c6:	|  |  |         move.l d1,d2
    13c8:	|  |  |         add.l d0,d2
    13ca:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    13ce:	|  |  |         moveq #0,d0
    13d0:	|  |  |         move.w 8(sp),d0
    13d4:	|  |  |         move.l 1ccba <winWidth>,d1
    13da:	|  |  |         move.l d1,-(sp)
    13dc:	|  |  |         move.l d0,-(sp)
    13de:	|  |  |         jsr 17ea4 <__mulsi3>
    13e4:	|  |  |         addq.l #8,sp
    13e6:	|  |  |         move.l d0,d1
    13e8:	|  |  |         lsr.l #3,d1
    13ea:	|  |  |         move.l 1cc8e <CstDrawBuffer>,d0
    13f0:	|  |  |         add.l d0,d1
    13f2:	|  |  |         moveq #0,d0
    13f4:	|  |  |         move.w 10(sp),d0
    13f8:	|  |  |         move.l d1,d2
    13fa:	|  |  |         add.l d0,d2
    13fc:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1400:	|  |  |         clr.l 32(sp)
    1404:	|  |  |     ,-- bra.s 147c <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    1406:	|  |  |  ,--|-> move.l 40(sp),d0
    140a:	|  |  |  |  |   movea.l 16(sp),a0
    140e:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1412:	|  |  |  |  |   move.l 36(sp),d0
    1416:	|  |  |  |  |   movea.l 16(sp),a0
    141a:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    141e:	|  |  |  |  |   move.w 12(sp),d0
    1422:	|  |  |  |  |   lsl.w #6,d0
    1424:	|  |  |  |  |   add.w 14(sp),d0
    1428:	|  |  |  |  |   movea.l 16(sp),a0
    142c:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1430:	|  |  |  |  |   move.l 1ccba <winWidth>,d0
    1436:	|  |  |  |  |   lsr.l #3,d0
    1438:	|  |  |  |  |   move.l 1ccbe <winHeight>,d1
    143e:	|  |  |  |  |   move.l d1,-(sp)
    1440:	|  |  |  |  |   move.l d0,-(sp)
    1442:	|  |  |  |  |   jsr 17ea4 <__mulsi3>
    1448:	|  |  |  |  |   addq.l #8,sp
    144a:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    144e:	|  |  |  |  |   move.l 1ccba <winWidth>,d0
    1454:	|  |  |  |  |   lsr.l #3,d0
    1456:	|  |  |  |  |   move.l 1ccbe <winHeight>,d1
    145c:	|  |  |  |  |   move.l d1,-(sp)
    145e:	|  |  |  |  |   move.l d0,-(sp)
    1460:	|  |  |  |  |   jsr 17ea4 <__mulsi3>
    1466:	|  |  |  |  |   addq.l #8,sp
    1468:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    146c:	|  |  |  |  |   move.l 1cd72 <GfxBase>,d0
    1472:	|  |  |  |  |   movea.l d0,a6
    1474:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1478:	|  |  |  |  |   addq.l #1,32(sp)
    147c:	|  |  |  |  '-> moveq #4,d0
    147e:	|  |  |  |      cmp.l 32(sp),d0
    1482:	|  |  |  '----- bge.s 1406 <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1484:	|  |  '-------> movea.l 44(sp),a0
    1488:	|  |            move.w (a0),d0
    148a:	|  '----------- bne.w 1320 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    148e:	|               move.l 1cca6 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    1496:	|               move.l 1cca2 <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    149e:	|               clr.l 20(sp)
    14a2:	|           ,-- bra.s 14d4 <CstDisplayBackDrop+0x228>
    *tmp++;
    14a4:	|        ,--|-> move.l 24(sp),d0
    14a8:	|        |  |   move.l d0,d1
    14aa:	|        |  |   addq.l #2,d1
    14ac:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    14b0:	|        |  |   move.l 28(sp),d1
    14b4:	|        |  |   move.l d1,d2
    14b6:	|        |  |   addq.l #2,d2
    14b8:	|        |  |   move.l d2,28(sp)
    14bc:	|        |  |   move.l 24(sp),d0
    14c0:	|        |  |   move.l d0,d2
    14c2:	|        |  |   addq.l #2,d2
    14c4:	|        |  |   move.l d2,24(sp)
    14c8:	|        |  |   movea.l d1,a0
    14ca:	|        |  |   move.w (a0),d1
    14cc:	|        |  |   movea.l d0,a0
    14ce:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    14d0:	|        |  |   addq.l #1,20(sp)
    14d4:	|        |  '-> moveq #31,d0
    14d6:	|        |      cmp.l 20(sp),d0
    14da:	|        '----- bge.s 14a4 <CstDisplayBackDrop+0x1f8>
    14dc:	|           ,-- bra.s 14e0 <CstDisplayBackDrop+0x234>
    return;
    14de:	'-----------|-> nop
  }
}
    14e0:	            '-> move.l (sp)+,d2
    14e2:	                movea.l (sp)+,a6
    14e4:	                lea 40(sp),sp
    14e8:	                rts

000014ea <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    14ea:	lea -20(sp),sp
    14ee:	movea.l 24(sp),a0
    14f2:	move.l 28(sp),d1
    14f6:	move.l 32(sp),d0
    14fa:	movea.w a0,a0
    14fc:	move.w a0,4(sp)
    1500:	move.w d1,d1
    1502:	move.w d1,2(sp)
    1506:	move.w d0,d0
    1508:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    150a:	move.w 2(sp),d0
    150e:	movea.l 36(sp),a0
    1512:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1514:	move.w 4(sp),d0
    1518:	lsr.w #1,d0
    151a:	movea.l 36(sp),a0
    151e:	addq.l #1,a0
    1520:	move.l d0,d0
    1522:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1524:	move.w 2(sp),d1
    1528:	move.w (sp),d0
    152a:	movea.l 36(sp),a0
    152e:	addq.l #2,a0
    1530:	add.b d1,d0
    1532:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1534:	move.w 4(sp),d0
    1538:	andi.w #1,d0
    153c:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1540:	move.w 2(sp),d0
    1544:	add.w (sp),d0
    1546:	move.w d0,d0
    1548:	andi.l #65535,d0
    154e:	asr.l #7,d0
    1550:	move.l d0,d0
    1552:	move.w d0,d1
    1554:	andi.w #2,d1
    1558:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    155c:	moveq #0,d0
    155e:	move.w 2(sp),d0
    1562:	asr.l #6,d0
    1564:	move.l d0,d0
    1566:	move.w d0,d1
    1568:	andi.w #4,d1
    156c:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1570:	move.w 18(sp),d1
    1574:	move.w 16(sp),d0
    1578:	add.b d0,d1
    157a:	move.w 14(sp),d0
    157e:	movea.l 36(sp),a0
    1582:	addq.l #3,a0
    1584:	add.b d1,d0
    1586:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    1588:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    158e:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1594:	move.l 10(sp),d0
    1598:	clr.w d0
    159a:	swap d0
    159c:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    15a0:	move.l 1ccaa <CstClCursor>,d0
    15a6:	movea.l d0,a0
    15a8:	addq.l #2,a0
    15aa:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    15ae:	move.l 1ccaa <CstClCursor>,d0
    15b4:	movea.l d0,a0
    15b6:	addq.l #6,a0
    15b8:	move.w 8(sp),(a0)

}
    15bc:	nop
    15be:	lea 20(sp),sp
    15c2:	rts

000015c4 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    15c4:	    move.w 1cc88 <CstApplyBackDropCounter>,d0
    15ca:	,-- beq.s 15e0 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    15cc:	|   jsr 12ac <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    15d2:	|   move.w 1cc88 <CstApplyBackDropCounter>,d0
    15d8:	|   subq.w #1,d0
    15da:	|   move.w d0,1cc88 <CstApplyBackDropCounter>
  }    
}
    15e0:	'-> nop
    15e2:	    rts

000015e4 <CstDrawZBuffer>:

__attribute__((optimize("Ofast"))) 
UBYTE *CstDrawZBuffer( struct sprite *sprite, struct zBufferData *zbuffer, WORD x, WORD y) 
{
    15e4:	                                                             subq.l #8,sp
    15e6:	                                                             movem.l d2-d7/a2-a6,-(sp)
    15ea:	                                                             movea.l 56(sp),a3
    15ee:	                                                             movea.l 60(sp),a2
    15f2:	                                                             move.l 64(sp),d2
    15f6:	                                                             move.l 68(sp),d7
    15fa:	                                                             movea.w d2,a4
    15fc:	                                                             move.w d7,50(sp)
  //In Case nothing needs to be done return sprite mask without changes
       
  WORD zbufferset = 0;

  #ifdef EMULATOR
    debug_register_bitmap(CstZBufferResult, "SpriteMask", sprite->width, sprite->height, 1, 0);
    1600:	                                                             clr.l -(sp)
    1602:	                                                             pea 1 <_start+0x1>
    1606:	                                                             movea.w 6(a3),a0
    160a:	                                                             move.l a0,-(sp)
    160c:	                                                             movea.w 2(a3),a0
    1610:	                                                             move.l a0,-(sp)
    1612:	                                                             pea 1811f <PutChar+0x165>
    1618:	                                                             move.l 1ccae <CstZBufferResult>,-(sp)
    161e:	                                                             lea 17600 <debug_register_bitmap>,a5
    1624:	                                                             jsr (a5)
    debug_register_bitmap(CstZBufferWork, "tmbpuffer", sprite->width+16, sprite->height, 1, 0);
    1626:	                                                             clr.l -(sp)
    1628:	                                                             pea 1 <_start+0x1>
    162c:	                                                             movea.w 6(a3),a0
    1630:	                                                             move.l a0,-(sp)
    1632:	                                                             move.w 2(a3),d0
    1636:	                                                             addi.w #16,d0
    163a:	                                                             movea.w d0,a0
    163c:	                                                             move.l a0,-(sp)
    163e:	                                                             pea 1812a <PutChar+0x170>
    1644:	                                                             move.l 1ccb2 <CstZBufferWork>,-(sp)
    164a:	                                                             jsr (a5)
  #endif    

  while(zbuffer) 
    164c:	                                                             lea 48(sp),sp
    1650:	                                                             cmpa.w #0,a2
    1654:	,----------------------------------------------------------- beq.w 1af0 <CstDrawZBuffer+0x50c>
  {              
    WORD spritex1oncanvas = x;
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1658:	|                                                            move.w d2,48(sp)
    165c:	|                                                            move.l (a3),d2
    WORD spritey1oncanvas = y;
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    165e:	|                                                            movea.l 4(a3),a5
  WORD zbufferset = 0;
    1662:	|                                                            clr.w d0
    UWORD spritey2oncanvas = spritey1oncanvas + sprite->height;
    1664:	|                       ,----------------------------------> move.w a5,d3
    1666:	|                       |                                    add.w d7,d3
    BOOL zbufferfromleft = FALSE;
    BOOL zbufferfrombottom = FALSE;
    BOOL zbufferfromtop = FALSE;
  
    //Sprite will be drawn behind the zBuffer. We need to do something
    if(spritey2oncanvas < zbuffer->yz) 
    1668:	|                       |                                    andi.l #65535,d3
    166e:	|                       |                                    cmp.l 16(a2),d3
    1672:	|                       |  ,-------------------------------- bge.w 180c <CstDrawZBuffer+0x228>
    WORD zbufferx1oncanvas = zbuffer->topx;
    1676:	|                       |  |                                 move.l 8(a2),d6
    WORD zbuffery1oncanvas = zbuffer->topy;
    167a:	|                       |  |                                 move.l 12(a2),d5
    WORD zbufferx2oncanvas = zbufferx1oncanvas + zbuffer->width;
    167e:	|                       |  |                                 move.w d6,d0
    1680:	|                       |  |                                 add.w 2(a2),d0
    WORD zbuffery2oncanvas = zbuffery1oncanvas + zbuffer->height;
    1684:	|                       |  |                                 move.w 6(a2),d4
    1688:	|                       |  |                                 add.w d5,d4
    {    
      zbufferset = 1;

      //sprite ------------x1+++++++++++++++++++x2-----------------*/
      /*zbuffer-------------------x1++++++++++?????????------------*/      
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    168a:	|                       |  |                                 cmp.w a4,d6
    168c:	|                    ,--|--|-------------------------------- bge.w 1984 <CstDrawZBuffer+0x3a0>
        zbufferfromright = TRUE;
      //sprite -------------------------x1++++??????-------*/
      /*zbuffer-------------------x1+++++++++++x2----------*/  
      else if(spritex1oncanvas > zbufferx1oncanvas && spritex1oncanvas < zbufferx2oncanvas)
    1690:	|                    |  |  |                                 cmp.w a4,d0
    1692:	|        ,-----------|--|--|-------------------------------- ble.w 180a <CstDrawZBuffer+0x226>
        zbufferfromleft = TRUE;       

      //Overlap on X-Axis. Now Check y-axis
      if( zbufferfromleft || zbufferfromright)         
      {
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1696:	|        |           |  |  |                                 move.w 50(sp),d0
    169a:	|        |           |  |  |                                 cmp.w d0,d5
    169c:	|        |     ,-----|--|--|-------------------------------- blt.w 1ad0 <CstDrawZBuffer+0x4ec>
    16a0:	|        |     |     |  |  |                                 movea.w d5,a0
        else if(spritey1oncanvas > zbuffery1oncanvas && spritey1oncanvas < zbuffery2oncanvas)
          zbufferfromtop = TRUE;       
      }

      //Overlap on both Axis
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    16a2:	|        |     |     |  |  |                                 cmpa.l d3,a0
    16a4:	|        +-----|-----|--|--|-------------------------------- bge.w 180a <CstDrawZBuffer+0x226>
        {    
          //Get Distance R
          /*sprite  ------------x1++++++++++?????????-------------------------*/    
          //zbuffer ------------------x1+++++++++++++++++++x2-----------------*/             
          
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    16a8:	|        |     |     |  |  |                                 move.w 48(sp),d0
    16ac:	|        |     |     |  |  |                                 sub.w d6,d0
          xdiffbyte = (xdiff / 16) * 2;          
          xdiffrest = (xdiff - xdiffbyte * 8);    
    16ae:	|        |     |     |  |  |                                 move.w d0,d6
    16b0:	|        |     |     |  |  |                                 andi.w #15,d6
    16b4:	|        |     |     |  |  |                                 movea.w d6,a5

                         
          bytewidth = (sprite->width/16)*2;
    16b6:	|        |     |     |  |  |                                 tst.l d2
    16b8:	|        |  ,--|-----|--|--|-------------------------------- blt.w 182c <CstDrawZBuffer+0x248>
    16bc:	|        |  |  |  ,--|--|--|-------------------------------> asr.l #4,d2
    16be:	|        |  |  |  |  |  |  |                                 add.w d2,d2
          if(sprite->height == 60) {
            sprite->height = 60;
          }
          
          custom->bltafwm = 0xffff;
    16c0:	|        |  |  |  |  |  |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb35e8>
          custom->bltalwm = 0xffff;                      
    16c8:	|        |  |  |  |  |  |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb35ea>
          custom->bltcon1 = 0;          
    16d0:	|        |  |  |  |  |  |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb35e6>

          if (xdiffrest) {
            bytewidth += 2; 
            //xdiffbyte += -2;            
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
            WaitBlit();   
    16d8:	|        |  |  |  |  |  |  |                                 lea 1cd72 <GfxBase>,a0
    16de:	|        |  |  |  |  |  |  |                                 movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    16e0:	|        |  |  |  |  |  |  |                                 lsr.w #4,d0
    16e2:	|        |  |  |  |  |  |  |                                 move.w d0,d6
    16e4:	|        |  |  |  |  |  |  |                                 add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    16e6:	|        |  |  |  |  |  |  |                                 andi.l #65535,d6
    16ec:	|        |  |  |  |  |  |  |                                 add.l 20(a2),d6
          if (xdiffrest) {
    16f0:	|        |  |  |  |  |  |  |                                 clr.w d0
    16f2:	|        |  |  |  |  |  |  |                                 cmp.w a5,d0
    16f4:	|        |  |  |  |  |  |  |           ,-------------------- beq.w 186c <CstDrawZBuffer+0x288>
            bytewidth += 2; 
    16f8:	|        |  |  |  |  |  |  |           |     ,-------------> addq.w #2,d2
            WaitBlit();   
    16fa:	|        |  |  |  |  |  |  |           |     |               jsr -228(a6)
            custom->bltdpt = CstZBufferWork;                
    16fe:	|        |  |  |  |  |  |  |           |     |               move.l 1ccb2 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
            custom->bltcon0 = (16 - xdiffrest) * 4096 + 0x9f0;              
    1708:	|        |  |  |  |  |  |  |           |     |               move.w a5,d0
    170a:	|        |  |  |  |  |  |  |           |     |               moveq #12,d1
    170c:	|        |  |  |  |  |  |  |           |     |               lsl.w d1,d0
    170e:	|        |  |  |  |  |  |  |           |     |               move.w #2544,d1
    1712:	|        |  |  |  |  |  |  |           |     |               sub.w d0,d1
    1714:	|        |  |  |  |  |  |  |           |     |               move.w d1,dff040 <gcc8_c_support.c.c60c1f2b+0xdb35e4>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    171a:	|        |  |  |  |  |  |  |           |     |               move.l (a2),d0
    171c:	|        |  |  |  |  |  |  |           |     |               move.l d0,d1
    171e:	|  ,-----|--|--|--|--|--|--|-----------|-----|-------------- bmi.w 1b8a <CstDrawZBuffer+0x5a6>
    1722:	|  |     |  |  |  |  |  |  |           |     |               asr.l #3,d1
    1724:	|  |     |  |  |  |  |  |  |           |     |               sub.w d2,d1
    1726:	|  |     |  |  |  |  |  |  |           |     |               move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3608>
            custom->bltdmod = 0;                                                            
    172c:	|  |     |  |  |  |  |  |  |           |     |               move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb360a>
        } 
        
        //Get Distance R
        //zbuffer ------------x1+++++++++++++++++++x2-----------------*/
        /*sprite--------------RRRRRRRRx1++++++++++?????????------------*/    
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    1734:	|  |  ,--|--|--|--|--|--|--|-----------|-----|-------------> move.w d7,d1
    1736:	|  |  |  |  |  |  |  |  |  |           |     |               sub.w d5,d1

        UWORD height;
        if( zbuffery2oncanvas > spritey2oncanvas) 
    1738:	|  |  |  |  |  |  |  |  |  |           |     |               movea.w d4,a0
    173a:	|  |  |  |  |  |  |  |  |  |           |     |               cmpa.l d3,a0
    173c:	|  |  |  |  |  |  |  |  |  |           |  ,--|-------------- ble.w 18ac <CstDrawZBuffer+0x2c8>
          height = sprite->height;
    1740:	|  |  |  |  |  |  |  |  |  |           |  |  |        ,----> move.l 4(a3),d4
        else
          height = zbuffery2oncanvas - spritey1oncanvas;

        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    1744:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.l d0,-(sp)
    1746:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      move.w d1,-(sp)
    1748:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      clr.w -(sp)
    174a:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      jsr 17ea4 <__mulsi3>
    1750:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      addq.l #8,sp
    1752:	|  |  |  |  |  |  |  |  |  |           |  |  |        |      tst.l d0
    1754:	|  |  |  |  |  |  |  |  |  |           |  |  |  ,-----|----- blt.w 18c2 <CstDrawZBuffer+0x2de>
    1758:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  ,-> asr.l #3,d0
    175a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.l d6,d0
    175c:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
        UWORD bltsize =  height*64+bytewidth/2;          
    1762:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsl.w #6,d4
    1764:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    1766:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   add.w d2,d4
    1768:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
       
        WaitBlit();
    176e:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   lea 1cd72 <GfxBase>,a0
    1774:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l (a0),a6
    1776:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   jsr -228(a6)

        custom->bltafwm = 0xffff;
    177a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb35e8>
        custom->bltalwm = 0xffff;
    1782:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb35ea>
        custom->bltamod = 2;
    178a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3608>
        custom->bltbmod = 0;
    1792:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3606>
        custom->bltdmod = 0;
    179a:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb360a>
        custom->bltcon0 = 0xd0c; //Copy A to D
    17a2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb35e4>
        custom->bltcon1 = 0;        
    17aa:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb35e6>

        custom->bltapt = (APTR) CstZBufferWork + 2;
    17b2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l 1ccb2 <CstZBufferWork>,d0
    17b8:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   addq.l #2,d0
    17ba:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    17c0:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l (a3),d2
    17c2:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   movea.l 4(a3),a5
    17c6:	|  |  |  |  |  |  |  |  |  |           |  |  |  |     |  |   move.l d2,d0
    17c8:	|  |  |  |  |  |  |  |  |  |     ,-----|--|--|--|-----|--|-- bmi.w 194c <CstDrawZBuffer+0x368>
    17cc:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  ,--|--|-> asr.l #3,d0
    17ce:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l a5,-(sp)
    17d0:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,-(sp)
    17d2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   jsr 17ea4 <__mulsi3>
    17d8:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   addq.l #8,sp
    17da:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d0,d1
    17dc:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    17de:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d1,d1
    17e0:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l d0,d1
    17e2:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   add.l 24(a3),d1
    17e6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb35f0>
        custom->bltdpt = (APTR) CstZBufferResult;
    17ec:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l 1ccae <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    17f6:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.w a5,d1
    17f8:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   lsl.w #6,d1
    17fa:	|  |  |  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |   move.l d2,d0
    17fc:	|  |  |  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|-- bmi.w 193a <CstDrawZBuffer+0x356>
    1800:	|  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|-> asr.l #4,d0
    1802:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d1,d0
    1804:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
      zbufferset = 1;
    180a:	|  |  |  >--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> moveq #1,d0

      }
    }
    zbuffer = zbuffer->nextPanel;
    180c:	|  |  |  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--|--|-> movea.l 24(a2),a2
  while(zbuffer) 
    1810:	|  |  |  |  |  |  |  |  |     |  |  |  |  |  |  |  |  |  |   cmpa.w #0,a2
    1814:	|  |  |  |  |  |  |  |  '-----|--|--|--|--|--|--|--|--|--|-- bne.w 1664 <CstDrawZBuffer+0x80>
  }
  
  if(zbufferset == 0)
    1818:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   tst.w d0
    181a:	+--|--|--|--|--|--|--|--------|--|--|--|--|--|--|--|--|--|-- beq.w 1af0 <CstDrawZBuffer+0x50c>
    custom->bltdpt = (APTR) CstZBufferResult;
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      

  }

  return CstZBufferResult;
    181e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.l 1ccae <CstZBufferResult>,d0

}
    1824:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1828:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    182a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   rts
          bytewidth = (sprite->width/16)*2;
    182c:	|  |  |  |  >--|--|--|--------|--|--|--|--|--|--|--|--|--|-> moveq #15,d1
    182e:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l d1,d2
    1830:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   asr.l #4,d2
    1832:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d2,d2
          custom->bltafwm = 0xffff;
    1834:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb35e8>
          custom->bltalwm = 0xffff;                      
    183c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb35ea>
          custom->bltcon1 = 0;          
    1844:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb35e6>
            WaitBlit();   
    184c:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lea 1cd72 <GfxBase>,a0
    1852:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
          xdiffbyte = (xdiff / 16) * 2;          
    1854:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   lsr.w #4,d0
    1856:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   move.w d0,d6
    1858:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.w d0,d6
            bltapt = (ULONG) zbuffer->bitplane + xdiffbyte;  
    185a:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   andi.l #65535,d6
    1860:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   add.l 20(a2),d6
          if (xdiffrest) {
    1864:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   clr.w d0
    1866:	|  |  |  |  |  |  |  |        |  |  |  |  |  |  |  |  |  |   cmp.w a5,d0
    1868:	|  |  |  |  |  |  |  |        |  |  |  |  |  '--|--|--|--|-- bne.w 16f8 <CstDrawZBuffer+0x114>
            WaitBlit();         
    186c:	|  |  |  |  |  |  |  |        |  |  |  '--|-----|--|--|--|-> jsr -228(a6)
            custom->bltdpt = CstZBufferWork + 2;       
    1870:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l 1ccb2 <CstZBufferWork>,d0
    1876:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   addq.l #2,d0
    1878:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
            custom->bltcon0 = 4096 + 0x9f0;              
    187e:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.w #6640,dff040 <gcc8_c_support.c.c60c1f2b+0xdb35e4>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1886:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l (a2),d0
    1888:	|  |  |  |  |  |  |  |        |  |  |     |     |  |  |  |   move.l d0,d1
    188a:	|  |  |  |  |  |  |  |  ,-----|--|--|-----|-----|--|--|--|-- bmi.w 1ba2 <CstDrawZBuffer+0x5be>
    188e:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   asr.l #3,d1
    1890:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   sub.w d2,d1
    1892:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3608>
            custom->bltdmod = 2;                                                            
    1898:	|  |  |  |  |  |  |  |  |     |  |  |     |     |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb360a>
        UWORD ydiff = spritey1oncanvas - zbuffery1oncanvas;
    18a0:	|  |  |  |  |  |  |  |  |  ,--|--|--|-----|-----|--|--|--|-> move.w d7,d1
    18a2:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   sub.w d5,d1
        if( zbuffery2oncanvas > spritey2oncanvas) 
    18a4:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   movea.w d4,a0
    18a6:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  |  |   cmpa.l d3,a0
    18a8:	|  |  |  |  |  |  |  |  |  |  |  |  |     |     |  |  '--|-- bgt.w 1740 <CstDrawZBuffer+0x15c>
          height = zbuffery2oncanvas - spritey1oncanvas;
    18ac:	|  |  |  |  |  |  |  |  |  |  |  |  |     '-----|--|-----|-> sub.w d7,d4
        custom->bltapt = (APTR) bltapt + ydiff*zbuffer->width/8; 
    18ae:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.l d0,-(sp)
    18b0:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   move.w d1,-(sp)
    18b2:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   clr.w -(sp)
    18b4:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   jsr 17ea4 <__mulsi3>
    18ba:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   addq.l #8,sp
    18bc:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     |   tst.l d0
    18be:	|  |  |  |  |  |  |  |  |  |  |  |  |           |  |     '-- bge.w 1758 <CstDrawZBuffer+0x174>
    18c2:	|  |  |  |  |  |  |  |  |  |  |  |  |           '--|-------> addq.l #7,d0
    18c4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         asr.l #3,d0
    18c6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.l d6,d0
    18c8:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
        UWORD bltsize =  height*64+bytewidth/2;          
    18ce:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsl.w #6,d4
    18d0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lsr.w #1,d2
        custom->bltsize = height*64+bytewidth/2;
    18d2:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         add.w d2,d4
    18d4:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w d4,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
        WaitBlit();
    18da:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         lea 1cd72 <GfxBase>,a0
    18e0:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l (a0),a6
    18e2:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         jsr -228(a6)
        custom->bltafwm = 0xffff;
    18e6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb35e8>
        custom->bltalwm = 0xffff;
    18ee:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb35ea>
        custom->bltamod = 2;
    18f6:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #2,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3608>
        custom->bltbmod = 0;
    18fe:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3606>
        custom->bltdmod = 0;
    1906:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb360a>
        custom->bltcon0 = 0xd0c; //Copy A to D
    190e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #3340,dff040 <gcc8_c_support.c.c60c1f2b+0xdb35e4>
        custom->bltcon1 = 0;        
    1916:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb35e6>
        custom->bltapt = (APTR) CstZBufferWork + 2;
    191e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l 1ccb2 <CstZBufferWork>,d0
    1924:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         addq.l #2,d0
    1926:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    192c:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l (a3),d2
    192e:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         movea.l 4(a3),a5
    1932:	|  |  |  |  |  |  |  |  |  |  |  |  |              |         move.l d2,d0
    1934:	|  |  |  |  |  |  |  |  |  |  |  |  |              '-------- bpl.w 17cc <CstDrawZBuffer+0x1e8>
    1938:	|  |  |  |  |  |  |  |  |  |  |  +--|----------------------- bra.s 194c <CstDrawZBuffer+0x368>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    193a:	|  |  |  |  |  |  |  |  |  |  >--|--|----------------------> moveq #15,d0
    193c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l d2,d0
    193e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        asr.l #4,d0
    1940:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.w d1,d0
    1942:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
    1948:	|  |  |  +--|--|--|--|--|--|--|--|--|----------------------- bra.w 180a <CstDrawZBuffer+0x226>
        custom->bltbpt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    194c:	|  |  |  |  |  |  |  |  |  |  |  '--|----------------------> addq.l #7,d0
    194e:	|  |  |  |  |  |  |  |  |  |  |     |                        asr.l #3,d0
    1950:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l a5,-(sp)
    1952:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,-(sp)
    1954:	|  |  |  |  |  |  |  |  |  |  |     |                        jsr 17ea4 <__mulsi3>
    195a:	|  |  |  |  |  |  |  |  |  |  |     |                        addq.l #8,sp
    195c:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d0,d1
    195e:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1960:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d1,d1
    1962:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l d0,d1
    1964:	|  |  |  |  |  |  |  |  |  |  |     |                        add.l 24(a3),d1
    1968:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d1,dff04c <gcc8_c_support.c.c60c1f2b+0xdb35f0>
        custom->bltdpt = (APTR) CstZBufferResult;
    196e:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l 1ccae <CstZBufferResult>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
        custom->bltsize = (sprite->height<<6)+sprite->width/16;  
    1978:	|  |  |  |  |  |  |  |  |  |  |     |                        move.w a5,d1
    197a:	|  |  |  |  |  |  |  |  |  |  |     |                        lsl.w #6,d1
    197c:	|  |  |  |  |  |  |  |  |  |  |     |                        move.l d2,d0
    197e:	|  |  |  |  |  |  |  |  |  |  |     '----------------------- bpl.w 1800 <CstDrawZBuffer+0x21c>
    1982:	|  |  |  |  |  |  |  |  |  |  '----------------------------- bra.s 193a <CstDrawZBuffer+0x356>
    UWORD spritex2oncanvas = spritex1oncanvas+sprite->width;
    1984:	|  |  |  |  |  |  |  '--|--|-------------------------------> move.w 48(sp),d1
    1988:	|  |  |  |  |  |  |     |  |                                 add.w d2,d1
      if(spritex1oncanvas <= zbufferx1oncanvas && spritex2oncanvas > zbufferx1oncanvas)
    198a:	|  |  |  |  |  |  |     |  |                                 andi.l #65535,d1
    1990:	|  |  |  |  |  |  |     |  |                                 movea.l d1,a6
    1992:	|  |  |  |  |  |  |     |  |                                 movea.w d6,a1
    1994:	|  |  |  |  |  |  |     |  |                                 cmpa.l d1,a1
    1996:	|  |  |  +--|--|--|-----|--|-------------------------------- bge.w 180a <CstDrawZBuffer+0x226>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    199a:	|  |  |  |  |  |  |     |  |                                 move.w 50(sp),d1
    199e:	|  |  |  |  |  |  |     |  |                                 cmp.w d1,d5
    19a0:	|  |  |  |  |  |  |     |  |           ,-------------------- bge.w 1aac <CstDrawZBuffer+0x4c8>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    19a4:	|  |  |  |  |  |  |     |  |           |                     cmp.w 50(sp),d4
    19a8:	|  |  |  +--|--|--|-----|--|-----------|-------------------- ble.w 180a <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    19ac:	|  |  |  |  |  |  |     |  |           |                     sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    19b0:	|  |  |  |  |  |  |     |  |           |                     move.w d6,d1
    19b2:	|  |  |  |  |  |  |     |  |           |                     lsr.w #4,d1
    19b4:	|  |  |  |  |  |  |     |  |           |                     movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    19b6:	|  |  |  |  |  |  |     |  |           |                     andi.w #15,d6
    19ba:	|  |  |  |  |  |  |     |  |           |                     move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    19be:	|  |  |  |  |  |  |     |  |           |                     tst.l d2
    19c0:	|  |  |  |  |  |  |     |  |        ,--|-------------------- blt.w 1a4a <CstDrawZBuffer+0x466>
    19c4:	|  |  |  |  |  |  |     |  |        |  |  ,----------------> asr.l #4,d2
    19c6:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.l #1,d2
    19c8:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    19ca:	|  |  |  |  |  |  |     |  |        |  |  |                  movea.w d0,a0
    19cc:	|  |  |  |  |  |  |     |  |        |  |  |                  cmpa.l a0,a6
    19ce:	|  |  |  |  |  |  |     |  |        |  |  |  ,-------------- bge.w 1a5c <CstDrawZBuffer+0x478>
            WaitBlit();  
    19d2:	|  |  |  |  |  |  |     |  |        |  |  |  |  ,----------> lea 1cd72 <GfxBase>,a0
    19d8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l (a0),a6
    19da:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            jsr -228(a6)
            custom->bltafwm = 0xffff;
    19de:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb35e8>
            custom->bltalwm = 0xffff;          
    19e6:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb35ea>
            custom->bltdpt = CstZBufferWork;        
    19ee:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l 1ccb2 <CstZBufferWork>,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
            custom->bltcon1 = 0;               
    19f8:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb35e6>
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a00:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            movea.l 20(a2),a0
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a04:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l (a2),d0
    1a06:	|  |  |  |  |  |  |     |  |        |  |  |  |  |            move.l d0,d1
    1a08:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     ,----- bmi.s 1a74 <CstDrawZBuffer+0x490>
    1a0a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      asr.l #3,d1
    1a0c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      movea.w d1,a6
    1a0e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      suba.w d2,a6
            if (xdiffrest) {
    1a10:	|  |  |  |  |  |  |     |  |        |  |  |  |  |     |      tst.w 46(sp)
    1a14:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  ,--|----- beq.s 1a82 <CstDrawZBuffer+0x49e>
              custom->bltcon0 = xdiffrest * 4096 + 0x9f0;              
    1a16:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  ,-> move.w 46(sp),d6
    1a1a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   moveq #12,d1
    1a1c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   lsl.w d1,d6
    1a1e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addi.w #2544,d6
    1a22:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w d6,dff040 <gcc8_c_support.c.c60c1f2b+0xdb35e4>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a28:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3608>
              custom->bltdmod = 0;                                                            
    1a2e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb360a>
              xdiffbyte += 2;                 
    1a36:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.w a5,d1
    1a38:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.w #1,d1
    1a3a:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a3c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   andi.l #65535,d1
    1a42:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   move.l a0,d6
    1a44:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   sub.l d1,d6
    1a46:	|  |  +--|--|--|--|-----|--|--------|--|--|--|--|--|--|--|-- bra.w 1734 <CstDrawZBuffer+0x150>
          bytewidth = (sprite->width/16)*2 + 2;
    1a4a:	|  |  |  |  |  |  |     |  |        >--|--|--|--|--|--|--|-> moveq #15,d6
    1a4c:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.l d6,d2
    1a4e:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   asr.l #4,d2
    1a50:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   addq.l #1,d2
    1a52:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   add.w d2,d2
          if( zbufferx2oncanvas > spritex2oncanvas)    
    1a54:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   movea.w d0,a0
    1a56:	|  |  |  |  |  |  |     |  |        |  |  |  |  |  |  |  |   cmpa.l a0,a6
    1a58:	|  |  |  |  |  |  |     |  |        |  |  |  |  '--|--|--|-- blt.w 19d2 <CstDrawZBuffer+0x3ee>
              KPrintF("Cstdrawzbuffer: Current version only supports zbuffer size equal to screen size");
    1a5c:	|  |  |  |  |  |  |     |  |        |  |  |  '-----|--|--|-> pea 18134 <PutChar+0x17a>
    1a62:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   jsr 17518 <KPrintF>
              return FALSE;
    1a68:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #4,sp
    1a6a:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   moveq #0,d0
}
    1a6c:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   movem.l (sp)+,d2-d7/a2-a6
    1a70:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   addq.l #8,sp
    1a72:	|  |  |  |  |  |  |     |  |        |  |  |        |  |  |   rts
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a74:	|  |  |  |  |  |  |     |  |        |  |  |        |  '--|-> addq.l #7,d1
    1a76:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   asr.l #3,d1
    1a78:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   movea.w d1,a6
    1a7a:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   suba.w d2,a6
            if (xdiffrest) {
    1a7c:	|  |  |  |  |  |  |     |  |        |  |  |        |     |   tst.w 46(sp)
    1a80:	|  |  |  |  |  |  |     |  |        |  |  |        |     '-- bne.s 1a16 <CstDrawZBuffer+0x432>
              custom->bltcon0 = 0x9f0;              
    1a82:	|  |  |  |  |  |  |     |  |        |  |  |        '-------> move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb35e4>
              custom->bltamod = zbuffer->width/8 - bytewidth;
    1a8a:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a6,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3608>
              custom->bltdmod = 0;                                                            
    1a90:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb360a>
              xdiffbyte += 2;                 
    1a98:	|  |  |  |  |  |  |     |  |        |  |  |                  move.w a5,d1
    1a9a:	|  |  |  |  |  |  |     |  |        |  |  |                  addq.w #1,d1
    1a9c:	|  |  |  |  |  |  |     |  |        |  |  |                  add.w d1,d1
              bltapt = (ULONG) zbuffer->bitplane - xdiffbyte;          
    1a9e:	|  |  |  |  |  |  |     |  |        |  |  |                  andi.l #65535,d1
    1aa4:	|  |  |  |  |  |  |     |  |        |  |  |                  move.l a0,d6
    1aa6:	|  |  |  |  |  |  |     |  |        |  |  |                  sub.l d1,d6
    1aa8:	|  |  +--|--|--|--|-----|--|--------|--|--|----------------- bra.w 1734 <CstDrawZBuffer+0x150>
        if(spritey1oncanvas <= zbuffery1oncanvas && spritey2oncanvas > zbuffery1oncanvas)
    1aac:	|  |  |  |  |  |  |     |  |        |  '--|----------------> movea.w d5,a0
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1aae:	|  |  |  |  |  |  |     |  |        |     |                  cmpa.l d3,a0
    1ab0:	|  |  |  +--|--|--|-----|--|--------|-----|----------------- bge.w 180a <CstDrawZBuffer+0x226>
          xdiff = zbufferx1oncanvas - spritex1oncanvas;
    1ab4:	|  |  |  |  |  |  |     |  |        |     |                  sub.w 48(sp),d6
          xdiffbyte = (xdiff / 16) * 2;          
    1ab8:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,d1
    1aba:	|  |  |  |  |  |  |     |  |        |     |                  lsr.w #4,d1
    1abc:	|  |  |  |  |  |  |     |  |        |     |                  movea.w d1,a5
          xdiffrest = (xdiff - xdiffbyte * 8);       
    1abe:	|  |  |  |  |  |  |     |  |        |     |                  andi.w #15,d6
    1ac2:	|  |  |  |  |  |  |     |  |        |     |                  move.w d6,46(sp)
          bytewidth = (sprite->width/16)*2 + 2;
    1ac6:	|  |  |  |  |  |  |     |  |        |     |                  tst.l d2
    1ac8:	|  |  |  |  |  |  |     |  |        |     '----------------- bge.w 19c4 <CstDrawZBuffer+0x3e0>
    1acc:	|  |  |  |  |  |  |     |  |        '----------------------- bra.w 1a4a <CstDrawZBuffer+0x466>
      if( (zbufferfromright || zbufferfromleft) && (zbufferfrombottom || zbufferfromtop))
    1ad0:	|  |  |  |  |  '--|-----|--|-------------------------------> cmp.w 50(sp),d4
    1ad4:	|  |  |  '--|-----|-----|--|-------------------------------- ble.w 180a <CstDrawZBuffer+0x226>
          xdiff = spritex1oncanvas - zbufferx1oncanvas;
    1ad8:	|  |  |     |     |     |  |                                 move.w 48(sp),d0
    1adc:	|  |  |     |     |     |  |                                 sub.w d6,d0
          xdiffrest = (xdiff - xdiffbyte * 8);    
    1ade:	|  |  |     |     |     |  |                                 move.w d0,d6
    1ae0:	|  |  |     |     |     |  |                                 andi.w #15,d6
    1ae4:	|  |  |     |     |     |  |                                 movea.w d6,a5
          bytewidth = (sprite->width/16)*2;
    1ae6:	|  |  |     |     |     |  |                                 tst.l d2
    1ae8:	|  |  |     |     '-----|--|-------------------------------- bge.w 16bc <CstDrawZBuffer+0xd8>
    1aec:	|  |  |     '-----------|--|-------------------------------- bra.w 182c <CstDrawZBuffer+0x248>
    WaitBlit();
    1af0:	'--|--|-----------------|--|-------------------------------> movea.l 1cd72 <GfxBase>,a6
    1af6:	   |  |                 |  |                                 jsr -228(a6)
    custom->bltafwm = 0xffff;
    1afa:	   |  |                 |  |                                 move.w #-1,dff044 <gcc8_c_support.c.c60c1f2b+0xdb35e8>
    custom->bltalwm = 0xffff;
    1b02:	   |  |                 |  |                                 move.w #-1,dff046 <gcc8_c_support.c.c60c1f2b+0xdb35ea>
    custom->bltamod = 0;
    1b0a:	   |  |                 |  |                                 move.w #0,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3608>
    custom->bltbmod = 0;
    1b12:	   |  |                 |  |                                 move.w #0,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3606>
    custom->bltcmod = 0;
    1b1a:	   |  |                 |  |                                 move.w #0,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3604>
    custom->bltdmod = 0;
    1b22:	   |  |                 |  |                                 move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb360a>
    custom->bltcon0 = 0x9f0; //Copy A to D
    1b2a:	   |  |                 |  |                                 move.w #2544,dff040 <gcc8_c_support.c.c60c1f2b+0xdb35e4>
    custom->bltcon1 = 0;        
    1b32:	   |  |                 |  |                                 move.w #0,dff042 <gcc8_c_support.c.c60c1f2b+0xdb35e6>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1b3a:	   |  |                 |  |                                 move.l (a3),d2
    1b3c:	   |  |                 |  |                                 move.l 4(a3),d3
    1b40:	   |  |                 |  |                                 move.l d2,d0
    1b42:	   |  |                 |  |                       ,-------- bmi.w 1bca <CstDrawZBuffer+0x5e6>
    1b46:	   |  |                 |  |                       |         asr.l #3,d0
    1b48:	   |  |                 |  |                       |         move.l d3,-(sp)
    1b4a:	   |  |                 |  |                       |         move.l d0,-(sp)
    1b4c:	   |  |                 |  |                       |         jsr 17ea4 <__mulsi3>
    1b52:	   |  |                 |  |                       |         addq.l #8,sp
    1b54:	   |  |                 |  |                       |         move.l d0,d1
    1b56:	   |  |                 |  |                       |         add.l d0,d1
    1b58:	   |  |                 |  |                       |         add.l d1,d1
    1b5a:	   |  |                 |  |                       |         add.l d1,d0
    1b5c:	   |  |                 |  |                       |         add.l 24(a3),d0
    1b60:	   |  |                 |  |                       |         move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
    custom->bltdpt = (APTR) CstZBufferResult;
    1b66:	   |  |                 |  |                       |         move.l 1ccae <CstZBufferResult>,d0
    1b6c:	   |  |                 |  |                       |         move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1b72:	   |  |                 |  |                       |         lsl.w #6,d3
    1b74:	   |  |                 |  |                       |         tst.l d2
    1b76:	   |  |                 |  |                    ,--|-------- blt.s 1bba <CstDrawZBuffer+0x5d6>
    1b78:	   |  |                 |  |                    |  |  ,----> asr.l #4,d2
    1b7a:	   |  |                 |  |                    |  |  |      add.w d2,d3
    1b7c:	   |  |                 |  |                    |  |  |      move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
}
    1b82:	   |  |                 |  |                    |  |  |  ,-> movem.l (sp)+,d2-d7/a2-a6
    1b86:	   |  |                 |  |                    |  |  |  |   addq.l #8,sp
    1b88:	   |  |                 |  |                    |  |  |  |   rts
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1b8a:	   '--|-----------------|--|--------------------|--|--|--|-> addq.l #7,d1
    1b8c:	      |                 |  |                    |  |  |  |   asr.l #3,d1
    1b8e:	      |                 |  |                    |  |  |  |   sub.w d2,d1
    1b90:	      |                 |  |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3608>
            custom->bltdmod = 0;                                                            
    1b96:	      |                 |  |                    |  |  |  |   move.w #0,dff066 <gcc8_c_support.c.c60c1f2b+0xdb360a>
    1b9e:	      '-----------------|--|--------------------|--|--|--|-- bra.w 1734 <CstDrawZBuffer+0x150>
            custom->bltamod = zbuffer->width/8 - bytewidth;
    1ba2:	                        '--|--------------------|--|--|--|-> addq.l #7,d1
    1ba4:	                           |                    |  |  |  |   asr.l #3,d1
    1ba6:	                           |                    |  |  |  |   sub.w d2,d1
    1ba8:	                           |                    |  |  |  |   move.w d1,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3608>
            custom->bltdmod = 2;                                                            
    1bae:	                           |                    |  |  |  |   move.w #2,dff066 <gcc8_c_support.c.c60c1f2b+0xdb360a>
    1bb6:	                           '--------------------|--|--|--|-- bra.w 18a0 <CstDrawZBuffer+0x2bc>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1bba:	                                                >--|--|--|-> moveq #15,d1
    1bbc:	                                                |  |  |  |   add.l d1,d2
    1bbe:	                                                |  |  |  |   asr.l #4,d2
    1bc0:	                                                |  |  |  |   add.w d2,d3
    1bc2:	                                                |  |  |  |   move.w d3,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
  return CstZBufferResult;
    1bc8:	                                                |  |  |  '-- bra.s 1b82 <CstDrawZBuffer+0x59e>
    custom->bltapt = (APTR) ((ULONG) sprite->data)+(sprite->width/8)*sprite->height*5;
    1bca:	                                                |  '--|----> addq.l #7,d0
    1bcc:	                                                |     |      asr.l #3,d0
    1bce:	                                                |     |      move.l d3,-(sp)
    1bd0:	                                                |     |      move.l d0,-(sp)
    1bd2:	                                                |     |      jsr 17ea4 <__mulsi3>
    1bd8:	                                                |     |      addq.l #8,sp
    1bda:	                                                |     |      move.l d0,d1
    1bdc:	                                                |     |      add.l d0,d1
    1bde:	                                                |     |      add.l d1,d1
    1be0:	                                                |     |      add.l d1,d0
    1be2:	                                                |     |      add.l 24(a3),d0
    1be6:	                                                |     |      move.l d0,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
    custom->bltdpt = (APTR) CstZBufferResult;
    1bec:	                                                |     |      move.l 1ccae <CstZBufferResult>,d0
    1bf2:	                                                |     |      move.l d0,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
    custom->bltsize = (sprite->height<<6)+sprite->width/16;      
    1bf8:	                                                |     |      lsl.w #6,d3
    1bfa:	                                                |     |      tst.l d2
    1bfc:	                                                |     '----- bge.w 1b78 <CstDrawZBuffer+0x594>
    1c00:	                                                '----------- bra.s 1bba <CstDrawZBuffer+0x5d6>

00001c02 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    1c02:	    lea -20(sp),sp
    1c06:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    1c08:	    move.l 1cc8e <CstDrawBuffer>,d0
    1c0e:	,-- beq.s 1c28 <CstFreeBuffer+0x26>
    1c10:	|   move.l 1cc8e <CstDrawBuffer>,20(sp)
    1c18:	|   move.l 1cd66 <SysBase>,d0
    1c1e:	|   movea.l d0,a6
    1c20:	|   movea.l 20(sp),a1
    1c24:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    1c28:	'-> move.l 1cc8a <CstViewBuffer>,d0
    1c2e:	,-- beq.s 1c48 <CstFreeBuffer+0x46>
    1c30:	|   move.l 1cc8a <CstViewBuffer>,16(sp)
    1c38:	|   move.l 1cd66 <SysBase>,d0
    1c3e:	|   movea.l d0,a6
    1c40:	|   movea.l 16(sp),a1
    1c44:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    1c48:	'-> move.l 1cc84 <CstCopperList>,d0
    1c4e:	,-- beq.s 1c68 <CstFreeBuffer+0x66>
    1c50:	|   move.l 1cc84 <CstCopperList>,12(sp)
    1c58:	|   move.l 1cd66 <SysBase>,d0
    1c5e:	|   movea.l d0,a6
    1c60:	|   movea.l 12(sp),a1
    1c64:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    1c68:	'-> move.l 1cc7c <CstBackDrop>,d0
    1c6e:	,-- beq.s 1c88 <CstFreeBuffer+0x86>
    1c70:	|   move.l 1cc7c <CstBackDrop>,8(sp)
    1c78:	|   move.l 1cd66 <SysBase>,d0
    1c7e:	|   movea.l d0,a6
    1c80:	|   movea.l 8(sp),a1
    1c84:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    1c88:	'-> move.l 1cc80 <CstBackDropBackup>,d0
    1c8e:	,-- beq.s 1ca8 <CstFreeBuffer+0xa6>
    1c90:	|   move.l 1cc80 <CstBackDropBackup>,4(sp)
    1c98:	|   move.l 1cd66 <SysBase>,d0
    1c9e:	|   movea.l d0,a6
    1ca0:	|   movea.l 4(sp),a1
    1ca4:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    1ca8:	'-> clr.l 1cc8e <CstDrawBuffer>
  CstViewBuffer = NULL;
    1cae:	    clr.l 1cc8a <CstViewBuffer>
  CstCopperList = NULL;
    1cb4:	    clr.l 1cc84 <CstCopperList>
  CstBackDrop = NULL;
    1cba:	    clr.l 1cc7c <CstBackDrop>

}
    1cc0:	    nop
    1cc2:	    movea.l (sp)+,a6
    1cc4:	    lea 20(sp),sp
    1cc8:	    rts

00001cca <CstFreeze>:



void CstFreeze( ) {
    1cca:	       lea -64(sp),sp
    1cce:	       move.l a6,-(sp)
    1cd0:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    1cd2:	       pea 18184 <PutChar+0x1ca>
    1cd8:	       jsr 17518 <KPrintF>
    1cde:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    1ce0:	       move.l 1ccba <winWidth>,d0
    1ce6:	       lsr.l #3,d0
    1ce8:	       move.l d0,d1
    1cea:	       move.l 1ccbe <winHeight>,d0
    1cf0:	       move.l d0,d0
    1cf2:	       muls.w d0,d1
    1cf4:	       move.w d1,d0
    1cf6:	       add.w d0,d0
    1cf8:	       add.w d0,d0
    1cfa:	       move.w d0,d2
    1cfc:	       add.w d1,d2
    1cfe:	       move.w d2,54(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1d02:	       move.l #14675968,50(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    1d0a:	       moveq #0,d0
    1d0c:	       move.w 54(sp),d0
    1d10:	       move.l d0,46(sp)
    1d14:	       clr.l 42(sp)
    1d18:	       move.l 1cd66 <SysBase>,d0
    1d1e:	       movea.l d0,a6
    1d20:	       move.l 46(sp),d0
    1d24:	       move.l 42(sp),d1
    1d28:	       jsr -684(a6)
    1d2c:	       move.l d0,38(sp)
    1d30:	       move.l 38(sp),d0
    1d34:	       move.l d0,1cc80 <CstBackDropBackup>
  if( !CstBackDropBackup)
    1d3a:	       move.l 1cc80 <CstBackDropBackup>,d0
    1d40:	   ,-- bne.s 1d50 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1d42:	   |   pea 181ab <PutChar+0x1f1>
    1d48:	   |   jsr 17518 <KPrintF>
    1d4e:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1d50:	   '-> move.l 1ccbe <winHeight>,d0
    1d56:	       move.l d0,d0
    1d58:	       movea.w d0,a1
    1d5a:	       move.l 1ccba <winWidth>,d0
    1d60:	       move.l d0,d0
    1d62:	       movea.w d0,a0
    1d64:	       move.l 1cc80 <CstBackDropBackup>,d0
    1d6a:	       clr.l -(sp)
    1d6c:	       pea 5 <_start+0x5>
    1d70:	       move.l a1,-(sp)
    1d72:	       move.l a0,-(sp)
    1d74:	       pea 181e3 <PutChar+0x229>
    1d7a:	       move.l d0,-(sp)
    1d7c:	       jsr 17600 <debug_register_bitmap>
    1d82:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    1d86:	       move.l 1cc7c <CstBackDrop>,68(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1d8e:	       move.l 1cc80 <CstBackDropBackup>,64(sp)
  for(int i=0;i<size/4;i++) 
    1d96:	       clr.l 60(sp)
    1d9a:	   ,-- bra.s 1dc0 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1d9c:	,--|-> move.l 68(sp),d1
    1da0:	|  |   move.l d1,d0
    1da2:	|  |   addq.l #4,d0
    1da4:	|  |   move.l d0,68(sp)
    1da8:	|  |   move.l 64(sp),d0
    1dac:	|  |   move.l d0,d2
    1dae:	|  |   addq.l #4,d2
    1db0:	|  |   move.l d2,64(sp)
    1db4:	|  |   movea.l d1,a0
    1db6:	|  |   move.l (a0),d1
    1db8:	|  |   movea.l d0,a0
    1dba:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1dbc:	|  |   addq.l #1,60(sp)
    1dc0:	|  '-> move.w 54(sp),d0
    1dc4:	|      lsr.w #2,d0
    1dc6:	|      move.w d0,d0
    1dc8:	|      andi.l #65535,d0
    1dce:	|      cmp.l 60(sp),d0
    1dd2:	'----- bgt.s 1d9c <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    1dd4:	       move.l 1cc8a <CstViewBuffer>,68(sp)
  dst = (ULONG *) CstBackDrop;
    1ddc:	       move.l 1cc7c <CstBackDrop>,64(sp)

  for(int i=0;i<size/4;i++) 
    1de4:	       clr.l 56(sp)
    1de8:	   ,-- bra.s 1e0e <CstFreeze+0x144>
  {
    *dst++ = *src++;
    1dea:	,--|-> move.l 68(sp),d1
    1dee:	|  |   move.l d1,d0
    1df0:	|  |   addq.l #4,d0
    1df2:	|  |   move.l d0,68(sp)
    1df6:	|  |   move.l 64(sp),d0
    1dfa:	|  |   move.l d0,d2
    1dfc:	|  |   addq.l #4,d2
    1dfe:	|  |   move.l d2,64(sp)
    1e02:	|  |   movea.l d1,a0
    1e04:	|  |   move.l (a0),d1
    1e06:	|  |   movea.l d0,a0
    1e08:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    1e0a:	|  |   addq.l #1,56(sp)
    1e0e:	|  '-> move.w 54(sp),d0
    1e12:	|      lsr.w #2,d0
    1e14:	|      move.w d0,d0
    1e16:	|      andi.l #65535,d0
    1e1c:	|      cmp.l 56(sp),d0
    1e20:	'----- bgt.s 1dea <CstFreeze+0x120>
  }

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    1e22:	       move.l 1cc96 <CstCleanupQueueDrawBuffer>,34(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1e2a:	       moveq #20,d0
    1e2c:	       move.l d0,30(sp)
    1e30:	       clr.l 26(sp)
    1e34:	       move.l 1cd66 <SysBase>,d0
    1e3a:	       movea.l d0,a6
    1e3c:	       move.l 30(sp),d0
    1e40:	       move.l 26(sp),d1
    1e44:	       jsr -684(a6)
    1e48:	       move.l d0,22(sp)
    1e4c:	       move.l 22(sp),d0
    1e50:	       move.l d0,1cc96 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    1e56:	       movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    1e5c:	       move.l 34(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    1e62:	       movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    1e68:	       clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    1e6a:	       movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    1e70:	       clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    1e74:	       movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    1e7a:	       clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    1e7e:	       move.l 1ccba <winWidth>,d0
    1e84:	       lsr.l #4,d0
    1e86:	       movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    1e8c:	       move.l d0,d0
    1e8e:	       move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    1e92:	       move.l 1ccbe <winHeight>,d0
    1e98:	       movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    1e9e:	       move.l d0,d0
    1ea0:	       move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    1ea4:	       movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    1eaa:	       clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    1eae:	       movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    1eb4:	       clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    1eb8:	       move.l 1cc92 <CstCleanupQueueViewBuffer>,34(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    1ec0:	       moveq #20,d2
    1ec2:	       move.l d2,18(sp)
    1ec6:	       clr.l 14(sp)
    1eca:	       move.l 1cd66 <SysBase>,d0
    1ed0:	       movea.l d0,a6
    1ed2:	       move.l 18(sp),d0
    1ed6:	       move.l 14(sp),d1
    1eda:	       jsr -684(a6)
    1ede:	       move.l d0,10(sp)
    1ee2:	       move.l 10(sp),d0
    1ee6:	       move.l d0,1cc92 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    1eec:	       movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    1ef2:	       move.l 34(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    1ef8:	       movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    1efe:	       clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    1f00:	       movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    1f06:	       clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    1f0a:	       movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    1f10:	       clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    1f14:	       move.l 1ccba <winWidth>,d0
    1f1a:	       lsr.l #4,d0
    1f1c:	       movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    1f22:	       move.l d0,d0
    1f24:	       move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    1f28:	       move.l 1ccbe <winHeight>,d0
    1f2e:	       movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    1f34:	       move.l d0,d0
    1f36:	       move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    1f3a:	       movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    1f40:	       clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    1f44:	       movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    1f4a:	       clr.w 14(a0)

  KPrintF("CstFreeze: Finished");
    1f4e:	       pea 181f2 <PutChar+0x238>
    1f54:	       jsr 17518 <KPrintF>
    1f5a:	       addq.l #4,sp

}  
    1f5c:	       nop
    1f5e:	       move.l (sp)+,d2
    1f60:	       movea.l (sp)+,a6
    1f62:	       lea 64(sp),sp
    1f66:	       rts

00001f68 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1f68:	             lea -172(sp),sp
    1f6c:	             movem.l d2-d4/a6,-(sp)


	KPrintF("CstLoadBackDrop: Loading of Background started");
    1f70:	             pea 18206 <PutChar+0x24c>
    1f76:	             jsr 17518 <KPrintF>
    1f7c:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    1f7e:	             move.l 192(sp),-(sp)
    1f82:	             jsr 6bc <get2bytes>
    1f88:	             addq.l #4,sp
    1f8a:	             move.w d0,162(sp)
  UWORD height = get2bytes(fp);  
    1f8e:	             move.l 192(sp),-(sp)
    1f92:	             jsr 6bc <get2bytes>
    1f98:	             addq.l #4,sp
    1f9a:	             move.w d0,160(sp)

  UWORD widthbyteslayer = width/8;
    1f9e:	             move.w 162(sp),d0
    1fa2:	             lsr.w #3,d0
    1fa4:	             move.w d0,158(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    1fa8:	             move.w 158(sp),d0
    1fac:	             lsr.w #1,d0
    1fae:	             move.w d0,156(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    1fb2:	             move.l 1ccba <winWidth>,d0
    1fb8:	             lsr.l #3,d0
    1fba:	             move.w d0,154(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    1fbe:	             move.w 158(sp),d0
    1fc2:	             muls.w 160(sp),d0
    1fc6:	             move.w d0,152(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    1fca:	             move.w 152(sp),d1
    1fce:	             move.w d1,d0
    1fd0:	             add.w d0,d0
    1fd2:	             add.w d0,d0
    1fd4:	             move.w d0,d2
    1fd6:	             add.w d1,d2
    1fd8:	             move.w d2,150(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    1fdc:	             move.w 1cc76 <CstPaletteLoaded>,d0
    1fe2:	,----------- bne.w 207c <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1fe6:	|            move.w #384,148(sp)

    if(CstPalette) {
    1fec:	|            move.l 1cca6 <CstPalette>,d0
    1ff2:	|        ,-- beq.s 200c <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1ff4:	|        |   move.l 1cca6 <CstPalette>,144(sp)
    1ffc:	|        |   move.l 1cd66 <SysBase>,d0
    2002:	|        |   movea.l d0,a6
    2004:	|        |   movea.l 144(sp),a1
    2008:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    200c:	|        '-> moveq #64,d0
    200e:	|            move.l d0,140(sp)
    2012:	|            clr.l 136(sp)
    2016:	|            move.l 1cd66 <SysBase>,d0
    201c:	|            movea.l d0,a6
    201e:	|            move.l 140(sp),d0
    2022:	|            move.l 136(sp),d1
    2026:	|            jsr -684(a6)
    202a:	|            move.l d0,132(sp)
    202e:	|            move.l 132(sp),d0
    2032:	|            move.l d0,1cca6 <CstPalette>
    CstPaletteLoaded = 1;
    2038:	|            move.w #1,1cc76 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    2040:	|            move.l 1cca6 <CstPalette>,184(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    2048:	|            clr.l 180(sp)
    204c:	|        ,-- bra.s 2072 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    204e:	|     ,--|-> move.l 192(sp),-(sp)
    2052:	|     |  |   jsr 6bc <get2bytes>
    2058:	|     |  |   addq.l #4,sp
    205a:	|     |  |   move.l d0,d1
    205c:	|     |  |   move.l 184(sp),d0
    2060:	|     |  |   move.l d0,d2
    2062:	|     |  |   addq.l #2,d2
    2064:	|     |  |   move.l d2,184(sp)
    2068:	|     |  |   move.l d1,d1
    206a:	|     |  |   movea.l d0,a0
    206c:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    206e:	|     |  |   addq.l #1,180(sp)
    2072:	|     |  '-> moveq #31,d0
    2074:	|     |      cmp.l 180(sp),d0
    2078:	|     '----- bge.s 204e <CstLoadBackdrop+0xe6>
    207a:	|  ,-------- bra.s 209a <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    207c:	'--|-------> clr.l 176(sp)
    2080:	   |     ,-- bra.s 2092 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    2082:	   |  ,--|-> move.l 192(sp),-(sp)
    2086:	   |  |  |   jsr 6bc <get2bytes>
    208c:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    208e:	   |  |  |   addq.l #1,176(sp)
    2092:	   |  |  '-> moveq #31,d2
    2094:	   |  |      cmp.l 176(sp),d2
    2098:	   |  '----- bge.s 2082 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    209a:	   '-------> moveq #0,d0
    209c:	             move.w 150(sp),d0
    20a0:	             move.l d0,128(sp)
    20a4:	             moveq #2,d0
    20a6:	             move.l d0,124(sp)
    20aa:	             move.l 1cd66 <SysBase>,d0
    20b0:	             movea.l d0,a6
    20b2:	             move.l 128(sp),d0
    20b6:	             move.l 124(sp),d1
    20ba:	             jsr -684(a6)
    20be:	             move.l d0,120(sp)
    20c2:	             move.l 120(sp),d0
    20c6:	             move.l d0,116(sp)
  if( !tmpbuffer)
    20ca:	         ,-- bne.s 20da <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    20cc:	         |   pea 18235 <PutChar+0x27b>
    20d2:	         |   jsr 17518 <KPrintF>
    20d8:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    20da:	         '-> moveq #0,d0
    20dc:	             move.w 152(sp),d0
    20e0:	             move.l d0,112(sp)
    20e4:	             moveq #2,d2
    20e6:	             move.l d2,108(sp)
    20ea:	             move.l 1cd66 <SysBase>,d0
    20f0:	             movea.l d0,a6
    20f2:	             move.l 112(sp),d0
    20f6:	             move.l 108(sp),d1
    20fa:	             jsr -684(a6)
    20fe:	             move.l d0,104(sp)
    2102:	             move.l 104(sp),d0
    2106:	             move.l d0,100(sp)
  if( !tmpmask)
    210a:	         ,-- bne.s 211a <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    210c:	         |   pea 1826b <PutChar+0x2b1>
    2112:	         |   jsr 17518 <KPrintF>
    2118:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    211a:	         '-> move.w 160(sp),d0
    211e:	             movea.w d0,a1
    2120:	             move.w 162(sp),d0
    2124:	             movea.w d0,a0
    2126:	             clr.l -(sp)
    2128:	             pea 5 <_start+0x5>
    212c:	             move.l a1,-(sp)
    212e:	             move.l a0,-(sp)
    2130:	             pea 1829f <PutChar+0x2e5>
    2136:	             move.l 136(sp),-(sp)
    213a:	             jsr 17600 <debug_register_bitmap>
    2140:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    2144:	             move.w 160(sp),d0
    2148:	             movea.w d0,a1
    214a:	             move.w 162(sp),d0
    214e:	             movea.w d0,a0
    2150:	             clr.l -(sp)
    2152:	             pea 1 <_start+0x1>
    2156:	             move.l a1,-(sp)
    2158:	             move.l a0,-(sp)
    215a:	             pea 182ad <PutChar+0x2f3>
    2160:	             move.l 136(sp),-(sp)
    2164:	             jsr 17600 <debug_register_bitmap>
    216a:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    216e:	             move.l 192(sp),96(sp)
    2174:	             move.l 116(sp),92(sp)
    217a:	             moveq #2,d0
    217c:	             move.l d0,88(sp)
    2180:	             move.w 150(sp),d0
    2184:	             lsr.w #1,d0
    2186:	             move.w d0,d0
    2188:	             andi.l #65535,d0
    218e:	             move.l d0,84(sp)
    2192:	             move.l 1cd6e <DOSBase>,d0
    2198:	             movea.l d0,a6
    219a:	             move.l 96(sp),d1
    219e:	             move.l 92(sp),d2
    21a2:	             move.l 88(sp),d3
    21a6:	             move.l 84(sp),d4
    21aa:	             jsr -324(a6)
    21ae:	             move.l d0,80(sp)
    21b2:	             move.l 80(sp),d0
    21b6:	             move.w d0,78(sp)
  if(!count) {
    21ba:	         ,-- bne.s 21ce <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    21bc:	         |   pea 182b9 <PutChar+0x2ff>
    21c2:	         |   jsr 17518 <KPrintF>
    21c8:	         |   addq.l #4,sp
    return;
    21ca:	   ,-----|-- bra.w 24de <CstLoadBackdrop+0x576>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    21ce:	   |     '-> move.l 192(sp),74(sp)
    21d4:	   |         move.l 100(sp),70(sp)
    21da:	   |         moveq #2,d2
    21dc:	   |         move.l d2,66(sp)
    21e0:	   |         move.w 152(sp),d0
    21e4:	   |         lsr.w #1,d0
    21e6:	   |         move.w d0,d0
    21e8:	   |         andi.l #65535,d0
    21ee:	   |         move.l d0,62(sp)
    21f2:	   |         move.l 1cd6e <DOSBase>,d0
    21f8:	   |         movea.l d0,a6
    21fa:	   |         move.l 74(sp),d1
    21fe:	   |         move.l 70(sp),d2
    2202:	   |         move.l 66(sp),d3
    2206:	   |         move.l 62(sp),d4
    220a:	   |         jsr -324(a6)
    220e:	   |         move.l d0,58(sp)
    2212:	   |         move.l 58(sp),d0
    2216:	   |         move.w d0,78(sp)
   

  if(!count) {
    221a:	   |     ,-- bne.s 222e <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    221c:	   |     |   pea 182b9 <PutChar+0x2ff>
    2222:	   |     |   jsr 17518 <KPrintF>
    2228:	   |     |   addq.l #4,sp
    return;
    222a:	   +-----|-- bra.w 24de <CstLoadBackdrop+0x576>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    222e:	   |     '-> move.l #14675968,54(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    2236:	   |         move.l 1cc7c <CstBackDrop>,d0
    223c:	   |         move.l d0,172(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    2240:	   |         move.l 200(sp),d0
    2244:	   |         move.w d0,d1
    2246:	   |         muls.w 154(sp),d1
    224a:	   |         move.l 196(sp),d0
    224e:	   |     ,-- bpl.s 2252 <CstLoadBackdrop+0x2ea>
    2250:	   |     |   addq.l #7,d0
    2252:	   |     '-> asr.l #3,d0
    2254:	   |         move.l d0,d0
    2256:	   |         movea.w d1,a0
    2258:	   |         adda.w d0,a0
    225a:	   |         move.w a0,52(sp)
  backdropcursor += offset; 
    225e:	   |         moveq #0,d0
    2260:	   |         move.w 52(sp),d0
    2264:	   |         add.l d0,172(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    2268:	   |         pea 182d4 <PutChar+0x31a>
    226e:	   |         jsr 17518 <KPrintF>
    2274:	   |         addq.l #4,sp


  WaitBlit();
    2276:	   |         move.l 1cd72 <GfxBase>,d0
    227c:	   |         movea.l d0,a6
    227e:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    2282:	   |         movea.l 54(sp),a0
    2286:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    228c:	   |         movea.l 54(sp),a0
    2290:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    2296:	   |         movea.l 54(sp),a0
    229a:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    22a0:	   |         movea.l 54(sp),a0
    22a4:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    22aa:	   |         move.w 154(sp),d0
    22ae:	   |         sub.w 158(sp),d0
    22b2:	   |         movea.l 54(sp),a0
    22b6:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    22ba:	   |         move.w 154(sp),d0
    22be:	   |         sub.w 158(sp),d0
    22c2:	   |         movea.l 54(sp),a0
    22c6:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    22ca:	   |         movea.l 54(sp),a0
    22ce:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    22d4:	   |         movea.l 54(sp),a0
    22d8:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    22de:	   |         move.l 116(sp),168(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    22e4:	   |         clr.l 164(sp)
    22e8:	   |     ,-- bra.s 2356 <CstLoadBackdrop+0x3ee>
  {   
    WaitBlit(); 
    22ea:	   |  ,--|-> move.l 1cd72 <GfxBase>,d0
    22f0:	   |  |  |   movea.l d0,a6
    22f2:	   |  |  |   jsr -228(a6)
    custom->bltapt = (APTR) tmpmask;
    22f6:	   |  |  |   movea.l 54(sp),a0
    22fa:	   |  |  |   move.l 100(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    2300:	   |  |  |   move.l 168(sp),d0
    2304:	   |  |  |   movea.l 54(sp),a0
    2308:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    230c:	   |  |  |   move.l 172(sp),d0
    2310:	   |  |  |   movea.l 54(sp),a0
    2314:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    2318:	   |  |  |   move.l 172(sp),d0
    231c:	   |  |  |   movea.l 54(sp),a0
    2320:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    2324:	   |  |  |   move.w 160(sp),d0
    2328:	   |  |  |   lsl.w #6,d0
    232a:	   |  |  |   add.w 156(sp),d0
    232e:	   |  |  |   movea.l 54(sp),a0
    2332:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    2336:	   |  |  |   moveq #0,d0
    2338:	   |  |  |   move.w 152(sp),d0
    233c:	   |  |  |   add.l d0,168(sp)
    backdropcursor += CstBackdropSizePlane;
    2340:	   |  |  |   move.w 1cc7a <CstBackdropSizePlane>,d0
    2346:	   |  |  |   move.w d0,d0
    2348:	   |  |  |   andi.l #65535,d0
    234e:	   |  |  |   add.l d0,172(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    2352:	   |  |  |   addq.l #1,164(sp)
    2356:	   |  |  '-> moveq #4,d0
    2358:	   |  |      cmp.l 164(sp),d0
    235c:	   |  '----- bge.s 22ea <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    235e:	   |         move.l 1cd72 <GfxBase>,d0
    2364:	   |         movea.l d0,a6
    2366:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    236a:	   |         pea 182f3 <PutChar+0x339>
    2370:	   |         jsr 17518 <KPrintF>
    2376:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    2378:	   |         move.l 116(sp),48(sp)
    237e:	   |         move.l 1cd66 <SysBase>,d0
    2384:	   |         movea.l d0,a6
    2386:	   |         movea.l 48(sp),a1
    238a:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    238e:	   |         move.l 100(sp),44(sp)
    2394:	   |         move.l 1cd66 <SysBase>,d0
    239a:	   |         movea.l d0,a6
    239c:	   |         movea.l 44(sp),a1
    23a0:	   |         jsr -690(a6)

  struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    23a4:	   |         move.l 1cc96 <CstCleanupQueueDrawBuffer>,40(sp)
  CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    23ac:	   |         moveq #20,d2
    23ae:	   |         move.l d2,36(sp)
    23b2:	   |         clr.l 32(sp)
    23b6:	   |         move.l 1cd66 <SysBase>,d0
    23bc:	   |         movea.l d0,a6
    23be:	   |         move.l 36(sp),d0
    23c2:	   |         move.l 32(sp),d1
    23c6:	   |         jsr -684(a6)
    23ca:	   |         move.l d0,28(sp)
    23ce:	   |         move.l 28(sp),d0
    23d2:	   |         move.l d0,1cc96 <CstCleanupQueueDrawBuffer>
  CstCleanupQueueDrawBuffer->next = next;
    23d8:	   |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    23de:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueDrawBuffer->x = 0;
    23e4:	   |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    23ea:	   |         clr.w (a0)
  CstCleanupQueueDrawBuffer->y = 0;
    23ec:	   |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    23f2:	   |         clr.w 2(a0)
  CstCleanupQueueDrawBuffer->person = NULL;
    23f6:	   |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    23fc:	   |         clr.l 4(a0)
  CstCleanupQueueDrawBuffer->widthinwords = winWidth/16;
    2400:	   |         move.l 1ccba <winWidth>,d0
    2406:	   |         lsr.l #4,d0
    2408:	   |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    240e:	   |         move.l d0,d0
    2410:	   |         move.w d0,8(a0)
  CstCleanupQueueDrawBuffer->height = winHeight;
    2414:	   |         move.l 1ccbe <winHeight>,d0
    241a:	   |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2420:	   |         move.l d0,d0
    2422:	   |         move.w d0,10(a0)
  CstCleanupQueueDrawBuffer->startxinbytes = 0;
    2426:	   |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    242c:	   |         clr.w 12(a0)
  CstCleanupQueueDrawBuffer->starty = 0;
    2430:	   |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2436:	   |         clr.w 14(a0)

  next = CstCleanupQueueViewBuffer;
    243a:	   |         move.l 1cc92 <CstCleanupQueueViewBuffer>,40(sp)
  CstCleanupQueueViewBuffer = AllocVec( sizeof(struct CleanupQueue), MEMF_ANY);
    2442:	   |         moveq #20,d0
    2444:	   |         move.l d0,24(sp)
    2448:	   |         clr.l 20(sp)
    244c:	   |         move.l 1cd66 <SysBase>,d0
    2452:	   |         movea.l d0,a6
    2454:	   |         move.l 24(sp),d0
    2458:	   |         move.l 20(sp),d1
    245c:	   |         jsr -684(a6)
    2460:	   |         move.l d0,16(sp)
    2464:	   |         move.l 16(sp),d0
    2468:	   |         move.l d0,1cc92 <CstCleanupQueueViewBuffer>
  CstCleanupQueueViewBuffer->next = next;
    246e:	   |         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    2474:	   |         move.l 40(sp),16(a0)
  CstCleanupQueueViewBuffer->x = 0;
    247a:	   |         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    2480:	   |         clr.w (a0)
  CstCleanupQueueViewBuffer->y = 0;
    2482:	   |         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    2488:	   |         clr.w 2(a0)
  CstCleanupQueueViewBuffer->person = NULL;
    248c:	   |         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    2492:	   |         clr.l 4(a0)
  CstCleanupQueueViewBuffer->widthinwords = winWidth/16;
    2496:	   |         move.l 1ccba <winWidth>,d0
    249c:	   |         lsr.l #4,d0
    249e:	   |         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    24a4:	   |         move.l d0,d0
    24a6:	   |         move.w d0,8(a0)
  CstCleanupQueueViewBuffer->height = winHeight;
    24aa:	   |         move.l 1ccbe <winHeight>,d0
    24b0:	   |         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    24b6:	   |         move.l d0,d0
    24b8:	   |         move.w d0,10(a0)
  CstCleanupQueueViewBuffer->startxinbytes = 0;
    24bc:	   |         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    24c2:	   |         clr.w 12(a0)
  CstCleanupQueueViewBuffer->starty = 0; 
    24c6:	   |         movea.l 1cc92 <CstCleanupQueueViewBuffer>,a0
    24cc:	   |         clr.w 14(a0)

  KPrintF("CstLoadBackDrop: Finished");
    24d0:	   |         pea 18313 <PutChar+0x359>
    24d6:	   |         jsr 17518 <KPrintF>
    24dc:	   |         addq.l #4,sp

}
    24de:	   '-------> movem.l (sp)+,d2-d4/a6
    24e2:	             lea 172(sp),sp
    24e6:	             rts

000024e8 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    24e8:	                lea -72(sp),sp
    24ec:	                move.l a6,-(sp)
    24ee:	                move.l d2,-(sp)
    24f0:	                move.l 88(sp),d1
    24f4:	                move.l 92(sp),d0
    24f8:	                move.w d1,d1
    24fa:	                move.w d1,10(sp)
    24fe:	                move.w d0,d0
    2500:	                move.w d0,8(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;	
    2504:	                move.l #14675968,28(sp)
  //custom->color[0] = 0x0f0;
  UWORD *destination = 0;
    250c:	                clr.l 24(sp)
  CstApplyBackDropCounter = 2;
    2510:	                move.w #2,1cc88 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    2518:	                move.l 1cc7c <CstBackDrop>,24(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    2520:	                clr.l 56(sp)

  blitwidth = single->width/16;
    2524:	                movea.l 84(sp),a0
    2528:	                move.l (a0),d0
    252a:	                movea.l d0,a0
    252c:	                cmpa.w #0,a0
    2530:	            ,-- bge.s 2536 <CstPasteChar+0x4e>
    2532:	            |   lea 15(a0),a0
    2536:	            '-> move.l a0,d0
    2538:	                asr.l #4,d0
    253a:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    253e:	            ,-- bne.s 2546 <CstPasteChar+0x5e>
    2540:	            |   moveq #1,d0
    2542:	            |   move.l d0,40(sp)

  if( y < 0) {
    2546:	            '-> tst.w 8(sp)
    254a:	         ,----- bge.s 2594 <CstPasteChar+0xac>
    if(y + single->height < 0) {
    254c:	         |      movea.w 8(sp),a1
    2550:	         |      movea.l 84(sp),a0
    2554:	         |      move.l 4(a0),d0
    2558:	         |      add.l a1,d0
    255a:	         |  ,-- bpl.s 256e <CstPasteChar+0x86>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    255c:	         |  |   pea 1832d <PutChar+0x373>
    2562:	         |  |   jsr 17518 <KPrintF>
    2568:	         |  |   addq.l #4,sp
      return;
    256a:	,--------|--|-- bra.w 2c0a <CstPasteChar+0x722>
    }
    ystartdst = 0;
    256e:	|        |  '-> clr.l 52(sp)
    ystartsrc = y*-1;
    2572:	|        |      move.w 8(sp),d0
    2576:	|        |      ext.l d0
    2578:	|        |      move.l d0,d1
    257a:	|        |      neg.l d1
    257c:	|        |      move.l d1,48(sp)
    blitheight = single->height+y;
    2580:	|        |      movea.l 84(sp),a0
    2584:	|        |      move.l 4(a0),d0
    2588:	|        |      movea.w 8(sp),a0
    258c:	|        |      add.l a0,d0
    258e:	|        |      move.l d0,44(sp)
    2592:	|     ,--|----- bra.s 2606 <CstPasteChar+0x11e>
  } else if(y+single->height > (int) winHeight) {
    2594:	|     |  '----> movea.w 8(sp),a1
    2598:	|     |         movea.l 84(sp),a0
    259c:	|     |         move.l 4(a0),d0
    25a0:	|     |         move.l a1,d1
    25a2:	|     |         add.l d0,d1
    25a4:	|     |         move.l 1ccbe <winHeight>,d0
    25aa:	|     |         cmp.l d1,d0
    25ac:	|     |  ,----- bge.s 25ee <CstPasteChar+0x106>
    if(y  > (int) winHeight) {
    25ae:	|     |  |      movea.w 8(sp),a0
    25b2:	|     |  |      move.l 1ccbe <winHeight>,d0
    25b8:	|     |  |      cmp.l a0,d0
    25ba:	|     |  |  ,-- bge.s 25ce <CstPasteChar+0xe6>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    25bc:	|     |  |  |   pea 1832d <PutChar+0x373>
    25c2:	|     |  |  |   jsr 17518 <KPrintF>
    25c8:	|     |  |  |   addq.l #4,sp
      return;
    25ca:	+-----|--|--|-- bra.w 2c0a <CstPasteChar+0x722>
    }
    ystartdst = y;
    25ce:	|     |  |  '-> movea.w 8(sp),a0
    25d2:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    25d6:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    25da:	|     |  |      move.l 1ccbe <winHeight>,d0
    25e0:	|     |  |      movea.w 8(sp),a0
    25e4:	|     |  |      move.l d0,d1
    25e6:	|     |  |      sub.l a0,d1
    25e8:	|     |  |      move.l d1,44(sp)
    25ec:	|     +--|----- bra.s 2606 <CstPasteChar+0x11e>
  } else {
    ystartdst = y;
    25ee:	|     |  '----> movea.w 8(sp),a0
    25f2:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    25f6:	|     |         clr.l 48(sp)
    blitheight = single->height;
    25fa:	|     |         movea.l 84(sp),a0
    25fe:	|     |         move.l 4(a0),d0
    2602:	|     |         move.l d0,44(sp)
  }


   if( x < 0) { //Leftmost part outside screen
    2606:	|     '-------> tst.w 10(sp)
    260a:	|        ,----- bge.w 2772 <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    260e:	|        |      movea.w 10(sp),a1
    2612:	|        |      movea.l 84(sp),a0
    2616:	|        |      move.l (a0),d0
    2618:	|        |      add.l a1,d0
    261a:	|        |  ,-- bpl.s 262e <CstPasteChar+0x146>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    261c:	|        |  |   pea 1832d <PutChar+0x373>
    2622:	|        |  |   jsr 17518 <KPrintF>
    2628:	|        |  |   addq.l #4,sp
      return;
    262a:	+--------|--|-- bra.w 2c0a <CstPasteChar+0x722>

    }
    
    extrawords = 1;
    262e:	|        |  '-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    2634:	|        |      move.w 10(sp),d0
    2638:	|        |  ,-- bpl.s 263e <CstPasteChar+0x156>
    263a:	|        |  |   addi.w #15,d0
    263e:	|        |  '-> asr.w #4,d0
    2640:	|        |      neg.w d0
    2642:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    2646:	|        |      move.w 10(sp),d0
    264a:	|        |      ext.l d0
    264c:	|        |      neg.l d0
    264e:	|        |      andi.l #-2147483633,d0
    2654:	|        |  ,-- bpl.s 265e <CstPasteChar+0x176>
    2656:	|        |  |   subq.l #1,d0
    2658:	|        |  |   moveq #-16,d1
    265a:	|        |  |   or.l d1,d0
    265c:	|        |  |   addq.l #1,d0
    265e:	|        |  '-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2662:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    2666:	|        |      movea.l 84(sp),a0
    266a:	|        |      move.l 24(a0),d0
    266e:	|        |      move.l d0,d1
    2670:	|        |      moveq #0,d0
    2672:	|        |      move.w 76(sp),d0
    2676:	|        |      add.l d0,d0
    2678:	|        |      move.l d1,d2
    267a:	|        |      add.l d0,d2
    267c:	|        |      movea.l 84(sp),a0
    2680:	|        |      move.l (a0),d0
    2682:	|        |      move.l 48(sp),-(sp)
    2686:	|        |      move.l d0,-(sp)
    2688:	|        |      jsr 17ea4 <__mulsi3>
    268e:	|        |      addq.l #8,sp
    2690:	|        |      lsr.l #3,d0
    2692:	|        |      move.l d2,d1
    2694:	|        |      add.l d0,d1
    2696:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    269a:	|        |      move.l 1ccba <winWidth>,d0
    26a0:	|        |      move.l 52(sp),-(sp)
    26a4:	|        |      move.l d0,-(sp)
    26a6:	|        |      jsr 17ea4 <__mulsi3>
    26ac:	|        |      addq.l #8,sp
    26ae:	|        |      lsr.l #3,d0
    26b0:	|        |      move.l 24(sp),d1
    26b4:	|        |      add.l d1,d0
    26b6:	|        |      move.l d0,d2
    26b8:	|        |      subq.l #2,d2
    26ba:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    26be:	|        |      move.l 1ccba <winWidth>,d0
    26c4:	|        |      move.l 52(sp),-(sp)
    26c8:	|        |      move.l d0,-(sp)
    26ca:	|        |      jsr 17ea4 <__mulsi3>
    26d0:	|        |      addq.l #8,sp
    26d2:	|        |      lsr.l #3,d0
    26d4:	|        |      move.l 24(sp),d1
    26d8:	|        |      add.l d1,d0
    26da:	|        |      move.l d0,d1
    26dc:	|        |      subq.l #2,d1
    26de:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    26e2:	|        |      moveq #0,d0
    26e4:	|        |      move.w 74(sp),d0
    26e8:	|        |      moveq #16,d1
    26ea:	|        |      sub.l d0,d1
    26ec:	|        |      move.l d1,d0
    26ee:	|        |      moveq #12,d2
    26f0:	|        |      lsl.l d2,d0
    26f2:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    26f6:	|        |      movea.l 84(sp),a0
    26fa:	|        |      move.l (a0),d0
    26fc:	|        |      movea.l d0,a0
    26fe:	|        |      cmpa.w #0,a0
    2702:	|        |  ,-- bge.s 2708 <CstPasteChar+0x220>
    2704:	|        |  |   lea 15(a0),a0
    2708:	|        |  '-> move.l a0,d0
    270a:	|        |      asr.l #4,d0
    270c:	|        |      move.l d0,d0
    270e:	|        |      add.w 76(sp),d0
    2712:	|        |      movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    2718:	|        |      move.l a0,d1
    271a:	|        |      addq.l #2,d1
    271c:	|        |      move.l d1,1cc9e <CstBackDropBufferApplyCursor>
    2722:	|        |      add.w 78(sp),d0
    2726:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2728:	|        |      movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    272e:	|        |      move.l a0,d0
    2730:	|        |      addq.l #2,d0
    2732:	|        |      move.l d0,1cc9e <CstBackDropBufferApplyCursor>
    2738:	|        |      move.l 44(sp),d0
    273c:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    273e:	|        |      movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    2744:	|        |      move.l a0,d0
    2746:	|        |      addq.l #2,d0
    2748:	|        |      move.l d0,1cc9e <CstBackDropBufferApplyCursor>
    274e:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2750:	|        |      movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    2756:	|        |      move.l a0,d0
    2758:	|        |      addq.l #2,d0
    275a:	|        |      move.l d0,1cc9e <CstBackDropBufferApplyCursor>
    2760:	|        |      move.l 52(sp),d0
    2764:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor = 0;
    2766:	|        |      movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    276c:	|        |      clr.w (a0)
    276e:	|     ,--|----- bra.w 2a72 <CstPasteChar+0x58a>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2772:	|     |  '----> movea.w 10(sp),a1
    2776:	|     |         movea.l 84(sp),a0
    277a:	|     |         move.l (a0),d0
    277c:	|     |         move.l a1,d1
    277e:	|     |         add.l d0,d1
    2780:	|     |         move.l 1ccba <winWidth>,d0
    2786:	|     |         cmp.l d1,d0
    2788:	|     |  ,----- bge.w 291a <CstPasteChar+0x432>

    if(x - single->width > (int) winWidth)
    278c:	|     |  |      movea.w 10(sp),a1
    2790:	|     |  |      movea.l 84(sp),a0
    2794:	|     |  |      move.l (a0),d0
    2796:	|     |  |      move.l a1,d1
    2798:	|     |  |      sub.l d0,d1
    279a:	|     |  |      move.l 1ccba <winWidth>,d0
    27a0:	|     |  |      cmp.l d1,d0
    27a2:	|     |  |  ,-- bge.s 27b6 <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    27a4:	|     |  |  |   pea 1832d <PutChar+0x373>
    27aa:	|     |  |  |   jsr 17518 <KPrintF>
    27b0:	|     |  |  |   addq.l #4,sp
      return;
    27b2:	+-----|--|--|-- bra.w 2c0a <CstPasteChar+0x722>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    27b6:	|     |  |  '-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    27ba:	|     |  |      movea.w 10(sp),a1
    27be:	|     |  |      movea.l 84(sp),a0
    27c2:	|     |  |      move.l (a0),d0
    27c4:	|     |  |      add.l a1,d0
    27c6:	|     |  |      move.l d0,d1
    27c8:	|     |  |      move.l 1ccba <winWidth>,d0
    27ce:	|     |  |      sub.l d0,d1
    27d0:	|     |  |      move.l d1,d0
    27d2:	|     |  |      lsr.l #4,d0
    27d4:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    27d8:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    27dc:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    27e2:	|     |  |      movea.l 84(sp),a0
    27e6:	|     |  |      move.l 24(a0),d0
    27ea:	|     |  |      move.l d0,d2
    27ec:	|     |  |      movea.l 84(sp),a0
    27f0:	|     |  |      move.l (a0),d0
    27f2:	|     |  |      move.l 48(sp),-(sp)
    27f6:	|     |  |      move.l d0,-(sp)
    27f8:	|     |  |      jsr 17ea4 <__mulsi3>
    27fe:	|     |  |      addq.l #8,sp
    2800:	|     |  |      lsr.l #3,d0
    2802:	|     |  |      move.l d2,d1
    2804:	|     |  |      add.l d0,d1
    2806:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    280a:	|     |  |      move.l 1ccba <winWidth>,d0
    2810:	|     |  |      move.l 52(sp),-(sp)
    2814:	|     |  |      move.l d0,-(sp)
    2816:	|     |  |      jsr 17ea4 <__mulsi3>
    281c:	|     |  |      addq.l #8,sp
    281e:	|     |  |      lsr.l #3,d0
    2820:	|     |  |      move.l 24(sp),d1
    2824:	|     |  |      add.l d0,d1
    2826:	|     |  |      move.w 10(sp),d0
    282a:	|     |  |  ,-- bpl.s 2830 <CstPasteChar+0x348>
    282c:	|     |  |  |   addi.w #15,d0
    2830:	|     |  |  '-> asr.w #4,d0
    2832:	|     |  |      movea.w d0,a0
    2834:	|     |  |      move.l a0,d0
    2836:	|     |  |      add.l a0,d0
    2838:	|     |  |      move.l d1,d2
    283a:	|     |  |      add.l d0,d2
    283c:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2840:	|     |  |      move.l 1ccba <winWidth>,d0
    2846:	|     |  |      move.l 52(sp),-(sp)
    284a:	|     |  |      move.l d0,-(sp)
    284c:	|     |  |      jsr 17ea4 <__mulsi3>
    2852:	|     |  |      addq.l #8,sp
    2854:	|     |  |      lsr.l #3,d0
    2856:	|     |  |      move.l 24(sp),d1
    285a:	|     |  |      add.l d0,d1
    285c:	|     |  |      move.w 10(sp),d0
    2860:	|     |  |  ,-- bpl.s 2866 <CstPasteChar+0x37e>
    2862:	|     |  |  |   addi.w #15,d0
    2866:	|     |  |  '-> asr.w #4,d0
    2868:	|     |  |      movea.w d0,a0
    286a:	|     |  |      move.l a0,d0
    286c:	|     |  |      add.l a0,d0
    286e:	|     |  |      move.l d1,d2
    2870:	|     |  |      add.l d0,d2
    2872:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    2876:	|     |  |      movea.l 84(sp),a0
    287a:	|     |  |      move.l (a0),d0
    287c:	|     |  |      andi.l #-2147483633,d0
    2882:	|     |  |  ,-- bpl.s 288c <CstPasteChar+0x3a4>
    2884:	|     |  |  |   subq.l #1,d0
    2886:	|     |  |  |   moveq #-16,d1
    2888:	|     |  |  |   or.l d1,d0
    288a:	|     |  |  |   addq.l #1,d0
    288c:	|     |  |  '-> moveq #12,d2
    288e:	|     |  |      lsl.l d2,d0
    2890:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2894:	|     |  |      movea.l 84(sp),a0
    2898:	|     |  |      move.l (a0),d0
    289a:	|     |  |      movea.l d0,a0
    289c:	|     |  |      cmpa.w #0,a0
    28a0:	|     |  |  ,-- bge.s 28a6 <CstPasteChar+0x3be>
    28a2:	|     |  |  |   lea 15(a0),a0
    28a6:	|     |  |  '-> move.l a0,d0
    28a8:	|     |  |      asr.l #4,d0
    28aa:	|     |  |      move.l d0,d0
    28ac:	|     |  |      movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    28b2:	|     |  |      move.l a0,d1
    28b4:	|     |  |      addq.l #2,d1
    28b6:	|     |  |      move.l d1,1cc9e <CstBackDropBufferApplyCursor>
    28bc:	|     |  |      add.w 76(sp),d0
    28c0:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    28c2:	|     |  |      movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    28c8:	|     |  |      move.l a0,d0
    28ca:	|     |  |      addq.l #2,d0
    28cc:	|     |  |      move.l d0,1cc9e <CstBackDropBufferApplyCursor>
    28d2:	|     |  |      move.l 44(sp),d0
    28d6:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    28d8:	|     |  |      move.w 10(sp),d0
    28dc:	|     |  |  ,-- bpl.s 28e2 <CstPasteChar+0x3fa>
    28de:	|     |  |  |   addi.w #15,d0
    28e2:	|     |  |  '-> asr.w #4,d0
    28e4:	|     |  |      movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    28ea:	|     |  |      move.l a0,d1
    28ec:	|     |  |      addq.l #2,d1
    28ee:	|     |  |      move.l d1,1cc9e <CstBackDropBufferApplyCursor>
    28f4:	|     |  |      add.w d0,d0
    28f6:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    28f8:	|     |  |      movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    28fe:	|     |  |      move.l a0,d0
    2900:	|     |  |      addq.l #2,d0
    2902:	|     |  |      move.l d0,1cc9e <CstBackDropBufferApplyCursor>
    2908:	|     |  |      move.l 52(sp),d0
    290c:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor = 0;
    290e:	|     |  |      movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    2914:	|     |  |      clr.w (a0)
    2916:	|     +--|----- bra.w 2a72 <CstPasteChar+0x58a>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    291a:	|     |  '----> move.w #1,78(sp)
    cutwordssource = 0;
    2920:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    2924:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2928:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    292c:	|     |         movea.l 84(sp),a0
    2930:	|     |         move.l 24(a0),d0
    2934:	|     |         move.l d0,d2
    2936:	|     |         movea.l 84(sp),a0
    293a:	|     |         move.l (a0),d0
    293c:	|     |         movea.l d0,a0
    293e:	|     |         cmpa.w #0,a0
    2942:	|     |     ,-- bge.s 2948 <CstPasteChar+0x460>
    2944:	|     |     |   lea 15(a0),a0
    2948:	|     |     '-> move.l a0,d0
    294a:	|     |         asr.l #4,d0
    294c:	|     |         move.l 48(sp),-(sp)
    2950:	|     |         move.l d0,-(sp)
    2952:	|     |         jsr 17ea4 <__mulsi3>
    2958:	|     |         addq.l #8,sp
    295a:	|     |         add.l d0,d0
    295c:	|     |         move.l d2,d1
    295e:	|     |         add.l d0,d1
    2960:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2964:	|     |         move.l 1ccba <winWidth>,d0
    296a:	|     |         move.l 52(sp),-(sp)
    296e:	|     |         move.l d0,-(sp)
    2970:	|     |         jsr 17ea4 <__mulsi3>
    2976:	|     |         addq.l #8,sp
    2978:	|     |         lsr.l #3,d0
    297a:	|     |         move.l 24(sp),d1
    297e:	|     |         add.l d0,d1
    2980:	|     |         move.w 10(sp),d0
    2984:	|     |     ,-- bpl.s 298a <CstPasteChar+0x4a2>
    2986:	|     |     |   addi.w #15,d0
    298a:	|     |     '-> asr.w #4,d0
    298c:	|     |         movea.w d0,a0
    298e:	|     |         move.l a0,d0
    2990:	|     |         add.l a0,d0
    2992:	|     |         move.l d1,d2
    2994:	|     |         add.l d0,d2
    2996:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    299a:	|     |         move.l 1ccba <winWidth>,d0
    29a0:	|     |         move.l 52(sp),-(sp)
    29a4:	|     |         move.l d0,-(sp)
    29a6:	|     |         jsr 17ea4 <__mulsi3>
    29ac:	|     |         addq.l #8,sp
    29ae:	|     |         lsr.l #3,d0
    29b0:	|     |         move.l 24(sp),d1
    29b4:	|     |         add.l d0,d1
    29b6:	|     |         move.w 10(sp),d0
    29ba:	|     |     ,-- bpl.s 29c0 <CstPasteChar+0x4d8>
    29bc:	|     |     |   addi.w #15,d0
    29c0:	|     |     '-> asr.w #4,d0
    29c2:	|     |         movea.w d0,a0
    29c4:	|     |         move.l a0,d0
    29c6:	|     |         add.l a0,d0
    29c8:	|     |         move.l d1,d2
    29ca:	|     |         add.l d0,d2
    29cc:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    29d0:	|     |         move.w 10(sp),d0
    29d4:	|     |         andi.w #-32753,d0
    29d8:	|     |     ,-- bpl.s 29e2 <CstPasteChar+0x4fa>
    29da:	|     |     |   subq.w #1,d0
    29dc:	|     |     |   ori.w #-16,d0
    29e0:	|     |     |   addq.w #1,d0
    29e2:	|     |     '-> ext.l d0
    29e4:	|     |         moveq #12,d1
    29e6:	|     |         lsl.l d1,d0
    29e8:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    29ec:	|     |         movea.l 84(sp),a0
    29f0:	|     |         move.l (a0),d0
    29f2:	|     |         movea.l d0,a0
    29f4:	|     |         cmpa.w #0,a0
    29f8:	|     |     ,-- bge.s 29fe <CstPasteChar+0x516>
    29fa:	|     |     |   lea 15(a0),a0
    29fe:	|     |     '-> move.l a0,d0
    2a00:	|     |         asr.l #4,d0
    2a02:	|     |         move.l d0,d0
    2a04:	|     |         add.w 76(sp),d0
    2a08:	|     |         movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    2a0e:	|     |         move.l a0,d1
    2a10:	|     |         addq.l #2,d1
    2a12:	|     |         move.l d1,1cc9e <CstBackDropBufferApplyCursor>
    2a18:	|     |         add.w 78(sp),d0
    2a1c:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2a1e:	|     |         movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    2a24:	|     |         move.l a0,d0
    2a26:	|     |         addq.l #2,d0
    2a28:	|     |         move.l d0,1cc9e <CstBackDropBufferApplyCursor>
    2a2e:	|     |         move.l 44(sp),d0
    2a32:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2a34:	|     |         move.w 10(sp),d0
    2a38:	|     |     ,-- bpl.s 2a3e <CstPasteChar+0x556>
    2a3a:	|     |     |   addi.w #15,d0
    2a3e:	|     |     '-> asr.w #4,d0
    2a40:	|     |         movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    2a46:	|     |         move.l a0,d1
    2a48:	|     |         addq.l #2,d1
    2a4a:	|     |         move.l d1,1cc9e <CstBackDropBufferApplyCursor>
    2a50:	|     |         add.w d0,d0
    2a52:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2a54:	|     |         movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    2a5a:	|     |         move.l a0,d0
    2a5c:	|     |         addq.l #2,d0
    2a5e:	|     |         move.l d0,1cc9e <CstBackDropBufferApplyCursor>
    2a64:	|     |         move.l 52(sp),d0
    2a68:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor = 0;
    2a6a:	|     |         movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    2a70:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2a72:	|     '-------> moveq #0,d0
    2a74:	|               move.w 74(sp),d0
    2a78:	|               moveq #0,d1
    2a7a:	|               not.w d1
    2a7c:	|               asr.l d0,d1
    2a7e:	|               move.w d1,22(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2a82:	|               moveq #0,d1
    2a84:	|               move.w 76(sp),d1
    2a88:	|               moveq #0,d0
    2a8a:	|               move.w 78(sp),d0
    2a8e:	|               sub.l d0,d1
    2a90:	|               move.l d1,d0
    2a92:	|               add.w d0,d0
    2a94:	|               move.w d0,20(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2a98:	|               move.l 1ccba <winWidth>,d0
    2a9e:	|               lsr.l #3,d0
    2aa0:	|               move.l d0,d2
    2aa2:	|               move.w 76(sp),d1
    2aa6:	|               sub.w 78(sp),d1
    2aaa:	|               move.l 40(sp),d0
    2aae:	|               sub.w d0,d1
    2ab0:	|               move.w d1,d0
    2ab2:	|               add.w d1,d0
    2ab4:	|               add.w d2,d0
    2ab6:	|               move.w d0,18(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2aba:	|               move.l 1ccba <winWidth>,d0
    2ac0:	|               lsr.l #3,d0
    2ac2:	|               move.l d0,d2
    2ac4:	|               move.w 76(sp),d1
    2ac8:	|               sub.w 78(sp),d1
    2acc:	|               move.l 40(sp),d0
    2ad0:	|               sub.w d0,d1
    2ad2:	|               move.w d1,d0
    2ad4:	|               add.w d1,d0
    2ad6:	|               add.w d2,d0
    2ad8:	|               move.w d0,16(sp)

  WaitBlit();
    2adc:	|               move.l 1cd72 <GfxBase>,d0
    2ae2:	|               movea.l d0,a6
    2ae4:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2ae8:	|               movea.l 28(sp),a0
    2aec:	|               move.w 22(sp),68(a0)
  custom->bltalwm = bltalwm;
    2af2:	|               movea.l 28(sp),a0
    2af6:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2afc:	|               move.w 20(sp),d0
    2b00:	|               movea.l 28(sp),a0
    2b04:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    2b08:	|               move.w 18(sp),d0
    2b0c:	|               movea.l 28(sp),a0
    2b10:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2b14:	|               move.w 16(sp),d0
    2b18:	|               movea.l 28(sp),a0
    2b1c:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    2b20:	|               move.l 1ccba <winWidth>,d0
    2b26:	|               lsr.l #3,d0
    2b28:	|               move.l d0,d1
    2b2a:	|               move.l 1ccbe <winHeight>,d0
    2b30:	|               move.l d0,d0
    2b32:	|               move.w d1,d2
    2b34:	|               muls.w d0,d2
    2b36:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    2b3a:	|               move.w 1cc74 <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    2b42:	|               move.w 38(sp),d0
    2b46:	|               andi.w #1,d0
    2b4a:	|               move.w d0,12(sp)
  if(tmp2) {
    2b4e:	|        ,----- beq.s 2b58 <CstPasteChar+0x670>
    minterm = 0xbfa;
    2b50:	|        |      move.w #3066,36(sp)
    2b56:	|        |  ,-- bra.s 2b5e <CstPasteChar+0x676>
  } else {
    minterm = 0xb0a;
    2b58:	|        '--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2b5e:	|           '-> clr.l 32(sp)
    2b62:	|     ,-------- bra.w 2c00 <CstPasteChar+0x718>
  {

    custom->bltcon0 = bltcon0 + minterm;
    2b66:	|  ,--|-------> move.l 56(sp),d0
    2b6a:	|  |  |         add.w 36(sp),d0
    2b6e:	|  |  |         movea.l 28(sp),a0
    2b72:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    2b76:	|  |  |         move.l 68(sp),d0
    2b7a:	|  |  |         movea.l 28(sp),a0
    2b7e:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2b82:	|  |  |         move.l 64(sp),d0
    2b86:	|  |  |         movea.l 28(sp),a0
    2b8a:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2b8e:	|  |  |         move.l 60(sp),d0
    2b92:	|  |  |         movea.l 28(sp),a0
    2b96:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2b9a:	|  |  |         move.l 44(sp),d0
    2b9e:	|  |  |         lsl.w #6,d0
    2ba0:	|  |  |         move.l 40(sp),d1
    2ba4:	|  |  |         add.w d1,d0
    2ba6:	|  |  |         sub.w 76(sp),d0
    2baa:	|  |  |         add.w 78(sp),d0
    2bae:	|  |  |         movea.l 28(sp),a0
    2bb2:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    2bb6:	|  |  |         moveq #0,d0
    2bb8:	|  |  |         move.w 14(sp),d0
    2bbc:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2bc0:	|  |  |         moveq #0,d0
    2bc2:	|  |  |         move.w 14(sp),d0
    2bc6:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2bca:	|  |  |         move.w 38(sp),d0
    2bce:	|  |  |         lsr.w #1,d0
    2bd0:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    2bd4:	|  |  |         move.w 38(sp),d1
    2bd8:	|  |  |         andi.w #1,d1
    2bdc:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2be0:	|  |  |  ,----- beq.s 2bea <CstPasteChar+0x702>
      minterm = 0xbfa;
    2be2:	|  |  |  |      move.w #3066,36(sp)
    2be8:	|  |  |  |  ,-- bra.s 2bf0 <CstPasteChar+0x708>
    } else {
      minterm = 0xb0a;
    2bea:	|  |  |  '--|-> move.w #2826,36(sp)
    }   

    WaitBlit();     
    2bf0:	|  |  |     '-> move.l 1cd72 <GfxBase>,d0
    2bf6:	|  |  |         movea.l d0,a6
    2bf8:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2bfc:	|  |  |         addq.l #1,32(sp)
    2c00:	|  |  '-------> moveq #4,d2
    2c02:	|  |            cmp.l 32(sp),d2
    2c06:	|  '----------- bge.w 2b66 <CstPasteChar+0x67e>
  }   
  //custom->color[0] = 0x000;
}
    2c0a:	'-------------> move.l (sp)+,d2
    2c0c:	                movea.l (sp)+,a6
    2c0e:	                lea 72(sp),sp
    2c12:	                rts

00002c14 <CstRestoreScreen>:


void CstRestoreScreen()
{
    2c14:	                   lea -24(sp),sp
    2c18:	                   move.l a6,-(sp)
    2c1a:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    2c1c:	                   move.l #14675968,16(sp)
  //custom->color[0] = 0xf00;
  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    2c24:	                   move.l 1cc96 <CstCleanupQueueDrawBuffer>,d0
    2c2a:	,----------------- beq.w 2e3c <CstRestoreScreen+0x228>
    2c2e:	|                  move.l 1cc8e <CstDrawBuffer>,d0
    2c34:	+----------------- beq.w 2e3c <CstRestoreScreen+0x228>
    return;
  } 

  WaitBlit();
    2c38:	|                  move.l 1cd72 <GfxBase>,d0
    2c3e:	|                  movea.l d0,a6
    2c40:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    2c44:	|                  movea.l 16(sp),a0
    2c48:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    2c4e:	|                  movea.l 16(sp),a0
    2c52:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    2c58:	|                  movea.l 16(sp),a0
    2c5c:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    2c62:	|     ,----------- bra.w 2e30 <CstRestoreScreen+0x21c>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3
    2c66:	|  ,--|----------> movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2c6c:	|  |  |            move.l 4(a0),d0
    2c70:	|  |  |     ,----- beq.s 2c86 <CstRestoreScreen+0x72>
    2c72:	|  |  |     |      movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2c78:	|  |  |     |      movea.l 4(a0),a0
    2c7c:	|  |  |     |      move.l 16(a0),d0
    2c80:	|  |  |     |      moveq #2,d1
    2c82:	|  |  |     |      cmp.l d0,d1
    2c84:	|  |  |     |  ,-- bge.s 2c94 <CstRestoreScreen+0x80>
      || CstCleanupQueueDrawBuffer->person == NULL)
    2c86:	|  |  |     '--|-> movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2c8c:	|  |  |        |   move.l 4(a0),d0
    2c90:	|  |  |  ,-----|-- bne.w 2dfe <CstRestoreScreen+0x1ea>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2c94:	|  |  |  |     '-> move.l 1ccba <winWidth>,d0
    2c9a:	|  |  |  |         lsr.l #3,d0
    2c9c:	|  |  |  |         move.l d0,d1
    2c9e:	|  |  |  |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2ca4:	|  |  |  |         move.w 8(a0),d0
    2ca8:	|  |  |  |         add.w d0,d0
    2caa:	|  |  |  |         sub.w d0,d1
    2cac:	|  |  |  |         movea.l 16(sp),a0
    2cb0:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2cb4:	|  |  |  |         move.l 1ccba <winWidth>,d0
    2cba:	|  |  |  |         lsr.l #3,d0
    2cbc:	|  |  |  |         move.l d0,d1
    2cbe:	|  |  |  |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2cc4:	|  |  |  |         move.w 8(a0),d0
    2cc8:	|  |  |  |         add.w d0,d0
    2cca:	|  |  |  |         sub.w d0,d1
    2ccc:	|  |  |  |         movea.l 16(sp),a0
    2cd0:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2cd4:	|  |  |  |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2cda:	|  |  |  |         move.w 14(a0),d0
    2cde:	|  |  |  |         move.w d0,d0
    2ce0:	|  |  |  |         andi.l #65535,d0
    2ce6:	|  |  |  |         move.l 1ccba <winWidth>,d1
    2cec:	|  |  |  |         move.l d1,-(sp)
    2cee:	|  |  |  |         move.l d0,-(sp)
    2cf0:	|  |  |  |         jsr 17ea4 <__mulsi3>
    2cf6:	|  |  |  |         addq.l #8,sp
    2cf8:	|  |  |  |         move.l d0,d1
    2cfa:	|  |  |  |         lsr.l #3,d1
    2cfc:	|  |  |  |         move.l 1cc7c <CstBackDrop>,d0
    2d02:	|  |  |  |         add.l d0,d1
    2d04:	|  |  |  |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2d0a:	|  |  |  |         move.w 12(a0),d0
    2d0e:	|  |  |  |         move.w d0,d0
    2d10:	|  |  |  |         andi.l #65535,d0
    2d16:	|  |  |  |         move.l d1,d2
    2d18:	|  |  |  |         add.l d0,d2
    2d1a:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2d1e:	|  |  |  |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2d24:	|  |  |  |         move.w 14(a0),d0
    2d28:	|  |  |  |         move.w d0,d0
    2d2a:	|  |  |  |         andi.l #65535,d0
    2d30:	|  |  |  |         move.l 1ccba <winWidth>,d1
    2d36:	|  |  |  |         move.l d1,-(sp)
    2d38:	|  |  |  |         move.l d0,-(sp)
    2d3a:	|  |  |  |         jsr 17ea4 <__mulsi3>
    2d40:	|  |  |  |         addq.l #8,sp
    2d42:	|  |  |  |         move.l d0,d1
    2d44:	|  |  |  |         lsr.l #3,d1
    2d46:	|  |  |  |         move.l 1cc8e <CstDrawBuffer>,d0
    2d4c:	|  |  |  |         add.l d0,d1
    2d4e:	|  |  |  |         movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2d54:	|  |  |  |         move.w 12(a0),d0
    2d58:	|  |  |  |         move.w d0,d0
    2d5a:	|  |  |  |         andi.l #65535,d0
    2d60:	|  |  |  |         move.l d1,d2
    2d62:	|  |  |  |         add.l d0,d2
    2d64:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2d68:	|  |  |  |         clr.l 20(sp)
    2d6c:	|  |  |  |     ,-- bra.w 2df4 <CstRestoreScreen+0x1e0>
      {
        custom->bltapt = (APTR) bltapt;
    2d70:	|  |  |  |  ,--|-> move.l 28(sp),d0
    2d74:	|  |  |  |  |  |   movea.l 16(sp),a0
    2d78:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    2d7c:	|  |  |  |  |  |   move.l 24(sp),d0
    2d80:	|  |  |  |  |  |   movea.l 16(sp),a0
    2d84:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2d88:	|  |  |  |  |  |   movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2d8e:	|  |  |  |  |  |   move.w 10(a0),d0
    2d92:	|  |  |  |  |  |   lsl.w #6,d0
    2d94:	|  |  |  |  |  |   movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2d9a:	|  |  |  |  |  |   move.w 8(a0),d1
    2d9e:	|  |  |  |  |  |   add.w d1,d0
    2da0:	|  |  |  |  |  |   movea.l 16(sp),a0
    2da4:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2da8:	|  |  |  |  |  |   move.l 1ccba <winWidth>,d0
    2dae:	|  |  |  |  |  |   lsr.l #3,d0
    2db0:	|  |  |  |  |  |   move.l 1ccbe <winHeight>,d1
    2db6:	|  |  |  |  |  |   move.l d1,-(sp)
    2db8:	|  |  |  |  |  |   move.l d0,-(sp)
    2dba:	|  |  |  |  |  |   jsr 17ea4 <__mulsi3>
    2dc0:	|  |  |  |  |  |   addq.l #8,sp
    2dc2:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2dc6:	|  |  |  |  |  |   move.l 1ccba <winWidth>,d0
    2dcc:	|  |  |  |  |  |   lsr.l #3,d0
    2dce:	|  |  |  |  |  |   move.l 1ccbe <winHeight>,d1
    2dd4:	|  |  |  |  |  |   move.l d1,-(sp)
    2dd6:	|  |  |  |  |  |   move.l d0,-(sp)
    2dd8:	|  |  |  |  |  |   jsr 17ea4 <__mulsi3>
    2dde:	|  |  |  |  |  |   addq.l #8,sp
    2de0:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2de4:	|  |  |  |  |  |   move.l 1cd72 <GfxBase>,d0
    2dea:	|  |  |  |  |  |   movea.l d0,a6
    2dec:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2df0:	|  |  |  |  |  |   addq.l #1,20(sp)
    2df4:	|  |  |  |  |  '-> moveq #4,d0
    2df6:	|  |  |  |  |      cmp.l 20(sp),d0
    2dfa:	|  |  |  |  '----- bge.w 2d70 <CstRestoreScreen+0x15c>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    2dfe:	|  |  |  '-------> move.l 1cc96 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2e06:	|  |  |            movea.l 1cc96 <CstCleanupQueueDrawBuffer>,a0
    2e0c:	|  |  |            move.l 16(a0),d0
    2e10:	|  |  |            move.l d0,1cc96 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2e16:	|  |  |            move.l 12(sp),8(sp)
    2e1c:	|  |  |            move.l 1cd66 <SysBase>,d0
    2e22:	|  |  |            movea.l d0,a6
    2e24:	|  |  |            movea.l 8(sp),a1
    2e28:	|  |  |            jsr -690(a6)
    todelete = NULL;
    2e2c:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    2e30:	|  |  '----------> move.l 1cc96 <CstCleanupQueueDrawBuffer>,d0
    2e36:	|  '-------------- bne.w 2c66 <CstRestoreScreen+0x52>
    2e3a:	|              ,-- bra.s 2e3e <CstRestoreScreen+0x22a>
    return;
    2e3c:	'--------------|-> nop
  }
  //custom->color[0] = 0x000;
}
    2e3e:	               '-> move.l (sp)+,d2
    2e40:	                   movea.l (sp)+,a6
    2e42:	                   lea 24(sp),sp
    2e46:	                   rts

00002e48 <CstScaleSprite>:

__attribute__((optimize("Ofast"))) 
void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    2e48:	                                                                               lea -44(sp),sp
    2e4c:	                                                                               movem.l d2-d7/a2-a6,-(sp)
    2e50:	                                                                               movea.l 92(sp),a2
    2e54:	                                                                               move.l 96(sp),80(sp)
    2e5a:	                                                                               move.l 100(sp),d4
    2e5e:	                                                                               move.l 104(sp),56(sp)
    2e64:	                                                                               move.l 108(sp),d2
    2e68:	                                                                               move.w d4,d3
    2e6a:	                                                                               move.w 58(sp),d6
    2e6e:	                                                                               movea.w d2,a6
  if( single->width == 320)
  {
    single->width = 320;
  }

  UBYTE *mask = CstDrawZBuffer( single, zBuffer, x, y);
    2e70:	                                                                               movea.w d6,a5
    2e72:	                                                                               movea.w d4,a4
    2e74:	                                                                               move.l a5,-(sp)
    2e76:	                                                                               move.l a4,-(sp)
    2e78:	                                                                               move.l 1cdc2 <zBuffer>,-(sp)
    2e7e:	                                                                               move.l a2,-(sp)
    2e80:	                                                                               jsr 15e4 <CstDrawZBuffer>
    2e86:	                                                                               move.l d0,d5

  UWORD *destination = 0;
  switch(destinationtype)
    2e88:	                                                                               lea 16(sp),sp
    2e8c:	                                                                               moveq #1,d0
    2e8e:	                                                                               cmp.w d2,d0
    2e90:	                                                ,----------------------------- beq.w 32a2 <CstScaleSprite+0x45a>
    2e94:	                                                |                              moveq #2,d1
    2e96:	                                                |                              cmp.w d2,d1
    2e98:	                                                |                       ,----- beq.w 315c <CstScaleSprite+0x314>
    2e9c:	                                                |                       |      suba.l a3,a3
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    if(y + single->height < 0) {
    2e9e:	                                                |  ,--------------------|----> move.l 4(a2),d1
    2ea2:	                                                |  |                    |      move.l a5,d0
    2ea4:	                                                |  |                    |      add.l d1,d0
  if( y < 0) {
    2ea6:	                                                |  |                    |      tst.w d6
    2ea8:	                                                |  |           ,--------|----- blt.w 3178 <CstScaleSprite+0x330>
      return;
    }
    ystartdst = 0;
    ystartsrc = y*-1;
    blitheight = single->height+y;
  } else if(y+single->height > (int) winHeight) {
    2eac:	                                                |  |           |  ,-----|----> movea.l 1ccbe <winHeight>,a0
    2eb2:	                                                |  |           |  |     |      cmp.l a0,d0
    2eb4:	                                                |  |  ,--------|--|-----|----- ble.w 32ac <CstScaleSprite+0x464>
    if(y  > (int) winHeight) {
    2eb8:	                                                |  |  |        |  |     |      cmpa.l a5,a0
    2eba:	                     ,--------------------------|--|--|--------|--|-----|----- blt.w 336e <CstScaleSprite+0x526>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    ystartdst = y;
    2ebe:	                     |                          |  |  |        |  |     |      move.l a5,44(sp)
    ystartsrc = 0;
    blitheight = winHeight-y;
    2ec2:	                     |                          |  |  |        |  |     |      suba.l a5,a0
    2ec4:	                     |                          |  |  |        |  |     |      move.l a0,66(sp)
    ystartsrc = 0;
    2ec8:	                     |                          |  |  |        |  |     |      suba.l a1,a1


  if( x < 0) 
  { //Leftmost part outside screen

    if(x + single->width < 0) {
    2eca:	                     |                          |  |  |  ,-----|--|-----|----> move.l (a2),d1
    2ecc:	                     |                          |  |  |  |     |  |     |      move.l a4,d0
    2ece:	                     |                          |  |  |  |     |  |     |      add.l d1,d0
  if( x < 0) 
    2ed0:	                     |                          |  |  |  |     |  |     |      tst.w d3
    2ed2:	                     |                          |  |  |  |     |  |  ,--|----- blt.w 3198 <CstScaleSprite+0x350>
      *CstBackDropBufferApplyCursor++ = blitheight;
      *CstBackDropBufferApplyCursor++ = 0;
      *CstBackDropBufferApplyCursor++ = ystartdst;
      *CstBackDropBufferApplyCursor = 0;
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2ed6:	                     |                          |  |  |  |     |  |  |  |  ,-> move.l 1ccba <winWidth>,d3
    2edc:	                     |                          |  |  |  |     |  |  |  |  |   cmp.l d3,d0
    2ede:	                     |                          |  |  |  |  ,--|--|--|--|--|-- ble.w 32ba <CstScaleSprite+0x472>

    if(x - single->width > (int) winWidth)
    2ee2:	                     |                          |  |  |  |  |  |  |  |  |  |   suba.l d1,a4
    2ee4:	                     |                          |  |  |  |  |  |  |  |  |  |   cmpa.l d3,a4
    2ee6:	                     +--------------------------|--|--|--|--|--|--|--|--|--|-- bgt.w 336e <CstScaleSprite+0x526>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
      return;
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    cutwordssource = (x+single->width - winWidth)/16;
    2eea:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d2
    2eec:	                     |                          |  |  |  |  |  |  |  |  |  |   sub.l d3,d2
    2eee:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #4,d2
    2ef0:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d2,d6
    cutmaskpixel = 0;    
    bltapt = ((ULONG) mask)+ystartsrc*single->width/8;
    2ef2:	                     |                          |  |  |  |  |  |  |  |  |  |   lea 17ea4 <__mulsi3>,a4
    2ef8:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a1,-(sp)
    2efa:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,-(sp)
    2efc:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d1,56(sp)
    2f00:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2f02:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2f04:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2f06:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2f08:	                     |                          |  |  |  |  |  |  |  |  |  |   add.l 24(a2),d0
    2f0c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2f10:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 44(sp),-(sp)
    2f14:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l d3,-(sp)
    2f16:	                     |                          |  |  |  |  |  |  |  |  |  |   jsr (a4)
    2f18:	                     |                          |  |  |  |  |  |  |  |  |  |   addq.l #8,sp
    2f1a:	                     |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d0
    2f1c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2f1e:	                     |                          |  |  |  |  |  |  |  |  |  |   asr.w #4,d7
    2f20:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a0
    2f22:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d7,a1
    2f24:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a1
    2f26:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.l a1,a3
    2f28:	                     |                          |  |  |  |  |  |  |  |  |  |   lea (0,a3,d0.l),a5
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    bltcon0 = 0xfca + ((x%16) << 12);
    2f2c:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #15,d0
    2f2e:	                     |                          |  |  |  |  |  |  |  |  |  |   and.l d4,d0
    bltcon1 = ((x%16) << 12);
    bltalwm = 0xffff << (x%16); 
    2f30:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l #65535,a4
    2f36:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l a4,d7
    2f38:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d0,d7
    2f3a:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.l d7,a4
      CstCleanupQueueDrawBuffer->height = blitheight;
    2f3c:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->x = x;
      CstCleanupQueueDrawBuffer->y = y;
      CstCleanupQueueDrawBuffer->person = person; 
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2f42:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w a0,a0
    2f44:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w a0,66(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2f48:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w 46(sp),44(sp)
      *CstBackDropBufferApplyCursor = 0;
    }
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2f4e:	                     |                          |  |  |  |  |  |  |  |  |  |   movea.w d2,a3
    2f50:	                     |                          |  |  |  |  |  |  |  |  |  |   adda.w d2,a3
    bltcon0 = 0xfca + ((x%16) << 12);
    2f52:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d7
    2f54:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.l d7,d0
  custom->bltalwm = bltalwm;
  custom->bltamod = bltamod;
  custom->bltbmod = bltbmod;
  custom->bltcmod = bltcmod;
  custom->bltdmod = bltdmod;
  custom->bltcon0 = bltcon0;
    2f56:	                     |                          |  |  |  |  |  |  |  |  |  |   addi.w #4042,d0
    2f5a:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    2f5e:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d4,d7
    2f60:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #12,d0
    2f62:	                     |                          |  |  |  |  |  |  |  |  |  |   lsl.w d0,d7
    2f64:	                     |                          |  |  |  |  |  |  |  |  |  |   move.w d7,72(sp)
    if( destinationtype == SCREEN)
    2f68:	                     |                          |  |  |  |  |  |  |  |  |  |   move.l 48(sp),d1
    2f6c:	                     |                          |  |  |  |  |  |  |  |  |  |   moveq #1,d7
    2f6e:	                     |                          |  |  |  |  |  |  |  |  |  |   cmp.w a6,d7
    2f70:	            ,--------|--------------------------|--|--|--|--|--|--|--|--|--|-- beq.w 3682 <CstScaleSprite+0x83a>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2f74:	            |        |                          |  |  |  |  |  |  |  |  |  |   movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    2f7a:	            |        |                          |  |  |  |  |  |  |  |  |  |   move.l d1,d0
    2f7c:	   ,--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- bmi.w 372a <CstScaleSprite+0x8e2>
    2f80:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #4,d0
    2f82:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    2f84:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2f86:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2f8c:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2f92:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   lea 8(a0),a1
    2f96:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.l a1,1cc9e <CstBackDropBufferApplyCursor>
    2f9c:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor = 0;
    2fa2:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w 8(a0)
    2fa6:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    2fac:	   |        |        |                          |  |  |  |  |  |  |  |  |  |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2fae:	,--|--------|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> lsr.l #3,d3
    2fb0:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,d4
    2fb2:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   add.w d3,d4
    2fb4:	|  |        |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d1
    2fb6:	|  |  ,-----|--------|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3578 <CstScaleSprite+0x730>
    2fba:	|  |  |  ,--|--------|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #3,d1
    2fbc:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   sub.w d1,d4
  WaitBlit();
    2fbe:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l #118130,d3
    2fc4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    2fc6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    2fc8:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  custom->bltafwm = bltafwm;
    2fcc:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb35e8>
  custom->bltalwm = bltalwm;
    2fd4:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb35ea>
  custom->bltamod = bltamod;
    2fda:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3608>
  custom->bltbmod = bltbmod;
    2fe0:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3606>
  custom->bltcmod = bltcmod;
    2fe6:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3604>
  custom->bltdmod = bltdmod;
    2fec:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb360a>
  custom->bltcon0 = bltcon0;
    2ff2:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb35e4>
  custom->bltcon1 = bltcon1;  
    2ffa:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb35e6>

  UWORD bltbptplus = (single->width >> 3)*single->height;
    3002:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
  {
    custom->bltapt = (APTR) bltapt;
    custom->bltbpt = (APTR) bltbpt;
    custom->bltcpt = (APTR) bltcpt;
    custom->bltdpt = (APTR) bltdpt;
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3004:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.w 60(sp),d7
    3008:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    300a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d0,d1
    300c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   asr.l #3,d1
    300e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 6(a2),d1
    bltbpt += bltbptplus;
    3012:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d1
    3018:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    301a:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 1ccba <winWidth>,d4
    3020:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   lsr.l #3,d4
    3022:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   muls.w 1ccc0 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    3028:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    302e:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
    custom->bltbpt = (APTR) bltbpt;
    3034:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb35f0>
    custom->bltcpt = (APTR) bltcpt;
    303c:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb35ec>
    custom->bltdpt = (APTR) bltdpt;
    3042:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3048:	|  |  |  |  |        |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    304a:	|  |  |  |  |  ,-----|--------------------------|--|--|--|--|--|--|--|--|--|-- blt.w 3476 <CstScaleSprite+0x62e>
    304e:	|  |  |  |  |  |  ,--|--------------------------|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3050:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3052:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    3054:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3056:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
    bltbpt += bltbptplus;
    305c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a4
    3060:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    3062:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    bltdpt += bltcptplus;
    WaitBlit();
    3064:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    3066:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3068:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    306c:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    306e:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
    custom->bltbpt = (APTR) bltbpt;
    3074:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb35f0>
    custom->bltcpt = (APTR) bltcpt;
    307a:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb35ec>
    custom->bltdpt = (APTR) bltdpt;
    3080:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3086:	|  |  |  |  |  |  |  |                          |  |  |  |  |  |  |  |  |  |   tst.l d0
    3088:	|  |  |  |  |  |  |  |                 ,--------|--|--|--|--|--|--|--|--|--|-- blt.w 34b8 <CstScaleSprite+0x670>
    308c:	|  |  |  |  |  |  |  |                 |     ,--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    308e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3090:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    3092:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3094:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
    bltbpt += bltbptplus;
    309a:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    309c:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    309e:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    30a0:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    30a2:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    30a6:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    30a8:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
    custom->bltbpt = (APTR) bltbpt;
    30ae:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb35f0>
    custom->bltcpt = (APTR) bltcpt;
    30b4:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb35ec>
    custom->bltdpt = (APTR) bltdpt;
    30ba:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    30c0:	|  |  |  |  |  |  |  |                 |     |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    30c2:	|  |  |  |  |  |  |  |           ,-----|-----|--|--|--|--|--|--|--|--|--|--|-- blt.w 34f6 <CstScaleSprite+0x6ae>
    30c6:	|  |  |  |  |  |  |  |           |     |  ,--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    30c8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    30ca:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    30cc:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    30ce:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
    bltbpt += bltbptplus;
    30d4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l a3,a4
    bltcpt += bltcptplus;
    30d6:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   adda.l d4,a5
    WaitBlit();
    30d8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    30da:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    30dc:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    30e0:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    30e2:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
    custom->bltbpt = (APTR) bltbpt;
    30e8:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb35f0>
    custom->bltcpt = (APTR) bltcpt;
    30ee:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb35ec>
    custom->bltdpt = (APTR) bltdpt;
    30f4:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    30fa:	|  |  |  |  |  |  |  |           |     |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    30fc:	|  |  |  |  |  |  |  |     ,-----|-----|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 3534 <CstScaleSprite+0x6ec>
    3100:	|  |  |  |  |  |  |  |     |     |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    3102:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d2,d0
    3104:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d0
    3106:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d0
    3108:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
    bltbpt += bltbptplus;
    310e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    3112:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.l a5,d4
    WaitBlit();
    3114:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    3116:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    3118:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    311c:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    311e:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
    custom->bltbpt = (APTR) bltbpt;
    3124:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb35f0>
    custom->bltcpt = (APTR) bltcpt;
    312a:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb35ec>
    custom->bltdpt = (APTR) bltdpt;
    3130:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3136:	|  |  |  |  |  |  |  |     |     |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   tst.l d0
    3138:	|  |  |  |  |  |  |  |  ,--|-----|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-- blt.w 3452 <CstScaleSprite+0x60a>
    313c:	|  |  |  |  |  |  |  |  |  |  ,--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|-> asr.l #4,d0
    313e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d0,d2
    3140:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   add.w d7,d2
    3142:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   sub.w d6,d2
    3144:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
    WaitBlit();
    314a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l d3,a0
    314c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movea.l (a0),a6
    314e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   jsr -228(a6)
  }   

}
    3152:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    3156:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   lea 44(sp),sp
    315a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |   rts
      CstApplyBackDropCounter = 2;
    315c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-> move.w #2,1cc88 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    3164:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   movea.l 1cc7c <CstBackDrop>,a3
    if(y + single->height < 0) {
    316a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l 4(a2),d1
    316e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   move.l a5,d0
    3170:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   add.l d1,d0
  if( y < 0) {
    3172:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |   tst.w d6
    3174:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----|-- bge.w 2eac <CstScaleSprite+0x64>
    if(y + single->height < 0) {
    3178:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-----|-----|-> tst.l d0
    317a:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|-----|-- blt.w 336e <CstScaleSprite+0x526>
    ystartsrc = y*-1;
    317e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a5,d7
    3180:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   neg.l d7
    3182:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   movea.l d7,a1
    blitheight = single->height+y;
    3184:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l d0,66(sp)
    ystartdst = 0;
    3188:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   clr.l 44(sp)
    if(x + single->width < 0) {
    318c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l (a2),d1
    318e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   move.l a4,d0
    3190:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   add.l d1,d0
  if( x < 0) 
    3192:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     |   tst.w d3
    3194:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |     '-- bge.w 2ed6 <CstScaleSprite+0x8e>
    if(x + single->width < 0) {
    3198:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '-------> tst.l d0
    319a:	|  |  |  |  |  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|----------------- blt.w 336e <CstScaleSprite+0x526>
    cutwordssource = (x*-1)/16; 
    319e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d4,d0
    31a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addi.w #15,d0
    31a4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  asr.w #4,d0
    31a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.w d0
    31a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,78(sp)
    31ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.w d0,d6
    cutmaskpixel = (x*-1)%16;   
    31ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a4,d0
    31b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  neg.l d0
    31b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d2
    31b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  and.l d0,d2
    31b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d2,84(sp)
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    31ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 1ccba <winWidth>,d3
    31c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lea 17ea4 <__mulsi3>,a4
    31c6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d3,-(sp)
    31c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),-(sp)
    31cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l d1,56(sp)
    31d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l a1,60(sp)
    31d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  jsr (a4)
    31d6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  addq.l #8,sp
    31d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  lsr.l #3,d0
    if( cutmaskpixel > 0)
    31da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  move.l 48(sp),d1
    31de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  movea.l 52(sp),a1
    31e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  tst.l d2
    31e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.w 3384 <CstScaleSprite+0x53c>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    31e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lea (-2,a3,d0.l),a5
      bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    31ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a0
    31f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         subq.w #1,a0
      bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    31f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #16,d7
    31f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         sub.l d2,d7
    31f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d7,d2
    31f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d0
    31fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.l d0,d2
  custom->bltcon0 = bltcon0;
    31fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addi.w #4042,d2
    3200:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d2,70(sp)
  custom->bltcon1 = bltcon1;  
    3204:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #12,d2
    3206:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsl.w d2,d7
    3208:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d7,72(sp)
      extrawords = 1;
    320c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    320e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 78(sp),a3
    3212:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l a3,a3
    3214:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a1,-(sp)
    3216:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,-(sp)
    3218:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d1,56(sp)
    321c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l a0,60(sp)
    3220:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         jsr (a4)
    3222:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         addq.l #8,sp
    3224:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         lsr.l #3,d0
    3226:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d5
    3228:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    322a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.l 24(a2),a3
    322e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         add.l a3,d0
    3230:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3234:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    323a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    323e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #0,d0
    3240:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         not.w d0
    3242:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 84(sp),d7
    3246:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         asr.l d7,d0
    3248:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    324c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.l 52(sp),a0
    3250:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         movea.w a0,a3
    3252:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         adda.w a0,a3
    if( destinationtype == SCREEN)
    3254:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         move.l 48(sp),d1
    3258:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #1,d0
    325a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.w a6,d0
    325c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  ,----- beq.w 33ea <CstScaleSprite+0x5a2>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    3260:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  ,-> movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    3266:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l d1,d0
    3268:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   asr.l #4,d0
    326a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w 78(sp),d0
    326e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d2,d0
    3270:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3272:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 68(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    3278:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    327c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lea 8(a0),a1
    3280:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.l a1,1cc9e <CstBackDropBufferApplyCursor>
    3286:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w 46(sp),6(a0)
      *CstBackDropBufferApplyCursor = 0;
    328c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   clr.w 8(a0)
    bltalwm = 0; //Last Word of this channel almost masked out
    3290:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3292:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   lsr.l #3,d3
    3294:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   move.w a3,d4
    3296:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   add.w d3,d4
    3298:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |  |   tst.l d1
    329a:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bge.w 2fba <CstScaleSprite+0x172>
    329e:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--|-- bra.w 3578 <CstScaleSprite+0x730>
      destination = (UWORD *) CstDrawBuffer;      
    32a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|--|--|--|--------|--|--|-> movea.l 1cc8e <CstDrawBuffer>,a3
      break;
    32a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |     '--|--|--|--------|--|--|-- bra.w 2e9e <CstScaleSprite+0x56>
    ystartdst = y;
    32ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        '--|--|--------|--|--|-> move.l a5,44(sp)
    blitheight = single->height;
    32b0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   move.l d1,66(sp)
    ystartsrc = 0;
    32b4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |  |        |  |  |   suba.l a1,a1
    32b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '--|--------|--|--|-- bra.w 2eca <CstScaleSprite+0x82>
    bltapt = ((ULONG) mask) +ystartsrc*single->width/8;
    32ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |              '--------|--|--|-> lea 17ea4 <__mulsi3>,a4
    32c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l a1,-(sp)
    32c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,-(sp)
    32c4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d1,56(sp)
    32c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    32ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    32cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    32ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l d0,d5
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    32d0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.l 24(a2),d0
    32d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d0,62(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    32d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 44(sp),-(sp)
    32dc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l d3,-(sp)
    32de:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   jsr (a4)
    32e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addq.l #8,sp
    32e2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsr.l #3,d0
    32e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d6
    32e6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   asr.w #4,d6
    32e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w d6,a0
    32ea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a0
    32ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   adda.l a0,a3
    32ee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lea (0,a3,d0.l),a5
      CstCleanupQueueDrawBuffer->height = blitheight;
    32f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    32f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   add.w d6,d6
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    32fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   movea.w 46(sp),a3
    bltcon0 = 0xfca + ((x%16) << 12);
    32fe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    3300:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #12,d7
    3302:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
  custom->bltcon0 = bltcon0;
    3304:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   addi.w #4042,d0
    3308:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,70(sp)
  custom->bltcon1 = bltcon1;  
    330c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d4,d0
    330e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   lsl.w d7,d0
    3310:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.w d0,72(sp)
    if( destinationtype == SCREEN)
    3314:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   move.l 48(sp),d1
    3318:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   moveq #1,d7
    331a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                       |  |  |   cmp.w a6,d7
    331c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    ,--|--|--|-- beq.w 3612 <CstScaleSprite+0x7ca>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    3320:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    3326:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |                    |  |  |  |   move.l d1,d0
    3328:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,--------|--|--|--|-- bmi.w 36f0 <CstScaleSprite+0x8a8>
    332c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   asr.l #4,d0
    332e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   addq.w #1,d0
    3330:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3332:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3338:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    333c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   lea 8(a0),a1
    3340:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.l a1,1cc9e <CstBackDropBufferApplyCursor>
    3346:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor = 0;
    334a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w 8(a0)
    334e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   move.w #-1,76(sp)
    3354:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    3358:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    335a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   clr.w d6
    extrawords = 1;
    335c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |        |  |  |  |   moveq #1,d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    335e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,--|--------|--|--|--|-> lsr.l #3,d3
    3360:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   move.w a3,d4
    3362:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   add.w d3,d4
    3364:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |  |        |  |  |  |   tst.l d1
    3366:	|  |  |  +--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bge.w 2fba <CstScaleSprite+0x172>
    336a:	|  |  +--|--|--|--|--|--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-- bra.w 3578 <CstScaleSprite+0x730>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    336e:	|  |  |  |  |  |  |  '--|--|--|--|--|--|--|--|--------|--|--------|--|--|--|-> move.l #99117,92(sp)
}
    3376:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   movem.l (sp)+,d2-d7/a2-a6
    337a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   lea 44(sp),sp
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    337e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  |  |  |   jmp 17518 <KPrintF>
      bltcpt = ((ULONG) destination) + ystartdst*winWidth/8;
    3384:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |  '--|--|-> lea (0,a3,d0.l),a5
    3388:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a0
    338c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w 72(sp)
    3390:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w #4042,70(sp)
      extrawords = 0;
    3396:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   clr.w d2
    bltapt = ((ULONG) mask)+cutwordssource*2+ystartsrc*single->width/8;
    3398:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 78(sp),a3
    339c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l a3,a3
    339e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a1,-(sp)
    33a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,-(sp)
    33a2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d1,56(sp)
    33a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l a0,60(sp)
    33aa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   jsr (a4)
    33ac:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   addq.l #8,sp
    33ae:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   lsr.l #3,d0
    33b0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d5
    33b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l d0,d5
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    33b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.l 24(a2),a3
    33b8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   add.l a3,d0
    33ba:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l d0,62(sp)
      CstCleanupQueueDrawBuffer->height = blitheight;
    33be:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w 68(sp),60(sp)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    33c4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w 46(sp),a4
  UWORD bltafwm = 0xffff >> cutmaskpixel;
    33c8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #0,d0
    33ca:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   not.w d0
    33cc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 84(sp),d7
    33d0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   asr.l d7,d0
    33d2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.w d0,76(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    33d6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.l 52(sp),a0
    33da:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   movea.w a0,a3
    33dc:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   adda.w a0,a3
    if( destinationtype == SCREEN)
    33de:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   move.l 48(sp),d1
    33e2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   moveq #1,d0
    33e4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  |   cmp.w a6,d0
    33e6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     |  '-- bne.w 3260 <CstScaleSprite+0x418>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    33ea:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |     '----> move.l 1cc96 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    33f0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l 1cd66 <SysBase>,a6
    33f6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #20,d0
    33f8:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            moveq #0,d1
    33fa:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            jsr -684(a6)
    33fe:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            movea.l d0,a0
    3400:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d0,1cc96 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    3406:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    340a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    340c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    3412:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3418:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l (a2),d1
    341a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |        |            move.l d1,d0
    341c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     ,--|----------- bmi.w 3760 <CstScaleSprite+0x918>
    3420:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            asr.l #4,d0
    3422:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w 78(sp),d0
    3426:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            add.w d2,d0
    3428:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    342c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3432:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    3436:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    343a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            move.l 1ccba <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    3440:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |     |  |            suba.l a4,a4
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3442:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  ,--|--|----------> lsr.l #3,d3
    3444:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w a3,d4
    3446:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d3,d4
    3448:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d1
    344a:	|  |  |  +--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bge.w 2fba <CstScaleSprite+0x172>
    344e:	|  |  +--|--|--|--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------- bra.w 3578 <CstScaleSprite+0x730>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3452:	|  |  |  |  |  |  |     >--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    3454:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    3456:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    3458:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d0,d2
    345a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d2
    345c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d2
    345e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d2,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
    WaitBlit();
    3464:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    3466:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    3468:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
}
    346c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movem.l (sp)+,d2-d7/a2-a6
    3470:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            lea 44(sp),sp
    3474:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            rts
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3476:	|  |  |  |  |  >--|-----|--|--|--|--|--|--|--|--------|--|--|--|--|----------> moveq #15,d1
    3478:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.l d1,d0
    347a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            asr.l #4,d0
    347c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d2,d0
    347e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            add.w d7,d0
    3480:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            sub.w d6,d0
    3482:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
    bltbpt += bltbptplus;
    3488:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l 62(sp),a4
    348c:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    348e:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    3490:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l d3,a0
    3492:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            movea.l (a0),a6
    3494:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3498:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    349a:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
    custom->bltbpt = (APTR) bltbpt;
    34a0:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb35f0>
    custom->bltcpt = (APTR) bltcpt;
    34a6:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb35ec>
    custom->bltdpt = (APTR) bltdpt;
    34ac:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    34b2:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  |        |  |  |  |  |            tst.l d0
    34b4:	|  |  |  |  |  |  |     |  |  |  |  |  |  |  '--------|--|--|--|--|----------- bge.w 308c <CstScaleSprite+0x244>
    34b8:	|  |  |  |  |  |  |     |  |  |  |  |  '--|-----------|--|--|--|--|----------> moveq #15,d1
    34ba:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.l d1,d0
    34bc:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            asr.l #4,d0
    34be:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d2,d0
    34c0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            add.w d7,d0
    34c2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            sub.w d6,d0
    34c4:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
    bltbpt += bltbptplus;
    34ca:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    34cc:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    34ce:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l d3,a0
    34d0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            movea.l (a0),a6
    34d2:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    34d6:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    34d8:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
    custom->bltbpt = (APTR) bltbpt;
    34de:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb35f0>
    custom->bltcpt = (APTR) bltcpt;
    34e4:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb35ec>
    custom->bltdpt = (APTR) bltdpt;
    34ea:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    34f0:	|  |  |  |  |  |  |     |  |  |  |  |     |           |  |  |  |  |            tst.l d0
    34f2:	|  |  |  |  |  |  |     |  |  |  |  |     '-----------|--|--|--|--|----------- bge.w 30c6 <CstScaleSprite+0x27e>
    34f6:	|  |  |  |  |  |  |     |  |  |  '--|-----------------|--|--|--|--|----------> moveq #15,d1
    34f8:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.l d1,d0
    34fa:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            asr.l #4,d0
    34fc:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d2,d0
    34fe:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            add.w d7,d0
    3500:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            sub.w d6,d0
    3502:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
    bltbpt += bltbptplus;
    3508:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l a3,a4
    bltcpt += bltcptplus;
    350a:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            adda.l d4,a5
    WaitBlit();
    350c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l d3,a0
    350e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            movea.l (a0),a6
    3510:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3514:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3516:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
    custom->bltbpt = (APTR) bltbpt;
    351c:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a4,dff04c <gcc8_c_support.c.c60c1f2b+0xdb35f0>
    custom->bltcpt = (APTR) bltcpt;
    3522:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb35ec>
    custom->bltdpt = (APTR) bltdpt;
    3528:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    352e:	|  |  |  |  |  |  |     |  |  |     |                 |  |  |  |  |            tst.l d0
    3530:	|  |  |  |  |  |  |     |  |  |     '-----------------|--|--|--|--|----------- bge.w 3100 <CstScaleSprite+0x2b8>
    3534:	|  |  |  |  |  |  |     |  '--|-----------------------|--|--|--|--|----------> moveq #15,d1
    3536:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l d1,d0
    3538:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            asr.l #4,d0
    353a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d2,d0
    353c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.w d7,d0
    353e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            sub.w d6,d0
    3540:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.w d0,dff058 <gcc8_c_support.c.c60c1f2b+0xdb35fc>
    bltbpt += bltbptplus;
    3546:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            lea (0,a4,a3.l),a3
    bltcpt += bltcptplus;
    354a:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            add.l a5,d4
    WaitBlit();
    354c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l d3,a0
    354e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            movea.l (a0),a6
    3550:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            jsr -228(a6)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3554:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l (a2),d0
    custom->bltapt = (APTR) bltapt;
    3556:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
    custom->bltbpt = (APTR) bltbpt;
    355c:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l a3,dff04c <gcc8_c_support.c.c60c1f2b+0xdb35f0>
    custom->bltcpt = (APTR) bltcpt;
    3562:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff048 <gcc8_c_support.c.c60c1f2b+0xdb35ec>
    custom->bltdpt = (APTR) bltdpt;
    3568:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            move.l d4,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    356e:	|  |  |  |  |  |  |     |     |                       |  |  |  |  |            tst.l d0
    3570:	|  |  |  |  |  |  |     |     '-----------------------|--|--|--|--|----------- bge.w 313c <CstScaleSprite+0x2f4>
    3574:	|  |  |  |  |  |  |     '-----------------------------|--|--|--|--|----------- bra.w 3452 <CstScaleSprite+0x60a>
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3578:	|  |  >--|--|--|--|-----------------------------------|--|--|--|--|----------> addq.l #7,d1
    357a:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    357c:	|  |  |  |  |  |  |                                   |  |  |  |  |            sub.w d1,d4
  WaitBlit();
    357e:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l #118130,d3
    3584:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d3,a0
    3586:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l (a0),a6
    3588:	|  |  |  |  |  |  |                                   |  |  |  |  |            jsr -228(a6)
  custom->bltafwm = bltafwm;
    358c:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 76(sp),dff044 <gcc8_c_support.c.c60c1f2b+0xdb35e8>
  custom->bltalwm = bltalwm;
    3594:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a4,dff046 <gcc8_c_support.c.c60c1f2b+0xdb35ea>
  custom->bltamod = bltamod;
    359a:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff064 <gcc8_c_support.c.c60c1f2b+0xdb3608>
  custom->bltbmod = bltbmod;
    35a0:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w a3,dff062 <gcc8_c_support.c.c60c1f2b+0xdb3606>
  custom->bltcmod = bltcmod;
    35a6:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff060 <gcc8_c_support.c.c60c1f2b+0xdb3604>
  custom->bltdmod = bltdmod;
    35ac:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w d4,dff066 <gcc8_c_support.c.c60c1f2b+0xdb360a>
  custom->bltcon0 = bltcon0;
    35b2:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 70(sp),dff040 <gcc8_c_support.c.c60c1f2b+0xdb35e4>
  custom->bltcon1 = bltcon1;  
    35ba:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 72(sp),dff042 <gcc8_c_support.c.c60c1f2b+0xdb35e6>
  UWORD bltbptplus = (single->width >> 3)*single->height;
    35c2:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l (a2),d0
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    35c4:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.w 60(sp),d7
    35c8:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsl.w #6,d7
  UWORD bltbptplus = (single->width >> 3)*single->height;
    35ca:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d0,d1
    35cc:	|  |  |  |  |  |  |                                   |  |  |  |  |            asr.l #3,d1
    35ce:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 6(a2),d1
    bltbpt += bltbptplus;
    35d2:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d1
    35d8:	|  |  |  |  |  |  |                                   |  |  |  |  |            movea.l d1,a3
  UWORD bltcptplus = winWidth/8*winHeight;
    35da:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 1ccba <winWidth>,d4
    35e0:	|  |  |  |  |  |  |                                   |  |  |  |  |            lsr.l #3,d4
    35e2:	|  |  |  |  |  |  |                                   |  |  |  |  |            muls.w 1ccc0 <winHeight+0x2>,d4
    bltcpt += bltcptplus;
    35e8:	|  |  |  |  |  |  |                                   |  |  |  |  |            andi.l #65535,d4
    custom->bltapt = (APTR) bltapt;
    35ee:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l d5,dff050 <gcc8_c_support.c.c60c1f2b+0xdb35f4>
    custom->bltbpt = (APTR) bltbpt;
    35f4:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l 62(sp),dff04c <gcc8_c_support.c.c60c1f2b+0xdb35f0>
    custom->bltcpt = (APTR) bltcpt;
    35fc:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff048 <gcc8_c_support.c.c60c1f2b+0xdb35ec>
    custom->bltdpt = (APTR) bltdpt;
    3602:	|  |  |  |  |  |  |                                   |  |  |  |  |            move.l a5,dff054 <gcc8_c_support.c.c60c1f2b+0xdb35f8>
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3608:	|  |  |  |  |  |  |                                   |  |  |  |  |            tst.l d0
    360a:	|  |  |  |  |  |  '-----------------------------------|--|--|--|--|----------- bge.w 304e <CstScaleSprite+0x206>
    360e:	|  |  |  |  |  '--------------------------------------|--|--|--|--|----------- bra.w 3476 <CstScaleSprite+0x62e>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3612:	|  |  |  |  |                                         |  |  |  |  '----------> move.l 1cc96 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3618:	|  |  |  |  |                                         |  |  |  |               movea.l 1cd66 <SysBase>,a6
    361e:	|  |  |  |  |                                         |  |  |  |               moveq #20,d0
    3620:	|  |  |  |  |                                         |  |  |  |               moveq #0,d1
    3622:	|  |  |  |  |                                         |  |  |  |               jsr -684(a6)
    3626:	|  |  |  |  |                                         |  |  |  |               movea.l d0,a0
    3628:	|  |  |  |  |                                         |  |  |  |               move.l d0,1cc96 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    362e:	|  |  |  |  |                                         |  |  |  |               move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    3632:	|  |  |  |  |                                         |  |  |  |               move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    3634:	|  |  |  |  |                                         |  |  |  |               move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    363a:	|  |  |  |  |                                         |  |  |  |               move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    3640:	|  |  |  |  |                                         |  |  |  |               move.l (a2),d1
    3642:	|  |  |  |  |                                         |  |  |  |               move.l d1,d0
    3644:	|  |  |  |  |                                         |  |  |  |     ,-------- bmi.w 378a <CstScaleSprite+0x942>
    3648:	|  |  |  |  |                                         |  |  |  |     |         asr.l #4,d0
    364a:	|  |  |  |  |                                         |  |  |  |     |         addq.w #1,d0
    364c:	|  |  |  |  |                                         |  |  |  |     |         move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3650:	|  |  |  |  |                                         |  |  |  |     |         move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    3656:	|  |  |  |  |                                         |  |  |  |     |         move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    365a:	|  |  |  |  |                                         |  |  |  |     |         move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    365e:	|  |  |  |  |                                         |  |  |  |     |         move.l 1ccba <winWidth>,d3
    3664:	|  |  |  |  |                                         |  |  |  |     |         move.w #-1,76(sp)
    366a:	|  |  |  |  |                                         |  |  |  |     |         movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    366e:	|  |  |  |  |                                         |  |  |  |     |         suba.l a4,a4
    cutwordssource = 0;
    3670:	|  |  |  |  |                                         |  |  |  |     |         clr.w d6
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    3672:	|  |  |  |  |                                         |  |  |  |  ,--|-------> lsr.l #3,d3
    3674:	|  |  |  |  |                                         |  |  |  |  |  |         move.w a3,d4
    3676:	|  |  |  |  |                                         |  |  |  |  |  |         add.w d3,d4
    3678:	|  |  |  |  |                                         |  |  |  |  |  |         tst.l d1
    367a:	|  |  |  +--|-----------------------------------------|--|--|--|--|--|-------- bge.w 2fba <CstScaleSprite+0x172>
    367e:	|  |  +--|--|-----------------------------------------|--|--|--|--|--|-------- bra.w 3578 <CstScaleSprite+0x730>
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    3682:	|  |  |  |  '-----------------------------------------|--|--|--|--|--|-------> move.l 1cc96 <CstCleanupQueueDrawBuffer>,d3
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    3688:	|  |  |  |                                            |  |  |  |  |  |         movea.l 1cd66 <SysBase>,a6
    368e:	|  |  |  |                                            |  |  |  |  |  |         moveq #20,d0
    3690:	|  |  |  |                                            |  |  |  |  |  |         moveq #0,d1
    3692:	|  |  |  |                                            |  |  |  |  |  |         jsr -684(a6)
    3696:	|  |  |  |                                            |  |  |  |  |  |         movea.l d0,a0
    3698:	|  |  |  |                                            |  |  |  |  |  |         move.l d0,1cc96 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    369e:	|  |  |  |                                            |  |  |  |  |  |         move.l d3,16(a0)
      CstCleanupQueueDrawBuffer->x = x;
    36a2:	|  |  |  |                                            |  |  |  |  |  |         move.w d4,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    36a4:	|  |  |  |                                            |  |  |  |  |  |         move.w 58(sp),2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    36aa:	|  |  |  |                                            |  |  |  |  |  |         move.l 80(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    36b0:	|  |  |  |                                            |  |  |  |  |  |         move.l (a2),d1
    36b2:	|  |  |  |                                            |  |  |  |  |  |         move.l d1,d0
    36b4:	|  |  |  |                                            |  |  |  |  |  |     ,-- bmi.w 37bc <CstScaleSprite+0x974>
    36b8:	|  |  |  |                                            |  |  |  |  |  |     |   asr.l #4,d0
    36ba:	|  |  |  |                                            |  |  |  |  |  |     |   add.w d0,d2
    36bc:	|  |  |  |                                            |  |  |  |  |  |     |   move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    36c0:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    36c6:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    36cc:	|  |  |  |                                            |  |  |  |  |  |     |   move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    36d2:	|  |  |  |                                            |  |  |  |  |  |     |   move.l 1ccba <winWidth>,d3
    36d8:	|  |  |  |                                            |  |  |  |  |  |     |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    36de:	|  |  |  |                                            |  |  |  |  |  |     |   clr.w d2
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    36e0:	|  |  |  |                                            |  |  |  |  |  |  ,--|-> lsr.l #3,d3
    36e2:	|  |  |  |                                            |  |  |  |  |  |  |  |   move.w a3,d4
    36e4:	|  |  |  |                                            |  |  |  |  |  |  |  |   add.w d3,d4
    36e6:	|  |  |  |                                            |  |  |  |  |  |  |  |   tst.l d1
    36e8:	|  |  |  '--------------------------------------------|--|--|--|--|--|--|--|-- bge.w 2fba <CstScaleSprite+0x172>
    36ec:	|  |  '-----------------------------------------------|--|--|--|--|--|--|--|-- bra.w 3578 <CstScaleSprite+0x730>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    36f0:	|  |                                                  |  '--|--|--|--|--|--|-> moveq #15,d0
    36f2:	|  |                                                  |     |  |  |  |  |  |   add.l d1,d0
    36f4:	|  |                                                  |     |  |  |  |  |  |   asr.l #4,d0
    36f6:	|  |                                                  |     |  |  |  |  |  |   addq.w #1,d0
    36f8:	|  |                                                  |     |  |  |  |  |  |   move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    36fa:	|  |                                                  |     |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    3700:	|  |                                                  |     |  |  |  |  |  |   move.w d6,4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3704:	|  |                                                  |     |  |  |  |  |  |   lea 8(a0),a1
    3708:	|  |                                                  |     |  |  |  |  |  |   move.l a1,1cc9e <CstBackDropBufferApplyCursor>
    370e:	|  |                                                  |     |  |  |  |  |  |   move.w a3,6(a0)
      *CstBackDropBufferApplyCursor = 0;
    3712:	|  |                                                  |     |  |  |  |  |  |   clr.w 8(a0)
    3716:	|  |                                                  |     |  |  |  |  |  |   move.w #-1,76(sp)
    371c:	|  |                                                  |     |  |  |  |  |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    3720:	|  |                                                  |     |  |  |  |  |  |   suba.l a4,a4
    cutwordssource = 0;
    3722:	|  |                                                  |     |  |  |  |  |  |   clr.w d6
    extrawords = 1;
    3724:	|  |                                                  |     |  |  |  |  |  |   moveq #1,d2
    3726:	|  |                                                  '-----|--|--|--|--|--|-- bra.w 335e <CstScaleSprite+0x516>
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    372a:	|  '--------------------------------------------------------|--|--|--|--|--|-> moveq #15,d0
    372c:	|                                                           |  |  |  |  |  |   add.l d1,d0
    372e:	|                                                           |  |  |  |  |  |   asr.l #4,d0
    3730:	|                                                           |  |  |  |  |  |   add.w d0,d2
    3732:	|                                                           |  |  |  |  |  |   move.w d2,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    3734:	|                                                           |  |  |  |  |  |   move.w 60(sp),2(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    373a:	|                                                           |  |  |  |  |  |   move.w 66(sp),4(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    3740:	|                                                           |  |  |  |  |  |   lea 8(a0),a1
    3744:	|                                                           |  |  |  |  |  |   move.l a1,1cc9e <CstBackDropBufferApplyCursor>
    374a:	|                                                           |  |  |  |  |  |   move.w 44(sp),6(a0)
      *CstBackDropBufferApplyCursor = 0;
    3750:	|                                                           |  |  |  |  |  |   clr.w 8(a0)
    3754:	|                                                           |  |  |  |  |  |   move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    375a:	|                                                           |  |  |  |  |  |   clr.w d2
    375c:	'-----------------------------------------------------------|--|--|--|--|--|-- bra.w 2fae <CstScaleSprite+0x166>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    3760:	                                                            |  '--|--|--|--|-> moveq #15,d0
    3762:	                                                            |     |  |  |  |   add.l d1,d0
    3764:	                                                            |     |  |  |  |   asr.l #4,d0
    3766:	                                                            |     |  |  |  |   add.w 78(sp),d0
    376a:	                                                            |     |  |  |  |   add.w d2,d0
    376c:	                                                            |     |  |  |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    3770:	                                                            |     |  |  |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    3776:	                                                            |     |  |  |  |   clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    377a:	                                                            |     |  |  |  |   move.w a4,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    377e:	                                                            |     |  |  |  |   move.l 1ccba <winWidth>,d3
    bltalwm = 0; //Last Word of this channel almost masked out
    3784:	                                                            |     |  |  |  |   suba.l a4,a4
    3786:	                                                            '-----|--|--|--|-- bra.w 3442 <CstScaleSprite+0x5fa>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    378a:	                                                                  |  '--|--|-> moveq #15,d0
    378c:	                                                                  |     |  |   add.l d1,d0
    378e:	                                                                  |     |  |   asr.l #4,d0
    3790:	                                                                  |     |  |   addq.w #1,d0
    3792:	                                                                  |     |  |   move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    3796:	                                                                  |     |  |   move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    379c:	                                                                  |     |  |   move.w d6,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    37a0:	                                                                  |     |  |   move.w a3,14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    37a4:	                                                                  |     |  |   move.l 1ccba <winWidth>,d3
    37aa:	                                                                  |     |  |   move.w #-1,76(sp)
    37b0:	                                                                  |     |  |   movea.w #-2,a3
    bltalwm = 0; //Last Word of this channel almost masked out
    37b4:	                                                                  |     |  |   suba.l a4,a4
    cutwordssource = 0;
    37b6:	                                                                  |     |  |   clr.w d6
    37b8:	                                                                  '-----|--|-- bra.w 3672 <CstScaleSprite+0x82a>
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    37bc:	                                                                        |  '-> moveq #15,d0
    37be:	                                                                        |      add.l d1,d0
    37c0:	                                                                        |      asr.l #4,d0
    37c2:	                                                                        |      add.w d0,d2
    37c4:	                                                                        |      move.w d2,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    37c8:	                                                                        |      move.w 60(sp),10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    37ce:	                                                                        |      move.w 66(sp),12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    37d4:	                                                                        |      move.w 44(sp),14(a0)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    37da:	                                                                        |      move.l 1ccba <winWidth>,d3
    37e0:	                                                                        |      move.w #-1,76(sp)
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    37e6:	                                                                        |      clr.w d2
    37e8:	                                                                        '----- bra.w 36e0 <CstScaleSprite+0x898>

000037ec <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    37ec:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    37ee:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    37f4:	move.l 8(sp),d0
    37f8:	movea.l (sp),a0
    37fa:	move.l d0,128(a0)
}
    37fe:	nop
    3800:	addq.l #4,sp
    3802:	rts

00003804 <CstSwapBuffer>:

void CstSwapBuffer( ) {
    3804:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3808:	move.l 1cc8a <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3810:	move.l 1cc8e <CstDrawBuffer>,d0
    3816:	move.l d0,1cc8a <CstViewBuffer>
  CstDrawBuffer = tmp;
    381c:	move.l 16(sp),1cc8e <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    3824:	move.l 1cc92 <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    382c:	move.l 1cc96 <CstCleanupQueueDrawBuffer>,d0
    3832:	move.l d0,1cc92 <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3838:	move.l 12(sp),1cc96 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3840:	move.l 1cc84 <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3848:	move.l 1cc8a <CstViewBuffer>,d0
    384e:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    3852:	move.l 4(sp),d0
    3856:	clr.w d0
    3858:	swap d0
    385a:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    385e:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    3862:	movea.w #118,a0
    3866:	adda.l 8(sp),a0
    386a:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    386c:	movea.w #114,a0
    3870:	adda.l 8(sp),a0
    3874:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3878:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3880:	move.l 4(sp),d0
    3884:	clr.w d0
    3886:	swap d0
    3888:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    388c:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    3890:	movea.w #126,a0
    3894:	adda.l 8(sp),a0
    3898:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    389a:	movea.w #122,a0
    389e:	adda.l 8(sp),a0
    38a2:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    38a6:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    38ae:	move.l 4(sp),d0
    38b2:	clr.w d0
    38b4:	swap d0
    38b6:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    38ba:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    38be:	movea.l 8(sp),a0
    38c2:	lea 134(a0),a0
    38c6:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    38c8:	movea.l 8(sp),a0
    38cc:	lea 130(a0),a0
    38d0:	move.w 2(sp),(a0)

  ptr +=  40*256;
    38d4:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    38dc:	move.l 4(sp),d0
    38e0:	clr.w d0
    38e2:	swap d0
    38e4:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    38e8:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    38ec:	movea.l 8(sp),a0
    38f0:	lea 142(a0),a0
    38f4:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    38f6:	movea.l 8(sp),a0
    38fa:	lea 138(a0),a0
    38fe:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3902:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    390a:	move.l 4(sp),d0
    390e:	clr.w d0
    3910:	swap d0
    3912:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3916:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    391a:	movea.l 8(sp),a0
    391e:	lea 150(a0),a0
    3922:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    3924:	movea.l 8(sp),a0
    3928:	lea 146(a0),a0
    392c:	move.w 2(sp),(a0)

}
    3930:	nop
    3932:	lea 20(sp),sp
    3936:	rts

00003938 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3938:	          lea -80(sp),sp
    393c:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    393e:	          pea 18360 <PutChar+0x3a6>
    3944:	          jsr 17518 <KPrintF>
    394a:	          addq.l #4,sp

  width = width / 8;
    394c:	          move.l 88(sp),d0
    3950:	      ,-- bpl.s 3954 <CstReserveBackdrop+0x1c>
    3952:	      |   addq.l #7,d0
    3954:	      '-> asr.l #3,d0
    3956:	          move.l d0,88(sp)

  if( width < 40) 
    395a:	          moveq #39,d0
    395c:	          cmp.l 88(sp),d0
    3960:	      ,-- blt.s 3976 <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    3962:	      |   pea 1837a <PutChar+0x3c0>
    3968:	      |   jsr 17518 <KPrintF>
    396e:	      |   addq.l #4,sp
    return FALSE;
    3970:	      |   clr.w d0
    3972:	,-----|-- bra.w 3d18 <CstReserveBackdrop+0x3e0>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    3976:	|     '-> pea 183b8 <PutChar+0x3fe>
    397c:	|         jsr 17518 <KPrintF>
    3982:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    3984:	|         move.l 88(sp),-(sp)
    3988:	|         jsr 10ca <CstCreateCopperlist>
    398e:	|         addq.l #4,sp
    3990:	|         move.l d0,1cc84 <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    3996:	|         pea 183d8 <PutChar+0x41e>
    399c:	|         jsr 17518 <KPrintF>
    39a2:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    39a4:	|         move.l 88(sp),d1
    39a8:	|         move.l 92(sp),d0
    39ac:	|         muls.w d1,d0
    39ae:	|         move.w d0,1cc7a <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    39b4:	|         move.w 1cc7a <CstBackdropSizePlane>,d1
    39ba:	|         move.w d1,d0
    39bc:	|         add.w d0,d0
    39be:	|         add.w d0,d0
    39c0:	|         add.w d1,d0
    39c2:	|         move.w d0,1cc78 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    39c8:	|         move.w 1cc78 <CstBackdropSize>,d0
    39ce:	|         move.w d0,d0
    39d0:	|         andi.l #65535,d0
    39d6:	|         move.l d0,72(sp)
    39da:	|         moveq #2,d1
    39dc:	|         move.l d1,68(sp)
    39e0:	|         move.l 1cd66 <SysBase>,d0
    39e6:	|         movea.l d0,a6
    39e8:	|         move.l 72(sp),d0
    39ec:	|         move.l 68(sp),d1
    39f0:	|         jsr -684(a6)
    39f4:	|         move.l d0,64(sp)
    39f8:	|         move.l 64(sp),d0
    39fc:	|         move.l d0,1cc7c <CstBackDrop>
  if( !CstBackDrop)
    3a02:	|         move.l 1cc7c <CstBackDrop>,d0
    3a08:	|     ,-- bne.s 3a1e <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3a0a:	|     |   pea 183ff <PutChar+0x445>
    3a10:	|     |   jsr 17518 <KPrintF>
    3a16:	|     |   addq.l #4,sp
    return FALSE;  
    3a18:	|     |   clr.w d0
    3a1a:	+-----|-- bra.w 3d18 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3a1e:	|     '-> pea 18437 <PutChar+0x47d>
    3a24:	|         jsr 17518 <KPrintF>
    3a2a:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3a2c:	|         move.l 1cc7c <CstBackDrop>,80(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    3a34:	|         clr.l 76(sp)
    3a38:	|     ,-- bra.s 3a4e <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3a3a:	|  ,--|-> move.l 80(sp),d0
    3a3e:	|  |  |   move.l d0,d1
    3a40:	|  |  |   addq.l #4,d1
    3a42:	|  |  |   move.l d1,80(sp)
    3a46:	|  |  |   movea.l d0,a0
    3a48:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3a4a:	|  |  |   addq.l #1,76(sp)
    3a4e:	|  |  '-> move.w 1cc78 <CstBackdropSize>,d0
    3a54:	|  |      lsr.w #2,d0
    3a56:	|  |      move.w d0,d0
    3a58:	|  |      andi.l #65535,d0
    3a5e:	|  |      cmp.l 76(sp),d0
    3a62:	|  '----- bgt.s 3a3a <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3a64:	|         move.w 1cc78 <CstBackdropSize>,d0
    3a6a:	|         move.w d0,d0
    3a6c:	|         andi.l #65535,d0
    3a72:	|         move.l 88(sp),d1
    3a76:	|         add.l d1,d1
    3a78:	|         add.l d1,d0
    3a7a:	|         move.l d0,60(sp)
    3a7e:	|         moveq #2,d0
    3a80:	|         move.l d0,56(sp)
    3a84:	|         move.l 1cd66 <SysBase>,d0
    3a8a:	|         movea.l d0,a6
    3a8c:	|         move.l 60(sp),d0
    3a90:	|         move.l 56(sp),d1
    3a94:	|         jsr -684(a6)
    3a98:	|         move.l d0,52(sp)
    3a9c:	|         move.l 52(sp),d0
    3aa0:	|         move.l d0,1cc8e <CstDrawBuffer>
  if( !CstDrawBuffer)
    3aa6:	|         move.l 1cc8e <CstDrawBuffer>,d0
    3aac:	|     ,-- bne.s 3ac2 <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    3aae:	|     |   pea 1845d <PutChar+0x4a3>
    3ab4:	|     |   jsr 17518 <KPrintF>
    3aba:	|     |   addq.l #4,sp
    return FALSE;  
    3abc:	|     |   clr.w d0
    3abe:	+-----|-- bra.w 3d18 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    3ac2:	|     '-> pea 18497 <PutChar+0x4dd>
    3ac8:	|         jsr 17518 <KPrintF>
    3ace:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    3ad0:	|         move.l #10000,48(sp)
    3ad8:	|         clr.l 44(sp)
    3adc:	|         move.l 1cd66 <SysBase>,d0
    3ae2:	|         movea.l d0,a6
    3ae4:	|         move.l 48(sp),d0
    3ae8:	|         move.l 44(sp),d1
    3aec:	|         jsr -684(a6)
    3af0:	|         move.l d0,40(sp)
    3af4:	|         move.l 40(sp),d0
    3af8:	|         move.l d0,1cc9a <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3afe:	|         move.l 1cc9a <CstBackDropBufferApplyStart>,d0
    3b04:	|     ,-- bne.s 3b1a <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    3b06:	|     |   pea 184bf <PutChar+0x505>
    3b0c:	|     |   jsr 17518 <KPrintF>
    3b12:	|     |   addq.l #4,sp
    return FALSE;  
    3b14:	|     |   clr.w d0
    3b16:	+-----|-- bra.w 3d18 <CstReserveBackdrop+0x3e0>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3b1a:	|     '-> move.l 1cc9a <CstBackDropBufferApplyStart>,d0
    3b20:	|         move.l d0,1cc9e <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    3b26:	|         movea.l 1cc9a <CstBackDropBufferApplyStart>,a0
    3b2c:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3b2e:	|         movea.l 1cc9a <CstBackDropBufferApplyStart>,a0
    3b34:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    3b36:	|         move.w 1cc78 <CstBackdropSize>,d0
    3b3c:	|         move.w d0,d0
    3b3e:	|         andi.l #65535,d0
    3b44:	|         move.l 88(sp),d1
    3b48:	|         add.l d1,d1
    3b4a:	|         add.l d1,d0
    3b4c:	|         move.l d0,36(sp)
    3b50:	|         moveq #2,d1
    3b52:	|         move.l d1,32(sp)
    3b56:	|         move.l 1cd66 <SysBase>,d0
    3b5c:	|         movea.l d0,a6
    3b5e:	|         move.l 36(sp),d0
    3b62:	|         move.l 32(sp),d1
    3b66:	|         jsr -684(a6)
    3b6a:	|         move.l d0,28(sp)
    3b6e:	|         move.l 28(sp),d0
    3b72:	|         move.l d0,1cc8a <CstViewBuffer>
  if( !CstViewBuffer)
    3b78:	|         move.l 1cc8a <CstViewBuffer>,d0
    3b7e:	|     ,-- bne.s 3b94 <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3b80:	|     |   pea 1850a <PutChar+0x550>
    3b86:	|     |   jsr 17518 <KPrintF>
    3b8c:	|     |   addq.l #4,sp
    return FALSE;  
    3b8e:	|     |   clr.w d0
    3b90:	+-----|-- bra.w 3d18 <CstReserveBackdrop+0x3e0>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    3b94:	|     '-> pea 18544 <PutChar+0x58a>
    3b9a:	|         jsr 17518 <KPrintF>
    3ba0:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    3ba2:	|         move.l 1cc8e <CstDrawBuffer>,d1
    3ba8:	|         move.l 88(sp),d0
    3bac:	|     ,-- bpl.s 3bb0 <CstReserveBackdrop+0x278>
    3bae:	|     |   addq.l #3,d0
    3bb0:	|     '-> asr.l #2,d0
    3bb2:	|         add.l d0,d0
    3bb4:	|         add.l d0,d0
    3bb6:	|         add.l d1,d0
    3bb8:	|         move.l d0,1cc8e <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    3bbe:	|         move.l 1cc8a <CstViewBuffer>,d1
    3bc4:	|         move.l 88(sp),d0
    3bc8:	|     ,-- bpl.s 3bcc <CstReserveBackdrop+0x294>
    3bca:	|     |   addq.l #3,d0
    3bcc:	|     '-> asr.l #2,d0
    3bce:	|         add.l d0,d0
    3bd0:	|         add.l d0,d0
    3bd2:	|         add.l d1,d0
    3bd4:	|         move.l d0,1cc8a <CstViewBuffer>
  
  CstZBufferResult = AllocVec( CSTMAXWIDTHSPRITE/8*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3bda:	|         move.l #5200,24(sp)
    3be2:	|         moveq #2,d0
    3be4:	|         move.l d0,20(sp)
    3be8:	|         move.l 1cd66 <SysBase>,d0
    3bee:	|         movea.l d0,a6
    3bf0:	|         move.l 24(sp),d0
    3bf4:	|         move.l 20(sp),d1
    3bf8:	|         jsr -684(a6)
    3bfc:	|         move.l d0,16(sp)
    3c00:	|         move.l 16(sp),d0
    3c04:	|         move.l d0,1ccae <CstZBufferResult>
  CstZBufferWork = AllocVec( (CSTMAXWIDTHSPRITE/8+2)*CSTMAXHEIGHTSPRITE,MEMF_CHIP);
    3c0a:	|         move.l #5600,12(sp)
    3c12:	|         moveq #2,d1
    3c14:	|         move.l d1,8(sp)
    3c18:	|         move.l 1cd66 <SysBase>,d0
    3c1e:	|         movea.l d0,a6
    3c20:	|         move.l 12(sp),d0
    3c24:	|         move.l 8(sp),d1
    3c28:	|         jsr -684(a6)
    3c2c:	|         move.l d0,4(sp)
    3c30:	|         move.l 4(sp),d0
    3c34:	|         move.l d0,1ccb2 <CstZBufferWork>

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    3c3a:	|         move.l 1cc7c <CstBackDrop>,d0
    3c40:	|         clr.l -(sp)
    3c42:	|         pea 5 <_start+0x5>
    3c46:	|         pea 100 <copyString+0x48>
    3c4a:	|         pea 140 <decodeFilename+0x28>
    3c4e:	|         pea 1856c <PutChar+0x5b2>
    3c54:	|         move.l d0,-(sp)
    3c56:	|         jsr 17600 <debug_register_bitmap>
    3c5c:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3c60:	|         move.l 92(sp),d0
    3c64:	|         movea.w d0,a1
    3c66:	|         move.l 88(sp),d0
    3c6a:	|         lsl.w #3,d0
    3c6c:	|         movea.w d0,a0
    3c6e:	|         move.l 1cc8e <CstDrawBuffer>,d0
    3c74:	|         clr.l -(sp)
    3c76:	|         pea 5 <_start+0x5>
    3c7a:	|         move.l a1,-(sp)
    3c7c:	|         move.l a0,-(sp)
    3c7e:	|         pea 1857c <PutChar+0x5c2>
    3c84:	|         move.l d0,-(sp)
    3c86:	|         jsr 17600 <debug_register_bitmap>
    3c8c:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3c90:	|         move.l 92(sp),d0
    3c94:	|         movea.w d0,a1
    3c96:	|         move.l 88(sp),d0
    3c9a:	|         lsl.w #3,d0
    3c9c:	|         movea.w d0,a0
    3c9e:	|         move.l 1cc8a <CstViewBuffer>,d0
    3ca4:	|         clr.l -(sp)
    3ca6:	|         pea 5 <_start+0x5>
    3caa:	|         move.l a1,-(sp)
    3cac:	|         move.l a0,-(sp)
    3cae:	|         pea 1858b <PutChar+0x5d1>
    3cb4:	|         move.l d0,-(sp)
    3cb6:	|         jsr 17600 <debug_register_bitmap>
    3cbc:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3cc0:	|         move.l 1cc84 <CstCopperList>,d0
    3cc6:	|     ,-- beq.s 3cd8 <CstReserveBackdrop+0x3a0>
    3cc8:	|     |   move.l 1cc8e <CstDrawBuffer>,d0
    3cce:	|     +-- beq.s 3cd8 <CstReserveBackdrop+0x3a0>
    3cd0:	|     |   move.l 1cc8a <CstViewBuffer>,d0
    3cd6:	|  ,--|-- bne.s 3cea <CstReserveBackdrop+0x3b2>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3cd8:	|  |  '-> pea 1859a <PutChar+0x5e0>
    3cde:	|  |      jsr 17518 <KPrintF>
    3ce4:	|  |      addq.l #4,sp
    return FALSE;
    3ce6:	|  |      clr.w d0
    3ce8:	+--|----- bra.s 3d18 <CstReserveBackdrop+0x3e0>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    3cea:	|  '----> pea 185c7 <PutChar+0x60d>
    3cf0:	|         jsr 17518 <KPrintF>
    3cf6:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    3cf8:	|         move.l 1cc84 <CstCopperList>,d0
    3cfe:	|         move.l d0,-(sp)
    3d00:	|         jsr 37ec <CstSetCl>
    3d06:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    3d08:	|         pea 185ee <PutChar+0x634>
    3d0e:	|         jsr 17518 <KPrintF>
    3d14:	|         addq.l #4,sp
  return TRUE;
    3d16:	|         moveq #1,d0

}
    3d18:	'-------> movea.l (sp)+,a6
    3d1a:	          lea 80(sp),sp
    3d1e:	          rts

00003d20 <CstUnfreeze>:

void CstUnfreeze() {
    3d20:	       lea -24(sp),sp
    3d24:	       move.l a6,-(sp)
    3d26:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    3d28:	       pea 18611 <PutChar+0x657>
    3d2e:	       jsr 17518 <KPrintF>
    3d34:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    3d36:	       move.l 1ccba <winWidth>,d0
    3d3c:	       lsr.l #3,d0
    3d3e:	       move.l d0,d1
    3d40:	       move.l 1ccbe <winHeight>,d0
    3d46:	       move.l d0,d0
    3d48:	       muls.w d0,d1
    3d4a:	       move.w d1,d0
    3d4c:	       add.w d0,d0
    3d4e:	       add.w d0,d0
    3d50:	       move.w d0,d2
    3d52:	       add.w d1,d2
    3d54:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3d58:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3d60:	       move.l 1ccbe <winHeight>,d0
    3d66:	       move.l d0,d0
    3d68:	       movea.w d0,a1
    3d6a:	       move.l 1ccba <winWidth>,d0
    3d70:	       move.l d0,d0
    3d72:	       movea.w d0,a0
    3d74:	       move.l 1cc80 <CstBackDropBackup>,d0
    3d7a:	       clr.l -(sp)
    3d7c:	       pea 5 <_start+0x5>
    3d80:	       move.l a1,-(sp)
    3d82:	       move.l a0,-(sp)
    3d84:	       pea 181e3 <PutChar+0x229>
    3d8a:	       move.l d0,-(sp)
    3d8c:	       jsr 17600 <debug_register_bitmap>
    3d92:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    3d96:	       move.l 1cc80 <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3d9e:	       move.l 1cc7c <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    3da6:	       clr.l 20(sp)
    3daa:	   ,-- bra.s 3dd0 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3dac:	,--|-> move.l 28(sp),d1
    3db0:	|  |   move.l d1,d0
    3db2:	|  |   addq.l #4,d0
    3db4:	|  |   move.l d0,28(sp)
    3db8:	|  |   move.l 24(sp),d0
    3dbc:	|  |   move.l d0,d2
    3dbe:	|  |   addq.l #4,d2
    3dc0:	|  |   move.l d2,24(sp)
    3dc4:	|  |   movea.l d1,a0
    3dc6:	|  |   move.l (a0),d1
    3dc8:	|  |   movea.l d0,a0
    3dca:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3dcc:	|  |   addq.l #1,20(sp)
    3dd0:	|  '-> move.w 18(sp),d0
    3dd4:	|      lsr.w #2,d0
    3dd6:	|      move.w d0,d0
    3dd8:	|      andi.l #65535,d0
    3dde:	|      cmp.l 20(sp),d0
    3de2:	'----- bgt.s 3dac <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    3de4:	       move.w #2,1cc88 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    3dec:	       move.l 1ccba <winWidth>,d0
    3df2:	       lsr.l #4,d0
    3df4:	       movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    3dfa:	       move.l a0,d1
    3dfc:	       addq.l #2,d1
    3dfe:	       move.l d1,1cc9e <CstBackDropBufferApplyCursor>
    3e04:	       move.l d0,d0
    3e06:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    3e08:	       move.l 1ccbe <winHeight>,d0
    3e0e:	       movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    3e14:	       move.l a0,d1
    3e16:	       addq.l #2,d1
    3e18:	       move.l d1,1cc9e <CstBackDropBufferApplyCursor>
    3e1e:	       move.l d0,d0
    3e20:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e22:	       movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    3e28:	       move.l a0,d0
    3e2a:	       addq.l #2,d0
    3e2c:	       move.l d0,1cc9e <CstBackDropBufferApplyCursor>
    3e32:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    3e34:	       movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    3e3a:	       move.l a0,d0
    3e3c:	       addq.l #2,d0
    3e3e:	       move.l d0,1cc9e <CstBackDropBufferApplyCursor>
    3e44:	       clr.w (a0)
  *CstBackDropBufferApplyCursor = 0;
    3e46:	       movea.l 1cc9e <CstBackDropBufferApplyCursor>,a0
    3e4c:	       clr.w (a0)
  
  if( CstBackDropBackup) {
    3e4e:	       move.l 1cc80 <CstBackDropBackup>,d0
    3e54:	   ,-- beq.s 3e7c <CstUnfreeze+0x15c>
    KPrintF("CstUnfreeze: Free CstBackdropBackup");
    3e56:	   |   pea 1863c <PutChar+0x682>
    3e5c:	   |   jsr 17518 <KPrintF>
    3e62:	   |   addq.l #4,sp
    FreeVec( CstBackDropBackup);
    3e64:	   |   move.l 1cc80 <CstBackDropBackup>,10(sp)
    3e6c:	   |   move.l 1cd66 <SysBase>,d0
    3e72:	   |   movea.l d0,a6
    3e74:	   |   movea.l 10(sp),a1
    3e78:	   |   jsr -690(a6)
  }

  KPrintF("CstUnfreeze: Finished");
    3e7c:	   '-> pea 18660 <PutChar+0x6a6>
    3e82:	       jsr 17518 <KPrintF>
    3e88:	       addq.l #4,sp

}
    3e8a:	       nop
    3e8c:	       move.l (sp)+,d2
    3e8e:	       movea.l (sp)+,a6
    3e90:	       lea 24(sp),sp
    3e94:	       rts

00003e96 <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    3e96:	       lea -28(sp),sp
    3e9a:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    3e9e:	       move.l 52(sp),-(sp)
    3ea2:	       jsr 15b22 <stringWidth>
    3ea8:	       addq.l #4,sp
    3eaa:	       asr.l #1,d0
    3eac:	       move.l d0,-(sp)
    3eae:	       jsr 1794a <__floatsisf>
    3eb4:	       addq.l #4,sp
    3eb6:	       move.l d0,d1
    3eb8:	       move.l 1c6f8 <cameraZoom>,d0
    3ebe:	       move.l d0,-(sp)
    3ec0:	       move.l d1,-(sp)
    3ec2:	       jsr 17800 <__divsf3>
    3ec8:	       addq.l #8,sp
    3eca:	       move.l d0,-(sp)
    3ecc:	       jsr 178e2 <__fixsfsi>
    3ed2:	       addq.l #4,sp
    3ed4:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    3ed8:	       move.l 56(sp),d0
    3edc:	       sub.l 44(sp),d0
    3ee0:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    3ee4:	       move.l 56(sp),d0
    3ee8:	       add.l 44(sp),d0
    3eec:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    3ef0:	       moveq #12,d0
    3ef2:	       move.l d0,32(sp)
    3ef6:	       clr.l 28(sp)
    3efa:	       move.l 1cd66 <SysBase>,d0
    3f00:	       movea.l d0,a6
    3f02:	       move.l 32(sp),d0
    3f06:	       move.l 28(sp),d1
    3f0a:	       jsr -684(a6)
    3f0e:	       move.l d0,24(sp)
    3f12:	       move.l 24(sp),d0
    3f16:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    3f1a:	       movea.l 1ccb6 <speech>,a0
    3f20:	       move.l 4(a0),d0
    3f24:	       movea.l 20(sp),a0
    3f28:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    3f2c:	       move.l 52(sp),-(sp)
    3f30:	       jsr b8 <copyString>
    3f36:	       addq.l #4,sp
    3f38:	       movea.l 20(sp),a0
    3f3c:	       move.l d0,(a0)
	newLine -> x = xx1;
    3f3e:	       movea.l 20(sp),a0
    3f42:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    3f48:	       movea.l 1ccb6 <speech>,a0
    3f4e:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    3f54:	       moveq #4,d0
    3f56:	       cmp.l 40(sp),d0
    3f5a:	   ,-- blt.s 3f7c <addSpeechLine+0xe6>
    3f5c:	   |   movea.l 60(sp),a0
    3f60:	   |   move.l (a0),d1
    3f62:	   |   moveq #5,d0
    3f64:	   |   sub.l 40(sp),d0
    3f68:	   |   cmp.l d1,d0
    3f6a:	   +-- ble.s 3f7c <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    3f6c:	   |   moveq #5,d0
    3f6e:	   |   sub.l 40(sp),d0
    3f72:	   |   movea.l 60(sp),a0
    3f76:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    3f78:	,--|-- bra.w 40a8 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3f7c:	|  '-> move.l 36(sp),-(sp)
    3f80:	|      jsr 1794a <__floatsisf>
    3f86:	|      addq.l #4,sp
    3f88:	|      move.l d0,d2
    3f8a:	|      move.l 1ccba <winWidth>,d0
    3f90:	|      move.l d0,-(sp)
    3f92:	|      jsr 17972 <__floatunsisf>
    3f98:	|      addq.l #4,sp
    3f9a:	|      move.l d0,d1
    3f9c:	|      move.l 1c6f8 <cameraZoom>,d0
    3fa2:	|      move.l d0,-(sp)
    3fa4:	|      move.l d1,-(sp)
    3fa6:	|      jsr 17800 <__divsf3>
    3fac:	|      addq.l #8,sp
    3fae:	|      move.l #1084227584,-(sp)
    3fb4:	|      move.l d0,-(sp)
    3fb6:	|      jsr 17c3e <__subsf3>
    3fbc:	|      addq.l #8,sp
    3fbe:	|      move.l d0,-(sp)
    3fc0:	|      move.l d2,-(sp)
    3fc2:	|      jsr 17a32 <__gesf2>
    3fc8:	|      addq.l #8,sp
    3fca:	|      tst.l d0
    3fcc:	|  ,-- bge.s 3fd2 <addSpeechLine+0x13c>
}
    3fce:	+--|-- bra.w 40a8 <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    3fd2:	|  '-> movea.l 60(sp),a0
    3fd6:	|      move.l (a0),d0
    3fd8:	|      move.l d0,-(sp)
    3fda:	|      jsr 1794a <__floatsisf>
    3fe0:	|      addq.l #4,sp
    3fe2:	|      move.l d0,-(sp)
    3fe4:	|      jsr 1786c <__extendsfdf2>
    3fea:	|      addq.l #4,sp
    3fec:	|      move.l d0,d4
    3fee:	|      move.l d1,d5
    3ff0:	|      move.l 1ccba <winWidth>,d0
    3ff6:	|      move.l d0,-(sp)
    3ff8:	|      jsr 17972 <__floatunsisf>
    3ffe:	|      addq.l #4,sp
    4000:	|      move.l d0,d1
    4002:	|      move.l 1c6f8 <cameraZoom>,d0
    4008:	|      move.l d0,-(sp)
    400a:	|      move.l d1,-(sp)
    400c:	|      jsr 17800 <__divsf3>
    4012:	|      addq.l #8,sp
    4014:	|      move.l d0,-(sp)
    4016:	|      jsr 1786c <__extendsfdf2>
    401c:	|      addq.l #4,sp
    401e:	|      clr.l -(sp)
    4020:	|      move.l #1075052544,-(sp)
    4026:	|      move.l d1,-(sp)
    4028:	|      move.l d0,-(sp)
    402a:	|      jsr 17bdc <__subdf3>
    4030:	|      lea 16(sp),sp
    4034:	|      move.l d0,d2
    4036:	|      move.l d1,d3
    4038:	|      move.l 36(sp),-(sp)
    403c:	|      jsr 1790a <__floatsidf>
    4042:	|      addq.l #4,sp
    4044:	|      move.l d1,-(sp)
    4046:	|      move.l d0,-(sp)
    4048:	|      move.l d3,-(sp)
    404a:	|      move.l d2,-(sp)
    404c:	|      jsr 17bdc <__subdf3>
    4052:	|      lea 16(sp),sp
    4056:	|      move.l d1,-(sp)
    4058:	|      move.l d0,-(sp)
    405a:	|      move.l d5,-(sp)
    405c:	|      move.l d4,-(sp)
    405e:	|      jsr 17a68 <__gtdf2>
    4064:	|      lea 16(sp),sp
    4068:	|      tst.l d0
    406a:	|  ,-- bgt.s 406e <addSpeechLine+0x1d8>
}
    406c:	+--|-- bra.s 40a8 <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    406e:	|  '-> move.l 1ccba <winWidth>,d0
    4074:	|      move.l d0,-(sp)
    4076:	|      jsr 17972 <__floatunsisf>
    407c:	|      addq.l #4,sp
    407e:	|      move.l d0,d1
    4080:	|      move.l 1c6f8 <cameraZoom>,d0
    4086:	|      move.l d0,-(sp)
    4088:	|      move.l d1,-(sp)
    408a:	|      jsr 17800 <__divsf3>
    4090:	|      addq.l #8,sp
    4092:	|      move.l d0,-(sp)
    4094:	|      jsr 178e2 <__fixsfsi>
    409a:	|      addq.l #4,sp
    409c:	|      subq.l #5,d0
    409e:	|      sub.l 36(sp),d0
    40a2:	|      movea.l 60(sp),a0
    40a6:	|      move.l d0,(a0)
}
    40a8:	'----> nop
    40aa:	       movem.l (sp)+,d2-d5/a6
    40ae:	       lea 28(sp),sp
    40b2:	       rts

000040b4 <initSpeech>:


void initSpeech () {
    40b4:	       lea -12(sp),sp
    40b8:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    40ba:	       moveq #20,d0
    40bc:	       move.l d0,12(sp)
    40c0:	       clr.l 8(sp)
    40c4:	       move.l 1cd66 <SysBase>,d0
    40ca:	       movea.l d0,a6
    40cc:	       move.l 12(sp),d0
    40d0:	       move.l 8(sp),d1
    40d4:	       jsr -684(a6)
    40d8:	       move.l d0,4(sp)
    40dc:	       move.l 4(sp),d0
    40e0:	       move.l d0,1ccb6 <speech>
	if (speech) {
    40e6:	       move.l 1ccb6 <speech>,d0
    40ec:	,----- beq.s 4118 <initSpeech+0x64>
		speech -> currentTalker = NULL;
    40ee:	|      movea.l 1ccb6 <speech>,a0
    40f4:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    40f6:	|      movea.l 1ccb6 <speech>,a0
    40fc:	|      clr.l 4(a0)
		speech -> speechY = 0;
    4100:	|      movea.l 1ccb6 <speech>,a0
    4106:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    410a:	|      movea.l 1ccb6 <speech>,a0
    4110:	|      moveq #-1,d0
    4112:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    4116:	|  ,-- bra.s 4126 <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    4118:	'--|-> pea 18676 <PutChar+0x6bc>
    411e:	   |   jsr 17518 <KPrintF>
    4124:	   |   addq.l #4,sp
}
    4126:	   '-> nop
    4128:	       movea.l (sp)+,a6
    412a:	       lea 12(sp),sp
    412e:	       rts

00004130 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    4130:	       movea.l 1ccb6 <speech>,a0
    4136:	       move.l 4(a0),d0
    413a:	,----- beq.s 4148 <isThereAnySpeechGoingOn+0x18>
    413c:	|      movea.l 1ccb6 <speech>,a0
    4142:	|      move.l 16(a0),d0
    4146:	|  ,-- bra.s 414a <isThereAnySpeechGoingOn+0x1a>
    4148:	'--|-> moveq #-1,d0
}
    414a:	   '-> rts

0000414c <killAllSpeech>:

void killAllSpeech () {
    414c:	       lea -12(sp),sp
    4150:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    4152:	       movea.l 1ccb6 <speech>,a0
    4158:	       move.l 12(a0),d0
    415c:	       moveq #-1,d1
    415e:	       cmp.l d0,d1
    4160:	   ,-- beq.s 416e <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    4162:	   |   movea.l 1ccb6 <speech>,a0
    4168:	   |   moveq #-1,d0
    416a:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    416e:	   '-> movea.l 1ccb6 <speech>,a0
    4174:	       move.l (a0),d0
    4176:	,----- beq.w 4202 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    417a:	|      movea.l 1ccb6 <speech>,a0
    4180:	|      move.l (a0),d1
    4182:	|      lea -132(sp),sp
    4186:	|      move.l sp,d0
    4188:	|      movea.w #132,a0
    418c:	|      move.l a0,-(sp)
    418e:	|      move.l d1,-(sp)
    4190:	|      move.l d0,-(sp)
    4192:	|      jsr 174cc <memcpy>
    4198:	|      lea 12(sp),sp
    419c:	|      jsr ad1e <makeSilent>
    41a2:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    41a6:	|      movea.l 1ccb6 <speech>,a0
    41ac:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    41ae:	+----- bra.s 4202 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    41b0:	|  ,-> movea.l 1ccb6 <speech>,a0
    41b6:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    41bc:	|  |   movea.l 1ccb6 <speech>,a0
    41c2:	|  |   movea.l 4(a0),a1
    41c6:	|  |   movea.l 1ccb6 <speech>,a0
    41cc:	|  |   move.l 4(a1),d0
    41d0:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    41d4:	|  |   movea.l 12(sp),a0
    41d8:	|  |   move.l (a0),8(sp)
    41dc:	|  |   move.l 1cd66 <SysBase>,d0
    41e2:	|  |   movea.l d0,a6
    41e4:	|  |   movea.l 8(sp),a1
    41e8:	|  |   jsr -690(a6)
		FreeVec(killMe);
    41ec:	|  |   move.l 12(sp),4(sp)
    41f2:	|  |   move.l 1cd66 <SysBase>,d0
    41f8:	|  |   movea.l d0,a6
    41fa:	|  |   movea.l 4(sp),a1
    41fe:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    4202:	'--|-> movea.l 1ccb6 <speech>,a0
    4208:	   |   move.l 4(a0),d0
    420c:	   '-- bne.s 41b0 <killAllSpeech+0x64>
	}
}
    420e:	       nop
    4210:	       nop
    4212:	       movea.l (sp)+,a6
    4214:	       lea 12(sp),sp
    4218:	       rts

0000421a <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    421a:	pea 2 <_start+0x2>
    421e:	move.l 8(sp),-(sp)
    4222:	jsr 437a <setFrames>
    4228:	addq.l #8,sp
}
    422a:	nop
    422c:	rts

0000422e <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    422e:	       lea -52(sp),sp
    4232:	       move.l a6,-(sp)
    4234:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    4236:	       movea.l 64(sp),a0
    423a:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    4240:	       move.l 1c6d0 <speechSpeed>,d0
    4246:	       move.l 68(sp),-(sp)
    424a:	       move.l d0,-(sp)
    424c:	       jsr a46 <putFloat>
    4252:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    4254:	       movea.l 64(sp),a0
    4258:	       move.l 8(a0),d0
    425c:	       move.l 68(sp),-(sp)
    4260:	       move.l d0,-(sp)
    4262:	       jsr 8d0 <put2bytes>
    4268:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    426a:	       movea.l 64(sp),a0
    426e:	       move.l 16(a0),d0
    4272:	       move.l 68(sp),-(sp)
    4276:	       move.l d0,-(sp)
    4278:	       jsr 8d0 <put2bytes>
    427e:	       addq.l #8,sp
		if (sS -> currentTalker) {
    4280:	       movea.l 64(sp),a0
    4284:	       move.l (a0),d0
    4286:	   ,-- beq.s 42ca <saveSpeech+0x9c>
			FPutC (fp, 1);
    4288:	   |   move.l 68(sp),40(sp)
    428e:	   |   moveq #1,d0
    4290:	   |   move.l d0,36(sp)
    4294:	   |   move.l 1cd6e <DOSBase>,d0
    429a:	   |   movea.l d0,a6
    429c:	   |   move.l 40(sp),d1
    42a0:	   |   move.l 36(sp),d2
    42a4:	   |   jsr -312(a6)
    42a8:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    42ac:	   |   movea.l 64(sp),a0
    42b0:	   |   movea.l (a0),a0
    42b2:	   |   movea.l 114(a0),a0
    42b6:	   |   move.l 4(a0),d0
    42ba:	   |   move.l 68(sp),-(sp)
    42be:	   |   move.l d0,-(sp)
    42c0:	   |   jsr 8d0 <put2bytes>
    42c6:	   |   addq.l #8,sp
    42c8:	,--|-- bra.s 4346 <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    42ca:	|  '-> move.l 68(sp),52(sp)
    42d0:	|      clr.l 48(sp)
    42d4:	|      move.l 1cd6e <DOSBase>,d0
    42da:	|      movea.l d0,a6
    42dc:	|      move.l 52(sp),d1
    42e0:	|      move.l 48(sp),d2
    42e4:	|      jsr -312(a6)
    42e8:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    42ec:	+----- bra.s 4346 <saveSpeech+0x118>
			FPutC (fp, 1);
    42ee:	|  ,-> move.l 68(sp),16(sp)
    42f4:	|  |   moveq #1,d0
    42f6:	|  |   move.l d0,12(sp)
    42fa:	|  |   move.l 1cd6e <DOSBase>,d0
    4300:	|  |   movea.l d0,a6
    4302:	|  |   move.l 16(sp),d1
    4306:	|  |   move.l 12(sp),d2
    430a:	|  |   jsr -312(a6)
    430e:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    4312:	|  |   movea.l 56(sp),a0
    4316:	|  |   move.l (a0),d0
    4318:	|  |   move.l 68(sp),-(sp)
    431c:	|  |   move.l d0,-(sp)
    431e:	|  |   jsr bd8 <writeString>
    4324:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    4326:	|  |   movea.l 56(sp),a0
    432a:	|  |   move.l 8(a0),d0
    432e:	|  |   move.l 68(sp),-(sp)
    4332:	|  |   move.l d0,-(sp)
    4334:	|  |   jsr 8d0 <put2bytes>
    433a:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    433c:	|  |   movea.l 56(sp),a0
    4340:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    4346:	'--|-> tst.l 56(sp)
    434a:	   '-- bne.s 42ee <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    434c:	       move.l 68(sp),28(sp)
    4352:	       clr.l 24(sp)
    4356:	       move.l 1cd6e <DOSBase>,d0
    435c:	       movea.l d0,a6
    435e:	       move.l 28(sp),d1
    4362:	       move.l 24(sp),d2
    4366:	       jsr -312(a6)
    436a:	       move.l d0,20(sp)
}
    436e:	       nop
    4370:	       move.l (sp)+,d2
    4372:	       movea.l (sp)+,a6
    4374:	       lea 52(sp),sp
    4378:	       rts

0000437a <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    437a:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    437c:	movea.l 8(sp),a0
    4380:	movea.l 80(a0),a0
    4384:	move.l (a0),d2
    4386:	movea.l 8(sp),a0
    438a:	movea.l 80(a0),a0
    438e:	move.l 4(a0),d0
    4392:	move.l 12(sp),-(sp)
    4396:	move.l d0,-(sp)
    4398:	jsr 17ea4 <__mulsi3>
    439e:	addq.l #8,sp
    43a0:	move.l d0,d1
    43a2:	movea.l 8(sp),a0
    43a6:	move.l 106(a0),d0
    43aa:	add.l d1,d0
    43ac:	add.l d0,d0
    43ae:	add.l d0,d0
    43b0:	movea.l d2,a0
    43b2:	adda.l d0,a0
    43b4:	move.l (a0),d0
    43b6:	movea.l 8(sp),a0
    43ba:	move.l d0,72(a0)
}
    43be:	nop
    43c0:	move.l (sp)+,d2
    43c2:	rts

000043c4 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    43c4:	       lea -20(sp),sp
    43c8:	       move.l d2,-(sp)
    43ca:	       move.l 40(sp),d0
    43ce:	       move.w d0,d0
    43d0:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    43d4:	       movea.l 1ccb6 <speech>,a0
    43da:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    43e0:	       move.l 32(sp),-(sp)
    43e4:	       jsr a7de <findPerson>
    43ea:	       addq.l #4,sp
    43ec:	       move.l d0,16(sp)
    if (thisPerson) {
    43f0:	   ,-- beq.s 4416 <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    43f2:	   |   movea.w 6(sp),a0
    43f6:	   |   move.l a0,-(sp)
    43f8:	   |   move.l 40(sp),-(sp)
    43fc:	   |   move.l 24(sp),-(sp)
    4400:	   |   move.l 40(sp),-(sp)
    4404:	   |   jsr 44dc <wrapSpeechPerson>
    440a:	   |   lea 16(sp),sp
    440e:	   |   move.l d0,20(sp)
    4412:	,--|-- bra.w 44d0 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    4416:	|  '-> move.l 32(sp),-(sp)
    441a:	|      jsr 15cfa <getRegionForObject>
    4420:	|      addq.l #4,sp
    4422:	|      move.l d0,12(sp)
        if (thisRegion) {
    4426:	|  ,-- beq.s 4492 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    4428:	|  |   movea.l 12(sp),a0
    442c:	|  |   movea.l 28(a0),a0
    4430:	|  |   move.l 28(a0),d0
    4434:	|  |   movea.l 12(sp),a0
    4438:	|  |   movea.l 4(a0),a1
    443c:	|  |   movea.l 12(sp),a0
    4440:	|  |   movea.l 28(a0),a0
    4444:	|  |   move.l 20(a0),d1
    4448:	|  |   movea.l a1,a0
    444a:	|  |   suba.l d1,a0
    444c:	|  |   move.l 1ce20 <cameraY>,d1
    4452:	|  |   movea.l a0,a1
    4454:	|  |   suba.l d1,a1
    4456:	|  |   movea.l 12(sp),a0
    445a:	|  |   move.l (a0),d2
    445c:	|  |   movea.l 12(sp),a0
    4460:	|  |   move.l 8(a0),d1
    4464:	|  |   add.l d2,d1
    4466:	|  |   move.l d1,d2
    4468:	|  |   asr.l #1,d2
    446a:	|  |   move.l 1ce1c <cameraX>,d1
    4470:	|  |   movea.l d2,a0
    4472:	|  |   suba.l d1,a0
    4474:	|  |   move.l 36(sp),-(sp)
    4478:	|  |   move.l d0,-(sp)
    447a:	|  |   move.l a1,-(sp)
    447c:	|  |   move.l a0,-(sp)
    447e:	|  |   move.l 44(sp),-(sp)
    4482:	|  |   jsr 45fa <wrapSpeechXY>
    4488:	|  |   lea 20(sp),sp
    448c:	|  |   move.l d0,20(sp)
    4490:	+--|-- bra.s 44d0 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    4492:	|  '-> move.l 32(sp),-(sp)
    4496:	|      jsr d74c <findObjectType>
    449c:	|      addq.l #4,sp
    449e:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    44a2:	|      movea.l 8(sp),a0
    44a6:	|      move.l 28(a0),d1
    44aa:	|      move.l 1ccba <winWidth>,d0
    44b0:	|      lsr.l #1,d0
    44b2:	|      move.l 36(sp),-(sp)
    44b6:	|      move.l d1,-(sp)
    44b8:	|      pea a <_start+0xa>
    44bc:	|      move.l d0,-(sp)
    44be:	|      move.l 44(sp),-(sp)
    44c2:	|      jsr 45fa <wrapSpeechXY>
    44c8:	|      lea 20(sp),sp
    44cc:	|      move.l d0,20(sp)
        }
    }
    return i;
    44d0:	'----> move.l 20(sp),d0
}
    44d4:	       move.l (sp)+,d2
    44d6:	       lea 20(sp),sp
    44da:	       rts

000044dc <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    44dc:	    subq.l #8,sp
    44de:	    movem.l d2-d4,-(sp)
    44e2:	    move.l 36(sp),d0
    44e6:	    move.w d0,d0
    44e8:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    44ec:	    movea.l 28(sp),a0
    44f0:	    movea.l 114(a0),a0
    44f4:	    move.l 28(a0),d2
    44f8:	    movea.l 28(sp),a0
    44fc:	    move.l 4(a0),d3
    4500:	    move.l 1ce20 <cameraY>,d0
    4506:	    move.l d0,-(sp)
    4508:	    jsr 1794a <__floatsisf>
    450e:	    addq.l #4,sp
    4510:	    move.l d0,-(sp)
    4512:	    move.l d3,-(sp)
    4514:	    jsr 17c3e <__subsf3>
    451a:	    addq.l #8,sp
    451c:	    move.l d0,d3
    451e:	    movea.l 28(sp),a0
    4522:	    move.l 32(a0),d4
    4526:	    movea.l 28(sp),a0
    452a:	    move.l 20(a0),d1
    452e:	    movea.l 28(sp),a0
    4532:	    move.l 24(a0),d0
    4536:	    sub.l d0,d1
    4538:	    move.l d1,-(sp)
    453a:	    jsr 1794a <__floatsisf>
    4540:	    addq.l #4,sp
    4542:	    move.l d0,-(sp)
    4544:	    move.l d4,-(sp)
    4546:	    jsr 179fc <__mulsf3>
    454c:	    addq.l #8,sp
    454e:	    move.l d0,-(sp)
    4550:	    move.l d3,-(sp)
    4552:	    jsr 17c3e <__subsf3>
    4558:	    addq.l #8,sp
    455a:	    move.l d0,d3
    455c:	    movea.l 28(sp),a0
    4560:	    movea.l 114(a0),a0
    4564:	    move.l 20(a0),d0
    4568:	    move.l d0,-(sp)
    456a:	    jsr 1794a <__floatsisf>
    4570:	    addq.l #4,sp
    4572:	    move.l d0,-(sp)
    4574:	    move.l d3,-(sp)
    4576:	    jsr 17c3e <__subsf3>
    457c:	    addq.l #8,sp
    457e:	    move.l d0,-(sp)
    4580:	    jsr 178e2 <__fixsfsi>
    4586:	    addq.l #4,sp
    4588:	    move.l d0,d4
    458a:	    movea.l 28(sp),a0
    458e:	    move.l (a0),d3
    4590:	    move.l 1ce1c <cameraX>,d0
    4596:	    move.l d0,-(sp)
    4598:	    jsr 1794a <__floatsisf>
    459e:	    addq.l #4,sp
    45a0:	    move.l d0,-(sp)
    45a2:	    move.l d3,-(sp)
    45a4:	    jsr 17c3e <__subsf3>
    45aa:	    addq.l #8,sp
    45ac:	    move.l d0,-(sp)
    45ae:	    jsr 178e2 <__fixsfsi>
    45b4:	    addq.l #4,sp
    45b6:	    move.l 32(sp),-(sp)
    45ba:	    move.l d2,-(sp)
    45bc:	    move.l d4,-(sp)
    45be:	    move.l d0,-(sp)
    45c0:	    move.l 40(sp),-(sp)
    45c4:	    jsr 45fa <wrapSpeechXY>
    45ca:	    lea 20(sp),sp
    45ce:	    move.l d0,16(sp)
	if (animPerson) {
    45d2:	    tst.w 14(sp)
    45d6:	,-- beq.s 45ee <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    45d8:	|   move.l 28(sp),-(sp)
    45dc:	|   jsr 421a <makeTalker>
    45e2:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    45e4:	|   movea.l 1ccb6 <speech>,a0
    45ea:	|   move.l 28(sp),(a0)
	}
	return i;
    45ee:	'-> move.l 16(sp),d0
}
    45f2:	    movem.l (sp)+,d2-d4
    45f6:	    addq.l #8,sp
    45f8:	    rts

000045fa <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    45fa:	                   lea -16(sp),sp
    45fe:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    4602:	                   clr.l 16(sp)
    killAllSpeech();
    4606:	                   jsr 414c <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    460c:	                   move.l 36(sp),-(sp)
    4610:	                   jsr 13f24 <strlen>
    4616:	                   addq.l #4,sp
    4618:	                   movea.l d0,a0
    461a:	                   lea 20(a0),a0
    461e:	                   move.l a0,-(sp)
    4620:	                   jsr 17972 <__floatunsisf>
    4626:	                   addq.l #4,sp
    4628:	                   move.l d0,d1
    462a:	                   move.l 1c6d0 <speechSpeed>,d0
    4630:	                   move.l d0,-(sp)
    4632:	                   move.l d1,-(sp)
    4634:	                   jsr 179fc <__mulsf3>
    463a:	                   addq.l #8,sp
    463c:	                   move.l d0,-(sp)
    463e:	                   jsr 178e2 <__fixsfsi>
    4644:	                   addq.l #4,sp
    4646:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    464a:	               ,-- bgt.s 4652 <wrapSpeechXY+0x58>
    464c:	               |   moveq #1,d0
    464e:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    4652:	               '-> moveq #-1,d1
    4654:	                   cmp.l 52(sp),d1
    4658:	               ,-- beq.s 4698 <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    465a:	               |   move.l 1ce30 <speechMode>,d0
    4660:	               +-- ble.s 4698 <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    4662:	               |   clr.l -(sp)
    4664:	               |   move.l 56(sp),-(sp)
    4668:	               |   jsr d40c <startSound>
    466e:	               |   addq.l #8,sp
    4670:	               |   tst.w d0
    4672:	               +-- beq.s 4698 <wrapSpeechXY+0x9e>
                speechTime = -10;
    4674:	               |   moveq #-10,d0
    4676:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    467a:	               |   movea.l 1ccb6 <speech>,a0
    4680:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    4686:	               |   move.l 1ce30 <speechMode>,d0
    468c:	               |   moveq #2,d1
    468e:	               |   cmp.l d0,d1
    4690:	               +-- bne.s 4698 <wrapSpeechXY+0x9e>
    4692:	               |   moveq #-10,d0
    4694:	,--------------|-- bra.w 491e <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    4698:	|              '-> movea.l 1ccb6 <speech>,a0
    469e:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    46a4:	|     ,----------- bra.w 4758 <wrapSpeechXY+0x15e>
        a = wrap;
    46a8:	|  ,--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    46ae:	|  |  |        ,-- bra.s 46be <wrapSpeechXY+0xc4>
            a--;
    46b0:	|  |  |  ,-----|-> subq.l #1,28(sp)
            if (a == 0) {
    46b4:	|  |  |  |     +-- bne.s 46be <wrapSpeechXY+0xc4>
                a = wrap;
    46b6:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    46bc:	|  |  |  |  ,--|-- bra.s 46d0 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    46be:	|  |  |  |  |  '-> move.l 28(sp),d0
    46c2:	|  |  |  |  |      movea.l 36(sp),a0
    46c6:	|  |  |  |  |      adda.l d0,a0
    46c8:	|  |  |  |  |      move.b (a0),d0
    46ca:	|  |  |  |  |      cmpi.b #32,d0
    46ce:	|  |  |  '--|----- bne.s 46b0 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    46d0:	|  |  |     '----> move.l 28(sp),d0
    46d4:	|  |  |            movea.l 36(sp),a0
    46d8:	|  |  |            adda.l d0,a0
    46da:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    46dc:	|  |  |            lea 16(sp),a0
    46e0:	|  |  |            move.l a0,-(sp)
    46e2:	|  |  |            move.l 44(sp),-(sp)
    46e6:	|  |  |            move.l 44(sp),-(sp)
    46ea:	|  |  |            jsr 3e96 <addSpeechLine>
    46f0:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    46f4:	|  |  |            move.l 28(sp),d0
    46f8:	|  |  |            movea.l 36(sp),a0
    46fc:	|  |  |            adda.l d0,a0
    46fe:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    4702:	|  |  |            move.l 28(sp),d0
    4706:	|  |  |            addq.l #1,d0
    4708:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    470c:	|  |  |            move.l 44(sp),-(sp)
    4710:	|  |  |            jsr 1794a <__floatsisf>
    4716:	|  |  |            addq.l #4,sp
    4718:	|  |  |            move.l d0,d2
    471a:	|  |  |            move.l 1ce5a <fontHeight>,d0
    4720:	|  |  |            move.l d0,-(sp)
    4722:	|  |  |            jsr 1794a <__floatsisf>
    4728:	|  |  |            addq.l #4,sp
    472a:	|  |  |            move.l d0,d1
    472c:	|  |  |            move.l 1c6f8 <cameraZoom>,d0
    4732:	|  |  |            move.l d0,-(sp)
    4734:	|  |  |            move.l d1,-(sp)
    4736:	|  |  |            jsr 17800 <__divsf3>
    473c:	|  |  |            addq.l #8,sp
    473e:	|  |  |            move.l d0,-(sp)
    4740:	|  |  |            move.l d2,-(sp)
    4742:	|  |  |            jsr 17c3e <__subsf3>
    4748:	|  |  |            addq.l #8,sp
    474a:	|  |  |            move.l d0,-(sp)
    474c:	|  |  |            jsr 178e2 <__fixsfsi>
    4752:	|  |  |            addq.l #4,sp
    4754:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    4758:	|  |  '----------> move.l 36(sp),-(sp)
    475c:	|  |               jsr 13f24 <strlen>
    4762:	|  |               addq.l #4,sp
    4764:	|  |               move.l d0,d1
    4766:	|  |               move.l 48(sp),d0
    476a:	|  |               cmp.l d1,d0
    476c:	|  '-------------- bcs.w 46a8 <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    4770:	|                  lea 16(sp),a0
    4774:	|                  move.l a0,-(sp)
    4776:	|                  move.l 44(sp),-(sp)
    477a:	|                  move.l 44(sp),-(sp)
    477e:	|                  jsr 3e96 <addSpeechLine>
    4784:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    4788:	|                  move.l 44(sp),-(sp)
    478c:	|                  jsr 1794a <__floatsisf>
    4792:	|                  addq.l #4,sp
    4794:	|                  move.l d0,d2
    4796:	|                  move.l 1ce5a <fontHeight>,d0
    479c:	|                  move.l d0,-(sp)
    479e:	|                  jsr 1794a <__floatsisf>
    47a4:	|                  addq.l #4,sp
    47a6:	|                  move.l d0,d1
    47a8:	|                  move.l 1c6f8 <cameraZoom>,d0
    47ae:	|                  move.l d0,-(sp)
    47b0:	|                  move.l d1,-(sp)
    47b2:	|                  jsr 17800 <__divsf3>
    47b8:	|                  addq.l #8,sp
    47ba:	|                  move.l d0,-(sp)
    47bc:	|                  move.l d2,-(sp)
    47be:	|                  jsr 17c3e <__subsf3>
    47c4:	|                  addq.l #8,sp
    47c6:	|                  move.l d0,-(sp)
    47c8:	|                  jsr 178e2 <__fixsfsi>
    47ce:	|                  addq.l #4,sp
    47d0:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    47d4:	|              ,-- bpl.s 47f2 <wrapSpeechXY+0x1f8>
    47d6:	|              |   movea.l 1ccb6 <speech>,a0
    47dc:	|              |   move.l 8(a0),d0
    47e0:	|              |   movea.l 1ccb6 <speech>,a0
    47e6:	|              |   sub.l 44(sp),d0
    47ea:	|              |   move.l d0,8(a0)
    47ee:	|           ,--|-- bra.w 48e0 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    47f2:	|           |  '-> movea.l 1ccb6 <speech>,a0
    47f8:	|           |      move.l 8(a0),d0
    47fc:	|           |      move.l d0,-(sp)
    47fe:	|           |      jsr 1794a <__floatsisf>
    4804:	|           |      addq.l #4,sp
    4806:	|           |      move.l d0,d2
    4808:	|           |      move.l 1ce20 <cameraY>,d0
    480e:	|           |      move.l d0,-(sp)
    4810:	|           |      jsr 1794a <__floatsisf>
    4816:	|           |      addq.l #4,sp
    4818:	|           |      move.l d0,d3
    481a:	|           |      move.l 1ccbe <winHeight>,d4
    4820:	|           |      move.l 1ce5a <fontHeight>,d0
    4826:	|           |      pea 3 <_start+0x3>
    482a:	|           |      move.l d0,-(sp)
    482c:	|           |      jsr 17f22 <__divsi3>
    4832:	|           |      addq.l #8,sp
    4834:	|           |      move.l d4,d1
    4836:	|           |      sub.l d0,d1
    4838:	|           |      move.l d1,-(sp)
    483a:	|           |      jsr 17972 <__floatunsisf>
    4840:	|           |      addq.l #4,sp
    4842:	|           |      move.l d0,d1
    4844:	|           |      move.l 1c6f8 <cameraZoom>,d0
    484a:	|           |      move.l d0,-(sp)
    484c:	|           |      move.l d1,-(sp)
    484e:	|           |      jsr 17800 <__divsf3>
    4854:	|           |      addq.l #8,sp
    4856:	|           |      move.l d0,-(sp)
    4858:	|           |      move.l d3,-(sp)
    485a:	|           |      jsr 17706 <__addsf3>
    4860:	|           |      addq.l #8,sp
    4862:	|           |      move.l d0,-(sp)
    4864:	|           |      move.l d2,-(sp)
    4866:	|           |      jsr 17ab6 <__gtsf2>
    486c:	|           |      addq.l #8,sp
    486e:	|           |      tst.l d0
    4870:	|           +----- ble.s 48e0 <wrapSpeechXY+0x2e6>
    4872:	|           |      move.l 1ce20 <cameraY>,d0
    4878:	|           |      move.l d0,-(sp)
    487a:	|           |      jsr 1794a <__floatsisf>
    4880:	|           |      addq.l #4,sp
    4882:	|           |      move.l d0,d2
    4884:	|           |      move.l 1ccbe <winHeight>,d3
    488a:	|           |      move.l 1ce5a <fontHeight>,d0
    4890:	|           |      pea 3 <_start+0x3>
    4894:	|           |      move.l d0,-(sp)
    4896:	|           |      jsr 17f22 <__divsi3>
    489c:	|           |      addq.l #8,sp
    489e:	|           |      move.l d3,d1
    48a0:	|           |      sub.l d0,d1
    48a2:	|           |      move.l d1,-(sp)
    48a4:	|           |      jsr 17972 <__floatunsisf>
    48aa:	|           |      addq.l #4,sp
    48ac:	|           |      move.l d0,d1
    48ae:	|           |      move.l 1c6f8 <cameraZoom>,d0
    48b4:	|           |      move.l d0,-(sp)
    48b6:	|           |      move.l d1,-(sp)
    48b8:	|           |      jsr 17800 <__divsf3>
    48be:	|           |      addq.l #8,sp
    48c0:	|           |      move.l d0,-(sp)
    48c2:	|           |      move.l d2,-(sp)
    48c4:	|           |      jsr 17706 <__addsf3>
    48ca:	|           |      addq.l #8,sp
    48cc:	|           |      movea.l 1ccb6 <speech>,a2
    48d2:	|           |      move.l d0,-(sp)
    48d4:	|           |      jsr 178e2 <__fixsfsi>
    48da:	|           |      addq.l #4,sp
    48dc:	|           |      move.l d0,8(a2)

    if (offset) {
    48e0:	|           '----> move.l 16(sp),d0
    48e4:	|        ,-------- beq.s 491a <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    48e6:	|        |         movea.l 1ccb6 <speech>,a0
    48ec:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    48f2:	|        |     ,-- bra.s 4914 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    48f4:	|        |  ,--|-> movea.l 20(sp),a0
    48f8:	|        |  |  |   move.l 8(a0),d1
    48fc:	|        |  |  |   move.l 16(sp),d0
    4900:	|        |  |  |   add.l d1,d0
    4902:	|        |  |  |   movea.l 20(sp),a0
    4906:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    490a:	|        |  |  |   movea.l 20(sp),a0
    490e:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    4914:	|        |  |  '-> tst.l 20(sp)
    4918:	|        |  '----- bne.s 48f4 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    491a:	|        '-------> move.l 24(sp),d0
}
    491e:	'----------------> movem.l (sp)+,d2-d4/a2
    4922:	                   lea 16(sp),sp
    4926:	                   rts

00004928 <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    4928:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    492c:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    4930:	       tst.l 24(sp)
    4934:	   ,-- bge.s 493a <drawLine+0x12>
    4936:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    493a:	   '-> tst.l 28(sp)
    493e:	   ,-- bge.s 4944 <drawLine+0x1c>
    4940:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    4944:	   '-> tst.l 32(sp)
    4948:	   ,-- bge.s 494e <drawLine+0x26>
    494a:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    494e:	   '-> tst.l 36(sp)
    4952:	   ,-- bge.s 4958 <drawLine+0x30>
    4954:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    4958:	   '-> move.l 1cdfe <sceneWidth>,d0
    495e:	       cmp.l 24(sp),d0
    4962:	   ,-- bge.s 4972 <drawLine+0x4a>
    4964:	   |   move.l 1cdfe <sceneWidth>,d0
    496a:	   |   move.l d0,d1
    496c:	   |   subq.l #1,d1
    496e:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    4972:	   '-> move.l 1cdfe <sceneWidth>,d0
    4978:	       cmp.l 32(sp),d0
    497c:	   ,-- bge.s 498c <drawLine+0x64>
    497e:	   |   move.l 1cdfe <sceneWidth>,d0
    4984:	   |   move.l d0,d1
    4986:	   |   subq.l #1,d1
    4988:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    498c:	   '-> move.l 1ce02 <sceneHeight>,d0
    4992:	       cmp.l 28(sp),d0
    4996:	   ,-- bge.s 49a6 <drawLine+0x7e>
    4998:	   |   move.l 1ce02 <sceneHeight>,d0
    499e:	   |   move.l d0,d1
    49a0:	   |   subq.l #1,d1
    49a2:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    49a6:	   '-> move.l 1ce02 <sceneHeight>,d0
    49ac:	       cmp.l 36(sp),d0
    49b0:	   ,-- bge.s 49c0 <drawLine+0x98>
    49b2:	   |   move.l 1ce02 <sceneHeight>,d0
    49b8:	   |   move.l d0,d1
    49ba:	   |   subq.l #1,d1
    49bc:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    49c0:	   '-> move.l 24(sp),d0
    49c4:	       cmp.l 32(sp),d0
    49c8:	,----- ble.s 49e4 <drawLine+0xbc>
		x = x2; 
    49ca:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    49d0:	|      tst.w 10(sp)
    49d4:	|      seq d0
    49d6:	|      neg.b d0
    49d8:	|      move.b d0,d0
    49da:	|      andi.w #255,d0
    49de:	|      move.w d0,10(sp)
    49e2:	|  ,-- bra.s 49ea <drawLine+0xc2>
	} else x = x1;
    49e4:	'--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    49ea:	   '-> move.l 28(sp),d1
    49ee:	       cmp.l 36(sp),d1
    49f2:	,----- ble.s 4a0e <drawLine+0xe6>
		y = y2; 
    49f4:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    49fa:	|      tst.w 10(sp)
    49fe:	|      seq d0
    4a00:	|      neg.b d0
    4a02:	|      move.b d0,d0
    4a04:	|      andi.w #255,d0
    4a08:	|      move.w d0,10(sp)
    4a0c:	|  ,-- bra.s 4a14 <drawLine+0xec>
	} else y = y1;	
    4a0e:	'--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    4a14:	   '-> move.l 32(sp),d0
    4a18:	       sub.l 24(sp),d0
    4a1c:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    4a20:	       move.l 6(sp),d0
    4a24:	   ,-- bpl.s 4a28 <drawLine+0x100>
    4a26:	   |   neg.l d0
    4a28:	   '-> move.l d0,6(sp)
	int diffY = y2-y1;	
    4a2c:	       move.l 36(sp),d1
    4a30:	       sub.l 28(sp),d1
    4a34:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    4a38:	       move.l 2(sp),d0
    4a3c:	   ,-- bpl.s 4a40 <drawLine+0x118>
    4a3e:	   |   neg.l d0
    4a40:	   '-> move.l d0,2(sp)
	
	if (! diffX) {
    4a44:	       tst.l 6(sp)
    4a48:	   ,-- bne.s 4a6c <drawLine+0x144>
		diffX = 1;
    4a4a:	   |   moveq #1,d0
    4a4c:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    4a50:	   |   move.l 1cdfe <sceneWidth>,d0
    4a56:	   |   subq.l #1,d0
    4a58:	   |   cmp.l 16(sp),d0
    4a5c:	   +-- bne.s 4a6c <drawLine+0x144>
    4a5e:	   |   move.l 1cdfe <sceneWidth>,d0
    4a64:	   |   move.l d0,d1
    4a66:	   |   subq.l #2,d1
    4a68:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    4a6c:	   '-> tst.l 2(sp)
    4a70:	   ,-- bne.s 4a94 <drawLine+0x16c>
		diffY = 1;
    4a72:	   |   moveq #1,d0
    4a74:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    4a78:	   |   move.l 1ce02 <sceneHeight>,d0
    4a7e:	   |   subq.l #1,d0
    4a80:	   |   cmp.l 12(sp),d0
    4a84:	   +-- bne.s 4a94 <drawLine+0x16c>
    4a86:	   |   move.l 1ce02 <sceneHeight>,d0
    4a8c:	   |   move.l d0,d1
    4a8e:	   |   subq.l #2,d1
    4a90:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    4a94:	   '-> pea 186b3 <PutChar+0x6f9>
    4a9a:	       jsr 17518 <KPrintF>
    4aa0:	       addq.l #4,sp
	
}
    4aa2:	       nop
    4aa4:	       lea 20(sp),sp
    4aa8:	       rts

00004aaa <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    4aaa:	                      lea -24(sp),sp
    4aae:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    4ab0:	                      move.l 1ccc2 <firstTexture>,d0
    4ab6:	,-------------------- beq.w 4b94 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    4aba:	|                     clr.l 24(sp)
    4abe:	|     ,-------------- bra.w 4b88 <deleteTextures+0xde>
			BOOL found = FALSE;
    4ac2:	|  ,--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    4ac6:	|  |  |               move.l 1ccc2 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    4ace:	|  |  |               movea.l 20(sp),a0
    4ad2:	|  |  |               move.l (a0),d1
    4ad4:	|  |  |               move.l 24(sp),d0
    4ad8:	|  |  |               add.l d0,d0
    4ada:	|  |  |               add.l d0,d0
    4adc:	|  |  |               movea.l 36(sp),a0
    4ae0:	|  |  |               adda.l d0,a0
    4ae2:	|  |  |               move.l (a0),d0
    4ae4:	|  |  |               cmp.l d1,d0
    4ae6:	|  |  |  ,----------- bne.w 4b7a <deleteTextures+0xd0>
				found = TRUE;
    4aea:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    4af0:	|  |  |  |            movea.l 20(sp),a0
    4af4:	|  |  |  |            move.l 12(a0),d0
    4af8:	|  |  |  |            move.l d0,1ccc2 <firstTexture>
				FreeVec(list);
    4afe:	|  |  |  |            move.l 20(sp),6(sp)
    4b04:	|  |  |  |            move.l 1cd66 <SysBase>,d0
    4b0a:	|  |  |  |            movea.l d0,a6
    4b0c:	|  |  |  |            movea.l 6(sp),a1
    4b10:	|  |  |  |            jsr -690(a6)
				continue;
    4b14:	|  |  |  |  ,-------- bra.s 4b84 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    4b16:	|  |  |  |  |  ,----> movea.l 20(sp),a0
    4b1a:	|  |  |  |  |  |      movea.l 12(a0),a0
    4b1e:	|  |  |  |  |  |      move.l (a0),d1
    4b20:	|  |  |  |  |  |      move.l 24(sp),d0
    4b24:	|  |  |  |  |  |      add.l d0,d0
    4b26:	|  |  |  |  |  |      add.l d0,d0
    4b28:	|  |  |  |  |  |      movea.l 36(sp),a0
    4b2c:	|  |  |  |  |  |      adda.l d0,a0
    4b2e:	|  |  |  |  |  |      move.l (a0),d0
    4b30:	|  |  |  |  |  |      cmp.l d1,d0
    4b32:	|  |  |  |  |  |  ,-- bne.s 4b70 <deleteTextures+0xc6>
					found = TRUE;
    4b34:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    4b3a:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4b3e:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    4b44:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4b48:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    4b4c:	|  |  |  |  |  |  |   move.l 12(a0),d0
    4b50:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    4b54:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    4b58:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    4b5e:	|  |  |  |  |  |  |   move.l 1cd66 <SysBase>,d0
    4b64:	|  |  |  |  |  |  |   movea.l d0,a6
    4b66:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    4b6a:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    4b6e:	|  |  |  |  +--|--|-- bra.s 4b84 <deleteTextures+0xda>
				}
				list = list->next;
    4b70:	|  |  |  |  |  |  '-> movea.l 20(sp),a0
    4b74:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    4b7a:	|  |  |  '--|--|----> movea.l 20(sp),a0
    4b7e:	|  |  |     |  |      move.l 12(a0),d0
    4b82:	|  |  |     |  '----- bne.s 4b16 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    4b84:	|  |  |     '-------> addq.l #1,24(sp)
    4b88:	|  |  '-------------> move.l 24(sp),d0
    4b8c:	|  |                  cmp.l 32(sp),d0
    4b90:	|  '----------------- bcs.w 4ac2 <deleteTextures+0x18>
			}
		}
	}
}
    4b94:	'-------------------> nop
    4b96:	                      movea.l (sp)+,a6
    4b98:	                      lea 24(sp),sp
    4b9c:	                      rts

00004b9e <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    4b9e:	subq.l #4,sp
    4ba0:	move.l 8(sp),d0
    4ba4:	move.w d0,d0
    4ba6:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    4baa:	pea 186d6 <PutChar+0x71c>
    4bb0:	jsr 17518 <KPrintF>
    4bb6:	addq.l #4,sp
}
    4bb8:	nop
    4bba:	addq.l #4,sp
    4bbc:	rts

00004bbe <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    4bbe:	       moveq #-1,d0
    4bc0:	       cmp.l 4(sp),d0
    4bc4:	   ,-- bne.s 4bca <resourceNameFromNum+0xc>
    4bc6:	   |   moveq #0,d0
    4bc8:	,--|-- bra.s 4c02 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    4bca:	|  '-> move.l 1cd42 <numResourceNames>,d0
    4bd0:	|  ,-- bne.s 4bda <resourceNameFromNum+0x1c>
    4bd2:	|  |   move.l #100102,d0
    4bd8:	+--|-- bra.s 4c02 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    4bda:	|  '-> move.l 1cd42 <numResourceNames>,d0
    4be0:	|      cmp.l 4(sp),d0
    4be4:	|  ,-- ble.s 4bfc <resourceNameFromNum+0x3e>
    4be6:	|  |   move.l 1ccfa <allResourceNames>,d1
    4bec:	|  |   move.l 4(sp),d0
    4bf0:	|  |   add.l d0,d0
    4bf2:	|  |   add.l d0,d0
    4bf4:	|  |   movea.l d1,a0
    4bf6:	|  |   adda.l d0,a0
    4bf8:	|  |   move.l (a0),d0
    4bfa:	+--|-- bra.s 4c02 <resourceNameFromNum+0x44>
	return "Unknown resource";
    4bfc:	|  '-> move.l #100111,d0
    4c02:	'----> rts

00004c04 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    4c04:	          lea -44(sp),sp
    4c08:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    4c0c:	          move.l #320,1ccba <winWidth>
    winHeight = 256;
    4c16:	          move.l #256,1ccbe <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    4c20:	          tst.l 60(sp)
    4c24:	      ,-- bne.s 4c3c <main_sludge+0x38>
		bundleFolder = copyString("game/");
    4c26:	      |   pea 18720 <PutChar+0x766>
    4c2c:	      |   jsr b8 <copyString>
    4c32:	      |   addq.l #4,sp
    4c34:	      |   move.l d0,1ccd2 <bundleFolder>
    4c3a:	   ,--|-- bra.s 4c52 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    4c3c:	   |  '-> movea.l 64(sp),a0
    4c40:	   |      move.l (a0),d0
    4c42:	   |      move.l d0,-(sp)
    4c44:	   |      jsr b8 <copyString>
    4c4a:	   |      addq.l #4,sp
    4c4c:	   |      move.l d0,1ccd2 <bundleFolder>
	}
    
	int lastSlash = -1;
    4c52:	   '----> moveq #-1,d0
    4c54:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4c58:	          clr.l 44(sp)
    4c5c:	   ,----- bra.s 4c7e <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    4c5e:	,--|----> move.l 1ccd2 <bundleFolder>,d1
    4c64:	|  |      move.l 44(sp),d0
    4c68:	|  |      movea.l d1,a0
    4c6a:	|  |      adda.l d0,a0
    4c6c:	|  |      move.b (a0),d0
    4c6e:	|  |      cmpi.b #47,d0
    4c72:	|  |  ,-- bne.s 4c7a <main_sludge+0x76>
    4c74:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    4c7a:	|  |  '-> addq.l #1,44(sp)
    4c7e:	|  '----> move.l 1ccd2 <bundleFolder>,d1
    4c84:	|         move.l 44(sp),d0
    4c88:	|         movea.l d1,a0
    4c8a:	|         adda.l d0,a0
    4c8c:	|         move.b (a0),d0
    4c8e:	'-------- bne.s 4c5e <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    4c90:	          move.l 1ccd2 <bundleFolder>,d0
    4c96:	          move.l 48(sp),d1
    4c9a:	          addq.l #1,d1
    4c9c:	          movea.l d0,a0
    4c9e:	          adda.l d1,a0
    4ca0:	          clr.b (a0)

	if (argc > 1) {
    4ca2:	          moveq #1,d0
    4ca4:	          cmp.l 60(sp),d0
    4ca8:	      ,-- bge.s 4cc4 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    4caa:	      |   move.l 60(sp),d0
    4cae:	      |   addi.l #1073741823,d0
    4cb4:	      |   add.l d0,d0
    4cb6:	      |   add.l d0,d0
    4cb8:	      |   movea.l 64(sp),a0
    4cbc:	      |   adda.l d0,a0
    4cbe:	      |   move.l (a0),52(sp)
    4cc2:	   ,--|-- bra.s 4d1e <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    4cc4:	   |  '-> move.l 1ccd2 <bundleFolder>,d0
    4cca:	   |      pea 18726 <PutChar+0x76c>
    4cd0:	   |      move.l d0,-(sp)
    4cd2:	   |      jsr 13f64 <joinStrings>
    4cd8:	   |      addq.l #8,sp
    4cda:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    4cde:	   |      move.l 52(sp),-(sp)
    4ce2:	   |      jsr 13e5e <fileExists>
    4ce8:	   |      addq.l #4,sp
    4cea:	   |      tst.b d0
    4cec:	   +----- bne.s 4d1e <main_sludge+0x11a>
			FreeVec(sludgeFile);
    4cee:	   |      move.l 52(sp),40(sp)
    4cf4:	   |      move.l 1cd66 <SysBase>,d0
    4cfa:	   |      movea.l d0,a6
    4cfc:	   |      movea.l 40(sp),a1
    4d00:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    4d04:	   |      move.l 1ccd2 <bundleFolder>,d0
    4d0a:	   |      pea 18733 <PutChar+0x779>
    4d10:	   |      move.l d0,-(sp)
    4d12:	   |      jsr 13f64 <joinStrings>
    4d18:	   |      addq.l #8,sp
    4d1a:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    4d1e:	   '----> pea 1873c <PutChar+0x782>
    4d24:	          jsr 17518 <KPrintF>
    4d2a:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    4d2c:	          move.l 52(sp),-(sp)
    4d30:	          jsr 13e5e <fileExists>
    4d36:	          addq.l #4,sp
    4d38:	          tst.b d0
    4d3a:	      ,-- bne.s 4d92 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    4d3c:	      |   move.l 1cd6e <DOSBase>,d0
    4d42:	      |   movea.l d0,a6
    4d44:	      |   jsr -60(a6)
    4d48:	      |   move.l d0,28(sp)
    4d4c:	      |   move.l 28(sp),d0
    4d50:	      |   move.l d0,24(sp)
    4d54:	      |   move.l #100156,20(sp)
    4d5c:	      |   moveq #21,d0
    4d5e:	      |   move.l d0,16(sp)
    4d62:	      |   move.l 1cd6e <DOSBase>,d0
    4d68:	      |   movea.l d0,a6
    4d6a:	      |   move.l 24(sp),d1
    4d6e:	      |   move.l 20(sp),d2
    4d72:	      |   move.l 16(sp),d3
    4d76:	      |   jsr -48(a6)
    4d7a:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    4d7e:	      |   pea 1873c <PutChar+0x782>
    4d84:	      |   jsr 17518 <KPrintF>
    4d8a:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    4d8c:	      |   moveq #0,d0
    4d8e:	,-----|-- bra.w 4f90 <main_sludge+0x38c>
	}

	KPrintF("Setgamefilepath\n");
    4d92:	|     '-> pea 18752 <PutChar+0x798>
    4d98:	|         jsr 17518 <KPrintF>
    4d9e:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    4da0:	|         move.l 52(sp),-(sp)
    4da4:	|         jsr 4f9a <setGameFilePath>
    4daa:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    4dac:	|         move.l 52(sp),-(sp)
    4db0:	|         jsr 64e4 <initSludge>
    4db6:	|         addq.l #4,sp
    4db8:	|         tst.w d0
    4dba:	|     ,-- bne.s 4dc2 <main_sludge+0x1be>
    4dbc:	|     |   moveq #0,d0
    4dbe:	+-----|-- bra.w 4f90 <main_sludge+0x38c>
	
	if( winWidth != 320 || winHeight != 256) {
    4dc2:	|     '-> move.l 1ccba <winWidth>,d0
    4dc8:	|         cmpi.l #320,d0
    4dce:	|     ,-- bne.s 4dde <main_sludge+0x1da>
    4dd0:	|     |   move.l 1ccbe <winHeight>,d0
    4dd6:	|     |   cmpi.l #256,d0
    4ddc:	|  ,--|-- beq.s 4e00 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    4dde:	|  |  '-> pea 18763 <PutChar+0x7a9>
    4de4:	|  |      jsr 17518 <KPrintF>
    4dea:	|  |      addq.l #4,sp
		winWidth = 320;
    4dec:	|  |      move.l #320,1ccba <winWidth>
		winHeight = 256;
    4df6:	|  |      move.l #256,1ccbe <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    4e00:	|  '----> pea 187e0 <PutChar+0x826>
    4e06:	|         jsr 17518 <KPrintF>
    4e0c:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    4e0e:	|         move.l 1ccbe <winHeight>,d0
    4e14:	|         move.l d0,d1
    4e16:	|         move.l 1ccba <winWidth>,d0
    4e1c:	|         move.l d1,-(sp)
    4e1e:	|         move.l d0,-(sp)
    4e20:	|         jsr d62a <resizeBackdrop>
    4e26:	|         addq.l #8,sp
    4e28:	|         tst.w d0
    4e2a:	|     ,-- bne.s 4e40 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    4e2c:	|     |   pea 187f3 <PutChar+0x839>
    4e32:	|     |   jsr 17518 <KPrintF>
    4e38:	|     |   addq.l #4,sp
		return FALSE;
    4e3a:	|     |   moveq #0,d0
    4e3c:	+-----|-- bra.w 4f90 <main_sludge+0x38c>
	}

	KPrintF("Init People\n");
    4e40:	|     '-> pea 18819 <PutChar+0x85f>
    4e46:	|         jsr 17518 <KPrintF>
    4e4c:	|         addq.l #4,sp
	if (! initPeople ())
    4e4e:	|         jsr ab44 <initPeople>
    4e54:	|         tst.w d0
    4e56:	|     ,-- bne.s 4e6c <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    4e58:	|     |   pea 18826 <PutChar+0x86c>
    4e5e:	|     |   jsr 17518 <KPrintF>
    4e64:	|     |   addq.l #4,sp
		return FALSE;
    4e66:	|     |   moveq #0,d0
    4e68:	+-----|-- bra.w 4f90 <main_sludge+0x38c>
	}

	KPrintF("Init Floor\n");
    4e6c:	|     '-> pea 18847 <PutChar+0x88d>
    4e72:	|         jsr 17518 <KPrintF>
    4e78:	|         addq.l #4,sp
	if (! initFloor ())
    4e7a:	|         jsr 168ce <initFloor>
    4e80:	|         tst.w d0
    4e82:	|     ,-- bne.s 4e98 <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    4e84:	|     |   pea 18853 <PutChar+0x899>
    4e8a:	|     |   jsr 17518 <KPrintF>
    4e90:	|     |   addq.l #4,sp
		
		return FALSE;
    4e92:	|     |   moveq #0,d0
    4e94:	+-----|-- bra.w 4f90 <main_sludge+0x38c>
	}

	KPrintF("Init Objecttype\n");
    4e98:	|     '-> pea 18873 <PutChar+0x8b9>
    4e9e:	|         jsr 17518 <KPrintF>
    4ea4:	|         addq.l #4,sp
	if (! initObjectTypes ())
    4ea6:	|         jsr d7e6 <initObjectTypes>
    4eac:	|         tst.w d0
    4eae:	|     ,-- bne.s 4ec4 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    4eb0:	|     |   pea 18884 <PutChar+0x8ca>
    4eb6:	|     |   jsr 17518 <KPrintF>
    4ebc:	|     |   addq.l #4,sp
		return FALSE;
    4ebe:	|     |   moveq #0,d0
    4ec0:	+-----|-- bra.w 4f90 <main_sludge+0x38c>
	}

	KPrintF("Init speech\n");
    4ec4:	|     '-> pea 188aa <PutChar+0x8f0>
    4eca:	|         jsr 17518 <KPrintF>
    4ed0:	|         addq.l #4,sp
	initSpeech ();
    4ed2:	|         jsr 40b4 <initSpeech>
	KPrintF("Init status bar\n");
    4ed8:	|         pea 188b7 <PutChar+0x8fd>
    4ede:	|         jsr 17518 <KPrintF>
    4ee4:	|         addq.l #4,sp
	initStatusBar ();
    4ee6:	|         jsr 8544 <initStatusBar>

	KPrintF("Get numbered string\n");
    4eec:	|         pea 188c8 <PutChar+0x90e>
    4ef2:	|         jsr 17518 <KPrintF>
    4ef8:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    4efa:	|         pea 1 <_start+0x1>
    4efe:	|         jsr 784e <getNumberedString>
    4f04:	|         addq.l #4,sp
    4f06:	|         move.l d0,1ccca <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    4f0c:	|         pea 188dd <PutChar+0x923>
    4f12:	|         jsr 17518 <KPrintF>
    4f18:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    4f1a:	|         move.l 1cd36 <noStack>,d0
    4f20:	|         pea 1 <_start+0x1>
    4f24:	|         move.l d0,-(sp)
    4f26:	|         clr.l -(sp)
    4f28:	|         clr.l -(sp)
    4f2a:	|         clr.l -(sp)
    4f2c:	|         jsr 76a6 <startNewFunctionNum>
    4f32:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    4f36:	|         pea 188f5 <PutChar+0x93b>
    4f3c:	|         jsr 17518 <KPrintF>
    4f42:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    4f44:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    4f4c:	|         clr.l 1ccd6 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    4f52:	|     ,-- bra.s 4f72 <main_sludge+0x36e>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    4f54:	|  ,--|-> jsr 7526 <sludgeDisplay>
		CsiCheckInput();
    4f5a:	|  |  |   jsr d148 <CsiCheckInput>
		walkAllPeople();
    4f60:	|  |  |   jsr c102 <walkAllPeople>
		handleInput();
    4f66:	|  |  |   jsr 627e <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    4f6c:	|  |  |   jsr 1744c <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    4f72:	|  |  '-> move.l 1ccd6 <weAreDoneSoQuit>,d0
    4f78:	|  '----- beq.s 4f54 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    4f7a:	|         move.l 52(sp),32(sp)
    4f80:	|         move.l 1cd66 <SysBase>,d0
    4f86:	|         movea.l d0,a6
    4f88:	|         movea.l 32(sp),a1
    4f8c:	|         jsr -690(a6)
}
    4f90:	'-------> movem.l (sp)+,d2-d3/a6
    4f94:	          lea 44(sp),sp
    4f98:	          rts

00004f9a <setGameFilePath>:

void setGameFilePath (char * f) {
    4f9a:	          lea -1104(sp),sp
    4f9e:	          move.l a6,-(sp)
    4fa0:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    4fa2:	          move.l #1112,d0
    4fa8:	          add.l sp,d0
    4faa:	          addi.l #-1102,d0
    4fb0:	          move.l d0,1100(sp)
    4fb4:	          move.l #998,1096(sp)
    4fbc:	          move.l 1cd6e <DOSBase>,d0
    4fc2:	          movea.l d0,a6
    4fc4:	          move.l 1100(sp),d1
    4fc8:	          move.l 1096(sp),d2
    4fcc:	          jsr -564(a6)
    4fd0:	          move.w d0,1094(sp)
    4fd4:	          move.w 1094(sp),d0
    4fd8:	      ,-- bne.s 4fe8 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    4fda:	      |   pea 18908 <PutChar+0x94e>
    4fe0:	      |   jsr 17518 <KPrintF>
    4fe6:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    4fe8:	      '-> moveq #-1,d0
    4fea:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    4fee:	          clr.l 1104(sp)
    4ff2:	   ,----- bra.s 5010 <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    4ff4:	,--|----> move.l 1104(sp),d0
    4ff8:	|  |      movea.l 1116(sp),a0
    4ffc:	|  |      adda.l d0,a0
    4ffe:	|  |      move.b (a0),d0
    5000:	|  |      cmpi.b #47,d0
    5004:	|  |  ,-- bne.s 500c <setGameFilePath+0x72>
    5006:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    500c:	|  |  '-> addq.l #1,1104(sp)
    5010:	|  '----> move.l 1104(sp),d0
    5014:	|         movea.l 1116(sp),a0
    5018:	|         adda.l d0,a0
    501a:	|         move.b (a0),d0
    501c:	'-------- bne.s 4ff4 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    501e:	          moveq #-1,d0
    5020:	          cmp.l 1108(sp),d0
    5024:	   ,----- beq.s 509e <setGameFilePath+0x104>
		f[got] = 0;	
    5026:	   |      move.l 1108(sp),d0
    502a:	   |      movea.l 1116(sp),a0
    502e:	   |      adda.l d0,a0
    5030:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    5032:	   |      move.l 1116(sp),1090(sp)
    5038:	   |      moveq #-2,d0
    503a:	   |      move.l d0,1086(sp)
    503e:	   |      move.l 1cd6e <DOSBase>,d0
    5044:	   |      movea.l d0,a6
    5046:	   |      move.l 1090(sp),d1
    504a:	   |      move.l 1086(sp),d2
    504e:	   |      jsr -84(a6)
    5052:	   |      move.l d0,1082(sp)
    5056:	   |      move.l 1082(sp),d0
    505a:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    505e:	   |      move.l 1078(sp),1074(sp)
    5064:	   |      move.l 1cd6e <DOSBase>,d0
    506a:	   |      movea.l d0,a6
    506c:	   |      move.l 1074(sp),d1
    5070:	   |      jsr -126(a6)
    5074:	   |      move.l d0,1070(sp)
    5078:	   |      move.l 1070(sp),d0
    507c:	   |  ,-- bne.s 5090 <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    507e:	   |  |   move.l 1116(sp),-(sp)
    5082:	   |  |   pea 1892e <PutChar+0x974>
    5088:	   |  |   jsr 17518 <KPrintF>
    508e:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    5090:	   |  '-> move.l 1108(sp),d0
    5094:	   |      movea.l 1116(sp),a0
    5098:	   |      adda.l d0,a0
    509a:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    509e:	   '----> move.l #400,1066(sp)
    50a6:	          clr.l 1062(sp)
    50aa:	          move.l 1cd66 <SysBase>,d0
    50b0:	          movea.l d0,a6
    50b2:	          move.l 1066(sp),d0
    50b6:	          move.l 1062(sp),d1
    50ba:	          jsr -684(a6)
    50be:	          move.l d0,1058(sp)
    50c2:	          move.l 1058(sp),d0
    50c6:	          move.l d0,1ccce <gamePath>
	if (gamePath==0) {
    50cc:	          move.l 1ccce <gamePath>,d0
    50d2:	      ,-- bne.s 50e6 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    50d4:	      |   pea 18961 <PutChar+0x9a7>
    50da:	      |   jsr 17518 <KPrintF>
    50e0:	      |   addq.l #4,sp
    50e2:	   ,--|-- bra.w 51ce <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    50e6:	   |  '-> move.l 1ccce <gamePath>,1054(sp)
    50ee:	   |      moveq #-2,d0
    50f0:	   |      move.l d0,1050(sp)
    50f4:	   |      move.l 1cd6e <DOSBase>,d0
    50fa:	   |      movea.l d0,a6
    50fc:	   |      move.l 1054(sp),d1
    5100:	   |      move.l 1050(sp),d2
    5104:	   |      jsr -84(a6)
    5108:	   |      move.l d0,1046(sp)
    510c:	   |      move.l 1046(sp),d0
    5110:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    5114:	   |      move.l 1042(sp),1038(sp)
    511a:	   |      move.l 1cd6e <DOSBase>,d0
    5120:	   |      movea.l d0,a6
    5122:	   |      move.l 1038(sp),d1
    5126:	   |      jsr -126(a6)
    512a:	   |      move.l d0,1034(sp)
    512e:	   |      move.l 1034(sp),d0
    5132:	   |  ,-- bne.s 5142 <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    5134:	   |  |   pea 1899c <PutChar+0x9e2>
    513a:	   |  |   jsr 17518 <KPrintF>
    5140:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    5142:	   |  '-> move.l #1112,d0
    5148:	   |      add.l sp,d0
    514a:	   |      addi.l #-1102,d0
    5150:	   |      move.l d0,1030(sp)
    5154:	   |      moveq #-2,d0
    5156:	   |      move.l d0,1026(sp)
    515a:	   |      move.l 1cd6e <DOSBase>,d0
    5160:	   |      movea.l d0,a6
    5162:	   |      move.l 1030(sp),d1
    5166:	   |      move.l 1026(sp),d2
    516a:	   |      jsr -84(a6)
    516e:	   |      move.l d0,1022(sp)
    5172:	   |      move.l 1022(sp),d0
    5176:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    517a:	   |      move.l 1042(sp),1018(sp)
    5180:	   |      move.l 1cd6e <DOSBase>,d0
    5186:	   |      movea.l d0,a6
    5188:	   |      move.l 1018(sp),d1
    518c:	   |      jsr -126(a6)
    5190:	   |      move.l d0,1014(sp)
    5194:	   |      move.l 1014(sp),d0
    5198:	   |  ,-- bne.s 51ae <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    519a:	   |  |   moveq #10,d0
    519c:	   |  |   add.l sp,d0
    519e:	   |  |   move.l d0,-(sp)
    51a0:	   |  |   pea 189c8 <PutChar+0xa0e>
    51a6:	   |  |   jsr 17518 <KPrintF>
    51ac:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    51ae:	   |  '-> move.l 1ccce <gamePath>,d0
    51b4:	   +----- beq.s 51ce <setGameFilePath+0x234>
    51b6:	   |      move.l 1ccce <gamePath>,1010(sp)
    51be:	   |      move.l 1cd66 <SysBase>,d0
    51c4:	   |      movea.l d0,a6
    51c6:	   |      movea.l 1010(sp),a1
    51ca:	   |      jsr -690(a6)
}
    51ce:	   '----> move.l (sp)+,d2
    51d0:	          movea.l (sp)+,a6
    51d2:	          lea 1104(sp),sp
    51d6:	          rts

000051d8 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    51d8:	,-------> lea -16(sp),sp
    51dc:	|         move.l a6,-(sp)
	KPrintF("abortFunction %d started\n", &fun->originalNumber);
    51de:	|         move.l 24(sp),d0
    51e2:	|         move.l d0,-(sp)
    51e4:	|         pea 18ad0 <PutChar+0xb16>
    51ea:	|         jsr 17518 <KPrintF>
    51f0:	|         addq.l #8,sp
	int a;


	pauseFunction (fun);
    51f2:	|         move.l 24(sp),-(sp)
    51f6:	|         jsr 72a2 <pauseFunction>
    51fc:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    51fe:	|     ,-- bra.s 5210 <abortFunction+0x38>
    5200:	|  ,--|-> moveq #24,d0
    5202:	|  |  |   add.l 24(sp),d0
    5206:	|  |  |   move.l d0,-(sp)
    5208:	|  |  |   jsr 153bc <trimStack>
    520e:	|  |  |   addq.l #4,sp
    5210:	|  |  '-> movea.l 24(sp),a0
    5214:	|  |      move.l 24(a0),d0
    5218:	|  '----- bne.s 5200 <abortFunction+0x28>
	FreeVec( fun -> compiledLines);
    521a:	|         movea.l 24(sp),a0
    521e:	|         move.l 4(a0),12(sp)
    5224:	|         move.l 1cd66 <SysBase>,d0
    522a:	|         movea.l d0,a6
    522c:	|         movea.l 12(sp),a1
    5230:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5234:	|         clr.l 16(sp)
    5238:	|     ,-- bra.s 5258 <abortFunction+0x80>
    523a:	|  ,--|-> movea.l 24(sp),a0
    523e:	|  |  |   move.l 20(a0),d1
    5242:	|  |  |   move.l 16(sp),d0
    5246:	|  |  |   lsl.l #3,d0
    5248:	|  |  |   add.l d1,d0
    524a:	|  |  |   move.l d0,-(sp)
    524c:	|  |  |   jsr 14c86 <unlinkVar>
    5252:	|  |  |   addq.l #4,sp
    5254:	|  |  |   addq.l #1,16(sp)
    5258:	|  |  '-> movea.l 24(sp),a0
    525c:	|  |      move.l 8(a0),d0
    5260:	|  |      cmp.l 16(sp),d0
    5264:	|  '----- bgt.s 523a <abortFunction+0x62>
	if( fun -> numLocals > 0) {
    5266:	|         movea.l 24(sp),a0
    526a:	|         move.l 8(a0),d0
    526e:	|     ,-- ble.s 528a <abortFunction+0xb2>
		FreeVec(fun -> localVars);
    5270:	|     |   movea.l 24(sp),a0
    5274:	|     |   move.l 20(a0),8(sp)
    527a:	|     |   move.l 1cd66 <SysBase>,d0
    5280:	|     |   movea.l d0,a6
    5282:	|     |   movea.l 8(sp),a1
    5286:	|     |   jsr -690(a6)
	}

	unlinkVar (&fun -> reg);
    528a:	|     '-> moveq #28,d0
    528c:	|         add.l 24(sp),d0
    5290:	|         move.l d0,-(sp)
    5292:	|         jsr 14c86 <unlinkVar>
    5298:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    529a:	|         movea.l 24(sp),a0
    529e:	|         move.l 40(a0),d0
    52a2:	|     ,-- beq.s 52b4 <abortFunction+0xdc>
    52a4:	|     |   movea.l 24(sp),a0
    52a8:	|     |   move.l 40(a0),d0
    52ac:	|     |   move.l d0,-(sp)
    52ae:	'-----|-- jsr 51d8 <abortFunction>(pc)
    52b2:	      |   addq.l #4,sp
	FreeVec(fun);
    52b4:	      '-> move.l 24(sp),4(sp)
    52ba:	          move.l 1cd66 <SysBase>,d0
    52c0:	          movea.l d0,a6
    52c2:	          movea.l 4(sp),a1
    52c6:	          jsr -690(a6)
	fun = NULL;
    52ca:	          clr.l 24(sp)
	KPrintF("abortFunction finished\n");
    52ce:	          pea 18aea <PutChar+0xb30>
    52d4:	          jsr 17518 <KPrintF>
    52da:	          addq.l #4,sp
}
    52dc:	          nop
    52de:	          movea.l (sp)+,a6
    52e0:	          lea 16(sp),sp
    52e4:	          rts

000052e6 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    52e6:	          subq.l #8,sp
	int n = 0;
    52e8:	          clr.l 4(sp)
	*killedMyself = FALSE;
    52ec:	          movea.l 20(sp),a0
    52f0:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    52f2:	          move.l 1ccfe <allRunningFunctions>,(sp)
	while (fun) {
    52f8:	   ,----- bra.s 5326 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    52fa:	,--|----> movea.l (sp),a0
    52fc:	|  |      move.l (a0),d0
    52fe:	|  |      cmp.l 12(sp),d0
    5302:	|  |  ,-- bne.s 5320 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    5304:	|  |  |   movea.l (sp),a0
    5306:	|  |  |   move.w #1,54(a0)
			n++;
    530c:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    5310:	|  |  |   move.l (sp),d0
    5312:	|  |  |   cmp.l 16(sp),d0
    5316:	|  |  +-- bne.s 5320 <cancelAFunction+0x3a>
    5318:	|  |  |   movea.l 20(sp),a0
    531c:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    5320:	|  |  '-> movea.l (sp),a0
    5322:	|  |      move.l 44(a0),(sp)
	while (fun) {
    5326:	|  '----> tst.l (sp)
    5328:	'-------- bne.s 52fa <cancelAFunction+0x14>
	}
	return n;
    532a:	          move.l 4(sp),d0
}
    532e:	          addq.l #8,sp
    5330:	          rts

00005332 <completeTimers>:


void completeTimers () {
    5332:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5334:	          move.l 1ccfe <allRunningFunctions>,(sp)

	while (thisFunction) {
    533a:	   ,----- bra.s 5350 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    533c:	,--|----> movea.l (sp),a0
    533e:	|  |      move.b 56(a0),d0
    5342:	|  |  ,-- bne.s 534a <completeTimers+0x18>
    5344:	|  |  |   movea.l (sp),a0
    5346:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    534a:	|  |  '-> movea.l (sp),a0
    534c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5350:	|  '----> tst.l (sp)
    5352:	'-------- bne.s 533c <completeTimers+0xa>
	}
}
    5354:	          nop
    5356:	          nop
    5358:	          addq.l #4,sp
    535a:	          rts

0000535c <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    535c:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    5360:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    5366:	                                                             movea.l 80(sp),a0
    536a:	                                                             move.w 54(a0),d0
    536e:	,----------------------------------------------------------- beq.w 61fc <continueFunction+0xea0>
		abortFunction (fun);
    5372:	|                                                            move.l 80(sp),-(sp)
    5376:	|                                                            jsr 51d8 <abortFunction>
    537c:	|                                                            addq.l #4,sp
		return TRUE;
    537e:	|                                                            moveq #1,d0
    5380:	|  ,-------------------------------------------------------- bra.w 6206 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    5384:	|  |  ,----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    538a:	|  |  |                                                      movea.l 80(sp),a0
    538e:	|  |  |                                                      move.l 4(a0),d1
    5392:	|  |  |                                                      movea.l 80(sp),a0
    5396:	|  |  |                                                      move.l 36(a0),d0
    539a:	|  |  |                                                      lsl.l #3,d0
    539c:	|  |  |                                                      movea.l d1,a0
    539e:	|  |  |                                                      adda.l d0,a0
    53a0:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    53a6:	|  |  |                                                      movea.l 80(sp),a0
    53aa:	|  |  |                                                      move.l 4(a0),d1
    53ae:	|  |  |                                                      movea.l 80(sp),a0
    53b2:	|  |  |                                                      move.l 36(a0),d0
    53b6:	|  |  |                                                      lsl.l #3,d0
    53b8:	|  |  |                                                      movea.l d1,a0
    53ba:	|  |  |                                                      adda.l d0,a0
    53bc:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    53c0:	|  |  |                                                      moveq #41,d0
    53c2:	|  |  |                                                      cmp.l 64(sp),d0
    53c6:	|  |  |  ,-------------------------------------------------- bcs.w 61b0 <continueFunction+0xe54>
    53ca:	|  |  |  |                                                   move.l 64(sp),d0
    53ce:	|  |  |  |                                                   add.l d0,d0
    53d0:	|  |  |  |                                                   movea.l d0,a0
    53d2:	|  |  |  |                                                   adda.l #21470,a0
    53d8:	|  |  |  |                                                   move.w (a0),d0
    53da:	|  |  |  |                                                   jmp (53de <continueFunction+0x82>,pc,d0.w)
    53de:	|  |  |  |                                                   bset d6,(a2)
    53e0:	|  |  |  |                                                   ori.w #2670,(a4)
    53e4:	|  |  |  |                                                   eori.w #2416,d6
    53e8:	|  |  |  |                                                   bchg d4,d2
    53ea:	|  |  |  |                                                   bclr d4,(a4)+
    53ec:	|  |  |  |                                                   andi.l #181013194,d4
    53f2:	|  |  |  |                                                   .short 0x0aca
    53f4:	|  |  |  |                                                   .short 0x0aca
    53f6:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    53fe:	|  |  |  |                                                   .short 0x0aca
    5400:	|  |  |  |                                                   andi.w #906,-(a4)
    5404:	|  |  |  |                                                   bchg d1,196(a2)
    5408:	|  |  |  |                                                   bset d1,580(a4)
    540c:	|  |  |  |                                                   bclr d1,2576(a2)
    5410:	|  |  |  |                                                   andi.b #-56,2762(a2)
    5416:	|  |  |  |                                                   .short 0x0aca
    5418:	|  |  |  |                                                   eori.l #63572682,d0
    541e:	|  |  |  |                                                   .short 0x0aca
    5420:	|  |  |  |                                                   bchg d3,-(a2)
    5422:	|  |  |  |                                                   bchg #-36,(a2)
    5426:	|  |  |  |                                                   .short 0x08cc
    5428:	|  |  |  |                                                   addi.b #14,1038(a0)
    542e:	|  |  |  |                                                   .short 0x040e
    5430:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    5434:	|  |  |  |                                                   ori.w #8232,(a0)
    5438:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    543e:	|  |  |  |                                                   ori.w #12136,(a0)
    5442:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    5448:	|  |  |  |                                                   ori.w #12328,(a0)
    544c:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    5452:	|  |  |  |                                                   add.l 44(sp),d1
    5456:	|  |  |  |                                                   moveq #28,d0
    5458:	|  |  |  |                                                   add.l 80(sp),d0
    545c:	|  |  |  |                                                   move.l d1,-(sp)
    545e:	|  |  |  |                                                   move.l d0,-(sp)
    5460:	|  |  |  |                                                   jsr 14ef2 <copyVariable>
    5466:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    5468:	|  |  |  |                                                   move.l 80(sp),-(sp)
    546c:	|  |  |  |                                                   jsr 620c <finishFunction>
    5472:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    5474:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    547a:	|  |  |  |                                                   move.l 80(sp),-(sp)
    547e:	|  |  |  |                                                   jsr 734a <restartFunction>
    5484:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    5486:	|  |  |  |  ,----------------------------------------------- bra.w 61e4 <continueFunction+0xe88>
				finishFunction (fun);
    548a:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    548e:	|  |  |  |  |                                                jsr 620c <finishFunction>
    5494:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5496:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    549a:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    549e:	|  |  |  |  +----------------------------------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    54a2:	|  |  |  |  |                                                movea.l 80(sp),a0
    54a6:	|  |  |  |  |                                                move.l 28(a0),d0
    54aa:	|  |  |  |  |                                                moveq #2,d1
    54ac:	|  |  |  |  |                                                cmp.l d0,d1
    54ae:	|  |  |  |  |                                            ,-- beq.s 54ba <continueFunction+0x15e>
    54b0:	|  |  |  |  |                                            |   moveq #4,d1
    54b2:	|  |  |  |  |                                            |   cmp.l d0,d1
    54b4:	|  |  |  |  |                                         ,--|-- beq.s 5508 <continueFunction+0x1ac>
    54b6:	|  |  |  |  |                                ,--------|--|-- bra.w 55f0 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    54ba:	|  |  |  |  |                                |        |  '-> move.l 80(sp),-(sp)
    54be:	|  |  |  |  |                                |        |      jsr 72a2 <pauseFunction>
    54c4:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    54c6:	|  |  |  |  |                                |        |      moveq #24,d0
    54c8:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    54cc:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    54d0:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    54d4:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    54d8:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    54da:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    54de:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    54e2:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    54e4:	|  |  |  |  |                                |        |      jsr 76a6 <startNewFunctionNum>
    54ea:	|  |  |  |  |                                |        |      lea 20(sp),sp
    54ee:	|  |  |  |  |                                |        |      tst.l d0
    54f0:	|  |  |  |  |                                |        |  ,-- bne.s 54f8 <continueFunction+0x19c>
    54f2:	|  |  |  |  |                                |        |  |   clr.w d0
    54f4:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 6206 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    54f8:	|  |  |  |  |                                |        |  '-> move.l 1ccfe <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    5500:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    5504:	|  |  |  |  |                                |  ,-----|----- bra.w 5604 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    5508:	|  |  |  |  |                                |  |     '----> move.l 68(sp),d1
    550c:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    5510:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    5514:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    5518:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    551a:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    551c:	|  |  |  |  |                                |  |            jsr 1371a <callBuiltIn>
    5522:	|  |  |  |  |                                |  |            lea 12(sp),sp
    5526:	|  |  |  |  |                                |  |            move.l d0,52(sp)

					switch (br) {
    552a:	|  |  |  |  |                                |  |            moveq #5,d0
    552c:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    5530:	|  |  |  |  |                                |  |  ,-------- bcs.w 55ec <continueFunction+0x290>
    5534:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    5538:	|  |  |  |  |                                |  |  |         add.l d0,d0
    553a:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    553c:	|  |  |  |  |                                |  |  |         adda.l #21832,a0
    5542:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    5544:	|  |  |  |  |                                |  |  |         jmp (5548 <continueFunction+0x1ec>,pc,d0.w)
    5548:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    554e:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    5552:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    5558:	|  |  |  |  |                                |  |  |         sbcd d2,d5
    555a:	|  |  |  |  |                                |  |  |         jsr 17518 <KPrintF>
    5560:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    5562:	|  |  |  |  |                                |  |  |         clr.w d0
    5564:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 6206 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    5568:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    556c:	|  |  |  |  |                                |  |  |         jsr 72a2 <pauseFunction>
    5572:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    5574:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    5578:	|  |  |  |  |                                |  |  |  ,----- bra.s 55ee <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    557a:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    557e:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    5582:	|  |  |  |  |                                |  |  |  +----- bra.s 55ee <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    5584:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    5588:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    558e:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    5590:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    5594:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    5598:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    559c:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    559e:	|  |  |  |  |                                |  |  |  |      jsr 1532a <setVariable>
    55a4:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    55a8:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    55ac:	|  |  |  |  |                                |  |  |  |      jsr 72a2 <pauseFunction>
    55b2:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    55b4:	|  |  |  |  |                                |  |  |  |      move.l 1cd36 <noStack>,d1
    55ba:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    55be:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    55c0:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    55c2:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    55c6:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    55c8:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    55ca:	|  |  |  |  |                                |  |  |  |      jsr 76a6 <startNewFunctionNum>
    55d0:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    55d4:	|  |  |  |  |                                |  |  |  |      tst.l d0
    55d6:	|  |  |  |  |                                |  |  |  |  ,-- bne.s 55de <continueFunction+0x282>
    55d8:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    55da:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 6206 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    55de:	|  |  |  |  |                                |  |  |  |  '-> move.l 1ccfe <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    55e6:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    55ea:	|  |  |  |  |                                |  |  |  +----- bra.s 55ee <continueFunction+0x292>

						default:
						break;
    55ec:	|  |  |  |  |                                |  |  '--|----> nop
					}
				}
				break;
    55ee:	|  |  |  |  |                                |  +-----'----X bra.s 5604 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    55f0:	|  |  |  |  |                                '--|----------> pea 18b4d <PutChar+0xb93>
    55f6:	|  |  |  |  |                                   |            jsr 17518 <KPrintF>
    55fc:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    55fe:	|  |  |  |  |                                   |            clr.w d0
    5600:	|  +--|--|--|-----------------------------------|----------- bra.w 6206 <continueFunction+0xeaa>
			}
			break;
    5604:	|  |  |  |  +-----------------------------------'----------X bra.w 61e4 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    5608:	|  |  |  |  |                                                moveq #28,d0
    560a:	|  |  |  |  |                                                add.l 80(sp),d0
    560e:	|  |  |  |  |                                                clr.l -(sp)
    5610:	|  |  |  |  |                                                clr.l -(sp)
    5612:	|  |  |  |  |                                                move.l d0,-(sp)
    5614:	|  |  |  |  |                                                jsr 1532a <setVariable>
    561a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    561e:	|  |  |  |  +----------------------------------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    5622:	|  |  |  |  |                                                move.l 68(sp),d1
    5626:	|  |  |  |  |                                                moveq #28,d0
    5628:	|  |  |  |  |                                                add.l 80(sp),d0
    562c:	|  |  |  |  |                                                move.l d1,-(sp)
    562e:	|  |  |  |  |                                                pea 5 <_start+0x5>
    5632:	|  |  |  |  |                                                move.l d0,-(sp)
    5634:	|  |  |  |  |                                                jsr 1532a <setVariable>
    563a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    563e:	|  |  |  |  +----------------------------------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    5642:	|  |  |  |  |                                                move.l 68(sp),d1
    5646:	|  |  |  |  |                                                moveq #28,d0
    5648:	|  |  |  |  |                                                add.l 80(sp),d0
    564c:	|  |  |  |  |                                                move.l d1,-(sp)
    564e:	|  |  |  |  |                                                pea 1 <_start+0x1>
    5652:	|  |  |  |  |                                                move.l d0,-(sp)
    5654:	|  |  |  |  |                                                jsr 1532a <setVariable>
    565a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    565e:	|  |  |  |  +----------------------------------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    5662:	|  |  |  |  |                                                moveq #28,d0
    5664:	|  |  |  |  |                                                add.l 80(sp),d0
    5668:	|  |  |  |  |                                                movea.l 80(sp),a0
    566c:	|  |  |  |  |                                                movea.l 20(a0),a0
    5670:	|  |  |  |  |                                                move.l 68(sp),d1
    5674:	|  |  |  |  |                                                lsl.l #3,d1
    5676:	|  |  |  |  |                                                add.l a0,d1
    5678:	|  |  |  |  |                                                move.l d0,-(sp)
    567a:	|  |  |  |  |                                                move.l d1,-(sp)
    567c:	|  |  |  |  |                                                jsr 14ef2 <copyVariable>
    5682:	|  |  |  |  |                                                addq.l #8,sp
    5684:	|  |  |  |  |                                                tst.w d0
    5686:	|  |  |  |  |  ,-------------------------------------------- bne.w 61c2 <continueFunction+0xe66>
    568a:	|  |  |  |  |  |                                             clr.w d0
    568c:	|  +--|--|--|--|-------------------------------------------- bra.w 6206 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    5690:	|  |  |  |  |  |                                             moveq #28,d0
    5692:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5696:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5698:	|  |  |  |  |  |                                             jsr 14f78 <getBoolean>
    569e:	|  |  |  |  |  |                                             addq.l #4,sp
    56a0:	|  |  |  |  |  |                                             tst.w d0
    56a2:	|  |  |  |  |  |                                      ,----- beq.s 56be <continueFunction+0x362>
    56a4:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    56a8:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    56ac:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    56ae:	|  |  |  |  |  |                                      |      jsr 14f78 <getBoolean>
    56b4:	|  |  |  |  |  |                                      |      addq.l #4,sp
    56b6:	|  |  |  |  |  |                                      |      tst.w d0
    56b8:	|  |  |  |  |  |                                      +----- beq.s 56be <continueFunction+0x362>
    56ba:	|  |  |  |  |  |                                      |      moveq #1,d0
    56bc:	|  |  |  |  |  |                                      |  ,-- bra.s 56c0 <continueFunction+0x364>
    56be:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    56c0:	|  |  |  |  |  |                                         '-> moveq #28,d1
    56c2:	|  |  |  |  |  |                                             add.l 80(sp),d1
    56c6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    56c8:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    56cc:	|  |  |  |  |  |                                             move.l d1,-(sp)
    56ce:	|  |  |  |  |  |                                             jsr 1532a <setVariable>
    56d4:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    56d8:	|  |  |  |  |  |                                             moveq #24,d0
    56da:	|  |  |  |  |  |                                             add.l 80(sp),d0
    56de:	|  |  |  |  |  |                                             move.l d0,-(sp)
    56e0:	|  |  |  |  |  |                                             jsr 153bc <trimStack>
    56e6:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    56e8:	|  |  |  |  +--|-------------------------------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    56ec:	|  |  |  |  |  |                                             moveq #28,d0
    56ee:	|  |  |  |  |  |                                             add.l 80(sp),d0
    56f2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    56f4:	|  |  |  |  |  |                                             jsr 14f78 <getBoolean>
    56fa:	|  |  |  |  |  |                                             addq.l #4,sp
    56fc:	|  |  |  |  |  |                                             tst.w d0
    56fe:	|  |  |  |  |  |                                         ,-- bne.s 5716 <continueFunction+0x3ba>
    5700:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    5704:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    5708:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    570a:	|  |  |  |  |  |                                         |   jsr 14f78 <getBoolean>
    5710:	|  |  |  |  |  |                                         |   addq.l #4,sp
    5712:	|  |  |  |  |  |                                         |   tst.w d0
    5714:	|  |  |  |  |  |                                      ,--|-- beq.s 571a <continueFunction+0x3be>
    5716:	|  |  |  |  |  |                                      |  '-> moveq #1,d0
    5718:	|  |  |  |  |  |                                      |  ,-- bra.s 571c <continueFunction+0x3c0>
    571a:	|  |  |  |  |  |                                      '--|-> moveq #0,d0
    571c:	|  |  |  |  |  |                                         '-> moveq #28,d1
    571e:	|  |  |  |  |  |                                             add.l 80(sp),d1
    5722:	|  |  |  |  |  |                                             move.l d0,-(sp)
    5724:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    5728:	|  |  |  |  |  |                                             move.l d1,-(sp)
    572a:	|  |  |  |  |  |                                             jsr 1532a <setVariable>
    5730:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    5734:	|  |  |  |  |  |                                             moveq #24,d0
    5736:	|  |  |  |  |  |                                             add.l 80(sp),d0
    573a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    573c:	|  |  |  |  |  |                                             jsr 153bc <trimStack>
    5742:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    5744:	|  |  |  |  +--|-------------------------------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    5748:	|  |  |  |  |  |                                             move.l 68(sp),d1
    574c:	|  |  |  |  |  |                                             moveq #28,d0
    574e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5752:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5754:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    5758:	|  |  |  |  |  |                                             move.l d0,-(sp)
    575a:	|  |  |  |  |  |                                             jsr 1532a <setVariable>
    5760:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5764:	|  |  |  |  +--|-------------------------------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    5768:	|  |  |  |  |  |                                             move.l 68(sp),d1
    576c:	|  |  |  |  |  |                                             moveq #28,d0
    576e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5772:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5774:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    5778:	|  |  |  |  |  |                                             move.l d0,-(sp)
    577a:	|  |  |  |  |  |                                             jsr 1532a <setVariable>
    5780:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    5784:	|  |  |  |  +--|-------------------------------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    5788:	|  |  |  |  |  |                                             move.l 68(sp),d1
    578c:	|  |  |  |  |  |                                             moveq #28,d0
    578e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    5792:	|  |  |  |  |  |                                             move.l d1,-(sp)
    5794:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    5798:	|  |  |  |  |  |                                             move.l d0,-(sp)
    579a:	|  |  |  |  |  |                                             jsr 1532a <setVariable>
    57a0:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    57a4:	|  |  |  |  +--|-------------------------------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    57a8:	|  |  |  |  |  |                                             move.l 1ccc6 <dialogValue>,d0
    57ae:	|  |  |  |  |  |                                             moveq #1,d1
    57b0:	|  |  |  |  |  |                                             cmp.l d0,d1
    57b2:	|  |  |  |  |  |  ,----------------------------------------- beq.w 61c6 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    57b6:	|  |  |  |  |  |  |                                          pea 18b62 <PutChar+0xba8>
    57bc:	|  |  |  |  |  |  |                                          jsr 17518 <KPrintF>
    57c2:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    57c4:	|  |  |  |  |  |  |                                          clr.w d0
    57c6:	|  +--|--|--|--|--|----------------------------------------- bra.w 6206 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    57ca:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    57ce:	|  |  |  |  |  |  |                                          moveq #28,d0
    57d0:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    57d4:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    57d6:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    57d8:	|  |  |  |  |  |  |                                          jsr 14abc <loadStringToVar>
    57de:	|  |  |  |  |  |  |                                          addq.l #8,sp
    57e0:	|  |  |  |  |  |  |                                          tst.w d0
    57e2:	|  |  |  |  |  |  |  ,-------------------------------------- bne.w 61ca <continueFunction+0xe6e>
					return FALSE;
    57e6:	|  |  |  |  |  |  |  |                                       clr.w d0
    57e8:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6206 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    57ec:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    57f0:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    57f4:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    57f6:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    57f8:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    57fa:	|  |  |  |  |  |  |  |                                ,----- beq.s 5858 <continueFunction+0x4fc>
    57fc:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    57fe:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    5800:	|  |  |  |  |  |  |  |              ,-----------------|----- bcs.w 59ec <continueFunction+0x690>
    5804:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    5806:	|  |  |  |  |  |  |  |              |                 |  ,-- beq.s 5812 <continueFunction+0x4b6>
    5808:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    580a:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    580c:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 5858 <continueFunction+0x4fc>
    580e:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 59ec <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    5812:	|  |  |  |  |  |  |  |              |                 |  '-> moveq #38,d0
    5814:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    5818:	|  |  |  |  |  |  |  |              |                 |  ,-- bne.s 5844 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    581a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    581c:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    5820:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5822:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    5824:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5826:	|  |  |  |  |  |  |  |              |                 |  |   jsr 1532a <setVariable>
    582c:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    5830:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    5832:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    5836:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    5838:	|  |  |  |  |  |  |  |              |                 |  |   jsr 153bc <trimStack>
    583e:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    5840:	|  |  |  |  |  |  |  |              |  ,--------------|--|-- bra.w 5a02 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    5844:	|  |  |  |  |  |  |  |              |  |              |  '-> pea 18ba3 <PutChar+0xbe9>
    584a:	|  |  |  |  |  |  |  |              |  |              |      jsr 17518 <KPrintF>
    5850:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    5852:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    5854:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 6206 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5858:	|  |  |  |  |  |  |  |              |  |              '----> movea.l 80(sp),a0
    585c:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    5860:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    5864:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    5866:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 587c <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    5868:	|  |  |  |  |  |  |  |              |  |                 |   pea 18bdf <PutChar+0xc25>
    586e:	|  |  |  |  |  |  |  |              |  |                 |   jsr 17518 <KPrintF>
    5874:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    5876:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    5878:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6206 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    587c:	|  |  |  |  |  |  |  |              |  |                 '-> moveq #28,d0
    587e:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    5882:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    5884:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    5888:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    588c:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    588e:	|  |  |  |  |  |  |  |              |  |                     jsr 14a38 <getValueType>
    5894:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    5898:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    589a:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 58a2 <continueFunction+0x546>
    589c:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    589e:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 6206 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    58a2:	|  |  |  |  |  |  |  |              |  |                 '-> movea.l 80(sp),a0
    58a6:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    58aa:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    58ac:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    58ae:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    58b0:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 58d2 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    58b2:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    58b6:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    58b8:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    58bc:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    58c0:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    58c4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    58c6:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    58c8:	|  |  |  |  |  |  |  |              |  |                 |   jsr 146c2 <fastArrayGetByIndex>
    58ce:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    58d0:	|  |  |  |  |  |  |  |              |  |              ,--|-- bra.s 58f2 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    58d2:	|  |  |  |  |  |  |  |              |  |              |  '-> move.l 4(sp),d0
    58d6:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    58d8:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    58dc:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    58e0:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    58e4:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    58e6:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    58e8:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    58ea:	|  |  |  |  |  |  |  |              |  |              |      jsr 1534c <stackGetByIndex>
    58f0:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    58f2:	|  |  |  |  |  |  |  |              |  |              '----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    58f6:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    58f8:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    58fc:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    58fe:	|  |  |  |  |  |  |  |              |  |                     jsr 153bc <trimStack>
    5904:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    5906:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    590a:	|  |  |  |  |  |  |  |              |  |                 ,-- bne.s 5926 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    590c:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    590e:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    5912:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5914:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    5916:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    5918:	|  |  |  |  |  |  |  |              |  |                 |   jsr 1532a <setVariable>
    591e:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    5922:	|  |  |  |  |  |  |  |              |  |  ,--------------|-- bra.w 5a00 <continueFunction+0x6a4>
						switch (com) {
    5926:	|  |  |  |  |  |  |  |              |  |  |              '-> moveq #39,d0
    5928:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    592c:	|  |  |  |  |  |  |  |              |  |  |              ,-- beq.s 593a <continueFunction+0x5de>
    592e:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    5930:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    5934:	|  |  |  |  |  |  |  |              |  |  |           ,--|-- beq.s 5984 <continueFunction+0x628>
    5936:	|  |  |  |  |  |  |  |              |  |  |  ,--------|--|-- bra.w 59cc <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    593a:	|  |  |  |  |  |  |  |              |  |  |  |        |  '-> move.l 60(sp),-(sp)
    593e:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    5942:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    5946:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    5948:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 14a38 <getValueType>
    594e:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    5952:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    5954:	|  |  |  |  |  |  |  |              |  |  |  |        |  ,-- bne.s 595c <continueFunction+0x600>
    5956:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    5958:	|  |  |  |  |  |  |  |              |  |  |  |  ,-----|--|-- bra.w 59e6 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    595c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  '-> move.l (sp),d1
    595e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    5960:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    5964:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    5966:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    596a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    596c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 1532a <setVariable>
    5972:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    5976:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    5978:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    597a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    597e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    5982:	|  |  |  |  |  |  |  |              |  |  |  |  |  ,--|----- bra.s 59ea <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    5984:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  '----> move.l 60(sp),-(sp)
    5988:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    598c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    5990:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    5992:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14a38 <getValueType>
    5998:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    599c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    599e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     ,-- bne.s 59a4 <continueFunction+0x648>
    59a0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    59a2:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 59e6 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    59a4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     '-> move.l (sp),d1
    59a6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    59a8:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    59ac:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    59ae:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    59b2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    59b4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 1532a <setVariable>
    59ba:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    59be:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    59c0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    59c2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    59c6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    59ca:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 59ea <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    59cc:	|  |  |  |  |  |  |  |              |  |  |  '--|--|-------> moveq #28,d0
    59ce:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    59d2:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    59d4:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    59d8:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 14ef2 <copyVariable>
    59de:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    59e0:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    59e2:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 5a00 <continueFunction+0x6a4>
    59e4:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    59e6:	|  +--|--|--|--|--|--|--------------|--|--|-----'--|-------X bra.w 6206 <continueFunction+0xeaa>
				break;
    59ea:	|  |  |  |  |  |  |  |              |  |  +--------'-------X bra.s 5a00 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    59ec:	|  |  |  |  |  |  |  |              '--|--|----------------> pea 18bfd <PutChar+0xc43>
    59f2:	|  |  |  |  |  |  |  |                 |  |                  jsr 17518 <KPrintF>
    59f8:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    59fa:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    59fc:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 6206 <continueFunction+0xeaa>
				break;
    5a00:	|  |  |  |  |  |  |  |                 |  '----------------> nop
			}
			break;
    5a02:	|  |  |  |  +--|--|--|-----------------'-------------------X bra.w 61e4 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    5a06:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5a0a:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    5a0e:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    5a10:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    5a12:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    5a14:	|  |  |  |  |  |  |  |                                   ,-- beq.s 5a22 <continueFunction+0x6c6>
    5a16:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    5a18:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    5a1a:	|  |  |  |  |  |  |  |                                ,--|-- beq.w 5ace <continueFunction+0x772>
    5a1e:	|  |  |  |  |  |  |  |                             ,--|--|-- bra.w 5b2c <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    5a22:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5a26:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5a2a:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5a2e:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5a30:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5a46 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    5a32:	|  |  |  |  |  |  |  |                             |  |  |   pea 18bdf <PutChar+0xc25>
    5a38:	|  |  |  |  |  |  |  |                             |  |  |   jsr 17518 <KPrintF>
    5a3e:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    5a40:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5a42:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6206 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    5a46:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #28,d0
    5a48:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5a4c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5a4e:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    5a52:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    5a56:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    5a58:	|  |  |  |  |  |  |  |                             |  |      jsr 14a38 <getValueType>
    5a5e:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5a62:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5a64:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5a6c <continueFunction+0x710>
    5a66:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5a68:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6206 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    5a6c:	|  |  |  |  |  |  |  |                             |  |  '-> movea.l 80(sp),a0
    5a70:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5a74:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    5a78:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    5a7a:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    5a7e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    5a80:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    5a84:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    5a88:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    5a8c:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    5a8e:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    5a90:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    5a92:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5a94:	|  |  |  |  |  |  |  |                             |  |      jsr 7552 <stackSetByIndex>
    5a9a:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    5a9e:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    5aa0:	|  |  |  |  |  |  |  |                             |  |  ,-- bne.s 5aa8 <continueFunction+0x74c>
						return FALSE;
    5aa2:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    5aa4:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 6206 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    5aa8:	|  |  |  |  |  |  |  |                             |  |  '-> moveq #24,d0
    5aaa:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5aae:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5ab0:	|  |  |  |  |  |  |  |                             |  |      jsr 153bc <trimStack>
    5ab6:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    5ab8:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    5aba:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    5abe:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    5ac0:	|  |  |  |  |  |  |  |                             |  |      jsr 153bc <trimStack>
    5ac6:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    5ac8:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    5aca:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 61e4 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    5ace:	|  |  |  |  |  |  |  |                             |  '----> moveq #28,d0
    5ad0:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    5ad4:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5ad6:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    5ada:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    5ade:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    5ae0:	|  |  |  |  |  |  |  |                             |         jsr 14a38 <getValueType>
    5ae6:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    5aea:	|  |  |  |  |  |  |  |                             |         tst.w d0
    5aec:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5af4 <continueFunction+0x798>
    5aee:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    5af0:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 6206 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    5af4:	|  |  |  |  |  |  |  |                             |     '-> move.l 12(sp),d0
    5af8:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    5afa:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    5afe:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    5b02:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    5b06:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    5b08:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    5b0a:	|  |  |  |  |  |  |  |                             |         jsr 146c2 <fastArrayGetByIndex>
    5b10:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    5b12:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    5b16:	|  |  |  |  |  |  |  |                             |     ,-- bne.s 5b26 <continueFunction+0x7ca>
    5b18:	|  |  |  |  |  |  |  |                             |     |   pea 18c21 <PutChar+0xc67>
    5b1e:	|  |  |  |  |  |  |  |                             |     |   jsr 17518 <KPrintF>
    5b24:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    5b26:	|  |  |  |  |  |  |  |                             |     '-> clr.w d0
    5b28:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 6206 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    5b2c:	|  |  |  |  |  |  |  |                             '-------> pea 18bfd <PutChar+0xc43>
    5b32:	|  |  |  |  |  |  |  |                                       jsr 17518 <KPrintF>
    5b38:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    5b3a:	|  |  |  |  |  |  |  |                                       clr.w d0
    5b3c:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 6206 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5b40:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5b44:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5b48:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5b4c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5b4e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5b50:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5b52:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5b56:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    5b5a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5b5c:	|  |  |  |  |  |  |  |                                       jsr 14a38 <getValueType>
    5b62:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5b66:	|  |  |  |  |  |  |  |                                       tst.w d0
    5b68:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5b70 <continueFunction+0x814>
    5b6a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5b6c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6206 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5b70:	|  |  |  |  |  |  |  |                                   '-> move.l 16(sp),d1
    5b74:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5b76:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5b7a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5b7c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5b80:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5b82:	|  |  |  |  |  |  |  |                                       jsr 1532a <setVariable>
    5b88:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    5b8c:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    5b90:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5b92:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5b94:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5b98:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5b9c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5ba0:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5ba2:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5ba4:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ba6:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5baa:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5bac:	|  |  |  |  |  |  |  |                                       jsr 1532a <setVariable>
    5bb2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5bb6:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5bba:	|  |  |  |  |  |  |  |                                       move.l 1cd14 <globalVars>,d1
    5bc0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5bc4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5bc6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5bc8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5bca:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5bce:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    5bd2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5bd4:	|  |  |  |  |  |  |  |                                       jsr 14a38 <getValueType>
    5bda:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5bde:	|  |  |  |  |  |  |  |                                       tst.w d0
    5be0:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5be8 <continueFunction+0x88c>
    5be2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5be4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6206 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5be8:	|  |  |  |  |  |  |  |                                   '-> move.l 20(sp),d1
    5bec:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5bee:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5bf2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5bf4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5bf8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5bfa:	|  |  |  |  |  |  |  |                                       jsr 1532a <setVariable>
    5c00:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    5c04:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    5c08:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5c0a:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    5c0c:	|  |  |  |  |  |  |  |                                       movea.l 1cd14 <globalVars>,a0
    5c12:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5c16:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5c18:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5c1a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5c1c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5c20:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5c22:	|  |  |  |  |  |  |  |                                       jsr 1532a <setVariable>
    5c28:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5c2c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    5c30:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5c34:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5c38:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5c3c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5c3e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5c40:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5c42:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5c46:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    5c4a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5c4c:	|  |  |  |  |  |  |  |                                       jsr 14a38 <getValueType>
    5c52:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5c56:	|  |  |  |  |  |  |  |                                       tst.w d0
    5c58:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5c60 <continueFunction+0x904>
    5c5a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5c5c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6206 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5c60:	|  |  |  |  |  |  |  |                                   '-> move.l 24(sp),d1
    5c64:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5c66:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5c6a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5c6c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5c70:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5c72:	|  |  |  |  |  |  |  |                                       jsr 1532a <setVariable>
    5c78:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    5c7c:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    5c80:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5c82:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5c84:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5c88:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    5c8c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5c90:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5c92:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5c94:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5c96:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5c9a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5c9c:	|  |  |  |  |  |  |  |                                       jsr 1532a <setVariable>
    5ca2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5ca6:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    5caa:	|  |  |  |  |  |  |  |                                       move.l 1cd14 <globalVars>,d1
    5cb0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5cb4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5cb6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    5cb8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5cba:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5cbe:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    5cc2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    5cc4:	|  |  |  |  |  |  |  |                                       jsr 14a38 <getValueType>
    5cca:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    5cce:	|  |  |  |  |  |  |  |                                       tst.w d0
    5cd0:	|  |  |  |  |  |  |  |                                   ,-- bne.s 5cd8 <continueFunction+0x97c>
    5cd2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    5cd4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 6206 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    5cd8:	|  |  |  |  |  |  |  |                                   '-> move.l 28(sp),d1
    5cdc:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5cde:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5ce2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5ce4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5ce8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5cea:	|  |  |  |  |  |  |  |                                       jsr 1532a <setVariable>
    5cf0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    5cf4:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    5cf8:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    5cfa:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    5cfc:	|  |  |  |  |  |  |  |                                       movea.l 1cd14 <globalVars>,a0
    5d02:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5d06:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5d08:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    5d0a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5d0c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    5d10:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d12:	|  |  |  |  |  |  |  |                                       jsr 1532a <setVariable>
    5d18:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    5d1c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    5d20:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    5d24:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    5d28:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    5d2c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    5d2e:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    5d30:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    5d32:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    5d36:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    5d38:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    5d3a:	|  |  |  |  |  |  |  |                                       jsr 14ef2 <copyVariable>
    5d40:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    5d42:	|  |  |  |  |  |  |  |                                       tst.w d0
    5d44:	|  |  |  |  |  |  |  |  ,----------------------------------- bne.w 61ce <continueFunction+0xe72>
    5d48:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    5d4a:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 6206 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    5d4e:	|  |  |  |  |  |  |  |  |                                    move.l 1cd14 <globalVars>,d1
    5d54:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    5d58:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    5d5a:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    5d5c:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    5d5e:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    5d62:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    5d64:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    5d66:	|  |  |  |  |  |  |  |  |                                    jsr 14ef2 <copyVariable>
    5d6c:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    5d6e:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    5d70:	|  |  |  |  |  |  |  |  |  ,-------------------------------- bne.w 61d2 <continueFunction+0xe76>
    5d74:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    5d76:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 6206 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    5d7a:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    5d7c:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    5d80:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1cd14 <globalVars>,a0
    5d86:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    5d8a:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    5d8c:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    5d8e:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    5d90:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    5d92:	|  |  |  |  |  |  |  |  |  |                                 jsr 14ef2 <copyVariable>
    5d98:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    5d9a:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    5d9c:	|  |  |  |  |  |  |  |  |  |  ,----------------------------- bne.w 61d6 <continueFunction+0xe7a>
    5da0:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    5da2:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 6206 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    5da6:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    5da8:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    5dac:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    5dae:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    5db2:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    5db4:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    5db6:	|  |  |  |  |  |  |  |  |  |  |                              jsr 14274 <addVarToStack>
    5dbc:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    5dbe:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    5dc0:	|  |  |  |  |  |  |  |  |  |  |  ,-------------------------- bne.w 61da <continueFunction+0xe7e>
    5dc4:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    5dc6:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 6206 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    5dca:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    5dcc:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    5dd0:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    5dd2:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    5dd6:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    5dd8:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    5dda:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 142fa <addVarToStackQuick>
    5de0:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    5de2:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    5de4:	|  |  |  |  |  |  |  |  |  |  |  |  ,----------------------- bne.w 61de <continueFunction+0xe82>
    5de8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    5dea:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 6206 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    5dee:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5df0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5df4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5df6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14f78 <getBoolean>
    5dfc:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5dfe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5e00:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    5e02:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    5e04:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    5e06:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    5e08:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5e0a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5e0e:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    5e10:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    5e14:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5e16:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 1532a <setVariable>
    5e1c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    5e20:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    5e24:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    5e26:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    5e2a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    5e2c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14f78 <getBoolean>
    5e32:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    5e34:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    5e36:	|  |  |  |  |  |  |  |  |  |  |  |  |  ,-------------------- bne.w 61e2 <continueFunction+0xe86>
				advanceNow = FALSE;
    5e3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    5e3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5e42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    5e48:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 61e2 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    5e4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    5e50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5e54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    5e5a:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 61e4 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    5e5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5e60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5e64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5e66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5e6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    5e6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    5e70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14a38 <getValueType>
    5e76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    5e7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    5e7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 ,-- bne.s 5e84 <continueFunction+0xb28>
    5e7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    5e80:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 6206 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    5e84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 '-> move.l 32(sp),d0
    5e88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    5e8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    5e8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    5e8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    5e92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    5e94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    5e98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    5e9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 1532a <setVariable>
    5ea0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    5ea4:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 61e4 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    5ea8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    5eac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    5eb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  ,----------------- beq.w 619a <continueFunction+0xe3e>
				int firstValue, secondValue;

				switch (com) {
    5eb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    5eb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    5eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        ,-------- beq.s 5f36 <continueFunction+0xbda>
    5ebc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    5ebe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    5ec2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     ,--|-------- bcs.w 5f80 <continueFunction+0xc24>
    5ec6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    5ec8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    5ecc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     ,-- beq.s 5eda <continueFunction+0xb7e>
    5ece:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    5ed0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    5ed4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  ,--|-- beq.s 5f08 <continueFunction+0xbac>
    5ed6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 5f80 <continueFunction+0xc24>
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    5eda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  '-> moveq #28,d0
    5edc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5ee0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    5ee4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    5ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5eea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    5eec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 1436e <addVariablesInSecond>
    5ef2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    5ef4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    5ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    5efa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    5efc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 153bc <trimStack>
    5f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    5f04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ,--|--|--|----- bra.w 61ae <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5f08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----> moveq #28,d0
    5f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    5f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    5f16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5f18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    5f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 1442c <compareVariablesInSecond>
    5f20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    5f22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    5f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    5f28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    5f2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 153bc <trimStack>
    5f30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    5f32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 61ae <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    5f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '-------> moveq #28,d0
    5f38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    5f44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5f46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    5f48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 1442c <compareVariablesInSecond>
    5f4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    5f50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    5f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    5f56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    5f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 153bc <trimStack>
    5f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    5f60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5f64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    5f68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    5f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    5f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    5f6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    5f74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    5f78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    5f7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 61ae <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    5f80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  '----------> movea.l 80(sp),a0
    5f84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    5f88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5f8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    5f92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5f94:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14a38 <getValueType>
    5f9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5f9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5fa0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5fa8 <continueFunction+0xc4c>
    5fa2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5fa4:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6206 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    5fa8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #28,d0
    5faa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5fae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5fb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    5fb4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    5fb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    5fba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14a38 <getValueType>
    5fc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    5fc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    5fc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bne.s 5fce <continueFunction+0xc72>
    5fc8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    5fca:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 6206 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    5fce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           '-> moveq #24,d0
    5fd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    5fd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    5fd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 153bc <trimStack>
    5fdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp

					switch (com) {
    5fde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    5fe0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    5fe4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    5fe6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    5fe8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           ,-- bcs.w 61ac <continueFunction+0xe50>
    5fec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    5fee:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    5ff0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #24572,a0
    5ff6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    5ff8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (5ffc <continueFunction+0xca0>,pc,d0.w)
    5ffc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    6000:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    6002:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    600a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    600c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    6014:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    601c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    6024:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    602c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    6030:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    6034:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6036:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6038:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17ea4 <__mulsi3>
    603e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    6040:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    6042:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6044:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6048:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    604a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    604e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6050:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1532a <setVariable>
    6056:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    605a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 61ae <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    605e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6062:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6066:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    6068:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    606a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    606e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6070:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6074:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6076:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1532a <setVariable>
    607c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6080:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 61ae <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    6084:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    6088:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    608c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    608e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6090:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17f50 <__modsi3>
    6096:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    6098:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    609a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    609c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    60a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    60a2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    60a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    60a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1532a <setVariable>
    60ae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    60b2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 61ae <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    60b6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    60ba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    60be:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    60c0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    60c2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 17f22 <__divsi3>
    60c8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    60ca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    60cc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    60ce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    60d2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    60d4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    60d8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    60da:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1532a <setVariable>
    60e0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    60e4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 61ae <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    60e8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    60ec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    60f0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    60f2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    60f4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    60f6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    60f8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    60fa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    60fc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6100:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6102:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6106:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6108:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1532a <setVariable>
    610e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6112:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 61ae <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    6116:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    611a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    611e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6120:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    6122:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6124:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6126:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6128:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    612a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    612e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6130:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6134:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6136:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1532a <setVariable>
    613c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6140:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 61ae <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    6142:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6146:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    614a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    614c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    614e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    6150:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    6152:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6154:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6156:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    615a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    615c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    6160:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    6162:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1532a <setVariable>
    6168:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    616c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 61ae <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    616e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    6172:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    6176:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    6178:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    617a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    617c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    617e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    6180:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    6182:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    6186:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    6188:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    618c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    618e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1532a <setVariable>
    6194:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    6198:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 61ae <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    619a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  '--|-----------|-> pea 18c42 <PutChar+0xc88>
    61a0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 17518 <KPrintF>
    61a6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    61a8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    61aa:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 6206 <continueFunction+0xeaa>
						break;
    61ac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           '-> nop
			}
			break;
    61ae:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----'-------------X bra.s 61e4 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    61b0:	|  |  |  '--|--|--|--|--|--|--|--|--|--|-------------------> pea 18c5a <PutChar+0xca0>
    61b6:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 17518 <KPrintF>
    61bc:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    61be:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    61c0:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 6206 <continueFunction+0xeaa>
			break;
    61c2:	|  |  |     |  '--|--|--|--|--|--|--|--|-------------------> nop
    61c4:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 61e4 <continueFunction+0xe88>
			break;
    61c6:	|  |  |     |     '--|--|--|--|--|--|--|-------------------> nop
    61c8:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 61e4 <continueFunction+0xe88>
			break;
    61ca:	|  |  |     |        '--|--|--|--|--|--|-------------------> nop
    61cc:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 61e4 <continueFunction+0xe88>
			break;
    61ce:	|  |  |     |           '--|--|--|--|--|-------------------> nop
    61d0:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 61e4 <continueFunction+0xe88>
			break;
    61d2:	|  |  |     |              '--|--|--|--|-------------------> nop
    61d4:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 61e4 <continueFunction+0xe88>
			break;
    61d6:	|  |  |     |                 '--|--|--|-------------------> nop
    61d8:	|  |  |     +--------------------|--|--|-------------------- bra.s 61e4 <continueFunction+0xe88>
			break;
    61da:	|  |  |     |                    '--|--|-------------------> nop
    61dc:	|  |  |     +-----------------------|--|-------------------- bra.s 61e4 <continueFunction+0xe88>
			break;
    61de:	|  |  |     |                       '--|-------------------> nop
    61e0:	|  |  |     +--------------------------|-------------------- bra.s 61e4 <continueFunction+0xe88>
			break;
    61e2:	|  |  |     |                          '-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    61e4:	|  |  |     '----------------------------------------------> tst.w 72(sp)
    61e8:	+--|--|----------------------------------------------------- beq.s 61fc <continueFunction+0xea0>
    61ea:	|  |  |                                                      movea.l 80(sp),a0
    61ee:	|  |  |                                                      move.l 36(a0),d0
    61f2:	|  |  |                                                      addq.l #1,d0
    61f4:	|  |  |                                                      movea.l 80(sp),a0
    61f8:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    61fc:	'--|--|----------------------------------------------------> tst.w 74(sp)
    6200:	   |  '----------------------------------------------------- bne.w 5384 <continueFunction+0x28>

	}
	return TRUE;
    6204:	   |                                                         moveq #1,d0
}
    6206:	   '-------------------------------------------------------> lea 76(sp),sp
    620a:	                                                             rts

0000620c <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
	KPrintF("finishFunction %d started\n", &fun->originalNumber);
    620c:	    move.l 4(sp),d0
    6210:	    move.l d0,-(sp)
    6212:	    pea 18c86 <PutChar+0xccc>
    6218:	    jsr 17518 <KPrintF>
    621e:	    addq.l #8,sp

	pauseFunction (fun);
    6220:	    move.l 4(sp),-(sp)
    6224:	    jsr 72a2 <pauseFunction>
    622a:	    addq.l #4,sp

	//Keep function loaed in memory if it is the focus function
	if( fun != currentEvents -> focusFunction) {	
    622c:	    movea.l 1c6d6 <currentEvents>,a0
    6232:	    move.l 20(a0),d0
    6236:	    cmp.l 4(sp),d0
    623a:	,-- beq.s 6248 <finishFunction+0x3c>
		unloadFunction (fun);
    623c:	|   move.l 4(sp),-(sp)
    6240:	|   jsr 7752 <unloadFunction>
    6246:	|   addq.l #4,sp
	}	
}
    6248:	'-> nop
    624a:	    rts

0000624c <freezeSubs>:

void freezeSubs () {
    624c:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    624e:	          move.l 1ccfe <allRunningFunctions>,(sp)

	while (thisFunction) {
    6254:	   ,----- bra.s 6272 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    6256:	,--|----> movea.l (sp),a0
    6258:	|  |      move.w 52(a0),d0
    625c:	|  |  ,-- bne.s 626c <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    625e:	|  |  |   movea.l (sp),a0
    6260:	|  |  |   move.b 56(a0),d0
    6264:	|  |  |   addq.b #1,d0
    6266:	|  |  |   movea.l (sp),a0
    6268:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    626c:	|  |  '-> movea.l (sp),a0
    626e:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6272:	|  '----> tst.l (sp)
    6274:	'-------- bne.s 6256 <freezeSubs+0xa>
	}
}
    6276:	          nop
    6278:	          nop
    627a:	          addq.l #4,sp
    627c:	          rts

0000627e <handleInput>:

BOOL handleInput () {
    627e:	             lea -16(sp),sp
    6282:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    6284:	             move.l 1ce76 <overRegion>,d0
    628a:	         ,-- bne.s 6292 <handleInput+0x14>
    628c:	         |   jsr 15c74 <getOverRegion>

	if (input.justMoved) {
    6292:	         '-> move.w 1cd1c <input+0x4>,d0
    6298:	         ,-- beq.s 62d6 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    629a:	         |   movea.l 1c6d6 <currentEvents>,a0
    62a0:	         |   move.l 16(a0),d0
    62a4:	         +-- beq.s 62d6 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    62a6:	         |   move.l 1cd36 <noStack>,d1
    62ac:	         |   movea.l 1c6d6 <currentEvents>,a0
    62b2:	         |   move.l 16(a0),d0
    62b6:	         |   pea 1 <_start+0x1>
    62ba:	         |   move.l d1,-(sp)
    62bc:	         |   clr.l -(sp)
    62be:	         |   clr.l -(sp)
    62c0:	         |   move.l d0,-(sp)
    62c2:	         |   jsr 76a6 <startNewFunctionNum>
    62c8:	         |   lea 20(sp),sp
    62cc:	         |   tst.l d0
    62ce:	         +-- bne.s 62d6 <handleInput+0x58>
    62d0:	         |   clr.w d0
    62d2:	,--------|-- bra.w 64dc <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    62d6:	|        '-> clr.w 1cd1c <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    62dc:	|            move.l 1cd2e <lastRegion>,d1
    62e2:	|            move.l 1ce76 <overRegion>,d0
    62e8:	|            cmp.l d1,d0
    62ea:	|  ,-------- beq.w 63c2 <handleInput+0x144>
    62ee:	|  |         movea.l 1c6d6 <currentEvents>,a0
    62f4:	|  |         move.l 20(a0),d0
    62f8:	|  +-------- beq.w 63c2 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    62fc:	|  |         moveq #12,d0
    62fe:	|  |         move.l d0,16(sp)
    6302:	|  |         clr.l 12(sp)
    6306:	|  |         move.l 1cd66 <SysBase>,d0
    630c:	|  |         movea.l d0,a6
    630e:	|  |         move.l 16(sp),d0
    6312:	|  |         move.l 12(sp),d1
    6316:	|  |         jsr -684(a6)
    631a:	|  |         move.l d0,8(sp)
    631e:	|  |         move.l 8(sp),d0
    6322:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    6326:	|  |         move.l 4(sp),d0
    632a:	|  |     ,-- bne.s 6340 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    632c:	|  |     |   pea 18ca1 <PutChar+0xce7>
    6332:	|  |     |   jsr 17518 <KPrintF>
    6338:	|  |     |   addq.l #4,sp
			return FALSE;
    633a:	|  |     |   clr.w d0
    633c:	+--|-----|-- bra.w 64dc <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    6340:	|  |     '-> movea.l 4(sp),a0
    6344:	|  |         clr.l (a0)
		if (overRegion) {
    6346:	|  |         move.l 1ce76 <overRegion>,d0
    634c:	|  |  ,----- beq.s 6374 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    634e:	|  |  |      movea.l 1ce76 <overRegion>,a0
    6354:	|  |  |      movea.l 28(a0),a0
    6358:	|  |  |      move.l 4(a0),d1
    635c:	|  |  |      move.l 4(sp),d0
    6360:	|  |  |      move.l d1,-(sp)
    6362:	|  |  |      pea 7 <_start+0x7>
    6366:	|  |  |      move.l d0,-(sp)
    6368:	|  |  |      jsr 1532a <setVariable>
    636e:	|  |  |      lea 12(sp),sp
    6372:	|  |  |  ,-- bra.s 638a <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    6374:	|  |  '--|-> move.l 4(sp),d0
    6378:	|  |     |   clr.l -(sp)
    637a:	|  |     |   pea 1 <_start+0x1>
    637e:	|  |     |   move.l d0,-(sp)
    6380:	|  |     |   jsr 1532a <setVariable>
    6386:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;		
    638a:	|  |     '-> movea.l 4(sp),a0
    638e:	|  |         clr.l 8(a0)
		if (! startNewFunctionLoaded (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    6392:	|  |         movea.l 1c6d6 <currentEvents>,a0
    6398:	|  |         move.l 20(a0),d0
    639c:	|  |         pea 1 <_start+0x1>
    63a0:	|  |         lea 8(sp),a0
    63a4:	|  |         move.l a0,-(sp)
    63a6:	|  |         clr.l -(sp)
    63a8:	|  |         pea 1 <_start+0x1>
    63ac:	|  |         move.l d0,-(sp)
    63ae:	|  |         jsr 7596 <startNewFunctionLoaded>
    63b4:	|  |         lea 20(sp),sp
    63b8:	|  |         tst.l d0
    63ba:	|  +-------- bne.s 63c2 <handleInput+0x144>
    63bc:	|  |         clr.w d0
    63be:	+--|-------- bra.w 64dc <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    63c2:	|  '-------> move.w 1cd1e <input+0x6>,d0
    63c8:	|        ,-- beq.s 6406 <handleInput+0x188>
    63ca:	|        |   movea.l 1c6d6 <currentEvents>,a0
    63d0:	|        |   move.l 4(a0),d0
    63d4:	|        +-- beq.s 6406 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    63d6:	|        |   move.l 1cd36 <noStack>,d1
    63dc:	|        |   movea.l 1c6d6 <currentEvents>,a0
    63e2:	|        |   move.l 4(a0),d0
    63e6:	|        |   pea 1 <_start+0x1>
    63ea:	|        |   move.l d1,-(sp)
    63ec:	|        |   clr.l -(sp)
    63ee:	|        |   clr.l -(sp)
    63f0:	|        |   move.l d0,-(sp)
    63f2:	|        |   jsr 76a6 <startNewFunctionNum>
    63f8:	|        |   lea 20(sp),sp
    63fc:	|        |   tst.l d0
    63fe:	|        +-- bne.s 6406 <handleInput+0x188>
    6400:	|        |   clr.w d0
    6402:	+--------|-- bra.w 64dc <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    6406:	|        '-> move.w 1cd20 <input+0x8>,d0
    640c:	|        ,-- beq.s 644a <handleInput+0x1cc>
    640e:	|        |   movea.l 1c6d6 <currentEvents>,a0
    6414:	|        |   move.l 12(a0),d0
    6418:	|        +-- beq.s 644a <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    641a:	|        |   move.l 1cd36 <noStack>,d1
    6420:	|        |   movea.l 1c6d6 <currentEvents>,a0
    6426:	|        |   move.l 12(a0),d0
    642a:	|        |   pea 1 <_start+0x1>
    642e:	|        |   move.l d1,-(sp)
    6430:	|        |   clr.l -(sp)
    6432:	|        |   clr.l -(sp)
    6434:	|        |   move.l d0,-(sp)
    6436:	|        |   jsr 76a6 <startNewFunctionNum>
    643c:	|        |   lea 20(sp),sp
    6440:	|        |   tst.l d0
    6442:	|        +-- bne.s 644a <handleInput+0x1cc>
    6444:	|        |   clr.w d0
    6446:	+--------|-- bra.w 64dc <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    644a:	|        '-> move.w 1cd18 <input>,d0
    6450:	|        ,-- beq.s 6488 <handleInput+0x20a>
    6452:	|        |   movea.l 1c6d6 <currentEvents>,a0
    6458:	|        |   move.l (a0),d0
    645a:	|        +-- beq.s 6488 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    645c:	|        |   move.l 1cd36 <noStack>,d1
    6462:	|        |   movea.l 1c6d6 <currentEvents>,a0
    6468:	|        |   move.l (a0),d0
    646a:	|        |   pea 1 <_start+0x1>
    646e:	|        |   move.l d1,-(sp)
    6470:	|        |   clr.l -(sp)
    6472:	|        |   clr.l -(sp)
    6474:	|        |   move.l d0,-(sp)
    6476:	|        |   jsr 76a6 <startNewFunctionNum>
    647c:	|        |   lea 20(sp),sp
    6480:	|        |   tst.l d0
    6482:	|        +-- bne.s 6488 <handleInput+0x20a>
    6484:	|        |   clr.w d0
    6486:	+--------|-- bra.s 64dc <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    6488:	|        '-> move.w 1cd1a <input+0x2>,d0
    648e:	|        ,-- beq.s 64ca <handleInput+0x24c>
    6490:	|        |   movea.l 1c6d6 <currentEvents>,a0
    6496:	|        |   move.l 8(a0),d0
    649a:	|        +-- beq.s 64ca <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    649c:	|        |   move.l 1cd36 <noStack>,d1
    64a2:	|        |   movea.l 1c6d6 <currentEvents>,a0
    64a8:	|        |   move.l 8(a0),d0
    64ac:	|        |   pea 1 <_start+0x1>
    64b0:	|        |   move.l d1,-(sp)
    64b2:	|        |   clr.l -(sp)
    64b4:	|        |   clr.l -(sp)
    64b6:	|        |   move.l d0,-(sp)
    64b8:	|        |   jsr 76a6 <startNewFunctionNum>
    64be:	|        |   lea 20(sp),sp
    64c2:	|        |   tst.l d0
    64c4:	|        +-- bne.s 64ca <handleInput+0x24c>
    64c6:	|        |   clr.w d0
    64c8:	+--------|-- bra.s 64dc <handleInput+0x25e>
	}

	lastRegion = overRegion;
    64ca:	|        '-> move.l 1ce76 <overRegion>,d0
    64d0:	|            move.l d0,1cd2e <lastRegion>
	return runSludge ();
    64d6:	|            jsr 7364 <runSludge>
}
    64dc:	'----------> movea.l (sp)+,a6
    64de:	             lea 16(sp),sp
    64e2:	             rts

000064e4 <initSludge>:

BOOL initSludge (char * filename) {
    64e4:	             lea -292(sp),sp
    64e8:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    64ec:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    64f0:	             jsr af22 <makeNullAnim>
    64f6:	             move.l d0,1cc60 <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    64fc:	             pea 1cd10 <gameVersion>
    6502:	             pea 18cd7 <PutChar+0xd1d>
    6508:	             pea 45 <_start+0x45>
    650c:	             pea 47 <_start+0x47>
    6510:	             move.l 332(sp),-(sp)
    6514:	             jsr 6f32 <openAndVerify>
    651a:	             lea 20(sp),sp
    651e:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    6522:	         ,-- bne.s 652a <initSludge+0x46>
    6524:	         |   clr.w d0
    6526:	,--------|-- bra.w 6c52 <initSludge+0x76e>
	if (FGetC (fp)) {
    652a:	|        '-> move.l 288(sp),284(sp)
    6530:	|            move.l 1cd6e <DOSBase>,d0
    6536:	|            movea.l d0,a6
    6538:	|            move.l 284(sp),d1
    653c:	|            jsr -306(a6)
    6540:	|            move.l d0,280(sp)
    6544:	|            move.l 280(sp),d0
    6548:	|  ,-------- beq.w 66f2 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    654c:	|  |         move.l 288(sp),-(sp)
    6550:	|  |         jsr 6bc <get2bytes>
    6556:	|  |         addq.l #4,sp
    6558:	|  |         move.l d0,1cd3a <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    655e:	|  |         move.l 1cd3a <numBIFNames>,d0
    6564:	|  |         move.l d0,276(sp)
    6568:	|  |         clr.l 272(sp)
    656c:	|  |         move.l 1cd66 <SysBase>,d0
    6572:	|  |         movea.l d0,a6
    6574:	|  |         move.l 276(sp),d0
    6578:	|  |         move.l 272(sp),d1
    657c:	|  |         jsr -684(a6)
    6580:	|  |         move.l d0,268(sp)
    6584:	|  |         move.l 268(sp),d0
    6588:	|  |         move.l d0,1ccf6 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    658e:	|  |         move.l 1ccf6 <allBIFNames>,d0
    6594:	|  |     ,-- bne.s 659c <initSludge+0xb8>
    6596:	|  |     |   clr.w d0
    6598:	+--|-----|-- bra.w 6c52 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    659c:	|  |     '-> clr.l 304(sp)
    65a0:	|  |     ,-- bra.s 65c6 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    65a2:	|  |  ,--|-> move.l 1ccf6 <allBIFNames>,d1
    65a8:	|  |  |  |   move.l 304(sp),d0
    65ac:	|  |  |  |   add.l d0,d0
    65ae:	|  |  |  |   add.l d0,d0
    65b0:	|  |  |  |   movea.l d1,a2
    65b2:	|  |  |  |   adda.l d0,a2
    65b4:	|  |  |  |   move.l 288(sp),-(sp)
    65b8:	|  |  |  |   jsr b02 <readString>
    65be:	|  |  |  |   addq.l #4,sp
    65c0:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    65c2:	|  |  |  |   addq.l #1,304(sp)
    65c6:	|  |  |  '-> move.l 1cd3a <numBIFNames>,d0
    65cc:	|  |  |      cmp.l 304(sp),d0
    65d0:	|  |  '----- bgt.s 65a2 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    65d2:	|  |         move.l 288(sp),-(sp)
    65d6:	|  |         jsr 6bc <get2bytes>
    65dc:	|  |         addq.l #4,sp
    65de:	|  |         move.l d0,1cd46 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    65e4:	|  |         move.l 1cd46 <numUserFunc>,d0
    65ea:	|  |         move.l d0,264(sp)
    65ee:	|  |         clr.l 260(sp)
    65f2:	|  |         move.l 1cd66 <SysBase>,d0
    65f8:	|  |         movea.l d0,a6
    65fa:	|  |         move.l 264(sp),d0
    65fe:	|  |         move.l 260(sp),d1
    6602:	|  |         jsr -684(a6)
    6606:	|  |         move.l d0,256(sp)
    660a:	|  |         move.l 256(sp),d0
    660e:	|  |         move.l d0,1cd02 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    6614:	|  |         move.l 1cd02 <allUserFunc>,d0
    661a:	|  |     ,-- bne.s 6622 <initSludge+0x13e>
    661c:	|  |     |   clr.w d0
    661e:	+--|-----|-- bra.w 6c52 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    6622:	|  |     '-> clr.l 300(sp)
    6626:	|  |     ,-- bra.s 664c <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    6628:	|  |  ,--|-> move.l 1cd02 <allUserFunc>,d1
    662e:	|  |  |  |   move.l 300(sp),d0
    6632:	|  |  |  |   add.l d0,d0
    6634:	|  |  |  |   add.l d0,d0
    6636:	|  |  |  |   movea.l d1,a2
    6638:	|  |  |  |   adda.l d0,a2
    663a:	|  |  |  |   move.l 288(sp),-(sp)
    663e:	|  |  |  |   jsr b02 <readString>
    6644:	|  |  |  |   addq.l #4,sp
    6646:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    6648:	|  |  |  |   addq.l #1,300(sp)
    664c:	|  |  |  '-> move.l 1cd46 <numUserFunc>,d0
    6652:	|  |  |      cmp.l 300(sp),d0
    6656:	|  |  '----- bgt.s 6628 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    6658:	|  |         move.l 1cd10 <gameVersion>,d0
    665e:	|  |         cmpi.l #258,d0
    6664:	|  +-------- ble.w 66f2 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    6668:	|  |         move.l 288(sp),-(sp)
    666c:	|  |         jsr 6bc <get2bytes>
    6672:	|  |         addq.l #4,sp
    6674:	|  |         move.l d0,1cd42 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    667a:	|  |         move.l 1cd42 <numResourceNames>,d0
    6680:	|  |         add.l d0,d0
    6682:	|  |         add.l d0,d0
    6684:	|  |         move.l d0,252(sp)
    6688:	|  |         clr.l 248(sp)
    668c:	|  |         move.l 1cd66 <SysBase>,d0
    6692:	|  |         movea.l d0,a6
    6694:	|  |         move.l 252(sp),d0
    6698:	|  |         move.l 248(sp),d1
    669c:	|  |         jsr -684(a6)
    66a0:	|  |         move.l d0,244(sp)
    66a4:	|  |         move.l 244(sp),d0
    66a8:	|  |         move.l d0,1ccfa <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    66ae:	|  |         move.l 1ccfa <allResourceNames>,d0
    66b4:	|  |     ,-- bne.s 66bc <initSludge+0x1d8>
    66b6:	|  |     |   clr.w d0
    66b8:	+--|-----|-- bra.w 6c52 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    66bc:	|  |     '-> clr.l 296(sp)
    66c0:	|  |     ,-- bra.s 66e6 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    66c2:	|  |  ,--|-> move.l 1ccfa <allResourceNames>,d1
    66c8:	|  |  |  |   move.l 296(sp),d0
    66cc:	|  |  |  |   add.l d0,d0
    66ce:	|  |  |  |   add.l d0,d0
    66d0:	|  |  |  |   movea.l d1,a2
    66d2:	|  |  |  |   adda.l d0,a2
    66d4:	|  |  |  |   move.l 288(sp),-(sp)
    66d8:	|  |  |  |   jsr b02 <readString>
    66de:	|  |  |  |   addq.l #4,sp
    66e0:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    66e2:	|  |  |  |   addq.l #1,296(sp)
    66e6:	|  |  |  '-> move.l 1cd42 <numResourceNames>,d0
    66ec:	|  |  |      cmp.l 296(sp),d0
    66f0:	|  |  '----- bgt.s 66c2 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    66f2:	|  '-------> move.l #129,1cd22 <input+0xa>
	input.mouseY = 100;
    66fc:	|            moveq #100,d0
    66fe:	|            move.l d0,1cd26 <input+0xe>
	winWidth = get2bytes (fp);
    6704:	|            move.l 288(sp),-(sp)
    6708:	|            jsr 6bc <get2bytes>
    670e:	|            addq.l #4,sp
    6710:	|            move.l d0,1ccba <winWidth>
	winHeight = get2bytes (fp);
    6716:	|            move.l 288(sp),-(sp)
    671a:	|            jsr 6bc <get2bytes>
    6720:	|            addq.l #4,sp
    6722:	|            move.l d0,1ccbe <winHeight>
	specialSettings = FGetC (fp);
    6728:	|            move.l 288(sp),240(sp)
    672e:	|            move.l 1cd6e <DOSBase>,d0
    6734:	|            movea.l d0,a6
    6736:	|            move.l 240(sp),d1
    673a:	|            jsr -306(a6)
    673e:	|            move.l d0,236(sp)
    6742:	|            move.l 236(sp),d0
    6746:	|            move.l d0,1cd4a <specialSettings>

	desiredfps = 1000/FGetC (fp);
    674c:	|            move.l 288(sp),232(sp)
    6752:	|            move.l 1cd6e <DOSBase>,d0
    6758:	|            movea.l d0,a6
    675a:	|            move.l 232(sp),d1
    675e:	|            jsr -306(a6)
    6762:	|            move.l d0,228(sp)
    6766:	|            move.l 228(sp),d0
    676a:	|            move.l d0,-(sp)
    676c:	|            pea 3e8 <encodeFilename+0xea>
    6770:	|            jsr 17f22 <__divsi3>
    6776:	|            addq.l #8,sp
    6778:	|            move.l d0,1c6e8 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    677e:	|            move.l 288(sp),-(sp)
    6782:	|            jsr b02 <readString>
    6788:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    678a:	|            move.l 288(sp),224(sp)
    6790:	|            move.l #118024,220(sp)
    6798:	|            moveq #8,d1
    679a:	|            move.l d1,216(sp)
    679e:	|            moveq #1,d0
    67a0:	|            move.l d0,212(sp)
    67a4:	|            move.l 1cd6e <DOSBase>,d0
    67aa:	|            movea.l d0,a6
    67ac:	|            move.l 224(sp),d1
    67b0:	|            move.l 220(sp),d2
    67b4:	|            move.l 216(sp),d3
    67b8:	|            move.l 212(sp),d4
    67bc:	|            jsr -324(a6)
    67c0:	|            move.l d0,208(sp)
    67c4:	|            move.l 208(sp),d0
    67c8:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    67cc:	|            moveq #1,d1
    67ce:	|            cmp.l 204(sp),d1
    67d2:	|        ,-- beq.s 67e2 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    67d4:	|        |   pea 18d10 <PutChar+0xd56>
    67da:	|        |   jsr 17518 <KPrintF>
    67e0:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    67e2:	|        '-> move.l 1cd10 <gameVersion>,d0
    67e8:	|            cmpi.l #258,d0
    67ee:	|        ,-- ble.s 67fe <initSludge+0x31a>
    67f0:	|        |   move.l 288(sp),-(sp)
    67f4:	|        |   jsr b02 <readString>
    67fa:	|        |   addq.l #4,sp
    67fc:	|     ,--|-- bra.s 6812 <initSludge+0x32e>
    67fe:	|     |  '-> pea 18d2e <PutChar+0xd74>
    6804:	|     |      pea 18d2e <PutChar+0xd74>
    680a:	|     |      jsr 13f64 <joinStrings>
    6810:	|     |      addq.l #8,sp
    6812:	|     '----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    6816:	|            move.l 1cd10 <gameVersion>,d0
    681c:	|            cmpi.l #258,d0
    6822:	|     ,----- ble.s 6844 <initSludge+0x360>
    6824:	|     |      move.l 288(sp),196(sp)
    682a:	|     |      move.l 1cd6e <DOSBase>,d0
    6830:	|     |      movea.l d0,a6
    6832:	|     |      move.l 196(sp),d1
    6836:	|     |      jsr -306(a6)
    683a:	|     |      move.l d0,192(sp)
    683e:	|     |      move.l 192(sp),d0
    6842:	|     |  ,-- bra.s 6846 <initSludge+0x362>
    6844:	|     '--|-> moveq #0,d0
    6846:	|        '-> move.l d0,1ce42 <gameSettings+0x4>
	makeLanguageTable (fp);
    684c:	|            move.l 288(sp),-(sp)
    6850:	|            jsr 1391a <makeLanguageTable>
    6856:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    6858:	|            move.l 1cd10 <gameVersion>,d0
    685e:	|            cmpi.l #261,d0
    6864:	|        ,-- ble.s 68b2 <initSludge+0x3ce>
	{
		FGetC(fp);
    6866:	|        |   move.l 288(sp),188(sp)
    686c:	|        |   move.l 1cd6e <DOSBase>,d0
    6872:	|        |   movea.l d0,a6
    6874:	|        |   move.l 188(sp),d1
    6878:	|        |   jsr -306(a6)
    687c:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    6880:	|        |   move.l 288(sp),180(sp)
    6886:	|        |   move.l 1cd6e <DOSBase>,d0
    688c:	|        |   movea.l d0,a6
    688e:	|        |   move.l 180(sp),d1
    6892:	|        |   jsr -306(a6)
    6896:	|        |   move.l d0,176(sp)
		getFloat (fp);
    689a:	|        |   move.l 288(sp),-(sp)
    689e:	|        |   jsr 7d8 <getFloat>
    68a4:	|        |   addq.l #4,sp
		getFloat (fp);
    68a6:	|        |   move.l 288(sp),-(sp)
    68aa:	|        |   jsr 7d8 <getFloat>
    68b0:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    68b2:	|        '-> move.l 288(sp),-(sp)
    68b6:	|            jsr b02 <readString>
    68bc:	|            addq.l #4,sp
    68be:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    68c2:	|            pea 18d2f <PutChar+0xd75>
    68c8:	|            move.l 176(sp),-(sp)
    68cc:	|            jsr 13ee4 <strcmp>
    68d2:	|            addq.l #8,sp
    68d4:	|            tst.l d0
    68d6:	|        ,-- beq.s 68de <initSludge+0x3fa>
		return FALSE;
    68d8:	|        |   clr.w d0
    68da:	+--------|-- bra.w 6c52 <initSludge+0x76e>
	}
	FreeVec( checker);
    68de:	|        '-> move.l 172(sp),168(sp)
    68e4:	|            move.l 1cd66 <SysBase>,d0
    68ea:	|            movea.l d0,a6
    68ec:	|            movea.l 168(sp),a1
    68f0:	|            jsr -690(a6)
	checker = NULL;
    68f4:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    68f8:	|            move.l 288(sp),164(sp)
    68fe:	|            move.l 1cd6e <DOSBase>,d0
    6904:	|            movea.l d0,a6
    6906:	|            move.l 164(sp),d1
    690a:	|            jsr -306(a6)
    690e:	|            move.l d0,160(sp)
    6912:	|            move.l 160(sp),d0
    6916:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    691a:	|            moveq #0,d0
    691c:	|            move.b 159(sp),d0
    6920:	|            moveq #1,d1
    6922:	|            and.l d1,d0
    6924:	|        ,-- beq.s 697c <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    6926:	|        |   move.l 1cd6e <DOSBase>,d0
    692c:	|        |   movea.l d0,a6
    692e:	|        |   jsr -60(a6)
    6932:	|        |   move.l d0,38(sp)
    6936:	|        |   move.l 38(sp),d0
    693a:	|        |   move.l d0,34(sp)
    693e:	|        |   move.l #101687,30(sp)
    6946:	|        |   moveq #54,d0
    6948:	|        |   move.l d0,26(sp)
    694c:	|        |   move.l 1cd6e <DOSBase>,d0
    6952:	|        |   movea.l d0,a6
    6954:	|        |   move.l 34(sp),d1
    6958:	|        |   move.l 30(sp),d2
    695c:	|        |   move.l 26(sp),d3
    6960:	|        |   jsr -48(a6)
    6964:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    6968:	|        |   pea 18d6e <PutChar+0xdb4>
    696e:	|        |   jsr 17518 <KPrintF>
    6974:	|        |   addq.l #4,sp
		return FALSE;
    6976:	|        |   clr.w d0
    6978:	+--------|-- bra.w 6c52 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    697c:	|        '-> move.l 288(sp),-(sp)
    6980:	|            jsr 6bc <get2bytes>
    6986:	|            addq.l #4,sp
    6988:	|            move.l d0,1cd3e <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    698e:	|            move.l 1cd3e <numGlobals>,d0
    6994:	|            lsl.l #3,d0
    6996:	|            move.l d0,154(sp)
    699a:	|            clr.l 150(sp)
    699e:	|            move.l 1cd66 <SysBase>,d0
    69a4:	|            movea.l d0,a6
    69a6:	|            move.l 154(sp),d0
    69aa:	|            move.l 150(sp),d1
    69ae:	|            jsr -684(a6)
    69b2:	|            move.l d0,146(sp)
    69b6:	|            move.l 146(sp),d0
    69ba:	|            move.l d0,1cd14 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    69c0:	|            move.l 1cd14 <globalVars>,d0
    69c6:	|        ,-- bne.s 69e4 <initSludge+0x500>
    69c8:	|        |   move.l 1cd3e <numGlobals>,d0
    69ce:	|        +-- ble.s 69e4 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    69d0:	|        |   pea 18da6 <PutChar+0xdec>
    69d6:	|        |   jsr 17518 <KPrintF>
    69dc:	|        |   addq.l #4,sp
		return FALSE;
    69de:	|        |   clr.w d0
    69e0:	+--------|-- bra.w 6c52 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    69e4:	|        '-> clr.l 308(sp)
    69e8:	|        ,-- bra.s 6a00 <initSludge+0x51c>
    69ea:	|     ,--|-> move.l 1cd14 <globalVars>,d1
    69f0:	|     |  |   move.l 308(sp),d0
    69f4:	|     |  |   lsl.l #3,d0
    69f6:	|     |  |   movea.l d1,a0
    69f8:	|     |  |   adda.l d0,a0
    69fa:	|     |  |   clr.l (a0)
    69fc:	|     |  |   addq.l #1,308(sp)
    6a00:	|     |  '-> move.l 1cd3e <numGlobals>,d0
    6a06:	|     |      cmp.l 308(sp),d0
    6a0a:	|     '----- bgt.s 69ea <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    6a0c:	|            move.l 1ce42 <gameSettings+0x4>,d0
    6a12:	|            clr.l -(sp)
    6a14:	|            move.l d0,-(sp)
    6a16:	|            move.l 296(sp),-(sp)
    6a1a:	|            jsr 7b94 <setFileIndices>
    6a20:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    6a24:	|            pea 1 <_start+0x1>
    6a28:	|            jsr 784e <getNumberedString>
    6a2e:	|            addq.l #4,sp
    6a30:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    6a34:	|            move.l 142(sp),-(sp)
    6a38:	|            jsr 2fe <encodeFilename>
    6a3e:	|            addq.l #4,sp
    6a40:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    6a44:	|            move.l 142(sp),134(sp)
    6a4a:	|            move.l 1cd66 <SysBase>,d0
    6a50:	|            movea.l d0,a6
    6a52:	|            movea.l 134(sp),a1
    6a56:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    6a5a:	|            move.l 138(sp),130(sp)
    6a60:	|            move.l 1cd6e <DOSBase>,d0
    6a66:	|            movea.l d0,a6
    6a68:	|            move.l 130(sp),d1
    6a6c:	|            jsr -120(a6)
    6a70:	|            move.l d0,126(sp)
    6a74:	|            move.l 126(sp),d0
    6a78:	|            move.l d0,292(sp)
	if(lock == 0) {
    6a7c:	|        ,-- bne.s 6aaa <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    6a7e:	|        |   move.l 138(sp),122(sp)
    6a84:	|        |   moveq #-2,d1
    6a86:	|        |   move.l d1,118(sp)
    6a8a:	|        |   move.l 1cd6e <DOSBase>,d0
    6a90:	|        |   movea.l d0,a6
    6a92:	|        |   move.l 122(sp),d1
    6a96:	|        |   move.l 118(sp),d2
    6a9a:	|        |   jsr -84(a6)
    6a9e:	|        |   move.l d0,114(sp)
    6aa2:	|        |   move.l 114(sp),d0
    6aa6:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    6aaa:	|        '-> move.l 292(sp),110(sp)
    6ab0:	|            move.l 1cd6e <DOSBase>,d0
    6ab6:	|            movea.l d0,a6
    6ab8:	|            move.l 110(sp),d1
    6abc:	|            jsr -126(a6)
    6ac0:	|            move.l d0,106(sp)
    6ac4:	|            move.l 106(sp),d0
    6ac8:	|        ,-- bne.s 6b24 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    6aca:	|        |   move.l 138(sp),-(sp)
    6ace:	|        |   pea 18dd9 <PutChar+0xe1f>
    6ad4:	|        |   jsr 17518 <KPrintF>
    6ada:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    6adc:	|        |   move.l 1cd6e <DOSBase>,d0
    6ae2:	|        |   movea.l d0,a6
    6ae4:	|        |   jsr -60(a6)
    6ae8:	|        |   move.l d0,58(sp)
    6aec:	|        |   move.l 58(sp),d0
    6af0:	|        |   move.l d0,54(sp)
    6af4:	|        |   move.l #101894,50(sp)
    6afc:	|        |   moveq #40,d0
    6afe:	|        |   move.l d0,46(sp)
    6b02:	|        |   move.l 1cd6e <DOSBase>,d0
    6b08:	|        |   movea.l d0,a6
    6b0a:	|        |   move.l 54(sp),d1
    6b0e:	|        |   move.l 50(sp),d2
    6b12:	|        |   move.l 46(sp),d3
    6b16:	|        |   jsr -48(a6)
    6b1a:	|        |   move.l d0,42(sp)
		return FALSE;
    6b1e:	|        |   clr.w d0
    6b20:	+--------|-- bra.w 6c52 <initSludge+0x76e>
	}

	FreeVec(gameName);
    6b24:	|        '-> move.l 138(sp),102(sp)
    6b2a:	|            move.l 1cd66 <SysBase>,d0
    6b30:	|            movea.l d0,a6
    6b32:	|            movea.l 102(sp),a1
    6b36:	|            jsr -690(a6)

	readIniFile (filename);
    6b3a:	|            move.l 316(sp),-(sp)
    6b3e:	|            jsr 13a4e <readIniFile>
    6b44:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    6b46:	|            jsr 13820 <getLanguageForFileB>
    6b4c:	|            move.l d0,1c6da <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    6b52:	|            move.l 1c6da <languageNum>,d0
    6b58:	|        ,-- bpl.s 6b68 <initSludge+0x684>
    6b5a:	|        |   pea 18e2f <PutChar+0xe75>
    6b60:	|        |   jsr 17518 <KPrintF>
    6b66:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    6b68:	|        '-> move.l 1c6da <languageNum>,d0
    6b6e:	|            move.l d0,d1
    6b70:	|            move.l 1ce42 <gameSettings+0x4>,d0
    6b76:	|            move.l d1,-(sp)
    6b78:	|            move.l d0,-(sp)
    6b7a:	|            clr.l -(sp)
    6b7c:	|            jsr 7b94 <setFileIndices>
    6b82:	|            lea 12(sp),sp

	if (dataFol[0]) {
    6b86:	|            movea.l 200(sp),a0
    6b8a:	|            move.b (a0),d0
    6b8c:	|     ,----- beq.w 6c36 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    6b90:	|     |      move.l 200(sp),-(sp)
    6b94:	|     |      jsr 2fe <encodeFilename>
    6b9a:	|     |      addq.l #4,sp
    6b9c:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    6ba0:	|     |      move.l 98(sp),94(sp)
    6ba6:	|     |      move.l 1cd6e <DOSBase>,d0
    6bac:	|     |      movea.l d0,a6
    6bae:	|     |      move.l 94(sp),d1
    6bb2:	|     |      jsr -120(a6)
    6bb6:	|     |      move.l d0,90(sp)
    6bba:	|     |      move.l 90(sp),d0
    6bbe:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    6bc2:	|     |  ,-- bne.s 6bf0 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    6bc4:	|     |  |   move.l 98(sp),86(sp)
    6bca:	|     |  |   moveq #-2,d1
    6bcc:	|     |  |   move.l d1,82(sp)
    6bd0:	|     |  |   move.l 1cd6e <DOSBase>,d0
    6bd6:	|     |  |   movea.l d0,a6
    6bd8:	|     |  |   move.l 86(sp),d1
    6bdc:	|     |  |   move.l 82(sp),d2
    6be0:	|     |  |   jsr -84(a6)
    6be4:	|     |  |   move.l d0,78(sp)
    6be8:	|     |  |   move.l 78(sp),d0
    6bec:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    6bf0:	|     |  '-> move.l 292(sp),74(sp)
    6bf6:	|     |      move.l 1cd6e <DOSBase>,d0
    6bfc:	|     |      movea.l d0,a6
    6bfe:	|     |      move.l 74(sp),d1
    6c02:	|     |      jsr -126(a6)
    6c06:	|     |      move.l d0,70(sp)
    6c0a:	|     |      move.l 70(sp),d0
    6c0e:	|     |  ,-- bne.s 6c20 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    6c10:	|     |  |   move.l 1cd6e <DOSBase>,d0
    6c16:	|     |  |   movea.l d0,a6
    6c18:	|     |  |   jsr -60(a6)
    6c1c:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    6c20:	|     |  '-> move.l 98(sp),62(sp)
    6c26:	|     |      move.l 1cd66 <SysBase>,d0
    6c2c:	|     |      movea.l d0,a6
    6c2e:	|     |      movea.l 62(sp),a1
    6c32:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    6c36:	|     '----> movea.l 1ccbe <winHeight>,a0
    6c3c:	|            lea -15(a0),a0
    6c40:	|            move.l a0,d0
    6c42:	|            move.l d0,-(sp)
    6c44:	|            pea a <_start+0xa>
    6c48:	|            jsr 85da <positionStatus>
    6c4e:	|            addq.l #8,sp

	return TRUE;
    6c50:	|            moveq #1,d0
}
    6c52:	'----------> movem.l (sp)+,d2-d4/a2/a6
    6c56:	             lea 292(sp),sp
    6c5a:	             rts

00006c5c <killSpeechTimers>:

void killSpeechTimers () {
    6c5c:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6c5e:	          move.l 1ccfe <allRunningFunctions>,(sp)

	while (thisFunction) {
    6c64:	   ,----- bra.s 6c90 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    6c66:	,--|----> movea.l (sp),a0
    6c68:	|  |      move.b 56(a0),d0
    6c6c:	|  |  ,-- bne.s 6c8a <killSpeechTimers+0x2e>
    6c6e:	|  |  |   movea.l (sp),a0
    6c70:	|  |  |   move.w 50(a0),d0
    6c74:	|  |  +-- beq.s 6c8a <killSpeechTimers+0x2e>
    6c76:	|  |  |   movea.l (sp),a0
    6c78:	|  |  |   move.l 12(a0),d0
    6c7c:	|  |  +-- beq.s 6c8a <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    6c7e:	|  |  |   movea.l (sp),a0
    6c80:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    6c84:	|  |  |   movea.l (sp),a0
    6c86:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    6c8a:	|  |  '-> movea.l (sp),a0
    6c8c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6c90:	|  '----> tst.l (sp)
    6c92:	'-------- bne.s 6c66 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    6c94:	          jsr 414c <killAllSpeech>
}
    6c9a:	          nop
    6c9c:	          addq.l #4,sp
    6c9e:	          rts

00006ca0 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    6ca0:	             lea -52(sp),sp
    6ca4:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    6ca6:	             movea.l 60(sp),a0
    6caa:	             move.l (a0),d0
    6cac:	             move.l d0,-(sp)
    6cae:	             jsr 7ad4 <openSubSlice>
    6cb4:	             addq.l #4,sp
    6cb6:	             tst.w d0
    6cb8:	         ,-- bne.s 6cc0 <loadFunctionCode+0x20>
    6cba:	         |   clr.w d0
    6cbc:	,--------|-- bra.w 6e8a <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    6cc0:	|        '-> move.l 1cd4e <bigDataFile>,44(sp)
    6cc8:	|            move.l 1cd6e <DOSBase>,d0
    6cce:	|            movea.l d0,a6
    6cd0:	|            move.l 44(sp),d1
    6cd4:	|            jsr -306(a6)
    6cd8:	|            move.l d0,40(sp)
    6cdc:	|            move.l 40(sp),d0
    6ce0:	|            move.l d0,d0
    6ce2:	|            movea.l 60(sp),a0
    6ce6:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    6cea:	|            move.l 1cd4e <bigDataFile>,d0
    6cf0:	|            move.l d0,-(sp)
    6cf2:	|            jsr 6bc <get2bytes>
    6cf8:	|            addq.l #4,sp
    6cfa:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    6cfe:	|            move.l 1cd4e <bigDataFile>,d0
    6d04:	|            move.l d0,-(sp)
    6d06:	|            jsr 6bc <get2bytes>
    6d0c:	|            addq.l #4,sp
    6d0e:	|            movea.l 60(sp),a0
    6d12:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    6d16:	|            move.l 1cd4e <bigDataFile>,d0
    6d1c:	|            move.l d0,-(sp)
    6d1e:	|            jsr 6bc <get2bytes>
    6d24:	|            addq.l #4,sp
    6d26:	|            movea.l 60(sp),a0
    6d2a:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    6d2e:	|            move.l 36(sp),d0
    6d32:	|            lsl.l #3,d0
    6d34:	|            move.l d0,32(sp)
    6d38:	|            clr.l 28(sp)
    6d3c:	|            move.l 1cd66 <SysBase>,d0
    6d42:	|            movea.l d0,a6
    6d44:	|            move.l 32(sp),d0
    6d48:	|            move.l 28(sp),d1
    6d4c:	|            jsr -684(a6)
    6d50:	|            move.l d0,24(sp)
    6d54:	|            move.l 24(sp),d0
    6d58:	|            movea.l 60(sp),a0
    6d5c:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    6d60:	|            movea.l 60(sp),a0
    6d64:	|            move.l 4(a0),d0
    6d68:	|        ,-- bne.s 6d7e <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    6d6a:	|        |   pea 18e5a <PutChar+0xea0>
    6d70:	|        |   jsr 17518 <KPrintF>
    6d76:	|        |   addq.l #4,sp
		return FALSE;
    6d78:	|        |   clr.w d0
    6d7a:	+--------|-- bra.w 6e8a <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6d7e:	|        '-> clr.l 52(sp)
    6d82:	|        ,-- bra.s 6de4 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    6d84:	|     ,--|-> move.l 1cd4e <bigDataFile>,8(sp)
    6d8c:	|     |  |   move.l 1cd6e <DOSBase>,d0
    6d92:	|     |  |   movea.l d0,a6
    6d94:	|     |  |   move.l 8(sp),d1
    6d98:	|     |  |   jsr -306(a6)
    6d9c:	|     |  |   move.l d0,4(sp)
    6da0:	|     |  |   move.l 4(sp),d1
    6da4:	|     |  |   movea.l 60(sp),a0
    6da8:	|     |  |   movea.l 4(a0),a0
    6dac:	|     |  |   move.l 52(sp),d0
    6db0:	|     |  |   lsl.l #3,d0
    6db2:	|     |  |   adda.l d0,a0
    6db4:	|     |  |   move.l d1,d0
    6db6:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    6db8:	|     |  |   move.l 1cd4e <bigDataFile>,d0
    6dbe:	|     |  |   move.l d0,-(sp)
    6dc0:	|     |  |   jsr 6bc <get2bytes>
    6dc6:	|     |  |   addq.l #4,sp
    6dc8:	|     |  |   move.l d0,d1
    6dca:	|     |  |   movea.l 60(sp),a0
    6dce:	|     |  |   movea.l 4(a0),a0
    6dd2:	|     |  |   move.l 52(sp),d0
    6dd6:	|     |  |   lsl.l #3,d0
    6dd8:	|     |  |   adda.l d0,a0
    6dda:	|     |  |   move.l d1,d0
    6ddc:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    6de0:	|     |  |   addq.l #1,52(sp)
    6de4:	|     |  '-> move.l 52(sp),d0
    6de8:	|     |      cmp.l 36(sp),d0
    6dec:	|     '----- bcs.s 6d84 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    6dee:	|            jsr 7844 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    6df4:	|            movea.l 60(sp),a0
    6df8:	|            move.l 8(a0),d0
    6dfc:	|  ,-------- ble.w 6e80 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    6e00:	|  |         movea.l 60(sp),a0
    6e04:	|  |         move.l 8(a0),d0
    6e08:	|  |         lsl.l #3,d0
    6e0a:	|  |         move.l d0,20(sp)
    6e0e:	|  |         clr.l 16(sp)
    6e12:	|  |         move.l 1cd66 <SysBase>,d0
    6e18:	|  |         movea.l d0,a6
    6e1a:	|  |         move.l 20(sp),d0
    6e1e:	|  |         move.l 16(sp),d1
    6e22:	|  |         jsr -684(a6)
    6e26:	|  |         move.l d0,12(sp)
    6e2a:	|  |         move.l 12(sp),d0
    6e2e:	|  |         movea.l 60(sp),a0
    6e32:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    6e36:	|  |         movea.l 60(sp),a0
    6e3a:	|  |         move.l 20(a0),d0
    6e3e:	|  |     ,-- bne.s 6e52 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    6e40:	|  |     |   pea 18e5a <PutChar+0xea0>
    6e46:	|  |     |   jsr 17518 <KPrintF>
    6e4c:	|  |     |   addq.l #4,sp
			return FALSE;
    6e4e:	|  |     |   clr.w d0
    6e50:	+--|-----|-- bra.s 6e8a <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    6e52:	|  |     '-> clr.l 48(sp)
    6e56:	|  |     ,-- bra.s 6e70 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    6e58:	|  |  ,--|-> movea.l 60(sp),a0
    6e5c:	|  |  |  |   move.l 20(a0),d1
    6e60:	|  |  |  |   move.l 48(sp),d0
    6e64:	|  |  |  |   lsl.l #3,d0
    6e66:	|  |  |  |   movea.l d1,a0
    6e68:	|  |  |  |   adda.l d0,a0
    6e6a:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    6e6c:	|  |  |  |   addq.l #1,48(sp)
    6e70:	|  |  |  '-> movea.l 60(sp),a0
    6e74:	|  |  |      move.l 8(a0),d0
    6e78:	|  |  |      cmp.l 48(sp),d0
    6e7c:	|  |  '----- bgt.s 6e58 <loadFunctionCode+0x1b8>
    6e7e:	|  |     ,-- bra.s 6e88 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    6e80:	|  '-----|-> movea.l 60(sp),a0
    6e84:	|        |   clr.l 8(a0)
	}
	return TRUE;
    6e88:	|        '-> moveq #1,d0
}
    6e8a:	'----------> movea.l (sp)+,a6
    6e8c:	             lea 52(sp),sp
    6e90:	             rts

00006e92 <loadHandlers>:

void loadHandlers (BPTR fp) {
    6e92:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    6e94:	movea.l 1c6d6 <currentEvents>,a2
    6e9a:	move.l 8(sp),-(sp)
    6e9e:	jsr 6bc <get2bytes>
    6ea4:	addq.l #4,sp
    6ea6:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    6ea8:	movea.l 1c6d6 <currentEvents>,a2
    6eae:	move.l 8(sp),-(sp)
    6eb2:	jsr 6bc <get2bytes>
    6eb8:	addq.l #4,sp
    6eba:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    6ebe:	movea.l 1c6d6 <currentEvents>,a2
    6ec4:	move.l 8(sp),-(sp)
    6ec8:	jsr 6bc <get2bytes>
    6ece:	addq.l #4,sp
    6ed0:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    6ed4:	movea.l 1c6d6 <currentEvents>,a2
    6eda:	move.l 8(sp),-(sp)
    6ede:	jsr 6bc <get2bytes>
    6ee4:	addq.l #4,sp
    6ee6:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    6eea:	movea.l 1c6d6 <currentEvents>,a2
    6ef0:	move.l 8(sp),-(sp)
    6ef4:	jsr 6bc <get2bytes>
    6efa:	addq.l #4,sp
    6efc:	move.l d0,16(a2)
	currentEvents -> focusFunction			= (struct loadedFunction *) get4bytes (fp); //Todo: Changed to pointer type. Check if this is correct.
    6f00:	move.l 8(sp),-(sp)
    6f04:	jsr 718 <get4bytes>
    6f0a:	addq.l #4,sp
    6f0c:	movea.l 1c6d6 <currentEvents>,a0
    6f12:	move.l d0,20(a0)
	currentEvents -> spaceFunction			= get2bytes (fp);
    6f16:	movea.l 1c6d6 <currentEvents>,a2
    6f1c:	move.l 8(sp),-(sp)
    6f20:	jsr 6bc <get2bytes>
    6f26:	addq.l #4,sp
    6f28:	move.l d0,24(a2)
}
    6f2c:	nop
    6f2e:	movea.l (sp)+,a2
    6f30:	rts

00006f32 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    6f32:	       lea -312(sp),sp
    6f36:	       movem.l d2-d3/a6,-(sp)
    6f3a:	       move.l 332(sp),d1
    6f3e:	       move.l 336(sp),d0
    6f42:	       move.b d1,d1
    6f44:	       move.b d1,16(sp)
    6f48:	       move.b d0,d0
    6f4a:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    6f4e:	       move.l 328(sp),318(sp)
    6f54:	       move.l #1005,314(sp)
    6f5c:	       move.l 1cd6e <DOSBase>,d0
    6f62:	       movea.l d0,a6
    6f64:	       move.l 318(sp),d1
    6f68:	       move.l 314(sp),d2
    6f6c:	       jsr -30(a6)
    6f70:	       move.l d0,310(sp)
    6f74:	       move.l 310(sp),d0
    6f78:	       move.l d0,306(sp)

	if (! fp) {
    6f7c:	   ,-- bne.s 6fd8 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    6f7e:	   |   move.l 1cd6e <DOSBase>,d0
    6f84:	   |   movea.l d0,a6
    6f86:	   |   jsr -60(a6)
    6f8a:	   |   move.l d0,154(sp)
    6f8e:	   |   move.l 154(sp),d0
    6f92:	   |   move.l d0,150(sp)
    6f96:	   |   move.l #102019,146(sp)
    6f9e:	   |   moveq #31,d0
    6fa0:	   |   move.l d0,142(sp)
    6fa4:	   |   move.l 1cd6e <DOSBase>,d0
    6faa:	   |   movea.l d0,a6
    6fac:	   |   move.l 150(sp),d1
    6fb0:	   |   move.l 146(sp),d2
    6fb4:	   |   move.l 142(sp),d3
    6fb8:	   |   jsr -48(a6)
    6fbc:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    6fc0:	   |   move.l 328(sp),-(sp)
    6fc4:	   |   pea 18ea3 <PutChar+0xee9>
    6fca:	   |   jsr 17518 <KPrintF>
    6fd0:	   |   addq.l #8,sp
		return NULL;
    6fd2:	   |   moveq #0,d0
    6fd4:	,--|-- bra.w 7298 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    6fd8:	|  '-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    6fdc:	|      move.l 306(sp),302(sp)
    6fe2:	|      move.l 1cd6e <DOSBase>,d0
    6fe8:	|      movea.l d0,a6
    6fea:	|      move.l 302(sp),d1
    6fee:	|      jsr -306(a6)
    6ff2:	|      move.l d0,298(sp)
    6ff6:	|      move.l 298(sp),d0
    6ffa:	|      moveq #83,d1
    6ffc:	|      cmp.l d0,d1
    6ffe:	|  ,-- beq.s 7006 <openAndVerify+0xd4>
    7000:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    7006:	|  '-> move.l 306(sp),294(sp)
    700c:	|      move.l 1cd6e <DOSBase>,d0
    7012:	|      movea.l d0,a6
    7014:	|      move.l 294(sp),d1
    7018:	|      jsr -306(a6)
    701c:	|      move.l d0,290(sp)
    7020:	|      move.l 290(sp),d0
    7024:	|      moveq #76,d1
    7026:	|      cmp.l d0,d1
    7028:	|  ,-- beq.s 7030 <openAndVerify+0xfe>
    702a:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    7030:	|  '-> move.l 306(sp),286(sp)
    7036:	|      move.l 1cd6e <DOSBase>,d0
    703c:	|      movea.l d0,a6
    703e:	|      move.l 286(sp),d1
    7042:	|      jsr -306(a6)
    7046:	|      move.l d0,282(sp)
    704a:	|      move.l 282(sp),d0
    704e:	|      moveq #85,d1
    7050:	|      cmp.l d0,d1
    7052:	|  ,-- beq.s 705a <openAndVerify+0x128>
    7054:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    705a:	|  '-> move.l 306(sp),278(sp)
    7060:	|      move.l 1cd6e <DOSBase>,d0
    7066:	|      movea.l d0,a6
    7068:	|      move.l 278(sp),d1
    706c:	|      jsr -306(a6)
    7070:	|      move.l d0,274(sp)
    7074:	|      move.l 274(sp),d0
    7078:	|      moveq #68,d1
    707a:	|      cmp.l d0,d1
    707c:	|  ,-- beq.s 7084 <openAndVerify+0x152>
    707e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    7084:	|  '-> move.l 306(sp),270(sp)
    708a:	|      move.l 1cd6e <DOSBase>,d0
    7090:	|      movea.l d0,a6
    7092:	|      move.l 270(sp),d1
    7096:	|      jsr -306(a6)
    709a:	|      move.l d0,266(sp)
    709e:	|      move.l 266(sp),d1
    70a2:	|      move.b 16(sp),d0
    70a6:	|      ext.w d0
    70a8:	|      movea.w d0,a0
    70aa:	|      cmpa.l d1,a0
    70ac:	|  ,-- beq.s 70b4 <openAndVerify+0x182>
    70ae:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    70b4:	|  '-> move.l 306(sp),262(sp)
    70ba:	|      move.l 1cd6e <DOSBase>,d0
    70c0:	|      movea.l d0,a6
    70c2:	|      move.l 262(sp),d1
    70c6:	|      jsr -306(a6)
    70ca:	|      move.l d0,258(sp)
    70ce:	|      move.l 258(sp),d1
    70d2:	|      move.b 14(sp),d0
    70d6:	|      ext.w d0
    70d8:	|      movea.w d0,a0
    70da:	|      cmpa.l d1,a0
    70dc:	|  ,-- beq.s 70e4 <openAndVerify+0x1b2>
    70de:	|  |   move.w #1,322(sp)
	if (headerBad) {
    70e4:	|  '-> tst.w 322(sp)
    70e8:	|  ,-- beq.s 7140 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    70ea:	|  |   move.l 1cd6e <DOSBase>,d0
    70f0:	|  |   movea.l d0,a6
    70f2:	|  |   jsr -60(a6)
    70f6:	|  |   move.l d0,174(sp)
    70fa:	|  |   move.l 174(sp),d0
    70fe:	|  |   move.l d0,170(sp)
    7102:	|  |   move.l #102082,166(sp)
    710a:	|  |   moveq #31,d0
    710c:	|  |   move.l d0,162(sp)
    7110:	|  |   move.l 1cd6e <DOSBase>,d0
    7116:	|  |   movea.l d0,a6
    7118:	|  |   move.l 170(sp),d1
    711c:	|  |   move.l 166(sp),d2
    7120:	|  |   move.l 162(sp),d3
    7124:	|  |   jsr -48(a6)
    7128:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    712c:	|  |   pea 18ec2 <PutChar+0xf08>
    7132:	|  |   jsr 17518 <KPrintF>
    7138:	|  |   addq.l #4,sp
		return NULL;
    713a:	|  |   moveq #0,d0
    713c:	+--|-- bra.w 7298 <openAndVerify+0x366>
	}
	FGetC (fp);
    7140:	|  '-> move.l 306(sp),254(sp)
    7146:	|      move.l 1cd6e <DOSBase>,d0
    714c:	|      movea.l d0,a6
    714e:	|      move.l 254(sp),d1
    7152:	|      jsr -306(a6)
    7156:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    715a:	|      nop
    715c:	|  ,-> move.l 306(sp),246(sp)
    7162:	|  |   move.l 1cd6e <DOSBase>,d0
    7168:	|  |   movea.l d0,a6
    716a:	|  |   move.l 246(sp),d1
    716e:	|  |   jsr -306(a6)
    7172:	|  |   move.l d0,242(sp)
    7176:	|  |   move.l 242(sp),d0
    717a:	|  '-- bne.s 715c <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    717c:	|      move.l 306(sp),238(sp)
    7182:	|      move.l 1cd6e <DOSBase>,d0
    7188:	|      movea.l d0,a6
    718a:	|      move.l 238(sp),d1
    718e:	|      jsr -306(a6)
    7192:	|      move.l d0,234(sp)
    7196:	|      move.l 234(sp),d0
    719a:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    719e:	|      move.l 306(sp),226(sp)
    71a4:	|      move.l 1cd6e <DOSBase>,d0
    71aa:	|      movea.l d0,a6
    71ac:	|      move.l 226(sp),d1
    71b0:	|      jsr -306(a6)
    71b4:	|      move.l d0,222(sp)
    71b8:	|      move.l 222(sp),d0
    71bc:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    71c0:	|      move.l 230(sp),d0
    71c4:	|      lsl.l #8,d0
    71c6:	|      add.l 218(sp),d0
    71ca:	|      movea.l 344(sp),a0
    71ce:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    71d0:	|      movea.l 344(sp),a0
    71d4:	|      move.l (a0),d0
    71d6:	|      cmpi.l #514,d0
    71dc:	|  ,-- ble.s 7232 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    71de:	|  |   move.l 1cd6e <DOSBase>,d0
    71e4:	|  |   movea.l d0,a6
    71e6:	|  |   jsr -60(a6)
    71ea:	|  |   move.l d0,194(sp)
    71ee:	|  |   move.l 194(sp),d0
    71f2:	|  |   move.l d0,190(sp)
    71f6:	|  |   move.l #102109,186(sp)
    71fe:	|  |   moveq #100,d1
    7200:	|  |   move.l d1,182(sp)
    7204:	|  |   move.l 1cd6e <DOSBase>,d0
    720a:	|  |   movea.l d0,a6
    720c:	|  |   move.l 190(sp),d1
    7210:	|  |   move.l 186(sp),d2
    7214:	|  |   move.l 182(sp),d3
    7218:	|  |   jsr -48(a6)
    721c:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    7220:	|  |   pea 18edd <PutChar+0xf23>
    7226:	|  |   jsr 17518 <KPrintF>
    722c:	|  |   addq.l #4,sp
		return NULL;
    722e:	|  |   moveq #0,d0
    7230:	+--|-- bra.s 7298 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    7232:	|  '-> movea.l 344(sp),a0
    7236:	|      move.l (a0),d0
    7238:	|      cmpi.l #257,d0
    723e:	|  ,-- bgt.s 7294 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    7240:	|  |   move.l 1cd6e <DOSBase>,d0
    7246:	|  |   movea.l d0,a6
    7248:	|  |   jsr -60(a6)
    724c:	|  |   move.l d0,214(sp)
    7250:	|  |   move.l 214(sp),d0
    7254:	|  |   move.l d0,210(sp)
    7258:	|  |   move.l #102178,206(sp)
    7260:	|  |   moveq #100,d0
    7262:	|  |   move.l d0,202(sp)
    7266:	|  |   move.l 1cd6e <DOSBase>,d0
    726c:	|  |   movea.l d0,a6
    726e:	|  |   move.l 210(sp),d1
    7272:	|  |   move.l 206(sp),d2
    7276:	|  |   move.l 202(sp),d3
    727a:	|  |   jsr -48(a6)
    727e:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    7282:	|  |   pea 18f22 <PutChar+0xf68>
    7288:	|  |   jsr 17518 <KPrintF>
    728e:	|  |   addq.l #4,sp
		return NULL;
    7290:	|  |   moveq #0,d0
    7292:	+--|-- bra.s 7298 <openAndVerify+0x366>
	}
	return fp;
    7294:	|  '-> move.l 306(sp),d0
}
    7298:	'----> movem.l (sp)+,d2-d3/a6
    729c:	       lea 312(sp),sp
    72a0:	       rts

000072a2 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    72a2:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    72a4:	          move.l #118014,(sp)
	while (* huntAndDestroy) {
    72aa:	   ,----- bra.s 72d6 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    72ac:	,--|----> movea.l (sp),a0
    72ae:	|  |      move.l (a0),d0
    72b0:	|  |      cmp.l 8(sp),d0
    72b4:	|  |  ,-- bne.s 72cc <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    72b6:	|  |  |   movea.l (sp),a0
    72b8:	|  |  |   movea.l (a0),a0
    72ba:	|  |  |   move.l 44(a0),d0
    72be:	|  |  |   movea.l (sp),a0
    72c0:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    72c2:	|  |  |   movea.l 8(sp),a0
    72c6:	|  |  |   clr.l 44(a0)
    72ca:	|  +--|-- bra.s 72d6 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    72cc:	|  |  '-> movea.l (sp),a0
    72ce:	|  |      move.l (a0),d0
    72d0:	|  |      moveq #44,d1
    72d2:	|  |      add.l d0,d1
    72d4:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    72d6:	|  '----> movea.l (sp),a0
    72d8:	|         move.l (a0),d0
    72da:	'-------- bne.s 72ac <pauseFunction+0xa>
		}
	}
}
    72dc:	          nop
    72de:	          nop
    72e0:	          addq.l #4,sp
    72e2:	          rts

000072e4 <preloadNewFunctionNum>:

struct loadedFunction *preloadNewFunctionNum (unsigned int funcNum) {
    72e4:	       lea -16(sp),sp
    72e8:	       move.l a6,-(sp)
	
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    72ea:	       moveq #58,d0
    72ec:	       move.l d0,16(sp)
    72f0:	       clr.l 12(sp)
    72f4:	       move.l 1cd66 <SysBase>,d0
    72fa:	       movea.l d0,a6
    72fc:	       move.l 16(sp),d0
    7300:	       move.l 12(sp),d1
    7304:	       jsr -684(a6)
    7308:	       move.l d0,8(sp)
    730c:	       move.l 8(sp),d0
    7310:	       move.l d0,4(sp)
	if(!newFunc) {
    7314:	   ,-- bne.s 7328 <preloadNewFunctionNum+0x44>
		KPrintF("startNewFunction: Cannot allocate memory");
    7316:	   |   pea 18f69 <PutChar+0xfaf>
    731c:	   |   jsr 17518 <KPrintF>
    7322:	   |   addq.l #4,sp
		return 0;
    7324:	   |   moveq #0,d0
    7326:	,--|-- bra.s 7342 <preloadNewFunctionNum+0x5e>
	}

	newFunc -> originalNumber = funcNum;
    7328:	|  '-> move.l 24(sp),d0
    732c:	|      movea.l 4(sp),a0
    7330:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    7332:	|      move.l 4(sp),-(sp)
    7336:	|      jsr 6ca0 <loadFunctionCode>
    733c:	|      addq.l #4,sp

	return newFunc;
    733e:	|      move.l 4(sp),d0
}
    7342:	'----> movea.l (sp)+,a6
    7344:	       lea 16(sp),sp
    7348:	       rts

0000734a <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    734a:	move.l 1ccfe <allRunningFunctions>,d0
    7350:	movea.l 4(sp),a0
    7354:	move.l d0,44(a0)
	allRunningFunctions = fun;
    7358:	move.l 4(sp),1ccfe <allRunningFunctions>
}
    7360:	nop
    7362:	rts

00007364 <runSludge>:

BOOL runSludge () {
    7364:	                   lea -12(sp),sp
    7368:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    736a:	                   move.l 1ccfe <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    7372:	      ,----------- bra.s 73ee <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    7374:	   ,--|----------> movea.l 12(sp),a0
    7378:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    737e:	   |  |            movea.l 12(sp),a0
    7382:	   |  |            move.b 56(a0),d0
    7386:	   |  |  ,-------- bne.s 73e8 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    7388:	   |  |  |         movea.l 12(sp),a0
    738c:	   |  |  |         move.l 12(a0),d0
    7390:	   |  |  |  ,----- beq.s 73ba <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    7392:	   |  |  |  |      movea.l 12(sp),a0
    7396:	   |  |  |  |      move.l 12(a0),d0
    739a:	   |  |  |  |  ,-- bpl.s 73a6 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    739c:	   |  |  |  |  |   movea.l 12(sp),a0
    73a0:	   |  |  |  |  |   clr.l 12(a0)
    73a4:	   |  |  +--|--|-- bra.s 73e8 <runSludge+0x84>
				} else if (
					! -- (thisFunction -> timeLeft)) {
    73a6:	   |  |  |  |  '-> movea.l 12(sp),a0
    73aa:	   |  |  |  |      move.l 12(a0),d0
    73ae:	   |  |  |  |      subq.l #1,d0
				} else if (
    73b0:	   |  |  |  |      movea.l 12(sp),a0
    73b4:	   |  |  |  |      move.l d0,12(a0)
    73b8:	   |  |  +--|----- bra.s 73e8 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    73ba:	   |  |  |  '----> movea.l 12(sp),a0
    73be:	   |  |  |         move.w 50(a0),d0
    73c2:	   |  |  |     ,-- beq.s 73d2 <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    73c4:	   |  |  |     |   movea.l 12(sp),a0
    73c8:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    73cc:	   |  |  |     |   jsr 414c <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    73d2:	   |  |  |     '-> move.l 12(sp),-(sp)
    73d6:	   |  |  |         jsr 535c <continueFunction>
    73dc:	   |  |  |         addq.l #4,sp
    73de:	   |  |  |         tst.w d0
    73e0:	   |  |  +-------- bne.s 73e8 <runSludge+0x84>
					return FALSE;
    73e2:	   |  |  |         clr.w d0
    73e4:	,--|--|--|-------- bra.w 7474 <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    73e8:	|  |  |  '-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    73ee:	|  |  '----------> tst.l 12(sp)
    73f2:	|  '-------------- bne.s 7374 <runSludge+0x10>
	}

	if (loadNow) {
    73f4:	|                  move.l 1cd32 <loadNow>,d0
    73fa:	|        ,-------- beq.s 7472 <runSludge+0x10e>
		if (loadNow[0] == ':') {
    73fc:	|        |         movea.l 1cd32 <loadNow>,a0
    7402:	|        |         move.b (a0),d0
    7404:	|        |         cmpi.b #58,d0
    7408:	|        |  ,----- bne.s 743c <runSludge+0xd8>
			saveGame (loadNow + 1);
    740a:	|        |  |      move.l 1cd32 <loadNow>,d0
    7410:	|        |  |      addq.l #1,d0
    7412:	|        |  |      move.l d0,-(sp)
    7414:	|        |  |      jsr c978 <saveGame>
    741a:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    741c:	|        |  |      movea.l 1ce2c <saverFunc>,a0
    7422:	|        |  |      lea 28(a0),a0
    7426:	|        |  |      pea 1 <_start+0x1>
    742a:	|        |  |      pea 1 <_start+0x1>
    742e:	|        |  |      move.l a0,-(sp)
    7430:	|        |  |      jsr 1532a <setVariable>
    7436:	|        |  |      lea 12(sp),sp
    743a:	|        |  |  ,-- bra.s 7454 <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    743c:	|        |  '--|-> move.l 1cd32 <loadNow>,d0
    7442:	|        |     |   move.l d0,-(sp)
    7444:	|        |     |   jsr c4c0 <loadGame>
    744a:	|        |     |   addq.l #4,sp
    744c:	|        |     |   tst.w d0
    744e:	|        |     +-- bne.s 7454 <runSludge+0xf0>
    7450:	|        |     |   clr.w d0
    7452:	+--------|-----|-- bra.s 7474 <runSludge+0x110>
		}
		FreeVec(loadNow);
    7454:	|        |     '-> move.l 1cd32 <loadNow>,8(sp)
    745c:	|        |         move.l 1cd66 <SysBase>,d0
    7462:	|        |         movea.l d0,a6
    7464:	|        |         movea.l 8(sp),a1
    7468:	|        |         jsr -690(a6)
		loadNow = NULL;
    746c:	|        |         clr.l 1cd32 <loadNow>
	}

	return TRUE;
    7472:	|        '-------> moveq #1,d0
}
    7474:	'----------------> movea.l (sp)+,a6
    7476:	                   lea 12(sp),sp
    747a:	                   rts

0000747c <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    747c:	movea.l 1c6d6 <currentEvents>,a0
    7482:	move.l (a0),d0
    7484:	move.l 4(sp),-(sp)
    7488:	move.l d0,-(sp)
    748a:	jsr 8d0 <put2bytes>
    7490:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    7492:	movea.l 1c6d6 <currentEvents>,a0
    7498:	move.l 4(a0),d0
    749c:	move.l 4(sp),-(sp)
    74a0:	move.l d0,-(sp)
    74a2:	jsr 8d0 <put2bytes>
    74a8:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    74aa:	movea.l 1c6d6 <currentEvents>,a0
    74b0:	move.l 8(a0),d0
    74b4:	move.l 4(sp),-(sp)
    74b8:	move.l d0,-(sp)
    74ba:	jsr 8d0 <put2bytes>
    74c0:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    74c2:	movea.l 1c6d6 <currentEvents>,a0
    74c8:	move.l 12(a0),d0
    74cc:	move.l 4(sp),-(sp)
    74d0:	move.l d0,-(sp)
    74d2:	jsr 8d0 <put2bytes>
    74d8:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    74da:	movea.l 1c6d6 <currentEvents>,a0
    74e0:	move.l 16(a0),d0
    74e4:	move.l 4(sp),-(sp)
    74e8:	move.l d0,-(sp)
    74ea:	jsr 8d0 <put2bytes>
    74f0:	addq.l #8,sp
	put4bytes ((ULONG) currentEvents -> focusFunction,			fp); //Todo: Changed to pointer type. Check if this is correct.
    74f2:	movea.l 1c6d6 <currentEvents>,a0
    74f8:	move.l 20(a0),d0
    74fc:	move.l 4(sp),-(sp)
    7500:	move.l d0,-(sp)
    7502:	jsr 958 <put4bytes>
    7508:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    750a:	movea.l 1c6d6 <currentEvents>,a0
    7510:	move.l 24(a0),d0
    7514:	move.l 4(sp),-(sp)
    7518:	move.l d0,-(sp)
    751a:	jsr 8d0 <put2bytes>
    7520:	addq.l #8,sp
}
    7522:	nop
    7524:	rts

00007526 <sludgeDisplay>:

void sludgeDisplay () {					
    7526:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    7528:	move.l #14675968,(sp)
	displayCursor();
    752e:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    7534:	jsr 15c4 <CstDrawBackdrop>
	CstRestoreScreen();
    753a:	jsr 2c14 <CstRestoreScreen>
	drawPeople();
    7540:	jsr a1fa <drawPeople>
	CstSwapBuffer();
    7546:	jsr 3804 <CstSwapBuffer>
}
    754c:	nop
    754e:	addq.l #4,sp
    7550:	rts

00007552 <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    7552:	      ,-- bra.s 7572 <stackSetByIndex+0x20>
		vS = vS->next;
    7554:	,-----|-> movea.l 4(sp),a0
    7558:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    755e:	|     +-- bne.s 7572 <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    7560:	|     |   pea 18f92 <PutChar+0xfd8>
    7566:	|     |   jsr 17518 <KPrintF>
    756c:	|     |   addq.l #4,sp
			return FALSE;
    756e:	|     |   clr.w d0
    7570:	|  ,--|-- bra.s 7594 <stackSetByIndex+0x42>
	while (theIndex--) {
    7572:	|  |  '-> move.l 8(sp),d0
    7576:	|  |      move.l d0,d1
    7578:	|  |      subq.l #1,d1
    757a:	|  |      move.l d1,8(sp)
    757e:	|  |      tst.l d0
    7580:	'--|----- bne.s 7554 <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    7582:	   |      move.l 4(sp),d0
    7586:	   |      move.l d0,-(sp)
    7588:	   |      move.l 16(sp),-(sp)
    758c:	   |      jsr 14ef2 <copyVariable>
    7592:	   |      addq.l #8,sp
}
    7594:	   '----> rts

00007596 <startNewFunctionLoaded>:

int startNewFunctionLoaded (struct loadedFunction * newFunc, unsigned int numParamsExpected,struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    7596:	             subq.l #8,sp
    7598:	             move.l 28(sp),d0
    759c:	             move.w d0,d0
    759e:	             move.w d0,2(sp)
	
	if (newFunc -> numArgs != (int)numParamsExpected) {
    75a2:	             movea.l 12(sp),a0
    75a6:	             move.l 16(a0),d1
    75aa:	             move.l 16(sp),d0
    75ae:	             cmp.l d1,d0
    75b0:	         ,-- beq.s 75c6 <startNewFunctionLoaded+0x30>
		KPrintF("Wrong number of parameters!");
    75b2:	         |   pea 18fab <PutChar+0xff1>
    75b8:	         |   jsr 17518 <KPrintF>
    75be:	         |   addq.l #4,sp
		return NULL; 
    75c0:	         |   moveq #0,d0
    75c2:	,--------|-- bra.w 76a2 <startNewFunctionLoaded+0x10c>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    75c6:	|        '-> movea.l 12(sp),a0
    75ca:	|            move.l 16(a0),d1
    75ce:	|            movea.l 12(sp),a0
    75d2:	|            move.l 8(a0),d0
    75d6:	|            cmp.l d1,d0
    75d8:	|  ,-------- bge.s 7642 <startNewFunctionLoaded+0xac>
		KPrintF ("More arguments than local variable space!");
    75da:	|  |         pea 18fc7 <PutChar+0x100d>
    75e0:	|  |         jsr 17518 <KPrintF>
    75e6:	|  |         addq.l #4,sp
		return NULL; 
    75e8:	|  |         moveq #0,d0
    75ea:	+--|-------- bra.w 76a2 <startNewFunctionLoaded+0x10c>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    75ee:	|  |  ,----> movea.l 24(sp),a0
    75f2:	|  |  |      move.l (a0),4(sp)
		numParamsExpected --;
    75f6:	|  |  |      subq.l #1,16(sp)
		if (*vStack == NULL) {
    75fa:	|  |  |      movea.l 24(sp),a0
    75fe:	|  |  |      move.l (a0),d0
    7600:	|  |  |  ,-- bne.s 7616 <startNewFunctionLoaded+0x80>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    7602:	|  |  |  |   pea 18ff1 <PutChar+0x1037>
    7608:	|  |  |  |   jsr 17518 <KPrintF>
    760e:	|  |  |  |   addq.l #4,sp
			return NULL;
    7610:	|  |  |  |   moveq #0,d0
    7612:	+--|--|--|-- bra.w 76a2 <startNewFunctionLoaded+0x10c>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    7616:	|  |  |  '-> movea.l 12(sp),a0
    761a:	|  |  |      move.l 20(a0),d1
    761e:	|  |  |      move.l 16(sp),d0
    7622:	|  |  |      lsl.l #3,d0
    7624:	|  |  |      add.l d0,d1
    7626:	|  |  |      move.l 4(sp),d0
    762a:	|  |  |      move.l d1,-(sp)
    762c:	|  |  |      move.l d0,-(sp)
    762e:	|  |  |      jsr 14ef2 <copyVariable>
    7634:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    7636:	|  |  |      move.l 24(sp),-(sp)
    763a:	|  |  |      jsr 153bc <trimStack>
    7640:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    7642:	|  '--|----> tst.l 16(sp)
    7646:	|     '----- bne.s 75ee <startNewFunctionLoaded+0x58>
	}

	newFunc -> cancelMe = FALSE;
    7648:	|            movea.l 12(sp),a0
    764c:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    7650:	|            movea.l 12(sp),a0
    7654:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    7658:	|            movea.l 12(sp),a0
    765c:	|            move.w 2(sp),48(a0)
	newFunc -> calledBy = calledBy;
    7662:	|            movea.l 12(sp),a0
    7666:	|            move.l 20(sp),40(a0)
	newFunc -> stack = NULL;
    766c:	|            movea.l 12(sp),a0
    7670:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    7674:	|            movea.l 12(sp),a0
    7678:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    767c:	|            movea.l 12(sp),a0
    7680:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    7684:	|            movea.l 12(sp),a0
    7688:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    768c:	|            movea.l 12(sp),a0
    7690:	|            clr.l 28(a0)

	restartFunction (newFunc);
    7694:	|            move.l 12(sp),-(sp)
    7698:	|            jsr 734a <restartFunction>
    769e:	|            addq.l #4,sp
	return 1;
    76a0:	|            moveq #1,d0
}
    76a2:	'----------> addq.l #8,sp
    76a4:	             rts

000076a6 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    76a6:	       lea -24(sp),sp
    76aa:	       move.l a6,-(sp)
    76ac:	       move.l 48(sp),d0
    76b0:	       move.w d0,d0
    76b2:	       move.w d0,6(sp)
	
	volatile struct Custom *custom = (struct Custom*)0xdff000;
    76b6:	       move.l #14675968,24(sp)
	//custom->color[0] = 0x00f;	

	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    76be:	       moveq #58,d0
    76c0:	       move.l d0,20(sp)
    76c4:	       clr.l 16(sp)
    76c8:	       move.l 1cd66 <SysBase>,d0
    76ce:	       movea.l d0,a6
    76d0:	       move.l 20(sp),d0
    76d4:	       move.l 16(sp),d1
    76d8:	       jsr -684(a6)
    76dc:	       move.l d0,12(sp)
    76e0:	       move.l 12(sp),d0
    76e4:	       move.l d0,8(sp)
	if(!newFunc) {
    76e8:	   ,-- bne.s 76fc <startNewFunctionNum+0x56>
		KPrintF("startNewFunction: Cannot allocate memory");
    76ea:	   |   pea 18f69 <PutChar+0xfaf>
    76f0:	   |   jsr 17518 <KPrintF>
    76f6:	   |   addq.l #4,sp
		return 0;
    76f8:	   |   moveq #0,d0
    76fa:	,--|-- bra.s 774a <startNewFunctionNum+0xa4>
	}
	if(funcNum == 145) {
    76fc:	|  '-> cmpi.l #145,32(sp)
    7704:	|  ,-- bne.s 7714 <startNewFunctionNum+0x6e>
		KPrintF("startNewFunction: funcNum 145");
    7706:	|  |   pea 1903c <PutChar+0x1082>
    770c:	|  |   jsr 17518 <KPrintF>
    7712:	|  |   addq.l #4,sp
	}

	newFunc -> originalNumber = funcNum;
    7714:	|  '-> move.l 32(sp),d0
    7718:	|      movea.l 8(sp),a0
    771c:	|      move.l d0,(a0)

	loadFunctionCode (newFunc);	
    771e:	|      move.l 8(sp),-(sp)
    7722:	|      jsr 6ca0 <loadFunctionCode>
    7728:	|      addq.l #4,sp
	//custom->color[0] = 0x000;	
	return startNewFunctionLoaded (newFunc, numParamsExpected, calledBy, vStack, returnSommet);
    772a:	|      movea.w 6(sp),a0
    772e:	|      move.l a0,-(sp)
    7730:	|      move.l 48(sp),-(sp)
    7734:	|      move.l 48(sp),-(sp)
    7738:	|      move.l 48(sp),-(sp)
    773c:	|      move.l 24(sp),-(sp)
    7740:	|      jsr 7596 <startNewFunctionLoaded>
    7746:	|      lea 20(sp),sp
}
    774a:	'----> movea.l (sp)+,a6
    774c:	       lea 24(sp),sp
    7750:	       rts

00007752 <unloadFunction>:

void unloadFunction (struct loadedFunction * fun) {
    7752:	             lea -12(sp),sp
    7756:	             move.l a6,-(sp)

	int a;

	//Keep function loaed in memory
	if( fun == currentEvents -> focusFunction) {	
    7758:	             movea.l 1c6d6 <currentEvents>,a0
    775e:	             move.l 20(a0),d0
    7762:	             cmp.l 20(sp),d0
    7766:	,----------- beq.w 7808 <unloadFunction+0xb6>
		return;
	}

	if (fun -> stack) 
    776a:	|            movea.l 20(sp),a0
    776e:	|            move.l 24(a0),d0
    7772:	|        ,-- beq.s 7786 <unloadFunction+0x34>
	{
		KPrintF("unloadfunction: error non empty stack");
    7774:	|        |   pea 1905a <PutChar+0x10a0>
    777a:	|        |   jsr 17518 <KPrintF>
    7780:	|        |   addq.l #4,sp
		return;
    7782:	|  ,-----|-- bra.w 780a <unloadFunction+0xb8>
	}
	FreeVec( fun -> compiledLines);
    7786:	|  |     '-> movea.l 20(sp),a0
    778a:	|  |         move.l 4(a0),8(sp)
    7790:	|  |         move.l 1cd66 <SysBase>,d0
    7796:	|  |         movea.l d0,a6
    7798:	|  |         movea.l 8(sp),a1
    779c:	|  |         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    77a0:	|  |         clr.l 12(sp)
    77a4:	|  |     ,-- bra.s 77c4 <unloadFunction+0x72>
    77a6:	|  |  ,--|-> movea.l 20(sp),a0
    77aa:	|  |  |  |   move.l 20(a0),d1
    77ae:	|  |  |  |   move.l 12(sp),d0
    77b2:	|  |  |  |   lsl.l #3,d0
    77b4:	|  |  |  |   add.l d1,d0
    77b6:	|  |  |  |   move.l d0,-(sp)
    77b8:	|  |  |  |   jsr 14c86 <unlinkVar>
    77be:	|  |  |  |   addq.l #4,sp
    77c0:	|  |  |  |   addq.l #1,12(sp)
    77c4:	|  |  |  '-> movea.l 20(sp),a0
    77c8:	|  |  |      move.l 8(a0),d0
    77cc:	|  |  |      cmp.l 12(sp),d0
    77d0:	|  |  '----- bgt.s 77a6 <unloadFunction+0x54>
	if( fun->numLocals > 0) {
    77d2:	|  |         movea.l 20(sp),a0
    77d6:	|  |         move.l 8(a0),d0
    77da:	|  |     ,-- ble.s 77f6 <unloadFunction+0xa4>
		FreeVec(fun -> localVars);
    77dc:	|  |     |   movea.l 20(sp),a0
    77e0:	|  |     |   move.l 20(a0),4(sp)
    77e6:	|  |     |   move.l 1cd66 <SysBase>,d0
    77ec:	|  |     |   movea.l d0,a6
    77ee:	|  |     |   movea.l 4(sp),a1
    77f2:	|  |     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    77f6:	|  |     '-> moveq #28,d0
    77f8:	|  |         add.l 20(sp),d0
    77fc:	|  |         move.l d0,-(sp)
    77fe:	|  |         jsr 14c86 <unlinkVar>
    7804:	|  |         addq.l #4,sp
    7806:	|  +-------- bra.s 780a <unloadFunction+0xb8>
		return;
    7808:	'--|-------> nop
}
    780a:	   '-------> movea.l (sp)+,a6
    780c:	             lea 12(sp),sp
    7810:	             rts

00007812 <unfreezeSubs>:

void unfreezeSubs () {
    7812:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    7814:	          move.l 1ccfe <allRunningFunctions>,(sp)

	while (thisFunction) {
    781a:	   ,----- bra.s 7838 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    781c:	,--|----> movea.l (sp),a0
    781e:	|  |      move.b 56(a0),d0
    7822:	|  |  ,-- beq.s 7832 <unfreezeSubs+0x20>
    7824:	|  |  |   movea.l (sp),a0
    7826:	|  |  |   move.b 56(a0),d0
    782a:	|  |  |   subq.b #1,d0
    782c:	|  |  |   movea.l (sp),a0
    782e:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    7832:	|  |  '-> movea.l (sp),a0
    7834:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    7838:	|  '----> tst.l (sp)
    783a:	'-------- bne.s 781c <unfreezeSubs+0xa>
	}
}
    783c:	          nop
    783e:	          nop
    7840:	          addq.l #4,sp
    7842:	          rts

00007844 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    7844:	clr.w 1c6e2 <sliceBusy>
}
    784a:	nop
    784c:	rts

0000784e <getNumberedString>:

char * getNumberedString (int value) {
    784e:	       lea -56(sp),sp
    7852:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    7856:	       move.w 1c6e2 <sliceBusy>,d0
    785c:	   ,-- beq.s 78a6 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    785e:	   |   move.l 1cd6e <DOSBase>,d0
    7864:	   |   movea.l d0,a6
    7866:	   |   jsr -60(a6)
    786a:	   |   move.l d0,28(sp)
    786e:	   |   move.l 28(sp),d0
    7872:	   |   move.l d0,24(sp)
    7876:	   |   move.l #102528,20(sp)
    787e:	   |   moveq #76,d0
    7880:	   |   move.l d0,16(sp)
    7884:	   |   move.l 1cd6e <DOSBase>,d0
    788a:	   |   movea.l d0,a6
    788c:	   |   move.l 24(sp),d1
    7890:	   |   move.l 20(sp),d2
    7894:	   |   move.l 16(sp),d3
    7898:	   |   jsr -48(a6)
    789c:	   |   move.l d0,12(sp)
		return NULL;
    78a0:	   |   moveq #0,d0
    78a2:	,--|-- bra.w 7942 <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    78a6:	|  '-> move.l 1cd4e <bigDataFile>,64(sp)
    78ae:	|      move.l 72(sp),d0
    78b2:	|      add.l d0,d0
    78b4:	|      add.l d0,d0
    78b6:	|      move.l d0,d1
    78b8:	|      move.l 1cd5a <startOfTextIndex>,d0
    78be:	|      add.l d1,d0
    78c0:	|      move.l d0,60(sp)
    78c4:	|      moveq #-1,d0
    78c6:	|      move.l d0,56(sp)
    78ca:	|      move.l 1cd6e <DOSBase>,d0
    78d0:	|      movea.l d0,a6
    78d2:	|      move.l 64(sp),d1
    78d6:	|      move.l 60(sp),d2
    78da:	|      move.l 56(sp),d3
    78de:	|      jsr -66(a6)
    78e2:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    78e6:	|      move.l 1cd4e <bigDataFile>,d0
    78ec:	|      move.l d0,-(sp)
    78ee:	|      jsr 718 <get4bytes>
    78f4:	|      addq.l #4,sp
    78f6:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    78fa:	|      move.l 1cd4e <bigDataFile>,48(sp)
    7902:	|      move.l 72(sp),44(sp)
    7908:	|      moveq #-1,d0
    790a:	|      move.l d0,40(sp)
    790e:	|      move.l 1cd6e <DOSBase>,d0
    7914:	|      movea.l d0,a6
    7916:	|      move.l 48(sp),d1
    791a:	|      move.l 44(sp),d2
    791e:	|      move.l 40(sp),d3
    7922:	|      jsr -66(a6)
    7926:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    792a:	|      move.l 1cd4e <bigDataFile>,d0
    7930:	|      move.l d0,-(sp)
    7932:	|      jsr b02 <readString>
    7938:	|      addq.l #4,sp
    793a:	|      move.l d0,32(sp)
	
	return s;
    793e:	|      move.l 32(sp),d0
}
    7942:	'----> movem.l (sp)+,d2-d3/a6
    7946:	       lea 56(sp),sp
    794a:	       rts

0000794c <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    794c:	       lea -32(sp),sp
    7950:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    7954:	       move.w 1c6e2 <sliceBusy>,d0
    795a:	   ,-- beq.s 7976 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    795c:	   |   pea 190cd <PutChar+0x1113>
    7962:	   |   pea 190eb <PutChar+0x1131>
    7968:	   |   jsr 17518 <KPrintF>
    796e:	   |   addq.l #8,sp
		return 0;
    7970:	   |   moveq #0,d0
    7972:	,--|-- bra.w 7a0a <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    7976:	|  '-> move.l 1cd4e <bigDataFile>,40(sp)
    797e:	|      move.l 48(sp),d0
    7982:	|      add.l d0,d0
    7984:	|      add.l d0,d0
    7986:	|      move.l d0,d1
    7988:	|      move.l 1cd56 <startOfDataIndex>,d0
    798e:	|      add.l d1,d0
    7990:	|      move.l d0,36(sp)
    7994:	|      moveq #-1,d0
    7996:	|      move.l d0,32(sp)
    799a:	|      move.l 1cd6e <DOSBase>,d0
    79a0:	|      movea.l d0,a6
    79a2:	|      move.l 40(sp),d1
    79a6:	|      move.l 36(sp),d2
    79aa:	|      move.l 32(sp),d3
    79ae:	|      jsr -66(a6)
    79b2:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    79b6:	|      move.l 1cd4e <bigDataFile>,24(sp)
    79be:	|      move.l 1cd4e <bigDataFile>,d0
    79c4:	|      move.l d0,-(sp)
    79c6:	|      jsr 718 <get4bytes>
    79cc:	|      addq.l #4,sp
    79ce:	|      move.l d0,20(sp)
    79d2:	|      clr.l 16(sp)
    79d6:	|      move.l 1cd6e <DOSBase>,d0
    79dc:	|      movea.l d0,a6
    79de:	|      move.l 24(sp),d1
    79e2:	|      move.l 20(sp),d2
    79e6:	|      move.l 16(sp),d3
    79ea:	|      jsr -66(a6)
    79ee:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    79f2:	|      move.w #1,1c6e2 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    79fa:	|      move.l 1cd4e <bigDataFile>,d0
    7a00:	|      move.l d0,-(sp)
    7a02:	|      jsr 718 <get4bytes>
    7a08:	|      addq.l #4,sp
}
    7a0a:	'----> movem.l (sp)+,d2-d3/a6
    7a0e:	       lea 32(sp),sp
    7a12:	       rts

00007a14 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    7a14:	       lea -32(sp),sp
    7a18:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    7a1c:	       move.w 1c6e2 <sliceBusy>,d0
    7a22:	   ,-- beq.s 7a3e <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    7a24:	   |   pea 190cd <PutChar+0x1113>
    7a2a:	   |   pea 190eb <PutChar+0x1131>
    7a30:	   |   jsr 17518 <KPrintF>
    7a36:	   |   addq.l #8,sp
        return FALSE;
    7a38:	   |   clr.w d0
    7a3a:	,--|-- bra.w 7aca <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    7a3e:	|  '-> move.l 1cd4e <bigDataFile>,40(sp)
    7a46:	|      move.l 48(sp),d0
    7a4a:	|      add.l d0,d0
    7a4c:	|      add.l d0,d0
    7a4e:	|      move.l d0,d1
    7a50:	|      move.l 1cd62 <startOfObjectIndex>,d0
    7a56:	|      add.l d1,d0
    7a58:	|      move.l d0,36(sp)
    7a5c:	|      moveq #-1,d0
    7a5e:	|      move.l d0,32(sp)
    7a62:	|      move.l 1cd6e <DOSBase>,d0
    7a68:	|      movea.l d0,a6
    7a6a:	|      move.l 40(sp),d1
    7a6e:	|      move.l 36(sp),d2
    7a72:	|      move.l 32(sp),d3
    7a76:	|      jsr -66(a6)
    7a7a:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    7a7e:	|      move.l 1cd4e <bigDataFile>,24(sp)
    7a86:	|      move.l 1cd4e <bigDataFile>,d0
    7a8c:	|      move.l d0,-(sp)
    7a8e:	|      jsr 718 <get4bytes>
    7a94:	|      addq.l #4,sp
    7a96:	|      move.l d0,20(sp)
    7a9a:	|      moveq #-1,d0
    7a9c:	|      move.l d0,16(sp)
    7aa0:	|      move.l 1cd6e <DOSBase>,d0
    7aa6:	|      movea.l d0,a6
    7aa8:	|      move.l 24(sp),d1
    7aac:	|      move.l 20(sp),d2
    7ab0:	|      move.l 16(sp),d3
    7ab4:	|      jsr -66(a6)
    7ab8:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    7abc:	|      move.w #1,1c6e2 <sliceBusy>
    7ac4:	|      move.w 1c6e2 <sliceBusy>,d0
}
    7aca:	'----> movem.l (sp)+,d2-d3/a6
    7ace:	       lea 32(sp),sp
    7ad2:	       rts

00007ad4 <openSubSlice>:

BOOL openSubSlice (int num) {
    7ad4:	       lea -32(sp),sp
    7ad8:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    7adc:	       move.w 1c6e2 <sliceBusy>,d0
    7ae2:	   ,-- beq.s 7afe <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    7ae4:	   |   pea 190cd <PutChar+0x1113>
    7aea:	   |   pea 190eb <PutChar+0x1131>
    7af0:	   |   jsr 17518 <KPrintF>
    7af6:	   |   addq.l #8,sp
		return FALSE;
    7af8:	   |   clr.w d0
    7afa:	,--|-- bra.w 7b8a <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    7afe:	|  '-> move.l 1cd4e <bigDataFile>,40(sp)
    7b06:	|      move.l 48(sp),d0
    7b0a:	|      add.l d0,d0
    7b0c:	|      add.l d0,d0
    7b0e:	|      move.l d0,d1
    7b10:	|      move.l 1cd5e <startOfSubIndex>,d0
    7b16:	|      add.l d1,d0
    7b18:	|      move.l d0,36(sp)
    7b1c:	|      moveq #-1,d0
    7b1e:	|      move.l d0,32(sp)
    7b22:	|      move.l 1cd6e <DOSBase>,d0
    7b28:	|      movea.l d0,a6
    7b2a:	|      move.l 40(sp),d1
    7b2e:	|      move.l 36(sp),d2
    7b32:	|      move.l 32(sp),d3
    7b36:	|      jsr -66(a6)
    7b3a:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    7b3e:	|      move.l 1cd4e <bigDataFile>,24(sp)
    7b46:	|      move.l 1cd4e <bigDataFile>,d0
    7b4c:	|      move.l d0,-(sp)
    7b4e:	|      jsr 718 <get4bytes>
    7b54:	|      addq.l #4,sp
    7b56:	|      move.l d0,20(sp)
    7b5a:	|      moveq #-1,d0
    7b5c:	|      move.l d0,16(sp)
    7b60:	|      move.l 1cd6e <DOSBase>,d0
    7b66:	|      movea.l d0,a6
    7b68:	|      move.l 24(sp),d1
    7b6c:	|      move.l 20(sp),d2
    7b70:	|      move.l 16(sp),d3
    7b74:	|      jsr -66(a6)
    7b78:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    7b7c:	|      move.w #1,1c6e2 <sliceBusy>
    7b84:	|      move.w 1c6e2 <sliceBusy>,d0
}
    7b8a:	'----> movem.l (sp)+,d2-d3/a6
    7b8e:	       lea 32(sp),sp
    7b92:	       rts

00007b94 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    7b94:	       lea -180(sp),sp
    7b98:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    7b9c:	       tst.l 196(sp)
    7ba0:	,----- beq.s 7be0 <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    7ba2:	|      move.l 196(sp),1cd4e <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    7baa:	|      move.l 196(sp),168(sp)
    7bb0:	|      clr.l 164(sp)
    7bb4:	|      clr.l 160(sp)
    7bb8:	|      move.l 1cd6e <DOSBase>,d0
    7bbe:	|      movea.l d0,a6
    7bc0:	|      move.l 168(sp),d1
    7bc4:	|      move.l 164(sp),d2
    7bc8:	|      move.l 160(sp),d3
    7bcc:	|      jsr -66(a6)
    7bd0:	|      move.l d0,156(sp)
    7bd4:	|      move.l 156(sp),d0
    7bd8:	|      move.l d0,1cd52 <startIndex>
    7bde:	|  ,-- bra.s 7c1a <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    7be0:	'--|-> move.l 1cd4e <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    7be8:	   |   move.l 196(sp),184(sp)
    7bee:	   |   move.l 1cd52 <startIndex>,d0
    7bf4:	   |   move.l d0,180(sp)
    7bf8:	   |   moveq #-1,d0
    7bfa:	   |   move.l d0,176(sp)
    7bfe:	   |   move.l 1cd6e <DOSBase>,d0
    7c04:	   |   movea.l d0,a6
    7c06:	   |   move.l 184(sp),d1
    7c0a:	   |   move.l 180(sp),d2
    7c0e:	   |   move.l 176(sp),d3
    7c12:	   |   jsr -66(a6)
    7c16:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    7c1a:	   '-> clr.w 1c6e2 <sliceBusy>

	if (skipBefore > numLanguages) {
    7c20:	       move.l 204(sp),d0
    7c24:	       cmp.l 200(sp),d0
    7c28:	   ,-- bls.s 7c3c <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    7c2a:	   |   pea 19105 <PutChar+0x114b>
    7c30:	   |   jsr 17518 <KPrintF>
    7c36:	   |   addq.l #4,sp
		skipBefore = 0;
    7c38:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    7c3c:	   '-> move.l 200(sp),d0
    7c40:	       sub.l 204(sp),d0
    7c44:	       move.l d0,188(sp)
	while (skipBefore) {
    7c48:	   ,-- bra.s 7c86 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    7c4a:	,--|-> move.l 196(sp),24(sp)
    7c50:	|  |   move.l 196(sp),-(sp)
    7c54:	|  |   jsr 718 <get4bytes>
    7c5a:	|  |   addq.l #4,sp
    7c5c:	|  |   move.l d0,20(sp)
    7c60:	|  |   moveq #-1,d0
    7c62:	|  |   move.l d0,16(sp)
    7c66:	|  |   move.l 1cd6e <DOSBase>,d0
    7c6c:	|  |   movea.l d0,a6
    7c6e:	|  |   move.l 24(sp),d1
    7c72:	|  |   move.l 20(sp),d2
    7c76:	|  |   move.l 16(sp),d3
    7c7a:	|  |   jsr -66(a6)
    7c7e:	|  |   move.l d0,12(sp)
		skipBefore --;
    7c82:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    7c86:	|  '-> tst.l 204(sp)
    7c8a:	'----- bne.s 7c4a <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7c8c:	       move.l 196(sp),152(sp)
    7c92:	       clr.l 148(sp)
    7c96:	       clr.l 144(sp)
    7c9a:	       move.l 1cd6e <DOSBase>,d0
    7ca0:	       movea.l d0,a6
    7ca2:	       move.l 152(sp),d1
    7ca6:	       move.l 148(sp),d2
    7caa:	       move.l 144(sp),d3
    7cae:	       jsr -66(a6)
    7cb2:	       move.l d0,140(sp)
    7cb6:	       move.l 140(sp),d0
    7cba:	       addq.l #4,d0
    7cbc:	       move.l d0,1cd5a <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    7cc2:	       move.l 196(sp),136(sp)
    7cc8:	       move.l 196(sp),-(sp)
    7ccc:	       jsr 718 <get4bytes>
    7cd2:	       addq.l #4,sp
    7cd4:	       move.l d0,132(sp)
    7cd8:	       moveq #-1,d0
    7cda:	       move.l d0,128(sp)
    7cde:	       move.l 1cd6e <DOSBase>,d0
    7ce4:	       movea.l d0,a6
    7ce6:	       move.l 136(sp),d1
    7cea:	       move.l 132(sp),d2
    7cee:	       move.l 128(sp),d3
    7cf2:	       jsr -66(a6)
    7cf6:	       move.l d0,124(sp)

	while (skipAfter) {
    7cfa:	   ,-- bra.s 7d38 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    7cfc:	,--|-> move.l 196(sp),40(sp)
    7d02:	|  |   move.l 196(sp),-(sp)
    7d06:	|  |   jsr 718 <get4bytes>
    7d0c:	|  |   addq.l #4,sp
    7d0e:	|  |   move.l d0,36(sp)
    7d12:	|  |   moveq #-1,d0
    7d14:	|  |   move.l d0,32(sp)
    7d18:	|  |   move.l 1cd6e <DOSBase>,d0
    7d1e:	|  |   movea.l d0,a6
    7d20:	|  |   move.l 40(sp),d1
    7d24:	|  |   move.l 36(sp),d2
    7d28:	|  |   move.l 32(sp),d3
    7d2c:	|  |   jsr -66(a6)
    7d30:	|  |   move.l d0,28(sp)
		skipAfter --;
    7d34:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    7d38:	|  '-> tst.l 188(sp)
    7d3c:	'----- bne.s 7cfc <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7d3e:	       move.l 196(sp),120(sp)
    7d44:	       clr.l 116(sp)
    7d48:	       clr.l 112(sp)
    7d4c:	       move.l 1cd6e <DOSBase>,d0
    7d52:	       movea.l d0,a6
    7d54:	       move.l 120(sp),d1
    7d58:	       move.l 116(sp),d2
    7d5c:	       move.l 112(sp),d3
    7d60:	       jsr -66(a6)
    7d64:	       move.l d0,108(sp)
    7d68:	       move.l 108(sp),d0
    7d6c:	       addq.l #4,d0
    7d6e:	       move.l d0,1cd5e <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    7d74:	       move.l 196(sp),104(sp)
    7d7a:	       move.l 196(sp),-(sp)
    7d7e:	       jsr 718 <get4bytes>
    7d84:	       addq.l #4,sp
    7d86:	       move.l d0,100(sp)
    7d8a:	       clr.l 96(sp)
    7d8e:	       move.l 1cd6e <DOSBase>,d0
    7d94:	       movea.l d0,a6
    7d96:	       move.l 104(sp),d1
    7d9a:	       move.l 100(sp),d2
    7d9e:	       move.l 96(sp),d3
    7da2:	       jsr -66(a6)
    7da6:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    7daa:	       move.l 196(sp),88(sp)
    7db0:	       clr.l 84(sp)
    7db4:	       clr.l 80(sp)
    7db8:	       move.l 1cd6e <DOSBase>,d0
    7dbe:	       movea.l d0,a6
    7dc0:	       move.l 88(sp),d1
    7dc4:	       move.l 84(sp),d2
    7dc8:	       move.l 80(sp),d3
    7dcc:	       jsr -66(a6)
    7dd0:	       move.l d0,76(sp)
    7dd4:	       move.l 76(sp),d0
    7dd8:	       addq.l #4,d0
    7dda:	       move.l d0,1cd62 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    7de0:	       move.l 196(sp),72(sp)
    7de6:	       move.l 196(sp),-(sp)
    7dea:	       jsr 718 <get4bytes>
    7df0:	       addq.l #4,sp
    7df2:	       move.l d0,68(sp)
    7df6:	       clr.l 64(sp)
    7dfa:	       move.l 1cd6e <DOSBase>,d0
    7e00:	       movea.l d0,a6
    7e02:	       move.l 72(sp),d1
    7e06:	       move.l 68(sp),d2
    7e0a:	       move.l 64(sp),d3
    7e0e:	       jsr -66(a6)
    7e12:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    7e16:	       move.l 196(sp),56(sp)
    7e1c:	       clr.l 52(sp)
    7e20:	       clr.l 48(sp)
    7e24:	       move.l 1cd6e <DOSBase>,d0
    7e2a:	       movea.l d0,a6
    7e2c:	       move.l 56(sp),d1
    7e30:	       move.l 52(sp),d2
    7e34:	       move.l 48(sp),d3
    7e38:	       jsr -66(a6)
    7e3c:	       move.l d0,44(sp)
    7e40:	       move.l 44(sp),d0
    7e44:	       move.l d0,1cd56 <startOfDataIndex>
    7e4a:	       nop
    7e4c:	       movem.l (sp)+,d2-d3/a6
    7e50:	       lea 180(sp),sp
    7e54:	       rts

00007e56 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    7e56:	    lea -20(sp),sp
    7e5a:	    move.l a6,-(sp)
    7e5c:	    move.l d7,-(sp)
	APTR vbr = 0;
    7e5e:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    7e62:	    move.w #20090,10(sp)
    7e68:	    move.w #2049,12(sp)
    7e6e:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    7e74:	    movea.l 1cd66 <SysBase>,a0
    7e7a:	    move.w 296(a0),d0
    7e7e:	    move.w d0,d0
    7e80:	    andi.l #65535,d0
    7e86:	    moveq #1,d1
    7e88:	    and.l d1,d0
    7e8a:	,-- beq.s 7eb8 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    7e8c:	|   lea 28(sp),a0
    7e90:	|   lea -18(a0),a0
    7e94:	|   move.l a0,20(sp)
    7e98:	|   move.l 1cd66 <SysBase>,d0
    7e9e:	|   movea.l d0,a6
    7ea0:	|   move.l 20(sp),d7
    7ea4:	|   exg d7,a5
    7ea6:	|   jsr -30(a6)
    7eaa:	|   exg d7,a5
    7eac:	|   move.l d0,16(sp)
    7eb0:	|   move.l 16(sp),d0
    7eb4:	|   move.l d0,24(sp)

	return vbr;
    7eb8:	'-> move.l 24(sp),d0
}
    7ebc:	    move.l (sp)+,d7
    7ebe:	    movea.l (sp)+,a6
    7ec0:	    lea 20(sp),sp
    7ec4:	    rts

00007ec6 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    7ec6:	movea.l 1cd8c <VBR>,a0
    7ecc:	lea 108(a0),a0
    7ed0:	move.l 4(sp),(a0)
}
    7ed4:	nop
    7ed6:	rts

00007ed8 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    7ed8:	movea.l 1cd8c <VBR>,a0
    7ede:	move.l 108(a0),d0
}
    7ee2:	rts

00007ee4 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    7ee4:	       subq.l #8,sp
    7ee6:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    7ee8:	       pea 1914e <PutChar+0x1194>
    7eee:	       jsr 17518 <KPrintF>
    7ef4:	       addq.l #4,sp
	Forbid();
    7ef6:	       move.l 1cd66 <SysBase>,d0
    7efc:	       movea.l d0,a6
    7efe:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    7f02:	       pea 19166 <PutChar+0x11ac>
    7f08:	       jsr 17518 <KPrintF>
    7f0e:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    7f10:	       movea.l 1cd6a <custom>,a0
    7f16:	       move.w 16(a0),d0
    7f1a:	       move.w d0,1cd8a <SystemADKCON>
	SystemInts=custom->intenar;
    7f20:	       movea.l 1cd6a <custom>,a0
    7f26:	       move.w 28(a0),d0
    7f2a:	       move.w d0,1cd86 <SystemInts>
	SystemDMA=custom->dmaconr;
    7f30:	       movea.l 1cd6a <custom>,a0
    7f36:	       move.w 2(a0),d0
    7f3a:	       move.w d0,1cd88 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    7f40:	       movea.l 1cd72 <GfxBase>,a0
    7f46:	       move.l 34(a0),d0
    7f4a:	       move.l d0,1cd94 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    7f50:	       pea 19184 <PutChar+0x11ca>
    7f56:	       jsr 17518 <KPrintF>
    7f5c:	       addq.l #4,sp
	LoadView(0);
    7f5e:	       clr.l 4(sp)
    7f62:	       move.l 1cd72 <GfxBase>,d0
    7f68:	       movea.l d0,a6
    7f6a:	       movea.l 4(sp),a1
    7f6e:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    7f72:	       pea 1919a <PutChar+0x11e0>
    7f78:	       jsr 17518 <KPrintF>
    7f7e:	       addq.l #4,sp
	WaitTOF();
    7f80:	       move.l 1cd72 <GfxBase>,d0
    7f86:	       movea.l d0,a6
    7f88:	       jsr -270(a6)
	WaitTOF();
    7f8c:	       move.l 1cd72 <GfxBase>,d0
    7f92:	       movea.l d0,a6
    7f94:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    7f98:	       pea 191af <PutChar+0x11f5>
    7f9e:	       jsr 17518 <KPrintF>
    7fa4:	       addq.l #4,sp
	WaitVbl();
    7fa6:	       jsr 1744c <WaitVbl>
	WaitVbl();
    7fac:	       jsr 1744c <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    7fb2:	       pea 191c4 <PutChar+0x120a>
    7fb8:	       jsr 17518 <KPrintF>
    7fbe:	       addq.l #4,sp
	OwnBlitter();
    7fc0:	       move.l 1cd72 <GfxBase>,d0
    7fc6:	       movea.l d0,a6
    7fc8:	       jsr -456(a6)
	WaitBlit();	
    7fcc:	       move.l 1cd72 <GfxBase>,d0
    7fd2:	       movea.l d0,a6
    7fd4:	       jsr -228(a6)
	Disable();
    7fd8:	       move.l 1cd66 <SysBase>,d0
    7fde:	       movea.l d0,a6
    7fe0:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    7fe4:	       pea 191e5 <PutChar+0x122b>
    7fea:	       jsr 17518 <KPrintF>
    7ff0:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    7ff2:	       movea.l 1cd6a <custom>,a0
    7ff8:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    7ffe:	       pea 191fc <PutChar+0x1242>
    8004:	       jsr 17518 <KPrintF>
    800a:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    800c:	       clr.l 8(sp)
    8010:	   ,-- bra.s 802e <TakeSystem+0x14a>
		custom->color[a]=0;
    8012:	,--|-> movea.l 1cd6a <custom>,a0
    8018:	|  |   move.l 8(sp),d0
    801c:	|  |   addi.l #192,d0
    8022:	|  |   add.l d0,d0
    8024:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    802a:	|  |   addq.l #1,8(sp)
    802e:	|  '-> moveq #31,d0
    8030:	|      cmp.l 8(sp),d0
    8034:	'----- bge.s 8012 <TakeSystem+0x12e>

	WaitVbl();
    8036:	       jsr 1744c <WaitVbl>
	WaitVbl();
    803c:	       jsr 1744c <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    8042:	       pea 19221 <PutChar+0x1267>
    8048:	       jsr 17518 <KPrintF>
    804e:	       addq.l #4,sp
	VBR=GetVBR();
    8050:	       jsr 7e56 <GetVBR>
    8056:	       move.l d0,1cd8c <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    805c:	       jsr 7ed8 <GetInterruptHandler>
    8062:	       move.l d0,1cd90 <SystemIrq>
}
    8068:	       nop
    806a:	       movea.l (sp)+,a6
    806c:	       addq.l #8,sp
    806e:	       rts

00008070 <FreeSystem>:

void FreeSystem() { 
    8070:	subq.l #4,sp
    8072:	move.l a6,-(sp)
	WaitVbl();
    8074:	jsr 1744c <WaitVbl>
	WaitBlit();
    807a:	move.l 1cd72 <GfxBase>,d0
    8080:	movea.l d0,a6
    8082:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    8086:	movea.l 1cd6a <custom>,a0
    808c:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    8092:	movea.l 1cd6a <custom>,a0
    8098:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    809e:	movea.l 1cd6a <custom>,a0
    80a4:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    80aa:	move.l 1cd90 <SystemIrq>,d0
    80b0:	move.l d0,-(sp)
    80b2:	jsr 7ec6 <SetInterruptHandler>
    80b8:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    80ba:	movea.l 1cd72 <GfxBase>,a0
    80c0:	move.l 38(a0),d0
    80c4:	movea.l 1cd6a <custom>,a0
    80ca:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    80ce:	movea.l 1cd72 <GfxBase>,a0
    80d4:	move.l 50(a0),d0
    80d8:	movea.l 1cd6a <custom>,a0
    80de:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    80e2:	movea.l 1cd6a <custom>,a0
    80e8:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    80ee:	move.w 1cd88 <SystemDMA>,d0
    80f4:	movea.l 1cd6a <custom>,a0
    80fa:	ori.w #-32768,d0
    80fe:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    8102:	move.w 1cd8a <SystemADKCON>,d0
    8108:	movea.l 1cd6a <custom>,a0
    810e:	ori.w #-32768,d0
    8112:	move.w d0,158(a0)

	WaitBlit();	
    8116:	move.l 1cd72 <GfxBase>,d0
    811c:	movea.l d0,a6
    811e:	jsr -228(a6)
	DisownBlitter();
    8122:	move.l 1cd72 <GfxBase>,d0
    8128:	movea.l d0,a6
    812a:	jsr -462(a6)
	Enable();
    812e:	move.l 1cd66 <SysBase>,d0
    8134:	movea.l d0,a6
    8136:	jsr -126(a6)

	LoadView(ActiView);
    813a:	move.l 1cd94 <ActiView>,4(sp)
    8142:	move.l 1cd72 <GfxBase>,d0
    8148:	movea.l d0,a6
    814a:	movea.l 4(sp),a1
    814e:	jsr -222(a6)
	WaitTOF();
    8152:	move.l 1cd72 <GfxBase>,d0
    8158:	movea.l d0,a6
    815a:	jsr -270(a6)
	WaitTOF();
    815e:	move.l 1cd72 <GfxBase>,d0
    8164:	movea.l d0,a6
    8166:	jsr -270(a6)

	Permit();
    816a:	move.l 1cd66 <SysBase>,d0
    8170:	movea.l d0,a6
    8172:	jsr -138(a6)
}
    8176:	nop
    8178:	movea.l (sp)+,a6
    817a:	addq.l #4,sp
    817c:	rts

0000817e <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    817e:	       lea -132(sp),sp
    8182:	       movem.l d2-d3/a6,-(sp)

	//int *bp = 0x200;
  	//*bp = 0;

	for(int i=0;i<1000;i++) {
    8186:	       clr.l 140(sp)
    818a:	   ,-- bra.s 8190 <main+0x12>
    818c:	,--|-> addq.l #1,140(sp)
    8190:	|  '-> cmpi.l #999,140(sp)
    8198:	'----- ble.s 818c <main+0xe>

	}

	SysBase = *((struct ExecBase**)4UL);
    819a:	       movea.w #4,a0
    819e:	       move.l (a0),d0
    81a0:	       move.l d0,1cd66 <SysBase>
	custom = (struct Custom*)0xdff000;	
    81a6:	       move.l #14675968,1cd6a <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    81b0:	       move.l #102981,136(sp)
    81b8:	       clr.l 132(sp)
    81bc:	       move.l 1cd66 <SysBase>,d0
    81c2:	       movea.l d0,a6
    81c4:	       movea.l 136(sp),a1
    81c8:	       move.l 132(sp),d0
    81cc:	       jsr -552(a6)
    81d0:	       move.l d0,128(sp)
    81d4:	       move.l 128(sp),d0
    81d8:	       move.l d0,1cd72 <GfxBase>
	if (!GfxBase)
    81de:	       move.l 1cd72 <GfxBase>,d0
    81e4:	   ,-- bne.s 81fa <main+0x7c>
		Exit(0);
    81e6:	   |   clr.l 124(sp)
    81ea:	   |   move.l 1cd6e <DOSBase>,d0
    81f0:	   |   movea.l d0,a6
    81f2:	   |   move.l 124(sp),d1
    81f6:	   |   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    81fa:	   '-> move.l #102998,120(sp)
    8202:	       clr.l 116(sp)
    8206:	       move.l 1cd66 <SysBase>,d0
    820c:	       movea.l d0,a6
    820e:	       movea.l 120(sp),a1
    8212:	       move.l 116(sp),d0
    8216:	       jsr -552(a6)
    821a:	       move.l d0,112(sp)
    821e:	       move.l 112(sp),d0
    8222:	       move.l d0,1cd6e <DOSBase>
	if (!DOSBase)
    8228:	       move.l 1cd6e <DOSBase>,d0
    822e:	   ,-- bne.s 8244 <main+0xc6>
		Exit(0);
    8230:	   |   clr.l 108(sp)
    8234:	   |   move.l 1cd6e <DOSBase>,d0
    823a:	   |   movea.l d0,a6
    823c:	   |   move.l 108(sp),d1
    8240:	   |   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    8244:	   '-> move.l #103010,104(sp)
    824c:	       clr.l 100(sp)
    8250:	       move.l 1cd66 <SysBase>,d0
    8256:	       movea.l d0,a6
    8258:	       movea.l 104(sp),a1
    825c:	       move.l 100(sp),d0
    8260:	       jsr -552(a6)
    8264:	       move.l d0,96(sp)
    8268:	       move.l 96(sp),d0
    826c:	       move.l d0,1cd76 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    8272:	       move.l 1cd76 <MathIeeeSingBasBase>,d0
    8278:	   ,-- bne.s 828e <main+0x110>
		Exit(0);	
    827a:	   |   clr.l 92(sp)
    827e:	   |   move.l 1cd6e <DOSBase>,d0
    8284:	   |   movea.l d0,a6
    8286:	   |   move.l 92(sp),d1
    828a:	   |   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    828e:	   '-> move.l #103034,88(sp)
    8296:	       clr.l 84(sp)
    829a:	       move.l 1cd66 <SysBase>,d0
    82a0:	       movea.l d0,a6
    82a2:	       movea.l 88(sp),a1
    82a6:	       move.l 84(sp),d0
    82aa:	       jsr -552(a6)
    82ae:	       move.l d0,80(sp)
    82b2:	       move.l 80(sp),d0
    82b6:	       move.l d0,1cd7a <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    82bc:	       move.l 1cd7a <MathIeeeSingTransBase>,d0
    82c2:	   ,-- bne.s 82d8 <main+0x15a>
		Exit(0);
    82c4:	   |   clr.l 76(sp)
    82c8:	   |   move.l 1cd6e <DOSBase>,d0
    82ce:	   |   movea.l d0,a6
    82d0:	   |   move.l 76(sp),d1
    82d4:	   |   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    82d8:	   '-> move.l #103060,72(sp)
    82e0:	       clr.l 68(sp)
    82e4:	       move.l 1cd66 <SysBase>,d0
    82ea:	       movea.l d0,a6
    82ec:	       movea.l 72(sp),a1
    82f0:	       move.l 68(sp),d0
    82f4:	       jsr -552(a6)
    82f8:	       move.l d0,64(sp)
    82fc:	       move.l 64(sp),d0
    8300:	       move.l d0,1cd82 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    8306:	       move.l 1cd82 <MathIeeeDoubTransBase>,d0
    830c:	   ,-- bne.s 8322 <main+0x1a4>
		Exit(0);
    830e:	   |   clr.l 60(sp)
    8312:	   |   move.l 1cd6e <DOSBase>,d0
    8318:	   |   movea.l d0,a6
    831a:	   |   move.l 60(sp),d1
    831e:	   |   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    8322:	   '-> move.l #103086,56(sp)
    832a:	       clr.l 52(sp)
    832e:	       move.l 1cd66 <SysBase>,d0
    8334:	       movea.l d0,a6
    8336:	       movea.l 56(sp),a1
    833a:	       move.l 52(sp),d0
    833e:	       jsr -552(a6)
    8342:	       move.l d0,48(sp)
    8346:	       move.l 48(sp),d0
    834a:	       move.l d0,1cd7e <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    8350:	       move.l 1cd7e <MathIeeeDoubBasBase>,d0
    8356:	   ,-- bne.s 836c <main+0x1ee>
		Exit(0);
    8358:	   |   clr.l 44(sp)
    835c:	   |   move.l 1cd6e <DOSBase>,d0
    8362:	   |   movea.l d0,a6
    8364:	   |   move.l 44(sp),d1
    8368:	   |   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 035!\n");
    836c:	   '-> pea 192c6 <PutChar+0x130c>
    8372:	       jsr 17518 <KPrintF>
    8378:	       addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 035!\n", 25);
    837a:	       move.l 1cd6e <DOSBase>,d0
    8380:	       movea.l d0,a6
    8382:	       jsr -60(a6)
    8386:	       move.l d0,40(sp)
    838a:	       move.l 40(sp),d0
    838e:	       move.l d0,36(sp)
    8392:	       move.l #103142,32(sp)
    839a:	       moveq #25,d0
    839c:	       move.l d0,28(sp)
    83a0:	       move.l 1cd6e <DOSBase>,d0
    83a6:	       movea.l d0,a6
    83a8:	       move.l 36(sp),d1
    83ac:	       move.l 32(sp),d2
    83b0:	       move.l 28(sp),d3
    83b4:	       jsr -48(a6)
    83b8:	       move.l d0,24(sp)
	Delay(50);
    83bc:	       moveq #50,d0
    83be:	       move.l d0,20(sp)
    83c2:	       move.l 1cd6e <DOSBase>,d0
    83c8:	       movea.l d0,a6
    83ca:	       move.l 20(sp),d1
    83ce:	       jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    83d2:	       pea 192ff <PutChar+0x1345>
    83d8:	       jsr 17518 <KPrintF>
    83de:	       addq.l #4,sp
	TakeSystem();
    83e0:	       jsr 7ee4 <TakeSystem>
	KPrintF("System Taken\n");
    83e6:	       pea 1930e <PutChar+0x1354>
    83ec:	       jsr 17518 <KPrintF>
    83f2:	       addq.l #4,sp

	custom->dmacon = 0x87ff;
    83f4:	       movea.l 1cd6a <custom>,a0
    83fa:	       move.w #-30721,150(a0)
	WaitVbl();
    8400:	       jsr 1744c <WaitVbl>

	KPrintF("Starting main_sludge\n");
    8406:	       pea 1931c <PutChar+0x1362>
    840c:	       jsr 17518 <KPrintF>
    8412:	       addq.l #4,sp
	main_sludge(argc, argv);	
    8414:	       move.l 152(sp),-(sp)
    8418:	       move.l 152(sp),-(sp)
    841c:	       jsr 4c04 <main_sludge>
    8422:	       addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    8424:	       jsr 8070 <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    842a:	       move.l 1cd6e <DOSBase>,16(sp)
    8432:	       move.l 1cd66 <SysBase>,d0
    8438:	       movea.l d0,a6
    843a:	       movea.l 16(sp),a1
    843e:	       jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    8442:	       move.l 1cd72 <GfxBase>,12(sp)
    844a:	       move.l 1cd66 <SysBase>,d0
    8450:	       movea.l d0,a6
    8452:	       movea.l 12(sp),a1
    8456:	       jsr -414(a6)
    845a:	       moveq #0,d0
}
    845c:	       movem.l (sp)+,d2-d3/a6
    8460:	       lea 132(sp),sp
    8464:	       rts

00008466 <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    8466:	    lea -16(sp),sp
    846a:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    846c:	    moveq #8,d0
    846e:	    move.l d0,16(sp)
    8472:	    clr.l 12(sp)
    8476:	    move.l 1cd66 <SysBase>,d0
    847c:	    movea.l d0,a6
    847e:	    move.l 16(sp),d0
    8482:	    move.l 12(sp),d1
    8486:	    jsr -684(a6)
    848a:	    move.l d0,8(sp)
    848e:	    move.l 8(sp),d0
    8492:	    move.l d0,4(sp)
	if (!newStat) {
    8496:	,-- bne.s 84c6 <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    8498:	|   movea.l 1c6e4 <nowStatus>,a0
    849e:	|   move.l (a0),d0
    84a0:	|   movea.l 4(sp),a0
    84a4:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    84a8:	|   pea 18d2e <PutChar+0xd74>
    84ae:	|   jsr b8 <copyString>
    84b4:	|   addq.l #4,sp
    84b6:	|   movea.l 4(sp),a0
    84ba:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    84bc:	|   movea.l 1c6e4 <nowStatus>,a0
    84c2:	|   move.l 4(sp),(a0)
	}
}
    84c6:	'-> nop
    84c8:	    movea.l (sp)+,a6
    84ca:	    lea 16(sp),sp
    84ce:	    rts

000084d0 <clearStatusBar>:

void clearStatusBar () {
    84d0:	       lea -16(sp),sp
    84d4:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    84d6:	       movea.l 1c6e4 <nowStatus>,a0
    84dc:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    84e0:	       movea.l 1c6e4 <nowStatus>,a0
    84e6:	       moveq #-1,d0
    84e8:	       move.l d0,6(a0)
	while (stat) {
    84ec:	   ,-- bra.s 852c <clearStatusBar+0x5c>
		kill = stat;
    84ee:	,--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    84f4:	|  |   movea.l 16(sp),a0
    84f8:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    84fe:	|  |   movea.l 12(sp),a0
    8502:	|  |   move.l (a0),8(sp)
    8506:	|  |   move.l 1cd66 <SysBase>,d0
    850c:	|  |   movea.l d0,a6
    850e:	|  |   movea.l 8(sp),a1
    8512:	|  |   jsr -690(a6)
		FreeVec(kill);
    8516:	|  |   move.l 12(sp),4(sp)
    851c:	|  |   move.l 1cd66 <SysBase>,d0
    8522:	|  |   movea.l d0,a6
    8524:	|  |   movea.l 4(sp),a1
    8528:	|  |   jsr -690(a6)
	while (stat) {
    852c:	|  '-> tst.l 16(sp)
    8530:	'----- bne.s 84ee <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    8532:	       movea.l 1c6e4 <nowStatus>,a0
    8538:	       clr.l (a0)
}
    853a:	       nop
    853c:	       movea.l (sp)+,a6
    853e:	       lea 16(sp),sp
    8542:	       rts

00008544 <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    8544:	clr.l 1cd98 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    854a:	move.w #-1,1cd9c <mainStatus+0x4>
	mainStatus.litStatus = -1;
    8552:	moveq #-1,d0
    8554:	move.l d0,1cd9e <mainStatus+0x6>
	mainStatus.statusX = 10;
    855a:	moveq #10,d0
    855c:	move.l d0,1cda2 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    8562:	movea.l 1ccbe <winHeight>,a0
    8568:	lea -15(a0),a0
    856c:	move.l a0,d0
    856e:	move.l d0,1cda6 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    8574:	nop
    8576:	rts

00008578 <killLastStatus>:

void killLastStatus () {
    8578:	    lea -12(sp),sp
    857c:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    857e:	    movea.l 1c6e4 <nowStatus>,a0
    8584:	    move.l (a0),d0
    8586:	,-- beq.s 85d0 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    8588:	|   movea.l 1c6e4 <nowStatus>,a0
    858e:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    8592:	|   movea.l 1c6e4 <nowStatus>,a0
    8598:	|   movea.l 12(sp),a1
    859c:	|   move.l 4(a1),d0
    85a0:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    85a2:	|   movea.l 12(sp),a0
    85a6:	|   move.l (a0),8(sp)
    85aa:	|   move.l 1cd66 <SysBase>,d0
    85b0:	|   movea.l d0,a6
    85b2:	|   movea.l 8(sp),a1
    85b6:	|   jsr -690(a6)
		FreeVec(kill);
    85ba:	|   move.l 12(sp),4(sp)
    85c0:	|   move.l 1cd66 <SysBase>,d0
    85c6:	|   movea.l d0,a6
    85c8:	|   movea.l 4(sp),a1
    85cc:	|   jsr -690(a6)
	}
}
    85d0:	'-> nop
    85d2:	    movea.l (sp)+,a6
    85d4:	    lea 12(sp),sp
    85d8:	    rts

000085da <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    85da:	movea.l 1c6e4 <nowStatus>,a0
    85e0:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    85e6:	movea.l 1c6e4 <nowStatus>,a0
    85ec:	move.l 8(sp),14(a0)
}
    85f2:	nop
    85f4:	rts

000085f6 <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    85f6:	       lea -100(sp),sp
    85fa:	       move.l a6,-(sp)
    85fc:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    85fe:	       movea.l 1c6e4 <nowStatus>,a0
    8604:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    8608:	       movea.l 1c6e4 <nowStatus>,a0
    860e:	       move.w 4(a0),d0
    8612:	       move.w d0,d0
    8614:	       andi.l #65535,d0
    861a:	       move.l 112(sp),-(sp)
    861e:	       move.l d0,-(sp)
    8620:	       jsr 8d0 <put2bytes>
    8626:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    8628:	       movea.l 1c6e4 <nowStatus>,a0
    862e:	       move.l 6(a0),d0
    8632:	       move.l d0,d0
    8634:	       movea.w d0,a0
    8636:	       move.l 112(sp),-(sp)
    863a:	       move.l a0,-(sp)
    863c:	       jsr a9c <putSigned>
    8642:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    8644:	       movea.l 1c6e4 <nowStatus>,a0
    864a:	       move.l 10(a0),d0
    864e:	       move.l 112(sp),-(sp)
    8652:	       move.l d0,-(sp)
    8654:	       jsr 8d0 <put2bytes>
    865a:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    865c:	       movea.l 1c6e4 <nowStatus>,a0
    8662:	       move.l 14(a0),d0
    8666:	       move.l 112(sp),-(sp)
    866a:	       move.l d0,-(sp)
    866c:	       jsr 8d0 <put2bytes>
    8672:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    8674:	       move.l 112(sp),100(sp)
    867a:	       movea.l 1c6e4 <nowStatus>,a0
    8680:	       move.l 18(a0),96(sp)
    8686:	       move.l 1cd6e <DOSBase>,d0
    868c:	       movea.l d0,a6
    868e:	       move.l 100(sp),d1
    8692:	       move.l 96(sp),d2
    8696:	       jsr -312(a6)
    869a:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    869e:	       move.l 112(sp),88(sp)
    86a4:	       movea.l 1c6e4 <nowStatus>,a0
    86aa:	       move.l 22(a0),84(sp)
    86b0:	       move.l 1cd6e <DOSBase>,d0
    86b6:	       movea.l d0,a6
    86b8:	       move.l 88(sp),d1
    86bc:	       move.l 84(sp),d2
    86c0:	       jsr -312(a6)
    86c4:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    86c8:	       move.l 112(sp),76(sp)
    86ce:	       movea.l 1c6e4 <nowStatus>,a0
    86d4:	       move.l 26(a0),72(sp)
    86da:	       move.l 1cd6e <DOSBase>,d0
    86e0:	       movea.l d0,a6
    86e2:	       move.l 76(sp),d1
    86e6:	       move.l 72(sp),d2
    86ea:	       jsr -312(a6)
    86ee:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    86f2:	       move.l 112(sp),64(sp)
    86f8:	       movea.l 1c6e4 <nowStatus>,a0
    86fe:	       move.l 30(a0),60(sp)
    8704:	       move.l 1cd6e <DOSBase>,d0
    870a:	       movea.l d0,a6
    870c:	       move.l 64(sp),d1
    8710:	       move.l 60(sp),d2
    8714:	       jsr -312(a6)
    8718:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    871c:	       move.l 112(sp),52(sp)
    8722:	       movea.l 1c6e4 <nowStatus>,a0
    8728:	       move.l 34(a0),48(sp)
    872e:	       move.l 1cd6e <DOSBase>,d0
    8734:	       movea.l d0,a6
    8736:	       move.l 52(sp),d1
    873a:	       move.l 48(sp),d2
    873e:	       jsr -312(a6)
    8742:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    8746:	       move.l 112(sp),40(sp)
    874c:	       movea.l 1c6e4 <nowStatus>,a0
    8752:	       move.l 38(a0),36(sp)
    8758:	       move.l 1cd6e <DOSBase>,d0
    875e:	       movea.l d0,a6
    8760:	       move.l 40(sp),d1
    8764:	       move.l 36(sp),d2
    8768:	       jsr -312(a6)
    876c:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    8770:	   ,-- bra.s 87b4 <saveStatusBars+0x1be>
		FPutC (fp,1);
    8772:	,--|-> move.l 112(sp),16(sp)
    8778:	|  |   moveq #1,d0
    877a:	|  |   move.l d0,12(sp)
    877e:	|  |   move.l 1cd6e <DOSBase>,d0
    8784:	|  |   movea.l d0,a6
    8786:	|  |   move.l 16(sp),d1
    878a:	|  |   move.l 12(sp),d2
    878e:	|  |   jsr -312(a6)
    8792:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    8796:	|  |   movea.l 104(sp),a0
    879a:	|  |   move.l (a0),d0
    879c:	|  |   move.l 112(sp),-(sp)
    87a0:	|  |   move.l d0,-(sp)
    87a2:	|  |   jsr bd8 <writeString>
    87a8:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    87aa:	|  |   movea.l 104(sp),a0
    87ae:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    87b4:	|  '-> tst.l 104(sp)
    87b8:	'----- bne.s 8772 <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    87ba:	       move.l 112(sp),28(sp)
    87c0:	       clr.l 24(sp)
    87c4:	       move.l 1cd6e <DOSBase>,d0
    87ca:	       movea.l d0,a6
    87cc:	       move.l 28(sp),d1
    87d0:	       move.l 24(sp),d2
    87d4:	       jsr -312(a6)
    87d8:	       move.l d0,20(sp)
}
    87dc:	       nop
    87de:	       move.l (sp)+,d2
    87e0:	       movea.l (sp)+,a6
    87e2:	       lea 100(sp),sp
    87e6:	       rts

000087e8 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    87e8:	movea.l 1c6e4 <nowStatus>,a0
    87ee:	move.l 4(sp),6(a0)
}
    87f4:	nop
    87f6:	rts

000087f8 <setStatusBar>:

void setStatusBar (char * txt) {
    87f8:	    subq.l #4,sp
    87fa:	    move.l a6,-(sp)
    87fc:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    87fe:	    movea.l 1c6e4 <nowStatus>,a0
    8804:	    move.l (a0),d0
    8806:	,-- beq.s 883a <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    8808:	|   movea.l 1c6e4 <nowStatus>,a0
    880e:	|   movea.l (a0),a0
    8810:	|   move.l (a0),8(sp)
    8814:	|   move.l 1cd66 <SysBase>,d0
    881a:	|   movea.l d0,a6
    881c:	|   movea.l 8(sp),a1
    8820:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    8824:	|   movea.l 1c6e4 <nowStatus>,a0
    882a:	|   movea.l (a0),a2
    882c:	|   move.l 16(sp),-(sp)
    8830:	|   jsr b8 <copyString>
    8836:	|   addq.l #4,sp
    8838:	|   move.l d0,(a2)
	}
}
    883a:	'-> nop
    883c:	    movea.l (sp)+,a2
    883e:	    movea.l (sp)+,a6
    8840:	    addq.l #4,sp
    8842:	    rts

00008844 <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    8844:	       movea.l 1c6e4 <nowStatus>,a0
    884a:	       move.l (a0),d0
    884c:	,----- beq.s 885a <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    884e:	|      movea.l 1c6e4 <nowStatus>,a0
    8854:	|      movea.l (a0),a0
    8856:	|      move.l (a0),d0
    8858:	|  ,-- bra.s 8860 <statusBarText+0x1c>
	} else {
		return "";
    885a:	'--|-> move.l #101678,d0
	}
    8860:	   '-> rts

00008862 <killZBuffer>:

#define EMULATOR

struct zBufferData *zBuffer;

void killZBuffer () {
    8862:	       lea -12(sp),sp
    8866:	       move.l a6,-(sp)
	struct zBufferData *zbuffercursor =  zBuffer;
    8868:	       move.l 1cdc2 <zBuffer>,12(sp)

	while(zbuffercursor) {
    8870:	   ,-- bra.s 8898 <killZBuffer+0x36>
		struct zBufferData *deleteme = zbuffercursor;
    8872:	,--|-> move.l 12(sp),8(sp)
		zbuffercursor = zbuffercursor->nextPanel;
    8878:	|  |   movea.l 12(sp),a0
    887c:	|  |   move.l 24(a0),12(sp)
		FreeVec(deleteme);
    8882:	|  |   move.l 8(sp),4(sp)
    8888:	|  |   move.l 1cd66 <SysBase>,d0
    888e:	|  |   movea.l d0,a6
    8890:	|  |   movea.l 4(sp),a1
    8894:	|  |   jsr -690(a6)
	while(zbuffercursor) {
    8898:	|  '-> tst.l 12(sp)
    889c:	'----- bne.s 8872 <killZBuffer+0x10>
	}
	zBuffer = NULL;
    889e:	       clr.l 1cdc2 <zBuffer>
}
    88a4:	       nop
    88a6:	       movea.l (sp)+,a6
    88a8:	       lea 12(sp),sp
    88ac:	       rts

000088ae <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    88ae:	                lea -304(sp),sp
    88b2:	                movem.l d2-d4/a2/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    88b6:	                clr.l 314(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();	
    88ba:	                jsr 8862 <killZBuffer>
	
	if (! openFileFromNum (y)) return FALSE;
    88c0:	                move.l 328(sp),d0
    88c4:	                move.l d0,-(sp)
    88c6:	                jsr 794c <openFileFromNum>
    88cc:	                addq.l #4,sp
    88ce:	                tst.l d0
    88d0:	            ,-- bne.s 88d8 <setZBuffer+0x2a>
    88d2:	            |   clr.w d0
    88d4:	,-----------|-- bra.w 8b96 <setZBuffer+0x2e8>
	
	if (FGetC (bigDataFile) != 'a' || FGetC (bigDataFile) != 's' || FGetC (bigDataFile) != 'z' || FGetC (bigDataFile) != 'b') 
    88d8:	|           '-> move.l 1cd4e <bigDataFile>,310(sp)
    88e0:	|               move.l 1cd6e <DOSBase>,d0
    88e6:	|               movea.l d0,a6
    88e8:	|               move.l 310(sp),d1
    88ec:	|               jsr -306(a6)
    88f0:	|               move.l d0,306(sp)
    88f4:	|               move.l 306(sp),d0
    88f8:	|               moveq #97,d1
    88fa:	|               cmp.l d0,d1
    88fc:	|        ,----- bne.s 8970 <setZBuffer+0xc2>
    88fe:	|        |      move.l 1cd4e <bigDataFile>,302(sp)
    8906:	|        |      move.l 1cd6e <DOSBase>,d0
    890c:	|        |      movea.l d0,a6
    890e:	|        |      move.l 302(sp),d1
    8912:	|        |      jsr -306(a6)
    8916:	|        |      move.l d0,298(sp)
    891a:	|        |      move.l 298(sp),d0
    891e:	|        |      moveq #115,d1
    8920:	|        |      cmp.l d0,d1
    8922:	|        +----- bne.s 8970 <setZBuffer+0xc2>
    8924:	|        |      move.l 1cd4e <bigDataFile>,294(sp)
    892c:	|        |      move.l 1cd6e <DOSBase>,d0
    8932:	|        |      movea.l d0,a6
    8934:	|        |      move.l 294(sp),d1
    8938:	|        |      jsr -306(a6)
    893c:	|        |      move.l d0,290(sp)
    8940:	|        |      move.l 290(sp),d0
    8944:	|        |      moveq #122,d1
    8946:	|        |      cmp.l d0,d1
    8948:	|        +----- bne.s 8970 <setZBuffer+0xc2>
    894a:	|        |      move.l 1cd4e <bigDataFile>,286(sp)
    8952:	|        |      move.l 1cd6e <DOSBase>,d0
    8958:	|        |      movea.l d0,a6
    895a:	|        |      move.l 286(sp),d1
    895e:	|        |      jsr -306(a6)
    8962:	|        |      move.l d0,282(sp)
    8966:	|        |      move.l 282(sp),d0
    896a:	|        |      moveq #98,d1
    896c:	|        |      cmp.l d0,d1
    896e:	|        |  ,-- beq.s 8984 <setZBuffer+0xd6>
	{ 
		 KPrintF("Not a Z-buffer file");
    8970:	|        '--|-> pea 19359 <PutChar+0x139f>
    8976:	|           |   jsr 17518 <KPrintF>
    897c:	|           |   addq.l #4,sp
		 return FALSE;
    897e:	|           |   clr.w d0
    8980:	+-----------|-- bra.w 8b96 <setZBuffer+0x2e8>
	}

	UWORD numelements = FGetC(bigDataFile);
    8984:	|           '-> move.l 1cd4e <bigDataFile>,278(sp)
    898c:	|               move.l 1cd6e <DOSBase>,d0
    8992:	|               movea.l d0,a6
    8994:	|               move.l 278(sp),d1
    8998:	|               jsr -306(a6)
    899c:	|               move.l d0,274(sp)
    89a0:	|               move.l 274(sp),d0
    89a4:	|               move.w d0,322(sp)

	UWORD size;
	UWORD count;

	zBuffer = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    89a8:	|               moveq #28,d0
    89aa:	|               move.l d0,270(sp)
    89ae:	|               clr.l 266(sp)
    89b2:	|               move.l 1cd66 <SysBase>,d0
    89b8:	|               movea.l d0,a6
    89ba:	|               move.l 270(sp),d0
    89be:	|               move.l 266(sp),d1
    89c2:	|               jsr -684(a6)
    89c6:	|               move.l d0,262(sp)
    89ca:	|               move.l 262(sp),d0
    89ce:	|               move.l d0,1cdc2 <zBuffer>

	struct zBufferData *currentitem;
	currentitem = zBuffer;
    89d4:	|               move.l 1cdc2 <zBuffer>,318(sp)

	while(numelements--)
    89dc:	|     ,-------- bra.w 8b7c <setZBuffer+0x2ce>
	{		
		currentitem->width = get2bytes (bigDataFile);
    89e0:	|  ,--|-------> move.l 1cd4e <bigDataFile>,d0
    89e6:	|  |  |         move.l d0,-(sp)
    89e8:	|  |  |         jsr 6bc <get2bytes>
    89ee:	|  |  |         addq.l #4,sp
    89f0:	|  |  |         movea.l 318(sp),a0
    89f4:	|  |  |         move.l d0,(a0)
		currentitem->height = get2bytes (bigDataFile);
    89f6:	|  |  |         move.l 1cd4e <bigDataFile>,d0
    89fc:	|  |  |         move.l d0,-(sp)
    89fe:	|  |  |         jsr 6bc <get2bytes>
    8a04:	|  |  |         addq.l #4,sp
    8a06:	|  |  |         movea.l 318(sp),a0
    8a0a:	|  |  |         move.l d0,4(a0)

		currentitem->topx = get2bytes (bigDataFile);
    8a0e:	|  |  |         move.l 1cd4e <bigDataFile>,d0
    8a14:	|  |  |         move.l d0,-(sp)
    8a16:	|  |  |         jsr 6bc <get2bytes>
    8a1c:	|  |  |         addq.l #4,sp
    8a1e:	|  |  |         movea.l 318(sp),a0
    8a22:	|  |  |         move.l d0,8(a0)
		currentitem->topy = get2bytes (bigDataFile);
    8a26:	|  |  |         move.l 1cd4e <bigDataFile>,d0
    8a2c:	|  |  |         move.l d0,-(sp)
    8a2e:	|  |  |         jsr 6bc <get2bytes>
    8a34:	|  |  |         addq.l #4,sp
    8a36:	|  |  |         movea.l 318(sp),a0
    8a3a:	|  |  |         move.l d0,12(a0)
		currentitem->yz = get2bytes (bigDataFile);
    8a3e:	|  |  |         move.l 1cd4e <bigDataFile>,d0
    8a44:	|  |  |         move.l d0,-(sp)
    8a46:	|  |  |         jsr 6bc <get2bytes>
    8a4c:	|  |  |         addq.l #4,sp
    8a4e:	|  |  |         movea.l 318(sp),a0
    8a52:	|  |  |         move.l d0,16(a0)

		UWORD size = currentitem->width * currentitem->height / 8;
    8a56:	|  |  |         movea.l 318(sp),a0
    8a5a:	|  |  |         move.l (a0),d0
    8a5c:	|  |  |         movea.l 318(sp),a0
    8a60:	|  |  |         move.l 4(a0),d1
    8a64:	|  |  |         move.l d1,-(sp)
    8a66:	|  |  |         move.l d0,-(sp)
    8a68:	|  |  |         jsr 17ea4 <__mulsi3>
    8a6e:	|  |  |         addq.l #8,sp
    8a70:	|  |  |         tst.l d0
    8a72:	|  |  |     ,-- bge.s 8a76 <setZBuffer+0x1c8>
    8a74:	|  |  |     |   addq.l #7,d0
    8a76:	|  |  |     '-> asr.l #3,d0
    8a78:	|  |  |         move.w d0,260(sp)
		currentitem->bitplane = AllocVec( size, MEMF_CHIP);
    8a7c:	|  |  |         moveq #0,d0
    8a7e:	|  |  |         move.w 260(sp),d0
    8a82:	|  |  |         move.l d0,256(sp)
    8a86:	|  |  |         moveq #2,d1
    8a88:	|  |  |         move.l d1,252(sp)
    8a8c:	|  |  |         move.l 1cd66 <SysBase>,d0
    8a92:	|  |  |         movea.l d0,a6
    8a94:	|  |  |         move.l 256(sp),d0
    8a98:	|  |  |         move.l 252(sp),d1
    8a9c:	|  |  |         jsr -684(a6)
    8aa0:	|  |  |         move.l d0,248(sp)
    8aa4:	|  |  |         move.l 248(sp),d0
    8aa8:	|  |  |         movea.l 318(sp),a0
    8aac:	|  |  |         move.l d0,20(a0)
		count = FRead( bigDataFile, currentitem->bitplane, 1, size);				
    8ab0:	|  |  |         move.l 1cd4e <bigDataFile>,244(sp)
    8ab8:	|  |  |         movea.l 318(sp),a0
    8abc:	|  |  |         move.l 20(a0),240(sp)
    8ac2:	|  |  |         moveq #1,d0
    8ac4:	|  |  |         move.l d0,236(sp)
    8ac8:	|  |  |         moveq #0,d0
    8aca:	|  |  |         move.w 260(sp),d0
    8ace:	|  |  |         move.l d0,232(sp)
    8ad2:	|  |  |         move.l 1cd6e <DOSBase>,d0
    8ad8:	|  |  |         movea.l d0,a6
    8ada:	|  |  |         move.l 244(sp),d1
    8ade:	|  |  |         move.l 240(sp),d2
    8ae2:	|  |  |         move.l 236(sp),d3
    8ae6:	|  |  |         move.l 232(sp),d4
    8aea:	|  |  |         jsr -324(a6)
    8aee:	|  |  |         move.l d0,228(sp)
    8af2:	|  |  |         move.l 228(sp),d0
    8af6:	|  |  |         move.w d0,226(sp)

		if(numelements > 0) {
    8afa:	|  |  |         tst.w 322(sp)
    8afe:	|  |  |  ,----- beq.s 8b3a <setZBuffer+0x28c>
			currentitem->nextPanel = AllocVec(sizeof(struct zBufferData), MEMF_ANY);
    8b00:	|  |  |  |      moveq #28,d1
    8b02:	|  |  |  |      move.l d1,222(sp)
    8b06:	|  |  |  |      clr.l 218(sp)
    8b0a:	|  |  |  |      move.l 1cd66 <SysBase>,d0
    8b10:	|  |  |  |      movea.l d0,a6
    8b12:	|  |  |  |      move.l 222(sp),d0
    8b16:	|  |  |  |      move.l 218(sp),d1
    8b1a:	|  |  |  |      jsr -684(a6)
    8b1e:	|  |  |  |      move.l d0,214(sp)
    8b22:	|  |  |  |      move.l 214(sp),d0
    8b26:	|  |  |  |      movea.l 318(sp),a0
    8b2a:	|  |  |  |      move.l d0,24(a0)
			currentitem = currentitem->nextPanel;
    8b2e:	|  |  |  |      movea.l 318(sp),a0
    8b32:	|  |  |  |      move.l 24(a0),318(sp)
    8b38:	|  |  |  |  ,-- bra.s 8b42 <setZBuffer+0x294>
		} else {
			currentitem->nextPanel = NULL;
    8b3a:	|  |  |  '--|-> movea.l 318(sp),a0
    8b3e:	|  |  |     |   clr.l 24(a0)
		}
		#ifdef EMULATOR  
  			debug_register_bitmap(currentitem->bitplane, "zBuffer.bpl", currentitem->width, currentitem->height , 1, 0);
    8b42:	|  |  |     '-> movea.l 318(sp),a0
    8b46:	|  |  |         move.l 4(a0),d0
    8b4a:	|  |  |         move.l d0,d0
    8b4c:	|  |  |         movea.w d0,a1
    8b4e:	|  |  |         movea.l 318(sp),a0
    8b52:	|  |  |         move.l (a0),d0
    8b54:	|  |  |         move.l d0,d0
    8b56:	|  |  |         movea.w d0,a0
    8b58:	|  |  |         movea.l 318(sp),a2
    8b5c:	|  |  |         move.l 20(a2),d0
    8b60:	|  |  |         clr.l -(sp)
    8b62:	|  |  |         pea 1 <_start+0x1>
    8b66:	|  |  |         move.l a1,-(sp)
    8b68:	|  |  |         move.l a0,-(sp)
    8b6a:	|  |  |         pea 1936d <PutChar+0x13b3>
    8b70:	|  |  |         move.l d0,-(sp)
    8b72:	|  |  |         jsr 17600 <debug_register_bitmap>
    8b78:	|  |  |         lea 24(sp),sp
	while(numelements--)
    8b7c:	|  |  '-------> move.w 322(sp),d0
    8b80:	|  |            move.w d0,d1
    8b82:	|  |            subq.w #1,d1
    8b84:	|  |            move.w d1,322(sp)
    8b88:	|  |            tst.w d0
    8b8a:	|  '----------- bne.w 89e0 <setZBuffer+0x132>
		#endif  
		
	}


	finishAccess ();
    8b8e:	|               jsr 7844 <finishAccess>
	
	return TRUE;
    8b94:	|               moveq #1,d0
}
    8b96:	'-------------> movem.l (sp)+,d2-d4/a2/a6
    8b9a:	                lea 304(sp),sp
    8b9e:	                rts

00008ba0 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8ba0:	          lea -32(sp),sp
    8ba4:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    8ba6:	          move.l 40(sp),d0
    8baa:	          addq.l #8,d0
    8bac:	          move.l d0,24(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8bb0:	          clr.l 32(sp)
    8bb4:	   ,----- bra.s 8bfa <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    8bb6:	,--|----> movea.l 24(sp),a0
    8bba:	|  |      movea.l 8(a0),a0
    8bbe:	|  |      move.l 32(sp),d1
    8bc2:	|  |      move.l d1,d0
    8bc4:	|  |      lsl.l #3,d0
    8bc6:	|  |      sub.l d1,d0
    8bc8:	|  |      add.l d0,d0
    8bca:	|  |      add.l d0,d0
    8bcc:	|  |      adda.l d0,a0
    8bce:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8bd2:	|  |      movea.l 8(sp),a0
    8bd6:	|  |      move.l 24(a0),d0
    8bda:	|  |  ,-- beq.s 8bf6 <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8bdc:	|  |  |   movea.l 8(sp),a0
    8be0:	|  |  |   move.l 24(a0),4(sp)
    8be6:	|  |  |   move.l 1cd66 <SysBase>,d0
    8bec:	|  |  |   movea.l d0,a6
    8bee:	|  |  |   movea.l 4(sp),a1
    8bf2:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8bf6:	|  |  '-> addq.l #1,32(sp)
    8bfa:	|  '----> movea.l 24(sp),a0
    8bfe:	|         move.l (a0),d0
    8c00:	|         cmp.l 32(sp),d0
    8c04:	'-------- bgt.s 8bb6 <forgetSpriteBank+0x16>
		}		
	}

	FreeVec(spritebanktoforget->sprites);	
    8c06:	          movea.l 24(sp),a0
    8c0a:	          move.l 8(a0),20(sp)
    8c10:	          move.l 1cd66 <SysBase>,d0
    8c16:	          movea.l d0,a6
    8c18:	          movea.l 20(sp),a1
    8c1c:	          jsr -690(a6)
	
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    8c20:	          move.l 1ce7a <allLoadedBanks>,28(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8c28:	      ,-- bra.s 8c34 <forgetSpriteBank+0x94>
	{
		precedingbank = precedingbank->next;
    8c2a:	   ,--|-> movea.l 28(sp),a0
    8c2e:	   |  |   move.l 22(a0),28(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    8c34:	   |  '-> movea.l 28(sp),a0
    8c38:	   |      movea.l 22(a0),a0
    8c3c:	   |      move.l (a0),d1
    8c3e:	   |      movea.l 40(sp),a0
    8c42:	   |      move.l (a0),d0
    8c44:	   |      cmp.l d1,d0
    8c46:	   |  ,-- beq.s 8c4e <forgetSpriteBank+0xae>
    8c48:	   |  |   tst.l 28(sp)
    8c4c:	   '--|-- bne.s 8c2a <forgetSpriteBank+0x8a>
	}	

	if(precedingbank)
    8c4e:	      '-> tst.l 28(sp)
    8c52:	   ,----- beq.s 8c7c <forgetSpriteBank+0xdc>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    8c54:	   |      movea.l 40(sp),a0
    8c58:	   |      move.l 22(a0),d0
    8c5c:	   |      movea.l 28(sp),a0
    8c60:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    8c64:	   |      move.l 40(sp),12(sp)
    8c6a:	   |      move.l 1cd66 <SysBase>,d0
    8c70:	   |      movea.l d0,a6
    8c72:	   |      movea.l 12(sp),a1
    8c76:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8c7a:	   |  ,-- bra.s 8ca2 <forgetSpriteBank+0x102>
		allLoadedBanks = allLoadedBanks->next;
    8c7c:	   '--|-> movea.l 1ce7a <allLoadedBanks>,a0
    8c82:	      |   move.l 22(a0),d0
    8c86:	      |   move.l d0,1ce7a <allLoadedBanks>
		FreeVec( forgetme);
    8c8c:	      |   move.l 40(sp),16(sp)
    8c92:	      |   move.l 1cd66 <SysBase>,d0
    8c98:	      |   movea.l d0,a6
    8c9a:	      |   movea.l 16(sp),a1
    8c9e:	      |   jsr -690(a6)
}
    8ca2:	      '-> nop
    8ca4:	          movea.l (sp)+,a6
    8ca6:	          lea 32(sp),sp
    8caa:	          rts

00008cac <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere) {
    8cac:	                      lea -84(sp),sp
    8cb0:	                      movem.l d2-d4/a2/a6,-(sp)

	KPrintF("loadSpriteBank: Starting\n");
    8cb4:	                      pea 19379 <PutChar+0x13bf>
    8cba:	                      jsr 17518 <KPrintF>
    8cc0:	                      addq.l #4,sp

	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8cc2:	                      clr.l 94(sp)
    8cc6:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8cca:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8cce:	                      move.l 108(sp),-(sp)
    8cd2:	                      jsr 794c <openFileFromNum>
    8cd8:	                      addq.l #4,sp
    8cda:	                      tst.l d0
    8cdc:	                  ,-- bne.s 8cf2 <loadSpriteBank+0x46>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8cde:	                  |   pea 19393 <PutChar+0x13d9>
    8ce4:	                  |   jsr 17518 <KPrintF>
    8cea:	                  |   addq.l #4,sp
		return FALSE;
    8cec:	                  |   clr.w d0
    8cee:	,-----------------|-- bra.w 90e6 <loadSpriteBank+0x43a>
	}

	get2bytes(bigDataFile); // Ignore first 2 bytes
    8cf2:	|                 '-> move.l 1cd4e <bigDataFile>,d0
    8cf8:	|                     move.l d0,-(sp)
    8cfa:	|                     jsr 6bc <get2bytes>
    8d00:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    8d02:	|                     move.l 1cd4e <bigDataFile>,82(sp)
    8d0a:	|                     move.l 1cd6e <DOSBase>,d0
    8d10:	|                     movea.l d0,a6
    8d12:	|                     move.l 82(sp),d1
    8d16:	|                     jsr -306(a6)
    8d1a:	|                     move.l d0,78(sp)
    8d1e:	|                     move.l 78(sp),d0
    8d22:	|                     movea.l 112(sp),a0
    8d26:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    8d2a:	|                     move.l 1cd4e <bigDataFile>,d0
    8d30:	|                     move.l d0,-(sp)
    8d32:	|                     jsr 6bc <get2bytes>
    8d38:	|                     addq.l #4,sp
    8d3a:	|                     move.l d0,74(sp)

	if (total <= 0) {
    8d3e:	|                 ,-- bgt.s 8d54 <loadSpriteBank+0xa8>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8d40:	|                 |   pea 193c1 <PutChar+0x1407>
    8d46:	|                 |   jsr 17518 <KPrintF>
    8d4c:	|                 |   addq.l #4,sp
		return FALSE;
    8d4e:	|                 |   clr.w d0
    8d50:	+-----------------|-- bra.w 90e6 <loadSpriteBank+0x43a>
	}
	if (loadhere->type == 3)
    8d54:	|                 '-> movea.l 112(sp),a0
    8d58:	|                     move.l 4(a0),d0
    8d5c:	|                     moveq #3,d1
    8d5e:	|                     cmp.l d0,d1
    8d60:	|                 ,-- bne.s 8d6e <loadSpriteBank+0xc2>
	{
		loadhere->isFont = TRUE;
    8d62:	|                 |   movea.l 112(sp),a0
    8d66:	|                 |   move.w #1,12(a0)
    8d6c:	|              ,--|-- bra.s 8d90 <loadSpriteBank+0xe4>
	}
	else if (loadhere->type > 3) {
    8d6e:	|              |  '-> movea.l 112(sp),a0
    8d72:	|              |      move.l 4(a0),d0
    8d76:	|              |      moveq #3,d1
    8d78:	|              |      cmp.l d0,d1
    8d7a:	|              +----- bge.s 8d90 <loadSpriteBank+0xe4>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8d7c:	|              |      pea 19401 <PutChar+0x1447>
    8d82:	|              |      jsr 17518 <KPrintF>
    8d88:	|              |      addq.l #4,sp
		return FALSE;
    8d8a:	|              |      clr.w d0
    8d8c:	+--------------|----- bra.w 90e6 <loadSpriteBank+0x43a>
	}

	loadhere->total = total;
    8d90:	|              '----> movea.l 112(sp),a0
    8d94:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    8d98:	|                     move.l 74(sp),d1
    8d9c:	|                     move.l d1,d0
    8d9e:	|                     lsl.l #3,d0
    8da0:	|                     sub.l d1,d0
    8da2:	|                     add.l d0,d0
    8da4:	|                     add.l d0,d0
    8da6:	|                     move.l d0,70(sp)
    8daa:	|                     clr.l 66(sp)
    8dae:	|                     move.l 1cd66 <SysBase>,d0
    8db4:	|                     movea.l d0,a6
    8db6:	|                     move.l 70(sp),d0
    8dba:	|                     move.l 66(sp),d1
    8dbe:	|                     jsr -684(a6)
    8dc2:	|                     move.l d0,62(sp)
    8dc6:	|                     move.l 62(sp),d0
    8dca:	|                     movea.l 112(sp),a0
    8dce:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8dd2:	|                     movea.l 112(sp),a0
    8dd6:	|                     move.l 8(a0),d0
    8dda:	|                 ,-- bne.s 8de2 <loadSpriteBank+0x136>
    8ddc:	|                 |   clr.w d0
    8dde:	+-----------------|-- bra.w 90e6 <loadSpriteBank+0x43a>
	
	startIndex = 1;
    8de2:	|                 '-> moveq #1,d0
    8de4:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    8de8:	|                     clr.l 100(sp)
    8dec:	|     ,-------------- bra.w 90c4 <loadSpriteBank+0x418>

		UWORD width = get2bytes(bigDataFile);
    8df0:	|  ,--|-------------> move.l 1cd4e <bigDataFile>,d0
    8df6:	|  |  |               move.l d0,-(sp)
    8df8:	|  |  |               jsr 6bc <get2bytes>
    8dfe:	|  |  |               addq.l #4,sp
    8e00:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    8e04:	|  |  |               movea.l 112(sp),a0
    8e08:	|  |  |               movea.l 8(a0),a0
    8e0c:	|  |  |               move.l 100(sp),d1
    8e10:	|  |  |               move.l d1,d0
    8e12:	|  |  |               lsl.l #3,d0
    8e14:	|  |  |               sub.l d1,d0
    8e16:	|  |  |               add.l d0,d0
    8e18:	|  |  |               add.l d0,d0
    8e1a:	|  |  |               adda.l d0,a0
    8e1c:	|  |  |               moveq #0,d0
    8e1e:	|  |  |               move.w 60(sp),d0
    8e22:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    8e24:	|  |  |               movea.l 1cd4e <bigDataFile>,a1
    8e2a:	|  |  |               movea.l 112(sp),a0
    8e2e:	|  |  |               movea.l 8(a0),a0
    8e32:	|  |  |               move.l 100(sp),d1
    8e36:	|  |  |               move.l d1,d0
    8e38:	|  |  |               lsl.l #3,d0
    8e3a:	|  |  |               sub.l d1,d0
    8e3c:	|  |  |               add.l d0,d0
    8e3e:	|  |  |               add.l d0,d0
    8e40:	|  |  |               lea (0,a0,d0.l),a2
    8e44:	|  |  |               move.l a1,-(sp)
    8e46:	|  |  |               jsr 6bc <get2bytes>
    8e4c:	|  |  |               addq.l #4,sp
    8e4e:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    8e52:	|  |  |               movea.l 1cd4e <bigDataFile>,a1
    8e58:	|  |  |               movea.l 112(sp),a0
    8e5c:	|  |  |               movea.l 8(a0),a0
    8e60:	|  |  |               move.l 100(sp),d1
    8e64:	|  |  |               move.l d1,d0
    8e66:	|  |  |               lsl.l #3,d0
    8e68:	|  |  |               sub.l d1,d0
    8e6a:	|  |  |               add.l d0,d0
    8e6c:	|  |  |               add.l d0,d0
    8e6e:	|  |  |               lea (0,a0,d0.l),a2
    8e72:	|  |  |               move.l a1,-(sp)
    8e74:	|  |  |               jsr 6bc <get2bytes>
    8e7a:	|  |  |               addq.l #4,sp
    8e7c:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8e80:	|  |  |               movea.l 1cd4e <bigDataFile>,a1
    8e86:	|  |  |               movea.l 112(sp),a0
    8e8a:	|  |  |               movea.l 8(a0),a0
    8e8e:	|  |  |               move.l 100(sp),d1
    8e92:	|  |  |               move.l d1,d0
    8e94:	|  |  |               lsl.l #3,d0
    8e96:	|  |  |               sub.l d1,d0
    8e98:	|  |  |               add.l d0,d0
    8e9a:	|  |  |               add.l d0,d0
    8e9c:	|  |  |               lea (0,a0,d0.l),a2
    8ea0:	|  |  |               move.l a1,-(sp)
    8ea2:	|  |  |               jsr 6bc <get2bytes>
    8ea8:	|  |  |               addq.l #4,sp
    8eaa:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8eae:	|  |  |               movea.l 112(sp),a0
    8eb2:	|  |  |               move.l 4(a0),d0
    8eb6:	|  |  |               moveq #3,d1
    8eb8:	|  |  |               cmp.l d0,d1
    8eba:	|  |  |     ,-------- beq.w 8f56 <loadSpriteBank+0x2aa>
    8ebe:	|  |  |     |         moveq #3,d1
    8ec0:	|  |  |     |         cmp.l d0,d1
    8ec2:	|  |  |  ,--|-------- blt.w 8ffc <loadSpriteBank+0x350>
    8ec6:	|  |  |  |  |         moveq #1,d1
    8ec8:	|  |  |  |  |         cmp.l d0,d1
    8eca:	|  |  |  |  |     ,-- beq.s 8ed6 <loadSpriteBank+0x22a>
    8ecc:	|  |  |  |  |     |   moveq #2,d1
    8ece:	|  |  |  |  |     |   cmp.l d0,d1
    8ed0:	|  |  |  |  |  ,--|-- beq.s 8f02 <loadSpriteBank+0x256>
    8ed2:	|  |  |  +--|--|--|-- bra.w 8ffc <loadSpriteBank+0x350>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    8ed6:	|  |  |  |  |  |  '-> movea.l 112(sp),a0
    8eda:	|  |  |  |  |  |      movea.l 8(a0),a0
    8ede:	|  |  |  |  |  |      move.l 100(sp),d1
    8ee2:	|  |  |  |  |  |      move.l d1,d0
    8ee4:	|  |  |  |  |  |      lsl.l #3,d0
    8ee6:	|  |  |  |  |  |      sub.l d1,d0
    8ee8:	|  |  |  |  |  |      add.l d0,d0
    8eea:	|  |  |  |  |  |      add.l d0,d0
    8eec:	|  |  |  |  |  |      adda.l d0,a0
    8eee:	|  |  |  |  |  |      move.l 4(a0),d0
    8ef2:	|  |  |  |  |  |      addq.l #2,d0
    8ef4:	|  |  |  |  |  |      move.l d0,d0
    8ef6:	|  |  |  |  |  |      add.w d0,d0
    8ef8:	|  |  |  |  |  |      add.w d0,d0
    8efa:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    8efe:	|  |  |  +--|--|----- bra.w 8ffc <loadSpriteBank+0x350>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    8f02:	|  |  |  |  |  '----> movea.l 112(sp),a0
    8f06:	|  |  |  |  |         movea.l 8(a0),a0
    8f0a:	|  |  |  |  |         move.l 100(sp),d1
    8f0e:	|  |  |  |  |         move.l d1,d0
    8f10:	|  |  |  |  |         lsl.l #3,d0
    8f12:	|  |  |  |  |         sub.l d1,d0
    8f14:	|  |  |  |  |         add.l d0,d0
    8f16:	|  |  |  |  |         add.l d0,d0
    8f18:	|  |  |  |  |         adda.l d0,a0
    8f1a:	|  |  |  |  |         move.l (a0),d0
    8f1c:	|  |  |  |  |     ,-- bpl.s 8f20 <loadSpriteBank+0x274>
    8f1e:	|  |  |  |  |     |   addq.l #7,d0
    8f20:	|  |  |  |  |     '-> asr.l #3,d0
    8f22:	|  |  |  |  |         move.l d0,d2
    8f24:	|  |  |  |  |         movea.l 112(sp),a0
    8f28:	|  |  |  |  |         movea.l 8(a0),a0
    8f2c:	|  |  |  |  |         move.l 100(sp),d1
    8f30:	|  |  |  |  |         move.l d1,d0
    8f32:	|  |  |  |  |         lsl.l #3,d0
    8f34:	|  |  |  |  |         sub.l d1,d0
    8f36:	|  |  |  |  |         add.l d0,d0
    8f38:	|  |  |  |  |         add.l d0,d0
    8f3a:	|  |  |  |  |         adda.l d0,a0
    8f3c:	|  |  |  |  |         move.l 4(a0),d0
    8f40:	|  |  |  |  |         move.l d0,d0
    8f42:	|  |  |  |  |         move.w d2,d1
    8f44:	|  |  |  |  |         muls.w d0,d1
    8f46:	|  |  |  |  |         move.w d1,d0
    8f48:	|  |  |  |  |         add.w d0,d0
    8f4a:	|  |  |  |  |         add.w d1,d0
    8f4c:	|  |  |  |  |         add.w d0,d0
    8f4e:	|  |  |  |  |         move.w d0,98(sp)
				break;
    8f52:	|  |  |  +--|-------- bra.w 8ffc <loadSpriteBank+0x350>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    8f56:	|  |  |  |  '-------> movea.l 112(sp),a0
    8f5a:	|  |  |  |            movea.l 8(a0),a0
    8f5e:	|  |  |  |            move.l 100(sp),d1
    8f62:	|  |  |  |            move.l d1,d0
    8f64:	|  |  |  |            lsl.l #3,d0
    8f66:	|  |  |  |            sub.l d1,d0
    8f68:	|  |  |  |            add.l d0,d0
    8f6a:	|  |  |  |            add.l d0,d0
    8f6c:	|  |  |  |            adda.l d0,a0
    8f6e:	|  |  |  |            move.l (a0),d0
    8f70:	|  |  |  |            andi.l #-2147483633,d0
    8f76:	|  |  |  |        ,-- bpl.s 8f80 <loadSpriteBank+0x2d4>
    8f78:	|  |  |  |        |   subq.l #1,d0
    8f7a:	|  |  |  |        |   moveq #-16,d1
    8f7c:	|  |  |  |        |   or.l d1,d0
    8f7e:	|  |  |  |        |   addq.l #1,d0
    8f80:	|  |  |  |        '-> tst.l d0
    8f82:	|  |  |  |     ,----- ble.s 8f88 <loadSpriteBank+0x2dc>
    8f84:	|  |  |  |     |      moveq #2,d0
    8f86:	|  |  |  |     |  ,-- bra.s 8f8a <loadSpriteBank+0x2de>
    8f88:	|  |  |  |     '--|-> clr.w d0
    8f8a:	|  |  |  |        '-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8f8e:	|  |  |  |            movea.l 112(sp),a0
    8f92:	|  |  |  |            movea.l 8(a0),a0
    8f96:	|  |  |  |            move.l 100(sp),d1
    8f9a:	|  |  |  |            move.l d1,d0
    8f9c:	|  |  |  |            lsl.l #3,d0
    8f9e:	|  |  |  |            sub.l d1,d0
    8fa0:	|  |  |  |            add.l d0,d0
    8fa2:	|  |  |  |            add.l d0,d0
    8fa4:	|  |  |  |            adda.l d0,a0
    8fa6:	|  |  |  |            move.l (a0),d0
    8fa8:	|  |  |  |            movea.l d0,a0
    8faa:	|  |  |  |            cmpa.w #0,a0
    8fae:	|  |  |  |        ,-- bge.s 8fb4 <loadSpriteBank+0x308>
    8fb0:	|  |  |  |        |   lea 15(a0),a0
    8fb4:	|  |  |  |        '-> move.l a0,d0
    8fb6:	|  |  |  |            asr.l #4,d0
    8fb8:	|  |  |  |            add.l d0,d0
    8fba:	|  |  |  |            move.l d0,d1
    8fbc:	|  |  |  |            moveq #0,d0
    8fbe:	|  |  |  |            move.w 58(sp),d0
    8fc2:	|  |  |  |            add.l d1,d0
    8fc4:	|  |  |  |            move.l d0,d2
    8fc6:	|  |  |  |            movea.l 112(sp),a0
    8fca:	|  |  |  |            movea.l 8(a0),a0
    8fce:	|  |  |  |            move.l 100(sp),d1
    8fd2:	|  |  |  |            move.l d1,d0
    8fd4:	|  |  |  |            lsl.l #3,d0
    8fd6:	|  |  |  |            sub.l d1,d0
    8fd8:	|  |  |  |            add.l d0,d0
    8fda:	|  |  |  |            add.l d0,d0
    8fdc:	|  |  |  |            adda.l d0,a0
    8fde:	|  |  |  |            move.l 4(a0),d0
    8fe2:	|  |  |  |            move.l d0,d0
    8fe4:	|  |  |  |            move.w d2,d1
    8fe6:	|  |  |  |            muls.w d0,d1
    8fe8:	|  |  |  |            move.w d1,98(sp)
				if(size > 100)
    8fec:	|  |  |  |            cmpi.w #100,98(sp)
    8ff2:	|  |  |  |        ,-- bls.s 8ffa <loadSpriteBank+0x34e>
				{
					UWORD br1 = 1;
    8ff4:	|  |  |  |        |   move.w #1,56(sp)
				}
				break;
    8ffa:	|  |  |  |        '-> nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8ffc:	|  |  |  '----------> moveq #0,d0
    8ffe:	|  |  |               move.w 98(sp),d0
    9002:	|  |  |               add.l d0,d0
    9004:	|  |  |               move.l d0,52(sp)
    9008:	|  |  |               moveq #2,d0
    900a:	|  |  |               move.l d0,48(sp)
    900e:	|  |  |               move.l 1cd66 <SysBase>,d0
    9014:	|  |  |               movea.l d0,a6
    9016:	|  |  |               move.l 52(sp),d0
    901a:	|  |  |               move.l 48(sp),d1
    901e:	|  |  |               jsr -684(a6)
    9022:	|  |  |               move.l d0,44(sp)
    9026:	|  |  |               movea.l 44(sp),a1
    902a:	|  |  |               movea.l 112(sp),a0
    902e:	|  |  |               movea.l 8(a0),a0
    9032:	|  |  |               move.l 100(sp),d1
    9036:	|  |  |               move.l d1,d0
    9038:	|  |  |               lsl.l #3,d0
    903a:	|  |  |               sub.l d1,d0
    903c:	|  |  |               add.l d0,d0
    903e:	|  |  |               add.l d0,d0
    9040:	|  |  |               adda.l d0,a0
    9042:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    9046:	|  |  |               move.l 1cd4e <bigDataFile>,40(sp)
    904e:	|  |  |               movea.l 112(sp),a0
    9052:	|  |  |               movea.l 8(a0),a0
    9056:	|  |  |               move.l 100(sp),d1
    905a:	|  |  |               move.l d1,d0
    905c:	|  |  |               lsl.l #3,d0
    905e:	|  |  |               sub.l d1,d0
    9060:	|  |  |               add.l d0,d0
    9062:	|  |  |               add.l d0,d0
    9064:	|  |  |               adda.l d0,a0
    9066:	|  |  |               move.l 24(a0),36(sp)
    906c:	|  |  |               moveq #2,d1
    906e:	|  |  |               move.l d1,32(sp)
    9072:	|  |  |               move.w 98(sp),d0
    9076:	|  |  |               lsr.w #1,d0
    9078:	|  |  |               move.w d0,d0
    907a:	|  |  |               andi.l #65535,d0
    9080:	|  |  |               move.l d0,28(sp)
    9084:	|  |  |               move.l 1cd6e <DOSBase>,d0
    908a:	|  |  |               movea.l d0,a6
    908c:	|  |  |               move.l 40(sp),d1
    9090:	|  |  |               move.l 36(sp),d2
    9094:	|  |  |               move.l 32(sp),d3
    9098:	|  |  |               move.l 28(sp),d4
    909c:	|  |  |               jsr -324(a6)
    90a0:	|  |  |               move.l d0,24(sp)
    90a4:	|  |  |               move.l 24(sp),d0
    90a8:	|  |  |               move.w d0,22(sp)
		if (!count) {
    90ac:	|  |  |           ,-- bne.s 90c0 <loadSpriteBank+0x414>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    90ae:	|  |  |           |   pea 19436 <PutChar+0x147c>
    90b4:	|  |  |           |   jsr 17518 <KPrintF>
    90ba:	|  |  |           |   addq.l #4,sp
			return FALSE;
    90bc:	|  |  |           |   clr.w d0
    90be:	+--|--|-----------|-- bra.s 90e6 <loadSpriteBank+0x43a>
	for (i = 0; i < total; i++) {
    90c0:	|  |  |           '-> addq.l #1,100(sp)
    90c4:	|  |  '-------------> move.l 100(sp),d0
    90c8:	|  |                  cmp.l 74(sp),d0
    90cc:	|  '----------------- blt.w 8df0 <loadSpriteBank+0x144>
		}
	}

	finishAccess ();
    90d0:	|                     jsr 7844 <finishAccess>

	KPrintF("loadSpriteBank: Complete\n");
    90d6:	|                     pea 19469 <PutChar+0x14af>
    90dc:	|                     jsr 17518 <KPrintF>
    90e2:	|                     addq.l #4,sp
	return TRUE;
    90e4:	|                     moveq #1,d0
}
    90e6:	'-------------------> movem.l (sp)+,d2-d4/a2/a6
    90ea:	                      lea 84(sp),sp
    90ee:	                      rts

000090f0 <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    90f0:	                   lea -16(sp),sp
    90f4:	                   move.l d2,-(sp)
    90f6:	                   move.l 32(sp),d0
    90fa:	                   move.w d0,d0
    90fc:	                   move.w d0,6(sp)
	WORD x =  thisPerson->x - single->xhot;
    9100:	                   movea.l 28(sp),a0
    9104:	                   move.l (a0),d2
    9106:	                   movea.l 24(sp),a0
    910a:	                   move.l 8(a0),d0
    910e:	                   move.l d0,-(sp)
    9110:	                   jsr 1794a <__floatsisf>
    9116:	                   addq.l #4,sp
    9118:	                   move.l d0,-(sp)
    911a:	                   move.l d2,-(sp)
    911c:	                   jsr 17c3e <__subsf3>
    9122:	                   addq.l #8,sp
    9124:	                   move.l d0,-(sp)
    9126:	                   jsr 178e2 <__fixsfsi>
    912c:	                   addq.l #4,sp
    912e:	                   move.w d0,18(sp)
	WORD y =  thisPerson->y - single->yhot;			
    9132:	                   movea.l 28(sp),a0
    9136:	                   move.l 4(a0),d2
    913a:	                   movea.l 24(sp),a0
    913e:	                   move.l 12(a0),d0
    9142:	                   move.l d0,-(sp)
    9144:	                   jsr 1794a <__floatsisf>
    914a:	                   addq.l #4,sp
    914c:	                   move.l d0,-(sp)
    914e:	                   move.l d2,-(sp)
    9150:	                   jsr 17c3e <__subsf3>
    9156:	                   addq.l #8,sp
    9158:	                   move.l d0,-(sp)
    915a:	                   jsr 178e2 <__fixsfsi>
    9160:	                   addq.l #4,sp
    9162:	                   move.w d0,8(sp)

	if( x < 0)
    9166:	                   tst.w 18(sp)
    916a:	               ,-- bge.s 919e <scaleSprite+0xae>
	{
		x = thisPerson->x - single->xhot;
    916c:	               |   movea.l 28(sp),a0
    9170:	               |   move.l (a0),d2
    9172:	               |   movea.l 24(sp),a0
    9176:	               |   move.l 8(a0),d0
    917a:	               |   move.l d0,-(sp)
    917c:	               |   jsr 1794a <__floatsisf>
    9182:	               |   addq.l #4,sp
    9184:	               |   move.l d0,-(sp)
    9186:	               |   move.l d2,-(sp)
    9188:	               |   jsr 17c3e <__subsf3>
    918e:	               |   addq.l #8,sp
    9190:	               |   move.l d0,-(sp)
    9192:	               |   jsr 178e2 <__fixsfsi>
    9198:	               |   addq.l #4,sp
    919a:	               |   move.w d0,18(sp)
	}

	CstScaleSprite( single, thisPerson, x, y,SCREEN);
    919e:	               '-> movea.w 8(sp),a1
    91a2:	                   movea.w 18(sp),a0
    91a6:	                   pea 1 <_start+0x1>
    91aa:	                   move.l a1,-(sp)
    91ac:	                   move.l a0,-(sp)
    91ae:	                   move.l 40(sp),-(sp)
    91b2:	                   move.l 40(sp),-(sp)
    91b6:	                   jsr 2e48 <CstScaleSprite>
    91bc:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    91c0:	                   movea.l 28(sp),a0
    91c4:	                   move.l 118(a0),d0
    91c8:	                   moveq #8,d1
    91ca:	                   and.l d1,d0
    91cc:	   ,-------------- beq.w 9298 <scaleSprite+0x1a8>
		if (single->xhot < 0)
    91d0:	   |               movea.l 24(sp),a0
    91d4:	   |               move.l 8(a0),d0
    91d8:	   |  ,----------- bpl.s 9214 <scaleSprite+0x124>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    91da:	   |  |            move.w 18(sp),d0
    91de:	   |  |            tst.w 6(sp)
    91e2:	   |  |     ,----- beq.s 91fc <scaleSprite+0x10c>
    91e4:	   |  |     |      movea.l 24(sp),a0
    91e8:	   |  |     |      move.l (a0),d1
    91ea:	   |  |     |      move.l d1,d2
    91ec:	   |  |     |      movea.l 24(sp),a0
    91f0:	   |  |     |      move.l 8(a0),d1
    91f4:	   |  |     |      move.l d1,d1
    91f6:	   |  |     |      movea.w d2,a0
    91f8:	   |  |     |      suba.w d1,a0
    91fa:	   |  |     |  ,-- bra.s 920a <scaleSprite+0x11a>
    91fc:	   |  |     '--|-> movea.l 24(sp),a0
    9200:	   |  |        |   move.l 8(a0),d1
    9204:	   |  |        |   move.l d1,d1
    9206:	   |  |        |   movea.w d1,a0
    9208:	   |  |        |   addq.w #1,a0
    920a:	   |  |        '-> move.w d0,d1
    920c:	   |  |            sub.w a0,d1
    920e:	   |  |            move.w d1,16(sp)
    9212:	   |  |  ,-------- bra.s 924c <scaleSprite+0x15c>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9214:	   |  '--|-------> move.w 18(sp),d1
    9218:	   |     |         tst.w 6(sp)
    921c:	   |     |  ,----- beq.s 923a <scaleSprite+0x14a>
    921e:	   |     |  |      movea.l 24(sp),a0
    9222:	   |     |  |      move.l (a0),d0
    9224:	   |     |  |      move.l d0,d2
    9226:	   |     |  |      movea.l 24(sp),a0
    922a:	   |     |  |      move.l 8(a0),d0
    922e:	   |     |  |      move.l d0,d0
    9230:	   |     |  |      movea.w d2,a0
    9232:	   |     |  |      suba.w d0,a0
    9234:	   |     |  |      move.w a0,d0
    9236:	   |     |  |      subq.w #1,d0
    9238:	   |     |  |  ,-- bra.s 9244 <scaleSprite+0x154>
    923a:	   |     |  '--|-> movea.l 24(sp),a0
    923e:	   |     |     |   move.l 8(a0),d0
    9242:	   |     |     |   move.l d0,d0
    9244:	   |     |     '-> movea.w d1,a0
    9246:	   |     |         suba.w d0,a0
    9248:	   |     |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    924c:	   |     '-------> movea.l 28(sp),a0
    9250:	   |               move.l 24(a0),d0
    9254:	   |               move.l d0,d1
    9256:	   |               movea.l 24(sp),a0
    925a:	   |               move.l 12(a0),d0
    925e:	   |               move.l d0,d0
    9260:	   |               sub.w d0,d1
    9262:	   |               move.w 8(sp),d0
    9266:	   |               movea.w d1,a0
    9268:	   |               adda.w d0,a0
    926a:	   |               move.w a0,14(sp)
		x2 = x1 + single->width;
    926e:	   |               movea.l 24(sp),a0
    9272:	   |               move.l (a0),d0
    9274:	   |               move.l d0,d0
    9276:	   |               move.w 16(sp),d1
    927a:	   |               add.w d0,d1
    927c:	   |               move.w d1,12(sp)
		y2 = y1 + single->height;
    9280:	   |               movea.l 24(sp),a0
    9284:	   |               move.l 4(a0),d0
    9288:	   |               move.l d0,d0
    928a:	   |               movea.w 14(sp),a0
    928e:	   |               adda.w d0,a0
    9290:	   |               move.w a0,10(sp)
    9294:	,--|-------------- bra.w 9380 <scaleSprite+0x290>
	} else {
		x -= cameraX;
    9298:	|  '-------------> move.w 18(sp),d1
    929c:	|                  move.l 1ce1c <cameraX>,d0
    92a2:	|                  move.l d0,d0
    92a4:	|                  sub.w d0,d1
    92a6:	|                  move.w d1,18(sp)
		y -= cameraY;
    92aa:	|                  move.w 8(sp),d1
    92ae:	|                  move.l 1ce20 <cameraY>,d0
    92b4:	|                  move.l d0,d0
    92b6:	|                  sub.w d0,d1
    92b8:	|                  move.w d1,8(sp)
		if (single->xhot < 0)
    92bc:	|                  movea.l 24(sp),a0
    92c0:	|                  move.l 8(a0),d0
    92c4:	|     ,----------- bpl.s 9300 <scaleSprite+0x210>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    92c6:	|     |            move.w 18(sp),d0
    92ca:	|     |            tst.w 6(sp)
    92ce:	|     |     ,----- beq.s 92e8 <scaleSprite+0x1f8>
    92d0:	|     |     |      movea.l 24(sp),a0
    92d4:	|     |     |      move.l (a0),d1
    92d6:	|     |     |      move.l d1,d2
    92d8:	|     |     |      movea.l 24(sp),a0
    92dc:	|     |     |      move.l 8(a0),d1
    92e0:	|     |     |      move.l d1,d1
    92e2:	|     |     |      movea.w d2,a0
    92e4:	|     |     |      suba.w d1,a0
    92e6:	|     |     |  ,-- bra.s 92f6 <scaleSprite+0x206>
    92e8:	|     |     '--|-> movea.l 24(sp),a0
    92ec:	|     |        |   move.l 8(a0),d1
    92f0:	|     |        |   move.l d1,d1
    92f2:	|     |        |   movea.w d1,a0
    92f4:	|     |        |   addq.w #1,a0
    92f6:	|     |        '-> move.w d0,d1
    92f8:	|     |            sub.w a0,d1
    92fa:	|     |            move.w d1,16(sp)
    92fe:	|     |  ,-------- bra.s 9338 <scaleSprite+0x248>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    9300:	|     '--|-------> move.w 18(sp),d1
    9304:	|        |         tst.w 6(sp)
    9308:	|        |  ,----- beq.s 9326 <scaleSprite+0x236>
    930a:	|        |  |      movea.l 24(sp),a0
    930e:	|        |  |      move.l (a0),d0
    9310:	|        |  |      move.l d0,d2
    9312:	|        |  |      movea.l 24(sp),a0
    9316:	|        |  |      move.l 8(a0),d0
    931a:	|        |  |      move.l d0,d0
    931c:	|        |  |      movea.w d2,a0
    931e:	|        |  |      suba.w d0,a0
    9320:	|        |  |      move.w a0,d0
    9322:	|        |  |      subq.w #1,d0
    9324:	|        |  |  ,-- bra.s 9330 <scaleSprite+0x240>
    9326:	|        |  '--|-> movea.l 24(sp),a0
    932a:	|        |     |   move.l 8(a0),d0
    932e:	|        |     |   move.l d0,d0
    9330:	|        |     '-> movea.w d1,a0
    9332:	|        |         suba.w d0,a0
    9334:	|        |         move.w a0,16(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    9338:	|        '-------> movea.l 28(sp),a0
    933c:	|                  move.l 24(a0),d0
    9340:	|                  move.l d0,d1
    9342:	|                  movea.l 24(sp),a0
    9346:	|                  move.l 12(a0),d0
    934a:	|                  move.l d0,d0
    934c:	|                  sub.w d0,d1
    934e:	|                  move.w 8(sp),d0
    9352:	|                  movea.w d1,a0
    9354:	|                  adda.w d0,a0
    9356:	|                  move.w a0,14(sp)
		x2 = x1 + single->width;
    935a:	|                  movea.l 24(sp),a0
    935e:	|                  move.l (a0),d0
    9360:	|                  move.l d0,d0
    9362:	|                  move.w 16(sp),d1
    9366:	|                  add.w d0,d1
    9368:	|                  move.w d1,12(sp)
		y2 = y1 + single->height;
    936c:	|                  movea.l 24(sp),a0
    9370:	|                  move.l 4(a0),d0
    9374:	|                  move.l d0,d0
    9376:	|                  movea.w 14(sp),a0
    937a:	|                  adda.w d0,a0
    937c:	|                  move.w a0,10(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    9380:	'----------------> move.l 1cd22 <input+0xa>,d1
    9386:	                   moveq #0,d0
    9388:	                   move.w 16(sp),d0
    938c:	                   cmp.l d1,d0
    938e:	            ,----- bgt.s 93c4 <scaleSprite+0x2d4>
    9390:	            |      move.l 1cd22 <input+0xa>,d1
    9396:	            |      moveq #0,d0
    9398:	            |      move.w 12(sp),d0
    939c:	            |      cmp.l d1,d0
    939e:	            +----- blt.s 93c4 <scaleSprite+0x2d4>
    93a0:	            |      move.l 1cd26 <input+0xe>,d1
    93a6:	            |      moveq #0,d0
    93a8:	            |      move.w 14(sp),d0
    93ac:	            |      cmp.l d1,d0
    93ae:	            +----- bgt.s 93c4 <scaleSprite+0x2d4>
    93b0:	            |      move.l 1cd26 <input+0xe>,d1
    93b6:	            |      moveq #0,d0
    93b8:	            |      move.w 10(sp),d0
    93bc:	            |      cmp.l d1,d0
    93be:	            +----- blt.s 93c4 <scaleSprite+0x2d4>
		return TRUE;
    93c0:	            |      moveq #1,d0
    93c2:	            |  ,-- bra.s 93c6 <scaleSprite+0x2d6>
	}
	return FALSE;
    93c4:	            '--|-> clr.w d0
    93c6:	               '-> move.l (sp)+,d2
    93c8:	                   lea 16(sp),sp
    93cc:	                   rts

000093ce <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    93ce:	    move.l 4(sp),d0
    93d2:	,-- bpl.s 93d6 <TF_abs+0x8>
    93d4:	|   neg.l d0
}
    93d6:	'-> rts

000093d8 <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    93d8:	             lea -28(sp),sp
    93dc:	             move.l a6,-(sp)
    93de:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    93e0:	             move.l #132,28(sp)
    93e8:	             clr.l 24(sp)
    93ec:	             move.l 1cd66 <SysBase>,d0
    93f2:	             movea.l d0,a6
    93f4:	             move.l 28(sp),d0
    93f8:	             move.l 24(sp),d1
    93fc:	             jsr -684(a6)
    9400:	             move.l d0,20(sp)
    9404:	             move.l 20(sp),d0
    9408:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    940c:	         ,-- bne.s 9414 <addPerson+0x3c>
    940e:	         |   clr.w d0
    9410:	,--------|-- bra.w 9644 <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    9414:	|        '-> move.l 48(sp),-(sp)
    9418:	|            jsr d83c <loadObjectType>
    941e:	|            addq.l #4,sp
    9420:	|            movea.l 16(sp),a0
    9424:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    9428:	|            movea.l 16(sp),a0
    942c:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    9434:	|            movea.l 16(sp),a0
    9438:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    943c:	|            movea.l 16(sp),a0
    9440:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    9444:	|            move.l 44(sp),-(sp)
    9448:	|            jsr 1794a <__floatsisf>
    944e:	|            addq.l #4,sp
    9450:	|            move.l d0,d2
    9452:	|            move.l 40(sp),-(sp)
    9456:	|            jsr 1794a <__floatsisf>
    945c:	|            addq.l #4,sp
    945e:	|            move.l d2,-(sp)
    9460:	|            move.l d0,-(sp)
    9462:	|            move.l 24(sp),-(sp)
    9466:	|            jsr af88 <moveAndScale>
    946c:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    9470:	|            movea.l 16(sp),a0
    9474:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    9478:	|            movea.l 16(sp),a0
    947c:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    9482:	|            movea.l 16(sp),a0
    9486:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    948c:	|            movea.l 16(sp),a0
    9490:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    9494:	|            movea.l 16(sp),a0
    9498:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    949c:	|            movea.l 16(sp),a0
    94a0:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    94a6:	|            movea.l 16(sp),a0
    94aa:	|            clr.l 106(a0)
    newPerson->angle = 180;
    94ae:	|            movea.l 16(sp),a0
    94b2:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    94ba:	|            movea.l 16(sp),a0
    94be:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    94c6:	|            movea.l 16(sp),a0
    94ca:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    94ce:	|            movea.l 16(sp),a0
    94d2:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    94d6:	|            movea.l 16(sp),a0
    94da:	|            movea.l 114(a0),a0
    94de:	|            move.l 24(a0),d0
    94e2:	|            movea.l 16(sp),a0
    94e6:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    94ea:	|            movea.l 16(sp),a0
    94ee:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    94f2:	|            movea.l 16(sp),a0
    94f6:	|            movea.l 114(a0),a0
    94fa:	|            move.l 32(a0),d0
    94fe:	|            movea.l 16(sp),a0
    9502:	|            move.l d0,122(a0)
    newPerson->r = 0;
    9506:	|            movea.l 16(sp),a0
    950a:	|            clr.b 126(a0)
    newPerson->g = 0;
    950e:	|            movea.l 16(sp),a0
    9512:	|            clr.b 127(a0)
    newPerson->b = 0;
    9516:	|            movea.l 16(sp),a0
    951a:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    951e:	|            movea.l 16(sp),a0
    9522:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    9526:	|            movea.l 16(sp),a0
    952a:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    952e:	|            movea.l 16(sp),a0
    9532:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    9538:	|            clr.l -(sp)
    953a:	|            move.l 20(sp),-(sp)
    953e:	|            jsr 437a <setFrames>
    9544:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    9546:	|            movea.l 52(sp),a0
    954a:	|            movea.l (a0),a0
    954c:	|            movea.l (a0),a0
    954e:	|            movea.l 4(a0),a0
    9552:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    9556:	|     ,----- bpl.s 9560 <addPerson+0x188>
    9558:	|     |      move.l 12(sp),d0
    955c:	|     |      neg.l d0
    955e:	|     |  ,-- bra.s 9562 <addPerson+0x18a>
    9560:	|     '--|-> moveq #1,d0
    9562:	|        '-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    9566:	|            movea.l 52(sp),a0
    956a:	|            movea.l (a0),a0
    956c:	|            movea.l (a0),a0
    956e:	|            movea.l (a0),a0
    9570:	|            move.l 8(a0),d0
    9574:	|            cmp.l 8(sp),d0
    9578:	|     ,----- bgt.s 95aa <addPerson+0x1d2>
        if (fNumSigned < 0) {
    957a:	|     |      tst.l 12(sp)
    957e:	|     |  ,-- bge.s 958c <addPerson+0x1b4>
            newPerson->height = 5;
    9580:	|     |  |   movea.l 16(sp),a0
    9584:	|     |  |   moveq #5,d0
    9586:	|     |  |   move.l d0,20(a0)
    958a:	|  ,--|--|-- bra.s 95d6 <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    958c:	|  |  |  '-> movea.l 52(sp),a0
    9590:	|  |  |      movea.l (a0),a0
    9592:	|  |  |      movea.l (a0),a0
    9594:	|  |  |      movea.l (a0),a0
    9596:	|  |  |      movea.l 16(a0),a0
    959a:	|  |  |      move.l 12(a0),d0
    959e:	|  |  |      addq.l #5,d0
    95a0:	|  |  |      movea.l 16(sp),a0
    95a4:	|  |  |      move.l d0,20(a0)
    95a8:	|  +--|----- bra.s 95d6 <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    95aa:	|  |  '----> movea.l 52(sp),a0
    95ae:	|  |         movea.l (a0),a0
    95b0:	|  |         movea.l (a0),a0
    95b2:	|  |         movea.l (a0),a0
    95b4:	|  |         movea.l 16(a0),a0
    95b8:	|  |         move.l 8(sp),d1
    95bc:	|  |         move.l d1,d0
    95be:	|  |         lsl.l #3,d0
    95c0:	|  |         sub.l d1,d0
    95c2:	|  |         add.l d0,d0
    95c4:	|  |         add.l d0,d0
    95c6:	|  |         adda.l d0,a0
    95c8:	|  |         move.l 12(a0),d0
    95cc:	|  |         addq.l #5,d0
    95ce:	|  |         movea.l 16(sp),a0
    95d2:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    95d6:	|  '-------> move.l #118214,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    95de:	|        ,-- bra.s 95ee <addPerson+0x216>
        changethat = &((*changethat)->next);
    95e0:	|     ,--|-> movea.l 32(sp),a0
    95e4:	|     |  |   move.l (a0),d0
    95e6:	|     |  |   moveq #36,d1
    95e8:	|     |  |   add.l d0,d1
    95ea:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    95ee:	|     |  '-> movea.l 32(sp),a0
    95f2:	|     |      move.l (a0),d0
    95f4:	|     |  ,-- beq.s 961c <addPerson+0x244>
    95f6:	|     |  |   movea.l 32(sp),a0
    95fa:	|     |  |   movea.l (a0),a0
    95fc:	|     |  |   move.l 4(a0),d2
    9600:	|     |  |   move.l 44(sp),-(sp)
    9604:	|     |  |   jsr 1794a <__floatsisf>
    960a:	|     |  |   addq.l #4,sp
    960c:	|     |  |   move.l d0,-(sp)
    960e:	|     |  |   move.l d2,-(sp)
    9610:	|     |  |   jsr 17b70 <__ltsf2>
    9616:	|     |  |   addq.l #8,sp
    9618:	|     |  |   tst.l d0
    961a:	|     '--|-- blt.s 95e0 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    961c:	|        '-> movea.l 32(sp),a0
    9620:	|            move.l (a0),d0
    9622:	|            movea.l 16(sp),a0
    9626:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    962a:	|            movea.l 32(sp),a0
    962e:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    9632:	|            movea.l 16(sp),a0
    9636:	|            move.l 114(a0),d0
    963a:	|            sne d0
    963c:	|            neg.b d0
    963e:	|            move.b d0,d0
    9640:	|            andi.w #255,d0
}
    9644:	'----------> move.l (sp)+,d2
    9646:	             movea.l (sp)+,a6
    9648:	             lea 28(sp),sp
    964c:	             rts

0000964e <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    964e:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    9650:	       move.l 8(sp),-(sp)
    9654:	       jsr a7de <findPerson>
    965a:	       addq.l #4,sp
    965c:	       move.l d0,(sp)
    if (moveMe) {
    965e:	,----- beq.s 9692 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    9660:	|      movea.l (sp),a0
    9662:	|      move.l 68(a0),d0
    9666:	|  ,-- beq.s 9678 <animatePerson+0x2a>
    9668:	|  |   movea.l (sp),a0
    966a:	|  |   move.l 68(a0),d0
    966e:	|  |   move.l d0,-(sp)
    9670:	|  |   jsr 51d8 <abortFunction>
    9676:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    9678:	|  '-> movea.l (sp),a0
    967a:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    967e:	|      movea.l (sp),a0
    9680:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    9684:	|      movea.l (sp),a0
    9686:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    968a:	|      movea.l (sp),a0
    968c:	|      move.l 12(sp),72(a0)
    }
}
    9692:	'----> nop
    9694:	       addq.l #4,sp
    9696:	       rts

00009698 <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    9698:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    969a:	       move.l 8(sp),-(sp)
    969e:	       jsr a7de <findPerson>
    96a4:	       addq.l #4,sp
    96a6:	       move.l d0,(sp)
    if (moveMe) {
    96a8:	,----- beq.s 96ea <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    96aa:	|      movea.l (sp),a0
    96ac:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    96b0:	|      movea.l (sp),a0
    96b2:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    96b8:	|      move.l (sp),-(sp)
    96ba:	|      jsr b116 <rethinkAngle>
    96c0:	|      addq.l #4,sp
        if (moveMe->walking) {
    96c2:	|      movea.l (sp),a0
    96c4:	|      move.w 64(a0),d0
    96c8:	|  ,-- beq.s 96dc <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    96ca:	|  |   pea 1 <_start+0x1>
    96ce:	|  |   move.l 4(sp),-(sp)
    96d2:	|  |   jsr 437a <setFrames>
    96d8:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    96da:	+--|-- bra.s 96ea <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    96dc:	|  '-> clr.l -(sp)
    96de:	|      move.l 4(sp),-(sp)
    96e2:	|      jsr 437a <setFrames>
    96e8:	|      addq.l #8,sp
}
    96ea:	'----> nop
    96ec:	       addq.l #4,sp
    96ee:	       rts

000096f0 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    96f0:	             lea -36(sp),sp
    96f4:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    96f6:	             movea.l 44(sp),a0
    96fa:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9700:	             moveq #12,d0
    9702:	             move.l d0,28(sp)
    9706:	             clr.l 24(sp)
    970a:	             move.l 1cd66 <SysBase>,d0
    9710:	             movea.l d0,a6
    9712:	             move.l 28(sp),d0
    9716:	             move.l 24(sp),d1
    971a:	             jsr -684(a6)
    971e:	             move.l d0,20(sp)
    9722:	             move.l 20(sp),d0
    9726:	             move.l d0,16(sp)
	if (!(newAnim)) {
    972a:	         ,-- bne.s 9740 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    972c:	         |   pea 19483 <PutChar+0x14c9>
    9732:	         |   jsr 17518 <KPrintF>
    9738:	         |   addq.l #4,sp
		return NULL;
    973a:	         |   moveq #0,d0
    973c:	,--------|-- bra.w 9892 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9740:	|        '-> movea.l 44(sp),a0
    9744:	|            move.l (a0),d0
    9746:	|            movea.l 16(sp),a0
    974a:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    974c:	|            movea.l 16(sp),a0
    9750:	|            movea.l (a0),a0
    9752:	|            move.l 4(a0),d0
    9756:	|            addq.l #1,d0
    9758:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    975c:	|            movea.l 16(sp),a0
    9760:	|            move.l 32(sp),8(a0)

	if (num) {
    9766:	|  ,-------- beq.w 9886 <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    976a:	|  |         move.l 32(sp),d1
    976e:	|  |         move.l d1,d0
    9770:	|  |         add.l d0,d0
    9772:	|  |         add.l d1,d0
    9774:	|  |         add.l d0,d0
    9776:	|  |         add.l d0,d0
    9778:	|  |         move.l d0,12(sp)
    977c:	|  |         clr.l 8(sp)
    9780:	|  |         move.l 1cd66 <SysBase>,d0
    9786:	|  |         movea.l d0,a6
    9788:	|  |         move.l 12(sp),d0
    978c:	|  |         move.l 8(sp),d1
    9790:	|  |         jsr -684(a6)
    9794:	|  |         move.l d0,4(sp)
    9798:	|  |         move.l 4(sp),d0
    979c:	|  |         movea.l 16(sp),a0
    97a0:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    97a4:	|  |         movea.l 16(sp),a0
    97a8:	|  |         move.l 4(a0),d0
    97ac:	|  |     ,-- bne.s 97c2 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    97ae:	|  |     |   pea 19483 <PutChar+0x14c9>
    97b4:	|  |     |   jsr 17518 <KPrintF>
    97ba:	|  |     |   addq.l #4,sp
			return NULL;
    97bc:	|  |     |   moveq #0,d0
    97be:	+--|-----|-- bra.w 9892 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    97c2:	|  |     '-> clr.l 36(sp)
    97c6:	|  |     ,-- bra.w 9878 <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    97ca:	|  |  ,--|-> movea.l 44(sp),a0
    97ce:	|  |  |  |   movea.l 4(a0),a0
    97d2:	|  |  |  |   move.l 36(sp),d1
    97d6:	|  |  |  |   move.l d1,d0
    97d8:	|  |  |  |   add.l d0,d0
    97da:	|  |  |  |   add.l d1,d0
    97dc:	|  |  |  |   add.l d0,d0
    97de:	|  |  |  |   add.l d0,d0
    97e0:	|  |  |  |   lea (0,a0,d0.l),a1
    97e4:	|  |  |  |   movea.l 16(sp),a0
    97e8:	|  |  |  |   movea.l 4(a0),a0
    97ec:	|  |  |  |   move.l 36(sp),d1
    97f0:	|  |  |  |   move.l d1,d0
    97f2:	|  |  |  |   add.l d0,d0
    97f4:	|  |  |  |   add.l d1,d0
    97f6:	|  |  |  |   add.l d0,d0
    97f8:	|  |  |  |   add.l d0,d0
    97fa:	|  |  |  |   adda.l d0,a0
    97fc:	|  |  |  |   move.l (a1),d0
    97fe:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9800:	|  |  |  |   movea.l 44(sp),a0
    9804:	|  |  |  |   movea.l 4(a0),a0
    9808:	|  |  |  |   move.l 36(sp),d1
    980c:	|  |  |  |   move.l d1,d0
    980e:	|  |  |  |   add.l d0,d0
    9810:	|  |  |  |   add.l d1,d0
    9812:	|  |  |  |   add.l d0,d0
    9814:	|  |  |  |   add.l d0,d0
    9816:	|  |  |  |   lea (0,a0,d0.l),a1
    981a:	|  |  |  |   movea.l 16(sp),a0
    981e:	|  |  |  |   movea.l 4(a0),a0
    9822:	|  |  |  |   move.l 36(sp),d1
    9826:	|  |  |  |   move.l d1,d0
    9828:	|  |  |  |   add.l d0,d0
    982a:	|  |  |  |   add.l d1,d0
    982c:	|  |  |  |   add.l d0,d0
    982e:	|  |  |  |   add.l d0,d0
    9830:	|  |  |  |   adda.l d0,a0
    9832:	|  |  |  |   move.l 4(a1),d0
    9836:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    983a:	|  |  |  |   movea.l 44(sp),a0
    983e:	|  |  |  |   movea.l 4(a0),a0
    9842:	|  |  |  |   move.l 36(sp),d1
    9846:	|  |  |  |   move.l d1,d0
    9848:	|  |  |  |   add.l d0,d0
    984a:	|  |  |  |   add.l d1,d0
    984c:	|  |  |  |   add.l d0,d0
    984e:	|  |  |  |   add.l d0,d0
    9850:	|  |  |  |   lea (0,a0,d0.l),a1
    9854:	|  |  |  |   movea.l 16(sp),a0
    9858:	|  |  |  |   movea.l 4(a0),a0
    985c:	|  |  |  |   move.l 36(sp),d1
    9860:	|  |  |  |   move.l d1,d0
    9862:	|  |  |  |   add.l d0,d0
    9864:	|  |  |  |   add.l d1,d0
    9866:	|  |  |  |   add.l d0,d0
    9868:	|  |  |  |   add.l d0,d0
    986a:	|  |  |  |   adda.l d0,a0
    986c:	|  |  |  |   move.l 8(a1),d0
    9870:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    9874:	|  |  |  |   addq.l #1,36(sp)
    9878:	|  |  |  '-> move.l 36(sp),d0
    987c:	|  |  |      cmp.l 32(sp),d0
    9880:	|  |  '----- blt.w 97ca <copyAnim+0xda>
    9884:	|  |     ,-- bra.s 988e <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    9886:	|  '-----|-> movea.l 16(sp),a0
    988a:	|        |   clr.l 4(a0)
	}

	return newAnim;
    988e:	|        '-> move.l 16(sp),d0
}
    9892:	'----------> movea.l (sp)+,a6
    9894:	             lea 36(sp),sp
    9898:	             rts

0000989a <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    989a:	                lea -44(sp),sp
    989e:	                move.l a6,-(sp)
    98a0:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    98a2:	                moveq #12,d0
    98a4:	                move.l d0,40(sp)
    98a8:	                clr.l 36(sp)
    98ac:	                move.l 1cd66 <SysBase>,d0
    98b2:	                movea.l d0,a6
    98b4:	                move.l 40(sp),d0
    98b8:	                move.l 36(sp),d1
    98bc:	                jsr -684(a6)
    98c0:	                move.l d0,32(sp)
    98c4:	                move.l 32(sp),d0
    98c8:	                move.l d0,28(sp)
	if( !newP) {
    98cc:	            ,-- bne.s 98e2 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    98ce:	            |   pea 194a4 <PutChar+0x14ea>
    98d4:	            |   jsr 17518 <KPrintF>
    98da:	            |   addq.l #4,sp
		return NULL;
    98dc:	            |   moveq #0,d0
    98de:	,-----------|-- bra.w 9ab2 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    98e2:	|           '-> movea.l 28(sp),a0
    98e6:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    98ec:	|               move.l 56(sp),d1
    98f0:	|               move.l d1,d0
    98f2:	|               add.l d0,d0
    98f4:	|               add.l d1,d0
    98f6:	|               add.l d0,d0
    98f8:	|               add.l d0,d0
    98fa:	|               move.l d0,24(sp)
    98fe:	|               clr.l 20(sp)
    9902:	|               move.l 1cd66 <SysBase>,d0
    9908:	|               movea.l d0,a6
    990a:	|               move.l 24(sp),d0
    990e:	|               move.l 20(sp),d1
    9912:	|               jsr -684(a6)
    9916:	|               move.l d0,16(sp)
    991a:	|               move.l 16(sp),d0
    991e:	|               movea.l 28(sp),a0
    9922:	|               move.l d0,4(a0)
	if( !newP->frames) {
    9926:	|               movea.l 28(sp),a0
    992a:	|               move.l 4(a0),d0
    992e:	|           ,-- bne.s 9944 <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9930:	|           |   pea 194a4 <PutChar+0x14ea>
    9936:	|           |   jsr 17518 <KPrintF>
    993c:	|           |   addq.l #4,sp
		return NULL;
    993e:	|           |   moveq #0,d0
    9940:	+-----------|-- bra.w 9ab2 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    9944:	|           '-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    994a:	|               movea.l 60(sp),a0
    994e:	|               move.l (a0),44(sp)
	while (a) {
    9952:	|     ,-------- bra.w 9aa6 <createPersonaAnim+0x20c>
		a --;
    9956:	|  ,--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    995a:	|  |  |         movea.l 28(sp),a0
    995e:	|  |  |         movea.l 4(a0),a0
    9962:	|  |  |         move.l 48(sp),d1
    9966:	|  |  |         move.l d1,d0
    9968:	|  |  |         add.l d0,d0
    996a:	|  |  |         add.l d1,d0
    996c:	|  |  |         add.l d0,d0
    996e:	|  |  |         add.l d0,d0
    9970:	|  |  |         adda.l d0,a0
    9972:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    9976:	|  |  |         movea.l 44(sp),a0
    997a:	|  |  |         move.l (a0),d0
    997c:	|  |  |         moveq #5,d1
    997e:	|  |  |         cmp.l d0,d1
    9980:	|  |  |     ,-- bne.s 99ac <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9982:	|  |  |     |   movea.l 28(sp),a0
    9986:	|  |  |     |   movea.l 4(a0),a0
    998a:	|  |  |     |   move.l 48(sp),d1
    998e:	|  |  |     |   move.l d1,d0
    9990:	|  |  |     |   add.l d0,d0
    9992:	|  |  |     |   add.l d1,d0
    9994:	|  |  |     |   add.l d0,d0
    9996:	|  |  |     |   add.l d0,d0
    9998:	|  |  |     |   lea (0,a0,d0.l),a1
    999c:	|  |  |     |   movea.l 44(sp),a0
    99a0:	|  |  |     |   move.l 4(a0),d0
    99a4:	|  |  |     |   move.l d0,8(a1)
    99a8:	|  |  |  ,--|-- bra.w 9a54 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    99ac:	|  |  |  |  '-> movea.l 44(sp),a0
    99b0:	|  |  |  |      move.l (a0),d0
    99b2:	|  |  |  |      moveq #2,d1
    99b4:	|  |  |  |      cmp.l d0,d1
    99b6:	|  |  |  |  ,-- bne.s 99e2 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    99b8:	|  |  |  |  |   movea.l 44(sp),a0
    99bc:	|  |  |  |  |   move.l 4(a0),d2
    99c0:	|  |  |  |  |   movea.l 28(sp),a0
    99c4:	|  |  |  |  |   movea.l 4(a0),a0
    99c8:	|  |  |  |  |   move.l 48(sp),d1
    99cc:	|  |  |  |  |   move.l d1,d0
    99ce:	|  |  |  |  |   add.l d0,d0
    99d0:	|  |  |  |  |   add.l d1,d0
    99d2:	|  |  |  |  |   add.l d0,d0
    99d4:	|  |  |  |  |   add.l d0,d0
    99d6:	|  |  |  |  |   adda.l d0,a0
    99d8:	|  |  |  |  |   move.l d2,d0
    99da:	|  |  |  |  |   neg.l d0
    99dc:	|  |  |  |  |   move.l d0,8(a0)
    99e0:	|  |  |  +--|-- bra.s 9a54 <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    99e2:	|  |  |  |  '-> movea.l 44(sp),a0
    99e6:	|  |  |  |      move.l (a0),d0
    99e8:	|  |  |  |      moveq #6,d1
    99ea:	|  |  |  |      cmp.l d0,d1
    99ec:	|  |  |  |  ,-- bne.s 9a34 <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    99ee:	|  |  |  |  |   movea.l 44(sp),a0
    99f2:	|  |  |  |  |   movea.l 4(a0),a0
    99f6:	|  |  |  |  |   move.l (a0),d0
    99f8:	|  |  |  |  |   move.l d0,-(sp)
    99fa:	|  |  |  |  |   pea 1 <_start+0x1>
    99fe:	|  |  |  |  |   lea 20(sp),a0
    9a02:	|  |  |  |  |   move.l a0,-(sp)
    9a04:	|  |  |  |  |   jsr 14a38 <getValueType>
    9a0a:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9a0e:	|  |  |  |  |   movea.l 44(sp),a0
    9a12:	|  |  |  |  |   movea.l 4(a0),a0
    9a16:	|  |  |  |  |   movea.l (a0),a0
    9a18:	|  |  |  |  |   move.l 8(a0),d0
    9a1c:	|  |  |  |  |   move.l d0,-(sp)
    9a1e:	|  |  |  |  |   pea 1 <_start+0x1>
    9a22:	|  |  |  |  |   lea 16(sp),a0
    9a26:	|  |  |  |  |   move.l a0,-(sp)
    9a28:	|  |  |  |  |   jsr 14a38 <getValueType>
    9a2e:	|  |  |  |  |   lea 12(sp),sp
    9a32:	|  |  |  +--|-- bra.s 9a54 <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    9a34:	|  |  |  |  '-> move.l 44(sp),d0
    9a38:	|  |  |  |      move.l d0,-(sp)
    9a3a:	|  |  |  |      pea 1 <_start+0x1>
    9a3e:	|  |  |  |      lea 20(sp),a0
    9a42:	|  |  |  |      move.l a0,-(sp)
    9a44:	|  |  |  |      jsr 14a38 <getValueType>
    9a4a:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    9a4e:	|  |  |  |      moveq #1,d0
    9a50:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    9a54:	|  |  |  '----> move.l 60(sp),-(sp)
    9a58:	|  |  |         jsr 153bc <trimStack>
    9a5e:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9a60:	|  |  |         movea.l 28(sp),a0
    9a64:	|  |  |         movea.l 4(a0),a0
    9a68:	|  |  |         move.l 48(sp),d1
    9a6c:	|  |  |         move.l d1,d0
    9a6e:	|  |  |         add.l d0,d0
    9a70:	|  |  |         add.l d1,d0
    9a72:	|  |  |         add.l d0,d0
    9a74:	|  |  |         add.l d0,d0
    9a76:	|  |  |         adda.l d0,a0
    9a78:	|  |  |         move.l 12(sp),d0
    9a7c:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9a7e:	|  |  |         movea.l 28(sp),a0
    9a82:	|  |  |         movea.l 4(a0),a0
    9a86:	|  |  |         move.l 48(sp),d1
    9a8a:	|  |  |         move.l d1,d0
    9a8c:	|  |  |         add.l d0,d0
    9a8e:	|  |  |         add.l d1,d0
    9a90:	|  |  |         add.l d0,d0
    9a92:	|  |  |         add.l d0,d0
    9a94:	|  |  |         adda.l d0,a0
    9a96:	|  |  |         move.l 8(sp),d0
    9a9a:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    9a9e:	|  |  |         movea.l 60(sp),a0
    9aa2:	|  |  |         move.l (a0),44(sp)
	while (a) {
    9aa6:	|  |  '-------> tst.l 48(sp)
    9aaa:	|  '----------- bne.w 9956 <createPersonaAnim+0xbc>
	}

	return newP;
    9aae:	|               move.l 28(sp),d0
}
    9ab2:	'-------------> move.l (sp)+,d2
    9ab4:	                movea.l (sp)+,a6
    9ab6:	                lea 44(sp),sp
    9aba:	                rts

00009abc <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    9abc:	       lea -12(sp),sp
    9ac0:	       move.l a6,-(sp)

	if(orig->theSprites)
    9ac2:	       movea.l 20(sp),a0
    9ac6:	       move.l (a0),d0
    9ac8:	   ,-- beq.s 9af2 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    9aca:	   |   movea.l 20(sp),a0
    9ace:	   |   movea.l (a0),a0
    9ad0:	   |   move.l 4(a0),d0
    9ad4:	   |   subq.l #1,d0
    9ad6:	   |   move.l d0,4(a0)
    9ada:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    9ae0:	   +-- bne.s 9af2 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    9ae2:	   |   movea.l 20(sp),a0
    9ae6:	   |   move.l (a0),d0
    9ae8:	   |   move.l d0,-(sp)
    9aea:	   |   jsr 8ba0 <forgetSpriteBank>
    9af0:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9af2:	   '-> tst.l 20(sp)
    9af6:	,----- beq.s 9b36 <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    9af8:	|      movea.l 20(sp),a0
    9afc:	|      move.l 8(a0),d0
    9b00:	|  ,-- beq.s 9b1c <deleteAnim+0x60>
			FreeVec( orig->frames);
    9b02:	|  |   movea.l 20(sp),a0
    9b06:	|  |   move.l 4(a0),8(sp)
    9b0c:	|  |   move.l 1cd66 <SysBase>,d0
    9b12:	|  |   movea.l d0,a6
    9b14:	|  |   movea.l 8(sp),a1
    9b18:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9b1c:	|  '-> move.l 20(sp),4(sp)
    9b22:	|      move.l 1cd66 <SysBase>,d0
    9b28:	|      movea.l d0,a6
    9b2a:	|      movea.l 4(sp),a1
    9b2e:	|      jsr -690(a6)
		orig = NULL;
    9b32:	|      clr.l 20(sp)
	}	
	
}
    9b36:	'----> nop
    9b38:	       movea.l (sp)+,a6
    9b3a:	       lea 12(sp),sp
    9b3e:	       rts

00009b40 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9b40:	          lea -124(sp),sp
    9b44:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    9b48:	          movea.l 152(sp),a0
    9b4c:	          move.l 56(a0),d1
    9b50:	          movea.l 152(sp),a0
    9b54:	          move.l 60(a0),d0
    9b58:	          cmp.l d1,d0
    9b5a:	      ,-- bne.s 9b8a <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9b5c:	      |   movea.l 152(sp),a0
    9b60:	      |   moveq #-1,d0
    9b62:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    9b66:	      |   movea.l 152(sp),a0
    9b6a:	      |   move.l 40(a0),d0
    9b6e:	      |   movea.l 152(sp),a0
    9b72:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    9b76:	      |   movea.l 152(sp),a0
    9b7a:	      |   move.l 44(a0),d0
    9b7e:	      |   movea.l 152(sp),a0
    9b82:	      |   move.l d0,52(a0)
    9b86:	   ,--|-- bra.w a0f0 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    9b8a:	   |  '-> movea.l 1ce7e <currentFloor>,a0
    9b90:	   |      move.l 16(a0),d1
    9b94:	   |      movea.l 152(sp),a0
    9b98:	   |      move.l 56(a0),d0
    9b9c:	   |      add.l d0,d0
    9b9e:	   |      add.l d0,d0
    9ba0:	   |      movea.l d1,a0
    9ba2:	   |      adda.l d0,a0
    9ba4:	   |      move.l (a0),d1
    9ba6:	   |      movea.l 152(sp),a0
    9baa:	   |      move.l 60(a0),d0
    9bae:	   |      add.l d0,d0
    9bb0:	   |      add.l d0,d0
    9bb2:	   |      movea.l d1,a0
    9bb4:	   |      adda.l d0,a0
    9bb6:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    9bba:	   |      moveq #-1,d0
    9bbc:	   |      cmp.l 144(sp),d0
    9bc0:	   |  ,-- bne.s 9bc8 <doBorderStuff+0x88>
    9bc2:	   |  |   clr.w d0
    9bc4:	,--|--|-- bra.w a1f0 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    9bc8:	|  |  '-> movea.l 1ce7e <currentFloor>,a0
    9bce:	|  |      move.l 12(a0),d1
    9bd2:	|  |      move.l 144(sp),d0
    9bd6:	|  |      lsl.l #3,d0
    9bd8:	|  |      add.l d0,d1
    9bda:	|  |      movea.l 1ce7e <currentFloor>,a0
    9be0:	|  |      movea.l 12(a0),a1
    9be4:	|  |      movea.l 152(sp),a0
    9be8:	|  |      move.l 56(a0),d0
    9bec:	|  |      lsl.l #3,d0
    9bee:	|  |      add.l a1,d0
    9bf0:	|  |      lea 40(sp),a0
    9bf4:	|  |      move.l a0,-(sp)
    9bf6:	|  |      lea 48(sp),a0
    9bfa:	|  |      move.l a0,-(sp)
    9bfc:	|  |      move.l d1,-(sp)
    9bfe:	|  |      move.l d0,-(sp)
    9c00:	|  |      jsr 1677e <getMatchingCorners>
    9c06:	|  |      lea 16(sp),sp
    9c0a:	|  |      tst.w d0
    9c0c:	|  |  ,-- bne.s 9c22 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9c0e:	|  |  |   pea 194ce <PutChar+0x1514>
    9c14:	|  |  |   jsr 17518 <KPrintF>
    9c1a:	|  |  |   addq.l #4,sp
            return FALSE;
    9c1c:	|  |  |   clr.w d0
    9c1e:	+--|--|-- bra.w a1f0 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9c22:	|  |  '-> movea.l 152(sp),a0
    9c26:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9c2c:	|  |      movea.l 152(sp),a0
    9c30:	|  |      move.l (a0),d0
    9c32:	|  |      move.l d0,-(sp)
    9c34:	|  |      jsr 178e2 <__fixsfsi>
    9c3a:	|  |      addq.l #4,sp
    9c3c:	|  |      move.l d0,140(sp)
    9c40:	|  |      movea.l 152(sp),a0
    9c44:	|  |      move.l 4(a0),d0
    9c48:	|  |      move.l d0,-(sp)
    9c4a:	|  |      jsr 178e2 <__fixsfsi>
    9c50:	|  |      addq.l #4,sp
    9c52:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    9c56:	|  |      movea.l 152(sp),a0
    9c5a:	|  |      move.l 40(a0),132(sp)
    9c60:	|  |      movea.l 152(sp),a0
    9c64:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9c6a:	|  |      movea.l 1ce7e <currentFloor>,a0
    9c70:	|  |      move.l 4(a0),d1
    9c74:	|  |      move.l 44(sp),d0
    9c78:	|  |      lsl.l #3,d0
    9c7a:	|  |      movea.l d1,a0
    9c7c:	|  |      adda.l d0,a0
    9c7e:	|  |      move.l (a0),124(sp)
    9c82:	|  |      movea.l 1ce7e <currentFloor>,a0
    9c88:	|  |      move.l 4(a0),d1
    9c8c:	|  |      move.l 44(sp),d0
    9c90:	|  |      lsl.l #3,d0
    9c92:	|  |      movea.l d1,a0
    9c94:	|  |      adda.l d0,a0
    9c96:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    9c9c:	|  |      movea.l 1ce7e <currentFloor>,a0
    9ca2:	|  |      move.l 4(a0),d1
    9ca6:	|  |      move.l 40(sp),d0
    9caa:	|  |      lsl.l #3,d0
    9cac:	|  |      movea.l d1,a0
    9cae:	|  |      adda.l d0,a0
    9cb0:	|  |      move.l (a0),116(sp)
    9cb4:	|  |      movea.l 1ce7e <currentFloor>,a0
    9cba:	|  |      move.l 4(a0),d1
    9cbe:	|  |      move.l 40(sp),d0
    9cc2:	|  |      lsl.l #3,d0
    9cc4:	|  |      movea.l d1,a0
    9cc6:	|  |      adda.l d0,a0
    9cc8:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    9cce:	|  |      move.l 140(sp),d0
    9cd2:	|  |      sub.l 132(sp),d0
    9cd6:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    9cda:	|  |      move.l 136(sp),d0
    9cde:	|  |      sub.l 128(sp),d0
    9ce2:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    9ce6:	|  |      move.l 116(sp),d0
    9cea:	|  |      sub.l 124(sp),d0
    9cee:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9cf2:	|  |      move.l 112(sp),d0
    9cf6:	|  |      sub.l 120(sp),d0
    9cfa:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9cfe:	|  |      move.l 124(sp),d0
    9d02:	|  |      sub.l 140(sp),d0
    9d06:	|  |      move.l 104(sp),-(sp)
    9d0a:	|  |      move.l d0,-(sp)
    9d0c:	|  |      jsr 17ea4 <__mulsi3>
    9d12:	|  |      addq.l #8,sp
    9d14:	|  |      move.l d0,d2
    9d16:	|  |      move.l 120(sp),d0
    9d1a:	|  |      sub.l 136(sp),d0
    9d1e:	|  |      move.l 108(sp),-(sp)
    9d22:	|  |      move.l d0,-(sp)
    9d24:	|  |      jsr 17ea4 <__mulsi3>
    9d2a:	|  |      addq.l #8,sp
    9d2c:	|  |      move.l d2,d1
    9d2e:	|  |      sub.l d0,d1
    9d30:	|  |      move.l d1,-(sp)
    9d32:	|  |      jsr 1790a <__floatsidf>
    9d38:	|  |      addq.l #4,sp
    9d3a:	|  |      move.l d0,32(sp)
    9d3e:	|  |      move.l d1,36(sp)
    9d42:	|  |      move.l 32(sp),88(sp)
    9d48:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9d4e:	|  |      move.l 96(sp),-(sp)
    9d52:	|  |      move.l 112(sp),-(sp)
    9d56:	|  |      jsr 17ea4 <__mulsi3>
    9d5c:	|  |      addq.l #8,sp
    9d5e:	|  |      move.l d0,d2
    9d60:	|  |      move.l 100(sp),-(sp)
    9d64:	|  |      move.l 108(sp),-(sp)
    9d68:	|  |      jsr 17ea4 <__mulsi3>
    9d6e:	|  |      addq.l #8,sp
    9d70:	|  |      move.l d2,d1
    9d72:	|  |      sub.l d0,d1
    9d74:	|  |      move.l d1,-(sp)
    9d76:	|  |      jsr 1790a <__floatsidf>
    9d7c:	|  |      addq.l #4,sp
    9d7e:	|  |      move.l d1,-(sp)
    9d80:	|  |      move.l d0,-(sp)
    9d82:	|  |      move.l 100(sp),-(sp)
    9d86:	|  |      move.l 100(sp),-(sp)
    9d8a:	|  |      jsr 1779e <__divdf3>
    9d90:	|  |      lea 16(sp),sp
    9d94:	|  |      move.l d0,24(sp)
    9d98:	|  |      move.l d1,28(sp)
    9d9c:	|  |      move.l 24(sp),88(sp)
    9da2:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    9da8:	|  |      clr.l -(sp)
    9daa:	|  |      clr.l -(sp)
    9dac:	|  |      move.l 100(sp),-(sp)
    9db0:	|  |      move.l 100(sp),-(sp)
    9db4:	|  |      jsr 17a68 <__gtdf2>
    9dba:	|  |      lea 16(sp),sp
    9dbe:	|  |      tst.l d0
    9dc0:	|  |  ,-- ble.w 9e98 <doBorderStuff+0x358>
    9dc4:	|  |  |   clr.l -(sp)
    9dc6:	|  |  |   move.l #1072693248,-(sp)
    9dcc:	|  |  |   move.l 100(sp),-(sp)
    9dd0:	|  |  |   move.l 100(sp),-(sp)
    9dd4:	|  |  |   jsr 17b22 <__ltdf2>
    9dda:	|  |  |   lea 16(sp),sp
    9dde:	|  |  |   tst.l d0
    9de0:	|  |  +-- bge.w 9e98 <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    9de4:	|  |  |   move.l 124(sp),-(sp)
    9de8:	|  |  |   jsr 1790a <__floatsidf>
    9dee:	|  |  |   addq.l #4,sp
    9df0:	|  |  |   move.l d0,d2
    9df2:	|  |  |   move.l d1,d3
    9df4:	|  |  |   move.l 100(sp),-(sp)
    9df8:	|  |  |   jsr 1790a <__floatsidf>
    9dfe:	|  |  |   addq.l #4,sp
    9e00:	|  |  |   move.l 92(sp),-(sp)
    9e04:	|  |  |   move.l 92(sp),-(sp)
    9e08:	|  |  |   move.l d1,-(sp)
    9e0a:	|  |  |   move.l d0,-(sp)
    9e0c:	|  |  |   jsr 1799a <__muldf3>
    9e12:	|  |  |   lea 16(sp),sp
    9e16:	|  |  |   move.l d1,-(sp)
    9e18:	|  |  |   move.l d0,-(sp)
    9e1a:	|  |  |   move.l d3,-(sp)
    9e1c:	|  |  |   move.l d2,-(sp)
    9e1e:	|  |  |   jsr 1773c <__adddf3>
    9e24:	|  |  |   lea 16(sp),sp
    9e28:	|  |  |   move.l d1,-(sp)
    9e2a:	|  |  |   move.l d0,-(sp)
    9e2c:	|  |  |   jsr 178ac <__fixdfsi>
    9e32:	|  |  |   addq.l #8,sp
    9e34:	|  |  |   movea.l 152(sp),a0
    9e38:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9e3c:	|  |  |   move.l 120(sp),-(sp)
    9e40:	|  |  |   jsr 1790a <__floatsidf>
    9e46:	|  |  |   addq.l #4,sp
    9e48:	|  |  |   move.l d0,d2
    9e4a:	|  |  |   move.l d1,d3
    9e4c:	|  |  |   move.l 96(sp),-(sp)
    9e50:	|  |  |   jsr 1790a <__floatsidf>
    9e56:	|  |  |   addq.l #4,sp
    9e58:	|  |  |   move.l 92(sp),-(sp)
    9e5c:	|  |  |   move.l 92(sp),-(sp)
    9e60:	|  |  |   move.l d1,-(sp)
    9e62:	|  |  |   move.l d0,-(sp)
    9e64:	|  |  |   jsr 1799a <__muldf3>
    9e6a:	|  |  |   lea 16(sp),sp
    9e6e:	|  |  |   move.l d1,-(sp)
    9e70:	|  |  |   move.l d0,-(sp)
    9e72:	|  |  |   move.l d3,-(sp)
    9e74:	|  |  |   move.l d2,-(sp)
    9e76:	|  |  |   jsr 1773c <__adddf3>
    9e7c:	|  |  |   lea 16(sp),sp
    9e80:	|  |  |   move.l d1,-(sp)
    9e82:	|  |  |   move.l d0,-(sp)
    9e84:	|  |  |   jsr 178ac <__fixdfsi>
    9e8a:	|  |  |   addq.l #8,sp
    9e8c:	|  |  |   movea.l 152(sp),a0
    9e90:	|  |  |   move.l d0,52(a0)
    9e94:	|  +--|-- bra.w a0f0 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    9e98:	|  |  '-> move.l 140(sp),d0
    9e9c:	|  |      sub.l 124(sp),d0
    9ea0:	|  |      move.l d0,84(sp)
    9ea4:	|  |      move.l 140(sp),d0
    9ea8:	|  |      sub.l 116(sp),d0
    9eac:	|  |      move.l d0,80(sp)
    9eb0:	|  |      move.l 132(sp),d0
    9eb4:	|  |      sub.l 124(sp),d0
    9eb8:	|  |      move.l d0,76(sp)
    9ebc:	|  |      move.l 132(sp),d0
    9ec0:	|  |      sub.l 116(sp),d0
    9ec4:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    9ec8:	|  |      move.l 136(sp),d0
    9ecc:	|  |      sub.l 120(sp),d0
    9ed0:	|  |      move.l d0,68(sp)
    9ed4:	|  |      move.l 136(sp),d0
    9ed8:	|  |      sub.l 112(sp),d0
    9edc:	|  |      move.l d0,64(sp)
    9ee0:	|  |      move.l 128(sp),d0
    9ee4:	|  |      sub.l 120(sp),d0
    9ee8:	|  |      move.l d0,60(sp)
    9eec:	|  |      move.l 128(sp),d0
    9ef0:	|  |      sub.l 112(sp),d0
    9ef4:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    9ef8:	|  |      move.l 84(sp),-(sp)
    9efc:	|  |      move.l 88(sp),-(sp)
    9f00:	|  |      jsr 17ea4 <__mulsi3>
    9f06:	|  |      addq.l #8,sp
    9f08:	|  |      move.l d0,84(sp)
    9f0c:	|  |      move.l 80(sp),-(sp)
    9f10:	|  |      move.l 84(sp),-(sp)
    9f14:	|  |      jsr 17ea4 <__mulsi3>
    9f1a:	|  |      addq.l #8,sp
    9f1c:	|  |      move.l d0,80(sp)
    9f20:	|  |      move.l 76(sp),-(sp)
    9f24:	|  |      move.l 80(sp),-(sp)
    9f28:	|  |      jsr 17ea4 <__mulsi3>
    9f2e:	|  |      addq.l #8,sp
    9f30:	|  |      move.l d0,76(sp)
    9f34:	|  |      move.l 72(sp),-(sp)
    9f38:	|  |      move.l 76(sp),-(sp)
    9f3c:	|  |      jsr 17ea4 <__mulsi3>
    9f42:	|  |      addq.l #8,sp
    9f44:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    9f48:	|  |      move.l 68(sp),-(sp)
    9f4c:	|  |      move.l 72(sp),-(sp)
    9f50:	|  |      jsr 17ea4 <__mulsi3>
    9f56:	|  |      addq.l #8,sp
    9f58:	|  |      move.l d0,68(sp)
    9f5c:	|  |      move.l 64(sp),-(sp)
    9f60:	|  |      move.l 68(sp),-(sp)
    9f64:	|  |      jsr 17ea4 <__mulsi3>
    9f6a:	|  |      addq.l #8,sp
    9f6c:	|  |      move.l d0,64(sp)
    9f70:	|  |      move.l 60(sp),-(sp)
    9f74:	|  |      move.l 64(sp),-(sp)
    9f78:	|  |      jsr 17ea4 <__mulsi3>
    9f7e:	|  |      addq.l #8,sp
    9f80:	|  |      move.l d0,60(sp)
    9f84:	|  |      move.l 56(sp),-(sp)
    9f88:	|  |      move.l 60(sp),-(sp)
    9f8c:	|  |      jsr 17ea4 <__mulsi3>
    9f92:	|  |      addq.l #8,sp
    9f94:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    9f98:	|  |      move.l 84(sp),-(sp)
    9f9c:	|  |      jsr 1790a <__floatsidf>
    9fa2:	|  |      addq.l #4,sp
    9fa4:	|  |      move.l d0,d2
    9fa6:	|  |      move.l d1,d3
    9fa8:	|  |      move.l 68(sp),-(sp)
    9fac:	|  |      jsr 1790a <__floatsidf>
    9fb2:	|  |      addq.l #4,sp
    9fb4:	|  |      move.l d1,-(sp)
    9fb6:	|  |      move.l d0,-(sp)
    9fb8:	|  |      move.l d3,-(sp)
    9fba:	|  |      move.l d2,-(sp)
    9fbc:	|  |      jsr 1773c <__adddf3>
    9fc2:	|  |      lea 16(sp),sp
    9fc6:	|  |      move.l d1,-(sp)
    9fc8:	|  |      move.l d0,-(sp)
    9fca:	|  |      jsr 17e5a <sqrt>
    9fd0:	|  |      addq.l #8,sp
    9fd2:	|  |      move.l d0,d2
    9fd4:	|  |      move.l d1,d3
    9fd6:	|  |      move.l 76(sp),-(sp)
    9fda:	|  |      jsr 1790a <__floatsidf>
    9fe0:	|  |      addq.l #4,sp
    9fe2:	|  |      move.l d0,d4
    9fe4:	|  |      move.l d1,d5
    9fe6:	|  |      move.l 60(sp),-(sp)
    9fea:	|  |      jsr 1790a <__floatsidf>
    9ff0:	|  |      addq.l #4,sp
    9ff2:	|  |      move.l d1,-(sp)
    9ff4:	|  |      move.l d0,-(sp)
    9ff6:	|  |      move.l d5,-(sp)
    9ff8:	|  |      move.l d4,-(sp)
    9ffa:	|  |      jsr 1773c <__adddf3>
    a000:	|  |      lea 16(sp),sp
    a004:	|  |      move.l d1,-(sp)
    a006:	|  |      move.l d0,-(sp)
    a008:	|  |      jsr 17e5a <sqrt>
    a00e:	|  |      addq.l #8,sp
    a010:	|  |      move.l d1,-(sp)
    a012:	|  |      move.l d0,-(sp)
    a014:	|  |      move.l d3,-(sp)
    a016:	|  |      move.l d2,-(sp)
    a018:	|  |      jsr 1773c <__adddf3>
    a01e:	|  |      lea 16(sp),sp
    a022:	|  |      move.l d0,d2
    a024:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    a026:	|  |      move.l 80(sp),-(sp)
    a02a:	|  |      jsr 1790a <__floatsidf>
    a030:	|  |      addq.l #4,sp
    a032:	|  |      move.l d0,d4
    a034:	|  |      move.l d1,d5
    a036:	|  |      move.l 64(sp),-(sp)
    a03a:	|  |      jsr 1790a <__floatsidf>
    a040:	|  |      addq.l #4,sp
    a042:	|  |      move.l d1,-(sp)
    a044:	|  |      move.l d0,-(sp)
    a046:	|  |      move.l d5,-(sp)
    a048:	|  |      move.l d4,-(sp)
    a04a:	|  |      jsr 1773c <__adddf3>
    a050:	|  |      lea 16(sp),sp
    a054:	|  |      move.l d1,-(sp)
    a056:	|  |      move.l d0,-(sp)
    a058:	|  |      jsr 17e5a <sqrt>
    a05e:	|  |      addq.l #8,sp
    a060:	|  |      move.l d0,d4
    a062:	|  |      move.l d1,d5
    a064:	|  |      move.l 72(sp),-(sp)
    a068:	|  |      jsr 1790a <__floatsidf>
    a06e:	|  |      addq.l #4,sp
    a070:	|  |      move.l d0,d6
    a072:	|  |      move.l d1,d7
    a074:	|  |      move.l 56(sp),-(sp)
    a078:	|  |      jsr 1790a <__floatsidf>
    a07e:	|  |      addq.l #4,sp
    a080:	|  |      move.l d1,-(sp)
    a082:	|  |      move.l d0,-(sp)
    a084:	|  |      move.l d7,-(sp)
    a086:	|  |      move.l d6,-(sp)
    a088:	|  |      jsr 1773c <__adddf3>
    a08e:	|  |      lea 16(sp),sp
    a092:	|  |      move.l d1,-(sp)
    a094:	|  |      move.l d0,-(sp)
    a096:	|  |      jsr 17e5a <sqrt>
    a09c:	|  |      addq.l #8,sp
    a09e:	|  |      move.l d1,-(sp)
    a0a0:	|  |      move.l d0,-(sp)
    a0a2:	|  |      move.l d5,-(sp)
    a0a4:	|  |      move.l d4,-(sp)
    a0a6:	|  |      jsr 1773c <__adddf3>
    a0ac:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    a0b0:	|  |      move.l d1,-(sp)
    a0b2:	|  |      move.l d0,-(sp)
    a0b4:	|  |      move.l d3,-(sp)
    a0b6:	|  |      move.l d2,-(sp)
    a0b8:	|  |      jsr 17b22 <__ltdf2>
    a0be:	|  |      lea 16(sp),sp
    a0c2:	|  |      tst.l d0
    a0c4:	|  |  ,-- bge.s a0dc <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    a0c6:	|  |  |   movea.l 152(sp),a0
    a0ca:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    a0d0:	|  |  |   movea.l 152(sp),a0
    a0d4:	|  |  |   move.l 120(sp),52(a0)
    a0da:	|  +--|-- bra.s a0f0 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    a0dc:	|  |  '-> movea.l 152(sp),a0
    a0e0:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    a0e6:	|  |      movea.l 152(sp),a0
    a0ea:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    a0f0:	|  '----> movea.l 152(sp),a0
    a0f4:	|         move.l 52(a0),d0
    a0f8:	|         move.l d0,-(sp)
    a0fa:	|         jsr 1794a <__floatsisf>
    a100:	|         addq.l #4,sp
    a102:	|         move.l d0,d1
    a104:	|         movea.l 152(sp),a0
    a108:	|         move.l 4(a0),d0
    a10c:	|         move.l d0,-(sp)
    a10e:	|         move.l d1,-(sp)
    a110:	|         jsr 17c3e <__subsf3>
    a116:	|         addq.l #8,sp
    a118:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    a11c:	|         movea.l 152(sp),a0
    a120:	|         move.l (a0),d2
    a122:	|         movea.l 152(sp),a0
    a126:	|         move.l 48(a0),d0
    a12a:	|         move.l d0,-(sp)
    a12c:	|         jsr 1794a <__floatsisf>
    a132:	|         addq.l #4,sp
    a134:	|         move.l d0,-(sp)
    a136:	|         move.l d2,-(sp)
    a138:	|         jsr 17c3e <__subsf3>
    a13e:	|         addq.l #8,sp
    a140:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    a144:	|         clr.l -(sp)
    a146:	|         move.l 52(sp),-(sp)
    a14a:	|         jsr 17ba6 <__nesf2>
    a150:	|         addq.l #8,sp
    a152:	|         tst.l d0
    a154:	|     ,-- bne.s a168 <doBorderStuff+0x628>
    a156:	|     |   clr.l -(sp)
    a158:	|     |   move.l 56(sp),-(sp)
    a15c:	|     |   jsr 17ba6 <__nesf2>
    a162:	|     |   addq.l #8,sp
    a164:	|     |   tst.l d0
    a166:	|  ,--|-- beq.s a1de <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    a168:	|  |  '-> move.l 52(sp),d0
    a16c:	|  |      move.l d0,-(sp)
    a16e:	|  |      move.l d0,-(sp)
    a170:	|  |      jsr 17706 <__addsf3>
    a176:	|  |      addq.l #8,sp
    a178:	|  |      move.l d0,-(sp)
    a17a:	|  |      move.l 52(sp),-(sp)
    a17e:	|  |      jsr 17caa <atan2f>
    a184:	|  |      addq.l #8,sp
    a186:	|  |      move.l d0,-(sp)
    a188:	|  |      jsr 1786c <__extendsfdf2>
    a18e:	|  |      addq.l #4,sp
    a190:	|  |      move.l #-1540411785,-(sp)
    a196:	|  |      move.l #1078765033,-(sp)
    a19c:	|  |      move.l d1,-(sp)
    a19e:	|  |      move.l d0,-(sp)
    a1a0:	|  |      jsr 1799a <__muldf3>
    a1a6:	|  |      lea 16(sp),sp
    a1aa:	|  |      clr.l -(sp)
    a1ac:	|  |      move.l #1080459264,-(sp)
    a1b2:	|  |      move.l d1,-(sp)
    a1b4:	|  |      move.l d0,-(sp)
    a1b6:	|  |      jsr 1773c <__adddf3>
    a1bc:	|  |      lea 16(sp),sp
    a1c0:	|  |      move.l d1,-(sp)
    a1c2:	|  |      move.l d0,-(sp)
    a1c4:	|  |      jsr 178ac <__fixdfsi>
    a1ca:	|  |      addq.l #8,sp
    a1cc:	|  |      movea.l 152(sp),a0
    a1d0:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    a1d4:	|  |      movea.l 152(sp),a0
    a1d8:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    a1de:	|  '----> pea 1 <_start+0x1>
    a1e2:	|         move.l 156(sp),-(sp)
    a1e6:	|         jsr 437a <setFrames>
    a1ec:	|         addq.l #8,sp
    return TRUE;
    a1ee:	|         moveq #1,d0
}
    a1f0:	'-------> movem.l (sp)+,d2-d7
    a1f4:	          lea 124(sp),sp
    a1f8:	          rts

0000a1fa <drawPeople>:

void drawPeople () {
    a1fa:	                   lea -24(sp),sp
    a1fe:	                   move.l d2,-(sp)

	shufflePeople ();
    a200:	                   jsr bcf8 <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    a206:	                   move.l 1cdc6 <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    a20e:	                   clr.l 20(sp)
	overRegion = NULL;
    a212:	                   clr.l 1ce76 <overRegion>

	while (thisPerson) {
    a218:	   ,-------------- bra.w a7ca <drawPeople+0x5d0>
		if (thisPerson -> show) {
    a21c:	,--|-------------> movea.l 24(sp),a0
    a220:	|  |               move.w 104(a0),d0
    a224:	|  |  ,----------- beq.w a57e <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    a228:	|  |  |            movea.l 24(sp),a0
    a22c:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    a232:	|  |  |            movea.l 24(sp),a0
    a236:	|  |  |            move.l 76(a0),d0
    a23a:	|  |  |            cmp.l 20(sp),d0
    a23e:	|  |  |  ,-------- beq.w a40c <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    a242:	|  |  |  |         movea.l 24(sp),a0
    a246:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    a24a:	|  |  |  |         movea.l 24(sp),a0
    a24e:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    a254:	|  |  |  |         movea.l 24(sp),a0
    a258:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    a25c:	|  |  |  |         movea.l 20(sp),a0
    a260:	|  |  |  |         movea.l 4(a0),a0
    a264:	|  |  |  |         move.l 4(a0),d0
    a268:	|  |  |  |         movea.l 24(sp),a0
    a26c:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a270:	|  |  |  |         movea.l 20(sp),a0
    a274:	|  |  |  |         movea.l 4(a0),a1
    a278:	|  |  |  |         movea.l 24(sp),a0
    a27c:	|  |  |  |         move.l 84(a0),d0
    a280:	|  |  |  |         move.l d0,d1
    a282:	|  |  |  |         move.l d1,d0
    a284:	|  |  |  |         add.l d0,d0
    a286:	|  |  |  |         add.l d1,d0
    a288:	|  |  |  |         add.l d0,d0
    a28a:	|  |  |  |         add.l d0,d0
    a28c:	|  |  |  |         lea (0,a1,d0.l),a0
    a290:	|  |  |  |         move.l 8(a0),d0
    a294:	|  |  |  |     ,-- ble.w a336 <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a298:	|  |  |  |     |   movea.l 20(sp),a0
    a29c:	|  |  |  |     |   movea.l 4(a0),a1
    a2a0:	|  |  |  |     |   movea.l 24(sp),a0
    a2a4:	|  |  |  |     |   move.l 84(a0),d0
    a2a8:	|  |  |  |     |   move.l d0,d1
    a2aa:	|  |  |  |     |   move.l d1,d0
    a2ac:	|  |  |  |     |   add.l d0,d0
    a2ae:	|  |  |  |     |   add.l d1,d0
    a2b0:	|  |  |  |     |   add.l d0,d0
    a2b2:	|  |  |  |     |   add.l d0,d0
    a2b4:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a2b8:	|  |  |  |     |   move.l 8(a0),d0
    a2bc:	|  |  |  |     |   clr.l -(sp)
    a2be:	|  |  |  |     |   move.l d0,-(sp)
    a2c0:	|  |  |  |     |   jsr d40c <startSound>
    a2c6:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a2c8:	|  |  |  |     |   movea.l 24(sp),a0
    a2cc:	|  |  |  |     |   move.l 84(a0),d0
    a2d0:	|  |  |  |     |   addq.l #1,d0
    a2d2:	|  |  |  |     |   movea.l 24(sp),a0
    a2d6:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a2da:	|  |  |  |     |   movea.l 24(sp),a0
    a2de:	|  |  |  |     |   move.l 84(a0),d0
    a2e2:	|  |  |  |     |   movea.l 24(sp),a0
    a2e6:	|  |  |  |     |   movea.l 72(a0),a0
    a2ea:	|  |  |  |     |   move.l 8(a0),d1
    a2ee:	|  |  |  |     |   move.l d1,-(sp)
    a2f0:	|  |  |  |     |   move.l d0,-(sp)
    a2f2:	|  |  |  |     |   jsr 17f50 <__modsi3>
    a2f8:	|  |  |  |     |   addq.l #8,sp
    a2fa:	|  |  |  |     |   movea.l 24(sp),a0
    a2fe:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a302:	|  |  |  |     |   movea.l 24(sp),a0
    a306:	|  |  |  |     |   movea.l 72(a0),a0
    a30a:	|  |  |  |     |   movea.l 4(a0),a1
    a30e:	|  |  |  |     |   movea.l 24(sp),a0
    a312:	|  |  |  |     |   move.l 84(a0),d0
    a316:	|  |  |  |     |   move.l d0,d1
    a318:	|  |  |  |     |   move.l d1,d0
    a31a:	|  |  |  |     |   add.l d0,d0
    a31c:	|  |  |  |     |   add.l d1,d0
    a31e:	|  |  |  |     |   add.l d0,d0
    a320:	|  |  |  |     |   add.l d0,d0
    a322:	|  |  |  |     |   lea (0,a1,d0.l),a0
    a326:	|  |  |  |     |   move.l 4(a0),d0
    a32a:	|  |  |  |     |   movea.l 24(sp),a0
    a32e:	|  |  |  |     |   move.l d0,88(a0)
    a332:	|  |  |  |  ,--|-- bra.w a474 <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a336:	|  |  |  |  |  '-> movea.l 20(sp),a0
    a33a:	|  |  |  |  |      movea.l 4(a0),a1
    a33e:	|  |  |  |  |      movea.l 24(sp),a0
    a342:	|  |  |  |  |      move.l 84(a0),d0
    a346:	|  |  |  |  |      move.l d0,d1
    a348:	|  |  |  |  |      move.l d1,d0
    a34a:	|  |  |  |  |      add.l d0,d0
    a34c:	|  |  |  |  |      add.l d1,d0
    a34e:	|  |  |  |  |      add.l d0,d0
    a350:	|  |  |  |  |      add.l d0,d0
    a352:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a356:	|  |  |  |  |      move.l 8(a0),d0
    a35a:	|  |  |  |  +----- beq.w a474 <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a35e:	|  |  |  |  |      movea.l 1cd36 <noStack>,a1
    a364:	|  |  |  |  |      movea.l 20(sp),a0
    a368:	|  |  |  |  |      move.l 4(a0),d2
    a36c:	|  |  |  |  |      movea.l 24(sp),a0
    a370:	|  |  |  |  |      move.l 84(a0),d0
    a374:	|  |  |  |  |      move.l d0,d1
    a376:	|  |  |  |  |      move.l d1,d0
    a378:	|  |  |  |  |      add.l d0,d0
    a37a:	|  |  |  |  |      add.l d1,d0
    a37c:	|  |  |  |  |      add.l d0,d0
    a37e:	|  |  |  |  |      add.l d0,d0
    a380:	|  |  |  |  |      movea.l d2,a0
    a382:	|  |  |  |  |      adda.l d0,a0
    a384:	|  |  |  |  |      move.l 8(a0),d0
    a388:	|  |  |  |  |      neg.l d0
    a38a:	|  |  |  |  |      pea 1 <_start+0x1>
    a38e:	|  |  |  |  |      move.l a1,-(sp)
    a390:	|  |  |  |  |      clr.l -(sp)
    a392:	|  |  |  |  |      clr.l -(sp)
    a394:	|  |  |  |  |      move.l d0,-(sp)
    a396:	|  |  |  |  |      jsr 76a6 <startNewFunctionNum>
    a39c:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a3a0:	|  |  |  |  |      movea.l 24(sp),a0
    a3a4:	|  |  |  |  |      move.l 84(a0),d0
    a3a8:	|  |  |  |  |      addq.l #1,d0
    a3aa:	|  |  |  |  |      movea.l 24(sp),a0
    a3ae:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a3b2:	|  |  |  |  |      movea.l 24(sp),a0
    a3b6:	|  |  |  |  |      move.l 84(a0),d0
    a3ba:	|  |  |  |  |      movea.l 24(sp),a0
    a3be:	|  |  |  |  |      movea.l 72(a0),a0
    a3c2:	|  |  |  |  |      move.l 8(a0),d1
    a3c6:	|  |  |  |  |      move.l d1,-(sp)
    a3c8:	|  |  |  |  |      move.l d0,-(sp)
    a3ca:	|  |  |  |  |      jsr 17f50 <__modsi3>
    a3d0:	|  |  |  |  |      addq.l #8,sp
    a3d2:	|  |  |  |  |      movea.l 24(sp),a0
    a3d6:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a3da:	|  |  |  |  |      movea.l 24(sp),a0
    a3de:	|  |  |  |  |      movea.l 72(a0),a0
    a3e2:	|  |  |  |  |      movea.l 4(a0),a1
    a3e6:	|  |  |  |  |      movea.l 24(sp),a0
    a3ea:	|  |  |  |  |      move.l 84(a0),d0
    a3ee:	|  |  |  |  |      move.l d0,d1
    a3f0:	|  |  |  |  |      move.l d1,d0
    a3f2:	|  |  |  |  |      add.l d0,d0
    a3f4:	|  |  |  |  |      add.l d1,d0
    a3f6:	|  |  |  |  |      add.l d0,d0
    a3f8:	|  |  |  |  |      add.l d0,d0
    a3fa:	|  |  |  |  |      lea (0,a1,d0.l),a0
    a3fe:	|  |  |  |  |      move.l 4(a0),d0
    a402:	|  |  |  |  |      movea.l 24(sp),a0
    a406:	|  |  |  |  |      move.l d0,88(a0)
    a40a:	|  |  |  |  +----- bra.s a474 <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    a40c:	|  |  |  '--|----> movea.l 24(sp),a0
    a410:	|  |  |     |      move.l (a0),d0
    a412:	|  |  |     |      movea.l 24(sp),a0
    a416:	|  |  |     |      move.l 8(a0),d1
    a41a:	|  |  |     |      move.l d1,-(sp)
    a41c:	|  |  |     |      move.l d0,-(sp)
    a41e:	|  |  |     |      jsr 17836 <__eqsf2>
    a424:	|  |  |     |      addq.l #8,sp
    a426:	|  |  |     |      tst.l d0
    a428:	|  |  |     |  ,-- bne.s a46c <drawPeople+0x272>
    a42a:	|  |  |     |  |   movea.l 24(sp),a0
    a42e:	|  |  |     |  |   move.l 4(a0),d0
    a432:	|  |  |     |  |   movea.l 24(sp),a0
    a436:	|  |  |     |  |   move.l 12(a0),d1
    a43a:	|  |  |     |  |   move.l d1,-(sp)
    a43c:	|  |  |     |  |   move.l d0,-(sp)
    a43e:	|  |  |     |  |   jsr 17836 <__eqsf2>
    a444:	|  |  |     |  |   addq.l #8,sp
    a446:	|  |  |     |  |   tst.l d0
    a448:	|  |  |     |  +-- bne.s a46c <drawPeople+0x272>
    a44a:	|  |  |     |  |   movea.l 20(sp),a0
    a44e:	|  |  |     |  |   move.l 8(a0),d0
    a452:	|  |  |     |  |   moveq #1,d1
    a454:	|  |  |     |  |   cmp.l d0,d1
    a456:	|  |  |     |  +-- bne.s a46c <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    a458:	|  |  |     |  |   movea.l 24(sp),a0
    a45c:	|  |  |     |  |   move.l 16(a0),d0
    a460:	|  |  |     |  |   addq.l #1,d0
    a462:	|  |  |     |  |   movea.l 24(sp),a0
    a466:	|  |  |     |  |   move.l d0,16(a0)
    a46a:	|  |  |     +--|-- bra.s a474 <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    a46c:	|  |  |     |  '-> movea.l 24(sp),a0
    a470:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    a474:	|  |  |     '----> movea.l 24(sp),a0
    a478:	|  |  |            move.l (a0),d0
    a47a:	|  |  |            movea.l 24(sp),a0
    a47e:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    a482:	|  |  |            movea.l 24(sp),a0
    a486:	|  |  |            move.l 4(a0),d0
    a48a:	|  |  |            movea.l 24(sp),a0
    a48e:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    a492:	|  |  |            movea.l 20(sp),a0
    a496:	|  |  |            movea.l 4(a0),a1
    a49a:	|  |  |            movea.l 24(sp),a0
    a49e:	|  |  |            move.l 84(a0),d0
    a4a2:	|  |  |            move.l d0,d1
    a4a4:	|  |  |            move.l d1,d0
    a4a6:	|  |  |            add.l d0,d0
    a4a8:	|  |  |            add.l d1,d0
    a4aa:	|  |  |            add.l d0,d0
    a4ac:	|  |  |            add.l d0,d0
    a4ae:	|  |  |            lea (0,a1,d0.l),a0
    a4b2:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    a4b6:	|  |  |            move.l 8(sp),d0
    a4ba:	|  |  |            add.l d0,d0
    a4bc:	|  |  |            subx.l d0,d0
    a4be:	|  |  |            neg.l d0
    a4c0:	|  |  |            move.b d0,d0
    a4c2:	|  |  |            move.b d0,d0
    a4c4:	|  |  |            andi.l #255,d0
    a4ca:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    a4ce:	|  |  |            move.l 8(sp),-(sp)
    a4d2:	|  |  |            jsr 93ce <TF_abs>
    a4d8:	|  |  |            addq.l #4,sp
    a4da:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    a4de:	|  |  |            movea.l 20(sp),a0
    a4e2:	|  |  |            movea.l (a0),a0
    a4e4:	|  |  |            move.l 8(a0),d0
    a4e8:	|  |  |            cmp.l 12(sp),d0
    a4ec:	|  |  |        ,-- bgt.s a4fc <drawPeople+0x302>
				fNum = 0;
    a4ee:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    a4f2:	|  |  |        |   moveq #2,d0
    a4f4:	|  |  |        |   sub.l 16(sp),d0
    a4f8:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    a4fc:	|  |  |        '-> moveq #2,d1
    a4fe:	|  |  |            cmp.l 16(sp),d1
    a502:	|  |  +----------- beq.s a57e <drawPeople+0x384>
				BOOL r = FALSE;
    a504:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    a508:	|  |  |            move.l 16(sp),d0
    a50c:	|  |  |            movea.w d0,a0
    a50e:	|  |  |            movea.l 20(sp),a1
    a512:	|  |  |            movea.l (a1),a1
    a514:	|  |  |            movea.l 16(a1),a1
    a518:	|  |  |            move.l 12(sp),d1
    a51c:	|  |  |            move.l d1,d0
    a51e:	|  |  |            lsl.l #3,d0
    a520:	|  |  |            sub.l d1,d0
    a522:	|  |  |            add.l d0,d0
    a524:	|  |  |            add.l d0,d0
    a526:	|  |  |            add.l a1,d0
    a528:	|  |  |            move.l a0,-(sp)
    a52a:	|  |  |            move.l 28(sp),-(sp)
    a52e:	|  |  |            move.l d0,-(sp)
    a530:	|  |  |            jsr 90f0 <scaleSprite>
    a536:	|  |  |            lea 12(sp),sp
    a53a:	|  |  |            move.w d0,6(sp)
				if (r) {
    a53e:	|  |  +----------- beq.s a57e <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    a540:	|  |  |            movea.l 24(sp),a0
    a544:	|  |  |            movea.l 114(a0),a0
    a548:	|  |  |            movea.l (a0),a0
    a54a:	|  |  |            move.b (a0),d0
    a54c:	|  |  +----------- beq.s a57e <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    a54e:	|  |  |            move.l 1cde6 <personRegion+0x1c>,d1
    a554:	|  |  |            movea.l 24(sp),a0
    a558:	|  |  |            move.l 114(a0),d0
    a55c:	|  |  |            cmp.l d1,d0
    a55e:	|  |  |        ,-- beq.s a566 <drawPeople+0x36c>
    a560:	|  |  |        |   clr.l 1cd2e <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    a566:	|  |  |        '-> movea.l 24(sp),a0
    a56a:	|  |  |            move.l 114(a0),d0
    a56e:	|  |  |            move.l d0,1cde6 <personRegion+0x1c>
						overRegion = & personRegion;
    a574:	|  |  |            move.l #118218,1ce76 <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    a57e:	|  |  '----------> movea.l 24(sp),a0
    a582:	|  |               move.l 88(a0),d0
    a586:	|  |               subq.l #1,d0
    a588:	|  |               movea.l 24(sp),a0
    a58c:	|  |               move.l d0,88(a0)
    a590:	|  |               movea.l 24(sp),a0
    a594:	|  |               move.l 88(a0),d0
    a598:	|  |        ,----- bne.w a7c0 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    a59c:	|  |        |      movea.l 24(sp),a0
    a5a0:	|  |        |      move.l 84(a0),d0
    a5a4:	|  |        |      addq.l #1,d0
    a5a6:	|  |        |      movea.l 24(sp),a0
    a5aa:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a5ae:	|  |        |      movea.l 24(sp),a0
    a5b2:	|  |        |      move.l 84(a0),d0
    a5b6:	|  |        |      movea.l 24(sp),a0
    a5ba:	|  |        |      movea.l 72(a0),a0
    a5be:	|  |        |      move.l 8(a0),d1
    a5c2:	|  |        |      move.l d1,-(sp)
    a5c4:	|  |        |      move.l d0,-(sp)
    a5c6:	|  |        |      jsr 17f50 <__modsi3>
    a5cc:	|  |        |      addq.l #8,sp
    a5ce:	|  |        |      movea.l 24(sp),a0
    a5d2:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a5d6:	|  |        |      movea.l 24(sp),a0
    a5da:	|  |        |      movea.l 72(a0),a0
    a5de:	|  |        |      movea.l 4(a0),a1
    a5e2:	|  |        |      movea.l 24(sp),a0
    a5e6:	|  |        |      move.l 84(a0),d0
    a5ea:	|  |        |      move.l d0,d1
    a5ec:	|  |        |      move.l d1,d0
    a5ee:	|  |        |      add.l d0,d0
    a5f0:	|  |        |      add.l d1,d0
    a5f2:	|  |        |      add.l d0,d0
    a5f4:	|  |        |      add.l d0,d0
    a5f6:	|  |        |      lea (0,a1,d0.l),a0
    a5fa:	|  |        |      move.l 4(a0),d0
    a5fe:	|  |        |      movea.l 24(sp),a0
    a602:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    a606:	|  |        |      movea.l 24(sp),a0
    a60a:	|  |        |      move.w 104(a0),d0
    a60e:	|  |        +----- beq.w a7c0 <drawPeople+0x5c6>
    a612:	|  |        |      tst.l 20(sp)
    a616:	|  |        +----- beq.w a7c0 <drawPeople+0x5c6>
    a61a:	|  |        |      movea.l 20(sp),a0
    a61e:	|  |        |      move.l 4(a0),d0
    a622:	|  |        +----- beq.w a7c0 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    a626:	|  |        |      movea.l 20(sp),a0
    a62a:	|  |        |      movea.l 4(a0),a1
    a62e:	|  |        |      movea.l 24(sp),a0
    a632:	|  |        |      move.l 84(a0),d0
    a636:	|  |        |      move.l d0,d1
    a638:	|  |        |      move.l d1,d0
    a63a:	|  |        |      add.l d0,d0
    a63c:	|  |        |      add.l d1,d0
    a63e:	|  |        |      add.l d0,d0
    a640:	|  |        |      add.l d0,d0
    a642:	|  |        |      lea (0,a1,d0.l),a0
    a646:	|  |        |      move.l 8(a0),d0
    a64a:	|  |        |  ,-- ble.w a6ec <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    a64e:	|  |        |  |   movea.l 20(sp),a0
    a652:	|  |        |  |   movea.l 4(a0),a1
    a656:	|  |        |  |   movea.l 24(sp),a0
    a65a:	|  |        |  |   move.l 84(a0),d0
    a65e:	|  |        |  |   move.l d0,d1
    a660:	|  |        |  |   move.l d1,d0
    a662:	|  |        |  |   add.l d0,d0
    a664:	|  |        |  |   add.l d1,d0
    a666:	|  |        |  |   add.l d0,d0
    a668:	|  |        |  |   add.l d0,d0
    a66a:	|  |        |  |   lea (0,a1,d0.l),a0
    a66e:	|  |        |  |   move.l 8(a0),d0
    a672:	|  |        |  |   clr.l -(sp)
    a674:	|  |        |  |   move.l d0,-(sp)
    a676:	|  |        |  |   jsr d40c <startSound>
    a67c:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    a67e:	|  |        |  |   movea.l 24(sp),a0
    a682:	|  |        |  |   move.l 84(a0),d0
    a686:	|  |        |  |   addq.l #1,d0
    a688:	|  |        |  |   movea.l 24(sp),a0
    a68c:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a690:	|  |        |  |   movea.l 24(sp),a0
    a694:	|  |        |  |   move.l 84(a0),d0
    a698:	|  |        |  |   movea.l 24(sp),a0
    a69c:	|  |        |  |   movea.l 72(a0),a0
    a6a0:	|  |        |  |   move.l 8(a0),d1
    a6a4:	|  |        |  |   move.l d1,-(sp)
    a6a6:	|  |        |  |   move.l d0,-(sp)
    a6a8:	|  |        |  |   jsr 17f50 <__modsi3>
    a6ae:	|  |        |  |   addq.l #8,sp
    a6b0:	|  |        |  |   movea.l 24(sp),a0
    a6b4:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a6b8:	|  |        |  |   movea.l 24(sp),a0
    a6bc:	|  |        |  |   movea.l 72(a0),a0
    a6c0:	|  |        |  |   movea.l 4(a0),a1
    a6c4:	|  |        |  |   movea.l 24(sp),a0
    a6c8:	|  |        |  |   move.l 84(a0),d0
    a6cc:	|  |        |  |   move.l d0,d1
    a6ce:	|  |        |  |   move.l d1,d0
    a6d0:	|  |        |  |   add.l d0,d0
    a6d2:	|  |        |  |   add.l d1,d0
    a6d4:	|  |        |  |   add.l d0,d0
    a6d6:	|  |        |  |   add.l d0,d0
    a6d8:	|  |        |  |   lea (0,a1,d0.l),a0
    a6dc:	|  |        |  |   move.l 4(a0),d0
    a6e0:	|  |        |  |   movea.l 24(sp),a0
    a6e4:	|  |        |  |   move.l d0,88(a0)
    a6e8:	|  |        +--|-- bra.w a7c0 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a6ec:	|  |        |  '-> movea.l 20(sp),a0
    a6f0:	|  |        |      movea.l 4(a0),a1
    a6f4:	|  |        |      movea.l 24(sp),a0
    a6f8:	|  |        |      move.l 84(a0),d0
    a6fc:	|  |        |      move.l d0,d1
    a6fe:	|  |        |      move.l d1,d0
    a700:	|  |        |      add.l d0,d0
    a702:	|  |        |      add.l d1,d0
    a704:	|  |        |      add.l d0,d0
    a706:	|  |        |      add.l d0,d0
    a708:	|  |        |      lea (0,a1,d0.l),a0
    a70c:	|  |        |      move.l 8(a0),d0
    a710:	|  |        +----- beq.w a7c0 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a714:	|  |        |      movea.l 1cd36 <noStack>,a1
    a71a:	|  |        |      movea.l 20(sp),a0
    a71e:	|  |        |      move.l 4(a0),d2
    a722:	|  |        |      movea.l 24(sp),a0
    a726:	|  |        |      move.l 84(a0),d0
    a72a:	|  |        |      move.l d0,d1
    a72c:	|  |        |      move.l d1,d0
    a72e:	|  |        |      add.l d0,d0
    a730:	|  |        |      add.l d1,d0
    a732:	|  |        |      add.l d0,d0
    a734:	|  |        |      add.l d0,d0
    a736:	|  |        |      movea.l d2,a0
    a738:	|  |        |      adda.l d0,a0
    a73a:	|  |        |      move.l 8(a0),d0
    a73e:	|  |        |      neg.l d0
    a740:	|  |        |      pea 1 <_start+0x1>
    a744:	|  |        |      move.l a1,-(sp)
    a746:	|  |        |      clr.l -(sp)
    a748:	|  |        |      clr.l -(sp)
    a74a:	|  |        |      move.l d0,-(sp)
    a74c:	|  |        |      jsr 76a6 <startNewFunctionNum>
    a752:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a756:	|  |        |      movea.l 24(sp),a0
    a75a:	|  |        |      move.l 84(a0),d0
    a75e:	|  |        |      addq.l #1,d0
    a760:	|  |        |      movea.l 24(sp),a0
    a764:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a768:	|  |        |      movea.l 24(sp),a0
    a76c:	|  |        |      move.l 84(a0),d0
    a770:	|  |        |      movea.l 24(sp),a0
    a774:	|  |        |      movea.l 72(a0),a0
    a778:	|  |        |      move.l 8(a0),d1
    a77c:	|  |        |      move.l d1,-(sp)
    a77e:	|  |        |      move.l d0,-(sp)
    a780:	|  |        |      jsr 17f50 <__modsi3>
    a786:	|  |        |      addq.l #8,sp
    a788:	|  |        |      movea.l 24(sp),a0
    a78c:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a790:	|  |        |      movea.l 24(sp),a0
    a794:	|  |        |      movea.l 72(a0),a0
    a798:	|  |        |      movea.l 4(a0),a1
    a79c:	|  |        |      movea.l 24(sp),a0
    a7a0:	|  |        |      move.l 84(a0),d0
    a7a4:	|  |        |      move.l d0,d1
    a7a6:	|  |        |      move.l d1,d0
    a7a8:	|  |        |      add.l d0,d0
    a7aa:	|  |        |      add.l d1,d0
    a7ac:	|  |        |      add.l d0,d0
    a7ae:	|  |        |      add.l d0,d0
    a7b0:	|  |        |      lea (0,a1,d0.l),a0
    a7b4:	|  |        |      move.l 4(a0),d0
    a7b8:	|  |        |      movea.l 24(sp),a0
    a7bc:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a7c0:	|  |        '----> movea.l 24(sp),a0
    a7c4:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a7ca:	|  '-------------> tst.l 24(sp)
    a7ce:	'----------------- bne.w a21c <drawPeople+0x22>
	}
}
    a7d2:	                   nop
    a7d4:	                   nop
    a7d6:	                   move.l (sp)+,d2
    a7d8:	                   lea 24(sp),sp
    a7dc:	                   rts

0000a7de <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a7de:	          subq.l #4,sp
	KPrintF("findPerson started\n");
    a7e0:	          pea 194e6 <PutChar+0x152c>
    a7e6:	          jsr 17518 <KPrintF>
    a7ec:	          addq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a7ee:	          move.l 1cdc6 <allPeople>,(sp)
	while (thisPerson) {
    a7f4:	      ,-- bra.s a80c <findPerson+0x2e>
		if (v == thisPerson -> thisType -> objectNum) break;
    a7f6:	,-----|-> movea.l (sp),a0
    a7f8:	|     |   movea.l 114(a0),a0
    a7fc:	|     |   move.l 4(a0),d0
    a800:	|     |   cmp.l 8(sp),d0
    a804:	|  ,--|-- beq.s a812 <findPerson+0x34>
		thisPerson = thisPerson -> next;
    a806:	|  |  |   movea.l (sp),a0
    a808:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a80c:	|  |  '-> tst.l (sp)
    a80e:	'--|----- bne.s a7f6 <findPerson+0x18>
    a810:	   |  ,-- bra.s a814 <findPerson+0x36>
		if (v == thisPerson -> thisType -> objectNum) break;
    a812:	   '--|-> nop
	}
	KPrintF("findPerson complete\n");
    a814:	      '-> pea 194fa <PutChar+0x1540>
    a81a:	          jsr 17518 <KPrintF>
    a820:	          addq.l #4,sp
	return thisPerson;
    a822:	          move.l (sp),d0
}
    a824:	          addq.l #4,sp
    a826:	          rts

0000a828 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a828:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a82a:	       move.l 12(sp),-(sp)
    a82e:	       jsr a7de <findPerson>
    a834:	       addq.l #4,sp
    a836:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a838:	   ,-- bne.s a83e <floatCharacter+0x16>
    a83a:	   |   clr.w d0
    a83c:	,--|-- bra.s a848 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a83e:	|  '-> movea.l (sp),a0
    a840:	|      move.l 8(sp),24(a0)
	return TRUE;
    a846:	|      moveq #1,d0
}
    a848:	'----> addq.l #4,sp
    a84a:	       rts

0000a84c <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a84c:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a84e:	          tst.l 8(sp)
    a852:	      ,-- bne.s a860 <forceWalkingPerson+0x14>
    a854:	      |   tst.l 12(sp)
    a858:	      +-- bne.s a860 <forceWalkingPerson+0x14>
    a85a:	      |   clr.w d0
    a85c:	,-----|-- bra.w a8f2 <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a860:	|     '-> move.l 16(sp),-(sp)
    a864:	|         jsr a7de <findPerson>
    a86a:	|         addq.l #4,sp
    a86c:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a86e:	|     ,-- bne.s a874 <forceWalkingPerson+0x28>
    a870:	|     |   clr.w d0
    a872:	+-----|-- bra.s a8f2 <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a874:	|     '-> movea.l (sp),a0
    a876:	|         move.l 68(a0),d0
    a87a:	|     ,-- beq.s a88c <forceWalkingPerson+0x40>
    a87c:	|     |   movea.l (sp),a0
    a87e:	|     |   move.l 68(a0),d0
    a882:	|     |   move.l d0,-(sp)
    a884:	|     |   jsr 51d8 <abortFunction>
    a88a:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a88c:	|     '-> movea.l (sp),a0
    a88e:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a894:	|         movea.l (sp),a0
    a896:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a89a:	|         movea.l (sp),a0
    a89c:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a8a2:	|         movea.l (sp),a0
    a8a4:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a8aa:	|         movea.l (sp),a0
    a8ac:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a8b2:	|         movea.l (sp),a0
    a8b4:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a8b8:	|         movea.l (sp),a0
    a8ba:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a8be:	|         move.l (sp),-(sp)
    a8c0:	|         jsr 9b40 <doBorderStuff>
    a8c6:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a8c8:	|         pea 1 <_start+0x1>
    a8cc:	|         move.l 4(sp),-(sp)
    a8d0:	|         jsr c186 <walkMe>
    a8d6:	|         addq.l #8,sp
    a8d8:	|         tst.w d0
    a8da:	|     ,-- bne.s a8e4 <forceWalkingPerson+0x98>
    a8dc:	|     |   movea.l (sp),a0
    a8de:	|     |   move.w 66(a0),d0
    a8e2:	|  ,--|-- beq.s a8f0 <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a8e4:	|  |  '-> movea.l (sp),a0
    a8e6:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a8ec:	|  |      moveq #1,d0
    a8ee:	+--|----- bra.s a8f2 <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a8f0:	|  '----> clr.w d0
    }
}
    a8f2:	'-------> addq.l #4,sp
    a8f4:	          rts

0000a8f6 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a8f6:	                lea -56(sp),sp
    a8fa:	                move.l d2,-(sp)
	KPrintF("handleClosestPoint started\n");
    a8fc:	                pea 1950f <PutChar+0x1555>
    a902:	                jsr 17518 <KPrintF>
    a908:	                addq.l #4,sp
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a90a:	                move.l #320,56(sp)
    a912:	                move.l #200,52(sp)
    a91a:	                moveq #-1,d0
    a91c:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a920:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a928:	                clr.l 44(sp)
    a92c:	   ,----------- bra.w ab04 <handleClosestPoint+0x20e>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a930:	,--|----------> movea.l 1ce7e <currentFloor>,a0
    a936:	|  |            move.l 12(a0),d1
    a93a:	|  |            move.l 44(sp),d0
    a93e:	|  |            lsl.l #3,d0
    a940:	|  |            movea.l d1,a0
    a942:	|  |            adda.l d0,a0
    a944:	|  |            move.l (a0),d0
    a946:	|  |            move.l d0,d1
    a948:	|  |            subq.l #1,d1
    a94a:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a94e:	|  |            clr.l 40(sp)
    a952:	|  |     ,----- bra.w aae2 <handleClosestPoint+0x1ec>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a956:	|  |  ,--|----> movea.l 1ce7e <currentFloor>,a0
    a95c:	|  |  |  |      move.l 4(a0),d1
    a960:	|  |  |  |      movea.l 1ce7e <currentFloor>,a0
    a966:	|  |  |  |      movea.l 12(a0),a0
    a96a:	|  |  |  |      move.l 44(sp),d0
    a96e:	|  |  |  |      lsl.l #3,d0
    a970:	|  |  |  |      adda.l d0,a0
    a972:	|  |  |  |      movea.l 4(a0),a0
    a976:	|  |  |  |      move.l 40(sp),d0
    a97a:	|  |  |  |      add.l d0,d0
    a97c:	|  |  |  |      add.l d0,d0
    a97e:	|  |  |  |      adda.l d0,a0
    a980:	|  |  |  |      move.l (a0),d0
    a982:	|  |  |  |      lsl.l #3,d0
    a984:	|  |  |  |      movea.l d1,a0
    a986:	|  |  |  |      adda.l d0,a0
    a988:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a98c:	|  |  |  |      movea.l 1ce7e <currentFloor>,a0
    a992:	|  |  |  |      move.l 4(a0),d1
    a996:	|  |  |  |      movea.l 1ce7e <currentFloor>,a0
    a99c:	|  |  |  |      movea.l 12(a0),a0
    a9a0:	|  |  |  |      move.l 44(sp),d0
    a9a4:	|  |  |  |      lsl.l #3,d0
    a9a6:	|  |  |  |      adda.l d0,a0
    a9a8:	|  |  |  |      movea.l 4(a0),a0
    a9ac:	|  |  |  |      move.l 40(sp),d0
    a9b0:	|  |  |  |      add.l d0,d0
    a9b2:	|  |  |  |      add.l d0,d0
    a9b4:	|  |  |  |      adda.l d0,a0
    a9b6:	|  |  |  |      move.l (a0),d0
    a9b8:	|  |  |  |      lsl.l #3,d0
    a9ba:	|  |  |  |      movea.l d1,a0
    a9bc:	|  |  |  |      adda.l d0,a0
    a9be:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a9c4:	|  |  |  |      movea.l 1ce7e <currentFloor>,a0
    a9ca:	|  |  |  |      move.l 4(a0),d1
    a9ce:	|  |  |  |      movea.l 1ce7e <currentFloor>,a0
    a9d4:	|  |  |  |      movea.l 12(a0),a0
    a9d8:	|  |  |  |      move.l 44(sp),d0
    a9dc:	|  |  |  |      lsl.l #3,d0
    a9de:	|  |  |  |      adda.l d0,a0
    a9e0:	|  |  |  |      movea.l 4(a0),a0
    a9e4:	|  |  |  |      move.l 36(sp),d0
    a9e8:	|  |  |  |      add.l d0,d0
    a9ea:	|  |  |  |      add.l d0,d0
    a9ec:	|  |  |  |      adda.l d0,a0
    a9ee:	|  |  |  |      move.l (a0),d0
    a9f0:	|  |  |  |      lsl.l #3,d0
    a9f2:	|  |  |  |      movea.l d1,a0
    a9f4:	|  |  |  |      adda.l d0,a0
    a9f6:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a9fa:	|  |  |  |      movea.l 1ce7e <currentFloor>,a0
    aa00:	|  |  |  |      move.l 4(a0),d1
    aa04:	|  |  |  |      movea.l 1ce7e <currentFloor>,a0
    aa0a:	|  |  |  |      movea.l 12(a0),a0
    aa0e:	|  |  |  |      move.l 44(sp),d0
    aa12:	|  |  |  |      lsl.l #3,d0
    aa14:	|  |  |  |      adda.l d0,a0
    aa16:	|  |  |  |      movea.l 4(a0),a0
    aa1a:	|  |  |  |      move.l 36(sp),d0
    aa1e:	|  |  |  |      add.l d0,d0
    aa20:	|  |  |  |      add.l d0,d0
    aa22:	|  |  |  |      adda.l d0,a0
    aa24:	|  |  |  |      move.l (a0),d0
    aa26:	|  |  |  |      lsl.l #3,d0
    aa28:	|  |  |  |      movea.l d1,a0
    aa2a:	|  |  |  |      adda.l d0,a0
    aa2c:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    aa32:	|  |  |  |      movea.l 68(sp),a0
    aa36:	|  |  |  |      move.l (a0),d1
    aa38:	|  |  |  |      movea.l 64(sp),a0
    aa3c:	|  |  |  |      move.l (a0),d0
    aa3e:	|  |  |  |      move.l d1,-(sp)
    aa40:	|  |  |  |      move.l d0,-(sp)
    aa42:	|  |  |  |      move.l 24(sp),-(sp)
    aa46:	|  |  |  |      move.l 32(sp),-(sp)
    aa4a:	|  |  |  |      move.l 40(sp),-(sp)
    aa4e:	|  |  |  |      move.l 48(sp),-(sp)
    aa52:	|  |  |  |      lea 28(sp),a0
    aa56:	|  |  |  |      move.l a0,-(sp)
    aa58:	|  |  |  |      lea 36(sp),a0
    aa5c:	|  |  |  |      move.l a0,-(sp)
    aa5e:	|  |  |  |      jsr 16316 <closestPointOnLine>
    aa64:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    aa68:	|  |  |  |      movea.l 64(sp),a0
    aa6c:	|  |  |  |      move.l (a0),d0
    aa6e:	|  |  |  |      move.l 8(sp),d1
    aa72:	|  |  |  |      move.l d0,d2
    aa74:	|  |  |  |      sub.l d1,d2
    aa76:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    aa7a:	|  |  |  |      movea.l 68(sp),a0
    aa7e:	|  |  |  |      move.l (a0),d0
    aa80:	|  |  |  |      move.l 4(sp),d1
    aa84:	|  |  |  |      move.l d0,d2
    aa86:	|  |  |  |      sub.l d1,d2
    aa88:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    aa8c:	|  |  |  |      move.l 28(sp),-(sp)
    aa90:	|  |  |  |      move.l 32(sp),-(sp)
    aa94:	|  |  |  |      jsr 17ea4 <__mulsi3>
    aa9a:	|  |  |  |      addq.l #8,sp
    aa9c:	|  |  |  |      move.l d0,d2
    aa9e:	|  |  |  |      move.l 24(sp),-(sp)
    aaa2:	|  |  |  |      move.l 28(sp),-(sp)
    aaa6:	|  |  |  |      jsr 17ea4 <__mulsi3>
    aaac:	|  |  |  |      addq.l #8,sp
    aaae:	|  |  |  |      move.l d2,d1
    aab0:	|  |  |  |      add.l d0,d1
    aab2:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    aab6:	|  |  |  |      move.l 12(sp),d2
    aaba:	|  |  |  |      cmp.l 32(sp),d2
    aabe:	|  |  |  |  ,-- bge.s aad8 <handleClosestPoint+0x1e2>

				currentDistance = thisDistance;
    aac0:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    aac6:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    aacc:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    aad2:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    aad8:	|  |  |  |  '-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    aade:	|  |  |  |      addq.l #1,40(sp)
    aae2:	|  |  |  '----> movea.l 1ce7e <currentFloor>,a0
    aae8:	|  |  |         move.l 12(a0),d1
    aaec:	|  |  |         move.l 44(sp),d0
    aaf0:	|  |  |         lsl.l #3,d0
    aaf2:	|  |  |         movea.l d1,a0
    aaf4:	|  |  |         adda.l d0,a0
    aaf6:	|  |  |         move.l (a0),d0
    aaf8:	|  |  |         cmp.l 40(sp),d0
    aafc:	|  |  '-------- bgt.w a956 <handleClosestPoint+0x60>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    ab00:	|  |            addq.l #1,44(sp)
    ab04:	|  '----------> movea.l 1ce7e <currentFloor>,a0
    ab0a:	|               move.l 8(a0),d0
    ab0e:	|               cmp.l 44(sp),d0
    ab12:	'-------------- bgt.w a930 <handleClosestPoint+0x3a>
		}
	}

	if (gotPoly == -1) return FALSE;
    ab16:	                moveq #-1,d0
    ab18:	                cmp.l 48(sp),d0
    ab1c:	            ,-- bne.s ab22 <handleClosestPoint+0x22c>
    ab1e:	            |   clr.w d0
    ab20:	         ,--|-- bra.s ab3c <handleClosestPoint+0x246>
	*setX = gotX;
    ab22:	         |  '-> movea.l 64(sp),a0
    ab26:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    ab2a:	         |      movea.l 68(sp),a0
    ab2e:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    ab32:	         |      movea.l 72(sp),a0
    ab36:	         |      move.l 48(sp),(a0)

	return TRUE;
    ab3a:	         |      moveq #1,d0
}
    ab3c:	         '----> move.l (sp)+,d2
    ab3e:	                lea 56(sp),sp
    ab42:	                rts

0000ab44 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    ab44:	clr.l 1cdda <personRegion+0x10>
	personRegion.sY = 0;
    ab4a:	clr.l 1cdde <personRegion+0x14>
	personRegion.di = -1;
    ab50:	moveq #-1,d0
    ab52:	move.l d0,1cde2 <personRegion+0x18>
	allScreenRegions = NULL;
    ab58:	clr.l 1ce72 <allScreenRegions>

	return TRUE;
    ab5e:	moveq #1,d0
}
    ab60:	rts

0000ab62 <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    ab62:	          subq.l #4,sp
    ab64:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    ab66:	          tst.l 12(sp)
    ab6a:	      ,-- bne.s ab72 <jumpPerson+0x10>
    ab6c:	      |   tst.l 16(sp)
    ab70:	,-----|-- beq.s abe6 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    ab72:	|     '-> move.l 20(sp),-(sp)
    ab76:	|         jsr a7de <findPerson>
    ab7c:	|         addq.l #4,sp
    ab7e:	|         move.l d0,4(sp)
    if (!moveMe) return;
    ab82:	|  ,----- beq.s abea <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    ab84:	|  |      movea.l 4(sp),a0
    ab88:	|  |      move.l 68(a0),d0
    ab8c:	|  |  ,-- beq.s aba0 <jumpPerson+0x3e>
    ab8e:	|  |  |   movea.l 4(sp),a0
    ab92:	|  |  |   move.l 68(a0),d0
    ab96:	|  |  |   move.l d0,-(sp)
    ab98:	|  |  |   jsr 51d8 <abortFunction>
    ab9e:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    aba0:	|  |  '-> movea.l 4(sp),a0
    aba4:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    aba8:	|  |      movea.l 4(sp),a0
    abac:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    abb0:	|  |      movea.l 4(sp),a0
    abb4:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    abb8:	|  |      move.l 16(sp),-(sp)
    abbc:	|  |      jsr 1794a <__floatsisf>
    abc2:	|  |      addq.l #4,sp
    abc4:	|  |      move.l d0,d2
    abc6:	|  |      move.l 12(sp),-(sp)
    abca:	|  |      jsr 1794a <__floatsisf>
    abd0:	|  |      addq.l #4,sp
    abd2:	|  |      move.l d2,-(sp)
    abd4:	|  |      move.l d0,-(sp)
    abd6:	|  |      move.l 12(sp),-(sp)
    abda:	|  |      jsr af88 <moveAndScale>
    abe0:	|  |      lea 12(sp),sp
    abe4:	|  |  ,-- bra.s abec <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    abe6:	'--|--|-> nop
    abe8:	   |  +-- bra.s abec <jumpPerson+0x8a>
    if (!moveMe) return;
    abea:	   '--|-> nop
}
    abec:	      '-> move.l (sp)+,d2
    abee:	          addq.l #4,sp
    abf0:	          rts

0000abf2 <killAllPeople>:


void killAllPeople () {
    abf2:	          subq.l #8,sp
    abf4:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    abf6:	   ,----- bra.s ac62 <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    abf8:	,--|----> movea.l 1cdc6 <allPeople>,a0
    abfe:	|  |      move.l 68(a0),d0
    ac02:	|  |  ,-- beq.s ac18 <killAllPeople+0x26>
    ac04:	|  |  |   movea.l 1cdc6 <allPeople>,a0
    ac0a:	|  |  |   move.l 68(a0),d0
    ac0e:	|  |  |   move.l d0,-(sp)
    ac10:	|  |  |   jsr 51d8 <abortFunction>
    ac16:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    ac18:	|  |  '-> movea.l 1cdc6 <allPeople>,a0
    ac1e:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    ac22:	|  |      move.l 1cdc6 <allPeople>,8(sp)
		allPeople = allPeople -> next;
    ac2a:	|  |      movea.l 1cdc6 <allPeople>,a0
    ac30:	|  |      move.l 36(a0),d0
    ac34:	|  |      move.l d0,1cdc6 <allPeople>
		removeObjectType (killPeople -> thisType);
    ac3a:	|  |      movea.l 8(sp),a0
    ac3e:	|  |      move.l 114(a0),d0
    ac42:	|  |      move.l d0,-(sp)
    ac44:	|  |      jsr daf4 <removeObjectType>
    ac4a:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    ac4c:	|  |      move.l 8(sp),4(sp)
    ac52:	|  |      move.l 1cd66 <SysBase>,d0
    ac58:	|  |      movea.l d0,a6
    ac5a:	|  |      movea.l 4(sp),a1
    ac5e:	|  |      jsr -690(a6)
	while (allPeople) {
    ac62:	|  '----> move.l 1cdc6 <allPeople>,d0
    ac68:	'-------- bne.s abf8 <killAllPeople+0x6>
	}
}
    ac6a:	          nop
    ac6c:	          nop
    ac6e:	          movea.l (sp)+,a6
    ac70:	          addq.l #8,sp
    ac72:	          rts

0000ac74 <killMostPeople>:

void killMostPeople() {
    ac74:	          lea -12(sp),sp
    ac78:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    ac7a:	          move.l #118214,12(sp)

    while (*lookyHere) {
    ac82:	   ,----- bra.w ad08 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    ac86:	,--|----> movea.l 12(sp),a0
    ac8a:	|  |      movea.l (a0),a0
    ac8c:	|  |      move.l 118(a0),d0
    ac90:	|  |      moveq #32,d1
    ac92:	|  |      and.l d1,d0
    ac94:	|  |  ,-- beq.s aca6 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    ac96:	|  |  |   movea.l 12(sp),a0
    ac9a:	|  |  |   move.l (a0),d0
    ac9c:	|  |  |   moveq #36,d1
    ac9e:	|  |  |   add.l d0,d1
    aca0:	|  |  |   move.l d1,12(sp)
    aca4:	|  +--|-- bra.s ad08 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    aca6:	|  |  '-> movea.l 12(sp),a0
    acaa:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    acae:	|  |      movea.l 8(sp),a0
    acb2:	|  |      move.l 36(a0),d0
    acb6:	|  |      movea.l 12(sp),a0
    acba:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    acbc:	|  |      movea.l 8(sp),a0
    acc0:	|  |      move.l 68(a0),d0
    acc4:	|  |  ,-- beq.s acd8 <killMostPeople+0x64>
    acc6:	|  |  |   movea.l 8(sp),a0
    acca:	|  |  |   move.l 68(a0),d0
    acce:	|  |  |   move.l d0,-(sp)
    acd0:	|  |  |   jsr 51d8 <abortFunction>
    acd6:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    acd8:	|  |  '-> movea.l 8(sp),a0
    acdc:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    ace0:	|  |      movea.l 8(sp),a0
    ace4:	|  |      move.l 114(a0),d0
    ace8:	|  |      move.l d0,-(sp)
    acea:	|  |      jsr daf4 <removeObjectType>
    acf0:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    acf2:	|  |      move.l 8(sp),4(sp)
    acf8:	|  |      move.l 1cd66 <SysBase>,d0
    acfe:	|  |      movea.l d0,a6
    ad00:	|  |      movea.l 4(sp),a1
    ad04:	|  |      jsr -690(a6)
    while (*lookyHere) {
    ad08:	|  '----> movea.l 12(sp),a0
    ad0c:	|         move.l (a0),d0
    ad0e:	'-------- bne.w ac86 <killMostPeople+0x12>
        }
    }
}
    ad12:	          nop
    ad14:	          nop
    ad16:	          movea.l (sp)+,a6
    ad18:	          lea 12(sp),sp
    ad1c:	          rts

0000ad1e <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    ad1e:	clr.l -(sp)
    ad20:	move.l sp,d0
    ad22:	addq.l #8,d0
    ad24:	move.l d0,-(sp)
    ad26:	jsr 437a <setFrames>
    ad2c:	addq.l #8,sp
}
    ad2e:	nop
    ad30:	rts

0000ad32 <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    ad32:	          lea -12(sp),sp
    ad36:	          move.l d2,-(sp)
	KPrintF("makeWalkingPerson started\n");
    ad38:	          pea 19593 <PutChar+0x15d9>
    ad3e:	          jsr 17518 <KPrintF>
    ad44:	          addq.l #4,sp
	if (x == 0 && y == 0) return FALSE;
    ad46:	          tst.l 20(sp)
    ad4a:	      ,-- bne.s ad58 <makeWalkingPerson+0x26>
    ad4c:	      |   tst.l 24(sp)
    ad50:	      +-- bne.s ad58 <makeWalkingPerson+0x26>
    ad52:	      |   clr.w d0
    ad54:	,-----|-- bra.w af1a <makeWalkingPerson+0x1e8>
	if (currentFloor -> numPolygons == 0) return FALSE;
    ad58:	|     '-> movea.l 1ce7e <currentFloor>,a0
    ad5e:	|         move.l 8(a0),d0
    ad62:	|     ,-- bne.s ad6a <makeWalkingPerson+0x38>
    ad64:	|     |   clr.w d0
    ad66:	+-----|-- bra.w af1a <makeWalkingPerson+0x1e8>
	struct onScreenPerson * moveMe = findPerson (objNum);
    ad6a:	|     '-> move.l 28(sp),d0
    ad6e:	|         move.l d0,-(sp)
    ad70:	|         jsr a7de <findPerson>
    ad76:	|         addq.l #4,sp
    ad78:	|         move.l d0,12(sp)

	
	if (! moveMe) {
    ad7c:	|     ,-- bne.s ad98 <makeWalkingPerson+0x66>
		KPrintF("makeWalkingPerson: Can't find person %d\n", objNum);
    ad7e:	|     |   move.l 28(sp),d0
    ad82:	|     |   move.l d0,-(sp)
    ad84:	|     |   pea 195ae <PutChar+0x15f4>
    ad8a:	|     |   jsr 17518 <KPrintF>
    ad90:	|     |   addq.l #8,sp
		return FALSE;
    ad92:	|     |   clr.w d0
    ad94:	+-----|-- bra.w af1a <makeWalkingPerson+0x1e8>
	} 


	if (moveMe -> continueAfterWalking) {
    ad98:	|     '-> movea.l 12(sp),a0
    ad9c:	|         move.l 68(a0),d0
    ada0:	|     ,-- beq.s adb4 <makeWalkingPerson+0x82>
		abortFunction (moveMe -> continueAfterWalking);
    ada2:	|     |   movea.l 12(sp),a0
    ada6:	|     |   move.l 68(a0),d0
    adaa:	|     |   move.l d0,-(sp)
    adac:	|     |   jsr 51d8 <abortFunction>
    adb2:	|     |   addq.l #4,sp
	}	
	moveMe -> continueAfterWalking = NULL;
    adb4:	|     '-> movea.l 12(sp),a0
    adb8:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    adbc:	|         movea.l 12(sp),a0
    adc0:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    adc6:	|         movea.l 12(sp),a0
    adca:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    add0:	|         movea.l 12(sp),a0
    add4:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    adda:	|         movea.l 12(sp),a0
    adde:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    ade4:	|         move.l 24(sp),-(sp)
    ade8:	|         move.l 24(sp),-(sp)
    adec:	|         jsr 1685e <inFloor>
    adf2:	|         addq.l #8,sp
    adf4:	|         movea.l 12(sp),a0
    adf8:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    adfc:	|         movea.l 12(sp),a0
    ae00:	|         move.l 60(a0),d0
    ae04:	|         moveq #-1,d1
    ae06:	|         cmp.l d0,d1
    ae08:	|     ,-- bne.s ae38 <makeWalkingPerson+0x106>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    ae0a:	|     |   movea.w #60,a0
    ae0e:	|     |   adda.l 12(sp),a0
    ae12:	|     |   moveq #44,d1
    ae14:	|     |   add.l 12(sp),d1
    ae18:	|     |   moveq #40,d0
    ae1a:	|     |   add.l 12(sp),d0
    ae1e:	|     |   move.l a0,-(sp)
    ae20:	|     |   move.l d1,-(sp)
    ae22:	|     |   move.l d0,-(sp)
    ae24:	|     |   jsr a8f6 <handleClosestPoint>
    ae2a:	|     |   lea 12(sp),sp
    ae2e:	|     |   tst.w d0
    ae30:	|     +-- bne.s ae38 <makeWalkingPerson+0x106>
    ae32:	|     |   clr.w d0
    ae34:	+-----|-- bra.w af1a <makeWalkingPerson+0x1e8>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    ae38:	|     '-> movea.l 12(sp),a0
    ae3c:	|         move.l 4(a0),d0
    ae40:	|         move.l d0,-(sp)
    ae42:	|         jsr 178e2 <__fixsfsi>
    ae48:	|         addq.l #4,sp
    ae4a:	|         move.l d0,d2
    ae4c:	|         movea.l 12(sp),a0
    ae50:	|         move.l (a0),d0
    ae52:	|         move.l d0,-(sp)
    ae54:	|         jsr 178e2 <__fixsfsi>
    ae5a:	|         addq.l #4,sp
    ae5c:	|         move.l d2,-(sp)
    ae5e:	|         move.l d0,-(sp)
    ae60:	|         jsr 1685e <inFloor>
    ae66:	|         addq.l #8,sp
    ae68:	|         movea.l 12(sp),a0
    ae6c:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    ae70:	|         movea.l 12(sp),a0
    ae74:	|         move.l 56(a0),d0
    ae78:	|         moveq #-1,d1
    ae7a:	|         cmp.l d0,d1
    ae7c:	|     ,-- bne.s aece <makeWalkingPerson+0x19c>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    ae7e:	|     |   movea.l 12(sp),a0
    ae82:	|     |   move.l (a0),d0
    ae84:	|     |   move.l d0,-(sp)
    ae86:	|     |   jsr 178e2 <__fixsfsi>
    ae8c:	|     |   addq.l #4,sp
    ae8e:	|     |   move.l d0,8(sp)
    ae92:	|     |   movea.l 12(sp),a0
    ae96:	|     |   move.l 4(a0),d0
    ae9a:	|     |   move.l d0,-(sp)
    ae9c:	|     |   jsr 178e2 <__fixsfsi>
    aea2:	|     |   addq.l #4,sp
    aea4:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    aea8:	|     |   moveq #56,d0
    aeaa:	|     |   add.l 12(sp),d0
    aeae:	|     |   move.l d0,-(sp)
    aeb0:	|     |   lea 8(sp),a0
    aeb4:	|     |   move.l a0,-(sp)
    aeb6:	|     |   moveq #16,d0
    aeb8:	|     |   add.l sp,d0
    aeba:	|     |   move.l d0,-(sp)
    aebc:	|     |   jsr a8f6 <handleClosestPoint>
    aec2:	|     |   lea 12(sp),sp
    aec6:	|     |   tst.w d0
    aec8:	|     +-- bne.s aece <makeWalkingPerson+0x19c>
    aeca:	|     |   clr.w d0
    aecc:	+-----|-- bra.s af1a <makeWalkingPerson+0x1e8>
	}

	doBorderStuff (moveMe);
    aece:	|     '-> move.l 12(sp),-(sp)
    aed2:	|         jsr 9b40 <doBorderStuff>
    aed8:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    aeda:	|         clr.l -(sp)
    aedc:	|         move.l 16(sp),-(sp)
    aee0:	|         jsr c186 <walkMe>
    aee6:	|         addq.l #8,sp
    aee8:	|         tst.w d0
    aeea:	|     ,-- bne.s aef6 <makeWalkingPerson+0x1c4>
    aeec:	|     |   movea.l 12(sp),a0
    aef0:	|     |   move.w 66(a0),d0
    aef4:	|  ,--|-- beq.s af18 <makeWalkingPerson+0x1e6>
		KPrintF("makeWalkingPerson: continueAfterWalking set to %d\n", &objNum);
    aef6:	|  |  '-> lea 28(sp),a0
    aefa:	|  |      move.l a0,-(sp)
    aefc:	|  |      pea 195d7 <PutChar+0x161d>
    af02:	|  |      jsr 17518 <KPrintF>
    af08:	|  |      addq.l #8,sp
		moveMe -> continueAfterWalking = func;
    af0a:	|  |      movea.l 12(sp),a0
    af0e:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    af14:	|  |      moveq #1,d0
    af16:	+--|----- bra.s af1a <makeWalkingPerson+0x1e8>
	} else {
		return FALSE;
    af18:	|  '----> clr.w d0
	}
}
    af1a:	'-------> move.l (sp)+,d2
    af1c:	          lea 12(sp),sp
    af20:	          rts

0000af22 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    af22:	       lea -16(sp),sp
    af26:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    af28:	       moveq #12,d0
    af2a:	       move.l d0,16(sp)
    af2e:	       clr.l 12(sp)
    af32:	       move.l 1cd66 <SysBase>,d0
    af38:	       movea.l d0,a6
    af3a:	       move.l 16(sp),d0
    af3e:	       move.l 12(sp),d1
    af42:	       jsr -684(a6)
    af46:	       move.l d0,8(sp)
    af4a:	       move.l 8(sp),d0
    af4e:	       move.l d0,4(sp)
    if(newAnim == 0) {
    af52:	   ,-- bne.s af66 <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    af54:	   |   pea 1960a <PutChar+0x1650>
    af5a:	   |   jsr 17518 <KPrintF>
    af60:	   |   addq.l #4,sp
        return NULL;    
    af62:	   |   moveq #0,d0
    af64:	,--|-- bra.s af80 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    af66:	|  '-> movea.l 4(sp),a0
    af6a:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    af6c:	|      movea.l 4(sp),a0
    af70:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    af74:	|      movea.l 4(sp),a0
    af78:	|      clr.l 4(a0)
	return newAnim;
    af7c:	|      move.l 4(sp),d0
}
    af80:	'----> movea.l (sp)+,a6
    af82:	       lea 16(sp),sp
    af86:	       rts

0000af88 <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    af88:	    move.l d2,-(sp)
	me->x = x;
    af8a:	    movea.l 8(sp),a0
    af8e:	    move.l 12(sp),(a0)
	me->y = y;
    af92:	    movea.l 8(sp),a0
    af96:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    af9c:	    movea.l 8(sp),a0
    afa0:	    clr.l 8(a0)
	me->oldy = 0;
    afa4:	    movea.l 8(sp),a0
    afa8:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    afac:	    movea.l 8(sp),a0
    afb0:	    move.l 118(a0),d0
    afb4:	    moveq #2,d1
    afb6:	    and.l d1,d0
    afb8:	,-- bne.s b010 <moveAndScale+0x88>
    afba:	|   move.w 1c6ee <scaleDivide>,d0
    afc0:	+-- beq.s b010 <moveAndScale+0x88>
    afc2:	|   movea.l 8(sp),a0
    afc6:	|   move.l 4(a0),d2
    afca:	|   move.w 1c6ec <scaleHorizon>,d0
    afd0:	|   movea.w d0,a0
    afd2:	|   move.l a0,-(sp)
    afd4:	|   jsr 1794a <__floatsisf>
    afda:	|   addq.l #4,sp
    afdc:	|   move.l d0,-(sp)
    afde:	|   move.l d2,-(sp)
    afe0:	|   jsr 17c3e <__subsf3>
    afe6:	|   addq.l #8,sp
    afe8:	|   move.l d0,d2
    afea:	|   move.w 1c6ee <scaleDivide>,d0
    aff0:	|   movea.w d0,a0
    aff2:	|   move.l a0,-(sp)
    aff4:	|   jsr 1794a <__floatsisf>
    affa:	|   addq.l #4,sp
    affc:	|   move.l d0,-(sp)
    affe:	|   move.l d2,-(sp)
    b000:	|   jsr 17800 <__divsf3>
    b006:	|   addq.l #8,sp
    b008:	|   movea.l 8(sp),a0
    b00c:	|   move.l d0,32(a0)
}
    b010:	'-> nop
    b012:	    move.l (sp)+,d2
    b014:	    rts

0000b016 <removeOneCharacter>:

void removeOneCharacter (int i) {
    b016:	          lea -16(sp),sp
    b01a:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    b01c:	          move.l 24(sp),-(sp)
    b020:	          jsr a7de <findPerson>
    b026:	          addq.l #4,sp
    b028:	          move.l d0,8(sp)

    if (p) {
    b02c:	,-------- beq.w b10c <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    b030:	|         move.l 1ce76 <overRegion>,d0
    b036:	|         cmpi.l #118218,d0
    b03c:	|     ,-- bne.s b05a <removeOneCharacter+0x44>
    b03e:	|     |   movea.l 1ce76 <overRegion>,a0
    b044:	|     |   move.l 28(a0),d1
    b048:	|     |   movea.l 8(sp),a0
    b04c:	|     |   move.l 114(a0),d0
    b050:	|     |   cmp.l d1,d0
    b052:	|     +-- bne.s b05a <removeOneCharacter+0x44>
            overRegion = NULL;
    b054:	|     |   clr.l 1ce76 <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    b05a:	|     '-> movea.l 8(sp),a0
    b05e:	|         move.l 68(a0),d0
    b062:	|     ,-- beq.s b076 <removeOneCharacter+0x60>
    b064:	|     |   movea.l 8(sp),a0
    b068:	|     |   move.l 68(a0),d0
    b06c:	|     |   move.l d0,-(sp)
    b06e:	|     |   jsr 51d8 <abortFunction>
    b074:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    b076:	|     '-> movea.l 8(sp),a0
    b07a:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    b07e:	|         clr.l 12(sp)
    b082:	|     ,-- bra.s b0aa <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    b084:	|  ,--|-> movea.l 8(sp),a0
    b088:	|  |  |   movea.l 80(a0),a0
    b08c:	|  |  |   move.l (a0),d1
    b08e:	|  |  |   move.l 12(sp),d0
    b092:	|  |  |   add.l d0,d0
    b094:	|  |  |   add.l d0,d0
    b096:	|  |  |   movea.l d1,a0
    b098:	|  |  |   adda.l d0,a0
    b09a:	|  |  |   move.l (a0),d0
    b09c:	|  |  |   move.l d0,-(sp)
    b09e:	|  |  |   jsr 9abc <deleteAnim>
    b0a4:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    b0a6:	|  |  |   addq.l #1,12(sp)
    b0aa:	|  |  '-> moveq #2,d0
    b0ac:	|  |      cmp.l 12(sp),d0
    b0b0:	|  '----- bge.s b084 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    b0b2:	|         move.l #118214,16(sp)
    b0ba:	|     ,-- bra.s b0ca <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    b0bc:	|  ,--|-> movea.l 16(sp),a0
    b0c0:	|  |  |   move.l (a0),d0
    b0c2:	|  |  |   moveq #36,d1
    b0c4:	|  |  |   add.l d0,d1
    b0c6:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    b0ca:	|  |  '-> movea.l 16(sp),a0
    b0ce:	|  |      move.l (a0),d0
    b0d0:	|  |      cmp.l 8(sp),d0
    b0d4:	|  '----- bne.s b0bc <removeOneCharacter+0xa6>

        *killPeople = p->next;
    b0d6:	|         movea.l 8(sp),a0
    b0da:	|         move.l 36(a0),d0
    b0de:	|         movea.l 16(sp),a0
    b0e2:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    b0e4:	|         movea.l 8(sp),a0
    b0e8:	|         move.l 114(a0),d0
    b0ec:	|         move.l d0,-(sp)
    b0ee:	|         jsr daf4 <removeObjectType>
    b0f4:	|         addq.l #4,sp
        FreeVec(p);
    b0f6:	|         move.l 8(sp),4(sp)
    b0fc:	|         move.l 1cd66 <SysBase>,d0
    b102:	|         movea.l d0,a6
    b104:	|         movea.l 4(sp),a1
    b108:	|         jsr -690(a6)
		
    }
}
    b10c:	'-------> nop
    b10e:	          movea.l (sp)+,a6
    b110:	          lea 16(sp),sp
    b114:	          rts

0000b116 <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    b116:	       subq.l #8,sp
    b118:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    b11a:	       movea.l 16(sp),a0
    b11e:	       movea.l 80(a0),a0
    b122:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    b128:	       movea.l 16(sp),a0
    b12c:	       move.l 92(a0),d2
    b130:	       move.l 4(sp),-(sp)
    b134:	       pea b4 <_start+0xb4>
    b138:	       jsr 17f22 <__divsi3>
    b13e:	       addq.l #8,sp
    b140:	       add.l d2,d0
    b142:	       move.l d0,d1
    b144:	       addi.l #180,d1
    b14a:	       movea.l 16(sp),a0
    b14e:	       move.l 100(a0),d0
    b152:	       move.l d1,d2
    b154:	       add.l d0,d2
    b156:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    b15a:	   ,-- bra.s b164 <rethinkAngle+0x4e>
    b15c:	,--|-> addi.l #-360,8(sp)
    b164:	|  '-> cmpi.l #359,8(sp)
    b16c:	'----- bgt.s b15c <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    b16e:	       move.l 4(sp),-(sp)
    b172:	       move.l 12(sp),-(sp)
    b176:	       jsr 17ea4 <__mulsi3>
    b17c:	       addq.l #8,sp
    b17e:	       pea 168 <decodeFilename+0x50>
    b182:	       move.l d0,-(sp)
    b184:	       jsr 17f22 <__divsi3>
    b18a:	       addq.l #8,sp
    b18c:	       movea.l 16(sp),a0
    b190:	       move.l d0,106(a0)
}
    b194:	       nop
    b196:	       move.l (sp)+,d2
    b198:	       addq.l #8,sp
    b19a:	       rts

0000b19c <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    b19c:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    b19e:	          movea.l 8(sp),a0
    b1a2:	          move.l 8(a0),d0
    b1a6:	          move.l 12(sp),-(sp)
    b1aa:	          move.l d0,-(sp)
    b1ac:	          jsr 8d0 <put2bytes>
    b1b2:	          addq.l #8,sp
	if (p -> numFrames) {
    b1b4:	          movea.l 8(sp),a0
    b1b8:	          move.l 8(a0),d0
    b1bc:	,-------- beq.w b260 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    b1c0:	|         movea.l 8(sp),a0
    b1c4:	|         movea.l (a0),a0
    b1c6:	|         move.l (a0),d0
    b1c8:	|         move.l 12(sp),-(sp)
    b1cc:	|         move.l d0,-(sp)
    b1ce:	|         jsr 958 <put4bytes>
    b1d4:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    b1d6:	|         clr.l (sp)
    b1d8:	|     ,-- bra.s b252 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    b1da:	|  ,--|-> movea.l 8(sp),a0
    b1de:	|  |  |   movea.l 4(a0),a0
    b1e2:	|  |  |   move.l (sp),d1
    b1e4:	|  |  |   move.l d1,d0
    b1e6:	|  |  |   add.l d0,d0
    b1e8:	|  |  |   add.l d1,d0
    b1ea:	|  |  |   add.l d0,d0
    b1ec:	|  |  |   add.l d0,d0
    b1ee:	|  |  |   adda.l d0,a0
    b1f0:	|  |  |   move.l (a0),d0
    b1f2:	|  |  |   move.l 12(sp),-(sp)
    b1f6:	|  |  |   move.l d0,-(sp)
    b1f8:	|  |  |   jsr 958 <put4bytes>
    b1fe:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    b200:	|  |  |   movea.l 8(sp),a0
    b204:	|  |  |   movea.l 4(a0),a0
    b208:	|  |  |   move.l (sp),d1
    b20a:	|  |  |   move.l d1,d0
    b20c:	|  |  |   add.l d0,d0
    b20e:	|  |  |   add.l d1,d0
    b210:	|  |  |   add.l d0,d0
    b212:	|  |  |   add.l d0,d0
    b214:	|  |  |   adda.l d0,a0
    b216:	|  |  |   move.l 4(a0),d0
    b21a:	|  |  |   move.l 12(sp),-(sp)
    b21e:	|  |  |   move.l d0,-(sp)
    b220:	|  |  |   jsr 958 <put4bytes>
    b226:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    b228:	|  |  |   movea.l 8(sp),a0
    b22c:	|  |  |   movea.l 4(a0),a0
    b230:	|  |  |   move.l (sp),d1
    b232:	|  |  |   move.l d1,d0
    b234:	|  |  |   add.l d0,d0
    b236:	|  |  |   add.l d1,d0
    b238:	|  |  |   add.l d0,d0
    b23a:	|  |  |   add.l d0,d0
    b23c:	|  |  |   adda.l d0,a0
    b23e:	|  |  |   move.l 8(a0),d0
    b242:	|  |  |   move.l 12(sp),-(sp)
    b246:	|  |  |   move.l d0,-(sp)
    b248:	|  |  |   jsr 958 <put4bytes>
    b24e:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    b250:	|  |  |   addq.l #1,(sp)
    b252:	|  |  '-> movea.l 8(sp),a0
    b256:	|  |      move.l 8(a0),d0
    b25a:	|  |      cmp.l (sp),d0
    b25c:	|  '----- bgt.w b1da <saveAnim+0x3e>
		}
	}
	return TRUE;
    b260:	'-------> moveq #1,d0
}
    b262:	          addq.l #4,sp
    b264:	          rts

0000b266 <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    b266:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    b268:	             movea.l 8(sp),a0
    b26c:	             move.l 4(a0),d0
    b270:	             move.l 12(sp),-(sp)
    b274:	             move.l d0,-(sp)
    b276:	             jsr 8d0 <put2bytes>
    b27c:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b27e:	             clr.l (sp)
    b280:	   ,-------- bra.s b2ac <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    b282:	,--|-------> movea.l 8(sp),a0
    b286:	|  |         move.l (a0),d1
    b288:	|  |         move.l (sp),d0
    b28a:	|  |         add.l d0,d0
    b28c:	|  |         add.l d0,d0
    b28e:	|  |         movea.l d1,a0
    b290:	|  |         adda.l d0,a0
    b292:	|  |         move.l (a0),d0
    b294:	|  |         move.l 12(sp),-(sp)
    b298:	|  |         move.l d0,-(sp)
    b29a:	|  |         jsr b19c <saveAnim>
    b2a0:	|  |         addq.l #8,sp
    b2a2:	|  |         tst.w d0
    b2a4:	|  |     ,-- bne.s b2aa <saveCostume+0x44>
    b2a6:	|  |     |   clr.w d0
    b2a8:	|  |  ,--|-- bra.s b2c0 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    b2aa:	|  |  |  '-> addq.l #1,(sp)
    b2ac:	|  '--|----> movea.l 8(sp),a0
    b2b0:	|     |      move.l 4(a0),d1
    b2b4:	|     |      move.l d1,d0
    b2b6:	|     |      add.l d0,d0
    b2b8:	|     |      add.l d1,d0
    b2ba:	|     |      cmp.l (sp),d0
    b2bc:	'-----|----- bgt.s b282 <saveCostume+0x1c>
	}

	return TRUE;
    b2be:	      |      moveq #1,d0
}
    b2c0:	      '----> addq.l #4,sp
    b2c2:	             rts

0000b2c4 <savePeople>:

BOOL savePeople (BPTR fp) {
    b2c4:	             lea -144(sp),sp
    b2c8:	             move.l a6,-(sp)
    b2ca:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    b2cc:	             move.l 1cdc6 <allPeople>,148(sp)
	int countPeople = 0, a;
    b2d4:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    b2d8:	             move.w 1c6ec <scaleHorizon>,d0
    b2de:	             movea.w d0,a0
    b2e0:	             move.l 156(sp),-(sp)
    b2e4:	             move.l a0,-(sp)
    b2e6:	             jsr a9c <putSigned>
    b2ec:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    b2ee:	             move.w 1c6ee <scaleDivide>,d0
    b2f4:	             movea.w d0,a0
    b2f6:	             move.l 156(sp),-(sp)
    b2fa:	             move.l a0,-(sp)
    b2fc:	             jsr a9c <putSigned>
    b302:	             addq.l #8,sp

	while (me) {
    b304:	         ,-- bra.s b314 <savePeople+0x50>
		countPeople ++;
    b306:	      ,--|-> addq.l #1,144(sp)
		me = me -> next;
    b30a:	      |  |   movea.l 148(sp),a0
    b30e:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    b314:	      |  '-> tst.l 148(sp)
    b318:	      '----- bne.s b306 <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    b31a:	             move.l 156(sp),-(sp)
    b31e:	             move.l 148(sp),-(sp)
    b322:	             jsr 8d0 <put2bytes>
    b328:	             addq.l #8,sp

	me = allPeople;
    b32a:	             move.l 1cdc6 <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    b332:	             clr.l 140(sp)
    b336:	   ,-------- bra.w b78e <savePeople+0x4ca>

		putFloat (me -> x, fp);
    b33a:	,--|-------> movea.l 148(sp),a0
    b33e:	|  |         move.l (a0),d0
    b340:	|  |         move.l 156(sp),-(sp)
    b344:	|  |         move.l d0,-(sp)
    b346:	|  |         jsr a46 <putFloat>
    b34c:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    b34e:	|  |         movea.l 148(sp),a0
    b352:	|  |         move.l 4(a0),d0
    b356:	|  |         move.l 156(sp),-(sp)
    b35a:	|  |         move.l d0,-(sp)
    b35c:	|  |         jsr a46 <putFloat>
    b362:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    b364:	|  |         movea.l 148(sp),a0
    b368:	|  |         move.l 80(a0),d0
    b36c:	|  |         move.l 156(sp),-(sp)
    b370:	|  |         move.l d0,-(sp)
    b372:	|  |         jsr b266 <saveCostume>
    b378:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    b37a:	|  |         movea.l 148(sp),a0
    b37e:	|  |         move.l 72(a0),d0
    b382:	|  |         move.l 156(sp),-(sp)
    b386:	|  |         move.l d0,-(sp)
    b388:	|  |         jsr b19c <saveAnim>
    b38e:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    b390:	|  |         move.l 156(sp),136(sp)
    b396:	|  |         movea.l 148(sp),a0
    b39a:	|  |         move.l 72(a0),d1
    b39e:	|  |         movea.l 148(sp),a0
    b3a2:	|  |         move.l 76(a0),d0
    b3a6:	|  |         cmp.l d1,d0
    b3a8:	|  |         seq d0
    b3aa:	|  |         neg.b d0
    b3ac:	|  |         move.b d0,d0
    b3ae:	|  |         andi.l #255,d0
    b3b4:	|  |         move.l d0,132(sp)
    b3b8:	|  |         move.l 1cd6e <DOSBase>,d0
    b3be:	|  |         movea.l d0,a6
    b3c0:	|  |         move.l 136(sp),d1
    b3c4:	|  |         move.l 132(sp),d2
    b3c8:	|  |         jsr -312(a6)
    b3cc:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    b3d0:	|  |         movea.l 148(sp),a0
    b3d4:	|  |         move.l 32(a0),d0
    b3d8:	|  |         move.l 156(sp),-(sp)
    b3dc:	|  |         move.l d0,-(sp)
    b3de:	|  |         jsr a46 <putFloat>
    b3e4:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    b3e6:	|  |         movea.l 148(sp),a0
    b3ea:	|  |         move.l 118(a0),d0
    b3ee:	|  |         move.l 156(sp),-(sp)
    b3f2:	|  |         move.l d0,-(sp)
    b3f4:	|  |         jsr 8d0 <put2bytes>
    b3fa:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    b3fc:	|  |         movea.l 148(sp),a0
    b400:	|  |         move.l 20(a0),d0
    b404:	|  |         move.l 156(sp),-(sp)
    b408:	|  |         move.l d0,-(sp)
    b40a:	|  |         jsr 8d0 <put2bytes>
    b410:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    b412:	|  |         movea.l 148(sp),a0
    b416:	|  |         move.l 40(a0),d0
    b41a:	|  |         move.l 156(sp),-(sp)
    b41e:	|  |         move.l d0,-(sp)
    b420:	|  |         jsr 8d0 <put2bytes>
    b426:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    b428:	|  |         movea.l 148(sp),a0
    b42c:	|  |         move.l 44(a0),d0
    b430:	|  |         move.l 156(sp),-(sp)
    b434:	|  |         move.l d0,-(sp)
    b436:	|  |         jsr 8d0 <put2bytes>
    b43c:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    b43e:	|  |         movea.l 148(sp),a0
    b442:	|  |         move.l 48(a0),d0
    b446:	|  |         move.l 156(sp),-(sp)
    b44a:	|  |         move.l d0,-(sp)
    b44c:	|  |         jsr 8d0 <put2bytes>
    b452:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    b454:	|  |         movea.l 148(sp),a0
    b458:	|  |         move.l 52(a0),d0
    b45c:	|  |         move.l 156(sp),-(sp)
    b460:	|  |         move.l d0,-(sp)
    b462:	|  |         jsr 8d0 <put2bytes>
    b468:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    b46a:	|  |         movea.l 148(sp),a0
    b46e:	|  |         move.l 84(a0),d0
    b472:	|  |         move.l 156(sp),-(sp)
    b476:	|  |         move.l d0,-(sp)
    b478:	|  |         jsr 8d0 <put2bytes>
    b47e:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    b480:	|  |         movea.l 148(sp),a0
    b484:	|  |         move.l 88(a0),d0
    b488:	|  |         move.l 156(sp),-(sp)
    b48c:	|  |         move.l d0,-(sp)
    b48e:	|  |         jsr 8d0 <put2bytes>
    b494:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    b496:	|  |         movea.l 148(sp),a0
    b49a:	|  |         move.l 28(a0),d0
    b49e:	|  |         move.l 156(sp),-(sp)
    b4a2:	|  |         move.l d0,-(sp)
    b4a4:	|  |         jsr 8d0 <put2bytes>
    b4aa:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    b4ac:	|  |         movea.l 148(sp),a0
    b4b0:	|  |         move.l 122(a0),d0
    b4b4:	|  |         move.l 156(sp),-(sp)
    b4b8:	|  |         move.l d0,-(sp)
    b4ba:	|  |         jsr 8d0 <put2bytes>
    b4c0:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    b4c2:	|  |         movea.l 148(sp),a0
    b4c6:	|  |         move.l 24(a0),d0
    b4ca:	|  |         move.l d0,d0
    b4cc:	|  |         movea.w d0,a0
    b4ce:	|  |         move.l 156(sp),-(sp)
    b4d2:	|  |         move.l a0,-(sp)
    b4d4:	|  |         jsr a9c <putSigned>
    b4da:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    b4dc:	|  |         move.l 156(sp),124(sp)
    b4e2:	|  |         movea.l 148(sp),a0
    b4e6:	|  |         move.w 104(a0),d0
    b4ea:	|  |         movea.w d0,a0
    b4ec:	|  |         move.l a0,120(sp)
    b4f0:	|  |         move.l 1cd6e <DOSBase>,d0
    b4f6:	|  |         movea.l d0,a6
    b4f8:	|  |         move.l 124(sp),d1
    b4fc:	|  |         move.l 120(sp),d2
    b500:	|  |         jsr -312(a6)
    b504:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    b508:	|  |         move.l 156(sp),112(sp)
    b50e:	|  |         movea.l 148(sp),a0
    b512:	|  |         move.w 64(a0),d0
    b516:	|  |         movea.w d0,a0
    b518:	|  |         move.l a0,108(sp)
    b51c:	|  |         move.l 1cd6e <DOSBase>,d0
    b522:	|  |         movea.l d0,a6
    b524:	|  |         move.l 112(sp),d1
    b528:	|  |         move.l 108(sp),d2
    b52c:	|  |         jsr -312(a6)
    b530:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    b534:	|  |         move.l 156(sp),100(sp)
    b53a:	|  |         movea.l 148(sp),a0
    b53e:	|  |         move.w 66(a0),d0
    b542:	|  |         movea.w d0,a0
    b544:	|  |         move.l a0,96(sp)
    b548:	|  |         move.l 1cd6e <DOSBase>,d0
    b54e:	|  |         movea.l d0,a6
    b550:	|  |         move.l 100(sp),d1
    b554:	|  |         move.l 96(sp),d2
    b558:	|  |         jsr -312(a6)
    b55c:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    b560:	|  |         movea.l 148(sp),a0
    b564:	|  |         move.l 68(a0),d0
    b568:	|  |  ,----- beq.s b5a6 <savePeople+0x2e2>
			FPutC (fp, 1);
    b56a:	|  |  |      move.l 156(sp),76(sp)
    b570:	|  |  |      moveq #1,d0
    b572:	|  |  |      move.l d0,72(sp)
    b576:	|  |  |      move.l 1cd6e <DOSBase>,d0
    b57c:	|  |  |      movea.l d0,a6
    b57e:	|  |  |      move.l 76(sp),d1
    b582:	|  |  |      move.l 72(sp),d2
    b586:	|  |  |      jsr -312(a6)
    b58a:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    b58e:	|  |  |      movea.l 148(sp),a0
    b592:	|  |  |      move.l 68(a0),d0
    b596:	|  |  |      move.l 156(sp),-(sp)
    b59a:	|  |  |      move.l d0,-(sp)
    b59c:	|  |  |      jsr c7c0 <saveFunction>
    b5a2:	|  |  |      addq.l #8,sp
    b5a4:	|  |  |  ,-- bra.s b5ca <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    b5a6:	|  |  '--|-> move.l 156(sp),88(sp)
    b5ac:	|  |     |   moveq #1,d0
    b5ae:	|  |     |   move.l d0,84(sp)
    b5b2:	|  |     |   move.l 1cd6e <DOSBase>,d0
    b5b8:	|  |     |   movea.l d0,a6
    b5ba:	|  |     |   move.l 88(sp),d1
    b5be:	|  |     |   move.l 84(sp),d2
    b5c2:	|  |     |   jsr -312(a6)
    b5c6:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    b5ca:	|  |     '-> movea.l 148(sp),a0
    b5ce:	|  |         move.l 106(a0),d0
    b5d2:	|  |         move.l 156(sp),-(sp)
    b5d6:	|  |         move.l d0,-(sp)
    b5d8:	|  |         jsr 8d0 <put2bytes>
    b5de:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    b5e0:	|  |         movea.l 148(sp),a0
    b5e4:	|  |         move.l 92(a0),d0
    b5e8:	|  |         move.l 156(sp),-(sp)
    b5ec:	|  |         move.l d0,-(sp)
    b5ee:	|  |         jsr 8d0 <put2bytes>
    b5f4:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    b5f6:	|  |         movea.l 148(sp),a0
    b5fa:	|  |         move.l 100(a0),d0
    b5fe:	|  |         move.l 156(sp),-(sp)
    b602:	|  |         move.l d0,-(sp)
    b604:	|  |         jsr 8d0 <put2bytes>
    b60a:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    b60c:	|  |         movea.l 148(sp),a0
    b610:	|  |         move.l 96(a0),d0
    b614:	|  |         move.l 156(sp),-(sp)
    b618:	|  |         move.l d0,-(sp)
    b61a:	|  |         jsr 8d0 <put2bytes>
    b620:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    b622:	|  |         movea.l 148(sp),a0
    b626:	|  |         move.l 110(a0),d0
    b62a:	|  |         move.l d0,d0
    b62c:	|  |         movea.w d0,a0
    b62e:	|  |         move.l 156(sp),-(sp)
    b632:	|  |         move.l a0,-(sp)
    b634:	|  |         jsr a9c <putSigned>
    b63a:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    b63c:	|  |         movea.l 148(sp),a0
    b640:	|  |         move.l 56(a0),d0
    b644:	|  |         move.l d0,d0
    b646:	|  |         movea.w d0,a0
    b648:	|  |         move.l 156(sp),-(sp)
    b64c:	|  |         move.l a0,-(sp)
    b64e:	|  |         jsr a9c <putSigned>
    b654:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    b656:	|  |         movea.l 148(sp),a0
    b65a:	|  |         move.l 60(a0),d0
    b65e:	|  |         move.l d0,d0
    b660:	|  |         movea.w d0,a0
    b662:	|  |         move.l 156(sp),-(sp)
    b666:	|  |         move.l a0,-(sp)
    b668:	|  |         jsr a9c <putSigned>
    b66e:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    b670:	|  |         move.l 156(sp),64(sp)
    b676:	|  |         movea.l 148(sp),a0
    b67a:	|  |         move.b 126(a0),d0
    b67e:	|  |         move.b d0,d0
    b680:	|  |         andi.l #255,d0
    b686:	|  |         move.l d0,60(sp)
    b68a:	|  |         move.l 1cd6e <DOSBase>,d0
    b690:	|  |         movea.l d0,a6
    b692:	|  |         move.l 64(sp),d1
    b696:	|  |         move.l 60(sp),d2
    b69a:	|  |         jsr -312(a6)
    b69e:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    b6a2:	|  |         move.l 156(sp),52(sp)
    b6a8:	|  |         movea.l 148(sp),a0
    b6ac:	|  |         move.b 127(a0),d0
    b6b0:	|  |         move.b d0,d0
    b6b2:	|  |         andi.l #255,d0
    b6b8:	|  |         move.l d0,48(sp)
    b6bc:	|  |         move.l 1cd6e <DOSBase>,d0
    b6c2:	|  |         movea.l d0,a6
    b6c4:	|  |         move.l 52(sp),d1
    b6c8:	|  |         move.l 48(sp),d2
    b6cc:	|  |         jsr -312(a6)
    b6d0:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    b6d4:	|  |         move.l 156(sp),40(sp)
    b6da:	|  |         movea.l 148(sp),a0
    b6de:	|  |         move.b 128(a0),d0
    b6e2:	|  |         move.b d0,d0
    b6e4:	|  |         andi.l #255,d0
    b6ea:	|  |         move.l d0,36(sp)
    b6ee:	|  |         move.l 1cd6e <DOSBase>,d0
    b6f4:	|  |         movea.l d0,a6
    b6f6:	|  |         move.l 40(sp),d1
    b6fa:	|  |         move.l 36(sp),d2
    b6fe:	|  |         jsr -312(a6)
    b702:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    b706:	|  |         move.l 156(sp),28(sp)
    b70c:	|  |         movea.l 148(sp),a0
    b710:	|  |         move.b 129(a0),d0
    b714:	|  |         move.b d0,d0
    b716:	|  |         andi.l #255,d0
    b71c:	|  |         move.l d0,24(sp)
    b720:	|  |         move.l 1cd6e <DOSBase>,d0
    b726:	|  |         movea.l d0,a6
    b728:	|  |         move.l 28(sp),d1
    b72c:	|  |         move.l 24(sp),d2
    b730:	|  |         jsr -312(a6)
    b734:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    b738:	|  |         move.l 156(sp),16(sp)
    b73e:	|  |         movea.l 148(sp),a0
    b742:	|  |         move.b 130(a0),d0
    b746:	|  |         move.b d0,d0
    b748:	|  |         andi.l #255,d0
    b74e:	|  |         move.l d0,12(sp)
    b752:	|  |         move.l 1cd6e <DOSBase>,d0
    b758:	|  |         movea.l d0,a6
    b75a:	|  |         move.l 16(sp),d1
    b75e:	|  |         move.l 12(sp),d2
    b762:	|  |         jsr -312(a6)
    b766:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b76a:	|  |         movea.l 148(sp),a0
    b76e:	|  |         move.l 114(a0),d0
    b772:	|  |         move.l 156(sp),-(sp)
    b776:	|  |         move.l d0,-(sp)
    b778:	|  |         jsr db94 <saveObjectRef>
    b77e:	|  |         addq.l #8,sp

		me = me -> next;
    b780:	|  |         movea.l 148(sp),a0
    b784:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b78a:	|  |         addq.l #1,140(sp)
    b78e:	|  '-------> movea.l 140(sp),a0
    b792:	|            cmpa.l 144(sp),a0
    b796:	'----------- blt.w b33a <savePeople+0x76>
	}
	return TRUE;
    b79a:	             moveq #1,d0
}
    b79c:	             move.l (sp)+,d2
    b79e:	             movea.l (sp)+,a6
    b7a0:	             lea 144(sp),sp
    b7a4:	             rts

0000b7a6 <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b7a6:	movea.l 4(sp),a0
    b7aa:	move.l 8(sp),(a0)
}
    b7ae:	nop
    b7b0:	rts

0000b7b2 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b7b2:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b7b4:	       move.l 12(sp),-(sp)
    b7b8:	       jsr a7de <findPerson>
    b7be:	       addq.l #4,sp
    b7c0:	       move.l d0,(sp)
	if (! moveMe) return;
    b7c2:	,----- beq.s b7d6 <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b7c4:	|      move.l 8(sp),-(sp)
    b7c8:	|      move.l 4(sp),-(sp)
    b7cc:	|      jsr b7dc <setMyDrawMode>
    b7d2:	|      addq.l #8,sp
    b7d4:	|  ,-- bra.s b7d8 <setDrawMode+0x26>
	if (! moveMe) return;
    b7d6:	'--|-> nop
}
    b7d8:	   '-> addq.l #4,sp
    b7da:	       rts

0000b7dc <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b7dc:	       moveq #19,d0
    b7de:	       cmp.l 8(sp),d0
    b7e2:	,----- bcs.w bcba <setMyDrawMode+0x4de>
    b7e6:	|      move.l 8(sp),d0
    b7ea:	|      add.l d0,d0
    b7ec:	|      movea.l d0,a0
    b7ee:	|      adda.l #47098,a0
    b7f4:	|      move.w (a0),d0
    b7f6:	|      jmp (b7fa <setMyDrawMode+0x1e>,pc,d0.w)
    b7fa:	|      .short 0x04c0
    b7fc:	|      ori.l #6684712,-(a4)
    b802:	|      btst d0,-(a0)
    b804:	|      bchg d0,(a6)+
    b806:	|      bclr d0,(a4)+
    b808:	|      bset d0,(a2)+
    b80a:	|      andi.b #84,(a6)
    b80e:	|      andi.l #55575312,(a2)
    b814:	|      .short 0x02d0
    b816:	|      bclr d1,(a0)
    b818:	|      .short 0x044a
    b81a:	|      .short 0x040c
    b81c:	|      movep.l d1,1158(a6)
    b820:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b822:	|      movea.l 4(sp),a0
    b826:	|      clr.b 128(a0)
    b82a:	|      movea.l 4(sp),a0
    b82e:	|      move.b 128(a0),d0
    b832:	|      movea.l 4(sp),a0
    b836:	|      move.b d0,127(a0)
    b83a:	|      movea.l 4(sp),a0
    b83e:	|      move.b 127(a0),d0
    b842:	|      movea.l 4(sp),a0
    b846:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b84a:	|      movea.l 4(sp),a0
    b84e:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b852:	|      movea.l 4(sp),a0
    b856:	|      move.b #64,130(a0)
			break;
    b85c:	|  ,-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b860:	|  |   movea.l 4(sp),a0
    b864:	|  |   clr.b 128(a0)
    b868:	|  |   movea.l 4(sp),a0
    b86c:	|  |   move.b 128(a0),d0
    b870:	|  |   movea.l 4(sp),a0
    b874:	|  |   move.b d0,127(a0)
    b878:	|  |   movea.l 4(sp),a0
    b87c:	|  |   move.b 127(a0),d0
    b880:	|  |   movea.l 4(sp),a0
    b884:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b888:	|  |   movea.l 4(sp),a0
    b88c:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b890:	|  |   movea.l 4(sp),a0
    b894:	|  |   move.b #-128,130(a0)
			break;
    b89a:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b89e:	|  |   movea.l 4(sp),a0
    b8a2:	|  |   clr.b 128(a0)
    b8a6:	|  |   movea.l 4(sp),a0
    b8aa:	|  |   move.b 128(a0),d0
    b8ae:	|  |   movea.l 4(sp),a0
    b8b2:	|  |   move.b d0,127(a0)
    b8b6:	|  |   movea.l 4(sp),a0
    b8ba:	|  |   move.b 127(a0),d0
    b8be:	|  |   movea.l 4(sp),a0
    b8c2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b8c6:	|  |   movea.l 4(sp),a0
    b8ca:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b8ce:	|  |   movea.l 4(sp),a0
    b8d2:	|  |   move.b #-64,130(a0)
			break;
    b8d8:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b8dc:	|  |   movea.l 4(sp),a0
    b8e0:	|  |   clr.b 128(a0)
    b8e4:	|  |   movea.l 4(sp),a0
    b8e8:	|  |   move.b 128(a0),d0
    b8ec:	|  |   movea.l 4(sp),a0
    b8f0:	|  |   move.b d0,127(a0)
    b8f4:	|  |   movea.l 4(sp),a0
    b8f8:	|  |   move.b 127(a0),d0
    b8fc:	|  |   movea.l 4(sp),a0
    b900:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b904:	|  |   movea.l 4(sp),a0
    b908:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b90c:	|  |   movea.l 4(sp),a0
    b910:	|  |   move.b #-2,130(a0)
			break;
    b916:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b91a:	|  |   movea.l 4(sp),a0
    b91e:	|  |   clr.b 128(a0)
    b922:	|  |   movea.l 4(sp),a0
    b926:	|  |   move.b 128(a0),d0
    b92a:	|  |   movea.l 4(sp),a0
    b92e:	|  |   move.b d0,127(a0)
    b932:	|  |   movea.l 4(sp),a0
    b936:	|  |   move.b 127(a0),d0
    b93a:	|  |   movea.l 4(sp),a0
    b93e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b942:	|  |   movea.l 4(sp),a0
    b946:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b94c:	|  |   movea.l 4(sp),a0
    b950:	|  |   clr.b 130(a0)
			break;
    b954:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b958:	|  |   movea.l 4(sp),a0
    b95c:	|  |   clr.b 128(a0)
    b960:	|  |   movea.l 4(sp),a0
    b964:	|  |   move.b 128(a0),d0
    b968:	|  |   movea.l 4(sp),a0
    b96c:	|  |   move.b d0,127(a0)
    b970:	|  |   movea.l 4(sp),a0
    b974:	|  |   move.b 127(a0),d0
    b978:	|  |   movea.l 4(sp),a0
    b97c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b980:	|  |   movea.l 4(sp),a0
    b984:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b98a:	|  |   movea.l 4(sp),a0
    b98e:	|  |   clr.b 130(a0)
			break;
    b992:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b996:	|  |   movea.l 4(sp),a0
    b99a:	|  |   clr.b 128(a0)
    b99e:	|  |   movea.l 4(sp),a0
    b9a2:	|  |   move.b 128(a0),d0
    b9a6:	|  |   movea.l 4(sp),a0
    b9aa:	|  |   move.b d0,127(a0)
    b9ae:	|  |   movea.l 4(sp),a0
    b9b2:	|  |   move.b 127(a0),d0
    b9b6:	|  |   movea.l 4(sp),a0
    b9ba:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b9be:	|  |   movea.l 4(sp),a0
    b9c2:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b9c8:	|  |   movea.l 4(sp),a0
    b9cc:	|  |   clr.b 130(a0)
			break;
    b9d0:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b9d4:	|  |   movea.l 4(sp),a0
    b9d8:	|  |   clr.b 128(a0)
    b9dc:	|  |   movea.l 4(sp),a0
    b9e0:	|  |   move.b 128(a0),d0
    b9e4:	|  |   movea.l 4(sp),a0
    b9e8:	|  |   move.b d0,127(a0)
    b9ec:	|  |   movea.l 4(sp),a0
    b9f0:	|  |   move.b 127(a0),d0
    b9f4:	|  |   movea.l 4(sp),a0
    b9f8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b9fc:	|  |   movea.l 4(sp),a0
    ba00:	|  |   st 129(a0)
			moveMe->transparency = 0;
    ba04:	|  |   movea.l 4(sp),a0
    ba08:	|  |   clr.b 130(a0)
			break;
    ba0c:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ba10:	|  |   movea.l 4(sp),a0
    ba14:	|  |   clr.b 128(a0)
    ba18:	|  |   movea.l 4(sp),a0
    ba1c:	|  |   move.b 128(a0),d0
    ba20:	|  |   movea.l 4(sp),a0
    ba24:	|  |   move.b d0,127(a0)
    ba28:	|  |   movea.l 4(sp),a0
    ba2c:	|  |   move.b 127(a0),d0
    ba30:	|  |   movea.l 4(sp),a0
    ba34:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    ba38:	|  |   movea.l 4(sp),a0
    ba3c:	|  |   st 129(a0)
			moveMe->transparency = 64;
    ba40:	|  |   movea.l 4(sp),a0
    ba44:	|  |   move.b #64,130(a0)
			break;
    ba4a:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ba4e:	|  |   movea.l 4(sp),a0
    ba52:	|  |   clr.b 128(a0)
    ba56:	|  |   movea.l 4(sp),a0
    ba5a:	|  |   move.b 128(a0),d0
    ba5e:	|  |   movea.l 4(sp),a0
    ba62:	|  |   move.b d0,127(a0)
    ba66:	|  |   movea.l 4(sp),a0
    ba6a:	|  |   move.b 127(a0),d0
    ba6e:	|  |   movea.l 4(sp),a0
    ba72:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    ba76:	|  |   movea.l 4(sp),a0
    ba7a:	|  |   st 129(a0)
			moveMe->transparency = 128;
    ba7e:	|  |   movea.l 4(sp),a0
    ba82:	|  |   move.b #-128,130(a0)
			break;
    ba88:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    ba8c:	|  |   movea.l 4(sp),a0
    ba90:	|  |   clr.b 128(a0)
    ba94:	|  |   movea.l 4(sp),a0
    ba98:	|  |   move.b 128(a0),d0
    ba9c:	|  |   movea.l 4(sp),a0
    baa0:	|  |   move.b d0,127(a0)
    baa4:	|  |   movea.l 4(sp),a0
    baa8:	|  |   move.b 127(a0),d0
    baac:	|  |   movea.l 4(sp),a0
    bab0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bab4:	|  |   movea.l 4(sp),a0
    bab8:	|  |   st 129(a0)
			moveMe->transparency = 192;
    babc:	|  |   movea.l 4(sp),a0
    bac0:	|  |   move.b #-64,130(a0)
			break;
    bac6:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    baca:	|  |   movea.l 4(sp),a0
    bace:	|  |   move.b #-128,128(a0)
    bad4:	|  |   movea.l 4(sp),a0
    bad8:	|  |   move.b 128(a0),d0
    badc:	|  |   movea.l 4(sp),a0
    bae0:	|  |   move.b d0,127(a0)
    bae4:	|  |   movea.l 4(sp),a0
    bae8:	|  |   move.b 127(a0),d0
    baec:	|  |   movea.l 4(sp),a0
    baf0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    baf4:	|  |   movea.l 4(sp),a0
    baf8:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bafe:	|  |   movea.l 4(sp),a0
    bb02:	|  |   clr.b 130(a0)
			break;
    bb06:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bb0a:	|  |   movea.l 4(sp),a0
    bb0e:	|  |   move.b #-128,128(a0)
    bb14:	|  |   movea.l 4(sp),a0
    bb18:	|  |   move.b 128(a0),d0
    bb1c:	|  |   movea.l 4(sp),a0
    bb20:	|  |   move.b d0,127(a0)
    bb24:	|  |   movea.l 4(sp),a0
    bb28:	|  |   move.b 127(a0),d0
    bb2c:	|  |   movea.l 4(sp),a0
    bb30:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bb34:	|  |   movea.l 4(sp),a0
    bb38:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bb3e:	|  |   movea.l 4(sp),a0
    bb42:	|  |   clr.b 130(a0)
			break;
    bb46:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bb4a:	|  |   movea.l 4(sp),a0
    bb4e:	|  |   move.b #-128,128(a0)
    bb54:	|  |   movea.l 4(sp),a0
    bb58:	|  |   move.b 128(a0),d0
    bb5c:	|  |   movea.l 4(sp),a0
    bb60:	|  |   move.b d0,127(a0)
    bb64:	|  |   movea.l 4(sp),a0
    bb68:	|  |   move.b 127(a0),d0
    bb6c:	|  |   movea.l 4(sp),a0
    bb70:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bb74:	|  |   movea.l 4(sp),a0
    bb78:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bb7e:	|  |   movea.l 4(sp),a0
    bb82:	|  |   clr.b 130(a0)
			break;
    bb86:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    bb8a:	|  |   movea.l 4(sp),a0
    bb8e:	|  |   move.b #-128,128(a0)
    bb94:	|  |   movea.l 4(sp),a0
    bb98:	|  |   move.b 128(a0),d0
    bb9c:	|  |   movea.l 4(sp),a0
    bba0:	|  |   move.b d0,127(a0)
    bba4:	|  |   movea.l 4(sp),a0
    bba8:	|  |   move.b 127(a0),d0
    bbac:	|  |   movea.l 4(sp),a0
    bbb0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bbb4:	|  |   movea.l 4(sp),a0
    bbb8:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bbbc:	|  |   movea.l 4(sp),a0
    bbc0:	|  |   clr.b 130(a0)
			break;
    bbc4:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bbc8:	|  |   movea.l 4(sp),a0
    bbcc:	|  |   st 128(a0)
    bbd0:	|  |   movea.l 4(sp),a0
    bbd4:	|  |   move.b 128(a0),d0
    bbd8:	|  |   movea.l 4(sp),a0
    bbdc:	|  |   move.b d0,127(a0)
    bbe0:	|  |   movea.l 4(sp),a0
    bbe4:	|  |   move.b 127(a0),d0
    bbe8:	|  |   movea.l 4(sp),a0
    bbec:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    bbf0:	|  |   movea.l 4(sp),a0
    bbf4:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    bbfa:	|  |   movea.l 4(sp),a0
    bbfe:	|  |   clr.b 130(a0)
			break;
    bc02:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bc06:	|  |   movea.l 4(sp),a0
    bc0a:	|  |   st 128(a0)
    bc0e:	|  |   movea.l 4(sp),a0
    bc12:	|  |   move.b 128(a0),d0
    bc16:	|  |   movea.l 4(sp),a0
    bc1a:	|  |   move.b d0,127(a0)
    bc1e:	|  |   movea.l 4(sp),a0
    bc22:	|  |   move.b 127(a0),d0
    bc26:	|  |   movea.l 4(sp),a0
    bc2a:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    bc2e:	|  |   movea.l 4(sp),a0
    bc32:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    bc38:	|  |   movea.l 4(sp),a0
    bc3c:	|  |   clr.b 130(a0)
			break;
    bc40:	|  +-- bra.w bcf4 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bc44:	|  |   movea.l 4(sp),a0
    bc48:	|  |   st 128(a0)
    bc4c:	|  |   movea.l 4(sp),a0
    bc50:	|  |   move.b 128(a0),d0
    bc54:	|  |   movea.l 4(sp),a0
    bc58:	|  |   move.b d0,127(a0)
    bc5c:	|  |   movea.l 4(sp),a0
    bc60:	|  |   move.b 127(a0),d0
    bc64:	|  |   movea.l 4(sp),a0
    bc68:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    bc6c:	|  |   movea.l 4(sp),a0
    bc70:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    bc76:	|  |   movea.l 4(sp),a0
    bc7a:	|  |   clr.b 130(a0)
			break;
    bc7e:	|  +-- bra.s bcf4 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    bc80:	|  |   movea.l 4(sp),a0
    bc84:	|  |   st 128(a0)
    bc88:	|  |   movea.l 4(sp),a0
    bc8c:	|  |   move.b 128(a0),d0
    bc90:	|  |   movea.l 4(sp),a0
    bc94:	|  |   move.b d0,127(a0)
    bc98:	|  |   movea.l 4(sp),a0
    bc9c:	|  |   move.b 127(a0),d0
    bca0:	|  |   movea.l 4(sp),a0
    bca4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    bca8:	|  |   movea.l 4(sp),a0
    bcac:	|  |   st 129(a0)
			moveMe->transparency = 0;
    bcb0:	|  |   movea.l 4(sp),a0
    bcb4:	|  |   clr.b 130(a0)
			break;
    bcb8:	|  +-- bra.s bcf4 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    bcba:	'--|-> movea.l 4(sp),a0
    bcbe:	   |   clr.b 128(a0)
    bcc2:	   |   movea.l 4(sp),a0
    bcc6:	   |   move.b 128(a0),d0
    bcca:	   |   movea.l 4(sp),a0
    bcce:	   |   move.b d0,127(a0)
    bcd2:	   |   movea.l 4(sp),a0
    bcd6:	   |   move.b 127(a0),d0
    bcda:	   |   movea.l 4(sp),a0
    bcde:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    bce2:	   |   movea.l 4(sp),a0
    bce6:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    bcea:	   |   movea.l 4(sp),a0
    bcee:	   |   clr.b 130(a0)
			break;
    bcf2:	   |   nop
	}
}
    bcf4:	   '-> nop
    bcf6:	       rts

0000bcf8 <shufflePeople>:

void shufflePeople () {
    bcf8:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    bcfc:	             move.l #118214,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    bd04:	             move.l 1cdc6 <allPeople>,d0
    bd0a:	,----------- beq.w bde0 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    bd0e:	|     ,----- bra.w bdd0 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    bd12:	|  ,--|----> movea.l 16(sp),a0
    bd16:	|  |  |      movea.l (a0),a0
    bd18:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    bd1e:	|  |  |      movea.l 16(sp),a0
    bd22:	|  |  |      movea.l (a0),a0
    bd24:	|  |  |      move.l 118(a0),d0
    bd28:	|  |  |      moveq #1,d1
    bd2a:	|  |  |      and.l d1,d0
    bd2c:	|  |  |  ,-- beq.s bd44 <shufflePeople+0x4c>
    bd2e:	|  |  |  |   move.l #1148846080,-(sp)
    bd34:	|  |  |  |   move.l 16(sp),-(sp)
    bd38:	|  |  |  |   jsr 17706 <__addsf3>
    bd3e:	|  |  |  |   addq.l #8,sp
    bd40:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    bd44:	|  |  |  '-> movea.l 16(sp),a0
    bd48:	|  |  |      movea.l (a0),a0
    bd4a:	|  |  |      movea.l 36(a0),a0
    bd4e:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    bd54:	|  |  |      movea.l 16(sp),a0
    bd58:	|  |  |      movea.l (a0),a0
    bd5a:	|  |  |      movea.l 36(a0),a0
    bd5e:	|  |  |      move.l 118(a0),d0
    bd62:	|  |  |      moveq #1,d1
    bd64:	|  |  |      and.l d1,d0
    bd66:	|  |  |  ,-- beq.s bd7e <shufflePeople+0x86>
    bd68:	|  |  |  |   move.l #1148846080,-(sp)
    bd6e:	|  |  |  |   move.l 12(sp),-(sp)
    bd72:	|  |  |  |   jsr 17706 <__addsf3>
    bd78:	|  |  |  |   addq.l #8,sp
    bd7a:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    bd7e:	|  |  |  '-> move.l 8(sp),-(sp)
    bd82:	|  |  |      move.l 16(sp),-(sp)
    bd86:	|  |  |      jsr 17ab6 <__gtsf2>
    bd8c:	|  |  |      addq.l #8,sp
    bd8e:	|  |  |      tst.l d0
    bd90:	|  |  |  ,-- ble.s bdc2 <shufflePeople+0xca>
			A = (*thisReference);
    bd92:	|  |  |  |   movea.l 16(sp),a0
    bd96:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    bd9a:	|  |  |  |   movea.l 16(sp),a0
    bd9e:	|  |  |  |   movea.l (a0),a0
    bda0:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    bda4:	|  |  |  |   movea.l (sp),a0
    bda6:	|  |  |  |   move.l 36(a0),d0
    bdaa:	|  |  |  |   movea.l 4(sp),a0
    bdae:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    bdb2:	|  |  |  |   movea.l (sp),a0
    bdb4:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    bdba:	|  |  |  |   movea.l 16(sp),a0
    bdbe:	|  |  |  |   move.l (sp),(a0)
    bdc0:	|  |  +--|-- bra.s bdd0 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    bdc2:	|  |  |  '-> movea.l 16(sp),a0
    bdc6:	|  |  |      move.l (a0),d0
    bdc8:	|  |  |      moveq #36,d1
    bdca:	|  |  |      add.l d0,d1
    bdcc:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    bdd0:	|  |  '----> movea.l 16(sp),a0
    bdd4:	|  |         movea.l (a0),a0
    bdd6:	|  |         move.l 36(a0),d0
    bdda:	|  '-------- bne.w bd12 <shufflePeople+0x1a>
    bdde:	|        ,-- bra.s bde2 <shufflePeople+0xea>
	if (!allPeople) return;
    bde0:	'--------|-> nop
		}
	}
}
    bde2:	         '-> lea 20(sp),sp
    bde6:	             rts

0000bde8 <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    bde8:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    bdea:	       tst.l 8(sp)
    bdee:	   ,-- bgt.s bdf4 <setCharacterWalkSpeed+0xc>
    bdf0:	   |   clr.w d0
    bdf2:	,--|-- bra.s be12 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    bdf4:	|  '-> move.l 12(sp),-(sp)
    bdf8:	|      jsr a7de <findPerson>
    bdfe:	|      addq.l #4,sp
    be00:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    be02:	|  ,-- bne.s be08 <setCharacterWalkSpeed+0x20>
    be04:	|  |   clr.w d0
    be06:	+--|-- bra.s be12 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    be08:	|  '-> movea.l (sp),a0
    be0a:	|      move.l 8(sp),28(a0)
	return TRUE;
    be10:	|      moveq #1,d0
}
    be12:	'----> addq.l #4,sp
    be14:	       rts

0000be16 <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    be16:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    be18:	       move.l 8(sp),-(sp)
    be1c:	       jsr a7de <findPerson>
    be22:	       addq.l #4,sp
    be24:	       move.l d0,(sp)
    if (thisPerson) {
    be26:	,----- beq.s be46 <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    be28:	|      movea.l (sp),a0
    be2a:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    be30:	|      moveq #2,d0
    be32:	|      and.l 12(sp),d0
    be36:	|  ,-- beq.s be42 <setPersonExtra+0x2c>
    be38:	|  |   movea.l (sp),a0
    be3a:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    be42:	|  '-> moveq #1,d0
    be44:	|  ,-- bra.s be48 <setPersonExtra+0x32>
    }
    return FALSE;
    be46:	'--|-> clr.w d0
}
    be48:	   '-> addq.l #4,sp
    be4a:	       rts

0000be4c <setScale>:


void setScale (short int h, short int d) {
    be4c:	subq.l #4,sp
    be4e:	move.l 8(sp),d1
    be52:	move.l 12(sp),d0
    be56:	move.w d1,d1
    be58:	move.w d1,2(sp)
    be5c:	move.w d0,d0
    be5e:	move.w d0,(sp)
	scaleHorizon = h;
    be60:	move.w 2(sp),1c6ec <scaleHorizon>
	scaleDivide = d;
    be68:	move.w (sp),1c6ee <scaleDivide>
}
    be6e:	nop
    be70:	addq.l #4,sp
    be72:	rts

0000be74 <setShown>:

void setShown (BOOL h, int ob) {
    be74:	    subq.l #8,sp
    be76:	    move.l 12(sp),d0
    be7a:	    move.w d0,d0
    be7c:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    be80:	    move.l 16(sp),-(sp)
    be84:	    jsr a7de <findPerson>
    be8a:	    addq.l #4,sp
    be8c:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    be90:	,-- beq.s be9c <setShown+0x28>
    be92:	|   movea.l 4(sp),a0
    be96:	|   move.w 2(sp),104(a0)
}
    be9c:	'-> nop
    be9e:	    addq.l #8,sp
    bea0:	    rts

0000bea2 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    bea2:	       subq.l #8,sp
    bea4:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    bea6:	       movea.l 16(sp),a0
    beaa:	       move.l 92(a0),d0
    beae:	       move.l d0,d1
    beb0:	       addi.l #360,d1
    beb6:	       movea.l 16(sp),a0
    beba:	       move.l 96(a0),d0
    bebe:	       move.l d1,d2
    bec0:	       sub.l d0,d2
    bec2:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    bec6:	       movea.l 16(sp),a0
    beca:	       move.l 122(a0),d0
    bece:	   ,-- beq.s beda <spinStep+0x38>
    bed0:	   |   movea.l 16(sp),a0
    bed4:	   |   move.l 122(a0),d0
    bed8:	,--|-- bra.s bef4 <spinStep+0x52>
    beda:	|  '-> movea.l 16(sp),a0
    bede:	|      movea.l 80(a0),a0
    bee2:	|      move.l 4(a0),d0
    bee6:	|      move.l d0,-(sp)
    bee8:	|      pea 168 <decodeFilename+0x50>
    beec:	|      jsr 17f22 <__divsi3>
    bef2:	|      addq.l #8,sp
    bef4:	'----> move.l d0,4(sp)
	while (diff > 180) {
    bef8:	   ,-- bra.s bf02 <spinStep+0x60>
		diff -= 360;
    befa:	,--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    bf02:	|  '-> cmpi.l #180,8(sp)
    bf0a:	'----- bgt.s befa <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    bf0c:	       move.l 8(sp),d0
    bf10:	       cmp.l 4(sp),d0
    bf14:	   ,-- blt.s bf32 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    bf16:	   |   movea.l 16(sp),a0
    bf1a:	   |   move.l 92(a0),d0
    bf1e:	   |   sub.l 4(sp),d0
    bf22:	   |   move.l d0,-(sp)
    bf24:	   |   move.l 20(sp),-(sp)
    bf28:	   |   jsr c012 <turnMeAngle>
    bf2e:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    bf30:	,--|-- bra.s bf78 <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    bf32:	|  '-> move.l 4(sp),d0
    bf36:	|      neg.l d0
    bf38:	|      cmp.l 8(sp),d0
    bf3c:	|  ,-- blt.s bf5a <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    bf3e:	|  |   movea.l 16(sp),a0
    bf42:	|  |   move.l 92(a0),d0
    bf46:	|  |   add.l 4(sp),d0
    bf4a:	|  |   move.l d0,-(sp)
    bf4c:	|  |   move.l 20(sp),-(sp)
    bf50:	|  |   jsr c012 <turnMeAngle>
    bf56:	|  |   addq.l #8,sp
}
    bf58:	+--|-- bra.s bf78 <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    bf5a:	|  '-> movea.l 16(sp),a0
    bf5e:	|      move.l 96(a0),d0
    bf62:	|      move.l d0,-(sp)
    bf64:	|      move.l 20(sp),-(sp)
    bf68:	|      jsr c012 <turnMeAngle>
    bf6e:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    bf70:	|      movea.l 16(sp),a0
    bf74:	|      clr.w 66(a0)
}
    bf78:	'----> nop
    bf7a:	       move.l (sp)+,d2
    bf7c:	       addq.l #8,sp
    bf7e:	       rts

0000bf80 <stopPerson>:


BOOL stopPerson (int o) {
    bf80:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    bf82:	       move.l 8(sp),-(sp)
    bf86:	       jsr a7de <findPerson>
    bf8c:	       addq.l #4,sp
    bf8e:	       move.l d0,(sp)
    if (moveMe)
    bf90:	,----- beq.s bfce <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    bf92:	|      movea.l (sp),a0
    bf94:	|      move.l 68(a0),d0
    bf98:	+----- beq.s bfce <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    bf9a:	|      movea.l (sp),a0
    bf9c:	|      move.l 68(a0),d0
    bfa0:	|      move.l d0,-(sp)
    bfa2:	|      jsr 51d8 <abortFunction>
    bfa8:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    bfaa:	|      movea.l (sp),a0
    bfac:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    bfb0:	|      movea.l (sp),a0
    bfb2:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    bfb6:	|      movea.l (sp),a0
    bfb8:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    bfbc:	|      clr.l -(sp)
    bfbe:	|      move.l 4(sp),-(sp)
    bfc2:	|      jsr 437a <setFrames>
    bfc8:	|      addq.l #8,sp
            return TRUE;
    bfca:	|      moveq #1,d0
    bfcc:	|  ,-- bra.s bfd0 <stopPerson+0x50>
        }
    return FALSE;
    bfce:	'--|-> clr.w d0
}
    bfd0:	   '-> addq.l #4,sp
    bfd2:	       rts

0000bfd4 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    bfd4:	       subq.l #8,sp
	int total = 0;
    bfd6:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bfda:	       clr.l (sp)
    bfdc:	   ,-- bra.s bffe <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    bfde:	,--|-> movea.l 12(sp),a0
    bfe2:	|  |   movea.l 4(a0),a0
    bfe6:	|  |   move.l (sp),d1
    bfe8:	|  |   move.l d1,d0
    bfea:	|  |   add.l d0,d0
    bfec:	|  |   add.l d1,d0
    bfee:	|  |   add.l d0,d0
    bff0:	|  |   add.l d0,d0
    bff2:	|  |   adda.l d0,a0
    bff4:	|  |   move.l 4(a0),d0
    bff8:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    bffc:	|  |   addq.l #1,(sp)
    bffe:	|  '-> movea.l 12(sp),a0
    c002:	|      move.l 8(a0),d0
    c006:	|      cmp.l (sp),d0
    c008:	'----- bgt.s bfde <timeForAnim+0xa>
	}
	return total;
    c00a:	       move.l 4(sp),d0
}
    c00e:	       addq.l #8,sp
    c010:	       rts

0000c012 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    c012:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    c014:	       movea.l 8(sp),a0
    c018:	       movea.l 80(a0),a0
    c01c:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    c020:	       movea.l 8(sp),a0
    c024:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    c02a:	       move.l (sp),-(sp)
    c02c:	       pea b4 <_start+0xb4>
    c030:	       jsr 17f22 <__divsi3>
    c036:	       addq.l #8,sp
    c038:	       move.l d0,d1
    c03a:	       addi.l #180,d1
    c040:	       movea.l 8(sp),a0
    c044:	       move.l 100(a0),d0
    c048:	       add.l d1,d0
    c04a:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    c04e:	   ,-- bra.s c058 <turnMeAngle+0x46>
    c050:	,--|-> addi.l #-360,12(sp)
    c058:	|  '-> cmpi.l #359,12(sp)
    c060:	'----- bgt.s c050 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    c062:	       move.l (sp),-(sp)
    c064:	       move.l 16(sp),-(sp)
    c068:	       jsr 17ea4 <__mulsi3>
    c06e:	       addq.l #8,sp
    c070:	       pea 168 <decodeFilename+0x50>
    c074:	       move.l d0,-(sp)
    c076:	       jsr 17f22 <__divsi3>
    c07c:	       addq.l #8,sp
    c07e:	       movea.l 8(sp),a0
    c082:	       move.l d0,106(a0)
}
    c086:	       nop
    c088:	       addq.l #4,sp
    c08a:	       rts

0000c08c <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    c08c:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    c08e:	          move.l 8(sp),-(sp)
    c092:	          jsr a7de <findPerson>
    c098:	          addq.l #4,sp
    c09a:	          move.l d0,(sp)
    if (thisPerson) {
    c09c:	,-------- beq.s c0fc <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    c09e:	|         movea.l (sp),a0
    c0a0:	|         move.l 68(a0),d0
    c0a4:	|     ,-- beq.s c0b6 <turnPersonToFace+0x2a>
    c0a6:	|     |   movea.l (sp),a0
    c0a8:	|     |   move.l 68(a0),d0
    c0ac:	|     |   move.l d0,-(sp)
    c0ae:	|     |   jsr 51d8 <abortFunction>
    c0b4:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    c0b6:	|     '-> movea.l (sp),a0
    c0b8:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    c0bc:	|         movea.l (sp),a0
    c0be:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    c0c2:	|         movea.l (sp),a0
    c0c4:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    c0c8:	|         move.l 12(sp),-(sp)
    c0cc:	|         move.l 4(sp),-(sp)
    c0d0:	|         jsr c012 <turnMeAngle>
    c0d6:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    c0d8:	|         movea.l 1ccb6 <speech>,a0
    c0de:	|         move.l (a0),d0
    c0e0:	|         cmp.l (sp),d0
    c0e2:	|  ,----- bne.s c0e8 <turnPersonToFace+0x5c>
    c0e4:	|  |      moveq #2,d0
    c0e6:	|  |  ,-- bra.s c0ea <turnPersonToFace+0x5e>
    c0e8:	|  '--|-> moveq #0,d0
    c0ea:	|     '-> move.l d0,-(sp)
    c0ec:	|         move.l 4(sp),-(sp)
    c0f0:	|         jsr 437a <setFrames>
    c0f6:	|         addq.l #8,sp
        return TRUE;
    c0f8:	|         moveq #1,d0
    c0fa:	|     ,-- bra.s c0fe <turnPersonToFace+0x72>
    }
    return FALSE;
    c0fc:	'-----|-> clr.w d0
}
    c0fe:	      '-> addq.l #4,sp
    c100:	          rts

0000c102 <walkAllPeople>:

void walkAllPeople() {
    c102:	             subq.l #4,sp
	struct onScreenPerson *thisPerson = allPeople;
    c104:	             move.l 1cdc6 <allPeople>,(sp)

	while (thisPerson) {
    c10a:	   ,-------- bra.s c17a <walkAllPeople+0x78>
		if (thisPerson->walking) {
    c10c:	,--|-------> movea.l (sp),a0
    c10e:	|  |         move.w 64(a0),d0
    c112:	|  |     ,-- beq.s c126 <walkAllPeople+0x24>
			walkMe(thisPerson, TRUE);
    c114:	|  |     |   pea 1 <_start+0x1>
    c118:	|  |     |   move.l 4(sp),-(sp)
    c11c:	|  |     |   jsr c186 <walkMe>
    c122:	|  |     |   addq.l #8,sp
    c124:	|  |  ,--|-- bra.s c146 <walkAllPeople+0x44>
		} else if (thisPerson->spinning) {
    c126:	|  |  |  '-> movea.l (sp),a0
    c128:	|  |  |      move.w 66(a0),d0
    c12c:	|  |  +----- beq.s c146 <walkAllPeople+0x44>
			spinStep(thisPerson);
    c12e:	|  |  |      move.l (sp),-(sp)
    c130:	|  |  |      jsr bea2 <spinStep>
    c136:	|  |  |      addq.l #4,sp
			setFrames(thisPerson, ANI_STAND);
    c138:	|  |  |      clr.l -(sp)
    c13a:	|  |  |      move.l 4(sp),-(sp)
    c13e:	|  |  |      jsr 437a <setFrames>
    c144:	|  |  |      addq.l #8,sp
		}
		if ((!thisPerson->walking) && (!thisPerson->spinning) && thisPerson->continueAfterWalking) {
    c146:	|  |  '----> movea.l (sp),a0
    c148:	|  |         move.w 64(a0),d0
    c14c:	|  |     ,-- bne.s c174 <walkAllPeople+0x72>
    c14e:	|  |     |   movea.l (sp),a0
    c150:	|  |     |   move.w 66(a0),d0
    c154:	|  |     +-- bne.s c174 <walkAllPeople+0x72>
    c156:	|  |     |   movea.l (sp),a0
    c158:	|  |     |   move.l 68(a0),d0
    c15c:	|  |     +-- beq.s c174 <walkAllPeople+0x72>
			restartFunction(thisPerson->continueAfterWalking);
    c15e:	|  |     |   movea.l (sp),a0
    c160:	|  |     |   move.l 68(a0),d0
    c164:	|  |     |   move.l d0,-(sp)
    c166:	|  |     |   jsr 734a <restartFunction>
    c16c:	|  |     |   addq.l #4,sp
			thisPerson->continueAfterWalking = NULL;
    c16e:	|  |     |   movea.l (sp),a0
    c170:	|  |     |   clr.l 68(a0)
		}
		thisPerson = thisPerson->next;
    c174:	|  |     '-> movea.l (sp),a0
    c176:	|  |         move.l 36(a0),(sp)
	while (thisPerson) {
    c17a:	|  '-------> tst.l (sp)
    c17c:	'----------- bne.s c10c <walkAllPeople+0xa>
	}
}
    c17e:	             nop
    c180:	             nop
    c182:	             addq.l #4,sp
    c184:	             rts

0000c186 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    c186:	                lea -20(sp),sp
    c18a:	                move.l d3,-(sp)
    c18c:	                move.l d2,-(sp)
    c18e:	                move.l 36(sp),d0
    c192:	                move.w d0,d0
    c194:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    c198:	                cmpi.w #-1,10(sp)
    c19e:	,-------------- bne.s c1a6 <walkMe+0x20>
    c1a0:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c1a6:	>-------------> movea.l 32(sp),a0
    c1aa:	|               move.l 48(a0),d0
    c1ae:	|               move.l d0,-(sp)
    c1b0:	|               jsr 1794a <__floatsisf>
    c1b6:	|               addq.l #4,sp
    c1b8:	|               move.l d0,d1
    c1ba:	|               movea.l 32(sp),a0
    c1be:	|               move.l (a0),d0
    c1c0:	|               move.l d0,-(sp)
    c1c2:	|               move.l d1,-(sp)
    c1c4:	|               jsr 17c3e <__subsf3>
    c1ca:	|               addq.l #8,sp
    c1cc:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    c1d0:	|               movea.l 32(sp),a0
    c1d4:	|               move.l 52(a0),d0
    c1d8:	|               move.l d0,-(sp)
    c1da:	|               jsr 1794a <__floatsisf>
    c1e0:	|               addq.l #4,sp
    c1e2:	|               move.l d0,d1
    c1e4:	|               movea.l 32(sp),a0
    c1e8:	|               move.l 4(a0),d0
    c1ec:	|               move.l d0,-(sp)
    c1ee:	|               move.l d1,-(sp)
    c1f0:	|               jsr 17c3e <__subsf3>
    c1f6:	|               addq.l #8,sp
    c1f8:	|               move.l d0,-(sp)
    c1fa:	|               move.l d0,-(sp)
    c1fc:	|               jsr 17706 <__addsf3>
    c202:	|               addq.l #8,sp
    c204:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    c208:	|               movea.l 32(sp),a0
    c20c:	|               move.l 32(a0),d2
    c210:	|               movea.l 32(sp),a0
    c214:	|               move.l 28(a0),d0
    c218:	|               move.l d0,-(sp)
    c21a:	|               jsr 1794a <__floatsisf>
    c220:	|               addq.l #4,sp
    c222:	|               move.l d0,-(sp)
    c224:	|               move.l d2,-(sp)
    c226:	|               jsr 179fc <__mulsf3>
    c22c:	|               addq.l #8,sp
    c22e:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    c232:	|               move.l 24(sp),-(sp)
    c236:	|               jsr 1786c <__extendsfdf2>
    c23c:	|               addq.l #4,sp
    c23e:	|               move.l #-1717986918,-(sp)
    c244:	|               move.l #1070176665,-(sp)
    c24a:	|               move.l d1,-(sp)
    c24c:	|               move.l d0,-(sp)
    c24e:	|               jsr 17b22 <__ltdf2>
    c254:	|               lea 16(sp),sp
    c258:	|               tst.l d0
    c25a:	|           ,-- bge.s c264 <walkMe+0xde>
    c25c:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    c264:	|           '-> move.l 20(sp),-(sp)
    c268:	|               jsr 178e2 <__fixsfsi>
    c26e:	|               addq.l #4,sp
    c270:	|               move.l d0,-(sp)
    c272:	|               jsr 93ce <TF_abs>
    c278:	|               addq.l #4,sp
    c27a:	|               move.l d0,d2
    c27c:	|               move.l 16(sp),-(sp)
    c280:	|               jsr 178e2 <__fixsfsi>
    c286:	|               addq.l #4,sp
    c288:	|               move.l d0,-(sp)
    c28a:	|               jsr 93ce <TF_abs>
    c290:	|               addq.l #4,sp
    c292:	|               cmp.l d2,d0
    c294:	|        ,----- bgt.s c2b8 <walkMe+0x132>
    c296:	|        |      move.l 20(sp),-(sp)
    c29a:	|        |      jsr 178e2 <__fixsfsi>
    c2a0:	|        |      addq.l #4,sp
    c2a2:	|        |      move.l d0,-(sp)
    c2a4:	|        |      jsr 93ce <TF_abs>
    c2aa:	|        |      addq.l #4,sp
    c2ac:	|        |      move.l d0,-(sp)
    c2ae:	|        |      jsr 1794a <__floatsisf>
    c2b4:	|        |      addq.l #4,sp
    c2b6:	|        |  ,-- bra.s c2d8 <walkMe+0x152>
    c2b8:	|        '--|-> move.l 16(sp),-(sp)
    c2bc:	|           |   jsr 178e2 <__fixsfsi>
    c2c2:	|           |   addq.l #4,sp
    c2c4:	|           |   move.l d0,-(sp)
    c2c6:	|           |   jsr 93ce <TF_abs>
    c2cc:	|           |   addq.l #4,sp
    c2ce:	|           |   move.l d0,-(sp)
    c2d0:	|           |   jsr 1794a <__floatsisf>
    c2d6:	|           |   addq.l #4,sp
    c2d8:	|           '-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    c2dc:	|               move.l 12(sp),-(sp)
    c2e0:	|               jsr 178e2 <__fixsfsi>
    c2e6:	|               addq.l #4,sp
    c2e8:	|               move.l d0,-(sp)
    c2ea:	|               jsr 93ce <TF_abs>
    c2f0:	|               addq.l #4,sp
    c2f2:	|               move.l d0,-(sp)
    c2f4:	|               jsr 1794a <__floatsisf>
    c2fa:	|               addq.l #4,sp
    c2fc:	|               move.l d0,-(sp)
    c2fe:	|               move.l 28(sp),-(sp)
    c302:	|               jsr 17b70 <__ltsf2>
    c308:	|               addq.l #8,sp
    c30a:	|               tst.l d0
    c30c:	|        ,----- bge.w c3be <walkMe+0x238>
			if (thisPerson->spinning) {
    c310:	|        |      movea.l 32(sp),a0
    c314:	|        |      move.w 66(a0),d0
    c318:	|        |  ,-- beq.s c336 <walkMe+0x1b0>
				spinStep(thisPerson);
    c31a:	|        |  |   move.l 32(sp),-(sp)
    c31e:	|        |  |   jsr bea2 <spinStep>
    c324:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    c326:	|        |  |   pea 1 <_start+0x1>
    c32a:	|        |  |   move.l 36(sp),-(sp)
    c32e:	|        |  |   jsr 437a <setFrames>
    c334:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    c336:	|        |  '-> move.l 24(sp),-(sp)
    c33a:	|        |      move.l 16(sp),-(sp)
    c33e:	|        |      jsr 17800 <__divsf3>
    c344:	|        |      addq.l #8,sp
    c346:	|        |      move.l d0,24(sp)
			if (move)
    c34a:	|        |      tst.w 10(sp)
    c34e:	|        |  ,-- beq.s c3b8 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    c350:	|        |  |   movea.l 32(sp),a0
    c354:	|        |  |   move.l 4(a0),d2
    c358:	|        |  |   move.l 24(sp),d0
    c35c:	|        |  |   move.l d0,-(sp)
    c35e:	|        |  |   move.l d0,-(sp)
    c360:	|        |  |   jsr 17706 <__addsf3>
    c366:	|        |  |   addq.l #8,sp
    c368:	|        |  |   move.l d0,-(sp)
    c36a:	|        |  |   move.l 20(sp),-(sp)
    c36e:	|        |  |   jsr 17800 <__divsf3>
    c374:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c376:	|        |  |   move.l d0,-(sp)
    c378:	|        |  |   move.l d2,-(sp)
    c37a:	|        |  |   jsr 17706 <__addsf3>
    c380:	|        |  |   addq.l #8,sp
    c382:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    c384:	|        |  |   movea.l 32(sp),a0
    c388:	|        |  |   move.l (a0),d3
    c38a:	|        |  |   move.l 24(sp),-(sp)
    c38e:	|        |  |   move.l 24(sp),-(sp)
    c392:	|        |  |   jsr 17800 <__divsf3>
    c398:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    c39a:	|        |  |   move.l d0,-(sp)
    c39c:	|        |  |   move.l d3,-(sp)
    c39e:	|        |  |   jsr 17706 <__addsf3>
    c3a4:	|        |  |   addq.l #8,sp
    c3a6:	|        |  |   move.l d2,-(sp)
    c3a8:	|        |  |   move.l d0,-(sp)
    c3aa:	|        |  |   move.l 40(sp),-(sp)
    c3ae:	|        |  |   jsr af88 <moveAndScale>
    c3b4:	|        |  |   lea 12(sp),sp
			return TRUE;
    c3b8:	|        |  '-> moveq #1,d0
    c3ba:	|  ,-----|----- bra.w c46c <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    c3be:	|  |     '----> movea.l 32(sp),a0
    c3c2:	|  |            move.l 56(a0),d0
    c3c6:	|  |            moveq #-1,d1
    c3c8:	|  |            cmp.l d0,d1
    c3ca:	|  |        ,-- bne.s c402 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    c3cc:	|  |        |   movea.l 32(sp),a0
    c3d0:	|  |        |   move.l 110(a0),d0
    c3d4:	|  |        |   moveq #-1,d1
    c3d6:	|  |        |   cmp.l d0,d1
    c3d8:	|  |  ,-----|-- beq.s c416 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    c3da:	|  |  |     |   movea.l 32(sp),a0
    c3de:	|  |  |     |   move.l 110(a0),d0
    c3e2:	|  |  |     |   movea.l 32(sp),a0
    c3e6:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    c3ea:	|  |  |     |   movea.l 32(sp),a0
    c3ee:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    c3f4:	|  |  |     |   move.l 32(sp),-(sp)
    c3f8:	|  |  |     |   jsr bea2 <spinStep>
    c3fe:	|  |  |     |   addq.l #4,sp
			}
			break;
    c400:	|  |  +-----|-- bra.s c416 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    c402:	|  |  |     '-> move.l 32(sp),-(sp)
    c406:	|  |  |         jsr 9b40 <doBorderStuff>
    c40c:	|  |  |         addq.l #4,sp
    c40e:	|  |  |         tst.w d0
    c410:	|  |  |  ,----- beq.s c41a <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    c412:	'--|--|--|----- bra.w c1a6 <walkMe+0x20>
			break;
    c416:	   |  '--|----> nop
    c418:	   |     |  ,-- bra.s c41c <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    c41a:	   |     '--|-> nop
	}

	thisPerson->walking = FALSE;
    c41c:	   |        '-> movea.l 32(sp),a0
    c420:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    c424:	   |            clr.l -(sp)
    c426:	   |            move.l 36(sp),-(sp)
    c42a:	   |            jsr 437a <setFrames>
    c430:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    c432:	   |            movea.l 32(sp),a0
    c436:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    c43a:	   |            move.l d0,-(sp)
    c43c:	   |            jsr 1794a <__floatsisf>
    c442:	   |            addq.l #4,sp
    c444:	   |            move.l d0,d2
				 thisPerson->walkToX,
    c446:	   |            movea.l 32(sp),a0
    c44a:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    c44e:	   |            move.l d0,-(sp)
    c450:	   |            jsr 1794a <__floatsisf>
    c456:	   |            addq.l #4,sp
    c458:	   |            move.l d2,-(sp)
    c45a:	   |            move.l d0,-(sp)
    c45c:	   |            move.l 40(sp),-(sp)
    c460:	   |            jsr af88 <moveAndScale>
    c466:	   |            lea 12(sp),sp
	return FALSE;
    c46a:	   |            clr.w d0
}
    c46c:	   '----------> move.l (sp)+,d2
    c46e:	                move.l (sp)+,d3
    c470:	                lea 20(sp),sp
    c474:	                rts

0000c476 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    c476:	       subq.l #8,sp
    c478:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    c47a:	   ,-- bra.s c4aa <clearStackLib+0x34>
		k = stackLib;
    c47c:	,--|-> move.l 1cdf2 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    c484:	|  |   movea.l 1cdf2 <stackLib>,a0
    c48a:	|  |   move.l 4(a0),d0
    c48e:	|  |   move.l d0,1cdf2 <stackLib>
		FreeVec(k);
    c494:	|  |   move.l 8(sp),4(sp)
    c49a:	|  |   move.l 1cd66 <SysBase>,d0
    c4a0:	|  |   movea.l d0,a6
    c4a2:	|  |   movea.l 4(sp),a1
    c4a6:	|  |   jsr -690(a6)
	while (stackLib) {
    c4aa:	|  '-> move.l 1cdf2 <stackLib>,d0
    c4b0:	'----- bne.s c47c <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    c4b2:	       clr.l 1cdee <stackLibTotal>
}
    c4b8:	       nop
    c4ba:	       movea.l (sp)+,a6
    c4bc:	       addq.l #8,sp
    c4be:	       rts

0000c4c0 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    c4c0:	          lea -128(sp),sp
    c4c4:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    c4c8:	      ,-- bra.s c4da <loadGame+0x1a>
    c4ca:	   ,--|-> move.l 1ccfe <allRunningFunctions>,d0
    c4d0:	   |  |   move.l d0,-(sp)
    c4d2:	   |  |   jsr 620c <finishFunction>
    c4d8:	   |  |   addq.l #4,sp
    c4da:	   |  '-> move.l 1ccfe <allRunningFunctions>,d0
    c4e0:	   '----- bne.s c4ca <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    c4e2:	          pea 1cdf6 <ssgVersion>
    c4e8:	          pea 19653 <PutChar+0x1699>
    c4ee:	          pea 41 <_start+0x41>
    c4f2:	          pea 53 <_start+0x53>
    c4f6:	          move.l 160(sp),-(sp)
    c4fa:	          jsr 6f32 <openAndVerify>
    c500:	          lea 20(sp),sp
    c504:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    c508:	      ,-- bne.s c510 <loadGame+0x50>
    c50a:	      |   clr.w d0
    c50c:	,-----|-- bra.w c7b6 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    c510:	|     '-> move.l 112(sp),108(sp)
    c516:	|         lea 140(sp),a0
    c51a:	|         lea -126(a0),a0
    c51e:	|         move.l a0,120(sp)
    c522:	|         moveq #8,d0
    c524:	|         move.l d0,116(sp)
    c528:	|         move.l 1cd6e <DOSBase>,d0
    c52e:	|         movea.l d0,a6
    c530:	|         move.l 108(sp),d1
    c534:	|         move.l 120(sp),d2
    c538:	|         move.l 116(sp),d3
    c53c:	|         jsr -42(a6)
    c540:	|         move.l d0,132(sp)
    c544:	|         move.l 132(sp),d0
    c548:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    c54c:	|         moveq #8,d0
    c54e:	|         cmp.l 128(sp),d0
    c552:	|     ,-- beq.s c562 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    c554:	|     |   pea 19674 <PutChar+0x16ba>
    c55a:	|     |   jsr 17518 <KPrintF>
    c560:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c562:	|     '-> move.l 14(sp),d1
    c566:	|         move.l 1cd08 <fileTime>,d0
    c56c:	|         cmp.l d1,d0
    c56e:	|     ,-- bne.s c57e <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    c570:	|     |   move.l 18(sp),d1
    c574:	|     |   move.l 1cd0c <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    c57a:	|     |   cmp.l d1,d0
    c57c:	|  ,--|-- beq.s c59e <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    c57e:	|  |  '-> move.l 144(sp),-(sp)
    c582:	|  |      pea 19690 <PutChar+0x16d6>
    c588:	|  |      pea 19757 <PutChar+0x179d>
    c58e:	|  |      jsr 17518 <KPrintF>
    c594:	|  |      lea 12(sp),sp
		return FALSE; 
    c598:	|  |      clr.w d0
    c59a:	+--|----- bra.w c7b6 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    c59e:	|  '----> move.l 112(sp),124(sp)
    c5a4:	|         move.l 1cd6e <DOSBase>,d0
    c5aa:	|         movea.l d0,a6
    c5ac:	|         move.l 124(sp),d1
    c5b0:	|         jsr -306(a6)
    c5b4:	|         move.l d0,136(sp)
    c5b8:	|         move.l 136(sp),d0
    c5bc:	|         move.l d0,d0
    c5be:	|         move.w d0,1c5b6 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    c5c4:	|         move.l 112(sp),100(sp)
    c5ca:	|         move.l 1cd6e <DOSBase>,d0
    c5d0:	|         movea.l d0,a6
    c5d2:	|         move.l 100(sp),d1
    c5d6:	|         jsr -306(a6)
    c5da:	|         move.l d0,96(sp)
    c5de:	|         move.l 96(sp),d0
    c5e2:	|         move.l d0,d0
    c5e4:	|         move.w d0,1cd06 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    c5ea:	|         move.l 112(sp),92(sp)
    c5f0:	|         move.l 1cd6e <DOSBase>,d0
    c5f6:	|         movea.l d0,a6
    c5f8:	|         move.l 92(sp),d1
    c5fc:	|         jsr -306(a6)
    c600:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    c604:	|         move.l 112(sp),84(sp)
    c60a:	|         move.l 1cd6e <DOSBase>,d0
    c610:	|         movea.l d0,a6
    c612:	|         move.l 84(sp),d1
    c616:	|         jsr -306(a6)
    c61a:	|         move.l d0,80(sp)
    c61e:	|         move.l 80(sp),d0
    c622:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    c626:	|     ,-- beq.s c65a <loadGame+0x19a>
		fontNum = get2bytes (fp);
    c628:	|     |   move.l 112(sp),-(sp)
    c62c:	|     |   jsr 6bc <get2bytes>
    c632:	|     |   addq.l #4,sp
    c634:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    c638:	|     |   move.l 112(sp),-(sp)
    c63c:	|     |   jsr 6bc <get2bytes>
    c642:	|     |   addq.l #4,sp
    c644:	|     |   move.l d0,1ce5a <fontHeight>
		charOrder = readString(fp);		
    c64a:	|     |   move.l 112(sp),-(sp)
    c64e:	|     |   jsr b02 <readString>
    c654:	|     |   addq.l #4,sp
    c656:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    c65a:	|     '-> move.l 104(sp),70(sp)
    c660:	|         move.l 1cd66 <SysBase>,d0
    c666:	|         movea.l d0,a6
    c668:	|         movea.l 70(sp),a1
    c66c:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    c670:	|         move.l 112(sp),-(sp)
    c674:	|         jsr 854 <getSigned>
    c67a:	|         addq.l #4,sp
    c67c:	|         move.w d0,1cc5e <fontSpace>

	killAllPeople ();
    c682:	|         jsr abf2 <killAllPeople>
	killAllRegions ();
    c688:	|         jsr 15d28 <killAllRegions>

	int camerX = get2bytes (fp);
    c68e:	|         move.l 112(sp),-(sp)
    c692:	|         jsr 6bc <get2bytes>
    c698:	|         addq.l #4,sp
    c69a:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    c69e:	|         move.l 112(sp),-(sp)
    c6a2:	|         jsr 6bc <get2bytes>
    c6a8:	|         addq.l #4,sp
    c6aa:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    c6ae:	|         move.l 112(sp),-(sp)
    c6b2:	|         jsr 7d8 <getFloat>
    c6b8:	|         addq.l #4,sp
    c6ba:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    c6be:	|         move.l 112(sp),54(sp)
    c6c4:	|         move.l 1cd6e <DOSBase>,d0
    c6ca:	|         movea.l d0,a6
    c6cc:	|         move.l 54(sp),d1
    c6d0:	|         jsr -306(a6)
    c6d4:	|         move.l d0,50(sp)
    c6d8:	|         move.l 50(sp),d0
    c6dc:	|         move.l d0,d0
    c6de:	|         move.b d0,1c6d4 <brightnessLevel>

	loadHandlers (fp);
    c6e4:	|         move.l 112(sp),-(sp)
    c6e8:	|         jsr 6e92 <loadHandlers>
    c6ee:	|         addq.l #4,sp
	loadRegions (fp);
    c6f0:	|         move.l 112(sp),-(sp)
    c6f4:	|         jsr 15d84 <loadRegions>
    c6fa:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    c6fc:	|         moveq #12,d0
    c6fe:	|         move.l d0,46(sp)
    c702:	|         clr.l 42(sp)
    c706:	|         move.l 1cd66 <SysBase>,d0
    c70c:	|         movea.l d0,a6
    c70e:	|         move.l 46(sp),d0
    c712:	|         move.l 42(sp),d1
    c716:	|         jsr -684(a6)
    c71a:	|         move.l d0,38(sp)
    c71e:	|         move.l 38(sp),d0
    c722:	|         move.l d0,1cc60 <mouseCursorAnim>
	if (! mouseCursorAnim) {
    c728:	|         move.l 1cc60 <mouseCursorAnim>,d0
    c72e:	|     ,-- bne.s c742 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    c730:	|     |   pea 19761 <PutChar+0x17a7>
    c736:	|     |   jsr 17518 <KPrintF>
    c73c:	|     |   addq.l #4,sp
		return FALSE;
    c73e:	|     |   clr.w d0
    c740:	+-----|-- bra.s c7b6 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    c742:	|     '-> jsr d5e6 <nosnapshot>
	if (FGetC (fp)) {
    c748:	|         move.l 112(sp),34(sp)
    c74e:	|         move.l 1cd6e <DOSBase>,d0
    c754:	|         movea.l d0,a6
    c756:	|         move.l 34(sp),d1
    c75a:	|         jsr -306(a6)
    c75e:	|         move.l d0,30(sp)
    c762:	|         move.l 30(sp),d0
    c766:	|     ,-- beq.s c77c <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    c768:	|     |   move.l 112(sp),-(sp)
    c76c:	|     |   jsr d666 <restoreSnapshot>
    c772:	|     |   addq.l #4,sp
    c774:	|     |   tst.w d0
    c776:	|     +-- bne.s c77c <loadGame+0x2bc>
    c778:	|     |   clr.w d0
    c77a:	+-----|-- bra.s c7b6 <loadGame+0x2f6>
	}

	Close (fp);
    c77c:	|     '-> move.l 112(sp),26(sp)
    c782:	|         move.l 1cd6e <DOSBase>,d0
    c788:	|         movea.l d0,a6
    c78a:	|         move.l 26(sp),d1
    c78e:	|         jsr -36(a6)
    c792:	|         move.l d0,22(sp)
	clearStackLib ();
    c796:	|         jsr c476 <clearStackLib>

	cameraX = camerX;
    c79c:	|         move.l 66(sp),1ce1c <cameraX>
	cameraY = camerY;
    c7a4:	|         move.l 62(sp),1ce20 <cameraY>
	cameraZoom = camerZ;
    c7ac:	|         move.l 58(sp),1c6f8 <cameraZoom>

	return TRUE;
    c7b4:	|         moveq #1,d0
}
    c7b6:	'-------> movem.l (sp)+,d2-d3/a6
    c7ba:	          lea 128(sp),sp
    c7be:	          rts

0000c7c0 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    c7c0:	   ,-> lea -64(sp),sp
    c7c4:	   |   move.l a6,-(sp)
    c7c6:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    c7c8:	   |   movea.l 76(sp),a0
    c7cc:	   |   move.l (a0),d0
    c7ce:	   |   move.l 80(sp),-(sp)
    c7d2:	   |   move.l d0,-(sp)
    c7d4:	   |   jsr 8d0 <put2bytes>
    c7da:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c7dc:	   |   movea.l 76(sp),a0
    c7e0:	   |   move.l 40(a0),d0
    c7e4:	,--|-- beq.s c820 <saveFunction+0x60>
		FPutC (fp, 1);
    c7e6:	|  |   move.l 80(sp),52(sp)
    c7ec:	|  |   moveq #1,d0
    c7ee:	|  |   move.l d0,48(sp)
    c7f2:	|  |   move.l 1cd6e <DOSBase>,d0
    c7f8:	|  |   movea.l d0,a6
    c7fa:	|  |   move.l 52(sp),d1
    c7fe:	|  |   move.l 48(sp),d2
    c802:	|  |   jsr -312(a6)
    c806:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c80a:	|  |   movea.l 76(sp),a0
    c80e:	|  |   move.l 40(a0),d0
    c812:	|  |   move.l 80(sp),-(sp)
    c816:	|  |   move.l d0,-(sp)
    c818:	|  '-- jsr c7c0 <saveFunction>(pc)
    c81c:	|      addq.l #8,sp
    c81e:	|  ,-- bra.s c842 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c820:	'--|-> move.l 80(sp),64(sp)
    c826:	   |   clr.l 60(sp)
    c82a:	   |   move.l 1cd6e <DOSBase>,d0
    c830:	   |   movea.l d0,a6
    c832:	   |   move.l 64(sp),d1
    c836:	   |   move.l 60(sp),d2
    c83a:	   |   jsr -312(a6)
    c83e:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c842:	   '-> movea.l 76(sp),a0
    c846:	       move.l 12(a0),d0
    c84a:	       move.l 80(sp),-(sp)
    c84e:	       move.l d0,-(sp)
    c850:	       jsr 958 <put4bytes>
    c856:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c858:	       movea.l 76(sp),a0
    c85c:	       move.l 36(a0),d0
    c860:	       move.l 80(sp),-(sp)
    c864:	       move.l d0,-(sp)
    c866:	       jsr 8d0 <put2bytes>
    c86c:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c86e:	       move.l 80(sp),40(sp)
    c874:	       movea.l 76(sp),a0
    c878:	       move.w 54(a0),d0
    c87c:	       movea.w d0,a0
    c87e:	       move.l a0,36(sp)
    c882:	       move.l 1cd6e <DOSBase>,d0
    c888:	       movea.l d0,a6
    c88a:	       move.l 40(sp),d1
    c88e:	       move.l 36(sp),d2
    c892:	       jsr -312(a6)
    c896:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c89a:	       move.l 80(sp),28(sp)
    c8a0:	       movea.l 76(sp),a0
    c8a4:	       move.w 48(a0),d0
    c8a8:	       movea.w d0,a0
    c8aa:	       move.l a0,24(sp)
    c8ae:	       move.l 1cd6e <DOSBase>,d0
    c8b4:	       movea.l d0,a6
    c8b6:	       move.l 28(sp),d1
    c8ba:	       move.l 24(sp),d2
    c8be:	       jsr -312(a6)
    c8c2:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c8c6:	       move.l 80(sp),16(sp)
    c8cc:	       movea.l 76(sp),a0
    c8d0:	       move.w 50(a0),d0
    c8d4:	       movea.w d0,a0
    c8d6:	       move.l a0,12(sp)
    c8da:	       move.l 1cd6e <DOSBase>,d0
    c8e0:	       movea.l d0,a6
    c8e2:	       move.l 16(sp),d1
    c8e6:	       move.l 12(sp),d2
    c8ea:	       jsr -312(a6)
    c8ee:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c8f2:	       moveq #28,d0
    c8f4:	       add.l 76(sp),d0
    c8f8:	       move.l 80(sp),-(sp)
    c8fc:	       move.l d0,-(sp)
    c8fe:	       jsr d018 <saveVariable>
    c904:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c906:	       movea.l 76(sp),a0
    c90a:	       move.b 56(a0),d0
    c90e:	   ,-- beq.s c91e <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c910:	   |   pea 19782 <PutChar+0x17c8>
    c916:	   |   jsr 17518 <KPrintF>
    c91c:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c91e:	   '-> movea.l 76(sp),a0
    c922:	       move.l 24(a0),d0
    c926:	       move.l 80(sp),-(sp)
    c92a:	       move.l d0,-(sp)
    c92c:	       jsr ce8c <saveStack>
    c932:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c934:	       clr.l 68(sp)
    c938:	   ,-- bra.s c95c <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c93a:	,--|-> movea.l 76(sp),a0
    c93e:	|  |   move.l 20(a0),d1
    c942:	|  |   move.l 68(sp),d0
    c946:	|  |   lsl.l #3,d0
    c948:	|  |   add.l d1,d0
    c94a:	|  |   move.l 80(sp),-(sp)
    c94e:	|  |   move.l d0,-(sp)
    c950:	|  |   jsr d018 <saveVariable>
    c956:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c958:	|  |   addq.l #1,68(sp)
    c95c:	|  '-> movea.l 76(sp),a0
    c960:	|      move.l 8(a0),d0
    c964:	|      cmp.l 68(sp),d0
    c968:	'----- bgt.s c93a <saveFunction+0x17a>
	}
}
    c96a:	       nop
    c96c:	       nop
    c96e:	       move.l (sp)+,d2
    c970:	       movea.l (sp)+,a6
    c972:	       lea 64(sp),sp
    c976:	       rts

0000c978 <saveGame>:

BOOL saveGame (char * fname) {
    c978:	          lea -248(sp),sp
    c97c:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c980:	          move.l 264(sp),244(sp)
    c986:	          move.l #1006,240(sp)
    c98e:	          move.l 1cd6e <DOSBase>,d0
    c994:	          movea.l d0,a6
    c996:	          move.l 244(sp),d1
    c99a:	          move.l 240(sp),d2
    c99e:	          jsr -30(a6)
    c9a2:	          move.l d0,236(sp)
    c9a6:	          move.l 236(sp),d0
    c9aa:	          move.l d0,232(sp)
	if (fp == NULL) {
    c9ae:	      ,-- bne.s c9c4 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c9b0:	      |   pea 197a4 <PutChar+0x17ea>
    c9b6:	      |   jsr 17518 <KPrintF>
    c9bc:	      |   addq.l #4,sp
		return FALSE;
    c9be:	      |   clr.w d0
    c9c0:	,-----|-- bra.w ce82 <saveGame+0x50a>
	}

	Write( fp, &"SLUDSA", 6);
    c9c4:	|     '-> move.l 232(sp),228(sp)
    c9ca:	|         move.l #104385,224(sp)
    c9d2:	|         moveq #6,d0
    c9d4:	|         move.l d0,220(sp)
    c9d8:	|         move.l 1cd6e <DOSBase>,d0
    c9de:	|         movea.l d0,a6
    c9e0:	|         move.l 228(sp),d1
    c9e4:	|         move.l 224(sp),d2
    c9e8:	|         move.l 220(sp),d3
    c9ec:	|         jsr -48(a6)
    c9f0:	|         move.l d0,216(sp)
	FPutC (fp, 0);
    c9f4:	|         move.l 232(sp),212(sp)
    c9fa:	|         clr.l 208(sp)
    c9fe:	|         move.l 1cd6e <DOSBase>,d0
    ca04:	|         movea.l d0,a6
    ca06:	|         move.l 212(sp),d1
    ca0a:	|         move.l 208(sp),d2
    ca0e:	|         jsr -312(a6)
    ca12:	|         move.l d0,204(sp)
	FPutC (fp, 0);
    ca16:	|         move.l 232(sp),200(sp)
    ca1c:	|         clr.l 196(sp)
    ca20:	|         move.l 1cd6e <DOSBase>,d0
    ca26:	|         movea.l d0,a6
    ca28:	|         move.l 200(sp),d1
    ca2c:	|         move.l 196(sp),d2
    ca30:	|         jsr -312(a6)
    ca34:	|         move.l d0,192(sp)
	FPutC (fp, MAJOR_VERSION);
    ca38:	|         move.l 232(sp),188(sp)
    ca3e:	|         moveq #2,d0
    ca40:	|         move.l d0,184(sp)
    ca44:	|         move.l 1cd6e <DOSBase>,d0
    ca4a:	|         movea.l d0,a6
    ca4c:	|         move.l 188(sp),d1
    ca50:	|         move.l 184(sp),d2
    ca54:	|         jsr -312(a6)
    ca58:	|         move.l d0,180(sp)
	FPutC (fp, MINOR_VERSION);
    ca5c:	|         move.l 232(sp),176(sp)
    ca62:	|         moveq #2,d0
    ca64:	|         move.l d0,172(sp)
    ca68:	|         move.l 1cd6e <DOSBase>,d0
    ca6e:	|         movea.l d0,a6
    ca70:	|         move.l 176(sp),d1
    ca74:	|         move.l 172(sp),d2
    ca78:	|         jsr -312(a6)
    ca7c:	|         move.l d0,168(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    ca80:	|         move.l 232(sp),164(sp)
    ca86:	|         move.l #118024,160(sp)
    ca8e:	|         moveq #8,d0
    ca90:	|         move.l d0,156(sp)
    ca94:	|         move.l 1cd6e <DOSBase>,d0
    ca9a:	|         movea.l d0,a6
    ca9c:	|         move.l 164(sp),d1
    caa0:	|         move.l 160(sp),d2
    caa4:	|         move.l 156(sp),d3
    caa8:	|         jsr -48(a6)
    caac:	|         move.l d0,152(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    cab0:	|         move.l 232(sp),148(sp)
    cab6:	|         move.w 1c5b6 <allowAnyFilename>,d0
    cabc:	|         movea.w d0,a0
    cabe:	|         move.l a0,144(sp)
    cac2:	|         move.l 1cd6e <DOSBase>,d0
    cac8:	|         movea.l d0,a6
    caca:	|         move.l 148(sp),d1
    cace:	|         move.l 144(sp),d2
    cad2:	|         jsr -312(a6)
    cad6:	|         move.l d0,140(sp)
	FPutC (fp, captureAllKeys);
    cada:	|         move.l 232(sp),136(sp)
    cae0:	|         move.w 1cd06 <captureAllKeys>,d0
    cae6:	|         movea.w d0,a0
    cae8:	|         move.l a0,132(sp)
    caec:	|         move.l 1cd6e <DOSBase>,d0
    caf2:	|         movea.l d0,a6
    caf4:	|         move.l 136(sp),d1
    caf8:	|         move.l 132(sp),d2
    cafc:	|         jsr -312(a6)
    cb00:	|         move.l d0,128(sp)
	FPutC (fp, TRUE); // updateDisplay
    cb04:	|         move.l 232(sp),124(sp)
    cb0a:	|         moveq #1,d0
    cb0c:	|         move.l d0,120(sp)
    cb10:	|         move.l 1cd6e <DOSBase>,d0
    cb16:	|         movea.l d0,a6
    cb18:	|         move.l 124(sp),d1
    cb1c:	|         move.l 120(sp),d2
    cb20:	|         jsr -312(a6)
    cb24:	|         move.l d0,116(sp)
	FPutC (fp, fontTableSize>0);
    cb28:	|         move.l 232(sp),112(sp)
    cb2e:	|         move.l 1ce6a <fontTableSize>,d0
    cb34:	|         sgt d0
    cb36:	|         neg.b d0
    cb38:	|         move.b d0,d0
    cb3a:	|         andi.l #255,d0
    cb40:	|         move.l d0,108(sp)
    cb44:	|         move.l 1cd6e <DOSBase>,d0
    cb4a:	|         movea.l d0,a6
    cb4c:	|         move.l 112(sp),d1
    cb50:	|         move.l 108(sp),d2
    cb54:	|         jsr -312(a6)
    cb58:	|         move.l d0,104(sp)

	if (fontTableSize>0) {
    cb5c:	|         move.l 1ce6a <fontTableSize>,d0
    cb62:	|     ,-- ble.s cba0 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    cb64:	|     |   move.l 1ce5e <loadedFontNum>,d0
    cb6a:	|     |   move.l 232(sp),-(sp)
    cb6e:	|     |   move.l d0,-(sp)
    cb70:	|     |   jsr 8d0 <put2bytes>
    cb76:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    cb78:	|     |   move.l 1ce5a <fontHeight>,d0
    cb7e:	|     |   move.l 232(sp),-(sp)
    cb82:	|     |   move.l d0,-(sp)
    cb84:	|     |   jsr 8d0 <put2bytes>
    cb8a:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    cb8c:	|     |   move.l 1ce62 <fontOrderString>,d0
    cb92:	|     |   move.l 232(sp),-(sp)
    cb96:	|     |   move.l d0,-(sp)
    cb98:	|     |   jsr bd8 <writeString>
    cb9e:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    cba0:	|     '-> move.w 1cc5e <fontSpace>,d0
    cba6:	|         movea.w d0,a0
    cba8:	|         move.l 232(sp),-(sp)
    cbac:	|         move.l a0,-(sp)
    cbae:	|         jsr a9c <putSigned>
    cbb4:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    cbb6:	|         move.l 1ce1c <cameraX>,d0
    cbbc:	|         move.l 232(sp),-(sp)
    cbc0:	|         move.l d0,-(sp)
    cbc2:	|         jsr 8d0 <put2bytes>
    cbc8:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    cbca:	|         move.l 1ce20 <cameraY>,d0
    cbd0:	|         move.l 232(sp),-(sp)
    cbd4:	|         move.l d0,-(sp)
    cbd6:	|         jsr 8d0 <put2bytes>
    cbdc:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    cbde:	|         move.l 1c6f8 <cameraZoom>,d0
    cbe4:	|         move.l 232(sp),-(sp)
    cbe8:	|         move.l d0,-(sp)
    cbea:	|         jsr a46 <putFloat>
    cbf0:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    cbf2:	|         move.l 232(sp),100(sp)
    cbf8:	|         move.b 1c6d4 <brightnessLevel>,d0
    cbfe:	|         move.b d0,d0
    cc00:	|         andi.l #255,d0
    cc06:	|         move.l d0,96(sp)
    cc0a:	|         move.l 1cd6e <DOSBase>,d0
    cc10:	|         movea.l d0,a6
    cc12:	|         move.l 100(sp),d1
    cc16:	|         move.l 96(sp),d2
    cc1a:	|         jsr -312(a6)
    cc1e:	|         move.l d0,92(sp)

	// Save event handlers
	saveHandlers (fp);
    cc22:	|         move.l 232(sp),-(sp)
    cc26:	|         jsr 747c <saveHandlers>
    cc2c:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    cc2e:	|         move.l 232(sp),-(sp)
    cc32:	|         jsr 15f3e <saveRegions>
    cc38:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    cc3a:	|         move.l 1cc60 <mouseCursorAnim>,d0
    cc40:	|         move.l 232(sp),-(sp)
    cc44:	|         move.l d0,-(sp)
    cc46:	|         jsr b19c <saveAnim>
    cc4c:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    cc4e:	|         move.l 1cc64 <mouseCursorFrameNum>,d0
    cc54:	|         move.l 232(sp),-(sp)
    cc58:	|         move.l d0,-(sp)
    cc5a:	|         jsr 8d0 <put2bytes>
    cc60:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    cc62:	|         move.l 1ccfe <allRunningFunctions>,252(sp)
	int countFunctions = 0;
    cc6a:	|         clr.l 248(sp)
	while (thisFunction) {
    cc6e:	|     ,-- bra.s cc7e <saveGame+0x306>
		countFunctions ++;
    cc70:	|  ,--|-> addq.l #1,248(sp)
		thisFunction = thisFunction -> next;
    cc74:	|  |  |   movea.l 252(sp),a0
    cc78:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    cc7e:	|  |  '-> tst.l 252(sp)
    cc82:	|  '----- bne.s cc70 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    cc84:	|         move.l 232(sp),-(sp)
    cc88:	|         move.l 252(sp),-(sp)
    cc8c:	|         jsr 8d0 <put2bytes>
    cc92:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    cc94:	|         move.l 1ccfe <allRunningFunctions>,252(sp)
	while (thisFunction) {
    cc9c:	|     ,-- bra.s ccb8 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    cc9e:	|  ,--|-> move.l 232(sp),-(sp)
    cca2:	|  |  |   move.l 256(sp),-(sp)
    cca6:	|  |  |   jsr c7c0 <saveFunction>
    ccac:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    ccae:	|  |  |   movea.l 252(sp),a0
    ccb2:	|  |  |   move.l 44(a0),252(sp)
	while (thisFunction) {
    ccb8:	|  |  '-> tst.l 252(sp)
    ccbc:	|  '----- bne.s cc9e <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    ccbe:	|         clr.l 256(sp)
    ccc2:	|     ,-- bra.s cce4 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    ccc4:	|  ,--|-> move.l 1cd14 <globalVars>,d1
    ccca:	|  |  |   move.l 256(sp),d0
    ccce:	|  |  |   lsl.l #3,d0
    ccd0:	|  |  |   add.l d1,d0
    ccd2:	|  |  |   move.l 232(sp),-(sp)
    ccd6:	|  |  |   move.l d0,-(sp)
    ccd8:	|  |  |   jsr d018 <saveVariable>
    ccde:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    cce0:	|  |  |   addq.l #1,256(sp)
    cce4:	|  |  '-> move.l 1cd3e <numGlobals>,d0
    ccea:	|  |      cmp.l 256(sp),d0
    ccee:	|  '----- bgt.s ccc4 <saveGame+0x34c>
	}

	savePeople (fp);
    ccf0:	|         move.l 232(sp),-(sp)
    ccf4:	|         jsr b2c4 <savePeople>
    ccfa:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    ccfc:	|         movea.l 1ce7e <currentFloor>,a0
    cd02:	|         move.l 8(a0),d0
    cd06:	|  ,----- beq.s cd44 <saveGame+0x3cc>
		FPutC (fp, 1);
    cd08:	|  |      move.l 232(sp),76(sp)
    cd0e:	|  |      moveq #1,d0
    cd10:	|  |      move.l d0,72(sp)
    cd14:	|  |      move.l 1cd6e <DOSBase>,d0
    cd1a:	|  |      movea.l d0,a6
    cd1c:	|  |      move.l 76(sp),d1
    cd20:	|  |      move.l 72(sp),d2
    cd24:	|  |      jsr -312(a6)
    cd28:	|  |      move.l d0,68(sp)
		put2bytes (currentFloor -> originalNum, fp);
    cd2c:	|  |      movea.l 1ce7e <currentFloor>,a0
    cd32:	|  |      move.l (a0),d0
    cd34:	|  |      move.l 232(sp),-(sp)
    cd38:	|  |      move.l d0,-(sp)
    cd3a:	|  |      jsr 8d0 <put2bytes>
    cd40:	|  |      addq.l #8,sp
    cd42:	|  |  ,-- bra.s cd66 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    cd44:	|  '--|-> move.l 232(sp),88(sp)
    cd4a:	|     |   clr.l 84(sp)
    cd4e:	|     |   move.l 1cd6e <DOSBase>,d0
    cd54:	|     |   movea.l d0,a6
    cd56:	|     |   move.l 88(sp),d1
    cd5a:	|     |   move.l 84(sp),d2
    cd5e:	|     |   jsr -312(a6)
    cd62:	|     |   move.l d0,80(sp)
	/*if (zBuffer.tex) {
		FPutC (fp, 1);
		put2bytes (zBuffer.originalNum, fp);
	} else FPutC (fp,0);*/ 

	FPutC (fp, speechMode);
    cd66:	|     '-> move.l 232(sp),64(sp)
    cd6c:	|         move.l 1ce30 <speechMode>,60(sp)
    cd74:	|         move.l 1cd6e <DOSBase>,d0
    cd7a:	|         movea.l d0,a6
    cd7c:	|         move.l 64(sp),d1
    cd80:	|         move.l 60(sp),d2
    cd84:	|         jsr -312(a6)
    cd88:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    cd8c:	|         move.b 1cc34 <fadeMode>,d0
    cd92:	|         move.b d0,d0
    cd94:	|         andi.l #255,d0
    cd9a:	|         move.l d0,52(sp)
    cd9e:	|         move.l 232(sp),48(sp)
    cda4:	|         move.l 1cd6e <DOSBase>,d0
    cdaa:	|         movea.l d0,a6
    cdac:	|         move.l 52(sp),d1
    cdb0:	|         move.l 48(sp),d2
    cdb4:	|         jsr -312(a6)
    cdb8:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    cdbc:	|         move.l 1ccb6 <speech>,d0
    cdc2:	|         move.l 232(sp),-(sp)
    cdc6:	|         move.l d0,-(sp)
    cdc8:	|         jsr 422e <saveSpeech>
    cdce:	|         addq.l #8,sp
	saveStatusBars (fp);
    cdd0:	|         move.l 232(sp),-(sp)
    cdd4:	|         jsr 85f6 <saveStatusBars>
    cdda:	|         addq.l #4,sp
	saveSounds (fp);
    cddc:	|         move.l 232(sp),-(sp)
    cde0:	|         jsr d38a <saveSounds>
    cde6:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    cde8:	|         move.w 1ce1a <saveEncoding>,d0
    cdee:	|         move.w d0,d0
    cdf0:	|         andi.l #65535,d0
    cdf6:	|         move.l 232(sp),-(sp)
    cdfa:	|         move.l d0,-(sp)
    cdfc:	|         jsr 8d0 <put2bytes>
    ce02:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    ce04:	|         move.l 1ce0c <parallaxStuff>,d0
    ce0a:	|         move.l 232(sp),-(sp)
    ce0e:	|         move.l d0,-(sp)
    ce10:	|         jsr d68c <saveParallaxRecursive>
    ce16:	|         addq.l #8,sp
	FPutC (fp, 0);
    ce18:	|         move.l 232(sp),40(sp)
    ce1e:	|         clr.l 36(sp)
    ce22:	|         move.l 1cd6e <DOSBase>,d0
    ce28:	|         movea.l d0,a6
    ce2a:	|         move.l 40(sp),d1
    ce2e:	|         move.l 36(sp),d2
    ce32:	|         jsr -312(a6)
    ce36:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    ce3a:	|         move.l 232(sp),28(sp)
    ce40:	|         move.l 1c6da <languageNum>,24(sp)
    ce48:	|         move.l 1cd6e <DOSBase>,d0
    ce4e:	|         movea.l d0,a6
    ce50:	|         move.l 28(sp),d1
    ce54:	|         move.l 24(sp),d2
    ce58:	|         jsr -312(a6)
    ce5c:	|         move.l d0,20(sp)

	Close(fp);
    ce60:	|         move.l 232(sp),16(sp)
    ce66:	|         move.l 1cd6e <DOSBase>,d0
    ce6c:	|         movea.l d0,a6
    ce6e:	|         move.l 16(sp),d1
    ce72:	|         jsr -36(a6)
    ce76:	|         move.l d0,12(sp)
	clearStackLib ();
    ce7a:	|         jsr c476 <clearStackLib>
	return TRUE;
    ce80:	|         moveq #1,d0
}
    ce82:	'-------> movem.l (sp)+,d2-d3/a6
    ce86:	          lea 248(sp),sp
    ce8a:	          rts

0000ce8c <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    ce8c:	       lea -12(sp),sp
	int elements = 0;
    ce90:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    ce94:	       move.l 16(sp),(sp)
	while (search) {
    ce98:	   ,-- bra.s cea4 <saveStack+0x18>
		elements ++;
    ce9a:	,--|-> addq.l #1,8(sp)
		search = search -> next;
    ce9e:	|  |   movea.l (sp),a0
    cea0:	|  |   move.l 8(a0),(sp)
	while (search) {
    cea4:	|  '-> tst.l (sp)
    cea6:	'----- bne.s ce9a <saveStack+0xe>
	}

	put2bytes (elements, fp);
    cea8:	       move.l 20(sp),-(sp)
    ceac:	       move.l 12(sp),-(sp)
    ceb0:	       jsr 8d0 <put2bytes>
    ceb6:	       addq.l #8,sp
	search = vs;
    ceb8:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    cebc:	       clr.l 4(sp)
    cec0:	   ,-- bra.s cedc <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    cec2:	,--|-> move.l (sp),d0
    cec4:	|  |   move.l 20(sp),-(sp)
    cec8:	|  |   move.l d0,-(sp)
    ceca:	|  |   jsr d018 <saveVariable>
    ced0:	|  |   addq.l #8,sp
		search = search -> next;
    ced2:	|  |   movea.l (sp),a0
    ced4:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    ced8:	|  |   addq.l #1,4(sp)
    cedc:	|  '-> move.l 4(sp),d0
    cee0:	|      cmp.l 8(sp),d0
    cee4:	'----- blt.s cec2 <saveStack+0x36>
	}
}
    cee6:	       nop
    cee8:	       nop
    ceea:	       lea 12(sp),sp
    ceee:	       rts

0000cef0 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    cef0:	             lea -44(sp),sp
    cef4:	             move.l a6,-(sp)
    cef6:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    cef8:	             move.l 1cdf2 <stackLib>,48(sp)
	int a = 0;
    cf00:	             clr.l 44(sp)
	while (s) {
    cf04:	      ,----- bra.s cf62 <saveStackRef+0x72>
		if (s -> stack == vs) {
    cf06:	   ,--|----> movea.l 48(sp),a0
    cf0a:	   |  |      move.l (a0),d0
    cf0c:	   |  |      cmp.l 56(sp),d0
    cf10:	   |  |  ,-- bne.s cf54 <saveStackRef+0x64>
			FPutC (fp, 1);
    cf12:	   |  |  |   move.l 60(sp),16(sp)
    cf18:	   |  |  |   moveq #1,d0
    cf1a:	   |  |  |   move.l d0,12(sp)
    cf1e:	   |  |  |   move.l 1cd6e <DOSBase>,d0
    cf24:	   |  |  |   movea.l d0,a6
    cf26:	   |  |  |   move.l 16(sp),d1
    cf2a:	   |  |  |   move.l 12(sp),d2
    cf2e:	   |  |  |   jsr -312(a6)
    cf32:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    cf36:	   |  |  |   move.l 1cdee <stackLibTotal>,d0
    cf3c:	   |  |  |   sub.l 44(sp),d0
    cf40:	   |  |  |   move.l 60(sp),-(sp)
    cf44:	   |  |  |   move.l d0,-(sp)
    cf46:	   |  |  |   jsr 8d0 <put2bytes>
    cf4c:	   |  |  |   addq.l #8,sp
			return TRUE;
    cf4e:	   |  |  |   moveq #1,d0
    cf50:	,--|--|--|-- bra.w d00e <saveStackRef+0x11e>
		}
		s = s -> next;
    cf54:	|  |  |  '-> movea.l 48(sp),a0
    cf58:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    cf5e:	|  |  |      addq.l #1,44(sp)
	while (s) {
    cf62:	|  |  '----> tst.l 48(sp)
    cf66:	|  '-------- bne.s cf06 <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    cf68:	|            move.l 60(sp),40(sp)
    cf6e:	|            clr.l 36(sp)
    cf72:	|            move.l 1cd6e <DOSBase>,d0
    cf78:	|            movea.l d0,a6
    cf7a:	|            move.l 40(sp),d1
    cf7e:	|            move.l 36(sp),d2
    cf82:	|            jsr -312(a6)
    cf86:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    cf8a:	|            movea.l 56(sp),a0
    cf8e:	|            move.l (a0),d0
    cf90:	|            move.l 60(sp),-(sp)
    cf94:	|            move.l d0,-(sp)
    cf96:	|            jsr ce8c <saveStack>
    cf9c:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    cf9e:	|            moveq #8,d0
    cfa0:	|            move.l d0,28(sp)
    cfa4:	|            clr.l 24(sp)
    cfa8:	|            move.l 1cd66 <SysBase>,d0
    cfae:	|            movea.l d0,a6
    cfb0:	|            move.l 28(sp),d0
    cfb4:	|            move.l 24(sp),d1
    cfb8:	|            jsr -684(a6)
    cfbc:	|            move.l d0,20(sp)
    cfc0:	|            move.l 20(sp),d0
    cfc4:	|            move.l d0,48(sp)
	stackLibTotal ++;
    cfc8:	|            move.l 1cdee <stackLibTotal>,d0
    cfce:	|            addq.l #1,d0
    cfd0:	|            move.l d0,1cdee <stackLibTotal>
	if (! s) {
    cfd6:	|            tst.l 48(sp)
    cfda:	|        ,-- bne.s cfee <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    cfdc:	|        |   pea 197f0 <PutChar+0x1836>
    cfe2:	|        |   jsr 17518 <KPrintF>
    cfe8:	|        |   addq.l #4,sp
		return FALSE;
    cfea:	|        |   clr.w d0
    cfec:	+--------|-- bra.s d00e <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    cfee:	|        '-> move.l 1cdf2 <stackLib>,d0
    cff4:	|            movea.l 48(sp),a0
    cff8:	|            move.l d0,4(a0)
	s -> stack = vs;
    cffc:	|            movea.l 48(sp),a0
    d000:	|            move.l 56(sp),(a0)
	stackLib = s;
    d004:	|            move.l 48(sp),1cdf2 <stackLib>
	return TRUE;
    d00c:	|            moveq #1,d0
}
    d00e:	'----------> move.l (sp)+,d2
    d010:	             movea.l (sp)+,a6
    d012:	             lea 44(sp),sp
    d016:	             rts

0000d018 <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    d018:	          lea -12(sp),sp
    d01c:	          move.l a6,-(sp)
    d01e:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    d020:	          move.l 28(sp),16(sp)
    d026:	          movea.l 24(sp),a0
    d02a:	          move.l (a0),d0
    d02c:	          move.l d0,12(sp)
    d030:	          move.l 1cd6e <DOSBase>,d0
    d036:	          movea.l d0,a6
    d038:	          move.l 16(sp),d1
    d03c:	          move.l 12(sp),d2
    d040:	          jsr -312(a6)
    d044:	          move.l d0,8(sp)
	switch (from -> varType) {
    d048:	          movea.l 24(sp),a0
    d04c:	          move.l (a0),d0
    d04e:	          moveq #9,d1
    d050:	          cmp.l d0,d1
    d052:	      ,-- bcs.w d102 <saveVariable+0xea>
    d056:	      |   add.l d0,d0
    d058:	      |   movea.l d0,a0
    d05a:	      |   adda.l #53350,a0
    d060:	      |   move.w (a0),d0
    d062:	      |   jmp (d066 <saveVariable+0x4e>,pc,d0.w)
    d066:	      |   ori.l #1310740,(a0)+
    d06c:	      |   ori.b #20,(20,a0,d0.w)
    d072:	      |   .short 0x004c
    d074:	      |   ori.b #126,(a4)
    d078:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    d07c:	      |   ori.b #40,(a0)+
    d080:	      |   ori.b #47,d4
    d084:	      |   ori.b #0,(a4)+
    d088:	      |   jsr 958 <put4bytes>
    d08e:	      |   addq.l #8,sp
		return TRUE;
    d090:	      |   moveq #1,d0
    d092:	,-----|-- bra.w d13e <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    d096:	|     |   movea.l 24(sp),a0
    d09a:	|     |   move.l 4(a0),d0
    d09e:	|     |   move.l 28(sp),-(sp)
    d0a2:	|     |   move.l d0,-(sp)
    d0a4:	|     |   jsr bd8 <writeString>
    d0aa:	|     |   addq.l #8,sp
		return TRUE;
    d0ac:	|     |   moveq #1,d0
    d0ae:	+-----|-- bra.w d13e <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    d0b2:	|     |   movea.l 24(sp),a0
    d0b6:	|     |   move.l 4(a0),d0
    d0ba:	|     |   move.l 28(sp),-(sp)
    d0be:	|     |   move.l d0,-(sp)
    d0c0:	|     |   jsr cef0 <saveStackRef>
    d0c6:	|     |   addq.l #8,sp
    d0c8:	+-----|-- bra.s d13e <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    d0ca:	|     |   movea.l 24(sp),a0
    d0ce:	|     |   move.l 4(a0),d0
    d0d2:	|     |   move.l 28(sp),-(sp)
    d0d6:	|     |   move.l d0,-(sp)
    d0d8:	|     |   jsr b266 <saveCostume>
    d0de:	|     |   addq.l #8,sp
		return FALSE;
    d0e0:	|     |   clr.w d0
    d0e2:	+-----|-- bra.s d13e <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    d0e4:	|     |   movea.l 24(sp),a0
    d0e8:	|     |   move.l 4(a0),d0
    d0ec:	|     |   move.l 28(sp),-(sp)
    d0f0:	|     |   move.l d0,-(sp)
    d0f2:	|     |   jsr b19c <saveAnim>
    d0f8:	|     |   addq.l #8,sp
		return FALSE;
    d0fa:	|     |   clr.w d0
    d0fc:	+-----|-- bra.s d13e <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    d0fe:	|     |   clr.w d0
    d100:	+-----|-- bra.s d13e <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    d102:	|     '-> movea.l 24(sp),a0
    d106:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d108:	|         moveq #10,d1
    d10a:	|         cmp.l d0,d1
    d10c:	|  ,----- bcs.s d126 <saveVariable+0x10e>
						typeName[from->varType] :
    d10e:	|  |      movea.l 24(sp),a0
    d112:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    d114:	|  |      add.l d0,d0
    d116:	|  |      movea.l d0,a1
    d118:	|  |      adda.l d0,a1
    d11a:	|  |      lea 1cc36 <typeName>,a0
    d120:	|  |      move.l (0,a1,a0.l),d0
    d124:	|  |  ,-- bra.s d12c <saveVariable+0x114>
    d126:	|  '--|-> move.l #104469,d0
    d12c:	|     '-> move.l d0,-(sp)
    d12e:	|         pea 1981c <PutChar+0x1862>
    d134:	|         jsr 17518 <KPrintF>
    d13a:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    d13c:	|         moveq #1,d0
    d13e:	'-------> move.l (sp)+,d2
    d140:	          movea.l (sp)+,a6
    d142:	          lea 12(sp),sp
    d146:	          rts

0000d148 <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    d148:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    d14c:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    d154:	          movea.l 4(sp),a0
    d158:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    d15e:	          movea.l 4(sp),a0
    d162:	          move.w 10(a0),d0
    d166:	          lsr.w #8,d0
    d168:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    d16c:	          movea.l 4(sp),a0
    d170:	          move.w 10(a0),d0
    d174:	          move.b d0,(sp)

    if(counterx_new)
    d176:	,-------- beq.w d21c <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    d17a:	|         clr.w d1
    d17c:	|         move.b (sp),d1
    d17e:	|         move.w 1cdfa <counterx_old>,d0
    d184:	|         sub.w d0,d1
    d186:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    d18a:	|         cmpi.w #128,10(sp)
    d190:	|     ,-- blt.s d1a8 <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    d192:	|     |   move.w #1,1cd1c <input+0x4>
            counterx_diff -= 256;    
    d19a:	|     |   move.w 10(sp),d0
    d19e:	|     |   addi.w #-256,d0
    d1a2:	|     |   move.w d0,10(sp)
    d1a6:	|  ,--|-- bra.s d1d4 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    d1a8:	|  |  '-> cmpi.w #-129,10(sp)
    d1ae:	|  |  ,-- bgt.s d1c6 <CsiCheckInput+0x7e>
            counterx_diff += 256;
    d1b0:	|  |  |   move.w 10(sp),d0
    d1b4:	|  |  |   addi.w #256,d0
    d1b8:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    d1bc:	|  |  |   move.w #1,1cd1c <input+0x4>
    d1c4:	|  +--|-- bra.s d1d4 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    d1c6:	|  |  '-> tst.w 10(sp)
    d1ca:	|  +----- beq.s d1d4 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    d1cc:	|  |      move.w #1,1cd1c <input+0x4>
        }

        input.mouseX += counterx_diff;
    d1d4:	|  '----> move.l 1cd22 <input+0xa>,d0
    d1da:	|         movea.w 10(sp),a0
    d1de:	|         add.l a0,d0
    d1e0:	|         move.l d0,1cd22 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    d1e6:	|         move.l 1cd22 <input+0xa>,d1
    d1ec:	|         move.l 1ccba <winWidth>,d0
    d1f2:	|         cmp.l d1,d0
    d1f4:	|     ,-- bge.s d204 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    d1f6:	|     |   move.l 1ccba <winWidth>,d0
    d1fc:	|     |   move.l d0,1cd22 <input+0xa>
    d202:	|  ,--|-- bra.s d212 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    d204:	|  |  '-> move.l 1cd22 <input+0xa>,d0
    d20a:	|  +----- bpl.s d212 <CsiCheckInput+0xca>
            input.mouseX = 0;
    d20c:	|  |      clr.l 1cd22 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    d212:	|  '----> clr.w d0
    d214:	|         move.b (sp),d0
    d216:	|         move.w d0,1cdfa <counterx_old>
    }    

    if(countery_new)
    d21c:	'-------> tst.b 1(sp)
    d220:	,-------- beq.w d2ca <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    d224:	|         clr.w d1
    d226:	|         move.b 1(sp),d1
    d22a:	|         move.w 1cdfc <countery_old>,d0
    d230:	|         sub.w d0,d1
    d232:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    d236:	|         cmpi.w #128,8(sp)
    d23c:	|     ,-- blt.s d254 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    d23e:	|     |   move.w #1,1cd1c <input+0x4>
            countery_diff -= 256;    
    d246:	|     |   move.w 8(sp),d0
    d24a:	|     |   addi.w #-256,d0
    d24e:	|     |   move.w d0,8(sp)
    d252:	|  ,--|-- bra.s d280 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    d254:	|  |  '-> cmpi.w #-129,8(sp)
    d25a:	|  |  ,-- bgt.s d272 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    d25c:	|  |  |   move.w #1,1cd1c <input+0x4>
            countery_diff += 256;
    d264:	|  |  |   move.w 8(sp),d0
    d268:	|  |  |   addi.w #256,d0
    d26c:	|  |  |   move.w d0,8(sp)
    d270:	|  +--|-- bra.s d280 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    d272:	|  |  '-> tst.w 8(sp)
    d276:	|  +----- beq.s d280 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    d278:	|  |      move.w #1,1cd1c <input+0x4>
        }

        input.mouseY += countery_diff;
    d280:	|  '----> move.l 1cd26 <input+0xe>,d0
    d286:	|         movea.w 8(sp),a0
    d28a:	|         add.l a0,d0
    d28c:	|         move.l d0,1cd26 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    d292:	|         move.l 1cd26 <input+0xe>,d1
    d298:	|         move.l 1ccbe <winHeight>,d0
    d29e:	|         cmp.l d1,d0
    d2a0:	|     ,-- bge.s d2b0 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    d2a2:	|     |   move.l 1ccbe <winHeight>,d0
    d2a8:	|     |   move.l d0,1cd26 <input+0xe>
    d2ae:	|  ,--|-- bra.s d2be <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    d2b0:	|  |  '-> move.l 1cd26 <input+0xe>,d0
    d2b6:	|  +----- bpl.s d2be <CsiCheckInput+0x176>
            input.mouseY = 0;
    d2b8:	|  |      clr.l 1cd26 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    d2be:	|  '----> clr.w d0
    d2c0:	|         move.b 1(sp),d0
    d2c4:	|         move.w d0,1cdfc <countery_old>
    } 

    input.leftRelease = FALSE;
    d2ca:	'-------> clr.w 1cd1e <input+0x6>
    input.rightRelease = FALSE;
    d2d0:	          clr.w 1cd20 <input+0x8>

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    d2d6:	          move.w 1cd18 <input>,d0
    d2dc:	      ,-- beq.s d302 <CsiCheckInput+0x1ba>
    d2de:	      |   movea.l #12574721,a0
    d2e4:	      |   move.b (a0),d0
    d2e6:	      |   move.b d0,d0
    d2e8:	      |   andi.l #255,d0
    d2ee:	      |   moveq #64,d1
    d2f0:	      |   and.l d1,d0
    d2f2:	      +-- beq.s d302 <CsiCheckInput+0x1ba>
    {
        input.leftClick = FALSE;
    d2f4:	      |   clr.w 1cd18 <input>
        input.leftRelease = TRUE;
    d2fa:	      |   move.w #1,1cd1e <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    d302:	      '-> move.w 1cd1a <input+0x2>,d0
    d308:	      ,-- beq.s d330 <CsiCheckInput+0x1e8>
    d30a:	      |   movea.l #14675990,a0
    d310:	      |   move.w (a0),d0
    d312:	      |   move.w d0,d0
    d314:	      |   andi.l #65535,d0
    d31a:	      |   andi.l #1024,d0
    d320:	      +-- beq.s d330 <CsiCheckInput+0x1e8>
    {
        input.rightClick = FALSE;
    d322:	      |   clr.w 1cd1a <input+0x2>
        input.rightRelease = TRUE;
    d328:	      |   move.w #1,1cd20 <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    d330:	      '-> movea.l #12574721,a0
    d336:	          move.b (a0),d0
    d338:	          move.b d0,d0
    d33a:	          andi.l #255,d0
    d340:	          moveq #64,d1
    d342:	          and.l d1,d0
    d344:	      ,-- bne.s d34e <CsiCheckInput+0x206>
        input.leftClick = TRUE;              
    d346:	      |   move.w #1,1cd18 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    d34e:	      '-> movea.l #14675990,a0
    d354:	          move.w (a0),d0
    d356:	          move.w d0,d0
    d358:	          andi.l #65535,d0
    d35e:	          andi.l #1024,d0
    d364:	      ,-- bne.s d36e <CsiCheckInput+0x226>
        input.rightClick = TRUE;
    d366:	      |   move.w #1,1cd1a <input+0x2>
    }

    d36e:	      '-> nop
    d370:	          lea 12(sp),sp
    d374:	          rts

0000d376 <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    d376:	moveq #0,d0
}
    d378:	rts

0000d37a <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    d37a:	nop
    d37c:	rts

0000d37e <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    d37e:	nop
    d380:	rts

0000d382 <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    d382:	moveq #1,d0
}
    d384:	rts

0000d386 <playSoundList>:

void playSoundList(struct soundList *s) {
}
    d386:	nop
    d388:	rts

0000d38a <saveSounds>:

void saveSounds (BPTR fp) {
    d38a:	lea -12(sp),sp
    d38e:	move.l a6,-(sp)
    d390:	move.l d2,-(sp)
	FPutC (fp,0);
    d392:	move.l 24(sp),16(sp)
    d398:	clr.l 12(sp)
    d39c:	move.l 1cd6e <DOSBase>,d0
    d3a2:	movea.l d0,a6
    d3a4:	move.l 16(sp),d1
    d3a8:	move.l 12(sp),d2
    d3ac:	jsr -312(a6)
    d3b0:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    d3b4:	move.l 1c6f4 <defSoundVol>,d0
    d3ba:	move.l 24(sp),-(sp)
    d3be:	move.l d0,-(sp)
    d3c0:	jsr 8d0 <put2bytes>
    d3c6:	addq.l #8,sp
	put2bytes (defVol, fp);
    d3c8:	move.l 1c6f0 <defVol>,d0
    d3ce:	move.l 24(sp),-(sp)
    d3d2:	move.l d0,-(sp)
    d3d4:	jsr 8d0 <put2bytes>
    d3da:	addq.l #8,sp
}
    d3dc:	nop
    d3de:	move.l (sp)+,d2
    d3e0:	movea.l (sp)+,a6
    d3e2:	lea 12(sp),sp
    d3e6:	rts

0000d3e8 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    d3e8:	move.l 4(sp),1c6f0 <defVol>
}
    d3f0:	nop
    d3f2:	rts

0000d3f4 <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    d3f4:	move.l 4(sp),1c6f4 <defSoundVol>
}
    d3fc:	nop
    d3fe:	rts

0000d400 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    d400:	nop
    d402:	rts

0000d404 <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    d404:	nop
    d406:	rts

0000d408 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    d408:	nop
    d40a:	rts

0000d40c <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    d40c:	subq.l #4,sp
    d40e:	move.l 12(sp),d0
    d412:	move.w d0,d0
    d414:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    d418:	moveq #1,d0
}
    d41a:	addq.l #4,sp
    d41c:	rts

0000d41e <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    d41e:	nop
    d420:	rts

0000d422 <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x1, y1, x2, y2);
    d422:	move.l 16(sp),-(sp)
    d426:	move.l 16(sp),-(sp)
    d42a:	move.l 16(sp),-(sp)
    d42e:	move.l 16(sp),-(sp)
    d432:	jsr e0e <CstBlankScreen>
    d438:	lea 16(sp),sp
}
    d43c:	nop
    d43e:	rts

0000d440 <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    d440:	pea 1983f <PutChar+0x1885>
    d446:	jsr 17518 <KPrintF>
    d44c:	addq.l #4,sp
}
    d44e:	nop
    d450:	rts

0000d452 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    d452:	movea.l 8(sp),a1
    d456:	movea.l 12(sp),a0
    d45a:	move.l 8(sp),d1
    d45e:	move.l 4(sp),d0
    d462:	move.l a1,-(sp)
    d464:	move.l a0,-(sp)
    d466:	move.l d1,-(sp)
    d468:	move.l d0,-(sp)
    d46a:	jsr 4928 <drawLine>
    d470:	lea 16(sp),sp
}
    d474:	nop
    d476:	rts

0000d478 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    d478:	movea.l 12(sp),a1
    d47c:	movea.l 4(sp),a0
    d480:	move.l 8(sp),d1
    d484:	move.l 4(sp),d0
    d488:	move.l a1,-(sp)
    d48a:	move.l a0,-(sp)
    d48c:	move.l d1,-(sp)
    d48e:	move.l d0,-(sp)
    d490:	jsr 4928 <drawLine>
    d496:	lea 16(sp),sp
}
    d49a:	nop
    d49c:	rts

0000d49e <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    d49e:	pea 19878 <PutChar+0x18be>
    d4a4:	jsr 17518 <KPrintF>
    d4aa:	addq.l #4,sp
}
    d4ac:	nop
    d4ae:	rts

0000d4b0 <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    d4b0:	jsr 1c02 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    d4b6:	pea 1ce06 <backdropTextureName>
    d4bc:	pea 1 <_start+0x1>
    d4c0:	jsr 4aaa <deleteTextures>
    d4c6:	addq.l #8,sp
	backdropTextureName = 0;
    d4c8:	clr.l 1ce06 <backdropTextureName>
	backdropExists = FALSE;
    d4ce:	clr.w 1ce0a <backdropExists>
}
    d4d4:	nop
    d4d6:	rts

0000d4d8 <killParallax>:

void killParallax () {
    d4d8:	          lea -12(sp),sp
    d4dc:	          move.l a6,-(sp)
	while (parallaxStuff) {
    d4de:	   ,----- bra.s d54a <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    d4e0:	,--|----> move.l 1ce0c <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    d4e8:	|  |      movea.l 12(sp),a0
    d4ec:	|  |      move.l 42(a0),d0
    d4f0:	|  |      move.l d0,1ce0c <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    d4f6:	|  |      move.l 12(sp),d0
    d4fa:	|  |      addq.l #4,d0
    d4fc:	|  |      move.l d0,-(sp)
    d4fe:	|  |      pea 1 <_start+0x1>
    d502:	|  |      jsr 4aaa <deleteTextures>
    d508:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    d50a:	|  |      movea.l 12(sp),a0
    d50e:	|  |      move.l (a0),d0
    d510:	|  |  ,-- beq.s d52a <killParallax+0x52>
    d512:	|  |  |   movea.l 12(sp),a0
    d516:	|  |  |   move.l (a0),8(sp)
    d51a:	|  |  |   move.l 1cd66 <SysBase>,d0
    d520:	|  |  |   movea.l d0,a6
    d522:	|  |  |   movea.l 8(sp),a1
    d526:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    d52a:	|  |  '-> tst.l 12(sp)
    d52e:	|  |  ,-- beq.s d546 <killParallax+0x6e>
    d530:	|  |  |   move.l 12(sp),4(sp)
    d536:	|  |  |   move.l 1cd66 <SysBase>,d0
    d53c:	|  |  |   movea.l d0,a6
    d53e:	|  |  |   movea.l 4(sp),a1
    d542:	|  |  |   jsr -690(a6)
		k = NULL;
    d546:	|  |  '-> clr.l 12(sp)
	while (parallaxStuff) {
    d54a:	|  '----> move.l 1ce0c <parallaxStuff>,d0
    d550:	'-------- bne.s d4e0 <killParallax+0x8>
	}
}
    d552:	          nop
    d554:	          nop
    d556:	          movea.l (sp)+,a6
    d558:	          lea 12(sp),sp
    d55c:	          rts

0000d55e <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    d55e:	       move.l 4(sp),-(sp)
    d562:	       jsr 794c <openFileFromNum>
    d568:	       addq.l #4,sp
    d56a:	       tst.l d0
    d56c:	   ,-- bne.s d57e <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    d56e:	   |   pea 19899 <PutChar+0x18df>
    d574:	   |   jsr 17518 <KPrintF>
    d57a:	   |   addq.l #4,sp
		return;
    d57c:	,--|-- bra.s d59e <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    d57e:	|  '-> move.l 1cd4e <bigDataFile>,d0
    d584:	|      move.l 12(sp),-(sp)
    d588:	|      move.l 12(sp),-(sp)
    d58c:	|      move.l d0,-(sp)
    d58e:	|      jsr 1f68 <CstLoadBackdrop>
    d594:	|      lea 12(sp),sp
	finishAccess ();
    d598:	|      jsr 7844 <finishAccess>
	
}
    d59e:	'----> rts

0000d5a0 <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    d5a0:	subq.l #8,sp
    d5a2:	movea.l 12(sp),a0
    d5a6:	move.l 16(sp),d1
    d5aa:	move.l 20(sp),d0
    d5ae:	movea.w a0,a0
    d5b0:	move.w a0,6(sp)
    d5b4:	move.w d1,d1
    d5b6:	move.w d1,4(sp)
    d5ba:	move.w d0,d0
    d5bc:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    d5c0:	pea 198e8 <PutChar+0x192e>
    d5c6:	jsr 17518 <KPrintF>
    d5cc:	addq.l #4,sp

}
    d5ce:	nop
    d5d0:	addq.l #8,sp
    d5d2:	rts

0000d5d4 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    d5d4:	pea 1990b <PutChar+0x1951>
    d5da:	jsr 17518 <KPrintF>
    d5e0:	addq.l #4,sp
}
    d5e2:	nop
    d5e4:	rts

0000d5e6 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    d5e6:	pea 1ce10 <snapshotTextureName>
    d5ec:	pea 1 <_start+0x1>
    d5f0:	jsr 4aaa <deleteTextures>
    d5f6:	addq.l #8,sp
	snapshotTextureName = 0;
    d5f8:	clr.l 1ce10 <snapshotTextureName>
}
    d5fe:	nop
    d600:	rts

0000d602 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    d602:	clr.l 1ce1c <cameraX>
	cameraY = 0;
    d608:	clr.l 1ce20 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    d60e:	move.l 1ce02 <sceneHeight>,d0
    d614:	move.l d0,d1
    d616:	move.l 1cdfe <sceneWidth>,d0
    d61c:	move.l d1,-(sp)
    d61e:	move.l d0,-(sp)
    d620:	jsr 3938 <CstReserveBackdrop>
    d626:	addq.l #8,sp
}
    d628:	rts

0000d62a <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    d62a:	jsr d4b0 <killBackDrop>
	killParallax ();
    d630:	jsr d4d8 <killParallax>
	killZBuffer ();
    d636:	jsr 8862 <killZBuffer>
	sceneWidth = x;
    d63c:	move.l 4(sp),d0
    d640:	move.l d0,1cdfe <sceneWidth>
	sceneHeight = y;
    d646:	move.l 8(sp),d0
    d64a:	move.l d0,1ce02 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    d650:	pea 19944 <PutChar+0x198a>
    d656:	jsr 17518 <KPrintF>
    d65c:	addq.l #4,sp
	return reserveBackdrop();
    d65e:	jsr d602 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    d664:	rts

0000d666 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    d666:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    d668:	move.l 12(sp),-(sp)
    d66c:	jsr 6bc <get2bytes>
    d672:	addq.l #4,sp
    d674:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    d678:	move.l 12(sp),-(sp)
    d67c:	jsr 6bc <get2bytes>
    d682:	addq.l #4,sp
    d684:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    d686:	moveq #1,d0
}
    d688:	addq.l #8,sp
    d68a:	rts

0000d68c <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    d68c:	   ,-> lea -12(sp),sp
    d690:	   |   move.l a6,-(sp)
    d692:	   |   move.l d2,-(sp)
	if (me) {
    d694:	   |   tst.l 24(sp)
    d698:	,--|-- beq.w d72e <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    d69c:	|  |   movea.l 24(sp),a0
    d6a0:	|  |   move.l 42(a0),d0
    d6a4:	|  |   move.l 28(sp),-(sp)
    d6a8:	|  |   move.l d0,-(sp)
    d6aa:	|  '-- jsr d68c <saveParallaxRecursive>(pc)
    d6ae:	|      addq.l #8,sp
		FPutC (fp, 1);
    d6b0:	|      move.l 28(sp),16(sp)
    d6b6:	|      moveq #1,d0
    d6b8:	|      move.l d0,12(sp)
    d6bc:	|      move.l 1cd6e <DOSBase>,d0
    d6c2:	|      movea.l d0,a6
    d6c4:	|      move.l 16(sp),d1
    d6c8:	|      move.l 12(sp),d2
    d6cc:	|      jsr -312(a6)
    d6d0:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    d6d4:	|      movea.l 24(sp),a0
    d6d8:	|      move.w 28(a0),d0
    d6dc:	|      move.w d0,d0
    d6de:	|      andi.l #65535,d0
    d6e4:	|      move.l 28(sp),-(sp)
    d6e8:	|      move.l d0,-(sp)
    d6ea:	|      jsr 8d0 <put2bytes>
    d6f0:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    d6f2:	|      movea.l 24(sp),a0
    d6f6:	|      move.w 30(a0),d0
    d6fa:	|      move.w d0,d0
    d6fc:	|      andi.l #65535,d0
    d702:	|      move.l 28(sp),-(sp)
    d706:	|      move.l d0,-(sp)
    d708:	|      jsr 8d0 <put2bytes>
    d70e:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    d710:	|      movea.l 24(sp),a0
    d714:	|      move.w 32(a0),d0
    d718:	|      move.w d0,d0
    d71a:	|      andi.l #65535,d0
    d720:	|      move.l 28(sp),-(sp)
    d724:	|      move.l d0,-(sp)
    d726:	|      jsr 8d0 <put2bytes>
    d72c:	|      addq.l #8,sp
	}
}
    d72e:	'----> nop
    d730:	       move.l (sp)+,d2
    d732:	       movea.l (sp)+,a6
    d734:	       lea 12(sp),sp
    d738:	       rts

0000d73a <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    d73a:	pea 1996b <PutChar+0x19b1>
    d740:	jsr 17518 <KPrintF>
    d746:	addq.l #4,sp
	return TRUE;
    d748:	moveq #1,d0
    d74a:	rts

0000d74c <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    d74c:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    d74e:	             move.l 1ce14 <allObjectTypes>,(sp)

	while (huntType) {
    d754:	      ,----- bra.s d76c <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    d756:	   ,--|----> movea.l (sp),a0
    d758:	   |  |      move.l 4(a0),d0
    d75c:	   |  |      cmp.l 8(sp),d0
    d760:	   |  |  ,-- bne.s d766 <findObjectType+0x1a>
    d762:	   |  |  |   move.l (sp),d0
    d764:	,--|--|--|-- bra.s d77c <findObjectType+0x30>
		huntType = huntType -> next;
    d766:	|  |  |  '-> movea.l (sp),a0
    d768:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    d76c:	|  |  '----> tst.l (sp)
    d76e:	|  '-------- bne.s d756 <findObjectType+0xa>
	}

	return loadObjectType (i);
    d770:	|            move.l 8(sp),-(sp)
    d774:	|            jsr d83c <loadObjectType>
    d77a:	|            addq.l #4,sp
}
    d77c:	'----------> addq.l #4,sp
    d77e:	             rts

0000d780 <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    d780:	             lea -12(sp),sp
	int i, num = 0;
    d784:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d788:	             move.l 20(sp),-(sp)
    d78c:	             jsr d74c <findObjectType>
    d792:	             addq.l #4,sp
    d794:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d796:	             clr.l 8(sp)
    d79a:	   ,-------- bra.s d7d0 <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d79c:	,--|-------> movea.l (sp),a0
    d79e:	|  |         move.l 38(a0),d1
    d7a2:	|  |         move.l 8(sp),d0
    d7a6:	|  |         lsl.l #3,d0
    d7a8:	|  |         movea.l d1,a0
    d7aa:	|  |         adda.l d0,a0
    d7ac:	|  |         move.l (a0),d0
    d7ae:	|  |         cmp.l 16(sp),d0
    d7b2:	|  |  ,----- bne.s d7cc <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d7b4:	|  |  |      movea.l (sp),a0
    d7b6:	|  |  |      move.l 38(a0),d1
    d7ba:	|  |  |      move.l 8(sp),d0
    d7be:	|  |  |      lsl.l #3,d0
    d7c0:	|  |  |      movea.l d1,a0
    d7c2:	|  |  |      adda.l d0,a0
    d7c4:	|  |  |      move.l 4(a0),4(sp)
			break;
    d7ca:	|  |  |  ,-- bra.s d7dc <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d7cc:	|  |  '--|-> addq.l #1,8(sp)
    d7d0:	|  '-----|-> movea.l (sp),a0
    d7d2:	|        |   move.l 16(a0),d0
    d7d6:	|        |   cmp.l 8(sp),d0
    d7da:	'--------|-- bgt.s d79c <getCombinationFunction+0x1c>
		}
	}

	return num;
    d7dc:	         '-> move.l 4(sp),d0
}
    d7e0:	             lea 12(sp),sp
    d7e4:	             rts

0000d7e6 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d7e6:	moveq #1,d0
}
    d7e8:	rts

0000d7ea <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d7ea:	subq.l #8,sp
    d7ec:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d7ee:	move.l 16(sp),-(sp)
    d7f2:	jsr 6bc <get2bytes>
    d7f8:	addq.l #4,sp
    d7fa:	move.l d0,-(sp)
    d7fc:	jsr d83c <loadObjectType>
    d802:	addq.l #4,sp
    d804:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d808:	movea.l 8(sp),a0
    d80c:	move.l (a0),4(sp)
    d810:	move.l 1cd66 <SysBase>,d0
    d816:	movea.l d0,a6
    d818:	movea.l 4(sp),a1
    d81c:	jsr -690(a6)
	r -> screenName = readString (fp);
    d820:	move.l 16(sp),-(sp)
    d824:	jsr b02 <readString>
    d82a:	addq.l #4,sp
    d82c:	movea.l 8(sp),a0
    d830:	move.l d0,(a0)
	return r;
    d832:	move.l 8(sp),d0
}
    d836:	movea.l (sp)+,a6
    d838:	addq.l #8,sp
    d83a:	rts

0000d83c <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d83c:	          lea -84(sp),sp
    d840:	          move.l a6,-(sp)
    d842:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d844:	          moveq #42,d0
    d846:	          move.l d0,84(sp)
    d84a:	          clr.l 80(sp)
    d84e:	          move.l 1cd66 <SysBase>,d0
    d854:	          movea.l d0,a6
    d856:	          move.l 84(sp),d0
    d85a:	          move.l 80(sp),d1
    d85e:	          jsr -684(a6)
    d862:	          move.l d0,76(sp)
    d866:	          move.l 76(sp),d0
    d86a:	          move.l d0,72(sp)

    if (newType) {
    d86e:	,-------- beq.w dae8 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d872:	|         move.l 96(sp),-(sp)
    d876:	|         jsr 7a14 <openObjectSlice>
    d87c:	|         addq.l #4,sp
    d87e:	|         tst.w d0
    d880:	+-------- beq.w dae8 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d884:	|         move.l 1cd4e <bigDataFile>,d0
    d88a:	|         move.l d0,-(sp)
    d88c:	|         jsr 6bc <get2bytes>
    d892:	|         addq.l #4,sp
    d894:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d898:	|         move.l 1cd4e <bigDataFile>,64(sp)
    d8a0:	|         move.l 1cd6e <DOSBase>,d0
    d8a6:	|         movea.l d0,a6
    d8a8:	|         move.l 64(sp),d1
    d8ac:	|         jsr -306(a6)
    d8b0:	|         move.l d0,60(sp)
    d8b4:	|         move.l 60(sp),d0
    d8b8:	|         move.l d0,d0
    d8ba:	|         movea.l 72(sp),a0
    d8be:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d8c2:	|         move.l 1cd4e <bigDataFile>,56(sp)
    d8ca:	|         move.l 1cd6e <DOSBase>,d0
    d8d0:	|         movea.l d0,a6
    d8d2:	|         move.l 56(sp),d1
    d8d6:	|         jsr -306(a6)
    d8da:	|         move.l d0,52(sp)
    d8de:	|         move.l 52(sp),d0
    d8e2:	|         move.l d0,d0
    d8e4:	|         movea.l 72(sp),a0
    d8e8:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d8ec:	|         move.l 1cd4e <bigDataFile>,48(sp)
    d8f4:	|         move.l 1cd6e <DOSBase>,d0
    d8fa:	|         movea.l d0,a6
    d8fc:	|         move.l 48(sp),d1
    d900:	|         jsr -306(a6)
    d904:	|         move.l d0,44(sp)
    d908:	|         move.l 44(sp),d0
    d90c:	|         move.l d0,d0
    d90e:	|         movea.l 72(sp),a0
    d912:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d916:	|         move.l 1cd4e <bigDataFile>,40(sp)
    d91e:	|         move.l 1cd6e <DOSBase>,d0
    d924:	|         movea.l d0,a6
    d926:	|         move.l 40(sp),d1
    d92a:	|         jsr -306(a6)
    d92e:	|         move.l d0,36(sp)
    d932:	|         move.l 36(sp),d0
    d936:	|         movea.l 72(sp),a0
    d93a:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d93e:	|         move.l 1cd4e <bigDataFile>,32(sp)
    d946:	|         move.l 1cd6e <DOSBase>,d0
    d94c:	|         movea.l d0,a6
    d94e:	|         move.l 32(sp),d1
    d952:	|         jsr -306(a6)
    d956:	|         move.l d0,28(sp)
    d95a:	|         move.l 28(sp),d0
    d95e:	|         movea.l 72(sp),a0
    d962:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d966:	|         move.l 1cd4e <bigDataFile>,d0
    d96c:	|         move.l d0,-(sp)
    d96e:	|         jsr 718 <get4bytes>
    d974:	|         addq.l #4,sp
    d976:	|         movea.l 72(sp),a0
    d97a:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d97e:	|         move.l 1cd4e <bigDataFile>,d0
    d984:	|         move.l d0,-(sp)
    d986:	|         jsr 6bc <get2bytes>
    d98c:	|         addq.l #4,sp
    d98e:	|         movea.l 72(sp),a0
    d992:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d996:	|         move.l 1cd4e <bigDataFile>,24(sp)
    d99e:	|         move.l 1cd6e <DOSBase>,d0
    d9a4:	|         movea.l d0,a6
    d9a6:	|         move.l 24(sp),d1
    d9aa:	|         jsr -306(a6)
    d9ae:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d9b2:	|         move.l 1cd4e <bigDataFile>,d0
    d9b8:	|         move.l d0,-(sp)
    d9ba:	|         jsr 7d8 <getFloat>
    d9c0:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d9c2:	|         move.l 1cd4e <bigDataFile>,d0
    d9c8:	|         move.l d0,-(sp)
    d9ca:	|         jsr 7d8 <getFloat>
    d9d0:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d9d2:	|         move.l 1cd4e <bigDataFile>,d0
    d9d8:	|         move.l d0,-(sp)
    d9da:	|         jsr 6bc <get2bytes>
    d9e0:	|         addq.l #4,sp
    d9e2:	|         move.l d0,d0
    d9e4:	|         movea.l 72(sp),a0
    d9e8:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d9ec:	|         move.l 1cd4e <bigDataFile>,d0
    d9f2:	|         move.l d0,-(sp)
    d9f4:	|         jsr 6bc <get2bytes>
    d9fa:	|         addq.l #4,sp
    d9fc:	|         movea.l 72(sp),a0
    da00:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    da04:	|         movea.l 72(sp),a0
    da08:	|         move.l 16(a0),d0
    da0c:	|  ,----- beq.s da3e <loadObjectType+0x202>
    da0e:	|  |      movea.l 72(sp),a0
    da12:	|  |      move.l 16(a0),d0
    da16:	|  |      lsl.l #3,d0
    da18:	|  |      move.l d0,16(sp)
    da1c:	|  |      clr.l 12(sp)
    da20:	|  |      move.l 1cd66 <SysBase>,d0
    da26:	|  |      movea.l d0,a6
    da28:	|  |      move.l 16(sp),d0
    da2c:	|  |      move.l 12(sp),d1
    da30:	|  |      jsr -684(a6)
    da34:	|  |      move.l d0,8(sp)
    da38:	|  |      move.l 8(sp),d0
    da3c:	|  |  ,-- bra.s da40 <loadObjectType+0x204>
    da3e:	|  '--|-> moveq #0,d0
    da40:	|     '-> movea.l 72(sp),a0
    da44:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    da48:	|         clr.l 88(sp)
    da4c:	|     ,-- bra.s da9c <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    da4e:	|  ,--|-> move.l 1cd4e <bigDataFile>,d1
    da54:	|  |  |   movea.l 72(sp),a0
    da58:	|  |  |   movea.l 38(a0),a0
    da5c:	|  |  |   move.l 88(sp),d0
    da60:	|  |  |   lsl.l #3,d0
    da62:	|  |  |   lea (0,a0,d0.l),a2
    da66:	|  |  |   move.l d1,-(sp)
    da68:	|  |  |   jsr 6bc <get2bytes>
    da6e:	|  |  |   addq.l #4,sp
    da70:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    da72:	|  |  |   move.l 1cd4e <bigDataFile>,d1
    da78:	|  |  |   movea.l 72(sp),a0
    da7c:	|  |  |   movea.l 38(a0),a0
    da80:	|  |  |   move.l 88(sp),d0
    da84:	|  |  |   lsl.l #3,d0
    da86:	|  |  |   lea (0,a0,d0.l),a2
    da8a:	|  |  |   move.l d1,-(sp)
    da8c:	|  |  |   jsr 6bc <get2bytes>
    da92:	|  |  |   addq.l #4,sp
    da94:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    da98:	|  |  |   addq.l #1,88(sp)
    da9c:	|  |  '-> movea.l 72(sp),a0
    daa0:	|  |      move.l 16(a0),d0
    daa4:	|  |      cmp.l 88(sp),d0
    daa8:	|  '----- bgt.s da4e <loadObjectType+0x212>
            }
            finishAccess();
    daaa:	|         jsr 7844 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    dab0:	|         move.l 68(sp),-(sp)
    dab4:	|         jsr 784e <getNumberedString>
    daba:	|         addq.l #4,sp
    dabc:	|         movea.l 72(sp),a0
    dac0:	|         move.l d0,(a0)
            newType->objectNum = i;
    dac2:	|         movea.l 72(sp),a0
    dac6:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    dacc:	|         move.l 1ce14 <allObjectTypes>,d0
    dad2:	|         movea.l 72(sp),a0
    dad6:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    dada:	|         move.l 72(sp),1ce14 <allObjectTypes>
            return newType;
    dae2:	|         move.l 72(sp),d0
    dae6:	|     ,-- bra.s daea <loadObjectType+0x2ae>
        }
    }
    return NULL;
    dae8:	'-----|-> moveq #0,d0
}
    daea:	      '-> movea.l (sp)+,a2
    daec:	          movea.l (sp)+,a6
    daee:	          lea 84(sp),sp
    daf2:	          rts

0000daf4 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    daf4:	             lea -16(sp),sp
    daf8:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    dafa:	             move.l #118292,16(sp)

	while (* huntRegion) {
    db02:	   ,-------- bra.s db76 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    db04:	,--|-------> movea.l 16(sp),a0
    db08:	|  |         move.l (a0),d0
    db0a:	|  |         cmp.l 24(sp),d0
    db0e:	|  |  ,----- bne.s db68 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    db10:	|  |  |      movea.l 24(sp),a0
    db14:	|  |  |      move.l 8(a0),d0
    db18:	|  |  |      movea.l 16(sp),a0
    db1c:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    db1e:	|  |  |      movea.l 24(sp),a0
    db22:	|  |  |      move.l 38(a0),12(sp)
    db28:	|  |  |      move.l 1cd66 <SysBase>,d0
    db2e:	|  |  |      movea.l d0,a6
    db30:	|  |  |      movea.l 12(sp),a1
    db34:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    db38:	|  |  |      movea.l 24(sp),a0
    db3c:	|  |  |      move.l (a0),8(sp)
    db40:	|  |  |      move.l 1cd66 <SysBase>,d0
    db46:	|  |  |      movea.l d0,a6
    db48:	|  |  |      movea.l 8(sp),a1
    db4c:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    db50:	|  |  |      move.l 24(sp),4(sp)
    db56:	|  |  |      move.l 1cd66 <SysBase>,d0
    db5c:	|  |  |      movea.l d0,a6
    db5e:	|  |  |      movea.l 4(sp),a1
    db62:	|  |  |      jsr -690(a6)
			return;
    db66:	|  |  |  ,-- bra.s db8c <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    db68:	|  |  '--|-> movea.l 16(sp),a0
    db6c:	|  |     |   move.l (a0),d0
    db6e:	|  |     |   move.l d0,d1
    db70:	|  |     |   addq.l #8,d1
    db72:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    db76:	|  '-----|-> movea.l 16(sp),a0
    db7a:	|        |   move.l (a0),d0
    db7c:	'--------|-- bne.s db04 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    db7e:	         |   pea 19992 <PutChar+0x19d8>
    db84:	         |   jsr 17518 <KPrintF>
    db8a:	         |   addq.l #4,sp
}
    db8c:	         '-> movea.l (sp)+,a6
    db8e:	             lea 16(sp),sp
    db92:	             rts

0000db94 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    db94:	movea.l 4(sp),a0
    db98:	move.l 4(a0),d0
    db9c:	move.l 8(sp),-(sp)
    dba0:	move.l d0,-(sp)
    dba2:	jsr 8d0 <put2bytes>
    dba8:	addq.l #8,sp
	writeString (r -> screenName, fp);
    dbaa:	movea.l 4(sp),a0
    dbae:	move.l (a0),d0
    dbb0:	move.l 8(sp),-(sp)
    dbb4:	move.l d0,-(sp)
    dbb6:	jsr bd8 <writeString>
    dbbc:	addq.l #8,sp
    dbbe:	nop
    dbc0:	rts

0000dbc2 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    dbc2:	                         lea -112(sp),sp
    dbc6:	                         move.l a6,-(sp)
    dbc8:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    dbca:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    dbce:	                         move.w 1ce1a <saveEncoding>,d0
    dbd4:	                  ,----- beq.s dbde <fileToStack+0x1c>
    dbd6:	                  |      move.l #104888,d0
    dbdc:	                  |  ,-- bra.s dbe4 <fileToStack+0x22>
    dbde:	                  '--|-> move.l #104914,d0
    dbe4:	                     '-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    dbe8:	                         move.l 124(sp),112(sp)
    dbee:	                         move.l #1005,108(sp)
    dbf6:	                         move.l 1cd6e <DOSBase>,d0
    dbfc:	                         movea.l d0,a6
    dbfe:	                         move.l 112(sp),d1
    dc02:	                         move.l 108(sp),d2
    dc06:	                         jsr -30(a6)
    dc0a:	                         move.l d0,104(sp)
    dc0e:	                         move.l 104(sp),d0
    dc12:	                         move.l d0,100(sp)
    if (!fp) {
    dc16:	                     ,-- bne.s dc30 <fileToStack+0x6e>
        KPrintF("No such file", filename);
    dc18:	                     |   move.l 124(sp),-(sp)
    dc1c:	                     |   pea 199e9 <PutChar+0x1a2f>
    dc22:	                     |   jsr 17518 <KPrintF>
    dc28:	                     |   addq.l #8,sp
        return FALSE;
    dc2a:	                     |   clr.w d0
    dc2c:	,--------------------|-- bra.w df26 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    dc30:	|                    '-> move.w 1ce1a <saveEncoding>,d0
    dc36:	|                        move.l d0,d0
    dc38:	|                        move.b d0,1ce18 <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    dc3e:	|                        move.w 1ce1a <saveEncoding>,d0
    dc44:	|                        lsr.w #8,d0
    dc46:	|                        move.l d0,d0
    dc48:	|                        move.b d0,1ce19 <encode2>

    while (*checker) {
    dc4e:	|                 ,----- bra.s dcb2 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    dc50:	|              ,--|----> move.l 100(sp),30(sp)
    dc56:	|              |  |      move.l 1cd6e <DOSBase>,d0
    dc5c:	|              |  |      movea.l d0,a6
    dc5e:	|              |  |      move.l 30(sp),d1
    dc62:	|              |  |      jsr -306(a6)
    dc66:	|              |  |      move.l d0,26(sp)
    dc6a:	|              |  |      move.l 26(sp),d1
    dc6e:	|              |  |      movea.l 116(sp),a0
    dc72:	|              |  |      move.b (a0),d0
    dc74:	|              |  |      ext.w d0
    dc76:	|              |  |      movea.w d0,a0
    dc78:	|              |  |      cmpa.l d1,a0
    dc7a:	|              |  |  ,-- beq.s dcae <fileToStack+0xec>
            Close(fp);
    dc7c:	|              |  |  |   move.l 100(sp),22(sp)
    dc82:	|              |  |  |   move.l 1cd6e <DOSBase>,d0
    dc88:	|              |  |  |   movea.l d0,a6
    dc8a:	|              |  |  |   move.l 22(sp),d1
    dc8e:	|              |  |  |   jsr -36(a6)
    dc92:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    dc96:	|              |  |  |   move.l 124(sp),-(sp)
    dc9a:	|              |  |  |   pea 199f6 <PutChar+0x1a3c>
    dca0:	|              |  |  |   jsr 17518 <KPrintF>
    dca6:	|              |  |  |   addq.l #8,sp
            return FALSE;
    dca8:	|              |  |  |   clr.w d0
    dcaa:	+--------------|--|--|-- bra.w df26 <fileToStack+0x364>
        }
        checker++;
    dcae:	|              |  |  '-> addq.l #1,116(sp)
    while (*checker) {
    dcb2:	|              |  '----> movea.l 116(sp),a0
    dcb6:	|              |         move.b (a0),d0
    dcb8:	|              '-------- bne.s dc50 <fileToStack+0x8e>
    }

    if (saveEncoding) {
    dcba:	|                        move.w 1ce1a <saveEncoding>,d0
    dcc0:	|  ,-------------------- beq.s dd34 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    dcc2:	|  |                     move.l 100(sp),-(sp)
    dcc6:	|  |                     jsr df30 <readStringEncoded>
    dccc:	|  |                     addq.l #4,sp
    dcce:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    dcd2:	|  |                     pea 19a37 <PutChar+0x1a7d>
    dcd8:	|  |                     move.l 100(sp),-(sp)
    dcdc:	|  |                     jsr 13ee4 <strcmp>
    dce2:	|  |                     addq.l #8,sp
    dce4:	|  |                     tst.l d0
    dce6:	|  |                 ,-- beq.s dd1a <fileToStack+0x158>
            Close(fp);
    dce8:	|  |                 |   move.l 100(sp),88(sp)
    dcee:	|  |                 |   move.l 1cd6e <DOSBase>,d0
    dcf4:	|  |                 |   movea.l d0,a6
    dcf6:	|  |                 |   move.l 88(sp),d1
    dcfa:	|  |                 |   jsr -36(a6)
    dcfe:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    dd02:	|  |                 |   move.l 124(sp),-(sp)
    dd06:	|  |                 |   pea 19a46 <PutChar+0x1a8c>
    dd0c:	|  |                 |   jsr 17518 <KPrintF>
    dd12:	|  |                 |   addq.l #8,sp
            return FALSE;
    dd14:	|  |                 |   clr.w d0
    dd16:	+--|-----------------|-- bra.w df26 <fileToStack+0x364>
        }
        FreeVec(checker);
    dd1a:	|  |                 '-> move.l 96(sp),92(sp)
    dd20:	|  |                     move.l 1cd66 <SysBase>,d0
    dd26:	|  |                     movea.l d0,a6
    dd28:	|  |                     movea.l 92(sp),a1
    dd2c:	|  |                     jsr -690(a6)
        checker = NULL;
    dd30:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    dd34:	|  >-------------------> move.w 1ce1a <saveEncoding>,d0
    dd3a:	|  |     ,-------------- beq.w de6e <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    dd3e:	|  |     |               move.l 100(sp),76(sp)
    dd44:	|  |     |               move.l 1cd6e <DOSBase>,d0
    dd4a:	|  |     |               movea.l d0,a6
    dd4c:	|  |     |               move.l 76(sp),d1
    dd50:	|  |     |               jsr -306(a6)
    dd54:	|  |     |               move.l d0,72(sp)
    dd58:	|  |     |               move.l 72(sp),d0
    dd5c:	|  |     |               move.b 1ce18 <encode1>,d1
    dd62:	|  |     |               ext.w d1
    dd64:	|  |     |               ext.l d1
    dd66:	|  |     |               move.l d0,d2
    dd68:	|  |     |               eor.l d1,d2
    dd6a:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    dd6e:	|  |     |               moveq #-1,d0
    dd70:	|  |     |               cmp.l 68(sp),d0
    dd74:	|  |  ,--|-------------- beq.w df04 <fileToStack+0x342>

            char i = (char) tmp;
    dd78:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    dd7e:	|  |  |  |               move.b 67(sp),d0
    dd82:	|  |  |  |               ext.w d0
    dd84:	|  |  |  |               movea.w d0,a0
    dd86:	|  |  |  |               moveq #2,d2
    dd88:	|  |  |  |               cmp.l a0,d2
    dd8a:	|  |  |  |     ,-------- beq.s de06 <fileToStack+0x244>
    dd8c:	|  |  |  |     |         moveq #2,d0
    dd8e:	|  |  |  |     |         cmp.l a0,d0
    dd90:	|  |  |  |  ,--|-------- blt.w de3c <fileToStack+0x27a>
    dd94:	|  |  |  |  |  |         cmpa.w #0,a0
    dd98:	|  |  |  |  |  |     ,-- beq.s dda4 <fileToStack+0x1e2>
    dd9a:	|  |  |  |  |  |     |   moveq #1,d2
    dd9c:	|  |  |  |  |  |     |   cmp.l a0,d2
    dd9e:	|  |  |  |  |  |  ,--|-- beq.s dde0 <fileToStack+0x21e>
    dda0:	|  |  |  |  +--|--|--|-- bra.w de3c <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    dda4:	|  |  |  |  |  |  |  '-> move.l 100(sp),-(sp)
    dda8:	|  |  |  |  |  |  |      jsr df30 <readStringEncoded>
    ddae:	|  |  |  |  |  |  |      addq.l #4,sp
    ddb0:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    ddb4:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    ddb8:	|  |  |  |  |  |  |      lea 14(sp),a0
    ddbc:	|  |  |  |  |  |  |      move.l a0,-(sp)
    ddbe:	|  |  |  |  |  |  |      jsr 14c5a <makeTextVar>
    ddc4:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    ddc6:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    ddcc:	|  |  |  |  |  |  |      move.l 1cd66 <SysBase>,d0
    ddd2:	|  |  |  |  |  |  |      movea.l d0,a6
    ddd4:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    ddd8:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    dddc:	|  |  |  |  |  |  |  ,-- bra.w de94 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    dde0:	|  |  |  |  |  |  '--|-> move.l 100(sp),-(sp)
    dde4:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    ddea:	|  |  |  |  |  |     |   addq.l #4,sp
    ddec:	|  |  |  |  |  |     |   move.l d0,-(sp)
    ddee:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    ddf2:	|  |  |  |  |  |     |   lea 18(sp),a0
    ddf6:	|  |  |  |  |  |     |   move.l a0,-(sp)
    ddf8:	|  |  |  |  |  |     |   jsr 1532a <setVariable>
    ddfe:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    de02:	|  |  |  |  |  |     +-- bra.w de94 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    de06:	|  |  |  |  |  '-----|-> move.l 100(sp),62(sp)
    de0c:	|  |  |  |  |        |   move.l 1cd6e <DOSBase>,d0
    de12:	|  |  |  |  |        |   movea.l d0,a6
    de14:	|  |  |  |  |        |   move.l 62(sp),d1
    de18:	|  |  |  |  |        |   jsr -306(a6)
    de1c:	|  |  |  |  |        |   move.l d0,58(sp)
    de20:	|  |  |  |  |        |   move.l 58(sp),d0
    de24:	|  |  |  |  |        |   move.l d0,-(sp)
    de26:	|  |  |  |  |        |   pea 1 <_start+0x1>
    de2a:	|  |  |  |  |        |   lea 18(sp),a0
    de2e:	|  |  |  |  |        |   move.l a0,-(sp)
    de30:	|  |  |  |  |        |   jsr 1532a <setVariable>
    de36:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    de3a:	|  |  |  |  |        +-- bra.s de94 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    de3c:	|  |  |  |  '--------|-> move.l 124(sp),-(sp)
    de40:	|  |  |  |           |   pea 19ac8 <PutChar+0x1b0e>
    de46:	|  |  |  |           |   jsr 17518 <KPrintF>
    de4c:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    de4e:	|  |  |  |           |   move.l 100(sp),46(sp)
    de54:	|  |  |  |           |   move.l 1cd6e <DOSBase>,d0
    de5a:	|  |  |  |           |   movea.l d0,a6
    de5c:	|  |  |  |           |   move.l 46(sp),d1
    de60:	|  |  |  |           |   jsr -36(a6)
    de64:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    de68:	|  |  |  |           |   clr.w d0
    de6a:	+--|--|--|-----------|-- bra.w df26 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    de6e:	|  |  |  '-----------|-> move.l 100(sp),-(sp)
    de72:	|  |  |              |   jsr dff6 <readTextPlain>
    de78:	|  |  |              |   addq.l #4,sp
    de7a:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    de7e:	|  |  |        ,-----|-- beq.w df08 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    de82:	|  |  |        |     |   move.l 80(sp),-(sp)
    de86:	|  |  |        |     |   lea 14(sp),a0
    de8a:	|  |  |        |     |   move.l a0,-(sp)
    de8c:	|  |  |        |     |   jsr 14c5a <makeTextVar>
    de92:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    de94:	|  |  |        |     '-> movea.l 128(sp),a0
    de98:	|  |  |        |         move.l (a0),d0
    de9a:	|  |  |        |  ,----- bne.s deca <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    de9c:	|  |  |        |  |      move.l 128(sp),d0
    dea0:	|  |  |        |  |      move.l d0,-(sp)
    dea2:	|  |  |        |  |      lea 14(sp),a0
    dea6:	|  |  |        |  |      move.l a0,-(sp)
    dea8:	|  |  |        |  |      jsr 142fa <addVarToStackQuick>
    deae:	|  |  |        |  |      addq.l #8,sp
    deb0:	|  |  |        |  |      tst.w d0
    deb2:	|  |  |        |  |  ,-- bne.s deb8 <fileToStack+0x2f6>
    deb4:	|  |  |        |  |  |   clr.w d0
    deb6:	+--|--|--------|--|--|-- bra.s df26 <fileToStack+0x364>
            sH->last = sH->first;
    deb8:	|  |  |        |  |  '-> movea.l 128(sp),a0
    debc:	|  |  |        |  |      move.l (a0),d0
    debe:	|  |  |        |  |      movea.l 128(sp),a0
    dec2:	|  |  |        |  |      move.l d0,4(a0)
    dec6:	|  +--|--------|--|----- bra.w dd34 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    deca:	|  |  |        |  '----> movea.l 128(sp),a0
    dece:	|  |  |        |         move.l 4(a0),d0
    ded2:	|  |  |        |         addq.l #8,d0
    ded4:	|  |  |        |         move.l d0,-(sp)
    ded6:	|  |  |        |         lea 14(sp),a0
    deda:	|  |  |        |         move.l a0,-(sp)
    dedc:	|  |  |        |         jsr 142fa <addVarToStackQuick>
    dee2:	|  |  |        |         addq.l #8,sp
    dee4:	|  |  |        |         tst.w d0
    dee6:	|  |  |        |     ,-- bne.s deec <fileToStack+0x32a>
    dee8:	|  |  |        |     |   clr.w d0
    deea:	+--|--|--------|-----|-- bra.s df26 <fileToStack+0x364>
            sH->last = sH->last->next;
    deec:	|  |  |        |     '-> movea.l 128(sp),a0
    def0:	|  |  |        |         movea.l 4(a0),a0
    def4:	|  |  |        |         move.l 8(a0),d0
    def8:	|  |  |        |         movea.l 128(sp),a0
    defc:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    df00:	|  '--|--------|-------- bra.w dd34 <fileToStack+0x172>
            if (tmp == -1) break;
    df04:	|     '--------|-------> nop
    df06:	|              |     ,-- bra.s df0a <fileToStack+0x348>
            if (!line) break;
    df08:	|              '-----|-> nop
        }
    }
    Close(fp);
    df0a:	|                    '-> move.l 100(sp),38(sp)
    df10:	|                        move.l 1cd6e <DOSBase>,d0
    df16:	|                        movea.l d0,a6
    df18:	|                        move.l 38(sp),d1
    df1c:	|                        jsr -36(a6)
    df20:	|                        move.l d0,34(sp)
    return TRUE;
    df24:	|                        moveq #1,d0
}
    df26:	'----------------------> move.l (sp)+,d2
    df28:	                         movea.l (sp)+,a6
    df2a:	                         lea 112(sp),sp
    df2e:	                         rts

0000df30 <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    df30:	          lea -32(sp),sp
    df34:	          move.l a6,-(sp)
    df36:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    df38:	          move.l 44(sp),-(sp)
    df3c:	          jsr 6bc <get2bytes>
    df42:	          addq.l #4,sp
    df44:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    df48:	          move.l 32(sp),d0
    df4c:	          addq.l #1,d0
    df4e:	          move.l d0,28(sp)
    df52:	          clr.l 24(sp)
    df56:	          move.l 1cd66 <SysBase>,d0
    df5c:	          movea.l d0,a6
    df5e:	          move.l 28(sp),d0
    df62:	          move.l 24(sp),d1
    df66:	          jsr -684(a6)
    df6a:	          move.l d0,20(sp)
    df6e:	          move.l 20(sp),d0
    df72:	          move.l d0,16(sp)
    if (!s) return NULL;
    df76:	      ,-- bne.s df7c <readStringEncoded+0x4c>
    df78:	      |   moveq #0,d0
    df7a:	,-----|-- bra.s dfec <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    df7c:	|     '-> clr.l 36(sp)
    df80:	|     ,-- bra.s dfd2 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    df82:	|  ,--|-> move.l 44(sp),12(sp)
    df88:	|  |  |   move.l 1cd6e <DOSBase>,d0
    df8e:	|  |  |   movea.l d0,a6
    df90:	|  |  |   move.l 12(sp),d1
    df94:	|  |  |   jsr -306(a6)
    df98:	|  |  |   move.l d0,8(sp)
    df9c:	|  |  |   move.l 8(sp),d0
    dfa0:	|  |  |   move.l d0,d1
    dfa2:	|  |  |   move.b 1ce18 <encode1>,d2
    dfa8:	|  |  |   move.l 36(sp),d0
    dfac:	|  |  |   movea.l 16(sp),a0
    dfb0:	|  |  |   adda.l d0,a0
    dfb2:	|  |  |   move.b d1,d0
    dfb4:	|  |  |   eor.b d2,d0
    dfb6:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    dfb8:	|  |  |   move.b 1ce18 <encode1>,d0
    dfbe:	|  |  |   move.b d0,d1
    dfc0:	|  |  |   move.b 1ce19 <encode2>,d0
    dfc6:	|  |  |   add.b d1,d0
    dfc8:	|  |  |   move.b d0,1ce18 <encode1>
    for (a = 0; a < len; a++) {
    dfce:	|  |  |   addq.l #1,36(sp)
    dfd2:	|  |  '-> move.l 36(sp),d0
    dfd6:	|  |      cmp.l 32(sp),d0
    dfda:	|  '----- blt.s df82 <readStringEncoded+0x52>
    }
    s[len] = 0;
    dfdc:	|         move.l 32(sp),d0
    dfe0:	|         movea.l 16(sp),a0
    dfe4:	|         adda.l d0,a0
    dfe6:	|         clr.b (a0)
    return s;
    dfe8:	|         move.l 16(sp),d0
}
    dfec:	'-------> move.l (sp)+,d2
    dfee:	          movea.l (sp)+,a6
    dff0:	          lea 32(sp),sp
    dff4:	          rts

0000dff6 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    dff6:	             lea -104(sp),sp
    dffa:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    dffe:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    e002:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    e008:	             move.l 124(sp),106(sp)
    e00e:	             clr.l 102(sp)
    e012:	             clr.l 98(sp)
    e016:	             move.l 1cd6e <DOSBase>,d0
    e01c:	             movea.l d0,a6
    e01e:	             move.l 106(sp),d1
    e022:	             move.l 102(sp),d2
    e026:	             move.l 98(sp),d3
    e02a:	             jsr -66(a6)
    e02e:	             move.l d0,94(sp)
    e032:	             move.l 94(sp),d0
    e036:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    e03a:	   ,-------- bra.s e07e <readTextPlain+0x88>
        tmp = FGetC(fp);
    e03c:	,--|-------> move.l 124(sp),22(sp)
    e042:	|  |         move.l 1cd6e <DOSBase>,d0
    e048:	|  |         movea.l d0,a6
    e04a:	|  |         move.l 22(sp),d1
    e04e:	|  |         jsr -306(a6)
    e052:	|  |         move.l d0,18(sp)
    e056:	|  |         move.l 18(sp),d0
    e05a:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    e05e:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    e064:	|  |         cmpi.b #10,17(sp)
    e06a:	|  |  ,----- beq.s e074 <readTextPlain+0x7e>
    e06c:	|  |  |      moveq #-1,d0
    e06e:	|  |  |      cmp.l 110(sp),d0
    e072:	|  |  |  ,-- bne.s e07a <readTextPlain+0x84>
            keepGoing = FALSE;
    e074:	|  |  '--|-> clr.w 114(sp)
    e078:	|  +-----|-- bra.s e07e <readTextPlain+0x88>
        } else {
            stringSize++;
    e07a:	|  |     '-> addq.l #1,116(sp)
    while (keepGoing) {
    e07e:	|  '-------> tst.w 114(sp)
    e082:	'----------- bne.s e03c <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    e084:	             tst.l 116(sp)
    e088:	         ,-- bne.s e098 <readTextPlain+0xa2>
    e08a:	         |   moveq #-1,d0
    e08c:	         |   cmp.l 110(sp),d0
    e090:	         +-- bne.s e098 <readTextPlain+0xa2>
        return NULL;
    e092:	         |   moveq #0,d0
    e094:	      ,--|-- bra.w e17e <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    e098:	      |  '-> move.l 124(sp),86(sp)
    e09e:	      |      move.l 90(sp),82(sp)
    e0a4:	      |      moveq #-1,d0
    e0a6:	      |      move.l d0,78(sp)
    e0aa:	      |      move.l 1cd6e <DOSBase>,d0
    e0b0:	      |      movea.l d0,a6
    e0b2:	      |      move.l 86(sp),d1
    e0b6:	      |      move.l 82(sp),d2
    e0ba:	      |      move.l 78(sp),d3
    e0be:	      |      jsr -66(a6)
    e0c2:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    e0c6:	      |      move.l 116(sp),d0
    e0ca:	      |      addq.l #1,d0
    e0cc:	      |      move.l d0,70(sp)
    e0d0:	      |      clr.l 66(sp)
    e0d4:	      |      move.l 1cd66 <SysBase>,d0
    e0da:	      |      movea.l d0,a6
    e0dc:	      |      move.l 70(sp),d0
    e0e0:	      |      move.l 66(sp),d1
    e0e4:	      |      jsr -684(a6)
    e0e8:	      |      move.l d0,62(sp)
    e0ec:	      |      move.l 62(sp),d0
    e0f0:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    e0f4:	      |  ,-- bne.s e0fc <readTextPlain+0x106>
    e0f6:	      |  |   moveq #0,d0
    e0f8:	      +--|-- bra.w e17e <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    e0fc:	      |  '-> move.l 124(sp),54(sp)
    e102:	      |      move.l 58(sp),50(sp)
    e108:	      |      moveq #1,d0
    e10a:	      |      move.l d0,46(sp)
    e10e:	      |      move.l 116(sp),42(sp)
    e114:	      |      move.l 1cd6e <DOSBase>,d0
    e11a:	      |      movea.l d0,a6
    e11c:	      |      move.l 54(sp),d1
    e120:	      |      move.l 50(sp),d2
    e124:	      |      move.l 46(sp),d3
    e128:	      |      move.l 42(sp),d4
    e12c:	      |      jsr -324(a6)
    e130:	      |      move.l d0,38(sp)
    e134:	      |      move.l 38(sp),d0
    e138:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    e13c:	      |      move.l 34(sp),d0
    e140:	      |      cmp.l 116(sp),d0
    e144:	      |  ,-- beq.s e154 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    e146:	      |  |   pea 19afd <PutChar+0x1b43>
    e14c:	      |  |   jsr 17518 <KPrintF>
    e152:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    e154:	      |  '-> move.l 124(sp),30(sp)
    e15a:	      |      move.l 1cd6e <DOSBase>,d0
    e160:	      |      movea.l d0,a6
    e162:	      |      move.l 30(sp),d1
    e166:	      |      jsr -306(a6)
    e16a:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    e16e:	      |      move.l 116(sp),d0
    e172:	      |      movea.l 58(sp),a0
    e176:	      |      adda.l d0,a0
    e178:	      |      clr.b (a0)
    }

    return reply;
    e17a:	      |      move.l 58(sp),d0
}
    e17e:	      '----> movem.l (sp)+,d2-d4/a6
    e182:	             lea 104(sp),sp
    e186:	             rts

0000e188 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    e188:	                      lea -144(sp),sp
    e18c:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    e190:	                      move.l 160(sp),148(sp)
    e196:	                      move.l #1006,144(sp)
    e19e:	                      move.l 1cd6e <DOSBase>,d0
    e1a4:	                      movea.l d0,a6
    e1a6:	                      move.l 148(sp),d1
    e1aa:	                      move.l 144(sp),d2
    e1ae:	                      jsr -30(a6)
    e1b2:	                      move.l d0,140(sp)
    e1b6:	                      move.l 140(sp),d0
    e1ba:	                      move.l d0,136(sp)

    if (!fp) {
    e1be:	                  ,-- bne.s e1d8 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    e1c0:	                  |   move.l 160(sp),-(sp)
    e1c4:	                  |   pea 19b1e <PutChar+0x1b64>
    e1ca:	                  |   jsr 17518 <KPrintF>
    e1d0:	                  |   addq.l #8,sp
        return FALSE;
    e1d2:	                  |   clr.w d0
    e1d4:	,-----------------|-- bra.w e494 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    e1d8:	|                 '-> movea.l 164(sp),a0
    e1dc:	|                     movea.l 4(a0),a0
    e1e0:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    e1e4:	|                     move.w 1ce1a <saveEncoding>,d0
    e1ea:	|                     move.l d0,d0
    e1ec:	|                     move.b d0,1ce18 <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    e1f2:	|                     move.w 1ce1a <saveEncoding>,d0
    e1f8:	|                     lsr.w #8,d0
    e1fa:	|                     move.l d0,d0
    e1fc:	|                     move.b d0,1ce19 <encode2>

    if (saveEncoding) {
    e202:	|                     move.w 1ce1a <saveEncoding>,d0
    e208:	|                 ,-- beq.s e25a <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    e20a:	|                 |   move.l 136(sp),116(sp)
    e210:	|                 |   move.l #104888,112(sp)
    e218:	|                 |   moveq #99,d0
    e21a:	|                 |   not.b d0
    e21c:	|                 |   add.l sp,d0
    e21e:	|                 |   addi.l #-144,d0
    e224:	|                 |   move.l d0,108(sp)
    e228:	|                 |   move.l 1cd6e <DOSBase>,d0
    e22e:	|                 |   movea.l d0,a6
    e230:	|                 |   move.l 116(sp),d1
    e234:	|                 |   move.l 112(sp),d2
    e238:	|                 |   move.l 108(sp),d3
    e23c:	|                 |   jsr -354(a6)
    e240:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    e244:	|                 |   move.l 136(sp),-(sp)
    e248:	|                 |   pea 19a37 <PutChar+0x1a7d>
    e24e:	|                 |   jsr e49e <writeStringEncoded>
    e254:	|                 |   addq.l #8,sp
    e256:	|  ,--------------|-- bra.w e46c <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    e25a:	|  |              '-> move.l 136(sp),132(sp)
    e260:	|  |                  move.l #104914,128(sp)
    e268:	|  |                  moveq #99,d1
    e26a:	|  |                  not.b d1
    e26c:	|  |                  add.l sp,d1
    e26e:	|  |                  addi.l #-144,d1
    e274:	|  |                  move.l d1,124(sp)
    e278:	|  |                  move.l 1cd6e <DOSBase>,d0
    e27e:	|  |                  movea.l d0,a6
    e280:	|  |                  move.l 132(sp),d1
    e284:	|  |                  move.l 128(sp),d2
    e288:	|  |                  move.l 124(sp),d3
    e28c:	|  |                  jsr -354(a6)
    e290:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    e294:	|  +----------------- bra.w e46c <stackToFile+0x2e4>
        if (saveEncoding) {
    e298:	|  |  ,-------------> move.w 1ce1a <saveEncoding>,d0
    e29e:	|  |  |     ,-------- beq.w e3f0 <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    e2a2:	|  |  |     |         movea.l 152(sp),a0
    e2a6:	|  |  |     |         move.l (a0),d0
    e2a8:	|  |  |     |         moveq #1,d1
    e2aa:	|  |  |     |         cmp.l d0,d1
    e2ac:	|  |  |     |     ,-- beq.s e2fc <stackToFile+0x174>
    e2ae:	|  |  |     |     |   moveq #3,d1
    e2b0:	|  |  |     |     |   cmp.l d0,d1
    e2b2:	|  |  |     |  ,--|-- bne.w e3be <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    e2b6:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    e2bc:	|  |  |     |  |  |   move.b 1ce18 <encode1>,d0
    e2c2:	|  |  |     |  |  |   ext.w d0
    e2c4:	|  |  |     |  |  |   movea.w d0,a0
    e2c6:	|  |  |     |  |  |   move.l a0,72(sp)
    e2ca:	|  |  |     |  |  |   move.l 1cd6e <DOSBase>,d0
    e2d0:	|  |  |     |  |  |   movea.l d0,a6
    e2d2:	|  |  |     |  |  |   move.l 76(sp),d1
    e2d6:	|  |  |     |  |  |   move.l 72(sp),d2
    e2da:	|  |  |     |  |  |   jsr -312(a6)
    e2de:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    e2e2:	|  |  |     |  |  |   movea.l 152(sp),a0
    e2e6:	|  |  |     |  |  |   move.l 4(a0),d0
    e2ea:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    e2ee:	|  |  |     |  |  |   move.l d0,-(sp)
    e2f0:	|  |  |     |  |  |   jsr e49e <writeStringEncoded>
    e2f6:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    e2f8:	|  |  |  ,--|--|--|-- bra.w e462 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    e2fc:	|  |  |  |  |  |  '-> movea.l 152(sp),a0
    e300:	|  |  |  |  |  |      move.l 4(a0),d0
    e304:	|  |  |  |  |  |  ,-- bmi.s e374 <stackToFile+0x1ec>
    e306:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e30a:	|  |  |  |  |  |  |   move.l 4(a0),d0
    e30e:	|  |  |  |  |  |  |   cmpi.l #255,d0
    e314:	|  |  |  |  |  |  +-- bgt.s e374 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    e316:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    e31c:	|  |  |  |  |  |  |   move.b 1ce18 <encode1>,d0
    e322:	|  |  |  |  |  |  |   eori.b #2,d0
    e326:	|  |  |  |  |  |  |   ext.w d0
    e328:	|  |  |  |  |  |  |   movea.w d0,a0
    e32a:	|  |  |  |  |  |  |   move.l a0,60(sp)
    e32e:	|  |  |  |  |  |  |   move.l 1cd6e <DOSBase>,d0
    e334:	|  |  |  |  |  |  |   movea.l d0,a6
    e336:	|  |  |  |  |  |  |   move.l 64(sp),d1
    e33a:	|  |  |  |  |  |  |   move.l 60(sp),d2
    e33e:	|  |  |  |  |  |  |   jsr -312(a6)
    e342:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    e346:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    e34c:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    e350:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    e356:	|  |  |  |  |  |  |   move.l 1cd6e <DOSBase>,d0
    e35c:	|  |  |  |  |  |  |   movea.l d0,a6
    e35e:	|  |  |  |  |  |  |   move.l 52(sp),d1
    e362:	|  |  |  |  |  |  |   move.l 48(sp),d2
    e366:	|  |  |  |  |  |  |   jsr -312(a6)
    e36a:	|  |  |  |  |  |  |   move.l d0,44(sp)
    e36e:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    e370:	|  |  |  +--|--|--|-- bra.w e462 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    e374:	|  |  |  |  |  |  '-> move.l 136(sp),40(sp)
    e37a:	|  |  |  |  |  |      move.b 1ce18 <encode1>,d0
    e380:	|  |  |  |  |  |      eori.b #1,d0
    e384:	|  |  |  |  |  |      ext.w d0
    e386:	|  |  |  |  |  |      movea.w d0,a0
    e388:	|  |  |  |  |  |      move.l a0,36(sp)
    e38c:	|  |  |  |  |  |      move.l 1cd6e <DOSBase>,d0
    e392:	|  |  |  |  |  |      movea.l d0,a6
    e394:	|  |  |  |  |  |      move.l 40(sp),d1
    e398:	|  |  |  |  |  |      move.l 36(sp),d2
    e39c:	|  |  |  |  |  |      jsr -312(a6)
    e3a0:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    e3a4:	|  |  |  |  |  |      movea.l 152(sp),a0
    e3a8:	|  |  |  |  |  |      move.l 4(a0),d0
    e3ac:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    e3b0:	|  |  |  |  |  |      move.l d0,-(sp)
    e3b2:	|  |  |  |  |  |      jsr 958 <put4bytes>
    e3b8:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    e3ba:	|  |  |  +--|--|----- bra.w e462 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    e3be:	|  |  |  |  |  '----> move.l 160(sp),-(sp)
    e3c2:	|  |  |  |  |         pea 19b30 <PutChar+0x1b76>
    e3c8:	|  |  |  |  |         jsr 17518 <KPrintF>
    e3ce:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    e3d0:	|  |  |  |  |         move.l 136(sp),28(sp)
    e3d6:	|  |  |  |  |         move.l 1cd6e <DOSBase>,d0
    e3dc:	|  |  |  |  |         movea.l d0,a6
    e3de:	|  |  |  |  |         move.l 28(sp),d1
    e3e2:	|  |  |  |  |         jsr -36(a6)
    e3e6:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    e3ea:	|  |  |  |  |         clr.w d0
    e3ec:	+--|--|--|--|-------- bra.w e494 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    e3f0:	|  |  |  |  '-------> move.l 152(sp),d0
    e3f4:	|  |  |  |            move.l d0,-(sp)
    e3f6:	|  |  |  |            jsr 1500e <getTextFromAnyVar>
    e3fc:	|  |  |  |            addq.l #4,sp
    e3fe:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    e402:	|  |  |  |     ,----- beq.s e476 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    e404:	|  |  |  |     |      movea.l 100(sp),a0
    e408:	|  |  |  |     |      move.b (a0),d0
    e40a:	|  |  |  |     |      ext.w d0
    e40c:	|  |  |  |     |      movea.w d0,a0
    e40e:	|  |  |  |     |      move.l a0,12(sp)
    e412:	|  |  |  |     |      move.l 136(sp),96(sp)
    e418:	|  |  |  |     |      move.l #105356,92(sp)
    e420:	|  |  |  |     |      moveq #99,d0
    e422:	|  |  |  |     |      not.b d0
    e424:	|  |  |  |     |      add.l sp,d0
    e426:	|  |  |  |     |      addi.l #-144,d0
    e42c:	|  |  |  |     |      move.l d0,88(sp)
    e430:	|  |  |  |     |      move.l 1cd6e <DOSBase>,d0
    e436:	|  |  |  |     |      movea.l d0,a6
    e438:	|  |  |  |     |      move.l 96(sp),d1
    e43c:	|  |  |  |     |      move.l 92(sp),d2
    e440:	|  |  |  |     |      move.l 88(sp),d3
    e444:	|  |  |  |     |      jsr -354(a6)
    e448:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    e44c:	|  |  |  |     |      move.l 100(sp),80(sp)
    e452:	|  |  |  |     |      move.l 1cd66 <SysBase>,d0
    e458:	|  |  |  |     |      movea.l d0,a6
    e45a:	|  |  |  |     |      movea.l 80(sp),a1
    e45e:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    e462:	|  |  |  '-----|----> movea.l 152(sp),a0
    e466:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    e46c:	|  '--|--------|----> tst.l 152(sp)
    e470:	|     '--------|----- bne.w e298 <stackToFile+0x110>
    e474:	|              |  ,-- bra.s e478 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    e476:	|              '--|-> nop
    }
    Close(fp);
    e478:	|                 '-> move.l 136(sp),20(sp)
    e47e:	|                     move.l 1cd6e <DOSBase>,d0
    e484:	|                     movea.l d0,a6
    e486:	|                     move.l 20(sp),d1
    e48a:	|                     jsr -36(a6)
    e48e:	|                     move.l d0,16(sp)
    return TRUE;
    e492:	|                     moveq #1,d0
}
    e494:	'-------------------> movem.l (sp)+,d2-d3/a6
    e498:	                      lea 144(sp),sp
    e49c:	                      rts

0000e49e <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    e49e:	       lea -20(sp),sp
    e4a2:	       move.l a6,-(sp)
    e4a4:	       move.l d2,-(sp)
	int a, len = strlen (s);
    e4a6:	       move.l 32(sp),-(sp)
    e4aa:	       jsr 13f24 <strlen>
    e4b0:	       addq.l #4,sp
    e4b2:	       move.l d0,20(sp)

	put2bytes (len, fp);
    e4b6:	       move.l 36(sp),-(sp)
    e4ba:	       move.l 24(sp),-(sp)
    e4be:	       jsr 8d0 <put2bytes>
    e4c4:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    e4c6:	       clr.l 24(sp)
    e4ca:	   ,-- bra.s e520 <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    e4cc:	,--|-> move.l 36(sp),16(sp)
    e4d2:	|  |   move.l 24(sp),d0
    e4d6:	|  |   movea.l 32(sp),a0
    e4da:	|  |   adda.l d0,a0
    e4dc:	|  |   move.b (a0),d1
    e4de:	|  |   move.b 1ce18 <encode1>,d0
    e4e4:	|  |   eor.b d1,d0
    e4e6:	|  |   ext.w d0
    e4e8:	|  |   movea.w d0,a0
    e4ea:	|  |   move.l a0,12(sp)
    e4ee:	|  |   move.l 1cd6e <DOSBase>,d0
    e4f4:	|  |   movea.l d0,a6
    e4f6:	|  |   move.l 16(sp),d1
    e4fa:	|  |   move.l 12(sp),d2
    e4fe:	|  |   jsr -312(a6)
    e502:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    e506:	|  |   move.b 1ce18 <encode1>,d0
    e50c:	|  |   move.b d0,d1
    e50e:	|  |   move.b 1ce19 <encode2>,d0
    e514:	|  |   add.b d1,d0
    e516:	|  |   move.b d0,1ce18 <encode1>
	for (a = 0; a < len; a ++) {
    e51c:	|  |   addq.l #1,24(sp)
    e520:	|  '-> move.l 24(sp),d0
    e524:	|      cmp.l 20(sp),d0
    e528:	'----- blt.s e4cc <writeStringEncoded+0x2e>
	}
}
    e52a:	       nop
    e52c:	       nop
    e52e:	       move.l (sp)+,d2
    e530:	       movea.l (sp)+,a6
    e532:	       lea 20(sp),sp
    e536:	       rts

0000e538 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    e538:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    e53a:	                   tst.l 8(sp)
    e53e:	               ,-- bne.s e544 <failSecurityCheck+0xc>
    e540:	               |   moveq #1,d0
    e542:	,--------------|-- bra.s e5c2 <failSecurityCheck+0x8a>

	int a = 0;
    e544:	|              '-> clr.l (sp)

	while (fn[a]) {
    e546:	|     ,----------- bra.s e5b4 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    e548:	|  ,--|----------> move.l (sp),d0
    e54a:	|  |  |            movea.l 8(sp),a0
    e54e:	|  |  |            adda.l d0,a0
    e550:	|  |  |            move.b (a0),d0
    e552:	|  |  |            ext.w d0
    e554:	|  |  |            movea.w d0,a0
    e556:	|  |  |            moveq #124,d0
    e558:	|  |  |            cmp.l a0,d0
    e55a:	|  |  |     ,----- beq.s e59c <failSecurityCheck+0x64>
    e55c:	|  |  |     |      moveq #124,d1
    e55e:	|  |  |     |      cmp.l a0,d1
    e560:	|  |  |  ,--|----- blt.s e5b2 <failSecurityCheck+0x7a>
    e562:	|  |  |  |  |      moveq #92,d0
    e564:	|  |  |  |  |      cmp.l a0,d0
    e566:	|  |  |  |  +----- beq.s e59c <failSecurityCheck+0x64>
    e568:	|  |  |  |  |      moveq #92,d1
    e56a:	|  |  |  |  |      cmp.l a0,d1
    e56c:	|  |  |  +--|----- blt.s e5b2 <failSecurityCheck+0x7a>
    e56e:	|  |  |  |  |      moveq #60,d0
    e570:	|  |  |  |  |      cmp.l a0,d0
    e572:	|  |  |  |  |  ,-- blt.s e592 <failSecurityCheck+0x5a>
    e574:	|  |  |  |  |  |   moveq #34,d1
    e576:	|  |  |  |  |  |   cmp.l a0,d1
    e578:	|  |  |  +--|--|-- bgt.s e5b2 <failSecurityCheck+0x7a>
    e57a:	|  |  |  |  |  |   moveq #-34,d1
    e57c:	|  |  |  |  |  |   add.l a0,d1
    e57e:	|  |  |  |  |  |   move.l #83894529,d0
    e584:	|  |  |  |  |  |   lsr.l d1,d0
    e586:	|  |  |  |  |  |   moveq #1,d1
    e588:	|  |  |  |  |  |   and.l d1,d0
    e58a:	|  |  |  |  |  |   sne d0
    e58c:	|  |  |  |  |  |   neg.b d0
    e58e:	|  |  |  |  +--|-- bne.s e59c <failSecurityCheck+0x64>
    e590:	|  |  |  +--|--|-- bra.s e5b2 <failSecurityCheck+0x7a>
    e592:	|  |  |  |  |  '-> lea -62(a0),a0
    e596:	|  |  |  |  |      moveq #1,d0
    e598:	|  |  |  |  |      cmp.l a0,d0
    e59a:	|  |  |  +--|----- bcs.s e5b2 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    e59c:	|  |  |  |  '----> move.l 8(sp),-(sp)
    e5a0:	|  |  |  |         pea 19b90 <PutChar+0x1bd6>
    e5a6:	|  |  |  |         jsr 17518 <KPrintF>
    e5ac:	|  |  |  |         addq.l #8,sp
				return TRUE;
    e5ae:	|  |  |  |         moveq #1,d0
    e5b0:	+--|--|--|-------- bra.s e5c2 <failSecurityCheck+0x8a>
		}
		a++;
    e5b2:	|  |  |  '-------> addq.l #1,(sp)
	while (fn[a]) {
    e5b4:	|  |  '----------> move.l (sp),d0
    e5b6:	|  |               movea.l 8(sp),a0
    e5ba:	|  |               adda.l d0,a0
    e5bc:	|  |               move.b (a0),d0
    e5be:	|  '-------------- bne.s e548 <failSecurityCheck+0x10>
	}
	return FALSE;
    e5c0:	|                  clr.w d0
}
    e5c2:	'----------------> addq.l #4,sp
    e5c4:	                   rts

0000e5c6 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    e5c6:	             lea -24(sp),sp
    e5ca:	             move.l a6,-(sp)
    e5cc:	             move.l 40(sp),d0
    e5d0:	             move.w d0,d0
    e5d2:	             move.w d0,6(sp)
	int fileNum = -1;
    e5d6:	             moveq #-1,d0
    e5d8:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    e5dc:	             jsr 6c5c <killSpeechTimers>

	switch (numParams) {
    e5e2:	             moveq #2,d0
    e5e4:	             cmp.l 32(sp),d0
    e5e8:	      ,----- beq.s e62c <sayCore+0x66>
    e5ea:	      |      moveq #3,d0
    e5ec:	      |      cmp.l 32(sp),d0
    e5f0:	,-----|----- bne.w e70e <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    e5f4:	|     |      movea.l 36(sp),a0
    e5f8:	|     |      move.l 24(a0),d0
    e5fc:	|     |      move.l d0,-(sp)
    e5fe:	|     |      pea 5 <_start+0x5>
    e602:	|     |      lea 20(sp),a0
    e606:	|     |      move.l a0,-(sp)
    e608:	|     |      jsr 14a38 <getValueType>
    e60e:	|     |      lea 12(sp),sp
    e612:	|     |      tst.w d0
    e614:	|     |  ,-- bne.s e61c <sayCore+0x56>
    e616:	|     |  |   moveq #1,d0
    e618:	|  ,--|--|-- bra.w e71e <sayCore+0x158>
			trimStack (&fun -> stack);
    e61c:	|  |  |  '-> moveq #24,d0
    e61e:	|  |  |      add.l 36(sp),d0
    e622:	|  |  |      move.l d0,-(sp)
    e624:	|  |  |      jsr 153bc <trimStack>
    e62a:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    e62c:	|  |  '----> movea.l 36(sp),a0
    e630:	|  |         move.l 24(a0),d0
    e634:	|  |         move.l d0,-(sp)
    e636:	|  |         jsr 1500e <getTextFromAnyVar>
    e63c:	|  |         addq.l #4,sp
    e63e:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    e642:	|  |     ,-- bne.s e64a <sayCore+0x84>
    e644:	|  |     |   moveq #1,d0
    e646:	|  +-----|-- bra.w e71e <sayCore+0x158>
			trimStack (&fun -> stack);
    e64a:	|  |     '-> moveq #24,d0
    e64c:	|  |         add.l 36(sp),d0
    e650:	|  |         move.l d0,-(sp)
    e652:	|  |         jsr 153bc <trimStack>
    e658:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e65a:	|  |         movea.l 36(sp),a0
    e65e:	|  |         move.l 24(a0),d0
    e662:	|  |         move.l d0,-(sp)
    e664:	|  |         pea 7 <_start+0x7>
    e668:	|  |         lea 16(sp),a0
    e66c:	|  |         move.l a0,-(sp)
    e66e:	|  |         jsr 14a38 <getValueType>
    e674:	|  |         lea 12(sp),sp
    e678:	|  |         tst.w d0
    e67a:	|  |     ,-- bne.s e682 <sayCore+0xbc>
    e67c:	|  |     |   moveq #1,d0
    e67e:	|  +-----|-- bra.w e71e <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    e682:	|  |     '-> movea.l 36(sp),a0
    e686:	|  |         move.l 24(a0),d0
    e68a:	|  |         move.l d0,-(sp)
    e68c:	|  |         pea 7 <_start+0x7>
    e690:	|  |         lea 16(sp),a0
    e694:	|  |         move.l a0,-(sp)
    e696:	|  |         jsr 14a38 <getValueType>
    e69c:	|  |         lea 12(sp),sp
    e6a0:	|  |         tst.w d0
    e6a2:	|  |     ,-- bne.s e6a8 <sayCore+0xe2>
    e6a4:	|  |     |   moveq #1,d0
    e6a6:	|  +-----|-- bra.s e71e <sayCore+0x158>
			trimStack (&fun -> stack);
    e6a8:	|  |     '-> moveq #24,d0
    e6aa:	|  |         add.l 36(sp),d0
    e6ae:	|  |         move.l d0,-(sp)
    e6b0:	|  |         jsr 153bc <trimStack>
    e6b6:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    e6b8:	|  |         movea.w 6(sp),a0
    e6bc:	|  |         move.l 12(sp),d1
    e6c0:	|  |         move.l 8(sp),d0
    e6c4:	|  |         move.l a0,-(sp)
    e6c6:	|  |         move.l d1,-(sp)
    e6c8:	|  |         move.l d0,-(sp)
    e6ca:	|  |         move.l 36(sp),-(sp)
    e6ce:	|  |         jsr 43c4 <wrapSpeech>
    e6d4:	|  |         lea 16(sp),sp
    e6d8:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    e6dc:	|  |         movea.l 36(sp),a0
    e6e0:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    e6e6:	|  |         movea.l 36(sp),a0
    e6ea:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    e6f0:	|  |         move.l 24(sp),16(sp)
    e6f6:	|  |         move.l 1cd66 <SysBase>,d0
    e6fc:	|  |         movea.l d0,a6
    e6fe:	|  |         movea.l 16(sp),a1
    e702:	|  |         jsr -690(a6)
			newText = NULL;
    e706:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    e70a:	|  |         moveq #0,d0
    e70c:	|  +-------- bra.s e71e <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    e70e:	'--|-------> pea 19c16 <PutChar+0x1c5c>
    e714:	   |         jsr 17518 <KPrintF>
    e71a:	   |         addq.l #4,sp
	return BR_ERROR;
    e71c:	   |         moveq #1,d0
}
    e71e:	   '-------> movea.l (sp)+,a6
    e720:	             lea 24(sp),sp
    e724:	             rts

0000e726 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    e726:	pea 1 <_start+0x1>
    e72a:	move.l 12(sp),-(sp)
    e72e:	move.l 12(sp),-(sp)
    e732:	jsr e5c6 <sayCore>
    e738:	lea 12(sp),sp
}
    e73c:	rts

0000e73e <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    e73e:	clr.l -(sp)
    e740:	move.l 12(sp),-(sp)
    e744:	move.l 12(sp),-(sp)
    e748:	jsr e5c6 <sayCore>
    e74e:	lea 12(sp),sp
}
    e752:	rts

0000e754 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    e754:	jsr 15404 <freeze>
	freezeSubs (); 
    e75a:	jsr 624c <freezeSubs>
	fun -> freezerLevel = 0;
    e760:	movea.l 8(sp),a0
    e764:	clr.b 56(a0)
	return BR_CONTINUE;
    e768:	moveq #2,d0
}
    e76a:	rts

0000e76c <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    e76c:	jsr 15608 <unfreeze>
	unfreezeSubs (); 
    e772:	jsr 7812 <unfreezeSubs>
	return BR_CONTINUE;
    e778:	moveq #2,d0
}
    e77a:	rts

0000e77c <builtIn_howFrozen>:

builtIn(howFrozen)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, howFrozen ());
    e77c:	jsr 155e4 <howFrozen>
    e782:	move.l d0,d1
    e784:	moveq #28,d0
    e786:	add.l 8(sp),d0
    e78a:	move.l d1,-(sp)
    e78c:	pea 1 <_start+0x1>
    e790:	move.l d0,-(sp)
    e792:	jsr 1532a <setVariable>
    e798:	lea 12(sp),sp
	return BR_CONTINUE; 
    e79c:	moveq #2,d0
}
    e79e:	rts

0000e7a0 <builtIn_setCursor>:

builtIn(setCursor)
{
    e7a0:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e7a2:	movea.l 12(sp),a0
    e7a6:	move.l 24(a0),d0
    e7aa:	move.l d0,-(sp)
    e7ac:	jsr 14f10 <getAnimationFromVar>
    e7b2:	addq.l #4,sp
    e7b4:	move.l d0,(sp)
	pickAnimCursor (aa);
    e7b6:	move.l (sp),-(sp)
    e7b8:	jsr d6c <pickAnimCursor>
    e7be:	addq.l #4,sp
	trimStack (&fun -> stack);
    e7c0:	moveq #24,d0
    e7c2:	add.l 12(sp),d0
    e7c6:	move.l d0,-(sp)
    e7c8:	jsr 153bc <trimStack>
    e7ce:	addq.l #4,sp
	return BR_CONTINUE;
    e7d0:	moveq #2,d0
}
    e7d2:	addq.l #4,sp
    e7d4:	rts

0000e7d6 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e7d6:	move.l 1cd22 <input+0xa>,d1
    e7dc:	move.l 1ce1c <cameraX>,d0
    e7e2:	add.l d0,d1
    e7e4:	moveq #28,d0
    e7e6:	add.l 8(sp),d0
    e7ea:	move.l d1,-(sp)
    e7ec:	pea 1 <_start+0x1>
    e7f0:	move.l d0,-(sp)
    e7f2:	jsr 1532a <setVariable>
    e7f8:	lea 12(sp),sp
	return BR_CONTINUE;
    e7fc:	moveq #2,d0
}
    e7fe:	rts

0000e800 <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e800:	move.l 1cd26 <input+0xe>,d1
    e806:	move.l 1ce20 <cameraY>,d0
    e80c:	add.l d0,d1
    e80e:	moveq #28,d0
    e810:	add.l 8(sp),d0
    e814:	move.l d1,-(sp)
    e816:	pea 1 <_start+0x1>
    e81a:	move.l d0,-(sp)
    e81c:	jsr 1532a <setVariable>
    e822:	lea 12(sp),sp
	return BR_CONTINUE;
    e826:	moveq #2,d0
}
    e828:	rts

0000e82a <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e82a:	move.l 1cd22 <input+0xa>,d0
    e830:	move.l d0,-(sp)
    e832:	jsr 1794a <__floatsisf>
    e838:	addq.l #4,sp
    e83a:	move.l d0,d1
    e83c:	move.l 1c6f8 <cameraZoom>,d0
    e842:	move.l d0,-(sp)
    e844:	move.l d1,-(sp)
    e846:	jsr 179fc <__mulsf3>
    e84c:	addq.l #8,sp
    e84e:	move.l d0,-(sp)
    e850:	jsr 178e2 <__fixsfsi>
    e856:	addq.l #4,sp
    e858:	move.l d0,d1
    e85a:	moveq #28,d0
    e85c:	add.l 8(sp),d0
    e860:	move.l d1,-(sp)
    e862:	pea 1 <_start+0x1>
    e866:	move.l d0,-(sp)
    e868:	jsr 1532a <setVariable>
    e86e:	lea 12(sp),sp
	return BR_CONTINUE;
    e872:	moveq #2,d0
}
    e874:	rts

0000e876 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e876:	move.l 1cd26 <input+0xe>,d0
    e87c:	move.l d0,-(sp)
    e87e:	jsr 1794a <__floatsisf>
    e884:	addq.l #4,sp
    e886:	move.l d0,d1
    e888:	move.l 1c6f8 <cameraZoom>,d0
    e88e:	move.l d0,-(sp)
    e890:	move.l d1,-(sp)
    e892:	jsr 179fc <__mulsf3>
    e898:	addq.l #8,sp
    e89a:	move.l d0,-(sp)
    e89c:	jsr 178e2 <__fixsfsi>
    e8a2:	addq.l #4,sp
    e8a4:	move.l d0,d1
    e8a6:	moveq #28,d0
    e8a8:	add.l 8(sp),d0
    e8ac:	move.l d1,-(sp)
    e8ae:	pea 1 <_start+0x1>
    e8b2:	move.l d0,-(sp)
    e8b4:	jsr 1532a <setVariable>
    e8ba:	lea 12(sp),sp
	return BR_CONTINUE;
    e8be:	moveq #2,d0
}
    e8c0:	rts

0000e8c2 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e8c2:	jsr 8844 <statusBarText>
    e8c8:	move.l d0,d1
    e8ca:	moveq #28,d0
    e8cc:	add.l 8(sp),d0
    e8d0:	move.l d1,-(sp)
    e8d2:	move.l d0,-(sp)
    e8d4:	jsr 14c5a <makeTextVar>
    e8da:	addq.l #8,sp
	return BR_CONTINUE;
    e8dc:	moveq #2,d0
}
    e8de:	rts

0000e8e0 <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e8e0:	       lea -20(sp),sp
    e8e4:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e8e6:	       movea.l 32(sp),a0
    e8ea:	       move.l 24(a0),d0
    e8ee:	       move.l d0,-(sp)
    e8f0:	       jsr 1500e <getTextFromAnyVar>
    e8f6:	       addq.l #4,sp
    e8f8:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e8fc:	   ,-- bne.s e904 <builtIn_getMatchingFiles+0x24>
    e8fe:	   |   moveq #1,d0
    e900:	,--|-- bra.w e9c6 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e904:	|  '-> moveq #24,d0
    e906:	|      add.l 32(sp),d0
    e90a:	|      move.l d0,-(sp)
    e90c:	|      jsr 153bc <trimStack>
    e912:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e914:	|      moveq #28,d0
    e916:	|      add.l 32(sp),d0
    e91a:	|      move.l d0,-(sp)
    e91c:	|      jsr 14c86 <unlinkVar>
    e922:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e924:	|      movea.l 32(sp),a0
    e928:	|      moveq #6,d0
    e92a:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e92e:	|      moveq #12,d0
    e930:	|      move.l d0,16(sp)
    e934:	|      clr.l 12(sp)
    e938:	|      move.l 1cd66 <SysBase>,d0
    e93e:	|      movea.l d0,a6
    e940:	|      move.l 16(sp),d0
    e944:	|      move.l 12(sp),d1
    e948:	|      jsr -684(a6)
    e94c:	|      move.l d0,8(sp)
    e950:	|      move.l 8(sp),d0
    e954:	|      movea.l 32(sp),a0
    e958:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e95c:	|      moveq #32,d0
    e95e:	|      add.l 32(sp),d0
    e962:	|  ,-- bne.s e968 <builtIn_getMatchingFiles+0x88>
    e964:	|  |   moveq #1,d0
    e966:	+--|-- bra.s e9c6 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e968:	|  '-> movea.l 32(sp),a0
    e96c:	|      movea.l 32(a0),a0
    e970:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e972:	|      movea.l 32(sp),a0
    e976:	|      movea.l 32(a0),a0
    e97a:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e97e:	|      movea.l 32(sp),a0
    e982:	|      movea.l 32(a0),a0
    e986:	|      moveq #1,d0
    e988:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e98c:	|      movea.l 32(sp),a0
    e990:	|      move.l 32(a0),d0
    e994:	|      move.l 20(sp),-(sp)
    e998:	|      move.l d0,-(sp)
    e99a:	|      jsr 147f4 <getSavedGamesStack>
    e9a0:	|      addq.l #8,sp
    e9a2:	|      tst.w d0
    e9a4:	|  ,-- bne.s e9aa <builtIn_getMatchingFiles+0xca>
    e9a6:	|  |   moveq #1,d0
    e9a8:	+--|-- bra.s e9c6 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e9aa:	|  '-> move.l 20(sp),4(sp)
    e9b0:	|      move.l 1cd66 <SysBase>,d0
    e9b6:	|      movea.l d0,a6
    e9b8:	|      movea.l 4(sp),a1
    e9bc:	|      jsr -690(a6)
	newText = NULL;
    e9c0:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e9c4:	|      moveq #2,d0
}
    e9c6:	'----> movea.l (sp)+,a6
    e9c8:	       lea 20(sp),sp
    e9cc:	       rts

0000e9ce <builtIn_saveGame>:

builtIn(saveGame)
{
    e9ce:	       lea -12(sp),sp
    e9d2:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e9d4:	       movea.l 24(sp),a0
    e9d8:	       move.l 24(a0),d0
    e9dc:	       move.l d0,-(sp)
    e9de:	       jsr 1500e <getTextFromAnyVar>
    e9e4:	       addq.l #4,sp
    e9e6:	       move.l d0,1cd32 <loadNow>
    trimStack(&fun->stack);
    e9ec:	       moveq #24,d0
    e9ee:	       add.l 24(sp),d0
    e9f2:	       move.l d0,-(sp)
    e9f4:	       jsr 153bc <trimStack>
    e9fa:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e9fc:	       move.l 1cd32 <loadNow>,d0
    ea02:	       move.l d0,-(sp)
    ea04:	       jsr 2fe <encodeFilename>
    ea0a:	       addq.l #4,sp
    ea0c:	       move.l d0,12(sp)
    FreeVec(loadNow);
    ea10:	       move.l 1cd32 <loadNow>,8(sp)
    ea18:	       move.l 1cd66 <SysBase>,d0
    ea1e:	       movea.l d0,a6
    ea20:	       movea.l 8(sp),a1
    ea24:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    ea28:	       move.l 12(sp),-(sp)
    ea2c:	       jsr e538 <failSecurityCheck>
    ea32:	       addq.l #4,sp
    ea34:	       tst.w d0
    ea36:	   ,-- beq.s ea3c <builtIn_saveGame+0x6e>
    ea38:	   |   moveq #1,d0
    ea3a:	,--|-- bra.s ea8c <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    ea3c:	|  '-> move.l 12(sp),-(sp)
    ea40:	|      pea 19c44 <PutChar+0x1c8a>
    ea46:	|      jsr 13f64 <joinStrings>
    ea4c:	|      addq.l #8,sp
    ea4e:	|      move.l d0,1cd32 <loadNow>
    FreeVec(aaaaa);
    ea54:	|      move.l 12(sp),4(sp)
    ea5a:	|      move.l 1cd66 <SysBase>,d0
    ea60:	|      movea.l d0,a6
    ea62:	|      movea.l 4(sp),a1
    ea66:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    ea6a:	|      moveq #28,d0
    ea6c:	|      add.l 24(sp),d0
    ea70:	|      clr.l -(sp)
    ea72:	|      pea 1 <_start+0x1>
    ea76:	|      move.l d0,-(sp)
    ea78:	|      jsr 1532a <setVariable>
    ea7e:	|      lea 12(sp),sp
    saverFunc = fun;
    ea82:	|      move.l 24(sp),1ce2c <saverFunc>
    return BR_KEEP_AND_PAUSE;
    ea8a:	|      moveq #0,d0
}
    ea8c:	'----> movea.l (sp)+,a6
    ea8e:	       lea 12(sp),sp
    ea92:	       rts

0000ea94 <builtIn_fileExists>:

builtIn(fileExists)
{
    ea94:	       lea -36(sp),sp
    ea98:	       move.l a6,-(sp)
    ea9a:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    ea9c:	       movea.l 52(sp),a0
    eaa0:	       move.l 24(a0),d0
    eaa4:	       move.l d0,-(sp)
    eaa6:	       jsr 1500e <getTextFromAnyVar>
    eaac:	       addq.l #4,sp
    eaae:	       move.l d0,1cd32 <loadNow>
    trimStack(&fun->stack);
    eab4:	       moveq #24,d0
    eab6:	       add.l 52(sp),d0
    eaba:	       move.l d0,-(sp)
    eabc:	       jsr 153bc <trimStack>
    eac2:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    eac4:	       move.l 1cd32 <loadNow>,d0
    eaca:	       move.l d0,-(sp)
    eacc:	       jsr 2fe <encodeFilename>
    ead2:	       addq.l #4,sp
    ead4:	       move.l d0,40(sp)
    FreeVec(loadNow);
    ead8:	       move.l 1cd32 <loadNow>,36(sp)
    eae0:	       move.l 1cd66 <SysBase>,d0
    eae6:	       movea.l d0,a6
    eae8:	       movea.l 36(sp),a1
    eaec:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    eaf0:	       move.l 40(sp),-(sp)
    eaf4:	       jsr e538 <failSecurityCheck>
    eafa:	       addq.l #4,sp
    eafc:	       tst.w d0
    eafe:	   ,-- beq.s eb06 <builtIn_fileExists+0x72>
    eb00:	   |   moveq #1,d0
    eb02:	,--|-- bra.w eba6 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    eb06:	|  '-> move.l 40(sp),32(sp)
    eb0c:	|      move.l #1005,28(sp)
    eb14:	|      move.l 1cd6e <DOSBase>,d0
    eb1a:	|      movea.l d0,a6
    eb1c:	|      move.l 32(sp),d1
    eb20:	|      move.l 28(sp),d2
    eb24:	|      jsr -30(a6)
    eb28:	|      move.l d0,24(sp)
    eb2c:	|      move.l 24(sp),d0
    eb30:	|      move.l d0,20(sp)
    if (!fp) {        
    eb34:	|  ,-- bne.s eb44 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    eb36:	|  |   pea 19c46 <PutChar+0x1c8c>
    eb3c:	|  |   jsr 17518 <KPrintF>
    eb42:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    eb44:	|  '-> tst.l 20(sp)
    eb48:	|      sne d0
    eb4a:	|      neg.b d0
    eb4c:	|      moveq #0,d1
    eb4e:	|      move.b d0,d1
    eb50:	|      moveq #28,d0
    eb52:	|      add.l 52(sp),d0
    eb56:	|      move.l d1,-(sp)
    eb58:	|      pea 1 <_start+0x1>
    eb5c:	|      move.l d0,-(sp)
    eb5e:	|      jsr 1532a <setVariable>
    eb64:	|      lea 12(sp),sp
    if (fp) Close(fp);
    eb68:	|      tst.l 20(sp)
    eb6c:	|  ,-- beq.s eb88 <builtIn_fileExists+0xf4>
    eb6e:	|  |   move.l 20(sp),16(sp)
    eb74:	|  |   move.l 1cd6e <DOSBase>,d0
    eb7a:	|  |   movea.l d0,a6
    eb7c:	|  |   move.l 16(sp),d1
    eb80:	|  |   jsr -36(a6)
    eb84:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    eb88:	|  '-> move.l 40(sp),8(sp)
    eb8e:	|      move.l 1cd66 <SysBase>,d0
    eb94:	|      movea.l d0,a6
    eb96:	|      movea.l 8(sp),a1
    eb9a:	|      jsr -690(a6)
    loadNow = NULL;
    eb9e:	|      clr.l 1cd32 <loadNow>
    return BR_CONTINUE;
    eba4:	|      moveq #2,d0
}
    eba6:	'----> move.l (sp)+,d2
    eba8:	       movea.l (sp)+,a6
    ebaa:	       lea 36(sp),sp
    ebae:	       rts

0000ebb0 <builtIn_loadGame>:

builtIn(loadGame)
{
    ebb0:	       lea -36(sp),sp
    ebb4:	       move.l a6,-(sp)
    ebb6:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    ebb8:	       movea.l 52(sp),a0
    ebbc:	       move.l 24(a0),d0
    ebc0:	       move.l d0,-(sp)
    ebc2:	       jsr 1500e <getTextFromAnyVar>
    ebc8:	       addq.l #4,sp
    ebca:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    ebce:	       moveq #24,d0
    ebd0:	       add.l 52(sp),d0
    ebd4:	       move.l d0,-(sp)
    ebd6:	       jsr 153bc <trimStack>
    ebdc:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    ebde:	       move.l 40(sp),-(sp)
    ebe2:	       jsr 2fe <encodeFilename>
    ebe8:	       addq.l #4,sp
    ebea:	       move.l d0,1cd32 <loadNow>
    FreeVec(aaaaa);
    ebf0:	       move.l 40(sp),36(sp)
    ebf6:	       move.l 1cd66 <SysBase>,d0
    ebfc:	       movea.l d0,a6
    ebfe:	       movea.l 36(sp),a1
    ec02:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    ec06:	       move.l 1cd32 <loadNow>,d0
    ec0c:	       move.l d0,-(sp)
    ec0e:	       jsr e538 <failSecurityCheck>
    ec14:	       addq.l #4,sp
    ec16:	       tst.w d0
    ec18:	   ,-- beq.s ec1e <builtIn_loadGame+0x6e>
    ec1a:	   |   moveq #1,d0
    ec1c:	,--|-- bra.s ec8e <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    ec1e:	|  '-> move.l 1cd32 <loadNow>,32(sp)
    ec26:	|      move.l #1005,28(sp)
    ec2e:	|      move.l 1cd6e <DOSBase>,d0
    ec34:	|      movea.l d0,a6
    ec36:	|      move.l 32(sp),d1
    ec3a:	|      move.l 28(sp),d2
    ec3e:	|      jsr -30(a6)
    ec42:	|      move.l d0,24(sp)
    ec46:	|      move.l 24(sp),d0
    ec4a:	|      move.l d0,20(sp)
    if (fp) {
    ec4e:	|  ,-- beq.s ec6e <builtIn_loadGame+0xbe>
        Close(fp);
    ec50:	|  |   move.l 20(sp),12(sp)
    ec56:	|  |   move.l 1cd6e <DOSBase>,d0
    ec5c:	|  |   movea.l d0,a6
    ec5e:	|  |   move.l 12(sp),d1
    ec62:	|  |   jsr -36(a6)
    ec66:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    ec6a:	|  |   moveq #0,d0
    ec6c:	+--|-- bra.s ec8e <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    ec6e:	|  '-> move.l 1cd32 <loadNow>,16(sp)
    ec76:	|      move.l 1cd66 <SysBase>,d0
    ec7c:	|      movea.l d0,a6
    ec7e:	|      movea.l 16(sp),a1
    ec82:	|      jsr -690(a6)
    loadNow = NULL;
    ec86:	|      clr.l 1cd32 <loadNow>
    return BR_CONTINUE;
    ec8c:	|      moveq #2,d0
}
    ec8e:	'----> move.l (sp)+,d2
    ec90:	       movea.l (sp)+,a6
    ec92:	       lea 36(sp),sp
    ec96:	       rts

0000ec98 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    ec98:	move.l 1ce02 <sceneHeight>,d0
    ec9e:	move.l d0,d1
    eca0:	move.l 1cdfe <sceneWidth>,d0
    eca6:	move.l d1,-(sp)
    eca8:	move.l d0,-(sp)
    ecaa:	clr.l -(sp)
    ecac:	clr.l -(sp)
    ecae:	jsr d422 <blankScreen>
    ecb4:	lea 16(sp),sp
	return BR_CONTINUE;
    ecb8:	moveq #2,d0
}
    ecba:	rts

0000ecbc <builtIn_blankArea>:

builtIn(blankArea)
{
    ecbc:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ecc0:	       movea.l 24(sp),a0
    ecc4:	       move.l 24(a0),d0
    ecc8:	       move.l d0,-(sp)
    ecca:	       pea 1 <_start+0x1>
    ecce:	       lea 8(sp),a0
    ecd2:	       move.l a0,-(sp)
    ecd4:	       jsr 14a38 <getValueType>
    ecda:	       lea 12(sp),sp
    ecde:	       tst.w d0
    ece0:	   ,-- bne.s ece8 <builtIn_blankArea+0x2c>
    ece2:	   |   moveq #1,d0
    ece4:	,--|-- bra.w edbe <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ece8:	|  '-> moveq #24,d0
    ecea:	|      add.l 24(sp),d0
    ecee:	|      move.l d0,-(sp)
    ecf0:	|      jsr 153bc <trimStack>
    ecf6:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ecf8:	|      movea.l 24(sp),a0
    ecfc:	|      move.l 24(a0),d0
    ed00:	|      move.l d0,-(sp)
    ed02:	|      pea 1 <_start+0x1>
    ed06:	|      lea 12(sp),a0
    ed0a:	|      move.l a0,-(sp)
    ed0c:	|      jsr 14a38 <getValueType>
    ed12:	|      lea 12(sp),sp
    ed16:	|      tst.w d0
    ed18:	|  ,-- bne.s ed20 <builtIn_blankArea+0x64>
    ed1a:	|  |   moveq #1,d0
    ed1c:	+--|-- bra.w edbe <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ed20:	|  '-> moveq #24,d0
    ed22:	|      add.l 24(sp),d0
    ed26:	|      move.l d0,-(sp)
    ed28:	|      jsr 153bc <trimStack>
    ed2e:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ed30:	|      movea.l 24(sp),a0
    ed34:	|      move.l 24(a0),d0
    ed38:	|      move.l d0,-(sp)
    ed3a:	|      pea 1 <_start+0x1>
    ed3e:	|      moveq #16,d0
    ed40:	|      add.l sp,d0
    ed42:	|      move.l d0,-(sp)
    ed44:	|      jsr 14a38 <getValueType>
    ed4a:	|      lea 12(sp),sp
    ed4e:	|      tst.w d0
    ed50:	|  ,-- bne.s ed56 <builtIn_blankArea+0x9a>
    ed52:	|  |   moveq #1,d0
    ed54:	+--|-- bra.s edbe <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ed56:	|  '-> moveq #24,d0
    ed58:	|      add.l 24(sp),d0
    ed5c:	|      move.l d0,-(sp)
    ed5e:	|      jsr 153bc <trimStack>
    ed64:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    ed66:	|      movea.l 24(sp),a0
    ed6a:	|      move.l 24(a0),d0
    ed6e:	|      move.l d0,-(sp)
    ed70:	|      pea 1 <_start+0x1>
    ed74:	|      moveq #20,d0
    ed76:	|      add.l sp,d0
    ed78:	|      move.l d0,-(sp)
    ed7a:	|      jsr 14a38 <getValueType>
    ed80:	|      lea 12(sp),sp
    ed84:	|      tst.w d0
    ed86:	|  ,-- bne.s ed8c <builtIn_blankArea+0xd0>
    ed88:	|  |   moveq #1,d0
    ed8a:	+--|-- bra.s edbe <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    ed8c:	|  '-> moveq #24,d0
    ed8e:	|      add.l 24(sp),d0
    ed92:	|      move.l d0,-(sp)
    ed94:	|      jsr 153bc <trimStack>
    ed9a:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    ed9c:	|      movea.l (sp),a1
    ed9e:	|      movea.l 4(sp),a0
    eda2:	|      move.l 8(sp),d1
    eda6:	|      move.l 12(sp),d0
    edaa:	|      move.l a1,-(sp)
    edac:	|      move.l a0,-(sp)
    edae:	|      move.l d1,-(sp)
    edb0:	|      move.l d0,-(sp)
    edb2:	|      jsr d422 <blankScreen>
    edb8:	|      lea 16(sp),sp
	return BR_CONTINUE;
    edbc:	|      moveq #2,d0
}
    edbe:	'----> lea 16(sp),sp
    edc2:	       rts

0000edc4 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    edc4:	jsr d440 <darkScreen>
	return BR_CONTINUE;
    edca:	moveq #2,d0
}
    edcc:	rts

0000edce <builtIn_addOverlay>:

builtIn(addOverlay)
{
    edce:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    edd2:	       movea.l 20(sp),a0
    edd6:	       move.l 24(a0),d0
    edda:	       move.l d0,-(sp)
    eddc:	       pea 1 <_start+0x1>
    ede0:	       lea 8(sp),a0
    ede4:	       move.l a0,-(sp)
    ede6:	       jsr 14a38 <getValueType>
    edec:	       lea 12(sp),sp
    edf0:	       tst.w d0
    edf2:	   ,-- bne.s edfa <builtIn_addOverlay+0x2c>
    edf4:	   |   moveq #1,d0
    edf6:	,--|-- bra.w ee92 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    edfa:	|  '-> moveq #24,d0
    edfc:	|      add.l 20(sp),d0
    ee00:	|      move.l d0,-(sp)
    ee02:	|      jsr 153bc <trimStack>
    ee08:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee0a:	|      movea.l 20(sp),a0
    ee0e:	|      move.l 24(a0),d0
    ee12:	|      move.l d0,-(sp)
    ee14:	|      pea 1 <_start+0x1>
    ee18:	|      moveq #12,d0
    ee1a:	|      add.l sp,d0
    ee1c:	|      move.l d0,-(sp)
    ee1e:	|      jsr 14a38 <getValueType>
    ee24:	|      lea 12(sp),sp
    ee28:	|      tst.w d0
    ee2a:	|  ,-- bne.s ee30 <builtIn_addOverlay+0x62>
    ee2c:	|  |   moveq #1,d0
    ee2e:	+--|-- bra.s ee92 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ee30:	|  '-> moveq #24,d0
    ee32:	|      add.l 20(sp),d0
    ee36:	|      move.l d0,-(sp)
    ee38:	|      jsr 153bc <trimStack>
    ee3e:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ee40:	|      movea.l 20(sp),a0
    ee44:	|      move.l 24(a0),d0
    ee48:	|      move.l d0,-(sp)
    ee4a:	|      pea 5 <_start+0x5>
    ee4e:	|      moveq #16,d0
    ee50:	|      add.l sp,d0
    ee52:	|      move.l d0,-(sp)
    ee54:	|      jsr 14a38 <getValueType>
    ee5a:	|      lea 12(sp),sp
    ee5e:	|      tst.w d0
    ee60:	|  ,-- bne.s ee66 <builtIn_addOverlay+0x98>
    ee62:	|  |   moveq #1,d0
    ee64:	+--|-- bra.s ee92 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    ee66:	|  '-> moveq #24,d0
    ee68:	|      add.l 20(sp),d0
    ee6c:	|      move.l d0,-(sp)
    ee6e:	|      jsr 153bc <trimStack>
    ee74:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    ee76:	|      movea.l (sp),a0
    ee78:	|      move.l 4(sp),d1
    ee7c:	|      move.l 8(sp),d0
    ee80:	|      move.l a0,-(sp)
    ee82:	|      move.l d1,-(sp)
    ee84:	|      move.l d0,-(sp)
    ee86:	|      jsr d55e <loadBackDrop>
    ee8c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ee90:	|      moveq #2,d0
}
    ee92:	'----> lea 12(sp),sp
    ee96:	       rts

0000ee98 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    ee98:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ee9c:	       movea.l 20(sp),a0
    eea0:	       move.l 24(a0),d0
    eea4:	       move.l d0,-(sp)
    eea6:	       pea 1 <_start+0x1>
    eeaa:	       lea 8(sp),a0
    eeae:	       move.l a0,-(sp)
    eeb0:	       jsr 14a38 <getValueType>
    eeb6:	       lea 12(sp),sp
    eeba:	       tst.w d0
    eebc:	   ,-- bne.s eec4 <builtIn_mixOverlay+0x2c>
    eebe:	   |   moveq #1,d0
    eec0:	,--|-- bra.w ef5c <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eec4:	|  '-> moveq #24,d0
    eec6:	|      add.l 20(sp),d0
    eeca:	|      move.l d0,-(sp)
    eecc:	|      jsr 153bc <trimStack>
    eed2:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    eed4:	|      movea.l 20(sp),a0
    eed8:	|      move.l 24(a0),d0
    eedc:	|      move.l d0,-(sp)
    eede:	|      pea 1 <_start+0x1>
    eee2:	|      moveq #12,d0
    eee4:	|      add.l sp,d0
    eee6:	|      move.l d0,-(sp)
    eee8:	|      jsr 14a38 <getValueType>
    eeee:	|      lea 12(sp),sp
    eef2:	|      tst.w d0
    eef4:	|  ,-- bne.s eefa <builtIn_mixOverlay+0x62>
    eef6:	|  |   moveq #1,d0
    eef8:	+--|-- bra.s ef5c <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    eefa:	|  '-> moveq #24,d0
    eefc:	|      add.l 20(sp),d0
    ef00:	|      move.l d0,-(sp)
    ef02:	|      jsr 153bc <trimStack>
    ef08:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    ef0a:	|      movea.l 20(sp),a0
    ef0e:	|      move.l 24(a0),d0
    ef12:	|      move.l d0,-(sp)
    ef14:	|      pea 5 <_start+0x5>
    ef18:	|      moveq #16,d0
    ef1a:	|      add.l sp,d0
    ef1c:	|      move.l d0,-(sp)
    ef1e:	|      jsr 14a38 <getValueType>
    ef24:	|      lea 12(sp),sp
    ef28:	|      tst.w d0
    ef2a:	|  ,-- bne.s ef30 <builtIn_mixOverlay+0x98>
    ef2c:	|  |   moveq #1,d0
    ef2e:	+--|-- bra.s ef5c <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    ef30:	|  '-> moveq #24,d0
    ef32:	|      add.l 20(sp),d0
    ef36:	|      move.l d0,-(sp)
    ef38:	|      jsr 153bc <trimStack>
    ef3e:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    ef40:	|      movea.l (sp),a0
    ef42:	|      move.l 4(sp),d1
    ef46:	|      move.l 8(sp),d0
    ef4a:	|      move.l a0,-(sp)
    ef4c:	|      move.l d1,-(sp)
    ef4e:	|      move.l d0,-(sp)
    ef50:	|      jsr d5d4 <mixBackDrop>
    ef56:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ef5a:	|      moveq #2,d0
}
    ef5c:	'----> lea 12(sp),sp
    ef60:	       rts

0000ef62 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    ef62:	       lea -12(sp),sp
	UNUSEDALL
	//KPrintF("pasteimage: Started\n");
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef66:	       movea.l 20(sp),a0
    ef6a:	       move.l 24(a0),d0
    ef6e:	       move.l d0,-(sp)
    ef70:	       pea 1 <_start+0x1>
    ef74:	       lea 8(sp),a0
    ef78:	       move.l a0,-(sp)
    ef7a:	       jsr 14a38 <getValueType>
    ef80:	       lea 12(sp),sp
    ef84:	       tst.w d0
    ef86:	   ,-- bne.s ef8e <builtIn_pasteImage+0x2c>
    ef88:	   |   moveq #1,d0
    ef8a:	,--|-- bra.w f01e <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    ef8e:	|  '-> moveq #24,d0
    ef90:	|      add.l 20(sp),d0
    ef94:	|      move.l d0,-(sp)
    ef96:	|      jsr 153bc <trimStack>
    ef9c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ef9e:	|      movea.l 20(sp),a0
    efa2:	|      move.l 24(a0),d0
    efa6:	|      move.l d0,-(sp)
    efa8:	|      pea 1 <_start+0x1>
    efac:	|      moveq #12,d0
    efae:	|      add.l sp,d0
    efb0:	|      move.l d0,-(sp)
    efb2:	|      jsr 14a38 <getValueType>
    efb8:	|      lea 12(sp),sp
    efbc:	|      tst.w d0
    efbe:	|  ,-- bne.s efc4 <builtIn_pasteImage+0x62>
    efc0:	|  |   moveq #1,d0
    efc2:	+--|-- bra.s f01e <builtIn_pasteImage+0xbc>
	trimStack (&fun -> stack);
    efc4:	|  '-> moveq #24,d0
    efc6:	|      add.l 20(sp),d0
    efca:	|      move.l d0,-(sp)
    efcc:	|      jsr 153bc <trimStack>
    efd2:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    efd4:	|      movea.l 20(sp),a0
    efd8:	|      move.l 24(a0),d0
    efdc:	|      move.l d0,-(sp)
    efde:	|      jsr 14f10 <getAnimationFromVar>
    efe4:	|      addq.l #4,sp
    efe6:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    efea:	|      moveq #24,d0
    efec:	|      add.l 20(sp),d0
    eff0:	|      move.l d0,-(sp)
    eff2:	|      jsr 153bc <trimStack>
    eff8:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    effa:	|      tst.l 8(sp)
    effe:	|  ,-- bne.s f004 <builtIn_pasteImage+0xa2>
    f000:	|  |   moveq #2,d0
    f002:	+--|-- bra.s f01e <builtIn_pasteImage+0xbc>

	pasteCursor (x, y, pp);
    f004:	|  '-> move.l (sp),d1
    f006:	|      move.l 4(sp),d0
    f00a:	|      move.l 8(sp),-(sp)
    f00e:	|      move.l d1,-(sp)
    f010:	|      move.l d0,-(sp)
    f012:	|      jsr d94 <pasteCursor>
    f018:	|      lea 12(sp),sp
	//KPrintF("pasteimage: Finished\n");
	return BR_CONTINUE;	
    f01c:	|      moveq #2,d0
}
    f01e:	'----> lea 12(sp),sp
    f022:	       rts

0000f024 <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    f024:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f026:	       movea.l 16(sp),a0
    f02a:	       move.l 24(a0),d0
    f02e:	       move.l d0,-(sp)
    f030:	       pea 1 <_start+0x1>
    f034:	       move.l sp,d0
    f036:	       addq.l #8,d0
    f038:	       move.l d0,-(sp)
    f03a:	       jsr 14a38 <getValueType>
    f040:	       lea 12(sp),sp
    f044:	       tst.w d0
    f046:	   ,-- bne.s f04e <builtIn_setSceneDimensions+0x2a>
    f048:	   |   moveq #1,d0
    f04a:	,--|-- bra.w f0d6 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    f04e:	|  '-> moveq #24,d0
    f050:	|      add.l 16(sp),d0
    f054:	|      move.l d0,-(sp)
    f056:	|      jsr 153bc <trimStack>
    f05c:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f05e:	|      movea.l 16(sp),a0
    f062:	|      move.l 24(a0),d0
    f066:	|      move.l d0,-(sp)
    f068:	|      pea 1 <_start+0x1>
    f06c:	|      moveq #12,d0
    f06e:	|      add.l sp,d0
    f070:	|      move.l d0,-(sp)
    f072:	|      jsr 14a38 <getValueType>
    f078:	|      lea 12(sp),sp
    f07c:	|      tst.w d0
    f07e:	|  ,-- bne.s f084 <builtIn_setSceneDimensions+0x60>
    f080:	|  |   moveq #1,d0
    f082:	+--|-- bra.s f0d6 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    f084:	|  '-> moveq #24,d0
    f086:	|      add.l 16(sp),d0
    f08a:	|      move.l d0,-(sp)
    f08c:	|      jsr 153bc <trimStack>
    f092:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    f094:	|      move.l (sp),d1
    f096:	|      move.l 4(sp),d0
    f09a:	|      move.l d1,-(sp)
    f09c:	|      move.l d0,-(sp)
    f09e:	|      jsr d62a <resizeBackdrop>
    f0a4:	|      addq.l #8,sp
    f0a6:	|      tst.w d0
    f0a8:	|  ,-- beq.s f0c6 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    f0aa:	|  |   move.l (sp),d1
    f0ac:	|  |   move.l 4(sp),d0
    f0b0:	|  |   move.l d1,-(sp)
    f0b2:	|  |   move.l d0,-(sp)
    f0b4:	|  |   clr.l -(sp)
    f0b6:	|  |   clr.l -(sp)
    f0b8:	|  |   jsr d422 <blankScreen>
    f0be:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    f0c2:	|  |   moveq #2,d0
    f0c4:	+--|-- bra.s f0d6 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    f0c6:	|  '-> pea 19c64 <PutChar+0x1caa>
    f0cc:	|      jsr 17518 <KPrintF>
    f0d2:	|      addq.l #4,sp
	return BR_ERROR;
    f0d4:	|      moveq #1,d0
}
    f0d6:	'----> addq.l #8,sp
    f0d8:	       rts

0000f0da <builtIn_aimCamera>:

builtIn(aimCamera)
{
    f0da:	          move.l d3,-(sp)
    f0dc:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f0de:	          movea.l 16(sp),a0
    f0e2:	          move.l 24(a0),d0
    f0e6:	          move.l d0,-(sp)
    f0e8:	          pea 1 <_start+0x1>
    f0ec:	          pea 1ce20 <cameraY>
    f0f2:	          jsr 14a38 <getValueType>
    f0f8:	          lea 12(sp),sp
    f0fc:	          tst.w d0
    f0fe:	      ,-- bne.s f106 <builtIn_aimCamera+0x2c>
    f100:	      |   moveq #1,d0
    f102:	,-----|-- bra.w f388 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f106:	|     '-> moveq #24,d0
    f108:	|         add.l 16(sp),d0
    f10c:	|         move.l d0,-(sp)
    f10e:	|         jsr 153bc <trimStack>
    f114:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f116:	|         movea.l 16(sp),a0
    f11a:	|         move.l 24(a0),d0
    f11e:	|         move.l d0,-(sp)
    f120:	|         pea 1 <_start+0x1>
    f124:	|         pea 1ce1c <cameraX>
    f12a:	|         jsr 14a38 <getValueType>
    f130:	|         lea 12(sp),sp
    f134:	|         tst.w d0
    f136:	|     ,-- bne.s f13e <builtIn_aimCamera+0x64>
    f138:	|     |   moveq #1,d0
    f13a:	+-----|-- bra.w f388 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    f13e:	|     '-> moveq #24,d0
    f140:	|         add.l 16(sp),d0
    f144:	|         move.l d0,-(sp)
    f146:	|         jsr 153bc <trimStack>
    f14c:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    f14e:	|         move.l 1ce1c <cameraX>,d0
    f154:	|         move.l d0,-(sp)
    f156:	|         jsr 1794a <__floatsisf>
    f15c:	|         addq.l #4,sp
    f15e:	|         move.l d0,d2
    f160:	|         move.l 1ccba <winWidth>,d0
    f166:	|         lsr.l #1,d0
    f168:	|         move.l d0,-(sp)
    f16a:	|         jsr 17972 <__floatunsisf>
    f170:	|         addq.l #4,sp
    f172:	|         move.l d0,d1
    f174:	|         move.l 1c6f8 <cameraZoom>,d0
    f17a:	|         move.l d0,-(sp)
    f17c:	|         move.l d1,-(sp)
    f17e:	|         jsr 17800 <__divsf3>
    f184:	|         addq.l #8,sp
    f186:	|         move.l d0,-(sp)
    f188:	|         move.l d2,-(sp)
    f18a:	|         jsr 17c3e <__subsf3>
    f190:	|         addq.l #8,sp
    f192:	|         move.l d0,-(sp)
    f194:	|         jsr 178e2 <__fixsfsi>
    f19a:	|         addq.l #4,sp
    f19c:	|         move.l d0,1ce1c <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    f1a2:	|         move.l 1ce20 <cameraY>,d0
    f1a8:	|         move.l d0,-(sp)
    f1aa:	|         jsr 1794a <__floatsisf>
    f1b0:	|         addq.l #4,sp
    f1b2:	|         move.l d0,d2
    f1b4:	|         move.l 1ccbe <winHeight>,d0
    f1ba:	|         lsr.l #1,d0
    f1bc:	|         move.l d0,-(sp)
    f1be:	|         jsr 17972 <__floatunsisf>
    f1c4:	|         addq.l #4,sp
    f1c6:	|         move.l d0,d1
    f1c8:	|         move.l 1c6f8 <cameraZoom>,d0
    f1ce:	|         move.l d0,-(sp)
    f1d0:	|         move.l d1,-(sp)
    f1d2:	|         jsr 17800 <__divsf3>
    f1d8:	|         addq.l #8,sp
    f1da:	|         move.l d0,-(sp)
    f1dc:	|         move.l d2,-(sp)
    f1de:	|         jsr 17c3e <__subsf3>
    f1e4:	|         addq.l #8,sp
    f1e6:	|         move.l d0,-(sp)
    f1e8:	|         jsr 178e2 <__fixsfsi>
    f1ee:	|         addq.l #4,sp
    f1f0:	|         move.l d0,1ce20 <cameraY>

	if (cameraX < 0) cameraX = 0;
    f1f6:	|         move.l 1ce1c <cameraX>,d0
    f1fc:	|     ,-- bpl.s f208 <builtIn_aimCamera+0x12e>
    f1fe:	|     |   clr.l 1ce1c <cameraX>
    f204:	|  ,--|-- bra.w f2be <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    f208:	|  |  '-> move.l 1ce1c <cameraX>,d0
    f20e:	|  |      move.l d0,-(sp)
    f210:	|  |      jsr 1794a <__floatsisf>
    f216:	|  |      addq.l #4,sp
    f218:	|  |      move.l d0,d2
    f21a:	|  |      move.l 1cdfe <sceneWidth>,d0
    f220:	|  |      move.l d0,-(sp)
    f222:	|  |      jsr 17972 <__floatunsisf>
    f228:	|  |      addq.l #4,sp
    f22a:	|  |      move.l d0,d3
    f22c:	|  |      move.l 1ccba <winWidth>,d0
    f232:	|  |      move.l d0,-(sp)
    f234:	|  |      jsr 17972 <__floatunsisf>
    f23a:	|  |      addq.l #4,sp
    f23c:	|  |      move.l d0,d1
    f23e:	|  |      move.l 1c6f8 <cameraZoom>,d0
    f244:	|  |      move.l d0,-(sp)
    f246:	|  |      move.l d1,-(sp)
    f248:	|  |      jsr 17800 <__divsf3>
    f24e:	|  |      addq.l #8,sp
    f250:	|  |      move.l d0,-(sp)
    f252:	|  |      move.l d3,-(sp)
    f254:	|  |      jsr 17c3e <__subsf3>
    f25a:	|  |      addq.l #8,sp
    f25c:	|  |      move.l d0,-(sp)
    f25e:	|  |      move.l d2,-(sp)
    f260:	|  |      jsr 17ab6 <__gtsf2>
    f266:	|  |      addq.l #8,sp
    f268:	|  |      tst.l d0
    f26a:	|  +----- ble.s f2be <builtIn_aimCamera+0x1e4>
    f26c:	|  |      move.l 1cdfe <sceneWidth>,d0
    f272:	|  |      move.l d0,-(sp)
    f274:	|  |      jsr 17972 <__floatunsisf>
    f27a:	|  |      addq.l #4,sp
    f27c:	|  |      move.l d0,d2
    f27e:	|  |      move.l 1ccba <winWidth>,d0
    f284:	|  |      move.l d0,-(sp)
    f286:	|  |      jsr 17972 <__floatunsisf>
    f28c:	|  |      addq.l #4,sp
    f28e:	|  |      move.l d0,d1
    f290:	|  |      move.l 1c6f8 <cameraZoom>,d0
    f296:	|  |      move.l d0,-(sp)
    f298:	|  |      move.l d1,-(sp)
    f29a:	|  |      jsr 17800 <__divsf3>
    f2a0:	|  |      addq.l #8,sp
    f2a2:	|  |      move.l d0,-(sp)
    f2a4:	|  |      move.l d2,-(sp)
    f2a6:	|  |      jsr 17c3e <__subsf3>
    f2ac:	|  |      addq.l #8,sp
    f2ae:	|  |      move.l d0,-(sp)
    f2b0:	|  |      jsr 178e2 <__fixsfsi>
    f2b6:	|  |      addq.l #4,sp
    f2b8:	|  |      move.l d0,1ce1c <cameraX>
	if (cameraY < 0) cameraY = 0;
    f2be:	|  '----> move.l 1ce20 <cameraY>,d0
    f2c4:	|     ,-- bpl.s f2d0 <builtIn_aimCamera+0x1f6>
    f2c6:	|     |   clr.l 1ce20 <cameraY>
    f2cc:	|  ,--|-- bra.w f386 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    f2d0:	|  |  '-> move.l 1ce20 <cameraY>,d0
    f2d6:	|  |      move.l d0,-(sp)
    f2d8:	|  |      jsr 1794a <__floatsisf>
    f2de:	|  |      addq.l #4,sp
    f2e0:	|  |      move.l d0,d2
    f2e2:	|  |      move.l 1ce02 <sceneHeight>,d0
    f2e8:	|  |      move.l d0,-(sp)
    f2ea:	|  |      jsr 17972 <__floatunsisf>
    f2f0:	|  |      addq.l #4,sp
    f2f2:	|  |      move.l d0,d3
    f2f4:	|  |      move.l 1ccbe <winHeight>,d0
    f2fa:	|  |      move.l d0,-(sp)
    f2fc:	|  |      jsr 17972 <__floatunsisf>
    f302:	|  |      addq.l #4,sp
    f304:	|  |      move.l d0,d1
    f306:	|  |      move.l 1c6f8 <cameraZoom>,d0
    f30c:	|  |      move.l d0,-(sp)
    f30e:	|  |      move.l d1,-(sp)
    f310:	|  |      jsr 17800 <__divsf3>
    f316:	|  |      addq.l #8,sp
    f318:	|  |      move.l d0,-(sp)
    f31a:	|  |      move.l d3,-(sp)
    f31c:	|  |      jsr 17c3e <__subsf3>
    f322:	|  |      addq.l #8,sp
    f324:	|  |      move.l d0,-(sp)
    f326:	|  |      move.l d2,-(sp)
    f328:	|  |      jsr 17ab6 <__gtsf2>
    f32e:	|  |      addq.l #8,sp
    f330:	|  |      tst.l d0
    f332:	|  +----- ble.s f386 <builtIn_aimCamera+0x2ac>
    f334:	|  |      move.l 1ce02 <sceneHeight>,d0
    f33a:	|  |      move.l d0,-(sp)
    f33c:	|  |      jsr 17972 <__floatunsisf>
    f342:	|  |      addq.l #4,sp
    f344:	|  |      move.l d0,d2
    f346:	|  |      move.l 1ccbe <winHeight>,d0
    f34c:	|  |      move.l d0,-(sp)
    f34e:	|  |      jsr 17972 <__floatunsisf>
    f354:	|  |      addq.l #4,sp
    f356:	|  |      move.l d0,d1
    f358:	|  |      move.l 1c6f8 <cameraZoom>,d0
    f35e:	|  |      move.l d0,-(sp)
    f360:	|  |      move.l d1,-(sp)
    f362:	|  |      jsr 17800 <__divsf3>
    f368:	|  |      addq.l #8,sp
    f36a:	|  |      move.l d0,-(sp)
    f36c:	|  |      move.l d2,-(sp)
    f36e:	|  |      jsr 17c3e <__subsf3>
    f374:	|  |      addq.l #8,sp
    f376:	|  |      move.l d0,-(sp)
    f378:	|  |      jsr 178e2 <__fixsfsi>
    f37e:	|  |      addq.l #4,sp
    f380:	|  |      move.l d0,1ce20 <cameraY>
	return BR_CONTINUE;
    f386:	|  '----> moveq #2,d0
}
    f388:	'-------> move.l (sp)+,d2
    f38a:	          move.l (sp)+,d3
    f38c:	          rts

0000f38e <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    f38e:	       subq.l #4,sp
    f390:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    f392:	       movea.l 16(sp),a0
    f396:	       move.l 24(a0),d0
    f39a:	       move.l d0,-(sp)
    f39c:	       pea 1 <_start+0x1>
    f3a0:	       moveq #12,d0
    f3a2:	       add.l sp,d0
    f3a4:	       move.l d0,-(sp)
    f3a6:	       jsr 14a38 <getValueType>
    f3ac:	       lea 12(sp),sp
    f3b0:	       tst.w d0
    f3b2:	   ,-- bne.s f3ba <builtIn_zoomCamera+0x2c>
    f3b4:	   |   moveq #1,d0
    f3b6:	,--|-- bra.w f5b4 <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    f3ba:	|  '-> moveq #24,d0
    f3bc:	|      add.l 16(sp),d0
    f3c0:	|      move.l d0,-(sp)
    f3c2:	|      jsr 153bc <trimStack>
    f3c8:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    f3ca:	|      move.l 1cd22 <input+0xa>,d0
    f3d0:	|      move.l d0,-(sp)
    f3d2:	|      jsr 1794a <__floatsisf>
    f3d8:	|      addq.l #4,sp
    f3da:	|      move.l d0,d1
    f3dc:	|      move.l 1c6f8 <cameraZoom>,d0
    f3e2:	|      move.l d0,-(sp)
    f3e4:	|      move.l d1,-(sp)
    f3e6:	|      jsr 179fc <__mulsf3>
    f3ec:	|      addq.l #8,sp
    f3ee:	|      move.l d0,-(sp)
    f3f0:	|      jsr 178e2 <__fixsfsi>
    f3f6:	|      addq.l #4,sp
    f3f8:	|      move.l d0,1cd22 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    f3fe:	|      move.l 1cd26 <input+0xe>,d0
    f404:	|      move.l d0,-(sp)
    f406:	|      jsr 1794a <__floatsisf>
    f40c:	|      addq.l #4,sp
    f40e:	|      move.l d0,d1
    f410:	|      move.l 1c6f8 <cameraZoom>,d0
    f416:	|      move.l d0,-(sp)
    f418:	|      move.l d1,-(sp)
    f41a:	|      jsr 179fc <__mulsf3>
    f420:	|      addq.l #8,sp
    f422:	|      move.l d0,-(sp)
    f424:	|      jsr 178e2 <__fixsfsi>
    f42a:	|      addq.l #4,sp
    f42c:	|      move.l d0,1cd26 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    f432:	|      move.l 4(sp),d0
    f436:	|      move.l d0,-(sp)
    f438:	|      jsr 1794a <__floatsisf>
    f43e:	|      addq.l #4,sp
    f440:	|      move.l #1008981770,-(sp)
    f446:	|      move.l d0,-(sp)
    f448:	|      jsr 179fc <__mulsf3>
    f44e:	|      addq.l #8,sp
    f450:	|      move.l d0,1c6f8 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    f456:	|      move.l 1ccba <winWidth>,d0
    f45c:	|      move.l d0,-(sp)
    f45e:	|      jsr 17972 <__floatunsisf>
    f464:	|      addq.l #4,sp
    f466:	|      move.l d0,d1
    f468:	|      move.l 1c6f8 <cameraZoom>,d0
    f46e:	|      move.l d0,-(sp)
    f470:	|      move.l d1,-(sp)
    f472:	|      jsr 17800 <__divsf3>
    f478:	|      addq.l #8,sp
    f47a:	|      move.l d0,d2
    f47c:	|      move.l 1cdfe <sceneWidth>,d0
    f482:	|      move.l d0,-(sp)
    f484:	|      jsr 17972 <__floatunsisf>
    f48a:	|      addq.l #4,sp
    f48c:	|      move.l d0,-(sp)
    f48e:	|      move.l d2,-(sp)
    f490:	|      jsr 17ab6 <__gtsf2>
    f496:	|      addq.l #8,sp
    f498:	|      tst.l d0
    f49a:	|  ,-- ble.s f4d0 <builtIn_zoomCamera+0x142>
    f49c:	|  |   move.l 1ccba <winWidth>,d0
    f4a2:	|  |   move.l d0,-(sp)
    f4a4:	|  |   jsr 17972 <__floatunsisf>
    f4aa:	|  |   addq.l #4,sp
    f4ac:	|  |   move.l d0,d2
    f4ae:	|  |   move.l 1cdfe <sceneWidth>,d0
    f4b4:	|  |   move.l d0,-(sp)
    f4b6:	|  |   jsr 17972 <__floatunsisf>
    f4bc:	|  |   addq.l #4,sp
    f4be:	|  |   move.l d0,-(sp)
    f4c0:	|  |   move.l d2,-(sp)
    f4c2:	|  |   jsr 17800 <__divsf3>
    f4c8:	|  |   addq.l #8,sp
    f4ca:	|  |   move.l d0,1c6f8 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    f4d0:	|  '-> move.l 1ccbe <winHeight>,d0
    f4d6:	|      move.l d0,-(sp)
    f4d8:	|      jsr 17972 <__floatunsisf>
    f4de:	|      addq.l #4,sp
    f4e0:	|      move.l d0,d1
    f4e2:	|      move.l 1c6f8 <cameraZoom>,d0
    f4e8:	|      move.l d0,-(sp)
    f4ea:	|      move.l d1,-(sp)
    f4ec:	|      jsr 17800 <__divsf3>
    f4f2:	|      addq.l #8,sp
    f4f4:	|      move.l d0,d2
    f4f6:	|      move.l 1ce02 <sceneHeight>,d0
    f4fc:	|      move.l d0,-(sp)
    f4fe:	|      jsr 17972 <__floatunsisf>
    f504:	|      addq.l #4,sp
    f506:	|      move.l d0,-(sp)
    f508:	|      move.l d2,-(sp)
    f50a:	|      jsr 17ab6 <__gtsf2>
    f510:	|      addq.l #8,sp
    f512:	|      tst.l d0
    f514:	|  ,-- ble.s f54a <builtIn_zoomCamera+0x1bc>
    f516:	|  |   move.l 1ccbe <winHeight>,d0
    f51c:	|  |   move.l d0,-(sp)
    f51e:	|  |   jsr 17972 <__floatunsisf>
    f524:	|  |   addq.l #4,sp
    f526:	|  |   move.l d0,d2
    f528:	|  |   move.l 1ce02 <sceneHeight>,d0
    f52e:	|  |   move.l d0,-(sp)
    f530:	|  |   jsr 17972 <__floatunsisf>
    f536:	|  |   addq.l #4,sp
    f538:	|  |   move.l d0,-(sp)
    f53a:	|  |   move.l d2,-(sp)
    f53c:	|  |   jsr 17800 <__divsf3>
    f542:	|  |   addq.l #8,sp
    f544:	|  |   move.l d0,1c6f8 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    f54a:	|  '-> move.l 1cd22 <input+0xa>,d0
    f550:	|      move.l d0,-(sp)
    f552:	|      jsr 1794a <__floatsisf>
    f558:	|      addq.l #4,sp
    f55a:	|      move.l d0,d1
    f55c:	|      move.l 1c6f8 <cameraZoom>,d0
    f562:	|      move.l d0,-(sp)
    f564:	|      move.l d1,-(sp)
    f566:	|      jsr 17800 <__divsf3>
    f56c:	|      addq.l #8,sp
    f56e:	|      move.l d0,-(sp)
    f570:	|      jsr 178e2 <__fixsfsi>
    f576:	|      addq.l #4,sp
    f578:	|      move.l d0,1cd22 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    f57e:	|      move.l 1cd26 <input+0xe>,d0
    f584:	|      move.l d0,-(sp)
    f586:	|      jsr 1794a <__floatsisf>
    f58c:	|      addq.l #4,sp
    f58e:	|      move.l d0,d1
    f590:	|      move.l 1c6f8 <cameraZoom>,d0
    f596:	|      move.l d0,-(sp)
    f598:	|      move.l d1,-(sp)
    f59a:	|      jsr 17800 <__divsf3>
    f5a0:	|      addq.l #8,sp
    f5a2:	|      move.l d0,-(sp)
    f5a4:	|      jsr 178e2 <__fixsfsi>
    f5aa:	|      addq.l #4,sp
    f5ac:	|      move.l d0,1cd26 <input+0xe>

	return BR_CONTINUE;
    f5b2:	|      moveq #2,d0
}
    f5b4:	'----> move.l (sp)+,d2
    f5b6:	       addq.l #4,sp
    f5b8:	       rts

0000f5ba <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    f5ba:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    f5bc:	             tst.l 8(sp)
    f5c0:	         ,-- bne.s f5d4 <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    f5c2:	         |   pea 19c89 <PutChar+0x1ccf>
    f5c8:	         |   jsr 17518 <KPrintF>
    f5ce:	         |   addq.l #4,sp
		return BR_ERROR;
    f5d0:	         |   moveq #1,d0
    f5d2:	,--------|-- bra.s f634 <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    f5d4:	|        '-> jsr 160d8 <rand>
    f5da:	|            move.l d0,d1
    f5dc:	|            move.l 8(sp),d0
    f5e0:	|            move.l d0,-(sp)
    f5e2:	|            move.l d1,-(sp)
    f5e4:	|            jsr 17f7e <__umodsi3>
    f5ea:	|            addq.l #8,sp
    f5ec:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    f5ee:	|     ,----- bra.s f622 <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    f5f0:	|  ,--|----> move.l (sp),d0
    f5f2:	|  |  |      cmp.l 8(sp),d0
    f5f6:	|  |  |  ,-- bne.s f612 <builtIn_pickOne+0x58>
    f5f8:	|  |  |  |   moveq #28,d0
    f5fa:	|  |  |  |   add.l 12(sp),d0
    f5fe:	|  |  |  |   movea.l 12(sp),a0
    f602:	|  |  |  |   move.l 24(a0),d1
    f606:	|  |  |  |   move.l d0,-(sp)
    f608:	|  |  |  |   move.l d1,-(sp)
    f60a:	|  |  |  |   jsr 14ef2 <copyVariable>
    f610:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    f612:	|  |  |  '-> moveq #24,d0
    f614:	|  |  |      add.l 12(sp),d0
    f618:	|  |  |      move.l d0,-(sp)
    f61a:	|  |  |      jsr 153bc <trimStack>
    f620:	|  |  |      addq.l #4,sp
	while (numParams --) {
    f622:	|  |  '----> move.l 8(sp),d0
    f626:	|  |         move.l d0,d1
    f628:	|  |         subq.l #1,d1
    f62a:	|  |         move.l d1,8(sp)
    f62e:	|  |         tst.l d0
    f630:	|  '-------- bne.s f5f0 <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    f632:	|            moveq #2,d0
}
    f634:	'----------> addq.l #4,sp
    f636:	             rts

0000f638 <builtIn_substring>:

builtIn(substring)
{
    f638:	       lea -40(sp),sp
    f63c:	       move.l a6,-(sp)
    f63e:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f640:	       movea.l 56(sp),a0
    f644:	       move.l 24(a0),d0
    f648:	       move.l d0,-(sp)
    f64a:	       pea 1 <_start+0x1>
    f64e:	       lea 16(sp),a0
    f652:	       move.l a0,-(sp)
    f654:	       jsr 14a38 <getValueType>
    f65a:	       lea 12(sp),sp
    f65e:	       tst.w d0
    f660:	   ,-- bne.s f668 <builtIn_substring+0x30>
    f662:	   |   moveq #1,d0
    f664:	,--|-- bra.w f7e0 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f668:	|  '-> moveq #24,d0
    f66a:	|      add.l 56(sp),d0
    f66e:	|      move.l d0,-(sp)
    f670:	|      jsr 153bc <trimStack>
    f676:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f678:	|      movea.l 56(sp),a0
    f67c:	|      move.l 24(a0),d0
    f680:	|      move.l d0,-(sp)
    f682:	|      pea 1 <_start+0x1>
    f686:	|      lea 20(sp),a0
    f68a:	|      move.l a0,-(sp)
    f68c:	|      jsr 14a38 <getValueType>
    f692:	|      lea 12(sp),sp
    f696:	|      tst.w d0
    f698:	|  ,-- bne.s f6a0 <builtIn_substring+0x68>
    f69a:	|  |   moveq #1,d0
    f69c:	+--|-- bra.w f7e0 <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    f6a0:	|  '-> moveq #24,d0
    f6a2:	|      add.l 56(sp),d0
    f6a6:	|      move.l d0,-(sp)
    f6a8:	|      jsr 153bc <trimStack>
    f6ae:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    f6b0:	|      movea.l 56(sp),a0
    f6b4:	|      move.l 24(a0),d0
    f6b8:	|      move.l d0,-(sp)
    f6ba:	|      jsr 1500e <getTextFromAnyVar>
    f6c0:	|      addq.l #4,sp
    f6c2:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    f6c6:	|      moveq #24,d0
    f6c8:	|      add.l 56(sp),d0
    f6cc:	|      move.l d0,-(sp)
    f6ce:	|      jsr 153bc <trimStack>
    f6d4:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    f6d6:	|      move.l 44(sp),-(sp)
    f6da:	|      jsr 13f24 <strlen>
    f6e0:	|      addq.l #4,sp
    f6e2:	|      move.l d0,d1
    f6e4:	|      move.l 12(sp),d0
    f6e8:	|      movea.l d0,a0
    f6ea:	|      move.l 8(sp),d0
    f6ee:	|      add.l a0,d0
    f6f0:	|      cmp.l d1,d0
    f6f2:	|  ,-- bls.s f728 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    f6f4:	|  |   move.l 44(sp),-(sp)
    f6f8:	|  |   jsr 13f24 <strlen>
    f6fe:	|  |   addq.l #4,sp
    f700:	|  |   move.l d0,d1
    f702:	|  |   move.l 12(sp),d0
    f706:	|  |   sub.l d0,d1
    f708:	|  |   move.l d1,d0
    f70a:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    f70e:	|  |   move.l 44(sp),-(sp)
    f712:	|  |   jsr 13f24 <strlen>
    f718:	|  |   addq.l #4,sp
    f71a:	|  |   move.l d0,d1
    f71c:	|  |   move.l 12(sp),d0
    f720:	|  |   cmp.l d1,d0
    f722:	|  +-- bls.s f728 <builtIn_substring+0xf0>
            start = 0;
    f724:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    f728:	|  '-> move.l 8(sp),d0
    f72c:	|  ,-- bpl.s f732 <builtIn_substring+0xfa>
        length = 0;
    f72e:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    f732:	|  '-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    f738:	|      move.l 12(sp),d1
    f73c:	|      move.l 8(sp),d0
    f740:	|      move.l d1,d2
    f742:	|      add.l d0,d2
    f744:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    f748:	|      move.l 36(sp),d0
    f74c:	|      sub.l 40(sp),d0
    f750:	|      addq.l #1,d0
    f752:	|      move.l d0,32(sp)
    f756:	|      clr.l 28(sp)
    f75a:	|      move.l 1cd66 <SysBase>,d0
    f760:	|      movea.l d0,a6
    f762:	|      move.l 32(sp),d0
    f766:	|      move.l 28(sp),d1
    f76a:	|      jsr -684(a6)
    f76e:	|      move.l d0,24(sp)
    f772:	|      move.l 24(sp),d0
    f776:	|      move.l d0,20(sp)
    if (!newString) {
    f77a:	|  ,-- bne.s f780 <builtIn_substring+0x148>
        return BR_ERROR;
    f77c:	|  |   moveq #1,d0
    f77e:	+--|-- bra.s f7e0 <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    f780:	|  '-> move.l 36(sp),d0
    f784:	|      sub.l 40(sp),d0
    f788:	|      move.l d0,d1
    f78a:	|      move.l 40(sp),d0
    f78e:	|      add.l 44(sp),d0
    f792:	|      move.l d1,-(sp)
    f794:	|      move.l d0,-(sp)
    f796:	|      move.l 28(sp),-(sp)
    f79a:	|      jsr 174cc <memcpy>
    f7a0:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f7a4:	|      move.l 36(sp),d0
    f7a8:	|      sub.l 40(sp),d0
    f7ac:	|      movea.l 20(sp),a0
    f7b0:	|      adda.l d0,a0
    f7b2:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f7b4:	|      moveq #28,d0
    f7b6:	|      add.l 56(sp),d0
    f7ba:	|      move.l 20(sp),-(sp)
    f7be:	|      move.l d0,-(sp)
    f7c0:	|      jsr 14c5a <makeTextVar>
    f7c6:	|      addq.l #8,sp
    FreeVec(newString);
    f7c8:	|      move.l 20(sp),16(sp)
    f7ce:	|      move.l 1cd66 <SysBase>,d0
    f7d4:	|      movea.l d0,a6
    f7d6:	|      movea.l 16(sp),a1
    f7da:	|      jsr -690(a6)
    return BR_CONTINUE;
    f7de:	|      moveq #2,d0
}
    f7e0:	'----> move.l (sp)+,d2
    f7e2:	       movea.l (sp)+,a6
    f7e4:	       lea 40(sp),sp
    f7e8:	       rts

0000f7ea <builtIn_stringLength>:

builtIn(stringLength)
{
    f7ea:	subq.l #8,sp
    f7ec:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f7ee:	movea.l 20(sp),a0
    f7f2:	move.l 24(a0),d0
    f7f6:	move.l d0,-(sp)
    f7f8:	jsr 1500e <getTextFromAnyVar>
    f7fe:	addq.l #4,sp
    f800:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f804:	moveq #24,d0
    f806:	add.l 20(sp),d0
    f80a:	move.l d0,-(sp)
    f80c:	jsr 153bc <trimStack>
    f812:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f814:	move.l 8(sp),-(sp)
    f818:	jsr 13f24 <strlen>
    f81e:	addq.l #4,sp
    f820:	move.l d0,d1
    f822:	moveq #28,d0
    f824:	add.l 20(sp),d0
    f828:	move.l d1,-(sp)
    f82a:	pea 1 <_start+0x1>
    f82e:	move.l d0,-(sp)
    f830:	jsr 1532a <setVariable>
    f836:	lea 12(sp),sp
	FreeVec(newText);
    f83a:	move.l 8(sp),4(sp)
    f840:	move.l 1cd66 <SysBase>,d0
    f846:	movea.l d0,a6
    f848:	movea.l 4(sp),a1
    f84c:	jsr -690(a6)
	return BR_CONTINUE;
    f850:	moveq #2,d0
}
    f852:	movea.l (sp)+,a6
    f854:	addq.l #8,sp
    f856:	rts

0000f858 <builtIn_newStack>:

builtIn(newStack)
{
    f858:	             lea -12(sp),sp
    f85c:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f85e:	             moveq #28,d0
    f860:	             add.l 24(sp),d0
    f864:	             move.l d0,-(sp)
    f866:	             jsr 14c86 <unlinkVar>
    f86c:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f86e:	             movea.l 24(sp),a0
    f872:	             moveq #6,d0
    f874:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f878:	             moveq #12,d1
    f87a:	             move.l d1,12(sp)
    f87e:	             clr.l 8(sp)
    f882:	             move.l 1cd66 <SysBase>,d0
    f888:	             movea.l d0,a6
    f88a:	             move.l 12(sp),d0
    f88e:	             move.l 8(sp),d1
    f892:	             jsr -684(a6)
    f896:	             move.l d0,4(sp)
    f89a:	             move.l 4(sp),d0
    f89e:	             movea.l 24(sp),a0
    f8a2:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f8a6:	             movea.l 24(sp),a0
    f8aa:	             move.l 32(a0),d0
    f8ae:	         ,-- bne.s f8b6 <builtIn_newStack+0x5e>
    f8b0:	         |   moveq #1,d0
    f8b2:	,--------|-- bra.w f948 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f8b6:	|        '-> movea.l 24(sp),a0
    f8ba:	|            movea.l 32(a0),a0
    f8be:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f8c0:	|            movea.l 24(sp),a0
    f8c4:	|            movea.l 32(a0),a0
    f8c8:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f8cc:	|            movea.l 24(sp),a0
    f8d0:	|            movea.l 32(a0),a0
    f8d4:	|            moveq #1,d0
    f8d6:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f8da:	|     ,----- bra.s f936 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f8dc:	|  ,--|----> movea.l 24(sp),a0
    f8e0:	|  |  |      move.l 32(a0),d0
    f8e4:	|  |  |      move.l d0,d1
    f8e6:	|  |  |      movea.l 24(sp),a0
    f8ea:	|  |  |      move.l 24(a0),d0
    f8ee:	|  |  |      move.l d1,-(sp)
    f8f0:	|  |  |      move.l d0,-(sp)
    f8f2:	|  |  |      jsr 14274 <addVarToStack>
    f8f8:	|  |  |      addq.l #8,sp
    f8fa:	|  |  |      tst.w d0
    f8fc:	|  |  |  ,-- bne.s f902 <builtIn_newStack+0xaa>
    f8fe:	|  |  |  |   moveq #1,d0
    f900:	+--|--|--|-- bra.s f948 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f902:	|  |  |  '-> movea.l 24(sp),a0
    f906:	|  |  |      movea.l 32(a0),a0
    f90a:	|  |  |      move.l 4(a0),d0
    f90e:	|  |  |  ,-- bne.s f926 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f910:	|  |  |  |   movea.l 24(sp),a0
    f914:	|  |  |  |   movea.l 32(a0),a1
    f918:	|  |  |  |   movea.l 24(sp),a0
    f91c:	|  |  |  |   movea.l 32(a0),a0
    f920:	|  |  |  |   move.l (a1),d0
    f922:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f926:	|  |  |  '-> moveq #24,d0
    f928:	|  |  |      add.l 24(sp),d0
    f92c:	|  |  |      move.l d0,-(sp)
    f92e:	|  |  |      jsr 153bc <trimStack>
    f934:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f936:	|  |  '----> move.l 20(sp),d0
    f93a:	|  |         move.l d0,d1
    f93c:	|  |         subq.l #1,d1
    f93e:	|  |         move.l d1,20(sp)
    f942:	|  |         tst.l d0
    f944:	|  '-------- bne.s f8dc <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f946:	|            moveq #2,d0
}
    f948:	'----------> movea.l (sp)+,a6
    f94a:	             lea 12(sp),sp
    f94e:	             rts

0000f950 <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f950:	          movea.l 8(sp),a0
    f954:	          movea.l 24(a0),a0
    f958:	          move.l (a0),d0
    f95a:	          moveq #6,d1
    f95c:	          cmp.l d0,d1
    f95e:	      ,-- beq.s f97a <builtIn_stackSize+0x2a>
    f960:	      |   moveq #10,d1
    f962:	      |   cmp.l d0,d1
    f964:	   ,--|-- beq.s f9be <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f966:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f968:	   |  |   pea 19cbc <PutChar+0x1d02>
    f96e:	   |  |   jsr 17518 <KPrintF>
    f974:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f976:	   |  |   moveq #1,d0
    f978:	,--|--|-- bra.s f9f8 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f97a:	|  |  '-> movea.l 8(sp),a0
    f97e:	|  |      movea.l 24(a0),a0
    f982:	|  |      move.l 4(a0),d0
    f986:	|  |      move.l d0,-(sp)
    f988:	|  |      jsr 15398 <stackSize>
    f98e:	|  |      addq.l #4,sp
    f990:	|  |      move.l d0,d1
    f992:	|  |      moveq #28,d0
    f994:	|  |      add.l 8(sp),d0
    f998:	|  |      move.l d1,-(sp)
    f99a:	|  |      pea 1 <_start+0x1>
    f99e:	|  |      move.l d0,-(sp)
    f9a0:	|  |      jsr 1532a <setVariable>
    f9a6:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f9aa:	|  |      moveq #24,d0
    f9ac:	|  |      add.l 8(sp),d0
    f9b0:	|  |      move.l d0,-(sp)
    f9b2:	|  |      jsr 153bc <trimStack>
    f9b8:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f9ba:	|  |      moveq #2,d0
    f9bc:	+--|----- bra.s f9f8 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f9be:	|  '----> movea.l 8(sp),a0
    f9c2:	|         movea.l 24(a0),a0
    f9c6:	|         movea.l 4(a0),a0
    f9ca:	|         move.l 4(a0),d1
    f9ce:	|         moveq #28,d0
    f9d0:	|         add.l 8(sp),d0
    f9d4:	|         move.l d1,-(sp)
    f9d6:	|         pea 1 <_start+0x1>
    f9da:	|         move.l d0,-(sp)
    f9dc:	|         jsr 1532a <setVariable>
    f9e2:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f9e6:	|         moveq #24,d0
    f9e8:	|         add.l 8(sp),d0
    f9ec:	|         move.l d0,-(sp)
    f9ee:	|         jsr 153bc <trimStack>
    f9f4:	|         addq.l #4,sp
			return BR_CONTINUE;
    f9f6:	|         moveq #2,d0
}
    f9f8:	'-------> rts

0000f9fa <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f9fa:	       movea.l 8(sp),a0
    f9fe:	       movea.l 24(a0),a0
    fa02:	       move.l (a0),d0
    fa04:	       moveq #6,d1
    fa06:	       cmp.l d0,d1
    fa08:	   ,-- beq.s fa1c <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fa0a:	   |   pea 19ce5 <PutChar+0x1d2b>
    fa10:	   |   jsr 17518 <KPrintF>
    fa16:	   |   addq.l #4,sp
		return BR_ERROR;
    fa18:	   |   moveq #1,d0
    fa1a:	,--|-- bra.s fa50 <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    fa1c:	|  '-> moveq #28,d0
    fa1e:	|      add.l 8(sp),d0
    fa22:	|      movea.l 8(sp),a0
    fa26:	|      move.l 24(a0),d1
    fa2a:	|      move.l d0,-(sp)
    fa2c:	|      move.l d1,-(sp)
    fa2e:	|      jsr 1453e <copyStack>
    fa34:	|      addq.l #8,sp
    fa36:	|      tst.w d0
    fa38:	|  ,-- bne.s fa3e <builtIn_copyStack+0x44>
    fa3a:	|  |   moveq #1,d0
    fa3c:	+--|-- bra.s fa50 <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    fa3e:	|  '-> moveq #24,d0
    fa40:	|      add.l 8(sp),d0
    fa44:	|      move.l d0,-(sp)
    fa46:	|      jsr 153bc <trimStack>
    fa4c:	|      addq.l #4,sp
	return BR_CONTINUE;
    fa4e:	|      moveq #2,d0
}
    fa50:	'----> rts

0000fa52 <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fa52:	       movea.l 8(sp),a0
    fa56:	       movea.l 24(a0),a0
    fa5a:	       movea.l 8(a0),a0
    fa5e:	       move.l (a0),d0
    fa60:	       moveq #6,d1
    fa62:	       cmp.l d0,d1
    fa64:	   ,-- beq.s fa7a <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    fa66:	   |   pea 19cfe <PutChar+0x1d44>
    fa6c:	   |   jsr 17518 <KPrintF>
    fa72:	   |   addq.l #4,sp
		return BR_ERROR;
    fa74:	   |   moveq #1,d0
    fa76:	,--|-- bra.w fb08 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fa7a:	|  '-> movea.l 8(sp),a0
    fa7e:	|      movea.l 24(a0),a0
    fa82:	|      movea.l 8(a0),a0
    fa86:	|      move.l 4(a0),d0
    fa8a:	|      move.l d0,d1
    fa8c:	|      movea.l 8(sp),a0
    fa90:	|      move.l 24(a0),d0
    fa94:	|      move.l d1,-(sp)
    fa96:	|      move.l d0,-(sp)
    fa98:	|      jsr 14274 <addVarToStack>
    fa9e:	|      addq.l #8,sp
    faa0:	|      tst.w d0
    faa2:	|  ,-- bne.s faa8 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    faa4:	|  |   moveq #1,d0
    faa6:	+--|-- bra.s fb08 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    faa8:	|  '-> movea.l 8(sp),a0
    faac:	|      movea.l 24(a0),a0
    fab0:	|      movea.l 8(a0),a0
    fab4:	|      movea.l 4(a0),a0
    fab8:	|      movea.l (a0),a0
    faba:	|      move.l 8(a0),d0
    fabe:	|  ,-- bne.s fae6 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fac0:	|  |   movea.l 8(sp),a0
    fac4:	|  |   movea.l 24(a0),a0
    fac8:	|  |   movea.l 8(a0),a0
    facc:	|  |   movea.l 4(a0),a1
    fad0:	|  |   movea.l 8(sp),a0
    fad4:	|  |   movea.l 24(a0),a0
    fad8:	|  |   movea.l 8(a0),a0
    fadc:	|  |   movea.l 4(a0),a0
    fae0:	|  |   move.l (a1),d0
    fae2:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    fae6:	|  '-> moveq #24,d0
    fae8:	|      add.l 8(sp),d0
    faec:	|      move.l d0,-(sp)
    faee:	|      jsr 153bc <trimStack>
    faf4:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    faf6:	|      moveq #24,d0
    faf8:	|      add.l 8(sp),d0
    fafc:	|      move.l d0,-(sp)
    fafe:	|      jsr 153bc <trimStack>
    fb04:	|      addq.l #4,sp
	return BR_CONTINUE;
    fb06:	|      moveq #2,d0
}
    fb08:	'----> rts

0000fb0a <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fb0a:	             movea.l 8(sp),a0
    fb0e:	             movea.l 24(a0),a0
    fb12:	             movea.l 8(a0),a0
    fb16:	             move.l (a0),d0
    fb18:	             moveq #6,d1
    fb1a:	             cmp.l d0,d1
    fb1c:	         ,-- beq.s fb32 <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    fb1e:	         |   pea 19cfe <PutChar+0x1d44>
    fb24:	         |   jsr 17518 <KPrintF>
    fb2a:	         |   addq.l #4,sp
		return BR_ERROR;
    fb2c:	         |   moveq #1,d0
    fb2e:	,--------|-- bra.w fc20 <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    fb32:	|        '-> movea.l 8(sp),a0
    fb36:	|            movea.l 24(a0),a0
    fb3a:	|            movea.l 8(a0),a0
    fb3e:	|            movea.l 4(a0),a0
    fb42:	|            move.l (a0),d0
    fb44:	|     ,----- bne.s fb9e <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    fb46:	|     |      movea.l 8(sp),a0
    fb4a:	|     |      movea.l 24(a0),a0
    fb4e:	|     |      movea.l 8(a0),a0
    fb52:	|     |      move.l 4(a0),d0
    fb56:	|     |      move.l d0,d1
    fb58:	|     |      movea.l 8(sp),a0
    fb5c:	|     |      move.l 24(a0),d0
    fb60:	|     |      move.l d1,-(sp)
    fb62:	|     |      move.l d0,-(sp)
    fb64:	|     |      jsr 14274 <addVarToStack>
    fb6a:	|     |      addq.l #8,sp
    fb6c:	|     |      tst.w d0
    fb6e:	|     |  ,-- bne.s fb76 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    fb70:	|     |  |   moveq #1,d0
    fb72:	+-----|--|-- bra.w fc20 <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    fb76:	|     |  '-> movea.l 8(sp),a0
    fb7a:	|     |      movea.l 24(a0),a0
    fb7e:	|     |      movea.l 8(a0),a0
    fb82:	|     |      movea.l 4(a0),a1
    fb86:	|     |      movea.l 8(sp),a0
    fb8a:	|     |      movea.l 24(a0),a0
    fb8e:	|     |      movea.l 8(a0),a0
    fb92:	|     |      movea.l 4(a0),a0
    fb96:	|     |      move.l (a1),d0
    fb98:	|     |      move.l d0,4(a0)
    fb9c:	|  ,--|----- bra.s fbfe <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    fb9e:	|  |  '----> movea.l 8(sp),a0
    fba2:	|  |         movea.l 24(a0),a0
    fba6:	|  |         movea.l 8(a0),a0
    fbaa:	|  |         movea.l 4(a0),a0
    fbae:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    fbb2:	|  |         move.l d0,d1
    fbb4:	|  |         addq.l #8,d1
    fbb6:	|  |         movea.l 8(sp),a0
    fbba:	|  |         move.l 24(a0),d0
    fbbe:	|  |         move.l d1,-(sp)
    fbc0:	|  |         move.l d0,-(sp)
    fbc2:	|  |         jsr 14274 <addVarToStack>
    fbc8:	|  |         addq.l #8,sp
    fbca:	|  |         tst.w d0
    fbcc:	|  |     ,-- bne.s fbd2 <builtIn_enqueue+0xc8>
			return BR_ERROR;
    fbce:	|  |     |   moveq #1,d0
    fbd0:	+--|-----|-- bra.s fc20 <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    fbd2:	|  |     '-> movea.l 8(sp),a0
    fbd6:	|  |         movea.l 24(a0),a0
    fbda:	|  |         movea.l 8(a0),a0
    fbde:	|  |         movea.l 4(a0),a0
    fbe2:	|  |         movea.l 4(a0),a1
    fbe6:	|  |         movea.l 8(sp),a0
    fbea:	|  |         movea.l 24(a0),a0
    fbee:	|  |         movea.l 8(a0),a0
    fbf2:	|  |         movea.l 4(a0),a0
    fbf6:	|  |         move.l 8(a1),d0
    fbfa:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    fbfe:	|  '-------> moveq #24,d0
    fc00:	|            add.l 8(sp),d0
    fc04:	|            move.l d0,-(sp)
    fc06:	|            jsr 153bc <trimStack>
    fc0c:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    fc0e:	|            moveq #24,d0
    fc10:	|            add.l 8(sp),d0
    fc14:	|            move.l d0,-(sp)
    fc16:	|            jsr 153bc <trimStack>
    fc1c:	|            addq.l #4,sp
	return BR_CONTINUE;
    fc1e:	|            moveq #2,d0
}
    fc20:	'----------> rts

0000fc22 <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    fc22:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fc24:	       movea.l 12(sp),a0
    fc28:	       movea.l 24(a0),a0
    fc2c:	       movea.l 8(a0),a0
    fc30:	       move.l (a0),d0
    fc32:	       moveq #6,d1
    fc34:	       cmp.l d0,d1
    fc36:	   ,-- beq.s fc4c <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fc38:	   |   pea 19ce5 <PutChar+0x1d2b>
    fc3e:	   |   jsr 17518 <KPrintF>
    fc44:	   |   addq.l #4,sp
		return BR_ERROR;
    fc46:	   |   moveq #1,d0
    fc48:	,--|-- bra.w fce2 <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    fc4c:	|  '-> movea.l 12(sp),a0
    fc50:	|      movea.l 24(a0),a0
    fc54:	|      movea.l 8(a0),a0
    fc58:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fc5c:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fc5e:	|      movea.l 12(sp),a0
    fc62:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fc66:	|      clr.l -(sp)
    fc68:	|      move.l d1,-(sp)
    fc6a:	|      move.l d0,-(sp)
    fc6c:	|      jsr 14614 <deleteVarFromStack>
    fc72:	|      lea 12(sp),sp
    fc76:	|      move.l d0,d1
    fc78:	|      moveq #28,d0
    fc7a:	|      add.l 12(sp),d0
    fc7e:	|      move.l d1,-(sp)
    fc80:	|      pea 1 <_start+0x1>
    fc84:	|      move.l d0,-(sp)
    fc86:	|      jsr 1532a <setVariable>
    fc8c:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fc90:	|      movea.l 12(sp),a0
    fc94:	|      movea.l 24(a0),a0
    fc98:	|      movea.l 8(a0),a0
    fc9c:	|      movea.l 4(a0),a0
    fca0:	|      move.l (a0),d0
    fca2:	|      movea.l 12(sp),a0
    fca6:	|      movea.l 24(a0),a0
    fcaa:	|      movea.l 8(a0),a0
    fcae:	|      movea.l 4(a0),a2
    fcb2:	|      move.l d0,-(sp)
    fcb4:	|      jsr 15374 <stackFindLast>
    fcba:	|      addq.l #4,sp
    fcbc:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fcc0:	|      moveq #24,d0
    fcc2:	|      add.l 12(sp),d0
    fcc6:	|      move.l d0,-(sp)
    fcc8:	|      jsr 153bc <trimStack>
    fcce:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fcd0:	|      moveq #24,d0
    fcd2:	|      add.l 12(sp),d0
    fcd6:	|      move.l d0,-(sp)
    fcd8:	|      jsr 153bc <trimStack>
    fcde:	|      addq.l #4,sp
	return BR_CONTINUE;
    fce0:	|      moveq #2,d0
}
    fce2:	'----> movea.l (sp)+,a2
    fce4:	       rts

0000fce6 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    fce6:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    fce8:	       movea.l 12(sp),a0
    fcec:	       movea.l 24(a0),a0
    fcf0:	       movea.l 8(a0),a0
    fcf4:	       move.l (a0),d0
    fcf6:	       moveq #6,d1
    fcf8:	       cmp.l d0,d1
    fcfa:	   ,-- beq.s fd10 <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    fcfc:	   |   pea 19ce5 <PutChar+0x1d2b>
    fd02:	   |   jsr 17518 <KPrintF>
    fd08:	   |   addq.l #4,sp
		return BR_ERROR;
    fd0a:	   |   moveq #1,d0
    fd0c:	,--|-- bra.w fda8 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    fd10:	|  '-> movea.l 12(sp),a0
    fd14:	|      movea.l 24(a0),a0
    fd18:	|      movea.l 8(a0),a0
    fd1c:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fd20:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    fd22:	|      movea.l 12(sp),a0
    fd26:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    fd2a:	|      pea 1 <_start+0x1>
    fd2e:	|      move.l d1,-(sp)
    fd30:	|      move.l d0,-(sp)
    fd32:	|      jsr 14614 <deleteVarFromStack>
    fd38:	|      lea 12(sp),sp
    fd3c:	|      move.l d0,d1
    fd3e:	|      moveq #28,d0
    fd40:	|      add.l 12(sp),d0
    fd44:	|      move.l d1,-(sp)
    fd46:	|      pea 1 <_start+0x1>
    fd4a:	|      move.l d0,-(sp)
    fd4c:	|      jsr 1532a <setVariable>
    fd52:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    fd56:	|      movea.l 12(sp),a0
    fd5a:	|      movea.l 24(a0),a0
    fd5e:	|      movea.l 8(a0),a0
    fd62:	|      movea.l 4(a0),a0
    fd66:	|      move.l (a0),d0
    fd68:	|      movea.l 12(sp),a0
    fd6c:	|      movea.l 24(a0),a0
    fd70:	|      movea.l 8(a0),a0
    fd74:	|      movea.l 4(a0),a2
    fd78:	|      move.l d0,-(sp)
    fd7a:	|      jsr 15374 <stackFindLast>
    fd80:	|      addq.l #4,sp
    fd82:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    fd86:	|      moveq #24,d0
    fd88:	|      add.l 12(sp),d0
    fd8c:	|      move.l d0,-(sp)
    fd8e:	|      jsr 153bc <trimStack>
    fd94:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fd96:	|      moveq #24,d0
    fd98:	|      add.l 12(sp),d0
    fd9c:	|      move.l d0,-(sp)
    fd9e:	|      jsr 153bc <trimStack>
    fda4:	|      addq.l #4,sp
	return BR_CONTINUE;
    fda6:	|      moveq #2,d0
} 
    fda8:	'----> movea.l (sp)+,a2
    fdaa:	       rts

0000fdac <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fdac:	       movea.l 8(sp),a0
    fdb0:	       movea.l 24(a0),a0
    fdb4:	       move.l (a0),d0
    fdb6:	       moveq #6,d1
    fdb8:	       cmp.l d0,d1
    fdba:	   ,-- beq.s fdce <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    fdbc:	   |   pea 19ce5 <PutChar+0x1d2b>
    fdc2:	   |   jsr 17518 <KPrintF>
    fdc8:	   |   addq.l #4,sp
		return BR_ERROR;
    fdca:	   |   moveq #1,d0
    fdcc:	,--|-- bra.s fe38 <builtIn_popFromStack+0x8c>
	}	
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fdce:	|  '-> movea.l 8(sp),a0
    fdd2:	|      movea.l 24(a0),a0
    fdd6:	|      movea.l 4(a0),a0
    fdda:	|      move.l (a0),d0
    fddc:	|  ,-- bne.s fdf0 <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    fdde:	|  |   pea 19d16 <PutChar+0x1d5c>
    fde4:	|  |   jsr 17518 <KPrintF>
    fdea:	|  |   addq.l #4,sp
		return BR_ERROR;
    fdec:	|  |   moveq #1,d0
    fdee:	+--|-- bra.s fe38 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fdf0:	|  '-> moveq #28,d0
    fdf2:	|      add.l 8(sp),d0
    fdf6:	|      movea.l 8(sp),a0
    fdfa:	|      movea.l 24(a0),a0
    fdfe:	|      movea.l 4(a0),a0
    fe02:	|      move.l (a0),d1
    fe04:	|      move.l d0,-(sp)
    fe06:	|      move.l d1,-(sp)
    fe08:	|      jsr 14ef2 <copyVariable>
    fe0e:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    fe10:	|      movea.l 8(sp),a0
    fe14:	|      movea.l 24(a0),a0
    fe18:	|      move.l 4(a0),d0
    fe1c:	|      move.l d0,-(sp)
    fe1e:	|      jsr 153bc <trimStack>
    fe24:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    fe26:	|      moveq #24,d0
    fe28:	|      add.l 8(sp),d0
    fe2c:	|      move.l d0,-(sp)
    fe2e:	|      jsr 153bc <trimStack>
    fe34:	|      addq.l #4,sp
	return BR_CONTINUE;
    fe36:	|      moveq #2,d0
}
    fe38:	'----> rts

0000fe3a <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    fe3a:	       movea.l 8(sp),a0
    fe3e:	       movea.l 24(a0),a0
    fe42:	       move.l (a0),d0
    fe44:	       moveq #6,d1
    fe46:	       cmp.l d0,d1
    fe48:	   ,-- beq.s fe5c <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    fe4a:	   |   pea 19ce5 <PutChar+0x1d2b>
    fe50:	   |   jsr 17518 <KPrintF>
    fe56:	   |   addq.l #4,sp
		return BR_ERROR;
    fe58:	   |   moveq #1,d0
    fe5a:	,--|-- bra.s feb0 <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fe5c:	|  '-> movea.l 8(sp),a0
    fe60:	|      movea.l 24(a0),a0
    fe64:	|      movea.l 4(a0),a0
    fe68:	|      move.l (a0),d0
    fe6a:	|  ,-- bne.s fe7e <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    fe6c:	|  |   pea 19d16 <PutChar+0x1d5c>
    fe72:	|  |   jsr 17518 <KPrintF>
    fe78:	|  |   addq.l #4,sp
		return BR_ERROR;
    fe7a:	|  |   moveq #1,d0
    fe7c:	+--|-- bra.s feb0 <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    fe7e:	|  '-> moveq #28,d0
    fe80:	|      add.l 8(sp),d0
    fe84:	|      movea.l 8(sp),a0
    fe88:	|      movea.l 24(a0),a0
    fe8c:	|      movea.l 4(a0),a0
    fe90:	|      move.l (a0),d1
    fe92:	|      move.l d0,-(sp)
    fe94:	|      move.l d1,-(sp)
    fe96:	|      jsr 14ef2 <copyVariable>
    fe9c:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    fe9e:	|      moveq #24,d0
    fea0:	|      add.l 8(sp),d0
    fea4:	|      move.l d0,-(sp)
    fea6:	|      jsr 153bc <trimStack>
    feac:	|      addq.l #4,sp
	return BR_CONTINUE;
    feae:	|      moveq #2,d0
}
    feb0:	'----> rts

0000feb2 <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    feb2:	       movea.l 8(sp),a0
    feb6:	       movea.l 24(a0),a0
    feba:	       move.l (a0),d0
    febc:	       moveq #6,d1
    febe:	       cmp.l d0,d1
    fec0:	   ,-- beq.s fed4 <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    fec2:	   |   pea 19ce5 <PutChar+0x1d2b>
    fec8:	   |   jsr 17518 <KPrintF>
    fece:	   |   addq.l #4,sp
		return BR_ERROR;
    fed0:	   |   moveq #1,d0
    fed2:	,--|-- bra.s ff2a <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    fed4:	|  '-> movea.l 8(sp),a0
    fed8:	|      movea.l 24(a0),a0
    fedc:	|      movea.l 4(a0),a0
    fee0:	|      move.l (a0),d0
    fee2:	|  ,-- bne.s fef6 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    fee4:	|  |   pea 19d16 <PutChar+0x1d5c>
    feea:	|  |   jsr 17518 <KPrintF>
    fef0:	|  |   addq.l #4,sp
		return BR_ERROR;
    fef2:	|  |   moveq #1,d0
    fef4:	+--|-- bra.s ff2a <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    fef6:	|  '-> moveq #28,d0
    fef8:	|      add.l 8(sp),d0
    fefc:	|      movea.l 8(sp),a0
    ff00:	|      movea.l 24(a0),a0
    ff04:	|      movea.l 4(a0),a0
    ff08:	|      move.l 4(a0),d1
    ff0c:	|      move.l d0,-(sp)
    ff0e:	|      move.l d1,-(sp)
    ff10:	|      jsr 14ef2 <copyVariable>
    ff16:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    ff18:	|      moveq #24,d0
    ff1a:	|      add.l 8(sp),d0
    ff1e:	|      move.l d0,-(sp)
    ff20:	|      jsr 153bc <trimStack>
    ff26:	|      addq.l #4,sp
	return BR_CONTINUE;
    ff28:	|      moveq #2,d0
}
    ff2a:	'----> rts

0000ff2c <builtIn_random>:

builtIn(random)
{
    ff2c:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    ff2e:	       movea.l 12(sp),a0
    ff32:	       move.l 24(a0),d0
    ff36:	       move.l d0,-(sp)
    ff38:	       pea 1 <_start+0x1>
    ff3c:	       move.l sp,d0
    ff3e:	       addq.l #8,d0
    ff40:	       move.l d0,-(sp)
    ff42:	       jsr 14a38 <getValueType>
    ff48:	       lea 12(sp),sp
    ff4c:	       tst.w d0
    ff4e:	   ,-- bne.s ff54 <builtIn_random+0x28>
		return BR_ERROR;
    ff50:	   |   moveq #1,d0
    ff52:	,--|-- bra.s ff9e <builtIn_random+0x72>

	trimStack (&fun -> stack);
    ff54:	|  '-> moveq #24,d0
    ff56:	|      add.l 12(sp),d0
    ff5a:	|      move.l d0,-(sp)
    ff5c:	|      jsr 153bc <trimStack>
    ff62:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    ff64:	|      move.l (sp),d0
    ff66:	|  ,-- bgt.s ff6c <builtIn_random+0x40>
    ff68:	|  |   moveq #1,d0
    ff6a:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    ff6c:	|  '-> jsr 160d8 <rand>
    ff72:	|      move.l d0,d1
    ff74:	|      move.l (sp),d0
    ff76:	|      move.l d0,-(sp)
    ff78:	|      move.l d1,-(sp)
    ff7a:	|      jsr 17f7e <__umodsi3>
    ff80:	|      addq.l #8,sp
    ff82:	|      move.l d0,d1
    ff84:	|      moveq #28,d0
    ff86:	|      add.l 12(sp),d0
    ff8a:	|      move.l d1,-(sp)
    ff8c:	|      pea 1 <_start+0x1>
    ff90:	|      move.l d0,-(sp)
    ff92:	|      jsr 1532a <setVariable>
    ff98:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ff9c:	|      moveq #2,d0
}
    ff9e:	'----> addq.l #4,sp
    ffa0:	       rts

0000ffa2 <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    ffa2:	nop
    ffa4:	rts

0000ffa6 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    ffa6:	moveq #2,d0
}
    ffa8:	rts

0000ffaa <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    ffaa:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    ffac:	       movea.l 12(sp),a0
    ffb0:	       move.l 24(a0),d0
    ffb4:	       move.l d0,-(sp)
    ffb6:	       pea 1 <_start+0x1>
    ffba:	       move.l sp,d0
    ffbc:	       addq.l #8,d0
    ffbe:	       move.l d0,-(sp)
    ffc0:	       jsr 14a38 <getValueType>
    ffc6:	       lea 12(sp),sp
    ffca:	       tst.w d0
    ffcc:	   ,-- bne.s ffe0 <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    ffce:	   |   pea 19d29 <PutChar+0x1d6f>
    ffd4:	   |   jsr 17518 <KPrintF>
    ffda:	   |   addq.l #4,sp
		return BR_ERROR;
    ffdc:	   |   moveq #1,d0
    ffde:	,--|-- bra.s 10020 <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    ffe0:	|  '-> moveq #24,d0
    ffe2:	|      add.l 12(sp),d0
    ffe6:	|      move.l d0,-(sp)
    ffe8:	|      jsr 153bc <trimStack>
    ffee:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    fff0:	|      move.l (sp),d0
    fff2:	|      move.l d0,d0
    fff4:	|      move.w d0,1cc74 <textPaletteIndex>

	if( textPaletteIndex > 31) {
    fffa:	|      move.w 1cc74 <textPaletteIndex>,d0
   10000:	|      cmpi.w #31,d0
   10004:	|  ,-- bls.s 1001e <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
   10006:	|  |   pea 19d50 <PutChar+0x1d96>
   1000c:	|  |   jsr 17518 <KPrintF>
   10012:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
   10014:	|  |   clr.w 1cc74 <textPaletteIndex>
		return BR_ERROR;
   1001a:	|  |   moveq #1,d0
   1001c:	+--|-- bra.s 10020 <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
   1001e:	|  '-> moveq #2,d0
}
   10020:	'----> addq.l #4,sp
   10022:	       rts

00010024 <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10024:	moveq #2,d0
}
   10026:	rts

00010028 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
   10028:	moveq #2,d0
}
   1002a:	rts

0001002c <builtIn_setFont>:


builtIn(setFont)
{
   1002c:	       lea -16(sp),sp
   10030:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10032:	       movea.l 28(sp),a0
   10036:	       move.l 24(a0),d0
   1003a:	       move.l d0,-(sp)
   1003c:	       pea 1 <_start+0x1>
   10040:	       lea 12(sp),a0
   10044:	       move.l a0,-(sp)
   10046:	       jsr 14a38 <getValueType>
   1004c:	       lea 12(sp),sp
   10050:	       tst.w d0
   10052:	   ,-- bne.s 1005a <builtIn_setFont+0x2e>
   10054:	   |   moveq #1,d0
   10056:	,--|-- bra.w 10108 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
   1005a:	|  '-> moveq #24,d0
   1005c:	|      add.l 28(sp),d0
   10060:	|      move.l d0,-(sp)
   10062:	|      jsr 153bc <trimStack>
   10068:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   1006a:	|      movea.l 28(sp),a0
   1006e:	|      move.l 24(a0),d0
   10072:	|      move.l d0,-(sp)
   10074:	|      jsr 1500e <getTextFromAnyVar>
   1007a:	|      addq.l #4,sp
   1007c:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
   10080:	|  ,-- bne.s 10088 <builtIn_setFont+0x5c>
   10082:	|  |   moveq #1,d0
   10084:	+--|-- bra.w 10108 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
   10088:	|  '-> moveq #24,d0
   1008a:	|      add.l 28(sp),d0
   1008e:	|      move.l d0,-(sp)
   10090:	|      jsr 153bc <trimStack>
   10096:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10098:	|      movea.l 28(sp),a0
   1009c:	|      move.l 24(a0),d0
   100a0:	|      move.l d0,-(sp)
   100a2:	|      pea 5 <_start+0x5>
   100a6:	|      lea 16(sp),a0
   100aa:	|      move.l a0,-(sp)
   100ac:	|      jsr 14a38 <getValueType>
   100b2:	|      lea 12(sp),sp
   100b6:	|      tst.w d0
   100b8:	|  ,-- bne.s 100be <builtIn_setFont+0x92>
   100ba:	|  |   moveq #1,d0
   100bc:	+--|-- bra.s 10108 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
   100be:	|  '-> moveq #24,d0
   100c0:	|      add.l 28(sp),d0
   100c4:	|      move.l d0,-(sp)
   100c6:	|      jsr 153bc <trimStack>
   100cc:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
   100ce:	|      move.l 4(sp),d1
   100d2:	|      move.l 8(sp),d0
   100d6:	|      move.l d1,-(sp)
   100d8:	|      move.l 20(sp),-(sp)
   100dc:	|      move.l d0,-(sp)
   100de:	|      jsr 15870 <loadFont>
   100e4:	|      lea 12(sp),sp
   100e8:	|      tst.w d0
   100ea:	|  ,-- bne.s 100f0 <builtIn_setFont+0xc4>
   100ec:	|  |   moveq #1,d0
   100ee:	+--|-- bra.s 10108 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
   100f0:	|  '-> move.l 16(sp),12(sp)
   100f6:	|      move.l 1cd66 <SysBase>,d0
   100fc:	|      movea.l d0,a6
   100fe:	|      movea.l 12(sp),a1
   10102:	|      jsr -690(a6)

    return BR_CONTINUE;
   10106:	|      moveq #2,d0
}
   10108:	'----> movea.l (sp)+,a6
   1010a:	       lea 16(sp),sp
   1010e:	       rts

00010110 <builtIn_inFont>:

builtIn(inFont)
{
   10110:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
   10112:	       movea.l 12(sp),a0
   10116:	       move.l 24(a0),d0
   1011a:	       move.l d0,-(sp)
   1011c:	       jsr 1500e <getTextFromAnyVar>
   10122:	       addq.l #4,sp
   10124:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
   10126:	   ,-- bne.s 1012c <builtIn_inFont+0x1c>
   10128:	   |   moveq #1,d0
   1012a:	,--|-- bra.s 10162 <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
   1012c:	|  '-> moveq #24,d0
   1012e:	|      add.l 12(sp),d0
   10132:	|      move.l d0,-(sp)
   10134:	|      jsr 153bc <trimStack>
   1013a:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
   1013c:	|      move.l (sp),-(sp)
   1013e:	|      jsr 1585e <isInFont>
   10144:	|      addq.l #4,sp
   10146:	|      movea.w d0,a0
   10148:	|      moveq #28,d0
   1014a:	|      add.l 12(sp),d0
   1014e:	|      move.l a0,-(sp)
   10150:	|      pea 1 <_start+0x1>
   10154:	|      move.l d0,-(sp)
   10156:	|      jsr 1532a <setVariable>
   1015c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10160:	|      moveq #2,d0
}
   10162:	'----> addq.l #4,sp
   10164:	       rts

00010166 <builtIn_pasteString>:

builtIn(pasteString)
{
   10166:	       lea -16(sp),sp
   1016a:	       move.l a6,-(sp)
   1016c:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
   1016e:	       movea.l 32(sp),a0
   10172:	       move.l 24(a0),d0
   10176:	       move.l d0,-(sp)
   10178:	       jsr 1500e <getTextFromAnyVar>
   1017e:	       addq.l #4,sp
   10180:	       move.l d0,20(sp)
    trimStack(&fun->stack);
   10184:	       moveq #24,d0
   10186:	       add.l 32(sp),d0
   1018a:	       move.l d0,-(sp)
   1018c:	       jsr 153bc <trimStack>
   10192:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   10194:	       movea.l 32(sp),a0
   10198:	       move.l 24(a0),d0
   1019c:	       move.l d0,-(sp)
   1019e:	       pea 1 <_start+0x1>
   101a2:	       lea 20(sp),a0
   101a6:	       move.l a0,-(sp)
   101a8:	       jsr 14a38 <getValueType>
   101ae:	       lea 12(sp),sp
   101b2:	       tst.w d0
   101b4:	   ,-- bne.s 101bc <builtIn_pasteString+0x56>
   101b6:	   |   moveq #1,d0
   101b8:	,--|-- bra.w 1025e <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   101bc:	|  '-> moveq #24,d0
   101be:	|      add.l 32(sp),d0
   101c2:	|      move.l d0,-(sp)
   101c4:	|      jsr 153bc <trimStack>
   101ca:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
   101cc:	|      movea.l 32(sp),a0
   101d0:	|      move.l 24(a0),d0
   101d4:	|      move.l d0,-(sp)
   101d6:	|      pea 1 <_start+0x1>
   101da:	|      lea 16(sp),a0
   101de:	|      move.l a0,-(sp)
   101e0:	|      jsr 14a38 <getValueType>
   101e6:	|      lea 12(sp),sp
   101ea:	|      tst.w d0
   101ec:	|  ,-- bne.s 101f2 <builtIn_pasteString+0x8c>
   101ee:	|  |   moveq #1,d0
   101f0:	+--|-- bra.s 1025e <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
   101f2:	|  '-> moveq #24,d0
   101f4:	|      add.l 32(sp),d0
   101f8:	|      move.l d0,-(sp)
   101fa:	|      jsr 153bc <trimStack>
   10200:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) 
   10202:	|      move.l 8(sp),d0
   10206:	|      cmpi.l #65535,d0
   1020c:	|  ,-- bne.s 1022c <builtIn_pasteString+0xc6>
		x = (winWidth - stringWidth(newText)) >> 1;
   1020e:	|  |   move.l 1ccba <winWidth>,d2
   10214:	|  |   move.l 20(sp),-(sp)
   10218:	|  |   jsr 15b22 <stringWidth>
   1021e:	|  |   addq.l #4,sp
   10220:	|  |   move.l d2,d1
   10222:	|  |   sub.l d0,d1
   10224:	|  |   move.l d1,d0
   10226:	|  |   lsr.l #1,d0
   10228:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
   1022c:	|  '-> move.l 12(sp),d1
   10230:	|      move.l 8(sp),d0
   10234:	|      move.l d1,-(sp)
   10236:	|      move.l d0,-(sp)
   10238:	|      move.l 28(sp),-(sp)
   1023c:	|      jsr 15a44 <pasteStringToBackdrop>
   10242:	|      lea 12(sp),sp
    FreeVec(newText); 
   10246:	|      move.l 20(sp),16(sp)
   1024c:	|      move.l 1cd66 <SysBase>,d0
   10252:	|      movea.l d0,a6
   10254:	|      movea.l 16(sp),a1
   10258:	|      jsr -690(a6)
    return BR_CONTINUE;
   1025c:	|      moveq #2,d0
}
   1025e:	'----> move.l (sp)+,d2
   10260:	       movea.l (sp)+,a6
   10262:	       lea 16(sp),sp
   10266:	       rts

00010268 <builtIn_anim>:

builtIn(anim)
{
   10268:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
   1026c:	       moveq #1,d0
   1026e:	       cmp.l 16(sp),d0
   10272:	   ,-- blt.s 10288 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
   10274:	   |   pea 19d7a <PutChar+0x1dc0>
   1027a:	   |   jsr 17518 <KPrintF>
   10280:	   |   addq.l #4,sp
		return BR_ERROR;
   10282:	   |   moveq #1,d0
   10284:	,--|-- bra.w 10316 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
   10288:	|  '-> moveq #24,d1
   1028a:	|      add.l 20(sp),d1
   1028e:	|      move.l 16(sp),d0
   10292:	|      subq.l #1,d0
   10294:	|      move.l d1,-(sp)
   10296:	|      move.l d0,-(sp)
   10298:	|      jsr 989a <createPersonaAnim>
   1029e:	|      addq.l #8,sp
   102a0:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   102a4:	|      movea.l 20(sp),a0
   102a8:	|      move.l 24(a0),d0
   102ac:	|      move.l d0,-(sp)
   102ae:	|      pea 5 <_start+0x5>
   102b2:	|      lea 8(sp),a0
   102b6:	|      move.l a0,-(sp)
   102b8:	|      jsr 14a38 <getValueType>
   102be:	|      lea 12(sp),sp
   102c2:	|      tst.w d0
   102c4:	|  ,-- bne.s 102ca <builtIn_anim+0x62>
   102c6:	|  |   moveq #1,d0
   102c8:	+--|-- bra.s 10316 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
   102ca:	|  '-> moveq #24,d0
   102cc:	|      add.l 20(sp),d0
   102d0:	|      move.l d0,-(sp)
   102d2:	|      jsr 153bc <trimStack>
   102d8:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
   102da:	|      move.l (sp),d0
   102dc:	|      move.l d0,-(sp)
   102de:	|      jsr 1623a <loadBankForAnim>
   102e4:	|      addq.l #4,sp
   102e6:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
   102ea:	|  ,-- bne.s 102f0 <builtIn_anim+0x88>
   102ec:	|  |   moveq #1,d0
   102ee:	+--|-- bra.s 10316 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
   102f0:	|  '-> move.l 4(sp),-(sp)
   102f4:	|      move.l 12(sp),-(sp)
   102f8:	|      jsr b7a6 <setBankFile>
   102fe:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
   10300:	|      moveq #28,d0
   10302:	|      add.l 20(sp),d0
   10306:	|      move.l 8(sp),-(sp)
   1030a:	|      move.l d0,-(sp)
   1030c:	|      jsr 152e6 <newAnimationVariable>
   10312:	|      addq.l #8,sp
	return BR_CONTINUE;
   10314:	|      moveq #2,d0
}
   10316:	'----> lea 12(sp),sp
   1031a:	       rts

0001031c <builtIn_costume>:

builtIn(costume)
{
   1031c:	          lea -32(sp),sp
   10320:	          move.l a6,-(sp)
   10322:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
   10324:	          moveq #8,d0
   10326:	          move.l d0,32(sp)
   1032a:	          clr.l 28(sp)
   1032e:	          move.l 1cd66 <SysBase>,d0
   10334:	          movea.l d0,a6
   10336:	          move.l 32(sp),d0
   1033a:	          move.l 28(sp),d1
   1033e:	          jsr -684(a6)
   10342:	          move.l d0,24(sp)
   10346:	          move.l 24(sp),d0
   1034a:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
   1034e:	      ,-- bne.s 10356 <builtIn_costume+0x3a>
   10350:	      |   moveq #1,d0
   10352:	,-----|-- bra.w 1043e <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
   10356:	|     '-> move.l 44(sp),d0
   1035a:	|         pea 3 <_start+0x3>
   1035e:	|         move.l d0,-(sp)
   10360:	|         jsr 17f22 <__divsi3>
   10366:	|         addq.l #8,sp
   10368:	|         movea.l 20(sp),a0
   1036c:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
   10370:	|         tst.l 44(sp)
   10374:	|     ,-- beq.s 1038a <builtIn_costume+0x6e>
   10376:	|     |   movea.l 20(sp),a0
   1037a:	|     |   move.l 4(a0),d1
   1037e:	|     |   move.l d1,d0
   10380:	|     |   add.l d0,d0
   10382:	|     |   add.l d1,d0
   10384:	|     |   cmp.l 44(sp),d0
   10388:	|  ,--|-- beq.s 1039e <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
   1038a:	|  |  '-> pea 19db4 <PutChar+0x1dfa>
   10390:	|  |      jsr 17518 <KPrintF>
   10396:	|  |      addq.l #4,sp
        return BR_ERROR;
   10398:	|  |      moveq #1,d0
   1039a:	+--|----- bra.w 1043e <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
   1039e:	|  '----> move.l 44(sp),d0
   103a2:	|         add.l d0,d0
   103a4:	|         add.l d0,d0
   103a6:	|         move.l d0,16(sp)
   103aa:	|         clr.l 12(sp)
   103ae:	|         move.l 1cd66 <SysBase>,d0
   103b4:	|         movea.l d0,a6
   103b6:	|         move.l 16(sp),d0
   103ba:	|         move.l 12(sp),d1
   103be:	|         jsr -684(a6)
   103c2:	|         move.l d0,8(sp)
   103c6:	|         move.l 8(sp),d0
   103ca:	|         movea.l 20(sp),a0
   103ce:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
   103d0:	|         movea.l 20(sp),a0
   103d4:	|         move.l (a0),d0
   103d6:	|     ,-- bne.s 103dc <builtIn_costume+0xc0>
   103d8:	|     |   moveq #1,d0
   103da:	+-----|-- bra.s 1043e <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
   103dc:	|     '-> move.l 44(sp),d0
   103e0:	|         subq.l #1,d0
   103e2:	|         move.l d0,36(sp)
   103e6:	|     ,-- bra.s 10422 <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
   103e8:	|  ,--|-> movea.l 48(sp),a0
   103ec:	|  |  |   move.l 24(a0),d0
   103f0:	|  |  |   movea.l 20(sp),a0
   103f4:	|  |  |   movea.l (a0),a0
   103f6:	|  |  |   move.l 36(sp),d1
   103fa:	|  |  |   add.l d1,d1
   103fc:	|  |  |   add.l d1,d1
   103fe:	|  |  |   lea (0,a0,d1.l),a2
   10402:	|  |  |   move.l d0,-(sp)
   10404:	|  |  |   jsr 14f10 <getAnimationFromVar>
   1040a:	|  |  |   addq.l #4,sp
   1040c:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
   1040e:	|  |  |   moveq #24,d0
   10410:	|  |  |   add.l 48(sp),d0
   10414:	|  |  |   move.l d0,-(sp)
   10416:	|  |  |   jsr 153bc <trimStack>
   1041c:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
   1041e:	|  |  |   subq.l #1,36(sp)
   10422:	|  |  '-> tst.l 36(sp)
   10426:	|  '----- bge.s 103e8 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
   10428:	|         moveq #28,d0
   1042a:	|         add.l 48(sp),d0
   1042e:	|         move.l 20(sp),-(sp)
   10432:	|         move.l d0,-(sp)
   10434:	|         jsr 15308 <newCostumeVariable>
   1043a:	|         addq.l #8,sp
    return BR_CONTINUE;
   1043c:	|         moveq #2,d0
}
   1043e:	'-------> movea.l (sp)+,a2
   10440:	          movea.l (sp)+,a6
   10442:	          lea 32(sp),sp
   10446:	          rts

00010448 <builtIn_launch>:

builtIn(launch)
{
   10448:	          lea -20(sp),sp
   1044c:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   1044e:	          movea.l 32(sp),a0
   10452:	          move.l 24(a0),d0
   10456:	          move.l d0,-(sp)
   10458:	          jsr 1500e <getTextFromAnyVar>
   1045e:	          addq.l #4,sp
   10460:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
   10464:	      ,-- bne.s 1046c <builtIn_launch+0x24>
   10466:	      |   moveq #1,d0
   10468:	,-----|-- bra.w 1059a <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
   1046c:	|     '-> move.l 20(sp),-(sp)
   10470:	|         jsr 2fe <encodeFilename>
   10476:	|         addq.l #4,sp
   10478:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
   1047c:	|         moveq #24,d0
   1047e:	|         add.l 32(sp),d0
   10482:	|         move.l d0,-(sp)
   10484:	|         jsr 153bc <trimStack>
   1048a:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
   1048c:	|         movea.l 20(sp),a0
   10490:	|         move.b (a0),d0
   10492:	|         cmpi.b #104,d0
   10496:	|  ,----- bne.s 10500 <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
   10498:	|  |      movea.l 20(sp),a0
   1049c:	|  |      addq.l #1,a0
   1049e:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
   104a0:	|  |      cmpi.b #116,d0
   104a4:	|  +----- bne.s 10500 <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
   104a6:	|  |      movea.l 20(sp),a0
   104aa:	|  |      addq.l #2,a0
   104ac:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
   104ae:	|  |      cmpi.b #116,d0
   104b2:	|  +----- bne.s 10500 <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
   104b4:	|  |      movea.l 20(sp),a0
   104b8:	|  |      addq.l #3,a0
   104ba:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
   104bc:	|  |      cmpi.b #112,d0
   104c0:	|  +----- bne.s 10500 <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   104c2:	|  |      movea.l 20(sp),a0
   104c6:	|  |      addq.l #4,a0
   104c8:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
   104ca:	|  |      cmpi.b #58,d0
   104ce:	|  |  ,-- beq.s 104ec <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
   104d0:	|  |  |   movea.l 20(sp),a0
   104d4:	|  |  |   addq.l #4,a0
   104d6:	|  |  |   move.b (a0),d0
   104d8:	|  |  |   cmpi.b #115,d0
   104dc:	|  +--|-- bne.s 10500 <builtIn_launch+0xb8>
   104de:	|  |  |   movea.l 20(sp),a0
   104e2:	|  |  |   addq.l #5,a0
   104e4:	|  |  |   move.b (a0),d0
   104e6:	|  |  |   cmpi.b #58,d0
   104ea:	|  +--|-- bne.s 10500 <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
   104ec:	|  |  '-> move.l 20(sp),-(sp)
   104f0:	|  |      jsr b8 <copyString>
   104f6:	|  |      addq.l #4,sp
   104f8:	|  |      move.l d0,1ce24 <launchMe>
   104fe:	|  |  ,-- bra.s 10552 <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
   10500:	|  '--|-> move.l 1ccce <gamePath>,d0
   10506:	|     |   pea 19dff <PutChar+0x1e45>
   1050c:	|     |   move.l d0,-(sp)
   1050e:	|     |   jsr 13f64 <joinStrings>
   10514:	|     |   addq.l #8,sp
   10516:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
   1051a:	|     |   move.l 16(sp),-(sp)
   1051e:	|     |   move.l 16(sp),-(sp)
   10522:	|     |   jsr 13f64 <joinStrings>
   10528:	|     |   addq.l #8,sp
   1052a:	|     |   move.l d0,1ce24 <launchMe>
        FreeVec(newText);
   10530:	|     |   move.l 16(sp),8(sp)
   10536:	|     |   move.l 1cd66 <SysBase>,d0
   1053c:	|     |   movea.l d0,a6
   1053e:	|     |   movea.l 8(sp),a1
   10542:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
   10546:	|     |   move.l 1ce24 <launchMe>,d0
   1054c:	|     +-- bne.s 10552 <builtIn_launch+0x10a>
   1054e:	|     |   moveq #1,d0
   10550:	+-----|-- bra.s 1059a <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
   10552:	|     '-> move.l 20(sp),4(sp)
   10558:	|         move.l 1cd66 <SysBase>,d0
   1055e:	|         movea.l d0,a6
   10560:	|         movea.l 4(sp),a1
   10564:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
   10568:	|         clr.l -(sp)
   1056a:	|         jsr 4b9e <setGraphicsWindow>
   10570:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
   10572:	|         moveq #28,d0
   10574:	|         add.l 32(sp),d0
   10578:	|         pea 1 <_start+0x1>
   1057c:	|         pea 1 <_start+0x1>
   10580:	|         move.l d0,-(sp)
   10582:	|         jsr 1532a <setVariable>
   10588:	|         lea 12(sp),sp
    launchResult = &fun->reg;
   1058c:	|         moveq #28,d0
   1058e:	|         add.l 32(sp),d0
   10592:	|         move.l d0,1ce28 <launchResult>

    return BR_KEEP_AND_PAUSE;
   10598:	|         moveq #0,d0
}
   1059a:	'-------> movea.l (sp)+,a6
   1059c:	          lea 20(sp),sp
   105a0:	          rts

000105a2 <builtIn_pause>:

builtIn(pause)
{
   105a2:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   105a4:	       movea.l 12(sp),a0
   105a8:	       move.l 24(a0),d0
   105ac:	       move.l d0,-(sp)
   105ae:	       pea 1 <_start+0x1>
   105b2:	       move.l sp,d0
   105b4:	       addq.l #8,d0
   105b6:	       move.l d0,-(sp)
   105b8:	       jsr 14a38 <getValueType>
   105be:	       lea 12(sp),sp
   105c2:	       tst.w d0
   105c4:	   ,-- bne.s 105ca <builtIn_pause+0x28>
   105c6:	   |   moveq #1,d0
   105c8:	,--|-- bra.s 105f8 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
   105ca:	|  '-> moveq #24,d0
   105cc:	|      add.l 12(sp),d0
   105d0:	|      move.l d0,-(sp)
   105d2:	|      jsr 153bc <trimStack>
   105d8:	|      addq.l #4,sp
	if (theTime > 0) {
   105da:	|      move.l (sp),d0
   105dc:	|  ,-- ble.s 105f6 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
   105de:	|  |   move.l (sp),d0
   105e0:	|  |   subq.l #1,d0
   105e2:	|  |   movea.l 12(sp),a0
   105e6:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
   105ea:	|  |   movea.l 12(sp),a0
   105ee:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
   105f2:	|  |   moveq #0,d0
   105f4:	+--|-- bra.s 105f8 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
   105f6:	|  '-> moveq #2,d0
}
   105f8:	'----> addq.l #4,sp
   105fa:	       rts

000105fc <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
   105fc:	jsr 5332 <completeTimers>
	return BR_CONTINUE;
   10602:	moveq #2,d0
}
   10604:	rts

00010606 <builtIn_callEvent>:

builtIn(callEvent)
{
   10606:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1060a:	       movea.l 20(sp),a0
   1060e:	       move.l 24(a0),d0
   10612:	       move.l d0,-(sp)
   10614:	       pea 7 <_start+0x7>
   10618:	       lea 8(sp),a0
   1061c:	       move.l a0,-(sp)
   1061e:	       jsr 14a38 <getValueType>
   10624:	       lea 12(sp),sp
   10628:	       tst.w d0
   1062a:	   ,-- bne.s 10632 <builtIn_callEvent+0x2c>
   1062c:	   |   moveq #1,d0
   1062e:	,--|-- bra.w 106c8 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10632:	|  '-> moveq #24,d0
   10634:	|      add.l 20(sp),d0
   10638:	|      move.l d0,-(sp)
   1063a:	|      jsr 153bc <trimStack>
   10640:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10642:	|      movea.l 20(sp),a0
   10646:	|      move.l 24(a0),d0
   1064a:	|      move.l d0,-(sp)
   1064c:	|      pea 7 <_start+0x7>
   10650:	|      moveq #12,d0
   10652:	|      add.l sp,d0
   10654:	|      move.l d0,-(sp)
   10656:	|      jsr 14a38 <getValueType>
   1065c:	|      lea 12(sp),sp
   10660:	|      tst.w d0
   10662:	|  ,-- bne.s 10668 <builtIn_callEvent+0x62>
   10664:	|  |   moveq #1,d0
   10666:	+--|-- bra.s 106c8 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
   10668:	|  '-> moveq #24,d0
   1066a:	|      add.l 20(sp),d0
   1066e:	|      move.l d0,-(sp)
   10670:	|      jsr 153bc <trimStack>
   10676:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   10678:	|      move.l (sp),d1
   1067a:	|      move.l 4(sp),d0
   1067e:	|      move.l d1,-(sp)
   10680:	|      move.l d0,-(sp)
   10682:	|      jsr d780 <getCombinationFunction>
   10688:	|      addq.l #8,sp
   1068a:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
   1068e:	|  ,-- beq.s 106ae <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   10690:	|  |   moveq #28,d0
   10692:	|  |   add.l 20(sp),d0
   10696:	|  |   move.l 8(sp),-(sp)
   1069a:	|  |   pea 2 <_start+0x2>
   1069e:	|  |   move.l d0,-(sp)
   106a0:	|  |   jsr 1532a <setVariable>
   106a6:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
   106aa:	|  |   moveq #4,d0
   106ac:	+--|-- bra.s 106c8 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
   106ae:	|  '-> moveq #28,d0
   106b0:	|      add.l 20(sp),d0
   106b4:	|      clr.l -(sp)
   106b6:	|      pea 1 <_start+0x1>
   106ba:	|      move.l d0,-(sp)
   106bc:	|      jsr 1532a <setVariable>
   106c2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   106c6:	|      moveq #2,d0
}
   106c8:	'----> lea 12(sp),sp
   106cc:	       rts

000106ce <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
   106ce:	move.w #1,1ce34 <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
   106d6:	moveq #2,d0
}
   106d8:	rts

000106da <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   106da:	moveq #24,d0
   106dc:	add.l 8(sp),d0
   106e0:	move.l d0,-(sp)
   106e2:	jsr 153bc <trimStack>
   106e8:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
   106ea:	pea 19e01 <PutChar+0x1e47>
   106f0:	jsr 17518 <KPrintF>
   106f6:	addq.l #4,sp
	return BR_CONTINUE;
   106f8:	moveq #2,d0
}
   106fa:	rts

000106fc <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
   106fc:	pea 19e01 <PutChar+0x1e47>
   10702:	jsr 17518 <KPrintF>
   10708:	addq.l #4,sp
	return BR_CONTINUE;
   1070a:	moveq #2,d0
}
   1070c:	rts

0001070e <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
   1070e:	pea 19e01 <PutChar+0x1e47>
   10714:	jsr 17518 <KPrintF>
   1071a:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
   1071c:	moveq #2,d0
}
   1071e:	rts

00010720 <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
   10720:	pea 19e01 <PutChar+0x1e47>
   10726:	jsr 17518 <KPrintF>
   1072c:	addq.l #4,sp
	return BR_CONTINUE;
   1072e:	moveq #2,d0
}
   10730:	rts

00010732 <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10732:	pea 19e01 <PutChar+0x1e47>
   10738:	jsr 17518 <KPrintF>
   1073e:	addq.l #4,sp
	return BR_CONTINUE;
   10740:	moveq #2,d0
}
   10742:	rts

00010744 <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
   10744:	pea 19e01 <PutChar+0x1e47>
   1074a:	jsr 17518 <KPrintF>
   10750:	addq.l #4,sp
	return BR_CONTINUE;
   10752:	moveq #2,d0
}
   10754:	rts

00010756 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
   10756:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1075a:	       movea.l 20(sp),a0
   1075e:	       move.l 24(a0),d0
   10762:	       move.l d0,-(sp)
   10764:	       pea 1 <_start+0x1>
   10768:	       moveq #16,d0
   1076a:	       add.l sp,d0
   1076c:	       move.l d0,-(sp)
   1076e:	       jsr 14a38 <getValueType>
   10774:	       lea 12(sp),sp
   10778:	       tst.w d0
   1077a:	   ,-- bne.s 10782 <builtIn_startMusic+0x2c>
   1077c:	   |   moveq #1,d0
   1077e:	,--|-- bra.w 10822 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10782:	|  '-> moveq #24,d0
   10784:	|      add.l 20(sp),d0
   10788:	|      move.l d0,-(sp)
   1078a:	|      jsr 153bc <trimStack>
   10790:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10792:	|      movea.l 20(sp),a0
   10796:	|      move.l 24(a0),d0
   1079a:	|      move.l d0,-(sp)
   1079c:	|      pea 1 <_start+0x1>
   107a0:	|      moveq #12,d0
   107a2:	|      add.l sp,d0
   107a4:	|      move.l d0,-(sp)
   107a6:	|      jsr 14a38 <getValueType>
   107ac:	|      lea 12(sp),sp
   107b0:	|      tst.w d0
   107b2:	|  ,-- bne.s 107b8 <builtIn_startMusic+0x62>
   107b4:	|  |   moveq #1,d0
   107b6:	+--|-- bra.s 10822 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   107b8:	|  '-> moveq #24,d0
   107ba:	|      add.l 20(sp),d0
   107be:	|      move.l d0,-(sp)
   107c0:	|      jsr 153bc <trimStack>
   107c6:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   107c8:	|      movea.l 20(sp),a0
   107cc:	|      move.l 24(a0),d0
   107d0:	|      move.l d0,-(sp)
   107d2:	|      pea 5 <_start+0x5>
   107d6:	|      lea 8(sp),a0
   107da:	|      move.l a0,-(sp)
   107dc:	|      jsr 14a38 <getValueType>
   107e2:	|      lea 12(sp),sp
   107e6:	|      tst.w d0
   107e8:	|  ,-- bne.s 107ee <builtIn_startMusic+0x98>
   107ea:	|  |   moveq #1,d0
   107ec:	+--|-- bra.s 10822 <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   107ee:	|  '-> moveq #24,d0
   107f0:	|      add.l 20(sp),d0
   107f4:	|      move.l d0,-(sp)
   107f6:	|      jsr 153bc <trimStack>
   107fc:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   107fe:	|      movea.l 8(sp),a0
   10802:	|      move.l 4(sp),d1
   10806:	|      move.l (sp),d0
   10808:	|      move.l a0,-(sp)
   1080a:	|      move.l d1,-(sp)
   1080c:	|      move.l d0,-(sp)
   1080e:	|      jsr d382 <playMOD>
   10814:	|      lea 12(sp),sp
   10818:	|      tst.w d0
   1081a:	|  ,-- bne.s 10820 <builtIn_startMusic+0xca>
   1081c:	|  |   moveq #2,d0
   1081e:	+--|-- bra.s 10822 <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   10820:	|  '-> moveq #2,d0
}
   10822:	'----> lea 12(sp),sp
   10826:	       rts

00010828 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   10828:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1082a:	       movea.l 12(sp),a0
   1082e:	       move.l 24(a0),d0
   10832:	       move.l d0,-(sp)
   10834:	       pea 1 <_start+0x1>
   10838:	       move.l sp,d0
   1083a:	       addq.l #8,d0
   1083c:	       move.l d0,-(sp)
   1083e:	       jsr 14a38 <getValueType>
   10844:	       lea 12(sp),sp
   10848:	       tst.w d0
   1084a:	   ,-- bne.s 10850 <builtIn_stopMusic+0x28>
   1084c:	   |   moveq #1,d0
   1084e:	,--|-- bra.s 1086e <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   10850:	|  '-> moveq #24,d0
   10852:	|      add.l 12(sp),d0
   10856:	|      move.l d0,-(sp)
   10858:	|      jsr 153bc <trimStack>
   1085e:	|      addq.l #4,sp
	stopMOD (v);
   10860:	|      move.l (sp),d0
   10862:	|      move.l d0,-(sp)
   10864:	|      jsr d41e <stopMOD>
   1086a:	|      addq.l #4,sp
	return BR_CONTINUE;
   1086c:	|      moveq #2,d0
}
   1086e:	'----> addq.l #4,sp
   10870:	       rts

00010872 <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   10872:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10874:	       movea.l 16(sp),a0
   10878:	       move.l 24(a0),d0
   1087c:	       move.l d0,-(sp)
   1087e:	       pea 1 <_start+0x1>
   10882:	       move.l sp,d0
   10884:	       addq.l #8,d0
   10886:	       move.l d0,-(sp)
   10888:	       jsr 14a38 <getValueType>
   1088e:	       lea 12(sp),sp
   10892:	       tst.w d0
   10894:	   ,-- bne.s 1089a <builtIn_setMusicVolume+0x28>
   10896:	   |   moveq #1,d0
   10898:	,--|-- bra.s 108f4 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   1089a:	|  '-> moveq #24,d0
   1089c:	|      add.l 16(sp),d0
   108a0:	|      move.l d0,-(sp)
   108a2:	|      jsr 153bc <trimStack>
   108a8:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108aa:	|      movea.l 16(sp),a0
   108ae:	|      move.l 24(a0),d0
   108b2:	|      move.l d0,-(sp)
   108b4:	|      pea 1 <_start+0x1>
   108b8:	|      moveq #12,d0
   108ba:	|      add.l sp,d0
   108bc:	|      move.l d0,-(sp)
   108be:	|      jsr 14a38 <getValueType>
   108c4:	|      lea 12(sp),sp
   108c8:	|      tst.w d0
   108ca:	|  ,-- bne.s 108d0 <builtIn_setMusicVolume+0x5e>
   108cc:	|  |   moveq #1,d0
   108ce:	+--|-- bra.s 108f4 <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   108d0:	|  '-> moveq #24,d0
   108d2:	|      add.l 16(sp),d0
   108d6:	|      move.l d0,-(sp)
   108d8:	|      jsr 153bc <trimStack>
   108de:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   108e0:	|      move.l (sp),d1
   108e2:	|      move.l 4(sp),d0
   108e6:	|      move.l d1,-(sp)
   108e8:	|      move.l d0,-(sp)
   108ea:	|      jsr d404 <setMusicVolume>
   108f0:	|      addq.l #8,sp
	return BR_CONTINUE;
   108f2:	|      moveq #2,d0
}
   108f4:	'----> addq.l #8,sp
   108f6:	       rts

000108f8 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   108f8:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   108fa:	       movea.l 12(sp),a0
   108fe:	       move.l 24(a0),d0
   10902:	       move.l d0,-(sp)
   10904:	       pea 1 <_start+0x1>
   10908:	       move.l sp,d0
   1090a:	       addq.l #8,d0
   1090c:	       move.l d0,-(sp)
   1090e:	       jsr 14a38 <getValueType>
   10914:	       lea 12(sp),sp
   10918:	       tst.w d0
   1091a:	   ,-- bne.s 10920 <builtIn_setDefaultMusicVolume+0x28>
   1091c:	   |   moveq #1,d0
   1091e:	,--|-- bra.s 1093e <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   10920:	|  '-> moveq #24,d0
   10922:	|      add.l 12(sp),d0
   10926:	|      move.l d0,-(sp)
   10928:	|      jsr 153bc <trimStack>
   1092e:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   10930:	|      move.l (sp),d0
   10932:	|      move.l d0,-(sp)
   10934:	|      jsr d3e8 <setDefaultMusicVolume>
   1093a:	|      addq.l #4,sp
	return BR_CONTINUE;
   1093c:	|      moveq #2,d0
}
   1093e:	'----> addq.l #4,sp
   10940:	       rts

00010942 <builtIn_playSound>:

builtIn(playSound)
{
   10942:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10944:	       movea.l 12(sp),a0
   10948:	       move.l 24(a0),d0
   1094c:	       move.l d0,-(sp)
   1094e:	       pea 5 <_start+0x5>
   10952:	       move.l sp,d0
   10954:	       addq.l #8,d0
   10956:	       move.l d0,-(sp)
   10958:	       jsr 14a38 <getValueType>
   1095e:	       lea 12(sp),sp
   10962:	       tst.w d0
   10964:	   ,-- bne.s 1096a <builtIn_playSound+0x28>
   10966:	   |   moveq #1,d0
   10968:	,--|-- bra.s 10992 <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   1096a:	|  '-> moveq #24,d0
   1096c:	|      add.l 12(sp),d0
   10970:	|      move.l d0,-(sp)
   10972:	|      jsr 153bc <trimStack>
   10978:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   1097a:	|      move.l (sp),d0
   1097c:	|      clr.l -(sp)
   1097e:	|      move.l d0,-(sp)
   10980:	|      jsr d40c <startSound>
   10986:	|      addq.l #8,sp
   10988:	|      tst.w d0
   1098a:	|  ,-- bne.s 10990 <builtIn_playSound+0x4e>
   1098c:	|  |   moveq #2,d0
   1098e:	+--|-- bra.s 10992 <builtIn_playSound+0x50>
	return BR_CONTINUE;
   10990:	|  '-> moveq #2,d0
}
   10992:	'----> addq.l #4,sp
   10994:	       rts

00010996 <builtIn_loopSound>:

builtIn(loopSound)
{
   10996:	             lea -28(sp),sp
   1099a:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   1099c:	             tst.l 36(sp)
   109a0:	         ,-- bgt.s 109b6 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   109a2:	         |   pea 19e24 <PutChar+0x1e6a>
   109a8:	         |   jsr 17518 <KPrintF>
   109ae:	         |   addq.l #4,sp
		return BR_ERROR;
   109b0:	         |   moveq #1,d0
   109b2:	,--------|-- bra.w 10b72 <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   109b6:	|        '-> moveq #1,d0
   109b8:	|            cmp.l 36(sp),d0
   109bc:	|     ,----- blt.s 10a18 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   109be:	|     |      movea.l 40(sp),a0
   109c2:	|     |      move.l 24(a0),d0
   109c6:	|     |      move.l d0,-(sp)
   109c8:	|     |      pea 5 <_start+0x5>
   109cc:	|     |      lea 16(sp),a0
   109d0:	|     |      move.l a0,-(sp)
   109d2:	|     |      jsr 14a38 <getValueType>
   109d8:	|     |      lea 12(sp),sp
   109dc:	|     |      tst.w d0
   109de:	|     |  ,-- bne.s 109e6 <builtIn_loopSound+0x50>
   109e0:	|     |  |   moveq #1,d0
   109e2:	+-----|--|-- bra.w 10b72 <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   109e6:	|     |  '-> moveq #24,d0
   109e8:	|     |      add.l 40(sp),d0
   109ec:	|     |      move.l d0,-(sp)
   109ee:	|     |      jsr 153bc <trimStack>
   109f4:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   109f6:	|     |      move.l 8(sp),d0
   109fa:	|     |      pea 1 <_start+0x1>
   109fe:	|     |      move.l d0,-(sp)
   10a00:	|     |      jsr d40c <startSound>
   10a06:	|     |      addq.l #8,sp
   10a08:	|     |      tst.w d0
   10a0a:	|     |  ,-- bne.s 10a12 <builtIn_loopSound+0x7c>
   10a0c:	|     |  |   moveq #2,d0
   10a0e:	+-----|--|-- bra.w 10b72 <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   10a12:	|     |  '-> moveq #2,d0
   10a14:	+-----|----- bra.w 10b72 <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10a18:	|     '----> moveq #2,d1
   10a1a:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10a1e:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   10a22:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   10a26:	|            movea.l 40(sp),a0
   10a2a:	|            movea.l 24(a0),a0
   10a2e:	|            move.l (a0),d0
   10a30:	|            moveq #5,d1
   10a32:	|            cmp.l d0,d1
   10a34:	|  ,-------- beq.w 10b0c <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   10a38:	|  |         movea.l 40(sp),a0
   10a3c:	|  |         move.l 24(a0),d0
   10a40:	|  |         move.l d0,-(sp)
   10a42:	|  |         pea 1 <_start+0x1>
   10a46:	|  |         lea 12(sp),a0
   10a4a:	|  |         move.l a0,-(sp)
   10a4c:	|  |         jsr 14a38 <getValueType>
   10a52:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   10a56:	|  |         moveq #24,d0
   10a58:	|  |         add.l 40(sp),d0
   10a5c:	|  |         move.l d0,-(sp)
   10a5e:	|  |         jsr 153bc <trimStack>
   10a64:	|  |         addq.l #4,sp
			numParams--;
   10a66:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   10a6a:	|  +-------- bra.w 10b0c <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   10a6e:	|  |  ,----> movea.l 40(sp),a0
   10a72:	|  |  |      move.l 24(a0),d0
   10a76:	|  |  |      move.l d0,-(sp)
   10a78:	|  |  |      pea 5 <_start+0x5>
   10a7c:	|  |  |      lea 16(sp),a0
   10a80:	|  |  |      move.l a0,-(sp)
   10a82:	|  |  |      jsr 14a38 <getValueType>
   10a88:	|  |  |      lea 12(sp),sp
   10a8c:	|  |  |      tst.w d0
   10a8e:	|  |  |  ,-- bne.s 10aa4 <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   10a90:	|  |  |  |   pea 19e62 <PutChar+0x1ea8>
   10a96:	|  |  |  |   jsr 17518 <KPrintF>
   10a9c:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10a9e:	|  |  |  |   moveq #1,d0
   10aa0:	+--|--|--|-- bra.w 10b72 <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   10aa4:	|  |  |  '-> moveq #20,d0
   10aa6:	|  |  |      move.l d0,20(sp)
   10aaa:	|  |  |      clr.l 16(sp)
   10aae:	|  |  |      move.l 1cd66 <SysBase>,d0
   10ab4:	|  |  |      movea.l d0,a6
   10ab6:	|  |  |      move.l 20(sp),d0
   10aba:	|  |  |      move.l 16(sp),d1
   10abe:	|  |  |      jsr -684(a6)
   10ac2:	|  |  |      move.l d0,12(sp)
   10ac6:	|  |  |      move.l 12(sp),d0
   10aca:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10ace:	|  |  |  ,-- bne.s 10ad6 <builtIn_loopSound+0x140>
   10ad0:	|  |  |  |   moveq #1,d0
   10ad2:	+--|--|--|-- bra.w 10b72 <builtIn_loopSound+0x1dc>

			s->next = old;
   10ad6:	|  |  |  '-> movea.l 28(sp),a0
   10ada:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   10ae0:	|  |  |      movea.l 28(sp),a0
   10ae4:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10ae8:	|  |  |      move.l 8(sp),d0
   10aec:	|  |  |      movea.l 28(sp),a0
   10af0:	|  |  |      move.l d0,(a0)
			old = s;
   10af2:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10af8:	|  |  |      moveq #24,d0
   10afa:	|  |  |      add.l 40(sp),d0
   10afe:	|  |  |      move.l d0,-(sp)
   10b00:	|  |  |      jsr 153bc <trimStack>
   10b06:	|  |  |      addq.l #4,sp
			numParams--;
   10b08:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10b0c:	|  '--|----> tst.l 36(sp)
   10b10:	|     '----- bne.w 10a6e <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   10b14:	|        ,-- bra.s 10b20 <builtIn_loopSound+0x18a>
   10b16:	|     ,--|-> movea.l 28(sp),a0
   10b1a:	|     |  |   move.l 4(a0),28(sp)
   10b20:	|     |  '-> movea.l 28(sp),a0
   10b24:	|     |      move.l 4(a0),d0
   10b28:	|     '----- bne.s 10b16 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   10b2a:	|            move.l 4(sp),d0
   10b2e:	|            moveq #1,d1
   10b30:	|            cmp.l d0,d1
   10b32:	|     ,----- bge.s 10b4a <builtIn_loopSound+0x1b4>
			s->next = old;
   10b34:	|     |      movea.l 28(sp),a0
   10b38:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   10b3e:	|     |      movea.l 24(sp),a0
   10b42:	|     |      move.l 28(sp),8(a0)
   10b48:	|     |  ,-- bra.s 10b5a <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   10b4a:	|     '--|-> move.l 4(sp),d0
   10b4e:	|        +-- beq.s 10b5a <builtIn_loopSound+0x1c4>
			s->next = s;
   10b50:	|        |   movea.l 28(sp),a0
   10b54:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   10b5a:	|        '-> movea.l 24(sp),a0
   10b5e:	|            moveq #-1,d0
   10b60:	|            move.l d0,16(a0)
		playSoundList(old);
   10b64:	|            move.l 24(sp),-(sp)
   10b68:	|            jsr d386 <playSoundList>
   10b6e:	|            addq.l #4,sp
		return BR_CONTINUE;
   10b70:	|            moveq #2,d0
	}
}
   10b72:	'----------> movea.l (sp)+,a6
   10b74:	             lea 28(sp),sp
   10b78:	             rts

00010b7a <builtIn_stopSound>:

builtIn(stopSound)
{
   10b7a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10b7c:	       movea.l 12(sp),a0
   10b80:	       move.l 24(a0),d0
   10b84:	       move.l d0,-(sp)
   10b86:	       pea 5 <_start+0x5>
   10b8a:	       move.l sp,d0
   10b8c:	       addq.l #8,d0
   10b8e:	       move.l d0,-(sp)
   10b90:	       jsr 14a38 <getValueType>
   10b96:	       lea 12(sp),sp
   10b9a:	       tst.w d0
   10b9c:	   ,-- bne.s 10ba2 <builtIn_stopSound+0x28>
   10b9e:	   |   moveq #1,d0
   10ba0:	,--|-- bra.s 10bc0 <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   10ba2:	|  '-> moveq #24,d0
   10ba4:	|      add.l 12(sp),d0
   10ba8:	|      move.l d0,-(sp)
   10baa:	|      jsr 153bc <trimStack>
   10bb0:	|      addq.l #4,sp
	huntKillSound (v);
   10bb2:	|      move.l (sp),d0
   10bb4:	|      move.l d0,-(sp)
   10bb6:	|      jsr d37e <huntKillSound>
   10bbc:	|      addq.l #4,sp
	return BR_CONTINUE;
   10bbe:	|      moveq #2,d0
}
   10bc0:	'----> addq.l #4,sp
   10bc2:	       rts

00010bc4 <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   10bc4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10bc6:	       movea.l 12(sp),a0
   10bca:	       move.l 24(a0),d0
   10bce:	       move.l d0,-(sp)
   10bd0:	       pea 1 <_start+0x1>
   10bd4:	       move.l sp,d0
   10bd6:	       addq.l #8,d0
   10bd8:	       move.l d0,-(sp)
   10bda:	       jsr 14a38 <getValueType>
   10be0:	       lea 12(sp),sp
   10be4:	       tst.w d0
   10be6:	   ,-- bne.s 10bec <builtIn_setDefaultSoundVolume+0x28>
   10be8:	   |   moveq #1,d0
   10bea:	,--|-- bra.s 10c0a <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10bec:	|  '-> moveq #24,d0
   10bee:	|      add.l 12(sp),d0
   10bf2:	|      move.l d0,-(sp)
   10bf4:	|      jsr 153bc <trimStack>
   10bfa:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10bfc:	|      move.l (sp),d0
   10bfe:	|      move.l d0,-(sp)
   10c00:	|      jsr d3f4 <setDefaultSoundVolume>
   10c06:	|      addq.l #4,sp
	return BR_CONTINUE;
   10c08:	|      moveq #2,d0
}
   10c0a:	'----> addq.l #4,sp
   10c0c:	       rts

00010c0e <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10c0e:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c10:	       movea.l 16(sp),a0
   10c14:	       move.l 24(a0),d0
   10c18:	       move.l d0,-(sp)
   10c1a:	       pea 1 <_start+0x1>
   10c1e:	       move.l sp,d0
   10c20:	       addq.l #8,d0
   10c22:	       move.l d0,-(sp)
   10c24:	       jsr 14a38 <getValueType>
   10c2a:	       lea 12(sp),sp
   10c2e:	       tst.w d0
   10c30:	   ,-- bne.s 10c36 <builtIn_setSoundVolume+0x28>
   10c32:	   |   moveq #1,d0
   10c34:	,--|-- bra.s 10c90 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10c36:	|  '-> moveq #24,d0
   10c38:	|      add.l 16(sp),d0
   10c3c:	|      move.l d0,-(sp)
   10c3e:	|      jsr 153bc <trimStack>
   10c44:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c46:	|      movea.l 16(sp),a0
   10c4a:	|      move.l 24(a0),d0
   10c4e:	|      move.l d0,-(sp)
   10c50:	|      pea 5 <_start+0x5>
   10c54:	|      moveq #12,d0
   10c56:	|      add.l sp,d0
   10c58:	|      move.l d0,-(sp)
   10c5a:	|      jsr 14a38 <getValueType>
   10c60:	|      lea 12(sp),sp
   10c64:	|      tst.w d0
   10c66:	|  ,-- bne.s 10c6c <builtIn_setSoundVolume+0x5e>
   10c68:	|  |   moveq #1,d0
   10c6a:	+--|-- bra.s 10c90 <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   10c6c:	|  '-> moveq #24,d0
   10c6e:	|      add.l 16(sp),d0
   10c72:	|      move.l d0,-(sp)
   10c74:	|      jsr 153bc <trimStack>
   10c7a:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   10c7c:	|      move.l (sp),d1
   10c7e:	|      move.l 4(sp),d0
   10c82:	|      move.l d1,-(sp)
   10c84:	|      move.l d0,-(sp)
   10c86:	|      jsr d408 <setSoundVolume>
   10c8c:	|      addq.l #8,sp
	return BR_CONTINUE;
   10c8e:	|      moveq #2,d0
}
   10c90:	'----> addq.l #8,sp
   10c92:	       rts

00010c94 <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   10c94:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10c98:	       movea.l 20(sp),a0
   10c9c:	       move.l 24(a0),d0
   10ca0:	       move.l d0,-(sp)
   10ca2:	       pea 1 <_start+0x1>
   10ca6:	       moveq #12,d0
   10ca8:	       add.l sp,d0
   10caa:	       move.l d0,-(sp)
   10cac:	       jsr 14a38 <getValueType>
   10cb2:	       lea 12(sp),sp
   10cb6:	       tst.w d0
   10cb8:	   ,-- bne.s 10cc0 <builtIn_setSoundLoopPoints+0x2c>
   10cba:	   |   moveq #1,d0
   10cbc:	,--|-- bra.w 10d58 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10cc0:	|  '-> moveq #24,d0
   10cc2:	|      add.l 20(sp),d0
   10cc6:	|      move.l d0,-(sp)
   10cc8:	|      jsr 153bc <trimStack>
   10cce:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10cd0:	|      movea.l 20(sp),a0
   10cd4:	|      move.l 24(a0),d0
   10cd8:	|      move.l d0,-(sp)
   10cda:	|      pea 1 <_start+0x1>
   10cde:	|      lea 8(sp),a0
   10ce2:	|      move.l a0,-(sp)
   10ce4:	|      jsr 14a38 <getValueType>
   10cea:	|      lea 12(sp),sp
   10cee:	|      tst.w d0
   10cf0:	|  ,-- bne.s 10cf6 <builtIn_setSoundLoopPoints+0x62>
   10cf2:	|  |   moveq #1,d0
   10cf4:	+--|-- bra.s 10d58 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10cf6:	|  '-> moveq #24,d0
   10cf8:	|      add.l 20(sp),d0
   10cfc:	|      move.l d0,-(sp)
   10cfe:	|      jsr 153bc <trimStack>
   10d04:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d06:	|      movea.l 20(sp),a0
   10d0a:	|      move.l 24(a0),d0
   10d0e:	|      move.l d0,-(sp)
   10d10:	|      pea 5 <_start+0x5>
   10d14:	|      moveq #16,d0
   10d16:	|      add.l sp,d0
   10d18:	|      move.l d0,-(sp)
   10d1a:	|      jsr 14a38 <getValueType>
   10d20:	|      lea 12(sp),sp
   10d24:	|      tst.w d0
   10d26:	|  ,-- bne.s 10d2c <builtIn_setSoundLoopPoints+0x98>
   10d28:	|  |   moveq #1,d0
   10d2a:	+--|-- bra.s 10d58 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10d2c:	|  '-> moveq #24,d0
   10d2e:	|      add.l 20(sp),d0
   10d32:	|      move.l d0,-(sp)
   10d34:	|      jsr 153bc <trimStack>
   10d3a:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   10d3c:	|      movea.l 4(sp),a0
   10d40:	|      move.l (sp),d1
   10d42:	|      move.l 8(sp),d0
   10d46:	|      move.l a0,-(sp)
   10d48:	|      move.l d1,-(sp)
   10d4a:	|      move.l d0,-(sp)
   10d4c:	|      jsr d400 <setSoundLoop>
   10d52:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10d56:	|      moveq #2,d0
}
   10d58:	'----> lea 12(sp),sp
   10d5c:	       rts

00010d5e <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   10d5e:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10d60:	          movea.l 12(sp),a0
   10d64:	          movea.l 24(a0),a0
   10d68:	          move.l (a0),d0
   10d6a:	          moveq #5,d1
   10d6c:	          cmp.l d0,d1
   10d6e:	,-------- bne.s 10db2 <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10d70:	|         movea.l 12(sp),a0
   10d74:	|         move.l 24(a0),d0
   10d78:	|         move.l d0,-(sp)
   10d7a:	|         pea 5 <_start+0x5>
   10d7e:	|         move.l sp,d0
   10d80:	|         addq.l #8,d0
   10d82:	|         move.l d0,-(sp)
   10d84:	|         jsr 14a38 <getValueType>
   10d8a:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10d8e:	|         moveq #24,d0
   10d90:	|         add.l 12(sp),d0
   10d94:	|         move.l d0,-(sp)
   10d96:	|         jsr 153bc <trimStack>
   10d9c:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10d9e:	|         move.l (sp),d0
   10da0:	|         move.l d0,-(sp)
   10da2:	|         jsr 16cc2 <setFloor>
   10da8:	|         addq.l #4,sp
   10daa:	|         tst.w d0
   10dac:	|  ,----- bne.s 10dc8 <builtIn_setFloor+0x6a>
   10dae:	|  |      moveq #1,d0
   10db0:	|  |  ,-- bra.s 10dca <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   10db2:	'--|--|-> moveq #24,d0
   10db4:	   |  |   add.l 12(sp),d0
   10db8:	   |  |   move.l d0,-(sp)
   10dba:	   |  |   jsr 153bc <trimStack>
   10dc0:	   |  |   addq.l #4,sp
		setFloorNull ();
   10dc2:	   |  |   jsr 1743c <setFloorNull>
	}
	return BR_CONTINUE;
   10dc8:	   '--|-> moveq #2,d0
}
   10dca:	      '-> addq.l #4,sp
   10dcc:	          rts

00010dce <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10dce:	jsr 1653e <drawFloor>
	return BR_CONTINUE;
   10dd4:	moveq #2,d0
}
   10dd6:	rts

00010dd8 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10dd8:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10dda:	          movea.l 12(sp),a0
   10dde:	          movea.l 24(a0),a0
   10de2:	          move.l (a0),d0
   10de4:	          moveq #5,d1
   10de6:	          cmp.l d0,d1
   10de8:	,-------- bne.s 10e2c <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10dea:	|         movea.l 12(sp),a0
   10dee:	|         move.l 24(a0),d0
   10df2:	|         move.l d0,-(sp)
   10df4:	|         pea 5 <_start+0x5>
   10df8:	|         move.l sp,d0
   10dfa:	|         addq.l #8,d0
   10dfc:	|         move.l d0,-(sp)
   10dfe:	|         jsr 14a38 <getValueType>
   10e04:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10e08:	|         moveq #24,d0
   10e0a:	|         add.l 12(sp),d0
   10e0e:	|         move.l d0,-(sp)
   10e10:	|         jsr 153bc <trimStack>
   10e16:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10e18:	|         move.l (sp),d0
   10e1a:	|         move.l d0,-(sp)
   10e1c:	|         jsr 88ae <setZBuffer>
   10e22:	|         addq.l #4,sp
   10e24:	|         tst.w d0
   10e26:	|  ,----- bne.s 10e42 <builtIn_setZBuffer+0x6a>
   10e28:	|  |      moveq #1,d0
   10e2a:	|  |  ,-- bra.s 10e44 <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   10e2c:	'--|--|-> moveq #24,d0
   10e2e:	   |  |   add.l 12(sp),d0
   10e32:	   |  |   move.l d0,-(sp)
   10e34:	   |  |   jsr 153bc <trimStack>
   10e3a:	   |  |   addq.l #4,sp
		killZBuffer ();
   10e3c:	   |  |   jsr 8862 <killZBuffer>
	}
	return BR_CONTINUE;
   10e42:	   '--|-> moveq #2,d0
}
   10e44:	      '-> addq.l #4,sp
   10e46:	          rts

00010e48 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   10e48:	pea 19e99 <PutChar+0x1edf>
   10e4e:	jsr 17518 <KPrintF>
   10e54:	addq.l #4,sp
	return BR_CONTINUE;
   10e56:	moveq #2,d0
}
   10e58:	rts

00010e5a <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e5a:	          movea.l 8(sp),a0
   10e5e:	          move.l 24(a0),d0
   10e62:	          move.l d0,-(sp)
   10e64:	          pea 1 <_start+0x1>
   10e68:	          pea 1ce30 <speechMode>
   10e6e:	          jsr 14a38 <getValueType>
   10e74:	          lea 12(sp),sp
   10e78:	          tst.w d0
   10e7a:	      ,-- bne.s 10e80 <builtIn_setSpeechMode+0x26>
   10e7c:	      |   moveq #1,d0
   10e7e:	,-----|-- bra.s 10eb8 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   10e80:	|     '-> moveq #24,d0
   10e82:	|         add.l 8(sp),d0
   10e86:	|         move.l d0,-(sp)
   10e88:	|         jsr 153bc <trimStack>
   10e8e:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   10e90:	|         move.l 1ce30 <speechMode>,d0
   10e96:	|     ,-- bmi.s 10ea4 <builtIn_setSpeechMode+0x4a>
   10e98:	|     |   move.l 1ce30 <speechMode>,d0
   10e9e:	|     |   moveq #2,d1
   10ea0:	|     |   cmp.l d0,d1
   10ea2:	|  ,--|-- bge.s 10eb6 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   10ea4:	|  |  '-> pea 19eb2 <PutChar+0x1ef8>
   10eaa:	|  |      jsr 17518 <KPrintF>
   10eb0:	|  |      addq.l #4,sp
		return BR_ERROR;
   10eb2:	|  |      moveq #1,d0
   10eb4:	+--|----- bra.s 10eb8 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10eb6:	|  '----> moveq #2,d0
}
   10eb8:	'-------> rts

00010eba <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10eba:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10ebc:	       jsr 4130 <isThereAnySpeechGoingOn>
   10ec2:	       move.l d0,(sp)
	if (i == -1) {
   10ec4:	       moveq #-1,d0
   10ec6:	       cmp.l (sp),d0
   10ec8:	,----- bne.s 10ee4 <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10eca:	|      moveq #28,d0
   10ecc:	|      add.l 12(sp),d0
   10ed0:	|      clr.l -(sp)
   10ed2:	|      pea 1 <_start+0x1>
   10ed6:	|      move.l d0,-(sp)
   10ed8:	|      jsr 1532a <setVariable>
   10ede:	|      lea 12(sp),sp
   10ee2:	|  ,-- bra.s 10efc <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   10ee4:	'--|-> moveq #28,d0
   10ee6:	   |   add.l 12(sp),d0
   10eea:	   |   move.l (sp),-(sp)
   10eec:	   |   pea 7 <_start+0x7>
   10ef0:	   |   move.l d0,-(sp)
   10ef2:	   |   jsr 1532a <setVariable>
   10ef8:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10efc:	   '-> moveq #2,d0
}
   10efe:	       addq.l #4,sp
   10f00:	       rts

00010f02 <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   10f02:	jsr 6c5c <killSpeechTimers>
	return BR_CONTINUE;
   10f08:	moveq #2,d0
}
   10f0a:	rts

00010f0c <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10f0c:	       move.l 1ce76 <overRegion>,d0
   10f12:	,----- beq.s 10f3c <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   10f14:	|      movea.l 1ce76 <overRegion>,a0
   10f1a:	|      movea.l 28(a0),a0
   10f1e:	|      move.l 4(a0),d1
   10f22:	|      moveq #28,d0
   10f24:	|      add.l 8(sp),d0
   10f28:	|      move.l d1,-(sp)
   10f2a:	|      pea 7 <_start+0x7>
   10f2e:	|      move.l d0,-(sp)
   10f30:	|      jsr 1532a <setVariable>
   10f36:	|      lea 12(sp),sp
   10f3a:	|  ,-- bra.s 10f54 <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   10f3c:	'--|-> moveq #28,d0
   10f3e:	   |   add.l 8(sp),d0
   10f42:	   |   clr.l -(sp)
   10f44:	   |   pea 1 <_start+0x1>
   10f48:	   |   move.l d0,-(sp)
   10f4a:	   |   jsr 1532a <setVariable>
   10f50:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   10f54:	   '-> moveq #2,d0
}
   10f56:	       rts

00010f58 <builtIn_rename>:

builtIn(rename)
{
   10f58:	       lea -16(sp),sp
   10f5c:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   10f5e:	       movea.l 28(sp),a0
   10f62:	       move.l 24(a0),d0
   10f66:	       move.l d0,-(sp)
   10f68:	       jsr 1500e <getTextFromAnyVar>
   10f6e:	       addq.l #4,sp
   10f70:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   10f74:	   ,-- bne.s 10f7a <builtIn_rename+0x22>
   10f76:	   |   moveq #1,d0
   10f78:	,--|-- bra.s 10ff4 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10f7a:	|  '-> moveq #24,d0
   10f7c:	|      add.l 28(sp),d0
   10f80:	|      move.l d0,-(sp)
   10f82:	|      jsr 153bc <trimStack>
   10f88:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10f8a:	|      movea.l 28(sp),a0
   10f8e:	|      move.l 24(a0),d0
   10f92:	|      move.l d0,-(sp)
   10f94:	|      pea 7 <_start+0x7>
   10f98:	|      lea 12(sp),a0
   10f9c:	|      move.l a0,-(sp)
   10f9e:	|      jsr 14a38 <getValueType>
   10fa4:	|      lea 12(sp),sp
   10fa8:	|      tst.w d0
   10faa:	|  ,-- bne.s 10fb0 <builtIn_rename+0x58>
   10fac:	|  |   moveq #1,d0
   10fae:	+--|-- bra.s 10ff4 <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   10fb0:	|  '-> moveq #24,d0
   10fb2:	|      add.l 28(sp),d0
   10fb6:	|      move.l d0,-(sp)
   10fb8:	|      jsr 153bc <trimStack>
   10fbe:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   10fc0:	|      move.l 4(sp),d0
   10fc4:	|      move.l d0,-(sp)
   10fc6:	|      jsr d74c <findObjectType>
   10fcc:	|      addq.l #4,sp
   10fce:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   10fd2:	|      movea.l 12(sp),a0
   10fd6:	|      move.l (a0),8(sp)
   10fda:	|      move.l 1cd66 <SysBase>,d0
   10fe0:	|      movea.l d0,a6
   10fe2:	|      movea.l 8(sp),a1
   10fe6:	|      jsr -690(a6)
	o->screenName = newText;
   10fea:	|      movea.l 12(sp),a0
   10fee:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   10ff2:	|      moveq #2,d0
}
   10ff4:	'----> movea.l (sp)+,a6
   10ff6:	       lea 16(sp),sp
   10ffa:	       rts

00010ffc <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10ffc:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11000:	          movea.l 20(sp),a0
   11004:	          move.l 24(a0),d0
   11008:	          move.l d0,-(sp)
   1100a:	          pea 7 <_start+0x7>
   1100e:	          lea 8(sp),a0
   11012:	          move.l a0,-(sp)
   11014:	          jsr 14a38 <getValueType>
   1101a:	          lea 12(sp),sp
   1101e:	          tst.w d0
   11020:	      ,-- bne.s 11028 <builtIn_getObjectX+0x2c>
   11022:	      |   moveq #1,d0
   11024:	,-----|-- bra.w 110c4 <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   11028:	|     '-> moveq #24,d0
   1102a:	|         add.l 20(sp),d0
   1102e:	|         move.l d0,-(sp)
   11030:	|         jsr 153bc <trimStack>
   11036:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11038:	|         move.l (sp),d0
   1103a:	|         move.l d0,-(sp)
   1103c:	|         jsr a7de <findPerson>
   11042:	|         addq.l #4,sp
   11044:	|         move.l d0,8(sp)
	if (pers) {
   11048:	|     ,-- beq.s 11076 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   1104a:	|     |   movea.l 8(sp),a0
   1104e:	|     |   move.l (a0),d0
   11050:	|     |   move.l d0,-(sp)
   11052:	|     |   jsr 178e2 <__fixsfsi>
   11058:	|     |   addq.l #4,sp
   1105a:	|     |   move.l d0,d1
   1105c:	|     |   moveq #28,d0
   1105e:	|     |   add.l 20(sp),d0
   11062:	|     |   move.l d1,-(sp)
   11064:	|     |   pea 1 <_start+0x1>
   11068:	|     |   move.l d0,-(sp)
   1106a:	|     |   jsr 1532a <setVariable>
   11070:	|     |   lea 12(sp),sp
   11074:	|  ,--|-- bra.s 110c2 <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11076:	|  |  '-> move.l (sp),d0
   11078:	|  |      move.l d0,-(sp)
   1107a:	|  |      jsr 15cfa <getRegionForObject>
   11080:	|  |      addq.l #4,sp
   11082:	|  |      move.l d0,4(sp)
		if (la) {
   11086:	|  |  ,-- beq.s 110aa <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   11088:	|  |  |   movea.l 4(sp),a0
   1108c:	|  |  |   move.l 16(a0),d1
   11090:	|  |  |   moveq #28,d0
   11092:	|  |  |   add.l 20(sp),d0
   11096:	|  |  |   move.l d1,-(sp)
   11098:	|  |  |   pea 1 <_start+0x1>
   1109c:	|  |  |   move.l d0,-(sp)
   1109e:	|  |  |   jsr 1532a <setVariable>
   110a4:	|  |  |   lea 12(sp),sp
   110a8:	|  +--|-- bra.s 110c2 <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   110aa:	|  |  '-> moveq #28,d0
   110ac:	|  |      add.l 20(sp),d0
   110b0:	|  |      clr.l -(sp)
   110b2:	|  |      pea 1 <_start+0x1>
   110b6:	|  |      move.l d0,-(sp)
   110b8:	|  |      jsr 1532a <setVariable>
   110be:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   110c2:	|  '----> moveq #2,d0
}
   110c4:	'-------> lea 12(sp),sp
   110c8:	          rts

000110ca <builtIn_getObjectY>:

builtIn (getObjectY)
{
   110ca:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110ce:	          movea.l 20(sp),a0
   110d2:	          move.l 24(a0),d0
   110d6:	          move.l d0,-(sp)
   110d8:	          pea 7 <_start+0x7>
   110dc:	          lea 8(sp),a0
   110e0:	          move.l a0,-(sp)
   110e2:	          jsr 14a38 <getValueType>
   110e8:	          lea 12(sp),sp
   110ec:	          tst.w d0
   110ee:	      ,-- bne.s 110f6 <builtIn_getObjectY+0x2c>
   110f0:	      |   moveq #1,d0
   110f2:	,-----|-- bra.w 11194 <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   110f6:	|     '-> moveq #24,d0
   110f8:	|         add.l 20(sp),d0
   110fc:	|         move.l d0,-(sp)
   110fe:	|         jsr 153bc <trimStack>
   11104:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   11106:	|         move.l (sp),d0
   11108:	|         move.l d0,-(sp)
   1110a:	|         jsr a7de <findPerson>
   11110:	|         addq.l #4,sp
   11112:	|         move.l d0,8(sp)
	if (pers) {
   11116:	|     ,-- beq.s 11146 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   11118:	|     |   movea.l 8(sp),a0
   1111c:	|     |   move.l 4(a0),d0
   11120:	|     |   move.l d0,-(sp)
   11122:	|     |   jsr 178e2 <__fixsfsi>
   11128:	|     |   addq.l #4,sp
   1112a:	|     |   move.l d0,d1
   1112c:	|     |   moveq #28,d0
   1112e:	|     |   add.l 20(sp),d0
   11132:	|     |   move.l d1,-(sp)
   11134:	|     |   pea 1 <_start+0x1>
   11138:	|     |   move.l d0,-(sp)
   1113a:	|     |   jsr 1532a <setVariable>
   11140:	|     |   lea 12(sp),sp
   11144:	|  ,--|-- bra.s 11192 <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   11146:	|  |  '-> move.l (sp),d0
   11148:	|  |      move.l d0,-(sp)
   1114a:	|  |      jsr 15cfa <getRegionForObject>
   11150:	|  |      addq.l #4,sp
   11152:	|  |      move.l d0,4(sp)
		if (la) {
   11156:	|  |  ,-- beq.s 1117a <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   11158:	|  |  |   movea.l 4(sp),a0
   1115c:	|  |  |   move.l 20(a0),d1
   11160:	|  |  |   moveq #28,d0
   11162:	|  |  |   add.l 20(sp),d0
   11166:	|  |  |   move.l d1,-(sp)
   11168:	|  |  |   pea 1 <_start+0x1>
   1116c:	|  |  |   move.l d0,-(sp)
   1116e:	|  |  |   jsr 1532a <setVariable>
   11174:	|  |  |   lea 12(sp),sp
   11178:	|  +--|-- bra.s 11192 <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   1117a:	|  |  '-> moveq #28,d0
   1117c:	|  |      add.l 20(sp),d0
   11180:	|  |      clr.l -(sp)
   11182:	|  |      pea 1 <_start+0x1>
   11186:	|  |      move.l d0,-(sp)
   11188:	|  |      jsr 1532a <setVariable>
   1118e:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   11192:	|  '----> moveq #2,d0
}
   11194:	'-------> lea 12(sp),sp
   11198:	          rts

0001119a <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   1119a:	       lea -32(sp),sp
   1119e:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111a2:	       movea.l 56(sp),a0
   111a6:	       move.l 24(a0),d0
   111aa:	       move.l d0,-(sp)
   111ac:	       pea 1 <_start+0x1>
   111b0:	       lea 28(sp),a0
   111b4:	       move.l a0,-(sp)
   111b6:	       jsr 14a38 <getValueType>
   111bc:	       lea 12(sp),sp
   111c0:	       tst.w d0
   111c2:	   ,-- bne.s 111ca <builtIn_addScreenRegion+0x30>
   111c4:	   |   moveq #1,d0
   111c6:	,--|-- bra.w 113a4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   111ca:	|  '-> moveq #24,d0
   111cc:	|      add.l 56(sp),d0
   111d0:	|      move.l d0,-(sp)
   111d2:	|      jsr 153bc <trimStack>
   111d8:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   111da:	|      movea.l 56(sp),a0
   111de:	|      move.l 24(a0),d0
   111e2:	|      move.l d0,-(sp)
   111e4:	|      pea 1 <_start+0x1>
   111e8:	|      moveq #48,d0
   111ea:	|      add.l sp,d0
   111ec:	|      move.l d0,-(sp)
   111ee:	|      jsr 14a38 <getValueType>
   111f4:	|      lea 12(sp),sp
   111f8:	|      tst.w d0
   111fa:	|  ,-- bne.s 11202 <builtIn_addScreenRegion+0x68>
   111fc:	|  |   moveq #1,d0
   111fe:	+--|-- bra.w 113a4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11202:	|  '-> moveq #24,d0
   11204:	|      add.l 56(sp),d0
   11208:	|      move.l d0,-(sp)
   1120a:	|      jsr 153bc <trimStack>
   11210:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11212:	|      movea.l 56(sp),a0
   11216:	|      move.l 24(a0),d0
   1121a:	|      move.l d0,-(sp)
   1121c:	|      pea 1 <_start+0x1>
   11220:	|      moveq #52,d0
   11222:	|      add.l sp,d0
   11224:	|      move.l d0,-(sp)
   11226:	|      jsr 14a38 <getValueType>
   1122c:	|      lea 12(sp),sp
   11230:	|      tst.w d0
   11232:	|  ,-- bne.s 1123a <builtIn_addScreenRegion+0xa0>
   11234:	|  |   moveq #1,d0
   11236:	+--|-- bra.w 113a4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1123a:	|  '-> moveq #24,d0
   1123c:	|      add.l 56(sp),d0
   11240:	|      move.l d0,-(sp)
   11242:	|      jsr 153bc <trimStack>
   11248:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1124a:	|      movea.l 56(sp),a0
   1124e:	|      move.l 24(a0),d0
   11252:	|      move.l d0,-(sp)
   11254:	|      pea 1 <_start+0x1>
   11258:	|      lea 32(sp),a0
   1125c:	|      move.l a0,-(sp)
   1125e:	|      jsr 14a38 <getValueType>
   11264:	|      lea 12(sp),sp
   11268:	|      tst.w d0
   1126a:	|  ,-- bne.s 11272 <builtIn_addScreenRegion+0xd8>
   1126c:	|  |   moveq #1,d0
   1126e:	+--|-- bra.w 113a4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11272:	|  '-> moveq #24,d0
   11274:	|      add.l 56(sp),d0
   11278:	|      move.l d0,-(sp)
   1127a:	|      jsr 153bc <trimStack>
   11280:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11282:	|      movea.l 56(sp),a0
   11286:	|      move.l 24(a0),d0
   1128a:	|      move.l d0,-(sp)
   1128c:	|      pea 1 <_start+0x1>
   11290:	|      lea 36(sp),a0
   11294:	|      move.l a0,-(sp)
   11296:	|      jsr 14a38 <getValueType>
   1129c:	|      lea 12(sp),sp
   112a0:	|      tst.w d0
   112a2:	|  ,-- bne.s 112aa <builtIn_addScreenRegion+0x110>
   112a4:	|  |   moveq #1,d0
   112a6:	+--|-- bra.w 113a4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   112aa:	|  '-> moveq #24,d0
   112ac:	|      add.l 56(sp),d0
   112b0:	|      move.l d0,-(sp)
   112b2:	|      jsr 153bc <trimStack>
   112b8:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112ba:	|      movea.l 56(sp),a0
   112be:	|      move.l 24(a0),d0
   112c2:	|      move.l d0,-(sp)
   112c4:	|      pea 1 <_start+0x1>
   112c8:	|      lea 40(sp),a0
   112cc:	|      move.l a0,-(sp)
   112ce:	|      jsr 14a38 <getValueType>
   112d4:	|      lea 12(sp),sp
   112d8:	|      tst.w d0
   112da:	|  ,-- bne.s 112e2 <builtIn_addScreenRegion+0x148>
   112dc:	|  |   moveq #1,d0
   112de:	+--|-- bra.w 113a4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   112e2:	|  '-> moveq #24,d0
   112e4:	|      add.l 56(sp),d0
   112e8:	|      move.l d0,-(sp)
   112ea:	|      jsr 153bc <trimStack>
   112f0:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112f2:	|      movea.l 56(sp),a0
   112f6:	|      move.l 24(a0),d0
   112fa:	|      move.l d0,-(sp)
   112fc:	|      pea 1 <_start+0x1>
   11300:	|      lea 44(sp),a0
   11304:	|      move.l a0,-(sp)
   11306:	|      jsr 14a38 <getValueType>
   1130c:	|      lea 12(sp),sp
   11310:	|      tst.w d0
   11312:	|  ,-- bne.s 1131a <builtIn_addScreenRegion+0x180>
   11314:	|  |   moveq #1,d0
   11316:	+--|-- bra.w 113a4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   1131a:	|  '-> moveq #24,d0
   1131c:	|      add.l 56(sp),d0
   11320:	|      move.l d0,-(sp)
   11322:	|      jsr 153bc <trimStack>
   11328:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1132a:	|      movea.l 56(sp),a0
   1132e:	|      move.l 24(a0),d0
   11332:	|      move.l d0,-(sp)
   11334:	|      pea 7 <_start+0x7>
   11338:	|      lea 24(sp),a0
   1133c:	|      move.l a0,-(sp)
   1133e:	|      jsr 14a38 <getValueType>
   11344:	|      lea 12(sp),sp
   11348:	|      tst.w d0
   1134a:	|  ,-- bne.s 11350 <builtIn_addScreenRegion+0x1b6>
   1134c:	|  |   moveq #1,d0
   1134e:	+--|-- bra.s 113a4 <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   11350:	|  '-> moveq #24,d0
   11352:	|      add.l 56(sp),d0
   11356:	|      move.l d0,-(sp)
   11358:	|      jsr 153bc <trimStack>
   1135e:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   11360:	|      move.l 16(sp),d5
   11364:	|      move.l 20(sp),d4
   11368:	|      move.l 40(sp),d3
   1136c:	|      move.l 44(sp),d2
   11370:	|      movea.l 24(sp),a1
   11374:	|      movea.l 28(sp),a0
   11378:	|      move.l 32(sp),d1
   1137c:	|      move.l 36(sp),d0
   11380:	|      move.l d5,-(sp)
   11382:	|      move.l d4,-(sp)
   11384:	|      move.l d3,-(sp)
   11386:	|      move.l d2,-(sp)
   11388:	|      move.l a1,-(sp)
   1138a:	|      move.l a0,-(sp)
   1138c:	|      move.l d1,-(sp)
   1138e:	|      move.l d0,-(sp)
   11390:	|      jsr 15bb4 <addScreenRegion>
   11396:	|      lea 32(sp),sp
   1139a:	|      tst.w d0
   1139c:	|  ,-- beq.s 113a2 <builtIn_addScreenRegion+0x208>
   1139e:	|  |   moveq #2,d0
   113a0:	+--|-- bra.s 113a4 <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   113a2:	|  '-> moveq #1,d0

}
   113a4:	'----> movem.l (sp)+,d2-d5
   113a8:	       lea 32(sp),sp
   113ac:	       rts

000113ae <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   113ae:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   113b0:	       movea.l 12(sp),a0
   113b4:	       move.l 24(a0),d0
   113b8:	       move.l d0,-(sp)
   113ba:	       pea 7 <_start+0x7>
   113be:	       move.l sp,d0
   113c0:	       addq.l #8,d0
   113c2:	       move.l d0,-(sp)
   113c4:	       jsr 14a38 <getValueType>
   113ca:	       lea 12(sp),sp
   113ce:	       tst.w d0
   113d0:	   ,-- bne.s 113d6 <builtIn_removeScreenRegion+0x28>
   113d2:	   |   moveq #1,d0
   113d4:	,--|-- bra.s 113f4 <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   113d6:	|  '-> moveq #24,d0
   113d8:	|      add.l 12(sp),d0
   113dc:	|      move.l d0,-(sp)
   113de:	|      jsr 153bc <trimStack>
   113e4:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   113e6:	|      move.l (sp),d0
   113e8:	|      move.l d0,-(sp)
   113ea:	|      jsr 15ea2 <removeScreenRegion>
   113f0:	|      addq.l #4,sp
	return BR_CONTINUE;
   113f2:	|      moveq #2,d0
}
   113f4:	'----> addq.l #4,sp
   113f6:	       rts

000113f8 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   113f8:	jsr 16026 <showBoxes>
	return BR_CONTINUE;
   113fe:	moveq #2,d0
}
   11400:	rts

00011402 <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   11402:	jsr 15d28 <killAllRegions>
	return BR_CONTINUE;
   11408:	moveq #2,d0
}
   1140a:	rts

0001140c <builtIn_addCharacter>:

builtIn(addCharacter)
{
   1140c:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   11410:	       movea.l 24(sp),a0
   11414:	       move.l 24(a0),d0
   11418:	       move.l d0,-(sp)
   1141a:	       jsr 146e4 <getCostumeFromVar>
   11420:	       addq.l #4,sp
   11422:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   11426:	   ,-- bne.s 1142e <builtIn_addCharacter+0x22>
   11428:	   |   moveq #1,d0
   1142a:	,--|-- bra.w 1150a <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   1142e:	|  '-> moveq #24,d0
   11430:	|      add.l 24(sp),d0
   11434:	|      move.l d0,-(sp)
   11436:	|      jsr 153bc <trimStack>
   1143c:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1143e:	|      movea.l 24(sp),a0
   11442:	|      move.l 24(a0),d0
   11446:	|      move.l d0,-(sp)
   11448:	|      pea 1 <_start+0x1>
   1144c:	|      lea 12(sp),a0
   11450:	|      move.l a0,-(sp)
   11452:	|      jsr 14a38 <getValueType>
   11458:	|      lea 12(sp),sp
   1145c:	|      tst.w d0
   1145e:	|  ,-- bne.s 11466 <builtIn_addCharacter+0x5a>
   11460:	|  |   moveq #1,d0
   11462:	+--|-- bra.w 1150a <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   11466:	|  '-> moveq #24,d0
   11468:	|      add.l 24(sp),d0
   1146c:	|      move.l d0,-(sp)
   1146e:	|      jsr 153bc <trimStack>
   11474:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11476:	|      movea.l 24(sp),a0
   1147a:	|      move.l 24(a0),d0
   1147e:	|      move.l d0,-(sp)
   11480:	|      pea 1 <_start+0x1>
   11484:	|      moveq #16,d0
   11486:	|      add.l sp,d0
   11488:	|      move.l d0,-(sp)
   1148a:	|      jsr 14a38 <getValueType>
   11490:	|      lea 12(sp),sp
   11494:	|      tst.w d0
   11496:	|  ,-- bne.s 1149c <builtIn_addCharacter+0x90>
   11498:	|  |   moveq #1,d0
   1149a:	+--|-- bra.s 1150a <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   1149c:	|  '-> moveq #24,d0
   1149e:	|      add.l 24(sp),d0
   114a2:	|      move.l d0,-(sp)
   114a4:	|      jsr 153bc <trimStack>
   114aa:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   114ac:	|      movea.l 24(sp),a0
   114b0:	|      move.l 24(a0),d0
   114b4:	|      move.l d0,-(sp)
   114b6:	|      pea 7 <_start+0x7>
   114ba:	|      lea 8(sp),a0
   114be:	|      move.l a0,-(sp)
   114c0:	|      jsr 14a38 <getValueType>
   114c6:	|      lea 12(sp),sp
   114ca:	|      tst.w d0
   114cc:	|  ,-- bne.s 114d2 <builtIn_addCharacter+0xc6>
   114ce:	|  |   moveq #1,d0
   114d0:	+--|-- bra.s 1150a <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   114d2:	|  '-> moveq #24,d0
   114d4:	|      add.l 24(sp),d0
   114d8:	|      move.l d0,-(sp)
   114da:	|      jsr 153bc <trimStack>
   114e0:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   114e2:	|      movea.l (sp),a0
   114e4:	|      move.l 4(sp),d1
   114e8:	|      move.l 8(sp),d0
   114ec:	|      move.l 12(sp),-(sp)
   114f0:	|      move.l a0,-(sp)
   114f2:	|      move.l d1,-(sp)
   114f4:	|      move.l d0,-(sp)
   114f6:	|      jsr 93d8 <addPerson>
   114fc:	|      lea 16(sp),sp
   11500:	|      tst.w d0
   11502:	|  ,-- beq.s 11508 <builtIn_addCharacter+0xfc>
   11504:	|  |   moveq #2,d0
   11506:	+--|-- bra.s 1150a <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   11508:	|  '-> moveq #1,d0
}
   1150a:	'----> lea 16(sp),sp
   1150e:	       rts

00011510 <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   11510:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11512:	       movea.l 12(sp),a0
   11516:	       move.l 24(a0),d0
   1151a:	       move.l d0,-(sp)
   1151c:	       pea 7 <_start+0x7>
   11520:	       move.l sp,d0
   11522:	       addq.l #8,d0
   11524:	       move.l d0,-(sp)
   11526:	       jsr 14a38 <getValueType>
   1152c:	       lea 12(sp),sp
   11530:	       tst.w d0
   11532:	   ,-- bne.s 11538 <builtIn_hideCharacter+0x28>
   11534:	   |   moveq #1,d0
   11536:	,--|-- bra.s 11558 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   11538:	|  '-> moveq #24,d0
   1153a:	|      add.l 12(sp),d0
   1153e:	|      move.l d0,-(sp)
   11540:	|      jsr 153bc <trimStack>
   11546:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   11548:	|      move.l (sp),d0
   1154a:	|      move.l d0,-(sp)
   1154c:	|      clr.l -(sp)
   1154e:	|      jsr be74 <setShown>
   11554:	|      addq.l #8,sp
	return BR_CONTINUE;
   11556:	|      moveq #2,d0
}
   11558:	'----> addq.l #4,sp
   1155a:	       rts

0001155c <builtIn_showCharacter>:

builtIn(showCharacter)
{
   1155c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1155e:	       movea.l 12(sp),a0
   11562:	       move.l 24(a0),d0
   11566:	       move.l d0,-(sp)
   11568:	       pea 7 <_start+0x7>
   1156c:	       move.l sp,d0
   1156e:	       addq.l #8,d0
   11570:	       move.l d0,-(sp)
   11572:	       jsr 14a38 <getValueType>
   11578:	       lea 12(sp),sp
   1157c:	       tst.w d0
   1157e:	   ,-- bne.s 11584 <builtIn_showCharacter+0x28>
   11580:	   |   moveq #1,d0
   11582:	,--|-- bra.s 115a6 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   11584:	|  '-> moveq #24,d0
   11586:	|      add.l 12(sp),d0
   1158a:	|      move.l d0,-(sp)
   1158c:	|      jsr 153bc <trimStack>
   11592:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   11594:	|      move.l (sp),d0
   11596:	|      move.l d0,-(sp)
   11598:	|      pea 1 <_start+0x1>
   1159c:	|      jsr be74 <setShown>
   115a2:	|      addq.l #8,sp
	return BR_CONTINUE;
   115a4:	|      moveq #2,d0
}
   115a6:	'----> addq.l #4,sp
   115a8:	       rts

000115aa <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   115aa:	jsr 6c5c <killSpeechTimers>
	killMostPeople ();
   115b0:	jsr ac74 <killMostPeople>
	return BR_CONTINUE;
   115b6:	moveq #2,d0
}
   115b8:	rts

000115ba <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   115ba:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   115bc:	       movea.l 16(sp),a0
   115c0:	       move.l 24(a0),d0
   115c4:	       move.l d0,-(sp)
   115c6:	       pea 1 <_start+0x1>
   115ca:	       move.l sp,d0
   115cc:	       addq.l #8,d0
   115ce:	       move.l d0,-(sp)
   115d0:	       jsr 14a38 <getValueType>
   115d6:	       lea 12(sp),sp
   115da:	       tst.w d0
   115dc:	   ,-- bne.s 115e2 <builtIn_setCharacterDrawMode+0x28>
   115de:	   |   moveq #1,d0
   115e0:	,--|-- bra.s 1163c <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   115e2:	|  '-> moveq #24,d0
   115e4:	|      add.l 16(sp),d0
   115e8:	|      move.l d0,-(sp)
   115ea:	|      jsr 153bc <trimStack>
   115f0:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   115f2:	|      movea.l 16(sp),a0
   115f6:	|      move.l 24(a0),d0
   115fa:	|      move.l d0,-(sp)
   115fc:	|      pea 7 <_start+0x7>
   11600:	|      moveq #12,d0
   11602:	|      add.l sp,d0
   11604:	|      move.l d0,-(sp)
   11606:	|      jsr 14a38 <getValueType>
   1160c:	|      lea 12(sp),sp
   11610:	|      tst.w d0
   11612:	|  ,-- bne.s 11618 <builtIn_setCharacterDrawMode+0x5e>
   11614:	|  |   moveq #1,d0
   11616:	+--|-- bra.s 1163c <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   11618:	|  '-> moveq #24,d0
   1161a:	|      add.l 16(sp),d0
   1161e:	|      move.l d0,-(sp)
   11620:	|      jsr 153bc <trimStack>
   11626:	|      addq.l #4,sp
	setDrawMode (di, obj);
   11628:	|      move.l 4(sp),d1
   1162c:	|      move.l (sp),d0
   1162e:	|      move.l d1,-(sp)
   11630:	|      move.l d0,-(sp)
   11632:	|      jsr b7b2 <setDrawMode>
   11638:	|      addq.l #8,sp
	return BR_CONTINUE;
   1163a:	|      moveq #2,d0
}
   1163c:	'----> addq.l #8,sp
   1163e:	       rts

00011640 <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   11640:	pea 19ef0 <PutChar+0x1f36>
   11646:	jsr 17518 <KPrintF>
   1164c:	addq.l #4,sp
	return BR_CONTINUE;
   1164e:	moveq #2,d0
}
   11650:	rts

00011652 <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   11652:	pea 19f23 <PutChar+0x1f69>
   11658:	jsr 17518 <KPrintF>
   1165e:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   11660:	moveq #2,d0
}
   11662:	rts

00011664 <builtIn_setScale>:

builtIn(setScale)
{
   11664:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11666:	       movea.l 16(sp),a0
   1166a:	       move.l 24(a0),d0
   1166e:	       move.l d0,-(sp)
   11670:	       pea 1 <_start+0x1>
   11674:	       move.l sp,d0
   11676:	       addq.l #8,d0
   11678:	       move.l d0,-(sp)
   1167a:	       jsr 14a38 <getValueType>
   11680:	       lea 12(sp),sp
   11684:	       tst.w d0
   11686:	   ,-- bne.s 1168c <builtIn_setScale+0x28>
   11688:	   |   moveq #1,d0
   1168a:	,--|-- bra.s 116ee <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   1168c:	|  '-> moveq #24,d0
   1168e:	|      add.l 16(sp),d0
   11692:	|      move.l d0,-(sp)
   11694:	|      jsr 153bc <trimStack>
   1169a:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1169c:	|      movea.l 16(sp),a0
   116a0:	|      move.l 24(a0),d0
   116a4:	|      move.l d0,-(sp)
   116a6:	|      pea 1 <_start+0x1>
   116aa:	|      moveq #12,d0
   116ac:	|      add.l sp,d0
   116ae:	|      move.l d0,-(sp)
   116b0:	|      jsr 14a38 <getValueType>
   116b6:	|      lea 12(sp),sp
   116ba:	|      tst.w d0
   116bc:	|  ,-- bne.s 116c2 <builtIn_setScale+0x5e>
   116be:	|  |   moveq #1,d0
   116c0:	+--|-- bra.s 116ee <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   116c2:	|  '-> moveq #24,d0
   116c4:	|      add.l 16(sp),d0
   116c8:	|      move.l d0,-(sp)
   116ca:	|      jsr 153bc <trimStack>
   116d0:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   116d2:	|      move.l (sp),d0
   116d4:	|      move.l d0,d0
   116d6:	|      movea.w d0,a1
   116d8:	|      move.l 4(sp),d0
   116dc:	|      move.l d0,d0
   116de:	|      movea.w d0,a0
   116e0:	|      move.l a1,-(sp)
   116e2:	|      move.l a0,-(sp)
   116e4:	|      jsr be4c <setScale>
   116ea:	|      addq.l #8,sp
	return BR_CONTINUE;
   116ec:	|      moveq #2,d0
}
   116ee:	'----> addq.l #8,sp
   116f0:	       rts

000116f2 <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   116f2:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   116f4:	       movea.l 12(sp),a0
   116f8:	       move.l 24(a0),d0
   116fc:	       move.l d0,-(sp)
   116fe:	       pea 7 <_start+0x7>
   11702:	       move.l sp,d0
   11704:	       addq.l #8,d0
   11706:	       move.l d0,-(sp)
   11708:	       jsr 14a38 <getValueType>
   1170e:	       lea 12(sp),sp
   11712:	       tst.w d0
   11714:	   ,-- bne.s 1171a <builtIn_stopCharacter+0x28>
   11716:	   |   moveq #1,d0
   11718:	,--|-- bra.s 11752 <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   1171a:	|  '-> moveq #24,d0
   1171c:	|      add.l 12(sp),d0
   11720:	|      move.l d0,-(sp)
   11722:	|      jsr 153bc <trimStack>
   11728:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   1172a:	|      move.l (sp),d0
   1172c:	|      move.l d0,-(sp)
   1172e:	|      jsr bf80 <stopPerson>
   11734:	|      addq.l #4,sp
   11736:	|      movea.w d0,a0
   11738:	|      moveq #28,d0
   1173a:	|      add.l 12(sp),d0
   1173e:	|      move.l a0,-(sp)
   11740:	|      pea 1 <_start+0x1>
   11744:	|      move.l d0,-(sp)
   11746:	|      jsr 1532a <setVariable>
   1174c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11750:	|      moveq #2,d0
}
   11752:	'----> addq.l #4,sp
   11754:	       rts

00011756 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   11756:	pea 19f5d <PutChar+0x1fa3>
   1175c:	jsr 17518 <KPrintF>
   11762:	addq.l #4,sp
	return BR_CONTINUE;
   11764:	moveq #2,d0
}
   11766:	rts

00011768 <builtIn_animate>:

builtIn(animate)
{
   11768:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   1176a:	       movea.l 16(sp),a0
   1176e:	       move.l 24(a0),d0
   11772:	       move.l d0,-(sp)
   11774:	       jsr 14f10 <getAnimationFromVar>
   1177a:	       addq.l #4,sp
   1177c:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11780:	   ,-- bne.s 11786 <builtIn_animate+0x1e>
   11782:	   |   moveq #1,d0
   11784:	,--|-- bra.s 11804 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11786:	|  '-> moveq #24,d0
   11788:	|      add.l 16(sp),d0
   1178c:	|      move.l d0,-(sp)
   1178e:	|      jsr 153bc <trimStack>
   11794:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11796:	|      movea.l 16(sp),a0
   1179a:	|      move.l 24(a0),d0
   1179e:	|      move.l d0,-(sp)
   117a0:	|      pea 7 <_start+0x7>
   117a4:	|      move.l sp,d0
   117a6:	|      addq.l #8,d0
   117a8:	|      move.l d0,-(sp)
   117aa:	|      jsr 14a38 <getValueType>
   117b0:	|      lea 12(sp),sp
   117b4:	|      tst.w d0
   117b6:	|  ,-- bne.s 117bc <builtIn_animate+0x54>
   117b8:	|  |   moveq #1,d0
   117ba:	+--|-- bra.s 11804 <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   117bc:	|  '-> moveq #24,d0
   117be:	|      add.l 16(sp),d0
   117c2:	|      move.l d0,-(sp)
   117c4:	|      jsr 153bc <trimStack>
   117ca:	|      addq.l #4,sp
	animatePerson (obj, pp);
   117cc:	|      move.l (sp),d0
   117ce:	|      move.l 4(sp),-(sp)
   117d2:	|      move.l d0,-(sp)
   117d4:	|      jsr 964e <animatePerson>
   117da:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   117dc:	|      move.l 4(sp),-(sp)
   117e0:	|      jsr bfd4 <timeForAnim>
   117e6:	|      addq.l #4,sp
   117e8:	|      move.l d0,d1
   117ea:	|      moveq #28,d0
   117ec:	|      add.l 16(sp),d0
   117f0:	|      move.l d1,-(sp)
   117f2:	|      pea 1 <_start+0x1>
   117f6:	|      move.l d0,-(sp)
   117f8:	|      jsr 1532a <setVariable>
   117fe:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11802:	|      moveq #2,d0
}
   11804:	'----> addq.l #8,sp
   11806:	       rts

00011808 <builtIn_setCostume>:

builtIn(setCostume)
{
   11808:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   1180a:	       movea.l 16(sp),a0
   1180e:	       move.l 24(a0),d0
   11812:	       move.l d0,-(sp)
   11814:	       jsr 146e4 <getCostumeFromVar>
   1181a:	       addq.l #4,sp
   1181c:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   11820:	   ,-- bne.s 11826 <builtIn_setCostume+0x1e>
   11822:	   |   moveq #1,d0
   11824:	,--|-- bra.s 1187e <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   11826:	|  '-> moveq #24,d0
   11828:	|      add.l 16(sp),d0
   1182c:	|      move.l d0,-(sp)
   1182e:	|      jsr 153bc <trimStack>
   11834:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11836:	|      movea.l 16(sp),a0
   1183a:	|      move.l 24(a0),d0
   1183e:	|      move.l d0,-(sp)
   11840:	|      pea 7 <_start+0x7>
   11844:	|      move.l sp,d0
   11846:	|      addq.l #8,d0
   11848:	|      move.l d0,-(sp)
   1184a:	|      jsr 14a38 <getValueType>
   11850:	|      lea 12(sp),sp
   11854:	|      tst.w d0
   11856:	|  ,-- bne.s 1185c <builtIn_setCostume+0x54>
   11858:	|  |   moveq #1,d0
   1185a:	+--|-- bra.s 1187e <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   1185c:	|  '-> moveq #24,d0
   1185e:	|      add.l 16(sp),d0
   11862:	|      move.l d0,-(sp)
   11864:	|      jsr 153bc <trimStack>
   1186a:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   1186c:	|      move.l (sp),d0
   1186e:	|      move.l 4(sp),-(sp)
   11872:	|      move.l d0,-(sp)
   11874:	|      jsr 9698 <animatePersonUsingPersona>
   1187a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1187c:	|      moveq #2,d0
}
   1187e:	'----> addq.l #8,sp
   11880:	       rts

00011882 <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   11882:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11884:	       movea.l 16(sp),a0
   11888:	       move.l 24(a0),d0
   1188c:	       move.l d0,-(sp)
   1188e:	       pea 1 <_start+0x1>
   11892:	       move.l sp,d0
   11894:	       addq.l #8,d0
   11896:	       move.l d0,-(sp)
   11898:	       jsr 14a38 <getValueType>
   1189e:	       lea 12(sp),sp
   118a2:	       tst.w d0
   118a4:	   ,-- bne.s 118aa <builtIn_floatCharacter+0x28>
   118a6:	   |   moveq #1,d0
   118a8:	,--|-- bra.s 1191e <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   118aa:	|  '-> moveq #24,d0
   118ac:	|      add.l 16(sp),d0
   118b0:	|      move.l d0,-(sp)
   118b2:	|      jsr 153bc <trimStack>
   118b8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   118ba:	|      movea.l 16(sp),a0
   118be:	|      move.l 24(a0),d0
   118c2:	|      move.l d0,-(sp)
   118c4:	|      pea 7 <_start+0x7>
   118c8:	|      moveq #12,d0
   118ca:	|      add.l sp,d0
   118cc:	|      move.l d0,-(sp)
   118ce:	|      jsr 14a38 <getValueType>
   118d4:	|      lea 12(sp),sp
   118d8:	|      tst.w d0
   118da:	|  ,-- bne.s 118e0 <builtIn_floatCharacter+0x5e>
   118dc:	|  |   moveq #1,d0
   118de:	+--|-- bra.s 1191e <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   118e0:	|  '-> moveq #24,d0
   118e2:	|      add.l 16(sp),d0
   118e6:	|      move.l d0,-(sp)
   118e8:	|      jsr 153bc <trimStack>
   118ee:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   118f0:	|      move.l 4(sp),d1
   118f4:	|      move.l (sp),d0
   118f6:	|      move.l d1,-(sp)
   118f8:	|      move.l d0,-(sp)
   118fa:	|      jsr a828 <floatCharacter>
   11900:	|      addq.l #8,sp
   11902:	|      movea.w d0,a0
   11904:	|      moveq #28,d0
   11906:	|      add.l 16(sp),d0
   1190a:	|      move.l a0,-(sp)
   1190c:	|      pea 1 <_start+0x1>
   11910:	|      move.l d0,-(sp)
   11912:	|      jsr 1532a <setVariable>
   11918:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1191c:	|      moveq #2,d0
}
   1191e:	'----> addq.l #8,sp
   11920:	       rts

00011922 <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   11922:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11924:	       movea.l 16(sp),a0
   11928:	       move.l 24(a0),d0
   1192c:	       move.l d0,-(sp)
   1192e:	       pea 1 <_start+0x1>
   11932:	       move.l sp,d0
   11934:	       addq.l #8,d0
   11936:	       move.l d0,-(sp)
   11938:	       jsr 14a38 <getValueType>
   1193e:	       lea 12(sp),sp
   11942:	       tst.w d0
   11944:	   ,-- bne.s 1194a <builtIn_setCharacterWalkSpeed+0x28>
   11946:	   |   moveq #1,d0
   11948:	,--|-- bra.s 119be <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   1194a:	|  '-> moveq #24,d0
   1194c:	|      add.l 16(sp),d0
   11950:	|      move.l d0,-(sp)
   11952:	|      jsr 153bc <trimStack>
   11958:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1195a:	|      movea.l 16(sp),a0
   1195e:	|      move.l 24(a0),d0
   11962:	|      move.l d0,-(sp)
   11964:	|      pea 7 <_start+0x7>
   11968:	|      moveq #12,d0
   1196a:	|      add.l sp,d0
   1196c:	|      move.l d0,-(sp)
   1196e:	|      jsr 14a38 <getValueType>
   11974:	|      lea 12(sp),sp
   11978:	|      tst.w d0
   1197a:	|  ,-- bne.s 11980 <builtIn_setCharacterWalkSpeed+0x5e>
   1197c:	|  |   moveq #1,d0
   1197e:	+--|-- bra.s 119be <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   11980:	|  '-> moveq #24,d0
   11982:	|      add.l 16(sp),d0
   11986:	|      move.l d0,-(sp)
   11988:	|      jsr 153bc <trimStack>
   1198e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   11990:	|      move.l 4(sp),d1
   11994:	|      move.l (sp),d0
   11996:	|      move.l d1,-(sp)
   11998:	|      move.l d0,-(sp)
   1199a:	|      jsr bde8 <setCharacterWalkSpeed>
   119a0:	|      addq.l #8,sp
   119a2:	|      movea.w d0,a0
   119a4:	|      moveq #28,d0
   119a6:	|      add.l 16(sp),d0
   119aa:	|      move.l a0,-(sp)
   119ac:	|      pea 1 <_start+0x1>
   119b0:	|      move.l d0,-(sp)
   119b2:	|      jsr 1532a <setVariable>
   119b8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   119bc:	|      moveq #2,d0
}
   119be:	'----> addq.l #8,sp
   119c0:	       rts

000119c2 <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   119c2:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   119c4:	       movea.l 16(sp),a0
   119c8:	       move.l 24(a0),d0
   119cc:	       move.l d0,-(sp)
   119ce:	       pea 1 <_start+0x1>
   119d2:	       move.l sp,d0
   119d4:	       addq.l #8,d0
   119d6:	       move.l d0,-(sp)
   119d8:	       jsr 14a38 <getValueType>
   119de:	       lea 12(sp),sp
   119e2:	       tst.w d0
   119e4:	   ,-- bne.s 119ea <builtIn_turnCharacter+0x28>
   119e6:	   |   moveq #1,d0
   119e8:	,--|-- bra.s 11a5e <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   119ea:	|  '-> moveq #24,d0
   119ec:	|      add.l 16(sp),d0
   119f0:	|      move.l d0,-(sp)
   119f2:	|      jsr 153bc <trimStack>
   119f8:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   119fa:	|      movea.l 16(sp),a0
   119fe:	|      move.l 24(a0),d0
   11a02:	|      move.l d0,-(sp)
   11a04:	|      pea 7 <_start+0x7>
   11a08:	|      moveq #12,d0
   11a0a:	|      add.l sp,d0
   11a0c:	|      move.l d0,-(sp)
   11a0e:	|      jsr 14a38 <getValueType>
   11a14:	|      lea 12(sp),sp
   11a18:	|      tst.w d0
   11a1a:	|  ,-- bne.s 11a20 <builtIn_turnCharacter+0x5e>
   11a1c:	|  |   moveq #1,d0
   11a1e:	+--|-- bra.s 11a5e <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11a20:	|  '-> moveq #24,d0
   11a22:	|      add.l 16(sp),d0
   11a26:	|      move.l d0,-(sp)
   11a28:	|      jsr 153bc <trimStack>
   11a2e:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   11a30:	|      move.l (sp),d1
   11a32:	|      move.l 4(sp),d0
   11a36:	|      move.l d1,-(sp)
   11a38:	|      move.l d0,-(sp)
   11a3a:	|      jsr c08c <turnPersonToFace>
   11a40:	|      addq.l #8,sp
   11a42:	|      movea.w d0,a0
   11a44:	|      moveq #28,d0
   11a46:	|      add.l 16(sp),d0
   11a4a:	|      move.l a0,-(sp)
   11a4c:	|      pea 1 <_start+0x1>
   11a50:	|      move.l d0,-(sp)
   11a52:	|      jsr 1532a <setVariable>
   11a58:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11a5c:	|      moveq #2,d0
}
   11a5e:	'----> addq.l #8,sp
   11a60:	       rts

00011a62 <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   11a62:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11a64:	       movea.l 16(sp),a0
   11a68:	       move.l 24(a0),d0
   11a6c:	       move.l d0,-(sp)
   11a6e:	       pea 1 <_start+0x1>
   11a72:	       move.l sp,d0
   11a74:	       addq.l #8,d0
   11a76:	       move.l d0,-(sp)
   11a78:	       jsr 14a38 <getValueType>
   11a7e:	       lea 12(sp),sp
   11a82:	       tst.w d0
   11a84:	   ,-- bne.s 11a8a <builtIn_setCharacterExtra+0x28>
   11a86:	   |   moveq #1,d0
   11a88:	,--|-- bra.s 11afe <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11a8a:	|  '-> moveq #24,d0
   11a8c:	|      add.l 16(sp),d0
   11a90:	|      move.l d0,-(sp)
   11a92:	|      jsr 153bc <trimStack>
   11a98:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11a9a:	|      movea.l 16(sp),a0
   11a9e:	|      move.l 24(a0),d0
   11aa2:	|      move.l d0,-(sp)
   11aa4:	|      pea 7 <_start+0x7>
   11aa8:	|      moveq #12,d0
   11aaa:	|      add.l sp,d0
   11aac:	|      move.l d0,-(sp)
   11aae:	|      jsr 14a38 <getValueType>
   11ab4:	|      lea 12(sp),sp
   11ab8:	|      tst.w d0
   11aba:	|  ,-- bne.s 11ac0 <builtIn_setCharacterExtra+0x5e>
   11abc:	|  |   moveq #1,d0
   11abe:	+--|-- bra.s 11afe <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11ac0:	|  '-> moveq #24,d0
   11ac2:	|      add.l 16(sp),d0
   11ac6:	|      move.l d0,-(sp)
   11ac8:	|      jsr 153bc <trimStack>
   11ace:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   11ad0:	|      move.l (sp),d1
   11ad2:	|      move.l 4(sp),d0
   11ad6:	|      move.l d1,-(sp)
   11ad8:	|      move.l d0,-(sp)
   11ada:	|      jsr be16 <setPersonExtra>
   11ae0:	|      addq.l #8,sp
   11ae2:	|      movea.w d0,a0
   11ae4:	|      moveq #28,d0
   11ae6:	|      add.l 16(sp),d0
   11aea:	|      move.l a0,-(sp)
   11aec:	|      pea 1 <_start+0x1>
   11af0:	|      move.l d0,-(sp)
   11af2:	|      jsr 1532a <setVariable>
   11af8:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11afc:	|      moveq #2,d0
}
   11afe:	'----> addq.l #8,sp
   11b00:	       rts

00011b02 <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   11b02:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b04:	       movea.l 12(sp),a0
   11b08:	       move.l 24(a0),d0
   11b0c:	       move.l d0,-(sp)
   11b0e:	       pea 7 <_start+0x7>
   11b12:	       move.l sp,d0
   11b14:	       addq.l #8,d0
   11b16:	       move.l d0,-(sp)
   11b18:	       jsr 14a38 <getValueType>
   11b1e:	       lea 12(sp),sp
   11b22:	       tst.w d0
   11b24:	   ,-- bne.s 11b2a <builtIn_removeCharacter+0x28>
   11b26:	   |   moveq #1,d0
   11b28:	,--|-- bra.s 11b48 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   11b2a:	|  '-> moveq #24,d0
   11b2c:	|      add.l 12(sp),d0
   11b30:	|      move.l d0,-(sp)
   11b32:	|      jsr 153bc <trimStack>
   11b38:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   11b3a:	|      move.l (sp),d0
   11b3c:	|      move.l d0,-(sp)
   11b3e:	|      jsr b016 <removeOneCharacter>
   11b44:	|      addq.l #4,sp
	return BR_CONTINUE;
   11b46:	|      moveq #2,d0
}
   11b48:	'----> addq.l #4,sp
   11b4a:	       rts

00011b4c <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   11b4c:	                lea -28(sp),sp
   11b50:	                move.l d2,-(sp)
   11b52:	                move.l 44(sp),d1
   11b56:	                move.l 48(sp),d0
   11b5a:	                move.w d1,d1
   11b5c:	                move.w d1,6(sp)
   11b60:	                move.w d0,d0
   11b62:	                move.w d0,4(sp)
	switch (numParams) {
   11b66:	                moveq #2,d0
   11b68:	                cmp.l 36(sp),d0
   11b6c:	      ,-------- beq.w 11cae <moveChr+0x162>
   11b70:	      |         moveq #3,d0
   11b72:	      |         cmp.l 36(sp),d0
   11b76:	,-----|-------- bne.w 11de2 <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b7a:	|     |         movea.l 40(sp),a0
   11b7e:	|     |         move.l 24(a0),d0
   11b82:	|     |         move.l d0,-(sp)
   11b84:	|     |         pea 1 <_start+0x1>
   11b88:	|     |         lea 20(sp),a0
   11b8c:	|     |         move.l a0,-(sp)
   11b8e:	|     |         jsr 14a38 <getValueType>
   11b94:	|     |         lea 12(sp),sp
   11b98:	|     |         tst.w d0
   11b9a:	|     |     ,-- bne.s 11ba2 <moveChr+0x56>
   11b9c:	|     |     |   moveq #1,d0
   11b9e:	|  ,--|-----|-- bra.w 11df2 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11ba2:	|  |  |     '-> moveq #24,d0
   11ba4:	|  |  |         add.l 40(sp),d0
   11ba8:	|  |  |         move.l d0,-(sp)
   11baa:	|  |  |         jsr 153bc <trimStack>
   11bb0:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11bb2:	|  |  |         movea.l 40(sp),a0
   11bb6:	|  |  |         move.l 24(a0),d0
   11bba:	|  |  |         move.l d0,-(sp)
   11bbc:	|  |  |         pea 1 <_start+0x1>
   11bc0:	|  |  |         lea 24(sp),a0
   11bc4:	|  |  |         move.l a0,-(sp)
   11bc6:	|  |  |         jsr 14a38 <getValueType>
   11bcc:	|  |  |         lea 12(sp),sp
   11bd0:	|  |  |         tst.w d0
   11bd2:	|  |  |     ,-- bne.s 11bda <moveChr+0x8e>
   11bd4:	|  |  |     |   moveq #1,d0
   11bd6:	|  +--|-----|-- bra.w 11df2 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11bda:	|  |  |     '-> moveq #24,d0
   11bdc:	|  |  |         add.l 40(sp),d0
   11be0:	|  |  |         move.l d0,-(sp)
   11be2:	|  |  |         jsr 153bc <trimStack>
   11be8:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11bea:	|  |  |         movea.l 40(sp),a0
   11bee:	|  |  |         move.l 24(a0),d0
   11bf2:	|  |  |         move.l d0,-(sp)
   11bf4:	|  |  |         pea 7 <_start+0x7>
   11bf8:	|  |  |         lea 16(sp),a0
   11bfc:	|  |  |         move.l a0,-(sp)
   11bfe:	|  |  |         jsr 14a38 <getValueType>
   11c04:	|  |  |         lea 12(sp),sp
   11c08:	|  |  |         tst.w d0
   11c0a:	|  |  |     ,-- bne.s 11c12 <moveChr+0xc6>
   11c0c:	|  |  |     |   moveq #1,d0
   11c0e:	|  +--|-----|-- bra.w 11df2 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11c12:	|  |  |     '-> moveq #24,d0
   11c14:	|  |  |         add.l 40(sp),d0
   11c18:	|  |  |         move.l d0,-(sp)
   11c1a:	|  |  |         jsr 153bc <trimStack>
   11c20:	|  |  |         addq.l #4,sp

			if (force) {
   11c22:	|  |  |         tst.w 6(sp)
   11c26:	|  |  |     ,-- beq.s 11c56 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11c28:	|  |  |     |   movea.l 8(sp),a0
   11c2c:	|  |  |     |   move.l 12(sp),d1
   11c30:	|  |  |     |   move.l 16(sp),d0
   11c34:	|  |  |     |   pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb45a3>
   11c38:	|  |  |     |   move.l 44(sp),-(sp)
   11c3c:	|  |  |     |   move.l a0,-(sp)
   11c3e:	|  |  |     |   move.l d1,-(sp)
   11c40:	|  |  |     |   move.l d0,-(sp)
   11c42:	|  |  |     |   jsr a84c <forceWalkingPerson>
   11c48:	|  |  |     |   lea 20(sp),sp
   11c4c:	|  |  |     |   tst.w d0
   11c4e:	|  |  |  ,--|-- beq.s 11ca8 <moveChr+0x15c>
   11c50:	|  |  |  |  |   moveq #3,d0
   11c52:	|  +--|--|--|-- bra.w 11df2 <moveChr+0x2a6>
			} else if (immediate) {
   11c56:	|  |  |  |  '-> tst.w 4(sp)
   11c5a:	|  |  |  |  ,-- beq.s 11c7a <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   11c5c:	|  |  |  |  |   movea.l 8(sp),a0
   11c60:	|  |  |  |  |   move.l 12(sp),d1
   11c64:	|  |  |  |  |   move.l 16(sp),d0
   11c68:	|  |  |  |  |   move.l a0,-(sp)
   11c6a:	|  |  |  |  |   move.l d1,-(sp)
   11c6c:	|  |  |  |  |   move.l d0,-(sp)
   11c6e:	|  |  |  |  |   jsr ab62 <jumpPerson>
   11c74:	|  |  |  |  |   lea 12(sp),sp
   11c78:	|  |  |  +--|-- bra.s 11ca8 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   11c7a:	|  |  |  |  '-> movea.l 8(sp),a0
   11c7e:	|  |  |  |      move.l 12(sp),d1
   11c82:	|  |  |  |      move.l 16(sp),d0
   11c86:	|  |  |  |      pea ffffffff <gcc8_c_support.c.c60c1f2b+0xfffb45a3>
   11c8a:	|  |  |  |      move.l 44(sp),-(sp)
   11c8e:	|  |  |  |      move.l a0,-(sp)
   11c90:	|  |  |  |      move.l d1,-(sp)
   11c92:	|  |  |  |      move.l d0,-(sp)
   11c94:	|  |  |  |      jsr ad32 <makeWalkingPerson>
   11c9a:	|  |  |  |      lea 20(sp),sp
   11c9e:	|  |  |  |      tst.w d0
   11ca0:	|  |  |  +----- beq.s 11ca8 <moveChr+0x15c>
   11ca2:	|  |  |  |      moveq #3,d0
   11ca4:	|  +--|--|----- bra.w 11df2 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11ca8:	|  |  |  '----> moveq #2,d0
   11caa:	|  +--|-------- bra.w 11df2 <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11cae:	|  |  '-------> movea.l 40(sp),a0
   11cb2:	|  |            move.l 24(a0),d0
   11cb6:	|  |            move.l d0,-(sp)
   11cb8:	|  |            pea 7 <_start+0x7>
   11cbc:	|  |            moveq #32,d0
   11cbe:	|  |            add.l sp,d0
   11cc0:	|  |            move.l d0,-(sp)
   11cc2:	|  |            jsr 14a38 <getValueType>
   11cc8:	|  |            lea 12(sp),sp
   11ccc:	|  |            tst.w d0
   11cce:	|  |        ,-- bne.s 11cd6 <moveChr+0x18a>
   11cd0:	|  |        |   moveq #1,d0
   11cd2:	|  +--------|-- bra.w 11df2 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11cd6:	|  |        '-> moveq #24,d0
   11cd8:	|  |            add.l 40(sp),d0
   11cdc:	|  |            move.l d0,-(sp)
   11cde:	|  |            jsr 153bc <trimStack>
   11ce4:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11ce6:	|  |            movea.l 40(sp),a0
   11cea:	|  |            move.l 24(a0),d0
   11cee:	|  |            move.l d0,-(sp)
   11cf0:	|  |            pea 7 <_start+0x7>
   11cf4:	|  |            lea 28(sp),a0
   11cf8:	|  |            move.l a0,-(sp)
   11cfa:	|  |            jsr 14a38 <getValueType>
   11d00:	|  |            lea 12(sp),sp
   11d04:	|  |            tst.w d0
   11d06:	|  |        ,-- bne.s 11d0e <moveChr+0x1c2>
   11d08:	|  |        |   moveq #1,d0
   11d0a:	|  +--------|-- bra.w 11df2 <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11d0e:	|  |        '-> moveq #24,d0
   11d10:	|  |            add.l 40(sp),d0
   11d14:	|  |            move.l d0,-(sp)
   11d16:	|  |            jsr 153bc <trimStack>
   11d1c:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11d1e:	|  |            move.l 24(sp),d0
   11d22:	|  |            move.l d0,-(sp)
   11d24:	|  |            jsr 15cfa <getRegionForObject>
   11d2a:	|  |            addq.l #4,sp
   11d2c:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   11d30:	|  |        ,-- bne.s 11d38 <moveChr+0x1ec>
   11d32:	|  |        |   moveq #2,d0
   11d34:	|  +--------|-- bra.w 11df2 <moveChr+0x2a6>

			if (force)
   11d38:	|  |        '-> tst.w 6(sp)
   11d3c:	|  |        ,-- beq.s 11d78 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11d3e:	|  |        |   movea.l 28(sp),a0
   11d42:	|  |        |   move.l 24(a0),d2
   11d46:	|  |        |   movea.l 20(sp),a1
   11d4a:	|  |        |   movea.l 28(sp),a0
   11d4e:	|  |        |   move.l 20(a0),d1
   11d52:	|  |        |   movea.l 28(sp),a0
   11d56:	|  |        |   move.l 16(a0),d0
   11d5a:	|  |        |   move.l d2,-(sp)
   11d5c:	|  |        |   move.l 44(sp),-(sp)
   11d60:	|  |        |   move.l a1,-(sp)
   11d62:	|  |        |   move.l d1,-(sp)
   11d64:	|  |        |   move.l d0,-(sp)
   11d66:	|  |        |   jsr a84c <forceWalkingPerson>
   11d6c:	|  |        |   lea 20(sp),sp
   11d70:	|  |        |   tst.w d0
   11d72:	|  |     ,--|-- beq.s 11dde <moveChr+0x292>
   11d74:	|  |     |  |   moveq #3,d0
   11d76:	|  +-----|--|-- bra.s 11df2 <moveChr+0x2a6>
			}
			else if (immediate)
   11d78:	|  |     |  '-> tst.w 4(sp)
   11d7c:	|  |     |  ,-- beq.s 11da4 <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   11d7e:	|  |     |  |   movea.l 20(sp),a1
   11d82:	|  |     |  |   movea.l 28(sp),a0
   11d86:	|  |     |  |   move.l 20(a0),d1
   11d8a:	|  |     |  |   movea.l 28(sp),a0
   11d8e:	|  |     |  |   move.l 16(a0),d0
   11d92:	|  |     |  |   move.l a1,-(sp)
   11d94:	|  |     |  |   move.l d1,-(sp)
   11d96:	|  |     |  |   move.l d0,-(sp)
   11d98:	|  |     |  |   jsr ab62 <jumpPerson>
   11d9e:	|  |     |  |   lea 12(sp),sp
   11da2:	|  |     +--|-- bra.s 11dde <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   11da4:	|  |     |  '-> movea.l 28(sp),a0
   11da8:	|  |     |      move.l 24(a0),d2
   11dac:	|  |     |      movea.l 20(sp),a1
   11db0:	|  |     |      movea.l 28(sp),a0
   11db4:	|  |     |      move.l 20(a0),d1
   11db8:	|  |     |      movea.l 28(sp),a0
   11dbc:	|  |     |      move.l 16(a0),d0
   11dc0:	|  |     |      move.l d2,-(sp)
   11dc2:	|  |     |      move.l 44(sp),-(sp)
   11dc6:	|  |     |      move.l a1,-(sp)
   11dc8:	|  |     |      move.l d1,-(sp)
   11dca:	|  |     |      move.l d0,-(sp)
   11dcc:	|  |     |      jsr ad32 <makeWalkingPerson>
   11dd2:	|  |     |      lea 20(sp),sp
   11dd6:	|  |     |      tst.w d0
   11dd8:	|  |     +----- beq.s 11dde <moveChr+0x292>
   11dda:	|  |     |      moveq #3,d0
   11ddc:	|  +-----|----- bra.s 11df2 <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11dde:	|  |     '----> moveq #2,d0
   11de0:	|  +----------- bra.s 11df2 <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   11de2:	'--|----------> pea 19f7b <PutChar+0x1fc1>
   11de8:	   |            jsr 17518 <KPrintF>
   11dee:	   |            addq.l #4,sp
			return BR_ERROR;
   11df0:	   |            moveq #1,d0
	}
}
   11df2:	   '----------> move.l (sp)+,d2
   11df4:	                lea 28(sp),sp
   11df8:	                rts

00011dfa <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11dfa:	clr.l -(sp)
   11dfc:	clr.l -(sp)
   11dfe:	move.l 16(sp),-(sp)
   11e02:	move.l 16(sp),-(sp)
   11e06:	jsr 11b4c <moveChr>
   11e0c:	lea 16(sp),sp
}
   11e10:	rts

00011e12 <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   11e12:	clr.l -(sp)
   11e14:	pea 1 <_start+0x1>
   11e18:	move.l 16(sp),-(sp)
   11e1c:	move.l 16(sp),-(sp)
   11e20:	jsr 11b4c <moveChr>
   11e26:	lea 16(sp),sp
}
   11e2a:	rts

00011e2c <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   11e2c:	pea 1 <_start+0x1>
   11e30:	clr.l -(sp)
   11e32:	move.l 16(sp),-(sp)
   11e36:	move.l 16(sp),-(sp)
   11e3a:	jsr 11b4c <moveChr>
   11e40:	lea 16(sp),sp
}
   11e44:	rts

00011e46 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   11e46:	jsr 84d0 <clearStatusBar>
	return BR_CONTINUE;
   11e4c:	moveq #2,d0
}
   11e4e:	rts

00011e50 <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   11e50:	jsr 8578 <killLastStatus>
	return BR_CONTINUE;
   11e56:	moveq #2,d0
}
   11e58:	rts

00011e5a <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   11e5a:	jsr 8466 <addStatusBar>
	return BR_CONTINUE;
   11e60:	moveq #2,d0
}
   11e62:	rts

00011e64 <builtIn_statusText>:

builtIn(statusText)
{
   11e64:	       subq.l #8,sp
   11e66:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   11e68:	       movea.l 20(sp),a0
   11e6c:	       move.l 24(a0),d0
   11e70:	       move.l d0,-(sp)
   11e72:	       jsr 1500e <getTextFromAnyVar>
   11e78:	       addq.l #4,sp
   11e7a:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   11e7e:	   ,-- bne.s 11e84 <builtIn_statusText+0x20>
   11e80:	   |   moveq #1,d0
   11e82:	,--|-- bra.s 11eb8 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   11e84:	|  '-> moveq #24,d0
   11e86:	|      add.l 20(sp),d0
   11e8a:	|      move.l d0,-(sp)
   11e8c:	|      jsr 153bc <trimStack>
   11e92:	|      addq.l #4,sp
	setStatusBar(newText);
   11e94:	|      move.l 8(sp),-(sp)
   11e98:	|      jsr 87f8 <setStatusBar>
   11e9e:	|      addq.l #4,sp
	FreeVec(newText);
   11ea0:	|      move.l 8(sp),4(sp)
   11ea6:	|      move.l 1cd66 <SysBase>,d0
   11eac:	|      movea.l d0,a6
   11eae:	|      movea.l 4(sp),a1
   11eb2:	|      jsr -690(a6)
	return BR_CONTINUE;
   11eb6:	|      moveq #2,d0
}
   11eb8:	'----> movea.l (sp)+,a6
   11eba:	       addq.l #8,sp
   11ebc:	       rts

00011ebe <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11ebe:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11ec0:	       movea.l 12(sp),a0
   11ec4:	       move.l 24(a0),d0
   11ec8:	       move.l d0,-(sp)
   11eca:	       pea 1 <_start+0x1>
   11ece:	       move.l sp,d0
   11ed0:	       addq.l #8,d0
   11ed2:	       move.l d0,-(sp)
   11ed4:	       jsr 14a38 <getValueType>
   11eda:	       lea 12(sp),sp
   11ede:	       tst.w d0
   11ee0:	   ,-- bne.s 11ee6 <builtIn_lightStatus+0x28>
   11ee2:	   |   moveq #1,d0
   11ee4:	,--|-- bra.s 11f04 <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11ee6:	|  '-> moveq #24,d0
   11ee8:	|      add.l 12(sp),d0
   11eec:	|      move.l d0,-(sp)
   11eee:	|      jsr 153bc <trimStack>
   11ef4:	|      addq.l #4,sp
	setLitStatus (val);
   11ef6:	|      move.l (sp),d0
   11ef8:	|      move.l d0,-(sp)
   11efa:	|      jsr 87e8 <setLitStatus>
   11f00:	|      addq.l #4,sp
	return BR_CONTINUE;
   11f02:	|      moveq #2,d0
}
   11f04:	'----> addq.l #4,sp
   11f06:	       rts

00011f08 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11f08:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f0a:	       movea.l 16(sp),a0
   11f0e:	       move.l 24(a0),d0
   11f12:	       move.l d0,-(sp)
   11f14:	       pea 1 <_start+0x1>
   11f18:	       move.l sp,d0
   11f1a:	       addq.l #8,d0
   11f1c:	       move.l d0,-(sp)
   11f1e:	       jsr 14a38 <getValueType>
   11f24:	       lea 12(sp),sp
   11f28:	       tst.w d0
   11f2a:	   ,-- bne.s 11f30 <builtIn_positionStatus+0x28>
   11f2c:	   |   moveq #1,d0
   11f2e:	,--|-- bra.s 11f8a <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11f30:	|  '-> moveq #24,d0
   11f32:	|      add.l 16(sp),d0
   11f36:	|      move.l d0,-(sp)
   11f38:	|      jsr 153bc <trimStack>
   11f3e:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f40:	|      movea.l 16(sp),a0
   11f44:	|      move.l 24(a0),d0
   11f48:	|      move.l d0,-(sp)
   11f4a:	|      pea 1 <_start+0x1>
   11f4e:	|      moveq #12,d0
   11f50:	|      add.l sp,d0
   11f52:	|      move.l d0,-(sp)
   11f54:	|      jsr 14a38 <getValueType>
   11f5a:	|      lea 12(sp),sp
   11f5e:	|      tst.w d0
   11f60:	|  ,-- bne.s 11f66 <builtIn_positionStatus+0x5e>
   11f62:	|  |   moveq #1,d0
   11f64:	+--|-- bra.s 11f8a <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   11f66:	|  '-> moveq #24,d0
   11f68:	|      add.l 16(sp),d0
   11f6c:	|      move.l d0,-(sp)
   11f6e:	|      jsr 153bc <trimStack>
   11f74:	|      addq.l #4,sp
	positionStatus (x, y);
   11f76:	|      move.l (sp),d1
   11f78:	|      move.l 4(sp),d0
   11f7c:	|      move.l d1,-(sp)
   11f7e:	|      move.l d0,-(sp)
   11f80:	|      jsr 85da <positionStatus>
   11f86:	|      addq.l #8,sp
	return BR_CONTINUE;
   11f88:	|      moveq #2,d0
}
   11f8a:	'----> addq.l #8,sp
   11f8c:	       rts

00011f8e <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11f8e:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11f90:	       movea.l 12(sp),a0
   11f94:	       move.l 24(a0),d0
   11f98:	       move.l d0,-(sp)
   11f9a:	       pea 1 <_start+0x1>
   11f9e:	       move.l sp,d0
   11fa0:	       addq.l #8,d0
   11fa2:	       move.l d0,-(sp)
   11fa4:	       jsr 14a38 <getValueType>
   11faa:	       lea 12(sp),sp
   11fae:	       tst.w d0
   11fb0:	   ,-- bne.s 11fb6 <builtIn_alignStatus+0x28>
   11fb2:	   |   moveq #1,d0
   11fb4:	,--|-- bra.s 11fd6 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11fb6:	|  '-> moveq #24,d0
   11fb8:	|      add.l 12(sp),d0
   11fbc:	|      move.l d0,-(sp)
   11fbe:	|      jsr 153bc <trimStack>
   11fc4:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11fc6:	|      move.l (sp),d0
   11fc8:	|      movea.l 1c6e4 <nowStatus>,a0
   11fce:	|      move.l d0,d0
   11fd0:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   11fd4:	|      moveq #2,d0
}
   11fd6:	'----> addq.l #4,sp
   11fd8:	       rts

00011fda <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11fda:	             tst.l 4(sp)
   11fde:	      ,----- beq.s 11fea <getFuncNumForCallback+0x10>
   11fe0:	      |      moveq #1,d0
   11fe2:	      |      cmp.l 4(sp),d0
   11fe6:	      |  ,-- beq.s 11ff0 <getFuncNumForCallback+0x16>
   11fe8:	   ,--|--|-- bra.s 12026 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11fea:	   |  '--|-> clr.l 12(sp)
			break;
   11fee:	,--|-----|-- bra.s 12038 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   11ff0:	|  |     '-> movea.l 8(sp),a0
   11ff4:	|  |         move.l 24(a0),d0
   11ff8:	|  |         move.l d0,-(sp)
   11ffa:	|  |         pea 2 <_start+0x2>
   11ffe:	|  |         move.l 20(sp),-(sp)
   12002:	|  |         jsr 14a38 <getValueType>
   12008:	|  |         lea 12(sp),sp
   1200c:	|  |         tst.w d0
   1200e:	|  |     ,-- bne.s 12014 <getFuncNumForCallback+0x3a>
   12010:	|  |     |   clr.w d0
   12012:	|  |  ,--|-- bra.s 1203a <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   12014:	|  |  |  '-> moveq #24,d0
   12016:	|  |  |      add.l 8(sp),d0
   1201a:	|  |  |      move.l d0,-(sp)
   1201c:	|  |  |      jsr 153bc <trimStack>
   12022:	|  |  |      addq.l #4,sp
			break;
   12024:	+--|--|----- bra.s 12038 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   12026:	|  '--|----> pea 19fb1 <PutChar+0x1ff7>
   1202c:	|     |      jsr 17518 <KPrintF>
   12032:	|     |      addq.l #4,sp
			return FALSE;
   12034:	|     |      clr.w d0
   12036:	|     +----- bra.s 1203a <getFuncNumForCallback+0x60>
	}
	return TRUE;
   12038:	'-----|----> moveq #1,d0
}
   1203a:	      '----> rts

0001203c <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   1203c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1203e:	       move.l sp,d0
   12040:	       move.l d0,-(sp)
   12042:	       move.l 16(sp),-(sp)
   12046:	       move.l 16(sp),-(sp)
   1204a:	       jsr 11fda <getFuncNumForCallback>
   12050:	       lea 12(sp),sp
   12054:	       tst.w d0
   12056:	,----- beq.s 12066 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   12058:	|      movea.l 1c6d6 <currentEvents>,a0
   1205e:	|      move.l (sp),d0
   12060:	|      move.l d0,(a0)
		return BR_CONTINUE;
   12062:	|      moveq #2,d0
   12064:	|  ,-- bra.s 12068 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   12066:	'--|-> moveq #1,d0
}
   12068:	   '-> addq.l #4,sp
   1206a:	       rts

0001206c <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   1206c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1206e:	       move.l sp,d0
   12070:	       move.l d0,-(sp)
   12072:	       move.l 16(sp),-(sp)
   12076:	       move.l 16(sp),-(sp)
   1207a:	       jsr 11fda <getFuncNumForCallback>
   12080:	       lea 12(sp),sp
   12084:	       tst.w d0
   12086:	,----- beq.s 12098 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   12088:	|      movea.l 1c6d6 <currentEvents>,a0
   1208e:	|      move.l (sp),d0
   12090:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   12094:	|      moveq #2,d0
   12096:	|  ,-- bra.s 1209a <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   12098:	'--|-> moveq #1,d0
}
   1209a:	   '-> addq.l #4,sp
   1209c:	       rts

0001209e <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   1209e:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   120a0:	       move.l sp,d0
   120a2:	       move.l d0,-(sp)
   120a4:	       move.l 16(sp),-(sp)
   120a8:	       move.l 16(sp),-(sp)
   120ac:	       jsr 11fda <getFuncNumForCallback>
   120b2:	       lea 12(sp),sp
   120b6:	       tst.w d0
   120b8:	,----- beq.s 120ca <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   120ba:	|      movea.l 1c6d6 <currentEvents>,a0
   120c0:	|      move.l (sp),d0
   120c2:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   120c6:	|      moveq #2,d0
   120c8:	|  ,-- bra.s 120cc <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   120ca:	'--|-> moveq #1,d0
}
   120cc:	   '-> addq.l #4,sp
   120ce:	       rts

000120d0 <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   120d0:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   120d2:	       move.l sp,d0
   120d4:	       move.l d0,-(sp)
   120d6:	       move.l 16(sp),-(sp)
   120da:	       move.l 16(sp),-(sp)
   120de:	       jsr 11fda <getFuncNumForCallback>
   120e4:	       lea 12(sp),sp
   120e8:	       tst.w d0
   120ea:	,----- beq.s 120fc <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   120ec:	|      movea.l 1c6d6 <currentEvents>,a0
   120f2:	|      move.l (sp),d0
   120f4:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   120f8:	|      moveq #2,d0
   120fa:	|  ,-- bra.s 120fe <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   120fc:	'--|-> moveq #1,d0
}
   120fe:	   '-> addq.l #4,sp
   12100:	       rts

00012102 <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   12102:	          subq.l #8,sp
   12104:	          move.l a2,-(sp)
	UNUSEDALL
	int functionNum;	

	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12106:	          move.l sp,d0
   12108:	          addq.l #4,d0
   1210a:	          move.l d0,-(sp)
   1210c:	          move.l 24(sp),-(sp)
   12110:	          move.l 24(sp),-(sp)
   12114:	          jsr 11fda <getFuncNumForCallback>
   1211a:	          lea 12(sp),sp
   1211e:	          tst.w d0
   12120:	,-------- beq.s 1217e <builtIn_onFocusChange+0x7c>
	{
		struct loadedFunction *oldfunc = currentEvents -> focusFunction;
   12122:	|         movea.l 1c6d6 <currentEvents>,a0
   12128:	|         move.l 20(a0),8(sp)
		if( functionNum != NULL) 
   1212e:	|         move.l 4(sp),d0
   12132:	|  ,----- beq.s 1214e <builtIn_onFocusChange+0x4c>
			currentEvents -> focusFunction = preloadNewFunctionNum(functionNum);		
   12134:	|  |      move.l 4(sp),d0
   12138:	|  |      movea.l 1c6d6 <currentEvents>,a2
   1213e:	|  |      move.l d0,-(sp)
   12140:	|  |      jsr 72e4 <preloadNewFunctionNum>
   12146:	|  |      addq.l #4,sp
   12148:	|  |      move.l d0,20(a2)
   1214c:	|  |  ,-- bra.s 12158 <builtIn_onFocusChange+0x56>
		else
			currentEvents -> focusFunction = NULL;
   1214e:	|  '--|-> movea.l 1c6d6 <currentEvents>,a0
   12154:	|     |   clr.l 20(a0)

		if( oldfunc != NULL && oldfunc != currentEvents -> focusFunction )
   12158:	|     '-> tst.l 8(sp)
   1215c:	|     ,-- beq.s 1217a <builtIn_onFocusChange+0x78>
   1215e:	|     |   movea.l 1c6d6 <currentEvents>,a0
   12164:	|     |   move.l 20(a0),d0
   12168:	|     |   cmp.l 8(sp),d0
   1216c:	|     +-- beq.s 1217a <builtIn_onFocusChange+0x78>
		{
			unloadFunction(oldfunc);
   1216e:	|     |   move.l 8(sp),-(sp)
   12172:	|     |   jsr 7752 <unloadFunction>
   12178:	|     |   addq.l #4,sp
		}
		

		return BR_CONTINUE;
   1217a:	|     '-> moveq #2,d0
   1217c:	|     ,-- bra.s 12180 <builtIn_onFocusChange+0x7e>
	}
	return BR_ERROR;
   1217e:	'-----|-> moveq #1,d0
}
   12180:	      '-> movea.l (sp)+,a2
   12182:	          addq.l #8,sp
   12184:	          rts

00012186 <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   12186:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12188:	       move.l sp,d0
   1218a:	       move.l d0,-(sp)
   1218c:	       move.l 16(sp),-(sp)
   12190:	       move.l 16(sp),-(sp)
   12194:	       jsr 11fda <getFuncNumForCallback>
   1219a:	       lea 12(sp),sp
   1219e:	       tst.w d0
   121a0:	,----- beq.s 121b2 <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   121a2:	|      movea.l 1c6d6 <currentEvents>,a0
   121a8:	|      move.l (sp),d0
   121aa:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   121ae:	|      moveq #2,d0
   121b0:	|  ,-- bra.s 121b4 <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   121b2:	'--|-> moveq #1,d0
}
   121b4:	   '-> addq.l #4,sp
   121b6:	       rts

000121b8 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   121b8:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   121ba:	       move.l sp,d0
   121bc:	       move.l d0,-(sp)
   121be:	       move.l 16(sp),-(sp)
   121c2:	       move.l 16(sp),-(sp)
   121c6:	       jsr 11fda <getFuncNumForCallback>
   121cc:	       lea 12(sp),sp
   121d0:	       tst.w d0
   121d2:	,----- beq.s 121e4 <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   121d4:	|      movea.l 1c6d6 <currentEvents>,a0
   121da:	|      move.l (sp),d0
   121dc:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   121e0:	|      moveq #2,d0
   121e2:	|  ,-- bra.s 121e6 <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   121e4:	'--|-> moveq #1,d0
}
   121e6:	   '-> addq.l #4,sp
   121e8:	       rts

000121ea <builtIn_spawnSub>:

builtIn (spawnSub)
{
   121ea:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   121ec:	          move.l sp,d0
   121ee:	          move.l d0,-(sp)
   121f0:	          move.l 16(sp),-(sp)
   121f4:	          move.l 16(sp),-(sp)
   121f8:	          jsr 11fda <getFuncNumForCallback>
   121fe:	          lea 12(sp),sp
   12202:	          tst.w d0
   12204:	,-------- beq.s 12230 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   12206:	|         move.l 1cd36 <noStack>,d1
   1220c:	|         move.l (sp),d0
   1220e:	|         pea 1 <_start+0x1>
   12212:	|         move.l d1,-(sp)
   12214:	|         clr.l -(sp)
   12216:	|         clr.l -(sp)
   12218:	|         move.l d0,-(sp)
   1221a:	|         jsr 76a6 <startNewFunctionNum>
   12220:	|         lea 20(sp),sp
   12224:	|         tst.l d0
   12226:	|     ,-- bne.s 1222c <builtIn_spawnSub+0x42>
   12228:	|     |   moveq #1,d0
   1222a:	|  ,--|-- bra.s 12232 <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   1222c:	|  |  '-> moveq #2,d0
   1222e:	|  +----- bra.s 12232 <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   12230:	'--|----> moveq #1,d0
}
   12232:	   '----> addq.l #4,sp
   12234:	          rts

00012236 <builtIn_cancelSub>:

builtIn (cancelSub)
{
   12236:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   12238:	          move.l sp,d0
   1223a:	          addq.l #4,d0
   1223c:	          move.l d0,-(sp)
   1223e:	          move.l 20(sp),-(sp)
   12242:	          move.l 20(sp),-(sp)
   12246:	          jsr 11fda <getFuncNumForCallback>
   1224c:	          lea 12(sp),sp
   12250:	          tst.w d0
   12252:	,-------- beq.s 12288 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   12254:	|         move.l 4(sp),d1
   12258:	|         move.l sp,d0
   1225a:	|         addq.l #2,d0
   1225c:	|         move.l d0,-(sp)
   1225e:	|         move.l 20(sp),-(sp)
   12262:	|         move.l d1,-(sp)
   12264:	|         jsr 52e6 <cancelAFunction>
   1226a:	|         lea 12(sp),sp
		if (killedMyself) {
   1226e:	|         move.w 2(sp),d0
   12272:	|  ,----- beq.s 12284 <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   12274:	|  |      move.l 16(sp),-(sp)
   12278:	|  |      jsr 51d8 <abortFunction>
   1227e:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   12280:	|  |      moveq #5,d0
   12282:	|  |  ,-- bra.s 1228a <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   12284:	|  '--|-> moveq #2,d0
   12286:	|     +-- bra.s 1228a <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   12288:	'-----|-> moveq #1,d0
}
   1228a:	      '-> addq.l #8,sp
   1228c:	          rts

0001228e <builtIn_stringWidth>:

builtIn(stringWidth)
{
   1228e:	       subq.l #8,sp
   12290:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   12292:	       movea.l 20(sp),a0
   12296:	       move.l 24(a0),d0
   1229a:	       move.l d0,-(sp)
   1229c:	       jsr 1500e <getTextFromAnyVar>
   122a2:	       addq.l #4,sp
   122a4:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   122a8:	   ,-- bne.s 122ae <builtIn_stringWidth+0x20>
   122aa:	   |   moveq #1,d0
   122ac:	,--|-- bra.s 122fc <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   122ae:	|  '-> moveq #24,d0
   122b0:	|      add.l 20(sp),d0
   122b4:	|      move.l d0,-(sp)
   122b6:	|      jsr 153bc <trimStack>
   122bc:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   122be:	|      move.l 8(sp),-(sp)
   122c2:	|      jsr 15b22 <stringWidth>
   122c8:	|      addq.l #4,sp
   122ca:	|      move.l d0,d1
   122cc:	|      moveq #28,d0
   122ce:	|      add.l 20(sp),d0
   122d2:	|      move.l d1,-(sp)
   122d4:	|      pea 1 <_start+0x1>
   122d8:	|      move.l d0,-(sp)
   122da:	|      jsr 1532a <setVariable>
   122e0:	|      lea 12(sp),sp
	FreeVec(theText);
   122e4:	|      move.l 8(sp),4(sp)
   122ea:	|      move.l 1cd66 <SysBase>,d0
   122f0:	|      movea.l d0,a6
   122f2:	|      movea.l 4(sp),a1
   122f6:	|      jsr -690(a6)
	return BR_CONTINUE;
   122fa:	|      moveq #2,d0
}
   122fc:	'----> movea.l (sp)+,a6
   122fe:	       addq.l #8,sp
   12300:	       rts

00012302 <builtIn_hardScroll>:

builtIn(hardScroll)
{
   12302:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12304:	       movea.l 12(sp),a0
   12308:	       move.l 24(a0),d0
   1230c:	       move.l d0,-(sp)
   1230e:	       pea 1 <_start+0x1>
   12312:	       move.l sp,d0
   12314:	       addq.l #8,d0
   12316:	       move.l d0,-(sp)
   12318:	       jsr 14a38 <getValueType>
   1231e:	       lea 12(sp),sp
   12322:	       tst.w d0
   12324:	   ,-- bne.s 1232a <builtIn_hardScroll+0x28>
   12326:	   |   moveq #1,d0
   12328:	,--|-- bra.s 12348 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   1232a:	|  '-> moveq #24,d0
   1232c:	|      add.l 12(sp),d0
   12330:	|      move.l d0,-(sp)
   12332:	|      jsr 153bc <trimStack>
   12338:	|      addq.l #4,sp
	hardScroll (v);
   1233a:	|      move.l (sp),d0
   1233c:	|      move.l d0,-(sp)
   1233e:	|      jsr d49e <hardScroll>
   12344:	|      addq.l #4,sp
	return BR_CONTINUE;
   12346:	|      moveq #2,d0
}
   12348:	'----> addq.l #4,sp
   1234a:	       rts

0001234c <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   1234c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1234e:	       movea.l 12(sp),a0
   12352:	       move.l 24(a0),d0
   12356:	       move.l d0,-(sp)
   12358:	       pea 7 <_start+0x7>
   1235c:	       move.l sp,d0
   1235e:	       addq.l #8,d0
   12360:	       move.l d0,-(sp)
   12362:	       jsr 14a38 <getValueType>
   12368:	       lea 12(sp),sp
   1236c:	       tst.w d0
   1236e:	   ,-- bne.s 12374 <builtIn_isScreenRegion+0x28>
   12370:	   |   moveq #1,d0
   12372:	,--|-- bra.s 123b4 <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   12374:	|  '-> moveq #24,d0
   12376:	|      add.l 12(sp),d0
   1237a:	|      move.l d0,-(sp)
   1237c:	|      jsr 153bc <trimStack>
   12382:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   12384:	|      move.l (sp),d0
   12386:	|      move.l d0,-(sp)
   12388:	|      jsr 15cfa <getRegionForObject>
   1238e:	|      addq.l #4,sp
   12390:	|      tst.l d0
   12392:	|      sne d0
   12394:	|      neg.b d0
   12396:	|      moveq #0,d1
   12398:	|      move.b d0,d1
   1239a:	|      moveq #28,d0
   1239c:	|      add.l 12(sp),d0
   123a0:	|      move.l d1,-(sp)
   123a2:	|      pea 1 <_start+0x1>
   123a6:	|      move.l d0,-(sp)
   123a8:	|      jsr 1532a <setVariable>
   123ae:	|      lea 12(sp),sp
	return BR_CONTINUE;
   123b2:	|      moveq #2,d0
}
   123b4:	'----> addq.l #4,sp
   123b6:	       rts

000123b8 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   123b8:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   123ba:	       movea.l 12(sp),a0
   123be:	       move.l 24(a0),d0
   123c2:	       move.l d0,-(sp)
   123c4:	       pea 1 <_start+0x1>
   123c8:	       move.l sp,d0
   123ca:	       addq.l #8,d0
   123cc:	       move.l d0,-(sp)
   123ce:	       jsr 14a38 <getValueType>
   123d4:	       lea 12(sp),sp
   123d8:	       tst.w d0
   123da:	   ,-- bne.s 123e0 <builtIn_setSpeechSpeed+0x28>
   123dc:	   |   moveq #1,d0
   123de:	,--|-- bra.s 1242e <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   123e0:	|  '-> moveq #24,d0
   123e2:	|      add.l 12(sp),d0
   123e6:	|      move.l d0,-(sp)
   123e8:	|      jsr 153bc <trimStack>
   123ee:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   123f0:	|      move.l (sp),d0
   123f2:	|      move.l d0,-(sp)
   123f4:	|      jsr 1794a <__floatsisf>
   123fa:	|      addq.l #4,sp
   123fc:	|      move.l #1008981770,-(sp)
   12402:	|      move.l d0,-(sp)
   12404:	|      jsr 179fc <__mulsf3>
   1240a:	|      addq.l #8,sp
   1240c:	|      move.l d0,1c6d0 <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   12412:	|      moveq #28,d0
   12414:	|      add.l 12(sp),d0
   12418:	|      pea 1 <_start+0x1>
   1241c:	|      pea 1 <_start+0x1>
   12420:	|      move.l d0,-(sp)
   12422:	|      jsr 1532a <setVariable>
   12428:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1242c:	|      moveq #2,d0
}
   1242e:	'----> addq.l #4,sp
   12430:	       rts

00012432 <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   12432:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12434:	       movea.l 12(sp),a0
   12438:	       move.l 24(a0),d0
   1243c:	       move.l d0,-(sp)
   1243e:	       pea 1 <_start+0x1>
   12442:	       move.l sp,d0
   12444:	       addq.l #8,d0
   12446:	       move.l d0,-(sp)
   12448:	       jsr 14a38 <getValueType>
   1244e:	       lea 12(sp),sp
   12452:	       tst.w d0
   12454:	   ,-- bne.s 1245a <builtIn_setFontSpacing+0x28>
   12456:	   |   moveq #1,d0
   12458:	,--|-- bra.s 12490 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   1245a:	|  '-> move.l (sp),d0
   1245c:	|      move.l d0,d0
   1245e:	|      move.w d0,1cc5e <fontSpace>
	trimStack (&fun -> stack);
   12464:	|      moveq #24,d0
   12466:	|      add.l 12(sp),d0
   1246a:	|      move.l d0,-(sp)
   1246c:	|      jsr 153bc <trimStack>
   12472:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12474:	|      moveq #28,d0
   12476:	|      add.l 12(sp),d0
   1247a:	|      pea 1 <_start+0x1>
   1247e:	|      pea 1 <_start+0x1>
   12482:	|      move.l d0,-(sp)
   12484:	|      jsr 1532a <setVariable>
   1248a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1248e:	|      moveq #2,d0
}
   12490:	'----> addq.l #4,sp
   12492:	       rts

00012494 <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   12494:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12496:	          movea.l 12(sp),a0
   1249a:	          move.l 24(a0),d0
   1249e:	          move.l d0,-(sp)
   124a0:	          pea 1 <_start+0x1>
   124a4:	          move.l sp,d0
   124a6:	          addq.l #8,d0
   124a8:	          move.l d0,-(sp)
   124aa:	          jsr 14a38 <getValueType>
   124b0:	          lea 12(sp),sp
   124b4:	          tst.w d0
   124b6:	      ,-- bne.s 124bc <builtIn_transitionLevel+0x28>
   124b8:	      |   moveq #1,d0
   124ba:	,-----|-- bra.s 12510 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   124bc:	|     '-> moveq #24,d0
   124be:	|         add.l 12(sp),d0
   124c2:	|         move.l d0,-(sp)
   124c4:	|         jsr 153bc <trimStack>
   124ca:	|         addq.l #4,sp

	if (number < 0)
   124cc:	|         move.l (sp),d0
   124ce:	|     ,-- bpl.s 124d8 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   124d0:	|     |   clr.b 1c6d4 <brightnessLevel>
   124d6:	|  ,--|-- bra.s 124f4 <builtIn_transitionLevel+0x60>
	else if (number > 255)
   124d8:	|  |  '-> move.l (sp),d0
   124da:	|  |      cmpi.l #255,d0
   124e0:	|  |  ,-- ble.s 124ea <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   124e2:	|  |  |   st 1c6d4 <brightnessLevel>
   124e8:	|  +--|-- bra.s 124f4 <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   124ea:	|  |  '-> move.l (sp),d0
   124ec:	|  |      move.l d0,d0
   124ee:	|  |      move.b d0,1c6d4 <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   124f4:	|  '----> moveq #28,d0
   124f6:	|         add.l 12(sp),d0
   124fa:	|         pea 1 <_start+0x1>
   124fe:	|         pea 1 <_start+0x1>
   12502:	|         move.l d0,-(sp)
   12504:	|         jsr 1532a <setVariable>
   1250a:	|         lea 12(sp),sp
	return BR_CONTINUE;
   1250e:	|         moveq #2,d0
}
   12510:	'-------> addq.l #4,sp
   12512:	          rts

00012514 <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   12514:	movea.l 8(sp),a0
   12518:	move.l 24(a0),d0
   1251c:	move.l d0,-(sp)
   1251e:	jsr 14f78 <getBoolean>
   12524:	addq.l #4,sp
   12526:	move.w d0,1cd06 <captureAllKeys>
	trimStack (&fun -> stack);
   1252c:	moveq #24,d0
   1252e:	add.l 8(sp),d0
   12532:	move.l d0,-(sp)
   12534:	jsr 153bc <trimStack>
   1253a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   1253c:	move.w 1cd06 <captureAllKeys>,d0
   12542:	movea.w d0,a0
   12544:	moveq #28,d0
   12546:	add.l 8(sp),d0
   1254a:	move.l a0,-(sp)
   1254c:	pea 1 <_start+0x1>
   12550:	move.l d0,-(sp)
   12552:	jsr 1532a <setVariable>
   12558:	lea 12(sp),sp
	return BR_CONTINUE;
   1255c:	moveq #2,d0
}
   1255e:	rts

00012560 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   12560:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12564:	       movea.l 20(sp),a0
   12568:	       move.l 24(a0),d0
   1256c:	       move.l d0,-(sp)
   1256e:	       pea 1 <_start+0x1>
   12572:	       moveq #12,d0
   12574:	       add.l sp,d0
   12576:	       move.l d0,-(sp)
   12578:	       jsr 14a38 <getValueType>
   1257e:	       lea 12(sp),sp
   12582:	       tst.w d0
   12584:	   ,-- bne.s 1258c <builtIn_spinCharacter+0x2c>
   12586:	   |   moveq #1,d0
   12588:	,--|-- bra.w 1263c <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   1258c:	|  '-> moveq #24,d0
   1258e:	|      add.l 20(sp),d0
   12592:	|      move.l d0,-(sp)
   12594:	|      jsr 153bc <trimStack>
   1259a:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1259c:	|      movea.l 20(sp),a0
   125a0:	|      move.l 24(a0),d0
   125a4:	|      move.l d0,-(sp)
   125a6:	|      pea 7 <_start+0x7>
   125aa:	|      lea 8(sp),a0
   125ae:	|      move.l a0,-(sp)
   125b0:	|      jsr 14a38 <getValueType>
   125b6:	|      lea 12(sp),sp
   125ba:	|      tst.w d0
   125bc:	|  ,-- bne.s 125c2 <builtIn_spinCharacter+0x62>
   125be:	|  |   moveq #1,d0
   125c0:	+--|-- bra.s 1263c <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   125c2:	|  '-> moveq #24,d0
   125c4:	|      add.l 20(sp),d0
   125c8:	|      move.l d0,-(sp)
   125ca:	|      jsr 153bc <trimStack>
   125d0:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   125d2:	|      move.l (sp),d0
   125d4:	|      move.l d0,-(sp)
   125d6:	|      jsr a7de <findPerson>
   125dc:	|      addq.l #4,sp
   125de:	|      move.l d0,8(sp)
	if (thisPerson) {
   125e2:	|  ,-- beq.s 12622 <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   125e4:	|  |   move.l 4(sp),d0
   125e8:	|  |   movea.l 8(sp),a0
   125ec:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   125f0:	|  |   movea.l 8(sp),a0
   125f4:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   125fa:	|  |   movea.l 8(sp),a0
   125fe:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12604:	|  |   moveq #28,d0
   12606:	|  |   add.l 20(sp),d0
   1260a:	|  |   pea 1 <_start+0x1>
   1260e:	|  |   pea 1 <_start+0x1>
   12612:	|  |   move.l d0,-(sp)
   12614:	|  |   jsr 1532a <setVariable>
   1261a:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   1261e:	|  |   moveq #3,d0
   12620:	+--|-- bra.s 1263c <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12622:	|  '-> moveq #28,d0
   12624:	|      add.l 20(sp),d0
   12628:	|      clr.l -(sp)
   1262a:	|      pea 1 <_start+0x1>
   1262e:	|      move.l d0,-(sp)
   12630:	|      jsr 1532a <setVariable>
   12636:	|      lea 12(sp),sp
		return BR_CONTINUE;
   1263a:	|      moveq #2,d0
	}
}
   1263c:	'----> lea 12(sp),sp
   12640:	       rts

00012642 <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   12642:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12644:	          movea.l 16(sp),a0
   12648:	          move.l 24(a0),d0
   1264c:	          move.l d0,-(sp)
   1264e:	          pea 7 <_start+0x7>
   12652:	          move.l sp,d0
   12654:	          addq.l #8,d0
   12656:	          move.l d0,-(sp)
   12658:	          jsr 14a38 <getValueType>
   1265e:	          lea 12(sp),sp
   12662:	          tst.w d0
   12664:	      ,-- bne.s 1266a <builtIn_getCharacterDirection+0x28>
   12666:	      |   moveq #1,d0
   12668:	,-----|-- bra.s 126c8 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   1266a:	|     '-> moveq #24,d0
   1266c:	|         add.l 16(sp),d0
   12670:	|         move.l d0,-(sp)
   12672:	|         jsr 153bc <trimStack>
   12678:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1267a:	|         move.l (sp),d0
   1267c:	|         move.l d0,-(sp)
   1267e:	|         jsr a7de <findPerson>
   12684:	|         addq.l #4,sp
   12686:	|         move.l d0,4(sp)
	if (thisPerson) {
   1268a:	|  ,----- beq.s 126ae <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   1268c:	|  |      movea.l 4(sp),a0
   12690:	|  |      move.l 106(a0),d1
   12694:	|  |      moveq #28,d0
   12696:	|  |      add.l 16(sp),d0
   1269a:	|  |      move.l d1,-(sp)
   1269c:	|  |      pea 1 <_start+0x1>
   126a0:	|  |      move.l d0,-(sp)
   126a2:	|  |      jsr 1532a <setVariable>
   126a8:	|  |      lea 12(sp),sp
   126ac:	|  |  ,-- bra.s 126c6 <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   126ae:	|  '--|-> moveq #28,d0
   126b0:	|     |   add.l 16(sp),d0
   126b4:	|     |   clr.l -(sp)
   126b6:	|     |   pea 1 <_start+0x1>
   126ba:	|     |   move.l d0,-(sp)
   126bc:	|     |   jsr 1532a <setVariable>
   126c2:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   126c6:	|     '-> moveq #2,d0
}
   126c8:	'-------> addq.l #8,sp
   126ca:	          rts

000126cc <builtIn_isCharacter>:

builtIn(isCharacter)
{
   126cc:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   126ce:	       movea.l 16(sp),a0
   126d2:	       move.l 24(a0),d0
   126d6:	       move.l d0,-(sp)
   126d8:	       pea 7 <_start+0x7>
   126dc:	       move.l sp,d0
   126de:	       addq.l #8,d0
   126e0:	       move.l d0,-(sp)
   126e2:	       jsr 14a38 <getValueType>
   126e8:	       lea 12(sp),sp
   126ec:	       tst.w d0
   126ee:	   ,-- bne.s 126f4 <builtIn_isCharacter+0x28>
   126f0:	   |   moveq #1,d0
   126f2:	,--|-- bra.s 12736 <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   126f4:	|  '-> moveq #24,d0
   126f6:	|      add.l 16(sp),d0
   126fa:	|      move.l d0,-(sp)
   126fc:	|      jsr 153bc <trimStack>
   12702:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12704:	|      move.l (sp),d0
   12706:	|      move.l d0,-(sp)
   12708:	|      jsr a7de <findPerson>
   1270e:	|      addq.l #4,sp
   12710:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   12714:	|      sne d0
   12716:	|      neg.b d0
   12718:	|      moveq #0,d1
   1271a:	|      move.b d0,d1
   1271c:	|      moveq #28,d0
   1271e:	|      add.l 16(sp),d0
   12722:	|      move.l d1,-(sp)
   12724:	|      pea 1 <_start+0x1>
   12728:	|      move.l d0,-(sp)
   1272a:	|      jsr 1532a <setVariable>
   12730:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12734:	|      moveq #2,d0
}
   12736:	'----> addq.l #8,sp
   12738:	       rts

0001273a <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   1273a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1273c:	          movea.l 16(sp),a0
   12740:	          move.l 24(a0),d0
   12744:	          move.l d0,-(sp)
   12746:	          pea 7 <_start+0x7>
   1274a:	          move.l sp,d0
   1274c:	          addq.l #8,d0
   1274e:	          move.l d0,-(sp)
   12750:	          jsr 14a38 <getValueType>
   12756:	          lea 12(sp),sp
   1275a:	          tst.w d0
   1275c:	      ,-- bne.s 12762 <builtIn_normalCharacter+0x28>
   1275e:	      |   moveq #1,d0
   12760:	,-----|-- bra.s 127de <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   12762:	|     '-> moveq #24,d0
   12764:	|         add.l 16(sp),d0
   12768:	|         move.l d0,-(sp)
   1276a:	|         jsr 153bc <trimStack>
   12770:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12772:	|         move.l (sp),d0
   12774:	|         move.l d0,-(sp)
   12776:	|         jsr a7de <findPerson>
   1277c:	|         addq.l #4,sp
   1277e:	|         move.l d0,4(sp)
	if (thisPerson)
   12782:	|  ,----- beq.s 127c4 <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   12784:	|  |      movea.l 4(sp),a0
   12788:	|  |      movea.l 80(a0),a0
   1278c:	|  |      move.l (a0),d1
   1278e:	|  |      movea.l 4(sp),a0
   12792:	|  |      move.l 106(a0),d0
   12796:	|  |      add.l d0,d0
   12798:	|  |      add.l d0,d0
   1279a:	|  |      movea.l d1,a0
   1279c:	|  |      adda.l d0,a0
   1279e:	|  |      move.l (a0),d0
   127a0:	|  |      movea.l 4(sp),a0
   127a4:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   127a8:	|  |      moveq #28,d0
   127aa:	|  |      add.l 16(sp),d0
   127ae:	|  |      pea 1 <_start+0x1>
   127b2:	|  |      pea 1 <_start+0x1>
   127b6:	|  |      move.l d0,-(sp)
   127b8:	|  |      jsr 1532a <setVariable>
   127be:	|  |      lea 12(sp),sp
   127c2:	|  |  ,-- bra.s 127dc <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   127c4:	|  '--|-> moveq #28,d0
   127c6:	|     |   add.l 16(sp),d0
   127ca:	|     |   clr.l -(sp)
   127cc:	|     |   pea 1 <_start+0x1>
   127d0:	|     |   move.l d0,-(sp)
   127d2:	|     |   jsr 1532a <setVariable>
   127d8:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   127dc:	|     '-> moveq #2,d0
}
   127de:	'-------> addq.l #8,sp
   127e0:	          rts

000127e2 <builtIn_isMoving>:

builtIn(isMoving)
{
   127e2:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   127e4:	          movea.l 16(sp),a0
   127e8:	          move.l 24(a0),d0
   127ec:	          move.l d0,-(sp)
   127ee:	          pea 7 <_start+0x7>
   127f2:	          move.l sp,d0
   127f4:	          addq.l #8,d0
   127f6:	          move.l d0,-(sp)
   127f8:	          jsr 14a38 <getValueType>
   127fe:	          lea 12(sp),sp
   12802:	          tst.w d0
   12804:	      ,-- bne.s 1280a <builtIn_isMoving+0x28>
   12806:	      |   moveq #1,d0
   12808:	,-----|-- bra.s 1286a <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   1280a:	|     '-> moveq #24,d0
   1280c:	|         add.l 16(sp),d0
   12810:	|         move.l d0,-(sp)
   12812:	|         jsr 153bc <trimStack>
   12818:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   1281a:	|         move.l (sp),d0
   1281c:	|         move.l d0,-(sp)
   1281e:	|         jsr a7de <findPerson>
   12824:	|         addq.l #4,sp
   12826:	|         move.l d0,4(sp)
	if (thisPerson)
   1282a:	|  ,----- beq.s 12850 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   1282c:	|  |      movea.l 4(sp),a0
   12830:	|  |      move.w 64(a0),d0
   12834:	|  |      movea.w d0,a0
   12836:	|  |      moveq #28,d0
   12838:	|  |      add.l 16(sp),d0
   1283c:	|  |      move.l a0,-(sp)
   1283e:	|  |      pea 1 <_start+0x1>
   12842:	|  |      move.l d0,-(sp)
   12844:	|  |      jsr 1532a <setVariable>
   1284a:	|  |      lea 12(sp),sp
   1284e:	|  |  ,-- bra.s 12868 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12850:	|  '--|-> moveq #28,d0
   12852:	|     |   add.l 16(sp),d0
   12856:	|     |   clr.l -(sp)
   12858:	|     |   pea 1 <_start+0x1>
   1285c:	|     |   move.l d0,-(sp)
   1285e:	|     |   jsr 1532a <setVariable>
   12864:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12868:	|     '-> moveq #2,d0
}
   1286a:	'-------> addq.l #8,sp
   1286c:	          rts

0001286e <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   1286e:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12872:	          movea.l 20(sp),a0
   12876:	          move.l 24(a0),d0
   1287a:	          move.l d0,-(sp)
   1287c:	          pea 7 <_start+0x7>
   12880:	          lea 8(sp),a0
   12884:	          move.l a0,-(sp)
   12886:	          jsr 14a38 <getValueType>
   1288c:	          lea 12(sp),sp
   12890:	          tst.w d0
   12892:	      ,-- bne.s 1289a <builtIn_fetchEvent+0x2c>
   12894:	      |   moveq #1,d0
   12896:	,-----|-- bra.w 1292e <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   1289a:	|     '-> moveq #24,d0
   1289c:	|         add.l 20(sp),d0
   128a0:	|         move.l d0,-(sp)
   128a2:	|         jsr 153bc <trimStack>
   128a8:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   128aa:	|         movea.l 20(sp),a0
   128ae:	|         move.l 24(a0),d0
   128b2:	|         move.l d0,-(sp)
   128b4:	|         pea 7 <_start+0x7>
   128b8:	|         moveq #12,d0
   128ba:	|         add.l sp,d0
   128bc:	|         move.l d0,-(sp)
   128be:	|         jsr 14a38 <getValueType>
   128c4:	|         lea 12(sp),sp
   128c8:	|         tst.w d0
   128ca:	|     ,-- bne.s 128d0 <builtIn_fetchEvent+0x62>
   128cc:	|     |   moveq #1,d0
   128ce:	+-----|-- bra.s 1292e <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   128d0:	|     '-> moveq #24,d0
   128d2:	|         add.l 20(sp),d0
   128d6:	|         move.l d0,-(sp)
   128d8:	|         jsr 153bc <trimStack>
   128de:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   128e0:	|         move.l (sp),d1
   128e2:	|         move.l 4(sp),d0
   128e6:	|         move.l d1,-(sp)
   128e8:	|         move.l d0,-(sp)
   128ea:	|         jsr d780 <getCombinationFunction>
   128f0:	|         addq.l #8,sp
   128f2:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   128f6:	|  ,----- beq.s 12914 <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   128f8:	|  |      moveq #28,d0
   128fa:	|  |      add.l 20(sp),d0
   128fe:	|  |      move.l 8(sp),-(sp)
   12902:	|  |      pea 2 <_start+0x2>
   12906:	|  |      move.l d0,-(sp)
   12908:	|  |      jsr 1532a <setVariable>
   1290e:	|  |      lea 12(sp),sp
   12912:	|  |  ,-- bra.s 1292c <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12914:	|  '--|-> moveq #28,d0
   12916:	|     |   add.l 20(sp),d0
   1291a:	|     |   clr.l -(sp)
   1291c:	|     |   pea 1 <_start+0x1>
   12920:	|     |   move.l d0,-(sp)
   12922:	|     |   jsr 1532a <setVariable>
   12928:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   1292c:	|     '-> moveq #2,d0
}
   1292e:	'-------> lea 12(sp),sp
   12932:	          rts

00012934 <builtIn_deleteFile>:

builtIn(deleteFile)
{
   12934:	       lea -24(sp),sp
   12938:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   1293a:	       movea.l 36(sp),a0
   1293e:	       move.l 24(a0),d0
   12942:	       move.l d0,-(sp)
   12944:	       jsr 1500e <getTextFromAnyVar>
   1294a:	       addq.l #4,sp
   1294c:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12950:	       moveq #24,d0
   12952:	       add.l 36(sp),d0
   12956:	       move.l d0,-(sp)
   12958:	       jsr 153bc <trimStack>
   1295e:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12960:	       move.l 24(sp),-(sp)
   12964:	       jsr 2fe <encodeFilename>
   1296a:	       addq.l #4,sp
   1296c:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12970:	       move.l 24(sp),16(sp)
   12976:	       move.l 1cd66 <SysBase>,d0
   1297c:	       movea.l d0,a6
   1297e:	       movea.l 16(sp),a1
   12982:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   12986:	       move.l 20(sp),-(sp)
   1298a:	       jsr e538 <failSecurityCheck>
   12990:	       addq.l #4,sp
   12992:	       tst.w d0
   12994:	   ,-- beq.s 1299a <builtIn_deleteFile+0x66>
   12996:	   |   moveq #1,d0
   12998:	,--|-- bra.s 129e8 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   1299a:	|  '-> move.l 20(sp),12(sp)
   129a0:	|      move.l 1cd6e <DOSBase>,d0
   129a6:	|      movea.l d0,a6
   129a8:	|      move.l 12(sp),d1
   129ac:	|      jsr -72(a6)
   129b0:	|      move.l d0,8(sp)
   129b4:	|      move.l 8(sp),d1
   129b8:	|      moveq #28,d0
   129ba:	|      add.l 36(sp),d0
   129be:	|      move.l d1,-(sp)
   129c0:	|      pea 1 <_start+0x1>
   129c4:	|      move.l d0,-(sp)
   129c6:	|      jsr 1532a <setVariable>
   129cc:	|      lea 12(sp),sp
    FreeVec(nam);
   129d0:	|      move.l 20(sp),4(sp)
   129d6:	|      move.l 1cd66 <SysBase>,d0
   129dc:	|      movea.l d0,a6
   129de:	|      movea.l 4(sp),a1
   129e2:	|      jsr -690(a6)

    return BR_CONTINUE;
   129e6:	|      moveq #2,d0
}
   129e8:	'----> movea.l (sp)+,a6
   129ea:	       lea 24(sp),sp
   129ee:	       rts

000129f0 <builtIn_renameFile>:

builtIn(renameFile)
{
   129f0:	       lea -40(sp),sp
   129f4:	       move.l a6,-(sp)
   129f6:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   129f8:	       movea.l 56(sp),a0
   129fc:	       move.l 24(a0),d0
   12a00:	       move.l d0,-(sp)
   12a02:	       jsr 1500e <getTextFromAnyVar>
   12a08:	       addq.l #4,sp
   12a0a:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   12a0e:	       move.l 44(sp),-(sp)
   12a12:	       jsr 2fe <encodeFilename>
   12a18:	       addq.l #4,sp
   12a1a:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   12a1e:	       moveq #24,d0
   12a20:	       add.l 56(sp),d0
   12a24:	       move.l d0,-(sp)
   12a26:	       jsr 153bc <trimStack>
   12a2c:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   12a2e:	       move.l 40(sp),-(sp)
   12a32:	       jsr e538 <failSecurityCheck>
   12a38:	       addq.l #4,sp
   12a3a:	       tst.w d0
   12a3c:	   ,-- beq.s 12a44 <builtIn_renameFile+0x54>
   12a3e:	   |   moveq #1,d0
   12a40:	,--|-- bra.w 12b2a <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12a44:	|  '-> move.l 44(sp),36(sp)
   12a4a:	|      move.l 1cd66 <SysBase>,d0
   12a50:	|      movea.l d0,a6
   12a52:	|      movea.l 36(sp),a1
   12a56:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12a5a:	|      movea.l 56(sp),a0
   12a5e:	|      move.l 24(a0),d0
   12a62:	|      move.l d0,-(sp)
   12a64:	|      jsr 1500e <getTextFromAnyVar>
   12a6a:	|      addq.l #4,sp
   12a6c:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12a70:	|      move.l 44(sp),-(sp)
   12a74:	|      jsr 2fe <encodeFilename>
   12a7a:	|      addq.l #4,sp
   12a7c:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   12a80:	|      moveq #24,d0
   12a82:	|      add.l 56(sp),d0
   12a86:	|      move.l d0,-(sp)
   12a88:	|      jsr 153bc <trimStack>
   12a8e:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   12a90:	|      move.l 32(sp),-(sp)
   12a94:	|      jsr e538 <failSecurityCheck>
   12a9a:	|      addq.l #4,sp
   12a9c:	|      tst.w d0
   12a9e:	|  ,-- beq.s 12aa6 <builtIn_renameFile+0xb6>
   12aa0:	|  |   moveq #1,d0
   12aa2:	+--|-- bra.w 12b2a <builtIn_renameFile+0x13a>
	FreeVec(temp);
   12aa6:	|  '-> move.l 44(sp),28(sp)
   12aac:	|      move.l 1cd66 <SysBase>,d0
   12ab2:	|      movea.l d0,a6
   12ab4:	|      movea.l 28(sp),a1
   12ab8:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   12abc:	|      move.l 32(sp),24(sp)
   12ac2:	|      move.l 40(sp),20(sp)
   12ac8:	|      move.l 1cd6e <DOSBase>,d0
   12ace:	|      movea.l d0,a6
   12ad0:	|      move.l 24(sp),d1
   12ad4:	|      move.l 20(sp),d2
   12ad8:	|      jsr -78(a6)
   12adc:	|      move.l d0,16(sp)
   12ae0:	|      move.l 16(sp),d1
   12ae4:	|      moveq #28,d0
   12ae6:	|      add.l 56(sp),d0
   12aea:	|      move.l d1,-(sp)
   12aec:	|      pea 1 <_start+0x1>
   12af0:	|      move.l d0,-(sp)
   12af2:	|      jsr 1532a <setVariable>
   12af8:	|      lea 12(sp),sp
	FreeVec(nam);
   12afc:	|      move.l 32(sp),12(sp)
   12b02:	|      move.l 1cd66 <SysBase>,d0
   12b08:	|      movea.l d0,a6
   12b0a:	|      movea.l 12(sp),a1
   12b0e:	|      jsr -690(a6)
	FreeVec(newnam);
   12b12:	|      move.l 40(sp),8(sp)
   12b18:	|      move.l 1cd66 <SysBase>,d0
   12b1e:	|      movea.l d0,a6
   12b20:	|      movea.l 8(sp),a1
   12b24:	|      jsr -690(a6)

	return BR_CONTINUE;
   12b28:	|      moveq #2,d0
}
   12b2a:	'----> move.l (sp)+,d2
   12b2c:	       movea.l (sp)+,a6
   12b2e:	       lea 40(sp),sp
   12b32:	       rts

00012b34 <builtIn_cacheSound>:

builtIn(cacheSound)
{
   12b34:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12b36:	       movea.l 12(sp),a0
   12b3a:	       move.l 24(a0),d0
   12b3e:	       move.l d0,-(sp)
   12b40:	       pea 5 <_start+0x5>
   12b44:	       move.l sp,d0
   12b46:	       addq.l #8,d0
   12b48:	       move.l d0,-(sp)
   12b4a:	       jsr 14a38 <getValueType>
   12b50:	       lea 12(sp),sp
   12b54:	       tst.w d0
   12b56:	   ,-- bne.s 12b5c <builtIn_cacheSound+0x28>
   12b58:	   |   moveq #1,d0
   12b5a:	,--|-- bra.s 12b84 <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12b5c:	|  '-> moveq #24,d0
   12b5e:	|      add.l 12(sp),d0
   12b62:	|      move.l d0,-(sp)
   12b64:	|      jsr 153bc <trimStack>
   12b6a:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12b6c:	|      move.l (sp),d0
   12b6e:	|      move.l d0,-(sp)
   12b70:	|      jsr d376 <cacheSound>
   12b76:	|      addq.l #4,sp
   12b78:	|      moveq #-1,d1
   12b7a:	|      cmp.l d0,d1
   12b7c:	|  ,-- bne.s 12b82 <builtIn_cacheSound+0x4e>
   12b7e:	|  |   moveq #1,d0
   12b80:	+--|-- bra.s 12b84 <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   12b82:	|  '-> moveq #2,d0
}
   12b84:	'----> addq.l #4,sp
   12b86:	       rts

00012b88 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   12b88:	pea 19fc6 <PutChar+0x200c>
   12b8e:	jsr 17518 <KPrintF>
   12b94:	addq.l #4,sp
	return BR_CONTINUE;
   12b96:	moveq #2,d0
}
   12b98:	rts

00012b9a <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   12b9a:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12b9e:	          movea.l 20(sp),a0
   12ba2:	          move.l 24(a0),d0
   12ba6:	          move.l d0,-(sp)
   12ba8:	          pea 1 <_start+0x1>
   12bac:	          moveq #12,d0
   12bae:	          add.l sp,d0
   12bb0:	          move.l d0,-(sp)
   12bb2:	          jsr 14a38 <getValueType>
   12bb8:	          lea 12(sp),sp
   12bbc:	          tst.w d0
   12bbe:	      ,-- bne.s 12bc6 <builtIn_setCharacterSpinSpeed+0x2c>
   12bc0:	      |   moveq #1,d0
   12bc2:	,-----|-- bra.w 12c60 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12bc6:	|     '-> moveq #24,d0
   12bc8:	|         add.l 20(sp),d0
   12bcc:	|         move.l d0,-(sp)
   12bce:	|         jsr 153bc <trimStack>
   12bd4:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12bd6:	|         movea.l 20(sp),a0
   12bda:	|         move.l 24(a0),d0
   12bde:	|         move.l d0,-(sp)
   12be0:	|         pea 7 <_start+0x7>
   12be4:	|         lea 8(sp),a0
   12be8:	|         move.l a0,-(sp)
   12bea:	|         jsr 14a38 <getValueType>
   12bf0:	|         lea 12(sp),sp
   12bf4:	|         tst.w d0
   12bf6:	|     ,-- bne.s 12bfc <builtIn_setCharacterSpinSpeed+0x62>
   12bf8:	|     |   moveq #1,d0
   12bfa:	+-----|-- bra.s 12c60 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12bfc:	|     '-> moveq #24,d0
   12bfe:	|         add.l 20(sp),d0
   12c02:	|         move.l d0,-(sp)
   12c04:	|         jsr 153bc <trimStack>
   12c0a:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12c0c:	|         move.l (sp),d0
   12c0e:	|         move.l d0,-(sp)
   12c10:	|         jsr a7de <findPerson>
   12c16:	|         addq.l #4,sp
   12c18:	|         move.l d0,8(sp)

	if (thisPerson) {
   12c1c:	|  ,----- beq.s 12c46 <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12c1e:	|  |      move.l 4(sp),d0
   12c22:	|  |      movea.l 8(sp),a0
   12c26:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12c2a:	|  |      moveq #28,d0
   12c2c:	|  |      add.l 20(sp),d0
   12c30:	|  |      pea 1 <_start+0x1>
   12c34:	|  |      pea 1 <_start+0x1>
   12c38:	|  |      move.l d0,-(sp)
   12c3a:	|  |      jsr 1532a <setVariable>
   12c40:	|  |      lea 12(sp),sp
   12c44:	|  |  ,-- bra.s 12c5e <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12c46:	|  '--|-> moveq #28,d0
   12c48:	|     |   add.l 20(sp),d0
   12c4c:	|     |   clr.l -(sp)
   12c4e:	|     |   pea 1 <_start+0x1>
   12c52:	|     |   move.l d0,-(sp)
   12c54:	|     |   jsr 1532a <setVariable>
   12c5a:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12c5e:	|     '-> moveq #2,d0
}
   12c60:	'-------> lea 12(sp),sp
   12c64:	          rts

00012c66 <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   12c66:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c6a:	          movea.l 20(sp),a0
   12c6e:	          move.l 24(a0),d0
   12c72:	          move.l d0,-(sp)
   12c74:	          pea 1 <_start+0x1>
   12c78:	          moveq #12,d0
   12c7a:	          add.l sp,d0
   12c7c:	          move.l d0,-(sp)
   12c7e:	          jsr 14a38 <getValueType>
   12c84:	          lea 12(sp),sp
   12c88:	          tst.w d0
   12c8a:	      ,-- bne.s 12c92 <builtIn_setCharacterAngleOffset+0x2c>
   12c8c:	      |   moveq #1,d0
   12c8e:	,-----|-- bra.w 12d2c <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12c92:	|     '-> moveq #24,d0
   12c94:	|         add.l 20(sp),d0
   12c98:	|         move.l d0,-(sp)
   12c9a:	|         jsr 153bc <trimStack>
   12ca0:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12ca2:	|         movea.l 20(sp),a0
   12ca6:	|         move.l 24(a0),d0
   12caa:	|         move.l d0,-(sp)
   12cac:	|         pea 7 <_start+0x7>
   12cb0:	|         lea 8(sp),a0
   12cb4:	|         move.l a0,-(sp)
   12cb6:	|         jsr 14a38 <getValueType>
   12cbc:	|         lea 12(sp),sp
   12cc0:	|         tst.w d0
   12cc2:	|     ,-- bne.s 12cc8 <builtIn_setCharacterAngleOffset+0x62>
   12cc4:	|     |   moveq #1,d0
   12cc6:	+-----|-- bra.s 12d2c <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   12cc8:	|     '-> moveq #24,d0
   12cca:	|         add.l 20(sp),d0
   12cce:	|         move.l d0,-(sp)
   12cd0:	|         jsr 153bc <trimStack>
   12cd6:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12cd8:	|         move.l (sp),d0
   12cda:	|         move.l d0,-(sp)
   12cdc:	|         jsr a7de <findPerson>
   12ce2:	|         addq.l #4,sp
   12ce4:	|         move.l d0,8(sp)

	if (thisPerson) {
   12ce8:	|  ,----- beq.s 12d12 <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12cea:	|  |      move.l 4(sp),d0
   12cee:	|  |      movea.l 8(sp),a0
   12cf2:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12cf6:	|  |      moveq #28,d0
   12cf8:	|  |      add.l 20(sp),d0
   12cfc:	|  |      pea 1 <_start+0x1>
   12d00:	|  |      pea 1 <_start+0x1>
   12d04:	|  |      move.l d0,-(sp)
   12d06:	|  |      jsr 1532a <setVariable>
   12d0c:	|  |      lea 12(sp),sp
   12d10:	|  |  ,-- bra.s 12d2a <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12d12:	|  '--|-> moveq #28,d0
   12d14:	|     |   add.l 20(sp),d0
   12d18:	|     |   clr.l -(sp)
   12d1a:	|     |   pea 1 <_start+0x1>
   12d1e:	|     |   move.l d0,-(sp)
   12d20:	|     |   jsr 1532a <setVariable>
   12d26:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12d2a:	|     '-> moveq #2,d0
}
   12d2c:	'-------> lea 12(sp),sp
   12d30:	          rts

00012d32 <builtIn_transitionMode>:


builtIn(transitionMode)
{
   12d32:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12d34:	       movea.l 12(sp),a0
   12d38:	       move.l 24(a0),d0
   12d3c:	       move.l d0,-(sp)
   12d3e:	       pea 1 <_start+0x1>
   12d42:	       move.l sp,d0
   12d44:	       addq.l #8,d0
   12d46:	       move.l d0,-(sp)
   12d48:	       jsr 14a38 <getValueType>
   12d4e:	       lea 12(sp),sp
   12d52:	       tst.w d0
   12d54:	   ,-- bne.s 12d5a <builtIn_transitionMode+0x28>
   12d56:	   |   moveq #1,d0
   12d58:	,--|-- bra.s 12d90 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12d5a:	|  '-> move.l (sp),d0
   12d5c:	|      move.l d0,d0
   12d5e:	|      move.b d0,1cc34 <fadeMode>
	trimStack (&fun -> stack);
   12d64:	|      moveq #24,d0
   12d66:	|      add.l 12(sp),d0
   12d6a:	|      move.l d0,-(sp)
   12d6c:	|      jsr 153bc <trimStack>
   12d72:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12d74:	|      moveq #28,d0
   12d76:	|      add.l 12(sp),d0
   12d7a:	|      pea 1 <_start+0x1>
   12d7e:	|      pea 1 <_start+0x1>
   12d82:	|      move.l d0,-(sp)
   12d84:	|      jsr 1532a <setVariable>
   12d8a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12d8e:	|      moveq #2,d0
}
   12d90:	'----> addq.l #4,sp
   12d92:	       rts

00012d94 <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12d94:	moveq #24,d0
   12d96:	add.l 8(sp),d0
   12d9a:	move.l d0,-(sp)
   12d9c:	jsr 153bc <trimStack>
   12da2:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   12da4:	moveq #28,d0
   12da6:	add.l 8(sp),d0
   12daa:	pea 1 <_start+0x1>
   12dae:	pea 1 <_start+0x1>
   12db2:	move.l d0,-(sp)
   12db4:	jsr 1532a <setVariable>
   12dba:	lea 12(sp),sp
	return BR_CONTINUE;
   12dbe:	moveq #2,d0
}
   12dc0:	rts

00012dc2 <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   12dc2:	pea 19ff0 <PutChar+0x2036>
   12dc8:	jsr 17518 <KPrintF>
   12dce:	addq.l #4,sp
	return BR_CONTINUE;
   12dd0:	moveq #2,d0
}
   12dd2:	rts

00012dd4 <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   12dd4:	       lea -16(sp),sp
   12dd8:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12dda:	       movea.l 28(sp),a0
   12dde:	       move.l 24(a0),d0
   12de2:	       move.l d0,-(sp)
   12de4:	       jsr 1500e <getTextFromAnyVar>
   12dea:	       addq.l #4,sp
   12dec:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12df0:	   ,-- bne.s 12df8 <builtIn_saveCustomData+0x24>
   12df2:	   |   moveq #1,d0
   12df4:	,--|-- bra.w 12eaa <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12df8:	|  '-> move.l 16(sp),-(sp)
   12dfc:	|      jsr 2fe <encodeFilename>
   12e02:	|      addq.l #4,sp
   12e04:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12e08:	|      move.l 16(sp),8(sp)
   12e0e:	|      move.l 1cd66 <SysBase>,d0
   12e14:	|      movea.l d0,a6
   12e16:	|      movea.l 8(sp),a1
   12e1a:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12e1e:	|      move.l 12(sp),-(sp)
   12e22:	|      jsr e538 <failSecurityCheck>
   12e28:	|      addq.l #4,sp
   12e2a:	|      tst.w d0
   12e2c:	|  ,-- beq.s 12e32 <builtIn_saveCustomData+0x5e>
   12e2e:	|  |   moveq #1,d0
   12e30:	+--|-- bra.s 12eaa <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12e32:	|  '-> moveq #24,d0
   12e34:	|      add.l 28(sp),d0
   12e38:	|      move.l d0,-(sp)
   12e3a:	|      jsr 153bc <trimStack>
   12e40:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   12e42:	|      movea.l 28(sp),a0
   12e46:	|      movea.l 24(a0),a0
   12e4a:	|      move.l (a0),d0
   12e4c:	|      moveq #6,d1
   12e4e:	|      cmp.l d0,d1
   12e50:	|  ,-- beq.s 12e64 <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   12e52:	|  |   pea 1a01d <PutChar+0x2063>
   12e58:	|  |   jsr 17518 <KPrintF>
   12e5e:	|  |   addq.l #4,sp
		return BR_ERROR;
   12e60:	|  |   moveq #1,d0
   12e62:	+--|-- bra.s 12eaa <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   12e64:	|  '-> movea.l 28(sp),a0
   12e68:	|      move.l 24(a0),d0
   12e6c:	|      move.l d0,-(sp)
   12e6e:	|      move.l 16(sp),-(sp)
   12e72:	|      jsr e188 <stackToFile>
   12e78:	|      addq.l #8,sp
   12e7a:	|      tst.w d0
   12e7c:	|  ,-- bne.s 12e82 <builtIn_saveCustomData+0xae>
   12e7e:	|  |   moveq #1,d0
   12e80:	+--|-- bra.s 12eaa <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   12e82:	|  '-> moveq #24,d0
   12e84:	|      add.l 28(sp),d0
   12e88:	|      move.l d0,-(sp)
   12e8a:	|      jsr 153bc <trimStack>
   12e90:	|      addq.l #4,sp
	FreeVec(fileName);
   12e92:	|      move.l 12(sp),4(sp)
   12e98:	|      move.l 1cd66 <SysBase>,d0
   12e9e:	|      movea.l d0,a6
   12ea0:	|      movea.l 4(sp),a1
   12ea4:	|      jsr -690(a6)
	return BR_CONTINUE;
   12ea8:	|      moveq #2,d0
}
   12eaa:	'----> movea.l (sp)+,a6
   12eac:	       lea 16(sp),sp
   12eb0:	       rts

00012eb2 <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   12eb2:	       lea -28(sp),sp
   12eb6:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   12eb8:	       movea.l 40(sp),a0
   12ebc:	       move.l 24(a0),d0
   12ec0:	       move.l d0,-(sp)
   12ec2:	       jsr 1500e <getTextFromAnyVar>
   12ec8:	       addq.l #4,sp
   12eca:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   12ece:	   ,-- bne.s 12ed6 <builtIn_loadCustomData+0x24>
   12ed0:	   |   moveq #1,d0
   12ed2:	,--|-- bra.w 12fd2 <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   12ed6:	|  '-> move.l 28(sp),-(sp)
   12eda:	|      jsr 2fe <encodeFilename>
   12ee0:	|      addq.l #4,sp
   12ee2:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   12ee6:	|      move.l 28(sp),20(sp)
   12eec:	|      move.l 1cd66 <SysBase>,d0
   12ef2:	|      movea.l d0,a6
   12ef4:	|      movea.l 20(sp),a1
   12ef8:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12efc:	|      move.l 24(sp),-(sp)
   12f00:	|      jsr e538 <failSecurityCheck>
   12f06:	|      addq.l #4,sp
   12f08:	|      tst.w d0
   12f0a:	|  ,-- beq.s 12f12 <builtIn_loadCustomData+0x60>
   12f0c:	|  |   moveq #1,d0
   12f0e:	+--|-- bra.w 12fd2 <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   12f12:	|  '-> moveq #24,d0
   12f14:	|      add.l 40(sp),d0
   12f18:	|      move.l d0,-(sp)
   12f1a:	|      jsr 153bc <trimStack>
   12f20:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   12f22:	|      moveq #28,d0
   12f24:	|      add.l 40(sp),d0
   12f28:	|      move.l d0,-(sp)
   12f2a:	|      jsr 14c86 <unlinkVar>
   12f30:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   12f32:	|      movea.l 40(sp),a0
   12f36:	|      moveq #6,d0
   12f38:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12f3c:	|      moveq #12,d0
   12f3e:	|      move.l d0,16(sp)
   12f42:	|      clr.l 12(sp)
   12f46:	|      move.l 1cd66 <SysBase>,d0
   12f4c:	|      movea.l d0,a6
   12f4e:	|      move.l 16(sp),d0
   12f52:	|      move.l 12(sp),d1
   12f56:	|      jsr -684(a6)
   12f5a:	|      move.l d0,8(sp)
   12f5e:	|      move.l 8(sp),d0
   12f62:	|      movea.l 40(sp),a0
   12f66:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12f6a:	|      movea.l 40(sp),a0
   12f6e:	|      move.l 32(a0),d0
   12f72:	|  ,-- bne.s 12f78 <builtIn_loadCustomData+0xc6>
   12f74:	|  |   moveq #1,d0
   12f76:	+--|-- bra.s 12fd2 <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   12f78:	|  '-> movea.l 40(sp),a0
   12f7c:	|      movea.l 32(a0),a0
   12f80:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   12f82:	|      movea.l 40(sp),a0
   12f86:	|      movea.l 32(a0),a0
   12f8a:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   12f8e:	|      movea.l 40(sp),a0
   12f92:	|      movea.l 32(a0),a0
   12f96:	|      moveq #1,d0
   12f98:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   12f9c:	|      movea.l 40(sp),a0
   12fa0:	|      move.l 32(a0),d0
   12fa4:	|      move.l d0,-(sp)
   12fa6:	|      move.l 28(sp),-(sp)
   12faa:	|      jsr dbc2 <fileToStack>
   12fb0:	|      addq.l #8,sp
   12fb2:	|      tst.w d0
   12fb4:	|  ,-- bne.s 12fba <builtIn_loadCustomData+0x108>
   12fb6:	|  |   moveq #1,d0
   12fb8:	+--|-- bra.s 12fd2 <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   12fba:	|  '-> move.l 24(sp),4(sp)
   12fc0:	|      move.l 1cd66 <SysBase>,d0
   12fc6:	|      movea.l d0,a6
   12fc8:	|      movea.l 4(sp),a1
   12fcc:	|      jsr -690(a6)
	return BR_CONTINUE;
   12fd0:	|      moveq #2,d0
}
   12fd2:	'----> movea.l (sp)+,a6
   12fd4:	       lea 28(sp),sp
   12fd8:	       rts

00012fda <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12fda:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12fdc:	       movea.l 12(sp),a0
   12fe0:	       move.l 24(a0),d0
   12fe4:	       move.l d0,-(sp)
   12fe6:	       pea 1 <_start+0x1>
   12fea:	       move.l sp,d0
   12fec:	       addq.l #8,d0
   12fee:	       move.l d0,-(sp)
   12ff0:	       jsr 14a38 <getValueType>
   12ff6:	       lea 12(sp),sp
   12ffa:	       tst.w d0
   12ffc:	   ,-- bne.s 13002 <builtIn_setCustomEncoding+0x28>
   12ffe:	   |   moveq #1,d0
   13000:	,--|-- bra.s 13038 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   13002:	|  '-> move.l (sp),d0
   13004:	|      move.l d0,d0
   13006:	|      move.w d0,1ce1a <saveEncoding>
	trimStack (&fun -> stack);
   1300c:	|      moveq #24,d0
   1300e:	|      add.l 12(sp),d0
   13012:	|      move.l d0,-(sp)
   13014:	|      jsr 153bc <trimStack>
   1301a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1301c:	|      moveq #28,d0
   1301e:	|      add.l 12(sp),d0
   13022:	|      pea 1 <_start+0x1>
   13026:	|      pea 1 <_start+0x1>
   1302a:	|      move.l d0,-(sp)
   1302c:	|      jsr 1532a <setVariable>
   13032:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13036:	|      moveq #2,d0
}
   13038:	'----> addq.l #4,sp
   1303a:	       rts

0001303c <builtIn_freeSound>:

builtIn(freeSound)
{
   1303c:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1303e:	       movea.l 12(sp),a0
   13042:	       move.l 24(a0),d0
   13046:	       move.l d0,-(sp)
   13048:	       pea 5 <_start+0x5>
   1304c:	       move.l sp,d0
   1304e:	       addq.l #8,d0
   13050:	       move.l d0,-(sp)
   13052:	       jsr 14a38 <getValueType>
   13058:	       lea 12(sp),sp
   1305c:	       tst.w d0
   1305e:	   ,-- bne.s 13064 <builtIn_freeSound+0x28>
   13060:	   |   moveq #1,d0
   13062:	,--|-- bra.s 13082 <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   13064:	|  '-> moveq #24,d0
   13066:	|      add.l 12(sp),d0
   1306a:	|      move.l d0,-(sp)
   1306c:	|      jsr 153bc <trimStack>
   13072:	|      addq.l #4,sp
	huntKillFreeSound (v);
   13074:	|      move.l (sp),d0
   13076:	|      move.l d0,-(sp)
   13078:	|      jsr d37a <huntKillFreeSound>
   1307e:	|      addq.l #4,sp
	return BR_CONTINUE;
   13080:	|      moveq #2,d0
}
   13082:	'----> addq.l #4,sp
   13084:	       rts

00013086 <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   13086:	       lea -12(sp),sp
   1308a:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1308c:	       movea.l 24(sp),a0
   13090:	       move.l 24(a0),d0
   13094:	       move.l d0,-(sp)
   13096:	       pea 1 <_start+0x1>
   1309a:	       moveq #16,d0
   1309c:	       add.l sp,d0
   1309e:	       move.l d0,-(sp)
   130a0:	       jsr 14a38 <getValueType>
   130a6:	       lea 12(sp),sp
   130aa:	       tst.w d0
   130ac:	   ,-- bne.s 130b4 <builtIn_parallaxAdd+0x2e>
   130ae:	   |   moveq #1,d0
   130b0:	,--|-- bra.w 13188 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   130b4:	|  '-> moveq #24,d0
   130b6:	|      add.l 24(sp),d0
   130ba:	|      move.l d0,-(sp)
   130bc:	|      jsr 153bc <trimStack>
   130c2:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   130c4:	|      movea.l 24(sp),a0
   130c8:	|      move.l 24(a0),d0
   130cc:	|      move.l d0,-(sp)
   130ce:	|      pea 1 <_start+0x1>
   130d2:	|      moveq #20,d0
   130d4:	|      add.l sp,d0
   130d6:	|      move.l d0,-(sp)
   130d8:	|      jsr 14a38 <getValueType>
   130de:	|      lea 12(sp),sp
   130e2:	|      tst.w d0
   130e4:	|  ,-- bne.s 130ec <builtIn_parallaxAdd+0x66>
   130e6:	|  |   moveq #1,d0
   130e8:	+--|-- bra.w 13188 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   130ec:	|  '-> moveq #24,d0
   130ee:	|      add.l 24(sp),d0
   130f2:	|      move.l d0,-(sp)
   130f4:	|      jsr 153bc <trimStack>
   130fa:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   130fc:	|      movea.l 24(sp),a0
   13100:	|      move.l 24(a0),d0
   13104:	|      move.l d0,-(sp)
   13106:	|      pea 5 <_start+0x5>
   1310a:	|      lea 12(sp),a0
   1310e:	|      move.l a0,-(sp)
   13110:	|      jsr 14a38 <getValueType>
   13116:	|      lea 12(sp),sp
   1311a:	|      tst.w d0
   1311c:	|  ,-- bne.s 13122 <builtIn_parallaxAdd+0x9c>
   1311e:	|  |   moveq #1,d0
   13120:	+--|-- bra.s 13188 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   13122:	|  '-> moveq #24,d0
   13124:	|      add.l 24(sp),d0
   13128:	|      move.l d0,-(sp)
   1312a:	|      jsr 153bc <trimStack>
   13130:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   13132:	|      move.l 8(sp),d0
   13136:	|      move.l d0,d0
   13138:	|      moveq #0,d2
   1313a:	|      move.w d0,d2
   1313c:	|      move.l 12(sp),d0
   13140:	|      move.l d0,d0
   13142:	|      moveq #0,d1
   13144:	|      move.w d0,d1
   13146:	|      move.l 4(sp),d0
   1314a:	|      move.l d0,d0
   1314c:	|      move.w d0,d0
   1314e:	|      andi.l #65535,d0
   13154:	|      move.l d2,-(sp)
   13156:	|      move.l d1,-(sp)
   13158:	|      move.l d0,-(sp)
   1315a:	|      jsr d5a0 <loadParallax>
   13160:	|      lea 12(sp),sp
   13164:	|      tst.w d0
   13166:	|  ,-- bne.s 1316c <builtIn_parallaxAdd+0xe6>
   13168:	|  |   moveq #1,d0
   1316a:	+--|-- bra.s 13188 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   1316c:	|  '-> moveq #28,d0
   1316e:	|      add.l 24(sp),d0
   13172:	|      pea 1 <_start+0x1>
   13176:	|      pea 1 <_start+0x1>
   1317a:	|      move.l d0,-(sp)
   1317c:	|      jsr 1532a <setVariable>
   13182:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   13186:	|      moveq #2,d0
}
   13188:	'----> move.l (sp)+,d2
   1318a:	       lea 12(sp),sp
   1318e:	       rts

00013190 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   13190:	jsr d4d8 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   13196:	moveq #28,d0
   13198:	add.l 8(sp),d0
   1319c:	pea 1 <_start+0x1>
   131a0:	pea 1 <_start+0x1>
   131a4:	move.l d0,-(sp)
   131a6:	jsr 1532a <setVariable>
   131ac:	lea 12(sp),sp
	return BR_CONTINUE;
   131b0:	moveq #2,d0
}
   131b2:	rts

000131b4 <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   131b4:	pea 1a03b <talk.c.490538ff+0x11>
   131ba:	jsr 17518 <KPrintF>
   131c0:	addq.l #4,sp

	return BR_CONTINUE;
   131c2:	moveq #2,d0
}
   131c4:	rts

000131c6 <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   131c6:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   131c8:	             movea.l 16(sp),a0
   131cc:	             movea.l 24(a0),a0
   131d0:	             move.l (a0),d0
   131d2:	             moveq #1,d1
   131d4:	             cmp.l d0,d1
   131d6:	      ,----- beq.s 1321e <builtIn_makeFastArray+0x58>
   131d8:	      |      moveq #6,d1
   131da:	      |      cmp.l d0,d1
   131dc:	,-----|----- bne.s 1325c <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   131de:	|     |      movea.l 16(sp),a0
   131e2:	|     |      movea.l 24(a0),a0
   131e6:	|     |      move.l 4(a0),d1
   131ea:	|     |      moveq #28,d0
   131ec:	|     |      add.l 16(sp),d0
   131f0:	|     |      move.l d1,-(sp)
   131f2:	|     |      move.l d0,-(sp)
   131f4:	|     |      jsr 14aea <makeFastArrayFromStack>
   131fa:	|     |      addq.l #8,sp
   131fc:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   13200:	|     |      moveq #24,d0
   13202:	|     |      add.l 16(sp),d0
   13206:	|     |      move.l d0,-(sp)
   13208:	|     |      jsr 153bc <trimStack>
   1320e:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   13210:	|     |      tst.w 6(sp)
   13214:	|     |  ,-- beq.s 1321a <builtIn_makeFastArray+0x54>
   13216:	|     |  |   moveq #2,d0
   13218:	|  ,--|--|-- bra.s 1326e <builtIn_makeFastArray+0xa8>
   1321a:	|  |  |  '-> moveq #1,d0
   1321c:	|  +--|----- bra.s 1326e <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   1321e:	|  |  '----> movea.l 16(sp),a0
   13222:	|  |         movea.l 24(a0),a0
   13226:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   1322c:	|  |         moveq #24,d0
   1322e:	|  |         add.l 16(sp),d0
   13232:	|  |         move.l d0,-(sp)
   13234:	|  |         jsr 153bc <trimStack>
   1323a:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   1323c:	|  |         moveq #28,d0
   1323e:	|  |         add.l 16(sp),d0
   13242:	|  |         move.l 2(sp),-(sp)
   13246:	|  |         move.l d0,-(sp)
   13248:	|  |         jsr 14b54 <makeFastArraySize>
   1324e:	|  |         addq.l #8,sp
   13250:	|  |         tst.w d0
   13252:	|  |     ,-- beq.s 13258 <builtIn_makeFastArray+0x92>
   13254:	|  |     |   moveq #2,d0
   13256:	|  +-----|-- bra.s 1326e <builtIn_makeFastArray+0xa8>
   13258:	|  |     '-> moveq #1,d0
   1325a:	|  +-------- bra.s 1326e <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   1325c:	'--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   1325e:	   |         pea 1a064 <talk.c.490538ff+0x3a>
   13264:	   |         jsr 17518 <KPrintF>
   1326a:	   |         addq.l #4,sp
	return BR_ERROR;
   1326c:	   |         moveq #1,d0
}
   1326e:	   '-------> addq.l #8,sp
   13270:	             rts

00013272 <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   13272:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   13274:	          movea.l 16(sp),a0
   13278:	          move.l 24(a0),d0
   1327c:	          move.l d0,-(sp)
   1327e:	          pea 7 <_start+0x7>
   13282:	          move.l sp,d0
   13284:	          addq.l #8,d0
   13286:	          move.l d0,-(sp)
   13288:	          jsr 14a38 <getValueType>
   1328e:	          lea 12(sp),sp
   13292:	          tst.w d0
   13294:	      ,-- bne.s 1329a <builtIn_getCharacterScale+0x28>
   13296:	      |   moveq #1,d0
   13298:	,-----|-- bra.s 13314 <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   1329a:	|     '-> moveq #24,d0
   1329c:	|         add.l 16(sp),d0
   132a0:	|         move.l d0,-(sp)
   132a2:	|         jsr 153bc <trimStack>
   132a8:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   132aa:	|         move.l (sp),d0
   132ac:	|         move.l d0,-(sp)
   132ae:	|         jsr a7de <findPerson>
   132b4:	|         addq.l #4,sp
   132b6:	|         move.l d0,4(sp)
	if (pers) {
   132ba:	|  ,----- beq.s 132fa <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   132bc:	|  |      movea.l 4(sp),a0
   132c0:	|  |      move.l 32(a0),d0
   132c4:	|  |      move.l #1120403456,-(sp)
   132ca:	|  |      move.l d0,-(sp)
   132cc:	|  |      jsr 179fc <__mulsf3>
   132d2:	|  |      addq.l #8,sp
   132d4:	|  |      move.l d0,-(sp)
   132d6:	|  |      jsr 178e2 <__fixsfsi>
   132dc:	|  |      addq.l #4,sp
   132de:	|  |      move.l d0,d1
   132e0:	|  |      moveq #28,d0
   132e2:	|  |      add.l 16(sp),d0
   132e6:	|  |      move.l d1,-(sp)
   132e8:	|  |      pea 1 <_start+0x1>
   132ec:	|  |      move.l d0,-(sp)
   132ee:	|  |      jsr 1532a <setVariable>
   132f4:	|  |      lea 12(sp),sp
   132f8:	|  |  ,-- bra.s 13312 <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   132fa:	|  '--|-> moveq #28,d0
   132fc:	|     |   add.l 16(sp),d0
   13300:	|     |   clr.l -(sp)
   13302:	|     |   pea 1 <_start+0x1>
   13306:	|     |   move.l d0,-(sp)
   13308:	|     |   jsr 1532a <setVariable>
   1330e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   13312:	|     '-> moveq #2,d0
}
   13314:	'-------> addq.l #8,sp
   13316:	          rts

00013318 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   13318:	move.l 1ce3e <gameSettings>,d0
   1331e:	move.l d0,d1
   13320:	moveq #28,d0
   13322:	add.l 8(sp),d0
   13326:	move.l d1,-(sp)
   13328:	pea 1 <_start+0x1>
   1332c:	move.l d0,-(sp)
   1332e:	jsr 1532a <setVariable>
   13334:	lea 12(sp),sp
	return BR_CONTINUE;
   13338:	moveq #2,d0
}
   1333a:	rts

0001333c <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   1333c:	moveq #24,d0
   1333e:	add.l 8(sp),d0
   13342:	move.l d0,-(sp)
   13344:	jsr 153bc <trimStack>
   1334a:	addq.l #4,sp
	trimStack (&fun -> stack);
   1334c:	moveq #24,d0
   1334e:	add.l 8(sp),d0
   13352:	move.l d0,-(sp)
   13354:	jsr 153bc <trimStack>
   1335a:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   1335c:	moveq #28,d0
   1335e:	add.l 8(sp),d0
   13362:	clr.l -(sp)
   13364:	pea 1 <_start+0x1>
   13368:	move.l d0,-(sp)
   1336a:	jsr 1532a <setVariable>
   13370:	lea 12(sp),sp

	return BR_CONTINUE;
   13374:	moveq #2,d0

}
   13376:	rts

00013378 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   13378:	move.l 1c6de <lastFramesPerSecond>,d1
   1337e:	moveq #28,d0
   13380:	add.l 8(sp),d0
   13384:	move.l d1,-(sp)
   13386:	pea 1 <_start+0x1>
   1338a:	move.l d0,-(sp)
   1338c:	jsr 1532a <setVariable>
   13392:	lea 12(sp),sp
	return BR_CONTINUE;
   13396:	moveq #2,d0
}
   13398:	rts

0001339a <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   1339a:	moveq #2,d0
}
   1339c:	rts

0001339e <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   1339e:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   133a2:	          movea.l 60(sp),a0
   133a6:	          move.l 24(a0),d0
   133aa:	          move.l d0,-(sp)
   133ac:	          pea 1 <_start+0x1>
   133b0:	          pea 1cc70 <thumbHeight>
   133b6:	          jsr 14a38 <getValueType>
   133bc:	          lea 12(sp),sp
   133c0:	          tst.w d0
   133c2:	      ,-- bne.s 133ca <builtIn_setThumbnailSize+0x2c>
   133c4:	      |   moveq #1,d0
   133c6:	,-----|-- bra.w 13486 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   133ca:	|     '-> moveq #24,d0
   133cc:	|         add.l 60(sp),d0
   133d0:	|         move.l d0,-(sp)
   133d2:	|         jsr 153bc <trimStack>
   133d8:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   133da:	|         movea.l 60(sp),a0
   133de:	|         move.l 24(a0),d0
   133e2:	|         move.l d0,-(sp)
   133e4:	|         pea 1 <_start+0x1>
   133e8:	|         pea 1cc6c <thumbWidth>
   133ee:	|         jsr 14a38 <getValueType>
   133f4:	|         lea 12(sp),sp
   133f8:	|         tst.w d0
   133fa:	|     ,-- bne.s 13402 <builtIn_setThumbnailSize+0x64>
   133fc:	|     |   moveq #1,d0
   133fe:	+-----|-- bra.w 13486 <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   13402:	|     '-> moveq #24,d0
   13404:	|         add.l 60(sp),d0
   13408:	|         move.l d0,-(sp)
   1340a:	|         jsr 153bc <trimStack>
   13410:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   13412:	|         move.l 1cc6c <thumbWidth>,d0
   13418:	|     ,-- bmi.s 13446 <builtIn_setThumbnailSize+0xa8>
   1341a:	|     |   move.l 1cc70 <thumbHeight>,d0
   13420:	|     +-- bmi.s 13446 <builtIn_setThumbnailSize+0xa8>
   13422:	|     |   move.l 1cc6c <thumbWidth>,d0
   13428:	|     |   move.l d0,d1
   1342a:	|     |   move.l 1ccba <winWidth>,d0
   13430:	|     |   cmp.l d1,d0
   13432:	|     +-- bcs.s 13446 <builtIn_setThumbnailSize+0xa8>
   13434:	|     |   move.l 1cc70 <thumbHeight>,d0
   1343a:	|     |   move.l d0,d1
   1343c:	|     |   move.l 1ccbe <winHeight>,d0
   13442:	|     |   cmp.l d1,d0
   13444:	|  ,--|-- bcc.s 13484 <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   13446:	|  |  '-> move.l 1cc70 <thumbHeight>,d1
   1344c:	|  |      move.l 1cc6c <thumbWidth>,d0
   13452:	|  |      move.l d1,-(sp)
   13454:	|  |      move.l d0,-(sp)
   13456:	|  |      pea 1a08b <talk.c.490538ff+0x61>
   1345c:	|  |      lea 14(sp),a0
   13460:	|  |      move.l a0,-(sp)
   13462:	|  |      jsr 14242 <sprintf>
   13468:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   1346c:	|  |      lea 2(sp),a0
   13470:	|  |      move.l a0,-(sp)
   13472:	|  |      pea 1a093 <talk.c.490538ff+0x69>
   13478:	|  |      jsr 17518 <KPrintF>
   1347e:	|  |      addq.l #8,sp
		return BR_ERROR;
   13480:	|  |      moveq #1,d0
   13482:	+--|----- bra.s 13486 <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   13484:	|  '----> moveq #2,d0
}
   13486:	'-------> lea 52(sp),sp
   1348a:	          rts

0001348c <builtIn_hasFlag>:

builtIn(hasFlag)
{
   1348c:	       lea -12(sp),sp
   13490:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   13492:	       movea.l 24(sp),a0
   13496:	       move.l 24(a0),d0
   1349a:	       move.l d0,-(sp)
   1349c:	       pea 1 <_start+0x1>
   134a0:	       lea 12(sp),a0
   134a4:	       move.l a0,-(sp)
   134a6:	       jsr 14a38 <getValueType>
   134ac:	       lea 12(sp),sp
   134b0:	       tst.w d0
   134b2:	   ,-- bne.s 134ba <builtIn_hasFlag+0x2e>
   134b4:	   |   moveq #1,d0
   134b6:	,--|-- bra.w 1354a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   134ba:	|  '-> moveq #24,d0
   134bc:	|      add.l 24(sp),d0
   134c0:	|      move.l d0,-(sp)
   134c2:	|      jsr 153bc <trimStack>
   134c8:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   134ca:	|      movea.l 24(sp),a0
   134ce:	|      move.l 24(a0),d0
   134d2:	|      move.l d0,-(sp)
   134d4:	|      pea 7 <_start+0x7>
   134d8:	|      moveq #16,d0
   134da:	|      add.l sp,d0
   134dc:	|      move.l d0,-(sp)
   134de:	|      jsr 14a38 <getValueType>
   134e4:	|      lea 12(sp),sp
   134e8:	|      tst.w d0
   134ea:	|  ,-- bne.s 134f0 <builtIn_hasFlag+0x64>
   134ec:	|  |   moveq #1,d0
   134ee:	+--|-- bra.s 1354a <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   134f0:	|  '-> moveq #24,d0
   134f2:	|      add.l 24(sp),d0
   134f6:	|      move.l d0,-(sp)
   134f8:	|      jsr 153bc <trimStack>
   134fe:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   13500:	|      move.l 8(sp),d0
   13504:	|      move.l d0,-(sp)
   13506:	|      jsr d74c <findObjectType>
   1350c:	|      addq.l #4,sp
   1350e:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   13512:	|  ,-- bne.s 13518 <builtIn_hasFlag+0x8c>
   13514:	|  |   moveq #1,d0
   13516:	+--|-- bra.s 1354a <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   13518:	|  '-> movea.l 12(sp),a0
   1351c:	|      move.w 36(a0),d0
   13520:	|      moveq #0,d2
   13522:	|      move.w d0,d2
   13524:	|      move.l 4(sp),d1
   13528:	|      moveq #1,d0
   1352a:	|      lsl.l d1,d0
   1352c:	|      move.l d2,d1
   1352e:	|      and.l d0,d1
   13530:	|      moveq #28,d0
   13532:	|      add.l 24(sp),d0
   13536:	|      move.l d1,-(sp)
   13538:	|      pea 1 <_start+0x1>
   1353c:	|      move.l d0,-(sp)
   1353e:	|      jsr 1532a <setVariable>
   13544:	|      lea 12(sp),sp
	return BR_CONTINUE;
   13548:	|      moveq #2,d0
}
   1354a:	'----> move.l (sp)+,d2
   1354c:	       lea 12(sp),sp
   13550:	       rts

00013552 <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   13552:	       jsr d73a <snapshot>
   13558:	       tst.w d0
   1355a:	,----- beq.s 13560 <builtIn_snapshotGrab+0xe>
   1355c:	|      moveq #2,d0
   1355e:	|  ,-- bra.s 13562 <builtIn_snapshotGrab+0x10>
   13560:	'--|-> moveq #1,d0
}
   13562:	   '-> rts

00013564 <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   13564:	jsr d5e6 <nosnapshot>
	return BR_CONTINUE;
   1356a:	moveq #2,d0
}
   1356c:	rts

0001356e <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   1356e:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   13570:	move.w 1c5b6 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   13578:	movea.l 12(sp),a0
   1357c:	move.l 24(a0),d0
   13580:	move.l d0,-(sp)
   13582:	jsr 14f78 <getBoolean>
   13588:	addq.l #4,sp
   1358a:	move.w d0,1c5b6 <allowAnyFilename>
	trimStack (&fun -> stack);
   13590:	moveq #24,d0
   13592:	add.l 12(sp),d0
   13596:	move.l d0,-(sp)
   13598:	jsr 153bc <trimStack>
   1359e:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   135a0:	movea.w 2(sp),a0
   135a4:	moveq #28,d0
   135a6:	add.l 12(sp),d0
   135aa:	move.l a0,-(sp)
   135ac:	pea 1 <_start+0x1>
   135b0:	move.l d0,-(sp)
   135b2:	jsr 1532a <setVariable>
   135b8:	lea 12(sp),sp
	return BR_CONTINUE;
   135bc:	moveq #2,d0
}
   135be:	addq.l #4,sp
   135c0:	rts

000135c2 <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   135c2:	moveq #24,d0
   135c4:	add.l 8(sp),d0
   135c8:	move.l d0,-(sp)
   135ca:	jsr 153bc <trimStack>
   135d0:	addq.l #4,sp
	trimStack (&fun -> stack);
   135d2:	moveq #24,d0
   135d4:	add.l 8(sp),d0
   135d8:	move.l d0,-(sp)
   135da:	jsr 153bc <trimStack>
   135e0:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   135e2:	moveq #28,d0
   135e4:	add.l 8(sp),d0
   135e8:	clr.l -(sp)
   135ea:	pea 1 <_start+0x1>
   135ee:	move.l d0,-(sp)
   135f0:	jsr 1532a <setVariable>
   135f6:	lea 12(sp),sp

	return BR_CONTINUE;
   135fa:	moveq #2,d0
}
   135fc:	rts

000135fe <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   135fe:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   13600:	movea.l 12(sp),a0
   13604:	move.l 24(a0),d0
   13608:	move.l d0,-(sp)
   1360a:	jsr 1500e <getTextFromAnyVar>
   13610:	addq.l #4,sp
   13612:	move.l d0,(sp)
	trimStack (&fun -> stack);
   13614:	moveq #24,d0
   13616:	add.l 12(sp),d0
   1361a:	move.l d0,-(sp)
   1361c:	jsr 153bc <trimStack>
   13622:	addq.l #4,sp
	KPrintF (mess);
   13624:	move.l (sp),-(sp)
   13626:	jsr 17518 <KPrintF>
   1362c:	addq.l #4,sp
	return BR_ERROR;
   1362e:	moveq #1,d0
}
   13630:	addq.l #4,sp
   13632:	rts

00013634 <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13634:	moveq #24,d0
   13636:	add.l 8(sp),d0
   1363a:	move.l d0,-(sp)
   1363c:	jsr 153bc <trimStack>
   13642:	addq.l #4,sp
	trimStack (&fun -> stack);
   13644:	moveq #24,d0
   13646:	add.l 8(sp),d0
   1364a:	move.l d0,-(sp)
   1364c:	jsr 153bc <trimStack>
   13652:	addq.l #4,sp
	trimStack (&fun -> stack);
   13654:	moveq #24,d0
   13656:	add.l 8(sp),d0
   1365a:	move.l d0,-(sp)
   1365c:	jsr 153bc <trimStack>
   13662:	addq.l #4,sp
	trimStack (&fun -> stack);
   13664:	moveq #24,d0
   13666:	add.l 8(sp),d0
   1366a:	move.l d0,-(sp)
   1366c:	jsr 153bc <trimStack>
   13672:	addq.l #4,sp

	return BR_CONTINUE;
   13674:	moveq #2,d0
}
   13676:	rts

00013678 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   13678:	moveq #24,d0
   1367a:	add.l 8(sp),d0
   1367e:	move.l d0,-(sp)
   13680:	jsr 153bc <trimStack>
   13686:	addq.l #4,sp
	trimStack (&fun -> stack);
   13688:	moveq #24,d0
   1368a:	add.l 8(sp),d0
   1368e:	move.l d0,-(sp)
   13690:	jsr 153bc <trimStack>
   13696:	addq.l #4,sp
	trimStack (&fun -> stack);
   13698:	moveq #24,d0
   1369a:	add.l 8(sp),d0
   1369e:	move.l d0,-(sp)
   136a0:	jsr 153bc <trimStack>
   136a6:	addq.l #4,sp

	return BR_CONTINUE;
   136a8:	moveq #2,d0

}
   136aa:	rts

000136ac <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   136ac:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   136ae:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   136b4:	sne d0
   136b6:	neg.b d0
   136b8:	moveq #0,d1
   136ba:	move.b d0,d1
   136bc:	moveq #28,d0
   136be:	add.l 12(sp),d0
   136c2:	move.l d1,-(sp)
   136c4:	pea 1 <_start+0x1>
   136c8:	move.l d0,-(sp)
   136ca:	jsr 1532a <setVariable>
   136d0:	lea 12(sp),sp
	return BR_CONTINUE;
   136d4:	moveq #2,d0
}
   136d6:	addq.l #4,sp
   136d8:	rts

000136da <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   136da:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   136dc:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   136e2:	pea 1a0aa <talk.c.490538ff+0x80>
   136e8:	jsr 17518 <KPrintF>
   136ee:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   136f0:	tst.w 2(sp)
   136f4:	sne d0
   136f6:	neg.b d0
   136f8:	moveq #0,d1
   136fa:	move.b d0,d1
   136fc:	moveq #28,d0
   136fe:	add.l 12(sp),d0
   13702:	move.l d1,-(sp)
   13704:	pea 1 <_start+0x1>
   13708:	move.l d0,-(sp)
   1370a:	jsr 1532a <setVariable>
   13710:	lea 12(sp),sp
	return BR_CONTINUE;
   13714:	moveq #2,d0
}
   13716:	addq.l #4,sp
   13718:	rts

0001371a <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   1371a:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   1371e:	             move.l 104(sp),d0
   13722:	             cmpi.l #166,d0
   13728:	,----------- bhi.w 1380a <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   1372c:	|            move.l 104(sp),d0
   13730:	|            add.l d0,d0
   13732:	|            movea.l d0,a1
   13734:	|            adda.l d0,a1
   13736:	|            lea 1c6fc <paramNum>,a0
   1373c:	|            move.l (0,a1,a0.l),d0
   13740:	|            moveq #-1,d1
   13742:	|            cmp.l d0,d1
   13744:	|  ,-------- beq.w 137d2 <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   13748:	|  |         move.l 104(sp),d0
   1374c:	|  |         add.l d0,d0
   1374e:	|  |         movea.l d0,a1
   13750:	|  |         adda.l d0,a1
   13752:	|  |         lea 1c6fc <paramNum>,a0
   13758:	|  |         move.l (0,a1,a0.l),d0
   1375c:	|  |         cmp.l 108(sp),d0
   13760:	|  +-------- beq.s 137d2 <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   13762:	|  |         move.l 104(sp),d0
   13766:	|  |         add.l d0,d0
   13768:	|  |         movea.l d0,a1
   1376a:	|  |         adda.l d0,a1
   1376c:	|  |         lea 1c6fc <paramNum>,a0
   13772:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   13776:	|  |         moveq #1,d1
   13778:	|  |         cmp.l d0,d1
   1377a:	|  |  ,----- bne.s 13784 <callBuiltIn+0x6a>
   1377c:	|  |  |      move.l #101678,d0
   13782:	|  |  |  ,-- bra.s 1378a <callBuiltIn+0x70>
   13784:	|  |  '--|-> move.l #106720,d0
   1378a:	|  |     '-> move.l 104(sp),d1
   1378e:	|  |         add.l d1,d1
   13790:	|  |         movea.l d1,a1
   13792:	|  |         adda.l d1,a1
   13794:	|  |         lea 1c6fc <paramNum>,a0
   1379a:	|  |         move.l (0,a1,a0.l),d1
   1379e:	|  |         move.l d0,-(sp)
   137a0:	|  |         move.l d1,-(sp)
   137a2:	|  |         pea 1a0e2 <talk.c.490538ff+0xb8>
   137a8:	|  |         lea 12(sp),a0
   137ac:	|  |         move.l a0,-(sp)
   137ae:	|  |         jsr 14242 <sprintf>
   137b4:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   137b8:	|  |         movea.l sp,a0
   137ba:	|  |         move.l a0,-(sp)
   137bc:	|  |         jsr b8 <copyString>
   137c2:	|  |         addq.l #4,sp
   137c4:	|  |         move.l d0,-(sp)
   137c6:	|  |         jsr 17518 <KPrintF>
   137cc:	|  |         addq.l #4,sp
				return BR_ERROR;
   137ce:	|  |         moveq #1,d0
   137d0:	|  |     ,-- bra.s 1381a <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   137d2:	|  '-----|-> move.l 104(sp),d0
   137d6:	|        |   add.l d0,d0
   137d8:	|        |   movea.l d0,a1
   137da:	|        |   adda.l d0,a1
   137dc:	|        |   lea 1c998 <builtInFunctionArray>,a0
   137e2:	|        |   move.l (0,a1,a0.l),d0
   137e6:	+--------|-- beq.s 1380a <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   137e8:	|        |   move.l 104(sp),d0
   137ec:	|        |   add.l d0,d0
   137ee:	|        |   movea.l d0,a1
   137f0:	|        |   adda.l d0,a1
   137f2:	|        |   lea 1c998 <builtInFunctionArray>,a0
   137f8:	|        |   movea.l (0,a1,a0.l),a0
   137fc:	|        |   move.l 112(sp),-(sp)
   13800:	|        |   move.l 112(sp),-(sp)
   13804:	|        |   jsr (a0)
   13806:	|        |   addq.l #8,sp
   13808:	|        +-- bra.s 1381a <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   1380a:	'--------|-> pea 1a10d <talk.c.490538ff+0xe3>
   13810:	         |   jsr 17518 <KPrintF>
   13816:	         |   addq.l #4,sp
	return BR_ERROR;
   13818:	         |   moveq #1,d0
}
   1381a:	         '-> lea 100(sp),sp
   1381e:	             rts

00013820 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   13820:	          subq.l #8,sp
	int indexNum = -1;
   13822:	          moveq #-1,d0
   13824:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13828:	          clr.l (sp)
   1382a:	   ,----- bra.s 13850 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   1382c:	,--|----> move.l 1ce36 <languageTable>,d1
   13832:	|  |      move.l (sp),d0
   13834:	|  |      add.l d0,d0
   13836:	|  |      add.l d0,d0
   13838:	|  |      movea.l d1,a0
   1383a:	|  |      adda.l d0,a0
   1383c:	|  |      move.l (a0),d0
   1383e:	|  |      move.l d0,d1
   13840:	|  |      move.l 1ce3e <gameSettings>,d0
   13846:	|  |      cmp.l d1,d0
   13848:	|  |  ,-- bne.s 1384e <getLanguageForFileB+0x2e>
   1384a:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   1384e:	|  |  '-> addq.l #1,(sp)
   13850:	|  '----> move.l 1ce42 <gameSettings+0x4>,d0
   13856:	|         cmp.l (sp),d0
   13858:	'-------- bcc.s 1382c <getLanguageForFileB+0xc>
	}

	return indexNum;
   1385a:	          move.l 4(sp),d0
}
   1385e:	          addq.l #8,sp
   13860:	          rts

00013862 <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   13862:	          lea -20(sp),sp
   13866:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13868:	          move.l 28(sp),-(sp)
   1386c:	          jsr 13f24 <strlen>
   13872:	          addq.l #4,sp
   13874:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   13878:	          moveq #4,d0
   1387a:	          cmp.l 12(sp),d0
   1387e:	      ,-- bge.s 138a2 <getPrefsFilename+0x40>
   13880:	      |   move.l 12(sp),d0
   13884:	      |   subq.l #4,d0
   13886:	      |   movea.l 28(sp),a0
   1388a:	      |   adda.l d0,a0
   1388c:	      |   move.b (a0),d0
   1388e:	      |   cmpi.b #46,d0
   13892:	      +-- bne.s 138a2 <getPrefsFilename+0x40>
		filename[n-4] = 0;
   13894:	      |   move.l 12(sp),d0
   13898:	      |   subq.l #4,d0
   1389a:	      |   movea.l 28(sp),a0
   1389e:	      |   adda.l d0,a0
   138a0:	      |   clr.b (a0)
	}

	char * f = filename;
   138a2:	      '-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   138a8:	          clr.l 20(sp)
   138ac:	   ,----- bra.s 138d4 <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   138ae:	,--|----> move.l 20(sp),d0
   138b2:	|  |      movea.l 28(sp),a0
   138b6:	|  |      adda.l d0,a0
   138b8:	|  |      move.b (a0),d0
   138ba:	|  |      cmpi.b #47,d0
   138be:	|  |  ,-- bne.s 138d0 <getPrefsFilename+0x6e>
   138c0:	|  |  |   move.l 20(sp),d0
   138c4:	|  |  |   addq.l #1,d0
   138c6:	|  |  |   move.l 28(sp),d1
   138ca:	|  |  |   add.l d0,d1
   138cc:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   138d0:	|  |  '-> addq.l #1,20(sp)
   138d4:	|  '----> move.l 20(sp),d0
   138d8:	|         cmp.l 12(sp),d0
   138dc:	'-------- blt.s 138ae <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   138de:	          pea 1a138 <talk.c.490538ff+0x10e>
   138e4:	          move.l 20(sp),-(sp)
   138e8:	          jsr 13f64 <joinStrings>
   138ee:	          addq.l #8,sp
   138f0:	          move.l d0,8(sp)

	FreeVec(filename);
   138f4:	          move.l 28(sp),4(sp)
   138fa:	          move.l 1cd66 <SysBase>,d0
   13900:	          movea.l d0,a6
   13902:	          movea.l 4(sp),a1
   13906:	          jsr -690(a6)
	filename = NULL;
   1390a:	          clr.l 28(sp)
	return joined;
   1390e:	          move.l 8(sp),d0
}
   13912:	          movea.l (sp)+,a6
   13914:	          lea 20(sp),sp
   13918:	          rts

0001391a <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   1391a:	             lea -28(sp),sp
   1391e:	             move.l a6,-(sp)
   13920:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13922:	             move.l 1ce42 <gameSettings+0x4>,d0
   13928:	             move.l d0,d1
   1392a:	             addq.l #1,d1
   1392c:	             move.l d1,28(sp)
   13930:	             clr.l 24(sp)
   13934:	             move.l 1cd66 <SysBase>,d0
   1393a:	             movea.l d0,a6
   1393c:	             move.l 28(sp),d0
   13940:	             move.l 24(sp),d1
   13944:	             jsr -684(a6)
   13948:	             move.l d0,20(sp)
   1394c:	             move.l 20(sp),d0
   13950:	             move.l d0,1ce36 <languageTable>
    if( languageTable == 0) {
   13956:	             move.l 1ce36 <languageTable>,d0
   1395c:	         ,-- bne.s 1396c <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   1395e:	         |   pea 1a13d <talk.c.490538ff+0x113>
   13964:	         |   jsr 17518 <KPrintF>
   1396a:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1396c:	         '-> move.l 1ce42 <gameSettings+0x4>,d0
   13972:	             move.l d0,d1
   13974:	             addq.l #1,d1
   13976:	             move.l d1,16(sp)
   1397a:	             clr.l 12(sp)
   1397e:	             move.l 1cd66 <SysBase>,d0
   13984:	             movea.l d0,a6
   13986:	             move.l 16(sp),d0
   1398a:	             move.l 12(sp),d1
   1398e:	             jsr -684(a6)
   13992:	             move.l d0,8(sp)
   13996:	             move.l 8(sp),d0
   1399a:	             move.l d0,1ce3a <languageName>
	if( languageName == 0) {
   139a0:	             move.l 1ce3a <languageName>,d0
   139a6:	         ,-- bne.s 139b6 <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   139a8:	         |   pea 1a173 <talk.c.490538ff+0x149>
   139ae:	         |   jsr 17518 <KPrintF>
   139b4:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   139b6:	         '-> clr.l 32(sp)
   139ba:	   ,-------- bra.s 13a32 <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   139bc:	,--|-------> tst.l 32(sp)
   139c0:	|  |  ,----- beq.s 139d0 <makeLanguageTable+0xb6>
   139c2:	|  |  |      move.l 40(sp),-(sp)
   139c6:	|  |  |      jsr 6bc <get2bytes>
   139cc:	|  |  |      addq.l #4,sp
   139ce:	|  |  |  ,-- bra.s 139d2 <makeLanguageTable+0xb8>
   139d0:	|  |  '--|-> moveq #0,d0
   139d2:	|  |     '-> movea.l 1ce36 <languageTable>,a0
   139d8:	|  |         move.l 32(sp),d1
   139dc:	|  |         add.l d1,d1
   139de:	|  |         add.l d1,d1
   139e0:	|  |         adda.l d1,a0
   139e2:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   139e4:	|  |         move.l 1ce3a <languageName>,d1
   139ea:	|  |         move.l 32(sp),d0
   139ee:	|  |         add.l d0,d0
   139f0:	|  |         add.l d0,d0
   139f2:	|  |         movea.l d1,a0
   139f4:	|  |         adda.l d0,a0
   139f6:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   139f8:	|  |         move.l 1cd10 <gameVersion>,d0
   139fe:	|  |         cmpi.l #511,d0
   13a04:	|  |     ,-- ble.s 13a2e <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   13a06:	|  |     |   move.l 1ce42 <gameSettings+0x4>,d0
   13a0c:	|  |     +-- beq.s 13a2e <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   13a0e:	|  |     |   move.l 1ce3a <languageName>,d1
   13a14:	|  |     |   move.l 32(sp),d0
   13a18:	|  |     |   add.l d0,d0
   13a1a:	|  |     |   add.l d0,d0
   13a1c:	|  |     |   movea.l d1,a2
   13a1e:	|  |     |   adda.l d0,a2
   13a20:	|  |     |   move.l 40(sp),-(sp)
   13a24:	|  |     |   jsr b02 <readString>
   13a2a:	|  |     |   addq.l #4,sp
   13a2c:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13a2e:	|  |     '-> addq.l #1,32(sp)
   13a32:	|  '-------> move.l 1ce42 <gameSettings+0x4>,d0
   13a38:	|            cmp.l 32(sp),d0
   13a3c:	'----------- bcc.w 139bc <makeLanguageTable+0xa2>
		}
	}
}
   13a40:	             nop
   13a42:	             nop
   13a44:	             movea.l (sp)+,a2
   13a46:	             movea.l (sp)+,a6
   13a48:	             lea 28(sp),sp
   13a4c:	             rts

00013a4e <readIniFile>:

void readIniFile (char * filename) {
   13a4e:	                      lea -564(sp),sp
   13a52:	                      move.l a6,-(sp)
   13a54:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   13a56:	                      move.l 576(sp),-(sp)
   13a5a:	                      jsr b8 <copyString>
   13a60:	                      addq.l #4,sp
   13a62:	                      move.l d0,-(sp)
   13a64:	                      jsr 13862 <getPrefsFilename>
   13a6a:	                      addq.l #4,sp
   13a6c:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13a70:	                      move.l 562(sp),558(sp)
   13a76:	                      move.l #1005,554(sp)
   13a7e:	                      move.l 1cd6e <DOSBase>,d0
   13a84:	                      movea.l d0,a6
   13a86:	                      move.l 558(sp),d1
   13a8a:	                      move.l 554(sp),d2
   13a8e:	                      jsr -30(a6)
   13a92:	                      move.l d0,550(sp)
   13a96:	                      move.l 550(sp),d0
   13a9a:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   13a9e:	                      clr.l 1ce3e <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   13aa4:	                      move.w #1,1ce46 <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   13aac:	                      clr.l 1ce48 <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   13ab2:	                      moveq #1,d0
   13ab4:	                      move.l d0,1ce4c <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   13aba:	                      clr.w 1ce50 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   13ac0:	                      clr.w 1ce52 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   13ac6:	                      clr.w 1ce54 <gameSettings+0x16>

	FreeVec(langName);
   13acc:	                      move.l 562(sp),542(sp)
   13ad2:	                      move.l 1cd66 <SysBase>,d0
   13ad8:	                      movea.l d0,a6
   13ada:	                      movea.l 542(sp),a1
   13ade:	                      jsr -690(a6)
	langName = NULL;
   13ae2:	                      clr.l 562(sp)

	if (fp) {
   13ae6:	                      tst.l 546(sp)
   13aea:	,-------------------- beq.w 13dc8 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13aee:	|                     move.l sp,d0
   13af0:	|                     addi.l #265,d0
   13af6:	|                     move.l #257,d1
   13afc:	|                     move.l d1,-(sp)
   13afe:	|                     clr.l -(sp)
   13b00:	|                     move.l d0,-(sp)
   13b02:	|                     jsr 1749c <memset>
   13b08:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13b0c:	|                     move.l sp,d0
   13b0e:	|                     addq.l #8,d0
   13b10:	|                     move.l #257,d1
   13b16:	|                     move.l d1,-(sp)
   13b18:	|                     clr.l -(sp)
   13b1a:	|                     move.l d0,-(sp)
   13b1c:	|                     jsr 1749c <memset>
   13b22:	|                     lea 12(sp),sp
		unsigned char here = 0;
   13b26:	|                     clr.b 571(sp)
		char readChar = ' ';
   13b2a:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13b30:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   13b36:	|                     clr.w 566(sp)
		LONG tmp = 0;
   13b3a:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   13b3e:	|  ,----------------> move.l 546(sp),534(sp)
   13b44:	|  |                  move.l 1cd6e <DOSBase>,d0
   13b4a:	|  |                  movea.l d0,a6
   13b4c:	|  |                  move.l 534(sp),d1
   13b50:	|  |                  jsr -306(a6)
   13b54:	|  |                  move.l d0,530(sp)
   13b58:	|  |                  move.l 530(sp),d0
   13b5c:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13b60:	|  |                  moveq #-1,d1
   13b62:	|  |                  cmp.l 538(sp),d1
   13b66:	|  |           ,----- bne.s 13b74 <readIniFile+0x126>
				readChar = '\n';
   13b68:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13b6e:	|  |           |      clr.w 568(sp)
   13b72:	|  |           |  ,-- bra.s 13b7a <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   13b74:	|  |           '--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   13b7a:	|  |              '-> move.b 570(sp),d0
   13b7e:	|  |                  ext.w d0
   13b80:	|  |                  movea.w d0,a0
   13b82:	|  |                  moveq #61,d0
   13b84:	|  |                  cmp.l a0,d0
   13b86:	|  |     ,----------- beq.w 13d30 <readIniFile+0x2e2>
   13b8a:	|  |     |            moveq #61,d1
   13b8c:	|  |     |            cmp.l a0,d1
   13b8e:	|  |  ,--|----------- blt.w 13d3c <readIniFile+0x2ee>
   13b92:	|  |  |  |            moveq #10,d0
   13b94:	|  |  |  |            cmp.l a0,d0
   13b96:	|  |  |  |        ,-- beq.s 13ba0 <readIniFile+0x152>
   13b98:	|  |  |  |        |   moveq #13,d1
   13b9a:	|  |  |  |        |   cmp.l a0,d1
   13b9c:	|  |  +--|--------|-- bne.w 13d3c <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   13ba0:	|  |  |  |        '-> tst.w 566(sp)
   13ba4:	|  |  |  |     ,----- beq.w 13d1e <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   13ba8:	|  |  |  |     |      pea 1a1a7 <talk.c.490538ff+0x17d>
   13bae:	|  |  |  |     |      move.l sp,d0
   13bb0:	|  |  |  |     |      addi.l #269,d0
   13bb6:	|  |  |  |     |      move.l d0,-(sp)
   13bb8:	|  |  |  |     |      jsr 13ee4 <strcmp>
   13bbe:	|  |  |  |     |      addq.l #8,sp
   13bc0:	|  |  |  |     |      tst.l d0
   13bc2:	|  |  |  |     |  ,-- bne.s 13bdc <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   13bc4:	|  |  |  |     |  |   move.l sp,d0
   13bc6:	|  |  |  |     |  |   addq.l #8,d0
   13bc8:	|  |  |  |     |  |   move.l d0,-(sp)
   13bca:	|  |  |  |     |  |   jsr 13dd4 <stringToInt>
   13bd0:	|  |  |  |     |  |   addq.l #4,sp
   13bd2:	|  |  |  |     |  |   move.l d0,1ce3e <gameSettings>
   13bd8:	|  |  |  |     +--|-- bra.w 13d1e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13bdc:	|  |  |  |     |  '-> pea 1a1b0 <talk.c.490538ff+0x186>
   13be2:	|  |  |  |     |      move.l sp,d0
   13be4:	|  |  |  |     |      addi.l #269,d0
   13bea:	|  |  |  |     |      move.l d0,-(sp)
   13bec:	|  |  |  |     |      jsr 13ee4 <strcmp>
   13bf2:	|  |  |  |     |      addq.l #8,sp
   13bf4:	|  |  |  |     |      tst.l d0
   13bf6:	|  |  |  |     |  ,-- bne.s 13c1c <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13bf8:	|  |  |  |     |  |   move.l sp,d0
   13bfa:	|  |  |  |     |  |   addq.l #8,d0
   13bfc:	|  |  |  |     |  |   move.l d0,-(sp)
   13bfe:	|  |  |  |     |  |   jsr 13dd4 <stringToInt>
   13c04:	|  |  |  |     |  |   addq.l #4,sp
   13c06:	|  |  |  |     |  |   tst.l d0
   13c08:	|  |  |  |     |  |   seq d0
   13c0a:	|  |  |  |     |  |   neg.b d0
   13c0c:	|  |  |  |     |  |   move.b d0,d0
   13c0e:	|  |  |  |     |  |   andi.w #255,d0
   13c12:	|  |  |  |     |  |   move.w d0,1ce46 <gameSettings+0x8>
   13c18:	|  |  |  |     +--|-- bra.w 13d1e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13c1c:	|  |  |  |     |  '-> pea 1a1b7 <talk.c.490538ff+0x18d>
   13c22:	|  |  |  |     |      move.l sp,d0
   13c24:	|  |  |  |     |      addi.l #269,d0
   13c2a:	|  |  |  |     |      move.l d0,-(sp)
   13c2c:	|  |  |  |     |      jsr 13ee4 <strcmp>
   13c32:	|  |  |  |     |      addq.l #8,sp
   13c34:	|  |  |  |     |      tst.l d0
   13c36:	|  |  |  |     |  ,-- bne.s 13c50 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13c38:	|  |  |  |     |  |   move.l sp,d0
   13c3a:	|  |  |  |     |  |   addq.l #8,d0
   13c3c:	|  |  |  |     |  |   move.l d0,-(sp)
   13c3e:	|  |  |  |     |  |   jsr 13dd4 <stringToInt>
   13c44:	|  |  |  |     |  |   addq.l #4,sp
   13c46:	|  |  |  |     |  |   move.l d0,1ce48 <gameSettings+0xa>
   13c4c:	|  |  |  |     +--|-- bra.w 13d1e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13c50:	|  |  |  |     |  '-> pea 1a1bf <talk.c.490538ff+0x195>
   13c56:	|  |  |  |     |      move.l sp,d0
   13c58:	|  |  |  |     |      addi.l #269,d0
   13c5e:	|  |  |  |     |      move.l d0,-(sp)
   13c60:	|  |  |  |     |      jsr 13ee4 <strcmp>
   13c66:	|  |  |  |     |      addq.l #8,sp
   13c68:	|  |  |  |     |      tst.l d0
   13c6a:	|  |  |  |     |  ,-- bne.s 13c84 <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13c6c:	|  |  |  |     |  |   move.l sp,d0
   13c6e:	|  |  |  |     |  |   addq.l #8,d0
   13c70:	|  |  |  |     |  |   move.l d0,-(sp)
   13c72:	|  |  |  |     |  |   jsr 13dd4 <stringToInt>
   13c78:	|  |  |  |     |  |   addq.l #4,sp
   13c7a:	|  |  |  |     |  |   move.l d0,1ce4c <gameSettings+0xe>
   13c80:	|  |  |  |     +--|-- bra.w 13d1e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   13c84:	|  |  |  |     |  '-> pea 1a1c9 <talk.c.490538ff+0x19f>
   13c8a:	|  |  |  |     |      move.l sp,d0
   13c8c:	|  |  |  |     |      addi.l #269,d0
   13c92:	|  |  |  |     |      move.l d0,-(sp)
   13c94:	|  |  |  |     |      jsr 13ee4 <strcmp>
   13c9a:	|  |  |  |     |      addq.l #8,sp
   13c9c:	|  |  |  |     |      tst.l d0
   13c9e:	|  |  |  |     |  ,-- bne.s 13cb8 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   13ca0:	|  |  |  |     |  |   move.l sp,d0
   13ca2:	|  |  |  |     |  |   addq.l #8,d0
   13ca4:	|  |  |  |     |  |   move.l d0,-(sp)
   13ca6:	|  |  |  |     |  |   jsr 13dd4 <stringToInt>
   13cac:	|  |  |  |     |  |   addq.l #4,sp
   13cae:	|  |  |  |     |  |   move.l d0,d0
   13cb0:	|  |  |  |     |  |   move.w d0,1ce50 <gameSettings+0x12>
   13cb6:	|  |  |  |     +--|-- bra.s 13d1e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   13cb8:	|  |  |  |     |  '-> pea 1a1d5 <talk.c.490538ff+0x1ab>
   13cbe:	|  |  |  |     |      move.l sp,d0
   13cc0:	|  |  |  |     |      addi.l #269,d0
   13cc6:	|  |  |  |     |      move.l d0,-(sp)
   13cc8:	|  |  |  |     |      jsr 13ee4 <strcmp>
   13cce:	|  |  |  |     |      addq.l #8,sp
   13cd0:	|  |  |  |     |      tst.l d0
   13cd2:	|  |  |  |     |  ,-- bne.s 13cec <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   13cd4:	|  |  |  |     |  |   move.l sp,d0
   13cd6:	|  |  |  |     |  |   addq.l #8,d0
   13cd8:	|  |  |  |     |  |   move.l d0,-(sp)
   13cda:	|  |  |  |     |  |   jsr 13dd4 <stringToInt>
   13ce0:	|  |  |  |     |  |   addq.l #4,sp
   13ce2:	|  |  |  |     |  |   move.l d0,d0
   13ce4:	|  |  |  |     |  |   move.w d0,1ce52 <gameSettings+0x14>
   13cea:	|  |  |  |     +--|-- bra.s 13d1e <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13cec:	|  |  |  |     |  '-> pea 1a1e3 <talk.c.490538ff+0x1b9>
   13cf2:	|  |  |  |     |      move.l sp,d0
   13cf4:	|  |  |  |     |      addi.l #269,d0
   13cfa:	|  |  |  |     |      move.l d0,-(sp)
   13cfc:	|  |  |  |     |      jsr 13ee4 <strcmp>
   13d02:	|  |  |  |     |      addq.l #8,sp
   13d04:	|  |  |  |     |      tst.l d0
   13d06:	|  |  |  |     +----- bne.s 13d1e <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13d08:	|  |  |  |     |      move.l sp,d0
   13d0a:	|  |  |  |     |      addq.l #8,d0
   13d0c:	|  |  |  |     |      move.l d0,-(sp)
   13d0e:	|  |  |  |     |      jsr 13dd4 <stringToInt>
   13d14:	|  |  |  |     |      addq.l #4,sp
   13d16:	|  |  |  |     |      move.l d0,d0
   13d18:	|  |  |  |     |      move.w d0,1ce54 <gameSettings+0x16>
					}
				}
				here = 0;
   13d1e:	|  |  |  |     '----> clr.b 571(sp)
				doingSecond = FALSE;
   13d22:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   13d26:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13d2a:	|  |  |  |            clr.b 8(sp)
				break;
   13d2e:	|  |  |  |  ,-------- bra.s 13da6 <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13d30:	|  |  |  '--|-------> move.w #1,566(sp)
				here = 0;
   13d36:	|  |  |     |         clr.b 571(sp)
				break;
   13d3a:	|  |  |     +-------- bra.s 13da6 <readIniFile+0x358>

				default:
				if (doingSecond) {
   13d3c:	|  |  '-----|-------> tst.w 566(sp)
   13d40:	|  |        |  ,----- beq.s 13d74 <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   13d42:	|  |        |  |      move.b 571(sp),d0
   13d46:	|  |        |  |      move.b d0,d1
   13d48:	|  |        |  |      addq.b #1,d1
   13d4a:	|  |        |  |      move.b d1,571(sp)
   13d4e:	|  |        |  |      move.b d0,d0
   13d50:	|  |        |  |      andi.l #255,d0
   13d56:	|  |        |  |      lea 572(sp),a0
   13d5a:	|  |        |  |      adda.l d0,a0
   13d5c:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   13d62:	|  |        |  |      moveq #0,d0
   13d64:	|  |        |  |      move.b 571(sp),d0
   13d68:	|  |        |  |      lea 572(sp),a0
   13d6c:	|  |        |  |      adda.l d0,a0
   13d6e:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   13d72:	|  |        |  |  ,-- bra.s 13da4 <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   13d74:	|  |        |  '--|-> move.b 571(sp),d0
   13d78:	|  |        |     |   move.b d0,d1
   13d7a:	|  |        |     |   addq.b #1,d1
   13d7c:	|  |        |     |   move.b d1,571(sp)
   13d80:	|  |        |     |   move.b d0,d0
   13d82:	|  |        |     |   andi.l #255,d0
   13d88:	|  |        |     |   lea 572(sp),a0
   13d8c:	|  |        |     |   adda.l d0,a0
   13d8e:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   13d94:	|  |        |     |   moveq #0,d0
   13d96:	|  |        |     |   move.b 571(sp),d0
   13d9a:	|  |        |     |   lea 572(sp),a0
   13d9e:	|  |        |     |   adda.l d0,a0
   13da0:	|  |        |     |   clr.b -307(a0)
				break;
   13da4:	|  |        |     '-> nop
			}
		} while (keepGoing);
   13da6:	|  |        '-------> tst.w 568(sp)
   13daa:	|  '----------------- bne.w 13b3e <readIniFile+0xf0>

		Close(fp);
   13dae:	|                     move.l 546(sp),526(sp)
   13db4:	|                     move.l 1cd6e <DOSBase>,d0
   13dba:	|                     movea.l d0,a6
   13dbc:	|                     move.l 526(sp),d1
   13dc0:	|                     jsr -36(a6)
   13dc4:	|                     move.l d0,522(sp)
	}
}
   13dc8:	'-------------------> nop
   13dca:	                      move.l (sp)+,d2
   13dcc:	                      movea.l (sp)+,a6
   13dce:	                      lea 564(sp),sp
   13dd2:	                      rts

00013dd4 <stringToInt>:

unsigned int stringToInt (char * s) {
   13dd4:	             subq.l #8,sp
	int i = 0;
   13dd6:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13dda:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13dde:	,----------> movea.l 12(sp),a0
   13de2:	|            move.b (a0),d0
   13de4:	|            cmpi.b #47,d0
   13de8:	|        ,-- ble.s 13e20 <stringToInt+0x4c>
   13dea:	|        |   movea.l 12(sp),a0
   13dee:	|        |   move.b (a0),d0
   13df0:	|        |   cmpi.b #57,d0
   13df4:	|        +-- bgt.s 13e20 <stringToInt+0x4c>
			i *= 10;
   13df6:	|        |   move.l 4(sp),d1
   13dfa:	|        |   move.l d1,d0
   13dfc:	|        |   add.l d0,d0
   13dfe:	|        |   add.l d0,d0
   13e00:	|        |   add.l d1,d0
   13e02:	|        |   add.l d0,d0
   13e04:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13e08:	|        |   movea.l 12(sp),a0
   13e0c:	|        |   move.b (a0),d0
   13e0e:	|        |   ext.w d0
   13e10:	|        |   movea.w d0,a0
   13e12:	|        |   moveq #-48,d0
   13e14:	|        |   add.l a0,d0
   13e16:	|        |   add.l d0,4(sp)
			s ++;
   13e1a:	|        |   addq.l #1,12(sp)
   13e1e:	|  ,-----|-- bra.s 13e58 <stringToInt+0x84>
		} else if (*s == '-') {
   13e20:	|  |     '-> movea.l 12(sp),a0
   13e24:	|  |         move.b (a0),d0
   13e26:	|  |         cmpi.b #45,d0
   13e2a:	|  |     ,-- bne.s 13e44 <stringToInt+0x70>
			negative = ! negative;
   13e2c:	|  |     |   tst.w 2(sp)
   13e30:	|  |     |   seq d0
   13e32:	|  |     |   neg.b d0
   13e34:	|  |     |   move.b d0,d0
   13e36:	|  |     |   andi.w #255,d0
   13e3a:	|  |     |   move.w d0,2(sp)
			s++;
   13e3e:	|  |     |   addq.l #1,12(sp)
   13e42:	+--|-----|-- bra.s 13dde <stringToInt+0xa>
		} else {
			if (negative)
   13e44:	|  |     '-> tst.w 2(sp)
   13e48:	|  |     ,-- beq.s 13e52 <stringToInt+0x7e>
				return -i;
   13e4a:	|  |     |   move.l 4(sp),d0
   13e4e:	|  |     |   neg.l d0
   13e50:	|  |  ,--|-- bra.s 13e5a <stringToInt+0x86>
			return i;
   13e52:	|  |  |  '-> move.l 4(sp),d0
   13e56:	|  |  +----- bra.s 13e5a <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13e58:	'--'--|----X bra.s 13dde <stringToInt+0xa>
		}
	}
   13e5a:	      '----> addq.l #8,sp
   13e5c:	             rts

00013e5e <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13e5e:	    lea -28(sp),sp
   13e62:	    move.l a6,-(sp)
   13e64:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   13e66:	    pea 1a1ed <talk.c.490538ff+0x1c3>
   13e6c:	    jsr 17518 <KPrintF>
   13e72:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   13e74:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   13e78:	    move.l 40(sp),30(sp)
   13e7e:	    move.l #1005,26(sp)
   13e86:	    move.l 1cd6e <DOSBase>,d0
   13e8c:	    movea.l d0,a6
   13e8e:	    move.l 30(sp),d1
   13e92:	    move.l 26(sp),d2
   13e96:	    jsr -30(a6)
   13e9a:	    move.l d0,22(sp)
   13e9e:	    move.l 22(sp),d0
   13ea2:	    move.l d0,18(sp)
	if (tester) {
   13ea6:	,-- beq.s 13ed6 <fileExists+0x78>
		KPrintF("fileexists: File exists");
   13ea8:	|   pea 1a207 <talk.c.490538ff+0x1dd>
   13eae:	|   jsr 17518 <KPrintF>
   13eb4:	|   addq.l #4,sp
		retval = 1;
   13eb6:	|   move.b #1,35(sp)
		Close(tester);
   13ebc:	|   move.l 18(sp),14(sp)
   13ec2:	|   move.l 1cd6e <DOSBase>,d0
   13ec8:	|   movea.l d0,a6
   13eca:	|   move.l 14(sp),d1
   13ece:	|   jsr -36(a6)
   13ed2:	|   move.l d0,10(sp)
	}
	return retval;
   13ed6:	'-> move.b 35(sp),d0
   13eda:	    move.l (sp)+,d2
   13edc:	    movea.l (sp)+,a6
   13ede:	    lea 28(sp),sp
   13ee2:	    rts

00013ee4 <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   13ee4:	   ,-- bra.s 13eee <strcmp+0xa>
    {
        s1++;
   13ee6:	,--|-> addq.l #1,4(sp)
        s2++;
   13eea:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13eee:	|  '-> movea.l 4(sp),a0
   13ef2:	|      move.b (a0),d0
   13ef4:	|  ,-- beq.s 13f06 <strcmp+0x22>
   13ef6:	|  |   movea.l 4(sp),a0
   13efa:	|  |   move.b (a0),d1
   13efc:	|  |   movea.l 8(sp),a0
   13f00:	|  |   move.b (a0),d0
   13f02:	|  |   cmp.b d1,d0
   13f04:	'--|-- beq.s 13ee6 <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   13f06:	   '-> movea.l 4(sp),a0
   13f0a:	       move.b (a0),d0
   13f0c:	       moveq #0,d1
   13f0e:	       move.b d0,d1
   13f10:	       movea.l 8(sp),a0
   13f14:	       move.b (a0),d0
   13f16:	       move.b d0,d0
   13f18:	       andi.l #255,d0
   13f1e:	       sub.l d0,d1
   13f20:	       move.l d1,d0
}
   13f22:	       rts

00013f24 <strlen>:

long unsigned int strlen (const char *s) 
{  
   13f24:	       subq.l #4,sp
	long unsigned int i = 0;
   13f26:	       clr.l (sp)
	while(s[i]) i++; 
   13f28:	   ,-- bra.s 13f2c <strlen+0x8>
   13f2a:	,--|-> addq.l #1,(sp)
   13f2c:	|  '-> movea.l 8(sp),a0
   13f30:	|      adda.l (sp),a0
   13f32:	|      move.b (a0),d0
   13f34:	'----- bne.s 13f2a <strlen+0x6>
	return(i);
   13f36:	       move.l (sp),d0
}
   13f38:	       addq.l #4,sp
   13f3a:	       rts

00013f3c <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13f3c:	    nop
   13f3e:	,-> move.l 8(sp),d0
   13f42:	|   move.l d0,d1
   13f44:	|   addq.l #1,d1
   13f46:	|   move.l d1,8(sp)
   13f4a:	|   movea.l 4(sp),a0
   13f4e:	|   lea 1(a0),a1
   13f52:	|   move.l a1,4(sp)
   13f56:	|   movea.l d0,a1
   13f58:	|   move.b (a1),d0
   13f5a:	|   move.b d0,(a0)
   13f5c:	|   move.b (a0),d0
   13f5e:	'-- bne.s 13f3e <strcpy+0x2>
}
   13f60:	    nop
   13f62:	    rts

00013f64 <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   13f64:	    lea -20(sp),sp
   13f68:	    move.l a6,-(sp)
   13f6a:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13f6c:	    move.l 32(sp),-(sp)
   13f70:	    jsr 13f24 <strlen>
   13f76:	    addq.l #4,sp
   13f78:	    move.l d0,d2
   13f7a:	    move.l 36(sp),-(sp)
   13f7e:	    jsr 13f24 <strlen>
   13f84:	    addq.l #4,sp
   13f86:	    add.l d2,d0
   13f88:	    move.l d0,d1
   13f8a:	    addq.l #1,d1
   13f8c:	    move.l d1,20(sp)
   13f90:	    clr.l 16(sp)
   13f94:	    move.l 1cd66 <SysBase>,d0
   13f9a:	    movea.l d0,a6
   13f9c:	    move.l 20(sp),d0
   13fa0:	    move.l 16(sp),d1
   13fa4:	    jsr -684(a6)
   13fa8:	    move.l d0,12(sp)
   13fac:	    move.l 12(sp),d0
   13fb0:	    move.l d0,8(sp)
	char * t = newString;
   13fb4:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   13fba:	    nop
   13fbc:	,-> move.l 32(sp),d0
   13fc0:	|   move.l d0,d1
   13fc2:	|   addq.l #1,d1
   13fc4:	|   move.l d1,32(sp)
   13fc8:	|   movea.l 24(sp),a0
   13fcc:	|   lea 1(a0),a1
   13fd0:	|   move.l a1,24(sp)
   13fd4:	|   movea.l d0,a1
   13fd6:	|   move.b (a1),d0
   13fd8:	|   move.b d0,(a0)
   13fda:	|   move.b (a0),d0
   13fdc:	'-- bne.s 13fbc <joinStrings+0x58>
	t--;
   13fde:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   13fe2:	    nop
   13fe4:	,-> move.l 36(sp),d0
   13fe8:	|   move.l d0,d1
   13fea:	|   addq.l #1,d1
   13fec:	|   move.l d1,36(sp)
   13ff0:	|   movea.l 24(sp),a0
   13ff4:	|   lea 1(a0),a1
   13ff8:	|   move.l a1,24(sp)
   13ffc:	|   movea.l d0,a1
   13ffe:	|   move.b (a1),d0
   14000:	|   move.b d0,(a0)
   14002:	|   move.b (a0),d0
   14004:	'-- bne.s 13fe4 <joinStrings+0x80>

	return newString;
   14006:	    move.l 8(sp),d0
}
   1400a:	    move.l (sp)+,d2
   1400c:	    movea.l (sp)+,a6
   1400e:	    lea 20(sp),sp
   14012:	    rts

00014014 <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   14014:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   14018:	       moveq #10,d0
   1401a:	       cmp.l 28(sp),d0
   1401e:	   ,-- bne.s 1403c <itoa+0x28>
   14020:	   |   tst.l 20(sp)
   14024:	   +-- bge.s 1403c <itoa+0x28>
        *str++ = '-';
   14026:	   |   move.l 24(sp),d0
   1402a:	   |   move.l d0,d1
   1402c:	   |   addq.l #1,d1
   1402e:	   |   move.l d1,24(sp)
   14032:	   |   movea.l d0,a0
   14034:	   |   move.b #45,(a0)
        value *= -1;
   14038:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   1403c:	   '-> move.l 24(sp),12(sp)
   14042:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   14048:	   ,-> move.l 20(sp),d0
   1404c:	   |   move.l 28(sp),-(sp)
   14050:	   |   move.l d0,-(sp)
   14052:	   |   jsr 17f50 <__modsi3>
   14058:	   |   addq.l #8,sp
   1405a:	   |   movea.l d0,a1
   1405c:	   |   move.l 12(sp),d0
   14060:	   |   move.l d0,d1
   14062:	   |   addq.l #1,d1
   14064:	   |   move.l d1,12(sp)
   14068:	   |   lea 1a21f <talk.c.490538ff+0x1f5>,a0
   1406e:	   |   move.b (0,a1,a0.l),d1
   14072:	   |   movea.l d0,a0
   14074:	   |   move.b d1,(a0)
        value /= base;
   14076:	   |   move.l 28(sp),-(sp)
   1407a:	   |   move.l 24(sp),-(sp)
   1407e:	   |   jsr 17f22 <__divsi3>
   14084:	   |   addq.l #8,sp
   14086:	   |   move.l d0,20(sp)
    } while (value);
   1408a:	   '-- bne.s 14048 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   1408c:	       move.l 12(sp),d0
   14090:	       move.l d0,d1
   14092:	       subq.l #1,d1
   14094:	       move.l d1,12(sp)
   14098:	       movea.l d0,a0
   1409a:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   1409c:	       move.l 4(sp),8(sp)
   140a2:	   ,-- bra.s 140c8 <itoa+0xb4>
        char temp = *low;
   140a4:	,--|-> movea.l 8(sp),a0
   140a8:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   140ac:	|  |   movea.l 12(sp),a0
   140b0:	|  |   move.b (a0),d0
   140b2:	|  |   movea.l 8(sp),a0
   140b6:	|  |   move.b d0,(a0)
        *ptr = temp;
   140b8:	|  |   movea.l 12(sp),a0
   140bc:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   140c0:	|  |   addq.l #1,8(sp)
   140c4:	|  |   subq.l #1,12(sp)
   140c8:	|  '-> move.l 8(sp),d0
   140cc:	|      cmp.l 12(sp),d0
   140d0:	'----- bcs.s 140a4 <itoa+0x90>
    }
    return rc;
   140d2:	       move.l 4(sp),d0
}
   140d6:	       lea 16(sp),sp
   140da:	       rts

000140dc <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   140dc:	                            lea -40(sp),sp
   140e0:	                            move.l d2,-(sp)
    char* s = str;
   140e2:	                            move.l 48(sp),40(sp)
    const char* p = format;
   140e8:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   140ee:	   ,----------------------- bra.w 14222 <vsprintf2+0x146>
        if (*p == '%') {
   140f2:	,--|----------------------> movea.l 36(sp),a0
   140f6:	|  |                        move.b (a0),d0
   140f8:	|  |                        cmpi.b #37,d0
   140fc:	|  |  ,-------------------- bne.w 14208 <vsprintf2+0x12c>
            switch (*++p) {
   14100:	|  |  |                     addq.l #1,36(sp)
   14104:	|  |  |                     movea.l 36(sp),a0
   14108:	|  |  |                     move.b (a0),d0
   1410a:	|  |  |                     ext.w d0
   1410c:	|  |  |                     movea.w d0,a0
   1410e:	|  |  |                     moveq #115,d0
   14110:	|  |  |                     cmp.l a0,d0
   14112:	|  |  |           ,-------- beq.s 1418a <vsprintf2+0xae>
   14114:	|  |  |           |         moveq #115,d1
   14116:	|  |  |           |         cmp.l a0,d1
   14118:	|  |  |  ,--------|-------- blt.w 141f0 <vsprintf2+0x114>
   1411c:	|  |  |  |        |         moveq #99,d2
   1411e:	|  |  |  |        |         cmp.l a0,d2
   14120:	|  |  |  |  ,-----|-------- beq.w 141c8 <vsprintf2+0xec>
   14124:	|  |  |  |  |     |         moveq #100,d0
   14126:	|  |  |  |  |     |         cmp.l a0,d0
   14128:	|  |  |  +--|-----|-------- bne.w 141f0 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   1412c:	|  |  |  |  |     |         addq.l #4,56(sp)
   14130:	|  |  |  |  |     |         movea.l 56(sp),a0
   14134:	|  |  |  |  |     |         move.l (a0),d0
   14136:	|  |  |  |  |     |         move.l d0,d1
   14138:	|  |  |  |  |     |         subq.l #1,d1
   1413a:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   1413e:	|  |  |  |  |     |         pea a <_start+0xa>
   14142:	|  |  |  |  |     |         lea 8(sp),a0
   14146:	|  |  |  |  |     |         move.l a0,-(sp)
   14148:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   1414c:	|  |  |  |  |     |         jsr 14014 <itoa>
   14152:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   14156:	|  |  |  |  |     |         lea 44(sp),a0
   1415a:	|  |  |  |  |     |         lea -40(a0),a0
   1415e:	|  |  |  |  |     |         move.l a0,28(sp)
   14162:	|  |  |  |  |     |     ,-- bra.s 1417e <vsprintf2+0xa2>
                        *s++ = *b;
   14164:	|  |  |  |  |     |  ,--|-> move.l 40(sp),d0
   14168:	|  |  |  |  |     |  |  |   move.l d0,d1
   1416a:	|  |  |  |  |     |  |  |   addq.l #1,d1
   1416c:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   14170:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   14174:	|  |  |  |  |     |  |  |   move.b (a0),d1
   14176:	|  |  |  |  |     |  |  |   movea.l d0,a0
   14178:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   1417a:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   1417e:	|  |  |  |  |     |  |  '-> movea.l 28(sp),a0
   14182:	|  |  |  |  |     |  |      move.b (a0),d0
   14184:	|  |  |  |  |     |  '----- bne.s 14164 <vsprintf2+0x88>
                    }
                    break;
   14186:	|  |  |  |  |  ,--|-------- bra.w 1421e <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   1418a:	|  |  |  |  |  |  '-------> addq.l #4,56(sp)
   1418e:	|  |  |  |  |  |            movea.l 56(sp),a0
   14192:	|  |  |  |  |  |            move.l (a0),d0
   14194:	|  |  |  |  |  |            move.l d0,d1
   14196:	|  |  |  |  |  |            subq.l #1,d1
   14198:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   1419c:	|  |  |  |  |  |        ,-- bra.s 141be <vsprintf2+0xe2>
                        *s++ = *sval++;
   1419e:	|  |  |  |  |  |     ,--|-> move.l 32(sp),d1
   141a2:	|  |  |  |  |  |     |  |   move.l d1,d2
   141a4:	|  |  |  |  |  |     |  |   addq.l #1,d2
   141a6:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   141aa:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   141ae:	|  |  |  |  |  |     |  |   move.l d0,d2
   141b0:	|  |  |  |  |  |     |  |   addq.l #1,d2
   141b2:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   141b6:	|  |  |  |  |  |     |  |   movea.l d1,a0
   141b8:	|  |  |  |  |  |     |  |   move.b (a0),d1
   141ba:	|  |  |  |  |  |     |  |   movea.l d0,a0
   141bc:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   141be:	|  |  |  |  |  |     |  '-> movea.l 32(sp),a0
   141c2:	|  |  |  |  |  |     |      move.b (a0),d0
   141c4:	|  |  |  |  |  |     '----- bne.s 1419e <vsprintf2+0xc2>
                    }
                    break;
   141c6:	|  |  |  |  |  +----------- bra.s 1421e <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   141c8:	|  |  |  |  '--|----------> addq.l #4,56(sp)
   141cc:	|  |  |  |     |            movea.l 56(sp),a0
   141d0:	|  |  |  |     |            move.l (a0),d0
   141d2:	|  |  |  |     |            move.l d0,d1
   141d4:	|  |  |  |     |            subq.l #1,d1
   141d6:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   141da:	|  |  |  |     |            move.l 40(sp),d0
   141de:	|  |  |  |     |            move.l d0,d2
   141e0:	|  |  |  |     |            addq.l #1,d2
   141e2:	|  |  |  |     |            move.l d2,40(sp)
   141e6:	|  |  |  |     |            move.l 24(sp),d1
   141ea:	|  |  |  |     |            movea.l d0,a0
   141ec:	|  |  |  |     |            move.b d1,(a0)
                    break;
   141ee:	|  |  |  |     +----------- bra.s 1421e <vsprintf2+0x142>
                default:
                    *s++ = *p;
   141f0:	|  |  |  '-----|----------> move.l 40(sp),d0
   141f4:	|  |  |        |            move.l d0,d1
   141f6:	|  |  |        |            addq.l #1,d1
   141f8:	|  |  |        |            move.l d1,40(sp)
   141fc:	|  |  |        |            movea.l 36(sp),a0
   14200:	|  |  |        |            move.b (a0),d1
   14202:	|  |  |        |            movea.l d0,a0
   14204:	|  |  |        |            move.b d1,(a0)
                    break;
   14206:	|  |  |        +----------- bra.s 1421e <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   14208:	|  |  '--------|----------> move.l 40(sp),d0
   1420c:	|  |           |            move.l d0,d1
   1420e:	|  |           |            addq.l #1,d1
   14210:	|  |           |            move.l d1,40(sp)
   14214:	|  |           |            movea.l 36(sp),a0
   14218:	|  |           |            move.b (a0),d1
   1421a:	|  |           |            movea.l d0,a0
   1421c:	|  |           |            move.b d1,(a0)
        }
        p++;
   1421e:	|  |           '----------> addq.l #1,36(sp)
    while (*p) {
   14222:	|  '----------------------> movea.l 36(sp),a0
   14226:	|                           move.b (a0),d0
   14228:	'-------------------------- bne.w 140f2 <vsprintf2+0x16>
    }
    *s = '\0';
   1422c:	                            movea.l 40(sp),a0
   14230:	                            clr.b (a0)
    return s - str;
   14232:	                            move.l 40(sp),d0
   14236:	                            sub.l 48(sp),d0
}
   1423a:	                            move.l (sp)+,d2
   1423c:	                            lea 40(sp),sp
   14240:	                            rts

00014242 <sprintf>:

int sprintf(char* str, const char* format, ...) {
   14242:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   14244:	moveq #16,d0
   14246:	add.l sp,d0
   14248:	move.l d0,d1
   1424a:	addq.l #4,d1
   1424c:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   14250:	move.l 16(sp),d0
   14254:	move.l 4(sp),-(sp)
   14258:	move.l d0,-(sp)
   1425a:	move.l 20(sp),-(sp)
   1425e:	jsr 140dc <vsprintf2>
   14264:	lea 12(sp),sp
   14268:	move.l d0,(sp)
    va_end(args);
   1426a:	clr.l 4(sp)

    return done;
   1426e:	move.l (sp),d0
}
   14270:	addq.l #8,sp
   14272:	rts

00014274 <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   14274:	       lea -20(sp),sp
   14278:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   1427a:	       moveq #12,d0
   1427c:	       move.l d0,20(sp)
   14280:	       clr.l 16(sp)
   14284:	       move.l 1cd66 <SysBase>,d0
   1428a:	       movea.l d0,a6
   1428c:	       move.l 20(sp),d0
   14290:	       move.l 16(sp),d1
   14294:	       jsr -684(a6)
   14298:	       move.l d0,12(sp)
   1429c:	       move.l 12(sp),d0
   142a0:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   142a4:	   ,-- bne.s 142aa <addVarToStack+0x36>
   142a6:	   |   clr.w d0
   142a8:	,--|-- bra.s 142f2 <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   142aa:	|  '-> move.l 8(sp),d0
   142ae:	|      move.l d0,-(sp)
   142b0:	|      move.l 32(sp),-(sp)
   142b4:	|      jsr 14dd6 <copyMain>
   142ba:	|      addq.l #8,sp
   142bc:	|      tst.w d0
   142be:	|  ,-- bne.s 142da <addVarToStack+0x66>
        FreeVec(newStack);
   142c0:	|  |   move.l 8(sp),4(sp)
   142c6:	|  |   move.l 1cd66 <SysBase>,d0
   142cc:	|  |   movea.l d0,a6
   142ce:	|  |   movea.l 4(sp),a1
   142d2:	|  |   jsr -690(a6)
        return FALSE;
   142d6:	|  |   clr.w d0
   142d8:	+--|-- bra.s 142f2 <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   142da:	|  '-> movea.l 32(sp),a0
   142de:	|      move.l (a0),d0
   142e0:	|      movea.l 8(sp),a0
   142e4:	|      move.l d0,8(a0)
    *thisStack = newStack;
   142e8:	|      movea.l 32(sp),a0
   142ec:	|      move.l 8(sp),(a0)
    return TRUE;
   142f0:	|      moveq #1,d0
}
   142f2:	'----> movea.l (sp)+,a6
   142f4:	       lea 20(sp),sp
   142f8:	       rts

000142fa <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   142fa:	       lea -16(sp),sp
   142fe:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   14300:	       moveq #12,d0
   14302:	       move.l d0,16(sp)
   14306:	       clr.l 12(sp)
   1430a:	       move.l 1cd66 <SysBase>,d0
   14310:	       movea.l d0,a6
   14312:	       move.l 16(sp),d0
   14316:	       move.l 12(sp),d1
   1431a:	       jsr -684(a6)
   1431e:	       move.l d0,8(sp)
   14322:	       move.l 8(sp),d0
   14326:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   1432a:	   ,-- bne.s 14330 <addVarToStackQuick+0x36>
   1432c:	   |   clr.w d0
   1432e:	,--|-- bra.s 14366 <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   14330:	|  '-> move.l 4(sp),d0
   14334:	|      pea 8 <_start+0x8>
   14338:	|      move.l 28(sp),-(sp)
   1433c:	|      move.l d0,-(sp)
   1433e:	|      jsr 174cc <memcpy>
   14344:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   14348:	|      movea.l 24(sp),a0
   1434c:	|      clr.l (a0)

    newStack->next = *thisStack;
   1434e:	|      movea.l 28(sp),a0
   14352:	|      move.l (a0),d0
   14354:	|      movea.l 4(sp),a0
   14358:	|      move.l d0,8(a0)
    *thisStack = newStack;
   1435c:	|      movea.l 28(sp),a0
   14360:	|      move.l 4(sp),(a0)
    return TRUE;
   14364:	|      moveq #1,d0
}
   14366:	'----> movea.l (sp)+,a6
   14368:	       lea 16(sp),sp
   1436c:	       rts

0001436e <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   1436e:	       lea -16(sp),sp
   14372:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   14374:	       movea.l 24(sp),a0
   14378:	       move.l (a0),d0
   1437a:	       moveq #1,d1
   1437c:	       cmp.l d0,d1
   1437e:	   ,-- bne.s 143a8 <addVariablesInSecond+0x3a>
   14380:	   |   movea.l 28(sp),a0
   14384:	   |   move.l (a0),d0
   14386:	   |   moveq #1,d1
   14388:	   |   cmp.l d0,d1
   1438a:	   +-- bne.s 143a8 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   1438c:	   |   movea.l 28(sp),a0
   14390:	   |   move.l 4(a0),d1
   14394:	   |   movea.l 24(sp),a0
   14398:	   |   move.l 4(a0),d0
   1439c:	   |   add.l d1,d0
   1439e:	   |   movea.l 28(sp),a0
   143a2:	   |   move.l d0,4(a0)
   143a6:	,--|-- bra.s 14422 <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   143a8:	|  '-> move.l 24(sp),-(sp)
   143ac:	|      jsr 1500e <getTextFromAnyVar>
   143b2:	|      addq.l #4,sp
   143b4:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   143b8:	|      move.l 28(sp),-(sp)
   143bc:	|      jsr 1500e <getTextFromAnyVar>
   143c2:	|      addq.l #4,sp
   143c4:	|      move.l d0,12(sp)

		unlinkVar(var2);
   143c8:	|      move.l 28(sp),-(sp)
   143cc:	|      jsr 14c86 <unlinkVar>
   143d2:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   143d4:	|      move.l 12(sp),-(sp)
   143d8:	|      move.l 20(sp),-(sp)
   143dc:	|      jsr 13f64 <joinStrings>
   143e2:	|      addq.l #8,sp
   143e4:	|      movea.l 28(sp),a0
   143e8:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   143ec:	|      movea.l 28(sp),a0
   143f0:	|      moveq #3,d0
   143f2:	|      move.l d0,(a0)
		FreeVec(string1);
   143f4:	|      move.l 16(sp),8(sp)
   143fa:	|      move.l 1cd66 <SysBase>,d0
   14400:	|      movea.l d0,a6
   14402:	|      movea.l 8(sp),a1
   14406:	|      jsr -690(a6)
		FreeVec(string2);
   1440a:	|      move.l 12(sp),4(sp)
   14410:	|      move.l 1cd66 <SysBase>,d0
   14416:	|      movea.l d0,a6
   14418:	|      movea.l 4(sp),a1
   1441c:	|      jsr -690(a6)
	}
}
   14420:	|      nop
   14422:	'----> nop
   14424:	       movea.l (sp)+,a6
   14426:	       lea 16(sp),sp
   1442a:	       rts

0001442c <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   1442c:	movea.l 8(sp),a0
   14430:	move.l 4(a0),-(sp)
   14434:	move.l (a0),-(sp)
   14436:	movea.l 12(sp),a0
   1443a:	move.l 4(a0),-(sp)
   1443e:	move.l (a0),-(sp)
   14440:	jsr 14462 <compareVars>
   14446:	lea 16(sp),sp
   1444a:	move.l d0,-(sp)
   1444c:	pea 1 <_start+0x1>
   14450:	move.l 16(sp),-(sp)
   14454:	jsr 1532a <setVariable>
   1445a:	lea 12(sp),sp
}
   1445e:	nop
   14460:	rts

00014462 <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   14462:	       subq.l #4,sp
	int re = 0;
   14464:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   14466:	       move.l 8(sp),d1
   1446a:	       move.l 16(sp),d0
   1446e:	       cmp.l d1,d0
   14470:	,----- bne.w 14538 <compareVars+0xd6>
		switch (var1.varType) {
   14474:	|      move.l 8(sp),d0
   14478:	|      moveq #9,d1
   1447a:	|      cmp.l d0,d1
   1447c:	|  ,-- bcs.w 14520 <compareVars+0xbe>
   14480:	|  |   add.l d0,d0
   14482:	|  |   movea.l d0,a0
   14484:	|  |   adda.l #83088,a0
   1448a:	|  |   move.w (a0),d0
   1448c:	|  |   jmp (14490 <compareVars+0x2e>,pc,d0.w)
   14490:	|  |   ori.b #-112,(a4)
   14494:	|  |   ori.l #5243024,(a0)
   1449a:	|  |   ori.l #7733392,(a0)
   144a0:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   144a6:	|  |   move.l d0,(sp)
			break;
   144a8:	+--|-- bra.w 14538 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   144ac:	|  |   move.l 12(sp),d1
   144b0:	|  |   move.l 20(sp),d0
   144b4:	|  |   cmp.l d1,d0
   144b6:	|  |   seq d0
   144b8:	|  |   neg.b d0
   144ba:	|  |   move.b d0,d0
   144bc:	|  |   andi.l #255,d0
   144c2:	|  |   move.l d0,(sp)
			break;
   144c4:	+--|-- bra.s 14538 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   144c6:	|  |   move.l 12(sp),d1
   144ca:	|  |   move.l 20(sp),d0
   144ce:	|  |   cmp.l d1,d0
   144d0:	|  |   seq d0
   144d2:	|  |   neg.b d0
   144d4:	|  |   move.b d0,d0
   144d6:	|  |   andi.l #255,d0
   144dc:	|  |   move.l d0,(sp)
			break;
   144de:	+--|-- bra.s 14538 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   144e0:	|  |   move.l 20(sp),d1
   144e4:	|  |   move.l 12(sp),d0
   144e8:	|  |   move.l d1,-(sp)
   144ea:	|  |   move.l d0,-(sp)
   144ec:	|  |   jsr 13ee4 <strcmp>
   144f2:	|  |   addq.l #8,sp
   144f4:	|  |   tst.l d0
   144f6:	|  |   seq d0
   144f8:	|  |   neg.b d0
   144fa:	|  |   move.b d0,d0
   144fc:	|  |   andi.l #255,d0
   14502:	|  |   move.l d0,(sp)
			break;
   14504:	+--|-- bra.s 14538 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   14506:	|  |   move.l 12(sp),d1
   1450a:	|  |   move.l 20(sp),d0
   1450e:	|  |   cmp.l d1,d0
   14510:	|  |   seq d0
   14512:	|  |   neg.b d0
   14514:	|  |   move.b d0,d0
   14516:	|  |   andi.l #255,d0
   1451c:	|  |   move.l d0,(sp)
			break;
   1451e:	+--|-- bra.s 14538 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   14520:	|  '-> move.l 12(sp),d1
   14524:	|      move.l 20(sp),d0
   14528:	|      cmp.l d1,d0
   1452a:	|      seq d0
   1452c:	|      neg.b d0
   1452e:	|      move.b d0,d0
   14530:	|      andi.l #255,d0
   14536:	|      move.l d0,(sp)
		}
	}
	return re;
   14538:	'----> move.l (sp),d0
}
   1453a:	       addq.l #4,sp
   1453c:	       rts

0001453e <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   1453e:	             lea -16(sp),sp
   14542:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   14544:	             movea.l 28(sp),a0
   14548:	             moveq #6,d0
   1454a:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   1454c:	             moveq #12,d0
   1454e:	             move.l d0,12(sp)
   14552:	             clr.l 8(sp)
   14556:	             move.l 1cd66 <SysBase>,d0
   1455c:	             movea.l d0,a6
   1455e:	             move.l 12(sp),d0
   14562:	             move.l 8(sp),d1
   14566:	             jsr -684(a6)
   1456a:	             move.l d0,4(sp)
   1456e:	             move.l 4(sp),d0
   14572:	             movea.l 28(sp),a0
   14576:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   1457a:	             movea.l 28(sp),a0
   1457e:	             move.l 4(a0),d0
   14582:	         ,-- bne.s 1458a <copyStack+0x4c>
   14584:	         |   clr.w d0
   14586:	,--------|-- bra.w 1460c <copyStack+0xce>
	to->varData.theStack->first = NULL;
   1458a:	|        '-> movea.l 28(sp),a0
   1458e:	|            movea.l 4(a0),a0
   14592:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   14594:	|            movea.l 28(sp),a0
   14598:	|            movea.l 4(a0),a0
   1459c:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   145a0:	|            movea.l 28(sp),a0
   145a4:	|            movea.l 4(a0),a0
   145a8:	|            moveq #1,d0
   145aa:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   145ae:	|            movea.l 24(sp),a0
   145b2:	|            movea.l 4(a0),a0
   145b6:	|            move.l (a0),16(sp)

	while (a) {
   145ba:	|     ,----- bra.s 14604 <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   145bc:	|  ,--|----> movea.l 28(sp),a0
   145c0:	|  |  |      move.l 4(a0),d0
   145c4:	|  |  |      move.l d0,d1
   145c6:	|  |  |      move.l 16(sp),d0
   145ca:	|  |  |      move.l d1,-(sp)
   145cc:	|  |  |      move.l d0,-(sp)
   145ce:	|  |  |      jsr 14274 <addVarToStack>
   145d4:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   145d6:	|  |  |      movea.l 28(sp),a0
   145da:	|  |  |      movea.l 4(a0),a0
   145de:	|  |  |      move.l 4(a0),d0
   145e2:	|  |  |  ,-- bne.s 145fa <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   145e4:	|  |  |  |   movea.l 28(sp),a0
   145e8:	|  |  |  |   movea.l 4(a0),a1
   145ec:	|  |  |  |   movea.l 28(sp),a0
   145f0:	|  |  |  |   movea.l 4(a0),a0
   145f4:	|  |  |  |   move.l (a1),d0
   145f6:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   145fa:	|  |  |  '-> movea.l 16(sp),a0
   145fe:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   14604:	|  |  '----> tst.l 16(sp)
   14608:	|  '-------- bne.s 145bc <copyStack+0x7e>
	}

	return TRUE;
   1460a:	|            moveq #1,d0
}
   1460c:	'----------> movea.l (sp)+,a6
   1460e:	             lea 16(sp),sp
   14612:	             rts

00014614 <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   14614:	                lea -20(sp),sp
   14618:	                move.l a6,-(sp)
   1461a:	                move.l 36(sp),d0
   1461e:	                move.w d0,d0
   14620:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   14624:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   1462a:	                clr.l 16(sp)

    while (*huntVar) {
   1462e:	   ,----------- bra.s 146ac <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   14630:	,--|----------> movea.l 20(sp),a0
   14634:	|  |            movea.l (a0),a0
   14636:	|  |            movea.l 28(sp),a1
   1463a:	|  |            move.l 4(a1),-(sp)
   1463e:	|  |            move.l (a1),-(sp)
   14640:	|  |            move.l 4(a0),-(sp)
   14644:	|  |            move.l (a0),-(sp)
   14646:	|  |            jsr 14462 <compareVars>
   1464c:	|  |            lea 16(sp),sp
   14650:	|  |            tst.l d0
   14652:	|  |  ,-------- beq.s 1469e <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   14654:	|  |  |         movea.l 20(sp),a0
   14658:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   1465c:	|  |  |         movea.l 12(sp),a0
   14660:	|  |  |         move.l 8(a0),d0
   14664:	|  |  |         movea.l 20(sp),a0
   14668:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   1466a:	|  |  |         move.l 12(sp),d0
   1466e:	|  |  |         move.l d0,-(sp)
   14670:	|  |  |         jsr 14c86 <unlinkVar>
   14676:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   14678:	|  |  |         move.l 12(sp),8(sp)
   1467e:	|  |  |         move.l 1cd66 <SysBase>,d0
   14684:	|  |  |         movea.l d0,a6
   14686:	|  |  |         movea.l 8(sp),a1
   1468a:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   1468e:	|  |  |         tst.w 6(sp)
   14692:	|  |  |     ,-- bne.s 14698 <deleteVarFromStack+0x84>
   14694:	|  |  |     |   moveq #1,d0
   14696:	|  |  |  ,--|-- bra.s 146ba <deleteVarFromStack+0xa6>
            reply++;
   14698:	|  |  |  |  '-> addq.l #1,16(sp)
   1469c:	|  +--|--|----- bra.s 146ac <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   1469e:	|  |  '--|----> movea.l 20(sp),a0
   146a2:	|  |     |      move.l (a0),d0
   146a4:	|  |     |      move.l d0,d1
   146a6:	|  |     |      addq.l #8,d1
   146a8:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   146ac:	|  '-----|----> movea.l 20(sp),a0
   146b0:	|        |      move.l (a0),d0
   146b2:	'--------|----- bne.w 14630 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   146b6:	         |      move.l 16(sp),d0
}
   146ba:	         '----> movea.l (sp)+,a6
   146bc:	                lea 20(sp),sp
   146c0:	                rts

000146c2 <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   146c2:	       movea.l 4(sp),a0
   146c6:	       move.l 4(a0),d0
   146ca:	       cmp.l 8(sp),d0
   146ce:	   ,-- bhi.s 146d4 <fastArrayGetByIndex+0x12>
   146d0:	   |   moveq #0,d0
   146d2:	,--|-- bra.s 146e2 <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   146d4:	|  '-> movea.l 4(sp),a0
   146d8:	|      move.l (a0),d1
   146da:	|      move.l 8(sp),d0
   146de:	|      lsl.l #3,d0
   146e0:	|      add.l d1,d0
}
   146e2:	'----> rts

000146e4 <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   146e4:	                lea -32(sp),sp
   146e8:	                move.l a6,-(sp)
   146ea:	                move.l a2,-(sp)
    struct persona *p = NULL;
   146ec:	                clr.l 36(sp)

    switch (thisVar->varType) {
   146f0:	                movea.l 44(sp),a0
   146f4:	                move.l (a0),d0
   146f6:	                moveq #8,d1
   146f8:	                cmp.l d0,d1
   146fa:	            ,-- beq.s 14708 <getCostumeFromVar+0x24>
   146fc:	            |   moveq #9,d1
   146fe:	            |   cmp.l d0,d1
   14700:	   ,--------|-- beq.w 147b6 <getCostumeFromVar+0xd2>
   14704:	,--|--------|-- bra.w 147c0 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   14708:	|  |        '-> moveq #8,d0
   1470a:	|  |            move.l d0,28(sp)
   1470e:	|  |            clr.l 24(sp)
   14712:	|  |            move.l 1cd66 <SysBase>,d0
   14718:	|  |            movea.l d0,a6
   1471a:	|  |            move.l 28(sp),d0
   1471e:	|  |            move.l 24(sp),d1
   14722:	|  |            jsr -684(a6)
   14726:	|  |            move.l d0,20(sp)
   1472a:	|  |            move.l 20(sp),d0
   1472e:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   14732:	|  |        ,-- bne.s 1473a <getCostumeFromVar+0x56>
   14734:	|  |        |   moveq #0,d0
   14736:	|  |  ,-----|-- bra.w 147ea <getCostumeFromVar+0x106>
            p->numDirections = 1;
   1473a:	|  |  |     '-> movea.l 36(sp),a0
   1473e:	|  |  |         moveq #1,d1
   14740:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   14744:	|  |  |         moveq #12,d0
   14746:	|  |  |         move.l d0,16(sp)
   1474a:	|  |  |         clr.l 12(sp)
   1474e:	|  |  |         move.l 1cd66 <SysBase>,d0
   14754:	|  |  |         movea.l d0,a6
   14756:	|  |  |         move.l 16(sp),d0
   1475a:	|  |  |         move.l 12(sp),d1
   1475e:	|  |  |         jsr -684(a6)
   14762:	|  |  |         move.l d0,8(sp)
   14766:	|  |  |         move.l 8(sp),d0
   1476a:	|  |  |         movea.l 36(sp),a0
   1476e:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   14770:	|  |  |         movea.l 36(sp),a0
   14774:	|  |  |         move.l (a0),d0
   14776:	|  |  |     ,-- bne.s 1477c <getCostumeFromVar+0x98>
   14778:	|  |  |     |   moveq #0,d0
   1477a:	|  |  +-----|-- bra.s 147ea <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   1477c:	|  |  |     '-> clr.l 32(sp)
   14780:	|  |  |     ,-- bra.s 147ac <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   14782:	|  |  |  ,--|-> movea.l 44(sp),a0
   14786:	|  |  |  |  |   move.l 4(a0),d0
   1478a:	|  |  |  |  |   movea.l 36(sp),a0
   1478e:	|  |  |  |  |   movea.l (a0),a0
   14790:	|  |  |  |  |   move.l 32(sp),d1
   14794:	|  |  |  |  |   add.l d1,d1
   14796:	|  |  |  |  |   add.l d1,d1
   14798:	|  |  |  |  |   lea (0,a0,d1.l),a2
   1479c:	|  |  |  |  |   move.l d0,-(sp)
   1479e:	|  |  |  |  |   jsr 96f0 <copyAnim>
   147a4:	|  |  |  |  |   addq.l #4,sp
   147a6:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   147a8:	|  |  |  |  |   addq.l #1,32(sp)
   147ac:	|  |  |  |  '-> moveq #2,d1
   147ae:	|  |  |  |      cmp.l 32(sp),d1
   147b2:	|  |  |  '----- bge.s 14782 <getCostumeFromVar+0x9e>
            }
            break;
   147b4:	|  |  |     ,-- bra.s 147e6 <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   147b6:	|  '--|-----|-> movea.l 44(sp),a0
   147ba:	|     |     |   move.l 4(a0),d0
   147be:	|     +-----|-- bra.s 147ea <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   147c0:	'-----|-----|-> movea.l 44(sp),a0
   147c4:	      |     |   move.l (a0),d0
   147c6:	      |     |   add.l d0,d0
   147c8:	      |     |   movea.l d0,a1
   147ca:	      |     |   adda.l d0,a1
   147cc:	      |     |   lea 1cc36 <typeName>,a0
   147d2:	      |     |   move.l (0,a1,a0.l),d0
   147d6:	      |     |   move.l d0,-(sp)
   147d8:	      |     |   pea 1a291 <talk.c.490538ff+0x267>
   147de:	      |     |   jsr 17518 <KPrintF>
   147e4:	      |     |   addq.l #8,sp
    }

    return p;
   147e6:	      |     '-> move.l 36(sp),d0
}
   147ea:	      '-------> movea.l (sp)+,a2
   147ec:	                movea.l (sp)+,a6
   147ee:	                lea 32(sp),sp
   147f2:	                rts

000147f4 <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   147f4:	                lea -96(sp),sp
   147f8:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   147fc:	                move.l 116(sp),-(sp)
   14800:	                pea 1a2c9 <talk.c.490538ff+0x29f>
   14806:	                jsr 13f64 <joinStrings>
   1480c:	                addq.l #8,sp
   1480e:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   14812:	            ,-- bne.s 1481a <getSavedGamesStack+0x26>
   14814:	            |   clr.w d0
   14816:	,-----------|-- bra.w 14a2e <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   1481a:	|           '-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   1481e:	|               move.l #107211,98(sp)
   14826:	|               moveq #-2,d0
   14828:	|               move.l d0,94(sp)
   1482c:	|               move.l 1cd6e <DOSBase>,d0
   14832:	|               movea.l d0,a6
   14834:	|               move.l 98(sp),d1
   14838:	|               move.l 94(sp),d2
   1483c:	|               jsr -84(a6)
   14840:	|               move.l d0,90(sp)
   14844:	|               move.l 90(sp),d0
   14848:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   1484c:	|           ,-- bne.s 14854 <getSavedGamesStack+0x60>
   1484e:	|           |   clr.w d0
   14850:	+-----------|-- bra.w 14a2e <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   14854:	|           '-> move.l #260,82(sp)
   1485c:	|               move.l #65536,78(sp)
   14864:	|               move.l 1cd66 <SysBase>,d0
   1486a:	|               movea.l d0,a6
   1486c:	|               move.l 82(sp),d0
   14870:	|               move.l 78(sp),d1
   14874:	|               jsr -684(a6)
   14878:	|               move.l d0,74(sp)
   1487c:	|               move.l 74(sp),d0
   14880:	|               move.l d0,70(sp)
	if (!fib) {
   14884:	|           ,-- bne.s 148a2 <getSavedGamesStack+0xae>
		UnLock(dirLock);
   14886:	|           |   move.l 86(sp),22(sp)
   1488c:	|           |   move.l 1cd6e <DOSBase>,d0
   14892:	|           |   movea.l d0,a6
   14894:	|           |   move.l 22(sp),d1
   14898:	|           |   jsr -90(a6)
		return FALSE;
   1489c:	|           |   clr.w d0
   1489e:	+-----------|-- bra.w 14a2e <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   148a2:	|           '-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   148a6:	|               move.l 86(sp),66(sp)
   148ac:	|               move.l 70(sp),62(sp)
   148b2:	|               move.l 1cd6e <DOSBase>,d0
   148b8:	|               movea.l d0,a6
   148ba:	|               move.l 66(sp),d1
   148be:	|               move.l 62(sp),d2
   148c2:	|               jsr -102(a6)
   148c6:	|               move.l d0,58(sp)
   148ca:	|               move.l 58(sp),d0
   148ce:	|  ,----------- beq.w 149e2 <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   148d2:	|  |        ,-- bra.w 149ae <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   148d6:	|  |  ,-----|-> move.l 70(sp),d2
   148da:	|  |  |     |   addq.l #8,d2
   148dc:	|  |  |     |   move.l 70(sp),d0
   148e0:	|  |  |     |   addq.l #8,d0
   148e2:	|  |  |     |   move.l d0,-(sp)
   148e4:	|  |  |     |   jsr 13f24 <strlen>
   148ea:	|  |  |     |   addq.l #4,sp
   148ec:	|  |  |     |   move.l d0,d3
   148ee:	|  |  |     |   move.l 116(sp),-(sp)
   148f2:	|  |  |     |   jsr 13f24 <strlen>
   148f8:	|  |  |     |   addq.l #4,sp
   148fa:	|  |  |     |   move.l d3,d1
   148fc:	|  |  |     |   sub.l d0,d1
   148fe:	|  |  |     |   move.l d2,d0
   14900:	|  |  |     |   add.l d1,d0
   14902:	|  |  |     |   move.l 116(sp),-(sp)
   14906:	|  |  |     |   move.l d0,-(sp)
   14908:	|  |  |     |   jsr 13ee4 <strcmp>
   1490e:	|  |  |     |   addq.l #8,sp
   14910:	|  |  |     |   tst.l d0
   14912:	|  |  |     +-- bne.w 149ae <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   14916:	|  |  |     |   move.l 70(sp),d0
   1491a:	|  |  |     |   addq.l #8,d0
   1491c:	|  |  |     |   move.l d0,-(sp)
   1491e:	|  |  |     |   jsr 13f24 <strlen>
   14924:	|  |  |     |   addq.l #4,sp
   14926:	|  |  |     |   move.l d0,d2
   14928:	|  |  |     |   move.l 116(sp),-(sp)
   1492c:	|  |  |     |   jsr 13f24 <strlen>
   14932:	|  |  |     |   addq.l #4,sp
   14934:	|  |  |     |   move.l d0,d1
   14936:	|  |  |     |   move.l d2,d0
   14938:	|  |  |     |   sub.l d1,d0
   1493a:	|  |  |     |   movea.l 70(sp),a0
   1493e:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   14942:	|  |  |     |   move.l 70(sp),d0
   14946:	|  |  |     |   addq.l #8,d0
   14948:	|  |  |     |   move.l d0,-(sp)
   1494a:	|  |  |     |   jsr 118 <decodeFilename>
   14950:	|  |  |     |   addq.l #4,sp
   14952:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   14956:	|  |  |     |   move.l 42(sp),-(sp)
   1495a:	|  |  |     |   lea 18(sp),a0
   1495e:	|  |  |     |   move.l a0,-(sp)
   14960:	|  |  |     |   jsr 14c5a <makeTextVar>
   14966:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14968:	|  |  |     |   move.l 42(sp),38(sp)
   1496e:	|  |  |     |   move.l 1cd66 <SysBase>,d0
   14974:	|  |  |     |   movea.l d0,a6
   14976:	|  |  |     |   movea.l 38(sp),a1
   1497a:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1497e:	|  |  |     |   move.l 112(sp),d0
   14982:	|  |  |     |   move.l d0,-(sp)
   14984:	|  |  |     |   lea 18(sp),a0
   14988:	|  |  |     |   move.l a0,-(sp)
   1498a:	|  |  |     |   jsr 14274 <addVarToStack>
   14990:	|  |  |     |   addq.l #8,sp
   14992:	|  |  |     |   tst.w d0
   14994:	|  |  |  ,--|-- beq.s 149e6 <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   14996:	|  |  |  |  |   movea.l 112(sp),a0
   1499a:	|  |  |  |  |   move.l 4(a0),d0
   1499e:	|  |  |  |  +-- bne.s 149ae <getSavedGamesStack+0x1ba>
   149a0:	|  |  |  |  |   movea.l 112(sp),a0
   149a4:	|  |  |  |  |   move.l (a0),d0
   149a6:	|  |  |  |  |   movea.l 112(sp),a0
   149aa:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   149ae:	|  |  |  |  '-> move.l 86(sp),54(sp)
   149b4:	|  |  |  |      move.l 70(sp),50(sp)
   149ba:	|  |  |  |      move.l 1cd6e <DOSBase>,d0
   149c0:	|  |  |  |      movea.l d0,a6
   149c2:	|  |  |  |      move.l 54(sp),d1
   149c6:	|  |  |  |      move.l 50(sp),d2
   149ca:	|  |  |  |      jsr -108(a6)
   149ce:	|  |  |  |      move.l d0,46(sp)
   149d2:	|  |  |  |      move.l 46(sp),d0
   149d6:	|  |  '--|----- bne.w 148d6 <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   149da:	|  |     |      move.w #1,106(sp)
   149e0:	|  |     |  ,-- bra.s 149e8 <getSavedGamesStack+0x1f4>
	}

cleanup:
   149e2:	|  '-----|--|-> nop
   149e4:	|        |  +-- bra.s 149e8 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   149e6:	|        '--|-> nop
	FreeVec(fib);
   149e8:	|           '-> move.l 70(sp),34(sp)
   149ee:	|               move.l 1cd66 <SysBase>,d0
   149f4:	|               movea.l d0,a6
   149f6:	|               movea.l 34(sp),a1
   149fa:	|               jsr -690(a6)
	UnLock(dirLock);
   149fe:	|               move.l 86(sp),30(sp)
   14a04:	|               move.l 1cd6e <DOSBase>,d0
   14a0a:	|               movea.l d0,a6
   14a0c:	|               move.l 30(sp),d1
   14a10:	|               jsr -90(a6)
	FreeVec(pattern);
   14a14:	|               move.l 102(sp),26(sp)
   14a1a:	|               move.l 1cd66 <SysBase>,d0
   14a20:	|               movea.l d0,a6
   14a22:	|               movea.l 26(sp),a1
   14a26:	|               jsr -690(a6)
	return result;
   14a2a:	|               move.w 106(sp),d0
}
   14a2e:	'-------------> movem.l (sp)+,d2-d3/a6
   14a32:	                lea 96(sp),sp
   14a36:	                rts

00014a38 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   14a38:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   14a3a:	       movea.l 20(sp),a0
   14a3e:	       move.l (a0),d0
   14a40:	       cmp.l 16(sp),d0
   14a44:	,----- beq.s 14aa8 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   14a46:	|      move.l 16(sp),d0
   14a4a:	|      add.l d0,d0
   14a4c:	|      movea.l d0,a1
   14a4e:	|      adda.l d0,a1
   14a50:	|      lea 1cc36 <typeName>,a0
   14a56:	|      move.l (0,a1,a0.l),d0
   14a5a:	|      move.l d0,-(sp)
   14a5c:	|      pea 1a2cd <talk.c.490538ff+0x2a3>
   14a62:	|      jsr 13f64 <joinStrings>
   14a68:	|      addq.l #8,sp
   14a6a:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14a6e:	|      movea.l 20(sp),a0
   14a72:	|      move.l (a0),d0
   14a74:	|      add.l d0,d0
   14a76:	|      movea.l d0,a1
   14a78:	|      adda.l d0,a1
   14a7a:	|      lea 1cc36 <typeName>,a0
   14a80:	|      move.l (0,a1,a0.l),d0
   14a84:	|      move.l d0,-(sp)
   14a86:	|      pea 1a30f <talk.c.490538ff+0x2e5>
   14a8c:	|      jsr 13f64 <joinStrings>
   14a92:	|      addq.l #8,sp
   14a94:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   14a96:	|      move.l (sp),-(sp)
   14a98:	|      move.l 8(sp),-(sp)
   14a9c:	|      jsr 17518 <KPrintF>
   14aa2:	|      addq.l #8,sp

		return FALSE;
   14aa4:	|      clr.w d0
   14aa6:	|  ,-- bra.s 14ab8 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   14aa8:	'--|-> movea.l 20(sp),a0
   14aac:	   |   move.l 4(a0),d0
   14ab0:	   |   movea.l 12(sp),a0
   14ab4:	   |   move.l d0,(a0)
	return TRUE;
   14ab6:	   |   moveq #1,d0
}
   14ab8:	   '-> addq.l #8,sp
   14aba:	       rts

00014abc <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   14abc:	move.l 8(sp),-(sp)
   14ac0:	jsr 784e <getNumberedString>
   14ac6:	addq.l #4,sp
   14ac8:	move.l d0,-(sp)
   14aca:	move.l 8(sp),-(sp)
   14ace:	jsr 14c5a <makeTextVar>
   14ad4:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   14ad6:	movea.l 4(sp),a0
   14ada:	move.l 4(a0),d0
   14ade:	sne d0
   14ae0:	neg.b d0
   14ae2:	move.b d0,d0
   14ae4:	andi.w #255,d0
}
   14ae8:	rts

00014aea <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14aea:	          subq.l #8,sp
    int size = stackSize(stacky);
   14aec:	          move.l 16(sp),-(sp)
   14af0:	          jsr 15398 <stackSize>
   14af6:	          addq.l #4,sp
   14af8:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14afc:	          move.l 4(sp),-(sp)
   14b00:	          move.l 16(sp),-(sp)
   14b04:	          jsr 14b54 <makeFastArraySize>
   14b0a:	          addq.l #8,sp
   14b0c:	          tst.w d0
   14b0e:	      ,-- bne.s 14b14 <makeFastArrayFromStack+0x2a>
   14b10:	      |   clr.w d0
   14b12:	,-----|-- bra.s 14b50 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   14b14:	|     '-> movea.l 16(sp),a0
   14b18:	|         move.l (a0),(sp)
    size = 0;
   14b1a:	|         clr.l 4(sp)
    while (allV) {
   14b1e:	|     ,-- bra.s 14b4a <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14b20:	|  ,--|-> movea.l 12(sp),a0
   14b24:	|  |  |   movea.l 4(a0),a0
   14b28:	|  |  |   move.l (a0),d1
   14b2a:	|  |  |   move.l 4(sp),d0
   14b2e:	|  |  |   lsl.l #3,d0
   14b30:	|  |  |   add.l d0,d1
   14b32:	|  |  |   move.l (sp),d0
   14b34:	|  |  |   move.l d1,-(sp)
   14b36:	|  |  |   move.l d0,-(sp)
   14b38:	|  |  |   jsr 14dd6 <copyMain>
   14b3e:	|  |  |   addq.l #8,sp
        size++;
   14b40:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   14b44:	|  |  |   movea.l (sp),a0
   14b46:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14b4a:	|  |  '-> tst.l (sp)
   14b4c:	|  '----- bne.s 14b20 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14b4e:	|         moveq #1,d0
}
   14b50:	'-------> addq.l #8,sp
   14b52:	          rts

00014b54 <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   14b54:	          lea -28(sp),sp
   14b58:	          move.l a6,-(sp)
    if (size < 0) {
   14b5a:	          tst.l 40(sp)
   14b5e:	      ,-- bge.s 14b74 <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14b60:	      |   pea 1a354 <talk.c.490538ff+0x32a>
   14b66:	      |   jsr 17518 <KPrintF>
   14b6c:	      |   addq.l #4,sp
		return FALSE;
   14b6e:	      |   clr.w d0
   14b70:	,-----|-- bra.w 14c52 <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   14b74:	|     '-> move.l 36(sp),-(sp)
   14b78:	|         jsr 14c86 <unlinkVar>
   14b7e:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   14b80:	|         movea.l 36(sp),a0
   14b84:	|         moveq #10,d0
   14b86:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   14b88:	|         moveq #12,d0
   14b8a:	|         move.l d0,24(sp)
   14b8e:	|         clr.l 20(sp)
   14b92:	|         move.l 1cd66 <SysBase>,d0
   14b98:	|         movea.l d0,a6
   14b9a:	|         move.l 24(sp),d0
   14b9e:	|         move.l 20(sp),d1
   14ba2:	|         jsr -684(a6)
   14ba6:	|         move.l d0,16(sp)
   14baa:	|         move.l 16(sp),d0
   14bae:	|         movea.l 36(sp),a0
   14bb2:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   14bb6:	|         movea.l 36(sp),a0
   14bba:	|         move.l 4(a0),d0
   14bbe:	|     ,-- bne.s 14bc6 <makeFastArraySize+0x72>
   14bc0:	|     |   clr.w d0
   14bc2:	+-----|-- bra.w 14c52 <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   14bc6:	|     '-> move.l 40(sp),d0
   14bca:	|         lsl.l #3,d0
   14bcc:	|         move.l d0,12(sp)
   14bd0:	|         clr.l 8(sp)
   14bd4:	|         move.l 1cd66 <SysBase>,d0
   14bda:	|         movea.l d0,a6
   14bdc:	|         move.l 12(sp),d0
   14be0:	|         move.l 8(sp),d1
   14be4:	|         jsr -684(a6)
   14be8:	|         move.l d0,4(sp)
   14bec:	|         move.l 4(sp),d0
   14bf0:	|         movea.l 36(sp),a0
   14bf4:	|         movea.l 4(a0),a0
   14bf8:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14bfa:	|         movea.l 36(sp),a0
   14bfe:	|         movea.l 4(a0),a0
   14c02:	|         move.l (a0),d0
   14c04:	|     ,-- bne.s 14c0a <makeFastArraySize+0xb6>
   14c06:	|     |   clr.w d0
   14c08:	+-----|-- bra.s 14c52 <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14c0a:	|     '-> clr.l 28(sp)
   14c0e:	|     ,-- bra.s 14c2a <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14c10:	|  ,--|-> movea.l 36(sp),a0
   14c14:	|  |  |   movea.l 4(a0),a0
   14c18:	|  |  |   move.l (a0),d1
   14c1a:	|  |  |   move.l 28(sp),d0
   14c1e:	|  |  |   lsl.l #3,d0
   14c20:	|  |  |   movea.l d1,a0
   14c22:	|  |  |   adda.l d0,a0
   14c24:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   14c26:	|  |  |   addq.l #1,28(sp)
   14c2a:	|  |  '-> move.l 28(sp),d0
   14c2e:	|  |      cmp.l 40(sp),d0
   14c32:	|  '----- blt.s 14c10 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   14c34:	|         movea.l 36(sp),a0
   14c38:	|         movea.l 4(a0),a0
   14c3c:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   14c42:	|         movea.l 36(sp),a0
   14c46:	|         movea.l 4(a0),a0
   14c4a:	|         moveq #1,d0
   14c4c:	|         move.l d0,8(a0)
    return TRUE;
   14c50:	|         moveq #1,d0
}
   14c52:	'-------> movea.l (sp)+,a6
   14c54:	          lea 28(sp),sp
   14c58:	          rts

00014c5a <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14c5a:	move.l 4(sp),-(sp)
   14c5e:	jsr 14c86 <unlinkVar>
   14c64:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   14c66:	movea.l 4(sp),a0
   14c6a:	moveq #3,d0
   14c6c:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14c6e:	move.l 8(sp),-(sp)
   14c72:	jsr b8 <copyString>
   14c78:	addq.l #4,sp
   14c7a:	movea.l 4(sp),a0
   14c7e:	move.l d0,4(a0)
}
   14c82:	nop
   14c84:	rts

00014c86 <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   14c86:	                      lea -16(sp),sp
   14c8a:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   14c8c:	                      movea.l 24(sp),a0
   14c90:	                      move.l (a0),d0
   14c92:	                      moveq #10,d1
   14c94:	                      cmp.l d0,d1
   14c96:	            ,-------- beq.w 14d4e <unlinkVar+0xc8>
   14c9a:	            |         moveq #10,d1
   14c9c:	            |         cmp.l d0,d1
   14c9e:	,-----------|-------- bcs.w 14dc2 <unlinkVar+0x13c>
   14ca2:	|           |         moveq #8,d1
   14ca4:	|           |         cmp.l d0,d1
   14ca6:	|  ,--------|-------- beq.w 14dae <unlinkVar+0x128>
   14caa:	|  |        |         moveq #8,d1
   14cac:	|  |        |         cmp.l d0,d1
   14cae:	+--|--------|-------- bcs.w 14dc2 <unlinkVar+0x13c>
   14cb2:	|  |        |         moveq #3,d1
   14cb4:	|  |        |         cmp.l d0,d1
   14cb6:	|  |        |     ,-- beq.s 14cc2 <unlinkVar+0x3c>
   14cb8:	|  |        |     |   moveq #6,d1
   14cba:	|  |        |     |   cmp.l d0,d1
   14cbc:	|  |        |  ,--|-- beq.s 14ce8 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   14cbe:	+--|--------|--|--|-- bra.w 14dc2 <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   14cc2:	|  |        |  |  '-> movea.l 24(sp),a0
   14cc6:	|  |        |  |      move.l 4(a0),4(sp)
   14ccc:	|  |        |  |      move.l 1cd66 <SysBase>,d0
   14cd2:	|  |        |  |      movea.l d0,a6
   14cd4:	|  |        |  |      movea.l 4(sp),a1
   14cd8:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14cdc:	|  |        |  |      movea.l 24(sp),a0
   14ce0:	|  |        |  |      clr.l 4(a0)
		break;
   14ce4:	|  |  ,-----|--|----- bra.w 14dcc <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14ce8:	|  |  |     |  '----> movea.l 24(sp),a0
   14cec:	|  |  |     |         movea.l 4(a0),a0
   14cf0:	|  |  |     |         move.l 8(a0),d0
   14cf4:	|  |  |     |         subq.l #1,d0
   14cf6:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14cfa:	|  |  |     |         movea.l 24(sp),a0
   14cfe:	|  |  |     |         movea.l 4(a0),a0
   14d02:	|  |  |     |         move.l 8(a0),d0
   14d06:	|  |  |  ,--|-------- bgt.w 14dc6 <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14d0a:	|  |  |  |  |     ,-- bra.s 14d1e <unlinkVar+0x98>
   14d0c:	|  |  |  |  |  ,--|-> movea.l 24(sp),a0
   14d10:	|  |  |  |  |  |  |   move.l 4(a0),d0
   14d14:	|  |  |  |  |  |  |   move.l d0,-(sp)
   14d16:	|  |  |  |  |  |  |   jsr 153bc <trimStack>
   14d1c:	|  |  |  |  |  |  |   addq.l #4,sp
   14d1e:	|  |  |  |  |  |  '-> movea.l 24(sp),a0
   14d22:	|  |  |  |  |  |      movea.l 4(a0),a0
   14d26:	|  |  |  |  |  |      move.l (a0),d0
   14d28:	|  |  |  |  |  '----- bne.s 14d0c <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14d2a:	|  |  |  |  |         movea.l 24(sp),a0
   14d2e:	|  |  |  |  |         move.l 4(a0),8(sp)
   14d34:	|  |  |  |  |         move.l 1cd66 <SysBase>,d0
   14d3a:	|  |  |  |  |         movea.l d0,a6
   14d3c:	|  |  |  |  |         movea.l 8(sp),a1
   14d40:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   14d44:	|  |  |  |  |         movea.l 24(sp),a0
   14d48:	|  |  |  |  |         clr.l 4(a0)
		break;
   14d4c:	|  |  |  +--|-------- bra.s 14dc6 <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14d4e:	|  |  |  |  '-------> movea.l 24(sp),a0
   14d52:	|  |  |  |            movea.l 4(a0),a0
   14d56:	|  |  |  |            move.l 8(a0),d0
   14d5a:	|  |  |  |            subq.l #1,d0
   14d5c:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14d60:	|  |  |  |            movea.l 24(sp),a0
   14d64:	|  |  |  |            movea.l 4(a0),a0
   14d68:	|  |  |  |            move.l 8(a0),d0
   14d6c:	|  |  |  |        ,-- bgt.s 14dca <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14d6e:	|  |  |  |        |   movea.l 24(sp),a0
   14d72:	|  |  |  |        |   movea.l 4(a0),a0
   14d76:	|  |  |  |        |   move.l (a0),16(sp)
   14d7a:	|  |  |  |        |   move.l 1cd66 <SysBase>,d0
   14d80:	|  |  |  |        |   movea.l d0,a6
   14d82:	|  |  |  |        |   movea.l 16(sp),a1
   14d86:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   14d8a:	|  |  |  |        |   movea.l 24(sp),a0
   14d8e:	|  |  |  |        |   move.l 4(a0),12(sp)
   14d94:	|  |  |  |        |   move.l 1cd66 <SysBase>,d0
   14d9a:	|  |  |  |        |   movea.l d0,a6
   14d9c:	|  |  |  |        |   movea.l 12(sp),a1
   14da0:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   14da4:	|  |  |  |        |   movea.l 24(sp),a0
   14da8:	|  |  |  |        |   clr.l 4(a0)
		break;
   14dac:	|  |  |  |        +-- bra.s 14dca <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   14dae:	|  '--|--|--------|-> movea.l 24(sp),a0
   14db2:	|     |  |        |   move.l 4(a0),d0
   14db6:	|     |  |        |   move.l d0,-(sp)
   14db8:	|     |  |        |   jsr 9abc <deleteAnim>
   14dbe:	|     |  |        |   addq.l #4,sp
		break;
   14dc0:	|     +--|--------|-- bra.s 14dcc <unlinkVar+0x146>
		break;
   14dc2:	'-----|--|--------|-> nop
   14dc4:	      +--|--------|-- bra.s 14dcc <unlinkVar+0x146>
		break;
   14dc6:	      |  '--------|-> nop
   14dc8:	      +-----------|-- bra.s 14dcc <unlinkVar+0x146>
		break;
   14dca:	      |           '-> nop
	}
}
   14dcc:	      '-------------> nop
   14dce:	                      movea.l (sp)+,a6
   14dd0:	                      lea 16(sp),sp
   14dd4:	                      rts

00014dd6 <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   14dd6:	       movea.l 4(sp),a0
   14dda:	       move.l (a0),d0
   14ddc:	       movea.l 8(sp),a0
   14de0:	       move.l d0,(a0)
	switch (to->varType) {
   14de2:	       movea.l 8(sp),a0
   14de6:	       move.l (a0),d0
   14de8:	       moveq #10,d1
   14dea:	       cmp.l d0,d1
   14dec:	,----- bcs.w 14ede <copyMain+0x108>
   14df0:	|      add.l d0,d0
   14df2:	|      movea.l d0,a0
   14df4:	|      adda.l #85504,a0
   14dfa:	|      move.w (a0),d0
   14dfc:	|      jmp (14e00 <copyMain+0x2a>,pc,d0.w)
   14e00:	|      .short 0x00da
   14e02:	|      ori.b #22,(a6)
   14e06:	|      ori.w #22,(a4)
   14e0a:	|      ori.b #-126,(a6)
   14e0e:	|      ori.b #-68,(a6)
   14e12:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14e1a:	|      move.l 4(a0),d0
   14e1e:	|      movea.l 8(sp),a0
   14e22:	|      move.l d0,4(a0)
		return TRUE;
   14e26:	|      moveq #1,d0
   14e28:	|  ,-- bra.w 14ef0 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14e2c:	|  |   movea.l 4(sp),a0
   14e30:	|  |   move.l 4(a0),d0
   14e34:	|  |   movea.l 8(sp),a0
   14e38:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14e3c:	|  |   movea.l 8(sp),a0
   14e40:	|  |   movea.l 4(a0),a0
   14e44:	|  |   move.l 8(a0),d0
   14e48:	|  |   addq.l #1,d0
   14e4a:	|  |   move.l d0,8(a0)
		return TRUE;
   14e4e:	|  |   moveq #1,d0
   14e50:	|  +-- bra.w 14ef0 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   14e54:	|  |   movea.l 4(sp),a0
   14e58:	|  |   move.l 4(a0),d0
   14e5c:	|  |   move.l d0,-(sp)
   14e5e:	|  |   jsr b8 <copyString>
   14e64:	|  |   addq.l #4,sp
   14e66:	|  |   movea.l 8(sp),a0
   14e6a:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14e6e:	|  |   movea.l 8(sp),a0
   14e72:	|  |   move.l 4(a0),d0
   14e76:	|  |   sne d0
   14e78:	|  |   neg.b d0
   14e7a:	|  |   move.b d0,d0
   14e7c:	|  |   andi.w #255,d0
   14e80:	|  +-- bra.s 14ef0 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   14e82:	|  |   movea.l 4(sp),a0
   14e86:	|  |   move.l 4(a0),d0
   14e8a:	|  |   movea.l 8(sp),a0
   14e8e:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   14e92:	|  |   movea.l 8(sp),a0
   14e96:	|  |   movea.l 4(a0),a0
   14e9a:	|  |   move.l 8(a0),d0
   14e9e:	|  |   addq.l #1,d0
   14ea0:	|  |   move.l d0,8(a0)
		return TRUE;
   14ea4:	|  |   moveq #1,d0
   14ea6:	|  +-- bra.s 14ef0 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   14ea8:	|  |   movea.l 4(sp),a0
   14eac:	|  |   move.l 4(a0),d0
   14eb0:	|  |   movea.l 8(sp),a0
   14eb4:	|  |   move.l d0,4(a0)
		return TRUE;
   14eb8:	|  |   moveq #1,d0
   14eba:	|  +-- bra.s 14ef0 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   14ebc:	|  |   movea.l 4(sp),a0
   14ec0:	|  |   move.l 4(a0),d0
   14ec4:	|  |   move.l d0,-(sp)
   14ec6:	|  |   jsr 96f0 <copyAnim>
   14ecc:	|  |   addq.l #4,sp
   14ece:	|  |   movea.l 8(sp),a0
   14ed2:	|  |   move.l d0,4(a0)
		return TRUE;
   14ed6:	|  |   moveq #1,d0
   14ed8:	|  +-- bra.s 14ef0 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14eda:	|  |   moveq #1,d0
   14edc:	|  +-- bra.s 14ef0 <copyMain+0x11a>

		default:
		break;
   14ede:	'--|-> nop
	}
	KPrintF("Unknown value type");
   14ee0:	   |   pea 1a3a5 <talk.c.490538ff+0x37b>
   14ee6:	   |   jsr 17518 <KPrintF>
   14eec:	   |   addq.l #4,sp
	return FALSE;
   14eee:	   |   clr.w d0
}
   14ef0:	   '-> rts

00014ef2 <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   14ef2:	move.l 8(sp),-(sp)
   14ef6:	jsr 14c86 <unlinkVar>
   14efc:	addq.l #4,sp
	return copyMain(from, to);
   14efe:	move.l 8(sp),-(sp)
   14f02:	move.l 8(sp),-(sp)
   14f06:	jsr 14dd6 <copyMain>
   14f0c:	addq.l #8,sp
}
   14f0e:	rts

00014f10 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14f10:	       movea.l 4(sp),a0
   14f14:	       move.l (a0),d0
   14f16:	       moveq #8,d1
   14f18:	       cmp.l d0,d1
   14f1a:	   ,-- bne.s 14f30 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14f1c:	   |   movea.l 4(sp),a0
   14f20:	   |   move.l 4(a0),d0
   14f24:	   |   move.l d0,-(sp)
   14f26:	   |   jsr 96f0 <copyAnim>
   14f2c:	   |   addq.l #4,sp
   14f2e:	,--|-- bra.s 14f76 <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14f30:	|  '-> movea.l 4(sp),a0
   14f34:	|      move.l (a0),d0
   14f36:	|      moveq #1,d1
   14f38:	|      cmp.l d0,d1
   14f3a:	|  ,-- bne.s 14f4e <getAnimationFromVar+0x3e>
   14f3c:	|  |   movea.l 4(sp),a0
   14f40:	|  |   move.l 4(a0),d0
   14f44:	|  +-- bne.s 14f4e <getAnimationFromVar+0x3e>
		return makeNullAnim();
   14f46:	|  |   jsr af22 <makeNullAnim>
   14f4c:	+--|-- bra.s 14f76 <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14f4e:	|  '-> movea.l 4(sp),a0
   14f52:	|      move.l (a0),d0
   14f54:	|      add.l d0,d0
   14f56:	|      movea.l d0,a1
   14f58:	|      adda.l d0,a1
   14f5a:	|      lea 1cc36 <typeName>,a0
   14f60:	|      move.l (0,a1,a0.l),d0
   14f64:	|      move.l d0,-(sp)
   14f66:	|      pea 1a291 <talk.c.490538ff+0x267>
   14f6c:	|      jsr 17518 <KPrintF>
   14f72:	|      addq.l #8,sp
	return NULL;
   14f74:	|      moveq #0,d0
}
   14f76:	'----> rts

00014f78 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   14f78:	       movea.l 4(sp),a0
   14f7c:	       move.l (a0),d0
   14f7e:	       moveq #10,d1
   14f80:	       cmp.l d0,d1
   14f82:	,----- bcs.w 15008 <getBoolean+0x90>
   14f86:	|      add.l d0,d0
   14f88:	|      movea.l d0,a0
   14f8a:	|      adda.l #85910,a0
   14f90:	|      move.w (a0),d0
   14f92:	|      jmp (14f96 <getBoolean+0x1e>,pc,d0.w)
   14f96:	|      ori.b #26,(a6)
   14f9a:	|      ori.w #68,(114,a2,d0.w)
   14fa0:	|      ori.w #46,(114,a2,d0.w)
   14fa6:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   14fac:	|      clr.w d0
   14fae:	|  ,-- bra.s 1500c <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   14fb0:	|  |   movea.l 4(sp),a0
   14fb4:	|  |   move.l 4(a0),d0
   14fb8:	|  |   sne d0
   14fba:	|  |   neg.b d0
   14fbc:	|  |   move.b d0,d0
   14fbe:	|  |   andi.w #255,d0
   14fc2:	|  +-- bra.s 1500c <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   14fc4:	|  |   movea.l 4(sp),a0
   14fc8:	|  |   movea.l 4(a0),a0
   14fcc:	|  |   move.l (a0),d0
   14fce:	|  |   sne d0
   14fd0:	|  |   neg.b d0
   14fd2:	|  |   move.b d0,d0
   14fd4:	|  |   andi.w #255,d0
   14fd8:	|  +-- bra.s 1500c <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14fda:	|  |   movea.l 4(sp),a0
   14fde:	|  |   movea.l 4(a0),a0
   14fe2:	|  |   move.b (a0),d0
   14fe4:	|  |   sne d0
   14fe6:	|  |   neg.b d0
   14fe8:	|  |   move.b d0,d0
   14fea:	|  |   andi.w #255,d0
   14fee:	|  +-- bra.s 1500c <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14ff0:	|  |   movea.l 4(sp),a0
   14ff4:	|  |   movea.l 4(a0),a0
   14ff8:	|  |   move.l 4(a0),d0
   14ffc:	|  |   sne d0
   14ffe:	|  |   neg.b d0
   15000:	|  |   move.b d0,d0
   15002:	|  |   andi.w #255,d0
   15006:	|  +-- bra.s 1500c <getBoolean+0x94>

		default:
		break;
   15008:	'--|-> nop
	}
	return TRUE;
   1500a:	   |   moveq #1,d0
}
   1500c:	   '-> rts

0001500e <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   1500e:	      ,----------> lea -76(sp),sp
   15012:	      |            move.l a6,-(sp)
	switch (from->varType) {
   15014:	      |            movea.l 84(sp),a0
   15018:	      |            move.l (a0),d0
   1501a:	      |            moveq #10,d1
   1501c:	      |            cmp.l d0,d1
   1501e:	,-----|----------- bcs.w 152bc <getTextFromAnyVar+0x2ae>
   15022:	|     |            add.l d0,d0
   15024:	|     |            movea.l d0,a0
   15026:	|     |            adda.l #86066,a0
   1502c:	|     |            move.w (a0),d0
   1502e:	|     |            jmp (15032 <getTextFromAnyVar+0x24>,pc,d0.w)
   15032:	|     |            .short 0x028a
   15034:	|     |            bset d0,(a0)+
   15036:	|     |            .short 0x028a
   15038:	|     |            ori.b #-118,(a6)
   1503c:	|     |            andi.b #8,ccr
   15040:	|     |            andi.w #650,-(a0)
   15044:	|     |            .short 0x028a
   15046:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   1504c:	|     |            move.l 4(a0),d0
   15050:	|     |            move.l d0,-(sp)
   15052:	|     |            jsr b8 <copyString>
   15058:	|     |            addq.l #4,sp
   1505a:	|  ,--|----------- bra.w 152de <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   1505e:	|  |  |            pea 1a3b8 <talk.c.490538ff+0x38e>
   15064:	|  |  |            jsr b8 <copyString>
   1506a:	|  |  |            addq.l #4,sp
   1506c:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   15070:	|  |  |            clr.l 72(sp)
   15074:	|  |  |     ,----- bra.w 1511e <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   15078:	|  |  |  ,--|----> pea 1a3be <talk.c.490538ff+0x394>
   1507e:	|  |  |  |  |      move.l 80(sp),-(sp)
   15082:	|  |  |  |  |      jsr 13f64 <joinStrings>
   15088:	|  |  |  |  |      addq.l #8,sp
   1508a:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   1508e:	|  |  |  |  |  ,-- bne.s 15096 <getTextFromAnyVar+0x88>
   15090:	|  |  |  |  |  |   moveq #0,d0
   15092:	|  +--|--|--|--|-- bra.w 152de <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   15096:	|  |  |  |  |  '-> move.l 76(sp),56(sp)
   1509c:	|  |  |  |  |      move.l 1cd66 <SysBase>,d0
   150a2:	|  |  |  |  |      movea.l d0,a6
   150a4:	|  |  |  |  |      movea.l 56(sp),a1
   150a8:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   150ac:	|  |  |  |  |      movea.l 84(sp),a0
   150b0:	|  |  |  |  |      movea.l 4(a0),a0
   150b4:	|  |  |  |  |      move.l (a0),d1
   150b6:	|  |  |  |  |      move.l 72(sp),d0
   150ba:	|  |  |  |  |      lsl.l #3,d0
   150bc:	|  |  |  |  |      add.l d1,d0
   150be:	|  |  |  |  |      move.l d0,-(sp)
   150c0:	|  |  +--|--|----- jsr 1500e <getTextFromAnyVar>(pc)
   150c4:	|  |  |  |  |      addq.l #4,sp
   150c6:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   150ca:	|  |  |  |  |      move.l 52(sp),-(sp)
   150ce:	|  |  |  |  |      move.l 64(sp),-(sp)
   150d2:	|  |  |  |  |      jsr 13f64 <joinStrings>
   150d8:	|  |  |  |  |      addq.l #8,sp
   150da:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   150de:	|  |  |  |  |  ,-- bne.s 150e6 <getTextFromAnyVar+0xd8>
   150e0:	|  |  |  |  |  |   moveq #0,d0
   150e2:	|  +--|--|--|--|-- bra.w 152de <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   150e6:	|  |  |  |  |  '-> move.l 52(sp),48(sp)
   150ec:	|  |  |  |  |      move.l 1cd66 <SysBase>,d0
   150f2:	|  |  |  |  |      movea.l d0,a6
   150f4:	|  |  |  |  |      movea.l 48(sp),a1
   150f8:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   150fc:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   15100:	|  |  |  |  |      move.l 60(sp),44(sp)
   15106:	|  |  |  |  |      move.l 1cd66 <SysBase>,d0
   1510c:	|  |  |  |  |      movea.l d0,a6
   1510e:	|  |  |  |  |      movea.l 44(sp),a1
   15112:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   15116:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   1511a:	|  |  |  |  |      addq.l #1,72(sp)
   1511e:	|  |  |  |  '----> movea.l 84(sp),a0
   15122:	|  |  |  |         movea.l 4(a0),a0
   15126:	|  |  |  |         move.l 4(a0),d0
   1512a:	|  |  |  |         cmp.l 72(sp),d0
   1512e:	|  |  |  '-------- bgt.w 15078 <getTextFromAnyVar+0x6a>
			}
			return builder;
   15132:	|  |  |            move.l 76(sp),d0
   15136:	|  +--|----------- bra.w 152de <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   1513a:	|  |  |            pea 1a3c0 <talk.c.490538ff+0x396>
   15140:	|  |  |            jsr b8 <copyString>
   15146:	|  |  |            addq.l #4,sp
   15148:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   1514c:	|  |  |            movea.l 84(sp),a0
   15150:	|  |  |            movea.l 4(a0),a0
   15154:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   15158:	|  |  |     ,----- bra.w 151fa <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   1515c:	|  |  |  ,--|----> pea 1a3be <talk.c.490538ff+0x394>
   15162:	|  |  |  |  |      move.l 72(sp),-(sp)
   15166:	|  |  |  |  |      jsr 13f64 <joinStrings>
   1516c:	|  |  |  |  |      addq.l #8,sp
   1516e:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   15172:	|  |  |  |  |  ,-- bne.s 1517a <getTextFromAnyVar+0x16c>
   15174:	|  |  |  |  |  |   moveq #0,d0
   15176:	|  +--|--|--|--|-- bra.w 152de <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   1517a:	|  |  |  |  |  '-> move.l 68(sp),32(sp)
   15180:	|  |  |  |  |      move.l 1cd66 <SysBase>,d0
   15186:	|  |  |  |  |      movea.l d0,a6
   15188:	|  |  |  |  |      movea.l 32(sp),a1
   1518c:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   15190:	|  |  |  |  |      move.l 64(sp),d0
   15194:	|  |  |  |  |      move.l d0,-(sp)
   15196:	|  |  '--|--|----- jsr 1500e <getTextFromAnyVar>(pc)
   1519a:	|  |     |  |      addq.l #4,sp
   1519c:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   151a0:	|  |     |  |      move.l 28(sp),-(sp)
   151a4:	|  |     |  |      move.l 40(sp),-(sp)
   151a8:	|  |     |  |      jsr 13f64 <joinStrings>
   151ae:	|  |     |  |      addq.l #8,sp
   151b0:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   151b4:	|  |     |  |  ,-- bne.s 151bc <getTextFromAnyVar+0x1ae>
   151b6:	|  |     |  |  |   moveq #0,d0
   151b8:	|  +-----|--|--|-- bra.w 152de <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   151bc:	|  |     |  |  '-> move.l 28(sp),24(sp)
   151c2:	|  |     |  |      move.l 1cd66 <SysBase>,d0
   151c8:	|  |     |  |      movea.l d0,a6
   151ca:	|  |     |  |      movea.l 24(sp),a1
   151ce:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   151d2:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   151d6:	|  |     |  |      move.l 36(sp),20(sp)
   151dc:	|  |     |  |      move.l 1cd66 <SysBase>,d0
   151e2:	|  |     |  |      movea.l d0,a6
   151e4:	|  |     |  |      movea.l 20(sp),a1
   151e8:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   151ec:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   151f0:	|  |     |  |      movea.l 64(sp),a0
   151f4:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   151fa:	|  |     |  '----> tst.l 64(sp)
   151fe:	|  |     '-------- bne.w 1515c <getTextFromAnyVar+0x14e>
			}
			return builder;
   15202:	|  |               move.l 68(sp),d0
   15206:	|  +-------------- bra.w 152de <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   1520a:	|  |               moveq #10,d0
   1520c:	|  |               move.l d0,16(sp)
   15210:	|  |               clr.l 12(sp)
   15214:	|  |               move.l 1cd66 <SysBase>,d0
   1521a:	|  |               movea.l d0,a6
   1521c:	|  |               move.l 16(sp),d0
   15220:	|  |               move.l 12(sp),d1
   15224:	|  |               jsr -684(a6)
   15228:	|  |               move.l d0,8(sp)
   1522c:	|  |               move.l 8(sp),d0
   15230:	|  |               move.l d0,4(sp)
			if (! buff) {
   15234:	|  |           ,-- bne.s 1524a <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   15236:	|  |           |   pea 1a3c7 <talk.c.490538ff+0x39d>
   1523c:	|  |           |   jsr 17518 <KPrintF>
   15242:	|  |           |   addq.l #4,sp
				return NULL;
   15244:	|  |           |   moveq #0,d0
   15246:	|  +-----------|-- bra.w 152de <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   1524a:	|  |           '-> movea.l 84(sp),a0
   1524e:	|  |               move.l 4(a0),d0
   15252:	|  |               move.l d0,-(sp)
   15254:	|  |               pea 1a3f1 <talk.c.490538ff+0x3c7>
   1525a:	|  |               move.l 12(sp),-(sp)
   1525e:	|  |               jsr 14242 <sprintf>
   15264:	|  |               lea 12(sp),sp
			return buff;
   15268:	|  |               move.l 4(sp),d0
   1526c:	|  +-------------- bra.s 152de <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   1526e:	|  |               movea.l 84(sp),a0
   15272:	|  |               move.l 4(a0),d0
   15276:	|  |               move.l d0,-(sp)
   15278:	|  |               jsr 4bbe <resourceNameFromNum>
   1527e:	|  |               addq.l #4,sp
   15280:	|  |               move.l d0,-(sp)
   15282:	|  |               pea 18d2e <PutChar+0xd74>
   15288:	|  |               jsr 13f64 <joinStrings>
   1528e:	|  |               addq.l #8,sp
   15290:	|  +-------------- bra.s 152de <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   15292:	|  |               movea.l 84(sp),a0
   15296:	|  |               move.l 4(a0),d0
   1529a:	|  |               move.l d0,-(sp)
   1529c:	|  |               jsr d74c <findObjectType>
   152a2:	|  |               addq.l #4,sp
   152a4:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   152a8:	+--|-------------- beq.s 152bc <getTextFromAnyVar+0x2ae>
   152aa:	|  |               movea.l 40(sp),a0
   152ae:	|  |               move.l (a0),d0
   152b0:	|  |               move.l d0,-(sp)
   152b2:	|  |               jsr b8 <copyString>
   152b8:	|  |               addq.l #4,sp
   152ba:	|  +-------------- bra.s 152de <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   152bc:	'--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   152be:	   |               movea.l 84(sp),a0
   152c2:	   |               move.l (a0),d0
   152c4:	   |               add.l d0,d0
   152c6:	   |               movea.l d0,a1
   152c8:	   |               adda.l d0,a1
   152ca:	   |               lea 1cc36 <typeName>,a0
   152d0:	   |               move.l (0,a1,a0.l),d0
   152d4:	   |               move.l d0,-(sp)
   152d6:	   |               jsr b8 <copyString>
   152dc:	   |               addq.l #4,sp
}
   152de:	   '-------------> movea.l (sp)+,a6
   152e0:	                   lea 76(sp),sp
   152e4:	                   rts

000152e6 <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   152e6:	move.l 4(sp),-(sp)
   152ea:	jsr 14c86 <unlinkVar>
   152f0:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   152f2:	movea.l 4(sp),a0
   152f6:	moveq #8,d0
   152f8:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   152fa:	movea.l 4(sp),a0
   152fe:	move.l 8(sp),4(a0)
}
   15304:	nop
   15306:	rts

00015308 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   15308:	move.l 4(sp),-(sp)
   1530c:	jsr 14c86 <unlinkVar>
   15312:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   15314:	movea.l 4(sp),a0
   15318:	moveq #9,d0
   1531a:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   1531c:	movea.l 4(sp),a0
   15320:	move.l 8(sp),4(a0)
}
   15326:	nop
   15328:	rts

0001532a <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);	thisVar->varType = vT;
   1532a:	move.l 4(sp),-(sp)
   1532e:	jsr 14c86 <unlinkVar>
   15334:	addq.l #4,sp
   15336:	movea.l 4(sp),a0
   1533a:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;}
   1533e:	movea.l 4(sp),a0
   15342:	move.l 12(sp),4(a0)
   15348:	nop
   1534a:	rts

0001534c <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   1534c:	      ,-- bra.s 1535e <stackGetByIndex+0x12>
        vS = vS->next;
   1534e:	,-----|-> movea.l 4(sp),a0
   15352:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   15358:	|     +-- bne.s 1535e <stackGetByIndex+0x12>
            return NULL;
   1535a:	|     |   moveq #0,d0
   1535c:	|  ,--|-- bra.s 15372 <stackGetByIndex+0x26>
    while (theIndex--) {
   1535e:	|  |  '-> move.l 8(sp),d0
   15362:	|  |      move.l d0,d1
   15364:	|  |      subq.l #1,d1
   15366:	|  |      move.l d1,8(sp)
   1536a:	|  |      tst.l d0
   1536c:	'--|----- bne.s 1534e <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   1536e:	   |      move.l 4(sp),d0
}
   15372:	   '----> rts

00015374 <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   15374:	          tst.l 4(sp)
   15378:	      ,-- bne.s 15388 <stackFindLast+0x14>
		return NULL;
   1537a:	      |   moveq #0,d0
   1537c:	,-----|-- bra.s 15396 <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   1537e:	|  ,--|-> movea.l 4(sp),a0
   15382:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   15388:	|  |  '-> movea.l 4(sp),a0
   1538c:	|  |      move.l 8(a0),d0
   15390:	|  '----- bne.s 1537e <stackFindLast+0xa>

	return hunt;
   15392:	|         move.l 4(sp),d0
}
   15396:	'-------> rts

00015398 <stackSize>:

int stackSize (const struct stackHandler * me) {
   15398:	       subq.l #8,sp
	int r = 0;
   1539a:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   1539e:	       movea.l 12(sp),a0
   153a2:	       move.l (a0),(sp)
	while (a) {
   153a4:	   ,-- bra.s 153b0 <stackSize+0x18>
		r ++;
   153a6:	,--|-> addq.l #1,4(sp)
		a = a -> next;
   153aa:	|  |   movea.l (sp),a0
   153ac:	|  |   move.l 8(a0),(sp)
	while (a) {
   153b0:	|  '-> tst.l (sp)
   153b2:	'----- bne.s 153a6 <stackSize+0xe>
	}
	return r;
   153b4:	       move.l 4(sp),d0
}
   153b8:	       addq.l #8,sp
   153ba:	       rts

000153bc <trimStack>:

void trimStack (struct variableStack ** stack) {
   153bc:	subq.l #8,sp
   153be:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   153c0:	movea.l 16(sp),a0
   153c4:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   153c8:	movea.l 16(sp),a0
   153cc:	movea.l (a0),a0
   153ce:	move.l 8(a0),d0
   153d2:	movea.l 16(sp),a0
   153d6:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   153d8:	move.l 8(sp),d0
   153dc:	move.l d0,-(sp)
   153de:	jsr 14c86 <unlinkVar>
   153e4:	addq.l #4,sp
	FreeVec(killMe);
   153e6:	move.l 8(sp),4(sp)
   153ec:	move.l 1cd66 <SysBase>,d0
   153f2:	movea.l d0,a6
   153f4:	movea.l 4(sp),a1
   153f8:	jsr -690(a6)
   153fc:	nop
   153fe:	movea.l (sp)+,a6
   15400:	addq.l #8,sp
   15402:	rts

00015404 <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   15404:	       lea -52(sp),sp
   15408:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   1540a:	       pea 1a3f4 <talk.c.490538ff+0x3ca>
   15410:	       jsr 17518 <KPrintF>
   15416:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   15418:	       moveq #68,d0
   1541a:	       move.l d0,52(sp)
   1541e:	       clr.l 48(sp)
   15422:	       move.l 1cd66 <SysBase>,d0
   15428:	       movea.l d0,a6
   1542a:	       move.l 52(sp),d0
   1542e:	       move.l 48(sp),d1
   15432:	       jsr -684(a6)
   15436:	       move.l d0,44(sp)
   1543a:	       move.l 44(sp),d0
   1543e:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   15442:	   ,-- bne.s 1544a <freeze+0x46>
   15444:	   |   clr.w d0
   15446:	,--|-- bra.w 155dc <freeze+0x1d8>

	CstFreeze();
   1544a:	|  '-> jsr 1cca <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   15450:	|      move.l 1cdfe <sceneWidth>,d0
   15456:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   1545a:	|      move.l 1ce02 <sceneHeight>,d0
   15460:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   15464:	|      move.l 1cdfe <sceneWidth>,d0
   1546a:	|      movea.l 40(sp),a0
   1546e:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   15472:	|      move.l 1ce02 <sceneHeight>,d0
   15478:	|      movea.l 40(sp),a0
   1547c:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   15480:	|      move.l 1ce1c <cameraX>,d0
   15486:	|      movea.l 40(sp),a0
   1548a:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   1548e:	|      move.l 1ce20 <cameraY>,d0
   15494:	|      movea.l 40(sp),a0
   15498:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   1549c:	|      move.l 1c6f8 <cameraZoom>,d0
   154a2:	|      movea.l 40(sp),a0
   154a6:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   154aa:	|      move.w #1,1ce0a <backdropExists>

	newFreezer -> allPeople = allPeople;
   154b2:	|      move.l 1cdc6 <allPeople>,d0
   154b8:	|      movea.l 40(sp),a0
   154bc:	|      move.l d0,(a0)
	allPeople = NULL;
   154be:	|      clr.l 1cdc6 <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   154c4:	|      moveq #42,d0
   154c6:	|      move.l d0,28(sp)
   154ca:	|      clr.l 24(sp)
   154ce:	|      move.l 1cd66 <SysBase>,d0
   154d4:	|      movea.l d0,a6
   154d6:	|      move.l 28(sp),d0
   154da:	|      move.l 24(sp),d1
   154de:	|      jsr -684(a6)
   154e2:	|      move.l d0,20(sp)
   154e6:	|      move.l 20(sp),d0
   154ea:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   154ee:	|  ,-- bne.s 154f6 <freeze+0xf2>
   154f0:	|  |   clr.w d0
   154f2:	+--|-- bra.w 155dc <freeze+0x1d8>

	newFreezer -> allScreenRegions = allScreenRegions;
   154f6:	|  '-> move.l 1ce72 <allScreenRegions>,d0
   154fc:	|      movea.l 40(sp),a0
   15500:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   15504:	|      clr.l 1ce72 <allScreenRegions>
	overRegion = NULL;
   1550a:	|      clr.l 1ce76 <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   15510:	|      move.l 1cc60 <mouseCursorAnim>,d0
   15516:	|      movea.l 40(sp),a0
   1551a:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   1551e:	|      move.l 1cc64 <mouseCursorFrameNum>,d0
   15524:	|      movea.l 40(sp),a0
   15528:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   1552c:	|      jsr af22 <makeNullAnim>
   15532:	|      move.l d0,1cc60 <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   15538:	|      clr.l 1cc64 <mouseCursorFrameNum>

	newFreezer -> zBuffer = zBuffer;
   1553e:	|      move.l 1cdc2 <zBuffer>,d0
   15544:	|      movea.l 40(sp),a0
   15548:	|      move.l d0,60(a0)
	zBuffer = NULL;
   1554c:	|      clr.l 1cdc2 <zBuffer>

	newFreezer -> speech = speech;
   15552:	|      move.l 1ccb6 <speech>,d0
   15558:	|      movea.l 40(sp),a0
   1555c:	|      move.l d0,20(a0)
	initSpeech ();
   15560:	|      jsr 40b4 <initSpeech>

	newFreezer -> currentEvents = currentEvents;
   15566:	|      move.l 1c6d6 <currentEvents>,d0
   1556c:	|      movea.l 40(sp),a0
   15570:	|      move.l d0,28(a0)
	currentEvents = (struct eventHandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   15574:	|      moveq #28,d0
   15576:	|      move.l d0,12(sp)
   1557a:	|      clr.l 8(sp)
   1557e:	|      move.l 1cd66 <SysBase>,d0
   15584:	|      movea.l d0,a6
   15586:	|      move.l 12(sp),d0
   1558a:	|      move.l 8(sp),d1
   1558e:	|      jsr -684(a6)
   15592:	|      move.l d0,4(sp)
   15596:	|      move.l 4(sp),d0
   1559a:	|      move.l d0,1c6d6 <currentEvents>
	if (!currentEvents) return FALSE;
   155a0:	|      move.l 1c6d6 <currentEvents>,d0
   155a6:	|  ,-- bne.s 155ac <freeze+0x1a8>
   155a8:	|  |   clr.w d0
   155aa:	+--|-- bra.s 155dc <freeze+0x1d8>
	memset ( currentEvents, 0, sizeof(struct eventHandlers));
   155ac:	|  '-> move.l 1c6d6 <currentEvents>,d0
   155b2:	|      pea 1c <_start+0x1c>
   155b6:	|      clr.l -(sp)
   155b8:	|      move.l d0,-(sp)
   155ba:	|      jsr 1749c <memset>
   155c0:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   155c4:	|      move.l 1ce56 <frozenStuff>,d0
   155ca:	|      movea.l 40(sp),a0
   155ce:	|      move.l d0,64(a0)
	frozenStuff = newFreezer;
   155d2:	|      move.l 40(sp),1ce56 <frozenStuff>

	return TRUE;
   155da:	|      moveq #1,d0
}
   155dc:	'----> movea.l (sp)+,a6
   155de:	       lea 52(sp),sp
   155e2:	       rts

000155e4 <howFrozen>:

int howFrozen () {
   155e4:	       subq.l #8,sp
	int a = 0;
   155e6:	       clr.l 4(sp)
	struct frozenStuffStruct * f = frozenStuff;
   155ea:	       move.l 1ce56 <frozenStuff>,(sp)
	while (f) {
   155f0:	   ,-- bra.s 155fc <howFrozen+0x18>
		a ++;
   155f2:	,--|-> addq.l #1,4(sp)
		f = f -> next;
   155f6:	|  |   movea.l (sp),a0
   155f8:	|  |   move.l 64(a0),(sp)
	while (f) {
   155fc:	|  '-> tst.l (sp)
   155fe:	'----- bne.s 155f2 <howFrozen+0xe>
	}
	return a;
   15600:	       move.l 4(sp),d0
}
   15604:	       addq.l #8,sp
   15606:	       rts

00015608 <unfreeze>:

void unfreeze () {
   15608:	       lea -16(sp),sp
   1560c:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   1560e:	       move.l 1ce56 <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   15616:	       move.l 1ce56 <frozenStuff>,d0
   1561c:	,----- beq.w 15854 <unfreeze+0x24c>

	CstUnfreeze();
   15620:	|      jsr 3d20 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   15626:	|      movea.l 1ce56 <frozenStuff>,a0
   1562c:	|      move.l 48(a0),d0
   15630:	|      move.l d0,1cdfe <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   15636:	|      movea.l 1ce56 <frozenStuff>,a0
   1563c:	|      move.l 52(a0),d0
   15640:	|      move.l d0,1ce02 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   15646:	|      movea.l 1ce56 <frozenStuff>,a0
   1564c:	|      move.l 40(a0),d0
   15650:	|      move.l d0,1ce1c <cameraX>
	cameraY = frozenStuff -> cameraY;
   15656:	|      movea.l 1ce56 <frozenStuff>,a0
   1565c:	|      move.l 44(a0),d0
   15660:	|      move.l d0,1ce20 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   15666:	|      move.l 1cd22 <input+0xa>,d0
   1566c:	|      move.l d0,-(sp)
   1566e:	|      jsr 1794a <__floatsisf>
   15674:	|      addq.l #4,sp
   15676:	|      move.l d0,d1
   15678:	|      move.l 1c6f8 <cameraZoom>,d0
   1567e:	|      move.l d0,-(sp)
   15680:	|      move.l d1,-(sp)
   15682:	|      jsr 179fc <__mulsf3>
   15688:	|      addq.l #8,sp
   1568a:	|      move.l d0,-(sp)
   1568c:	|      jsr 178e2 <__fixsfsi>
   15692:	|      addq.l #4,sp
   15694:	|      move.l d0,1cd22 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   1569a:	|      move.l 1cd26 <input+0xe>,d0
   156a0:	|      move.l d0,-(sp)
   156a2:	|      jsr 1794a <__floatsisf>
   156a8:	|      addq.l #4,sp
   156aa:	|      move.l d0,d1
   156ac:	|      move.l 1c6f8 <cameraZoom>,d0
   156b2:	|      move.l d0,-(sp)
   156b4:	|      move.l d1,-(sp)
   156b6:	|      jsr 179fc <__mulsf3>
   156bc:	|      addq.l #8,sp
   156be:	|      move.l d0,-(sp)
   156c0:	|      jsr 178e2 <__fixsfsi>
   156c6:	|      addq.l #4,sp
   156c8:	|      move.l d0,1cd26 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   156ce:	|      movea.l 1ce56 <frozenStuff>,a0
   156d4:	|      move.l 56(a0),d0
   156d8:	|      move.l d0,1c6f8 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   156de:	|      move.l 1cd22 <input+0xa>,d0
   156e4:	|      move.l d0,-(sp)
   156e6:	|      jsr 1794a <__floatsisf>
   156ec:	|      addq.l #4,sp
   156ee:	|      move.l d0,d1
   156f0:	|      move.l 1c6f8 <cameraZoom>,d0
   156f6:	|      move.l d0,-(sp)
   156f8:	|      move.l d1,-(sp)
   156fa:	|      jsr 17800 <__divsf3>
   15700:	|      addq.l #8,sp
   15702:	|      move.l d0,-(sp)
   15704:	|      jsr 178e2 <__fixsfsi>
   1570a:	|      addq.l #4,sp
   1570c:	|      move.l d0,1cd22 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   15712:	|      move.l 1cd26 <input+0xe>,d0
   15718:	|      move.l d0,-(sp)
   1571a:	|      jsr 1794a <__floatsisf>
   15720:	|      addq.l #4,sp
   15722:	|      move.l d0,d1
   15724:	|      move.l 1c6f8 <cameraZoom>,d0
   1572a:	|      move.l d0,-(sp)
   1572c:	|      move.l d1,-(sp)
   1572e:	|      jsr 17800 <__divsf3>
   15734:	|      addq.l #8,sp
   15736:	|      move.l d0,-(sp)
   15738:	|      jsr 178e2 <__fixsfsi>
   1573e:	|      addq.l #4,sp
   15740:	|      move.l d0,1cd26 <input+0xe>

	killAllPeople ();
   15746:	|      jsr abf2 <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   1574c:	|      movea.l 1ce56 <frozenStuff>,a0
   15752:	|      move.l (a0),d0
   15754:	|      move.l d0,1cdc6 <allPeople>

	killAllRegions ();
   1575a:	|      jsr 15d28 <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   15760:	|      movea.l 1ce56 <frozenStuff>,a0
   15766:	|      move.l 4(a0),d0
   1576a:	|      move.l d0,1ce72 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   15770:	|      move.l 1cc60 <mouseCursorAnim>,d0
   15776:	|      move.l d0,-(sp)
   15778:	|      jsr 9abc <deleteAnim>
   1577e:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   15780:	|      movea.l 1ce56 <frozenStuff>,a0
   15786:	|      move.l 32(a0),d0
   1578a:	|      move.l d0,1cc60 <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   15790:	|      movea.l 1ce56 <frozenStuff>,a0
   15796:	|      move.l 36(a0),d0
   1579a:	|      move.l d0,1cc64 <mouseCursorFrameNum>

	killZBuffer ();
   157a0:	|      jsr 8862 <killZBuffer>
	zBuffer = frozenStuff->zBuffer;
   157a6:	|      movea.l 1ce56 <frozenStuff>,a0
   157ac:	|      move.l 60(a0),d0
   157b0:	|      move.l d0,1cdc2 <zBuffer>

	if (currentEvents) FreeVec(currentEvents);
   157b6:	|      move.l 1c6d6 <currentEvents>,d0
   157bc:	|  ,-- beq.s 157d6 <unfreeze+0x1ce>
   157be:	|  |   move.l 1c6d6 <currentEvents>,12(sp)
   157c6:	|  |   move.l 1cd66 <SysBase>,d0
   157cc:	|  |   movea.l d0,a6
   157ce:	|  |   movea.l 12(sp),a1
   157d2:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   157d6:	|  '-> movea.l 1ce56 <frozenStuff>,a0
   157dc:	|      move.l 28(a0),d0
   157e0:	|      move.l d0,1c6d6 <currentEvents>

	killAllSpeech ();
   157e6:	|      jsr 414c <killAllSpeech>
	if (speech) FreeVec(speech);
   157ec:	|      move.l 1ccb6 <speech>,d0
   157f2:	|  ,-- beq.s 1580c <unfreeze+0x204>
   157f4:	|  |   move.l 1ccb6 <speech>,8(sp)
   157fc:	|  |   move.l 1cd66 <SysBase>,d0
   15802:	|  |   movea.l d0,a6
   15804:	|  |   movea.l 8(sp),a1
   15808:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   1580c:	|  '-> movea.l 1ce56 <frozenStuff>,a0
   15812:	|      move.l 20(a0),d0
   15816:	|      move.l d0,1ccb6 <speech>

	frozenStuff = frozenStuff -> next;
   1581c:	|      movea.l 1ce56 <frozenStuff>,a0
   15822:	|      move.l 64(a0),d0
   15826:	|      move.l d0,1ce56 <frozenStuff>

	overRegion = NULL;
   1582c:	|      clr.l 1ce76 <overRegion>
	if (killMe) FreeVec(killMe);
   15832:	|      tst.l 16(sp)
   15836:	|  ,-- beq.s 1584e <unfreeze+0x246>
   15838:	|  |   move.l 16(sp),4(sp)
   1583e:	|  |   move.l 1cd66 <SysBase>,d0
   15844:	|  |   movea.l d0,a6
   15846:	|  |   movea.l 4(sp),a1
   1584a:	|  |   jsr -690(a6)
	killMe = NULL;
   1584e:	|  '-> clr.l 16(sp)
   15852:	|  ,-- bra.s 15856 <unfreeze+0x24e>
	if (! frozenStuff) return;
   15854:	'--|-> nop
}
   15856:	   '-> movea.l (sp)+,a6
   15858:	       lea 16(sp),sp
   1585c:	       rts

0001585e <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   1585e:	pea 1a406 <talk.c.490538ff+0x3dc>
   15864:	jsr 17518 <KPrintF>
   1586a:	addq.l #4,sp
	return FALSE;
   1586c:	clr.w d0
}
   1586e:	rts

00015870 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15870:	          lea -32(sp),sp
   15874:	          move.l a6,-(sp)
   15876:	          move.l d2,-(sp)
	unsigned int a = 0;
   15878:	          clr.l 36(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   1587c:	          move.l 1ce62 <fontOrderString>,d0
   15882:	      ,-- beq.s 1589c <loadFont+0x2c>
   15884:	      |   move.l 1ce62 <fontOrderString>,24(sp)
   1588c:	      |   move.l 1cd66 <SysBase>,d0
   15892:	      |   movea.l d0,a6
   15894:	      |   movea.l 24(sp),a1
   15898:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   1589c:	      '-> move.l 48(sp),-(sp)
   158a0:	          jsr b8 <copyString>
   158a6:	          addq.l #4,sp
   158a8:	          move.l d0,1ce62 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);	
   158ae:	          move.l 1ce6e <theFont>,d0
   158b4:	      ,-- beq.s 158c6 <loadFont+0x56>
   158b6:	      |   move.l 1ce6e <theFont>,d0
   158bc:	      |   move.l d0,-(sp)
   158be:	      |   jsr 8ba0 <forgetSpriteBank>
   158c4:	      |   addq.l #4,sp
	theFont = NULL;
   158c6:	      '-> clr.l 1ce6e <theFont>

	loadedFontNum = filenum;
   158cc:	          move.l 44(sp),1ce5e <loadedFontNum>

	fontTableSize = 0;
   158d4:	          clr.l 1ce6a <fontTableSize>
	char *tmp = charOrder;
   158da:	          move.l 48(sp),32(sp)
	while (*tmp) {        
   158e0:	   ,----- bra.s 1591c <loadFont+0xac>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   158e2:	,--|----> movea.l 32(sp),a0
   158e6:	|  |      move.b (a0),d0
   158e8:	|  |      ext.w d0
   158ea:	|  |      movea.w d0,a0
   158ec:	|  |      move.l 1ce6a <fontTableSize>,d0
   158f2:	|  |      move.l d0,d0
   158f4:	|  |      move.b d0,d0
   158f6:	|  |      andi.l #255,d0
   158fc:	|  |      cmp.l a0,d0
   158fe:	|  |  ,-- bge.s 15910 <loadFont+0xa0>
   15900:	|  |  |   movea.l 32(sp),a0
   15904:	|  |  |   move.b (a0),d0
   15906:	|  |  |   ext.w d0
   15908:	|  |  |   movea.w d0,a0
   1590a:	|  |  |   move.l a0,1ce6a <fontTableSize>
		*tmp++;
   15910:	|  |  '-> move.l 32(sp),d0
   15914:	|  |      move.l d0,d1
   15916:	|  |      addq.l #1,d1
   15918:	|  |      move.l d1,32(sp)
	while (*tmp) {        
   1591c:	|  '----> movea.l 32(sp),a0
   15920:	|         move.b (a0),d0
   15922:	'-------- bne.s 158e2 <loadFont+0x72>
	}
	fontTableSize++;
   15924:	          move.l 1ce6a <fontTableSize>,d0
   1592a:	          addq.l #1,d0
   1592c:	          move.l d0,1ce6a <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   15932:	          move.l 1ce66 <fontTable>,d0
   15938:	      ,-- beq.s 15952 <loadFont+0xe2>
   1593a:	      |   move.l 1ce66 <fontTable>,20(sp)
   15942:	      |   move.l 1cd66 <SysBase>,d0
   15948:	      |   movea.l d0,a6
   1594a:	      |   movea.l 20(sp),a1
   1594e:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   15952:	      '-> move.l 1ce6a <fontTableSize>,d0
   15958:	          add.l d0,d0
   1595a:	          add.l d0,d0
   1595c:	          move.l d0,16(sp)
   15960:	          clr.l 12(sp)
   15964:	          move.l 1cd66 <SysBase>,d0
   1596a:	          movea.l d0,a6
   1596c:	          move.l 16(sp),d0
   15970:	          move.l 12(sp),d1
   15974:	          jsr -684(a6)
   15978:	          move.l d0,8(sp)
   1597c:	          move.l 8(sp),d0
   15980:	          move.l d0,1ce66 <fontTable>
	if (!fontTable) return FALSE;
   15986:	          move.l 1ce66 <fontTable>,d0
   1598c:	      ,-- bne.s 15994 <loadFont+0x124>
   1598e:	      |   clr.w d0
   15990:	,-----|-- bra.w 15a3a <loadFont+0x1ca>

	for (a = 0;  a < fontTableSize; a++) {
   15994:	|     '-> clr.l 36(sp)
   15998:	|     ,-- bra.s 159b2 <loadFont+0x142>
		fontTable[a] = 0;
   1599a:	|  ,--|-> move.l 1ce66 <fontTable>,d1
   159a0:	|  |  |   move.l 36(sp),d0
   159a4:	|  |  |   add.l d0,d0
   159a6:	|  |  |   add.l d0,d0
   159a8:	|  |  |   movea.l d1,a0
   159aa:	|  |  |   adda.l d0,a0
   159ac:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   159ae:	|  |  |   addq.l #1,36(sp)
   159b2:	|  |  '-> move.l 1ce6a <fontTableSize>,d0
   159b8:	|  |      cmp.l 36(sp),d0
   159bc:	|  '----- bhi.s 1599a <loadFont+0x12a>
	}
	a = 0;
   159be:	|         clr.l 36(sp)
	int i = 0;
   159c2:	|         clr.l 28(sp)
	tmp = charOrder;
   159c6:	|         move.l 48(sp),32(sp)
	while (*tmp) {
   159cc:	|     ,-- bra.s 159fc <loadFont+0x18c>
		fontTable[*tmp++] = i;
   159ce:	|  ,--|-> move.l 1ce66 <fontTable>,d1
   159d4:	|  |  |   move.l 32(sp),d0
   159d8:	|  |  |   move.l d0,d2
   159da:	|  |  |   addq.l #1,d2
   159dc:	|  |  |   move.l d2,32(sp)
   159e0:	|  |  |   movea.l d0,a0
   159e2:	|  |  |   move.b (a0),d0
   159e4:	|  |  |   ext.w d0
   159e6:	|  |  |   movea.w d0,a0
   159e8:	|  |  |   move.l a0,d0
   159ea:	|  |  |   add.l a0,d0
   159ec:	|  |  |   add.l d0,d0
   159ee:	|  |  |   movea.l d1,a0
   159f0:	|  |  |   adda.l d0,a0
   159f2:	|  |  |   move.l 28(sp),d0
   159f6:	|  |  |   move.l d0,(a0)
		i++;
   159f8:	|  |  |   addq.l #1,28(sp)
	while (*tmp) {
   159fc:	|  |  '-> movea.l 32(sp),a0
   15a00:	|  |      move.b (a0),d0
   15a02:	|  '----- bne.s 159ce <loadFont+0x15e>
	}
	
	theFont = loadBankForAnim(filenum);
   15a04:	|         move.l 44(sp),-(sp)
   15a08:	|         jsr 1623a <loadBankForAnim>
   15a0e:	|         addq.l #4,sp
   15a10:	|         move.l d0,1ce6e <theFont>
	if (!theFont) {
   15a16:	|         move.l 1ce6e <theFont>,d0
   15a1c:	|     ,-- bne.s 15a30 <loadFont+0x1c0>
		KPrintF("loadFont: Can't load font");
   15a1e:	|     |   pea 1a42d <talk.c.490538ff+0x403>
   15a24:	|     |   jsr 17518 <KPrintF>
   15a2a:	|     |   addq.l #4,sp
		return FALSE;
   15a2c:	|     |   clr.w d0
   15a2e:	+-----|-- bra.s 15a3a <loadFont+0x1ca>
	}
	fontHeight = h;
   15a30:	|     '-> move.l 52(sp),1ce5a <fontHeight>
	return TRUE;
   15a38:	|         moveq #1,d0
}
   15a3a:	'-------> move.l (sp)+,d2
   15a3c:	          movea.l (sp)+,a6
   15a3e:	          lea 32(sp),sp
   15a42:	          rts

00015a44 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15a44:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15a48:	                clr.l 4(sp)

    if (!fontTableSize) return;
   15a4c:	                move.l 1ce6a <fontTableSize>,d0
   15a52:	,-------------- beq.w 15b1a <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   15a56:	|               move.w 1cc5e <fontSpace>,d0
   15a5c:	|               asr.w #1,d0
   15a5e:	|               ext.l d0
   15a60:	|               add.l d0,20(sp)
	char *tmp = theText;
   15a64:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15a6a:	|     ,-------- bra.w 15b0e <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   15a6e:	|  ,--|-------> movea.l 1ce6e <theFont>,a0
   15a74:	|  |  |         movea.l 16(a0),a0
   15a78:	|  |  |         movea.l 8(sp),a1
   15a7c:	|  |  |         move.b (a1),d0
   15a7e:	|  |  |         move.b d0,d0
   15a80:	|  |  |         andi.l #255,d0
   15a86:	|  |  |         move.l 1ce6a <fontTableSize>,d1
   15a8c:	|  |  |         cmp.l d0,d1
   15a8e:	|  |  |  ,----- bls.s 15aba <pasteStringToBackdrop+0x76>
   15a90:	|  |  |  |      move.l 1ce66 <fontTable>,d1
   15a96:	|  |  |  |      movea.l 8(sp),a1
   15a9a:	|  |  |  |      move.b (a1),d0
   15a9c:	|  |  |  |      move.b d0,d0
   15a9e:	|  |  |  |      andi.l #255,d0
   15aa4:	|  |  |  |      add.l d0,d0
   15aa6:	|  |  |  |      add.l d0,d0
   15aa8:	|  |  |  |      movea.l d1,a1
   15aaa:	|  |  |  |      adda.l d0,a1
   15aac:	|  |  |  |      move.l (a1),d1
   15aae:	|  |  |  |      move.l d1,d0
   15ab0:	|  |  |  |      lsl.l #3,d0
   15ab2:	|  |  |  |      sub.l d1,d0
   15ab4:	|  |  |  |      add.l d0,d0
   15ab6:	|  |  |  |      add.l d0,d0
   15ab8:	|  |  |  |  ,-- bra.s 15abc <pasteStringToBackdrop+0x78>
   15aba:	|  |  |  '--|-> moveq #0,d0
   15abc:	|  |  |     '-> adda.l d0,a0
   15abe:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   15ac0:	|  |  |         move.l 24(sp),d1
   15ac4:	|  |  |         movea.l (sp),a0
   15ac6:	|  |  |         move.l 12(a0),d0
   15aca:	|  |  |         move.l d0,d0
   15acc:	|  |  |         sub.w d0,d1
   15ace:	|  |  |         move.w d1,d0
   15ad0:	|  |  |         movea.w d0,a1
   15ad2:	|  |  |         move.l 20(sp),d1
   15ad6:	|  |  |         movea.l (sp),a0
   15ad8:	|  |  |         move.l 8(a0),d0
   15adc:	|  |  |         move.l d0,d0
   15ade:	|  |  |         sub.w d0,d1
   15ae0:	|  |  |         move.w d1,d0
   15ae2:	|  |  |         movea.w d0,a0
   15ae4:	|  |  |         move.l a1,-(sp)
   15ae6:	|  |  |         move.l a0,-(sp)
   15ae8:	|  |  |         move.l 8(sp),-(sp)
   15aec:	|  |  |         jsr 24e8 <CstPasteChar>
   15af2:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   15af6:	|  |  |         movea.l (sp),a0
   15af8:	|  |  |         move.l (a0),d1
   15afa:	|  |  |         move.w 1cc5e <fontSpace>,d0
   15b00:	|  |  |         movea.w d0,a0
   15b02:	|  |  |         move.l d1,d0
   15b04:	|  |  |         add.l a0,d0
   15b06:	|  |  |         add.l d0,20(sp)
		tmp++;
   15b0a:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   15b0e:	|  |  '-------> movea.l 8(sp),a0
   15b12:	|  |            move.b (a0),d0
   15b14:	|  '----------- bne.w 15a6e <pasteStringToBackdrop+0x2a>
   15b18:	|           ,-- bra.s 15b1c <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   15b1a:	'-----------|-> nop
    }
}
   15b1c:	            '-> lea 12(sp),sp
   15b20:	                rts

00015b22 <stringWidth>:


int stringWidth (char * theText) {
   15b22:	                lea -16(sp),sp
	int a = 0;
   15b26:	                clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   15b2a:	                clr.l 12(sp)

	if (! fontTableSize) return 0;
   15b2e:	                move.l 1ce6a <fontTableSize>,d0
   15b34:	            ,-- bne.s 15b3a <stringWidth+0x18>
   15b36:	            |   moveq #0,d0
   15b38:	,-----------|-- bra.s 15bae <stringWidth+0x8c>

	char *tmp = theText;
   15b3a:	|           '-> move.l 20(sp),8(sp)
	
	while (*tmp) {
   15b40:	|     ,-------- bra.s 15ba2 <stringWidth+0x80>
        c = *tmp++;
   15b42:	|  ,--|-------> move.l 8(sp),d0
   15b46:	|  |  |         move.l d0,d1
   15b48:	|  |  |         addq.l #1,d1
   15b4a:	|  |  |         move.l d1,8(sp)
   15b4e:	|  |  |         movea.l d0,a0
   15b50:	|  |  |         move.b (a0),d0
   15b52:	|  |  |         ext.w d0
   15b54:	|  |  |         movea.w d0,a0
   15b56:	|  |  |         move.l a0,(sp)
		xOff += theFont->bank.sprites[fontInTable(c)].width + fontSpace;
   15b58:	|  |  |         movea.l 1ce6e <theFont>,a0
   15b5e:	|  |  |         movea.l 16(a0),a1
   15b62:	|  |  |         move.l 1ce6a <fontTableSize>,d0
   15b68:	|  |  |         cmp.l (sp),d0
   15b6a:	|  |  |  ,----- bls.s 15b8a <stringWidth+0x68>
   15b6c:	|  |  |  |      move.l 1ce66 <fontTable>,d1
   15b72:	|  |  |  |      move.l (sp),d0
   15b74:	|  |  |  |      add.l d0,d0
   15b76:	|  |  |  |      add.l d0,d0
   15b78:	|  |  |  |      movea.l d1,a0
   15b7a:	|  |  |  |      adda.l d0,a0
   15b7c:	|  |  |  |      move.l (a0),d1
   15b7e:	|  |  |  |      move.l d1,d0
   15b80:	|  |  |  |      lsl.l #3,d0
   15b82:	|  |  |  |      sub.l d1,d0
   15b84:	|  |  |  |      add.l d0,d0
   15b86:	|  |  |  |      add.l d0,d0
   15b88:	|  |  |  |  ,-- bra.s 15b8c <stringWidth+0x6a>
   15b8a:	|  |  |  '--|-> moveq #0,d0
   15b8c:	|  |  |     '-> lea (0,a1,d0.l),a0
   15b90:	|  |  |         move.l (a0),d1
   15b92:	|  |  |         move.w 1cc5e <fontSpace>,d0
   15b98:	|  |  |         movea.w d0,a0
   15b9a:	|  |  |         move.l d1,d0
   15b9c:	|  |  |         add.l a0,d0
   15b9e:	|  |  |         add.l d0,12(sp)
	while (*tmp) {
   15ba2:	|  |  '-------> movea.l 8(sp),a0
   15ba6:	|  |            move.b (a0),d0
   15ba8:	|  '----------- bne.s 15b42 <stringWidth+0x20>
	
	}//Todo: Amigize this
	
	return xOff;
   15baa:	|               move.l 12(sp),d0
}
   15bae:	'-------------> lea 16(sp),sp
   15bb2:	                rts

00015bb4 <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   15bb4:	       lea -16(sp),sp
   15bb8:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15bba:	       moveq #36,d0
   15bbc:	       move.l d0,16(sp)
   15bc0:	       clr.l 12(sp)
   15bc4:	       move.l 1cd66 <SysBase>,d0
   15bca:	       movea.l d0,a6
   15bcc:	       move.l 16(sp),d0
   15bd0:	       move.l 12(sp),d1
   15bd4:	       jsr -684(a6)
   15bd8:	       move.l d0,8(sp)
   15bdc:	       move.l 8(sp),d0
   15be0:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   15be4:	   ,-- bne.s 15bec <addScreenRegion+0x38>
   15be6:	   |   clr.w d0
   15be8:	,--|-- bra.w 15c6c <addScreenRegion+0xb8>
    newRegion->di = di;
   15bec:	|  '-> movea.l 4(sp),a0
   15bf0:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   15bf6:	|      movea.l 4(sp),a0
   15bfa:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   15bfe:	|      movea.l 4(sp),a0
   15c02:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   15c08:	|      movea.l 4(sp),a0
   15c0c:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15c12:	|      movea.l 4(sp),a0
   15c16:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   15c1c:	|      movea.l 4(sp),a0
   15c20:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   15c26:	|      movea.l 4(sp),a0
   15c2a:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   15c30:	|      move.l 52(sp),-(sp)
   15c34:	|      jsr d83c <loadObjectType>
   15c3a:	|      addq.l #4,sp
   15c3c:	|      movea.l 4(sp),a0
   15c40:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   15c44:	|      move.l 1ce72 <allScreenRegions>,d0
   15c4a:	|      movea.l 4(sp),a0
   15c4e:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   15c52:	|      move.l 4(sp),1ce72 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   15c5a:	|      movea.l 4(sp),a0
   15c5e:	|      move.l 28(a0),d0
   15c62:	|      sne d0
   15c64:	|      neg.b d0
   15c66:	|      move.b d0,d0
   15c68:	|      andi.w #255,d0
}
   15c6c:	'----> movea.l (sp)+,a6
   15c6e:	       lea 16(sp),sp
   15c72:	       rts

00015c74 <getOverRegion>:

void getOverRegion () {
   15c74:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15c76:	             move.l 1ce72 <allScreenRegions>,(sp)
	while (thisRegion) {
   15c7c:	   ,-------- bra.s 15cea <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15c7e:	,--|-------> move.l 1cd22 <input+0xa>,d0
   15c84:	|  |         movea.l (sp),a0
   15c86:	|  |         movea.l (a0),a0
   15c88:	|  |         move.l 1ce1c <cameraX>,d1
   15c8e:	|  |         suba.l d1,a0
   15c90:	|  |         cmpa.l d0,a0
   15c92:	|  |  ,----- bgt.s 15ce4 <getOverRegion+0x70>
   15c94:	|  |  |      move.l 1cd26 <input+0xe>,d0
   15c9a:	|  |  |      movea.l (sp),a0
   15c9c:	|  |  |      movea.l 4(a0),a0
   15ca0:	|  |  |      move.l 1ce20 <cameraY>,d1
   15ca6:	|  |  |      suba.l d1,a0
   15ca8:	|  |  |      cmpa.l d0,a0
   15caa:	|  |  +----- bgt.s 15ce4 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15cac:	|  |  |      move.l 1cd22 <input+0xa>,d0
   15cb2:	|  |  |      movea.l (sp),a0
   15cb4:	|  |  |      movea.l 8(a0),a0
   15cb8:	|  |  |      move.l 1ce1c <cameraX>,d1
   15cbe:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15cc0:	|  |  |      cmpa.l d0,a0
   15cc2:	|  |  +----- blt.s 15ce4 <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15cc4:	|  |  |      move.l 1cd26 <input+0xe>,d0
   15cca:	|  |  |      movea.l (sp),a0
   15ccc:	|  |  |      movea.l 12(a0),a0
   15cd0:	|  |  |      move.l 1ce20 <cameraY>,d1
   15cd6:	|  |  |      suba.l d1,a0
   15cd8:	|  |  |      cmpa.l d0,a0
   15cda:	|  |  +----- blt.s 15ce4 <getOverRegion+0x70>
			overRegion = thisRegion;
   15cdc:	|  |  |      move.l (sp),1ce76 <overRegion>
			return;
   15ce2:	|  |  |  ,-- bra.s 15cf6 <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   15ce4:	|  |  '--|-> movea.l (sp),a0
   15ce6:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15cea:	|  '-----|-> tst.l (sp)
   15cec:	'--------|-- bne.s 15c7e <getOverRegion+0xa>
	}
	overRegion = NULL;
   15cee:	         |   clr.l 1ce76 <overRegion>
	return;
   15cf4:	         |   nop
}
   15cf6:	         '-> addq.l #4,sp
   15cf8:	             rts

00015cfa <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15cfa:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15cfc:	             move.l 1ce72 <allScreenRegions>,(sp)

	while (thisRegion) {
   15d02:	   ,-------- bra.s 15d1e <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   15d04:	,--|-------> movea.l (sp),a0
   15d06:	|  |         movea.l 28(a0),a0
   15d0a:	|  |         move.l 4(a0),d0
   15d0e:	|  |         cmp.l 8(sp),d0
   15d12:	|  |     ,-- bne.s 15d18 <getRegionForObject+0x1e>
			return thisRegion;
   15d14:	|  |     |   move.l (sp),d0
   15d16:	|  |  ,--|-- bra.s 15d24 <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   15d18:	|  |  |  '-> movea.l (sp),a0
   15d1a:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   15d1e:	|  '--|----> tst.l (sp)
   15d20:	'-----|----- bne.s 15d04 <getRegionForObject+0xa>
	}

	return NULL;
   15d22:	      |      moveq #0,d0
}
   15d24:	      '----> addq.l #4,sp
   15d26:	             rts

00015d28 <killAllRegions>:

void killAllRegions () {
   15d28:	       subq.l #8,sp
   15d2a:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   15d2c:	   ,-- bra.s 15d6e <killAllRegions+0x46>
		killRegion = allScreenRegions;
   15d2e:	,--|-> move.l 1ce72 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   15d36:	|  |   movea.l 1ce72 <allScreenRegions>,a0
   15d3c:	|  |   move.l 32(a0),d0
   15d40:	|  |   move.l d0,1ce72 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   15d46:	|  |   movea.l 8(sp),a0
   15d4a:	|  |   move.l 28(a0),d0
   15d4e:	|  |   move.l d0,-(sp)
   15d50:	|  |   jsr daf4 <removeObjectType>
   15d56:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   15d58:	|  |   move.l 8(sp),4(sp)
   15d5e:	|  |   move.l 1cd66 <SysBase>,d0
   15d64:	|  |   movea.l d0,a6
   15d66:	|  |   movea.l 4(sp),a1
   15d6a:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   15d6e:	|  '-> move.l 1ce72 <allScreenRegions>,d0
   15d74:	'----- bne.s 15d2e <killAllRegions+0x6>
	}
	overRegion = NULL;
   15d76:	       clr.l 1ce76 <overRegion>
}
   15d7c:	       nop
   15d7e:	       movea.l (sp)+,a6
   15d80:	       addq.l #8,sp
   15d82:	       rts

00015d84 <loadRegions>:

void loadRegions (BPTR fp) {
   15d84:	       lea -24(sp),sp
   15d88:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15d8a:	       move.l 32(sp),-(sp)
   15d8e:	       jsr 6bc <get2bytes>
   15d94:	       addq.l #4,sp
   15d96:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15d9a:	       move.l #118386,20(sp)

	while (numRegions --) {
   15da2:	   ,-- bra.w 15e80 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   15da6:	,--|-> moveq #36,d0
   15da8:	|  |   move.l d0,16(sp)
   15dac:	|  |   clr.l 12(sp)
   15db0:	|  |   move.l 1cd66 <SysBase>,d0
   15db6:	|  |   movea.l d0,a6
   15db8:	|  |   move.l 16(sp),d0
   15dbc:	|  |   move.l 12(sp),d1
   15dc0:	|  |   jsr -684(a6)
   15dc4:	|  |   move.l d0,8(sp)
   15dc8:	|  |   move.l 8(sp),d0
   15dcc:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15dd0:	|  |   movea.l 20(sp),a0
   15dd4:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   15dd8:	|  |   moveq #32,d1
   15dda:	|  |   add.l 4(sp),d1
   15dde:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15de2:	|  |   move.l 32(sp),-(sp)
   15de6:	|  |   jsr 6bc <get2bytes>
   15dec:	|  |   addq.l #4,sp
   15dee:	|  |   movea.l 4(sp),a0
   15df2:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   15df4:	|  |   move.l 32(sp),-(sp)
   15df8:	|  |   jsr 6bc <get2bytes>
   15dfe:	|  |   addq.l #4,sp
   15e00:	|  |   movea.l 4(sp),a0
   15e04:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   15e08:	|  |   move.l 32(sp),-(sp)
   15e0c:	|  |   jsr 6bc <get2bytes>
   15e12:	|  |   addq.l #4,sp
   15e14:	|  |   movea.l 4(sp),a0
   15e18:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   15e1c:	|  |   move.l 32(sp),-(sp)
   15e20:	|  |   jsr 6bc <get2bytes>
   15e26:	|  |   addq.l #4,sp
   15e28:	|  |   movea.l 4(sp),a0
   15e2c:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   15e30:	|  |   move.l 32(sp),-(sp)
   15e34:	|  |   jsr 6bc <get2bytes>
   15e3a:	|  |   addq.l #4,sp
   15e3c:	|  |   movea.l 4(sp),a0
   15e40:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   15e44:	|  |   move.l 32(sp),-(sp)
   15e48:	|  |   jsr 6bc <get2bytes>
   15e4e:	|  |   addq.l #4,sp
   15e50:	|  |   movea.l 4(sp),a0
   15e54:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   15e58:	|  |   move.l 32(sp),-(sp)
   15e5c:	|  |   jsr 6bc <get2bytes>
   15e62:	|  |   addq.l #4,sp
   15e64:	|  |   movea.l 4(sp),a0
   15e68:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   15e6c:	|  |   move.l 32(sp),-(sp)
   15e70:	|  |   jsr d7ea <loadObjectRef>
   15e76:	|  |   addq.l #4,sp
   15e78:	|  |   movea.l 4(sp),a0
   15e7c:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15e80:	|  '-> move.l 24(sp),d0
   15e84:	|      move.l d0,d1
   15e86:	|      subq.l #1,d1
   15e88:	|      move.l d1,24(sp)
   15e8c:	|      tst.l d0
   15e8e:	'----- bne.w 15da6 <loadRegions+0x22>
	}
	* pointy = NULL;
   15e92:	       movea.l 20(sp),a0
   15e96:	       clr.l (a0)
}
   15e98:	       nop
   15e9a:	       movea.l (sp)+,a6
   15e9c:	       lea 24(sp),sp
   15ea0:	       rts

00015ea2 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15ea2:	             lea -12(sp),sp
   15ea6:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   15ea8:	             move.l #118386,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15eb0:	   ,-------- bra.s 15f2a <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15eb2:	,--|-------> movea.l 12(sp),a0
   15eb6:	|  |         movea.l (a0),a0
   15eb8:	|  |         movea.l 28(a0),a0
   15ebc:	|  |         move.l 4(a0),d0
   15ec0:	|  |         cmp.l 20(sp),d0
   15ec4:	|  |  ,----- bne.s 15f1c <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   15ec6:	|  |  |      movea.l 12(sp),a0
   15eca:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15ece:	|  |  |      movea.l 8(sp),a0
   15ed2:	|  |  |      move.l 32(a0),d0
   15ed6:	|  |  |      movea.l 12(sp),a0
   15eda:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15edc:	|  |  |      movea.l 8(sp),a0
   15ee0:	|  |  |      move.l 28(a0),d0
   15ee4:	|  |  |      move.l d0,-(sp)
   15ee6:	|  |  |      jsr daf4 <removeObjectType>
   15eec:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15eee:	|  |  |      move.l 1ce76 <overRegion>,d0
   15ef4:	|  |  |      cmp.l 8(sp),d0
   15ef8:	|  |  |  ,-- bne.s 15f00 <removeScreenRegion+0x5e>
   15efa:	|  |  |  |   clr.l 1ce76 <overRegion>
            FreeVec(killMe);
   15f00:	|  |  |  '-> move.l 8(sp),4(sp)
   15f06:	|  |  |      move.l 1cd66 <SysBase>,d0
   15f0c:	|  |  |      movea.l d0,a6
   15f0e:	|  |  |      movea.l 4(sp),a1
   15f12:	|  |  |      jsr -690(a6)
            killMe = NULL;
   15f16:	|  |  |      clr.l 8(sp)
   15f1a:	|  +--|----- bra.s 15f2a <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   15f1c:	|  |  '----> movea.l 12(sp),a0
   15f20:	|  |         move.l (a0),d0
   15f22:	|  |         moveq #32,d1
   15f24:	|  |         add.l d0,d1
   15f26:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   15f2a:	|  '-------> movea.l 12(sp),a0
   15f2e:	|            move.l (a0),d0
   15f30:	'----------- bne.s 15eb2 <removeScreenRegion+0x10>
        }
    }
}
   15f32:	             nop
   15f34:	             nop
   15f36:	             movea.l (sp)+,a6
   15f38:	             lea 12(sp),sp
   15f3c:	             rts

00015f3e <saveRegions>:

void saveRegions (BPTR fp) {
   15f3e:	       subq.l #8,sp
	int numRegions = 0;
   15f40:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   15f44:	       move.l 1ce72 <allScreenRegions>,(sp)
	while (thisRegion) {
   15f4a:	   ,-- bra.s 15f56 <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   15f4c:	,--|-> movea.l (sp),a0
   15f4e:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   15f52:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   15f56:	|  '-> tst.l (sp)
   15f58:	'----- bne.s 15f4c <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   15f5a:	       move.l 12(sp),-(sp)
   15f5e:	       move.l 8(sp),-(sp)
   15f62:	       jsr 8d0 <put2bytes>
   15f68:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   15f6a:	       move.l 1ce72 <allScreenRegions>,(sp)
	while (thisRegion) {
   15f70:	,----- bra.w 16018 <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   15f74:	|  ,-> movea.l (sp),a0
   15f76:	|  |   move.l (a0),d0
   15f78:	|  |   move.l 12(sp),-(sp)
   15f7c:	|  |   move.l d0,-(sp)
   15f7e:	|  |   jsr 8d0 <put2bytes>
   15f84:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   15f86:	|  |   movea.l (sp),a0
   15f88:	|  |   move.l 4(a0),d0
   15f8c:	|  |   move.l 12(sp),-(sp)
   15f90:	|  |   move.l d0,-(sp)
   15f92:	|  |   jsr 8d0 <put2bytes>
   15f98:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15f9a:	|  |   movea.l (sp),a0
   15f9c:	|  |   move.l 8(a0),d0
   15fa0:	|  |   move.l 12(sp),-(sp)
   15fa4:	|  |   move.l d0,-(sp)
   15fa6:	|  |   jsr 8d0 <put2bytes>
   15fac:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15fae:	|  |   movea.l (sp),a0
   15fb0:	|  |   move.l 12(a0),d0
   15fb4:	|  |   move.l 12(sp),-(sp)
   15fb8:	|  |   move.l d0,-(sp)
   15fba:	|  |   jsr 8d0 <put2bytes>
   15fc0:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15fc2:	|  |   movea.l (sp),a0
   15fc4:	|  |   move.l 16(a0),d0
   15fc8:	|  |   move.l 12(sp),-(sp)
   15fcc:	|  |   move.l d0,-(sp)
   15fce:	|  |   jsr 8d0 <put2bytes>
   15fd4:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   15fd6:	|  |   movea.l (sp),a0
   15fd8:	|  |   move.l 20(a0),d0
   15fdc:	|  |   move.l 12(sp),-(sp)
   15fe0:	|  |   move.l d0,-(sp)
   15fe2:	|  |   jsr 8d0 <put2bytes>
   15fe8:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15fea:	|  |   movea.l (sp),a0
   15fec:	|  |   move.l 24(a0),d0
   15ff0:	|  |   move.l 12(sp),-(sp)
   15ff4:	|  |   move.l d0,-(sp)
   15ff6:	|  |   jsr 8d0 <put2bytes>
   15ffc:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15ffe:	|  |   movea.l (sp),a0
   16000:	|  |   move.l 28(a0),d0
   16004:	|  |   move.l 12(sp),-(sp)
   16008:	|  |   move.l d0,-(sp)
   1600a:	|  |   jsr db94 <saveObjectRef>
   16010:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   16012:	|  |   movea.l (sp),a0
   16014:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   16018:	'--|-> tst.l (sp)
   1601a:	   '-- bne.w 15f74 <saveRegions+0x36>
	}
}
   1601e:	       nop
   16020:	       nop
   16022:	       addq.l #8,sp
   16024:	       rts

00016026 <showBoxes>:

void showBoxes () {
   16026:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   16028:	       move.l 1ce72 <allScreenRegions>,(sp)

	while (huntRegion) {
   1602e:	,----- bra.w 160ca <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   16032:	|  ,-> movea.l (sp),a0
   16034:	|  |   move.l 12(a0),d0
   16038:	|  |   movea.l d0,a1
   1603a:	|  |   movea.l (sp),a0
   1603c:	|  |   move.l 4(a0),d0
   16040:	|  |   move.l d0,d1
   16042:	|  |   movea.l (sp),a0
   16044:	|  |   move.l (a0),d0
   16046:	|  |   move.l a1,-(sp)
   16048:	|  |   move.l d1,-(sp)
   1604a:	|  |   move.l d0,-(sp)
   1604c:	|  |   jsr d478 <drawVerticalLine>
   16052:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   16056:	|  |   movea.l (sp),a0
   16058:	|  |   move.l 12(a0),d0
   1605c:	|  |   movea.l d0,a1
   1605e:	|  |   movea.l (sp),a0
   16060:	|  |   move.l 4(a0),d0
   16064:	|  |   move.l d0,d1
   16066:	|  |   movea.l (sp),a0
   16068:	|  |   move.l 8(a0),d0
   1606c:	|  |   move.l a1,-(sp)
   1606e:	|  |   move.l d1,-(sp)
   16070:	|  |   move.l d0,-(sp)
   16072:	|  |   jsr d478 <drawVerticalLine>
   16078:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   1607c:	|  |   movea.l (sp),a0
   1607e:	|  |   move.l 8(a0),d0
   16082:	|  |   movea.l d0,a1
   16084:	|  |   movea.l (sp),a0
   16086:	|  |   move.l 4(a0),d0
   1608a:	|  |   move.l d0,d1
   1608c:	|  |   movea.l (sp),a0
   1608e:	|  |   move.l (a0),d0
   16090:	|  |   move.l a1,-(sp)
   16092:	|  |   move.l d1,-(sp)
   16094:	|  |   move.l d0,-(sp)
   16096:	|  |   jsr d452 <drawHorizontalLine>
   1609c:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   160a0:	|  |   movea.l (sp),a0
   160a2:	|  |   move.l 8(a0),d0
   160a6:	|  |   movea.l d0,a1
   160a8:	|  |   movea.l (sp),a0
   160aa:	|  |   move.l 12(a0),d0
   160ae:	|  |   move.l d0,d1
   160b0:	|  |   movea.l (sp),a0
   160b2:	|  |   move.l (a0),d0
   160b4:	|  |   move.l a1,-(sp)
   160b6:	|  |   move.l d1,-(sp)
   160b8:	|  |   move.l d0,-(sp)
   160ba:	|  |   jsr d452 <drawHorizontalLine>
   160c0:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   160c4:	|  |   movea.l (sp),a0
   160c6:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   160ca:	'--|-> tst.l (sp)
   160cc:	   '-- bne.w 16032 <showBoxes+0xc>
	}
   160d0:	       nop
   160d2:	       nop
   160d4:	       addq.l #4,sp
   160d6:	       rts

000160d8 <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   160d8:	       lea -88(sp),sp
   160dc:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   160de:	       move.l 1cd66 <SysBase>,d0
   160e4:	       movea.l d0,a6
   160e6:	       jsr -666(a6)
   160ea:	       move.l d0,88(sp)
   160ee:	       move.l 88(sp),d0
   160f2:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   160f6:	       move.l 84(sp),80(sp)
   160fc:	       moveq #40,d0
   160fe:	       move.l d0,76(sp)
   16102:	       move.l 1cd66 <SysBase>,d0
   16108:	       movea.l d0,a6
   1610a:	       movea.l 80(sp),a0
   1610e:	       move.l 76(sp),d0
   16112:	       jsr -654(a6)
   16116:	       move.l d0,72(sp)
   1611a:	       move.l 72(sp),d0
   1611e:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   16122:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   16128:	       move.l #107591,60(sp)
   16130:	       clr.l 56(sp)
   16134:	       move.l 64(sp),52(sp)
   1613a:	       clr.l 48(sp)
   1613e:	       move.l 1cd66 <SysBase>,d0
   16144:	       movea.l d0,a6
   16146:	       movea.l 60(sp),a0
   1614a:	       move.l 56(sp),d0
   1614e:	       movea.l 52(sp),a1
   16152:	       move.l 48(sp),d1
   16156:	       jsr -444(a6)
   1615a:	       move.b d0,47(sp)
   1615e:	       move.b 47(sp),d0
   16162:	   ,-- beq.s 16178 <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   16164:	   |   pea 1a454 <talk.c.490538ff+0x42a>
   1616a:	   |   jsr 17518 <KPrintF>
   16170:	   |   addq.l #4,sp
        return 0;
   16172:	   |   moveq #0,d0
   16174:	,--|-- bra.w 16232 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   16178:	|  '-> movea.l 64(sp),a0
   1617c:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   16182:	|      lea 92(sp),a0
   16186:	|      lea -86(a0),a0
   1618a:	|      move.l a0,38(sp)
   1618e:	|      movea.l 42(sp),a6
   16192:	|      movea.l 38(sp),a0
   16196:	|      jsr -60(a6)
   1619a:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   1619e:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   161a4:	|      move.l #1103515245,-(sp)
   161aa:	|      move.l 34(sp),-(sp)
   161ae:	|      jsr 17ea4 <__mulsi3>
   161b4:	|      addq.l #8,sp
   161b6:	|      addi.l #12345,d0
   161bc:	|      move.l d0,d1
   161be:	|      bclr #31,d1
   161c2:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   161c6:	|      move.l 30(sp),d0
   161ca:	|      pea 64 <_start+0x64>
   161ce:	|      move.l d0,-(sp)
   161d0:	|      jsr 17f7e <__umodsi3>
   161d6:	|      addq.l #8,sp
   161d8:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   161dc:	|      move.l 26(sp),-(sp)
   161e0:	|      pea 1a471 <talk.c.490538ff+0x447>
   161e6:	|      jsr 17518 <KPrintF>
   161ec:	|      addq.l #8,sp

    CloseDevice(ioreq);
   161ee:	|      move.l 64(sp),22(sp)
   161f4:	|      move.l 1cd66 <SysBase>,d0
   161fa:	|      movea.l d0,a6
   161fc:	|      movea.l 22(sp),a1
   16200:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   16204:	|      move.l 64(sp),18(sp)
   1620a:	|      move.l 1cd66 <SysBase>,d0
   16210:	|      movea.l d0,a6
   16212:	|      movea.l 18(sp),a0
   16216:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   1621a:	|      move.l 84(sp),14(sp)
   16220:	|      move.l 1cd66 <SysBase>,d0
   16226:	|      movea.l d0,a6
   16228:	|      movea.l 14(sp),a0
   1622c:	|      jsr -672(a6)
    return 0;
   16230:	|      moveq #0,d0
   16232:	'----> movea.l (sp)+,a6
   16234:	       lea 88(sp),sp
   16238:	       rts

0001623a <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   1623a:	             lea -20(sp),sp
   1623e:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   16240:	             move.l 1ce7a <allLoadedBanks>,20(sp)
	while (returnMe) {
   16248:	      ,----- bra.s 1627a <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   1624a:	   ,--|----> movea.l 20(sp),a0
   1624e:	   |  |      move.l (a0),d0
   16250:	   |  |      cmp.l 28(sp),d0
   16254:	   |  |  ,-- bne.s 16270 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   16256:	   |  |  |   movea.l 20(sp),a0
   1625a:	   |  |  |   move.l 4(a0),d0
   1625e:	   |  |  |   addq.l #1,d0
   16260:	   |  |  |   movea.l 20(sp),a0
   16264:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   16268:	   |  |  |   move.l 20(sp),d0
   1626c:	,--|--|--|-- bra.w 1630e <loadBankForAnim+0xd4>
		}		
		returnMe = returnMe->next;
   16270:	|  |  |  '-> movea.l 20(sp),a0
   16274:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   1627a:	|  |  '----> tst.l 20(sp)
   1627e:	|  '-------- bne.s 1624a <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   16280:	|            moveq #26,d0
   16282:	|            move.l d0,16(sp)
   16286:	|            clr.l 12(sp)
   1628a:	|            move.l 1cd66 <SysBase>,d0
   16290:	|            movea.l d0,a6
   16292:	|            move.l 16(sp),d0
   16296:	|            move.l 12(sp),d1
   1629a:	|            jsr -684(a6)
   1629e:	|            move.l d0,8(sp)
   162a2:	|            move.l 8(sp),d0
   162a6:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   162aa:	|     ,----- beq.s 1630c <loadBankForAnim+0xd2>
		returnMe->ID = ID;
   162ac:	|     |      movea.l 20(sp),a0
   162b0:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, (struct spriteBank *) &returnMe->bank)) {
   162b4:	|     |      move.l 20(sp),d0
   162b8:	|     |      addq.l #8,d0
   162ba:	|     |      move.l d0,-(sp)
   162bc:	|     |      move.l 32(sp),-(sp)
   162c0:	|     |      jsr 8cac <loadSpriteBank>
   162c6:	|     |      addq.l #8,sp
   162c8:	|     |      tst.w d0
   162ca:	|     |  ,-- beq.s 162f2 <loadBankForAnim+0xb8>
			returnMe->timesUsed = 1;
   162cc:	|     |  |   movea.l 20(sp),a0
   162d0:	|     |  |   moveq #1,d0
   162d2:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   162d6:	|     |  |   move.l 1ce7a <allLoadedBanks>,d0
   162dc:	|     |  |   movea.l 20(sp),a0
   162e0:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   162e4:	|     |  |   move.l 20(sp),1ce7a <allLoadedBanks>
			//KPrintF("loadBankForAnim: New sprite bank created OK\n");
			return returnMe;
   162ec:	|     |  |   move.l 20(sp),d0
   162f0:	+-----|--|-- bra.s 1630e <loadBankForAnim+0xd4>
		} else {
			//KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
			FreeVec(returnMe);
   162f2:	|     |  '-> move.l 20(sp),4(sp)
   162f8:	|     |      move.l 1cd66 <SysBase>,d0
   162fe:	|     |      movea.l d0,a6
   16300:	|     |      movea.l 4(sp),a1
   16304:	|     |      jsr -690(a6)
			return NULL;
   16308:	|     |      moveq #0,d0
   1630a:	+-----|----- bra.s 1630e <loadBankForAnim+0xd4>
		}
	} else return NULL;
   1630c:	|     '----> moveq #0,d0
}
   1630e:	'----------> movea.l (sp)+,a6
   16310:	             lea 20(sp),sp
   16314:	             rts

00016316 <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   16316:	       lea -60(sp),sp
   1631a:	       move.l d3,-(sp)
   1631c:	       move.l d2,-(sp)
 	DOUBLE xDiff = x2 - x1;
   1631e:	       move.l 88(sp),d0
   16322:	       sub.l 80(sp),d0
   16326:	       move.l d0,-(sp)
   16328:	       jsr 1790a <__floatsidf>
   1632e:	       addq.l #4,sp
   16330:	       move.l d0,32(sp)
   16334:	       move.l d1,36(sp)
   16338:	       move.l 32(sp),60(sp)
   1633e:	       move.l 36(sp),64(sp)
	int yDiff = y2 - y1;
   16344:	       move.l 92(sp),d0
   16348:	       sub.l 84(sp),d0
   1634c:	       move.l d0,56(sp)

	DOUBLE m = xDiff * (xP - x1) + yDiff * (yP - y1);
   16350:	       move.l 96(sp),d0
   16354:	       sub.l 80(sp),d0
   16358:	       move.l d0,-(sp)
   1635a:	       jsr 1790a <__floatsidf>
   16360:	       addq.l #4,sp
   16362:	       move.l 64(sp),-(sp)
   16366:	       move.l 64(sp),-(sp)
   1636a:	       move.l d1,-(sp)
   1636c:	       move.l d0,-(sp)
   1636e:	       jsr 1799a <__muldf3>
   16374:	       lea 16(sp),sp
   16378:	       move.l d0,d2
   1637a:	       move.l d1,d3
   1637c:	       move.l 100(sp),d0
   16380:	       sub.l 84(sp),d0
   16384:	       move.l 56(sp),-(sp)
   16388:	       move.l d0,-(sp)
   1638a:	       jsr 17ea4 <__mulsi3>
   16390:	       addq.l #8,sp
   16392:	       move.l d0,-(sp)
   16394:	       jsr 1790a <__floatsidf>
   1639a:	       addq.l #4,sp
   1639c:	       move.l d1,-(sp)
   1639e:	       move.l d0,-(sp)
   163a0:	       move.l d3,-(sp)
   163a2:	       move.l d2,-(sp)
   163a4:	       jsr 1773c <__adddf3>
   163aa:	       lea 16(sp),sp
   163ae:	       move.l d0,24(sp)
   163b2:	       move.l d1,28(sp)
   163b6:	       move.l 24(sp),48(sp)
   163bc:	       move.l 28(sp),52(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   163c2:	       move.l 64(sp),-(sp)
   163c6:	       move.l 64(sp),-(sp)
   163ca:	       move.l 72(sp),-(sp)
   163ce:	       move.l 72(sp),-(sp)
   163d2:	       jsr 1799a <__muldf3>
   163d8:	       lea 16(sp),sp
   163dc:	       move.l d0,d2
   163de:	       move.l d1,d3
   163e0:	       move.l 56(sp),-(sp)
   163e4:	       move.l 60(sp),-(sp)
   163e8:	       jsr 17ea4 <__mulsi3>
   163ee:	       addq.l #8,sp
   163f0:	       move.l d0,-(sp)
   163f2:	       jsr 1790a <__floatsidf>
   163f8:	       addq.l #4,sp
   163fa:	       move.l d1,-(sp)
   163fc:	       move.l d0,-(sp)
   163fe:	       move.l d3,-(sp)
   16400:	       move.l d2,-(sp)
   16402:	       jsr 1773c <__adddf3>
   16408:	       lea 16(sp),sp
   1640c:	       move.l d1,-(sp)
   1640e:	       move.l d0,-(sp)
   16410:	       move.l 60(sp),-(sp)
   16414:	       move.l 60(sp),-(sp)
   16418:	       jsr 1779e <__divdf3>
   1641e:	       lea 16(sp),sp
   16422:	       move.l d0,16(sp)
   16426:	       move.l d1,20(sp)
   1642a:	       move.l 16(sp),48(sp)
   16430:	       move.l 20(sp),52(sp)

	if (m < 0) {		
   16436:	       clr.l -(sp)
   16438:	       clr.l -(sp)
   1643a:	       move.l 60(sp),-(sp)
   1643e:	       move.l 60(sp),-(sp)
   16442:	       jsr 17b22 <__ltdf2>
   16448:	       lea 16(sp),sp
   1644c:	       tst.l d0
   1644e:	   ,-- bge.s 16464 <closestPointOnLine+0x14e>
		*closestX = x1;
   16450:	   |   movea.l 72(sp),a0
   16454:	   |   move.l 80(sp),(a0)
		*closestY = y1;
   16458:	   |   movea.l 76(sp),a0
   1645c:	   |   move.l 84(sp),(a0)
   16460:	,--|-- bra.w 16532 <closestPointOnLine+0x21c>
	} else if (m > 1) {
   16464:	|  '-> clr.l -(sp)
   16466:	|      move.l #1072693248,-(sp)
   1646c:	|      move.l 60(sp),-(sp)
   16470:	|      move.l 60(sp),-(sp)
   16474:	|      jsr 17a68 <__gtdf2>
   1647a:	|      lea 16(sp),sp
   1647e:	|      tst.l d0
   16480:	|  ,-- ble.s 16496 <closestPointOnLine+0x180>
		*closestX = x2;
   16482:	|  |   movea.l 72(sp),a0
   16486:	|  |   move.l 88(sp),(a0)
		*closestY = y2;
   1648a:	|  |   movea.l 76(sp),a0
   1648e:	|  |   move.l 92(sp),(a0)
   16492:	+--|-- bra.w 16532 <closestPointOnLine+0x21c>
	} else {
		DOUBLE tmp = m * xDiff; 
   16496:	|  '-> move.l 64(sp),-(sp)
   1649a:	|      move.l 64(sp),-(sp)
   1649e:	|      move.l 60(sp),-(sp)
   164a2:	|      move.l 60(sp),-(sp)
   164a6:	|      jsr 1799a <__muldf3>
   164ac:	|      lea 16(sp),sp
   164b0:	|      move.l d0,8(sp)
   164b4:	|      move.l d1,12(sp)
   164b8:	|      move.l 8(sp),40(sp)
   164be:	|      move.l 12(sp),44(sp)
		*closestX = (int) tmp;
   164c4:	|      move.l 44(sp),-(sp)
   164c8:	|      move.l 44(sp),-(sp)
   164cc:	|      jsr 178ac <__fixdfsi>
   164d2:	|      addq.l #8,sp
   164d4:	|      movea.l 72(sp),a0
   164d8:	|      move.l d0,(a0)
		*closestX += x1;
   164da:	|      movea.l 72(sp),a0
   164de:	|      move.l (a0),d0
   164e0:	|      add.l 80(sp),d0
   164e4:	|      movea.l 72(sp),a0
   164e8:	|      move.l d0,(a0)
		*closestY = m * yDiff;
   164ea:	|      move.l 56(sp),-(sp)
   164ee:	|      jsr 1790a <__floatsidf>
   164f4:	|      addq.l #4,sp
   164f6:	|      move.l 52(sp),-(sp)
   164fa:	|      move.l 52(sp),-(sp)
   164fe:	|      move.l d1,-(sp)
   16500:	|      move.l d0,-(sp)
   16502:	|      jsr 1799a <__muldf3>
   16508:	|      lea 16(sp),sp
   1650c:	|      move.l d1,-(sp)
   1650e:	|      move.l d0,-(sp)
   16510:	|      jsr 178ac <__fixdfsi>
   16516:	|      addq.l #8,sp
   16518:	|      movea.l 76(sp),a0
   1651c:	|      move.l d0,(a0)
		*closestY += y1;
   1651e:	|      movea.l 76(sp),a0
   16522:	|      move.l (a0),d0
   16524:	|      add.l 84(sp),d0
   16528:	|      movea.l 76(sp),a0
   1652c:	|      move.l d0,(a0)
		return TRUE;
   1652e:	|      moveq #1,d0
   16530:	|  ,-- bra.s 16534 <closestPointOnLine+0x21e>
	}
	return FALSE;
   16532:	'--|-> clr.w d0
}
   16534:	   '-> move.l (sp)+,d2
   16536:	       move.l (sp)+,d3
   16538:	       lea 60(sp),sp
   1653c:	       rts

0001653e <drawFloor>:

void drawFloor() {
   1653e:	                lea -12(sp),sp
   16542:	                move.l d3,-(sp)
   16544:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   16546:	                clr.l 16(sp)
   1654a:	   ,----------- bra.w 1675e <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   1654e:	,--|----------> movea.l 1ce7e <currentFloor>,a0
   16554:	|  |            move.l 12(a0),d1
   16558:	|  |            move.l 16(sp),d0
   1655c:	|  |            lsl.l #3,d0
   1655e:	|  |            movea.l d1,a0
   16560:	|  |            adda.l d0,a0
   16562:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   16566:	|  |            moveq #1,d0
   16568:	|  |            cmp.l 8(sp),d0
   1656c:	|  |  ,-------- bge.w 1675a <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   16570:	|  |  |         moveq #1,d0
   16572:	|  |  |         move.l d0,12(sp)
   16576:	|  |  |     ,-- bra.w 16670 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   1657a:	|  |  |  ,--|-> movea.l 1ce7e <currentFloor>,a0
   16580:	|  |  |  |  |   move.l 4(a0),d1
   16584:	|  |  |  |  |   movea.l 1ce7e <currentFloor>,a0
   1658a:	|  |  |  |  |   movea.l 12(a0),a0
   1658e:	|  |  |  |  |   move.l 16(sp),d0
   16592:	|  |  |  |  |   lsl.l #3,d0
   16594:	|  |  |  |  |   adda.l d0,a0
   16596:	|  |  |  |  |   movea.l 4(a0),a0
   1659a:	|  |  |  |  |   move.l 12(sp),d0
   1659e:	|  |  |  |  |   add.l d0,d0
   165a0:	|  |  |  |  |   add.l d0,d0
   165a2:	|  |  |  |  |   adda.l d0,a0
   165a4:	|  |  |  |  |   move.l (a0),d0
   165a6:	|  |  |  |  |   lsl.l #3,d0
   165a8:	|  |  |  |  |   movea.l d1,a0
   165aa:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   165ac:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   165b0:	|  |  |  |  |   movea.l 1ce7e <currentFloor>,a0
   165b6:	|  |  |  |  |   move.l 4(a0),d1
   165ba:	|  |  |  |  |   movea.l 1ce7e <currentFloor>,a0
   165c0:	|  |  |  |  |   movea.l 12(a0),a0
   165c4:	|  |  |  |  |   move.l 16(sp),d0
   165c8:	|  |  |  |  |   lsl.l #3,d0
   165ca:	|  |  |  |  |   adda.l d0,a0
   165cc:	|  |  |  |  |   movea.l 4(a0),a0
   165d0:	|  |  |  |  |   move.l 12(sp),d0
   165d4:	|  |  |  |  |   add.l d0,d0
   165d6:	|  |  |  |  |   add.l d0,d0
   165d8:	|  |  |  |  |   adda.l d0,a0
   165da:	|  |  |  |  |   move.l (a0),d0
   165dc:	|  |  |  |  |   lsl.l #3,d0
   165de:	|  |  |  |  |   movea.l d1,a0
   165e0:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   165e2:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   165e4:	|  |  |  |  |   movea.l 1ce7e <currentFloor>,a0
   165ea:	|  |  |  |  |   move.l 4(a0),d1
   165ee:	|  |  |  |  |   movea.l 1ce7e <currentFloor>,a0
   165f4:	|  |  |  |  |   movea.l 12(a0),a0
   165f8:	|  |  |  |  |   move.l 16(sp),d0
   165fc:	|  |  |  |  |   lsl.l #3,d0
   165fe:	|  |  |  |  |   adda.l d0,a0
   16600:	|  |  |  |  |   movea.l 4(a0),a0
   16604:	|  |  |  |  |   move.l 12(sp),d0
   16608:	|  |  |  |  |   addi.l #1073741823,d0
   1660e:	|  |  |  |  |   add.l d0,d0
   16610:	|  |  |  |  |   add.l d0,d0
   16612:	|  |  |  |  |   adda.l d0,a0
   16614:	|  |  |  |  |   move.l (a0),d0
   16616:	|  |  |  |  |   lsl.l #3,d0
   16618:	|  |  |  |  |   movea.l d1,a0
   1661a:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   1661c:	|  |  |  |  |   move.l 4(a0),d1
   16620:	|  |  |  |  |   movea.l 1ce7e <currentFloor>,a0
   16626:	|  |  |  |  |   move.l 4(a0),d3
   1662a:	|  |  |  |  |   movea.l 1ce7e <currentFloor>,a0
   16630:	|  |  |  |  |   movea.l 12(a0),a0
   16634:	|  |  |  |  |   move.l 16(sp),d0
   16638:	|  |  |  |  |   lsl.l #3,d0
   1663a:	|  |  |  |  |   adda.l d0,a0
   1663c:	|  |  |  |  |   movea.l 4(a0),a0
   16640:	|  |  |  |  |   move.l 12(sp),d0
   16644:	|  |  |  |  |   addi.l #1073741823,d0
   1664a:	|  |  |  |  |   add.l d0,d0
   1664c:	|  |  |  |  |   add.l d0,d0
   1664e:	|  |  |  |  |   adda.l d0,a0
   16650:	|  |  |  |  |   move.l (a0),d0
   16652:	|  |  |  |  |   lsl.l #3,d0
   16654:	|  |  |  |  |   movea.l d3,a0
   16656:	|  |  |  |  |   adda.l d0,a0
   16658:	|  |  |  |  |   move.l (a0),d0
   1665a:	|  |  |  |  |   move.l d2,-(sp)
   1665c:	|  |  |  |  |   move.l a1,-(sp)
   1665e:	|  |  |  |  |   move.l d1,-(sp)
   16660:	|  |  |  |  |   move.l d0,-(sp)
   16662:	|  |  |  |  |   jsr 4928 <drawLine>
   16668:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   1666c:	|  |  |  |  |   addq.l #1,12(sp)
   16670:	|  |  |  |  '-> move.l 12(sp),d0
   16674:	|  |  |  |      cmp.l 8(sp),d0
   16678:	|  |  |  '----- blt.w 1657a <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   1667c:	|  |  |         movea.l 1ce7e <currentFloor>,a0
   16682:	|  |  |         move.l 4(a0),d1
   16686:	|  |  |         movea.l 1ce7e <currentFloor>,a0
   1668c:	|  |  |         movea.l 12(a0),a0
   16690:	|  |  |         move.l 16(sp),d0
   16694:	|  |  |         lsl.l #3,d0
   16696:	|  |  |         adda.l d0,a0
   16698:	|  |  |         movea.l 4(a0),a0
   1669c:	|  |  |         move.l 8(sp),d0
   166a0:	|  |  |         addi.l #1073741823,d0
   166a6:	|  |  |         add.l d0,d0
   166a8:	|  |  |         add.l d0,d0
   166aa:	|  |  |         adda.l d0,a0
   166ac:	|  |  |         move.l (a0),d0
   166ae:	|  |  |         lsl.l #3,d0
   166b0:	|  |  |         movea.l d1,a0
   166b2:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   166b4:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   166b8:	|  |  |         movea.l 1ce7e <currentFloor>,a0
   166be:	|  |  |         move.l 4(a0),d1
   166c2:	|  |  |         movea.l 1ce7e <currentFloor>,a0
   166c8:	|  |  |         movea.l 12(a0),a0
   166cc:	|  |  |         move.l 16(sp),d0
   166d0:	|  |  |         lsl.l #3,d0
   166d2:	|  |  |         adda.l d0,a0
   166d4:	|  |  |         movea.l 4(a0),a0
   166d8:	|  |  |         move.l 8(sp),d0
   166dc:	|  |  |         addi.l #1073741823,d0
   166e2:	|  |  |         add.l d0,d0
   166e4:	|  |  |         add.l d0,d0
   166e6:	|  |  |         adda.l d0,a0
   166e8:	|  |  |         move.l (a0),d0
   166ea:	|  |  |         lsl.l #3,d0
   166ec:	|  |  |         movea.l d1,a0
   166ee:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   166f0:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   166f2:	|  |  |         movea.l 1ce7e <currentFloor>,a0
   166f8:	|  |  |         move.l 4(a0),d1
   166fc:	|  |  |         movea.l 1ce7e <currentFloor>,a0
   16702:	|  |  |         movea.l 12(a0),a0
   16706:	|  |  |         move.l 16(sp),d0
   1670a:	|  |  |         lsl.l #3,d0
   1670c:	|  |  |         adda.l d0,a0
   1670e:	|  |  |         movea.l 4(a0),a0
   16712:	|  |  |         move.l (a0),d0
   16714:	|  |  |         lsl.l #3,d0
   16716:	|  |  |         movea.l d1,a0
   16718:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   1671a:	|  |  |         move.l 4(a0),d1
   1671e:	|  |  |         movea.l 1ce7e <currentFloor>,a0
   16724:	|  |  |         move.l 4(a0),d3
   16728:	|  |  |         movea.l 1ce7e <currentFloor>,a0
   1672e:	|  |  |         movea.l 12(a0),a0
   16732:	|  |  |         move.l 16(sp),d0
   16736:	|  |  |         lsl.l #3,d0
   16738:	|  |  |         adda.l d0,a0
   1673a:	|  |  |         movea.l 4(a0),a0
   1673e:	|  |  |         move.l (a0),d0
   16740:	|  |  |         lsl.l #3,d0
   16742:	|  |  |         movea.l d3,a0
   16744:	|  |  |         adda.l d0,a0
   16746:	|  |  |         move.l (a0),d0
   16748:	|  |  |         move.l d2,-(sp)
   1674a:	|  |  |         move.l a1,-(sp)
   1674c:	|  |  |         move.l d1,-(sp)
   1674e:	|  |  |         move.l d0,-(sp)
   16750:	|  |  |         jsr 4928 <drawLine>
   16756:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   1675a:	|  |  '-------> addq.l #1,16(sp)
   1675e:	|  '----------> movea.l 1ce7e <currentFloor>,a0
   16764:	|               move.l 8(a0),d0
   16768:	|               cmp.l 16(sp),d0
   1676c:	'-------------- bgt.w 1654e <drawFloor+0x10>
        }
    }
}
   16770:	                nop
   16772:	                nop
   16774:	                move.l (sp)+,d2
   16776:	                move.l (sp)+,d3
   16778:	                lea 12(sp),sp
   1677c:	                rts

0001677e <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   1677e:	                      lea -12(sp),sp
    int sharedVertices = 0;
   16782:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   16786:	                      clr.l 4(sp)
   1678a:	   ,----------------- bra.w 1681c <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   1678e:	,--|----------------> clr.l (sp)
   16790:	|  |     ,----------- bra.s 1680c <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   16792:	|  |  ,--|----------> movea.l 16(sp),a0
   16796:	|  |  |  |            move.l 4(a0),d1
   1679a:	|  |  |  |            move.l 4(sp),d0
   1679e:	|  |  |  |            add.l d0,d0
   167a0:	|  |  |  |            add.l d0,d0
   167a2:	|  |  |  |            movea.l d1,a0
   167a4:	|  |  |  |            adda.l d0,a0
   167a6:	|  |  |  |            move.l (a0),d1
   167a8:	|  |  |  |            movea.l 20(sp),a0
   167ac:	|  |  |  |            movea.l 4(a0),a0
   167b0:	|  |  |  |            move.l (sp),d0
   167b2:	|  |  |  |            add.l d0,d0
   167b4:	|  |  |  |            add.l d0,d0
   167b6:	|  |  |  |            adda.l d0,a0
   167b8:	|  |  |  |            move.l (a0),d0
   167ba:	|  |  |  |            cmp.l d1,d0
   167bc:	|  |  |  |  ,-------- bne.s 1680a <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   167be:	|  |  |  |  |         move.l 8(sp),d0
   167c2:	|  |  |  |  |         move.l d0,d1
   167c4:	|  |  |  |  |         addq.l #1,d1
   167c6:	|  |  |  |  |         move.l d1,8(sp)
   167ca:	|  |  |  |  |         tst.l d0
   167cc:	|  |  |  |  |     ,-- beq.s 167ee <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   167ce:	|  |  |  |  |     |   movea.l 16(sp),a0
   167d2:	|  |  |  |  |     |   move.l 4(a0),d1
   167d6:	|  |  |  |  |     |   move.l 4(sp),d0
   167da:	|  |  |  |  |     |   add.l d0,d0
   167dc:	|  |  |  |  |     |   add.l d0,d0
   167de:	|  |  |  |  |     |   movea.l d1,a0
   167e0:	|  |  |  |  |     |   adda.l d0,a0
   167e2:	|  |  |  |  |     |   move.l (a0),d0
   167e4:	|  |  |  |  |     |   movea.l 28(sp),a0
   167e8:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   167ea:	|  |  |  |  |     |   moveq #1,d0
   167ec:	|  |  |  |  |  ,--|-- bra.s 1682c <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   167ee:	|  |  |  |  |  |  '-> movea.l 16(sp),a0
   167f2:	|  |  |  |  |  |      move.l 4(a0),d1
   167f6:	|  |  |  |  |  |      move.l 4(sp),d0
   167fa:	|  |  |  |  |  |      add.l d0,d0
   167fc:	|  |  |  |  |  |      add.l d0,d0
   167fe:	|  |  |  |  |  |      movea.l d1,a0
   16800:	|  |  |  |  |  |      adda.l d0,a0
   16802:	|  |  |  |  |  |      move.l (a0),d0
   16804:	|  |  |  |  |  |      movea.l 24(sp),a0
   16808:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   1680a:	|  |  |  |  '--|----> addq.l #1,(sp)
   1680c:	|  |  |  '-----|----> movea.l 20(sp),a0
   16810:	|  |  |        |      move.l (a0),d0
   16812:	|  |  |        |      cmp.l (sp),d0
   16814:	|  |  '--------|----- bgt.w 16792 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   16818:	|  |           |      addq.l #1,4(sp)
   1681c:	|  '-----------|----> movea.l 16(sp),a0
   16820:	|              |      move.l (a0),d0
   16822:	|              |      cmp.l 4(sp),d0
   16826:	'--------------|----- bgt.w 1678e <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   1682a:	               |      clr.w d0
}
   1682c:	               '----> lea 12(sp),sp
   16830:	                      rts

00016832 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   16832:	movea.l 1ce7e <currentFloor>,a0
   16838:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   1683c:	movea.l 1ce7e <currentFloor>,a0
   16842:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   16846:	movea.l 1ce7e <currentFloor>,a0
   1684c:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   16850:	movea.l 1ce7e <currentFloor>,a0
   16856:	clr.l 16(a0)
}
   1685a:	nop
   1685c:	rts

0001685e <inFloor>:

int inFloor (int x, int y) {
   1685e:	          subq.l #8,sp
	KPrintF("inFloor started\n");
   16860:	          pea 1a484 <talk.c.490538ff+0x45a>
   16866:	          jsr 17518 <KPrintF>
   1686c:	          addq.l #4,sp
	int i, r = -1;
   1686e:	          moveq #-1,d0
   16870:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   16872:	          clr.l 4(sp)
   16876:	   ,----- bra.s 168aa <inFloor+0x4c>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   16878:	,--|----> movea.l 1ce7e <currentFloor>,a0
   1687e:	|  |      move.l 12(a0),d1
   16882:	|  |      move.l 4(sp),d0
   16886:	|  |      lsl.l #3,d0
   16888:	|  |      add.l d1,d0
   1688a:	|  |      move.l 16(sp),-(sp)
   1688e:	|  |      move.l 16(sp),-(sp)
   16892:	|  |      move.l d0,-(sp)
   16894:	|  |      jsr 16a84 <pointInFloorPolygon>
   1689a:	|  |      lea 12(sp),sp
   1689e:	|  |      tst.w d0
   168a0:	|  |  ,-- beq.s 168a6 <inFloor+0x48>
			r = i;
   168a2:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   168a6:	|  |  '-> addq.l #1,4(sp)
   168aa:	|  '----> movea.l 1ce7e <currentFloor>,a0
   168b0:	|         move.l 8(a0),d0
   168b4:	|         cmp.l 4(sp),d0
   168b8:	'-------- bgt.s 16878 <inFloor+0x1a>

	KPrintF("infloor finished\n");
   168ba:	          pea 1a495 <talk.c.490538ff+0x46b>
   168c0:	          jsr 17518 <KPrintF>
   168c6:	          addq.l #4,sp
	return r;
   168c8:	          move.l (sp),d0
}
   168ca:	          addq.l #8,sp
   168cc:	          rts

000168ce <initFloor>:

BOOL initFloor () {
   168ce:	       lea -12(sp),sp
   168d2:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   168d4:	       moveq #20,d0
   168d6:	       move.l d0,12(sp)
   168da:	       clr.l 8(sp)
   168de:	       move.l 1cd66 <SysBase>,d0
   168e4:	       movea.l d0,a6
   168e6:	       move.l 12(sp),d0
   168ea:	       move.l 8(sp),d1
   168ee:	       jsr -684(a6)
   168f2:	       move.l d0,4(sp)
   168f6:	       move.l 4(sp),d0
   168fa:	       move.l d0,1ce7e <currentFloor>

    if(currentFloor == 0) {
   16900:	       move.l 1ce7e <currentFloor>,d0
   16906:	,----- bne.s 1691a <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   16908:	|      pea 1a4a7 <talk.c.490538ff+0x47d>
   1690e:	|      jsr 17518 <KPrintF>
   16914:	|      addq.l #4,sp
        return FALSE;
   16916:	|      clr.w d0
   16918:	|  ,-- bra.s 16922 <initFloor+0x54>
    }

	noFloor ();
   1691a:	'--|-> jsr 16832 <noFloor>
	return TRUE;
   16920:	   |   moveq #1,d0
}
   16922:	   '-> movea.l (sp)+,a6
   16924:	       lea 12(sp),sp
   16928:	       rts

0001692a <killFloor>:

void killFloor () {
   1692a:	       lea -24(sp),sp
   1692e:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16930:	       clr.l 24(sp)
   16934:	   ,-- bra.s 1698e <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   16936:	,--|-> movea.l 1ce7e <currentFloor>,a0
   1693c:	|  |   move.l 12(a0),d1
   16940:	|  |   move.l 24(sp),d0
   16944:	|  |   lsl.l #3,d0
   16946:	|  |   movea.l d1,a0
   16948:	|  |   adda.l d0,a0
   1694a:	|  |   move.l 4(a0),8(sp)
   16950:	|  |   move.l 1cd66 <SysBase>,d0
   16956:	|  |   movea.l d0,a6
   16958:	|  |   movea.l 8(sp),a1
   1695c:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   16960:	|  |   movea.l 1ce7e <currentFloor>,a0
   16966:	|  |   move.l 16(a0),d1
   1696a:	|  |   move.l 24(sp),d0
   1696e:	|  |   add.l d0,d0
   16970:	|  |   add.l d0,d0
   16972:	|  |   movea.l d1,a0
   16974:	|  |   adda.l d0,a0
   16976:	|  |   move.l (a0),4(sp)
   1697a:	|  |   move.l 1cd66 <SysBase>,d0
   16980:	|  |   movea.l d0,a6
   16982:	|  |   movea.l 4(sp),a1
   16986:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   1698a:	|  |   addq.l #1,24(sp)
   1698e:	|  '-> movea.l 1ce7e <currentFloor>,a0
   16994:	|      move.l 8(a0),d0
   16998:	|      cmp.l 24(sp),d0
   1699c:	'----- bgt.s 16936 <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   1699e:	       movea.l 1ce7e <currentFloor>,a0
   169a4:	       move.l 12(a0),20(sp)
   169aa:	       move.l 1cd66 <SysBase>,d0
   169b0:	       movea.l d0,a6
   169b2:	       movea.l 20(sp),a1
   169b6:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   169ba:	       movea.l 1ce7e <currentFloor>,a0
   169c0:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   169c4:	       movea.l 1ce7e <currentFloor>,a0
   169ca:	       move.l 4(a0),16(sp)
   169d0:	       move.l 1cd66 <SysBase>,d0
   169d6:	       movea.l d0,a6
   169d8:	       movea.l 16(sp),a1
   169dc:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   169e0:	       movea.l 1ce7e <currentFloor>,a0
   169e6:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   169ea:	       movea.l 1ce7e <currentFloor>,a0
   169f0:	       move.l 16(a0),12(sp)
   169f6:	       move.l 1cd66 <SysBase>,d0
   169fc:	       movea.l d0,a6
   169fe:	       movea.l 12(sp),a1
   16a02:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   16a06:	       movea.l 1ce7e <currentFloor>,a0
   16a0c:	       clr.l 16(a0)
}
   16a10:	       nop
   16a12:	       movea.l (sp)+,a6
   16a14:	       lea 24(sp),sp
   16a18:	       rts

00016a1a <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   16a1a:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16a1e:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16a22:	                   clr.l 4(sp)
   16a26:	   ,-------------- bra.s 16a72 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   16a28:	,--|-------------> clr.l (sp)
   16a2a:	|  |     ,-------- bra.s 16a66 <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   16a2c:	|  |  ,--|-------> move.l 20(sp),d1
   16a30:	|  |  |  |         move.l 4(sp),d0
   16a34:	|  |  |  |         add.l d0,d0
   16a36:	|  |  |  |         add.l d0,d0
   16a38:	|  |  |  |         movea.l d1,a0
   16a3a:	|  |  |  |         adda.l d0,a0
   16a3c:	|  |  |  |         move.l (a0),d1
   16a3e:	|  |  |  |         movea.l 28(sp),a0
   16a42:	|  |  |  |         move.l (sp),d0
   16a44:	|  |  |  |         add.l d0,d0
   16a46:	|  |  |  |         add.l d0,d0
   16a48:	|  |  |  |         adda.l d0,a0
   16a4a:	|  |  |  |         move.l (a0),d0
   16a4c:	|  |  |  |         cmp.l d1,d0
   16a4e:	|  |  |  |     ,-- bne.s 16a64 <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16a50:	|  |  |  |     |   move.l 8(sp),d0
   16a54:	|  |  |  |     |   move.l d0,d1
   16a56:	|  |  |  |     |   addq.l #1,d1
   16a58:	|  |  |  |     |   move.l d1,8(sp)
   16a5c:	|  |  |  |     |   tst.l d0
   16a5e:	|  |  |  |     +-- beq.s 16a64 <polysShareSide+0x4a>
   16a60:	|  |  |  |     |   moveq #1,d0
   16a62:	|  |  |  |  ,--|-- bra.s 16a7e <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   16a64:	|  |  |  |  |  '-> addq.l #1,(sp)
   16a66:	|  |  |  '--|----> move.l 24(sp),d0
   16a6a:	|  |  |     |      cmp.l (sp),d0
   16a6c:	|  |  '-----|----- bgt.s 16a2c <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   16a6e:	|  |        |      addq.l #1,4(sp)
   16a72:	|  '--------|----> move.l 16(sp),d0
   16a76:	|           |      cmp.l 4(sp),d0
   16a7a:	'-----------|----- bgt.s 16a28 <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   16a7c:	            |      clr.w d0
}
   16a7e:	            '----> lea 12(sp),sp
   16a82:	                   rts

00016a84 <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   16a84:	             lea -28(sp),sp
   16a88:	             move.l d3,-(sp)
   16a8a:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   16a8c:	             clr.l 32(sp)
   16a90:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16a94:	             movea.l 40(sp),a0
   16a98:	             move.l (a0),d0
   16a9a:	             move.l d0,d1
   16a9c:	             subq.l #1,d1
   16a9e:	             move.l d1,28(sp)
   16aa2:	   ,-------- bra.w 16c9c <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   16aa6:	,--|-------> movea.l 1ce7e <currentFloor>,a0
   16aac:	|  |         move.l 4(a0),d1
   16ab0:	|  |         movea.l 40(sp),a0
   16ab4:	|  |         movea.l 4(a0),a0
   16ab8:	|  |         move.l 32(sp),d0
   16abc:	|  |         add.l d0,d0
   16abe:	|  |         add.l d0,d0
   16ac0:	|  |         adda.l d0,a0
   16ac2:	|  |         move.l (a0),d0
   16ac4:	|  |         lsl.l #3,d0
   16ac6:	|  |         movea.l d1,a0
   16ac8:	|  |         adda.l d0,a0
   16aca:	|  |         move.l (a0),d0
   16acc:	|  |         move.l d0,-(sp)
   16ace:	|  |         jsr 1794a <__floatsisf>
   16ad4:	|  |         addq.l #4,sp
   16ad6:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16ada:	|  |         movea.l 1ce7e <currentFloor>,a0
   16ae0:	|  |         move.l 4(a0),d1
   16ae4:	|  |         movea.l 40(sp),a0
   16ae8:	|  |         movea.l 4(a0),a0
   16aec:	|  |         move.l 32(sp),d0
   16af0:	|  |         add.l d0,d0
   16af2:	|  |         add.l d0,d0
   16af4:	|  |         adda.l d0,a0
   16af6:	|  |         move.l (a0),d0
   16af8:	|  |         lsl.l #3,d0
   16afa:	|  |         movea.l d1,a0
   16afc:	|  |         adda.l d0,a0
   16afe:	|  |         move.l 4(a0),d0
   16b02:	|  |         move.l d0,-(sp)
   16b04:	|  |         jsr 1794a <__floatsisf>
   16b0a:	|  |         addq.l #4,sp
   16b0c:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16b10:	|  |         movea.l 1ce7e <currentFloor>,a0
   16b16:	|  |         move.l 4(a0),d1
   16b1a:	|  |         movea.l 40(sp),a0
   16b1e:	|  |         movea.l 4(a0),a0
   16b22:	|  |         move.l 28(sp),d0
   16b26:	|  |         add.l d0,d0
   16b28:	|  |         add.l d0,d0
   16b2a:	|  |         adda.l d0,a0
   16b2c:	|  |         move.l (a0),d0
   16b2e:	|  |         lsl.l #3,d0
   16b30:	|  |         movea.l d1,a0
   16b32:	|  |         adda.l d0,a0
   16b34:	|  |         move.l (a0),d0
   16b36:	|  |         move.l d0,-(sp)
   16b38:	|  |         jsr 1794a <__floatsisf>
   16b3e:	|  |         addq.l #4,sp
   16b40:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   16b44:	|  |         movea.l 1ce7e <currentFloor>,a0
   16b4a:	|  |         move.l 4(a0),d1
   16b4e:	|  |         movea.l 40(sp),a0
   16b52:	|  |         movea.l 4(a0),a0
   16b56:	|  |         move.l 28(sp),d0
   16b5a:	|  |         add.l d0,d0
   16b5c:	|  |         add.l d0,d0
   16b5e:	|  |         adda.l d0,a0
   16b60:	|  |         move.l (a0),d0
   16b62:	|  |         lsl.l #3,d0
   16b64:	|  |         movea.l d1,a0
   16b66:	|  |         adda.l d0,a0
   16b68:	|  |         move.l 4(a0),d0
   16b6c:	|  |         move.l d0,-(sp)
   16b6e:	|  |         jsr 1794a <__floatsisf>
   16b74:	|  |         addq.l #4,sp
   16b76:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16b7a:	|  |         move.l 48(sp),-(sp)
   16b7e:	|  |         jsr 1794a <__floatsisf>
   16b84:	|  |         addq.l #4,sp
   16b86:	|  |         move.l d0,-(sp)
   16b88:	|  |         move.l 20(sp),-(sp)
   16b8c:	|  |         jsr 17aec <__lesf2>
   16b92:	|  |         addq.l #8,sp
   16b94:	|  |         tst.l d0
   16b96:	|  |     ,-- bgt.s 16bb6 <pointInFloorPolygon+0x132>
   16b98:	|  |     |   move.l 48(sp),-(sp)
   16b9c:	|  |     |   jsr 1794a <__floatsisf>
   16ba2:	|  |     |   addq.l #4,sp
   16ba4:	|  |     |   move.l d0,-(sp)
   16ba6:	|  |     |   move.l 12(sp),-(sp)
   16baa:	|  |     |   jsr 17ab6 <__gtsf2>
   16bb0:	|  |     |   addq.l #8,sp
   16bb2:	|  |     |   tst.l d0
   16bb4:	|  |  ,--|-- bgt.s 16bf6 <pointInFloorPolygon+0x172>
   16bb6:	|  |  |  '-> move.l 48(sp),-(sp)
   16bba:	|  |  |      jsr 1794a <__floatsisf>
   16bc0:	|  |  |      addq.l #4,sp
   16bc2:	|  |  |      move.l d0,-(sp)
   16bc4:	|  |  |      move.l 12(sp),-(sp)
   16bc8:	|  |  |      jsr 17aec <__lesf2>
   16bce:	|  |  |      addq.l #8,sp
   16bd0:	|  |  |      tst.l d0
   16bd2:	|  |  |  ,-- bgt.w 16c8c <pointInFloorPolygon+0x208>
   16bd6:	|  |  |  |   move.l 48(sp),-(sp)
   16bda:	|  |  |  |   jsr 1794a <__floatsisf>
   16be0:	|  |  |  |   addq.l #4,sp
   16be2:	|  |  |  |   move.l d0,-(sp)
   16be4:	|  |  |  |   move.l 20(sp),-(sp)
   16be8:	|  |  |  |   jsr 17ab6 <__gtsf2>
   16bee:	|  |  |  |   addq.l #8,sp
   16bf0:	|  |  |  |   tst.l d0
   16bf2:	|  |  |  +-- ble.w 16c8c <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   16bf6:	|  |  '--|-> move.l 44(sp),-(sp)
   16bfa:	|  |     |   jsr 1794a <__floatsisf>
   16c00:	|  |     |   addq.l #4,sp
   16c02:	|  |     |   move.l d0,d3
   16c04:	|  |     |   move.l 20(sp),-(sp)
   16c08:	|  |     |   move.l 16(sp),-(sp)
   16c0c:	|  |     |   jsr 17c3e <__subsf3>
   16c12:	|  |     |   addq.l #8,sp
   16c14:	|  |     |   move.l d0,d2
   16c16:	|  |     |   move.l 48(sp),-(sp)
   16c1a:	|  |     |   jsr 1794a <__floatsisf>
   16c20:	|  |     |   addq.l #4,sp
   16c22:	|  |     |   move.l 16(sp),-(sp)
   16c26:	|  |     |   move.l d0,-(sp)
   16c28:	|  |     |   jsr 17c3e <__subsf3>
   16c2e:	|  |     |   addq.l #8,sp
   16c30:	|  |     |   move.l d0,-(sp)
   16c32:	|  |     |   move.l d2,-(sp)
   16c34:	|  |     |   jsr 179fc <__mulsf3>
   16c3a:	|  |     |   addq.l #8,sp
   16c3c:	|  |     |   move.l d0,d2
   16c3e:	|  |     |   move.l 16(sp),-(sp)
   16c42:	|  |     |   move.l 12(sp),-(sp)
   16c46:	|  |     |   jsr 17c3e <__subsf3>
   16c4c:	|  |     |   addq.l #8,sp
   16c4e:	|  |     |   move.l d0,-(sp)
   16c50:	|  |     |   move.l d2,-(sp)
   16c52:	|  |     |   jsr 17800 <__divsf3>
   16c58:	|  |     |   addq.l #8,sp
   16c5a:	|  |     |   move.l 20(sp),-(sp)
   16c5e:	|  |     |   move.l d0,-(sp)
   16c60:	|  |     |   jsr 17706 <__addsf3>
   16c66:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   16c68:	|  |     |   move.l d0,-(sp)
   16c6a:	|  |     |   move.l d3,-(sp)
   16c6c:	|  |     |   jsr 17b70 <__ltsf2>
   16c72:	|  |     |   addq.l #8,sp
   16c74:	|  |     |   tst.l d0
   16c76:	|  |     +-- bge.s 16c8c <pointInFloorPolygon+0x208>

			c = !c;
   16c78:	|  |     |   tst.l 24(sp)
   16c7c:	|  |     |   seq d0
   16c7e:	|  |     |   neg.b d0
   16c80:	|  |     |   move.b d0,d0
   16c82:	|  |     |   andi.l #255,d0
   16c88:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   16c8c:	|  |     '-> move.l 32(sp),d0
   16c90:	|  |         move.l d0,d1
   16c92:	|  |         addq.l #1,d1
   16c94:	|  |         move.l d1,32(sp)
   16c98:	|  |         move.l d0,28(sp)
   16c9c:	|  '-------> movea.l 40(sp),a0
   16ca0:	|            move.l (a0),d0
   16ca2:	|            cmp.l 32(sp),d0
   16ca6:	'----------- bgt.w 16aa6 <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   16caa:	             tst.l 24(sp)
   16cae:	             sne d0
   16cb0:	             neg.b d0
   16cb2:	             move.b d0,d0
   16cb4:	             andi.w #255,d0
}
   16cb8:	             move.l (sp)+,d2
   16cba:	             move.l (sp)+,d3
   16cbc:	             lea 28(sp),sp
   16cc0:	             rts

00016cc2 <setFloor>:

BOOL setFloor (int fileNum) {
   16cc2:	                               lea -132(sp),sp
   16cc6:	                               move.l a6,-(sp)
   16cc8:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16cca:	                               jsr 1692a <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16cd0:	                               move.l 144(sp),-(sp)
   16cd4:	                               jsr 794c <openFileFromNum>
   16cda:	                               addq.l #4,sp
   16cdc:	                               tst.l d0
   16cde:	                           ,-- bne.s 16ce6 <setFloor+0x24>
   16ce0:	                           |   clr.w d0
   16ce2:	,--------------------------|-- bra.w 17432 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   16ce6:	|                          '-> movea.l 1ce7e <currentFloor>,a0
   16cec:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16cf0:	|                              move.l 1cd4e <bigDataFile>,118(sp)
   16cf8:	|                              move.l 1cd6e <DOSBase>,d0
   16cfe:	|                              movea.l d0,a6
   16d00:	|                              move.l 118(sp),d1
   16d04:	|                              jsr -306(a6)
   16d08:	|                              move.l d0,114(sp)
   16d0c:	|                              move.l 114(sp),d0
   16d10:	|                              movea.l 1ce7e <currentFloor>,a0
   16d16:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16d1a:	|                              movea.l 1ce7e <currentFloor>,a0
   16d20:	|                              move.l 8(a0),d0
   16d24:	|                              lsl.l #3,d0
   16d26:	|                              move.l d0,110(sp)
   16d2a:	|                              clr.l 106(sp)
   16d2e:	|                              move.l 1cd66 <SysBase>,d0
   16d34:	|                              movea.l d0,a6
   16d36:	|                              move.l 110(sp),d0
   16d3a:	|                              move.l 106(sp),d1
   16d3e:	|                              jsr -684(a6)
   16d42:	|                              move.l d0,102(sp)
   16d46:	|                              move.l 102(sp),d0
   16d4a:	|                              movea.l 1ce7e <currentFloor>,a0
   16d50:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   16d54:	|                              movea.l 1ce7e <currentFloor>,a0
   16d5a:	|                              move.l 12(a0),d0
   16d5e:	|                          ,-- bne.s 16d74 <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   16d60:	|                          |   pea 1a4cb <talk.c.490538ff+0x4a1>
   16d66:	|                          |   jsr 17518 <KPrintF>
   16d6c:	|                          |   addq.l #4,sp
		return FALSE;
   16d6e:	|                          |   clr.w d0
   16d70:	+--------------------------|-- bra.w 17432 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16d74:	|                          '-> clr.l 136(sp)
   16d78:	|                    ,-------- bra.w 16e90 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   16d7c:	|                 ,--|-------> move.l 1cd4e <bigDataFile>,26(sp)
   16d84:	|                 |  |         move.l 1cd6e <DOSBase>,d0
   16d8a:	|                 |  |         movea.l d0,a6
   16d8c:	|                 |  |         move.l 26(sp),d1
   16d90:	|                 |  |         jsr -306(a6)
   16d94:	|                 |  |         move.l d0,22(sp)
   16d98:	|                 |  |         move.l 22(sp),d1
   16d9c:	|                 |  |         movea.l 1ce7e <currentFloor>,a0
   16da2:	|                 |  |         movea.l 12(a0),a0
   16da6:	|                 |  |         move.l 136(sp),d0
   16daa:	|                 |  |         lsl.l #3,d0
   16dac:	|                 |  |         adda.l d0,a0
   16dae:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   16db0:	|                 |  |         movea.l 1ce7e <currentFloor>,a0
   16db6:	|                 |  |         move.l 12(a0),d1
   16dba:	|                 |  |         move.l 136(sp),d0
   16dbe:	|                 |  |         lsl.l #3,d0
   16dc0:	|                 |  |         movea.l d1,a0
   16dc2:	|                 |  |         adda.l d0,a0
   16dc4:	|                 |  |         move.l (a0),d0
   16dc6:	|                 |  |         add.l d0,d0
   16dc8:	|                 |  |         add.l d0,d0
   16dca:	|                 |  |         move.l d0,18(sp)
   16dce:	|                 |  |         clr.l 14(sp)
   16dd2:	|                 |  |         move.l 1cd66 <SysBase>,d0
   16dd8:	|                 |  |         movea.l d0,a6
   16dda:	|                 |  |         move.l 18(sp),d0
   16dde:	|                 |  |         move.l 14(sp),d1
   16de2:	|                 |  |         jsr -684(a6)
   16de6:	|                 |  |         move.l d0,10(sp)
   16dea:	|                 |  |         move.l 10(sp),d1
   16dee:	|                 |  |         movea.l 1ce7e <currentFloor>,a0
   16df4:	|                 |  |         movea.l 12(a0),a0
   16df8:	|                 |  |         move.l 136(sp),d0
   16dfc:	|                 |  |         lsl.l #3,d0
   16dfe:	|                 |  |         adda.l d0,a0
   16e00:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   16e04:	|                 |  |         movea.l 1ce7e <currentFloor>,a0
   16e0a:	|                 |  |         move.l 12(a0),d1
   16e0e:	|                 |  |         move.l 136(sp),d0
   16e12:	|                 |  |         lsl.l #3,d0
   16e14:	|                 |  |         movea.l d1,a0
   16e16:	|                 |  |         adda.l d0,a0
   16e18:	|                 |  |         move.l 4(a0),d0
   16e1c:	|                 |  |     ,-- bne.s 16e32 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16e1e:	|                 |  |     |   pea 1a4cb <talk.c.490538ff+0x4a1>
   16e24:	|                 |  |     |   jsr 17518 <KPrintF>
   16e2a:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16e2c:	|                 |  |     |   clr.w d0
   16e2e:	+-----------------|--|-----|-- bra.w 17432 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16e32:	|                 |  |     '-> clr.l 132(sp)
   16e36:	|                 |  |     ,-- bra.s 16e70 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   16e38:	|                 |  |  ,--|-> move.l 1cd4e <bigDataFile>,d1
   16e3e:	|                 |  |  |  |   movea.l 1ce7e <currentFloor>,a0
   16e44:	|                 |  |  |  |   movea.l 12(a0),a0
   16e48:	|                 |  |  |  |   move.l 136(sp),d0
   16e4c:	|                 |  |  |  |   lsl.l #3,d0
   16e4e:	|                 |  |  |  |   adda.l d0,a0
   16e50:	|                 |  |  |  |   movea.l 4(a0),a0
   16e54:	|                 |  |  |  |   move.l 132(sp),d0
   16e58:	|                 |  |  |  |   add.l d0,d0
   16e5a:	|                 |  |  |  |   add.l d0,d0
   16e5c:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   16e60:	|                 |  |  |  |   move.l d1,-(sp)
   16e62:	|                 |  |  |  |   jsr 6bc <get2bytes>
   16e68:	|                 |  |  |  |   addq.l #4,sp
   16e6a:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16e6c:	|                 |  |  |  |   addq.l #1,132(sp)
   16e70:	|                 |  |  |  '-> movea.l 1ce7e <currentFloor>,a0
   16e76:	|                 |  |  |      move.l 12(a0),d1
   16e7a:	|                 |  |  |      move.l 136(sp),d0
   16e7e:	|                 |  |  |      lsl.l #3,d0
   16e80:	|                 |  |  |      movea.l d1,a0
   16e82:	|                 |  |  |      adda.l d0,a0
   16e84:	|                 |  |  |      move.l (a0),d0
   16e86:	|                 |  |  |      cmp.l 132(sp),d0
   16e8a:	|                 |  |  '----- bgt.s 16e38 <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16e8c:	|                 |  |         addq.l #1,136(sp)
   16e90:	|                 |  '-------> movea.l 1ce7e <currentFloor>,a0
   16e96:	|                 |            move.l 8(a0),d0
   16e9a:	|                 |            cmp.l 136(sp),d0
   16e9e:	|                 '----------- bgt.w 16d7c <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   16ea2:	|                              move.l 1cd4e <bigDataFile>,d0
   16ea8:	|                              move.l d0,-(sp)
   16eaa:	|                              jsr 6bc <get2bytes>
   16eb0:	|                              addq.l #4,sp
   16eb2:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   16eb6:	|                              move.l 136(sp),d0
   16eba:	|                              lsl.l #3,d0
   16ebc:	|                              move.l d0,98(sp)
   16ec0:	|                              clr.l 94(sp)
   16ec4:	|                              move.l 1cd66 <SysBase>,d0
   16eca:	|                              movea.l d0,a6
   16ecc:	|                              move.l 98(sp),d0
   16ed0:	|                              move.l 94(sp),d1
   16ed4:	|                              jsr -684(a6)
   16ed8:	|                              move.l d0,90(sp)
   16edc:	|                              move.l 90(sp),d0
   16ee0:	|                              movea.l 1ce7e <currentFloor>,a0
   16ee6:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16eea:	|                              movea.l 1ce7e <currentFloor>,a0
   16ef0:	|                              move.l 4(a0),d0
   16ef4:	|                          ,-- bne.s 16f0a <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   16ef6:	|                          |   pea 1a4cb <talk.c.490538ff+0x4a1>
   16efc:	|                          |   jsr 17518 <KPrintF>
   16f02:	|                          |   addq.l #4,sp
		return FALSE;
   16f04:	|                          |   clr.w d0
   16f06:	+--------------------------|-- bra.w 17432 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16f0a:	|                          '-> clr.l 132(sp)
   16f0e:	|                          ,-- bra.s 16f62 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16f10:	|                       ,--|-> move.l 1cd4e <bigDataFile>,d1
   16f16:	|                       |  |   movea.l 1ce7e <currentFloor>,a0
   16f1c:	|                       |  |   movea.l 4(a0),a0
   16f20:	|                       |  |   move.l 132(sp),d0
   16f24:	|                       |  |   lsl.l #3,d0
   16f26:	|                       |  |   lea (0,a0,d0.l),a2
   16f2a:	|                       |  |   move.l d1,-(sp)
   16f2c:	|                       |  |   jsr 6bc <get2bytes>
   16f32:	|                       |  |   addq.l #4,sp
   16f34:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   16f36:	|                       |  |   move.l 1cd4e <bigDataFile>,d1
   16f3c:	|                       |  |   movea.l 1ce7e <currentFloor>,a0
   16f42:	|                       |  |   movea.l 4(a0),a0
   16f46:	|                       |  |   move.l 132(sp),d0
   16f4a:	|                       |  |   lsl.l #3,d0
   16f4c:	|                       |  |   lea (0,a0,d0.l),a2
   16f50:	|                       |  |   move.l d1,-(sp)
   16f52:	|                       |  |   jsr 6bc <get2bytes>
   16f58:	|                       |  |   addq.l #4,sp
   16f5a:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   16f5e:	|                       |  |   addq.l #1,132(sp)
   16f62:	|                       |  '-> move.l 132(sp),d0
   16f66:	|                       |      cmp.l 136(sp),d0
   16f6a:	|                       '----- blt.s 16f10 <setFloor+0x24e>
	}

	finishAccess ();
   16f6c:	|                              jsr 7844 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16f72:	|                              movea.l 1ce7e <currentFloor>,a0
   16f78:	|                              move.l 8(a0),d0
   16f7c:	|                              add.l d0,d0
   16f7e:	|                              add.l d0,d0
   16f80:	|                              move.l d0,86(sp)
   16f84:	|                              clr.l 82(sp)
   16f88:	|                              move.l 1cd66 <SysBase>,d0
   16f8e:	|                              movea.l d0,a6
   16f90:	|                              move.l 86(sp),d0
   16f94:	|                              move.l 82(sp),d1
   16f98:	|                              jsr -684(a6)
   16f9c:	|                              move.l d0,78(sp)
   16fa0:	|                              move.l 78(sp),d0
   16fa4:	|                              movea.l 1ce7e <currentFloor>,a0
   16faa:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   16fae:	|                              movea.l 1ce7e <currentFloor>,a0
   16fb4:	|                              move.l 8(a0),d0
   16fb8:	|                              add.l d0,d0
   16fba:	|                              add.l d0,d0
   16fbc:	|                              move.l d0,74(sp)
   16fc0:	|                              clr.l 70(sp)
   16fc4:	|                              move.l 1cd66 <SysBase>,d0
   16fca:	|                              movea.l d0,a6
   16fcc:	|                              move.l 74(sp),d0
   16fd0:	|                              move.l 70(sp),d1
   16fd4:	|                              jsr -684(a6)
   16fd8:	|                              move.l d0,66(sp)
   16fdc:	|                              move.l 66(sp),d0
   16fe0:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   16fe4:	|                              movea.l 1ce7e <currentFloor>,a0
   16fea:	|                              move.l 16(a0),d0
   16fee:	|                          ,-- bne.s 17004 <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16ff0:	|                          |   pea 1a4cb <talk.c.490538ff+0x4a1>
   16ff6:	|                          |   jsr 17518 <KPrintF>
   16ffc:	|                          |   addq.l #4,sp
		return FALSE;
   16ffe:	|                          |   clr.w d0
   17000:	+--------------------------|-- bra.w 17432 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17004:	|                          '-> clr.l 136(sp)
   17008:	|                    ,-------- bra.w 1712c <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1700c:	|                 ,--|-------> movea.l 1ce7e <currentFloor>,a0
   17012:	|                 |  |         move.l 8(a0),d0
   17016:	|                 |  |         add.l d0,d0
   17018:	|                 |  |         add.l d0,d0
   1701a:	|                 |  |         move.l d0,50(sp)
   1701e:	|                 |  |         clr.l 46(sp)
   17022:	|                 |  |         move.l 1cd66 <SysBase>,d0
   17028:	|                 |  |         movea.l d0,a6
   1702a:	|                 |  |         move.l 50(sp),d0
   1702e:	|                 |  |         move.l 46(sp),d1
   17032:	|                 |  |         jsr -684(a6)
   17036:	|                 |  |         move.l d0,42(sp)
   1703a:	|                 |  |         move.l 42(sp),d0
   1703e:	|                 |  |         movea.l 1ce7e <currentFloor>,a0
   17044:	|                 |  |         movea.l 16(a0),a0
   17048:	|                 |  |         move.l 136(sp),d1
   1704c:	|                 |  |         add.l d1,d1
   1704e:	|                 |  |         add.l d1,d1
   17050:	|                 |  |         adda.l d1,a0
   17052:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   17054:	|                 |  |         movea.l 1ce7e <currentFloor>,a0
   1705a:	|                 |  |         move.l 8(a0),d0
   1705e:	|                 |  |         add.l d0,d0
   17060:	|                 |  |         add.l d0,d0
   17062:	|                 |  |         move.l d0,38(sp)
   17066:	|                 |  |         clr.l 34(sp)
   1706a:	|                 |  |         move.l 1cd66 <SysBase>,d0
   17070:	|                 |  |         movea.l d0,a6
   17072:	|                 |  |         move.l 38(sp),d0
   17076:	|                 |  |         move.l 34(sp),d1
   1707a:	|                 |  |         jsr -684(a6)
   1707e:	|                 |  |         move.l d0,30(sp)
   17082:	|                 |  |         move.l 30(sp),d1
   17086:	|                 |  |         move.l 136(sp),d0
   1708a:	|                 |  |         add.l d0,d0
   1708c:	|                 |  |         add.l d0,d0
   1708e:	|                 |  |         movea.l 62(sp),a0
   17092:	|                 |  |         adda.l d0,a0
   17094:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   17096:	|                 |  |         movea.l 1ce7e <currentFloor>,a0
   1709c:	|                 |  |         move.l 16(a0),d1
   170a0:	|                 |  |         move.l 136(sp),d0
   170a4:	|                 |  |         add.l d0,d0
   170a6:	|                 |  |         add.l d0,d0
   170a8:	|                 |  |         movea.l d1,a0
   170aa:	|                 |  |         adda.l d0,a0
   170ac:	|                 |  |         move.l (a0),d0
   170ae:	|                 |  |     ,-- bne.s 170c4 <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   170b0:	|                 |  |     |   pea 1a4cb <talk.c.490538ff+0x4a1>
   170b6:	|                 |  |     |   jsr 17518 <KPrintF>
   170bc:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   170be:	|                 |  |     |   clr.w d0
   170c0:	+-----------------|--|-----|-- bra.w 17432 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   170c4:	|                 |  |     '-> clr.l 132(sp)
   170c8:	|                 |  |     ,-- bra.s 17118 <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   170ca:	|                 |  |  ,--|-> movea.l 1ce7e <currentFloor>,a0
   170d0:	|                 |  |  |  |   move.l 16(a0),d1
   170d4:	|                 |  |  |  |   move.l 136(sp),d0
   170d8:	|                 |  |  |  |   add.l d0,d0
   170da:	|                 |  |  |  |   add.l d0,d0
   170dc:	|                 |  |  |  |   movea.l d1,a0
   170de:	|                 |  |  |  |   adda.l d0,a0
   170e0:	|                 |  |  |  |   move.l (a0),d1
   170e2:	|                 |  |  |  |   move.l 132(sp),d0
   170e6:	|                 |  |  |  |   add.l d0,d0
   170e8:	|                 |  |  |  |   add.l d0,d0
   170ea:	|                 |  |  |  |   movea.l d1,a0
   170ec:	|                 |  |  |  |   adda.l d0,a0
   170ee:	|                 |  |  |  |   moveq #-1,d1
   170f0:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   170f2:	|                 |  |  |  |   move.l 136(sp),d0
   170f6:	|                 |  |  |  |   add.l d0,d0
   170f8:	|                 |  |  |  |   add.l d0,d0
   170fa:	|                 |  |  |  |   movea.l 62(sp),a0
   170fe:	|                 |  |  |  |   adda.l d0,a0
   17100:	|                 |  |  |  |   move.l (a0),d1
   17102:	|                 |  |  |  |   move.l 132(sp),d0
   17106:	|                 |  |  |  |   add.l d0,d0
   17108:	|                 |  |  |  |   add.l d0,d0
   1710a:	|                 |  |  |  |   movea.l d1,a0
   1710c:	|                 |  |  |  |   adda.l d0,a0
   1710e:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17114:	|                 |  |  |  |   addq.l #1,132(sp)
   17118:	|                 |  |  |  '-> movea.l 1ce7e <currentFloor>,a0
   1711e:	|                 |  |  |      move.l 8(a0),d0
   17122:	|                 |  |  |      cmp.l 132(sp),d0
   17126:	|                 |  |  '----- bgt.s 170ca <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17128:	|                 |  |         addq.l #1,136(sp)
   1712c:	|                 |  '-------> movea.l 1ce7e <currentFloor>,a0
   17132:	|                 |            move.l 8(a0),d0
   17136:	|                 |            cmp.l 136(sp),d0
   1713a:	|                 '----------- bgt.w 1700c <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1713e:	|                              clr.l 136(sp)
   17142:	|              ,-------------- bra.w 17248 <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   17146:	|           ,--|-------------> clr.l 132(sp)
   1714a:	|           |  |     ,-------- bra.w 17232 <setFloor+0x570>
			if (i != j) {
   1714e:	|           |  |  ,--|-------> move.l 136(sp),d0
   17152:	|           |  |  |  |         cmp.l 132(sp),d0
   17156:	|           |  |  |  |     ,-- beq.w 171e8 <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   1715a:	|           |  |  |  |     |   movea.l 1ce7e <currentFloor>,a0
   17160:	|           |  |  |  |     |   move.l 12(a0),d1
   17164:	|           |  |  |  |     |   move.l 132(sp),d0
   17168:	|           |  |  |  |     |   lsl.l #3,d0
   1716a:	|           |  |  |  |     |   movea.l d1,a1
   1716c:	|           |  |  |  |     |   adda.l d0,a1
   1716e:	|           |  |  |  |     |   movea.l 1ce7e <currentFloor>,a0
   17174:	|           |  |  |  |     |   move.l 12(a0),d1
   17178:	|           |  |  |  |     |   move.l 136(sp),d0
   1717c:	|           |  |  |  |     |   lsl.l #3,d0
   1717e:	|           |  |  |  |     |   movea.l d1,a0
   17180:	|           |  |  |  |     |   adda.l d0,a0
   17182:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   17186:	|           |  |  |  |     |   move.l (a1),-(sp)
   17188:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   1718c:	|           |  |  |  |     |   move.l (a0),-(sp)
   1718e:	|           |  |  |  |     |   jsr 16a1a <polysShareSide>
   17194:	|           |  |  |  |     |   lea 16(sp),sp
   17198:	|           |  |  |  |     |   tst.w d0
   1719a:	|           |  |  |  |  ,--|-- beq.w 1722e <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   1719e:	|           |  |  |  |  |  |   movea.l 1ce7e <currentFloor>,a0
   171a4:	|           |  |  |  |  |  |   move.l 16(a0),d1
   171a8:	|           |  |  |  |  |  |   move.l 136(sp),d0
   171ac:	|           |  |  |  |  |  |   add.l d0,d0
   171ae:	|           |  |  |  |  |  |   add.l d0,d0
   171b0:	|           |  |  |  |  |  |   movea.l d1,a0
   171b2:	|           |  |  |  |  |  |   adda.l d0,a0
   171b4:	|           |  |  |  |  |  |   move.l (a0),d1
   171b6:	|           |  |  |  |  |  |   move.l 132(sp),d0
   171ba:	|           |  |  |  |  |  |   add.l d0,d0
   171bc:	|           |  |  |  |  |  |   add.l d0,d0
   171be:	|           |  |  |  |  |  |   movea.l d1,a0
   171c0:	|           |  |  |  |  |  |   adda.l d0,a0
   171c2:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   171c6:	|           |  |  |  |  |  |   move.l 136(sp),d0
   171ca:	|           |  |  |  |  |  |   add.l d0,d0
   171cc:	|           |  |  |  |  |  |   add.l d0,d0
   171ce:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   171d2:	|           |  |  |  |  |  |   adda.l d0,a0
   171d4:	|           |  |  |  |  |  |   move.l (a0),d1
   171d6:	|           |  |  |  |  |  |   move.l 132(sp),d0
   171da:	|           |  |  |  |  |  |   add.l d0,d0
   171dc:	|           |  |  |  |  |  |   add.l d0,d0
   171de:	|           |  |  |  |  |  |   movea.l d1,a0
   171e0:	|           |  |  |  |  |  |   adda.l d0,a0
   171e2:	|           |  |  |  |  |  |   moveq #1,d1
   171e4:	|           |  |  |  |  |  |   move.l d1,(a0)
   171e6:	|           |  |  |  |  +--|-- bra.s 1722e <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   171e8:	|           |  |  |  |  |  '-> movea.l 1ce7e <currentFloor>,a0
   171ee:	|           |  |  |  |  |      move.l 16(a0),d1
   171f2:	|           |  |  |  |  |      move.l 136(sp),d0
   171f6:	|           |  |  |  |  |      add.l d0,d0
   171f8:	|           |  |  |  |  |      add.l d0,d0
   171fa:	|           |  |  |  |  |      movea.l d1,a0
   171fc:	|           |  |  |  |  |      adda.l d0,a0
   171fe:	|           |  |  |  |  |      move.l (a0),d1
   17200:	|           |  |  |  |  |      move.l 132(sp),d0
   17204:	|           |  |  |  |  |      add.l d0,d0
   17206:	|           |  |  |  |  |      add.l d0,d0
   17208:	|           |  |  |  |  |      movea.l d1,a0
   1720a:	|           |  |  |  |  |      adda.l d0,a0
   1720c:	|           |  |  |  |  |      moveq #-2,d0
   1720e:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   17210:	|           |  |  |  |  |      move.l 136(sp),d0
   17214:	|           |  |  |  |  |      add.l d0,d0
   17216:	|           |  |  |  |  |      add.l d0,d0
   17218:	|           |  |  |  |  |      movea.l 62(sp),a0
   1721c:	|           |  |  |  |  |      adda.l d0,a0
   1721e:	|           |  |  |  |  |      move.l (a0),d1
   17220:	|           |  |  |  |  |      move.l 132(sp),d0
   17224:	|           |  |  |  |  |      add.l d0,d0
   17226:	|           |  |  |  |  |      add.l d0,d0
   17228:	|           |  |  |  |  |      movea.l d1,a0
   1722a:	|           |  |  |  |  |      adda.l d0,a0
   1722c:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1722e:	|           |  |  |  |  '----> addq.l #1,132(sp)
   17232:	|           |  |  |  '-------> movea.l 1ce7e <currentFloor>,a0
   17238:	|           |  |  |            move.l 8(a0),d0
   1723c:	|           |  |  |            cmp.l 132(sp),d0
   17240:	|           |  |  '----------- bgt.w 1714e <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17244:	|           |  |               addq.l #1,136(sp)
   17248:	|           |  '-------------> movea.l 1ce7e <currentFloor>,a0
   1724e:	|           |                  move.l 8(a0),d0
   17252:	|           |                  cmp.l 136(sp),d0
   17256:	|           '----------------- bgt.w 17146 <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   1725a:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   1725e:	|  ,-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   17262:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17266:	|  |                           clr.l 136(sp)
   1726a:	|  |     ,-------------------- bra.w 173c0 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1726e:	|  |  ,--|-------------------> clr.l 132(sp)
   17272:	|  |  |  |     ,-------------- bra.w 173aa <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   17276:	|  |  |  |  ,--|-------------> movea.l 1ce7e <currentFloor>,a0
   1727c:	|  |  |  |  |  |               move.l 16(a0),d1
   17280:	|  |  |  |  |  |               move.l 136(sp),d0
   17284:	|  |  |  |  |  |               add.l d0,d0
   17286:	|  |  |  |  |  |               add.l d0,d0
   17288:	|  |  |  |  |  |               movea.l d1,a0
   1728a:	|  |  |  |  |  |               adda.l d0,a0
   1728c:	|  |  |  |  |  |               move.l (a0),d1
   1728e:	|  |  |  |  |  |               move.l 132(sp),d0
   17292:	|  |  |  |  |  |               add.l d0,d0
   17294:	|  |  |  |  |  |               add.l d0,d0
   17296:	|  |  |  |  |  |               movea.l d1,a0
   17298:	|  |  |  |  |  |               adda.l d0,a0
   1729a:	|  |  |  |  |  |               move.l (a0),d0
   1729c:	|  |  |  |  |  |               moveq #-1,d1
   1729e:	|  |  |  |  |  |               cmp.l d0,d1
   172a0:	|  |  |  |  |  |  ,----------- bne.w 173a6 <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   172a4:	|  |  |  |  |  |  |            clr.l 122(sp)
   172a8:	|  |  |  |  |  |  |     ,----- bra.w 17394 <setFloor+0x6d2>
						if (d != i && d != j) {
   172ac:	|  |  |  |  |  |  |  ,--|----> move.l 122(sp),d0
   172b0:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   172b4:	|  |  |  |  |  |  |  |  |  ,-- beq.w 17390 <setFloor+0x6ce>
   172b8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   172bc:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   172c0:	|  |  |  |  |  |  |  |  |  +-- beq.w 17390 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   172c4:	|  |  |  |  |  |  |  |  |  |   movea.l 1ce7e <currentFloor>,a0
   172ca:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   172ce:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   172d2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   172d4:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   172d6:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   172d8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   172da:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   172dc:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   172e0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   172e2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   172e4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   172e6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   172e8:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   172ea:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   172ee:	|  |  |  |  |  |  |  |  |  +-- bne.w 17390 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   172f2:	|  |  |  |  |  |  |  |  |  |   movea.l 1ce7e <currentFloor>,a0
   172f8:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   172fc:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   17300:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17302:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17304:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17306:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17308:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1730a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1730e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17310:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17312:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17314:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17316:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   17318:	|  |  |  |  |  |  |  |  |  +-- bmi.s 17390 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   1731a:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   1731e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17320:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17322:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17326:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17328:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   1732a:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1732e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17330:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17332:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17334:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17336:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   17338:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   1733c:	|  |  |  |  |  |  |  |  |  +-- bgt.s 17390 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   1733e:	|  |  |  |  |  |  |  |  |  |   movea.l 1ce7e <currentFloor>,a0
   17344:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   17348:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1734c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1734e:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   17350:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17352:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17354:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17356:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1735a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1735c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1735e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17360:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17362:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   17366:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   1736a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1736c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1736e:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   17372:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17374:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   17376:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   1737a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1737c:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   1737e:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   17380:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   17382:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   17386:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   17388:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   1738a:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   17390:	|  |  |  |  |  |  |  |  |  '-> addq.l #1,122(sp)
   17394:	|  |  |  |  |  |  |  |  '----> movea.l 1ce7e <currentFloor>,a0
   1739a:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   1739e:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   173a2:	|  |  |  |  |  |  |  '-------- bgt.w 172ac <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   173a6:	|  |  |  |  |  |  '----------> addq.l #1,132(sp)
   173aa:	|  |  |  |  |  '-------------> movea.l 1ce7e <currentFloor>,a0
   173b0:	|  |  |  |  |                  move.l 8(a0),d0
   173b4:	|  |  |  |  |                  cmp.l 132(sp),d0
   173b8:	|  |  |  |  '----------------- bgt.w 17276 <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   173bc:	|  |  |  |                     addq.l #1,136(sp)
   173c0:	|  |  |  '-------------------> movea.l 1ce7e <currentFloor>,a0
   173c6:	|  |  |                        move.l 8(a0),d0
   173ca:	|  |  |                        cmp.l 136(sp),d0
   173ce:	|  |  '----------------------- bgt.w 1726e <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   173d2:	|  |                           tst.w 130(sp)
   173d6:	|  '-------------------------- bne.w 1725e <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   173da:	|                              clr.l 136(sp)
   173de:	|                          ,-- bra.s 17406 <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   173e0:	|                       ,--|-> move.l 136(sp),d0
   173e4:	|                       |  |   add.l d0,d0
   173e6:	|                       |  |   add.l d0,d0
   173e8:	|                       |  |   movea.l 62(sp),a0
   173ec:	|                       |  |   adda.l d0,a0
   173ee:	|                       |  |   move.l (a0),54(sp)
   173f2:	|                       |  |   move.l 1cd66 <SysBase>,d0
   173f8:	|                       |  |   movea.l d0,a6
   173fa:	|                       |  |   movea.l 54(sp),a1
   173fe:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   17402:	|                       |  |   addq.l #1,136(sp)
   17406:	|                       |  '-> movea.l 1ce7e <currentFloor>,a0
   1740c:	|                       |      move.l 8(a0),d0
   17410:	|                       |      cmp.l 136(sp),d0
   17414:	|                       '----- bgt.s 173e0 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   17416:	|                              move.l 62(sp),58(sp)
   1741c:	|                              move.l 1cd66 <SysBase>,d0
   17422:	|                              movea.l d0,a6
   17424:	|                              movea.l 58(sp),a1
   17428:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   1742c:	|                              clr.l 62(sp)

	return TRUE;
   17430:	|                              moveq #1,d0
}
   17432:	'----------------------------> movea.l (sp)+,a2
   17434:	                               movea.l (sp)+,a6
   17436:	                               lea 132(sp),sp
   1743a:	                               rts

0001743c <setFloorNull>:

void setFloorNull () {
	killFloor ();
   1743c:	jsr 1692a <killFloor>
	noFloor ();
   17442:	jsr 16832 <noFloor>
   17448:	nop
   1744a:	rts

0001744c <WaitVbl>:
void WaitVbl() {
   1744c:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1744e:	   ,-> movea.l #14675972,a0
   17454:	   |   move.l (a0),d0
   17456:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   17458:	   |   move.l (sp),d0
   1745a:	   |   andi.l #130816,d0
   17460:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   17462:	   |   move.l (sp),d0
   17464:	   |   cmpi.l #76800,d0
   1746a:	   '-- beq.s 1744e <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   1746c:	,----> movea.l #14675972,a0
   17472:	|      move.l (a0),d0
   17474:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   17478:	|      move.l 4(sp),d0
   1747c:	|      andi.l #130816,d0
   17482:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   17486:	|      move.l 4(sp),d0
   1748a:	|      cmpi.l #76800,d0
   17490:	|  ,-- beq.s 17494 <WaitVbl+0x48>
	while (1) {
   17492:	'--|-- bra.s 1746c <WaitVbl+0x20>
			break;
   17494:	   '-> nop
}
   17496:	       nop
   17498:	       addq.l #8,sp
   1749a:	       rts

0001749c <memset>:
void* memset(void *dest, int val, unsigned long len) {
   1749c:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   1749e:	       move.l 8(sp),(sp)
	while(len-- > 0)
   174a2:	   ,-- bra.s 174b4 <memset+0x18>
		*ptr++ = val;
   174a4:	,--|-> move.l (sp),d0
   174a6:	|  |   move.l d0,d1
   174a8:	|  |   addq.l #1,d1
   174aa:	|  |   move.l d1,(sp)
   174ac:	|  |   move.l 12(sp),d1
   174b0:	|  |   movea.l d0,a0
   174b2:	|  |   move.b d1,(a0)
	while(len-- > 0)
   174b4:	|  '-> move.l 16(sp),d0
   174b8:	|      move.l d0,d1
   174ba:	|      subq.l #1,d1
   174bc:	|      move.l d1,16(sp)
   174c0:	|      tst.l d0
   174c2:	'----- bne.s 174a4 <memset+0x8>
	return dest;
   174c4:	       move.l 8(sp),d0
}
   174c8:	       addq.l #4,sp
   174ca:	       rts

000174cc <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   174cc:	       subq.l #8,sp
   174ce:	       move.l d2,-(sp)
	char *d = (char *)dest;
   174d0:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   174d6:	       move.l 20(sp),4(sp)
	while(len--)
   174dc:	   ,-- bra.s 174fe <memcpy+0x32>
		*d++ = *s++;
   174de:	,--|-> move.l 4(sp),d1
   174e2:	|  |   move.l d1,d0
   174e4:	|  |   addq.l #1,d0
   174e6:	|  |   move.l d0,4(sp)
   174ea:	|  |   move.l 8(sp),d0
   174ee:	|  |   move.l d0,d2
   174f0:	|  |   addq.l #1,d2
   174f2:	|  |   move.l d2,8(sp)
   174f6:	|  |   movea.l d1,a0
   174f8:	|  |   move.b (a0),d1
   174fa:	|  |   movea.l d0,a0
   174fc:	|  |   move.b d1,(a0)
	while(len--)
   174fe:	|  '-> move.l 24(sp),d0
   17502:	|      move.l d0,d1
   17504:	|      subq.l #1,d1
   17506:	|      move.l d1,24(sp)
   1750a:	|      tst.l d0
   1750c:	'----- bne.s 174de <memcpy+0x12>
	return dest;
   1750e:	       move.l 16(sp),d0
}
   17512:	       move.l (sp)+,d2
   17514:	       addq.l #8,sp
   17516:	       rts

00017518 <KPrintF>:
void KPrintF(const char* fmt, ...) {
   17518:	       lea -128(sp),sp
   1751c:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17520:	       move.w f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4504>,d0
   17526:	       cmpi.w #20153,d0
   1752a:	   ,-- beq.s 1754e <KPrintF+0x36>
   1752c:	   |   cmpi.w #-24562,d0
   17530:	   +-- beq.s 1754e <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   17532:	   |   movea.l 1cd66 <SysBase>,a6
   17538:	   |   movea.l 144(sp),a0
   1753c:	   |   lea 148(sp),a1
   17540:	   |   lea 17fac <KPutCharX>,a2
   17546:	   |   suba.l a3,a3
   17548:	   |   jsr -522(a6)
}
   1754c:	,--|-- bra.s 17578 <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   1754e:	|  '-> movea.l 1cd66 <SysBase>,a6
   17554:	|      movea.l 144(sp),a0
   17558:	|      lea 148(sp),a1
   1755c:	|      lea 17fba <PutChar>,a2
   17562:	|      lea 12(sp),a3
   17566:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   1756a:	|      move.l a3,-(sp)
   1756c:	|      pea 56 <_start+0x56>
   17570:	|      jsr f0ff60 <gcc8_c_support.c.c60c1f2b+0xec4504>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   17576:	|      addq.l #8,sp
}
   17578:	'----> movem.l (sp)+,a2-a3/a6
   1757c:	       lea 128(sp),sp
   17580:	       rts

00017582 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   17582:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   17584:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   1758a:	       movea.l (sp),a0
   1758c:	       move.w (a0),d0
   1758e:	       cmpi.w #20153,d0
   17592:	   ,-- beq.s 1759e <debug_cmd+0x1c>
   17594:	   |   movea.l (sp),a0
   17596:	   |   move.w (a0),d0
   17598:	   |   cmpi.w #-24562,d0
   1759c:	,--|-- bne.s 175bc <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   1759e:	|  '-> move.l 20(sp),-(sp)
   175a2:	|      move.l 20(sp),-(sp)
   175a6:	|      move.l 20(sp),-(sp)
   175aa:	|      move.l 20(sp),-(sp)
   175ae:	|      pea 58 <_start+0x58>
   175b2:	|      movea.l 20(sp),a0
   175b6:	|      jsr (a0)
   175b8:	|      lea 20(sp),sp
	}
}
   175bc:	'----> nop
   175be:	       addq.l #4,sp
   175c0:	       rts

000175c2 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   175c2:	       move.l d2,-(sp)
	while(*source && --num > 0)
   175c4:	   ,-- bra.s 175e6 <my_strncpy+0x24>
		*destination++ = *source++;
   175c6:	,--|-> move.l 12(sp),d1
   175ca:	|  |   move.l d1,d0
   175cc:	|  |   addq.l #1,d0
   175ce:	|  |   move.l d0,12(sp)
   175d2:	|  |   move.l 8(sp),d0
   175d6:	|  |   move.l d0,d2
   175d8:	|  |   addq.l #1,d2
   175da:	|  |   move.l d2,8(sp)
   175de:	|  |   movea.l d1,a0
   175e0:	|  |   move.b (a0),d1
   175e2:	|  |   movea.l d0,a0
   175e4:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   175e6:	|  '-> movea.l 12(sp),a0
   175ea:	|      move.b (a0),d0
   175ec:	|  ,-- beq.s 175f4 <my_strncpy+0x32>
   175ee:	|  |   subq.l #1,16(sp)
   175f2:	'--|-- bne.s 175c6 <my_strncpy+0x4>
	*destination = '\0';
   175f4:	   '-> movea.l 8(sp),a0
   175f8:	       clr.b (a0)
}
   175fa:	       nop
   175fc:	       move.l (sp)+,d2
   175fe:	       rts

00017600 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   17600:	    lea -60(sp),sp
   17604:	    movea.l 72(sp),a1
   17608:	    movea.l 76(sp),a0
   1760c:	    move.l 80(sp),d1
   17610:	    move.l 84(sp),d0
   17614:	    movea.w a1,a1
   17616:	    move.w a1,8(sp)
   1761a:	    movea.w a0,a0
   1761c:	    move.w a0,6(sp)
   17620:	    move.w d1,d1
   17622:	    move.w d1,4(sp)
   17626:	    move.w d0,d0
   17628:	    move.w d0,2(sp)
	struct debug_resource resource = {
   1762c:	    lea 10(sp),a0
   17630:	    clr.l (a0)
   17632:	    addq.l #4,a0
   17634:	    clr.l (a0)
   17636:	    addq.l #4,a0
   17638:	    clr.l (a0)
   1763a:	    addq.l #4,a0
   1763c:	    clr.l (a0)
   1763e:	    addq.l #4,a0
   17640:	    clr.l (a0)
   17642:	    addq.l #4,a0
   17644:	    clr.l (a0)
   17646:	    addq.l #4,a0
   17648:	    clr.l (a0)
   1764a:	    addq.l #4,a0
   1764c:	    clr.l (a0)
   1764e:	    addq.l #4,a0
   17650:	    clr.l (a0)
   17652:	    addq.l #4,a0
   17654:	    clr.l (a0)
   17656:	    addq.l #4,a0
   17658:	    clr.l (a0)
   1765a:	    addq.l #4,a0
   1765c:	    clr.l (a0)
   1765e:	    addq.l #4,a0
   17660:	    clr.w (a0)
   17662:	    addq.l #2,a0
		.address = (unsigned int)addr,
   17664:	    move.l 64(sp),d0
	struct debug_resource resource = {
   17668:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   1766c:	    move.w 8(sp),d0
   17670:	,-- bpl.s 17674 <debug_register_bitmap+0x74>
   17672:	|   addq.w #7,d0
   17674:	'-> asr.w #3,d0
   17676:	    movea.w d0,a0
   17678:	    movea.w 6(sp),a1
   1767c:	    move.l a1,-(sp)
   1767e:	    move.l a0,-(sp)
   17680:	    jsr 17ea4 <__mulsi3>
   17686:	    addq.l #8,sp
   17688:	    movea.w 4(sp),a0
   1768c:	    move.l a0,-(sp)
   1768e:	    move.l d0,-(sp)
   17690:	    jsr 17ea4 <__mulsi3>
   17696:	    addq.l #8,sp
	struct debug_resource resource = {
   17698:	    move.l d0,14(sp)
   1769c:	    move.w 2(sp),52(sp)
   176a2:	    move.w 8(sp),54(sp)
   176a8:	    move.w 6(sp),56(sp)
   176ae:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   176b4:	    moveq #0,d0
   176b6:	    move.w 2(sp),d0
   176ba:	    moveq #2,d1
   176bc:	    and.l d1,d0
   176be:	,-- beq.s 176ca <debug_register_bitmap+0xca>
		resource.size *= 2;
   176c0:	|   move.l 14(sp),d0
   176c4:	|   add.l d0,d0
   176c6:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   176ca:	'-> pea 20 <_start+0x20>
   176ce:	    move.l 72(sp),-(sp)
   176d2:	    lea 18(sp),a0
   176d6:	    move.l a0,d0
   176d8:	    addq.l #8,d0
   176da:	    move.l d0,-(sp)
   176dc:	    jsr 175c2 <my_strncpy>
   176e2:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   176e6:	    lea 10(sp),a0
   176ea:	    clr.l -(sp)
   176ec:	    clr.l -(sp)
   176ee:	    move.l a0,-(sp)
   176f0:	    pea 4 <_start+0x4>
   176f4:	    jsr 17582 <debug_cmd>
   176fa:	    lea 16(sp),sp
}
   176fe:	    nop
   17700:	    lea 60(sp),sp
   17704:	    rts

00017706 <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   17706:	lea -12(sp),sp
   1770a:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   1770c:	move.l 20(sp),12(sp)
   17712:	move.l 24(sp),8(sp)
   17718:	move.l 1cd76 <MathIeeeSingBasBase>,d0
   1771e:	movea.l d0,a6
   17720:	move.l 12(sp),d0
   17724:	move.l 8(sp),d1
   17728:	jsr -66(a6)
   1772c:	move.l d0,4(sp)
   17730:	move.l 4(sp),d0
}
   17734:	movea.l (sp)+,a6
   17736:	lea 12(sp),sp
   1773a:	rts

0001773c <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   1773c:	lea -32(sp),sp
   17740:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   17744:	move.l 48(sp),36(sp)
   1774a:	move.l 52(sp),40(sp)
   17750:	move.l 56(sp),28(sp)
   17756:	move.l 60(sp),32(sp)
   1775c:	move.l 1cd7e <MathIeeeDoubBasBase>,d0
   17762:	movea.l d0,a6
   17764:	move.l 36(sp),d0
   17768:	move.l 40(sp),d1
   1776c:	move.l 28(sp),d2
   17770:	move.l 32(sp),d3
   17774:	jsr -66(a6)
   17778:	move.l d0,12(sp)
   1777c:	move.l d1,16(sp)
   17780:	move.l 12(sp),20(sp)
   17786:	move.l 16(sp),24(sp)
   1778c:	move.l 20(sp),d0
   17790:	move.l 24(sp),d1
}
   17794:	movem.l (sp)+,d2-d3/a6
   17798:	lea 32(sp),sp
   1779c:	rts

0001779e <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   1779e:	lea -32(sp),sp
   177a2:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   177a6:	move.l 48(sp),36(sp)
   177ac:	move.l 52(sp),40(sp)
   177b2:	move.l 56(sp),28(sp)
   177b8:	move.l 60(sp),32(sp)
   177be:	move.l 1cd7e <MathIeeeDoubBasBase>,d0
   177c4:	movea.l d0,a6
   177c6:	move.l 36(sp),d0
   177ca:	move.l 40(sp),d1
   177ce:	move.l 28(sp),d2
   177d2:	move.l 32(sp),d3
   177d6:	jsr -84(a6)
   177da:	move.l d0,12(sp)
   177de:	move.l d1,16(sp)
   177e2:	move.l 12(sp),20(sp)
   177e8:	move.l 16(sp),24(sp)
   177ee:	move.l 20(sp),d0
   177f2:	move.l 24(sp),d1
}
   177f6:	movem.l (sp)+,d2-d3/a6
   177fa:	lea 32(sp),sp
   177fe:	rts

00017800 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   17800:	lea -12(sp),sp
   17804:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   17806:	move.l 20(sp),12(sp)
   1780c:	move.l 24(sp),8(sp)
   17812:	move.l 1cd76 <MathIeeeSingBasBase>,d0
   17818:	movea.l d0,a6
   1781a:	move.l 12(sp),d0
   1781e:	move.l 8(sp),d1
   17822:	jsr -84(a6)
   17826:	move.l d0,4(sp)
   1782a:	move.l 4(sp),d0
}
   1782e:	movea.l (sp)+,a6
   17830:	lea 12(sp),sp
   17834:	rts

00017836 <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   17836:	lea -12(sp),sp
   1783a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1783c:	move.l 20(sp),12(sp)
   17842:	move.l 24(sp),8(sp)
   17848:	move.l 1cd76 <MathIeeeSingBasBase>,d0
   1784e:	movea.l d0,a6
   17850:	move.l 12(sp),d0
   17854:	move.l 8(sp),d1
   17858:	jsr -42(a6)
   1785c:	move.l d0,4(sp)
   17860:	move.l 4(sp),d0
}
   17864:	movea.l (sp)+,a6
   17866:	lea 12(sp),sp
   1786a:	rts

0001786c <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   1786c:	lea -20(sp),sp
   17870:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   17872:	move.l 28(sp),20(sp)
   17878:	move.l 1cd82 <MathIeeeDoubTransBase>,d0
   1787e:	movea.l d0,a6
   17880:	move.l 20(sp),d0
   17884:	jsr -108(a6)
   17888:	move.l d0,4(sp)
   1788c:	move.l d1,8(sp)
   17890:	move.l 4(sp),12(sp)
   17896:	move.l 8(sp),16(sp)
   1789c:	move.l 12(sp),d0
   178a0:	move.l 16(sp),d1
}
   178a4:	movea.l (sp)+,a6
   178a6:	lea 20(sp),sp
   178aa:	rts

000178ac <__fixdfsi>:

LONG __fixdfsi(DOUBLE value) {
   178ac:	lea -12(sp),sp
   178b0:	move.l a6,-(sp)
	return IEEEDPFix(value);
   178b2:	move.l 20(sp),8(sp)
   178b8:	move.l 24(sp),12(sp)
   178be:	move.l 1cd7e <MathIeeeDoubBasBase>,d0
   178c4:	movea.l d0,a6
   178c6:	move.l 8(sp),d0
   178ca:	move.l 12(sp),d1
   178ce:	jsr -30(a6)
   178d2:	move.l d0,4(sp)
   178d6:	move.l 4(sp),d0
}
   178da:	movea.l (sp)+,a6
   178dc:	lea 12(sp),sp
   178e0:	rts

000178e2 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   178e2:	subq.l #8,sp
   178e4:	move.l a6,-(sp)
	return IEEESPFix(value);
   178e6:	move.l 16(sp),8(sp)
   178ec:	move.l 1cd76 <MathIeeeSingBasBase>,d0
   178f2:	movea.l d0,a6
   178f4:	move.l 8(sp),d0
   178f8:	jsr -30(a6)
   178fc:	move.l d0,4(sp)
   17900:	move.l 4(sp),d0
}
   17904:	movea.l (sp)+,a6
   17906:	addq.l #8,sp
   17908:	rts

0001790a <__floatsidf>:


DOUBLE __floatsidf (int i) {
   1790a:	lea -20(sp),sp
   1790e:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17910:	move.l 28(sp),20(sp)
   17916:	move.l 1cd7e <MathIeeeDoubBasBase>,d0
   1791c:	movea.l d0,a6
   1791e:	move.l 20(sp),d0
   17922:	jsr -36(a6)
   17926:	move.l d0,4(sp)
   1792a:	move.l d1,8(sp)
   1792e:	move.l 4(sp),12(sp)
   17934:	move.l 8(sp),16(sp)
   1793a:	move.l 12(sp),d0
   1793e:	move.l 16(sp),d1
}
   17942:	movea.l (sp)+,a6
   17944:	lea 20(sp),sp
   17948:	rts

0001794a <__floatsisf>:

FLOAT __floatsisf(int i) {
   1794a:	subq.l #8,sp
   1794c:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1794e:	move.l 16(sp),8(sp)
   17954:	move.l 1cd76 <MathIeeeSingBasBase>,d0
   1795a:	movea.l d0,a6
   1795c:	move.l 8(sp),d0
   17960:	jsr -36(a6)
   17964:	move.l d0,4(sp)
   17968:	move.l 4(sp),d0
}
   1796c:	movea.l (sp)+,a6
   1796e:	addq.l #8,sp
   17970:	rts

00017972 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   17972:	subq.l #8,sp
   17974:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   17976:	move.l 16(sp),8(sp)
   1797c:	move.l 1cd76 <MathIeeeSingBasBase>,d0
   17982:	movea.l d0,a6
   17984:	move.l 8(sp),d0
   17988:	jsr -36(a6)
   1798c:	move.l d0,4(sp)
   17990:	move.l 4(sp),d0
}
   17994:	movea.l (sp)+,a6
   17996:	addq.l #8,sp
   17998:	rts

0001799a <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   1799a:	lea -32(sp),sp
   1799e:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   179a2:	move.l 48(sp),36(sp)
   179a8:	move.l 52(sp),40(sp)
   179ae:	move.l 56(sp),28(sp)
   179b4:	move.l 60(sp),32(sp)
   179ba:	move.l 1cd7e <MathIeeeDoubBasBase>,d0
   179c0:	movea.l d0,a6
   179c2:	move.l 36(sp),d0
   179c6:	move.l 40(sp),d1
   179ca:	move.l 28(sp),d2
   179ce:	move.l 32(sp),d3
   179d2:	jsr -78(a6)
   179d6:	move.l d0,12(sp)
   179da:	move.l d1,16(sp)
   179de:	move.l 12(sp),20(sp)
   179e4:	move.l 16(sp),24(sp)
   179ea:	move.l 20(sp),d0
   179ee:	move.l 24(sp),d1
}
   179f2:	movem.l (sp)+,d2-d3/a6
   179f6:	lea 32(sp),sp
   179fa:	rts

000179fc <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   179fc:	lea -12(sp),sp
   17a00:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17a02:	move.l 20(sp),12(sp)
   17a08:	move.l 24(sp),8(sp)
   17a0e:	move.l 1cd76 <MathIeeeSingBasBase>,d0
   17a14:	movea.l d0,a6
   17a16:	move.l 12(sp),d0
   17a1a:	move.l 8(sp),d1
   17a1e:	jsr -78(a6)
   17a22:	move.l d0,4(sp)
   17a26:	move.l 4(sp),d0
}
   17a2a:	movea.l (sp)+,a6
   17a2c:	lea 12(sp),sp
   17a30:	rts

00017a32 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17a32:	lea -12(sp),sp
   17a36:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17a38:	move.l 20(sp),12(sp)
   17a3e:	move.l 24(sp),8(sp)
   17a44:	move.l 1cd76 <MathIeeeSingBasBase>,d0
   17a4a:	movea.l d0,a6
   17a4c:	move.l 12(sp),d0
   17a50:	move.l 8(sp),d1
   17a54:	jsr -42(a6)
   17a58:	move.l d0,4(sp)
   17a5c:	move.l 4(sp),d0
}
   17a60:	movea.l (sp)+,a6
   17a62:	lea 12(sp),sp
   17a66:	rts

00017a68 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   17a68:	lea -20(sp),sp
   17a6c:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17a70:	move.l 36(sp),24(sp)
   17a76:	move.l 40(sp),28(sp)
   17a7c:	move.l 44(sp),16(sp)
   17a82:	move.l 48(sp),20(sp)
   17a88:	move.l 1cd7e <MathIeeeDoubBasBase>,d0
   17a8e:	movea.l d0,a6
   17a90:	move.l 24(sp),d0
   17a94:	move.l 28(sp),d1
   17a98:	move.l 16(sp),d2
   17a9c:	move.l 20(sp),d3
   17aa0:	jsr -42(a6)
   17aa4:	move.l d0,12(sp)
   17aa8:	move.l 12(sp),d0
}
   17aac:	movem.l (sp)+,d2-d3/a6
   17ab0:	lea 20(sp),sp
   17ab4:	rts

00017ab6 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17ab6:	lea -12(sp),sp
   17aba:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17abc:	move.l 20(sp),12(sp)
   17ac2:	move.l 24(sp),8(sp)
   17ac8:	move.l 1cd76 <MathIeeeSingBasBase>,d0
   17ace:	movea.l d0,a6
   17ad0:	move.l 12(sp),d0
   17ad4:	move.l 8(sp),d1
   17ad8:	jsr -42(a6)
   17adc:	move.l d0,4(sp)
   17ae0:	move.l 4(sp),d0
}
   17ae4:	movea.l (sp)+,a6
   17ae6:	lea 12(sp),sp
   17aea:	rts

00017aec <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   17aec:	lea -12(sp),sp
   17af0:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17af2:	move.l 20(sp),12(sp)
   17af8:	move.l 24(sp),8(sp)
   17afe:	move.l 1cd76 <MathIeeeSingBasBase>,d0
   17b04:	movea.l d0,a6
   17b06:	move.l 12(sp),d0
   17b0a:	move.l 8(sp),d1
   17b0e:	jsr -42(a6)
   17b12:	move.l d0,4(sp)
   17b16:	move.l 4(sp),d0
}
   17b1a:	movea.l (sp)+,a6
   17b1c:	lea 12(sp),sp
   17b20:	rts

00017b22 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17b22:	lea -20(sp),sp
   17b26:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   17b2a:	move.l 36(sp),24(sp)
   17b30:	move.l 40(sp),28(sp)
   17b36:	move.l 44(sp),16(sp)
   17b3c:	move.l 48(sp),20(sp)
   17b42:	move.l 1cd7e <MathIeeeDoubBasBase>,d0
   17b48:	movea.l d0,a6
   17b4a:	move.l 24(sp),d0
   17b4e:	move.l 28(sp),d1
   17b52:	move.l 16(sp),d2
   17b56:	move.l 20(sp),d3
   17b5a:	jsr -42(a6)
   17b5e:	move.l d0,12(sp)
   17b62:	move.l 12(sp),d0
}
   17b66:	movem.l (sp)+,d2-d3/a6
   17b6a:	lea 20(sp),sp
   17b6e:	rts

00017b70 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   17b70:	lea -12(sp),sp
   17b74:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17b76:	move.l 20(sp),12(sp)
   17b7c:	move.l 24(sp),8(sp)
   17b82:	move.l 1cd76 <MathIeeeSingBasBase>,d0
   17b88:	movea.l d0,a6
   17b8a:	move.l 12(sp),d0
   17b8e:	move.l 8(sp),d1
   17b92:	jsr -42(a6)
   17b96:	move.l d0,4(sp)
   17b9a:	move.l 4(sp),d0
}
   17b9e:	movea.l (sp)+,a6
   17ba0:	lea 12(sp),sp
   17ba4:	rts

00017ba6 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   17ba6:	lea -12(sp),sp
   17baa:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17bac:	move.l 20(sp),12(sp)
   17bb2:	move.l 24(sp),8(sp)
   17bb8:	move.l 1cd76 <MathIeeeSingBasBase>,d0
   17bbe:	movea.l d0,a6
   17bc0:	move.l 12(sp),d0
   17bc4:	move.l 8(sp),d1
   17bc8:	jsr -42(a6)
   17bcc:	move.l d0,4(sp)
   17bd0:	move.l 4(sp),d0
}
   17bd4:	movea.l (sp)+,a6
   17bd6:	lea 12(sp),sp
   17bda:	rts

00017bdc <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   17bdc:	lea -32(sp),sp
   17be0:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17be4:	move.l 48(sp),36(sp)
   17bea:	move.l 52(sp),40(sp)
   17bf0:	move.l 56(sp),28(sp)
   17bf6:	move.l 60(sp),32(sp)
   17bfc:	move.l 1cd7e <MathIeeeDoubBasBase>,d0
   17c02:	movea.l d0,a6
   17c04:	move.l 36(sp),d0
   17c08:	move.l 40(sp),d1
   17c0c:	move.l 28(sp),d2
   17c10:	move.l 32(sp),d3
   17c14:	jsr -72(a6)
   17c18:	move.l d0,12(sp)
   17c1c:	move.l d1,16(sp)
   17c20:	move.l 12(sp),20(sp)
   17c26:	move.l 16(sp),24(sp)
   17c2c:	move.l 20(sp),d0
   17c30:	move.l 24(sp),d1
}
   17c34:	movem.l (sp)+,d2-d3/a6
   17c38:	lea 32(sp),sp
   17c3c:	rts

00017c3e <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   17c3e:	lea -12(sp),sp
   17c42:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17c44:	move.l 20(sp),12(sp)
   17c4a:	move.l 24(sp),8(sp)
   17c50:	move.l 1cd76 <MathIeeeSingBasBase>,d0
   17c56:	movea.l d0,a6
   17c58:	move.l 12(sp),d0
   17c5c:	move.l 8(sp),d1
   17c60:	jsr -72(a6)
   17c64:	move.l d0,4(sp)
   17c68:	move.l 4(sp),d0
}
   17c6c:	movea.l (sp)+,a6
   17c6e:	lea 12(sp),sp
   17c72:	rts

00017c74 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   17c74:	lea -12(sp),sp
   17c78:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   17c7a:	move.l 20(sp),8(sp)
   17c80:	move.l 24(sp),12(sp)
   17c86:	move.l 1cd82 <MathIeeeDoubTransBase>,d0
   17c8c:	movea.l d0,a6
   17c8e:	move.l 8(sp),d0
   17c92:	move.l 12(sp),d1
   17c96:	jsr -102(a6)
   17c9a:	move.l d0,4(sp)
   17c9e:	move.l 4(sp),d0
}
   17ca2:	movea.l (sp)+,a6
   17ca4:	lea 12(sp),sp
   17ca8:	rts

00017caa <atan2f>:

unsigned int __fixunssfsi (float a) {
	return IEEESPFix(a);
}

FLOAT atan2f(FLOAT y, FLOAT x) {
   17caa:	       lea -24(sp),sp
   17cae:	       move.l a6,-(sp)
    if (x > 0) {
   17cb0:	       clr.l -(sp)
   17cb2:	       move.l 40(sp),-(sp)
   17cb6:	       jsr 17ab6 <__gtsf2>
   17cbc:	       addq.l #8,sp
   17cbe:	       tst.l d0
   17cc0:	   ,-- ble.s 17cf2 <atan2f+0x48>
        return IEEESPAtan(y / x);
   17cc2:	   |   move.l 36(sp),-(sp)
   17cc6:	   |   move.l 36(sp),-(sp)
   17cca:	   |   jsr 17800 <__divsf3>
   17cd0:	   |   addq.l #8,sp
   17cd2:	   |   move.l d0,8(sp)
   17cd6:	   |   move.l 1cd7a <MathIeeeSingTransBase>,d0
   17cdc:	   |   movea.l d0,a6
   17cde:	   |   move.l 8(sp),d0
   17ce2:	   |   jsr -30(a6)
   17ce6:	   |   move.l d0,4(sp)
   17cea:	   |   move.l 4(sp),d0
   17cee:	,--|-- bra.w 17e52 <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   17cf2:	|  '-> clr.l -(sp)
   17cf4:	|      move.l 40(sp),-(sp)
   17cf8:	|      jsr 17b70 <__ltsf2>
   17cfe:	|      addq.l #8,sp
   17d00:	|      tst.l d0
   17d02:	|  ,-- bge.s 17d76 <atan2f+0xcc>
   17d04:	|  |   clr.l -(sp)
   17d06:	|  |   move.l 36(sp),-(sp)
   17d0a:	|  |   jsr 17a32 <__gesf2>
   17d10:	|  |   addq.l #8,sp
   17d12:	|  |   tst.l d0
   17d14:	|  +-- blt.s 17d76 <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   17d16:	|  |   move.l 36(sp),-(sp)
   17d1a:	|  |   move.l 36(sp),-(sp)
   17d1e:	|  |   jsr 17800 <__divsf3>
   17d24:	|  |   addq.l #8,sp
   17d26:	|  |   move.l d0,24(sp)
   17d2a:	|  |   move.l 1cd7a <MathIeeeSingTransBase>,d0
   17d30:	|  |   movea.l d0,a6
   17d32:	|  |   move.l 24(sp),d0
   17d36:	|  |   jsr -30(a6)
   17d3a:	|  |   move.l d0,20(sp)
   17d3e:	|  |   move.l 20(sp),d0
   17d42:	|  |   move.l d0,-(sp)
   17d44:	|  |   jsr 1786c <__extendsfdf2>
   17d4a:	|  |   addq.l #4,sp
   17d4c:	|  |   move.l #1413754136,-(sp)
   17d52:	|  |   move.l #1074340347,-(sp)
   17d58:	|  |   move.l d1,-(sp)
   17d5a:	|  |   move.l d0,-(sp)
   17d5c:	|  |   jsr 1773c <__adddf3>
   17d62:	|  |   lea 16(sp),sp
   17d66:	|  |   move.l d1,-(sp)
   17d68:	|  |   move.l d0,-(sp)
   17d6a:	|  |   jsr 17c74 <__truncdfsf2>
   17d70:	|  |   addq.l #8,sp
   17d72:	+--|-- bra.w 17e52 <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   17d76:	|  '-> clr.l -(sp)
   17d78:	|      move.l 40(sp),-(sp)
   17d7c:	|      jsr 17b70 <__ltsf2>
   17d82:	|      addq.l #8,sp
   17d84:	|      tst.l d0
   17d86:	|  ,-- bge.s 17df8 <atan2f+0x14e>
   17d88:	|  |   clr.l -(sp)
   17d8a:	|  |   move.l 36(sp),-(sp)
   17d8e:	|  |   jsr 17b70 <__ltsf2>
   17d94:	|  |   addq.l #8,sp
   17d96:	|  |   tst.l d0
   17d98:	|  +-- bge.s 17df8 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17d9a:	|  |   move.l 36(sp),-(sp)
   17d9e:	|  |   move.l 36(sp),-(sp)
   17da2:	|  |   jsr 17800 <__divsf3>
   17da8:	|  |   addq.l #8,sp
   17daa:	|  |   move.l d0,16(sp)
   17dae:	|  |   move.l 1cd7a <MathIeeeSingTransBase>,d0
   17db4:	|  |   movea.l d0,a6
   17db6:	|  |   move.l 16(sp),d0
   17dba:	|  |   jsr -30(a6)
   17dbe:	|  |   move.l d0,12(sp)
   17dc2:	|  |   move.l 12(sp),d0
   17dc6:	|  |   move.l d0,-(sp)
   17dc8:	|  |   jsr 1786c <__extendsfdf2>
   17dce:	|  |   addq.l #4,sp
   17dd0:	|  |   move.l #1413754136,-(sp)
   17dd6:	|  |   move.l #1074340347,-(sp)
   17ddc:	|  |   move.l d1,-(sp)
   17dde:	|  |   move.l d0,-(sp)
   17de0:	|  |   jsr 17bdc <__subdf3>
   17de6:	|  |   lea 16(sp),sp
   17dea:	|  |   move.l d1,-(sp)
   17dec:	|  |   move.l d0,-(sp)
   17dee:	|  |   jsr 17c74 <__truncdfsf2>
   17df4:	|  |   addq.l #8,sp
   17df6:	+--|-- bra.s 17e52 <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17df8:	|  '-> clr.l -(sp)
   17dfa:	|      move.l 40(sp),-(sp)
   17dfe:	|      jsr 17836 <__eqsf2>
   17e04:	|      addq.l #8,sp
   17e06:	|      tst.l d0
   17e08:	|  ,-- bne.s 17e24 <atan2f+0x17a>
   17e0a:	|  |   clr.l -(sp)
   17e0c:	|  |   move.l 36(sp),-(sp)
   17e10:	|  |   jsr 17ab6 <__gtsf2>
   17e16:	|  |   addq.l #8,sp
   17e18:	|  |   tst.l d0
   17e1a:	|  +-- ble.s 17e24 <atan2f+0x17a>
        return PI / 2;
   17e1c:	|  |   move.l #1070141403,d0
   17e22:	+--|-- bra.s 17e52 <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   17e24:	|  '-> clr.l -(sp)
   17e26:	|      move.l 40(sp),-(sp)
   17e2a:	|      jsr 17836 <__eqsf2>
   17e30:	|      addq.l #8,sp
   17e32:	|      tst.l d0
   17e34:	|  ,-- bne.s 17e50 <atan2f+0x1a6>
   17e36:	|  |   clr.l -(sp)
   17e38:	|  |   move.l 36(sp),-(sp)
   17e3c:	|  |   jsr 17b70 <__ltsf2>
   17e42:	|  |   addq.l #8,sp
   17e44:	|  |   tst.l d0
   17e46:	|  +-- bge.s 17e50 <atan2f+0x1a6>
        return -PI / 2;
   17e48:	|  |   move.l #-1077342245,d0
   17e4e:	+--|-- bra.s 17e52 <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   17e50:	|  '-> moveq #0,d0
    }
}
   17e52:	'----> movea.l (sp)+,a6
   17e54:	       lea 24(sp),sp
   17e58:	       rts

00017e5a <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   17e5a:	lea -24(sp),sp
   17e5e:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   17e60:	move.l 32(sp),20(sp)
   17e66:	move.l 36(sp),24(sp)
   17e6c:	move.l 1cd82 <MathIeeeDoubTransBase>,d0
   17e72:	movea.l d0,a6
   17e74:	move.l 20(sp),d0
   17e78:	move.l 24(sp),d1
   17e7c:	jsr -96(a6)
   17e80:	move.l d0,4(sp)
   17e84:	move.l d1,8(sp)
   17e88:	move.l 4(sp),12(sp)
   17e8e:	move.l 8(sp),16(sp)
   17e94:	move.l 12(sp),d0
   17e98:	move.l 16(sp),d1
}
   17e9c:	movea.l (sp)+,a6
   17e9e:	lea 24(sp),sp
   17ea2:	rts

00017ea4 <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   17ea4:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17ea8:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17eac:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17eb0:	mulu.w 8(sp),d1
	addw	d1, d0
   17eb4:	add.w d1,d0
	swap	d0
   17eb6:	swap d0
	clrw	d0
   17eb8:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17eba:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17ebe:	mulu.w 10(sp),d1
	addl	d1, d0
   17ec2:	add.l d1,d0
	rts
   17ec4:	rts

00017ec6 <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   17ec6:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17ec8:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17ecc:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17ed0:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   17ed6:	   ,-- bcc.s 17eee <__udivsi3+0x28>
	movel	d0, d2
   17ed8:	   |   move.l d0,d2
	clrw	d2
   17eda:	   |   clr.w d2
	swap	d2
   17edc:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17ede:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17ee0:	   |   move.w d2,d0
	swap	d0
   17ee2:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   17ee4:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17ee8:	   |   divu.w d1,d2
	movew	d2, d0
   17eea:	   |   move.w d2,d0
	jra	6f
   17eec:	,--|-- bra.s 17f1e <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17eee:	|  '-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17ef0:	|  ,-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   17ef2:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   17ef4:	|  |   cmpi.l #65536,d1
	jcc	4b
   17efa:	|  '-- bcc.s 17ef0 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17efc:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17efe:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   17f04:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   17f06:	|      mulu.w d0,d1
	swap	d2
   17f08:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17f0a:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17f0c:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17f0e:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17f10:	|  ,-- bne.s 17f1c <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   17f12:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   17f14:	|  +-- bcs.s 17f1c <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   17f16:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17f1a:	+--|-- bls.s 17f1e <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17f1c:	|  '-> subq.l #1,d0

6:	movel	sp@+, d2
   17f1e:	'----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17f20:	       rts

00017f22 <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   17f22:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   17f24:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   17f26:	    move.l 12(sp),d1
	jpl	1f
   17f2a:	,-- bpl.s 17f30 <__divsi3+0xe>
	negl	d1
   17f2c:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   17f2e:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   17f30:	'-> move.l 8(sp),d0
	jpl	2f
   17f34:	,-- bpl.s 17f3a <__divsi3+0x18>
	negl	d0
   17f36:	|   neg.l d0
	negb	d2
   17f38:	|   neg.b d2

2:	movel	d1, sp@-
   17f3a:	'-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17f3c:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   17f3e:	    jsr 17ec6 <__udivsi3>
	addql	#8, sp
   17f44:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   17f46:	    tst.b d2
	jpl	3f
   17f48:	,-- bpl.s 17f4c <__divsi3+0x2a>
	negl	d0
   17f4a:	|   neg.l d0

3:	movel	sp@+, d2
   17f4c:	'-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17f4e:	    rts

00017f50 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17f50:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17f54:	move.l 4(sp),d0
	movel	d1, sp@-
   17f58:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17f5a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   17f5c:	jsr 17f22 <__divsi3>
	addql	#8, sp
   17f62:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17f64:	move.l 8(sp),d1
	movel	d1, sp@-
   17f68:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17f6a:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17f6c:	jsr 17ea4 <__mulsi3>
	addql	#8, sp
   17f72:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17f74:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17f78:	sub.l d0,d1
	movel	d1, d0
   17f7a:	move.l d1,d0
	rts
   17f7c:	rts

00017f7e <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   17f7e:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   17f82:	move.l 4(sp),d0
	movel	d1, sp@-
   17f86:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17f88:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17f8a:	jsr 17ec6 <__udivsi3>
	addql	#8, sp
   17f90:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   17f92:	move.l 8(sp),d1
	movel	d1, sp@-
   17f96:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17f98:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17f9a:	jsr 17ea4 <__mulsi3>
	addql	#8, sp
   17fa0:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   17fa2:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   17fa6:	sub.l d0,d1
	movel	d1, d0
   17fa8:	move.l d1,d0
	rts
   17faa:	rts

00017fac <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17fac:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17fae:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   17fb2:	jsr -516(a6)
    move.l (sp)+, a6
   17fb6:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17fb8:	rts

00017fba <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17fba:	move.b d0,(a3)+
	rts
   17fbc:	rts
