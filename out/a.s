
out/a.elf:     file format elf32-m68k


Disassembly of section .text:

00000000 <_start>:
extern void (*__init_array_start[])() __attribute__((weak));
extern void (*__init_array_end[])() __attribute__((weak));
extern void (*__fini_array_start[])() __attribute__((weak));
extern void (*__fini_array_end[])() __attribute__((weak));

__attribute__((used)) __attribute__((section(".text.unlikely"))) void _start() {
       0:	       subq.l #8,sp
	// initialize globals, ctors etc.
	unsigned long count;
	unsigned long i;

	count = __preinit_array_end - __preinit_array_start;
       2:	       move.l #106496,d0
       8:	       subi.l #106496,d0
       e:	       asr.l #2,d0
      10:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      12:	       clr.l 4(sp)
      16:	   /-- bra.s 32 <_start+0x32>
		__preinit_array_start[i]();
      18:	/--|-> move.l 4(sp),d0
      1c:	|  |   add.l d0,d0
      1e:	|  |   movea.l d0,a1
      20:	|  |   adda.l d0,a1
      22:	|  |   lea 1a000 <allowAnyFilename>,a0
      28:	|  |   movea.l (0,a1,a0.l),a0
      2c:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      2e:	|  |   addq.l #1,4(sp)
      32:	|  \-> move.l 4(sp),d0
      36:	|      cmp.l (sp),d0
      38:	\----- bcs.s 18 <_start+0x18>

	count = __init_array_end - __init_array_start;
      3a:	       move.l #106496,d0
      40:	       subi.l #106496,d0
      46:	       asr.l #2,d0
      48:	       move.l d0,(sp)
	for (i = 0; i < count; i++)
      4a:	       clr.l 4(sp)
      4e:	   /-- bra.s 6a <_start+0x6a>
		__init_array_start[i]();
      50:	/--|-> move.l 4(sp),d0
      54:	|  |   add.l d0,d0
      56:	|  |   movea.l d0,a1
      58:	|  |   adda.l d0,a1
      5a:	|  |   lea 1a000 <allowAnyFilename>,a0
      60:	|  |   movea.l (0,a1,a0.l),a0
      64:	|  |   jsr (a0)
	for (i = 0; i < count; i++)
      66:	|  |   addq.l #1,4(sp)
      6a:	|  \-> move.l 4(sp),d0
      6e:	|      cmp.l (sp),d0
      70:	\----- bcs.s 50 <_start+0x50>

	main();
      72:	       jsr 6e8a <main>

	// call dtors
	count = __fini_array_end - __fini_array_start;
      78:	       move.l #106496,d0
      7e:	       subi.l #106496,d0
      84:	       asr.l #2,d0
      86:	       move.l d0,(sp)
	for (i = count; i > 0; i--)
      88:	       move.l (sp),4(sp)
      8c:	   /-- bra.s aa <_start+0xaa>
		__fini_array_start[i - 1]();
      8e:	/--|-> move.l 4(sp),d0
      92:	|  |   subq.l #1,d0
      94:	|  |   add.l d0,d0
      96:	|  |   movea.l d0,a1
      98:	|  |   adda.l d0,a1
      9a:	|  |   lea 1a000 <allowAnyFilename>,a0
      a0:	|  |   movea.l (0,a1,a0.l),a0
      a4:	|  |   jsr (a0)
	for (i = count; i > 0; i--)
      a6:	|  |   subq.l #1,4(sp)
      aa:	|  \-> tst.l 4(sp)
      ae:	\----- bne.s 8e <_start+0x8e>
}
      b0:	       nop
      b2:	       nop
      b4:	       addq.l #8,sp
      b6:	       rts

000000b8 <copyString>:
#include "support/gcc8_c_support.h"
#include "moreio.h"

BOOL allowAnyFilename = TRUE;

char * copyString(const char * c) {
      b8:	       lea -16(sp),sp
      bc:	       move.l a6,-(sp)
    char * r = (char *)AllocVec(strlen(c) + 1, MEMF_ANY);
      be:	       move.l 24(sp),-(sp)
      c2:	       jsr 1374c <strlen>
      c8:	       addq.l #4,sp
      ca:	       move.l d0,d1
      cc:	       addq.l #1,d1
      ce:	       move.l d1,16(sp)
      d2:	       clr.l 12(sp)
      d6:	       move.l 1a7a4 <SysBase>,d0
      dc:	       movea.l d0,a6
      de:	       move.l 16(sp),d0
      e2:	       move.l 12(sp),d1
      e6:	       jsr -684(a6)
      ea:	       move.l d0,8(sp)
      ee:	       move.l 8(sp),d0
      f2:	       move.l d0,4(sp)
    if (!r) return NULL;
      f6:	   /-- bne.s fc <copyString+0x44>
      f8:	   |   moveq #0,d0
      fa:	/--|-- bra.s 110 <copyString+0x58>
    strcpy(r, c);
      fc:	|  \-> move.l 24(sp),-(sp)
     100:	|      move.l 8(sp),-(sp)
     104:	|      jsr 13764 <strcpy>
     10a:	|      addq.l #8,sp
    return r;
     10c:	|      move.l 4(sp),d0
}
     110:	\----> movea.l (sp)+,a6
     112:	       lea 16(sp),sp
     116:	       rts

00000118 <decodeFilename>:

char * decodeFilename(char * nameIn) {
     118:	                      lea -20(sp),sp
     11c:	                      move.l a6,-(sp)
	if (allowAnyFilename) {
     11e:	                      move.w 1a000 <allowAnyFilename>,d0
     124:	/-------------------- beq.w 2ea <decodeFilename+0x1d2>
		char * newName = (char *)AllocVec(strlen(nameIn) + 1, MEMF_ANY);
     128:	|                     move.l 28(sp),-(sp)
     12c:	|                     jsr 1374c <strlen>
     132:	|                     addq.l #4,sp
     134:	|                     move.l d0,d1
     136:	|                     addq.l #1,d1
     138:	|                     move.l d1,16(sp)
     13c:	|                     clr.l 12(sp)
     140:	|                     move.l 1a7a4 <SysBase>,d0
     146:	|                     movea.l d0,a6
     148:	|                     move.l 16(sp),d0
     14c:	|                     move.l 12(sp),d1
     150:	|                     jsr -684(a6)
     154:	|                     move.l d0,8(sp)
     158:	|                     move.l 8(sp),d0
     15c:	|                     move.l d0,4(sp)
		if (!newName) return NULL;
     160:	|                 /-- bne.s 168 <decodeFilename+0x50>
     162:	|                 |   moveq #0,d0
     164:	|  /--------------|-- bra.w 2f6 <decodeFilename+0x1de>

		int i = 0;
     168:	|  |              \-> clr.l 20(sp)
		while (*nameIn) {
     16c:	|  |     /----------- bra.w 2ce <decodeFilename+0x1b6>
			if (*nameIn == '_') {
     170:	|  |  /--|----------> movea.l 28(sp),a0
     174:	|  |  |  |            move.b (a0),d0
     176:	|  |  |  |            cmpi.b #95,d0
     17a:	|  |  |  |  /-------- bne.w 2b4 <decodeFilename+0x19c>
				nameIn++;
     17e:	|  |  |  |  |         addq.l #1,28(sp)
				switch (*nameIn) {
     182:	|  |  |  |  |         movea.l 28(sp),a0
     186:	|  |  |  |  |         move.b (a0),d0
     188:	|  |  |  |  |         ext.w d0
     18a:	|  |  |  |  |         movea.w d0,a0
     18c:	|  |  |  |  |         moveq #-65,d0
     18e:	|  |  |  |  |         add.l a0,d0
     190:	|  |  |  |  |         moveq #20,d1
     192:	|  |  |  |  |         cmp.l d0,d1
     194:	|  |  |  |  |  /----- bcs.w 2a4 <decodeFilename+0x18c>
     198:	|  |  |  |  |  |      add.l d0,d0
     19a:	|  |  |  |  |  |      movea.l d0,a0
     19c:	|  |  |  |  |  |      adda.l #424,a0
     1a2:	|  |  |  |  |  |      move.w (a0),d0
     1a4:	|  |  |  |  |  |      jmp (1a8 <decodeFilename+0x90>,pc,d0.w)
     1a8:	|  |  |  |  |  |      .short 0x00d4
     1aa:	|  |  |  |  |  |      ori.l #12583164,(a0)+
     1b0:	|  |  |  |  |  |      .short 0x00fc
     1b2:	|  |  |  |  |  |      ori.l #4194556,252(a4)
     1ba:	|  |  |  |  |  |      .short 0x00fc
     1bc:	|  |  |  |  |  |      .short 0x00fc
     1be:	|  |  |  |  |  |      ori.b #-4,252(a2)
     1c4:	|  |  |  |  |  |      .short 0x00fc
     1c6:	|  |  |  |  |  |      ori.w #232,(a6)
     1ca:	|  |  |  |  |  |      .short 0x00fc
     1cc:	|  |  |  |  |  |      ori.l #16515180,d2
					case 'L':	newName[i] = '<';	nameIn++;	break;
     1d2:	|  |  |  |  |  |      move.l 20(sp),d0
     1d6:	|  |  |  |  |  |      movea.l 4(sp),a0
     1da:	|  |  |  |  |  |      adda.l d0,a0
     1dc:	|  |  |  |  |  |      move.b #60,(a0)
     1e0:	|  |  |  |  |  |      addq.l #1,28(sp)
     1e4:	|  |  |  |  |  |  /-- bra.w 2ca <decodeFilename+0x1b2>
					case 'G':	newName[i] = '>';	nameIn++;	break;
     1e8:	|  |  |  |  |  |  |   move.l 20(sp),d0
     1ec:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     1f0:	|  |  |  |  |  |  |   adda.l d0,a0
     1f2:	|  |  |  |  |  |  |   move.b #62,(a0)
     1f6:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     1fa:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'P':	newName[i] = '|';	nameIn++;	break;
     1fe:	|  |  |  |  |  |  |   move.l 20(sp),d0
     202:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     206:	|  |  |  |  |  |  |   adda.l d0,a0
     208:	|  |  |  |  |  |  |   move.b #124,(a0)
     20c:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     210:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'U':	newName[i] = '_';	nameIn++;	break;
     214:	|  |  |  |  |  |  |   move.l 20(sp),d0
     218:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     21c:	|  |  |  |  |  |  |   adda.l d0,a0
     21e:	|  |  |  |  |  |  |   move.b #95,(a0)
     222:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     226:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'S':	newName[i] = '\"';	nameIn++;	break;
     22a:	|  |  |  |  |  |  |   move.l 20(sp),d0
     22e:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     232:	|  |  |  |  |  |  |   adda.l d0,a0
     234:	|  |  |  |  |  |  |   move.b #34,(a0)
     238:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     23c:	|  |  |  |  |  |  +-- bra.w 2ca <decodeFilename+0x1b2>
					case 'B':	newName[i] = '\\';	nameIn++;	break;
     240:	|  |  |  |  |  |  |   move.l 20(sp),d0
     244:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     248:	|  |  |  |  |  |  |   adda.l d0,a0
     24a:	|  |  |  |  |  |  |   move.b #92,(a0)
     24e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     252:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'F':	newName[i] = '/';	nameIn++;	break;
     254:	|  |  |  |  |  |  |   move.l 20(sp),d0
     258:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     25c:	|  |  |  |  |  |  |   adda.l d0,a0
     25e:	|  |  |  |  |  |  |   move.b #47,(a0)
     262:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     266:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'C':	newName[i] = ':';	nameIn++;	break;
     268:	|  |  |  |  |  |  |   move.l 20(sp),d0
     26c:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     270:	|  |  |  |  |  |  |   adda.l d0,a0
     272:	|  |  |  |  |  |  |   move.b #58,(a0)
     276:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     27a:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'A':	newName[i] = '*';	nameIn++;	break;
     27c:	|  |  |  |  |  |  |   move.l 20(sp),d0
     280:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     284:	|  |  |  |  |  |  |   adda.l d0,a0
     286:	|  |  |  |  |  |  |   move.b #42,(a0)
     28a:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     28e:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					case 'Q':	newName[i] = '?';	nameIn++;	break;
     290:	|  |  |  |  |  |  |   move.l 20(sp),d0
     294:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     298:	|  |  |  |  |  |  |   adda.l d0,a0
     29a:	|  |  |  |  |  |  |   move.b #63,(a0)
     29e:	|  |  |  |  |  |  |   addq.l #1,28(sp)
     2a2:	|  |  |  |  |  |  +-- bra.s 2ca <decodeFilename+0x1b2>
					default:	newName[i] = '_';
     2a4:	|  |  |  |  |  \--|-> move.l 20(sp),d0
     2a8:	|  |  |  |  |     |   movea.l 4(sp),a0
     2ac:	|  |  |  |  |     |   adda.l d0,a0
     2ae:	|  |  |  |  |     |   move.b #95,(a0)
     2b2:	|  |  |  |  |     +-- bra.s 2ca <decodeFilename+0x1b2>
				}
			} else {
				newName[i] = *nameIn;
     2b4:	|  |  |  |  \-----|-> move.l 20(sp),d0
     2b8:	|  |  |  |        |   movea.l 4(sp),a0
     2bc:	|  |  |  |        |   adda.l d0,a0
     2be:	|  |  |  |        |   movea.l 28(sp),a1
     2c2:	|  |  |  |        |   move.b (a1),d0
     2c4:	|  |  |  |        |   move.b d0,(a0)
				nameIn++;
     2c6:	|  |  |  |        |   addq.l #1,28(sp)
			}
			i++;
     2ca:	|  |  |  |        \-> addq.l #1,20(sp)
		while (*nameIn) {
     2ce:	|  |  |  \----------> movea.l 28(sp),a0
     2d2:	|  |  |               move.b (a0),d0
     2d4:	|  |  \-------------- bne.w 170 <decodeFilename+0x58>
		}
		newName[i] = 0;
     2d8:	|  |                  move.l 20(sp),d0
     2dc:	|  |                  movea.l 4(sp),a0
     2e0:	|  |                  adda.l d0,a0
     2e2:	|  |                  clr.b (a0)
		return newName;
     2e4:	|  |                  move.l 4(sp),d0
     2e8:	|  +----------------- bra.s 2f6 <decodeFilename+0x1de>
	} else {
		return copyString(nameIn);
     2ea:	\--|----------------> move.l 28(sp),-(sp)
     2ee:	   |                  jsr b8 <copyString>
     2f4:	   |                  addq.l #4,sp
	}
}
     2f6:	   \----------------> movea.l (sp)+,a6
     2f8:	                      lea 20(sp),sp
     2fc:	                      rts

000002fe <encodeFilename>:

char * encodeFilename (char * nameIn) {
     2fe:	                      lea -24(sp),sp
     302:	                      move.l a6,-(sp)
	if (! nameIn) return NULL;
     304:	                      tst.l 32(sp)
     308:	                  /-- bne.s 310 <encodeFilename+0x12>
     30a:	                  |   moveq #0,d0
     30c:	/-----------------|-- bra.w 688 <encodeFilename+0x38a>
	if (allowAnyFilename) {
     310:	|                 \-> move.w 1a000 <allowAnyFilename>,d0
     316:	|  /----------------- beq.w 644 <encodeFilename+0x346>
		char * newName = AllocVec( strlen(nameIn)*2+1,MEMF_ANY);
     31a:	|  |                  move.l 32(sp),-(sp)
     31e:	|  |                  jsr 1374c <strlen>
     324:	|  |                  addq.l #4,sp
     326:	|  |                  add.l d0,d0
     328:	|  |                  move.l d0,d1
     32a:	|  |                  addq.l #1,d1
     32c:	|  |                  move.l d1,16(sp)
     330:	|  |                  clr.l 12(sp)
     334:	|  |                  move.l 1a7a4 <SysBase>,d0
     33a:	|  |                  movea.l d0,a6
     33c:	|  |                  move.l 16(sp),d0
     340:	|  |                  move.l 12(sp),d1
     344:	|  |                  jsr -684(a6)
     348:	|  |                  move.l d0,8(sp)
     34c:	|  |                  move.l 8(sp),d0
     350:	|  |                  move.l d0,4(sp)
		if(newName == 0) {
     354:	|  |              /-- bne.s 36a <encodeFilename+0x6c>
			KPrintF( "encodefilename: Could not allocate Memory");
     356:	|  |              |   pea 17736 <PutChar+0x4>
     35c:	|  |              |   jsr 16c5e <KPrintF>
     362:	|  |              |   addq.l #4,sp
			return NULL;
     364:	|  |              |   moveq #0,d0
     366:	+--|--------------|-- bra.w 688 <encodeFilename+0x38a>
		}

		int i = 0;
     36a:	|  |              \-> clr.l 24(sp)
		while (*nameIn) {
     36e:	|  |     /----------- bra.w 634 <encodeFilename+0x336>
			switch (*nameIn) {
     372:	|  |  /--|----------> movea.l 32(sp),a0
     376:	|  |  |  |            move.b (a0),d0
     378:	|  |  |  |            ext.w d0
     37a:	|  |  |  |            movea.w d0,a0
     37c:	|  |  |  |            moveq #95,d0
     37e:	|  |  |  |            cmp.l a0,d0
     380:	|  |  |  |        /-- blt.w 424 <encodeFilename+0x126>
     384:	|  |  |  |        |   moveq #34,d1
     386:	|  |  |  |        |   cmp.l a0,d1
     388:	|  |  |  |  /-----|-- bgt.w 608 <encodeFilename+0x30a>
     38c:	|  |  |  |  |     |   moveq #-34,d0
     38e:	|  |  |  |  |     |   add.l a0,d0
     390:	|  |  |  |  |     |   moveq #61,d1
     392:	|  |  |  |  |     |   cmp.l d0,d1
     394:	|  |  |  |  +-----|-- bcs.w 608 <encodeFilename+0x30a>
     398:	|  |  |  |  |     |   add.l d0,d0
     39a:	|  |  |  |  |     |   movea.l d0,a0
     39c:	|  |  |  |  |     |   adda.l #936,a0
     3a2:	|  |  |  |  |     |   move.w (a0),d0
     3a4:	|  |  |  |  |     |   jmp (3a8 <encodeFilename+0xaa>,pc,d0.w)
     3a8:	|  |  |  |  |     |   bchg d0,d6
     3aa:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ae:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b2:	|  |  |  |  |     |   andi.w #608,-(a0)
     3b6:	|  |  |  |  |     |   andi.w #516,-(a0)
     3ba:	|  |  |  |  |     |   andi.w #608,-(a0)
     3be:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c2:	|  |  |  |  |     |   bclr d0,-(a6)
     3c4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3c8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3cc:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3d8:	|  |  |  |  |     |   bset d0,(a6)
     3da:	|  |  |  |  |     |   andi.w #134,-(a0)
     3de:	|  |  |  |  |     |   andi.w #182,-(a0)
     3e2:	|  |  |  |  |     |   andi.b #96,(96,a2,d0.w:2)
     3e8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3ec:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f0:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f4:	|  |  |  |  |     |   andi.w #608,-(a0)
     3f8:	|  |  |  |  |     |   andi.w #608,-(a0)
     3fc:	|  |  |  |  |     |   andi.w #608,-(a0)
     400:	|  |  |  |  |     |   andi.w #608,-(a0)
     404:	|  |  |  |  |     |   andi.w #608,-(a0)
     408:	|  |  |  |  |     |   andi.w #608,-(a0)
     40c:	|  |  |  |  |     |   andi.w #608,-(a0)
     410:	|  |  |  |  |     |   andi.w #608,-(a0)
     414:	|  |  |  |  |     |   andi.w #608,-(a0)
     418:	|  |  |  |  |     |   andi.w #608,-(a0)
     41c:	|  |  |  |  |     |   bchg d0,(96,a6,d0.w:2)
     420:	|  |  |  |  |     |   andi.w #278,-(a0)
     424:	|  |  |  |  |     \-> moveq #124,d0
     426:	|  |  |  |  |         cmp.l a0,d0
     428:	|  |  |  |  |     /-- beq.s 48e <encodeFilename+0x190>
     42a:	|  |  |  |  +-----|-- bra.w 608 <encodeFilename+0x30a>
				case '<':	newName[i++] = '_';		newName[i++] = 'L';		break;
     42e:	|  |  |  |  |     |   move.l 24(sp),d0
     432:	|  |  |  |  |     |   move.l d0,d1
     434:	|  |  |  |  |     |   addq.l #1,d1
     436:	|  |  |  |  |     |   move.l d1,24(sp)
     43a:	|  |  |  |  |     |   movea.l 4(sp),a0
     43e:	|  |  |  |  |     |   adda.l d0,a0
     440:	|  |  |  |  |     |   move.b #95,(a0)
     444:	|  |  |  |  |     |   move.l 24(sp),d0
     448:	|  |  |  |  |     |   move.l d0,d1
     44a:	|  |  |  |  |     |   addq.l #1,d1
     44c:	|  |  |  |  |     |   move.l d1,24(sp)
     450:	|  |  |  |  |     |   movea.l 4(sp),a0
     454:	|  |  |  |  |     |   adda.l d0,a0
     456:	|  |  |  |  |     |   move.b #76,(a0)
     45a:	|  |  |  |  |  /--|-- bra.w 624 <encodeFilename+0x326>
				case '>':	newName[i++] = '_';		newName[i++] = 'G';		break;
     45e:	|  |  |  |  |  |  |   move.l 24(sp),d0
     462:	|  |  |  |  |  |  |   move.l d0,d1
     464:	|  |  |  |  |  |  |   addq.l #1,d1
     466:	|  |  |  |  |  |  |   move.l d1,24(sp)
     46a:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     46e:	|  |  |  |  |  |  |   adda.l d0,a0
     470:	|  |  |  |  |  |  |   move.b #95,(a0)
     474:	|  |  |  |  |  |  |   move.l 24(sp),d0
     478:	|  |  |  |  |  |  |   move.l d0,d1
     47a:	|  |  |  |  |  |  |   addq.l #1,d1
     47c:	|  |  |  |  |  |  |   move.l d1,24(sp)
     480:	|  |  |  |  |  |  |   movea.l 4(sp),a0
     484:	|  |  |  |  |  |  |   adda.l d0,a0
     486:	|  |  |  |  |  |  |   move.b #71,(a0)
     48a:	|  |  |  |  |  +--|-- bra.w 624 <encodeFilename+0x326>
				case '|':	newName[i++] = '_';		newName[i++] = 'P';		break;
     48e:	|  |  |  |  |  |  \-> move.l 24(sp),d0
     492:	|  |  |  |  |  |      move.l d0,d1
     494:	|  |  |  |  |  |      addq.l #1,d1
     496:	|  |  |  |  |  |      move.l d1,24(sp)
     49a:	|  |  |  |  |  |      movea.l 4(sp),a0
     49e:	|  |  |  |  |  |      adda.l d0,a0
     4a0:	|  |  |  |  |  |      move.b #95,(a0)
     4a4:	|  |  |  |  |  |      move.l 24(sp),d0
     4a8:	|  |  |  |  |  |      move.l d0,d1
     4aa:	|  |  |  |  |  |      addq.l #1,d1
     4ac:	|  |  |  |  |  |      move.l d1,24(sp)
     4b0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4b4:	|  |  |  |  |  |      adda.l d0,a0
     4b6:	|  |  |  |  |  |      move.b #80,(a0)
     4ba:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '_':	newName[i++] = '_';		newName[i++] = 'U';		break;
     4be:	|  |  |  |  |  |      move.l 24(sp),d0
     4c2:	|  |  |  |  |  |      move.l d0,d1
     4c4:	|  |  |  |  |  |      addq.l #1,d1
     4c6:	|  |  |  |  |  |      move.l d1,24(sp)
     4ca:	|  |  |  |  |  |      movea.l 4(sp),a0
     4ce:	|  |  |  |  |  |      adda.l d0,a0
     4d0:	|  |  |  |  |  |      move.b #95,(a0)
     4d4:	|  |  |  |  |  |      move.l 24(sp),d0
     4d8:	|  |  |  |  |  |      move.l d0,d1
     4da:	|  |  |  |  |  |      addq.l #1,d1
     4dc:	|  |  |  |  |  |      move.l d1,24(sp)
     4e0:	|  |  |  |  |  |      movea.l 4(sp),a0
     4e4:	|  |  |  |  |  |      adda.l d0,a0
     4e6:	|  |  |  |  |  |      move.b #85,(a0)
     4ea:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\"':	newName[i++] = '_';		newName[i++] = 'S';		break;
     4ee:	|  |  |  |  |  |      move.l 24(sp),d0
     4f2:	|  |  |  |  |  |      move.l d0,d1
     4f4:	|  |  |  |  |  |      addq.l #1,d1
     4f6:	|  |  |  |  |  |      move.l d1,24(sp)
     4fa:	|  |  |  |  |  |      movea.l 4(sp),a0
     4fe:	|  |  |  |  |  |      adda.l d0,a0
     500:	|  |  |  |  |  |      move.b #95,(a0)
     504:	|  |  |  |  |  |      move.l 24(sp),d0
     508:	|  |  |  |  |  |      move.l d0,d1
     50a:	|  |  |  |  |  |      addq.l #1,d1
     50c:	|  |  |  |  |  |      move.l d1,24(sp)
     510:	|  |  |  |  |  |      movea.l 4(sp),a0
     514:	|  |  |  |  |  |      adda.l d0,a0
     516:	|  |  |  |  |  |      move.b #83,(a0)
     51a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '\\':	newName[i++] = '_';		newName[i++] = 'B';		break;
     51e:	|  |  |  |  |  |      move.l 24(sp),d0
     522:	|  |  |  |  |  |      move.l d0,d1
     524:	|  |  |  |  |  |      addq.l #1,d1
     526:	|  |  |  |  |  |      move.l d1,24(sp)
     52a:	|  |  |  |  |  |      movea.l 4(sp),a0
     52e:	|  |  |  |  |  |      adda.l d0,a0
     530:	|  |  |  |  |  |      move.b #95,(a0)
     534:	|  |  |  |  |  |      move.l 24(sp),d0
     538:	|  |  |  |  |  |      move.l d0,d1
     53a:	|  |  |  |  |  |      addq.l #1,d1
     53c:	|  |  |  |  |  |      move.l d1,24(sp)
     540:	|  |  |  |  |  |      movea.l 4(sp),a0
     544:	|  |  |  |  |  |      adda.l d0,a0
     546:	|  |  |  |  |  |      move.b #66,(a0)
     54a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case '/':	newName[i++] = '_';		newName[i++] = 'F';		break;
     54e:	|  |  |  |  |  |      move.l 24(sp),d0
     552:	|  |  |  |  |  |      move.l d0,d1
     554:	|  |  |  |  |  |      addq.l #1,d1
     556:	|  |  |  |  |  |      move.l d1,24(sp)
     55a:	|  |  |  |  |  |      movea.l 4(sp),a0
     55e:	|  |  |  |  |  |      adda.l d0,a0
     560:	|  |  |  |  |  |      move.b #95,(a0)
     564:	|  |  |  |  |  |      move.l 24(sp),d0
     568:	|  |  |  |  |  |      move.l d0,d1
     56a:	|  |  |  |  |  |      addq.l #1,d1
     56c:	|  |  |  |  |  |      move.l d1,24(sp)
     570:	|  |  |  |  |  |      movea.l 4(sp),a0
     574:	|  |  |  |  |  |      adda.l d0,a0
     576:	|  |  |  |  |  |      move.b #70,(a0)
     57a:	|  |  |  |  |  +----- bra.w 624 <encodeFilename+0x326>
				case ':':	newName[i++] = '_';		newName[i++] = 'C';		break;
     57e:	|  |  |  |  |  |      move.l 24(sp),d0
     582:	|  |  |  |  |  |      move.l d0,d1
     584:	|  |  |  |  |  |      addq.l #1,d1
     586:	|  |  |  |  |  |      move.l d1,24(sp)
     58a:	|  |  |  |  |  |      movea.l 4(sp),a0
     58e:	|  |  |  |  |  |      adda.l d0,a0
     590:	|  |  |  |  |  |      move.b #95,(a0)
     594:	|  |  |  |  |  |      move.l 24(sp),d0
     598:	|  |  |  |  |  |      move.l d0,d1
     59a:	|  |  |  |  |  |      addq.l #1,d1
     59c:	|  |  |  |  |  |      move.l d1,24(sp)
     5a0:	|  |  |  |  |  |      movea.l 4(sp),a0
     5a4:	|  |  |  |  |  |      adda.l d0,a0
     5a6:	|  |  |  |  |  |      move.b #67,(a0)
     5aa:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '*':	newName[i++] = '_';		newName[i++] = 'A';		break;
     5ac:	|  |  |  |  |  |      move.l 24(sp),d0
     5b0:	|  |  |  |  |  |      move.l d0,d1
     5b2:	|  |  |  |  |  |      addq.l #1,d1
     5b4:	|  |  |  |  |  |      move.l d1,24(sp)
     5b8:	|  |  |  |  |  |      movea.l 4(sp),a0
     5bc:	|  |  |  |  |  |      adda.l d0,a0
     5be:	|  |  |  |  |  |      move.b #95,(a0)
     5c2:	|  |  |  |  |  |      move.l 24(sp),d0
     5c6:	|  |  |  |  |  |      move.l d0,d1
     5c8:	|  |  |  |  |  |      addq.l #1,d1
     5ca:	|  |  |  |  |  |      move.l d1,24(sp)
     5ce:	|  |  |  |  |  |      movea.l 4(sp),a0
     5d2:	|  |  |  |  |  |      adda.l d0,a0
     5d4:	|  |  |  |  |  |      move.b #65,(a0)
     5d8:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>
				case '?':	newName[i++] = '_';		newName[i++] = 'Q';		break;
     5da:	|  |  |  |  |  |      move.l 24(sp),d0
     5de:	|  |  |  |  |  |      move.l d0,d1
     5e0:	|  |  |  |  |  |      addq.l #1,d1
     5e2:	|  |  |  |  |  |      move.l d1,24(sp)
     5e6:	|  |  |  |  |  |      movea.l 4(sp),a0
     5ea:	|  |  |  |  |  |      adda.l d0,a0
     5ec:	|  |  |  |  |  |      move.b #95,(a0)
     5f0:	|  |  |  |  |  |      move.l 24(sp),d0
     5f4:	|  |  |  |  |  |      move.l d0,d1
     5f6:	|  |  |  |  |  |      addq.l #1,d1
     5f8:	|  |  |  |  |  |      move.l d1,24(sp)
     5fc:	|  |  |  |  |  |      movea.l 4(sp),a0
     600:	|  |  |  |  |  |      adda.l d0,a0
     602:	|  |  |  |  |  |      move.b #81,(a0)
     606:	|  |  |  |  |  +----- bra.s 624 <encodeFilename+0x326>

				default:	newName[i++] = *nameIn;							break;
     608:	|  |  |  |  \--|----> move.l 24(sp),d0
     60c:	|  |  |  |     |      move.l d0,d1
     60e:	|  |  |  |     |      addq.l #1,d1
     610:	|  |  |  |     |      move.l d1,24(sp)
     614:	|  |  |  |     |      movea.l 4(sp),a0
     618:	|  |  |  |     |      adda.l d0,a0
     61a:	|  |  |  |     |      movea.l 32(sp),a1
     61e:	|  |  |  |     |      move.b (a1),d0
     620:	|  |  |  |     |      move.b d0,(a0)
     622:	|  |  |  |     |      nop
			}
			newName[i] = 0;
     624:	|  |  |  |     \----> move.l 24(sp),d0
     628:	|  |  |  |            movea.l 4(sp),a0
     62c:	|  |  |  |            adda.l d0,a0
     62e:	|  |  |  |            clr.b (a0)
			nameIn ++;
     630:	|  |  |  |            addq.l #1,32(sp)
		while (*nameIn) {
     634:	|  |  |  \----------> movea.l 32(sp),a0
     638:	|  |  |               move.b (a0),d0
     63a:	|  |  \-------------- bne.w 372 <encodeFilename+0x74>
		}
		return newName;
     63e:	|  |                  move.l 4(sp),d0
     642:	+--|----------------- bra.s 688 <encodeFilename+0x38a>
	} else {
		int a;
		for (a = 0; nameIn[a]; a ++) {
     644:	|  \----------------> clr.l 20(sp)
     648:	|              /----- bra.s 66e <encodeFilename+0x370>
			if (nameIn[a] == '\\') nameIn[a] ='/';
     64a:	|           /--|----> move.l 20(sp),d0
     64e:	|           |  |      movea.l 32(sp),a0
     652:	|           |  |      adda.l d0,a0
     654:	|           |  |      move.b (a0),d0
     656:	|           |  |      cmpi.b #92,d0
     65a:	|           |  |  /-- bne.s 66a <encodeFilename+0x36c>
     65c:	|           |  |  |   move.l 20(sp),d0
     660:	|           |  |  |   movea.l 32(sp),a0
     664:	|           |  |  |   adda.l d0,a0
     666:	|           |  |  |   move.b #47,(a0)
		for (a = 0; nameIn[a]; a ++) {
     66a:	|           |  |  \-> addq.l #1,20(sp)
     66e:	|           |  \----> move.l 20(sp),d0
     672:	|           |         movea.l 32(sp),a0
     676:	|           |         adda.l d0,a0
     678:	|           |         move.b (a0),d0
     67a:	|           \-------- bne.s 64a <encodeFilename+0x34c>
		}

		return copyString (nameIn);
     67c:	|                     move.l 32(sp),-(sp)
     680:	|                     jsr b8 <copyString>
     686:	|                     addq.l #4,sp
	}
}
     688:	\-------------------> movea.l (sp)+,a6
     68a:	                      lea 24(sp),sp
     68e:	                      rts

00000690 <FLOATSwap>:

FLOAT FLOATSwap( FLOAT f )
{
     690:	subq.l #8,sp
	{
		FLOAT f;
		unsigned char b[4];
	} dat1, dat2;

	dat1.f = f;
     692:	move.l 12(sp),4(sp)
	dat2.b[0] = dat1.b[3];
     698:	move.b 7(sp),d0
     69c:	move.b d0,(sp)
	dat2.b[1] = dat1.b[2];
     69e:	move.b 6(sp),d0
     6a2:	move.b d0,1(sp)
	dat2.b[2] = dat1.b[1];
     6a6:	move.b 5(sp),d0
     6aa:	move.b d0,2(sp)
	dat2.b[3] = dat1.b[0];
     6ae:	move.b 4(sp),d0
     6b2:	move.b d0,3(sp)
	return dat2.f;
     6b6:	move.l (sp),d0
}
     6b8:	addq.l #8,sp
     6ba:	rts

000006bc <get2bytes>:

int get2bytes (BPTR fp) {
     6bc:	lea -24(sp),sp
     6c0:	move.l a6,-(sp)
	int f1, f2;

	f1 = FGetC (fp);
     6c2:	move.l 32(sp),24(sp)
     6c8:	move.l 1a7ac <DOSBase>,d0
     6ce:	movea.l d0,a6
     6d0:	move.l 24(sp),d1
     6d4:	jsr -306(a6)
     6d8:	move.l d0,20(sp)
     6dc:	move.l 20(sp),d0
     6e0:	move.l d0,16(sp)
	f2 = FGetC (fp);
     6e4:	move.l 32(sp),12(sp)
     6ea:	move.l 1a7ac <DOSBase>,d0
     6f0:	movea.l d0,a6
     6f2:	move.l 12(sp),d1
     6f6:	jsr -306(a6)
     6fa:	move.l d0,8(sp)
     6fe:	move.l 8(sp),d0
     702:	move.l d0,4(sp)

	return (f1 * 256 + f2);
     706:	move.l 16(sp),d0
     70a:	lsl.l #8,d0
     70c:	add.l 4(sp),d0
}
     710:	movea.l (sp)+,a6
     712:	lea 24(sp),sp
     716:	rts

00000718 <get4bytes>:

ULONG get4bytes (BPTR fp) {
     718:	lea -52(sp),sp
     71c:	move.l a6,-(sp)
	int f1, f2, f3, f4;

	f1 = FGetC (fp);
     71e:	move.l 60(sp),52(sp)
     724:	move.l 1a7ac <DOSBase>,d0
     72a:	movea.l d0,a6
     72c:	move.l 52(sp),d1
     730:	jsr -306(a6)
     734:	move.l d0,48(sp)
     738:	move.l 48(sp),d0
     73c:	move.l d0,44(sp)
	f2 = FGetC (fp);
     740:	move.l 60(sp),40(sp)
     746:	move.l 1a7ac <DOSBase>,d0
     74c:	movea.l d0,a6
     74e:	move.l 40(sp),d1
     752:	jsr -306(a6)
     756:	move.l d0,36(sp)
     75a:	move.l 36(sp),d0
     75e:	move.l d0,32(sp)
	f3 = FGetC (fp);
     762:	move.l 60(sp),28(sp)
     768:	move.l 1a7ac <DOSBase>,d0
     76e:	movea.l d0,a6
     770:	move.l 28(sp),d1
     774:	jsr -306(a6)
     778:	move.l d0,24(sp)
     77c:	move.l 24(sp),d0
     780:	move.l d0,20(sp)
	f4 = FGetC (fp);
     784:	move.l 60(sp),16(sp)
     78a:	move.l 1a7ac <DOSBase>,d0
     790:	movea.l d0,a6
     792:	move.l 16(sp),d1
     796:	jsr -306(a6)
     79a:	move.l d0,12(sp)
     79e:	move.l 12(sp),d0
     7a2:	move.l d0,8(sp)

	ULONG x = f1 + f2*256 + f3*256*256 + f4*256*256*256;
     7a6:	move.l 32(sp),d0
     7aa:	lsl.l #8,d0
     7ac:	move.l d0,d1
     7ae:	add.l 44(sp),d1
     7b2:	move.l 20(sp),d0
     7b6:	swap d0
     7b8:	clr.w d0
     7ba:	add.l d0,d1
     7bc:	move.l 8(sp),d0
     7c0:	lsl.w #8,d0
     7c2:	swap d0
     7c4:	clr.w d0
     7c6:	add.l d1,d0
     7c8:	move.l d0,4(sp)

	return x;
     7cc:	move.l 4(sp),d0
}
     7d0:	movea.l (sp)+,a6
     7d2:	lea 52(sp),sp
     7d6:	rts

000007d8 <getFloat>:

FLOAT getFloat (BPTR fp) {
     7d8:	    lea -28(sp),sp
     7dc:	    movem.l d2-d4/a6,-(sp)
	FLOAT f;
	LONG blocks_read = FRead( fp, &f, sizeof (FLOAT), 1 ); 
     7e0:	    move.l 48(sp),40(sp)
     7e6:	    lea 44(sp),a0
     7ea:	    lea -28(a0),a0
     7ee:	    move.l a0,36(sp)
     7f2:	    moveq #4,d0
     7f4:	    move.l d0,32(sp)
     7f8:	    moveq #1,d0
     7fa:	    move.l d0,28(sp)
     7fe:	    move.l 1a7ac <DOSBase>,d0
     804:	    movea.l d0,a6
     806:	    move.l 40(sp),d1
     80a:	    move.l 36(sp),d2
     80e:	    move.l 32(sp),d3
     812:	    move.l 28(sp),d4
     816:	    jsr -324(a6)
     81a:	    move.l d0,24(sp)
     81e:	    move.l 24(sp),d0
     822:	    move.l d0,20(sp)
	if (blocks_read != 1) {
     826:	    moveq #1,d0
     828:	    cmp.l 20(sp),d0
     82c:	/-- beq.s 83c <getFloat+0x64>
		KPrintF("Reading error in getFloat.\n");
     82e:	|   pea 17760 <PutChar+0x2e>
     834:	|   jsr 16c5e <KPrintF>
     83a:	|   addq.l #4,sp
	}
	return FLOATSwap(f);
     83c:	\-> move.l 16(sp),d0
     840:	    move.l d0,-(sp)
     842:	    jsr 690 <FLOATSwap>
     848:	    addq.l #4,sp
	return f;
}
     84a:	    movem.l (sp)+,d2-d4/a6
     84e:	    lea 28(sp),sp
     852:	    rts

00000854 <getSigned>:

short getSigned (BPTR fp) {
     854:	    lea -24(sp),sp
     858:	    movem.l d2-d3/a6,-(sp)
	short f;
	LONG bytes_read = Read(fp, &f, sizeof(short));
     85c:	    move.l 40(sp),32(sp)
     862:	    lea 36(sp),a0
     866:	    lea -22(a0),a0
     86a:	    move.l a0,28(sp)
     86e:	    moveq #2,d0
     870:	    move.l d0,24(sp)
     874:	    move.l 1a7ac <DOSBase>,d0
     87a:	    movea.l d0,a6
     87c:	    move.l 32(sp),d1
     880:	    move.l 28(sp),d2
     884:	    move.l 24(sp),d3
     888:	    jsr -42(a6)
     88c:	    move.l d0,20(sp)
     890:	    move.l 20(sp),d0
     894:	    move.l d0,16(sp)
	if (bytes_read != sizeof (short)) {
     898:	    moveq #2,d0
     89a:	    cmp.l 16(sp),d0
     89e:	/-- beq.s 8ae <getSigned+0x5a>
		KPrintF("getSigned: Reading error in getSigned.\n");
     8a0:	|   pea 1777c <PutChar+0x4a>
     8a6:	|   jsr 16c5e <KPrintF>
     8ac:	|   addq.l #4,sp
	}
	f = shortSwap(f);
     8ae:	\-> move.w 14(sp),d0
     8b2:	    movea.w d0,a0
     8b4:	    move.l a0,-(sp)
     8b6:	    jsr baa <shortSwap>
     8bc:	    addq.l #4,sp
     8be:	    move.w d0,14(sp)
	return f;
     8c2:	    move.w 14(sp),d0
}
     8c6:	    movem.l (sp)+,d2-d3/a6
     8ca:	    lea 24(sp),sp
     8ce:	    rts

000008d0 <put2bytes>:

void put2bytes (int numtoput, BPTR fp) {
     8d0:	    lea -24(sp),sp
     8d4:	    move.l a6,-(sp)
     8d6:	    move.l d2,-(sp)
	FPutC( fp, (char) (numtoput / 256));
     8d8:	    move.l 40(sp),28(sp)
     8de:	    move.l 36(sp),d0
     8e2:	/-- bpl.s 8ea <put2bytes+0x1a>
     8e4:	|   addi.l #255,d0
     8ea:	\-> asr.l #8,d0
     8ec:	    move.l d0,d0
     8ee:	    ext.w d0
     8f0:	    movea.w d0,a0
     8f2:	    move.l a0,24(sp)
     8f6:	    move.l 1a7ac <DOSBase>,d0
     8fc:	    movea.l d0,a6
     8fe:	    move.l 28(sp),d1
     902:	    move.l 24(sp),d2
     906:	    jsr -312(a6)
     90a:	    move.l d0,20(sp)
	FPutC( fp, (char) (numtoput % 256));
     90e:	    move.l 40(sp),16(sp)
     914:	    move.l 36(sp),d0
     918:	    andi.l #-2147483393,d0
     91e:	/-- bpl.s 92a <put2bytes+0x5a>
     920:	|   subq.l #1,d0
     922:	|   moveq #-1,d1
     924:	|   not.b d1
     926:	|   or.l d1,d0
     928:	|   addq.l #1,d0
     92a:	\-> move.l d0,d0
     92c:	    ext.w d0
     92e:	    movea.w d0,a0
     930:	    move.l a0,12(sp)
     934:	    move.l 1a7ac <DOSBase>,d0
     93a:	    movea.l d0,a6
     93c:	    move.l 16(sp),d1
     940:	    move.l 12(sp),d2
     944:	    jsr -312(a6)
     948:	    move.l d0,8(sp)
}
     94c:	    nop
     94e:	    move.l (sp)+,d2
     950:	    movea.l (sp)+,a6
     952:	    lea 24(sp),sp
     956:	    rts

00000958 <put4bytes>:

void put4bytes (ULONG i, BPTR fp) {
     958:	lea -52(sp),sp
     95c:	move.l a6,-(sp)
     95e:	move.l d2,-(sp)
	//	fwrite (&i, sizeof (long int), 1, fp);
	unsigned char f1, f2, f3, f4;

	f4 = i / (256*256*256);
     960:	move.l 64(sp),d0
     964:	clr.w d0
     966:	swap d0
     968:	lsr.w #8,d0
     96a:	move.b d0,59(sp)
	i = i % (256*256*256);
     96e:	andi.l #16777215,64(sp)
	f3 = i / (256*256);
     976:	move.l 64(sp),d0
     97a:	clr.w d0
     97c:	swap d0
     97e:	move.b d0,58(sp)
	i = i % (256*256);
     982:	andi.l #65535,64(sp)
	f2 = i / 256;
     98a:	move.l 64(sp),d0
     98e:	lsr.l #8,d0
     990:	move.b d0,57(sp)
	f1 = i % 256;
     994:	move.b 67(sp),56(sp)

	FPutC (fp,f1);
     99a:	move.l 68(sp),52(sp)
     9a0:	moveq #0,d0
     9a2:	move.b 56(sp),d0
     9a6:	move.l d0,48(sp)
     9aa:	move.l 1a7ac <DOSBase>,d0
     9b0:	movea.l d0,a6
     9b2:	move.l 52(sp),d1
     9b6:	move.l 48(sp),d2
     9ba:	jsr -312(a6)
     9be:	move.l d0,44(sp)
	FPutC (fp,f2);
     9c2:	move.l 68(sp),40(sp)
     9c8:	moveq #0,d0
     9ca:	move.b 57(sp),d0
     9ce:	move.l d0,36(sp)
     9d2:	move.l 1a7ac <DOSBase>,d0
     9d8:	movea.l d0,a6
     9da:	move.l 40(sp),d1
     9de:	move.l 36(sp),d2
     9e2:	jsr -312(a6)
     9e6:	move.l d0,32(sp)
	FPutC (fp,f3);
     9ea:	move.l 68(sp),28(sp)
     9f0:	moveq #0,d0
     9f2:	move.b 58(sp),d0
     9f6:	move.l d0,24(sp)
     9fa:	move.l 1a7ac <DOSBase>,d0
     a00:	movea.l d0,a6
     a02:	move.l 28(sp),d1
     a06:	move.l 24(sp),d2
     a0a:	jsr -312(a6)
     a0e:	move.l d0,20(sp)
	FPutC (fp,f4);
     a12:	move.l 68(sp),16(sp)
     a18:	moveq #0,d0
     a1a:	move.b 59(sp),d0
     a1e:	move.l d0,12(sp)
     a22:	move.l 1a7ac <DOSBase>,d0
     a28:	movea.l d0,a6
     a2a:	move.l 16(sp),d1
     a2e:	move.l 12(sp),d2
     a32:	jsr -312(a6)
     a36:	move.l d0,8(sp)
}
     a3a:	nop
     a3c:	move.l (sp)+,d2
     a3e:	movea.l (sp)+,a6
     a40:	lea 52(sp),sp
     a44:	rts

00000a46 <putFloat>:

void putFloat (FLOAT f, BPTR fp) {
     a46:	lea -16(sp),sp
     a4a:	movem.l d2-d3/a6,-(sp)
	f = FLOATSwap(f);
     a4e:	move.l 32(sp),d0
     a52:	move.l d0,-(sp)
     a54:	jsr 690 <FLOATSwap>
     a5a:	addq.l #4,sp
     a5c:	move.l d0,32(sp)
	Write( fp, &f, sizeof (FLOAT));
     a60:	move.l 36(sp),24(sp)
     a66:	moveq #32,d0
     a68:	add.l sp,d0
     a6a:	move.l d0,20(sp)
     a6e:	moveq #4,d0
     a70:	move.l d0,16(sp)
     a74:	move.l 1a7ac <DOSBase>,d0
     a7a:	movea.l d0,a6
     a7c:	move.l 24(sp),d1
     a80:	move.l 20(sp),d2
     a84:	move.l 16(sp),d3
     a88:	jsr -48(a6)
     a8c:	move.l d0,12(sp)
}
     a90:	nop
     a92:	movem.l (sp)+,d2-d3/a6
     a96:	lea 16(sp),sp
     a9a:	rts

00000a9c <putSigned>:

void putSigned (short f, BPTR fp) {
     a9c:	lea -20(sp),sp
     aa0:	movem.l d2-d3/a6,-(sp)
     aa4:	move.l 36(sp),d0
     aa8:	move.w d0,d0
     aaa:	move.w d0,14(sp)
	f = shortSwap(f);
     aae:	move.w 14(sp),d0
     ab2:	movea.w d0,a0
     ab4:	move.l a0,-(sp)
     ab6:	jsr baa <shortSwap>
     abc:	addq.l #4,sp
     abe:	move.w d0,14(sp)
	Write(fp, &f, sizeof(short));
     ac2:	move.l 40(sp),28(sp)
     ac8:	lea 32(sp),a0
     acc:	lea -18(a0),a0
     ad0:	move.l a0,24(sp)
     ad4:	moveq #2,d0
     ad6:	move.l d0,20(sp)
     ada:	move.l 1a7ac <DOSBase>,d0
     ae0:	movea.l d0,a6
     ae2:	move.l 28(sp),d1
     ae6:	move.l 24(sp),d2
     aea:	move.l 20(sp),d3
     aee:	jsr -48(a6)
     af2:	move.l d0,16(sp)
}
     af6:	nop
     af8:	movem.l (sp)+,d2-d3/a6
     afc:	lea 20(sp),sp
     b00:	rts

00000b02 <readString>:

char * readString (BPTR fp) {
     b02:	          lea -32(sp),sp
     b06:	          move.l a6,-(sp)

	int a, len = get2bytes (fp);
     b08:	          move.l 40(sp),-(sp)
     b0c:	          jsr 6bc <get2bytes>
     b12:	          addq.l #4,sp
     b14:	          move.l d0,28(sp)
	//debugOut ("MOREIO: readString - len %i\n", len);
	char * s = AllocVec(len+1,MEMF_ANY);
     b18:	          move.l 28(sp),d0
     b1c:	          addq.l #1,d0
     b1e:	          move.l d0,24(sp)
     b22:	          clr.l 20(sp)
     b26:	          move.l 1a7a4 <SysBase>,d0
     b2c:	          movea.l d0,a6
     b2e:	          move.l 24(sp),d0
     b32:	          move.l 20(sp),d1
     b36:	          jsr -684(a6)
     b3a:	          move.l d0,16(sp)
     b3e:	          move.l 16(sp),d0
     b42:	          move.l d0,12(sp)
	if(s == 0) return NULL;
     b46:	      /-- bne.s b4c <readString+0x4a>
     b48:	      |   moveq #0,d0
     b4a:	/-----|-- bra.s ba2 <readString+0xa0>
	for (a = 0; a < len; a ++) {
     b4c:	|     \-> clr.l 32(sp)
     b50:	|     /-- bra.s b88 <readString+0x86>
		s[a] = (char) (FGetC (fp) - 1);
     b52:	|  /--|-> move.l 40(sp),8(sp)
     b58:	|  |  |   move.l 1a7ac <DOSBase>,d0
     b5e:	|  |  |   movea.l d0,a6
     b60:	|  |  |   move.l 8(sp),d1
     b64:	|  |  |   jsr -306(a6)
     b68:	|  |  |   move.l d0,4(sp)
     b6c:	|  |  |   move.l 4(sp),d0
     b70:	|  |  |   move.l d0,d0
     b72:	|  |  |   move.b d0,d1
     b74:	|  |  |   subq.b #1,d1
     b76:	|  |  |   move.l 32(sp),d0
     b7a:	|  |  |   movea.l 12(sp),a0
     b7e:	|  |  |   adda.l d0,a0
     b80:	|  |  |   move.b d1,d0
     b82:	|  |  |   move.b d0,(a0)
	for (a = 0; a < len; a ++) {
     b84:	|  |  |   addq.l #1,32(sp)
     b88:	|  |  \-> move.l 32(sp),d0
     b8c:	|  |      cmp.l 28(sp),d0
     b90:	|  \----- blt.s b52 <readString+0x50>
	}
	s[len] = 0;
     b92:	|         move.l 28(sp),d0
     b96:	|         movea.l 12(sp),a0
     b9a:	|         adda.l d0,a0
     b9c:	|         clr.b (a0)
	//debugOut ("MOREIO: readString: %s\n", s);
	return s;
     b9e:	|         move.l 12(sp),d0
}
     ba2:	\-------> movea.l (sp)+,a6
     ba4:	          lea 32(sp),sp
     ba8:	          rts

00000baa <shortSwap>:

short shortSwap( short s )
{
     baa:	subq.l #4,sp
     bac:	move.l 8(sp),d0
     bb0:	move.w d0,d0
     bb2:	move.w d0,(sp)
	unsigned char b1, b2;
	
	b1 = s & 255;
     bb4:	move.b 1(sp),3(sp)
	b2 = (s >> 8) & 255;
     bba:	move.w (sp),d0
     bbc:	asr.w #8,d0
     bbe:	move.b d0,2(sp)
	
	return (b1 << 8) + b2;
     bc2:	clr.w d0
     bc4:	move.b 3(sp),d0
     bc8:	move.w d0,d1
     bca:	lsl.w #8,d1
     bcc:	clr.w d0
     bce:	move.b 2(sp),d0
     bd2:	add.w d1,d0
}
     bd4:	addq.l #4,sp
     bd6:	rts

00000bd8 <writeString>:

void writeString (char * s, BPTR fp) {
     bd8:	       lea -20(sp),sp
     bdc:	       move.l a6,-(sp)
     bde:	       move.l d2,-(sp)
	int a, len = strlen (s);
     be0:	       move.l 32(sp),-(sp)
     be4:	       jsr 1374c <strlen>
     bea:	       addq.l #4,sp
     bec:	       move.l d0,20(sp)
	put2bytes (len, fp);
     bf0:	       move.l 36(sp),-(sp)
     bf4:	       move.l 24(sp),-(sp)
     bf8:	       jsr 8d0 <put2bytes>
     bfe:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
     c00:	       clr.l 24(sp)
     c04:	   /-- bra.s c40 <writeString+0x68>
		FPutC (fp,s[a] + 1);
     c06:	/--|-> move.l 36(sp),16(sp)
     c0c:	|  |   move.l 24(sp),d0
     c10:	|  |   movea.l 32(sp),a0
     c14:	|  |   adda.l d0,a0
     c16:	|  |   move.b (a0),d0
     c18:	|  |   ext.w d0
     c1a:	|  |   ext.l d0
     c1c:	|  |   move.l d0,d1
     c1e:	|  |   addq.l #1,d1
     c20:	|  |   move.l d1,12(sp)
     c24:	|  |   move.l 1a7ac <DOSBase>,d0
     c2a:	|  |   movea.l d0,a6
     c2c:	|  |   move.l 16(sp),d1
     c30:	|  |   move.l 12(sp),d2
     c34:	|  |   jsr -312(a6)
     c38:	|  |   move.l d0,8(sp)
	for (a = 0; a < len; a ++) {
     c3c:	|  |   addq.l #1,24(sp)
     c40:	|  \-> move.l 24(sp),d0
     c44:	|      cmp.l 20(sp),d0
     c48:	\----- blt.s c06 <writeString+0x2e>
	}
     c4a:	       nop
     c4c:	       nop
     c4e:	       move.l (sp)+,d2
     c50:	       movea.l (sp)+,a6
     c52:	       lea 20(sp),sp
     c56:	       rts

00000c58 <displayCursor>:
int mouseCursorFrameNum = 0;
int mouseCursorCountUp = 0;

extern struct inputType input;

void displayCursor () {
     c58:	    movem.l d2-d5,-(sp)

	
	if( mouseCursorAnim->theSprites)
     c5c:	    movea.l 1a6aa <mouseCursorAnim>,a0
     c62:	    move.l (a0),d0
     c64:	/-- beq.w d64 <displayCursor+0x10c>
	{		
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
			(UBYTE *) mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].data);
     c68:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c6e:	|   movea.l (a0),a0
     c70:	|   movea.l 16(a0),a1
     c74:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c7a:	|   movea.l 4(a0),a0
     c7e:	|   move.l (a0),d0
     c80:	|   move.l d0,d1
     c82:	|   move.l d1,d0
     c84:	|   lsl.l #3,d0
     c86:	|   sub.l d1,d0
     c88:	|   add.l d0,d0
     c8a:	|   add.l d0,d0
     c8c:	|   lea (0,a1,d0.l),a0
     c90:	|   movea.l 24(a0),a1
			mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].height,
     c94:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     c9a:	|   movea.l (a0),a0
     c9c:	|   move.l 16(a0),d2
     ca0:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ca6:	|   movea.l 4(a0),a0
     caa:	|   move.l (a0),d0
     cac:	|   move.l d0,d1
     cae:	|   move.l d1,d0
     cb0:	|   lsl.l #3,d0
     cb2:	|   sub.l d1,d0
     cb4:	|   add.l d0,d0
     cb6:	|   add.l d0,d0
     cb8:	|   movea.l d2,a0
     cba:	|   adda.l d0,a0
     cbc:	|   move.l 4(a0),d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     cc0:	|   move.l d0,d0
     cc2:	|   moveq #0,d3
     cc4:	|   move.w d0,d3
			input.mouseY + 44 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].yhot,
     cc6:	|   move.l 1a764 <input+0xe>,d0
     ccc:	|   move.l d0,d2
     cce:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     cd4:	|   movea.l (a0),a0
     cd6:	|   move.l 16(a0),d4
     cda:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     ce0:	|   movea.l 4(a0),a0
     ce4:	|   move.l (a0),d0
     ce6:	|   move.l d0,d1
     ce8:	|   move.l d1,d0
     cea:	|   lsl.l #3,d0
     cec:	|   sub.l d1,d0
     cee:	|   add.l d0,d0
     cf0:	|   add.l d0,d0
     cf2:	|   movea.l d4,a0
     cf4:	|   adda.l d0,a0
     cf6:	|   move.l 12(a0),d0
     cfa:	|   move.l d0,d0
     cfc:	|   move.w d2,d1
     cfe:	|   sub.w d0,d1
     d00:	|   move.w d1,d0
     d02:	|   addi.w #44,d0
		CstDisplayCursor( input.mouseX + 128 - mouseCursorAnim->theSprites->bank.sprites[mouseCursorAnim->frames->frameNum].xhot,
     d06:	|   moveq #0,d2
     d08:	|   move.w d0,d2
     d0a:	|   move.l 1a760 <input+0xa>,d0
     d10:	|   move.l d0,d4
     d12:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d18:	|   movea.l (a0),a0
     d1a:	|   move.l 16(a0),d5
     d1e:	|   movea.l 1a6aa <mouseCursorAnim>,a0
     d24:	|   movea.l 4(a0),a0
     d28:	|   move.l (a0),d0
     d2a:	|   move.l d0,d1
     d2c:	|   move.l d1,d0
     d2e:	|   lsl.l #3,d0
     d30:	|   sub.l d1,d0
     d32:	|   add.l d0,d0
     d34:	|   add.l d0,d0
     d36:	|   movea.l d5,a0
     d38:	|   adda.l d0,a0
     d3a:	|   move.l 8(a0),d0
     d3e:	|   move.l d0,d0
     d40:	|   move.w d4,d1
     d42:	|   sub.w d0,d1
     d44:	|   move.w d1,d0
     d46:	|   addi.w #128,d0
     d4a:	|   move.w d0,d0
     d4c:	|   andi.l #65535,d0
     d52:	|   move.l a1,-(sp)
     d54:	|   move.l d3,-(sp)
     d56:	|   move.l d2,-(sp)
     d58:	|   move.l d0,-(sp)
     d5a:	|   jsr 13ee <CstDisplayCursor>
     d60:	|   lea 16(sp),sp
	}
}
     d64:	\-> nop
     d66:	    movem.l (sp)+,d2-d5
     d6a:	    rts

00000d6c <pickAnimCursor>:

void pickAnimCursor (struct personaAnimation * pp) {
	deleteAnim (mouseCursorAnim);
     d6c:	move.l 1a6aa <mouseCursorAnim>,d0
     d72:	move.l d0,-(sp)
     d74:	jsr 93d2 <deleteAnim>
     d7a:	addq.l #4,sp
	mouseCursorAnim = pp;
     d7c:	move.l 4(sp),1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
     d84:	clr.l 1a6ae <mouseCursorFrameNum>
	mouseCursorCountUp = 0;
     d8a:	clr.l 1a6b2 <mouseCursorCountUp>
}
     d90:	nop
     d92:	rts

00000d94 <pasteCursor>:

void pasteCursor (int x, int y, struct personaAnimation * c) {
     d94:	subq.l #8,sp

				//int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
	
	struct sprite *spritetouse = &c->theSprites->bank.sprites[c->frames[0].frameNum];
     d96:	movea.l 20(sp),a0
     d9a:	movea.l (a0),a0
     d9c:	movea.l 16(a0),a0
     da0:	movea.l 20(sp),a1
     da4:	movea.l 4(a1),a1
     da8:	move.l (a1),d0
     daa:	move.l d0,d1
     dac:	move.l d1,d0
     dae:	lsl.l #3,d0
     db0:	sub.l d1,d0
     db2:	add.l d0,d0
     db4:	add.l d0,d0
     db6:	adda.l d0,a0
     db8:	move.l a0,4(sp)

	UWORD absx =  x - spritetouse->xhot;
     dbc:	move.l 12(sp),d0
     dc0:	movea.l 4(sp),a0
     dc4:	move.l 8(a0),d1
     dc8:	move.l d1,d1
     dca:	movea.w d0,a0
     dcc:	suba.w d1,a0
     dce:	move.w a0,2(sp)
	UWORD absy =  y - spritetouse->yhot;
     dd2:	move.l 16(sp),d0
     dd6:	movea.l 4(sp),a0
     dda:	move.l 12(a0),d1
     dde:	move.l d1,d1
     de0:	movea.w d0,a0
     de2:	suba.w d1,a0
     de4:	move.w a0,(sp)

	CstScaleSprite( spritetouse, (struct onScreenPerson *) NULL, absx, absy, BACKDROP);
     de6:	move.w (sp),d0
     de8:	movea.w d0,a1
     dea:	move.w 2(sp),d0
     dee:	movea.w d0,a0
     df0:	pea 2 <_start+0x2>
     df4:	move.l a1,-(sp)
     df6:	move.l a0,-(sp)
     df8:	clr.l -(sp)
     dfa:	move.l 20(sp),-(sp)
     dfe:	jsr 25c4 <CstScaleSprite>
     e04:	lea 20(sp),sp
     e08:	nop
     e0a:	addq.l #8,sp
     e0c:	rts

00000e0e <CstBlankScreen>:
    0x1900000, 0x1920000, 0x1940000, 0x1960000, 0x1980000, 0x19a0000, 0x19c0000, 0x19e0000,
    0x1a00000, 0x1a20000, 0x1a40000, 0x1a60000, 0x1a80000, 0x1aa0000, 0x1ac0000, 0x1ae0000,
    0x1b00000, 0x1b20000, 0x1b40000, 0x1b60000, 0x1b80000, 0x1ba0000, 0x1bc0000, 0x1be0000 
};

void CstBlankScreen( int width, int height) {
     e0e:	          lea -16(sp),sp
     e12:	          move.l a6,-(sp)

  KPrintF("CstBlankScreen: started\n");
     e14:	          pea 177a4 <PutChar+0x72>
     e1a:	          jsr 16c5e <KPrintF>
     e20:	          addq.l #4,sp

  if( !CstBackDrop) {
     e22:	          move.l 1a6c6 <CstBackDrop>,d0
     e28:	      /-- bne.s e3c <CstBlankScreen+0x2e>
    KPrintF("CstBlankScreen: Backdrop empty nothing to do\n");
     e2a:	      |   pea 177bd <PutChar+0x8b>
     e30:	      |   jsr 16c5e <KPrintF>
     e36:	      |   addq.l #4,sp
    return;
     e38:	/-----|-- bra.w fc6 <CstBlankScreen+0x1b8>
  }

  CstPaletteLoaded = 0;
     e3c:	|     \-> clr.w 1a6c0 <CstPaletteLoaded>

  volatile struct Custom *custom = (struct Custom*)0xdff000;
     e42:	|         move.l #14675968,8(sp)

  width /= 16;
     e4a:	|         move.l 24(sp),d0
     e4e:	|         movea.l d0,a0
     e50:	|         cmpa.w #0,a0
     e54:	|     /-- bge.s e5a <CstBlankScreen+0x4c>
     e56:	|     |   lea 15(a0),a0
     e5a:	|     \-> move.l a0,d0
     e5c:	|         asr.l #4,d0
     e5e:	|         move.l d0,24(sp)

  WaitBlit();
     e62:	|         move.l 1a7b0 <GfxBase>,d0
     e68:	|         movea.l d0,a6
     e6a:	|         jsr -228(a6)

  //Both Buffers need to be done
  custom->bltafwm = 0xffff;
     e6e:	|         movea.l 8(sp),a0
     e72:	|         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
     e78:	|         movea.l 8(sp),a0
     e7c:	|         move.w #-1,70(a0)
  custom->bltamod = 0;
     e82:	|         movea.l 8(sp),a0
     e86:	|         move.w #0,100(a0)
  custom->bltbmod = 0;
     e8c:	|         movea.l 8(sp),a0
     e90:	|         move.w #0,98(a0)
  custom->bltcmod = 0;
     e96:	|         movea.l 8(sp),a0
     e9a:	|         move.w #0,96(a0)
  custom->bltdmod = 0;
     ea0:	|         movea.l 8(sp),a0
     ea4:	|         move.w #0,102(a0)
  custom->bltcon1 = 0;
     eaa:	|         movea.l 8(sp),a0
     eae:	|         move.w #0,66(a0)
  custom->bltcon0 = 0x0100;
     eb4:	|         movea.l 8(sp),a0
     eb8:	|         move.w #256,64(a0)
  ULONG bltdpt = (ULONG) CstBackDrop;
     ebe:	|         move.l 1a6c6 <CstBackDrop>,d0
     ec4:	|         move.l d0,16(sp)
  UWORD bltsize = height*64+width;    
     ec8:	|         move.l 28(sp),d0
     ecc:	|         lsl.w #6,d0
     ece:	|         move.l 24(sp),d1
     ed2:	|         movea.w d0,a0
     ed4:	|         adda.w d1,a0
     ed6:	|         move.w a0,6(sp)
  UWORD blitsize = width*height*2;
     eda:	|         move.l 24(sp),d1
     ede:	|         move.l 28(sp),d0
     ee2:	|         muls.w d1,d0
     ee4:	|         add.w d0,d0
     ee6:	|         move.w d0,4(sp)

  KPrintF("CstBlankScreen: Starting Blits\n");
     eea:	|         pea 177eb <PutChar+0xb9>
     ef0:	|         jsr 16c5e <KPrintF>
     ef6:	|         addq.l #4,sp

  for(int i2=0;i2<5;i2++)
     ef8:	|         clr.l 12(sp)
     efc:	|     /-- bra.s f2e <CstBlankScreen+0x120>
  {            
    custom->bltdpt = (APTR) bltdpt;
     efe:	|  /--|-> move.l 16(sp),d0
     f02:	|  |  |   movea.l 8(sp),a0
     f06:	|  |  |   move.l d0,84(a0)
    custom->bltsize = bltsize;            
     f0a:	|  |  |   movea.l 8(sp),a0
     f0e:	|  |  |   move.w 6(sp),88(a0)
    WaitBlit();
     f14:	|  |  |   move.l 1a7b0 <GfxBase>,d0
     f1a:	|  |  |   movea.l d0,a6
     f1c:	|  |  |   jsr -228(a6)
    bltdpt += blitsize;
     f20:	|  |  |   moveq #0,d0
     f22:	|  |  |   move.w 4(sp),d0
     f26:	|  |  |   add.l d0,16(sp)
  for(int i2=0;i2<5;i2++)
     f2a:	|  |  |   addq.l #1,12(sp)
     f2e:	|  |  \-> moveq #4,d0
     f30:	|  |      cmp.l 12(sp),d0
     f34:	|  \----- bge.s efe <CstBlankScreen+0xf0>
  }

  KPrintF("CstBlankScreen: Finished Blits\n");
     f36:	|         pea 1780b <PutChar+0xd9>
     f3c:	|         jsr 16c5e <KPrintF>
     f42:	|         addq.l #4,sp

  CstApplyBackDropCounter = 2;
     f44:	|         move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
     f4c:	|         move.l 1a6f8 <winWidth>,d0
     f52:	|         lsr.l #4,d0
     f54:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f5a:	|         move.l a0,d1
     f5c:	|         addq.l #2,d1
     f5e:	|         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
     f64:	|         move.l d0,d0
     f66:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
     f68:	|         move.l 1a6fc <winHeight>,d0
     f6e:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f74:	|         move.l a0,d1
     f76:	|         addq.l #2,d1
     f78:	|         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
     f7e:	|         move.l d0,d0
     f80:	|         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f82:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f88:	|         move.l a0,d0
     f8a:	|         addq.l #2,d0
     f8c:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     f92:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     f94:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     f9a:	|         move.l a0,d0
     f9c:	|         addq.l #2,d0
     f9e:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     fa4:	|         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
     fa6:	|         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
     fac:	|         move.l a0,d0
     fae:	|         addq.l #2,d0
     fb0:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
     fb6:	|         clr.w (a0)

  KPrintF("CstBlankScreen: end\n");
     fb8:	|         pea 1782b <PutChar+0xf9>
     fbe:	|         jsr 16c5e <KPrintF>
     fc4:	|         addq.l #4,sp


}
     fc6:	\-------> movea.l (sp)+,a6
     fc8:	          lea 16(sp),sp
     fcc:	          rts

00000fce <CstCreateCopperlist>:

UWORD * CstCreateCopperlist( int width) {
     fce:	       lea -52(sp),sp
     fd2:	       move.l a6,-(sp)
     fd4:	       move.l d2,-(sp)
  
  ULONG *retval = AllocMem(  CSTCOPSIZE, MEMF_CHIP);
     fd6:	       move.l #400,32(sp)
     fde:	       moveq #2,d0
     fe0:	       move.l d0,28(sp)
     fe4:	       move.l 1a7a4 <SysBase>,d0
     fea:	       movea.l d0,a6
     fec:	       move.l 32(sp),d0
     ff0:	       move.l 28(sp),d1
     ff4:	       jsr -198(a6)
     ff8:	       move.l d0,24(sp)
     ffc:	       move.l 24(sp),d0
    1000:	       move.l d0,20(sp)
  
  if( retval == 0) {
    1004:	   /-- bne.s 102e <CstCreateCopperlist+0x60>
    KPrintF("CstCreateCopperlist: Allocation of Ram for Copper failed.\n", 40);
    1006:	   |   pea 28 <_start+0x28>
    100a:	   |   pea 17840 <PutChar+0x10e>
    1010:	   |   jsr 16c5e <KPrintF>
    1016:	   |   addq.l #8,sp
    Exit(1);
    1018:	   |   moveq #1,d1
    101a:	   |   move.l d1,16(sp)
    101e:	   |   move.l 1a7ac <DOSBase>,d0
    1024:	   |   movea.l d0,a6
    1026:	   |   move.l 16(sp),d1
    102a:	   |   jsr -144(a6)
  }
  ULONG *cl = retval;
    102e:	   \-> move.l 20(sp),56(sp)
  CstClCursor = (UWORD *)cl;
    1034:	       move.l 56(sp),1a6f4 <CstClCursor>

  ULONG *clpartinstruction;
  clpartinstruction = CstClSprites;
    103c:	       move.l #106498,52(sp)
  for(int i=0; i<16;i++)
    1044:	       clr.l 48(sp)
    1048:	   /-- bra.s 106e <CstCreateCopperlist+0xa0>
    *cl++ = *clpartinstruction++;
    104a:	/--|-> move.l 52(sp),d1
    104e:	|  |   move.l d1,d2
    1050:	|  |   addq.l #4,d2
    1052:	|  |   move.l d2,52(sp)
    1056:	|  |   move.l 56(sp),d0
    105a:	|  |   move.l d0,d2
    105c:	|  |   addq.l #4,d2
    105e:	|  |   move.l d2,56(sp)
    1062:	|  |   movea.l d1,a0
    1064:	|  |   move.l (a0),d1
    1066:	|  |   movea.l d0,a0
    1068:	|  |   move.l d1,(a0)
  for(int i=0; i<16;i++)
    106a:	|  |   addq.l #1,48(sp)
    106e:	|  \-> moveq #15,d0
    1070:	|      cmp.l 48(sp),d0
    1074:	\----- bge.s 104a <CstCreateCopperlist+0x7c>

  clpartinstruction = CstClScreen;
    1076:	       move.l #106562,52(sp)

  for(int i=0; i<12;i++)
    107e:	       clr.l 44(sp)
    1082:	   /-- bra.s 10a8 <CstCreateCopperlist+0xda>
    *cl++ = *clpartinstruction++;
    1084:	/--|-> move.l 52(sp),d1
    1088:	|  |   move.l d1,d2
    108a:	|  |   addq.l #4,d2
    108c:	|  |   move.l d2,52(sp)
    1090:	|  |   move.l 56(sp),d0
    1094:	|  |   move.l d0,d2
    1096:	|  |   addq.l #4,d2
    1098:	|  |   move.l d2,56(sp)
    109c:	|  |   movea.l d1,a0
    109e:	|  |   move.l (a0),d1
    10a0:	|  |   movea.l d0,a0
    10a2:	|  |   move.l d1,(a0)
  for(int i=0; i<12;i++)
    10a4:	|  |   addq.l #1,44(sp)
    10a8:	|  \-> moveq #11,d0
    10aa:	|      cmp.l 44(sp),d0
    10ae:	\----- bge.s 1084 <CstCreateCopperlist+0xb6>

  clpartinstruction = CstClBitplanes;
    10b0:	       move.l #106610,52(sp)
  for(int i=0; i<10;i++)
    10b8:	       clr.l 40(sp)
    10bc:	   /-- bra.s 10e2 <CstCreateCopperlist+0x114>
    *cl++ = *clpartinstruction++;        
    10be:	/--|-> move.l 52(sp),d1
    10c2:	|  |   move.l d1,d2
    10c4:	|  |   addq.l #4,d2
    10c6:	|  |   move.l d2,52(sp)
    10ca:	|  |   move.l 56(sp),d0
    10ce:	|  |   move.l d0,d2
    10d0:	|  |   addq.l #4,d2
    10d2:	|  |   move.l d2,56(sp)
    10d6:	|  |   movea.l d1,a0
    10d8:	|  |   move.l (a0),d1
    10da:	|  |   movea.l d0,a0
    10dc:	|  |   move.l d1,(a0)
  for(int i=0; i<10;i++)
    10de:	|  |   addq.l #1,40(sp)
    10e2:	|  \-> moveq #9,d0
    10e4:	|      cmp.l 40(sp),d0
    10e8:	\----- bge.s 10be <CstCreateCopperlist+0xf0>

  
  clpartinstruction = CstClColorTemplate;
    10ea:	       move.l #106650,52(sp)
  CstClColor = (UWORD *) cl;
    10f2:	       move.l 56(sp),1a6ec <CstClColor>
  for(int i=0; i<32;i++)
    10fa:	       clr.l 36(sp)
    10fe:	   /-- bra.s 1124 <CstCreateCopperlist+0x156>
    *cl++ = *clpartinstruction++;        
    1100:	/--|-> move.l 52(sp),d1
    1104:	|  |   move.l d1,d2
    1106:	|  |   addq.l #4,d2
    1108:	|  |   move.l d2,52(sp)
    110c:	|  |   move.l 56(sp),d0
    1110:	|  |   move.l d0,d2
    1112:	|  |   addq.l #4,d2
    1114:	|  |   move.l d2,56(sp)
    1118:	|  |   movea.l d1,a0
    111a:	|  |   move.l (a0),d1
    111c:	|  |   movea.l d0,a0
    111e:	|  |   move.l d1,(a0)
  for(int i=0; i<32;i++)
    1120:	|  |   addq.l #1,36(sp)
    1124:	|  \-> moveq #31,d0
    1126:	|      cmp.l 36(sp),d0
    112a:	\----- bge.s 1100 <CstCreateCopperlist+0x132>
 
  /* Screen is bigger than real screen? Setup BPLxMod accordingly*/
  if(width > 40) {
    112c:	       moveq #40,d1
    112e:	       cmp.l 64(sp),d1
    1132:	   /-- bge.s 1190 <CstCreateCopperlist+0x1c2>
    int tmp = width - 40;
    1134:	   |   moveq #-40,d2
    1136:	   |   add.l 64(sp),d2
    113a:	   |   move.l d2,12(sp)
    UWORD *cw = (UWORD *) cl; 
    113e:	   |   move.l 56(sp),8(sp)
    *cw++ = 0x108;
    1144:	   |   move.l 8(sp),d0
    1148:	   |   move.l d0,d1
    114a:	   |   addq.l #2,d1
    114c:	   |   move.l d1,8(sp)
    1150:	   |   movea.l d0,a0
    1152:	   |   move.w #264,(a0)
    *cw++ = tmp;
    1156:	   |   move.l 8(sp),d0
    115a:	   |   move.l d0,d1
    115c:	   |   addq.l #2,d1
    115e:	   |   move.l d1,8(sp)
    1162:	   |   move.l 12(sp),d1
    1166:	   |   movea.l d0,a0
    1168:	   |   move.w d1,(a0)
    *cw++ = 0x10a;
    116a:	   |   move.l 8(sp),d0
    116e:	   |   move.l d0,d1
    1170:	   |   addq.l #2,d1
    1172:	   |   move.l d1,8(sp)
    1176:	   |   movea.l d0,a0
    1178:	   |   move.w #266,(a0)
    *cw++ = tmp;     
    117c:	   |   move.l 8(sp),d0
    1180:	   |   move.l d0,d1
    1182:	   |   addq.l #2,d1
    1184:	   |   move.l d1,8(sp)
    1188:	   |   move.l 12(sp),d1
    118c:	   |   movea.l d0,a0
    118e:	   |   move.w d1,(a0)
  }

  *cl++ = 0xfffffffe;
    1190:	   \-> move.l 56(sp),d0
    1194:	       move.l d0,d1
    1196:	       addq.l #4,d1
    1198:	       move.l d1,56(sp)
    119c:	       moveq #-2,d2
    119e:	       movea.l d0,a0
    11a0:	       move.l d2,(a0)
  return (UWORD *) retval;  
    11a2:	       move.l 20(sp),d0
}
    11a6:	       move.l (sp)+,d2
    11a8:	       movea.l (sp)+,a6
    11aa:	       lea 52(sp),sp
    11ae:	       rts

000011b0 <CstDisplayBackDrop>:

void CstDisplayBackDrop() 
{
    11b0:	                lea -40(sp),sp
    11b4:	                move.l a6,-(sp)
    11b6:	                move.l d2,-(sp)
 volatile struct Custom *custom = (struct Custom*)0xdff000;  
    11b8:	                move.l #14675968,16(sp)

  KPrintF("CstDisplayBackDrop: Started");
    11c0:	                pea 1787b <PutChar+0x149>
    11c6:	                jsr 16c5e <KPrintF>
    11cc:	                addq.l #4,sp

  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    11ce:	                move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    11d4:	                move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
  UWORD *cursor = CstBackDropBufferApplyStart;
    11da:	                move.l 1a6e4 <CstBackDropBufferApplyStart>,44(sp)
  if(!*cursor || !CstDrawBuffer) {
    11e2:	                movea.l 44(sp),a0
    11e6:	                move.w (a0),d0
    11e8:	/-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    11ec:	|               move.l 1a6d8 <CstDrawBuffer>,d0
    11f2:	+-------------- beq.w 13e2 <CstDisplayBackDrop+0x232>
    return;
  } 

  WaitBlit();
    11f6:	|               move.l 1a7b0 <GfxBase>,d0
    11fc:	|               movea.l d0,a6
    11fe:	|               jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    1202:	|               movea.l 16(sp),a0
    1206:	|               move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    120c:	|               movea.l 16(sp),a0
    1210:	|               move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    1216:	|               movea.l 16(sp),a0
    121a:	|               move.w #2544,64(a0)
  
  while(*cursor)
    1220:	|     /-------- bra.w 1388 <CstDisplayBackDrop+0x1d8>
  {    
    UWORD width = *cursor++;
    1224:	|  /--|-------> move.l 44(sp),d0
    1228:	|  |  |         move.l d0,d1
    122a:	|  |  |         addq.l #2,d1
    122c:	|  |  |         move.l d1,44(sp)
    1230:	|  |  |         movea.l d0,a0
    1232:	|  |  |         move.w (a0),14(sp)
    UWORD height = *cursor++;
    1236:	|  |  |         move.l 44(sp),d0
    123a:	|  |  |         move.l d0,d1
    123c:	|  |  |         addq.l #2,d1
    123e:	|  |  |         move.l d1,44(sp)
    1242:	|  |  |         movea.l d0,a0
    1244:	|  |  |         move.w (a0),12(sp)
    UWORD xpos = *cursor++;
    1248:	|  |  |         move.l 44(sp),d0
    124c:	|  |  |         move.l d0,d1
    124e:	|  |  |         addq.l #2,d1
    1250:	|  |  |         move.l d1,44(sp)
    1254:	|  |  |         movea.l d0,a0
    1256:	|  |  |         move.w (a0),10(sp)
    UWORD ypos = *cursor++;
    125a:	|  |  |         move.l 44(sp),d0
    125e:	|  |  |         move.l d0,d1
    1260:	|  |  |         addq.l #2,d1
    1262:	|  |  |         move.l d1,44(sp)
    1266:	|  |  |         movea.l d0,a0
    1268:	|  |  |         move.w (a0),8(sp)

    custom->bltamod = winWidth/8-width*2;
    126c:	|  |  |         move.l 1a6f8 <winWidth>,d0
    1272:	|  |  |         lsr.l #3,d0
    1274:	|  |  |         move.l d0,d1
    1276:	|  |  |         move.w 14(sp),d0
    127a:	|  |  |         add.w d0,d0
    127c:	|  |  |         sub.w d0,d1
    127e:	|  |  |         movea.l 16(sp),a0
    1282:	|  |  |         move.w d1,100(a0)
    custom->bltdmod = winWidth/8-width*2;
    1286:	|  |  |         move.l 1a6f8 <winWidth>,d0
    128c:	|  |  |         lsr.l #3,d0
    128e:	|  |  |         move.l d0,d1
    1290:	|  |  |         move.w 14(sp),d0
    1294:	|  |  |         add.w d0,d0
    1296:	|  |  |         sub.w d0,d1
    1298:	|  |  |         movea.l 16(sp),a0
    129c:	|  |  |         move.w d1,102(a0)
    ULONG bltapt = ((ULONG) CstBackDrop) + ypos*winWidth/8 + xpos;
    12a0:	|  |  |         moveq #0,d0
    12a2:	|  |  |         move.w 8(sp),d0
    12a6:	|  |  |         move.l 1a6f8 <winWidth>,d1
    12ac:	|  |  |         move.l d1,-(sp)
    12ae:	|  |  |         move.l d0,-(sp)
    12b0:	|  |  |         jsr 1761c <__mulsi3>
    12b6:	|  |  |         addq.l #8,sp
    12b8:	|  |  |         move.l d0,d1
    12ba:	|  |  |         lsr.l #3,d1
    12bc:	|  |  |         move.l 1a6c6 <CstBackDrop>,d0
    12c2:	|  |  |         add.l d0,d1
    12c4:	|  |  |         moveq #0,d0
    12c6:	|  |  |         move.w 10(sp),d0
    12ca:	|  |  |         move.l d1,d2
    12cc:	|  |  |         add.l d0,d2
    12ce:	|  |  |         move.l d2,40(sp)
    ULONG bltdpt = ((ULONG) CstDrawBuffer) + ypos*winWidth/8 + xpos;
    12d2:	|  |  |         moveq #0,d0
    12d4:	|  |  |         move.w 8(sp),d0
    12d8:	|  |  |         move.l 1a6f8 <winWidth>,d1
    12de:	|  |  |         move.l d1,-(sp)
    12e0:	|  |  |         move.l d0,-(sp)
    12e2:	|  |  |         jsr 1761c <__mulsi3>
    12e8:	|  |  |         addq.l #8,sp
    12ea:	|  |  |         move.l d0,d1
    12ec:	|  |  |         lsr.l #3,d1
    12ee:	|  |  |         move.l 1a6d8 <CstDrawBuffer>,d0
    12f4:	|  |  |         add.l d0,d1
    12f6:	|  |  |         moveq #0,d0
    12f8:	|  |  |         move.w 10(sp),d0
    12fc:	|  |  |         move.l d1,d2
    12fe:	|  |  |         add.l d0,d2
    1300:	|  |  |         move.l d2,36(sp)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    1304:	|  |  |         clr.l 32(sp)
    1308:	|  |  |     /-- bra.s 1380 <CstDisplayBackDrop+0x1d0>
    {
      custom->bltapt = (APTR) bltapt;
    130a:	|  |  |  /--|-> move.l 40(sp),d0
    130e:	|  |  |  |  |   movea.l 16(sp),a0
    1312:	|  |  |  |  |   move.l d0,80(a0)
      custom->bltdpt = (APTR) bltdpt;
    1316:	|  |  |  |  |   move.l 36(sp),d0
    131a:	|  |  |  |  |   movea.l 16(sp),a0
    131e:	|  |  |  |  |   move.l d0,84(a0)
      custom->bltsize = (height << 6) + width;
    1322:	|  |  |  |  |   move.w 12(sp),d0
    1326:	|  |  |  |  |   lsl.w #6,d0
    1328:	|  |  |  |  |   add.w 14(sp),d0
    132c:	|  |  |  |  |   movea.l 16(sp),a0
    1330:	|  |  |  |  |   move.w d0,88(a0)
      bltapt += winWidth/8*winHeight;
    1334:	|  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    133a:	|  |  |  |  |   lsr.l #3,d0
    133c:	|  |  |  |  |   move.l 1a6fc <winHeight>,d1
    1342:	|  |  |  |  |   move.l d1,-(sp)
    1344:	|  |  |  |  |   move.l d0,-(sp)
    1346:	|  |  |  |  |   jsr 1761c <__mulsi3>
    134c:	|  |  |  |  |   addq.l #8,sp
    134e:	|  |  |  |  |   add.l d0,40(sp)
      bltdpt += winWidth/8*winHeight;
    1352:	|  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    1358:	|  |  |  |  |   lsr.l #3,d0
    135a:	|  |  |  |  |   move.l 1a6fc <winHeight>,d1
    1360:	|  |  |  |  |   move.l d1,-(sp)
    1362:	|  |  |  |  |   move.l d0,-(sp)
    1364:	|  |  |  |  |   jsr 1761c <__mulsi3>
    136a:	|  |  |  |  |   addq.l #8,sp
    136c:	|  |  |  |  |   add.l d0,36(sp)
      WaitBlit();
    1370:	|  |  |  |  |   move.l 1a7b0 <GfxBase>,d0
    1376:	|  |  |  |  |   movea.l d0,a6
    1378:	|  |  |  |  |   jsr -228(a6)
    for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    137c:	|  |  |  |  |   addq.l #1,32(sp)
    1380:	|  |  |  |  \-> moveq #4,d0
    1382:	|  |  |  |      cmp.l 32(sp),d0
    1386:	|  |  |  \----- bge.s 130a <CstDisplayBackDrop+0x15a>
  while(*cursor)
    1388:	|  |  \-------> movea.l 44(sp),a0
    138c:	|  |            move.w (a0),d0
    138e:	|  \----------- bne.w 1224 <CstDisplayBackDrop+0x74>
    }  
  }
  UWORD *colorpos = CstPalette;
    1392:	|               move.l 1a6f0 <CstPalette>,28(sp)
  
  UWORD *tmp = CstClColor;
    139a:	|               move.l 1a6ec <CstClColor>,24(sp)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13a2:	|               clr.l 20(sp)
    13a6:	|           /-- bra.s 13d8 <CstDisplayBackDrop+0x228>
    *tmp++;
    13a8:	|        /--|-> move.l 24(sp),d0
    13ac:	|        |  |   move.l d0,d1
    13ae:	|        |  |   addq.l #2,d1
    13b0:	|        |  |   move.l d1,24(sp)
    *tmp++ = *colorpos++;
    13b4:	|        |  |   move.l 28(sp),d1
    13b8:	|        |  |   move.l d1,d2
    13ba:	|        |  |   addq.l #2,d2
    13bc:	|        |  |   move.l d2,28(sp)
    13c0:	|        |  |   move.l 24(sp),d0
    13c4:	|        |  |   move.l d0,d2
    13c6:	|        |  |   addq.l #2,d2
    13c8:	|        |  |   move.l d2,24(sp)
    13cc:	|        |  |   movea.l d1,a0
    13ce:	|        |  |   move.w (a0),d1
    13d0:	|        |  |   movea.l d0,a0
    13d2:	|        |  |   move.w d1,(a0)
  for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes
    13d4:	|        |  |   addq.l #1,20(sp)
    13d8:	|        |  \-> moveq #31,d0
    13da:	|        |      cmp.l 20(sp),d0
    13de:	|        \----- bge.s 13a8 <CstDisplayBackDrop+0x1f8>
    13e0:	|           /-- bra.s 13e4 <CstDisplayBackDrop+0x234>
    return;
    13e2:	\-----------|-> nop
  }
}
    13e4:	            \-> move.l (sp)+,d2
    13e6:	                movea.l (sp)+,a6
    13e8:	                lea 40(sp),sp
    13ec:	                rts

000013ee <CstDisplayCursor>:

void CstDisplayCursor(UWORD x, UWORD y, UWORD height, UBYTE *spritedata)
{
    13ee:	lea -20(sp),sp
    13f2:	movea.l 24(sp),a0
    13f6:	move.l 28(sp),d1
    13fa:	move.l 32(sp),d0
    13fe:	movea.w a0,a0
    1400:	move.w a0,4(sp)
    1404:	move.w d1,d1
    1406:	move.w d1,2(sp)
    140a:	move.w d0,d0
    140c:	move.w d0,(sp)
  spritedata[0] = (UBYTE) (y & 0xff); //Low 8 Bits of y
    140e:	move.w 2(sp),d0
    1412:	movea.l 36(sp),a0
    1416:	move.b d0,(a0)
  spritedata[1] = (UBYTE) (x >> 1); //High 8 Bits of x
    1418:	move.w 4(sp),d0
    141c:	lsr.w #1,d0
    141e:	movea.l 36(sp),a0
    1422:	addq.l #1,a0
    1424:	move.l d0,d0
    1426:	move.b d0,(a0)
  spritedata[2] = (UBYTE) (y+height & 0xff); //Sprite Stop Low 8 Bits
    1428:	move.w 2(sp),d1
    142c:	move.w (sp),d0
    142e:	movea.l 36(sp),a0
    1432:	addq.l #2,a0
    1434:	add.b d1,d0
    1436:	move.b d0,(a0)

  UWORD lowbitx = x & 0x1;
    1438:	move.w 4(sp),d0
    143c:	andi.w #1,d0
    1440:	move.w d0,18(sp)
  UWORD vstophighbit = ((y+height) & 0x100) >> 7;
    1444:	move.w 2(sp),d0
    1448:	add.w (sp),d0
    144a:	move.w d0,d0
    144c:	andi.l #65535,d0
    1452:	asr.l #7,d0
    1454:	move.l d0,d0
    1456:	move.w d0,d1
    1458:	andi.w #2,d1
    145c:	move.w d1,16(sp)
  UWORD vstarthighbit = (y & 0x100) >> 6;
    1460:	moveq #0,d0
    1462:	move.w 2(sp),d0
    1466:	asr.l #6,d0
    1468:	move.l d0,d0
    146a:	move.w d0,d1
    146c:	andi.w #4,d1
    1470:	move.w d1,14(sp)

  spritedata[3] = lowbitx + vstophighbit + vstarthighbit; //Low Bit X, Sprite Stop High Bit
    1474:	move.w 18(sp),d1
    1478:	move.w 16(sp),d0
    147c:	add.b d0,d1
    147e:	move.w 14(sp),d0
    1482:	movea.l 36(sp),a0
    1486:	addq.l #3,a0
    1488:	add.b d1,d0
    148a:	move.b d0,(a0)

  ULONG ptr = (ULONG) spritedata; 
    148c:	move.l 36(sp),10(sp)
  UWORD loptr = (UWORD) ptr & 0xffff;
    1492:	move.w 12(sp),8(sp)
  UWORD hiptr = ptr >> 16;
    1498:	move.l 10(sp),d0
    149c:	clr.w d0
    149e:	swap d0
    14a0:	move.w d0,6(sp)

  CstClCursor[1] = hiptr;
    14a4:	move.l 1a6f4 <CstClCursor>,d0
    14aa:	movea.l d0,a0
    14ac:	addq.l #2,a0
    14ae:	move.w 6(sp),(a0)
  CstClCursor[3] = loptr;
    14b2:	move.l 1a6f4 <CstClCursor>,d0
    14b8:	movea.l d0,a0
    14ba:	addq.l #6,a0
    14bc:	move.w 8(sp),(a0)

}
    14c0:	nop
    14c2:	lea 20(sp),sp
    14c6:	rts

000014c8 <CstDrawBackdrop>:

void CstDrawBackdrop() {  
  if(CstApplyBackDropCounter > 0) 
    14c8:	    move.w 1a6d2 <CstApplyBackDropCounter>,d0
    14ce:	/-- beq.s 14e4 <CstDrawBackdrop+0x1c>
  {
    CstDisplayBackDrop();
    14d0:	|   jsr 11b0 <CstDisplayBackDrop>
    CstApplyBackDropCounter--;
    14d6:	|   move.w 1a6d2 <CstApplyBackDropCounter>,d0
    14dc:	|   subq.w #1,d0
    14de:	|   move.w d0,1a6d2 <CstApplyBackDropCounter>
  }    
}
    14e4:	\-> nop
    14e6:	    rts

000014e8 <CstFreeBuffer>:

void CstFreeBuffer( ) {
    14e8:	    lea -20(sp),sp
    14ec:	    move.l a6,-(sp)
  if( CstDrawBuffer) FreeVec(CstDrawBuffer);
    14ee:	    move.l 1a6d8 <CstDrawBuffer>,d0
    14f4:	/-- beq.s 150e <CstFreeBuffer+0x26>
    14f6:	|   move.l 1a6d8 <CstDrawBuffer>,20(sp)
    14fe:	|   move.l 1a7a4 <SysBase>,d0
    1504:	|   movea.l d0,a6
    1506:	|   movea.l 20(sp),a1
    150a:	|   jsr -690(a6)
  if( CstViewBuffer) FreeVec(CstViewBuffer);
    150e:	\-> move.l 1a6d4 <CstViewBuffer>,d0
    1514:	/-- beq.s 152e <CstFreeBuffer+0x46>
    1516:	|   move.l 1a6d4 <CstViewBuffer>,16(sp)
    151e:	|   move.l 1a7a4 <SysBase>,d0
    1524:	|   movea.l d0,a6
    1526:	|   movea.l 16(sp),a1
    152a:	|   jsr -690(a6)
  if( CstCopperList) FreeVec(CstCopperList);  
    152e:	\-> move.l 1a6ce <CstCopperList>,d0
    1534:	/-- beq.s 154e <CstFreeBuffer+0x66>
    1536:	|   move.l 1a6ce <CstCopperList>,12(sp)
    153e:	|   move.l 1a7a4 <SysBase>,d0
    1544:	|   movea.l d0,a6
    1546:	|   movea.l 12(sp),a1
    154a:	|   jsr -690(a6)
  if( CstBackDrop) FreeVec(CstBackDrop);  
    154e:	\-> move.l 1a6c6 <CstBackDrop>,d0
    1554:	/-- beq.s 156e <CstFreeBuffer+0x86>
    1556:	|   move.l 1a6c6 <CstBackDrop>,8(sp)
    155e:	|   move.l 1a7a4 <SysBase>,d0
    1564:	|   movea.l d0,a6
    1566:	|   movea.l 8(sp),a1
    156a:	|   jsr -690(a6)
  if( CstBackDropBackup) FreeVec(CstBackDropBackup);
    156e:	\-> move.l 1a6ca <CstBackDropBackup>,d0
    1574:	/-- beq.s 158e <CstFreeBuffer+0xa6>
    1576:	|   move.l 1a6ca <CstBackDropBackup>,4(sp)
    157e:	|   move.l 1a7a4 <SysBase>,d0
    1584:	|   movea.l d0,a6
    1586:	|   movea.l 4(sp),a1
    158a:	|   jsr -690(a6)
  CstDrawBuffer = NULL;
    158e:	\-> clr.l 1a6d8 <CstDrawBuffer>
  CstViewBuffer = NULL;
    1594:	    clr.l 1a6d4 <CstViewBuffer>
  CstCopperList = NULL;
    159a:	    clr.l 1a6ce <CstCopperList>
  CstBackDrop = NULL;
    15a0:	    clr.l 1a6c6 <CstBackDrop>

}
    15a6:	    nop
    15a8:	    movea.l (sp)+,a6
    15aa:	    lea 20(sp),sp
    15ae:	    rts

000015b0 <CstFreeze>:



void CstFreeze( ) {
    15b0:	       lea -36(sp),sp
    15b4:	       move.l a6,-(sp)
    15b6:	       move.l d2,-(sp)

	KPrintF("CstFreeze: Freezing Background Started");  
    15b8:	       pea 17897 <PutChar+0x165>
    15be:	       jsr 16c5e <KPrintF>
    15c4:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    15c6:	       move.l 1a6f8 <winWidth>,d0
    15cc:	       lsr.l #3,d0
    15ce:	       move.l d0,d1
    15d0:	       move.l 1a6fc <winHeight>,d0
    15d6:	       move.l d0,d0
    15d8:	       muls.w d0,d1
    15da:	       move.w d1,d0
    15dc:	       add.w d0,d0
    15de:	       add.w d0,d0
    15e0:	       move.w d0,d2
    15e2:	       add.w d1,d2
    15e4:	       move.w d2,26(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    15e8:	       move.l #14675968,22(sp)

  //Backup Existing Backdrop to save location
  CstBackDropBackup = AllocVec(size, MEMF_ANY);
    15f0:	       moveq #0,d0
    15f2:	       move.w 26(sp),d0
    15f6:	       move.l d0,18(sp)
    15fa:	       clr.l 14(sp)
    15fe:	       move.l 1a7a4 <SysBase>,d0
    1604:	       movea.l d0,a6
    1606:	       move.l 18(sp),d0
    160a:	       move.l 14(sp),d1
    160e:	       jsr -684(a6)
    1612:	       move.l d0,10(sp)
    1616:	       move.l 10(sp),d0
    161a:	       move.l d0,1a6ca <CstBackDropBackup>
  if( !CstBackDropBackup)
    1620:	       move.l 1a6ca <CstBackDropBackup>,d0
    1626:	   /-- bne.s 1636 <CstFreeze+0x86>
  {
    KPrintF("CstFreeze: Cannot allocate Memory for CstBackDropBackup");
    1628:	   |   pea 178be <PutChar+0x18c>
    162e:	   |   jsr 16c5e <KPrintF>
    1634:	   |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    1636:	   \-> move.l 1a6fc <winHeight>,d0
    163c:	       move.l d0,d0
    163e:	       movea.w d0,a1
    1640:	       move.l 1a6f8 <winWidth>,d0
    1646:	       move.l d0,d0
    1648:	       movea.w d0,a0
    164a:	       move.l 1a6ca <CstBackDropBackup>,d0
    1650:	       clr.l -(sp)
    1652:	       pea 5 <_start+0x5>
    1656:	       move.l a1,-(sp)
    1658:	       move.l a0,-(sp)
    165a:	       pea 178f6 <PutChar+0x1c4>
    1660:	       move.l d0,-(sp)
    1662:	       jsr 16d46 <debug_register_bitmap>
    1668:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDrop;
    166c:	       move.l 1a6c6 <CstBackDrop>,40(sp)
  ULONG *dst = (ULONG *) CstBackDropBackup;
    1674:	       move.l 1a6ca <CstBackDropBackup>,36(sp)
  for(int i=0;i<size/4;i++) 
    167c:	       clr.l 32(sp)
    1680:	   /-- bra.s 16a6 <CstFreeze+0xf6>
  {
    *dst++ = *src++;
    1682:	/--|-> move.l 40(sp),d1
    1686:	|  |   move.l d1,d0
    1688:	|  |   addq.l #4,d0
    168a:	|  |   move.l d0,40(sp)
    168e:	|  |   move.l 36(sp),d0
    1692:	|  |   move.l d0,d2
    1694:	|  |   addq.l #4,d2
    1696:	|  |   move.l d2,36(sp)
    169a:	|  |   movea.l d1,a0
    169c:	|  |   move.l (a0),d1
    169e:	|  |   movea.l d0,a0
    16a0:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    16a2:	|  |   addq.l #1,32(sp)
    16a6:	|  \-> move.w 26(sp),d0
    16aa:	|      lsr.w #2,d0
    16ac:	|      move.w d0,d0
    16ae:	|      andi.l #65535,d0
    16b4:	|      cmp.l 32(sp),d0
    16b8:	\----- bgt.s 1682 <CstFreeze+0xd2>
  }

  //Replace existing Backdrop with ViewBuffer
  src = (ULONG *) CstViewBuffer;
    16ba:	       move.l 1a6d4 <CstViewBuffer>,40(sp)
  dst = (ULONG *) CstBackDrop;
    16c2:	       move.l 1a6c6 <CstBackDrop>,36(sp)

  for(int i=0;i<size/4;i++) 
    16ca:	       clr.l 28(sp)
    16ce:	   /-- bra.s 16f4 <CstFreeze+0x144>
  {
    *dst++ = *src++;
    16d0:	/--|-> move.l 40(sp),d1
    16d4:	|  |   move.l d1,d0
    16d6:	|  |   addq.l #4,d0
    16d8:	|  |   move.l d0,40(sp)
    16dc:	|  |   move.l 36(sp),d0
    16e0:	|  |   move.l d0,d2
    16e2:	|  |   addq.l #4,d2
    16e4:	|  |   move.l d2,36(sp)
    16e8:	|  |   movea.l d1,a0
    16ea:	|  |   move.l (a0),d1
    16ec:	|  |   movea.l d0,a0
    16ee:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    16f0:	|  |   addq.l #1,28(sp)
    16f4:	|  \-> move.w 26(sp),d0
    16f8:	|      lsr.w #2,d0
    16fa:	|      move.w d0,d0
    16fc:	|      andi.l #65535,d0
    1702:	|      cmp.l 28(sp),d0
    1706:	\----- bgt.s 16d0 <CstFreeze+0x120>
  }

  CstApplyBackDropCounter = 2;
    1708:	       move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1710:	       move.l 1a6f8 <winWidth>,d0
    1716:	       lsr.l #4,d0
    1718:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    171e:	       move.l a0,d1
    1720:	       addq.l #2,d1
    1722:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1728:	       move.l d0,d0
    172a:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    172c:	       move.l 1a6fc <winHeight>,d0
    1732:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1738:	       move.l a0,d1
    173a:	       addq.l #2,d1
    173c:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1742:	       move.l d0,d0
    1744:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1746:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    174c:	       move.l a0,d0
    174e:	       addq.l #2,d0
    1750:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1756:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1758:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    175e:	       move.l a0,d0
    1760:	       addq.l #2,d0
    1762:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1768:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    176a:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1770:	       move.l a0,d0
    1772:	       addq.l #2,d0
    1774:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    177a:	       clr.w (a0)

  KPrintF("CstFreeze: Finished");
    177c:	       pea 17905 <PutChar+0x1d3>
    1782:	       jsr 16c5e <KPrintF>
    1788:	       addq.l #4,sp

}  
    178a:	       nop
    178c:	       move.l (sp)+,d2
    178e:	       movea.l (sp)+,a6
    1790:	       lea 36(sp),sp
    1794:	       rts

00001796 <CstLoadBackdrop>:

void CstLoadBackdrop( BPTR fp, int x, int y) {
    1796:	             lea -144(sp),sp
    179a:	             movem.l d2-d4/a6,-(sp)

	KPrintF("CstLoadBackDrop: Loading of Background started");
    179e:	             pea 17919 <PutChar+0x1e7>
    17a4:	             jsr 16c5e <KPrintF>
    17aa:	             addq.l #4,sp

  UWORD width = get2bytes(fp);
    17ac:	             move.l 164(sp),-(sp)
    17b0:	             jsr 6bc <get2bytes>
    17b6:	             addq.l #4,sp
    17b8:	             move.w d0,134(sp)
  UWORD height = get2bytes(fp);  
    17bc:	             move.l 164(sp),-(sp)
    17c0:	             jsr 6bc <get2bytes>
    17c6:	             addq.l #4,sp
    17c8:	             move.w d0,132(sp)

  UWORD widthbyteslayer = width/8;
    17cc:	             move.w 134(sp),d0
    17d0:	             lsr.w #3,d0
    17d2:	             move.w d0,130(sp)
  UWORD widthwordslayer = widthbyteslayer/2;  
    17d6:	             move.w 130(sp),d0
    17da:	             lsr.w #1,d0
    17dc:	             move.w d0,128(sp)
  UWORD widthbytesbackdrop = winWidth / 8;
    17e0:	             move.l 1a6f8 <winWidth>,d0
    17e6:	             lsr.l #3,d0
    17e8:	             move.w d0,126(sp)
  UWORD sizeplane =  widthbyteslayer*height;
    17ec:	             move.w 130(sp),d0
    17f0:	             muls.w 132(sp),d0
    17f4:	             move.w d0,124(sp)
  UWORD size = sizeplane * 5; //Todo other number of bitplanes
    17f8:	             move.w 124(sp),d1
    17fc:	             move.w d1,d0
    17fe:	             add.w d0,d0
    1800:	             add.w d0,d0
    1802:	             move.w d0,d2
    1804:	             add.w d1,d2
    1806:	             move.w d2,122(sp)

  //Load Palette to Copper
  if( CstPaletteLoaded == 0)
    180a:	             move.w 1a6c0 <CstPaletteLoaded>,d0
    1810:	/----------- bne.w 18aa <CstLoadBackdrop+0x114>
  {    
    UWORD reg = 0x180;
    1814:	|            move.w #384,120(sp)

    if(CstPalette) {
    181a:	|            move.l 1a6f0 <CstPalette>,d0
    1820:	|        /-- beq.s 183a <CstLoadBackdrop+0xa4>
      FreeVec(CstPalette);
    1822:	|        |   move.l 1a6f0 <CstPalette>,116(sp)
    182a:	|        |   move.l 1a7a4 <SysBase>,d0
    1830:	|        |   movea.l d0,a6
    1832:	|        |   movea.l 116(sp),a1
    1836:	|        |   jsr -690(a6)
    }

    CstPalette = AllocVec(32*2,MEMF_ANY); //ToDo other number of bitplanes
    183a:	|        \-> moveq #64,d0
    183c:	|            move.l d0,112(sp)
    1840:	|            clr.l 108(sp)
    1844:	|            move.l 1a7a4 <SysBase>,d0
    184a:	|            movea.l d0,a6
    184c:	|            move.l 112(sp),d0
    1850:	|            move.l 108(sp),d1
    1854:	|            jsr -684(a6)
    1858:	|            move.l d0,104(sp)
    185c:	|            move.l 104(sp),d0
    1860:	|            move.l d0,1a6f0 <CstPalette>
    CstPaletteLoaded = 1;
    1866:	|            move.w #1,1a6c0 <CstPaletteLoaded>
    UWORD *tmp = CstPalette;
    186e:	|            move.l 1a6f0 <CstPalette>,156(sp)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    1876:	|            clr.l 152(sp)
    187a:	|        /-- bra.s 18a0 <CstLoadBackdrop+0x10a>
      *tmp++ = get2bytes(fp);
    187c:	|     /--|-> move.l 164(sp),-(sp)
    1880:	|     |  |   jsr 6bc <get2bytes>
    1886:	|     |  |   addq.l #4,sp
    1888:	|     |  |   move.l d0,d1
    188a:	|     |  |   move.l 156(sp),d0
    188e:	|     |  |   move.l d0,d2
    1890:	|     |  |   addq.l #2,d2
    1892:	|     |  |   move.l d2,156(sp)
    1896:	|     |  |   move.l d1,d1
    1898:	|     |  |   movea.l d0,a0
    189a:	|     |  |   move.w d1,(a0)
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    189c:	|     |  |   addq.l #1,152(sp)
    18a0:	|     |  \-> moveq #31,d0
    18a2:	|     |      cmp.l 152(sp),d0
    18a6:	|     \----- bge.s 187c <CstLoadBackdrop+0xe6>
    18a8:	|  /-------- bra.s 18c8 <CstLoadBackdrop+0x132>
    }
  }
  else
  //There's already a palette loaded for this background. Do not load palette
  {
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    18aa:	\--|-------> clr.l 148(sp)
    18ae:	   |     /-- bra.s 18c0 <CstLoadBackdrop+0x12a>
      get2bytes(fp);
    18b0:	   |  /--|-> move.l 164(sp),-(sp)
    18b4:	   |  |  |   jsr 6bc <get2bytes>
    18ba:	   |  |  |   addq.l #4,sp
    for(int i=0;i<32;i++) { //ToDo Support other number of bitplanes   
    18bc:	   |  |  |   addq.l #1,148(sp)
    18c0:	   |  |  \-> moveq #31,d2
    18c2:	   |  |      cmp.l 148(sp),d2
    18c6:	   |  \----- bge.s 18b0 <CstLoadBackdrop+0x11a>
    }
  }

  //Load Picture From Disk
  UWORD *tmpbuffer = AllocVec(size, MEMF_CHIP); //Todo other number of bitplanes
    18c8:	   \-------> moveq #0,d0
    18ca:	             move.w 122(sp),d0
    18ce:	             move.l d0,100(sp)
    18d2:	             moveq #2,d0
    18d4:	             move.l d0,96(sp)
    18d8:	             move.l 1a7a4 <SysBase>,d0
    18de:	             movea.l d0,a6
    18e0:	             move.l 100(sp),d0
    18e4:	             move.l 96(sp),d1
    18e8:	             jsr -684(a6)
    18ec:	             move.l d0,92(sp)
    18f0:	             move.l 92(sp),d0
    18f4:	             move.l d0,88(sp)
  if( !tmpbuffer)
    18f8:	         /-- bne.s 1908 <CstLoadBackdrop+0x172>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpbuffer");
    18fa:	         |   pea 17948 <PutChar+0x216>
    1900:	         |   jsr 16c5e <KPrintF>
    1906:	         |   addq.l #4,sp
  }
  UWORD *tmpmask = AllocVec(sizeplane, MEMF_CHIP);
    1908:	         \-> moveq #0,d0
    190a:	             move.w 124(sp),d0
    190e:	             move.l d0,84(sp)
    1912:	             moveq #2,d2
    1914:	             move.l d2,80(sp)
    1918:	             move.l 1a7a4 <SysBase>,d0
    191e:	             movea.l d0,a6
    1920:	             move.l 84(sp),d0
    1924:	             move.l 80(sp),d1
    1928:	             jsr -684(a6)
    192c:	             move.l d0,76(sp)
    1930:	             move.l 76(sp),d0
    1934:	             move.l d0,72(sp)
  if( !tmpmask)
    1938:	         /-- bne.s 1948 <CstLoadBackdrop+0x1b2>
  {
    KPrintF("CstLoadBackDrop: Cannot allocate Memory for tmpmask");
    193a:	         |   pea 1797e <PutChar+0x24c>
    1940:	         |   jsr 16c5e <KPrintF>
    1946:	         |   addq.l #4,sp
  }

#ifdef EMULATOR
  debug_register_bitmap(tmpbuffer, "tmpbuffer.bpl", width, height, 5, 0);
    1948:	         \-> move.w 132(sp),d0
    194c:	             movea.w d0,a1
    194e:	             move.w 134(sp),d0
    1952:	             movea.w d0,a0
    1954:	             clr.l -(sp)
    1956:	             pea 5 <_start+0x5>
    195a:	             move.l a1,-(sp)
    195c:	             move.l a0,-(sp)
    195e:	             pea 179b2 <PutChar+0x280>
    1964:	             move.l 108(sp),-(sp)
    1968:	             jsr 16d46 <debug_register_bitmap>
    196e:	             lea 24(sp),sp
  debug_register_bitmap(tmpbuffer, "tmpmask.bpl", width, height, 1, 0);
    1972:	             move.w 132(sp),d0
    1976:	             movea.w d0,a1
    1978:	             move.w 134(sp),d0
    197c:	             movea.w d0,a0
    197e:	             clr.l -(sp)
    1980:	             pea 1 <_start+0x1>
    1984:	             move.l a1,-(sp)
    1986:	             move.l a0,-(sp)
    1988:	             pea 179c0 <PutChar+0x28e>
    198e:	             move.l 108(sp),-(sp)
    1992:	             jsr 16d46 <debug_register_bitmap>
    1998:	             lea 24(sp),sp
#endif  

  UWORD count = FRead( fp, tmpbuffer, 2, size/2);
    199c:	             move.l 164(sp),68(sp)
    19a2:	             move.l 88(sp),64(sp)
    19a8:	             moveq #2,d0
    19aa:	             move.l d0,60(sp)
    19ae:	             move.w 122(sp),d0
    19b2:	             lsr.w #1,d0
    19b4:	             move.w d0,d0
    19b6:	             andi.l #65535,d0
    19bc:	             move.l d0,56(sp)
    19c0:	             move.l 1a7ac <DOSBase>,d0
    19c6:	             movea.l d0,a6
    19c8:	             move.l 68(sp),d1
    19cc:	             move.l 64(sp),d2
    19d0:	             move.l 60(sp),d3
    19d4:	             move.l 56(sp),d4
    19d8:	             jsr -324(a6)
    19dc:	             move.l d0,52(sp)
    19e0:	             move.l 52(sp),d0
    19e4:	             move.w d0,50(sp)
  if(!count) {
    19e8:	         /-- bne.s 19fc <CstLoadBackdrop+0x266>
    KPrintF("Error while reading stream");
    19ea:	         |   pea 179cc <PutChar+0x29a>
    19f0:	         |   jsr 16c5e <KPrintF>
    19f6:	         |   addq.l #4,sp
    return;
    19f8:	   /-----|-- bra.w 1c48 <CstLoadBackdrop+0x4b2>
  }  
  count = FRead( fp, tmpmask, 2, sizeplane/2);
    19fc:	   |     \-> move.l 164(sp),46(sp)
    1a02:	   |         move.l 72(sp),42(sp)
    1a08:	   |         moveq #2,d2
    1a0a:	   |         move.l d2,38(sp)
    1a0e:	   |         move.w 124(sp),d0
    1a12:	   |         lsr.w #1,d0
    1a14:	   |         move.w d0,d0
    1a16:	   |         andi.l #65535,d0
    1a1c:	   |         move.l d0,34(sp)
    1a20:	   |         move.l 1a7ac <DOSBase>,d0
    1a26:	   |         movea.l d0,a6
    1a28:	   |         move.l 46(sp),d1
    1a2c:	   |         move.l 42(sp),d2
    1a30:	   |         move.l 38(sp),d3
    1a34:	   |         move.l 34(sp),d4
    1a38:	   |         jsr -324(a6)
    1a3c:	   |         move.l d0,30(sp)
    1a40:	   |         move.l 30(sp),d0
    1a44:	   |         move.w d0,50(sp)
   

  if(!count) {
    1a48:	   |     /-- bne.s 1a5c <CstLoadBackdrop+0x2c6>
    KPrintF("Error while reading stream");
    1a4a:	   |     |   pea 179cc <PutChar+0x29a>
    1a50:	   |     |   jsr 16c5e <KPrintF>
    1a56:	   |     |   addq.l #4,sp
    return;
    1a58:	   +-----|-- bra.w 1c48 <CstLoadBackdrop+0x4b2>
  }

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    1a5c:	   |     \-> move.l #14675968,26(sp)

  ULONG backdropcursor = (ULONG) CstBackDrop; 
    1a64:	   |         move.l 1a6c6 <CstBackDrop>,d0
    1a6a:	   |         move.l d0,144(sp)
  UWORD offset = widthbytesbackdrop*y + x / 8;
    1a6e:	   |         move.l 172(sp),d0
    1a72:	   |         move.w d0,d1
    1a74:	   |         muls.w 126(sp),d1
    1a78:	   |         move.l 168(sp),d0
    1a7c:	   |     /-- bpl.s 1a80 <CstLoadBackdrop+0x2ea>
    1a7e:	   |     |   addq.l #7,d0
    1a80:	   |     \-> asr.l #3,d0
    1a82:	   |         move.l d0,d0
    1a84:	   |         movea.w d1,a0
    1a86:	   |         adda.w d0,a0
    1a88:	   |         move.w a0,24(sp)
  backdropcursor += offset; 
    1a8c:	   |         moveq #0,d0
    1a8e:	   |         move.w 24(sp),d0
    1a92:	   |         add.l d0,144(sp)

 	KPrintF("CstLoadBackDrop: Starting Blit");
    1a96:	   |         pea 179e7 <PutChar+0x2b5>
    1a9c:	   |         jsr 16c5e <KPrintF>
    1aa2:	   |         addq.l #4,sp


  WaitBlit();
    1aa4:	   |         move.l 1a7b0 <GfxBase>,d0
    1aaa:	   |         movea.l d0,a6
    1aac:	   |         jsr -228(a6)

  custom->bltafwm = 0xffff;
    1ab0:	   |         movea.l 26(sp),a0
    1ab4:	   |         move.w #-1,68(a0)
  custom->bltalwm = 0xffff;
    1aba:	   |         movea.l 26(sp),a0
    1abe:	   |         move.w #-1,70(a0)
  custom->bltamod = 0;
    1ac4:	   |         movea.l 26(sp),a0
    1ac8:	   |         move.w #0,100(a0)
  custom->bltbmod = 0;
    1ace:	   |         movea.l 26(sp),a0
    1ad2:	   |         move.w #0,98(a0)
  custom->bltcmod = widthbytesbackdrop - widthbyteslayer;
    1ad8:	   |         move.w 126(sp),d0
    1adc:	   |         sub.w 130(sp),d0
    1ae0:	   |         movea.l 26(sp),a0
    1ae4:	   |         move.w d0,96(a0)
  custom->bltdmod = widthbytesbackdrop - widthbyteslayer;
    1ae8:	   |         move.w 126(sp),d0
    1aec:	   |         sub.w 130(sp),d0
    1af0:	   |         movea.l 26(sp),a0
    1af4:	   |         move.w d0,102(a0)
  custom->bltcon0 = 0xfca;
    1af8:	   |         movea.l 26(sp),a0
    1afc:	   |         move.w #4042,64(a0)
  custom->bltcon1 = 0;
    1b02:	   |         movea.l 26(sp),a0
    1b06:	   |         move.w #0,66(a0)
  
  ULONG tmpbuffercursor = (ULONG) tmpbuffer;
    1b0c:	   |         move.l 88(sp),140(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1b12:	   |         clr.l 136(sp)
    1b16:	   |     /-- bra.s 1b78 <CstLoadBackdrop+0x3e2>
  {    
    custom->bltapt = (APTR) tmpmask;
    1b18:	   |  /--|-> movea.l 26(sp),a0
    1b1c:	   |  |  |   move.l 72(sp),80(a0)
    custom->bltbpt = (APTR) tmpbuffercursor;
    1b22:	   |  |  |   move.l 140(sp),d0
    1b26:	   |  |  |   movea.l 26(sp),a0
    1b2a:	   |  |  |   move.l d0,76(a0)
    custom->bltcpt = (APTR)backdropcursor;
    1b2e:	   |  |  |   move.l 144(sp),d0
    1b32:	   |  |  |   movea.l 26(sp),a0
    1b36:	   |  |  |   move.l d0,72(a0)
    custom->bltdpt = (APTR) backdropcursor;
    1b3a:	   |  |  |   move.l 144(sp),d0
    1b3e:	   |  |  |   movea.l 26(sp),a0
    1b42:	   |  |  |   move.l d0,84(a0)
    custom->bltsize = (height<<6)+widthwordslayer;
    1b46:	   |  |  |   move.w 132(sp),d0
    1b4a:	   |  |  |   lsl.w #6,d0
    1b4c:	   |  |  |   add.w 128(sp),d0
    1b50:	   |  |  |   movea.l 26(sp),a0
    1b54:	   |  |  |   move.w d0,88(a0)
    tmpbuffercursor += sizeplane;
    1b58:	   |  |  |   moveq #0,d0
    1b5a:	   |  |  |   move.w 124(sp),d0
    1b5e:	   |  |  |   add.l d0,140(sp)
    backdropcursor += CstBackdropSizePlane;
    1b62:	   |  |  |   move.w 1a6c4 <CstBackdropSizePlane>,d0
    1b68:	   |  |  |   move.w d0,d0
    1b6a:	   |  |  |   andi.l #65535,d0
    1b70:	   |  |  |   add.l d0,144(sp)
  for(int i=0;i<5;i++) //Todo other number of bitplanes
    1b74:	   |  |  |   addq.l #1,136(sp)
    1b78:	   |  |  \-> moveq #4,d0
    1b7a:	   |  |      cmp.l 136(sp),d0
    1b7e:	   |  \----- bge.s 1b18 <CstLoadBackdrop+0x382>
  }    

  WaitBlit();
    1b80:	   |         move.l 1a7b0 <GfxBase>,d0
    1b86:	   |         movea.l d0,a6
    1b88:	   |         jsr -228(a6)

 	KPrintF("CstLoadBackDrop: Freeing Memory");
    1b8c:	   |         pea 17a06 <PutChar+0x2d4>
    1b92:	   |         jsr 16c5e <KPrintF>
    1b98:	   |         addq.l #4,sp


  FreeVec(tmpbuffer);
    1b9a:	   |         move.l 88(sp),20(sp)
    1ba0:	   |         move.l 1a7a4 <SysBase>,d0
    1ba6:	   |         movea.l d0,a6
    1ba8:	   |         movea.l 20(sp),a1
    1bac:	   |         jsr -690(a6)
  FreeVec(tmpmask);
    1bb0:	   |         move.l 72(sp),16(sp)
    1bb6:	   |         move.l 1a7a4 <SysBase>,d0
    1bbc:	   |         movea.l d0,a6
    1bbe:	   |         movea.l 16(sp),a1
    1bc2:	   |         jsr -690(a6)

  CstApplyBackDropCounter = 2;
    1bc6:	   |         move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    1bce:	   |         move.l 1a6f8 <winWidth>,d0
    1bd4:	   |         lsr.l #4,d0
    1bd6:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1bdc:	   |         move.l a0,d1
    1bde:	   |         addq.l #2,d1
    1be0:	   |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1be6:	   |         move.l d0,d0
    1be8:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    1bea:	   |         move.l 1a6fc <winHeight>,d0
    1bf0:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1bf6:	   |         move.l a0,d1
    1bf8:	   |         addq.l #2,d1
    1bfa:	   |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1c00:	   |         move.l d0,d0
    1c02:	   |         move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1c04:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1c0a:	   |         move.l a0,d0
    1c0c:	   |         addq.l #2,d0
    1c0e:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1c14:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1c16:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1c1c:	   |         move.l a0,d0
    1c1e:	   |         addq.l #2,d0
    1c20:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1c26:	   |         clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    1c28:	   |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1c2e:	   |         move.l a0,d0
    1c30:	   |         addq.l #2,d0
    1c32:	   |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1c38:	   |         clr.w (a0)

  KPrintF("CstLoadBackDrop: Finished");
    1c3a:	   |         pea 17a26 <PutChar+0x2f4>
    1c40:	   |         jsr 16c5e <KPrintF>
    1c46:	   |         addq.l #4,sp

}
    1c48:	   \-------> movem.l (sp)+,d2-d4/a6
    1c4c:	             lea 144(sp),sp
    1c50:	             rts

00001c52 <CstPasteChar>:

ULONG test = 0;

void CstPasteChar( struct sprite *single, WORD x, WORD y)
{  
    1c52:	                lea -72(sp),sp
    1c56:	                move.l a6,-(sp)
    1c58:	                move.l d2,-(sp)
    1c5a:	                move.l 88(sp),d1
    1c5e:	                move.l 92(sp),d0
    1c62:	                move.w d1,d1
    1c64:	                move.w d1,10(sp)
    1c68:	                move.w d0,d0
    1c6a:	                move.w d0,8(sp)
  UWORD *destination = 0;
    1c6e:	                clr.l 28(sp)
  CstApplyBackDropCounter = 2;
    1c72:	                move.w #2,1a6d2 <CstApplyBackDropCounter>
  destination = (UWORD *) CstBackDrop;      
    1c7a:	                move.l 1a6c6 <CstBackDrop>,28(sp)
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;
  ULONG blitwidth;

  bltcon0 = 0;
    1c82:	                clr.l 56(sp)

  blitwidth = single->width/16;
    1c86:	                movea.l 84(sp),a0
    1c8a:	                move.l (a0),d0
    1c8c:	                movea.l d0,a0
    1c8e:	                cmpa.w #0,a0
    1c92:	            /-- bge.s 1c98 <CstPasteChar+0x46>
    1c94:	            |   lea 15(a0),a0
    1c98:	            \-> move.l a0,d0
    1c9a:	                asr.l #4,d0
    1c9c:	                move.l d0,40(sp)
  if(blitwidth == 0) blitwidth = 1;
    1ca0:	            /-- bne.s 1ca8 <CstPasteChar+0x56>
    1ca2:	            |   moveq #1,d0
    1ca4:	            |   move.l d0,40(sp)

  if( y < 0) {
    1ca8:	            \-> tst.w 8(sp)
    1cac:	         /----- bge.s 1cf4 <CstPasteChar+0xa2>
    if(y + single->height < 0) {
    1cae:	         |      movea.w 8(sp),a1
    1cb2:	         |      movea.l 84(sp),a0
    1cb6:	         |      move.l 4(a0),d0
    1cba:	         |      add.l a1,d0
    1cbc:	         |  /-- bpl.s 1cd0 <CstPasteChar+0x7e>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1cbe:	         |  |   pea 17a40 <PutChar+0x30e>
    1cc4:	         |  |   jsr 16c5e <KPrintF>
    1cca:	         |  |   addq.l #4,sp
      return;
    1ccc:	/--------|--|-- bra.w 2390 <CstPasteChar+0x73e>
    }
    ystartdst = 0;
    1cd0:	|        |  \-> clr.l 52(sp)
    ystartsrc = y*-1;
    1cd4:	|        |      move.w 8(sp),d0
    1cd8:	|        |      ext.l d0
    1cda:	|        |      neg.l d0
    1cdc:	|        |      move.l d0,48(sp)
    blitheight = single->height+y;
    1ce0:	|        |      movea.l 84(sp),a0
    1ce4:	|        |      move.l 4(a0),d0
    1ce8:	|        |      movea.w 8(sp),a0
    1cec:	|        |      add.l a0,d0
    1cee:	|        |      move.l d0,44(sp)
    1cf2:	|     /--|----- bra.s 1d66 <CstPasteChar+0x114>
  } else if(y+single->height > (int) winHeight) {
    1cf4:	|     |  \----> movea.w 8(sp),a1
    1cf8:	|     |         movea.l 84(sp),a0
    1cfc:	|     |         move.l 4(a0),d0
    1d00:	|     |         move.l a1,d1
    1d02:	|     |         add.l d0,d1
    1d04:	|     |         move.l 1a6fc <winHeight>,d0
    1d0a:	|     |         cmp.l d1,d0
    1d0c:	|     |  /----- bge.s 1d4e <CstPasteChar+0xfc>
    if(y  > (int) winHeight) {
    1d0e:	|     |  |      movea.w 8(sp),a0
    1d12:	|     |  |      move.l 1a6fc <winHeight>,d0
    1d18:	|     |  |      cmp.l a0,d0
    1d1a:	|     |  |  /-- bge.s 1d2e <CstPasteChar+0xdc>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1d1c:	|     |  |  |   pea 17a40 <PutChar+0x30e>
    1d22:	|     |  |  |   jsr 16c5e <KPrintF>
    1d28:	|     |  |  |   addq.l #4,sp
      return;
    1d2a:	+-----|--|--|-- bra.w 2390 <CstPasteChar+0x73e>
    }
    ystartdst = y;
    1d2e:	|     |  |  \-> movea.w 8(sp),a0
    1d32:	|     |  |      move.l a0,52(sp)
    ystartsrc = 0;
    1d36:	|     |  |      clr.l 48(sp)
    blitheight = winHeight-y;
    1d3a:	|     |  |      move.l 1a6fc <winHeight>,d0
    1d40:	|     |  |      movea.w 8(sp),a0
    1d44:	|     |  |      move.l d0,d1
    1d46:	|     |  |      sub.l a0,d1
    1d48:	|     |  |      move.l d1,44(sp)
    1d4c:	|     +--|----- bra.s 1d66 <CstPasteChar+0x114>
  } else {
    ystartdst = y;
    1d4e:	|     |  \----> movea.w 8(sp),a0
    1d52:	|     |         move.l a0,52(sp)
    ystartsrc = 0;
    1d56:	|     |         clr.l 48(sp)
    blitheight = single->height;
    1d5a:	|     |         movea.l 84(sp),a0
    1d5e:	|     |         move.l 4(a0),d0
    1d62:	|     |         move.l d0,44(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    1d66:	|     \-------> tst.w 10(sp)
    1d6a:	|        /----- bge.w 1edc <CstPasteChar+0x28a>
    if(x + single->width < 0) {
    1d6e:	|        |      movea.w 10(sp),a1
    1d72:	|        |      movea.l 84(sp),a0
    1d76:	|        |      move.l (a0),d0
    1d78:	|        |      add.l a1,d0
    1d7a:	|        |  /-- bpl.s 1d8e <CstPasteChar+0x13c>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1d7c:	|        |  |   pea 17a40 <PutChar+0x30e>
    1d82:	|        |  |   jsr 16c5e <KPrintF>
    1d88:	|        |  |   addq.l #4,sp
      return;
    1d8a:	+--------|--|-- bra.w 2390 <CstPasteChar+0x73e>

    }
    
    extrawords = 1;
    1d8e:	|        |  \-> move.w #1,78(sp)

    cutwordssource = (x*-1)/16; 
    1d94:	|        |      move.w 10(sp),d0
    1d98:	|        |  /-- bpl.s 1d9e <CstPasteChar+0x14c>
    1d9a:	|        |  |   addi.w #15,d0
    1d9e:	|        |  \-> asr.w #4,d0
    1da0:	|        |      neg.w d0
    1da2:	|        |      move.w d0,76(sp)
    cutmaskpixel = (x*-1)%16;     
    1da6:	|        |      move.w 10(sp),d0
    1daa:	|        |      ext.l d0
    1dac:	|        |      neg.l d0
    1dae:	|        |      andi.l #-2147483633,d0
    1db4:	|        |  /-- bpl.s 1dbe <CstPasteChar+0x16c>
    1db6:	|        |  |   subq.l #1,d0
    1db8:	|        |  |   moveq #-16,d1
    1dba:	|        |  |   or.l d1,d0
    1dbc:	|        |  |   addq.l #1,d0
    1dbe:	|        |  \-> move.w d0,74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    1dc2:	|        |      clr.w 72(sp)
    bltapt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    1dc6:	|        |      movea.l 84(sp),a0
    1dca:	|        |      move.l 24(a0),d0
    1dce:	|        |      move.l d0,d1
    1dd0:	|        |      moveq #0,d0
    1dd2:	|        |      move.w 76(sp),d0
    1dd6:	|        |      add.l d0,d0
    1dd8:	|        |      move.l d1,d2
    1dda:	|        |      add.l d0,d2
    1ddc:	|        |      movea.l 84(sp),a0
    1de0:	|        |      move.l (a0),d0
    1de2:	|        |      move.l 48(sp),-(sp)
    1de6:	|        |      move.l d0,-(sp)
    1de8:	|        |      jsr 1761c <__mulsi3>
    1dee:	|        |      addq.l #8,sp
    1df0:	|        |      lsr.l #3,d0
    1df2:	|        |      move.l d2,d1
    1df4:	|        |      add.l d0,d1
    1df6:	|        |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1dfa:	|        |      move.l 1a6f8 <winWidth>,d0
    1e00:	|        |      move.l 52(sp),-(sp)
    1e04:	|        |      move.l d0,-(sp)
    1e06:	|        |      jsr 1761c <__mulsi3>
    1e0c:	|        |      addq.l #8,sp
    1e0e:	|        |      lsr.l #3,d0
    1e10:	|        |      move.l 28(sp),d1
    1e14:	|        |      add.l d1,d0
    1e16:	|        |      move.l d0,d2
    1e18:	|        |      subq.l #2,d2
    1e1a:	|        |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    1e1e:	|        |      move.l 1a6f8 <winWidth>,d0
    1e24:	|        |      move.l 52(sp),-(sp)
    1e28:	|        |      move.l d0,-(sp)
    1e2a:	|        |      jsr 1761c <__mulsi3>
    1e30:	|        |      addq.l #8,sp
    1e32:	|        |      lsr.l #3,d0
    1e34:	|        |      move.l 28(sp),d1
    1e38:	|        |      add.l d1,d0
    1e3a:	|        |      move.l d0,d1
    1e3c:	|        |      subq.l #2,d1
    1e3e:	|        |      move.l d1,60(sp)
    bltcon0 = ((16-cutmaskpixel) << 12);
    1e42:	|        |      moveq #0,d0
    1e44:	|        |      move.w 74(sp),d0
    1e48:	|        |      moveq #16,d1
    1e4a:	|        |      sub.l d0,d1
    1e4c:	|        |      move.l d1,d0
    1e4e:	|        |      moveq #12,d2
    1e50:	|        |      lsl.l d2,d0
    1e52:	|        |      move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    1e56:	|        |      movea.l 84(sp),a0
    1e5a:	|        |      move.l (a0),d0
    1e5c:	|        |      movea.l d0,a0
    1e5e:	|        |      cmpa.w #0,a0
    1e62:	|        |  /-- bge.s 1e68 <CstPasteChar+0x216>
    1e64:	|        |  |   lea 15(a0),a0
    1e68:	|        |  \-> move.l a0,d0
    1e6a:	|        |      asr.l #4,d0
    1e6c:	|        |      move.l d0,d0
    1e6e:	|        |      add.w 76(sp),d0
    1e72:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1e78:	|        |      move.l a0,d1
    1e7a:	|        |      addq.l #2,d1
    1e7c:	|        |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    1e82:	|        |      add.w 78(sp),d0
    1e86:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    1e88:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1e8e:	|        |      move.l a0,d0
    1e90:	|        |      addq.l #2,d0
    1e92:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1e98:	|        |      move.l 44(sp),d0
    1e9c:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    1e9e:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1ea4:	|        |      move.l a0,d0
    1ea6:	|        |      addq.l #2,d0
    1ea8:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1eae:	|        |      clr.w (a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    1eb0:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1eb6:	|        |      move.l a0,d0
    1eb8:	|        |      addq.l #2,d0
    1eba:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1ec0:	|        |      move.l 52(sp),d0
    1ec4:	|        |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    1ec6:	|        |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    1ecc:	|        |      move.l a0,d0
    1ece:	|        |      addq.l #2,d0
    1ed0:	|        |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    1ed6:	|        |      clr.w (a0)
    1ed8:	|     /--|----- bra.w 21f0 <CstPasteChar+0x59e>

  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    1edc:	|     |  \----> movea.w 10(sp),a1
    1ee0:	|     |         movea.l 84(sp),a0
    1ee4:	|     |         move.l (a0),d0
    1ee6:	|     |         move.l a1,d1
    1ee8:	|     |         add.l d0,d1
    1eea:	|     |         move.l 1a6f8 <winWidth>,d0
    1ef0:	|     |         cmp.l d1,d0
    1ef2:	|     |  /----- bge.w 208e <CstPasteChar+0x43c>

    if(x - single->width > (int) winWidth)
    1ef6:	|     |  |      movea.w 10(sp),a1
    1efa:	|     |  |      movea.l 84(sp),a0
    1efe:	|     |  |      move.l (a0),d0
    1f00:	|     |  |      move.l a1,d1
    1f02:	|     |  |      sub.l d0,d1
    1f04:	|     |  |      move.l 1a6f8 <winWidth>,d0
    1f0a:	|     |  |      cmp.l d1,d0
    1f0c:	|     |  |  /-- bge.s 1f20 <CstPasteChar+0x2ce>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    1f0e:	|     |  |  |   pea 17a40 <PutChar+0x30e>
    1f14:	|     |  |  |   jsr 16c5e <KPrintF>
    1f1a:	|     |  |  |   addq.l #4,sp
      return;
    1f1c:	+-----|--|--|-- bra.w 2390 <CstPasteChar+0x73e>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    1f20:	|     |  |  \-> clr.w 78(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    1f24:	|     |  |      movea.w 10(sp),a1
    1f28:	|     |  |      movea.l 84(sp),a0
    1f2c:	|     |  |      move.l (a0),d0
    1f2e:	|     |  |      add.l a1,d0
    1f30:	|     |  |      move.l d0,d1
    1f32:	|     |  |      move.l 1a6f8 <winWidth>,d0
    1f38:	|     |  |      sub.l d0,d1
    1f3a:	|     |  |      move.l d1,d0
    1f3c:	|     |  |      lsr.l #4,d0
    1f3e:	|     |  |      move.w d0,76(sp)
    cutmaskpixel = 0;
    1f42:	|     |  |      clr.w 74(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    1f46:	|     |  |      move.w #-1,72(sp)
    bltapt = (ULONG) single->data+ystartsrc*single->width/8;
    1f4c:	|     |  |      movea.l 84(sp),a0
    1f50:	|     |  |      move.l 24(a0),d0
    1f54:	|     |  |      move.l d0,d2
    1f56:	|     |  |      movea.l 84(sp),a0
    1f5a:	|     |  |      move.l (a0),d0
    1f5c:	|     |  |      move.l 48(sp),-(sp)
    1f60:	|     |  |      move.l d0,-(sp)
    1f62:	|     |  |      jsr 1761c <__mulsi3>
    1f68:	|     |  |      addq.l #8,sp
    1f6a:	|     |  |      lsr.l #3,d0
    1f6c:	|     |  |      move.l d2,d1
    1f6e:	|     |  |      add.l d0,d1
    1f70:	|     |  |      move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    1f74:	|     |  |      move.l 1a6f8 <winWidth>,d0
    1f7a:	|     |  |      move.l 52(sp),-(sp)
    1f7e:	|     |  |      move.l d0,-(sp)
    1f80:	|     |  |      jsr 1761c <__mulsi3>
    1f86:	|     |  |      addq.l #8,sp
    1f88:	|     |  |      lsr.l #3,d0
    1f8a:	|     |  |      move.l 28(sp),d1
    1f8e:	|     |  |      add.l d0,d1
    1f90:	|     |  |      move.w 10(sp),d0
    1f94:	|     |  |  /-- bpl.s 1f9a <CstPasteChar+0x348>
    1f96:	|     |  |  |   addi.w #15,d0
    1f9a:	|     |  |  \-> asr.w #4,d0
    1f9c:	|     |  |      movea.w d0,a0
    1f9e:	|     |  |      move.l a0,d0
    1fa0:	|     |  |      add.l a0,d0
    1fa2:	|     |  |      move.l d1,d2
    1fa4:	|     |  |      add.l d0,d2
    1fa6:	|     |  |      move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    1faa:	|     |  |      move.l 1a6f8 <winWidth>,d0
    1fb0:	|     |  |      move.l 52(sp),-(sp)
    1fb4:	|     |  |      move.l d0,-(sp)
    1fb6:	|     |  |      jsr 1761c <__mulsi3>
    1fbc:	|     |  |      addq.l #8,sp
    1fbe:	|     |  |      lsr.l #3,d0
    1fc0:	|     |  |      move.l 28(sp),d1
    1fc4:	|     |  |      add.l d0,d1
    1fc6:	|     |  |      move.w 10(sp),d0
    1fca:	|     |  |  /-- bpl.s 1fd0 <CstPasteChar+0x37e>
    1fcc:	|     |  |  |   addi.w #15,d0
    1fd0:	|     |  |  \-> asr.w #4,d0
    1fd2:	|     |  |      movea.w d0,a0
    1fd4:	|     |  |      move.l a0,d0
    1fd6:	|     |  |      add.l a0,d0
    1fd8:	|     |  |      move.l d1,d2
    1fda:	|     |  |      add.l d0,d2
    1fdc:	|     |  |      move.l d2,60(sp)
    bltcon0 = ((single->width%16) << 12);    
    1fe0:	|     |  |      movea.l 84(sp),a0
    1fe4:	|     |  |      move.l (a0),d0
    1fe6:	|     |  |      andi.l #-2147483633,d0
    1fec:	|     |  |  /-- bpl.s 1ff6 <CstPasteChar+0x3a4>
    1fee:	|     |  |  |   subq.l #1,d0
    1ff0:	|     |  |  |   moveq #-16,d1
    1ff2:	|     |  |  |   or.l d1,d0
    1ff4:	|     |  |  |   addq.l #1,d0
    1ff6:	|     |  |  \-> moveq #12,d2
    1ff8:	|     |  |      lsl.l d2,d0
    1ffa:	|     |  |      move.l d0,56(sp)
    
    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    1ffe:	|     |  |      movea.l 84(sp),a0
    2002:	|     |  |      move.l (a0),d0
    2004:	|     |  |      movea.l d0,a0
    2006:	|     |  |      cmpa.w #0,a0
    200a:	|     |  |  /-- bge.s 2010 <CstPasteChar+0x3be>
    200c:	|     |  |  |   lea 15(a0),a0
    2010:	|     |  |  \-> move.l a0,d0
    2012:	|     |  |      asr.l #4,d0
    2014:	|     |  |      move.l d0,d0
    2016:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    201c:	|     |  |      move.l a0,d1
    201e:	|     |  |      addq.l #2,d1
    2020:	|     |  |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2026:	|     |  |      add.w 76(sp),d0
    202a:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    202c:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2032:	|     |  |      move.l a0,d0
    2034:	|     |  |      addq.l #2,d0
    2036:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    203c:	|     |  |      move.l 44(sp),d0
    2040:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2042:	|     |  |      move.w 10(sp),d0
    2046:	|     |  |  /-- bpl.s 204c <CstPasteChar+0x3fa>
    2048:	|     |  |  |   addi.w #15,d0
    204c:	|     |  |  \-> asr.w #4,d0
    204e:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2054:	|     |  |      move.l a0,d1
    2056:	|     |  |      addq.l #2,d1
    2058:	|     |  |      move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    205e:	|     |  |      add.w d0,d0
    2060:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    2062:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2068:	|     |  |      move.l a0,d0
    206a:	|     |  |      addq.l #2,d0
    206c:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2072:	|     |  |      move.l 52(sp),d0
    2076:	|     |  |      move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    2078:	|     |  |      movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    207e:	|     |  |      move.l a0,d0
    2080:	|     |  |      addq.l #2,d0
    2082:	|     |  |      move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2088:	|     |  |      clr.w (a0)
    208a:	|     +--|----- bra.w 21f0 <CstPasteChar+0x59e>
    
  } else { //Whole Sprite on Screen

    extrawords = 1;
    208e:	|     |  \----> move.w #1,78(sp)
    cutwordssource = 0;
    2094:	|     |         clr.w 76(sp)
    cutmaskpixel = 0;
    2098:	|     |         clr.w 74(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    209c:	|     |         clr.w 72(sp)
    bltapt = (ULONG) single->data+ystartsrc*(single->width/16)*2;
    20a0:	|     |         movea.l 84(sp),a0
    20a4:	|     |         move.l 24(a0),d0
    20a8:	|     |         move.l d0,d2
    20aa:	|     |         movea.l 84(sp),a0
    20ae:	|     |         move.l (a0),d0
    20b0:	|     |         movea.l d0,a0
    20b2:	|     |         cmpa.w #0,a0
    20b6:	|     |     /-- bge.s 20bc <CstPasteChar+0x46a>
    20b8:	|     |     |   lea 15(a0),a0
    20bc:	|     |     \-> move.l a0,d0
    20be:	|     |         asr.l #4,d0
    20c0:	|     |         move.l 48(sp),-(sp)
    20c4:	|     |         move.l d0,-(sp)
    20c6:	|     |         jsr 1761c <__mulsi3>
    20cc:	|     |         addq.l #8,sp
    20ce:	|     |         add.l d0,d0
    20d0:	|     |         move.l d2,d1
    20d2:	|     |         add.l d0,d1
    20d4:	|     |         move.l d1,68(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    20d8:	|     |         move.l 1a6f8 <winWidth>,d0
    20de:	|     |         move.l 52(sp),-(sp)
    20e2:	|     |         move.l d0,-(sp)
    20e4:	|     |         jsr 1761c <__mulsi3>
    20ea:	|     |         addq.l #8,sp
    20ec:	|     |         lsr.l #3,d0
    20ee:	|     |         move.l 28(sp),d1
    20f2:	|     |         add.l d0,d1
    20f4:	|     |         move.w 10(sp),d0
    20f8:	|     |     /-- bpl.s 20fe <CstPasteChar+0x4ac>
    20fa:	|     |     |   addi.w #15,d0
    20fe:	|     |     \-> asr.w #4,d0
    2100:	|     |         movea.w d0,a0
    2102:	|     |         move.l a0,d0
    2104:	|     |         add.l a0,d0
    2106:	|     |         move.l d1,d2
    2108:	|     |         add.l d0,d2
    210a:	|     |         move.l d2,64(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    210e:	|     |         move.l 1a6f8 <winWidth>,d0
    2114:	|     |         move.l 52(sp),-(sp)
    2118:	|     |         move.l d0,-(sp)
    211a:	|     |         jsr 1761c <__mulsi3>
    2120:	|     |         addq.l #8,sp
    2122:	|     |         lsr.l #3,d0
    2124:	|     |         move.l 28(sp),d1
    2128:	|     |         add.l d0,d1
    212a:	|     |         move.w 10(sp),d0
    212e:	|     |     /-- bpl.s 2134 <CstPasteChar+0x4e2>
    2130:	|     |     |   addi.w #15,d0
    2134:	|     |     \-> asr.w #4,d0
    2136:	|     |         movea.w d0,a0
    2138:	|     |         move.l a0,d0
    213a:	|     |         add.l a0,d0
    213c:	|     |         move.l d1,d2
    213e:	|     |         add.l d0,d2
    2140:	|     |         move.l d2,60(sp)
    bltcon0 = ((x%16) << 12);
    2144:	|     |         move.w 10(sp),d0
    2148:	|     |         andi.w #-32753,d0
    214c:	|     |     /-- bpl.s 2156 <CstPasteChar+0x504>
    214e:	|     |     |   subq.w #1,d0
    2150:	|     |     |   ori.w #-16,d0
    2154:	|     |     |   addq.w #1,d0
    2156:	|     |     \-> ext.l d0
    2158:	|     |         moveq #12,d1
    215a:	|     |         lsl.l d1,d0
    215c:	|     |         move.l d0,56(sp)

    *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2160:	|     |         movea.l 84(sp),a0
    2164:	|     |         move.l (a0),d0
    2166:	|     |         movea.l d0,a0
    2168:	|     |         cmpa.w #0,a0
    216c:	|     |     /-- bge.s 2172 <CstPasteChar+0x520>
    216e:	|     |     |   lea 15(a0),a0
    2172:	|     |     \-> move.l a0,d0
    2174:	|     |         asr.l #4,d0
    2176:	|     |         move.l d0,d0
    2178:	|     |         add.w 76(sp),d0
    217c:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2182:	|     |         move.l a0,d1
    2184:	|     |         addq.l #2,d1
    2186:	|     |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    218c:	|     |         add.w 78(sp),d0
    2190:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = blitheight;
    2192:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2198:	|     |         move.l a0,d0
    219a:	|     |         addq.l #2,d0
    219c:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    21a2:	|     |         move.l 44(sp),d0
    21a6:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = (x/16)*2;
    21a8:	|     |         move.w 10(sp),d0
    21ac:	|     |     /-- bpl.s 21b2 <CstPasteChar+0x560>
    21ae:	|     |     |   addi.w #15,d0
    21b2:	|     |     \-> asr.w #4,d0
    21b4:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    21ba:	|     |         move.l a0,d1
    21bc:	|     |         addq.l #2,d1
    21be:	|     |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    21c4:	|     |         add.w d0,d0
    21c6:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = ystartdst;
    21c8:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    21ce:	|     |         move.l a0,d0
    21d0:	|     |         addq.l #2,d0
    21d2:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    21d8:	|     |         move.l 52(sp),d0
    21dc:	|     |         move.w d0,(a0)
    *CstBackDropBufferApplyCursor++ = 0;
    21de:	|     |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    21e4:	|     |         move.l a0,d0
    21e6:	|     |         addq.l #2,d0
    21e8:	|     |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    21ee:	|     |         clr.w (a0)
    
  }

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    21f0:	|     \-------> moveq #0,d0
    21f2:	|               move.w 74(sp),d0
    21f6:	|               moveq #0,d1
    21f8:	|               not.w d1
    21fa:	|               asr.l d0,d1
    21fc:	|               move.w d1,26(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2200:	|               moveq #0,d1
    2202:	|               move.w 76(sp),d1
    2206:	|               moveq #0,d0
    2208:	|               move.w 78(sp),d0
    220c:	|               sub.l d0,d1
    220e:	|               move.l d1,d0
    2210:	|               add.w d0,d0
    2212:	|               move.w d0,24(sp)
  WORD bltcmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2216:	|               move.l 1a6f8 <winWidth>,d0
    221c:	|               lsr.l #3,d0
    221e:	|               move.l d0,d2
    2220:	|               move.w 76(sp),d1
    2224:	|               sub.w 78(sp),d1
    2228:	|               move.l 40(sp),d0
    222c:	|               sub.w d0,d1
    222e:	|               move.w d1,d0
    2230:	|               add.w d1,d0
    2232:	|               add.w d2,d0
    2234:	|               move.w d0,22(sp)
  WORD bltdmod = winWidth/8-blitwidth*2-extrawords*2+cutwordssource*2;
    2238:	|               move.l 1a6f8 <winWidth>,d0
    223e:	|               lsr.l #3,d0
    2240:	|               move.l d0,d2
    2242:	|               move.w 76(sp),d1
    2246:	|               sub.w 78(sp),d1
    224a:	|               move.l 40(sp),d0
    224e:	|               sub.w d0,d1
    2250:	|               move.w d1,d0
    2252:	|               add.w d1,d0
    2254:	|               add.w d2,d0
    2256:	|               move.w d0,20(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    225a:	|               move.l #14675968,16(sp)
  WaitBlit();
    2262:	|               move.l 1a7b0 <GfxBase>,d0
    2268:	|               movea.l d0,a6
    226a:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    226e:	|               movea.l 16(sp),a0
    2272:	|               move.w 26(sp),68(a0)
  custom->bltalwm = bltalwm;
    2278:	|               movea.l 16(sp),a0
    227c:	|               move.w 72(sp),70(a0)
  custom->bltamod = bltamod;
    2282:	|               move.w 24(sp),d0
    2286:	|               movea.l 16(sp),a0
    228a:	|               move.w d0,100(a0)
  custom->bltcmod = bltcmod;
    228e:	|               move.w 22(sp),d0
    2292:	|               movea.l 16(sp),a0
    2296:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    229a:	|               move.w 20(sp),d0
    229e:	|               movea.l 16(sp),a0
    22a2:	|               move.w d0,102(a0)

  UWORD bltcptplus = winWidth/8*winHeight;
    22a6:	|               move.l 1a6f8 <winWidth>,d0
    22ac:	|               lsr.l #3,d0
    22ae:	|               move.l d0,d1
    22b0:	|               move.l 1a6fc <winHeight>,d0
    22b6:	|               move.l d0,d0
    22b8:	|               move.w d1,d2
    22ba:	|               muls.w d0,d2
    22bc:	|               move.w d2,14(sp)
  UWORD tmp = textPaletteIndex;
    22c0:	|               move.w 1a6be <textPaletteIndex>,38(sp)

  UWORD minterm;
  //Apply palette color to planeblit
  //Ugly double code in the name of performance
  UWORD tmp2 = tmp & 0x01;
    22c8:	|               move.w 38(sp),d0
    22cc:	|               andi.w #1,d0
    22d0:	|               move.w d0,12(sp)
  if(tmp2) {
    22d4:	|        /----- beq.s 22de <CstPasteChar+0x68c>
    minterm = 0xbfa;
    22d6:	|        |      move.w #3066,36(sp)
    22dc:	|        |  /-- bra.s 22e4 <CstPasteChar+0x692>
  } else {
    minterm = 0xb0a;
    22de:	|        \--|-> move.w #2826,36(sp)
  }

  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    22e4:	|           \-> clr.l 32(sp)
    22e8:	|     /-------- bra.w 2386 <CstPasteChar+0x734>
  {

    custom->bltcon0 = bltcon0 + minterm;
    22ec:	|  /--|-------> move.l 56(sp),d0
    22f0:	|  |  |         add.w 36(sp),d0
    22f4:	|  |  |         movea.l 16(sp),a0
    22f8:	|  |  |         move.w d0,64(a0)
    custom->bltapt = (APTR) bltapt;
    22fc:	|  |  |         move.l 68(sp),d0
    2300:	|  |  |         movea.l 16(sp),a0
    2304:	|  |  |         move.l d0,80(a0)
    custom->bltcpt = (APTR) bltcpt;
    2308:	|  |  |         move.l 64(sp),d0
    230c:	|  |  |         movea.l 16(sp),a0
    2310:	|  |  |         move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    2314:	|  |  |         move.l 60(sp),d0
    2318:	|  |  |         movea.l 16(sp),a0
    231c:	|  |  |         move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + blitwidth-cutwordssource+extrawords;
    2320:	|  |  |         move.l 44(sp),d0
    2324:	|  |  |         lsl.w #6,d0
    2326:	|  |  |         move.l 40(sp),d1
    232a:	|  |  |         add.w d1,d0
    232c:	|  |  |         sub.w 76(sp),d0
    2330:	|  |  |         add.w 78(sp),d0
    2334:	|  |  |         movea.l 16(sp),a0
    2338:	|  |  |         move.w d0,88(a0)
    bltcpt += bltcptplus;
    233c:	|  |  |         moveq #0,d0
    233e:	|  |  |         move.w 14(sp),d0
    2342:	|  |  |         add.l d0,64(sp)
    bltdpt += bltcptplus;
    2346:	|  |  |         moveq #0,d0
    2348:	|  |  |         move.w 14(sp),d0
    234c:	|  |  |         add.l d0,60(sp)

    //Apply palette color to planeblit
    //Ugly double code in the name of performance
    tmp = tmp >> 1;
    2350:	|  |  |         move.w 38(sp),d0
    2354:	|  |  |         lsr.w #1,d0
    2356:	|  |  |         move.w d0,38(sp)
    tmp2 = tmp & 0x01;
    235a:	|  |  |         move.w 38(sp),d1
    235e:	|  |  |         andi.w #1,d1
    2362:	|  |  |         move.w d1,12(sp)
    if(tmp2) {
    2366:	|  |  |  /----- beq.s 2370 <CstPasteChar+0x71e>
      minterm = 0xbfa;
    2368:	|  |  |  |      move.w #3066,36(sp)
    236e:	|  |  |  |  /-- bra.s 2376 <CstPasteChar+0x724>
    } else {
      minterm = 0xb0a;
    2370:	|  |  |  \--|-> move.w #2826,36(sp)
    }   

    WaitBlit();    
    2376:	|  |  |     \-> move.l 1a7b0 <GfxBase>,d0
    237c:	|  |  |         movea.l d0,a6
    237e:	|  |  |         jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    2382:	|  |  |         addq.l #1,32(sp)
    2386:	|  |  \-------> moveq #4,d2
    2388:	|  |            cmp.l 32(sp),d2
    238c:	|  \----------- bge.w 22ec <CstPasteChar+0x69a>
 
  }   
}
    2390:	\-------------> move.l (sp)+,d2
    2392:	                movea.l (sp)+,a6
    2394:	                lea 72(sp),sp
    2398:	                rts

0000239a <CstRestoreScreen>:


void CstRestoreScreen()
{
    239a:	                   lea -24(sp),sp
    239e:	                   move.l a6,-(sp)
    23a0:	                   move.l d2,-(sp)
  volatile struct Custom *custom = (struct Custom*)0xdff000;  
    23a2:	                   move.l #14675968,16(sp)

  //struct CleanupQueue *cursor  = CstCleanupQueueDrawBuffer;
  if(!CstCleanupQueueDrawBuffer || !CstDrawBuffer) {
    23aa:	                   move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    23b0:	/----------------- beq.w 25b8 <CstRestoreScreen+0x21e>
    23b4:	|                  move.l 1a6d8 <CstDrawBuffer>,d0
    23ba:	+----------------- beq.w 25b8 <CstRestoreScreen+0x21e>
    return;
  } 

  WaitBlit();
    23be:	|                  move.l 1a7b0 <GfxBase>,d0
    23c4:	|                  movea.l d0,a6
    23c6:	|                  jsr -228(a6)
  
  custom->bltafwm = 0xffff;
    23ca:	|                  movea.l 16(sp),a0
    23ce:	|                  move.w #-1,68(a0)
  custom->bltalwm = 0xffff;  
    23d4:	|                  movea.l 16(sp),a0
    23d8:	|                  move.w #-1,70(a0)
  custom->bltcon0 = 0x9f0;
    23de:	|                  movea.l 16(sp),a0
    23e2:	|                  move.w #2544,64(a0)
  
  while(CstCleanupQueueDrawBuffer)
    23e8:	|     /----------- bra.w 25ac <CstRestoreScreen+0x212>
  {    

    if( CstCleanupQueueDrawBuffer->person && CstCleanupQueueDrawBuffer->person->samePosCount < 3)
    23ec:	|  /--|----------> movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    23f2:	|  |  |            move.l 4(a0),d0
    23f6:	|  |  |  /-------- beq.w 257a <CstRestoreScreen+0x1e0>
    23fa:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2400:	|  |  |  |         movea.l 4(a0),a0
    2404:	|  |  |  |         move.l 16(a0),d0
    2408:	|  |  |  |         moveq #2,d1
    240a:	|  |  |  |         cmp.l d0,d1
    240c:	|  |  |  +-------- blt.w 257a <CstRestoreScreen+0x1e0>
    {
      custom->bltamod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2410:	|  |  |  |         move.l 1a6f8 <winWidth>,d0
    2416:	|  |  |  |         lsr.l #3,d0
    2418:	|  |  |  |         move.l d0,d1
    241a:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2420:	|  |  |  |         move.w 8(a0),d0
    2424:	|  |  |  |         add.w d0,d0
    2426:	|  |  |  |         sub.w d0,d1
    2428:	|  |  |  |         movea.l 16(sp),a0
    242c:	|  |  |  |         move.w d1,100(a0)
      custom->bltdmod = winWidth/8-CstCleanupQueueDrawBuffer->widthinwords*2;
    2430:	|  |  |  |         move.l 1a6f8 <winWidth>,d0
    2436:	|  |  |  |         lsr.l #3,d0
    2438:	|  |  |  |         move.l d0,d1
    243a:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2440:	|  |  |  |         move.w 8(a0),d0
    2444:	|  |  |  |         add.w d0,d0
    2446:	|  |  |  |         sub.w d0,d1
    2448:	|  |  |  |         movea.l 16(sp),a0
    244c:	|  |  |  |         move.w d1,102(a0)
      ULONG bltapt = ((ULONG) CstBackDrop) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    2450:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2456:	|  |  |  |         move.w 14(a0),d0
    245a:	|  |  |  |         move.w d0,d0
    245c:	|  |  |  |         andi.l #65535,d0
    2462:	|  |  |  |         move.l 1a6f8 <winWidth>,d1
    2468:	|  |  |  |         move.l d1,-(sp)
    246a:	|  |  |  |         move.l d0,-(sp)
    246c:	|  |  |  |         jsr 1761c <__mulsi3>
    2472:	|  |  |  |         addq.l #8,sp
    2474:	|  |  |  |         move.l d0,d1
    2476:	|  |  |  |         lsr.l #3,d1
    2478:	|  |  |  |         move.l 1a6c6 <CstBackDrop>,d0
    247e:	|  |  |  |         add.l d0,d1
    2480:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2486:	|  |  |  |         move.w 12(a0),d0
    248a:	|  |  |  |         move.w d0,d0
    248c:	|  |  |  |         andi.l #65535,d0
    2492:	|  |  |  |         move.l d1,d2
    2494:	|  |  |  |         add.l d0,d2
    2496:	|  |  |  |         move.l d2,28(sp)
      ULONG bltdpt = ((ULONG) CstDrawBuffer) + CstCleanupQueueDrawBuffer->starty*winWidth/8 + CstCleanupQueueDrawBuffer->startxinbytes;
    249a:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    24a0:	|  |  |  |         move.w 14(a0),d0
    24a4:	|  |  |  |         move.w d0,d0
    24a6:	|  |  |  |         andi.l #65535,d0
    24ac:	|  |  |  |         move.l 1a6f8 <winWidth>,d1
    24b2:	|  |  |  |         move.l d1,-(sp)
    24b4:	|  |  |  |         move.l d0,-(sp)
    24b6:	|  |  |  |         jsr 1761c <__mulsi3>
    24bc:	|  |  |  |         addq.l #8,sp
    24be:	|  |  |  |         move.l d0,d1
    24c0:	|  |  |  |         lsr.l #3,d1
    24c2:	|  |  |  |         move.l 1a6d8 <CstDrawBuffer>,d0
    24c8:	|  |  |  |         add.l d0,d1
    24ca:	|  |  |  |         movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    24d0:	|  |  |  |         move.w 12(a0),d0
    24d4:	|  |  |  |         move.w d0,d0
    24d6:	|  |  |  |         andi.l #65535,d0
    24dc:	|  |  |  |         move.l d1,d2
    24de:	|  |  |  |         add.l d0,d2
    24e0:	|  |  |  |         move.l d2,24(sp)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    24e4:	|  |  |  |         clr.l 20(sp)
    24e8:	|  |  |  |     /-- bra.w 2570 <CstRestoreScreen+0x1d6>
      {
        custom->bltapt = (APTR) bltapt;
    24ec:	|  |  |  |  /--|-> move.l 28(sp),d0
    24f0:	|  |  |  |  |  |   movea.l 16(sp),a0
    24f4:	|  |  |  |  |  |   move.l d0,80(a0)
        custom->bltdpt = (APTR) bltdpt;
    24f8:	|  |  |  |  |  |   move.l 24(sp),d0
    24fc:	|  |  |  |  |  |   movea.l 16(sp),a0
    2500:	|  |  |  |  |  |   move.l d0,84(a0)
        custom->bltsize = (CstCleanupQueueDrawBuffer->height << 6) + CstCleanupQueueDrawBuffer->widthinwords;
    2504:	|  |  |  |  |  |   movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    250a:	|  |  |  |  |  |   move.w 10(a0),d0
    250e:	|  |  |  |  |  |   lsl.w #6,d0
    2510:	|  |  |  |  |  |   movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2516:	|  |  |  |  |  |   move.w 8(a0),d1
    251a:	|  |  |  |  |  |   add.w d1,d0
    251c:	|  |  |  |  |  |   movea.l 16(sp),a0
    2520:	|  |  |  |  |  |   move.w d0,88(a0)
        bltapt += winWidth/8*winHeight;
    2524:	|  |  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    252a:	|  |  |  |  |  |   lsr.l #3,d0
    252c:	|  |  |  |  |  |   move.l 1a6fc <winHeight>,d1
    2532:	|  |  |  |  |  |   move.l d1,-(sp)
    2534:	|  |  |  |  |  |   move.l d0,-(sp)
    2536:	|  |  |  |  |  |   jsr 1761c <__mulsi3>
    253c:	|  |  |  |  |  |   addq.l #8,sp
    253e:	|  |  |  |  |  |   add.l d0,28(sp)
        bltdpt += winWidth/8*winHeight;
    2542:	|  |  |  |  |  |   move.l 1a6f8 <winWidth>,d0
    2548:	|  |  |  |  |  |   lsr.l #3,d0
    254a:	|  |  |  |  |  |   move.l 1a6fc <winHeight>,d1
    2550:	|  |  |  |  |  |   move.l d1,-(sp)
    2552:	|  |  |  |  |  |   move.l d0,-(sp)
    2554:	|  |  |  |  |  |   jsr 1761c <__mulsi3>
    255a:	|  |  |  |  |  |   addq.l #8,sp
    255c:	|  |  |  |  |  |   add.l d0,24(sp)
        WaitBlit();
    2560:	|  |  |  |  |  |   move.l 1a7b0 <GfxBase>,d0
    2566:	|  |  |  |  |  |   movea.l d0,a6
    2568:	|  |  |  |  |  |   jsr -228(a6)
      for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    256c:	|  |  |  |  |  |   addq.l #1,20(sp)
    2570:	|  |  |  |  |  \-> moveq #4,d0
    2572:	|  |  |  |  |      cmp.l 20(sp),d0
    2576:	|  |  |  |  \----- bge.w 24ec <CstRestoreScreen+0x152>
      }
    }
    struct CleanupQueue *todelete = CstCleanupQueueDrawBuffer;
    257a:	|  |  |  \-------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,12(sp)
    CstCleanupQueueDrawBuffer = CstCleanupQueueDrawBuffer->next;  
    2582:	|  |  |            movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2588:	|  |  |            move.l 16(a0),d0
    258c:	|  |  |            move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
    FreeVec(todelete);    
    2592:	|  |  |            move.l 12(sp),8(sp)
    2598:	|  |  |            move.l 1a7a4 <SysBase>,d0
    259e:	|  |  |            movea.l d0,a6
    25a0:	|  |  |            movea.l 8(sp),a1
    25a4:	|  |  |            jsr -690(a6)
    todelete = NULL;
    25a8:	|  |  |            clr.l 12(sp)
  while(CstCleanupQueueDrawBuffer)
    25ac:	|  |  \----------> move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    25b2:	|  \-------------- bne.w 23ec <CstRestoreScreen+0x52>
    25b6:	|              /-- bra.s 25ba <CstRestoreScreen+0x220>
    return;
    25b8:	\--------------|-> nop
  }
  
}
    25ba:	               \-> move.l (sp)+,d2
    25bc:	                   movea.l (sp)+,a6
    25be:	                   lea 24(sp),sp
    25c2:	                   rts

000025c4 <CstScaleSprite>:

void CstScaleSprite( struct sprite *single, struct onScreenPerson *person, WORD x, WORD y, UWORD destinationtype)
{  
    25c4:	                lea -124(sp),sp
    25c8:	                movem.l d2-d3/a6,-(sp)
    25cc:	                movea.l 148(sp),a0
    25d0:	                move.l 152(sp),d1
    25d4:	                move.l 156(sp),d0
    25d8:	                movea.w a0,a0
    25da:	                move.w a0,16(sp)
    25de:	                move.w d1,d1
    25e0:	                move.w d1,14(sp)
    25e4:	                move.w d0,d0
    25e6:	                move.w d0,12(sp)
  UWORD *destination = 0;
    25ea:	                clr.l 132(sp)
  switch(destinationtype)
    25ee:	                moveq #0,d0
    25f0:	                move.w 12(sp),d0
    25f4:	                moveq #1,d1
    25f6:	                cmp.l d0,d1
    25f8:	            /-- beq.s 2602 <CstScaleSprite+0x3e>
    25fa:	            |   moveq #2,d2
    25fc:	            |   cmp.l d0,d2
    25fe:	         /--|-- beq.s 260c <CstScaleSprite+0x48>
    2600:	      /--|--|-- bra.s 261e <CstScaleSprite+0x5a>
  {
    case SCREEN:
      destination = (UWORD *) CstDrawBuffer;      
    2602:	      |  |  \-> move.l 1a6d8 <CstDrawBuffer>,132(sp)
      break;
    260a:	      +--|----- bra.s 261e <CstScaleSprite+0x5a>
    case BACKDROP:      
      CstApplyBackDropCounter = 2;
    260c:	      |  \----> move.w #2,1a6d2 <CstApplyBackDropCounter>
      destination = (UWORD *) CstBackDrop;      
    2614:	      |         move.l 1a6c6 <CstBackDrop>,132(sp)
      break;
    261c:	      |         nop
  ULONG bltcon1; //Shift Source
  ULONG ystartdst;
  ULONG ystartsrc; 
  ULONG blitheight;

  if( y < 0) {
    261e:	      \-------> tst.w 14(sp)
    2622:	         /----- bge.s 266a <CstScaleSprite+0xa6>
    if(y + single->height < 0) {
    2624:	         |      movea.w 14(sp),a1
    2628:	         |      movea.l 140(sp),a0
    262c:	         |      move.l 4(a0),d0
    2630:	         |      add.l a1,d0
    2632:	         |  /-- bpl.s 2646 <CstScaleSprite+0x82>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2634:	         |  |   pea 17a40 <PutChar+0x30e>
    263a:	         |  |   jsr 16c5e <KPrintF>
    2640:	         |  |   addq.l #4,sp
      return;
    2642:	/--------|--|-- bra.w 30fa <CstScaleSprite+0xb36>
    }
    ystartdst = 0;
    2646:	|        |  \-> clr.l 96(sp)
    ystartsrc = y*-1;
    264a:	|        |      move.w 14(sp),d0
    264e:	|        |      ext.l d0
    2650:	|        |      neg.l d0
    2652:	|        |      move.l d0,92(sp)
    blitheight = single->height+y;
    2656:	|        |      movea.l 140(sp),a0
    265a:	|        |      move.l 4(a0),d0
    265e:	|        |      movea.w 14(sp),a0
    2662:	|        |      add.l a0,d0
    2664:	|        |      move.l d0,88(sp)
    2668:	|     /--|----- bra.s 26dc <CstScaleSprite+0x118>
  } else if(y+single->height > (int) winHeight) {
    266a:	|     |  \----> movea.w 14(sp),a1
    266e:	|     |         movea.l 140(sp),a0
    2672:	|     |         move.l 4(a0),d0
    2676:	|     |         move.l a1,d1
    2678:	|     |         add.l d0,d1
    267a:	|     |         move.l 1a6fc <winHeight>,d0
    2680:	|     |         cmp.l d1,d0
    2682:	|     |  /----- bge.s 26c4 <CstScaleSprite+0x100>
    if(y  > (int) winHeight) {
    2684:	|     |  |      movea.w 14(sp),a0
    2688:	|     |  |      move.l 1a6fc <winHeight>,d0
    268e:	|     |  |      cmp.l a0,d0
    2690:	|     |  |  /-- bge.s 26a4 <CstScaleSprite+0xe0>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    2692:	|     |  |  |   pea 17a40 <PutChar+0x30e>
    2698:	|     |  |  |   jsr 16c5e <KPrintF>
    269e:	|     |  |  |   addq.l #4,sp
      return;
    26a0:	+-----|--|--|-- bra.w 30fa <CstScaleSprite+0xb36>
    }
    ystartdst = y;
    26a4:	|     |  |  \-> movea.w 14(sp),a0
    26a8:	|     |  |      move.l a0,96(sp)
    ystartsrc = 0;
    26ac:	|     |  |      clr.l 92(sp)
    blitheight = winHeight-y;
    26b0:	|     |  |      move.l 1a6fc <winHeight>,d0
    26b6:	|     |  |      movea.w 14(sp),a0
    26ba:	|     |  |      move.l d0,d1
    26bc:	|     |  |      sub.l a0,d1
    26be:	|     |  |      move.l d1,88(sp)
    26c2:	|     +--|----- bra.s 26dc <CstScaleSprite+0x118>
  } else {
    ystartdst = y;
    26c4:	|     |  \----> movea.w 14(sp),a0
    26c8:	|     |         move.l a0,96(sp)
    ystartsrc = 0;
    26cc:	|     |         clr.l 92(sp)
    blitheight = single->height;
    26d0:	|     |         movea.l 140(sp),a0
    26d4:	|     |         move.l 4(a0),d0
    26d8:	|     |         move.l d0,88(sp)
  }


  if( x < 0) { //Leftmost part outside screen
    26dc:	|     \-------> tst.w 16(sp)
    26e0:	|     /-------- bge.w 2990 <CstScaleSprite+0x3cc>
    if(x + single->width < 0) {
    26e4:	|     |         movea.w 16(sp),a1
    26e8:	|     |         movea.l 140(sp),a0
    26ec:	|     |         move.l (a0),d0
    26ee:	|     |         add.l a1,d0
    26f0:	|     |     /-- bpl.s 2704 <CstScaleSprite+0x140>
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    26f2:	|     |     |   pea 17a40 <PutChar+0x30e>
    26f8:	|     |     |   jsr 16c5e <KPrintF>
    26fe:	|     |     |   addq.l #4,sp
      return;
    2700:	+-----|-----|-- bra.w 30fa <CstScaleSprite+0xb36>

    }
    
    extrawords = 1;
    2704:	|     |     \-> move.w #1,130(sp)
    cutwordssource = (x*-1)/16; 
    270a:	|     |         move.w 16(sp),d0
    270e:	|     |     /-- bpl.s 2714 <CstScaleSprite+0x150>
    2710:	|     |     |   addi.w #15,d0
    2714:	|     |     \-> asr.w #4,d0
    2716:	|     |         neg.w d0
    2718:	|     |         move.w d0,128(sp)
    cutmaskpixel = (x*-1)%16;     
    271c:	|     |         move.w 16(sp),d0
    2720:	|     |         ext.l d0
    2722:	|     |         neg.l d0
    2724:	|     |         andi.l #-2147483633,d0
    272a:	|     |     /-- bpl.s 2734 <CstScaleSprite+0x170>
    272c:	|     |     |   subq.l #1,d0
    272e:	|     |     |   moveq #-16,d1
    2730:	|     |     |   or.l d1,d0
    2732:	|     |     |   addq.l #1,d0
    2734:	|     |     \-> move.w d0,126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2738:	|     |         clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+cutwordssource*2+ystartsrc*single->width/8;
    273c:	|     |         movea.l 140(sp),a0
    2740:	|     |         move.l 24(a0),d0
    2744:	|     |         move.l d0,d2
    2746:	|     |         moveq #0,d0
    2748:	|     |         move.w 128(sp),d0
    274c:	|     |         add.l d0,d0
    274e:	|     |         move.l d0,d3
    2750:	|     |         movea.l 140(sp),a0
    2754:	|     |         move.l (a0),d0
    2756:	|     |     /-- bpl.s 275a <CstScaleSprite+0x196>
    2758:	|     |     |   addq.l #7,d0
    275a:	|     |     \-> asr.l #3,d0
    275c:	|     |         movea.l 140(sp),a0
    2760:	|     |         move.l 4(a0),d1
    2764:	|     |         move.l d1,-(sp)
    2766:	|     |         move.l d0,-(sp)
    2768:	|     |         jsr 1761c <__mulsi3>
    276e:	|     |         addq.l #8,sp
    2770:	|     |         move.l d0,d1
    2772:	|     |         move.l d1,d0
    2774:	|     |         add.l d0,d0
    2776:	|     |         add.l d0,d0
    2778:	|     |         add.l d1,d0
    277a:	|     |         add.l d3,d0
    277c:	|     |         add.l d0,d2
    277e:	|     |         movea.l 140(sp),a0
    2782:	|     |         move.l (a0),d0
    2784:	|     |         move.l 92(sp),-(sp)
    2788:	|     |         move.l d0,-(sp)
    278a:	|     |         jsr 1761c <__mulsi3>
    2790:	|     |         addq.l #8,sp
    2792:	|     |         lsr.l #3,d0
    2794:	|     |         move.l d2,d1
    2796:	|     |         add.l d0,d1
    2798:	|     |         move.l d1,120(sp)
    bltbpt = ((ULONG) single->data)+cutwordssource*2+ystartsrc*single->width/8;
    279c:	|     |         movea.l 140(sp),a0
    27a0:	|     |         move.l 24(a0),d0
    27a4:	|     |         move.l d0,d1
    27a6:	|     |         moveq #0,d0
    27a8:	|     |         move.w 128(sp),d0
    27ac:	|     |         add.l d0,d0
    27ae:	|     |         move.l d1,d2
    27b0:	|     |         add.l d0,d2
    27b2:	|     |         movea.l 140(sp),a0
    27b6:	|     |         move.l (a0),d0
    27b8:	|     |         move.l 92(sp),-(sp)
    27bc:	|     |         move.l d0,-(sp)
    27be:	|     |         jsr 1761c <__mulsi3>
    27c4:	|     |         addq.l #8,sp
    27c6:	|     |         lsr.l #3,d0
    27c8:	|     |         move.l d2,d1
    27ca:	|     |         add.l d0,d1
    27cc:	|     |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    27d0:	|     |         move.l 1a6f8 <winWidth>,d0
    27d6:	|     |         move.l 96(sp),-(sp)
    27da:	|     |         move.l d0,-(sp)
    27dc:	|     |         jsr 1761c <__mulsi3>
    27e2:	|     |         addq.l #8,sp
    27e4:	|     |         lsr.l #3,d0
    27e6:	|     |         move.l 132(sp),d1
    27ea:	|     |         add.l d1,d0
    27ec:	|     |         move.l d0,d2
    27ee:	|     |         subq.l #2,d2
    27f0:	|     |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 - 2;
    27f4:	|     |         move.l 1a6f8 <winWidth>,d0
    27fa:	|     |         move.l 96(sp),-(sp)
    27fe:	|     |         move.l d0,-(sp)
    2800:	|     |         jsr 1761c <__mulsi3>
    2806:	|     |         addq.l #8,sp
    2808:	|     |         lsr.l #3,d0
    280a:	|     |         move.l 132(sp),d1
    280e:	|     |         add.l d1,d0
    2810:	|     |         move.l d0,d1
    2812:	|     |         subq.l #2,d1
    2814:	|     |         move.l d1,108(sp)
    bltcon0 = 0xfca + ((16-cutmaskpixel) << 12);
    2818:	|     |         moveq #0,d0
    281a:	|     |         move.w 126(sp),d0
    281e:	|     |         moveq #16,d1
    2820:	|     |         sub.l d0,d1
    2822:	|     |         move.l d1,d0
    2824:	|     |         moveq #12,d2
    2826:	|     |         lsl.l d2,d0
    2828:	|     |         addi.l #4042,d0
    282e:	|     |         move.l d0,104(sp)
    bltcon1 = ((16-cutmaskpixel) << 12);
    2832:	|     |         moveq #0,d0
    2834:	|     |         move.w 126(sp),d0
    2838:	|     |         moveq #16,d1
    283a:	|     |         sub.l d0,d1
    283c:	|     |         move.l d1,d0
    283e:	|     |         moveq #12,d1
    2840:	|     |         lsl.l d1,d0
    2842:	|     |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2846:	|     |         cmpi.w #1,12(sp)
    284c:	|     |  /----- bne.w 290a <CstScaleSprite+0x346>
    {      
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2850:	|     |  |      move.l 1a6e0 <CstCleanupQueueDrawBuffer>,48(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2858:	|     |  |      moveq #20,d2
    285a:	|     |  |      move.l d2,44(sp)
    285e:	|     |  |      clr.l 40(sp)
    2862:	|     |  |      move.l 1a7a4 <SysBase>,d0
    2868:	|     |  |      movea.l d0,a6
    286a:	|     |  |      move.l 44(sp),d0
    286e:	|     |  |      move.l 40(sp),d1
    2872:	|     |  |      jsr -684(a6)
    2876:	|     |  |      move.l d0,36(sp)
    287a:	|     |  |      move.l 36(sp),d0
    287e:	|     |  |      move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2884:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    288a:	|     |  |      move.l 48(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2890:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2896:	|     |  |      move.w 16(sp),d0
    289a:	|     |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    289c:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    28a2:	|     |  |      move.w 14(sp),d0
    28a6:	|     |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person;      
    28aa:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    28b0:	|     |  |      move.l 144(sp),4(a0)

      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; //Width in X Bytes
    28b6:	|     |  |      movea.l 140(sp),a0
    28ba:	|     |  |      move.l (a0),d0
    28bc:	|     |  |      movea.l d0,a0
    28be:	|     |  |      cmpa.w #0,a0
    28c2:	|     |  |  /-- bge.s 28c8 <CstScaleSprite+0x304>
    28c4:	|     |  |  |   lea 15(a0),a0
    28c8:	|     |  |  \-> move.l a0,d0
    28ca:	|     |  |      asr.l #4,d0
    28cc:	|     |  |      move.l d0,d0
    28ce:	|     |  |      add.w 128(sp),d0
    28d2:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    28d8:	|     |  |      add.w 130(sp),d0
    28dc:	|     |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height = blitheight;
    28e0:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    28e6:	|     |  |      move.l 88(sp),d0
    28ea:	|     |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes = 0;
    28ee:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    28f4:	|     |  |      clr.w 12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    28f8:	|     |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    28fe:	|     |  |      move.l 96(sp),d0
    2902:	|     |  |      move.w d0,14(a0)
    2906:	|  /--|--|----- bra.w 2f22 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    290a:	|  |  |  \----> movea.l 140(sp),a0
    290e:	|  |  |         move.l (a0),d0
    2910:	|  |  |         movea.l d0,a0
    2912:	|  |  |         cmpa.w #0,a0
    2916:	|  |  |     /-- bge.s 291c <CstScaleSprite+0x358>
    2918:	|  |  |     |   lea 15(a0),a0
    291c:	|  |  |     \-> move.l a0,d0
    291e:	|  |  |         asr.l #4,d0
    2920:	|  |  |         move.l d0,d0
    2922:	|  |  |         add.w 128(sp),d0
    2926:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    292c:	|  |  |         move.l a0,d1
    292e:	|  |  |         addq.l #2,d1
    2930:	|  |  |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2936:	|  |  |         add.w 130(sp),d0
    293a:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    293c:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2942:	|  |  |         move.l a0,d0
    2944:	|  |  |         addq.l #2,d0
    2946:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    294c:	|  |  |         move.l 88(sp),d0
    2950:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2952:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2958:	|  |  |         move.l a0,d0
    295a:	|  |  |         addq.l #2,d0
    295c:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2962:	|  |  |         clr.w (a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2964:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    296a:	|  |  |         move.l a0,d0
    296c:	|  |  |         addq.l #2,d0
    296e:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2974:	|  |  |         move.l 96(sp),d0
    2978:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    297a:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2980:	|  |  |         move.l a0,d0
    2982:	|  |  |         addq.l #2,d0
    2984:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    298a:	|  |  |         clr.w (a0)
    298c:	|  +--|-------- bra.w 2f22 <CstScaleSprite+0x95e>
    }
  } else if(x + single->width > (int) winWidth) { //Rightmost part outside screen   
    2990:	|  |  \-------> movea.w 16(sp),a1
    2994:	|  |            movea.l 140(sp),a0
    2998:	|  |            move.l (a0),d0
    299a:	|  |            move.l a1,d1
    299c:	|  |            add.l d0,d1
    299e:	|  |            move.l 1a6f8 <winWidth>,d0
    29a4:	|  |            cmp.l d1,d0
    29a6:	|  |  /-------- bge.w 2c88 <CstScaleSprite+0x6c4>

    if(x - single->width > (int) winWidth)
    29aa:	|  |  |         movea.w 16(sp),a1
    29ae:	|  |  |         movea.l 140(sp),a0
    29b2:	|  |  |         move.l (a0),d0
    29b4:	|  |  |         move.l a1,d1
    29b6:	|  |  |         sub.l d0,d1
    29b8:	|  |  |         move.l 1a6f8 <winWidth>,d0
    29be:	|  |  |         cmp.l d1,d0
    29c0:	|  |  |     /-- bge.s 29d4 <CstScaleSprite+0x410>
    {    
      KPrintF("CstScaleSprite: Sprite not on screen nothing to do");
    29c2:	|  |  |     |   pea 17a40 <PutChar+0x30e>
    29c8:	|  |  |     |   jsr 16c5e <KPrintF>
    29ce:	|  |  |     |   addq.l #4,sp
      return;
    29d0:	+--|--|-----|-- bra.w 30fa <CstScaleSprite+0xb36>
    }
    extrawords = 0; //Shifted out part of source outside screen. No need to blit this
    29d4:	|  |  |     \-> clr.w 130(sp)
    cutwordssource = (x+single->width - winWidth)/16;
    29d8:	|  |  |         movea.w 16(sp),a1
    29dc:	|  |  |         movea.l 140(sp),a0
    29e0:	|  |  |         move.l (a0),d0
    29e2:	|  |  |         add.l a1,d0
    29e4:	|  |  |         move.l d0,d1
    29e6:	|  |  |         move.l 1a6f8 <winWidth>,d0
    29ec:	|  |  |         sub.l d0,d1
    29ee:	|  |  |         move.l d1,d0
    29f0:	|  |  |         lsr.l #4,d0
    29f2:	|  |  |         move.w d0,128(sp)
    cutmaskpixel = 0;
    29f6:	|  |  |         clr.w 126(sp)
    bltalwm = 0xffff; //Last word contains source data to be blit
    29fa:	|  |  |         move.w #-1,124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    2a00:	|  |  |         movea.l 140(sp),a0
    2a04:	|  |  |         move.l 24(a0),d0
    2a08:	|  |  |         move.l d0,d2
    2a0a:	|  |  |         movea.l 140(sp),a0
    2a0e:	|  |  |         move.l (a0),d0
    2a10:	|  |  |     /-- bpl.s 2a14 <CstScaleSprite+0x450>
    2a12:	|  |  |     |   addq.l #7,d0
    2a14:	|  |  |     \-> asr.l #3,d0
    2a16:	|  |  |         movea.l 140(sp),a0
    2a1a:	|  |  |         move.l 4(a0),d1
    2a1e:	|  |  |         move.l d1,-(sp)
    2a20:	|  |  |         move.l d0,-(sp)
    2a22:	|  |  |         jsr 1761c <__mulsi3>
    2a28:	|  |  |         addq.l #8,sp
    2a2a:	|  |  |         move.l d0,d1
    2a2c:	|  |  |         move.l d1,d0
    2a2e:	|  |  |         add.l d0,d0
    2a30:	|  |  |         add.l d0,d0
    2a32:	|  |  |         add.l d1,d0
    2a34:	|  |  |         add.l d0,d2
    2a36:	|  |  |         movea.l 140(sp),a0
    2a3a:	|  |  |         move.l (a0),d0
    2a3c:	|  |  |         move.l 92(sp),-(sp)
    2a40:	|  |  |         move.l d0,-(sp)
    2a42:	|  |  |         jsr 1761c <__mulsi3>
    2a48:	|  |  |         addq.l #8,sp
    2a4a:	|  |  |         lsr.l #3,d0
    2a4c:	|  |  |         move.l d2,d1
    2a4e:	|  |  |         add.l d0,d1
    2a50:	|  |  |         move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2a54:	|  |  |         movea.l 140(sp),a0
    2a58:	|  |  |         move.l 24(a0),d0
    2a5c:	|  |  |         move.l d0,d2
    2a5e:	|  |  |         movea.l 140(sp),a0
    2a62:	|  |  |         move.l (a0),d0
    2a64:	|  |  |         move.l 92(sp),-(sp)
    2a68:	|  |  |         move.l d0,-(sp)
    2a6a:	|  |  |         jsr 1761c <__mulsi3>
    2a70:	|  |  |         addq.l #8,sp
    2a72:	|  |  |         lsr.l #3,d0
    2a74:	|  |  |         move.l d2,d1
    2a76:	|  |  |         add.l d0,d1
    2a78:	|  |  |         move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2a7c:	|  |  |         move.l 1a6f8 <winWidth>,d0
    2a82:	|  |  |         move.l 96(sp),-(sp)
    2a86:	|  |  |         move.l d0,-(sp)
    2a88:	|  |  |         jsr 1761c <__mulsi3>
    2a8e:	|  |  |         addq.l #8,sp
    2a90:	|  |  |         lsr.l #3,d0
    2a92:	|  |  |         move.l 132(sp),d1
    2a96:	|  |  |         add.l d0,d1
    2a98:	|  |  |         move.w 16(sp),d0
    2a9c:	|  |  |     /-- bpl.s 2aa2 <CstScaleSprite+0x4de>
    2a9e:	|  |  |     |   addi.w #15,d0
    2aa2:	|  |  |     \-> asr.w #4,d0
    2aa4:	|  |  |         movea.w d0,a0
    2aa6:	|  |  |         move.l a0,d0
    2aa8:	|  |  |         add.l a0,d0
    2aaa:	|  |  |         move.l d1,d2
    2aac:	|  |  |         add.l d0,d2
    2aae:	|  |  |         move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2ab2:	|  |  |         move.l 1a6f8 <winWidth>,d0
    2ab8:	|  |  |         move.l 96(sp),-(sp)
    2abc:	|  |  |         move.l d0,-(sp)
    2abe:	|  |  |         jsr 1761c <__mulsi3>
    2ac4:	|  |  |         addq.l #8,sp
    2ac6:	|  |  |         lsr.l #3,d0
    2ac8:	|  |  |         move.l 132(sp),d1
    2acc:	|  |  |         add.l d0,d1
    2ace:	|  |  |         move.w 16(sp),d0
    2ad2:	|  |  |     /-- bpl.s 2ad8 <CstScaleSprite+0x514>
    2ad4:	|  |  |     |   addi.w #15,d0
    2ad8:	|  |  |     \-> asr.w #4,d0
    2ada:	|  |  |         movea.w d0,a0
    2adc:	|  |  |         move.l a0,d0
    2ade:	|  |  |         add.l a0,d0
    2ae0:	|  |  |         move.l d1,d2
    2ae2:	|  |  |         add.l d0,d2
    2ae4:	|  |  |         move.l d2,108(sp)
    bltcon0 = 0xfca + ((single->width%16) << 12);
    2ae8:	|  |  |         movea.l 140(sp),a0
    2aec:	|  |  |         move.l (a0),d0
    2aee:	|  |  |         andi.l #-2147483633,d0
    2af4:	|  |  |     /-- bpl.s 2afe <CstScaleSprite+0x53a>
    2af6:	|  |  |     |   subq.l #1,d0
    2af8:	|  |  |     |   moveq #-16,d1
    2afa:	|  |  |     |   or.l d1,d0
    2afc:	|  |  |     |   addq.l #1,d0
    2afe:	|  |  |     \-> moveq #12,d2
    2b00:	|  |  |         lsl.l d2,d0
    2b02:	|  |  |         addi.l #4042,d0
    2b08:	|  |  |         move.l d0,104(sp)
    bltcon1 = ((single->width%16) << 12);
    2b0c:	|  |  |         movea.l 140(sp),a0
    2b10:	|  |  |         move.l (a0),d0
    2b12:	|  |  |         andi.l #-2147483633,d0
    2b18:	|  |  |     /-- bpl.s 2b22 <CstScaleSprite+0x55e>
    2b1a:	|  |  |     |   subq.l #1,d0
    2b1c:	|  |  |     |   moveq #-16,d1
    2b1e:	|  |  |     |   or.l d1,d0
    2b20:	|  |  |     |   addq.l #1,d0
    2b22:	|  |  |     \-> moveq #12,d2
    2b24:	|  |  |         lsl.l d2,d0
    2b26:	|  |  |         move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2b2a:	|  |  |         cmpi.w #1,12(sp)
    2b30:	|  |  |  /----- bne.w 2bf8 <CstScaleSprite+0x634>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2b34:	|  |  |  |      move.l 1a6e0 <CstCleanupQueueDrawBuffer>,64(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2b3c:	|  |  |  |      moveq #20,d0
    2b3e:	|  |  |  |      move.l d0,60(sp)
    2b42:	|  |  |  |      clr.l 56(sp)
    2b46:	|  |  |  |      move.l 1a7a4 <SysBase>,d0
    2b4c:	|  |  |  |      movea.l d0,a6
    2b4e:	|  |  |  |      move.l 60(sp),d0
    2b52:	|  |  |  |      move.l 56(sp),d1
    2b56:	|  |  |  |      jsr -684(a6)
    2b5a:	|  |  |  |      move.l d0,52(sp)
    2b5e:	|  |  |  |      move.l 52(sp),d0
    2b62:	|  |  |  |      move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2b68:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b6e:	|  |  |  |      move.l 64(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2b74:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b7a:	|  |  |  |      move.w 16(sp),d0
    2b7e:	|  |  |  |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    2b80:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b86:	|  |  |  |      move.w 14(sp),d0
    2b8a:	|  |  |  |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    2b8e:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2b94:	|  |  |  |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource; //Width in X Bytes
    2b9a:	|  |  |  |      movea.l 140(sp),a0
    2b9e:	|  |  |  |      move.l (a0),d0
    2ba0:	|  |  |  |      movea.l d0,a0
    2ba2:	|  |  |  |      cmpa.w #0,a0
    2ba6:	|  |  |  |  /-- bge.s 2bac <CstScaleSprite+0x5e8>
    2ba8:	|  |  |  |  |   lea 15(a0),a0
    2bac:	|  |  |  |  \-> move.l a0,d0
    2bae:	|  |  |  |      asr.l #4,d0
    2bb0:	|  |  |  |      move.l d0,d0
    2bb2:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2bb8:	|  |  |  |      add.w 128(sp),d0
    2bbc:	|  |  |  |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; //Height
    2bc0:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2bc6:	|  |  |  |      move.l 88(sp),d0
    2bca:	|  |  |  |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; //X Start in Bytes;
    2bce:	|  |  |  |      move.w 16(sp),d0
    2bd2:	|  |  |  |  /-- bpl.s 2bd8 <CstScaleSprite+0x614>
    2bd4:	|  |  |  |  |   addi.w #15,d0
    2bd8:	|  |  |  |  \-> asr.w #4,d0
    2bda:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2be0:	|  |  |  |      add.w d0,d0
    2be2:	|  |  |  |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2be6:	|  |  |  |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2bec:	|  |  |  |      move.l 96(sp),d0
    2bf0:	|  |  |  |      move.w d0,14(a0)
    2bf4:	|  +--|--|----- bra.w 2f22 <CstScaleSprite+0x95e>
    } else {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource;
    2bf8:	|  |  |  \----> movea.l 140(sp),a0
    2bfc:	|  |  |         move.l (a0),d0
    2bfe:	|  |  |         movea.l d0,a0
    2c00:	|  |  |         cmpa.w #0,a0
    2c04:	|  |  |     /-- bge.s 2c0a <CstScaleSprite+0x646>
    2c06:	|  |  |     |   lea 15(a0),a0
    2c0a:	|  |  |     \-> move.l a0,d0
    2c0c:	|  |  |         asr.l #4,d0
    2c0e:	|  |  |         move.l d0,d0
    2c10:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2c16:	|  |  |         move.l a0,d1
    2c18:	|  |  |         addq.l #2,d1
    2c1a:	|  |  |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2c20:	|  |  |         add.w 128(sp),d0
    2c24:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2c26:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2c2c:	|  |  |         move.l a0,d0
    2c2e:	|  |  |         addq.l #2,d0
    2c30:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2c36:	|  |  |         move.l 88(sp),d0
    2c3a:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2c3c:	|  |  |         move.w 16(sp),d0
    2c40:	|  |  |     /-- bpl.s 2c46 <CstScaleSprite+0x682>
    2c42:	|  |  |     |   addi.w #15,d0
    2c46:	|  |  |     \-> asr.w #4,d0
    2c48:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2c4e:	|  |  |         move.l a0,d1
    2c50:	|  |  |         addq.l #2,d1
    2c52:	|  |  |         move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2c58:	|  |  |         add.w d0,d0
    2c5a:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2c5c:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2c62:	|  |  |         move.l a0,d0
    2c64:	|  |  |         addq.l #2,d0
    2c66:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2c6c:	|  |  |         move.l 96(sp),d0
    2c70:	|  |  |         move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2c72:	|  |  |         movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2c78:	|  |  |         move.l a0,d0
    2c7a:	|  |  |         addq.l #2,d0
    2c7c:	|  |  |         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2c82:	|  |  |         clr.w (a0)
    2c84:	|  +--|-------- bra.w 2f22 <CstScaleSprite+0x95e>
    }
  } else { //Whole Sprite on Screen

    extrawords = 1;
    2c88:	|  |  \-------> move.w #1,130(sp)
    cutwordssource = 0;
    2c8e:	|  |            clr.w 128(sp)
    cutmaskpixel = 0;
    2c92:	|  |            clr.w 126(sp)
    bltalwm = 0; //Last Word of this channel almost masked out
    2c96:	|  |            clr.w 124(sp)
    bltapt = ((ULONG) single->data)+(single->width/8)*single->height*5+ystartsrc*single->width/8;
    2c9a:	|  |            movea.l 140(sp),a0
    2c9e:	|  |            move.l 24(a0),d0
    2ca2:	|  |            move.l d0,d2
    2ca4:	|  |            movea.l 140(sp),a0
    2ca8:	|  |            move.l (a0),d0
    2caa:	|  |        /-- bpl.s 2cae <CstScaleSprite+0x6ea>
    2cac:	|  |        |   addq.l #7,d0
    2cae:	|  |        \-> asr.l #3,d0
    2cb0:	|  |            movea.l 140(sp),a0
    2cb4:	|  |            move.l 4(a0),d1
    2cb8:	|  |            move.l d1,-(sp)
    2cba:	|  |            move.l d0,-(sp)
    2cbc:	|  |            jsr 1761c <__mulsi3>
    2cc2:	|  |            addq.l #8,sp
    2cc4:	|  |            move.l d0,d1
    2cc6:	|  |            move.l d1,d0
    2cc8:	|  |            add.l d0,d0
    2cca:	|  |            add.l d0,d0
    2ccc:	|  |            add.l d1,d0
    2cce:	|  |            add.l d0,d2
    2cd0:	|  |            movea.l 140(sp),a0
    2cd4:	|  |            move.l (a0),d0
    2cd6:	|  |            move.l 92(sp),-(sp)
    2cda:	|  |            move.l d0,-(sp)
    2cdc:	|  |            jsr 1761c <__mulsi3>
    2ce2:	|  |            addq.l #8,sp
    2ce4:	|  |            lsr.l #3,d0
    2ce6:	|  |            move.l d2,d1
    2ce8:	|  |            add.l d0,d1
    2cea:	|  |            move.l d1,120(sp)
    bltbpt = (ULONG) single->data+ystartsrc*single->width/8;
    2cee:	|  |            movea.l 140(sp),a0
    2cf2:	|  |            move.l 24(a0),d0
    2cf6:	|  |            move.l d0,d2
    2cf8:	|  |            movea.l 140(sp),a0
    2cfc:	|  |            move.l (a0),d0
    2cfe:	|  |            move.l 92(sp),-(sp)
    2d02:	|  |            move.l d0,-(sp)
    2d04:	|  |            jsr 1761c <__mulsi3>
    2d0a:	|  |            addq.l #8,sp
    2d0c:	|  |            lsr.l #3,d0
    2d0e:	|  |            move.l d2,d1
    2d10:	|  |            add.l d0,d1
    2d12:	|  |            move.l d1,116(sp)
    bltcpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2d16:	|  |            move.l 1a6f8 <winWidth>,d0
    2d1c:	|  |            move.l 96(sp),-(sp)
    2d20:	|  |            move.l d0,-(sp)
    2d22:	|  |            jsr 1761c <__mulsi3>
    2d28:	|  |            addq.l #8,sp
    2d2a:	|  |            lsr.l #3,d0
    2d2c:	|  |            move.l 132(sp),d1
    2d30:	|  |            add.l d0,d1
    2d32:	|  |            move.w 16(sp),d0
    2d36:	|  |        /-- bpl.s 2d3c <CstScaleSprite+0x778>
    2d38:	|  |        |   addi.w #15,d0
    2d3c:	|  |        \-> asr.w #4,d0
    2d3e:	|  |            movea.w d0,a0
    2d40:	|  |            move.l a0,d0
    2d42:	|  |            add.l a0,d0
    2d44:	|  |            move.l d1,d2
    2d46:	|  |            add.l d0,d2
    2d48:	|  |            move.l d2,112(sp)
    bltdpt = ((ULONG) destination) + ystartdst*winWidth/8 + (x/16)*2;
    2d4c:	|  |            move.l 1a6f8 <winWidth>,d0
    2d52:	|  |            move.l 96(sp),-(sp)
    2d56:	|  |            move.l d0,-(sp)
    2d58:	|  |            jsr 1761c <__mulsi3>
    2d5e:	|  |            addq.l #8,sp
    2d60:	|  |            lsr.l #3,d0
    2d62:	|  |            move.l 132(sp),d1
    2d66:	|  |            add.l d0,d1
    2d68:	|  |            move.w 16(sp),d0
    2d6c:	|  |        /-- bpl.s 2d72 <CstScaleSprite+0x7ae>
    2d6e:	|  |        |   addi.w #15,d0
    2d72:	|  |        \-> asr.w #4,d0
    2d74:	|  |            movea.w d0,a0
    2d76:	|  |            move.l a0,d0
    2d78:	|  |            add.l a0,d0
    2d7a:	|  |            move.l d1,d2
    2d7c:	|  |            add.l d0,d2
    2d7e:	|  |            move.l d2,108(sp)
    bltcon0 = 0xfca + ((x%16) << 12);
    2d82:	|  |            move.w 16(sp),d0
    2d86:	|  |            andi.w #-32753,d0
    2d8a:	|  |        /-- bpl.s 2d94 <CstScaleSprite+0x7d0>
    2d8c:	|  |        |   subq.w #1,d0
    2d8e:	|  |        |   ori.w #-16,d0
    2d92:	|  |        |   addq.w #1,d0
    2d94:	|  |        \-> ext.l d0
    2d96:	|  |            moveq #12,d1
    2d98:	|  |            lsl.l d1,d0
    2d9a:	|  |            addi.l #4042,d0
    2da0:	|  |            move.l d0,104(sp)
    bltcon1 = ((x%16) << 12);
    2da4:	|  |            move.w 16(sp),d0
    2da8:	|  |            andi.w #-32753,d0
    2dac:	|  |        /-- bpl.s 2db6 <CstScaleSprite+0x7f2>
    2dae:	|  |        |   subq.w #1,d0
    2db0:	|  |        |   ori.w #-16,d0
    2db4:	|  |        |   addq.w #1,d0
    2db6:	|  |        \-> ext.l d0
    2db8:	|  |            moveq #12,d2
    2dba:	|  |            lsl.l d2,d0
    2dbc:	|  |            move.l d0,100(sp)
    if( destinationtype == SCREEN)
    2dc0:	|  |            cmpi.w #1,12(sp)
    2dc6:	|  |     /----- bne.w 2e92 <CstScaleSprite+0x8ce>
    {
      struct CleanupQueue *next = CstCleanupQueueDrawBuffer;
    2dca:	|  |     |      move.l 1a6e0 <CstCleanupQueueDrawBuffer>,80(sp)
      CstCleanupQueueDrawBuffer = AllocVec( sizeof(struct CleanupQueue),MEMF_ANY);
    2dd2:	|  |     |      moveq #20,d0
    2dd4:	|  |     |      move.l d0,76(sp)
    2dd8:	|  |     |      clr.l 72(sp)
    2ddc:	|  |     |      move.l 1a7a4 <SysBase>,d0
    2de2:	|  |     |      movea.l d0,a6
    2de4:	|  |     |      move.l 76(sp),d0
    2de8:	|  |     |      move.l 72(sp),d1
    2dec:	|  |     |      jsr -684(a6)
    2df0:	|  |     |      move.l d0,68(sp)
    2df4:	|  |     |      move.l 68(sp),d0
    2df8:	|  |     |      move.l d0,1a6e0 <CstCleanupQueueDrawBuffer>
      CstCleanupQueueDrawBuffer->next = next;   
    2dfe:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e04:	|  |     |      move.l 80(sp),16(a0)

      CstCleanupQueueDrawBuffer->x = x;
    2e0a:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e10:	|  |     |      move.w 16(sp),d0
    2e14:	|  |     |      move.w d0,(a0)
      CstCleanupQueueDrawBuffer->y = y;
    2e16:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e1c:	|  |     |      move.w 14(sp),d0
    2e20:	|  |     |      move.w d0,2(a0)
      CstCleanupQueueDrawBuffer->person = person; 
    2e24:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e2a:	|  |     |      move.l 144(sp),4(a0)
      CstCleanupQueueDrawBuffer->widthinwords = single->width/16+cutwordssource+extrawords; 
    2e30:	|  |     |      movea.l 140(sp),a0
    2e34:	|  |     |      move.l (a0),d0
    2e36:	|  |     |      movea.l d0,a0
    2e38:	|  |     |      cmpa.w #0,a0
    2e3c:	|  |     |  /-- bge.s 2e42 <CstScaleSprite+0x87e>
    2e3e:	|  |     |  |   lea 15(a0),a0
    2e42:	|  |     |  \-> move.l a0,d0
    2e44:	|  |     |      asr.l #4,d0
    2e46:	|  |     |      move.l d0,d0
    2e48:	|  |     |      add.w 128(sp),d0
    2e4c:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e52:	|  |     |      add.w 130(sp),d0
    2e56:	|  |     |      move.w d0,8(a0)
      CstCleanupQueueDrawBuffer->height =  blitheight; 
    2e5a:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e60:	|  |     |      move.l 88(sp),d0
    2e64:	|  |     |      move.w d0,10(a0)
      CstCleanupQueueDrawBuffer->startxinbytes =  (x/16)*2; 
    2e68:	|  |     |      move.w 16(sp),d0
    2e6c:	|  |     |  /-- bpl.s 2e72 <CstScaleSprite+0x8ae>
    2e6e:	|  |     |  |   addi.w #15,d0
    2e72:	|  |     |  \-> asr.w #4,d0
    2e74:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e7a:	|  |     |      add.w d0,d0
    2e7c:	|  |     |      move.w d0,12(a0)
      CstCleanupQueueDrawBuffer->starty = ystartdst;
    2e80:	|  |     |      movea.l 1a6e0 <CstCleanupQueueDrawBuffer>,a0
    2e86:	|  |     |      move.l 96(sp),d0
    2e8a:	|  |     |      move.w d0,14(a0)
    2e8e:	|  +-----|----- bra.w 2f22 <CstScaleSprite+0x95e>
    } else
    {
      *CstBackDropBufferApplyCursor++ = single->width/16+cutwordssource+extrawords;
    2e92:	|  |     \----> movea.l 140(sp),a0
    2e96:	|  |            move.l (a0),d0
    2e98:	|  |            movea.l d0,a0
    2e9a:	|  |            cmpa.w #0,a0
    2e9e:	|  |        /-- bge.s 2ea4 <CstScaleSprite+0x8e0>
    2ea0:	|  |        |   lea 15(a0),a0
    2ea4:	|  |        \-> move.l a0,d0
    2ea6:	|  |            asr.l #4,d0
    2ea8:	|  |            move.l d0,d0
    2eaa:	|  |            add.w 128(sp),d0
    2eae:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2eb4:	|  |            move.l a0,d1
    2eb6:	|  |            addq.l #2,d1
    2eb8:	|  |            move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2ebe:	|  |            add.w 130(sp),d0
    2ec2:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = blitheight;
    2ec4:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2eca:	|  |            move.l a0,d0
    2ecc:	|  |            addq.l #2,d0
    2ece:	|  |            move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2ed4:	|  |            move.l 88(sp),d0
    2ed8:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = (x/16)*2;
    2eda:	|  |            move.w 16(sp),d0
    2ede:	|  |        /-- bpl.s 2ee4 <CstScaleSprite+0x920>
    2ee0:	|  |        |   addi.w #15,d0
    2ee4:	|  |        \-> asr.w #4,d0
    2ee6:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2eec:	|  |            move.l a0,d1
    2eee:	|  |            addq.l #2,d1
    2ef0:	|  |            move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    2ef6:	|  |            add.w d0,d0
    2ef8:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = ystartdst;
    2efa:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2f00:	|  |            move.l a0,d0
    2f02:	|  |            addq.l #2,d0
    2f04:	|  |            move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2f0a:	|  |            move.l 96(sp),d0
    2f0e:	|  |            move.w d0,(a0)
      *CstBackDropBufferApplyCursor++ = 0;
    2f10:	|  |            movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    2f16:	|  |            move.l a0,d0
    2f18:	|  |            addq.l #2,d0
    2f1a:	|  |            move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    2f20:	|  |            clr.w (a0)

 /*if(person && person->samePosCount > 3) {
    return;
  }*/

  UWORD bltafwm = 0xffff >> cutmaskpixel;
    2f22:	|  \----------> moveq #0,d0
    2f24:	|               move.w 126(sp),d0
    2f28:	|               moveq #0,d1
    2f2a:	|               not.w d1
    2f2c:	|               asr.l d0,d1
    2f2e:	|               move.w d1,34(sp)
  WORD bltamod = cutwordssource*2-(extrawords*2); //Jump to next line
    2f32:	|               moveq #0,d1
    2f34:	|               move.w 128(sp),d1
    2f38:	|               moveq #0,d0
    2f3a:	|               move.w 130(sp),d0
    2f3e:	|               sub.l d0,d1
    2f40:	|               move.l d1,d0
    2f42:	|               add.w d0,d0
    2f44:	|               move.w d0,32(sp)
  WORD bltbmod = cutwordssource*2-(extrawords*2); //Jump to next line
    2f48:	|               moveq #0,d1
    2f4a:	|               move.w 128(sp),d1
    2f4e:	|               moveq #0,d0
    2f50:	|               move.w 130(sp),d0
    2f54:	|               sub.l d0,d1
    2f56:	|               move.l d1,d0
    2f58:	|               add.w d0,d0
    2f5a:	|               move.w d0,30(sp)
  WORD bltcmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2f5e:	|               move.l 1a6f8 <winWidth>,d0
    2f64:	|               lsr.l #3,d0
    2f66:	|               move.l d0,d1
    2f68:	|               movea.l 140(sp),a0
    2f6c:	|               move.l (a0),d0
    2f6e:	|           /-- bpl.s 2f72 <CstScaleSprite+0x9ae>
    2f70:	|           |   addq.l #7,d0
    2f72:	|           \-> asr.l #3,d0
    2f74:	|               move.l d0,d0
    2f76:	|               sub.w d0,d1
    2f78:	|               move.w 128(sp),d0
    2f7c:	|               sub.w 130(sp),d0
    2f80:	|               add.w d0,d0
    2f82:	|               add.w d1,d0
    2f84:	|               move.w d0,28(sp)
  WORD bltdmod = winWidth/8-single->width/8-extrawords*2+cutwordssource*2;
    2f88:	|               move.l 1a6f8 <winWidth>,d0
    2f8e:	|               lsr.l #3,d0
    2f90:	|               move.l d0,d1
    2f92:	|               movea.l 140(sp),a0
    2f96:	|               move.l (a0),d0
    2f98:	|           /-- bpl.s 2f9c <CstScaleSprite+0x9d8>
    2f9a:	|           |   addq.l #7,d0
    2f9c:	|           \-> asr.l #3,d0
    2f9e:	|               move.l d0,d0
    2fa0:	|               sub.w d0,d1
    2fa2:	|               move.w 128(sp),d0
    2fa6:	|               sub.w 130(sp),d0
    2faa:	|               add.w d0,d0
    2fac:	|               add.w d1,d0
    2fae:	|               move.w d0,26(sp)

  volatile struct Custom *custom = (struct Custom*)0xdff000;
    2fb2:	|               move.l #14675968,22(sp)
  WaitBlit();
    2fba:	|               move.l 1a7b0 <GfxBase>,d0
    2fc0:	|               movea.l d0,a6
    2fc2:	|               jsr -228(a6)

  custom->bltafwm = bltafwm;
    2fc6:	|               movea.l 22(sp),a0
    2fca:	|               move.w 34(sp),68(a0)
  custom->bltalwm = bltalwm;
    2fd0:	|               movea.l 22(sp),a0
    2fd4:	|               move.w 124(sp),70(a0)
  custom->bltamod = bltamod;
    2fda:	|               move.w 32(sp),d0
    2fde:	|               movea.l 22(sp),a0
    2fe2:	|               move.w d0,100(a0)
  custom->bltbmod = bltbmod;
    2fe6:	|               move.w 30(sp),d0
    2fea:	|               movea.l 22(sp),a0
    2fee:	|               move.w d0,98(a0)
  custom->bltcmod = bltcmod;
    2ff2:	|               move.w 28(sp),d0
    2ff6:	|               movea.l 22(sp),a0
    2ffa:	|               move.w d0,96(a0)
  custom->bltdmod = bltdmod;
    2ffe:	|               move.w 26(sp),d0
    3002:	|               movea.l 22(sp),a0
    3006:	|               move.w d0,102(a0)
  custom->bltcon0 = bltcon0;
    300a:	|               move.l 104(sp),d0
    300e:	|               movea.l 22(sp),a0
    3012:	|               move.w d0,64(a0)
  custom->bltcon1 = bltcon1;  
    3016:	|               move.l 100(sp),d0
    301a:	|               movea.l 22(sp),a0
    301e:	|               move.w d0,66(a0)

  UWORD bltbptplus = (single->width >> 3)*single->height;
    3022:	|               movea.l 140(sp),a0
    3026:	|               move.l (a0),d0
    3028:	|               asr.l #3,d0
    302a:	|               move.l d0,d1
    302c:	|               movea.l 140(sp),a0
    3030:	|               move.l 4(a0),d0
    3034:	|               move.l d0,d0
    3036:	|               move.w d1,d2
    3038:	|               muls.w d0,d2
    303a:	|               move.w d2,20(sp)
  UWORD bltcptplus = winWidth/8*winHeight;
    303e:	|               move.l 1a6f8 <winWidth>,d0
    3044:	|               lsr.l #3,d0
    3046:	|               move.l d0,d1
    3048:	|               move.l 1a6fc <winHeight>,d0
    304e:	|               move.l d0,d0
    3050:	|               move.w d1,d2
    3052:	|               muls.w d0,d2
    3054:	|               move.w d2,18(sp)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    3058:	|               clr.l 84(sp)
    305c:	|        /----- bra.w 30f0 <CstScaleSprite+0xb2c>
  {
    custom->bltapt = (APTR) bltapt;
    3060:	|     /--|----> move.l 120(sp),d0
    3064:	|     |  |      movea.l 22(sp),a0
    3068:	|     |  |      move.l d0,80(a0)
    custom->bltbpt = (APTR) bltbpt;
    306c:	|     |  |      move.l 116(sp),d0
    3070:	|     |  |      movea.l 22(sp),a0
    3074:	|     |  |      move.l d0,76(a0)
    custom->bltcpt = (APTR) bltcpt;
    3078:	|     |  |      move.l 112(sp),d0
    307c:	|     |  |      movea.l 22(sp),a0
    3080:	|     |  |      move.l d0,72(a0)
    custom->bltdpt = (APTR) bltdpt;
    3084:	|     |  |      move.l 108(sp),d0
    3088:	|     |  |      movea.l 22(sp),a0
    308c:	|     |  |      move.l d0,84(a0)
    custom->bltsize = (blitheight << 6) + single->width/16-cutwordssource+extrawords;
    3090:	|     |  |      move.l 88(sp),d0
    3094:	|     |  |      move.w d0,d1
    3096:	|     |  |      lsl.w #6,d1
    3098:	|     |  |      movea.l 140(sp),a0
    309c:	|     |  |      move.l (a0),d0
    309e:	|     |  |      movea.l d0,a0
    30a0:	|     |  |      cmpa.w #0,a0
    30a4:	|     |  |  /-- bge.s 30aa <CstScaleSprite+0xae6>
    30a6:	|     |  |  |   lea 15(a0),a0
    30aa:	|     |  |  \-> move.l a0,d0
    30ac:	|     |  |      asr.l #4,d0
    30ae:	|     |  |      move.l d0,d0
    30b0:	|     |  |      add.w d1,d0
    30b2:	|     |  |      sub.w 128(sp),d0
    30b6:	|     |  |      add.w 130(sp),d0
    30ba:	|     |  |      movea.l 22(sp),a0
    30be:	|     |  |      move.w d0,88(a0)
    bltbpt += bltbptplus;
    30c2:	|     |  |      moveq #0,d0
    30c4:	|     |  |      move.w 20(sp),d0
    30c8:	|     |  |      add.l d0,116(sp)
    bltcpt += bltcptplus;
    30cc:	|     |  |      moveq #0,d0
    30ce:	|     |  |      move.w 18(sp),d0
    30d2:	|     |  |      add.l d0,112(sp)
    bltdpt += bltcptplus;
    30d6:	|     |  |      moveq #0,d0
    30d8:	|     |  |      move.w 18(sp),d0
    30dc:	|     |  |      add.l d0,108(sp)
    WaitBlit();
    30e0:	|     |  |      move.l 1a7b0 <GfxBase>,d0
    30e6:	|     |  |      movea.l d0,a6
    30e8:	|     |  |      jsr -228(a6)
  for(int i=0;i<5;i++) //ToDo other numbers of Bitplanes
    30ec:	|     |  |      addq.l #1,84(sp)
    30f0:	|     |  \----> moveq #4,d0
    30f2:	|     |         cmp.l 84(sp),d0
    30f6:	|     \-------- bge.w 3060 <CstScaleSprite+0xa9c>
  }   
}
    30fa:	\-------------> movem.l (sp)+,d2-d3/a6
    30fe:	                lea 124(sp),sp
    3102:	                rts

00003104 <CstSetCl>:

void CstSetCl(UWORD *copperlist)
{
    3104:	subq.l #4,sp
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3106:	move.l #14675968,(sp)
  custom->cop1lc = (ULONG) copperlist;
    310c:	move.l 8(sp),d0
    3110:	movea.l (sp),a0
    3112:	move.l d0,128(a0)
}
    3116:	nop
    3118:	addq.l #4,sp
    311a:	rts

0000311c <CstSwapBuffer>:

void CstSwapBuffer( ) {
    311c:	lea -20(sp),sp
  ULONG *tmp;
  tmp = CstViewBuffer;
    3120:	move.l 1a6d4 <CstViewBuffer>,16(sp)
  CstViewBuffer = CstDrawBuffer;
    3128:	move.l 1a6d8 <CstDrawBuffer>,d0
    312e:	move.l d0,1a6d4 <CstViewBuffer>
  CstDrawBuffer = tmp;
    3134:	move.l 16(sp),1a6d8 <CstDrawBuffer>

  struct CleanupQueue *tmp2 = CstCleanupQueueViewBuffer;
    313c:	move.l 1a6dc <CstCleanupQueueViewBuffer>,12(sp)
  CstCleanupQueueViewBuffer = CstCleanupQueueDrawBuffer;
    3144:	move.l 1a6e0 <CstCleanupQueueDrawBuffer>,d0
    314a:	move.l d0,1a6dc <CstCleanupQueueViewBuffer>
  CstCleanupQueueDrawBuffer = tmp2;
    3150:	move.l 12(sp),1a6e0 <CstCleanupQueueDrawBuffer>


  UWORD *copword = CstCopperList;
    3158:	move.l 1a6ce <CstCopperList>,8(sp)
  ULONG ptr = (ULONG) CstViewBuffer;
    3160:	move.l 1a6d4 <CstViewBuffer>,d0
    3166:	move.l d0,4(sp)
  UWORD highword = ptr >> 16;
    316a:	move.l 4(sp),d0
    316e:	clr.w d0
    3170:	swap d0
    3172:	move.w d0,2(sp)
  UWORD lowword = ptr & 0xffff;  
    3176:	move.w 6(sp),(sp)

  copword[CSTBPL1LOW] = lowword;
    317a:	movea.w #118,a0
    317e:	adda.l 8(sp),a0
    3182:	move.w (sp),(a0)
  copword[CSTBPL1HIGH] = highword;
    3184:	movea.w #114,a0
    3188:	adda.l 8(sp),a0
    318c:	move.w 2(sp),(a0)

  ptr +=  40*256;
    3190:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3198:	move.l 4(sp),d0
    319c:	clr.w d0
    319e:	swap d0
    31a0:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    31a4:	move.w 6(sp),(sp)

  copword[CSTBPL2LOW] = lowword;
    31a8:	movea.w #126,a0
    31ac:	adda.l 8(sp),a0
    31b0:	move.w (sp),(a0)
  copword[CSTBPL2HIGH] = highword;
    31b2:	movea.w #122,a0
    31b6:	adda.l 8(sp),a0
    31ba:	move.w 2(sp),(a0)
  
  ptr +=  40*256;
    31be:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    31c6:	move.l 4(sp),d0
    31ca:	clr.w d0
    31cc:	swap d0
    31ce:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    31d2:	move.w 6(sp),(sp)
  
  copword[CSTBPL3LOW] = lowword;
    31d6:	movea.l 8(sp),a0
    31da:	lea 134(a0),a0
    31de:	move.w (sp),(a0)
  copword[CSTBPL3HIGH] = highword;
    31e0:	movea.l 8(sp),a0
    31e4:	lea 130(a0),a0
    31e8:	move.w 2(sp),(a0)

  ptr +=  40*256;
    31ec:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    31f4:	move.l 4(sp),d0
    31f8:	clr.w d0
    31fa:	swap d0
    31fc:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    3200:	move.w 6(sp),(sp)

  copword[CSTBPL4LOW] = lowword;
    3204:	movea.l 8(sp),a0
    3208:	lea 142(a0),a0
    320c:	move.w (sp),(a0)
  copword[CSTBPL4HIGH] = highword;
    320e:	movea.l 8(sp),a0
    3212:	lea 138(a0),a0
    3216:	move.w 2(sp),(a0)

  ptr +=  40*256;
    321a:	addi.l #10240,4(sp)
  highword = ptr >> 16;
    3222:	move.l 4(sp),d0
    3226:	clr.w d0
    3228:	swap d0
    322a:	move.w d0,2(sp)
  lowword = ptr & 0xffff;  
    322e:	move.w 6(sp),(sp)

  copword[CSTBPL5LOW] = lowword;
    3232:	movea.l 8(sp),a0
    3236:	lea 150(a0),a0
    323a:	move.w (sp),(a0)
  copword[CSTBPL5HIGH] = highword;
    323c:	movea.l 8(sp),a0
    3240:	lea 146(a0),a0
    3244:	move.w 2(sp),(a0)

}
    3248:	nop
    324a:	lea 20(sp),sp
    324e:	rts

00003250 <CstReserveBackdrop>:

BOOL CstReserveBackdrop(int width, int height) {
    3250:	          lea -56(sp),sp
    3254:	          move.l a6,-(sp)

 	KPrintF("CstReserveBackdrop: Begin");
    3256:	          pea 17a73 <PutChar+0x341>
    325c:	          jsr 16c5e <KPrintF>
    3262:	          addq.l #4,sp

  width = width / 8;
    3264:	          move.l 64(sp),d0
    3268:	      /-- bpl.s 326c <CstReserveBackdrop+0x1c>
    326a:	      |   addq.l #7,d0
    326c:	      \-> asr.l #3,d0
    326e:	          move.l d0,64(sp)

  if( width < 40) 
    3272:	          moveq #39,d0
    3274:	          cmp.l 64(sp),d0
    3278:	      /-- blt.s 328e <CstReserveBackdrop+0x3e>
  {
    KPrintF("CstReserveBackdrop: Screens smaller than 320px not supported.");
    327a:	      |   pea 17a8d <PutChar+0x35b>
    3280:	      |   jsr 16c5e <KPrintF>
    3286:	      |   addq.l #4,sp
    return FALSE;
    3288:	      |   clr.w d0
    328a:	/-----|-- bra.w 35d0 <CstReserveBackdrop+0x380>
  }  
  KPrintF("CstReserveBackdrop: Screen Okay");
    328e:	|     \-> pea 17acb <PutChar+0x399>
    3294:	|         jsr 16c5e <KPrintF>
    329a:	|         addq.l #4,sp

  CstCopperList = CstCreateCopperlist( width);
    329c:	|         move.l 64(sp),-(sp)
    32a0:	|         jsr fce <CstCreateCopperlist>
    32a6:	|         addq.l #4,sp
    32a8:	|         move.l d0,1a6ce <CstCopperList>
  KPrintF("CstReserveBackdrop: Copperlist created");
    32ae:	|         pea 17aeb <PutChar+0x3b9>
    32b4:	|         jsr 16c5e <KPrintF>
    32ba:	|         addq.l #4,sp
  CstBackdropSizePlane = width*height;
    32bc:	|         move.l 64(sp),d1
    32c0:	|         move.l 68(sp),d0
    32c4:	|         muls.w d1,d0
    32c6:	|         move.w d0,1a6c4 <CstBackdropSizePlane>
  CstBackdropSize = CstBackdropSizePlane * 5; //Todo: Support other Bitplane Modes;  
    32cc:	|         move.w 1a6c4 <CstBackdropSizePlane>,d1
    32d2:	|         move.w d1,d0
    32d4:	|         add.w d0,d0
    32d6:	|         add.w d0,d0
    32d8:	|         add.w d1,d0
    32da:	|         move.w d0,1a6c2 <CstBackdropSize>
  

  CstBackDrop = AllocVec(CstBackdropSize,MEMF_CHIP);
    32e0:	|         move.w 1a6c2 <CstBackdropSize>,d0
    32e6:	|         move.w d0,d0
    32e8:	|         andi.l #65535,d0
    32ee:	|         move.l d0,48(sp)
    32f2:	|         moveq #2,d1
    32f4:	|         move.l d1,44(sp)
    32f8:	|         move.l 1a7a4 <SysBase>,d0
    32fe:	|         movea.l d0,a6
    3300:	|         move.l 48(sp),d0
    3304:	|         move.l 44(sp),d1
    3308:	|         jsr -684(a6)
    330c:	|         move.l d0,40(sp)
    3310:	|         move.l 40(sp),d0
    3314:	|         move.l d0,1a6c6 <CstBackDrop>
  if( !CstBackDrop)
    331a:	|         move.l 1a6c6 <CstBackDrop>,d0
    3320:	|     /-- bne.s 3336 <CstReserveBackdrop+0xe6>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for Backdrop");
    3322:	|     |   pea 17b12 <PutChar+0x3e0>
    3328:	|     |   jsr 16c5e <KPrintF>
    332e:	|     |   addq.l #4,sp
    return FALSE;  
    3330:	|     |   clr.w d0
    3332:	+-----|-- bra.w 35d0 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: Backdrop reserved");
    3336:	|     \-> pea 17b4a <PutChar+0x418>
    333c:	|         jsr 16c5e <KPrintF>
    3342:	|         addq.l #4,sp

  //Initialize Buffer
  ULONG *cursor = (ULONG *)CstBackDrop;
    3344:	|         move.l 1a6c6 <CstBackDrop>,56(sp)
  for(int i=0;i<CstBackdropSize/4;i++)
    334c:	|         clr.l 52(sp)
    3350:	|     /-- bra.s 3366 <CstReserveBackdrop+0x116>
  {
    *cursor++ = 0;
    3352:	|  /--|-> move.l 56(sp),d0
    3356:	|  |  |   move.l d0,d1
    3358:	|  |  |   addq.l #4,d1
    335a:	|  |  |   move.l d1,56(sp)
    335e:	|  |  |   movea.l d0,a0
    3360:	|  |  |   clr.l (a0)
  for(int i=0;i<CstBackdropSize/4;i++)
    3362:	|  |  |   addq.l #1,52(sp)
    3366:	|  |  \-> move.w 1a6c2 <CstBackdropSize>,d0
    336c:	|  |      lsr.w #2,d0
    336e:	|  |      move.w d0,d0
    3370:	|  |      andi.l #65535,d0
    3376:	|  |      cmp.l 52(sp),d0
    337a:	|  \----- bgt.s 3352 <CstReserveBackdrop+0x102>
  }  
  
  CstDrawBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    337c:	|         move.w 1a6c2 <CstBackdropSize>,d0
    3382:	|         move.w d0,d0
    3384:	|         andi.l #65535,d0
    338a:	|         move.l 64(sp),d1
    338e:	|         add.l d1,d1
    3390:	|         add.l d1,d0
    3392:	|         move.l d0,36(sp)
    3396:	|         moveq #2,d0
    3398:	|         move.l d0,32(sp)
    339c:	|         move.l 1a7a4 <SysBase>,d0
    33a2:	|         movea.l d0,a6
    33a4:	|         move.l 36(sp),d0
    33a8:	|         move.l 32(sp),d1
    33ac:	|         jsr -684(a6)
    33b0:	|         move.l d0,28(sp)
    33b4:	|         move.l 28(sp),d0
    33b8:	|         move.l d0,1a6d8 <CstDrawBuffer>
  if( !CstDrawBuffer)
    33be:	|         move.l 1a6d8 <CstDrawBuffer>,d0
    33c4:	|     /-- bne.s 33da <CstReserveBackdrop+0x18a>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for DrawBuffer");
    33c6:	|     |   pea 17b70 <PutChar+0x43e>
    33cc:	|     |   jsr 16c5e <KPrintF>
    33d2:	|     |   addq.l #4,sp
    return FALSE;  
    33d4:	|     |   clr.w d0
    33d6:	+-----|-- bra.w 35d0 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: DrawBuffer reserved");
    33da:	|     \-> pea 17baa <PutChar+0x478>
    33e0:	|         jsr 16c5e <KPrintF>
    33e6:	|         addq.l #4,sp
    
  CstBackDropBufferApplyStart = AllocVec( 1000*5*2,MEMF_ANY);
    33e8:	|         move.l #10000,24(sp)
    33f0:	|         clr.l 20(sp)
    33f4:	|         move.l 1a7a4 <SysBase>,d0
    33fa:	|         movea.l d0,a6
    33fc:	|         move.l 24(sp),d0
    3400:	|         move.l 20(sp),d1
    3404:	|         jsr -684(a6)
    3408:	|         move.l d0,16(sp)
    340c:	|         move.l 16(sp),d0
    3410:	|         move.l d0,1a6e4 <CstBackDropBufferApplyStart>
  if( !CstBackDropBufferApplyStart)
    3416:	|         move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    341c:	|     /-- bne.s 3432 <CstReserveBackdrop+0x1e2>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for CstBackDropBufferApplyStart");
    341e:	|     |   pea 17bd2 <PutChar+0x4a0>
    3424:	|     |   jsr 16c5e <KPrintF>
    342a:	|     |   addq.l #4,sp
    return FALSE;  
    342c:	|     |   clr.w d0
    342e:	+-----|-- bra.w 35d0 <CstReserveBackdrop+0x380>
  }
  CstBackDropBufferApplyCursor = CstBackDropBufferApplyStart;
    3432:	|     \-> move.l 1a6e4 <CstBackDropBufferApplyStart>,d0
    3438:	|         move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
  *CstBackDropBufferApplyStart = 0;
    343e:	|         movea.l 1a6e4 <CstBackDropBufferApplyStart>,a0
    3444:	|         clr.w (a0)

  *CstBackDropBufferApplyStart = 0;
    3446:	|         movea.l 1a6e4 <CstBackDropBufferApplyStart>,a0
    344c:	|         clr.w (a0)
  CstViewBuffer = AllocVec(CstBackdropSize+width*2,MEMF_CHIP); //Some extra size for bob routine border area
    344e:	|         move.w 1a6c2 <CstBackdropSize>,d0
    3454:	|         move.w d0,d0
    3456:	|         andi.l #65535,d0
    345c:	|         move.l 64(sp),d1
    3460:	|         add.l d1,d1
    3462:	|         add.l d1,d0
    3464:	|         move.l d0,12(sp)
    3468:	|         moveq #2,d1
    346a:	|         move.l d1,8(sp)
    346e:	|         move.l 1a7a4 <SysBase>,d0
    3474:	|         movea.l d0,a6
    3476:	|         move.l 12(sp),d0
    347a:	|         move.l 8(sp),d1
    347e:	|         jsr -684(a6)
    3482:	|         move.l d0,4(sp)
    3486:	|         move.l 4(sp),d0
    348a:	|         move.l d0,1a6d4 <CstViewBuffer>
  if( !CstViewBuffer)
    3490:	|         move.l 1a6d4 <CstViewBuffer>,d0
    3496:	|     /-- bne.s 34ac <CstReserveBackdrop+0x25c>
  {    
    KPrintF("CstReserveBackdrop: Cannot allocate memory for ViewBuffer");
    3498:	|     |   pea 17c1d <PutChar+0x4eb>
    349e:	|     |   jsr 16c5e <KPrintF>
    34a4:	|     |   addq.l #4,sp
    return FALSE;  
    34a6:	|     |   clr.w d0
    34a8:	+-----|-- bra.w 35d0 <CstReserveBackdrop+0x380>
  }
  KPrintF("CstReserveBackdrop: ViewBuffer reserved");
    34ac:	|     \-> pea 17c57 <PutChar+0x525>
    34b2:	|         jsr 16c5e <KPrintF>
    34b8:	|         addq.l #4,sp
  
  CstDrawBuffer += width/4; //divide with 4 because pointer is ulong 
    34ba:	|         move.l 1a6d8 <CstDrawBuffer>,d1
    34c0:	|         move.l 64(sp),d0
    34c4:	|     /-- bpl.s 34c8 <CstReserveBackdrop+0x278>
    34c6:	|     |   addq.l #3,d0
    34c8:	|     \-> asr.l #2,d0
    34ca:	|         add.l d0,d0
    34cc:	|         add.l d0,d0
    34ce:	|         add.l d1,d0
    34d0:	|         move.l d0,1a6d8 <CstDrawBuffer>
  CstViewBuffer += width/4; //divide with 4 because pointer is ulong
    34d6:	|         move.l 1a6d4 <CstViewBuffer>,d1
    34dc:	|         move.l 64(sp),d0
    34e0:	|     /-- bpl.s 34e4 <CstReserveBackdrop+0x294>
    34e2:	|     |   addq.l #3,d0
    34e4:	|     \-> asr.l #2,d0
    34e6:	|         add.l d0,d0
    34e8:	|         add.l d0,d0
    34ea:	|         add.l d1,d0
    34ec:	|         move.l d0,1a6d4 <CstViewBuffer>
  

#ifdef EMULATOR
 	debug_register_bitmap(CstBackDrop, "CstBackDrop.bpl", 320, 256, 5, 0);
    34f2:	|         move.l 1a6c6 <CstBackDrop>,d0
    34f8:	|         clr.l -(sp)
    34fa:	|         pea 5 <_start+0x5>
    34fe:	|         pea 100 <copyString+0x48>
    3502:	|         pea 140 <decodeFilename+0x28>
    3506:	|         pea 17c7f <PutChar+0x54d>
    350c:	|         move.l d0,-(sp)
    350e:	|         jsr 16d46 <debug_register_bitmap>
    3514:	|         lea 24(sp),sp
  debug_register_bitmap(CstDrawBuffer, "drawbuffer.bpl", width*8, height, 5, 0);
    3518:	|         move.l 68(sp),d0
    351c:	|         movea.w d0,a1
    351e:	|         move.l 64(sp),d0
    3522:	|         lsl.w #3,d0
    3524:	|         movea.w d0,a0
    3526:	|         move.l 1a6d8 <CstDrawBuffer>,d0
    352c:	|         clr.l -(sp)
    352e:	|         pea 5 <_start+0x5>
    3532:	|         move.l a1,-(sp)
    3534:	|         move.l a0,-(sp)
    3536:	|         pea 17c8f <PutChar+0x55d>
    353c:	|         move.l d0,-(sp)
    353e:	|         jsr 16d46 <debug_register_bitmap>
    3544:	|         lea 24(sp),sp
  debug_register_bitmap(CstViewBuffer, "viewbuffer.bpl", width*8, height, 5, 0);
    3548:	|         move.l 68(sp),d0
    354c:	|         movea.w d0,a1
    354e:	|         move.l 64(sp),d0
    3552:	|         lsl.w #3,d0
    3554:	|         movea.w d0,a0
    3556:	|         move.l 1a6d4 <CstViewBuffer>,d0
    355c:	|         clr.l -(sp)
    355e:	|         pea 5 <_start+0x5>
    3562:	|         move.l a1,-(sp)
    3564:	|         move.l a0,-(sp)
    3566:	|         pea 17c9e <PutChar+0x56c>
    356c:	|         move.l d0,-(sp)
    356e:	|         jsr 16d46 <debug_register_bitmap>
    3574:	|         lea 24(sp),sp
#endif

  

  if( !CstCopperList || ! CstDrawBuffer || !CstViewBuffer)
    3578:	|         move.l 1a6ce <CstCopperList>,d0
    357e:	|     /-- beq.s 3590 <CstReserveBackdrop+0x340>
    3580:	|     |   move.l 1a6d8 <CstDrawBuffer>,d0
    3586:	|     +-- beq.s 3590 <CstReserveBackdrop+0x340>
    3588:	|     |   move.l 1a6d4 <CstViewBuffer>,d0
    358e:	|  /--|-- bne.s 35a2 <CstReserveBackdrop+0x352>
  {
    KPrintF("CstReserveBackdrop: Memory allocation failed");
    3590:	|  |  \-> pea 17cad <PutChar+0x57b>
    3596:	|  |      jsr 16c5e <KPrintF>
    359c:	|  |      addq.l #4,sp
    return FALSE;
    359e:	|  |      clr.w d0
    35a0:	+--|----- bra.s 35d0 <CstReserveBackdrop+0x380>
  }

  KPrintF("CstReserveBackdrop: Setting Copperlist");
    35a2:	|  \----> pea 17cda <PutChar+0x5a8>
    35a8:	|         jsr 16c5e <KPrintF>
    35ae:	|         addq.l #4,sp
  CstSetCl( CstCopperList);
    35b0:	|         move.l 1a6ce <CstCopperList>,d0
    35b6:	|         move.l d0,-(sp)
    35b8:	|         jsr 3104 <CstSetCl>
    35be:	|         addq.l #4,sp
  KPrintF("CstReserveBackdrop: Copperlist Set");
    35c0:	|         pea 17d01 <PutChar+0x5cf>
    35c6:	|         jsr 16c5e <KPrintF>
    35cc:	|         addq.l #4,sp
  return TRUE;
    35ce:	|         moveq #1,d0

}
    35d0:	\-------> movea.l (sp)+,a6
    35d2:	          lea 56(sp),sp
    35d6:	          rts

000035d8 <CstUnfreeze>:

void CstUnfreeze() {
    35d8:	       lea -24(sp),sp
    35dc:	       move.l a6,-(sp)
    35de:	       move.l d2,-(sp)
	KPrintF("CstUnfreeze: Unfreezing Background Started");  
    35e0:	       pea 17d24 <PutChar+0x5f2>
    35e6:	       jsr 16c5e <KPrintF>
    35ec:	       addq.l #4,sp

  UWORD size = winWidth/8*winHeight*5;
    35ee:	       move.l 1a6f8 <winWidth>,d0
    35f4:	       lsr.l #3,d0
    35f6:	       move.l d0,d1
    35f8:	       move.l 1a6fc <winHeight>,d0
    35fe:	       move.l d0,d0
    3600:	       muls.w d0,d1
    3602:	       move.w d1,d0
    3604:	       add.w d0,d0
    3606:	       add.w d0,d0
    3608:	       move.w d0,d2
    360a:	       add.w d1,d2
    360c:	       move.w d2,18(sp)

  //Writing to Framebuffer
  volatile struct Custom *custom = (struct Custom*)0xdff000;
    3610:	       move.l #14675968,14(sp)

#ifdef EMULATOR
  debug_register_bitmap(CstBackDropBackup, "BackDropBackup", winWidth, winHeight, 5, 0);
    3618:	       move.l 1a6fc <winHeight>,d0
    361e:	       move.l d0,d0
    3620:	       movea.w d0,a1
    3622:	       move.l 1a6f8 <winWidth>,d0
    3628:	       move.l d0,d0
    362a:	       movea.w d0,a0
    362c:	       move.l 1a6ca <CstBackDropBackup>,d0
    3632:	       clr.l -(sp)
    3634:	       pea 5 <_start+0x5>
    3638:	       move.l a1,-(sp)
    363a:	       move.l a0,-(sp)
    363c:	       pea 178f6 <PutChar+0x1c4>
    3642:	       move.l d0,-(sp)
    3644:	       jsr 16d46 <debug_register_bitmap>
    364a:	       lea 24(sp),sp
#endif  

  ULONG *src = (ULONG *) CstBackDropBackup;
    364e:	       move.l 1a6ca <CstBackDropBackup>,28(sp)
  ULONG *dst = (ULONG *) CstBackDrop;
    3656:	       move.l 1a6c6 <CstBackDrop>,24(sp)
  for(int i=0;i<size/4;i++) 
    365e:	       clr.l 20(sp)
    3662:	   /-- bra.s 3688 <CstUnfreeze+0xb0>
  {
    *dst++ = *src++;
    3664:	/--|-> move.l 28(sp),d1
    3668:	|  |   move.l d1,d0
    366a:	|  |   addq.l #4,d0
    366c:	|  |   move.l d0,28(sp)
    3670:	|  |   move.l 24(sp),d0
    3674:	|  |   move.l d0,d2
    3676:	|  |   addq.l #4,d2
    3678:	|  |   move.l d2,24(sp)
    367c:	|  |   movea.l d1,a0
    367e:	|  |   move.l (a0),d1
    3680:	|  |   movea.l d0,a0
    3682:	|  |   move.l d1,(a0)
  for(int i=0;i<size/4;i++) 
    3684:	|  |   addq.l #1,20(sp)
    3688:	|  \-> move.w 18(sp),d0
    368c:	|      lsr.w #2,d0
    368e:	|      move.w d0,d0
    3690:	|      andi.l #65535,d0
    3696:	|      cmp.l 20(sp),d0
    369a:	\----- bgt.s 3664 <CstUnfreeze+0x8c>
  }

  CstApplyBackDropCounter = 2;
    369c:	       move.w #2,1a6d2 <CstApplyBackDropCounter>

  *CstBackDropBufferApplyCursor++ = winWidth/16;
    36a4:	       move.l 1a6f8 <winWidth>,d0
    36aa:	       lsr.l #4,d0
    36ac:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    36b2:	       move.l a0,d1
    36b4:	       addq.l #2,d1
    36b6:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    36bc:	       move.l d0,d0
    36be:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = winHeight;
    36c0:	       move.l 1a6fc <winHeight>,d0
    36c6:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    36cc:	       move.l a0,d1
    36ce:	       addq.l #2,d1
    36d0:	       move.l d1,1a6e8 <CstBackDropBufferApplyCursor>
    36d6:	       move.l d0,d0
    36d8:	       move.w d0,(a0)
  *CstBackDropBufferApplyCursor++ = 0;
    36da:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    36e0:	       move.l a0,d0
    36e2:	       addq.l #2,d0
    36e4:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    36ea:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    36ec:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    36f2:	       move.l a0,d0
    36f4:	       addq.l #2,d0
    36f6:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    36fc:	       clr.w (a0)
  *CstBackDropBufferApplyCursor++ = 0;
    36fe:	       movea.l 1a6e8 <CstBackDropBufferApplyCursor>,a0
    3704:	       move.l a0,d0
    3706:	       addq.l #2,d0
    3708:	       move.l d0,1a6e8 <CstBackDropBufferApplyCursor>
    370e:	       clr.w (a0)
  
  if( !CstBackDropBackup) {
    3710:	       move.l 1a6ca <CstBackDropBackup>,d0
    3716:	   /-- bne.s 3730 <CstUnfreeze+0x158>
    FreeVec( CstBackDropBackup);
    3718:	   |   move.l 1a6ca <CstBackDropBackup>,10(sp)
    3720:	   |   move.l 1a7a4 <SysBase>,d0
    3726:	   |   movea.l d0,a6
    3728:	   |   movea.l 10(sp),a1
    372c:	   |   jsr -690(a6)
  }

  KPrintF("CstFreeze: Finished");
    3730:	   \-> pea 17905 <PutChar+0x1d3>
    3736:	       jsr 16c5e <KPrintF>
    373c:	       addq.l #4,sp

}
    373e:	       nop
    3740:	       move.l (sp)+,d2
    3742:	       movea.l (sp)+,a6
    3744:	       lea 24(sp),sp
    3748:	       rts

0000374a <drawLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

extern int sceneWidth, sceneHeight;

void drawLine(int x1, int y1, int x2, int y2) {
    374a:	       lea -20(sp),sp
	int x, y;
	BOOL backwards = FALSE;
    374e:	       clr.w 10(sp)
	
	if (x1 < 0)  x1 = 0;
    3752:	       tst.l 24(sp)
    3756:	   /-- bge.s 375c <drawLine+0x12>
    3758:	   |   clr.l 24(sp)
	if (y1 < 0)  y1 = 0;
    375c:	   \-> tst.l 28(sp)
    3760:	   /-- bge.s 3766 <drawLine+0x1c>
    3762:	   |   clr.l 28(sp)
	if (x2 < 0)  x2 = 0;
    3766:	   \-> tst.l 32(sp)
    376a:	   /-- bge.s 3770 <drawLine+0x26>
    376c:	   |   clr.l 32(sp)
	if (y2 < 0)  y2 = 0;
    3770:	   \-> tst.l 36(sp)
    3774:	   /-- bge.s 377a <drawLine+0x30>
    3776:	   |   clr.l 36(sp)
	if (x1 > sceneWidth) x1 = sceneWidth - 1;
    377a:	   \-> move.l 1a894 <sceneWidth>,d0
    3780:	       cmp.l 24(sp),d0
    3784:	   /-- bge.s 3794 <drawLine+0x4a>
    3786:	   |   move.l 1a894 <sceneWidth>,d0
    378c:	   |   move.l d0,d1
    378e:	   |   subq.l #1,d1
    3790:	   |   move.l d1,24(sp)
	if (x2 > sceneWidth) x2 = sceneWidth - 1;
    3794:	   \-> move.l 1a894 <sceneWidth>,d0
    379a:	       cmp.l 32(sp),d0
    379e:	   /-- bge.s 37ae <drawLine+0x64>
    37a0:	   |   move.l 1a894 <sceneWidth>,d0
    37a6:	   |   move.l d0,d1
    37a8:	   |   subq.l #1,d1
    37aa:	   |   move.l d1,32(sp)
	if (y1 > sceneHeight) y1 = sceneHeight - 1;
    37ae:	   \-> move.l 1a898 <sceneHeight>,d0
    37b4:	       cmp.l 28(sp),d0
    37b8:	   /-- bge.s 37c8 <drawLine+0x7e>
    37ba:	   |   move.l 1a898 <sceneHeight>,d0
    37c0:	   |   move.l d0,d1
    37c2:	   |   subq.l #1,d1
    37c4:	   |   move.l d1,28(sp)
	if (y2 > sceneHeight) y2 = sceneHeight - 1;
    37c8:	   \-> move.l 1a898 <sceneHeight>,d0
    37ce:	       cmp.l 36(sp),d0
    37d2:	   /-- bge.s 37e2 <drawLine+0x98>
    37d4:	   |   move.l 1a898 <sceneHeight>,d0
    37da:	   |   move.l d0,d1
    37dc:	   |   subq.l #1,d1
    37de:	   |   move.l d1,36(sp)

	if (x1 > x2) {
    37e2:	   \-> move.l 24(sp),d0
    37e6:	       cmp.l 32(sp),d0
    37ea:	/----- ble.s 3806 <drawLine+0xbc>
		x = x2; 
    37ec:	|      move.l 32(sp),16(sp)
		backwards = !backwards;
    37f2:	|      tst.w 10(sp)
    37f6:	|      seq d0
    37f8:	|      neg.b d0
    37fa:	|      move.b d0,d0
    37fc:	|      andi.w #255,d0
    3800:	|      move.w d0,10(sp)
    3804:	|  /-- bra.s 380c <drawLine+0xc2>
	} else x = x1;
    3806:	\--|-> move.l 24(sp),16(sp)
		
	if (y1 > y2) {
    380c:	   \-> move.l 28(sp),d1
    3810:	       cmp.l 36(sp),d1
    3814:	/----- ble.s 3830 <drawLine+0xe6>
		y = y2; 
    3816:	|      move.l 36(sp),12(sp)
		backwards = !backwards;
    381c:	|      tst.w 10(sp)
    3820:	|      seq d0
    3822:	|      neg.b d0
    3824:	|      move.b d0,d0
    3826:	|      andi.w #255,d0
    382a:	|      move.w d0,10(sp)
    382e:	|  /-- bra.s 3836 <drawLine+0xec>
	} else y = y1;	
    3830:	\--|-> move.l 28(sp),12(sp)
	
	int diffX = x2-x1;
    3836:	   \-> move.l 32(sp),d0
    383a:	       sub.l 24(sp),d0
    383e:	       move.l d0,6(sp)
    diffX = diffX < 0 ? diffX * -1 : diffX;
    3842:	       move.l 6(sp),d0
    3846:	   /-- bpl.s 384a <drawLine+0x100>
    3848:	   |   neg.l d0
    384a:	   \-> move.l d0,6(sp)
	int diffY = y2-y1;	
    384e:	       move.l 36(sp),d1
    3852:	       sub.l 28(sp),d1
    3856:	       move.l d1,2(sp)
    diffY = diffY < 0 ? diffY * -1 : diffY;
    385a:	       move.l 2(sp),d0
    385e:	   /-- bpl.s 3862 <drawLine+0x118>
    3860:	   |   neg.l d0
    3862:	   \-> move.l d0,2(sp)
	
	if (! diffX) {
    3866:	       tst.l 6(sp)
    386a:	   /-- bne.s 388e <drawLine+0x144>
		diffX = 1;
    386c:	   |   moveq #1,d0
    386e:	   |   move.l d0,6(sp)
		if (x == sceneWidth - 1) x = sceneWidth -2;
    3872:	   |   move.l 1a894 <sceneWidth>,d0
    3878:	   |   subq.l #1,d0
    387a:	   |   cmp.l 16(sp),d0
    387e:	   +-- bne.s 388e <drawLine+0x144>
    3880:	   |   move.l 1a894 <sceneWidth>,d0
    3886:	   |   move.l d0,d1
    3888:	   |   subq.l #2,d1
    388a:	   |   move.l d1,16(sp)
	}
	if (! diffY) {
    388e:	   \-> tst.l 2(sp)
    3892:	   /-- bne.s 38b6 <drawLine+0x16c>
		diffY = 1;
    3894:	   |   moveq #1,d0
    3896:	   |   move.l d0,2(sp)
		if (y == sceneHeight - 1) y = sceneHeight -2;
    389a:	   |   move.l 1a898 <sceneHeight>,d0
    38a0:	   |   subq.l #1,d0
    38a2:	   |   cmp.l 12(sp),d0
    38a6:	   +-- bne.s 38b6 <drawLine+0x16c>
    38a8:	   |   move.l 1a898 <sceneHeight>,d0
    38ae:	   |   move.l d0,d1
    38b0:	   |   subq.l #2,d1
    38b2:	   |   move.l d1,12(sp)
	}

    KPrintF("drawLine: Not implemented on Amiga"); //Amiga Todo: Implement 	
    38b6:	   \-> pea 17d4f <PutChar+0x61d>
    38bc:	       jsr 16c5e <KPrintF>
    38c2:	       addq.l #4,sp
	
}
    38c4:	       nop
    38c6:	       lea 20(sp),sp
    38ca:	       rts

000038cc <deleteTextures>:
extern int specialSettings;
struct textureList *firstTexture = NULL;
BOOL NPOT_textures = TRUE;

void deleteTextures(unsigned int n,  unsigned int * textures)
{
    38cc:	                      lea -24(sp),sp
    38d0:	                      move.l a6,-(sp)
	if (firstTexture == NULL) {
    38d2:	                      move.l 1a700 <firstTexture>,d0
    38d8:	/-------------------- beq.w 39b6 <deleteTextures+0xea>
		//debugOut("Deleting texture while list is already empty.\n");
	} else {
		for (unsigned int i = 0; i < n; i++) {
    38dc:	|                     clr.l 24(sp)
    38e0:	|     /-------------- bra.w 39aa <deleteTextures+0xde>
			BOOL found = FALSE;
    38e4:	|  /--|-------------> clr.w 18(sp)
			struct textureList *list = firstTexture;
    38e8:	|  |  |               move.l 1a700 <firstTexture>,20(sp)
			if (list->name == textures[i]) {
    38f0:	|  |  |               movea.l 20(sp),a0
    38f4:	|  |  |               move.l (a0),d1
    38f6:	|  |  |               move.l 24(sp),d0
    38fa:	|  |  |               add.l d0,d0
    38fc:	|  |  |               add.l d0,d0
    38fe:	|  |  |               movea.l 36(sp),a0
    3902:	|  |  |               adda.l d0,a0
    3904:	|  |  |               move.l (a0),d0
    3906:	|  |  |               cmp.l d1,d0
    3908:	|  |  |  /----------- bne.w 399c <deleteTextures+0xd0>
				found = TRUE;
    390c:	|  |  |  |            move.w #1,18(sp)
				firstTexture = list->next;
    3912:	|  |  |  |            movea.l 20(sp),a0
    3916:	|  |  |  |            move.l 12(a0),d0
    391a:	|  |  |  |            move.l d0,1a700 <firstTexture>
				FreeVec(list);
    3920:	|  |  |  |            move.l 20(sp),6(sp)
    3926:	|  |  |  |            move.l 1a7a4 <SysBase>,d0
    392c:	|  |  |  |            movea.l d0,a6
    392e:	|  |  |  |            movea.l 6(sp),a1
    3932:	|  |  |  |            jsr -690(a6)
				continue;
    3936:	|  |  |  |  /-------- bra.s 39a6 <deleteTextures+0xda>
			}

			while (list->next) {
				if (list->next->name == textures[i]) {
    3938:	|  |  |  |  |  /----> movea.l 20(sp),a0
    393c:	|  |  |  |  |  |      movea.l 12(a0),a0
    3940:	|  |  |  |  |  |      move.l (a0),d1
    3942:	|  |  |  |  |  |      move.l 24(sp),d0
    3946:	|  |  |  |  |  |      add.l d0,d0
    3948:	|  |  |  |  |  |      add.l d0,d0
    394a:	|  |  |  |  |  |      movea.l 36(sp),a0
    394e:	|  |  |  |  |  |      adda.l d0,a0
    3950:	|  |  |  |  |  |      move.l (a0),d0
    3952:	|  |  |  |  |  |      cmp.l d1,d0
    3954:	|  |  |  |  |  |  /-- bne.s 3992 <deleteTextures+0xc6>
					found = TRUE;
    3956:	|  |  |  |  |  |  |   move.w #1,18(sp)
					struct textureList *deleteMe = list->next;
    395c:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3960:	|  |  |  |  |  |  |   move.l 12(a0),14(sp)
					list->next = list->next->next;
    3966:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    396a:	|  |  |  |  |  |  |   movea.l 12(a0),a0
    396e:	|  |  |  |  |  |  |   move.l 12(a0),d0
    3972:	|  |  |  |  |  |  |   movea.l 20(sp),a0
    3976:	|  |  |  |  |  |  |   move.l d0,12(a0)
					FreeVec(deleteMe);
    397a:	|  |  |  |  |  |  |   move.l 14(sp),10(sp)
    3980:	|  |  |  |  |  |  |   move.l 1a7a4 <SysBase>,d0
    3986:	|  |  |  |  |  |  |   movea.l d0,a6
    3988:	|  |  |  |  |  |  |   movea.l 10(sp),a1
    398c:	|  |  |  |  |  |  |   jsr -690(a6)
					break;
    3990:	|  |  |  |  +--|--|-- bra.s 39a6 <deleteTextures+0xda>
				}
				list = list->next;
    3992:	|  |  |  |  |  |  \-> movea.l 20(sp),a0
    3996:	|  |  |  |  |  |      move.l 12(a0),20(sp)
			while (list->next) {
    399c:	|  |  |  \--|--|----> movea.l 20(sp),a0
    39a0:	|  |  |     |  |      move.l 12(a0),d0
    39a4:	|  |  |     |  \----- bne.s 3938 <deleteTextures+0x6c>
		for (unsigned int i = 0; i < n; i++) {
    39a6:	|  |  |     \-------> addq.l #1,24(sp)
    39aa:	|  |  \-------------> move.l 24(sp),d0
    39ae:	|  |                  cmp.l 32(sp),d0
    39b2:	|  \----------------- bcs.w 38e4 <deleteTextures+0x18>
			}
		}
	}
}
    39b6:	\-------------------> nop
    39b8:	                      movea.l (sp)+,a6
    39ba:	                      lea 24(sp),sp
    39be:	                      rts

000039c0 <setGraphicsWindow>:

void setGraphicsWindow(BOOL fullscreen) {
    39c0:	subq.l #4,sp
    39c2:	move.l 8(sp),d0
    39c6:	move.w d0,d0
    39c8:	move.w d0,2(sp)
	KPrintF("setGraphicsWindow: Not implemented on Amiga yet"); //TODO
    39cc:	pea 17d72 <PutChar+0x640>
    39d2:	jsr 16c5e <KPrintF>
    39d8:	addq.l #4,sp
}
    39da:	nop
    39dc:	addq.l #4,sp
    39de:	rts

000039e0 <resourceNameFromNum>:

extern int numResourceNames /* = 0*/;
extern char * * allResourceNames /*= NULL*/;

const char * resourceNameFromNum (int i) {
	if (i == -1) return NULL;
    39e0:	       moveq #-1,d0
    39e2:	       cmp.l 4(sp),d0
    39e6:	   /-- bne.s 39ec <resourceNameFromNum+0xc>
    39e8:	   |   moveq #0,d0
    39ea:	/--|-- bra.s 3a24 <resourceNameFromNum+0x44>
	if (numResourceNames == 0) return "RESOURCE";
    39ec:	|  \-> move.l 1a780 <numResourceNames>,d0
    39f2:	|  /-- bne.s 39fc <resourceNameFromNum+0x1c>
    39f4:	|  |   move.l #97698,d0
    39fa:	+--|-- bra.s 3a24 <resourceNameFromNum+0x44>
	if (i < numResourceNames) return allResourceNames[i];
    39fc:	|  \-> move.l 1a780 <numResourceNames>,d0
    3a02:	|      cmp.l 4(sp),d0
    3a06:	|  /-- ble.s 3a1e <resourceNameFromNum+0x3e>
    3a08:	|  |   move.l 1a738 <allResourceNames>,d1
    3a0e:	|  |   move.l 4(sp),d0
    3a12:	|  |   add.l d0,d0
    3a14:	|  |   add.l d0,d0
    3a16:	|  |   movea.l d1,a0
    3a18:	|  |   adda.l d0,a0
    3a1a:	|  |   move.l (a0),d0
    3a1c:	+--|-- bra.s 3a24 <resourceNameFromNum+0x44>
	return "Unknown resource";
    3a1e:	|  \-> move.l #97707,d0
    3a24:	\----> rts

00003a26 <main_sludge>:
char * gamePath = NULL;
char *bundleFolder;
int weAreDoneSoQuit;

int main_sludge(int argc, char *argv[])
{
    3a26:	          lea -44(sp),sp
    3a2a:	          movem.l d2-d3/a6,-(sp)
	/* Dimensions of our window. */
	//AMIGA TODO: Maybe remove as there will be no windowed mode
    winWidth = 320;
    3a2e:	          move.l #320,1a6f8 <winWidth>
    winHeight = 256;
    3a38:	          move.l #256,1a6fc <winHeight>

	char * sludgeFile;

	if(argc == 0) {
    3a42:	          tst.l 60(sp)
    3a46:	      /-- bne.s 3a5e <main_sludge+0x38>
		bundleFolder = copyString("game/");
    3a48:	      |   pea 17dbc <PutChar+0x68a>
    3a4e:	      |   jsr b8 <copyString>
    3a54:	      |   addq.l #4,sp
    3a56:	      |   move.l d0,1a710 <bundleFolder>
    3a5c:	   /--|-- bra.s 3a74 <main_sludge+0x4e>
	} else {
		bundleFolder = copyString(argv[0]);
    3a5e:	   |  \-> movea.l 64(sp),a0
    3a62:	   |      move.l (a0),d0
    3a64:	   |      move.l d0,-(sp)
    3a66:	   |      jsr b8 <copyString>
    3a6c:	   |      addq.l #4,sp
    3a6e:	   |      move.l d0,1a710 <bundleFolder>
	}
    
	int lastSlash = -1;
    3a74:	   \----> moveq #-1,d0
    3a76:	          move.l d0,48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    3a7a:	          clr.l 44(sp)
    3a7e:	   /----- bra.s 3aa0 <main_sludge+0x7a>
		if (bundleFolder[i] == PATHSLASH) lastSlash = i;
    3a80:	/--|----> move.l 1a710 <bundleFolder>,d1
    3a86:	|  |      move.l 44(sp),d0
    3a8a:	|  |      movea.l d1,a0
    3a8c:	|  |      adda.l d0,a0
    3a8e:	|  |      move.b (a0),d0
    3a90:	|  |      cmpi.b #47,d0
    3a94:	|  |  /-- bne.s 3a9c <main_sludge+0x76>
    3a96:	|  |  |   move.l 44(sp),48(sp)
	for (int i = 0; bundleFolder[i]; i ++) {
    3a9c:	|  |  \-> addq.l #1,44(sp)
    3aa0:	|  \----> move.l 1a710 <bundleFolder>,d1
    3aa6:	|         move.l 44(sp),d0
    3aaa:	|         movea.l d1,a0
    3aac:	|         adda.l d0,a0
    3aae:	|         move.b (a0),d0
    3ab0:	\-------- bne.s 3a80 <main_sludge+0x5a>
	}
	bundleFolder[lastSlash+1] = NULL;
    3ab2:	          move.l 1a710 <bundleFolder>,d0
    3ab8:	          move.l 48(sp),d1
    3abc:	          addq.l #1,d1
    3abe:	          movea.l d0,a0
    3ac0:	          adda.l d1,a0
    3ac2:	          clr.b (a0)

	if (argc > 1) {
    3ac4:	          moveq #1,d0
    3ac6:	          cmp.l 60(sp),d0
    3aca:	      /-- bge.s 3ae6 <main_sludge+0xc0>
		sludgeFile = argv[argc - 1];
    3acc:	      |   move.l 60(sp),d0
    3ad0:	      |   addi.l #1073741823,d0
    3ad6:	      |   add.l d0,d0
    3ad8:	      |   add.l d0,d0
    3ada:	      |   movea.l 64(sp),a0
    3ade:	      |   adda.l d0,a0
    3ae0:	      |   move.l (a0),52(sp)
    3ae4:	   /--|-- bra.s 3b40 <main_sludge+0x11a>
	} else {
		sludgeFile = joinStrings (bundleFolder, "gamedata.slg");
    3ae6:	   |  \-> move.l 1a710 <bundleFolder>,d0
    3aec:	   |      pea 17dc2 <PutChar+0x690>
    3af2:	   |      move.l d0,-(sp)
    3af4:	   |      jsr 1378c <joinStrings>
    3afa:	   |      addq.l #8,sp
    3afc:	   |      move.l d0,52(sp)
		if (! ( fileExists (sludgeFile) ) ) {
    3b00:	   |      move.l 52(sp),-(sp)
    3b04:	   |      jsr 13686 <fileExists>
    3b0a:	   |      addq.l #4,sp
    3b0c:	   |      tst.b d0
    3b0e:	   +----- bne.s 3b40 <main_sludge+0x11a>
			FreeVec(sludgeFile);
    3b10:	   |      move.l 52(sp),40(sp)
    3b16:	   |      move.l 1a7a4 <SysBase>,d0
    3b1c:	   |      movea.l d0,a6
    3b1e:	   |      movea.l 40(sp),a1
    3b22:	   |      jsr -690(a6)
			sludgeFile = joinStrings (bundleFolder, "gamedata");			
    3b26:	   |      move.l 1a710 <bundleFolder>,d0
    3b2c:	   |      pea 17dcf <PutChar+0x69d>
    3b32:	   |      move.l d0,-(sp)
    3b34:	   |      jsr 1378c <joinStrings>
    3b3a:	   |      addq.l #8,sp
    3b3c:	   |      move.l d0,52(sp)
	//AMIGA TODO: Show arguments
	/*if (! parseCmdlineParameters(argc, argv) && !(sludgeFile) ) {
		printCmdlineUsage();
		return 0;
	}*/
	KPrintF("Game file not found.\n");
    3b40:	   \----> pea 17dd8 <PutChar+0x6a6>
    3b46:	          jsr 16c5e <KPrintF>
    3b4c:	          addq.l #4,sp
	if (! fileExists(sludgeFile) ) {	
    3b4e:	          move.l 52(sp),-(sp)
    3b52:	          jsr 13686 <fileExists>
    3b58:	          addq.l #4,sp
    3b5a:	          tst.b d0
    3b5c:	      /-- bne.s 3bb4 <main_sludge+0x18e>
		Write(Output(), (APTR)"Game file not found.\n", 21);
    3b5e:	      |   move.l 1a7ac <DOSBase>,d0
    3b64:	      |   movea.l d0,a6
    3b66:	      |   jsr -60(a6)
    3b6a:	      |   move.l d0,28(sp)
    3b6e:	      |   move.l 28(sp),d0
    3b72:	      |   move.l d0,24(sp)
    3b76:	      |   move.l #97752,20(sp)
    3b7e:	      |   moveq #21,d0
    3b80:	      |   move.l d0,16(sp)
    3b84:	      |   move.l 1a7ac <DOSBase>,d0
    3b8a:	      |   movea.l d0,a6
    3b8c:	      |   move.l 24(sp),d1
    3b90:	      |   move.l 20(sp),d2
    3b94:	      |   move.l 16(sp),d3
    3b98:	      |   jsr -48(a6)
    3b9c:	      |   move.l d0,12(sp)
		KPrintF("Game file not found.\n");
    3ba0:	      |   pea 17dd8 <PutChar+0x6a6>
    3ba6:	      |   jsr 16c5e <KPrintF>
    3bac:	      |   addq.l #4,sp
		//AMIGA TODO: Show arguments
		//printCmdlineUsage();
		return 0;
    3bae:	      |   moveq #0,d0
    3bb0:	/-----|-- bra.w 3dac <main_sludge+0x386>
	}

	KPrintF("Setgamefilepath\n");
    3bb4:	|     \-> pea 17dee <PutChar+0x6bc>
    3bba:	|         jsr 16c5e <KPrintF>
    3bc0:	|         addq.l #4,sp
	setGameFilePath (sludgeFile);	
    3bc2:	|         move.l 52(sp),-(sp)
    3bc6:	|         jsr 3db6 <setGameFilePath>
    3bcc:	|         addq.l #4,sp
	if (! initSludge (sludgeFile)) return 0;
    3bce:	|         move.l 52(sp),-(sp)
    3bd2:	|         jsr 5364 <initSludge>
    3bd8:	|         addq.l #4,sp
    3bda:	|         tst.w d0
    3bdc:	|     /-- bne.s 3be4 <main_sludge+0x1be>
    3bde:	|     |   moveq #0,d0
    3be0:	+-----|-- bra.w 3dac <main_sludge+0x386>
	
	if( winWidth != 320 || winHeight != 256) {
    3be4:	|     \-> move.l 1a6f8 <winWidth>,d0
    3bea:	|         cmpi.l #320,d0
    3bf0:	|     /-- bne.s 3c00 <main_sludge+0x1da>
    3bf2:	|     |   move.l 1a6fc <winHeight>,d0
    3bf8:	|     |   cmpi.l #256,d0
    3bfe:	|  /--|-- beq.s 3c22 <main_sludge+0x1fc>
		KPrintF("This Screen Format is currently unsupported on Amiga. Only PAL Lowres supported atm. winWidth and winHeight will be reseted.");	
    3c00:	|  |  \-> pea 17dff <PutChar+0x6cd>
    3c06:	|  |      jsr 16c5e <KPrintF>
    3c0c:	|  |      addq.l #4,sp
		winWidth = 320;
    3c0e:	|  |      move.l #320,1a6f8 <winWidth>
		winHeight = 256;
    3c18:	|  |      move.l #256,1a6fc <winHeight>
	}

	KPrintF("Resizing Backdrop\n");
    3c22:	|  \----> pea 17e7c <PutChar+0x74a>
    3c28:	|         jsr 16c5e <KPrintF>
    3c2e:	|         addq.l #4,sp
	if (! resizeBackdrop (winWidth, winHeight)) {
    3c30:	|         move.l 1a6fc <winHeight>,d0
    3c36:	|         move.l d0,d1
    3c38:	|         move.l 1a6f8 <winWidth>,d0
    3c3e:	|         move.l d1,-(sp)
    3c40:	|         move.l d0,-(sp)
    3c42:	|         jsr cea8 <resizeBackdrop>
    3c48:	|         addq.l #8,sp
    3c4a:	|         tst.w d0
    3c4c:	|     /-- bne.s 3c62 <main_sludge+0x23c>
		KPrintF("Couldn't allocate memory for backdrop");
    3c4e:	|     |   pea 17e8f <PutChar+0x75d>
    3c54:	|     |   jsr 16c5e <KPrintF>
    3c5a:	|     |   addq.l #4,sp
		return FALSE;
    3c5c:	|     |   moveq #0,d0
    3c5e:	+-----|-- bra.w 3dac <main_sludge+0x386>
	}

	KPrintF("Init People\n");
    3c62:	|     \-> pea 17eb5 <PutChar+0x783>
    3c68:	|         jsr 16c5e <KPrintF>
    3c6e:	|         addq.l #4,sp
	if (! initPeople ())
    3c70:	|         jsr a430 <initPeople>
    3c76:	|         tst.w d0
    3c78:	|     /-- bne.s 3c8e <main_sludge+0x268>
	{
		KPrintF("Couldn't initialise people stuff");
    3c7a:	|     |   pea 17ec2 <PutChar+0x790>
    3c80:	|     |   jsr 16c5e <KPrintF>
    3c86:	|     |   addq.l #4,sp
		return FALSE;
    3c88:	|     |   moveq #0,d0
    3c8a:	+-----|-- bra.w 3dac <main_sludge+0x386>
	}

	KPrintF("Init Floor\n");
    3c8e:	|     \-> pea 17ee3 <PutChar+0x7b1>
    3c94:	|         jsr 16c5e <KPrintF>
    3c9a:	|         addq.l #4,sp
	if (! initFloor ())
    3c9c:	|         jsr 16014 <initFloor>
    3ca2:	|         tst.w d0
    3ca4:	|     /-- bne.s 3cba <main_sludge+0x294>
	{
		KPrintF("Couldn't initialise floor stuff");
    3ca6:	|     |   pea 17eef <PutChar+0x7bd>
    3cac:	|     |   jsr 16c5e <KPrintF>
    3cb2:	|     |   addq.l #4,sp
		
		return FALSE;
    3cb4:	|     |   moveq #0,d0
    3cb6:	+-----|-- bra.w 3dac <main_sludge+0x386>
	}

	KPrintF("Init Objecttype\n");
    3cba:	|     \-> pea 17f0f <PutChar+0x7dd>
    3cc0:	|         jsr 16c5e <KPrintF>
    3cc6:	|         addq.l #4,sp
	if (! initObjectTypes ())
    3cc8:	|         jsr d064 <initObjectTypes>
    3cce:	|         tst.w d0
    3cd0:	|     /-- bne.s 3ce6 <main_sludge+0x2c0>
	{
		KPrintF("Couldn't initialise object type stuff");
    3cd2:	|     |   pea 17f20 <PutChar+0x7ee>
    3cd8:	|     |   jsr 16c5e <KPrintF>
    3cde:	|     |   addq.l #4,sp
		return FALSE;
    3ce0:	|     |   moveq #0,d0
    3ce2:	+-----|-- bra.w 3dac <main_sludge+0x386>
	}

	KPrintF("Init speech\n");
    3ce6:	|     \-> pea 17f46 <PutChar+0x814>
    3cec:	|         jsr 16c5e <KPrintF>
    3cf2:	|         addq.l #4,sp
	initSpeech ();
    3cf4:	|         jsr 7778 <initSpeech>
	KPrintF("Init status bar\n");
    3cfa:	|         pea 17f53 <PutChar+0x821>
    3d00:	|         jsr 16c5e <KPrintF>
    3d06:	|         addq.l #4,sp
	initStatusBar ();
    3d08:	|         jsr 723c <initStatusBar>

	KPrintF("Get numbered string\n");
    3d0e:	|         pea 17f64 <PutChar+0x832>
    3d14:	|         jsr 16c5e <KPrintF>
    3d1a:	|         addq.l #4,sp
	gameName = getNumberedString(1);
    3d1c:	|         pea 1 <_start+0x1>
    3d20:	|         jsr 655a <getNumberedString>
    3d26:	|         addq.l #4,sp
    3d28:	|         move.l d0,1a708 <gameName>
	//initSoundStuff (hMainWindow); Todo Amiga: Maybe move soundstuff here
	KPrintF("Start new function num\n");
    3d2e:	|         pea 17f79 <PutChar+0x847>
    3d34:	|         jsr 16c5e <KPrintF>
    3d3a:	|         addq.l #4,sp
	startNewFunctionNum (0, 0, NULL, noStack, TRUE);
    3d3c:	|         move.l 1a774 <noStack>,d0
    3d42:	|         pea 1 <_start+0x1>
    3d46:	|         move.l d0,-(sp)
    3d48:	|         clr.l -(sp)
    3d4a:	|         clr.l -(sp)
    3d4c:	|         clr.l -(sp)
    3d4e:	|         jsr 63b0 <startNewFunctionNum>
    3d54:	|         lea 20(sp),sp

	KPrintF("Starting main loop");
    3d58:	|         pea 17f91 <PutChar+0x85f>
    3d5e:	|         jsr 16c5e <KPrintF>
    3d64:	|         addq.l #4,sp

	volatile struct Custom *custom = (struct Custom*)0xdff000;
    3d66:	|         move.l #14675968,36(sp)
	weAreDoneSoQuit = 0;
    3d6e:	|         clr.l 1a714 <weAreDoneSoQuit>
	while ( !weAreDoneSoQuit ) {	
    3d74:	|     /-- bra.s 3d8e <main_sludge+0x368>
		//custom->color[0] = 0xf00;			
		sludgeDisplay ();
    3d76:	|  /--|-> jsr 6340 <sludgeDisplay>
		CsiCheckInput();
    3d7c:	|  |  |   jsr c9dc <CsiCheckInput>
		handleInput();
    3d82:	|  |  |   jsr 50fe <handleInput>
		//custom->color[0] = 0x000;			
		WaitVbl();
    3d88:	|  |  |   jsr 16b92 <WaitVbl>
	while ( !weAreDoneSoQuit ) {	
    3d8e:	|  |  \-> move.l 1a714 <weAreDoneSoQuit>,d0
    3d94:	|  \----- beq.s 3d76 <main_sludge+0x350>
	}	
	//Amiga Cleanup
	FreeVec(sludgeFile);
    3d96:	|         move.l 52(sp),32(sp)
    3d9c:	|         move.l 1a7a4 <SysBase>,d0
    3da2:	|         movea.l d0,a6
    3da4:	|         movea.l 32(sp),a1
    3da8:	|         jsr -690(a6)
}
    3dac:	\-------> movem.l (sp)+,d2-d3/a6
    3db0:	          lea 44(sp),sp
    3db4:	          rts

00003db6 <setGameFilePath>:

void setGameFilePath (char * f) {
    3db6:	          lea -1104(sp),sp
    3dba:	          move.l a6,-(sp)
    3dbc:	          move.l d2,-(sp)
	char currentDir[1000];

	if (!GetCurrentDirName( currentDir, 998)) {
    3dbe:	          move.l #1112,d0
    3dc4:	          add.l sp,d0
    3dc6:	          addi.l #-1102,d0
    3dcc:	          move.l d0,1100(sp)
    3dd0:	          move.l #998,1096(sp)
    3dd8:	          move.l 1a7ac <DOSBase>,d0
    3dde:	          movea.l d0,a6
    3de0:	          move.l 1100(sp),d1
    3de4:	          move.l 1096(sp),d2
    3de8:	          jsr -564(a6)
    3dec:	          move.w d0,1094(sp)
    3df0:	          move.w 1094(sp),d0
    3df4:	      /-- bne.s 3e04 <setGameFilePath+0x4e>
		KPrintF("setGameFilePath:  current directory.\n");
    3df6:	      |   pea 17fa4 <PutChar+0x872>
    3dfc:	      |   jsr 16c5e <KPrintF>
    3e02:	      |   addq.l #4,sp
	}	

	int got = -1, a;	
    3e04:	      \-> moveq #-1,d0
    3e06:	          move.l d0,1108(sp)

	for (a = 0; f[a]; a ++) {
    3e0a:	          clr.l 1104(sp)
    3e0e:	   /----- bra.s 3e2c <setGameFilePath+0x76>
		if (f[a] == PATHSLASH) got = a;
    3e10:	/--|----> move.l 1104(sp),d0
    3e14:	|  |      movea.l 1116(sp),a0
    3e18:	|  |      adda.l d0,a0
    3e1a:	|  |      move.b (a0),d0
    3e1c:	|  |      cmpi.b #47,d0
    3e20:	|  |  /-- bne.s 3e28 <setGameFilePath+0x72>
    3e22:	|  |  |   move.l 1104(sp),1108(sp)
	for (a = 0; f[a]; a ++) {
    3e28:	|  |  \-> addq.l #1,1104(sp)
    3e2c:	|  \----> move.l 1104(sp),d0
    3e30:	|         movea.l 1116(sp),a0
    3e34:	|         adda.l d0,a0
    3e36:	|         move.b (a0),d0
    3e38:	\-------- bne.s 3e10 <setGameFilePath+0x5a>
	}

	if (got != -1) {
    3e3a:	          moveq #-1,d0
    3e3c:	          cmp.l 1108(sp),d0
    3e40:	   /----- beq.s 3eba <setGameFilePath+0x104>
		f[got] = 0;	
    3e42:	   |      move.l 1108(sp),d0
    3e46:	   |      movea.l 1116(sp),a0
    3e4a:	   |      adda.l d0,a0
    3e4c:	   |      clr.b (a0)
		BPTR lock = Lock(f, ACCESS_READ);	
    3e4e:	   |      move.l 1116(sp),1090(sp)
    3e54:	   |      moveq #-2,d0
    3e56:	   |      move.l d0,1086(sp)
    3e5a:	   |      move.l 1a7ac <DOSBase>,d0
    3e60:	   |      movea.l d0,a6
    3e62:	   |      move.l 1090(sp),d1
    3e66:	   |      move.l 1086(sp),d2
    3e6a:	   |      jsr -84(a6)
    3e6e:	   |      move.l d0,1082(sp)
    3e72:	   |      move.l 1082(sp),d0
    3e76:	   |      move.l d0,1078(sp)
		if (!CurrentDir(lock)) {
    3e7a:	   |      move.l 1078(sp),1074(sp)
    3e80:	   |      move.l 1a7ac <DOSBase>,d0
    3e86:	   |      movea.l d0,a6
    3e88:	   |      move.l 1074(sp),d1
    3e8c:	   |      jsr -126(a6)
    3e90:	   |      move.l d0,1070(sp)
    3e94:	   |      move.l 1070(sp),d0
    3e98:	   |  /-- bne.s 3eac <setGameFilePath+0xf6>
			KPrintF("setGameFilePath:: Failed changing to directory %s\n", f);
    3e9a:	   |  |   move.l 1116(sp),-(sp)
    3e9e:	   |  |   pea 17fca <PutChar+0x898>
    3ea4:	   |  |   jsr 16c5e <KPrintF>
    3eaa:	   |  |   addq.l #8,sp
		}
		f[got] = PATHSLASH;
    3eac:	   |  \-> move.l 1108(sp),d0
    3eb0:	   |      movea.l 1116(sp),a0
    3eb4:	   |      adda.l d0,a0
    3eb6:	   |      move.b #47,(a0)
	}

	gamePath = AllocVec(400, MEMF_ANY);
    3eba:	   \----> move.l #400,1066(sp)
    3ec2:	          clr.l 1062(sp)
    3ec6:	          move.l 1a7a4 <SysBase>,d0
    3ecc:	          movea.l d0,a6
    3ece:	          move.l 1066(sp),d0
    3ed2:	          move.l 1062(sp),d1
    3ed6:	          jsr -684(a6)
    3eda:	          move.l d0,1058(sp)
    3ede:	          move.l 1058(sp),d0
    3ee2:	          move.l d0,1a70c <gamePath>
	if (gamePath==0) {
    3ee8:	          move.l 1a70c <gamePath>,d0
    3eee:	      /-- bne.s 3f02 <setGameFilePath+0x14c>
		KPrintF("setGameFilePath: Can't reserve memory for game directory.\n");
    3ef0:	      |   pea 17ffd <PutChar+0x8cb>
    3ef6:	      |   jsr 16c5e <KPrintF>
    3efc:	      |   addq.l #4,sp
    3efe:	   /--|-- bra.w 3fea <setGameFilePath+0x234>
		return;
	}

	BPTR lock = Lock(gamePath, ACCESS_READ);	
    3f02:	   |  \-> move.l 1a70c <gamePath>,1054(sp)
    3f0a:	   |      moveq #-2,d0
    3f0c:	   |      move.l d0,1050(sp)
    3f10:	   |      move.l 1a7ac <DOSBase>,d0
    3f16:	   |      movea.l d0,a6
    3f18:	   |      move.l 1054(sp),d1
    3f1c:	   |      move.l 1050(sp),d2
    3f20:	   |      jsr -84(a6)
    3f24:	   |      move.l d0,1046(sp)
    3f28:	   |      move.l 1046(sp),d0
    3f2c:	   |      move.l d0,1042(sp)
	if (! CurrentDir(lock)) {
    3f30:	   |      move.l 1042(sp),1038(sp)
    3f36:	   |      move.l 1a7ac <DOSBase>,d0
    3f3c:	   |      movea.l d0,a6
    3f3e:	   |      move.l 1038(sp),d1
    3f42:	   |      jsr -126(a6)
    3f46:	   |      move.l d0,1034(sp)
    3f4a:	   |      move.l 1034(sp),d0
    3f4e:	   |  /-- bne.s 3f5e <setGameFilePath+0x1a8>
		KPrintF("setGameFilePath: Can't get game directory.\n");
    3f50:	   |  |   pea 18038 <PutChar+0x906>
    3f56:	   |  |   jsr 16c5e <KPrintF>
    3f5c:	   |  |   addq.l #4,sp
	}
	
	lock = Lock(currentDir, ACCESS_READ);	
    3f5e:	   |  \-> move.l #1112,d0
    3f64:	   |      add.l sp,d0
    3f66:	   |      addi.l #-1102,d0
    3f6c:	   |      move.l d0,1030(sp)
    3f70:	   |      moveq #-2,d0
    3f72:	   |      move.l d0,1026(sp)
    3f76:	   |      move.l 1a7ac <DOSBase>,d0
    3f7c:	   |      movea.l d0,a6
    3f7e:	   |      move.l 1030(sp),d1
    3f82:	   |      move.l 1026(sp),d2
    3f86:	   |      jsr -84(a6)
    3f8a:	   |      move.l d0,1022(sp)
    3f8e:	   |      move.l 1022(sp),d0
    3f92:	   |      move.l d0,1042(sp)
	if (!CurrentDir(lock)) {	
    3f96:	   |      move.l 1042(sp),1018(sp)
    3f9c:	   |      move.l 1a7ac <DOSBase>,d0
    3fa2:	   |      movea.l d0,a6
    3fa4:	   |      move.l 1018(sp),d1
    3fa8:	   |      jsr -126(a6)
    3fac:	   |      move.l d0,1014(sp)
    3fb0:	   |      move.l 1014(sp),d0
    3fb4:	   |  /-- bne.s 3fca <setGameFilePath+0x214>
		KPrintF("setGameFilePath: Failed changing to directory %s\n", currentDir);
    3fb6:	   |  |   moveq #10,d0
    3fb8:	   |  |   add.l sp,d0
    3fba:	   |  |   move.l d0,-(sp)
    3fbc:	   |  |   pea 18064 <PutChar+0x932>
    3fc2:	   |  |   jsr 16c5e <KPrintF>
    3fc8:	   |  |   addq.l #8,sp
	}

	//Free Mem
	if (gamePath != 0) FreeVec(gamePath);
    3fca:	   |  \-> move.l 1a70c <gamePath>,d0
    3fd0:	   +----- beq.s 3fea <setGameFilePath+0x234>
    3fd2:	   |      move.l 1a70c <gamePath>,1010(sp)
    3fda:	   |      move.l 1a7a4 <SysBase>,d0
    3fe0:	   |      movea.l d0,a6
    3fe2:	   |      movea.l 1010(sp),a1
    3fe6:	   |      jsr -690(a6)
}
    3fea:	   \----> move.l (sp)+,d2
    3fec:	          movea.l (sp)+,a6
    3fee:	          lea 1104(sp),sp
    3ff2:	          rts

00003ff4 <abortFunction>:
int numResourceNames = 0;
int numUserFunc = 0;
int specialSettings;


void abortFunction (struct loadedFunction * fun) {
    3ff4:	/-------> lea -16(sp),sp
    3ff8:	|         move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    3ffa:	|         move.l 24(sp),-(sp)
    3ffe:	|         jsr 6122 <pauseFunction>
    4004:	|         addq.l #4,sp
	while (fun -> stack) trimStack (&fun -> stack);
    4006:	|     /-- bra.s 4018 <abortFunction+0x24>
    4008:	|  /--|-> moveq #24,d0
    400a:	|  |  |   add.l 24(sp),d0
    400e:	|  |  |   move.l d0,-(sp)
    4010:	|  |  |   jsr 14be4 <trimStack>
    4016:	|  |  |   addq.l #4,sp
    4018:	|  |  \-> movea.l 24(sp),a0
    401c:	|  |      move.l 24(a0),d0
    4020:	|  \----- bne.s 4008 <abortFunction+0x14>
	FreeVec( fun -> compiledLines);
    4022:	|         movea.l 24(sp),a0
    4026:	|         move.l 4(a0),12(sp)
    402c:	|         move.l 1a7a4 <SysBase>,d0
    4032:	|         movea.l d0,a6
    4034:	|         movea.l 12(sp),a1
    4038:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    403c:	|         clr.l 16(sp)
    4040:	|     /-- bra.s 4060 <abortFunction+0x6c>
    4042:	|  /--|-> movea.l 24(sp),a0
    4046:	|  |  |   move.l 20(a0),d1
    404a:	|  |  |   move.l 16(sp),d0
    404e:	|  |  |   lsl.l #3,d0
    4050:	|  |  |   add.l d1,d0
    4052:	|  |  |   move.l d0,-(sp)
    4054:	|  |  |   jsr 144ae <unlinkVar>
    405a:	|  |  |   addq.l #4,sp
    405c:	|  |  |   addq.l #1,16(sp)
    4060:	|  |  \-> movea.l 24(sp),a0
    4064:	|  |      move.l 8(a0),d0
    4068:	|  |      cmp.l 16(sp),d0
    406c:	|  \----- bgt.s 4042 <abortFunction+0x4e>
	FreeVec(fun -> localVars);
    406e:	|         movea.l 24(sp),a0
    4072:	|         move.l 20(a0),8(sp)
    4078:	|         move.l 1a7a4 <SysBase>,d0
    407e:	|         movea.l d0,a6
    4080:	|         movea.l 8(sp),a1
    4084:	|         jsr -690(a6)
	unlinkVar (&fun -> reg);
    4088:	|         moveq #28,d0
    408a:	|         add.l 24(sp),d0
    408e:	|         move.l d0,-(sp)
    4090:	|         jsr 144ae <unlinkVar>
    4096:	|         addq.l #4,sp
	if (fun -> calledBy) abortFunction (fun -> calledBy);
    4098:	|         movea.l 24(sp),a0
    409c:	|         move.l 40(a0),d0
    40a0:	|     /-- beq.s 40b2 <abortFunction+0xbe>
    40a2:	|     |   movea.l 24(sp),a0
    40a6:	|     |   move.l 40(a0),d0
    40aa:	|     |   move.l d0,-(sp)
    40ac:	\-----|-- jsr 3ff4 <abortFunction>(pc)
    40b0:	      |   addq.l #4,sp
	FreeVec(fun);
    40b2:	      \-> move.l 24(sp),4(sp)
    40b8:	          move.l 1a7a4 <SysBase>,d0
    40be:	          movea.l d0,a6
    40c0:	          movea.l 4(sp),a1
    40c4:	          jsr -690(a6)
	fun = NULL;
    40c8:	          clr.l 24(sp)
}
    40cc:	          nop
    40ce:	          movea.l (sp)+,a6
    40d0:	          lea 16(sp),sp
    40d4:	          rts

000040d6 <cancelAFunction>:

int cancelAFunction (int funcNum, struct loadedFunction * myself, BOOL * killedMyself) {
    40d6:	          subq.l #8,sp
	int n = 0;
    40d8:	          clr.l 4(sp)
	*killedMyself = FALSE;
    40dc:	          movea.l 20(sp),a0
    40e0:	          clr.w (a0)

	struct loadedFunction * fun = allRunningFunctions;
    40e2:	          move.l 1a73c <allRunningFunctions>,(sp)
	while (fun) {
    40e8:	   /----- bra.s 4116 <cancelAFunction+0x40>
		if (fun -> originalNumber == funcNum) {
    40ea:	/--|----> movea.l (sp),a0
    40ec:	|  |      move.l (a0),d0
    40ee:	|  |      cmp.l 12(sp),d0
    40f2:	|  |  /-- bne.s 4110 <cancelAFunction+0x3a>
			fun -> cancelMe = TRUE;
    40f4:	|  |  |   movea.l (sp),a0
    40f6:	|  |  |   move.w #1,54(a0)
			n++;
    40fc:	|  |  |   addq.l #1,4(sp)
			if (fun == myself) *killedMyself = TRUE;
    4100:	|  |  |   move.l (sp),d0
    4102:	|  |  |   cmp.l 16(sp),d0
    4106:	|  |  +-- bne.s 4110 <cancelAFunction+0x3a>
    4108:	|  |  |   movea.l 20(sp),a0
    410c:	|  |  |   move.w #1,(a0)
		}
		fun = fun -> next;
    4110:	|  |  \-> movea.l (sp),a0
    4112:	|  |      move.l 44(a0),(sp)
	while (fun) {
    4116:	|  \----> tst.l (sp)
    4118:	\-------- bne.s 40ea <cancelAFunction+0x14>
	}
	return n;
    411a:	          move.l 4(sp),d0
}
    411e:	          addq.l #8,sp
    4120:	          rts

00004122 <completeTimers>:


void completeTimers () {
    4122:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    4124:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    412a:	   /----- bra.s 4140 <completeTimers+0x1e>
		if (thisFunction->freezerLevel == 0) thisFunction->timeLeft = 0;
    412c:	/--|----> movea.l (sp),a0
    412e:	|  |      move.b 56(a0),d0
    4132:	|  |  /-- bne.s 413a <completeTimers+0x18>
    4134:	|  |  |   movea.l (sp),a0
    4136:	|  |  |   clr.l 12(a0)
		thisFunction = thisFunction->next;
    413a:	|  |  \-> movea.l (sp),a0
    413c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    4140:	|  \----> tst.l (sp)
    4142:	\-------- bne.s 412c <completeTimers+0xa>
	}
}
    4144:	          nop
    4146:	          nop
    4148:	          addq.l #4,sp
    414a:	          rts

0000414c <continueFunction>:

BOOL continueFunction (struct loadedFunction * fun) {
    414c:	                                                             lea -76(sp),sp
	BOOL keepLooping = TRUE;
    4150:	                                                             move.w #1,74(sp)
	BOOL advanceNow;
	unsigned int param;
	enum sludgeCommand com;

	if (fun -> cancelMe) {
    4156:	                                                             movea.l 80(sp),a0
    415a:	                                                             move.w 54(a0),d0
    415e:	/----------------------------------------------------------- beq.w 4fec <continueFunction+0xea0>
		abortFunction (fun);
    4162:	|                                                            move.l 80(sp),-(sp)
    4166:	|                                                            jsr 3ff4 <abortFunction>
    416c:	|                                                            addq.l #4,sp
		return TRUE;
    416e:	|                                                            moveq #1,d0
    4170:	|  /-------------------------------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
	}

	while (keepLooping) {
		advanceNow = TRUE;
    4174:	|  |  /----------------------------------------------------> move.w #1,72(sp)
		param = fun -> compiledLines[fun -> runThisLine].param;
    417a:	|  |  |                                                      movea.l 80(sp),a0
    417e:	|  |  |                                                      move.l 4(a0),d1
    4182:	|  |  |                                                      movea.l 80(sp),a0
    4186:	|  |  |                                                      move.l 36(a0),d0
    418a:	|  |  |                                                      lsl.l #3,d0
    418c:	|  |  |                                                      movea.l d1,a0
    418e:	|  |  |                                                      adda.l d0,a0
    4190:	|  |  |                                                      move.l 4(a0),68(sp)
		com = fun -> compiledLines[fun -> runThisLine].theCommand;
    4196:	|  |  |                                                      movea.l 80(sp),a0
    419a:	|  |  |                                                      move.l 4(a0),d1
    419e:	|  |  |                                                      movea.l 80(sp),a0
    41a2:	|  |  |                                                      move.l 36(a0),d0
    41a6:	|  |  |                                                      lsl.l #3,d0
    41a8:	|  |  |                                                      movea.l d1,a0
    41aa:	|  |  |                                                      adda.l d0,a0
    41ac:	|  |  |                                                      move.l (a0),64(sp)

//		fprintf (stderr, "com: %d param: %d (%s)\n", com, param,
//				(com < numSludgeCommands) ? sludgeText[com] : ERROR_UNKNOWN_MCODE); fflush(stderr);


		switch (com) {
    41b0:	|  |  |                                                      moveq #41,d0
    41b2:	|  |  |                                                      cmp.l 64(sp),d0
    41b6:	|  |  |  /-------------------------------------------------- bcs.w 4fa0 <continueFunction+0xe54>
    41ba:	|  |  |  |                                                   move.l 64(sp),d0
    41be:	|  |  |  |                                                   add.l d0,d0
    41c0:	|  |  |  |                                                   movea.l d0,a0
    41c2:	|  |  |  |                                                   adda.l #16846,a0
    41c8:	|  |  |  |                                                   move.w (a0),d0
    41ca:	|  |  |  |                                                   jmp (41ce <continueFunction+0x82>,pc,d0.w)
    41ce:	|  |  |  |                                                   bset d6,(a2)
    41d0:	|  |  |  |                                                   ori.w #2670,(a4)
    41d4:	|  |  |  |                                                   eori.w #2416,d6
    41d8:	|  |  |  |                                                   bchg d4,d2
    41da:	|  |  |  |                                                   bclr d4,(a4)+
    41dc:	|  |  |  |                                                   andi.l #181013194,d4
    41e2:	|  |  |  |                                                   .short 0x0aca
    41e4:	|  |  |  |                                                   .short 0x0aca
    41e6:	|  |  |  |                                                   andi.l #51251914,(-54,a2,d0.l:2)
    41ee:	|  |  |  |                                                   .short 0x0aca
    41f0:	|  |  |  |                                                   andi.w #906,-(a4)
    41f4:	|  |  |  |                                                   bchg d1,196(a2)
    41f8:	|  |  |  |                                                   bset d1,580(a4)
    41fc:	|  |  |  |                                                   bclr d1,2576(a2)
    4200:	|  |  |  |                                                   andi.b #-56,2762(a2)
    4206:	|  |  |  |                                                   .short 0x0aca
    4208:	|  |  |  |                                                   eori.l #63572682,d0
    420e:	|  |  |  |                                                   .short 0x0aca
    4210:	|  |  |  |                                                   bchg d3,-(a2)
    4212:	|  |  |  |                                                   bchg #-36,(a2)
    4216:	|  |  |  |                                                   .short 0x08cc
    4218:	|  |  |  |                                                   addi.b #14,1038(a0)
    421e:	|  |  |  |                                                   .short 0x040e
    4220:	|  |  |  |                                                   bset d4,8303(a4)
			case SLU_RETURN:
			if (fun -> calledBy) {
    4224:	|  |  |  |                                                   ori.w #8232,(a0)
    4228:	|  |  |  |                                                   ori.b #78,8303(a0)
				struct loadedFunction * returnTo = fun -> calledBy;
    422e:	|  |  |  |                                                   ori.w #12136,(a0)
    4232:	|  |  |  |                                                   ori.b #44,8303(a0)
				if (fun -> returnSomething) copyVariable (&fun -> reg, &returnTo -> reg);
    4238:	|  |  |  |                                                   ori.w #12328,(a0)
    423c:	|  |  |  |                                                   ori.b #24,(28,a0,d7.w:2)
    4242:	|  |  |  |                                                   add.l 44(sp),d1
    4246:	|  |  |  |                                                   moveq #28,d0
    4248:	|  |  |  |                                                   add.l 80(sp),d0
    424c:	|  |  |  |                                                   move.l d1,-(sp)
    424e:	|  |  |  |                                                   move.l d0,-(sp)
    4250:	|  |  |  |                                                   jsr 1471a <copyVariable>
    4256:	|  |  |  |                                                   addq.l #8,sp
				finishFunction (fun);
    4258:	|  |  |  |                                                   move.l 80(sp),-(sp)
    425c:	|  |  |  |                                                   jsr 4ffc <finishFunction>
    4262:	|  |  |  |                                                   addq.l #4,sp
				fun = returnTo;
    4264:	|  |  |  |                                                   move.l 44(sp),80(sp)
				restartFunction (fun);
    426a:	|  |  |  |                                                   move.l 80(sp),-(sp)
    426e:	|  |  |  |                                                   jsr 6164 <restartFunction>
    4274:	|  |  |  |                                                   addq.l #4,sp
			} else {
				finishFunction (fun);
				advanceNow = FALSE;		// So we don't do anything else with "fun"
				keepLooping = FALSE;	// So we drop out of the loop
			}
			break;
    4276:	|  |  |  |  /----------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>
				finishFunction (fun);
    427a:	|  |  |  |  |                                                move.l 80(sp),-(sp)
    427e:	|  |  |  |  |                                                jsr 4ffc <finishFunction>
    4284:	|  |  |  |  |                                                addq.l #4,sp
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    4286:	|  |  |  |  |                                                clr.w 72(sp)
				keepLooping = FALSE;	// So we drop out of the loop
    428a:	|  |  |  |  |                                                clr.w 74(sp)
			break;
    428e:	|  |  |  |  +----------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_CALLIT:
			switch (fun -> reg.varType) {
    4292:	|  |  |  |  |                                                movea.l 80(sp),a0
    4296:	|  |  |  |  |                                                move.l 28(a0),d0
    429a:	|  |  |  |  |                                                moveq #2,d1
    429c:	|  |  |  |  |                                                cmp.l d0,d1
    429e:	|  |  |  |  |                                            /-- beq.s 42aa <continueFunction+0x15e>
    42a0:	|  |  |  |  |                                            |   moveq #4,d1
    42a2:	|  |  |  |  |                                            |   cmp.l d0,d1
    42a4:	|  |  |  |  |                                         /--|-- beq.s 42f8 <continueFunction+0x1ac>
    42a6:	|  |  |  |  |                                /--------|--|-- bra.w 43e0 <continueFunction+0x294>
				case SVT_FUNC:
				pauseFunction (fun);		
    42aa:	|  |  |  |  |                                |        |  \-> move.l 80(sp),-(sp)
    42ae:	|  |  |  |  |                                |        |      jsr 6122 <pauseFunction>
    42b4:	|  |  |  |  |                                |        |      addq.l #4,sp
				if (! startNewFunctionNum (fun -> reg.varData.intValue, param, fun, &fun -> stack,TRUE)) return FALSE;
    42b6:	|  |  |  |  |                                |        |      moveq #24,d0
    42b8:	|  |  |  |  |                                |        |      add.l 80(sp),d0
    42bc:	|  |  |  |  |                                |        |      movea.l 80(sp),a0
    42c0:	|  |  |  |  |                                |        |      move.l 32(a0),d1
    42c4:	|  |  |  |  |                                |        |      pea 1 <_start+0x1>
    42c8:	|  |  |  |  |                                |        |      move.l d0,-(sp)
    42ca:	|  |  |  |  |                                |        |      move.l 88(sp),-(sp)
    42ce:	|  |  |  |  |                                |        |      move.l 80(sp),-(sp)
    42d2:	|  |  |  |  |                                |        |      move.l d1,-(sp)
    42d4:	|  |  |  |  |                                |        |      jsr 63b0 <startNewFunctionNum>
    42da:	|  |  |  |  |                                |        |      lea 20(sp),sp
    42de:	|  |  |  |  |                                |        |      tst.l d0
    42e0:	|  |  |  |  |                                |        |  /-- bne.s 42e8 <continueFunction+0x19c>
    42e2:	|  |  |  |  |                                |        |  |   clr.w d0
    42e4:	|  +--|--|--|--------------------------------|--------|--|-- bra.w 4ff6 <continueFunction+0xeaa>
				fun = allRunningFunctions;
    42e8:	|  |  |  |  |                                |        |  \-> move.l 1a73c <allRunningFunctions>,80(sp)
				advanceNow = FALSE;		// So we don't do anything else with "fun"
    42f0:	|  |  |  |  |                                |        |      clr.w 72(sp)
				break;
    42f4:	|  |  |  |  |                                |  /-----|----- bra.w 43f4 <continueFunction+0x2a8>

				case SVT_BUILT:
					{
					//KPrintF("Loading function %ld",fun -> reg.varData.intValue);
					enum builtReturn br = callBuiltIn (fun -> reg.varData.intValue, param, fun);
    42f8:	|  |  |  |  |                                |  |     \----> move.l 68(sp),d1
    42fc:	|  |  |  |  |                                |  |            movea.l 80(sp),a0
    4300:	|  |  |  |  |                                |  |            move.l 32(a0),d0
    4304:	|  |  |  |  |                                |  |            move.l 80(sp),-(sp)
    4308:	|  |  |  |  |                                |  |            move.l d1,-(sp)
    430a:	|  |  |  |  |                                |  |            move.l d0,-(sp)
    430c:	|  |  |  |  |                                |  |            jsr 12f42 <callBuiltIn>
    4312:	|  |  |  |  |                                |  |            lea 12(sp),sp
    4316:	|  |  |  |  |                                |  |            move.l d0,52(sp)
    431a:	|  |  |  |  |                                |  |            moveq #5,d0
    431c:	|  |  |  |  |                                |  |            cmp.l 52(sp),d0
    4320:	|  |  |  |  |                                |  |  /-------- bcs.w 43dc <continueFunction+0x290>
    4324:	|  |  |  |  |                                |  |  |         move.l 52(sp),d0
    4328:	|  |  |  |  |                                |  |  |         add.l d0,d0
    432a:	|  |  |  |  |                                |  |  |         movea.l d0,a0
    432c:	|  |  |  |  |                                |  |  |         adda.l #17208,a0
    4332:	|  |  |  |  |                                |  |  |         move.w (a0),d0
    4334:	|  |  |  |  |                                |  |  |         jmp (4338 <continueFunction+0x1ec>,pc,d0.w)
    4338:	|  |  |  |  |                                |  |  |         ori.b #12,164(a4)
    433e:	|  |  |  |  |                                |  |  |         ori.b #60,-(a0)
    4342:	|  |  |  |  |                                |  |  |         ori.b #121,(1,a2,d0.w)

					switch (br) {
						case BR_ERROR:
							KPrintF("Unknown error. This shouldn't happen. Please notify the SLUDGE developers.");
    4348:	|  |  |  |  |                                |  |  |         or.w d0,20153(a4)
    434c:	|  |  |  |  |                                |  |  |         ori.b #94,d1
    4350:	|  |  |  |  |                                |  |  |         addq.l #4,sp
							return FALSE;
    4352:	|  |  |  |  |                                |  |  |         clr.w d0
    4354:	|  +--|--|--|--------------------------------|--|--|-------- bra.w 4ff6 <continueFunction+0xeaa>

						case BR_PAUSE:
						pauseFunction (fun);
    4358:	|  |  |  |  |                                |  |  |         move.l 80(sp),-(sp)
    435c:	|  |  |  |  |                                |  |  |         jsr 6122 <pauseFunction>
    4362:	|  |  |  |  |                                |  |  |         addq.l #4,sp
						[[fallthrough]];
						// No break!

						case BR_KEEP_AND_PAUSE:
						keepLooping = FALSE;
    4364:	|  |  |  |  |                                |  |  |         clr.w 74(sp)
						break;
    4368:	|  |  |  |  |                                |  |  |  /----- bra.s 43de <continueFunction+0x292>

						case BR_ALREADY_GONE:
						keepLooping = FALSE;
    436a:	|  |  |  |  |                                |  |  |  |      clr.w 74(sp)
						advanceNow = FALSE;
    436e:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						break;
    4372:	|  |  |  |  |                                |  |  |  +----- bra.s 43de <continueFunction+0x292>

						case BR_CALLAFUNC:
						{
							int i = fun -> reg.varData.intValue;
    4374:	|  |  |  |  |                                |  |  |  |      movea.l 80(sp),a0
    4378:	|  |  |  |  |                                |  |  |  |      move.l 32(a0),48(sp)
							setVariable (&fun -> reg, SVT_INT, 1);
    437e:	|  |  |  |  |                                |  |  |  |      moveq #28,d0
    4380:	|  |  |  |  |                                |  |  |  |      add.l 80(sp),d0
    4384:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    4388:	|  |  |  |  |                                |  |  |  |      pea 1 <_start+0x1>
    438c:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    438e:	|  |  |  |  |                                |  |  |  |      jsr 14b52 <setVariable>
    4394:	|  |  |  |  |                                |  |  |  |      lea 12(sp),sp
							pauseFunction (fun);							
    4398:	|  |  |  |  |                                |  |  |  |      move.l 80(sp),-(sp)
    439c:	|  |  |  |  |                                |  |  |  |      jsr 6122 <pauseFunction>
    43a2:	|  |  |  |  |                                |  |  |  |      addq.l #4,sp
							if (! startNewFunctionNum (i, 0, fun, noStack, FALSE)) return FALSE;
    43a4:	|  |  |  |  |                                |  |  |  |      move.l 1a774 <noStack>,d1
    43aa:	|  |  |  |  |                                |  |  |  |      move.l 48(sp),d0
    43ae:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    43b0:	|  |  |  |  |                                |  |  |  |      move.l d1,-(sp)
    43b2:	|  |  |  |  |                                |  |  |  |      move.l 88(sp),-(sp)
    43b6:	|  |  |  |  |                                |  |  |  |      clr.l -(sp)
    43b8:	|  |  |  |  |                                |  |  |  |      move.l d0,-(sp)
    43ba:	|  |  |  |  |                                |  |  |  |      jsr 63b0 <startNewFunctionNum>
    43c0:	|  |  |  |  |                                |  |  |  |      lea 20(sp),sp
    43c4:	|  |  |  |  |                                |  |  |  |      tst.l d0
    43c6:	|  |  |  |  |                                |  |  |  |  /-- bne.s 43ce <continueFunction+0x282>
    43c8:	|  |  |  |  |                                |  |  |  |  |   clr.w d0
    43ca:	|  +--|--|--|--------------------------------|--|--|--|--|-- bra.w 4ff6 <continueFunction+0xeaa>
							fun = allRunningFunctions;
    43ce:	|  |  |  |  |                                |  |  |  |  \-> move.l 1a73c <allRunningFunctions>,80(sp)
							advanceNow = FALSE;		// So we don't do anything else with "fun"
    43d6:	|  |  |  |  |                                |  |  |  |      clr.w 72(sp)
						}
						break;
    43da:	|  |  |  |  |                                |  |  |  +----- bra.s 43de <continueFunction+0x292>

						default:
						break;
    43dc:	|  |  |  |  |                                |  |  \--|----> nop
					}
				}
				break;
    43de:	|  |  |  |  |                                |  +-----\----X bra.s 43f4 <continueFunction+0x2a8>

				default:
				KPrintF(ERROR_CALL_NONFUNCTION);
    43e0:	|  |  |  |  |                                \--|----------> pea 181b7 <PutChar+0xa85>
    43e6:	|  |  |  |  |                                   |            jsr 16c5e <KPrintF>
    43ec:	|  |  |  |  |                                   |            addq.l #4,sp
				return FALSE;
    43ee:	|  |  |  |  |                                   |            clr.w d0
    43f0:	|  +--|--|--|-----------------------------------|----------- bra.w 4ff6 <continueFunction+0xeaa>
			}
			break;
    43f4:	|  |  |  |  +-----------------------------------\----------X bra.w 4fd4 <continueFunction+0xe88>

			// These all grab things and shove 'em into the register

			case SLU_LOAD_NULL:
			setVariable (&fun -> reg, SVT_NULL, 0);
    43f8:	|  |  |  |  |                                                moveq #28,d0
    43fa:	|  |  |  |  |                                                add.l 80(sp),d0
    43fe:	|  |  |  |  |                                                clr.l -(sp)
    4400:	|  |  |  |  |                                                clr.l -(sp)
    4402:	|  |  |  |  |                                                move.l d0,-(sp)
    4404:	|  |  |  |  |                                                jsr 14b52 <setVariable>
    440a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    440e:	|  |  |  |  +----------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_LOAD_FILE:
			setVariable (&fun -> reg, SVT_FILE, param);
    4412:	|  |  |  |  |                                                move.l 68(sp),d1
    4416:	|  |  |  |  |                                                moveq #28,d0
    4418:	|  |  |  |  |                                                add.l 80(sp),d0
    441c:	|  |  |  |  |                                                move.l d1,-(sp)
    441e:	|  |  |  |  |                                                pea 5 <_start+0x5>
    4422:	|  |  |  |  |                                                move.l d0,-(sp)
    4424:	|  |  |  |  |                                                jsr 14b52 <setVariable>
    442a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    442e:	|  |  |  |  +----------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_LOAD_VALUE:
			setVariable (&fun -> reg, SVT_INT, param);
    4432:	|  |  |  |  |                                                move.l 68(sp),d1
    4436:	|  |  |  |  |                                                moveq #28,d0
    4438:	|  |  |  |  |                                                add.l 80(sp),d0
    443c:	|  |  |  |  |                                                move.l d1,-(sp)
    443e:	|  |  |  |  |                                                pea 1 <_start+0x1>
    4442:	|  |  |  |  |                                                move.l d0,-(sp)
    4444:	|  |  |  |  |                                                jsr 14b52 <setVariable>
    444a:	|  |  |  |  |                                                lea 12(sp),sp
			break;
    444e:	|  |  |  |  +----------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_LOAD_LOCAL:
			if (! copyVariable (&(fun -> localVars[param]), &fun -> reg)) return FALSE;
    4452:	|  |  |  |  |                                                moveq #28,d0
    4454:	|  |  |  |  |                                                add.l 80(sp),d0
    4458:	|  |  |  |  |                                                movea.l 80(sp),a0
    445c:	|  |  |  |  |                                                movea.l 20(a0),a0
    4460:	|  |  |  |  |                                                move.l 68(sp),d1
    4464:	|  |  |  |  |                                                lsl.l #3,d1
    4466:	|  |  |  |  |                                                add.l a0,d1
    4468:	|  |  |  |  |                                                move.l d0,-(sp)
    446a:	|  |  |  |  |                                                move.l d1,-(sp)
    446c:	|  |  |  |  |                                                jsr 1471a <copyVariable>
    4472:	|  |  |  |  |                                                addq.l #8,sp
    4474:	|  |  |  |  |                                                tst.w d0
    4476:	|  |  |  |  |  /-------------------------------------------- bne.w 4fb2 <continueFunction+0xe66>
    447a:	|  |  |  |  |  |                                             clr.w d0
    447c:	|  +--|--|--|--|-------------------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_AND:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) && getBoolean(&(fun -> stack -> thisVar)));
    4480:	|  |  |  |  |  |                                             moveq #28,d0
    4482:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4486:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4488:	|  |  |  |  |  |                                             jsr 147a0 <getBoolean>
    448e:	|  |  |  |  |  |                                             addq.l #4,sp
    4490:	|  |  |  |  |  |                                             tst.w d0
    4492:	|  |  |  |  |  |                                      /----- beq.s 44ae <continueFunction+0x362>
    4494:	|  |  |  |  |  |                                      |      movea.l 80(sp),a0
    4498:	|  |  |  |  |  |                                      |      move.l 24(a0),d0
    449c:	|  |  |  |  |  |                                      |      move.l d0,-(sp)
    449e:	|  |  |  |  |  |                                      |      jsr 147a0 <getBoolean>
    44a4:	|  |  |  |  |  |                                      |      addq.l #4,sp
    44a6:	|  |  |  |  |  |                                      |      tst.w d0
    44a8:	|  |  |  |  |  |                                      +----- beq.s 44ae <continueFunction+0x362>
    44aa:	|  |  |  |  |  |                                      |      moveq #1,d0
    44ac:	|  |  |  |  |  |                                      |  /-- bra.s 44b0 <continueFunction+0x364>
    44ae:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    44b0:	|  |  |  |  |  |                                         \-> moveq #28,d1
    44b2:	|  |  |  |  |  |                                             add.l 80(sp),d1
    44b6:	|  |  |  |  |  |                                             move.l d0,-(sp)
    44b8:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    44bc:	|  |  |  |  |  |                                             move.l d1,-(sp)
    44be:	|  |  |  |  |  |                                             jsr 14b52 <setVariable>
    44c4:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    44c8:	|  |  |  |  |  |                                             moveq #24,d0
    44ca:	|  |  |  |  |  |                                             add.l 80(sp),d0
    44ce:	|  |  |  |  |  |                                             move.l d0,-(sp)
    44d0:	|  |  |  |  |  |                                             jsr 14be4 <trimStack>
    44d6:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    44d8:	|  |  |  |  +--|-------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_OR:
			setVariable (&fun -> reg, SVT_INT, getBoolean (&fun -> reg) || getBoolean (&(fun -> stack -> thisVar)));
    44dc:	|  |  |  |  |  |                                             moveq #28,d0
    44de:	|  |  |  |  |  |                                             add.l 80(sp),d0
    44e2:	|  |  |  |  |  |                                             move.l d0,-(sp)
    44e4:	|  |  |  |  |  |                                             jsr 147a0 <getBoolean>
    44ea:	|  |  |  |  |  |                                             addq.l #4,sp
    44ec:	|  |  |  |  |  |                                             tst.w d0
    44ee:	|  |  |  |  |  |                                         /-- bne.s 4506 <continueFunction+0x3ba>
    44f0:	|  |  |  |  |  |                                         |   movea.l 80(sp),a0
    44f4:	|  |  |  |  |  |                                         |   move.l 24(a0),d0
    44f8:	|  |  |  |  |  |                                         |   move.l d0,-(sp)
    44fa:	|  |  |  |  |  |                                         |   jsr 147a0 <getBoolean>
    4500:	|  |  |  |  |  |                                         |   addq.l #4,sp
    4502:	|  |  |  |  |  |                                         |   tst.w d0
    4504:	|  |  |  |  |  |                                      /--|-- beq.s 450a <continueFunction+0x3be>
    4506:	|  |  |  |  |  |                                      |  \-> moveq #1,d0
    4508:	|  |  |  |  |  |                                      |  /-- bra.s 450c <continueFunction+0x3c0>
    450a:	|  |  |  |  |  |                                      \--|-> moveq #0,d0
    450c:	|  |  |  |  |  |                                         \-> moveq #28,d1
    450e:	|  |  |  |  |  |                                             add.l 80(sp),d1
    4512:	|  |  |  |  |  |                                             move.l d0,-(sp)
    4514:	|  |  |  |  |  |                                             pea 1 <_start+0x1>
    4518:	|  |  |  |  |  |                                             move.l d1,-(sp)
    451a:	|  |  |  |  |  |                                             jsr 14b52 <setVariable>
    4520:	|  |  |  |  |  |                                             lea 12(sp),sp
			trimStack (&fun -> stack);
    4524:	|  |  |  |  |  |                                             moveq #24,d0
    4526:	|  |  |  |  |  |                                             add.l 80(sp),d0
    452a:	|  |  |  |  |  |                                             move.l d0,-(sp)
    452c:	|  |  |  |  |  |                                             jsr 14be4 <trimStack>
    4532:	|  |  |  |  |  |                                             addq.l #4,sp
			break;
    4534:	|  |  |  |  +--|-------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_LOAD_FUNC:
    		setVariable (&fun -> reg, SVT_FUNC, param);
    4538:	|  |  |  |  |  |                                             move.l 68(sp),d1
    453c:	|  |  |  |  |  |                                             moveq #28,d0
    453e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4542:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4544:	|  |  |  |  |  |                                             pea 2 <_start+0x2>
    4548:	|  |  |  |  |  |                                             move.l d0,-(sp)
    454a:	|  |  |  |  |  |                                             jsr 14b52 <setVariable>
    4550:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4554:	|  |  |  |  +--|-------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_LOAD_BUILT:
			setVariable (&fun -> reg, SVT_BUILT, param);
    4558:	|  |  |  |  |  |                                             move.l 68(sp),d1
    455c:	|  |  |  |  |  |                                             moveq #28,d0
    455e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4562:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4564:	|  |  |  |  |  |                                             pea 4 <_start+0x4>
    4568:	|  |  |  |  |  |                                             move.l d0,-(sp)
    456a:	|  |  |  |  |  |                                             jsr 14b52 <setVariable>
    4570:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4574:	|  |  |  |  +--|-------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_LOAD_OBJTYPE:
			setVariable (&fun -> reg, SVT_OBJTYPE, param);
    4578:	|  |  |  |  |  |                                             move.l 68(sp),d1
    457c:	|  |  |  |  |  |                                             moveq #28,d0
    457e:	|  |  |  |  |  |                                             add.l 80(sp),d0
    4582:	|  |  |  |  |  |                                             move.l d1,-(sp)
    4584:	|  |  |  |  |  |                                             pea 7 <_start+0x7>
    4588:	|  |  |  |  |  |                                             move.l d0,-(sp)
    458a:	|  |  |  |  |  |                                             jsr 14b52 <setVariable>
    4590:	|  |  |  |  |  |                                             lea 12(sp),sp
			break;
    4594:	|  |  |  |  +--|-------------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_UNREG:
			if (dialogValue != 1) {
    4598:	|  |  |  |  |  |                                             move.l 1a704 <dialogValue>,d0
    459e:	|  |  |  |  |  |                                             moveq #1,d1
    45a0:	|  |  |  |  |  |                                             cmp.l d0,d1
    45a2:	|  |  |  |  |  |  /----------------------------------------- beq.w 4fb6 <continueFunction+0xe6a>
				KPrintF(ERROR_HACKER);
    45a6:	|  |  |  |  |  |  |                                          pea 181cc <PutChar+0xa9a>
    45ac:	|  |  |  |  |  |  |                                          jsr 16c5e <KPrintF>
    45b2:	|  |  |  |  |  |  |                                          addq.l #4,sp
				return FALSE;
    45b4:	|  |  |  |  |  |  |                                          clr.w d0
    45b6:	|  +--|--|--|--|--|----------------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			}
			break;

			case SLU_LOAD_STRING:
				if (! loadStringToVar (&fun -> reg, param)) {
    45ba:	|  |  |  |  |  |  |                                          move.l 68(sp),d1
    45be:	|  |  |  |  |  |  |                                          moveq #28,d0
    45c0:	|  |  |  |  |  |  |                                          add.l 80(sp),d0
    45c4:	|  |  |  |  |  |  |                                          move.l d1,-(sp)
    45c6:	|  |  |  |  |  |  |                                          move.l d0,-(sp)
    45c8:	|  |  |  |  |  |  |                                          jsr 142e4 <loadStringToVar>
    45ce:	|  |  |  |  |  |  |                                          addq.l #8,sp
    45d0:	|  |  |  |  |  |  |                                          tst.w d0
    45d2:	|  |  |  |  |  |  |  /-------------------------------------- bne.w 4fba <continueFunction+0xe6e>
					return FALSE;
    45d6:	|  |  |  |  |  |  |  |                                       clr.w d0
    45d8:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_INDEXGET:
			case SLU_INCREMENT_INDEX:
			case SLU_DECREMENT_INDEX:
			switch (fun -> stack -> thisVar.varType) {
    45dc:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    45e0:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    45e4:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    45e6:	|  |  |  |  |  |  |  |                                       moveq #10,d1
    45e8:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    45ea:	|  |  |  |  |  |  |  |                                /----- beq.s 4648 <continueFunction+0x4fc>
    45ec:	|  |  |  |  |  |  |  |                                |      moveq #10,d1
    45ee:	|  |  |  |  |  |  |  |                                |      cmp.l d0,d1
    45f0:	|  |  |  |  |  |  |  |              /-----------------|----- bcs.w 47dc <continueFunction+0x690>
    45f4:	|  |  |  |  |  |  |  |              |                 |      tst.l d0
    45f6:	|  |  |  |  |  |  |  |              |                 |  /-- beq.s 4602 <continueFunction+0x4b6>
    45f8:	|  |  |  |  |  |  |  |              |                 |  |   moveq #6,d1
    45fa:	|  |  |  |  |  |  |  |              |                 |  |   cmp.l d0,d1
    45fc:	|  |  |  |  |  |  |  |              |                 +--|-- beq.s 4648 <continueFunction+0x4fc>
    45fe:	|  |  |  |  |  |  |  |              +-----------------|--|-- bra.w 47dc <continueFunction+0x690>
				case SVT_NULL:
				if (com == SLU_INDEXGET) {
    4602:	|  |  |  |  |  |  |  |              |                 |  \-> moveq #38,d0
    4604:	|  |  |  |  |  |  |  |              |                 |      cmp.l 64(sp),d0
    4608:	|  |  |  |  |  |  |  |              |                 |  /-- bne.s 4634 <continueFunction+0x4e8>
					setVariable (&fun -> reg, SVT_NULL, 0);
    460a:	|  |  |  |  |  |  |  |              |                 |  |   moveq #28,d0
    460c:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4610:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4612:	|  |  |  |  |  |  |  |              |                 |  |   clr.l -(sp)
    4614:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4616:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14b52 <setVariable>
    461c:	|  |  |  |  |  |  |  |              |                 |  |   lea 12(sp),sp
					trimStack (&fun -> stack);
    4620:	|  |  |  |  |  |  |  |              |                 |  |   moveq #24,d0
    4622:	|  |  |  |  |  |  |  |              |                 |  |   add.l 80(sp),d0
    4626:	|  |  |  |  |  |  |  |              |                 |  |   move.l d0,-(sp)
    4628:	|  |  |  |  |  |  |  |              |                 |  |   jsr 14be4 <trimStack>
    462e:	|  |  |  |  |  |  |  |              |                 |  |   addq.l #4,sp
				} else {
					KPrintF((ERROR_INCDEC_UNKNOWN));
					return FALSE;
				}
				break;
    4630:	|  |  |  |  |  |  |  |              |  /--------------|--|-- bra.w 47f2 <continueFunction+0x6a6>
					KPrintF((ERROR_INCDEC_UNKNOWN));
    4634:	|  |  |  |  |  |  |  |              |  |              |  \-> pea 1820d <PutChar+0xadb>
    463a:	|  |  |  |  |  |  |  |              |  |              |      jsr 16c5e <KPrintF>
    4640:	|  |  |  |  |  |  |  |              |  |              |      addq.l #4,sp
					return FALSE;
    4642:	|  |  |  |  |  |  |  |              |  |              |      clr.w d0
    4644:	|  +--|--|--|--|--|--|--------------|--|--------------|----- bra.w 4ff6 <continueFunction+0xeaa>

				case SVT_FASTARRAY:
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4648:	|  |  |  |  |  |  |  |              |  |              \----> movea.l 80(sp),a0
    464c:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    4650:	|  |  |  |  |  |  |  |              |  |                     movea.l 4(a0),a0
    4654:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
    4656:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 466c <continueFunction+0x520>
					KPrintF((ERROR_INDEX_EMPTY));
    4658:	|  |  |  |  |  |  |  |              |  |                 |   pea 18249 <PutChar+0xb17>
    465e:	|  |  |  |  |  |  |  |              |  |                 |   jsr 16c5e <KPrintF>
    4664:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #4,sp
					return FALSE;
    4666:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    4668:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4ff6 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    466c:	|  |  |  |  |  |  |  |              |  |                 \-> moveq #28,d0
    466e:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    4672:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    4674:	|  |  |  |  |  |  |  |              |  |                     pea 1 <_start+0x1>
    4678:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),a0
    467c:	|  |  |  |  |  |  |  |              |  |                     move.l a0,-(sp)
    467e:	|  |  |  |  |  |  |  |              |  |                     jsr 14260 <getValueType>
    4684:	|  |  |  |  |  |  |  |              |  |                     lea 12(sp),sp
    4688:	|  |  |  |  |  |  |  |              |  |                     tst.w d0
    468a:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4692 <continueFunction+0x546>
    468c:	|  |  |  |  |  |  |  |              |  |                 |   clr.w d0
    468e:	|  +--|--|--|--|--|--|--------------|--|-----------------|-- bra.w 4ff6 <continueFunction+0xeaa>
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    4692:	|  |  |  |  |  |  |  |              |  |                 \-> movea.l 80(sp),a0
    4696:	|  |  |  |  |  |  |  |              |  |                     movea.l 24(a0),a0
    469a:	|  |  |  |  |  |  |  |              |  |                     move.l (a0),d0
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
							:
    469c:	|  |  |  |  |  |  |  |              |  |                     moveq #10,d1
    469e:	|  |  |  |  |  |  |  |              |  |                     cmp.l d0,d1
    46a0:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 46c2 <continueFunction+0x576>
						fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii)
    46a2:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(sp),d0
    46a6:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,d1
    46a8:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 80(sp),a0
    46ac:	|  |  |  |  |  |  |  |              |  |                 |   movea.l 24(a0),a0
    46b0:	|  |  |  |  |  |  |  |              |  |                 |   move.l 4(a0),d0
    46b4:	|  |  |  |  |  |  |  |              |  |                 |   move.l d1,-(sp)
    46b6:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    46b8:	|  |  |  |  |  |  |  |              |  |                 |   jsr 13eea <fastArrayGetByIndex>
    46be:	|  |  |  |  |  |  |  |              |  |                 |   addq.l #8,sp
    46c0:	|  |  |  |  |  |  |  |              |  |              /--|-- bra.s 46e2 <continueFunction+0x596>
						stackGetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii);
    46c2:	|  |  |  |  |  |  |  |              |  |              |  \-> move.l 4(sp),d0
    46c6:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,d1
    46c8:	|  |  |  |  |  |  |  |              |  |              |      movea.l 80(sp),a0
    46cc:	|  |  |  |  |  |  |  |              |  |              |      movea.l 24(a0),a0
    46d0:	|  |  |  |  |  |  |  |              |  |              |      movea.l 4(a0),a0
    46d4:	|  |  |  |  |  |  |  |              |  |              |      move.l (a0),d0
    46d6:	|  |  |  |  |  |  |  |              |  |              |      move.l d1,-(sp)
    46d8:	|  |  |  |  |  |  |  |              |  |              |      move.l d0,-(sp)
    46da:	|  |  |  |  |  |  |  |              |  |              |      jsr 14b74 <stackGetByIndex>
    46e0:	|  |  |  |  |  |  |  |              |  |              |      addq.l #8,sp
					struct variable * grab = (fun -> stack -> thisVar.varType == SVT_FASTARRAY) ?
    46e2:	|  |  |  |  |  |  |  |              |  |              \----> move.l d0,60(sp)

					trimStack (&fun -> stack);
    46e6:	|  |  |  |  |  |  |  |              |  |                     moveq #24,d0
    46e8:	|  |  |  |  |  |  |  |              |  |                     add.l 80(sp),d0
    46ec:	|  |  |  |  |  |  |  |              |  |                     move.l d0,-(sp)
    46ee:	|  |  |  |  |  |  |  |              |  |                     jsr 14be4 <trimStack>
    46f4:	|  |  |  |  |  |  |  |              |  |                     addq.l #4,sp

					if (! grab) {
    46f6:	|  |  |  |  |  |  |  |              |  |                     tst.l 60(sp)
    46fa:	|  |  |  |  |  |  |  |              |  |                 /-- bne.s 4716 <continueFunction+0x5ca>
						setVariable (&fun -> reg, SVT_NULL, 0);
    46fc:	|  |  |  |  |  |  |  |              |  |                 |   moveq #28,d0
    46fe:	|  |  |  |  |  |  |  |              |  |                 |   add.l 80(sp),d0
    4702:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4704:	|  |  |  |  |  |  |  |              |  |                 |   clr.l -(sp)
    4706:	|  |  |  |  |  |  |  |              |  |                 |   move.l d0,-(sp)
    4708:	|  |  |  |  |  |  |  |              |  |                 |   jsr 14b52 <setVariable>
    470e:	|  |  |  |  |  |  |  |              |  |                 |   lea 12(sp),sp
							default:
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
						}
					}
				}
				break;
    4712:	|  |  |  |  |  |  |  |              |  |  /--------------|-- bra.w 47f0 <continueFunction+0x6a4>
    4716:	|  |  |  |  |  |  |  |              |  |  |              \-> moveq #39,d0
    4718:	|  |  |  |  |  |  |  |              |  |  |                  cmp.l 64(sp),d0
    471c:	|  |  |  |  |  |  |  |              |  |  |              /-- beq.s 472a <continueFunction+0x5de>
    471e:	|  |  |  |  |  |  |  |              |  |  |              |   moveq #40,d1
    4720:	|  |  |  |  |  |  |  |              |  |  |              |   cmp.l 64(sp),d1
    4724:	|  |  |  |  |  |  |  |              |  |  |           /--|-- beq.s 4774 <continueFunction+0x628>
    4726:	|  |  |  |  |  |  |  |              |  |  |  /--------|--|-- bra.w 47bc <continueFunction+0x670>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    472a:	|  |  |  |  |  |  |  |              |  |  |  |        |  \-> move.l 60(sp),-(sp)
    472e:	|  |  |  |  |  |  |  |              |  |  |  |        |      pea 1 <_start+0x1>
    4732:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 8(sp),a0
    4736:	|  |  |  |  |  |  |  |              |  |  |  |        |      move.l a0,-(sp)
    4738:	|  |  |  |  |  |  |  |              |  |  |  |        |      jsr 14260 <getValueType>
    473e:	|  |  |  |  |  |  |  |              |  |  |  |        |      lea 12(sp),sp
    4742:	|  |  |  |  |  |  |  |              |  |  |  |        |      tst.w d0
    4744:	|  |  |  |  |  |  |  |              |  |  |  |        |  /-- bne.s 474c <continueFunction+0x600>
    4746:	|  |  |  |  |  |  |  |              |  |  |  |        |  |   clr.w d0
    4748:	|  |  |  |  |  |  |  |              |  |  |  |  /-----|--|-- bra.w 47d6 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    474c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |  \-> move.l (sp),d1
    474e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      moveq #28,d0
    4750:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      add.l 80(sp),d0
    4754:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d1,-(sp)
    4756:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      pea 1 <_start+0x1>
    475a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,-(sp)
    475c:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      jsr 14b52 <setVariable>
    4762:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      lea 12(sp),sp
							grab -> varData.intValue = ii + 1;
    4766:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l (sp),d0
    4768:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      addq.l #1,d0
    476a:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      movea.l 60(sp),a0
    476e:	|  |  |  |  |  |  |  |              |  |  |  |  |     |      move.l d0,4(a0)
							break;
    4772:	|  |  |  |  |  |  |  |              |  |  |  |  |  /--|----- bra.s 47da <continueFunction+0x68e>
							if (! getValueType (&ii, SVT_INT, grab)) return FALSE;
    4774:	|  |  |  |  |  |  |  |              |  |  |  |  |  |  \----> move.l 60(sp),-(sp)
    4778:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    477c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 8(sp),a0
    4780:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l a0,-(sp)
    4782:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14260 <getValueType>
    4788:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
    478c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         tst.w d0
    478e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     /-- bne.s 4794 <continueFunction+0x648>
    4790:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     |   clr.w d0
    4792:	|  |  |  |  |  |  |  |              |  |  |  |  +--|-----|-- bra.s 47d6 <continueFunction+0x68a>
							setVariable (&fun -> reg, SVT_INT, ii);
    4794:	|  |  |  |  |  |  |  |              |  |  |  |  |  |     \-> move.l (sp),d1
    4796:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         moveq #28,d0
    4798:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         add.l 80(sp),d0
    479c:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d1,-(sp)
    479e:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         pea 1 <_start+0x1>
    47a2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,-(sp)
    47a4:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         jsr 14b52 <setVariable>
    47aa:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         lea 12(sp),sp
							grab -> varData.intValue = ii - 1;
    47ae:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l (sp),d0
    47b0:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         subq.l #1,d0
    47b2:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         movea.l 60(sp),a0
    47b6:	|  |  |  |  |  |  |  |              |  |  |  |  |  |         move.l d0,4(a0)
							break;
    47ba:	|  |  |  |  |  |  |  |              |  |  |  |  |  +-------- bra.s 47da <continueFunction+0x68e>
							if (! copyVariable (grab, &fun -> reg)) return FALSE;
    47bc:	|  |  |  |  |  |  |  |              |  |  |  \--|--|-------> moveq #28,d0
    47be:	|  |  |  |  |  |  |  |              |  |  |     |  |         add.l 80(sp),d0
    47c2:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l d0,-(sp)
    47c4:	|  |  |  |  |  |  |  |              |  |  |     |  |         move.l 64(sp),-(sp)
    47c8:	|  |  |  |  |  |  |  |              |  |  |     |  |         jsr 1471a <copyVariable>
    47ce:	|  |  |  |  |  |  |  |              |  |  |     |  |         addq.l #8,sp
    47d0:	|  |  |  |  |  |  |  |              |  |  |     |  |         tst.w d0
    47d2:	|  |  |  |  |  |  |  |              |  |  +-----|--|-------- bne.s 47f0 <continueFunction+0x6a4>
    47d4:	|  |  |  |  |  |  |  |              |  |  |     |  |         clr.w d0
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    47d6:	|  +--|--|--|--|--|--|--------------|--|--|-----\--|-------X bra.w 4ff6 <continueFunction+0xeaa>
				break;
    47da:	|  |  |  |  |  |  |  |              |  |  +--------\-------X bra.s 47f0 <continueFunction+0x6a4>

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
    47dc:	|  |  |  |  |  |  |  |              \--|--|----------------> pea 18267 <PutChar+0xb35>
    47e2:	|  |  |  |  |  |  |  |                 |  |                  jsr 16c5e <KPrintF>
    47e8:	|  |  |  |  |  |  |  |                 |  |                  addq.l #4,sp
				return FALSE;
    47ea:	|  |  |  |  |  |  |  |                 |  |                  clr.w d0
    47ec:	|  +--|--|--|--|--|--|-----------------|--|----------------- bra.w 4ff6 <continueFunction+0xeaa>
				break;
    47f0:	|  |  |  |  |  |  |  |                 |  \----------------> nop
			}
			break;
    47f2:	|  |  |  |  +--|--|--|-----------------\-------------------X bra.w 4fd4 <continueFunction+0xe88>

			case SLU_INDEXSET:
			switch (fun -> stack -> thisVar.varType) {
    47f6:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    47fa:	|  |  |  |  |  |  |  |                                       movea.l 24(a0),a0
    47fe:	|  |  |  |  |  |  |  |                                       move.l (a0),d0
    4800:	|  |  |  |  |  |  |  |                                       moveq #6,d1
    4802:	|  |  |  |  |  |  |  |                                       cmp.l d0,d1
    4804:	|  |  |  |  |  |  |  |                                   /-- beq.s 4812 <continueFunction+0x6c6>
    4806:	|  |  |  |  |  |  |  |                                   |   moveq #10,d1
    4808:	|  |  |  |  |  |  |  |                                   |   cmp.l d0,d1
    480a:	|  |  |  |  |  |  |  |                                /--|-- beq.w 48be <continueFunction+0x772>
    480e:	|  |  |  |  |  |  |  |                             /--|--|-- bra.w 491c <continueFunction+0x7d0>
				case SVT_STACK:
				if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    4812:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4816:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    481a:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    481e:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    4820:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4836 <continueFunction+0x6ea>
					KPrintF((ERROR_INDEX_EMPTY));
    4822:	|  |  |  |  |  |  |  |                             |  |  |   pea 18249 <PutChar+0xb17>
    4828:	|  |  |  |  |  |  |  |                             |  |  |   jsr 16c5e <KPrintF>
    482e:	|  |  |  |  |  |  |  |                             |  |  |   addq.l #4,sp
					return FALSE;
    4830:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4832:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4ff6 <continueFunction+0xeaa>
				} else {
					int ii;
					if (! getValueType(&ii, SVT_INT,&fun -> reg)) return FALSE;
    4836:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #28,d0
    4838:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    483c:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    483e:	|  |  |  |  |  |  |  |                             |  |      pea 1 <_start+0x1>
    4842:	|  |  |  |  |  |  |  |                             |  |      lea 16(sp),a0
    4846:	|  |  |  |  |  |  |  |                             |  |      move.l a0,-(sp)
    4848:	|  |  |  |  |  |  |  |                             |  |      jsr 14260 <getValueType>
    484e:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    4852:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4854:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 485c <continueFunction+0x710>
    4856:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4858:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4ff6 <continueFunction+0xeaa>
					if (! stackSetByIndex (fun -> stack -> thisVar.varData.theStack -> first, ii, &fun -> stack -> next -> thisVar)) {
    485c:	|  |  |  |  |  |  |  |                             |  |  \-> movea.l 80(sp),a0
    4860:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4864:	|  |  |  |  |  |  |  |                             |  |      move.l 8(a0),d0
    4868:	|  |  |  |  |  |  |  |                             |  |      movea.l d0,a1
    486a:	|  |  |  |  |  |  |  |                             |  |      move.l 8(sp),d0
    486e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,d1
    4870:	|  |  |  |  |  |  |  |                             |  |      movea.l 80(sp),a0
    4874:	|  |  |  |  |  |  |  |                             |  |      movea.l 24(a0),a0
    4878:	|  |  |  |  |  |  |  |                             |  |      movea.l 4(a0),a0
    487c:	|  |  |  |  |  |  |  |                             |  |      move.l (a0),d0
    487e:	|  |  |  |  |  |  |  |                             |  |      move.l a1,-(sp)
    4880:	|  |  |  |  |  |  |  |                             |  |      move.l d1,-(sp)
    4882:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    4884:	|  |  |  |  |  |  |  |                             |  |      jsr 636c <stackSetByIndex>
    488a:	|  |  |  |  |  |  |  |                             |  |      lea 12(sp),sp
    488e:	|  |  |  |  |  |  |  |                             |  |      tst.w d0
    4890:	|  |  |  |  |  |  |  |                             |  |  /-- bne.s 4898 <continueFunction+0x74c>
						return FALSE;
    4892:	|  |  |  |  |  |  |  |                             |  |  |   clr.w d0
    4894:	|  +--|--|--|--|--|--|-----------------------------|--|--|-- bra.w 4ff6 <continueFunction+0xeaa>
					}
					trimStack (&fun -> stack);
    4898:	|  |  |  |  |  |  |  |                             |  |  \-> moveq #24,d0
    489a:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    489e:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    48a0:	|  |  |  |  |  |  |  |                             |  |      jsr 14be4 <trimStack>
    48a6:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
					trimStack (&fun -> stack);
    48a8:	|  |  |  |  |  |  |  |                             |  |      moveq #24,d0
    48aa:	|  |  |  |  |  |  |  |                             |  |      add.l 80(sp),d0
    48ae:	|  |  |  |  |  |  |  |                             |  |      move.l d0,-(sp)
    48b0:	|  |  |  |  |  |  |  |                             |  |      jsr 14be4 <trimStack>
    48b6:	|  |  |  |  |  |  |  |                             |  |      addq.l #4,sp
				}
				break;
    48b8:	|  |  |  |  |  |  |  |                             |  |      nop

				default:
				KPrintF((ERROR_INDEX_NONSTACK));
				return FALSE;
			}
			break;
    48ba:	|  |  |  |  +--|--|--|-----------------------------|--|----- bra.w 4fd4 <continueFunction+0xe88>
					if (! getValueType (&ii, SVT_INT, &fun->reg)) return FALSE;
    48be:	|  |  |  |  |  |  |  |                             |  \----> moveq #28,d0
    48c0:	|  |  |  |  |  |  |  |                             |         add.l 80(sp),d0
    48c4:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    48c6:	|  |  |  |  |  |  |  |                             |         pea 1 <_start+0x1>
    48ca:	|  |  |  |  |  |  |  |                             |         lea 20(sp),a0
    48ce:	|  |  |  |  |  |  |  |                             |         move.l a0,-(sp)
    48d0:	|  |  |  |  |  |  |  |                             |         jsr 14260 <getValueType>
    48d6:	|  |  |  |  |  |  |  |                             |         lea 12(sp),sp
    48da:	|  |  |  |  |  |  |  |                             |         tst.w d0
    48dc:	|  |  |  |  |  |  |  |                             |     /-- bne.s 48e4 <continueFunction+0x798>
    48de:	|  |  |  |  |  |  |  |                             |     |   clr.w d0
    48e0:	|  +--|--|--|--|--|--|-----------------------------|-----|-- bra.w 4ff6 <continueFunction+0xeaa>
					struct variable * v = fastArrayGetByIndex (fun -> stack -> thisVar.varData.fastArray, ii);
    48e4:	|  |  |  |  |  |  |  |                             |     \-> move.l 12(sp),d0
    48e8:	|  |  |  |  |  |  |  |                             |         move.l d0,d1
    48ea:	|  |  |  |  |  |  |  |                             |         movea.l 80(sp),a0
    48ee:	|  |  |  |  |  |  |  |                             |         movea.l 24(a0),a0
    48f2:	|  |  |  |  |  |  |  |                             |         move.l 4(a0),d0
    48f6:	|  |  |  |  |  |  |  |                             |         move.l d1,-(sp)
    48f8:	|  |  |  |  |  |  |  |                             |         move.l d0,-(sp)
    48fa:	|  |  |  |  |  |  |  |                             |         jsr 13eea <fastArrayGetByIndex>
    4900:	|  |  |  |  |  |  |  |                             |         addq.l #8,sp
    4902:	|  |  |  |  |  |  |  |                             |         move.l d0,56(sp)
					if (v == NULL) KPrintF(("Not within bounds of fast array."));
    4906:	|  |  |  |  |  |  |  |                             |     /-- bne.s 4916 <continueFunction+0x7ca>
    4908:	|  |  |  |  |  |  |  |                             |     |   pea 1828b <PutChar+0xb59>
    490e:	|  |  |  |  |  |  |  |                             |     |   jsr 16c5e <KPrintF>
    4914:	|  |  |  |  |  |  |  |                             |     |   addq.l #4,sp
					return FALSE;
    4916:	|  |  |  |  |  |  |  |                             |     \-> clr.w d0
    4918:	|  +--|--|--|--|--|--|-----------------------------|-------- bra.w 4ff6 <continueFunction+0xeaa>
				KPrintF((ERROR_INDEX_NONSTACK));
    491c:	|  |  |  |  |  |  |  |                             \-------> pea 18267 <PutChar+0xb35>
    4922:	|  |  |  |  |  |  |  |                                       jsr 16c5e <KPrintF>
    4928:	|  |  |  |  |  |  |  |                                       addq.l #4,sp
				return FALSE;
    492a:	|  |  |  |  |  |  |  |                                       clr.w d0
    492c:	|  +--|--|--|--|--|--|-------------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			// variable, a global or onto the stack...

			case SLU_INCREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4930:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4934:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4938:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    493c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    493e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4940:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4942:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4946:	|  |  |  |  |  |  |  |                                       lea 24(sp),a0
    494a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    494c:	|  |  |  |  |  |  |  |                                       jsr 14260 <getValueType>
    4952:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4956:	|  |  |  |  |  |  |  |                                       tst.w d0
    4958:	|  |  |  |  |  |  |  |                                   /-- bne.s 4960 <continueFunction+0x814>
    495a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    495c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4ff6 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4960:	|  |  |  |  |  |  |  |                                   \-> move.l 16(sp),d1
    4964:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4966:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    496a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    496c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4970:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4972:	|  |  |  |  |  |  |  |                                       jsr 14b52 <setVariable>
    4978:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii + 1);
    497c:	|  |  |  |  |  |  |  |                                       move.l 16(sp),d0
    4980:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4982:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    4984:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4988:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    498c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4990:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4992:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4994:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4996:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    499a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    499c:	|  |  |  |  |  |  |  |                                       jsr 14b52 <setVariable>
    49a2:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    49a6:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_INCREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    49aa:	|  |  |  |  |  |  |  |                                       move.l 1a752 <globalVars>,d1
    49b0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    49b4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    49b6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    49b8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    49ba:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    49be:	|  |  |  |  |  |  |  |                                       lea 28(sp),a0
    49c2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    49c4:	|  |  |  |  |  |  |  |                                       jsr 14260 <getValueType>
    49ca:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    49ce:	|  |  |  |  |  |  |  |                                       tst.w d0
    49d0:	|  |  |  |  |  |  |  |                                   /-- bne.s 49d8 <continueFunction+0x88c>
    49d2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    49d4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4ff6 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    49d8:	|  |  |  |  |  |  |  |                                   \-> move.l 20(sp),d1
    49dc:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    49de:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    49e2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    49e4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    49e8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    49ea:	|  |  |  |  |  |  |  |                                       jsr 14b52 <setVariable>
    49f0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii + 1);
    49f4:	|  |  |  |  |  |  |  |                                       move.l 20(sp),d0
    49f8:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    49fa:	|  |  |  |  |  |  |  |                                       addq.l #1,d1
    49fc:	|  |  |  |  |  |  |  |                                       movea.l 1a752 <globalVars>,a0
    4a02:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4a06:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4a08:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4a0a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4a0c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4a10:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4a12:	|  |  |  |  |  |  |  |                                       jsr 14b52 <setVariable>
    4a18:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4a1c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_DECREMENT_LOCAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&fun -> localVars[param])) return FALSE;
    4a20:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4a24:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4a28:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4a2c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4a2e:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4a30:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4a32:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4a36:	|  |  |  |  |  |  |  |                                       lea 32(sp),a0
    4a3a:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4a3c:	|  |  |  |  |  |  |  |                                       jsr 14260 <getValueType>
    4a42:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4a46:	|  |  |  |  |  |  |  |                                       tst.w d0
    4a48:	|  |  |  |  |  |  |  |                                   /-- bne.s 4a50 <continueFunction+0x904>
    4a4a:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4a4c:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4ff6 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4a50:	|  |  |  |  |  |  |  |                                   \-> move.l 24(sp),d1
    4a54:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4a56:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4a5a:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4a5c:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4a60:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4a62:	|  |  |  |  |  |  |  |                                       jsr 14b52 <setVariable>
    4a68:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&(fun -> localVars[param]), SVT_INT, ii - 1);
    4a6c:	|  |  |  |  |  |  |  |                                       move.l 24(sp),d0
    4a70:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4a72:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4a74:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4a78:	|  |  |  |  |  |  |  |                                       movea.l 20(a0),a0
    4a7c:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4a80:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4a82:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4a84:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4a86:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4a8a:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4a8c:	|  |  |  |  |  |  |  |                                       jsr 14b52 <setVariable>
    4a92:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4a96:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_DECREMENT_GLOBAL:
			{
				int ii;
				if (! getValueType(&ii, SVT_INT,&globalVars[param])) return FALSE;
    4a9a:	|  |  |  |  |  |  |  |                                       move.l 1a752 <globalVars>,d1
    4aa0:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4aa4:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4aa6:	|  |  |  |  |  |  |  |                                       add.l d1,d0
    4aa8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4aaa:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4aae:	|  |  |  |  |  |  |  |                                       lea 36(sp),a0
    4ab2:	|  |  |  |  |  |  |  |                                       move.l a0,-(sp)
    4ab4:	|  |  |  |  |  |  |  |                                       jsr 14260 <getValueType>
    4aba:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
    4abe:	|  |  |  |  |  |  |  |                                       tst.w d0
    4ac0:	|  |  |  |  |  |  |  |                                   /-- bne.s 4ac8 <continueFunction+0x97c>
    4ac2:	|  |  |  |  |  |  |  |                                   |   clr.w d0
    4ac4:	|  +--|--|--|--|--|--|-----------------------------------|-- bra.w 4ff6 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, ii);
    4ac8:	|  |  |  |  |  |  |  |                                   \-> move.l 28(sp),d1
    4acc:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4ace:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4ad2:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4ad4:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4ad8:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4ada:	|  |  |  |  |  |  |  |                                       jsr 14b52 <setVariable>
    4ae0:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
				setVariable (&globalVars[param], SVT_INT, ii - 1);
    4ae4:	|  |  |  |  |  |  |  |                                       move.l 28(sp),d0
    4ae8:	|  |  |  |  |  |  |  |                                       move.l d0,d1
    4aea:	|  |  |  |  |  |  |  |                                       subq.l #1,d1
    4aec:	|  |  |  |  |  |  |  |                                       movea.l 1a752 <globalVars>,a0
    4af2:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4af6:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4af8:	|  |  |  |  |  |  |  |                                       add.l a0,d0
    4afa:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4afc:	|  |  |  |  |  |  |  |                                       pea 1 <_start+0x1>
    4b00:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4b02:	|  |  |  |  |  |  |  |                                       jsr 14b52 <setVariable>
    4b08:	|  |  |  |  |  |  |  |                                       lea 12(sp),sp
			}
			break;
    4b0c:	|  |  |  |  +--|--|--|-------------------------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_SET_LOCAL:
			if (! copyVariable (&fun -> reg, &(fun -> localVars[param]))) return FALSE;
    4b10:	|  |  |  |  |  |  |  |                                       movea.l 80(sp),a0
    4b14:	|  |  |  |  |  |  |  |                                       move.l 20(a0),d1
    4b18:	|  |  |  |  |  |  |  |                                       move.l 68(sp),d0
    4b1c:	|  |  |  |  |  |  |  |                                       lsl.l #3,d0
    4b1e:	|  |  |  |  |  |  |  |                                       add.l d0,d1
    4b20:	|  |  |  |  |  |  |  |                                       moveq #28,d0
    4b22:	|  |  |  |  |  |  |  |                                       add.l 80(sp),d0
    4b26:	|  |  |  |  |  |  |  |                                       move.l d1,-(sp)
    4b28:	|  |  |  |  |  |  |  |                                       move.l d0,-(sp)
    4b2a:	|  |  |  |  |  |  |  |                                       jsr 1471a <copyVariable>
    4b30:	|  |  |  |  |  |  |  |                                       addq.l #8,sp
    4b32:	|  |  |  |  |  |  |  |                                       tst.w d0
    4b34:	|  |  |  |  |  |  |  |  /----------------------------------- bne.w 4fbe <continueFunction+0xe72>
    4b38:	|  |  |  |  |  |  |  |  |                                    clr.w d0
    4b3a:	|  +--|--|--|--|--|--|--|----------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_SET_GLOBAL:
//			newDebug ("  Copying TO global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&fun -> reg, &globalVars[param])) return FALSE;
    4b3e:	|  |  |  |  |  |  |  |  |                                    move.l 1a752 <globalVars>,d1
    4b44:	|  |  |  |  |  |  |  |  |                                    move.l 68(sp),d0
    4b48:	|  |  |  |  |  |  |  |  |                                    lsl.l #3,d0
    4b4a:	|  |  |  |  |  |  |  |  |                                    add.l d0,d1
    4b4c:	|  |  |  |  |  |  |  |  |                                    moveq #28,d0
    4b4e:	|  |  |  |  |  |  |  |  |                                    add.l 80(sp),d0
    4b52:	|  |  |  |  |  |  |  |  |                                    move.l d1,-(sp)
    4b54:	|  |  |  |  |  |  |  |  |                                    move.l d0,-(sp)
    4b56:	|  |  |  |  |  |  |  |  |                                    jsr 1471a <copyVariable>
    4b5c:	|  |  |  |  |  |  |  |  |                                    addq.l #8,sp
    4b5e:	|  |  |  |  |  |  |  |  |                                    tst.w d0
    4b60:	|  |  |  |  |  |  |  |  |  /-------------------------------- bne.w 4fc2 <continueFunction+0xe76>
    4b64:	|  |  |  |  |  |  |  |  |  |                                 clr.w d0
    4b66:	|  +--|--|--|--|--|--|--|--|-------------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_LOAD_GLOBAL:
//			newDebug ("  Copying FROM global variable", param);
//			newDebug ("  Global type at the moment", globalVars[param].varType);
			if (! copyVariable (&globalVars[param], &fun -> reg)) return FALSE;
    4b6a:	|  |  |  |  |  |  |  |  |  |                                 moveq #28,d0
    4b6c:	|  |  |  |  |  |  |  |  |  |                                 add.l 80(sp),d0
    4b70:	|  |  |  |  |  |  |  |  |  |                                 movea.l 1a752 <globalVars>,a0
    4b76:	|  |  |  |  |  |  |  |  |  |                                 move.l 68(sp),d1
    4b7a:	|  |  |  |  |  |  |  |  |  |                                 lsl.l #3,d1
    4b7c:	|  |  |  |  |  |  |  |  |  |                                 add.l a0,d1
    4b7e:	|  |  |  |  |  |  |  |  |  |                                 move.l d0,-(sp)
    4b80:	|  |  |  |  |  |  |  |  |  |                                 move.l d1,-(sp)
    4b82:	|  |  |  |  |  |  |  |  |  |                                 jsr 1471a <copyVariable>
    4b88:	|  |  |  |  |  |  |  |  |  |                                 addq.l #8,sp
    4b8a:	|  |  |  |  |  |  |  |  |  |                                 tst.w d0
    4b8c:	|  |  |  |  |  |  |  |  |  |  /----------------------------- bne.w 4fc6 <continueFunction+0xe7a>
    4b90:	|  |  |  |  |  |  |  |  |  |  |                              clr.w d0
    4b92:	|  +--|--|--|--|--|--|--|--|--|----------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_STACK_PUSH:
			if (! addVarToStack (&fun -> reg, &fun -> stack)) return FALSE;
    4b96:	|  |  |  |  |  |  |  |  |  |  |                              moveq #24,d1
    4b98:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d1
    4b9c:	|  |  |  |  |  |  |  |  |  |  |                              moveq #28,d0
    4b9e:	|  |  |  |  |  |  |  |  |  |  |                              add.l 80(sp),d0
    4ba2:	|  |  |  |  |  |  |  |  |  |  |                              move.l d1,-(sp)
    4ba4:	|  |  |  |  |  |  |  |  |  |  |                              move.l d0,-(sp)
    4ba6:	|  |  |  |  |  |  |  |  |  |  |                              jsr 13a9c <addVarToStack>
    4bac:	|  |  |  |  |  |  |  |  |  |  |                              addq.l #8,sp
    4bae:	|  |  |  |  |  |  |  |  |  |  |                              tst.w d0
    4bb0:	|  |  |  |  |  |  |  |  |  |  |  /-------------------------- bne.w 4fca <continueFunction+0xe7e>
    4bb4:	|  |  |  |  |  |  |  |  |  |  |  |                           clr.w d0
    4bb6:	|  +--|--|--|--|--|--|--|--|--|--|-------------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_QUICK_PUSH:
			if (! addVarToStackQuick (&fun -> reg, &fun -> stack)) return FALSE;
    4bba:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #24,d1
    4bbc:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d1
    4bc0:	|  |  |  |  |  |  |  |  |  |  |  |                           moveq #28,d0
    4bc2:	|  |  |  |  |  |  |  |  |  |  |  |                           add.l 80(sp),d0
    4bc6:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d1,-(sp)
    4bc8:	|  |  |  |  |  |  |  |  |  |  |  |                           move.l d0,-(sp)
    4bca:	|  |  |  |  |  |  |  |  |  |  |  |                           jsr 13b22 <addVarToStackQuick>
    4bd0:	|  |  |  |  |  |  |  |  |  |  |  |                           addq.l #8,sp
    4bd2:	|  |  |  |  |  |  |  |  |  |  |  |                           tst.w d0
    4bd4:	|  |  |  |  |  |  |  |  |  |  |  |  /----------------------- bne.w 4fce <continueFunction+0xe82>
    4bd8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        clr.w d0
    4bda:	|  +--|--|--|--|--|--|--|--|--|--|--|----------------------- bra.w 4ff6 <continueFunction+0xeaa>
			break;

			case SLU_NOT:
			setVariable (&fun -> reg, SVT_INT, ! getBoolean (&fun -> reg));
    4bde:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4be0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4be4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4be6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 147a0 <getBoolean>
    4bec:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4bee:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4bf0:	|  |  |  |  |  |  |  |  |  |  |  |  |                        seq d0
    4bf2:	|  |  |  |  |  |  |  |  |  |  |  |  |                        neg.b d0
    4bf4:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #0,d1
    4bf6:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.b d0,d1
    4bf8:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4bfa:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4bfe:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d1,-(sp)
    4c00:	|  |  |  |  |  |  |  |  |  |  |  |  |                        pea 1 <_start+0x1>
    4c04:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4c06:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 14b52 <setVariable>
    4c0c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        lea 12(sp),sp
			break;
    4c10:	|  |  |  |  +--|--|--|--|--|--|--|--|----------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_BR_ZERO:
			if (! getBoolean (&fun -> reg)) {
    4c14:	|  |  |  |  |  |  |  |  |  |  |  |  |                        moveq #28,d0
    4c16:	|  |  |  |  |  |  |  |  |  |  |  |  |                        add.l 80(sp),d0
    4c1a:	|  |  |  |  |  |  |  |  |  |  |  |  |                        move.l d0,-(sp)
    4c1c:	|  |  |  |  |  |  |  |  |  |  |  |  |                        jsr 147a0 <getBoolean>
    4c22:	|  |  |  |  |  |  |  |  |  |  |  |  |                        addq.l #4,sp
    4c24:	|  |  |  |  |  |  |  |  |  |  |  |  |                        tst.w d0
    4c26:	|  |  |  |  |  |  |  |  |  |  |  |  |  /-------------------- bne.w 4fd2 <continueFunction+0xe86>
				advanceNow = FALSE;
    4c2a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
				fun -> runThisLine = param;
    4c2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4c32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			}
			break;
    4c38:	|  |  |  |  |  |  |  |  |  |  |  |  |  +-------------------- bra.w 4fd2 <continueFunction+0xe86>

			case SLU_BRANCH:
			advanceNow = FALSE;
    4c3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     clr.w 72(sp)
			fun -> runThisLine = param;
    4c40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4c44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 68(sp),36(a0)
			break;
    4c4a:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4fd4 <continueFunction+0xe88>

			case SLU_NEGATIVE:
			{
				int i;
				if (! getValueType(&i, SVT_INT,&fun -> reg)) return FALSE;
    4c4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    4c50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    4c54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    4c56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    4c5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 40(sp),a0
    4c5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l a0,-(sp)
    4c60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14260 <getValueType>
    4c66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
    4c6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     tst.w d0
    4c6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 /-- bne.s 4c74 <continueFunction+0xb28>
    4c6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 |   clr.w d0
    4c70:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----------------|-- bra.w 4ff6 <continueFunction+0xeaa>
				setVariable (&fun -> reg, SVT_INT, -i);
    4c74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                 \-> move.l 32(sp),d0
    4c78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,d1
    4c7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     neg.l d1
    4c7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     moveq #28,d0
    4c7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     add.l 80(sp),d0
    4c82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d1,-(sp)
    4c84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     pea 1 <_start+0x1>
    4c88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l d0,-(sp)
    4c8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     jsr 14b52 <setVariable>
    4c90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     lea 12(sp),sp
			}
			break;
    4c94:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-------------------- bra.w 4fd4 <continueFunction+0xe88>
			case SLU_NOT_EQ:
			case SLU_LESSTHAN:
			case SLU_MORETHAN:
			case SLU_LESS_EQUAL:
			case SLU_MORE_EQUAL:
			if (fun -> stack) {
    4c98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     movea.l 80(sp),a0
    4c9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |                     move.l 24(a0),d0
    4ca0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  /----------------- beq.w 4f8a <continueFunction+0xe3e>
    4ca4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  moveq #15,d0
    4ca6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |                  cmp.l 64(sp),d0
    4caa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        /-------- beq.s 4d26 <continueFunction+0xbda>
    4cac:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         moveq #15,d1
    4cae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |        |         cmp.l 64(sp),d1
    4cb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     /--|-------- bcs.w 4d70 <continueFunction+0xc24>
    4cb6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         moveq #8,d0
    4cb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |         cmp.l 64(sp),d0
    4cbc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     /-- beq.s 4cca <continueFunction+0xb7e>
    4cbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   moveq #14,d1
    4cc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |     |   cmp.l 64(sp),d1
    4cc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  /--|-- beq.s 4cf8 <continueFunction+0xbac>
    4cc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     +--|--|--|-- bra.w 4d70 <continueFunction+0xc24>
				int firstValue, secondValue;

				switch (com) {
					case SLU_PLUS:
					addVariablesInSecond (&fun -> stack -> thisVar, &fun -> reg);
    4cca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |  \-> moveq #28,d0
    4ccc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    4cd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      movea.l 80(sp),a0
    4cd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l 24(a0),d1
    4cd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    4cda:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d1,-(sp)
    4cdc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 13b96 <addVariablesInSecond>
    4ce2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #8,sp
					trimStack (&fun -> stack);
    4ce4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      moveq #24,d0
    4ce6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      add.l 80(sp),d0
    4cea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      move.l d0,-(sp)
    4cec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      jsr 14be4 <trimStack>
    4cf2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |     |  |  |      addq.l #4,sp
					break;
    4cf4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  /--|--|--|----- bra.w 4f9e <continueFunction+0xe52>

					case SLU_EQUALS:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4cf8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----> moveq #28,d0
    4cfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    4cfe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         movea.l 80(sp),a0
    4d02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l 24(a0),d1
    4d06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    4d08:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d1,-(sp)
    4d0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 13c54 <compareVariablesInSecond>
    4d10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #8,sp
					trimStack (&fun -> stack);
    4d12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         moveq #24,d0
    4d14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         add.l 80(sp),d0
    4d18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         move.l d0,-(sp)
    4d1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         jsr 14be4 <trimStack>
    4d20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |         addq.l #4,sp
					break;
    4d22:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|--|-------- bra.w 4f9e <continueFunction+0xe52>

					case SLU_NOT_EQ:
					compareVariablesInSecond (&(fun -> stack -> thisVar), &fun -> reg);
    4d26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \-------> moveq #28,d0
    4d28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    4d2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    4d30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 24(a0),d1
    4d34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    4d36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d1,-(sp)
    4d38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 13c54 <compareVariablesInSecond>
    4d3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #8,sp
					trimStack (&fun -> stack);
    4d40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            moveq #24,d0
    4d42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            add.l 80(sp),d0
    4d46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,-(sp)
    4d48:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            jsr 14be4 <trimStack>
    4d4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            addq.l #4,sp
	               	fun -> reg.varData.intValue = ! fun -> reg.varData.intValue;
    4d50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    4d54:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l 32(a0),d0
    4d58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            seq d0
    4d5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            neg.b d0
    4d5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.b d0,d0
    4d5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            andi.l #255,d0
    4d64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            movea.l 80(sp),a0
    4d68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |            move.l d0,32(a0)
					break;
    4d6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +--|----------- bra.w 4f9e <continueFunction+0xe52>

					default:
					if (! getValueType (&firstValue, SVT_INT, &fun->stack->thisVar)) return FALSE;
    4d70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  \----------> movea.l 80(sp),a0
    4d74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l 24(a0),d0
    4d78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4d7a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    4d7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 48(sp),a0
    4d82:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    4d84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14260 <getValueType>
    4d8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4d8e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    4d90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 4d98 <continueFunction+0xc4c>
    4d92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    4d94:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4ff6 <continueFunction+0xeaa>
					if (! getValueType(&secondValue, SVT_INT,&fun -> reg)) return FALSE;
    4d98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #28,d0
    4d9a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4d9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4da0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               pea 1 <_start+0x1>
    4da4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 44(sp),a0
    4da8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l a0,-(sp)
    4daa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14260 <getValueType>
    4db0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               lea 12(sp),sp
    4db4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               tst.w d0
    4db6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bne.s 4dbe <continueFunction+0xc72>
    4db8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   clr.w d0
    4dba:	|  +--|--|--|--|--|--|--|--|--|--|--|--|--|--|-----------|-- bra.w 4ff6 <continueFunction+0xeaa>
					trimStack (&fun -> stack);
    4dbe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           \-> moveq #24,d0
    4dc0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 80(sp),d0
    4dc4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               move.l d0,-(sp)
    4dc6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               jsr 14be4 <trimStack>
    4dcc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               addq.l #4,sp
    4dce:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #-9,d0
    4dd0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               add.l 64(sp),d0
    4dd4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               moveq #23,d1
    4dd6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |               cmp.l d0,d1
    4dd8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           /-- bcs.w 4f9c <continueFunction+0xe50>
    4ddc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l d0,d0
    4dde:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   movea.l d0,a0
    4de0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   adda.l #19948,a0
    4de6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.w (a0),d0
    4de8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jmp (4dec <continueFunction+0xca0>,pc,d0.w)
    4dec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   ori.w #48,-(a2)
    4df0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x00ba
    4df2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4dfa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   .short 0x0088
    4dfc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4e04:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(28311984,d0.w)
    4e0c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(15466778,d0.w)
    4e14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   bclr d0,(21365106,d0.w)

					switch (com) {
						case SLU_MULT:
						setVariable (&fun -> reg, SVT_INT, firstValue * secondValue);
    4e1c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4e20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4e24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e28:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1761c <__mulsi3>
    4e2e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    4e30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    4e32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4e34:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4e38:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4e3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14b52 <setVariable>
    4e46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4e4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f9e <continueFunction+0xe52>

						case SLU_MINUS:
						setVariable (&fun -> reg, SVT_INT, firstValue - secondValue);
    4e4e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4e52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4e56:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sub.l d0,d1
    4e58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4e5a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4e5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e60:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4e64:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14b52 <setVariable>
    4e6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4e70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f9e <continueFunction+0xe52>

						case SLU_MODULUS:
						setVariable (&fun -> reg, SVT_INT, firstValue % secondValue);
    4e74:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4e78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4e7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e80:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 176c8 <__modsi3>
    4e86:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    4e88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    4e8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4e8c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4e90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4e92:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4e96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4e98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14b52 <setVariable>
    4e9e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4ea2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f9e <continueFunction+0xe52>

						case SLU_DIVIDE:
						setVariable (&fun -> reg, SVT_INT, firstValue / secondValue);
    4ea6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d0
    4eaa:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d1
    4eae:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4eb0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4eb2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 1769a <__divsi3>
    4eb8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   addq.l #8,sp
    4eba:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,d1
    4ebc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4ebe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4ec2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4ec4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4ec8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4eca:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14b52 <setVariable>
    4ed0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4ed4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f9e <continueFunction+0xe52>

						case SLU_LESSTHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue < secondValue);
    4ed8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4edc:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4ee0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4ee2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sgt d0
    4ee4:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4ee6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4ee8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4eea:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4eec:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4ef0:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4ef2:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4ef6:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4ef8:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14b52 <setVariable>
    4efe:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4f02:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.w 4f9e <continueFunction+0xe52>

						case SLU_MORETHAN:
						setVariable (&fun -> reg, SVT_INT, firstValue > secondValue);
    4f06:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4f0a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4f0e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4f10:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   slt d0
    4f12:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4f14:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4f16:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4f18:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4f1a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4f1e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4f20:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4f24:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4f26:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14b52 <setVariable>
    4f2c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4f30:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4f9e <continueFunction+0xe52>

						case SLU_LESS_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue <= secondValue);
    4f32:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4f36:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4f3a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4f3c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sge d0
    4f3e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4f40:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4f42:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4f44:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4f46:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4f4a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4f4c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4f50:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4f52:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14b52 <setVariable>
    4f58:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4f5c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4f9e <continueFunction+0xe52>

						case SLU_MORE_EQUAL:
						setVariable (&fun -> reg, SVT_INT, firstValue >= secondValue);
    4f5e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 40(sp),d1
    4f62:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l 36(sp),d0
    4f66:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   cmp.l d1,d0
    4f68:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   sle d0
    4f6a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   neg.b d0
    4f6c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #0,d1
    4f6e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.b d0,d1
    4f70:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   moveq #28,d0
    4f72:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   add.l 80(sp),d0
    4f76:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d1,-(sp)
    4f78:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   pea 1 <_start+0x1>
    4f7c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   move.l d0,-(sp)
    4f7e:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   jsr 14b52 <setVariable>
    4f84:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |           |   lea 12(sp),sp
						break;
    4f88:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  +-----------|-- bra.s 4f9e <continueFunction+0xe52>
						default:
						break;
					}
				}
			} else {
				KPrintF((ERROR_NOSTACK));
    4f8a:	|  |  |  |  |  |  |  |  |  |  |  |  |  |  \--|-----------|-> pea 182ac <PutChar+0xb7a>
    4f90:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   jsr 16c5e <KPrintF>
    4f96:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   addq.l #4,sp
				return FALSE;
    4f98:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           |   clr.w d0
    4f9a:	|  +--|--|--|--|--|--|--|--|--|--|--|--|-----|-----------|-- bra.s 4ff6 <continueFunction+0xeaa>
						break;
    4f9c:	|  |  |  |  |  |  |  |  |  |  |  |  |  |     |           \-> nop
			}
			break;
    4f9e:	|  |  |  |  +--|--|--|--|--|--|--|--|--|-----\-------------X bra.s 4fd4 <continueFunction+0xe88>

			default:
			KPrintF((ERROR_UNKNOWN_CODE));
    4fa0:	|  |  |  \--|--|--|--|--|--|--|--|--|--|-------------------> pea 182c4 <PutChar+0xb92>
    4fa6:	|  |  |     |  |  |  |  |  |  |  |  |  |                     jsr 16c5e <KPrintF>
    4fac:	|  |  |     |  |  |  |  |  |  |  |  |  |                     addq.l #4,sp
			return FALSE;
    4fae:	|  |  |     |  |  |  |  |  |  |  |  |  |                     clr.w d0
    4fb0:	|  +--|-----|--|--|--|--|--|--|--|--|--|-------------------- bra.s 4ff6 <continueFunction+0xeaa>
			break;
    4fb2:	|  |  |     |  \--|--|--|--|--|--|--|--|-------------------> nop
    4fb4:	|  |  |     +-----|--|--|--|--|--|--|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fb6:	|  |  |     |     \--|--|--|--|--|--|--|-------------------> nop
    4fb8:	|  |  |     +--------|--|--|--|--|--|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fba:	|  |  |     |        \--|--|--|--|--|--|-------------------> nop
    4fbc:	|  |  |     +-----------|--|--|--|--|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fbe:	|  |  |     |           \--|--|--|--|--|-------------------> nop
    4fc0:	|  |  |     +--------------|--|--|--|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fc2:	|  |  |     |              \--|--|--|--|-------------------> nop
    4fc4:	|  |  |     +-----------------|--|--|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fc6:	|  |  |     |                 \--|--|--|-------------------> nop
    4fc8:	|  |  |     +--------------------|--|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fca:	|  |  |     |                    \--|--|-------------------> nop
    4fcc:	|  |  |     +-----------------------|--|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fce:	|  |  |     |                       \--|-------------------> nop
    4fd0:	|  |  |     +--------------------------|-------------------- bra.s 4fd4 <continueFunction+0xe88>
			break;
    4fd2:	|  |  |     |                          \-------------------> nop
		}

		if (advanceNow) fun -> runThisLine ++;
    4fd4:	|  |  |     \----------------------------------------------> tst.w 72(sp)
    4fd8:	+--|--|----------------------------------------------------- beq.s 4fec <continueFunction+0xea0>
    4fda:	|  |  |                                                      movea.l 80(sp),a0
    4fde:	|  |  |                                                      move.l 36(a0),d0
    4fe2:	|  |  |                                                      addq.l #1,d0
    4fe4:	|  |  |                                                      movea.l 80(sp),a0
    4fe8:	|  |  |                                                      move.l d0,36(a0)
	while (keepLooping) {
    4fec:	\--|--|----------------------------------------------------> tst.w 74(sp)
    4ff0:	   |  \----------------------------------------------------- bne.w 4174 <continueFunction+0x28>

	}
	return TRUE;
    4ff4:	   |                                                         moveq #1,d0
}
    4ff6:	   \-------------------------------------------------------> lea 76(sp),sp
    4ffa:	                                                             rts

00004ffc <finishFunction>:

void finishFunction (struct loadedFunction * fun) {
    4ffc:	          lea -16(sp),sp
    5000:	          move.l a6,-(sp)
	int a;

	pauseFunction (fun);
    5002:	          move.l 24(sp),-(sp)
    5006:	          jsr 6122 <pauseFunction>
    500c:	          addq.l #4,sp
	if (fun -> stack) 
    500e:	          movea.l 24(sp),a0
    5012:	          move.l 24(a0),d0
    5016:	      /-- beq.s 502a <finishFunction+0x2e>
	{
		KPrintF("finishfunction: error non empty stack");
    5018:	      |   pea 182f0 <PutChar+0xbbe>
    501e:	      |   jsr 16c5e <KPrintF>
    5024:	      |   addq.l #4,sp
		return;
    5026:	/-----|-- bra.w 50c4 <finishFunction+0xc8>
	}
	FreeVec( fun -> compiledLines);
    502a:	|     \-> movea.l 24(sp),a0
    502e:	|         move.l 4(a0),12(sp)
    5034:	|         move.l 1a7a4 <SysBase>,d0
    503a:	|         movea.l d0,a6
    503c:	|         movea.l 12(sp),a1
    5040:	|         jsr -690(a6)
	for (a = 0; a < fun -> numLocals; a ++) unlinkVar (&(fun -> localVars[a]));
    5044:	|         clr.l 16(sp)
    5048:	|     /-- bra.s 5068 <finishFunction+0x6c>
    504a:	|  /--|-> movea.l 24(sp),a0
    504e:	|  |  |   move.l 20(a0),d1
    5052:	|  |  |   move.l 16(sp),d0
    5056:	|  |  |   lsl.l #3,d0
    5058:	|  |  |   add.l d1,d0
    505a:	|  |  |   move.l d0,-(sp)
    505c:	|  |  |   jsr 144ae <unlinkVar>
    5062:	|  |  |   addq.l #4,sp
    5064:	|  |  |   addq.l #1,16(sp)
    5068:	|  |  \-> movea.l 24(sp),a0
    506c:	|  |      move.l 8(a0),d0
    5070:	|  |      cmp.l 16(sp),d0
    5074:	|  \----- bgt.s 504a <finishFunction+0x4e>
	if( fun->numLocals > 0) {
    5076:	|         movea.l 24(sp),a0
    507a:	|         move.l 8(a0),d0
    507e:	|     /-- ble.s 509a <finishFunction+0x9e>
		FreeVec(fun -> localVars);
    5080:	|     |   movea.l 24(sp),a0
    5084:	|     |   move.l 20(a0),8(sp)
    508a:	|     |   move.l 1a7a4 <SysBase>,d0
    5090:	|     |   movea.l d0,a6
    5092:	|     |   movea.l 8(sp),a1
    5096:	|     |   jsr -690(a6)
	}
	unlinkVar (&fun -> reg);
    509a:	|     \-> moveq #28,d0
    509c:	|         add.l 24(sp),d0
    50a0:	|         move.l d0,-(sp)
    50a2:	|         jsr 144ae <unlinkVar>
    50a8:	|         addq.l #4,sp
	FreeVec(fun);
    50aa:	|         move.l 24(sp),4(sp)
    50b0:	|         move.l 1a7a4 <SysBase>,d0
    50b6:	|         movea.l d0,a6
    50b8:	|         movea.l 4(sp),a1
    50bc:	|         jsr -690(a6)
	fun = NULL;
    50c0:	|         clr.l 24(sp)
}
    50c4:	\-------> movea.l (sp)+,a6
    50c6:	          lea 16(sp),sp
    50ca:	          rts

000050cc <freezeSubs>:

void freezeSubs () {
    50cc:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    50ce:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    50d4:	   /----- bra.s 50f2 <freezeSubs+0x26>
		if (thisFunction -> unfreezable) {
    50d6:	/--|----> movea.l (sp),a0
    50d8:	|  |      move.w 52(a0),d0
    50dc:	|  |  /-- bne.s 50ec <freezeSubs+0x20>
			//msgBox ("SLUDGE debugging bollocks!", "Trying to freeze an unfreezable function!");
		} else {
			thisFunction -> freezerLevel ++;
    50de:	|  |  |   movea.l (sp),a0
    50e0:	|  |  |   move.b 56(a0),d0
    50e4:	|  |  |   addq.b #1,d0
    50e6:	|  |  |   movea.l (sp),a0
    50e8:	|  |  |   move.b d0,56(a0)
		}
		thisFunction = thisFunction -> next;
    50ec:	|  |  \-> movea.l (sp),a0
    50ee:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    50f2:	|  \----> tst.l (sp)
    50f4:	\-------- bne.s 50d6 <freezeSubs+0xa>
	}
}
    50f6:	          nop
    50f8:	          nop
    50fa:	          addq.l #4,sp
    50fc:	          rts

000050fe <handleInput>:

BOOL handleInput () {
    50fe:	             lea -16(sp),sp
    5102:	             move.l a6,-(sp)
	//Amiga Todo: import more from orig code and adjust 

	if (! overRegion) getOverRegion ();
    5104:	             move.l 1a90c <overRegion>,d0
    510a:	         /-- bne.s 5112 <handleInput+0x14>
    510c:	         |   jsr 153fa <getOverRegion>

	if (input.justMoved) {
    5112:	         \-> move.w 1a75a <input+0x4>,d0
    5118:	         /-- beq.s 5156 <handleInput+0x58>
		if (currentEvents -> moveMouseFunction) {
    511a:	         |   movea.l 1a11c <currentEvents>,a0
    5120:	         |   move.l 16(a0),d0
    5124:	         +-- beq.s 5156 <handleInput+0x58>
			if (! startNewFunctionNum (currentEvents -> moveMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5126:	         |   move.l 1a774 <noStack>,d1
    512c:	         |   movea.l 1a11c <currentEvents>,a0
    5132:	         |   move.l 16(a0),d0
    5136:	         |   pea 1 <_start+0x1>
    513a:	         |   move.l d1,-(sp)
    513c:	         |   clr.l -(sp)
    513e:	         |   clr.l -(sp)
    5140:	         |   move.l d0,-(sp)
    5142:	         |   jsr 63b0 <startNewFunctionNum>
    5148:	         |   lea 20(sp),sp
    514c:	         |   tst.l d0
    514e:	         +-- bne.s 5156 <handleInput+0x58>
    5150:	         |   clr.w d0
    5152:	/--------|-- bra.w 535c <handleInput+0x25e>
		}
	}
	input.justMoved = FALSE;
    5156:	|        \-> clr.w 1a75a <input+0x4>

	if (lastRegion != overRegion && currentEvents -> focusFunction) {
    515c:	|            move.l 1a76c <lastRegion>,d1
    5162:	|            move.l 1a90c <overRegion>,d0
    5168:	|            cmp.l d1,d0
    516a:	|  /-------- beq.w 5242 <handleInput+0x144>
    516e:	|  |         movea.l 1a11c <currentEvents>,a0
    5174:	|  |         move.l 20(a0),d0
    5178:	|  +-------- beq.w 5242 <handleInput+0x144>
		struct variableStack * tempStack = AllocVec( sizeof(struct variableStack), MEMF_ANY);
    517c:	|  |         moveq #12,d0
    517e:	|  |         move.l d0,16(sp)
    5182:	|  |         clr.l 12(sp)
    5186:	|  |         move.l 1a7a4 <SysBase>,d0
    518c:	|  |         movea.l d0,a6
    518e:	|  |         move.l 16(sp),d0
    5192:	|  |         move.l 12(sp),d1
    5196:	|  |         jsr -684(a6)
    519a:	|  |         move.l d0,8(sp)
    519e:	|  |         move.l 8(sp),d0
    51a2:	|  |         move.l d0,4(sp)
		if(!tempStack) {
    51a6:	|  |         move.l 4(sp),d0
    51aa:	|  |     /-- bne.s 51c0 <handleInput+0xc2>
			KPrintF("handleInput: Cannot allocate memory for variablestack");
    51ac:	|  |     |   pea 18316 <PutChar+0xbe4>
    51b2:	|  |     |   jsr 16c5e <KPrintF>
    51b8:	|  |     |   addq.l #4,sp
			return FALSE;
    51ba:	|  |     |   clr.w d0
    51bc:	+--|-----|-- bra.w 535c <handleInput+0x25e>
		}
		
		initVarNew (tempStack -> thisVar);
    51c0:	|  |     \-> movea.l 4(sp),a0
    51c4:	|  |         clr.l (a0)
		if (overRegion) {
    51c6:	|  |         move.l 1a90c <overRegion>,d0
    51cc:	|  |  /----- beq.s 51f4 <handleInput+0xf6>
			setVariable (&tempStack -> thisVar, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
    51ce:	|  |  |      movea.l 1a90c <overRegion>,a0
    51d4:	|  |  |      movea.l 28(a0),a0
    51d8:	|  |  |      move.l 4(a0),d1
    51dc:	|  |  |      move.l 4(sp),d0
    51e0:	|  |  |      move.l d1,-(sp)
    51e2:	|  |  |      pea 7 <_start+0x7>
    51e6:	|  |  |      move.l d0,-(sp)
    51e8:	|  |  |      jsr 14b52 <setVariable>
    51ee:	|  |  |      lea 12(sp),sp
    51f2:	|  |  |  /-- bra.s 520a <handleInput+0x10c>
		} else {
			setVariable (&tempStack -> thisVar, SVT_INT, 0);
    51f4:	|  |  \--|-> move.l 4(sp),d0
    51f8:	|  |     |   clr.l -(sp)
    51fa:	|  |     |   pea 1 <_start+0x1>
    51fe:	|  |     |   move.l d0,-(sp)
    5200:	|  |     |   jsr 14b52 <setVariable>
    5206:	|  |     |   lea 12(sp),sp
		}
		tempStack -> next = NULL;
    520a:	|  |     \-> movea.l 4(sp),a0
    520e:	|  |         clr.l 8(a0)
		if (! startNewFunctionNum (currentEvents -> focusFunction, 1, NULL, &tempStack, TRUE)) return FALSE;
    5212:	|  |         movea.l 1a11c <currentEvents>,a0
    5218:	|  |         move.l 20(a0),d0
    521c:	|  |         pea 1 <_start+0x1>
    5220:	|  |         lea 8(sp),a0
    5224:	|  |         move.l a0,-(sp)
    5226:	|  |         clr.l -(sp)
    5228:	|  |         pea 1 <_start+0x1>
    522c:	|  |         move.l d0,-(sp)
    522e:	|  |         jsr 63b0 <startNewFunctionNum>
    5234:	|  |         lea 20(sp),sp
    5238:	|  |         tst.l d0
    523a:	|  +-------- bne.s 5242 <handleInput+0x144>
    523c:	|  |         clr.w d0
    523e:	+--|-------- bra.w 535c <handleInput+0x25e>
	}
	if (input.leftRelease && currentEvents -> leftMouseUpFunction)  {
    5242:	|  \-------> move.w 1a75c <input+0x6>,d0
    5248:	|        /-- beq.s 5286 <handleInput+0x188>
    524a:	|        |   movea.l 1a11c <currentEvents>,a0
    5250:	|        |   move.l 4(a0),d0
    5254:	|        +-- beq.s 5286 <handleInput+0x188>
		if (! startNewFunctionNum (currentEvents -> leftMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    5256:	|        |   move.l 1a774 <noStack>,d1
    525c:	|        |   movea.l 1a11c <currentEvents>,a0
    5262:	|        |   move.l 4(a0),d0
    5266:	|        |   pea 1 <_start+0x1>
    526a:	|        |   move.l d1,-(sp)
    526c:	|        |   clr.l -(sp)
    526e:	|        |   clr.l -(sp)
    5270:	|        |   move.l d0,-(sp)
    5272:	|        |   jsr 63b0 <startNewFunctionNum>
    5278:	|        |   lea 20(sp),sp
    527c:	|        |   tst.l d0
    527e:	|        +-- bne.s 5286 <handleInput+0x188>
    5280:	|        |   clr.w d0
    5282:	+--------|-- bra.w 535c <handleInput+0x25e>
	}
	if (input.rightRelease && currentEvents -> rightMouseUpFunction) {
    5286:	|        \-> move.w 1a75e <input+0x8>,d0
    528c:	|        /-- beq.s 52ca <handleInput+0x1cc>
    528e:	|        |   movea.l 1a11c <currentEvents>,a0
    5294:	|        |   move.l 12(a0),d0
    5298:	|        +-- beq.s 52ca <handleInput+0x1cc>
		if (! startNewFunctionNum (currentEvents -> rightMouseUpFunction, 0, NULL, noStack, TRUE)) return FALSE;
    529a:	|        |   move.l 1a774 <noStack>,d1
    52a0:	|        |   movea.l 1a11c <currentEvents>,a0
    52a6:	|        |   move.l 12(a0),d0
    52aa:	|        |   pea 1 <_start+0x1>
    52ae:	|        |   move.l d1,-(sp)
    52b0:	|        |   clr.l -(sp)
    52b2:	|        |   clr.l -(sp)
    52b4:	|        |   move.l d0,-(sp)
    52b6:	|        |   jsr 63b0 <startNewFunctionNum>
    52bc:	|        |   lea 20(sp),sp
    52c0:	|        |   tst.l d0
    52c2:	|        +-- bne.s 52ca <handleInput+0x1cc>
    52c4:	|        |   clr.w d0
    52c6:	+--------|-- bra.w 535c <handleInput+0x25e>
	}
	if (input.leftClick && currentEvents -> leftMouseFunction)
    52ca:	|        \-> move.w 1a756 <input>,d0
    52d0:	|        /-- beq.s 5308 <handleInput+0x20a>
    52d2:	|        |   movea.l 1a11c <currentEvents>,a0
    52d8:	|        |   move.l (a0),d0
    52da:	|        +-- beq.s 5308 <handleInput+0x20a>
		if (! startNewFunctionNum (currentEvents -> leftMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    52dc:	|        |   move.l 1a774 <noStack>,d1
    52e2:	|        |   movea.l 1a11c <currentEvents>,a0
    52e8:	|        |   move.l (a0),d0
    52ea:	|        |   pea 1 <_start+0x1>
    52ee:	|        |   move.l d1,-(sp)
    52f0:	|        |   clr.l -(sp)
    52f2:	|        |   clr.l -(sp)
    52f4:	|        |   move.l d0,-(sp)
    52f6:	|        |   jsr 63b0 <startNewFunctionNum>
    52fc:	|        |   lea 20(sp),sp
    5300:	|        |   tst.l d0
    5302:	|        +-- bne.s 5308 <handleInput+0x20a>
    5304:	|        |   clr.w d0
    5306:	+--------|-- bra.s 535c <handleInput+0x25e>
	if (input.rightClick && currentEvents -> rightMouseFunction) {
    5308:	|        \-> move.w 1a758 <input+0x2>,d0
    530e:	|        /-- beq.s 534a <handleInput+0x24c>
    5310:	|        |   movea.l 1a11c <currentEvents>,a0
    5316:	|        |   move.l 8(a0),d0
    531a:	|        +-- beq.s 534a <handleInput+0x24c>
		if (! startNewFunctionNum (currentEvents -> rightMouseFunction, 0, NULL, noStack, TRUE)) return FALSE;
    531c:	|        |   move.l 1a774 <noStack>,d1
    5322:	|        |   movea.l 1a11c <currentEvents>,a0
    5328:	|        |   move.l 8(a0),d0
    532c:	|        |   pea 1 <_start+0x1>
    5330:	|        |   move.l d1,-(sp)
    5332:	|        |   clr.l -(sp)
    5334:	|        |   clr.l -(sp)
    5336:	|        |   move.l d0,-(sp)
    5338:	|        |   jsr 63b0 <startNewFunctionNum>
    533e:	|        |   lea 20(sp),sp
    5342:	|        |   tst.l d0
    5344:	|        +-- bne.s 534a <handleInput+0x24c>
    5346:	|        |   clr.w d0
    5348:	+--------|-- bra.s 535c <handleInput+0x25e>
	}

	lastRegion = overRegion;
    534a:	|        \-> move.l 1a90c <overRegion>,d0
    5350:	|            move.l d0,1a76c <lastRegion>
	return runSludge ();
    5356:	|            jsr 617e <runSludge>
}
    535c:	\----------> movea.l (sp)+,a6
    535e:	             lea 16(sp),sp
    5362:	             rts

00005364 <initSludge>:

BOOL initSludge (char * filename) {
    5364:	             lea -292(sp),sp
    5368:	             movem.l d2-d4/a2/a6,-(sp)
	int a = 0;
    536c:	             clr.l 308(sp)
	mouseCursorAnim = makeNullAnim ();
    5370:	             jsr a7d6 <makeNullAnim>
    5376:	             move.l d0,1a6aa <mouseCursorAnim>

	//Amiga: Attention. This was changed to a Nonpointer Type
	BPTR fp = openAndVerify (filename, 'G', 'E', ERROR_BAD_HEADER, &gameVersion);
    537c:	             pea 1a74e <gameVersion>
    5382:	             pea 1834c <PutChar+0xc1a>
    5388:	             pea 45 <_start+0x45>
    538c:	             pea 47 <_start+0x47>
    5390:	             move.l 332(sp),-(sp)
    5394:	             jsr 5db2 <openAndVerify>
    539a:	             lea 20(sp),sp
    539e:	             move.l d0,288(sp)
	if (! fp) return FALSE;
    53a2:	         /-- bne.s 53aa <initSludge+0x46>
    53a4:	         |   clr.w d0
    53a6:	/--------|-- bra.w 5ad2 <initSludge+0x76e>
	if (FGetC (fp)) {
    53aa:	|        \-> move.l 288(sp),284(sp)
    53b0:	|            move.l 1a7ac <DOSBase>,d0
    53b6:	|            movea.l d0,a6
    53b8:	|            move.l 284(sp),d1
    53bc:	|            jsr -306(a6)
    53c0:	|            move.l d0,280(sp)
    53c4:	|            move.l 280(sp),d0
    53c8:	|  /-------- beq.w 5572 <initSludge+0x20e>
		numBIFNames = get2bytes (fp);
    53cc:	|  |         move.l 288(sp),-(sp)
    53d0:	|  |         jsr 6bc <get2bytes>
    53d6:	|  |         addq.l #4,sp
    53d8:	|  |         move.l d0,1a778 <numBIFNames>
		allBIFNames = AllocVec(numBIFNames,MEMF_ANY);
    53de:	|  |         move.l 1a778 <numBIFNames>,d0
    53e4:	|  |         move.l d0,276(sp)
    53e8:	|  |         clr.l 272(sp)
    53ec:	|  |         move.l 1a7a4 <SysBase>,d0
    53f2:	|  |         movea.l d0,a6
    53f4:	|  |         move.l 276(sp),d0
    53f8:	|  |         move.l 272(sp),d1
    53fc:	|  |         jsr -684(a6)
    5400:	|  |         move.l d0,268(sp)
    5404:	|  |         move.l 268(sp),d0
    5408:	|  |         move.l d0,1a734 <allBIFNames>
		if(allBIFNames == 0) return FALSE;
    540e:	|  |         move.l 1a734 <allBIFNames>,d0
    5414:	|  |     /-- bne.s 541c <initSludge+0xb8>
    5416:	|  |     |   clr.w d0
    5418:	+--|-----|-- bra.w 5ad2 <initSludge+0x76e>
		for (int fn = 0; fn < numBIFNames; fn ++) {
    541c:	|  |     \-> clr.l 304(sp)
    5420:	|  |     /-- bra.s 5446 <initSludge+0xe2>
			allBIFNames[fn] = (char *) readString (fp);
    5422:	|  |  /--|-> move.l 1a734 <allBIFNames>,d1
    5428:	|  |  |  |   move.l 304(sp),d0
    542c:	|  |  |  |   add.l d0,d0
    542e:	|  |  |  |   add.l d0,d0
    5430:	|  |  |  |   movea.l d1,a2
    5432:	|  |  |  |   adda.l d0,a2
    5434:	|  |  |  |   move.l 288(sp),-(sp)
    5438:	|  |  |  |   jsr b02 <readString>
    543e:	|  |  |  |   addq.l #4,sp
    5440:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numBIFNames; fn ++) {
    5442:	|  |  |  |   addq.l #1,304(sp)
    5446:	|  |  |  \-> move.l 1a778 <numBIFNames>,d0
    544c:	|  |  |      cmp.l 304(sp),d0
    5450:	|  |  \----- bgt.s 5422 <initSludge+0xbe>
		}
		numUserFunc = get2bytes (fp);
    5452:	|  |         move.l 288(sp),-(sp)
    5456:	|  |         jsr 6bc <get2bytes>
    545c:	|  |         addq.l #4,sp
    545e:	|  |         move.l d0,1a784 <numUserFunc>
		allUserFunc = AllocVec(numUserFunc,MEMF_ANY);
    5464:	|  |         move.l 1a784 <numUserFunc>,d0
    546a:	|  |         move.l d0,264(sp)
    546e:	|  |         clr.l 260(sp)
    5472:	|  |         move.l 1a7a4 <SysBase>,d0
    5478:	|  |         movea.l d0,a6
    547a:	|  |         move.l 264(sp),d0
    547e:	|  |         move.l 260(sp),d1
    5482:	|  |         jsr -684(a6)
    5486:	|  |         move.l d0,256(sp)
    548a:	|  |         move.l 256(sp),d0
    548e:	|  |         move.l d0,1a740 <allUserFunc>
		if( allUserFunc == 0) return FALSE;
    5494:	|  |         move.l 1a740 <allUserFunc>,d0
    549a:	|  |     /-- bne.s 54a2 <initSludge+0x13e>
    549c:	|  |     |   clr.w d0
    549e:	+--|-----|-- bra.w 5ad2 <initSludge+0x76e>

		for (int fn = 0; fn < numUserFunc; fn ++) {
    54a2:	|  |     \-> clr.l 300(sp)
    54a6:	|  |     /-- bra.s 54cc <initSludge+0x168>
			allUserFunc[fn] =   (char *) readString (fp);
    54a8:	|  |  /--|-> move.l 1a740 <allUserFunc>,d1
    54ae:	|  |  |  |   move.l 300(sp),d0
    54b2:	|  |  |  |   add.l d0,d0
    54b4:	|  |  |  |   add.l d0,d0
    54b6:	|  |  |  |   movea.l d1,a2
    54b8:	|  |  |  |   adda.l d0,a2
    54ba:	|  |  |  |   move.l 288(sp),-(sp)
    54be:	|  |  |  |   jsr b02 <readString>
    54c4:	|  |  |  |   addq.l #4,sp
    54c6:	|  |  |  |   move.l d0,(a2)
		for (int fn = 0; fn < numUserFunc; fn ++) {
    54c8:	|  |  |  |   addq.l #1,300(sp)
    54cc:	|  |  |  \-> move.l 1a784 <numUserFunc>,d0
    54d2:	|  |  |      cmp.l 300(sp),d0
    54d6:	|  |  \----- bgt.s 54a8 <initSludge+0x144>
		}
		if (gameVersion >= VERSION(1,3)) {
    54d8:	|  |         move.l 1a74e <gameVersion>,d0
    54de:	|  |         cmpi.l #258,d0
    54e4:	|  +-------- ble.w 5572 <initSludge+0x20e>
			numResourceNames = get2bytes (fp);
    54e8:	|  |         move.l 288(sp),-(sp)
    54ec:	|  |         jsr 6bc <get2bytes>
    54f2:	|  |         addq.l #4,sp
    54f4:	|  |         move.l d0,1a780 <numResourceNames>
			allResourceNames = AllocVec(sizeof(char *) * numResourceNames,MEMF_ANY);
    54fa:	|  |         move.l 1a780 <numResourceNames>,d0
    5500:	|  |         add.l d0,d0
    5502:	|  |         add.l d0,d0
    5504:	|  |         move.l d0,252(sp)
    5508:	|  |         clr.l 248(sp)
    550c:	|  |         move.l 1a7a4 <SysBase>,d0
    5512:	|  |         movea.l d0,a6
    5514:	|  |         move.l 252(sp),d0
    5518:	|  |         move.l 248(sp),d1
    551c:	|  |         jsr -684(a6)
    5520:	|  |         move.l d0,244(sp)
    5524:	|  |         move.l 244(sp),d0
    5528:	|  |         move.l d0,1a738 <allResourceNames>
			if(allResourceNames == 0) return FALSE;
    552e:	|  |         move.l 1a738 <allResourceNames>,d0
    5534:	|  |     /-- bne.s 553c <initSludge+0x1d8>
    5536:	|  |     |   clr.w d0
    5538:	+--|-----|-- bra.w 5ad2 <initSludge+0x76e>

			for (int fn = 0; fn < numResourceNames; fn ++) {
    553c:	|  |     \-> clr.l 296(sp)
    5540:	|  |     /-- bra.s 5566 <initSludge+0x202>
				allResourceNames[fn] =  (char *) readString (fp);
    5542:	|  |  /--|-> move.l 1a738 <allResourceNames>,d1
    5548:	|  |  |  |   move.l 296(sp),d0
    554c:	|  |  |  |   add.l d0,d0
    554e:	|  |  |  |   add.l d0,d0
    5550:	|  |  |  |   movea.l d1,a2
    5552:	|  |  |  |   adda.l d0,a2
    5554:	|  |  |  |   move.l 288(sp),-(sp)
    5558:	|  |  |  |   jsr b02 <readString>
    555e:	|  |  |  |   addq.l #4,sp
    5560:	|  |  |  |   move.l d0,(a2)
			for (int fn = 0; fn < numResourceNames; fn ++) {
    5562:	|  |  |  |   addq.l #1,296(sp)
    5566:	|  |  |  \-> move.l 1a780 <numResourceNames>,d0
    556c:	|  |  |      cmp.l 296(sp),d0
    5570:	|  |  \----- bgt.s 5542 <initSludge+0x1de>
			}
		}
	}

	input.mouseX = 129;
    5572:	|  \-------> move.l #129,1a760 <input+0xa>
	input.mouseY = 100;
    557c:	|            moveq #100,d0
    557e:	|            move.l d0,1a764 <input+0xe>
	winWidth = get2bytes (fp);
    5584:	|            move.l 288(sp),-(sp)
    5588:	|            jsr 6bc <get2bytes>
    558e:	|            addq.l #4,sp
    5590:	|            move.l d0,1a6f8 <winWidth>
	winHeight = get2bytes (fp);
    5596:	|            move.l 288(sp),-(sp)
    559a:	|            jsr 6bc <get2bytes>
    55a0:	|            addq.l #4,sp
    55a2:	|            move.l d0,1a6fc <winHeight>
	specialSettings = FGetC (fp);
    55a8:	|            move.l 288(sp),240(sp)
    55ae:	|            move.l 1a7ac <DOSBase>,d0
    55b4:	|            movea.l d0,a6
    55b6:	|            move.l 240(sp),d1
    55ba:	|            jsr -306(a6)
    55be:	|            move.l d0,236(sp)
    55c2:	|            move.l 236(sp),d0
    55c6:	|            move.l d0,1a788 <specialSettings>

	desiredfps = 1000/FGetC (fp);
    55cc:	|            move.l 288(sp),232(sp)
    55d2:	|            move.l 1a7ac <DOSBase>,d0
    55d8:	|            movea.l d0,a6
    55da:	|            move.l 232(sp),d1
    55de:	|            jsr -306(a6)
    55e2:	|            move.l d0,228(sp)
    55e6:	|            move.l 228(sp),d0
    55ea:	|            move.l d0,-(sp)
    55ec:	|            pea 3e8 <encodeFilename+0xea>
    55f0:	|            jsr 1769a <__divsi3>
    55f6:	|            addq.l #8,sp
    55f8:	|            move.l d0,1a132 <desiredfps>

	readString(fp); //Need to keep reading to stay on track. But the comented line below looks wrong.
    55fe:	|            move.l 288(sp),-(sp)
    5602:	|            jsr b02 <readString>
    5608:	|            addq.l #4,sp
	//FreeVec(readString (fp));

	ULONG blocks_read = FRead( fp, &fileTime, sizeof (FILETIME), 1 ); 
    560a:	|            move.l 288(sp),224(sp)
    5610:	|            move.l #108358,220(sp)
    5618:	|            moveq #8,d1
    561a:	|            move.l d1,216(sp)
    561e:	|            moveq #1,d0
    5620:	|            move.l d0,212(sp)
    5624:	|            move.l 1a7ac <DOSBase>,d0
    562a:	|            movea.l d0,a6
    562c:	|            move.l 224(sp),d1
    5630:	|            move.l 220(sp),d2
    5634:	|            move.l 216(sp),d3
    5638:	|            move.l 212(sp),d4
    563c:	|            jsr -324(a6)
    5640:	|            move.l d0,208(sp)
    5644:	|            move.l 208(sp),d0
    5648:	|            move.l d0,204(sp)
	if (blocks_read != 1) {
    564c:	|            moveq #1,d1
    564e:	|            cmp.l 204(sp),d1
    5652:	|        /-- beq.s 5662 <initSludge+0x2fe>
		KPrintF("Reading error in initSludge.\n");
    5654:	|        |   pea 18385 <PutChar+0xc53>
    565a:	|        |   jsr 16c5e <KPrintF>
    5660:	|        |   addq.l #4,sp
	}

	char * dataFol = (gameVersion >= VERSION(1,3)) ? readString(fp) : joinStrings ("", "");
    5662:	|        \-> move.l 1a74e <gameVersion>,d0
    5668:	|            cmpi.l #258,d0
    566e:	|        /-- ble.s 567e <initSludge+0x31a>
    5670:	|        |   move.l 288(sp),-(sp)
    5674:	|        |   jsr b02 <readString>
    567a:	|        |   addq.l #4,sp
    567c:	|     /--|-- bra.s 5692 <initSludge+0x32e>
    567e:	|     |  \-> pea 183a3 <PutChar+0xc71>
    5684:	|     |      pea 183a3 <PutChar+0xc71>
    568a:	|     |      jsr 1378c <joinStrings>
    5690:	|     |      addq.l #8,sp
    5692:	|     \----> move.l d0,200(sp)

	gameSettings.numLanguages = (gameVersion >= VERSION(1,3)) ? (FGetC (fp)) : 0;
    5696:	|            move.l 1a74e <gameVersion>,d0
    569c:	|            cmpi.l #258,d0
    56a2:	|     /----- ble.s 56c4 <initSludge+0x360>
    56a4:	|     |      move.l 288(sp),196(sp)
    56aa:	|     |      move.l 1a7ac <DOSBase>,d0
    56b0:	|     |      movea.l d0,a6
    56b2:	|     |      move.l 196(sp),d1
    56b6:	|     |      jsr -306(a6)
    56ba:	|     |      move.l d0,192(sp)
    56be:	|     |      move.l 192(sp),d0
    56c2:	|     |  /-- bra.s 56c6 <initSludge+0x362>
    56c4:	|     \--|-> moveq #0,d0
    56c6:	|        \-> move.l d0,1a8d8 <gameSettings+0x4>
	makeLanguageTable (fp);
    56cc:	|            move.l 288(sp),-(sp)
    56d0:	|            jsr 13142 <makeLanguageTable>
    56d6:	|            addq.l #4,sp

	if (gameVersion >= VERSION(1,6))
    56d8:	|            move.l 1a74e <gameVersion>,d0
    56de:	|            cmpi.l #261,d0
    56e4:	|        /-- ble.s 5732 <initSludge+0x3ce>
	{
		FGetC(fp);
    56e6:	|        |   move.l 288(sp),188(sp)
    56ec:	|        |   move.l 1a7ac <DOSBase>,d0
    56f2:	|        |   movea.l d0,a6
    56f4:	|        |   move.l 188(sp),d1
    56f8:	|        |   jsr -306(a6)
    56fc:	|        |   move.l d0,184(sp)
		// aaLoad
		FGetC (fp);
    5700:	|        |   move.l 288(sp),180(sp)
    5706:	|        |   move.l 1a7ac <DOSBase>,d0
    570c:	|        |   movea.l d0,a6
    570e:	|        |   move.l 180(sp),d1
    5712:	|        |   jsr -306(a6)
    5716:	|        |   move.l d0,176(sp)
		getFloat (fp);
    571a:	|        |   move.l 288(sp),-(sp)
    571e:	|        |   jsr 7d8 <getFloat>
    5724:	|        |   addq.l #4,sp
		getFloat (fp);
    5726:	|        |   move.l 288(sp),-(sp)
    572a:	|        |   jsr 7d8 <getFloat>
    5730:	|        |   addq.l #4,sp
	}

	char * checker = readString (fp);
    5732:	|        \-> move.l 288(sp),-(sp)
    5736:	|            jsr b02 <readString>
    573c:	|            addq.l #4,sp
    573e:	|            move.l d0,172(sp)

	if (strcmp (checker, "okSoFar")) {
    5742:	|            pea 183a4 <PutChar+0xc72>
    5748:	|            move.l 176(sp),-(sp)
    574c:	|            jsr 1370c <strcmp>
    5752:	|            addq.l #8,sp
    5754:	|            tst.l d0
    5756:	|        /-- beq.s 575e <initSludge+0x3fa>
		return FALSE;
    5758:	|        |   clr.w d0
    575a:	+--------|-- bra.w 5ad2 <initSludge+0x76e>
	}
	FreeVec( checker);
    575e:	|        \-> move.l 172(sp),168(sp)
    5764:	|            move.l 1a7a4 <SysBase>,d0
    576a:	|            movea.l d0,a6
    576c:	|            movea.l 168(sp),a1
    5770:	|            jsr -690(a6)
	checker = NULL;
    5774:	|            clr.l 172(sp)

    unsigned char customIconLogo = FGetC (fp);
    5778:	|            move.l 288(sp),164(sp)
    577e:	|            move.l 1a7ac <DOSBase>,d0
    5784:	|            movea.l d0,a6
    5786:	|            move.l 164(sp),d1
    578a:	|            jsr -306(a6)
    578e:	|            move.l d0,160(sp)
    5792:	|            move.l 160(sp),d0
    5796:	|            move.b d0,159(sp)

	if (customIconLogo & 1) {
    579a:	|            moveq #0,d0
    579c:	|            move.b 159(sp),d0
    57a0:	|            moveq #1,d1
    57a2:	|            and.l d1,d0
    57a4:	|        /-- beq.s 57fc <initSludge+0x498>
		// There is an icon - read it!
		Write(Output(), (APTR)"initsludge:Game Icon not supported on this plattform.\n", 54);
    57a6:	|        |   move.l 1a7ac <DOSBase>,d0
    57ac:	|        |   movea.l d0,a6
    57ae:	|        |   jsr -60(a6)
    57b2:	|        |   move.l d0,38(sp)
    57b6:	|        |   move.l 38(sp),d0
    57ba:	|        |   move.l d0,34(sp)
    57be:	|        |   move.l #99244,30(sp)
    57c6:	|        |   moveq #54,d0
    57c8:	|        |   move.l d0,26(sp)
    57cc:	|        |   move.l 1a7ac <DOSBase>,d0
    57d2:	|        |   movea.l d0,a6
    57d4:	|        |   move.l 34(sp),d1
    57d8:	|        |   move.l 30(sp),d2
    57dc:	|        |   move.l 26(sp),d3
    57e0:	|        |   jsr -48(a6)
    57e4:	|        |   move.l d0,22(sp)
		KPrintF("initsludge: Game Icon not supported on this plattform.\n");
    57e8:	|        |   pea 183e3 <PutChar+0xcb1>
    57ee:	|        |   jsr 16c5e <KPrintF>
    57f4:	|        |   addq.l #4,sp
		return FALSE;
    57f6:	|        |   clr.w d0
    57f8:	+--------|-- bra.w 5ad2 <initSludge+0x76e>
	}

	numGlobals = get2bytes (fp);
    57fc:	|        \-> move.l 288(sp),-(sp)
    5800:	|            jsr 6bc <get2bytes>
    5806:	|            addq.l #4,sp
    5808:	|            move.l d0,1a77c <numGlobals>

	globalVars = AllocVec( sizeof(struct variable) * numGlobals,MEMF_ANY);
    580e:	|            move.l 1a77c <numGlobals>,d0
    5814:	|            lsl.l #3,d0
    5816:	|            move.l d0,154(sp)
    581a:	|            clr.l 150(sp)
    581e:	|            move.l 1a7a4 <SysBase>,d0
    5824:	|            movea.l d0,a6
    5826:	|            move.l 154(sp),d0
    582a:	|            move.l 150(sp),d1
    582e:	|            jsr -684(a6)
    5832:	|            move.l d0,146(sp)
    5836:	|            move.l 146(sp),d0
    583a:	|            move.l d0,1a752 <globalVars>
	if(globalVars == 0 && numGlobals > 0) {
    5840:	|            move.l 1a752 <globalVars>,d0
    5846:	|        /-- bne.s 5864 <initSludge+0x500>
    5848:	|        |   move.l 1a77c <numGlobals>,d0
    584e:	|        +-- ble.s 5864 <initSludge+0x500>
		KPrintF("initsludge: Cannot allocate memory for globalvars\n");
    5850:	|        |   pea 1841b <PutChar+0xce9>
    5856:	|        |   jsr 16c5e <KPrintF>
    585c:	|        |   addq.l #4,sp
		return FALSE;
    585e:	|        |   clr.w d0
    5860:	+--------|-- bra.w 5ad2 <initSludge+0x76e>
	}		 
	for (a = 0; a < numGlobals; a ++) initVarNew (globalVars[a]);
    5864:	|        \-> clr.l 308(sp)
    5868:	|        /-- bra.s 5880 <initSludge+0x51c>
    586a:	|     /--|-> move.l 1a752 <globalVars>,d1
    5870:	|     |  |   move.l 308(sp),d0
    5874:	|     |  |   lsl.l #3,d0
    5876:	|     |  |   movea.l d1,a0
    5878:	|     |  |   adda.l d0,a0
    587a:	|     |  |   clr.l (a0)
    587c:	|     |  |   addq.l #1,308(sp)
    5880:	|     |  \-> move.l 1a77c <numGlobals>,d0
    5886:	|     |      cmp.l 308(sp),d0
    588a:	|     \----- bgt.s 586a <initSludge+0x506>

	setFileIndices (fp, gameSettings.numLanguages, 0);
    588c:	|            move.l 1a8d8 <gameSettings+0x4>,d0
    5892:	|            clr.l -(sp)
    5894:	|            move.l d0,-(sp)
    5896:	|            move.l 296(sp),-(sp)
    589a:	|            jsr 68a0 <setFileIndices>
    58a0:	|            lea 12(sp),sp

	char * gameNameOrig = getNumberedString(1);	
    58a4:	|            pea 1 <_start+0x1>
    58a8:	|            jsr 655a <getNumberedString>
    58ae:	|            addq.l #4,sp
    58b0:	|            move.l d0,142(sp)
	char * gameName = encodeFilename (gameNameOrig);
    58b4:	|            move.l 142(sp),-(sp)
    58b8:	|            jsr 2fe <encodeFilename>
    58be:	|            addq.l #4,sp
    58c0:	|            move.l d0,138(sp)

	FreeVec(gameNameOrig);
    58c4:	|            move.l 142(sp),134(sp)
    58ca:	|            move.l 1a7a4 <SysBase>,d0
    58d0:	|            movea.l d0,a6
    58d2:	|            movea.l 134(sp),a1
    58d6:	|            jsr -690(a6)

	BPTR lock = CreateDir( gameName );
    58da:	|            move.l 138(sp),130(sp)
    58e0:	|            move.l 1a7ac <DOSBase>,d0
    58e6:	|            movea.l d0,a6
    58e8:	|            move.l 130(sp),d1
    58ec:	|            jsr -120(a6)
    58f0:	|            move.l d0,126(sp)
    58f4:	|            move.l 126(sp),d0
    58f8:	|            move.l d0,292(sp)
	if(lock == 0) {
    58fc:	|        /-- bne.s 592a <initSludge+0x5c6>
		//Directory does already exist
		lock = Lock(gameName, ACCESS_READ);
    58fe:	|        |   move.l 138(sp),122(sp)
    5904:	|        |   moveq #-2,d1
    5906:	|        |   move.l d1,118(sp)
    590a:	|        |   move.l 1a7ac <DOSBase>,d0
    5910:	|        |   movea.l d0,a6
    5912:	|        |   move.l 122(sp),d1
    5916:	|        |   move.l 118(sp),d2
    591a:	|        |   jsr -84(a6)
    591e:	|        |   move.l d0,114(sp)
    5922:	|        |   move.l 114(sp),d0
    5926:	|        |   move.l d0,292(sp)
	}

	if (!CurrentDir(lock)) {
    592a:	|        \-> move.l 292(sp),110(sp)
    5930:	|            move.l 1a7ac <DOSBase>,d0
    5936:	|            movea.l d0,a6
    5938:	|            move.l 110(sp),d1
    593c:	|            jsr -126(a6)
    5940:	|            move.l d0,106(sp)
    5944:	|            move.l 106(sp),d0
    5948:	|        /-- bne.s 59a4 <initSludge+0x640>
		KPrintF("initsludge: Failed changing to directory %s\n", gameName);
    594a:	|        |   move.l 138(sp),-(sp)
    594e:	|        |   pea 1844e <PutChar+0xd1c>
    5954:	|        |   jsr 16c5e <KPrintF>
    595a:	|        |   addq.l #8,sp
		Write(Output(), (APTR)"initsludge:Failed changing to directory\n", 40);
    595c:	|        |   move.l 1a7ac <DOSBase>,d0
    5962:	|        |   movea.l d0,a6
    5964:	|        |   jsr -60(a6)
    5968:	|        |   move.l d0,58(sp)
    596c:	|        |   move.l 58(sp),d0
    5970:	|        |   move.l d0,54(sp)
    5974:	|        |   move.l #99451,50(sp)
    597c:	|        |   moveq #40,d0
    597e:	|        |   move.l d0,46(sp)
    5982:	|        |   move.l 1a7ac <DOSBase>,d0
    5988:	|        |   movea.l d0,a6
    598a:	|        |   move.l 54(sp),d1
    598e:	|        |   move.l 50(sp),d2
    5992:	|        |   move.l 46(sp),d3
    5996:	|        |   jsr -48(a6)
    599a:	|        |   move.l d0,42(sp)
		return FALSE;
    599e:	|        |   clr.w d0
    59a0:	+--------|-- bra.w 5ad2 <initSludge+0x76e>
	}

	FreeVec(gameName);
    59a4:	|        \-> move.l 138(sp),102(sp)
    59aa:	|            move.l 1a7a4 <SysBase>,d0
    59b0:	|            movea.l d0,a6
    59b2:	|            movea.l 102(sp),a1
    59b6:	|            jsr -690(a6)

	readIniFile (filename);
    59ba:	|            move.l 316(sp),-(sp)
    59be:	|            jsr 13276 <readIniFile>
    59c4:	|            addq.l #4,sp

	// Now set file indices properly to the chosen language.
	languageNum = getLanguageForFileB ();
    59c6:	|            jsr 13048 <getLanguageForFileB>
    59cc:	|            move.l d0,1a120 <languageNum>
	if (languageNum < 0) KPrintF("Can't find the translation data specified!");
    59d2:	|            move.l 1a120 <languageNum>,d0
    59d8:	|        /-- bpl.s 59e8 <initSludge+0x684>
    59da:	|        |   pea 184a4 <PutChar+0xd72>
    59e0:	|        |   jsr 16c5e <KPrintF>
    59e6:	|        |   addq.l #4,sp
	setFileIndices (NULL, gameSettings.numLanguages, languageNum);
    59e8:	|        \-> move.l 1a120 <languageNum>,d0
    59ee:	|            move.l d0,d1
    59f0:	|            move.l 1a8d8 <gameSettings+0x4>,d0
    59f6:	|            move.l d1,-(sp)
    59f8:	|            move.l d0,-(sp)
    59fa:	|            clr.l -(sp)
    59fc:	|            jsr 68a0 <setFileIndices>
    5a02:	|            lea 12(sp),sp

	if (dataFol[0]) {
    5a06:	|            movea.l 200(sp),a0
    5a0a:	|            move.b (a0),d0
    5a0c:	|     /----- beq.w 5ab6 <initSludge+0x752>
		char *dataFolder = encodeFilename(dataFol);
    5a10:	|     |      move.l 200(sp),-(sp)
    5a14:	|     |      jsr 2fe <encodeFilename>
    5a1a:	|     |      addq.l #4,sp
    5a1c:	|     |      move.l d0,98(sp)
		lock = CreateDir( dataFolder );
    5a20:	|     |      move.l 98(sp),94(sp)
    5a26:	|     |      move.l 1a7ac <DOSBase>,d0
    5a2c:	|     |      movea.l d0,a6
    5a2e:	|     |      move.l 94(sp),d1
    5a32:	|     |      jsr -120(a6)
    5a36:	|     |      move.l d0,90(sp)
    5a3a:	|     |      move.l 90(sp),d0
    5a3e:	|     |      move.l d0,292(sp)
		if(lock == 0) {
    5a42:	|     |  /-- bne.s 5a70 <initSludge+0x70c>
			//Directory does already exist
			lock = Lock(dataFolder, ACCESS_READ);		
    5a44:	|     |  |   move.l 98(sp),86(sp)
    5a4a:	|     |  |   moveq #-2,d1
    5a4c:	|     |  |   move.l d1,82(sp)
    5a50:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5a56:	|     |  |   movea.l d0,a6
    5a58:	|     |  |   move.l 86(sp),d1
    5a5c:	|     |  |   move.l 82(sp),d2
    5a60:	|     |  |   jsr -84(a6)
    5a64:	|     |  |   move.l d0,78(sp)
    5a68:	|     |  |   move.l 78(sp),d0
    5a6c:	|     |  |   move.l d0,292(sp)
		}


		if (!CurrentDir(lock)) {
    5a70:	|     |  \-> move.l 292(sp),74(sp)
    5a76:	|     |      move.l 1a7ac <DOSBase>,d0
    5a7c:	|     |      movea.l d0,a6
    5a7e:	|     |      move.l 74(sp),d1
    5a82:	|     |      jsr -126(a6)
    5a86:	|     |      move.l d0,70(sp)
    5a8a:	|     |      move.l 70(sp),d0
    5a8e:	|     |  /-- bne.s 5aa0 <initSludge+0x73c>
			(Output(), (APTR)"initsludge:This game's data folder is inaccessible!\n", 52);
    5a90:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5a96:	|     |  |   movea.l d0,a6
    5a98:	|     |  |   jsr -60(a6)
    5a9c:	|     |  |   move.l d0,66(sp)
		}
		FreeVec(dataFolder);
    5aa0:	|     |  \-> move.l 98(sp),62(sp)
    5aa6:	|     |      move.l 1a7a4 <SysBase>,d0
    5aac:	|     |      movea.l d0,a6
    5aae:	|     |      movea.l 62(sp),a1
    5ab2:	|     |      jsr -690(a6)
	}

 	positionStatus (10, winHeight - 15);
    5ab6:	|     \----> movea.l 1a6fc <winHeight>,a0
    5abc:	|            lea -15(a0),a0
    5ac0:	|            move.l a0,d0
    5ac2:	|            move.l d0,-(sp)
    5ac4:	|            pea a <_start+0xa>
    5ac8:	|            jsr 72d2 <positionStatus>
    5ace:	|            addq.l #8,sp

	return TRUE;
    5ad0:	|            moveq #1,d0
}
    5ad2:	\----------> movem.l (sp)+,d2-d4/a2/a6
    5ad6:	             lea 292(sp),sp
    5ada:	             rts

00005adc <killSpeechTimers>:

void killSpeechTimers () {
    5adc:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    5ade:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    5ae4:	   /----- bra.s 5b10 <killSpeechTimers+0x34>
		if (thisFunction -> freezerLevel == 0 && thisFunction -> isSpeech && thisFunction -> timeLeft) {
    5ae6:	/--|----> movea.l (sp),a0
    5ae8:	|  |      move.b 56(a0),d0
    5aec:	|  |  /-- bne.s 5b0a <killSpeechTimers+0x2e>
    5aee:	|  |  |   movea.l (sp),a0
    5af0:	|  |  |   move.w 50(a0),d0
    5af4:	|  |  +-- beq.s 5b0a <killSpeechTimers+0x2e>
    5af6:	|  |  |   movea.l (sp),a0
    5af8:	|  |  |   move.l 12(a0),d0
    5afc:	|  |  +-- beq.s 5b0a <killSpeechTimers+0x2e>
			thisFunction -> timeLeft = 0;
    5afe:	|  |  |   movea.l (sp),a0
    5b00:	|  |  |   clr.l 12(a0)
			thisFunction -> isSpeech = FALSE;
    5b04:	|  |  |   movea.l (sp),a0
    5b06:	|  |  |   clr.w 50(a0)
		}
		thisFunction = thisFunction -> next;
    5b0a:	|  |  \-> movea.l (sp),a0
    5b0c:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    5b10:	|  \----> tst.l (sp)
    5b12:	\-------- bne.s 5ae6 <killSpeechTimers+0xa>
	}

	killAllSpeech ();
    5b14:	          jsr 7810 <killAllSpeech>
}
    5b1a:	          nop
    5b1c:	          addq.l #4,sp
    5b1e:	          rts

00005b20 <loadFunctionCode>:

BOOL loadFunctionCode (struct loadedFunction * newFunc) {
    5b20:	             lea -52(sp),sp
    5b24:	             move.l a6,-(sp)
	unsigned int numLines, numLinesRead;
	int a;

	if (! openSubSlice (newFunc -> originalNumber)) return FALSE;
    5b26:	             movea.l 60(sp),a0
    5b2a:	             move.l (a0),d0
    5b2c:	             move.l d0,-(sp)
    5b2e:	             jsr 67e0 <openSubSlice>
    5b34:	             addq.l #4,sp
    5b36:	             tst.w d0
    5b38:	         /-- bne.s 5b40 <loadFunctionCode+0x20>
    5b3a:	         |   clr.w d0
    5b3c:	/--------|-- bra.w 5d0a <loadFunctionCode+0x1ea>
	

	newFunc-> unfreezable	= FGetC (bigDataFile);
    5b40:	|        \-> move.l 1a78c <bigDataFile>,44(sp)
    5b48:	|            move.l 1a7ac <DOSBase>,d0
    5b4e:	|            movea.l d0,a6
    5b50:	|            move.l 44(sp),d1
    5b54:	|            jsr -306(a6)
    5b58:	|            move.l d0,40(sp)
    5b5c:	|            move.l 40(sp),d0
    5b60:	|            move.l d0,d0
    5b62:	|            movea.l 60(sp),a0
    5b66:	|            move.w d0,52(a0)
	numLines				= get2bytes (bigDataFile);
    5b6a:	|            move.l 1a78c <bigDataFile>,d0
    5b70:	|            move.l d0,-(sp)
    5b72:	|            jsr 6bc <get2bytes>
    5b78:	|            addq.l #4,sp
    5b7a:	|            move.l d0,36(sp)
	newFunc -> numArgs		= get2bytes (bigDataFile);
    5b7e:	|            move.l 1a78c <bigDataFile>,d0
    5b84:	|            move.l d0,-(sp)
    5b86:	|            jsr 6bc <get2bytes>
    5b8c:	|            addq.l #4,sp
    5b8e:	|            movea.l 60(sp),a0
    5b92:	|            move.l d0,16(a0)
	newFunc -> numLocals	= get2bytes (bigDataFile);
    5b96:	|            move.l 1a78c <bigDataFile>,d0
    5b9c:	|            move.l d0,-(sp)
    5b9e:	|            jsr 6bc <get2bytes>
    5ba4:	|            addq.l #4,sp
    5ba6:	|            movea.l 60(sp),a0
    5baa:	|            move.l d0,8(a0)
	newFunc -> compiledLines = AllocVec( sizeof(struct lineOfCode) * numLines,MEMF_ANY);
    5bae:	|            move.l 36(sp),d0
    5bb2:	|            lsl.l #3,d0
    5bb4:	|            move.l d0,32(sp)
    5bb8:	|            clr.l 28(sp)
    5bbc:	|            move.l 1a7a4 <SysBase>,d0
    5bc2:	|            movea.l d0,a6
    5bc4:	|            move.l 32(sp),d0
    5bc8:	|            move.l 28(sp),d1
    5bcc:	|            jsr -684(a6)
    5bd0:	|            move.l d0,24(sp)
    5bd4:	|            move.l 24(sp),d0
    5bd8:	|            movea.l 60(sp),a0
    5bdc:	|            move.l d0,4(a0)
	if (! newFunc -> compiledLines) {
    5be0:	|            movea.l 60(sp),a0
    5be4:	|            move.l 4(a0),d0
    5be8:	|        /-- bne.s 5bfe <loadFunctionCode+0xde>
		KPrintF("loadFunctionCode: cannot allocate memory");
    5bea:	|        |   pea 184cf <PutChar+0xd9d>
    5bf0:	|        |   jsr 16c5e <KPrintF>
    5bf6:	|        |   addq.l #4,sp
		return FALSE;
    5bf8:	|        |   clr.w d0
    5bfa:	+--------|-- bra.w 5d0a <loadFunctionCode+0x1ea>
	}

	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    5bfe:	|        \-> clr.l 52(sp)
    5c02:	|        /-- bra.s 5c64 <loadFunctionCode+0x144>
		newFunc -> compiledLines[numLinesRead].theCommand = (enum sludgeCommand) FGetC(bigDataFile);
    5c04:	|     /--|-> move.l 1a78c <bigDataFile>,8(sp)
    5c0c:	|     |  |   move.l 1a7ac <DOSBase>,d0
    5c12:	|     |  |   movea.l d0,a6
    5c14:	|     |  |   move.l 8(sp),d1
    5c18:	|     |  |   jsr -306(a6)
    5c1c:	|     |  |   move.l d0,4(sp)
    5c20:	|     |  |   move.l 4(sp),d1
    5c24:	|     |  |   movea.l 60(sp),a0
    5c28:	|     |  |   movea.l 4(a0),a0
    5c2c:	|     |  |   move.l 52(sp),d0
    5c30:	|     |  |   lsl.l #3,d0
    5c32:	|     |  |   adda.l d0,a0
    5c34:	|     |  |   move.l d1,d0
    5c36:	|     |  |   move.l d0,(a0)
		newFunc -> compiledLines[numLinesRead].param = get2bytes (bigDataFile);
    5c38:	|     |  |   move.l 1a78c <bigDataFile>,d0
    5c3e:	|     |  |   move.l d0,-(sp)
    5c40:	|     |  |   jsr 6bc <get2bytes>
    5c46:	|     |  |   addq.l #4,sp
    5c48:	|     |  |   move.l d0,d1
    5c4a:	|     |  |   movea.l 60(sp),a0
    5c4e:	|     |  |   movea.l 4(a0),a0
    5c52:	|     |  |   move.l 52(sp),d0
    5c56:	|     |  |   lsl.l #3,d0
    5c58:	|     |  |   adda.l d0,a0
    5c5a:	|     |  |   move.l d1,d0
    5c5c:	|     |  |   move.l d0,4(a0)
	for (numLinesRead = 0; numLinesRead < numLines; numLinesRead ++) {
    5c60:	|     |  |   addq.l #1,52(sp)
    5c64:	|     |  \-> move.l 52(sp),d0
    5c68:	|     |      cmp.l 36(sp),d0
    5c6c:	|     \----- bcs.s 5c04 <loadFunctionCode+0xe4>
	}

	finishAccess ();
    5c6e:	|            jsr 6550 <finishAccess>

	// Now we need to reserve memory for the local variables
	if(newFunc->numLocals > 0) {
    5c74:	|            movea.l 60(sp),a0
    5c78:	|            move.l 8(a0),d0
    5c7c:	|  /-------- ble.w 5d00 <loadFunctionCode+0x1e0>
		newFunc -> localVars = AllocVec( sizeof(struct variable) * newFunc->numLocals,MEMF_ANY);
    5c80:	|  |         movea.l 60(sp),a0
    5c84:	|  |         move.l 8(a0),d0
    5c88:	|  |         lsl.l #3,d0
    5c8a:	|  |         move.l d0,20(sp)
    5c8e:	|  |         clr.l 16(sp)
    5c92:	|  |         move.l 1a7a4 <SysBase>,d0
    5c98:	|  |         movea.l d0,a6
    5c9a:	|  |         move.l 20(sp),d0
    5c9e:	|  |         move.l 16(sp),d1
    5ca2:	|  |         jsr -684(a6)
    5ca6:	|  |         move.l d0,12(sp)
    5caa:	|  |         move.l 12(sp),d0
    5cae:	|  |         movea.l 60(sp),a0
    5cb2:	|  |         move.l d0,20(a0)
		if (!newFunc -> localVars) {
    5cb6:	|  |         movea.l 60(sp),a0
    5cba:	|  |         move.l 20(a0),d0
    5cbe:	|  |     /-- bne.s 5cd2 <loadFunctionCode+0x1b2>
			KPrintF("loadFunctionCode: cannot allocate memory");
    5cc0:	|  |     |   pea 184cf <PutChar+0xd9d>
    5cc6:	|  |     |   jsr 16c5e <KPrintF>
    5ccc:	|  |     |   addq.l #4,sp
			return FALSE;
    5cce:	|  |     |   clr.w d0
    5cd0:	+--|-----|-- bra.s 5d0a <loadFunctionCode+0x1ea>
		}

		for (a = 0; a < newFunc -> numLocals; a ++) {
    5cd2:	|  |     \-> clr.l 48(sp)
    5cd6:	|  |     /-- bra.s 5cf0 <loadFunctionCode+0x1d0>
			initVarNew (newFunc -> localVars[a]);
    5cd8:	|  |  /--|-> movea.l 60(sp),a0
    5cdc:	|  |  |  |   move.l 20(a0),d1
    5ce0:	|  |  |  |   move.l 48(sp),d0
    5ce4:	|  |  |  |   lsl.l #3,d0
    5ce6:	|  |  |  |   movea.l d1,a0
    5ce8:	|  |  |  |   adda.l d0,a0
    5cea:	|  |  |  |   clr.l (a0)
		for (a = 0; a < newFunc -> numLocals; a ++) {
    5cec:	|  |  |  |   addq.l #1,48(sp)
    5cf0:	|  |  |  \-> movea.l 60(sp),a0
    5cf4:	|  |  |      move.l 8(a0),d0
    5cf8:	|  |  |      cmp.l 48(sp),d0
    5cfc:	|  |  \----- bgt.s 5cd8 <loadFunctionCode+0x1b8>
    5cfe:	|  |     /-- bra.s 5d08 <loadFunctionCode+0x1e8>
		}
	} else
	{
		newFunc->numLocals = NULL;
    5d00:	|  \-----|-> movea.l 60(sp),a0
    5d04:	|        |   clr.l 8(a0)
	}
	return TRUE;
    5d08:	|        \-> moveq #1,d0
}
    5d0a:	\----------> movea.l (sp)+,a6
    5d0c:	             lea 52(sp),sp
    5d10:	             rts

00005d12 <loadHandlers>:

void loadHandlers (BPTR fp) {
    5d12:	move.l a2,-(sp)
	currentEvents -> leftMouseFunction		= get2bytes (fp);
    5d14:	movea.l 1a11c <currentEvents>,a2
    5d1a:	move.l 8(sp),-(sp)
    5d1e:	jsr 6bc <get2bytes>
    5d24:	addq.l #4,sp
    5d26:	move.l d0,(a2)
	currentEvents -> leftMouseUpFunction	= get2bytes (fp);
    5d28:	movea.l 1a11c <currentEvents>,a2
    5d2e:	move.l 8(sp),-(sp)
    5d32:	jsr 6bc <get2bytes>
    5d38:	addq.l #4,sp
    5d3a:	move.l d0,4(a2)
	currentEvents -> rightMouseFunction		= get2bytes (fp);
    5d3e:	movea.l 1a11c <currentEvents>,a2
    5d44:	move.l 8(sp),-(sp)
    5d48:	jsr 6bc <get2bytes>
    5d4e:	addq.l #4,sp
    5d50:	move.l d0,8(a2)
	currentEvents -> rightMouseUpFunction	= get2bytes (fp);
    5d54:	movea.l 1a11c <currentEvents>,a2
    5d5a:	move.l 8(sp),-(sp)
    5d5e:	jsr 6bc <get2bytes>
    5d64:	addq.l #4,sp
    5d66:	move.l d0,12(a2)
	currentEvents -> moveMouseFunction		= get2bytes (fp);
    5d6a:	movea.l 1a11c <currentEvents>,a2
    5d70:	move.l 8(sp),-(sp)
    5d74:	jsr 6bc <get2bytes>
    5d7a:	addq.l #4,sp
    5d7c:	move.l d0,16(a2)
	currentEvents -> focusFunction			= get2bytes (fp);
    5d80:	movea.l 1a11c <currentEvents>,a2
    5d86:	move.l 8(sp),-(sp)
    5d8a:	jsr 6bc <get2bytes>
    5d90:	addq.l #4,sp
    5d92:	move.l d0,20(a2)
	currentEvents -> spaceFunction			= get2bytes (fp);
    5d96:	movea.l 1a11c <currentEvents>,a2
    5d9c:	move.l 8(sp),-(sp)
    5da0:	jsr 6bc <get2bytes>
    5da6:	addq.l #4,sp
    5da8:	move.l d0,24(a2)
}
    5dac:	nop
    5dae:	movea.l (sp)+,a2
    5db0:	rts

00005db2 <openAndVerify>:

BPTR openAndVerify (char * filename, char extra1, char extra2, const char * er, int *fileVersion) {
    5db2:	       lea -312(sp),sp
    5db6:	       movem.l d2-d3/a6,-(sp)
    5dba:	       move.l 332(sp),d1
    5dbe:	       move.l 336(sp),d0
    5dc2:	       move.b d1,d1
    5dc4:	       move.b d1,16(sp)
    5dc8:	       move.b d0,d0
    5dca:	       move.b d0,14(sp)
	BPTR fp = Open(filename,MODE_OLDFILE);
    5dce:	       move.l 328(sp),318(sp)
    5dd4:	       move.l #1005,314(sp)
    5ddc:	       move.l 1a7ac <DOSBase>,d0
    5de2:	       movea.l d0,a6
    5de4:	       move.l 318(sp),d1
    5de8:	       move.l 314(sp),d2
    5dec:	       jsr -30(a6)
    5df0:	       move.l d0,310(sp)
    5df4:	       move.l 310(sp),d0
    5df8:	       move.l d0,306(sp)

	if (! fp) {
    5dfc:	   /-- bne.s 5e58 <openAndVerify+0xa6>
		Write(Output(), (APTR)"openAndVerify: Can't open file\n", 31);
    5dfe:	   |   move.l 1a7ac <DOSBase>,d0
    5e04:	   |   movea.l d0,a6
    5e06:	   |   jsr -60(a6)
    5e0a:	   |   move.l d0,154(sp)
    5e0e:	   |   move.l 154(sp),d0
    5e12:	   |   move.l d0,150(sp)
    5e16:	   |   move.l #99576,146(sp)
    5e1e:	   |   moveq #31,d0
    5e20:	   |   move.l d0,142(sp)
    5e24:	   |   move.l 1a7ac <DOSBase>,d0
    5e2a:	   |   movea.l d0,a6
    5e2c:	   |   move.l 150(sp),d1
    5e30:	   |   move.l 146(sp),d2
    5e34:	   |   move.l 142(sp),d3
    5e38:	   |   jsr -48(a6)
    5e3c:	   |   move.l d0,138(sp)
		KPrintF("openAndVerify: Can't open file", filename);
    5e40:	   |   move.l 328(sp),-(sp)
    5e44:	   |   pea 18518 <PutChar+0xde6>
    5e4a:	   |   jsr 16c5e <KPrintF>
    5e50:	   |   addq.l #8,sp
		return NULL;
    5e52:	   |   moveq #0,d0
    5e54:	/--|-- bra.w 6118 <openAndVerify+0x366>
	}
	BOOL headerBad = FALSE;
    5e58:	|  \-> clr.w 322(sp)
	if (FGetC (fp) != 'S') headerBad = TRUE;
    5e5c:	|      move.l 306(sp),302(sp)
    5e62:	|      move.l 1a7ac <DOSBase>,d0
    5e68:	|      movea.l d0,a6
    5e6a:	|      move.l 302(sp),d1
    5e6e:	|      jsr -306(a6)
    5e72:	|      move.l d0,298(sp)
    5e76:	|      move.l 298(sp),d0
    5e7a:	|      moveq #83,d1
    5e7c:	|      cmp.l d0,d1
    5e7e:	|  /-- beq.s 5e86 <openAndVerify+0xd4>
    5e80:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'L') headerBad = TRUE;
    5e86:	|  \-> move.l 306(sp),294(sp)
    5e8c:	|      move.l 1a7ac <DOSBase>,d0
    5e92:	|      movea.l d0,a6
    5e94:	|      move.l 294(sp),d1
    5e98:	|      jsr -306(a6)
    5e9c:	|      move.l d0,290(sp)
    5ea0:	|      move.l 290(sp),d0
    5ea4:	|      moveq #76,d1
    5ea6:	|      cmp.l d0,d1
    5ea8:	|  /-- beq.s 5eb0 <openAndVerify+0xfe>
    5eaa:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'U') headerBad = TRUE;
    5eb0:	|  \-> move.l 306(sp),286(sp)
    5eb6:	|      move.l 1a7ac <DOSBase>,d0
    5ebc:	|      movea.l d0,a6
    5ebe:	|      move.l 286(sp),d1
    5ec2:	|      jsr -306(a6)
    5ec6:	|      move.l d0,282(sp)
    5eca:	|      move.l 282(sp),d0
    5ece:	|      moveq #85,d1
    5ed0:	|      cmp.l d0,d1
    5ed2:	|  /-- beq.s 5eda <openAndVerify+0x128>
    5ed4:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != 'D') headerBad = TRUE;
    5eda:	|  \-> move.l 306(sp),278(sp)
    5ee0:	|      move.l 1a7ac <DOSBase>,d0
    5ee6:	|      movea.l d0,a6
    5ee8:	|      move.l 278(sp),d1
    5eec:	|      jsr -306(a6)
    5ef0:	|      move.l d0,274(sp)
    5ef4:	|      move.l 274(sp),d0
    5ef8:	|      moveq #68,d1
    5efa:	|      cmp.l d0,d1
    5efc:	|  /-- beq.s 5f04 <openAndVerify+0x152>
    5efe:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra1) headerBad = TRUE;
    5f04:	|  \-> move.l 306(sp),270(sp)
    5f0a:	|      move.l 1a7ac <DOSBase>,d0
    5f10:	|      movea.l d0,a6
    5f12:	|      move.l 270(sp),d1
    5f16:	|      jsr -306(a6)
    5f1a:	|      move.l d0,266(sp)
    5f1e:	|      move.l 266(sp),d1
    5f22:	|      move.b 16(sp),d0
    5f26:	|      ext.w d0
    5f28:	|      movea.w d0,a0
    5f2a:	|      cmpa.l d1,a0
    5f2c:	|  /-- beq.s 5f34 <openAndVerify+0x182>
    5f2e:	|  |   move.w #1,322(sp)
	if (FGetC (fp) != extra2) headerBad = TRUE;
    5f34:	|  \-> move.l 306(sp),262(sp)
    5f3a:	|      move.l 1a7ac <DOSBase>,d0
    5f40:	|      movea.l d0,a6
    5f42:	|      move.l 262(sp),d1
    5f46:	|      jsr -306(a6)
    5f4a:	|      move.l d0,258(sp)
    5f4e:	|      move.l 258(sp),d1
    5f52:	|      move.b 14(sp),d0
    5f56:	|      ext.w d0
    5f58:	|      movea.w d0,a0
    5f5a:	|      cmpa.l d1,a0
    5f5c:	|  /-- beq.s 5f64 <openAndVerify+0x1b2>
    5f5e:	|  |   move.w #1,322(sp)
	if (headerBad) {
    5f64:	|  \-> tst.w 322(sp)
    5f68:	|  /-- beq.s 5fc0 <openAndVerify+0x20e>
		Write(Output(), (APTR)"openAndVerify: Bad Header\n", 31);
    5f6a:	|  |   move.l 1a7ac <DOSBase>,d0
    5f70:	|  |   movea.l d0,a6
    5f72:	|  |   jsr -60(a6)
    5f76:	|  |   move.l d0,174(sp)
    5f7a:	|  |   move.l 174(sp),d0
    5f7e:	|  |   move.l d0,170(sp)
    5f82:	|  |   move.l #99639,166(sp)
    5f8a:	|  |   moveq #31,d0
    5f8c:	|  |   move.l d0,162(sp)
    5f90:	|  |   move.l 1a7ac <DOSBase>,d0
    5f96:	|  |   movea.l d0,a6
    5f98:	|  |   move.l 170(sp),d1
    5f9c:	|  |   move.l 166(sp),d2
    5fa0:	|  |   move.l 162(sp),d3
    5fa4:	|  |   jsr -48(a6)
    5fa8:	|  |   move.l d0,158(sp)
		KPrintF("openAndVerify: Bad Header\n");
    5fac:	|  |   pea 18537 <PutChar+0xe05>
    5fb2:	|  |   jsr 16c5e <KPrintF>
    5fb8:	|  |   addq.l #4,sp
		return NULL;
    5fba:	|  |   moveq #0,d0
    5fbc:	+--|-- bra.w 6118 <openAndVerify+0x366>
	}
	FGetC (fp);
    5fc0:	|  \-> move.l 306(sp),254(sp)
    5fc6:	|      move.l 1a7ac <DOSBase>,d0
    5fcc:	|      movea.l d0,a6
    5fce:	|      move.l 254(sp),d1
    5fd2:	|      jsr -306(a6)
    5fd6:	|      move.l d0,250(sp)
	while (FGetC(fp)) {;}
    5fda:	|      nop
    5fdc:	|  /-> move.l 306(sp),246(sp)
    5fe2:	|  |   move.l 1a7ac <DOSBase>,d0
    5fe8:	|  |   movea.l d0,a6
    5fea:	|  |   move.l 246(sp),d1
    5fee:	|  |   jsr -306(a6)
    5ff2:	|  |   move.l d0,242(sp)
    5ff6:	|  |   move.l 242(sp),d0
    5ffa:	|  \-- bne.s 5fdc <openAndVerify+0x22a>

	int majVersion = FGetC (fp);
    5ffc:	|      move.l 306(sp),238(sp)
    6002:	|      move.l 1a7ac <DOSBase>,d0
    6008:	|      movea.l d0,a6
    600a:	|      move.l 238(sp),d1
    600e:	|      jsr -306(a6)
    6012:	|      move.l d0,234(sp)
    6016:	|      move.l 234(sp),d0
    601a:	|      move.l d0,230(sp)
	int minVersion = FGetC (fp);
    601e:	|      move.l 306(sp),226(sp)
    6024:	|      move.l 1a7ac <DOSBase>,d0
    602a:	|      movea.l d0,a6
    602c:	|      move.l 226(sp),d1
    6030:	|      jsr -306(a6)
    6034:	|      move.l d0,222(sp)
    6038:	|      move.l 222(sp),d0
    603c:	|      move.l d0,218(sp)
	*fileVersion = majVersion * 256 + minVersion;
    6040:	|      move.l 230(sp),d0
    6044:	|      lsl.l #8,d0
    6046:	|      add.l 218(sp),d0
    604a:	|      movea.l 344(sp),a0
    604e:	|      move.l d0,(a0)

	char txtVer[120];

	if (*fileVersion > WHOLE_VERSION) {
    6050:	|      movea.l 344(sp),a0
    6054:	|      move.l (a0),d0
    6056:	|      cmpi.l #514,d0
    605c:	|  /-- ble.s 60b2 <openAndVerify+0x300>
		//sprintf (txtVer, ERROR_VERSION_TOO_LOW_2, majVersion, minVersion);
		Write(Output(), (APTR)ERROR_VERSION_TOO_LOW_1, 100);
    605e:	|  |   move.l 1a7ac <DOSBase>,d0
    6064:	|  |   movea.l d0,a6
    6066:	|  |   jsr -60(a6)
    606a:	|  |   move.l d0,194(sp)
    606e:	|  |   move.l 194(sp),d0
    6072:	|  |   move.l d0,190(sp)
    6076:	|  |   move.l #99666,186(sp)
    607e:	|  |   moveq #100,d1
    6080:	|  |   move.l d1,182(sp)
    6084:	|  |   move.l 1a7ac <DOSBase>,d0
    608a:	|  |   movea.l d0,a6
    608c:	|  |   move.l 190(sp),d1
    6090:	|  |   move.l 186(sp),d2
    6094:	|  |   move.l 182(sp),d3
    6098:	|  |   jsr -48(a6)
    609c:	|  |   move.l d0,178(sp)
		KPrintF(ERROR_VERSION_TOO_LOW_1);
    60a0:	|  |   pea 18552 <PutChar+0xe20>
    60a6:	|  |   jsr 16c5e <KPrintF>
    60ac:	|  |   addq.l #4,sp
		return NULL;
    60ae:	|  |   moveq #0,d0
    60b0:	+--|-- bra.s 6118 <openAndVerify+0x366>
	} else if (*fileVersion < MINIM_VERSION) {
    60b2:	|  \-> movea.l 344(sp),a0
    60b6:	|      move.l (a0),d0
    60b8:	|      cmpi.l #257,d0
    60be:	|  /-- bgt.s 6114 <openAndVerify+0x362>
		Write(Output(), (APTR)ERROR_VERSION_TOO_HIGH_1, 100);
    60c0:	|  |   move.l 1a7ac <DOSBase>,d0
    60c6:	|  |   movea.l d0,a6
    60c8:	|  |   jsr -60(a6)
    60cc:	|  |   move.l d0,214(sp)
    60d0:	|  |   move.l 214(sp),d0
    60d4:	|  |   move.l d0,210(sp)
    60d8:	|  |   move.l #99735,206(sp)
    60e0:	|  |   moveq #100,d0
    60e2:	|  |   move.l d0,202(sp)
    60e6:	|  |   move.l 1a7ac <DOSBase>,d0
    60ec:	|  |   movea.l d0,a6
    60ee:	|  |   move.l 210(sp),d1
    60f2:	|  |   move.l 206(sp),d2
    60f6:	|  |   move.l 202(sp),d3
    60fa:	|  |   jsr -48(a6)
    60fe:	|  |   move.l d0,198(sp)
		KPrintF(ERROR_VERSION_TOO_HIGH_1);
    6102:	|  |   pea 18597 <PutChar+0xe65>
    6108:	|  |   jsr 16c5e <KPrintF>
    610e:	|  |   addq.l #4,sp
		return NULL;
    6110:	|  |   moveq #0,d0
    6112:	+--|-- bra.s 6118 <openAndVerify+0x366>
	}
	return fp;
    6114:	|  \-> move.l 306(sp),d0
}
    6118:	\----> movem.l (sp)+,d2-d3/a6
    611c:	       lea 312(sp),sp
    6120:	       rts

00006122 <pauseFunction>:

void pauseFunction (struct loadedFunction * fun) {
    6122:	          subq.l #4,sp
	struct loadedFunction * * huntAndDestroy = & allRunningFunctions;
    6124:	          move.l #108348,(sp)
	while (* huntAndDestroy) {
    612a:	   /----- bra.s 6156 <pauseFunction+0x34>
		if (fun == * huntAndDestroy) {
    612c:	/--|----> movea.l (sp),a0
    612e:	|  |      move.l (a0),d0
    6130:	|  |      cmp.l 8(sp),d0
    6134:	|  |  /-- bne.s 614c <pauseFunction+0x2a>
			(* huntAndDestroy) = (* huntAndDestroy) -> next;
    6136:	|  |  |   movea.l (sp),a0
    6138:	|  |  |   movea.l (a0),a0
    613a:	|  |  |   move.l 44(a0),d0
    613e:	|  |  |   movea.l (sp),a0
    6140:	|  |  |   move.l d0,(a0)
			fun->next = NULL;
    6142:	|  |  |   movea.l 8(sp),a0
    6146:	|  |  |   clr.l 44(a0)
    614a:	|  +--|-- bra.s 6156 <pauseFunction+0x34>
		} else {
			huntAndDestroy = & (* huntAndDestroy) -> next;
    614c:	|  |  \-> movea.l (sp),a0
    614e:	|  |      move.l (a0),d0
    6150:	|  |      moveq #44,d1
    6152:	|  |      add.l d0,d1
    6154:	|  |      move.l d1,(sp)
	while (* huntAndDestroy) {
    6156:	|  \----> movea.l (sp),a0
    6158:	|         move.l (a0),d0
    615a:	\-------- bne.s 612c <pauseFunction+0xa>
		}
	}
}
    615c:	          nop
    615e:	          nop
    6160:	          addq.l #4,sp
    6162:	          rts

00006164 <restartFunction>:

void restartFunction (struct loadedFunction * fun) {
	fun -> next = allRunningFunctions;
    6164:	move.l 1a73c <allRunningFunctions>,d0
    616a:	movea.l 4(sp),a0
    616e:	move.l d0,44(a0)
	allRunningFunctions = fun;
    6172:	move.l 4(sp),1a73c <allRunningFunctions>
}
    617a:	nop
    617c:	rts

0000617e <runSludge>:

BOOL runSludge () {
    617e:	                   lea -12(sp),sp
    6182:	                   move.l a6,-(sp)
	
	struct loadedFunction * thisFunction = allRunningFunctions;
    6184:	                   move.l 1a73c <allRunningFunctions>,12(sp)
	struct loadedFunction * nextFunction;

	while (thisFunction) {
    618c:	      /----------- bra.s 6208 <runSludge+0x8a>
		nextFunction = thisFunction -> next;
    618e:	   /--|----------> movea.l 12(sp),a0
    6192:	   |  |            move.l 44(a0),4(sp)

		if (! thisFunction -> freezerLevel) {
    6198:	   |  |            movea.l 12(sp),a0
    619c:	   |  |            move.b 56(a0),d0
    61a0:	   |  |  /-------- bne.s 6202 <runSludge+0x84>
			if (thisFunction -> timeLeft) {
    61a2:	   |  |  |         movea.l 12(sp),a0
    61a6:	   |  |  |         move.l 12(a0),d0
    61aa:	   |  |  |  /----- beq.s 61d4 <runSludge+0x56>
				if (thisFunction -> timeLeft < 0) {				
    61ac:	   |  |  |  |      movea.l 12(sp),a0
    61b0:	   |  |  |  |      move.l 12(a0),d0
    61b4:	   |  |  |  |  /-- bpl.s 61c0 <runSludge+0x42>
					thisFunction -> timeLeft = 0;
    61b6:	   |  |  |  |  |   movea.l 12(sp),a0
    61ba:	   |  |  |  |  |   clr.l 12(a0)
    61be:	   |  |  +--|--|-- bra.s 6202 <runSludge+0x84>
				} else if (! -- (thisFunction -> timeLeft)) {
    61c0:	   |  |  |  |  \-> movea.l 12(sp),a0
    61c4:	   |  |  |  |      move.l 12(a0),d0
    61c8:	   |  |  |  |      subq.l #1,d0
    61ca:	   |  |  |  |      movea.l 12(sp),a0
    61ce:	   |  |  |  |      move.l d0,12(a0)
    61d2:	   |  |  +--|----- bra.s 6202 <runSludge+0x84>
				}
			} else {
				if (thisFunction -> isSpeech) {
    61d4:	   |  |  |  \----> movea.l 12(sp),a0
    61d8:	   |  |  |         move.w 50(a0),d0
    61dc:	   |  |  |     /-- beq.s 61ec <runSludge+0x6e>
					thisFunction -> isSpeech = FALSE;
    61de:	   |  |  |     |   movea.l 12(sp),a0
    61e2:	   |  |  |     |   clr.w 50(a0)
					killAllSpeech ();
    61e6:	   |  |  |     |   jsr 7810 <killAllSpeech>
				}
				if (! continueFunction (thisFunction))
    61ec:	   |  |  |     \-> move.l 12(sp),-(sp)
    61f0:	   |  |  |         jsr 414c <continueFunction>
    61f6:	   |  |  |         addq.l #4,sp
    61f8:	   |  |  |         tst.w d0
    61fa:	   |  |  +-------- bne.s 6202 <runSludge+0x84>
					return FALSE;
    61fc:	   |  |  |         clr.w d0
    61fe:	/--|--|--|-------- bra.w 628e <runSludge+0x110>
			}
		}

		thisFunction = nextFunction;
    6202:	|  |  |  \-------> move.l 4(sp),12(sp)
	while (thisFunction) {
    6208:	|  |  \----------> tst.l 12(sp)
    620c:	|  \-------------- bne.s 618e <runSludge+0x10>
	}

	if (loadNow) {
    620e:	|                  move.l 1a770 <loadNow>,d0
    6214:	|        /-------- beq.s 628c <runSludge+0x10e>
		if (loadNow[0] == ':') {
    6216:	|        |         movea.l 1a770 <loadNow>,a0
    621c:	|        |         move.b (a0),d0
    621e:	|        |         cmpi.b #58,d0
    6222:	|        |  /----- bne.s 6256 <runSludge+0xd8>
			saveGame (loadNow + 1);
    6224:	|        |  |      move.l 1a770 <loadNow>,d0
    622a:	|        |  |      addq.l #1,d0
    622c:	|        |  |      move.l d0,-(sp)
    622e:	|        |  |      jsr c1a8 <saveGame>
    6234:	|        |  |      addq.l #4,sp
			setVariable (&saverFunc->reg, SVT_INT, 1);
    6236:	|        |  |      movea.l 1a8c2 <saverFunc>,a0
    623c:	|        |  |      lea 28(a0),a0
    6240:	|        |  |      pea 1 <_start+0x1>
    6244:	|        |  |      pea 1 <_start+0x1>
    6248:	|        |  |      move.l a0,-(sp)
    624a:	|        |  |      jsr 14b52 <setVariable>
    6250:	|        |  |      lea 12(sp),sp
    6254:	|        |  |  /-- bra.s 626e <runSludge+0xf0>
		} else {
			if (! loadGame (loadNow)) return FALSE;
    6256:	|        |  \--|-> move.l 1a770 <loadNow>,d0
    625c:	|        |     |   move.l d0,-(sp)
    625e:	|        |     |   jsr bcf0 <loadGame>
    6264:	|        |     |   addq.l #4,sp
    6266:	|        |     |   tst.w d0
    6268:	|        |     +-- bne.s 626e <runSludge+0xf0>
    626a:	|        |     |   clr.w d0
    626c:	+--------|-----|-- bra.s 628e <runSludge+0x110>
		}
		FreeVec(loadNow);
    626e:	|        |     \-> move.l 1a770 <loadNow>,8(sp)
    6276:	|        |         move.l 1a7a4 <SysBase>,d0
    627c:	|        |         movea.l d0,a6
    627e:	|        |         movea.l 8(sp),a1
    6282:	|        |         jsr -690(a6)
		loadNow = NULL;
    6286:	|        |         clr.l 1a770 <loadNow>
	}

	return TRUE;
    628c:	|        \-------> moveq #1,d0
}
    628e:	\----------------> movea.l (sp)+,a6
    6290:	                   lea 12(sp),sp
    6294:	                   rts

00006296 <saveHandlers>:

void saveHandlers (BPTR fp) {
	put2bytes (currentEvents -> leftMouseFunction,		fp);
    6296:	movea.l 1a11c <currentEvents>,a0
    629c:	move.l (a0),d0
    629e:	move.l 4(sp),-(sp)
    62a2:	move.l d0,-(sp)
    62a4:	jsr 8d0 <put2bytes>
    62aa:	addq.l #8,sp
	put2bytes (currentEvents -> leftMouseUpFunction,	fp);
    62ac:	movea.l 1a11c <currentEvents>,a0
    62b2:	move.l 4(a0),d0
    62b6:	move.l 4(sp),-(sp)
    62ba:	move.l d0,-(sp)
    62bc:	jsr 8d0 <put2bytes>
    62c2:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseFunction,		fp);
    62c4:	movea.l 1a11c <currentEvents>,a0
    62ca:	move.l 8(a0),d0
    62ce:	move.l 4(sp),-(sp)
    62d2:	move.l d0,-(sp)
    62d4:	jsr 8d0 <put2bytes>
    62da:	addq.l #8,sp
	put2bytes (currentEvents -> rightMouseUpFunction,	fp);
    62dc:	movea.l 1a11c <currentEvents>,a0
    62e2:	move.l 12(a0),d0
    62e6:	move.l 4(sp),-(sp)
    62ea:	move.l d0,-(sp)
    62ec:	jsr 8d0 <put2bytes>
    62f2:	addq.l #8,sp
	put2bytes (currentEvents -> moveMouseFunction,		fp);
    62f4:	movea.l 1a11c <currentEvents>,a0
    62fa:	move.l 16(a0),d0
    62fe:	move.l 4(sp),-(sp)
    6302:	move.l d0,-(sp)
    6304:	jsr 8d0 <put2bytes>
    630a:	addq.l #8,sp
	put2bytes (currentEvents -> focusFunction,			fp);
    630c:	movea.l 1a11c <currentEvents>,a0
    6312:	move.l 20(a0),d0
    6316:	move.l 4(sp),-(sp)
    631a:	move.l d0,-(sp)
    631c:	jsr 8d0 <put2bytes>
    6322:	addq.l #8,sp
	put2bytes (currentEvents -> spaceFunction,			fp);
    6324:	movea.l 1a11c <currentEvents>,a0
    632a:	move.l 24(a0),d0
    632e:	move.l 4(sp),-(sp)
    6332:	move.l d0,-(sp)
    6334:	jsr 8d0 <put2bytes>
    633a:	addq.l #8,sp
}
    633c:	nop
    633e:	rts

00006340 <sludgeDisplay>:

void sludgeDisplay () {					
    6340:	subq.l #4,sp
  	volatile struct Custom *custom = (struct Custom*)0xdff000;
    6342:	move.l #14675968,(sp)
	displayCursor();
    6348:	jsr c58 <displayCursor>
	CstDrawBackdrop();
    634e:	jsr 14c8 <CstDrawBackdrop>
	CstRestoreScreen();
    6354:	jsr 239a <CstRestoreScreen>
	drawPeople();
    635a:	jsr 9b10 <drawPeople>
	CstSwapBuffer();
    6360:	jsr 311c <CstSwapBuffer>
}
    6366:	nop
    6368:	addq.l #4,sp
    636a:	rts

0000636c <stackSetByIndex>:

BOOL stackSetByIndex (struct variableStack * vS, unsigned int theIndex, const struct variable * va) {
	while (theIndex--) {
    636c:	      /-- bra.s 638c <stackSetByIndex+0x20>
		vS = vS->next;
    636e:	/-----|-> movea.l 4(sp),a0
    6372:	|     |   move.l 8(a0),4(sp)
		if (!vS) {
    6378:	|     +-- bne.s 638c <stackSetByIndex+0x20>
			KPrintF("Index past end of stack.");
    637a:	|     |   pea 185de <PutChar+0xeac>
    6380:	|     |   jsr 16c5e <KPrintF>
    6386:	|     |   addq.l #4,sp
			return FALSE;
    6388:	|     |   clr.w d0
    638a:	|  /--|-- bra.s 63ae <stackSetByIndex+0x42>
	while (theIndex--) {
    638c:	|  |  \-> move.l 8(sp),d0
    6390:	|  |      move.l d0,d1
    6392:	|  |      subq.l #1,d1
    6394:	|  |      move.l d1,8(sp)
    6398:	|  |      tst.l d0
    639a:	\--|----- bne.s 636e <stackSetByIndex+0x2>
		}
	}
	return copyVariable(va, &(vS->thisVar));
    639c:	   |      move.l 4(sp),d0
    63a0:	   |      move.l d0,-(sp)
    63a2:	   |      move.l 16(sp),-(sp)
    63a6:	   |      jsr 1471a <copyVariable>
    63ac:	   |      addq.l #8,sp
}
    63ae:	   \----> rts

000063b0 <startNewFunctionNum>:

int startNewFunctionNum (unsigned int funcNum, unsigned int numParamsExpected, struct loadedFunction * calledBy, struct variableStack ** vStack, BOOL returnSommet) {
    63b0:	             lea -24(sp),sp
    63b4:	             move.l a6,-(sp)
    63b6:	             move.l 48(sp),d0
    63ba:	             move.w d0,d0
    63bc:	             move.w d0,6(sp)
		
	struct loadedFunction * newFunc = AllocVec(sizeof(struct loadedFunction),MEMF_ANY);
    63c0:	             moveq #58,d0
    63c2:	             move.l d0,24(sp)
    63c6:	             clr.l 20(sp)
    63ca:	             move.l 1a7a4 <SysBase>,d0
    63d0:	             movea.l d0,a6
    63d2:	             move.l 24(sp),d0
    63d6:	             move.l 20(sp),d1
    63da:	             jsr -684(a6)
    63de:	             move.l d0,16(sp)
    63e2:	             move.l 16(sp),d0
    63e6:	             move.l d0,12(sp)
	if(!newFunc) {
    63ea:	         /-- bne.s 6400 <startNewFunctionNum+0x50>
		KPrintF("startNewFunction: Cannot allocate memory");
    63ec:	         |   pea 185f7 <PutChar+0xec5>
    63f2:	         |   jsr 16c5e <KPrintF>
    63f8:	         |   addq.l #4,sp
		return 0;
    63fa:	         |   moveq #0,d0
    63fc:	/--------|-- bra.w 6516 <startNewFunctionNum+0x166>
	}
	newFunc -> originalNumber = funcNum;
    6400:	|        \-> move.l 32(sp),d0
    6404:	|            movea.l 12(sp),a0
    6408:	|            move.l d0,(a0)

	loadFunctionCode (newFunc);
    640a:	|            move.l 12(sp),-(sp)
    640e:	|            jsr 5b20 <loadFunctionCode>
    6414:	|            addq.l #4,sp

	if (newFunc -> numArgs != (int)numParamsExpected) {
    6416:	|            movea.l 12(sp),a0
    641a:	|            move.l 16(a0),d1
    641e:	|            move.l 36(sp),d0
    6422:	|            cmp.l d1,d0
    6424:	|        /-- beq.s 643a <startNewFunctionNum+0x8a>
		KPrintF("Wrong number of parameters!");
    6426:	|        |   pea 18620 <PutChar+0xeee>
    642c:	|        |   jsr 16c5e <KPrintF>
    6432:	|        |   addq.l #4,sp
		return NULL; 
    6434:	|        |   moveq #0,d0
    6436:	+--------|-- bra.w 6516 <startNewFunctionNum+0x166>
	}
	if (newFunc -> numArgs > newFunc -> numLocals)  {
    643a:	|        \-> movea.l 12(sp),a0
    643e:	|            move.l 16(a0),d1
    6442:	|            movea.l 12(sp),a0
    6446:	|            move.l 8(a0),d0
    644a:	|            cmp.l d1,d0
    644c:	|  /-------- bge.s 64b6 <startNewFunctionNum+0x106>
		KPrintF ("More arguments than local variable space!");
    644e:	|  |         pea 1863c <PutChar+0xf0a>
    6454:	|  |         jsr 16c5e <KPrintF>
    645a:	|  |         addq.l #4,sp
		return NULL; 
    645c:	|  |         moveq #0,d0
    645e:	+--|-------- bra.w 6516 <startNewFunctionNum+0x166>
	}
	
	// Now, lets copy the parameters from the calling function's stack...

	while (numParamsExpected) {
		struct variableStack *vStacksimpleptr = *vStack;
    6462:	|  |  /----> movea.l 44(sp),a0
    6466:	|  |  |      move.l (a0),8(sp)
		numParamsExpected --;
    646a:	|  |  |      subq.l #1,36(sp)
		if (*vStack == NULL) {
    646e:	|  |  |      movea.l 44(sp),a0
    6472:	|  |  |      move.l (a0),d0
    6474:	|  |  |  /-- bne.s 648a <startNewFunctionNum+0xda>
			KPrintF("Corrupted file! The stack's empty and there were still parameters expected");
    6476:	|  |  |  |   pea 18666 <PutChar+0xf34>
    647c:	|  |  |  |   jsr 16c5e <KPrintF>
    6482:	|  |  |  |   addq.l #4,sp
			return NULL;
    6484:	|  |  |  |   moveq #0,d0
    6486:	+--|--|--|-- bra.w 6516 <startNewFunctionNum+0x166>
		}
		copyVariable (&vStacksimpleptr -> thisVar, &newFunc->localVars[numParamsExpected]);
    648a:	|  |  |  \-> movea.l 12(sp),a0
    648e:	|  |  |      move.l 20(a0),d1
    6492:	|  |  |      move.l 36(sp),d0
    6496:	|  |  |      lsl.l #3,d0
    6498:	|  |  |      add.l d0,d1
    649a:	|  |  |      move.l 8(sp),d0
    649e:	|  |  |      move.l d1,-(sp)
    64a0:	|  |  |      move.l d0,-(sp)
    64a2:	|  |  |      jsr 1471a <copyVariable>
    64a8:	|  |  |      addq.l #8,sp
		trimStack ( vStack);
    64aa:	|  |  |      move.l 44(sp),-(sp)
    64ae:	|  |  |      jsr 14be4 <trimStack>
    64b4:	|  |  |      addq.l #4,sp
	while (numParamsExpected) {
    64b6:	|  \--|----> tst.l 36(sp)
    64ba:	|     \----- bne.s 6462 <startNewFunctionNum+0xb2>
	}

	newFunc -> cancelMe = FALSE;
    64bc:	|            movea.l 12(sp),a0
    64c0:	|            clr.w 54(a0)
	newFunc -> timeLeft = 0;
    64c4:	|            movea.l 12(sp),a0
    64c8:	|            clr.l 12(a0)
	newFunc -> returnSomething = returnSommet;
    64cc:	|            movea.l 12(sp),a0
    64d0:	|            move.w 6(sp),48(a0)
	newFunc -> calledBy = calledBy;
    64d6:	|            movea.l 12(sp),a0
    64da:	|            move.l 40(sp),40(a0)
	newFunc -> stack = NULL;
    64e0:	|            movea.l 12(sp),a0
    64e4:	|            clr.l 24(a0)
	newFunc -> freezerLevel = 0;
    64e8:	|            movea.l 12(sp),a0
    64ec:	|            clr.b 56(a0)
	newFunc -> runThisLine = 0;
    64f0:	|            movea.l 12(sp),a0
    64f4:	|            clr.l 36(a0)
	newFunc -> isSpeech = 0;
    64f8:	|            movea.l 12(sp),a0
    64fc:	|            clr.w 50(a0)
	newFunc -> reg.varType = SVT_NULL;
    6500:	|            movea.l 12(sp),a0
    6504:	|            clr.l 28(a0)

	restartFunction (newFunc);
    6508:	|            move.l 12(sp),-(sp)
    650c:	|            jsr 6164 <restartFunction>
    6512:	|            addq.l #4,sp
	return 1;
    6514:	|            moveq #1,d0
}
    6516:	\----------> movea.l (sp)+,a6
    6518:	             lea 24(sp),sp
    651c:	             rts

0000651e <unfreezeSubs>:

void unfreezeSubs () {
    651e:	          subq.l #4,sp
	struct loadedFunction * thisFunction = allRunningFunctions;
    6520:	          move.l 1a73c <allRunningFunctions>,(sp)

	while (thisFunction) {
    6526:	   /----- bra.s 6544 <unfreezeSubs+0x26>
		if (thisFunction -> freezerLevel) thisFunction -> freezerLevel--;
    6528:	/--|----> movea.l (sp),a0
    652a:	|  |      move.b 56(a0),d0
    652e:	|  |  /-- beq.s 653e <unfreezeSubs+0x20>
    6530:	|  |  |   movea.l (sp),a0
    6532:	|  |  |   move.b 56(a0),d0
    6536:	|  |  |   subq.b #1,d0
    6538:	|  |  |   movea.l (sp),a0
    653a:	|  |  |   move.b d0,56(a0)
		thisFunction = thisFunction -> next;
    653e:	|  |  \-> movea.l (sp),a0
    6540:	|  |      move.l 44(a0),(sp)
	while (thisFunction) {
    6544:	|  \----> tst.l (sp)
    6546:	\-------- bne.s 6528 <unfreezeSubs+0xa>
	}
}
    6548:	          nop
    654a:	          nop
    654c:	          addq.l #4,sp
    654e:	          rts

00006550 <finishAccess>:
char * convertString(char * s) {
	return NULL;
}

void finishAccess () {
	sliceBusy = FALSE;
    6550:	clr.w 1a128 <sliceBusy>
}
    6556:	nop
    6558:	rts

0000655a <getNumberedString>:

char * getNumberedString (int value) {
    655a:	       lea -56(sp),sp
    655e:	       movem.l d2-d3/a6,-(sp)

	if (sliceBusy) {
    6562:	       move.w 1a128 <sliceBusy>,d0
    6568:	   /-- beq.s 65b2 <getNumberedString+0x58>
		Write(Output(), (APTR)"getNumberedString: Can't read from data file. I'm already reading something\n", 76);        
    656a:	   |   move.l 1a7ac <DOSBase>,d0
    6570:	   |   movea.l d0,a6
    6572:	   |   jsr -60(a6)
    6576:	   |   move.l d0,28(sp)
    657a:	   |   move.l 28(sp),d0
    657e:	   |   move.l d0,24(sp)
    6582:	   |   move.l #100017,20(sp)
    658a:	   |   moveq #76,d0
    658c:	   |   move.l d0,16(sp)
    6590:	   |   move.l 1a7ac <DOSBase>,d0
    6596:	   |   movea.l d0,a6
    6598:	   |   move.l 24(sp),d1
    659c:	   |   move.l 20(sp),d2
    65a0:	   |   move.l 16(sp),d3
    65a4:	   |   jsr -48(a6)
    65a8:	   |   move.l d0,12(sp)
		return NULL;
    65ac:	   |   moveq #0,d0
    65ae:	/--|-- bra.w 664e <getNumberedString+0xf4>
	}

	Seek(bigDataFile, (value << 2) + startOfTextIndex, OFFSET_BEGINNING);
    65b2:	|  \-> move.l 1a78c <bigDataFile>,64(sp)
    65ba:	|      move.l 72(sp),d0
    65be:	|      add.l d0,d0
    65c0:	|      add.l d0,d0
    65c2:	|      move.l d0,d1
    65c4:	|      move.l 1a798 <startOfTextIndex>,d0
    65ca:	|      add.l d1,d0
    65cc:	|      move.l d0,60(sp)
    65d0:	|      moveq #-1,d0
    65d2:	|      move.l d0,56(sp)
    65d6:	|      move.l 1a7ac <DOSBase>,d0
    65dc:	|      movea.l d0,a6
    65de:	|      move.l 64(sp),d1
    65e2:	|      move.l 60(sp),d2
    65e6:	|      move.l 56(sp),d3
    65ea:	|      jsr -66(a6)
    65ee:	|      move.l d0,52(sp)
	value = get4bytes (bigDataFile);
    65f2:	|      move.l 1a78c <bigDataFile>,d0
    65f8:	|      move.l d0,-(sp)
    65fa:	|      jsr 718 <get4bytes>
    6600:	|      addq.l #4,sp
    6602:	|      move.l d0,72(sp)
	Seek (bigDataFile, value, OFFSET_BEGINING);
    6606:	|      move.l 1a78c <bigDataFile>,48(sp)
    660e:	|      move.l 72(sp),44(sp)
    6614:	|      moveq #-1,d0
    6616:	|      move.l d0,40(sp)
    661a:	|      move.l 1a7ac <DOSBase>,d0
    6620:	|      movea.l d0,a6
    6622:	|      move.l 48(sp),d1
    6626:	|      move.l 44(sp),d2
    662a:	|      move.l 40(sp),d3
    662e:	|      jsr -66(a6)
    6632:	|      move.l d0,36(sp)

	char * s = readString (bigDataFile);    
    6636:	|      move.l 1a78c <bigDataFile>,d0
    663c:	|      move.l d0,-(sp)
    663e:	|      jsr b02 <readString>
    6644:	|      addq.l #4,sp
    6646:	|      move.l d0,32(sp)
	
	return s;
    664a:	|      move.l 32(sp),d0
}
    664e:	\----> movem.l (sp)+,d2-d3/a6
    6652:	       lea 56(sp),sp
    6656:	       rts

00006658 <openFileFromNum>:

unsigned int openFileFromNum (int num) {
    6658:	       lea -32(sp),sp
    665c:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

	if (sliceBusy) {
    6660:	       move.w 1a128 <sliceBusy>,d0
    6666:	   /-- beq.s 6682 <openFileFromNum+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    6668:	   |   pea 186fe <PutChar+0xfcc>
    666e:	   |   pea 1871c <PutChar+0xfea>
    6674:	   |   jsr 16c5e <KPrintF>
    667a:	   |   addq.l #8,sp
		return 0;
    667c:	   |   moveq #0,d0
    667e:	/--|-- bra.w 6716 <openFileFromNum+0xbe>
	}

	Seek( bigDataFile,  startOfDataIndex + (num << 2), OFFSET_BEGINING);	
    6682:	|  \-> move.l 1a78c <bigDataFile>,40(sp)
    668a:	|      move.l 48(sp),d0
    668e:	|      add.l d0,d0
    6690:	|      add.l d0,d0
    6692:	|      move.l d0,d1
    6694:	|      move.l 1a794 <startOfDataIndex>,d0
    669a:	|      add.l d1,d0
    669c:	|      move.l d0,36(sp)
    66a0:	|      moveq #-1,d0
    66a2:	|      move.l d0,32(sp)
    66a6:	|      move.l 1a7ac <DOSBase>,d0
    66ac:	|      movea.l d0,a6
    66ae:	|      move.l 40(sp),d1
    66b2:	|      move.l 36(sp),d2
    66b6:	|      move.l 32(sp),d3
    66ba:	|      jsr -66(a6)
    66be:	|      move.l d0,28(sp)
	Seek( bigDataFile, get4bytes (bigDataFile), OFFSET_CURRENT);
    66c2:	|      move.l 1a78c <bigDataFile>,24(sp)
    66ca:	|      move.l 1a78c <bigDataFile>,d0
    66d0:	|      move.l d0,-(sp)
    66d2:	|      jsr 718 <get4bytes>
    66d8:	|      addq.l #4,sp
    66da:	|      move.l d0,20(sp)
    66de:	|      clr.l 16(sp)
    66e2:	|      move.l 1a7ac <DOSBase>,d0
    66e8:	|      movea.l d0,a6
    66ea:	|      move.l 24(sp),d1
    66ee:	|      move.l 20(sp),d2
    66f2:	|      move.l 16(sp),d3
    66f6:	|      jsr -66(a6)
    66fa:	|      move.l d0,12(sp)
//	fprintf (dbug, "Jumping to %li (for data) \n", ftell (bigDataFile));
	sliceBusy = TRUE;
    66fe:	|      move.w #1,1a128 <sliceBusy>
//	fclose (dbug);

	return get4bytes (bigDataFile);
    6706:	|      move.l 1a78c <bigDataFile>,d0
    670c:	|      move.l d0,-(sp)
    670e:	|      jsr 718 <get4bytes>
    6714:	|      addq.l #4,sp
}
    6716:	\----> movem.l (sp)+,d2-d3/a6
    671a:	       lea 32(sp),sp
    671e:	       rts

00006720 <openObjectSlice>:

BOOL openObjectSlice (int num) {
    6720:	       lea -32(sp),sp
    6724:	       movem.l d2-d3/a6,-(sp)
    // BPTR dbug = FOpen("debuggy.txt", MODE_NEWFILE);

    // FPrintf(dbug, "\nTrying to open object %i\n", num);

    if (sliceBusy) {
    6728:	       move.w 1a128 <sliceBusy>,d0
    672e:	   /-- beq.s 674a <openObjectSlice+0x2a>
        KPrintF("Can't read from data file", "I'm already reading something");
    6730:	   |   pea 186fe <PutChar+0xfcc>
    6736:	   |   pea 1871c <PutChar+0xfea>
    673c:	   |   jsr 16c5e <KPrintF>
    6742:	   |   addq.l #8,sp
        return FALSE;
    6744:	   |   clr.w d0
    6746:	/--|-- bra.w 67d6 <openObjectSlice+0xb6>
    }

    // FPrintf(dbug, "Going to position %ld\n", startOfObjectIndex + (num << 2));
    Seek(bigDataFile, startOfObjectIndex + (num << 2), OFFSET_BEGINNING);
    674a:	|  \-> move.l 1a78c <bigDataFile>,40(sp)
    6752:	|      move.l 48(sp),d0
    6756:	|      add.l d0,d0
    6758:	|      add.l d0,d0
    675a:	|      move.l d0,d1
    675c:	|      move.l 1a7a0 <startOfObjectIndex>,d0
    6762:	|      add.l d1,d0
    6764:	|      move.l d0,36(sp)
    6768:	|      moveq #-1,d0
    676a:	|      move.l d0,32(sp)
    676e:	|      move.l 1a7ac <DOSBase>,d0
    6774:	|      movea.l d0,a6
    6776:	|      move.l 40(sp),d1
    677a:	|      move.l 36(sp),d2
    677e:	|      move.l 32(sp),d3
    6782:	|      jsr -66(a6)
    6786:	|      move.l d0,28(sp)
    Seek(bigDataFile, get4bytes(bigDataFile), OFFSET_BEGINNING);
    678a:	|      move.l 1a78c <bigDataFile>,24(sp)
    6792:	|      move.l 1a78c <bigDataFile>,d0
    6798:	|      move.l d0,-(sp)
    679a:	|      jsr 718 <get4bytes>
    67a0:	|      addq.l #4,sp
    67a2:	|      move.l d0,20(sp)
    67a6:	|      moveq #-1,d0
    67a8:	|      move.l d0,16(sp)
    67ac:	|      move.l 1a7ac <DOSBase>,d0
    67b2:	|      movea.l d0,a6
    67b4:	|      move.l 24(sp),d1
    67b8:	|      move.l 20(sp),d2
    67bc:	|      move.l 16(sp),d3
    67c0:	|      jsr -66(a6)
    67c4:	|      move.l d0,12(sp)
    // FPrintf(dbug, "Told to skip forward to %ld\n", FTell(bigDataFile));
    // FClose(dbug);
    return sliceBusy = TRUE;
    67c8:	|      move.w #1,1a128 <sliceBusy>
    67d0:	|      move.w 1a128 <sliceBusy>,d0
}
    67d6:	\----> movem.l (sp)+,d2-d3/a6
    67da:	       lea 32(sp),sp
    67de:	       rts

000067e0 <openSubSlice>:

BOOL openSubSlice (int num) {
    67e0:	       lea -32(sp),sp
    67e4:	       movem.l d2-d3/a6,-(sp)
//	FILE * dbug = fopen ("debuggy.txt", "at");

//	fprintf (dbug, "\nTrying to open sub %i\n", num);

	if (sliceBusy) {
    67e8:	       move.w 1a128 <sliceBusy>,d0
    67ee:	   /-- beq.s 680a <openSubSlice+0x2a>
		KPrintF("Can't read from data file", "I'm already reading something");
    67f0:	   |   pea 186fe <PutChar+0xfcc>
    67f6:	   |   pea 1871c <PutChar+0xfea>
    67fc:	   |   jsr 16c5e <KPrintF>
    6802:	   |   addq.l #8,sp
		return FALSE;
    6804:	   |   clr.w d0
    6806:	/--|-- bra.w 6896 <openSubSlice+0xb6>
	}

//	fprintf (dbug, "Going to position %li\n", startOfSubIndex + (num << 2));
	Seek(bigDataFile, startOfSubIndex + (num << 2), OFFSET_BEGINNING);
    680a:	|  \-> move.l 1a78c <bigDataFile>,40(sp)
    6812:	|      move.l 48(sp),d0
    6816:	|      add.l d0,d0
    6818:	|      add.l d0,d0
    681a:	|      move.l d0,d1
    681c:	|      move.l 1a79c <startOfSubIndex>,d0
    6822:	|      add.l d1,d0
    6824:	|      move.l d0,36(sp)
    6828:	|      moveq #-1,d0
    682a:	|      move.l d0,32(sp)
    682e:	|      move.l 1a7ac <DOSBase>,d0
    6834:	|      movea.l d0,a6
    6836:	|      move.l 40(sp),d1
    683a:	|      move.l 36(sp),d2
    683e:	|      move.l 32(sp),d3
    6842:	|      jsr -66(a6)
    6846:	|      move.l d0,28(sp)
	Seek(bigDataFile, get4bytes (bigDataFile), OFFSET_BEGINNING);
    684a:	|      move.l 1a78c <bigDataFile>,24(sp)
    6852:	|      move.l 1a78c <bigDataFile>,d0
    6858:	|      move.l d0,-(sp)
    685a:	|      jsr 718 <get4bytes>
    6860:	|      addq.l #4,sp
    6862:	|      move.l d0,20(sp)
    6866:	|      moveq #-1,d0
    6868:	|      move.l d0,16(sp)
    686c:	|      move.l 1a7ac <DOSBase>,d0
    6872:	|      movea.l d0,a6
    6874:	|      move.l 24(sp),d1
    6878:	|      move.l 20(sp),d2
    687c:	|      move.l 16(sp),d3
    6880:	|      jsr -66(a6)
    6884:	|      move.l d0,12(sp)
//	fprintf (dbug, "Told to skip forward to %li\n", ftell (bigDataFile));
//	fclose (dbug);
	return sliceBusy = TRUE;
    6888:	|      move.w #1,1a128 <sliceBusy>
    6890:	|      move.w 1a128 <sliceBusy>,d0
}
    6896:	\----> movem.l (sp)+,d2-d3/a6
    689a:	       lea 32(sp),sp
    689e:	       rts

000068a0 <setFileIndices>:

void setFileIndices (BPTR fp, unsigned int numLanguages, unsigned int skipBefore) {
    68a0:	       lea -180(sp),sp
    68a4:	       movem.l d2-d3/a6,-(sp)
	if (fp) {
    68a8:	       tst.l 196(sp)
    68ac:	/----- beq.s 68ec <setFileIndices+0x4c>
		// Keep hold of the file handle, and let things get at it
		bigDataFile = fp;
    68ae:	|      move.l 196(sp),1a78c <bigDataFile>
		startIndex = Seek( fp, 0, OFFSET_CURRENT);
    68b6:	|      move.l 196(sp),168(sp)
    68bc:	|      clr.l 164(sp)
    68c0:	|      clr.l 160(sp)
    68c4:	|      move.l 1a7ac <DOSBase>,d0
    68ca:	|      movea.l d0,a6
    68cc:	|      move.l 168(sp),d1
    68d0:	|      move.l 164(sp),d2
    68d4:	|      move.l 160(sp),d3
    68d8:	|      jsr -66(a6)
    68dc:	|      move.l d0,156(sp)
    68e0:	|      move.l 156(sp),d0
    68e4:	|      move.l d0,1a790 <startIndex>
    68ea:	|  /-- bra.s 6926 <setFileIndices+0x86>
	} else {
		// No file pointer - this means that we reuse the bigDataFile
		fp = bigDataFile;
    68ec:	\--|-> move.l 1a78c <bigDataFile>,196(sp)
        Seek(fp, startIndex, OFFSET_BEGINNING);
    68f4:	   |   move.l 196(sp),184(sp)
    68fa:	   |   move.l 1a790 <startIndex>,d0
    6900:	   |   move.l d0,180(sp)
    6904:	   |   moveq #-1,d0
    6906:	   |   move.l d0,176(sp)
    690a:	   |   move.l 1a7ac <DOSBase>,d0
    6910:	   |   movea.l d0,a6
    6912:	   |   move.l 184(sp),d1
    6916:	   |   move.l 180(sp),d2
    691a:	   |   move.l 176(sp),d3
    691e:	   |   jsr -66(a6)
    6922:	   |   move.l d0,172(sp)
	}
	sliceBusy = FALSE;
    6926:	   \-> clr.w 1a128 <sliceBusy>

	if (skipBefore > numLanguages) {
    692c:	       move.l 204(sp),d0
    6930:	       cmp.l 200(sp),d0
    6934:	   /-- bls.s 6948 <setFileIndices+0xa8>
		KPrintF("setFileIndices: Warning: Not a valid language ID! Using default instead.");
    6936:	   |   pea 18736 <PutChar+0x1004>
    693c:	   |   jsr 16c5e <KPrintF>
    6942:	   |   addq.l #4,sp
		skipBefore = 0;
    6944:	   |   clr.l 204(sp)
	}

	// STRINGS
	int skipAfter = numLanguages - skipBefore;
    6948:	   \-> move.l 200(sp),d0
    694c:	       sub.l 204(sp),d0
    6950:	       move.l d0,188(sp)
	while (skipBefore) {
    6954:	   /-- bra.s 6992 <setFileIndices+0xf2>
        Seek(fp, get4bytes(fp),OFFSET_BEGINING);		
    6956:	/--|-> move.l 196(sp),24(sp)
    695c:	|  |   move.l 196(sp),-(sp)
    6960:	|  |   jsr 718 <get4bytes>
    6966:	|  |   addq.l #4,sp
    6968:	|  |   move.l d0,20(sp)
    696c:	|  |   moveq #-1,d0
    696e:	|  |   move.l d0,16(sp)
    6972:	|  |   move.l 1a7ac <DOSBase>,d0
    6978:	|  |   movea.l d0,a6
    697a:	|  |   move.l 24(sp),d1
    697e:	|  |   move.l 20(sp),d2
    6982:	|  |   move.l 16(sp),d3
    6986:	|  |   jsr -66(a6)
    698a:	|  |   move.l d0,12(sp)
		skipBefore --;
    698e:	|  |   subq.l #1,204(sp)
	while (skipBefore) {
    6992:	|  \-> tst.l 204(sp)
    6996:	\----- bne.s 6956 <setFileIndices+0xb6>
	}
	startOfTextIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6998:	       move.l 196(sp),152(sp)
    699e:	       clr.l 148(sp)
    69a2:	       clr.l 144(sp)
    69a6:	       move.l 1a7ac <DOSBase>,d0
    69ac:	       movea.l d0,a6
    69ae:	       move.l 152(sp),d1
    69b2:	       move.l 148(sp),d2
    69b6:	       move.l 144(sp),d3
    69ba:	       jsr -66(a6)
    69be:	       move.l d0,140(sp)
    69c2:	       move.l 140(sp),d0
    69c6:	       addq.l #4,d0
    69c8:	       move.l d0,1a798 <startOfTextIndex>

	Seek(fp, get4bytes (fp), OFFSET_BEGINNING);
    69ce:	       move.l 196(sp),136(sp)
    69d4:	       move.l 196(sp),-(sp)
    69d8:	       jsr 718 <get4bytes>
    69de:	       addq.l #4,sp
    69e0:	       move.l d0,132(sp)
    69e4:	       moveq #-1,d0
    69e6:	       move.l d0,128(sp)
    69ea:	       move.l 1a7ac <DOSBase>,d0
    69f0:	       movea.l d0,a6
    69f2:	       move.l 136(sp),d1
    69f6:	       move.l 132(sp),d2
    69fa:	       move.l 128(sp),d3
    69fe:	       jsr -66(a6)
    6a02:	       move.l d0,124(sp)

	while (skipAfter) {
    6a06:	   /-- bra.s 6a44 <setFileIndices+0x1a4>
        Seek( fp, get4bytes (fp), OFFSET_BEGINING);
    6a08:	/--|-> move.l 196(sp),40(sp)
    6a0e:	|  |   move.l 196(sp),-(sp)
    6a12:	|  |   jsr 718 <get4bytes>
    6a18:	|  |   addq.l #4,sp
    6a1a:	|  |   move.l d0,36(sp)
    6a1e:	|  |   moveq #-1,d0
    6a20:	|  |   move.l d0,32(sp)
    6a24:	|  |   move.l 1a7ac <DOSBase>,d0
    6a2a:	|  |   movea.l d0,a6
    6a2c:	|  |   move.l 40(sp),d1
    6a30:	|  |   move.l 36(sp),d2
    6a34:	|  |   move.l 32(sp),d3
    6a38:	|  |   jsr -66(a6)
    6a3c:	|  |   move.l d0,28(sp)
		skipAfter --;
    6a40:	|  |   subq.l #1,188(sp)
	while (skipAfter) {
    6a44:	|  \-> tst.l 188(sp)
    6a48:	\----- bne.s 6a08 <setFileIndices+0x168>
	}

	startOfSubIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6a4a:	       move.l 196(sp),120(sp)
    6a50:	       clr.l 116(sp)
    6a54:	       clr.l 112(sp)
    6a58:	       move.l 1a7ac <DOSBase>,d0
    6a5e:	       movea.l d0,a6
    6a60:	       move.l 120(sp),d1
    6a64:	       move.l 116(sp),d2
    6a68:	       move.l 112(sp),d3
    6a6c:	       jsr -66(a6)
    6a70:	       move.l d0,108(sp)
    6a74:	       move.l 108(sp),d0
    6a78:	       addq.l #4,d0
    6a7a:	       move.l d0,1a79c <startOfSubIndex>
    Seek( fp, get4bytes (fp), OFFSET_CURRENT);
    6a80:	       move.l 196(sp),104(sp)
    6a86:	       move.l 196(sp),-(sp)
    6a8a:	       jsr 718 <get4bytes>
    6a90:	       addq.l #4,sp
    6a92:	       move.l d0,100(sp)
    6a96:	       clr.l 96(sp)
    6a9a:	       move.l 1a7ac <DOSBase>,d0
    6aa0:	       movea.l d0,a6
    6aa2:	       move.l 104(sp),d1
    6aa6:	       move.l 100(sp),d2
    6aaa:	       move.l 96(sp),d3
    6aae:	       jsr -66(a6)
    6ab2:	       move.l d0,92(sp)

	startOfObjectIndex = Seek( fp, 0, OFFSET_CURRENT) + 4;
    6ab6:	       move.l 196(sp),88(sp)
    6abc:	       clr.l 84(sp)
    6ac0:	       clr.l 80(sp)
    6ac4:	       move.l 1a7ac <DOSBase>,d0
    6aca:	       movea.l d0,a6
    6acc:	       move.l 88(sp),d1
    6ad0:	       move.l 84(sp),d2
    6ad4:	       move.l 80(sp),d3
    6ad8:	       jsr -66(a6)
    6adc:	       move.l d0,76(sp)
    6ae0:	       move.l 76(sp),d0
    6ae4:	       addq.l #4,d0
    6ae6:	       move.l d0,1a7a0 <startOfObjectIndex>
	Seek (fp, get4bytes (fp), OFFSET_CURRENT);
    6aec:	       move.l 196(sp),72(sp)
    6af2:	       move.l 196(sp),-(sp)
    6af6:	       jsr 718 <get4bytes>
    6afc:	       addq.l #4,sp
    6afe:	       move.l d0,68(sp)
    6b02:	       clr.l 64(sp)
    6b06:	       move.l 1a7ac <DOSBase>,d0
    6b0c:	       movea.l d0,a6
    6b0e:	       move.l 72(sp),d1
    6b12:	       move.l 68(sp),d2
    6b16:	       move.l 64(sp),d3
    6b1a:	       jsr -66(a6)
    6b1e:	       move.l d0,60(sp)

	// Remember that the data section starts here
	startOfDataIndex =  Seek( fp, 0, OFFSET_CURRENT);
    6b22:	       move.l 196(sp),56(sp)
    6b28:	       clr.l 52(sp)
    6b2c:	       clr.l 48(sp)
    6b30:	       move.l 1a7ac <DOSBase>,d0
    6b36:	       movea.l d0,a6
    6b38:	       move.l 56(sp),d1
    6b3c:	       move.l 52(sp),d2
    6b40:	       move.l 48(sp),d3
    6b44:	       jsr -66(a6)
    6b48:	       move.l d0,44(sp)
    6b4c:	       move.l 44(sp),d0
    6b50:	       move.l d0,1a794 <startOfDataIndex>
    6b56:	       nop
    6b58:	       movem.l (sp)+,d2-d3/a6
    6b5c:	       lea 180(sp),sp
    6b60:	       rts

00006b62 <GetVBR>:
static volatile APTR VBR=0;
static APTR SystemIrq;
 
struct View *ActiView;

static APTR GetVBR(void) {
    6b62:	    lea -20(sp),sp
    6b66:	    move.l a6,-(sp)
    6b68:	    move.l d7,-(sp)
	APTR vbr = 0;
    6b6a:	    clr.l 24(sp)
	UWORD getvbr[] = { 0x4e7a, 0x0801, 0x4e73 }; // MOVEC.L VBR,D0 RTE
    6b6e:	    move.w #20090,10(sp)
    6b74:	    move.w #2049,12(sp)
    6b7a:	    move.w #20083,14(sp)

	if (SysBase->AttnFlags & AFF_68010) 
    6b80:	    movea.l 1a7a4 <SysBase>,a0
    6b86:	    move.w 296(a0),d0
    6b8a:	    move.w d0,d0
    6b8c:	    andi.l #65535,d0
    6b92:	    moveq #1,d1
    6b94:	    and.l d1,d0
    6b96:	/-- beq.s 6bc4 <GetVBR+0x62>
		vbr = (APTR)Supervisor((ULONG (*)())getvbr);
    6b98:	|   lea 28(sp),a0
    6b9c:	|   lea -18(a0),a0
    6ba0:	|   move.l a0,20(sp)
    6ba4:	|   move.l 1a7a4 <SysBase>,d0
    6baa:	|   movea.l d0,a6
    6bac:	|   move.l 20(sp),d7
    6bb0:	|   exg d7,a5
    6bb2:	|   jsr -30(a6)
    6bb6:	|   exg d7,a5
    6bb8:	|   move.l d0,16(sp)
    6bbc:	|   move.l 16(sp),d0
    6bc0:	|   move.l d0,24(sp)

	return vbr;
    6bc4:	\-> move.l 24(sp),d0
}
    6bc8:	    move.l (sp)+,d7
    6bca:	    movea.l (sp)+,a6
    6bcc:	    lea 20(sp),sp
    6bd0:	    rts

00006bd2 <SetInterruptHandler>:

void SetInterruptHandler(APTR interrupt) {
	*(volatile APTR*)(((UBYTE*)VBR)+0x6c) = interrupt;
    6bd2:	movea.l 1a7ca <VBR>,a0
    6bd8:	lea 108(a0),a0
    6bdc:	move.l 4(sp),(a0)
}
    6be0:	nop
    6be2:	rts

00006be4 <GetInterruptHandler>:

APTR GetInterruptHandler() {
	return *(volatile APTR*)(((UBYTE*)VBR)+0x6c);
    6be4:	movea.l 1a7ca <VBR>,a0
    6bea:	move.l 108(a0),d0
}
    6bee:	rts

00006bf0 <TakeSystem>:
	UWORD tst=*(volatile UWORD*)&custom->dmaconr; //for compatiblity a1000
	(void)tst;
	while (*(volatile UWORD*)&custom->dmaconr&(1<<14)) {} //blitter busy wait
}

void TakeSystem() {
    6bf0:	       subq.l #8,sp
    6bf2:	       move.l a6,-(sp)
	KPrintF("TakeSystem: Run Forbid\n");
    6bf4:	       pea 1877f <PutChar+0x104d>
    6bfa:	       jsr 16c5e <KPrintF>
    6c00:	       addq.l #4,sp
	Forbid();
    6c02:	       move.l 1a7a4 <SysBase>,d0
    6c08:	       movea.l d0,a6
    6c0a:	       jsr -132(a6)
	//Save current interrupts and DMA settings so we can restore them upon exit. 
	KPrintF("TakeSystem: Saving Registers\n");
    6c0e:	       pea 18797 <PutChar+0x1065>
    6c14:	       jsr 16c5e <KPrintF>
    6c1a:	       addq.l #4,sp
	SystemADKCON=custom->adkconr;
    6c1c:	       movea.l 1a7a8 <custom>,a0
    6c22:	       move.w 16(a0),d0
    6c26:	       move.w d0,1a7c8 <SystemADKCON>
	SystemInts=custom->intenar;
    6c2c:	       movea.l 1a7a8 <custom>,a0
    6c32:	       move.w 28(a0),d0
    6c36:	       move.w d0,1a7c4 <SystemInts>
	SystemDMA=custom->dmaconr;
    6c3c:	       movea.l 1a7a8 <custom>,a0
    6c42:	       move.w 2(a0),d0
    6c46:	       move.w d0,1a7c6 <SystemDMA>
	ActiView=GfxBase->ActiView; //store current view
    6c4c:	       movea.l 1a7b0 <GfxBase>,a0
    6c52:	       move.l 34(a0),d0
    6c56:	       move.l d0,1a7d2 <ActiView>

	KPrintF("TakeSystem: LoadView\n");
    6c5c:	       pea 187b5 <PutChar+0x1083>
    6c62:	       jsr 16c5e <KPrintF>
    6c68:	       addq.l #4,sp
	LoadView(0);
    6c6a:	       clr.l 4(sp)
    6c6e:	       move.l 1a7b0 <GfxBase>,d0
    6c74:	       movea.l d0,a6
    6c76:	       movea.l 4(sp),a1
    6c7a:	       jsr -222(a6)
	KPrintF("TakeSystem: WaitTof\n");
    6c7e:	       pea 187cb <PutChar+0x1099>
    6c84:	       jsr 16c5e <KPrintF>
    6c8a:	       addq.l #4,sp
	WaitTOF();
    6c8c:	       move.l 1a7b0 <GfxBase>,d0
    6c92:	       movea.l d0,a6
    6c94:	       jsr -270(a6)
	WaitTOF();
    6c98:	       move.l 1a7b0 <GfxBase>,d0
    6c9e:	       movea.l d0,a6
    6ca0:	       jsr -270(a6)

	KPrintF("TakeSystem: WaitVBL\n");
    6ca4:	       pea 187e0 <PutChar+0x10ae>
    6caa:	       jsr 16c5e <KPrintF>
    6cb0:	       addq.l #4,sp
	WaitVbl();
    6cb2:	       jsr 16b92 <WaitVbl>
	WaitVbl();
    6cb8:	       jsr 16b92 <WaitVbl>

	KPrintF("TakeSystem: Doing Blitter Stuff\n");
    6cbe:	       pea 187f5 <PutChar+0x10c3>
    6cc4:	       jsr 16c5e <KPrintF>
    6cca:	       addq.l #4,sp
	OwnBlitter();
    6ccc:	       move.l 1a7b0 <GfxBase>,d0
    6cd2:	       movea.l d0,a6
    6cd4:	       jsr -456(a6)
	WaitBlit();	
    6cd8:	       move.l 1a7b0 <GfxBase>,d0
    6cde:	       movea.l d0,a6
    6ce0:	       jsr -228(a6)
	Disable();
    6ce4:	       move.l 1a7a4 <SysBase>,d0
    6cea:	       movea.l d0,a6
    6cec:	       jsr -120(a6)
	
	//custom->intena=0x7fff;//disable all interrupts
	//custom->intreq=0x7fff;//Clear any interrupts that were pending
	
	KPrintF("TakeSystem: Clear DMA\n");
    6cf0:	       pea 18816 <PutChar+0x10e4>
    6cf6:	       jsr 16c5e <KPrintF>
    6cfc:	       addq.l #4,sp
	custom->dmacon=0x7fff;//Clear all DMA channels
    6cfe:	       movea.l 1a7a8 <custom>,a0
    6d04:	       move.w #32767,150(a0)

	KPrintF("TakeSystem: Set all colors to black\n");
    6d0a:	       pea 1882d <PutChar+0x10fb>
    6d10:	       jsr 16c5e <KPrintF>
    6d16:	       addq.l #4,sp
	//set all colors black
	for(int a=0;a<32;a++)
    6d18:	       clr.l 8(sp)
    6d1c:	   /-- bra.s 6d3a <TakeSystem+0x14a>
		custom->color[a]=0;
    6d1e:	/--|-> movea.l 1a7a8 <custom>,a0
    6d24:	|  |   move.l 8(sp),d0
    6d28:	|  |   addi.l #192,d0
    6d2e:	|  |   add.l d0,d0
    6d30:	|  |   move.w #0,(0,a0,d0.l)
	for(int a=0;a<32;a++)
    6d36:	|  |   addq.l #1,8(sp)
    6d3a:	|  \-> moveq #31,d0
    6d3c:	|      cmp.l 8(sp),d0
    6d40:	\----- bge.s 6d1e <TakeSystem+0x12e>

	WaitVbl();
    6d42:	       jsr 16b92 <WaitVbl>
	WaitVbl();
    6d48:	       jsr 16b92 <WaitVbl>

	KPrintF("TakeSystem: Save System interrupts\n");
    6d4e:	       pea 18852 <PutChar+0x1120>
    6d54:	       jsr 16c5e <KPrintF>
    6d5a:	       addq.l #4,sp
	VBR=GetVBR();
    6d5c:	       jsr 6b62 <GetVBR>
    6d62:	       move.l d0,1a7ca <VBR>
	SystemIrq=GetInterruptHandler(); //store interrupt register*/
    6d68:	       jsr 6be4 <GetInterruptHandler>
    6d6e:	       move.l d0,1a7ce <SystemIrq>
}
    6d74:	       nop
    6d76:	       movea.l (sp)+,a6
    6d78:	       addq.l #8,sp
    6d7a:	       rts

00006d7c <FreeSystem>:

void FreeSystem() { 
    6d7c:	subq.l #4,sp
    6d7e:	move.l a6,-(sp)
	WaitVbl();
    6d80:	jsr 16b92 <WaitVbl>
	WaitBlit();
    6d86:	move.l 1a7b0 <GfxBase>,d0
    6d8c:	movea.l d0,a6
    6d8e:	jsr -228(a6)
	custom->intena=0x7fff;//disable all interrupts
    6d92:	movea.l 1a7a8 <custom>,a0
    6d98:	move.w #32767,154(a0)
	custom->intreq=0x7fff;//Clear any interrupts that were pending
    6d9e:	movea.l 1a7a8 <custom>,a0
    6da4:	move.w #32767,156(a0)
	custom->dmacon=0x7fff;//Clear all DMA channels
    6daa:	movea.l 1a7a8 <custom>,a0
    6db0:	move.w #32767,150(a0)

	//restore interrupts
	SetInterruptHandler(SystemIrq);
    6db6:	move.l 1a7ce <SystemIrq>,d0
    6dbc:	move.l d0,-(sp)
    6dbe:	jsr 6bd2 <SetInterruptHandler>
    6dc4:	addq.l #4,sp

	/*Restore system copper list(s). */
	custom->cop1lc=(ULONG)GfxBase->copinit;
    6dc6:	movea.l 1a7b0 <GfxBase>,a0
    6dcc:	move.l 38(a0),d0
    6dd0:	movea.l 1a7a8 <custom>,a0
    6dd6:	move.l d0,128(a0)
	custom->cop2lc=(ULONG)GfxBase->LOFlist;
    6dda:	movea.l 1a7b0 <GfxBase>,a0
    6de0:	move.l 50(a0),d0
    6de4:	movea.l 1a7a8 <custom>,a0
    6dea:	move.l d0,132(a0)
	custom->copjmp1=0x7fff; //start coppper
    6dee:	movea.l 1a7a8 <custom>,a0
    6df4:	move.w #32767,136(a0)

	/*Restore all interrupts and DMA settings. */
	//custom->intena=SystemInts|0x8000;
	custom->dmacon=SystemDMA|0x8000;
    6dfa:	move.w 1a7c6 <SystemDMA>,d0
    6e00:	movea.l 1a7a8 <custom>,a0
    6e06:	ori.w #-32768,d0
    6e0a:	move.w d0,150(a0)
	custom->adkcon=SystemADKCON|0x8000;
    6e0e:	move.w 1a7c8 <SystemADKCON>,d0
    6e14:	movea.l 1a7a8 <custom>,a0
    6e1a:	ori.w #-32768,d0
    6e1e:	move.w d0,158(a0)

	WaitBlit();	
    6e22:	move.l 1a7b0 <GfxBase>,d0
    6e28:	movea.l d0,a6
    6e2a:	jsr -228(a6)
	DisownBlitter();
    6e2e:	move.l 1a7b0 <GfxBase>,d0
    6e34:	movea.l d0,a6
    6e36:	jsr -462(a6)
	Enable();
    6e3a:	move.l 1a7a4 <SysBase>,d0
    6e40:	movea.l d0,a6
    6e42:	jsr -126(a6)

	LoadView(ActiView);
    6e46:	move.l 1a7d2 <ActiView>,4(sp)
    6e4e:	move.l 1a7b0 <GfxBase>,d0
    6e54:	movea.l d0,a6
    6e56:	movea.l 4(sp),a1
    6e5a:	jsr -222(a6)
	WaitTOF();
    6e5e:	move.l 1a7b0 <GfxBase>,d0
    6e64:	movea.l d0,a6
    6e66:	jsr -270(a6)
	WaitTOF();
    6e6a:	move.l 1a7b0 <GfxBase>,d0
    6e70:	movea.l d0,a6
    6e72:	jsr -270(a6)

	Permit();
    6e76:	move.l 1a7a4 <SysBase>,d0
    6e7c:	movea.l d0,a6
    6e7e:	jsr -138(a6)
}
    6e82:	nop
    6e84:	movea.l (sp)+,a6
    6e86:	addq.l #4,sp
    6e88:	rts

00006e8a <main>:
static void Wait10() { WaitLine(0x10); }
static void Wait11() { WaitLine(0x11); }
static void Wait12() { WaitLine(0x12); }
static void Wait13() { WaitLine(0x13); }

int main(int argc, char *argv[]) {
    6e8a:	    lea -128(sp),sp
    6e8e:	    movem.l d2-d3/a6,-(sp)
	SysBase = *((struct ExecBase**)4UL);
    6e92:	    movea.w #4,a0
    6e96:	    move.l (a0),d0
    6e98:	    move.l d0,1a7a4 <SysBase>
	custom = (struct Custom*)0xdff000;	
    6e9e:	    move.l #14675968,1a7a8 <custom>


	// We will use the graphics library only to locate and restore the system copper list once we are through.
	GfxBase = (struct GfxBase *)OpenLibrary((CONST_STRPTR)"graphics.library",0);
    6ea8:	    move.l #100470,136(sp)
    6eb0:	    clr.l 132(sp)
    6eb4:	    move.l 1a7a4 <SysBase>,d0
    6eba:	    movea.l d0,a6
    6ebc:	    movea.l 136(sp),a1
    6ec0:	    move.l 132(sp),d0
    6ec4:	    jsr -552(a6)
    6ec8:	    move.l d0,128(sp)
    6ecc:	    move.l 128(sp),d0
    6ed0:	    move.l d0,1a7b0 <GfxBase>
	if (!GfxBase)
    6ed6:	    move.l 1a7b0 <GfxBase>,d0
    6edc:	/-- bne.s 6ef2 <main+0x68>
		Exit(0);
    6ede:	|   clr.l 124(sp)
    6ee2:	|   move.l 1a7ac <DOSBase>,d0
    6ee8:	|   movea.l d0,a6
    6eea:	|   move.l 124(sp),d1
    6eee:	|   jsr -144(a6)

	// used for printing
	DOSBase = (struct DosLibrary*)OpenLibrary((CONST_STRPTR)"dos.library", 0);
    6ef2:	\-> move.l #100487,120(sp)
    6efa:	    clr.l 116(sp)
    6efe:	    move.l 1a7a4 <SysBase>,d0
    6f04:	    movea.l d0,a6
    6f06:	    movea.l 120(sp),a1
    6f0a:	    move.l 116(sp),d0
    6f0e:	    jsr -552(a6)
    6f12:	    move.l d0,112(sp)
    6f16:	    move.l 112(sp),d0
    6f1a:	    move.l d0,1a7ac <DOSBase>
	if (!DOSBase)
    6f20:	    move.l 1a7ac <DOSBase>,d0
    6f26:	/-- bne.s 6f3c <main+0xb2>
		Exit(0);
    6f28:	|   clr.l 108(sp)
    6f2c:	|   move.l 1a7ac <DOSBase>,d0
    6f32:	|   movea.l d0,a6
    6f34:	|   move.l 108(sp),d1
    6f38:	|   jsr -144(a6)

	MathIeeeSingBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingbas.library", 0);	
    6f3c:	\-> move.l #100499,104(sp)
    6f44:	    clr.l 100(sp)
    6f48:	    move.l 1a7a4 <SysBase>,d0
    6f4e:	    movea.l d0,a6
    6f50:	    movea.l 104(sp),a1
    6f54:	    move.l 100(sp),d0
    6f58:	    jsr -552(a6)
    6f5c:	    move.l d0,96(sp)
    6f60:	    move.l 96(sp),d0
    6f64:	    move.l d0,1a7b4 <MathIeeeSingBasBase>
	if (!MathIeeeSingBasBase)
    6f6a:	    move.l 1a7b4 <MathIeeeSingBasBase>,d0
    6f70:	/-- bne.s 6f86 <main+0xfc>
		Exit(0);	
    6f72:	|   clr.l 92(sp)
    6f76:	|   move.l 1a7ac <DOSBase>,d0
    6f7c:	|   movea.l d0,a6
    6f7e:	|   move.l 92(sp),d1
    6f82:	|   jsr -144(a6)

	MathIeeeSingTransBase = (struct MathIEEEBase *) OpenLibrary("mathieeesingtrans.library",0);													
    6f86:	\-> move.l #100523,88(sp)
    6f8e:	    clr.l 84(sp)
    6f92:	    move.l 1a7a4 <SysBase>,d0
    6f98:	    movea.l d0,a6
    6f9a:	    movea.l 88(sp),a1
    6f9e:	    move.l 84(sp),d0
    6fa2:	    jsr -552(a6)
    6fa6:	    move.l d0,80(sp)
    6faa:	    move.l 80(sp),d0
    6fae:	    move.l d0,1a7b8 <MathIeeeSingTransBase>
	if (!MathIeeeSingTransBase)
    6fb4:	    move.l 1a7b8 <MathIeeeSingTransBase>,d0
    6fba:	/-- bne.s 6fd0 <main+0x146>
		Exit(0);
    6fbc:	|   clr.l 76(sp)
    6fc0:	|   move.l 1a7ac <DOSBase>,d0
    6fc6:	|   movea.l d0,a6
    6fc8:	|   move.l 76(sp),d1
    6fcc:	|   jsr -144(a6)

	MathIeeeDoubTransBase =  (struct MathIEEEBase *) OpenLibrary("mathieeedoubtrans.library",0);
    6fd0:	\-> move.l #100549,72(sp)
    6fd8:	    clr.l 68(sp)
    6fdc:	    move.l 1a7a4 <SysBase>,d0
    6fe2:	    movea.l d0,a6
    6fe4:	    movea.l 72(sp),a1
    6fe8:	    move.l 68(sp),d0
    6fec:	    jsr -552(a6)
    6ff0:	    move.l d0,64(sp)
    6ff4:	    move.l 64(sp),d0
    6ff8:	    move.l d0,1a7c0 <MathIeeeDoubTransBase>
	if (!MathIeeeDoubTransBase)		
    6ffe:	    move.l 1a7c0 <MathIeeeDoubTransBase>,d0
    7004:	/-- bne.s 701a <main+0x190>
		Exit(0);
    7006:	|   clr.l 60(sp)
    700a:	|   move.l 1a7ac <DOSBase>,d0
    7010:	|   movea.l d0,a6
    7012:	|   move.l 60(sp),d1
    7016:	|   jsr -144(a6)

	MathIeeeDoubBasBase = (struct MathIEEEBase *) OpenLibrary("mathieeedoubbas.library",0);
    701a:	\-> move.l #100575,56(sp)
    7022:	    clr.l 52(sp)
    7026:	    move.l 1a7a4 <SysBase>,d0
    702c:	    movea.l d0,a6
    702e:	    movea.l 56(sp),a1
    7032:	    move.l 52(sp),d0
    7036:	    jsr -552(a6)
    703a:	    move.l d0,48(sp)
    703e:	    move.l 48(sp),d0
    7042:	    move.l d0,1a7bc <MathIeeeDoubBasBase>
	if( !MathIeeeDoubBasBase) 
    7048:	    move.l 1a7bc <MathIeeeDoubBasBase>,d0
    704e:	/-- bne.s 7064 <main+0x1da>
		Exit(0);
    7050:	|   clr.l 44(sp)
    7054:	|   move.l 1a7ac <DOSBase>,d0
    705a:	|   movea.l d0,a6
    705c:	|   move.l 44(sp),d1
    7060:	|   jsr -144(a6)
	

	KPrintF(" debugger from Amiga Test 026!\n");
    7064:	\-> pea 188f7 <PutChar+0x11c5>
    706a:	    jsr 16c5e <KPrintF>
    7070:	    addq.l #4,sp

	Write(Output(), (APTR)"Hello console Test 026!\n", 25);
    7072:	    move.l 1a7ac <DOSBase>,d0
    7078:	    movea.l d0,a6
    707a:	    jsr -60(a6)
    707e:	    move.l d0,40(sp)
    7082:	    move.l 40(sp),d0
    7086:	    move.l d0,36(sp)
    708a:	    move.l #100631,32(sp)
    7092:	    moveq #25,d0
    7094:	    move.l d0,28(sp)
    7098:	    move.l 1a7ac <DOSBase>,d0
    709e:	    movea.l d0,a6
    70a0:	    move.l 36(sp),d1
    70a4:	    move.l 32(sp),d2
    70a8:	    move.l 28(sp),d3
    70ac:	    jsr -48(a6)
    70b0:	    move.l d0,24(sp)
	Delay(50);
    70b4:	    moveq #50,d0
    70b6:	    move.l d0,20(sp)
    70ba:	    move.l 1a7ac <DOSBase>,d0
    70c0:	    movea.l d0,a6
    70c2:	    move.l 20(sp),d1
    70c6:	    jsr -198(a6)
	if(p61Init(module) != 0)
		KPrintF("p61Init failed!\n");
#endif
	warpmode(0);*/

	KPrintF("Taking System\n");
    70ca:	    pea 18930 <PutChar+0x11fe>
    70d0:	    jsr 16c5e <KPrintF>
    70d6:	    addq.l #4,sp
	TakeSystem();
    70d8:	    jsr 6bf0 <TakeSystem>
	KPrintF("System Taken\n");
    70de:	    pea 1893f <PutChar+0x120d>
    70e4:	    jsr 16c5e <KPrintF>
    70ea:	    addq.l #4,sp

	custom->dmacon = 0x87ff;
    70ec:	    movea.l 1a7a8 <custom>,a0
    70f2:	    move.w #-30721,150(a0)
	WaitVbl();
    70f8:	    jsr 16b92 <WaitVbl>

	KPrintF("Starting main_sludge\n");
    70fe:	    pea 1894d <PutChar+0x121b>
    7104:	    jsr 16c5e <KPrintF>
    710a:	    addq.l #4,sp
	main_sludge(argc, argv);	
    710c:	    move.l 148(sp),-(sp)
    7110:	    move.l 148(sp),-(sp)
    7114:	    jsr 3a26 <main_sludge>
    711a:	    addq.l #8,sp
#ifdef MUSIC
	p61End();
#endif

	// END
	FreeSystem();
    711c:	    jsr 6d7c <FreeSystem>

	CloseLibrary((struct Library*)DOSBase);
    7122:	    move.l 1a7ac <DOSBase>,16(sp)
    712a:	    move.l 1a7a4 <SysBase>,d0
    7130:	    movea.l d0,a6
    7132:	    movea.l 16(sp),a1
    7136:	    jsr -414(a6)
	CloseLibrary((struct Library*)GfxBase);
    713a:	    move.l 1a7b0 <GfxBase>,12(sp)
    7142:	    move.l 1a7a4 <SysBase>,d0
    7148:	    movea.l d0,a6
    714a:	    movea.l 12(sp),a1
    714e:	    jsr -414(a6)
    7152:	    moveq #0,d0
}
    7154:	    movem.l (sp)+,d2-d3/a6
    7158:	    lea 128(sp),sp
    715c:	    rts

0000715e <addStatusBar>:
#include "support/gcc8_c_support.h"

struct statusStuff mainStatus;
struct statusStuff * nowStatus = & mainStatus;

void addStatusBar () {
    715e:	    lea -16(sp),sp
    7162:	    move.l a6,-(sp)
	struct statusBar * newStat = AllocVec(sizeof(struct statusBar), MEMF_ANY);
    7164:	    moveq #8,d0
    7166:	    move.l d0,16(sp)
    716a:	    clr.l 12(sp)
    716e:	    move.l 1a7a4 <SysBase>,d0
    7174:	    movea.l d0,a6
    7176:	    move.l 16(sp),d0
    717a:	    move.l 12(sp),d1
    717e:	    jsr -684(a6)
    7182:	    move.l d0,8(sp)
    7186:	    move.l 8(sp),d0
    718a:	    move.l d0,4(sp)
	if (!newStat) {
    718e:	/-- bne.s 71be <addStatusBar+0x60>
		newStat -> next = nowStatus -> firstStatusBar;
    7190:	|   movea.l 1a12a <nowStatus>,a0
    7196:	|   move.l (a0),d0
    7198:	|   movea.l 4(sp),a0
    719c:	|   move.l d0,4(a0)
		newStat -> text = copyString ("");
    71a0:	|   pea 183a3 <PutChar+0xc71>
    71a6:	|   jsr b8 <copyString>
    71ac:	|   addq.l #4,sp
    71ae:	|   movea.l 4(sp),a0
    71b2:	|   move.l d0,(a0)
		nowStatus -> firstStatusBar = newStat;
    71b4:	|   movea.l 1a12a <nowStatus>,a0
    71ba:	|   move.l 4(sp),(a0)
	}
}
    71be:	\-> nop
    71c0:	    movea.l (sp)+,a6
    71c2:	    lea 16(sp),sp
    71c6:	    rts

000071c8 <clearStatusBar>:

void clearStatusBar () {
    71c8:	       lea -16(sp),sp
    71cc:	       move.l a6,-(sp)
	struct statusBar * stat = nowStatus -> firstStatusBar;
    71ce:	       movea.l 1a12a <nowStatus>,a0
    71d4:	       move.l (a0),16(sp)
	struct statusBar * kill;
	nowStatus -> litStatus = -1;
    71d8:	       movea.l 1a12a <nowStatus>,a0
    71de:	       moveq #-1,d0
    71e0:	       move.l d0,6(a0)
	while (stat) {
    71e4:	   /-- bra.s 7224 <clearStatusBar+0x5c>
		kill = stat;
    71e6:	/--|-> move.l 16(sp),12(sp)
		stat = stat -> next;
    71ec:	|  |   movea.l 16(sp),a0
    71f0:	|  |   move.l 4(a0),16(sp)
		FreeVec(kill -> text);
    71f6:	|  |   movea.l 12(sp),a0
    71fa:	|  |   move.l (a0),8(sp)
    71fe:	|  |   move.l 1a7a4 <SysBase>,d0
    7204:	|  |   movea.l d0,a6
    7206:	|  |   movea.l 8(sp),a1
    720a:	|  |   jsr -690(a6)
		FreeVec(kill);
    720e:	|  |   move.l 12(sp),4(sp)
    7214:	|  |   move.l 1a7a4 <SysBase>,d0
    721a:	|  |   movea.l d0,a6
    721c:	|  |   movea.l 4(sp),a1
    7220:	|  |   jsr -690(a6)
	while (stat) {
    7224:	|  \-> tst.l 16(sp)
    7228:	\----- bne.s 71e6 <clearStatusBar+0x1e>
	}
	nowStatus -> firstStatusBar = NULL;
    722a:	       movea.l 1a12a <nowStatus>,a0
    7230:	       clr.l (a0)
}
    7232:	       nop
    7234:	       movea.l (sp)+,a6
    7236:	       lea 16(sp),sp
    723a:	       rts

0000723c <initStatusBar>:

void initStatusBar () {
	mainStatus.firstStatusBar = NULL;
    723c:	clr.l 1a7d6 <mainStatus>
	mainStatus.alignStatus = IN_THE_CENTRE;
    7242:	move.w #-1,1a7da <mainStatus+0x4>
	mainStatus.litStatus = -1;
    724a:	moveq #-1,d0
    724c:	move.l d0,1a7dc <mainStatus+0x6>
	mainStatus.statusX = 10;
    7252:	moveq #10,d0
    7254:	move.l d0,1a7e0 <mainStatus+0xa>
	mainStatus.statusY = winHeight - 15;
    725a:	movea.l 1a6fc <winHeight>,a0
    7260:	lea -15(a0),a0
    7264:	move.l a0,d0
    7266:	move.l d0,1a7e4 <mainStatus+0xe>
	//statusBarColour (255, 255, 255); Amiga Todo: Amigize this
	//statusBarLitColour (255, 255, 128); Amiga Todo: Amigize this
}
    726c:	nop
    726e:	rts

00007270 <killLastStatus>:

void killLastStatus () {
    7270:	    lea -12(sp),sp
    7274:	    move.l a6,-(sp)
	if (nowStatus -> firstStatusBar) {
    7276:	    movea.l 1a12a <nowStatus>,a0
    727c:	    move.l (a0),d0
    727e:	/-- beq.s 72c8 <killLastStatus+0x58>
		struct statusBar * kill = nowStatus -> firstStatusBar;
    7280:	|   movea.l 1a12a <nowStatus>,a0
    7286:	|   move.l (a0),12(sp)
		nowStatus -> firstStatusBar = kill -> next;
    728a:	|   movea.l 1a12a <nowStatus>,a0
    7290:	|   movea.l 12(sp),a1
    7294:	|   move.l 4(a1),d0
    7298:	|   move.l d0,(a0)
		FreeVec(kill -> text);
    729a:	|   movea.l 12(sp),a0
    729e:	|   move.l (a0),8(sp)
    72a2:	|   move.l 1a7a4 <SysBase>,d0
    72a8:	|   movea.l d0,a6
    72aa:	|   movea.l 8(sp),a1
    72ae:	|   jsr -690(a6)
		FreeVec(kill);
    72b2:	|   move.l 12(sp),4(sp)
    72b8:	|   move.l 1a7a4 <SysBase>,d0
    72be:	|   movea.l d0,a6
    72c0:	|   movea.l 4(sp),a1
    72c4:	|   jsr -690(a6)
	}
}
    72c8:	\-> nop
    72ca:	    movea.l (sp)+,a6
    72cc:	    lea 12(sp),sp
    72d0:	    rts

000072d2 <positionStatus>:
	}
	return TRUE;
}

void positionStatus (int x, int y) {
	nowStatus -> statusX = x;
    72d2:	movea.l 1a12a <nowStatus>,a0
    72d8:	move.l 4(sp),10(a0)
	nowStatus -> statusY = y;
    72de:	movea.l 1a12a <nowStatus>,a0
    72e4:	move.l 8(sp),14(a0)
}
    72ea:	nop
    72ec:	rts

000072ee <saveStatusBars>:


void saveStatusBars (BPTR fp) {
    72ee:	       lea -100(sp),sp
    72f2:	       move.l a6,-(sp)
    72f4:	       move.l d2,-(sp)
	struct statusBar * viewLine = nowStatus -> firstStatusBar;
    72f6:	       movea.l 1a12a <nowStatus>,a0
    72fc:	       move.l (a0),104(sp)

	put2bytes (nowStatus -> alignStatus, fp);
    7300:	       movea.l 1a12a <nowStatus>,a0
    7306:	       move.w 4(a0),d0
    730a:	       move.w d0,d0
    730c:	       andi.l #65535,d0
    7312:	       move.l 112(sp),-(sp)
    7316:	       move.l d0,-(sp)
    7318:	       jsr 8d0 <put2bytes>
    731e:	       addq.l #8,sp
	putSigned (nowStatus -> litStatus, fp);
    7320:	       movea.l 1a12a <nowStatus>,a0
    7326:	       move.l 6(a0),d0
    732a:	       move.l d0,d0
    732c:	       movea.w d0,a0
    732e:	       move.l 112(sp),-(sp)
    7332:	       move.l a0,-(sp)
    7334:	       jsr a9c <putSigned>
    733a:	       addq.l #8,sp
	put2bytes (nowStatus -> statusX, fp);
    733c:	       movea.l 1a12a <nowStatus>,a0
    7342:	       move.l 10(a0),d0
    7346:	       move.l 112(sp),-(sp)
    734a:	       move.l d0,-(sp)
    734c:	       jsr 8d0 <put2bytes>
    7352:	       addq.l #8,sp
	put2bytes (nowStatus -> statusY, fp);
    7354:	       movea.l 1a12a <nowStatus>,a0
    735a:	       move.l 14(a0),d0
    735e:	       move.l 112(sp),-(sp)
    7362:	       move.l d0,-(sp)
    7364:	       jsr 8d0 <put2bytes>
    736a:	       addq.l #8,sp

	FPutC (fp, nowStatus -> statusR);
    736c:	       move.l 112(sp),100(sp)
    7372:	       movea.l 1a12a <nowStatus>,a0
    7378:	       move.l 18(a0),96(sp)
    737e:	       move.l 1a7ac <DOSBase>,d0
    7384:	       movea.l d0,a6
    7386:	       move.l 100(sp),d1
    738a:	       move.l 96(sp),d2
    738e:	       jsr -312(a6)
    7392:	       move.l d0,92(sp)
	FPutC (fp, nowStatus -> statusG);
    7396:	       move.l 112(sp),88(sp)
    739c:	       movea.l 1a12a <nowStatus>,a0
    73a2:	       move.l 22(a0),84(sp)
    73a8:	       move.l 1a7ac <DOSBase>,d0
    73ae:	       movea.l d0,a6
    73b0:	       move.l 88(sp),d1
    73b4:	       move.l 84(sp),d2
    73b8:	       jsr -312(a6)
    73bc:	       move.l d0,80(sp)
	FPutC (fp, nowStatus -> statusB);
    73c0:	       move.l 112(sp),76(sp)
    73c6:	       movea.l 1a12a <nowStatus>,a0
    73cc:	       move.l 26(a0),72(sp)
    73d2:	       move.l 1a7ac <DOSBase>,d0
    73d8:	       movea.l d0,a6
    73da:	       move.l 76(sp),d1
    73de:	       move.l 72(sp),d2
    73e2:	       jsr -312(a6)
    73e6:	       move.l d0,68(sp)
	FPutC (fp, nowStatus -> statusLR);
    73ea:	       move.l 112(sp),64(sp)
    73f0:	       movea.l 1a12a <nowStatus>,a0
    73f6:	       move.l 30(a0),60(sp)
    73fc:	       move.l 1a7ac <DOSBase>,d0
    7402:	       movea.l d0,a6
    7404:	       move.l 64(sp),d1
    7408:	       move.l 60(sp),d2
    740c:	       jsr -312(a6)
    7410:	       move.l d0,56(sp)
	FPutC (fp, nowStatus -> statusLG);
    7414:	       move.l 112(sp),52(sp)
    741a:	       movea.l 1a12a <nowStatus>,a0
    7420:	       move.l 34(a0),48(sp)
    7426:	       move.l 1a7ac <DOSBase>,d0
    742c:	       movea.l d0,a6
    742e:	       move.l 52(sp),d1
    7432:	       move.l 48(sp),d2
    7436:	       jsr -312(a6)
    743a:	       move.l d0,44(sp)
	FPutC (fp, nowStatus -> statusLB);
    743e:	       move.l 112(sp),40(sp)
    7444:	       movea.l 1a12a <nowStatus>,a0
    744a:	       move.l 38(a0),36(sp)
    7450:	       move.l 1a7ac <DOSBase>,d0
    7456:	       movea.l d0,a6
    7458:	       move.l 40(sp),d1
    745c:	       move.l 36(sp),d2
    7460:	       jsr -312(a6)
    7464:	       move.l d0,32(sp)

	// Write what's being said
	while (viewLine) {
    7468:	   /-- bra.s 74ac <saveStatusBars+0x1be>
		FPutC (fp,1);
    746a:	/--|-> move.l 112(sp),16(sp)
    7470:	|  |   moveq #1,d0
    7472:	|  |   move.l d0,12(sp)
    7476:	|  |   move.l 1a7ac <DOSBase>,d0
    747c:	|  |   movea.l d0,a6
    747e:	|  |   move.l 16(sp),d1
    7482:	|  |   move.l 12(sp),d2
    7486:	|  |   jsr -312(a6)
    748a:	|  |   move.l d0,8(sp)
		writeString (viewLine -> text, fp);
    748e:	|  |   movea.l 104(sp),a0
    7492:	|  |   move.l (a0),d0
    7494:	|  |   move.l 112(sp),-(sp)
    7498:	|  |   move.l d0,-(sp)
    749a:	|  |   jsr bd8 <writeString>
    74a0:	|  |   addq.l #8,sp
		viewLine = viewLine -> next;
    74a2:	|  |   movea.l 104(sp),a0
    74a6:	|  |   move.l 4(a0),104(sp)
	while (viewLine) {
    74ac:	|  \-> tst.l 104(sp)
    74b0:	\----- bne.s 746a <saveStatusBars+0x17c>
	}
	FPutC (fp,0);
    74b2:	       move.l 112(sp),28(sp)
    74b8:	       clr.l 24(sp)
    74bc:	       move.l 1a7ac <DOSBase>,d0
    74c2:	       movea.l d0,a6
    74c4:	       move.l 28(sp),d1
    74c8:	       move.l 24(sp),d2
    74cc:	       jsr -312(a6)
    74d0:	       move.l d0,20(sp)
}
    74d4:	       nop
    74d6:	       move.l (sp)+,d2
    74d8:	       movea.l (sp)+,a6
    74da:	       lea 100(sp),sp
    74de:	       rts

000074e0 <setLitStatus>:

void setLitStatus (int i) {
	nowStatus -> litStatus = i;
    74e0:	movea.l 1a12a <nowStatus>,a0
    74e6:	move.l 4(sp),6(a0)
}
    74ec:	nop
    74ee:	rts

000074f0 <setStatusBar>:

void setStatusBar (char * txt) {
    74f0:	    subq.l #4,sp
    74f2:	    move.l a6,-(sp)
    74f4:	    move.l a2,-(sp)
	if (nowStatus -> firstStatusBar) {
    74f6:	    movea.l 1a12a <nowStatus>,a0
    74fc:	    move.l (a0),d0
    74fe:	/-- beq.s 7532 <setStatusBar+0x42>
		FreeVec(nowStatus -> firstStatusBar -> text);
    7500:	|   movea.l 1a12a <nowStatus>,a0
    7506:	|   movea.l (a0),a0
    7508:	|   move.l (a0),8(sp)
    750c:	|   move.l 1a7a4 <SysBase>,d0
    7512:	|   movea.l d0,a6
    7514:	|   movea.l 8(sp),a1
    7518:	|   jsr -690(a6)
		nowStatus -> firstStatusBar -> text = copyString (txt);
    751c:	|   movea.l 1a12a <nowStatus>,a0
    7522:	|   movea.l (a0),a2
    7524:	|   move.l 16(sp),-(sp)
    7528:	|   jsr b8 <copyString>
    752e:	|   addq.l #4,sp
    7530:	|   move.l d0,(a2)
	}
}
    7532:	\-> nop
    7534:	    movea.l (sp)+,a2
    7536:	    movea.l (sp)+,a6
    7538:	    addq.l #4,sp
    753a:	    rts

0000753c <statusBarText>:

const char * statusBarText () {
	if (nowStatus -> firstStatusBar) {
    753c:	       movea.l 1a12a <nowStatus>,a0
    7542:	       move.l (a0),d0
    7544:	/----- beq.s 7552 <statusBarText+0x16>
		return nowStatus -> firstStatusBar -> text;
    7546:	|      movea.l 1a12a <nowStatus>,a0
    754c:	|      movea.l (a0),a0
    754e:	|      move.l (a0),d0
    7550:	|  /-- bra.s 7558 <statusBarText+0x1c>
	} else {
		return "";
    7552:	\--|-> move.l #99235,d0
	}
    7558:	   \-> rts

0000755a <addSpeechLine>:

struct speechStruct * speech;
FLOAT speechSpeed = 1;


void addSpeechLine (char * theLine, int x, int *offset) {
    755a:	       lea -28(sp),sp
    755e:	       movem.l d2-d5/a6,-(sp)
	int halfWidth = (stringWidth (theLine) >> 1)/cameraZoom;
    7562:	       move.l 52(sp),-(sp)
    7566:	       jsr 15320 <stringWidth>
    756c:	       addq.l #4,sp
    756e:	       asr.l #1,d0
    7570:	       move.l d0,-(sp)
    7572:	       jsr 1709a <__floatsisf>
    7578:	       addq.l #4,sp
    757a:	       move.l d0,d1
    757c:	       move.l 1a142 <cameraZoom>,d0
    7582:	       move.l d0,-(sp)
    7584:	       move.l d1,-(sp)
    7586:	       jsr 16f46 <__divsf3>
    758c:	       addq.l #8,sp
    758e:	       move.l d0,-(sp)
    7590:	       jsr 17032 <__fixsfsi>
    7596:	       addq.l #4,sp
    7598:	       move.l d0,44(sp)
	int xx1 = x - (halfWidth);
    759c:	       move.l 56(sp),d0
    75a0:	       sub.l 44(sp),d0
    75a4:	       move.l d0,40(sp)
	int xx2 = x + (halfWidth);
    75a8:	       move.l 56(sp),d0
    75ac:	       add.l 44(sp),d0
    75b0:	       move.l d0,36(sp)
	struct speechLine * newLine = AllocVec(sizeof(struct speechLine),MEMF_ANY);
    75b4:	       moveq #12,d0
    75b6:	       move.l d0,32(sp)
    75ba:	       clr.l 28(sp)
    75be:	       move.l 1a7a4 <SysBase>,d0
    75c4:	       movea.l d0,a6
    75c6:	       move.l 32(sp),d0
    75ca:	       move.l 28(sp),d1
    75ce:	       jsr -684(a6)
    75d2:	       move.l d0,24(sp)
    75d6:	       move.l 24(sp),d0
    75da:	       move.l d0,20(sp)

	newLine -> next = speech -> allSpeech;
    75de:	       movea.l 1a800 <speech>,a0
    75e4:	       move.l 4(a0),d0
    75e8:	       movea.l 20(sp),a0
    75ec:	       move.l d0,4(a0)
	newLine -> textLine = copyString (theLine);
    75f0:	       move.l 52(sp),-(sp)
    75f4:	       jsr b8 <copyString>
    75fa:	       addq.l #4,sp
    75fc:	       movea.l 20(sp),a0
    7600:	       move.l d0,(a0)
	newLine -> x = xx1;
    7602:	       movea.l 20(sp),a0
    7606:	       move.l 40(sp),8(a0)
	speech -> allSpeech = newLine;
    760c:	       movea.l 1a800 <speech>,a0
    7612:	       move.l 20(sp),4(a0)
	if ((xx1 < 5) && (*offset < (5 - xx1))) {
    7618:	       moveq #4,d0
    761a:	       cmp.l 40(sp),d0
    761e:	   /-- blt.s 7640 <addSpeechLine+0xe6>
    7620:	   |   movea.l 60(sp),a0
    7624:	   |   move.l (a0),d1
    7626:	   |   moveq #5,d0
    7628:	   |   sub.l 40(sp),d0
    762c:	   |   cmp.l d1,d0
    762e:	   +-- ble.s 7640 <addSpeechLine+0xe6>
		*offset = 5 - xx1;
    7630:	   |   moveq #5,d0
    7632:	   |   sub.l 40(sp),d0
    7636:	   |   movea.l 60(sp),a0
    763a:	   |   move.l d0,(a0)
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
	}
}
    763c:	/--|-- bra.w 776c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7640:	|  \-> move.l 36(sp),-(sp)
    7644:	|      jsr 1709a <__floatsisf>
    764a:	|      addq.l #4,sp
    764c:	|      move.l d0,d2
    764e:	|      move.l 1a6f8 <winWidth>,d0
    7654:	|      move.l d0,-(sp)
    7656:	|      jsr 170c2 <__floatunsisf>
    765c:	|      addq.l #4,sp
    765e:	|      move.l d0,d1
    7660:	|      move.l 1a142 <cameraZoom>,d0
    7666:	|      move.l d0,-(sp)
    7668:	|      move.l d1,-(sp)
    766a:	|      jsr 16f46 <__divsf3>
    7670:	|      addq.l #8,sp
    7672:	|      move.l #1084227584,-(sp)
    7678:	|      move.l d0,-(sp)
    767a:	|      jsr 1738e <__subsf3>
    7680:	|      addq.l #8,sp
    7682:	|      move.l d0,-(sp)
    7684:	|      move.l d2,-(sp)
    7686:	|      jsr 17182 <__gesf2>
    768c:	|      addq.l #8,sp
    768e:	|      tst.l d0
    7690:	|  /-- bge.s 7696 <addSpeechLine+0x13c>
}
    7692:	+--|-- bra.w 776c <addSpeechLine+0x212>
	} else if (((FLOAT) xx2 >= ((FLOAT)winWidth/cameraZoom) - 5) && ((FLOAT) *offset > (((FLOAT)winWidth/cameraZoom) - 5.0 - xx2))) {
    7696:	|  \-> movea.l 60(sp),a0
    769a:	|      move.l (a0),d0
    769c:	|      move.l d0,-(sp)
    769e:	|      jsr 1709a <__floatsisf>
    76a4:	|      addq.l #4,sp
    76a6:	|      move.l d0,-(sp)
    76a8:	|      jsr 16fb2 <__extendsfdf2>
    76ae:	|      addq.l #4,sp
    76b0:	|      move.l d0,d4
    76b2:	|      move.l d1,d5
    76b4:	|      move.l 1a6f8 <winWidth>,d0
    76ba:	|      move.l d0,-(sp)
    76bc:	|      jsr 170c2 <__floatunsisf>
    76c2:	|      addq.l #4,sp
    76c4:	|      move.l d0,d1
    76c6:	|      move.l 1a142 <cameraZoom>,d0
    76cc:	|      move.l d0,-(sp)
    76ce:	|      move.l d1,-(sp)
    76d0:	|      jsr 16f46 <__divsf3>
    76d6:	|      addq.l #8,sp
    76d8:	|      move.l d0,-(sp)
    76da:	|      jsr 16fb2 <__extendsfdf2>
    76e0:	|      addq.l #4,sp
    76e2:	|      clr.l -(sp)
    76e4:	|      move.l #1075052544,-(sp)
    76ea:	|      move.l d1,-(sp)
    76ec:	|      move.l d0,-(sp)
    76ee:	|      jsr 1732c <__subdf3>
    76f4:	|      lea 16(sp),sp
    76f8:	|      move.l d0,d2
    76fa:	|      move.l d1,d3
    76fc:	|      move.l 36(sp),-(sp)
    7700:	|      jsr 1705a <__floatsidf>
    7706:	|      addq.l #4,sp
    7708:	|      move.l d1,-(sp)
    770a:	|      move.l d0,-(sp)
    770c:	|      move.l d3,-(sp)
    770e:	|      move.l d2,-(sp)
    7710:	|      jsr 1732c <__subdf3>
    7716:	|      lea 16(sp),sp
    771a:	|      move.l d1,-(sp)
    771c:	|      move.l d0,-(sp)
    771e:	|      move.l d5,-(sp)
    7720:	|      move.l d4,-(sp)
    7722:	|      jsr 171b8 <__gtdf2>
    7728:	|      lea 16(sp),sp
    772c:	|      tst.l d0
    772e:	|  /-- bgt.s 7732 <addSpeechLine+0x1d8>
}
    7730:	+--|-- bra.s 776c <addSpeechLine+0x212>
		*offset = (int) ((FLOAT)winWidth/cameraZoom) - 5 - xx2;
    7732:	|  \-> move.l 1a6f8 <winWidth>,d0
    7738:	|      move.l d0,-(sp)
    773a:	|      jsr 170c2 <__floatunsisf>
    7740:	|      addq.l #4,sp
    7742:	|      move.l d0,d1
    7744:	|      move.l 1a142 <cameraZoom>,d0
    774a:	|      move.l d0,-(sp)
    774c:	|      move.l d1,-(sp)
    774e:	|      jsr 16f46 <__divsf3>
    7754:	|      addq.l #8,sp
    7756:	|      move.l d0,-(sp)
    7758:	|      jsr 17032 <__fixsfsi>
    775e:	|      addq.l #4,sp
    7760:	|      subq.l #5,d0
    7762:	|      sub.l 36(sp),d0
    7766:	|      movea.l 60(sp),a0
    776a:	|      move.l d0,(a0)
}
    776c:	\----> nop
    776e:	       movem.l (sp)+,d2-d5/a6
    7772:	       lea 28(sp),sp
    7776:	       rts

00007778 <initSpeech>:


void initSpeech () {
    7778:	       lea -12(sp),sp
    777c:	       move.l a6,-(sp)
	speech = AllocVec(sizeof(struct speechStruct), MEMF_ANY);
    777e:	       moveq #20,d0
    7780:	       move.l d0,12(sp)
    7784:	       clr.l 8(sp)
    7788:	       move.l 1a7a4 <SysBase>,d0
    778e:	       movea.l d0,a6
    7790:	       move.l 12(sp),d0
    7794:	       move.l 8(sp),d1
    7798:	       jsr -684(a6)
    779c:	       move.l d0,4(sp)
    77a0:	       move.l 4(sp),d0
    77a4:	       move.l d0,1a800 <speech>
	if (speech) {
    77aa:	       move.l 1a800 <speech>,d0
    77b0:	/----- beq.s 77dc <initSpeech+0x64>
		speech -> currentTalker = NULL;
    77b2:	|      movea.l 1a800 <speech>,a0
    77b8:	|      clr.l (a0)
		speech -> allSpeech = NULL;
    77ba:	|      movea.l 1a800 <speech>,a0
    77c0:	|      clr.l 4(a0)
		speech -> speechY = 0;
    77c4:	|      movea.l 1a800 <speech>,a0
    77ca:	|      clr.l 8(a0)
		speech -> lastFile = -1;
    77ce:	|      movea.l 1a800 <speech>,a0
    77d4:	|      moveq #-1,d0
    77d6:	|      move.l d0,12(a0)
	} else
    {
        KPrintF("Could not allocate memory");
    }
}
    77da:	|  /-- bra.s 77ea <initSpeech+0x72>
        KPrintF("Could not allocate memory");
    77dc:	\--|-> pea 1898a <PutChar+0x1258>
    77e2:	   |   jsr 16c5e <KPrintF>
    77e8:	   |   addq.l #4,sp
}
    77ea:	   \-> nop
    77ec:	       movea.l (sp)+,a6
    77ee:	       lea 12(sp),sp
    77f2:	       rts

000077f4 <isThereAnySpeechGoingOn>:

int isThereAnySpeechGoingOn () {
	return speech -> allSpeech ? speech -> lookWhosTalking : -1;
    77f4:	       movea.l 1a800 <speech>,a0
    77fa:	       move.l 4(a0),d0
    77fe:	/----- beq.s 780c <isThereAnySpeechGoingOn+0x18>
    7800:	|      movea.l 1a800 <speech>,a0
    7806:	|      move.l 16(a0),d0
    780a:	|  /-- bra.s 780e <isThereAnySpeechGoingOn+0x1a>
    780c:	\--|-> moveq #-1,d0
}
    780e:	   \-> rts

00007810 <killAllSpeech>:

void killAllSpeech () {
    7810:	       lea -12(sp),sp
    7814:	       move.l a6,-(sp)
	if (speech -> lastFile != -1) {
    7816:	       movea.l 1a800 <speech>,a0
    781c:	       move.l 12(a0),d0
    7820:	       moveq #-1,d1
    7822:	       cmp.l d0,d1
    7824:	   /-- beq.s 7832 <killAllSpeech+0x22>
		//huntKillSound (speech -> lastFile); Amiga Todo: Replace?
		speech -> lastFile = -1;
    7826:	   |   movea.l 1a800 <speech>,a0
    782c:	   |   moveq #-1,d0
    782e:	   |   move.l d0,12(a0)
	}

	if (speech -> currentTalker) {
    7832:	   \-> movea.l 1a800 <speech>,a0
    7838:	       move.l (a0),d0
    783a:	/----- beq.w 78c6 <killAllSpeech+0xb6>
		makeSilent (* (speech -> currentTalker));
    783e:	|      movea.l 1a800 <speech>,a0
    7844:	|      move.l (a0),d1
    7846:	|      lea -132(sp),sp
    784a:	|      move.l sp,d0
    784c:	|      movea.w #132,a0
    7850:	|      move.l a0,-(sp)
    7852:	|      move.l d1,-(sp)
    7854:	|      move.l d0,-(sp)
    7856:	|      jsr 16c12 <memcpy>
    785c:	|      lea 12(sp),sp
    7860:	|      jsr a60a <makeSilent>
    7866:	|      lea 132(sp),sp
		speech -> currentTalker = NULL;
    786a:	|      movea.l 1a800 <speech>,a0
    7870:	|      clr.l (a0)
	}
	
	struct speechLine * killMe;
	
	while (speech -> allSpeech) {
    7872:	+----- bra.s 78c6 <killAllSpeech+0xb6>
		killMe = speech -> allSpeech;
    7874:	|  /-> movea.l 1a800 <speech>,a0
    787a:	|  |   move.l 4(a0),12(sp)
		speech -> allSpeech = speech -> allSpeech -> next;
    7880:	|  |   movea.l 1a800 <speech>,a0
    7886:	|  |   movea.l 4(a0),a1
    788a:	|  |   movea.l 1a800 <speech>,a0
    7890:	|  |   move.l 4(a1),d0
    7894:	|  |   move.l d0,4(a0)
		FreeVec(killMe -> textLine);
    7898:	|  |   movea.l 12(sp),a0
    789c:	|  |   move.l (a0),8(sp)
    78a0:	|  |   move.l 1a7a4 <SysBase>,d0
    78a6:	|  |   movea.l d0,a6
    78a8:	|  |   movea.l 8(sp),a1
    78ac:	|  |   jsr -690(a6)
		FreeVec(killMe);
    78b0:	|  |   move.l 12(sp),4(sp)
    78b6:	|  |   move.l 1a7a4 <SysBase>,d0
    78bc:	|  |   movea.l d0,a6
    78be:	|  |   movea.l 4(sp),a1
    78c2:	|  |   jsr -690(a6)
	while (speech -> allSpeech) {
    78c6:	\--|-> movea.l 1a800 <speech>,a0
    78cc:	   |   move.l 4(a0),d0
    78d0:	   \-- bne.s 7874 <killAllSpeech+0x64>
	}
}
    78d2:	       nop
    78d4:	       nop
    78d6:	       movea.l (sp)+,a6
    78d8:	       lea 12(sp),sp
    78dc:	       rts

000078de <makeTalker>:

	return TRUE;
}

void makeTalker (struct onScreenPerson *me) {
	setFrames (me, ANI_TALK);
    78de:	pea 2 <_start+0x2>
    78e2:	move.l 8(sp),-(sp)
    78e6:	jsr 7a3e <setFrames>
    78ec:	addq.l #8,sp
}
    78ee:	nop
    78f0:	rts

000078f2 <saveSpeech>:

void saveSpeech (struct speechStruct * sS, BPTR fp) {
    78f2:	       lea -52(sp),sp
    78f6:	       move.l a6,-(sp)
    78f8:	       move.l d2,-(sp)
	struct speechLine * viewLine = sS -> allSpeech;
    78fa:	       movea.l 64(sp),a0
    78fe:	       move.l 4(a0),56(sp)
	
	putFloat (speechSpeed, fp);
    7904:	       move.l 1a12e <speechSpeed>,d0
    790a:	       move.l 68(sp),-(sp)
    790e:	       move.l d0,-(sp)
    7910:	       jsr a46 <putFloat>
    7916:	       addq.l #8,sp
	
		// Write y co-ordinate
		put2bytes (sS -> speechY, fp);
    7918:	       movea.l 64(sp),a0
    791c:	       move.l 8(a0),d0
    7920:	       move.l 68(sp),-(sp)
    7924:	       move.l d0,-(sp)
    7926:	       jsr 8d0 <put2bytes>
    792c:	       addq.l #8,sp
		
		// Write which character's talking
		put2bytes (sS -> lookWhosTalking, fp);		
    792e:	       movea.l 64(sp),a0
    7932:	       move.l 16(a0),d0
    7936:	       move.l 68(sp),-(sp)
    793a:	       move.l d0,-(sp)
    793c:	       jsr 8d0 <put2bytes>
    7942:	       addq.l #8,sp
		if (sS -> currentTalker) {
    7944:	       movea.l 64(sp),a0
    7948:	       move.l (a0),d0
    794a:	   /-- beq.s 798e <saveSpeech+0x9c>
			FPutC (fp, 1);
    794c:	   |   move.l 68(sp),40(sp)
    7952:	   |   moveq #1,d0
    7954:	   |   move.l d0,36(sp)
    7958:	   |   move.l 1a7ac <DOSBase>,d0
    795e:	   |   movea.l d0,a6
    7960:	   |   move.l 40(sp),d1
    7964:	   |   move.l 36(sp),d2
    7968:	   |   jsr -312(a6)
    796c:	   |   move.l d0,32(sp)
			put2bytes (sS->currentTalker->thisType->objectNum, fp);
    7970:	   |   movea.l 64(sp),a0
    7974:	   |   movea.l (a0),a0
    7976:	   |   movea.l 114(a0),a0
    797a:	   |   move.l 4(a0),d0
    797e:	   |   move.l 68(sp),-(sp)
    7982:	   |   move.l d0,-(sp)
    7984:	   |   jsr 8d0 <put2bytes>
    798a:	   |   addq.l #8,sp
    798c:	/--|-- bra.s 7a0a <saveSpeech+0x118>
		} else {
			FPutC (fp, 0);
    798e:	|  \-> move.l 68(sp),52(sp)
    7994:	|      clr.l 48(sp)
    7998:	|      move.l 1a7ac <DOSBase>,d0
    799e:	|      movea.l d0,a6
    79a0:	|      move.l 52(sp),d1
    79a4:	|      move.l 48(sp),d2
    79a8:	|      jsr -312(a6)
    79ac:	|      move.l d0,44(sp)
		}
		
		// Write what's being said
		while (viewLine) {
    79b0:	+----- bra.s 7a0a <saveSpeech+0x118>
			FPutC (fp, 1);
    79b2:	|  /-> move.l 68(sp),16(sp)
    79b8:	|  |   moveq #1,d0
    79ba:	|  |   move.l d0,12(sp)
    79be:	|  |   move.l 1a7ac <DOSBase>,d0
    79c4:	|  |   movea.l d0,a6
    79c6:	|  |   move.l 16(sp),d1
    79ca:	|  |   move.l 12(sp),d2
    79ce:	|  |   jsr -312(a6)
    79d2:	|  |   move.l d0,8(sp)
			writeString (viewLine -> textLine, fp);
    79d6:	|  |   movea.l 56(sp),a0
    79da:	|  |   move.l (a0),d0
    79dc:	|  |   move.l 68(sp),-(sp)
    79e0:	|  |   move.l d0,-(sp)
    79e2:	|  |   jsr bd8 <writeString>
    79e8:	|  |   addq.l #8,sp
			put2bytes (viewLine -> x, fp);
    79ea:	|  |   movea.l 56(sp),a0
    79ee:	|  |   move.l 8(a0),d0
    79f2:	|  |   move.l 68(sp),-(sp)
    79f6:	|  |   move.l d0,-(sp)
    79f8:	|  |   jsr 8d0 <put2bytes>
    79fe:	|  |   addq.l #8,sp
			viewLine = viewLine -> next;
    7a00:	|  |   movea.l 56(sp),a0
    7a04:	|  |   move.l 4(a0),56(sp)
		while (viewLine) {
    7a0a:	\--|-> tst.l 56(sp)
    7a0e:	   \-- bne.s 79b2 <saveSpeech+0xc0>
		}
		FPutC (fp, 0);
    7a10:	       move.l 68(sp),28(sp)
    7a16:	       clr.l 24(sp)
    7a1a:	       move.l 1a7ac <DOSBase>,d0
    7a20:	       movea.l d0,a6
    7a22:	       move.l 28(sp),d1
    7a26:	       move.l 24(sp),d2
    7a2a:	       jsr -312(a6)
    7a2e:	       move.l d0,20(sp)
}
    7a32:	       nop
    7a34:	       move.l (sp)+,d2
    7a36:	       movea.l (sp)+,a6
    7a38:	       lea 52(sp),sp
    7a3c:	       rts

00007a3e <setFrames>:

void setFrames (struct onScreenPerson *m, int a) {
    7a3e:	move.l d2,-(sp)
	m->myAnim = m->myPersona -> animation[(a * m->myPersona -> numDirections) + m->direction];
    7a40:	movea.l 8(sp),a0
    7a44:	movea.l 80(a0),a0
    7a48:	move.l (a0),d2
    7a4a:	movea.l 8(sp),a0
    7a4e:	movea.l 80(a0),a0
    7a52:	move.l 4(a0),d0
    7a56:	move.l 12(sp),-(sp)
    7a5a:	move.l d0,-(sp)
    7a5c:	jsr 1761c <__mulsi3>
    7a62:	addq.l #8,sp
    7a64:	move.l d0,d1
    7a66:	movea.l 8(sp),a0
    7a6a:	move.l 106(a0),d0
    7a6e:	add.l d1,d0
    7a70:	add.l d0,d0
    7a72:	add.l d0,d0
    7a74:	movea.l d2,a0
    7a76:	adda.l d0,a0
    7a78:	move.l (a0),d0
    7a7a:	movea.l 8(sp),a0
    7a7e:	move.l d0,72(a0)
}
    7a82:	nop
    7a84:	move.l (sp)+,d2
    7a86:	rts

00007a88 <wrapSpeech>:

int wrapSpeech(char * theText, int objT, int sampleFile, BOOL animPerson) {
    7a88:	       lea -20(sp),sp
    7a8c:	       move.l d2,-(sp)
    7a8e:	       move.l 40(sp),d0
    7a92:	       move.w d0,d0
    7a94:	       move.w d0,6(sp)
    int i;

    speech->lookWhosTalking = objT;
    7a98:	       movea.l 1a800 <speech>,a0
    7a9e:	       move.l 32(sp),16(a0)
    struct onScreenPerson * thisPerson = findPerson(objT);
    7aa4:	       move.l 32(sp),-(sp)
    7aa8:	       jsr a0f4 <findPerson>
    7aae:	       addq.l #4,sp
    7ab0:	       move.l d0,16(sp)
    if (thisPerson) {
    7ab4:	   /-- beq.s 7ada <wrapSpeech+0x52>
        //setObjFontColour(thisPerson->thisType); Todo Amigize this
        i = wrapSpeechPerson(theText, thisPerson, sampleFile, animPerson);
    7ab6:	   |   movea.w 6(sp),a0
    7aba:	   |   move.l a0,-(sp)
    7abc:	   |   move.l 40(sp),-(sp)
    7ac0:	   |   move.l 24(sp),-(sp)
    7ac4:	   |   move.l 40(sp),-(sp)
    7ac8:	   |   jsr 7ba0 <wrapSpeechPerson>
    7ace:	   |   lea 16(sp),sp
    7ad2:	   |   move.l d0,20(sp)
    7ad6:	/--|-- bra.w 7b94 <wrapSpeech+0x10c>
    } else {
        struct screenRegion * thisRegion = getRegionForObject(objT);
    7ada:	|  \-> move.l 32(sp),-(sp)
    7ade:	|      jsr 15480 <getRegionForObject>
    7ae4:	|      addq.l #4,sp
    7ae6:	|      move.l d0,12(sp)
        if (thisRegion) {
    7aea:	|  /-- beq.s 7b56 <wrapSpeech+0xce>
            //setObjFontColour(thisRegion->thisType); Todo Amigize this
            i = wrapSpeechXY(theText, ((thisRegion->x1 + thisRegion->x2) >> 1) - cameraX, thisRegion->y1 - thisRegion->thisType->speechGap - cameraY, thisRegion->thisType->wrapSpeech, sampleFile);
    7aec:	|  |   movea.l 12(sp),a0
    7af0:	|  |   movea.l 28(a0),a0
    7af4:	|  |   move.l 28(a0),d0
    7af8:	|  |   movea.l 12(sp),a0
    7afc:	|  |   movea.l 4(a0),a1
    7b00:	|  |   movea.l 12(sp),a0
    7b04:	|  |   movea.l 28(a0),a0
    7b08:	|  |   move.l 20(a0),d1
    7b0c:	|  |   movea.l a1,a0
    7b0e:	|  |   suba.l d1,a0
    7b10:	|  |   move.l 1a8b6 <cameraY>,d1
    7b16:	|  |   movea.l a0,a1
    7b18:	|  |   suba.l d1,a1
    7b1a:	|  |   movea.l 12(sp),a0
    7b1e:	|  |   move.l (a0),d2
    7b20:	|  |   movea.l 12(sp),a0
    7b24:	|  |   move.l 8(a0),d1
    7b28:	|  |   add.l d2,d1
    7b2a:	|  |   move.l d1,d2
    7b2c:	|  |   asr.l #1,d2
    7b2e:	|  |   move.l 1a8b2 <cameraX>,d1
    7b34:	|  |   movea.l d2,a0
    7b36:	|  |   suba.l d1,a0
    7b38:	|  |   move.l 36(sp),-(sp)
    7b3c:	|  |   move.l d0,-(sp)
    7b3e:	|  |   move.l a1,-(sp)
    7b40:	|  |   move.l a0,-(sp)
    7b42:	|  |   move.l 44(sp),-(sp)
    7b46:	|  |   jsr 7cbe <wrapSpeechXY>
    7b4c:	|  |   lea 20(sp),sp
    7b50:	|  |   move.l d0,20(sp)
    7b54:	+--|-- bra.s 7b94 <wrapSpeech+0x10c>
        } else {
            struct objectType * temp = findObjectType(objT);
    7b56:	|  \-> move.l 32(sp),-(sp)
    7b5a:	|      jsr cfca <findObjectType>
    7b60:	|      addq.l #4,sp
    7b62:	|      move.l d0,8(sp)
            //setObjFontColour(temp); Todo: Amigize this
            i = wrapSpeechXY(theText, winWidth >> 1, 10, temp->wrapSpeech, sampleFile);
    7b66:	|      movea.l 8(sp),a0
    7b6a:	|      move.l 28(a0),d1
    7b6e:	|      move.l 1a6f8 <winWidth>,d0
    7b74:	|      lsr.l #1,d0
    7b76:	|      move.l 36(sp),-(sp)
    7b7a:	|      move.l d1,-(sp)
    7b7c:	|      pea a <_start+0xa>
    7b80:	|      move.l d0,-(sp)
    7b82:	|      move.l 44(sp),-(sp)
    7b86:	|      jsr 7cbe <wrapSpeechXY>
    7b8c:	|      lea 20(sp),sp
    7b90:	|      move.l d0,20(sp)
        }
    }
    return i;
    7b94:	\----> move.l 20(sp),d0
}
    7b98:	       move.l (sp)+,d2
    7b9a:	       lea 20(sp),sp
    7b9e:	       rts

00007ba0 <wrapSpeechPerson>:

int wrapSpeechPerson (char * theText, struct onScreenPerson *thePerson, int sampleFile, BOOL animPerson) {
    7ba0:	    subq.l #8,sp
    7ba2:	    movem.l d2-d4,-(sp)
    7ba6:	    move.l 36(sp),d0
    7baa:	    move.w d0,d0
    7bac:	    move.w d0,14(sp)
	int i = wrapSpeechXY (theText, thePerson->x - cameraX, thePerson->y - cameraY - (thePerson->scale * (thePerson->height - thePerson->floaty)) - thePerson->thisType -> speechGap, thePerson->thisType -> wrapSpeech, sampleFile);
    7bb0:	    movea.l 28(sp),a0
    7bb4:	    movea.l 114(a0),a0
    7bb8:	    move.l 28(a0),d2
    7bbc:	    movea.l 28(sp),a0
    7bc0:	    move.l 4(a0),d3
    7bc4:	    move.l 1a8b6 <cameraY>,d0
    7bca:	    move.l d0,-(sp)
    7bcc:	    jsr 1709a <__floatsisf>
    7bd2:	    addq.l #4,sp
    7bd4:	    move.l d0,-(sp)
    7bd6:	    move.l d3,-(sp)
    7bd8:	    jsr 1738e <__subsf3>
    7bde:	    addq.l #8,sp
    7be0:	    move.l d0,d3
    7be2:	    movea.l 28(sp),a0
    7be6:	    move.l 32(a0),d4
    7bea:	    movea.l 28(sp),a0
    7bee:	    move.l 20(a0),d1
    7bf2:	    movea.l 28(sp),a0
    7bf6:	    move.l 24(a0),d0
    7bfa:	    sub.l d0,d1
    7bfc:	    move.l d1,-(sp)
    7bfe:	    jsr 1709a <__floatsisf>
    7c04:	    addq.l #4,sp
    7c06:	    move.l d0,-(sp)
    7c08:	    move.l d4,-(sp)
    7c0a:	    jsr 1714c <__mulsf3>
    7c10:	    addq.l #8,sp
    7c12:	    move.l d0,-(sp)
    7c14:	    move.l d3,-(sp)
    7c16:	    jsr 1738e <__subsf3>
    7c1c:	    addq.l #8,sp
    7c1e:	    move.l d0,d3
    7c20:	    movea.l 28(sp),a0
    7c24:	    movea.l 114(a0),a0
    7c28:	    move.l 20(a0),d0
    7c2c:	    move.l d0,-(sp)
    7c2e:	    jsr 1709a <__floatsisf>
    7c34:	    addq.l #4,sp
    7c36:	    move.l d0,-(sp)
    7c38:	    move.l d3,-(sp)
    7c3a:	    jsr 1738e <__subsf3>
    7c40:	    addq.l #8,sp
    7c42:	    move.l d0,-(sp)
    7c44:	    jsr 17032 <__fixsfsi>
    7c4a:	    addq.l #4,sp
    7c4c:	    move.l d0,d4
    7c4e:	    movea.l 28(sp),a0
    7c52:	    move.l (a0),d3
    7c54:	    move.l 1a8b2 <cameraX>,d0
    7c5a:	    move.l d0,-(sp)
    7c5c:	    jsr 1709a <__floatsisf>
    7c62:	    addq.l #4,sp
    7c64:	    move.l d0,-(sp)
    7c66:	    move.l d3,-(sp)
    7c68:	    jsr 1738e <__subsf3>
    7c6e:	    addq.l #8,sp
    7c70:	    move.l d0,-(sp)
    7c72:	    jsr 17032 <__fixsfsi>
    7c78:	    addq.l #4,sp
    7c7a:	    move.l 32(sp),-(sp)
    7c7e:	    move.l d2,-(sp)
    7c80:	    move.l d4,-(sp)
    7c82:	    move.l d0,-(sp)
    7c84:	    move.l 40(sp),-(sp)
    7c88:	    jsr 7cbe <wrapSpeechXY>
    7c8e:	    lea 20(sp),sp
    7c92:	    move.l d0,16(sp)
	if (animPerson) {
    7c96:	    tst.w 14(sp)
    7c9a:	/-- beq.s 7cb2 <wrapSpeechPerson+0x112>
		makeTalker (thePerson);
    7c9c:	|   move.l 28(sp),-(sp)
    7ca0:	|   jsr 78de <makeTalker>
    7ca6:	|   addq.l #4,sp
		speech -> currentTalker = thePerson;
    7ca8:	|   movea.l 1a800 <speech>,a0
    7cae:	|   move.l 28(sp),(a0)
	}
	return i;
    7cb2:	\-> move.l 16(sp),d0
}
    7cb6:	    movem.l (sp)+,d2-d4
    7cba:	    addq.l #8,sp
    7cbc:	    rts

00007cbe <wrapSpeechXY>:

int wrapSpeechXY(char * theText, int x, int y, int wrap, int sampleFile) {
    7cbe:	                   lea -16(sp),sp
    7cc2:	                   movem.l d2-d4/a2,-(sp)
    int a, offset = 0;
    7cc6:	                   clr.l 16(sp)
    killAllSpeech();
    7cca:	                   jsr 7810 <killAllSpeech>

    int speechTime = (strlen(theText) + 20) * speechSpeed;
    7cd0:	                   move.l 36(sp),-(sp)
    7cd4:	                   jsr 1374c <strlen>
    7cda:	                   addq.l #4,sp
    7cdc:	                   movea.l d0,a0
    7cde:	                   lea 20(a0),a0
    7ce2:	                   move.l a0,-(sp)
    7ce4:	                   jsr 170c2 <__floatunsisf>
    7cea:	                   addq.l #4,sp
    7cec:	                   move.l d0,d1
    7cee:	                   move.l 1a12e <speechSpeed>,d0
    7cf4:	                   move.l d0,-(sp)
    7cf6:	                   move.l d1,-(sp)
    7cf8:	                   jsr 1714c <__mulsf3>
    7cfe:	                   addq.l #8,sp
    7d00:	                   move.l d0,-(sp)
    7d02:	                   jsr 17032 <__fixsfsi>
    7d08:	                   addq.l #4,sp
    7d0a:	                   move.l d0,24(sp)
    if (speechTime < 1) speechTime = 1;
    7d0e:	               /-- bgt.s 7d16 <wrapSpeechXY+0x58>
    7d10:	               |   moveq #1,d0
    7d12:	               |   move.l d0,24(sp)

    if (sampleFile != -1) {
    7d16:	               \-> moveq #-1,d1
    7d18:	                   cmp.l 52(sp),d1
    7d1c:	               /-- beq.s 7d5c <wrapSpeechXY+0x9e>
        if (speechMode >= 1) {
    7d1e:	               |   move.l 1a8c6 <speechMode>,d0
    7d24:	               +-- ble.s 7d5c <wrapSpeechXY+0x9e>
            if (startSound(sampleFile, FALSE)) {
    7d26:	               |   clr.l -(sp)
    7d28:	               |   move.l 56(sp),-(sp)
    7d2c:	               |   jsr cc94 <startSound>
    7d32:	               |   addq.l #8,sp
    7d34:	               |   tst.w d0
    7d36:	               +-- beq.s 7d5c <wrapSpeechXY+0x9e>
                speechTime = -10;
    7d38:	               |   moveq #-10,d0
    7d3a:	               |   move.l d0,24(sp)
                speech->lastFile = sampleFile;
    7d3e:	               |   movea.l 1a800 <speech>,a0
    7d44:	               |   move.l 52(sp),12(a0)
                if (speechMode == 2) return -10;
    7d4a:	               |   move.l 1a8c6 <speechMode>,d0
    7d50:	               |   moveq #2,d1
    7d52:	               |   cmp.l d0,d1
    7d54:	               +-- bne.s 7d5c <wrapSpeechXY+0x9e>
    7d56:	               |   moveq #-10,d0
    7d58:	/--------------|-- bra.w 7fe2 <wrapSpeechXY+0x324>
            }
        }
    }
    speech->speechY = y;
    7d5c:	|              \-> movea.l 1a800 <speech>,a0
    7d62:	|                  move.l 44(sp),8(a0)

    while (strlen(theText) > (unsigned long) wrap) {
    7d68:	|     /----------- bra.w 7e1c <wrapSpeechXY+0x15e>
        a = wrap;
    7d6c:	|  /--|----------> move.l 48(sp),28(sp)
        while (theText[a] != ' ') {
    7d72:	|  |  |        /-- bra.s 7d82 <wrapSpeechXY+0xc4>
            a--;
    7d74:	|  |  |  /-----|-> subq.l #1,28(sp)
            if (a == 0) {
    7d78:	|  |  |  |     +-- bne.s 7d82 <wrapSpeechXY+0xc4>
                a = wrap;
    7d7a:	|  |  |  |     |   move.l 48(sp),28(sp)
                break;
    7d80:	|  |  |  |  /--|-- bra.s 7d94 <wrapSpeechXY+0xd6>
        while (theText[a] != ' ') {
    7d82:	|  |  |  |  |  \-> move.l 28(sp),d0
    7d86:	|  |  |  |  |      movea.l 36(sp),a0
    7d8a:	|  |  |  |  |      adda.l d0,a0
    7d8c:	|  |  |  |  |      move.b (a0),d0
    7d8e:	|  |  |  |  |      cmpi.b #32,d0
    7d92:	|  |  |  \--|----- bne.s 7d74 <wrapSpeechXY+0xb6>
            }
        }
        theText[a] = 0;
    7d94:	|  |  |     \----> move.l 28(sp),d0
    7d98:	|  |  |            movea.l 36(sp),a0
    7d9c:	|  |  |            adda.l d0,a0
    7d9e:	|  |  |            clr.b (a0)
        addSpeechLine(theText, x, &offset);
    7da0:	|  |  |            lea 16(sp),a0
    7da4:	|  |  |            move.l a0,-(sp)
    7da6:	|  |  |            move.l 44(sp),-(sp)
    7daa:	|  |  |            move.l 44(sp),-(sp)
    7dae:	|  |  |            jsr 755a <addSpeechLine>
    7db4:	|  |  |            lea 12(sp),sp
        theText[a] = ' ';
    7db8:	|  |  |            move.l 28(sp),d0
    7dbc:	|  |  |            movea.l 36(sp),a0
    7dc0:	|  |  |            adda.l d0,a0
    7dc2:	|  |  |            move.b #32,(a0)
        theText += a + 1;
    7dc6:	|  |  |            move.l 28(sp),d0
    7dca:	|  |  |            addq.l #1,d0
    7dcc:	|  |  |            add.l d0,36(sp)
        y -= fontHeight / cameraZoom;
    7dd0:	|  |  |            move.l 44(sp),-(sp)
    7dd4:	|  |  |            jsr 1709a <__floatsisf>
    7dda:	|  |  |            addq.l #4,sp
    7ddc:	|  |  |            move.l d0,d2
    7dde:	|  |  |            move.l 1a8f0 <fontHeight>,d0
    7de4:	|  |  |            move.l d0,-(sp)
    7de6:	|  |  |            jsr 1709a <__floatsisf>
    7dec:	|  |  |            addq.l #4,sp
    7dee:	|  |  |            move.l d0,d1
    7df0:	|  |  |            move.l 1a142 <cameraZoom>,d0
    7df6:	|  |  |            move.l d0,-(sp)
    7df8:	|  |  |            move.l d1,-(sp)
    7dfa:	|  |  |            jsr 16f46 <__divsf3>
    7e00:	|  |  |            addq.l #8,sp
    7e02:	|  |  |            move.l d0,-(sp)
    7e04:	|  |  |            move.l d2,-(sp)
    7e06:	|  |  |            jsr 1738e <__subsf3>
    7e0c:	|  |  |            addq.l #8,sp
    7e0e:	|  |  |            move.l d0,-(sp)
    7e10:	|  |  |            jsr 17032 <__fixsfsi>
    7e16:	|  |  |            addq.l #4,sp
    7e18:	|  |  |            move.l d0,44(sp)
    while (strlen(theText) > (unsigned long) wrap) {
    7e1c:	|  |  \----------> move.l 36(sp),-(sp)
    7e20:	|  |               jsr 1374c <strlen>
    7e26:	|  |               addq.l #4,sp
    7e28:	|  |               move.l d0,d1
    7e2a:	|  |               move.l 48(sp),d0
    7e2e:	|  |               cmp.l d1,d0
    7e30:	|  \-------------- bcs.w 7d6c <wrapSpeechXY+0xae>
    }
    addSpeechLine(theText, x, &offset);
    7e34:	|                  lea 16(sp),a0
    7e38:	|                  move.l a0,-(sp)
    7e3a:	|                  move.l 44(sp),-(sp)
    7e3e:	|                  move.l 44(sp),-(sp)
    7e42:	|                  jsr 755a <addSpeechLine>
    7e48:	|                  lea 12(sp),sp
    y -= fontHeight / cameraZoom;
    7e4c:	|                  move.l 44(sp),-(sp)
    7e50:	|                  jsr 1709a <__floatsisf>
    7e56:	|                  addq.l #4,sp
    7e58:	|                  move.l d0,d2
    7e5a:	|                  move.l 1a8f0 <fontHeight>,d0
    7e60:	|                  move.l d0,-(sp)
    7e62:	|                  jsr 1709a <__floatsisf>
    7e68:	|                  addq.l #4,sp
    7e6a:	|                  move.l d0,d1
    7e6c:	|                  move.l 1a142 <cameraZoom>,d0
    7e72:	|                  move.l d0,-(sp)
    7e74:	|                  move.l d1,-(sp)
    7e76:	|                  jsr 16f46 <__divsf3>
    7e7c:	|                  addq.l #8,sp
    7e7e:	|                  move.l d0,-(sp)
    7e80:	|                  move.l d2,-(sp)
    7e82:	|                  jsr 1738e <__subsf3>
    7e88:	|                  addq.l #8,sp
    7e8a:	|                  move.l d0,-(sp)
    7e8c:	|                  jsr 17032 <__fixsfsi>
    7e92:	|                  addq.l #4,sp
    7e94:	|                  move.l d0,44(sp)

    if (y < 0) speech->speechY -= y;
    7e98:	|              /-- bpl.s 7eb6 <wrapSpeechXY+0x1f8>
    7e9a:	|              |   movea.l 1a800 <speech>,a0
    7ea0:	|              |   move.l 8(a0),d0
    7ea4:	|              |   movea.l 1a800 <speech>,a0
    7eaa:	|              |   sub.l 44(sp),d0
    7eae:	|              |   move.l d0,8(a0)
    7eb2:	|           /--|-- bra.w 7fa4 <wrapSpeechXY+0x2e6>
    else if (speech->speechY > cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom) speech->speechY = cameraY + (FLOAT)(winHeight - fontHeight / 3) / cameraZoom;
    7eb6:	|           |  \-> movea.l 1a800 <speech>,a0
    7ebc:	|           |      move.l 8(a0),d0
    7ec0:	|           |      move.l d0,-(sp)
    7ec2:	|           |      jsr 1709a <__floatsisf>
    7ec8:	|           |      addq.l #4,sp
    7eca:	|           |      move.l d0,d2
    7ecc:	|           |      move.l 1a8b6 <cameraY>,d0
    7ed2:	|           |      move.l d0,-(sp)
    7ed4:	|           |      jsr 1709a <__floatsisf>
    7eda:	|           |      addq.l #4,sp
    7edc:	|           |      move.l d0,d3
    7ede:	|           |      move.l 1a6fc <winHeight>,d4
    7ee4:	|           |      move.l 1a8f0 <fontHeight>,d0
    7eea:	|           |      pea 3 <_start+0x3>
    7eee:	|           |      move.l d0,-(sp)
    7ef0:	|           |      jsr 1769a <__divsi3>
    7ef6:	|           |      addq.l #8,sp
    7ef8:	|           |      move.l d4,d1
    7efa:	|           |      sub.l d0,d1
    7efc:	|           |      move.l d1,-(sp)
    7efe:	|           |      jsr 170c2 <__floatunsisf>
    7f04:	|           |      addq.l #4,sp
    7f06:	|           |      move.l d0,d1
    7f08:	|           |      move.l 1a142 <cameraZoom>,d0
    7f0e:	|           |      move.l d0,-(sp)
    7f10:	|           |      move.l d1,-(sp)
    7f12:	|           |      jsr 16f46 <__divsf3>
    7f18:	|           |      addq.l #8,sp
    7f1a:	|           |      move.l d0,-(sp)
    7f1c:	|           |      move.l d3,-(sp)
    7f1e:	|           |      jsr 16e4c <__addsf3>
    7f24:	|           |      addq.l #8,sp
    7f26:	|           |      move.l d0,-(sp)
    7f28:	|           |      move.l d2,-(sp)
    7f2a:	|           |      jsr 17206 <__gtsf2>
    7f30:	|           |      addq.l #8,sp
    7f32:	|           |      tst.l d0
    7f34:	|           +----- ble.s 7fa4 <wrapSpeechXY+0x2e6>
    7f36:	|           |      move.l 1a8b6 <cameraY>,d0
    7f3c:	|           |      move.l d0,-(sp)
    7f3e:	|           |      jsr 1709a <__floatsisf>
    7f44:	|           |      addq.l #4,sp
    7f46:	|           |      move.l d0,d2
    7f48:	|           |      move.l 1a6fc <winHeight>,d3
    7f4e:	|           |      move.l 1a8f0 <fontHeight>,d0
    7f54:	|           |      pea 3 <_start+0x3>
    7f58:	|           |      move.l d0,-(sp)
    7f5a:	|           |      jsr 1769a <__divsi3>
    7f60:	|           |      addq.l #8,sp
    7f62:	|           |      move.l d3,d1
    7f64:	|           |      sub.l d0,d1
    7f66:	|           |      move.l d1,-(sp)
    7f68:	|           |      jsr 170c2 <__floatunsisf>
    7f6e:	|           |      addq.l #4,sp
    7f70:	|           |      move.l d0,d1
    7f72:	|           |      move.l 1a142 <cameraZoom>,d0
    7f78:	|           |      move.l d0,-(sp)
    7f7a:	|           |      move.l d1,-(sp)
    7f7c:	|           |      jsr 16f46 <__divsf3>
    7f82:	|           |      addq.l #8,sp
    7f84:	|           |      move.l d0,-(sp)
    7f86:	|           |      move.l d2,-(sp)
    7f88:	|           |      jsr 16e4c <__addsf3>
    7f8e:	|           |      addq.l #8,sp
    7f90:	|           |      movea.l 1a800 <speech>,a2
    7f96:	|           |      move.l d0,-(sp)
    7f98:	|           |      jsr 17032 <__fixsfsi>
    7f9e:	|           |      addq.l #4,sp
    7fa0:	|           |      move.l d0,8(a2)

    if (offset) {
    7fa4:	|           \----> move.l 16(sp),d0
    7fa8:	|        /-------- beq.s 7fde <wrapSpeechXY+0x320>
        struct speechLine * viewLine = speech->allSpeech;
    7faa:	|        |         movea.l 1a800 <speech>,a0
    7fb0:	|        |         move.l 4(a0),20(sp)
        while (viewLine) {
    7fb6:	|        |     /-- bra.s 7fd8 <wrapSpeechXY+0x31a>
            viewLine->x += offset;
    7fb8:	|        |  /--|-> movea.l 20(sp),a0
    7fbc:	|        |  |  |   move.l 8(a0),d1
    7fc0:	|        |  |  |   move.l 16(sp),d0
    7fc4:	|        |  |  |   add.l d1,d0
    7fc6:	|        |  |  |   movea.l 20(sp),a0
    7fca:	|        |  |  |   move.l d0,8(a0)
            viewLine = viewLine->next;
    7fce:	|        |  |  |   movea.l 20(sp),a0
    7fd2:	|        |  |  |   move.l 4(a0),20(sp)
        while (viewLine) {
    7fd8:	|        |  |  \-> tst.l 20(sp)
    7fdc:	|        |  \----- bne.s 7fb8 <wrapSpeechXY+0x2fa>
        }
    }

    return speechTime;
    7fde:	|        \-------> move.l 24(sp),d0
}
    7fe2:	\----------------> movem.l (sp)+,d2-d4/a2
    7fe6:	                   lea 16(sp),sp
    7fea:	                   rts

00007fec <killZBuffer>:
#include "stringy.h"
#include "support/gcc8_c_support.h"

struct zBufferData zBuffer;

void killZBuffer () {
    7fec:	    subq.l #4,sp
    7fee:	    move.l a6,-(sp)
	if (zBuffer.tex) {
    7ff0:	    move.l 1a854 <zBuffer+0x50>,d0
    7ff6:	/-- beq.s 802e <killZBuffer+0x42>
		deleteTextures (1, &zBuffer.texName);
    7ff8:	|   pea 1a858 <zBuffer+0x54>
    7ffe:	|   pea 1 <_start+0x1>
    8002:	|   jsr 38cc <deleteTextures>
    8008:	|   addq.l #8,sp
		zBuffer.texName = 0;
    800a:	|   clr.l 1a858 <zBuffer+0x54>
        FreeVec(zBuffer.tex);
    8010:	|   move.l 1a854 <zBuffer+0x50>,4(sp)
    8018:	|   move.l 1a7a4 <SysBase>,d0
    801e:	|   movea.l d0,a6
    8020:	|   movea.l 4(sp),a1
    8024:	|   jsr -690(a6)
		zBuffer.tex = NULL;
    8028:	|   clr.l 1a854 <zBuffer+0x50>
	}
	zBuffer.numPanels = 0;
    802e:	\-> clr.l 1a80c <zBuffer+0x8>
	zBuffer.originalNum =0;
    8034:	    clr.l 1a850 <zBuffer+0x4c>
}
    803a:	    nop
    803c:	    movea.l (sp)+,a6
    803e:	    addq.l #4,sp
    8040:	    rts

00008042 <setZBuffer>:

BOOL setZBuffer (unsigned int y) {
    8042:	                         lea -528(sp),sp
    8046:	                         movem.l d2-d3/a6,-(sp)
	int x, n;
	ULONG stillToGo = 0;
    804a:	                         clr.l 528(sp)
	int yPalette[16], sorted[16], sortback[16];

	killZBuffer ();
    804e:	                         jsr 7fec <killZBuffer>

	zBuffer.originalNum = y;
    8054:	                         move.l 544(sp),d0
    8058:	                         move.l d0,1a850 <zBuffer+0x4c>
	if (! openFileFromNum (y)) return FALSE;
    805e:	                         move.l 544(sp),d0
    8062:	                         move.l d0,-(sp)
    8064:	                         jsr 6658 <openFileFromNum>
    806a:	                         addq.l #4,sp
    806c:	                         tst.l d0
    806e:	                     /-- bne.s 8076 <setZBuffer+0x34>
    8070:	                     |   clr.w d0
    8072:	/--------------------|-- bra.w 8454 <setZBuffer+0x412>
	if (FGetC (bigDataFile) != 'S' && FGetC (bigDataFile) != 'z' && FGetC (bigDataFile) != 'b') 
    8076:	|                    \-> move.l 1a78c <bigDataFile>,524(sp)
    807e:	|                        move.l 1a7ac <DOSBase>,d0
    8084:	|                        movea.l d0,a6
    8086:	|                        move.l 524(sp),d1
    808a:	|                        jsr -306(a6)
    808e:	|                        move.l d0,520(sp)
    8092:	|                        move.l 520(sp),d0
    8096:	|                        moveq #83,d1
    8098:	|                        cmp.l d0,d1
    809a:	|                    /-- beq.s 80fc <setZBuffer+0xba>
    809c:	|                    |   move.l 1a78c <bigDataFile>,516(sp)
    80a4:	|                    |   move.l 1a7ac <DOSBase>,d0
    80aa:	|                    |   movea.l d0,a6
    80ac:	|                    |   move.l 516(sp),d1
    80b0:	|                    |   jsr -306(a6)
    80b4:	|                    |   move.l d0,512(sp)
    80b8:	|                    |   move.l 512(sp),d0
    80bc:	|                    |   moveq #122,d1
    80be:	|                    |   cmp.l d0,d1
    80c0:	|                    +-- beq.s 80fc <setZBuffer+0xba>
    80c2:	|                    |   move.l 1a78c <bigDataFile>,508(sp)
    80ca:	|                    |   move.l 1a7ac <DOSBase>,d0
    80d0:	|                    |   movea.l d0,a6
    80d2:	|                    |   move.l 508(sp),d1
    80d6:	|                    |   jsr -306(a6)
    80da:	|                    |   move.l d0,504(sp)
    80de:	|                    |   move.l 504(sp),d0
    80e2:	|                    |   moveq #98,d1
    80e4:	|                    |   cmp.l d0,d1
    80e6:	|                    +-- beq.s 80fc <setZBuffer+0xba>
	{
		 KPrintF("Not a Z-buffer file");
    80e8:	|                    |   pea 189c7 <PutChar+0x1295>
    80ee:	|                    |   jsr 16c5e <KPrintF>
    80f4:	|                    |   addq.l #4,sp
		 return FALSE;
    80f6:	|                    |   clr.w d0
    80f8:	+--------------------|-- bra.w 8454 <setZBuffer+0x412>
	}

	switch (FGetC (bigDataFile)) {
    80fc:	|                    \-> move.l 1a78c <bigDataFile>,500(sp)
    8104:	|                        move.l 1a7ac <DOSBase>,d0
    810a:	|                        movea.l d0,a6
    810c:	|                        move.l 500(sp),d1
    8110:	|                        jsr -306(a6)
    8114:	|                        move.l d0,496(sp)
    8118:	|                        move.l 496(sp),d0
    811c:	|                    /-- beq.s 8126 <setZBuffer+0xe4>
    811e:	|                    |   moveq #1,d1
    8120:	|                    |   cmp.l d0,d1
    8122:	|                 /--|-- beq.s 813c <setZBuffer+0xfa>
    8124:	|              /--|--|-- bra.s 816a <setZBuffer+0x128>
		case 0:
		zBuffer.width = 640;
    8126:	|              |  |  \-> move.l #640,1a804 <zBuffer>
		zBuffer.height = 480;
    8130:	|              |  |      move.l #480,1a808 <zBuffer+0x4>
		break;
    813a:	|              |  |  /-- bra.s 817e <setZBuffer+0x13c>
		
		case 1:
		zBuffer.width = get2bytes (bigDataFile);
    813c:	|              |  \--|-> move.l 1a78c <bigDataFile>,d0
    8142:	|              |     |   move.l d0,-(sp)
    8144:	|              |     |   jsr 6bc <get2bytes>
    814a:	|              |     |   addq.l #4,sp
    814c:	|              |     |   move.l d0,1a804 <zBuffer>
		zBuffer.height = get2bytes (bigDataFile);
    8152:	|              |     |   move.l 1a78c <bigDataFile>,d0
    8158:	|              |     |   move.l d0,-(sp)
    815a:	|              |     |   jsr 6bc <get2bytes>
    8160:	|              |     |   addq.l #4,sp
    8162:	|              |     |   move.l d0,1a808 <zBuffer+0x4>
		break;
    8168:	|              |     +-- bra.s 817e <setZBuffer+0x13c>
		
		default:
		KPrintF("Extended Z-buffer format not supported in this version of the SLUDGE engine");
    816a:	|              \-----|-> pea 189db <PutChar+0x12a9>
    8170:	|                    |   jsr 16c5e <KPrintF>
    8176:	|                    |   addq.l #4,sp
		return FALSE;
    8178:	|                    |   clr.w d0
    817a:	+--------------------|-- bra.w 8454 <setZBuffer+0x412>
	}
	if ((unsigned int) zBuffer.width != sceneWidth || (unsigned int) zBuffer.height != sceneHeight) {
    817e:	|                    \-> move.l 1a804 <zBuffer>,d0
    8184:	|                        move.l d0,d1
    8186:	|                        move.l 1a894 <sceneWidth>,d0
    818c:	|                        cmp.l d1,d0
    818e:	|                    /-- bne.s 81a2 <setZBuffer+0x160>
    8190:	|                    |   move.l 1a808 <zBuffer+0x4>,d0
    8196:	|                    |   move.l d0,d1
    8198:	|                    |   move.l 1a898 <sceneHeight>,d0
    819e:	|                    |   cmp.l d1,d0
    81a0:	|                 /--|-- beq.s 81f2 <setZBuffer+0x1b0>
		char tmp[256];
		sprintf (tmp, "Z-w: %d Z-h:%d w: %d, h:%d", zBuffer.width, zBuffer.height, sceneWidth, sceneHeight);
    81a2:	|                 |  \-> movea.l 1a898 <sceneHeight>,a1
    81a8:	|                 |      movea.l 1a894 <sceneWidth>,a0
    81ae:	|                 |      move.l 1a808 <zBuffer+0x4>,d1
    81b4:	|                 |      move.l 1a804 <zBuffer>,d0
    81ba:	|                 |      move.l a1,-(sp)
    81bc:	|                 |      move.l a0,-(sp)
    81be:	|                 |      move.l d1,-(sp)
    81c0:	|                 |      move.l d0,-(sp)
    81c2:	|                 |      pea 18a27 <PutChar+0x12f5>
    81c8:	|                 |      moveq #32,d0
    81ca:	|                 |      add.l sp,d0
    81cc:	|                 |      move.l d0,-(sp)
    81ce:	|                 |      jsr 13a6a <sprintf>
    81d4:	|                 |      lea 24(sp),sp
		KPrintF("Z-buffer width and height don't match scene width and height", tmp);
    81d8:	|                 |      moveq #12,d0
    81da:	|                 |      add.l sp,d0
    81dc:	|                 |      move.l d0,-(sp)
    81de:	|                 |      pea 18a42 <PutChar+0x1310>
    81e4:	|                 |      jsr 16c5e <KPrintF>
    81ea:	|                 |      addq.l #8,sp
		return FALSE;
    81ec:	|                 |      clr.w d0
    81ee:	+-----------------|----- bra.w 8454 <setZBuffer+0x412>
	}
		
	zBuffer.numPanels = FGetC (bigDataFile);
    81f2:	|                 \----> move.l 1a78c <bigDataFile>,492(sp)
    81fa:	|                        move.l 1a7ac <DOSBase>,d0
    8200:	|                        movea.l d0,a6
    8202:	|                        move.l 492(sp),d1
    8206:	|                        jsr -306(a6)
    820a:	|                        move.l d0,488(sp)
    820e:	|                        move.l 488(sp),d0
    8212:	|                        move.l d0,1a80c <zBuffer+0x8>
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    8218:	|                        clr.l 544(sp)
    821c:	|                    /-- bra.s 8248 <setZBuffer+0x206>
		yPalette[y] = get2bytes (bigDataFile);
    821e:	|                 /--|-> move.l 1a78c <bigDataFile>,d0
    8224:	|                 |  |   move.l d0,-(sp)
    8226:	|                 |  |   jsr 6bc <get2bytes>
    822c:	|                 |  |   addq.l #4,sp
    822e:	|                 |  |   move.l 544(sp),d1
    8232:	|                 |  |   add.l d1,d1
    8234:	|                 |  |   add.l d1,d1
    8236:	|                 |  |   lea 540(sp),a0
    823a:	|                 |  |   add.l a0,d1
    823c:	|                 |  |   movea.l d1,a0
    823e:	|                 |  |   lea -144(a0),a0
    8242:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    8244:	|                 |  |   addq.l #1,544(sp)
    8248:	|                 |  \-> move.l 1a80c <zBuffer+0x8>,d0
    824e:	|                 |      cmp.l 544(sp),d0
    8252:	|                 \----- bhi.s 821e <setZBuffer+0x1dc>
	}
	sortZPal (yPalette, sorted, zBuffer.numPanels);
    8254:	|                        move.l 1a80c <zBuffer+0x8>,d0
    825a:	|                        move.l d0,-(sp)
    825c:	|                        move.l sp,d0
    825e:	|                        addi.l #336,d0
    8264:	|                        move.l d0,-(sp)
    8266:	|                        move.l sp,d0
    8268:	|                        addi.l #404,d0
    826e:	|                        move.l d0,-(sp)
    8270:	|                        jsr 845e <sortZPal>
    8276:	|                        lea 12(sp),sp
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    827a:	|                        clr.l 544(sp)
    827e:	|                    /-- bra.s 82f6 <setZBuffer+0x2b4>
		zBuffer.panel[y] = yPalette[sorted[y]];
    8280:	|                 /--|-> move.l 544(sp),d0
    8284:	|                 |  |   add.l d0,d0
    8286:	|                 |  |   add.l d0,d0
    8288:	|                 |  |   move.l #540,d1
    828e:	|                 |  |   add.l sp,d1
    8290:	|                 |  |   add.l d1,d0
    8292:	|                 |  |   movea.l d0,a0
    8294:	|                 |  |   lea -208(a0),a0
    8298:	|                 |  |   move.l (a0),d0
    829a:	|                 |  |   add.l d0,d0
    829c:	|                 |  |   add.l d0,d0
    829e:	|                 |  |   lea 540(sp),a0
    82a2:	|                 |  |   add.l a0,d0
    82a4:	|                 |  |   movea.l d0,a0
    82a6:	|                 |  |   lea -144(a0),a0
    82aa:	|                 |  |   move.l (a0),d0
    82ac:	|                 |  |   move.l 544(sp),d1
    82b0:	|                 |  |   addq.l #3,d1
    82b2:	|                 |  |   add.l d1,d1
    82b4:	|                 |  |   movea.l d1,a1
    82b6:	|                 |  |   adda.l d1,a1
    82b8:	|                 |  |   lea 1a804 <zBuffer>,a0
    82be:	|                 |  |   move.l d0,(0,a1,a0.l)
		sortback[sorted[y]] = y; 
    82c2:	|                 |  |   move.l 544(sp),d0
    82c6:	|                 |  |   add.l d0,d0
    82c8:	|                 |  |   add.l d0,d0
    82ca:	|                 |  |   move.l #540,d1
    82d0:	|                 |  |   add.l sp,d1
    82d2:	|                 |  |   add.l d1,d0
    82d4:	|                 |  |   movea.l d0,a0
    82d6:	|                 |  |   lea -208(a0),a0
    82da:	|                 |  |   move.l (a0),d1
    82dc:	|                 |  |   move.l 544(sp),d0
    82e0:	|                 |  |   add.l d1,d1
    82e2:	|                 |  |   add.l d1,d1
    82e4:	|                 |  |   lea 540(sp),a0
    82e8:	|                 |  |   add.l a0,d1
    82ea:	|                 |  |   movea.l d1,a0
    82ec:	|                 |  |   lea -272(a0),a0
    82f0:	|                 |  |   move.l d0,(a0)
	for (y = 0; y < (unsigned int) zBuffer.numPanels; y ++) {
    82f2:	|                 |  |   addq.l #1,544(sp)
    82f6:	|                 |  \-> move.l 1a80c <zBuffer+0x8>,d0
    82fc:	|                 |      cmp.l 544(sp),d0
    8300:	|                 \----- bhi.w 8280 <setZBuffer+0x23e>
	}
	
	int picWidth = sceneWidth;
    8304:	|                        move.l 1a894 <sceneWidth>,d0
    830a:	|                        move.l d0,484(sp)
	int picHeight = sceneHeight;
    830e:	|                        move.l 1a898 <sceneHeight>,d0
    8314:	|                        move.l d0,480(sp)

	zBuffer.tex = AllocVec(picHeight*picWidth,MEMF_ANY);
    8318:	|                        move.l 484(sp),-(sp)
    831c:	|                        move.l 484(sp),-(sp)
    8320:	|                        jsr 1761c <__mulsi3>
    8326:	|                        addq.l #8,sp
    8328:	|                        move.l d0,476(sp)
    832c:	|                        clr.l 472(sp)
    8330:	|                        move.l 1a7a4 <SysBase>,d0
    8336:	|                        movea.l d0,a6
    8338:	|                        move.l 476(sp),d0
    833c:	|                        move.l 472(sp),d1
    8340:	|                        jsr -684(a6)
    8344:	|                        move.l d0,468(sp)
    8348:	|                        move.l 468(sp),d0
    834c:	|                        move.l d0,1a854 <zBuffer+0x50>
	if (!zBuffer.tex) {
    8352:	|                        move.l 1a854 <zBuffer+0x50>,d0
    8358:	|                    /-- bne.s 836e <setZBuffer+0x32c>
		KPrintF("setZBuffer: Cannot allocate memory");
    835a:	|                    |   pea 18a7f <PutChar+0x134d>
    8360:	|                    |   jsr 16c5e <KPrintF>
    8366:	|                    |   addq.l #4,sp
		return FALSE;
    8368:	|                    |   clr.w d0
    836a:	+--------------------|-- bra.w 8454 <setZBuffer+0x412>
	}

	for (y = 0; y < sceneHeight; y ++) {
    836e:	|                    \-> clr.l 544(sp)
    8372:	|     /----------------- bra.w 843e <setZBuffer+0x3fc>
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    8376:	|  /--|----------------> clr.l 536(sp)
    837a:	|  |  |     /----------- bra.w 842a <setZBuffer+0x3e8>
			if (stillToGo == 0) {
    837e:	|  |  |  /--|----------> tst.l 528(sp)
    8382:	|  |  |  |  |  /-------- bne.s 83e0 <setZBuffer+0x39e>
				n = FGetC (bigDataFile);
    8384:	|  |  |  |  |  |         move.l 1a78c <bigDataFile>,464(sp)
    838c:	|  |  |  |  |  |         move.l 1a7ac <DOSBase>,d0
    8392:	|  |  |  |  |  |         movea.l d0,a6
    8394:	|  |  |  |  |  |         move.l 464(sp),d1
    8398:	|  |  |  |  |  |         jsr -306(a6)
    839c:	|  |  |  |  |  |         move.l d0,460(sp)
    83a0:	|  |  |  |  |  |         move.l 460(sp),d0
    83a4:	|  |  |  |  |  |         move.l d0,532(sp)
				stillToGo = n >> 4;
    83a8:	|  |  |  |  |  |         move.l 532(sp),d0
    83ac:	|  |  |  |  |  |         asr.l #4,d0
    83ae:	|  |  |  |  |  |         move.l d0,528(sp)
				if (stillToGo == 15) stillToGo = get2bytes (bigDataFile) + 16l;
    83b2:	|  |  |  |  |  |         moveq #15,d0
    83b4:	|  |  |  |  |  |         cmp.l 528(sp),d0
    83b8:	|  |  |  |  |  |  /----- bne.s 83d6 <setZBuffer+0x394>
    83ba:	|  |  |  |  |  |  |      move.l 1a78c <bigDataFile>,d0
    83c0:	|  |  |  |  |  |  |      move.l d0,-(sp)
    83c2:	|  |  |  |  |  |  |      jsr 6bc <get2bytes>
    83c8:	|  |  |  |  |  |  |      addq.l #4,sp
    83ca:	|  |  |  |  |  |  |      movea.l d0,a0
    83cc:	|  |  |  |  |  |  |      lea 16(a0),a0
    83d0:	|  |  |  |  |  |  |      move.l a0,528(sp)
    83d4:	|  |  |  |  |  |  |  /-- bra.s 83da <setZBuffer+0x398>
				else stillToGo ++;
    83d6:	|  |  |  |  |  |  \--|-> addq.l #1,528(sp)
				n &= 15;
    83da:	|  |  |  |  |  |     \-> moveq #15,d1
    83dc:	|  |  |  |  |  |         and.l d1,532(sp)
			}
			zBuffer.tex[y*picWidth + x] = sortback[n]*16;
    83e0:	|  |  |  |  |  \-------> move.l 532(sp),d0
    83e4:	|  |  |  |  |            add.l d0,d0
    83e6:	|  |  |  |  |            add.l d0,d0
    83e8:	|  |  |  |  |            lea 540(sp),a0
    83ec:	|  |  |  |  |            add.l a0,d0
    83ee:	|  |  |  |  |            movea.l d0,a0
    83f0:	|  |  |  |  |            lea -272(a0),a0
    83f4:	|  |  |  |  |            move.l (a0),d0
    83f6:	|  |  |  |  |            move.l d0,d2
    83f8:	|  |  |  |  |            move.l 1a854 <zBuffer+0x50>,d3
    83fe:	|  |  |  |  |            move.l 484(sp),d0
    8402:	|  |  |  |  |            move.l 544(sp),-(sp)
    8406:	|  |  |  |  |            move.l d0,-(sp)
    8408:	|  |  |  |  |            jsr 1761c <__mulsi3>
    840e:	|  |  |  |  |            addq.l #8,sp
    8410:	|  |  |  |  |            move.l d0,d1
    8412:	|  |  |  |  |            move.l 536(sp),d0
    8416:	|  |  |  |  |            add.l d1,d0
    8418:	|  |  |  |  |            movea.l d3,a0
    841a:	|  |  |  |  |            adda.l d0,a0
    841c:	|  |  |  |  |            move.b d2,d0
    841e:	|  |  |  |  |            lsl.b #4,d0
    8420:	|  |  |  |  |            move.b d0,(a0)
			stillToGo --;
    8422:	|  |  |  |  |            subq.l #1,528(sp)
		for (x = 0; (unsigned int) x < sceneWidth; x ++) {
    8426:	|  |  |  |  |            addq.l #1,536(sp)
    842a:	|  |  |  |  \----------> move.l 536(sp),d1
    842e:	|  |  |  |               move.l 1a894 <sceneWidth>,d0
    8434:	|  |  |  |               cmp.l d1,d0
    8436:	|  |  |  \-------------- bhi.w 837e <setZBuffer+0x33c>
	for (y = 0; y < sceneHeight; y ++) {
    843a:	|  |  |                  addq.l #1,544(sp)
    843e:	|  |  \----------------> move.l 1a898 <sceneHeight>,d0
    8444:	|  |                     cmp.l 544(sp),d0
    8448:	|  \-------------------- bhi.w 8376 <setZBuffer+0x334>
		}
	}

	finishAccess ();
    844c:	|                        jsr 6550 <finishAccess>
	
	return TRUE;
    8452:	|                        moveq #1,d0
}
    8454:	\----------------------> movem.l (sp)+,d2-d3/a6
    8458:	                         lea 528(sp),sp
    845c:	                         rts

0000845e <sortZPal>:

void sortZPal (int *oldpal, int *newpal, int size) {
    845e:	             subq.l #8,sp
	int i, tmp;

	for (i = 0; i < size; i ++) {
    8460:	             clr.l 4(sp)
    8464:	         /-- bra.s 847c <sortZPal+0x1e>
		newpal[i] = i;
    8466:	      /--|-> move.l 4(sp),d0
    846a:	      |  |   add.l d0,d0
    846c:	      |  |   add.l d0,d0
    846e:	      |  |   movea.l 16(sp),a0
    8472:	      |  |   adda.l d0,a0
    8474:	      |  |   move.l 4(sp),(a0)
	for (i = 0; i < size; i ++) {
    8478:	      |  |   addq.l #1,4(sp)
    847c:	      |  \-> move.l 4(sp),d0
    8480:	      |      cmp.l 20(sp),d0
    8484:	      \----- blt.s 8466 <sortZPal+0x8>
	}

	if (size < 2) return;		
    8486:	             moveq #1,d0
    8488:	             cmp.l 20(sp),d0
    848c:	/----------- bge.w 853e <sortZPal+0xe0>
		
	for (i = 1; i < size; i ++) {
    8490:	|            moveq #1,d0
    8492:	|            move.l d0,4(sp)
    8496:	|     /----- bra.w 8530 <sortZPal+0xd2>
		if (oldpal[newpal[i]] < oldpal[newpal[i-1]]) {
    849a:	|  /--|----> move.l 4(sp),d0
    849e:	|  |  |      add.l d0,d0
    84a0:	|  |  |      add.l d0,d0
    84a2:	|  |  |      movea.l 16(sp),a0
    84a6:	|  |  |      adda.l d0,a0
    84a8:	|  |  |      move.l (a0),d0
    84aa:	|  |  |      add.l d0,d0
    84ac:	|  |  |      add.l d0,d0
    84ae:	|  |  |      movea.l 12(sp),a0
    84b2:	|  |  |      adda.l d0,a0
    84b4:	|  |  |      move.l (a0),d1
    84b6:	|  |  |      move.l 4(sp),d0
    84ba:	|  |  |      addi.l #1073741823,d0
    84c0:	|  |  |      add.l d0,d0
    84c2:	|  |  |      add.l d0,d0
    84c4:	|  |  |      movea.l 16(sp),a0
    84c8:	|  |  |      adda.l d0,a0
    84ca:	|  |  |      move.l (a0),d0
    84cc:	|  |  |      add.l d0,d0
    84ce:	|  |  |      add.l d0,d0
    84d0:	|  |  |      movea.l 12(sp),a0
    84d4:	|  |  |      adda.l d0,a0
    84d6:	|  |  |      move.l (a0),d0
    84d8:	|  |  |      cmp.l d1,d0
    84da:	|  |  |  /-- ble.s 852c <sortZPal+0xce>
			tmp = newpal[i];
    84dc:	|  |  |  |   move.l 4(sp),d0
    84e0:	|  |  |  |   add.l d0,d0
    84e2:	|  |  |  |   add.l d0,d0
    84e4:	|  |  |  |   movea.l 16(sp),a0
    84e8:	|  |  |  |   adda.l d0,a0
    84ea:	|  |  |  |   move.l (a0),(sp)
			newpal[i] = newpal[i-1];
    84ec:	|  |  |  |   move.l 4(sp),d0
    84f0:	|  |  |  |   addi.l #1073741823,d0
    84f6:	|  |  |  |   add.l d0,d0
    84f8:	|  |  |  |   add.l d0,d0
    84fa:	|  |  |  |   movea.l 16(sp),a1
    84fe:	|  |  |  |   adda.l d0,a1
    8500:	|  |  |  |   move.l 4(sp),d0
    8504:	|  |  |  |   add.l d0,d0
    8506:	|  |  |  |   add.l d0,d0
    8508:	|  |  |  |   movea.l 16(sp),a0
    850c:	|  |  |  |   adda.l d0,a0
    850e:	|  |  |  |   move.l (a1),d0
    8510:	|  |  |  |   move.l d0,(a0)
			newpal[i-1] = tmp;
    8512:	|  |  |  |   move.l 4(sp),d0
    8516:	|  |  |  |   addi.l #1073741823,d0
    851c:	|  |  |  |   add.l d0,d0
    851e:	|  |  |  |   add.l d0,d0
    8520:	|  |  |  |   movea.l 16(sp),a0
    8524:	|  |  |  |   adda.l d0,a0
    8526:	|  |  |  |   move.l (sp),(a0)
			i = 0;
    8528:	|  |  |  |   clr.l 4(sp)
	for (i = 1; i < size; i ++) {
    852c:	|  |  |  \-> addq.l #1,4(sp)
    8530:	|  |  \----> move.l 4(sp),d0
    8534:	|  |         cmp.l 20(sp),d0
    8538:	|  \-------- blt.w 849a <sortZPal+0x3c>
    853c:	|        /-- bra.s 8540 <sortZPal+0xe2>
	if (size < 2) return;		
    853e:	\--------|-> nop
		}
	}
    8540:	         \-> addq.l #8,sp
    8542:	             rts

00008544 <forgetSpriteBank>:
extern int cameraX, cameraY;
extern struct inputType input;


void forgetSpriteBank (struct loadedSpriteBank * forgetme)
{			
    8544:	          lea -36(sp),sp
    8548:	          move.l a6,-(sp)
	struct spriteBank *spritebanktoforget = &forgetme->bank;
    854a:	          move.l 44(sp),d0
    854e:	          addq.l #8,d0
    8550:	          move.l d0,28(sp)
	
	for (int i = 0; i < spritebanktoforget->total; i++) {
    8554:	          clr.l 36(sp)
    8558:	   /----- bra.s 859e <forgetSpriteBank+0x5a>
		struct sprite *cursprite = &spritebanktoforget->sprites[i];		
    855a:	/--|----> movea.l 28(sp),a0
    855e:	|  |      movea.l 8(a0),a0
    8562:	|  |      move.l 36(sp),d1
    8566:	|  |      move.l d1,d0
    8568:	|  |      lsl.l #3,d0
    856a:	|  |      sub.l d1,d0
    856c:	|  |      add.l d0,d0
    856e:	|  |      add.l d0,d0
    8570:	|  |      adda.l d0,a0
    8572:	|  |      move.l a0,8(sp)
		if(cursprite->data) {		
    8576:	|  |      movea.l 8(sp),a0
    857a:	|  |      move.l 24(a0),d0
    857e:	|  |  /-- beq.s 859a <forgetSpriteBank+0x56>
			FreeVec(cursprite->data);			
    8580:	|  |  |   movea.l 8(sp),a0
    8584:	|  |  |   move.l 24(a0),4(sp)
    858a:	|  |  |   move.l 1a7a4 <SysBase>,d0
    8590:	|  |  |   movea.l d0,a6
    8592:	|  |  |   movea.l 4(sp),a1
    8596:	|  |  |   jsr -690(a6)
	for (int i = 0; i < spritebanktoforget->total; i++) {
    859a:	|  |  \-> addq.l #1,36(sp)
    859e:	|  \----> movea.l 28(sp),a0
    85a2:	|         move.l (a0),d0
    85a4:	|         cmp.l 36(sp),d0
    85a8:	\-------- bgt.s 855a <forgetSpriteBank+0x16>
		}
	}
	FreeVec(spritebanktoforget->sprites);
    85aa:	          movea.l 28(sp),a0
    85ae:	          move.l 8(a0),24(sp)
    85b4:	          move.l 1a7a4 <SysBase>,d0
    85ba:	          movea.l d0,a6
    85bc:	          movea.l 24(sp),a1
    85c0:	          jsr -690(a6)
	FreeVec(spritebanktoforget);
    85c4:	          move.l 28(sp),20(sp)
    85ca:	          move.l 1a7a4 <SysBase>,d0
    85d0:	          movea.l d0,a6
    85d2:	          movea.l 20(sp),a1
    85d6:	          jsr -690(a6)
	
	struct loadedSpriteBank *precedingbank = allLoadedBanks;
    85da:	          move.l 1a910 <allLoadedBanks>,32(sp)
	
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    85e2:	      /-- bra.s 85ee <forgetSpriteBank+0xaa>
	{
		precedingbank = precedingbank->next;
    85e4:	   /--|-> movea.l 32(sp),a0
    85e8:	   |  |   move.l 22(a0),32(sp)
	while(precedingbank->next->ID != forgetme->ID && precedingbank != NULL)
    85ee:	   |  \-> movea.l 32(sp),a0
    85f2:	   |      movea.l 22(a0),a0
    85f6:	   |      move.l (a0),d1
    85f8:	   |      movea.l 44(sp),a0
    85fc:	   |      move.l (a0),d0
    85fe:	   |      cmp.l d1,d0
    8600:	   |  /-- beq.s 8608 <forgetSpriteBank+0xc4>
    8602:	   |  |   tst.l 32(sp)
    8606:	   \--|-- bne.s 85e4 <forgetSpriteBank+0xa0>
	}	

	if(precedingbank)
    8608:	      \-> tst.l 32(sp)
    860c:	   /----- beq.s 8636 <forgetSpriteBank+0xf2>
	{
		//Forget element in the middle of the chain or the last one
		precedingbank->next = forgetme->next;
    860e:	   |      movea.l 44(sp),a0
    8612:	   |      move.l 22(a0),d0
    8616:	   |      movea.l 32(sp),a0
    861a:	   |      move.l d0,22(a0)
		FreeVec( forgetme);
    861e:	   |      move.l 44(sp),12(sp)
    8624:	   |      move.l 1a7a4 <SysBase>,d0
    862a:	   |      movea.l d0,a6
    862c:	   |      movea.l 12(sp),a1
    8630:	   |      jsr -690(a6)
	{
		//Forget first element in the chain
		allLoadedBanks = allLoadedBanks->next;
		FreeVec( forgetme);
	}	
}
    8634:	   |  /-- bra.s 865c <forgetSpriteBank+0x118>
		allLoadedBanks = allLoadedBanks->next;
    8636:	   \--|-> movea.l 1a910 <allLoadedBanks>,a0
    863c:	      |   move.l 22(a0),d0
    8640:	      |   move.l d0,1a910 <allLoadedBanks>
		FreeVec( forgetme);
    8646:	      |   move.l 44(sp),16(sp)
    864c:	      |   move.l 1a7a4 <SysBase>,d0
    8652:	      |   movea.l d0,a6
    8654:	      |   movea.l 16(sp),a1
    8658:	      |   jsr -690(a6)
}
    865c:	      \-> nop
    865e:	          movea.l (sp)+,a6
    8660:	          lea 36(sp),sp
    8664:	          rts

00008666 <loadSpriteBank>:

BOOL loadSpriteBank (int fileNum, struct spriteBank *loadhere, BOOL isFont) {
    8666:	                      lea -84(sp),sp
    866a:	                      movem.l d2-d4/a2/a6,-(sp)
    866e:	                      move.l 116(sp),d0
    8672:	                      move.w d0,d0
    8674:	                      move.w d0,22(sp)
	int i, tex_num, total, picwidth, picheight, howmany = 0, startIndex = 0;
    8678:	                      clr.l 94(sp)
    867c:	                      clr.l 90(sp)
	int *totalwidth, *maxheight;
	int numTextures = 0;
    8680:	                      clr.l 86(sp)
	UBYTE *data;

	if (!openFileFromNum(fileNum)) {
    8684:	                      move.l 108(sp),-(sp)
    8688:	                      jsr 6658 <openFileFromNum>
    868e:	                      addq.l #4,sp
    8690:	                      tst.l d0
    8692:	                  /-- bne.s 86a8 <loadSpriteBank+0x42>
		KPrintF("loadSpriteBank: Can't open sprite bank / font");
    8694:	                  |   pea 18aa2 <PutChar+0x1370>
    869a:	                  |   jsr 16c5e <KPrintF>
    86a0:	                  |   addq.l #4,sp
		return FALSE;
    86a2:	                  |   clr.w d0
    86a4:	/-----------------|-- bra.w 8a70 <loadSpriteBank+0x40a>
	}

	loadhere->isFont = isFont;
    86a8:	|                 \-> movea.l 112(sp),a0
    86ac:	|                     move.w 22(sp),12(a0)

	get2bytes(bigDataFile); // Ignore first 2 bytes
    86b2:	|                     move.l 1a78c <bigDataFile>,d0
    86b8:	|                     move.l d0,-(sp)
    86ba:	|                     jsr 6bc <get2bytes>
    86c0:	|                     addq.l #4,sp
	loadhere->type = FGetC(bigDataFile);
    86c2:	|                     move.l 1a78c <bigDataFile>,82(sp)
    86ca:	|                     move.l 1a7ac <DOSBase>,d0
    86d0:	|                     movea.l d0,a6
    86d2:	|                     move.l 82(sp),d1
    86d6:	|                     jsr -306(a6)
    86da:	|                     move.l d0,78(sp)
    86de:	|                     move.l 78(sp),d0
    86e2:	|                     movea.l 112(sp),a0
    86e6:	|                     move.l d0,4(a0)
	total = get2bytes(bigDataFile);
    86ea:	|                     move.l 1a78c <bigDataFile>,d0
    86f0:	|                     move.l d0,-(sp)
    86f2:	|                     jsr 6bc <get2bytes>
    86f8:	|                     addq.l #4,sp
    86fa:	|                     move.l d0,74(sp)

	if (total <= 0) {
    86fe:	|                 /-- bgt.s 8714 <loadSpriteBank+0xae>
		KPrintF("loadSpriteBank: No sprites in bank or invalid sprite bank file\n");
    8700:	|                 |   pea 18ad0 <PutChar+0x139e>
    8706:	|                 |   jsr 16c5e <KPrintF>
    870c:	|                 |   addq.l #4,sp
		return FALSE;
    870e:	|                 |   clr.w d0
    8710:	+-----------------|-- bra.w 8a70 <loadSpriteBank+0x40a>
	}
	if (loadhere->type > 3) {
    8714:	|                 \-> movea.l 112(sp),a0
    8718:	|                     move.l 4(a0),d0
    871c:	|                     moveq #3,d1
    871e:	|                     cmp.l d0,d1
    8720:	|                 /-- bge.s 8736 <loadSpriteBank+0xd0>
		KPrintF("loadSpriteBank: Unsupported sprite bank file format\n");
    8722:	|                 |   pea 18b10 <PutChar+0x13de>
    8728:	|                 |   jsr 16c5e <KPrintF>
    872e:	|                 |   addq.l #4,sp
		return FALSE;
    8730:	|                 |   clr.w d0
    8732:	+-----------------|-- bra.w 8a70 <loadSpriteBank+0x40a>
	}

	loadhere->total = total;
    8736:	|                 \-> movea.l 112(sp),a0
    873a:	|                     move.l 74(sp),(a0)
	loadhere->sprites = AllocVec(sizeof(struct sprite) * total, MEMF_ANY);
    873e:	|                     move.l 74(sp),d1
    8742:	|                     move.l d1,d0
    8744:	|                     lsl.l #3,d0
    8746:	|                     sub.l d1,d0
    8748:	|                     add.l d0,d0
    874a:	|                     add.l d0,d0
    874c:	|                     move.l d0,70(sp)
    8750:	|                     clr.l 66(sp)
    8754:	|                     move.l 1a7a4 <SysBase>,d0
    875a:	|                     movea.l d0,a6
    875c:	|                     move.l 70(sp),d0
    8760:	|                     move.l 66(sp),d1
    8764:	|                     jsr -684(a6)
    8768:	|                     move.l d0,62(sp)
    876c:	|                     move.l 62(sp),d0
    8770:	|                     movea.l 112(sp),a0
    8774:	|                     move.l d0,8(a0)
	if (!loadhere->sprites) return FALSE;	
    8778:	|                     movea.l 112(sp),a0
    877c:	|                     move.l 8(a0),d0
    8780:	|                 /-- bne.s 8788 <loadSpriteBank+0x122>
    8782:	|                 |   clr.w d0
    8784:	+-----------------|-- bra.w 8a70 <loadSpriteBank+0x40a>
	
	startIndex = 1;
    8788:	|                 \-> moveq #1,d0
    878a:	|                     move.l d0,90(sp)

	for (i = 0; i < total; i++) {
    878e:	|                     clr.l 100(sp)
    8792:	|     /-------------- bra.w 8a5c <loadSpriteBank+0x3f6>
		UWORD width = get2bytes(bigDataFile);
    8796:	|  /--|-------------> move.l 1a78c <bigDataFile>,d0
    879c:	|  |  |               move.l d0,-(sp)
    879e:	|  |  |               jsr 6bc <get2bytes>
    87a4:	|  |  |               addq.l #4,sp
    87a6:	|  |  |               move.w d0,60(sp)
		loadhere->sprites[i].width = width;
    87aa:	|  |  |               movea.l 112(sp),a0
    87ae:	|  |  |               movea.l 8(a0),a0
    87b2:	|  |  |               move.l 100(sp),d1
    87b6:	|  |  |               move.l d1,d0
    87b8:	|  |  |               lsl.l #3,d0
    87ba:	|  |  |               sub.l d1,d0
    87bc:	|  |  |               add.l d0,d0
    87be:	|  |  |               add.l d0,d0
    87c0:	|  |  |               adda.l d0,a0
    87c2:	|  |  |               moveq #0,d0
    87c4:	|  |  |               move.w 60(sp),d0
    87c8:	|  |  |               move.l d0,(a0)
		loadhere->sprites[i].height = get2bytes(bigDataFile);
    87ca:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    87d0:	|  |  |               movea.l 112(sp),a0
    87d4:	|  |  |               movea.l 8(a0),a0
    87d8:	|  |  |               move.l 100(sp),d1
    87dc:	|  |  |               move.l d1,d0
    87de:	|  |  |               lsl.l #3,d0
    87e0:	|  |  |               sub.l d1,d0
    87e2:	|  |  |               add.l d0,d0
    87e4:	|  |  |               add.l d0,d0
    87e6:	|  |  |               lea (0,a0,d0.l),a2
    87ea:	|  |  |               move.l a1,-(sp)
    87ec:	|  |  |               jsr 6bc <get2bytes>
    87f2:	|  |  |               addq.l #4,sp
    87f4:	|  |  |               move.l d0,4(a2)
		loadhere->sprites[i].xhot = get2bytes(bigDataFile);
    87f8:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    87fe:	|  |  |               movea.l 112(sp),a0
    8802:	|  |  |               movea.l 8(a0),a0
    8806:	|  |  |               move.l 100(sp),d1
    880a:	|  |  |               move.l d1,d0
    880c:	|  |  |               lsl.l #3,d0
    880e:	|  |  |               sub.l d1,d0
    8810:	|  |  |               add.l d0,d0
    8812:	|  |  |               add.l d0,d0
    8814:	|  |  |               lea (0,a0,d0.l),a2
    8818:	|  |  |               move.l a1,-(sp)
    881a:	|  |  |               jsr 6bc <get2bytes>
    8820:	|  |  |               addq.l #4,sp
    8822:	|  |  |               move.l d0,8(a2)
		loadhere->sprites[i].yhot = get2bytes(bigDataFile);
    8826:	|  |  |               movea.l 1a78c <bigDataFile>,a1
    882c:	|  |  |               movea.l 112(sp),a0
    8830:	|  |  |               movea.l 8(a0),a0
    8834:	|  |  |               move.l 100(sp),d1
    8838:	|  |  |               move.l d1,d0
    883a:	|  |  |               lsl.l #3,d0
    883c:	|  |  |               sub.l d1,d0
    883e:	|  |  |               add.l d0,d0
    8840:	|  |  |               add.l d0,d0
    8842:	|  |  |               lea (0,a0,d0.l),a2
    8846:	|  |  |               move.l a1,-(sp)
    8848:	|  |  |               jsr 6bc <get2bytes>
    884e:	|  |  |               addq.l #4,sp
    8850:	|  |  |               move.l d0,12(a2)

		UWORD size;
		
		switch( loadhere->type) 
    8854:	|  |  |               movea.l 112(sp),a0
    8858:	|  |  |               move.l 4(a0),d0
    885c:	|  |  |               moveq #3,d1
    885e:	|  |  |               cmp.l d0,d1
    8860:	|  |  |     /-------- beq.w 88fc <loadSpriteBank+0x296>
    8864:	|  |  |     |         moveq #3,d1
    8866:	|  |  |     |         cmp.l d0,d1
    8868:	|  |  |  /--|-------- blt.w 8994 <loadSpriteBank+0x32e>
    886c:	|  |  |  |  |         moveq #1,d1
    886e:	|  |  |  |  |         cmp.l d0,d1
    8870:	|  |  |  |  |     /-- beq.s 887c <loadSpriteBank+0x216>
    8872:	|  |  |  |  |     |   moveq #2,d1
    8874:	|  |  |  |  |     |   cmp.l d0,d1
    8876:	|  |  |  |  |  /--|-- beq.s 88a8 <loadSpriteBank+0x242>
    8878:	|  |  |  +--|--|--|-- bra.w 8994 <loadSpriteBank+0x32e>
		{
			case 1: //Sprite
				size = 4*loadhere->sprites[i].height+8;
    887c:	|  |  |  |  |  |  \-> movea.l 112(sp),a0
    8880:	|  |  |  |  |  |      movea.l 8(a0),a0
    8884:	|  |  |  |  |  |      move.l 100(sp),d1
    8888:	|  |  |  |  |  |      move.l d1,d0
    888a:	|  |  |  |  |  |      lsl.l #3,d0
    888c:	|  |  |  |  |  |      sub.l d1,d0
    888e:	|  |  |  |  |  |      add.l d0,d0
    8890:	|  |  |  |  |  |      add.l d0,d0
    8892:	|  |  |  |  |  |      adda.l d0,a0
    8894:	|  |  |  |  |  |      move.l 4(a0),d0
    8898:	|  |  |  |  |  |      addq.l #2,d0
    889a:	|  |  |  |  |  |      move.l d0,d0
    889c:	|  |  |  |  |  |      add.w d0,d0
    889e:	|  |  |  |  |  |      add.w d0,d0
    88a0:	|  |  |  |  |  |      move.w d0,98(sp)
				break;
    88a4:	|  |  |  +--|--|----- bra.w 8994 <loadSpriteBank+0x32e>
			case 2: //Bob
				size = loadhere->sprites[i].width / 8 * loadhere->sprites[i].height * 6;
    88a8:	|  |  |  |  |  \----> movea.l 112(sp),a0
    88ac:	|  |  |  |  |         movea.l 8(a0),a0
    88b0:	|  |  |  |  |         move.l 100(sp),d1
    88b4:	|  |  |  |  |         move.l d1,d0
    88b6:	|  |  |  |  |         lsl.l #3,d0
    88b8:	|  |  |  |  |         sub.l d1,d0
    88ba:	|  |  |  |  |         add.l d0,d0
    88bc:	|  |  |  |  |         add.l d0,d0
    88be:	|  |  |  |  |         adda.l d0,a0
    88c0:	|  |  |  |  |         move.l (a0),d0
    88c2:	|  |  |  |  |     /-- bpl.s 88c6 <loadSpriteBank+0x260>
    88c4:	|  |  |  |  |     |   addq.l #7,d0
    88c6:	|  |  |  |  |     \-> asr.l #3,d0
    88c8:	|  |  |  |  |         move.l d0,d2
    88ca:	|  |  |  |  |         movea.l 112(sp),a0
    88ce:	|  |  |  |  |         movea.l 8(a0),a0
    88d2:	|  |  |  |  |         move.l 100(sp),d1
    88d6:	|  |  |  |  |         move.l d1,d0
    88d8:	|  |  |  |  |         lsl.l #3,d0
    88da:	|  |  |  |  |         sub.l d1,d0
    88dc:	|  |  |  |  |         add.l d0,d0
    88de:	|  |  |  |  |         add.l d0,d0
    88e0:	|  |  |  |  |         adda.l d0,a0
    88e2:	|  |  |  |  |         move.l 4(a0),d0
    88e6:	|  |  |  |  |         move.l d0,d0
    88e8:	|  |  |  |  |         move.w d2,d1
    88ea:	|  |  |  |  |         muls.w d0,d1
    88ec:	|  |  |  |  |         move.w d1,d0
    88ee:	|  |  |  |  |         add.w d0,d0
    88f0:	|  |  |  |  |         add.w d1,d0
    88f2:	|  |  |  |  |         add.w d0,d0
    88f4:	|  |  |  |  |         move.w d0,98(sp)
				break;
    88f8:	|  |  |  +--|-------- bra.w 8994 <loadSpriteBank+0x32e>
			case 3: //Font
				UWORD widthextra = loadhere->sprites[i].width % 16 > 0 ? 2 : 0;
    88fc:	|  |  |  |  \-------> movea.l 112(sp),a0
    8900:	|  |  |  |            movea.l 8(a0),a0
    8904:	|  |  |  |            move.l 100(sp),d1
    8908:	|  |  |  |            move.l d1,d0
    890a:	|  |  |  |            lsl.l #3,d0
    890c:	|  |  |  |            sub.l d1,d0
    890e:	|  |  |  |            add.l d0,d0
    8910:	|  |  |  |            add.l d0,d0
    8912:	|  |  |  |            adda.l d0,a0
    8914:	|  |  |  |            move.l (a0),d0
    8916:	|  |  |  |            andi.l #-2147483633,d0
    891c:	|  |  |  |        /-- bpl.s 8926 <loadSpriteBank+0x2c0>
    891e:	|  |  |  |        |   subq.l #1,d0
    8920:	|  |  |  |        |   moveq #-16,d1
    8922:	|  |  |  |        |   or.l d1,d0
    8924:	|  |  |  |        |   addq.l #1,d0
    8926:	|  |  |  |        \-> tst.l d0
    8928:	|  |  |  |     /----- ble.s 892e <loadSpriteBank+0x2c8>
    892a:	|  |  |  |     |      moveq #2,d0
    892c:	|  |  |  |     |  /-- bra.s 8930 <loadSpriteBank+0x2ca>
    892e:	|  |  |  |     \--|-> clr.w d0
    8930:	|  |  |  |        \-> move.w d0,58(sp)
				size = ((loadhere->sprites[i].width  / 16) * 2 + widthextra) * loadhere->sprites[i].height;
    8934:	|  |  |  |            movea.l 112(sp),a0
    8938:	|  |  |  |            movea.l 8(a0),a0
    893c:	|  |  |  |            move.l 100(sp),d1
    8940:	|  |  |  |            move.l d1,d0
    8942:	|  |  |  |            lsl.l #3,d0
    8944:	|  |  |  |            sub.l d1,d0
    8946:	|  |  |  |            add.l d0,d0
    8948:	|  |  |  |            add.l d0,d0
    894a:	|  |  |  |            adda.l d0,a0
    894c:	|  |  |  |            move.l (a0),d0
    894e:	|  |  |  |            movea.l d0,a0
    8950:	|  |  |  |            cmpa.w #0,a0
    8954:	|  |  |  |        /-- bge.s 895a <loadSpriteBank+0x2f4>
    8956:	|  |  |  |        |   lea 15(a0),a0
    895a:	|  |  |  |        \-> move.l a0,d0
    895c:	|  |  |  |            asr.l #4,d0
    895e:	|  |  |  |            add.l d0,d0
    8960:	|  |  |  |            move.l d0,d1
    8962:	|  |  |  |            moveq #0,d0
    8964:	|  |  |  |            move.w 58(sp),d0
    8968:	|  |  |  |            add.l d1,d0
    896a:	|  |  |  |            move.l d0,d2
    896c:	|  |  |  |            movea.l 112(sp),a0
    8970:	|  |  |  |            movea.l 8(a0),a0
    8974:	|  |  |  |            move.l 100(sp),d1
    8978:	|  |  |  |            move.l d1,d0
    897a:	|  |  |  |            lsl.l #3,d0
    897c:	|  |  |  |            sub.l d1,d0
    897e:	|  |  |  |            add.l d0,d0
    8980:	|  |  |  |            add.l d0,d0
    8982:	|  |  |  |            adda.l d0,a0
    8984:	|  |  |  |            move.l 4(a0),d0
    8988:	|  |  |  |            move.l d0,d0
    898a:	|  |  |  |            move.w d2,d1
    898c:	|  |  |  |            muls.w d0,d1
    898e:	|  |  |  |            move.w d1,98(sp)
				break;
    8992:	|  |  |  |            nop
		}

		loadhere->sprites[i].data = AllocVec(sizeof(UWORD) * size, MEMF_CHIP);
    8994:	|  |  |  \----------> moveq #0,d0
    8996:	|  |  |               move.w 98(sp),d0
    899a:	|  |  |               add.l d0,d0
    899c:	|  |  |               move.l d0,54(sp)
    89a0:	|  |  |               moveq #2,d0
    89a2:	|  |  |               move.l d0,50(sp)
    89a6:	|  |  |               move.l 1a7a4 <SysBase>,d0
    89ac:	|  |  |               movea.l d0,a6
    89ae:	|  |  |               move.l 54(sp),d0
    89b2:	|  |  |               move.l 50(sp),d1
    89b6:	|  |  |               jsr -684(a6)
    89ba:	|  |  |               move.l d0,46(sp)
    89be:	|  |  |               movea.l 46(sp),a1
    89c2:	|  |  |               movea.l 112(sp),a0
    89c6:	|  |  |               movea.l 8(a0),a0
    89ca:	|  |  |               move.l 100(sp),d1
    89ce:	|  |  |               move.l d1,d0
    89d0:	|  |  |               lsl.l #3,d0
    89d2:	|  |  |               sub.l d1,d0
    89d4:	|  |  |               add.l d0,d0
    89d6:	|  |  |               add.l d0,d0
    89d8:	|  |  |               adda.l d0,a0
    89da:	|  |  |               move.l a1,24(a0)
		UWORD count = FRead(bigDataFile, loadhere->sprites[i].data, 2, size / 2);
    89de:	|  |  |               move.l 1a78c <bigDataFile>,42(sp)
    89e6:	|  |  |               movea.l 112(sp),a0
    89ea:	|  |  |               movea.l 8(a0),a0
    89ee:	|  |  |               move.l 100(sp),d1
    89f2:	|  |  |               move.l d1,d0
    89f4:	|  |  |               lsl.l #3,d0
    89f6:	|  |  |               sub.l d1,d0
    89f8:	|  |  |               add.l d0,d0
    89fa:	|  |  |               add.l d0,d0
    89fc:	|  |  |               adda.l d0,a0
    89fe:	|  |  |               move.l 24(a0),38(sp)
    8a04:	|  |  |               moveq #2,d1
    8a06:	|  |  |               move.l d1,34(sp)
    8a0a:	|  |  |               move.w 98(sp),d0
    8a0e:	|  |  |               lsr.w #1,d0
    8a10:	|  |  |               move.w d0,d0
    8a12:	|  |  |               andi.l #65535,d0
    8a18:	|  |  |               move.l d0,30(sp)
    8a1c:	|  |  |               move.l 1a7ac <DOSBase>,d0
    8a22:	|  |  |               movea.l d0,a6
    8a24:	|  |  |               move.l 42(sp),d1
    8a28:	|  |  |               move.l 38(sp),d2
    8a2c:	|  |  |               move.l 34(sp),d3
    8a30:	|  |  |               move.l 30(sp),d4
    8a34:	|  |  |               jsr -324(a6)
    8a38:	|  |  |               move.l d0,26(sp)
    8a3c:	|  |  |               move.l 26(sp),d0
    8a40:	|  |  |               move.w d0,24(sp)
		if (!count) {
    8a44:	|  |  |           /-- bne.s 8a58 <loadSpriteBank+0x3f2>
			KPrintF("loadSpriteBank: Cannot read sprite Data from File\n");
    8a46:	|  |  |           |   pea 18b45 <PutChar+0x1413>
    8a4c:	|  |  |           |   jsr 16c5e <KPrintF>
    8a52:	|  |  |           |   addq.l #4,sp
			return FALSE;
    8a54:	|  |  |           |   clr.w d0
    8a56:	+--|--|-----------|-- bra.s 8a70 <loadSpriteBank+0x40a>
	for (i = 0; i < total; i++) {
    8a58:	|  |  |           \-> addq.l #1,100(sp)
    8a5c:	|  |  \-------------> move.l 100(sp),d0
    8a60:	|  |                  cmp.l 74(sp),d0
    8a64:	|  \----------------- blt.w 8796 <loadSpriteBank+0x130>
		}
	}

	finishAccess ();
    8a68:	|                     jsr 6550 <finishAccess>

	return TRUE;
    8a6e:	|                     moveq #1,d0
}
    8a70:	\-------------------> movem.l (sp)+,d2-d4/a2/a6
    8a74:	                      lea 84(sp),sp
    8a78:	                      rts

00008a7a <scaleSprite>:

BOOL scaleSprite (struct sprite *single, struct onScreenPerson * thisPerson, BOOL mirror) 
{
    8a7a:	                   lea -16(sp),sp
    8a7e:	                   move.l 28(sp),d0
    8a82:	                   move.w d0,d0
    8a84:	                   move.w d0,2(sp)
	UWORD x =  (UWORD) thisPerson->x - single->xhot;
    8a88:	                   movea.l 24(sp),a0
    8a8c:	                   move.l (a0),d0
    8a8e:	                   move.l d0,-(sp)
    8a90:	                   jsr 173fa <__fixunssfsi>
    8a96:	                   addq.l #4,sp
    8a98:	                   move.l d0,d0
    8a9a:	                   movea.l 20(sp),a0
    8a9e:	                   move.l 8(a0),d1
    8aa2:	                   move.l d1,d1
    8aa4:	                   movea.w d0,a0
    8aa6:	                   suba.w d1,a0
    8aa8:	                   move.w a0,6(sp)
	UWORD y =  (UWORD) thisPerson->y - single->yhot;			
    8aac:	                   movea.l 24(sp),a0
    8ab0:	                   move.l 4(a0),d0
    8ab4:	                   move.l d0,-(sp)
    8ab6:	                   jsr 173fa <__fixunssfsi>
    8abc:	                   addq.l #4,sp
    8abe:	                   move.l d0,d0
    8ac0:	                   movea.l 20(sp),a0
    8ac4:	                   move.l 12(a0),d1
    8ac8:	                   move.l d1,d1
    8aca:	                   movea.w d0,a0
    8acc:	                   suba.w d1,a0
    8ace:	                   move.w a0,4(sp)

	CstScaleSprite( single, thisPerson, (WORD) x, (WORD) y,SCREEN);
    8ad2:	                   move.w 4(sp),d0
    8ad6:	                   movea.w d0,a1
    8ad8:	                   move.w 6(sp),d0
    8adc:	                   movea.w d0,a0
    8ade:	                   pea 1 <_start+0x1>
    8ae2:	                   move.l a1,-(sp)
    8ae4:	                   move.l a0,-(sp)
    8ae6:	                   move.l 36(sp),-(sp)
    8aea:	                   move.l 36(sp),-(sp)
    8aee:	                   jsr 25c4 <CstScaleSprite>
    8af4:	                   lea 20(sp),sp

	UWORD x1, y1, x2, y2;

	if (thisPerson -> extra & EXTRA_FIXTOSCREEN) {
    8af8:	                   movea.l 24(sp),a0
    8afc:	                   move.l 118(a0),d0
    8b00:	                   moveq #8,d1
    8b02:	                   and.l d1,d0
    8b04:	   /-------------- beq.w 8bc6 <scaleSprite+0x14c>
		if (single->xhot < 0)
    8b08:	   |               movea.l 20(sp),a0
    8b0c:	   |               move.l 8(a0),d0
    8b10:	   |  /----------- bpl.s 8b48 <scaleSprite+0xce>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8b12:	   |  |            tst.w 2(sp)
    8b16:	   |  |     /----- beq.s 8b2e <scaleSprite+0xb4>
    8b18:	   |  |     |      movea.l 20(sp),a0
    8b1c:	   |  |     |      move.l (a0),d0
    8b1e:	   |  |     |      move.l d0,d1
    8b20:	   |  |     |      movea.l 20(sp),a0
    8b24:	   |  |     |      move.l 8(a0),d0
    8b28:	   |  |     |      move.l d0,d0
    8b2a:	   |  |     |      sub.w d0,d1
    8b2c:	   |  |     |  /-- bra.s 8b3c <scaleSprite+0xc2>
    8b2e:	   |  |     \--|-> movea.l 20(sp),a0
    8b32:	   |  |        |   move.l 8(a0),d0
    8b36:	   |  |        |   move.l d0,d0
    8b38:	   |  |        |   move.w d0,d1
    8b3a:	   |  |        |   addq.w #1,d1
    8b3c:	   |  |        \-> movea.w 6(sp),a0
    8b40:	   |  |            suba.w d1,a0
    8b42:	   |  |            move.w a0,14(sp)
    8b46:	   |  |  /-------- bra.s 8b7c <scaleSprite+0x102>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8b48:	   |  \--|-------> tst.w 2(sp)
    8b4c:	   |     |  /----- beq.s 8b68 <scaleSprite+0xee>
    8b4e:	   |     |  |      movea.l 20(sp),a0
    8b52:	   |     |  |      move.l (a0),d0
    8b54:	   |     |  |      move.l d0,d1
    8b56:	   |     |  |      movea.l 20(sp),a0
    8b5a:	   |     |  |      move.l 8(a0),d0
    8b5e:	   |     |  |      move.l d0,d0
    8b60:	   |     |  |      sub.w d0,d1
    8b62:	   |     |  |      move.w d1,d0
    8b64:	   |     |  |      subq.w #1,d0
    8b66:	   |     |  |  /-- bra.s 8b72 <scaleSprite+0xf8>
    8b68:	   |     |  \--|-> movea.l 20(sp),a0
    8b6c:	   |     |     |   move.l 8(a0),d0
    8b70:	   |     |     |   move.l d0,d0
    8b72:	   |     |     \-> move.w 6(sp),d1
    8b76:	   |     |         sub.w d0,d1
    8b78:	   |     |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8b7c:	   |     \-------> movea.l 24(sp),a0
    8b80:	   |               move.l 24(a0),d0
    8b84:	   |               move.l d0,d1
    8b86:	   |               movea.l 20(sp),a0
    8b8a:	   |               move.l 12(a0),d0
    8b8e:	   |               move.l d0,d0
    8b90:	   |               sub.w d0,d1
    8b92:	   |               movea.w 4(sp),a0
    8b96:	   |               adda.w d1,a0
    8b98:	   |               move.w a0,12(sp)
		x2 = x1 + single->width;
    8b9c:	   |               movea.l 20(sp),a0
    8ba0:	   |               move.l (a0),d0
    8ba2:	   |               move.l d0,d0
    8ba4:	   |               move.w 14(sp),d1
    8ba8:	   |               add.w d0,d1
    8baa:	   |               move.w d1,10(sp)
		y2 = y1 + single->height;
    8bae:	   |               movea.l 20(sp),a0
    8bb2:	   |               move.l 4(a0),d0
    8bb6:	   |               move.l d0,d0
    8bb8:	   |               movea.w 12(sp),a0
    8bbc:	   |               adda.w d0,a0
    8bbe:	   |               move.w a0,8(sp)
    8bc2:	/--|-------------- bra.w 8c98 <scaleSprite+0x21e>
	} else {
		x -= cameraX;
    8bc6:	|  \-------------> move.l 1a8b2 <cameraX>,d0
    8bcc:	|                  move.l d0,d0
    8bce:	|                  sub.w d0,6(sp)
		y -= cameraY;
    8bd2:	|                  move.l 1a8b6 <cameraY>,d0
    8bd8:	|                  move.l d0,d0
    8bda:	|                  sub.w d0,4(sp)
		if (single->xhot < 0)
    8bde:	|                  movea.l 20(sp),a0
    8be2:	|                  move.l 8(a0),d0
    8be6:	|     /----------- bpl.s 8c1e <scaleSprite+0x1a4>
			x1 = x - (int)(mirror ? single->width - single->xhot : single->xhot+1);
    8be8:	|     |            tst.w 2(sp)
    8bec:	|     |     /----- beq.s 8c04 <scaleSprite+0x18a>
    8bee:	|     |     |      movea.l 20(sp),a0
    8bf2:	|     |     |      move.l (a0),d0
    8bf4:	|     |     |      move.l d0,d1
    8bf6:	|     |     |      movea.l 20(sp),a0
    8bfa:	|     |     |      move.l 8(a0),d0
    8bfe:	|     |     |      move.l d0,d0
    8c00:	|     |     |      sub.w d0,d1
    8c02:	|     |     |  /-- bra.s 8c12 <scaleSprite+0x198>
    8c04:	|     |     \--|-> movea.l 20(sp),a0
    8c08:	|     |        |   move.l 8(a0),d0
    8c0c:	|     |        |   move.l d0,d0
    8c0e:	|     |        |   move.w d0,d1
    8c10:	|     |        |   addq.w #1,d1
    8c12:	|     |        \-> move.w 6(sp),d0
    8c16:	|     |            sub.w d1,d0
    8c18:	|     |            move.w d0,14(sp)
    8c1c:	|     |  /-------- bra.s 8c52 <scaleSprite+0x1d8>
		else
			x1 = x - (int)(mirror ? single->width - (single->xhot+1) : single->xhot);
    8c1e:	|     \--|-------> tst.w 2(sp)
    8c22:	|        |  /----- beq.s 8c3e <scaleSprite+0x1c4>
    8c24:	|        |  |      movea.l 20(sp),a0
    8c28:	|        |  |      move.l (a0),d0
    8c2a:	|        |  |      move.l d0,d1
    8c2c:	|        |  |      movea.l 20(sp),a0
    8c30:	|        |  |      move.l 8(a0),d0
    8c34:	|        |  |      move.l d0,d0
    8c36:	|        |  |      sub.w d0,d1
    8c38:	|        |  |      move.w d1,d0
    8c3a:	|        |  |      subq.w #1,d0
    8c3c:	|        |  |  /-- bra.s 8c48 <scaleSprite+0x1ce>
    8c3e:	|        |  \--|-> movea.l 20(sp),a0
    8c42:	|        |     |   move.l 8(a0),d0
    8c46:	|        |     |   move.l d0,d0
    8c48:	|        |     \-> move.w 6(sp),d1
    8c4c:	|        |         sub.w d0,d1
    8c4e:	|        |         move.w d1,14(sp)
		
		y1 = y - (single->yhot - thisPerson->floaty);
    8c52:	|        \-------> movea.l 24(sp),a0
    8c56:	|                  move.l 24(a0),d0
    8c5a:	|                  move.l d0,d1
    8c5c:	|                  movea.l 20(sp),a0
    8c60:	|                  move.l 12(a0),d0
    8c64:	|                  move.l d0,d0
    8c66:	|                  sub.w d0,d1
    8c68:	|                  movea.w 4(sp),a0
    8c6c:	|                  adda.w d1,a0
    8c6e:	|                  move.w a0,12(sp)
		x2 = x1 + single->width;
    8c72:	|                  movea.l 20(sp),a0
    8c76:	|                  move.l (a0),d0
    8c78:	|                  move.l d0,d0
    8c7a:	|                  move.w 14(sp),d1
    8c7e:	|                  add.w d0,d1
    8c80:	|                  move.w d1,10(sp)
		y2 = y1 + single->height;
    8c84:	|                  movea.l 20(sp),a0
    8c88:	|                  move.l 4(a0),d0
    8c8c:	|                  move.l d0,d0
    8c8e:	|                  movea.w 12(sp),a0
    8c92:	|                  adda.w d0,a0
    8c94:	|                  move.w a0,8(sp)
	}

	if (input.mouseX >= x1 && input.mouseX <= x2 && input.mouseY >= y1 && input.mouseY <= y2) {
    8c98:	\----------------> move.l 1a760 <input+0xa>,d1
    8c9e:	                   moveq #0,d0
    8ca0:	                   move.w 14(sp),d0
    8ca4:	                   cmp.l d1,d0
    8ca6:	            /----- bgt.s 8cdc <scaleSprite+0x262>
    8ca8:	            |      move.l 1a760 <input+0xa>,d1
    8cae:	            |      moveq #0,d0
    8cb0:	            |      move.w 10(sp),d0
    8cb4:	            |      cmp.l d1,d0
    8cb6:	            +----- blt.s 8cdc <scaleSprite+0x262>
    8cb8:	            |      move.l 1a764 <input+0xe>,d1
    8cbe:	            |      moveq #0,d0
    8cc0:	            |      move.w 12(sp),d0
    8cc4:	            |      cmp.l d1,d0
    8cc6:	            +----- bgt.s 8cdc <scaleSprite+0x262>
    8cc8:	            |      move.l 1a764 <input+0xe>,d1
    8cce:	            |      moveq #0,d0
    8cd0:	            |      move.w 8(sp),d0
    8cd4:	            |      cmp.l d1,d0
    8cd6:	            +----- blt.s 8cdc <scaleSprite+0x262>
		return TRUE;
    8cd8:	            |      moveq #1,d0
    8cda:	            |  /-- bra.s 8cde <scaleSprite+0x264>
	}
	return FALSE;
    8cdc:	            \--|-> clr.w d0
    8cde:	               \-> lea 16(sp),sp
    8ce2:	                   rts

00008ce4 <TF_abs>:

short int scaleHorizon = 75;
short int scaleDivide = 150;

int TF_abs (int a) {
	return (a > 0) ? a : -a;
    8ce4:	    move.l 4(sp),d0
    8ce8:	/-- bpl.s 8cec <TF_abs+0x8>
    8cea:	|   neg.l d0
}
    8cec:	\-> rts

00008cee <addPerson>:


BOOL addPerson(int x, int y, int objNum, struct persona *p) {
    8cee:	             lea -28(sp),sp
    8cf2:	             move.l a6,-(sp)
    8cf4:	             move.l d2,-(sp)
    struct onScreenPerson *newPerson = AllocVec(sizeof(struct onScreenPerson), MEMF_ANY);
    8cf6:	             move.l #132,28(sp)
    8cfe:	             clr.l 24(sp)
    8d02:	             move.l 1a7a4 <SysBase>,d0
    8d08:	             movea.l d0,a6
    8d0a:	             move.l 28(sp),d0
    8d0e:	             move.l 24(sp),d1
    8d12:	             jsr -684(a6)
    8d16:	             move.l d0,20(sp)
    8d1a:	             move.l 20(sp),d0
    8d1e:	             move.l d0,16(sp)
    if (!newPerson) return FALSE;
    8d22:	         /-- bne.s 8d2a <addPerson+0x3c>
    8d24:	         |   clr.w d0
    8d26:	/--------|-- bra.w 8f5a <addPerson+0x26c>

    // EASY STUFF
    newPerson->thisType = loadObjectType(objNum);
    8d2a:	|        \-> move.l 48(sp),-(sp)
    8d2e:	|            jsr d0ba <loadObjectType>
    8d34:	|            addq.l #4,sp
    8d36:	|            movea.l 16(sp),a0
    8d3a:	|            move.l d0,114(a0)
    newPerson->scale = 1;
    8d3e:	|            movea.l 16(sp),a0
    8d42:	|            move.l #1065353216,32(a0)
    newPerson->extra = 0;
    8d4a:	|            movea.l 16(sp),a0
    8d4e:	|            clr.l 118(a0)
    newPerson->continueAfterWalking = NULL;
    8d52:	|            movea.l 16(sp),a0
    8d56:	|            clr.l 68(a0)
    moveAndScale(newPerson, x, y);
    8d5a:	|            move.l 44(sp),-(sp)
    8d5e:	|            jsr 1709a <__floatsisf>
    8d64:	|            addq.l #4,sp
    8d66:	|            move.l d0,d2
    8d68:	|            move.l 40(sp),-(sp)
    8d6c:	|            jsr 1709a <__floatsisf>
    8d72:	|            addq.l #4,sp
    8d74:	|            move.l d2,-(sp)
    8d76:	|            move.l d0,-(sp)
    8d78:	|            move.l 24(sp),-(sp)
    8d7c:	|            jsr a83c <moveAndScale>
    8d82:	|            lea 12(sp),sp
    newPerson->frameNum = 0;
    8d86:	|            movea.l 16(sp),a0
    8d8a:	|            clr.l 84(a0)
    newPerson->walkToX = x;
    8d8e:	|            movea.l 16(sp),a0
    8d92:	|            move.l 40(sp),40(a0)
    newPerson->walkToY = y;
    8d98:	|            movea.l 16(sp),a0
    8d9c:	|            move.l 44(sp),44(a0)
    newPerson->walking = FALSE;
    8da2:	|            movea.l 16(sp),a0
    8da6:	|            clr.w 64(a0)
    newPerson->spinning = FALSE;
    8daa:	|            movea.l 16(sp),a0
    8dae:	|            clr.w 66(a0)
    newPerson->show = TRUE;
    8db2:	|            movea.l 16(sp),a0
    8db6:	|            move.w #1,104(a0)
    newPerson->direction = 0;
    8dbc:	|            movea.l 16(sp),a0
    8dc0:	|            clr.l 106(a0)
    newPerson->angle = 180;
    8dc4:	|            movea.l 16(sp),a0
    8dc8:	|            move.l #180,92(a0)
    newPerson->wantAngle = 180;
    8dd0:	|            movea.l 16(sp),a0
    8dd4:	|            move.l #180,96(a0)
    newPerson->angleOffset = 0;
    8ddc:	|            movea.l 16(sp),a0
    8de0:	|            clr.l 100(a0)
    newPerson->floaty = 0;
    8de4:	|            movea.l 16(sp),a0
    8de8:	|            clr.l 24(a0)
    newPerson->walkSpeed = newPerson->thisType->walkSpeed;
    8dec:	|            movea.l 16(sp),a0
    8df0:	|            movea.l 114(a0),a0
    8df4:	|            move.l 24(a0),d0
    8df8:	|            movea.l 16(sp),a0
    8dfc:	|            move.l d0,28(a0)
    newPerson->myAnim = NULL;
    8e00:	|            movea.l 16(sp),a0
    8e04:	|            clr.l 72(a0)
    newPerson->spinSpeed = newPerson->thisType->spinSpeed;
    8e08:	|            movea.l 16(sp),a0
    8e0c:	|            movea.l 114(a0),a0
    8e10:	|            move.l 32(a0),d0
    8e14:	|            movea.l 16(sp),a0
    8e18:	|            move.l d0,122(a0)
    newPerson->r = 0;
    8e1c:	|            movea.l 16(sp),a0
    8e20:	|            clr.b 126(a0)
    newPerson->g = 0;
    8e24:	|            movea.l 16(sp),a0
    8e28:	|            clr.b 127(a0)
    newPerson->b = 0;
    8e2c:	|            movea.l 16(sp),a0
    8e30:	|            clr.b 128(a0)
    newPerson->colourmix = 0;
    8e34:	|            movea.l 16(sp),a0
    8e38:	|            clr.b 129(a0)
    newPerson->transparency = 0;
    8e3c:	|            movea.l 16(sp),a0
    8e40:	|            clr.b 130(a0)
    newPerson->myPersona = p;
    8e44:	|            movea.l 16(sp),a0
    8e48:	|            move.l 52(sp),80(a0)

    setFrames(newPerson, ANI_STAND);
    8e4e:	|            clr.l -(sp)
    8e50:	|            move.l 20(sp),-(sp)
    8e54:	|            jsr 7a3e <setFrames>
    8e5a:	|            addq.l #8,sp

    // HEIGHT (BASED ON 1st FRAME OF 1st ANIMATION... INC. SPECIAL CASES)
    int fNumSigned = p->animation[0]->frames[0].frameNum;
    8e5c:	|            movea.l 52(sp),a0
    8e60:	|            movea.l (a0),a0
    8e62:	|            movea.l (a0),a0
    8e64:	|            movea.l 4(a0),a0
    8e68:	|            move.l (a0),12(sp)
    int fNum = fNumSigned < 0 ? fNumSigned * - 1 : 1;
    8e6c:	|     /----- bpl.s 8e76 <addPerson+0x188>
    8e6e:	|     |      move.l 12(sp),d0
    8e72:	|     |      neg.l d0
    8e74:	|     |  /-- bra.s 8e78 <addPerson+0x18a>
    8e76:	|     \--|-> moveq #1,d0
    8e78:	|        \-> move.l d0,8(sp)
    if (fNum >= p->animation[0]->theSprites->bank.total) {
    8e7c:	|            movea.l 52(sp),a0
    8e80:	|            movea.l (a0),a0
    8e82:	|            movea.l (a0),a0
    8e84:	|            movea.l (a0),a0
    8e86:	|            move.l 8(a0),d0
    8e8a:	|            cmp.l 8(sp),d0
    8e8e:	|     /----- bgt.s 8ec0 <addPerson+0x1d2>
        if (fNumSigned < 0) {
    8e90:	|     |      tst.l 12(sp)
    8e94:	|     |  /-- bge.s 8ea2 <addPerson+0x1b4>
            newPerson->height = 5;
    8e96:	|     |  |   movea.l 16(sp),a0
    8e9a:	|     |  |   moveq #5,d0
    8e9c:	|     |  |   move.l d0,20(a0)
    8ea0:	|  /--|--|-- bra.s 8eec <addPerson+0x1fe>
        } else {
            newPerson->height = p->animation[0]->theSprites->bank.sprites[0].yhot + 5;
    8ea2:	|  |  |  \-> movea.l 52(sp),a0
    8ea6:	|  |  |      movea.l (a0),a0
    8ea8:	|  |  |      movea.l (a0),a0
    8eaa:	|  |  |      movea.l (a0),a0
    8eac:	|  |  |      movea.l 16(a0),a0
    8eb0:	|  |  |      move.l 12(a0),d0
    8eb4:	|  |  |      addq.l #5,d0
    8eb6:	|  |  |      movea.l 16(sp),a0
    8eba:	|  |  |      move.l d0,20(a0)
    8ebe:	|  +--|----- bra.s 8eec <addPerson+0x1fe>
        }
    } else {
        newPerson->height = p->animation[0]->theSprites->bank.sprites[fNum].yhot + 5;
    8ec0:	|  |  \----> movea.l 52(sp),a0
    8ec4:	|  |         movea.l (a0),a0
    8ec6:	|  |         movea.l (a0),a0
    8ec8:	|  |         movea.l (a0),a0
    8eca:	|  |         movea.l 16(a0),a0
    8ece:	|  |         move.l 8(sp),d1
    8ed2:	|  |         move.l d1,d0
    8ed4:	|  |         lsl.l #3,d0
    8ed6:	|  |         sub.l d1,d0
    8ed8:	|  |         add.l d0,d0
    8eda:	|  |         add.l d0,d0
    8edc:	|  |         adda.l d0,a0
    8ede:	|  |         move.l 12(a0),d0
    8ee2:	|  |         addq.l #5,d0
    8ee4:	|  |         movea.l 16(sp),a0
    8ee8:	|  |         move.l d0,20(a0)
    }

    // NOW ADD IT IN THE RIGHT PLACE
    struct onScreenPerson **changethat = &allPeople;
    8eec:	|  \-------> move.l #108636,32(sp)

    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    8ef4:	|        /-- bra.s 8f04 <addPerson+0x216>
        changethat = &((*changethat)->next);
    8ef6:	|     /--|-> movea.l 32(sp),a0
    8efa:	|     |  |   move.l (a0),d0
    8efc:	|     |  |   moveq #36,d1
    8efe:	|     |  |   add.l d0,d1
    8f00:	|     |  |   move.l d1,32(sp)
    while (((*changethat) != NULL) && ((*changethat)->y < y)) {
    8f04:	|     |  \-> movea.l 32(sp),a0
    8f08:	|     |      move.l (a0),d0
    8f0a:	|     |  /-- beq.s 8f32 <addPerson+0x244>
    8f0c:	|     |  |   movea.l 32(sp),a0
    8f10:	|     |  |   movea.l (a0),a0
    8f12:	|     |  |   move.l 4(a0),d2
    8f16:	|     |  |   move.l 44(sp),-(sp)
    8f1a:	|     |  |   jsr 1709a <__floatsisf>
    8f20:	|     |  |   addq.l #4,sp
    8f22:	|     |  |   move.l d0,-(sp)
    8f24:	|     |  |   move.l d2,-(sp)
    8f26:	|     |  |   jsr 172c0 <__ltsf2>
    8f2c:	|     |  |   addq.l #8,sp
    8f2e:	|     |  |   tst.l d0
    8f30:	|     \--|-- blt.s 8ef6 <addPerson+0x208>
    }

    newPerson->next = (*changethat);
    8f32:	|        \-> movea.l 32(sp),a0
    8f36:	|            move.l (a0),d0
    8f38:	|            movea.l 16(sp),a0
    8f3c:	|            move.l d0,36(a0)
    (*changethat) = newPerson;
    8f40:	|            movea.l 32(sp),a0
    8f44:	|            move.l 16(sp),(a0)

    return (BOOL) (newPerson->thisType != NULL);
    8f48:	|            movea.l 16(sp),a0
    8f4c:	|            move.l 114(a0),d0
    8f50:	|            sne d0
    8f52:	|            neg.b d0
    8f54:	|            move.b d0,d0
    8f56:	|            andi.w #255,d0
}
    8f5a:	\----------> move.l (sp)+,d2
    8f5c:	             movea.l (sp)+,a6
    8f5e:	             lea 28(sp),sp
    8f62:	             rts

00008f64 <animatePerson>:

void animatePerson (int obj, struct personaAnimation * fram) { // Set a new SINGLE animation
    8f64:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    8f66:	       move.l 8(sp),-(sp)
    8f6a:	       jsr a0f4 <findPerson>
    8f70:	       addq.l #4,sp
    8f72:	       move.l d0,(sp)
    if (moveMe) {
    8f74:	/----- beq.s 8fa8 <animatePerson+0x44>
        if (moveMe -> continueAfterWalking) abortFunction(moveMe -> continueAfterWalking);
    8f76:	|      movea.l (sp),a0
    8f78:	|      move.l 68(a0),d0
    8f7c:	|  /-- beq.s 8f8e <animatePerson+0x2a>
    8f7e:	|  |   movea.l (sp),a0
    8f80:	|  |   move.l 68(a0),d0
    8f84:	|  |   move.l d0,-(sp)
    8f86:	|  |   jsr 3ff4 <abortFunction>
    8f8c:	|  |   addq.l #4,sp
        moveMe -> continueAfterWalking = NULL;
    8f8e:	|  \-> movea.l (sp),a0
    8f90:	|      clr.l 68(a0)
        moveMe -> walking = FALSE;
    8f94:	|      movea.l (sp),a0
    8f96:	|      clr.w 64(a0)
        moveMe -> spinning = FALSE;
    8f9a:	|      movea.l (sp),a0
    8f9c:	|      clr.w 66(a0)
        moveMe -> myAnim = fram;
    8fa0:	|      movea.l (sp),a0
    8fa2:	|      move.l 12(sp),72(a0)
    }
}
    8fa8:	\----> nop
    8faa:	       addq.l #4,sp
    8fac:	       rts

00008fae <animatePersonUsingPersona>:

void animatePersonUsingPersona (int obj, struct persona * per) { // Set a new costume
    8fae:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(obj);
    8fb0:	       move.l 8(sp),-(sp)
    8fb4:	       jsr a0f4 <findPerson>
    8fba:	       addq.l #4,sp
    8fbc:	       move.l d0,(sp)
    if (moveMe) {
    8fbe:	/----- beq.s 9000 <animatePersonUsingPersona+0x52>
        // if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
        // moveMe -> continueAfterWalking = NULL;
        // moveMe -> walking = false;
        moveMe -> spinning = FALSE;
    8fc0:	|      movea.l (sp),a0
    8fc2:	|      clr.w 66(a0)
        moveMe -> myPersona = per;
    8fc6:	|      movea.l (sp),a0
    8fc8:	|      move.l 12(sp),80(a0)
        rethinkAngle(moveMe);
    8fce:	|      move.l (sp),-(sp)
    8fd0:	|      jsr a9ca <rethinkAngle>
    8fd6:	|      addq.l #4,sp
        if (moveMe->walking) {
    8fd8:	|      movea.l (sp),a0
    8fda:	|      move.w 64(a0),d0
    8fde:	|  /-- beq.s 8ff2 <animatePersonUsingPersona+0x44>
            setFrames(moveMe, ANI_WALK);
    8fe0:	|  |   pea 1 <_start+0x1>
    8fe4:	|  |   move.l 4(sp),-(sp)
    8fe8:	|  |   jsr 7a3e <setFrames>
    8fee:	|  |   addq.l #8,sp
        } else {
            setFrames(moveMe, ANI_STAND);
        }
    }
}
    8ff0:	+--|-- bra.s 9000 <animatePersonUsingPersona+0x52>
            setFrames(moveMe, ANI_STAND);
    8ff2:	|  \-> clr.l -(sp)
    8ff4:	|      move.l 4(sp),-(sp)
    8ff8:	|      jsr 7a3e <setFrames>
    8ffe:	|      addq.l #8,sp
}
    9000:	\----> nop
    9002:	       addq.l #4,sp
    9004:	       rts

00009006 <copyAnim>:
		thisPerson = thisPerson->next;
	}
}


struct personaAnimation * copyAnim (struct personaAnimation * orig) {
    9006:	             lea -36(sp),sp
    900a:	             move.l a6,-(sp)
	int num = orig -> numFrames;
    900c:	             movea.l 44(sp),a0
    9010:	             move.l 8(a0),32(sp)


	struct personaAnimation * newAnim	= AllocVec(sizeof( struct personaAnimation), MEMF_ANY);
    9016:	             moveq #12,d0
    9018:	             move.l d0,28(sp)
    901c:	             clr.l 24(sp)
    9020:	             move.l 1a7a4 <SysBase>,d0
    9026:	             movea.l d0,a6
    9028:	             move.l 28(sp),d0
    902c:	             move.l 24(sp),d1
    9030:	             jsr -684(a6)
    9034:	             move.l d0,20(sp)
    9038:	             move.l 20(sp),d0
    903c:	             move.l d0,16(sp)
	if (!(newAnim)) {
    9040:	         /-- bne.s 9056 <copyAnim+0x50>
		KPrintF("copyAnim: Cannot allocate memory");
    9042:	         |   pea 18b78 <PutChar+0x1446>
    9048:	         |   jsr 16c5e <KPrintF>
    904e:	         |   addq.l #4,sp
		return NULL;
    9050:	         |   moveq #0,d0
    9052:	/--------|-- bra.w 91a8 <copyAnim+0x1a2>
	}

	// Copy the easy bits...
	newAnim -> theSprites		= orig -> theSprites;
    9056:	|        \-> movea.l 44(sp),a0
    905a:	|            move.l (a0),d0
    905c:	|            movea.l 16(sp),a0
    9060:	|            move.l d0,(a0)
	newAnim -> theSprites ->timesUsed++;
    9062:	|            movea.l 16(sp),a0
    9066:	|            movea.l (a0),a0
    9068:	|            move.l 4(a0),d0
    906c:	|            addq.l #1,d0
    906e:	|            move.l d0,4(a0)
	newAnim -> numFrames		= num;
    9072:	|            movea.l 16(sp),a0
    9076:	|            move.l 32(sp),8(a0)

	if (num) {
    907c:	|  /-------- beq.w 919c <copyAnim+0x196>

		// Argh! Frames! We need a whole NEW array of animFrame structures...

		newAnim->frames = AllocVec(sizeof(struct animFrame) * num, MEMF_ANY);
    9080:	|  |         move.l 32(sp),d1
    9084:	|  |         move.l d1,d0
    9086:	|  |         add.l d0,d0
    9088:	|  |         add.l d1,d0
    908a:	|  |         add.l d0,d0
    908c:	|  |         add.l d0,d0
    908e:	|  |         move.l d0,12(sp)
    9092:	|  |         clr.l 8(sp)
    9096:	|  |         move.l 1a7a4 <SysBase>,d0
    909c:	|  |         movea.l d0,a6
    909e:	|  |         move.l 12(sp),d0
    90a2:	|  |         move.l 8(sp),d1
    90a6:	|  |         jsr -684(a6)
    90aa:	|  |         move.l d0,4(sp)
    90ae:	|  |         move.l 4(sp),d0
    90b2:	|  |         movea.l 16(sp),a0
    90b6:	|  |         move.l d0,4(a0)
		if (!newAnim->frames) {
    90ba:	|  |         movea.l 16(sp),a0
    90be:	|  |         move.l 4(a0),d0
    90c2:	|  |     /-- bne.s 90d8 <copyAnim+0xd2>
			KPrintF("copyAnim: Cannot allocate memory");
    90c4:	|  |     |   pea 18b78 <PutChar+0x1446>
    90ca:	|  |     |   jsr 16c5e <KPrintF>
    90d0:	|  |     |   addq.l #4,sp
			return NULL;
    90d2:	|  |     |   moveq #0,d0
    90d4:	+--|-----|-- bra.w 91a8 <copyAnim+0x1a2>
		}

		for (int a = 0; a < num; a ++) {
    90d8:	|  |     \-> clr.l 36(sp)
    90dc:	|  |     /-- bra.w 918e <copyAnim+0x188>
			newAnim -> frames[a].frameNum = orig -> frames[a].frameNum;
    90e0:	|  |  /--|-> movea.l 44(sp),a0
    90e4:	|  |  |  |   movea.l 4(a0),a0
    90e8:	|  |  |  |   move.l 36(sp),d1
    90ec:	|  |  |  |   move.l d1,d0
    90ee:	|  |  |  |   add.l d0,d0
    90f0:	|  |  |  |   add.l d1,d0
    90f2:	|  |  |  |   add.l d0,d0
    90f4:	|  |  |  |   add.l d0,d0
    90f6:	|  |  |  |   lea (0,a0,d0.l),a1
    90fa:	|  |  |  |   movea.l 16(sp),a0
    90fe:	|  |  |  |   movea.l 4(a0),a0
    9102:	|  |  |  |   move.l 36(sp),d1
    9106:	|  |  |  |   move.l d1,d0
    9108:	|  |  |  |   add.l d0,d0
    910a:	|  |  |  |   add.l d1,d0
    910c:	|  |  |  |   add.l d0,d0
    910e:	|  |  |  |   add.l d0,d0
    9110:	|  |  |  |   adda.l d0,a0
    9112:	|  |  |  |   move.l (a1),d0
    9114:	|  |  |  |   move.l d0,(a0)
			newAnim -> frames[a].howMany = orig -> frames[a].howMany;
    9116:	|  |  |  |   movea.l 44(sp),a0
    911a:	|  |  |  |   movea.l 4(a0),a0
    911e:	|  |  |  |   move.l 36(sp),d1
    9122:	|  |  |  |   move.l d1,d0
    9124:	|  |  |  |   add.l d0,d0
    9126:	|  |  |  |   add.l d1,d0
    9128:	|  |  |  |   add.l d0,d0
    912a:	|  |  |  |   add.l d0,d0
    912c:	|  |  |  |   lea (0,a0,d0.l),a1
    9130:	|  |  |  |   movea.l 16(sp),a0
    9134:	|  |  |  |   movea.l 4(a0),a0
    9138:	|  |  |  |   move.l 36(sp),d1
    913c:	|  |  |  |   move.l d1,d0
    913e:	|  |  |  |   add.l d0,d0
    9140:	|  |  |  |   add.l d1,d0
    9142:	|  |  |  |   add.l d0,d0
    9144:	|  |  |  |   add.l d0,d0
    9146:	|  |  |  |   adda.l d0,a0
    9148:	|  |  |  |   move.l 4(a1),d0
    914c:	|  |  |  |   move.l d0,4(a0)
			newAnim -> frames[a].noise = orig -> frames[a].noise;
    9150:	|  |  |  |   movea.l 44(sp),a0
    9154:	|  |  |  |   movea.l 4(a0),a0
    9158:	|  |  |  |   move.l 36(sp),d1
    915c:	|  |  |  |   move.l d1,d0
    915e:	|  |  |  |   add.l d0,d0
    9160:	|  |  |  |   add.l d1,d0
    9162:	|  |  |  |   add.l d0,d0
    9164:	|  |  |  |   add.l d0,d0
    9166:	|  |  |  |   lea (0,a0,d0.l),a1
    916a:	|  |  |  |   movea.l 16(sp),a0
    916e:	|  |  |  |   movea.l 4(a0),a0
    9172:	|  |  |  |   move.l 36(sp),d1
    9176:	|  |  |  |   move.l d1,d0
    9178:	|  |  |  |   add.l d0,d0
    917a:	|  |  |  |   add.l d1,d0
    917c:	|  |  |  |   add.l d0,d0
    917e:	|  |  |  |   add.l d0,d0
    9180:	|  |  |  |   adda.l d0,a0
    9182:	|  |  |  |   move.l 8(a1),d0
    9186:	|  |  |  |   move.l d0,8(a0)
		for (int a = 0; a < num; a ++) {
    918a:	|  |  |  |   addq.l #1,36(sp)
    918e:	|  |  |  \-> move.l 36(sp),d0
    9192:	|  |  |      cmp.l 32(sp),d0
    9196:	|  |  \----- blt.w 90e0 <copyAnim+0xda>
    919a:	|  |     /-- bra.s 91a4 <copyAnim+0x19e>
		}
	} else {
		newAnim -> frames = NULL;
    919c:	|  \-----|-> movea.l 16(sp),a0
    91a0:	|        |   clr.l 4(a0)
	}

	return newAnim;
    91a4:	|        \-> move.l 16(sp),d0
}
    91a8:	\----------> movea.l (sp)+,a6
    91aa:	             lea 36(sp),sp
    91ae:	             rts

000091b0 <createPersonaAnim>:


struct personaAnimation * createPersonaAnim (int num, struct variableStack **stacky) {
    91b0:	                lea -44(sp),sp
    91b4:	                move.l a6,-(sp)
    91b6:	                move.l d2,-(sp)
	struct personaAnimation * newP = AllocVec( sizeof(struct personaAnimation), MEMF_ANY);
    91b8:	                moveq #12,d0
    91ba:	                move.l d0,40(sp)
    91be:	                clr.l 36(sp)
    91c2:	                move.l 1a7a4 <SysBase>,d0
    91c8:	                movea.l d0,a6
    91ca:	                move.l 40(sp),d0
    91ce:	                move.l 36(sp),d1
    91d2:	                jsr -684(a6)
    91d6:	                move.l d0,32(sp)
    91da:	                move.l 32(sp),d0
    91de:	                move.l d0,28(sp)
	if( !newP) {
    91e2:	            /-- bne.s 91f8 <createPersonaAnim+0x48>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    91e4:	            |   pea 18b99 <PutChar+0x1467>
    91ea:	            |   jsr 16c5e <KPrintF>
    91f0:	            |   addq.l #4,sp
		return NULL;
    91f2:	            |   moveq #0,d0
    91f4:	/-----------|-- bra.w 93c8 <createPersonaAnim+0x218>
	}

	newP -> numFrames = num;
    91f8:	|           \-> movea.l 28(sp),a0
    91fc:	|               move.l 56(sp),8(a0)
	newP -> frames = AllocVec( sizeof( struct animFrame) * num,MEMF_ANY);
    9202:	|               move.l 56(sp),d1
    9206:	|               move.l d1,d0
    9208:	|               add.l d0,d0
    920a:	|               add.l d1,d0
    920c:	|               add.l d0,d0
    920e:	|               add.l d0,d0
    9210:	|               move.l d0,24(sp)
    9214:	|               clr.l 20(sp)
    9218:	|               move.l 1a7a4 <SysBase>,d0
    921e:	|               movea.l d0,a6
    9220:	|               move.l 24(sp),d0
    9224:	|               move.l 20(sp),d1
    9228:	|               jsr -684(a6)
    922c:	|               move.l d0,16(sp)
    9230:	|               move.l 16(sp),d0
    9234:	|               movea.l 28(sp),a0
    9238:	|               move.l d0,4(a0)
	if( !newP->frames) {
    923c:	|               movea.l 28(sp),a0
    9240:	|               move.l 4(a0),d0
    9244:	|           /-- bne.s 925a <createPersonaAnim+0xaa>
		KPrintF("createPersonaAnim: Cannot allocate memory");
    9246:	|           |   pea 18b99 <PutChar+0x1467>
    924c:	|           |   jsr 16c5e <KPrintF>
    9252:	|           |   addq.l #4,sp
		return NULL;
    9254:	|           |   moveq #0,d0
    9256:	+-----------|-- bra.w 93c8 <createPersonaAnim+0x218>
	}

	int a = num, frameNum, howMany;
    925a:	|           \-> move.l 56(sp),48(sp)

	struct variableStack *tmp = *stacky;
    9260:	|               movea.l 60(sp),a0
    9264:	|               move.l (a0),44(sp)
	while (a) {
    9268:	|     /-------- bra.w 93bc <createPersonaAnim+0x20c>
		a --;
    926c:	|  /--|-------> subq.l #1,48(sp)
		newP -> frames[a].noise = 0;
    9270:	|  |  |         movea.l 28(sp),a0
    9274:	|  |  |         movea.l 4(a0),a0
    9278:	|  |  |         move.l 48(sp),d1
    927c:	|  |  |         move.l d1,d0
    927e:	|  |  |         add.l d0,d0
    9280:	|  |  |         add.l d1,d0
    9282:	|  |  |         add.l d0,d0
    9284:	|  |  |         add.l d0,d0
    9286:	|  |  |         adda.l d0,a0
    9288:	|  |  |         clr.l 8(a0)
		if ( tmp->thisVar.varType == SVT_FILE) {
    928c:	|  |  |         movea.l 44(sp),a0
    9290:	|  |  |         move.l (a0),d0
    9292:	|  |  |         moveq #5,d1
    9294:	|  |  |         cmp.l d0,d1
    9296:	|  |  |     /-- bne.s 92c2 <createPersonaAnim+0x112>
			newP -> frames[a].noise = tmp -> thisVar.varData.intValue;
    9298:	|  |  |     |   movea.l 28(sp),a0
    929c:	|  |  |     |   movea.l 4(a0),a0
    92a0:	|  |  |     |   move.l 48(sp),d1
    92a4:	|  |  |     |   move.l d1,d0
    92a6:	|  |  |     |   add.l d0,d0
    92a8:	|  |  |     |   add.l d1,d0
    92aa:	|  |  |     |   add.l d0,d0
    92ac:	|  |  |     |   add.l d0,d0
    92ae:	|  |  |     |   lea (0,a0,d0.l),a1
    92b2:	|  |  |     |   movea.l 44(sp),a0
    92b6:	|  |  |     |   move.l 4(a0),d0
    92ba:	|  |  |     |   move.l d0,8(a1)
    92be:	|  |  |  /--|-- bra.w 936a <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_FUNC) {
    92c2:	|  |  |  |  \-> movea.l 44(sp),a0
    92c6:	|  |  |  |      move.l (a0),d0
    92c8:	|  |  |  |      moveq #2,d1
    92ca:	|  |  |  |      cmp.l d0,d1
    92cc:	|  |  |  |  /-- bne.s 92f8 <createPersonaAnim+0x148>
			newP -> frames[a].noise = - tmp -> thisVar.varData.intValue;
    92ce:	|  |  |  |  |   movea.l 44(sp),a0
    92d2:	|  |  |  |  |   move.l 4(a0),d2
    92d6:	|  |  |  |  |   movea.l 28(sp),a0
    92da:	|  |  |  |  |   movea.l 4(a0),a0
    92de:	|  |  |  |  |   move.l 48(sp),d1
    92e2:	|  |  |  |  |   move.l d1,d0
    92e4:	|  |  |  |  |   add.l d0,d0
    92e6:	|  |  |  |  |   add.l d1,d0
    92e8:	|  |  |  |  |   add.l d0,d0
    92ea:	|  |  |  |  |   add.l d0,d0
    92ec:	|  |  |  |  |   adda.l d0,a0
    92ee:	|  |  |  |  |   move.l d2,d0
    92f0:	|  |  |  |  |   neg.l d0
    92f2:	|  |  |  |  |   move.l d0,8(a0)
    92f6:	|  |  |  +--|-- bra.s 936a <createPersonaAnim+0x1ba>
		} else if ( tmp -> thisVar.varType == SVT_STACK) {
    92f8:	|  |  |  |  \-> movea.l 44(sp),a0
    92fc:	|  |  |  |      move.l (a0),d0
    92fe:	|  |  |  |      moveq #6,d1
    9300:	|  |  |  |      cmp.l d0,d1
    9302:	|  |  |  |  /-- bne.s 934a <createPersonaAnim+0x19a>
			getValueType (&frameNum, SVT_INT, &tmp->thisVar.varData.theStack -> first -> thisVar);
    9304:	|  |  |  |  |   movea.l 44(sp),a0
    9308:	|  |  |  |  |   movea.l 4(a0),a0
    930c:	|  |  |  |  |   move.l (a0),d0
    930e:	|  |  |  |  |   move.l d0,-(sp)
    9310:	|  |  |  |  |   pea 1 <_start+0x1>
    9314:	|  |  |  |  |   lea 20(sp),a0
    9318:	|  |  |  |  |   move.l a0,-(sp)
    931a:	|  |  |  |  |   jsr 14260 <getValueType>
    9320:	|  |  |  |  |   lea 12(sp),sp
			getValueType (&howMany, SVT_INT, &tmp -> thisVar.varData.theStack -> first -> next -> thisVar);
    9324:	|  |  |  |  |   movea.l 44(sp),a0
    9328:	|  |  |  |  |   movea.l 4(a0),a0
    932c:	|  |  |  |  |   movea.l (a0),a0
    932e:	|  |  |  |  |   move.l 8(a0),d0
    9332:	|  |  |  |  |   move.l d0,-(sp)
    9334:	|  |  |  |  |   pea 1 <_start+0x1>
    9338:	|  |  |  |  |   lea 16(sp),a0
    933c:	|  |  |  |  |   move.l a0,-(sp)
    933e:	|  |  |  |  |   jsr 14260 <getValueType>
    9344:	|  |  |  |  |   lea 12(sp),sp
    9348:	|  |  |  +--|-- bra.s 936a <createPersonaAnim+0x1ba>
		} else {
			getValueType (&frameNum, SVT_INT, &tmp -> thisVar);
    934a:	|  |  |  |  \-> move.l 44(sp),d0
    934e:	|  |  |  |      move.l d0,-(sp)
    9350:	|  |  |  |      pea 1 <_start+0x1>
    9354:	|  |  |  |      lea 20(sp),a0
    9358:	|  |  |  |      move.l a0,-(sp)
    935a:	|  |  |  |      jsr 14260 <getValueType>
    9360:	|  |  |  |      lea 12(sp),sp
			howMany = 1;
    9364:	|  |  |  |      moveq #1,d0
    9366:	|  |  |  |      move.l d0,8(sp)
		}
		trimStack (stacky);
    936a:	|  |  |  \----> move.l 60(sp),-(sp)
    936e:	|  |  |         jsr 14be4 <trimStack>
    9374:	|  |  |         addq.l #4,sp
		newP -> frames[a].frameNum = frameNum;
    9376:	|  |  |         movea.l 28(sp),a0
    937a:	|  |  |         movea.l 4(a0),a0
    937e:	|  |  |         move.l 48(sp),d1
    9382:	|  |  |         move.l d1,d0
    9384:	|  |  |         add.l d0,d0
    9386:	|  |  |         add.l d1,d0
    9388:	|  |  |         add.l d0,d0
    938a:	|  |  |         add.l d0,d0
    938c:	|  |  |         adda.l d0,a0
    938e:	|  |  |         move.l 12(sp),d0
    9392:	|  |  |         move.l d0,(a0)
		newP -> frames[a].howMany = howMany;
    9394:	|  |  |         movea.l 28(sp),a0
    9398:	|  |  |         movea.l 4(a0),a0
    939c:	|  |  |         move.l 48(sp),d1
    93a0:	|  |  |         move.l d1,d0
    93a2:	|  |  |         add.l d0,d0
    93a4:	|  |  |         add.l d1,d0
    93a6:	|  |  |         add.l d0,d0
    93a8:	|  |  |         add.l d0,d0
    93aa:	|  |  |         adda.l d0,a0
    93ac:	|  |  |         move.l 8(sp),d0
    93b0:	|  |  |         move.l d0,4(a0)
		tmp = *stacky;
    93b4:	|  |  |         movea.l 60(sp),a0
    93b8:	|  |  |         move.l (a0),44(sp)
	while (a) {
    93bc:	|  |  \-------> tst.l 48(sp)
    93c0:	|  \----------- bne.w 926c <createPersonaAnim+0xbc>
	}

	return newP;
    93c4:	|               move.l 28(sp),d0
}
    93c8:	\-------------> move.l (sp)+,d2
    93ca:	                movea.l (sp)+,a6
    93cc:	                lea 44(sp),sp
    93d0:	                rts

000093d2 <deleteAnim>:

void deleteAnim (struct personaAnimation * orig) {
    93d2:	       lea -12(sp),sp
    93d6:	       move.l a6,-(sp)

	if(orig->theSprites)
    93d8:	       movea.l 20(sp),a0
    93dc:	       move.l (a0),d0
    93de:	   /-- beq.s 9408 <deleteAnim+0x36>
	{
		int timesused = --orig->theSprites->timesUsed;
    93e0:	   |   movea.l 20(sp),a0
    93e4:	   |   movea.l (a0),a0
    93e6:	   |   move.l 4(a0),d0
    93ea:	   |   subq.l #1,d0
    93ec:	   |   move.l d0,4(a0)
    93f0:	   |   move.l 4(a0),12(sp)
		
		if(!timesused)
    93f6:	   +-- bne.s 9408 <deleteAnim+0x36>
		{
			forgetSpriteBank( orig->theSprites);
    93f8:	   |   movea.l 20(sp),a0
    93fc:	   |   move.l (a0),d0
    93fe:	   |   move.l d0,-(sp)
    9400:	   |   jsr 8544 <forgetSpriteBank>
    9406:	   |   addq.l #4,sp
		}
	}			
	
	if (orig)
    9408:	   \-> tst.l 20(sp)
    940c:	/----- beq.s 944c <deleteAnim+0x7a>
	{
		if (orig -> numFrames) {
    940e:	|      movea.l 20(sp),a0
    9412:	|      move.l 8(a0),d0
    9416:	|  /-- beq.s 9432 <deleteAnim+0x60>
			FreeVec( orig->frames);
    9418:	|  |   movea.l 20(sp),a0
    941c:	|  |   move.l 4(a0),8(sp)
    9422:	|  |   move.l 1a7a4 <SysBase>,d0
    9428:	|  |   movea.l d0,a6
    942a:	|  |   movea.l 8(sp),a1
    942e:	|  |   jsr -690(a6)
		}
		FreeVec(orig);
    9432:	|  \-> move.l 20(sp),4(sp)
    9438:	|      move.l 1a7a4 <SysBase>,d0
    943e:	|      movea.l d0,a6
    9440:	|      movea.l 4(sp),a1
    9444:	|      jsr -690(a6)
		orig = NULL;
    9448:	|      clr.l 20(sp)
	}	
	
}
    944c:	\----> nop
    944e:	       movea.l (sp)+,a6
    9450:	       lea 12(sp),sp
    9454:	       rts

00009456 <doBorderStuff>:

BOOL doBorderStuff (struct onScreenPerson * moveMe) {
    9456:	          lea -124(sp),sp
    945a:	          movem.l d2-d7,-(sp)
    if (moveMe -> inPoly == moveMe -> walkToPoly) {
    945e:	          movea.l 152(sp),a0
    9462:	          move.l 56(a0),d1
    9466:	          movea.l 152(sp),a0
    946a:	          move.l 60(a0),d0
    946e:	          cmp.l d1,d0
    9470:	      /-- bne.s 94a0 <doBorderStuff+0x4a>
        moveMe -> inPoly = -1;
    9472:	      |   movea.l 152(sp),a0
    9476:	      |   moveq #-1,d0
    9478:	      |   move.l d0,56(a0)
        moveMe -> thisStepX = moveMe -> walkToX;
    947c:	      |   movea.l 152(sp),a0
    9480:	      |   move.l 40(a0),d0
    9484:	      |   movea.l 152(sp),a0
    9488:	      |   move.l d0,48(a0)
        moveMe -> thisStepY = moveMe -> walkToY;
    948c:	      |   movea.l 152(sp),a0
    9490:	      |   move.l 44(a0),d0
    9494:	      |   movea.l 152(sp),a0
    9498:	      |   move.l d0,52(a0)
    949c:	   /--|-- bra.w 9a06 <doBorderStuff+0x5b0>
    } else {
        // The section in which we need to be next...
        int newPoly = currentFloor -> matrix[moveMe -> inPoly][moveMe -> walkToPoly];
    94a0:	   |  \-> movea.l 1a914 <currentFloor>,a0
    94a6:	   |      move.l 16(a0),d1
    94aa:	   |      movea.l 152(sp),a0
    94ae:	   |      move.l 56(a0),d0
    94b2:	   |      add.l d0,d0
    94b4:	   |      add.l d0,d0
    94b6:	   |      movea.l d1,a0
    94b8:	   |      adda.l d0,a0
    94ba:	   |      move.l (a0),d1
    94bc:	   |      movea.l 152(sp),a0
    94c0:	   |      move.l 60(a0),d0
    94c4:	   |      add.l d0,d0
    94c6:	   |      add.l d0,d0
    94c8:	   |      movea.l d1,a0
    94ca:	   |      adda.l d0,a0
    94cc:	   |      move.l (a0),144(sp)
        if (newPoly == -1) return FALSE;
    94d0:	   |      moveq #-1,d0
    94d2:	   |      cmp.l 144(sp),d0
    94d6:	   |  /-- bne.s 94de <doBorderStuff+0x88>
    94d8:	   |  |   clr.w d0
    94da:	/--|--|-- bra.w 9b06 <doBorderStuff+0x6b0>

        // Grab the index of the second matching corner...
        int ID, ID2;
        if (! getMatchingCorners (&(currentFloor -> polygon[moveMe -> inPoly]), &(currentFloor -> polygon[newPoly]), &ID, &ID2))
    94de:	|  |  \-> movea.l 1a914 <currentFloor>,a0
    94e4:	|  |      move.l 12(a0),d1
    94e8:	|  |      move.l 144(sp),d0
    94ec:	|  |      lsl.l #3,d0
    94ee:	|  |      add.l d0,d1
    94f0:	|  |      movea.l 1a914 <currentFloor>,a0
    94f6:	|  |      movea.l 12(a0),a1
    94fa:	|  |      movea.l 152(sp),a0
    94fe:	|  |      move.l 56(a0),d0
    9502:	|  |      lsl.l #3,d0
    9504:	|  |      add.l a1,d0
    9506:	|  |      lea 40(sp),a0
    950a:	|  |      move.l a0,-(sp)
    950c:	|  |      lea 48(sp),a0
    9510:	|  |      move.l a0,-(sp)
    9512:	|  |      move.l d1,-(sp)
    9514:	|  |      move.l d0,-(sp)
    9516:	|  |      jsr 15ee0 <getMatchingCorners>
    951c:	|  |      lea 16(sp),sp
    9520:	|  |      tst.w d0
    9522:	|  |  /-- bne.s 9538 <doBorderStuff+0xe2>
		{
			KPrintF ("Not a valid floor plan!");
    9524:	|  |  |   pea 18bc3 <PutChar+0x1491>
    952a:	|  |  |   jsr 16c5e <KPrintF>
    9530:	|  |  |   addq.l #4,sp
            return FALSE;
    9532:	|  |  |   clr.w d0
    9534:	+--|--|-- bra.w 9b06 <doBorderStuff+0x6b0>
		}

        // Remember that we're walking to the new polygon...
        moveMe -> inPoly = newPoly;
    9538:	|  |  \-> movea.l 152(sp),a0
    953c:	|  |      move.l 144(sp),56(a0)

        // Calculate the destination position on the coincidental line...
        int x1 = moveMe -> x, y1 = moveMe -> y;
    9542:	|  |      movea.l 152(sp),a0
    9546:	|  |      move.l (a0),d0
    9548:	|  |      move.l d0,-(sp)
    954a:	|  |      jsr 17032 <__fixsfsi>
    9550:	|  |      addq.l #4,sp
    9552:	|  |      move.l d0,140(sp)
    9556:	|  |      movea.l 152(sp),a0
    955a:	|  |      move.l 4(a0),d0
    955e:	|  |      move.l d0,-(sp)
    9560:	|  |      jsr 17032 <__fixsfsi>
    9566:	|  |      addq.l #4,sp
    9568:	|  |      move.l d0,136(sp)
        int x2 = moveMe -> walkToX, y2 = moveMe -> walkToY;
    956c:	|  |      movea.l 152(sp),a0
    9570:	|  |      move.l 40(a0),132(sp)
    9576:	|  |      movea.l 152(sp),a0
    957a:	|  |      move.l 44(a0),128(sp)
        int x3 = currentFloor -> vertex[ID].x, y3 = currentFloor -> vertex[ID].y;
    9580:	|  |      movea.l 1a914 <currentFloor>,a0
    9586:	|  |      move.l 4(a0),d1
    958a:	|  |      move.l 44(sp),d0
    958e:	|  |      lsl.l #3,d0
    9590:	|  |      movea.l d1,a0
    9592:	|  |      adda.l d0,a0
    9594:	|  |      move.l (a0),124(sp)
    9598:	|  |      movea.l 1a914 <currentFloor>,a0
    959e:	|  |      move.l 4(a0),d1
    95a2:	|  |      move.l 44(sp),d0
    95a6:	|  |      lsl.l #3,d0
    95a8:	|  |      movea.l d1,a0
    95aa:	|  |      adda.l d0,a0
    95ac:	|  |      move.l 4(a0),120(sp)
        int x4 = currentFloor -> vertex[ID2].x, y4 = currentFloor -> vertex[ID2].y;
    95b2:	|  |      movea.l 1a914 <currentFloor>,a0
    95b8:	|  |      move.l 4(a0),d1
    95bc:	|  |      move.l 40(sp),d0
    95c0:	|  |      lsl.l #3,d0
    95c2:	|  |      movea.l d1,a0
    95c4:	|  |      adda.l d0,a0
    95c6:	|  |      move.l (a0),116(sp)
    95ca:	|  |      movea.l 1a914 <currentFloor>,a0
    95d0:	|  |      move.l 4(a0),d1
    95d4:	|  |      move.l 40(sp),d0
    95d8:	|  |      lsl.l #3,d0
    95da:	|  |      movea.l d1,a0
    95dc:	|  |      adda.l d0,a0
    95de:	|  |      move.l 4(a0),112(sp)

        int xAB = x1 - x2;
    95e4:	|  |      move.l 140(sp),d0
    95e8:	|  |      sub.l 132(sp),d0
    95ec:	|  |      move.l d0,108(sp)
        int yAB = y1 - y2;
    95f0:	|  |      move.l 136(sp),d0
    95f4:	|  |      sub.l 128(sp),d0
    95f8:	|  |      move.l d0,104(sp)
        int xCD = x4 - x3;
    95fc:	|  |      move.l 116(sp),d0
    9600:	|  |      sub.l 124(sp),d0
    9604:	|  |      move.l d0,100(sp)
        int yCD = y4 - y3;
    9608:	|  |      move.l 112(sp),d0
    960c:	|  |      sub.l 120(sp),d0
    9610:	|  |      move.l d0,96(sp)

        double m = (yAB * (x3 - x1) - xAB * (y3 - y1));
    9614:	|  |      move.l 124(sp),d0
    9618:	|  |      sub.l 140(sp),d0
    961c:	|  |      move.l 104(sp),-(sp)
    9620:	|  |      move.l d0,-(sp)
    9622:	|  |      jsr 1761c <__mulsi3>
    9628:	|  |      addq.l #8,sp
    962a:	|  |      move.l d0,d2
    962c:	|  |      move.l 120(sp),d0
    9630:	|  |      sub.l 136(sp),d0
    9634:	|  |      move.l 108(sp),-(sp)
    9638:	|  |      move.l d0,-(sp)
    963a:	|  |      jsr 1761c <__mulsi3>
    9640:	|  |      addq.l #8,sp
    9642:	|  |      move.l d2,d1
    9644:	|  |      sub.l d0,d1
    9646:	|  |      move.l d1,-(sp)
    9648:	|  |      jsr 1705a <__floatsidf>
    964e:	|  |      addq.l #4,sp
    9650:	|  |      move.l d0,32(sp)
    9654:	|  |      move.l d1,36(sp)
    9658:	|  |      move.l 32(sp),88(sp)
    965e:	|  |      move.l 36(sp),92(sp)
        m /= ((xAB * yCD) - (yAB * xCD));
    9664:	|  |      move.l 96(sp),-(sp)
    9668:	|  |      move.l 112(sp),-(sp)
    966c:	|  |      jsr 1761c <__mulsi3>
    9672:	|  |      addq.l #8,sp
    9674:	|  |      move.l d0,d2
    9676:	|  |      move.l 100(sp),-(sp)
    967a:	|  |      move.l 108(sp),-(sp)
    967e:	|  |      jsr 1761c <__mulsi3>
    9684:	|  |      addq.l #8,sp
    9686:	|  |      move.l d2,d1
    9688:	|  |      sub.l d0,d1
    968a:	|  |      move.l d1,-(sp)
    968c:	|  |      jsr 1705a <__floatsidf>
    9692:	|  |      addq.l #4,sp
    9694:	|  |      move.l d1,-(sp)
    9696:	|  |      move.l d0,-(sp)
    9698:	|  |      move.l 100(sp),-(sp)
    969c:	|  |      move.l 100(sp),-(sp)
    96a0:	|  |      jsr 16ee4 <__divdf3>
    96a6:	|  |      lea 16(sp),sp
    96aa:	|  |      move.l d0,24(sp)
    96ae:	|  |      move.l d1,28(sp)
    96b2:	|  |      move.l 24(sp),88(sp)
    96b8:	|  |      move.l 28(sp),92(sp)

        if (m > 0 && m < 1) {
    96be:	|  |      clr.l -(sp)
    96c0:	|  |      clr.l -(sp)
    96c2:	|  |      move.l 100(sp),-(sp)
    96c6:	|  |      move.l 100(sp),-(sp)
    96ca:	|  |      jsr 171b8 <__gtdf2>
    96d0:	|  |      lea 16(sp),sp
    96d4:	|  |      tst.l d0
    96d6:	|  |  /-- ble.w 97ae <doBorderStuff+0x358>
    96da:	|  |  |   clr.l -(sp)
    96dc:	|  |  |   move.l #1072693248,-(sp)
    96e2:	|  |  |   move.l 100(sp),-(sp)
    96e6:	|  |  |   move.l 100(sp),-(sp)
    96ea:	|  |  |   jsr 17272 <__ltdf2>
    96f0:	|  |  |   lea 16(sp),sp
    96f4:	|  |  |   tst.l d0
    96f6:	|  |  +-- bge.w 97ae <doBorderStuff+0x358>
            moveMe -> thisStepX = x3 + m * xCD;
    96fa:	|  |  |   move.l 124(sp),-(sp)
    96fe:	|  |  |   jsr 1705a <__floatsidf>
    9704:	|  |  |   addq.l #4,sp
    9706:	|  |  |   move.l d0,d2
    9708:	|  |  |   move.l d1,d3
    970a:	|  |  |   move.l 100(sp),-(sp)
    970e:	|  |  |   jsr 1705a <__floatsidf>
    9714:	|  |  |   addq.l #4,sp
    9716:	|  |  |   move.l 92(sp),-(sp)
    971a:	|  |  |   move.l 92(sp),-(sp)
    971e:	|  |  |   move.l d1,-(sp)
    9720:	|  |  |   move.l d0,-(sp)
    9722:	|  |  |   jsr 170ea <__muldf3>
    9728:	|  |  |   lea 16(sp),sp
    972c:	|  |  |   move.l d1,-(sp)
    972e:	|  |  |   move.l d0,-(sp)
    9730:	|  |  |   move.l d3,-(sp)
    9732:	|  |  |   move.l d2,-(sp)
    9734:	|  |  |   jsr 16e82 <__adddf3>
    973a:	|  |  |   lea 16(sp),sp
    973e:	|  |  |   move.l d1,-(sp)
    9740:	|  |  |   move.l d0,-(sp)
    9742:	|  |  |   jsr 16ff2 <__fixdfsi>
    9748:	|  |  |   addq.l #8,sp
    974a:	|  |  |   movea.l 152(sp),a0
    974e:	|  |  |   move.l d0,48(a0)
            moveMe -> thisStepY = y3 + m * yCD;
    9752:	|  |  |   move.l 120(sp),-(sp)
    9756:	|  |  |   jsr 1705a <__floatsidf>
    975c:	|  |  |   addq.l #4,sp
    975e:	|  |  |   move.l d0,d2
    9760:	|  |  |   move.l d1,d3
    9762:	|  |  |   move.l 96(sp),-(sp)
    9766:	|  |  |   jsr 1705a <__floatsidf>
    976c:	|  |  |   addq.l #4,sp
    976e:	|  |  |   move.l 92(sp),-(sp)
    9772:	|  |  |   move.l 92(sp),-(sp)
    9776:	|  |  |   move.l d1,-(sp)
    9778:	|  |  |   move.l d0,-(sp)
    977a:	|  |  |   jsr 170ea <__muldf3>
    9780:	|  |  |   lea 16(sp),sp
    9784:	|  |  |   move.l d1,-(sp)
    9786:	|  |  |   move.l d0,-(sp)
    9788:	|  |  |   move.l d3,-(sp)
    978a:	|  |  |   move.l d2,-(sp)
    978c:	|  |  |   jsr 16e82 <__adddf3>
    9792:	|  |  |   lea 16(sp),sp
    9796:	|  |  |   move.l d1,-(sp)
    9798:	|  |  |   move.l d0,-(sp)
    979a:	|  |  |   jsr 16ff2 <__fixdfsi>
    97a0:	|  |  |   addq.l #8,sp
    97a2:	|  |  |   movea.l 152(sp),a0
    97a6:	|  |  |   move.l d0,52(a0)
    97aa:	|  +--|-- bra.w 9a06 <doBorderStuff+0x5b0>
        } else {
            int dx13 = x1 - x3, dx14 = x1 - x4, dx23 = x2 - x3, dx24 = x2 - x4;
    97ae:	|  |  \-> move.l 140(sp),d0
    97b2:	|  |      sub.l 124(sp),d0
    97b6:	|  |      move.l d0,84(sp)
    97ba:	|  |      move.l 140(sp),d0
    97be:	|  |      sub.l 116(sp),d0
    97c2:	|  |      move.l d0,80(sp)
    97c6:	|  |      move.l 132(sp),d0
    97ca:	|  |      sub.l 124(sp),d0
    97ce:	|  |      move.l d0,76(sp)
    97d2:	|  |      move.l 132(sp),d0
    97d6:	|  |      sub.l 116(sp),d0
    97da:	|  |      move.l d0,72(sp)
            int dy13 = y1 - y3, dy14 = y1 - y4, dy23 = y2 - y3, dy24 = y2 - y4;
    97de:	|  |      move.l 136(sp),d0
    97e2:	|  |      sub.l 120(sp),d0
    97e6:	|  |      move.l d0,68(sp)
    97ea:	|  |      move.l 136(sp),d0
    97ee:	|  |      sub.l 112(sp),d0
    97f2:	|  |      move.l d0,64(sp)
    97f6:	|  |      move.l 128(sp),d0
    97fa:	|  |      sub.l 120(sp),d0
    97fe:	|  |      move.l d0,60(sp)
    9802:	|  |      move.l 128(sp),d0
    9806:	|  |      sub.l 112(sp),d0
    980a:	|  |      move.l d0,56(sp)

            dx13 *= dx13; dx14 *= dx14; dx23 *= dx23; dx24 *= dx24;
    980e:	|  |      move.l 84(sp),-(sp)
    9812:	|  |      move.l 88(sp),-(sp)
    9816:	|  |      jsr 1761c <__mulsi3>
    981c:	|  |      addq.l #8,sp
    981e:	|  |      move.l d0,84(sp)
    9822:	|  |      move.l 80(sp),-(sp)
    9826:	|  |      move.l 84(sp),-(sp)
    982a:	|  |      jsr 1761c <__mulsi3>
    9830:	|  |      addq.l #8,sp
    9832:	|  |      move.l d0,80(sp)
    9836:	|  |      move.l 76(sp),-(sp)
    983a:	|  |      move.l 80(sp),-(sp)
    983e:	|  |      jsr 1761c <__mulsi3>
    9844:	|  |      addq.l #8,sp
    9846:	|  |      move.l d0,76(sp)
    984a:	|  |      move.l 72(sp),-(sp)
    984e:	|  |      move.l 76(sp),-(sp)
    9852:	|  |      jsr 1761c <__mulsi3>
    9858:	|  |      addq.l #8,sp
    985a:	|  |      move.l d0,72(sp)
            dy13 *= dy13; dy14 *= dy14; dy23 *= dy23; dy24 *= dy24;
    985e:	|  |      move.l 68(sp),-(sp)
    9862:	|  |      move.l 72(sp),-(sp)
    9866:	|  |      jsr 1761c <__mulsi3>
    986c:	|  |      addq.l #8,sp
    986e:	|  |      move.l d0,68(sp)
    9872:	|  |      move.l 64(sp),-(sp)
    9876:	|  |      move.l 68(sp),-(sp)
    987a:	|  |      jsr 1761c <__mulsi3>
    9880:	|  |      addq.l #8,sp
    9882:	|  |      move.l d0,64(sp)
    9886:	|  |      move.l 60(sp),-(sp)
    988a:	|  |      move.l 64(sp),-(sp)
    988e:	|  |      jsr 1761c <__mulsi3>
    9894:	|  |      addq.l #8,sp
    9896:	|  |      move.l d0,60(sp)
    989a:	|  |      move.l 56(sp),-(sp)
    989e:	|  |      move.l 60(sp),-(sp)
    98a2:	|  |      jsr 1761c <__mulsi3>
    98a8:	|  |      addq.l #8,sp
    98aa:	|  |      move.l d0,56(sp)

            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    98ae:	|  |      move.l 84(sp),-(sp)
    98b2:	|  |      jsr 1705a <__floatsidf>
    98b8:	|  |      addq.l #4,sp
    98ba:	|  |      move.l d0,d2
    98bc:	|  |      move.l d1,d3
    98be:	|  |      move.l 68(sp),-(sp)
    98c2:	|  |      jsr 1705a <__floatsidf>
    98c8:	|  |      addq.l #4,sp
    98ca:	|  |      move.l d1,-(sp)
    98cc:	|  |      move.l d0,-(sp)
    98ce:	|  |      move.l d3,-(sp)
    98d0:	|  |      move.l d2,-(sp)
    98d2:	|  |      jsr 16e82 <__adddf3>
    98d8:	|  |      lea 16(sp),sp
    98dc:	|  |      move.l d1,-(sp)
    98de:	|  |      move.l d0,-(sp)
    98e0:	|  |      jsr 175d2 <sqrt>
    98e6:	|  |      addq.l #8,sp
    98e8:	|  |      move.l d0,d2
    98ea:	|  |      move.l d1,d3
    98ec:	|  |      move.l 76(sp),-(sp)
    98f0:	|  |      jsr 1705a <__floatsidf>
    98f6:	|  |      addq.l #4,sp
    98f8:	|  |      move.l d0,d4
    98fa:	|  |      move.l d1,d5
    98fc:	|  |      move.l 60(sp),-(sp)
    9900:	|  |      jsr 1705a <__floatsidf>
    9906:	|  |      addq.l #4,sp
    9908:	|  |      move.l d1,-(sp)
    990a:	|  |      move.l d0,-(sp)
    990c:	|  |      move.l d5,-(sp)
    990e:	|  |      move.l d4,-(sp)
    9910:	|  |      jsr 16e82 <__adddf3>
    9916:	|  |      lea 16(sp),sp
    991a:	|  |      move.l d1,-(sp)
    991c:	|  |      move.l d0,-(sp)
    991e:	|  |      jsr 175d2 <sqrt>
    9924:	|  |      addq.l #8,sp
    9926:	|  |      move.l d1,-(sp)
    9928:	|  |      move.l d0,-(sp)
    992a:	|  |      move.l d3,-(sp)
    992c:	|  |      move.l d2,-(sp)
    992e:	|  |      jsr 16e82 <__adddf3>
    9934:	|  |      lea 16(sp),sp
    9938:	|  |      move.l d0,d2
    993a:	|  |      move.l d1,d3
                sqrt((double) dx14 + dy14) + sqrt((double) dx24 + dy24)) {
    993c:	|  |      move.l 80(sp),-(sp)
    9940:	|  |      jsr 1705a <__floatsidf>
    9946:	|  |      addq.l #4,sp
    9948:	|  |      move.l d0,d4
    994a:	|  |      move.l d1,d5
    994c:	|  |      move.l 64(sp),-(sp)
    9950:	|  |      jsr 1705a <__floatsidf>
    9956:	|  |      addq.l #4,sp
    9958:	|  |      move.l d1,-(sp)
    995a:	|  |      move.l d0,-(sp)
    995c:	|  |      move.l d5,-(sp)
    995e:	|  |      move.l d4,-(sp)
    9960:	|  |      jsr 16e82 <__adddf3>
    9966:	|  |      lea 16(sp),sp
    996a:	|  |      move.l d1,-(sp)
    996c:	|  |      move.l d0,-(sp)
    996e:	|  |      jsr 175d2 <sqrt>
    9974:	|  |      addq.l #8,sp
    9976:	|  |      move.l d0,d4
    9978:	|  |      move.l d1,d5
    997a:	|  |      move.l 72(sp),-(sp)
    997e:	|  |      jsr 1705a <__floatsidf>
    9984:	|  |      addq.l #4,sp
    9986:	|  |      move.l d0,d6
    9988:	|  |      move.l d1,d7
    998a:	|  |      move.l 56(sp),-(sp)
    998e:	|  |      jsr 1705a <__floatsidf>
    9994:	|  |      addq.l #4,sp
    9996:	|  |      move.l d1,-(sp)
    9998:	|  |      move.l d0,-(sp)
    999a:	|  |      move.l d7,-(sp)
    999c:	|  |      move.l d6,-(sp)
    999e:	|  |      jsr 16e82 <__adddf3>
    99a4:	|  |      lea 16(sp),sp
    99a8:	|  |      move.l d1,-(sp)
    99aa:	|  |      move.l d0,-(sp)
    99ac:	|  |      jsr 175d2 <sqrt>
    99b2:	|  |      addq.l #8,sp
    99b4:	|  |      move.l d1,-(sp)
    99b6:	|  |      move.l d0,-(sp)
    99b8:	|  |      move.l d5,-(sp)
    99ba:	|  |      move.l d4,-(sp)
    99bc:	|  |      jsr 16e82 <__adddf3>
    99c2:	|  |      lea 16(sp),sp
            if (sqrt((double) dx13 + dy13) + sqrt((double) dx23 + dy23) <
    99c6:	|  |      move.l d1,-(sp)
    99c8:	|  |      move.l d0,-(sp)
    99ca:	|  |      move.l d3,-(sp)
    99cc:	|  |      move.l d2,-(sp)
    99ce:	|  |      jsr 17272 <__ltdf2>
    99d4:	|  |      lea 16(sp),sp
    99d8:	|  |      tst.l d0
    99da:	|  |  /-- bge.s 99f2 <doBorderStuff+0x59c>
                moveMe -> thisStepX = x3;
    99dc:	|  |  |   movea.l 152(sp),a0
    99e0:	|  |  |   move.l 124(sp),48(a0)
                moveMe -> thisStepY = y3;
    99e6:	|  |  |   movea.l 152(sp),a0
    99ea:	|  |  |   move.l 120(sp),52(a0)
    99f0:	|  +--|-- bra.s 9a06 <doBorderStuff+0x5b0>
            } else {
                moveMe -> thisStepX = x4;
    99f2:	|  |  \-> movea.l 152(sp),a0
    99f6:	|  |      move.l 116(sp),48(a0)
                moveMe -> thisStepY = y4;
    99fc:	|  |      movea.l 152(sp),a0
    9a00:	|  |      move.l 112(sp),52(a0)
            }
        }
    }

    float yDiff = moveMe -> thisStepY - moveMe -> y;
    9a06:	|  \----> movea.l 152(sp),a0
    9a0a:	|         move.l 52(a0),d0
    9a0e:	|         move.l d0,-(sp)
    9a10:	|         jsr 1709a <__floatsisf>
    9a16:	|         addq.l #4,sp
    9a18:	|         move.l d0,d1
    9a1a:	|         movea.l 152(sp),a0
    9a1e:	|         move.l 4(a0),d0
    9a22:	|         move.l d0,-(sp)
    9a24:	|         move.l d1,-(sp)
    9a26:	|         jsr 1738e <__subsf3>
    9a2c:	|         addq.l #8,sp
    9a2e:	|         move.l d0,52(sp)
    float xDiff = moveMe -> x - moveMe -> thisStepX;
    9a32:	|         movea.l 152(sp),a0
    9a36:	|         move.l (a0),d2
    9a38:	|         movea.l 152(sp),a0
    9a3c:	|         move.l 48(a0),d0
    9a40:	|         move.l d0,-(sp)
    9a42:	|         jsr 1709a <__floatsisf>
    9a48:	|         addq.l #4,sp
    9a4a:	|         move.l d0,-(sp)
    9a4c:	|         move.l d2,-(sp)
    9a4e:	|         jsr 1738e <__subsf3>
    9a54:	|         addq.l #8,sp
    9a56:	|         move.l d0,48(sp)
    if (xDiff || yDiff) {
    9a5a:	|         clr.l -(sp)
    9a5c:	|         move.l 52(sp),-(sp)
    9a60:	|         jsr 172f6 <__nesf2>
    9a66:	|         addq.l #8,sp
    9a68:	|         tst.l d0
    9a6a:	|     /-- bne.s 9a7e <doBorderStuff+0x628>
    9a6c:	|     |   clr.l -(sp)
    9a6e:	|     |   move.l 56(sp),-(sp)
    9a72:	|     |   jsr 172f6 <__nesf2>
    9a78:	|     |   addq.l #8,sp
    9a7a:	|     |   tst.l d0
    9a7c:	|  /--|-- beq.s 9af4 <doBorderStuff+0x69e>
        moveMe -> wantAngle = 180 + ANGLEFIX * atan2f(xDiff, yDiff * 2);
    9a7e:	|  |  \-> move.l 52(sp),d0
    9a82:	|  |      move.l d0,-(sp)
    9a84:	|  |      move.l d0,-(sp)
    9a86:	|  |      jsr 16e4c <__addsf3>
    9a8c:	|  |      addq.l #8,sp
    9a8e:	|  |      move.l d0,-(sp)
    9a90:	|  |      move.l 52(sp),-(sp)
    9a94:	|  |      jsr 17422 <atan2f>
    9a9a:	|  |      addq.l #8,sp
    9a9c:	|  |      move.l d0,-(sp)
    9a9e:	|  |      jsr 16fb2 <__extendsfdf2>
    9aa4:	|  |      addq.l #4,sp
    9aa6:	|  |      move.l #-1540411785,-(sp)
    9aac:	|  |      move.l #1078765033,-(sp)
    9ab2:	|  |      move.l d1,-(sp)
    9ab4:	|  |      move.l d0,-(sp)
    9ab6:	|  |      jsr 170ea <__muldf3>
    9abc:	|  |      lea 16(sp),sp
    9ac0:	|  |      clr.l -(sp)
    9ac2:	|  |      move.l #1080459264,-(sp)
    9ac8:	|  |      move.l d1,-(sp)
    9aca:	|  |      move.l d0,-(sp)
    9acc:	|  |      jsr 16e82 <__adddf3>
    9ad2:	|  |      lea 16(sp),sp
    9ad6:	|  |      move.l d1,-(sp)
    9ad8:	|  |      move.l d0,-(sp)
    9ada:	|  |      jsr 16ff2 <__fixdfsi>
    9ae0:	|  |      addq.l #8,sp
    9ae2:	|  |      movea.l 152(sp),a0
    9ae6:	|  |      move.l d0,96(a0)
        moveMe -> spinning = TRUE;
    9aea:	|  |      movea.l 152(sp),a0
    9aee:	|  |      move.w #1,66(a0)
    }

    setFrames (moveMe, ANI_WALK);
    9af4:	|  \----> pea 1 <_start+0x1>
    9af8:	|         move.l 156(sp),-(sp)
    9afc:	|         jsr 7a3e <setFrames>
    9b02:	|         addq.l #8,sp
    return TRUE;
    9b04:	|         moveq #1,d0
}
    9b06:	\-------> movem.l (sp)+,d2-d7
    9b0a:	          lea 124(sp),sp
    9b0e:	          rts

00009b10 <drawPeople>:

void drawPeople () {
    9b10:	                   lea -24(sp),sp
    9b14:	                   move.l d2,-(sp)

	shufflePeople ();
    9b16:	                   jsr b5ac <shufflePeople>

	struct onScreenPerson * thisPerson = allPeople;
    9b1c:	                   move.l 1a85c <allPeople>,24(sp)
	struct personaAnimation * myAnim = NULL;
    9b24:	                   clr.l 20(sp)
	overRegion = NULL;
    9b28:	                   clr.l 1a90c <overRegion>

	while (thisPerson) {
    9b2e:	   /-------------- bra.w a0e0 <drawPeople+0x5d0>
		if (thisPerson -> show) {
    9b32:	/--|-------------> movea.l 24(sp),a0
    9b36:	|  |               move.w 104(a0),d0
    9b3a:	|  |  /----------- beq.w 9e94 <drawPeople+0x384>
			myAnim = thisPerson -> myAnim;
    9b3e:	|  |  |            movea.l 24(sp),a0
    9b42:	|  |  |            move.l 72(a0),20(sp)
			if (myAnim != thisPerson -> lastUsedAnim) {
    9b48:	|  |  |            movea.l 24(sp),a0
    9b4c:	|  |  |            move.l 76(a0),d0
    9b50:	|  |  |            cmp.l 20(sp),d0
    9b54:	|  |  |  /-------- beq.w 9d22 <drawPeople+0x212>
				thisPerson -> samePosCount = 0;
    9b58:	|  |  |  |         movea.l 24(sp),a0
    9b5c:	|  |  |  |         clr.l 16(a0)
				thisPerson -> lastUsedAnim = myAnim;
    9b60:	|  |  |  |         movea.l 24(sp),a0
    9b64:	|  |  |  |         move.l 20(sp),76(a0)
				thisPerson -> frameNum = 0;
    9b6a:	|  |  |  |         movea.l 24(sp),a0
    9b6e:	|  |  |  |         clr.l 84(a0)
				thisPerson -> frameTick = myAnim -> frames[0].howMany;
    9b72:	|  |  |  |         movea.l 20(sp),a0
    9b76:	|  |  |  |         movea.l 4(a0),a0
    9b7a:	|  |  |  |         move.l 4(a0),d0
    9b7e:	|  |  |  |         movea.l 24(sp),a0
    9b82:	|  |  |  |         move.l d0,88(a0)
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9b86:	|  |  |  |         movea.l 20(sp),a0
    9b8a:	|  |  |  |         movea.l 4(a0),a1
    9b8e:	|  |  |  |         movea.l 24(sp),a0
    9b92:	|  |  |  |         move.l 84(a0),d0
    9b96:	|  |  |  |         move.l d0,d1
    9b98:	|  |  |  |         move.l d1,d0
    9b9a:	|  |  |  |         add.l d0,d0
    9b9c:	|  |  |  |         add.l d1,d0
    9b9e:	|  |  |  |         add.l d0,d0
    9ba0:	|  |  |  |         add.l d0,d0
    9ba2:	|  |  |  |         lea (0,a1,d0.l),a0
    9ba6:	|  |  |  |         move.l 8(a0),d0
    9baa:	|  |  |  |     /-- ble.w 9c4c <drawPeople+0x13c>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9bae:	|  |  |  |     |   movea.l 20(sp),a0
    9bb2:	|  |  |  |     |   movea.l 4(a0),a1
    9bb6:	|  |  |  |     |   movea.l 24(sp),a0
    9bba:	|  |  |  |     |   move.l 84(a0),d0
    9bbe:	|  |  |  |     |   move.l d0,d1
    9bc0:	|  |  |  |     |   move.l d1,d0
    9bc2:	|  |  |  |     |   add.l d0,d0
    9bc4:	|  |  |  |     |   add.l d1,d0
    9bc6:	|  |  |  |     |   add.l d0,d0
    9bc8:	|  |  |  |     |   add.l d0,d0
    9bca:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9bce:	|  |  |  |     |   move.l 8(a0),d0
    9bd2:	|  |  |  |     |   clr.l -(sp)
    9bd4:	|  |  |  |     |   move.l d0,-(sp)
    9bd6:	|  |  |  |     |   jsr cc94 <startSound>
    9bdc:	|  |  |  |     |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9bde:	|  |  |  |     |   movea.l 24(sp),a0
    9be2:	|  |  |  |     |   move.l 84(a0),d0
    9be6:	|  |  |  |     |   addq.l #1,d0
    9be8:	|  |  |  |     |   movea.l 24(sp),a0
    9bec:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9bf0:	|  |  |  |     |   movea.l 24(sp),a0
    9bf4:	|  |  |  |     |   move.l 84(a0),d0
    9bf8:	|  |  |  |     |   movea.l 24(sp),a0
    9bfc:	|  |  |  |     |   movea.l 72(a0),a0
    9c00:	|  |  |  |     |   move.l 8(a0),d1
    9c04:	|  |  |  |     |   move.l d1,-(sp)
    9c06:	|  |  |  |     |   move.l d0,-(sp)
    9c08:	|  |  |  |     |   jsr 176c8 <__modsi3>
    9c0e:	|  |  |  |     |   addq.l #8,sp
    9c10:	|  |  |  |     |   movea.l 24(sp),a0
    9c14:	|  |  |  |     |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9c18:	|  |  |  |     |   movea.l 24(sp),a0
    9c1c:	|  |  |  |     |   movea.l 72(a0),a0
    9c20:	|  |  |  |     |   movea.l 4(a0),a1
    9c24:	|  |  |  |     |   movea.l 24(sp),a0
    9c28:	|  |  |  |     |   move.l 84(a0),d0
    9c2c:	|  |  |  |     |   move.l d0,d1
    9c2e:	|  |  |  |     |   move.l d1,d0
    9c30:	|  |  |  |     |   add.l d0,d0
    9c32:	|  |  |  |     |   add.l d1,d0
    9c34:	|  |  |  |     |   add.l d0,d0
    9c36:	|  |  |  |     |   add.l d0,d0
    9c38:	|  |  |  |     |   lea (0,a1,d0.l),a0
    9c3c:	|  |  |  |     |   move.l 4(a0),d0
    9c40:	|  |  |  |     |   movea.l 24(sp),a0
    9c44:	|  |  |  |     |   move.l d0,88(a0)
    9c48:	|  |  |  |  /--|-- bra.w 9d8a <drawPeople+0x27a>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    9c4c:	|  |  |  |  |  \-> movea.l 20(sp),a0
    9c50:	|  |  |  |  |      movea.l 4(a0),a1
    9c54:	|  |  |  |  |      movea.l 24(sp),a0
    9c58:	|  |  |  |  |      move.l 84(a0),d0
    9c5c:	|  |  |  |  |      move.l d0,d1
    9c5e:	|  |  |  |  |      move.l d1,d0
    9c60:	|  |  |  |  |      add.l d0,d0
    9c62:	|  |  |  |  |      add.l d1,d0
    9c64:	|  |  |  |  |      add.l d0,d0
    9c66:	|  |  |  |  |      add.l d0,d0
    9c68:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9c6c:	|  |  |  |  |      move.l 8(a0),d0
    9c70:	|  |  |  |  +----- beq.w 9d8a <drawPeople+0x27a>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    9c74:	|  |  |  |  |      movea.l 1a774 <noStack>,a1
    9c7a:	|  |  |  |  |      movea.l 20(sp),a0
    9c7e:	|  |  |  |  |      move.l 4(a0),d2
    9c82:	|  |  |  |  |      movea.l 24(sp),a0
    9c86:	|  |  |  |  |      move.l 84(a0),d0
    9c8a:	|  |  |  |  |      move.l d0,d1
    9c8c:	|  |  |  |  |      move.l d1,d0
    9c8e:	|  |  |  |  |      add.l d0,d0
    9c90:	|  |  |  |  |      add.l d1,d0
    9c92:	|  |  |  |  |      add.l d0,d0
    9c94:	|  |  |  |  |      add.l d0,d0
    9c96:	|  |  |  |  |      movea.l d2,a0
    9c98:	|  |  |  |  |      adda.l d0,a0
    9c9a:	|  |  |  |  |      move.l 8(a0),d0
    9c9e:	|  |  |  |  |      neg.l d0
    9ca0:	|  |  |  |  |      pea 1 <_start+0x1>
    9ca4:	|  |  |  |  |      move.l a1,-(sp)
    9ca6:	|  |  |  |  |      clr.l -(sp)
    9ca8:	|  |  |  |  |      clr.l -(sp)
    9caa:	|  |  |  |  |      move.l d0,-(sp)
    9cac:	|  |  |  |  |      jsr 63b0 <startNewFunctionNum>
    9cb2:	|  |  |  |  |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    9cb6:	|  |  |  |  |      movea.l 24(sp),a0
    9cba:	|  |  |  |  |      move.l 84(a0),d0
    9cbe:	|  |  |  |  |      addq.l #1,d0
    9cc0:	|  |  |  |  |      movea.l 24(sp),a0
    9cc4:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9cc8:	|  |  |  |  |      movea.l 24(sp),a0
    9ccc:	|  |  |  |  |      move.l 84(a0),d0
    9cd0:	|  |  |  |  |      movea.l 24(sp),a0
    9cd4:	|  |  |  |  |      movea.l 72(a0),a0
    9cd8:	|  |  |  |  |      move.l 8(a0),d1
    9cdc:	|  |  |  |  |      move.l d1,-(sp)
    9cde:	|  |  |  |  |      move.l d0,-(sp)
    9ce0:	|  |  |  |  |      jsr 176c8 <__modsi3>
    9ce6:	|  |  |  |  |      addq.l #8,sp
    9ce8:	|  |  |  |  |      movea.l 24(sp),a0
    9cec:	|  |  |  |  |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9cf0:	|  |  |  |  |      movea.l 24(sp),a0
    9cf4:	|  |  |  |  |      movea.l 72(a0),a0
    9cf8:	|  |  |  |  |      movea.l 4(a0),a1
    9cfc:	|  |  |  |  |      movea.l 24(sp),a0
    9d00:	|  |  |  |  |      move.l 84(a0),d0
    9d04:	|  |  |  |  |      move.l d0,d1
    9d06:	|  |  |  |  |      move.l d1,d0
    9d08:	|  |  |  |  |      add.l d0,d0
    9d0a:	|  |  |  |  |      add.l d1,d0
    9d0c:	|  |  |  |  |      add.l d0,d0
    9d0e:	|  |  |  |  |      add.l d0,d0
    9d10:	|  |  |  |  |      lea (0,a1,d0.l),a0
    9d14:	|  |  |  |  |      move.l 4(a0),d0
    9d18:	|  |  |  |  |      movea.l 24(sp),a0
    9d1c:	|  |  |  |  |      move.l d0,88(a0)
    9d20:	|  |  |  |  +----- bra.s 9d8a <drawPeople+0x27a>
				}
			} else {
				if(thisPerson->x == thisPerson->oldx && thisPerson->y == thisPerson->oldy && myAnim->numFrames == 1)
    9d22:	|  |  |  \--|----> movea.l 24(sp),a0
    9d26:	|  |  |     |      move.l (a0),d0
    9d28:	|  |  |     |      movea.l 24(sp),a0
    9d2c:	|  |  |     |      move.l 8(a0),d1
    9d30:	|  |  |     |      move.l d1,-(sp)
    9d32:	|  |  |     |      move.l d0,-(sp)
    9d34:	|  |  |     |      jsr 16f7c <__eqsf2>
    9d3a:	|  |  |     |      addq.l #8,sp
    9d3c:	|  |  |     |      tst.l d0
    9d3e:	|  |  |     |  /-- bne.s 9d82 <drawPeople+0x272>
    9d40:	|  |  |     |  |   movea.l 24(sp),a0
    9d44:	|  |  |     |  |   move.l 4(a0),d0
    9d48:	|  |  |     |  |   movea.l 24(sp),a0
    9d4c:	|  |  |     |  |   move.l 12(a0),d1
    9d50:	|  |  |     |  |   move.l d1,-(sp)
    9d52:	|  |  |     |  |   move.l d0,-(sp)
    9d54:	|  |  |     |  |   jsr 16f7c <__eqsf2>
    9d5a:	|  |  |     |  |   addq.l #8,sp
    9d5c:	|  |  |     |  |   tst.l d0
    9d5e:	|  |  |     |  +-- bne.s 9d82 <drawPeople+0x272>
    9d60:	|  |  |     |  |   movea.l 20(sp),a0
    9d64:	|  |  |     |  |   move.l 8(a0),d0
    9d68:	|  |  |     |  |   moveq #1,d1
    9d6a:	|  |  |     |  |   cmp.l d0,d1
    9d6c:	|  |  |     |  +-- bne.s 9d82 <drawPeople+0x272>
				{
					thisPerson->samePosCount++;
    9d6e:	|  |  |     |  |   movea.l 24(sp),a0
    9d72:	|  |  |     |  |   move.l 16(a0),d0
    9d76:	|  |  |     |  |   addq.l #1,d0
    9d78:	|  |  |     |  |   movea.l 24(sp),a0
    9d7c:	|  |  |     |  |   move.l d0,16(a0)
    9d80:	|  |  |     +--|-- bra.s 9d8a <drawPeople+0x27a>
				} else
				{
					thisPerson->samePosCount = 0;
    9d82:	|  |  |     |  \-> movea.l 24(sp),a0
    9d86:	|  |  |     |      clr.l 16(a0)
				}
			}

			thisPerson->oldx = thisPerson->x;
    9d8a:	|  |  |     \----> movea.l 24(sp),a0
    9d8e:	|  |  |            move.l (a0),d0
    9d90:	|  |  |            movea.l 24(sp),a0
    9d94:	|  |  |            move.l d0,8(a0)
			thisPerson->oldy = thisPerson->y;
    9d98:	|  |  |            movea.l 24(sp),a0
    9d9c:	|  |  |            move.l 4(a0),d0
    9da0:	|  |  |            movea.l 24(sp),a0
    9da4:	|  |  |            move.l d0,12(a0)
			int fNumSign = myAnim -> frames[thisPerson -> frameNum].frameNum;
    9da8:	|  |  |            movea.l 20(sp),a0
    9dac:	|  |  |            movea.l 4(a0),a1
    9db0:	|  |  |            movea.l 24(sp),a0
    9db4:	|  |  |            move.l 84(a0),d0
    9db8:	|  |  |            move.l d0,d1
    9dba:	|  |  |            move.l d1,d0
    9dbc:	|  |  |            add.l d0,d0
    9dbe:	|  |  |            add.l d1,d0
    9dc0:	|  |  |            add.l d0,d0
    9dc2:	|  |  |            add.l d0,d0
    9dc4:	|  |  |            lea (0,a1,d0.l),a0
    9dc8:	|  |  |            move.l (a0),8(sp)
			int m = fNumSign < 0;
    9dcc:	|  |  |            move.l 8(sp),d0
    9dd0:	|  |  |            add.l d0,d0
    9dd2:	|  |  |            subx.l d0,d0
    9dd4:	|  |  |            neg.l d0
    9dd6:	|  |  |            move.b d0,d0
    9dd8:	|  |  |            move.b d0,d0
    9dda:	|  |  |            andi.l #255,d0
    9de0:	|  |  |            move.l d0,16(sp)
			int fNum = TF_abs(fNumSign);
    9de4:	|  |  |            move.l 8(sp),-(sp)
    9de8:	|  |  |            jsr 8ce4 <TF_abs>
    9dee:	|  |  |            addq.l #4,sp
    9df0:	|  |  |            move.l d0,12(sp)
			if (fNum >= myAnim -> theSprites -> bank.total) {
    9df4:	|  |  |            movea.l 20(sp),a0
    9df8:	|  |  |            movea.l (a0),a0
    9dfa:	|  |  |            move.l 8(a0),d0
    9dfe:	|  |  |            cmp.l 12(sp),d0
    9e02:	|  |  |        /-- bgt.s 9e12 <drawPeople+0x302>
				fNum = 0;
    9e04:	|  |  |        |   clr.l 12(sp)
				m = 2 - m;
    9e08:	|  |  |        |   moveq #2,d0
    9e0a:	|  |  |        |   sub.l 16(sp),d0
    9e0e:	|  |  |        |   move.l d0,16(sp)
			}
			if (m != 2) {
    9e12:	|  |  |        \-> moveq #2,d1
    9e14:	|  |  |            cmp.l 16(sp),d1
    9e18:	|  |  +----------- beq.s 9e94 <drawPeople+0x384>
				BOOL r = FALSE;
    9e1a:	|  |  |            clr.w 6(sp)

				r = scaleSprite ( &myAnim->theSprites->bank.sprites[fNum], thisPerson, m);
    9e1e:	|  |  |            move.l 16(sp),d0
    9e22:	|  |  |            movea.w d0,a0
    9e24:	|  |  |            movea.l 20(sp),a1
    9e28:	|  |  |            movea.l (a1),a1
    9e2a:	|  |  |            movea.l 16(a1),a1
    9e2e:	|  |  |            move.l 12(sp),d1
    9e32:	|  |  |            move.l d1,d0
    9e34:	|  |  |            lsl.l #3,d0
    9e36:	|  |  |            sub.l d1,d0
    9e38:	|  |  |            add.l d0,d0
    9e3a:	|  |  |            add.l d0,d0
    9e3c:	|  |  |            add.l a1,d0
    9e3e:	|  |  |            move.l a0,-(sp)
    9e40:	|  |  |            move.l 28(sp),-(sp)
    9e44:	|  |  |            move.l d0,-(sp)
    9e46:	|  |  |            jsr 8a7a <scaleSprite>
    9e4c:	|  |  |            lea 12(sp),sp
    9e50:	|  |  |            move.w d0,6(sp)
				if (r) {
    9e54:	|  |  +----------- beq.s 9e94 <drawPeople+0x384>
					if (thisPerson -> thisType -> screenName[0]) {
    9e56:	|  |  |            movea.l 24(sp),a0
    9e5a:	|  |  |            movea.l 114(a0),a0
    9e5e:	|  |  |            movea.l (a0),a0
    9e60:	|  |  |            move.b (a0),d0
    9e62:	|  |  +----------- beq.s 9e94 <drawPeople+0x384>
						if (personRegion.thisType != thisPerson -> thisType) lastRegion = NULL;
    9e64:	|  |  |            move.l 1a87c <personRegion+0x1c>,d1
    9e6a:	|  |  |            movea.l 24(sp),a0
    9e6e:	|  |  |            move.l 114(a0),d0
    9e72:	|  |  |            cmp.l d1,d0
    9e74:	|  |  |        /-- beq.s 9e7c <drawPeople+0x36c>
    9e76:	|  |  |        |   clr.l 1a76c <lastRegion>
						personRegion.thisType = thisPerson -> thisType;
    9e7c:	|  |  |        \-> movea.l 24(sp),a0
    9e80:	|  |  |            move.l 114(a0),d0
    9e84:	|  |  |            move.l d0,1a87c <personRegion+0x1c>
						overRegion = & personRegion;
    9e8a:	|  |  |            move.l #108640,1a90c <overRegion>
					}
				}
			}
		}
		if (! -- thisPerson -> frameTick) {
    9e94:	|  |  \----------> movea.l 24(sp),a0
    9e98:	|  |               move.l 88(a0),d0
    9e9c:	|  |               subq.l #1,d0
    9e9e:	|  |               movea.l 24(sp),a0
    9ea2:	|  |               move.l d0,88(a0)
    9ea6:	|  |               movea.l 24(sp),a0
    9eaa:	|  |               move.l 88(a0),d0
    9eae:	|  |        /----- bne.w a0d6 <drawPeople+0x5c6>
			thisPerson -> frameNum ++;
    9eb2:	|  |        |      movea.l 24(sp),a0
    9eb6:	|  |        |      move.l 84(a0),d0
    9eba:	|  |        |      addq.l #1,d0
    9ebc:	|  |        |      movea.l 24(sp),a0
    9ec0:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9ec4:	|  |        |      movea.l 24(sp),a0
    9ec8:	|  |        |      move.l 84(a0),d0
    9ecc:	|  |        |      movea.l 24(sp),a0
    9ed0:	|  |        |      movea.l 72(a0),a0
    9ed4:	|  |        |      move.l 8(a0),d1
    9ed8:	|  |        |      move.l d1,-(sp)
    9eda:	|  |        |      move.l d0,-(sp)
    9edc:	|  |        |      jsr 176c8 <__modsi3>
    9ee2:	|  |        |      addq.l #8,sp
    9ee4:	|  |        |      movea.l 24(sp),a0
    9ee8:	|  |        |      move.l d0,84(a0)
			thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9eec:	|  |        |      movea.l 24(sp),a0
    9ef0:	|  |        |      movea.l 72(a0),a0
    9ef4:	|  |        |      movea.l 4(a0),a1
    9ef8:	|  |        |      movea.l 24(sp),a0
    9efc:	|  |        |      move.l 84(a0),d0
    9f00:	|  |        |      move.l d0,d1
    9f02:	|  |        |      move.l d1,d0
    9f04:	|  |        |      add.l d0,d0
    9f06:	|  |        |      add.l d1,d0
    9f08:	|  |        |      add.l d0,d0
    9f0a:	|  |        |      add.l d0,d0
    9f0c:	|  |        |      lea (0,a1,d0.l),a0
    9f10:	|  |        |      move.l 4(a0),d0
    9f14:	|  |        |      movea.l 24(sp),a0
    9f18:	|  |        |      move.l d0,88(a0)
			if (thisPerson -> show && myAnim && myAnim -> frames) {
    9f1c:	|  |        |      movea.l 24(sp),a0
    9f20:	|  |        |      move.w 104(a0),d0
    9f24:	|  |        +----- beq.w a0d6 <drawPeople+0x5c6>
    9f28:	|  |        |      tst.l 20(sp)
    9f2c:	|  |        +----- beq.w a0d6 <drawPeople+0x5c6>
    9f30:	|  |        |      movea.l 20(sp),a0
    9f34:	|  |        |      move.l 4(a0),d0
    9f38:	|  |        +----- beq.w a0d6 <drawPeople+0x5c6>
				if (myAnim -> frames[thisPerson -> frameNum].noise > 0) {
    9f3c:	|  |        |      movea.l 20(sp),a0
    9f40:	|  |        |      movea.l 4(a0),a1
    9f44:	|  |        |      movea.l 24(sp),a0
    9f48:	|  |        |      move.l 84(a0),d0
    9f4c:	|  |        |      move.l d0,d1
    9f4e:	|  |        |      move.l d1,d0
    9f50:	|  |        |      add.l d0,d0
    9f52:	|  |        |      add.l d1,d0
    9f54:	|  |        |      add.l d0,d0
    9f56:	|  |        |      add.l d0,d0
    9f58:	|  |        |      lea (0,a1,d0.l),a0
    9f5c:	|  |        |      move.l 8(a0),d0
    9f60:	|  |        |  /-- ble.w a002 <drawPeople+0x4f2>
					startSound(myAnim -> frames[thisPerson -> frameNum].noise, FALSE);
    9f64:	|  |        |  |   movea.l 20(sp),a0
    9f68:	|  |        |  |   movea.l 4(a0),a1
    9f6c:	|  |        |  |   movea.l 24(sp),a0
    9f70:	|  |        |  |   move.l 84(a0),d0
    9f74:	|  |        |  |   move.l d0,d1
    9f76:	|  |        |  |   move.l d1,d0
    9f78:	|  |        |  |   add.l d0,d0
    9f7a:	|  |        |  |   add.l d1,d0
    9f7c:	|  |        |  |   add.l d0,d0
    9f7e:	|  |        |  |   add.l d0,d0
    9f80:	|  |        |  |   lea (0,a1,d0.l),a0
    9f84:	|  |        |  |   move.l 8(a0),d0
    9f88:	|  |        |  |   clr.l -(sp)
    9f8a:	|  |        |  |   move.l d0,-(sp)
    9f8c:	|  |        |  |   jsr cc94 <startSound>
    9f92:	|  |        |  |   addq.l #8,sp
					thisPerson -> frameNum ++;
    9f94:	|  |        |  |   movea.l 24(sp),a0
    9f98:	|  |        |  |   move.l 84(a0),d0
    9f9c:	|  |        |  |   addq.l #1,d0
    9f9e:	|  |        |  |   movea.l 24(sp),a0
    9fa2:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    9fa6:	|  |        |  |   movea.l 24(sp),a0
    9faa:	|  |        |  |   move.l 84(a0),d0
    9fae:	|  |        |  |   movea.l 24(sp),a0
    9fb2:	|  |        |  |   movea.l 72(a0),a0
    9fb6:	|  |        |  |   move.l 8(a0),d1
    9fba:	|  |        |  |   move.l d1,-(sp)
    9fbc:	|  |        |  |   move.l d0,-(sp)
    9fbe:	|  |        |  |   jsr 176c8 <__modsi3>
    9fc4:	|  |        |  |   addq.l #8,sp
    9fc6:	|  |        |  |   movea.l 24(sp),a0
    9fca:	|  |        |  |   move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    9fce:	|  |        |  |   movea.l 24(sp),a0
    9fd2:	|  |        |  |   movea.l 72(a0),a0
    9fd6:	|  |        |  |   movea.l 4(a0),a1
    9fda:	|  |        |  |   movea.l 24(sp),a0
    9fde:	|  |        |  |   move.l 84(a0),d0
    9fe2:	|  |        |  |   move.l d0,d1
    9fe4:	|  |        |  |   move.l d1,d0
    9fe6:	|  |        |  |   add.l d0,d0
    9fe8:	|  |        |  |   add.l d1,d0
    9fea:	|  |        |  |   add.l d0,d0
    9fec:	|  |        |  |   add.l d0,d0
    9fee:	|  |        |  |   lea (0,a1,d0.l),a0
    9ff2:	|  |        |  |   move.l 4(a0),d0
    9ff6:	|  |        |  |   movea.l 24(sp),a0
    9ffa:	|  |        |  |   move.l d0,88(a0)
    9ffe:	|  |        +--|-- bra.w a0d6 <drawPeople+0x5c6>
				} else if (myAnim -> frames[thisPerson -> frameNum].noise) {
    a002:	|  |        |  \-> movea.l 20(sp),a0
    a006:	|  |        |      movea.l 4(a0),a1
    a00a:	|  |        |      movea.l 24(sp),a0
    a00e:	|  |        |      move.l 84(a0),d0
    a012:	|  |        |      move.l d0,d1
    a014:	|  |        |      move.l d1,d0
    a016:	|  |        |      add.l d0,d0
    a018:	|  |        |      add.l d1,d0
    a01a:	|  |        |      add.l d0,d0
    a01c:	|  |        |      add.l d0,d0
    a01e:	|  |        |      lea (0,a1,d0.l),a0
    a022:	|  |        |      move.l 8(a0),d0
    a026:	|  |        +----- beq.w a0d6 <drawPeople+0x5c6>
					startNewFunctionNum (- myAnim -> frames[thisPerson -> frameNum].noise, 0, NULL, noStack, TRUE);
    a02a:	|  |        |      movea.l 1a774 <noStack>,a1
    a030:	|  |        |      movea.l 20(sp),a0
    a034:	|  |        |      move.l 4(a0),d2
    a038:	|  |        |      movea.l 24(sp),a0
    a03c:	|  |        |      move.l 84(a0),d0
    a040:	|  |        |      move.l d0,d1
    a042:	|  |        |      move.l d1,d0
    a044:	|  |        |      add.l d0,d0
    a046:	|  |        |      add.l d1,d0
    a048:	|  |        |      add.l d0,d0
    a04a:	|  |        |      add.l d0,d0
    a04c:	|  |        |      movea.l d2,a0
    a04e:	|  |        |      adda.l d0,a0
    a050:	|  |        |      move.l 8(a0),d0
    a054:	|  |        |      neg.l d0
    a056:	|  |        |      pea 1 <_start+0x1>
    a05a:	|  |        |      move.l a1,-(sp)
    a05c:	|  |        |      clr.l -(sp)
    a05e:	|  |        |      clr.l -(sp)
    a060:	|  |        |      move.l d0,-(sp)
    a062:	|  |        |      jsr 63b0 <startNewFunctionNum>
    a068:	|  |        |      lea 20(sp),sp
					thisPerson -> frameNum ++;
    a06c:	|  |        |      movea.l 24(sp),a0
    a070:	|  |        |      move.l 84(a0),d0
    a074:	|  |        |      addq.l #1,d0
    a076:	|  |        |      movea.l 24(sp),a0
    a07a:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameNum %= thisPerson -> myAnim -> numFrames;
    a07e:	|  |        |      movea.l 24(sp),a0
    a082:	|  |        |      move.l 84(a0),d0
    a086:	|  |        |      movea.l 24(sp),a0
    a08a:	|  |        |      movea.l 72(a0),a0
    a08e:	|  |        |      move.l 8(a0),d1
    a092:	|  |        |      move.l d1,-(sp)
    a094:	|  |        |      move.l d0,-(sp)
    a096:	|  |        |      jsr 176c8 <__modsi3>
    a09c:	|  |        |      addq.l #8,sp
    a09e:	|  |        |      movea.l 24(sp),a0
    a0a2:	|  |        |      move.l d0,84(a0)
					thisPerson -> frameTick = thisPerson -> myAnim -> frames[thisPerson -> frameNum].howMany;
    a0a6:	|  |        |      movea.l 24(sp),a0
    a0aa:	|  |        |      movea.l 72(a0),a0
    a0ae:	|  |        |      movea.l 4(a0),a1
    a0b2:	|  |        |      movea.l 24(sp),a0
    a0b6:	|  |        |      move.l 84(a0),d0
    a0ba:	|  |        |      move.l d0,d1
    a0bc:	|  |        |      move.l d1,d0
    a0be:	|  |        |      add.l d0,d0
    a0c0:	|  |        |      add.l d1,d0
    a0c2:	|  |        |      add.l d0,d0
    a0c4:	|  |        |      add.l d0,d0
    a0c6:	|  |        |      lea (0,a1,d0.l),a0
    a0ca:	|  |        |      move.l 4(a0),d0
    a0ce:	|  |        |      movea.l 24(sp),a0
    a0d2:	|  |        |      move.l d0,88(a0)
				}
			}
		}
		thisPerson = thisPerson -> next;
    a0d6:	|  |        \----> movea.l 24(sp),a0
    a0da:	|  |               move.l 36(a0),24(sp)
	while (thisPerson) {
    a0e0:	|  \-------------> tst.l 24(sp)
    a0e4:	\----------------- bne.w 9b32 <drawPeople+0x22>
	}
}
    a0e8:	                   nop
    a0ea:	                   nop
    a0ec:	                   move.l (sp)+,d2
    a0ee:	                   lea 24(sp),sp
    a0f2:	                   rts

0000a0f4 <findPerson>:


struct onScreenPerson * findPerson (int v) {
    a0f4:	          subq.l #4,sp
	struct onScreenPerson * thisPerson = allPeople;
    a0f6:	          move.l 1a85c <allPeople>,(sp)
	while (thisPerson) {
    a0fc:	      /-- bra.s a114 <findPerson+0x20>
		if (v == thisPerson -> thisType -> objectNum) break;
    a0fe:	/-----|-> movea.l (sp),a0
    a100:	|     |   movea.l 114(a0),a0
    a104:	|     |   move.l 4(a0),d0
    a108:	|     |   cmp.l 8(sp),d0
    a10c:	|  /--|-- beq.s a11a <findPerson+0x26>
		thisPerson = thisPerson -> next;
    a10e:	|  |  |   movea.l (sp),a0
    a110:	|  |  |   move.l 36(a0),(sp)
	while (thisPerson) {
    a114:	|  |  \-> tst.l (sp)
    a116:	\--|----- bne.s a0fe <findPerson+0xa>
    a118:	   |  /-- bra.s a11c <findPerson+0x28>
		if (v == thisPerson -> thisType -> objectNum) break;
    a11a:	   \--|-> nop
	}
	return thisPerson;
    a11c:	      \-> move.l (sp),d0
}
    a11e:	          addq.l #4,sp
    a120:	          rts

0000a122 <floatCharacter>:

BOOL floatCharacter (int f, int objNum) {
    a122:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (objNum);
    a124:	       move.l 12(sp),-(sp)
    a128:	       jsr a0f4 <findPerson>
    a12e:	       addq.l #4,sp
    a130:	       move.l d0,(sp)
	if (! moveMe) return FALSE;
    a132:	   /-- bne.s a138 <floatCharacter+0x16>
    a134:	   |   clr.w d0
    a136:	/--|-- bra.s a142 <floatCharacter+0x20>
	moveMe -> floaty = f;
    a138:	|  \-> movea.l (sp),a0
    a13a:	|      move.l 8(sp),24(a0)
	return TRUE;
    a140:	|      moveq #1,d0
}
    a142:	\----> addq.l #4,sp
    a144:	       rts

0000a146 <forceWalkingPerson>:

BOOL forceWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a146:	          subq.l #4,sp
    if (x == 0 && y == 0) return FALSE;
    a148:	          tst.l 8(sp)
    a14c:	      /-- bne.s a15a <forceWalkingPerson+0x14>
    a14e:	      |   tst.l 12(sp)
    a152:	      +-- bne.s a15a <forceWalkingPerson+0x14>
    a154:	      |   clr.w d0
    a156:	/-----|-- bra.w a1ec <forceWalkingPerson+0xa6>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a15a:	|     \-> move.l 16(sp),-(sp)
    a15e:	|         jsr a0f4 <findPerson>
    a164:	|         addq.l #4,sp
    a166:	|         move.l d0,(sp)
    if (!moveMe) return FALSE;
    a168:	|     /-- bne.s a16e <forceWalkingPerson+0x28>
    a16a:	|     |   clr.w d0
    a16c:	+-----|-- bra.s a1ec <forceWalkingPerson+0xa6>

    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a16e:	|     \-> movea.l (sp),a0
    a170:	|         move.l 68(a0),d0
    a174:	|     /-- beq.s a186 <forceWalkingPerson+0x40>
    a176:	|     |   movea.l (sp),a0
    a178:	|     |   move.l 68(a0),d0
    a17c:	|     |   move.l d0,-(sp)
    a17e:	|     |   jsr 3ff4 <abortFunction>
    a184:	|     |   addq.l #4,sp
    moveMe->walking = TRUE;
    a186:	|     \-> movea.l (sp),a0
    a188:	|         move.w #1,64(a0)
    moveMe->continueAfterWalking = NULL;
    a18e:	|         movea.l (sp),a0
    a190:	|         clr.l 68(a0)
    moveMe->directionWhenDoneWalking = di;
    a194:	|         movea.l (sp),a0
    a196:	|         move.l 24(sp),110(a0)

    moveMe->walkToX = x;
    a19c:	|         movea.l (sp),a0
    a19e:	|         move.l 8(sp),40(a0)
    moveMe->walkToY = y;
    a1a4:	|         movea.l (sp),a0
    a1a6:	|         move.l 12(sp),44(a0)

    // Let's pretend the start and end points are both in the same
    // polygon (which one isn't important)
    moveMe->inPoly = 0;
    a1ac:	|         movea.l (sp),a0
    a1ae:	|         clr.l 56(a0)
    moveMe->walkToPoly = 0;
    a1b2:	|         movea.l (sp),a0
    a1b4:	|         clr.l 60(a0)

    doBorderStuff(moveMe);
    a1b8:	|         move.l (sp),-(sp)
    a1ba:	|         jsr 9456 <doBorderStuff>
    a1c0:	|         addq.l #4,sp
    if (walkMe(moveMe, TRUE) || moveMe->spinning) {
    a1c2:	|         pea 1 <_start+0x1>
    a1c6:	|         move.l 4(sp),-(sp)
    a1ca:	|         jsr b9b6 <walkMe>
    a1d0:	|         addq.l #8,sp
    a1d2:	|         tst.w d0
    a1d4:	|     /-- bne.s a1de <forceWalkingPerson+0x98>
    a1d6:	|     |   movea.l (sp),a0
    a1d8:	|     |   move.w 66(a0),d0
    a1dc:	|  /--|-- beq.s a1ea <forceWalkingPerson+0xa4>
        moveMe->continueAfterWalking = func;
    a1de:	|  |  \-> movea.l (sp),a0
    a1e0:	|  |      move.l 20(sp),68(a0)
        return TRUE;
    a1e6:	|  |      moveq #1,d0
    a1e8:	+--|----- bra.s a1ec <forceWalkingPerson+0xa6>
    } else {
        return FALSE;
    a1ea:	|  \----> clr.w d0
    }
}
    a1ec:	\-------> addq.l #4,sp
    a1ee:	          rts

0000a1f0 <handleClosestPoint>:

BOOL handleClosestPoint (int * setX, int * setY, int * setPoly) {
    a1f0:	                lea -56(sp),sp
    a1f4:	                move.l d2,-(sp)
	int gotX = 320, gotY = 200, gotPoly = -1, i, j, xTest1, yTest1,
    a1f6:	                move.l #320,56(sp)
    a1fe:	                move.l #200,52(sp)
    a206:	                moveq #-1,d0
    a208:	                move.l d0,48(sp)
		xTest2, yTest2, closestX, closestY, oldJ, currentDistance = 0xFFFFF,
    a20c:	                move.l #1048575,32(sp)
		thisDistance;

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a214:	                clr.l 44(sp)
    a218:	   /----------- bra.w a3f0 <handleClosestPoint+0x200>
		oldJ = currentFloor -> polygon[i].numVertices - 1;
    a21c:	/--|----------> movea.l 1a914 <currentFloor>,a0
    a222:	|  |            move.l 12(a0),d1
    a226:	|  |            move.l 44(sp),d0
    a22a:	|  |            lsl.l #3,d0
    a22c:	|  |            movea.l d1,a0
    a22e:	|  |            adda.l d0,a0
    a230:	|  |            move.l (a0),d0
    a232:	|  |            move.l d0,d1
    a234:	|  |            subq.l #1,d1
    a236:	|  |            move.l d1,36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a23a:	|  |            clr.l 40(sp)
    a23e:	|  |     /----- bra.w a3ce <handleClosestPoint+0x1de>
			xTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].x;
    a242:	|  |  /--|----> movea.l 1a914 <currentFloor>,a0
    a248:	|  |  |  |      move.l 4(a0),d1
    a24c:	|  |  |  |      movea.l 1a914 <currentFloor>,a0
    a252:	|  |  |  |      movea.l 12(a0),a0
    a256:	|  |  |  |      move.l 44(sp),d0
    a25a:	|  |  |  |      lsl.l #3,d0
    a25c:	|  |  |  |      adda.l d0,a0
    a25e:	|  |  |  |      movea.l 4(a0),a0
    a262:	|  |  |  |      move.l 40(sp),d0
    a266:	|  |  |  |      add.l d0,d0
    a268:	|  |  |  |      add.l d0,d0
    a26a:	|  |  |  |      adda.l d0,a0
    a26c:	|  |  |  |      move.l (a0),d0
    a26e:	|  |  |  |      lsl.l #3,d0
    a270:	|  |  |  |      movea.l d1,a0
    a272:	|  |  |  |      adda.l d0,a0
    a274:	|  |  |  |      move.l (a0),28(sp)
			yTest1 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[j]].y;
    a278:	|  |  |  |      movea.l 1a914 <currentFloor>,a0
    a27e:	|  |  |  |      move.l 4(a0),d1
    a282:	|  |  |  |      movea.l 1a914 <currentFloor>,a0
    a288:	|  |  |  |      movea.l 12(a0),a0
    a28c:	|  |  |  |      move.l 44(sp),d0
    a290:	|  |  |  |      lsl.l #3,d0
    a292:	|  |  |  |      adda.l d0,a0
    a294:	|  |  |  |      movea.l 4(a0),a0
    a298:	|  |  |  |      move.l 40(sp),d0
    a29c:	|  |  |  |      add.l d0,d0
    a29e:	|  |  |  |      add.l d0,d0
    a2a0:	|  |  |  |      adda.l d0,a0
    a2a2:	|  |  |  |      move.l (a0),d0
    a2a4:	|  |  |  |      lsl.l #3,d0
    a2a6:	|  |  |  |      movea.l d1,a0
    a2a8:	|  |  |  |      adda.l d0,a0
    a2aa:	|  |  |  |      move.l 4(a0),24(sp)
			xTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].x;
    a2b0:	|  |  |  |      movea.l 1a914 <currentFloor>,a0
    a2b6:	|  |  |  |      move.l 4(a0),d1
    a2ba:	|  |  |  |      movea.l 1a914 <currentFloor>,a0
    a2c0:	|  |  |  |      movea.l 12(a0),a0
    a2c4:	|  |  |  |      move.l 44(sp),d0
    a2c8:	|  |  |  |      lsl.l #3,d0
    a2ca:	|  |  |  |      adda.l d0,a0
    a2cc:	|  |  |  |      movea.l 4(a0),a0
    a2d0:	|  |  |  |      move.l 36(sp),d0
    a2d4:	|  |  |  |      add.l d0,d0
    a2d6:	|  |  |  |      add.l d0,d0
    a2d8:	|  |  |  |      adda.l d0,a0
    a2da:	|  |  |  |      move.l (a0),d0
    a2dc:	|  |  |  |      lsl.l #3,d0
    a2de:	|  |  |  |      movea.l d1,a0
    a2e0:	|  |  |  |      adda.l d0,a0
    a2e2:	|  |  |  |      move.l (a0),20(sp)
			yTest2 = currentFloor -> vertex[currentFloor -> polygon[i].vertexID[oldJ]].y;
    a2e6:	|  |  |  |      movea.l 1a914 <currentFloor>,a0
    a2ec:	|  |  |  |      move.l 4(a0),d1
    a2f0:	|  |  |  |      movea.l 1a914 <currentFloor>,a0
    a2f6:	|  |  |  |      movea.l 12(a0),a0
    a2fa:	|  |  |  |      move.l 44(sp),d0
    a2fe:	|  |  |  |      lsl.l #3,d0
    a300:	|  |  |  |      adda.l d0,a0
    a302:	|  |  |  |      movea.l 4(a0),a0
    a306:	|  |  |  |      move.l 36(sp),d0
    a30a:	|  |  |  |      add.l d0,d0
    a30c:	|  |  |  |      add.l d0,d0
    a30e:	|  |  |  |      adda.l d0,a0
    a310:	|  |  |  |      move.l (a0),d0
    a312:	|  |  |  |      lsl.l #3,d0
    a314:	|  |  |  |      movea.l d1,a0
    a316:	|  |  |  |      adda.l d0,a0
    a318:	|  |  |  |      move.l 4(a0),16(sp)
			closestPointOnLine (&closestX, &closestY, xTest1, yTest1, xTest2, yTest2, *setX, *setY);
    a31e:	|  |  |  |      movea.l 68(sp),a0
    a322:	|  |  |  |      move.l (a0),d1
    a324:	|  |  |  |      movea.l 64(sp),a0
    a328:	|  |  |  |      move.l (a0),d0
    a32a:	|  |  |  |      move.l d1,-(sp)
    a32c:	|  |  |  |      move.l d0,-(sp)
    a32e:	|  |  |  |      move.l 24(sp),-(sp)
    a332:	|  |  |  |      move.l 32(sp),-(sp)
    a336:	|  |  |  |      move.l 40(sp),-(sp)
    a33a:	|  |  |  |      move.l 48(sp),-(sp)
    a33e:	|  |  |  |      lea 28(sp),a0
    a342:	|  |  |  |      move.l a0,-(sp)
    a344:	|  |  |  |      lea 36(sp),a0
    a348:	|  |  |  |      move.l a0,-(sp)
    a34a:	|  |  |  |      jsr 15abe <closestPointOnLine>
    a350:	|  |  |  |      lea 32(sp),sp

			xTest1 = *setX - closestX;
    a354:	|  |  |  |      movea.l 64(sp),a0
    a358:	|  |  |  |      move.l (a0),d0
    a35a:	|  |  |  |      move.l 8(sp),d1
    a35e:	|  |  |  |      move.l d0,d2
    a360:	|  |  |  |      sub.l d1,d2
    a362:	|  |  |  |      move.l d2,28(sp)
			yTest1 = *setY - closestY;
    a366:	|  |  |  |      movea.l 68(sp),a0
    a36a:	|  |  |  |      move.l (a0),d0
    a36c:	|  |  |  |      move.l 4(sp),d1
    a370:	|  |  |  |      move.l d0,d2
    a372:	|  |  |  |      sub.l d1,d2
    a374:	|  |  |  |      move.l d2,24(sp)
			thisDistance = xTest1 * xTest1 + yTest1 * yTest1;
    a378:	|  |  |  |      move.l 28(sp),-(sp)
    a37c:	|  |  |  |      move.l 32(sp),-(sp)
    a380:	|  |  |  |      jsr 1761c <__mulsi3>
    a386:	|  |  |  |      addq.l #8,sp
    a388:	|  |  |  |      move.l d0,d2
    a38a:	|  |  |  |      move.l 24(sp),-(sp)
    a38e:	|  |  |  |      move.l 28(sp),-(sp)
    a392:	|  |  |  |      jsr 1761c <__mulsi3>
    a398:	|  |  |  |      addq.l #8,sp
    a39a:	|  |  |  |      move.l d2,d1
    a39c:	|  |  |  |      add.l d0,d1
    a39e:	|  |  |  |      move.l d1,12(sp)


			if (thisDistance < currentDistance) {
    a3a2:	|  |  |  |      move.l 12(sp),d2
    a3a6:	|  |  |  |      cmp.l 32(sp),d2
    a3aa:	|  |  |  |  /-- bge.s a3c4 <handleClosestPoint+0x1d4>

				currentDistance = thisDistance;
    a3ac:	|  |  |  |  |   move.l 12(sp),32(sp)
				gotX = closestX;
    a3b2:	|  |  |  |  |   move.l 8(sp),56(sp)
				gotY = closestY;
    a3b8:	|  |  |  |  |   move.l 4(sp),52(sp)
				gotPoly = i;
    a3be:	|  |  |  |  |   move.l 44(sp),48(sp)
			}
			oldJ = j;
    a3c4:	|  |  |  |  \-> move.l 40(sp),36(sp)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
    a3ca:	|  |  |  |      addq.l #1,40(sp)
    a3ce:	|  |  |  \----> movea.l 1a914 <currentFloor>,a0
    a3d4:	|  |  |         move.l 12(a0),d1
    a3d8:	|  |  |         move.l 44(sp),d0
    a3dc:	|  |  |         lsl.l #3,d0
    a3de:	|  |  |         movea.l d1,a0
    a3e0:	|  |  |         adda.l d0,a0
    a3e2:	|  |  |         move.l (a0),d0
    a3e4:	|  |  |         cmp.l 40(sp),d0
    a3e8:	|  |  \-------- bgt.w a242 <handleClosestPoint+0x52>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
    a3ec:	|  |            addq.l #1,44(sp)
    a3f0:	|  \----------> movea.l 1a914 <currentFloor>,a0
    a3f6:	|               move.l 8(a0),d0
    a3fa:	|               cmp.l 44(sp),d0
    a3fe:	\-------------- bgt.w a21c <handleClosestPoint+0x2c>
		}
	}

	if (gotPoly == -1) return FALSE;
    a402:	                moveq #-1,d0
    a404:	                cmp.l 48(sp),d0
    a408:	            /-- bne.s a40e <handleClosestPoint+0x21e>
    a40a:	            |   clr.w d0
    a40c:	         /--|-- bra.s a428 <handleClosestPoint+0x238>
	*setX = gotX;
    a40e:	         |  \-> movea.l 64(sp),a0
    a412:	         |      move.l 56(sp),(a0)
	*setY = gotY;
    a416:	         |      movea.l 68(sp),a0
    a41a:	         |      move.l 52(sp),(a0)
	*setPoly = gotPoly;
    a41e:	         |      movea.l 72(sp),a0
    a422:	         |      move.l 48(sp),(a0)

	return TRUE;
    a426:	         |      moveq #1,d0
}
    a428:	         \----> move.l (sp)+,d2
    a42a:	                lea 56(sp),sp
    a42e:	                rts

0000a430 <initPeople>:


BOOL initPeople () {
	personRegion.sX = 0;
    a430:	clr.l 1a870 <personRegion+0x10>
	personRegion.sY = 0;
    a436:	clr.l 1a874 <personRegion+0x14>
	personRegion.di = -1;
    a43c:	moveq #-1,d0
    a43e:	move.l d0,1a878 <personRegion+0x18>
	allScreenRegions = NULL;
    a444:	clr.l 1a908 <allScreenRegions>

	return TRUE;
    a44a:	moveq #1,d0
}
    a44c:	rts

0000a44e <jumpPerson>:

void jumpPerson (int x, int y, int objNum) {
    a44e:	          subq.l #4,sp
    a450:	          move.l d2,-(sp)
    if (x == 0 && y == 0) return;
    a452:	          tst.l 12(sp)
    a456:	      /-- bne.s a45e <jumpPerson+0x10>
    a458:	      |   tst.l 16(sp)
    a45c:	/-----|-- beq.s a4d2 <jumpPerson+0x84>
    struct onScreenPerson * moveMe = findPerson(objNum);
    a45e:	|     \-> move.l 20(sp),-(sp)
    a462:	|         jsr a0f4 <findPerson>
    a468:	|         addq.l #4,sp
    a46a:	|         move.l d0,4(sp)
    if (!moveMe) return;
    a46e:	|  /----- beq.s a4d6 <jumpPerson+0x88>
    if (moveMe->continueAfterWalking) abortFunction(moveMe->continueAfterWalking);
    a470:	|  |      movea.l 4(sp),a0
    a474:	|  |      move.l 68(a0),d0
    a478:	|  |  /-- beq.s a48c <jumpPerson+0x3e>
    a47a:	|  |  |   movea.l 4(sp),a0
    a47e:	|  |  |   move.l 68(a0),d0
    a482:	|  |  |   move.l d0,-(sp)
    a484:	|  |  |   jsr 3ff4 <abortFunction>
    a48a:	|  |  |   addq.l #4,sp
    moveMe->continueAfterWalking = NULL;
    a48c:	|  |  \-> movea.l 4(sp),a0
    a490:	|  |      clr.l 68(a0)
    moveMe->walking = FALSE;
    a494:	|  |      movea.l 4(sp),a0
    a498:	|  |      clr.w 64(a0)
    moveMe->spinning = FALSE;
    a49c:	|  |      movea.l 4(sp),a0
    a4a0:	|  |      clr.w 66(a0)
    moveAndScale(moveMe, x, y);
    a4a4:	|  |      move.l 16(sp),-(sp)
    a4a8:	|  |      jsr 1709a <__floatsisf>
    a4ae:	|  |      addq.l #4,sp
    a4b0:	|  |      move.l d0,d2
    a4b2:	|  |      move.l 12(sp),-(sp)
    a4b6:	|  |      jsr 1709a <__floatsisf>
    a4bc:	|  |      addq.l #4,sp
    a4be:	|  |      move.l d2,-(sp)
    a4c0:	|  |      move.l d0,-(sp)
    a4c2:	|  |      move.l 12(sp),-(sp)
    a4c6:	|  |      jsr a83c <moveAndScale>
    a4cc:	|  |      lea 12(sp),sp
    a4d0:	|  |  /-- bra.s a4d8 <jumpPerson+0x8a>
    if (x == 0 && y == 0) return;
    a4d2:	\--|--|-> nop
    a4d4:	   |  +-- bra.s a4d8 <jumpPerson+0x8a>
    if (!moveMe) return;
    a4d6:	   \--|-> nop
}
    a4d8:	      \-> move.l (sp)+,d2
    a4da:	          addq.l #4,sp
    a4dc:	          rts

0000a4de <killAllPeople>:


void killAllPeople () {
    a4de:	          subq.l #8,sp
    a4e0:	          move.l a6,-(sp)
	struct onScreenPerson * killPeople;
	while (allPeople) {
    a4e2:	   /----- bra.s a54e <killAllPeople+0x70>
		if (allPeople -> continueAfterWalking) abortFunction (allPeople -> continueAfterWalking);
    a4e4:	/--|----> movea.l 1a85c <allPeople>,a0
    a4ea:	|  |      move.l 68(a0),d0
    a4ee:	|  |  /-- beq.s a504 <killAllPeople+0x26>
    a4f0:	|  |  |   movea.l 1a85c <allPeople>,a0
    a4f6:	|  |  |   move.l 68(a0),d0
    a4fa:	|  |  |   move.l d0,-(sp)
    a4fc:	|  |  |   jsr 3ff4 <abortFunction>
    a502:	|  |  |   addq.l #4,sp
		allPeople -> continueAfterWalking = NULL;
    a504:	|  |  \-> movea.l 1a85c <allPeople>,a0
    a50a:	|  |      clr.l 68(a0)
		killPeople = allPeople;
    a50e:	|  |      move.l 1a85c <allPeople>,8(sp)
		allPeople = allPeople -> next;
    a516:	|  |      movea.l 1a85c <allPeople>,a0
    a51c:	|  |      move.l 36(a0),d0
    a520:	|  |      move.l d0,1a85c <allPeople>
		removeObjectType (killPeople -> thisType);
    a526:	|  |      movea.l 8(sp),a0
    a52a:	|  |      move.l 114(a0),d0
    a52e:	|  |      move.l d0,-(sp)
    a530:	|  |      jsr d372 <removeObjectType>
    a536:	|  |      addq.l #4,sp
		FreeVec(killPeople);
    a538:	|  |      move.l 8(sp),4(sp)
    a53e:	|  |      move.l 1a7a4 <SysBase>,d0
    a544:	|  |      movea.l d0,a6
    a546:	|  |      movea.l 4(sp),a1
    a54a:	|  |      jsr -690(a6)
	while (allPeople) {
    a54e:	|  \----> move.l 1a85c <allPeople>,d0
    a554:	\-------- bne.s a4e4 <killAllPeople+0x6>
	}
}
    a556:	          nop
    a558:	          nop
    a55a:	          movea.l (sp)+,a6
    a55c:	          addq.l #8,sp
    a55e:	          rts

0000a560 <killMostPeople>:

void killMostPeople() {
    a560:	          lea -12(sp),sp
    a564:	          move.l a6,-(sp)
    struct onScreenPerson *killPeople;
    struct onScreenPerson **lookyHere = &allPeople;
    a566:	          move.l #108636,12(sp)

    while (*lookyHere) {
    a56e:	   /----- bra.w a5f4 <killMostPeople+0x94>
        if ((*lookyHere)->extra & EXTRA_NOREMOVE) {
    a572:	/--|----> movea.l 12(sp),a0
    a576:	|  |      movea.l (a0),a0
    a578:	|  |      move.l 118(a0),d0
    a57c:	|  |      moveq #32,d1
    a57e:	|  |      and.l d1,d0
    a580:	|  |  /-- beq.s a592 <killMostPeople+0x32>
            lookyHere = &(*lookyHere)->next;
    a582:	|  |  |   movea.l 12(sp),a0
    a586:	|  |  |   move.l (a0),d0
    a588:	|  |  |   moveq #36,d1
    a58a:	|  |  |   add.l d0,d1
    a58c:	|  |  |   move.l d1,12(sp)
    a590:	|  +--|-- bra.s a5f4 <killMostPeople+0x94>
        } else {
            killPeople = (*lookyHere);
    a592:	|  |  \-> movea.l 12(sp),a0
    a596:	|  |      move.l (a0),8(sp)

            // Change last pointer to NEXT in the list instead
            (*lookyHere) = killPeople->next;
    a59a:	|  |      movea.l 8(sp),a0
    a59e:	|  |      move.l 36(a0),d0
    a5a2:	|  |      movea.l 12(sp),a0
    a5a6:	|  |      move.l d0,(a0)

            // Gone from the list... now free some memory
            if (killPeople->continueAfterWalking) abortFunction(killPeople->continueAfterWalking);
    a5a8:	|  |      movea.l 8(sp),a0
    a5ac:	|  |      move.l 68(a0),d0
    a5b0:	|  |  /-- beq.s a5c4 <killMostPeople+0x64>
    a5b2:	|  |  |   movea.l 8(sp),a0
    a5b6:	|  |  |   move.l 68(a0),d0
    a5ba:	|  |  |   move.l d0,-(sp)
    a5bc:	|  |  |   jsr 3ff4 <abortFunction>
    a5c2:	|  |  |   addq.l #4,sp
            killPeople->continueAfterWalking = NULL;
    a5c4:	|  |  \-> movea.l 8(sp),a0
    a5c8:	|  |      clr.l 68(a0)
            removeObjectType(killPeople->thisType);
    a5cc:	|  |      movea.l 8(sp),a0
    a5d0:	|  |      move.l 114(a0),d0
    a5d4:	|  |      move.l d0,-(sp)
    a5d6:	|  |      jsr d372 <removeObjectType>
    a5dc:	|  |      addq.l #4,sp
            FreeVec(killPeople);
    a5de:	|  |      move.l 8(sp),4(sp)
    a5e4:	|  |      move.l 1a7a4 <SysBase>,d0
    a5ea:	|  |      movea.l d0,a6
    a5ec:	|  |      movea.l 4(sp),a1
    a5f0:	|  |      jsr -690(a6)
    while (*lookyHere) {
    a5f4:	|  \----> movea.l 12(sp),a0
    a5f8:	|         move.l (a0),d0
    a5fa:	\-------- bne.w a572 <killMostPeople+0x12>
        }
    }
}
    a5fe:	          nop
    a600:	          nop
    a602:	          movea.l (sp)+,a6
    a604:	          lea 12(sp),sp
    a608:	          rts

0000a60a <makeSilent>:
//	db ("End of loadPeople");
	return TRUE;
}

void makeSilent (struct onScreenPerson me) {
	setFrames (&me, ANI_STAND);
    a60a:	clr.l -(sp)
    a60c:	move.l sp,d0
    a60e:	addq.l #8,d0
    a610:	move.l d0,-(sp)
    a612:	jsr 7a3e <setFrames>
    a618:	addq.l #8,sp
}
    a61a:	nop
    a61c:	rts

0000a61e <makeWalkingPerson>:

BOOL makeWalkingPerson (int x, int y, int objNum, struct loadedFunction * func, int di) {
    a61e:	          lea -12(sp),sp
    a622:	          move.l d2,-(sp)
	if (x == 0 && y == 0) return FALSE;
    a624:	          tst.l 20(sp)
    a628:	      /-- bne.s a636 <makeWalkingPerson+0x18>
    a62a:	      |   tst.l 24(sp)
    a62e:	      +-- bne.s a636 <makeWalkingPerson+0x18>
    a630:	      |   clr.w d0
    a632:	/-----|-- bra.w a7ce <makeWalkingPerson+0x1b0>
	if (currentFloor -> numPolygons == 0) return FALSE;
    a636:	|     \-> movea.l 1a914 <currentFloor>,a0
    a63c:	|         move.l 8(a0),d0
    a640:	|     /-- bne.s a648 <makeWalkingPerson+0x2a>
    a642:	|     |   clr.w d0
    a644:	+-----|-- bra.w a7ce <makeWalkingPerson+0x1b0>
	struct onScreenPerson * moveMe = findPerson (objNum);
    a648:	|     \-> move.l 28(sp),-(sp)
    a64c:	|         jsr a0f4 <findPerson>
    a652:	|         addq.l #4,sp
    a654:	|         move.l d0,12(sp)
	if (! moveMe) return FALSE;
    a658:	|     /-- bne.s a660 <makeWalkingPerson+0x42>
    a65a:	|     |   clr.w d0
    a65c:	+-----|-- bra.w a7ce <makeWalkingPerson+0x1b0>

	if (moveMe -> continueAfterWalking) abortFunction (moveMe -> continueAfterWalking);
    a660:	|     \-> movea.l 12(sp),a0
    a664:	|         move.l 68(a0),d0
    a668:	|     /-- beq.s a67c <makeWalkingPerson+0x5e>
    a66a:	|     |   movea.l 12(sp),a0
    a66e:	|     |   move.l 68(a0),d0
    a672:	|     |   move.l d0,-(sp)
    a674:	|     |   jsr 3ff4 <abortFunction>
    a67a:	|     |   addq.l #4,sp
	moveMe -> continueAfterWalking = NULL;
    a67c:	|     \-> movea.l 12(sp),a0
    a680:	|         clr.l 68(a0)
	moveMe -> walking = TRUE;
    a684:	|         movea.l 12(sp),a0
    a688:	|         move.w #1,64(a0)
	moveMe -> directionWhenDoneWalking = di;
    a68e:	|         movea.l 12(sp),a0
    a692:	|         move.l 36(sp),110(a0)

	moveMe -> walkToX = x;
    a698:	|         movea.l 12(sp),a0
    a69c:	|         move.l 20(sp),40(a0)
	moveMe -> walkToY = y;
    a6a2:	|         movea.l 12(sp),a0
    a6a6:	|         move.l 24(sp),44(a0)
	moveMe -> walkToPoly = inFloor (x, y);
    a6ac:	|         move.l 24(sp),-(sp)
    a6b0:	|         move.l 24(sp),-(sp)
    a6b4:	|         jsr 15fc0 <inFloor>
    a6ba:	|         addq.l #8,sp
    a6bc:	|         movea.l 12(sp),a0
    a6c0:	|         move.l d0,60(a0)
	if (moveMe -> walkToPoly == -1) {
    a6c4:	|         movea.l 12(sp),a0
    a6c8:	|         move.l 60(a0),d0
    a6cc:	|         moveq #-1,d1
    a6ce:	|         cmp.l d0,d1
    a6d0:	|     /-- bne.s a700 <makeWalkingPerson+0xe2>
		if (! handleClosestPoint (&moveMe -> walkToX, &moveMe -> walkToY, &moveMe -> walkToPoly)) return FALSE;
    a6d2:	|     |   movea.w #60,a0
    a6d6:	|     |   adda.l 12(sp),a0
    a6da:	|     |   moveq #44,d1
    a6dc:	|     |   add.l 12(sp),d1
    a6e0:	|     |   moveq #40,d0
    a6e2:	|     |   add.l 12(sp),d0
    a6e6:	|     |   move.l a0,-(sp)
    a6e8:	|     |   move.l d1,-(sp)
    a6ea:	|     |   move.l d0,-(sp)
    a6ec:	|     |   jsr a1f0 <handleClosestPoint>
    a6f2:	|     |   lea 12(sp),sp
    a6f6:	|     |   tst.w d0
    a6f8:	|     +-- bne.s a700 <makeWalkingPerson+0xe2>
    a6fa:	|     |   clr.w d0
    a6fc:	+-----|-- bra.w a7ce <makeWalkingPerson+0x1b0>
	}

	moveMe -> inPoly = inFloor (moveMe -> x, moveMe -> y);
    a700:	|     \-> movea.l 12(sp),a0
    a704:	|         move.l 4(a0),d0
    a708:	|         move.l d0,-(sp)
    a70a:	|         jsr 17032 <__fixsfsi>
    a710:	|         addq.l #4,sp
    a712:	|         move.l d0,d2
    a714:	|         movea.l 12(sp),a0
    a718:	|         move.l (a0),d0
    a71a:	|         move.l d0,-(sp)
    a71c:	|         jsr 17032 <__fixsfsi>
    a722:	|         addq.l #4,sp
    a724:	|         move.l d2,-(sp)
    a726:	|         move.l d0,-(sp)
    a728:	|         jsr 15fc0 <inFloor>
    a72e:	|         addq.l #8,sp
    a730:	|         movea.l 12(sp),a0
    a734:	|         move.l d0,56(a0)
	if (moveMe -> inPoly == -1) {
    a738:	|         movea.l 12(sp),a0
    a73c:	|         move.l 56(a0),d0
    a740:	|         moveq #-1,d1
    a742:	|         cmp.l d0,d1
    a744:	|     /-- bne.s a796 <makeWalkingPerson+0x178>
		int xxx = moveMe -> x, yyy = moveMe -> y;
    a746:	|     |   movea.l 12(sp),a0
    a74a:	|     |   move.l (a0),d0
    a74c:	|     |   move.l d0,-(sp)
    a74e:	|     |   jsr 17032 <__fixsfsi>
    a754:	|     |   addq.l #4,sp
    a756:	|     |   move.l d0,8(sp)
    a75a:	|     |   movea.l 12(sp),a0
    a75e:	|     |   move.l 4(a0),d0
    a762:	|     |   move.l d0,-(sp)
    a764:	|     |   jsr 17032 <__fixsfsi>
    a76a:	|     |   addq.l #4,sp
    a76c:	|     |   move.l d0,4(sp)
		if (! handleClosestPoint (&xxx, &yyy, &moveMe -> inPoly)) return FALSE;
    a770:	|     |   moveq #56,d0
    a772:	|     |   add.l 12(sp),d0
    a776:	|     |   move.l d0,-(sp)
    a778:	|     |   lea 8(sp),a0
    a77c:	|     |   move.l a0,-(sp)
    a77e:	|     |   moveq #16,d0
    a780:	|     |   add.l sp,d0
    a782:	|     |   move.l d0,-(sp)
    a784:	|     |   jsr a1f0 <handleClosestPoint>
    a78a:	|     |   lea 12(sp),sp
    a78e:	|     |   tst.w d0
    a790:	|     +-- bne.s a796 <makeWalkingPerson+0x178>
    a792:	|     |   clr.w d0
    a794:	+-----|-- bra.s a7ce <makeWalkingPerson+0x1b0>
	}

	doBorderStuff (moveMe);
    a796:	|     \-> move.l 12(sp),-(sp)
    a79a:	|         jsr 9456 <doBorderStuff>
    a7a0:	|         addq.l #4,sp
	if (walkMe (moveMe, FALSE) || moveMe -> spinning) {
    a7a2:	|         clr.l -(sp)
    a7a4:	|         move.l 16(sp),-(sp)
    a7a8:	|         jsr b9b6 <walkMe>
    a7ae:	|         addq.l #8,sp
    a7b0:	|         tst.w d0
    a7b2:	|     /-- bne.s a7be <makeWalkingPerson+0x1a0>
    a7b4:	|     |   movea.l 12(sp),a0
    a7b8:	|     |   move.w 66(a0),d0
    a7bc:	|  /--|-- beq.s a7cc <makeWalkingPerson+0x1ae>
		moveMe -> continueAfterWalking = func;
    a7be:	|  |  \-> movea.l 12(sp),a0
    a7c2:	|  |      move.l 32(sp),68(a0)
		return TRUE;
    a7c8:	|  |      moveq #1,d0
    a7ca:	+--|----- bra.s a7ce <makeWalkingPerson+0x1b0>
	} else {
		return FALSE;
    a7cc:	|  \----> clr.w d0
	}
}
    a7ce:	\-------> move.l (sp)+,d2
    a7d0:	          lea 12(sp),sp
    a7d4:	          rts

0000a7d6 <makeNullAnim>:


struct personaAnimation * makeNullAnim () {
    a7d6:	       lea -16(sp),sp
    a7da:	       move.l a6,-(sp)

	struct personaAnimation * newAnim	= AllocVec(sizeof(struct personaAnimation),MEMF_ANY);
    a7dc:	       moveq #12,d0
    a7de:	       move.l d0,16(sp)
    a7e2:	       clr.l 12(sp)
    a7e6:	       move.l 1a7a4 <SysBase>,d0
    a7ec:	       movea.l d0,a6
    a7ee:	       move.l 16(sp),d0
    a7f2:	       move.l 12(sp),d1
    a7f6:	       jsr -684(a6)
    a7fa:	       move.l d0,8(sp)
    a7fe:	       move.l 8(sp),d0
    a802:	       move.l d0,4(sp)
    if(newAnim == 0) {
    a806:	   /-- bne.s a81a <makeNullAnim+0x44>
     	KPrintF("makeNullAnim: Can't reserve Memory\n");
    a808:	   |   pea 18c43 <PutChar+0x1511>
    a80e:	   |   jsr 16c5e <KPrintF>
    a814:	   |   addq.l #4,sp
        return NULL;    
    a816:	   |   moveq #0,d0
    a818:	/--|-- bra.s a834 <makeNullAnim+0x5e>
    }  

	newAnim -> theSprites		= NULL;
    a81a:	|  \-> movea.l 4(sp),a0
    a81e:	|      clr.l (a0)
	newAnim -> numFrames		= 0;
    a820:	|      movea.l 4(sp),a0
    a824:	|      clr.l 8(a0)
	newAnim -> frames			= NULL;
    a828:	|      movea.l 4(sp),a0
    a82c:	|      clr.l 4(a0)
	return newAnim;
    a830:	|      move.l 4(sp),d0
}
    a834:	\----> movea.l (sp)+,a6
    a836:	       lea 16(sp),sp
    a83a:	       rts

0000a83c <moveAndScale>:

void moveAndScale (struct onScreenPerson *me, FLOAT x, FLOAT y) {
    a83c:	    move.l d2,-(sp)
	me->x = x;
    a83e:	    movea.l 8(sp),a0
    a842:	    move.l 12(sp),(a0)
	me->y = y;
    a846:	    movea.l 8(sp),a0
    a84a:	    move.l 16(sp),4(a0)
	me->oldx = 0;
    a850:	    movea.l 8(sp),a0
    a854:	    clr.l 8(a0)
	me->oldy = 0;
    a858:	    movea.l 8(sp),a0
    a85c:	    clr.l 12(a0)
	if (! (me->extra & EXTRA_NOSCALE) && scaleDivide) me->scale = (me->y - scaleHorizon) / scaleDivide;
    a860:	    movea.l 8(sp),a0
    a864:	    move.l 118(a0),d0
    a868:	    moveq #2,d1
    a86a:	    and.l d1,d0
    a86c:	/-- bne.s a8c4 <moveAndScale+0x88>
    a86e:	|   move.w 1a138 <scaleDivide>,d0
    a874:	+-- beq.s a8c4 <moveAndScale+0x88>
    a876:	|   movea.l 8(sp),a0
    a87a:	|   move.l 4(a0),d2
    a87e:	|   move.w 1a136 <scaleHorizon>,d0
    a884:	|   movea.w d0,a0
    a886:	|   move.l a0,-(sp)
    a888:	|   jsr 1709a <__floatsisf>
    a88e:	|   addq.l #4,sp
    a890:	|   move.l d0,-(sp)
    a892:	|   move.l d2,-(sp)
    a894:	|   jsr 1738e <__subsf3>
    a89a:	|   addq.l #8,sp
    a89c:	|   move.l d0,d2
    a89e:	|   move.w 1a138 <scaleDivide>,d0
    a8a4:	|   movea.w d0,a0
    a8a6:	|   move.l a0,-(sp)
    a8a8:	|   jsr 1709a <__floatsisf>
    a8ae:	|   addq.l #4,sp
    a8b0:	|   move.l d0,-(sp)
    a8b2:	|   move.l d2,-(sp)
    a8b4:	|   jsr 16f46 <__divsf3>
    a8ba:	|   addq.l #8,sp
    a8bc:	|   movea.l 8(sp),a0
    a8c0:	|   move.l d0,32(a0)
}
    a8c4:	\-> nop
    a8c6:	    move.l (sp)+,d2
    a8c8:	    rts

0000a8ca <removeOneCharacter>:

void removeOneCharacter (int i) {
    a8ca:	          lea -16(sp),sp
    a8ce:	          move.l a6,-(sp)
    struct onScreenPerson * p = findPerson(i);	
    a8d0:	          move.l 24(sp),-(sp)
    a8d4:	          jsr a0f4 <findPerson>
    a8da:	          addq.l #4,sp
    a8dc:	          move.l d0,8(sp)

    if (p) {
    a8e0:	/-------- beq.w a9c0 <removeOneCharacter+0xf6>
		/*if( p->myAnim->numFrames == 0) {
			CstRestoreScreen(p->x, p->y, &p->myAnim->theSprites->bank.sprites[0].width, &p->myAnim->theSprites->bank.sprites[0].height );
		} ToDo: Remove this*/


        if (overRegion == &personRegion && overRegion->thisType == p->thisType) {
    a8e4:	|         move.l 1a90c <overRegion>,d0
    a8ea:	|         cmpi.l #108640,d0
    a8f0:	|     /-- bne.s a90e <removeOneCharacter+0x44>
    a8f2:	|     |   movea.l 1a90c <overRegion>,a0
    a8f8:	|     |   move.l 28(a0),d1
    a8fc:	|     |   movea.l 8(sp),a0
    a900:	|     |   move.l 114(a0),d0
    a904:	|     |   cmp.l d1,d0
    a906:	|     +-- bne.s a90e <removeOneCharacter+0x44>
            overRegion = NULL;
    a908:	|     |   clr.l 1a90c <overRegion>
        }

        if (p->continueAfterWalking) abortFunction(p->continueAfterWalking);
    a90e:	|     \-> movea.l 8(sp),a0
    a912:	|         move.l 68(a0),d0
    a916:	|     /-- beq.s a92a <removeOneCharacter+0x60>
    a918:	|     |   movea.l 8(sp),a0
    a91c:	|     |   move.l 68(a0),d0
    a920:	|     |   move.l d0,-(sp)
    a922:	|     |   jsr 3ff4 <abortFunction>
    a928:	|     |   addq.l #4,sp
        p->continueAfterWalking = NULL;
    a92a:	|     \-> movea.l 8(sp),a0
    a92e:	|         clr.l 68(a0)
        struct onScreenPerson ** killPeople;

		for(int i=0; i<3;i++)
    a932:	|         clr.l 12(sp)
    a936:	|     /-- bra.s a95e <removeOneCharacter+0x94>
		{
			deleteAnim( p->myPersona->animation[i]);
    a938:	|  /--|-> movea.l 8(sp),a0
    a93c:	|  |  |   movea.l 80(a0),a0
    a940:	|  |  |   move.l (a0),d1
    a942:	|  |  |   move.l 12(sp),d0
    a946:	|  |  |   add.l d0,d0
    a948:	|  |  |   add.l d0,d0
    a94a:	|  |  |   movea.l d1,a0
    a94c:	|  |  |   adda.l d0,a0
    a94e:	|  |  |   move.l (a0),d0
    a950:	|  |  |   move.l d0,-(sp)
    a952:	|  |  |   jsr 93d2 <deleteAnim>
    a958:	|  |  |   addq.l #4,sp
		for(int i=0; i<3;i++)
    a95a:	|  |  |   addq.l #1,12(sp)
    a95e:	|  |  \-> moveq #2,d0
    a960:	|  |      cmp.l 12(sp),d0
    a964:	|  \----- bge.s a938 <removeOneCharacter+0x6e>
		}

        for (killPeople = &allPeople;
    a966:	|         move.l #108636,16(sp)
    a96e:	|     /-- bra.s a97e <removeOneCharacter+0xb4>
            *killPeople != p;
            killPeople = &((*killPeople)->next)) {;}
    a970:	|  /--|-> movea.l 16(sp),a0
    a974:	|  |  |   move.l (a0),d0
    a976:	|  |  |   moveq #36,d1
    a978:	|  |  |   add.l d0,d1
    a97a:	|  |  |   move.l d1,16(sp)
            *killPeople != p;
    a97e:	|  |  \-> movea.l 16(sp),a0
    a982:	|  |      move.l (a0),d0
    a984:	|  |      cmp.l 8(sp),d0
    a988:	|  \----- bne.s a970 <removeOneCharacter+0xa6>

        *killPeople = p->next;
    a98a:	|         movea.l 8(sp),a0
    a98e:	|         move.l 36(a0),d0
    a992:	|         movea.l 16(sp),a0
    a996:	|         move.l d0,(a0)
        removeObjectType(p->thisType);
    a998:	|         movea.l 8(sp),a0
    a99c:	|         move.l 114(a0),d0
    a9a0:	|         move.l d0,-(sp)
    a9a2:	|         jsr d372 <removeObjectType>
    a9a8:	|         addq.l #4,sp
        FreeVec(p);
    a9aa:	|         move.l 8(sp),4(sp)
    a9b0:	|         move.l 1a7a4 <SysBase>,d0
    a9b6:	|         movea.l d0,a6
    a9b8:	|         movea.l 4(sp),a1
    a9bc:	|         jsr -690(a6)
    }
}
    a9c0:	\-------> nop
    a9c2:	          movea.l (sp)+,a6
    a9c4:	          lea 16(sp),sp
    a9c8:	          rts

0000a9ca <rethinkAngle>:

void rethinkAngle (struct onScreenPerson * thisPerson) {
    a9ca:	       subq.l #8,sp
    a9cc:	       move.l d2,-(sp)
	int d = thisPerson -> myPersona -> numDirections;
    a9ce:	       movea.l 16(sp),a0
    a9d2:	       movea.l 80(a0),a0
    a9d6:	       move.l 4(a0),4(sp)
	int direc = thisPerson -> angle + (180 / d) + 180 + thisPerson -> angleOffset;
    a9dc:	       movea.l 16(sp),a0
    a9e0:	       move.l 92(a0),d2
    a9e4:	       move.l 4(sp),-(sp)
    a9e8:	       pea b4 <_start+0xb4>
    a9ec:	       jsr 1769a <__divsi3>
    a9f2:	       addq.l #8,sp
    a9f4:	       add.l d2,d0
    a9f6:	       move.l d0,d1
    a9f8:	       addi.l #180,d1
    a9fe:	       movea.l 16(sp),a0
    aa02:	       move.l 100(a0),d0
    aa06:	       move.l d1,d2
    aa08:	       add.l d0,d2
    aa0a:	       move.l d2,8(sp)
	while (direc >= 360) direc -= 360;
    aa0e:	   /-- bra.s aa18 <rethinkAngle+0x4e>
    aa10:	/--|-> addi.l #-360,8(sp)
    aa18:	|  \-> cmpi.l #359,8(sp)
    aa20:	\----- bgt.s aa10 <rethinkAngle+0x46>
	thisPerson -> direction = (direc * d) / 360;
    aa22:	       move.l 4(sp),-(sp)
    aa26:	       move.l 12(sp),-(sp)
    aa2a:	       jsr 1761c <__mulsi3>
    aa30:	       addq.l #8,sp
    aa32:	       pea 168 <decodeFilename+0x50>
    aa36:	       move.l d0,-(sp)
    aa38:	       jsr 1769a <__divsi3>
    aa3e:	       addq.l #8,sp
    aa40:	       movea.l 16(sp),a0
    aa44:	       move.l d0,106(a0)
}
    aa48:	       nop
    aa4a:	       move.l (sp)+,d2
    aa4c:	       addq.l #8,sp
    aa4e:	       rts

0000aa50 <saveAnim>:


BOOL saveAnim (struct personaAnimation * p, BPTR fp) {
    aa50:	          subq.l #4,sp
	put2bytes (p -> numFrames, fp);
    aa52:	          movea.l 8(sp),a0
    aa56:	          move.l 8(a0),d0
    aa5a:	          move.l 12(sp),-(sp)
    aa5e:	          move.l d0,-(sp)
    aa60:	          jsr 8d0 <put2bytes>
    aa66:	          addq.l #8,sp
	if (p -> numFrames) {
    aa68:	          movea.l 8(sp),a0
    aa6c:	          move.l 8(a0),d0
    aa70:	/-------- beq.w ab14 <saveAnim+0xc4>
		put4bytes (p -> theSprites -> ID, fp);
    aa74:	|         movea.l 8(sp),a0
    aa78:	|         movea.l (a0),a0
    aa7a:	|         move.l (a0),d0
    aa7c:	|         move.l 12(sp),-(sp)
    aa80:	|         move.l d0,-(sp)
    aa82:	|         jsr 958 <put4bytes>
    aa88:	|         addq.l #8,sp

		for (int a = 0; a < p -> numFrames; a ++) {
    aa8a:	|         clr.l (sp)
    aa8c:	|     /-- bra.s ab06 <saveAnim+0xb6>
			put4bytes (p -> frames[a].frameNum, fp);
    aa8e:	|  /--|-> movea.l 8(sp),a0
    aa92:	|  |  |   movea.l 4(a0),a0
    aa96:	|  |  |   move.l (sp),d1
    aa98:	|  |  |   move.l d1,d0
    aa9a:	|  |  |   add.l d0,d0
    aa9c:	|  |  |   add.l d1,d0
    aa9e:	|  |  |   add.l d0,d0
    aaa0:	|  |  |   add.l d0,d0
    aaa2:	|  |  |   adda.l d0,a0
    aaa4:	|  |  |   move.l (a0),d0
    aaa6:	|  |  |   move.l 12(sp),-(sp)
    aaaa:	|  |  |   move.l d0,-(sp)
    aaac:	|  |  |   jsr 958 <put4bytes>
    aab2:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].howMany, fp);
    aab4:	|  |  |   movea.l 8(sp),a0
    aab8:	|  |  |   movea.l 4(a0),a0
    aabc:	|  |  |   move.l (sp),d1
    aabe:	|  |  |   move.l d1,d0
    aac0:	|  |  |   add.l d0,d0
    aac2:	|  |  |   add.l d1,d0
    aac4:	|  |  |   add.l d0,d0
    aac6:	|  |  |   add.l d0,d0
    aac8:	|  |  |   adda.l d0,a0
    aaca:	|  |  |   move.l 4(a0),d0
    aace:	|  |  |   move.l 12(sp),-(sp)
    aad2:	|  |  |   move.l d0,-(sp)
    aad4:	|  |  |   jsr 958 <put4bytes>
    aada:	|  |  |   addq.l #8,sp
			put4bytes (p -> frames[a].noise, fp);
    aadc:	|  |  |   movea.l 8(sp),a0
    aae0:	|  |  |   movea.l 4(a0),a0
    aae4:	|  |  |   move.l (sp),d1
    aae6:	|  |  |   move.l d1,d0
    aae8:	|  |  |   add.l d0,d0
    aaea:	|  |  |   add.l d1,d0
    aaec:	|  |  |   add.l d0,d0
    aaee:	|  |  |   add.l d0,d0
    aaf0:	|  |  |   adda.l d0,a0
    aaf2:	|  |  |   move.l 8(a0),d0
    aaf6:	|  |  |   move.l 12(sp),-(sp)
    aafa:	|  |  |   move.l d0,-(sp)
    aafc:	|  |  |   jsr 958 <put4bytes>
    ab02:	|  |  |   addq.l #8,sp
		for (int a = 0; a < p -> numFrames; a ++) {
    ab04:	|  |  |   addq.l #1,(sp)
    ab06:	|  |  \-> movea.l 8(sp),a0
    ab0a:	|  |      move.l 8(a0),d0
    ab0e:	|  |      cmp.l (sp),d0
    ab10:	|  \----- bgt.w aa8e <saveAnim+0x3e>
		}
	}
	return TRUE;
    ab14:	\-------> moveq #1,d0
}
    ab16:	          addq.l #4,sp
    ab18:	          rts

0000ab1a <saveCostume>:

BOOL saveCostume (struct persona * cossy, BPTR fp) {
    ab1a:	             subq.l #4,sp
	int a;
	put2bytes (cossy -> numDirections, fp);
    ab1c:	             movea.l 8(sp),a0
    ab20:	             move.l 4(a0),d0
    ab24:	             move.l 12(sp),-(sp)
    ab28:	             move.l d0,-(sp)
    ab2a:	             jsr 8d0 <put2bytes>
    ab30:	             addq.l #8,sp
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    ab32:	             clr.l (sp)
    ab34:	   /-------- bra.s ab60 <saveCostume+0x46>
		if (! saveAnim (cossy -> animation[a], fp)) return FALSE;
    ab36:	/--|-------> movea.l 8(sp),a0
    ab3a:	|  |         move.l (a0),d1
    ab3c:	|  |         move.l (sp),d0
    ab3e:	|  |         add.l d0,d0
    ab40:	|  |         add.l d0,d0
    ab42:	|  |         movea.l d1,a0
    ab44:	|  |         adda.l d0,a0
    ab46:	|  |         move.l (a0),d0
    ab48:	|  |         move.l 12(sp),-(sp)
    ab4c:	|  |         move.l d0,-(sp)
    ab4e:	|  |         jsr aa50 <saveAnim>
    ab54:	|  |         addq.l #8,sp
    ab56:	|  |         tst.w d0
    ab58:	|  |     /-- bne.s ab5e <saveCostume+0x44>
    ab5a:	|  |     |   clr.w d0
    ab5c:	|  |  /--|-- bra.s ab74 <saveCostume+0x5a>
	for (a = 0; a < cossy -> numDirections * 3; a ++) {
    ab5e:	|  |  |  \-> addq.l #1,(sp)
    ab60:	|  \--|----> movea.l 8(sp),a0
    ab64:	|     |      move.l 4(a0),d1
    ab68:	|     |      move.l d1,d0
    ab6a:	|     |      add.l d0,d0
    ab6c:	|     |      add.l d1,d0
    ab6e:	|     |      cmp.l (sp),d0
    ab70:	\-----|----- bgt.s ab36 <saveCostume+0x1c>
	}

	return TRUE;
    ab72:	      |      moveq #1,d0
}
    ab74:	      \----> addq.l #4,sp
    ab76:	             rts

0000ab78 <savePeople>:

BOOL savePeople (BPTR fp) {
    ab78:	             lea -144(sp),sp
    ab7c:	             move.l a6,-(sp)
    ab7e:	             move.l d2,-(sp)
	struct onScreenPerson * me = allPeople;
    ab80:	             move.l 1a85c <allPeople>,148(sp)
	int countPeople = 0, a;
    ab88:	             clr.l 144(sp)

	putSigned (scaleHorizon, fp);
    ab8c:	             move.w 1a136 <scaleHorizon>,d0
    ab92:	             movea.w d0,a0
    ab94:	             move.l 156(sp),-(sp)
    ab98:	             move.l a0,-(sp)
    ab9a:	             jsr a9c <putSigned>
    aba0:	             addq.l #8,sp
	putSigned (scaleDivide, fp);
    aba2:	             move.w 1a138 <scaleDivide>,d0
    aba8:	             movea.w d0,a0
    abaa:	             move.l 156(sp),-(sp)
    abae:	             move.l a0,-(sp)
    abb0:	             jsr a9c <putSigned>
    abb6:	             addq.l #8,sp

	while (me) {
    abb8:	         /-- bra.s abc8 <savePeople+0x50>
		countPeople ++;
    abba:	      /--|-> addq.l #1,144(sp)
		me = me -> next;
    abbe:	      |  |   movea.l 148(sp),a0
    abc2:	      |  |   move.l 36(a0),148(sp)
	while (me) {
    abc8:	      |  \-> tst.l 148(sp)
    abcc:	      \----- bne.s abba <savePeople+0x42>
	}

	put2bytes (countPeople, fp);
    abce:	             move.l 156(sp),-(sp)
    abd2:	             move.l 148(sp),-(sp)
    abd6:	             jsr 8d0 <put2bytes>
    abdc:	             addq.l #8,sp

	me = allPeople;
    abde:	             move.l 1a85c <allPeople>,148(sp)
	for (a = 0; a < countPeople; a ++) {
    abe6:	             clr.l 140(sp)
    abea:	   /-------- bra.w b042 <savePeople+0x4ca>

		putFloat (me -> x, fp);
    abee:	/--|-------> movea.l 148(sp),a0
    abf2:	|  |         move.l (a0),d0
    abf4:	|  |         move.l 156(sp),-(sp)
    abf8:	|  |         move.l d0,-(sp)
    abfa:	|  |         jsr a46 <putFloat>
    ac00:	|  |         addq.l #8,sp
		putFloat (me -> y, fp);
    ac02:	|  |         movea.l 148(sp),a0
    ac06:	|  |         move.l 4(a0),d0
    ac0a:	|  |         move.l 156(sp),-(sp)
    ac0e:	|  |         move.l d0,-(sp)
    ac10:	|  |         jsr a46 <putFloat>
    ac16:	|  |         addq.l #8,sp

		saveCostume (me -> myPersona, fp);
    ac18:	|  |         movea.l 148(sp),a0
    ac1c:	|  |         move.l 80(a0),d0
    ac20:	|  |         move.l 156(sp),-(sp)
    ac24:	|  |         move.l d0,-(sp)
    ac26:	|  |         jsr ab1a <saveCostume>
    ac2c:	|  |         addq.l #8,sp
		saveAnim (me -> myAnim, fp);
    ac2e:	|  |         movea.l 148(sp),a0
    ac32:	|  |         move.l 72(a0),d0
    ac36:	|  |         move.l 156(sp),-(sp)
    ac3a:	|  |         move.l d0,-(sp)
    ac3c:	|  |         jsr aa50 <saveAnim>
    ac42:	|  |         addq.l #8,sp
		FPutC( fp, me -> myAnim == me -> lastUsedAnim);
    ac44:	|  |         move.l 156(sp),136(sp)
    ac4a:	|  |         movea.l 148(sp),a0
    ac4e:	|  |         move.l 72(a0),d1
    ac52:	|  |         movea.l 148(sp),a0
    ac56:	|  |         move.l 76(a0),d0
    ac5a:	|  |         cmp.l d1,d0
    ac5c:	|  |         seq d0
    ac5e:	|  |         neg.b d0
    ac60:	|  |         move.b d0,d0
    ac62:	|  |         andi.l #255,d0
    ac68:	|  |         move.l d0,132(sp)
    ac6c:	|  |         move.l 1a7ac <DOSBase>,d0
    ac72:	|  |         movea.l d0,a6
    ac74:	|  |         move.l 136(sp),d1
    ac78:	|  |         move.l 132(sp),d2
    ac7c:	|  |         jsr -312(a6)
    ac80:	|  |         move.l d0,128(sp)

		putFloat (me -> scale, fp);
    ac84:	|  |         movea.l 148(sp),a0
    ac88:	|  |         move.l 32(a0),d0
    ac8c:	|  |         move.l 156(sp),-(sp)
    ac90:	|  |         move.l d0,-(sp)
    ac92:	|  |         jsr a46 <putFloat>
    ac98:	|  |         addq.l #8,sp

		put2bytes (me -> extra, fp);
    ac9a:	|  |         movea.l 148(sp),a0
    ac9e:	|  |         move.l 118(a0),d0
    aca2:	|  |         move.l 156(sp),-(sp)
    aca6:	|  |         move.l d0,-(sp)
    aca8:	|  |         jsr 8d0 <put2bytes>
    acae:	|  |         addq.l #8,sp
		put2bytes (me -> height, fp);
    acb0:	|  |         movea.l 148(sp),a0
    acb4:	|  |         move.l 20(a0),d0
    acb8:	|  |         move.l 156(sp),-(sp)
    acbc:	|  |         move.l d0,-(sp)
    acbe:	|  |         jsr 8d0 <put2bytes>
    acc4:	|  |         addq.l #8,sp
		put2bytes (me -> walkToX, fp);
    acc6:	|  |         movea.l 148(sp),a0
    acca:	|  |         move.l 40(a0),d0
    acce:	|  |         move.l 156(sp),-(sp)
    acd2:	|  |         move.l d0,-(sp)
    acd4:	|  |         jsr 8d0 <put2bytes>
    acda:	|  |         addq.l #8,sp
		put2bytes (me -> walkToY, fp);
    acdc:	|  |         movea.l 148(sp),a0
    ace0:	|  |         move.l 44(a0),d0
    ace4:	|  |         move.l 156(sp),-(sp)
    ace8:	|  |         move.l d0,-(sp)
    acea:	|  |         jsr 8d0 <put2bytes>
    acf0:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepX, fp);
    acf2:	|  |         movea.l 148(sp),a0
    acf6:	|  |         move.l 48(a0),d0
    acfa:	|  |         move.l 156(sp),-(sp)
    acfe:	|  |         move.l d0,-(sp)
    ad00:	|  |         jsr 8d0 <put2bytes>
    ad06:	|  |         addq.l #8,sp
		put2bytes (me -> thisStepY, fp);
    ad08:	|  |         movea.l 148(sp),a0
    ad0c:	|  |         move.l 52(a0),d0
    ad10:	|  |         move.l 156(sp),-(sp)
    ad14:	|  |         move.l d0,-(sp)
    ad16:	|  |         jsr 8d0 <put2bytes>
    ad1c:	|  |         addq.l #8,sp
		put2bytes (me -> frameNum, fp);
    ad1e:	|  |         movea.l 148(sp),a0
    ad22:	|  |         move.l 84(a0),d0
    ad26:	|  |         move.l 156(sp),-(sp)
    ad2a:	|  |         move.l d0,-(sp)
    ad2c:	|  |         jsr 8d0 <put2bytes>
    ad32:	|  |         addq.l #8,sp
		put2bytes (me -> frameTick, fp);
    ad34:	|  |         movea.l 148(sp),a0
    ad38:	|  |         move.l 88(a0),d0
    ad3c:	|  |         move.l 156(sp),-(sp)
    ad40:	|  |         move.l d0,-(sp)
    ad42:	|  |         jsr 8d0 <put2bytes>
    ad48:	|  |         addq.l #8,sp
		put2bytes (me -> walkSpeed, fp);
    ad4a:	|  |         movea.l 148(sp),a0
    ad4e:	|  |         move.l 28(a0),d0
    ad52:	|  |         move.l 156(sp),-(sp)
    ad56:	|  |         move.l d0,-(sp)
    ad58:	|  |         jsr 8d0 <put2bytes>
    ad5e:	|  |         addq.l #8,sp
		put2bytes (me -> spinSpeed, fp);
    ad60:	|  |         movea.l 148(sp),a0
    ad64:	|  |         move.l 122(a0),d0
    ad68:	|  |         move.l 156(sp),-(sp)
    ad6c:	|  |         move.l d0,-(sp)
    ad6e:	|  |         jsr 8d0 <put2bytes>
    ad74:	|  |         addq.l #8,sp
		putSigned (me -> floaty, fp);
    ad76:	|  |         movea.l 148(sp),a0
    ad7a:	|  |         move.l 24(a0),d0
    ad7e:	|  |         move.l d0,d0
    ad80:	|  |         movea.w d0,a0
    ad82:	|  |         move.l 156(sp),-(sp)
    ad86:	|  |         move.l a0,-(sp)
    ad88:	|  |         jsr a9c <putSigned>
    ad8e:	|  |         addq.l #8,sp
		FPutC (fp, me -> show);
    ad90:	|  |         move.l 156(sp),124(sp)
    ad96:	|  |         movea.l 148(sp),a0
    ad9a:	|  |         move.w 104(a0),d0
    ad9e:	|  |         movea.w d0,a0
    ada0:	|  |         move.l a0,120(sp)
    ada4:	|  |         move.l 1a7ac <DOSBase>,d0
    adaa:	|  |         movea.l d0,a6
    adac:	|  |         move.l 124(sp),d1
    adb0:	|  |         move.l 120(sp),d2
    adb4:	|  |         jsr -312(a6)
    adb8:	|  |         move.l d0,116(sp)
		FPutC (fp, me -> walking);
    adbc:	|  |         move.l 156(sp),112(sp)
    adc2:	|  |         movea.l 148(sp),a0
    adc6:	|  |         move.w 64(a0),d0
    adca:	|  |         movea.w d0,a0
    adcc:	|  |         move.l a0,108(sp)
    add0:	|  |         move.l 1a7ac <DOSBase>,d0
    add6:	|  |         movea.l d0,a6
    add8:	|  |         move.l 112(sp),d1
    addc:	|  |         move.l 108(sp),d2
    ade0:	|  |         jsr -312(a6)
    ade4:	|  |         move.l d0,104(sp)
		FPutC (fp, me -> spinning);
    ade8:	|  |         move.l 156(sp),100(sp)
    adee:	|  |         movea.l 148(sp),a0
    adf2:	|  |         move.w 66(a0),d0
    adf6:	|  |         movea.w d0,a0
    adf8:	|  |         move.l a0,96(sp)
    adfc:	|  |         move.l 1a7ac <DOSBase>,d0
    ae02:	|  |         movea.l d0,a6
    ae04:	|  |         move.l 100(sp),d1
    ae08:	|  |         move.l 96(sp),d2
    ae0c:	|  |         jsr -312(a6)
    ae10:	|  |         move.l d0,92(sp)
		if (me -> continueAfterWalking) {
    ae14:	|  |         movea.l 148(sp),a0
    ae18:	|  |         move.l 68(a0),d0
    ae1c:	|  |  /----- beq.s ae5a <savePeople+0x2e2>
			FPutC (fp, 1);
    ae1e:	|  |  |      move.l 156(sp),76(sp)
    ae24:	|  |  |      moveq #1,d0
    ae26:	|  |  |      move.l d0,72(sp)
    ae2a:	|  |  |      move.l 1a7ac <DOSBase>,d0
    ae30:	|  |  |      movea.l d0,a6
    ae32:	|  |  |      move.l 76(sp),d1
    ae36:	|  |  |      move.l 72(sp),d2
    ae3a:	|  |  |      jsr -312(a6)
    ae3e:	|  |  |      move.l d0,68(sp)
			saveFunction (me -> continueAfterWalking, fp);
    ae42:	|  |  |      movea.l 148(sp),a0
    ae46:	|  |  |      move.l 68(a0),d0
    ae4a:	|  |  |      move.l 156(sp),-(sp)
    ae4e:	|  |  |      move.l d0,-(sp)
    ae50:	|  |  |      jsr bff0 <saveFunction>
    ae56:	|  |  |      addq.l #8,sp
    ae58:	|  |  |  /-- bra.s ae7e <savePeople+0x306>
		} else {
			FPutC (fp, 1);
    ae5a:	|  |  \--|-> move.l 156(sp),88(sp)
    ae60:	|  |     |   moveq #1,d0
    ae62:	|  |     |   move.l d0,84(sp)
    ae66:	|  |     |   move.l 1a7ac <DOSBase>,d0
    ae6c:	|  |     |   movea.l d0,a6
    ae6e:	|  |     |   move.l 88(sp),d1
    ae72:	|  |     |   move.l 84(sp),d2
    ae76:	|  |     |   jsr -312(a6)
    ae7a:	|  |     |   move.l d0,80(sp)
		}
		put2bytes (me -> direction, fp);
    ae7e:	|  |     \-> movea.l 148(sp),a0
    ae82:	|  |         move.l 106(a0),d0
    ae86:	|  |         move.l 156(sp),-(sp)
    ae8a:	|  |         move.l d0,-(sp)
    ae8c:	|  |         jsr 8d0 <put2bytes>
    ae92:	|  |         addq.l #8,sp
		put2bytes (me -> angle, fp);
    ae94:	|  |         movea.l 148(sp),a0
    ae98:	|  |         move.l 92(a0),d0
    ae9c:	|  |         move.l 156(sp),-(sp)
    aea0:	|  |         move.l d0,-(sp)
    aea2:	|  |         jsr 8d0 <put2bytes>
    aea8:	|  |         addq.l #8,sp
		put2bytes (me -> angleOffset, fp);
    aeaa:	|  |         movea.l 148(sp),a0
    aeae:	|  |         move.l 100(a0),d0
    aeb2:	|  |         move.l 156(sp),-(sp)
    aeb6:	|  |         move.l d0,-(sp)
    aeb8:	|  |         jsr 8d0 <put2bytes>
    aebe:	|  |         addq.l #8,sp
		put2bytes (me -> wantAngle, fp);
    aec0:	|  |         movea.l 148(sp),a0
    aec4:	|  |         move.l 96(a0),d0
    aec8:	|  |         move.l 156(sp),-(sp)
    aecc:	|  |         move.l d0,-(sp)
    aece:	|  |         jsr 8d0 <put2bytes>
    aed4:	|  |         addq.l #8,sp
		putSigned (me -> directionWhenDoneWalking, fp);
    aed6:	|  |         movea.l 148(sp),a0
    aeda:	|  |         move.l 110(a0),d0
    aede:	|  |         move.l d0,d0
    aee0:	|  |         movea.w d0,a0
    aee2:	|  |         move.l 156(sp),-(sp)
    aee6:	|  |         move.l a0,-(sp)
    aee8:	|  |         jsr a9c <putSigned>
    aeee:	|  |         addq.l #8,sp
		putSigned (me -> inPoly, fp);
    aef0:	|  |         movea.l 148(sp),a0
    aef4:	|  |         move.l 56(a0),d0
    aef8:	|  |         move.l d0,d0
    aefa:	|  |         movea.w d0,a0
    aefc:	|  |         move.l 156(sp),-(sp)
    af00:	|  |         move.l a0,-(sp)
    af02:	|  |         jsr a9c <putSigned>
    af08:	|  |         addq.l #8,sp
		putSigned (me -> walkToPoly, fp);
    af0a:	|  |         movea.l 148(sp),a0
    af0e:	|  |         move.l 60(a0),d0
    af12:	|  |         move.l d0,d0
    af14:	|  |         movea.w d0,a0
    af16:	|  |         move.l 156(sp),-(sp)
    af1a:	|  |         move.l a0,-(sp)
    af1c:	|  |         jsr a9c <putSigned>
    af22:	|  |         addq.l #8,sp

		FPutC (fp, me -> r);
    af24:	|  |         move.l 156(sp),64(sp)
    af2a:	|  |         movea.l 148(sp),a0
    af2e:	|  |         move.b 126(a0),d0
    af32:	|  |         move.b d0,d0
    af34:	|  |         andi.l #255,d0
    af3a:	|  |         move.l d0,60(sp)
    af3e:	|  |         move.l 1a7ac <DOSBase>,d0
    af44:	|  |         movea.l d0,a6
    af46:	|  |         move.l 64(sp),d1
    af4a:	|  |         move.l 60(sp),d2
    af4e:	|  |         jsr -312(a6)
    af52:	|  |         move.l d0,56(sp)
		FPutC (fp, me -> g);
    af56:	|  |         move.l 156(sp),52(sp)
    af5c:	|  |         movea.l 148(sp),a0
    af60:	|  |         move.b 127(a0),d0
    af64:	|  |         move.b d0,d0
    af66:	|  |         andi.l #255,d0
    af6c:	|  |         move.l d0,48(sp)
    af70:	|  |         move.l 1a7ac <DOSBase>,d0
    af76:	|  |         movea.l d0,a6
    af78:	|  |         move.l 52(sp),d1
    af7c:	|  |         move.l 48(sp),d2
    af80:	|  |         jsr -312(a6)
    af84:	|  |         move.l d0,44(sp)
		FPutC (fp, me -> b);
    af88:	|  |         move.l 156(sp),40(sp)
    af8e:	|  |         movea.l 148(sp),a0
    af92:	|  |         move.b 128(a0),d0
    af96:	|  |         move.b d0,d0
    af98:	|  |         andi.l #255,d0
    af9e:	|  |         move.l d0,36(sp)
    afa2:	|  |         move.l 1a7ac <DOSBase>,d0
    afa8:	|  |         movea.l d0,a6
    afaa:	|  |         move.l 40(sp),d1
    afae:	|  |         move.l 36(sp),d2
    afb2:	|  |         jsr -312(a6)
    afb6:	|  |         move.l d0,32(sp)
		FPutC (fp, me -> colourmix);
    afba:	|  |         move.l 156(sp),28(sp)
    afc0:	|  |         movea.l 148(sp),a0
    afc4:	|  |         move.b 129(a0),d0
    afc8:	|  |         move.b d0,d0
    afca:	|  |         andi.l #255,d0
    afd0:	|  |         move.l d0,24(sp)
    afd4:	|  |         move.l 1a7ac <DOSBase>,d0
    afda:	|  |         movea.l d0,a6
    afdc:	|  |         move.l 28(sp),d1
    afe0:	|  |         move.l 24(sp),d2
    afe4:	|  |         jsr -312(a6)
    afe8:	|  |         move.l d0,20(sp)
		FPutC (fp, me -> transparency);
    afec:	|  |         move.l 156(sp),16(sp)
    aff2:	|  |         movea.l 148(sp),a0
    aff6:	|  |         move.b 130(a0),d0
    affa:	|  |         move.b d0,d0
    affc:	|  |         andi.l #255,d0
    b002:	|  |         move.l d0,12(sp)
    b006:	|  |         move.l 1a7ac <DOSBase>,d0
    b00c:	|  |         movea.l d0,a6
    b00e:	|  |         move.l 16(sp),d1
    b012:	|  |         move.l 12(sp),d2
    b016:	|  |         jsr -312(a6)
    b01a:	|  |         move.l d0,8(sp)
		
		saveObjectRef (me -> thisType, fp);
    b01e:	|  |         movea.l 148(sp),a0
    b022:	|  |         move.l 114(a0),d0
    b026:	|  |         move.l 156(sp),-(sp)
    b02a:	|  |         move.l d0,-(sp)
    b02c:	|  |         jsr d412 <saveObjectRef>
    b032:	|  |         addq.l #8,sp

		me = me -> next;
    b034:	|  |         movea.l 148(sp),a0
    b038:	|  |         move.l 36(a0),148(sp)
	for (a = 0; a < countPeople; a ++) {
    b03e:	|  |         addq.l #1,140(sp)
    b042:	|  \-------> movea.l 140(sp),a0
    b046:	|            cmpa.l 144(sp),a0
    b04a:	\----------- blt.w abee <savePeople+0x76>
	}
	return TRUE;
    b04e:	             moveq #1,d0
}
    b050:	             move.l (sp)+,d2
    b052:	             movea.l (sp)+,a6
    b054:	             lea 144(sp),sp
    b058:	             rts

0000b05a <setBankFile>:

void setBankFile (struct personaAnimation * newP, struct loadedSpriteBank * sB) { 
	newP -> theSprites = sB; 
    b05a:	movea.l 4(sp),a0
    b05e:	move.l 8(sp),(a0)
}
    b062:	nop
    b064:	rts

0000b066 <setDrawMode>:


void setDrawMode (int h, int ob) {
    b066:	       subq.l #4,sp
	struct onScreenPerson * moveMe = findPerson (ob);
    b068:	       move.l 12(sp),-(sp)
    b06c:	       jsr a0f4 <findPerson>
    b072:	       addq.l #4,sp
    b074:	       move.l d0,(sp)
	if (! moveMe) return;
    b076:	/----- beq.s b08a <setDrawMode+0x24>
		
	setMyDrawMode (moveMe, h);
    b078:	|      move.l 8(sp),-(sp)
    b07c:	|      move.l 4(sp),-(sp)
    b080:	|      jsr b090 <setMyDrawMode>
    b086:	|      addq.l #8,sp
    b088:	|  /-- bra.s b08c <setDrawMode+0x26>
	if (! moveMe) return;
    b08a:	\--|-> nop
}
    b08c:	   \-> addq.l #4,sp
    b08e:	       rts

0000b090 <setMyDrawMode>:
	drawModeInvisible,
	numDrawModes
};

void setMyDrawMode (struct onScreenPerson *moveMe, int h) {
	switch (h) {
    b090:	       moveq #19,d0
    b092:	       cmp.l 8(sp),d0
    b096:	/----- bcs.w b56e <setMyDrawMode+0x4de>
    b09a:	|      move.l 8(sp),d0
    b09e:	|      add.l d0,d0
    b0a0:	|      movea.l d0,a0
    b0a2:	|      adda.l #45230,a0
    b0a8:	|      move.w (a0),d0
    b0aa:	|      jmp (b0ae <setMyDrawMode+0x1e>,pc,d0.w)
    b0ae:	|      .short 0x04c0
    b0b0:	|      ori.l #6684712,-(a4)
    b0b6:	|      btst d0,-(a0)
    b0b8:	|      bchg d0,(a6)+
    b0ba:	|      bclr d0,(a4)+
    b0bc:	|      bset d0,(a2)+
    b0be:	|      andi.b #84,(a6)
    b0c2:	|      andi.l #55575312,(a2)
    b0c8:	|      .short 0x02d0
    b0ca:	|      bclr d1,(a0)
    b0cc:	|      .short 0x044a
    b0ce:	|      .short 0x040c
    b0d0:	|      movep.l d1,1158(a6)
    b0d4:	|      .short 0x00e2
		case drawModeTransparent3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b0d6:	|      movea.l 4(sp),a0
    b0da:	|      clr.b 128(a0)
    b0de:	|      movea.l 4(sp),a0
    b0e2:	|      move.b 128(a0),d0
    b0e6:	|      movea.l 4(sp),a0
    b0ea:	|      move.b d0,127(a0)
    b0ee:	|      movea.l 4(sp),a0
    b0f2:	|      move.b 127(a0),d0
    b0f6:	|      movea.l 4(sp),a0
    b0fa:	|      move.b d0,126(a0)
			moveMe->colourmix = 0;
    b0fe:	|      movea.l 4(sp),a0
    b102:	|      clr.b 129(a0)
			moveMe->transparency = 64;
    b106:	|      movea.l 4(sp),a0
    b10a:	|      move.b #64,130(a0)
			break;
    b110:	|  /-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeTransparent2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b114:	|  |   movea.l 4(sp),a0
    b118:	|  |   clr.b 128(a0)
    b11c:	|  |   movea.l 4(sp),a0
    b120:	|  |   move.b 128(a0),d0
    b124:	|  |   movea.l 4(sp),a0
    b128:	|  |   move.b d0,127(a0)
    b12c:	|  |   movea.l 4(sp),a0
    b130:	|  |   move.b 127(a0),d0
    b134:	|  |   movea.l 4(sp),a0
    b138:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b13c:	|  |   movea.l 4(sp),a0
    b140:	|  |   clr.b 129(a0)
			moveMe->transparency = 128;
    b144:	|  |   movea.l 4(sp),a0
    b148:	|  |   move.b #-128,130(a0)
			break;
    b14e:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeTransparent1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b152:	|  |   movea.l 4(sp),a0
    b156:	|  |   clr.b 128(a0)
    b15a:	|  |   movea.l 4(sp),a0
    b15e:	|  |   move.b 128(a0),d0
    b162:	|  |   movea.l 4(sp),a0
    b166:	|  |   move.b d0,127(a0)
    b16a:	|  |   movea.l 4(sp),a0
    b16e:	|  |   move.b 127(a0),d0
    b172:	|  |   movea.l 4(sp),a0
    b176:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b17a:	|  |   movea.l 4(sp),a0
    b17e:	|  |   clr.b 129(a0)
			moveMe->transparency = 192;
    b182:	|  |   movea.l 4(sp),a0
    b186:	|  |   move.b #-64,130(a0)
			break;
    b18c:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeInvisible:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b190:	|  |   movea.l 4(sp),a0
    b194:	|  |   clr.b 128(a0)
    b198:	|  |   movea.l 4(sp),a0
    b19c:	|  |   move.b 128(a0),d0
    b1a0:	|  |   movea.l 4(sp),a0
    b1a4:	|  |   move.b d0,127(a0)
    b1a8:	|  |   movea.l 4(sp),a0
    b1ac:	|  |   move.b 127(a0),d0
    b1b0:	|  |   movea.l 4(sp),a0
    b1b4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b1b8:	|  |   movea.l 4(sp),a0
    b1bc:	|  |   clr.b 129(a0)
			moveMe->transparency = 254;
    b1c0:	|  |   movea.l 4(sp),a0
    b1c4:	|  |   move.b #-2,130(a0)
			break;
    b1ca:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeDark1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b1ce:	|  |   movea.l 4(sp),a0
    b1d2:	|  |   clr.b 128(a0)
    b1d6:	|  |   movea.l 4(sp),a0
    b1da:	|  |   move.b 128(a0),d0
    b1de:	|  |   movea.l 4(sp),a0
    b1e2:	|  |   move.b d0,127(a0)
    b1e6:	|  |   movea.l 4(sp),a0
    b1ea:	|  |   move.b 127(a0),d0
    b1ee:	|  |   movea.l 4(sp),a0
    b1f2:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b1f6:	|  |   movea.l 4(sp),a0
    b1fa:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b200:	|  |   movea.l 4(sp),a0
    b204:	|  |   clr.b 130(a0)
			break;
    b208:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeDark2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b20c:	|  |   movea.l 4(sp),a0
    b210:	|  |   clr.b 128(a0)
    b214:	|  |   movea.l 4(sp),a0
    b218:	|  |   move.b 128(a0),d0
    b21c:	|  |   movea.l 4(sp),a0
    b220:	|  |   move.b d0,127(a0)
    b224:	|  |   movea.l 4(sp),a0
    b228:	|  |   move.b 127(a0),d0
    b22c:	|  |   movea.l 4(sp),a0
    b230:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b234:	|  |   movea.l 4(sp),a0
    b238:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b23e:	|  |   movea.l 4(sp),a0
    b242:	|  |   clr.b 130(a0)
			break;
    b246:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeDark3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b24a:	|  |   movea.l 4(sp),a0
    b24e:	|  |   clr.b 128(a0)
    b252:	|  |   movea.l 4(sp),a0
    b256:	|  |   move.b 128(a0),d0
    b25a:	|  |   movea.l 4(sp),a0
    b25e:	|  |   move.b d0,127(a0)
    b262:	|  |   movea.l 4(sp),a0
    b266:	|  |   move.b 127(a0),d0
    b26a:	|  |   movea.l 4(sp),a0
    b26e:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b272:	|  |   movea.l 4(sp),a0
    b276:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b27c:	|  |   movea.l 4(sp),a0
    b280:	|  |   clr.b 130(a0)
			break;
    b284:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeBlack:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b288:	|  |   movea.l 4(sp),a0
    b28c:	|  |   clr.b 128(a0)
    b290:	|  |   movea.l 4(sp),a0
    b294:	|  |   move.b 128(a0),d0
    b298:	|  |   movea.l 4(sp),a0
    b29c:	|  |   move.b d0,127(a0)
    b2a0:	|  |   movea.l 4(sp),a0
    b2a4:	|  |   move.b 127(a0),d0
    b2a8:	|  |   movea.l 4(sp),a0
    b2ac:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b2b0:	|  |   movea.l 4(sp),a0
    b2b4:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b2b8:	|  |   movea.l 4(sp),a0
    b2bc:	|  |   clr.b 130(a0)
			break;
    b2c0:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeShadow1:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b2c4:	|  |   movea.l 4(sp),a0
    b2c8:	|  |   clr.b 128(a0)
    b2cc:	|  |   movea.l 4(sp),a0
    b2d0:	|  |   move.b 128(a0),d0
    b2d4:	|  |   movea.l 4(sp),a0
    b2d8:	|  |   move.b d0,127(a0)
    b2dc:	|  |   movea.l 4(sp),a0
    b2e0:	|  |   move.b 127(a0),d0
    b2e4:	|  |   movea.l 4(sp),a0
    b2e8:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b2ec:	|  |   movea.l 4(sp),a0
    b2f0:	|  |   st 129(a0)
			moveMe->transparency = 64;
    b2f4:	|  |   movea.l 4(sp),a0
    b2f8:	|  |   move.b #64,130(a0)
			break;
    b2fe:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeShadow2:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b302:	|  |   movea.l 4(sp),a0
    b306:	|  |   clr.b 128(a0)
    b30a:	|  |   movea.l 4(sp),a0
    b30e:	|  |   move.b 128(a0),d0
    b312:	|  |   movea.l 4(sp),a0
    b316:	|  |   move.b d0,127(a0)
    b31a:	|  |   movea.l 4(sp),a0
    b31e:	|  |   move.b 127(a0),d0
    b322:	|  |   movea.l 4(sp),a0
    b326:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b32a:	|  |   movea.l 4(sp),a0
    b32e:	|  |   st 129(a0)
			moveMe->transparency = 128;
    b332:	|  |   movea.l 4(sp),a0
    b336:	|  |   move.b #-128,130(a0)
			break;
    b33c:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeShadow3:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b340:	|  |   movea.l 4(sp),a0
    b344:	|  |   clr.b 128(a0)
    b348:	|  |   movea.l 4(sp),a0
    b34c:	|  |   move.b 128(a0),d0
    b350:	|  |   movea.l 4(sp),a0
    b354:	|  |   move.b d0,127(a0)
    b358:	|  |   movea.l 4(sp),a0
    b35c:	|  |   move.b 127(a0),d0
    b360:	|  |   movea.l 4(sp),a0
    b364:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b368:	|  |   movea.l 4(sp),a0
    b36c:	|  |   st 129(a0)
			moveMe->transparency = 192;
    b370:	|  |   movea.l 4(sp),a0
    b374:	|  |   move.b #-64,130(a0)
			break;
    b37a:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeFoggy3:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b37e:	|  |   movea.l 4(sp),a0
    b382:	|  |   move.b #-128,128(a0)
    b388:	|  |   movea.l 4(sp),a0
    b38c:	|  |   move.b 128(a0),d0
    b390:	|  |   movea.l 4(sp),a0
    b394:	|  |   move.b d0,127(a0)
    b398:	|  |   movea.l 4(sp),a0
    b39c:	|  |   move.b 127(a0),d0
    b3a0:	|  |   movea.l 4(sp),a0
    b3a4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b3a8:	|  |   movea.l 4(sp),a0
    b3ac:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b3b2:	|  |   movea.l 4(sp),a0
    b3b6:	|  |   clr.b 130(a0)
			break;
    b3ba:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeFoggy2:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b3be:	|  |   movea.l 4(sp),a0
    b3c2:	|  |   move.b #-128,128(a0)
    b3c8:	|  |   movea.l 4(sp),a0
    b3cc:	|  |   move.b 128(a0),d0
    b3d0:	|  |   movea.l 4(sp),a0
    b3d4:	|  |   move.b d0,127(a0)
    b3d8:	|  |   movea.l 4(sp),a0
    b3dc:	|  |   move.b 127(a0),d0
    b3e0:	|  |   movea.l 4(sp),a0
    b3e4:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b3e8:	|  |   movea.l 4(sp),a0
    b3ec:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b3f2:	|  |   movea.l 4(sp),a0
    b3f6:	|  |   clr.b 130(a0)
			break;
    b3fa:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeFoggy1:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b3fe:	|  |   movea.l 4(sp),a0
    b402:	|  |   move.b #-128,128(a0)
    b408:	|  |   movea.l 4(sp),a0
    b40c:	|  |   move.b 128(a0),d0
    b410:	|  |   movea.l 4(sp),a0
    b414:	|  |   move.b d0,127(a0)
    b418:	|  |   movea.l 4(sp),a0
    b41c:	|  |   move.b 127(a0),d0
    b420:	|  |   movea.l 4(sp),a0
    b424:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b428:	|  |   movea.l 4(sp),a0
    b42c:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b432:	|  |   movea.l 4(sp),a0
    b436:	|  |   clr.b 130(a0)
			break;
    b43a:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeFoggy4:
			moveMe->r = moveMe->g = moveMe->b = 128;
    b43e:	|  |   movea.l 4(sp),a0
    b442:	|  |   move.b #-128,128(a0)
    b448:	|  |   movea.l 4(sp),a0
    b44c:	|  |   move.b 128(a0),d0
    b450:	|  |   movea.l 4(sp),a0
    b454:	|  |   move.b d0,127(a0)
    b458:	|  |   movea.l 4(sp),a0
    b45c:	|  |   move.b 127(a0),d0
    b460:	|  |   movea.l 4(sp),a0
    b464:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b468:	|  |   movea.l 4(sp),a0
    b46c:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b470:	|  |   movea.l 4(sp),a0
    b474:	|  |   clr.b 130(a0)
			break;
    b478:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeGlow3:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b47c:	|  |   movea.l 4(sp),a0
    b480:	|  |   st 128(a0)
    b484:	|  |   movea.l 4(sp),a0
    b488:	|  |   move.b 128(a0),d0
    b48c:	|  |   movea.l 4(sp),a0
    b490:	|  |   move.b d0,127(a0)
    b494:	|  |   movea.l 4(sp),a0
    b498:	|  |   move.b 127(a0),d0
    b49c:	|  |   movea.l 4(sp),a0
    b4a0:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 192;
    b4a4:	|  |   movea.l 4(sp),a0
    b4a8:	|  |   move.b #-64,129(a0)
			moveMe->transparency = 0;
    b4ae:	|  |   movea.l 4(sp),a0
    b4b2:	|  |   clr.b 130(a0)
			break;
    b4b6:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeGlow2:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b4ba:	|  |   movea.l 4(sp),a0
    b4be:	|  |   st 128(a0)
    b4c2:	|  |   movea.l 4(sp),a0
    b4c6:	|  |   move.b 128(a0),d0
    b4ca:	|  |   movea.l 4(sp),a0
    b4ce:	|  |   move.b d0,127(a0)
    b4d2:	|  |   movea.l 4(sp),a0
    b4d6:	|  |   move.b 127(a0),d0
    b4da:	|  |   movea.l 4(sp),a0
    b4de:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 128;
    b4e2:	|  |   movea.l 4(sp),a0
    b4e6:	|  |   move.b #-128,129(a0)
			moveMe->transparency = 0;
    b4ec:	|  |   movea.l 4(sp),a0
    b4f0:	|  |   clr.b 130(a0)
			break;
    b4f4:	|  +-- bra.w b5a8 <setMyDrawMode+0x518>
		case drawModeGlow1:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b4f8:	|  |   movea.l 4(sp),a0
    b4fc:	|  |   st 128(a0)
    b500:	|  |   movea.l 4(sp),a0
    b504:	|  |   move.b 128(a0),d0
    b508:	|  |   movea.l 4(sp),a0
    b50c:	|  |   move.b d0,127(a0)
    b510:	|  |   movea.l 4(sp),a0
    b514:	|  |   move.b 127(a0),d0
    b518:	|  |   movea.l 4(sp),a0
    b51c:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 64;
    b520:	|  |   movea.l 4(sp),a0
    b524:	|  |   move.b #64,129(a0)
			moveMe->transparency = 0;
    b52a:	|  |   movea.l 4(sp),a0
    b52e:	|  |   clr.b 130(a0)
			break;
    b532:	|  +-- bra.s b5a8 <setMyDrawMode+0x518>
		case drawModeGlow4:
			moveMe->r = moveMe->g = moveMe->b = 255;
    b534:	|  |   movea.l 4(sp),a0
    b538:	|  |   st 128(a0)
    b53c:	|  |   movea.l 4(sp),a0
    b540:	|  |   move.b 128(a0),d0
    b544:	|  |   movea.l 4(sp),a0
    b548:	|  |   move.b d0,127(a0)
    b54c:	|  |   movea.l 4(sp),a0
    b550:	|  |   move.b 127(a0),d0
    b554:	|  |   movea.l 4(sp),a0
    b558:	|  |   move.b d0,126(a0)
			moveMe->colourmix = 255;
    b55c:	|  |   movea.l 4(sp),a0
    b560:	|  |   st 129(a0)
			moveMe->transparency = 0;
    b564:	|  |   movea.l 4(sp),a0
    b568:	|  |   clr.b 130(a0)
			break;
    b56c:	|  +-- bra.s b5a8 <setMyDrawMode+0x518>
		default:
			moveMe->r = moveMe->g = moveMe->b = 0;
    b56e:	\--|-> movea.l 4(sp),a0
    b572:	   |   clr.b 128(a0)
    b576:	   |   movea.l 4(sp),a0
    b57a:	   |   move.b 128(a0),d0
    b57e:	   |   movea.l 4(sp),a0
    b582:	   |   move.b d0,127(a0)
    b586:	   |   movea.l 4(sp),a0
    b58a:	   |   move.b 127(a0),d0
    b58e:	   |   movea.l 4(sp),a0
    b592:	   |   move.b d0,126(a0)
			moveMe->colourmix = 0;
    b596:	   |   movea.l 4(sp),a0
    b59a:	   |   clr.b 129(a0)
			moveMe->transparency = 0;
    b59e:	   |   movea.l 4(sp),a0
    b5a2:	   |   clr.b 130(a0)
			break;
    b5a6:	   |   nop
	}
}
    b5a8:	   \-> nop
    b5aa:	       rts

0000b5ac <shufflePeople>:

void shufflePeople () {
    b5ac:	             lea -20(sp),sp
	struct onScreenPerson ** thisReference = &allPeople;
    b5b0:	             move.l #108636,16(sp)
	struct onScreenPerson * A, * B;

	if (!allPeople) return;
    b5b8:	             move.l 1a85c <allPeople>,d0
    b5be:	/----------- beq.w b694 <shufflePeople+0xe8>

	while ((*thisReference)->next) {
    b5c2:	|     /----- bra.w b684 <shufflePeople+0xd8>
		float y1 = (*thisReference)->y;
    b5c6:	|  /--|----> movea.l 16(sp),a0
    b5ca:	|  |  |      movea.l (a0),a0
    b5cc:	|  |  |      move.l 4(a0),12(sp)
		if ((*thisReference)->extra & EXTRA_FRONT) y1 += 1000;
    b5d2:	|  |  |      movea.l 16(sp),a0
    b5d6:	|  |  |      movea.l (a0),a0
    b5d8:	|  |  |      move.l 118(a0),d0
    b5dc:	|  |  |      moveq #1,d1
    b5de:	|  |  |      and.l d1,d0
    b5e0:	|  |  |  /-- beq.s b5f8 <shufflePeople+0x4c>
    b5e2:	|  |  |  |   move.l #1148846080,-(sp)
    b5e8:	|  |  |  |   move.l 16(sp),-(sp)
    b5ec:	|  |  |  |   jsr 16e4c <__addsf3>
    b5f2:	|  |  |  |   addq.l #8,sp
    b5f4:	|  |  |  |   move.l d0,12(sp)

		float y2 = (*thisReference)->next->y;
    b5f8:	|  |  |  \-> movea.l 16(sp),a0
    b5fc:	|  |  |      movea.l (a0),a0
    b5fe:	|  |  |      movea.l 36(a0),a0
    b602:	|  |  |      move.l 4(a0),8(sp)
		if ((*thisReference)->next->extra & EXTRA_FRONT) y2 += 1000;
    b608:	|  |  |      movea.l 16(sp),a0
    b60c:	|  |  |      movea.l (a0),a0
    b60e:	|  |  |      movea.l 36(a0),a0
    b612:	|  |  |      move.l 118(a0),d0
    b616:	|  |  |      moveq #1,d1
    b618:	|  |  |      and.l d1,d0
    b61a:	|  |  |  /-- beq.s b632 <shufflePeople+0x86>
    b61c:	|  |  |  |   move.l #1148846080,-(sp)
    b622:	|  |  |  |   move.l 12(sp),-(sp)
    b626:	|  |  |  |   jsr 16e4c <__addsf3>
    b62c:	|  |  |  |   addq.l #8,sp
    b62e:	|  |  |  |   move.l d0,8(sp)

		if (y1 > y2) {
    b632:	|  |  |  \-> move.l 8(sp),-(sp)
    b636:	|  |  |      move.l 16(sp),-(sp)
    b63a:	|  |  |      jsr 17206 <__gtsf2>
    b640:	|  |  |      addq.l #8,sp
    b642:	|  |  |      tst.l d0
    b644:	|  |  |  /-- ble.s b676 <shufflePeople+0xca>
			A = (*thisReference);
    b646:	|  |  |  |   movea.l 16(sp),a0
    b64a:	|  |  |  |   move.l (a0),4(sp)
			B = (*thisReference)->next;
    b64e:	|  |  |  |   movea.l 16(sp),a0
    b652:	|  |  |  |   movea.l (a0),a0
    b654:	|  |  |  |   move.l 36(a0),(sp)
			A->next = B->next;
    b658:	|  |  |  |   movea.l (sp),a0
    b65a:	|  |  |  |   move.l 36(a0),d0
    b65e:	|  |  |  |   movea.l 4(sp),a0
    b662:	|  |  |  |   move.l d0,36(a0)
			B->next = A;
    b666:	|  |  |  |   movea.l (sp),a0
    b668:	|  |  |  |   move.l 4(sp),36(a0)
			(*thisReference) = B;
    b66e:	|  |  |  |   movea.l 16(sp),a0
    b672:	|  |  |  |   move.l (sp),(a0)
    b674:	|  |  +--|-- bra.s b684 <shufflePeople+0xd8>
		} else {
			thisReference = &((*thisReference)->next);
    b676:	|  |  |  \-> movea.l 16(sp),a0
    b67a:	|  |  |      move.l (a0),d0
    b67c:	|  |  |      moveq #36,d1
    b67e:	|  |  |      add.l d0,d1
    b680:	|  |  |      move.l d1,16(sp)
	while ((*thisReference)->next) {
    b684:	|  |  \----> movea.l 16(sp),a0
    b688:	|  |         movea.l (a0),a0
    b68a:	|  |         move.l 36(a0),d0
    b68e:	|  \-------- bne.w b5c6 <shufflePeople+0x1a>
    b692:	|        /-- bra.s b696 <shufflePeople+0xea>
	if (!allPeople) return;
    b694:	\--------|-> nop
		}
	}
}
    b696:	         \-> lea 20(sp),sp
    b69a:	             rts

0000b69c <setCharacterWalkSpeed>:


BOOL setCharacterWalkSpeed (int f, int objNum) {
    b69c:	       subq.l #4,sp
	if (f <= 0) return FALSE;
    b69e:	       tst.l 8(sp)
    b6a2:	   /-- bgt.s b6a8 <setCharacterWalkSpeed+0xc>
    b6a4:	   |   clr.w d0
    b6a6:	/--|-- bra.s b6c6 <setCharacterWalkSpeed+0x2a>
	struct onScreenPerson * moveMe = findPerson (objNum);
    b6a8:	|  \-> move.l 12(sp),-(sp)
    b6ac:	|      jsr a0f4 <findPerson>
    b6b2:	|      addq.l #4,sp
    b6b4:	|      move.l d0,(sp)
	if (! moveMe) return FALSE;
    b6b6:	|  /-- bne.s b6bc <setCharacterWalkSpeed+0x20>
    b6b8:	|  |   clr.w d0
    b6ba:	+--|-- bra.s b6c6 <setCharacterWalkSpeed+0x2a>
	moveMe -> walkSpeed = f;
    b6bc:	|  \-> movea.l (sp),a0
    b6be:	|      move.l 8(sp),28(a0)
	return TRUE;
    b6c4:	|      moveq #1,d0
}
    b6c6:	\----> addq.l #4,sp
    b6c8:	       rts

0000b6ca <setPersonExtra>:

BOOL setPersonExtra (int thisNum, int extra) {
    b6ca:	       subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    b6cc:	       move.l 8(sp),-(sp)
    b6d0:	       jsr a0f4 <findPerson>
    b6d6:	       addq.l #4,sp
    b6d8:	       move.l d0,(sp)
    if (thisPerson) {
    b6da:	/----- beq.s b6fa <setPersonExtra+0x30>
        thisPerson -> extra = extra;
    b6dc:	|      movea.l (sp),a0
    b6de:	|      move.l 12(sp),118(a0)
        if (extra & EXTRA_NOSCALE) thisPerson -> scale = 1;
    b6e4:	|      moveq #2,d0
    b6e6:	|      and.l 12(sp),d0
    b6ea:	|  /-- beq.s b6f6 <setPersonExtra+0x2c>
    b6ec:	|  |   movea.l (sp),a0
    b6ee:	|  |   move.l #1065353216,32(a0)
        return TRUE;
    b6f6:	|  \-> moveq #1,d0
    b6f8:	|  /-- bra.s b6fc <setPersonExtra+0x32>
    }
    return FALSE;
    b6fa:	\--|-> clr.w d0
}
    b6fc:	   \-> addq.l #4,sp
    b6fe:	       rts

0000b700 <setScale>:


void setScale (short int h, short int d) {
    b700:	subq.l #4,sp
    b702:	move.l 8(sp),d1
    b706:	move.l 12(sp),d0
    b70a:	move.w d1,d1
    b70c:	move.w d1,2(sp)
    b710:	move.w d0,d0
    b712:	move.w d0,(sp)
	scaleHorizon = h;
    b714:	move.w 2(sp),1a136 <scaleHorizon>
	scaleDivide = d;
    b71c:	move.w (sp),1a138 <scaleDivide>
}
    b722:	nop
    b724:	addq.l #4,sp
    b726:	rts

0000b728 <setShown>:

void setShown (BOOL h, int ob) {
    b728:	    subq.l #8,sp
    b72a:	    move.l 12(sp),d0
    b72e:	    move.w d0,d0
    b730:	    move.w d0,2(sp)
	struct onScreenPerson * moveMe = findPerson (ob);
    b734:	    move.l 16(sp),-(sp)
    b738:	    jsr a0f4 <findPerson>
    b73e:	    addq.l #4,sp
    b740:	    move.l d0,4(sp)
	if (moveMe) moveMe -> show = h;
    b744:	/-- beq.s b750 <setShown+0x28>
    b746:	|   movea.l 4(sp),a0
    b74a:	|   move.w 2(sp),104(a0)
}
    b750:	\-> nop
    b752:	    addq.l #8,sp
    b754:	    rts

0000b756 <spinStep>:

void spinStep (struct onScreenPerson * thisPerson) {
    b756:	       subq.l #8,sp
    b758:	       move.l d2,-(sp)
	int diff = (thisPerson->angle + 360) - thisPerson->wantAngle;
    b75a:	       movea.l 16(sp),a0
    b75e:	       move.l 92(a0),d0
    b762:	       move.l d0,d1
    b764:	       addi.l #360,d1
    b76a:	       movea.l 16(sp),a0
    b76e:	       move.l 96(a0),d0
    b772:	       move.l d1,d2
    b774:	       sub.l d0,d2
    b776:	       move.l d2,8(sp)
	int eachSlice = thisPerson->spinSpeed ? thisPerson->spinSpeed : (360 / thisPerson->myPersona->numDirections);
    b77a:	       movea.l 16(sp),a0
    b77e:	       move.l 122(a0),d0
    b782:	   /-- beq.s b78e <spinStep+0x38>
    b784:	   |   movea.l 16(sp),a0
    b788:	   |   move.l 122(a0),d0
    b78c:	/--|-- bra.s b7a8 <spinStep+0x52>
    b78e:	|  \-> movea.l 16(sp),a0
    b792:	|      movea.l 80(a0),a0
    b796:	|      move.l 4(a0),d0
    b79a:	|      move.l d0,-(sp)
    b79c:	|      pea 168 <decodeFilename+0x50>
    b7a0:	|      jsr 1769a <__divsi3>
    b7a6:	|      addq.l #8,sp
    b7a8:	\----> move.l d0,4(sp)
	while (diff > 180) {
    b7ac:	   /-- bra.s b7b6 <spinStep+0x60>
		diff -= 360;
    b7ae:	/--|-> addi.l #-360,8(sp)
	while (diff > 180) {
    b7b6:	|  \-> cmpi.l #180,8(sp)
    b7be:	\----- bgt.s b7ae <spinStep+0x58>
	}

	if (diff >= eachSlice) {
    b7c0:	       move.l 8(sp),d0
    b7c4:	       cmp.l 4(sp),d0
    b7c8:	   /-- blt.s b7e6 <spinStep+0x90>
		turnMeAngle(thisPerson, thisPerson->angle - eachSlice);
    b7ca:	   |   movea.l 16(sp),a0
    b7ce:	   |   move.l 92(a0),d0
    b7d2:	   |   sub.l 4(sp),d0
    b7d6:	   |   move.l d0,-(sp)
    b7d8:	   |   move.l 20(sp),-(sp)
    b7dc:	   |   jsr b8c6 <turnMeAngle>
    b7e2:	   |   addq.l #8,sp
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
	} else {
		turnMeAngle(thisPerson, thisPerson->wantAngle);
		thisPerson->spinning = FALSE;
	}
}
    b7e4:	/--|-- bra.s b82c <spinStep+0xd6>
	} else if (diff <= -eachSlice) {
    b7e6:	|  \-> move.l 4(sp),d0
    b7ea:	|      neg.l d0
    b7ec:	|      cmp.l 8(sp),d0
    b7f0:	|  /-- blt.s b80e <spinStep+0xb8>
		turnMeAngle(thisPerson, thisPerson->angle + eachSlice);
    b7f2:	|  |   movea.l 16(sp),a0
    b7f6:	|  |   move.l 92(a0),d0
    b7fa:	|  |   add.l 4(sp),d0
    b7fe:	|  |   move.l d0,-(sp)
    b800:	|  |   move.l 20(sp),-(sp)
    b804:	|  |   jsr b8c6 <turnMeAngle>
    b80a:	|  |   addq.l #8,sp
}
    b80c:	+--|-- bra.s b82c <spinStep+0xd6>
		turnMeAngle(thisPerson, thisPerson->wantAngle);
    b80e:	|  \-> movea.l 16(sp),a0
    b812:	|      move.l 96(a0),d0
    b816:	|      move.l d0,-(sp)
    b818:	|      move.l 20(sp),-(sp)
    b81c:	|      jsr b8c6 <turnMeAngle>
    b822:	|      addq.l #8,sp
		thisPerson->spinning = FALSE;
    b824:	|      movea.l 16(sp),a0
    b828:	|      clr.w 66(a0)
}
    b82c:	\----> nop
    b82e:	       move.l (sp)+,d2
    b830:	       addq.l #8,sp
    b832:	       rts

0000b834 <stopPerson>:


BOOL stopPerson (int o) {
    b834:	       subq.l #4,sp
    struct onScreenPerson * moveMe = findPerson(o);
    b836:	       move.l 8(sp),-(sp)
    b83a:	       jsr a0f4 <findPerson>
    b840:	       addq.l #4,sp
    b842:	       move.l d0,(sp)
    if (moveMe)
    b844:	/----- beq.s b882 <stopPerson+0x4e>
        if (moveMe -> continueAfterWalking) {
    b846:	|      movea.l (sp),a0
    b848:	|      move.l 68(a0),d0
    b84c:	+----- beq.s b882 <stopPerson+0x4e>
            abortFunction(moveMe -> continueAfterWalking);
    b84e:	|      movea.l (sp),a0
    b850:	|      move.l 68(a0),d0
    b854:	|      move.l d0,-(sp)
    b856:	|      jsr 3ff4 <abortFunction>
    b85c:	|      addq.l #4,sp
            moveMe -> continueAfterWalking = NULL;
    b85e:	|      movea.l (sp),a0
    b860:	|      clr.l 68(a0)
            moveMe -> walking = FALSE;
    b864:	|      movea.l (sp),a0
    b866:	|      clr.w 64(a0)
            moveMe -> spinning = FALSE;
    b86a:	|      movea.l (sp),a0
    b86c:	|      clr.w 66(a0)
            setFrames(moveMe, ANI_STAND);
    b870:	|      clr.l -(sp)
    b872:	|      move.l 4(sp),-(sp)
    b876:	|      jsr 7a3e <setFrames>
    b87c:	|      addq.l #8,sp
            return TRUE;
    b87e:	|      moveq #1,d0
    b880:	|  /-- bra.s b884 <stopPerson+0x50>
        }
    return FALSE;
    b882:	\--|-> clr.w d0
}
    b884:	   \-> addq.l #4,sp
    b886:	       rts

0000b888 <timeForAnim>:


int timeForAnim (struct personaAnimation * fram) {
    b888:	       subq.l #8,sp
	int total = 0;
    b88a:	       clr.l 4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    b88e:	       clr.l (sp)
    b890:	   /-- bra.s b8b2 <timeForAnim+0x2a>
		total += fram -> frames[a].howMany;
    b892:	/--|-> movea.l 12(sp),a0
    b896:	|  |   movea.l 4(a0),a0
    b89a:	|  |   move.l (sp),d1
    b89c:	|  |   move.l d1,d0
    b89e:	|  |   add.l d0,d0
    b8a0:	|  |   add.l d1,d0
    b8a2:	|  |   add.l d0,d0
    b8a4:	|  |   add.l d0,d0
    b8a6:	|  |   adda.l d0,a0
    b8a8:	|  |   move.l 4(a0),d0
    b8ac:	|  |   add.l d0,4(sp)
	for (int a = 0; a < fram -> numFrames; a ++) {
    b8b0:	|  |   addq.l #1,(sp)
    b8b2:	|  \-> movea.l 12(sp),a0
    b8b6:	|      move.l 8(a0),d0
    b8ba:	|      cmp.l (sp),d0
    b8bc:	\----- bgt.s b892 <timeForAnim+0xa>
	}
	return total;
    b8be:	       move.l 4(sp),d0
}
    b8c2:	       addq.l #8,sp
    b8c4:	       rts

0000b8c6 <turnMeAngle>:

void turnMeAngle (struct onScreenPerson * thisPerson, int direc) {
    b8c6:	       subq.l #4,sp
	int d = thisPerson -> myPersona -> numDirections;
    b8c8:	       movea.l 8(sp),a0
    b8cc:	       movea.l 80(a0),a0
    b8d0:	       move.l 4(a0),(sp)
	thisPerson -> angle = direc;
    b8d4:	       movea.l 8(sp),a0
    b8d8:	       move.l 12(sp),92(a0)
	direc += (180 / d) + 180 + thisPerson -> angleOffset;
    b8de:	       move.l (sp),-(sp)
    b8e0:	       pea b4 <_start+0xb4>
    b8e4:	       jsr 1769a <__divsi3>
    b8ea:	       addq.l #8,sp
    b8ec:	       move.l d0,d1
    b8ee:	       addi.l #180,d1
    b8f4:	       movea.l 8(sp),a0
    b8f8:	       move.l 100(a0),d0
    b8fc:	       add.l d1,d0
    b8fe:	       add.l d0,12(sp)
	while (direc >= 360) direc -= 360;
    b902:	   /-- bra.s b90c <turnMeAngle+0x46>
    b904:	/--|-> addi.l #-360,12(sp)
    b90c:	|  \-> cmpi.l #359,12(sp)
    b914:	\----- bgt.s b904 <turnMeAngle+0x3e>
	thisPerson -> direction = (direc * d) / 360;
    b916:	       move.l (sp),-(sp)
    b918:	       move.l 16(sp),-(sp)
    b91c:	       jsr 1761c <__mulsi3>
    b922:	       addq.l #8,sp
    b924:	       pea 168 <decodeFilename+0x50>
    b928:	       move.l d0,-(sp)
    b92a:	       jsr 1769a <__divsi3>
    b930:	       addq.l #8,sp
    b932:	       movea.l 8(sp),a0
    b936:	       move.l d0,106(a0)
}
    b93a:	       nop
    b93c:	       addq.l #4,sp
    b93e:	       rts

0000b940 <turnPersonToFace>:

BOOL turnPersonToFace (int thisNum, int direc) {
    b940:	          subq.l #4,sp
    struct onScreenPerson * thisPerson = findPerson(thisNum);
    b942:	          move.l 8(sp),-(sp)
    b946:	          jsr a0f4 <findPerson>
    b94c:	          addq.l #4,sp
    b94e:	          move.l d0,(sp)
    if (thisPerson) {
    b950:	/-------- beq.s b9b0 <turnPersonToFace+0x70>
        if (thisPerson -> continueAfterWalking) abortFunction(thisPerson -> continueAfterWalking);
    b952:	|         movea.l (sp),a0
    b954:	|         move.l 68(a0),d0
    b958:	|     /-- beq.s b96a <turnPersonToFace+0x2a>
    b95a:	|     |   movea.l (sp),a0
    b95c:	|     |   move.l 68(a0),d0
    b960:	|     |   move.l d0,-(sp)
    b962:	|     |   jsr 3ff4 <abortFunction>
    b968:	|     |   addq.l #4,sp
        thisPerson -> continueAfterWalking = NULL;
    b96a:	|     \-> movea.l (sp),a0
    b96c:	|         clr.l 68(a0)
        thisPerson -> walking = FALSE;
    b970:	|         movea.l (sp),a0
    b972:	|         clr.w 64(a0)
        thisPerson -> spinning = FALSE;
    b976:	|         movea.l (sp),a0
    b978:	|         clr.w 66(a0)
        turnMeAngle(thisPerson, direc);
    b97c:	|         move.l 12(sp),-(sp)
    b980:	|         move.l 4(sp),-(sp)
    b984:	|         jsr b8c6 <turnMeAngle>
    b98a:	|         addq.l #8,sp
        setFrames(thisPerson, (thisPerson == speech->currentTalker) ? ANI_TALK : ANI_STAND);
    b98c:	|         movea.l 1a800 <speech>,a0
    b992:	|         move.l (a0),d0
    b994:	|         cmp.l (sp),d0
    b996:	|  /----- bne.s b99c <turnPersonToFace+0x5c>
    b998:	|  |      moveq #2,d0
    b99a:	|  |  /-- bra.s b99e <turnPersonToFace+0x5e>
    b99c:	|  \--|-> moveq #0,d0
    b99e:	|     \-> move.l d0,-(sp)
    b9a0:	|         move.l 4(sp),-(sp)
    b9a4:	|         jsr 7a3e <setFrames>
    b9aa:	|         addq.l #8,sp
        return TRUE;
    b9ac:	|         moveq #1,d0
    b9ae:	|     /-- bra.s b9b2 <turnPersonToFace+0x72>
    }
    return FALSE;
    b9b0:	\-----|-> clr.w d0
}
    b9b2:	      \-> addq.l #4,sp
    b9b4:	          rts

0000b9b6 <walkMe>:

BOOL walkMe (struct onScreenPerson * thisPerson, BOOL move) {
    b9b6:	                lea -20(sp),sp
    b9ba:	                move.l d3,-(sp)
    b9bc:	                move.l d2,-(sp)
    b9be:	                move.l 36(sp),d0
    b9c2:	                move.w d0,d0
    b9c4:	                move.w d0,10(sp)
	float xDiff, yDiff, maxDiff, s;

	if (move == -1) move = TRUE;  // Initialize default value for move
    b9c8:	                cmpi.w #-1,10(sp)
    b9ce:	/-------------- bne.s b9d6 <walkMe+0x20>
    b9d0:	|               move.w #1,10(sp)

	for (;;) {
		xDiff = thisPerson->thisStepX - thisPerson->x;
    b9d6:	>-------------> movea.l 32(sp),a0
    b9da:	|               move.l 48(a0),d0
    b9de:	|               move.l d0,-(sp)
    b9e0:	|               jsr 1709a <__floatsisf>
    b9e6:	|               addq.l #4,sp
    b9e8:	|               move.l d0,d1
    b9ea:	|               movea.l 32(sp),a0
    b9ee:	|               move.l (a0),d0
    b9f0:	|               move.l d0,-(sp)
    b9f2:	|               move.l d1,-(sp)
    b9f4:	|               jsr 1738e <__subsf3>
    b9fa:	|               addq.l #8,sp
    b9fc:	|               move.l d0,20(sp)
		yDiff = (thisPerson->thisStepY - thisPerson->y) * 2;
    ba00:	|               movea.l 32(sp),a0
    ba04:	|               move.l 52(a0),d0
    ba08:	|               move.l d0,-(sp)
    ba0a:	|               jsr 1709a <__floatsisf>
    ba10:	|               addq.l #4,sp
    ba12:	|               move.l d0,d1
    ba14:	|               movea.l 32(sp),a0
    ba18:	|               move.l 4(a0),d0
    ba1c:	|               move.l d0,-(sp)
    ba1e:	|               move.l d1,-(sp)
    ba20:	|               jsr 1738e <__subsf3>
    ba26:	|               addq.l #8,sp
    ba28:	|               move.l d0,-(sp)
    ba2a:	|               move.l d0,-(sp)
    ba2c:	|               jsr 16e4c <__addsf3>
    ba32:	|               addq.l #8,sp
    ba34:	|               move.l d0,16(sp)
		s = thisPerson->scale * thisPerson->walkSpeed;
    ba38:	|               movea.l 32(sp),a0
    ba3c:	|               move.l 32(a0),d2
    ba40:	|               movea.l 32(sp),a0
    ba44:	|               move.l 28(a0),d0
    ba48:	|               move.l d0,-(sp)
    ba4a:	|               jsr 1709a <__floatsisf>
    ba50:	|               addq.l #4,sp
    ba52:	|               move.l d0,-(sp)
    ba54:	|               move.l d2,-(sp)
    ba56:	|               jsr 1714c <__mulsf3>
    ba5c:	|               addq.l #8,sp
    ba5e:	|               move.l d0,24(sp)
		if (s < 0.2) s = 0.2;
    ba62:	|               move.l 24(sp),-(sp)
    ba66:	|               jsr 16fb2 <__extendsfdf2>
    ba6c:	|               addq.l #4,sp
    ba6e:	|               move.l #-1717986918,-(sp)
    ba74:	|               move.l #1070176665,-(sp)
    ba7a:	|               move.l d1,-(sp)
    ba7c:	|               move.l d0,-(sp)
    ba7e:	|               jsr 17272 <__ltdf2>
    ba84:	|               lea 16(sp),sp
    ba88:	|               tst.l d0
    ba8a:	|           /-- bge.s ba94 <walkMe+0xde>
    ba8c:	|           |   move.l #1045220557,24(sp)

		maxDiff = (TF_abs(xDiff) >= TF_abs(yDiff)) ? TF_abs(xDiff) : TF_abs(yDiff);
    ba94:	|           \-> move.l 20(sp),-(sp)
    ba98:	|               jsr 17032 <__fixsfsi>
    ba9e:	|               addq.l #4,sp
    baa0:	|               move.l d0,-(sp)
    baa2:	|               jsr 8ce4 <TF_abs>
    baa8:	|               addq.l #4,sp
    baaa:	|               move.l d0,d2
    baac:	|               move.l 16(sp),-(sp)
    bab0:	|               jsr 17032 <__fixsfsi>
    bab6:	|               addq.l #4,sp
    bab8:	|               move.l d0,-(sp)
    baba:	|               jsr 8ce4 <TF_abs>
    bac0:	|               addq.l #4,sp
    bac2:	|               cmp.l d2,d0
    bac4:	|        /----- bgt.s bae8 <walkMe+0x132>
    bac6:	|        |      move.l 20(sp),-(sp)
    baca:	|        |      jsr 17032 <__fixsfsi>
    bad0:	|        |      addq.l #4,sp
    bad2:	|        |      move.l d0,-(sp)
    bad4:	|        |      jsr 8ce4 <TF_abs>
    bada:	|        |      addq.l #4,sp
    badc:	|        |      move.l d0,-(sp)
    bade:	|        |      jsr 1709a <__floatsisf>
    bae4:	|        |      addq.l #4,sp
    bae6:	|        |  /-- bra.s bb08 <walkMe+0x152>
    bae8:	|        \--|-> move.l 16(sp),-(sp)
    baec:	|           |   jsr 17032 <__fixsfsi>
    baf2:	|           |   addq.l #4,sp
    baf4:	|           |   move.l d0,-(sp)
    baf6:	|           |   jsr 8ce4 <TF_abs>
    bafc:	|           |   addq.l #4,sp
    bafe:	|           |   move.l d0,-(sp)
    bb00:	|           |   jsr 1709a <__floatsisf>
    bb06:	|           |   addq.l #4,sp
    bb08:	|           \-> move.l d0,12(sp)

		if (TF_abs(maxDiff) > s) {
    bb0c:	|               move.l 12(sp),-(sp)
    bb10:	|               jsr 17032 <__fixsfsi>
    bb16:	|               addq.l #4,sp
    bb18:	|               move.l d0,-(sp)
    bb1a:	|               jsr 8ce4 <TF_abs>
    bb20:	|               addq.l #4,sp
    bb22:	|               move.l d0,-(sp)
    bb24:	|               jsr 1709a <__floatsisf>
    bb2a:	|               addq.l #4,sp
    bb2c:	|               move.l d0,-(sp)
    bb2e:	|               move.l 28(sp),-(sp)
    bb32:	|               jsr 172c0 <__ltsf2>
    bb38:	|               addq.l #8,sp
    bb3a:	|               tst.l d0
    bb3c:	|        /----- bge.w bbee <walkMe+0x238>
			if (thisPerson->spinning) {
    bb40:	|        |      movea.l 32(sp),a0
    bb44:	|        |      move.w 66(a0),d0
    bb48:	|        |  /-- beq.s bb66 <walkMe+0x1b0>
				spinStep(thisPerson);
    bb4a:	|        |  |   move.l 32(sp),-(sp)
    bb4e:	|        |  |   jsr b756 <spinStep>
    bb54:	|        |  |   addq.l #4,sp
				setFrames(thisPerson, ANI_WALK);
    bb56:	|        |  |   pea 1 <_start+0x1>
    bb5a:	|        |  |   move.l 36(sp),-(sp)
    bb5e:	|        |  |   jsr 7a3e <setFrames>
    bb64:	|        |  |   addq.l #8,sp
			}
			s = maxDiff / s;
    bb66:	|        |  \-> move.l 24(sp),-(sp)
    bb6a:	|        |      move.l 16(sp),-(sp)
    bb6e:	|        |      jsr 16f46 <__divsf3>
    bb74:	|        |      addq.l #8,sp
    bb76:	|        |      move.l d0,24(sp)
			if (move)
    bb7a:	|        |      tst.w 10(sp)
    bb7e:	|        |  /-- beq.s bbe8 <walkMe+0x232>
				moveAndScale(thisPerson,
							 thisPerson->x + xDiff / s,
							 thisPerson->y + yDiff / (s * 2));
    bb80:	|        |  |   movea.l 32(sp),a0
    bb84:	|        |  |   move.l 4(a0),d2
    bb88:	|        |  |   move.l 24(sp),d0
    bb8c:	|        |  |   move.l d0,-(sp)
    bb8e:	|        |  |   move.l d0,-(sp)
    bb90:	|        |  |   jsr 16e4c <__addsf3>
    bb96:	|        |  |   addq.l #8,sp
    bb98:	|        |  |   move.l d0,-(sp)
    bb9a:	|        |  |   move.l 20(sp),-(sp)
    bb9e:	|        |  |   jsr 16f46 <__divsf3>
    bba4:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    bba6:	|        |  |   move.l d0,-(sp)
    bba8:	|        |  |   move.l d2,-(sp)
    bbaa:	|        |  |   jsr 16e4c <__addsf3>
    bbb0:	|        |  |   addq.l #8,sp
    bbb2:	|        |  |   move.l d0,d2
							 thisPerson->x + xDiff / s,
    bbb4:	|        |  |   movea.l 32(sp),a0
    bbb8:	|        |  |   move.l (a0),d3
    bbba:	|        |  |   move.l 24(sp),-(sp)
    bbbe:	|        |  |   move.l 24(sp),-(sp)
    bbc2:	|        |  |   jsr 16f46 <__divsf3>
    bbc8:	|        |  |   addq.l #8,sp
				moveAndScale(thisPerson,
    bbca:	|        |  |   move.l d0,-(sp)
    bbcc:	|        |  |   move.l d3,-(sp)
    bbce:	|        |  |   jsr 16e4c <__addsf3>
    bbd4:	|        |  |   addq.l #8,sp
    bbd6:	|        |  |   move.l d2,-(sp)
    bbd8:	|        |  |   move.l d0,-(sp)
    bbda:	|        |  |   move.l 40(sp),-(sp)
    bbde:	|        |  |   jsr a83c <moveAndScale>
    bbe4:	|        |  |   lea 12(sp),sp
			return TRUE;
    bbe8:	|        |  \-> moveq #1,d0
    bbea:	|  /-----|----- bra.w bc9c <walkMe+0x2e6>
		}

		if (thisPerson->inPoly == -1) {
    bbee:	|  |     \----> movea.l 32(sp),a0
    bbf2:	|  |            move.l 56(a0),d0
    bbf6:	|  |            moveq #-1,d1
    bbf8:	|  |            cmp.l d0,d1
    bbfa:	|  |        /-- bne.s bc32 <walkMe+0x27c>
			if (thisPerson->directionWhenDoneWalking != -1) {
    bbfc:	|  |        |   movea.l 32(sp),a0
    bc00:	|  |        |   move.l 110(a0),d0
    bc04:	|  |        |   moveq #-1,d1
    bc06:	|  |        |   cmp.l d0,d1
    bc08:	|  |  /-----|-- beq.s bc46 <walkMe+0x290>
				thisPerson->wantAngle = thisPerson->directionWhenDoneWalking;
    bc0a:	|  |  |     |   movea.l 32(sp),a0
    bc0e:	|  |  |     |   move.l 110(a0),d0
    bc12:	|  |  |     |   movea.l 32(sp),a0
    bc16:	|  |  |     |   move.l d0,96(a0)
				thisPerson->spinning = TRUE;
    bc1a:	|  |  |     |   movea.l 32(sp),a0
    bc1e:	|  |  |     |   move.w #1,66(a0)
				spinStep(thisPerson);
    bc24:	|  |  |     |   move.l 32(sp),-(sp)
    bc28:	|  |  |     |   jsr b756 <spinStep>
    bc2e:	|  |  |     |   addq.l #4,sp
			}
			break;
    bc30:	|  |  +-----|-- bra.s bc46 <walkMe+0x290>
		}
		if (!doBorderStuff(thisPerson)) break;
    bc32:	|  |  |     \-> move.l 32(sp),-(sp)
    bc36:	|  |  |         jsr 9456 <doBorderStuff>
    bc3c:	|  |  |         addq.l #4,sp
    bc3e:	|  |  |         tst.w d0
    bc40:	|  |  |  /----- beq.s bc4a <walkMe+0x294>
		xDiff = thisPerson->thisStepX - thisPerson->x;
    bc42:	\--|--|--|----- bra.w b9d6 <walkMe+0x20>
			break;
    bc46:	   |  \--|----> nop
    bc48:	   |     |  /-- bra.s bc4c <walkMe+0x296>
		if (!doBorderStuff(thisPerson)) break;
    bc4a:	   |     \--|-> nop
	}

	thisPerson->walking = FALSE;
    bc4c:	   |        \-> movea.l 32(sp),a0
    bc50:	   |            clr.w 64(a0)
	setFrames(thisPerson, ANI_STAND);
    bc54:	   |            clr.l -(sp)
    bc56:	   |            move.l 36(sp),-(sp)
    bc5a:	   |            jsr 7a3e <setFrames>
    bc60:	   |            addq.l #8,sp
	moveAndScale(thisPerson,
				 thisPerson->walkToX,
				 thisPerson->walkToY);
    bc62:	   |            movea.l 32(sp),a0
    bc66:	   |            move.l 44(a0),d0
	moveAndScale(thisPerson,
    bc6a:	   |            move.l d0,-(sp)
    bc6c:	   |            jsr 1709a <__floatsisf>
    bc72:	   |            addq.l #4,sp
    bc74:	   |            move.l d0,d2
				 thisPerson->walkToX,
    bc76:	   |            movea.l 32(sp),a0
    bc7a:	   |            move.l 40(a0),d0
	moveAndScale(thisPerson,
    bc7e:	   |            move.l d0,-(sp)
    bc80:	   |            jsr 1709a <__floatsisf>
    bc86:	   |            addq.l #4,sp
    bc88:	   |            move.l d2,-(sp)
    bc8a:	   |            move.l d0,-(sp)
    bc8c:	   |            move.l 40(sp),-(sp)
    bc90:	   |            jsr a83c <moveAndScale>
    bc96:	   |            lea 12(sp),sp
	return FALSE;
    bc9a:	   |            clr.w d0
}
    bc9c:	   \----------> move.l (sp)+,d2
    bc9e:	                move.l (sp)+,d3
    bca0:	                lea 20(sp),sp
    bca4:	                rts

0000bca6 <clearStackLib>:
};

int stackLibTotal = 0;
struct stackLibrary * stackLib = NULL;

void clearStackLib () {
    bca6:	       subq.l #8,sp
    bca8:	       move.l a6,-(sp)
	struct stackLibrary * k;
	while (stackLib) {
    bcaa:	   /-- bra.s bcda <clearStackLib+0x34>
		k = stackLib;
    bcac:	/--|-> move.l 1a888 <stackLib>,8(sp)
		stackLib = stackLib -> next;
    bcb4:	|  |   movea.l 1a888 <stackLib>,a0
    bcba:	|  |   move.l 4(a0),d0
    bcbe:	|  |   move.l d0,1a888 <stackLib>
		FreeVec(k);
    bcc4:	|  |   move.l 8(sp),4(sp)
    bcca:	|  |   move.l 1a7a4 <SysBase>,d0
    bcd0:	|  |   movea.l d0,a6
    bcd2:	|  |   movea.l 4(sp),a1
    bcd6:	|  |   jsr -690(a6)
	while (stackLib) {
    bcda:	|  \-> move.l 1a888 <stackLib>,d0
    bce0:	\----- bne.s bcac <clearStackLib+0x6>
	}
	stackLibTotal = 0;
    bce2:	       clr.l 1a884 <stackLibTotal>
}
    bce8:	       nop
    bcea:	       movea.l (sp)+,a6
    bcec:	       addq.l #8,sp
    bcee:	       rts

0000bcf0 <loadGame>:
	}

	return buildFunc;
}

BOOL loadGame (char * fname) {
    bcf0:	          lea -128(sp),sp
    bcf4:	          movem.l d2-d3/a6,-(sp)
	BPTR fp;
	FILETIME savedGameTime;
	int a;

	while (allRunningFunctions) finishFunction (allRunningFunctions);
    bcf8:	      /-- bra.s bd0a <loadGame+0x1a>
    bcfa:	   /--|-> move.l 1a73c <allRunningFunctions>,d0
    bd00:	   |  |   move.l d0,-(sp)
    bd02:	   |  |   jsr 4ffc <finishFunction>
    bd08:	   |  |   addq.l #4,sp
    bd0a:	   |  \-> move.l 1a73c <allRunningFunctions>,d0
    bd10:	   \----- bne.s bcfa <loadGame+0xa>

	fp = openAndVerify (fname, 'S', 'A', ERROR_GAME_LOAD_NO, &ssgVersion);
    bd12:	          pea 1a88c <ssgVersion>
    bd18:	          pea 18c8c <PutChar+0x155a>
    bd1e:	          pea 41 <_start+0x41>
    bd22:	          pea 53 <_start+0x53>
    bd26:	          move.l 160(sp),-(sp)
    bd2a:	          jsr 5db2 <openAndVerify>
    bd30:	          lea 20(sp),sp
    bd34:	          move.l d0,112(sp)
	if (fp == NULL) return FALSE;
    bd38:	      /-- bne.s bd40 <loadGame+0x50>
    bd3a:	      |   clr.w d0
    bd3c:	/-----|-- bra.w bfe6 <loadGame+0x2f6>

	unsigned int bytes_read = Read( fp, &savedGameTime, sizeof (FILETIME));
    bd40:	|     \-> move.l 112(sp),108(sp)
    bd46:	|         lea 140(sp),a0
    bd4a:	|         lea -126(a0),a0
    bd4e:	|         move.l a0,120(sp)
    bd52:	|         moveq #8,d0
    bd54:	|         move.l d0,116(sp)
    bd58:	|         move.l 1a7ac <DOSBase>,d0
    bd5e:	|         movea.l d0,a6
    bd60:	|         move.l 108(sp),d1
    bd64:	|         move.l 120(sp),d2
    bd68:	|         move.l 116(sp),d3
    bd6c:	|         jsr -42(a6)
    bd70:	|         move.l d0,132(sp)
    bd74:	|         move.l 132(sp),d0
    bd78:	|         move.l d0,128(sp)
	
	if (bytes_read != sizeof (FILETIME)) {
    bd7c:	|         moveq #8,d0
    bd7e:	|         cmp.l 128(sp),d0
    bd82:	|     /-- beq.s bd92 <loadGame+0xa2>
		KPrintF("Reading error in loadGame.\n");
    bd84:	|     |   pea 18cad <PutChar+0x157b>
    bd8a:	|     |   jsr 16c5e <KPrintF>
    bd90:	|     |   addq.l #4,sp
	}

	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    bd92:	|     \-> move.l 14(sp),d1
    bd96:	|         move.l 1a746 <fileTime>,d0
    bd9c:	|         cmp.l d1,d0
    bd9e:	|     /-- bne.s bdae <loadGame+0xbe>
		savedGameTime.dwHighDateTime != fileTime.dwHighDateTime) {
    bda0:	|     |   move.l 18(sp),d1
    bda4:	|     |   move.l 1a74a <fileTime+0x4>,d0
	if (savedGameTime.dwLowDateTime != fileTime.dwLowDateTime ||
    bdaa:	|     |   cmp.l d1,d0
    bdac:	|  /--|-- beq.s bdce <loadGame+0xde>
		KPrintF("loadgame:", ERROR_GAME_LOAD_WRONG, fname);
    bdae:	|  |  \-> move.l 144(sp),-(sp)
    bdb2:	|  |      pea 18cc9 <PutChar+0x1597>
    bdb8:	|  |      pea 18d90 <PutChar+0x165e>
    bdbe:	|  |      jsr 16c5e <KPrintF>
    bdc4:	|  |      lea 12(sp),sp
		return FALSE; 
    bdc8:	|  |      clr.w d0
    bdca:	+--|----- bra.w bfe6 <loadGame+0x2f6>
	}

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	allowAnyFilename = FGetC (fp);
    bdce:	|  \----> move.l 112(sp),124(sp)
    bdd4:	|         move.l 1a7ac <DOSBase>,d0
    bdda:	|         movea.l d0,a6
    bddc:	|         move.l 124(sp),d1
    bde0:	|         jsr -306(a6)
    bde4:	|         move.l d0,136(sp)
    bde8:	|         move.l 136(sp),d0
    bdec:	|         move.l d0,d0
    bdee:	|         move.w d0,1a000 <allowAnyFilename>
	captureAllKeys = FGetC (fp);
    bdf4:	|         move.l 112(sp),100(sp)
    bdfa:	|         move.l 1a7ac <DOSBase>,d0
    be00:	|         movea.l d0,a6
    be02:	|         move.l 100(sp),d1
    be06:	|         jsr -306(a6)
    be0a:	|         move.l d0,96(sp)
    be0e:	|         move.l 96(sp),d0
    be12:	|         move.l d0,d0
    be14:	|         move.w d0,1a744 <captureAllKeys>
	FGetC (fp); // updateDisplay (part of movie playing)
    be1a:	|         move.l 112(sp),92(sp)
    be20:	|         move.l 1a7ac <DOSBase>,d0
    be26:	|         movea.l d0,a6
    be28:	|         move.l 92(sp),d1
    be2c:	|         jsr -306(a6)
    be30:	|         move.l d0,88(sp)

	BOOL fontLoaded = FGetC (fp);
    be34:	|         move.l 112(sp),84(sp)
    be3a:	|         move.l 1a7ac <DOSBase>,d0
    be40:	|         movea.l d0,a6
    be42:	|         move.l 84(sp),d1
    be46:	|         jsr -306(a6)
    be4a:	|         move.l d0,80(sp)
    be4e:	|         move.l 80(sp),d0
    be52:	|         move.w d0,78(sp)
	int fontNum;
	char * charOrder;
	if (fontLoaded) {
    be56:	|     /-- beq.s be8a <loadGame+0x19a>
		fontNum = get2bytes (fp);
    be58:	|     |   move.l 112(sp),-(sp)
    be5c:	|     |   jsr 6bc <get2bytes>
    be62:	|     |   addq.l #4,sp
    be64:	|     |   move.l d0,74(sp)
		fontHeight = get2bytes (fp);		
    be68:	|     |   move.l 112(sp),-(sp)
    be6c:	|     |   jsr 6bc <get2bytes>
    be72:	|     |   addq.l #4,sp
    be74:	|     |   move.l d0,1a8f0 <fontHeight>
		charOrder = readString(fp);		
    be7a:	|     |   move.l 112(sp),-(sp)
    be7e:	|     |   jsr b02 <readString>
    be84:	|     |   addq.l #4,sp
    be86:	|     |   move.l d0,104(sp)
	}
	//loadFont (fontNum, charOrder, fontHeight); Amiga Todo: Implement Graphics stuff
	FreeVec(charOrder);
    be8a:	|     \-> move.l 104(sp),70(sp)
    be90:	|         move.l 1a7a4 <SysBase>,d0
    be96:	|         movea.l d0,a6
    be98:	|         movea.l 70(sp),a1
    be9c:	|         jsr -690(a6)
	
	fontSpace = getSigned (fp);
    bea0:	|         move.l 112(sp),-(sp)
    bea4:	|         jsr 854 <getSigned>
    beaa:	|         addq.l #4,sp
    beac:	|         move.w d0,1a6a8 <fontSpace>

	killAllPeople ();
    beb2:	|         jsr a4de <killAllPeople>
	killAllRegions ();
    beb8:	|         jsr 154ae <killAllRegions>

	int camerX = get2bytes (fp);
    bebe:	|         move.l 112(sp),-(sp)
    bec2:	|         jsr 6bc <get2bytes>
    bec8:	|         addq.l #4,sp
    beca:	|         move.l d0,66(sp)
	int camerY = get2bytes (fp);
    bece:	|         move.l 112(sp),-(sp)
    bed2:	|         jsr 6bc <get2bytes>
    bed8:	|         addq.l #4,sp
    beda:	|         move.l d0,62(sp)
	FLOAT camerZ;
	camerZ = getFloat(fp);
    bede:	|         move.l 112(sp),-(sp)
    bee2:	|         jsr 7d8 <getFloat>
    bee8:	|         addq.l #4,sp
    beea:	|         move.l d0,58(sp)

	brightnessLevel = FGetC (fp);
    beee:	|         move.l 112(sp),54(sp)
    bef4:	|         move.l 1a7ac <DOSBase>,d0
    befa:	|         movea.l d0,a6
    befc:	|         move.l 54(sp),d1
    bf00:	|         jsr -306(a6)
    bf04:	|         move.l d0,50(sp)
    bf08:	|         move.l 50(sp),d0
    bf0c:	|         move.l d0,d0
    bf0e:	|         move.b d0,1a11a <brightnessLevel>

	loadHandlers (fp);
    bf14:	|         move.l 112(sp),-(sp)
    bf18:	|         jsr 5d12 <loadHandlers>
    bf1e:	|         addq.l #4,sp
	loadRegions (fp);
    bf20:	|         move.l 112(sp),-(sp)
    bf24:	|         jsr 1550a <loadRegions>
    bf2a:	|         addq.l #4,sp

	mouseCursorAnim = AllocVec( sizeof( struct personaAnimation), MEMF_ANY);
    bf2c:	|         moveq #12,d0
    bf2e:	|         move.l d0,46(sp)
    bf32:	|         clr.l 42(sp)
    bf36:	|         move.l 1a7a4 <SysBase>,d0
    bf3c:	|         movea.l d0,a6
    bf3e:	|         move.l 46(sp),d0
    bf42:	|         move.l 42(sp),d1
    bf46:	|         jsr -684(a6)
    bf4a:	|         move.l d0,38(sp)
    bf4e:	|         move.l 38(sp),d0
    bf52:	|         move.l d0,1a6aa <mouseCursorAnim>
	if (! mouseCursorAnim) {
    bf58:	|         move.l 1a6aa <mouseCursorAnim>,d0
    bf5e:	|     /-- bne.s bf72 <loadGame+0x282>
		KPrintF("loadGame: Cannot allocate memory");
    bf60:	|     |   pea 18d9a <PutChar+0x1668>
    bf66:	|     |   jsr 16c5e <KPrintF>
    bf6c:	|     |   addq.l #4,sp
		return FALSE;
    bf6e:	|     |   clr.w d0
    bf70:	+-----|-- bra.s bfe6 <loadGame+0x2f6>
			languageNum = selectedLanguage;
			setFileIndices (NULL, gameSettings.numLanguages, languageNum);
		}
	}

	nosnapshot ();
    bf72:	|     \-> jsr ce64 <nosnapshot>
	if (FGetC (fp)) {
    bf78:	|         move.l 112(sp),34(sp)
    bf7e:	|         move.l 1a7ac <DOSBase>,d0
    bf84:	|         movea.l d0,a6
    bf86:	|         move.l 34(sp),d1
    bf8a:	|         jsr -306(a6)
    bf8e:	|         move.l d0,30(sp)
    bf92:	|         move.l 30(sp),d0
    bf96:	|     /-- beq.s bfac <loadGame+0x2bc>
		if (! restoreSnapshot (fp)) return FALSE;
    bf98:	|     |   move.l 112(sp),-(sp)
    bf9c:	|     |   jsr cee4 <restoreSnapshot>
    bfa2:	|     |   addq.l #4,sp
    bfa4:	|     |   tst.w d0
    bfa6:	|     +-- bne.s bfac <loadGame+0x2bc>
    bfa8:	|     |   clr.w d0
    bfaa:	+-----|-- bra.s bfe6 <loadGame+0x2f6>
	}

	Close (fp);
    bfac:	|     \-> move.l 112(sp),26(sp)
    bfb2:	|         move.l 1a7ac <DOSBase>,d0
    bfb8:	|         movea.l d0,a6
    bfba:	|         move.l 26(sp),d1
    bfbe:	|         jsr -36(a6)
    bfc2:	|         move.l d0,22(sp)
	clearStackLib ();
    bfc6:	|         jsr bca6 <clearStackLib>

	cameraX = camerX;
    bfcc:	|         move.l 66(sp),1a8b2 <cameraX>
	cameraY = camerY;
    bfd4:	|         move.l 62(sp),1a8b6 <cameraY>
	cameraZoom = camerZ;
    bfdc:	|         move.l 58(sp),1a142 <cameraZoom>

	return TRUE;
    bfe4:	|         moveq #1,d0
}
    bfe6:	\-------> movem.l (sp)+,d2-d3/a6
    bfea:	          lea 128(sp),sp
    bfee:	          rts

0000bff0 <saveFunction>:

void saveFunction (struct loadedFunction * fun, BPTR fp) {
    bff0:	   /-> lea -64(sp),sp
    bff4:	   |   move.l a6,-(sp)
    bff6:	   |   move.l d2,-(sp)
	int a;
	put2bytes (fun -> originalNumber, fp);
    bff8:	   |   movea.l 76(sp),a0
    bffc:	   |   move.l (a0),d0
    bffe:	   |   move.l 80(sp),-(sp)
    c002:	   |   move.l d0,-(sp)
    c004:	   |   jsr 8d0 <put2bytes>
    c00a:	   |   addq.l #8,sp
	if (fun -> calledBy) {
    c00c:	   |   movea.l 76(sp),a0
    c010:	   |   move.l 40(a0),d0
    c014:	/--|-- beq.s c050 <saveFunction+0x60>
		FPutC (fp, 1);
    c016:	|  |   move.l 80(sp),52(sp)
    c01c:	|  |   moveq #1,d0
    c01e:	|  |   move.l d0,48(sp)
    c022:	|  |   move.l 1a7ac <DOSBase>,d0
    c028:	|  |   movea.l d0,a6
    c02a:	|  |   move.l 52(sp),d1
    c02e:	|  |   move.l 48(sp),d2
    c032:	|  |   jsr -312(a6)
    c036:	|  |   move.l d0,44(sp)
		saveFunction (fun -> calledBy, fp);
    c03a:	|  |   movea.l 76(sp),a0
    c03e:	|  |   move.l 40(a0),d0
    c042:	|  |   move.l 80(sp),-(sp)
    c046:	|  |   move.l d0,-(sp)
    c048:	|  \-- jsr bff0 <saveFunction>(pc)
    c04c:	|      addq.l #8,sp
    c04e:	|  /-- bra.s c072 <saveFunction+0x82>
	} else {
		FPutC (fp, 0);
    c050:	\--|-> move.l 80(sp),64(sp)
    c056:	   |   clr.l 60(sp)
    c05a:	   |   move.l 1a7ac <DOSBase>,d0
    c060:	   |   movea.l d0,a6
    c062:	   |   move.l 64(sp),d1
    c066:	   |   move.l 60(sp),d2
    c06a:	   |   jsr -312(a6)
    c06e:	   |   move.l d0,56(sp)
	}
	put4bytes (fun -> timeLeft, fp);
    c072:	   \-> movea.l 76(sp),a0
    c076:	       move.l 12(a0),d0
    c07a:	       move.l 80(sp),-(sp)
    c07e:	       move.l d0,-(sp)
    c080:	       jsr 958 <put4bytes>
    c086:	       addq.l #8,sp
	put2bytes (fun -> runThisLine, fp);
    c088:	       movea.l 76(sp),a0
    c08c:	       move.l 36(a0),d0
    c090:	       move.l 80(sp),-(sp)
    c094:	       move.l d0,-(sp)
    c096:	       jsr 8d0 <put2bytes>
    c09c:	       addq.l #8,sp
	FPutC (fp, fun -> cancelMe);
    c09e:	       move.l 80(sp),40(sp)
    c0a4:	       movea.l 76(sp),a0
    c0a8:	       move.w 54(a0),d0
    c0ac:	       movea.w d0,a0
    c0ae:	       move.l a0,36(sp)
    c0b2:	       move.l 1a7ac <DOSBase>,d0
    c0b8:	       movea.l d0,a6
    c0ba:	       move.l 40(sp),d1
    c0be:	       move.l 36(sp),d2
    c0c2:	       jsr -312(a6)
    c0c6:	       move.l d0,32(sp)
	FPutC (fp, fun -> returnSomething);
    c0ca:	       move.l 80(sp),28(sp)
    c0d0:	       movea.l 76(sp),a0
    c0d4:	       move.w 48(a0),d0
    c0d8:	       movea.w d0,a0
    c0da:	       move.l a0,24(sp)
    c0de:	       move.l 1a7ac <DOSBase>,d0
    c0e4:	       movea.l d0,a6
    c0e6:	       move.l 28(sp),d1
    c0ea:	       move.l 24(sp),d2
    c0ee:	       jsr -312(a6)
    c0f2:	       move.l d0,20(sp)
	FPutC (fp, fun -> isSpeech);
    c0f6:	       move.l 80(sp),16(sp)
    c0fc:	       movea.l 76(sp),a0
    c100:	       move.w 50(a0),d0
    c104:	       movea.w d0,a0
    c106:	       move.l a0,12(sp)
    c10a:	       move.l 1a7ac <DOSBase>,d0
    c110:	       movea.l d0,a6
    c112:	       move.l 16(sp),d1
    c116:	       move.l 12(sp),d2
    c11a:	       jsr -312(a6)
    c11e:	       move.l d0,8(sp)
	saveVariable (&fun -> reg, fp);
    c122:	       moveq #28,d0
    c124:	       add.l 76(sp),d0
    c128:	       move.l 80(sp),-(sp)
    c12c:	       move.l d0,-(sp)
    c12e:	       jsr c8ac <saveVariable>
    c134:	       addq.l #8,sp

	if (fun -> freezerLevel) {
    c136:	       movea.l 76(sp),a0
    c13a:	       move.b 56(a0),d0
    c13e:	   /-- beq.s c14e <saveFunction+0x15e>
		KPrintF(ERROR_GAME_SAVE_FROZEN);		
    c140:	   |   pea 18dbb <PutChar+0x1689>
    c146:	   |   jsr 16c5e <KPrintF>
    c14c:	   |   addq.l #4,sp
	}
	saveStack (fun -> stack, fp);
    c14e:	   \-> movea.l 76(sp),a0
    c152:	       move.l 24(a0),d0
    c156:	       move.l 80(sp),-(sp)
    c15a:	       move.l d0,-(sp)
    c15c:	       jsr c720 <saveStack>
    c162:	       addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c164:	       clr.l 68(sp)
    c168:	   /-- bra.s c18c <saveFunction+0x19c>
		saveVariable (& (fun -> localVars[a]), fp);
    c16a:	/--|-> movea.l 76(sp),a0
    c16e:	|  |   move.l 20(a0),d1
    c172:	|  |   move.l 68(sp),d0
    c176:	|  |   lsl.l #3,d0
    c178:	|  |   add.l d1,d0
    c17a:	|  |   move.l 80(sp),-(sp)
    c17e:	|  |   move.l d0,-(sp)
    c180:	|  |   jsr c8ac <saveVariable>
    c186:	|  |   addq.l #8,sp
	for (a = 0; a < fun -> numLocals; a ++) {
    c188:	|  |   addq.l #1,68(sp)
    c18c:	|  \-> movea.l 76(sp),a0
    c190:	|      move.l 8(a0),d0
    c194:	|      cmp.l 68(sp),d0
    c198:	\----- bgt.s c16a <saveFunction+0x17a>
	}
}
    c19a:	       nop
    c19c:	       nop
    c19e:	       move.l (sp)+,d2
    c1a0:	       movea.l (sp)+,a6
    c1a2:	       lea 64(sp),sp
    c1a6:	       rts

0000c1a8 <saveGame>:

BOOL saveGame (char * fname) {
    c1a8:	          lea -272(sp),sp
    c1ac:	          movem.l d2-d3/a6,-(sp)
	int a;

	BPTR fp = Open( fname, MODE_NEWFILE);
    c1b0:	          move.l 288(sp),268(sp)
    c1b6:	          move.l #1006,264(sp)
    c1be:	          move.l 1a7ac <DOSBase>,d0
    c1c4:	          movea.l d0,a6
    c1c6:	          move.l 268(sp),d1
    c1ca:	          move.l 264(sp),d2
    c1ce:	          jsr -30(a6)
    c1d2:	          move.l d0,260(sp)
    c1d6:	          move.l 260(sp),d0
    c1da:	          move.l d0,256(sp)
	if (fp == NULL) {
    c1de:	      /-- bne.s c1f4 <saveGame+0x4c>
		KPrintF("saveGame: Cannot create file");
    c1e0:	      |   pea 18ddd <PutChar+0x16ab>
    c1e6:	      |   jsr 16c5e <KPrintF>
    c1ec:	      |   addq.l #4,sp
		return FALSE;
    c1ee:	      |   clr.w d0
    c1f0:	/-----|-- bra.w c716 <saveGame+0x56e>
	}

	Write( fp, &"SLUDSA", 6);
    c1f4:	|     \-> move.l 256(sp),252(sp)
    c1fa:	|         move.l #101882,248(sp)
    c202:	|         moveq #6,d0
    c204:	|         move.l d0,244(sp)
    c208:	|         move.l 1a7ac <DOSBase>,d0
    c20e:	|         movea.l d0,a6
    c210:	|         move.l 252(sp),d1
    c214:	|         move.l 248(sp),d2
    c218:	|         move.l 244(sp),d3
    c21c:	|         jsr -48(a6)
    c220:	|         move.l d0,240(sp)
	FPutC (fp, 0);
    c224:	|         move.l 256(sp),236(sp)
    c22a:	|         clr.l 232(sp)
    c22e:	|         move.l 1a7ac <DOSBase>,d0
    c234:	|         movea.l d0,a6
    c236:	|         move.l 236(sp),d1
    c23a:	|         move.l 232(sp),d2
    c23e:	|         jsr -312(a6)
    c242:	|         move.l d0,228(sp)
	FPutC (fp, 0);
    c246:	|         move.l 256(sp),224(sp)
    c24c:	|         clr.l 220(sp)
    c250:	|         move.l 1a7ac <DOSBase>,d0
    c256:	|         movea.l d0,a6
    c258:	|         move.l 224(sp),d1
    c25c:	|         move.l 220(sp),d2
    c260:	|         jsr -312(a6)
    c264:	|         move.l d0,216(sp)
	FPutC (fp, MAJOR_VERSION);
    c268:	|         move.l 256(sp),212(sp)
    c26e:	|         moveq #2,d0
    c270:	|         move.l d0,208(sp)
    c274:	|         move.l 1a7ac <DOSBase>,d0
    c27a:	|         movea.l d0,a6
    c27c:	|         move.l 212(sp),d1
    c280:	|         move.l 208(sp),d2
    c284:	|         jsr -312(a6)
    c288:	|         move.l d0,204(sp)
	FPutC (fp, MINOR_VERSION);
    c28c:	|         move.l 256(sp),200(sp)
    c292:	|         moveq #2,d0
    c294:	|         move.l d0,196(sp)
    c298:	|         move.l 1a7ac <DOSBase>,d0
    c29e:	|         movea.l d0,a6
    c2a0:	|         move.l 200(sp),d1
    c2a4:	|         move.l 196(sp),d2
    c2a8:	|         jsr -312(a6)
    c2ac:	|         move.l d0,192(sp)

	Write ( fp, &fileTime, sizeof(FILETIME));
    c2b0:	|         move.l 256(sp),188(sp)
    c2b6:	|         move.l #108358,184(sp)
    c2be:	|         moveq #8,d0
    c2c0:	|         move.l d0,180(sp)
    c2c4:	|         move.l 1a7ac <DOSBase>,d0
    c2ca:	|         movea.l d0,a6
    c2cc:	|         move.l 188(sp),d1
    c2d0:	|         move.l 184(sp),d2
    c2d4:	|         move.l 180(sp),d3
    c2d8:	|         jsr -48(a6)
    c2dc:	|         move.l d0,176(sp)

	// DON'T ADD ANYTHING NEW BEFORE THIS POINT!

	FPutC (fp, allowAnyFilename);
    c2e0:	|         move.l 256(sp),172(sp)
    c2e6:	|         move.w 1a000 <allowAnyFilename>,d0
    c2ec:	|         movea.w d0,a0
    c2ee:	|         move.l a0,168(sp)
    c2f2:	|         move.l 1a7ac <DOSBase>,d0
    c2f8:	|         movea.l d0,a6
    c2fa:	|         move.l 172(sp),d1
    c2fe:	|         move.l 168(sp),d2
    c302:	|         jsr -312(a6)
    c306:	|         move.l d0,164(sp)
	FPutC (fp, captureAllKeys);
    c30a:	|         move.l 256(sp),160(sp)
    c310:	|         move.w 1a744 <captureAllKeys>,d0
    c316:	|         movea.w d0,a0
    c318:	|         move.l a0,156(sp)
    c31c:	|         move.l 1a7ac <DOSBase>,d0
    c322:	|         movea.l d0,a6
    c324:	|         move.l 160(sp),d1
    c328:	|         move.l 156(sp),d2
    c32c:	|         jsr -312(a6)
    c330:	|         move.l d0,152(sp)
	FPutC (fp, TRUE); // updateDisplay
    c334:	|         move.l 256(sp),148(sp)
    c33a:	|         moveq #1,d0
    c33c:	|         move.l d0,144(sp)
    c340:	|         move.l 1a7ac <DOSBase>,d0
    c346:	|         movea.l d0,a6
    c348:	|         move.l 148(sp),d1
    c34c:	|         move.l 144(sp),d2
    c350:	|         jsr -312(a6)
    c354:	|         move.l d0,140(sp)
	FPutC (fp, fontTableSize>0);
    c358:	|         move.l 256(sp),136(sp)
    c35e:	|         move.l 1a900 <fontTableSize>,d0
    c364:	|         sgt d0
    c366:	|         neg.b d0
    c368:	|         move.b d0,d0
    c36a:	|         andi.l #255,d0
    c370:	|         move.l d0,132(sp)
    c374:	|         move.l 1a7ac <DOSBase>,d0
    c37a:	|         movea.l d0,a6
    c37c:	|         move.l 136(sp),d1
    c380:	|         move.l 132(sp),d2
    c384:	|         jsr -312(a6)
    c388:	|         move.l d0,128(sp)

	if (fontTableSize>0) {
    c38c:	|         move.l 1a900 <fontTableSize>,d0
    c392:	|     /-- ble.s c3d0 <saveGame+0x228>
		put2bytes (loadedFontNum, fp);
    c394:	|     |   move.l 1a8f4 <loadedFontNum>,d0
    c39a:	|     |   move.l 256(sp),-(sp)
    c39e:	|     |   move.l d0,-(sp)
    c3a0:	|     |   jsr 8d0 <put2bytes>
    c3a6:	|     |   addq.l #8,sp
		put2bytes (fontHeight, fp);
    c3a8:	|     |   move.l 1a8f0 <fontHeight>,d0
    c3ae:	|     |   move.l 256(sp),-(sp)
    c3b2:	|     |   move.l d0,-(sp)
    c3b4:	|     |   jsr 8d0 <put2bytes>
    c3ba:	|     |   addq.l #8,sp
		writeString(fontOrderString, fp);
    c3bc:	|     |   move.l 1a8f8 <fontOrderString>,d0
    c3c2:	|     |   move.l 256(sp),-(sp)
    c3c6:	|     |   move.l d0,-(sp)
    c3c8:	|     |   jsr bd8 <writeString>
    c3ce:	|     |   addq.l #8,sp
	}
	putSigned (fontSpace, fp);
    c3d0:	|     \-> move.w 1a6a8 <fontSpace>,d0
    c3d6:	|         movea.w d0,a0
    c3d8:	|         move.l 256(sp),-(sp)
    c3dc:	|         move.l a0,-(sp)
    c3de:	|         jsr a9c <putSigned>
    c3e4:	|         addq.l #8,sp

	// Save backdrop
	put2bytes (cameraX, fp);
    c3e6:	|         move.l 1a8b2 <cameraX>,d0
    c3ec:	|         move.l 256(sp),-(sp)
    c3f0:	|         move.l d0,-(sp)
    c3f2:	|         jsr 8d0 <put2bytes>
    c3f8:	|         addq.l #8,sp
	put2bytes (cameraY, fp);
    c3fa:	|         move.l 1a8b6 <cameraY>,d0
    c400:	|         move.l 256(sp),-(sp)
    c404:	|         move.l d0,-(sp)
    c406:	|         jsr 8d0 <put2bytes>
    c40c:	|         addq.l #8,sp
	putFloat(cameraZoom, fp);
    c40e:	|         move.l 1a142 <cameraZoom>,d0
    c414:	|         move.l 256(sp),-(sp)
    c418:	|         move.l d0,-(sp)
    c41a:	|         jsr a46 <putFloat>
    c420:	|         addq.l #8,sp

	FPutC (fp, brightnessLevel);
    c422:	|         move.l 256(sp),124(sp)
    c428:	|         move.b 1a11a <brightnessLevel>,d0
    c42e:	|         move.b d0,d0
    c430:	|         andi.l #255,d0
    c436:	|         move.l d0,120(sp)
    c43a:	|         move.l 1a7ac <DOSBase>,d0
    c440:	|         movea.l d0,a6
    c442:	|         move.l 124(sp),d1
    c446:	|         move.l 120(sp),d2
    c44a:	|         jsr -312(a6)
    c44e:	|         move.l d0,116(sp)

	// Save event handlers
	saveHandlers (fp);
    c452:	|         move.l 256(sp),-(sp)
    c456:	|         jsr 6296 <saveHandlers>
    c45c:	|         addq.l #4,sp

	// Save regions
	saveRegions (fp);
    c45e:	|         move.l 256(sp),-(sp)
    c462:	|         jsr 156c4 <saveRegions>
    c468:	|         addq.l #4,sp

	saveAnim (mouseCursorAnim, fp);
    c46a:	|         move.l 1a6aa <mouseCursorAnim>,d0
    c470:	|         move.l 256(sp),-(sp)
    c474:	|         move.l d0,-(sp)
    c476:	|         jsr aa50 <saveAnim>
    c47c:	|         addq.l #8,sp
	put2bytes (mouseCursorFrameNum, fp);
    c47e:	|         move.l 1a6ae <mouseCursorFrameNum>,d0
    c484:	|         move.l 256(sp),-(sp)
    c488:	|         move.l d0,-(sp)
    c48a:	|         jsr 8d0 <put2bytes>
    c490:	|         addq.l #8,sp

	// Save functions
	struct loadedFunction * thisFunction = allRunningFunctions;
    c492:	|         move.l 1a73c <allRunningFunctions>,276(sp)
	int countFunctions = 0;
    c49a:	|         clr.l 272(sp)
	while (thisFunction) {
    c49e:	|     /-- bra.s c4ae <saveGame+0x306>
		countFunctions ++;
    c4a0:	|  /--|-> addq.l #1,272(sp)
		thisFunction = thisFunction -> next;
    c4a4:	|  |  |   movea.l 276(sp),a0
    c4a8:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    c4ae:	|  |  \-> tst.l 276(sp)
    c4b2:	|  \----- bne.s c4a0 <saveGame+0x2f8>
	}
	put2bytes (countFunctions, fp);
    c4b4:	|         move.l 256(sp),-(sp)
    c4b8:	|         move.l 276(sp),-(sp)
    c4bc:	|         jsr 8d0 <put2bytes>
    c4c2:	|         addq.l #8,sp

	thisFunction = allRunningFunctions;
    c4c4:	|         move.l 1a73c <allRunningFunctions>,276(sp)
	while (thisFunction) {
    c4cc:	|     /-- bra.s c4e8 <saveGame+0x340>
		saveFunction (thisFunction, fp);
    c4ce:	|  /--|-> move.l 256(sp),-(sp)
    c4d2:	|  |  |   move.l 280(sp),-(sp)
    c4d6:	|  |  |   jsr bff0 <saveFunction>
    c4dc:	|  |  |   addq.l #8,sp
		thisFunction = thisFunction -> next;
    c4de:	|  |  |   movea.l 276(sp),a0
    c4e2:	|  |  |   move.l 44(a0),276(sp)
	while (thisFunction) {
    c4e8:	|  |  \-> tst.l 276(sp)
    c4ec:	|  \----- bne.s c4ce <saveGame+0x326>
	}

	for (a = 0; a < numGlobals; a ++) {
    c4ee:	|         clr.l 280(sp)
    c4f2:	|     /-- bra.s c514 <saveGame+0x36c>
		saveVariable (& globalVars[a], fp);
    c4f4:	|  /--|-> move.l 1a752 <globalVars>,d1
    c4fa:	|  |  |   move.l 280(sp),d0
    c4fe:	|  |  |   lsl.l #3,d0
    c500:	|  |  |   add.l d1,d0
    c502:	|  |  |   move.l 256(sp),-(sp)
    c506:	|  |  |   move.l d0,-(sp)
    c508:	|  |  |   jsr c8ac <saveVariable>
    c50e:	|  |  |   addq.l #8,sp
	for (a = 0; a < numGlobals; a ++) {
    c510:	|  |  |   addq.l #1,280(sp)
    c514:	|  |  \-> move.l 1a77c <numGlobals>,d0
    c51a:	|  |      cmp.l 280(sp),d0
    c51e:	|  \----- bgt.s c4f4 <saveGame+0x34c>
	}

	savePeople (fp);
    c520:	|         move.l 256(sp),-(sp)
    c524:	|         jsr ab78 <savePeople>
    c52a:	|         addq.l #4,sp

	if (currentFloor -> numPolygons) {
    c52c:	|         movea.l 1a914 <currentFloor>,a0
    c532:	|         move.l 8(a0),d0
    c536:	|  /----- beq.s c574 <saveGame+0x3cc>
		FPutC (fp, 1);
    c538:	|  |      move.l 256(sp),100(sp)
    c53e:	|  |      moveq #1,d0
    c540:	|  |      move.l d0,96(sp)
    c544:	|  |      move.l 1a7ac <DOSBase>,d0
    c54a:	|  |      movea.l d0,a6
    c54c:	|  |      move.l 100(sp),d1
    c550:	|  |      move.l 96(sp),d2
    c554:	|  |      jsr -312(a6)
    c558:	|  |      move.l d0,92(sp)
		put2bytes (currentFloor -> originalNum, fp);
    c55c:	|  |      movea.l 1a914 <currentFloor>,a0
    c562:	|  |      move.l (a0),d0
    c564:	|  |      move.l 256(sp),-(sp)
    c568:	|  |      move.l d0,-(sp)
    c56a:	|  |      jsr 8d0 <put2bytes>
    c570:	|  |      addq.l #8,sp
    c572:	|  |  /-- bra.s c596 <saveGame+0x3ee>
	} else FPutC (fp, 0);
    c574:	|  \--|-> move.l 256(sp),112(sp)
    c57a:	|     |   clr.l 108(sp)
    c57e:	|     |   move.l 1a7ac <DOSBase>,d0
    c584:	|     |   movea.l d0,a6
    c586:	|     |   move.l 112(sp),d1
    c58a:	|     |   move.l 108(sp),d2
    c58e:	|     |   jsr -312(a6)
    c592:	|     |   move.l d0,104(sp)

	if (zBuffer.tex) {
    c596:	|     \-> move.l 1a854 <zBuffer+0x50>,d0
    c59c:	|  /----- beq.s c5d8 <saveGame+0x430>
		FPutC (fp, 1);
    c59e:	|  |      move.l 256(sp),76(sp)
    c5a4:	|  |      moveq #1,d0
    c5a6:	|  |      move.l d0,72(sp)
    c5aa:	|  |      move.l 1a7ac <DOSBase>,d0
    c5b0:	|  |      movea.l d0,a6
    c5b2:	|  |      move.l 76(sp),d1
    c5b6:	|  |      move.l 72(sp),d2
    c5ba:	|  |      jsr -312(a6)
    c5be:	|  |      move.l d0,68(sp)
		put2bytes (zBuffer.originalNum, fp);
    c5c2:	|  |      move.l 1a850 <zBuffer+0x4c>,d0
    c5c8:	|  |      move.l 256(sp),-(sp)
    c5cc:	|  |      move.l d0,-(sp)
    c5ce:	|  |      jsr 8d0 <put2bytes>
    c5d4:	|  |      addq.l #8,sp
    c5d6:	|  |  /-- bra.s c5fa <saveGame+0x452>
	} else FPutC (fp,0);
    c5d8:	|  \--|-> move.l 256(sp),88(sp)
    c5de:	|     |   clr.l 84(sp)
    c5e2:	|     |   move.l 1a7ac <DOSBase>,d0
    c5e8:	|     |   movea.l d0,a6
    c5ea:	|     |   move.l 88(sp),d1
    c5ee:	|     |   move.l 84(sp),d2
    c5f2:	|     |   jsr -312(a6)
    c5f6:	|     |   move.l d0,80(sp)

	FPutC (fp, speechMode);
    c5fa:	|     \-> move.l 256(sp),64(sp)
    c600:	|         move.l 1a8c6 <speechMode>,60(sp)
    c608:	|         move.l 1a7ac <DOSBase>,d0
    c60e:	|         movea.l d0,a6
    c610:	|         move.l 64(sp),d1
    c614:	|         move.l 60(sp),d2
    c618:	|         jsr -312(a6)
    c61c:	|         move.l d0,56(sp)
	FPutC (fadeMode, fp);
    c620:	|         move.b 1a67e <fadeMode>,d0
    c626:	|         move.b d0,d0
    c628:	|         andi.l #255,d0
    c62e:	|         move.l d0,52(sp)
    c632:	|         move.l 256(sp),48(sp)
    c638:	|         move.l 1a7ac <DOSBase>,d0
    c63e:	|         movea.l d0,a6
    c640:	|         move.l 52(sp),d1
    c644:	|         move.l 48(sp),d2
    c648:	|         jsr -312(a6)
    c64c:	|         move.l d0,44(sp)
	saveSpeech (speech, fp);
    c650:	|         move.l 1a800 <speech>,d0
    c656:	|         move.l 256(sp),-(sp)
    c65a:	|         move.l d0,-(sp)
    c65c:	|         jsr 78f2 <saveSpeech>
    c662:	|         addq.l #8,sp
	saveStatusBars (fp);
    c664:	|         move.l 256(sp),-(sp)
    c668:	|         jsr 72ee <saveStatusBars>
    c66e:	|         addq.l #4,sp
	saveSounds (fp);
    c670:	|         move.l 256(sp),-(sp)
    c674:	|         jsr cc12 <saveSounds>
    c67a:	|         addq.l #4,sp

	put2bytes (saveEncoding, fp);
    c67c:	|         move.w 1a8b0 <saveEncoding>,d0
    c682:	|         move.w d0,d0
    c684:	|         andi.l #65535,d0
    c68a:	|         move.l 256(sp),-(sp)
    c68e:	|         move.l d0,-(sp)
    c690:	|         jsr 8d0 <put2bytes>
    c696:	|         addq.l #8,sp

	saveParallaxRecursive (parallaxStuff, fp);
    c698:	|         move.l 1a8a2 <parallaxStuff>,d0
    c69e:	|         move.l 256(sp),-(sp)
    c6a2:	|         move.l d0,-(sp)
    c6a4:	|         jsr cf0a <saveParallaxRecursive>
    c6aa:	|         addq.l #8,sp
	FPutC (fp, 0);
    c6ac:	|         move.l 256(sp),40(sp)
    c6b2:	|         clr.l 36(sp)
    c6b6:	|         move.l 1a7ac <DOSBase>,d0
    c6bc:	|         movea.l d0,a6
    c6be:	|         move.l 40(sp),d1
    c6c2:	|         move.l 36(sp),d2
    c6c6:	|         jsr -312(a6)
    c6ca:	|         move.l d0,32(sp)

	FPutC(fp, languageNum);	// Selected language
    c6ce:	|         move.l 256(sp),28(sp)
    c6d4:	|         move.l 1a120 <languageNum>,24(sp)
    c6dc:	|         move.l 1a7ac <DOSBase>,d0
    c6e2:	|         movea.l d0,a6
    c6e4:	|         move.l 28(sp),d1
    c6e8:	|         move.l 24(sp),d2
    c6ec:	|         jsr -312(a6)
    c6f0:	|         move.l d0,20(sp)

	Close(fp);
    c6f4:	|         move.l 256(sp),16(sp)
    c6fa:	|         move.l 1a7ac <DOSBase>,d0
    c700:	|         movea.l d0,a6
    c702:	|         move.l 16(sp),d1
    c706:	|         jsr -36(a6)
    c70a:	|         move.l d0,12(sp)
	clearStackLib ();
    c70e:	|         jsr bca6 <clearStackLib>
	return TRUE;
    c714:	|         moveq #1,d0
}
    c716:	\-------> movem.l (sp)+,d2-d3/a6
    c71a:	          lea 272(sp),sp
    c71e:	          rts

0000c720 <saveStack>:

//----------------------------------------------------------------------
// For saving and loading stacks...
//----------------------------------------------------------------------

void saveStack (struct variableStack * vs, BPTR fp) {
    c720:	       lea -12(sp),sp
	int elements = 0;
    c724:	       clr.l 8(sp)
	int a;

	struct variableStack * search = vs;
    c728:	       move.l 16(sp),(sp)
	while (search) {
    c72c:	   /-- bra.s c738 <saveStack+0x18>
		elements ++;
    c72e:	/--|-> addq.l #1,8(sp)
		search = search -> next;
    c732:	|  |   movea.l (sp),a0
    c734:	|  |   move.l 8(a0),(sp)
	while (search) {
    c738:	|  \-> tst.l (sp)
    c73a:	\----- bne.s c72e <saveStack+0xe>
	}

	put2bytes (elements, fp);
    c73c:	       move.l 20(sp),-(sp)
    c740:	       move.l 12(sp),-(sp)
    c744:	       jsr 8d0 <put2bytes>
    c74a:	       addq.l #8,sp
	search = vs;
    c74c:	       move.l 16(sp),(sp)
	for (a = 0; a < elements; a ++) {
    c750:	       clr.l 4(sp)
    c754:	   /-- bra.s c770 <saveStack+0x50>
		saveVariable (& search -> thisVar, fp);
    c756:	/--|-> move.l (sp),d0
    c758:	|  |   move.l 20(sp),-(sp)
    c75c:	|  |   move.l d0,-(sp)
    c75e:	|  |   jsr c8ac <saveVariable>
    c764:	|  |   addq.l #8,sp
		search = search -> next;
    c766:	|  |   movea.l (sp),a0
    c768:	|  |   move.l 8(a0),(sp)
	for (a = 0; a < elements; a ++) {
    c76c:	|  |   addq.l #1,4(sp)
    c770:	|  \-> move.l 4(sp),d0
    c774:	|      cmp.l 8(sp),d0
    c778:	\----- blt.s c756 <saveStack+0x36>
	}
}
    c77a:	       nop
    c77c:	       nop
    c77e:	       lea 12(sp),sp
    c782:	       rts

0000c784 <saveStackRef>:


BOOL saveStackRef (struct stackHandler * vs, BPTR fp) {
    c784:	             lea -44(sp),sp
    c788:	             move.l a6,-(sp)
    c78a:	             move.l d2,-(sp)
	struct stackLibrary * s = stackLib;
    c78c:	             move.l 1a888 <stackLib>,48(sp)
	int a = 0;
    c794:	             clr.l 44(sp)
	while (s) {
    c798:	      /----- bra.s c7f6 <saveStackRef+0x72>
		if (s -> stack == vs) {
    c79a:	   /--|----> movea.l 48(sp),a0
    c79e:	   |  |      move.l (a0),d0
    c7a0:	   |  |      cmp.l 56(sp),d0
    c7a4:	   |  |  /-- bne.s c7e8 <saveStackRef+0x64>
			FPutC (fp, 1);
    c7a6:	   |  |  |   move.l 60(sp),16(sp)
    c7ac:	   |  |  |   moveq #1,d0
    c7ae:	   |  |  |   move.l d0,12(sp)
    c7b2:	   |  |  |   move.l 1a7ac <DOSBase>,d0
    c7b8:	   |  |  |   movea.l d0,a6
    c7ba:	   |  |  |   move.l 16(sp),d1
    c7be:	   |  |  |   move.l 12(sp),d2
    c7c2:	   |  |  |   jsr -312(a6)
    c7c6:	   |  |  |   move.l d0,8(sp)
			put2bytes (stackLibTotal - a, fp);
    c7ca:	   |  |  |   move.l 1a884 <stackLibTotal>,d0
    c7d0:	   |  |  |   sub.l 44(sp),d0
    c7d4:	   |  |  |   move.l 60(sp),-(sp)
    c7d8:	   |  |  |   move.l d0,-(sp)
    c7da:	   |  |  |   jsr 8d0 <put2bytes>
    c7e0:	   |  |  |   addq.l #8,sp
			return TRUE;
    c7e2:	   |  |  |   moveq #1,d0
    c7e4:	/--|--|--|-- bra.w c8a2 <saveStackRef+0x11e>
		}
		s = s -> next;
    c7e8:	|  |  |  \-> movea.l 48(sp),a0
    c7ec:	|  |  |      move.l 4(a0),48(sp)
		a ++;
    c7f2:	|  |  |      addq.l #1,44(sp)
	while (s) {
    c7f6:	|  |  \----> tst.l 48(sp)
    c7fa:	|  \-------- bne.s c79a <saveStackRef+0x16>
	}
	FPutC (fp, 0);
    c7fc:	|            move.l 60(sp),40(sp)
    c802:	|            clr.l 36(sp)
    c806:	|            move.l 1a7ac <DOSBase>,d0
    c80c:	|            movea.l d0,a6
    c80e:	|            move.l 40(sp),d1
    c812:	|            move.l 36(sp),d2
    c816:	|            jsr -312(a6)
    c81a:	|            move.l d0,32(sp)
	saveStack (vs -> first, fp);
    c81e:	|            movea.l 56(sp),a0
    c822:	|            move.l (a0),d0
    c824:	|            move.l 60(sp),-(sp)
    c828:	|            move.l d0,-(sp)
    c82a:	|            jsr c720 <saveStack>
    c830:	|            addq.l #8,sp
	s = AllocVec( sizeof(struct stackLibrary), MEMF_ANY);
    c832:	|            moveq #8,d0
    c834:	|            move.l d0,28(sp)
    c838:	|            clr.l 24(sp)
    c83c:	|            move.l 1a7a4 <SysBase>,d0
    c842:	|            movea.l d0,a6
    c844:	|            move.l 28(sp),d0
    c848:	|            move.l 24(sp),d1
    c84c:	|            jsr -684(a6)
    c850:	|            move.l d0,20(sp)
    c854:	|            move.l 20(sp),d0
    c858:	|            move.l d0,48(sp)
	stackLibTotal ++;
    c85c:	|            move.l 1a884 <stackLibTotal>,d0
    c862:	|            addq.l #1,d0
    c864:	|            move.l d0,1a884 <stackLibTotal>
	if (! s) {
    c86a:	|            tst.l 48(sp)
    c86e:	|        /-- bne.s c882 <saveStackRef+0xfe>
		KPrintF("saveStackRef: Cannot allocate memory");
    c870:	|        |   pea 18e29 <PutChar+0x16f7>
    c876:	|        |   jsr 16c5e <KPrintF>
    c87c:	|        |   addq.l #4,sp
		return FALSE;
    c87e:	|        |   clr.w d0
    c880:	+--------|-- bra.s c8a2 <saveStackRef+0x11e>
	}
	s -> next = stackLib;
    c882:	|        \-> move.l 1a888 <stackLib>,d0
    c888:	|            movea.l 48(sp),a0
    c88c:	|            move.l d0,4(a0)
	s -> stack = vs;
    c890:	|            movea.l 48(sp),a0
    c894:	|            move.l 56(sp),(a0)
	stackLib = s;
    c898:	|            move.l 48(sp),1a888 <stackLib>
	return TRUE;
    c8a0:	|            moveq #1,d0
}
    c8a2:	\----------> move.l (sp)+,d2
    c8a4:	             movea.l (sp)+,a6
    c8a6:	             lea 44(sp),sp
    c8aa:	             rts

0000c8ac <saveVariable>:

BOOL saveVariable (struct variable * from, BPTR fp)
{
    c8ac:	          lea -12(sp),sp
    c8b0:	          move.l a6,-(sp)
    c8b2:	          move.l d2,-(sp)
	FPutC (fp,from -> varType);
    c8b4:	          move.l 28(sp),16(sp)
    c8ba:	          movea.l 24(sp),a0
    c8be:	          move.l (a0),d0
    c8c0:	          move.l d0,12(sp)
    c8c4:	          move.l 1a7ac <DOSBase>,d0
    c8ca:	          movea.l d0,a6
    c8cc:	          move.l 16(sp),d1
    c8d0:	          move.l 12(sp),d2
    c8d4:	          jsr -312(a6)
    c8d8:	          move.l d0,8(sp)
	switch (from -> varType) {
    c8dc:	          movea.l 24(sp),a0
    c8e0:	          move.l (a0),d0
    c8e2:	          moveq #9,d1
    c8e4:	          cmp.l d0,d1
    c8e6:	      /-- bcs.w c996 <saveVariable+0xea>
    c8ea:	      |   add.l d0,d0
    c8ec:	      |   movea.l d0,a0
    c8ee:	      |   adda.l #51450,a0
    c8f4:	      |   move.w (a0),d0
    c8f6:	      |   jmp (c8fa <saveVariable+0x4e>,pc,d0.w)
    c8fa:	      |   ori.l #1310740,(a0)+
    c900:	      |   ori.b #20,(20,a0,d0.w)
    c906:	      |   .short 0x004c
    c908:	      |   ori.b #126,(a4)
    c90c:	      |   ori.w #8303,-(a4)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		put4bytes (from -> varData.intValue, fp);
    c910:	      |   ori.b #40,(a0)+
    c914:	      |   ori.b #47,d4
    c918:	      |   ori.b #0,(a4)+
    c91c:	      |   jsr 958 <put4bytes>
    c922:	      |   addq.l #8,sp
		return TRUE;
    c924:	      |   moveq #1,d0
    c926:	/-----|-- bra.w c9d2 <saveVariable+0x126>

		case SVT_STRING:
		writeString (from -> varData.theString, fp);
    c92a:	|     |   movea.l 24(sp),a0
    c92e:	|     |   move.l 4(a0),d0
    c932:	|     |   move.l 28(sp),-(sp)
    c936:	|     |   move.l d0,-(sp)
    c938:	|     |   jsr bd8 <writeString>
    c93e:	|     |   addq.l #8,sp
		return TRUE;
    c940:	|     |   moveq #1,d0
    c942:	+-----|-- bra.w c9d2 <saveVariable+0x126>

		case SVT_STACK:
		return saveStackRef (from -> varData.theStack, fp);
    c946:	|     |   movea.l 24(sp),a0
    c94a:	|     |   move.l 4(a0),d0
    c94e:	|     |   move.l 28(sp),-(sp)
    c952:	|     |   move.l d0,-(sp)
    c954:	|     |   jsr c784 <saveStackRef>
    c95a:	|     |   addq.l #8,sp
    c95c:	+-----|-- bra.s c9d2 <saveVariable+0x126>

		case SVT_COSTUME:
		saveCostume (from -> varData.costumeHandler, fp);
    c95e:	|     |   movea.l 24(sp),a0
    c962:	|     |   move.l 4(a0),d0
    c966:	|     |   move.l 28(sp),-(sp)
    c96a:	|     |   move.l d0,-(sp)
    c96c:	|     |   jsr ab1a <saveCostume>
    c972:	|     |   addq.l #8,sp
		return FALSE;
    c974:	|     |   clr.w d0
    c976:	+-----|-- bra.s c9d2 <saveVariable+0x126>

		case SVT_ANIM:
		saveAnim (from -> varData.animHandler, fp);
    c978:	|     |   movea.l 24(sp),a0
    c97c:	|     |   move.l 4(a0),d0
    c980:	|     |   move.l 28(sp),-(sp)
    c984:	|     |   move.l d0,-(sp)
    c986:	|     |   jsr aa50 <saveAnim>
    c98c:	|     |   addq.l #8,sp
		return FALSE;
    c98e:	|     |   clr.w d0
    c990:	+-----|-- bra.s c9d2 <saveVariable+0x126>

		case SVT_NULL:
		return FALSE;
    c992:	|     |   clr.w d0
    c994:	+-----|-- bra.s c9d2 <saveVariable+0x126>

		default:
		KPrintF("Can't save variables of this type:",
					(from->varType < SVT_NUM_TYPES) ?
    c996:	|     \-> movea.l 24(sp),a0
    c99a:	|         move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    c99c:	|         moveq #10,d1
    c99e:	|         cmp.l d0,d1
    c9a0:	|  /----- bcs.s c9ba <saveVariable+0x10e>
						typeName[from->varType] :
    c9a2:	|  |      movea.l 24(sp),a0
    c9a6:	|  |      move.l (a0),d0
		KPrintF("Can't save variables of this type:",
    c9a8:	|  |      add.l d0,d0
    c9aa:	|  |      movea.l d0,a1
    c9ac:	|  |      adda.l d0,a1
    c9ae:	|  |      lea 1a680 <typeName>,a0
    c9b4:	|  |      move.l (0,a1,a0.l),d0
    c9b8:	|  |  /-- bra.s c9c0 <saveVariable+0x114>
    c9ba:	|  \--|-> move.l #101966,d0
    c9c0:	|     \-> move.l d0,-(sp)
    c9c2:	|         pea 18e55 <PutChar+0x1723>
    c9c8:	|         jsr 16c5e <KPrintF>
    c9ce:	|         addq.l #8,sp
						"bad ID");						
	}
	return TRUE;
    c9d0:	|         moveq #1,d0
    c9d2:	\-------> move.l (sp)+,d2
    c9d4:	          movea.l (sp)+,a6
    c9d6:	          lea 12(sp),sp
    c9da:	          rts

0000c9dc <CsiCheckInput>:
extern struct inputType input;

UWORD counterx_old = 0;
UWORD countery_old = 0;

void CsiCheckInput() {
    c9dc:	          lea -12(sp),sp
    volatile struct Custom *custom = (struct Custom*)0xdff000;
    c9e0:	          move.l #14675968,4(sp)
    UWORD value = custom->joy0dat;
    c9e8:	          movea.l 4(sp),a0
    c9ec:	          move.w 10(a0),2(sp)
    UBYTE countery_new = (UBYTE) (custom->joy0dat >> 8);
    c9f2:	          movea.l 4(sp),a0
    c9f6:	          move.w 10(a0),d0
    c9fa:	          lsr.w #8,d0
    c9fc:	          move.b d0,1(sp)
    UBYTE counterx_new = (UBYTE) (custom->joy0dat & 0xffff);
    ca00:	          movea.l 4(sp),a0
    ca04:	          move.w 10(a0),d0
    ca08:	          move.b d0,(sp)

    if(counterx_new)
    ca0a:	/-------- beq.w cab0 <CsiCheckInput+0xd4>
    {
        WORD counterx_diff = counterx_new - counterx_old;
    ca0e:	|         clr.w d1
    ca10:	|         move.b (sp),d1
    ca12:	|         move.w 1a890 <counterx_old>,d0
    ca18:	|         sub.w d0,d1
    ca1a:	|         move.w d1,10(sp)

        if(counterx_diff > 127) {
    ca1e:	|         cmpi.w #128,10(sp)
    ca24:	|     /-- blt.s ca3c <CsiCheckInput+0x60>
            input.justMoved = TRUE;                
    ca26:	|     |   move.w #1,1a75a <input+0x4>
            counterx_diff -= 256;    
    ca2e:	|     |   move.w 10(sp),d0
    ca32:	|     |   addi.w #-256,d0
    ca36:	|     |   move.w d0,10(sp)
    ca3a:	|  /--|-- bra.s ca68 <CsiCheckInput+0x8c>
        } else if (counterx_diff < -128) {
    ca3c:	|  |  \-> cmpi.w #-129,10(sp)
    ca42:	|  |  /-- bgt.s ca5a <CsiCheckInput+0x7e>
            counterx_diff += 256;
    ca44:	|  |  |   move.w 10(sp),d0
    ca48:	|  |  |   addi.w #256,d0
    ca4c:	|  |  |   move.w d0,10(sp)
            input.justMoved = TRUE;
    ca50:	|  |  |   move.w #1,1a75a <input+0x4>
    ca58:	|  +--|-- bra.s ca68 <CsiCheckInput+0x8c>
        } else if (counterx_diff) {
    ca5a:	|  |  \-> tst.w 10(sp)
    ca5e:	|  +----- beq.s ca68 <CsiCheckInput+0x8c>
            input.justMoved = TRUE;
    ca60:	|  |      move.w #1,1a75a <input+0x4>
        }

        input.mouseX += counterx_diff;
    ca68:	|  \----> move.l 1a760 <input+0xa>,d0
    ca6e:	|         movea.w 10(sp),a0
    ca72:	|         add.l a0,d0
    ca74:	|         move.l d0,1a760 <input+0xa>

        if( input.mouseX > (int) winWidth) {
    ca7a:	|         move.l 1a760 <input+0xa>,d1
    ca80:	|         move.l 1a6f8 <winWidth>,d0
    ca86:	|         cmp.l d1,d0
    ca88:	|     /-- bge.s ca98 <CsiCheckInput+0xbc>
            input.mouseX = winWidth;            
    ca8a:	|     |   move.l 1a6f8 <winWidth>,d0
    ca90:	|     |   move.l d0,1a760 <input+0xa>
    ca96:	|  /--|-- bra.s caa6 <CsiCheckInput+0xca>
        }
        else if(input.mouseX < 0) {
    ca98:	|  |  \-> move.l 1a760 <input+0xa>,d0
    ca9e:	|  +----- bpl.s caa6 <CsiCheckInput+0xca>
            input.mouseX = 0;
    caa0:	|  |      clr.l 1a760 <input+0xa>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        counterx_old = counterx_new;
    caa6:	|  \----> clr.w d0
    caa8:	|         move.b (sp),d0
    caaa:	|         move.w d0,1a890 <counterx_old>
    }    

    if(countery_new)
    cab0:	\-------> tst.b 1(sp)
    cab4:	/-------- beq.w cb5e <CsiCheckInput+0x182>
    {
        WORD countery_diff = countery_new - countery_old;
    cab8:	|         clr.w d1
    caba:	|         move.b 1(sp),d1
    cabe:	|         move.w 1a892 <countery_old>,d0
    cac4:	|         sub.w d0,d1
    cac6:	|         move.w d1,8(sp)

        if(countery_diff > 127) {
    caca:	|         cmpi.w #128,8(sp)
    cad0:	|     /-- blt.s cae8 <CsiCheckInput+0x10c>
            input.justMoved = TRUE;                
    cad2:	|     |   move.w #1,1a75a <input+0x4>
            countery_diff -= 256;    
    cada:	|     |   move.w 8(sp),d0
    cade:	|     |   addi.w #-256,d0
    cae2:	|     |   move.w d0,8(sp)
    cae6:	|  /--|-- bra.s cb14 <CsiCheckInput+0x138>
        } else if (countery_diff < -128) {
    cae8:	|  |  \-> cmpi.w #-129,8(sp)
    caee:	|  |  /-- bgt.s cb06 <CsiCheckInput+0x12a>
            input.justMoved = TRUE;                
    caf0:	|  |  |   move.w #1,1a75a <input+0x4>
            countery_diff += 256;
    caf8:	|  |  |   move.w 8(sp),d0
    cafc:	|  |  |   addi.w #256,d0
    cb00:	|  |  |   move.w d0,8(sp)
    cb04:	|  +--|-- bra.s cb14 <CsiCheckInput+0x138>
        } else if (countery_diff) {
    cb06:	|  |  \-> tst.w 8(sp)
    cb0a:	|  +----- beq.s cb14 <CsiCheckInput+0x138>
            input.justMoved = TRUE;
    cb0c:	|  |      move.w #1,1a75a <input+0x4>
        }

        input.mouseY += countery_diff;
    cb14:	|  \----> move.l 1a764 <input+0xe>,d0
    cb1a:	|         movea.w 8(sp),a0
    cb1e:	|         add.l a0,d0
    cb20:	|         move.l d0,1a764 <input+0xe>

        if( input.mouseY > (int) winHeight) {
    cb26:	|         move.l 1a764 <input+0xe>,d1
    cb2c:	|         move.l 1a6fc <winHeight>,d0
    cb32:	|         cmp.l d1,d0
    cb34:	|     /-- bge.s cb44 <CsiCheckInput+0x168>
            input.mouseY = winHeight;            
    cb36:	|     |   move.l 1a6fc <winHeight>,d0
    cb3c:	|     |   move.l d0,1a764 <input+0xe>
    cb42:	|  /--|-- bra.s cb52 <CsiCheckInput+0x176>
        }
        else if(input.mouseY < 0) {
    cb44:	|  |  \-> move.l 1a764 <input+0xe>,d0
    cb4a:	|  +----- bpl.s cb52 <CsiCheckInput+0x176>
            input.mouseY = 0;
    cb4c:	|  |      clr.l 1a764 <input+0xe>
        }

        //KPrintF("CsiCheckInput: MouseX = %d\n", input.mouseX);
        countery_old = countery_new;
    cb52:	|  \----> clr.w d0
    cb54:	|         move.b 1(sp),d0
    cb58:	|         move.w d0,1a892 <countery_old>
    } 

    if(input.leftClick && ((*(volatile UBYTE*)0xbfe001)&64))
    cb5e:	\-------> move.w 1a756 <input>,d0
    cb64:	      /-- beq.s cb8a <CsiCheckInput+0x1ae>
    cb66:	      |   movea.l #12574721,a0
    cb6c:	      |   move.b (a0),d0
    cb6e:	      |   move.b d0,d0
    cb70:	      |   andi.l #255,d0
    cb76:	      |   moveq #64,d1
    cb78:	      |   and.l d1,d0
    cb7a:	      +-- beq.s cb8a <CsiCheckInput+0x1ae>
    {
        input.leftClick = FALSE;
    cb7c:	      |   clr.w 1a756 <input>
        input.leftRelease = TRUE;
    cb82:	      |   move.w #1,1a75c <input+0x6>
    }

    if(input.rightClick && ((*(volatile UWORD*)0xdff016)&(1<<10)))
    cb8a:	      \-> move.w 1a758 <input+0x2>,d0
    cb90:	      /-- beq.s cbb8 <CsiCheckInput+0x1dc>
    cb92:	      |   movea.l #14675990,a0
    cb98:	      |   move.w (a0),d0
    cb9a:	      |   move.w d0,d0
    cb9c:	      |   andi.l #65535,d0
    cba2:	      |   andi.l #1024,d0
    cba8:	      +-- beq.s cbb8 <CsiCheckInput+0x1dc>
    {
        input.rightClick = FALSE;
    cbaa:	      |   clr.w 1a758 <input+0x2>
        input.rightRelease = TRUE;
    cbb0:	      |   move.w #1,1a75e <input+0x8>
    }


    if(!((*(volatile UBYTE*)0xbfe001)&64)) {
    cbb8:	      \-> movea.l #12574721,a0
    cbbe:	          move.b (a0),d0
    cbc0:	          move.b d0,d0
    cbc2:	          andi.l #255,d0
    cbc8:	          moveq #64,d1
    cbca:	          and.l d1,d0
    cbcc:	      /-- bne.s cbd6 <CsiCheckInput+0x1fa>
        input.leftClick = TRUE;        
    cbce:	      |   move.w #1,1a756 <input>
    } 
    if(!((*(volatile UWORD*)0xdff016)&(1<<10)) ) {
    cbd6:	      \-> movea.l #14675990,a0
    cbdc:	          move.w (a0),d0
    cbde:	          move.w d0,d0
    cbe0:	          andi.l #65535,d0
    cbe6:	          andi.l #1024,d0
    cbec:	      /-- bne.s cbf6 <CsiCheckInput+0x21a>
        input.rightClick = TRUE;
    cbee:	      |   move.w #1,1a758 <input+0x2>
    }

    cbf6:	      \-> nop
    cbf8:	          lea 12(sp),sp
    cbfc:	          rts

0000cbfe <cacheSound>:

struct soundThing soundCache[MAX_SAMPLES];

int cacheSound (int f) {
//#pragma unused (f)
	return 0;
    cbfe:	moveq #0,d0
}
    cc00:	rts

0000cc02 <huntKillFreeSound>:

void huntKillFreeSound (int filenum) {
//#pragma unused(filenum)
}
    cc02:	nop
    cc04:	rts

0000cc06 <huntKillSound>:

void huntKillSound (int filenum) {
//#pragma unused(filenum)
}
    cc06:	nop
    cc08:	rts

0000cc0a <playMOD>:
	defVol = get2bytes (fp);
}

BOOL playMOD (int f, int a, int fromTrack) {
//#pragma unused (f,a,fromTrack)
    return TRUE;
    cc0a:	moveq #1,d0
}
    cc0c:	rts

0000cc0e <playSoundList>:

void playSoundList(struct soundList *s) {
}
    cc0e:	nop
    cc10:	rts

0000cc12 <saveSounds>:

void saveSounds (BPTR fp) {
    cc12:	lea -12(sp),sp
    cc16:	move.l a6,-(sp)
    cc18:	move.l d2,-(sp)
	FPutC (fp,0);
    cc1a:	move.l 24(sp),16(sp)
    cc20:	clr.l 12(sp)
    cc24:	move.l 1a7ac <DOSBase>,d0
    cc2a:	movea.l d0,a6
    cc2c:	move.l 16(sp),d1
    cc30:	move.l 12(sp),d2
    cc34:	jsr -312(a6)
    cc38:	move.l d0,8(sp)
	put2bytes (defSoundVol, fp);
    cc3c:	move.l 1a13e <defSoundVol>,d0
    cc42:	move.l 24(sp),-(sp)
    cc46:	move.l d0,-(sp)
    cc48:	jsr 8d0 <put2bytes>
    cc4e:	addq.l #8,sp
	put2bytes (defVol, fp);
    cc50:	move.l 1a13a <defVol>,d0
    cc56:	move.l 24(sp),-(sp)
    cc5a:	move.l d0,-(sp)
    cc5c:	jsr 8d0 <put2bytes>
    cc62:	addq.l #8,sp
}
    cc64:	nop
    cc66:	move.l (sp)+,d2
    cc68:	movea.l (sp)+,a6
    cc6a:	lea 12(sp),sp
    cc6e:	rts

0000cc70 <setDefaultMusicVolume>:

void setDefaultMusicVolume (int v) {
	defVol = v;
    cc70:	move.l 4(sp),1a13a <defVol>
}
    cc78:	nop
    cc7a:	rts

0000cc7c <setDefaultSoundVolume>:

void setDefaultSoundVolume (int v) {
	defSoundVol = v;
    cc7c:	move.l 4(sp),1a13e <defSoundVol>
}
    cc84:	nop
    cc86:	rts

0000cc88 <setSoundLoop>:

void setSoundLoop (int a, int s, int e) {
//#pragma unused (a,s,e)
}
    cc88:	nop
    cc8a:	rts

0000cc8c <setMusicVolume>:

void setMusicVolume (int a, int v) {
//#pragma unused (a,v)
}
    cc8c:	nop
    cc8e:	rts

0000cc90 <setSoundVolume>:

void setSoundVolume (int a, int v) {
//#pragma unused (a,v)
}
    cc90:	nop
    cc92:	rts

0000cc94 <startSound>:

BOOL startSound (int f, BOOL loopy) {	
    cc94:	subq.l #4,sp
    cc96:	move.l 12(sp),d0
    cc9a:	move.w d0,d0
    cc9c:	move.w d0,2(sp)
//#pragma unused (f,loopy)
	return TRUE;
    cca0:	moveq #1,d0
}
    cca2:	addq.l #4,sp
    cca4:	rts

0000cca6 <stopMOD>:

void stopMOD (int i) {
//#pragma unused(i)
    cca6:	nop
    cca8:	rts

0000ccaa <blankScreen>:
int viewportWidth = 320;
int viewportOffsetX = 0, viewportOffsetY = 0;
unsigned int snapshotTextureName = 0;

void blankScreen(int x1, int y1, int x2, int y2) {
	CstBlankScreen(x2, y2);
    ccaa:	move.l 16(sp),-(sp)
    ccae:	move.l 16(sp),-(sp)
    ccb2:	jsr e0e <CstBlankScreen>
    ccb8:	addq.l #8,sp
}
    ccba:	nop
    ccbc:	rts

0000ccbe <darkScreen>:

void darkScreen () {
	KPrintF("darkScreen: Amiga: Graphics Display not implemented yet."); //Todo: Amigize this
    ccbe:	pea 18e78 <PutChar+0x1746>
    ccc4:	jsr 16c5e <KPrintF>
    ccca:	addq.l #4,sp
}
    cccc:	nop
    ccce:	rts

0000ccd0 <drawHorizontalLine>:
	//Amiga todo: Maybe some parallaxstuff here?
	//}
}

void drawHorizontalLine (unsigned int x1, unsigned int y, unsigned int x2) {
	drawLine (x1, y, x2, y);
    ccd0:	movea.l 8(sp),a1
    ccd4:	movea.l 12(sp),a0
    ccd8:	move.l 8(sp),d1
    ccdc:	move.l 4(sp),d0
    cce0:	move.l a1,-(sp)
    cce2:	move.l a0,-(sp)
    cce4:	move.l d1,-(sp)
    cce6:	move.l d0,-(sp)
    cce8:	jsr 374a <drawLine>
    ccee:	lea 16(sp),sp
}
    ccf2:	nop
    ccf4:	rts

0000ccf6 <drawVerticalLine>:


void drawVerticalLine (unsigned int x, unsigned int y1, unsigned int y2) {
	drawLine (x, y1, x, y2);
    ccf6:	movea.l 12(sp),a1
    ccfa:	movea.l 4(sp),a0
    ccfe:	move.l 8(sp),d1
    cd02:	move.l 4(sp),d0
    cd06:	move.l a1,-(sp)
    cd08:	move.l a0,-(sp)
    cd0a:	move.l d1,-(sp)
    cd0c:	move.l d0,-(sp)
    cd0e:	jsr 374a <drawLine>
    cd14:	lea 16(sp),sp
}
    cd18:	nop
    cd1a:	rts

0000cd1c <hardScroll>:

void hardScroll (int distance) {
   	KPrintF("Amiga: Function not implemented."); //Todo: Amigize this
    cd1c:	pea 18eb1 <PutChar+0x177f>
    cd22:	jsr 16c5e <KPrintF>
    cd28:	addq.l #4,sp
}
    cd2a:	nop
    cd2c:	rts

0000cd2e <killBackDrop>:


void killBackDrop () {
	CstFreeBuffer();
    cd2e:	jsr 14e8 <CstFreeBuffer>
	deleteTextures (1, &backdropTextureName);
    cd34:	pea 1a89c <backdropTextureName>
    cd3a:	pea 1 <_start+0x1>
    cd3e:	jsr 38cc <deleteTextures>
    cd44:	addq.l #8,sp
	backdropTextureName = 0;
    cd46:	clr.l 1a89c <backdropTextureName>
	backdropExists = FALSE;
    cd4c:	clr.w 1a8a0 <backdropExists>
}
    cd52:	nop
    cd54:	rts

0000cd56 <killParallax>:

void killParallax () {
    cd56:	          lea -12(sp),sp
    cd5a:	          move.l a6,-(sp)
	while (parallaxStuff) {
    cd5c:	   /----- bra.s cdc8 <killParallax+0x72>

		struct parallaxLayer * k = parallaxStuff;
    cd5e:	/--|----> move.l 1a8a2 <parallaxStuff>,12(sp)
		parallaxStuff = k->next;
    cd66:	|  |      movea.l 12(sp),a0
    cd6a:	|  |      move.l 42(a0),d0
    cd6e:	|  |      move.l d0,1a8a2 <parallaxStuff>

		// Now kill the image
		deleteTextures (1, &k->textureName);
    cd74:	|  |      move.l 12(sp),d0
    cd78:	|  |      addq.l #4,d0
    cd7a:	|  |      move.l d0,-(sp)
    cd7c:	|  |      pea 1 <_start+0x1>
    cd80:	|  |      jsr 38cc <deleteTextures>
    cd86:	|  |      addq.l #8,sp
		if( k->texture) FreeVec(k->texture);
    cd88:	|  |      movea.l 12(sp),a0
    cd8c:	|  |      move.l (a0),d0
    cd8e:	|  |  /-- beq.s cda8 <killParallax+0x52>
    cd90:	|  |  |   movea.l 12(sp),a0
    cd94:	|  |  |   move.l (a0),8(sp)
    cd98:	|  |  |   move.l 1a7a4 <SysBase>,d0
    cd9e:	|  |  |   movea.l d0,a6
    cda0:	|  |  |   movea.l 8(sp),a1
    cda4:	|  |  |   jsr -690(a6)
		if( k) FreeVec(k);
    cda8:	|  |  \-> tst.l 12(sp)
    cdac:	|  |  /-- beq.s cdc4 <killParallax+0x6e>
    cdae:	|  |  |   move.l 12(sp),4(sp)
    cdb4:	|  |  |   move.l 1a7a4 <SysBase>,d0
    cdba:	|  |  |   movea.l d0,a6
    cdbc:	|  |  |   movea.l 4(sp),a1
    cdc0:	|  |  |   jsr -690(a6)
		k = NULL;
    cdc4:	|  |  \-> clr.l 12(sp)
	while (parallaxStuff) {
    cdc8:	|  \----> move.l 1a8a2 <parallaxStuff>,d0
    cdce:	\-------- bne.s cd5e <killParallax+0x8>
	}
}
    cdd0:	          nop
    cdd2:	          nop
    cdd4:	          movea.l (sp)+,a6
    cdd6:	          lea 12(sp),sp
    cdda:	          rts

0000cddc <loadBackDrop>:

void loadBackDrop (int fileNum, int x, int y) {
	if (! openFileFromNum (fileNum)) {
    cddc:	       move.l 4(sp),-(sp)
    cde0:	       jsr 6658 <openFileFromNum>
    cde6:	       addq.l #4,sp
    cde8:	       tst.l d0
    cdea:	   /-- bne.s cdfc <loadBackDrop+0x20>
		KPrintF("Can't load overlay image");
    cdec:	   |   pea 18ed2 <PutChar+0x17a0>
    cdf2:	   |   jsr 16c5e <KPrintF>
    cdf8:	   |   addq.l #4,sp
		return;
    cdfa:	/--|-- bra.s ce1c <loadBackDrop+0x40>
	}
	CstLoadBackdrop( bigDataFile, x, y);
    cdfc:	|  \-> move.l 1a78c <bigDataFile>,d0
    ce02:	|      move.l 12(sp),-(sp)
    ce06:	|      move.l 12(sp),-(sp)
    ce0a:	|      move.l d0,-(sp)
    ce0c:	|      jsr 1796 <CstLoadBackdrop>
    ce12:	|      lea 12(sp),sp
	finishAccess ();
    ce16:	|      jsr 6550 <finishAccess>
	
}
    ce1c:	\----> rts

0000ce1e <loadParallax>:
	
	backdropExists = TRUE;
	return TRUE;
}

BOOL loadParallax (unsigned short v, unsigned short fracX, unsigned short fracY) {
    ce1e:	subq.l #8,sp
    ce20:	movea.l 12(sp),a0
    ce24:	move.l 16(sp),d1
    ce28:	move.l 20(sp),d0
    ce2c:	movea.w a0,a0
    ce2e:	move.w a0,6(sp)
    ce32:	move.w d1,d1
    ce34:	move.w d1,4(sp)
    ce38:	move.w d0,d0
    ce3a:	move.w d0,2(sp)
	KPrintF("loadParallax: Not implemented yet."); //Amiga Todo: Amigize this	
    ce3e:	pea 18f21 <PutChar+0x17ef>
    ce44:	jsr 16c5e <KPrintF>
    ce4a:	addq.l #4,sp

}
    ce4c:	nop
    ce4e:	addq.l #8,sp
    ce50:	rts

0000ce52 <mixBackDrop>:

void mixBackDrop (int fileNum, int x, int y) {
	KPrintF("mixBackdrop: Amiga Graphics Display not implemented yet."); //Todo: Amigize this	
    ce52:	pea 18f44 <PutChar+0x1812>
    ce58:	jsr 16c5e <KPrintF>
    ce5e:	addq.l #4,sp
}
    ce60:	nop
    ce62:	rts

0000ce64 <nosnapshot>:

void nosnapshot () {
	deleteTextures (1, &snapshotTextureName);
    ce64:	pea 1a8a6 <snapshotTextureName>
    ce6a:	pea 1 <_start+0x1>
    ce6e:	jsr 38cc <deleteTextures>
    ce74:	addq.l #8,sp
	snapshotTextureName = 0;
    ce76:	clr.l 1a8a6 <snapshotTextureName>
}
    ce7c:	nop
    ce7e:	rts

0000ce80 <reserveBackdrop>:

BOOL reserveBackdrop () {	
	cameraX = 0;
    ce80:	clr.l 1a8b2 <cameraX>
	cameraY = 0;
    ce86:	clr.l 1a8b6 <cameraY>
	
	return CstReserveBackdrop(sceneWidth, sceneHeight);
    ce8c:	move.l 1a898 <sceneHeight>,d0
    ce92:	move.l d0,d1
    ce94:	move.l 1a894 <sceneWidth>,d0
    ce9a:	move.l d1,-(sp)
    ce9c:	move.l d0,-(sp)
    ce9e:	jsr 3250 <CstReserveBackdrop>
    cea4:	addq.l #8,sp
}
    cea6:	rts

0000cea8 <resizeBackdrop>:

BOOL resizeBackdrop (int x, int y) {
    killBackDrop ();
    cea8:	jsr cd2e <killBackDrop>
	killParallax ();
    ceae:	jsr cd56 <killParallax>
	killZBuffer ();
    ceb4:	jsr 7fec <killZBuffer>
	sceneWidth = x;
    ceba:	move.l 4(sp),d0
    cebe:	move.l d0,1a894 <sceneWidth>
	sceneHeight = y;
    cec4:	move.l 8(sp),d0
    cec8:	move.l d0,1a898 <sceneHeight>
	KPrintF("resizeBackdrop: Reserving new Backdrop");
    cece:	pea 18f7d <PutChar+0x184b>
    ced4:	jsr 16c5e <KPrintF>
    ceda:	addq.l #4,sp
	return reserveBackdrop();
    cedc:	jsr ce80 <reserveBackdrop>
	KPrintF("resizeBackdrop: Backdrop reserved");	
}
    cee2:	rts

0000cee4 <restoreSnapshot>:

BOOL restoreSnapshot (BPTR fp) {
    cee4:	subq.l #8,sp
	unsigned int picWidth = get2bytes (fp);
    cee6:	move.l 12(sp),-(sp)
    ceea:	jsr 6bc <get2bytes>
    cef0:	addq.l #4,sp
    cef2:	move.l d0,4(sp)
	unsigned int picHeight = get2bytes (fp);
    cef6:	move.l 12(sp),-(sp)
    cefa:	jsr 6bc <get2bytes>
    cf00:	addq.l #4,sp
    cf02:	move.l d0,(sp)

	//Todo: Amigize this?

	return TRUE;
    cf04:	moveq #1,d0
}
    cf06:	addq.l #8,sp
    cf08:	rts

0000cf0a <saveParallaxRecursive>:

void saveParallaxRecursive (struct parallaxLayer * me, BPTR fp) {
    cf0a:	   /-> lea -12(sp),sp
    cf0e:	   |   move.l a6,-(sp)
    cf10:	   |   move.l d2,-(sp)
	if (me) {
    cf12:	   |   tst.l 24(sp)
    cf16:	/--|-- beq.w cfac <saveParallaxRecursive+0xa2>
		saveParallaxRecursive (me -> next, fp);
    cf1a:	|  |   movea.l 24(sp),a0
    cf1e:	|  |   move.l 42(a0),d0
    cf22:	|  |   move.l 28(sp),-(sp)
    cf26:	|  |   move.l d0,-(sp)
    cf28:	|  \-- jsr cf0a <saveParallaxRecursive>(pc)
    cf2c:	|      addq.l #8,sp
		FPutC (fp, 1);
    cf2e:	|      move.l 28(sp),16(sp)
    cf34:	|      moveq #1,d0
    cf36:	|      move.l d0,12(sp)
    cf3a:	|      move.l 1a7ac <DOSBase>,d0
    cf40:	|      movea.l d0,a6
    cf42:	|      move.l 16(sp),d1
    cf46:	|      move.l 12(sp),d2
    cf4a:	|      jsr -312(a6)
    cf4e:	|      move.l d0,8(sp)
		put2bytes (me->fileNum, fp);
    cf52:	|      movea.l 24(sp),a0
    cf56:	|      move.w 28(a0),d0
    cf5a:	|      move.w d0,d0
    cf5c:	|      andi.l #65535,d0
    cf62:	|      move.l 28(sp),-(sp)
    cf66:	|      move.l d0,-(sp)
    cf68:	|      jsr 8d0 <put2bytes>
    cf6e:	|      addq.l #8,sp
		put2bytes (me ->fractionX, fp);
    cf70:	|      movea.l 24(sp),a0
    cf74:	|      move.w 30(a0),d0
    cf78:	|      move.w d0,d0
    cf7a:	|      andi.l #65535,d0
    cf80:	|      move.l 28(sp),-(sp)
    cf84:	|      move.l d0,-(sp)
    cf86:	|      jsr 8d0 <put2bytes>
    cf8c:	|      addq.l #8,sp
		put2bytes (me->fractionY, fp);
    cf8e:	|      movea.l 24(sp),a0
    cf92:	|      move.w 32(a0),d0
    cf96:	|      move.w d0,d0
    cf98:	|      andi.l #65535,d0
    cf9e:	|      move.l 28(sp),-(sp)
    cfa2:	|      move.l d0,-(sp)
    cfa4:	|      jsr 8d0 <put2bytes>
    cfaa:	|      addq.l #8,sp
	}
}
    cfac:	\----> nop
    cfae:	       move.l (sp)+,d2
    cfb0:	       movea.l (sp)+,a6
    cfb2:	       lea 12(sp),sp
    cfb6:	       rts

0000cfb8 <snapshot>:

BOOL snapshot () {

	KPrintF("snapshot: Not yet implemented on Amiga"); //Todo
    cfb8:	pea 18fa4 <PutChar+0x1872>
    cfbe:	jsr 16c5e <KPrintF>
    cfc4:	addq.l #4,sp
	return TRUE;
    cfc6:	moveq #1,d0
    cfc8:	rts

0000cfca <findObjectType>:
#include "moreio.h"
#include "support/gcc8_c_support.h"

struct objectType * allObjectTypes = NULL;

struct objectType * findObjectType (int i) {
    cfca:	             subq.l #4,sp
	struct objectType * huntType = allObjectTypes;
    cfcc:	             move.l 1a8aa <allObjectTypes>,(sp)

	while (huntType) {
    cfd2:	      /----- bra.s cfea <findObjectType+0x20>
		if (huntType -> objectNum == i) return huntType;
    cfd4:	   /--|----> movea.l (sp),a0
    cfd6:	   |  |      move.l 4(a0),d0
    cfda:	   |  |      cmp.l 8(sp),d0
    cfde:	   |  |  /-- bne.s cfe4 <findObjectType+0x1a>
    cfe0:	   |  |  |   move.l (sp),d0
    cfe2:	/--|--|--|-- bra.s cffa <findObjectType+0x30>
		huntType = huntType -> next;
    cfe4:	|  |  |  \-> movea.l (sp),a0
    cfe6:	|  |  |      move.l 8(a0),(sp)
	while (huntType) {
    cfea:	|  |  \----> tst.l (sp)
    cfec:	|  \-------- bne.s cfd4 <findObjectType+0xa>
	}

	return loadObjectType (i);
    cfee:	|            move.l 8(sp),-(sp)
    cff2:	|            jsr d0ba <loadObjectType>
    cff8:	|            addq.l #4,sp
}
    cffa:	\----------> addq.l #4,sp
    cffc:	             rts

0000cffe <getCombinationFunction>:

int getCombinationFunction (int withThis, int thisObject) {
    cffe:	             lea -12(sp),sp
	int i, num = 0;
    d002:	             clr.l 4(sp)
	struct objectType * obj = findObjectType (thisObject);
    d006:	             move.l 20(sp),-(sp)
    d00a:	             jsr cfca <findObjectType>
    d010:	             addq.l #4,sp
    d012:	             move.l d0,(sp)

	for (i = 0; i < obj -> numCom; i ++) {
    d014:	             clr.l 8(sp)
    d018:	   /-------- bra.s d04e <getCombinationFunction+0x50>
		if (obj -> allCombis[i].withObj == withThis)
    d01a:	/--|-------> movea.l (sp),a0
    d01c:	|  |         move.l 38(a0),d1
    d020:	|  |         move.l 8(sp),d0
    d024:	|  |         lsl.l #3,d0
    d026:	|  |         movea.l d1,a0
    d028:	|  |         adda.l d0,a0
    d02a:	|  |         move.l (a0),d0
    d02c:	|  |         cmp.l 16(sp),d0
    d030:	|  |  /----- bne.s d04a <getCombinationFunction+0x4c>
		{
			num = obj -> allCombis[i].funcNum;
    d032:	|  |  |      movea.l (sp),a0
    d034:	|  |  |      move.l 38(a0),d1
    d038:	|  |  |      move.l 8(sp),d0
    d03c:	|  |  |      lsl.l #3,d0
    d03e:	|  |  |      movea.l d1,a0
    d040:	|  |  |      adda.l d0,a0
    d042:	|  |  |      move.l 4(a0),4(sp)
			break;
    d048:	|  |  |  /-- bra.s d05a <getCombinationFunction+0x5c>
	for (i = 0; i < obj -> numCom; i ++) {
    d04a:	|  |  \--|-> addq.l #1,8(sp)
    d04e:	|  \-----|-> movea.l (sp),a0
    d050:	|        |   move.l 16(a0),d0
    d054:	|        |   cmp.l 8(sp),d0
    d058:	\--------|-- bgt.s d01a <getCombinationFunction+0x1c>
		}
	}

	return num;
    d05a:	         \-> move.l 4(sp),d0
}
    d05e:	             lea 12(sp),sp
    d062:	             rts

0000d064 <initObjectTypes>:

BOOL initObjectTypes () {
	return TRUE;
    d064:	moveq #1,d0
}
    d066:	rts

0000d068 <loadObjectRef>:

struct objectType * loadObjectRef (BPTR fp) {
    d068:	subq.l #8,sp
    d06a:	move.l a6,-(sp)
	struct objectType * r = loadObjectType (get2bytes (fp));
    d06c:	move.l 16(sp),-(sp)
    d070:	jsr 6bc <get2bytes>
    d076:	addq.l #4,sp
    d078:	move.l d0,-(sp)
    d07a:	jsr d0ba <loadObjectType>
    d080:	addq.l #4,sp
    d082:	move.l d0,8(sp)
	FreeVec(r -> screenName);
    d086:	movea.l 8(sp),a0
    d08a:	move.l (a0),4(sp)
    d08e:	move.l 1a7a4 <SysBase>,d0
    d094:	movea.l d0,a6
    d096:	movea.l 4(sp),a1
    d09a:	jsr -690(a6)
	r -> screenName = readString (fp);
    d09e:	move.l 16(sp),-(sp)
    d0a2:	jsr b02 <readString>
    d0a8:	addq.l #4,sp
    d0aa:	movea.l 8(sp),a0
    d0ae:	move.l d0,(a0)
	return r;
    d0b0:	move.l 8(sp),d0
}
    d0b4:	movea.l (sp)+,a6
    d0b6:	addq.l #8,sp
    d0b8:	rts

0000d0ba <loadObjectType>:

struct objectType * loadObjectType (int i) {
    d0ba:	          lea -84(sp),sp
    d0be:	          move.l a6,-(sp)
    d0c0:	          move.l a2,-(sp)
    int a, nameNum;
    struct objectType * newType = AllocVec(sizeof(struct objectType), MEMF_ANY);
    d0c2:	          moveq #42,d0
    d0c4:	          move.l d0,84(sp)
    d0c8:	          clr.l 80(sp)
    d0cc:	          move.l 1a7a4 <SysBase>,d0
    d0d2:	          movea.l d0,a6
    d0d4:	          move.l 84(sp),d0
    d0d8:	          move.l 80(sp),d1
    d0dc:	          jsr -684(a6)
    d0e0:	          move.l d0,76(sp)
    d0e4:	          move.l 76(sp),d0
    d0e8:	          move.l d0,72(sp)

    if (newType) {
    d0ec:	/-------- beq.w d366 <loadObjectType+0x2ac>
        if (openObjectSlice(i)) {
    d0f0:	|         move.l 96(sp),-(sp)
    d0f4:	|         jsr 6720 <openObjectSlice>
    d0fa:	|         addq.l #4,sp
    d0fc:	|         tst.w d0
    d0fe:	+-------- beq.w d366 <loadObjectType+0x2ac>
            nameNum = get2bytes(bigDataFile);
    d102:	|         move.l 1a78c <bigDataFile>,d0
    d108:	|         move.l d0,-(sp)
    d10a:	|         jsr 6bc <get2bytes>
    d110:	|         addq.l #4,sp
    d112:	|         move.l d0,68(sp)
            newType->r = (BYTE) FGetC(bigDataFile);
    d116:	|         move.l 1a78c <bigDataFile>,64(sp)
    d11e:	|         move.l 1a7ac <DOSBase>,d0
    d124:	|         movea.l d0,a6
    d126:	|         move.l 64(sp),d1
    d12a:	|         jsr -306(a6)
    d12e:	|         move.l d0,60(sp)
    d132:	|         move.l 60(sp),d0
    d136:	|         move.l d0,d0
    d138:	|         movea.l 72(sp),a0
    d13c:	|         move.b d0,12(a0)
            newType->g = (BYTE) FGetC(bigDataFile);
    d140:	|         move.l 1a78c <bigDataFile>,56(sp)
    d148:	|         move.l 1a7ac <DOSBase>,d0
    d14e:	|         movea.l d0,a6
    d150:	|         move.l 56(sp),d1
    d154:	|         jsr -306(a6)
    d158:	|         move.l d0,52(sp)
    d15c:	|         move.l 52(sp),d0
    d160:	|         move.l d0,d0
    d162:	|         movea.l 72(sp),a0
    d166:	|         move.b d0,13(a0)
            newType->b = (BYTE) FGetC(bigDataFile);
    d16a:	|         move.l 1a78c <bigDataFile>,48(sp)
    d172:	|         move.l 1a7ac <DOSBase>,d0
    d178:	|         movea.l d0,a6
    d17a:	|         move.l 48(sp),d1
    d17e:	|         jsr -306(a6)
    d182:	|         move.l d0,44(sp)
    d186:	|         move.l 44(sp),d0
    d18a:	|         move.l d0,d0
    d18c:	|         movea.l 72(sp),a0
    d190:	|         move.b d0,14(a0)
            newType->speechGap = FGetC(bigDataFile);
    d194:	|         move.l 1a78c <bigDataFile>,40(sp)
    d19c:	|         move.l 1a7ac <DOSBase>,d0
    d1a2:	|         movea.l d0,a6
    d1a4:	|         move.l 40(sp),d1
    d1a8:	|         jsr -306(a6)
    d1ac:	|         move.l d0,36(sp)
    d1b0:	|         move.l 36(sp),d0
    d1b4:	|         movea.l 72(sp),a0
    d1b8:	|         move.l d0,20(a0)
            newType->walkSpeed = FGetC(bigDataFile);
    d1bc:	|         move.l 1a78c <bigDataFile>,32(sp)
    d1c4:	|         move.l 1a7ac <DOSBase>,d0
    d1ca:	|         movea.l d0,a6
    d1cc:	|         move.l 32(sp),d1
    d1d0:	|         jsr -306(a6)
    d1d4:	|         move.l d0,28(sp)
    d1d8:	|         move.l 28(sp),d0
    d1dc:	|         movea.l 72(sp),a0
    d1e0:	|         move.l d0,24(a0)
            newType->wrapSpeech = get4bytes(bigDataFile);
    d1e4:	|         move.l 1a78c <bigDataFile>,d0
    d1ea:	|         move.l d0,-(sp)
    d1ec:	|         jsr 718 <get4bytes>
    d1f2:	|         addq.l #4,sp
    d1f4:	|         movea.l 72(sp),a0
    d1f8:	|         move.l d0,28(a0)
            newType->spinSpeed = get2bytes(bigDataFile);
    d1fc:	|         move.l 1a78c <bigDataFile>,d0
    d202:	|         move.l d0,-(sp)
    d204:	|         jsr 6bc <get2bytes>
    d20a:	|         addq.l #4,sp
    d20c:	|         movea.l 72(sp),a0
    d210:	|         move.l d0,32(a0)

            FGetC(bigDataFile);
    d214:	|         move.l 1a78c <bigDataFile>,24(sp)
    d21c:	|         move.l 1a7ac <DOSBase>,d0
    d222:	|         movea.l d0,a6
    d224:	|         move.l 24(sp),d1
    d228:	|         jsr -306(a6)
    d22c:	|         move.l d0,20(sp)
            getFloat(bigDataFile);
    d230:	|         move.l 1a78c <bigDataFile>,d0
    d236:	|         move.l d0,-(sp)
    d238:	|         jsr 7d8 <getFloat>
    d23e:	|         addq.l #4,sp
            getFloat(bigDataFile);
    d240:	|         move.l 1a78c <bigDataFile>,d0
    d246:	|         move.l d0,-(sp)
    d248:	|         jsr 7d8 <getFloat>
    d24e:	|         addq.l #4,sp

            newType->flags = get2bytes(bigDataFile);
    d250:	|         move.l 1a78c <bigDataFile>,d0
    d256:	|         move.l d0,-(sp)
    d258:	|         jsr 6bc <get2bytes>
    d25e:	|         addq.l #4,sp
    d260:	|         move.l d0,d0
    d262:	|         movea.l 72(sp),a0
    d266:	|         move.w d0,36(a0)

            newType->numCom = get2bytes(bigDataFile);
    d26a:	|         move.l 1a78c <bigDataFile>,d0
    d270:	|         move.l d0,-(sp)
    d272:	|         jsr 6bc <get2bytes>
    d278:	|         addq.l #4,sp
    d27a:	|         movea.l 72(sp),a0
    d27e:	|         move.l d0,16(a0)
            newType->allCombis = (newType->numCom) ? AllocVec(sizeof(struct combination) * newType->numCom, MEMF_ANY) : NULL;
    d282:	|         movea.l 72(sp),a0
    d286:	|         move.l 16(a0),d0
    d28a:	|  /----- beq.s d2bc <loadObjectType+0x202>
    d28c:	|  |      movea.l 72(sp),a0
    d290:	|  |      move.l 16(a0),d0
    d294:	|  |      lsl.l #3,d0
    d296:	|  |      move.l d0,16(sp)
    d29a:	|  |      clr.l 12(sp)
    d29e:	|  |      move.l 1a7a4 <SysBase>,d0
    d2a4:	|  |      movea.l d0,a6
    d2a6:	|  |      move.l 16(sp),d0
    d2aa:	|  |      move.l 12(sp),d1
    d2ae:	|  |      jsr -684(a6)
    d2b2:	|  |      move.l d0,8(sp)
    d2b6:	|  |      move.l 8(sp),d0
    d2ba:	|  |  /-- bra.s d2be <loadObjectType+0x204>
    d2bc:	|  \--|-> moveq #0,d0
    d2be:	|     \-> movea.l 72(sp),a0
    d2c2:	|         move.l d0,38(a0)

            for (a = 0; a < newType->numCom; a++) {
    d2c6:	|         clr.l 88(sp)
    d2ca:	|     /-- bra.s d31a <loadObjectType+0x260>
                newType->allCombis[a].withObj = get2bytes(bigDataFile);
    d2cc:	|  /--|-> move.l 1a78c <bigDataFile>,d1
    d2d2:	|  |  |   movea.l 72(sp),a0
    d2d6:	|  |  |   movea.l 38(a0),a0
    d2da:	|  |  |   move.l 88(sp),d0
    d2de:	|  |  |   lsl.l #3,d0
    d2e0:	|  |  |   lea (0,a0,d0.l),a2
    d2e4:	|  |  |   move.l d1,-(sp)
    d2e6:	|  |  |   jsr 6bc <get2bytes>
    d2ec:	|  |  |   addq.l #4,sp
    d2ee:	|  |  |   move.l d0,(a2)
                newType->allCombis[a].funcNum = get2bytes(bigDataFile);
    d2f0:	|  |  |   move.l 1a78c <bigDataFile>,d1
    d2f6:	|  |  |   movea.l 72(sp),a0
    d2fa:	|  |  |   movea.l 38(a0),a0
    d2fe:	|  |  |   move.l 88(sp),d0
    d302:	|  |  |   lsl.l #3,d0
    d304:	|  |  |   lea (0,a0,d0.l),a2
    d308:	|  |  |   move.l d1,-(sp)
    d30a:	|  |  |   jsr 6bc <get2bytes>
    d310:	|  |  |   addq.l #4,sp
    d312:	|  |  |   move.l d0,4(a2)
            for (a = 0; a < newType->numCom; a++) {
    d316:	|  |  |   addq.l #1,88(sp)
    d31a:	|  |  \-> movea.l 72(sp),a0
    d31e:	|  |      move.l 16(a0),d0
    d322:	|  |      cmp.l 88(sp),d0
    d326:	|  \----- bgt.s d2cc <loadObjectType+0x212>
            }
            finishAccess();
    d328:	|         jsr 6550 <finishAccess>
            newType->screenName = getNumberedString(nameNum);
    d32e:	|         move.l 68(sp),-(sp)
    d332:	|         jsr 655a <getNumberedString>
    d338:	|         addq.l #4,sp
    d33a:	|         movea.l 72(sp),a0
    d33e:	|         move.l d0,(a0)
            newType->objectNum = i;
    d340:	|         movea.l 72(sp),a0
    d344:	|         move.l 96(sp),4(a0)
            newType->next = allObjectTypes;
    d34a:	|         move.l 1a8aa <allObjectTypes>,d0
    d350:	|         movea.l 72(sp),a0
    d354:	|         move.l d0,8(a0)
            allObjectTypes = newType;
    d358:	|         move.l 72(sp),1a8aa <allObjectTypes>
            return newType;
    d360:	|         move.l 72(sp),d0
    d364:	|     /-- bra.s d368 <loadObjectType+0x2ae>
        }
    }
    return NULL;
    d366:	\-----|-> moveq #0,d0
}
    d368:	      \-> movea.l (sp)+,a2
    d36a:	          movea.l (sp)+,a6
    d36c:	          lea 84(sp),sp
    d370:	          rts

0000d372 <removeObjectType>:


void removeObjectType (struct objectType * oT) {
    d372:	             lea -16(sp),sp
    d376:	             move.l a6,-(sp)
	struct objectType * * huntRegion = &allObjectTypes;
    d378:	             move.l #108714,16(sp)

	while (* huntRegion) {
    d380:	   /-------- bra.s d3f4 <removeObjectType+0x82>
		if ((* huntRegion) == oT) {
    d382:	/--|-------> movea.l 16(sp),a0
    d386:	|  |         move.l (a0),d0
    d388:	|  |         cmp.l 24(sp),d0
    d38c:	|  |  /----- bne.s d3e6 <removeObjectType+0x74>
//			FILE * debuggy2 = fopen ("debug.txt", "at");
//			fprintf (debuggy2, "DELETING OBJECT TYPE: %p %s\n", oT, oT -> screenName);
//			fclose (debuggy2);

			* huntRegion = oT -> next;
    d38e:	|  |  |      movea.l 24(sp),a0
    d392:	|  |  |      move.l 8(a0),d0
    d396:	|  |  |      movea.l 16(sp),a0
    d39a:	|  |  |      move.l d0,(a0)
			FreeVec(oT -> allCombis);
    d39c:	|  |  |      movea.l 24(sp),a0
    d3a0:	|  |  |      move.l 38(a0),12(sp)
    d3a6:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d3ac:	|  |  |      movea.l d0,a6
    d3ae:	|  |  |      movea.l 12(sp),a1
    d3b2:	|  |  |      jsr -690(a6)
			FreeVec(oT -> screenName);
    d3b6:	|  |  |      movea.l 24(sp),a0
    d3ba:	|  |  |      move.l (a0),8(sp)
    d3be:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d3c4:	|  |  |      movea.l d0,a6
    d3c6:	|  |  |      movea.l 8(sp),a1
    d3ca:	|  |  |      jsr -690(a6)
			FreeVec(oT);
    d3ce:	|  |  |      move.l 24(sp),4(sp)
    d3d4:	|  |  |      move.l 1a7a4 <SysBase>,d0
    d3da:	|  |  |      movea.l d0,a6
    d3dc:	|  |  |      movea.l 4(sp),a1
    d3e0:	|  |  |      jsr -690(a6)
			return;
    d3e4:	|  |  |  /-- bra.s d40a <removeObjectType+0x98>
		} else {
			huntRegion = & ((* huntRegion) -> next);
    d3e6:	|  |  \--|-> movea.l 16(sp),a0
    d3ea:	|  |     |   move.l (a0),d0
    d3ec:	|  |     |   move.l d0,d1
    d3ee:	|  |     |   addq.l #8,d1
    d3f0:	|  |     |   move.l d1,16(sp)
	while (* huntRegion) {
    d3f4:	|  \-----|-> movea.l 16(sp),a0
    d3f8:	|        |   move.l (a0),d0
    d3fa:	\--------|-- bne.s d382 <removeObjectType+0x10>
		}
	}
	KPrintF("Can't delete object type: bad pointer");
    d3fc:	         |   pea 18fcb <PutChar+0x1899>
    d402:	         |   jsr 16c5e <KPrintF>
    d408:	         |   addq.l #4,sp
}
    d40a:	         \-> movea.l (sp)+,a6
    d40c:	             lea 16(sp),sp
    d410:	             rts

0000d412 <saveObjectRef>:

void saveObjectRef (struct objectType * r, BPTR fp) {
	put2bytes (r -> objectNum, fp);
    d412:	movea.l 4(sp),a0
    d416:	move.l 4(a0),d0
    d41a:	move.l 8(sp),-(sp)
    d41e:	move.l d0,-(sp)
    d420:	jsr 8d0 <put2bytes>
    d426:	addq.l #8,sp
	writeString (r -> screenName, fp);
    d428:	movea.l 4(sp),a0
    d42c:	move.l (a0),d0
    d42e:	move.l 8(sp),-(sp)
    d432:	move.l d0,-(sp)
    d434:	jsr bd8 <writeString>
    d43a:	addq.l #8,sp
    d43c:	nop
    d43e:	rts

0000d440 <fileToStack>:

char encode1 = 0;
char encode2 = 0;
unsigned short saveEncoding = FALSE;

BOOL fileToStack(char *filename, struct stackHandler *sH) {
    d440:	                         lea -112(sp),sp
    d444:	                         move.l a6,-(sp)
    d446:	                         move.l d2,-(sp)
    struct variable stringVar;
    stringVar.varType = SVT_NULL;
    d448:	                         clr.l 10(sp)
    const char *checker = saveEncoding ? "[Custom data (encoded)]\r\n" : "[Custom data (ASCII)]\n";
    d44c:	                         move.w 1a8b0 <saveEncoding>,d0
    d452:	                  /----- beq.s d45c <fileToStack+0x1c>
    d454:	                  |      move.l #102385,d0
    d45a:	                  |  /-- bra.s d462 <fileToStack+0x22>
    d45c:	                  \--|-> move.l #102411,d0
    d462:	                     \-> move.l d0,116(sp)

    BPTR fp = Open(filename, MODE_OLDFILE);
    d466:	                         move.l 124(sp),112(sp)
    d46c:	                         move.l #1005,108(sp)
    d474:	                         move.l 1a7ac <DOSBase>,d0
    d47a:	                         movea.l d0,a6
    d47c:	                         move.l 112(sp),d1
    d480:	                         move.l 108(sp),d2
    d484:	                         jsr -30(a6)
    d488:	                         move.l d0,104(sp)
    d48c:	                         move.l 104(sp),d0
    d490:	                         move.l d0,100(sp)
    if (!fp) {
    d494:	                     /-- bne.s d4ae <fileToStack+0x6e>
        KPrintF("No such file", filename);
    d496:	                     |   move.l 124(sp),-(sp)
    d49a:	                     |   pea 19022 <line.c.05397aaf+0x40>
    d4a0:	                     |   jsr 16c5e <KPrintF>
    d4a6:	                     |   addq.l #8,sp
        return FALSE;
    d4a8:	                     |   clr.w d0
    d4aa:	/--------------------|-- bra.w d7a4 <fileToStack+0x364>
    }

    encode1 = (unsigned char)saveEncoding & 255;
    d4ae:	|                    \-> move.w 1a8b0 <saveEncoding>,d0
    d4b4:	|                        move.l d0,d0
    d4b6:	|                        move.b d0,1a8ae <encode1>
    encode2 = (unsigned char)(saveEncoding >> 8);
    d4bc:	|                        move.w 1a8b0 <saveEncoding>,d0
    d4c2:	|                        lsr.w #8,d0
    d4c4:	|                        move.l d0,d0
    d4c6:	|                        move.b d0,1a8af <encode2>

    while (*checker) {
    d4cc:	|                 /----- bra.s d530 <fileToStack+0xf0>
        if (FGetC(fp) != *checker) {
    d4ce:	|              /--|----> move.l 100(sp),30(sp)
    d4d4:	|              |  |      move.l 1a7ac <DOSBase>,d0
    d4da:	|              |  |      movea.l d0,a6
    d4dc:	|              |  |      move.l 30(sp),d1
    d4e0:	|              |  |      jsr -306(a6)
    d4e4:	|              |  |      move.l d0,26(sp)
    d4e8:	|              |  |      move.l 26(sp),d1
    d4ec:	|              |  |      movea.l 116(sp),a0
    d4f0:	|              |  |      move.b (a0),d0
    d4f2:	|              |  |      ext.w d0
    d4f4:	|              |  |      movea.w d0,a0
    d4f6:	|              |  |      cmpa.l d1,a0
    d4f8:	|              |  |  /-- beq.s d52c <fileToStack+0xec>
            Close(fp);
    d4fa:	|              |  |  |   move.l 100(sp),22(sp)
    d500:	|              |  |  |   move.l 1a7ac <DOSBase>,d0
    d506:	|              |  |  |   movea.l d0,a6
    d508:	|              |  |  |   move.l 22(sp),d1
    d50c:	|              |  |  |   jsr -36(a6)
    d510:	|              |  |  |   move.l d0,18(sp)
            KPrintF(LOAD_ERROR "This isn't a SLUDGE custom data file:", filename);
    d514:	|              |  |  |   move.l 124(sp),-(sp)
    d518:	|              |  |  |   pea 1902f <line.c.05397aaf+0x4d>
    d51e:	|              |  |  |   jsr 16c5e <KPrintF>
    d524:	|              |  |  |   addq.l #8,sp
            return FALSE;
    d526:	|              |  |  |   clr.w d0
    d528:	+--------------|--|--|-- bra.w d7a4 <fileToStack+0x364>
        }
        checker++;
    d52c:	|              |  |  \-> addq.l #1,116(sp)
    while (*checker) {
    d530:	|              |  \----> movea.l 116(sp),a0
    d534:	|              |         move.b (a0),d0
    d536:	|              \-------- bne.s d4ce <fileToStack+0x8e>
    }

    if (saveEncoding) {
    d538:	|                        move.w 1a8b0 <saveEncoding>,d0
    d53e:	|  /-------------------- beq.s d5b2 <fileToStack+0x172>
        char *checker = readStringEncoded(fp);
    d540:	|  |                     move.l 100(sp),-(sp)
    d544:	|  |                     jsr d7ae <readStringEncoded>
    d54a:	|  |                     addq.l #4,sp
    d54c:	|  |                     move.l d0,96(sp)
        if (strcmp(checker, "UN�LO�CKED")) {
    d550:	|  |                     pea 19070 <line.c.05397aaf+0x8e>
    d556:	|  |                     move.l 100(sp),-(sp)
    d55a:	|  |                     jsr 1370c <strcmp>
    d560:	|  |                     addq.l #8,sp
    d562:	|  |                     tst.l d0
    d564:	|  |                 /-- beq.s d598 <fileToStack+0x158>
            Close(fp);
    d566:	|  |                 |   move.l 100(sp),88(sp)
    d56c:	|  |                 |   move.l 1a7ac <DOSBase>,d0
    d572:	|  |                 |   movea.l d0,a6
    d574:	|  |                 |   move.l 88(sp),d1
    d578:	|  |                 |   jsr -36(a6)
    d57c:	|  |                 |   move.l d0,84(sp)
            KPrintF(LOAD_ERROR "The current file encoding setting does not match the encoding setting used when this file was created:", filename);
    d580:	|  |                 |   move.l 124(sp),-(sp)
    d584:	|  |                 |   pea 1907f <line.c.05397aaf+0x9d>
    d58a:	|  |                 |   jsr 16c5e <KPrintF>
    d590:	|  |                 |   addq.l #8,sp
            return FALSE;
    d592:	|  |                 |   clr.w d0
    d594:	+--|-----------------|-- bra.w d7a4 <fileToStack+0x364>
        }
        FreeVec(checker);
    d598:	|  |                 \-> move.l 96(sp),92(sp)
    d59e:	|  |                     move.l 1a7a4 <SysBase>,d0
    d5a4:	|  |                     movea.l d0,a6
    d5a6:	|  |                     movea.l 92(sp),a1
    d5aa:	|  |                     jsr -690(a6)
        checker = NULL;
    d5ae:	|  |                     clr.l 96(sp)
    }

    for (;;) {
        if (saveEncoding) {
    d5b2:	|  >-------------------> move.w 1a8b0 <saveEncoding>,d0
    d5b8:	|  |     /-------------- beq.w d6ec <fileToStack+0x2ac>
            LONG tmp = FGetC(fp) ^ encode1;
    d5bc:	|  |     |               move.l 100(sp),76(sp)
    d5c2:	|  |     |               move.l 1a7ac <DOSBase>,d0
    d5c8:	|  |     |               movea.l d0,a6
    d5ca:	|  |     |               move.l 76(sp),d1
    d5ce:	|  |     |               jsr -306(a6)
    d5d2:	|  |     |               move.l d0,72(sp)
    d5d6:	|  |     |               move.l 72(sp),d0
    d5da:	|  |     |               move.b 1a8ae <encode1>,d1
    d5e0:	|  |     |               ext.w d1
    d5e2:	|  |     |               ext.l d1
    d5e4:	|  |     |               move.l d0,d2
    d5e6:	|  |     |               eor.l d1,d2
    d5e8:	|  |     |               move.l d2,68(sp)

            if (tmp == -1) break;
    d5ec:	|  |     |               moveq #-1,d0
    d5ee:	|  |     |               cmp.l 68(sp),d0
    d5f2:	|  |  /--|-------------- beq.w d782 <fileToStack+0x342>

            char i = (char) tmp;
    d5f6:	|  |  |  |               move.b 71(sp),67(sp)

            switch (i) {
    d5fc:	|  |  |  |               move.b 67(sp),d0
    d600:	|  |  |  |               ext.w d0
    d602:	|  |  |  |               movea.w d0,a0
    d604:	|  |  |  |               moveq #2,d2
    d606:	|  |  |  |               cmp.l a0,d2
    d608:	|  |  |  |     /-------- beq.s d684 <fileToStack+0x244>
    d60a:	|  |  |  |     |         moveq #2,d0
    d60c:	|  |  |  |     |         cmp.l a0,d0
    d60e:	|  |  |  |  /--|-------- blt.w d6ba <fileToStack+0x27a>
    d612:	|  |  |  |  |  |         cmpa.w #0,a0
    d616:	|  |  |  |  |  |     /-- beq.s d622 <fileToStack+0x1e2>
    d618:	|  |  |  |  |  |     |   moveq #1,d2
    d61a:	|  |  |  |  |  |     |   cmp.l a0,d2
    d61c:	|  |  |  |  |  |  /--|-- beq.s d65e <fileToStack+0x21e>
    d61e:	|  |  |  |  +--|--|--|-- bra.w d6ba <fileToStack+0x27a>
                case 0: {
                    char *g = readStringEncoded(fp);
    d622:	|  |  |  |  |  |  |  \-> move.l 100(sp),-(sp)
    d626:	|  |  |  |  |  |  |      jsr d7ae <readStringEncoded>
    d62c:	|  |  |  |  |  |  |      addq.l #4,sp
    d62e:	|  |  |  |  |  |  |      move.l d0,54(sp)
                    makeTextVar(&stringVar, g);
    d632:	|  |  |  |  |  |  |      move.l 54(sp),-(sp)
    d636:	|  |  |  |  |  |  |      lea 14(sp),a0
    d63a:	|  |  |  |  |  |  |      move.l a0,-(sp)
    d63c:	|  |  |  |  |  |  |      jsr 14482 <makeTextVar>
    d642:	|  |  |  |  |  |  |      addq.l #8,sp
                    FreeVec(g);
    d644:	|  |  |  |  |  |  |      move.l 54(sp),50(sp)
    d64a:	|  |  |  |  |  |  |      move.l 1a7a4 <SysBase>,d0
    d650:	|  |  |  |  |  |  |      movea.l d0,a6
    d652:	|  |  |  |  |  |  |      movea.l 50(sp),a1
    d656:	|  |  |  |  |  |  |      jsr -690(a6)
                }
                break;
    d65a:	|  |  |  |  |  |  |  /-- bra.w d712 <fileToStack+0x2d2>

                case 1:
                    setVariable(&stringVar, SVT_INT, get4bytes(fp));
    d65e:	|  |  |  |  |  |  \--|-> move.l 100(sp),-(sp)
    d662:	|  |  |  |  |  |     |   jsr 718 <get4bytes>
    d668:	|  |  |  |  |  |     |   addq.l #4,sp
    d66a:	|  |  |  |  |  |     |   move.l d0,-(sp)
    d66c:	|  |  |  |  |  |     |   pea 1 <_start+0x1>
    d670:	|  |  |  |  |  |     |   lea 18(sp),a0
    d674:	|  |  |  |  |  |     |   move.l a0,-(sp)
    d676:	|  |  |  |  |  |     |   jsr 14b52 <setVariable>
    d67c:	|  |  |  |  |  |     |   lea 12(sp),sp
                    break;
    d680:	|  |  |  |  |  |     +-- bra.w d712 <fileToStack+0x2d2>

                case 2:
                    setVariable(&stringVar, SVT_INT, FGetC(fp));
    d684:	|  |  |  |  |  \-----|-> move.l 100(sp),62(sp)
    d68a:	|  |  |  |  |        |   move.l 1a7ac <DOSBase>,d0
    d690:	|  |  |  |  |        |   movea.l d0,a6
    d692:	|  |  |  |  |        |   move.l 62(sp),d1
    d696:	|  |  |  |  |        |   jsr -306(a6)
    d69a:	|  |  |  |  |        |   move.l d0,58(sp)
    d69e:	|  |  |  |  |        |   move.l 58(sp),d0
    d6a2:	|  |  |  |  |        |   move.l d0,-(sp)
    d6a4:	|  |  |  |  |        |   pea 1 <_start+0x1>
    d6a8:	|  |  |  |  |        |   lea 18(sp),a0
    d6ac:	|  |  |  |  |        |   move.l a0,-(sp)
    d6ae:	|  |  |  |  |        |   jsr 14b52 <setVariable>
    d6b4:	|  |  |  |  |        |   lea 12(sp),sp
                    break;
    d6b8:	|  |  |  |  |        +-- bra.s d712 <fileToStack+0x2d2>

                default:
                    KPrintF(LOAD_ERROR "Corrupt custom data file:", filename);
    d6ba:	|  |  |  |  \--------|-> move.l 124(sp),-(sp)
    d6be:	|  |  |  |           |   pea 19101 <line.c.05397aaf+0x11f>
    d6c4:	|  |  |  |           |   jsr 16c5e <KPrintF>
    d6ca:	|  |  |  |           |   addq.l #8,sp
                    Close(fp);
    d6cc:	|  |  |  |           |   move.l 100(sp),46(sp)
    d6d2:	|  |  |  |           |   move.l 1a7ac <DOSBase>,d0
    d6d8:	|  |  |  |           |   movea.l d0,a6
    d6da:	|  |  |  |           |   move.l 46(sp),d1
    d6de:	|  |  |  |           |   jsr -36(a6)
    d6e2:	|  |  |  |           |   move.l d0,42(sp)
                    return FALSE;
    d6e6:	|  |  |  |           |   clr.w d0
    d6e8:	+--|--|--|-----------|-- bra.w d7a4 <fileToStack+0x364>
            }
        } else {
            char *line = readTextPlain(fp);
    d6ec:	|  |  |  \-----------|-> move.l 100(sp),-(sp)
    d6f0:	|  |  |              |   jsr d874 <readTextPlain>
    d6f6:	|  |  |              |   addq.l #4,sp
    d6f8:	|  |  |              |   move.l d0,80(sp)
            if (!line) break;
    d6fc:	|  |  |        /-----|-- beq.w d786 <fileToStack+0x346>
            makeTextVar(&stringVar, line);
    d700:	|  |  |        |     |   move.l 80(sp),-(sp)
    d704:	|  |  |        |     |   lea 14(sp),a0
    d708:	|  |  |        |     |   move.l a0,-(sp)
    d70a:	|  |  |        |     |   jsr 14482 <makeTextVar>
    d710:	|  |  |        |     |   addq.l #8,sp
        }

        if (sH->first == NULL) {
    d712:	|  |  |        |     \-> movea.l 128(sp),a0
    d716:	|  |  |        |         move.l (a0),d0
    d718:	|  |  |        |  /----- bne.s d748 <fileToStack+0x308>
            // Adds to the TOP of the array... oops!
            if (!addVarToStackQuick(&stringVar, &sH->first)) return FALSE;
    d71a:	|  |  |        |  |      move.l 128(sp),d0
    d71e:	|  |  |        |  |      move.l d0,-(sp)
    d720:	|  |  |        |  |      lea 14(sp),a0
    d724:	|  |  |        |  |      move.l a0,-(sp)
    d726:	|  |  |        |  |      jsr 13b22 <addVarToStackQuick>
    d72c:	|  |  |        |  |      addq.l #8,sp
    d72e:	|  |  |        |  |      tst.w d0
    d730:	|  |  |        |  |  /-- bne.s d736 <fileToStack+0x2f6>
    d732:	|  |  |        |  |  |   clr.w d0
    d734:	+--|--|--------|--|--|-- bra.s d7a4 <fileToStack+0x364>
            sH->last = sH->first;
    d736:	|  |  |        |  |  \-> movea.l 128(sp),a0
    d73a:	|  |  |        |  |      move.l (a0),d0
    d73c:	|  |  |        |  |      movea.l 128(sp),a0
    d740:	|  |  |        |  |      move.l d0,4(a0)
    d744:	|  +--|--------|--|----- bra.w d5b2 <fileToStack+0x172>
        } else {
            // Adds to the END of the array... much better
            if (!addVarToStackQuick(&stringVar, &sH->last->next)) return FALSE;
    d748:	|  |  |        |  \----> movea.l 128(sp),a0
    d74c:	|  |  |        |         move.l 4(a0),d0
    d750:	|  |  |        |         addq.l #8,d0
    d752:	|  |  |        |         move.l d0,-(sp)
    d754:	|  |  |        |         lea 14(sp),a0
    d758:	|  |  |        |         move.l a0,-(sp)
    d75a:	|  |  |        |         jsr 13b22 <addVarToStackQuick>
    d760:	|  |  |        |         addq.l #8,sp
    d762:	|  |  |        |         tst.w d0
    d764:	|  |  |        |     /-- bne.s d76a <fileToStack+0x32a>
    d766:	|  |  |        |     |   clr.w d0
    d768:	+--|--|--------|-----|-- bra.s d7a4 <fileToStack+0x364>
            sH->last = sH->last->next;
    d76a:	|  |  |        |     \-> movea.l 128(sp),a0
    d76e:	|  |  |        |         movea.l 4(a0),a0
    d772:	|  |  |        |         move.l 8(a0),d0
    d776:	|  |  |        |         movea.l 128(sp),a0
    d77a:	|  |  |        |         move.l d0,4(a0)
        if (saveEncoding) {
    d77e:	|  \--|--------|-------- bra.w d5b2 <fileToStack+0x172>
            if (tmp == -1) break;
    d782:	|     \--------|-------> nop
    d784:	|              |     /-- bra.s d788 <fileToStack+0x348>
            if (!line) break;
    d786:	|              \-----|-> nop
        }
    }
    Close(fp);
    d788:	|                    \-> move.l 100(sp),38(sp)
    d78e:	|                        move.l 1a7ac <DOSBase>,d0
    d794:	|                        movea.l d0,a6
    d796:	|                        move.l 38(sp),d1
    d79a:	|                        jsr -36(a6)
    d79e:	|                        move.l d0,34(sp)
    return TRUE;
    d7a2:	|                        moveq #1,d0
}
    d7a4:	\----------------------> move.l (sp)+,d2
    d7a6:	                         movea.l (sp)+,a6
    d7a8:	                         lea 112(sp),sp
    d7ac:	                         rts

0000d7ae <readStringEncoded>:

char *readStringEncoded(BPTR fp) {
    d7ae:	          lea -32(sp),sp
    d7b2:	          move.l a6,-(sp)
    d7b4:	          move.l d2,-(sp)
    int a, len = get2bytes(fp);
    d7b6:	          move.l 44(sp),-(sp)
    d7ba:	          jsr 6bc <get2bytes>
    d7c0:	          addq.l #4,sp
    d7c2:	          move.l d0,32(sp)
    char *s = AllocVec(len + 1, MEMF_ANY);
    d7c6:	          move.l 32(sp),d0
    d7ca:	          addq.l #1,d0
    d7cc:	          move.l d0,28(sp)
    d7d0:	          clr.l 24(sp)
    d7d4:	          move.l 1a7a4 <SysBase>,d0
    d7da:	          movea.l d0,a6
    d7dc:	          move.l 28(sp),d0
    d7e0:	          move.l 24(sp),d1
    d7e4:	          jsr -684(a6)
    d7e8:	          move.l d0,20(sp)
    d7ec:	          move.l 20(sp),d0
    d7f0:	          move.l d0,16(sp)
    if (!s) return NULL;
    d7f4:	      /-- bne.s d7fa <readStringEncoded+0x4c>
    d7f6:	      |   moveq #0,d0
    d7f8:	/-----|-- bra.s d86a <readStringEncoded+0xbc>
    for (a = 0; a < len; a++) {
    d7fa:	|     \-> clr.l 36(sp)
    d7fe:	|     /-- bra.s d850 <readStringEncoded+0xa2>
        s[a] = (char)(FGetC(fp) ^ encode1);
    d800:	|  /--|-> move.l 44(sp),12(sp)
    d806:	|  |  |   move.l 1a7ac <DOSBase>,d0
    d80c:	|  |  |   movea.l d0,a6
    d80e:	|  |  |   move.l 12(sp),d1
    d812:	|  |  |   jsr -306(a6)
    d816:	|  |  |   move.l d0,8(sp)
    d81a:	|  |  |   move.l 8(sp),d0
    d81e:	|  |  |   move.l d0,d1
    d820:	|  |  |   move.b 1a8ae <encode1>,d2
    d826:	|  |  |   move.l 36(sp),d0
    d82a:	|  |  |   movea.l 16(sp),a0
    d82e:	|  |  |   adda.l d0,a0
    d830:	|  |  |   move.b d1,d0
    d832:	|  |  |   eor.b d2,d0
    d834:	|  |  |   move.b d0,(a0)
        encode1 += encode2;
    d836:	|  |  |   move.b 1a8ae <encode1>,d0
    d83c:	|  |  |   move.b d0,d1
    d83e:	|  |  |   move.b 1a8af <encode2>,d0
    d844:	|  |  |   add.b d1,d0
    d846:	|  |  |   move.b d0,1a8ae <encode1>
    for (a = 0; a < len; a++) {
    d84c:	|  |  |   addq.l #1,36(sp)
    d850:	|  |  \-> move.l 36(sp),d0
    d854:	|  |      cmp.l 32(sp),d0
    d858:	|  \----- blt.s d800 <readStringEncoded+0x52>
    }
    s[len] = 0;
    d85a:	|         move.l 32(sp),d0
    d85e:	|         movea.l 16(sp),a0
    d862:	|         adda.l d0,a0
    d864:	|         clr.b (a0)
    return s;
    d866:	|         move.l 16(sp),d0
}
    d86a:	\-------> move.l (sp)+,d2
    d86c:	          movea.l (sp)+,a6
    d86e:	          lea 32(sp),sp
    d872:	          rts

0000d874 <readTextPlain>:

char *readTextPlain(BPTR fp) {
    d874:	             lea -104(sp),sp
    d878:	             movem.l d2-d4/a6,-(sp)
    ULONG startPos;
    int stringSize = 0;
    d87c:	             clr.l 116(sp)
    BOOL keepGoing = TRUE;
    d880:	             move.w #1,114(sp)
    char gotChar;
    char *reply;

    startPos = Seek(fp, 0, OFFSET_CURRENT);
    d886:	             move.l 124(sp),106(sp)
    d88c:	             clr.l 102(sp)
    d890:	             clr.l 98(sp)
    d894:	             move.l 1a7ac <DOSBase>,d0
    d89a:	             movea.l d0,a6
    d89c:	             move.l 106(sp),d1
    d8a0:	             move.l 102(sp),d2
    d8a4:	             move.l 98(sp),d3
    d8a8:	             jsr -66(a6)
    d8ac:	             move.l d0,94(sp)
    d8b0:	             move.l 94(sp),d0
    d8b4:	             move.l d0,90(sp)

    LONG tmp;
    while (keepGoing) {
    d8b8:	   /-------- bra.s d8fc <readTextPlain+0x88>
        tmp = FGetC(fp);
    d8ba:	/--|-------> move.l 124(sp),22(sp)
    d8c0:	|  |         move.l 1a7ac <DOSBase>,d0
    d8c6:	|  |         movea.l d0,a6
    d8c8:	|  |         move.l 22(sp),d1
    d8cc:	|  |         jsr -306(a6)
    d8d0:	|  |         move.l d0,18(sp)
    d8d4:	|  |         move.l 18(sp),d0
    d8d8:	|  |         move.l d0,110(sp)
        char gotChar = (char) tmp;
    d8dc:	|  |         move.b 113(sp),17(sp)
        if (gotChar == '\n' || tmp == -1) {
    d8e2:	|  |         cmpi.b #10,17(sp)
    d8e8:	|  |  /----- beq.s d8f2 <readTextPlain+0x7e>
    d8ea:	|  |  |      moveq #-1,d0
    d8ec:	|  |  |      cmp.l 110(sp),d0
    d8f0:	|  |  |  /-- bne.s d8f8 <readTextPlain+0x84>
            keepGoing = FALSE;
    d8f2:	|  |  \--|-> clr.w 114(sp)
    d8f6:	|  +-----|-- bra.s d8fc <readTextPlain+0x88>
        } else {
            stringSize++;
    d8f8:	|  |     \-> addq.l #1,116(sp)
    while (keepGoing) {
    d8fc:	|  \-------> tst.w 114(sp)
    d900:	\----------- bne.s d8ba <readTextPlain+0x46>
        }
    }

    if ((stringSize == 0) && tmp == -1) {
    d902:	             tst.l 116(sp)
    d906:	         /-- bne.s d916 <readTextPlain+0xa2>
    d908:	         |   moveq #-1,d0
    d90a:	         |   cmp.l 110(sp),d0
    d90e:	         +-- bne.s d916 <readTextPlain+0xa2>
        return NULL;
    d910:	         |   moveq #0,d0
    d912:	      /--|-- bra.w d9fc <readTextPlain+0x188>
    } else {
        Seek(fp, startPos, OFFSET_BEGINNING);
    d916:	      |  \-> move.l 124(sp),86(sp)
    d91c:	      |      move.l 90(sp),82(sp)
    d922:	      |      moveq #-1,d0
    d924:	      |      move.l d0,78(sp)
    d928:	      |      move.l 1a7ac <DOSBase>,d0
    d92e:	      |      movea.l d0,a6
    d930:	      |      move.l 86(sp),d1
    d934:	      |      move.l 82(sp),d2
    d938:	      |      move.l 78(sp),d3
    d93c:	      |      jsr -66(a6)
    d940:	      |      move.l d0,74(sp)
        reply = AllocVec(stringSize + 1, MEMF_ANY);
    d944:	      |      move.l 116(sp),d0
    d948:	      |      addq.l #1,d0
    d94a:	      |      move.l d0,70(sp)
    d94e:	      |      clr.l 66(sp)
    d952:	      |      move.l 1a7a4 <SysBase>,d0
    d958:	      |      movea.l d0,a6
    d95a:	      |      move.l 70(sp),d0
    d95e:	      |      move.l 66(sp),d1
    d962:	      |      jsr -684(a6)
    d966:	      |      move.l d0,62(sp)
    d96a:	      |      move.l 62(sp),d0
    d96e:	      |      move.l d0,58(sp)
        if (reply == NULL) return NULL;
    d972:	      |  /-- bne.s d97a <readTextPlain+0x106>
    d974:	      |  |   moveq #0,d0
    d976:	      +--|-- bra.w d9fc <readTextPlain+0x188>
        int bytesRead = FRead(fp, reply, 1, stringSize);
    d97a:	      |  \-> move.l 124(sp),54(sp)
    d980:	      |      move.l 58(sp),50(sp)
    d986:	      |      moveq #1,d0
    d988:	      |      move.l d0,46(sp)
    d98c:	      |      move.l 116(sp),42(sp)
    d992:	      |      move.l 1a7ac <DOSBase>,d0
    d998:	      |      movea.l d0,a6
    d99a:	      |      move.l 54(sp),d1
    d99e:	      |      move.l 50(sp),d2
    d9a2:	      |      move.l 46(sp),d3
    d9a6:	      |      move.l 42(sp),d4
    d9aa:	      |      jsr -324(a6)
    d9ae:	      |      move.l d0,38(sp)
    d9b2:	      |      move.l 38(sp),d0
    d9b6:	      |      move.l d0,34(sp)
        if (bytesRead != stringSize) {
    d9ba:	      |      move.l 34(sp),d0
    d9be:	      |      cmp.l 116(sp),d0
    d9c2:	      |  /-- beq.s d9d2 <readTextPlain+0x15e>
            KPrintF("Reading error in readTextPlain.\n");
    d9c4:	      |  |   pea 19136 <line.c.05397aaf+0x154>
    d9ca:	      |  |   jsr 16c5e <KPrintF>
    d9d0:	      |  |   addq.l #4,sp
        }
        FGetC(fp); // Skip the newline character
    d9d2:	      |  \-> move.l 124(sp),30(sp)
    d9d8:	      |      move.l 1a7ac <DOSBase>,d0
    d9de:	      |      movea.l d0,a6
    d9e0:	      |      move.l 30(sp),d1
    d9e4:	      |      jsr -306(a6)
    d9e8:	      |      move.l d0,26(sp)
        reply[stringSize] = 0;
    d9ec:	      |      move.l 116(sp),d0
    d9f0:	      |      movea.l 58(sp),a0
    d9f4:	      |      adda.l d0,a0
    d9f6:	      |      clr.b (a0)
    }

    return reply;
    d9f8:	      |      move.l 58(sp),d0
}
    d9fc:	      \----> movem.l (sp)+,d2-d4/a6
    da00:	             lea 104(sp),sp
    da04:	             rts

0000da06 <stackToFile>:


BOOL stackToFile (char * filename, const struct variable * from) {
    da06:	                      lea -144(sp),sp
    da0a:	                      movem.l d2-d3/a6,-(sp)
    BPTR fp = Open( filename, MODE_NEWFILE);
    da0e:	                      move.l 160(sp),148(sp)
    da14:	                      move.l #1006,144(sp)
    da1c:	                      move.l 1a7ac <DOSBase>,d0
    da22:	                      movea.l d0,a6
    da24:	                      move.l 148(sp),d1
    da28:	                      move.l 144(sp),d2
    da2c:	                      jsr -30(a6)
    da30:	                      move.l d0,140(sp)
    da34:	                      move.l 140(sp),d0
    da38:	                      move.l d0,136(sp)

    if (!fp) {
    da3c:	                  /-- bne.s da56 <stackToFile+0x50>
        KPrintF("Can't create file", filename);
    da3e:	                  |   move.l 160(sp),-(sp)
    da42:	                  |   pea 19157 <line.c.05397aaf+0x175>
    da48:	                  |   jsr 16c5e <KPrintF>
    da4e:	                  |   addq.l #8,sp
        return FALSE;
    da50:	                  |   clr.w d0
    da52:	/-----------------|-- bra.w dd12 <stackToFile+0x30c>
    }

    struct variableStack * hereWeAre = from->varData.theStack->first;
    da56:	|                 \-> movea.l 164(sp),a0
    da5a:	|                     movea.l 4(a0),a0
    da5e:	|                     move.l (a0),152(sp)

    encode1 = (unsigned char) saveEncoding & 255;
    da62:	|                     move.w 1a8b0 <saveEncoding>,d0
    da68:	|                     move.l d0,d0
    da6a:	|                     move.b d0,1a8ae <encode1>
    encode2 = (unsigned char) (saveEncoding >> 8);
    da70:	|                     move.w 1a8b0 <saveEncoding>,d0
    da76:	|                     lsr.w #8,d0
    da78:	|                     move.l d0,d0
    da7a:	|                     move.b d0,1a8af <encode2>

    if (saveEncoding) {
    da80:	|                     move.w 1a8b0 <saveEncoding>,d0
    da86:	|                 /-- beq.s dad8 <stackToFile+0xd2>
        FPrintf(fp, "[Custom data (encoded)]\r\n");
    da88:	|                 |   move.l 136(sp),116(sp)
    da8e:	|                 |   move.l #102385,112(sp)
    da96:	|                 |   moveq #99,d0
    da98:	|                 |   not.b d0
    da9a:	|                 |   add.l sp,d0
    da9c:	|                 |   addi.l #-144,d0
    daa2:	|                 |   move.l d0,108(sp)
    daa6:	|                 |   move.l 1a7ac <DOSBase>,d0
    daac:	|                 |   movea.l d0,a6
    daae:	|                 |   move.l 116(sp),d1
    dab2:	|                 |   move.l 112(sp),d2
    dab6:	|                 |   move.l 108(sp),d3
    daba:	|                 |   jsr -354(a6)
    dabe:	|                 |   move.l d0,104(sp)
        writeStringEncoded("UN�LO�CKED", fp);
    dac2:	|                 |   move.l 136(sp),-(sp)
    dac6:	|                 |   pea 19070 <line.c.05397aaf+0x8e>
    dacc:	|                 |   jsr dd1c <writeStringEncoded>
    dad2:	|                 |   addq.l #8,sp
    dad4:	|  /--------------|-- bra.w dcea <stackToFile+0x2e4>
    } else {
        FPrintf(fp, "[Custom data (ASCII)]\n");
    dad8:	|  |              \-> move.l 136(sp),132(sp)
    dade:	|  |                  move.l #102411,128(sp)
    dae6:	|  |                  moveq #99,d1
    dae8:	|  |                  not.b d1
    daea:	|  |                  add.l sp,d1
    daec:	|  |                  addi.l #-144,d1
    daf2:	|  |                  move.l d1,124(sp)
    daf6:	|  |                  move.l 1a7ac <DOSBase>,d0
    dafc:	|  |                  movea.l d0,a6
    dafe:	|  |                  move.l 132(sp),d1
    db02:	|  |                  move.l 128(sp),d2
    db06:	|  |                  move.l 124(sp),d3
    db0a:	|  |                  jsr -354(a6)
    db0e:	|  |                  move.l d0,120(sp)
    }

    while (hereWeAre) {
    db12:	|  +----------------- bra.w dcea <stackToFile+0x2e4>
        if (saveEncoding) {
    db16:	|  |  /-------------> move.w 1a8b0 <saveEncoding>,d0
    db1c:	|  |  |     /-------- beq.w dc6e <stackToFile+0x268>
            switch (hereWeAre->thisVar.varType) {
    db20:	|  |  |     |         movea.l 152(sp),a0
    db24:	|  |  |     |         move.l (a0),d0
    db26:	|  |  |     |         moveq #1,d1
    db28:	|  |  |     |         cmp.l d0,d1
    db2a:	|  |  |     |     /-- beq.s db7a <stackToFile+0x174>
    db2c:	|  |  |     |     |   moveq #3,d1
    db2e:	|  |  |     |     |   cmp.l d0,d1
    db30:	|  |  |     |  /--|-- bne.w dc3c <stackToFile+0x236>
                case SVT_STRING:
                    FPutC(fp, encode1);
    db34:	|  |  |     |  |  |   move.l 136(sp),76(sp)
    db3a:	|  |  |     |  |  |   move.b 1a8ae <encode1>,d0
    db40:	|  |  |     |  |  |   ext.w d0
    db42:	|  |  |     |  |  |   movea.w d0,a0
    db44:	|  |  |     |  |  |   move.l a0,72(sp)
    db48:	|  |  |     |  |  |   move.l 1a7ac <DOSBase>,d0
    db4e:	|  |  |     |  |  |   movea.l d0,a6
    db50:	|  |  |     |  |  |   move.l 76(sp),d1
    db54:	|  |  |     |  |  |   move.l 72(sp),d2
    db58:	|  |  |     |  |  |   jsr -312(a6)
    db5c:	|  |  |     |  |  |   move.l d0,68(sp)
                    writeStringEncoded(hereWeAre->thisVar.varData.theString, fp);
    db60:	|  |  |     |  |  |   movea.l 152(sp),a0
    db64:	|  |  |     |  |  |   move.l 4(a0),d0
    db68:	|  |  |     |  |  |   move.l 136(sp),-(sp)
    db6c:	|  |  |     |  |  |   move.l d0,-(sp)
    db6e:	|  |  |     |  |  |   jsr dd1c <writeStringEncoded>
    db74:	|  |  |     |  |  |   addq.l #8,sp
                    break;
    db76:	|  |  |  /--|--|--|-- bra.w dce0 <stackToFile+0x2da>

                case SVT_INT:
                    // Small enough to be stored as a char
                    if (hereWeAre->thisVar.varData.intValue >= 0 && hereWeAre->thisVar.varData.intValue < 256) {
    db7a:	|  |  |  |  |  |  \-> movea.l 152(sp),a0
    db7e:	|  |  |  |  |  |      move.l 4(a0),d0
    db82:	|  |  |  |  |  |  /-- bmi.s dbf2 <stackToFile+0x1ec>
    db84:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    db88:	|  |  |  |  |  |  |   move.l 4(a0),d0
    db8c:	|  |  |  |  |  |  |   cmpi.l #255,d0
    db92:	|  |  |  |  |  |  +-- bgt.s dbf2 <stackToFile+0x1ec>
                        FPutC(fp, 2 ^ encode1);
    db94:	|  |  |  |  |  |  |   move.l 136(sp),64(sp)
    db9a:	|  |  |  |  |  |  |   move.b 1a8ae <encode1>,d0
    dba0:	|  |  |  |  |  |  |   eori.b #2,d0
    dba4:	|  |  |  |  |  |  |   ext.w d0
    dba6:	|  |  |  |  |  |  |   movea.w d0,a0
    dba8:	|  |  |  |  |  |  |   move.l a0,60(sp)
    dbac:	|  |  |  |  |  |  |   move.l 1a7ac <DOSBase>,d0
    dbb2:	|  |  |  |  |  |  |   movea.l d0,a6
    dbb4:	|  |  |  |  |  |  |   move.l 64(sp),d1
    dbb8:	|  |  |  |  |  |  |   move.l 60(sp),d2
    dbbc:	|  |  |  |  |  |  |   jsr -312(a6)
    dbc0:	|  |  |  |  |  |  |   move.l d0,56(sp)
                        FPutC(fp, hereWeAre->thisVar.varData.intValue);
    dbc4:	|  |  |  |  |  |  |   move.l 136(sp),52(sp)
    dbca:	|  |  |  |  |  |  |   movea.l 152(sp),a0
    dbce:	|  |  |  |  |  |  |   move.l 4(a0),48(sp)
    dbd4:	|  |  |  |  |  |  |   move.l 1a7ac <DOSBase>,d0
    dbda:	|  |  |  |  |  |  |   movea.l d0,a6
    dbdc:	|  |  |  |  |  |  |   move.l 52(sp),d1
    dbe0:	|  |  |  |  |  |  |   move.l 48(sp),d2
    dbe4:	|  |  |  |  |  |  |   jsr -312(a6)
    dbe8:	|  |  |  |  |  |  |   move.l d0,44(sp)
    dbec:	|  |  |  |  |  |  |   nop
                    } else {
                        FPutC(fp, 1 ^ encode1);
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
                    }
                    break;
    dbee:	|  |  |  +--|--|--|-- bra.w dce0 <stackToFile+0x2da>
                        FPutC(fp, 1 ^ encode1);
    dbf2:	|  |  |  |  |  |  \-> move.l 136(sp),40(sp)
    dbf8:	|  |  |  |  |  |      move.b 1a8ae <encode1>,d0
    dbfe:	|  |  |  |  |  |      eori.b #1,d0
    dc02:	|  |  |  |  |  |      ext.w d0
    dc04:	|  |  |  |  |  |      movea.w d0,a0
    dc06:	|  |  |  |  |  |      move.l a0,36(sp)
    dc0a:	|  |  |  |  |  |      move.l 1a7ac <DOSBase>,d0
    dc10:	|  |  |  |  |  |      movea.l d0,a6
    dc12:	|  |  |  |  |  |      move.l 40(sp),d1
    dc16:	|  |  |  |  |  |      move.l 36(sp),d2
    dc1a:	|  |  |  |  |  |      jsr -312(a6)
    dc1e:	|  |  |  |  |  |      move.l d0,32(sp)
                        put4bytes(hereWeAre->thisVar.varData.intValue, fp);
    dc22:	|  |  |  |  |  |      movea.l 152(sp),a0
    dc26:	|  |  |  |  |  |      move.l 4(a0),d0
    dc2a:	|  |  |  |  |  |      move.l 136(sp),-(sp)
    dc2e:	|  |  |  |  |  |      move.l d0,-(sp)
    dc30:	|  |  |  |  |  |      jsr 958 <put4bytes>
    dc36:	|  |  |  |  |  |      addq.l #8,sp
                    break;
    dc38:	|  |  |  +--|--|----- bra.w dce0 <stackToFile+0x2da>

                default:
                    KPrintF("Can't create an encoded custom data file containing anything other than numbers and strings", filename);
    dc3c:	|  |  |  |  |  \----> move.l 160(sp),-(sp)
    dc40:	|  |  |  |  |         pea 19169 <line.c.05397aaf+0x187>
    dc46:	|  |  |  |  |         jsr 16c5e <KPrintF>
    dc4c:	|  |  |  |  |         addq.l #8,sp
                    Close(fp);
    dc4e:	|  |  |  |  |         move.l 136(sp),28(sp)
    dc54:	|  |  |  |  |         move.l 1a7ac <DOSBase>,d0
    dc5a:	|  |  |  |  |         movea.l d0,a6
    dc5c:	|  |  |  |  |         move.l 28(sp),d1
    dc60:	|  |  |  |  |         jsr -36(a6)
    dc64:	|  |  |  |  |         move.l d0,24(sp)
                    return FALSE;
    dc68:	|  |  |  |  |         clr.w d0
    dc6a:	+--|--|--|--|-------- bra.w dd12 <stackToFile+0x30c>
            }
        } else {
            char * makeSureItsText = getTextFromAnyVar(&hereWeAre->thisVar);
    dc6e:	|  |  |  |  \-------> move.l 152(sp),d0
    dc72:	|  |  |  |            move.l d0,-(sp)
    dc74:	|  |  |  |            jsr 14836 <getTextFromAnyVar>
    dc7a:	|  |  |  |            addq.l #4,sp
    dc7c:	|  |  |  |            move.l d0,100(sp)
            if (makeSureItsText == NULL) break;
    dc80:	|  |  |  |     /----- beq.s dcf4 <stackToFile+0x2ee>
            FPrintf(fp, "%s\n", *makeSureItsText);
    dc82:	|  |  |  |     |      movea.l 100(sp),a0
    dc86:	|  |  |  |     |      move.b (a0),d0
    dc88:	|  |  |  |     |      ext.w d0
    dc8a:	|  |  |  |     |      movea.w d0,a0
    dc8c:	|  |  |  |     |      move.l a0,12(sp)
    dc90:	|  |  |  |     |      move.l 136(sp),96(sp)
    dc96:	|  |  |  |     |      move.l #102853,92(sp)
    dc9e:	|  |  |  |     |      moveq #99,d0
    dca0:	|  |  |  |     |      not.b d0
    dca2:	|  |  |  |     |      add.l sp,d0
    dca4:	|  |  |  |     |      addi.l #-144,d0
    dcaa:	|  |  |  |     |      move.l d0,88(sp)
    dcae:	|  |  |  |     |      move.l 1a7ac <DOSBase>,d0
    dcb4:	|  |  |  |     |      movea.l d0,a6
    dcb6:	|  |  |  |     |      move.l 96(sp),d1
    dcba:	|  |  |  |     |      move.l 92(sp),d2
    dcbe:	|  |  |  |     |      move.l 88(sp),d3
    dcc2:	|  |  |  |     |      jsr -354(a6)
    dcc6:	|  |  |  |     |      move.l d0,84(sp)
            FreeVec(makeSureItsText);
    dcca:	|  |  |  |     |      move.l 100(sp),80(sp)
    dcd0:	|  |  |  |     |      move.l 1a7a4 <SysBase>,d0
    dcd6:	|  |  |  |     |      movea.l d0,a6
    dcd8:	|  |  |  |     |      movea.l 80(sp),a1
    dcdc:	|  |  |  |     |      jsr -690(a6)
        }

        hereWeAre = hereWeAre->next;
    dce0:	|  |  |  \-----|----> movea.l 152(sp),a0
    dce4:	|  |  |        |      move.l 8(a0),152(sp)
    while (hereWeAre) {
    dcea:	|  \--|--------|----> tst.l 152(sp)
    dcee:	|     \--------|----- bne.w db16 <stackToFile+0x110>
    dcf2:	|              |  /-- bra.s dcf6 <stackToFile+0x2f0>
            if (makeSureItsText == NULL) break;
    dcf4:	|              \--|-> nop
    }
    Close(fp);
    dcf6:	|                 \-> move.l 136(sp),20(sp)
    dcfc:	|                     move.l 1a7ac <DOSBase>,d0
    dd02:	|                     movea.l d0,a6
    dd04:	|                     move.l 20(sp),d1
    dd08:	|                     jsr -36(a6)
    dd0c:	|                     move.l d0,16(sp)
    return TRUE;
    dd10:	|                     moveq #1,d0
}
    dd12:	\-------------------> movem.l (sp)+,d2-d3/a6
    dd16:	                      lea 144(sp),sp
    dd1a:	                      rts

0000dd1c <writeStringEncoded>:

void writeStringEncoded (const char * s, BPTR fp) {
    dd1c:	       lea -20(sp),sp
    dd20:	       move.l a6,-(sp)
    dd22:	       move.l d2,-(sp)
	int a, len = strlen (s);
    dd24:	       move.l 32(sp),-(sp)
    dd28:	       jsr 1374c <strlen>
    dd2e:	       addq.l #4,sp
    dd30:	       move.l d0,20(sp)

	put2bytes (len, fp);
    dd34:	       move.l 36(sp),-(sp)
    dd38:	       move.l 24(sp),-(sp)
    dd3c:	       jsr 8d0 <put2bytes>
    dd42:	       addq.l #8,sp
	for (a = 0; a < len; a ++) {
    dd44:	       clr.l 24(sp)
    dd48:	   /-- bra.s dd9e <writeStringEncoded+0x82>
		FPutC (fp, s[a] ^ encode1);
    dd4a:	/--|-> move.l 36(sp),16(sp)
    dd50:	|  |   move.l 24(sp),d0
    dd54:	|  |   movea.l 32(sp),a0
    dd58:	|  |   adda.l d0,a0
    dd5a:	|  |   move.b (a0),d1
    dd5c:	|  |   move.b 1a8ae <encode1>,d0
    dd62:	|  |   eor.b d1,d0
    dd64:	|  |   ext.w d0
    dd66:	|  |   movea.w d0,a0
    dd68:	|  |   move.l a0,12(sp)
    dd6c:	|  |   move.l 1a7ac <DOSBase>,d0
    dd72:	|  |   movea.l d0,a6
    dd74:	|  |   move.l 16(sp),d1
    dd78:	|  |   move.l 12(sp),d2
    dd7c:	|  |   jsr -312(a6)
    dd80:	|  |   move.l d0,8(sp)
		encode1 += encode2;
    dd84:	|  |   move.b 1a8ae <encode1>,d0
    dd8a:	|  |   move.b d0,d1
    dd8c:	|  |   move.b 1a8af <encode2>,d0
    dd92:	|  |   add.b d1,d0
    dd94:	|  |   move.b d0,1a8ae <encode1>
	for (a = 0; a < len; a ++) {
    dd9a:	|  |   addq.l #1,24(sp)
    dd9e:	|  \-> move.l 24(sp),d0
    dda2:	|      cmp.l 20(sp),d0
    dda6:	\----- blt.s dd4a <writeStringEncoded+0x2e>
	}
}
    dda8:	       nop
    ddaa:	       nop
    ddac:	       move.l (sp)+,d2
    ddae:	       movea.l (sp)+,a6
    ddb0:	       lea 20(sp),sp
    ddb4:	       rts

0000ddb6 <failSecurityCheck>:

#define builtIn(a) 			static enum builtReturn builtIn_ ## a (int numParams, struct loadedFunction * fun)

#define UNUSEDALL		 	(void) (0 && sizeof(numParams) && sizeof (fun));

BOOL failSecurityCheck(char * fn) {
    ddb6:	                   subq.l #4,sp
	if (fn == NULL) return TRUE;
    ddb8:	                   tst.l 8(sp)
    ddbc:	               /-- bne.s ddc2 <failSecurityCheck+0xc>
    ddbe:	               |   moveq #1,d0
    ddc0:	/--------------|-- bra.s de40 <failSecurityCheck+0x8a>

	int a = 0;
    ddc2:	|              \-> clr.l (sp)

	while (fn[a]) {
    ddc4:	|     /----------- bra.s de32 <failSecurityCheck+0x7c>
		switch (fn[a]) {
    ddc6:	|  /--|----------> move.l (sp),d0
    ddc8:	|  |  |            movea.l 8(sp),a0
    ddcc:	|  |  |            adda.l d0,a0
    ddce:	|  |  |            move.b (a0),d0
    ddd0:	|  |  |            ext.w d0
    ddd2:	|  |  |            movea.w d0,a0
    ddd4:	|  |  |            moveq #124,d0
    ddd6:	|  |  |            cmp.l a0,d0
    ddd8:	|  |  |     /----- beq.s de1a <failSecurityCheck+0x64>
    ddda:	|  |  |     |      moveq #124,d1
    dddc:	|  |  |     |      cmp.l a0,d1
    ddde:	|  |  |  /--|----- blt.s de30 <failSecurityCheck+0x7a>
    dde0:	|  |  |  |  |      moveq #92,d0
    dde2:	|  |  |  |  |      cmp.l a0,d0
    dde4:	|  |  |  |  +----- beq.s de1a <failSecurityCheck+0x64>
    dde6:	|  |  |  |  |      moveq #92,d1
    dde8:	|  |  |  |  |      cmp.l a0,d1
    ddea:	|  |  |  +--|----- blt.s de30 <failSecurityCheck+0x7a>
    ddec:	|  |  |  |  |      moveq #60,d0
    ddee:	|  |  |  |  |      cmp.l a0,d0
    ddf0:	|  |  |  |  |  /-- blt.s de10 <failSecurityCheck+0x5a>
    ddf2:	|  |  |  |  |  |   moveq #34,d1
    ddf4:	|  |  |  |  |  |   cmp.l a0,d1
    ddf6:	|  |  |  +--|--|-- bgt.s de30 <failSecurityCheck+0x7a>
    ddf8:	|  |  |  |  |  |   moveq #-34,d1
    ddfa:	|  |  |  |  |  |   add.l a0,d1
    ddfc:	|  |  |  |  |  |   move.l #83894529,d0
    de02:	|  |  |  |  |  |   lsr.l d1,d0
    de04:	|  |  |  |  |  |   moveq #1,d1
    de06:	|  |  |  |  |  |   and.l d1,d0
    de08:	|  |  |  |  |  |   sne d0
    de0a:	|  |  |  |  |  |   neg.b d0
    de0c:	|  |  |  |  +--|-- bne.s de1a <failSecurityCheck+0x64>
    de0e:	|  |  |  +--|--|-- bra.s de30 <failSecurityCheck+0x7a>
    de10:	|  |  |  |  |  \-> lea -62(a0),a0
    de14:	|  |  |  |  |      moveq #1,d0
    de16:	|  |  |  |  |      cmp.l a0,d0
    de18:	|  |  |  +--|----- bcs.s de30 <failSecurityCheck+0x7a>
			case '?':
			case '"':
			case '<':
			case '>':
			case '|':
				KPrintF("Filenames may not contain the following characters: \n\n\\  /  :  \"  <  >  |  ?  *\n\nConsequently, the following filename is not allowed:", fn);
    de1a:	|  |  |  |  \----> move.l 8(sp),-(sp)
    de1e:	|  |  |  |         pea 191c9 <line.c.05397aaf+0x1e7>
    de24:	|  |  |  |         jsr 16c5e <KPrintF>
    de2a:	|  |  |  |         addq.l #8,sp
				return TRUE;
    de2c:	|  |  |  |         moveq #1,d0
    de2e:	+--|--|--|-------- bra.s de40 <failSecurityCheck+0x8a>
		}
		a++;
    de30:	|  |  |  \-------> addq.l #1,(sp)
	while (fn[a]) {
    de32:	|  |  \----------> move.l (sp),d0
    de34:	|  |               movea.l 8(sp),a0
    de38:	|  |               adda.l d0,a0
    de3a:	|  |               move.b (a0),d0
    de3c:	|  \-------------- bne.s ddc6 <failSecurityCheck+0x10>
	}
	return FALSE;
    de3e:	|                  clr.w d0
}
    de40:	\----------------> addq.l #4,sp
    de42:	                   rts

0000de44 <sayCore>:

static enum builtReturn sayCore (int numParams, struct loadedFunction * fun, BOOL sayIt)
{
    de44:	             lea -24(sp),sp
    de48:	             move.l a6,-(sp)
    de4a:	             move.l 40(sp),d0
    de4e:	             move.w d0,d0
    de50:	             move.w d0,6(sp)
	int fileNum = -1;
    de54:	             moveq #-1,d0
    de56:	             move.l d0,12(sp)
	char * newText;
	int objT, p;
	killSpeechTimers ();
    de5a:	             jsr 5adc <killSpeechTimers>

	switch (numParams) {
    de60:	             moveq #2,d0
    de62:	             cmp.l 32(sp),d0
    de66:	      /----- beq.s deaa <sayCore+0x66>
    de68:	      |      moveq #3,d0
    de6a:	      |      cmp.l 32(sp),d0
    de6e:	/-----|----- bne.w df8c <sayCore+0x148>
		case 3:
			if (! getValueType (&fileNum, SVT_FILE, &fun->stack->thisVar)) return BR_ERROR;
    de72:	|     |      movea.l 36(sp),a0
    de76:	|     |      move.l 24(a0),d0
    de7a:	|     |      move.l d0,-(sp)
    de7c:	|     |      pea 5 <_start+0x5>
    de80:	|     |      lea 20(sp),a0
    de84:	|     |      move.l a0,-(sp)
    de86:	|     |      jsr 14260 <getValueType>
    de8c:	|     |      lea 12(sp),sp
    de90:	|     |      tst.w d0
    de92:	|     |  /-- bne.s de9a <sayCore+0x56>
    de94:	|     |  |   moveq #1,d0
    de96:	|  /--|--|-- bra.w df9c <sayCore+0x158>
			trimStack (&fun -> stack);
    de9a:	|  |  |  \-> moveq #24,d0
    de9c:	|  |  |      add.l 36(sp),d0
    dea0:	|  |  |      move.l d0,-(sp)
    dea2:	|  |  |      jsr 14be4 <trimStack>
    dea8:	|  |  |      addq.l #4,sp
			[[fallthrough]];

		case 2:
			newText = getTextFromAnyVar (&(fun -> stack->thisVar));
    deaa:	|  |  \----> movea.l 36(sp),a0
    deae:	|  |         move.l 24(a0),d0
    deb2:	|  |         move.l d0,-(sp)
    deb4:	|  |         jsr 14836 <getTextFromAnyVar>
    deba:	|  |         addq.l #4,sp
    debc:	|  |         move.l d0,24(sp)
			if (! newText) return BR_ERROR;
    dec0:	|  |     /-- bne.s dec8 <sayCore+0x84>
    dec2:	|  |     |   moveq #1,d0
    dec4:	|  +-----|-- bra.w df9c <sayCore+0x158>
			trimStack (&fun -> stack);
    dec8:	|  |     \-> moveq #24,d0
    deca:	|  |         add.l 36(sp),d0
    dece:	|  |         move.l d0,-(sp)
    ded0:	|  |         jsr 14be4 <trimStack>
    ded6:	|  |         addq.l #4,sp
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    ded8:	|  |         movea.l 36(sp),a0
    dedc:	|  |         move.l 24(a0),d0
    dee0:	|  |         move.l d0,-(sp)
    dee2:	|  |         pea 7 <_start+0x7>
    dee6:	|  |         lea 16(sp),a0
    deea:	|  |         move.l a0,-(sp)
    deec:	|  |         jsr 14260 <getValueType>
    def2:	|  |         lea 12(sp),sp
    def6:	|  |         tst.w d0
    def8:	|  |     /-- bne.s df00 <sayCore+0xbc>
    defa:	|  |     |   moveq #1,d0
    defc:	|  +-----|-- bra.w df9c <sayCore+0x158>
			if (! getValueType(&objT, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    df00:	|  |     \-> movea.l 36(sp),a0
    df04:	|  |         move.l 24(a0),d0
    df08:	|  |         move.l d0,-(sp)
    df0a:	|  |         pea 7 <_start+0x7>
    df0e:	|  |         lea 16(sp),a0
    df12:	|  |         move.l a0,-(sp)
    df14:	|  |         jsr 14260 <getValueType>
    df1a:	|  |         lea 12(sp),sp
    df1e:	|  |         tst.w d0
    df20:	|  |     /-- bne.s df26 <sayCore+0xe2>
    df22:	|  |     |   moveq #1,d0
    df24:	|  +-----|-- bra.s df9c <sayCore+0x158>
			trimStack (&fun -> stack);
    df26:	|  |     \-> moveq #24,d0
    df28:	|  |         add.l 36(sp),d0
    df2c:	|  |         move.l d0,-(sp)
    df2e:	|  |         jsr 14be4 <trimStack>
    df34:	|  |         addq.l #4,sp
			p = wrapSpeech (newText, objT, fileNum, sayIt);
    df36:	|  |         movea.w 6(sp),a0
    df3a:	|  |         move.l 12(sp),d1
    df3e:	|  |         move.l 8(sp),d0
    df42:	|  |         move.l a0,-(sp)
    df44:	|  |         move.l d1,-(sp)
    df46:	|  |         move.l d0,-(sp)
    df48:	|  |         move.l 36(sp),-(sp)
    df4c:	|  |         jsr 7a88 <wrapSpeech>
    df52:	|  |         lea 16(sp),sp
    df56:	|  |         move.l d0,20(sp)
			fun -> timeLeft = p;
    df5a:	|  |         movea.l 36(sp),a0
    df5e:	|  |         move.l 20(sp),12(a0)
			//debugOut ("BUILTIN: sayCore: %s (%i)\n", newText, p);
			fun -> isSpeech = TRUE;
    df64:	|  |         movea.l 36(sp),a0
    df68:	|  |         move.w #1,50(a0)
			FreeVec(newText);
    df6e:	|  |         move.l 24(sp),16(sp)
    df74:	|  |         move.l 1a7a4 <SysBase>,d0
    df7a:	|  |         movea.l d0,a6
    df7c:	|  |         movea.l 16(sp),a1
    df80:	|  |         jsr -690(a6)
			newText = NULL;
    df84:	|  |         clr.l 24(sp)
			return BR_KEEP_AND_PAUSE;
    df88:	|  |         moveq #0,d0
    df8a:	|  +-------- bra.s df9c <sayCore+0x158>
	}

	KPrintF("Function should have either 2 or 3 parameters");
    df8c:	\--|-------> pea 1924f <graphics.c.1c13408a+0x11>
    df92:	   |         jsr 16c5e <KPrintF>
    df98:	   |         addq.l #4,sp
	return BR_ERROR;
    df9a:	   |         moveq #1,d0
}
    df9c:	   \-------> movea.l (sp)+,a6
    df9e:	             lea 24(sp),sp
    dfa2:	             rts

0000dfa4 <builtIn_say>:

builtIn(say)
{
	UNUSEDALL
	return sayCore (numParams, fun, TRUE);
    dfa4:	pea 1 <_start+0x1>
    dfa8:	move.l 12(sp),-(sp)
    dfac:	move.l 12(sp),-(sp)
    dfb0:	jsr de44 <sayCore>
    dfb6:	lea 12(sp),sp
}
    dfba:	rts

0000dfbc <builtIn_think>:

builtIn(think)
{
	UNUSEDALL
	return sayCore (numParams, fun, FALSE);
    dfbc:	clr.l -(sp)
    dfbe:	move.l 12(sp),-(sp)
    dfc2:	move.l 12(sp),-(sp)
    dfc6:	jsr de44 <sayCore>
    dfcc:	lea 12(sp),sp
}
    dfd0:	rts

0000dfd2 <builtIn_freeze>:

builtIn(freeze)
{
	UNUSEDALL
	freeze ();
    dfd2:	jsr 14c2c <freeze>
	freezeSubs (); 
    dfd8:	jsr 50cc <freezeSubs>
	fun -> freezerLevel = 0;
    dfde:	movea.l 8(sp),a0
    dfe2:	clr.b 56(a0)
	return BR_CONTINUE;
    dfe6:	moveq #2,d0
}
    dfe8:	rts

0000dfea <builtIn_unfreeze>:

builtIn(unfreeze)
{
	UNUSEDALL
	unfreeze ();
    dfea:	jsr 14df0 <unfreeze>
	unfreezeSubs (); 
    dff0:	jsr 651e <unfreezeSubs>
	return BR_CONTINUE;
    dff6:	moveq #2,d0
}
    dff8:	rts

0000dffa <builtIn_howFrozen>:
builtIn(howFrozen)
{
	UNUSEDALL
	/*setVariable (&fun -> reg, SVT_INT, howFrozen ());
	return BR_CONTINUE; Amiga todo implement*/
}
    dffa:	nop
    dffc:	rts

0000dffe <builtIn_setCursor>:

builtIn(setCursor)
{
    dffe:	subq.l #4,sp
	UNUSEDALL
	struct personaAnimation * aa = getAnimationFromVar (&(fun -> stack -> thisVar));
    e000:	movea.l 12(sp),a0
    e004:	move.l 24(a0),d0
    e008:	move.l d0,-(sp)
    e00a:	jsr 14738 <getAnimationFromVar>
    e010:	addq.l #4,sp
    e012:	move.l d0,(sp)
	pickAnimCursor (aa);
    e014:	move.l (sp),-(sp)
    e016:	jsr d6c <pickAnimCursor>
    e01c:	addq.l #4,sp
	trimStack (&fun -> stack);
    e01e:	moveq #24,d0
    e020:	add.l 12(sp),d0
    e024:	move.l d0,-(sp)
    e026:	jsr 14be4 <trimStack>
    e02c:	addq.l #4,sp
	return BR_CONTINUE;
    e02e:	moveq #2,d0
}
    e030:	addq.l #4,sp
    e032:	rts

0000e034 <builtIn_getMouseX>:

builtIn(getMouseX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX + cameraX);
    e034:	move.l 1a760 <input+0xa>,d1
    e03a:	move.l 1a8b2 <cameraX>,d0
    e040:	add.l d0,d1
    e042:	moveq #28,d0
    e044:	add.l 8(sp),d0
    e048:	move.l d1,-(sp)
    e04a:	pea 1 <_start+0x1>
    e04e:	move.l d0,-(sp)
    e050:	jsr 14b52 <setVariable>
    e056:	lea 12(sp),sp
	return BR_CONTINUE;
    e05a:	moveq #2,d0
}
    e05c:	rts

0000e05e <builtIn_getMouseY>:

builtIn(getMouseY)
{

	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY + cameraY);
    e05e:	move.l 1a764 <input+0xe>,d1
    e064:	move.l 1a8b6 <cameraY>,d0
    e06a:	add.l d0,d1
    e06c:	moveq #28,d0
    e06e:	add.l 8(sp),d0
    e072:	move.l d1,-(sp)
    e074:	pea 1 <_start+0x1>
    e078:	move.l d0,-(sp)
    e07a:	jsr 14b52 <setVariable>
    e080:	lea 12(sp),sp
	return BR_CONTINUE;
    e084:	moveq #2,d0
}
    e086:	rts

0000e088 <builtIn_getMouseScreenX>:

builtIn(getMouseScreenX)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseX*cameraZoom);
    e088:	move.l 1a760 <input+0xa>,d0
    e08e:	move.l d0,-(sp)
    e090:	jsr 1709a <__floatsisf>
    e096:	addq.l #4,sp
    e098:	move.l d0,d1
    e09a:	move.l 1a142 <cameraZoom>,d0
    e0a0:	move.l d0,-(sp)
    e0a2:	move.l d1,-(sp)
    e0a4:	jsr 1714c <__mulsf3>
    e0aa:	addq.l #8,sp
    e0ac:	move.l d0,-(sp)
    e0ae:	jsr 17032 <__fixsfsi>
    e0b4:	addq.l #4,sp
    e0b6:	move.l d0,d1
    e0b8:	moveq #28,d0
    e0ba:	add.l 8(sp),d0
    e0be:	move.l d1,-(sp)
    e0c0:	pea 1 <_start+0x1>
    e0c4:	move.l d0,-(sp)
    e0c6:	jsr 14b52 <setVariable>
    e0cc:	lea 12(sp),sp
	return BR_CONTINUE;
    e0d0:	moveq #2,d0
}
    e0d2:	rts

0000e0d4 <builtIn_getMouseScreenY>:

builtIn(getMouseScreenY)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, input.mouseY*cameraZoom);
    e0d4:	move.l 1a764 <input+0xe>,d0
    e0da:	move.l d0,-(sp)
    e0dc:	jsr 1709a <__floatsisf>
    e0e2:	addq.l #4,sp
    e0e4:	move.l d0,d1
    e0e6:	move.l 1a142 <cameraZoom>,d0
    e0ec:	move.l d0,-(sp)
    e0ee:	move.l d1,-(sp)
    e0f0:	jsr 1714c <__mulsf3>
    e0f6:	addq.l #8,sp
    e0f8:	move.l d0,-(sp)
    e0fa:	jsr 17032 <__fixsfsi>
    e100:	addq.l #4,sp
    e102:	move.l d0,d1
    e104:	moveq #28,d0
    e106:	add.l 8(sp),d0
    e10a:	move.l d1,-(sp)
    e10c:	pea 1 <_start+0x1>
    e110:	move.l d0,-(sp)
    e112:	jsr 14b52 <setVariable>
    e118:	lea 12(sp),sp
	return BR_CONTINUE;
    e11c:	moveq #2,d0
}
    e11e:	rts

0000e120 <builtIn_getStatusText>:

builtIn(getStatusText)
{
	UNUSEDALL
	makeTextVar (&fun -> reg, statusBarText ());
    e120:	jsr 753c <statusBarText>
    e126:	move.l d0,d1
    e128:	moveq #28,d0
    e12a:	add.l 8(sp),d0
    e12e:	move.l d1,-(sp)
    e130:	move.l d0,-(sp)
    e132:	jsr 14482 <makeTextVar>
    e138:	addq.l #8,sp
	return BR_CONTINUE;
    e13a:	moveq #2,d0
}
    e13c:	rts

0000e13e <builtIn_getMatchingFiles>:

builtIn(getMatchingFiles)
{
    e13e:	       lea -20(sp),sp
    e142:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    e144:	       movea.l 32(sp),a0
    e148:	       move.l 24(a0),d0
    e14c:	       move.l d0,-(sp)
    e14e:	       jsr 14836 <getTextFromAnyVar>
    e154:	       addq.l #4,sp
    e156:	       move.l d0,20(sp)
	if (! newText) return BR_ERROR;
    e15a:	   /-- bne.s e162 <builtIn_getMatchingFiles+0x24>
    e15c:	   |   moveq #1,d0
    e15e:	/--|-- bra.w e224 <builtIn_getMatchingFiles+0xe6>
	trimStack (&fun -> stack);
    e162:	|  \-> moveq #24,d0
    e164:	|      add.l 32(sp),d0
    e168:	|      move.l d0,-(sp)
    e16a:	|      jsr 14be4 <trimStack>
    e170:	|      addq.l #4,sp
	unlinkVar (&fun -> reg);
    e172:	|      moveq #28,d0
    e174:	|      add.l 32(sp),d0
    e178:	|      move.l d0,-(sp)
    e17a:	|      jsr 144ae <unlinkVar>
    e180:	|      addq.l #4,sp

	// Return value
	fun -> reg.varType = SVT_STACK;
    e182:	|      movea.l 32(sp),a0
    e186:	|      moveq #6,d0
    e188:	|      move.l d0,28(a0)
	fun -> reg.varData.theStack = AllocVec(sizeof( struct stackHandler),MEMF_ANY);
    e18c:	|      moveq #12,d0
    e18e:	|      move.l d0,16(sp)
    e192:	|      clr.l 12(sp)
    e196:	|      move.l 1a7a4 <SysBase>,d0
    e19c:	|      movea.l d0,a6
    e19e:	|      move.l 16(sp),d0
    e1a2:	|      move.l 12(sp),d1
    e1a6:	|      jsr -684(a6)
    e1aa:	|      move.l d0,8(sp)
    e1ae:	|      move.l 8(sp),d0
    e1b2:	|      movea.l 32(sp),a0
    e1b6:	|      move.l d0,32(a0)
	if (!(&fun -> reg.varData.theStack)) return BR_ERROR;
    e1ba:	|      moveq #32,d0
    e1bc:	|      add.l 32(sp),d0
    e1c0:	|  /-- bne.s e1c6 <builtIn_getMatchingFiles+0x88>
    e1c2:	|  |   moveq #1,d0
    e1c4:	+--|-- bra.s e224 <builtIn_getMatchingFiles+0xe6>
	fun -> reg.varData.theStack -> first = NULL;
    e1c6:	|  \-> movea.l 32(sp),a0
    e1ca:	|      movea.l 32(a0),a0
    e1ce:	|      clr.l (a0)
	fun -> reg.varData.theStack -> last = NULL;
    e1d0:	|      movea.l 32(sp),a0
    e1d4:	|      movea.l 32(a0),a0
    e1d8:	|      clr.l 4(a0)
	fun -> reg.varData.theStack -> timesUsed = 1;
    e1dc:	|      movea.l 32(sp),a0
    e1e0:	|      movea.l 32(a0),a0
    e1e4:	|      moveq #1,d0
    e1e6:	|      move.l d0,8(a0)
	if (! getSavedGamesStack (fun -> reg.varData.theStack, newText)) return BR_ERROR;
    e1ea:	|      movea.l 32(sp),a0
    e1ee:	|      move.l 32(a0),d0
    e1f2:	|      move.l 20(sp),-(sp)
    e1f6:	|      move.l d0,-(sp)
    e1f8:	|      jsr 1401c <getSavedGamesStack>
    e1fe:	|      addq.l #8,sp
    e200:	|      tst.w d0
    e202:	|  /-- bne.s e208 <builtIn_getMatchingFiles+0xca>
    e204:	|  |   moveq #1,d0
    e206:	+--|-- bra.s e224 <builtIn_getMatchingFiles+0xe6>
	FreeVec(newText);
    e208:	|  \-> move.l 20(sp),4(sp)
    e20e:	|      move.l 1a7a4 <SysBase>,d0
    e214:	|      movea.l d0,a6
    e216:	|      movea.l 4(sp),a1
    e21a:	|      jsr -690(a6)
	newText = NULL;
    e21e:	|      clr.l 20(sp)
	return BR_CONTINUE;
    e222:	|      moveq #2,d0
}
    e224:	\----> movea.l (sp)+,a6
    e226:	       lea 20(sp),sp
    e22a:	       rts

0000e22c <builtIn_saveGame>:

builtIn(saveGame)
{
    e22c:	       lea -12(sp),sp
    e230:	       move.l a6,-(sp)

    /*if (frozenStuff) {
        fatal ("Can't save game state while the engine is frozen");
    }*/

    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e232:	       movea.l 24(sp),a0
    e236:	       move.l 24(a0),d0
    e23a:	       move.l d0,-(sp)
    e23c:	       jsr 14836 <getTextFromAnyVar>
    e242:	       addq.l #4,sp
    e244:	       move.l d0,1a770 <loadNow>
    trimStack(&fun->stack);
    e24a:	       moveq #24,d0
    e24c:	       add.l 24(sp),d0
    e250:	       move.l d0,-(sp)
    e252:	       jsr 14be4 <trimStack>
    e258:	       addq.l #4,sp

    char *aaaaa = encodeFilename(loadNow);
    e25a:	       move.l 1a770 <loadNow>,d0
    e260:	       move.l d0,-(sp)
    e262:	       jsr 2fe <encodeFilename>
    e268:	       addq.l #4,sp
    e26a:	       move.l d0,12(sp)
    FreeVec(loadNow);
    e26e:	       move.l 1a770 <loadNow>,8(sp)
    e276:	       move.l 1a7a4 <SysBase>,d0
    e27c:	       movea.l d0,a6
    e27e:	       movea.l 8(sp),a1
    e282:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR; // Won't fail if encoded, how cool is that? OK, not very.
    e286:	       move.l 12(sp),-(sp)
    e28a:	       jsr ddb6 <failSecurityCheck>
    e290:	       addq.l #4,sp
    e292:	       tst.w d0
    e294:	   /-- beq.s e29a <builtIn_saveGame+0x6e>
    e296:	   |   moveq #1,d0
    e298:	/--|-- bra.s e2ea <builtIn_saveGame+0xbe>

    loadNow = joinStrings(":", aaaaa);
    e29a:	|  \-> move.l 12(sp),-(sp)
    e29e:	|      pea 1927d <graphics.c.1c13408a+0x3f>
    e2a4:	|      jsr 1378c <joinStrings>
    e2aa:	|      addq.l #8,sp
    e2ac:	|      move.l d0,1a770 <loadNow>
    FreeVec(aaaaa);
    e2b2:	|      move.l 12(sp),4(sp)
    e2b8:	|      move.l 1a7a4 <SysBase>,d0
    e2be:	|      movea.l d0,a6
    e2c0:	|      movea.l 4(sp),a1
    e2c4:	|      jsr -690(a6)

    setVariable(&fun->reg, SVT_INT, 0);
    e2c8:	|      moveq #28,d0
    e2ca:	|      add.l 24(sp),d0
    e2ce:	|      clr.l -(sp)
    e2d0:	|      pea 1 <_start+0x1>
    e2d4:	|      move.l d0,-(sp)
    e2d6:	|      jsr 14b52 <setVariable>
    e2dc:	|      lea 12(sp),sp
    saverFunc = fun;
    e2e0:	|      move.l 24(sp),1a8c2 <saverFunc>
    return BR_KEEP_AND_PAUSE;
    e2e8:	|      moveq #0,d0
}
    e2ea:	\----> movea.l (sp)+,a6
    e2ec:	       lea 12(sp),sp
    e2f0:	       rts

0000e2f2 <builtIn_fileExists>:

builtIn(fileExists)
{
    e2f2:	       lea -36(sp),sp
    e2f6:	       move.l a6,-(sp)
    e2f8:	       move.l d2,-(sp)
    UNUSEDALL
    loadNow = getTextFromAnyVar(&(fun->stack->thisVar));
    e2fa:	       movea.l 52(sp),a0
    e2fe:	       move.l 24(a0),d0
    e302:	       move.l d0,-(sp)
    e304:	       jsr 14836 <getTextFromAnyVar>
    e30a:	       addq.l #4,sp
    e30c:	       move.l d0,1a770 <loadNow>
    trimStack(&fun->stack);
    e312:	       moveq #24,d0
    e314:	       add.l 52(sp),d0
    e318:	       move.l d0,-(sp)
    e31a:	       jsr 14be4 <trimStack>
    e320:	       addq.l #4,sp
    char *aaaaa = encodeFilename(loadNow);
    e322:	       move.l 1a770 <loadNow>,d0
    e328:	       move.l d0,-(sp)
    e32a:	       jsr 2fe <encodeFilename>
    e330:	       addq.l #4,sp
    e332:	       move.l d0,40(sp)
    FreeVec(loadNow);
    e336:	       move.l 1a770 <loadNow>,36(sp)
    e33e:	       move.l 1a7a4 <SysBase>,d0
    e344:	       movea.l d0,a6
    e346:	       movea.l 36(sp),a1
    e34a:	       jsr -690(a6)
    if (failSecurityCheck(aaaaa)) return BR_ERROR;
    e34e:	       move.l 40(sp),-(sp)
    e352:	       jsr ddb6 <failSecurityCheck>
    e358:	       addq.l #4,sp
    e35a:	       tst.w d0
    e35c:	   /-- beq.s e364 <builtIn_fileExists+0x72>
    e35e:	   |   moveq #1,d0
    e360:	/--|-- bra.w e404 <builtIn_fileExists+0x112>
    BPTR fp = Open(aaaaa, MODE_OLDFILE);
    e364:	|  \-> move.l 40(sp),32(sp)
    e36a:	|      move.l #1005,28(sp)
    e372:	|      move.l 1a7ac <DOSBase>,d0
    e378:	|      movea.l d0,a6
    e37a:	|      move.l 32(sp),d1
    e37e:	|      move.l 28(sp),d2
    e382:	|      jsr -30(a6)
    e386:	|      move.l d0,24(sp)
    e38a:	|      move.l 24(sp),d0
    e38e:	|      move.l d0,20(sp)
    if (!fp) {        
    e392:	|  /-- bne.s e3a2 <builtIn_fileExists+0xb0>
        KPrintF("Can't get current directory.\n");      
    e394:	|  |   pea 1927f <graphics.c.1c13408a+0x41>
    e39a:	|  |   jsr 16c5e <KPrintF>
    e3a0:	|  |   addq.l #4,sp
    }
    // Return value
    setVariable(&fun->reg, SVT_INT, (fp != NULL));
    e3a2:	|  \-> tst.l 20(sp)
    e3a6:	|      sne d0
    e3a8:	|      neg.b d0
    e3aa:	|      moveq #0,d1
    e3ac:	|      move.b d0,d1
    e3ae:	|      moveq #28,d0
    e3b0:	|      add.l 52(sp),d0
    e3b4:	|      move.l d1,-(sp)
    e3b6:	|      pea 1 <_start+0x1>
    e3ba:	|      move.l d0,-(sp)
    e3bc:	|      jsr 14b52 <setVariable>
    e3c2:	|      lea 12(sp),sp
    if (fp) Close(fp);
    e3c6:	|      tst.l 20(sp)
    e3ca:	|  /-- beq.s e3e6 <builtIn_fileExists+0xf4>
    e3cc:	|  |   move.l 20(sp),16(sp)
    e3d2:	|  |   move.l 1a7ac <DOSBase>,d0
    e3d8:	|  |   movea.l d0,a6
    e3da:	|  |   move.l 16(sp),d1
    e3de:	|  |   jsr -36(a6)
    e3e2:	|  |   move.l d0,12(sp)
    FreeVec(aaaaa);
    e3e6:	|  \-> move.l 40(sp),8(sp)
    e3ec:	|      move.l 1a7a4 <SysBase>,d0
    e3f2:	|      movea.l d0,a6
    e3f4:	|      movea.l 8(sp),a1
    e3f8:	|      jsr -690(a6)
    loadNow = NULL;
    e3fc:	|      clr.l 1a770 <loadNow>
    return BR_CONTINUE;
    e402:	|      moveq #2,d0
}
    e404:	\----> move.l (sp)+,d2
    e406:	       movea.l (sp)+,a6
    e408:	       lea 36(sp),sp
    e40c:	       rts

0000e40e <builtIn_loadGame>:

builtIn(loadGame)
{
    e40e:	       lea -36(sp),sp
    e412:	       move.l a6,-(sp)
    e414:	       move.l d2,-(sp)
    UNUSEDALL
    char *aaaaa = getTextFromAnyVar(&(fun->stack->thisVar));
    e416:	       movea.l 52(sp),a0
    e41a:	       move.l 24(a0),d0
    e41e:	       move.l d0,-(sp)
    e420:	       jsr 14836 <getTextFromAnyVar>
    e426:	       addq.l #4,sp
    e428:	       move.l d0,40(sp)
    trimStack(&fun->stack);
    e42c:	       moveq #24,d0
    e42e:	       add.l 52(sp),d0
    e432:	       move.l d0,-(sp)
    e434:	       jsr 14be4 <trimStack>
    e43a:	       addq.l #4,sp
    loadNow = encodeFilename(aaaaa);
    e43c:	       move.l 40(sp),-(sp)
    e440:	       jsr 2fe <encodeFilename>
    e446:	       addq.l #4,sp
    e448:	       move.l d0,1a770 <loadNow>
    FreeVec(aaaaa);
    e44e:	       move.l 40(sp),36(sp)
    e454:	       move.l 1a7a4 <SysBase>,d0
    e45a:	       movea.l d0,a6
    e45c:	       movea.l 36(sp),a1
    e460:	       jsr -690(a6)

    /*if (frozenStuff) {
        fatal("Can't load a saved game while the engine is frozen");
    }*/

    if (failSecurityCheck(loadNow)) return BR_ERROR;
    e464:	       move.l 1a770 <loadNow>,d0
    e46a:	       move.l d0,-(sp)
    e46c:	       jsr ddb6 <failSecurityCheck>
    e472:	       addq.l #4,sp
    e474:	       tst.w d0
    e476:	   /-- beq.s e47c <builtIn_loadGame+0x6e>
    e478:	   |   moveq #1,d0
    e47a:	/--|-- bra.s e4ec <builtIn_loadGame+0xde>
    BPTR fp = Open(loadNow, MODE_OLDFILE);
    e47c:	|  \-> move.l 1a770 <loadNow>,32(sp)
    e484:	|      move.l #1005,28(sp)
    e48c:	|      move.l 1a7ac <DOSBase>,d0
    e492:	|      movea.l d0,a6
    e494:	|      move.l 32(sp),d1
    e498:	|      move.l 28(sp),d2
    e49c:	|      jsr -30(a6)
    e4a0:	|      move.l d0,24(sp)
    e4a4:	|      move.l 24(sp),d0
    e4a8:	|      move.l d0,20(sp)
    if (fp) {
    e4ac:	|  /-- beq.s e4cc <builtIn_loadGame+0xbe>
        Close(fp);
    e4ae:	|  |   move.l 20(sp),12(sp)
    e4b4:	|  |   move.l 1a7ac <DOSBase>,d0
    e4ba:	|  |   movea.l d0,a6
    e4bc:	|  |   move.l 12(sp),d1
    e4c0:	|  |   jsr -36(a6)
    e4c4:	|  |   move.l d0,8(sp)
        return BR_KEEP_AND_PAUSE;
    e4c8:	|  |   moveq #0,d0
    e4ca:	+--|-- bra.s e4ec <builtIn_loadGame+0xde>
    }
    FreeVec(loadNow);
    e4cc:	|  \-> move.l 1a770 <loadNow>,16(sp)
    e4d4:	|      move.l 1a7a4 <SysBase>,d0
    e4da:	|      movea.l d0,a6
    e4dc:	|      movea.l 16(sp),a1
    e4e0:	|      jsr -690(a6)
    loadNow = NULL;
    e4e4:	|      clr.l 1a770 <loadNow>
    return BR_CONTINUE;
    e4ea:	|      moveq #2,d0
}
    e4ec:	\----> move.l (sp)+,d2
    e4ee:	       movea.l (sp)+,a6
    e4f0:	       lea 36(sp),sp
    e4f4:	       rts

0000e4f6 <builtIn_blankScreen>:
#pragma mark Background image - Painting

builtIn(blankScreen)
{
	UNUSEDALL
	blankScreen (0, 0, sceneWidth, sceneHeight);
    e4f6:	move.l 1a898 <sceneHeight>,d0
    e4fc:	move.l d0,d1
    e4fe:	move.l 1a894 <sceneWidth>,d0
    e504:	move.l d1,-(sp)
    e506:	move.l d0,-(sp)
    e508:	clr.l -(sp)
    e50a:	clr.l -(sp)
    e50c:	jsr ccaa <blankScreen>
    e512:	lea 16(sp),sp
	return BR_CONTINUE;
    e516:	moveq #2,d0
}
    e518:	rts

0000e51a <builtIn_blankArea>:

builtIn(blankArea)
{
    e51a:	       lea -16(sp),sp
	UNUSEDALL
	int x1, y1, x2, y2;
	if (! getValueType (&y2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e51e:	       movea.l 24(sp),a0
    e522:	       move.l 24(a0),d0
    e526:	       move.l d0,-(sp)
    e528:	       pea 1 <_start+0x1>
    e52c:	       lea 8(sp),a0
    e530:	       move.l a0,-(sp)
    e532:	       jsr 14260 <getValueType>
    e538:	       lea 12(sp),sp
    e53c:	       tst.w d0
    e53e:	   /-- bne.s e546 <builtIn_blankArea+0x2c>
    e540:	   |   moveq #1,d0
    e542:	/--|-- bra.w e61c <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e546:	|  \-> moveq #24,d0
    e548:	|      add.l 24(sp),d0
    e54c:	|      move.l d0,-(sp)
    e54e:	|      jsr 14be4 <trimStack>
    e554:	|      addq.l #4,sp
	if (! getValueType (&x2, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e556:	|      movea.l 24(sp),a0
    e55a:	|      move.l 24(a0),d0
    e55e:	|      move.l d0,-(sp)
    e560:	|      pea 1 <_start+0x1>
    e564:	|      lea 12(sp),a0
    e568:	|      move.l a0,-(sp)
    e56a:	|      jsr 14260 <getValueType>
    e570:	|      lea 12(sp),sp
    e574:	|      tst.w d0
    e576:	|  /-- bne.s e57e <builtIn_blankArea+0x64>
    e578:	|  |   moveq #1,d0
    e57a:	+--|-- bra.w e61c <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e57e:	|  \-> moveq #24,d0
    e580:	|      add.l 24(sp),d0
    e584:	|      move.l d0,-(sp)
    e586:	|      jsr 14be4 <trimStack>
    e58c:	|      addq.l #4,sp
	if (! getValueType (&y1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e58e:	|      movea.l 24(sp),a0
    e592:	|      move.l 24(a0),d0
    e596:	|      move.l d0,-(sp)
    e598:	|      pea 1 <_start+0x1>
    e59c:	|      moveq #16,d0
    e59e:	|      add.l sp,d0
    e5a0:	|      move.l d0,-(sp)
    e5a2:	|      jsr 14260 <getValueType>
    e5a8:	|      lea 12(sp),sp
    e5ac:	|      tst.w d0
    e5ae:	|  /-- bne.s e5b4 <builtIn_blankArea+0x9a>
    e5b0:	|  |   moveq #1,d0
    e5b2:	+--|-- bra.s e61c <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e5b4:	|  \-> moveq #24,d0
    e5b6:	|      add.l 24(sp),d0
    e5ba:	|      move.l d0,-(sp)
    e5bc:	|      jsr 14be4 <trimStack>
    e5c2:	|      addq.l #4,sp
	if (! getValueType (&x1, SVT_INT, &fun -> stack -> thisVar)) return BR_ERROR;
    e5c4:	|      movea.l 24(sp),a0
    e5c8:	|      move.l 24(a0),d0
    e5cc:	|      move.l d0,-(sp)
    e5ce:	|      pea 1 <_start+0x1>
    e5d2:	|      moveq #20,d0
    e5d4:	|      add.l sp,d0
    e5d6:	|      move.l d0,-(sp)
    e5d8:	|      jsr 14260 <getValueType>
    e5de:	|      lea 12(sp),sp
    e5e2:	|      tst.w d0
    e5e4:	|  /-- bne.s e5ea <builtIn_blankArea+0xd0>
    e5e6:	|  |   moveq #1,d0
    e5e8:	+--|-- bra.s e61c <builtIn_blankArea+0x102>
	trimStack (&fun -> stack);
    e5ea:	|  \-> moveq #24,d0
    e5ec:	|      add.l 24(sp),d0
    e5f0:	|      move.l d0,-(sp)
    e5f2:	|      jsr 14be4 <trimStack>
    e5f8:	|      addq.l #4,sp
	blankScreen (x1, y1, x2, y2);
    e5fa:	|      movea.l (sp),a1
    e5fc:	|      movea.l 4(sp),a0
    e600:	|      move.l 8(sp),d1
    e604:	|      move.l 12(sp),d0
    e608:	|      move.l a1,-(sp)
    e60a:	|      move.l a0,-(sp)
    e60c:	|      move.l d1,-(sp)
    e60e:	|      move.l d0,-(sp)
    e610:	|      jsr ccaa <blankScreen>
    e616:	|      lea 16(sp),sp
	return BR_CONTINUE;
    e61a:	|      moveq #2,d0
}
    e61c:	\----> lea 16(sp),sp
    e620:	       rts

0000e622 <builtIn_darkBackground>:

builtIn(darkBackground)
{
	UNUSEDALL
	darkScreen ();
    e622:	jsr ccbe <darkScreen>
	return BR_CONTINUE;
    e628:	moveq #2,d0
}
    e62a:	rts

0000e62c <builtIn_addOverlay>:

builtIn(addOverlay)
{
    e62c:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e630:	       movea.l 20(sp),a0
    e634:	       move.l 24(a0),d0
    e638:	       move.l d0,-(sp)
    e63a:	       pea 1 <_start+0x1>
    e63e:	       lea 8(sp),a0
    e642:	       move.l a0,-(sp)
    e644:	       jsr 14260 <getValueType>
    e64a:	       lea 12(sp),sp
    e64e:	       tst.w d0
    e650:	   /-- bne.s e658 <builtIn_addOverlay+0x2c>
    e652:	   |   moveq #1,d0
    e654:	/--|-- bra.w e6f0 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e658:	|  \-> moveq #24,d0
    e65a:	|      add.l 20(sp),d0
    e65e:	|      move.l d0,-(sp)
    e660:	|      jsr 14be4 <trimStack>
    e666:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e668:	|      movea.l 20(sp),a0
    e66c:	|      move.l 24(a0),d0
    e670:	|      move.l d0,-(sp)
    e672:	|      pea 1 <_start+0x1>
    e676:	|      moveq #12,d0
    e678:	|      add.l sp,d0
    e67a:	|      move.l d0,-(sp)
    e67c:	|      jsr 14260 <getValueType>
    e682:	|      lea 12(sp),sp
    e686:	|      tst.w d0
    e688:	|  /-- bne.s e68e <builtIn_addOverlay+0x62>
    e68a:	|  |   moveq #1,d0
    e68c:	+--|-- bra.s e6f0 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e68e:	|  \-> moveq #24,d0
    e690:	|      add.l 20(sp),d0
    e694:	|      move.l d0,-(sp)
    e696:	|      jsr 14be4 <trimStack>
    e69c:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e69e:	|      movea.l 20(sp),a0
    e6a2:	|      move.l 24(a0),d0
    e6a6:	|      move.l d0,-(sp)
    e6a8:	|      pea 5 <_start+0x5>
    e6ac:	|      moveq #16,d0
    e6ae:	|      add.l sp,d0
    e6b0:	|      move.l d0,-(sp)
    e6b2:	|      jsr 14260 <getValueType>
    e6b8:	|      lea 12(sp),sp
    e6bc:	|      tst.w d0
    e6be:	|  /-- bne.s e6c4 <builtIn_addOverlay+0x98>
    e6c0:	|  |   moveq #1,d0
    e6c2:	+--|-- bra.s e6f0 <builtIn_addOverlay+0xc4>
	trimStack (&fun -> stack);
    e6c4:	|  \-> moveq #24,d0
    e6c6:	|      add.l 20(sp),d0
    e6ca:	|      move.l d0,-(sp)
    e6cc:	|      jsr 14be4 <trimStack>
    e6d2:	|      addq.l #4,sp
	loadBackDrop (fileNumber, xPos, yPos);
    e6d4:	|      movea.l (sp),a0
    e6d6:	|      move.l 4(sp),d1
    e6da:	|      move.l 8(sp),d0
    e6de:	|      move.l a0,-(sp)
    e6e0:	|      move.l d1,-(sp)
    e6e2:	|      move.l d0,-(sp)
    e6e4:	|      jsr cddc <loadBackDrop>
    e6ea:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e6ee:	|      moveq #2,d0
}
    e6f0:	\----> lea 12(sp),sp
    e6f4:	       rts

0000e6f6 <builtIn_mixOverlay>:

builtIn(mixOverlay)
{
    e6f6:	       lea -12(sp),sp
	UNUSEDALL
	int fileNumber, xPos, yPos;
	if (! getValueType(&yPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e6fa:	       movea.l 20(sp),a0
    e6fe:	       move.l 24(a0),d0
    e702:	       move.l d0,-(sp)
    e704:	       pea 1 <_start+0x1>
    e708:	       lea 8(sp),a0
    e70c:	       move.l a0,-(sp)
    e70e:	       jsr 14260 <getValueType>
    e714:	       lea 12(sp),sp
    e718:	       tst.w d0
    e71a:	   /-- bne.s e722 <builtIn_mixOverlay+0x2c>
    e71c:	   |   moveq #1,d0
    e71e:	/--|-- bra.w e7ba <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    e722:	|  \-> moveq #24,d0
    e724:	|      add.l 20(sp),d0
    e728:	|      move.l d0,-(sp)
    e72a:	|      jsr 14be4 <trimStack>
    e730:	|      addq.l #4,sp
	if (! getValueType(&xPos, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e732:	|      movea.l 20(sp),a0
    e736:	|      move.l 24(a0),d0
    e73a:	|      move.l d0,-(sp)
    e73c:	|      pea 1 <_start+0x1>
    e740:	|      moveq #12,d0
    e742:	|      add.l sp,d0
    e744:	|      move.l d0,-(sp)
    e746:	|      jsr 14260 <getValueType>
    e74c:	|      lea 12(sp),sp
    e750:	|      tst.w d0
    e752:	|  /-- bne.s e758 <builtIn_mixOverlay+0x62>
    e754:	|  |   moveq #1,d0
    e756:	+--|-- bra.s e7ba <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    e758:	|  \-> moveq #24,d0
    e75a:	|      add.l 20(sp),d0
    e75e:	|      move.l d0,-(sp)
    e760:	|      jsr 14be4 <trimStack>
    e766:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    e768:	|      movea.l 20(sp),a0
    e76c:	|      move.l 24(a0),d0
    e770:	|      move.l d0,-(sp)
    e772:	|      pea 5 <_start+0x5>
    e776:	|      moveq #16,d0
    e778:	|      add.l sp,d0
    e77a:	|      move.l d0,-(sp)
    e77c:	|      jsr 14260 <getValueType>
    e782:	|      lea 12(sp),sp
    e786:	|      tst.w d0
    e788:	|  /-- bne.s e78e <builtIn_mixOverlay+0x98>
    e78a:	|  |   moveq #1,d0
    e78c:	+--|-- bra.s e7ba <builtIn_mixOverlay+0xc4>
	trimStack (&fun -> stack);
    e78e:	|  \-> moveq #24,d0
    e790:	|      add.l 20(sp),d0
    e794:	|      move.l d0,-(sp)
    e796:	|      jsr 14be4 <trimStack>
    e79c:	|      addq.l #4,sp
	mixBackDrop (fileNumber, xPos, yPos);
    e79e:	|      movea.l (sp),a0
    e7a0:	|      move.l 4(sp),d1
    e7a4:	|      move.l 8(sp),d0
    e7a8:	|      move.l a0,-(sp)
    e7aa:	|      move.l d1,-(sp)
    e7ac:	|      move.l d0,-(sp)
    e7ae:	|      jsr ce52 <mixBackDrop>
    e7b4:	|      lea 12(sp),sp
	return BR_CONTINUE;
    e7b8:	|      moveq #2,d0
}
    e7ba:	\----> lea 12(sp),sp
    e7be:	       rts

0000e7c0 <builtIn_pasteImage>:

builtIn(pasteImage)
{
    e7c0:	       lea -12(sp),sp
	UNUSEDALL
	KPrintF("pasteimage: Started\n");
    e7c4:	       pea 1929d <graphics.c.1c13408a+0x5f>
    e7ca:	       jsr 16c5e <KPrintF>
    e7d0:	       addq.l #4,sp
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e7d2:	       movea.l 20(sp),a0
    e7d6:	       move.l 24(a0),d0
    e7da:	       move.l d0,-(sp)
    e7dc:	       pea 1 <_start+0x1>
    e7e0:	       lea 8(sp),a0
    e7e4:	       move.l a0,-(sp)
    e7e6:	       jsr 14260 <getValueType>
    e7ec:	       lea 12(sp),sp
    e7f0:	       tst.w d0
    e7f2:	   /-- bne.s e7fa <builtIn_pasteImage+0x3a>
    e7f4:	   |   moveq #1,d0
    e7f6:	/--|-- bra.w e898 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    e7fa:	|  \-> moveq #24,d0
    e7fc:	|      add.l 20(sp),d0
    e800:	|      move.l d0,-(sp)
    e802:	|      jsr 14be4 <trimStack>
    e808:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e80a:	|      movea.l 20(sp),a0
    e80e:	|      move.l 24(a0),d0
    e812:	|      move.l d0,-(sp)
    e814:	|      pea 1 <_start+0x1>
    e818:	|      moveq #12,d0
    e81a:	|      add.l sp,d0
    e81c:	|      move.l d0,-(sp)
    e81e:	|      jsr 14260 <getValueType>
    e824:	|      lea 12(sp),sp
    e828:	|      tst.w d0
    e82a:	|  /-- bne.s e830 <builtIn_pasteImage+0x70>
    e82c:	|  |   moveq #1,d0
    e82e:	+--|-- bra.s e898 <builtIn_pasteImage+0xd8>
	trimStack (&fun -> stack);
    e830:	|  \-> moveq #24,d0
    e832:	|      add.l 20(sp),d0
    e836:	|      move.l d0,-(sp)
    e838:	|      jsr 14be4 <trimStack>
    e83e:	|      addq.l #4,sp
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
    e840:	|      movea.l 20(sp),a0
    e844:	|      move.l 24(a0),d0
    e848:	|      move.l d0,-(sp)
    e84a:	|      jsr 14738 <getAnimationFromVar>
    e850:	|      addq.l #4,sp
    e852:	|      move.l d0,8(sp)
	trimStack (&fun -> stack);
    e856:	|      moveq #24,d0
    e858:	|      add.l 20(sp),d0
    e85c:	|      move.l d0,-(sp)
    e85e:	|      jsr 14be4 <trimStack>
    e864:	|      addq.l #4,sp
	if (pp == NULL) return BR_CONTINUE;
    e866:	|      tst.l 8(sp)
    e86a:	|  /-- bne.s e870 <builtIn_pasteImage+0xb0>
    e86c:	|  |   moveq #2,d0
    e86e:	+--|-- bra.s e898 <builtIn_pasteImage+0xd8>

	pasteCursor (x, y, pp);
    e870:	|  \-> move.l (sp),d1
    e872:	|      move.l 4(sp),d0
    e876:	|      move.l 8(sp),-(sp)
    e87a:	|      move.l d1,-(sp)
    e87c:	|      move.l d0,-(sp)
    e87e:	|      jsr d94 <pasteCursor>
    e884:	|      lea 12(sp),sp
	KPrintF("pasteimage: Finished\n");
    e888:	|      pea 192b2 <graphics.c.1c13408a+0x74>
    e88e:	|      jsr 16c5e <KPrintF>
    e894:	|      addq.l #4,sp
	return BR_CONTINUE;	
    e896:	|      moveq #2,d0
}
    e898:	\----> lea 12(sp),sp
    e89c:	       rts

0000e89e <builtIn_setSceneDimensions>:

#pragma mark -
#pragma mark Background Image - Scrolling

builtIn(setSceneDimensions)
{
    e89e:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e8a0:	       movea.l 16(sp),a0
    e8a4:	       move.l 24(a0),d0
    e8a8:	       move.l d0,-(sp)
    e8aa:	       pea 1 <_start+0x1>
    e8ae:	       move.l sp,d0
    e8b0:	       addq.l #8,d0
    e8b2:	       move.l d0,-(sp)
    e8b4:	       jsr 14260 <getValueType>
    e8ba:	       lea 12(sp),sp
    e8be:	       tst.w d0
    e8c0:	   /-- bne.s e8c8 <builtIn_setSceneDimensions+0x2a>
    e8c2:	   |   moveq #1,d0
    e8c4:	/--|-- bra.w e950 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    e8c8:	|  \-> moveq #24,d0
    e8ca:	|      add.l 16(sp),d0
    e8ce:	|      move.l d0,-(sp)
    e8d0:	|      jsr 14be4 <trimStack>
    e8d6:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e8d8:	|      movea.l 16(sp),a0
    e8dc:	|      move.l 24(a0),d0
    e8e0:	|      move.l d0,-(sp)
    e8e2:	|      pea 1 <_start+0x1>
    e8e6:	|      moveq #12,d0
    e8e8:	|      add.l sp,d0
    e8ea:	|      move.l d0,-(sp)
    e8ec:	|      jsr 14260 <getValueType>
    e8f2:	|      lea 12(sp),sp
    e8f6:	|      tst.w d0
    e8f8:	|  /-- bne.s e8fe <builtIn_setSceneDimensions+0x60>
    e8fa:	|  |   moveq #1,d0
    e8fc:	+--|-- bra.s e950 <builtIn_setSceneDimensions+0xb2>
	trimStack (&fun -> stack);
    e8fe:	|  \-> moveq #24,d0
    e900:	|      add.l 16(sp),d0
    e904:	|      move.l d0,-(sp)
    e906:	|      jsr 14be4 <trimStack>
    e90c:	|      addq.l #4,sp
	if (resizeBackdrop (x, y)) {
    e90e:	|      move.l (sp),d1
    e910:	|      move.l 4(sp),d0
    e914:	|      move.l d1,-(sp)
    e916:	|      move.l d0,-(sp)
    e918:	|      jsr cea8 <resizeBackdrop>
    e91e:	|      addq.l #8,sp
    e920:	|      tst.w d0
    e922:	|  /-- beq.s e940 <builtIn_setSceneDimensions+0xa2>
		blankScreen (0, 0, x, y);
    e924:	|  |   move.l (sp),d1
    e926:	|  |   move.l 4(sp),d0
    e92a:	|  |   move.l d1,-(sp)
    e92c:	|  |   move.l d0,-(sp)
    e92e:	|  |   clr.l -(sp)
    e930:	|  |   clr.l -(sp)
    e932:	|  |   jsr ccaa <blankScreen>
    e938:	|  |   lea 16(sp),sp
		return BR_CONTINUE;
    e93c:	|  |   moveq #2,d0
    e93e:	+--|-- bra.s e950 <builtIn_setSceneDimensions+0xb2>
	}
	KPrintF("Out of memory creating new backdrop.");
    e940:	|  \-> pea 192c8 <graphics.c.1c13408a+0x8a>
    e946:	|      jsr 16c5e <KPrintF>
    e94c:	|      addq.l #4,sp
	return BR_ERROR;
    e94e:	|      moveq #1,d0
}
    e950:	\----> addq.l #8,sp
    e952:	       rts

0000e954 <builtIn_aimCamera>:

builtIn(aimCamera)
{
    e954:	          move.l d3,-(sp)
    e956:	          move.l d2,-(sp)
	UNUSEDALL
	if (! getValueType(&cameraY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e958:	          movea.l 16(sp),a0
    e95c:	          move.l 24(a0),d0
    e960:	          move.l d0,-(sp)
    e962:	          pea 1 <_start+0x1>
    e966:	          pea 1a8b6 <cameraY>
    e96c:	          jsr 14260 <getValueType>
    e972:	          lea 12(sp),sp
    e976:	          tst.w d0
    e978:	      /-- bne.s e980 <builtIn_aimCamera+0x2c>
    e97a:	      |   moveq #1,d0
    e97c:	/-----|-- bra.w ec02 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    e980:	|     \-> moveq #24,d0
    e982:	|         add.l 16(sp),d0
    e986:	|         move.l d0,-(sp)
    e988:	|         jsr 14be4 <trimStack>
    e98e:	|         addq.l #4,sp
	if (! getValueType(&cameraX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    e990:	|         movea.l 16(sp),a0
    e994:	|         move.l 24(a0),d0
    e998:	|         move.l d0,-(sp)
    e99a:	|         pea 1 <_start+0x1>
    e99e:	|         pea 1a8b2 <cameraX>
    e9a4:	|         jsr 14260 <getValueType>
    e9aa:	|         lea 12(sp),sp
    e9ae:	|         tst.w d0
    e9b0:	|     /-- bne.s e9b8 <builtIn_aimCamera+0x64>
    e9b2:	|     |   moveq #1,d0
    e9b4:	+-----|-- bra.w ec02 <builtIn_aimCamera+0x2ae>
	trimStack (&fun -> stack);
    e9b8:	|     \-> moveq #24,d0
    e9ba:	|         add.l 16(sp),d0
    e9be:	|         move.l d0,-(sp)
    e9c0:	|         jsr 14be4 <trimStack>
    e9c6:	|         addq.l #4,sp

	cameraX -= (FLOAT)(winWidth >> 1)/ cameraZoom;
    e9c8:	|         move.l 1a8b2 <cameraX>,d0
    e9ce:	|         move.l d0,-(sp)
    e9d0:	|         jsr 1709a <__floatsisf>
    e9d6:	|         addq.l #4,sp
    e9d8:	|         move.l d0,d2
    e9da:	|         move.l 1a6f8 <winWidth>,d0
    e9e0:	|         lsr.l #1,d0
    e9e2:	|         move.l d0,-(sp)
    e9e4:	|         jsr 170c2 <__floatunsisf>
    e9ea:	|         addq.l #4,sp
    e9ec:	|         move.l d0,d1
    e9ee:	|         move.l 1a142 <cameraZoom>,d0
    e9f4:	|         move.l d0,-(sp)
    e9f6:	|         move.l d1,-(sp)
    e9f8:	|         jsr 16f46 <__divsf3>
    e9fe:	|         addq.l #8,sp
    ea00:	|         move.l d0,-(sp)
    ea02:	|         move.l d2,-(sp)
    ea04:	|         jsr 1738e <__subsf3>
    ea0a:	|         addq.l #8,sp
    ea0c:	|         move.l d0,-(sp)
    ea0e:	|         jsr 17032 <__fixsfsi>
    ea14:	|         addq.l #4,sp
    ea16:	|         move.l d0,1a8b2 <cameraX>
	cameraY -= (FLOAT)(winHeight >> 1)/ cameraZoom;
    ea1c:	|         move.l 1a8b6 <cameraY>,d0
    ea22:	|         move.l d0,-(sp)
    ea24:	|         jsr 1709a <__floatsisf>
    ea2a:	|         addq.l #4,sp
    ea2c:	|         move.l d0,d2
    ea2e:	|         move.l 1a6fc <winHeight>,d0
    ea34:	|         lsr.l #1,d0
    ea36:	|         move.l d0,-(sp)
    ea38:	|         jsr 170c2 <__floatunsisf>
    ea3e:	|         addq.l #4,sp
    ea40:	|         move.l d0,d1
    ea42:	|         move.l 1a142 <cameraZoom>,d0
    ea48:	|         move.l d0,-(sp)
    ea4a:	|         move.l d1,-(sp)
    ea4c:	|         jsr 16f46 <__divsf3>
    ea52:	|         addq.l #8,sp
    ea54:	|         move.l d0,-(sp)
    ea56:	|         move.l d2,-(sp)
    ea58:	|         jsr 1738e <__subsf3>
    ea5e:	|         addq.l #8,sp
    ea60:	|         move.l d0,-(sp)
    ea62:	|         jsr 17032 <__fixsfsi>
    ea68:	|         addq.l #4,sp
    ea6a:	|         move.l d0,1a8b6 <cameraY>

	if (cameraX < 0) cameraX = 0;
    ea70:	|         move.l 1a8b2 <cameraX>,d0
    ea76:	|     /-- bpl.s ea82 <builtIn_aimCamera+0x12e>
    ea78:	|     |   clr.l 1a8b2 <cameraX>
    ea7e:	|  /--|-- bra.w eb38 <builtIn_aimCamera+0x1e4>
	else if (cameraX > sceneWidth - (FLOAT)winWidth/ cameraZoom) cameraX = sceneWidth - (FLOAT)winWidth/ cameraZoom;
    ea82:	|  |  \-> move.l 1a8b2 <cameraX>,d0
    ea88:	|  |      move.l d0,-(sp)
    ea8a:	|  |      jsr 1709a <__floatsisf>
    ea90:	|  |      addq.l #4,sp
    ea92:	|  |      move.l d0,d2
    ea94:	|  |      move.l 1a894 <sceneWidth>,d0
    ea9a:	|  |      move.l d0,-(sp)
    ea9c:	|  |      jsr 170c2 <__floatunsisf>
    eaa2:	|  |      addq.l #4,sp
    eaa4:	|  |      move.l d0,d3
    eaa6:	|  |      move.l 1a6f8 <winWidth>,d0
    eaac:	|  |      move.l d0,-(sp)
    eaae:	|  |      jsr 170c2 <__floatunsisf>
    eab4:	|  |      addq.l #4,sp
    eab6:	|  |      move.l d0,d1
    eab8:	|  |      move.l 1a142 <cameraZoom>,d0
    eabe:	|  |      move.l d0,-(sp)
    eac0:	|  |      move.l d1,-(sp)
    eac2:	|  |      jsr 16f46 <__divsf3>
    eac8:	|  |      addq.l #8,sp
    eaca:	|  |      move.l d0,-(sp)
    eacc:	|  |      move.l d3,-(sp)
    eace:	|  |      jsr 1738e <__subsf3>
    ead4:	|  |      addq.l #8,sp
    ead6:	|  |      move.l d0,-(sp)
    ead8:	|  |      move.l d2,-(sp)
    eada:	|  |      jsr 17206 <__gtsf2>
    eae0:	|  |      addq.l #8,sp
    eae2:	|  |      tst.l d0
    eae4:	|  +----- ble.s eb38 <builtIn_aimCamera+0x1e4>
    eae6:	|  |      move.l 1a894 <sceneWidth>,d0
    eaec:	|  |      move.l d0,-(sp)
    eaee:	|  |      jsr 170c2 <__floatunsisf>
    eaf4:	|  |      addq.l #4,sp
    eaf6:	|  |      move.l d0,d2
    eaf8:	|  |      move.l 1a6f8 <winWidth>,d0
    eafe:	|  |      move.l d0,-(sp)
    eb00:	|  |      jsr 170c2 <__floatunsisf>
    eb06:	|  |      addq.l #4,sp
    eb08:	|  |      move.l d0,d1
    eb0a:	|  |      move.l 1a142 <cameraZoom>,d0
    eb10:	|  |      move.l d0,-(sp)
    eb12:	|  |      move.l d1,-(sp)
    eb14:	|  |      jsr 16f46 <__divsf3>
    eb1a:	|  |      addq.l #8,sp
    eb1c:	|  |      move.l d0,-(sp)
    eb1e:	|  |      move.l d2,-(sp)
    eb20:	|  |      jsr 1738e <__subsf3>
    eb26:	|  |      addq.l #8,sp
    eb28:	|  |      move.l d0,-(sp)
    eb2a:	|  |      jsr 17032 <__fixsfsi>
    eb30:	|  |      addq.l #4,sp
    eb32:	|  |      move.l d0,1a8b2 <cameraX>
	if (cameraY < 0) cameraY = 0;
    eb38:	|  \----> move.l 1a8b6 <cameraY>,d0
    eb3e:	|     /-- bpl.s eb4a <builtIn_aimCamera+0x1f6>
    eb40:	|     |   clr.l 1a8b6 <cameraY>
    eb46:	|  /--|-- bra.w ec00 <builtIn_aimCamera+0x2ac>
	else if (cameraY > sceneHeight - (FLOAT)winHeight/ cameraZoom) cameraY = sceneHeight - (FLOAT)winHeight/ cameraZoom;
    eb4a:	|  |  \-> move.l 1a8b6 <cameraY>,d0
    eb50:	|  |      move.l d0,-(sp)
    eb52:	|  |      jsr 1709a <__floatsisf>
    eb58:	|  |      addq.l #4,sp
    eb5a:	|  |      move.l d0,d2
    eb5c:	|  |      move.l 1a898 <sceneHeight>,d0
    eb62:	|  |      move.l d0,-(sp)
    eb64:	|  |      jsr 170c2 <__floatunsisf>
    eb6a:	|  |      addq.l #4,sp
    eb6c:	|  |      move.l d0,d3
    eb6e:	|  |      move.l 1a6fc <winHeight>,d0
    eb74:	|  |      move.l d0,-(sp)
    eb76:	|  |      jsr 170c2 <__floatunsisf>
    eb7c:	|  |      addq.l #4,sp
    eb7e:	|  |      move.l d0,d1
    eb80:	|  |      move.l 1a142 <cameraZoom>,d0
    eb86:	|  |      move.l d0,-(sp)
    eb88:	|  |      move.l d1,-(sp)
    eb8a:	|  |      jsr 16f46 <__divsf3>
    eb90:	|  |      addq.l #8,sp
    eb92:	|  |      move.l d0,-(sp)
    eb94:	|  |      move.l d3,-(sp)
    eb96:	|  |      jsr 1738e <__subsf3>
    eb9c:	|  |      addq.l #8,sp
    eb9e:	|  |      move.l d0,-(sp)
    eba0:	|  |      move.l d2,-(sp)
    eba2:	|  |      jsr 17206 <__gtsf2>
    eba8:	|  |      addq.l #8,sp
    ebaa:	|  |      tst.l d0
    ebac:	|  +----- ble.s ec00 <builtIn_aimCamera+0x2ac>
    ebae:	|  |      move.l 1a898 <sceneHeight>,d0
    ebb4:	|  |      move.l d0,-(sp)
    ebb6:	|  |      jsr 170c2 <__floatunsisf>
    ebbc:	|  |      addq.l #4,sp
    ebbe:	|  |      move.l d0,d2
    ebc0:	|  |      move.l 1a6fc <winHeight>,d0
    ebc6:	|  |      move.l d0,-(sp)
    ebc8:	|  |      jsr 170c2 <__floatunsisf>
    ebce:	|  |      addq.l #4,sp
    ebd0:	|  |      move.l d0,d1
    ebd2:	|  |      move.l 1a142 <cameraZoom>,d0
    ebd8:	|  |      move.l d0,-(sp)
    ebda:	|  |      move.l d1,-(sp)
    ebdc:	|  |      jsr 16f46 <__divsf3>
    ebe2:	|  |      addq.l #8,sp
    ebe4:	|  |      move.l d0,-(sp)
    ebe6:	|  |      move.l d2,-(sp)
    ebe8:	|  |      jsr 1738e <__subsf3>
    ebee:	|  |      addq.l #8,sp
    ebf0:	|  |      move.l d0,-(sp)
    ebf2:	|  |      jsr 17032 <__fixsfsi>
    ebf8:	|  |      addq.l #4,sp
    ebfa:	|  |      move.l d0,1a8b6 <cameraY>
	return BR_CONTINUE;
    ec00:	|  \----> moveq #2,d0
}
    ec02:	\-------> move.l (sp)+,d2
    ec04:	          move.l (sp)+,d3
    ec06:	          rts

0000ec08 <builtIn_zoomCamera>:


builtIn(zoomCamera)
{
    ec08:	       subq.l #4,sp
    ec0a:	       move.l d2,-(sp)
	UNUSEDALL
	int z;
	if (! getValueType(&z, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ec0c:	       movea.l 16(sp),a0
    ec10:	       move.l 24(a0),d0
    ec14:	       move.l d0,-(sp)
    ec16:	       pea 1 <_start+0x1>
    ec1a:	       moveq #12,d0
    ec1c:	       add.l sp,d0
    ec1e:	       move.l d0,-(sp)
    ec20:	       jsr 14260 <getValueType>
    ec26:	       lea 12(sp),sp
    ec2a:	       tst.w d0
    ec2c:	   /-- bne.s ec34 <builtIn_zoomCamera+0x2c>
    ec2e:	   |   moveq #1,d0
    ec30:	/--|-- bra.w ee2e <builtIn_zoomCamera+0x226>
	trimStack (&fun -> stack);
    ec34:	|  \-> moveq #24,d0
    ec36:	|      add.l 16(sp),d0
    ec3a:	|      move.l d0,-(sp)
    ec3c:	|      jsr 14be4 <trimStack>
    ec42:	|      addq.l #4,sp

	input.mouseX = input.mouseX * cameraZoom;
    ec44:	|      move.l 1a760 <input+0xa>,d0
    ec4a:	|      move.l d0,-(sp)
    ec4c:	|      jsr 1709a <__floatsisf>
    ec52:	|      addq.l #4,sp
    ec54:	|      move.l d0,d1
    ec56:	|      move.l 1a142 <cameraZoom>,d0
    ec5c:	|      move.l d0,-(sp)
    ec5e:	|      move.l d1,-(sp)
    ec60:	|      jsr 1714c <__mulsf3>
    ec66:	|      addq.l #8,sp
    ec68:	|      move.l d0,-(sp)
    ec6a:	|      jsr 17032 <__fixsfsi>
    ec70:	|      addq.l #4,sp
    ec72:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = input.mouseY * cameraZoom;
    ec78:	|      move.l 1a764 <input+0xe>,d0
    ec7e:	|      move.l d0,-(sp)
    ec80:	|      jsr 1709a <__floatsisf>
    ec86:	|      addq.l #4,sp
    ec88:	|      move.l d0,d1
    ec8a:	|      move.l 1a142 <cameraZoom>,d0
    ec90:	|      move.l d0,-(sp)
    ec92:	|      move.l d1,-(sp)
    ec94:	|      jsr 1714c <__mulsf3>
    ec9a:	|      addq.l #8,sp
    ec9c:	|      move.l d0,-(sp)
    ec9e:	|      jsr 17032 <__fixsfsi>
    eca4:	|      addq.l #4,sp
    eca6:	|      move.l d0,1a764 <input+0xe>


	cameraZoom = (FLOAT) z * (FLOAT) 0.01;
    ecac:	|      move.l 4(sp),d0
    ecb0:	|      move.l d0,-(sp)
    ecb2:	|      jsr 1709a <__floatsisf>
    ecb8:	|      addq.l #4,sp
    ecba:	|      move.l #1008981770,-(sp)
    ecc0:	|      move.l d0,-(sp)
    ecc2:	|      jsr 1714c <__mulsf3>
    ecc8:	|      addq.l #8,sp
    ecca:	|      move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winWidth / cameraZoom > sceneWidth) cameraZoom = (FLOAT)winWidth / sceneWidth;
    ecd0:	|      move.l 1a6f8 <winWidth>,d0
    ecd6:	|      move.l d0,-(sp)
    ecd8:	|      jsr 170c2 <__floatunsisf>
    ecde:	|      addq.l #4,sp
    ece0:	|      move.l d0,d1
    ece2:	|      move.l 1a142 <cameraZoom>,d0
    ece8:	|      move.l d0,-(sp)
    ecea:	|      move.l d1,-(sp)
    ecec:	|      jsr 16f46 <__divsf3>
    ecf2:	|      addq.l #8,sp
    ecf4:	|      move.l d0,d2
    ecf6:	|      move.l 1a894 <sceneWidth>,d0
    ecfc:	|      move.l d0,-(sp)
    ecfe:	|      jsr 170c2 <__floatunsisf>
    ed04:	|      addq.l #4,sp
    ed06:	|      move.l d0,-(sp)
    ed08:	|      move.l d2,-(sp)
    ed0a:	|      jsr 17206 <__gtsf2>
    ed10:	|      addq.l #8,sp
    ed12:	|      tst.l d0
    ed14:	|  /-- ble.s ed4a <builtIn_zoomCamera+0x142>
    ed16:	|  |   move.l 1a6f8 <winWidth>,d0
    ed1c:	|  |   move.l d0,-(sp)
    ed1e:	|  |   jsr 170c2 <__floatunsisf>
    ed24:	|  |   addq.l #4,sp
    ed26:	|  |   move.l d0,d2
    ed28:	|  |   move.l 1a894 <sceneWidth>,d0
    ed2e:	|  |   move.l d0,-(sp)
    ed30:	|  |   jsr 170c2 <__floatunsisf>
    ed36:	|  |   addq.l #4,sp
    ed38:	|  |   move.l d0,-(sp)
    ed3a:	|  |   move.l d2,-(sp)
    ed3c:	|  |   jsr 16f46 <__divsf3>
    ed42:	|  |   addq.l #8,sp
    ed44:	|  |   move.l d0,1a142 <cameraZoom>
	if ((FLOAT) winHeight / cameraZoom > sceneHeight) cameraZoom = (FLOAT)winHeight / sceneHeight;
    ed4a:	|  \-> move.l 1a6fc <winHeight>,d0
    ed50:	|      move.l d0,-(sp)
    ed52:	|      jsr 170c2 <__floatunsisf>
    ed58:	|      addq.l #4,sp
    ed5a:	|      move.l d0,d1
    ed5c:	|      move.l 1a142 <cameraZoom>,d0
    ed62:	|      move.l d0,-(sp)
    ed64:	|      move.l d1,-(sp)
    ed66:	|      jsr 16f46 <__divsf3>
    ed6c:	|      addq.l #8,sp
    ed6e:	|      move.l d0,d2
    ed70:	|      move.l 1a898 <sceneHeight>,d0
    ed76:	|      move.l d0,-(sp)
    ed78:	|      jsr 170c2 <__floatunsisf>
    ed7e:	|      addq.l #4,sp
    ed80:	|      move.l d0,-(sp)
    ed82:	|      move.l d2,-(sp)
    ed84:	|      jsr 17206 <__gtsf2>
    ed8a:	|      addq.l #8,sp
    ed8c:	|      tst.l d0
    ed8e:	|  /-- ble.s edc4 <builtIn_zoomCamera+0x1bc>
    ed90:	|  |   move.l 1a6fc <winHeight>,d0
    ed96:	|  |   move.l d0,-(sp)
    ed98:	|  |   jsr 170c2 <__floatunsisf>
    ed9e:	|  |   addq.l #4,sp
    eda0:	|  |   move.l d0,d2
    eda2:	|  |   move.l 1a898 <sceneHeight>,d0
    eda8:	|  |   move.l d0,-(sp)
    edaa:	|  |   jsr 170c2 <__floatunsisf>
    edb0:	|  |   addq.l #4,sp
    edb2:	|  |   move.l d0,-(sp)
    edb4:	|  |   move.l d2,-(sp)
    edb6:	|  |   jsr 16f46 <__divsf3>
    edbc:	|  |   addq.l #8,sp
    edbe:	|  |   move.l d0,1a142 <cameraZoom>
	//setPixelCoords (FALSE); Todo: Amigize this

	input.mouseX = input.mouseX / cameraZoom;
    edc4:	|  \-> move.l 1a760 <input+0xa>,d0
    edca:	|      move.l d0,-(sp)
    edcc:	|      jsr 1709a <__floatsisf>
    edd2:	|      addq.l #4,sp
    edd4:	|      move.l d0,d1
    edd6:	|      move.l 1a142 <cameraZoom>,d0
    eddc:	|      move.l d0,-(sp)
    edde:	|      move.l d1,-(sp)
    ede0:	|      jsr 16f46 <__divsf3>
    ede6:	|      addq.l #8,sp
    ede8:	|      move.l d0,-(sp)
    edea:	|      jsr 17032 <__fixsfsi>
    edf0:	|      addq.l #4,sp
    edf2:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = input.mouseY / cameraZoom;
    edf8:	|      move.l 1a764 <input+0xe>,d0
    edfe:	|      move.l d0,-(sp)
    ee00:	|      jsr 1709a <__floatsisf>
    ee06:	|      addq.l #4,sp
    ee08:	|      move.l d0,d1
    ee0a:	|      move.l 1a142 <cameraZoom>,d0
    ee10:	|      move.l d0,-(sp)
    ee12:	|      move.l d1,-(sp)
    ee14:	|      jsr 16f46 <__divsf3>
    ee1a:	|      addq.l #8,sp
    ee1c:	|      move.l d0,-(sp)
    ee1e:	|      jsr 17032 <__fixsfsi>
    ee24:	|      addq.l #4,sp
    ee26:	|      move.l d0,1a764 <input+0xe>

	return BR_CONTINUE;
    ee2c:	|      moveq #2,d0
}
    ee2e:	\----> move.l (sp)+,d2
    ee30:	       addq.l #4,sp
    ee32:	       rts

0000ee34 <builtIn_pickOne>:
#pragma mark -
#pragma mark Variables


builtIn(pickOne)
{
    ee34:	             subq.l #4,sp
	UNUSEDALL
	if (! numParams) {
    ee36:	             tst.l 8(sp)
    ee3a:	         /-- bne.s ee4e <builtIn_pickOne+0x1a>
		KPrintF ("Built-in function should have at least 1 parameter");
    ee3c:	         |   pea 192ed <graphics.c.1c13408a+0xaf>
    ee42:	         |   jsr 16c5e <KPrintF>
    ee48:	         |   addq.l #4,sp
		return BR_ERROR;
    ee4a:	         |   moveq #1,d0
    ee4c:	/--------|-- bra.s eeae <builtIn_pickOne+0x7a>
	}
	int i = rand() % numParams;
    ee4e:	|        \-> jsr 1585e <rand>
    ee54:	|            move.l d0,d1
    ee56:	|            move.l 8(sp),d0
    ee5a:	|            move.l d0,-(sp)
    ee5c:	|            move.l d1,-(sp)
    ee5e:	|            jsr 176f6 <__umodsi3>
    ee64:	|            addq.l #8,sp
    ee66:	|            move.l d0,(sp)

	// Return value
	while (numParams --) {
    ee68:	|     /----- bra.s ee9c <builtIn_pickOne+0x68>
		if (i == numParams) copyVariable (&(fun -> stack -> thisVar), &fun -> reg);
    ee6a:	|  /--|----> move.l (sp),d0
    ee6c:	|  |  |      cmp.l 8(sp),d0
    ee70:	|  |  |  /-- bne.s ee8c <builtIn_pickOne+0x58>
    ee72:	|  |  |  |   moveq #28,d0
    ee74:	|  |  |  |   add.l 12(sp),d0
    ee78:	|  |  |  |   movea.l 12(sp),a0
    ee7c:	|  |  |  |   move.l 24(a0),d1
    ee80:	|  |  |  |   move.l d0,-(sp)
    ee82:	|  |  |  |   move.l d1,-(sp)
    ee84:	|  |  |  |   jsr 1471a <copyVariable>
    ee8a:	|  |  |  |   addq.l #8,sp
		trimStack (&fun -> stack);
    ee8c:	|  |  |  \-> moveq #24,d0
    ee8e:	|  |  |      add.l 12(sp),d0
    ee92:	|  |  |      move.l d0,-(sp)
    ee94:	|  |  |      jsr 14be4 <trimStack>
    ee9a:	|  |  |      addq.l #4,sp
	while (numParams --) {
    ee9c:	|  |  \----> move.l 8(sp),d0
    eea0:	|  |         move.l d0,d1
    eea2:	|  |         subq.l #1,d1
    eea4:	|  |         move.l d1,8(sp)
    eea8:	|  |         tst.l d0
    eeaa:	|  \-------- bne.s ee6a <builtIn_pickOne+0x36>
	}
	return BR_CONTINUE;
    eeac:	|            moveq #2,d0
}
    eeae:	\----------> addq.l #4,sp
    eeb0:	             rts

0000eeb2 <builtIn_substring>:

builtIn(substring)
{
    eeb2:	       lea -40(sp),sp
    eeb6:	       move.l a6,-(sp)
    eeb8:	       move.l d2,-(sp)
    char *newString;
    int start, length;

    //debugOut ("BUILTIN: substring\n");

    if (!getValueType(&length, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    eeba:	       movea.l 56(sp),a0
    eebe:	       move.l 24(a0),d0
    eec2:	       move.l d0,-(sp)
    eec4:	       pea 1 <_start+0x1>
    eec8:	       lea 16(sp),a0
    eecc:	       move.l a0,-(sp)
    eece:	       jsr 14260 <getValueType>
    eed4:	       lea 12(sp),sp
    eed8:	       tst.w d0
    eeda:	   /-- bne.s eee2 <builtIn_substring+0x30>
    eedc:	   |   moveq #1,d0
    eede:	/--|-- bra.w f05a <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    eee2:	|  \-> moveq #24,d0
    eee4:	|      add.l 56(sp),d0
    eee8:	|      move.l d0,-(sp)
    eeea:	|      jsr 14be4 <trimStack>
    eef0:	|      addq.l #4,sp
    if (!getValueType(&start, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    eef2:	|      movea.l 56(sp),a0
    eef6:	|      move.l 24(a0),d0
    eefa:	|      move.l d0,-(sp)
    eefc:	|      pea 1 <_start+0x1>
    ef00:	|      lea 20(sp),a0
    ef04:	|      move.l a0,-(sp)
    ef06:	|      jsr 14260 <getValueType>
    ef0c:	|      lea 12(sp),sp
    ef10:	|      tst.w d0
    ef12:	|  /-- bne.s ef1a <builtIn_substring+0x68>
    ef14:	|  |   moveq #1,d0
    ef16:	+--|-- bra.w f05a <builtIn_substring+0x1a8>
    trimStack(&fun->stack);
    ef1a:	|  \-> moveq #24,d0
    ef1c:	|      add.l 56(sp),d0
    ef20:	|      move.l d0,-(sp)
    ef22:	|      jsr 14be4 <trimStack>
    ef28:	|      addq.l #4,sp
    wholeString = getTextFromAnyVar(&(fun->stack->thisVar));
    ef2a:	|      movea.l 56(sp),a0
    ef2e:	|      move.l 24(a0),d0
    ef32:	|      move.l d0,-(sp)
    ef34:	|      jsr 14836 <getTextFromAnyVar>
    ef3a:	|      addq.l #4,sp
    ef3c:	|      move.l d0,44(sp)
    trimStack(&fun->stack);
    ef40:	|      moveq #24,d0
    ef42:	|      add.l 56(sp),d0
    ef46:	|      move.l d0,-(sp)
    ef48:	|      jsr 14be4 <trimStack>
    ef4e:	|      addq.l #4,sp
    
    if (strlen(wholeString) < (ULONG) start + length) {
    ef50:	|      move.l 44(sp),-(sp)
    ef54:	|      jsr 1374c <strlen>
    ef5a:	|      addq.l #4,sp
    ef5c:	|      move.l d0,d1
    ef5e:	|      move.l 12(sp),d0
    ef62:	|      movea.l d0,a0
    ef64:	|      move.l 8(sp),d0
    ef68:	|      add.l a0,d0
    ef6a:	|      cmp.l d1,d0
    ef6c:	|  /-- bls.s efa2 <builtIn_substring+0xf0>
        length = strlen(wholeString) - start;
    ef6e:	|  |   move.l 44(sp),-(sp)
    ef72:	|  |   jsr 1374c <strlen>
    ef78:	|  |   addq.l #4,sp
    ef7a:	|  |   move.l d0,d1
    ef7c:	|  |   move.l 12(sp),d0
    ef80:	|  |   sub.l d0,d1
    ef82:	|  |   move.l d1,d0
    ef84:	|  |   move.l d0,8(sp)
        if (strlen(wholeString) < (ULONG) start) {
    ef88:	|  |   move.l 44(sp),-(sp)
    ef8c:	|  |   jsr 1374c <strlen>
    ef92:	|  |   addq.l #4,sp
    ef94:	|  |   move.l d0,d1
    ef96:	|  |   move.l 12(sp),d0
    ef9a:	|  |   cmp.l d1,d0
    ef9c:	|  +-- bls.s efa2 <builtIn_substring+0xf0>
            start = 0;
    ef9e:	|  |   clr.l 12(sp)
        }
    }
    if (length < 0) {
    efa2:	|  \-> move.l 8(sp),d0
    efa6:	|  /-- bpl.s efac <builtIn_substring+0xfa>
        length = 0;
    efa8:	|  |   clr.l 8(sp)
    }
    
    int startoffset = start;
    efac:	|  \-> move.l 12(sp),40(sp)
    int endoffset = start + length;
    efb2:	|      move.l 12(sp),d1
    efb6:	|      move.l 8(sp),d0
    efba:	|      move.l d1,d2
    efbc:	|      add.l d0,d2
    efbe:	|      move.l d2,36(sp)

    newString = AllocVec(endoffset - startoffset + 1, MEMF_ANY);
    efc2:	|      move.l 36(sp),d0
    efc6:	|      sub.l 40(sp),d0
    efca:	|      addq.l #1,d0
    efcc:	|      move.l d0,32(sp)
    efd0:	|      clr.l 28(sp)
    efd4:	|      move.l 1a7a4 <SysBase>,d0
    efda:	|      movea.l d0,a6
    efdc:	|      move.l 32(sp),d0
    efe0:	|      move.l 28(sp),d1
    efe4:	|      jsr -684(a6)
    efe8:	|      move.l d0,24(sp)
    efec:	|      move.l 24(sp),d0
    eff0:	|      move.l d0,20(sp)
    if (!newString) {
    eff4:	|  /-- bne.s effa <builtIn_substring+0x148>
        return BR_ERROR;
    eff6:	|  |   moveq #1,d0
    eff8:	+--|-- bra.s f05a <builtIn_substring+0x1a8>
    }
    
    memcpy(newString, wholeString + startoffset, endoffset - startoffset);
    effa:	|  \-> move.l 36(sp),d0
    effe:	|      sub.l 40(sp),d0
    f002:	|      move.l d0,d1
    f004:	|      move.l 40(sp),d0
    f008:	|      add.l 44(sp),d0
    f00c:	|      move.l d1,-(sp)
    f00e:	|      move.l d0,-(sp)
    f010:	|      move.l 28(sp),-(sp)
    f014:	|      jsr 16c12 <memcpy>
    f01a:	|      lea 12(sp),sp
    newString[endoffset - startoffset] = 0;
    f01e:	|      move.l 36(sp),d0
    f022:	|      sub.l 40(sp),d0
    f026:	|      movea.l 20(sp),a0
    f02a:	|      adda.l d0,a0
    f02c:	|      clr.b (a0)
    
    makeTextVar(&fun->reg, newString);
    f02e:	|      moveq #28,d0
    f030:	|      add.l 56(sp),d0
    f034:	|      move.l 20(sp),-(sp)
    f038:	|      move.l d0,-(sp)
    f03a:	|      jsr 14482 <makeTextVar>
    f040:	|      addq.l #8,sp
    FreeVec(newString);
    f042:	|      move.l 20(sp),16(sp)
    f048:	|      move.l 1a7a4 <SysBase>,d0
    f04e:	|      movea.l d0,a6
    f050:	|      movea.l 16(sp),a1
    f054:	|      jsr -690(a6)
    return BR_CONTINUE;
    f058:	|      moveq #2,d0
}
    f05a:	\----> move.l (sp)+,d2
    f05c:	       movea.l (sp)+,a6
    f05e:	       lea 40(sp),sp
    f062:	       rts

0000f064 <builtIn_stringLength>:

builtIn(stringLength)
{
    f064:	subq.l #8,sp
    f066:	move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f068:	movea.l 20(sp),a0
    f06c:	move.l 24(a0),d0
    f070:	move.l d0,-(sp)
    f072:	jsr 14836 <getTextFromAnyVar>
    f078:	addq.l #4,sp
    f07a:	move.l d0,8(sp)
	trimStack (&fun -> stack);
    f07e:	moveq #24,d0
    f080:	add.l 20(sp),d0
    f084:	move.l d0,-(sp)
    f086:	jsr 14be4 <trimStack>
    f08c:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, strlen(newText));
    f08e:	move.l 8(sp),-(sp)
    f092:	jsr 1374c <strlen>
    f098:	addq.l #4,sp
    f09a:	move.l d0,d1
    f09c:	moveq #28,d0
    f09e:	add.l 20(sp),d0
    f0a2:	move.l d1,-(sp)
    f0a4:	pea 1 <_start+0x1>
    f0a8:	move.l d0,-(sp)
    f0aa:	jsr 14b52 <setVariable>
    f0b0:	lea 12(sp),sp
	FreeVec(newText);
    f0b4:	move.l 8(sp),4(sp)
    f0ba:	move.l 1a7a4 <SysBase>,d0
    f0c0:	movea.l d0,a6
    f0c2:	movea.l 4(sp),a1
    f0c6:	jsr -690(a6)
	return BR_CONTINUE;
    f0ca:	moveq #2,d0
}
    f0cc:	movea.l (sp)+,a6
    f0ce:	addq.l #8,sp
    f0d0:	rts

0000f0d2 <builtIn_newStack>:

builtIn(newStack)
{
    f0d2:	             lea -12(sp),sp
    f0d6:	             move.l a6,-(sp)
    UNUSEDALL
    unlinkVar(&fun->reg);
    f0d8:	             moveq #28,d0
    f0da:	             add.l 24(sp),d0
    f0de:	             move.l d0,-(sp)
    f0e0:	             jsr 144ae <unlinkVar>
    f0e6:	             addq.l #4,sp

    // Return value
    fun->reg.varType = SVT_STACK;
    f0e8:	             movea.l 24(sp),a0
    f0ec:	             moveq #6,d0
    f0ee:	             move.l d0,28(a0)
    fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
    f0f2:	             moveq #12,d1
    f0f4:	             move.l d1,12(sp)
    f0f8:	             clr.l 8(sp)
    f0fc:	             move.l 1a7a4 <SysBase>,d0
    f102:	             movea.l d0,a6
    f104:	             move.l 12(sp),d0
    f108:	             move.l 8(sp),d1
    f10c:	             jsr -684(a6)
    f110:	             move.l d0,4(sp)
    f114:	             move.l 4(sp),d0
    f118:	             movea.l 24(sp),a0
    f11c:	             move.l d0,32(a0)
    if (!fun->reg.varData.theStack) return BR_ERROR;
    f120:	             movea.l 24(sp),a0
    f124:	             move.l 32(a0),d0
    f128:	         /-- bne.s f130 <builtIn_newStack+0x5e>
    f12a:	         |   moveq #1,d0
    f12c:	/--------|-- bra.w f1c2 <builtIn_newStack+0xf0>
    fun->reg.varData.theStack->first = NULL;
    f130:	|        \-> movea.l 24(sp),a0
    f134:	|            movea.l 32(a0),a0
    f138:	|            clr.l (a0)
    fun->reg.varData.theStack->last = NULL;
    f13a:	|            movea.l 24(sp),a0
    f13e:	|            movea.l 32(a0),a0
    f142:	|            clr.l 4(a0)
    fun->reg.varData.theStack->timesUsed = 1;
    f146:	|            movea.l 24(sp),a0
    f14a:	|            movea.l 32(a0),a0
    f14e:	|            moveq #1,d0
    f150:	|            move.l d0,8(a0)
    
    while (numParams--) {
    f154:	|     /----- bra.s f1b0 <builtIn_newStack+0xde>
        if (!addVarToStack(&fun->stack->thisVar, &fun->reg.varData.theStack->first)) return BR_ERROR;
    f156:	|  /--|----> movea.l 24(sp),a0
    f15a:	|  |  |      move.l 32(a0),d0
    f15e:	|  |  |      move.l d0,d1
    f160:	|  |  |      movea.l 24(sp),a0
    f164:	|  |  |      move.l 24(a0),d0
    f168:	|  |  |      move.l d1,-(sp)
    f16a:	|  |  |      move.l d0,-(sp)
    f16c:	|  |  |      jsr 13a9c <addVarToStack>
    f172:	|  |  |      addq.l #8,sp
    f174:	|  |  |      tst.w d0
    f176:	|  |  |  /-- bne.s f17c <builtIn_newStack+0xaa>
    f178:	|  |  |  |   moveq #1,d0
    f17a:	+--|--|--|-- bra.s f1c2 <builtIn_newStack+0xf0>
        if (fun->reg.varData.theStack->last == NULL) {
    f17c:	|  |  |  \-> movea.l 24(sp),a0
    f180:	|  |  |      movea.l 32(a0),a0
    f184:	|  |  |      move.l 4(a0),d0
    f188:	|  |  |  /-- bne.s f1a0 <builtIn_newStack+0xce>
            fun->reg.varData.theStack->last = fun->reg.varData.theStack->first;
    f18a:	|  |  |  |   movea.l 24(sp),a0
    f18e:	|  |  |  |   movea.l 32(a0),a1
    f192:	|  |  |  |   movea.l 24(sp),a0
    f196:	|  |  |  |   movea.l 32(a0),a0
    f19a:	|  |  |  |   move.l (a1),d0
    f19c:	|  |  |  |   move.l d0,4(a0)
        }
        trimStack(&fun->stack);
    f1a0:	|  |  |  \-> moveq #24,d0
    f1a2:	|  |  |      add.l 24(sp),d0
    f1a6:	|  |  |      move.l d0,-(sp)
    f1a8:	|  |  |      jsr 14be4 <trimStack>
    f1ae:	|  |  |      addq.l #4,sp
    while (numParams--) {
    f1b0:	|  |  \----> move.l 20(sp),d0
    f1b4:	|  |         move.l d0,d1
    f1b6:	|  |         subq.l #1,d1
    f1b8:	|  |         move.l d1,20(sp)
    f1bc:	|  |         tst.l d0
    f1be:	|  \-------- bne.s f156 <builtIn_newStack+0x84>
    }
    return BR_CONTINUE;
    f1c0:	|            moveq #2,d0
}
    f1c2:	\----------> movea.l (sp)+,a6
    f1c4:	             lea 12(sp),sp
    f1c8:	             rts

0000f1ca <builtIn_stackSize>:
#define builtIn_wait builtIn_newStack

builtIn(stackSize)
{
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
    f1ca:	          movea.l 8(sp),a0
    f1ce:	          movea.l 24(a0),a0
    f1d2:	          move.l (a0),d0
    f1d4:	          moveq #6,d1
    f1d6:	          cmp.l d0,d1
    f1d8:	      /-- beq.s f1f4 <builtIn_stackSize+0x2a>
    f1da:	      |   moveq #10,d1
    f1dc:	      |   cmp.l d0,d1
    f1de:	   /--|-- beq.s f238 <builtIn_stackSize+0x6e>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
			trimStack (&fun -> stack);
			return BR_CONTINUE;

		default:
			break;
    f1e0:	   |  |   nop
	}
	KPrintF ("Parameter isn't a stack or a fast array.");
    f1e2:	   |  |   pea 19320 <graphics.c.1c13408a+0xe2>
    f1e8:	   |  |   jsr 16c5e <KPrintF>
    f1ee:	   |  |   addq.l #4,sp
	return BR_ERROR;
    f1f0:	   |  |   moveq #1,d0
    f1f2:	/--|--|-- bra.s f272 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, stackSize (fun -> stack -> thisVar.varData.theStack));
    f1f4:	|  |  \-> movea.l 8(sp),a0
    f1f8:	|  |      movea.l 24(a0),a0
    f1fc:	|  |      move.l 4(a0),d0
    f200:	|  |      move.l d0,-(sp)
    f202:	|  |      jsr 14bc0 <stackSize>
    f208:	|  |      addq.l #4,sp
    f20a:	|  |      move.l d0,d1
    f20c:	|  |      moveq #28,d0
    f20e:	|  |      add.l 8(sp),d0
    f212:	|  |      move.l d1,-(sp)
    f214:	|  |      pea 1 <_start+0x1>
    f218:	|  |      move.l d0,-(sp)
    f21a:	|  |      jsr 14b52 <setVariable>
    f220:	|  |      lea 12(sp),sp
			trimStack (&fun -> stack);
    f224:	|  |      moveq #24,d0
    f226:	|  |      add.l 8(sp),d0
    f22a:	|  |      move.l d0,-(sp)
    f22c:	|  |      jsr 14be4 <trimStack>
    f232:	|  |      addq.l #4,sp
			return BR_CONTINUE;
    f234:	|  |      moveq #2,d0
    f236:	+--|----- bra.s f272 <builtIn_stackSize+0xa8>
			setVariable (&fun -> reg, SVT_INT, fun -> stack -> thisVar.varData.fastArray -> size);
    f238:	|  \----> movea.l 8(sp),a0
    f23c:	|         movea.l 24(a0),a0
    f240:	|         movea.l 4(a0),a0
    f244:	|         move.l 4(a0),d1
    f248:	|         moveq #28,d0
    f24a:	|         add.l 8(sp),d0
    f24e:	|         move.l d1,-(sp)
    f250:	|         pea 1 <_start+0x1>
    f254:	|         move.l d0,-(sp)
    f256:	|         jsr 14b52 <setVariable>
    f25c:	|         lea 12(sp),sp
			trimStack (&fun -> stack);
    f260:	|         moveq #24,d0
    f262:	|         add.l 8(sp),d0
    f266:	|         move.l d0,-(sp)
    f268:	|         jsr 14be4 <trimStack>
    f26e:	|         addq.l #4,sp
			return BR_CONTINUE;
    f270:	|         moveq #2,d0
}
    f272:	\-------> rts

0000f274 <builtIn_copyStack>:

builtIn(copyStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f274:	       movea.l 8(sp),a0
    f278:	       movea.l 24(a0),a0
    f27c:	       move.l (a0),d0
    f27e:	       moveq #6,d1
    f280:	       cmp.l d0,d1
    f282:	   /-- beq.s f296 <builtIn_copyStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f284:	   |   pea 19349 <graphics.c.1c13408a+0x10b>
    f28a:	   |   jsr 16c5e <KPrintF>
    f290:	   |   addq.l #4,sp
		return BR_ERROR;
    f292:	   |   moveq #1,d0
    f294:	/--|-- bra.s f2ca <builtIn_copyStack+0x56>
	}
	// Return value
	if (! copyStack (&fun -> stack -> thisVar, &fun -> reg)) return BR_ERROR;
    f296:	|  \-> moveq #28,d0
    f298:	|      add.l 8(sp),d0
    f29c:	|      movea.l 8(sp),a0
    f2a0:	|      move.l 24(a0),d1
    f2a4:	|      move.l d0,-(sp)
    f2a6:	|      move.l d1,-(sp)
    f2a8:	|      jsr 13d66 <copyStack>
    f2ae:	|      addq.l #8,sp
    f2b0:	|      tst.w d0
    f2b2:	|  /-- bne.s f2b8 <builtIn_copyStack+0x44>
    f2b4:	|  |   moveq #1,d0
    f2b6:	+--|-- bra.s f2ca <builtIn_copyStack+0x56>
	trimStack (&fun -> stack);
    f2b8:	|  \-> moveq #24,d0
    f2ba:	|      add.l 8(sp),d0
    f2be:	|      move.l d0,-(sp)
    f2c0:	|      jsr 14be4 <trimStack>
    f2c6:	|      addq.l #4,sp
	return BR_CONTINUE;
    f2c8:	|      moveq #2,d0
}
    f2ca:	\----> rts

0000f2cc <builtIn_pushToStack>:

builtIn(pushToStack)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f2cc:	       movea.l 8(sp),a0
    f2d0:	       movea.l 24(a0),a0
    f2d4:	       movea.l 8(a0),a0
    f2d8:	       move.l (a0),d0
    f2da:	       moveq #6,d1
    f2dc:	       cmp.l d0,d1
    f2de:	   /-- beq.s f2f4 <builtIn_pushToStack+0x28>
		KPrintF("Parameter isn't a stack");
    f2e0:	   |   pea 19362 <graphics.c.1c13408a+0x124>
    f2e6:	   |   jsr 16c5e <KPrintF>
    f2ec:	   |   addq.l #4,sp
		return BR_ERROR;
    f2ee:	   |   moveq #1,d0
    f2f0:	/--|-- bra.w f382 <builtIn_pushToStack+0xb6>
	}

	if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f2f4:	|  \-> movea.l 8(sp),a0
    f2f8:	|      movea.l 24(a0),a0
    f2fc:	|      movea.l 8(a0),a0
    f300:	|      move.l 4(a0),d0
    f304:	|      move.l d0,d1
    f306:	|      movea.l 8(sp),a0
    f30a:	|      move.l 24(a0),d0
    f30e:	|      move.l d1,-(sp)
    f310:	|      move.l d0,-(sp)
    f312:	|      jsr 13a9c <addVarToStack>
    f318:	|      addq.l #8,sp
    f31a:	|      tst.w d0
    f31c:	|  /-- bne.s f322 <builtIn_pushToStack+0x56>
		return BR_ERROR;
    f31e:	|  |   moveq #1,d0
    f320:	+--|-- bra.s f382 <builtIn_pushToStack+0xb6>

	if (fun -> stack -> next -> thisVar.varData.theStack -> first -> next == NULL)
    f322:	|  \-> movea.l 8(sp),a0
    f326:	|      movea.l 24(a0),a0
    f32a:	|      movea.l 8(a0),a0
    f32e:	|      movea.l 4(a0),a0
    f332:	|      movea.l (a0),a0
    f334:	|      move.l 8(a0),d0
    f338:	|  /-- bne.s f360 <builtIn_pushToStack+0x94>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f33a:	|  |   movea.l 8(sp),a0
    f33e:	|  |   movea.l 24(a0),a0
    f342:	|  |   movea.l 8(a0),a0
    f346:	|  |   movea.l 4(a0),a1
    f34a:	|  |   movea.l 8(sp),a0
    f34e:	|  |   movea.l 24(a0),a0
    f352:	|  |   movea.l 8(a0),a0
    f356:	|  |   movea.l 4(a0),a0
    f35a:	|  |   move.l (a1),d0
    f35c:	|  |   move.l d0,4(a0)

	trimStack (&fun -> stack);
    f360:	|  \-> moveq #24,d0
    f362:	|      add.l 8(sp),d0
    f366:	|      move.l d0,-(sp)
    f368:	|      jsr 14be4 <trimStack>
    f36e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f370:	|      moveq #24,d0
    f372:	|      add.l 8(sp),d0
    f376:	|      move.l d0,-(sp)
    f378:	|      jsr 14be4 <trimStack>
    f37e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f380:	|      moveq #2,d0
}
    f382:	\----> rts

0000f384 <builtIn_enqueue>:

builtIn(enqueue)
{
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f384:	             movea.l 8(sp),a0
    f388:	             movea.l 24(a0),a0
    f38c:	             movea.l 8(a0),a0
    f390:	             move.l (a0),d0
    f392:	             moveq #6,d1
    f394:	             cmp.l d0,d1
    f396:	         /-- beq.s f3ac <builtIn_enqueue+0x28>
		KPrintF ("Parameter isn't a stack");
    f398:	         |   pea 19362 <graphics.c.1c13408a+0x124>
    f39e:	         |   jsr 16c5e <KPrintF>
    f3a4:	         |   addq.l #4,sp
		return BR_ERROR;
    f3a6:	         |   moveq #1,d0
    f3a8:	/--------|-- bra.w f49a <builtIn_enqueue+0x116>
	}

	if (fun -> stack -> next -> thisVar.varData.theStack -> first == NULL)
    f3ac:	|        \-> movea.l 8(sp),a0
    f3b0:	|            movea.l 24(a0),a0
    f3b4:	|            movea.l 8(a0),a0
    f3b8:	|            movea.l 4(a0),a0
    f3bc:	|            move.l (a0),d0
    f3be:	|     /----- bne.s f418 <builtIn_enqueue+0x94>
	{
		if (! addVarToStack (&fun -> stack -> thisVar, &fun -> stack -> next -> thisVar.varData.theStack -> first))
    f3c0:	|     |      movea.l 8(sp),a0
    f3c4:	|     |      movea.l 24(a0),a0
    f3c8:	|     |      movea.l 8(a0),a0
    f3cc:	|     |      move.l 4(a0),d0
    f3d0:	|     |      move.l d0,d1
    f3d2:	|     |      movea.l 8(sp),a0
    f3d6:	|     |      move.l 24(a0),d0
    f3da:	|     |      move.l d1,-(sp)
    f3dc:	|     |      move.l d0,-(sp)
    f3de:	|     |      jsr 13a9c <addVarToStack>
    f3e4:	|     |      addq.l #8,sp
    f3e6:	|     |      tst.w d0
    f3e8:	|     |  /-- bne.s f3f0 <builtIn_enqueue+0x6c>
			return BR_ERROR;
    f3ea:	|     |  |   moveq #1,d0
    f3ec:	+-----|--|-- bra.w f49a <builtIn_enqueue+0x116>

		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> first;
    f3f0:	|     |  \-> movea.l 8(sp),a0
    f3f4:	|     |      movea.l 24(a0),a0
    f3f8:	|     |      movea.l 8(a0),a0
    f3fc:	|     |      movea.l 4(a0),a1
    f400:	|     |      movea.l 8(sp),a0
    f404:	|     |      movea.l 24(a0),a0
    f408:	|     |      movea.l 8(a0),a0
    f40c:	|     |      movea.l 4(a0),a0
    f410:	|     |      move.l (a1),d0
    f412:	|     |      move.l d0,4(a0)
    f416:	|  /--|----- bra.s f478 <builtIn_enqueue+0xf4>
	}
	else
	{
		if (! addVarToStack (&fun -> stack -> thisVar,
							 &fun -> stack -> next -> thisVar.varData.theStack -> last -> next))
    f418:	|  |  \----> movea.l 8(sp),a0
    f41c:	|  |         movea.l 24(a0),a0
    f420:	|  |         movea.l 8(a0),a0
    f424:	|  |         movea.l 4(a0),a0
    f428:	|  |         move.l 4(a0),d0
		if (! addVarToStack (&fun -> stack -> thisVar,
    f42c:	|  |         move.l d0,d1
    f42e:	|  |         addq.l #8,d1
    f430:	|  |         movea.l 8(sp),a0
    f434:	|  |         move.l 24(a0),d0
    f438:	|  |         move.l d1,-(sp)
    f43a:	|  |         move.l d0,-(sp)
    f43c:	|  |         jsr 13a9c <addVarToStack>
    f442:	|  |         addq.l #8,sp
    f444:	|  |         tst.w d0
    f446:	|  |     /-- bne.s f44c <builtIn_enqueue+0xc8>
			return BR_ERROR;
    f448:	|  |     |   moveq #1,d0
    f44a:	+--|-----|-- bra.s f49a <builtIn_enqueue+0x116>
		fun -> stack -> next -> thisVar.varData.theStack -> last = fun -> stack -> next -> thisVar.varData.theStack -> last -> next;
    f44c:	|  |     \-> movea.l 8(sp),a0
    f450:	|  |         movea.l 24(a0),a0
    f454:	|  |         movea.l 8(a0),a0
    f458:	|  |         movea.l 4(a0),a0
    f45c:	|  |         movea.l 4(a0),a1
    f460:	|  |         movea.l 8(sp),a0
    f464:	|  |         movea.l 24(a0),a0
    f468:	|  |         movea.l 8(a0),a0
    f46c:	|  |         movea.l 4(a0),a0
    f470:	|  |         move.l 8(a1),d0
    f474:	|  |         move.l d0,4(a0)
	}

	trimStack (&fun -> stack);
    f478:	|  \-------> moveq #24,d0
    f47a:	|            add.l 8(sp),d0
    f47e:	|            move.l d0,-(sp)
    f480:	|            jsr 14be4 <trimStack>
    f486:	|            addq.l #4,sp
	trimStack (&fun -> stack);
    f488:	|            moveq #24,d0
    f48a:	|            add.l 8(sp),d0
    f48e:	|            move.l d0,-(sp)
    f490:	|            jsr 14be4 <trimStack>
    f496:	|            addq.l #4,sp
	return BR_CONTINUE;
    f498:	|            moveq #2,d0
}
    f49a:	\----------> rts

0000f49c <builtIn_deleteFromStack>:

builtIn(deleteFromStack)
{
    f49c:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f49e:	       movea.l 12(sp),a0
    f4a2:	       movea.l 24(a0),a0
    f4a6:	       movea.l 8(a0),a0
    f4aa:	       move.l (a0),d0
    f4ac:	       moveq #6,d1
    f4ae:	       cmp.l d0,d1
    f4b0:	   /-- beq.s f4c6 <builtIn_deleteFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f4b2:	   |   pea 19349 <graphics.c.1c13408a+0x10b>
    f4b8:	   |   jsr 16c5e <KPrintF>
    f4be:	   |   addq.l #4,sp
		return BR_ERROR;
    f4c0:	   |   moveq #1,d0
    f4c2:	/--|-- bra.w f55c <builtIn_deleteFromStack+0xc0>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, FALSE));
    f4c6:	|  \-> movea.l 12(sp),a0
    f4ca:	|      movea.l 24(a0),a0
    f4ce:	|      movea.l 8(a0),a0
    f4d2:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f4d6:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f4d8:	|      movea.l 12(sp),a0
    f4dc:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f4e0:	|      clr.l -(sp)
    f4e2:	|      move.l d1,-(sp)
    f4e4:	|      move.l d0,-(sp)
    f4e6:	|      jsr 13e3c <deleteVarFromStack>
    f4ec:	|      lea 12(sp),sp
    f4f0:	|      move.l d0,d1
    f4f2:	|      moveq #28,d0
    f4f4:	|      add.l 12(sp),d0
    f4f8:	|      move.l d1,-(sp)
    f4fa:	|      pea 1 <_start+0x1>
    f4fe:	|      move.l d0,-(sp)
    f500:	|      jsr 14b52 <setVariable>
    f506:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f50a:	|      movea.l 12(sp),a0
    f50e:	|      movea.l 24(a0),a0
    f512:	|      movea.l 8(a0),a0
    f516:	|      movea.l 4(a0),a0
    f51a:	|      move.l (a0),d0
    f51c:	|      movea.l 12(sp),a0
    f520:	|      movea.l 24(a0),a0
    f524:	|      movea.l 8(a0),a0
    f528:	|      movea.l 4(a0),a2
    f52c:	|      move.l d0,-(sp)
    f52e:	|      jsr 14b9c <stackFindLast>
    f534:	|      addq.l #4,sp
    f536:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f53a:	|      moveq #24,d0
    f53c:	|      add.l 12(sp),d0
    f540:	|      move.l d0,-(sp)
    f542:	|      jsr 14be4 <trimStack>
    f548:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f54a:	|      moveq #24,d0
    f54c:	|      add.l 12(sp),d0
    f550:	|      move.l d0,-(sp)
    f552:	|      jsr 14be4 <trimStack>
    f558:	|      addq.l #4,sp
	return BR_CONTINUE;
    f55a:	|      moveq #2,d0
}
    f55c:	\----> movea.l (sp)+,a2
    f55e:	       rts

0000f560 <builtIn_deleteAllFromStack>:

builtIn(deleteAllFromStack)
{
    f560:	       move.l a2,-(sp)
	UNUSEDALL
	if (fun -> stack -> next -> thisVar.varType != SVT_STACK) {
    f562:	       movea.l 12(sp),a0
    f566:	       movea.l 24(a0),a0
    f56a:	       movea.l 8(a0),a0
    f56e:	       move.l (a0),d0
    f570:	       moveq #6,d1
    f572:	       cmp.l d0,d1
    f574:	   /-- beq.s f58a <builtIn_deleteAllFromStack+0x2a>
		KPrintF ("Parameter isn't a stack.");
    f576:	   |   pea 19349 <graphics.c.1c13408a+0x10b>
    f57c:	   |   jsr 16c5e <KPrintF>
    f582:	   |   addq.l #4,sp
		return BR_ERROR;
    f584:	   |   moveq #1,d0
    f586:	/--|-- bra.w f622 <builtIn_deleteAllFromStack+0xc2>
	}

	// Return value
	setVariable (&fun -> reg, SVT_INT,
				 deleteVarFromStack (&fun -> stack -> thisVar,
									 &fun -> stack -> next -> thisVar.varData.theStack -> first, TRUE));
    f58a:	|  \-> movea.l 12(sp),a0
    f58e:	|      movea.l 24(a0),a0
    f592:	|      movea.l 8(a0),a0
    f596:	|      move.l 4(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f59a:	|      move.l d0,d1
				 deleteVarFromStack (&fun -> stack -> thisVar,
    f59c:	|      movea.l 12(sp),a0
    f5a0:	|      move.l 24(a0),d0
	setVariable (&fun -> reg, SVT_INT,
    f5a4:	|      pea 1 <_start+0x1>
    f5a8:	|      move.l d1,-(sp)
    f5aa:	|      move.l d0,-(sp)
    f5ac:	|      jsr 13e3c <deleteVarFromStack>
    f5b2:	|      lea 12(sp),sp
    f5b6:	|      move.l d0,d1
    f5b8:	|      moveq #28,d0
    f5ba:	|      add.l 12(sp),d0
    f5be:	|      move.l d1,-(sp)
    f5c0:	|      pea 1 <_start+0x1>
    f5c4:	|      move.l d0,-(sp)
    f5c6:	|      jsr 14b52 <setVariable>
    f5cc:	|      lea 12(sp),sp

	// Horrible hacking because 'last' value might now be wrong!
	fun->stack->next->thisVar.varData.theStack->last = stackFindLast (fun->stack->next->thisVar.varData.theStack->first);
    f5d0:	|      movea.l 12(sp),a0
    f5d4:	|      movea.l 24(a0),a0
    f5d8:	|      movea.l 8(a0),a0
    f5dc:	|      movea.l 4(a0),a0
    f5e0:	|      move.l (a0),d0
    f5e2:	|      movea.l 12(sp),a0
    f5e6:	|      movea.l 24(a0),a0
    f5ea:	|      movea.l 8(a0),a0
    f5ee:	|      movea.l 4(a0),a2
    f5f2:	|      move.l d0,-(sp)
    f5f4:	|      jsr 14b9c <stackFindLast>
    f5fa:	|      addq.l #4,sp
    f5fc:	|      move.l d0,4(a2)

	trimStack (&fun -> stack);
    f600:	|      moveq #24,d0
    f602:	|      add.l 12(sp),d0
    f606:	|      move.l d0,-(sp)
    f608:	|      jsr 14be4 <trimStack>
    f60e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f610:	|      moveq #24,d0
    f612:	|      add.l 12(sp),d0
    f616:	|      move.l d0,-(sp)
    f618:	|      jsr 14be4 <trimStack>
    f61e:	|      addq.l #4,sp
	return BR_CONTINUE;
    f620:	|      moveq #2,d0
}
    f622:	\----> movea.l (sp)+,a2
    f624:	       rts

0000f626 <builtIn_popFromStack>:

builtIn(popFromStack)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f626:	       movea.l 8(sp),a0
    f62a:	       movea.l 24(a0),a0
    f62e:	       move.l (a0),d0
    f630:	       moveq #6,d1
    f632:	       cmp.l d0,d1
    f634:	   /-- beq.s f648 <builtIn_popFromStack+0x22>
		KPrintF ("Parameter isn't a stack.");
    f636:	   |   pea 19349 <graphics.c.1c13408a+0x10b>
    f63c:	   |   jsr 16c5e <KPrintF>
    f642:	   |   addq.l #4,sp
		return BR_ERROR;
    f644:	   |   moveq #1,d0
    f646:	/--|-- bra.s f6b2 <builtIn_popFromStack+0x8c>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f648:	|  \-> movea.l 8(sp),a0
    f64c:	|      movea.l 24(a0),a0
    f650:	|      movea.l 4(a0),a0
    f654:	|      move.l (a0),d0
    f656:	|  /-- bne.s f66a <builtIn_popFromStack+0x44>
		KPrintF ("The stack's empty.");
    f658:	|  |   pea 1937a <graphics.c.1c13408a+0x13c>
    f65e:	|  |   jsr 16c5e <KPrintF>
    f664:	|  |   addq.l #4,sp
		return BR_ERROR;
    f666:	|  |   moveq #1,d0
    f668:	+--|-- bra.s f6b2 <builtIn_popFromStack+0x8c>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    f66a:	|  \-> moveq #28,d0
    f66c:	|      add.l 8(sp),d0
    f670:	|      movea.l 8(sp),a0
    f674:	|      movea.l 24(a0),a0
    f678:	|      movea.l 4(a0),a0
    f67c:	|      move.l (a0),d1
    f67e:	|      move.l d0,-(sp)
    f680:	|      move.l d1,-(sp)
    f682:	|      jsr 1471a <copyVariable>
    f688:	|      addq.l #8,sp
	trimStack (&fun -> stack -> thisVar.varData.theStack -> first);
    f68a:	|      movea.l 8(sp),a0
    f68e:	|      movea.l 24(a0),a0
    f692:	|      move.l 4(a0),d0
    f696:	|      move.l d0,-(sp)
    f698:	|      jsr 14be4 <trimStack>
    f69e:	|      addq.l #4,sp
	trimStack (&fun -> stack);
    f6a0:	|      moveq #24,d0
    f6a2:	|      add.l 8(sp),d0
    f6a6:	|      move.l d0,-(sp)
    f6a8:	|      jsr 14be4 <trimStack>
    f6ae:	|      addq.l #4,sp
	return BR_CONTINUE;
    f6b0:	|      moveq #2,d0
}
    f6b2:	\----> rts

0000f6b4 <builtIn_peekStart>:

builtIn(peekStart)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f6b4:	       movea.l 8(sp),a0
    f6b8:	       movea.l 24(a0),a0
    f6bc:	       move.l (a0),d0
    f6be:	       moveq #6,d1
    f6c0:	       cmp.l d0,d1
    f6c2:	   /-- beq.s f6d6 <builtIn_peekStart+0x22>
		KPrintF ("Parameter isn't a stack.");
    f6c4:	   |   pea 19349 <graphics.c.1c13408a+0x10b>
    f6ca:	   |   jsr 16c5e <KPrintF>
    f6d0:	   |   addq.l #4,sp
		return BR_ERROR;
    f6d2:	   |   moveq #1,d0
    f6d4:	/--|-- bra.s f72a <builtIn_peekStart+0x76>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f6d6:	|  \-> movea.l 8(sp),a0
    f6da:	|      movea.l 24(a0),a0
    f6de:	|      movea.l 4(a0),a0
    f6e2:	|      move.l (a0),d0
    f6e4:	|  /-- bne.s f6f8 <builtIn_peekStart+0x44>
		KPrintF ("The stack's empty.");
    f6e6:	|  |   pea 1937a <graphics.c.1c13408a+0x13c>
    f6ec:	|  |   jsr 16c5e <KPrintF>
    f6f2:	|  |   addq.l #4,sp
		return BR_ERROR;
    f6f4:	|  |   moveq #1,d0
    f6f6:	+--|-- bra.s f72a <builtIn_peekStart+0x76>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> first -> thisVar), &fun -> reg);
    f6f8:	|  \-> moveq #28,d0
    f6fa:	|      add.l 8(sp),d0
    f6fe:	|      movea.l 8(sp),a0
    f702:	|      movea.l 24(a0),a0
    f706:	|      movea.l 4(a0),a0
    f70a:	|      move.l (a0),d1
    f70c:	|      move.l d0,-(sp)
    f70e:	|      move.l d1,-(sp)
    f710:	|      jsr 1471a <copyVariable>
    f716:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    f718:	|      moveq #24,d0
    f71a:	|      add.l 8(sp),d0
    f71e:	|      move.l d0,-(sp)
    f720:	|      jsr 14be4 <trimStack>
    f726:	|      addq.l #4,sp
	return BR_CONTINUE;
    f728:	|      moveq #2,d0
}
    f72a:	\----> rts

0000f72c <builtIn_peekEnd>:

builtIn(peekEnd)
{
	UNUSEDALL
	if (fun -> stack -> thisVar.varType != SVT_STACK) {
    f72c:	       movea.l 8(sp),a0
    f730:	       movea.l 24(a0),a0
    f734:	       move.l (a0),d0
    f736:	       moveq #6,d1
    f738:	       cmp.l d0,d1
    f73a:	   /-- beq.s f74e <builtIn_peekEnd+0x22>
		KPrintF ("Parameter isn't a stack.");
    f73c:	   |   pea 19349 <graphics.c.1c13408a+0x10b>
    f742:	   |   jsr 16c5e <KPrintF>
    f748:	   |   addq.l #4,sp
		return BR_ERROR;
    f74a:	   |   moveq #1,d0
    f74c:	/--|-- bra.s f7a4 <builtIn_peekEnd+0x78>
	}
	if (fun -> stack -> thisVar.varData.theStack -> first == NULL) {
    f74e:	|  \-> movea.l 8(sp),a0
    f752:	|      movea.l 24(a0),a0
    f756:	|      movea.l 4(a0),a0
    f75a:	|      move.l (a0),d0
    f75c:	|  /-- bne.s f770 <builtIn_peekEnd+0x44>
		KPrintF ("The stack's empty.");
    f75e:	|  |   pea 1937a <graphics.c.1c13408a+0x13c>
    f764:	|  |   jsr 16c5e <KPrintF>
    f76a:	|  |   addq.l #4,sp
		return BR_ERROR;
    f76c:	|  |   moveq #1,d0
    f76e:	+--|-- bra.s f7a4 <builtIn_peekEnd+0x78>
	}

	// Return value
	copyVariable (&(fun -> stack -> thisVar.varData.theStack -> last -> thisVar), &fun -> reg);
    f770:	|  \-> moveq #28,d0
    f772:	|      add.l 8(sp),d0
    f776:	|      movea.l 8(sp),a0
    f77a:	|      movea.l 24(a0),a0
    f77e:	|      movea.l 4(a0),a0
    f782:	|      move.l 4(a0),d1
    f786:	|      move.l d0,-(sp)
    f788:	|      move.l d1,-(sp)
    f78a:	|      jsr 1471a <copyVariable>
    f790:	|      addq.l #8,sp
	trimStack (&fun -> stack);
    f792:	|      moveq #24,d0
    f794:	|      add.l 8(sp),d0
    f798:	|      move.l d0,-(sp)
    f79a:	|      jsr 14be4 <trimStack>
    f7a0:	|      addq.l #4,sp
	return BR_CONTINUE;
    f7a2:	|      moveq #2,d0
}
    f7a4:	\----> rts

0000f7a6 <builtIn_random>:

builtIn(random)
{
    f7a6:	       subq.l #4,sp
	UNUSEDALL
	int num;

	if (! getValueType(&num, SVT_INT,&fun -> stack -> thisVar))
    f7a8:	       movea.l 12(sp),a0
    f7ac:	       move.l 24(a0),d0
    f7b0:	       move.l d0,-(sp)
    f7b2:	       pea 1 <_start+0x1>
    f7b6:	       move.l sp,d0
    f7b8:	       addq.l #8,d0
    f7ba:	       move.l d0,-(sp)
    f7bc:	       jsr 14260 <getValueType>
    f7c2:	       lea 12(sp),sp
    f7c6:	       tst.w d0
    f7c8:	   /-- bne.s f7ce <builtIn_random+0x28>
		return BR_ERROR;
    f7ca:	   |   moveq #1,d0
    f7cc:	/--|-- bra.s f818 <builtIn_random+0x72>

	trimStack (&fun -> stack);
    f7ce:	|  \-> moveq #24,d0
    f7d0:	|      add.l 12(sp),d0
    f7d4:	|      move.l d0,-(sp)
    f7d6:	|      jsr 14be4 <trimStack>
    f7dc:	|      addq.l #4,sp
	if (num <= 0) num = 1;
    f7de:	|      move.l (sp),d0
    f7e0:	|  /-- bgt.s f7e6 <builtIn_random+0x40>
    f7e2:	|  |   moveq #1,d0
    f7e4:	|  |   move.l d0,(sp)
	setVariable (&fun -> reg, SVT_INT, rand() % num);
    f7e6:	|  \-> jsr 1585e <rand>
    f7ec:	|      move.l d0,d1
    f7ee:	|      move.l (sp),d0
    f7f0:	|      move.l d0,-(sp)
    f7f2:	|      move.l d1,-(sp)
    f7f4:	|      jsr 176f6 <__umodsi3>
    f7fa:	|      addq.l #8,sp
    f7fc:	|      move.l d0,d1
    f7fe:	|      moveq #28,d0
    f800:	|      add.l 12(sp),d0
    f804:	|      move.l d1,-(sp)
    f806:	|      pea 1 <_start+0x1>
    f80a:	|      move.l d0,-(sp)
    f80c:	|      jsr 14b52 <setVariable>
    f812:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f816:	|      moveq #2,d0
}
    f818:	\----> addq.l #4,sp
    f81a:	       rts

0000f81c <builtIn_setStatusColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarColour ((byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE; ToDo amigize this?*/
}
    f81c:	nop
    f81e:	rts

0000f820 <builtIn_setLitStatusColour>:

	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	statusBarLitColour ((byte) red, (byte) green, (byte) blue);Todo - Amigize this?*/
	return BR_CONTINUE;
    f820:	moveq #2,d0
}
    f822:	rts

0000f824 <builtIn_setPasteColour>:

builtIn (setPasteColour)
{
    f824:	       subq.l #4,sp
	UNUSEDALL
	int index;

	if (! getValueType ( &index, SVT_INT, &fun -> stack -> thisVar)) {
    f826:	       movea.l 12(sp),a0
    f82a:	       move.l 24(a0),d0
    f82e:	       move.l d0,-(sp)
    f830:	       pea 1 <_start+0x1>
    f834:	       move.l sp,d0
    f836:	       addq.l #8,d0
    f838:	       move.l d0,-(sp)
    f83a:	       jsr 14260 <getValueType>
    f840:	       lea 12(sp),sp
    f844:	       tst.w d0
    f846:	   /-- bne.s f85a <builtIn_setPasteColour+0x36>
		KPrintF ("setPasteColour: Parameter not a number");
    f848:	   |   pea 1938d <graphics.c.1c13408a+0x14f>
    f84e:	   |   jsr 16c5e <KPrintF>
    f854:	   |   addq.l #4,sp
		return BR_ERROR;
    f856:	   |   moveq #1,d0
    f858:	/--|-- bra.s f89a <builtIn_setPasteColour+0x76>
	}
	trimStack (&fun -> stack);
    f85a:	|  \-> moveq #24,d0
    f85c:	|      add.l 12(sp),d0
    f860:	|      move.l d0,-(sp)
    f862:	|      jsr 14be4 <trimStack>
    f868:	|      addq.l #4,sp


	textPaletteIndex = (UWORD)index;
    f86a:	|      move.l (sp),d0
    f86c:	|      move.l d0,d0
    f86e:	|      move.w d0,1a6be <textPaletteIndex>

	if( textPaletteIndex > 31) {
    f874:	|      move.w 1a6be <textPaletteIndex>,d0
    f87a:	|      cmpi.w #31,d0
    f87e:	|  /-- bls.s f898 <builtIn_setPasteColour+0x74>
		KPrintF ("setPasteColour: Paletteindex out of Range");
    f880:	|  |   pea 193b4 <graphics.c.1c13408a+0x176>
    f886:	|  |   jsr 16c5e <KPrintF>
    f88c:	|  |   addq.l #4,sp
		textPaletteIndex = 0;
    f88e:	|  |   clr.w 1a6be <textPaletteIndex>
		return BR_ERROR;
    f894:	|  |   moveq #1,d0
    f896:	+--|-- bra.s f89a <builtIn_setPasteColour+0x76>
	}

	//setFontColour (pastePalette, (byte) red, (byte) green, (byte) blue);
	return BR_CONTINUE;
    f898:	|  \-> moveq #2,d0
}
    f89a:	\----> addq.l #4,sp
    f89c:	       rts

0000f89e <builtIn_setBlankColour>:
	if (! getRGBParams(red, green, blue, fun))
		return BR_ERROR;

	currentBlankColour = makeColour (red & 255, green & 255, blue & 255);
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    f89e:	moveq #2,d0
}
    f8a0:	rts

0000f8a2 <builtIn_setBurnColour>:

	currentBurnR = red;
	currentBurnG = green;
	currentBurnB = blue;
	setVariable (&fun -> reg, SVT_INT, 1);Todo Amigize this?*/
	return BR_CONTINUE;
    f8a2:	moveq #2,d0
}
    f8a4:	rts

0000f8a6 <builtIn_setFont>:


builtIn(setFont)
{
    f8a6:	       lea -16(sp),sp
    f8aa:	       move.l a6,-(sp)
    UNUSEDALL
    int fileNumber, newHeight;
    if (!getValueType(&newHeight, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    f8ac:	       movea.l 28(sp),a0
    f8b0:	       move.l 24(a0),d0
    f8b4:	       move.l d0,-(sp)
    f8b6:	       pea 1 <_start+0x1>
    f8ba:	       lea 12(sp),a0
    f8be:	       move.l a0,-(sp)
    f8c0:	       jsr 14260 <getValueType>
    f8c6:	       lea 12(sp),sp
    f8ca:	       tst.w d0
    f8cc:	   /-- bne.s f8d4 <builtIn_setFont+0x2e>
    f8ce:	   |   moveq #1,d0
    f8d0:	/--|-- bra.w f982 <builtIn_setFont+0xdc>
    //              KPrintF("  Height: %d\n", newHeight);
    trimStack(&fun->stack);
    f8d4:	|  \-> moveq #24,d0
    f8d6:	|      add.l 28(sp),d0
    f8da:	|      move.l d0,-(sp)
    f8dc:	|      jsr 14be4 <trimStack>
    f8e2:	|      addq.l #4,sp
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    f8e4:	|      movea.l 28(sp),a0
    f8e8:	|      move.l 24(a0),d0
    f8ec:	|      move.l d0,-(sp)
    f8ee:	|      jsr 14836 <getTextFromAnyVar>
    f8f4:	|      addq.l #4,sp
    f8f6:	|      move.l d0,16(sp)
    if (!newText) return BR_ERROR;
    f8fa:	|  /-- bne.s f902 <builtIn_setFont+0x5c>
    f8fc:	|  |   moveq #1,d0
    f8fe:	+--|-- bra.w f982 <builtIn_setFont+0xdc>
    //              KPrintF("  Character supported: %s\n", newText);
    trimStack(&fun->stack);
    f902:	|  \-> moveq #24,d0
    f904:	|      add.l 28(sp),d0
    f908:	|      move.l d0,-(sp)
    f90a:	|      jsr 14be4 <trimStack>
    f910:	|      addq.l #4,sp
    if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
    f912:	|      movea.l 28(sp),a0
    f916:	|      move.l 24(a0),d0
    f91a:	|      move.l d0,-(sp)
    f91c:	|      pea 5 <_start+0x5>
    f920:	|      lea 16(sp),a0
    f924:	|      move.l a0,-(sp)
    f926:	|      jsr 14260 <getValueType>
    f92c:	|      lea 12(sp),sp
    f930:	|      tst.w d0
    f932:	|  /-- bne.s f938 <builtIn_setFont+0x92>
    f934:	|  |   moveq #1,d0
    f936:	+--|-- bra.s f982 <builtIn_setFont+0xdc>
    //              KPrintF("  File: %d\n", fileNumber);
    trimStack(&fun->stack);
    f938:	|  \-> moveq #24,d0
    f93a:	|      add.l 28(sp),d0
    f93e:	|      move.l d0,-(sp)
    f940:	|      jsr 14be4 <trimStack>
    f946:	|      addq.l #4,sp
    if (!loadFont(fileNumber, newText, newHeight)) return BR_ERROR;
    f948:	|      move.l 4(sp),d1
    f94c:	|      move.l 8(sp),d0
    f950:	|      move.l d1,-(sp)
    f952:	|      move.l 20(sp),-(sp)
    f956:	|      move.l d0,-(sp)
    f958:	|      jsr 15042 <loadFont>
    f95e:	|      lea 12(sp),sp
    f962:	|      tst.w d0
    f964:	|  /-- bne.s f96a <builtIn_setFont+0xc4>
    f966:	|  |   moveq #1,d0
    f968:	+--|-- bra.s f982 <builtIn_setFont+0xdc>
    //              KPrintF("  Done!\n");
    FreeVec(newText);
    f96a:	|  \-> move.l 16(sp),12(sp)
    f970:	|      move.l 1a7a4 <SysBase>,d0
    f976:	|      movea.l d0,a6
    f978:	|      movea.l 12(sp),a1
    f97c:	|      jsr -690(a6)

    return BR_CONTINUE;
    f980:	|      moveq #2,d0
}
    f982:	\----> movea.l (sp)+,a6
    f984:	       lea 16(sp),sp
    f988:	       rts

0000f98a <builtIn_inFont>:

builtIn(inFont)
{
    f98a:	       subq.l #4,sp
	UNUSEDALL
	char * newText = getTextFromAnyVar (&(fun -> stack -> thisVar));
    f98c:	       movea.l 12(sp),a0
    f990:	       move.l 24(a0),d0
    f994:	       move.l d0,-(sp)
    f996:	       jsr 14836 <getTextFromAnyVar>
    f99c:	       addq.l #4,sp
    f99e:	       move.l d0,(sp)
	if (! newText) return BR_ERROR;
    f9a0:	   /-- bne.s f9a6 <builtIn_inFont+0x1c>
    f9a2:	   |   moveq #1,d0
    f9a4:	/--|-- bra.s f9dc <builtIn_inFont+0x52>
	trimStack (&fun -> stack);
    f9a6:	|  \-> moveq #24,d0
    f9a8:	|      add.l 12(sp),d0
    f9ac:	|      move.l d0,-(sp)
    f9ae:	|      jsr 14be4 <trimStack>
    f9b4:	|      addq.l #4,sp

	// Return value
	
	setVariable (&fun -> reg, SVT_INT, isInFont(newText));
    f9b6:	|      move.l (sp),-(sp)
    f9b8:	|      jsr 15030 <isInFont>
    f9be:	|      addq.l #4,sp
    f9c0:	|      movea.w d0,a0
    f9c2:	|      moveq #28,d0
    f9c4:	|      add.l 12(sp),d0
    f9c8:	|      move.l a0,-(sp)
    f9ca:	|      pea 1 <_start+0x1>
    f9ce:	|      move.l d0,-(sp)
    f9d0:	|      jsr 14b52 <setVariable>
    f9d6:	|      lea 12(sp),sp
	return BR_CONTINUE;
    f9da:	|      moveq #2,d0
}
    f9dc:	\----> addq.l #4,sp
    f9de:	       rts

0000f9e0 <builtIn_pasteString>:

builtIn(pasteString)
{
    f9e0:	       lea -16(sp),sp
    f9e4:	       move.l a6,-(sp)
    f9e6:	       move.l d2,-(sp)
    UNUSEDALL
    char *newText = getTextFromAnyVar(&(fun->stack->thisVar));
    f9e8:	       movea.l 32(sp),a0
    f9ec:	       move.l 24(a0),d0
    f9f0:	       move.l d0,-(sp)
    f9f2:	       jsr 14836 <getTextFromAnyVar>
    f9f8:	       addq.l #4,sp
    f9fa:	       move.l d0,20(sp)
    trimStack(&fun->stack);
    f9fe:	       moveq #24,d0
    fa00:	       add.l 32(sp),d0
    fa04:	       move.l d0,-(sp)
    fa06:	       jsr 14be4 <trimStack>
    fa0c:	       addq.l #4,sp
    int y, x;
    if (!getValueType(&y, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fa0e:	       movea.l 32(sp),a0
    fa12:	       move.l 24(a0),d0
    fa16:	       move.l d0,-(sp)
    fa18:	       pea 1 <_start+0x1>
    fa1c:	       lea 20(sp),a0
    fa20:	       move.l a0,-(sp)
    fa22:	       jsr 14260 <getValueType>
    fa28:	       lea 12(sp),sp
    fa2c:	       tst.w d0
    fa2e:	   /-- bne.s fa36 <builtIn_pasteString+0x56>
    fa30:	   |   moveq #1,d0
    fa32:	/--|-- bra.w fad8 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fa36:	|  \-> moveq #24,d0
    fa38:	|      add.l 32(sp),d0
    fa3c:	|      move.l d0,-(sp)
    fa3e:	|      jsr 14be4 <trimStack>
    fa44:	|      addq.l #4,sp
    if (!getValueType(&x, SVT_INT,&fun->stack->thisVar)) return BR_ERROR;
    fa46:	|      movea.l 32(sp),a0
    fa4a:	|      move.l 24(a0),d0
    fa4e:	|      move.l d0,-(sp)
    fa50:	|      pea 1 <_start+0x1>
    fa54:	|      lea 16(sp),a0
    fa58:	|      move.l a0,-(sp)
    fa5a:	|      jsr 14260 <getValueType>
    fa60:	|      lea 12(sp),sp
    fa64:	|      tst.w d0
    fa66:	|  /-- bne.s fa6c <builtIn_pasteString+0x8c>
    fa68:	|  |   moveq #1,d0
    fa6a:	+--|-- bra.s fad8 <builtIn_pasteString+0xf8>
    trimStack(&fun->stack);
    fa6c:	|  \-> moveq #24,d0
    fa6e:	|      add.l 32(sp),d0
    fa72:	|      move.l d0,-(sp)
    fa74:	|      jsr 14be4 <trimStack>
    fa7a:	|      addq.l #4,sp
    if (x == IN_THE_CENTRE) x = (winWidth - stringWidth(newText)) >> 1;
    fa7c:	|      move.l 8(sp),d0
    fa80:	|      cmpi.l #65535,d0
    fa86:	|  /-- bne.s faa6 <builtIn_pasteString+0xc6>
    fa88:	|  |   move.l 1a6f8 <winWidth>,d2
    fa8e:	|  |   move.l 20(sp),-(sp)
    fa92:	|  |   jsr 15320 <stringWidth>
    fa98:	|  |   addq.l #4,sp
    fa9a:	|  |   move.l d2,d1
    fa9c:	|  |   sub.l d0,d1
    fa9e:	|  |   move.l d1,d0
    faa0:	|  |   lsr.l #1,d0
    faa2:	|  |   move.l d0,8(sp)
    //fixFont(pastePalette); //Todo: Amigize this
    pasteStringToBackdrop(newText, x, y); 
    faa6:	|  \-> move.l 12(sp),d1
    faaa:	|      move.l 8(sp),d0
    faae:	|      move.l d1,-(sp)
    fab0:	|      move.l d0,-(sp)
    fab2:	|      move.l 28(sp),-(sp)
    fab6:	|      jsr 15242 <pasteStringToBackdrop>
    fabc:	|      lea 12(sp),sp
    FreeVec(newText); 
    fac0:	|      move.l 20(sp),16(sp)
    fac6:	|      move.l 1a7a4 <SysBase>,d0
    facc:	|      movea.l d0,a6
    face:	|      movea.l 16(sp),a1
    fad2:	|      jsr -690(a6)
    return BR_CONTINUE;
    fad6:	|      moveq #2,d0
}
    fad8:	\----> move.l (sp)+,d2
    fada:	       movea.l (sp)+,a6
    fadc:	       lea 16(sp),sp
    fae0:	       rts

0000fae2 <builtIn_anim>:

builtIn(anim)
{
    fae2:	       lea -12(sp),sp
	UNUSEDALL
	if (numParams < 2) {
    fae6:	       moveq #1,d0
    fae8:	       cmp.l 16(sp),d0
    faec:	   /-- blt.s fb02 <builtIn_anim+0x20>
		KPrintF("Built-in function anim() must have at least 2 parameters.");
    faee:	   |   pea 193de <graphics.c.1c13408a+0x1a0>
    faf4:	   |   jsr 16c5e <KPrintF>
    fafa:	   |   addq.l #4,sp
		return BR_ERROR;
    fafc:	   |   moveq #1,d0
    fafe:	/--|-- bra.w fb90 <builtIn_anim+0xae>
	}


	// First store the frame numbers and take 'em off the stack
	struct personaAnimation * ba = createPersonaAnim (numParams - 1, &fun -> stack);
    fb02:	|  \-> moveq #24,d1
    fb04:	|      add.l 20(sp),d1
    fb08:	|      move.l 16(sp),d0
    fb0c:	|      subq.l #1,d0
    fb0e:	|      move.l d1,-(sp)
    fb10:	|      move.l d0,-(sp)
    fb12:	|      jsr 91b0 <createPersonaAnim>
    fb18:	|      addq.l #8,sp
    fb1a:	|      move.l d0,8(sp)

	// Only remaining paramter is the file number
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
    fb1e:	|      movea.l 20(sp),a0
    fb22:	|      move.l 24(a0),d0
    fb26:	|      move.l d0,-(sp)
    fb28:	|      pea 5 <_start+0x5>
    fb2c:	|      lea 8(sp),a0
    fb30:	|      move.l a0,-(sp)
    fb32:	|      jsr 14260 <getValueType>
    fb38:	|      lea 12(sp),sp
    fb3c:	|      tst.w d0
    fb3e:	|  /-- bne.s fb44 <builtIn_anim+0x62>
    fb40:	|  |   moveq #1,d0
    fb42:	+--|-- bra.s fb90 <builtIn_anim+0xae>
	trimStack (&fun -> stack);
    fb44:	|  \-> moveq #24,d0
    fb46:	|      add.l 20(sp),d0
    fb4a:	|      move.l d0,-(sp)
    fb4c:	|      jsr 14be4 <trimStack>
    fb52:	|      addq.l #4,sp

	// Load the required sprite bank
	struct loadedSpriteBank * sprBanky = loadBankForAnim (fileNumber);
    fb54:	|      move.l (sp),d0
    fb56:	|      move.l d0,-(sp)
    fb58:	|      jsr 159c0 <loadBankForAnim>
    fb5e:	|      addq.l #4,sp
    fb60:	|      move.l d0,4(sp)
	if (! sprBanky) return BR_ERROR;	// File not found, fatal done already
    fb64:	|  /-- bne.s fb6a <builtIn_anim+0x88>
    fb66:	|  |   moveq #1,d0
    fb68:	+--|-- bra.s fb90 <builtIn_anim+0xae>
	setBankFile (ba, sprBanky);
    fb6a:	|  \-> move.l 4(sp),-(sp)
    fb6e:	|      move.l 12(sp),-(sp)
    fb72:	|      jsr b05a <setBankFile>
    fb78:	|      addq.l #8,sp

	// Return value
	newAnimationVariable (&fun -> reg, ba);
    fb7a:	|      moveq #28,d0
    fb7c:	|      add.l 20(sp),d0
    fb80:	|      move.l 8(sp),-(sp)
    fb84:	|      move.l d0,-(sp)
    fb86:	|      jsr 14b0e <newAnimationVariable>
    fb8c:	|      addq.l #8,sp
	return BR_CONTINUE;
    fb8e:	|      moveq #2,d0
}
    fb90:	\----> lea 12(sp),sp
    fb94:	       rts

0000fb96 <builtIn_costume>:

builtIn(costume)
{
    fb96:	          lea -32(sp),sp
    fb9a:	          move.l a6,-(sp)
    fb9c:	          move.l a2,-(sp)
    UNUSEDALL
    struct persona * newPersona = AllocVec(sizeof(struct persona), MEMF_ANY);
    fb9e:	          moveq #8,d0
    fba0:	          move.l d0,32(sp)
    fba4:	          clr.l 28(sp)
    fba8:	          move.l 1a7a4 <SysBase>,d0
    fbae:	          movea.l d0,a6
    fbb0:	          move.l 32(sp),d0
    fbb4:	          move.l 28(sp),d1
    fbb8:	          jsr -684(a6)
    fbbc:	          move.l d0,24(sp)
    fbc0:	          move.l 24(sp),d0
    fbc4:	          move.l d0,20(sp)
    if (!newPersona) return BR_ERROR;
    fbc8:	      /-- bne.s fbd0 <builtIn_costume+0x3a>
    fbca:	      |   moveq #1,d0
    fbcc:	/-----|-- bra.w fcb8 <builtIn_costume+0x122>
    newPersona->numDirections = numParams / 3;
    fbd0:	|     \-> move.l 44(sp),d0
    fbd4:	|         pea 3 <_start+0x3>
    fbd8:	|         move.l d0,-(sp)
    fbda:	|         jsr 1769a <__divsi3>
    fbe0:	|         addq.l #8,sp
    fbe2:	|         movea.l 20(sp),a0
    fbe6:	|         move.l d0,4(a0)
    if (numParams == 0 || newPersona->numDirections * 3 != numParams) {
    fbea:	|         tst.l 44(sp)
    fbee:	|     /-- beq.s fc04 <builtIn_costume+0x6e>
    fbf0:	|     |   movea.l 20(sp),a0
    fbf4:	|     |   move.l 4(a0),d1
    fbf8:	|     |   move.l d1,d0
    fbfa:	|     |   add.l d0,d0
    fbfc:	|     |   add.l d1,d0
    fbfe:	|     |   cmp.l 44(sp),d0
    fc02:	|  /--|-- beq.s fc18 <builtIn_costume+0x82>
        KPrintF("Illegal number of parameters (should be greater than 0 and divisible by 3)");
    fc04:	|  |  \-> pea 19418 <graphics.c.1c13408a+0x1da>
    fc0a:	|  |      jsr 16c5e <KPrintF>
    fc10:	|  |      addq.l #4,sp
        return BR_ERROR;
    fc12:	|  |      moveq #1,d0
    fc14:	+--|----- bra.w fcb8 <builtIn_costume+0x122>
    }
    int iii;
    newPersona->animation = AllocVec(sizeof(struct personaAnimation *) * numParams, MEMF_ANY);
    fc18:	|  \----> move.l 44(sp),d0
    fc1c:	|         add.l d0,d0
    fc1e:	|         add.l d0,d0
    fc20:	|         move.l d0,16(sp)
    fc24:	|         clr.l 12(sp)
    fc28:	|         move.l 1a7a4 <SysBase>,d0
    fc2e:	|         movea.l d0,a6
    fc30:	|         move.l 16(sp),d0
    fc34:	|         move.l 12(sp),d1
    fc38:	|         jsr -684(a6)
    fc3c:	|         move.l d0,8(sp)
    fc40:	|         move.l 8(sp),d0
    fc44:	|         movea.l 20(sp),a0
    fc48:	|         move.l d0,(a0)
    if (!newPersona->animation) return BR_ERROR;
    fc4a:	|         movea.l 20(sp),a0
    fc4e:	|         move.l (a0),d0
    fc50:	|     /-- bne.s fc56 <builtIn_costume+0xc0>
    fc52:	|     |   moveq #1,d0
    fc54:	+-----|-- bra.s fcb8 <builtIn_costume+0x122>
    for (iii = numParams - 1; iii >= 0; iii--) {
    fc56:	|     \-> move.l 44(sp),d0
    fc5a:	|         subq.l #1,d0
    fc5c:	|         move.l d0,36(sp)
    fc60:	|     /-- bra.s fc9c <builtIn_costume+0x106>
        newPersona->animation[iii] = getAnimationFromVar(&(fun->stack->thisVar));
    fc62:	|  /--|-> movea.l 48(sp),a0
    fc66:	|  |  |   move.l 24(a0),d0
    fc6a:	|  |  |   movea.l 20(sp),a0
    fc6e:	|  |  |   movea.l (a0),a0
    fc70:	|  |  |   move.l 36(sp),d1
    fc74:	|  |  |   add.l d1,d1
    fc76:	|  |  |   add.l d1,d1
    fc78:	|  |  |   lea (0,a0,d1.l),a2
    fc7c:	|  |  |   move.l d0,-(sp)
    fc7e:	|  |  |   jsr 14738 <getAnimationFromVar>
    fc84:	|  |  |   addq.l #4,sp
    fc86:	|  |  |   move.l d0,(a2)
        trimStack(&fun->stack);
    fc88:	|  |  |   moveq #24,d0
    fc8a:	|  |  |   add.l 48(sp),d0
    fc8e:	|  |  |   move.l d0,-(sp)
    fc90:	|  |  |   jsr 14be4 <trimStack>
    fc96:	|  |  |   addq.l #4,sp
    for (iii = numParams - 1; iii >= 0; iii--) {
    fc98:	|  |  |   subq.l #1,36(sp)
    fc9c:	|  |  \-> tst.l 36(sp)
    fca0:	|  \----- bge.s fc62 <builtIn_costume+0xcc>
    }

    // Return value
    newCostumeVariable(&fun->reg, newPersona);
    fca2:	|         moveq #28,d0
    fca4:	|         add.l 48(sp),d0
    fca8:	|         move.l 20(sp),-(sp)
    fcac:	|         move.l d0,-(sp)
    fcae:	|         jsr 14b30 <newCostumeVariable>
    fcb4:	|         addq.l #8,sp
    return BR_CONTINUE;
    fcb6:	|         moveq #2,d0
}
    fcb8:	\-------> movea.l (sp)+,a2
    fcba:	          movea.l (sp)+,a6
    fcbc:	          lea 32(sp),sp
    fcc0:	          rts

0000fcc2 <builtIn_launch>:

builtIn(launch)
{
    fcc2:	          lea -20(sp),sp
    fcc6:	          move.l a6,-(sp)
    UNUSEDALL
    char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
    fcc8:	          movea.l 32(sp),a0
    fccc:	          move.l 24(a0),d0
    fcd0:	          move.l d0,-(sp)
    fcd2:	          jsr 14836 <getTextFromAnyVar>
    fcd8:	          addq.l #4,sp
    fcda:	          move.l d0,20(sp)
    if (!newTextA) return BR_ERROR;
    fcde:	      /-- bne.s fce6 <builtIn_launch+0x24>
    fce0:	      |   moveq #1,d0
    fce2:	/-----|-- bra.w fe14 <builtIn_launch+0x152>

    char * newText = encodeFilename(newTextA);
    fce6:	|     \-> move.l 20(sp),-(sp)
    fcea:	|         jsr 2fe <encodeFilename>
    fcf0:	|         addq.l #4,sp
    fcf2:	|         move.l d0,16(sp)

    trimStack(&fun->stack);
    fcf6:	|         moveq #24,d0
    fcf8:	|         add.l 32(sp),d0
    fcfc:	|         move.l d0,-(sp)
    fcfe:	|         jsr 14be4 <trimStack>
    fd04:	|         addq.l #4,sp
    if (newTextA[0] == 'h' &&
    fd06:	|         movea.l 20(sp),a0
    fd0a:	|         move.b (a0),d0
    fd0c:	|         cmpi.b #104,d0
    fd10:	|  /----- bne.s fd7a <builtIn_launch+0xb8>
        newTextA[1] == 't' &&
    fd12:	|  |      movea.l 20(sp),a0
    fd16:	|  |      addq.l #1,a0
    fd18:	|  |      move.b (a0),d0
    if (newTextA[0] == 'h' &&
    fd1a:	|  |      cmpi.b #116,d0
    fd1e:	|  +----- bne.s fd7a <builtIn_launch+0xb8>
        newTextA[2] == 't' &&
    fd20:	|  |      movea.l 20(sp),a0
    fd24:	|  |      addq.l #2,a0
    fd26:	|  |      move.b (a0),d0
        newTextA[1] == 't' &&
    fd28:	|  |      cmpi.b #116,d0
    fd2c:	|  +----- bne.s fd7a <builtIn_launch+0xb8>
        newTextA[3] == 'p' &&
    fd2e:	|  |      movea.l 20(sp),a0
    fd32:	|  |      addq.l #3,a0
    fd34:	|  |      move.b (a0),d0
        newTextA[2] == 't' &&
    fd36:	|  |      cmpi.b #112,d0
    fd3a:	|  +----- bne.s fd7a <builtIn_launch+0xb8>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    fd3c:	|  |      movea.l 20(sp),a0
    fd40:	|  |      addq.l #4,a0
    fd42:	|  |      move.b (a0),d0
        newTextA[3] == 'p' &&
    fd44:	|  |      cmpi.b #58,d0
    fd48:	|  |  /-- beq.s fd66 <builtIn_launch+0xa4>
        (newTextA[4] == ':' || (newTextA[4] == 's' && newTextA[5] == ':'))) {
    fd4a:	|  |  |   movea.l 20(sp),a0
    fd4e:	|  |  |   addq.l #4,a0
    fd50:	|  |  |   move.b (a0),d0
    fd52:	|  |  |   cmpi.b #115,d0
    fd56:	|  +--|-- bne.s fd7a <builtIn_launch+0xb8>
    fd58:	|  |  |   movea.l 20(sp),a0
    fd5c:	|  |  |   addq.l #5,a0
    fd5e:	|  |  |   move.b (a0),d0
    fd60:	|  |  |   cmpi.b #58,d0
    fd64:	|  +--|-- bne.s fd7a <builtIn_launch+0xb8>

        // IT'S A WEBSITE!
        launchMe = copyString(newTextA);
    fd66:	|  |  \-> move.l 20(sp),-(sp)
    fd6a:	|  |      jsr b8 <copyString>
    fd70:	|  |      addq.l #4,sp
    fd72:	|  |      move.l d0,1a8ba <launchMe>
    fd78:	|  |  /-- bra.s fdcc <builtIn_launch+0x10a>
    } else {
        char *gameDir;
        gameDir = joinStrings(gamePath, "/");
    fd7a:	|  \--|-> move.l 1a70c <gamePath>,d0
    fd80:	|     |   pea 19463 <graphics.c.1c13408a+0x225>
    fd86:	|     |   move.l d0,-(sp)
    fd88:	|     |   jsr 1378c <joinStrings>
    fd8e:	|     |   addq.l #8,sp
    fd90:	|     |   move.l d0,12(sp)

        launchMe = joinStrings(gameDir, newText);
    fd94:	|     |   move.l 16(sp),-(sp)
    fd98:	|     |   move.l 16(sp),-(sp)
    fd9c:	|     |   jsr 1378c <joinStrings>
    fda2:	|     |   addq.l #8,sp
    fda4:	|     |   move.l d0,1a8ba <launchMe>
        FreeVec(newText);
    fdaa:	|     |   move.l 16(sp),8(sp)
    fdb0:	|     |   move.l 1a7a4 <SysBase>,d0
    fdb6:	|     |   movea.l d0,a6
    fdb8:	|     |   movea.l 8(sp),a1
    fdbc:	|     |   jsr -690(a6)
        if (!launchMe) return BR_ERROR;
    fdc0:	|     |   move.l 1a8ba <launchMe>,d0
    fdc6:	|     +-- bne.s fdcc <builtIn_launch+0x10a>
    fdc8:	|     |   moveq #1,d0
    fdca:	+-----|-- bra.s fe14 <builtIn_launch+0x152>
    }
    FreeVec(newTextA);
    fdcc:	|     \-> move.l 20(sp),4(sp)
    fdd2:	|         move.l 1a7a4 <SysBase>,d0
    fdd8:	|         movea.l d0,a6
    fdda:	|         movea.l 4(sp),a1
    fdde:	|         jsr -690(a6)
    setGraphicsWindow(FALSE);
    fde2:	|         clr.l -(sp)
    fde4:	|         jsr 39c0 <setGraphicsWindow>
    fdea:	|         addq.l #4,sp
    setVariable(&fun->reg, SVT_INT, 1);
    fdec:	|         moveq #28,d0
    fdee:	|         add.l 32(sp),d0
    fdf2:	|         pea 1 <_start+0x1>
    fdf6:	|         pea 1 <_start+0x1>
    fdfa:	|         move.l d0,-(sp)
    fdfc:	|         jsr 14b52 <setVariable>
    fe02:	|         lea 12(sp),sp
    launchResult = &fun->reg;
    fe06:	|         moveq #28,d0
    fe08:	|         add.l 32(sp),d0
    fe0c:	|         move.l d0,1a8be <launchResult>

    return BR_KEEP_AND_PAUSE;
    fe12:	|         moveq #0,d0
}
    fe14:	\-------> movea.l (sp)+,a6
    fe16:	          lea 20(sp),sp
    fe1a:	          rts

0000fe1c <builtIn_pause>:

builtIn(pause)
{
    fe1c:	       subq.l #4,sp
	UNUSEDALL
	int theTime;
	if (! getValueType(&theTime, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    fe1e:	       movea.l 12(sp),a0
    fe22:	       move.l 24(a0),d0
    fe26:	       move.l d0,-(sp)
    fe28:	       pea 1 <_start+0x1>
    fe2c:	       move.l sp,d0
    fe2e:	       addq.l #8,d0
    fe30:	       move.l d0,-(sp)
    fe32:	       jsr 14260 <getValueType>
    fe38:	       lea 12(sp),sp
    fe3c:	       tst.w d0
    fe3e:	   /-- bne.s fe44 <builtIn_pause+0x28>
    fe40:	   |   moveq #1,d0
    fe42:	/--|-- bra.s fe72 <builtIn_pause+0x56>
	trimStack (&fun -> stack);
    fe44:	|  \-> moveq #24,d0
    fe46:	|      add.l 12(sp),d0
    fe4a:	|      move.l d0,-(sp)
    fe4c:	|      jsr 14be4 <trimStack>
    fe52:	|      addq.l #4,sp
	if (theTime > 0) {
    fe54:	|      move.l (sp),d0
    fe56:	|  /-- ble.s fe70 <builtIn_pause+0x54>
		fun -> timeLeft = theTime - 1;
    fe58:	|  |   move.l (sp),d0
    fe5a:	|  |   subq.l #1,d0
    fe5c:	|  |   movea.l 12(sp),a0
    fe60:	|  |   move.l d0,12(a0)
		fun -> isSpeech = FALSE;
    fe64:	|  |   movea.l 12(sp),a0
    fe68:	|  |   clr.w 50(a0)
		return BR_KEEP_AND_PAUSE;
    fe6c:	|  |   moveq #0,d0
    fe6e:	+--|-- bra.s fe72 <builtIn_pause+0x56>
	}
	return BR_CONTINUE;
    fe70:	|  \-> moveq #2,d0
}
    fe72:	\----> addq.l #4,sp
    fe74:	       rts

0000fe76 <builtIn_completeTimers>:

builtIn(completeTimers)
{
	UNUSEDALL
	completeTimers();
    fe76:	jsr 4122 <completeTimers>
	return BR_CONTINUE;
    fe7c:	moveq #2,d0
}
    fe7e:	rts

0000fe80 <builtIn_callEvent>:

builtIn(callEvent)
{
    fe80:	       lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    fe84:	       movea.l 20(sp),a0
    fe88:	       move.l 24(a0),d0
    fe8c:	       move.l d0,-(sp)
    fe8e:	       pea 7 <_start+0x7>
    fe92:	       lea 8(sp),a0
    fe96:	       move.l a0,-(sp)
    fe98:	       jsr 14260 <getValueType>
    fe9e:	       lea 12(sp),sp
    fea2:	       tst.w d0
    fea4:	   /-- bne.s feac <builtIn_callEvent+0x2c>
    fea6:	   |   moveq #1,d0
    fea8:	/--|-- bra.w ff42 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    feac:	|  \-> moveq #24,d0
    feae:	|      add.l 20(sp),d0
    feb2:	|      move.l d0,-(sp)
    feb4:	|      jsr 14be4 <trimStack>
    feba:	|      addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
    febc:	|      movea.l 20(sp),a0
    fec0:	|      move.l 24(a0),d0
    fec4:	|      move.l d0,-(sp)
    fec6:	|      pea 7 <_start+0x7>
    feca:	|      moveq #12,d0
    fecc:	|      add.l sp,d0
    fece:	|      move.l d0,-(sp)
    fed0:	|      jsr 14260 <getValueType>
    fed6:	|      lea 12(sp),sp
    feda:	|      tst.w d0
    fedc:	|  /-- bne.s fee2 <builtIn_callEvent+0x62>
    fede:	|  |   moveq #1,d0
    fee0:	+--|-- bra.s ff42 <builtIn_callEvent+0xc2>
	trimStack (&fun -> stack);
    fee2:	|  \-> moveq #24,d0
    fee4:	|      add.l 20(sp),d0
    fee8:	|      move.l d0,-(sp)
    feea:	|      jsr 14be4 <trimStack>
    fef0:	|      addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
    fef2:	|      move.l (sp),d1
    fef4:	|      move.l 4(sp),d0
    fef8:	|      move.l d1,-(sp)
    fefa:	|      move.l d0,-(sp)
    fefc:	|      jsr cffe <getCombinationFunction>
    ff02:	|      addq.l #8,sp
    ff04:	|      move.l d0,8(sp)

	// Return value
	if (fNum) {
    ff08:	|  /-- beq.s ff28 <builtIn_callEvent+0xa8>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
    ff0a:	|  |   moveq #28,d0
    ff0c:	|  |   add.l 20(sp),d0
    ff10:	|  |   move.l 8(sp),-(sp)
    ff14:	|  |   pea 2 <_start+0x2>
    ff18:	|  |   move.l d0,-(sp)
    ff1a:	|  |   jsr 14b52 <setVariable>
    ff20:	|  |   lea 12(sp),sp
		return BR_CALLAFUNC;
    ff24:	|  |   moveq #4,d0
    ff26:	+--|-- bra.s ff42 <builtIn_callEvent+0xc2>
	}
	setVariable (&fun -> reg, SVT_INT, 0);
    ff28:	|  \-> moveq #28,d0
    ff2a:	|      add.l 20(sp),d0
    ff2e:	|      clr.l -(sp)
    ff30:	|      pea 1 <_start+0x1>
    ff34:	|      move.l d0,-(sp)
    ff36:	|      jsr 14b52 <setVariable>
    ff3c:	|      lea 12(sp),sp
	return BR_CONTINUE;
    ff40:	|      moveq #2,d0
}
    ff42:	\----> lea 12(sp),sp
    ff46:	       rts

0000ff48 <builtIn_quitGame>:
BOOL reallyWantToQuit = FALSE;

builtIn(quitGame)
{
	UNUSEDALL
	reallyWantToQuit = TRUE;
    ff48:	move.w #1,1a8ca <reallyWantToQuit>
	//quit_event.type=SDL_QUIT; Todo: Amigize
	//SDL_PushEvent(&quit_event);
	return BR_CONTINUE;
    ff50:	moveq #2,d0
}
    ff52:	rts

0000ff54 <builtIn__rem_movieStart>:

// The old movie functions are deprecated and does nothing.
builtIn(_rem_movieStart)
{
	UNUSEDALL
	trimStack (&fun -> stack);
    ff54:	moveq #24,d0
    ff56:	add.l 8(sp),d0
    ff5a:	move.l d0,-(sp)
    ff5c:	jsr 14be4 <trimStack>
    ff62:	addq.l #4,sp
	KPrintF("Movie Stuff not supported on Amiga");
    ff64:	pea 19465 <graphics.c.1c13408a+0x227>
    ff6a:	jsr 16c5e <KPrintF>
    ff70:	addq.l #4,sp
	return BR_CONTINUE;
    ff72:	moveq #2,d0
}
    ff74:	rts

0000ff76 <builtIn__rem_movieAbort>:

builtIn(_rem_movieAbort)
{
	UNUSEDALL
	//setVariable (&fun -> reg, SVT_INT, 0);
	KPrintF("Movie Stuff not supported on Amiga");
    ff76:	pea 19465 <graphics.c.1c13408a+0x227>
    ff7c:	jsr 16c5e <KPrintF>
    ff82:	addq.l #4,sp
	return BR_CONTINUE;
    ff84:	moveq #2,d0
}
    ff86:	rts

0000ff88 <builtIn__rem_moviePlaying>:

builtIn(_rem_moviePlaying)
{
	UNUSEDALL
	KPrintF("Movie Stuff not supported on Amiga");
    ff88:	pea 19465 <graphics.c.1c13408a+0x227>
    ff8e:	jsr 16c5e <KPrintF>
    ff94:	addq.l #4,sp
	//setVariable (&fun -> reg, SVT_INT, 0);
	return BR_CONTINUE;
    ff96:	moveq #2,d0
}
    ff98:	rts

0000ff9a <builtIn_playMovie>:
	
	if (r && (! fun->next)) {
		restartFunction (fun);
		return BR_ALREADY_GONE;
	}*/
	KPrintF("Movie Stuff not supported on Amiga");
    ff9a:	pea 19465 <graphics.c.1c13408a+0x227>
    ffa0:	jsr 16c5e <KPrintF>
    ffa6:	addq.l #4,sp
	return BR_CONTINUE;
    ffa8:	moveq #2,d0
}
    ffaa:	rts

0000ffac <builtIn_stopMovie>:
	/*int r;
	
	r = stopMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    ffac:	pea 19465 <graphics.c.1c13408a+0x227>
    ffb2:	jsr 16c5e <KPrintF>
    ffb8:	addq.l #4,sp
	return BR_CONTINUE;
    ffba:	moveq #2,d0
}
    ffbc:	rts

0000ffbe <builtIn_pauseMovie>:
	/*int r;
	
	r = pauseMovie();
	
	setVariable (&fun -> reg, SVT_INT, 0);*/
	KPrintF("Movie Stuff not supported on Amiga");
    ffbe:	pea 19465 <graphics.c.1c13408a+0x227>
    ffc4:	jsr 16c5e <KPrintF>
    ffca:	addq.l #4,sp
	return BR_CONTINUE;
    ffcc:	moveq #2,d0
}
    ffce:	rts

0000ffd0 <builtIn_startMusic>:

#pragma mark -
#pragma mark Audio functions

builtIn(startMusic)
{
    ffd0:	       lea -12(sp),sp
	UNUSEDALL
	int fromTrack, musChan, fileNumber;
	if (! getValueType(&fromTrack, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
    ffd4:	       movea.l 20(sp),a0
    ffd8:	       move.l 24(a0),d0
    ffdc:	       move.l d0,-(sp)
    ffde:	       pea 1 <_start+0x1>
    ffe2:	       moveq #16,d0
    ffe4:	       add.l sp,d0
    ffe6:	       move.l d0,-(sp)
    ffe8:	       jsr 14260 <getValueType>
    ffee:	       lea 12(sp),sp
    fff2:	       tst.w d0
    fff4:	   /-- bne.s fffc <builtIn_startMusic+0x2c>
    fff6:	   |   moveq #1,d0
    fff8:	/--|-- bra.w 1009c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
    fffc:	|  \-> moveq #24,d0
    fffe:	|      add.l 20(sp),d0
   10002:	|      move.l d0,-(sp)
   10004:	|      jsr 14be4 <trimStack>
   1000a:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1000c:	|      movea.l 20(sp),a0
   10010:	|      move.l 24(a0),d0
   10014:	|      move.l d0,-(sp)
   10016:	|      pea 1 <_start+0x1>
   1001a:	|      moveq #12,d0
   1001c:	|      add.l sp,d0
   1001e:	|      move.l d0,-(sp)
   10020:	|      jsr 14260 <getValueType>
   10026:	|      lea 12(sp),sp
   1002a:	|      tst.w d0
   1002c:	|  /-- bne.s 10032 <builtIn_startMusic+0x62>
   1002e:	|  |   moveq #1,d0
   10030:	+--|-- bra.s 1009c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10032:	|  \-> moveq #24,d0
   10034:	|      add.l 20(sp),d0
   10038:	|      move.l d0,-(sp)
   1003a:	|      jsr 14be4 <trimStack>
   10040:	|      addq.l #4,sp
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10042:	|      movea.l 20(sp),a0
   10046:	|      move.l 24(a0),d0
   1004a:	|      move.l d0,-(sp)
   1004c:	|      pea 5 <_start+0x5>
   10050:	|      lea 8(sp),a0
   10054:	|      move.l a0,-(sp)
   10056:	|      jsr 14260 <getValueType>
   1005c:	|      lea 12(sp),sp
   10060:	|      tst.w d0
   10062:	|  /-- bne.s 10068 <builtIn_startMusic+0x98>
   10064:	|  |   moveq #1,d0
   10066:	+--|-- bra.s 1009c <builtIn_startMusic+0xcc>
	trimStack (&fun -> stack);
   10068:	|  \-> moveq #24,d0
   1006a:	|      add.l 20(sp),d0
   1006e:	|      move.l d0,-(sp)
   10070:	|      jsr 14be4 <trimStack>
   10076:	|      addq.l #4,sp
	if (! playMOD (fileNumber, musChan, fromTrack)) return BR_CONTINUE; //BR_ERROR;
   10078:	|      movea.l 8(sp),a0
   1007c:	|      move.l 4(sp),d1
   10080:	|      move.l (sp),d0
   10082:	|      move.l a0,-(sp)
   10084:	|      move.l d1,-(sp)
   10086:	|      move.l d0,-(sp)
   10088:	|      jsr cc0a <playMOD>
   1008e:	|      lea 12(sp),sp
   10092:	|      tst.w d0
   10094:	|  /-- bne.s 1009a <builtIn_startMusic+0xca>
   10096:	|  |   moveq #2,d0
   10098:	+--|-- bra.s 1009c <builtIn_startMusic+0xcc>
	return BR_CONTINUE;
   1009a:	|  \-> moveq #2,d0
}
   1009c:	\----> lea 12(sp),sp
   100a0:	       rts

000100a2 <builtIn_stopMusic>:

builtIn(stopMusic)
{
   100a2:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   100a4:	       movea.l 12(sp),a0
   100a8:	       move.l 24(a0),d0
   100ac:	       move.l d0,-(sp)
   100ae:	       pea 1 <_start+0x1>
   100b2:	       move.l sp,d0
   100b4:	       addq.l #8,d0
   100b6:	       move.l d0,-(sp)
   100b8:	       jsr 14260 <getValueType>
   100be:	       lea 12(sp),sp
   100c2:	       tst.w d0
   100c4:	   /-- bne.s 100ca <builtIn_stopMusic+0x28>
   100c6:	   |   moveq #1,d0
   100c8:	/--|-- bra.s 100e8 <builtIn_stopMusic+0x46>
	trimStack (&fun -> stack);
   100ca:	|  \-> moveq #24,d0
   100cc:	|      add.l 12(sp),d0
   100d0:	|      move.l d0,-(sp)
   100d2:	|      jsr 14be4 <trimStack>
   100d8:	|      addq.l #4,sp
	stopMOD (v);
   100da:	|      move.l (sp),d0
   100dc:	|      move.l d0,-(sp)
   100de:	|      jsr cca6 <stopMOD>
   100e4:	|      addq.l #4,sp
	return BR_CONTINUE;
   100e6:	|      moveq #2,d0
}
   100e8:	\----> addq.l #4,sp
   100ea:	       rts

000100ec <builtIn_setMusicVolume>:

builtIn(setMusicVolume)
{
   100ec:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   100ee:	       movea.l 16(sp),a0
   100f2:	       move.l 24(a0),d0
   100f6:	       move.l d0,-(sp)
   100f8:	       pea 1 <_start+0x1>
   100fc:	       move.l sp,d0
   100fe:	       addq.l #8,d0
   10100:	       move.l d0,-(sp)
   10102:	       jsr 14260 <getValueType>
   10108:	       lea 12(sp),sp
   1010c:	       tst.w d0
   1010e:	   /-- bne.s 10114 <builtIn_setMusicVolume+0x28>
   10110:	   |   moveq #1,d0
   10112:	/--|-- bra.s 1016e <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   10114:	|  \-> moveq #24,d0
   10116:	|      add.l 16(sp),d0
   1011a:	|      move.l d0,-(sp)
   1011c:	|      jsr 14be4 <trimStack>
   10122:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10124:	|      movea.l 16(sp),a0
   10128:	|      move.l 24(a0),d0
   1012c:	|      move.l d0,-(sp)
   1012e:	|      pea 1 <_start+0x1>
   10132:	|      moveq #12,d0
   10134:	|      add.l sp,d0
   10136:	|      move.l d0,-(sp)
   10138:	|      jsr 14260 <getValueType>
   1013e:	|      lea 12(sp),sp
   10142:	|      tst.w d0
   10144:	|  /-- bne.s 1014a <builtIn_setMusicVolume+0x5e>
   10146:	|  |   moveq #1,d0
   10148:	+--|-- bra.s 1016e <builtIn_setMusicVolume+0x82>
	trimStack (&fun -> stack);
   1014a:	|  \-> moveq #24,d0
   1014c:	|      add.l 16(sp),d0
   10150:	|      move.l d0,-(sp)
   10152:	|      jsr 14be4 <trimStack>
   10158:	|      addq.l #4,sp
	setMusicVolume (musChan, v);
   1015a:	|      move.l (sp),d1
   1015c:	|      move.l 4(sp),d0
   10160:	|      move.l d1,-(sp)
   10162:	|      move.l d0,-(sp)
   10164:	|      jsr cc8c <setMusicVolume>
   1016a:	|      addq.l #8,sp
	return BR_CONTINUE;
   1016c:	|      moveq #2,d0
}
   1016e:	\----> addq.l #8,sp
   10170:	       rts

00010172 <builtIn_setDefaultMusicVolume>:

builtIn(setDefaultMusicVolume)
{
   10172:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10174:	       movea.l 12(sp),a0
   10178:	       move.l 24(a0),d0
   1017c:	       move.l d0,-(sp)
   1017e:	       pea 1 <_start+0x1>
   10182:	       move.l sp,d0
   10184:	       addq.l #8,d0
   10186:	       move.l d0,-(sp)
   10188:	       jsr 14260 <getValueType>
   1018e:	       lea 12(sp),sp
   10192:	       tst.w d0
   10194:	   /-- bne.s 1019a <builtIn_setDefaultMusicVolume+0x28>
   10196:	   |   moveq #1,d0
   10198:	/--|-- bra.s 101b8 <builtIn_setDefaultMusicVolume+0x46>
	trimStack (&fun -> stack);
   1019a:	|  \-> moveq #24,d0
   1019c:	|      add.l 12(sp),d0
   101a0:	|      move.l d0,-(sp)
   101a2:	|      jsr 14be4 <trimStack>
   101a8:	|      addq.l #4,sp
	setDefaultMusicVolume (v);
   101aa:	|      move.l (sp),d0
   101ac:	|      move.l d0,-(sp)
   101ae:	|      jsr cc70 <setDefaultMusicVolume>
   101b4:	|      addq.l #4,sp
	return BR_CONTINUE;
   101b6:	|      moveq #2,d0
}
   101b8:	\----> addq.l #4,sp
   101ba:	       rts

000101bc <builtIn_playSound>:

builtIn(playSound)
{
   101bc:	       subq.l #4,sp


	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   101be:	       movea.l 12(sp),a0
   101c2:	       move.l 24(a0),d0
   101c6:	       move.l d0,-(sp)
   101c8:	       pea 5 <_start+0x5>
   101cc:	       move.l sp,d0
   101ce:	       addq.l #8,d0
   101d0:	       move.l d0,-(sp)
   101d2:	       jsr 14260 <getValueType>
   101d8:	       lea 12(sp),sp
   101dc:	       tst.w d0
   101de:	   /-- bne.s 101e4 <builtIn_playSound+0x28>
   101e0:	   |   moveq #1,d0
   101e2:	/--|-- bra.s 1020c <builtIn_playSound+0x50>
	trimStack (&fun -> stack);
   101e4:	|  \-> moveq #24,d0
   101e6:	|      add.l 12(sp),d0
   101ea:	|      move.l d0,-(sp)
   101ec:	|      jsr 14be4 <trimStack>
   101f2:	|      addq.l #4,sp
	if (! startSound (fileNumber, FALSE)) return BR_CONTINUE;	// Was BR_ERROR
   101f4:	|      move.l (sp),d0
   101f6:	|      clr.l -(sp)
   101f8:	|      move.l d0,-(sp)
   101fa:	|      jsr cc94 <startSound>
   10200:	|      addq.l #8,sp
   10202:	|      tst.w d0
   10204:	|  /-- bne.s 1020a <builtIn_playSound+0x4e>
   10206:	|  |   moveq #2,d0
   10208:	+--|-- bra.s 1020c <builtIn_playSound+0x50>
	return BR_CONTINUE;
   1020a:	|  \-> moveq #2,d0
}
   1020c:	\----> addq.l #4,sp
   1020e:	       rts

00010210 <builtIn_loopSound>:

builtIn(loopSound)
{
   10210:	             lea -28(sp),sp
   10214:	             move.l a6,-(sp)
	UNUSEDALL
	int fileNumber;

	if (numParams < 1) {
   10216:	             tst.l 36(sp)
   1021a:	         /-- bgt.s 10230 <builtIn_loopSound+0x20>
		KPrintF("Built-in function loopSound() must have at least 1 parameter.");
   1021c:	         |   pea 19488 <graphics.c.1c13408a+0x24a>
   10222:	         |   jsr 16c5e <KPrintF>
   10228:	         |   addq.l #4,sp
		return BR_ERROR;
   1022a:	         |   moveq #1,d0
   1022c:	/--------|-- bra.w 103ec <builtIn_loopSound+0x1dc>
	} else if (numParams < 2) {
   10230:	|        \-> moveq #1,d0
   10232:	|            cmp.l 36(sp),d0
   10236:	|     /----- blt.s 10292 <builtIn_loopSound+0x82>

		if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) return BR_ERROR;
   10238:	|     |      movea.l 40(sp),a0
   1023c:	|     |      move.l 24(a0),d0
   10240:	|     |      move.l d0,-(sp)
   10242:	|     |      pea 5 <_start+0x5>
   10246:	|     |      lea 16(sp),a0
   1024a:	|     |      move.l a0,-(sp)
   1024c:	|     |      jsr 14260 <getValueType>
   10252:	|     |      lea 12(sp),sp
   10256:	|     |      tst.w d0
   10258:	|     |  /-- bne.s 10260 <builtIn_loopSound+0x50>
   1025a:	|     |  |   moveq #1,d0
   1025c:	+-----|--|-- bra.w 103ec <builtIn_loopSound+0x1dc>
		trimStack(&fun->stack);
   10260:	|     |  \-> moveq #24,d0
   10262:	|     |      add.l 40(sp),d0
   10266:	|     |      move.l d0,-(sp)
   10268:	|     |      jsr 14be4 <trimStack>
   1026e:	|     |      addq.l #4,sp
		if (!startSound(fileNumber, TRUE)) return BR_CONTINUE;	// Was BR_ERROR
   10270:	|     |      move.l 8(sp),d0
   10274:	|     |      pea 1 <_start+0x1>
   10278:	|     |      move.l d0,-(sp)
   1027a:	|     |      jsr cc94 <startSound>
   10280:	|     |      addq.l #8,sp
   10282:	|     |      tst.w d0
   10284:	|     |  /-- bne.s 1028c <builtIn_loopSound+0x7c>
   10286:	|     |  |   moveq #2,d0
   10288:	+-----|--|-- bra.w 103ec <builtIn_loopSound+0x1dc>
		return BR_CONTINUE;
   1028c:	|     |  \-> moveq #2,d0
   1028e:	+-----|----- bra.w 103ec <builtIn_loopSound+0x1dc>
	} else {
		// We have more than one sound to play!

		int doLoop = 2;
   10292:	|     \----> moveq #2,d1
   10294:	|            move.l d1,4(sp)
		struct soundList *s = NULL;
   10298:	|            clr.l 28(sp)
		struct soundList *old = NULL;
   1029c:	|            clr.l 24(sp)

		// Should we loop?
		if (fun->stack->thisVar.varType != SVT_FILE) {
   102a0:	|            movea.l 40(sp),a0
   102a4:	|            movea.l 24(a0),a0
   102a8:	|            move.l (a0),d0
   102aa:	|            moveq #5,d1
   102ac:	|            cmp.l d0,d1
   102ae:	|  /-------- beq.w 10386 <builtIn_loopSound+0x176>
			getValueType(&doLoop, SVT_INT,&fun->stack->thisVar);
   102b2:	|  |         movea.l 40(sp),a0
   102b6:	|  |         move.l 24(a0),d0
   102ba:	|  |         move.l d0,-(sp)
   102bc:	|  |         pea 1 <_start+0x1>
   102c0:	|  |         lea 12(sp),a0
   102c4:	|  |         move.l a0,-(sp)
   102c6:	|  |         jsr 14260 <getValueType>
   102cc:	|  |         lea 12(sp),sp
			trimStack(&fun->stack);
   102d0:	|  |         moveq #24,d0
   102d2:	|  |         add.l 40(sp),d0
   102d6:	|  |         move.l d0,-(sp)
   102d8:	|  |         jsr 14be4 <trimStack>
   102de:	|  |         addq.l #4,sp
			numParams--;
   102e0:	|  |         subq.l #1,36(sp)
		}
		while (numParams) {
   102e4:	|  +-------- bra.w 10386 <builtIn_loopSound+0x176>
			if (!getValueType(&fileNumber, SVT_FILE,&fun->stack->thisVar)) {
   102e8:	|  |  /----> movea.l 40(sp),a0
   102ec:	|  |  |      move.l 24(a0),d0
   102f0:	|  |  |      move.l d0,-(sp)
   102f2:	|  |  |      pea 5 <_start+0x5>
   102f6:	|  |  |      lea 16(sp),a0
   102fa:	|  |  |      move.l a0,-(sp)
   102fc:	|  |  |      jsr 14260 <getValueType>
   10302:	|  |  |      lea 12(sp),sp
   10306:	|  |  |      tst.w d0
   10308:	|  |  |  /-- bne.s 1031e <builtIn_loopSound+0x10e>
				KPrintF("Illegal parameter given built-in function loopSound().");
   1030a:	|  |  |  |   pea 194c6 <graphics.c.1c13408a+0x288>
   10310:	|  |  |  |   jsr 16c5e <KPrintF>
   10316:	|  |  |  |   addq.l #4,sp
				return BR_ERROR;
   10318:	|  |  |  |   moveq #1,d0
   1031a:	+--|--|--|-- bra.w 103ec <builtIn_loopSound+0x1dc>
			}
			s = AllocVec(sizeof(struct soundList), MEMF_ANY);
   1031e:	|  |  |  \-> moveq #20,d0
   10320:	|  |  |      move.l d0,20(sp)
   10324:	|  |  |      clr.l 16(sp)
   10328:	|  |  |      move.l 1a7a4 <SysBase>,d0
   1032e:	|  |  |      movea.l d0,a6
   10330:	|  |  |      move.l 20(sp),d0
   10334:	|  |  |      move.l 16(sp),d1
   10338:	|  |  |      jsr -684(a6)
   1033c:	|  |  |      move.l d0,12(sp)
   10340:	|  |  |      move.l 12(sp),d0
   10344:	|  |  |      move.l d0,28(sp)
			if (!s) return BR_ERROR;
   10348:	|  |  |  /-- bne.s 10350 <builtIn_loopSound+0x140>
   1034a:	|  |  |  |   moveq #1,d0
   1034c:	+--|--|--|-- bra.w 103ec <builtIn_loopSound+0x1dc>

			s->next = old;
   10350:	|  |  |  \-> movea.l 28(sp),a0
   10354:	|  |  |      move.l 24(sp),4(a0)
			s->prev = NULL;
   1035a:	|  |  |      movea.l 28(sp),a0
   1035e:	|  |  |      clr.l 8(a0)
			s->sound = fileNumber;
   10362:	|  |  |      move.l 8(sp),d0
   10366:	|  |  |      movea.l 28(sp),a0
   1036a:	|  |  |      move.l d0,(a0)
			old = s;
   1036c:	|  |  |      move.l 28(sp),24(sp)

			trimStack(&fun->stack);
   10372:	|  |  |      moveq #24,d0
   10374:	|  |  |      add.l 40(sp),d0
   10378:	|  |  |      move.l d0,-(sp)
   1037a:	|  |  |      jsr 14be4 <trimStack>
   10380:	|  |  |      addq.l #4,sp
			numParams--;
   10382:	|  |  |      subq.l #1,36(sp)
		while (numParams) {
   10386:	|  \--|----> tst.l 36(sp)
   1038a:	|     \----- bne.w 102e8 <builtIn_loopSound+0xd8>
		}
		while (s->next) s = s->next;
   1038e:	|        /-- bra.s 1039a <builtIn_loopSound+0x18a>
   10390:	|     /--|-> movea.l 28(sp),a0
   10394:	|     |  |   move.l 4(a0),28(sp)
   1039a:	|     |  \-> movea.l 28(sp),a0
   1039e:	|     |      move.l 4(a0),d0
   103a2:	|     \----- bne.s 10390 <builtIn_loopSound+0x180>
		if (doLoop > 1) {
   103a4:	|            move.l 4(sp),d0
   103a8:	|            moveq #1,d1
   103aa:	|            cmp.l d0,d1
   103ac:	|     /----- bge.s 103c4 <builtIn_loopSound+0x1b4>
			s->next = old;
   103ae:	|     |      movea.l 28(sp),a0
   103b2:	|     |      move.l 24(sp),4(a0)
			old->prev = s;
   103b8:	|     |      movea.l 24(sp),a0
   103bc:	|     |      move.l 28(sp),8(a0)
   103c2:	|     |  /-- bra.s 103d4 <builtIn_loopSound+0x1c4>
		} else if (doLoop) {
   103c4:	|     \--|-> move.l 4(sp),d0
   103c8:	|        +-- beq.s 103d4 <builtIn_loopSound+0x1c4>
			s->next = s;
   103ca:	|        |   movea.l 28(sp),a0
   103ce:	|        |   move.l 28(sp),4(a0)
		}
		old->vol = -1;
   103d4:	|        \-> movea.l 24(sp),a0
   103d8:	|            moveq #-1,d0
   103da:	|            move.l d0,16(a0)
		playSoundList(old);
   103de:	|            move.l 24(sp),-(sp)
   103e2:	|            jsr cc0e <playSoundList>
   103e8:	|            addq.l #4,sp
		return BR_CONTINUE;
   103ea:	|            moveq #2,d0
	}
}
   103ec:	\----------> movea.l (sp)+,a6
   103ee:	             lea 28(sp),sp
   103f2:	             rts

000103f4 <builtIn_stopSound>:

builtIn(stopSound)
{
   103f4:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   103f6:	       movea.l 12(sp),a0
   103fa:	       move.l 24(a0),d0
   103fe:	       move.l d0,-(sp)
   10400:	       pea 5 <_start+0x5>
   10404:	       move.l sp,d0
   10406:	       addq.l #8,d0
   10408:	       move.l d0,-(sp)
   1040a:	       jsr 14260 <getValueType>
   10410:	       lea 12(sp),sp
   10414:	       tst.w d0
   10416:	   /-- bne.s 1041c <builtIn_stopSound+0x28>
   10418:	   |   moveq #1,d0
   1041a:	/--|-- bra.s 1043a <builtIn_stopSound+0x46>
	trimStack (&fun -> stack);
   1041c:	|  \-> moveq #24,d0
   1041e:	|      add.l 12(sp),d0
   10422:	|      move.l d0,-(sp)
   10424:	|      jsr 14be4 <trimStack>
   1042a:	|      addq.l #4,sp
	huntKillSound (v);
   1042c:	|      move.l (sp),d0
   1042e:	|      move.l d0,-(sp)
   10430:	|      jsr cc06 <huntKillSound>
   10436:	|      addq.l #4,sp
	return BR_CONTINUE;
   10438:	|      moveq #2,d0
}
   1043a:	\----> addq.l #4,sp
   1043c:	       rts

0001043e <builtIn_setDefaultSoundVolume>:

builtIn(setDefaultSoundVolume)
{
   1043e:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10440:	       movea.l 12(sp),a0
   10444:	       move.l 24(a0),d0
   10448:	       move.l d0,-(sp)
   1044a:	       pea 1 <_start+0x1>
   1044e:	       move.l sp,d0
   10450:	       addq.l #8,d0
   10452:	       move.l d0,-(sp)
   10454:	       jsr 14260 <getValueType>
   1045a:	       lea 12(sp),sp
   1045e:	       tst.w d0
   10460:	   /-- bne.s 10466 <builtIn_setDefaultSoundVolume+0x28>
   10462:	   |   moveq #1,d0
   10464:	/--|-- bra.s 10484 <builtIn_setDefaultSoundVolume+0x46>
	trimStack (&fun -> stack);
   10466:	|  \-> moveq #24,d0
   10468:	|      add.l 12(sp),d0
   1046c:	|      move.l d0,-(sp)
   1046e:	|      jsr 14be4 <trimStack>
   10474:	|      addq.l #4,sp
	setDefaultSoundVolume (v);
   10476:	|      move.l (sp),d0
   10478:	|      move.l d0,-(sp)
   1047a:	|      jsr cc7c <setDefaultSoundVolume>
   10480:	|      addq.l #4,sp
	return BR_CONTINUE;
   10482:	|      moveq #2,d0
}
   10484:	\----> addq.l #4,sp
   10486:	       rts

00010488 <builtIn_setSoundVolume>:

builtIn(setSoundVolume)
{
   10488:	       subq.l #8,sp
	UNUSEDALL
	int musChan, v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1048a:	       movea.l 16(sp),a0
   1048e:	       move.l 24(a0),d0
   10492:	       move.l d0,-(sp)
   10494:	       pea 1 <_start+0x1>
   10498:	       move.l sp,d0
   1049a:	       addq.l #8,d0
   1049c:	       move.l d0,-(sp)
   1049e:	       jsr 14260 <getValueType>
   104a4:	       lea 12(sp),sp
   104a8:	       tst.w d0
   104aa:	   /-- bne.s 104b0 <builtIn_setSoundVolume+0x28>
   104ac:	   |   moveq #1,d0
   104ae:	/--|-- bra.s 1050a <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   104b0:	|  \-> moveq #24,d0
   104b2:	|      add.l 16(sp),d0
   104b6:	|      move.l d0,-(sp)
   104b8:	|      jsr 14be4 <trimStack>
   104be:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   104c0:	|      movea.l 16(sp),a0
   104c4:	|      move.l 24(a0),d0
   104c8:	|      move.l d0,-(sp)
   104ca:	|      pea 5 <_start+0x5>
   104ce:	|      moveq #12,d0
   104d0:	|      add.l sp,d0
   104d2:	|      move.l d0,-(sp)
   104d4:	|      jsr 14260 <getValueType>
   104da:	|      lea 12(sp),sp
   104de:	|      tst.w d0
   104e0:	|  /-- bne.s 104e6 <builtIn_setSoundVolume+0x5e>
   104e2:	|  |   moveq #1,d0
   104e4:	+--|-- bra.s 1050a <builtIn_setSoundVolume+0x82>
	trimStack (&fun -> stack);
   104e6:	|  \-> moveq #24,d0
   104e8:	|      add.l 16(sp),d0
   104ec:	|      move.l d0,-(sp)
   104ee:	|      jsr 14be4 <trimStack>
   104f4:	|      addq.l #4,sp
	setSoundVolume (musChan, v);
   104f6:	|      move.l (sp),d1
   104f8:	|      move.l 4(sp),d0
   104fc:	|      move.l d1,-(sp)
   104fe:	|      move.l d0,-(sp)
   10500:	|      jsr cc90 <setSoundVolume>
   10506:	|      addq.l #8,sp
	return BR_CONTINUE;
   10508:	|      moveq #2,d0
}
   1050a:	\----> addq.l #8,sp
   1050c:	       rts

0001050e <builtIn_setSoundLoopPoints>:


builtIn(setSoundLoopPoints)
{
   1050e:	       lea -12(sp),sp
	UNUSEDALL
	int musChan, theEnd, theStart;
	if (! getValueType(&theEnd, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10512:	       movea.l 20(sp),a0
   10516:	       move.l 24(a0),d0
   1051a:	       move.l d0,-(sp)
   1051c:	       pea 1 <_start+0x1>
   10520:	       moveq #12,d0
   10522:	       add.l sp,d0
   10524:	       move.l d0,-(sp)
   10526:	       jsr 14260 <getValueType>
   1052c:	       lea 12(sp),sp
   10530:	       tst.w d0
   10532:	   /-- bne.s 1053a <builtIn_setSoundLoopPoints+0x2c>
   10534:	   |   moveq #1,d0
   10536:	/--|-- bra.w 105d2 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   1053a:	|  \-> moveq #24,d0
   1053c:	|      add.l 20(sp),d0
   10540:	|      move.l d0,-(sp)
   10542:	|      jsr 14be4 <trimStack>
   10548:	|      addq.l #4,sp
	if (! getValueType(&theStart, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1054a:	|      movea.l 20(sp),a0
   1054e:	|      move.l 24(a0),d0
   10552:	|      move.l d0,-(sp)
   10554:	|      pea 1 <_start+0x1>
   10558:	|      lea 8(sp),a0
   1055c:	|      move.l a0,-(sp)
   1055e:	|      jsr 14260 <getValueType>
   10564:	|      lea 12(sp),sp
   10568:	|      tst.w d0
   1056a:	|  /-- bne.s 10570 <builtIn_setSoundLoopPoints+0x62>
   1056c:	|  |   moveq #1,d0
   1056e:	+--|-- bra.s 105d2 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   10570:	|  \-> moveq #24,d0
   10572:	|      add.l 20(sp),d0
   10576:	|      move.l d0,-(sp)
   10578:	|      jsr 14be4 <trimStack>
   1057e:	|      addq.l #4,sp
	if (! getValueType(&musChan, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   10580:	|      movea.l 20(sp),a0
   10584:	|      move.l 24(a0),d0
   10588:	|      move.l d0,-(sp)
   1058a:	|      pea 5 <_start+0x5>
   1058e:	|      moveq #16,d0
   10590:	|      add.l sp,d0
   10592:	|      move.l d0,-(sp)
   10594:	|      jsr 14260 <getValueType>
   1059a:	|      lea 12(sp),sp
   1059e:	|      tst.w d0
   105a0:	|  /-- bne.s 105a6 <builtIn_setSoundLoopPoints+0x98>
   105a2:	|  |   moveq #1,d0
   105a4:	+--|-- bra.s 105d2 <builtIn_setSoundLoopPoints+0xc4>
	trimStack (&fun -> stack);
   105a6:	|  \-> moveq #24,d0
   105a8:	|      add.l 20(sp),d0
   105ac:	|      move.l d0,-(sp)
   105ae:	|      jsr 14be4 <trimStack>
   105b4:	|      addq.l #4,sp
	setSoundLoop (musChan, theStart, theEnd);
   105b6:	|      movea.l 4(sp),a0
   105ba:	|      move.l (sp),d1
   105bc:	|      move.l 8(sp),d0
   105c0:	|      move.l a0,-(sp)
   105c2:	|      move.l d1,-(sp)
   105c4:	|      move.l d0,-(sp)
   105c6:	|      jsr cc88 <setSoundLoop>
   105cc:	|      lea 12(sp),sp
	return BR_CONTINUE;
   105d0:	|      moveq #2,d0
}
   105d2:	\----> lea 12(sp),sp
   105d6:	       rts

000105d8 <builtIn_setFloor>:

#pragma mark -
#pragma mark Extra room bits

builtIn(setFloor)
{
   105d8:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   105da:	          movea.l 12(sp),a0
   105de:	          movea.l 24(a0),a0
   105e2:	          move.l (a0),d0
   105e4:	          moveq #5,d1
   105e6:	          cmp.l d0,d1
   105e8:	/-------- bne.s 1062c <builtIn_setFloor+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   105ea:	|         movea.l 12(sp),a0
   105ee:	|         move.l 24(a0),d0
   105f2:	|         move.l d0,-(sp)
   105f4:	|         pea 5 <_start+0x5>
   105f8:	|         move.l sp,d0
   105fa:	|         addq.l #8,d0
   105fc:	|         move.l d0,-(sp)
   105fe:	|         jsr 14260 <getValueType>
   10604:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10608:	|         moveq #24,d0
   1060a:	|         add.l 12(sp),d0
   1060e:	|         move.l d0,-(sp)
   10610:	|         jsr 14be4 <trimStack>
   10616:	|         addq.l #4,sp
		if (! setFloor (v)) return BR_ERROR;
   10618:	|         move.l (sp),d0
   1061a:	|         move.l d0,-(sp)
   1061c:	|         jsr 16408 <setFloor>
   10622:	|         addq.l #4,sp
   10624:	|         tst.w d0
   10626:	|  /----- bne.s 10642 <builtIn_setFloor+0x6a>
   10628:	|  |      moveq #1,d0
   1062a:	|  |  /-- bra.s 10644 <builtIn_setFloor+0x6c>
	} else {
		trimStack (&fun -> stack);
   1062c:	\--|--|-> moveq #24,d0
   1062e:	   |  |   add.l 12(sp),d0
   10632:	   |  |   move.l d0,-(sp)
   10634:	   |  |   jsr 14be4 <trimStack>
   1063a:	   |  |   addq.l #4,sp
		setFloorNull ();
   1063c:	   |  |   jsr 16b82 <setFloorNull>
	}
	return BR_CONTINUE;
   10642:	   \--|-> moveq #2,d0
}
   10644:	      \-> addq.l #4,sp
   10646:	          rts

00010648 <builtIn_showFloor>:

builtIn(showFloor)
{
	UNUSEDALL
	drawFloor ();
   10648:	jsr 15ca0 <drawFloor>
	return BR_CONTINUE;
   1064e:	moveq #2,d0
}
   10650:	rts

00010652 <builtIn_setZBuffer>:

builtIn(setZBuffer)
{
   10652:	          subq.l #4,sp
	UNUSEDALL
	if (fun -> stack -> thisVar.varType == SVT_FILE) {
   10654:	          movea.l 12(sp),a0
   10658:	          movea.l 24(a0),a0
   1065c:	          move.l (a0),d0
   1065e:	          moveq #5,d1
   10660:	          cmp.l d0,d1
   10662:	/-------- bne.s 106a6 <builtIn_setZBuffer+0x54>
		int v;
		getValueType(&v, SVT_FILE,&fun -> stack -> thisVar);
   10664:	|         movea.l 12(sp),a0
   10668:	|         move.l 24(a0),d0
   1066c:	|         move.l d0,-(sp)
   1066e:	|         pea 5 <_start+0x5>
   10672:	|         move.l sp,d0
   10674:	|         addq.l #8,d0
   10676:	|         move.l d0,-(sp)
   10678:	|         jsr 14260 <getValueType>
   1067e:	|         lea 12(sp),sp
		trimStack (&fun -> stack);
   10682:	|         moveq #24,d0
   10684:	|         add.l 12(sp),d0
   10688:	|         move.l d0,-(sp)
   1068a:	|         jsr 14be4 <trimStack>
   10690:	|         addq.l #4,sp
		if (! setZBuffer (v)) return BR_ERROR;
   10692:	|         move.l (sp),d0
   10694:	|         move.l d0,-(sp)
   10696:	|         jsr 8042 <setZBuffer>
   1069c:	|         addq.l #4,sp
   1069e:	|         tst.w d0
   106a0:	|  /----- bne.s 106bc <builtIn_setZBuffer+0x6a>
   106a2:	|  |      moveq #1,d0
   106a4:	|  |  /-- bra.s 106be <builtIn_setZBuffer+0x6c>
	} else {
		trimStack (&fun -> stack);
   106a6:	\--|--|-> moveq #24,d0
   106a8:	   |  |   add.l 12(sp),d0
   106ac:	   |  |   move.l d0,-(sp)
   106ae:	   |  |   jsr 14be4 <trimStack>
   106b4:	   |  |   addq.l #4,sp
		killZBuffer ();
   106b6:	   |  |   jsr 7fec <killZBuffer>
	}
	return BR_CONTINUE;
   106bc:	   \--|-> moveq #2,d0
}
   106be:	      \-> addq.l #4,sp
   106c0:	          rts

000106c2 <builtIn_setLightMap>:

		default:
			fatal ("Function should have either 2 or 3 parameters");
			return BR_ERROR;
	}*/
	KPrintF("Not implemented on Amiga");
   106c2:	pea 194fd <graphics.c.1c13408a+0x2bf>
   106c8:	jsr 16c5e <KPrintF>
   106ce:	addq.l #4,sp
	return BR_CONTINUE;
   106d0:	moveq #2,d0
}
   106d2:	rts

000106d4 <builtIn_setSpeechMode>:
#pragma mark Objects

builtIn(setSpeechMode)
{
	UNUSEDALL
	if (! getValueType(&speechMode, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   106d4:	          movea.l 8(sp),a0
   106d8:	          move.l 24(a0),d0
   106dc:	          move.l d0,-(sp)
   106de:	          pea 1 <_start+0x1>
   106e2:	          pea 1a8c6 <speechMode>
   106e8:	          jsr 14260 <getValueType>
   106ee:	          lea 12(sp),sp
   106f2:	          tst.w d0
   106f4:	      /-- bne.s 106fa <builtIn_setSpeechMode+0x26>
   106f6:	      |   moveq #1,d0
   106f8:	/-----|-- bra.s 10732 <builtIn_setSpeechMode+0x5e>
	trimStack (&fun -> stack);
   106fa:	|     \-> moveq #24,d0
   106fc:	|         add.l 8(sp),d0
   10700:	|         move.l d0,-(sp)
   10702:	|         jsr 14be4 <trimStack>
   10708:	|         addq.l #4,sp
	if (speechMode < 0 || speechMode > 2) {
   1070a:	|         move.l 1a8c6 <speechMode>,d0
   10710:	|     /-- bmi.s 1071e <builtIn_setSpeechMode+0x4a>
   10712:	|     |   move.l 1a8c6 <speechMode>,d0
   10718:	|     |   moveq #2,d1
   1071a:	|     |   cmp.l d0,d1
   1071c:	|  /--|-- bge.s 10730 <builtIn_setSpeechMode+0x5c>
		KPrintF ("Valid parameters are be SPEECHANDTEXT, SPEECHONLY or TEXTONLY");
   1071e:	|  |  \-> pea 19516 <graphics.c.1c13408a+0x2d8>
   10724:	|  |      jsr 16c5e <KPrintF>
   1072a:	|  |      addq.l #4,sp
		return BR_ERROR;
   1072c:	|  |      moveq #1,d0
   1072e:	+--|----- bra.s 10732 <builtIn_setSpeechMode+0x5e>
	}
	return BR_CONTINUE;
   10730:	|  \----> moveq #2,d0
}
   10732:	\-------> rts

00010734 <builtIn_somethingSpeaking>:

builtIn(somethingSpeaking)
{
   10734:	       subq.l #4,sp
	UNUSEDALL
	int i = isThereAnySpeechGoingOn ();
   10736:	       jsr 77f4 <isThereAnySpeechGoingOn>
   1073c:	       move.l d0,(sp)
	if (i == -1) {
   1073e:	       moveq #-1,d0
   10740:	       cmp.l (sp),d0
   10742:	/----- bne.s 1075e <builtIn_somethingSpeaking+0x2a>
		setVariable (&fun -> reg, SVT_INT, 0);
   10744:	|      moveq #28,d0
   10746:	|      add.l 12(sp),d0
   1074a:	|      clr.l -(sp)
   1074c:	|      pea 1 <_start+0x1>
   10750:	|      move.l d0,-(sp)
   10752:	|      jsr 14b52 <setVariable>
   10758:	|      lea 12(sp),sp
   1075c:	|  /-- bra.s 10776 <builtIn_somethingSpeaking+0x42>
	} else {
		setVariable (&fun -> reg, SVT_OBJTYPE, i);
   1075e:	\--|-> moveq #28,d0
   10760:	   |   add.l 12(sp),d0
   10764:	   |   move.l (sp),-(sp)
   10766:	   |   pea 7 <_start+0x7>
   1076a:	   |   move.l d0,-(sp)
   1076c:	   |   jsr 14b52 <setVariable>
   10772:	   |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   10776:	   \-> moveq #2,d0
}
   10778:	       addq.l #4,sp
   1077a:	       rts

0001077c <builtIn_skipSpeech>:

builtIn(skipSpeech)
{
	UNUSEDALL
	killSpeechTimers ();
   1077c:	jsr 5adc <killSpeechTimers>
	return BR_CONTINUE;
   10782:	moveq #2,d0
}
   10784:	rts

00010786 <builtIn_getOverObject>:

builtIn(getOverObject)
{
	UNUSEDALL
	if (overRegion)
   10786:	       move.l 1a90c <overRegion>,d0
   1078c:	/----- beq.s 107b6 <builtIn_getOverObject+0x30>
		// Return value
		setVariable (&fun -> reg, SVT_OBJTYPE, overRegion -> thisType -> objectNum);
   1078e:	|      movea.l 1a90c <overRegion>,a0
   10794:	|      movea.l 28(a0),a0
   10798:	|      move.l 4(a0),d1
   1079c:	|      moveq #28,d0
   1079e:	|      add.l 8(sp),d0
   107a2:	|      move.l d1,-(sp)
   107a4:	|      pea 7 <_start+0x7>
   107a8:	|      move.l d0,-(sp)
   107aa:	|      jsr 14b52 <setVariable>
   107b0:	|      lea 12(sp),sp
   107b4:	|  /-- bra.s 107ce <builtIn_getOverObject+0x48>
	else
		// Return value
		setVariable (&fun -> reg, SVT_INT, 0);
   107b6:	\--|-> moveq #28,d0
   107b8:	   |   add.l 8(sp),d0
   107bc:	   |   clr.l -(sp)
   107be:	   |   pea 1 <_start+0x1>
   107c2:	   |   move.l d0,-(sp)
   107c4:	   |   jsr 14b52 <setVariable>
   107ca:	   |   lea 12(sp),sp
	return BR_CONTINUE;
   107ce:	   \-> moveq #2,d0
}
   107d0:	       rts

000107d2 <builtIn_rename>:

builtIn(rename)
{
   107d2:	       lea -16(sp),sp
   107d6:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   107d8:	       movea.l 28(sp),a0
   107dc:	       move.l 24(a0),d0
   107e0:	       move.l d0,-(sp)
   107e2:	       jsr 14836 <getTextFromAnyVar>
   107e8:	       addq.l #4,sp
   107ea:	       move.l d0,16(sp)
	int objT;
	if (!newText) return BR_ERROR;
   107ee:	   /-- bne.s 107f4 <builtIn_rename+0x22>
   107f0:	   |   moveq #1,d0
   107f2:	/--|-- bra.s 1086e <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   107f4:	|  \-> moveq #24,d0
   107f6:	|      add.l 28(sp),d0
   107fa:	|      move.l d0,-(sp)
   107fc:	|      jsr 14be4 <trimStack>
   10802:	|      addq.l #4,sp
	if (!getValueType(&objT, SVT_OBJTYPE, &fun->stack->thisVar)) return BR_ERROR;
   10804:	|      movea.l 28(sp),a0
   10808:	|      move.l 24(a0),d0
   1080c:	|      move.l d0,-(sp)
   1080e:	|      pea 7 <_start+0x7>
   10812:	|      lea 12(sp),a0
   10816:	|      move.l a0,-(sp)
   10818:	|      jsr 14260 <getValueType>
   1081e:	|      lea 12(sp),sp
   10822:	|      tst.w d0
   10824:	|  /-- bne.s 1082a <builtIn_rename+0x58>
   10826:	|  |   moveq #1,d0
   10828:	+--|-- bra.s 1086e <builtIn_rename+0x9c>
	trimStack(&fun->stack);
   1082a:	|  \-> moveq #24,d0
   1082c:	|      add.l 28(sp),d0
   10830:	|      move.l d0,-(sp)
   10832:	|      jsr 14be4 <trimStack>
   10838:	|      addq.l #4,sp
	struct objectType * o = findObjectType(objT);
   1083a:	|      move.l 4(sp),d0
   1083e:	|      move.l d0,-(sp)
   10840:	|      jsr cfca <findObjectType>
   10846:	|      addq.l #4,sp
   10848:	|      move.l d0,12(sp)
	FreeVec(o->screenName);
   1084c:	|      movea.l 12(sp),a0
   10850:	|      move.l (a0),8(sp)
   10854:	|      move.l 1a7a4 <SysBase>,d0
   1085a:	|      movea.l d0,a6
   1085c:	|      movea.l 8(sp),a1
   10860:	|      jsr -690(a6)
	o->screenName = newText;
   10864:	|      movea.l 12(sp),a0
   10868:	|      move.l 16(sp),(a0)
	return BR_CONTINUE;
   1086c:	|      moveq #2,d0
}
   1086e:	\----> movea.l (sp)+,a6
   10870:	       lea 16(sp),sp
   10874:	       rts

00010876 <builtIn_getObjectX>:

builtIn (getObjectX)
{
   10876:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1087a:	          movea.l 20(sp),a0
   1087e:	          move.l 24(a0),d0
   10882:	          move.l d0,-(sp)
   10884:	          pea 7 <_start+0x7>
   10888:	          lea 8(sp),a0
   1088c:	          move.l a0,-(sp)
   1088e:	          jsr 14260 <getValueType>
   10894:	          lea 12(sp),sp
   10898:	          tst.w d0
   1089a:	      /-- bne.s 108a2 <builtIn_getObjectX+0x2c>
   1089c:	      |   moveq #1,d0
   1089e:	/-----|-- bra.w 1093e <builtIn_getObjectX+0xc8>
	trimStack (&fun -> stack);
   108a2:	|     \-> moveq #24,d0
   108a4:	|         add.l 20(sp),d0
   108a8:	|         move.l d0,-(sp)
   108aa:	|         jsr 14be4 <trimStack>
   108b0:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   108b2:	|         move.l (sp),d0
   108b4:	|         move.l d0,-(sp)
   108b6:	|         jsr a0f4 <findPerson>
   108bc:	|         addq.l #4,sp
   108be:	|         move.l d0,8(sp)
	if (pers) {
   108c2:	|     /-- beq.s 108f0 <builtIn_getObjectX+0x7a>
		setVariable (&fun -> reg, SVT_INT, pers -> x);
   108c4:	|     |   movea.l 8(sp),a0
   108c8:	|     |   move.l (a0),d0
   108ca:	|     |   move.l d0,-(sp)
   108cc:	|     |   jsr 17032 <__fixsfsi>
   108d2:	|     |   addq.l #4,sp
   108d4:	|     |   move.l d0,d1
   108d6:	|     |   moveq #28,d0
   108d8:	|     |   add.l 20(sp),d0
   108dc:	|     |   move.l d1,-(sp)
   108de:	|     |   pea 1 <_start+0x1>
   108e2:	|     |   move.l d0,-(sp)
   108e4:	|     |   jsr 14b52 <setVariable>
   108ea:	|     |   lea 12(sp),sp
   108ee:	|  /--|-- bra.s 1093c <builtIn_getObjectX+0xc6>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   108f0:	|  |  \-> move.l (sp),d0
   108f2:	|  |      move.l d0,-(sp)
   108f4:	|  |      jsr 15480 <getRegionForObject>
   108fa:	|  |      addq.l #4,sp
   108fc:	|  |      move.l d0,4(sp)
		if (la) {
   10900:	|  |  /-- beq.s 10924 <builtIn_getObjectX+0xae>
			setVariable (&fun -> reg, SVT_INT, la -> sX);
   10902:	|  |  |   movea.l 4(sp),a0
   10906:	|  |  |   move.l 16(a0),d1
   1090a:	|  |  |   moveq #28,d0
   1090c:	|  |  |   add.l 20(sp),d0
   10910:	|  |  |   move.l d1,-(sp)
   10912:	|  |  |   pea 1 <_start+0x1>
   10916:	|  |  |   move.l d0,-(sp)
   10918:	|  |  |   jsr 14b52 <setVariable>
   1091e:	|  |  |   lea 12(sp),sp
   10922:	|  +--|-- bra.s 1093c <builtIn_getObjectX+0xc6>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   10924:	|  |  \-> moveq #28,d0
   10926:	|  |      add.l 20(sp),d0
   1092a:	|  |      clr.l -(sp)
   1092c:	|  |      pea 1 <_start+0x1>
   10930:	|  |      move.l d0,-(sp)
   10932:	|  |      jsr 14b52 <setVariable>
   10938:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   1093c:	|  \----> moveq #2,d0
}
   1093e:	\-------> lea 12(sp),sp
   10942:	          rts

00010944 <builtIn_getObjectY>:

builtIn (getObjectY)
{
   10944:	          lea -12(sp),sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10948:	          movea.l 20(sp),a0
   1094c:	          move.l 24(a0),d0
   10950:	          move.l d0,-(sp)
   10952:	          pea 7 <_start+0x7>
   10956:	          lea 8(sp),a0
   1095a:	          move.l a0,-(sp)
   1095c:	          jsr 14260 <getValueType>
   10962:	          lea 12(sp),sp
   10966:	          tst.w d0
   10968:	      /-- bne.s 10970 <builtIn_getObjectY+0x2c>
   1096a:	      |   moveq #1,d0
   1096c:	/-----|-- bra.w 10a0e <builtIn_getObjectY+0xca>
	trimStack (&fun -> stack);
   10970:	|     \-> moveq #24,d0
   10972:	|         add.l 20(sp),d0
   10976:	|         move.l d0,-(sp)
   10978:	|         jsr 14be4 <trimStack>
   1097e:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   10980:	|         move.l (sp),d0
   10982:	|         move.l d0,-(sp)
   10984:	|         jsr a0f4 <findPerson>
   1098a:	|         addq.l #4,sp
   1098c:	|         move.l d0,8(sp)
	if (pers) {
   10990:	|     /-- beq.s 109c0 <builtIn_getObjectY+0x7c>
		setVariable (&fun -> reg, SVT_INT, pers -> y);
   10992:	|     |   movea.l 8(sp),a0
   10996:	|     |   move.l 4(a0),d0
   1099a:	|     |   move.l d0,-(sp)
   1099c:	|     |   jsr 17032 <__fixsfsi>
   109a2:	|     |   addq.l #4,sp
   109a4:	|     |   move.l d0,d1
   109a6:	|     |   moveq #28,d0
   109a8:	|     |   add.l 20(sp),d0
   109ac:	|     |   move.l d1,-(sp)
   109ae:	|     |   pea 1 <_start+0x1>
   109b2:	|     |   move.l d0,-(sp)
   109b4:	|     |   jsr 14b52 <setVariable>
   109ba:	|     |   lea 12(sp),sp
   109be:	|  /--|-- bra.s 10a0c <builtIn_getObjectY+0xc8>
	} else {
		struct screenRegion * la = getRegionForObject (objectNumber);
   109c0:	|  |  \-> move.l (sp),d0
   109c2:	|  |      move.l d0,-(sp)
   109c4:	|  |      jsr 15480 <getRegionForObject>
   109ca:	|  |      addq.l #4,sp
   109cc:	|  |      move.l d0,4(sp)
		if (la) {
   109d0:	|  |  /-- beq.s 109f4 <builtIn_getObjectY+0xb0>
			setVariable (&fun -> reg, SVT_INT, la -> sY);
   109d2:	|  |  |   movea.l 4(sp),a0
   109d6:	|  |  |   move.l 20(a0),d1
   109da:	|  |  |   moveq #28,d0
   109dc:	|  |  |   add.l 20(sp),d0
   109e0:	|  |  |   move.l d1,-(sp)
   109e2:	|  |  |   pea 1 <_start+0x1>
   109e6:	|  |  |   move.l d0,-(sp)
   109e8:	|  |  |   jsr 14b52 <setVariable>
   109ee:	|  |  |   lea 12(sp),sp
   109f2:	|  +--|-- bra.s 10a0c <builtIn_getObjectY+0xc8>
		} else {
			setVariable (&fun -> reg, SVT_INT, 0);
   109f4:	|  |  \-> moveq #28,d0
   109f6:	|  |      add.l 20(sp),d0
   109fa:	|  |      clr.l -(sp)
   109fc:	|  |      pea 1 <_start+0x1>
   10a00:	|  |      move.l d0,-(sp)
   10a02:	|  |      jsr 14b52 <setVariable>
   10a08:	|  |      lea 12(sp),sp
		}
	}
	return BR_CONTINUE;
   10a0c:	|  \----> moveq #2,d0
}
   10a0e:	\-------> lea 12(sp),sp
   10a12:	          rts

00010a14 <builtIn_addScreenRegion>:


builtIn(addScreenRegion)
{
   10a14:	       lea -32(sp),sp
   10a18:	       movem.l d2-d5,-(sp)
	UNUSEDALL
	int sX, sY, x1, y1, x2, y2, di, objectNumber;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a1c:	       movea.l 56(sp),a0
   10a20:	       move.l 24(a0),d0
   10a24:	       move.l d0,-(sp)
   10a26:	       pea 1 <_start+0x1>
   10a2a:	       lea 28(sp),a0
   10a2e:	       move.l a0,-(sp)
   10a30:	       jsr 14260 <getValueType>
   10a36:	       lea 12(sp),sp
   10a3a:	       tst.w d0
   10a3c:	   /-- bne.s 10a44 <builtIn_addScreenRegion+0x30>
   10a3e:	   |   moveq #1,d0
   10a40:	/--|-- bra.w 10c1e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10a44:	|  \-> moveq #24,d0
   10a46:	|      add.l 56(sp),d0
   10a4a:	|      move.l d0,-(sp)
   10a4c:	|      jsr 14be4 <trimStack>
   10a52:	|      addq.l #4,sp
	if (! getValueType(&sY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a54:	|      movea.l 56(sp),a0
   10a58:	|      move.l 24(a0),d0
   10a5c:	|      move.l d0,-(sp)
   10a5e:	|      pea 1 <_start+0x1>
   10a62:	|      moveq #48,d0
   10a64:	|      add.l sp,d0
   10a66:	|      move.l d0,-(sp)
   10a68:	|      jsr 14260 <getValueType>
   10a6e:	|      lea 12(sp),sp
   10a72:	|      tst.w d0
   10a74:	|  /-- bne.s 10a7c <builtIn_addScreenRegion+0x68>
   10a76:	|  |   moveq #1,d0
   10a78:	+--|-- bra.w 10c1e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10a7c:	|  \-> moveq #24,d0
   10a7e:	|      add.l 56(sp),d0
   10a82:	|      move.l d0,-(sp)
   10a84:	|      jsr 14be4 <trimStack>
   10a8a:	|      addq.l #4,sp
	if (! getValueType(&sX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10a8c:	|      movea.l 56(sp),a0
   10a90:	|      move.l 24(a0),d0
   10a94:	|      move.l d0,-(sp)
   10a96:	|      pea 1 <_start+0x1>
   10a9a:	|      moveq #52,d0
   10a9c:	|      add.l sp,d0
   10a9e:	|      move.l d0,-(sp)
   10aa0:	|      jsr 14260 <getValueType>
   10aa6:	|      lea 12(sp),sp
   10aaa:	|      tst.w d0
   10aac:	|  /-- bne.s 10ab4 <builtIn_addScreenRegion+0xa0>
   10aae:	|  |   moveq #1,d0
   10ab0:	+--|-- bra.w 10c1e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10ab4:	|  \-> moveq #24,d0
   10ab6:	|      add.l 56(sp),d0
   10aba:	|      move.l d0,-(sp)
   10abc:	|      jsr 14be4 <trimStack>
   10ac2:	|      addq.l #4,sp
	if (! getValueType(&y2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ac4:	|      movea.l 56(sp),a0
   10ac8:	|      move.l 24(a0),d0
   10acc:	|      move.l d0,-(sp)
   10ace:	|      pea 1 <_start+0x1>
   10ad2:	|      lea 32(sp),a0
   10ad6:	|      move.l a0,-(sp)
   10ad8:	|      jsr 14260 <getValueType>
   10ade:	|      lea 12(sp),sp
   10ae2:	|      tst.w d0
   10ae4:	|  /-- bne.s 10aec <builtIn_addScreenRegion+0xd8>
   10ae6:	|  |   moveq #1,d0
   10ae8:	+--|-- bra.w 10c1e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10aec:	|  \-> moveq #24,d0
   10aee:	|      add.l 56(sp),d0
   10af2:	|      move.l d0,-(sp)
   10af4:	|      jsr 14be4 <trimStack>
   10afa:	|      addq.l #4,sp
	if (! getValueType(&x2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10afc:	|      movea.l 56(sp),a0
   10b00:	|      move.l 24(a0),d0
   10b04:	|      move.l d0,-(sp)
   10b06:	|      pea 1 <_start+0x1>
   10b0a:	|      lea 36(sp),a0
   10b0e:	|      move.l a0,-(sp)
   10b10:	|      jsr 14260 <getValueType>
   10b16:	|      lea 12(sp),sp
   10b1a:	|      tst.w d0
   10b1c:	|  /-- bne.s 10b24 <builtIn_addScreenRegion+0x110>
   10b1e:	|  |   moveq #1,d0
   10b20:	+--|-- bra.w 10c1e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10b24:	|  \-> moveq #24,d0
   10b26:	|      add.l 56(sp),d0
   10b2a:	|      move.l d0,-(sp)
   10b2c:	|      jsr 14be4 <trimStack>
   10b32:	|      addq.l #4,sp
	if (! getValueType(&y1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b34:	|      movea.l 56(sp),a0
   10b38:	|      move.l 24(a0),d0
   10b3c:	|      move.l d0,-(sp)
   10b3e:	|      pea 1 <_start+0x1>
   10b42:	|      lea 40(sp),a0
   10b46:	|      move.l a0,-(sp)
   10b48:	|      jsr 14260 <getValueType>
   10b4e:	|      lea 12(sp),sp
   10b52:	|      tst.w d0
   10b54:	|  /-- bne.s 10b5c <builtIn_addScreenRegion+0x148>
   10b56:	|  |   moveq #1,d0
   10b58:	+--|-- bra.w 10c1e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10b5c:	|  \-> moveq #24,d0
   10b5e:	|      add.l 56(sp),d0
   10b62:	|      move.l d0,-(sp)
   10b64:	|      jsr 14be4 <trimStack>
   10b6a:	|      addq.l #4,sp
	if (! getValueType(&x1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10b6c:	|      movea.l 56(sp),a0
   10b70:	|      move.l 24(a0),d0
   10b74:	|      move.l d0,-(sp)
   10b76:	|      pea 1 <_start+0x1>
   10b7a:	|      lea 44(sp),a0
   10b7e:	|      move.l a0,-(sp)
   10b80:	|      jsr 14260 <getValueType>
   10b86:	|      lea 12(sp),sp
   10b8a:	|      tst.w d0
   10b8c:	|  /-- bne.s 10b94 <builtIn_addScreenRegion+0x180>
   10b8e:	|  |   moveq #1,d0
   10b90:	+--|-- bra.w 10c1e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10b94:	|  \-> moveq #24,d0
   10b96:	|      add.l 56(sp),d0
   10b9a:	|      move.l d0,-(sp)
   10b9c:	|      jsr 14be4 <trimStack>
   10ba2:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10ba4:	|      movea.l 56(sp),a0
   10ba8:	|      move.l 24(a0),d0
   10bac:	|      move.l d0,-(sp)
   10bae:	|      pea 7 <_start+0x7>
   10bb2:	|      lea 24(sp),a0
   10bb6:	|      move.l a0,-(sp)
   10bb8:	|      jsr 14260 <getValueType>
   10bbe:	|      lea 12(sp),sp
   10bc2:	|      tst.w d0
   10bc4:	|  /-- bne.s 10bca <builtIn_addScreenRegion+0x1b6>
   10bc6:	|  |   moveq #1,d0
   10bc8:	+--|-- bra.s 10c1e <builtIn_addScreenRegion+0x20a>
	trimStack (&fun -> stack);
   10bca:	|  \-> moveq #24,d0
   10bcc:	|      add.l 56(sp),d0
   10bd0:	|      move.l d0,-(sp)
   10bd2:	|      jsr 14be4 <trimStack>
   10bd8:	|      addq.l #4,sp
	if (addScreenRegion (x1, y1, x2, y2, sX, sY, di, objectNumber)) return BR_CONTINUE;
   10bda:	|      move.l 16(sp),d5
   10bde:	|      move.l 20(sp),d4
   10be2:	|      move.l 40(sp),d3
   10be6:	|      move.l 44(sp),d2
   10bea:	|      movea.l 24(sp),a1
   10bee:	|      movea.l 28(sp),a0
   10bf2:	|      move.l 32(sp),d1
   10bf6:	|      move.l 36(sp),d0
   10bfa:	|      move.l d5,-(sp)
   10bfc:	|      move.l d4,-(sp)
   10bfe:	|      move.l d3,-(sp)
   10c00:	|      move.l d2,-(sp)
   10c02:	|      move.l a1,-(sp)
   10c04:	|      move.l a0,-(sp)
   10c06:	|      move.l d1,-(sp)
   10c08:	|      move.l d0,-(sp)
   10c0a:	|      jsr 1533a <addScreenRegion>
   10c10:	|      lea 32(sp),sp
   10c14:	|      tst.w d0
   10c16:	|  /-- beq.s 10c1c <builtIn_addScreenRegion+0x208>
   10c18:	|  |   moveq #2,d0
   10c1a:	+--|-- bra.s 10c1e <builtIn_addScreenRegion+0x20a>
	return BR_ERROR;
   10c1c:	|  \-> moveq #1,d0

}
   10c1e:	\----> movem.l (sp)+,d2-d5
   10c22:	       lea 32(sp),sp
   10c26:	       rts

00010c28 <builtIn_removeScreenRegion>:

builtIn(removeScreenRegion)
{
   10c28:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10c2a:	       movea.l 12(sp),a0
   10c2e:	       move.l 24(a0),d0
   10c32:	       move.l d0,-(sp)
   10c34:	       pea 7 <_start+0x7>
   10c38:	       move.l sp,d0
   10c3a:	       addq.l #8,d0
   10c3c:	       move.l d0,-(sp)
   10c3e:	       jsr 14260 <getValueType>
   10c44:	       lea 12(sp),sp
   10c48:	       tst.w d0
   10c4a:	   /-- bne.s 10c50 <builtIn_removeScreenRegion+0x28>
   10c4c:	   |   moveq #1,d0
   10c4e:	/--|-- bra.s 10c6e <builtIn_removeScreenRegion+0x46>
	trimStack (&fun -> stack);
   10c50:	|  \-> moveq #24,d0
   10c52:	|      add.l 12(sp),d0
   10c56:	|      move.l d0,-(sp)
   10c58:	|      jsr 14be4 <trimStack>
   10c5e:	|      addq.l #4,sp
	removeScreenRegion (objectNumber);
   10c60:	|      move.l (sp),d0
   10c62:	|      move.l d0,-(sp)
   10c64:	|      jsr 15628 <removeScreenRegion>
   10c6a:	|      addq.l #4,sp
	return BR_CONTINUE;
   10c6c:	|      moveq #2,d0
}
   10c6e:	\----> addq.l #4,sp
   10c70:	       rts

00010c72 <builtIn_showBoxes>:

builtIn(showBoxes)
{
	UNUSEDALL
	showBoxes ();
   10c72:	jsr 157ac <showBoxes>
	return BR_CONTINUE;
   10c78:	moveq #2,d0
}
   10c7a:	rts

00010c7c <builtIn_removeAllScreenRegions>:

builtIn(removeAllScreenRegions)
{
	UNUSEDALL
	killAllRegions ();
   10c7c:	jsr 154ae <killAllRegions>
	return BR_CONTINUE;
   10c82:	moveq #2,d0
}
   10c84:	rts

00010c86 <builtIn_addCharacter>:

builtIn(addCharacter)
{
   10c86:	       lea -16(sp),sp
	UNUSEDALL
	struct persona * p;
	int x, y, objectNumber;

	p = getCostumeFromVar (&(fun -> stack -> thisVar));
   10c8a:	       movea.l 24(sp),a0
   10c8e:	       move.l 24(a0),d0
   10c92:	       move.l d0,-(sp)
   10c94:	       jsr 13f0c <getCostumeFromVar>
   10c9a:	       addq.l #4,sp
   10c9c:	       move.l d0,12(sp)
	if (p == NULL) return BR_ERROR;
   10ca0:	   /-- bne.s 10ca8 <builtIn_addCharacter+0x22>
   10ca2:	   |   moveq #1,d0
   10ca4:	/--|-- bra.w 10d84 <builtIn_addCharacter+0xfe>

	trimStack (&fun -> stack);
   10ca8:	|  \-> moveq #24,d0
   10caa:	|      add.l 24(sp),d0
   10cae:	|      move.l d0,-(sp)
   10cb0:	|      jsr 14be4 <trimStack>
   10cb6:	|      addq.l #4,sp
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10cb8:	|      movea.l 24(sp),a0
   10cbc:	|      move.l 24(a0),d0
   10cc0:	|      move.l d0,-(sp)
   10cc2:	|      pea 1 <_start+0x1>
   10cc6:	|      lea 12(sp),a0
   10cca:	|      move.l a0,-(sp)
   10ccc:	|      jsr 14260 <getValueType>
   10cd2:	|      lea 12(sp),sp
   10cd6:	|      tst.w d0
   10cd8:	|  /-- bne.s 10ce0 <builtIn_addCharacter+0x5a>
   10cda:	|  |   moveq #1,d0
   10cdc:	+--|-- bra.w 10d84 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10ce0:	|  \-> moveq #24,d0
   10ce2:	|      add.l 24(sp),d0
   10ce6:	|      move.l d0,-(sp)
   10ce8:	|      jsr 14be4 <trimStack>
   10cee:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10cf0:	|      movea.l 24(sp),a0
   10cf4:	|      move.l 24(a0),d0
   10cf8:	|      move.l d0,-(sp)
   10cfa:	|      pea 1 <_start+0x1>
   10cfe:	|      moveq #16,d0
   10d00:	|      add.l sp,d0
   10d02:	|      move.l d0,-(sp)
   10d04:	|      jsr 14260 <getValueType>
   10d0a:	|      lea 12(sp),sp
   10d0e:	|      tst.w d0
   10d10:	|  /-- bne.s 10d16 <builtIn_addCharacter+0x90>
   10d12:	|  |   moveq #1,d0
   10d14:	+--|-- bra.s 10d84 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10d16:	|  \-> moveq #24,d0
   10d18:	|      add.l 24(sp),d0
   10d1c:	|      move.l d0,-(sp)
   10d1e:	|      jsr 14be4 <trimStack>
   10d24:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d26:	|      movea.l 24(sp),a0
   10d2a:	|      move.l 24(a0),d0
   10d2e:	|      move.l d0,-(sp)
   10d30:	|      pea 7 <_start+0x7>
   10d34:	|      lea 8(sp),a0
   10d38:	|      move.l a0,-(sp)
   10d3a:	|      jsr 14260 <getValueType>
   10d40:	|      lea 12(sp),sp
   10d44:	|      tst.w d0
   10d46:	|  /-- bne.s 10d4c <builtIn_addCharacter+0xc6>
   10d48:	|  |   moveq #1,d0
   10d4a:	+--|-- bra.s 10d84 <builtIn_addCharacter+0xfe>
	trimStack (&fun -> stack);
   10d4c:	|  \-> moveq #24,d0
   10d4e:	|      add.l 24(sp),d0
   10d52:	|      move.l d0,-(sp)
   10d54:	|      jsr 14be4 <trimStack>
   10d5a:	|      addq.l #4,sp
	if (addPerson (x, y, objectNumber, p)) return BR_CONTINUE;
   10d5c:	|      movea.l (sp),a0
   10d5e:	|      move.l 4(sp),d1
   10d62:	|      move.l 8(sp),d0
   10d66:	|      move.l 12(sp),-(sp)
   10d6a:	|      move.l a0,-(sp)
   10d6c:	|      move.l d1,-(sp)
   10d6e:	|      move.l d0,-(sp)
   10d70:	|      jsr 8cee <addPerson>
   10d76:	|      lea 16(sp),sp
   10d7a:	|      tst.w d0
   10d7c:	|  /-- beq.s 10d82 <builtIn_addCharacter+0xfc>
   10d7e:	|  |   moveq #2,d0
   10d80:	+--|-- bra.s 10d84 <builtIn_addCharacter+0xfe>
	return BR_ERROR;
   10d82:	|  \-> moveq #1,d0
}
   10d84:	\----> lea 16(sp),sp
   10d88:	       rts

00010d8a <builtIn_hideCharacter>:

builtIn(hideCharacter)
{
   10d8a:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10d8c:	       movea.l 12(sp),a0
   10d90:	       move.l 24(a0),d0
   10d94:	       move.l d0,-(sp)
   10d96:	       pea 7 <_start+0x7>
   10d9a:	       move.l sp,d0
   10d9c:	       addq.l #8,d0
   10d9e:	       move.l d0,-(sp)
   10da0:	       jsr 14260 <getValueType>
   10da6:	       lea 12(sp),sp
   10daa:	       tst.w d0
   10dac:	   /-- bne.s 10db2 <builtIn_hideCharacter+0x28>
   10dae:	   |   moveq #1,d0
   10db0:	/--|-- bra.s 10dd2 <builtIn_hideCharacter+0x48>
	trimStack (&fun -> stack);
   10db2:	|  \-> moveq #24,d0
   10db4:	|      add.l 12(sp),d0
   10db8:	|      move.l d0,-(sp)
   10dba:	|      jsr 14be4 <trimStack>
   10dc0:	|      addq.l #4,sp
	setShown (FALSE, objectNumber);
   10dc2:	|      move.l (sp),d0
   10dc4:	|      move.l d0,-(sp)
   10dc6:	|      clr.l -(sp)
   10dc8:	|      jsr b728 <setShown>
   10dce:	|      addq.l #8,sp
	return BR_CONTINUE;
   10dd0:	|      moveq #2,d0
}
   10dd2:	\----> addq.l #4,sp
   10dd4:	       rts

00010dd6 <builtIn_showCharacter>:

builtIn(showCharacter)
{
   10dd6:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10dd8:	       movea.l 12(sp),a0
   10ddc:	       move.l 24(a0),d0
   10de0:	       move.l d0,-(sp)
   10de2:	       pea 7 <_start+0x7>
   10de6:	       move.l sp,d0
   10de8:	       addq.l #8,d0
   10dea:	       move.l d0,-(sp)
   10dec:	       jsr 14260 <getValueType>
   10df2:	       lea 12(sp),sp
   10df6:	       tst.w d0
   10df8:	   /-- bne.s 10dfe <builtIn_showCharacter+0x28>
   10dfa:	   |   moveq #1,d0
   10dfc:	/--|-- bra.s 10e20 <builtIn_showCharacter+0x4a>
	trimStack (&fun -> stack);
   10dfe:	|  \-> moveq #24,d0
   10e00:	|      add.l 12(sp),d0
   10e04:	|      move.l d0,-(sp)
   10e06:	|      jsr 14be4 <trimStack>
   10e0c:	|      addq.l #4,sp
	setShown (TRUE, objectNumber);
   10e0e:	|      move.l (sp),d0
   10e10:	|      move.l d0,-(sp)
   10e12:	|      pea 1 <_start+0x1>
   10e16:	|      jsr b728 <setShown>
   10e1c:	|      addq.l #8,sp
	return BR_CONTINUE;
   10e1e:	|      moveq #2,d0
}
   10e20:	\----> addq.l #4,sp
   10e22:	       rts

00010e24 <builtIn_removeAllCharacters>:

builtIn(removeAllCharacters)
{
	UNUSEDALL
	killSpeechTimers ();
   10e24:	jsr 5adc <killSpeechTimers>
	killMostPeople ();
   10e2a:	jsr a560 <killMostPeople>
	return BR_CONTINUE;
   10e30:	moveq #2,d0
}
   10e32:	rts

00010e34 <builtIn_setCharacterDrawMode>:

builtIn(setCharacterDrawMode)
{
   10e34:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10e36:	       movea.l 16(sp),a0
   10e3a:	       move.l 24(a0),d0
   10e3e:	       move.l d0,-(sp)
   10e40:	       pea 1 <_start+0x1>
   10e44:	       move.l sp,d0
   10e46:	       addq.l #8,d0
   10e48:	       move.l d0,-(sp)
   10e4a:	       jsr 14260 <getValueType>
   10e50:	       lea 12(sp),sp
   10e54:	       tst.w d0
   10e56:	   /-- bne.s 10e5c <builtIn_setCharacterDrawMode+0x28>
   10e58:	   |   moveq #1,d0
   10e5a:	/--|-- bra.s 10eb6 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   10e5c:	|  \-> moveq #24,d0
   10e5e:	|      add.l 16(sp),d0
   10e62:	|      move.l d0,-(sp)
   10e64:	|      jsr 14be4 <trimStack>
   10e6a:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10e6c:	|      movea.l 16(sp),a0
   10e70:	|      move.l 24(a0),d0
   10e74:	|      move.l d0,-(sp)
   10e76:	|      pea 7 <_start+0x7>
   10e7a:	|      moveq #12,d0
   10e7c:	|      add.l sp,d0
   10e7e:	|      move.l d0,-(sp)
   10e80:	|      jsr 14260 <getValueType>
   10e86:	|      lea 12(sp),sp
   10e8a:	|      tst.w d0
   10e8c:	|  /-- bne.s 10e92 <builtIn_setCharacterDrawMode+0x5e>
   10e8e:	|  |   moveq #1,d0
   10e90:	+--|-- bra.s 10eb6 <builtIn_setCharacterDrawMode+0x82>
	trimStack (&fun -> stack);
   10e92:	|  \-> moveq #24,d0
   10e94:	|      add.l 16(sp),d0
   10e98:	|      move.l d0,-(sp)
   10e9a:	|      jsr 14be4 <trimStack>
   10ea0:	|      addq.l #4,sp
	setDrawMode (di, obj);
   10ea2:	|      move.l 4(sp),d1
   10ea6:	|      move.l (sp),d0
   10ea8:	|      move.l d1,-(sp)
   10eaa:	|      move.l d0,-(sp)
   10eac:	|      jsr b066 <setDrawMode>
   10eb2:	|      addq.l #8,sp
	return BR_CONTINUE;
   10eb4:	|      moveq #2,d0
}
   10eb6:	\----> addq.l #8,sp
   10eb8:	       rts

00010eba <builtIn_setCharacterTransparency>:

builtIn(setCharacterTransparency)
{
	UNUSEDALL
	KPrintF("setCharacterTransparency: Not implemented on Amiga");
   10eba:	pea 19554 <graphics.c.1c13408a+0x316>
   10ec0:	jsr 16c5e <KPrintF>
   10ec6:	addq.l #4,sp
	return BR_CONTINUE;
   10ec8:	moveq #2,d0
}
   10eca:	rts

00010ecc <builtIn_setCharacterColourise>:

builtIn(setCharacterColourise)
{
	UNUSEDALL
	KPrintF("setCharacterColourise: Currently not implemented on Amiga");
   10ecc:	pea 19587 <graphics.c.1c13408a+0x349>
   10ed2:	jsr 16c5e <KPrintF>
   10ed8:	addq.l #4,sp
	if (! getValueType(&r, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
	trimStack (&fun -> stack);
	setPersonColourise (obj, r, g, b, mix);*/
	return BR_CONTINUE;
   10eda:	moveq #2,d0
}
   10edc:	rts

00010ede <builtIn_setScale>:

builtIn(setScale)
{
   10ede:	       subq.l #8,sp
	UNUSEDALL
	int val1, val2;
	if (! getValueType(&val2, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10ee0:	       movea.l 16(sp),a0
   10ee4:	       move.l 24(a0),d0
   10ee8:	       move.l d0,-(sp)
   10eea:	       pea 1 <_start+0x1>
   10eee:	       move.l sp,d0
   10ef0:	       addq.l #8,d0
   10ef2:	       move.l d0,-(sp)
   10ef4:	       jsr 14260 <getValueType>
   10efa:	       lea 12(sp),sp
   10efe:	       tst.w d0
   10f00:	   /-- bne.s 10f06 <builtIn_setScale+0x28>
   10f02:	   |   moveq #1,d0
   10f04:	/--|-- bra.s 10f68 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   10f06:	|  \-> moveq #24,d0
   10f08:	|      add.l 16(sp),d0
   10f0c:	|      move.l d0,-(sp)
   10f0e:	|      jsr 14be4 <trimStack>
   10f14:	|      addq.l #4,sp
	if (! getValueType(&val1, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   10f16:	|      movea.l 16(sp),a0
   10f1a:	|      move.l 24(a0),d0
   10f1e:	|      move.l d0,-(sp)
   10f20:	|      pea 1 <_start+0x1>
   10f24:	|      moveq #12,d0
   10f26:	|      add.l sp,d0
   10f28:	|      move.l d0,-(sp)
   10f2a:	|      jsr 14260 <getValueType>
   10f30:	|      lea 12(sp),sp
   10f34:	|      tst.w d0
   10f36:	|  /-- bne.s 10f3c <builtIn_setScale+0x5e>
   10f38:	|  |   moveq #1,d0
   10f3a:	+--|-- bra.s 10f68 <builtIn_setScale+0x8a>
	trimStack (&fun -> stack);
   10f3c:	|  \-> moveq #24,d0
   10f3e:	|      add.l 16(sp),d0
   10f42:	|      move.l d0,-(sp)
   10f44:	|      jsr 14be4 <trimStack>
   10f4a:	|      addq.l #4,sp
	setScale ((short int) val1, (short int) val2);
   10f4c:	|      move.l (sp),d0
   10f4e:	|      move.l d0,d0
   10f50:	|      movea.w d0,a1
   10f52:	|      move.l 4(sp),d0
   10f56:	|      move.l d0,d0
   10f58:	|      movea.w d0,a0
   10f5a:	|      move.l a1,-(sp)
   10f5c:	|      move.l a0,-(sp)
   10f5e:	|      jsr b700 <setScale>
   10f64:	|      addq.l #8,sp
	return BR_CONTINUE;
   10f66:	|      moveq #2,d0
}
   10f68:	\----> addq.l #8,sp
   10f6a:	       rts

00010f6c <builtIn_stopCharacter>:

builtIn(stopCharacter)
{
   10f6c:	       subq.l #4,sp
	UNUSEDALL
	int obj;
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   10f6e:	       movea.l 12(sp),a0
   10f72:	       move.l 24(a0),d0
   10f76:	       move.l d0,-(sp)
   10f78:	       pea 7 <_start+0x7>
   10f7c:	       move.l sp,d0
   10f7e:	       addq.l #8,d0
   10f80:	       move.l d0,-(sp)
   10f82:	       jsr 14260 <getValueType>
   10f88:	       lea 12(sp),sp
   10f8c:	       tst.w d0
   10f8e:	   /-- bne.s 10f94 <builtIn_stopCharacter+0x28>
   10f90:	   |   moveq #1,d0
   10f92:	/--|-- bra.s 10fcc <builtIn_stopCharacter+0x60>
	trimStack (&fun -> stack);
   10f94:	|  \-> moveq #24,d0
   10f96:	|      add.l 12(sp),d0
   10f9a:	|      move.l d0,-(sp)
   10f9c:	|      jsr 14be4 <trimStack>
   10fa2:	|      addq.l #4,sp

	// Return value
	setVariable (&fun -> reg, SVT_INT, stopPerson (obj));
   10fa4:	|      move.l (sp),d0
   10fa6:	|      move.l d0,-(sp)
   10fa8:	|      jsr b834 <stopPerson>
   10fae:	|      addq.l #4,sp
   10fb0:	|      movea.w d0,a0
   10fb2:	|      moveq #28,d0
   10fb4:	|      add.l 12(sp),d0
   10fb8:	|      move.l a0,-(sp)
   10fba:	|      pea 1 <_start+0x1>
   10fbe:	|      move.l d0,-(sp)
   10fc0:	|      jsr 14b52 <setVariable>
   10fc6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   10fca:	|      moveq #2,d0
}
   10fcc:	\----> addq.l #4,sp
   10fce:	       rts

00010fd0 <builtIn_pasteCharacter>:
		fixScaleSprite (thisPerson -> x, thisPerson -> y, myAnim -> theSprites -> bank.sprites[abs (fNum)], myAnim -> theSprites -> bank.myPalette, thisPerson, 0, 0, fNum < 0);
		setVariable (&fun -> reg, SVT_INT, 1);
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
	} Todo: Amigize this*/
	KPrintF("Not implemented yet for Amiga");
   10fd0:	pea 195c1 <graphics.c.1c13408a+0x383>
   10fd6:	jsr 16c5e <KPrintF>
   10fdc:	addq.l #4,sp
	return BR_CONTINUE;
   10fde:	moveq #2,d0
}
   10fe0:	rts

00010fe2 <builtIn_animate>:

builtIn(animate)
{
   10fe2:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct personaAnimation * pp = getAnimationFromVar (&(fun -> stack -> thisVar));
   10fe4:	       movea.l 16(sp),a0
   10fe8:	       move.l 24(a0),d0
   10fec:	       move.l d0,-(sp)
   10fee:	       jsr 14738 <getAnimationFromVar>
   10ff4:	       addq.l #4,sp
   10ff6:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   10ffa:	   /-- bne.s 11000 <builtIn_animate+0x1e>
   10ffc:	   |   moveq #1,d0
   10ffe:	/--|-- bra.s 1107e <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11000:	|  \-> moveq #24,d0
   11002:	|      add.l 16(sp),d0
   11006:	|      move.l d0,-(sp)
   11008:	|      jsr 14be4 <trimStack>
   1100e:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11010:	|      movea.l 16(sp),a0
   11014:	|      move.l 24(a0),d0
   11018:	|      move.l d0,-(sp)
   1101a:	|      pea 7 <_start+0x7>
   1101e:	|      move.l sp,d0
   11020:	|      addq.l #8,d0
   11022:	|      move.l d0,-(sp)
   11024:	|      jsr 14260 <getValueType>
   1102a:	|      lea 12(sp),sp
   1102e:	|      tst.w d0
   11030:	|  /-- bne.s 11036 <builtIn_animate+0x54>
   11032:	|  |   moveq #1,d0
   11034:	+--|-- bra.s 1107e <builtIn_animate+0x9c>
	trimStack (&fun -> stack);
   11036:	|  \-> moveq #24,d0
   11038:	|      add.l 16(sp),d0
   1103c:	|      move.l d0,-(sp)
   1103e:	|      jsr 14be4 <trimStack>
   11044:	|      addq.l #4,sp
	animatePerson (obj, pp);
   11046:	|      move.l (sp),d0
   11048:	|      move.l 4(sp),-(sp)
   1104c:	|      move.l d0,-(sp)
   1104e:	|      jsr 8f64 <animatePerson>
   11054:	|      addq.l #8,sp
	setVariable (&fun -> reg, SVT_INT, timeForAnim (pp));
   11056:	|      move.l 4(sp),-(sp)
   1105a:	|      jsr b888 <timeForAnim>
   11060:	|      addq.l #4,sp
   11062:	|      move.l d0,d1
   11064:	|      moveq #28,d0
   11066:	|      add.l 16(sp),d0
   1106a:	|      move.l d1,-(sp)
   1106c:	|      pea 1 <_start+0x1>
   11070:	|      move.l d0,-(sp)
   11072:	|      jsr 14b52 <setVariable>
   11078:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1107c:	|      moveq #2,d0
}
   1107e:	\----> addq.l #8,sp
   11080:	       rts

00011082 <builtIn_setCostume>:

builtIn(setCostume)
{
   11082:	       subq.l #8,sp
	UNUSEDALL
	int obj;
	struct persona * pp = getCostumeFromVar(&(fun -> stack -> thisVar));
   11084:	       movea.l 16(sp),a0
   11088:	       move.l 24(a0),d0
   1108c:	       move.l d0,-(sp)
   1108e:	       jsr 13f0c <getCostumeFromVar>
   11094:	       addq.l #4,sp
   11096:	       move.l d0,4(sp)
	if (pp == NULL) return BR_ERROR;
   1109a:	   /-- bne.s 110a0 <builtIn_setCostume+0x1e>
   1109c:	   |   moveq #1,d0
   1109e:	/--|-- bra.s 110f8 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   110a0:	|  \-> moveq #24,d0
   110a2:	|      add.l 16(sp),d0
   110a6:	|      move.l d0,-(sp)
   110a8:	|      jsr 14be4 <trimStack>
   110ae:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   110b0:	|      movea.l 16(sp),a0
   110b4:	|      move.l 24(a0),d0
   110b8:	|      move.l d0,-(sp)
   110ba:	|      pea 7 <_start+0x7>
   110be:	|      move.l sp,d0
   110c0:	|      addq.l #8,d0
   110c2:	|      move.l d0,-(sp)
   110c4:	|      jsr 14260 <getValueType>
   110ca:	|      lea 12(sp),sp
   110ce:	|      tst.w d0
   110d0:	|  /-- bne.s 110d6 <builtIn_setCostume+0x54>
   110d2:	|  |   moveq #1,d0
   110d4:	+--|-- bra.s 110f8 <builtIn_setCostume+0x76>
	trimStack (&fun -> stack);
   110d6:	|  \-> moveq #24,d0
   110d8:	|      add.l 16(sp),d0
   110dc:	|      move.l d0,-(sp)
   110de:	|      jsr 14be4 <trimStack>
   110e4:	|      addq.l #4,sp
	animatePersonUsingPersona(obj, pp);
   110e6:	|      move.l (sp),d0
   110e8:	|      move.l 4(sp),-(sp)
   110ec:	|      move.l d0,-(sp)
   110ee:	|      jsr 8fae <animatePersonUsingPersona>
   110f4:	|      addq.l #8,sp
	return BR_CONTINUE;
   110f6:	|      moveq #2,d0
}
   110f8:	\----> addq.l #8,sp
   110fa:	       rts

000110fc <builtIn_floatCharacter>:

builtIn(floatCharacter)
{
   110fc:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   110fe:	       movea.l 16(sp),a0
   11102:	       move.l 24(a0),d0
   11106:	       move.l d0,-(sp)
   11108:	       pea 1 <_start+0x1>
   1110c:	       move.l sp,d0
   1110e:	       addq.l #8,d0
   11110:	       move.l d0,-(sp)
   11112:	       jsr 14260 <getValueType>
   11118:	       lea 12(sp),sp
   1111c:	       tst.w d0
   1111e:	   /-- bne.s 11124 <builtIn_floatCharacter+0x28>
   11120:	   |   moveq #1,d0
   11122:	/--|-- bra.s 11198 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   11124:	|  \-> moveq #24,d0
   11126:	|      add.l 16(sp),d0
   1112a:	|      move.l d0,-(sp)
   1112c:	|      jsr 14be4 <trimStack>
   11132:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11134:	|      movea.l 16(sp),a0
   11138:	|      move.l 24(a0),d0
   1113c:	|      move.l d0,-(sp)
   1113e:	|      pea 7 <_start+0x7>
   11142:	|      moveq #12,d0
   11144:	|      add.l sp,d0
   11146:	|      move.l d0,-(sp)
   11148:	|      jsr 14260 <getValueType>
   1114e:	|      lea 12(sp),sp
   11152:	|      tst.w d0
   11154:	|  /-- bne.s 1115a <builtIn_floatCharacter+0x5e>
   11156:	|  |   moveq #1,d0
   11158:	+--|-- bra.s 11198 <builtIn_floatCharacter+0x9c>
	trimStack (&fun -> stack);
   1115a:	|  \-> moveq #24,d0
   1115c:	|      add.l 16(sp),d0
   11160:	|      move.l d0,-(sp)
   11162:	|      jsr 14be4 <trimStack>
   11168:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, floatCharacter (di, obj));
   1116a:	|      move.l 4(sp),d1
   1116e:	|      move.l (sp),d0
   11170:	|      move.l d1,-(sp)
   11172:	|      move.l d0,-(sp)
   11174:	|      jsr a122 <floatCharacter>
   1117a:	|      addq.l #8,sp
   1117c:	|      movea.w d0,a0
   1117e:	|      moveq #28,d0
   11180:	|      add.l 16(sp),d0
   11184:	|      move.l a0,-(sp)
   11186:	|      pea 1 <_start+0x1>
   1118a:	|      move.l d0,-(sp)
   1118c:	|      jsr 14b52 <setVariable>
   11192:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11196:	|      moveq #2,d0
}
   11198:	\----> addq.l #8,sp
   1119a:	       rts

0001119c <builtIn_setCharacterWalkSpeed>:

builtIn(setCharacterWalkSpeed)
{
   1119c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1119e:	       movea.l 16(sp),a0
   111a2:	       move.l 24(a0),d0
   111a6:	       move.l d0,-(sp)
   111a8:	       pea 1 <_start+0x1>
   111ac:	       move.l sp,d0
   111ae:	       addq.l #8,d0
   111b0:	       move.l d0,-(sp)
   111b2:	       jsr 14260 <getValueType>
   111b8:	       lea 12(sp),sp
   111bc:	       tst.w d0
   111be:	   /-- bne.s 111c4 <builtIn_setCharacterWalkSpeed+0x28>
   111c0:	   |   moveq #1,d0
   111c2:	/--|-- bra.s 11238 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   111c4:	|  \-> moveq #24,d0
   111c6:	|      add.l 16(sp),d0
   111ca:	|      move.l d0,-(sp)
   111cc:	|      jsr 14be4 <trimStack>
   111d2:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   111d4:	|      movea.l 16(sp),a0
   111d8:	|      move.l 24(a0),d0
   111dc:	|      move.l d0,-(sp)
   111de:	|      pea 7 <_start+0x7>
   111e2:	|      moveq #12,d0
   111e4:	|      add.l sp,d0
   111e6:	|      move.l d0,-(sp)
   111e8:	|      jsr 14260 <getValueType>
   111ee:	|      lea 12(sp),sp
   111f2:	|      tst.w d0
   111f4:	|  /-- bne.s 111fa <builtIn_setCharacterWalkSpeed+0x5e>
   111f6:	|  |   moveq #1,d0
   111f8:	+--|-- bra.s 11238 <builtIn_setCharacterWalkSpeed+0x9c>
	trimStack (&fun -> stack);
   111fa:	|  \-> moveq #24,d0
   111fc:	|      add.l 16(sp),d0
   11200:	|      move.l d0,-(sp)
   11202:	|      jsr 14be4 <trimStack>
   11208:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setCharacterWalkSpeed (di, obj));
   1120a:	|      move.l 4(sp),d1
   1120e:	|      move.l (sp),d0
   11210:	|      move.l d1,-(sp)
   11212:	|      move.l d0,-(sp)
   11214:	|      jsr b69c <setCharacterWalkSpeed>
   1121a:	|      addq.l #8,sp
   1121c:	|      movea.w d0,a0
   1121e:	|      moveq #28,d0
   11220:	|      add.l 16(sp),d0
   11224:	|      move.l a0,-(sp)
   11226:	|      pea 1 <_start+0x1>
   1122a:	|      move.l d0,-(sp)
   1122c:	|      jsr 14b52 <setVariable>
   11232:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11236:	|      moveq #2,d0
}
   11238:	\----> addq.l #8,sp
   1123a:	       rts

0001123c <builtIn_turnCharacter>:

builtIn(turnCharacter)
{
   1123c:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1123e:	       movea.l 16(sp),a0
   11242:	       move.l 24(a0),d0
   11246:	       move.l d0,-(sp)
   11248:	       pea 1 <_start+0x1>
   1124c:	       move.l sp,d0
   1124e:	       addq.l #8,d0
   11250:	       move.l d0,-(sp)
   11252:	       jsr 14260 <getValueType>
   11258:	       lea 12(sp),sp
   1125c:	       tst.w d0
   1125e:	   /-- bne.s 11264 <builtIn_turnCharacter+0x28>
   11260:	   |   moveq #1,d0
   11262:	/--|-- bra.s 112d8 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   11264:	|  \-> moveq #24,d0
   11266:	|      add.l 16(sp),d0
   1126a:	|      move.l d0,-(sp)
   1126c:	|      jsr 14be4 <trimStack>
   11272:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11274:	|      movea.l 16(sp),a0
   11278:	|      move.l 24(a0),d0
   1127c:	|      move.l d0,-(sp)
   1127e:	|      pea 7 <_start+0x7>
   11282:	|      moveq #12,d0
   11284:	|      add.l sp,d0
   11286:	|      move.l d0,-(sp)
   11288:	|      jsr 14260 <getValueType>
   1128e:	|      lea 12(sp),sp
   11292:	|      tst.w d0
   11294:	|  /-- bne.s 1129a <builtIn_turnCharacter+0x5e>
   11296:	|  |   moveq #1,d0
   11298:	+--|-- bra.s 112d8 <builtIn_turnCharacter+0x9c>
	trimStack (&fun -> stack);
   1129a:	|  \-> moveq #24,d0
   1129c:	|      add.l 16(sp),d0
   112a0:	|      move.l d0,-(sp)
   112a2:	|      jsr 14be4 <trimStack>
   112a8:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, turnPersonToFace (obj, di));
   112aa:	|      move.l (sp),d1
   112ac:	|      move.l 4(sp),d0
   112b0:	|      move.l d1,-(sp)
   112b2:	|      move.l d0,-(sp)
   112b4:	|      jsr b940 <turnPersonToFace>
   112ba:	|      addq.l #8,sp
   112bc:	|      movea.w d0,a0
   112be:	|      moveq #28,d0
   112c0:	|      add.l 16(sp),d0
   112c4:	|      move.l a0,-(sp)
   112c6:	|      pea 1 <_start+0x1>
   112ca:	|      move.l d0,-(sp)
   112cc:	|      jsr 14b52 <setVariable>
   112d2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   112d6:	|      moveq #2,d0
}
   112d8:	\----> addq.l #8,sp
   112da:	       rts

000112dc <builtIn_setCharacterExtra>:

builtIn(setCharacterExtra)
{
   112dc:	       subq.l #8,sp
	UNUSEDALL
	int obj, di;
	if (! getValueType(&di, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   112de:	       movea.l 16(sp),a0
   112e2:	       move.l 24(a0),d0
   112e6:	       move.l d0,-(sp)
   112e8:	       pea 1 <_start+0x1>
   112ec:	       move.l sp,d0
   112ee:	       addq.l #8,d0
   112f0:	       move.l d0,-(sp)
   112f2:	       jsr 14260 <getValueType>
   112f8:	       lea 12(sp),sp
   112fc:	       tst.w d0
   112fe:	   /-- bne.s 11304 <builtIn_setCharacterExtra+0x28>
   11300:	   |   moveq #1,d0
   11302:	/--|-- bra.s 11378 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   11304:	|  \-> moveq #24,d0
   11306:	|      add.l 16(sp),d0
   1130a:	|      move.l d0,-(sp)
   1130c:	|      jsr 14be4 <trimStack>
   11312:	|      addq.l #4,sp
	if (! getValueType(&obj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11314:	|      movea.l 16(sp),a0
   11318:	|      move.l 24(a0),d0
   1131c:	|      move.l d0,-(sp)
   1131e:	|      pea 7 <_start+0x7>
   11322:	|      moveq #12,d0
   11324:	|      add.l sp,d0
   11326:	|      move.l d0,-(sp)
   11328:	|      jsr 14260 <getValueType>
   1132e:	|      lea 12(sp),sp
   11332:	|      tst.w d0
   11334:	|  /-- bne.s 1133a <builtIn_setCharacterExtra+0x5e>
   11336:	|  |   moveq #1,d0
   11338:	+--|-- bra.s 11378 <builtIn_setCharacterExtra+0x9c>
	trimStack (&fun -> stack);
   1133a:	|  \-> moveq #24,d0
   1133c:	|      add.l 16(sp),d0
   11340:	|      move.l d0,-(sp)
   11342:	|      jsr 14be4 <trimStack>
   11348:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, setPersonExtra (obj, di));
   1134a:	|      move.l (sp),d1
   1134c:	|      move.l 4(sp),d0
   11350:	|      move.l d1,-(sp)
   11352:	|      move.l d0,-(sp)
   11354:	|      jsr b6ca <setPersonExtra>
   1135a:	|      addq.l #8,sp
   1135c:	|      movea.w d0,a0
   1135e:	|      moveq #28,d0
   11360:	|      add.l 16(sp),d0
   11364:	|      move.l a0,-(sp)
   11366:	|      pea 1 <_start+0x1>
   1136a:	|      move.l d0,-(sp)
   1136c:	|      jsr 14b52 <setVariable>
   11372:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11376:	|      moveq #2,d0
}
   11378:	\----> addq.l #8,sp
   1137a:	       rts

0001137c <builtIn_removeCharacter>:

builtIn(removeCharacter)
{	
   1137c:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1137e:	       movea.l 12(sp),a0
   11382:	       move.l 24(a0),d0
   11386:	       move.l d0,-(sp)
   11388:	       pea 7 <_start+0x7>
   1138c:	       move.l sp,d0
   1138e:	       addq.l #8,d0
   11390:	       move.l d0,-(sp)
   11392:	       jsr 14260 <getValueType>
   11398:	       lea 12(sp),sp
   1139c:	       tst.w d0
   1139e:	   /-- bne.s 113a4 <builtIn_removeCharacter+0x28>
   113a0:	   |   moveq #1,d0
   113a2:	/--|-- bra.s 113c2 <builtIn_removeCharacter+0x46>
	trimStack (&fun -> stack);
   113a4:	|  \-> moveq #24,d0
   113a6:	|      add.l 12(sp),d0
   113aa:	|      move.l d0,-(sp)
   113ac:	|      jsr 14be4 <trimStack>
   113b2:	|      addq.l #4,sp
	removeOneCharacter (objectNumber);
   113b4:	|      move.l (sp),d0
   113b6:	|      move.l d0,-(sp)
   113b8:	|      jsr a8ca <removeOneCharacter>
   113be:	|      addq.l #4,sp
	return BR_CONTINUE;
   113c0:	|      moveq #2,d0
}
   113c2:	\----> addq.l #4,sp
   113c4:	       rts

000113c6 <moveChr>:

static enum builtReturn moveChr(int numParams, struct loadedFunction * fun, BOOL force, BOOL immediate)
{
   113c6:	                lea -28(sp),sp
   113ca:	                move.l d2,-(sp)
   113cc:	                move.l 44(sp),d1
   113d0:	                move.l 48(sp),d0
   113d4:	                move.w d1,d1
   113d6:	                move.w d1,6(sp)
   113da:	                move.w d0,d0
   113dc:	                move.w d0,4(sp)
	switch (numParams) {
   113e0:	                moveq #2,d0
   113e2:	                cmp.l 36(sp),d0
   113e6:	      /-------- beq.w 11528 <moveChr+0x162>
   113ea:	      |         moveq #3,d0
   113ec:	      |         cmp.l 36(sp),d0
   113f0:	/-----|-------- bne.w 1165c <moveChr+0x296>
		case 3:
		{
			int x, y, objectNumber;

			if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   113f4:	|     |         movea.l 40(sp),a0
   113f8:	|     |         move.l 24(a0),d0
   113fc:	|     |         move.l d0,-(sp)
   113fe:	|     |         pea 1 <_start+0x1>
   11402:	|     |         lea 20(sp),a0
   11406:	|     |         move.l a0,-(sp)
   11408:	|     |         jsr 14260 <getValueType>
   1140e:	|     |         lea 12(sp),sp
   11412:	|     |         tst.w d0
   11414:	|     |     /-- bne.s 1141c <moveChr+0x56>
   11416:	|     |     |   moveq #1,d0
   11418:	|  /--|-----|-- bra.w 1166c <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1141c:	|  |  |     \-> moveq #24,d0
   1141e:	|  |  |         add.l 40(sp),d0
   11422:	|  |  |         move.l d0,-(sp)
   11424:	|  |  |         jsr 14be4 <trimStack>
   1142a:	|  |  |         addq.l #4,sp
			if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1142c:	|  |  |         movea.l 40(sp),a0
   11430:	|  |  |         move.l 24(a0),d0
   11434:	|  |  |         move.l d0,-(sp)
   11436:	|  |  |         pea 1 <_start+0x1>
   1143a:	|  |  |         lea 24(sp),a0
   1143e:	|  |  |         move.l a0,-(sp)
   11440:	|  |  |         jsr 14260 <getValueType>
   11446:	|  |  |         lea 12(sp),sp
   1144a:	|  |  |         tst.w d0
   1144c:	|  |  |     /-- bne.s 11454 <moveChr+0x8e>
   1144e:	|  |  |     |   moveq #1,d0
   11450:	|  +--|-----|-- bra.w 1166c <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11454:	|  |  |     \-> moveq #24,d0
   11456:	|  |  |         add.l 40(sp),d0
   1145a:	|  |  |         move.l d0,-(sp)
   1145c:	|  |  |         jsr 14be4 <trimStack>
   11462:	|  |  |         addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11464:	|  |  |         movea.l 40(sp),a0
   11468:	|  |  |         move.l 24(a0),d0
   1146c:	|  |  |         move.l d0,-(sp)
   1146e:	|  |  |         pea 7 <_start+0x7>
   11472:	|  |  |         lea 16(sp),a0
   11476:	|  |  |         move.l a0,-(sp)
   11478:	|  |  |         jsr 14260 <getValueType>
   1147e:	|  |  |         lea 12(sp),sp
   11482:	|  |  |         tst.w d0
   11484:	|  |  |     /-- bne.s 1148c <moveChr+0xc6>
   11486:	|  |  |     |   moveq #1,d0
   11488:	|  +--|-----|-- bra.w 1166c <moveChr+0x2a6>
			trimStack (&fun -> stack);
   1148c:	|  |  |     \-> moveq #24,d0
   1148e:	|  |  |         add.l 40(sp),d0
   11492:	|  |  |         move.l d0,-(sp)
   11494:	|  |  |         jsr 14be4 <trimStack>
   1149a:	|  |  |         addq.l #4,sp

			if (force) {
   1149c:	|  |  |         tst.w 6(sp)
   114a0:	|  |  |     /-- beq.s 114d0 <moveChr+0x10a>
				if (forceWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   114a2:	|  |  |     |   movea.l 8(sp),a0
   114a6:	|  |  |     |   move.l 12(sp),d1
   114aa:	|  |  |     |   move.l 16(sp),d0
   114ae:	|  |  |     |   pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb57e6>
   114b2:	|  |  |     |   move.l 44(sp),-(sp)
   114b6:	|  |  |     |   move.l a0,-(sp)
   114b8:	|  |  |     |   move.l d1,-(sp)
   114ba:	|  |  |     |   move.l d0,-(sp)
   114bc:	|  |  |     |   jsr a146 <forceWalkingPerson>
   114c2:	|  |  |     |   lea 20(sp),sp
   114c6:	|  |  |     |   tst.w d0
   114c8:	|  |  |  /--|-- beq.s 11522 <moveChr+0x15c>
   114ca:	|  |  |  |  |   moveq #3,d0
   114cc:	|  +--|--|--|-- bra.w 1166c <moveChr+0x2a6>
			} else if (immediate) {
   114d0:	|  |  |  |  \-> tst.w 4(sp)
   114d4:	|  |  |  |  /-- beq.s 114f4 <moveChr+0x12e>
				jumpPerson (x, y, objectNumber);
   114d6:	|  |  |  |  |   movea.l 8(sp),a0
   114da:	|  |  |  |  |   move.l 12(sp),d1
   114de:	|  |  |  |  |   move.l 16(sp),d0
   114e2:	|  |  |  |  |   move.l a0,-(sp)
   114e4:	|  |  |  |  |   move.l d1,-(sp)
   114e6:	|  |  |  |  |   move.l d0,-(sp)
   114e8:	|  |  |  |  |   jsr a44e <jumpPerson>
   114ee:	|  |  |  |  |   lea 12(sp),sp
   114f2:	|  |  |  +--|-- bra.s 11522 <moveChr+0x15c>
			} else {
				if (makeWalkingPerson (x, y, objectNumber, fun, -1)) return BR_PAUSE;
   114f4:	|  |  |  |  \-> movea.l 8(sp),a0
   114f8:	|  |  |  |      move.l 12(sp),d1
   114fc:	|  |  |  |      move.l 16(sp),d0
   11500:	|  |  |  |      pea ffffffff <gcc8_c_support.c.cce2f5c3+0xfffb57e6>
   11504:	|  |  |  |      move.l 44(sp),-(sp)
   11508:	|  |  |  |      move.l a0,-(sp)
   1150a:	|  |  |  |      move.l d1,-(sp)
   1150c:	|  |  |  |      move.l d0,-(sp)
   1150e:	|  |  |  |      jsr a61e <makeWalkingPerson>
   11514:	|  |  |  |      lea 20(sp),sp
   11518:	|  |  |  |      tst.w d0
   1151a:	|  |  |  +----- beq.s 11522 <moveChr+0x15c>
   1151c:	|  |  |  |      moveq #3,d0
   1151e:	|  +--|--|----- bra.w 1166c <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11522:	|  |  |  \----> moveq #2,d0
   11524:	|  +--|-------- bra.w 1166c <moveChr+0x2a6>
		case 2:
		{
			int toObj, objectNumber;
			struct screenRegion * reggie;

			if (! getValueType(&toObj, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11528:	|  |  \-------> movea.l 40(sp),a0
   1152c:	|  |            move.l 24(a0),d0
   11530:	|  |            move.l d0,-(sp)
   11532:	|  |            pea 7 <_start+0x7>
   11536:	|  |            moveq #32,d0
   11538:	|  |            add.l sp,d0
   1153a:	|  |            move.l d0,-(sp)
   1153c:	|  |            jsr 14260 <getValueType>
   11542:	|  |            lea 12(sp),sp
   11546:	|  |            tst.w d0
   11548:	|  |        /-- bne.s 11550 <moveChr+0x18a>
   1154a:	|  |        |   moveq #1,d0
   1154c:	|  +--------|-- bra.w 1166c <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11550:	|  |        \-> moveq #24,d0
   11552:	|  |            add.l 40(sp),d0
   11556:	|  |            move.l d0,-(sp)
   11558:	|  |            jsr 14be4 <trimStack>
   1155e:	|  |            addq.l #4,sp
			if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11560:	|  |            movea.l 40(sp),a0
   11564:	|  |            move.l 24(a0),d0
   11568:	|  |            move.l d0,-(sp)
   1156a:	|  |            pea 7 <_start+0x7>
   1156e:	|  |            lea 28(sp),a0
   11572:	|  |            move.l a0,-(sp)
   11574:	|  |            jsr 14260 <getValueType>
   1157a:	|  |            lea 12(sp),sp
   1157e:	|  |            tst.w d0
   11580:	|  |        /-- bne.s 11588 <moveChr+0x1c2>
   11582:	|  |        |   moveq #1,d0
   11584:	|  +--------|-- bra.w 1166c <moveChr+0x2a6>
			trimStack (&fun -> stack);
   11588:	|  |        \-> moveq #24,d0
   1158a:	|  |            add.l 40(sp),d0
   1158e:	|  |            move.l d0,-(sp)
   11590:	|  |            jsr 14be4 <trimStack>
   11596:	|  |            addq.l #4,sp
			reggie = getRegionForObject (toObj);
   11598:	|  |            move.l 24(sp),d0
   1159c:	|  |            move.l d0,-(sp)
   1159e:	|  |            jsr 15480 <getRegionForObject>
   115a4:	|  |            addq.l #4,sp
   115a6:	|  |            move.l d0,28(sp)
			if (reggie == NULL) return BR_CONTINUE;
   115aa:	|  |        /-- bne.s 115b2 <moveChr+0x1ec>
   115ac:	|  |        |   moveq #2,d0
   115ae:	|  +--------|-- bra.w 1166c <moveChr+0x2a6>

			if (force)
   115b2:	|  |        \-> tst.w 6(sp)
   115b6:	|  |        /-- beq.s 115f2 <moveChr+0x22c>
			{
				if (forceWalkingPerson (reggie -> sX, reggie -> sY,	objectNumber, fun, reggie -> di)) return BR_PAUSE;
   115b8:	|  |        |   movea.l 28(sp),a0
   115bc:	|  |        |   move.l 24(a0),d2
   115c0:	|  |        |   movea.l 20(sp),a1
   115c4:	|  |        |   movea.l 28(sp),a0
   115c8:	|  |        |   move.l 20(a0),d1
   115cc:	|  |        |   movea.l 28(sp),a0
   115d0:	|  |        |   move.l 16(a0),d0
   115d4:	|  |        |   move.l d2,-(sp)
   115d6:	|  |        |   move.l 44(sp),-(sp)
   115da:	|  |        |   move.l a1,-(sp)
   115dc:	|  |        |   move.l d1,-(sp)
   115de:	|  |        |   move.l d0,-(sp)
   115e0:	|  |        |   jsr a146 <forceWalkingPerson>
   115e6:	|  |        |   lea 20(sp),sp
   115ea:	|  |        |   tst.w d0
   115ec:	|  |     /--|-- beq.s 11658 <moveChr+0x292>
   115ee:	|  |     |  |   moveq #3,d0
   115f0:	|  +-----|--|-- bra.s 1166c <moveChr+0x2a6>
			}
			else if (immediate)
   115f2:	|  |     |  \-> tst.w 4(sp)
   115f6:	|  |     |  /-- beq.s 1161e <moveChr+0x258>
			{
				jumpPerson (reggie -> sX, reggie -> sY,	objectNumber);
   115f8:	|  |     |  |   movea.l 20(sp),a1
   115fc:	|  |     |  |   movea.l 28(sp),a0
   11600:	|  |     |  |   move.l 20(a0),d1
   11604:	|  |     |  |   movea.l 28(sp),a0
   11608:	|  |     |  |   move.l 16(a0),d0
   1160c:	|  |     |  |   move.l a1,-(sp)
   1160e:	|  |     |  |   move.l d1,-(sp)
   11610:	|  |     |  |   move.l d0,-(sp)
   11612:	|  |     |  |   jsr a44e <jumpPerson>
   11618:	|  |     |  |   lea 12(sp),sp
   1161c:	|  |     +--|-- bra.s 11658 <moveChr+0x292>
			}
			else
			{
				if (makeWalkingPerson (reggie -> sX, reggie -> sY, objectNumber, fun, reggie -> di)) return BR_PAUSE;
   1161e:	|  |     |  \-> movea.l 28(sp),a0
   11622:	|  |     |      move.l 24(a0),d2
   11626:	|  |     |      movea.l 20(sp),a1
   1162a:	|  |     |      movea.l 28(sp),a0
   1162e:	|  |     |      move.l 20(a0),d1
   11632:	|  |     |      movea.l 28(sp),a0
   11636:	|  |     |      move.l 16(a0),d0
   1163a:	|  |     |      move.l d2,-(sp)
   1163c:	|  |     |      move.l 44(sp),-(sp)
   11640:	|  |     |      move.l a1,-(sp)
   11642:	|  |     |      move.l d1,-(sp)
   11644:	|  |     |      move.l d0,-(sp)
   11646:	|  |     |      jsr a61e <makeWalkingPerson>
   1164c:	|  |     |      lea 20(sp),sp
   11650:	|  |     |      tst.w d0
   11652:	|  |     +----- beq.s 11658 <moveChr+0x292>
   11654:	|  |     |      moveq #3,d0
   11656:	|  +-----|----- bra.s 1166c <moveChr+0x2a6>
			}
			return BR_CONTINUE;
   11658:	|  |     \----> moveq #2,d0
   1165a:	|  +----------- bra.s 1166c <moveChr+0x2a6>
		}

		default:
			KPrintF ("Built-in function must have either 2 or 3 parameters.");
   1165c:	\--|----------> pea 195df <graphics.c.1c13408a+0x3a1>
   11662:	   |            jsr 16c5e <KPrintF>
   11668:	   |            addq.l #4,sp
			return BR_ERROR;
   1166a:	   |            moveq #1,d0
	}
}
   1166c:	   \----------> move.l (sp)+,d2
   1166e:	                lea 28(sp),sp
   11672:	                rts

00011674 <builtIn_moveCharacter>:

builtIn(moveCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, FALSE);
   11674:	clr.l -(sp)
   11676:	clr.l -(sp)
   11678:	move.l 16(sp),-(sp)
   1167c:	move.l 16(sp),-(sp)
   11680:	jsr 113c6 <moveChr>
   11686:	lea 16(sp),sp
}
   1168a:	rts

0001168c <builtIn_forceCharacter>:

builtIn(forceCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, TRUE, FALSE);
   1168c:	clr.l -(sp)
   1168e:	pea 1 <_start+0x1>
   11692:	move.l 16(sp),-(sp)
   11696:	move.l 16(sp),-(sp)
   1169a:	jsr 113c6 <moveChr>
   116a0:	lea 16(sp),sp
}
   116a4:	rts

000116a6 <builtIn_jumpCharacter>:

builtIn(jumpCharacter)
{
	UNUSEDALL
	return moveChr(numParams, fun, FALSE, TRUE);
   116a6:	pea 1 <_start+0x1>
   116aa:	clr.l -(sp)
   116ac:	move.l 16(sp),-(sp)
   116b0:	move.l 16(sp),-(sp)
   116b4:	jsr 113c6 <moveChr>
   116ba:	lea 16(sp),sp
}
   116be:	rts

000116c0 <builtIn_clearStatus>:

builtIn(clearStatus)
{
	UNUSEDALL
	clearStatusBar ();
   116c0:	jsr 71c8 <clearStatusBar>
	return BR_CONTINUE;
   116c6:	moveq #2,d0
}
   116c8:	rts

000116ca <builtIn_removeLastStatus>:

builtIn(removeLastStatus)
{
	UNUSEDALL
	killLastStatus ();
   116ca:	jsr 7270 <killLastStatus>
	return BR_CONTINUE;
   116d0:	moveq #2,d0
}
   116d2:	rts

000116d4 <builtIn_addStatus>:

builtIn(addStatus)
{
	UNUSEDALL
	addStatusBar ();
   116d4:	jsr 715e <addStatusBar>
	return BR_CONTINUE;
   116da:	moveq #2,d0
}
   116dc:	rts

000116de <builtIn_statusText>:

builtIn(statusText)
{
   116de:	       subq.l #8,sp
   116e0:	       move.l a6,-(sp)
	UNUSEDALL
	char * newText = getTextFromAnyVar(&(fun->stack->thisVar));
   116e2:	       movea.l 20(sp),a0
   116e6:	       move.l 24(a0),d0
   116ea:	       move.l d0,-(sp)
   116ec:	       jsr 14836 <getTextFromAnyVar>
   116f2:	       addq.l #4,sp
   116f4:	       move.l d0,8(sp)
	if (!newText) return BR_ERROR;
   116f8:	   /-- bne.s 116fe <builtIn_statusText+0x20>
   116fa:	   |   moveq #1,d0
   116fc:	/--|-- bra.s 11732 <builtIn_statusText+0x54>
	trimStack(&fun->stack);
   116fe:	|  \-> moveq #24,d0
   11700:	|      add.l 20(sp),d0
   11704:	|      move.l d0,-(sp)
   11706:	|      jsr 14be4 <trimStack>
   1170c:	|      addq.l #4,sp
	setStatusBar(newText);
   1170e:	|      move.l 8(sp),-(sp)
   11712:	|      jsr 74f0 <setStatusBar>
   11718:	|      addq.l #4,sp
	FreeVec(newText);
   1171a:	|      move.l 8(sp),4(sp)
   11720:	|      move.l 1a7a4 <SysBase>,d0
   11726:	|      movea.l d0,a6
   11728:	|      movea.l 4(sp),a1
   1172c:	|      jsr -690(a6)
	return BR_CONTINUE;
   11730:	|      moveq #2,d0
}
   11732:	\----> movea.l (sp)+,a6
   11734:	       addq.l #8,sp
   11736:	       rts

00011738 <builtIn_lightStatus>:

builtIn(lightStatus)
{
   11738:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1173a:	       movea.l 12(sp),a0
   1173e:	       move.l 24(a0),d0
   11742:	       move.l d0,-(sp)
   11744:	       pea 1 <_start+0x1>
   11748:	       move.l sp,d0
   1174a:	       addq.l #8,d0
   1174c:	       move.l d0,-(sp)
   1174e:	       jsr 14260 <getValueType>
   11754:	       lea 12(sp),sp
   11758:	       tst.w d0
   1175a:	   /-- bne.s 11760 <builtIn_lightStatus+0x28>
   1175c:	   |   moveq #1,d0
   1175e:	/--|-- bra.s 1177e <builtIn_lightStatus+0x46>
	trimStack (&fun -> stack);
   11760:	|  \-> moveq #24,d0
   11762:	|      add.l 12(sp),d0
   11766:	|      move.l d0,-(sp)
   11768:	|      jsr 14be4 <trimStack>
   1176e:	|      addq.l #4,sp
	setLitStatus (val);
   11770:	|      move.l (sp),d0
   11772:	|      move.l d0,-(sp)
   11774:	|      jsr 74e0 <setLitStatus>
   1177a:	|      addq.l #4,sp
	return BR_CONTINUE;
   1177c:	|      moveq #2,d0
}
   1177e:	\----> addq.l #4,sp
   11780:	       rts

00011782 <builtIn_positionStatus>:

builtIn(positionStatus)
{
   11782:	       subq.l #8,sp
	UNUSEDALL
	int x, y;
	if (! getValueType(&y, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11784:	       movea.l 16(sp),a0
   11788:	       move.l 24(a0),d0
   1178c:	       move.l d0,-(sp)
   1178e:	       pea 1 <_start+0x1>
   11792:	       move.l sp,d0
   11794:	       addq.l #8,d0
   11796:	       move.l d0,-(sp)
   11798:	       jsr 14260 <getValueType>
   1179e:	       lea 12(sp),sp
   117a2:	       tst.w d0
   117a4:	   /-- bne.s 117aa <builtIn_positionStatus+0x28>
   117a6:	   |   moveq #1,d0
   117a8:	/--|-- bra.s 11804 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   117aa:	|  \-> moveq #24,d0
   117ac:	|      add.l 16(sp),d0
   117b0:	|      move.l d0,-(sp)
   117b2:	|      jsr 14be4 <trimStack>
   117b8:	|      addq.l #4,sp
	if (! getValueType(&x, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   117ba:	|      movea.l 16(sp),a0
   117be:	|      move.l 24(a0),d0
   117c2:	|      move.l d0,-(sp)
   117c4:	|      pea 1 <_start+0x1>
   117c8:	|      moveq #12,d0
   117ca:	|      add.l sp,d0
   117cc:	|      move.l d0,-(sp)
   117ce:	|      jsr 14260 <getValueType>
   117d4:	|      lea 12(sp),sp
   117d8:	|      tst.w d0
   117da:	|  /-- bne.s 117e0 <builtIn_positionStatus+0x5e>
   117dc:	|  |   moveq #1,d0
   117de:	+--|-- bra.s 11804 <builtIn_positionStatus+0x82>
	trimStack (&fun -> stack);
   117e0:	|  \-> moveq #24,d0
   117e2:	|      add.l 16(sp),d0
   117e6:	|      move.l d0,-(sp)
   117e8:	|      jsr 14be4 <trimStack>
   117ee:	|      addq.l #4,sp
	positionStatus (x, y);
   117f0:	|      move.l (sp),d1
   117f2:	|      move.l 4(sp),d0
   117f6:	|      move.l d1,-(sp)
   117f8:	|      move.l d0,-(sp)
   117fa:	|      jsr 72d2 <positionStatus>
   11800:	|      addq.l #8,sp
	return BR_CONTINUE;
   11802:	|      moveq #2,d0
}
   11804:	\----> addq.l #8,sp
   11806:	       rts

00011808 <builtIn_alignStatus>:

builtIn(alignStatus)
{
   11808:	       subq.l #4,sp
	UNUSEDALL
	int val;
	if (! getValueType(&val, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1180a:	       movea.l 12(sp),a0
   1180e:	       move.l 24(a0),d0
   11812:	       move.l d0,-(sp)
   11814:	       pea 1 <_start+0x1>
   11818:	       move.l sp,d0
   1181a:	       addq.l #8,d0
   1181c:	       move.l d0,-(sp)
   1181e:	       jsr 14260 <getValueType>
   11824:	       lea 12(sp),sp
   11828:	       tst.w d0
   1182a:	   /-- bne.s 11830 <builtIn_alignStatus+0x28>
   1182c:	   |   moveq #1,d0
   1182e:	/--|-- bra.s 11850 <builtIn_alignStatus+0x48>
	trimStack (&fun -> stack);
   11830:	|  \-> moveq #24,d0
   11832:	|      add.l 12(sp),d0
   11836:	|      move.l d0,-(sp)
   11838:	|      jsr 14be4 <trimStack>
   1183e:	|      addq.l #4,sp
	nowStatus -> alignStatus = (short) val;
   11840:	|      move.l (sp),d0
   11842:	|      movea.l 1a12a <nowStatus>,a0
   11848:	|      move.l d0,d0
   1184a:	|      move.w d0,4(a0)
	return BR_CONTINUE;
   1184e:	|      moveq #2,d0
}
   11850:	\----> addq.l #4,sp
   11852:	       rts

00011854 <getFuncNumForCallback>:

static BOOL getFuncNumForCallback(int numParams, struct loadedFunction * fun, int *functionNum)
{
	switch (numParams) {
   11854:	             tst.l 4(sp)
   11858:	      /----- beq.s 11864 <getFuncNumForCallback+0x10>
   1185a:	      |      moveq #1,d0
   1185c:	      |      cmp.l 4(sp),d0
   11860:	      |  /-- beq.s 1186a <getFuncNumForCallback+0x16>
   11862:	   /--|--|-- bra.s 118a0 <getFuncNumForCallback+0x4c>
		case 0:
			functionNum = 0;
   11864:	   |  \--|-> clr.l 12(sp)
			break;
   11868:	/--|-----|-- bra.s 118b2 <getFuncNumForCallback+0x5e>

		case 1:
			if (! getValueType(functionNum, SVT_FUNC,&fun -> stack -> thisVar)) return FALSE;
   1186a:	|  |     \-> movea.l 8(sp),a0
   1186e:	|  |         move.l 24(a0),d0
   11872:	|  |         move.l d0,-(sp)
   11874:	|  |         pea 2 <_start+0x2>
   11878:	|  |         move.l 20(sp),-(sp)
   1187c:	|  |         jsr 14260 <getValueType>
   11882:	|  |         lea 12(sp),sp
   11886:	|  |         tst.w d0
   11888:	|  |     /-- bne.s 1188e <getFuncNumForCallback+0x3a>
   1188a:	|  |     |   clr.w d0
   1188c:	|  |  /--|-- bra.s 118b4 <getFuncNumForCallback+0x60>
			trimStack (&fun -> stack);
   1188e:	|  |  |  \-> moveq #24,d0
   11890:	|  |  |      add.l 8(sp),d0
   11894:	|  |  |      move.l d0,-(sp)
   11896:	|  |  |      jsr 14be4 <trimStack>
   1189c:	|  |  |      addq.l #4,sp
			break;
   1189e:	+--|--|----- bra.s 118b2 <getFuncNumForCallback+0x5e>

		default:
			KPrintF ("Too many parameters.");
   118a0:	|  \--|----> pea 19615 <graphics.c.1c13408a+0x3d7>
   118a6:	|     |      jsr 16c5e <KPrintF>
   118ac:	|     |      addq.l #4,sp
			return FALSE;
   118ae:	|     |      clr.w d0
   118b0:	|     +----- bra.s 118b4 <getFuncNumForCallback+0x60>
	}
	return TRUE;
   118b2:	\-----|----> moveq #1,d0
}
   118b4:	      \----> rts

000118b6 <builtIn_onLeftMouse>:

builtIn (onLeftMouse)
{
   118b6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   118b8:	       move.l sp,d0
   118ba:	       move.l d0,-(sp)
   118bc:	       move.l 16(sp),-(sp)
   118c0:	       move.l 16(sp),-(sp)
   118c4:	       jsr 11854 <getFuncNumForCallback>
   118ca:	       lea 12(sp),sp
   118ce:	       tst.w d0
   118d0:	/----- beq.s 118e0 <builtIn_onLeftMouse+0x2a>
	{
		currentEvents -> leftMouseFunction = functionNum;
   118d2:	|      movea.l 1a11c <currentEvents>,a0
   118d8:	|      move.l (sp),d0
   118da:	|      move.l d0,(a0)
		return BR_CONTINUE;
   118dc:	|      moveq #2,d0
   118de:	|  /-- bra.s 118e2 <builtIn_onLeftMouse+0x2c>
	}
	return BR_ERROR;
   118e0:	\--|-> moveq #1,d0
}
   118e2:	   \-> addq.l #4,sp
   118e4:	       rts

000118e6 <builtIn_onLeftMouseUp>:

builtIn (onLeftMouseUp)
{
   118e6:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   118e8:	       move.l sp,d0
   118ea:	       move.l d0,-(sp)
   118ec:	       move.l 16(sp),-(sp)
   118f0:	       move.l 16(sp),-(sp)
   118f4:	       jsr 11854 <getFuncNumForCallback>
   118fa:	       lea 12(sp),sp
   118fe:	       tst.w d0
   11900:	/----- beq.s 11912 <builtIn_onLeftMouseUp+0x2c>
	{
		currentEvents -> leftMouseUpFunction = functionNum;
   11902:	|      movea.l 1a11c <currentEvents>,a0
   11908:	|      move.l (sp),d0
   1190a:	|      move.l d0,4(a0)
		return BR_CONTINUE;
   1190e:	|      moveq #2,d0
   11910:	|  /-- bra.s 11914 <builtIn_onLeftMouseUp+0x2e>
	}
	return BR_ERROR;
   11912:	\--|-> moveq #1,d0
}
   11914:	   \-> addq.l #4,sp
   11916:	       rts

00011918 <builtIn_onRightMouse>:

builtIn (onRightMouse)
{
   11918:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1191a:	       move.l sp,d0
   1191c:	       move.l d0,-(sp)
   1191e:	       move.l 16(sp),-(sp)
   11922:	       move.l 16(sp),-(sp)
   11926:	       jsr 11854 <getFuncNumForCallback>
   1192c:	       lea 12(sp),sp
   11930:	       tst.w d0
   11932:	/----- beq.s 11944 <builtIn_onRightMouse+0x2c>
	{
		currentEvents -> rightMouseFunction = functionNum;
   11934:	|      movea.l 1a11c <currentEvents>,a0
   1193a:	|      move.l (sp),d0
   1193c:	|      move.l d0,8(a0)
		return BR_CONTINUE;
   11940:	|      moveq #2,d0
   11942:	|  /-- bra.s 11946 <builtIn_onRightMouse+0x2e>
	}
	return BR_ERROR;
   11944:	\--|-> moveq #1,d0
}
   11946:	   \-> addq.l #4,sp
   11948:	       rts

0001194a <builtIn_onRightMouseUp>:

builtIn (onRightMouseUp)
{
   1194a:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1194c:	       move.l sp,d0
   1194e:	       move.l d0,-(sp)
   11950:	       move.l 16(sp),-(sp)
   11954:	       move.l 16(sp),-(sp)
   11958:	       jsr 11854 <getFuncNumForCallback>
   1195e:	       lea 12(sp),sp
   11962:	       tst.w d0
   11964:	/----- beq.s 11976 <builtIn_onRightMouseUp+0x2c>
	{
		currentEvents -> rightMouseUpFunction = functionNum;
   11966:	|      movea.l 1a11c <currentEvents>,a0
   1196c:	|      move.l (sp),d0
   1196e:	|      move.l d0,12(a0)
		return BR_CONTINUE;
   11972:	|      moveq #2,d0
   11974:	|  /-- bra.s 11978 <builtIn_onRightMouseUp+0x2e>
	}
	return BR_ERROR;
   11976:	\--|-> moveq #1,d0
}
   11978:	   \-> addq.l #4,sp
   1197a:	       rts

0001197c <builtIn_onFocusChange>:

builtIn (onFocusChange)
{
   1197c:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   1197e:	       move.l sp,d0
   11980:	       move.l d0,-(sp)
   11982:	       move.l 16(sp),-(sp)
   11986:	       move.l 16(sp),-(sp)
   1198a:	       jsr 11854 <getFuncNumForCallback>
   11990:	       lea 12(sp),sp
   11994:	       tst.w d0
   11996:	/----- beq.s 119a8 <builtIn_onFocusChange+0x2c>
	{
		currentEvents -> focusFunction = functionNum;
   11998:	|      movea.l 1a11c <currentEvents>,a0
   1199e:	|      move.l (sp),d0
   119a0:	|      move.l d0,20(a0)
		return BR_CONTINUE;
   119a4:	|      moveq #2,d0
   119a6:	|  /-- bra.s 119aa <builtIn_onFocusChange+0x2e>
	}
	return BR_ERROR;
   119a8:	\--|-> moveq #1,d0
}
   119aa:	   \-> addq.l #4,sp
   119ac:	       rts

000119ae <builtIn_onMoveMouse>:

builtIn (onMoveMouse)
{
   119ae:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   119b0:	       move.l sp,d0
   119b2:	       move.l d0,-(sp)
   119b4:	       move.l 16(sp),-(sp)
   119b8:	       move.l 16(sp),-(sp)
   119bc:	       jsr 11854 <getFuncNumForCallback>
   119c2:	       lea 12(sp),sp
   119c6:	       tst.w d0
   119c8:	/----- beq.s 119da <builtIn_onMoveMouse+0x2c>
	{
		currentEvents -> moveMouseFunction = functionNum;
   119ca:	|      movea.l 1a11c <currentEvents>,a0
   119d0:	|      move.l (sp),d0
   119d2:	|      move.l d0,16(a0)
		return BR_CONTINUE;
   119d6:	|      moveq #2,d0
   119d8:	|  /-- bra.s 119dc <builtIn_onMoveMouse+0x2e>
	}
	return BR_ERROR;
   119da:	\--|-> moveq #1,d0
}
   119dc:	   \-> addq.l #4,sp
   119de:	       rts

000119e0 <builtIn_onKeyboard>:

builtIn (onKeyboard)
{
   119e0:	       subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   119e2:	       move.l sp,d0
   119e4:	       move.l d0,-(sp)
   119e6:	       move.l 16(sp),-(sp)
   119ea:	       move.l 16(sp),-(sp)
   119ee:	       jsr 11854 <getFuncNumForCallback>
   119f4:	       lea 12(sp),sp
   119f8:	       tst.w d0
   119fa:	/----- beq.s 11a0c <builtIn_onKeyboard+0x2c>
	{
		currentEvents -> spaceFunction = functionNum;
   119fc:	|      movea.l 1a11c <currentEvents>,a0
   11a02:	|      move.l (sp),d0
   11a04:	|      move.l d0,24(a0)
		return BR_CONTINUE;
   11a08:	|      moveq #2,d0
   11a0a:	|  /-- bra.s 11a0e <builtIn_onKeyboard+0x2e>
	}
	return BR_ERROR;
   11a0c:	\--|-> moveq #1,d0
}
   11a0e:	   \-> addq.l #4,sp
   11a10:	       rts

00011a12 <builtIn_spawnSub>:

builtIn (spawnSub)
{
   11a12:	          subq.l #4,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11a14:	          move.l sp,d0
   11a16:	          move.l d0,-(sp)
   11a18:	          move.l 16(sp),-(sp)
   11a1c:	          move.l 16(sp),-(sp)
   11a20:	          jsr 11854 <getFuncNumForCallback>
   11a26:	          lea 12(sp),sp
   11a2a:	          tst.w d0
   11a2c:	/-------- beq.s 11a58 <builtIn_spawnSub+0x46>
	{
		if (! startNewFunctionNum (functionNum, 0, NULL, noStack, TRUE)) return BR_ERROR;
   11a2e:	|         move.l 1a774 <noStack>,d1
   11a34:	|         move.l (sp),d0
   11a36:	|         pea 1 <_start+0x1>
   11a3a:	|         move.l d1,-(sp)
   11a3c:	|         clr.l -(sp)
   11a3e:	|         clr.l -(sp)
   11a40:	|         move.l d0,-(sp)
   11a42:	|         jsr 63b0 <startNewFunctionNum>
   11a48:	|         lea 20(sp),sp
   11a4c:	|         tst.l d0
   11a4e:	|     /-- bne.s 11a54 <builtIn_spawnSub+0x42>
   11a50:	|     |   moveq #1,d0
   11a52:	|  /--|-- bra.s 11a5a <builtIn_spawnSub+0x48>
		return BR_CONTINUE;
   11a54:	|  |  \-> moveq #2,d0
   11a56:	|  +----- bra.s 11a5a <builtIn_spawnSub+0x48>
	}
	return BR_ERROR;
   11a58:	\--|----> moveq #1,d0
}
   11a5a:	   \----> addq.l #4,sp
   11a5c:	          rts

00011a5e <builtIn_cancelSub>:

builtIn (cancelSub)
{
   11a5e:	          subq.l #8,sp
	UNUSEDALL
	int functionNum;
	if (getFuncNumForCallback (numParams, fun, &functionNum))
   11a60:	          move.l sp,d0
   11a62:	          addq.l #4,d0
   11a64:	          move.l d0,-(sp)
   11a66:	          move.l 20(sp),-(sp)
   11a6a:	          move.l 20(sp),-(sp)
   11a6e:	          jsr 11854 <getFuncNumForCallback>
   11a74:	          lea 12(sp),sp
   11a78:	          tst.w d0
   11a7a:	/-------- beq.s 11ab0 <builtIn_cancelSub+0x52>
	{
		BOOL killedMyself;
		cancelAFunction (functionNum, fun, &killedMyself);
   11a7c:	|         move.l 4(sp),d1
   11a80:	|         move.l sp,d0
   11a82:	|         addq.l #2,d0
   11a84:	|         move.l d0,-(sp)
   11a86:	|         move.l 20(sp),-(sp)
   11a8a:	|         move.l d1,-(sp)
   11a8c:	|         jsr 40d6 <cancelAFunction>
   11a92:	|         lea 12(sp),sp
		if (killedMyself) {
   11a96:	|         move.w 2(sp),d0
   11a9a:	|  /----- beq.s 11aac <builtIn_cancelSub+0x4e>
			abortFunction (fun);
   11a9c:	|  |      move.l 16(sp),-(sp)
   11aa0:	|  |      jsr 3ff4 <abortFunction>
   11aa6:	|  |      addq.l #4,sp
			return BR_ALREADY_GONE;
   11aa8:	|  |      moveq #5,d0
   11aaa:	|  |  /-- bra.s 11ab2 <builtIn_cancelSub+0x54>
		}
		return BR_CONTINUE;
   11aac:	|  \--|-> moveq #2,d0
   11aae:	|     +-- bra.s 11ab2 <builtIn_cancelSub+0x54>
	}
	return BR_ERROR;
   11ab0:	\-----|-> moveq #1,d0
}
   11ab2:	      \-> addq.l #8,sp
   11ab4:	          rts

00011ab6 <builtIn_stringWidth>:

builtIn(stringWidth)
{
   11ab6:	       subq.l #8,sp
   11ab8:	       move.l a6,-(sp)
	UNUSEDALL
	char * theText = getTextFromAnyVar(&(fun->stack->thisVar));
   11aba:	       movea.l 20(sp),a0
   11abe:	       move.l 24(a0),d0
   11ac2:	       move.l d0,-(sp)
   11ac4:	       jsr 14836 <getTextFromAnyVar>
   11aca:	       addq.l #4,sp
   11acc:	       move.l d0,8(sp)
	if (!theText) return BR_ERROR;
   11ad0:	   /-- bne.s 11ad6 <builtIn_stringWidth+0x20>
   11ad2:	   |   moveq #1,d0
   11ad4:	/--|-- bra.s 11b24 <builtIn_stringWidth+0x6e>
	trimStack(&fun->stack);
   11ad6:	|  \-> moveq #24,d0
   11ad8:	|      add.l 20(sp),d0
   11adc:	|      move.l d0,-(sp)
   11ade:	|      jsr 14be4 <trimStack>
   11ae4:	|      addq.l #4,sp

	// Return value
	setVariable(&fun->reg, SVT_INT, stringWidth(theText));
   11ae6:	|      move.l 8(sp),-(sp)
   11aea:	|      jsr 15320 <stringWidth>
   11af0:	|      addq.l #4,sp
   11af2:	|      move.l d0,d1
   11af4:	|      moveq #28,d0
   11af6:	|      add.l 20(sp),d0
   11afa:	|      move.l d1,-(sp)
   11afc:	|      pea 1 <_start+0x1>
   11b00:	|      move.l d0,-(sp)
   11b02:	|      jsr 14b52 <setVariable>
   11b08:	|      lea 12(sp),sp
	FreeVec(theText);
   11b0c:	|      move.l 8(sp),4(sp)
   11b12:	|      move.l 1a7a4 <SysBase>,d0
   11b18:	|      movea.l d0,a6
   11b1a:	|      movea.l 4(sp),a1
   11b1e:	|      jsr -690(a6)
	return BR_CONTINUE;
   11b22:	|      moveq #2,d0
}
   11b24:	\----> movea.l (sp)+,a6
   11b26:	       addq.l #8,sp
   11b28:	       rts

00011b2a <builtIn_hardScroll>:

builtIn(hardScroll)
{
   11b2a:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11b2c:	       movea.l 12(sp),a0
   11b30:	       move.l 24(a0),d0
   11b34:	       move.l d0,-(sp)
   11b36:	       pea 1 <_start+0x1>
   11b3a:	       move.l sp,d0
   11b3c:	       addq.l #8,d0
   11b3e:	       move.l d0,-(sp)
   11b40:	       jsr 14260 <getValueType>
   11b46:	       lea 12(sp),sp
   11b4a:	       tst.w d0
   11b4c:	   /-- bne.s 11b52 <builtIn_hardScroll+0x28>
   11b4e:	   |   moveq #1,d0
   11b50:	/--|-- bra.s 11b70 <builtIn_hardScroll+0x46>
	trimStack (&fun -> stack);
   11b52:	|  \-> moveq #24,d0
   11b54:	|      add.l 12(sp),d0
   11b58:	|      move.l d0,-(sp)
   11b5a:	|      jsr 14be4 <trimStack>
   11b60:	|      addq.l #4,sp
	hardScroll (v);
   11b62:	|      move.l (sp),d0
   11b64:	|      move.l d0,-(sp)
   11b66:	|      jsr cd1c <hardScroll>
   11b6c:	|      addq.l #4,sp
	return BR_CONTINUE;
   11b6e:	|      moveq #2,d0
}
   11b70:	\----> addq.l #4,sp
   11b72:	       rts

00011b74 <builtIn_isScreenRegion>:


builtIn(isScreenRegion)
{
   11b74:	       subq.l #4,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11b76:	       movea.l 12(sp),a0
   11b7a:	       move.l 24(a0),d0
   11b7e:	       move.l d0,-(sp)
   11b80:	       pea 7 <_start+0x7>
   11b84:	       move.l sp,d0
   11b86:	       addq.l #8,d0
   11b88:	       move.l d0,-(sp)
   11b8a:	       jsr 14260 <getValueType>
   11b90:	       lea 12(sp),sp
   11b94:	       tst.w d0
   11b96:	   /-- bne.s 11b9c <builtIn_isScreenRegion+0x28>
   11b98:	   |   moveq #1,d0
   11b9a:	/--|-- bra.s 11bdc <builtIn_isScreenRegion+0x68>
	trimStack (&fun -> stack);
   11b9c:	|  \-> moveq #24,d0
   11b9e:	|      add.l 12(sp),d0
   11ba2:	|      move.l d0,-(sp)
   11ba4:	|      jsr 14be4 <trimStack>
   11baa:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, getRegionForObject (objectNumber) != NULL);
   11bac:	|      move.l (sp),d0
   11bae:	|      move.l d0,-(sp)
   11bb0:	|      jsr 15480 <getRegionForObject>
   11bb6:	|      addq.l #4,sp
   11bb8:	|      tst.l d0
   11bba:	|      sne d0
   11bbc:	|      neg.b d0
   11bbe:	|      moveq #0,d1
   11bc0:	|      move.b d0,d1
   11bc2:	|      moveq #28,d0
   11bc4:	|      add.l 12(sp),d0
   11bc8:	|      move.l d1,-(sp)
   11bca:	|      pea 1 <_start+0x1>
   11bce:	|      move.l d0,-(sp)
   11bd0:	|      jsr 14b52 <setVariable>
   11bd6:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11bda:	|      moveq #2,d0
}
   11bdc:	\----> addq.l #4,sp
   11bde:	       rts

00011be0 <builtIn_setSpeechSpeed>:

builtIn(setSpeechSpeed)
{
   11be0:	       subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11be2:	       movea.l 12(sp),a0
   11be6:	       move.l 24(a0),d0
   11bea:	       move.l d0,-(sp)
   11bec:	       pea 1 <_start+0x1>
   11bf0:	       move.l sp,d0
   11bf2:	       addq.l #8,d0
   11bf4:	       move.l d0,-(sp)
   11bf6:	       jsr 14260 <getValueType>
   11bfc:	       lea 12(sp),sp
   11c00:	       tst.w d0
   11c02:	   /-- bne.s 11c08 <builtIn_setSpeechSpeed+0x28>
   11c04:	   |   moveq #1,d0
   11c06:	/--|-- bra.s 11c56 <builtIn_setSpeechSpeed+0x76>
	trimStack (&fun -> stack);
   11c08:	|  \-> moveq #24,d0
   11c0a:	|      add.l 12(sp),d0
   11c0e:	|      move.l d0,-(sp)
   11c10:	|      jsr 14be4 <trimStack>
   11c16:	|      addq.l #4,sp
	speechSpeed = number * (FLOAT) 0.01;
   11c18:	|      move.l (sp),d0
   11c1a:	|      move.l d0,-(sp)
   11c1c:	|      jsr 1709a <__floatsisf>
   11c22:	|      addq.l #4,sp
   11c24:	|      move.l #1008981770,-(sp)
   11c2a:	|      move.l d0,-(sp)
   11c2c:	|      jsr 1714c <__mulsf3>
   11c32:	|      addq.l #8,sp
   11c34:	|      move.l d0,1a12e <speechSpeed>
	setVariable (&fun -> reg, SVT_INT, 1);
   11c3a:	|      moveq #28,d0
   11c3c:	|      add.l 12(sp),d0
   11c40:	|      pea 1 <_start+0x1>
   11c44:	|      pea 1 <_start+0x1>
   11c48:	|      move.l d0,-(sp)
   11c4a:	|      jsr 14b52 <setVariable>
   11c50:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11c54:	|      moveq #2,d0
}
   11c56:	\----> addq.l #4,sp
   11c58:	       rts

00011c5a <builtIn_setFontSpacing>:

builtIn(setFontSpacing)
{
   11c5a:	       subq.l #4,sp
	UNUSEDALL
	int fontSpaceI;
	if (! getValueType(&fontSpaceI, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11c5c:	       movea.l 12(sp),a0
   11c60:	       move.l 24(a0),d0
   11c64:	       move.l d0,-(sp)
   11c66:	       pea 1 <_start+0x1>
   11c6a:	       move.l sp,d0
   11c6c:	       addq.l #8,d0
   11c6e:	       move.l d0,-(sp)
   11c70:	       jsr 14260 <getValueType>
   11c76:	       lea 12(sp),sp
   11c7a:	       tst.w d0
   11c7c:	   /-- bne.s 11c82 <builtIn_setFontSpacing+0x28>
   11c7e:	   |   moveq #1,d0
   11c80:	/--|-- bra.s 11cb8 <builtIn_setFontSpacing+0x5e>
	fontSpace = fontSpaceI;
   11c82:	|  \-> move.l (sp),d0
   11c84:	|      move.l d0,d0
   11c86:	|      move.w d0,1a6a8 <fontSpace>
	trimStack (&fun -> stack);
   11c8c:	|      moveq #24,d0
   11c8e:	|      add.l 12(sp),d0
   11c92:	|      move.l d0,-(sp)
   11c94:	|      jsr 14be4 <trimStack>
   11c9a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   11c9c:	|      moveq #28,d0
   11c9e:	|      add.l 12(sp),d0
   11ca2:	|      pea 1 <_start+0x1>
   11ca6:	|      pea 1 <_start+0x1>
   11caa:	|      move.l d0,-(sp)
   11cac:	|      jsr 14b52 <setVariable>
   11cb2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11cb6:	|      moveq #2,d0
}
   11cb8:	\----> addq.l #4,sp
   11cba:	       rts

00011cbc <builtIn_transitionLevel>:

builtIn(transitionLevel)
{
   11cbc:	          subq.l #4,sp
	UNUSEDALL
	int number;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11cbe:	          movea.l 12(sp),a0
   11cc2:	          move.l 24(a0),d0
   11cc6:	          move.l d0,-(sp)
   11cc8:	          pea 1 <_start+0x1>
   11ccc:	          move.l sp,d0
   11cce:	          addq.l #8,d0
   11cd0:	          move.l d0,-(sp)
   11cd2:	          jsr 14260 <getValueType>
   11cd8:	          lea 12(sp),sp
   11cdc:	          tst.w d0
   11cde:	      /-- bne.s 11ce4 <builtIn_transitionLevel+0x28>
   11ce0:	      |   moveq #1,d0
   11ce2:	/-----|-- bra.s 11d38 <builtIn_transitionLevel+0x7c>
	trimStack (&fun -> stack);
   11ce4:	|     \-> moveq #24,d0
   11ce6:	|         add.l 12(sp),d0
   11cea:	|         move.l d0,-(sp)
   11cec:	|         jsr 14be4 <trimStack>
   11cf2:	|         addq.l #4,sp

	if (number < 0)
   11cf4:	|         move.l (sp),d0
   11cf6:	|     /-- bpl.s 11d00 <builtIn_transitionLevel+0x44>
		brightnessLevel = 0;
   11cf8:	|     |   clr.b 1a11a <brightnessLevel>
   11cfe:	|  /--|-- bra.s 11d1c <builtIn_transitionLevel+0x60>
	else if (number > 255)
   11d00:	|  |  \-> move.l (sp),d0
   11d02:	|  |      cmpi.l #255,d0
   11d08:	|  |  /-- ble.s 11d12 <builtIn_transitionLevel+0x56>
		brightnessLevel = 255;
   11d0a:	|  |  |   st 1a11a <brightnessLevel>
   11d10:	|  +--|-- bra.s 11d1c <builtIn_transitionLevel+0x60>
	else
		brightnessLevel = number;
   11d12:	|  |  \-> move.l (sp),d0
   11d14:	|  |      move.l d0,d0
   11d16:	|  |      move.b d0,1a11a <brightnessLevel>

	setVariable (&fun -> reg, SVT_INT, 1);
   11d1c:	|  \----> moveq #28,d0
   11d1e:	|         add.l 12(sp),d0
   11d22:	|         pea 1 <_start+0x1>
   11d26:	|         pea 1 <_start+0x1>
   11d2a:	|         move.l d0,-(sp)
   11d2c:	|         jsr 14b52 <setVariable>
   11d32:	|         lea 12(sp),sp
	return BR_CONTINUE;
   11d36:	|         moveq #2,d0
}
   11d38:	\-------> addq.l #4,sp
   11d3a:	          rts

00011d3c <builtIn_captureAllKeys>:

builtIn(captureAllKeys)
{
	UNUSEDALL
	captureAllKeys = getBoolean(&(fun -> stack -> thisVar));
   11d3c:	movea.l 8(sp),a0
   11d40:	move.l 24(a0),d0
   11d44:	move.l d0,-(sp)
   11d46:	jsr 147a0 <getBoolean>
   11d4c:	addq.l #4,sp
   11d4e:	move.w d0,1a744 <captureAllKeys>
	trimStack (&fun -> stack);
   11d54:	moveq #24,d0
   11d56:	add.l 8(sp),d0
   11d5a:	move.l d0,-(sp)
   11d5c:	jsr 14be4 <trimStack>
   11d62:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, captureAllKeys);
   11d64:	move.w 1a744 <captureAllKeys>,d0
   11d6a:	movea.w d0,a0
   11d6c:	moveq #28,d0
   11d6e:	add.l 8(sp),d0
   11d72:	move.l a0,-(sp)
   11d74:	pea 1 <_start+0x1>
   11d78:	move.l d0,-(sp)
   11d7a:	jsr 14b52 <setVariable>
   11d80:	lea 12(sp),sp
	return BR_CONTINUE;
   11d84:	moveq #2,d0
}
   11d86:	rts

00011d88 <builtIn_spinCharacter>:


builtIn(spinCharacter)
{
   11d88:	       lea -12(sp),sp
	UNUSEDALL
	int number, objectNumber;
	if (! getValueType(&number, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   11d8c:	       movea.l 20(sp),a0
   11d90:	       move.l 24(a0),d0
   11d94:	       move.l d0,-(sp)
   11d96:	       pea 1 <_start+0x1>
   11d9a:	       moveq #12,d0
   11d9c:	       add.l sp,d0
   11d9e:	       move.l d0,-(sp)
   11da0:	       jsr 14260 <getValueType>
   11da6:	       lea 12(sp),sp
   11daa:	       tst.w d0
   11dac:	   /-- bne.s 11db4 <builtIn_spinCharacter+0x2c>
   11dae:	   |   moveq #1,d0
   11db0:	/--|-- bra.w 11e64 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   11db4:	|  \-> moveq #24,d0
   11db6:	|      add.l 20(sp),d0
   11dba:	|      move.l d0,-(sp)
   11dbc:	|      jsr 14be4 <trimStack>
   11dc2:	|      addq.l #4,sp
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11dc4:	|      movea.l 20(sp),a0
   11dc8:	|      move.l 24(a0),d0
   11dcc:	|      move.l d0,-(sp)
   11dce:	|      pea 7 <_start+0x7>
   11dd2:	|      lea 8(sp),a0
   11dd6:	|      move.l a0,-(sp)
   11dd8:	|      jsr 14260 <getValueType>
   11dde:	|      lea 12(sp),sp
   11de2:	|      tst.w d0
   11de4:	|  /-- bne.s 11dea <builtIn_spinCharacter+0x62>
   11de6:	|  |   moveq #1,d0
   11de8:	+--|-- bra.s 11e64 <builtIn_spinCharacter+0xdc>
	trimStack (&fun -> stack);
   11dea:	|  \-> moveq #24,d0
   11dec:	|      add.l 20(sp),d0
   11df0:	|      move.l d0,-(sp)
   11df2:	|      jsr 14be4 <trimStack>
   11df8:	|      addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11dfa:	|      move.l (sp),d0
   11dfc:	|      move.l d0,-(sp)
   11dfe:	|      jsr a0f4 <findPerson>
   11e04:	|      addq.l #4,sp
   11e06:	|      move.l d0,8(sp)
	if (thisPerson) {
   11e0a:	|  /-- beq.s 11e4a <builtIn_spinCharacter+0xc2>
		thisPerson -> wantAngle = number;
   11e0c:	|  |   move.l 4(sp),d0
   11e10:	|  |   movea.l 8(sp),a0
   11e14:	|  |   move.l d0,96(a0)
		thisPerson -> spinning = TRUE;
   11e18:	|  |   movea.l 8(sp),a0
   11e1c:	|  |   move.w #1,66(a0)
		thisPerson -> continueAfterWalking = fun;
   11e22:	|  |   movea.l 8(sp),a0
   11e26:	|  |   move.l 20(sp),68(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11e2c:	|  |   moveq #28,d0
   11e2e:	|  |   add.l 20(sp),d0
   11e32:	|  |   pea 1 <_start+0x1>
   11e36:	|  |   pea 1 <_start+0x1>
   11e3a:	|  |   move.l d0,-(sp)
   11e3c:	|  |   jsr 14b52 <setVariable>
   11e42:	|  |   lea 12(sp),sp
		return BR_PAUSE;
   11e46:	|  |   moveq #3,d0
   11e48:	+--|-- bra.s 11e64 <builtIn_spinCharacter+0xdc>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11e4a:	|  \-> moveq #28,d0
   11e4c:	|      add.l 20(sp),d0
   11e50:	|      clr.l -(sp)
   11e52:	|      pea 1 <_start+0x1>
   11e56:	|      move.l d0,-(sp)
   11e58:	|      jsr 14b52 <setVariable>
   11e5e:	|      lea 12(sp),sp
		return BR_CONTINUE;
   11e62:	|      moveq #2,d0
	}
}
   11e64:	\----> lea 12(sp),sp
   11e68:	       rts

00011e6a <builtIn_getCharacterDirection>:

builtIn(getCharacterDirection)
{
   11e6a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11e6c:	          movea.l 16(sp),a0
   11e70:	          move.l 24(a0),d0
   11e74:	          move.l d0,-(sp)
   11e76:	          pea 7 <_start+0x7>
   11e7a:	          move.l sp,d0
   11e7c:	          addq.l #8,d0
   11e7e:	          move.l d0,-(sp)
   11e80:	          jsr 14260 <getValueType>
   11e86:	          lea 12(sp),sp
   11e8a:	          tst.w d0
   11e8c:	      /-- bne.s 11e92 <builtIn_getCharacterDirection+0x28>
   11e8e:	      |   moveq #1,d0
   11e90:	/-----|-- bra.s 11ef0 <builtIn_getCharacterDirection+0x86>
	trimStack (&fun -> stack);
   11e92:	|     \-> moveq #24,d0
   11e94:	|         add.l 16(sp),d0
   11e98:	|         move.l d0,-(sp)
   11e9a:	|         jsr 14be4 <trimStack>
   11ea0:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11ea2:	|         move.l (sp),d0
   11ea4:	|         move.l d0,-(sp)
   11ea6:	|         jsr a0f4 <findPerson>
   11eac:	|         addq.l #4,sp
   11eae:	|         move.l d0,4(sp)
	if (thisPerson) {
   11eb2:	|  /----- beq.s 11ed6 <builtIn_getCharacterDirection+0x6c>
		setVariable (&fun -> reg, SVT_INT, thisPerson -> direction);
   11eb4:	|  |      movea.l 4(sp),a0
   11eb8:	|  |      move.l 106(a0),d1
   11ebc:	|  |      moveq #28,d0
   11ebe:	|  |      add.l 16(sp),d0
   11ec2:	|  |      move.l d1,-(sp)
   11ec4:	|  |      pea 1 <_start+0x1>
   11ec8:	|  |      move.l d0,-(sp)
   11eca:	|  |      jsr 14b52 <setVariable>
   11ed0:	|  |      lea 12(sp),sp
   11ed4:	|  |  /-- bra.s 11eee <builtIn_getCharacterDirection+0x84>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11ed6:	|  \--|-> moveq #28,d0
   11ed8:	|     |   add.l 16(sp),d0
   11edc:	|     |   clr.l -(sp)
   11ede:	|     |   pea 1 <_start+0x1>
   11ee2:	|     |   move.l d0,-(sp)
   11ee4:	|     |   jsr 14b52 <setVariable>
   11eea:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   11eee:	|     \-> moveq #2,d0
}
   11ef0:	\-------> addq.l #8,sp
   11ef2:	          rts

00011ef4 <builtIn_isCharacter>:

builtIn(isCharacter)
{
   11ef4:	       subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11ef6:	       movea.l 16(sp),a0
   11efa:	       move.l 24(a0),d0
   11efe:	       move.l d0,-(sp)
   11f00:	       pea 7 <_start+0x7>
   11f04:	       move.l sp,d0
   11f06:	       addq.l #8,d0
   11f08:	       move.l d0,-(sp)
   11f0a:	       jsr 14260 <getValueType>
   11f10:	       lea 12(sp),sp
   11f14:	       tst.w d0
   11f16:	   /-- bne.s 11f1c <builtIn_isCharacter+0x28>
   11f18:	   |   moveq #1,d0
   11f1a:	/--|-- bra.s 11f5e <builtIn_isCharacter+0x6a>
	trimStack (&fun -> stack);
   11f1c:	|  \-> moveq #24,d0
   11f1e:	|      add.l 16(sp),d0
   11f22:	|      move.l d0,-(sp)
   11f24:	|      jsr 14be4 <trimStack>
   11f2a:	|      addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11f2c:	|      move.l (sp),d0
   11f2e:	|      move.l d0,-(sp)
   11f30:	|      jsr a0f4 <findPerson>
   11f36:	|      addq.l #4,sp
   11f38:	|      move.l d0,4(sp)
	setVariable (&fun -> reg, SVT_INT, thisPerson != NULL);
   11f3c:	|      sne d0
   11f3e:	|      neg.b d0
   11f40:	|      moveq #0,d1
   11f42:	|      move.b d0,d1
   11f44:	|      moveq #28,d0
   11f46:	|      add.l 16(sp),d0
   11f4a:	|      move.l d1,-(sp)
   11f4c:	|      pea 1 <_start+0x1>
   11f50:	|      move.l d0,-(sp)
   11f52:	|      jsr 14b52 <setVariable>
   11f58:	|      lea 12(sp),sp
	return BR_CONTINUE;
   11f5c:	|      moveq #2,d0
}
   11f5e:	\----> addq.l #8,sp
   11f60:	       rts

00011f62 <builtIn_normalCharacter>:

builtIn(normalCharacter)
{
   11f62:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   11f64:	          movea.l 16(sp),a0
   11f68:	          move.l 24(a0),d0
   11f6c:	          move.l d0,-(sp)
   11f6e:	          pea 7 <_start+0x7>
   11f72:	          move.l sp,d0
   11f74:	          addq.l #8,d0
   11f76:	          move.l d0,-(sp)
   11f78:	          jsr 14260 <getValueType>
   11f7e:	          lea 12(sp),sp
   11f82:	          tst.w d0
   11f84:	      /-- bne.s 11f8a <builtIn_normalCharacter+0x28>
   11f86:	      |   moveq #1,d0
   11f88:	/-----|-- bra.s 12006 <builtIn_normalCharacter+0xa4>
	trimStack (&fun -> stack);
   11f8a:	|     \-> moveq #24,d0
   11f8c:	|         add.l 16(sp),d0
   11f90:	|         move.l d0,-(sp)
   11f92:	|         jsr 14be4 <trimStack>
   11f98:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   11f9a:	|         move.l (sp),d0
   11f9c:	|         move.l d0,-(sp)
   11f9e:	|         jsr a0f4 <findPerson>
   11fa4:	|         addq.l #4,sp
   11fa6:	|         move.l d0,4(sp)
	if (thisPerson)
   11faa:	|  /----- beq.s 11fec <builtIn_normalCharacter+0x8a>
	{
		thisPerson -> myAnim = thisPerson -> myPersona -> animation[thisPerson -> direction];
   11fac:	|  |      movea.l 4(sp),a0
   11fb0:	|  |      movea.l 80(a0),a0
   11fb4:	|  |      move.l (a0),d1
   11fb6:	|  |      movea.l 4(sp),a0
   11fba:	|  |      move.l 106(a0),d0
   11fbe:	|  |      add.l d0,d0
   11fc0:	|  |      add.l d0,d0
   11fc2:	|  |      movea.l d1,a0
   11fc4:	|  |      adda.l d0,a0
   11fc6:	|  |      move.l (a0),d0
   11fc8:	|  |      movea.l 4(sp),a0
   11fcc:	|  |      move.l d0,72(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   11fd0:	|  |      moveq #28,d0
   11fd2:	|  |      add.l 16(sp),d0
   11fd6:	|  |      pea 1 <_start+0x1>
   11fda:	|  |      pea 1 <_start+0x1>
   11fde:	|  |      move.l d0,-(sp)
   11fe0:	|  |      jsr 14b52 <setVariable>
   11fe6:	|  |      lea 12(sp),sp
   11fea:	|  |  /-- bra.s 12004 <builtIn_normalCharacter+0xa2>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   11fec:	|  \--|-> moveq #28,d0
   11fee:	|     |   add.l 16(sp),d0
   11ff2:	|     |   clr.l -(sp)
   11ff4:	|     |   pea 1 <_start+0x1>
   11ff8:	|     |   move.l d0,-(sp)
   11ffa:	|     |   jsr 14b52 <setVariable>
   12000:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12004:	|     \-> moveq #2,d0
}
   12006:	\-------> addq.l #8,sp
   12008:	          rts

0001200a <builtIn_isMoving>:

builtIn(isMoving)
{
   1200a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1200c:	          movea.l 16(sp),a0
   12010:	          move.l 24(a0),d0
   12014:	          move.l d0,-(sp)
   12016:	          pea 7 <_start+0x7>
   1201a:	          move.l sp,d0
   1201c:	          addq.l #8,d0
   1201e:	          move.l d0,-(sp)
   12020:	          jsr 14260 <getValueType>
   12026:	          lea 12(sp),sp
   1202a:	          tst.w d0
   1202c:	      /-- bne.s 12032 <builtIn_isMoving+0x28>
   1202e:	      |   moveq #1,d0
   12030:	/-----|-- bra.s 12092 <builtIn_isMoving+0x88>
	trimStack (&fun -> stack);
   12032:	|     \-> moveq #24,d0
   12034:	|         add.l 16(sp),d0
   12038:	|         move.l d0,-(sp)
   1203a:	|         jsr 14be4 <trimStack>
   12040:	|         addq.l #4,sp
	struct onScreenPerson * thisPerson = findPerson (objectNumber);
   12042:	|         move.l (sp),d0
   12044:	|         move.l d0,-(sp)
   12046:	|         jsr a0f4 <findPerson>
   1204c:	|         addq.l #4,sp
   1204e:	|         move.l d0,4(sp)
	if (thisPerson)
   12052:	|  /----- beq.s 12078 <builtIn_isMoving+0x6e>
	{
		setVariable (&fun -> reg, SVT_INT, thisPerson -> walking);
   12054:	|  |      movea.l 4(sp),a0
   12058:	|  |      move.w 64(a0),d0
   1205c:	|  |      movea.w d0,a0
   1205e:	|  |      moveq #28,d0
   12060:	|  |      add.l 16(sp),d0
   12064:	|  |      move.l a0,-(sp)
   12066:	|  |      pea 1 <_start+0x1>
   1206a:	|  |      move.l d0,-(sp)
   1206c:	|  |      jsr 14b52 <setVariable>
   12072:	|  |      lea 12(sp),sp
   12076:	|  |  /-- bra.s 12090 <builtIn_isMoving+0x86>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12078:	|  \--|-> moveq #28,d0
   1207a:	|     |   add.l 16(sp),d0
   1207e:	|     |   clr.l -(sp)
   12080:	|     |   pea 1 <_start+0x1>
   12084:	|     |   move.l d0,-(sp)
   12086:	|     |   jsr 14b52 <setVariable>
   1208c:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12090:	|     \-> moveq #2,d0
}
   12092:	\-------> addq.l #8,sp
   12094:	          rts

00012096 <builtIn_fetchEvent>:

builtIn(fetchEvent)
{
   12096:	          lea -12(sp),sp
	UNUSEDALL
	int obj1, obj2;
	if (! getValueType(&obj2, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   1209a:	          movea.l 20(sp),a0
   1209e:	          move.l 24(a0),d0
   120a2:	          move.l d0,-(sp)
   120a4:	          pea 7 <_start+0x7>
   120a8:	          lea 8(sp),a0
   120ac:	          move.l a0,-(sp)
   120ae:	          jsr 14260 <getValueType>
   120b4:	          lea 12(sp),sp
   120b8:	          tst.w d0
   120ba:	      /-- bne.s 120c2 <builtIn_fetchEvent+0x2c>
   120bc:	      |   moveq #1,d0
   120be:	/-----|-- bra.w 12156 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   120c2:	|     \-> moveq #24,d0
   120c4:	|         add.l 20(sp),d0
   120c8:	|         move.l d0,-(sp)
   120ca:	|         jsr 14be4 <trimStack>
   120d0:	|         addq.l #4,sp
	if (! getValueType(&obj1, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   120d2:	|         movea.l 20(sp),a0
   120d6:	|         move.l 24(a0),d0
   120da:	|         move.l d0,-(sp)
   120dc:	|         pea 7 <_start+0x7>
   120e0:	|         moveq #12,d0
   120e2:	|         add.l sp,d0
   120e4:	|         move.l d0,-(sp)
   120e6:	|         jsr 14260 <getValueType>
   120ec:	|         lea 12(sp),sp
   120f0:	|         tst.w d0
   120f2:	|     /-- bne.s 120f8 <builtIn_fetchEvent+0x62>
   120f4:	|     |   moveq #1,d0
   120f6:	+-----|-- bra.s 12156 <builtIn_fetchEvent+0xc0>
	trimStack (&fun -> stack);
   120f8:	|     \-> moveq #24,d0
   120fa:	|         add.l 20(sp),d0
   120fe:	|         move.l d0,-(sp)
   12100:	|         jsr 14be4 <trimStack>
   12106:	|         addq.l #4,sp

	int fNum = getCombinationFunction (obj1, obj2);
   12108:	|         move.l (sp),d1
   1210a:	|         move.l 4(sp),d0
   1210e:	|         move.l d1,-(sp)
   12110:	|         move.l d0,-(sp)
   12112:	|         jsr cffe <getCombinationFunction>
   12118:	|         addq.l #8,sp
   1211a:	|         move.l d0,8(sp)

	// Return value
	if (fNum) {
   1211e:	|  /----- beq.s 1213c <builtIn_fetchEvent+0xa6>
		setVariable (&fun -> reg, SVT_FUNC, fNum);
   12120:	|  |      moveq #28,d0
   12122:	|  |      add.l 20(sp),d0
   12126:	|  |      move.l 8(sp),-(sp)
   1212a:	|  |      pea 2 <_start+0x2>
   1212e:	|  |      move.l d0,-(sp)
   12130:	|  |      jsr 14b52 <setVariable>
   12136:	|  |      lea 12(sp),sp
   1213a:	|  |  /-- bra.s 12154 <builtIn_fetchEvent+0xbe>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1213c:	|  \--|-> moveq #28,d0
   1213e:	|     |   add.l 20(sp),d0
   12142:	|     |   clr.l -(sp)
   12144:	|     |   pea 1 <_start+0x1>
   12148:	|     |   move.l d0,-(sp)
   1214a:	|     |   jsr 14b52 <setVariable>
   12150:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12154:	|     \-> moveq #2,d0
}
   12156:	\-------> lea 12(sp),sp
   1215a:	          rts

0001215c <builtIn_deleteFile>:

builtIn(deleteFile)
{
   1215c:	       lea -24(sp),sp
   12160:	       move.l a6,-(sp)
    UNUSEDALL

    char *namNormal = getTextFromAnyVar(&(fun->stack->thisVar));
   12162:	       movea.l 36(sp),a0
   12166:	       move.l 24(a0),d0
   1216a:	       move.l d0,-(sp)
   1216c:	       jsr 14836 <getTextFromAnyVar>
   12172:	       addq.l #4,sp
   12174:	       move.l d0,24(sp)
    trimStack(&fun->stack);
   12178:	       moveq #24,d0
   1217a:	       add.l 36(sp),d0
   1217e:	       move.l d0,-(sp)
   12180:	       jsr 14be4 <trimStack>
   12186:	       addq.l #4,sp
    char *nam = encodeFilename(namNormal);
   12188:	       move.l 24(sp),-(sp)
   1218c:	       jsr 2fe <encodeFilename>
   12192:	       addq.l #4,sp
   12194:	       move.l d0,20(sp)
    FreeVec(namNormal);
   12198:	       move.l 24(sp),16(sp)
   1219e:	       move.l 1a7a4 <SysBase>,d0
   121a4:	       movea.l d0,a6
   121a6:	       movea.l 16(sp),a1
   121aa:	       jsr -690(a6)
    if (failSecurityCheck(nam)) return BR_ERROR;
   121ae:	       move.l 20(sp),-(sp)
   121b2:	       jsr ddb6 <failSecurityCheck>
   121b8:	       addq.l #4,sp
   121ba:	       tst.w d0
   121bc:	   /-- beq.s 121c2 <builtIn_deleteFile+0x66>
   121be:	   |   moveq #1,d0
   121c0:	/--|-- bra.s 12210 <builtIn_deleteFile+0xb4>
    setVariable(&fun->reg, SVT_INT, DeleteFile(nam));
   121c2:	|  \-> move.l 20(sp),12(sp)
   121c8:	|      move.l 1a7ac <DOSBase>,d0
   121ce:	|      movea.l d0,a6
   121d0:	|      move.l 12(sp),d1
   121d4:	|      jsr -72(a6)
   121d8:	|      move.l d0,8(sp)
   121dc:	|      move.l 8(sp),d1
   121e0:	|      moveq #28,d0
   121e2:	|      add.l 36(sp),d0
   121e6:	|      move.l d1,-(sp)
   121e8:	|      pea 1 <_start+0x1>
   121ec:	|      move.l d0,-(sp)
   121ee:	|      jsr 14b52 <setVariable>
   121f4:	|      lea 12(sp),sp
    FreeVec(nam);
   121f8:	|      move.l 20(sp),4(sp)
   121fe:	|      move.l 1a7a4 <SysBase>,d0
   12204:	|      movea.l d0,a6
   12206:	|      movea.l 4(sp),a1
   1220a:	|      jsr -690(a6)

    return BR_CONTINUE;
   1220e:	|      moveq #2,d0
}
   12210:	\----> movea.l (sp)+,a6
   12212:	       lea 24(sp),sp
   12216:	       rts

00012218 <builtIn_renameFile>:

builtIn(renameFile)
{
   12218:	       lea -40(sp),sp
   1221c:	       move.l a6,-(sp)
   1221e:	       move.l d2,-(sp)
	UNUSEDALL
	char * temp;

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12220:	       movea.l 56(sp),a0
   12224:	       move.l 24(a0),d0
   12228:	       move.l d0,-(sp)
   1222a:	       jsr 14836 <getTextFromAnyVar>
   12230:	       addq.l #4,sp
   12232:	       move.l d0,44(sp)
	char * newnam = encodeFilename(temp);
   12236:	       move.l 44(sp),-(sp)
   1223a:	       jsr 2fe <encodeFilename>
   12240:	       addq.l #4,sp
   12242:	       move.l d0,40(sp)
	trimStack(&fun->stack);
   12246:	       moveq #24,d0
   12248:	       add.l 56(sp),d0
   1224c:	       move.l d0,-(sp)
   1224e:	       jsr 14be4 <trimStack>
   12254:	       addq.l #4,sp
	if (failSecurityCheck(newnam)) return BR_ERROR;
   12256:	       move.l 40(sp),-(sp)
   1225a:	       jsr ddb6 <failSecurityCheck>
   12260:	       addq.l #4,sp
   12262:	       tst.w d0
   12264:	   /-- beq.s 1226c <builtIn_renameFile+0x54>
   12266:	   |   moveq #1,d0
   12268:	/--|-- bra.w 12352 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   1226c:	|  \-> move.l 44(sp),36(sp)
   12272:	|      move.l 1a7a4 <SysBase>,d0
   12278:	|      movea.l d0,a6
   1227a:	|      movea.l 36(sp),a1
   1227e:	|      jsr -690(a6)

	temp = getTextFromAnyVar(&(fun->stack->thisVar));
   12282:	|      movea.l 56(sp),a0
   12286:	|      move.l 24(a0),d0
   1228a:	|      move.l d0,-(sp)
   1228c:	|      jsr 14836 <getTextFromAnyVar>
   12292:	|      addq.l #4,sp
   12294:	|      move.l d0,44(sp)
	char * nam = encodeFilename(temp);
   12298:	|      move.l 44(sp),-(sp)
   1229c:	|      jsr 2fe <encodeFilename>
   122a2:	|      addq.l #4,sp
   122a4:	|      move.l d0,32(sp)
	trimStack(&fun->stack);
   122a8:	|      moveq #24,d0
   122aa:	|      add.l 56(sp),d0
   122ae:	|      move.l d0,-(sp)
   122b0:	|      jsr 14be4 <trimStack>
   122b6:	|      addq.l #4,sp
	if (failSecurityCheck(nam)) return BR_ERROR;
   122b8:	|      move.l 32(sp),-(sp)
   122bc:	|      jsr ddb6 <failSecurityCheck>
   122c2:	|      addq.l #4,sp
   122c4:	|      tst.w d0
   122c6:	|  /-- beq.s 122ce <builtIn_renameFile+0xb6>
   122c8:	|  |   moveq #1,d0
   122ca:	+--|-- bra.w 12352 <builtIn_renameFile+0x13a>
	FreeVec(temp);
   122ce:	|  \-> move.l 44(sp),28(sp)
   122d4:	|      move.l 1a7a4 <SysBase>,d0
   122da:	|      movea.l d0,a6
   122dc:	|      movea.l 28(sp),a1
   122e0:	|      jsr -690(a6)

	setVariable(&fun->reg, SVT_INT, Rename(nam, newnam));
   122e4:	|      move.l 32(sp),24(sp)
   122ea:	|      move.l 40(sp),20(sp)
   122f0:	|      move.l 1a7ac <DOSBase>,d0
   122f6:	|      movea.l d0,a6
   122f8:	|      move.l 24(sp),d1
   122fc:	|      move.l 20(sp),d2
   12300:	|      jsr -78(a6)
   12304:	|      move.l d0,16(sp)
   12308:	|      move.l 16(sp),d1
   1230c:	|      moveq #28,d0
   1230e:	|      add.l 56(sp),d0
   12312:	|      move.l d1,-(sp)
   12314:	|      pea 1 <_start+0x1>
   12318:	|      move.l d0,-(sp)
   1231a:	|      jsr 14b52 <setVariable>
   12320:	|      lea 12(sp),sp
	FreeVec(nam);
   12324:	|      move.l 32(sp),12(sp)
   1232a:	|      move.l 1a7a4 <SysBase>,d0
   12330:	|      movea.l d0,a6
   12332:	|      movea.l 12(sp),a1
   12336:	|      jsr -690(a6)
	FreeVec(newnam);
   1233a:	|      move.l 40(sp),8(sp)
   12340:	|      move.l 1a7a4 <SysBase>,d0
   12346:	|      movea.l d0,a6
   12348:	|      movea.l 8(sp),a1
   1234c:	|      jsr -690(a6)

	return BR_CONTINUE;
   12350:	|      moveq #2,d0
}
   12352:	\----> move.l (sp)+,d2
   12354:	       movea.l (sp)+,a6
   12356:	       lea 40(sp),sp
   1235a:	       rts

0001235c <builtIn_cacheSound>:

builtIn(cacheSound)
{
   1235c:	       subq.l #4,sp
	UNUSEDALL
	int fileNumber;
	if (! getValueType(&fileNumber, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   1235e:	       movea.l 12(sp),a0
   12362:	       move.l 24(a0),d0
   12366:	       move.l d0,-(sp)
   12368:	       pea 5 <_start+0x5>
   1236c:	       move.l sp,d0
   1236e:	       addq.l #8,d0
   12370:	       move.l d0,-(sp)
   12372:	       jsr 14260 <getValueType>
   12378:	       lea 12(sp),sp
   1237c:	       tst.w d0
   1237e:	   /-- bne.s 12384 <builtIn_cacheSound+0x28>
   12380:	   |   moveq #1,d0
   12382:	/--|-- bra.s 123ac <builtIn_cacheSound+0x50>
	trimStack (&fun -> stack);
   12384:	|  \-> moveq #24,d0
   12386:	|      add.l 12(sp),d0
   1238a:	|      move.l d0,-(sp)
   1238c:	|      jsr 14be4 <trimStack>
   12392:	|      addq.l #4,sp
	if (cacheSound (fileNumber) == -1) return BR_ERROR;
   12394:	|      move.l (sp),d0
   12396:	|      move.l d0,-(sp)
   12398:	|      jsr cbfe <cacheSound>
   1239e:	|      addq.l #4,sp
   123a0:	|      moveq #-1,d1
   123a2:	|      cmp.l d0,d1
   123a4:	|  /-- bne.s 123aa <builtIn_cacheSound+0x4e>
   123a6:	|  |   moveq #1,d0
   123a8:	+--|-- bra.s 123ac <builtIn_cacheSound+0x50>
	return BR_CONTINUE;
   123aa:	|  \-> moveq #2,d0
}
   123ac:	\----> addq.l #4,sp
   123ae:	       rts

000123b0 <builtIn_burnString>:
	trimStack (&fun -> stack);
	if (x == IN_THE_CENTRE) x = (winWidth - stringWidth (newText)) >> 1;
	fixFont (pastePalette);
	burnStringToBackdrop (newText, x, y, pastePalette);
	delete[] newText; Todo: Amigize this*/
	KPrintF("burnString: Not implemented for Amiga yet");
   123b0:	pea 1962a <graphics.c.1c13408a+0x3ec>
   123b6:	jsr 16c5e <KPrintF>
   123bc:	addq.l #4,sp
	return BR_CONTINUE;
   123be:	moveq #2,d0
}
   123c0:	rts

000123c2 <builtIn_setCharacterSpinSpeed>:

builtIn(setCharacterSpinSpeed)
{
   123c2:	          lea -12(sp),sp
	UNUSEDALL
	int speed, who;
	if (! getValueType(&speed, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   123c6:	          movea.l 20(sp),a0
   123ca:	          move.l 24(a0),d0
   123ce:	          move.l d0,-(sp)
   123d0:	          pea 1 <_start+0x1>
   123d4:	          moveq #12,d0
   123d6:	          add.l sp,d0
   123d8:	          move.l d0,-(sp)
   123da:	          jsr 14260 <getValueType>
   123e0:	          lea 12(sp),sp
   123e4:	          tst.w d0
   123e6:	      /-- bne.s 123ee <builtIn_setCharacterSpinSpeed+0x2c>
   123e8:	      |   moveq #1,d0
   123ea:	/-----|-- bra.w 12488 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   123ee:	|     \-> moveq #24,d0
   123f0:	|         add.l 20(sp),d0
   123f4:	|         move.l d0,-(sp)
   123f6:	|         jsr 14be4 <trimStack>
   123fc:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   123fe:	|         movea.l 20(sp),a0
   12402:	|         move.l 24(a0),d0
   12406:	|         move.l d0,-(sp)
   12408:	|         pea 7 <_start+0x7>
   1240c:	|         lea 8(sp),a0
   12410:	|         move.l a0,-(sp)
   12412:	|         jsr 14260 <getValueType>
   12418:	|         lea 12(sp),sp
   1241c:	|         tst.w d0
   1241e:	|     /-- bne.s 12424 <builtIn_setCharacterSpinSpeed+0x62>
   12420:	|     |   moveq #1,d0
   12422:	+-----|-- bra.s 12488 <builtIn_setCharacterSpinSpeed+0xc6>
	trimStack (&fun -> stack);
   12424:	|     \-> moveq #24,d0
   12426:	|         add.l 20(sp),d0
   1242a:	|         move.l d0,-(sp)
   1242c:	|         jsr 14be4 <trimStack>
   12432:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12434:	|         move.l (sp),d0
   12436:	|         move.l d0,-(sp)
   12438:	|         jsr a0f4 <findPerson>
   1243e:	|         addq.l #4,sp
   12440:	|         move.l d0,8(sp)

	if (thisPerson) {
   12444:	|  /----- beq.s 1246e <builtIn_setCharacterSpinSpeed+0xac>
		thisPerson -> spinSpeed = speed;
   12446:	|  |      move.l 4(sp),d0
   1244a:	|  |      movea.l 8(sp),a0
   1244e:	|  |      move.l d0,122(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   12452:	|  |      moveq #28,d0
   12454:	|  |      add.l 20(sp),d0
   12458:	|  |      pea 1 <_start+0x1>
   1245c:	|  |      pea 1 <_start+0x1>
   12460:	|  |      move.l d0,-(sp)
   12462:	|  |      jsr 14b52 <setVariable>
   12468:	|  |      lea 12(sp),sp
   1246c:	|  |  /-- bra.s 12486 <builtIn_setCharacterSpinSpeed+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1246e:	|  \--|-> moveq #28,d0
   12470:	|     |   add.l 20(sp),d0
   12474:	|     |   clr.l -(sp)
   12476:	|     |   pea 1 <_start+0x1>
   1247a:	|     |   move.l d0,-(sp)
   1247c:	|     |   jsr 14b52 <setVariable>
   12482:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12486:	|     \-> moveq #2,d0
}
   12488:	\-------> lea 12(sp),sp
   1248c:	          rts

0001248e <builtIn_setCharacterAngleOffset>:

builtIn(setCharacterAngleOffset)
{
   1248e:	          lea -12(sp),sp
	UNUSEDALL
	int angle, who;
	if (! getValueType(&angle, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12492:	          movea.l 20(sp),a0
   12496:	          move.l 24(a0),d0
   1249a:	          move.l d0,-(sp)
   1249c:	          pea 1 <_start+0x1>
   124a0:	          moveq #12,d0
   124a2:	          add.l sp,d0
   124a4:	          move.l d0,-(sp)
   124a6:	          jsr 14260 <getValueType>
   124ac:	          lea 12(sp),sp
   124b0:	          tst.w d0
   124b2:	      /-- bne.s 124ba <builtIn_setCharacterAngleOffset+0x2c>
   124b4:	      |   moveq #1,d0
   124b6:	/-----|-- bra.w 12554 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   124ba:	|     \-> moveq #24,d0
   124bc:	|         add.l 20(sp),d0
   124c0:	|         move.l d0,-(sp)
   124c2:	|         jsr 14be4 <trimStack>
   124c8:	|         addq.l #4,sp
	if (! getValueType(&who, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   124ca:	|         movea.l 20(sp),a0
   124ce:	|         move.l 24(a0),d0
   124d2:	|         move.l d0,-(sp)
   124d4:	|         pea 7 <_start+0x7>
   124d8:	|         lea 8(sp),a0
   124dc:	|         move.l a0,-(sp)
   124de:	|         jsr 14260 <getValueType>
   124e4:	|         lea 12(sp),sp
   124e8:	|         tst.w d0
   124ea:	|     /-- bne.s 124f0 <builtIn_setCharacterAngleOffset+0x62>
   124ec:	|     |   moveq #1,d0
   124ee:	+-----|-- bra.s 12554 <builtIn_setCharacterAngleOffset+0xc6>
	trimStack (&fun -> stack);
   124f0:	|     \-> moveq #24,d0
   124f2:	|         add.l 20(sp),d0
   124f6:	|         move.l d0,-(sp)
   124f8:	|         jsr 14be4 <trimStack>
   124fe:	|         addq.l #4,sp

	struct onScreenPerson * thisPerson = findPerson (who);
   12500:	|         move.l (sp),d0
   12502:	|         move.l d0,-(sp)
   12504:	|         jsr a0f4 <findPerson>
   1250a:	|         addq.l #4,sp
   1250c:	|         move.l d0,8(sp)

	if (thisPerson) {
   12510:	|  /----- beq.s 1253a <builtIn_setCharacterAngleOffset+0xac>
		thisPerson -> angleOffset = angle;
   12512:	|  |      move.l 4(sp),d0
   12516:	|  |      movea.l 8(sp),a0
   1251a:	|  |      move.l d0,100(a0)
		setVariable (&fun -> reg, SVT_INT, 1);
   1251e:	|  |      moveq #28,d0
   12520:	|  |      add.l 20(sp),d0
   12524:	|  |      pea 1 <_start+0x1>
   12528:	|  |      pea 1 <_start+0x1>
   1252c:	|  |      move.l d0,-(sp)
   1252e:	|  |      jsr 14b52 <setVariable>
   12534:	|  |      lea 12(sp),sp
   12538:	|  |  /-- bra.s 12552 <builtIn_setCharacterAngleOffset+0xc4>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   1253a:	|  \--|-> moveq #28,d0
   1253c:	|     |   add.l 20(sp),d0
   12540:	|     |   clr.l -(sp)
   12542:	|     |   pea 1 <_start+0x1>
   12546:	|     |   move.l d0,-(sp)
   12548:	|     |   jsr 14b52 <setVariable>
   1254e:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12552:	|     \-> moveq #2,d0
}
   12554:	\-------> lea 12(sp),sp
   12558:	          rts

0001255a <builtIn_transitionMode>:


builtIn(transitionMode)
{
   1255a:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   1255c:	       movea.l 12(sp),a0
   12560:	       move.l 24(a0),d0
   12564:	       move.l d0,-(sp)
   12566:	       pea 1 <_start+0x1>
   1256a:	       move.l sp,d0
   1256c:	       addq.l #8,d0
   1256e:	       move.l d0,-(sp)
   12570:	       jsr 14260 <getValueType>
   12576:	       lea 12(sp),sp
   1257a:	       tst.w d0
   1257c:	   /-- bne.s 12582 <builtIn_transitionMode+0x28>
   1257e:	   |   moveq #1,d0
   12580:	/--|-- bra.s 125b8 <builtIn_transitionMode+0x5e>
	fadeMode = n;
   12582:	|  \-> move.l (sp),d0
   12584:	|      move.l d0,d0
   12586:	|      move.b d0,1a67e <fadeMode>
	trimStack (&fun -> stack);
   1258c:	|      moveq #24,d0
   1258e:	|      add.l 12(sp),d0
   12592:	|      move.l d0,-(sp)
   12594:	|      jsr 14be4 <trimStack>
   1259a:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   1259c:	|      moveq #28,d0
   1259e:	|      add.l 12(sp),d0
   125a2:	|      pea 1 <_start+0x1>
   125a6:	|      pea 1 <_start+0x1>
   125aa:	|      move.l d0,-(sp)
   125ac:	|      jsr 14b52 <setVariable>
   125b2:	|      lea 12(sp),sp
	return BR_CONTINUE;
   125b6:	|      moveq #2,d0
}
   125b8:	\----> addq.l #4,sp
   125ba:	       rts

000125bc <builtIn__rem_updateDisplay>:

// Removed function - does nothing
builtIn(_rem_updateDisplay)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   125bc:	moveq #24,d0
   125be:	add.l 8(sp),d0
   125c2:	move.l d0,-(sp)
   125c4:	jsr 14be4 <trimStack>
   125ca:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, TRUE);
   125cc:	moveq #28,d0
   125ce:	add.l 8(sp),d0
   125d2:	pea 1 <_start+0x1>
   125d6:	pea 1 <_start+0x1>
   125da:	move.l d0,-(sp)
   125dc:	jsr 14b52 <setVariable>
   125e2:	lea 12(sp),sp
	return BR_CONTINUE;
   125e6:	moveq #2,d0
}
   125e8:	rts

000125ea <builtIn_getSoundCache>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getSoundCacheStack (&fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this?*/
	KPrintF("getSoundCache: Not implemented yet for Amiga");
   125ea:	pea 19654 <newfatal.c.307beca7+0x16>
   125f0:	jsr 16c5e <KPrintF>
   125f6:	addq.l #4,sp
	return BR_CONTINUE;
   125f8:	moveq #2,d0
}
   125fa:	rts

000125fc <builtIn_saveCustomData>:

builtIn(saveCustomData)
{
   125fc:	       lea -16(sp),sp
   12600:	       move.l a6,-(sp)
	UNUSEDALL
	// saveCustomData (thisStack, fileName);
	char * fileNameB = getTextFromAnyVar(&(fun->stack->thisVar));
   12602:	       movea.l 28(sp),a0
   12606:	       move.l 24(a0),d0
   1260a:	       move.l d0,-(sp)
   1260c:	       jsr 14836 <getTextFromAnyVar>
   12612:	       addq.l #4,sp
   12614:	       move.l d0,16(sp)
	if (!fileNameB) return BR_ERROR;
   12618:	   /-- bne.s 12620 <builtIn_saveCustomData+0x24>
   1261a:	   |   moveq #1,d0
   1261c:	/--|-- bra.w 126d2 <builtIn_saveCustomData+0xd6>

	char * fileName = encodeFilename(fileNameB);
   12620:	|  \-> move.l 16(sp),-(sp)
   12624:	|      jsr 2fe <encodeFilename>
   1262a:	|      addq.l #4,sp
   1262c:	|      move.l d0,12(sp)
	FreeVec(fileNameB);
   12630:	|      move.l 16(sp),8(sp)
   12636:	|      move.l 1a7a4 <SysBase>,d0
   1263c:	|      movea.l d0,a6
   1263e:	|      movea.l 8(sp),a1
   12642:	|      jsr -690(a6)

	if (failSecurityCheck(fileName)) return BR_ERROR;
   12646:	|      move.l 12(sp),-(sp)
   1264a:	|      jsr ddb6 <failSecurityCheck>
   12650:	|      addq.l #4,sp
   12652:	|      tst.w d0
   12654:	|  /-- beq.s 1265a <builtIn_saveCustomData+0x5e>
   12656:	|  |   moveq #1,d0
   12658:	+--|-- bra.s 126d2 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   1265a:	|  \-> moveq #24,d0
   1265c:	|      add.l 28(sp),d0
   12660:	|      move.l d0,-(sp)
   12662:	|      jsr 14be4 <trimStack>
   12668:	|      addq.l #4,sp

	if (fun->stack->thisVar.varType != SVT_STACK) {
   1266a:	|      movea.l 28(sp),a0
   1266e:	|      movea.l 24(a0),a0
   12672:	|      move.l (a0),d0
   12674:	|      moveq #6,d1
   12676:	|      cmp.l d0,d1
   12678:	|  /-- beq.s 1268c <builtIn_saveCustomData+0x90>
		KPrintF("First parameter isn't a stack");
   1267a:	|  |   pea 19681 <newfatal.c.307beca7+0x43>
   12680:	|  |   jsr 16c5e <KPrintF>
   12686:	|  |   addq.l #4,sp
		return BR_ERROR;
   12688:	|  |   moveq #1,d0
   1268a:	+--|-- bra.s 126d2 <builtIn_saveCustomData+0xd6>
	}
	if (!stackToFile(fileName, &fun->stack->thisVar)) return BR_ERROR;
   1268c:	|  \-> movea.l 28(sp),a0
   12690:	|      move.l 24(a0),d0
   12694:	|      move.l d0,-(sp)
   12696:	|      move.l 16(sp),-(sp)
   1269a:	|      jsr da06 <stackToFile>
   126a0:	|      addq.l #8,sp
   126a2:	|      tst.w d0
   126a4:	|  /-- bne.s 126aa <builtIn_saveCustomData+0xae>
   126a6:	|  |   moveq #1,d0
   126a8:	+--|-- bra.s 126d2 <builtIn_saveCustomData+0xd6>
	trimStack(&fun->stack);
   126aa:	|  \-> moveq #24,d0
   126ac:	|      add.l 28(sp),d0
   126b0:	|      move.l d0,-(sp)
   126b2:	|      jsr 14be4 <trimStack>
   126b8:	|      addq.l #4,sp
	FreeVec(fileName);
   126ba:	|      move.l 12(sp),4(sp)
   126c0:	|      move.l 1a7a4 <SysBase>,d0
   126c6:	|      movea.l d0,a6
   126c8:	|      movea.l 4(sp),a1
   126cc:	|      jsr -690(a6)
	return BR_CONTINUE;
   126d0:	|      moveq #2,d0
}
   126d2:	\----> movea.l (sp)+,a6
   126d4:	       lea 16(sp),sp
   126d8:	       rts

000126da <builtIn_loadCustomData>:

builtIn(loadCustomData)
{
   126da:	       lea -28(sp),sp
   126de:	       move.l a6,-(sp)
	UNUSEDALL

	char * newTextA = getTextFromAnyVar(&(fun->stack->thisVar));
   126e0:	       movea.l 40(sp),a0
   126e4:	       move.l 24(a0),d0
   126e8:	       move.l d0,-(sp)
   126ea:	       jsr 14836 <getTextFromAnyVar>
   126f0:	       addq.l #4,sp
   126f2:	       move.l d0,28(sp)
	if (!newTextA) return BR_ERROR;
   126f6:	   /-- bne.s 126fe <builtIn_loadCustomData+0x24>
   126f8:	   |   moveq #1,d0
   126fa:	/--|-- bra.w 127fa <builtIn_loadCustomData+0x120>

	char * newText = encodeFilename(newTextA);
   126fe:	|  \-> move.l 28(sp),-(sp)
   12702:	|      jsr 2fe <encodeFilename>
   12708:	|      addq.l #4,sp
   1270a:	|      move.l d0,24(sp)
	FreeVec(newTextA);
   1270e:	|      move.l 28(sp),20(sp)
   12714:	|      move.l 1a7a4 <SysBase>,d0
   1271a:	|      movea.l d0,a6
   1271c:	|      movea.l 20(sp),a1
   12720:	|      jsr -690(a6)

	if (failSecurityCheck(newText)) return BR_ERROR;
   12724:	|      move.l 24(sp),-(sp)
   12728:	|      jsr ddb6 <failSecurityCheck>
   1272e:	|      addq.l #4,sp
   12730:	|      tst.w d0
   12732:	|  /-- beq.s 1273a <builtIn_loadCustomData+0x60>
   12734:	|  |   moveq #1,d0
   12736:	+--|-- bra.w 127fa <builtIn_loadCustomData+0x120>
	trimStack(&fun->stack);
   1273a:	|  \-> moveq #24,d0
   1273c:	|      add.l 40(sp),d0
   12740:	|      move.l d0,-(sp)
   12742:	|      jsr 14be4 <trimStack>
   12748:	|      addq.l #4,sp

	unlinkVar(&fun->reg);
   1274a:	|      moveq #28,d0
   1274c:	|      add.l 40(sp),d0
   12750:	|      move.l d0,-(sp)
   12752:	|      jsr 144ae <unlinkVar>
   12758:	|      addq.l #4,sp
	fun->reg.varType = SVT_STACK;
   1275a:	|      movea.l 40(sp),a0
   1275e:	|      moveq #6,d0
   12760:	|      move.l d0,28(a0)
	fun->reg.varData.theStack = AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   12764:	|      moveq #12,d0
   12766:	|      move.l d0,16(sp)
   1276a:	|      clr.l 12(sp)
   1276e:	|      move.l 1a7a4 <SysBase>,d0
   12774:	|      movea.l d0,a6
   12776:	|      move.l 16(sp),d0
   1277a:	|      move.l 12(sp),d1
   1277e:	|      jsr -684(a6)
   12782:	|      move.l d0,8(sp)
   12786:	|      move.l 8(sp),d0
   1278a:	|      movea.l 40(sp),a0
   1278e:	|      move.l d0,32(a0)
	if (!fun->reg.varData.theStack) return BR_ERROR;
   12792:	|      movea.l 40(sp),a0
   12796:	|      move.l 32(a0),d0
   1279a:	|  /-- bne.s 127a0 <builtIn_loadCustomData+0xc6>
   1279c:	|  |   moveq #1,d0
   1279e:	+--|-- bra.s 127fa <builtIn_loadCustomData+0x120>
	fun->reg.varData.theStack->first = NULL;
   127a0:	|  \-> movea.l 40(sp),a0
   127a4:	|      movea.l 32(a0),a0
   127a8:	|      clr.l (a0)
	fun->reg.varData.theStack->last = NULL;
   127aa:	|      movea.l 40(sp),a0
   127ae:	|      movea.l 32(a0),a0
   127b2:	|      clr.l 4(a0)
	fun->reg.varData.theStack->timesUsed = 1;
   127b6:	|      movea.l 40(sp),a0
   127ba:	|      movea.l 32(a0),a0
   127be:	|      moveq #1,d0
   127c0:	|      move.l d0,8(a0)
	if (!fileToStack(newText, fun->reg.varData.theStack)) return BR_ERROR;
   127c4:	|      movea.l 40(sp),a0
   127c8:	|      move.l 32(a0),d0
   127cc:	|      move.l d0,-(sp)
   127ce:	|      move.l 28(sp),-(sp)
   127d2:	|      jsr d440 <fileToStack>
   127d8:	|      addq.l #8,sp
   127da:	|      tst.w d0
   127dc:	|  /-- bne.s 127e2 <builtIn_loadCustomData+0x108>
   127de:	|  |   moveq #1,d0
   127e0:	+--|-- bra.s 127fa <builtIn_loadCustomData+0x120>
	FreeVec(newText);
   127e2:	|  \-> move.l 24(sp),4(sp)
   127e8:	|      move.l 1a7a4 <SysBase>,d0
   127ee:	|      movea.l d0,a6
   127f0:	|      movea.l 4(sp),a1
   127f4:	|      jsr -690(a6)
	return BR_CONTINUE;
   127f8:	|      moveq #2,d0
}
   127fa:	\----> movea.l (sp)+,a6
   127fc:	       lea 28(sp),sp
   12800:	       rts

00012802 <builtIn_setCustomEncoding>:

builtIn(setCustomEncoding)
{
   12802:	       subq.l #4,sp
	UNUSEDALL
	int n;
	if (! getValueType(&n, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12804:	       movea.l 12(sp),a0
   12808:	       move.l 24(a0),d0
   1280c:	       move.l d0,-(sp)
   1280e:	       pea 1 <_start+0x1>
   12812:	       move.l sp,d0
   12814:	       addq.l #8,d0
   12816:	       move.l d0,-(sp)
   12818:	       jsr 14260 <getValueType>
   1281e:	       lea 12(sp),sp
   12822:	       tst.w d0
   12824:	   /-- bne.s 1282a <builtIn_setCustomEncoding+0x28>
   12826:	   |   moveq #1,d0
   12828:	/--|-- bra.s 12860 <builtIn_setCustomEncoding+0x5e>
	saveEncoding = n;
   1282a:	|  \-> move.l (sp),d0
   1282c:	|      move.l d0,d0
   1282e:	|      move.w d0,1a8b0 <saveEncoding>
	trimStack (&fun -> stack);
   12834:	|      moveq #24,d0
   12836:	|      add.l 12(sp),d0
   1283a:	|      move.l d0,-(sp)
   1283c:	|      jsr 14be4 <trimStack>
   12842:	|      addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 1);
   12844:	|      moveq #28,d0
   12846:	|      add.l 12(sp),d0
   1284a:	|      pea 1 <_start+0x1>
   1284e:	|      pea 1 <_start+0x1>
   12852:	|      move.l d0,-(sp)
   12854:	|      jsr 14b52 <setVariable>
   1285a:	|      lea 12(sp),sp
	return BR_CONTINUE;
   1285e:	|      moveq #2,d0
}
   12860:	\----> addq.l #4,sp
   12862:	       rts

00012864 <builtIn_freeSound>:

builtIn(freeSound)
{
   12864:	       subq.l #4,sp
	UNUSEDALL
	int v;
	if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12866:	       movea.l 12(sp),a0
   1286a:	       move.l 24(a0),d0
   1286e:	       move.l d0,-(sp)
   12870:	       pea 5 <_start+0x5>
   12874:	       move.l sp,d0
   12876:	       addq.l #8,d0
   12878:	       move.l d0,-(sp)
   1287a:	       jsr 14260 <getValueType>
   12880:	       lea 12(sp),sp
   12884:	       tst.w d0
   12886:	   /-- bne.s 1288c <builtIn_freeSound+0x28>
   12888:	   |   moveq #1,d0
   1288a:	/--|-- bra.s 128aa <builtIn_freeSound+0x46>
	trimStack (&fun -> stack);
   1288c:	|  \-> moveq #24,d0
   1288e:	|      add.l 12(sp),d0
   12892:	|      move.l d0,-(sp)
   12894:	|      jsr 14be4 <trimStack>
   1289a:	|      addq.l #4,sp
	huntKillFreeSound (v);
   1289c:	|      move.l (sp),d0
   1289e:	|      move.l d0,-(sp)
   128a0:	|      jsr cc02 <huntKillFreeSound>
   128a6:	|      addq.l #4,sp
	return BR_CONTINUE;
   128a8:	|      moveq #2,d0
}
   128aa:	\----> addq.l #4,sp
   128ac:	       rts

000128ae <builtIn_parallaxAdd>:

builtIn(parallaxAdd)
{
   128ae:	       lea -12(sp),sp
   128b2:	       move.l d2,-(sp)
	/*if (frozenStuff) {
		fatal ("Can't set background parallax image while frozen");
		return BR_ERROR;
	} else { Todo: Amigize this*/
		int wrapX, wrapY, v;
		if (! getValueType(&wrapY, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   128b4:	       movea.l 24(sp),a0
   128b8:	       move.l 24(a0),d0
   128bc:	       move.l d0,-(sp)
   128be:	       pea 1 <_start+0x1>
   128c2:	       moveq #16,d0
   128c4:	       add.l sp,d0
   128c6:	       move.l d0,-(sp)
   128c8:	       jsr 14260 <getValueType>
   128ce:	       lea 12(sp),sp
   128d2:	       tst.w d0
   128d4:	   /-- bne.s 128dc <builtIn_parallaxAdd+0x2e>
   128d6:	   |   moveq #1,d0
   128d8:	/--|-- bra.w 129b0 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   128dc:	|  \-> moveq #24,d0
   128de:	|      add.l 24(sp),d0
   128e2:	|      move.l d0,-(sp)
   128e4:	|      jsr 14be4 <trimStack>
   128ea:	|      addq.l #4,sp
		if (! getValueType(&wrapX, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   128ec:	|      movea.l 24(sp),a0
   128f0:	|      move.l 24(a0),d0
   128f4:	|      move.l d0,-(sp)
   128f6:	|      pea 1 <_start+0x1>
   128fa:	|      moveq #20,d0
   128fc:	|      add.l sp,d0
   128fe:	|      move.l d0,-(sp)
   12900:	|      jsr 14260 <getValueType>
   12906:	|      lea 12(sp),sp
   1290a:	|      tst.w d0
   1290c:	|  /-- bne.s 12914 <builtIn_parallaxAdd+0x66>
   1290e:	|  |   moveq #1,d0
   12910:	+--|-- bra.w 129b0 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   12914:	|  \-> moveq #24,d0
   12916:	|      add.l 24(sp),d0
   1291a:	|      move.l d0,-(sp)
   1291c:	|      jsr 14be4 <trimStack>
   12922:	|      addq.l #4,sp
		if (! getValueType(&v, SVT_FILE,&fun -> stack -> thisVar)) return BR_ERROR;
   12924:	|      movea.l 24(sp),a0
   12928:	|      move.l 24(a0),d0
   1292c:	|      move.l d0,-(sp)
   1292e:	|      pea 5 <_start+0x5>
   12932:	|      lea 12(sp),a0
   12936:	|      move.l a0,-(sp)
   12938:	|      jsr 14260 <getValueType>
   1293e:	|      lea 12(sp),sp
   12942:	|      tst.w d0
   12944:	|  /-- bne.s 1294a <builtIn_parallaxAdd+0x9c>
   12946:	|  |   moveq #1,d0
   12948:	+--|-- bra.s 129b0 <builtIn_parallaxAdd+0x102>
		trimStack (&fun -> stack);
   1294a:	|  \-> moveq #24,d0
   1294c:	|      add.l 24(sp),d0
   12950:	|      move.l d0,-(sp)
   12952:	|      jsr 14be4 <trimStack>
   12958:	|      addq.l #4,sp

		if (! loadParallax (v, wrapX, wrapY)) return BR_ERROR;
   1295a:	|      move.l 8(sp),d0
   1295e:	|      move.l d0,d0
   12960:	|      moveq #0,d2
   12962:	|      move.w d0,d2
   12964:	|      move.l 12(sp),d0
   12968:	|      move.l d0,d0
   1296a:	|      moveq #0,d1
   1296c:	|      move.w d0,d1
   1296e:	|      move.l 4(sp),d0
   12972:	|      move.l d0,d0
   12974:	|      move.w d0,d0
   12976:	|      andi.l #65535,d0
   1297c:	|      move.l d2,-(sp)
   1297e:	|      move.l d1,-(sp)
   12980:	|      move.l d0,-(sp)
   12982:	|      jsr ce1e <loadParallax>
   12988:	|      lea 12(sp),sp
   1298c:	|      tst.w d0
   1298e:	|  /-- bne.s 12994 <builtIn_parallaxAdd+0xe6>
   12990:	|  |   moveq #1,d0
   12992:	+--|-- bra.s 129b0 <builtIn_parallaxAdd+0x102>
		setVariable (&fun -> reg, SVT_INT, 1);
   12994:	|  \-> moveq #28,d0
   12996:	|      add.l 24(sp),d0
   1299a:	|      pea 1 <_start+0x1>
   1299e:	|      pea 1 <_start+0x1>
   129a2:	|      move.l d0,-(sp)
   129a4:	|      jsr 14b52 <setVariable>
   129aa:	|      lea 12(sp),sp
	//}
	return BR_CONTINUE;
   129ae:	|      moveq #2,d0
}
   129b0:	\----> move.l (sp)+,d2
   129b2:	       lea 12(sp),sp
   129b6:	       rts

000129b8 <builtIn_parallaxClear>:

builtIn(parallaxClear)
{
	UNUSEDALL
	killParallax ();
   129b8:	jsr cd56 <killParallax>
	setVariable (&fun -> reg, SVT_INT, 1);
   129be:	moveq #28,d0
   129c0:	add.l 8(sp),d0
   129c4:	pea 1 <_start+0x1>
   129c8:	pea 1 <_start+0x1>
   129cc:	move.l d0,-(sp)
   129ce:	jsr 14b52 <setVariable>
   129d4:	lea 12(sp),sp
	return BR_CONTINUE;
   129d8:	moveq #2,d0
}
   129da:	rts

000129dc <builtIn_getPixelColour>:
	if (! checkNew (&fun -> reg.varData.theStack)) return BR_ERROR;
	fun -> reg.varData.theStack -> first = NULL;
	fun -> reg.varData.theStack -> last = NULL;
	fun -> reg.varData.theStack -> timesUsed = 1;
	if (! getRGBIntoStack (x, y, &fun -> reg.varData.theStack)) return BR_ERROR; Todo: Amigize this*/
	KPrintF("getPixelColor: Not implemented for Amiga");
   129dc:	pea 1969f <newfatal.c.307beca7+0x61>
   129e2:	jsr 16c5e <KPrintF>
   129e8:	addq.l #4,sp

	return BR_CONTINUE;
   129ea:	moveq #2,d0
}
   129ec:	rts

000129ee <builtIn_makeFastArray>:

builtIn(makeFastArray)
{
   129ee:	             subq.l #8,sp
	UNUSEDALL
	switch (fun -> stack -> thisVar.varType) {
   129f0:	             movea.l 16(sp),a0
   129f4:	             movea.l 24(a0),a0
   129f8:	             move.l (a0),d0
   129fa:	             moveq #1,d1
   129fc:	             cmp.l d0,d1
   129fe:	      /----- beq.s 12a46 <builtIn_makeFastArray+0x58>
   12a00:	      |      moveq #6,d1
   12a02:	      |      cmp.l d0,d1
   12a04:	/-----|----- bne.s 12a84 <builtIn_makeFastArray+0x96>
		case SVT_STACK:
		{
			BOOL success = makeFastArrayFromStack (&fun -> reg, fun -> stack -> thisVar.varData.theStack);
   12a06:	|     |      movea.l 16(sp),a0
   12a0a:	|     |      movea.l 24(a0),a0
   12a0e:	|     |      move.l 4(a0),d1
   12a12:	|     |      moveq #28,d0
   12a14:	|     |      add.l 16(sp),d0
   12a18:	|     |      move.l d1,-(sp)
   12a1a:	|     |      move.l d0,-(sp)
   12a1c:	|     |      jsr 14312 <makeFastArrayFromStack>
   12a22:	|     |      addq.l #8,sp
   12a24:	|     |      move.w d0,6(sp)
			trimStack (&fun -> stack);
   12a28:	|     |      moveq #24,d0
   12a2a:	|     |      add.l 16(sp),d0
   12a2e:	|     |      move.l d0,-(sp)
   12a30:	|     |      jsr 14be4 <trimStack>
   12a36:	|     |      addq.l #4,sp
			return success ? BR_CONTINUE : BR_ERROR;
   12a38:	|     |      tst.w 6(sp)
   12a3c:	|     |  /-- beq.s 12a42 <builtIn_makeFastArray+0x54>
   12a3e:	|     |  |   moveq #2,d0
   12a40:	|  /--|--|-- bra.s 12a96 <builtIn_makeFastArray+0xa8>
   12a42:	|  |  |  \-> moveq #1,d0
   12a44:	|  +--|----- bra.s 12a96 <builtIn_makeFastArray+0xa8>
		}
			break;

		case SVT_INT:
		{
			int i = fun -> stack -> thisVar.varData.intValue;
   12a46:	|  |  \----> movea.l 16(sp),a0
   12a4a:	|  |         movea.l 24(a0),a0
   12a4e:	|  |         move.l 4(a0),2(sp)
			trimStack (&fun -> stack);
   12a54:	|  |         moveq #24,d0
   12a56:	|  |         add.l 16(sp),d0
   12a5a:	|  |         move.l d0,-(sp)
   12a5c:	|  |         jsr 14be4 <trimStack>
   12a62:	|  |         addq.l #4,sp
			return makeFastArraySize (&fun -> reg, i) ? BR_CONTINUE : BR_ERROR;
   12a64:	|  |         moveq #28,d0
   12a66:	|  |         add.l 16(sp),d0
   12a6a:	|  |         move.l 2(sp),-(sp)
   12a6e:	|  |         move.l d0,-(sp)
   12a70:	|  |         jsr 1437c <makeFastArraySize>
   12a76:	|  |         addq.l #8,sp
   12a78:	|  |         tst.w d0
   12a7a:	|  |     /-- beq.s 12a80 <builtIn_makeFastArray+0x92>
   12a7c:	|  |     |   moveq #2,d0
   12a7e:	|  +-----|-- bra.s 12a96 <builtIn_makeFastArray+0xa8>
   12a80:	|  |     \-> moveq #1,d0
   12a82:	|  +-------- bra.s 12a96 <builtIn_makeFastArray+0xa8>
		}
			break;

		default:
			break;
   12a84:	\--|-------> nop
	}
	KPrintF ("Parameter must be a number or a stack.");
   12a86:	   |         pea 196c8 <newfatal.c.307beca7+0x8a>
   12a8c:	   |         jsr 16c5e <KPrintF>
   12a92:	   |         addq.l #4,sp
	return BR_ERROR;
   12a94:	   |         moveq #1,d0
}
   12a96:	   \-------> addq.l #8,sp
   12a98:	             rts

00012a9a <builtIn_getCharacterScale>:

builtIn(getCharacterScale)
{
   12a9a:	          subq.l #8,sp
	UNUSEDALL
	int objectNumber;
	if (! getValueType(&objectNumber, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12a9c:	          movea.l 16(sp),a0
   12aa0:	          move.l 24(a0),d0
   12aa4:	          move.l d0,-(sp)
   12aa6:	          pea 7 <_start+0x7>
   12aaa:	          move.l sp,d0
   12aac:	          addq.l #8,d0
   12aae:	          move.l d0,-(sp)
   12ab0:	          jsr 14260 <getValueType>
   12ab6:	          lea 12(sp),sp
   12aba:	          tst.w d0
   12abc:	      /-- bne.s 12ac2 <builtIn_getCharacterScale+0x28>
   12abe:	      |   moveq #1,d0
   12ac0:	/-----|-- bra.s 12b3c <builtIn_getCharacterScale+0xa2>
	trimStack (&fun -> stack);
   12ac2:	|     \-> moveq #24,d0
   12ac4:	|         add.l 16(sp),d0
   12ac8:	|         move.l d0,-(sp)
   12aca:	|         jsr 14be4 <trimStack>
   12ad0:	|         addq.l #4,sp

	struct onScreenPerson * pers = findPerson (objectNumber);
   12ad2:	|         move.l (sp),d0
   12ad4:	|         move.l d0,-(sp)
   12ad6:	|         jsr a0f4 <findPerson>
   12adc:	|         addq.l #4,sp
   12ade:	|         move.l d0,4(sp)
	if (pers) {
   12ae2:	|  /----- beq.s 12b22 <builtIn_getCharacterScale+0x88>
		setVariable (&fun -> reg, SVT_INT, pers -> scale * (FLOAT) 100); 
   12ae4:	|  |      movea.l 4(sp),a0
   12ae8:	|  |      move.l 32(a0),d0
   12aec:	|  |      move.l #1120403456,-(sp)
   12af2:	|  |      move.l d0,-(sp)
   12af4:	|  |      jsr 1714c <__mulsf3>
   12afa:	|  |      addq.l #8,sp
   12afc:	|  |      move.l d0,-(sp)
   12afe:	|  |      jsr 17032 <__fixsfsi>
   12b04:	|  |      addq.l #4,sp
   12b06:	|  |      move.l d0,d1
   12b08:	|  |      moveq #28,d0
   12b0a:	|  |      add.l 16(sp),d0
   12b0e:	|  |      move.l d1,-(sp)
   12b10:	|  |      pea 1 <_start+0x1>
   12b14:	|  |      move.l d0,-(sp)
   12b16:	|  |      jsr 14b52 <setVariable>
   12b1c:	|  |      lea 12(sp),sp
   12b20:	|  |  /-- bra.s 12b3a <builtIn_getCharacterScale+0xa0>
	} else {
		setVariable (&fun -> reg, SVT_INT, 0);
   12b22:	|  \--|-> moveq #28,d0
   12b24:	|     |   add.l 16(sp),d0
   12b28:	|     |   clr.l -(sp)
   12b2a:	|     |   pea 1 <_start+0x1>
   12b2e:	|     |   move.l d0,-(sp)
   12b30:	|     |   jsr 14b52 <setVariable>
   12b36:	|     |   lea 12(sp),sp
	}
	return BR_CONTINUE;
   12b3a:	|     \-> moveq #2,d0
}
   12b3c:	\-------> addq.l #8,sp
   12b3e:	          rts

00012b40 <builtIn_getLanguageID>:

builtIn(getLanguageID)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, gameSettings.languageID);
   12b40:	move.l 1a8d4 <gameSettings>,d0
   12b46:	move.l d0,d1
   12b48:	moveq #28,d0
   12b4a:	add.l 8(sp),d0
   12b4e:	move.l d1,-(sp)
   12b50:	pea 1 <_start+0x1>
   12b54:	move.l d0,-(sp)
   12b56:	jsr 14b52 <setVariable>
   12b5c:	lea 12(sp),sp
	return BR_CONTINUE;
   12b60:	moveq #2,d0
}
   12b62:	rts

00012b64 <builtIn__rem_launchWith>:
// Removed function
builtIn(_rem_launchWith)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12b64:	moveq #24,d0
   12b66:	add.l 8(sp),d0
   12b6a:	move.l d0,-(sp)
   12b6c:	jsr 14be4 <trimStack>
   12b72:	addq.l #4,sp
	trimStack (&fun -> stack);
   12b74:	moveq #24,d0
   12b76:	add.l 8(sp),d0
   12b7a:	move.l d0,-(sp)
   12b7c:	jsr 14be4 <trimStack>
   12b82:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, FALSE);
   12b84:	moveq #28,d0
   12b86:	add.l 8(sp),d0
   12b8a:	clr.l -(sp)
   12b8c:	pea 1 <_start+0x1>
   12b90:	move.l d0,-(sp)
   12b92:	jsr 14b52 <setVariable>
   12b98:	lea 12(sp),sp

	return BR_CONTINUE;
   12b9c:	moveq #2,d0

}
   12b9e:	rts

00012ba0 <builtIn_getFramesPerSecond>:

builtIn(getFramesPerSecond)
{
	UNUSEDALL
	setVariable (&fun -> reg, SVT_INT, lastFramesPerSecond);
   12ba0:	move.l 1a124 <lastFramesPerSecond>,d1
   12ba6:	moveq #28,d0
   12ba8:	add.l 8(sp),d0
   12bac:	move.l d1,-(sp)
   12bae:	pea 1 <_start+0x1>
   12bb2:	move.l d0,-(sp)
   12bb4:	jsr 14b52 <setVariable>
   12bba:	lea 12(sp),sp
	return BR_CONTINUE;
   12bbe:	moveq #2,d0
}
   12bc0:	rts

00012bc2 <builtIn_showThumbnail>:
	//				deb ("aaaaa is still ", aaaaa);
	delete[] aaaaa;
	//				deb ("Deleted", "aaaaa");
	showThumbnail (file, x, y);
	delete[] file; Todo Amigize this?*/
	return BR_CONTINUE;
   12bc2:	moveq #2,d0
}
   12bc4:	rts

00012bc6 <builtIn_setThumbnailSize>:

builtIn(setThumbnailSize)
{
   12bc6:	          lea -52(sp),sp
	UNUSEDALL
	if (! getValueType(&thumbHeight, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12bca:	          movea.l 60(sp),a0
   12bce:	          move.l 24(a0),d0
   12bd2:	          move.l d0,-(sp)
   12bd4:	          pea 1 <_start+0x1>
   12bd8:	          pea 1a6ba <thumbHeight>
   12bde:	          jsr 14260 <getValueType>
   12be4:	          lea 12(sp),sp
   12be8:	          tst.w d0
   12bea:	      /-- bne.s 12bf2 <builtIn_setThumbnailSize+0x2c>
   12bec:	      |   moveq #1,d0
   12bee:	/-----|-- bra.w 12cae <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12bf2:	|     \-> moveq #24,d0
   12bf4:	|         add.l 60(sp),d0
   12bf8:	|         move.l d0,-(sp)
   12bfa:	|         jsr 14be4 <trimStack>
   12c00:	|         addq.l #4,sp
	if (! getValueType(&thumbWidth, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12c02:	|         movea.l 60(sp),a0
   12c06:	|         move.l 24(a0),d0
   12c0a:	|         move.l d0,-(sp)
   12c0c:	|         pea 1 <_start+0x1>
   12c10:	|         pea 1a6b6 <thumbWidth>
   12c16:	|         jsr 14260 <getValueType>
   12c1c:	|         lea 12(sp),sp
   12c20:	|         tst.w d0
   12c22:	|     /-- bne.s 12c2a <builtIn_setThumbnailSize+0x64>
   12c24:	|     |   moveq #1,d0
   12c26:	+-----|-- bra.w 12cae <builtIn_setThumbnailSize+0xe8>
	trimStack (&fun -> stack);
   12c2a:	|     \-> moveq #24,d0
   12c2c:	|         add.l 60(sp),d0
   12c30:	|         move.l d0,-(sp)
   12c32:	|         jsr 14be4 <trimStack>
   12c38:	|         addq.l #4,sp
	if (thumbWidth < 0 || thumbHeight < 0 || (unsigned int) thumbWidth > winWidth || (unsigned int) thumbHeight > winHeight) {
   12c3a:	|         move.l 1a6b6 <thumbWidth>,d0
   12c40:	|     /-- bmi.s 12c6e <builtIn_setThumbnailSize+0xa8>
   12c42:	|     |   move.l 1a6ba <thumbHeight>,d0
   12c48:	|     +-- bmi.s 12c6e <builtIn_setThumbnailSize+0xa8>
   12c4a:	|     |   move.l 1a6b6 <thumbWidth>,d0
   12c50:	|     |   move.l d0,d1
   12c52:	|     |   move.l 1a6f8 <winWidth>,d0
   12c58:	|     |   cmp.l d1,d0
   12c5a:	|     +-- bcs.s 12c6e <builtIn_setThumbnailSize+0xa8>
   12c5c:	|     |   move.l 1a6ba <thumbHeight>,d0
   12c62:	|     |   move.l d0,d1
   12c64:	|     |   move.l 1a6fc <winHeight>,d0
   12c6a:	|     |   cmp.l d1,d0
   12c6c:	|  /--|-- bcc.s 12cac <builtIn_setThumbnailSize+0xe6>
		char buff[50];
		sprintf (buff, "%d x %d", thumbWidth, thumbHeight);
   12c6e:	|  |  \-> move.l 1a6ba <thumbHeight>,d1
   12c74:	|  |      move.l 1a6b6 <thumbWidth>,d0
   12c7a:	|  |      move.l d1,-(sp)
   12c7c:	|  |      move.l d0,-(sp)
   12c7e:	|  |      pea 196ef <newfatal.c.307beca7+0xb1>
   12c84:	|  |      lea 14(sp),a0
   12c88:	|  |      move.l a0,-(sp)
   12c8a:	|  |      jsr 13a6a <sprintf>
   12c90:	|  |      lea 16(sp),sp
		KPrintF ("Invalid thumbnail size", buff);
   12c94:	|  |      lea 2(sp),a0
   12c98:	|  |      move.l a0,-(sp)
   12c9a:	|  |      pea 196f7 <newfatal.c.307beca7+0xb9>
   12ca0:	|  |      jsr 16c5e <KPrintF>
   12ca6:	|  |      addq.l #8,sp
		return BR_ERROR;
   12ca8:	|  |      moveq #1,d0
   12caa:	+--|----- bra.s 12cae <builtIn_setThumbnailSize+0xe8>
	}
	return BR_CONTINUE;
   12cac:	|  \----> moveq #2,d0
}
   12cae:	\-------> lea 52(sp),sp
   12cb2:	          rts

00012cb4 <builtIn_hasFlag>:

builtIn(hasFlag)
{
   12cb4:	       lea -12(sp),sp
   12cb8:	       move.l d2,-(sp)
	UNUSEDALL
	int objNum, flagIndex;
	if (! getValueType(&flagIndex, SVT_INT,&fun -> stack -> thisVar)) return BR_ERROR;
   12cba:	       movea.l 24(sp),a0
   12cbe:	       move.l 24(a0),d0
   12cc2:	       move.l d0,-(sp)
   12cc4:	       pea 1 <_start+0x1>
   12cc8:	       lea 12(sp),a0
   12ccc:	       move.l a0,-(sp)
   12cce:	       jsr 14260 <getValueType>
   12cd4:	       lea 12(sp),sp
   12cd8:	       tst.w d0
   12cda:	   /-- bne.s 12ce2 <builtIn_hasFlag+0x2e>
   12cdc:	   |   moveq #1,d0
   12cde:	/--|-- bra.w 12d72 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   12ce2:	|  \-> moveq #24,d0
   12ce4:	|      add.l 24(sp),d0
   12ce8:	|      move.l d0,-(sp)
   12cea:	|      jsr 14be4 <trimStack>
   12cf0:	|      addq.l #4,sp
	if (! getValueType(&objNum, SVT_OBJTYPE,&fun -> stack -> thisVar)) return BR_ERROR;
   12cf2:	|      movea.l 24(sp),a0
   12cf6:	|      move.l 24(a0),d0
   12cfa:	|      move.l d0,-(sp)
   12cfc:	|      pea 7 <_start+0x7>
   12d00:	|      moveq #16,d0
   12d02:	|      add.l sp,d0
   12d04:	|      move.l d0,-(sp)
   12d06:	|      jsr 14260 <getValueType>
   12d0c:	|      lea 12(sp),sp
   12d10:	|      tst.w d0
   12d12:	|  /-- bne.s 12d18 <builtIn_hasFlag+0x64>
   12d14:	|  |   moveq #1,d0
   12d16:	+--|-- bra.s 12d72 <builtIn_hasFlag+0xbe>
	trimStack (&fun -> stack);
   12d18:	|  \-> moveq #24,d0
   12d1a:	|      add.l 24(sp),d0
   12d1e:	|      move.l d0,-(sp)
   12d20:	|      jsr 14be4 <trimStack>
   12d26:	|      addq.l #4,sp
	struct objectType * objT = findObjectType (objNum);
   12d28:	|      move.l 8(sp),d0
   12d2c:	|      move.l d0,-(sp)
   12d2e:	|      jsr cfca <findObjectType>
   12d34:	|      addq.l #4,sp
   12d36:	|      move.l d0,12(sp)
	if (! objT) return BR_ERROR;
   12d3a:	|  /-- bne.s 12d40 <builtIn_hasFlag+0x8c>
   12d3c:	|  |   moveq #1,d0
   12d3e:	+--|-- bra.s 12d72 <builtIn_hasFlag+0xbe>
	setVariable (&fun -> reg, SVT_INT, objT->flags & (1 << flagIndex));
   12d40:	|  \-> movea.l 12(sp),a0
   12d44:	|      move.w 36(a0),d0
   12d48:	|      moveq #0,d2
   12d4a:	|      move.w d0,d2
   12d4c:	|      move.l 4(sp),d1
   12d50:	|      moveq #1,d0
   12d52:	|      lsl.l d1,d0
   12d54:	|      move.l d2,d1
   12d56:	|      and.l d0,d1
   12d58:	|      moveq #28,d0
   12d5a:	|      add.l 24(sp),d0
   12d5e:	|      move.l d1,-(sp)
   12d60:	|      pea 1 <_start+0x1>
   12d64:	|      move.l d0,-(sp)
   12d66:	|      jsr 14b52 <setVariable>
   12d6c:	|      lea 12(sp),sp
	return BR_CONTINUE;
   12d70:	|      moveq #2,d0
}
   12d72:	\----> move.l (sp)+,d2
   12d74:	       lea 12(sp),sp
   12d78:	       rts

00012d7a <builtIn_snapshotGrab>:

builtIn(snapshotGrab)
{
	UNUSEDALL
	return snapshot () ? BR_CONTINUE : BR_ERROR;
   12d7a:	       jsr cfb8 <snapshot>
   12d80:	       tst.w d0
   12d82:	/----- beq.s 12d88 <builtIn_snapshotGrab+0xe>
   12d84:	|      moveq #2,d0
   12d86:	|  /-- bra.s 12d8a <builtIn_snapshotGrab+0x10>
   12d88:	\--|-> moveq #1,d0
}
   12d8a:	   \-> rts

00012d8c <builtIn_snapshotClear>:

builtIn(snapshotClear)
{
	UNUSEDALL
	nosnapshot ();
   12d8c:	jsr ce64 <nosnapshot>
	return BR_CONTINUE;
   12d92:	moveq #2,d0
}
   12d94:	rts

00012d96 <builtIn_bodgeFilenames>:

builtIn(bodgeFilenames)
{
   12d96:	subq.l #4,sp
	UNUSEDALL
	BOOL lastValue = allowAnyFilename;
   12d98:	move.w 1a000 <allowAnyFilename>,2(sp)
	allowAnyFilename = getBoolean(&(fun -> stack -> thisVar));
   12da0:	movea.l 12(sp),a0
   12da4:	move.l 24(a0),d0
   12da8:	move.l d0,-(sp)
   12daa:	jsr 147a0 <getBoolean>
   12db0:	addq.l #4,sp
   12db2:	move.w d0,1a000 <allowAnyFilename>
	trimStack (&fun -> stack);
   12db8:	moveq #24,d0
   12dba:	add.l 12(sp),d0
   12dbe:	move.l d0,-(sp)
   12dc0:	jsr 14be4 <trimStack>
   12dc6:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, lastValue);
   12dc8:	movea.w 2(sp),a0
   12dcc:	moveq #28,d0
   12dce:	add.l 12(sp),d0
   12dd2:	move.l a0,-(sp)
   12dd4:	pea 1 <_start+0x1>
   12dd8:	move.l d0,-(sp)
   12dda:	jsr 14b52 <setVariable>
   12de0:	lea 12(sp),sp
	return BR_CONTINUE;
   12de4:	moveq #2,d0
}
   12de6:	addq.l #4,sp
   12de8:	rts

00012dea <builtIn__rem_registryGetString>:

// Deprecated - does nothing.
builtIn(_rem_registryGetString)
{
	UNUSEDALL
	trimStack (&fun -> stack);
   12dea:	moveq #24,d0
   12dec:	add.l 8(sp),d0
   12df0:	move.l d0,-(sp)
   12df2:	jsr 14be4 <trimStack>
   12df8:	addq.l #4,sp
	trimStack (&fun -> stack);
   12dfa:	moveq #24,d0
   12dfc:	add.l 8(sp),d0
   12e00:	move.l d0,-(sp)
   12e02:	jsr 14be4 <trimStack>
   12e08:	addq.l #4,sp
	setVariable (&fun -> reg, SVT_INT, 0);
   12e0a:	moveq #28,d0
   12e0c:	add.l 8(sp),d0
   12e10:	clr.l -(sp)
   12e12:	pea 1 <_start+0x1>
   12e16:	move.l d0,-(sp)
   12e18:	jsr 14b52 <setVariable>
   12e1e:	lea 12(sp),sp

	return BR_CONTINUE;
   12e22:	moveq #2,d0
}
   12e24:	rts

00012e26 <builtIn_quitWithFatalError>:

builtIn(quitWithFatalError)
{
   12e26:	subq.l #4,sp
	UNUSEDALL
	char * mess = getTextFromAnyVar(&(fun -> stack -> thisVar));
   12e28:	movea.l 12(sp),a0
   12e2c:	move.l 24(a0),d0
   12e30:	move.l d0,-(sp)
   12e32:	jsr 14836 <getTextFromAnyVar>
   12e38:	addq.l #4,sp
   12e3a:	move.l d0,(sp)
	trimStack (&fun -> stack);
   12e3c:	moveq #24,d0
   12e3e:	add.l 12(sp),d0
   12e42:	move.l d0,-(sp)
   12e44:	jsr 14be4 <trimStack>
   12e4a:	addq.l #4,sp
	KPrintF (mess);
   12e4c:	move.l (sp),-(sp)
   12e4e:	jsr 16c5e <KPrintF>
   12e54:	addq.l #4,sp
	return BR_ERROR;
   12e56:	moveq #1,d0
}
   12e58:	addq.l #4,sp
   12e5a:	rts

00012e5c <builtIn__rem_setCharacterAA>:

builtIn(_rem_setCharacterAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12e5c:	moveq #24,d0
   12e5e:	add.l 8(sp),d0
   12e62:	move.l d0,-(sp)
   12e64:	jsr 14be4 <trimStack>
   12e6a:	addq.l #4,sp
	trimStack (&fun -> stack);
   12e6c:	moveq #24,d0
   12e6e:	add.l 8(sp),d0
   12e72:	move.l d0,-(sp)
   12e74:	jsr 14be4 <trimStack>
   12e7a:	addq.l #4,sp
	trimStack (&fun -> stack);
   12e7c:	moveq #24,d0
   12e7e:	add.l 8(sp),d0
   12e82:	move.l d0,-(sp)
   12e84:	jsr 14be4 <trimStack>
   12e8a:	addq.l #4,sp
	trimStack (&fun -> stack);
   12e8c:	moveq #24,d0
   12e8e:	add.l 8(sp),d0
   12e92:	move.l d0,-(sp)
   12e94:	jsr 14be4 <trimStack>
   12e9a:	addq.l #4,sp

	return BR_CONTINUE;
   12e9c:	moveq #2,d0
}
   12e9e:	rts

00012ea0 <builtIn__rem_setMaximumAA>:

builtIn(_rem_setMaximumAA)
{
	UNUSEDALL

	trimStack (&fun -> stack);
   12ea0:	moveq #24,d0
   12ea2:	add.l 8(sp),d0
   12ea6:	move.l d0,-(sp)
   12ea8:	jsr 14be4 <trimStack>
   12eae:	addq.l #4,sp
	trimStack (&fun -> stack);
   12eb0:	moveq #24,d0
   12eb2:	add.l 8(sp),d0
   12eb6:	move.l d0,-(sp)
   12eb8:	jsr 14be4 <trimStack>
   12ebe:	addq.l #4,sp
	trimStack (&fun -> stack);
   12ec0:	moveq #24,d0
   12ec2:	add.l 8(sp),d0
   12ec6:	move.l d0,-(sp)
   12ec8:	jsr 14be4 <trimStack>
   12ece:	addq.l #4,sp

	return BR_CONTINUE;
   12ed0:	moveq #2,d0

}
   12ed2:	rts

00012ed4 <builtIn_setBackgroundEffect>:

builtIn(setBackgroundEffect)
{
   12ed4:	subq.l #4,sp
	UNUSEDALL
	BOOL done = TRUE;
   12ed6:	move.w #1,2(sp)
	//BOOL done = blur_createSettings(numParams, fun->stack); Amiga Todo: Amigize?
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   12edc:	sne d0
   12ede:	neg.b d0
   12ee0:	moveq #0,d1
   12ee2:	move.b d0,d1
   12ee4:	moveq #28,d0
   12ee6:	add.l 12(sp),d0
   12eea:	move.l d1,-(sp)
   12eec:	pea 1 <_start+0x1>
   12ef0:	move.l d0,-(sp)
   12ef2:	jsr 14b52 <setVariable>
   12ef8:	lea 12(sp),sp
	return BR_CONTINUE;
   12efc:	moveq #2,d0
}
   12efe:	addq.l #4,sp
   12f00:	rts

00012f02 <builtIn_doBackgroundEffect>:

builtIn(doBackgroundEffect)
{
   12f02:	subq.l #4,sp
	UNUSEDALL
	//BOOL done = blurScreen ();
	BOOL done = TRUE;
   12f04:	move.w #1,2(sp)
	KPrintF("doBackgroundEffect: Function not implemented on Amiga");
   12f0a:	pea 1970e <newfatal.c.307beca7+0xd0>
   12f10:	jsr 16c5e <KPrintF>
   12f16:	addq.l #4,sp
	//Amiga Todo: Amigize this
	setVariable (&fun -> reg, SVT_INT, done ? 1 : 0);
   12f18:	tst.w 2(sp)
   12f1c:	sne d0
   12f1e:	neg.b d0
   12f20:	moveq #0,d1
   12f22:	move.b d0,d1
   12f24:	moveq #28,d0
   12f26:	add.l 12(sp),d0
   12f2a:	move.l d1,-(sp)
   12f2c:	pea 1 <_start+0x1>
   12f30:	move.l d0,-(sp)
   12f32:	jsr 14b52 <setVariable>
   12f38:	lea 12(sp),sp
	return BR_CONTINUE;
   12f3c:	moveq #2,d0
}
   12f3e:	addq.l #4,sp
   12f40:	rts

00012f42 <callBuiltIn>:
#undef FUNC

#define NUM_FUNCS			(sizeof (builtInFunctionArray) / sizeof (builtInFunctionArray[0]))


enum builtReturn callBuiltIn (int whichFunc, int numParams, struct loadedFunction * fun) {
   12f42:	             lea -100(sp),sp
   // fprintf (stderr, "Calling function %d: %s\n", whichFunc, builtInFunctionNames[whichFunc]);    fflush (stderr);

	if ((unsigned int)whichFunc < NUM_FUNCS) {
   12f46:	             move.l 104(sp),d0
   12f4a:	             cmpi.l #166,d0
   12f50:	/----------- bhi.w 13032 <callBuiltIn+0xf0>
		if (paramNum[whichFunc] != -1) {
   12f54:	|            move.l 104(sp),d0
   12f58:	|            add.l d0,d0
   12f5a:	|            movea.l d0,a1
   12f5c:	|            adda.l d0,a1
   12f5e:	|            lea 1a146 <paramNum>,a0
   12f64:	|            move.l (0,a1,a0.l),d0
   12f68:	|            moveq #-1,d1
   12f6a:	|            cmp.l d0,d1
   12f6c:	|  /-------- beq.w 12ffa <callBuiltIn+0xb8>
			if (paramNum[whichFunc] != numParams) {
   12f70:	|  |         move.l 104(sp),d0
   12f74:	|  |         add.l d0,d0
   12f76:	|  |         movea.l d0,a1
   12f78:	|  |         adda.l d0,a1
   12f7a:	|  |         lea 1a146 <paramNum>,a0
   12f80:	|  |         move.l (0,a1,a0.l),d0
   12f84:	|  |         cmp.l 108(sp),d0
   12f88:	|  +-------- beq.s 12ffa <callBuiltIn+0xb8>
				char buff[100];
				sprintf (buff, "Built in function must have %i parameter%s",
						 paramNum[whichFunc],
						 (paramNum[whichFunc] == 1) ? "" : "s");
   12f8a:	|  |         move.l 104(sp),d0
   12f8e:	|  |         add.l d0,d0
   12f90:	|  |         movea.l d0,a1
   12f92:	|  |         adda.l d0,a1
   12f94:	|  |         lea 1a146 <paramNum>,a0
   12f9a:	|  |         move.l (0,a1,a0.l),d0
				sprintf (buff, "Built in function must have %i parameter%s",
   12f9e:	|  |         moveq #1,d1
   12fa0:	|  |         cmp.l d0,d1
   12fa2:	|  |  /----- bne.s 12fac <callBuiltIn+0x6a>
   12fa4:	|  |  |      move.l #99235,d0
   12faa:	|  |  |  /-- bra.s 12fb2 <callBuiltIn+0x70>
   12fac:	|  |  \--|-> move.l #104260,d0
   12fb2:	|  |     \-> move.l 104(sp),d1
   12fb6:	|  |         add.l d1,d1
   12fb8:	|  |         movea.l d1,a1
   12fba:	|  |         adda.l d1,a1
   12fbc:	|  |         lea 1a146 <paramNum>,a0
   12fc2:	|  |         move.l (0,a1,a0.l),d1
   12fc6:	|  |         move.l d0,-(sp)
   12fc8:	|  |         move.l d1,-(sp)
   12fca:	|  |         pea 19746 <newfatal.c.307beca7+0x108>
   12fd0:	|  |         lea 12(sp),a0
   12fd4:	|  |         move.l a0,-(sp)
   12fd6:	|  |         jsr 13a6a <sprintf>
   12fdc:	|  |         lea 16(sp),sp

				KPrintF(copyString (buff));
   12fe0:	|  |         movea.l sp,a0
   12fe2:	|  |         move.l a0,-(sp)
   12fe4:	|  |         jsr b8 <copyString>
   12fea:	|  |         addq.l #4,sp
   12fec:	|  |         move.l d0,-(sp)
   12fee:	|  |         jsr 16c5e <KPrintF>
   12ff4:	|  |         addq.l #4,sp
				return BR_ERROR;
   12ff6:	|  |         moveq #1,d0
   12ff8:	|  |     /-- bra.s 13042 <callBuiltIn+0x100>
			}
		}

		if (builtInFunctionArray[whichFunc].func)
   12ffa:	|  \-----|-> move.l 104(sp),d0
   12ffe:	|        |   add.l d0,d0
   13000:	|        |   movea.l d0,a1
   13002:	|        |   adda.l d0,a1
   13004:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   1300a:	|        |   move.l (0,a1,a0.l),d0
   1300e:	+--------|-- beq.s 13032 <callBuiltIn+0xf0>
		{
			//fprintf (stderr, "Calling %i: %s\n", whichFunc, builtInFunctionNames[whichFunc]);
			return builtInFunctionArray[whichFunc].func (numParams, fun);
   13010:	|        |   move.l 104(sp),d0
   13014:	|        |   add.l d0,d0
   13016:	|        |   movea.l d0,a1
   13018:	|        |   adda.l d0,a1
   1301a:	|        |   lea 1a3e2 <builtInFunctionArray>,a0
   13020:	|        |   movea.l (0,a1,a0.l),a0
   13024:	|        |   move.l 112(sp),-(sp)
   13028:	|        |   move.l 112(sp),-(sp)
   1302c:	|        |   jsr (a0)
   1302e:	|        |   addq.l #8,sp
   13030:	|        +-- bra.s 13042 <callBuiltIn+0x100>
		}
	}

	KPrintF("Unknown / unimplemented built-in function.");
   13032:	\--------|-> pea 19771 <newfatal.c.307beca7+0x133>
   13038:	         |   jsr 16c5e <KPrintF>
   1303e:	         |   addq.l #4,sp
	return BR_ERROR;
   13040:	         |   moveq #1,d0
}
   13042:	         \-> lea 100(sp),sp
   13046:	             rts

00013048 <getLanguageForFileB>:
int *languageTable;
char **languageName;
struct settingsStruct gameSettings;

int getLanguageForFileB ()
{
   13048:	          subq.l #8,sp
	int indexNum = -1;
   1304a:	          moveq #-1,d0
   1304c:	          move.l d0,4(sp)

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13050:	          clr.l (sp)
   13052:	   /----- bra.s 13078 <getLanguageForFileB+0x30>
		if ((unsigned int) languageTable[i] == gameSettings.languageID) indexNum = i;
   13054:	/--|----> move.l 1a8cc <languageTable>,d1
   1305a:	|  |      move.l (sp),d0
   1305c:	|  |      add.l d0,d0
   1305e:	|  |      add.l d0,d0
   13060:	|  |      movea.l d1,a0
   13062:	|  |      adda.l d0,a0
   13064:	|  |      move.l (a0),d0
   13066:	|  |      move.l d0,d1
   13068:	|  |      move.l 1a8d4 <gameSettings>,d0
   1306e:	|  |      cmp.l d1,d0
   13070:	|  |  /-- bne.s 13076 <getLanguageForFileB+0x2e>
   13072:	|  |  |   move.l (sp),4(sp)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13076:	|  |  \-> addq.l #1,(sp)
   13078:	|  \----> move.l 1a8d8 <gameSettings+0x4>,d0
   1307e:	|         cmp.l (sp),d0
   13080:	\-------- bcc.s 13054 <getLanguageForFileB+0xc>
	}

	return indexNum;
   13082:	          move.l 4(sp),d0
}
   13086:	          addq.l #8,sp
   13088:	          rts

0001308a <getPrefsFilename>:

char * getPrefsFilename (char * filename) {
   1308a:	          lea -20(sp),sp
   1308e:	          move.l a6,-(sp)
	// Yes, this trashes the original string, but
	// we also free it at the end (warning!)...

	int n, i;

	n = strlen (filename);
   13090:	          move.l 28(sp),-(sp)
   13094:	          jsr 1374c <strlen>
   1309a:	          addq.l #4,sp
   1309c:	          move.l d0,12(sp)


	if (n > 4 && filename[n-4] == '.') {
   130a0:	          moveq #4,d0
   130a2:	          cmp.l 12(sp),d0
   130a6:	      /-- bge.s 130ca <getPrefsFilename+0x40>
   130a8:	      |   move.l 12(sp),d0
   130ac:	      |   subq.l #4,d0
   130ae:	      |   movea.l 28(sp),a0
   130b2:	      |   adda.l d0,a0
   130b4:	      |   move.b (a0),d0
   130b6:	      |   cmpi.b #46,d0
   130ba:	      +-- bne.s 130ca <getPrefsFilename+0x40>
		filename[n-4] = 0;
   130bc:	      |   move.l 12(sp),d0
   130c0:	      |   subq.l #4,d0
   130c2:	      |   movea.l 28(sp),a0
   130c6:	      |   adda.l d0,a0
   130c8:	      |   clr.b (a0)
	}

	char * f = filename;
   130ca:	      \-> move.l 28(sp),16(sp)
	for (i = 0; i<n; i++) {
   130d0:	          clr.l 20(sp)
   130d4:	   /----- bra.s 130fc <getPrefsFilename+0x72>
		if (filename[i] == '/') f = filename + i + 1;
   130d6:	/--|----> move.l 20(sp),d0
   130da:	|  |      movea.l 28(sp),a0
   130de:	|  |      adda.l d0,a0
   130e0:	|  |      move.b (a0),d0
   130e2:	|  |      cmpi.b #47,d0
   130e6:	|  |  /-- bne.s 130f8 <getPrefsFilename+0x6e>
   130e8:	|  |  |   move.l 20(sp),d0
   130ec:	|  |  |   addq.l #1,d0
   130ee:	|  |  |   move.l 28(sp),d1
   130f2:	|  |  |   add.l d0,d1
   130f4:	|  |  |   move.l d1,16(sp)
	for (i = 0; i<n; i++) {
   130f8:	|  |  \-> addq.l #1,20(sp)
   130fc:	|  \----> move.l 20(sp),d0
   13100:	|         cmp.l 12(sp),d0
   13104:	\-------- blt.s 130d6 <getPrefsFilename+0x4c>
	}

	char * joined = joinStrings (f, ".ini");
   13106:	          pea 1979c <newfatal.c.307beca7+0x15e>
   1310c:	          move.l 20(sp),-(sp)
   13110:	          jsr 1378c <joinStrings>
   13116:	          addq.l #8,sp
   13118:	          move.l d0,8(sp)

	FreeVec(filename);
   1311c:	          move.l 28(sp),4(sp)
   13122:	          move.l 1a7a4 <SysBase>,d0
   13128:	          movea.l d0,a6
   1312a:	          movea.l 4(sp),a1
   1312e:	          jsr -690(a6)
	filename = NULL;
   13132:	          clr.l 28(sp)
	return joined;
   13136:	          move.l 8(sp),d0
}
   1313a:	          movea.l (sp)+,a6
   1313c:	          lea 20(sp),sp
   13140:	          rts

00013142 <makeLanguageTable>:

void makeLanguageTable (BPTR table)
{
   13142:	             lea -28(sp),sp
   13146:	             move.l a6,-(sp)
   13148:	             move.l a2,-(sp)
	languageTable = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   1314a:	             move.l 1a8d8 <gameSettings+0x4>,d0
   13150:	             move.l d0,d1
   13152:	             addq.l #1,d1
   13154:	             move.l d1,28(sp)
   13158:	             clr.l 24(sp)
   1315c:	             move.l 1a7a4 <SysBase>,d0
   13162:	             movea.l d0,a6
   13164:	             move.l 28(sp),d0
   13168:	             move.l 24(sp),d1
   1316c:	             jsr -684(a6)
   13170:	             move.l d0,20(sp)
   13174:	             move.l 20(sp),d0
   13178:	             move.l d0,1a8cc <languageTable>
    if( languageTable == 0) {
   1317e:	             move.l 1a8cc <languageTable>,d0
   13184:	         /-- bne.s 13194 <makeLanguageTable+0x52>
        KPrintF("makeLanguageTable: Cannot Alloc Mem for languageTable");
   13186:	         |   pea 197a1 <newfatal.c.307beca7+0x163>
   1318c:	         |   jsr 16c5e <KPrintF>
   13192:	         |   addq.l #4,sp
    }

	languageName = AllocVec(gameSettings.numLanguages + 1,MEMF_ANY);
   13194:	         \-> move.l 1a8d8 <gameSettings+0x4>,d0
   1319a:	             move.l d0,d1
   1319c:	             addq.l #1,d1
   1319e:	             move.l d1,16(sp)
   131a2:	             clr.l 12(sp)
   131a6:	             move.l 1a7a4 <SysBase>,d0
   131ac:	             movea.l d0,a6
   131ae:	             move.l 16(sp),d0
   131b2:	             move.l 12(sp),d1
   131b6:	             jsr -684(a6)
   131ba:	             move.l d0,8(sp)
   131be:	             move.l 8(sp),d0
   131c2:	             move.l d0,1a8d0 <languageName>
	if( languageName == 0) {
   131c8:	             move.l 1a8d0 <languageName>,d0
   131ce:	         /-- bne.s 131de <makeLanguageTable+0x9c>
        KPrintF("makeLanguageName: Cannot Alloc Mem for languageName");
   131d0:	         |   pea 197d7 <newfatal.c.307beca7+0x199>
   131d6:	         |   jsr 16c5e <KPrintF>
   131dc:	         |   addq.l #4,sp
    }

	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   131de:	         \-> clr.l 32(sp)
   131e2:	   /-------- bra.s 1325a <makeLanguageTable+0x118>
		languageTable[i] = i ? get2bytes (table) : 0;
   131e4:	/--|-------> tst.l 32(sp)
   131e8:	|  |  /----- beq.s 131f8 <makeLanguageTable+0xb6>
   131ea:	|  |  |      move.l 40(sp),-(sp)
   131ee:	|  |  |      jsr 6bc <get2bytes>
   131f4:	|  |  |      addq.l #4,sp
   131f6:	|  |  |  /-- bra.s 131fa <makeLanguageTable+0xb8>
   131f8:	|  |  \--|-> moveq #0,d0
   131fa:	|  |     \-> movea.l 1a8cc <languageTable>,a0
   13200:	|  |         move.l 32(sp),d1
   13204:	|  |         add.l d1,d1
   13206:	|  |         add.l d1,d1
   13208:	|  |         adda.l d1,a0
   1320a:	|  |         move.l d0,(a0)
		languageName[i] = 0;
   1320c:	|  |         move.l 1a8d0 <languageName>,d1
   13212:	|  |         move.l 32(sp),d0
   13216:	|  |         add.l d0,d0
   13218:	|  |         add.l d0,d0
   1321a:	|  |         movea.l d1,a0
   1321c:	|  |         adda.l d0,a0
   1321e:	|  |         clr.l (a0)
		if (gameVersion >= VERSION(2,0)) {
   13220:	|  |         move.l 1a74e <gameVersion>,d0
   13226:	|  |         cmpi.l #511,d0
   1322c:	|  |     /-- ble.s 13256 <makeLanguageTable+0x114>
			if (gameSettings.numLanguages)
   1322e:	|  |     |   move.l 1a8d8 <gameSettings+0x4>,d0
   13234:	|  |     +-- beq.s 13256 <makeLanguageTable+0x114>
				languageName[i] = readString (table);
   13236:	|  |     |   move.l 1a8d0 <languageName>,d1
   1323c:	|  |     |   move.l 32(sp),d0
   13240:	|  |     |   add.l d0,d0
   13242:	|  |     |   add.l d0,d0
   13244:	|  |     |   movea.l d1,a2
   13246:	|  |     |   adda.l d0,a2
   13248:	|  |     |   move.l 40(sp),-(sp)
   1324c:	|  |     |   jsr b02 <readString>
   13252:	|  |     |   addq.l #4,sp
   13254:	|  |     |   move.l d0,(a2)
	for (unsigned int i = 0; i <= gameSettings.numLanguages; i ++) {
   13256:	|  |     \-> addq.l #1,32(sp)
   1325a:	|  \-------> move.l 1a8d8 <gameSettings+0x4>,d0
   13260:	|            cmp.l 32(sp),d0
   13264:	\----------- bcc.w 131e4 <makeLanguageTable+0xa2>
		}
	}
}
   13268:	             nop
   1326a:	             nop
   1326c:	             movea.l (sp)+,a2
   1326e:	             movea.l (sp)+,a6
   13270:	             lea 28(sp),sp
   13274:	             rts

00013276 <readIniFile>:

void readIniFile (char * filename) {
   13276:	                      lea -564(sp),sp
   1327a:	                      move.l a6,-(sp)
   1327c:	                      move.l d2,-(sp)
	char * langName = getPrefsFilename (copyString (filename));
   1327e:	                      move.l 576(sp),-(sp)
   13282:	                      jsr b8 <copyString>
   13288:	                      addq.l #4,sp
   1328a:	                      move.l d0,-(sp)
   1328c:	                      jsr 1308a <getPrefsFilename>
   13292:	                      addq.l #4,sp
   13294:	                      move.l d0,562(sp)

	BPTR fp = Open(langName,MODE_OLDFILE);	
   13298:	                      move.l 562(sp),558(sp)
   1329e:	                      move.l #1005,554(sp)
   132a6:	                      move.l 1a7ac <DOSBase>,d0
   132ac:	                      movea.l d0,a6
   132ae:	                      move.l 558(sp),d1
   132b2:	                      move.l 554(sp),d2
   132b6:	                      jsr -30(a6)
   132ba:	                      move.l d0,550(sp)
   132be:	                      move.l 550(sp),d0
   132c2:	                      move.l d0,546(sp)

	gameSettings.languageID = 0;
   132c6:	                      clr.l 1a8d4 <gameSettings>
	gameSettings.userFullScreen = TRUE; //Always fullscreen on AMIGA
   132cc:	                      move.w #1,1a8dc <gameSettings+0x8>
	gameSettings.refreshRate = 0;
   132d4:	                      clr.l 1a8de <gameSettings+0xa>
	gameSettings.antiAlias = 1;
   132da:	                      moveq #1,d0
   132dc:	                      move.l d0,1a8e2 <gameSettings+0xe>
	gameSettings.fixedPixels = FALSE;
   132e2:	                      clr.w 1a8e6 <gameSettings+0x12>
	gameSettings.noStartWindow = FALSE;
   132e8:	                      clr.w 1a8e8 <gameSettings+0x14>
	gameSettings.debugMode = FALSE;
   132ee:	                      clr.w 1a8ea <gameSettings+0x16>

	FreeVec(langName);
   132f4:	                      move.l 562(sp),542(sp)
   132fa:	                      move.l 1a7a4 <SysBase>,d0
   13300:	                      movea.l d0,a6
   13302:	                      movea.l 542(sp),a1
   13306:	                      jsr -690(a6)
	langName = NULL;
   1330a:	                      clr.l 562(sp)

	if (fp) {
   1330e:	                      tst.l 546(sp)
   13312:	/-------------------- beq.w 135f0 <readIniFile+0x37a>
		char lineSoFar[257] = "";
   13316:	|                     move.l sp,d0
   13318:	|                     addi.l #265,d0
   1331e:	|                     move.l #257,d1
   13324:	|                     move.l d1,-(sp)
   13326:	|                     clr.l -(sp)
   13328:	|                     move.l d0,-(sp)
   1332a:	|                     jsr 16be2 <memset>
   13330:	|                     lea 12(sp),sp
		char secondSoFar[257] = "";
   13334:	|                     move.l sp,d0
   13336:	|                     addq.l #8,d0
   13338:	|                     move.l #257,d1
   1333e:	|                     move.l d1,-(sp)
   13340:	|                     clr.l -(sp)
   13342:	|                     move.l d0,-(sp)
   13344:	|                     jsr 16be2 <memset>
   1334a:	|                     lea 12(sp),sp
		unsigned char here = 0;
   1334e:	|                     clr.b 571(sp)
		char readChar = ' ';
   13352:	|                     move.b #32,570(sp)
		BOOL keepGoing = TRUE;
   13358:	|                     move.w #1,568(sp)
		BOOL doingSecond = FALSE;
   1335e:	|                     clr.w 566(sp)
		LONG tmp = 0;
   13362:	|                     clr.l 538(sp)

		do {

			tmp = FGetC (fp);
   13366:	|  /----------------> move.l 546(sp),534(sp)
   1336c:	|  |                  move.l 1a7ac <DOSBase>,d0
   13372:	|  |                  movea.l d0,a6
   13374:	|  |                  move.l 534(sp),d1
   13378:	|  |                  jsr -306(a6)
   1337c:	|  |                  move.l d0,530(sp)
   13380:	|  |                  move.l 530(sp),d0
   13384:	|  |                  move.l d0,538(sp)
			if (tmp == - 1) {
   13388:	|  |                  moveq #-1,d1
   1338a:	|  |                  cmp.l 538(sp),d1
   1338e:	|  |           /----- bne.s 1339c <readIniFile+0x126>
				readChar = '\n';
   13390:	|  |           |      move.b #10,570(sp)
				keepGoing = FALSE;
   13396:	|  |           |      clr.w 568(sp)
   1339a:	|  |           |  /-- bra.s 133a2 <readIniFile+0x12c>
			} else {
				readChar = (char) tmp;
   1339c:	|  |           \--|-> move.b 541(sp),570(sp)
			}

			switch (readChar) {
   133a2:	|  |              \-> move.b 570(sp),d0
   133a6:	|  |                  ext.w d0
   133a8:	|  |                  movea.w d0,a0
   133aa:	|  |                  moveq #61,d0
   133ac:	|  |                  cmp.l a0,d0
   133ae:	|  |     /----------- beq.w 13558 <readIniFile+0x2e2>
   133b2:	|  |     |            moveq #61,d1
   133b4:	|  |     |            cmp.l a0,d1
   133b6:	|  |  /--|----------- blt.w 13564 <readIniFile+0x2ee>
   133ba:	|  |  |  |            moveq #10,d0
   133bc:	|  |  |  |            cmp.l a0,d0
   133be:	|  |  |  |        /-- beq.s 133c8 <readIniFile+0x152>
   133c0:	|  |  |  |        |   moveq #13,d1
   133c2:	|  |  |  |        |   cmp.l a0,d1
   133c4:	|  |  +--|--------|-- bne.w 13564 <readIniFile+0x2ee>
				case '\n':
				case '\r':
				if (doingSecond) {
   133c8:	|  |  |  |        \-> tst.w 566(sp)
   133cc:	|  |  |  |     /----- beq.w 13546 <readIniFile+0x2d0>
					if (strcmp (lineSoFar, "LANGUAGE") == 0)
   133d0:	|  |  |  |     |      pea 1980b <newfatal.c.307beca7+0x1cd>
   133d6:	|  |  |  |     |      move.l sp,d0
   133d8:	|  |  |  |     |      addi.l #269,d0
   133de:	|  |  |  |     |      move.l d0,-(sp)
   133e0:	|  |  |  |     |      jsr 1370c <strcmp>
   133e6:	|  |  |  |     |      addq.l #8,sp
   133e8:	|  |  |  |     |      tst.l d0
   133ea:	|  |  |  |     |  /-- bne.s 13404 <readIniFile+0x18e>
					{
						gameSettings.languageID = stringToInt (secondSoFar);
   133ec:	|  |  |  |     |  |   move.l sp,d0
   133ee:	|  |  |  |     |  |   addq.l #8,d0
   133f0:	|  |  |  |     |  |   move.l d0,-(sp)
   133f2:	|  |  |  |     |  |   jsr 135fc <stringToInt>
   133f8:	|  |  |  |     |  |   addq.l #4,sp
   133fa:	|  |  |  |     |  |   move.l d0,1a8d4 <gameSettings>
   13400:	|  |  |  |     +--|-- bra.w 13546 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "WINDOW") == 0)
   13404:	|  |  |  |     |  \-> pea 19814 <newfatal.c.307beca7+0x1d6>
   1340a:	|  |  |  |     |      move.l sp,d0
   1340c:	|  |  |  |     |      addi.l #269,d0
   13412:	|  |  |  |     |      move.l d0,-(sp)
   13414:	|  |  |  |     |      jsr 1370c <strcmp>
   1341a:	|  |  |  |     |      addq.l #8,sp
   1341c:	|  |  |  |     |      tst.l d0
   1341e:	|  |  |  |     |  /-- bne.s 13444 <readIniFile+0x1ce>
					{
						gameSettings.userFullScreen = ! stringToInt (secondSoFar);
   13420:	|  |  |  |     |  |   move.l sp,d0
   13422:	|  |  |  |     |  |   addq.l #8,d0
   13424:	|  |  |  |     |  |   move.l d0,-(sp)
   13426:	|  |  |  |     |  |   jsr 135fc <stringToInt>
   1342c:	|  |  |  |     |  |   addq.l #4,sp
   1342e:	|  |  |  |     |  |   tst.l d0
   13430:	|  |  |  |     |  |   seq d0
   13432:	|  |  |  |     |  |   neg.b d0
   13434:	|  |  |  |     |  |   move.b d0,d0
   13436:	|  |  |  |     |  |   andi.w #255,d0
   1343a:	|  |  |  |     |  |   move.w d0,1a8dc <gameSettings+0x8>
   13440:	|  |  |  |     +--|-- bra.w 13546 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "REFRESH") == 0)
   13444:	|  |  |  |     |  \-> pea 1981b <newfatal.c.307beca7+0x1dd>
   1344a:	|  |  |  |     |      move.l sp,d0
   1344c:	|  |  |  |     |      addi.l #269,d0
   13452:	|  |  |  |     |      move.l d0,-(sp)
   13454:	|  |  |  |     |      jsr 1370c <strcmp>
   1345a:	|  |  |  |     |      addq.l #8,sp
   1345c:	|  |  |  |     |      tst.l d0
   1345e:	|  |  |  |     |  /-- bne.s 13478 <readIniFile+0x202>
					{
						gameSettings.refreshRate = stringToInt (secondSoFar);
   13460:	|  |  |  |     |  |   move.l sp,d0
   13462:	|  |  |  |     |  |   addq.l #8,d0
   13464:	|  |  |  |     |  |   move.l d0,-(sp)
   13466:	|  |  |  |     |  |   jsr 135fc <stringToInt>
   1346c:	|  |  |  |     |  |   addq.l #4,sp
   1346e:	|  |  |  |     |  |   move.l d0,1a8de <gameSettings+0xa>
   13474:	|  |  |  |     +--|-- bra.w 13546 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "ANTIALIAS") == 0)
   13478:	|  |  |  |     |  \-> pea 19823 <newfatal.c.307beca7+0x1e5>
   1347e:	|  |  |  |     |      move.l sp,d0
   13480:	|  |  |  |     |      addi.l #269,d0
   13486:	|  |  |  |     |      move.l d0,-(sp)
   13488:	|  |  |  |     |      jsr 1370c <strcmp>
   1348e:	|  |  |  |     |      addq.l #8,sp
   13490:	|  |  |  |     |      tst.l d0
   13492:	|  |  |  |     |  /-- bne.s 134ac <readIniFile+0x236>
					{
						gameSettings.antiAlias = stringToInt (secondSoFar);
   13494:	|  |  |  |     |  |   move.l sp,d0
   13496:	|  |  |  |     |  |   addq.l #8,d0
   13498:	|  |  |  |     |  |   move.l d0,-(sp)
   1349a:	|  |  |  |     |  |   jsr 135fc <stringToInt>
   134a0:	|  |  |  |     |  |   addq.l #4,sp
   134a2:	|  |  |  |     |  |   move.l d0,1a8e2 <gameSettings+0xe>
   134a8:	|  |  |  |     +--|-- bra.w 13546 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "FIXEDPIXELS") == 0)
   134ac:	|  |  |  |     |  \-> pea 1982d <newfatal.c.307beca7+0x1ef>
   134b2:	|  |  |  |     |      move.l sp,d0
   134b4:	|  |  |  |     |      addi.l #269,d0
   134ba:	|  |  |  |     |      move.l d0,-(sp)
   134bc:	|  |  |  |     |      jsr 1370c <strcmp>
   134c2:	|  |  |  |     |      addq.l #8,sp
   134c4:	|  |  |  |     |      tst.l d0
   134c6:	|  |  |  |     |  /-- bne.s 134e0 <readIniFile+0x26a>
					{
						gameSettings.fixedPixels = stringToInt (secondSoFar);
   134c8:	|  |  |  |     |  |   move.l sp,d0
   134ca:	|  |  |  |     |  |   addq.l #8,d0
   134cc:	|  |  |  |     |  |   move.l d0,-(sp)
   134ce:	|  |  |  |     |  |   jsr 135fc <stringToInt>
   134d4:	|  |  |  |     |  |   addq.l #4,sp
   134d6:	|  |  |  |     |  |   move.l d0,d0
   134d8:	|  |  |  |     |  |   move.w d0,1a8e6 <gameSettings+0x12>
   134de:	|  |  |  |     +--|-- bra.s 13546 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "NOSTARTWINDOW") == 0)
   134e0:	|  |  |  |     |  \-> pea 19839 <newfatal.c.307beca7+0x1fb>
   134e6:	|  |  |  |     |      move.l sp,d0
   134e8:	|  |  |  |     |      addi.l #269,d0
   134ee:	|  |  |  |     |      move.l d0,-(sp)
   134f0:	|  |  |  |     |      jsr 1370c <strcmp>
   134f6:	|  |  |  |     |      addq.l #8,sp
   134f8:	|  |  |  |     |      tst.l d0
   134fa:	|  |  |  |     |  /-- bne.s 13514 <readIniFile+0x29e>
					{
						gameSettings.noStartWindow = stringToInt (secondSoFar);
   134fc:	|  |  |  |     |  |   move.l sp,d0
   134fe:	|  |  |  |     |  |   addq.l #8,d0
   13500:	|  |  |  |     |  |   move.l d0,-(sp)
   13502:	|  |  |  |     |  |   jsr 135fc <stringToInt>
   13508:	|  |  |  |     |  |   addq.l #4,sp
   1350a:	|  |  |  |     |  |   move.l d0,d0
   1350c:	|  |  |  |     |  |   move.w d0,1a8e8 <gameSettings+0x14>
   13512:	|  |  |  |     +--|-- bra.s 13546 <readIniFile+0x2d0>
					}
					else if (strcmp (lineSoFar, "DEBUGMODE") == 0)
   13514:	|  |  |  |     |  \-> pea 19847 <main_sludge.c.0270f7ba+0xb>
   1351a:	|  |  |  |     |      move.l sp,d0
   1351c:	|  |  |  |     |      addi.l #269,d0
   13522:	|  |  |  |     |      move.l d0,-(sp)
   13524:	|  |  |  |     |      jsr 1370c <strcmp>
   1352a:	|  |  |  |     |      addq.l #8,sp
   1352c:	|  |  |  |     |      tst.l d0
   1352e:	|  |  |  |     +----- bne.s 13546 <readIniFile+0x2d0>
					{
						gameSettings.debugMode = stringToInt (secondSoFar);
   13530:	|  |  |  |     |      move.l sp,d0
   13532:	|  |  |  |     |      addq.l #8,d0
   13534:	|  |  |  |     |      move.l d0,-(sp)
   13536:	|  |  |  |     |      jsr 135fc <stringToInt>
   1353c:	|  |  |  |     |      addq.l #4,sp
   1353e:	|  |  |  |     |      move.l d0,d0
   13540:	|  |  |  |     |      move.w d0,1a8ea <gameSettings+0x16>
					}
				}
				here = 0;
   13546:	|  |  |  |     \----> clr.b 571(sp)
				doingSecond = FALSE;
   1354a:	|  |  |  |            clr.w 566(sp)
				lineSoFar[0] = 0;
   1354e:	|  |  |  |            clr.b 265(sp)
				secondSoFar[0] = 0;
   13552:	|  |  |  |            clr.b 8(sp)
				break;
   13556:	|  |  |  |  /-------- bra.s 135ce <readIniFile+0x358>

				case '=':
				doingSecond = TRUE;
   13558:	|  |  |  \--|-------> move.w #1,566(sp)
				here = 0;
   1355e:	|  |  |     |         clr.b 571(sp)
				break;
   13562:	|  |  |     +-------- bra.s 135ce <readIniFile+0x358>

				default:
				if (doingSecond) {
   13564:	|  |  \-----|-------> tst.w 566(sp)
   13568:	|  |        |  /----- beq.s 1359c <readIniFile+0x326>
					secondSoFar[here ++] = readChar;
   1356a:	|  |        |  |      move.b 571(sp),d0
   1356e:	|  |        |  |      move.b d0,d1
   13570:	|  |        |  |      addq.b #1,d1
   13572:	|  |        |  |      move.b d1,571(sp)
   13576:	|  |        |  |      move.b d0,d0
   13578:	|  |        |  |      andi.l #255,d0
   1357e:	|  |        |  |      lea 572(sp),a0
   13582:	|  |        |  |      adda.l d0,a0
   13584:	|  |        |  |      move.b 570(sp),-564(a0)
					secondSoFar[here] = 0;
   1358a:	|  |        |  |      moveq #0,d0
   1358c:	|  |        |  |      move.b 571(sp),d0
   13590:	|  |        |  |      lea 572(sp),a0
   13594:	|  |        |  |      adda.l d0,a0
   13596:	|  |        |  |      clr.b -564(a0)
				} else {
					lineSoFar[here ++] = readChar;
					lineSoFar[here] = 0;
				}
				break;
   1359a:	|  |        |  |  /-- bra.s 135cc <readIniFile+0x356>
					lineSoFar[here ++] = readChar;
   1359c:	|  |        |  \--|-> move.b 571(sp),d0
   135a0:	|  |        |     |   move.b d0,d1
   135a2:	|  |        |     |   addq.b #1,d1
   135a4:	|  |        |     |   move.b d1,571(sp)
   135a8:	|  |        |     |   move.b d0,d0
   135aa:	|  |        |     |   andi.l #255,d0
   135b0:	|  |        |     |   lea 572(sp),a0
   135b4:	|  |        |     |   adda.l d0,a0
   135b6:	|  |        |     |   move.b 570(sp),-307(a0)
					lineSoFar[here] = 0;
   135bc:	|  |        |     |   moveq #0,d0
   135be:	|  |        |     |   move.b 571(sp),d0
   135c2:	|  |        |     |   lea 572(sp),a0
   135c6:	|  |        |     |   adda.l d0,a0
   135c8:	|  |        |     |   clr.b -307(a0)
				break;
   135cc:	|  |        |     \-> nop
			}
		} while (keepGoing);
   135ce:	|  |        \-------> tst.w 568(sp)
   135d2:	|  \----------------- bne.w 13366 <readIniFile+0xf0>

		Close(fp);
   135d6:	|                     move.l 546(sp),526(sp)
   135dc:	|                     move.l 1a7ac <DOSBase>,d0
   135e2:	|                     movea.l d0,a6
   135e4:	|                     move.l 526(sp),d1
   135e8:	|                     jsr -36(a6)
   135ec:	|                     move.l d0,522(sp)
	}
}
   135f0:	\-------------------> nop
   135f2:	                      move.l (sp)+,d2
   135f4:	                      movea.l (sp)+,a6
   135f6:	                      lea 564(sp),sp
   135fa:	                      rts

000135fc <stringToInt>:

unsigned int stringToInt (char * s) {
   135fc:	             subq.l #8,sp
	int i = 0;
   135fe:	             clr.l 4(sp)
	BOOL negative = FALSE;
   13602:	             clr.w 2(sp)
	for (;;) {
		if (*s >= '0' && *s <= '9') {
   13606:	/----------> movea.l 12(sp),a0
   1360a:	|            move.b (a0),d0
   1360c:	|            cmpi.b #47,d0
   13610:	|        /-- ble.s 13648 <stringToInt+0x4c>
   13612:	|        |   movea.l 12(sp),a0
   13616:	|        |   move.b (a0),d0
   13618:	|        |   cmpi.b #57,d0
   1361c:	|        +-- bgt.s 13648 <stringToInt+0x4c>
			i *= 10;
   1361e:	|        |   move.l 4(sp),d1
   13622:	|        |   move.l d1,d0
   13624:	|        |   add.l d0,d0
   13626:	|        |   add.l d0,d0
   13628:	|        |   add.l d1,d0
   1362a:	|        |   add.l d0,d0
   1362c:	|        |   move.l d0,4(sp)
			i += *s - '0';
   13630:	|        |   movea.l 12(sp),a0
   13634:	|        |   move.b (a0),d0
   13636:	|        |   ext.w d0
   13638:	|        |   movea.w d0,a0
   1363a:	|        |   moveq #-48,d0
   1363c:	|        |   add.l a0,d0
   1363e:	|        |   add.l d0,4(sp)
			s ++;
   13642:	|        |   addq.l #1,12(sp)
   13646:	|  /-----|-- bra.s 13680 <stringToInt+0x84>
		} else if (*s == '-') {
   13648:	|  |     \-> movea.l 12(sp),a0
   1364c:	|  |         move.b (a0),d0
   1364e:	|  |         cmpi.b #45,d0
   13652:	|  |     /-- bne.s 1366c <stringToInt+0x70>
			negative = ! negative;
   13654:	|  |     |   tst.w 2(sp)
   13658:	|  |     |   seq d0
   1365a:	|  |     |   neg.b d0
   1365c:	|  |     |   move.b d0,d0
   1365e:	|  |     |   andi.w #255,d0
   13662:	|  |     |   move.w d0,2(sp)
			s++;
   13666:	|  |     |   addq.l #1,12(sp)
   1366a:	+--|-----|-- bra.s 13606 <stringToInt+0xa>
		} else {
			if (negative)
   1366c:	|  |     \-> tst.w 2(sp)
   13670:	|  |     /-- beq.s 1367a <stringToInt+0x7e>
				return -i;
   13672:	|  |     |   move.l 4(sp),d0
   13676:	|  |     |   neg.l d0
   13678:	|  |  /--|-- bra.s 13682 <stringToInt+0x86>
			return i;
   1367a:	|  |  |  \-> move.l 4(sp),d0
   1367e:	|  |  +----- bra.s 13682 <stringToInt+0x86>
		if (*s >= '0' && *s <= '9') {
   13680:	\--\--|----X bra.s 13606 <stringToInt+0xa>
		}
	}
   13682:	      \----> addq.l #8,sp
   13684:	             rts

00013686 <fileExists>:
 */
#include <proto/dos.h>
#include "helpers.h"
#include "support/gcc8_c_support.h"

BYTE fileExists(const char * file) {
   13686:	    lea -28(sp),sp
   1368a:	    move.l a6,-(sp)
   1368c:	    move.l d2,-(sp)
	KPrintF("fileexists: Checking File");
   1368e:	    pea 19851 <main_sludge.c.0270f7ba+0x15>
   13694:	    jsr 16c5e <KPrintF>
   1369a:	    addq.l #4,sp
	BPTR tester;
	BYTE retval = 0;
   1369c:	    clr.b 35(sp)
	tester = Open(file, MODE_OLDFILE);
   136a0:	    move.l 40(sp),30(sp)
   136a6:	    move.l #1005,26(sp)
   136ae:	    move.l 1a7ac <DOSBase>,d0
   136b4:	    movea.l d0,a6
   136b6:	    move.l 30(sp),d1
   136ba:	    move.l 26(sp),d2
   136be:	    jsr -30(a6)
   136c2:	    move.l d0,22(sp)
   136c6:	    move.l 22(sp),d0
   136ca:	    move.l d0,18(sp)
	if (tester) {
   136ce:	/-- beq.s 136fe <fileExists+0x78>
		KPrintF("fileexists: File exists");
   136d0:	|   pea 1986b <main_sludge.c.0270f7ba+0x2f>
   136d6:	|   jsr 16c5e <KPrintF>
   136dc:	|   addq.l #4,sp
		retval = 1;
   136de:	|   move.b #1,35(sp)
		Close(tester);
   136e4:	|   move.l 18(sp),14(sp)
   136ea:	|   move.l 1a7ac <DOSBase>,d0
   136f0:	|   movea.l d0,a6
   136f2:	|   move.l 14(sp),d1
   136f6:	|   jsr -36(a6)
   136fa:	|   move.l d0,10(sp)
	}
	return retval;
   136fe:	\-> move.b 35(sp),d0
   13702:	    move.l (sp)+,d2
   13704:	    movea.l (sp)+,a6
   13706:	    lea 28(sp),sp
   1370a:	    rts

0001370c <strcmp>:
#endif


int strcmp(const char* s1, const char* s2)
{
    while(*s1 && (*s1 == *s2))
   1370c:	   /-- bra.s 13716 <strcmp+0xa>
    {
        s1++;
   1370e:	/--|-> addq.l #1,4(sp)
        s2++;
   13712:	|  |   addq.l #1,8(sp)
    while(*s1 && (*s1 == *s2))
   13716:	|  \-> movea.l 4(sp),a0
   1371a:	|      move.b (a0),d0
   1371c:	|  /-- beq.s 1372e <strcmp+0x22>
   1371e:	|  |   movea.l 4(sp),a0
   13722:	|  |   move.b (a0),d1
   13724:	|  |   movea.l 8(sp),a0
   13728:	|  |   move.b (a0),d0
   1372a:	|  |   cmp.b d1,d0
   1372c:	\--|-- beq.s 1370e <strcmp+0x2>
    }
    return *(const unsigned char*)s1 - *(const unsigned char*)s2;
   1372e:	   \-> movea.l 4(sp),a0
   13732:	       move.b (a0),d0
   13734:	       moveq #0,d1
   13736:	       move.b d0,d1
   13738:	       movea.l 8(sp),a0
   1373c:	       move.b (a0),d0
   1373e:	       move.b d0,d0
   13740:	       andi.l #255,d0
   13746:	       sub.l d0,d1
   13748:	       move.l d1,d0
}
   1374a:	       rts

0001374c <strlen>:

long unsigned int strlen (const char *s) 
{  
   1374c:	       subq.l #4,sp
	long unsigned int i = 0;
   1374e:	       clr.l (sp)
	while(s[i]) i++; 
   13750:	   /-- bra.s 13754 <strlen+0x8>
   13752:	/--|-> addq.l #1,(sp)
   13754:	|  \-> movea.l 8(sp),a0
   13758:	|      adda.l (sp),a0
   1375a:	|      move.b (a0),d0
   1375c:	\----- bne.s 13752 <strlen+0x6>
	return(i);
   1375e:	       move.l (sp),d0
}
   13760:	       addq.l #4,sp
   13762:	       rts

00013764 <strcpy>:

char *strcpy(char *t, const char *s) 
{
	while(*t++ = *s++);
   13764:	    nop
   13766:	/-> move.l 8(sp),d0
   1376a:	|   move.l d0,d1
   1376c:	|   addq.l #1,d1
   1376e:	|   move.l d1,8(sp)
   13772:	|   movea.l 4(sp),a0
   13776:	|   lea 1(a0),a1
   1377a:	|   move.l a1,4(sp)
   1377e:	|   movea.l d0,a1
   13780:	|   move.b (a1),d0
   13782:	|   move.b d0,(a0)
   13784:	|   move.b (a0),d0
   13786:	\-- bne.s 13766 <strcpy+0x2>
}
   13788:	    nop
   1378a:	    rts

0001378c <joinStrings>:

char * joinStrings (const char * s1, const char * s2) {
   1378c:	    lea -20(sp),sp
   13790:	    move.l a6,-(sp)
   13792:	    move.l d2,-(sp)
	char * newString = AllocVec(strlen (s1) + strlen (s2) + 1, MEMF_ANY); 
   13794:	    move.l 32(sp),-(sp)
   13798:	    jsr 1374c <strlen>
   1379e:	    addq.l #4,sp
   137a0:	    move.l d0,d2
   137a2:	    move.l 36(sp),-(sp)
   137a6:	    jsr 1374c <strlen>
   137ac:	    addq.l #4,sp
   137ae:	    add.l d2,d0
   137b0:	    move.l d0,d1
   137b2:	    addq.l #1,d1
   137b4:	    move.l d1,20(sp)
   137b8:	    clr.l 16(sp)
   137bc:	    move.l 1a7a4 <SysBase>,d0
   137c2:	    movea.l d0,a6
   137c4:	    move.l 20(sp),d0
   137c8:	    move.l 16(sp),d1
   137cc:	    jsr -684(a6)
   137d0:	    move.l d0,12(sp)
   137d4:	    move.l 12(sp),d0
   137d8:	    move.l d0,8(sp)
	char * t = newString;
   137dc:	    move.l 8(sp),24(sp)

	while(*t++ = *s1++);
   137e2:	    nop
   137e4:	/-> move.l 32(sp),d0
   137e8:	|   move.l d0,d1
   137ea:	|   addq.l #1,d1
   137ec:	|   move.l d1,32(sp)
   137f0:	|   movea.l 24(sp),a0
   137f4:	|   lea 1(a0),a1
   137f8:	|   move.l a1,24(sp)
   137fc:	|   movea.l d0,a1
   137fe:	|   move.b (a1),d0
   13800:	|   move.b d0,(a0)
   13802:	|   move.b (a0),d0
   13804:	\-- bne.s 137e4 <joinStrings+0x58>
	t--;
   13806:	    subq.l #1,24(sp)
	while(*t++ = *s2++);
   1380a:	    nop
   1380c:	/-> move.l 36(sp),d0
   13810:	|   move.l d0,d1
   13812:	|   addq.l #1,d1
   13814:	|   move.l d1,36(sp)
   13818:	|   movea.l 24(sp),a0
   1381c:	|   lea 1(a0),a1
   13820:	|   move.l a1,24(sp)
   13824:	|   movea.l d0,a1
   13826:	|   move.b (a1),d0
   13828:	|   move.b d0,(a0)
   1382a:	|   move.b (a0),d0
   1382c:	\-- bne.s 1380c <joinStrings+0x80>

	return newString;
   1382e:	    move.l 8(sp),d0
}
   13832:	    move.l (sp)+,d2
   13834:	    movea.l (sp)+,a6
   13836:	    lea 20(sp),sp
   1383a:	    rts

0001383c <itoa>:

#define va_start(ap, last) (ap = (va_list)&last + sizeof(last))
#define va_arg(ap, type) (*(type*)(ap += sizeof(type)) - 1)
#define va_end(ap) (ap = (va_list)0)

char* itoa(int value, char* str, int base) {
   1383c:	       lea -16(sp),sp
    char* rc;
    char* ptr;
    char* low;
    // Set '-' for negative decimals.
    if (base == 10 && value < 0) {
   13840:	       moveq #10,d0
   13842:	       cmp.l 28(sp),d0
   13846:	   /-- bne.s 13864 <itoa+0x28>
   13848:	   |   tst.l 20(sp)
   1384c:	   +-- bge.s 13864 <itoa+0x28>
        *str++ = '-';
   1384e:	   |   move.l 24(sp),d0
   13852:	   |   move.l d0,d1
   13854:	   |   addq.l #1,d1
   13856:	   |   move.l d1,24(sp)
   1385a:	   |   movea.l d0,a0
   1385c:	   |   move.b #45,(a0)
        value *= -1;
   13860:	   |   neg.l 20(sp)
    }
    rc = ptr = str;
   13864:	   \-> move.l 24(sp),12(sp)
   1386a:	       move.l 12(sp),4(sp)
    // Set pointer to last digit's place.
    do {
        *ptr++ = "0123456789abcdef"[value % base];
   13870:	   /-> move.l 20(sp),d0
   13874:	   |   move.l 28(sp),-(sp)
   13878:	   |   move.l d0,-(sp)
   1387a:	   |   jsr 176c8 <__modsi3>
   13880:	   |   addq.l #8,sp
   13882:	   |   movea.l d0,a1
   13884:	   |   move.l 12(sp),d0
   13888:	   |   move.l d0,d1
   1388a:	   |   addq.l #1,d1
   1388c:	   |   move.l d1,12(sp)
   13890:	   |   lea 19883 <main_sludge.c.0270f7ba+0x47>,a0
   13896:	   |   move.b (0,a1,a0.l),d1
   1389a:	   |   movea.l d0,a0
   1389c:	   |   move.b d1,(a0)
        value /= base;
   1389e:	   |   move.l 28(sp),-(sp)
   138a2:	   |   move.l 24(sp),-(sp)
   138a6:	   |   jsr 1769a <__divsi3>
   138ac:	   |   addq.l #8,sp
   138ae:	   |   move.l d0,20(sp)
    } while (value);
   138b2:	   \-- bne.s 13870 <itoa+0x34>
    // Null-terminate string.
    *ptr-- = '\0';
   138b4:	       move.l 12(sp),d0
   138b8:	       move.l d0,d1
   138ba:	       subq.l #1,d1
   138bc:	       move.l d1,12(sp)
   138c0:	       movea.l d0,a0
   138c2:	       clr.b (a0)
    // Reverse string.
    for (low = rc; low < ptr; low++, ptr--) {
   138c4:	       move.l 4(sp),8(sp)
   138ca:	   /-- bra.s 138f0 <itoa+0xb4>
        char temp = *low;
   138cc:	/--|-> movea.l 8(sp),a0
   138d0:	|  |   move.b (a0),3(sp)
        *low = *ptr;
   138d4:	|  |   movea.l 12(sp),a0
   138d8:	|  |   move.b (a0),d0
   138da:	|  |   movea.l 8(sp),a0
   138de:	|  |   move.b d0,(a0)
        *ptr = temp;
   138e0:	|  |   movea.l 12(sp),a0
   138e4:	|  |   move.b 3(sp),(a0)
    for (low = rc; low < ptr; low++, ptr--) {
   138e8:	|  |   addq.l #1,8(sp)
   138ec:	|  |   subq.l #1,12(sp)
   138f0:	|  \-> move.l 8(sp),d0
   138f4:	|      cmp.l 12(sp),d0
   138f8:	\----- bcs.s 138cc <itoa+0x90>
    }
    return rc;
   138fa:	       move.l 4(sp),d0
}
   138fe:	       lea 16(sp),sp
   13902:	       rts

00013904 <vsprintf2>:

int vsprintf2(char* str, const char* format, va_list args) {
   13904:	                            lea -40(sp),sp
   13908:	                            move.l d2,-(sp)
    char* s = str;
   1390a:	                            move.l 48(sp),40(sp)
    const char* p = format;
   13910:	                            move.l 52(sp),36(sp)
    int i;
    char* sval;
    char buffer[20];

    while (*p) {
   13916:	   /----------------------- bra.w 13a4a <vsprintf2+0x146>
        if (*p == '%') {
   1391a:	/--|----------------------> movea.l 36(sp),a0
   1391e:	|  |                        move.b (a0),d0
   13920:	|  |                        cmpi.b #37,d0
   13924:	|  |  /-------------------- bne.w 13a30 <vsprintf2+0x12c>
            switch (*++p) {
   13928:	|  |  |                     addq.l #1,36(sp)
   1392c:	|  |  |                     movea.l 36(sp),a0
   13930:	|  |  |                     move.b (a0),d0
   13932:	|  |  |                     ext.w d0
   13934:	|  |  |                     movea.w d0,a0
   13936:	|  |  |                     moveq #115,d0
   13938:	|  |  |                     cmp.l a0,d0
   1393a:	|  |  |           /-------- beq.s 139b2 <vsprintf2+0xae>
   1393c:	|  |  |           |         moveq #115,d1
   1393e:	|  |  |           |         cmp.l a0,d1
   13940:	|  |  |  /--------|-------- blt.w 13a18 <vsprintf2+0x114>
   13944:	|  |  |  |        |         moveq #99,d2
   13946:	|  |  |  |        |         cmp.l a0,d2
   13948:	|  |  |  |  /-----|-------- beq.w 139f0 <vsprintf2+0xec>
   1394c:	|  |  |  |  |     |         moveq #100,d0
   1394e:	|  |  |  |  |     |         cmp.l a0,d0
   13950:	|  |  |  +--|-----|-------- bne.w 13a18 <vsprintf2+0x114>
                case 'd':
                    i = va_arg(args, int);
   13954:	|  |  |  |  |     |         addq.l #4,56(sp)
   13958:	|  |  |  |  |     |         movea.l 56(sp),a0
   1395c:	|  |  |  |  |     |         move.l (a0),d0
   1395e:	|  |  |  |  |     |         move.l d0,d1
   13960:	|  |  |  |  |     |         subq.l #1,d1
   13962:	|  |  |  |  |     |         move.l d1,24(sp)
                    itoa(i, buffer, 10);
   13966:	|  |  |  |  |     |         pea a <_start+0xa>
   1396a:	|  |  |  |  |     |         lea 8(sp),a0
   1396e:	|  |  |  |  |     |         move.l a0,-(sp)
   13970:	|  |  |  |  |     |         move.l 32(sp),-(sp)
   13974:	|  |  |  |  |     |         jsr 1383c <itoa>
   1397a:	|  |  |  |  |     |         lea 12(sp),sp
					for (char* b = buffer; *b; b++) {
   1397e:	|  |  |  |  |     |         lea 44(sp),a0
   13982:	|  |  |  |  |     |         lea -40(a0),a0
   13986:	|  |  |  |  |     |         move.l a0,28(sp)
   1398a:	|  |  |  |  |     |     /-- bra.s 139a6 <vsprintf2+0xa2>
                        *s++ = *b;
   1398c:	|  |  |  |  |     |  /--|-> move.l 40(sp),d0
   13990:	|  |  |  |  |     |  |  |   move.l d0,d1
   13992:	|  |  |  |  |     |  |  |   addq.l #1,d1
   13994:	|  |  |  |  |     |  |  |   move.l d1,40(sp)
   13998:	|  |  |  |  |     |  |  |   movea.l 28(sp),a0
   1399c:	|  |  |  |  |     |  |  |   move.b (a0),d1
   1399e:	|  |  |  |  |     |  |  |   movea.l d0,a0
   139a0:	|  |  |  |  |     |  |  |   move.b d1,(a0)
					for (char* b = buffer; *b; b++) {
   139a2:	|  |  |  |  |     |  |  |   addq.l #1,28(sp)
   139a6:	|  |  |  |  |     |  |  \-> movea.l 28(sp),a0
   139aa:	|  |  |  |  |     |  |      move.b (a0),d0
   139ac:	|  |  |  |  |     |  \----- bne.s 1398c <vsprintf2+0x88>
                    }
                    break;
   139ae:	|  |  |  |  |  /--|-------- bra.w 13a46 <vsprintf2+0x142>
                case 's':
                    sval = va_arg(args, char*);
   139b2:	|  |  |  |  |  |  \-------> addq.l #4,56(sp)
   139b6:	|  |  |  |  |  |            movea.l 56(sp),a0
   139ba:	|  |  |  |  |  |            move.l (a0),d0
   139bc:	|  |  |  |  |  |            move.l d0,d1
   139be:	|  |  |  |  |  |            subq.l #1,d1
   139c0:	|  |  |  |  |  |            move.l d1,32(sp)
                    while (*sval) {
   139c4:	|  |  |  |  |  |        /-- bra.s 139e6 <vsprintf2+0xe2>
                        *s++ = *sval++;
   139c6:	|  |  |  |  |  |     /--|-> move.l 32(sp),d1
   139ca:	|  |  |  |  |  |     |  |   move.l d1,d2
   139cc:	|  |  |  |  |  |     |  |   addq.l #1,d2
   139ce:	|  |  |  |  |  |     |  |   move.l d2,32(sp)
   139d2:	|  |  |  |  |  |     |  |   move.l 40(sp),d0
   139d6:	|  |  |  |  |  |     |  |   move.l d0,d2
   139d8:	|  |  |  |  |  |     |  |   addq.l #1,d2
   139da:	|  |  |  |  |  |     |  |   move.l d2,40(sp)
   139de:	|  |  |  |  |  |     |  |   movea.l d1,a0
   139e0:	|  |  |  |  |  |     |  |   move.b (a0),d1
   139e2:	|  |  |  |  |  |     |  |   movea.l d0,a0
   139e4:	|  |  |  |  |  |     |  |   move.b d1,(a0)
                    while (*sval) {
   139e6:	|  |  |  |  |  |     |  \-> movea.l 32(sp),a0
   139ea:	|  |  |  |  |  |     |      move.b (a0),d0
   139ec:	|  |  |  |  |  |     \----- bne.s 139c6 <vsprintf2+0xc2>
                    }
                    break;
   139ee:	|  |  |  |  |  +----------- bra.s 13a46 <vsprintf2+0x142>
                case 'c':
                    i = va_arg(args, int);
   139f0:	|  |  |  |  \--|----------> addq.l #4,56(sp)
   139f4:	|  |  |  |     |            movea.l 56(sp),a0
   139f8:	|  |  |  |     |            move.l (a0),d0
   139fa:	|  |  |  |     |            move.l d0,d1
   139fc:	|  |  |  |     |            subq.l #1,d1
   139fe:	|  |  |  |     |            move.l d1,24(sp)
                    *s++ = (char)i;
   13a02:	|  |  |  |     |            move.l 40(sp),d0
   13a06:	|  |  |  |     |            move.l d0,d2
   13a08:	|  |  |  |     |            addq.l #1,d2
   13a0a:	|  |  |  |     |            move.l d2,40(sp)
   13a0e:	|  |  |  |     |            move.l 24(sp),d1
   13a12:	|  |  |  |     |            movea.l d0,a0
   13a14:	|  |  |  |     |            move.b d1,(a0)
                    break;
   13a16:	|  |  |  |     +----------- bra.s 13a46 <vsprintf2+0x142>
                default:
                    *s++ = *p;
   13a18:	|  |  |  \-----|----------> move.l 40(sp),d0
   13a1c:	|  |  |        |            move.l d0,d1
   13a1e:	|  |  |        |            addq.l #1,d1
   13a20:	|  |  |        |            move.l d1,40(sp)
   13a24:	|  |  |        |            movea.l 36(sp),a0
   13a28:	|  |  |        |            move.b (a0),d1
   13a2a:	|  |  |        |            movea.l d0,a0
   13a2c:	|  |  |        |            move.b d1,(a0)
                    break;
   13a2e:	|  |  |        +----------- bra.s 13a46 <vsprintf2+0x142>
            }
        } else {
            *s++ = *p;
   13a30:	|  |  \--------|----------> move.l 40(sp),d0
   13a34:	|  |           |            move.l d0,d1
   13a36:	|  |           |            addq.l #1,d1
   13a38:	|  |           |            move.l d1,40(sp)
   13a3c:	|  |           |            movea.l 36(sp),a0
   13a40:	|  |           |            move.b (a0),d1
   13a42:	|  |           |            movea.l d0,a0
   13a44:	|  |           |            move.b d1,(a0)
        }
        p++;
   13a46:	|  |           \----------> addq.l #1,36(sp)
    while (*p) {
   13a4a:	|  \----------------------> movea.l 36(sp),a0
   13a4e:	|                           move.b (a0),d0
   13a50:	\-------------------------- bne.w 1391a <vsprintf2+0x16>
    }
    *s = '\0';
   13a54:	                            movea.l 40(sp),a0
   13a58:	                            clr.b (a0)
    return s - str;
   13a5a:	                            move.l 40(sp),d0
   13a5e:	                            sub.l 48(sp),d0
}
   13a62:	                            move.l (sp)+,d2
   13a64:	                            lea 40(sp),sp
   13a68:	                            rts

00013a6a <sprintf>:

int sprintf(char* str, const char* format, ...) {
   13a6a:	subq.l #8,sp
    va_list args;
    int done;

    va_start(args, format);
   13a6c:	moveq #16,d0
   13a6e:	add.l sp,d0
   13a70:	move.l d0,d1
   13a72:	addq.l #4,d1
   13a74:	move.l d1,4(sp)
    done = vsprintf2(str, format, args);
   13a78:	move.l 16(sp),d0
   13a7c:	move.l 4(sp),-(sp)
   13a80:	move.l d0,-(sp)
   13a82:	move.l 20(sp),-(sp)
   13a86:	jsr 13904 <vsprintf2>
   13a8c:	lea 12(sp),sp
   13a90:	move.l d0,(sp)
    va_end(args);
   13a92:	clr.l 4(sp)

    return done;
   13a96:	move.l (sp),d0
}
   13a98:	addq.l #8,sp
   13a9a:	rts

00013a9c <addVarToStack>:
const char * typeName[] = {"undefined", "number", "user function", "string",
							"built-in function", "file", "stack",
							"object type", "animation", "costume"};


BOOL addVarToStack(const struct variable * va, struct variableStack ** thisStack) {
   13a9c:	       lea -20(sp),sp
   13aa0:	       move.l a6,-(sp)
    struct variableStack * newStack = (struct variableStack *)AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13aa2:	       moveq #12,d0
   13aa4:	       move.l d0,20(sp)
   13aa8:	       clr.l 16(sp)
   13aac:	       move.l 1a7a4 <SysBase>,d0
   13ab2:	       movea.l d0,a6
   13ab4:	       move.l 20(sp),d0
   13ab8:	       move.l 16(sp),d1
   13abc:	       jsr -684(a6)
   13ac0:	       move.l d0,12(sp)
   13ac4:	       move.l 12(sp),d0
   13ac8:	       move.l d0,8(sp)
    if (!newStack) return FALSE;
   13acc:	   /-- bne.s 13ad2 <addVarToStack+0x36>
   13ace:	   |   clr.w d0
   13ad0:	/--|-- bra.s 13b1a <addVarToStack+0x7e>

    if (!copyMain(va, &newStack->thisVar)) {
   13ad2:	|  \-> move.l 8(sp),d0
   13ad6:	|      move.l d0,-(sp)
   13ad8:	|      move.l 32(sp),-(sp)
   13adc:	|      jsr 145fe <copyMain>
   13ae2:	|      addq.l #8,sp
   13ae4:	|      tst.w d0
   13ae6:	|  /-- bne.s 13b02 <addVarToStack+0x66>
        FreeVec(newStack);
   13ae8:	|  |   move.l 8(sp),4(sp)
   13aee:	|  |   move.l 1a7a4 <SysBase>,d0
   13af4:	|  |   movea.l d0,a6
   13af6:	|  |   movea.l 4(sp),a1
   13afa:	|  |   jsr -690(a6)
        return FALSE;
   13afe:	|  |   clr.w d0
   13b00:	+--|-- bra.s 13b1a <addVarToStack+0x7e>
    }

    newStack->next = *thisStack;
   13b02:	|  \-> movea.l 32(sp),a0
   13b06:	|      move.l (a0),d0
   13b08:	|      movea.l 8(sp),a0
   13b0c:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13b10:	|      movea.l 32(sp),a0
   13b14:	|      move.l 8(sp),(a0)
    return TRUE;
   13b18:	|      moveq #1,d0
}
   13b1a:	\----> movea.l (sp)+,a6
   13b1c:	       lea 20(sp),sp
   13b20:	       rts

00013b22 <addVarToStackQuick>:

BOOL addVarToStackQuick(struct variable *va, struct variableStack **thisStack) {
   13b22:	       lea -16(sp),sp
   13b26:	       move.l a6,-(sp)
    struct variableStack *newStack = AllocVec(sizeof(struct variableStack), MEMF_ANY);
   13b28:	       moveq #12,d0
   13b2a:	       move.l d0,16(sp)
   13b2e:	       clr.l 12(sp)
   13b32:	       move.l 1a7a4 <SysBase>,d0
   13b38:	       movea.l d0,a6
   13b3a:	       move.l 16(sp),d0
   13b3e:	       move.l 12(sp),d1
   13b42:	       jsr -684(a6)
   13b46:	       move.l d0,8(sp)
   13b4a:	       move.l 8(sp),d0
   13b4e:	       move.l d0,4(sp)
    if (!newStack) return FALSE;
   13b52:	   /-- bne.s 13b58 <addVarToStackQuick+0x36>
   13b54:	   |   clr.w d0
   13b56:	/--|-- bra.s 13b8e <addVarToStackQuick+0x6c>

//    if (!copyMain(va, &newStack->thisVar)) return FALSE;

    memcpy(&(newStack->thisVar), va, sizeof(struct variable));
   13b58:	|  \-> move.l 4(sp),d0
   13b5c:	|      pea 8 <_start+0x8>
   13b60:	|      move.l 28(sp),-(sp)
   13b64:	|      move.l d0,-(sp)
   13b66:	|      jsr 16c12 <memcpy>
   13b6c:	|      lea 12(sp),sp
    va->varType = SVT_NULL;
   13b70:	|      movea.l 24(sp),a0
   13b74:	|      clr.l (a0)

    newStack->next = *thisStack;
   13b76:	|      movea.l 28(sp),a0
   13b7a:	|      move.l (a0),d0
   13b7c:	|      movea.l 4(sp),a0
   13b80:	|      move.l d0,8(a0)
    *thisStack = newStack;
   13b84:	|      movea.l 28(sp),a0
   13b88:	|      move.l 4(sp),(a0)
    return TRUE;
   13b8c:	|      moveq #1,d0
}
   13b8e:	\----> movea.l (sp)+,a6
   13b90:	       lea 16(sp),sp
   13b94:	       rts

00013b96 <addVariablesInSecond>:

void addVariablesInSecond(struct variable * var1, struct variable * var2) {
   13b96:	       lea -16(sp),sp
   13b9a:	       move.l a6,-(sp)
	if (var1->varType == SVT_INT && var2->varType == SVT_INT) {
   13b9c:	       movea.l 24(sp),a0
   13ba0:	       move.l (a0),d0
   13ba2:	       moveq #1,d1
   13ba4:	       cmp.l d0,d1
   13ba6:	   /-- bne.s 13bd0 <addVariablesInSecond+0x3a>
   13ba8:	   |   movea.l 28(sp),a0
   13bac:	   |   move.l (a0),d0
   13bae:	   |   moveq #1,d1
   13bb0:	   |   cmp.l d0,d1
   13bb2:	   +-- bne.s 13bd0 <addVariablesInSecond+0x3a>
		var2->varData.intValue += var1->varData.intValue;
   13bb4:	   |   movea.l 28(sp),a0
   13bb8:	   |   move.l 4(a0),d1
   13bbc:	   |   movea.l 24(sp),a0
   13bc0:	   |   move.l 4(a0),d0
   13bc4:	   |   add.l d1,d0
   13bc6:	   |   movea.l 28(sp),a0
   13bca:	   |   move.l d0,4(a0)
   13bce:	/--|-- bra.s 13c4a <addVariablesInSecond+0xb4>
	} else {
		char * string1 = getTextFromAnyVar(var1);
   13bd0:	|  \-> move.l 24(sp),-(sp)
   13bd4:	|      jsr 14836 <getTextFromAnyVar>
   13bda:	|      addq.l #4,sp
   13bdc:	|      move.l d0,16(sp)
		char * string2 = getTextFromAnyVar(var2);
   13be0:	|      move.l 28(sp),-(sp)
   13be4:	|      jsr 14836 <getTextFromAnyVar>
   13bea:	|      addq.l #4,sp
   13bec:	|      move.l d0,12(sp)

		unlinkVar(var2);
   13bf0:	|      move.l 28(sp),-(sp)
   13bf4:	|      jsr 144ae <unlinkVar>
   13bfa:	|      addq.l #4,sp
		var2->varData.theString = joinStrings(string1, string2);
   13bfc:	|      move.l 12(sp),-(sp)
   13c00:	|      move.l 20(sp),-(sp)
   13c04:	|      jsr 1378c <joinStrings>
   13c0a:	|      addq.l #8,sp
   13c0c:	|      movea.l 28(sp),a0
   13c10:	|      move.l d0,4(a0)
		var2->varType = SVT_STRING;
   13c14:	|      movea.l 28(sp),a0
   13c18:	|      moveq #3,d0
   13c1a:	|      move.l d0,(a0)
		FreeVec(string1);
   13c1c:	|      move.l 16(sp),8(sp)
   13c22:	|      move.l 1a7a4 <SysBase>,d0
   13c28:	|      movea.l d0,a6
   13c2a:	|      movea.l 8(sp),a1
   13c2e:	|      jsr -690(a6)
		FreeVec(string2);
   13c32:	|      move.l 12(sp),4(sp)
   13c38:	|      move.l 1a7a4 <SysBase>,d0
   13c3e:	|      movea.l d0,a6
   13c40:	|      movea.l 4(sp),a1
   13c44:	|      jsr -690(a6)
	}
}
   13c48:	|      nop
   13c4a:	\----> nop
   13c4c:	       movea.l (sp)+,a6
   13c4e:	       lea 16(sp),sp
   13c52:	       rts

00013c54 <compareVariablesInSecond>:

void compareVariablesInSecond (const struct variable *var1, struct variable *var2) {	
	setVariable (var2, SVT_INT, compareVars (*var1, *var2));
   13c54:	movea.l 8(sp),a0
   13c58:	move.l 4(a0),-(sp)
   13c5c:	move.l (a0),-(sp)
   13c5e:	movea.l 12(sp),a0
   13c62:	move.l 4(a0),-(sp)
   13c66:	move.l (a0),-(sp)
   13c68:	jsr 13c8a <compareVars>
   13c6e:	lea 16(sp),sp
   13c72:	move.l d0,-(sp)
   13c74:	pea 1 <_start+0x1>
   13c78:	move.l 16(sp),-(sp)
   13c7c:	jsr 14b52 <setVariable>
   13c82:	lea 12(sp),sp
}
   13c86:	nop
   13c88:	rts

00013c8a <compareVars>:


int compareVars (const struct variable var1, const struct variable var2) {
   13c8a:	       subq.l #4,sp
	int re = 0;
   13c8c:	       clr.l (sp)
	if (var1.varType == var2.varType) {
   13c8e:	       move.l 8(sp),d1
   13c92:	       move.l 16(sp),d0
   13c96:	       cmp.l d1,d0
   13c98:	/----- bne.w 13d60 <compareVars+0xd6>
		switch (var1.varType) {
   13c9c:	|      move.l 8(sp),d0
   13ca0:	|      moveq #9,d1
   13ca2:	|      cmp.l d0,d1
   13ca4:	|  /-- bcs.w 13d48 <compareVars+0xbe>
   13ca8:	|  |   add.l d0,d0
   13caa:	|  |   movea.l d0,a0
   13cac:	|  |   adda.l #81080,a0
   13cb2:	|  |   move.w (a0),d0
   13cb4:	|  |   jmp (13cb8 <compareVars+0x2e>,pc,d0.w)
   13cb8:	|  |   ori.b #-112,(a4)
   13cbc:	|  |   ori.l #5243024,(a0)
   13cc2:	|  |   ori.l #7733392,(a0)
   13cc8:	|  |   ori.b #28,(1,a6,d7.w)
			case SVT_NULL:
			re = 1;
   13cce:	|  |   move.l d0,(sp)
			break;
   13cd0:	+--|-- bra.w 13d60 <compareVars+0xd6>

			case SVT_COSTUME:
			re = (var1.varData.costumeHandler == var2.varData.costumeHandler);
   13cd4:	|  |   move.l 12(sp),d1
   13cd8:	|  |   move.l 20(sp),d0
   13cdc:	|  |   cmp.l d1,d0
   13cde:	|  |   seq d0
   13ce0:	|  |   neg.b d0
   13ce2:	|  |   move.b d0,d0
   13ce4:	|  |   andi.l #255,d0
   13cea:	|  |   move.l d0,(sp)
			break;
   13cec:	+--|-- bra.s 13d60 <compareVars+0xd6>

			case SVT_ANIM:
			re = (var1.varData.animHandler == var2.varData.animHandler);
   13cee:	|  |   move.l 12(sp),d1
   13cf2:	|  |   move.l 20(sp),d0
   13cf6:	|  |   cmp.l d1,d0
   13cf8:	|  |   seq d0
   13cfa:	|  |   neg.b d0
   13cfc:	|  |   move.b d0,d0
   13cfe:	|  |   andi.l #255,d0
   13d04:	|  |   move.l d0,(sp)
			break;
   13d06:	+--|-- bra.s 13d60 <compareVars+0xd6>

			case SVT_STRING:

			re = (strcmp (var1.varData.theString, var2.varData.theString) == 0);
   13d08:	|  |   move.l 20(sp),d1
   13d0c:	|  |   move.l 12(sp),d0
   13d10:	|  |   move.l d1,-(sp)
   13d12:	|  |   move.l d0,-(sp)
   13d14:	|  |   jsr 1370c <strcmp>
   13d1a:	|  |   addq.l #8,sp
   13d1c:	|  |   tst.l d0
   13d1e:	|  |   seq d0
   13d20:	|  |   neg.b d0
   13d22:	|  |   move.b d0,d0
   13d24:	|  |   andi.l #255,d0
   13d2a:	|  |   move.l d0,(sp)
			break;
   13d2c:	+--|-- bra.s 13d60 <compareVars+0xd6>

			case SVT_STACK:
			re = (var1.varData.theStack == var2.varData.theStack);
   13d2e:	|  |   move.l 12(sp),d1
   13d32:	|  |   move.l 20(sp),d0
   13d36:	|  |   cmp.l d1,d0
   13d38:	|  |   seq d0
   13d3a:	|  |   neg.b d0
   13d3c:	|  |   move.b d0,d0
   13d3e:	|  |   andi.l #255,d0
   13d44:	|  |   move.l d0,(sp)
			break;
   13d46:	+--|-- bra.s 13d60 <compareVars+0xd6>

			default:
			re = (var1.varData.intValue == var2.varData.intValue);
   13d48:	|  \-> move.l 12(sp),d1
   13d4c:	|      move.l 20(sp),d0
   13d50:	|      cmp.l d1,d0
   13d52:	|      seq d0
   13d54:	|      neg.b d0
   13d56:	|      move.b d0,d0
   13d58:	|      andi.l #255,d0
   13d5e:	|      move.l d0,(sp)
		}
	}
	return re;
   13d60:	\----> move.l (sp),d0
}
   13d62:	       addq.l #4,sp
   13d64:	       rts

00013d66 <copyStack>:

BOOL copyStack (const struct variable * from, struct variable * to) {
   13d66:	             lea -16(sp),sp
   13d6a:	             move.l a6,-(sp)
	to->varType = SVT_STACK;
   13d6c:	             movea.l 28(sp),a0
   13d70:	             moveq #6,d0
   13d72:	             move.l d0,(a0)
	to->varData.theStack = (struct stackHandler *)AllocVec(sizeof(struct stackHandler), MEMF_ANY);
   13d74:	             moveq #12,d0
   13d76:	             move.l d0,12(sp)
   13d7a:	             clr.l 8(sp)
   13d7e:	             move.l 1a7a4 <SysBase>,d0
   13d84:	             movea.l d0,a6
   13d86:	             move.l 12(sp),d0
   13d8a:	             move.l 8(sp),d1
   13d8e:	             jsr -684(a6)
   13d92:	             move.l d0,4(sp)
   13d96:	             move.l 4(sp),d0
   13d9a:	             movea.l 28(sp),a0
   13d9e:	             move.l d0,4(a0)
	if (!to->varData.theStack) return FALSE;
   13da2:	             movea.l 28(sp),a0
   13da6:	             move.l 4(a0),d0
   13daa:	         /-- bne.s 13db2 <copyStack+0x4c>
   13dac:	         |   clr.w d0
   13dae:	/--------|-- bra.w 13e34 <copyStack+0xce>
	to->varData.theStack->first = NULL;
   13db2:	|        \-> movea.l 28(sp),a0
   13db6:	|            movea.l 4(a0),a0
   13dba:	|            clr.l (a0)
	to->varData.theStack->last = NULL;
   13dbc:	|            movea.l 28(sp),a0
   13dc0:	|            movea.l 4(a0),a0
   13dc4:	|            clr.l 4(a0)
	to->varData.theStack->timesUsed = 1;
   13dc8:	|            movea.l 28(sp),a0
   13dcc:	|            movea.l 4(a0),a0
   13dd0:	|            moveq #1,d0
   13dd2:	|            move.l d0,8(a0)
	struct variableStack * a = from->varData.theStack->first;
   13dd6:	|            movea.l 24(sp),a0
   13dda:	|            movea.l 4(a0),a0
   13dde:	|            move.l (a0),16(sp)

	while (a) {
   13de2:	|     /----- bra.s 13e2c <copyStack+0xc6>
		addVarToStack(&a->thisVar, &(to->varData.theStack->first));
   13de4:	|  /--|----> movea.l 28(sp),a0
   13de8:	|  |  |      move.l 4(a0),d0
   13dec:	|  |  |      move.l d0,d1
   13dee:	|  |  |      move.l 16(sp),d0
   13df2:	|  |  |      move.l d1,-(sp)
   13df4:	|  |  |      move.l d0,-(sp)
   13df6:	|  |  |      jsr 13a9c <addVarToStack>
   13dfc:	|  |  |      addq.l #8,sp
		if (to->varData.theStack->last == NULL) {
   13dfe:	|  |  |      movea.l 28(sp),a0
   13e02:	|  |  |      movea.l 4(a0),a0
   13e06:	|  |  |      move.l 4(a0),d0
   13e0a:	|  |  |  /-- bne.s 13e22 <copyStack+0xbc>
			to->varData.theStack->last = to->varData.theStack->first;
   13e0c:	|  |  |  |   movea.l 28(sp),a0
   13e10:	|  |  |  |   movea.l 4(a0),a1
   13e14:	|  |  |  |   movea.l 28(sp),a0
   13e18:	|  |  |  |   movea.l 4(a0),a0
   13e1c:	|  |  |  |   move.l (a1),d0
   13e1e:	|  |  |  |   move.l d0,4(a0)
		}
		a = a->next;
   13e22:	|  |  |  \-> movea.l 16(sp),a0
   13e26:	|  |  |      move.l 8(a0),16(sp)
	while (a) {
   13e2c:	|  |  \----> tst.l 16(sp)
   13e30:	|  \-------- bne.s 13de4 <copyStack+0x7e>
	}

	return TRUE;
   13e32:	|            moveq #1,d0
}
   13e34:	\----------> movea.l (sp)+,a6
   13e36:	             lea 16(sp),sp
   13e3a:	             rts

00013e3c <deleteVarFromStack>:

int deleteVarFromStack (const struct variable * va, struct variableStack ** thisStack, BOOL allOfEm) {
   13e3c:	                lea -20(sp),sp
   13e40:	                move.l a6,-(sp)
   13e42:	                move.l 36(sp),d0
   13e46:	                move.w d0,d0
   13e48:	                move.w d0,6(sp)
    struct variableStack ** huntVar = thisStack;
   13e4c:	                move.l 32(sp),20(sp)
    struct variableStack * killMe;
    int reply = 0;
   13e52:	                clr.l 16(sp)

    while (*huntVar) {
   13e56:	   /----------- bra.s 13ed4 <deleteVarFromStack+0x98>
        if (compareVars((*huntVar)->thisVar, *va)) {
   13e58:	/--|----------> movea.l 20(sp),a0
   13e5c:	|  |            movea.l (a0),a0
   13e5e:	|  |            movea.l 28(sp),a1
   13e62:	|  |            move.l 4(a1),-(sp)
   13e66:	|  |            move.l (a1),-(sp)
   13e68:	|  |            move.l 4(a0),-(sp)
   13e6c:	|  |            move.l (a0),-(sp)
   13e6e:	|  |            jsr 13c8a <compareVars>
   13e74:	|  |            lea 16(sp),sp
   13e78:	|  |            tst.l d0
   13e7a:	|  |  /-------- beq.s 13ec6 <deleteVarFromStack+0x8a>
            killMe = *huntVar;
   13e7c:	|  |  |         movea.l 20(sp),a0
   13e80:	|  |  |         move.l (a0),12(sp)
            *huntVar = killMe->next;
   13e84:	|  |  |         movea.l 12(sp),a0
   13e88:	|  |  |         move.l 8(a0),d0
   13e8c:	|  |  |         movea.l 20(sp),a0
   13e90:	|  |  |         move.l d0,(a0)
            unlinkVar(&killMe->thisVar);
   13e92:	|  |  |         move.l 12(sp),d0
   13e96:	|  |  |         move.l d0,-(sp)
   13e98:	|  |  |         jsr 144ae <unlinkVar>
   13e9e:	|  |  |         addq.l #4,sp
            FreeVec(killMe);
   13ea0:	|  |  |         move.l 12(sp),8(sp)
   13ea6:	|  |  |         move.l 1a7a4 <SysBase>,d0
   13eac:	|  |  |         movea.l d0,a6
   13eae:	|  |  |         movea.l 8(sp),a1
   13eb2:	|  |  |         jsr -690(a6)
            if (!allOfEm) return 1;
   13eb6:	|  |  |         tst.w 6(sp)
   13eba:	|  |  |     /-- bne.s 13ec0 <deleteVarFromStack+0x84>
   13ebc:	|  |  |     |   moveq #1,d0
   13ebe:	|  |  |  /--|-- bra.s 13ee2 <deleteVarFromStack+0xa6>
            reply++;
   13ec0:	|  |  |  |  \-> addq.l #1,16(sp)
   13ec4:	|  +--|--|----- bra.s 13ed4 <deleteVarFromStack+0x98>
        } else {
            huntVar = &((*huntVar)->next);
   13ec6:	|  |  \--|----> movea.l 20(sp),a0
   13eca:	|  |     |      move.l (a0),d0
   13ecc:	|  |     |      move.l d0,d1
   13ece:	|  |     |      addq.l #8,d1
   13ed0:	|  |     |      move.l d1,20(sp)
    while (*huntVar) {
   13ed4:	|  \-----|----> movea.l 20(sp),a0
   13ed8:	|        |      move.l (a0),d0
   13eda:	\--------|----- bne.w 13e58 <deleteVarFromStack+0x1c>
        }
    }

    return reply;
   13ede:	         |      move.l 16(sp),d0
}
   13ee2:	         \----> movea.l (sp)+,a6
   13ee4:	                lea 20(sp),sp
   13ee8:	                rts

00013eea <fastArrayGetByIndex>:


struct variable * fastArrayGetByIndex (struct fastArrayHandler * vS, unsigned int theIndex) {
	if (theIndex >= (unsigned int) vS -> size) return NULL;
   13eea:	       movea.l 4(sp),a0
   13eee:	       move.l 4(a0),d0
   13ef2:	       cmp.l 8(sp),d0
   13ef6:	   /-- bhi.s 13efc <fastArrayGetByIndex+0x12>
   13ef8:	   |   moveq #0,d0
   13efa:	/--|-- bra.s 13f0a <fastArrayGetByIndex+0x20>
	return & vS -> fastVariables[theIndex];
   13efc:	|  \-> movea.l 4(sp),a0
   13f00:	|      move.l (a0),d1
   13f02:	|      move.l 8(sp),d0
   13f06:	|      lsl.l #3,d0
   13f08:	|      add.l d1,d0
}
   13f0a:	\----> rts

00013f0c <getCostumeFromVar>:

struct persona * getCostumeFromVar(struct variable *thisVar) {
   13f0c:	                lea -32(sp),sp
   13f10:	                move.l a6,-(sp)
   13f12:	                move.l a2,-(sp)
    struct persona *p = NULL;
   13f14:	                clr.l 36(sp)

    switch (thisVar->varType) {
   13f18:	                movea.l 44(sp),a0
   13f1c:	                move.l (a0),d0
   13f1e:	                moveq #8,d1
   13f20:	                cmp.l d0,d1
   13f22:	            /-- beq.s 13f30 <getCostumeFromVar+0x24>
   13f24:	            |   moveq #9,d1
   13f26:	            |   cmp.l d0,d1
   13f28:	   /--------|-- beq.w 13fde <getCostumeFromVar+0xd2>
   13f2c:	/--|--------|-- bra.w 13fe8 <getCostumeFromVar+0xdc>
        case SVT_ANIM:
            p = AllocVec(sizeof(struct persona), MEMF_ANY);
   13f30:	|  |        \-> moveq #8,d0
   13f32:	|  |            move.l d0,28(sp)
   13f36:	|  |            clr.l 24(sp)
   13f3a:	|  |            move.l 1a7a4 <SysBase>,d0
   13f40:	|  |            movea.l d0,a6
   13f42:	|  |            move.l 28(sp),d0
   13f46:	|  |            move.l 24(sp),d1
   13f4a:	|  |            jsr -684(a6)
   13f4e:	|  |            move.l d0,20(sp)
   13f52:	|  |            move.l 20(sp),d0
   13f56:	|  |            move.l d0,36(sp)
            if (!p) return NULL;
   13f5a:	|  |        /-- bne.s 13f62 <getCostumeFromVar+0x56>
   13f5c:	|  |        |   moveq #0,d0
   13f5e:	|  |  /-----|-- bra.w 14012 <getCostumeFromVar+0x106>
            p->numDirections = 1;
   13f62:	|  |  |     \-> movea.l 36(sp),a0
   13f66:	|  |  |         moveq #1,d1
   13f68:	|  |  |         move.l d1,4(a0)
            p->animation = AllocVec(3 * sizeof(struct personaAnimation *), MEMF_ANY);
   13f6c:	|  |  |         moveq #12,d0
   13f6e:	|  |  |         move.l d0,16(sp)
   13f72:	|  |  |         clr.l 12(sp)
   13f76:	|  |  |         move.l 1a7a4 <SysBase>,d0
   13f7c:	|  |  |         movea.l d0,a6
   13f7e:	|  |  |         move.l 16(sp),d0
   13f82:	|  |  |         move.l 12(sp),d1
   13f86:	|  |  |         jsr -684(a6)
   13f8a:	|  |  |         move.l d0,8(sp)
   13f8e:	|  |  |         move.l 8(sp),d0
   13f92:	|  |  |         movea.l 36(sp),a0
   13f96:	|  |  |         move.l d0,(a0)
            if (!p->animation) return NULL;
   13f98:	|  |  |         movea.l 36(sp),a0
   13f9c:	|  |  |         move.l (a0),d0
   13f9e:	|  |  |     /-- bne.s 13fa4 <getCostumeFromVar+0x98>
   13fa0:	|  |  |     |   moveq #0,d0
   13fa2:	|  |  +-----|-- bra.s 14012 <getCostumeFromVar+0x106>

            for (int iii = 0; iii < 3; iii++) {
   13fa4:	|  |  |     \-> clr.l 32(sp)
   13fa8:	|  |  |     /-- bra.s 13fd4 <getCostumeFromVar+0xc8>
                p->animation[iii] = copyAnim(thisVar->varData.animHandler);
   13faa:	|  |  |  /--|-> movea.l 44(sp),a0
   13fae:	|  |  |  |  |   move.l 4(a0),d0
   13fb2:	|  |  |  |  |   movea.l 36(sp),a0
   13fb6:	|  |  |  |  |   movea.l (a0),a0
   13fb8:	|  |  |  |  |   move.l 32(sp),d1
   13fbc:	|  |  |  |  |   add.l d1,d1
   13fbe:	|  |  |  |  |   add.l d1,d1
   13fc0:	|  |  |  |  |   lea (0,a0,d1.l),a2
   13fc4:	|  |  |  |  |   move.l d0,-(sp)
   13fc6:	|  |  |  |  |   jsr 9006 <copyAnim>
   13fcc:	|  |  |  |  |   addq.l #4,sp
   13fce:	|  |  |  |  |   move.l d0,(a2)
            for (int iii = 0; iii < 3; iii++) {
   13fd0:	|  |  |  |  |   addq.l #1,32(sp)
   13fd4:	|  |  |  |  \-> moveq #2,d1
   13fd6:	|  |  |  |      cmp.l 32(sp),d1
   13fda:	|  |  |  \----- bge.s 13faa <getCostumeFromVar+0x9e>
            }
            break;
   13fdc:	|  |  |     /-- bra.s 1400e <getCostumeFromVar+0x102>

        case SVT_COSTUME:
            return thisVar->varData.costumeHandler;
   13fde:	|  \--|-----|-> movea.l 44(sp),a0
   13fe2:	|     |     |   move.l 4(a0),d0
   13fe6:	|     +-----|-- bra.s 14012 <getCostumeFromVar+0x106>
            break;

        default:
            KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   13fe8:	\-----|-----|-> movea.l 44(sp),a0
   13fec:	      |     |   move.l (a0),d0
   13fee:	      |     |   add.l d0,d0
   13ff0:	      |     |   movea.l d0,a1
   13ff2:	      |     |   adda.l d0,a1
   13ff4:	      |     |   lea 1a680 <typeName>,a0
   13ffa:	      |     |   move.l (0,a1,a0.l),d0
   13ffe:	      |     |   move.l d0,-(sp)
   14000:	      |     |   pea 198f5 <main_sludge.c.0270f7ba+0xb9>
   14006:	      |     |   jsr 16c5e <KPrintF>
   1400c:	      |     |   addq.l #8,sp
    }

    return p;
   1400e:	      |     \-> move.l 36(sp),d0
}
   14012:	      \-------> movea.l (sp)+,a2
   14014:	                movea.l (sp)+,a6
   14016:	                lea 32(sp),sp
   1401a:	                rts

0001401c <getSavedGamesStack>:

BOOL getSavedGamesStack(struct stackHandler * sH, char * ext) {
   1401c:	                lea -96(sp),sp
   14020:	                movem.l d2-d3/a6,-(sp)
	char * pattern = joinStrings("*", ext);
   14024:	                move.l 116(sp),-(sp)
   14028:	                pea 1992d <main_sludge.c.0270f7ba+0xf1>
   1402e:	                jsr 1378c <joinStrings>
   14034:	                addq.l #8,sp
   14036:	                move.l d0,102(sp)
	if (!pattern) return FALSE;
   1403a:	            /-- bne.s 14042 <getSavedGamesStack+0x26>
   1403c:	            |   clr.w d0
   1403e:	/-----------|-- bra.w 14256 <getSavedGamesStack+0x23a>

	struct variable newName;
	newName.varType = SVT_NULL;
   14042:	|           \-> clr.l 14(sp)

	BPTR dirLock = Lock(".", ACCESS_READ);
   14046:	|               move.l #104751,98(sp)
   1404e:	|               moveq #-2,d0
   14050:	|               move.l d0,94(sp)
   14054:	|               move.l 1a7ac <DOSBase>,d0
   1405a:	|               movea.l d0,a6
   1405c:	|               move.l 98(sp),d1
   14060:	|               move.l 94(sp),d2
   14064:	|               jsr -84(a6)
   14068:	|               move.l d0,90(sp)
   1406c:	|               move.l 90(sp),d0
   14070:	|               move.l d0,86(sp)
	if (!dirLock) return FALSE;
   14074:	|           /-- bne.s 1407c <getSavedGamesStack+0x60>
   14076:	|           |   clr.w d0
   14078:	+-----------|-- bra.w 14256 <getSavedGamesStack+0x23a>

	struct FileInfoBlock *fib = (struct FileInfoBlock *)AllocVec(sizeof(struct FileInfoBlock), MEMF_CLEAR);
   1407c:	|           \-> move.l #260,82(sp)
   14084:	|               move.l #65536,78(sp)
   1408c:	|               move.l 1a7a4 <SysBase>,d0
   14092:	|               movea.l d0,a6
   14094:	|               move.l 82(sp),d0
   14098:	|               move.l 78(sp),d1
   1409c:	|               jsr -684(a6)
   140a0:	|               move.l d0,74(sp)
   140a4:	|               move.l 74(sp),d0
   140a8:	|               move.l d0,70(sp)
	if (!fib) {
   140ac:	|           /-- bne.s 140ca <getSavedGamesStack+0xae>
		UnLock(dirLock);
   140ae:	|           |   move.l 86(sp),22(sp)
   140b4:	|           |   move.l 1a7ac <DOSBase>,d0
   140ba:	|           |   movea.l d0,a6
   140bc:	|           |   move.l 22(sp),d1
   140c0:	|           |   jsr -90(a6)
		return FALSE;
   140c4:	|           |   clr.w d0
   140c6:	+-----------|-- bra.w 14256 <getSavedGamesStack+0x23a>
	}

	BOOL result = FALSE;
   140ca:	|           \-> clr.w 106(sp)
	if (Examine(dirLock, fib)) {
   140ce:	|               move.l 86(sp),66(sp)
   140d4:	|               move.l 70(sp),62(sp)
   140da:	|               move.l 1a7ac <DOSBase>,d0
   140e0:	|               movea.l d0,a6
   140e2:	|               move.l 66(sp),d1
   140e6:	|               move.l 62(sp),d2
   140ea:	|               jsr -102(a6)
   140ee:	|               move.l d0,58(sp)
   140f2:	|               move.l 58(sp),d0
   140f6:	|  /----------- beq.w 1420a <getSavedGamesStack+0x1ee>
		while (ExNext(dirLock, fib)) {
   140fa:	|  |        /-- bra.w 141d6 <getSavedGamesStack+0x1ba>
			if (!strcmp(fib->fib_FileName + strlen(fib->fib_FileName) - strlen(ext), ext)) {
   140fe:	|  |  /-----|-> move.l 70(sp),d2
   14102:	|  |  |     |   addq.l #8,d2
   14104:	|  |  |     |   move.l 70(sp),d0
   14108:	|  |  |     |   addq.l #8,d0
   1410a:	|  |  |     |   move.l d0,-(sp)
   1410c:	|  |  |     |   jsr 1374c <strlen>
   14112:	|  |  |     |   addq.l #4,sp
   14114:	|  |  |     |   move.l d0,d3
   14116:	|  |  |     |   move.l 116(sp),-(sp)
   1411a:	|  |  |     |   jsr 1374c <strlen>
   14120:	|  |  |     |   addq.l #4,sp
   14122:	|  |  |     |   move.l d3,d1
   14124:	|  |  |     |   sub.l d0,d1
   14126:	|  |  |     |   move.l d2,d0
   14128:	|  |  |     |   add.l d1,d0
   1412a:	|  |  |     |   move.l 116(sp),-(sp)
   1412e:	|  |  |     |   move.l d0,-(sp)
   14130:	|  |  |     |   jsr 1370c <strcmp>
   14136:	|  |  |     |   addq.l #8,sp
   14138:	|  |  |     |   tst.l d0
   1413a:	|  |  |     +-- bne.w 141d6 <getSavedGamesStack+0x1ba>
				fib->fib_FileName[strlen(fib->fib_FileName) - strlen(ext)] = 0;
   1413e:	|  |  |     |   move.l 70(sp),d0
   14142:	|  |  |     |   addq.l #8,d0
   14144:	|  |  |     |   move.l d0,-(sp)
   14146:	|  |  |     |   jsr 1374c <strlen>
   1414c:	|  |  |     |   addq.l #4,sp
   1414e:	|  |  |     |   move.l d0,d2
   14150:	|  |  |     |   move.l 116(sp),-(sp)
   14154:	|  |  |     |   jsr 1374c <strlen>
   1415a:	|  |  |     |   addq.l #4,sp
   1415c:	|  |  |     |   move.l d0,d1
   1415e:	|  |  |     |   move.l d2,d0
   14160:	|  |  |     |   sub.l d1,d0
   14162:	|  |  |     |   movea.l 70(sp),a0
   14166:	|  |  |     |   clr.b (8,a0,d0.l)
				char * decoded = decodeFilename(fib->fib_FileName);
   1416a:	|  |  |     |   move.l 70(sp),d0
   1416e:	|  |  |     |   addq.l #8,d0
   14170:	|  |  |     |   move.l d0,-(sp)
   14172:	|  |  |     |   jsr 118 <decodeFilename>
   14178:	|  |  |     |   addq.l #4,sp
   1417a:	|  |  |     |   move.l d0,42(sp)
				makeTextVar(&newName, decoded);
   1417e:	|  |  |     |   move.l 42(sp),-(sp)
   14182:	|  |  |     |   lea 18(sp),a0
   14186:	|  |  |     |   move.l a0,-(sp)
   14188:	|  |  |     |   jsr 14482 <makeTextVar>
   1418e:	|  |  |     |   addq.l #8,sp
				FreeVec(decoded);
   14190:	|  |  |     |   move.l 42(sp),38(sp)
   14196:	|  |  |     |   move.l 1a7a4 <SysBase>,d0
   1419c:	|  |  |     |   movea.l d0,a6
   1419e:	|  |  |     |   movea.l 38(sp),a1
   141a2:	|  |  |     |   jsr -690(a6)
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   141a6:	|  |  |     |   move.l 112(sp),d0
   141aa:	|  |  |     |   move.l d0,-(sp)
   141ac:	|  |  |     |   lea 18(sp),a0
   141b0:	|  |  |     |   move.l a0,-(sp)
   141b2:	|  |  |     |   jsr 13a9c <addVarToStack>
   141b8:	|  |  |     |   addq.l #8,sp
   141ba:	|  |  |     |   tst.w d0
   141bc:	|  |  |  /--|-- beq.s 1420e <getSavedGamesStack+0x1f2>
				if (sH->last == NULL) sH->last = sH->first;
   141be:	|  |  |  |  |   movea.l 112(sp),a0
   141c2:	|  |  |  |  |   move.l 4(a0),d0
   141c6:	|  |  |  |  +-- bne.s 141d6 <getSavedGamesStack+0x1ba>
   141c8:	|  |  |  |  |   movea.l 112(sp),a0
   141cc:	|  |  |  |  |   move.l (a0),d0
   141ce:	|  |  |  |  |   movea.l 112(sp),a0
   141d2:	|  |  |  |  |   move.l d0,4(a0)
		while (ExNext(dirLock, fib)) {
   141d6:	|  |  |  |  \-> move.l 86(sp),54(sp)
   141dc:	|  |  |  |      move.l 70(sp),50(sp)
   141e2:	|  |  |  |      move.l 1a7ac <DOSBase>,d0
   141e8:	|  |  |  |      movea.l d0,a6
   141ea:	|  |  |  |      move.l 54(sp),d1
   141ee:	|  |  |  |      move.l 50(sp),d2
   141f2:	|  |  |  |      jsr -108(a6)
   141f6:	|  |  |  |      move.l d0,46(sp)
   141fa:	|  |  |  |      move.l 46(sp),d0
   141fe:	|  |  \--|----- bne.w 140fe <getSavedGamesStack+0xe2>
			}
		}
		result = TRUE;
   14202:	|  |     |      move.w #1,106(sp)
   14208:	|  |     |  /-- bra.s 14210 <getSavedGamesStack+0x1f4>
	}

cleanup:
   1420a:	|  \-----|--|-> nop
   1420c:	|        |  +-- bra.s 14210 <getSavedGamesStack+0x1f4>
				if (!addVarToStack(&newName, &sH->first)) goto cleanup;
   1420e:	|        \--|-> nop
	FreeVec(fib);
   14210:	|           \-> move.l 70(sp),34(sp)
   14216:	|               move.l 1a7a4 <SysBase>,d0
   1421c:	|               movea.l d0,a6
   1421e:	|               movea.l 34(sp),a1
   14222:	|               jsr -690(a6)
	UnLock(dirLock);
   14226:	|               move.l 86(sp),30(sp)
   1422c:	|               move.l 1a7ac <DOSBase>,d0
   14232:	|               movea.l d0,a6
   14234:	|               move.l 30(sp),d1
   14238:	|               jsr -90(a6)
	FreeVec(pattern);
   1423c:	|               move.l 102(sp),26(sp)
   14242:	|               move.l 1a7a4 <SysBase>,d0
   14248:	|               movea.l d0,a6
   1424a:	|               movea.l 26(sp),a1
   1424e:	|               jsr -690(a6)
	return result;
   14252:	|               move.w 106(sp),d0
}
   14256:	\-------------> movem.l (sp)+,d2-d3/a6
   1425a:	                lea 96(sp),sp
   1425e:	                rts

00014260 <getValueType>:


BOOL getValueType (int *toHere, enum variableType vT, const struct variable *v) {
   14260:	       subq.l #8,sp
	//if (! v) return false;
	if (v->varType != vT) {
   14262:	       movea.l 20(sp),a0
   14266:	       move.l (a0),d0
   14268:	       cmp.l 16(sp),d0
   1426c:	/----- beq.s 142d0 <getValueType+0x70>
		char * e1 = joinStrings ("Can only perform specified operation on a value which is of type ", typeName[vT]);
   1426e:	|      move.l 16(sp),d0
   14272:	|      add.l d0,d0
   14274:	|      movea.l d0,a1
   14276:	|      adda.l d0,a1
   14278:	|      lea 1a680 <typeName>,a0
   1427e:	|      move.l (0,a1,a0.l),d0
   14282:	|      move.l d0,-(sp)
   14284:	|      pea 19931 <main_sludge.c.0270f7ba+0xf5>
   1428a:	|      jsr 1378c <joinStrings>
   14290:	|      addq.l #8,sp
   14292:	|      move.l d0,4(sp)
		char * e2 = joinStrings ("... value supplied was of type ", typeName[v->varType]);
   14296:	|      movea.l 20(sp),a0
   1429a:	|      move.l (a0),d0
   1429c:	|      add.l d0,d0
   1429e:	|      movea.l d0,a1
   142a0:	|      adda.l d0,a1
   142a2:	|      lea 1a680 <typeName>,a0
   142a8:	|      move.l (0,a1,a0.l),d0
   142ac:	|      move.l d0,-(sp)
   142ae:	|      pea 19973 <main_sludge.c.0270f7ba+0x137>
   142b4:	|      jsr 1378c <joinStrings>
   142ba:	|      addq.l #8,sp
   142bc:	|      move.l d0,(sp)
		KPrintF(e1, e2);
   142be:	|      move.l (sp),-(sp)
   142c0:	|      move.l 8(sp),-(sp)
   142c4:	|      jsr 16c5e <KPrintF>
   142ca:	|      addq.l #8,sp

		return FALSE;
   142cc:	|      clr.w d0
   142ce:	|  /-- bra.s 142e0 <getValueType+0x80>
	}
	*toHere = v->varData.intValue;
   142d0:	\--|-> movea.l 20(sp),a0
   142d4:	   |   move.l 4(a0),d0
   142d8:	   |   movea.l 12(sp),a0
   142dc:	   |   move.l d0,(a0)
	return TRUE;
   142de:	   |   moveq #1,d0
}
   142e0:	   \-> addq.l #8,sp
   142e2:	       rts

000142e4 <loadStringToVar>:

BOOL loadStringToVar (struct variable *thisVar, int value) {
	makeTextVar (thisVar, getNumberedString (value));
   142e4:	move.l 8(sp),-(sp)
   142e8:	jsr 655a <getNumberedString>
   142ee:	addq.l #4,sp
   142f0:	move.l d0,-(sp)
   142f2:	move.l 8(sp),-(sp)
   142f6:	jsr 14482 <makeTextVar>
   142fc:	addq.l #8,sp
	return (BOOL) (thisVar->varData.theString != NULL);
   142fe:	movea.l 4(sp),a0
   14302:	move.l 4(a0),d0
   14306:	sne d0
   14308:	neg.b d0
   1430a:	move.b d0,d0
   1430c:	andi.w #255,d0
}
   14310:	rts

00014312 <makeFastArrayFromStack>:
		break;
	}
	return TRUE;
}

BOOL makeFastArrayFromStack (struct variable *to, const struct stackHandler *stacky) {
   14312:	          subq.l #8,sp
    int size = stackSize(stacky);
   14314:	          move.l 16(sp),-(sp)
   14318:	          jsr 14bc0 <stackSize>
   1431e:	          addq.l #4,sp
   14320:	          move.l d0,4(sp)
    if (!makeFastArraySize(to, size)) return FALSE;
   14324:	          move.l 4(sp),-(sp)
   14328:	          move.l 16(sp),-(sp)
   1432c:	          jsr 1437c <makeFastArraySize>
   14332:	          addq.l #8,sp
   14334:	          tst.w d0
   14336:	      /-- bne.s 1433c <makeFastArrayFromStack+0x2a>
   14338:	      |   clr.w d0
   1433a:	/-----|-- bra.s 14378 <makeFastArrayFromStack+0x66>

    // Now let's fill up the new array

    struct variableStack *allV = stacky->first;
   1433c:	|     \-> movea.l 16(sp),a0
   14340:	|         move.l (a0),(sp)
    size = 0;
   14342:	|         clr.l 4(sp)
    while (allV) {
   14346:	|     /-- bra.s 14372 <makeFastArrayFromStack+0x60>
        copyMain(&allV->thisVar, &to->varData.fastArray->fastVariables[size]);
   14348:	|  /--|-> movea.l 12(sp),a0
   1434c:	|  |  |   movea.l 4(a0),a0
   14350:	|  |  |   move.l (a0),d1
   14352:	|  |  |   move.l 4(sp),d0
   14356:	|  |  |   lsl.l #3,d0
   14358:	|  |  |   add.l d0,d1
   1435a:	|  |  |   move.l (sp),d0
   1435c:	|  |  |   move.l d1,-(sp)
   1435e:	|  |  |   move.l d0,-(sp)
   14360:	|  |  |   jsr 145fe <copyMain>
   14366:	|  |  |   addq.l #8,sp
        size++;
   14368:	|  |  |   addq.l #1,4(sp)
        allV = allV->next;
   1436c:	|  |  |   movea.l (sp),a0
   1436e:	|  |  |   move.l 8(a0),(sp)
    while (allV) {
   14372:	|  |  \-> tst.l (sp)
   14374:	|  \----- bne.s 14348 <makeFastArrayFromStack+0x36>
    }
    return TRUE;
   14376:	|         moveq #1,d0
}
   14378:	\-------> addq.l #8,sp
   1437a:	          rts

0001437c <makeFastArraySize>:


BOOL makeFastArraySize (struct variable *to, int size) {
   1437c:	          lea -28(sp),sp
   14380:	          move.l a6,-(sp)
    if (size < 0) {
   14382:	          tst.l 40(sp)
   14386:	      /-- bge.s 1439c <makeFastArraySize+0x20>
		KPrintF("makeFastArraySize: Can't create a fast array with a negative number of elements!");
   14388:	      |   pea 199b8 <main_sludge.c.0270f7ba+0x17c>
   1438e:	      |   jsr 16c5e <KPrintF>
   14394:	      |   addq.l #4,sp
		return FALSE;
   14396:	      |   clr.w d0
   14398:	/-----|-- bra.w 1447a <makeFastArraySize+0xfe>
	}		
    unlinkVar(to);
   1439c:	|     \-> move.l 36(sp),-(sp)
   143a0:	|         jsr 144ae <unlinkVar>
   143a6:	|         addq.l #4,sp
    to->varType = SVT_FASTARRAY;
   143a8:	|         movea.l 36(sp),a0
   143ac:	|         moveq #10,d0
   143ae:	|         move.l d0,(a0)
    to->varData.fastArray = AllocVec(sizeof(struct fastArrayHandler), MEMF_ANY);
   143b0:	|         moveq #12,d0
   143b2:	|         move.l d0,24(sp)
   143b6:	|         clr.l 20(sp)
   143ba:	|         move.l 1a7a4 <SysBase>,d0
   143c0:	|         movea.l d0,a6
   143c2:	|         move.l 24(sp),d0
   143c6:	|         move.l 20(sp),d1
   143ca:	|         jsr -684(a6)
   143ce:	|         move.l d0,16(sp)
   143d2:	|         move.l 16(sp),d0
   143d6:	|         movea.l 36(sp),a0
   143da:	|         move.l d0,4(a0)
    if (!to->varData.fastArray) return FALSE;
   143de:	|         movea.l 36(sp),a0
   143e2:	|         move.l 4(a0),d0
   143e6:	|     /-- bne.s 143ee <makeFastArraySize+0x72>
   143e8:	|     |   clr.w d0
   143ea:	+-----|-- bra.w 1447a <makeFastArraySize+0xfe>
    to->varData.fastArray->fastVariables = AllocVec(size * sizeof(struct variable), MEMF_ANY);
   143ee:	|     \-> move.l 40(sp),d0
   143f2:	|         lsl.l #3,d0
   143f4:	|         move.l d0,12(sp)
   143f8:	|         clr.l 8(sp)
   143fc:	|         move.l 1a7a4 <SysBase>,d0
   14402:	|         movea.l d0,a6
   14404:	|         move.l 12(sp),d0
   14408:	|         move.l 8(sp),d1
   1440c:	|         jsr -684(a6)
   14410:	|         move.l d0,4(sp)
   14414:	|         move.l 4(sp),d0
   14418:	|         movea.l 36(sp),a0
   1441c:	|         movea.l 4(a0),a0
   14420:	|         move.l d0,(a0)
    if (!to->varData.fastArray->fastVariables) return FALSE;
   14422:	|         movea.l 36(sp),a0
   14426:	|         movea.l 4(a0),a0
   1442a:	|         move.l (a0),d0
   1442c:	|     /-- bne.s 14432 <makeFastArraySize+0xb6>
   1442e:	|     |   clr.w d0
   14430:	+-----|-- bra.s 1447a <makeFastArraySize+0xfe>
    for (int i = 0; i < size; i++) {
   14432:	|     \-> clr.l 28(sp)
   14436:	|     /-- bra.s 14452 <makeFastArraySize+0xd6>
        to->varData.fastArray->fastVariables[i].varType = SVT_NULL;
   14438:	|  /--|-> movea.l 36(sp),a0
   1443c:	|  |  |   movea.l 4(a0),a0
   14440:	|  |  |   move.l (a0),d1
   14442:	|  |  |   move.l 28(sp),d0
   14446:	|  |  |   lsl.l #3,d0
   14448:	|  |  |   movea.l d1,a0
   1444a:	|  |  |   adda.l d0,a0
   1444c:	|  |  |   clr.l (a0)
    for (int i = 0; i < size; i++) {
   1444e:	|  |  |   addq.l #1,28(sp)
   14452:	|  |  \-> move.l 28(sp),d0
   14456:	|  |      cmp.l 40(sp),d0
   1445a:	|  \----- blt.s 14438 <makeFastArraySize+0xbc>
    }
    to->varData.fastArray->size = size;
   1445c:	|         movea.l 36(sp),a0
   14460:	|         movea.l 4(a0),a0
   14464:	|         move.l 40(sp),4(a0)
    to->varData.fastArray->timesUsed = 1;
   1446a:	|         movea.l 36(sp),a0
   1446e:	|         movea.l 4(a0),a0
   14472:	|         moveq #1,d0
   14474:	|         move.l d0,8(a0)
    return TRUE;
   14478:	|         moveq #1,d0
}
   1447a:	\-------> movea.l (sp)+,a6
   1447c:	          lea 28(sp),sp
   14480:	          rts

00014482 <makeTextVar>:

void makeTextVar (struct variable *thisVar, const char * txt) {
	unlinkVar (thisVar);
   14482:	move.l 4(sp),-(sp)
   14486:	jsr 144ae <unlinkVar>
   1448c:	addq.l #4,sp
	thisVar->varType = SVT_STRING;
   1448e:	movea.l 4(sp),a0
   14492:	moveq #3,d0
   14494:	move.l d0,(a0)
	thisVar->varData.theString = copyString (txt);
   14496:	move.l 8(sp),-(sp)
   1449a:	jsr b8 <copyString>
   144a0:	addq.l #4,sp
   144a2:	movea.l 4(sp),a0
   144a6:	move.l d0,4(a0)
}
   144aa:	nop
   144ac:	rts

000144ae <unlinkVar>:

void unlinkVar (struct variable *thisVar) {
   144ae:	                      lea -16(sp),sp
   144b2:	                      move.l a6,-(sp)

	switch (thisVar->varType) {
   144b4:	                      movea.l 24(sp),a0
   144b8:	                      move.l (a0),d0
   144ba:	                      moveq #10,d1
   144bc:	                      cmp.l d0,d1
   144be:	            /-------- beq.w 14576 <unlinkVar+0xc8>
   144c2:	            |         moveq #10,d1
   144c4:	            |         cmp.l d0,d1
   144c6:	/-----------|-------- bcs.w 145ea <unlinkVar+0x13c>
   144ca:	|           |         moveq #8,d1
   144cc:	|           |         cmp.l d0,d1
   144ce:	|  /--------|-------- beq.w 145d6 <unlinkVar+0x128>
   144d2:	|  |        |         moveq #8,d1
   144d4:	|  |        |         cmp.l d0,d1
   144d6:	+--|--------|-------- bcs.w 145ea <unlinkVar+0x13c>
   144da:	|  |        |         moveq #3,d1
   144dc:	|  |        |         cmp.l d0,d1
   144de:	|  |        |     /-- beq.s 144ea <unlinkVar+0x3c>
   144e0:	|  |        |     |   moveq #6,d1
   144e2:	|  |        |     |   cmp.l d0,d1
   144e4:	|  |        |  /--|-- beq.s 14510 <unlinkVar+0x62>
		case SVT_ANIM:
		deleteAnim (thisVar->varData.animHandler);
		break;

		default:
		break;
   144e6:	+--|--------|--|--|-- bra.w 145ea <unlinkVar+0x13c>
        FreeVec(thisVar->varData.theString);
   144ea:	|  |        |  |  \-> movea.l 24(sp),a0
   144ee:	|  |        |  |      move.l 4(a0),4(sp)
   144f4:	|  |        |  |      move.l 1a7a4 <SysBase>,d0
   144fa:	|  |        |  |      movea.l d0,a6
   144fc:	|  |        |  |      movea.l 4(sp),a1
   14500:	|  |        |  |      jsr -690(a6)
		thisVar->varData.theString = NULL;
   14504:	|  |        |  |      movea.l 24(sp),a0
   14508:	|  |        |  |      clr.l 4(a0)
		break;
   1450c:	|  |  /-----|--|----- bra.w 145f4 <unlinkVar+0x146>
		thisVar->varData.theStack -> timesUsed --;
   14510:	|  |  |     |  \----> movea.l 24(sp),a0
   14514:	|  |  |     |         movea.l 4(a0),a0
   14518:	|  |  |     |         move.l 8(a0),d0
   1451c:	|  |  |     |         subq.l #1,d0
   1451e:	|  |  |     |         move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14522:	|  |  |     |         movea.l 24(sp),a0
   14526:	|  |  |     |         movea.l 4(a0),a0
   1452a:	|  |  |     |         move.l 8(a0),d0
   1452e:	|  |  |  /--|-------- bgt.w 145ee <unlinkVar+0x140>
			while (thisVar->varData.theStack -> first) trimStack (&thisVar->varData.theStack -> first);
   14532:	|  |  |  |  |     /-- bra.s 14546 <unlinkVar+0x98>
   14534:	|  |  |  |  |  /--|-> movea.l 24(sp),a0
   14538:	|  |  |  |  |  |  |   move.l 4(a0),d0
   1453c:	|  |  |  |  |  |  |   move.l d0,-(sp)
   1453e:	|  |  |  |  |  |  |   jsr 14be4 <trimStack>
   14544:	|  |  |  |  |  |  |   addq.l #4,sp
   14546:	|  |  |  |  |  |  \-> movea.l 24(sp),a0
   1454a:	|  |  |  |  |  |      movea.l 4(a0),a0
   1454e:	|  |  |  |  |  |      move.l (a0),d0
   14550:	|  |  |  |  |  \----- bne.s 14534 <unlinkVar+0x86>
			FreeVec(thisVar->varData.theStack);
   14552:	|  |  |  |  |         movea.l 24(sp),a0
   14556:	|  |  |  |  |         move.l 4(a0),8(sp)
   1455c:	|  |  |  |  |         move.l 1a7a4 <SysBase>,d0
   14562:	|  |  |  |  |         movea.l d0,a6
   14564:	|  |  |  |  |         movea.l 8(sp),a1
   14568:	|  |  |  |  |         jsr -690(a6)
			thisVar->varData.theStack = NULL;
   1456c:	|  |  |  |  |         movea.l 24(sp),a0
   14570:	|  |  |  |  |         clr.l 4(a0)
		break;
   14574:	|  |  |  +--|-------- bra.s 145ee <unlinkVar+0x140>
		thisVar->varData.fastArray -> timesUsed --;
   14576:	|  |  |  |  \-------> movea.l 24(sp),a0
   1457a:	|  |  |  |            movea.l 4(a0),a0
   1457e:	|  |  |  |            move.l 8(a0),d0
   14582:	|  |  |  |            subq.l #1,d0
   14584:	|  |  |  |            move.l d0,8(a0)
		if (thisVar->varData.theStack -> timesUsed <= 0) {
   14588:	|  |  |  |            movea.l 24(sp),a0
   1458c:	|  |  |  |            movea.l 4(a0),a0
   14590:	|  |  |  |            move.l 8(a0),d0
   14594:	|  |  |  |        /-- bgt.s 145f2 <unlinkVar+0x144>
            FreeVec( thisVar->varData.fastArray -> fastVariables);
   14596:	|  |  |  |        |   movea.l 24(sp),a0
   1459a:	|  |  |  |        |   movea.l 4(a0),a0
   1459e:	|  |  |  |        |   move.l (a0),16(sp)
   145a2:	|  |  |  |        |   move.l 1a7a4 <SysBase>,d0
   145a8:	|  |  |  |        |   movea.l d0,a6
   145aa:	|  |  |  |        |   movea.l 16(sp),a1
   145ae:	|  |  |  |        |   jsr -690(a6)
			FreeVec(thisVar->varData.fastArray);
   145b2:	|  |  |  |        |   movea.l 24(sp),a0
   145b6:	|  |  |  |        |   move.l 4(a0),12(sp)
   145bc:	|  |  |  |        |   move.l 1a7a4 <SysBase>,d0
   145c2:	|  |  |  |        |   movea.l d0,a6
   145c4:	|  |  |  |        |   movea.l 12(sp),a1
   145c8:	|  |  |  |        |   jsr -690(a6)
			thisVar->varData.fastArray = NULL;
   145cc:	|  |  |  |        |   movea.l 24(sp),a0
   145d0:	|  |  |  |        |   clr.l 4(a0)
		break;
   145d4:	|  |  |  |        +-- bra.s 145f2 <unlinkVar+0x144>
		deleteAnim (thisVar->varData.animHandler);
   145d6:	|  \--|--|--------|-> movea.l 24(sp),a0
   145da:	|     |  |        |   move.l 4(a0),d0
   145de:	|     |  |        |   move.l d0,-(sp)
   145e0:	|     |  |        |   jsr 93d2 <deleteAnim>
   145e6:	|     |  |        |   addq.l #4,sp
		break;
   145e8:	|     +--|--------|-- bra.s 145f4 <unlinkVar+0x146>
		break;
   145ea:	\-----|--|--------|-> nop
   145ec:	      +--|--------|-- bra.s 145f4 <unlinkVar+0x146>
		break;
   145ee:	      |  \--------|-> nop
   145f0:	      +-----------|-- bra.s 145f4 <unlinkVar+0x146>
		break;
   145f2:	      |           \-> nop
	}
}
   145f4:	      \-------------> nop
   145f6:	                      movea.l (sp)+,a6
   145f8:	                      lea 16(sp),sp
   145fc:	                      rts

000145fe <copyMain>:

BOOL copyMain (const struct variable *from, struct variable *to) {
	to->varType = from->varType;
   145fe:	       movea.l 4(sp),a0
   14602:	       move.l (a0),d0
   14604:	       movea.l 8(sp),a0
   14608:	       move.l d0,(a0)
	switch (to->varType) {
   1460a:	       movea.l 8(sp),a0
   1460e:	       move.l (a0),d0
   14610:	       moveq #10,d1
   14612:	       cmp.l d0,d1
   14614:	/----- bcs.w 14706 <copyMain+0x108>
   14618:	|      add.l d0,d0
   1461a:	|      movea.l d0,a0
   1461c:	|      adda.l #83496,a0
   14622:	|      move.w (a0),d0
   14624:	|      jmp (14628 <copyMain+0x2a>,pc,d0.w)
   14628:	|      .short 0x00da
   1462a:	|      ori.b #22,(a6)
   1462e:	|      ori.w #22,(a4)
   14632:	|      ori.b #-126,(a6)
   14636:	|      ori.b #-68,(a6)
   1463a:	|      ori.l #2891887,4(a0)
		case SVT_INT:
		case SVT_FUNC:
		case SVT_BUILT:
		case SVT_FILE:
		case SVT_OBJTYPE:
		to->varData.intValue = from->varData.intValue;
   14642:	|      move.l 4(a0),d0
   14646:	|      movea.l 8(sp),a0
   1464a:	|      move.l d0,4(a0)
		return TRUE;
   1464e:	|      moveq #1,d0
   14650:	|  /-- bra.w 14718 <copyMain+0x11a>

		case SVT_FASTARRAY:
		to->varData.fastArray = from->varData.fastArray;
   14654:	|  |   movea.l 4(sp),a0
   14658:	|  |   move.l 4(a0),d0
   1465c:	|  |   movea.l 8(sp),a0
   14660:	|  |   move.l d0,4(a0)
		to->varData.fastArray -> timesUsed ++;
   14664:	|  |   movea.l 8(sp),a0
   14668:	|  |   movea.l 4(a0),a0
   1466c:	|  |   move.l 8(a0),d0
   14670:	|  |   addq.l #1,d0
   14672:	|  |   move.l d0,8(a0)
		return TRUE;
   14676:	|  |   moveq #1,d0
   14678:	|  +-- bra.w 14718 <copyMain+0x11a>

		case SVT_STRING:
		to->varData.theString = copyString (from->varData.theString);
   1467c:	|  |   movea.l 4(sp),a0
   14680:	|  |   move.l 4(a0),d0
   14684:	|  |   move.l d0,-(sp)
   14686:	|  |   jsr b8 <copyString>
   1468c:	|  |   addq.l #4,sp
   1468e:	|  |   movea.l 8(sp),a0
   14692:	|  |   move.l d0,4(a0)
		return to->varData.theString ? TRUE : FALSE;
   14696:	|  |   movea.l 8(sp),a0
   1469a:	|  |   move.l 4(a0),d0
   1469e:	|  |   sne d0
   146a0:	|  |   neg.b d0
   146a2:	|  |   move.b d0,d0
   146a4:	|  |   andi.w #255,d0
   146a8:	|  +-- bra.s 14718 <copyMain+0x11a>

		case SVT_STACK:
		to->varData.theStack = from->varData.theStack;
   146aa:	|  |   movea.l 4(sp),a0
   146ae:	|  |   move.l 4(a0),d0
   146b2:	|  |   movea.l 8(sp),a0
   146b6:	|  |   move.l d0,4(a0)
		to->varData.theStack -> timesUsed ++;
   146ba:	|  |   movea.l 8(sp),a0
   146be:	|  |   movea.l 4(a0),a0
   146c2:	|  |   move.l 8(a0),d0
   146c6:	|  |   addq.l #1,d0
   146c8:	|  |   move.l d0,8(a0)
		return TRUE;
   146cc:	|  |   moveq #1,d0
   146ce:	|  +-- bra.s 14718 <copyMain+0x11a>

		case SVT_COSTUME:
		to->varData.costumeHandler = from->varData.costumeHandler;
   146d0:	|  |   movea.l 4(sp),a0
   146d4:	|  |   move.l 4(a0),d0
   146d8:	|  |   movea.l 8(sp),a0
   146dc:	|  |   move.l d0,4(a0)
		return TRUE;
   146e0:	|  |   moveq #1,d0
   146e2:	|  +-- bra.s 14718 <copyMain+0x11a>

		case SVT_ANIM:
		to->varData.animHandler = copyAnim (from->varData.animHandler);
   146e4:	|  |   movea.l 4(sp),a0
   146e8:	|  |   move.l 4(a0),d0
   146ec:	|  |   move.l d0,-(sp)
   146ee:	|  |   jsr 9006 <copyAnim>
   146f4:	|  |   addq.l #4,sp
   146f6:	|  |   movea.l 8(sp),a0
   146fa:	|  |   move.l d0,4(a0)
		return TRUE;
   146fe:	|  |   moveq #1,d0
   14700:	|  +-- bra.s 14718 <copyMain+0x11a>

		case SVT_NULL:
		return TRUE;
   14702:	|  |   moveq #1,d0
   14704:	|  +-- bra.s 14718 <copyMain+0x11a>

		default:
		break;
   14706:	\--|-> nop
	}
	KPrintF("Unknown value type");
   14708:	   |   pea 19a09 <main_sludge.c.0270f7ba+0x1cd>
   1470e:	   |   jsr 16c5e <KPrintF>
   14714:	   |   addq.l #4,sp
	return FALSE;
   14716:	   |   clr.w d0
}
   14718:	   \-> rts

0001471a <copyVariable>:

BOOL copyVariable (const struct variable *from, struct variable *to) {
	unlinkVar (to);
   1471a:	move.l 8(sp),-(sp)
   1471e:	jsr 144ae <unlinkVar>
   14724:	addq.l #4,sp
	return copyMain(from, to);
   14726:	move.l 8(sp),-(sp)
   1472a:	move.l 8(sp),-(sp)
   1472e:	jsr 145fe <copyMain>
   14734:	addq.l #8,sp
}
   14736:	rts

00014738 <getAnimationFromVar>:

struct personaAnimation * getAnimationFromVar (struct variable *thisVar) {
	if (thisVar->varType == SVT_ANIM)
   14738:	       movea.l 4(sp),a0
   1473c:	       move.l (a0),d0
   1473e:	       moveq #8,d1
   14740:	       cmp.l d0,d1
   14742:	   /-- bne.s 14758 <getAnimationFromVar+0x20>
		return copyAnim (thisVar->varData.animHandler);
   14744:	   |   movea.l 4(sp),a0
   14748:	   |   move.l 4(a0),d0
   1474c:	   |   move.l d0,-(sp)
   1474e:	   |   jsr 9006 <copyAnim>
   14754:	   |   addq.l #4,sp
   14756:	/--|-- bra.s 1479e <getAnimationFromVar+0x66>

	if (thisVar->varType == SVT_INT && thisVar->varData.intValue == 0)
   14758:	|  \-> movea.l 4(sp),a0
   1475c:	|      move.l (a0),d0
   1475e:	|      moveq #1,d1
   14760:	|      cmp.l d0,d1
   14762:	|  /-- bne.s 14776 <getAnimationFromVar+0x3e>
   14764:	|  |   movea.l 4(sp),a0
   14768:	|  |   move.l 4(a0),d0
   1476c:	|  +-- bne.s 14776 <getAnimationFromVar+0x3e>
		return makeNullAnim();
   1476e:	|  |   jsr a7d6 <makeNullAnim>
   14774:	+--|-- bra.s 1479e <getAnimationFromVar+0x66>

	KPrintF("Expecting an animation variable; found variable of type", typeName[thisVar->varType]);
   14776:	|  \-> movea.l 4(sp),a0
   1477a:	|      move.l (a0),d0
   1477c:	|      add.l d0,d0
   1477e:	|      movea.l d0,a1
   14780:	|      adda.l d0,a1
   14782:	|      lea 1a680 <typeName>,a0
   14788:	|      move.l (0,a1,a0.l),d0
   1478c:	|      move.l d0,-(sp)
   1478e:	|      pea 198f5 <main_sludge.c.0270f7ba+0xb9>
   14794:	|      jsr 16c5e <KPrintF>
   1479a:	|      addq.l #8,sp
	return NULL;
   1479c:	|      moveq #0,d0
}
   1479e:	\----> rts

000147a0 <getBoolean>:

BOOL getBoolean (const struct variable *from) {
	switch (from->varType) {
   147a0:	       movea.l 4(sp),a0
   147a4:	       move.l (a0),d0
   147a6:	       moveq #10,d1
   147a8:	       cmp.l d0,d1
   147aa:	/----- bcs.w 14830 <getBoolean+0x90>
   147ae:	|      add.l d0,d0
   147b0:	|      movea.l d0,a0
   147b2:	|      adda.l #83902,a0
   147b8:	|      move.w (a0),d0
   147ba:	|      jmp (147be <getBoolean+0x1e>,pc,d0.w)
   147be:	|      ori.b #26,(a6)
   147c2:	|      ori.w #68,(114,a2,d0.w)
   147c8:	|      ori.w #46,(114,a2,d0.w)
   147ce:	|      ori.w #114,(90,a2,d0.w)
		case SVT_NULL:
		return FALSE;
   147d4:	|      clr.w d0
   147d6:	|  /-- bra.s 14834 <getBoolean+0x94>

		case SVT_INT:
		return (BOOL) (from->varData.intValue != 0);
   147d8:	|  |   movea.l 4(sp),a0
   147dc:	|  |   move.l 4(a0),d0
   147e0:	|  |   sne d0
   147e2:	|  |   neg.b d0
   147e4:	|  |   move.b d0,d0
   147e6:	|  |   andi.w #255,d0
   147ea:	|  +-- bra.s 14834 <getBoolean+0x94>

		case SVT_STACK:
		return (BOOL) (from->varData.theStack -> first != NULL);
   147ec:	|  |   movea.l 4(sp),a0
   147f0:	|  |   movea.l 4(a0),a0
   147f4:	|  |   move.l (a0),d0
   147f6:	|  |   sne d0
   147f8:	|  |   neg.b d0
   147fa:	|  |   move.b d0,d0
   147fc:	|  |   andi.w #255,d0
   14800:	|  +-- bra.s 14834 <getBoolean+0x94>

		case SVT_STRING:
		return (BOOL) (from->varData.theString[0] != 0);
   14802:	|  |   movea.l 4(sp),a0
   14806:	|  |   movea.l 4(a0),a0
   1480a:	|  |   move.b (a0),d0
   1480c:	|  |   sne d0
   1480e:	|  |   neg.b d0
   14810:	|  |   move.b d0,d0
   14812:	|  |   andi.w #255,d0
   14816:	|  +-- bra.s 14834 <getBoolean+0x94>

		case SVT_FASTARRAY:
		return (BOOL) (from->varData.fastArray -> size != 0);
   14818:	|  |   movea.l 4(sp),a0
   1481c:	|  |   movea.l 4(a0),a0
   14820:	|  |   move.l 4(a0),d0
   14824:	|  |   sne d0
   14826:	|  |   neg.b d0
   14828:	|  |   move.b d0,d0
   1482a:	|  |   andi.w #255,d0
   1482e:	|  +-- bra.s 14834 <getBoolean+0x94>

		default:
		break;
   14830:	\--|-> nop
	}
	return TRUE;
   14832:	   |   moveq #1,d0
}
   14834:	   \-> rts

00014836 <getTextFromAnyVar>:

char * getTextFromAnyVar (const struct variable *from) {
   14836:	      /----------> lea -76(sp),sp
   1483a:	      |            move.l a6,-(sp)
	switch (from->varType) {
   1483c:	      |            movea.l 84(sp),a0
   14840:	      |            move.l (a0),d0
   14842:	      |            moveq #10,d1
   14844:	      |            cmp.l d0,d1
   14846:	/-----|----------- bcs.w 14ae4 <getTextFromAnyVar+0x2ae>
   1484a:	|     |            add.l d0,d0
   1484c:	|     |            movea.l d0,a0
   1484e:	|     |            adda.l #84058,a0
   14854:	|     |            move.w (a0),d0
   14856:	|     |            jmp (1485a <getTextFromAnyVar+0x24>,pc,d0.w)
   1485a:	|     |            .short 0x028a
   1485c:	|     |            bset d0,(a0)+
   1485e:	|     |            .short 0x028a
   14860:	|     |            ori.b #-118,(a6)
   14864:	|     |            andi.b #8,ccr
   14868:	|     |            andi.w #650,-(a0)
   1486c:	|     |            .short 0x028a
   1486e:	|     |            ori.b #111,84(a4)
		case SVT_STRING:
		return copyString (from->varData.theString);
   14874:	|     |            move.l 4(a0),d0
   14878:	|     |            move.l d0,-(sp)
   1487a:	|     |            jsr b8 <copyString>
   14880:	|     |            addq.l #4,sp
   14882:	|  /--|----------- bra.w 14b06 <getTextFromAnyVar+0x2d0>

		case SVT_FASTARRAY:
		{
			char * builder = copyString ("FAST:");
   14886:	|  |  |            pea 19a1c <main_sludge.c.0270f7ba+0x1e0>
   1488c:	|  |  |            jsr b8 <copyString>
   14892:	|  |  |            addq.l #4,sp
   14894:	|  |  |            move.l d0,76(sp)
			char * builder2;
			char * grabText;

			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14898:	|  |  |            clr.l 72(sp)
   1489c:	|  |  |     /----- bra.w 14946 <getTextFromAnyVar+0x110>
				builder2 = joinStrings (builder, " ");
   148a0:	|  |  |  /--|----> pea 19a22 <main_sludge.c.0270f7ba+0x1e6>
   148a6:	|  |  |  |  |      move.l 80(sp),-(sp)
   148aa:	|  |  |  |  |      jsr 1378c <joinStrings>
   148b0:	|  |  |  |  |      addq.l #8,sp
   148b2:	|  |  |  |  |      move.l d0,60(sp)
				if (! builder2) return NULL;
   148b6:	|  |  |  |  |  /-- bne.s 148be <getTextFromAnyVar+0x88>
   148b8:	|  |  |  |  |  |   moveq #0,d0
   148ba:	|  +--|--|--|--|-- bra.w 14b06 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   148be:	|  |  |  |  |  \-> move.l 76(sp),56(sp)
   148c4:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   148ca:	|  |  |  |  |      movea.l d0,a6
   148cc:	|  |  |  |  |      movea.l 56(sp),a1
   148d0:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&from->varData.fastArray -> fastVariables[i]);
   148d4:	|  |  |  |  |      movea.l 84(sp),a0
   148d8:	|  |  |  |  |      movea.l 4(a0),a0
   148dc:	|  |  |  |  |      move.l (a0),d1
   148de:	|  |  |  |  |      move.l 72(sp),d0
   148e2:	|  |  |  |  |      lsl.l #3,d0
   148e4:	|  |  |  |  |      add.l d1,d0
   148e6:	|  |  |  |  |      move.l d0,-(sp)
   148e8:	|  |  +--|--|----- jsr 14836 <getTextFromAnyVar>(pc)
   148ec:	|  |  |  |  |      addq.l #4,sp
   148ee:	|  |  |  |  |      move.l d0,52(sp)
				builder = joinStrings (builder2, grabText);
   148f2:	|  |  |  |  |      move.l 52(sp),-(sp)
   148f6:	|  |  |  |  |      move.l 64(sp),-(sp)
   148fa:	|  |  |  |  |      jsr 1378c <joinStrings>
   14900:	|  |  |  |  |      addq.l #8,sp
   14902:	|  |  |  |  |      move.l d0,76(sp)
				if (! builder) return NULL;
   14906:	|  |  |  |  |  /-- bne.s 1490e <getTextFromAnyVar+0xd8>
   14908:	|  |  |  |  |  |   moveq #0,d0
   1490a:	|  +--|--|--|--|-- bra.w 14b06 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   1490e:	|  |  |  |  |  \-> move.l 52(sp),48(sp)
   14914:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   1491a:	|  |  |  |  |      movea.l d0,a6
   1491c:	|  |  |  |  |      movea.l 48(sp),a1
   14920:	|  |  |  |  |      jsr -690(a6)
				grabText = NULL;
   14924:	|  |  |  |  |      clr.l 52(sp)
				FreeVec(builder2);
   14928:	|  |  |  |  |      move.l 60(sp),44(sp)
   1492e:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   14934:	|  |  |  |  |      movea.l d0,a6
   14936:	|  |  |  |  |      movea.l 44(sp),a1
   1493a:	|  |  |  |  |      jsr -690(a6)
				builder2 = NULL;
   1493e:	|  |  |  |  |      clr.l 60(sp)
			for (int i = 0; i < from->varData.fastArray -> size; i ++) {
   14942:	|  |  |  |  |      addq.l #1,72(sp)
   14946:	|  |  |  |  \----> movea.l 84(sp),a0
   1494a:	|  |  |  |         movea.l 4(a0),a0
   1494e:	|  |  |  |         move.l 4(a0),d0
   14952:	|  |  |  |         cmp.l 72(sp),d0
   14956:	|  |  |  \-------- bgt.w 148a0 <getTextFromAnyVar+0x6a>
			}
			return builder;
   1495a:	|  |  |            move.l 76(sp),d0
   1495e:	|  +--|----------- bra.w 14b06 <getTextFromAnyVar+0x2d0>
		}

		case SVT_STACK:
		{
			char * builder = copyString ("ARRAY:");
   14962:	|  |  |            pea 19a24 <main_sludge.c.0270f7ba+0x1e8>
   14968:	|  |  |            jsr b8 <copyString>
   1496e:	|  |  |            addq.l #4,sp
   14970:	|  |  |            move.l d0,68(sp)
			char * builder2;
			char * grabText;

			struct variableStack * stacky = from->varData.theStack -> first;
   14974:	|  |  |            movea.l 84(sp),a0
   14978:	|  |  |            movea.l 4(a0),a0
   1497c:	|  |  |            move.l (a0),64(sp)

			while (stacky) {
   14980:	|  |  |     /----- bra.w 14a22 <getTextFromAnyVar+0x1ec>
				builder2 = joinStrings (builder, " ");
   14984:	|  |  |  /--|----> pea 19a22 <main_sludge.c.0270f7ba+0x1e6>
   1498a:	|  |  |  |  |      move.l 72(sp),-(sp)
   1498e:	|  |  |  |  |      jsr 1378c <joinStrings>
   14994:	|  |  |  |  |      addq.l #8,sp
   14996:	|  |  |  |  |      move.l d0,36(sp)
				if (! builder2) return NULL;
   1499a:	|  |  |  |  |  /-- bne.s 149a2 <getTextFromAnyVar+0x16c>
   1499c:	|  |  |  |  |  |   moveq #0,d0
   1499e:	|  +--|--|--|--|-- bra.w 14b06 <getTextFromAnyVar+0x2d0>
				FreeVec(builder);
   149a2:	|  |  |  |  |  \-> move.l 68(sp),32(sp)
   149a8:	|  |  |  |  |      move.l 1a7a4 <SysBase>,d0
   149ae:	|  |  |  |  |      movea.l d0,a6
   149b0:	|  |  |  |  |      movea.l 32(sp),a1
   149b4:	|  |  |  |  |      jsr -690(a6)
				grabText = getTextFromAnyVar (&stacky -> thisVar);
   149b8:	|  |  |  |  |      move.l 64(sp),d0
   149bc:	|  |  |  |  |      move.l d0,-(sp)
   149be:	|  |  \--|--|----- jsr 14836 <getTextFromAnyVar>(pc)
   149c2:	|  |     |  |      addq.l #4,sp
   149c4:	|  |     |  |      move.l d0,28(sp)
				builder = joinStrings (builder2, grabText);
   149c8:	|  |     |  |      move.l 28(sp),-(sp)
   149cc:	|  |     |  |      move.l 40(sp),-(sp)
   149d0:	|  |     |  |      jsr 1378c <joinStrings>
   149d6:	|  |     |  |      addq.l #8,sp
   149d8:	|  |     |  |      move.l d0,68(sp)
				if (! builder) return NULL;
   149dc:	|  |     |  |  /-- bne.s 149e4 <getTextFromAnyVar+0x1ae>
   149de:	|  |     |  |  |   moveq #0,d0
   149e0:	|  +-----|--|--|-- bra.w 14b06 <getTextFromAnyVar+0x2d0>
				FreeVec(grabText);
   149e4:	|  |     |  |  \-> move.l 28(sp),24(sp)
   149ea:	|  |     |  |      move.l 1a7a4 <SysBase>,d0
   149f0:	|  |     |  |      movea.l d0,a6
   149f2:	|  |     |  |      movea.l 24(sp),a1
   149f6:	|  |     |  |      jsr -690(a6)
				grabText = NULL;
   149fa:	|  |     |  |      clr.l 28(sp)
				FreeVec(builder2);
   149fe:	|  |     |  |      move.l 36(sp),20(sp)
   14a04:	|  |     |  |      move.l 1a7a4 <SysBase>,d0
   14a0a:	|  |     |  |      movea.l d0,a6
   14a0c:	|  |     |  |      movea.l 20(sp),a1
   14a10:	|  |     |  |      jsr -690(a6)
				builder2 = NULL;
   14a14:	|  |     |  |      clr.l 36(sp)
				stacky = stacky -> next;
   14a18:	|  |     |  |      movea.l 64(sp),a0
   14a1c:	|  |     |  |      move.l 8(a0),64(sp)
			while (stacky) {
   14a22:	|  |     |  \----> tst.l 64(sp)
   14a26:	|  |     \-------- bne.w 14984 <getTextFromAnyVar+0x14e>
			}
			return builder;
   14a2a:	|  |               move.l 68(sp),d0
   14a2e:	|  +-------------- bra.w 14b06 <getTextFromAnyVar+0x2d0>
		}

		case SVT_INT:
		{
			char * buff = AllocVec(10, MEMF_ANY);
   14a32:	|  |               moveq #10,d0
   14a34:	|  |               move.l d0,16(sp)
   14a38:	|  |               clr.l 12(sp)
   14a3c:	|  |               move.l 1a7a4 <SysBase>,d0
   14a42:	|  |               movea.l d0,a6
   14a44:	|  |               move.l 16(sp),d0
   14a48:	|  |               move.l 12(sp),d1
   14a4c:	|  |               jsr -684(a6)
   14a50:	|  |               move.l d0,8(sp)
   14a54:	|  |               move.l 8(sp),d0
   14a58:	|  |               move.l d0,4(sp)
			if (! buff) {
   14a5c:	|  |           /-- bne.s 14a72 <getTextFromAnyVar+0x23c>
				KPrintF("getTextFromAnyVar: Cannot allocate Memory");
   14a5e:	|  |           |   pea 19a2b <main_sludge.c.0270f7ba+0x1ef>
   14a64:	|  |           |   jsr 16c5e <KPrintF>
   14a6a:	|  |           |   addq.l #4,sp
				return NULL;
   14a6c:	|  |           |   moveq #0,d0
   14a6e:	|  +-----------|-- bra.w 14b06 <getTextFromAnyVar+0x2d0>
			}
			sprintf (buff, "%i", from->varData.intValue);
   14a72:	|  |           \-> movea.l 84(sp),a0
   14a76:	|  |               move.l 4(a0),d0
   14a7a:	|  |               move.l d0,-(sp)
   14a7c:	|  |               pea 19a55 <main_sludge.c.0270f7ba+0x219>
   14a82:	|  |               move.l 12(sp),-(sp)
   14a86:	|  |               jsr 13a6a <sprintf>
   14a8c:	|  |               lea 12(sp),sp
			return buff;
   14a90:	|  |               move.l 4(sp),d0
   14a94:	|  +-------------- bra.s 14b06 <getTextFromAnyVar+0x2d0>
		}

		case SVT_FILE:
		{

			return joinStrings ("", resourceNameFromNum (from->varData.intValue));
   14a96:	|  |               movea.l 84(sp),a0
   14a9a:	|  |               move.l 4(a0),d0
   14a9e:	|  |               move.l d0,-(sp)
   14aa0:	|  |               jsr 39e0 <resourceNameFromNum>
   14aa6:	|  |               addq.l #4,sp
   14aa8:	|  |               move.l d0,-(sp)
   14aaa:	|  |               pea 183a3 <PutChar+0xc71>
   14ab0:	|  |               jsr 1378c <joinStrings>
   14ab6:	|  |               addq.l #8,sp
   14ab8:	|  +-------------- bra.s 14b06 <getTextFromAnyVar+0x2d0>
		}

		case SVT_OBJTYPE:
		{
			struct objectType * thisType = findObjectType (from->varData.intValue);
   14aba:	|  |               movea.l 84(sp),a0
   14abe:	|  |               move.l 4(a0),d0
   14ac2:	|  |               move.l d0,-(sp)
   14ac4:	|  |               jsr cfca <findObjectType>
   14aca:	|  |               addq.l #4,sp
   14acc:	|  |               move.l d0,40(sp)
			if (thisType) return copyString (thisType -> screenName);
   14ad0:	+--|-------------- beq.s 14ae4 <getTextFromAnyVar+0x2ae>
   14ad2:	|  |               movea.l 40(sp),a0
   14ad6:	|  |               move.l (a0),d0
   14ad8:	|  |               move.l d0,-(sp)
   14ada:	|  |               jsr b8 <copyString>
   14ae0:	|  |               addq.l #4,sp
   14ae2:	|  +-------------- bra.s 14b06 <getTextFromAnyVar+0x2d0>
		}

		default:
		break;
   14ae4:	\--|-------------> nop
	}

	return copyString (typeName[from->varType]);
   14ae6:	   |               movea.l 84(sp),a0
   14aea:	   |               move.l (a0),d0
   14aec:	   |               add.l d0,d0
   14aee:	   |               movea.l d0,a1
   14af0:	   |               adda.l d0,a1
   14af2:	   |               lea 1a680 <typeName>,a0
   14af8:	   |               move.l (0,a1,a0.l),d0
   14afc:	   |               move.l d0,-(sp)
   14afe:	   |               jsr b8 <copyString>
   14b04:	   |               addq.l #4,sp
}
   14b06:	   \-------------> movea.l (sp)+,a6
   14b08:	                   lea 76(sp),sp
   14b0c:	                   rts

00014b0e <newAnimationVariable>:


void newAnimationVariable (struct variable *thisVar, struct personaAnimation * i) {
	unlinkVar (thisVar);
   14b0e:	move.l 4(sp),-(sp)
   14b12:	jsr 144ae <unlinkVar>
   14b18:	addq.l #4,sp
	thisVar->varType = SVT_ANIM;
   14b1a:	movea.l 4(sp),a0
   14b1e:	moveq #8,d0
   14b20:	move.l d0,(a0)
	thisVar->varData.animHandler = i;
   14b22:	movea.l 4(sp),a0
   14b26:	move.l 8(sp),4(a0)
}
   14b2c:	nop
   14b2e:	rts

00014b30 <newCostumeVariable>:

void newCostumeVariable (struct variable * thisVar, struct persona * i) {
	unlinkVar(thisVar);
   14b30:	move.l 4(sp),-(sp)
   14b34:	jsr 144ae <unlinkVar>
   14b3a:	addq.l #4,sp
	thisVar->varType = SVT_COSTUME;
   14b3c:	movea.l 4(sp),a0
   14b40:	moveq #9,d0
   14b42:	move.l d0,(a0)
	thisVar->varData.costumeHandler = i;
   14b44:	movea.l 4(sp),a0
   14b48:	move.l 8(sp),4(a0)
}
   14b4e:	nop
   14b50:	rts

00014b52 <setVariable>:

void setVariable (struct variable *thisVar, enum variableType vT, int value) {
	unlinkVar (thisVar);
   14b52:	move.l 4(sp),-(sp)
   14b56:	jsr 144ae <unlinkVar>
   14b5c:	addq.l #4,sp
	thisVar->varType = vT;
   14b5e:	movea.l 4(sp),a0
   14b62:	move.l 8(sp),(a0)
	thisVar->varData.intValue = value;
   14b66:	movea.l 4(sp),a0
   14b6a:	move.l 12(sp),4(a0)
}
   14b70:	nop
   14b72:	rts

00014b74 <stackGetByIndex>:

struct variable * stackGetByIndex (struct variableStack * vS, unsigned int theIndex) {
    while (theIndex--) {
   14b74:	      /-- bra.s 14b86 <stackGetByIndex+0x12>
        vS = vS->next;
   14b76:	/-----|-> movea.l 4(sp),a0
   14b7a:	|     |   move.l 8(a0),4(sp)
        if (!vS) {
   14b80:	|     +-- bne.s 14b86 <stackGetByIndex+0x12>
            return NULL;
   14b82:	|     |   moveq #0,d0
   14b84:	|  /--|-- bra.s 14b9a <stackGetByIndex+0x26>
    while (theIndex--) {
   14b86:	|  |  \-> move.l 8(sp),d0
   14b8a:	|  |      move.l d0,d1
   14b8c:	|  |      subq.l #1,d1
   14b8e:	|  |      move.l d1,8(sp)
   14b92:	|  |      tst.l d0
   14b94:	\--|----- bne.s 14b76 <stackGetByIndex+0x2>
        }
    }
    return &(vS->thisVar);
   14b96:	   |      move.l 4(sp),d0
}
   14b9a:	   \----> rts

00014b9c <stackFindLast>:

// Would be a LOT better just to keep this up to date in deletevarfromstack function... ah well
struct variableStack * stackFindLast (struct variableStack * hunt) {
	if (hunt == NULL)
   14b9c:	          tst.l 4(sp)
   14ba0:	      /-- bne.s 14bb0 <stackFindLast+0x14>
		return NULL;
   14ba2:	      |   moveq #0,d0
   14ba4:	/-----|-- bra.s 14bbe <stackFindLast+0x22>

	while (hunt->next)
		hunt = hunt->next;
   14ba6:	|  /--|-> movea.l 4(sp),a0
   14baa:	|  |  |   move.l 8(a0),4(sp)
	while (hunt->next)
   14bb0:	|  |  \-> movea.l 4(sp),a0
   14bb4:	|  |      move.l 8(a0),d0
   14bb8:	|  \----- bne.s 14ba6 <stackFindLast+0xa>

	return hunt;
   14bba:	|         move.l 4(sp),d0
}
   14bbe:	\-------> rts

00014bc0 <stackSize>:

int stackSize (const struct stackHandler * me) {
   14bc0:	       subq.l #8,sp
	int r = 0;
   14bc2:	       clr.l 4(sp)
	struct variableStack * a = me -> first;
   14bc6:	       movea.l 12(sp),a0
   14bca:	       move.l (a0),(sp)
	while (a) {
   14bcc:	   /-- bra.s 14bd8 <stackSize+0x18>
		r ++;
   14bce:	/--|-> addq.l #1,4(sp)
		a = a -> next;
   14bd2:	|  |   movea.l (sp),a0
   14bd4:	|  |   move.l 8(a0),(sp)
	while (a) {
   14bd8:	|  \-> tst.l (sp)
   14bda:	\----- bne.s 14bce <stackSize+0xe>
	}
	return r;
   14bdc:	       move.l 4(sp),d0
}
   14be0:	       addq.l #8,sp
   14be2:	       rts

00014be4 <trimStack>:

void trimStack (struct variableStack ** stack) {
   14be4:	subq.l #8,sp
   14be6:	move.l a6,-(sp)

	struct variableStack* killMe = *stack;
   14be8:	movea.l 16(sp),a0
   14bec:	move.l (a0),8(sp)

	*stack = (*stack)->next;
   14bf0:	movea.l 16(sp),a0
   14bf4:	movea.l (a0),a0
   14bf6:	move.l 8(a0),d0
   14bfa:	movea.l 16(sp),a0
   14bfe:	move.l d0,(a0)

	// When calling this, we've ALWAYS checked that stack != NULL
	unlinkVar (&(killMe -> thisVar));
   14c00:	move.l 8(sp),d0
   14c04:	move.l d0,-(sp)
   14c06:	jsr 144ae <unlinkVar>
   14c0c:	addq.l #4,sp
	FreeVec(killMe);
   14c0e:	move.l 8(sp),4(sp)
   14c14:	move.l 1a7a4 <SysBase>,d0
   14c1a:	movea.l d0,a6
   14c1c:	movea.l 4(sp),a1
   14c20:	jsr -690(a6)
   14c24:	nop
   14c26:	movea.l (sp)+,a6
   14c28:	addq.l #8,sp
   14c2a:	rts

00014c2c <freeze>:
extern BOOL backdropExists;

struct frozenStuffStruct * frozenStuff = NULL;


BOOL freeze () {
   14c2c:	       lea -52(sp),sp
   14c30:	       move.l a6,-(sp)
	KPrintF("calling freeze()\n");
   14c32:	       pea 19a58 <main_sludge.c.0270f7ba+0x21c>
   14c38:	       jsr 16c5e <KPrintF>
   14c3e:	       addq.l #4,sp

	struct frozenStuffStruct * newFreezer = (struct frozenStuffStruct *) AllocVec(sizeof(struct frozenStuffStruct), MEMF_ANY);
   14c40:	       moveq #64,d0
   14c42:	       move.l d0,52(sp)
   14c46:	       clr.l 48(sp)
   14c4a:	       move.l 1a7a4 <SysBase>,d0
   14c50:	       movea.l d0,a6
   14c52:	       move.l 52(sp),d0
   14c56:	       move.l 48(sp),d1
   14c5a:	       jsr -684(a6)
   14c5e:	       move.l d0,44(sp)
   14c62:	       move.l 44(sp),d0
   14c66:	       move.l d0,40(sp)
	if (!newFreezer) return FALSE;
   14c6a:	   /-- bne.s 14c72 <freeze+0x46>
   14c6c:	   |   clr.w d0
   14c6e:	/--|-- bra.w 14de8 <freeze+0x1bc>

	CstFreeze();
   14c72:	|  \-> jsr 15b0 <CstFreeze>

	// Grab a copy of the current scene
	//ToDo: Amiga Graphics handling here	

	int picWidth = sceneWidth;
   14c78:	|      move.l 1a894 <sceneWidth>,d0
   14c7e:	|      move.l d0,36(sp)
	int picHeight = sceneHeight;	
   14c82:	|      move.l 1a898 <sceneHeight>,d0
   14c88:	|      move.l d0,32(sp)



	newFreezer -> sceneWidth = sceneWidth;
   14c8c:	|      move.l 1a894 <sceneWidth>,d0
   14c92:	|      movea.l 40(sp),a0
   14c96:	|      move.l d0,48(a0)
	newFreezer -> sceneHeight = sceneHeight;
   14c9a:	|      move.l 1a898 <sceneHeight>,d0
   14ca0:	|      movea.l 40(sp),a0
   14ca4:	|      move.l d0,52(a0)
	newFreezer -> cameraX = cameraX;
   14ca8:	|      move.l 1a8b2 <cameraX>,d0
   14cae:	|      movea.l 40(sp),a0
   14cb2:	|      move.l d0,40(a0)
	newFreezer -> cameraY = cameraY;
   14cb6:	|      move.l 1a8b6 <cameraY>,d0
   14cbc:	|      movea.l 40(sp),a0
   14cc0:	|      move.l d0,44(a0)
	newFreezer -> cameraZoom = cameraZoom;
   14cc4:	|      move.l 1a142 <cameraZoom>,d0
   14cca:	|      movea.l 40(sp),a0
   14cce:	|      move.l d0,56(a0)
	// resizeBackdrop kills parallax stuff, light map, z-buffer...
	/*if (! resizeBackdrop (winWidth, winHeight)) {
		KPrintF("Can't create new temporary backdrop buffer");
	}*/

	backdropExists = TRUE;
   14cd2:	|      move.w #1,1a8a0 <backdropExists>

	newFreezer -> allPeople = allPeople;
   14cda:	|      move.l 1a85c <allPeople>,d0
   14ce0:	|      movea.l 40(sp),a0
   14ce4:	|      move.l d0,(a0)
	allPeople = NULL;
   14ce6:	|      clr.l 1a85c <allPeople>

	struct statusStuff * newStatusStuff = (struct statusStuff *) AllocVec(sizeof(struct statusStuff), MEMF_ANY);
   14cec:	|      moveq #42,d0
   14cee:	|      move.l d0,28(sp)
   14cf2:	|      clr.l 24(sp)
   14cf6:	|      move.l 1a7a4 <SysBase>,d0
   14cfc:	|      movea.l d0,a6
   14cfe:	|      move.l 28(sp),d0
   14d02:	|      move.l 24(sp),d1
   14d06:	|      jsr -684(a6)
   14d0a:	|      move.l d0,20(sp)
   14d0e:	|      move.l 20(sp),d0
   14d12:	|      move.l d0,16(sp)
	if (!newStatusStuff) return FALSE;	
   14d16:	|  /-- bne.s 14d1e <freeze+0xf2>
   14d18:	|  |   clr.w d0
   14d1a:	+--|-- bra.w 14de8 <freeze+0x1bc>

	newFreezer -> allScreenRegions = allScreenRegions;
   14d1e:	|  \-> move.l 1a908 <allScreenRegions>,d0
   14d24:	|      movea.l 40(sp),a0
   14d28:	|      move.l d0,4(a0)
	allScreenRegions = NULL;
   14d2c:	|      clr.l 1a908 <allScreenRegions>
	overRegion = NULL;
   14d32:	|      clr.l 1a90c <overRegion>

	newFreezer -> mouseCursorAnim = mouseCursorAnim;
   14d38:	|      move.l 1a6aa <mouseCursorAnim>,d0
   14d3e:	|      movea.l 40(sp),a0
   14d42:	|      move.l d0,32(a0)
	newFreezer -> mouseCursorFrameNum = mouseCursorFrameNum;
   14d46:	|      move.l 1a6ae <mouseCursorFrameNum>,d0
   14d4c:	|      movea.l 40(sp),a0
   14d50:	|      move.l d0,36(a0)
	mouseCursorAnim = makeNullAnim ();
   14d54:	|      jsr a7d6 <makeNullAnim>
   14d5a:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = 0;
   14d60:	|      clr.l 1a6ae <mouseCursorFrameNum>

	newFreezer -> speech = speech;
   14d66:	|      move.l 1a800 <speech>,d0
   14d6c:	|      movea.l 40(sp),a0
   14d70:	|      move.l d0,20(a0)
	initSpeech ();
   14d74:	|      jsr 7778 <initSpeech>

	newFreezer -> currentEvents = (struct eventhandlers *) AllocVec(sizeof(struct eventHandlers), MEMF_ANY);
   14d7a:	|      moveq #28,d0
   14d7c:	|      move.l d0,12(sp)
   14d80:	|      clr.l 8(sp)
   14d84:	|      move.l 1a7a4 <SysBase>,d0
   14d8a:	|      movea.l d0,a6
   14d8c:	|      move.l 12(sp),d0
   14d90:	|      move.l 8(sp),d1
   14d94:	|      jsr -684(a6)
   14d98:	|      move.l d0,4(sp)
   14d9c:	|      move.l 4(sp),d0
   14da0:	|      movea.l 40(sp),a0
   14da4:	|      move.l d0,28(a0)
	if (!newFreezer -> currentEvents) return FALSE;
   14da8:	|      movea.l 40(sp),a0
   14dac:	|      move.l 28(a0),d0
   14db0:	|  /-- bne.s 14db6 <freeze+0x18a>
   14db2:	|  |   clr.w d0
   14db4:	+--|-- bra.s 14de8 <freeze+0x1bc>
	memset (newFreezer -> currentEvents, 0, sizeof(struct eventHandlers));
   14db6:	|  \-> movea.l 40(sp),a0
   14dba:	|      move.l 28(a0),d0
   14dbe:	|      pea 1c <_start+0x1c>
   14dc2:	|      clr.l -(sp)
   14dc4:	|      move.l d0,-(sp)
   14dc6:	|      jsr 16be2 <memset>
   14dcc:	|      lea 12(sp),sp

	newFreezer -> next = frozenStuff;
   14dd0:	|      move.l 1a8ec <frozenStuff>,d0
   14dd6:	|      movea.l 40(sp),a0
   14dda:	|      move.l d0,60(a0)
	frozenStuff = newFreezer;
   14dde:	|      move.l 40(sp),1a8ec <frozenStuff>

	return TRUE;
   14de6:	|      moveq #1,d0
}
   14de8:	\----> movea.l (sp)+,a6
   14dea:	       lea 52(sp),sp
   14dee:	       rts

00014df0 <unfreeze>:

void unfreeze () {
   14df0:	       lea -16(sp),sp
   14df4:	       move.l a6,-(sp)
	struct frozenStuffStruct * killMe = frozenStuff;
   14df6:	       move.l 1a8ec <frozenStuff>,16(sp)

	if (! frozenStuff) return;
   14dfe:	       move.l 1a8ec <frozenStuff>,d0
   14e04:	/----- beq.w 15026 <unfreeze+0x236>

	CstUnfreeze();
   14e08:	|      jsr 35d8 <CstUnfreeze>

	sceneWidth = frozenStuff -> sceneWidth;
   14e0e:	|      movea.l 1a8ec <frozenStuff>,a0
   14e14:	|      move.l 48(a0),d0
   14e18:	|      move.l d0,1a894 <sceneWidth>
	sceneHeight = frozenStuff -> sceneHeight;
   14e1e:	|      movea.l 1a8ec <frozenStuff>,a0
   14e24:	|      move.l 52(a0),d0
   14e28:	|      move.l d0,1a898 <sceneHeight>

	cameraX = frozenStuff -> cameraX;
   14e2e:	|      movea.l 1a8ec <frozenStuff>,a0
   14e34:	|      move.l 40(a0),d0
   14e38:	|      move.l d0,1a8b2 <cameraX>
	cameraY = frozenStuff -> cameraY;
   14e3e:	|      movea.l 1a8ec <frozenStuff>,a0
   14e44:	|      move.l 44(a0),d0
   14e48:	|      move.l d0,1a8b6 <cameraY>
	input.mouseX = (int)(input.mouseX * cameraZoom);
   14e4e:	|      move.l 1a760 <input+0xa>,d0
   14e54:	|      move.l d0,-(sp)
   14e56:	|      jsr 1709a <__floatsisf>
   14e5c:	|      addq.l #4,sp
   14e5e:	|      move.l d0,d1
   14e60:	|      move.l 1a142 <cameraZoom>,d0
   14e66:	|      move.l d0,-(sp)
   14e68:	|      move.l d1,-(sp)
   14e6a:	|      jsr 1714c <__mulsf3>
   14e70:	|      addq.l #8,sp
   14e72:	|      move.l d0,-(sp)
   14e74:	|      jsr 17032 <__fixsfsi>
   14e7a:	|      addq.l #4,sp
   14e7c:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = (int)(input.mouseY * cameraZoom);
   14e82:	|      move.l 1a764 <input+0xe>,d0
   14e88:	|      move.l d0,-(sp)
   14e8a:	|      jsr 1709a <__floatsisf>
   14e90:	|      addq.l #4,sp
   14e92:	|      move.l d0,d1
   14e94:	|      move.l 1a142 <cameraZoom>,d0
   14e9a:	|      move.l d0,-(sp)
   14e9c:	|      move.l d1,-(sp)
   14e9e:	|      jsr 1714c <__mulsf3>
   14ea4:	|      addq.l #8,sp
   14ea6:	|      move.l d0,-(sp)
   14ea8:	|      jsr 17032 <__fixsfsi>
   14eae:	|      addq.l #4,sp
   14eb0:	|      move.l d0,1a764 <input+0xe>
	cameraZoom = frozenStuff -> cameraZoom;
   14eb6:	|      movea.l 1a8ec <frozenStuff>,a0
   14ebc:	|      move.l 56(a0),d0
   14ec0:	|      move.l d0,1a142 <cameraZoom>
	input.mouseX = (int)(input.mouseX / cameraZoom);
   14ec6:	|      move.l 1a760 <input+0xa>,d0
   14ecc:	|      move.l d0,-(sp)
   14ece:	|      jsr 1709a <__floatsisf>
   14ed4:	|      addq.l #4,sp
   14ed6:	|      move.l d0,d1
   14ed8:	|      move.l 1a142 <cameraZoom>,d0
   14ede:	|      move.l d0,-(sp)
   14ee0:	|      move.l d1,-(sp)
   14ee2:	|      jsr 16f46 <__divsf3>
   14ee8:	|      addq.l #8,sp
   14eea:	|      move.l d0,-(sp)
   14eec:	|      jsr 17032 <__fixsfsi>
   14ef2:	|      addq.l #4,sp
   14ef4:	|      move.l d0,1a760 <input+0xa>
	input.mouseY = (int)(input.mouseY / cameraZoom);
   14efa:	|      move.l 1a764 <input+0xe>,d0
   14f00:	|      move.l d0,-(sp)
   14f02:	|      jsr 1709a <__floatsisf>
   14f08:	|      addq.l #4,sp
   14f0a:	|      move.l d0,d1
   14f0c:	|      move.l 1a142 <cameraZoom>,d0
   14f12:	|      move.l d0,-(sp)
   14f14:	|      move.l d1,-(sp)
   14f16:	|      jsr 16f46 <__divsf3>
   14f1c:	|      addq.l #8,sp
   14f1e:	|      move.l d0,-(sp)
   14f20:	|      jsr 17032 <__fixsfsi>
   14f26:	|      addq.l #4,sp
   14f28:	|      move.l d0,1a764 <input+0xe>

	killAllPeople ();
   14f2e:	|      jsr a4de <killAllPeople>
	allPeople = frozenStuff -> allPeople;
   14f34:	|      movea.l 1a8ec <frozenStuff>,a0
   14f3a:	|      move.l (a0),d0
   14f3c:	|      move.l d0,1a85c <allPeople>

	killAllRegions ();
   14f42:	|      jsr 154ae <killAllRegions>
	allScreenRegions = frozenStuff -> allScreenRegions;
   14f48:	|      movea.l 1a8ec <frozenStuff>,a0
   14f4e:	|      move.l 4(a0),d0
   14f52:	|      move.l d0,1a908 <allScreenRegions>
	
	deleteAnim (mouseCursorAnim);  
   14f58:	|      move.l 1a6aa <mouseCursorAnim>,d0
   14f5e:	|      move.l d0,-(sp)
   14f60:	|      jsr 93d2 <deleteAnim>
   14f66:	|      addq.l #4,sp
	mouseCursorAnim = frozenStuff -> mouseCursorAnim;
   14f68:	|      movea.l 1a8ec <frozenStuff>,a0
   14f6e:	|      move.l 32(a0),d0
   14f72:	|      move.l d0,1a6aa <mouseCursorAnim>
	mouseCursorFrameNum = frozenStuff -> mouseCursorFrameNum;	
   14f78:	|      movea.l 1a8ec <frozenStuff>,a0
   14f7e:	|      move.l 36(a0),d0
   14f82:	|      move.l d0,1a6ae <mouseCursorFrameNum>

	if (currentEvents) FreeVec(currentEvents);
   14f88:	|      move.l 1a11c <currentEvents>,d0
   14f8e:	|  /-- beq.s 14fa8 <unfreeze+0x1b8>
   14f90:	|  |   move.l 1a11c <currentEvents>,12(sp)
   14f98:	|  |   move.l 1a7a4 <SysBase>,d0
   14f9e:	|  |   movea.l d0,a6
   14fa0:	|  |   movea.l 12(sp),a1
   14fa4:	|  |   jsr -690(a6)
	currentEvents = frozenStuff -> currentEvents;
   14fa8:	|  \-> movea.l 1a8ec <frozenStuff>,a0
   14fae:	|      move.l 28(a0),d0
   14fb2:	|      move.l d0,1a11c <currentEvents>

	killAllSpeech ();
   14fb8:	|      jsr 7810 <killAllSpeech>
	if (speech) FreeVec(speech);
   14fbe:	|      move.l 1a800 <speech>,d0
   14fc4:	|  /-- beq.s 14fde <unfreeze+0x1ee>
   14fc6:	|  |   move.l 1a800 <speech>,8(sp)
   14fce:	|  |   move.l 1a7a4 <SysBase>,d0
   14fd4:	|  |   movea.l d0,a6
   14fd6:	|  |   movea.l 8(sp),a1
   14fda:	|  |   jsr -690(a6)
	speech = frozenStuff -> speech;
   14fde:	|  \-> movea.l 1a8ec <frozenStuff>,a0
   14fe4:	|      move.l 20(a0),d0
   14fe8:	|      move.l d0,1a800 <speech>

	frozenStuff = frozenStuff -> next;
   14fee:	|      movea.l 1a8ec <frozenStuff>,a0
   14ff4:	|      move.l 60(a0),d0
   14ff8:	|      move.l d0,1a8ec <frozenStuff>

	overRegion = NULL;
   14ffe:	|      clr.l 1a90c <overRegion>
	if (killMe) FreeVec(killMe);
   15004:	|      tst.l 16(sp)
   15008:	|  /-- beq.s 15020 <unfreeze+0x230>
   1500a:	|  |   move.l 16(sp),4(sp)
   15010:	|  |   move.l 1a7a4 <SysBase>,d0
   15016:	|  |   movea.l d0,a6
   15018:	|  |   movea.l 4(sp),a1
   1501c:	|  |   jsr -690(a6)
	killMe = NULL;
   15020:	|  \-> clr.l 16(sp)
   15024:	|  /-- bra.s 15028 <unfreeze+0x238>
	if (! frozenStuff) return;
   15026:	\--|-> nop
}
   15028:	   \-> movea.l (sp)+,a6
   1502a:	       lea 16(sp),sp
   1502e:	       rts

00015030 <isInFont>:
unsigned int fontTableSize = 0;
struct loadedSpriteBank *theFont;


BOOL isInFont (char * theText) {
	KPrintF("isInFont: Not implemented yet on Amiga"); //Todo: Implement on Amiga
   15030:	pea 19a6a <main_sludge.c.0270f7ba+0x22e>
   15036:	jsr 16c5e <KPrintF>
   1503c:	addq.l #4,sp
	return FALSE;
   1503e:	clr.w d0
}
   15040:	rts

00015042 <loadFont>:

BOOL loadFont (int filenum, char * charOrder, int h) {
   15042:	          lea -44(sp),sp
   15046:	          move.l a6,-(sp)
   15048:	          move.l d2,-(sp)
	unsigned int a = 0;
   1504a:	          clr.l 48(sp)
	ULONG c;

	if( fontOrderString) FreeVec(fontOrderString);
   1504e:	          move.l 1a8f8 <fontOrderString>,d0
   15054:	      /-- beq.s 1506e <loadFont+0x2c>
   15056:	      |   move.l 1a8f8 <fontOrderString>,36(sp)
   1505e:	      |   move.l 1a7a4 <SysBase>,d0
   15064:	      |   movea.l d0,a6
   15066:	      |   movea.l 36(sp),a1
   1506a:	      |   jsr -690(a6)
	fontOrderString = copyString(charOrder);
   1506e:	      \-> move.l 60(sp),-(sp)
   15072:	          jsr b8 <copyString>
   15078:	          addq.l #4,sp
   1507a:	          move.l d0,1a8f8 <fontOrderString>
	if( theFont) forgetSpriteBank(theFont);
   15080:	          move.l 1a904 <theFont>,d0
   15086:	      /-- beq.s 15098 <loadFont+0x56>
   15088:	      |   move.l 1a904 <theFont>,d0
   1508e:	      |   move.l d0,-(sp)
   15090:	      |   jsr 8544 <forgetSpriteBank>
   15096:	      |   addq.l #4,sp
	theFont = AllocVec( sizeof(struct loadedSpriteBank), MEMF_ANY );
   15098:	      \-> moveq #26,d0
   1509a:	          move.l d0,32(sp)
   1509e:	          clr.l 28(sp)
   150a2:	          move.l 1a7a4 <SysBase>,d0
   150a8:	          movea.l d0,a6
   150aa:	          move.l 32(sp),d0
   150ae:	          move.l 28(sp),d1
   150b2:	          jsr -684(a6)
   150b6:	          move.l d0,24(sp)
   150ba:	          move.l 24(sp),d0
   150be:	          move.l d0,1a904 <theFont>

	loadedFontNum = filenum;
   150c4:	          move.l 56(sp),1a8f4 <loadedFontNum>

	fontTableSize = 0;
   150cc:	          clr.l 1a900 <fontTableSize>
	char *tmp = charOrder;
   150d2:	          move.l 60(sp),44(sp)
	while (*tmp) {        
   150d8:	   /----- bra.s 15114 <loadFont+0xd2>
		if (*tmp > (UBYTE) fontTableSize) fontTableSize = *tmp;
   150da:	/--|----> movea.l 44(sp),a0
   150de:	|  |      move.b (a0),d0
   150e0:	|  |      ext.w d0
   150e2:	|  |      movea.w d0,a0
   150e4:	|  |      move.l 1a900 <fontTableSize>,d0
   150ea:	|  |      move.l d0,d0
   150ec:	|  |      move.b d0,d0
   150ee:	|  |      andi.l #255,d0
   150f4:	|  |      cmp.l a0,d0
   150f6:	|  |  /-- bge.s 15108 <loadFont+0xc6>
   150f8:	|  |  |   movea.l 44(sp),a0
   150fc:	|  |  |   move.b (a0),d0
   150fe:	|  |  |   ext.w d0
   15100:	|  |  |   movea.w d0,a0
   15102:	|  |  |   move.l a0,1a900 <fontTableSize>
		*tmp++;
   15108:	|  |  \-> move.l 44(sp),d0
   1510c:	|  |      move.l d0,d1
   1510e:	|  |      addq.l #1,d1
   15110:	|  |      move.l d1,44(sp)
	while (*tmp) {        
   15114:	|  \----> movea.l 44(sp),a0
   15118:	|         move.b (a0),d0
   1511a:	\-------- bne.s 150da <loadFont+0x98>
	}
	fontTableSize++;
   1511c:	          move.l 1a900 <fontTableSize>,d0
   15122:	          addq.l #1,d0
   15124:	          move.l d0,1a900 <fontTableSize>

	if( fontTable) FreeVec(fontTable);
   1512a:	          move.l 1a8fc <fontTable>,d0
   15130:	      /-- beq.s 1514a <loadFont+0x108>
   15132:	      |   move.l 1a8fc <fontTable>,20(sp)
   1513a:	      |   move.l 1a7a4 <SysBase>,d0
   15140:	      |   movea.l d0,a6
   15142:	      |   movea.l 20(sp),a1
   15146:	      |   jsr -690(a6)
	fontTable = AllocVec(sizeof(ULONG) * fontTableSize, MEMF_ANY);
   1514a:	      \-> move.l 1a900 <fontTableSize>,d0
   15150:	          add.l d0,d0
   15152:	          add.l d0,d0
   15154:	          move.l d0,16(sp)
   15158:	          clr.l 12(sp)
   1515c:	          move.l 1a7a4 <SysBase>,d0
   15162:	          movea.l d0,a6
   15164:	          move.l 16(sp),d0
   15168:	          move.l 12(sp),d1
   1516c:	          jsr -684(a6)
   15170:	          move.l d0,8(sp)
   15174:	          move.l 8(sp),d0
   15178:	          move.l d0,1a8fc <fontTable>
	if (!fontTable) return FALSE;
   1517e:	          move.l 1a8fc <fontTable>,d0
   15184:	      /-- bne.s 1518c <loadFont+0x14a>
   15186:	      |   clr.w d0
   15188:	/-----|-- bra.w 15238 <loadFont+0x1f6>

	for (a = 0;  a < fontTableSize; a++) {
   1518c:	|     \-> clr.l 48(sp)
   15190:	|     /-- bra.s 151aa <loadFont+0x168>
		fontTable[a] = 0;
   15192:	|  /--|-> move.l 1a8fc <fontTable>,d1
   15198:	|  |  |   move.l 48(sp),d0
   1519c:	|  |  |   add.l d0,d0
   1519e:	|  |  |   add.l d0,d0
   151a0:	|  |  |   movea.l d1,a0
   151a2:	|  |  |   adda.l d0,a0
   151a4:	|  |  |   clr.l (a0)
	for (a = 0;  a < fontTableSize; a++) {
   151a6:	|  |  |   addq.l #1,48(sp)
   151aa:	|  |  \-> move.l 1a900 <fontTableSize>,d0
   151b0:	|  |      cmp.l 48(sp),d0
   151b4:	|  \----- bhi.s 15192 <loadFont+0x150>
	}
	a = 0;
   151b6:	|         clr.l 48(sp)
	int i = 0;
   151ba:	|         clr.l 40(sp)
	tmp = charOrder;
   151be:	|         move.l 60(sp),44(sp)
	while (*tmp) {
   151c4:	|     /-- bra.s 151f4 <loadFont+0x1b2>
		fontTable[*tmp++] = i;
   151c6:	|  /--|-> move.l 1a8fc <fontTable>,d1
   151cc:	|  |  |   move.l 44(sp),d0
   151d0:	|  |  |   move.l d0,d2
   151d2:	|  |  |   addq.l #1,d2
   151d4:	|  |  |   move.l d2,44(sp)
   151d8:	|  |  |   movea.l d0,a0
   151da:	|  |  |   move.b (a0),d0
   151dc:	|  |  |   ext.w d0
   151de:	|  |  |   movea.w d0,a0
   151e0:	|  |  |   move.l a0,d0
   151e2:	|  |  |   add.l a0,d0
   151e4:	|  |  |   add.l d0,d0
   151e6:	|  |  |   movea.l d1,a0
   151e8:	|  |  |   adda.l d0,a0
   151ea:	|  |  |   move.l 40(sp),d0
   151ee:	|  |  |   move.l d0,(a0)
		i++;
   151f0:	|  |  |   addq.l #1,40(sp)
	while (*tmp) {
   151f4:	|  |  \-> movea.l 44(sp),a0
   151f8:	|  |      move.b (a0),d0
   151fa:	|  \----- bne.s 151c6 <loadFont+0x184>
	}

	if (!loadSpriteBank(filenum, &theFont->bank, TRUE)) {
   151fc:	|         move.l 1a904 <theFont>,d0
   15202:	|         addq.l #8,d0
   15204:	|         pea 1 <_start+0x1>
   15208:	|         move.l d0,-(sp)
   1520a:	|         move.l 64(sp),-(sp)
   1520e:	|         jsr 8666 <loadSpriteBank>
   15214:	|         lea 12(sp),sp
   15218:	|         tst.w d0
   1521a:	|     /-- bne.s 1522e <loadFont+0x1ec>
		KPrintF("loadFont: Can't load font");
   1521c:	|     |   pea 19a91 <main_sludge.c.0270f7ba+0x255>
   15222:	|     |   jsr 16c5e <KPrintF>
   15228:	|     |   addq.l #4,sp
		return FALSE;
   1522a:	|     |   clr.w d0
   1522c:	+-----|-- bra.s 15238 <loadFont+0x1f6>
	}
	fontHeight = h;
   1522e:	|     \-> move.l 64(sp),1a8f0 <fontHeight>
	return TRUE;
   15236:	|         moveq #1,d0
}
   15238:	\-------> move.l (sp)+,d2
   1523a:	          movea.l (sp)+,a6
   1523c:	          lea 44(sp),sp
   15240:	          rts

00015242 <pasteStringToBackdrop>:

void pasteStringToBackdrop(char *theText, int xOff, int y) {
   15242:	                lea -12(sp),sp
    struct sprite *mySprite;
    int a = 0;
   15246:	                clr.l 4(sp)

    if (!fontTableSize) return;
   1524a:	                move.l 1a900 <fontTableSize>,d0
   15250:	/-------------- beq.w 15318 <pasteStringToBackdrop+0xd6>

    xOff += fontSpace >> 1;
   15254:	|               move.w 1a6a8 <fontSpace>,d0
   1525a:	|               asr.w #1,d0
   1525c:	|               ext.l d0
   1525e:	|               add.l d0,20(sp)
	char *tmp = theText;
   15262:	|               move.l 16(sp),8(sp)
    while (*tmp) {        
   15268:	|     /-------- bra.w 1530c <pasteStringToBackdrop+0xca>
        mySprite = &theFont->bank.sprites[fontInTable( (UBYTE) *tmp)];
   1526c:	|  /--|-------> movea.l 1a904 <theFont>,a0
   15272:	|  |  |         movea.l 16(a0),a0
   15276:	|  |  |         movea.l 8(sp),a1
   1527a:	|  |  |         move.b (a1),d0
   1527c:	|  |  |         move.b d0,d0
   1527e:	|  |  |         andi.l #255,d0
   15284:	|  |  |         move.l 1a900 <fontTableSize>,d1
   1528a:	|  |  |         cmp.l d0,d1
   1528c:	|  |  |  /----- bls.s 152b8 <pasteStringToBackdrop+0x76>
   1528e:	|  |  |  |      move.l 1a8fc <fontTable>,d1
   15294:	|  |  |  |      movea.l 8(sp),a1
   15298:	|  |  |  |      move.b (a1),d0
   1529a:	|  |  |  |      move.b d0,d0
   1529c:	|  |  |  |      andi.l #255,d0
   152a2:	|  |  |  |      add.l d0,d0
   152a4:	|  |  |  |      add.l d0,d0
   152a6:	|  |  |  |      movea.l d1,a1
   152a8:	|  |  |  |      adda.l d0,a1
   152aa:	|  |  |  |      move.l (a1),d1
   152ac:	|  |  |  |      move.l d1,d0
   152ae:	|  |  |  |      lsl.l #3,d0
   152b0:	|  |  |  |      sub.l d1,d0
   152b2:	|  |  |  |      add.l d0,d0
   152b4:	|  |  |  |      add.l d0,d0
   152b6:	|  |  |  |  /-- bra.s 152ba <pasteStringToBackdrop+0x78>
   152b8:	|  |  |  \--|-> moveq #0,d0
   152ba:	|  |  |     \-> adda.l d0,a0
   152bc:	|  |  |         move.l a0,(sp)
        CstPasteChar( mySprite, xOff - mySprite->xhot, y - mySprite->yhot);
   152be:	|  |  |         move.l 24(sp),d1
   152c2:	|  |  |         movea.l (sp),a0
   152c4:	|  |  |         move.l 12(a0),d0
   152c8:	|  |  |         move.l d0,d0
   152ca:	|  |  |         sub.w d0,d1
   152cc:	|  |  |         move.w d1,d0
   152ce:	|  |  |         movea.w d0,a1
   152d0:	|  |  |         move.l 20(sp),d1
   152d4:	|  |  |         movea.l (sp),a0
   152d6:	|  |  |         move.l 8(a0),d0
   152da:	|  |  |         move.l d0,d0
   152dc:	|  |  |         sub.w d0,d1
   152de:	|  |  |         move.w d1,d0
   152e0:	|  |  |         movea.w d0,a0
   152e2:	|  |  |         move.l a1,-(sp)
   152e4:	|  |  |         move.l a0,-(sp)
   152e6:	|  |  |         move.l 8(sp),-(sp)
   152ea:	|  |  |         jsr 1c52 <CstPasteChar>
   152f0:	|  |  |         lea 12(sp),sp
        xOff += mySprite->width + fontSpace;
   152f4:	|  |  |         movea.l (sp),a0
   152f6:	|  |  |         move.l (a0),d1
   152f8:	|  |  |         move.w 1a6a8 <fontSpace>,d0
   152fe:	|  |  |         movea.w d0,a0
   15300:	|  |  |         move.l d1,d0
   15302:	|  |  |         add.l a0,d0
   15304:	|  |  |         add.l d0,20(sp)
		tmp++;
   15308:	|  |  |         addq.l #1,8(sp)
    while (*tmp) {        
   1530c:	|  |  \-------> movea.l 8(sp),a0
   15310:	|  |            move.b (a0),d0
   15312:	|  \----------- bne.w 1526c <pasteStringToBackdrop+0x2a>
   15316:	|           /-- bra.s 1531a <pasteStringToBackdrop+0xd8>
    if (!fontTableSize) return;
   15318:	\-----------|-> nop
    }
}
   1531a:	            \-> lea 12(sp),sp
   1531e:	                rts

00015320 <stringWidth>:


int stringWidth (char * theText) {
   15320:	       subq.l #8,sp
	int a = 0;
   15322:	       clr.l 4(sp)
    ULONG c;
	int xOff = 0;
   15326:	       clr.l (sp)

	if (! fontTableSize) return 0;
   15328:	       move.l 1a900 <fontTableSize>,d0
   1532e:	/----- bne.s 15334 <stringWidth+0x14>
   15330:	|      moveq #0,d0
   15332:	|  /-- bra.s 15336 <stringWidth+0x16>
	/*while (theText[a]) {
        c = u8_nextchar(theText, &a);
		xOff += theFont.sprites[fontInTable(c)].width + fontSpace;
	}Todo: Amigize this*/
	
	return xOff;
   15334:	\--|-> move.l (sp),d0
}
   15336:	   \-> addq.l #8,sp
   15338:	       rts

0001533a <addScreenRegion>:
struct screenRegion * allScreenRegions = NULL;
struct screenRegion * overRegion = NULL;



BOOL addScreenRegion(int x1, int y1, int x2, int y2, int sX, int sY, int di, int objectNum) {
   1533a:	       lea -16(sp),sp
   1533e:	       move.l a6,-(sp)
    struct screenRegion *newRegion = AllocVec(sizeof(struct screenRegion), MEMF_ANY);
   15340:	       moveq #36,d0
   15342:	       move.l d0,16(sp)
   15346:	       clr.l 12(sp)
   1534a:	       move.l 1a7a4 <SysBase>,d0
   15350:	       movea.l d0,a6
   15352:	       move.l 16(sp),d0
   15356:	       move.l 12(sp),d1
   1535a:	       jsr -684(a6)
   1535e:	       move.l d0,8(sp)
   15362:	       move.l 8(sp),d0
   15366:	       move.l d0,4(sp)
    if (!newRegion) return FALSE;
   1536a:	   /-- bne.s 15372 <addScreenRegion+0x38>
   1536c:	   |   clr.w d0
   1536e:	/--|-- bra.w 153f2 <addScreenRegion+0xb8>
    newRegion->di = di;
   15372:	|  \-> movea.l 4(sp),a0
   15376:	|      move.l 48(sp),24(a0)
    newRegion->x1 = x1;
   1537c:	|      movea.l 4(sp),a0
   15380:	|      move.l 24(sp),(a0)
    newRegion->y1 = y1;
   15384:	|      movea.l 4(sp),a0
   15388:	|      move.l 28(sp),4(a0)
    newRegion->x2 = x2;
   1538e:	|      movea.l 4(sp),a0
   15392:	|      move.l 32(sp),8(a0)
    newRegion->y2 = y2;
   15398:	|      movea.l 4(sp),a0
   1539c:	|      move.l 36(sp),12(a0)
    newRegion->sX = sX;
   153a2:	|      movea.l 4(sp),a0
   153a6:	|      move.l 40(sp),16(a0)
    newRegion->sY = sY;
   153ac:	|      movea.l 4(sp),a0
   153b0:	|      move.l 44(sp),20(a0)
    newRegion->thisType = loadObjectType(objectNum);
   153b6:	|      move.l 52(sp),-(sp)
   153ba:	|      jsr d0ba <loadObjectType>
   153c0:	|      addq.l #4,sp
   153c2:	|      movea.l 4(sp),a0
   153c6:	|      move.l d0,28(a0)
    newRegion->next = allScreenRegions;
   153ca:	|      move.l 1a908 <allScreenRegions>,d0
   153d0:	|      movea.l 4(sp),a0
   153d4:	|      move.l d0,32(a0)
    allScreenRegions = newRegion;
   153d8:	|      move.l 4(sp),1a908 <allScreenRegions>
    return (BOOL) (newRegion->thisType != NULL);
   153e0:	|      movea.l 4(sp),a0
   153e4:	|      move.l 28(a0),d0
   153e8:	|      sne d0
   153ea:	|      neg.b d0
   153ec:	|      move.b d0,d0
   153ee:	|      andi.w #255,d0
}
   153f2:	\----> movea.l (sp)+,a6
   153f4:	       lea 16(sp),sp
   153f8:	       rts

000153fa <getOverRegion>:

void getOverRegion () {
   153fa:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   153fc:	             move.l 1a908 <allScreenRegions>,(sp)
	while (thisRegion) {
   15402:	   /-------- bra.s 15470 <getOverRegion+0x76>
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15404:	/--|-------> move.l 1a760 <input+0xa>,d0
   1540a:	|  |         movea.l (sp),a0
   1540c:	|  |         movea.l (a0),a0
   1540e:	|  |         move.l 1a8b2 <cameraX>,d1
   15414:	|  |         suba.l d1,a0
   15416:	|  |         cmpa.l d0,a0
   15418:	|  |  /----- bgt.s 1546a <getOverRegion+0x70>
   1541a:	|  |  |      move.l 1a764 <input+0xe>,d0
   15420:	|  |  |      movea.l (sp),a0
   15422:	|  |  |      movea.l 4(a0),a0
   15426:	|  |  |      move.l 1a8b6 <cameraY>,d1
   1542c:	|  |  |      suba.l d1,a0
   1542e:	|  |  |      cmpa.l d0,a0
   15430:	|  |  +----- bgt.s 1546a <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   15432:	|  |  |      move.l 1a760 <input+0xa>,d0
   15438:	|  |  |      movea.l (sp),a0
   1543a:	|  |  |      movea.l 8(a0),a0
   1543e:	|  |  |      move.l 1a8b2 <cameraX>,d1
   15444:	|  |  |      suba.l d1,a0
		if ((input.mouseX >= thisRegion -> x1 - cameraX) && (input.mouseY >= thisRegion -> y1 - cameraY) &&
   15446:	|  |  |      cmpa.l d0,a0
   15448:	|  |  +----- blt.s 1546a <getOverRegion+0x70>
			 (input.mouseX <= thisRegion -> x2 - cameraX) && (input.mouseY <= thisRegion -> y2 - cameraY)) {
   1544a:	|  |  |      move.l 1a764 <input+0xe>,d0
   15450:	|  |  |      movea.l (sp),a0
   15452:	|  |  |      movea.l 12(a0),a0
   15456:	|  |  |      move.l 1a8b6 <cameraY>,d1
   1545c:	|  |  |      suba.l d1,a0
   1545e:	|  |  |      cmpa.l d0,a0
   15460:	|  |  +----- blt.s 1546a <getOverRegion+0x70>
			overRegion = thisRegion;
   15462:	|  |  |      move.l (sp),1a90c <overRegion>
			return;
   15468:	|  |  |  /-- bra.s 1547c <getOverRegion+0x82>
		}
		thisRegion = thisRegion -> next;
   1546a:	|  |  \--|-> movea.l (sp),a0
   1546c:	|  |     |   move.l 32(a0),(sp)
	while (thisRegion) {
   15470:	|  \-----|-> tst.l (sp)
   15472:	\--------|-- bne.s 15404 <getOverRegion+0xa>
	}
	overRegion = NULL;
   15474:	         |   clr.l 1a90c <overRegion>
	return;
   1547a:	         |   nop
}
   1547c:	         \-> addq.l #4,sp
   1547e:	             rts

00015480 <getRegionForObject>:


struct screenRegion * getRegionForObject (int obj) {
   15480:	             subq.l #4,sp
	struct screenRegion * thisRegion = allScreenRegions;
   15482:	             move.l 1a908 <allScreenRegions>,(sp)

	while (thisRegion) {
   15488:	   /-------- bra.s 154a4 <getRegionForObject+0x24>
		if (obj == thisRegion -> thisType -> objectNum) {
   1548a:	/--|-------> movea.l (sp),a0
   1548c:	|  |         movea.l 28(a0),a0
   15490:	|  |         move.l 4(a0),d0
   15494:	|  |         cmp.l 8(sp),d0
   15498:	|  |     /-- bne.s 1549e <getRegionForObject+0x1e>
			return thisRegion;
   1549a:	|  |     |   move.l (sp),d0
   1549c:	|  |  /--|-- bra.s 154aa <getRegionForObject+0x2a>
		}
		thisRegion = thisRegion -> next;
   1549e:	|  |  |  \-> movea.l (sp),a0
   154a0:	|  |  |      move.l 32(a0),(sp)
	while (thisRegion) {
   154a4:	|  \--|----> tst.l (sp)
   154a6:	\-----|----- bne.s 1548a <getRegionForObject+0xa>
	}

	return NULL;
   154a8:	      |      moveq #0,d0
}
   154aa:	      \----> addq.l #4,sp
   154ac:	             rts

000154ae <killAllRegions>:

void killAllRegions () {
   154ae:	       subq.l #8,sp
   154b0:	       move.l a6,-(sp)
	struct screenRegion * killRegion;
	while (allScreenRegions) {
   154b2:	   /-- bra.s 154f4 <killAllRegions+0x46>
		killRegion = allScreenRegions;
   154b4:	/--|-> move.l 1a908 <allScreenRegions>,8(sp)
		allScreenRegions = allScreenRegions -> next;
   154bc:	|  |   movea.l 1a908 <allScreenRegions>,a0
   154c2:	|  |   move.l 32(a0),d0
   154c6:	|  |   move.l d0,1a908 <allScreenRegions>
		removeObjectType (killRegion -> thisType);
   154cc:	|  |   movea.l 8(sp),a0
   154d0:	|  |   move.l 28(a0),d0
   154d4:	|  |   move.l d0,-(sp)
   154d6:	|  |   jsr d372 <removeObjectType>
   154dc:	|  |   addq.l #4,sp
		FreeVec(killRegion);
   154de:	|  |   move.l 8(sp),4(sp)
   154e4:	|  |   move.l 1a7a4 <SysBase>,d0
   154ea:	|  |   movea.l d0,a6
   154ec:	|  |   movea.l 4(sp),a1
   154f0:	|  |   jsr -690(a6)
	while (allScreenRegions) {
   154f4:	|  \-> move.l 1a908 <allScreenRegions>,d0
   154fa:	\----- bne.s 154b4 <killAllRegions+0x6>
	}
	overRegion = NULL;
   154fc:	       clr.l 1a90c <overRegion>
}
   15502:	       nop
   15504:	       movea.l (sp)+,a6
   15506:	       addq.l #8,sp
   15508:	       rts

0001550a <loadRegions>:

void loadRegions (BPTR fp) {
   1550a:	       lea -24(sp),sp
   1550e:	       move.l a6,-(sp)
	int numRegions = get2bytes (fp);
   15510:	       move.l 32(sp),-(sp)
   15514:	       jsr 6bc <get2bytes>
   1551a:	       addq.l #4,sp
   1551c:	       move.l d0,24(sp)

	struct screenRegion * newRegion;
	struct screenRegion * * pointy = & allScreenRegions;
   15520:	       move.l #108808,20(sp)

	while (numRegions --) {
   15528:	   /-- bra.w 15606 <loadRegions+0xfc>
		newRegion = AllocVec( sizeof(struct screenRegion),MEMF_ANY);
   1552c:	/--|-> moveq #36,d0
   1552e:	|  |   move.l d0,16(sp)
   15532:	|  |   clr.l 12(sp)
   15536:	|  |   move.l 1a7a4 <SysBase>,d0
   1553c:	|  |   movea.l d0,a6
   1553e:	|  |   move.l 16(sp),d0
   15542:	|  |   move.l 12(sp),d1
   15546:	|  |   jsr -684(a6)
   1554a:	|  |   move.l d0,8(sp)
   1554e:	|  |   move.l 8(sp),d0
   15552:	|  |   move.l d0,4(sp)
		* pointy = newRegion;
   15556:	|  |   movea.l 20(sp),a0
   1555a:	|  |   move.l 4(sp),(a0)
		pointy = & (newRegion -> next);
   1555e:	|  |   moveq #32,d1
   15560:	|  |   add.l 4(sp),d1
   15564:	|  |   move.l d1,20(sp)

		newRegion -> x1 = get2bytes (fp);
   15568:	|  |   move.l 32(sp),-(sp)
   1556c:	|  |   jsr 6bc <get2bytes>
   15572:	|  |   addq.l #4,sp
   15574:	|  |   movea.l 4(sp),a0
   15578:	|  |   move.l d0,(a0)
		newRegion -> y1 = get2bytes (fp);
   1557a:	|  |   move.l 32(sp),-(sp)
   1557e:	|  |   jsr 6bc <get2bytes>
   15584:	|  |   addq.l #4,sp
   15586:	|  |   movea.l 4(sp),a0
   1558a:	|  |   move.l d0,4(a0)
		newRegion -> x2 = get2bytes (fp);
   1558e:	|  |   move.l 32(sp),-(sp)
   15592:	|  |   jsr 6bc <get2bytes>
   15598:	|  |   addq.l #4,sp
   1559a:	|  |   movea.l 4(sp),a0
   1559e:	|  |   move.l d0,8(a0)
		newRegion -> y2 = get2bytes (fp);
   155a2:	|  |   move.l 32(sp),-(sp)
   155a6:	|  |   jsr 6bc <get2bytes>
   155ac:	|  |   addq.l #4,sp
   155ae:	|  |   movea.l 4(sp),a0
   155b2:	|  |   move.l d0,12(a0)
		newRegion -> sX = get2bytes (fp);
   155b6:	|  |   move.l 32(sp),-(sp)
   155ba:	|  |   jsr 6bc <get2bytes>
   155c0:	|  |   addq.l #4,sp
   155c2:	|  |   movea.l 4(sp),a0
   155c6:	|  |   move.l d0,16(a0)
		newRegion -> sY = get2bytes (fp);
   155ca:	|  |   move.l 32(sp),-(sp)
   155ce:	|  |   jsr 6bc <get2bytes>
   155d4:	|  |   addq.l #4,sp
   155d6:	|  |   movea.l 4(sp),a0
   155da:	|  |   move.l d0,20(a0)
		newRegion -> di = get2bytes (fp);
   155de:	|  |   move.l 32(sp),-(sp)
   155e2:	|  |   jsr 6bc <get2bytes>
   155e8:	|  |   addq.l #4,sp
   155ea:	|  |   movea.l 4(sp),a0
   155ee:	|  |   move.l d0,24(a0)
		newRegion -> thisType = loadObjectRef (fp);
   155f2:	|  |   move.l 32(sp),-(sp)
   155f6:	|  |   jsr d068 <loadObjectRef>
   155fc:	|  |   addq.l #4,sp
   155fe:	|  |   movea.l 4(sp),a0
   15602:	|  |   move.l d0,28(a0)
	while (numRegions --) {
   15606:	|  \-> move.l 24(sp),d0
   1560a:	|      move.l d0,d1
   1560c:	|      subq.l #1,d1
   1560e:	|      move.l d1,24(sp)
   15612:	|      tst.l d0
   15614:	\----- bne.w 1552c <loadRegions+0x22>
	}
	* pointy = NULL;
   15618:	       movea.l 20(sp),a0
   1561c:	       clr.l (a0)
}
   1561e:	       nop
   15620:	       movea.l (sp)+,a6
   15622:	       lea 24(sp),sp
   15626:	       rts

00015628 <removeScreenRegion>:

void removeScreenRegion (int objectNum) {
   15628:	             lea -12(sp),sp
   1562c:	             move.l a6,-(sp)
    struct screenRegion ** huntRegion = &allScreenRegions;
   1562e:	             move.l #108808,12(sp)
    struct screenRegion * killMe;

    while (*huntRegion) {
   15636:	   /-------- bra.s 156b0 <removeScreenRegion+0x88>
        if ((*huntRegion)->thisType->objectNum == objectNum) {
   15638:	/--|-------> movea.l 12(sp),a0
   1563c:	|  |         movea.l (a0),a0
   1563e:	|  |         movea.l 28(a0),a0
   15642:	|  |         move.l 4(a0),d0
   15646:	|  |         cmp.l 20(sp),d0
   1564a:	|  |  /----- bne.s 156a2 <removeScreenRegion+0x7a>
            killMe = *huntRegion;
   1564c:	|  |  |      movea.l 12(sp),a0
   15650:	|  |  |      move.l (a0),8(sp)
            *huntRegion = killMe->next;
   15654:	|  |  |      movea.l 8(sp),a0
   15658:	|  |  |      move.l 32(a0),d0
   1565c:	|  |  |      movea.l 12(sp),a0
   15660:	|  |  |      move.l d0,(a0)
            removeObjectType(killMe->thisType);
   15662:	|  |  |      movea.l 8(sp),a0
   15666:	|  |  |      move.l 28(a0),d0
   1566a:	|  |  |      move.l d0,-(sp)
   1566c:	|  |  |      jsr d372 <removeObjectType>
   15672:	|  |  |      addq.l #4,sp
            if (killMe == overRegion) overRegion = NULL;
   15674:	|  |  |      move.l 1a90c <overRegion>,d0
   1567a:	|  |  |      cmp.l 8(sp),d0
   1567e:	|  |  |  /-- bne.s 15686 <removeScreenRegion+0x5e>
   15680:	|  |  |  |   clr.l 1a90c <overRegion>
            FreeVec(killMe);
   15686:	|  |  |  \-> move.l 8(sp),4(sp)
   1568c:	|  |  |      move.l 1a7a4 <SysBase>,d0
   15692:	|  |  |      movea.l d0,a6
   15694:	|  |  |      movea.l 4(sp),a1
   15698:	|  |  |      jsr -690(a6)
            killMe = NULL;
   1569c:	|  |  |      clr.l 8(sp)
   156a0:	|  +--|----- bra.s 156b0 <removeScreenRegion+0x88>
        } else {
            huntRegion = &((*huntRegion)->next);
   156a2:	|  |  \----> movea.l 12(sp),a0
   156a6:	|  |         move.l (a0),d0
   156a8:	|  |         moveq #32,d1
   156aa:	|  |         add.l d0,d1
   156ac:	|  |         move.l d1,12(sp)
    while (*huntRegion) {
   156b0:	|  \-------> movea.l 12(sp),a0
   156b4:	|            move.l (a0),d0
   156b6:	\----------- bne.s 15638 <removeScreenRegion+0x10>
        }
    }
}
   156b8:	             nop
   156ba:	             nop
   156bc:	             movea.l (sp)+,a6
   156be:	             lea 12(sp),sp
   156c2:	             rts

000156c4 <saveRegions>:

void saveRegions (BPTR fp) {
   156c4:	       subq.l #8,sp
	int numRegions = 0;
   156c6:	       clr.l 4(sp)
	struct screenRegion * thisRegion = allScreenRegions;
   156ca:	       move.l 1a908 <allScreenRegions>,(sp)
	while (thisRegion) {
   156d0:	   /-- bra.s 156dc <saveRegions+0x18>
		thisRegion = thisRegion -> next;
   156d2:	/--|-> movea.l (sp),a0
   156d4:	|  |   move.l 32(a0),(sp)
		numRegions ++;
   156d8:	|  |   addq.l #1,4(sp)
	while (thisRegion) {
   156dc:	|  \-> tst.l (sp)
   156de:	\----- bne.s 156d2 <saveRegions+0xe>
	}
	put2bytes (numRegions, fp);
   156e0:	       move.l 12(sp),-(sp)
   156e4:	       move.l 8(sp),-(sp)
   156e8:	       jsr 8d0 <put2bytes>
   156ee:	       addq.l #8,sp
	thisRegion = allScreenRegions;
   156f0:	       move.l 1a908 <allScreenRegions>,(sp)
	while (thisRegion) {
   156f6:	/----- bra.w 1579e <saveRegions+0xda>
		put2bytes (thisRegion -> x1, fp);
   156fa:	|  /-> movea.l (sp),a0
   156fc:	|  |   move.l (a0),d0
   156fe:	|  |   move.l 12(sp),-(sp)
   15702:	|  |   move.l d0,-(sp)
   15704:	|  |   jsr 8d0 <put2bytes>
   1570a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y1, fp);
   1570c:	|  |   movea.l (sp),a0
   1570e:	|  |   move.l 4(a0),d0
   15712:	|  |   move.l 12(sp),-(sp)
   15716:	|  |   move.l d0,-(sp)
   15718:	|  |   jsr 8d0 <put2bytes>
   1571e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> x2, fp);
   15720:	|  |   movea.l (sp),a0
   15722:	|  |   move.l 8(a0),d0
   15726:	|  |   move.l 12(sp),-(sp)
   1572a:	|  |   move.l d0,-(sp)
   1572c:	|  |   jsr 8d0 <put2bytes>
   15732:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> y2, fp);
   15734:	|  |   movea.l (sp),a0
   15736:	|  |   move.l 12(a0),d0
   1573a:	|  |   move.l 12(sp),-(sp)
   1573e:	|  |   move.l d0,-(sp)
   15740:	|  |   jsr 8d0 <put2bytes>
   15746:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sX, fp);
   15748:	|  |   movea.l (sp),a0
   1574a:	|  |   move.l 16(a0),d0
   1574e:	|  |   move.l 12(sp),-(sp)
   15752:	|  |   move.l d0,-(sp)
   15754:	|  |   jsr 8d0 <put2bytes>
   1575a:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> sY, fp);
   1575c:	|  |   movea.l (sp),a0
   1575e:	|  |   move.l 20(a0),d0
   15762:	|  |   move.l 12(sp),-(sp)
   15766:	|  |   move.l d0,-(sp)
   15768:	|  |   jsr 8d0 <put2bytes>
   1576e:	|  |   addq.l #8,sp
		put2bytes (thisRegion -> di, fp);
   15770:	|  |   movea.l (sp),a0
   15772:	|  |   move.l 24(a0),d0
   15776:	|  |   move.l 12(sp),-(sp)
   1577a:	|  |   move.l d0,-(sp)
   1577c:	|  |   jsr 8d0 <put2bytes>
   15782:	|  |   addq.l #8,sp
		saveObjectRef (thisRegion -> thisType, fp);
   15784:	|  |   movea.l (sp),a0
   15786:	|  |   move.l 28(a0),d0
   1578a:	|  |   move.l 12(sp),-(sp)
   1578e:	|  |   move.l d0,-(sp)
   15790:	|  |   jsr d412 <saveObjectRef>
   15796:	|  |   addq.l #8,sp

		thisRegion = thisRegion -> next;
   15798:	|  |   movea.l (sp),a0
   1579a:	|  |   move.l 32(a0),(sp)
	while (thisRegion) {
   1579e:	\--|-> tst.l (sp)
   157a0:	   \-- bne.w 156fa <saveRegions+0x36>
	}
}
   157a4:	       nop
   157a6:	       nop
   157a8:	       addq.l #8,sp
   157aa:	       rts

000157ac <showBoxes>:

void showBoxes () {
   157ac:	       subq.l #4,sp
	struct screenRegion * huntRegion = allScreenRegions;
   157ae:	       move.l 1a908 <allScreenRegions>,(sp)

	while (huntRegion) {
   157b4:	/----- bra.w 15850 <showBoxes+0xa4>
		drawVerticalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> y2);
   157b8:	|  /-> movea.l (sp),a0
   157ba:	|  |   move.l 12(a0),d0
   157be:	|  |   movea.l d0,a1
   157c0:	|  |   movea.l (sp),a0
   157c2:	|  |   move.l 4(a0),d0
   157c6:	|  |   move.l d0,d1
   157c8:	|  |   movea.l (sp),a0
   157ca:	|  |   move.l (a0),d0
   157cc:	|  |   move.l a1,-(sp)
   157ce:	|  |   move.l d1,-(sp)
   157d0:	|  |   move.l d0,-(sp)
   157d2:	|  |   jsr ccf6 <drawVerticalLine>
   157d8:	|  |   lea 12(sp),sp
		drawVerticalLine (huntRegion -> x2, huntRegion -> y1, huntRegion -> y2);
   157dc:	|  |   movea.l (sp),a0
   157de:	|  |   move.l 12(a0),d0
   157e2:	|  |   movea.l d0,a1
   157e4:	|  |   movea.l (sp),a0
   157e6:	|  |   move.l 4(a0),d0
   157ea:	|  |   move.l d0,d1
   157ec:	|  |   movea.l (sp),a0
   157ee:	|  |   move.l 8(a0),d0
   157f2:	|  |   move.l a1,-(sp)
   157f4:	|  |   move.l d1,-(sp)
   157f6:	|  |   move.l d0,-(sp)
   157f8:	|  |   jsr ccf6 <drawVerticalLine>
   157fe:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y1, huntRegion -> x2);
   15802:	|  |   movea.l (sp),a0
   15804:	|  |   move.l 8(a0),d0
   15808:	|  |   movea.l d0,a1
   1580a:	|  |   movea.l (sp),a0
   1580c:	|  |   move.l 4(a0),d0
   15810:	|  |   move.l d0,d1
   15812:	|  |   movea.l (sp),a0
   15814:	|  |   move.l (a0),d0
   15816:	|  |   move.l a1,-(sp)
   15818:	|  |   move.l d1,-(sp)
   1581a:	|  |   move.l d0,-(sp)
   1581c:	|  |   jsr ccd0 <drawHorizontalLine>
   15822:	|  |   lea 12(sp),sp
		drawHorizontalLine (huntRegion -> x1, huntRegion -> y2, huntRegion -> x2);
   15826:	|  |   movea.l (sp),a0
   15828:	|  |   move.l 8(a0),d0
   1582c:	|  |   movea.l d0,a1
   1582e:	|  |   movea.l (sp),a0
   15830:	|  |   move.l 12(a0),d0
   15834:	|  |   move.l d0,d1
   15836:	|  |   movea.l (sp),a0
   15838:	|  |   move.l (a0),d0
   1583a:	|  |   move.l a1,-(sp)
   1583c:	|  |   move.l d1,-(sp)
   1583e:	|  |   move.l d0,-(sp)
   15840:	|  |   jsr ccd0 <drawHorizontalLine>
   15846:	|  |   lea 12(sp),sp
		huntRegion = huntRegion -> next;
   1584a:	|  |   movea.l (sp),a0
   1584c:	|  |   move.l 32(a0),(sp)
	while (huntRegion) {
   15850:	\--|-> tst.l (sp)
   15852:	   \-- bne.w 157b8 <showBoxes+0xc>
	}
   15856:	       nop
   15858:	       nop
   1585a:	       addq.l #4,sp
   1585c:	       rts

0001585e <rand>:
// Define constants for LCG
#define MULTIPLIER 1103515245UL
#define INCREMENT 12345UL
#define MODULUS 0x7FFFFFFFUL

ULONG rand() {
   1585e:	       lea -88(sp),sp
   15862:	       move.l a6,-(sp)
    struct timerequest *timereq;

    struct MsgPort *timerport = CreateMsgPort();
   15864:	       move.l 1a7a4 <SysBase>,d0
   1586a:	       movea.l d0,a6
   1586c:	       jsr -666(a6)
   15870:	       move.l d0,88(sp)
   15874:	       move.l 88(sp),d0
   15878:	       move.l d0,84(sp)

    timereq = CreateIORequest(timerport, sizeof(struct timerequest));
   1587c:	       move.l 84(sp),80(sp)
   15882:	       moveq #40,d0
   15884:	       move.l d0,76(sp)
   15888:	       move.l 1a7a4 <SysBase>,d0
   1588e:	       movea.l d0,a6
   15890:	       movea.l 80(sp),a0
   15894:	       move.l 76(sp),d0
   15898:	       jsr -654(a6)
   1589c:	       move.l d0,72(sp)
   158a0:	       move.l 72(sp),d0
   158a4:	       move.l d0,68(sp)
    struct IORequest* ioreq = (struct IORequest*)timereq;
   158a8:	       move.l 68(sp),64(sp)
    if (OpenDevice(TIMERNAME, UNIT_MICROHZ, ioreq, 0)) {
   158ae:	       move.l #105131,60(sp)
   158b6:	       clr.l 56(sp)
   158ba:	       move.l 64(sp),52(sp)
   158c0:	       clr.l 48(sp)
   158c4:	       move.l 1a7a4 <SysBase>,d0
   158ca:	       movea.l d0,a6
   158cc:	       movea.l 60(sp),a0
   158d0:	       move.l 56(sp),d0
   158d4:	       movea.l 52(sp),a1
   158d8:	       move.l 48(sp),d1
   158dc:	       jsr -444(a6)
   158e0:	       move.b d0,47(sp)
   158e4:	       move.b 47(sp),d0
   158e8:	   /-- beq.s 158fe <rand+0xa0>
        KPrintF("Unable to open timer device\n");
   158ea:	   |   pea 19ab8 <main_sludge.c.0270f7ba+0x27c>
   158f0:	   |   jsr 16c5e <KPrintF>
   158f6:	   |   addq.l #4,sp
        return 0;
   158f8:	   |   moveq #0,d0
   158fa:	/--|-- bra.w 159b8 <rand+0x15a>
    }
    struct Device* TimerBase = ioreq->io_Device;
   158fe:	|  \-> movea.l 64(sp),a0
   15902:	|      move.l 20(a0),42(sp)

    struct EClockVal eclock;
    ReadEClock(&eclock);
   15908:	|      lea 92(sp),a0
   1590c:	|      lea -86(a0),a0
   15910:	|      move.l a0,38(sp)
   15914:	|      movea.l 42(sp),a6
   15918:	|      movea.l 38(sp),a0
   1591c:	|      jsr -60(a6)
   15920:	|      move.l d0,34(sp)

    ULONG seed = eclock.ev_lo; // Using the lower part of EClock value as seed
   15924:	|      move.l 10(sp),30(sp)
    seed = (seed * MULTIPLIER + INCREMENT) & 0x7fffffff; // Simple LCG
   1592a:	|      move.l #1103515245,-(sp)
   15930:	|      move.l 34(sp),-(sp)
   15934:	|      jsr 1761c <__mulsi3>
   1593a:	|      addq.l #8,sp
   1593c:	|      addi.l #12345,d0
   15942:	|      move.l d0,d1
   15944:	|      bclr #31,d1
   15948:	|      move.l d1,30(sp)

    // Transform the seed to a random number
    int random_number = seed % 100; // For example, a random number between 0 and 99
   1594c:	|      move.l 30(sp),d0
   15950:	|      pea 64 <_start+0x64>
   15954:	|      move.l d0,-(sp)
   15956:	|      jsr 176f6 <__umodsi3>
   1595c:	|      addq.l #8,sp
   1595e:	|      move.l d0,26(sp)
    KPrintF("Random Number: %d\n", random_number);
   15962:	|      move.l 26(sp),-(sp)
   15966:	|      pea 19ad5 <main_sludge.c.0270f7ba+0x299>
   1596c:	|      jsr 16c5e <KPrintF>
   15972:	|      addq.l #8,sp

    CloseDevice(ioreq);
   15974:	|      move.l 64(sp),22(sp)
   1597a:	|      move.l 1a7a4 <SysBase>,d0
   15980:	|      movea.l d0,a6
   15982:	|      movea.l 22(sp),a1
   15986:	|      jsr -450(a6)
    DeleteIORequest(ioreq);
   1598a:	|      move.l 64(sp),18(sp)
   15990:	|      move.l 1a7a4 <SysBase>,d0
   15996:	|      movea.l d0,a6
   15998:	|      movea.l 18(sp),a0
   1599c:	|      jsr -660(a6)
    DeleteMsgPort(timerport);
   159a0:	|      move.l 84(sp),14(sp)
   159a6:	|      move.l 1a7a4 <SysBase>,d0
   159ac:	|      movea.l d0,a6
   159ae:	|      movea.l 14(sp),a0
   159b2:	|      jsr -672(a6)
    return 0;
   159b6:	|      moveq #0,d0
   159b8:	\----> movea.l (sp)+,a6
   159ba:	       lea 88(sp),sp
   159be:	       rts

000159c0 <loadBankForAnim>:
#include "sprbanks.h"
#include "support/gcc8_c_support.h"

struct loadedSpriteBank * allLoadedBanks = NULL;

struct loadedSpriteBank * loadBankForAnim (int ID) {
   159c0:	             lea -20(sp),sp
   159c4:	             move.l a6,-(sp)
	// KPrintF("loadBankForAnim: Looking for sprite bank with ID %d\n", ID);	
	struct loadedSpriteBank * returnMe = allLoadedBanks;
   159c6:	             move.l 1a910 <allLoadedBanks>,20(sp)
	while (returnMe) {
   159ce:	      /----- bra.s 15a00 <loadBankForAnim+0x40>
		if (returnMe->ID == ID) {
   159d0:	   /--|----> movea.l 20(sp),a0
   159d4:	   |  |      move.l (a0),d0
   159d6:	   |  |      cmp.l 28(sp),d0
   159da:	   |  |  /-- bne.s 159f6 <loadBankForAnim+0x36>
			// KPrintF("loadBankForAnim: Found existing sprite bank with ID %d\n", returnMe->ID);
			returnMe->timesUsed++;
   159dc:	   |  |  |   movea.l 20(sp),a0
   159e0:	   |  |  |   move.l 4(a0),d0
   159e4:	   |  |  |   addq.l #1,d0
   159e6:	   |  |  |   movea.l 20(sp),a0
   159ea:	   |  |  |   move.l d0,4(a0)
			return returnMe;			
   159ee:	   |  |  |   move.l 20(sp),d0
   159f2:	/--|--|--|-- bra.w 15ab6 <loadBankForAnim+0xf6>
		}		
		returnMe = returnMe->next;
   159f6:	|  |  |  \-> movea.l 20(sp),a0
   159fa:	|  |  |      move.l 22(a0),20(sp)
	while (returnMe) {
   15a00:	|  |  \----> tst.l 20(sp)
   15a04:	|  \-------- bne.s 159d0 <loadBankForAnim+0x10>
	}
	returnMe = AllocVec(sizeof(struct loadedSpriteBank), MEMF_ANY);
   15a06:	|            moveq #26,d0
   15a08:	|            move.l d0,16(sp)
   15a0c:	|            clr.l 12(sp)
   15a10:	|            move.l 1a7a4 <SysBase>,d0
   15a16:	|            movea.l d0,a6
   15a18:	|            move.l 16(sp),d0
   15a1c:	|            move.l 12(sp),d1
   15a20:	|            jsr -684(a6)
   15a24:	|            move.l d0,8(sp)
   15a28:	|            move.l 8(sp),d0
   15a2c:	|            move.l d0,20(sp)
	// KPrintF("loadBankForAnim: No existing sprite bank with ID %d\n", ID);
	if (returnMe) {
   15a30:	|     /----- beq.w 15ab4 <loadBankForAnim+0xf4>
		returnMe->ID = ID;
   15a34:	|     |      movea.l 20(sp),a0
   15a38:	|     |      move.l 28(sp),(a0)
		if (loadSpriteBank(ID, &returnMe->bank, FALSE)) {
   15a3c:	|     |      move.l 20(sp),d0
   15a40:	|     |      addq.l #8,d0
   15a42:	|     |      clr.l -(sp)
   15a44:	|     |      move.l d0,-(sp)
   15a46:	|     |      move.l 36(sp),-(sp)
   15a4a:	|     |      jsr 8666 <loadSpriteBank>
   15a50:	|     |      lea 12(sp),sp
   15a54:	|     |      tst.w d0
   15a56:	|     |  /-- beq.s 15a8c <loadBankForAnim+0xcc>
			returnMe->timesUsed = 1;
   15a58:	|     |  |   movea.l 20(sp),a0
   15a5c:	|     |  |   moveq #1,d0
   15a5e:	|     |  |   move.l d0,4(a0)
			returnMe->next = allLoadedBanks;
   15a62:	|     |  |   move.l 1a910 <allLoadedBanks>,d0
   15a68:	|     |  |   movea.l 20(sp),a0
   15a6c:	|     |  |   move.l d0,22(a0)
			allLoadedBanks = returnMe;
   15a70:	|     |  |   move.l 20(sp),1a910 <allLoadedBanks>
			KPrintF("loadBankForAnim: New sprite bank created OK\n");
   15a78:	|     |  |   pea 19ae8 <main_sludge.c.0270f7ba+0x2ac>
   15a7e:	|     |  |   jsr 16c5e <KPrintF>
   15a84:	|     |  |   addq.l #4,sp
			return returnMe;
   15a86:	|     |  |   move.l 20(sp),d0
   15a8a:	+-----|--|-- bra.s 15ab6 <loadBankForAnim+0xf6>
		} else {
			KPrintF("loadBankForAnim: I guess I couldn't load the sprites...\n");
   15a8c:	|     |  \-> pea 19b15 <main_sludge.c.0270f7ba+0x2d9>
   15a92:	|     |      jsr 16c5e <KPrintF>
   15a98:	|     |      addq.l #4,sp
			FreeVec(returnMe);
   15a9a:	|     |      move.l 20(sp),4(sp)
   15aa0:	|     |      move.l 1a7a4 <SysBase>,d0
   15aa6:	|     |      movea.l d0,a6
   15aa8:	|     |      movea.l 4(sp),a1
   15aac:	|     |      jsr -690(a6)
			return NULL;
   15ab0:	|     |      moveq #0,d0
   15ab2:	+-----|----- bra.s 15ab6 <loadBankForAnim+0xf6>
		}
	} else return NULL;
   15ab4:	|     \----> moveq #0,d0
}
   15ab6:	\----------> movea.l (sp)+,a6
   15ab8:	             lea 20(sp),sp
   15abc:	             rts

00015abe <closestPointOnLine>:
#include "support/gcc8_c_support.h"
#include "line.h"

struct flor * currentFloor = NULL;

BOOL closestPointOnLine (int * closestX, int * closestY, int x1, int y1, int x2, int y2, int xP, int yP) {
   15abe:	       lea -32(sp),sp
   15ac2:	       move.l d3,-(sp)
   15ac4:	       move.l d2,-(sp)
	int xDiff = x2 - x1;
   15ac6:	       move.l 60(sp),d0
   15aca:	       sub.l 52(sp),d0
   15ace:	       move.l d0,36(sp)
	int yDiff = y2 - y1;
   15ad2:	       move.l 64(sp),d0
   15ad6:	       sub.l 56(sp),d0
   15ada:	       move.l d0,32(sp)

	double m = xDiff * (xP - x1) + yDiff * (yP - y1);
   15ade:	       move.l 68(sp),d0
   15ae2:	       sub.l 52(sp),d0
   15ae6:	       move.l 36(sp),-(sp)
   15aea:	       move.l d0,-(sp)
   15aec:	       jsr 1761c <__mulsi3>
   15af2:	       addq.l #8,sp
   15af4:	       move.l d0,d2
   15af6:	       move.l 72(sp),d0
   15afa:	       sub.l 56(sp),d0
   15afe:	       move.l 32(sp),-(sp)
   15b02:	       move.l d0,-(sp)
   15b04:	       jsr 1761c <__mulsi3>
   15b0a:	       addq.l #8,sp
   15b0c:	       add.l d2,d0
   15b0e:	       move.l d0,-(sp)
   15b10:	       jsr 1705a <__floatsidf>
   15b16:	       addq.l #4,sp
   15b18:	       move.l d0,16(sp)
   15b1c:	       move.l d1,20(sp)
   15b20:	       move.l 16(sp),24(sp)
   15b26:	       move.l 20(sp),28(sp)
	m /= (xDiff * xDiff) + (yDiff * yDiff);
   15b2c:	       move.l 36(sp),-(sp)
   15b30:	       move.l 40(sp),-(sp)
   15b34:	       jsr 1761c <__mulsi3>
   15b3a:	       addq.l #8,sp
   15b3c:	       move.l d0,d2
   15b3e:	       move.l 32(sp),-(sp)
   15b42:	       move.l 36(sp),-(sp)
   15b46:	       jsr 1761c <__mulsi3>
   15b4c:	       addq.l #8,sp
   15b4e:	       add.l d2,d0
   15b50:	       move.l d0,-(sp)
   15b52:	       jsr 1705a <__floatsidf>
   15b58:	       addq.l #4,sp
   15b5a:	       move.l d1,-(sp)
   15b5c:	       move.l d0,-(sp)
   15b5e:	       move.l 36(sp),-(sp)
   15b62:	       move.l 36(sp),-(sp)
   15b66:	       jsr 16ee4 <__divdf3>
   15b6c:	       lea 16(sp),sp
   15b70:	       move.l d0,8(sp)
   15b74:	       move.l d1,12(sp)
   15b78:	       move.l 8(sp),24(sp)
   15b7e:	       move.l 12(sp),28(sp)

	if (m < 0) {
   15b84:	       clr.l -(sp)
   15b86:	       clr.l -(sp)
   15b88:	       move.l 36(sp),-(sp)
   15b8c:	       move.l 36(sp),-(sp)
   15b90:	       jsr 17272 <__ltdf2>
   15b96:	       lea 16(sp),sp
   15b9a:	       tst.l d0
   15b9c:	   /-- bge.s 15bb2 <closestPointOnLine+0xf4>
		*closestX = x1;
   15b9e:	   |   movea.l 44(sp),a0
   15ba2:	   |   move.l 52(sp),(a0)
		*closestY = y1;
   15ba6:	   |   movea.l 48(sp),a0
   15baa:	   |   move.l 56(sp),(a0)
   15bae:	/--|-- bra.w 15c94 <closestPointOnLine+0x1d6>
	} else if (m > 1) {
   15bb2:	|  \-> clr.l -(sp)
   15bb4:	|      move.l #1072693248,-(sp)
   15bba:	|      move.l 36(sp),-(sp)
   15bbe:	|      move.l 36(sp),-(sp)
   15bc2:	|      jsr 171b8 <__gtdf2>
   15bc8:	|      lea 16(sp),sp
   15bcc:	|      tst.l d0
   15bce:	|  /-- ble.s 15be4 <closestPointOnLine+0x126>
		*closestX = x2;
   15bd0:	|  |   movea.l 44(sp),a0
   15bd4:	|  |   move.l 60(sp),(a0)
		*closestY = y2;
   15bd8:	|  |   movea.l 48(sp),a0
   15bdc:	|  |   move.l 64(sp),(a0)
   15be0:	+--|-- bra.w 15c94 <closestPointOnLine+0x1d6>
	} else {
		*closestX = x1 + m * xDiff;
   15be4:	|  \-> move.l 52(sp),-(sp)
   15be8:	|      jsr 1705a <__floatsidf>
   15bee:	|      addq.l #4,sp
   15bf0:	|      move.l d0,d2
   15bf2:	|      move.l d1,d3
   15bf4:	|      move.l 36(sp),-(sp)
   15bf8:	|      jsr 1705a <__floatsidf>
   15bfe:	|      addq.l #4,sp
   15c00:	|      move.l 28(sp),-(sp)
   15c04:	|      move.l 28(sp),-(sp)
   15c08:	|      move.l d1,-(sp)
   15c0a:	|      move.l d0,-(sp)
   15c0c:	|      jsr 170ea <__muldf3>
   15c12:	|      lea 16(sp),sp
   15c16:	|      move.l d1,-(sp)
   15c18:	|      move.l d0,-(sp)
   15c1a:	|      move.l d3,-(sp)
   15c1c:	|      move.l d2,-(sp)
   15c1e:	|      jsr 16e82 <__adddf3>
   15c24:	|      lea 16(sp),sp
   15c28:	|      move.l d1,-(sp)
   15c2a:	|      move.l d0,-(sp)
   15c2c:	|      jsr 16ff2 <__fixdfsi>
   15c32:	|      addq.l #8,sp
   15c34:	|      movea.l 44(sp),a0
   15c38:	|      move.l d0,(a0)
		*closestY = y1 + m * yDiff;
   15c3a:	|      move.l 56(sp),-(sp)
   15c3e:	|      jsr 1705a <__floatsidf>
   15c44:	|      addq.l #4,sp
   15c46:	|      move.l d0,d2
   15c48:	|      move.l d1,d3
   15c4a:	|      move.l 32(sp),-(sp)
   15c4e:	|      jsr 1705a <__floatsidf>
   15c54:	|      addq.l #4,sp
   15c56:	|      move.l 28(sp),-(sp)
   15c5a:	|      move.l 28(sp),-(sp)
   15c5e:	|      move.l d1,-(sp)
   15c60:	|      move.l d0,-(sp)
   15c62:	|      jsr 170ea <__muldf3>
   15c68:	|      lea 16(sp),sp
   15c6c:	|      move.l d1,-(sp)
   15c6e:	|      move.l d0,-(sp)
   15c70:	|      move.l d3,-(sp)
   15c72:	|      move.l d2,-(sp)
   15c74:	|      jsr 16e82 <__adddf3>
   15c7a:	|      lea 16(sp),sp
   15c7e:	|      move.l d1,-(sp)
   15c80:	|      move.l d0,-(sp)
   15c82:	|      jsr 16ff2 <__fixdfsi>
   15c88:	|      addq.l #8,sp
   15c8a:	|      movea.l 48(sp),a0
   15c8e:	|      move.l d0,(a0)
		return TRUE;
   15c90:	|      moveq #1,d0
   15c92:	|  /-- bra.s 15c96 <closestPointOnLine+0x1d8>
	}
	return FALSE;
   15c94:	\--|-> clr.w d0
}
   15c96:	   \-> move.l (sp)+,d2
   15c98:	       move.l (sp)+,d3
   15c9a:	       lea 32(sp),sp
   15c9e:	       rts

00015ca0 <drawFloor>:

void drawFloor() {
   15ca0:	                lea -12(sp),sp
   15ca4:	                move.l d3,-(sp)
   15ca6:	                move.l d2,-(sp)
    int i, j, nV;
    for (i = 0; i < currentFloor->numPolygons; i++) {
   15ca8:	                clr.l 16(sp)
   15cac:	   /----------- bra.w 15ec0 <drawFloor+0x220>
        nV = currentFloor->polygon[i].numVertices;
   15cb0:	/--|----------> movea.l 1a914 <currentFloor>,a0
   15cb6:	|  |            move.l 12(a0),d1
   15cba:	|  |            move.l 16(sp),d0
   15cbe:	|  |            lsl.l #3,d0
   15cc0:	|  |            movea.l d1,a0
   15cc2:	|  |            adda.l d0,a0
   15cc4:	|  |            move.l (a0),8(sp)
        if (nV > 1) {
   15cc8:	|  |            moveq #1,d0
   15cca:	|  |            cmp.l 8(sp),d0
   15cce:	|  |  /-------- bge.w 15ebc <drawFloor+0x21c>
            for (j = 1; j < nV; j++) {
   15cd2:	|  |  |         moveq #1,d0
   15cd4:	|  |  |         move.l d0,12(sp)
   15cd8:	|  |  |     /-- bra.w 15dd2 <drawFloor+0x132>
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].y);
   15cdc:	|  |  |  /--|-> movea.l 1a914 <currentFloor>,a0
   15ce2:	|  |  |  |  |   move.l 4(a0),d1
   15ce6:	|  |  |  |  |   movea.l 1a914 <currentFloor>,a0
   15cec:	|  |  |  |  |   movea.l 12(a0),a0
   15cf0:	|  |  |  |  |   move.l 16(sp),d0
   15cf4:	|  |  |  |  |   lsl.l #3,d0
   15cf6:	|  |  |  |  |   adda.l d0,a0
   15cf8:	|  |  |  |  |   movea.l 4(a0),a0
   15cfc:	|  |  |  |  |   move.l 12(sp),d0
   15d00:	|  |  |  |  |   add.l d0,d0
   15d02:	|  |  |  |  |   add.l d0,d0
   15d04:	|  |  |  |  |   adda.l d0,a0
   15d06:	|  |  |  |  |   move.l (a0),d0
   15d08:	|  |  |  |  |   lsl.l #3,d0
   15d0a:	|  |  |  |  |   movea.l d1,a0
   15d0c:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   15d0e:	|  |  |  |  |   move.l 4(a0),d2
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j]].x,
   15d12:	|  |  |  |  |   movea.l 1a914 <currentFloor>,a0
   15d18:	|  |  |  |  |   move.l 4(a0),d1
   15d1c:	|  |  |  |  |   movea.l 1a914 <currentFloor>,a0
   15d22:	|  |  |  |  |   movea.l 12(a0),a0
   15d26:	|  |  |  |  |   move.l 16(sp),d0
   15d2a:	|  |  |  |  |   lsl.l #3,d0
   15d2c:	|  |  |  |  |   adda.l d0,a0
   15d2e:	|  |  |  |  |   movea.l 4(a0),a0
   15d32:	|  |  |  |  |   move.l 12(sp),d0
   15d36:	|  |  |  |  |   add.l d0,d0
   15d38:	|  |  |  |  |   add.l d0,d0
   15d3a:	|  |  |  |  |   adda.l d0,a0
   15d3c:	|  |  |  |  |   move.l (a0),d0
   15d3e:	|  |  |  |  |   lsl.l #3,d0
   15d40:	|  |  |  |  |   movea.l d1,a0
   15d42:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   15d44:	|  |  |  |  |   movea.l (a0),a1
                         currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].y,
   15d46:	|  |  |  |  |   movea.l 1a914 <currentFloor>,a0
   15d4c:	|  |  |  |  |   move.l 4(a0),d1
   15d50:	|  |  |  |  |   movea.l 1a914 <currentFloor>,a0
   15d56:	|  |  |  |  |   movea.l 12(a0),a0
   15d5a:	|  |  |  |  |   move.l 16(sp),d0
   15d5e:	|  |  |  |  |   lsl.l #3,d0
   15d60:	|  |  |  |  |   adda.l d0,a0
   15d62:	|  |  |  |  |   movea.l 4(a0),a0
   15d66:	|  |  |  |  |   move.l 12(sp),d0
   15d6a:	|  |  |  |  |   addi.l #1073741823,d0
   15d70:	|  |  |  |  |   add.l d0,d0
   15d72:	|  |  |  |  |   add.l d0,d0
   15d74:	|  |  |  |  |   adda.l d0,a0
   15d76:	|  |  |  |  |   move.l (a0),d0
   15d78:	|  |  |  |  |   lsl.l #3,d0
   15d7a:	|  |  |  |  |   movea.l d1,a0
   15d7c:	|  |  |  |  |   adda.l d0,a0
                drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[j - 1]].x,
   15d7e:	|  |  |  |  |   move.l 4(a0),d1
   15d82:	|  |  |  |  |   movea.l 1a914 <currentFloor>,a0
   15d88:	|  |  |  |  |   move.l 4(a0),d3
   15d8c:	|  |  |  |  |   movea.l 1a914 <currentFloor>,a0
   15d92:	|  |  |  |  |   movea.l 12(a0),a0
   15d96:	|  |  |  |  |   move.l 16(sp),d0
   15d9a:	|  |  |  |  |   lsl.l #3,d0
   15d9c:	|  |  |  |  |   adda.l d0,a0
   15d9e:	|  |  |  |  |   movea.l 4(a0),a0
   15da2:	|  |  |  |  |   move.l 12(sp),d0
   15da6:	|  |  |  |  |   addi.l #1073741823,d0
   15dac:	|  |  |  |  |   add.l d0,d0
   15dae:	|  |  |  |  |   add.l d0,d0
   15db0:	|  |  |  |  |   adda.l d0,a0
   15db2:	|  |  |  |  |   move.l (a0),d0
   15db4:	|  |  |  |  |   lsl.l #3,d0
   15db6:	|  |  |  |  |   movea.l d3,a0
   15db8:	|  |  |  |  |   adda.l d0,a0
   15dba:	|  |  |  |  |   move.l (a0),d0
   15dbc:	|  |  |  |  |   move.l d2,-(sp)
   15dbe:	|  |  |  |  |   move.l a1,-(sp)
   15dc0:	|  |  |  |  |   move.l d1,-(sp)
   15dc2:	|  |  |  |  |   move.l d0,-(sp)
   15dc4:	|  |  |  |  |   jsr 374a <drawLine>
   15dca:	|  |  |  |  |   lea 16(sp),sp
            for (j = 1; j < nV; j++) {
   15dce:	|  |  |  |  |   addq.l #1,12(sp)
   15dd2:	|  |  |  |  \-> move.l 12(sp),d0
   15dd6:	|  |  |  |      cmp.l 8(sp),d0
   15dda:	|  |  |  \----- blt.w 15cdc <drawFloor+0x3c>
            }
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].y);
   15dde:	|  |  |         movea.l 1a914 <currentFloor>,a0
   15de4:	|  |  |         move.l 4(a0),d1
   15de8:	|  |  |         movea.l 1a914 <currentFloor>,a0
   15dee:	|  |  |         movea.l 12(a0),a0
   15df2:	|  |  |         move.l 16(sp),d0
   15df6:	|  |  |         lsl.l #3,d0
   15df8:	|  |  |         adda.l d0,a0
   15dfa:	|  |  |         movea.l 4(a0),a0
   15dfe:	|  |  |         move.l 8(sp),d0
   15e02:	|  |  |         addi.l #1073741823,d0
   15e08:	|  |  |         add.l d0,d0
   15e0a:	|  |  |         add.l d0,d0
   15e0c:	|  |  |         adda.l d0,a0
   15e0e:	|  |  |         move.l (a0),d0
   15e10:	|  |  |         lsl.l #3,d0
   15e12:	|  |  |         movea.l d1,a0
   15e14:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   15e16:	|  |  |         move.l 4(a0),d2
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[nV - 1]].x,
   15e1a:	|  |  |         movea.l 1a914 <currentFloor>,a0
   15e20:	|  |  |         move.l 4(a0),d1
   15e24:	|  |  |         movea.l 1a914 <currentFloor>,a0
   15e2a:	|  |  |         movea.l 12(a0),a0
   15e2e:	|  |  |         move.l 16(sp),d0
   15e32:	|  |  |         lsl.l #3,d0
   15e34:	|  |  |         adda.l d0,a0
   15e36:	|  |  |         movea.l 4(a0),a0
   15e3a:	|  |  |         move.l 8(sp),d0
   15e3e:	|  |  |         addi.l #1073741823,d0
   15e44:	|  |  |         add.l d0,d0
   15e46:	|  |  |         add.l d0,d0
   15e48:	|  |  |         adda.l d0,a0
   15e4a:	|  |  |         move.l (a0),d0
   15e4c:	|  |  |         lsl.l #3,d0
   15e4e:	|  |  |         movea.l d1,a0
   15e50:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   15e52:	|  |  |         movea.l (a0),a1
                     currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].y,
   15e54:	|  |  |         movea.l 1a914 <currentFloor>,a0
   15e5a:	|  |  |         move.l 4(a0),d1
   15e5e:	|  |  |         movea.l 1a914 <currentFloor>,a0
   15e64:	|  |  |         movea.l 12(a0),a0
   15e68:	|  |  |         move.l 16(sp),d0
   15e6c:	|  |  |         lsl.l #3,d0
   15e6e:	|  |  |         adda.l d0,a0
   15e70:	|  |  |         movea.l 4(a0),a0
   15e74:	|  |  |         move.l (a0),d0
   15e76:	|  |  |         lsl.l #3,d0
   15e78:	|  |  |         movea.l d1,a0
   15e7a:	|  |  |         adda.l d0,a0
            drawLine(currentFloor->vertex[currentFloor->polygon[i].vertexID[0]].x,
   15e7c:	|  |  |         move.l 4(a0),d1
   15e80:	|  |  |         movea.l 1a914 <currentFloor>,a0
   15e86:	|  |  |         move.l 4(a0),d3
   15e8a:	|  |  |         movea.l 1a914 <currentFloor>,a0
   15e90:	|  |  |         movea.l 12(a0),a0
   15e94:	|  |  |         move.l 16(sp),d0
   15e98:	|  |  |         lsl.l #3,d0
   15e9a:	|  |  |         adda.l d0,a0
   15e9c:	|  |  |         movea.l 4(a0),a0
   15ea0:	|  |  |         move.l (a0),d0
   15ea2:	|  |  |         lsl.l #3,d0
   15ea4:	|  |  |         movea.l d3,a0
   15ea6:	|  |  |         adda.l d0,a0
   15ea8:	|  |  |         move.l (a0),d0
   15eaa:	|  |  |         move.l d2,-(sp)
   15eac:	|  |  |         move.l a1,-(sp)
   15eae:	|  |  |         move.l d1,-(sp)
   15eb0:	|  |  |         move.l d0,-(sp)
   15eb2:	|  |  |         jsr 374a <drawLine>
   15eb8:	|  |  |         lea 16(sp),sp
    for (i = 0; i < currentFloor->numPolygons; i++) {
   15ebc:	|  |  \-------> addq.l #1,16(sp)
   15ec0:	|  \----------> movea.l 1a914 <currentFloor>,a0
   15ec6:	|               move.l 8(a0),d0
   15eca:	|               cmp.l 16(sp),d0
   15ece:	\-------------- bgt.w 15cb0 <drawFloor+0x10>
        }
    }
}
   15ed2:	                nop
   15ed4:	                nop
   15ed6:	                move.l (sp)+,d2
   15ed8:	                move.l (sp)+,d3
   15eda:	                lea 12(sp),sp
   15ede:	                rts

00015ee0 <getMatchingCorners>:

BOOL getMatchingCorners(struct floorPolygon *a, struct floorPolygon *b, int *cornerA, int *cornerB) {
   15ee0:	                      lea -12(sp),sp
    int sharedVertices = 0;
   15ee4:	                      clr.l 8(sp)
    int i, j;

    for (i = 0; i < a->numVertices; i++) {
   15ee8:	                      clr.l 4(sp)
   15eec:	   /----------------- bra.w 15f7e <getMatchingCorners+0x9e>
        for (j = 0; j < b->numVertices; j++) {
   15ef0:	/--|----------------> clr.l (sp)
   15ef2:	|  |     /----------- bra.s 15f6e <getMatchingCorners+0x8e>
            if (a->vertexID[i] == b->vertexID[j]) {
   15ef4:	|  |  /--|----------> movea.l 16(sp),a0
   15ef8:	|  |  |  |            move.l 4(a0),d1
   15efc:	|  |  |  |            move.l 4(sp),d0
   15f00:	|  |  |  |            add.l d0,d0
   15f02:	|  |  |  |            add.l d0,d0
   15f04:	|  |  |  |            movea.l d1,a0
   15f06:	|  |  |  |            adda.l d0,a0
   15f08:	|  |  |  |            move.l (a0),d1
   15f0a:	|  |  |  |            movea.l 20(sp),a0
   15f0e:	|  |  |  |            movea.l 4(a0),a0
   15f12:	|  |  |  |            move.l (sp),d0
   15f14:	|  |  |  |            add.l d0,d0
   15f16:	|  |  |  |            add.l d0,d0
   15f18:	|  |  |  |            adda.l d0,a0
   15f1a:	|  |  |  |            move.l (a0),d0
   15f1c:	|  |  |  |            cmp.l d1,d0
   15f1e:	|  |  |  |  /-------- bne.s 15f6c <getMatchingCorners+0x8c>
                if (sharedVertices++) {
   15f20:	|  |  |  |  |         move.l 8(sp),d0
   15f24:	|  |  |  |  |         move.l d0,d1
   15f26:	|  |  |  |  |         addq.l #1,d1
   15f28:	|  |  |  |  |         move.l d1,8(sp)
   15f2c:	|  |  |  |  |         tst.l d0
   15f2e:	|  |  |  |  |     /-- beq.s 15f50 <getMatchingCorners+0x70>
                    *cornerB = a->vertexID[i];
   15f30:	|  |  |  |  |     |   movea.l 16(sp),a0
   15f34:	|  |  |  |  |     |   move.l 4(a0),d1
   15f38:	|  |  |  |  |     |   move.l 4(sp),d0
   15f3c:	|  |  |  |  |     |   add.l d0,d0
   15f3e:	|  |  |  |  |     |   add.l d0,d0
   15f40:	|  |  |  |  |     |   movea.l d1,a0
   15f42:	|  |  |  |  |     |   adda.l d0,a0
   15f44:	|  |  |  |  |     |   move.l (a0),d0
   15f46:	|  |  |  |  |     |   movea.l 28(sp),a0
   15f4a:	|  |  |  |  |     |   move.l d0,(a0)
                    return TRUE;
   15f4c:	|  |  |  |  |     |   moveq #1,d0
   15f4e:	|  |  |  |  |  /--|-- bra.s 15f8e <getMatchingCorners+0xae>
                } else {
                    *cornerA = a->vertexID[i];
   15f50:	|  |  |  |  |  |  \-> movea.l 16(sp),a0
   15f54:	|  |  |  |  |  |      move.l 4(a0),d1
   15f58:	|  |  |  |  |  |      move.l 4(sp),d0
   15f5c:	|  |  |  |  |  |      add.l d0,d0
   15f5e:	|  |  |  |  |  |      add.l d0,d0
   15f60:	|  |  |  |  |  |      movea.l d1,a0
   15f62:	|  |  |  |  |  |      adda.l d0,a0
   15f64:	|  |  |  |  |  |      move.l (a0),d0
   15f66:	|  |  |  |  |  |      movea.l 24(sp),a0
   15f6a:	|  |  |  |  |  |      move.l d0,(a0)
        for (j = 0; j < b->numVertices; j++) {
   15f6c:	|  |  |  |  \--|----> addq.l #1,(sp)
   15f6e:	|  |  |  \-----|----> movea.l 20(sp),a0
   15f72:	|  |  |        |      move.l (a0),d0
   15f74:	|  |  |        |      cmp.l (sp),d0
   15f76:	|  |  \--------|----- bgt.w 15ef4 <getMatchingCorners+0x14>
    for (i = 0; i < a->numVertices; i++) {
   15f7a:	|  |           |      addq.l #1,4(sp)
   15f7e:	|  \-----------|----> movea.l 16(sp),a0
   15f82:	|              |      move.l (a0),d0
   15f84:	|              |      cmp.l 4(sp),d0
   15f88:	\--------------|----- bgt.w 15ef0 <getMatchingCorners+0x10>
                }
            }
        }
    }

    return FALSE;
   15f8c:	               |      clr.w d0
}
   15f8e:	               \----> lea 12(sp),sp
   15f92:	                      rts

00015f94 <noFloor>:



void noFloor () {
	currentFloor -> numPolygons = 0;
   15f94:	movea.l 1a914 <currentFloor>,a0
   15f9a:	clr.l 8(a0)
	currentFloor -> polygon = NULL;
   15f9e:	movea.l 1a914 <currentFloor>,a0
   15fa4:	clr.l 12(a0)
	currentFloor -> vertex = NULL;
   15fa8:	movea.l 1a914 <currentFloor>,a0
   15fae:	clr.l 4(a0)
	currentFloor -> matrix = NULL;
   15fb2:	movea.l 1a914 <currentFloor>,a0
   15fb8:	clr.l 16(a0)
}
   15fbc:	nop
   15fbe:	rts

00015fc0 <inFloor>:

int inFloor (int x, int y) {
   15fc0:	          subq.l #8,sp
	int i, r = -1;
   15fc2:	          moveq #-1,d0
   15fc4:	          move.l d0,(sp)

	for (i = 0; i < currentFloor -> numPolygons; i ++)
   15fc6:	          clr.l 4(sp)
   15fca:	   /----- bra.s 15ffe <inFloor+0x3e>
		if (pointInFloorPolygon (&currentFloor -> polygon[i], x, y))
   15fcc:	/--|----> movea.l 1a914 <currentFloor>,a0
   15fd2:	|  |      move.l 12(a0),d1
   15fd6:	|  |      move.l 4(sp),d0
   15fda:	|  |      lsl.l #3,d0
   15fdc:	|  |      add.l d1,d0
   15fde:	|  |      move.l 16(sp),-(sp)
   15fe2:	|  |      move.l 16(sp),-(sp)
   15fe6:	|  |      move.l d0,-(sp)
   15fe8:	|  |      jsr 161ca <pointInFloorPolygon>
   15fee:	|  |      lea 12(sp),sp
   15ff2:	|  |      tst.w d0
   15ff4:	|  |  /-- beq.s 15ffa <inFloor+0x3a>
			r = i;
   15ff6:	|  |  |   move.l 4(sp),(sp)
	for (i = 0; i < currentFloor -> numPolygons; i ++)
   15ffa:	|  |  \-> addq.l #1,4(sp)
   15ffe:	|  \----> movea.l 1a914 <currentFloor>,a0
   16004:	|         move.l 8(a0),d0
   16008:	|         cmp.l 4(sp),d0
   1600c:	\-------- bgt.s 15fcc <inFloor+0xc>

	return r;
   1600e:	          move.l (sp),d0
}
   16010:	          addq.l #8,sp
   16012:	          rts

00016014 <initFloor>:

BOOL initFloor () {
   16014:	       lea -12(sp),sp
   16018:	       move.l a6,-(sp)
	currentFloor = AllocVec(sizeof(struct flor), MEMF_ANY);
   1601a:	       moveq #20,d0
   1601c:	       move.l d0,12(sp)
   16020:	       clr.l 8(sp)
   16024:	       move.l 1a7a4 <SysBase>,d0
   1602a:	       movea.l d0,a6
   1602c:	       move.l 12(sp),d0
   16030:	       move.l 8(sp),d1
   16034:	       jsr -684(a6)
   16038:	       move.l d0,4(sp)
   1603c:	       move.l 4(sp),d0
   16040:	       move.l d0,1a914 <currentFloor>

    if(currentFloor == 0) {
   16046:	       move.l 1a914 <currentFloor>,d0
   1604c:	/----- bne.s 16060 <initFloor+0x4c>
        KPrintF("initFloor: Could not initialize Mem");
   1604e:	|      pea 19b4e <main_sludge.c.0270f7ba+0x312>
   16054:	|      jsr 16c5e <KPrintF>
   1605a:	|      addq.l #4,sp
        return FALSE;
   1605c:	|      clr.w d0
   1605e:	|  /-- bra.s 16068 <initFloor+0x54>
    }

	noFloor ();
   16060:	\--|-> jsr 15f94 <noFloor>
	return TRUE;
   16066:	   |   moveq #1,d0
}
   16068:	   \-> movea.l (sp)+,a6
   1606a:	       lea 12(sp),sp
   1606e:	       rts

00016070 <killFloor>:

void killFloor () {
   16070:	       lea -24(sp),sp
   16074:	       move.l a6,-(sp)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   16076:	       clr.l 24(sp)
   1607a:	   /-- bra.s 160d4 <killFloor+0x64>
		FreeVec(currentFloor -> polygon[i].vertexID);
   1607c:	/--|-> movea.l 1a914 <currentFloor>,a0
   16082:	|  |   move.l 12(a0),d1
   16086:	|  |   move.l 24(sp),d0
   1608a:	|  |   lsl.l #3,d0
   1608c:	|  |   movea.l d1,a0
   1608e:	|  |   adda.l d0,a0
   16090:	|  |   move.l 4(a0),8(sp)
   16096:	|  |   move.l 1a7a4 <SysBase>,d0
   1609c:	|  |   movea.l d0,a6
   1609e:	|  |   movea.l 8(sp),a1
   160a2:	|  |   jsr -690(a6)
		FreeVec(currentFloor -> matrix[i]);
   160a6:	|  |   movea.l 1a914 <currentFloor>,a0
   160ac:	|  |   move.l 16(a0),d1
   160b0:	|  |   move.l 24(sp),d0
   160b4:	|  |   add.l d0,d0
   160b6:	|  |   add.l d0,d0
   160b8:	|  |   movea.l d1,a0
   160ba:	|  |   adda.l d0,a0
   160bc:	|  |   move.l (a0),4(sp)
   160c0:	|  |   move.l 1a7a4 <SysBase>,d0
   160c6:	|  |   movea.l d0,a6
   160c8:	|  |   movea.l 4(sp),a1
   160cc:	|  |   jsr -690(a6)
	for (int i = 0; i < currentFloor -> numPolygons; i ++) {
   160d0:	|  |   addq.l #1,24(sp)
   160d4:	|  \-> movea.l 1a914 <currentFloor>,a0
   160da:	|      move.l 8(a0),d0
   160de:	|      cmp.l 24(sp),d0
   160e2:	\----- bgt.s 1607c <killFloor+0xc>
	}
	FreeVec(currentFloor -> polygon);
   160e4:	       movea.l 1a914 <currentFloor>,a0
   160ea:	       move.l 12(a0),20(sp)
   160f0:	       move.l 1a7a4 <SysBase>,d0
   160f6:	       movea.l d0,a6
   160f8:	       movea.l 20(sp),a1
   160fc:	       jsr -690(a6)
	currentFloor -> polygon = NULL;
   16100:	       movea.l 1a914 <currentFloor>,a0
   16106:	       clr.l 12(a0)
	FreeVec(currentFloor -> vertex);
   1610a:	       movea.l 1a914 <currentFloor>,a0
   16110:	       move.l 4(a0),16(sp)
   16116:	       move.l 1a7a4 <SysBase>,d0
   1611c:	       movea.l d0,a6
   1611e:	       movea.l 16(sp),a1
   16122:	       jsr -690(a6)
	currentFloor -> vertex = NULL;
   16126:	       movea.l 1a914 <currentFloor>,a0
   1612c:	       clr.l 4(a0)
	FreeVec(currentFloor -> matrix);
   16130:	       movea.l 1a914 <currentFloor>,a0
   16136:	       move.l 16(a0),12(sp)
   1613c:	       move.l 1a7a4 <SysBase>,d0
   16142:	       movea.l d0,a6
   16144:	       movea.l 12(sp),a1
   16148:	       jsr -690(a6)
	currentFloor -> matrix = NULL;
   1614c:	       movea.l 1a914 <currentFloor>,a0
   16152:	       clr.l 16(a0)
}
   16156:	       nop
   16158:	       movea.l (sp)+,a6
   1615a:	       lea 24(sp),sp
   1615e:	       rts

00016160 <polysShareSide>:

BOOL polysShareSide (struct floorPolygon a, struct floorPolygon b) {
   16160:	                   lea -12(sp),sp
	int sharedVertices = 0;
   16164:	                   clr.l 8(sp)
	int i, j;

	for (i = 0; i < a.numVertices; i ++) {
   16168:	                   clr.l 4(sp)
   1616c:	   /-------------- bra.s 161b8 <polysShareSide+0x58>
		for (j = 0; j < b.numVertices; j ++) {
   1616e:	/--|-------------> clr.l (sp)
   16170:	|  |     /-------- bra.s 161ac <polysShareSide+0x4c>
			if (a.vertexID[i] == b.vertexID[j]) {
   16172:	|  |  /--|-------> move.l 20(sp),d1
   16176:	|  |  |  |         move.l 4(sp),d0
   1617a:	|  |  |  |         add.l d0,d0
   1617c:	|  |  |  |         add.l d0,d0
   1617e:	|  |  |  |         movea.l d1,a0
   16180:	|  |  |  |         adda.l d0,a0
   16182:	|  |  |  |         move.l (a0),d1
   16184:	|  |  |  |         movea.l 28(sp),a0
   16188:	|  |  |  |         move.l (sp),d0
   1618a:	|  |  |  |         add.l d0,d0
   1618c:	|  |  |  |         add.l d0,d0
   1618e:	|  |  |  |         adda.l d0,a0
   16190:	|  |  |  |         move.l (a0),d0
   16192:	|  |  |  |         cmp.l d1,d0
   16194:	|  |  |  |     /-- bne.s 161aa <polysShareSide+0x4a>
				if (sharedVertices ++) return TRUE;
   16196:	|  |  |  |     |   move.l 8(sp),d0
   1619a:	|  |  |  |     |   move.l d0,d1
   1619c:	|  |  |  |     |   addq.l #1,d1
   1619e:	|  |  |  |     |   move.l d1,8(sp)
   161a2:	|  |  |  |     |   tst.l d0
   161a4:	|  |  |  |     +-- beq.s 161aa <polysShareSide+0x4a>
   161a6:	|  |  |  |     |   moveq #1,d0
   161a8:	|  |  |  |  /--|-- bra.s 161c4 <polysShareSide+0x64>
		for (j = 0; j < b.numVertices; j ++) {
   161aa:	|  |  |  |  |  \-> addq.l #1,(sp)
   161ac:	|  |  |  \--|----> move.l 24(sp),d0
   161b0:	|  |  |     |      cmp.l (sp),d0
   161b2:	|  |  \-----|----- bgt.s 16172 <polysShareSide+0x12>
	for (i = 0; i < a.numVertices; i ++) {
   161b4:	|  |        |      addq.l #1,4(sp)
   161b8:	|  \--------|----> move.l 16(sp),d0
   161bc:	|           |      cmp.l 4(sp),d0
   161c0:	\-----------|----- bgt.s 1616e <polysShareSide+0xe>
			}
		}
	}

	return FALSE;
   161c2:	            |      clr.w d0
}
   161c4:	            \----> lea 12(sp),sp
   161c8:	                   rts

000161ca <pointInFloorPolygon>:

BOOL pointInFloorPolygon (struct floorPolygon * floorPoly, int x, int y) {
   161ca:	             lea -28(sp),sp
   161ce:	             move.l d3,-(sp)
   161d0:	             move.l d2,-(sp)
	int i = 0, j, c = 0;
   161d2:	             clr.l 32(sp)
   161d6:	             clr.l 24(sp)
	float xp_i, yp_i;
	float xp_j, yp_j;

	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   161da:	             movea.l 40(sp),a0
   161de:	             move.l (a0),d0
   161e0:	             move.l d0,d1
   161e2:	             subq.l #1,d1
   161e4:	             move.l d1,28(sp)
   161e8:	   /-------- bra.w 163e2 <pointInFloorPolygon+0x218>

		xp_i = currentFloor->vertex[floorPoly->vertexID[i]].x;
   161ec:	/--|-------> movea.l 1a914 <currentFloor>,a0
   161f2:	|  |         move.l 4(a0),d1
   161f6:	|  |         movea.l 40(sp),a0
   161fa:	|  |         movea.l 4(a0),a0
   161fe:	|  |         move.l 32(sp),d0
   16202:	|  |         add.l d0,d0
   16204:	|  |         add.l d0,d0
   16206:	|  |         adda.l d0,a0
   16208:	|  |         move.l (a0),d0
   1620a:	|  |         lsl.l #3,d0
   1620c:	|  |         movea.l d1,a0
   1620e:	|  |         adda.l d0,a0
   16210:	|  |         move.l (a0),d0
   16212:	|  |         move.l d0,-(sp)
   16214:	|  |         jsr 1709a <__floatsisf>
   1621a:	|  |         addq.l #4,sp
   1621c:	|  |         move.l d0,20(sp)
		yp_i = currentFloor->vertex[floorPoly->vertexID[i]].y;
   16220:	|  |         movea.l 1a914 <currentFloor>,a0
   16226:	|  |         move.l 4(a0),d1
   1622a:	|  |         movea.l 40(sp),a0
   1622e:	|  |         movea.l 4(a0),a0
   16232:	|  |         move.l 32(sp),d0
   16236:	|  |         add.l d0,d0
   16238:	|  |         add.l d0,d0
   1623a:	|  |         adda.l d0,a0
   1623c:	|  |         move.l (a0),d0
   1623e:	|  |         lsl.l #3,d0
   16240:	|  |         movea.l d1,a0
   16242:	|  |         adda.l d0,a0
   16244:	|  |         move.l 4(a0),d0
   16248:	|  |         move.l d0,-(sp)
   1624a:	|  |         jsr 1709a <__floatsisf>
   16250:	|  |         addq.l #4,sp
   16252:	|  |         move.l d0,16(sp)
		xp_j = currentFloor->vertex[floorPoly->vertexID[j]].x;
   16256:	|  |         movea.l 1a914 <currentFloor>,a0
   1625c:	|  |         move.l 4(a0),d1
   16260:	|  |         movea.l 40(sp),a0
   16264:	|  |         movea.l 4(a0),a0
   16268:	|  |         move.l 28(sp),d0
   1626c:	|  |         add.l d0,d0
   1626e:	|  |         add.l d0,d0
   16270:	|  |         adda.l d0,a0
   16272:	|  |         move.l (a0),d0
   16274:	|  |         lsl.l #3,d0
   16276:	|  |         movea.l d1,a0
   16278:	|  |         adda.l d0,a0
   1627a:	|  |         move.l (a0),d0
   1627c:	|  |         move.l d0,-(sp)
   1627e:	|  |         jsr 1709a <__floatsisf>
   16284:	|  |         addq.l #4,sp
   16286:	|  |         move.l d0,12(sp)
		yp_j = currentFloor->vertex[floorPoly->vertexID[j]].y;
   1628a:	|  |         movea.l 1a914 <currentFloor>,a0
   16290:	|  |         move.l 4(a0),d1
   16294:	|  |         movea.l 40(sp),a0
   16298:	|  |         movea.l 4(a0),a0
   1629c:	|  |         move.l 28(sp),d0
   162a0:	|  |         add.l d0,d0
   162a2:	|  |         add.l d0,d0
   162a4:	|  |         adda.l d0,a0
   162a6:	|  |         move.l (a0),d0
   162a8:	|  |         lsl.l #3,d0
   162aa:	|  |         movea.l d1,a0
   162ac:	|  |         adda.l d0,a0
   162ae:	|  |         move.l 4(a0),d0
   162b2:	|  |         move.l d0,-(sp)
   162b4:	|  |         jsr 1709a <__floatsisf>
   162ba:	|  |         addq.l #4,sp
   162bc:	|  |         move.l d0,8(sp)

		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   162c0:	|  |         move.l 48(sp),-(sp)
   162c4:	|  |         jsr 1709a <__floatsisf>
   162ca:	|  |         addq.l #4,sp
   162cc:	|  |         move.l d0,-(sp)
   162ce:	|  |         move.l 20(sp),-(sp)
   162d2:	|  |         jsr 1723c <__lesf2>
   162d8:	|  |         addq.l #8,sp
   162da:	|  |         tst.l d0
   162dc:	|  |     /-- bgt.s 162fc <pointInFloorPolygon+0x132>
   162de:	|  |     |   move.l 48(sp),-(sp)
   162e2:	|  |     |   jsr 1709a <__floatsisf>
   162e8:	|  |     |   addq.l #4,sp
   162ea:	|  |     |   move.l d0,-(sp)
   162ec:	|  |     |   move.l 12(sp),-(sp)
   162f0:	|  |     |   jsr 17206 <__gtsf2>
   162f6:	|  |     |   addq.l #8,sp
   162f8:	|  |     |   tst.l d0
   162fa:	|  |  /--|-- bgt.s 1633c <pointInFloorPolygon+0x172>
   162fc:	|  |  |  \-> move.l 48(sp),-(sp)
   16300:	|  |  |      jsr 1709a <__floatsisf>
   16306:	|  |  |      addq.l #4,sp
   16308:	|  |  |      move.l d0,-(sp)
   1630a:	|  |  |      move.l 12(sp),-(sp)
   1630e:	|  |  |      jsr 1723c <__lesf2>
   16314:	|  |  |      addq.l #8,sp
   16316:	|  |  |      tst.l d0
   16318:	|  |  |  /-- bgt.w 163d2 <pointInFloorPolygon+0x208>
   1631c:	|  |  |  |   move.l 48(sp),-(sp)
   16320:	|  |  |  |   jsr 1709a <__floatsisf>
   16326:	|  |  |  |   addq.l #4,sp
   16328:	|  |  |  |   move.l d0,-(sp)
   1632a:	|  |  |  |   move.l 20(sp),-(sp)
   1632e:	|  |  |  |   jsr 17206 <__gtsf2>
   16334:	|  |  |  |   addq.l #8,sp
   16336:	|  |  |  |   tst.l d0
   16338:	|  |  |  +-- ble.w 163d2 <pointInFloorPolygon+0x208>
			(x < (xp_j - xp_i) * (y - yp_i) / (yp_j - yp_i) + xp_i)) {
   1633c:	|  |  \--|-> move.l 44(sp),-(sp)
   16340:	|  |     |   jsr 1709a <__floatsisf>
   16346:	|  |     |   addq.l #4,sp
   16348:	|  |     |   move.l d0,d3
   1634a:	|  |     |   move.l 20(sp),-(sp)
   1634e:	|  |     |   move.l 16(sp),-(sp)
   16352:	|  |     |   jsr 1738e <__subsf3>
   16358:	|  |     |   addq.l #8,sp
   1635a:	|  |     |   move.l d0,d2
   1635c:	|  |     |   move.l 48(sp),-(sp)
   16360:	|  |     |   jsr 1709a <__floatsisf>
   16366:	|  |     |   addq.l #4,sp
   16368:	|  |     |   move.l 16(sp),-(sp)
   1636c:	|  |     |   move.l d0,-(sp)
   1636e:	|  |     |   jsr 1738e <__subsf3>
   16374:	|  |     |   addq.l #8,sp
   16376:	|  |     |   move.l d0,-(sp)
   16378:	|  |     |   move.l d2,-(sp)
   1637a:	|  |     |   jsr 1714c <__mulsf3>
   16380:	|  |     |   addq.l #8,sp
   16382:	|  |     |   move.l d0,d2
   16384:	|  |     |   move.l 16(sp),-(sp)
   16388:	|  |     |   move.l 12(sp),-(sp)
   1638c:	|  |     |   jsr 1738e <__subsf3>
   16392:	|  |     |   addq.l #8,sp
   16394:	|  |     |   move.l d0,-(sp)
   16396:	|  |     |   move.l d2,-(sp)
   16398:	|  |     |   jsr 16f46 <__divsf3>
   1639e:	|  |     |   addq.l #8,sp
   163a0:	|  |     |   move.l 20(sp),-(sp)
   163a4:	|  |     |   move.l d0,-(sp)
   163a6:	|  |     |   jsr 16e4c <__addsf3>
   163ac:	|  |     |   addq.l #8,sp
		if ((((yp_i <= y) && (y < yp_j)) || ((yp_j <= y) && (y < yp_i))) &&
   163ae:	|  |     |   move.l d0,-(sp)
   163b0:	|  |     |   move.l d3,-(sp)
   163b2:	|  |     |   jsr 172c0 <__ltsf2>
   163b8:	|  |     |   addq.l #8,sp
   163ba:	|  |     |   tst.l d0
   163bc:	|  |     +-- bge.s 163d2 <pointInFloorPolygon+0x208>

			c = !c;
   163be:	|  |     |   tst.l 24(sp)
   163c2:	|  |     |   seq d0
   163c4:	|  |     |   neg.b d0
   163c6:	|  |     |   move.b d0,d0
   163c8:	|  |     |   andi.l #255,d0
   163ce:	|  |     |   move.l d0,24(sp)
	for (j = floorPoly->numVertices - 1; i < floorPoly->numVertices; j = i++) {
   163d2:	|  |     \-> move.l 32(sp),d0
   163d6:	|  |         move.l d0,d1
   163d8:	|  |         addq.l #1,d1
   163da:	|  |         move.l d1,32(sp)
   163de:	|  |         move.l d0,28(sp)
   163e2:	|  \-------> movea.l 40(sp),a0
   163e6:	|            move.l (a0),d0
   163e8:	|            cmp.l 32(sp),d0
   163ec:	\----------- bgt.w 161ec <pointInFloorPolygon+0x22>
		}
	}
	return c ? TRUE : FALSE;
   163f0:	             tst.l 24(sp)
   163f4:	             sne d0
   163f6:	             neg.b d0
   163f8:	             move.b d0,d0
   163fa:	             andi.w #255,d0
}
   163fe:	             move.l (sp)+,d2
   16400:	             move.l (sp)+,d3
   16402:	             lea 28(sp),sp
   16406:	             rts

00016408 <setFloor>:

BOOL setFloor (int fileNum) {
   16408:	                               lea -132(sp),sp
   1640c:	                               move.l a6,-(sp)
   1640e:	                               move.l a2,-(sp)
	int i, j;

	killFloor ();
   16410:	                               jsr 16070 <killFloor>

	if (! openFileFromNum (fileNum)) return FALSE;
   16416:	                               move.l 144(sp),-(sp)
   1641a:	                               jsr 6658 <openFileFromNum>
   16420:	                               addq.l #4,sp
   16422:	                               tst.l d0
   16424:	                           /-- bne.s 1642c <setFloor+0x24>
   16426:	                           |   clr.w d0
   16428:	/--------------------------|-- bra.w 16b78 <setFloor+0x770>

	// Find out how many polygons there are and reserve memory

	currentFloor -> originalNum = fileNum;
   1642c:	|                          \-> movea.l 1a914 <currentFloor>,a0
   16432:	|                              move.l 144(sp),(a0)
	currentFloor -> numPolygons = FGetC (bigDataFile);
   16436:	|                              move.l 1a78c <bigDataFile>,118(sp)
   1643e:	|                              move.l 1a7ac <DOSBase>,d0
   16444:	|                              movea.l d0,a6
   16446:	|                              move.l 118(sp),d1
   1644a:	|                              jsr -306(a6)
   1644e:	|                              move.l d0,114(sp)
   16452:	|                              move.l 114(sp),d0
   16456:	|                              movea.l 1a914 <currentFloor>,a0
   1645c:	|                              move.l d0,8(a0)
	currentFloor -> polygon = AllocVec(  sizeof( struct floorPolygon) * currentFloor -> numPolygons, MEMF_ANY);
   16460:	|                              movea.l 1a914 <currentFloor>,a0
   16466:	|                              move.l 8(a0),d0
   1646a:	|                              lsl.l #3,d0
   1646c:	|                              move.l d0,110(sp)
   16470:	|                              clr.l 106(sp)
   16474:	|                              move.l 1a7a4 <SysBase>,d0
   1647a:	|                              movea.l d0,a6
   1647c:	|                              move.l 110(sp),d0
   16480:	|                              move.l 106(sp),d1
   16484:	|                              jsr -684(a6)
   16488:	|                              move.l d0,102(sp)
   1648c:	|                              move.l 102(sp),d0
   16490:	|                              movea.l 1a914 <currentFloor>,a0
   16496:	|                              move.l d0,12(a0)
	if (!(currentFloor -> polygon)) {
   1649a:	|                              movea.l 1a914 <currentFloor>,a0
   164a0:	|                              move.l 12(a0),d0
   164a4:	|                          /-- bne.s 164ba <setFloor+0xb2>
		KPrintF("setFloor: Cannot allocate memory");
   164a6:	|                          |   pea 19b72 <main_sludge.c.0270f7ba+0x336>
   164ac:	|                          |   jsr 16c5e <KPrintF>
   164b2:	|                          |   addq.l #4,sp
		return FALSE;
   164b4:	|                          |   clr.w d0
   164b6:	+--------------------------|-- bra.w 16b78 <setFloor+0x770>
	}

	// Read in each polygon

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   164ba:	|                          \-> clr.l 136(sp)
   164be:	|                    /-------- bra.w 165d6 <setFloor+0x1ce>

		// Find out how many vertex IDs there are and reserve memory

		currentFloor -> polygon[i].numVertices = FGetC (bigDataFile);
   164c2:	|                 /--|-------> move.l 1a78c <bigDataFile>,26(sp)
   164ca:	|                 |  |         move.l 1a7ac <DOSBase>,d0
   164d0:	|                 |  |         movea.l d0,a6
   164d2:	|                 |  |         move.l 26(sp),d1
   164d6:	|                 |  |         jsr -306(a6)
   164da:	|                 |  |         move.l d0,22(sp)
   164de:	|                 |  |         move.l 22(sp),d1
   164e2:	|                 |  |         movea.l 1a914 <currentFloor>,a0
   164e8:	|                 |  |         movea.l 12(a0),a0
   164ec:	|                 |  |         move.l 136(sp),d0
   164f0:	|                 |  |         lsl.l #3,d0
   164f2:	|                 |  |         adda.l d0,a0
   164f4:	|                 |  |         move.l d1,(a0)
		currentFloor -> polygon[i].vertexID = AllocVec(sizeof (int) * currentFloor -> polygon[i].numVertices, MEMF_ANY);
   164f6:	|                 |  |         movea.l 1a914 <currentFloor>,a0
   164fc:	|                 |  |         move.l 12(a0),d1
   16500:	|                 |  |         move.l 136(sp),d0
   16504:	|                 |  |         lsl.l #3,d0
   16506:	|                 |  |         movea.l d1,a0
   16508:	|                 |  |         adda.l d0,a0
   1650a:	|                 |  |         move.l (a0),d0
   1650c:	|                 |  |         add.l d0,d0
   1650e:	|                 |  |         add.l d0,d0
   16510:	|                 |  |         move.l d0,18(sp)
   16514:	|                 |  |         clr.l 14(sp)
   16518:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   1651e:	|                 |  |         movea.l d0,a6
   16520:	|                 |  |         move.l 18(sp),d0
   16524:	|                 |  |         move.l 14(sp),d1
   16528:	|                 |  |         jsr -684(a6)
   1652c:	|                 |  |         move.l d0,10(sp)
   16530:	|                 |  |         move.l 10(sp),d1
   16534:	|                 |  |         movea.l 1a914 <currentFloor>,a0
   1653a:	|                 |  |         movea.l 12(a0),a0
   1653e:	|                 |  |         move.l 136(sp),d0
   16542:	|                 |  |         lsl.l #3,d0
   16544:	|                 |  |         adda.l d0,a0
   16546:	|                 |  |         move.l d1,4(a0)
		if (!(currentFloor -> polygon[i].vertexID)) {
   1654a:	|                 |  |         movea.l 1a914 <currentFloor>,a0
   16550:	|                 |  |         move.l 12(a0),d1
   16554:	|                 |  |         move.l 136(sp),d0
   16558:	|                 |  |         lsl.l #3,d0
   1655a:	|                 |  |         movea.l d1,a0
   1655c:	|                 |  |         adda.l d0,a0
   1655e:	|                 |  |         move.l 4(a0),d0
   16562:	|                 |  |     /-- bne.s 16578 <setFloor+0x170>
			KPrintF("setFloor: Cannot allocate memory");
   16564:	|                 |  |     |   pea 19b72 <main_sludge.c.0270f7ba+0x336>
   1656a:	|                 |  |     |   jsr 16c5e <KPrintF>
   16570:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16572:	|                 |  |     |   clr.w d0
   16574:	+-----------------|--|-----|-- bra.w 16b78 <setFloor+0x770>
		}

		// Read in each vertex ID

		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   16578:	|                 |  |     \-> clr.l 132(sp)
   1657c:	|                 |  |     /-- bra.s 165b6 <setFloor+0x1ae>
			currentFloor -> polygon[i].vertexID[j] = get2bytes (bigDataFile);
   1657e:	|                 |  |  /--|-> move.l 1a78c <bigDataFile>,d1
   16584:	|                 |  |  |  |   movea.l 1a914 <currentFloor>,a0
   1658a:	|                 |  |  |  |   movea.l 12(a0),a0
   1658e:	|                 |  |  |  |   move.l 136(sp),d0
   16592:	|                 |  |  |  |   lsl.l #3,d0
   16594:	|                 |  |  |  |   adda.l d0,a0
   16596:	|                 |  |  |  |   movea.l 4(a0),a0
   1659a:	|                 |  |  |  |   move.l 132(sp),d0
   1659e:	|                 |  |  |  |   add.l d0,d0
   165a0:	|                 |  |  |  |   add.l d0,d0
   165a2:	|                 |  |  |  |   lea (0,a0,d0.l),a2
   165a6:	|                 |  |  |  |   move.l d1,-(sp)
   165a8:	|                 |  |  |  |   jsr 6bc <get2bytes>
   165ae:	|                 |  |  |  |   addq.l #4,sp
   165b0:	|                 |  |  |  |   move.l d0,(a2)
		for (j = 0; j < currentFloor -> polygon[i].numVertices; j ++) {
   165b2:	|                 |  |  |  |   addq.l #1,132(sp)
   165b6:	|                 |  |  |  \-> movea.l 1a914 <currentFloor>,a0
   165bc:	|                 |  |  |      move.l 12(a0),d1
   165c0:	|                 |  |  |      move.l 136(sp),d0
   165c4:	|                 |  |  |      lsl.l #3,d0
   165c6:	|                 |  |  |      movea.l d1,a0
   165c8:	|                 |  |  |      adda.l d0,a0
   165ca:	|                 |  |  |      move.l (a0),d0
   165cc:	|                 |  |  |      cmp.l 132(sp),d0
   165d0:	|                 |  |  \----- bgt.s 1657e <setFloor+0x176>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   165d2:	|                 |  |         addq.l #1,136(sp)
   165d6:	|                 |  \-------> movea.l 1a914 <currentFloor>,a0
   165dc:	|                 |            move.l 8(a0),d0
   165e0:	|                 |            cmp.l 136(sp),d0
   165e4:	|                 \----------- bgt.w 164c2 <setFloor+0xba>
		}
	}

	// Find out how many vertices there are and reserve memory

	i = get2bytes (bigDataFile);
   165e8:	|                              move.l 1a78c <bigDataFile>,d0
   165ee:	|                              move.l d0,-(sp)
   165f0:	|                              jsr 6bc <get2bytes>
   165f6:	|                              addq.l #4,sp
   165f8:	|                              move.l d0,136(sp)
	currentFloor -> vertex = AllocVec( sizeof(struct POINT)*i,MEMF_ANY);
   165fc:	|                              move.l 136(sp),d0
   16600:	|                              lsl.l #3,d0
   16602:	|                              move.l d0,98(sp)
   16606:	|                              clr.l 94(sp)
   1660a:	|                              move.l 1a7a4 <SysBase>,d0
   16610:	|                              movea.l d0,a6
   16612:	|                              move.l 98(sp),d0
   16616:	|                              move.l 94(sp),d1
   1661a:	|                              jsr -684(a6)
   1661e:	|                              move.l d0,90(sp)
   16622:	|                              move.l 90(sp),d0
   16626:	|                              movea.l 1a914 <currentFloor>,a0
   1662c:	|                              move.l d0,4(a0)

	if (!(currentFloor -> vertex)) {
   16630:	|                              movea.l 1a914 <currentFloor>,a0
   16636:	|                              move.l 4(a0),d0
   1663a:	|                          /-- bne.s 16650 <setFloor+0x248>
		KPrintF("setFloor: Cannot allocate memory");
   1663c:	|                          |   pea 19b72 <main_sludge.c.0270f7ba+0x336>
   16642:	|                          |   jsr 16c5e <KPrintF>
   16648:	|                          |   addq.l #4,sp
		return FALSE;
   1664a:	|                          |   clr.w d0
   1664c:	+--------------------------|-- bra.w 16b78 <setFloor+0x770>
	}

	for (j = 0; j < i; j ++) {
   16650:	|                          \-> clr.l 132(sp)
   16654:	|                          /-- bra.s 166a8 <setFloor+0x2a0>
		currentFloor -> vertex[j].x = get2bytes (bigDataFile);
   16656:	|                       /--|-> move.l 1a78c <bigDataFile>,d1
   1665c:	|                       |  |   movea.l 1a914 <currentFloor>,a0
   16662:	|                       |  |   movea.l 4(a0),a0
   16666:	|                       |  |   move.l 132(sp),d0
   1666a:	|                       |  |   lsl.l #3,d0
   1666c:	|                       |  |   lea (0,a0,d0.l),a2
   16670:	|                       |  |   move.l d1,-(sp)
   16672:	|                       |  |   jsr 6bc <get2bytes>
   16678:	|                       |  |   addq.l #4,sp
   1667a:	|                       |  |   move.l d0,(a2)
		currentFloor -> vertex[j].y = get2bytes (bigDataFile);
   1667c:	|                       |  |   move.l 1a78c <bigDataFile>,d1
   16682:	|                       |  |   movea.l 1a914 <currentFloor>,a0
   16688:	|                       |  |   movea.l 4(a0),a0
   1668c:	|                       |  |   move.l 132(sp),d0
   16690:	|                       |  |   lsl.l #3,d0
   16692:	|                       |  |   lea (0,a0,d0.l),a2
   16696:	|                       |  |   move.l d1,-(sp)
   16698:	|                       |  |   jsr 6bc <get2bytes>
   1669e:	|                       |  |   addq.l #4,sp
   166a0:	|                       |  |   move.l d0,4(a2)
	for (j = 0; j < i; j ++) {
   166a4:	|                       |  |   addq.l #1,132(sp)
   166a8:	|                       |  \-> move.l 132(sp),d0
   166ac:	|                       |      cmp.l 136(sp),d0
   166b0:	|                       \----- blt.s 16656 <setFloor+0x24e>
	}

	finishAccess ();
   166b2:	|                              jsr 6550 <finishAccess>

	// Now build the movement martix

	currentFloor -> matrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   166b8:	|                              movea.l 1a914 <currentFloor>,a0
   166be:	|                              move.l 8(a0),d0
   166c2:	|                              add.l d0,d0
   166c4:	|                              add.l d0,d0
   166c6:	|                              move.l d0,86(sp)
   166ca:	|                              clr.l 82(sp)
   166ce:	|                              move.l 1a7a4 <SysBase>,d0
   166d4:	|                              movea.l d0,a6
   166d6:	|                              move.l 86(sp),d0
   166da:	|                              move.l 82(sp),d1
   166de:	|                              jsr -684(a6)
   166e2:	|                              move.l d0,78(sp)
   166e6:	|                              move.l 78(sp),d0
   166ea:	|                              movea.l 1a914 <currentFloor>,a0
   166f0:	|                              move.l d0,16(a0)
	int * * distanceMatrix = AllocVec( sizeof(int) * currentFloor -> numPolygons, MEMF_ANY);
   166f4:	|                              movea.l 1a914 <currentFloor>,a0
   166fa:	|                              move.l 8(a0),d0
   166fe:	|                              add.l d0,d0
   16700:	|                              add.l d0,d0
   16702:	|                              move.l d0,74(sp)
   16706:	|                              clr.l 70(sp)
   1670a:	|                              move.l 1a7a4 <SysBase>,d0
   16710:	|                              movea.l d0,a6
   16712:	|                              move.l 74(sp),d0
   16716:	|                              move.l 70(sp),d1
   1671a:	|                              jsr -684(a6)
   1671e:	|                              move.l d0,66(sp)
   16722:	|                              move.l 66(sp),d0
   16726:	|                              move.l d0,62(sp)


	if (!(currentFloor -> matrix)) {
   1672a:	|                              movea.l 1a914 <currentFloor>,a0
   16730:	|                              move.l 16(a0),d0
   16734:	|                          /-- bne.s 1674a <setFloor+0x342>
		KPrintF("setFloor: Cannot allocate memory");
   16736:	|                          |   pea 19b72 <main_sludge.c.0270f7ba+0x336>
   1673c:	|                          |   jsr 16c5e <KPrintF>
   16742:	|                          |   addq.l #4,sp
		return FALSE;
   16744:	|                          |   clr.w d0
   16746:	+--------------------------|-- bra.w 16b78 <setFloor+0x770>
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1674a:	|                          \-> clr.l 136(sp)
   1674e:	|                    /-------- bra.w 16872 <setFloor+0x46a>
		currentFloor -> matrix[i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   16752:	|                 /--|-------> movea.l 1a914 <currentFloor>,a0
   16758:	|                 |  |         move.l 8(a0),d0
   1675c:	|                 |  |         add.l d0,d0
   1675e:	|                 |  |         add.l d0,d0
   16760:	|                 |  |         move.l d0,50(sp)
   16764:	|                 |  |         clr.l 46(sp)
   16768:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   1676e:	|                 |  |         movea.l d0,a6
   16770:	|                 |  |         move.l 50(sp),d0
   16774:	|                 |  |         move.l 46(sp),d1
   16778:	|                 |  |         jsr -684(a6)
   1677c:	|                 |  |         move.l d0,42(sp)
   16780:	|                 |  |         move.l 42(sp),d0
   16784:	|                 |  |         movea.l 1a914 <currentFloor>,a0
   1678a:	|                 |  |         movea.l 16(a0),a0
   1678e:	|                 |  |         move.l 136(sp),d1
   16792:	|                 |  |         add.l d1,d1
   16794:	|                 |  |         add.l d1,d1
   16796:	|                 |  |         adda.l d1,a0
   16798:	|                 |  |         move.l d0,(a0)
		distanceMatrix        [i] = AllocVec( sizeof(int) * currentFloor -> numPolygons,MEMF_ANY);
   1679a:	|                 |  |         movea.l 1a914 <currentFloor>,a0
   167a0:	|                 |  |         move.l 8(a0),d0
   167a4:	|                 |  |         add.l d0,d0
   167a6:	|                 |  |         add.l d0,d0
   167a8:	|                 |  |         move.l d0,38(sp)
   167ac:	|                 |  |         clr.l 34(sp)
   167b0:	|                 |  |         move.l 1a7a4 <SysBase>,d0
   167b6:	|                 |  |         movea.l d0,a6
   167b8:	|                 |  |         move.l 38(sp),d0
   167bc:	|                 |  |         move.l 34(sp),d1
   167c0:	|                 |  |         jsr -684(a6)
   167c4:	|                 |  |         move.l d0,30(sp)
   167c8:	|                 |  |         move.l 30(sp),d1
   167cc:	|                 |  |         move.l 136(sp),d0
   167d0:	|                 |  |         add.l d0,d0
   167d2:	|                 |  |         add.l d0,d0
   167d4:	|                 |  |         movea.l 62(sp),a0
   167d8:	|                 |  |         adda.l d0,a0
   167da:	|                 |  |         move.l d1,(a0)
		if (!(currentFloor -> matrix[i])) { 
   167dc:	|                 |  |         movea.l 1a914 <currentFloor>,a0
   167e2:	|                 |  |         move.l 16(a0),d1
   167e6:	|                 |  |         move.l 136(sp),d0
   167ea:	|                 |  |         add.l d0,d0
   167ec:	|                 |  |         add.l d0,d0
   167ee:	|                 |  |         movea.l d1,a0
   167f0:	|                 |  |         adda.l d0,a0
   167f2:	|                 |  |         move.l (a0),d0
   167f4:	|                 |  |     /-- bne.s 1680a <setFloor+0x402>
			KPrintF("setFloor: Cannot allocate memory");
   167f6:	|                 |  |     |   pea 19b72 <main_sludge.c.0270f7ba+0x336>
   167fc:	|                 |  |     |   jsr 16c5e <KPrintF>
   16802:	|                 |  |     |   addq.l #4,sp
			return FALSE;
   16804:	|                 |  |     |   clr.w d0
   16806:	+-----------------|--|-----|-- bra.w 16b78 <setFloor+0x770>
		}
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1680a:	|                 |  |     \-> clr.l 132(sp)
   1680e:	|                 |  |     /-- bra.s 1685e <setFloor+0x456>
			currentFloor -> matrix[i][j] = -1;
   16810:	|                 |  |  /--|-> movea.l 1a914 <currentFloor>,a0
   16816:	|                 |  |  |  |   move.l 16(a0),d1
   1681a:	|                 |  |  |  |   move.l 136(sp),d0
   1681e:	|                 |  |  |  |   add.l d0,d0
   16820:	|                 |  |  |  |   add.l d0,d0
   16822:	|                 |  |  |  |   movea.l d1,a0
   16824:	|                 |  |  |  |   adda.l d0,a0
   16826:	|                 |  |  |  |   move.l (a0),d1
   16828:	|                 |  |  |  |   move.l 132(sp),d0
   1682c:	|                 |  |  |  |   add.l d0,d0
   1682e:	|                 |  |  |  |   add.l d0,d0
   16830:	|                 |  |  |  |   movea.l d1,a0
   16832:	|                 |  |  |  |   adda.l d0,a0
   16834:	|                 |  |  |  |   moveq #-1,d1
   16836:	|                 |  |  |  |   move.l d1,(a0)
			distanceMatrix        [i][j] = 10000;
   16838:	|                 |  |  |  |   move.l 136(sp),d0
   1683c:	|                 |  |  |  |   add.l d0,d0
   1683e:	|                 |  |  |  |   add.l d0,d0
   16840:	|                 |  |  |  |   movea.l 62(sp),a0
   16844:	|                 |  |  |  |   adda.l d0,a0
   16846:	|                 |  |  |  |   move.l (a0),d1
   16848:	|                 |  |  |  |   move.l 132(sp),d0
   1684c:	|                 |  |  |  |   add.l d0,d0
   1684e:	|                 |  |  |  |   add.l d0,d0
   16850:	|                 |  |  |  |   movea.l d1,a0
   16852:	|                 |  |  |  |   adda.l d0,a0
   16854:	|                 |  |  |  |   move.l #10000,(a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1685a:	|                 |  |  |  |   addq.l #1,132(sp)
   1685e:	|                 |  |  |  \-> movea.l 1a914 <currentFloor>,a0
   16864:	|                 |  |  |      move.l 8(a0),d0
   16868:	|                 |  |  |      cmp.l 132(sp),d0
   1686c:	|                 |  |  \----- bgt.s 16810 <setFloor+0x408>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1686e:	|                 |  |         addq.l #1,136(sp)
   16872:	|                 |  \-------> movea.l 1a914 <currentFloor>,a0
   16878:	|                 |            move.l 8(a0),d0
   1687c:	|                 |            cmp.l 136(sp),d0
   16880:	|                 \----------- bgt.w 16752 <setFloor+0x34a>
		}
	}

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16884:	|                              clr.l 136(sp)
   16888:	|              /-------------- bra.w 1698e <setFloor+0x586>
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   1688c:	|           /--|-------------> clr.l 132(sp)
   16890:	|           |  |     /-------- bra.w 16978 <setFloor+0x570>
			if (i != j) {
   16894:	|           |  |  /--|-------> move.l 136(sp),d0
   16898:	|           |  |  |  |         cmp.l 132(sp),d0
   1689c:	|           |  |  |  |     /-- beq.w 1692e <setFloor+0x526>
				if (polysShareSide (currentFloor -> polygon[i], currentFloor -> polygon[j])) {
   168a0:	|           |  |  |  |     |   movea.l 1a914 <currentFloor>,a0
   168a6:	|           |  |  |  |     |   move.l 12(a0),d1
   168aa:	|           |  |  |  |     |   move.l 132(sp),d0
   168ae:	|           |  |  |  |     |   lsl.l #3,d0
   168b0:	|           |  |  |  |     |   movea.l d1,a1
   168b2:	|           |  |  |  |     |   adda.l d0,a1
   168b4:	|           |  |  |  |     |   movea.l 1a914 <currentFloor>,a0
   168ba:	|           |  |  |  |     |   move.l 12(a0),d1
   168be:	|           |  |  |  |     |   move.l 136(sp),d0
   168c2:	|           |  |  |  |     |   lsl.l #3,d0
   168c4:	|           |  |  |  |     |   movea.l d1,a0
   168c6:	|           |  |  |  |     |   adda.l d0,a0
   168c8:	|           |  |  |  |     |   move.l 4(a1),-(sp)
   168cc:	|           |  |  |  |     |   move.l (a1),-(sp)
   168ce:	|           |  |  |  |     |   move.l 4(a0),-(sp)
   168d2:	|           |  |  |  |     |   move.l (a0),-(sp)
   168d4:	|           |  |  |  |     |   jsr 16160 <polysShareSide>
   168da:	|           |  |  |  |     |   lea 16(sp),sp
   168de:	|           |  |  |  |     |   tst.w d0
   168e0:	|           |  |  |  |  /--|-- beq.w 16974 <setFloor+0x56c>
					currentFloor -> matrix[i][j] = j;
   168e4:	|           |  |  |  |  |  |   movea.l 1a914 <currentFloor>,a0
   168ea:	|           |  |  |  |  |  |   move.l 16(a0),d1
   168ee:	|           |  |  |  |  |  |   move.l 136(sp),d0
   168f2:	|           |  |  |  |  |  |   add.l d0,d0
   168f4:	|           |  |  |  |  |  |   add.l d0,d0
   168f6:	|           |  |  |  |  |  |   movea.l d1,a0
   168f8:	|           |  |  |  |  |  |   adda.l d0,a0
   168fa:	|           |  |  |  |  |  |   move.l (a0),d1
   168fc:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16900:	|           |  |  |  |  |  |   add.l d0,d0
   16902:	|           |  |  |  |  |  |   add.l d0,d0
   16904:	|           |  |  |  |  |  |   movea.l d1,a0
   16906:	|           |  |  |  |  |  |   adda.l d0,a0
   16908:	|           |  |  |  |  |  |   move.l 132(sp),(a0)
					distanceMatrix        [i][j] = 1;
   1690c:	|           |  |  |  |  |  |   move.l 136(sp),d0
   16910:	|           |  |  |  |  |  |   add.l d0,d0
   16912:	|           |  |  |  |  |  |   add.l d0,d0
   16914:	|           |  |  |  |  |  |   movea.l 62(sp),a0
   16918:	|           |  |  |  |  |  |   adda.l d0,a0
   1691a:	|           |  |  |  |  |  |   move.l (a0),d1
   1691c:	|           |  |  |  |  |  |   move.l 132(sp),d0
   16920:	|           |  |  |  |  |  |   add.l d0,d0
   16922:	|           |  |  |  |  |  |   add.l d0,d0
   16924:	|           |  |  |  |  |  |   movea.l d1,a0
   16926:	|           |  |  |  |  |  |   adda.l d0,a0
   16928:	|           |  |  |  |  |  |   moveq #1,d1
   1692a:	|           |  |  |  |  |  |   move.l d1,(a0)
   1692c:	|           |  |  |  |  +--|-- bra.s 16974 <setFloor+0x56c>
				}
			} else {
				currentFloor -> matrix[i][j] = -2;
   1692e:	|           |  |  |  |  |  \-> movea.l 1a914 <currentFloor>,a0
   16934:	|           |  |  |  |  |      move.l 16(a0),d1
   16938:	|           |  |  |  |  |      move.l 136(sp),d0
   1693c:	|           |  |  |  |  |      add.l d0,d0
   1693e:	|           |  |  |  |  |      add.l d0,d0
   16940:	|           |  |  |  |  |      movea.l d1,a0
   16942:	|           |  |  |  |  |      adda.l d0,a0
   16944:	|           |  |  |  |  |      move.l (a0),d1
   16946:	|           |  |  |  |  |      move.l 132(sp),d0
   1694a:	|           |  |  |  |  |      add.l d0,d0
   1694c:	|           |  |  |  |  |      add.l d0,d0
   1694e:	|           |  |  |  |  |      movea.l d1,a0
   16950:	|           |  |  |  |  |      adda.l d0,a0
   16952:	|           |  |  |  |  |      moveq #-2,d0
   16954:	|           |  |  |  |  |      move.l d0,(a0)
				distanceMatrix        [i][j] = 0;
   16956:	|           |  |  |  |  |      move.l 136(sp),d0
   1695a:	|           |  |  |  |  |      add.l d0,d0
   1695c:	|           |  |  |  |  |      add.l d0,d0
   1695e:	|           |  |  |  |  |      movea.l 62(sp),a0
   16962:	|           |  |  |  |  |      adda.l d0,a0
   16964:	|           |  |  |  |  |      move.l (a0),d1
   16966:	|           |  |  |  |  |      move.l 132(sp),d0
   1696a:	|           |  |  |  |  |      add.l d0,d0
   1696c:	|           |  |  |  |  |      add.l d0,d0
   1696e:	|           |  |  |  |  |      movea.l d1,a0
   16970:	|           |  |  |  |  |      adda.l d0,a0
   16972:	|           |  |  |  |  |      clr.l (a0)
		for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16974:	|           |  |  |  |  \----> addq.l #1,132(sp)
   16978:	|           |  |  |  \-------> movea.l 1a914 <currentFloor>,a0
   1697e:	|           |  |  |            move.l 8(a0),d0
   16982:	|           |  |  |            cmp.l 132(sp),d0
   16986:	|           |  |  \----------- bgt.w 16894 <setFloor+0x48c>
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   1698a:	|           |  |               addq.l #1,136(sp)
   1698e:	|           |  \-------------> movea.l 1a914 <currentFloor>,a0
   16994:	|           |                  move.l 8(a0),d0
   16998:	|           |                  cmp.l 136(sp),d0
   1699c:	|           \----------------- bgt.w 1688c <setFloor+0x484>
			}
		}
	}

	BOOL madeChange;
	int lookForDistance = 0;
   169a0:	|                              clr.l 126(sp)

	do {
		lookForDistance ++;
   169a4:	|  /-------------------------> addq.l #1,126(sp)
//		debugMatrix ();
		madeChange = FALSE;
   169a8:	|  |                           clr.w 130(sp)
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   169ac:	|  |                           clr.l 136(sp)
   169b0:	|  |     /-------------------- bra.w 16b06 <setFloor+0x6fe>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   169b4:	|  |  /--|-------------------> clr.l 132(sp)
   169b8:	|  |  |  |     /-------------- bra.w 16af0 <setFloor+0x6e8>
				if (currentFloor -> matrix[i][j] == -1) {
   169bc:	|  |  |  |  /--|-------------> movea.l 1a914 <currentFloor>,a0
   169c2:	|  |  |  |  |  |               move.l 16(a0),d1
   169c6:	|  |  |  |  |  |               move.l 136(sp),d0
   169ca:	|  |  |  |  |  |               add.l d0,d0
   169cc:	|  |  |  |  |  |               add.l d0,d0
   169ce:	|  |  |  |  |  |               movea.l d1,a0
   169d0:	|  |  |  |  |  |               adda.l d0,a0
   169d2:	|  |  |  |  |  |               move.l (a0),d1
   169d4:	|  |  |  |  |  |               move.l 132(sp),d0
   169d8:	|  |  |  |  |  |               add.l d0,d0
   169da:	|  |  |  |  |  |               add.l d0,d0
   169dc:	|  |  |  |  |  |               movea.l d1,a0
   169de:	|  |  |  |  |  |               adda.l d0,a0
   169e0:	|  |  |  |  |  |               move.l (a0),d0
   169e2:	|  |  |  |  |  |               moveq #-1,d1
   169e4:	|  |  |  |  |  |               cmp.l d0,d1
   169e6:	|  |  |  |  |  |  /----------- bne.w 16aec <setFloor+0x6e4>

					// OK, so we don't know how to get from i to j...
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   169ea:	|  |  |  |  |  |  |            clr.l 122(sp)
   169ee:	|  |  |  |  |  |  |     /----- bra.w 16ada <setFloor+0x6d2>
						if (d != i && d != j) {
   169f2:	|  |  |  |  |  |  |  /--|----> move.l 122(sp),d0
   169f6:	|  |  |  |  |  |  |  |  |      cmp.l 136(sp),d0
   169fa:	|  |  |  |  |  |  |  |  |  /-- beq.w 16ad6 <setFloor+0x6ce>
   169fe:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d1
   16a02:	|  |  |  |  |  |  |  |  |  |   cmp.l 132(sp),d1
   16a06:	|  |  |  |  |  |  |  |  |  +-- beq.w 16ad6 <setFloor+0x6ce>
							if (currentFloor -> matrix[i][d] == d &&
   16a0a:	|  |  |  |  |  |  |  |  |  |   movea.l 1a914 <currentFloor>,a0
   16a10:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16a14:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16a18:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a1a:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a1c:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16a1e:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16a20:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16a22:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16a26:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a28:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a2a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16a2c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16a2e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
   16a30:	|  |  |  |  |  |  |  |  |  |   cmp.l 122(sp),d0
   16a34:	|  |  |  |  |  |  |  |  |  +-- bne.w 16ad6 <setFloor+0x6ce>
								currentFloor -> matrix[d][j] >= 0 &&
   16a38:	|  |  |  |  |  |  |  |  |  |   movea.l 1a914 <currentFloor>,a0
   16a3e:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16a42:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16a46:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a48:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a4a:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16a4c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16a4e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16a50:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16a54:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a56:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a58:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16a5a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16a5c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
							if (currentFloor -> matrix[i][d] == d &&
   16a5e:	|  |  |  |  |  |  |  |  |  +-- bmi.s 16ad6 <setFloor+0x6ce>
								distanceMatrix        [d][j] <= lookForDistance) {
   16a60:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),d0
   16a64:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a66:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a68:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16a6c:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16a6e:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16a70:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16a74:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a76:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a78:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16a7a:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16a7c:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d0
								currentFloor -> matrix[d][j] >= 0 &&
   16a7e:	|  |  |  |  |  |  |  |  |  |   cmp.l 126(sp),d0
   16a82:	|  |  |  |  |  |  |  |  |  +-- bgt.s 16ad6 <setFloor+0x6ce>

								 currentFloor -> matrix[i][j] = d;
   16a84:	|  |  |  |  |  |  |  |  |  |   movea.l 1a914 <currentFloor>,a0
   16a8a:	|  |  |  |  |  |  |  |  |  |   move.l 16(a0),d1
   16a8e:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16a92:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a94:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16a96:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16a98:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16a9a:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16a9c:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16aa0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16aa2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16aa4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16aa6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16aa8:	|  |  |  |  |  |  |  |  |  |   move.l 122(sp),(a0)
								 distanceMatrix		  [i][j] = lookForDistance + 1;
   16aac:	|  |  |  |  |  |  |  |  |  |   move.l 136(sp),d0
   16ab0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ab2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ab4:	|  |  |  |  |  |  |  |  |  |   movea.l 62(sp),a0
   16ab8:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16aba:	|  |  |  |  |  |  |  |  |  |   move.l (a0),d1
   16abc:	|  |  |  |  |  |  |  |  |  |   move.l 132(sp),d0
   16ac0:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ac2:	|  |  |  |  |  |  |  |  |  |   add.l d0,d0
   16ac4:	|  |  |  |  |  |  |  |  |  |   movea.l d1,a0
   16ac6:	|  |  |  |  |  |  |  |  |  |   adda.l d0,a0
   16ac8:	|  |  |  |  |  |  |  |  |  |   move.l 126(sp),d0
   16acc:	|  |  |  |  |  |  |  |  |  |   addq.l #1,d0
   16ace:	|  |  |  |  |  |  |  |  |  |   move.l d0,(a0)
								 madeChange = TRUE;
   16ad0:	|  |  |  |  |  |  |  |  |  |   move.w #1,130(sp)
					for (int d = 0; d < currentFloor -> numPolygons; d ++) {
   16ad6:	|  |  |  |  |  |  |  |  |  \-> addq.l #1,122(sp)
   16ada:	|  |  |  |  |  |  |  |  \----> movea.l 1a914 <currentFloor>,a0
   16ae0:	|  |  |  |  |  |  |  |         move.l 8(a0),d0
   16ae4:	|  |  |  |  |  |  |  |         cmp.l 122(sp),d0
   16ae8:	|  |  |  |  |  |  |  \-------- bgt.w 169f2 <setFloor+0x5ea>
			for (j = 0; j < currentFloor -> numPolygons; j ++) {
   16aec:	|  |  |  |  |  |  \----------> addq.l #1,132(sp)
   16af0:	|  |  |  |  |  \-------------> movea.l 1a914 <currentFloor>,a0
   16af6:	|  |  |  |  |                  move.l 8(a0),d0
   16afa:	|  |  |  |  |                  cmp.l 132(sp),d0
   16afe:	|  |  |  |  \----------------- bgt.w 169bc <setFloor+0x5b4>
		for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b02:	|  |  |  |                     addq.l #1,136(sp)
   16b06:	|  |  |  \-------------------> movea.l 1a914 <currentFloor>,a0
   16b0c:	|  |  |                        move.l 8(a0),d0
   16b10:	|  |  |                        cmp.l 136(sp),d0
   16b14:	|  |  \----------------------- bgt.w 169b4 <setFloor+0x5ac>
						}
					}
				}
			}
		}
	} while (madeChange);
   16b18:	|  |                           tst.w 130(sp)
   16b1c:	|  \-------------------------- bne.w 169a4 <setFloor+0x59c>

	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b20:	|                              clr.l 136(sp)
   16b24:	|                          /-- bra.s 16b4c <setFloor+0x744>
		FreeVec(distanceMatrix [i]);
   16b26:	|                       /--|-> move.l 136(sp),d0
   16b2a:	|                       |  |   add.l d0,d0
   16b2c:	|                       |  |   add.l d0,d0
   16b2e:	|                       |  |   movea.l 62(sp),a0
   16b32:	|                       |  |   adda.l d0,a0
   16b34:	|                       |  |   move.l (a0),54(sp)
   16b38:	|                       |  |   move.l 1a7a4 <SysBase>,d0
   16b3e:	|                       |  |   movea.l d0,a6
   16b40:	|                       |  |   movea.l 54(sp),a1
   16b44:	|                       |  |   jsr -690(a6)
	for (i = 0; i < currentFloor -> numPolygons; i ++) {
   16b48:	|                       |  |   addq.l #1,136(sp)
   16b4c:	|                       |  \-> movea.l 1a914 <currentFloor>,a0
   16b52:	|                       |      move.l 8(a0),d0
   16b56:	|                       |      cmp.l 136(sp),d0
   16b5a:	|                       \----- bgt.s 16b26 <setFloor+0x71e>
	}

	FreeVec(distanceMatrix);
   16b5c:	|                              move.l 62(sp),58(sp)
   16b62:	|                              move.l 1a7a4 <SysBase>,d0
   16b68:	|                              movea.l d0,a6
   16b6a:	|                              movea.l 58(sp),a1
   16b6e:	|                              jsr -690(a6)
	distanceMatrix = NULL;	
   16b72:	|                              clr.l 62(sp)

	return TRUE;
   16b76:	|                              moveq #1,d0
}
   16b78:	\----------------------------> movea.l (sp)+,a2
   16b7a:	                               movea.l (sp)+,a6
   16b7c:	                               lea 132(sp),sp
   16b80:	                               rts

00016b82 <setFloorNull>:

void setFloorNull () {
	killFloor ();
   16b82:	jsr 16070 <killFloor>
	noFloor ();
   16b88:	jsr 15f94 <noFloor>
   16b8e:	nop
   16b90:	rts

00016b92 <WaitVbl>:
void WaitVbl() {
   16b92:	       subq.l #8,sp
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   16b94:	   /-> movea.l #14675972,a0
   16b9a:	   |   move.l (a0),d0
   16b9c:	   |   move.l d0,(sp)
		vpos&=0x1ff00;
   16b9e:	   |   move.l (sp),d0
   16ba0:	   |   andi.l #130816,d0
   16ba6:	   |   move.l d0,(sp)
		if (vpos!=(300<<8))
   16ba8:	   |   move.l (sp),d0
   16baa:	   |   cmpi.l #76800,d0
   16bb0:	   \-- beq.s 16b94 <WaitVbl+0x2>
		volatile ULONG vpos=*(volatile ULONG*)0xDFF004;
   16bb2:	/----> movea.l #14675972,a0
   16bb8:	|      move.l (a0),d0
   16bba:	|      move.l d0,4(sp)
		vpos&=0x1ff00;
   16bbe:	|      move.l 4(sp),d0
   16bc2:	|      andi.l #130816,d0
   16bc8:	|      move.l d0,4(sp)
		if (vpos==(300<<8))
   16bcc:	|      move.l 4(sp),d0
   16bd0:	|      cmpi.l #76800,d0
   16bd6:	|  /-- beq.s 16bda <WaitVbl+0x48>
	while (1) {
   16bd8:	\--|-- bra.s 16bb2 <WaitVbl+0x20>
			break;
   16bda:	   \-> nop
}
   16bdc:	       nop
   16bde:	       addq.l #8,sp
   16be0:	       rts

00016be2 <memset>:
void* memset(void *dest, int val, unsigned long len) {
   16be2:	       subq.l #4,sp
	unsigned char *ptr = (unsigned char *)dest;
   16be4:	       move.l 8(sp),(sp)
	while(len-- > 0)
   16be8:	   /-- bra.s 16bfa <memset+0x18>
		*ptr++ = val;
   16bea:	/--|-> move.l (sp),d0
   16bec:	|  |   move.l d0,d1
   16bee:	|  |   addq.l #1,d1
   16bf0:	|  |   move.l d1,(sp)
   16bf2:	|  |   move.l 12(sp),d1
   16bf6:	|  |   movea.l d0,a0
   16bf8:	|  |   move.b d1,(a0)
	while(len-- > 0)
   16bfa:	|  \-> move.l 16(sp),d0
   16bfe:	|      move.l d0,d1
   16c00:	|      subq.l #1,d1
   16c02:	|      move.l d1,16(sp)
   16c06:	|      tst.l d0
   16c08:	\----- bne.s 16bea <memset+0x8>
	return dest;
   16c0a:	       move.l 8(sp),d0
}
   16c0e:	       addq.l #4,sp
   16c10:	       rts

00016c12 <memcpy>:
void* memcpy(void *dest, const void *src, unsigned long len) {
   16c12:	       subq.l #8,sp
   16c14:	       move.l d2,-(sp)
	char *d = (char *)dest;
   16c16:	       move.l 16(sp),8(sp)
	const char *s = (const char *)src;
   16c1c:	       move.l 20(sp),4(sp)
	while(len--)
   16c22:	   /-- bra.s 16c44 <memcpy+0x32>
		*d++ = *s++;
   16c24:	/--|-> move.l 4(sp),d1
   16c28:	|  |   move.l d1,d0
   16c2a:	|  |   addq.l #1,d0
   16c2c:	|  |   move.l d0,4(sp)
   16c30:	|  |   move.l 8(sp),d0
   16c34:	|  |   move.l d0,d2
   16c36:	|  |   addq.l #1,d2
   16c38:	|  |   move.l d2,8(sp)
   16c3c:	|  |   movea.l d1,a0
   16c3e:	|  |   move.b (a0),d1
   16c40:	|  |   movea.l d0,a0
   16c42:	|  |   move.b d1,(a0)
	while(len--)
   16c44:	|  \-> move.l 24(sp),d0
   16c48:	|      move.l d0,d1
   16c4a:	|      subq.l #1,d1
   16c4c:	|      move.l d1,24(sp)
   16c50:	|      tst.l d0
   16c52:	\----- bne.s 16c24 <memcpy+0x12>
	return dest;
   16c54:	       move.l 16(sp),d0
}
   16c58:	       move.l (sp)+,d2
   16c5a:	       addq.l #8,sp
   16c5c:	       rts

00016c5e <KPrintF>:
void KPrintF(const char* fmt, ...) {
   16c5e:	       lea -128(sp),sp
   16c62:	       movem.l a2-a3/a6,-(sp)
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   16c66:	       move.w f0ff60 <gcc8_c_support.c.cce2f5c3+0xec5747>,d0
   16c6c:	       cmpi.w #20153,d0
   16c70:	   /-- beq.s 16c94 <KPrintF+0x36>
   16c72:	   |   cmpi.w #-24562,d0
   16c76:	   +-- beq.s 16c94 <KPrintF+0x36>
		RawDoFmt((CONST_STRPTR)fmt, vl, KPutCharX, 0);
   16c78:	   |   movea.l 1a7a4 <SysBase>,a6
   16c7e:	   |   movea.l 144(sp),a0
   16c82:	   |   lea 148(sp),a1
   16c86:	   |   lea 17724 <KPutCharX>,a2
   16c8c:	   |   suba.l a3,a3
   16c8e:	   |   jsr -522(a6)
}
   16c92:	/--|-- bra.s 16cbe <KPrintF+0x60>
		RawDoFmt((CONST_STRPTR)fmt, vl, PutChar, temp);
   16c94:	|  \-> movea.l 1a7a4 <SysBase>,a6
   16c9a:	|      movea.l 144(sp),a0
   16c9e:	|      lea 148(sp),a1
   16ca2:	|      lea 17732 <PutChar>,a2
   16ca8:	|      lea 12(sp),a3
   16cac:	|      jsr -522(a6)
		UaeDbgLog(86, temp);
   16cb0:	|      move.l a3,-(sp)
   16cb2:	|      pea 56 <_start+0x56>
   16cb6:	|      jsr f0ff60 <gcc8_c_support.c.cce2f5c3+0xec5747>
	if(*((UWORD *)UaeDbgLog) == 0x4eb9 || *((UWORD *)UaeDbgLog) == 0xa00e) {
   16cbc:	|      addq.l #8,sp
}
   16cbe:	\----> movem.l (sp)+,a2-a3/a6
   16cc2:	       lea 128(sp),sp
   16cc6:	       rts

00016cc8 <debug_cmd>:
		UaeConf(82, -1, on ? "blitter_cycle_exact false" : "blitter_cycle_exact true", 0, &outbuf, 1);
		UaeConf(82, -1, on ? "warp true" : "warp false", 0, &outbuf, 1);
	}
}

static void debug_cmd(unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4) {
   16cc8:	       subq.l #4,sp
	long(*UaeLib)(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4);
	UaeLib = (long(*)(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int))0xf0ff60;
   16cca:	       move.l #15794016,(sp)
	if(*((UWORD *)UaeLib) == 0x4eb9 || *((UWORD *)UaeLib) == 0xa00e) {
   16cd0:	       movea.l (sp),a0
   16cd2:	       move.w (a0),d0
   16cd4:	       cmpi.w #20153,d0
   16cd8:	   /-- beq.s 16ce4 <debug_cmd+0x1c>
   16cda:	   |   movea.l (sp),a0
   16cdc:	   |   move.w (a0),d0
   16cde:	   |   cmpi.w #-24562,d0
   16ce2:	/--|-- bne.s 16d02 <debug_cmd+0x3a>
		UaeLib(88, arg1, arg2, arg3, arg4);
   16ce4:	|  \-> move.l 20(sp),-(sp)
   16ce8:	|      move.l 20(sp),-(sp)
   16cec:	|      move.l 20(sp),-(sp)
   16cf0:	|      move.l 20(sp),-(sp)
   16cf4:	|      pea 58 <_start+0x58>
   16cf8:	|      movea.l 20(sp),a0
   16cfc:	|      jsr (a0)
   16cfe:	|      lea 20(sp),sp
	}
}
   16d02:	\----> nop
   16d04:	       addq.l #4,sp
   16d06:	       rts

00016d08 <my_strncpy>:
void debug_stop_idle() {
	debug_cmd(barto_cmd_set_idle, 0, 0, 0);
}

// gfx debugger
static void my_strncpy(char* destination, const char* source, unsigned long num) {
   16d08:	       move.l d2,-(sp)
	while(*source && --num > 0)
   16d0a:	   /-- bra.s 16d2c <my_strncpy+0x24>
		*destination++ = *source++;
   16d0c:	/--|-> move.l 12(sp),d1
   16d10:	|  |   move.l d1,d0
   16d12:	|  |   addq.l #1,d0
   16d14:	|  |   move.l d0,12(sp)
   16d18:	|  |   move.l 8(sp),d0
   16d1c:	|  |   move.l d0,d2
   16d1e:	|  |   addq.l #1,d2
   16d20:	|  |   move.l d2,8(sp)
   16d24:	|  |   movea.l d1,a0
   16d26:	|  |   move.b (a0),d1
   16d28:	|  |   movea.l d0,a0
   16d2a:	|  |   move.b d1,(a0)
	while(*source && --num > 0)
   16d2c:	|  \-> movea.l 12(sp),a0
   16d30:	|      move.b (a0),d0
   16d32:	|  /-- beq.s 16d3a <my_strncpy+0x32>
   16d34:	|  |   subq.l #1,16(sp)
   16d38:	\--|-- bne.s 16d0c <my_strncpy+0x4>
	*destination = '\0';
   16d3a:	   \-> movea.l 8(sp),a0
   16d3e:	       clr.b (a0)
}
   16d40:	       nop
   16d42:	       move.l (sp)+,d2
   16d44:	       rts

00016d46 <debug_register_bitmap>:

void debug_register_bitmap(const void* addr, const char* name, short width, short height, short numPlanes, unsigned short flags) {
   16d46:	    lea -60(sp),sp
   16d4a:	    movea.l 72(sp),a1
   16d4e:	    movea.l 76(sp),a0
   16d52:	    move.l 80(sp),d1
   16d56:	    move.l 84(sp),d0
   16d5a:	    movea.w a1,a1
   16d5c:	    move.w a1,8(sp)
   16d60:	    movea.w a0,a0
   16d62:	    move.w a0,6(sp)
   16d66:	    move.w d1,d1
   16d68:	    move.w d1,4(sp)
   16d6c:	    move.w d0,d0
   16d6e:	    move.w d0,2(sp)
	struct debug_resource resource = {
   16d72:	    lea 10(sp),a0
   16d76:	    clr.l (a0)
   16d78:	    addq.l #4,a0
   16d7a:	    clr.l (a0)
   16d7c:	    addq.l #4,a0
   16d7e:	    clr.l (a0)
   16d80:	    addq.l #4,a0
   16d82:	    clr.l (a0)
   16d84:	    addq.l #4,a0
   16d86:	    clr.l (a0)
   16d88:	    addq.l #4,a0
   16d8a:	    clr.l (a0)
   16d8c:	    addq.l #4,a0
   16d8e:	    clr.l (a0)
   16d90:	    addq.l #4,a0
   16d92:	    clr.l (a0)
   16d94:	    addq.l #4,a0
   16d96:	    clr.l (a0)
   16d98:	    addq.l #4,a0
   16d9a:	    clr.l (a0)
   16d9c:	    addq.l #4,a0
   16d9e:	    clr.l (a0)
   16da0:	    addq.l #4,a0
   16da2:	    clr.l (a0)
   16da4:	    addq.l #4,a0
   16da6:	    clr.w (a0)
   16da8:	    addq.l #2,a0
		.address = (unsigned int)addr,
   16daa:	    move.l 64(sp),d0
	struct debug_resource resource = {
   16dae:	    move.l d0,10(sp)
		.size = width / 8 * height * numPlanes,
   16db2:	    move.w 8(sp),d0
   16db6:	/-- bpl.s 16dba <debug_register_bitmap+0x74>
   16db8:	|   addq.w #7,d0
   16dba:	\-> asr.w #3,d0
   16dbc:	    movea.w d0,a0
   16dbe:	    movea.w 6(sp),a1
   16dc2:	    move.l a1,-(sp)
   16dc4:	    move.l a0,-(sp)
   16dc6:	    jsr 1761c <__mulsi3>
   16dcc:	    addq.l #8,sp
   16dce:	    movea.w 4(sp),a0
   16dd2:	    move.l a0,-(sp)
   16dd4:	    move.l d0,-(sp)
   16dd6:	    jsr 1761c <__mulsi3>
   16ddc:	    addq.l #8,sp
	struct debug_resource resource = {
   16dde:	    move.l d0,14(sp)
   16de2:	    move.w 2(sp),52(sp)
   16de8:	    move.w 8(sp),54(sp)
   16dee:	    move.w 6(sp),56(sp)
   16df4:	    move.w 4(sp),58(sp)
		.type = debug_resource_type_bitmap,
		.flags = flags,
		.bitmap = { width, height, numPlanes }
	};

	if (flags & debug_resource_bitmap_masked)
   16dfa:	    moveq #0,d0
   16dfc:	    move.w 2(sp),d0
   16e00:	    moveq #2,d1
   16e02:	    and.l d1,d0
   16e04:	/-- beq.s 16e10 <debug_register_bitmap+0xca>
		resource.size *= 2;
   16e06:	|   move.l 14(sp),d0
   16e0a:	|   add.l d0,d0
   16e0c:	|   move.l d0,14(sp)

	my_strncpy(resource.name, name, sizeof(resource.name));
   16e10:	\-> pea 20 <_start+0x20>
   16e14:	    move.l 72(sp),-(sp)
   16e18:	    lea 18(sp),a0
   16e1c:	    move.l a0,d0
   16e1e:	    addq.l #8,d0
   16e20:	    move.l d0,-(sp)
   16e22:	    jsr 16d08 <my_strncpy>
   16e28:	    lea 12(sp),sp
	debug_cmd(barto_cmd_register_resource, (unsigned int)&resource, 0, 0);
   16e2c:	    lea 10(sp),a0
   16e30:	    clr.l -(sp)
   16e32:	    clr.l -(sp)
   16e34:	    move.l a0,-(sp)
   16e36:	    pea 4 <_start+0x4>
   16e3a:	    jsr 16cc8 <debug_cmd>
   16e40:	    lea 16(sp),sp
}
   16e44:	    nop
   16e46:	    lea 60(sp),sp
   16e4a:	    rts

00016e4c <__addsf3>:
	};
	my_strncpy(resource.name, name, sizeof(resource.name));
	debug_cmd(barto_cmd_save, (unsigned int)&resource, 0, 0);
}

FLOAT __addsf3( FLOAT a, FLOAT b) {
   16e4c:	lea -12(sp),sp
   16e50:	move.l a6,-(sp)
	return IEEESPAdd( a, b);
   16e52:	move.l 20(sp),12(sp)
   16e58:	move.l 24(sp),8(sp)
   16e5e:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16e64:	movea.l d0,a6
   16e66:	move.l 12(sp),d0
   16e6a:	move.l 8(sp),d1
   16e6e:	jsr -66(a6)
   16e72:	move.l d0,4(sp)
   16e76:	move.l 4(sp),d0
}
   16e7a:	movea.l (sp)+,a6
   16e7c:	lea 12(sp),sp
   16e80:	rts

00016e82 <__adddf3>:

DOUBLE __adddf3( DOUBLE a, DOUBLE b) {
   16e82:	lea -32(sp),sp
   16e86:	movem.l d2-d3/a6,-(sp)
	return IEEEDPAdd( a, b);
   16e8a:	move.l 48(sp),36(sp)
   16e90:	move.l 52(sp),40(sp)
   16e96:	move.l 56(sp),28(sp)
   16e9c:	move.l 60(sp),32(sp)
   16ea2:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   16ea8:	movea.l d0,a6
   16eaa:	move.l 36(sp),d0
   16eae:	move.l 40(sp),d1
   16eb2:	move.l 28(sp),d2
   16eb6:	move.l 32(sp),d3
   16eba:	jsr -66(a6)
   16ebe:	move.l d0,12(sp)
   16ec2:	move.l d1,16(sp)
   16ec6:	move.l 12(sp),20(sp)
   16ecc:	move.l 16(sp),24(sp)
   16ed2:	move.l 20(sp),d0
   16ed6:	move.l 24(sp),d1
}
   16eda:	movem.l (sp)+,d2-d3/a6
   16ede:	lea 32(sp),sp
   16ee2:	rts

00016ee4 <__divdf3>:

DOUBLE __divdf3( DOUBLE a, DOUBLE b) {
   16ee4:	lea -32(sp),sp
   16ee8:	movem.l d2-d3/a6,-(sp)
	return IEEEDPDiv( a, b);
   16eec:	move.l 48(sp),36(sp)
   16ef2:	move.l 52(sp),40(sp)
   16ef8:	move.l 56(sp),28(sp)
   16efe:	move.l 60(sp),32(sp)
   16f04:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   16f0a:	movea.l d0,a6
   16f0c:	move.l 36(sp),d0
   16f10:	move.l 40(sp),d1
   16f14:	move.l 28(sp),d2
   16f18:	move.l 32(sp),d3
   16f1c:	jsr -84(a6)
   16f20:	move.l d0,12(sp)
   16f24:	move.l d1,16(sp)
   16f28:	move.l 12(sp),20(sp)
   16f2e:	move.l 16(sp),24(sp)
   16f34:	move.l 20(sp),d0
   16f38:	move.l 24(sp),d1
}
   16f3c:	movem.l (sp)+,d2-d3/a6
   16f40:	lea 32(sp),sp
   16f44:	rts

00016f46 <__divsf3>:

FLOAT __divsf3( FLOAT a, FLOAT b) {
   16f46:	lea -12(sp),sp
   16f4a:	move.l a6,-(sp)
	return IEEESPDiv( a, b);
   16f4c:	move.l 20(sp),12(sp)
   16f52:	move.l 24(sp),8(sp)
   16f58:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16f5e:	movea.l d0,a6
   16f60:	move.l 12(sp),d0
   16f64:	move.l 8(sp),d1
   16f68:	jsr -84(a6)
   16f6c:	move.l d0,4(sp)
   16f70:	move.l 4(sp),d0
}
   16f74:	movea.l (sp)+,a6
   16f76:	lea 12(sp),sp
   16f7a:	rts

00016f7c <__eqsf2>:

int __eqsf2( FLOAT a, FLOAT b) {
   16f7c:	lea -12(sp),sp
   16f80:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   16f82:	move.l 20(sp),12(sp)
   16f88:	move.l 24(sp),8(sp)
   16f8e:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   16f94:	movea.l d0,a6
   16f96:	move.l 12(sp),d0
   16f9a:	move.l 8(sp),d1
   16f9e:	jsr -42(a6)
   16fa2:	move.l d0,4(sp)
   16fa6:	move.l 4(sp),d0
}
   16faa:	movea.l (sp)+,a6
   16fac:	lea 12(sp),sp
   16fb0:	rts

00016fb2 <__extendsfdf2>:

DOUBLE __extendsfdf2 (FLOAT a) {
   16fb2:	lea -20(sp),sp
   16fb6:	move.l a6,-(sp)
	return IEEEDPFieee( a );
   16fb8:	move.l 28(sp),20(sp)
   16fbe:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   16fc4:	movea.l d0,a6
   16fc6:	move.l 20(sp),d0
   16fca:	jsr -108(a6)
   16fce:	move.l d0,4(sp)
   16fd2:	move.l d1,8(sp)
   16fd6:	move.l 4(sp),12(sp)
   16fdc:	move.l 8(sp),16(sp)
   16fe2:	move.l 12(sp),d0
   16fe6:	move.l 16(sp),d1
}
   16fea:	movea.l (sp)+,a6
   16fec:	lea 20(sp),sp
   16ff0:	rts

00016ff2 <__fixdfsi>:

DOUBLE __fixdfsi(DOUBLE value) {
   16ff2:	lea -12(sp),sp
   16ff6:	move.l a6,-(sp)
	return IEEEDPFix(value);
   16ff8:	move.l 20(sp),8(sp)
   16ffe:	move.l 24(sp),12(sp)
   17004:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   1700a:	movea.l d0,a6
   1700c:	move.l 8(sp),d0
   17010:	move.l 12(sp),d1
   17014:	jsr -30(a6)
   17018:	move.l d0,4(sp)
   1701c:	move.l 4(sp),d0
   17020:	move.l d0,-(sp)
   17022:	jsr 1705a <__floatsidf>
   17028:	addq.l #4,sp
}
   1702a:	movea.l (sp)+,a6
   1702c:	lea 12(sp),sp
   17030:	rts

00017032 <__fixsfsi>:

LONG __fixsfsi(FLOAT value) {
   17032:	subq.l #8,sp
   17034:	move.l a6,-(sp)
	return IEEESPFix(value);
   17036:	move.l 16(sp),8(sp)
   1703c:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17042:	movea.l d0,a6
   17044:	move.l 8(sp),d0
   17048:	jsr -30(a6)
   1704c:	move.l d0,4(sp)
   17050:	move.l 4(sp),d0
}
   17054:	movea.l (sp)+,a6
   17056:	addq.l #8,sp
   17058:	rts

0001705a <__floatsidf>:


DOUBLE __floatsidf (int i) {
   1705a:	lea -20(sp),sp
   1705e:	move.l a6,-(sp)
	return IEEEDPFlt((LONG) i);  
   17060:	move.l 28(sp),20(sp)
   17066:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   1706c:	movea.l d0,a6
   1706e:	move.l 20(sp),d0
   17072:	jsr -36(a6)
   17076:	move.l d0,4(sp)
   1707a:	move.l d1,8(sp)
   1707e:	move.l 4(sp),12(sp)
   17084:	move.l 8(sp),16(sp)
   1708a:	move.l 12(sp),d0
   1708e:	move.l 16(sp),d1
}
   17092:	movea.l (sp)+,a6
   17094:	lea 20(sp),sp
   17098:	rts

0001709a <__floatsisf>:

FLOAT __floatsisf(int i) {
   1709a:	subq.l #8,sp
   1709c:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   1709e:	move.l 16(sp),8(sp)
   170a4:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   170aa:	movea.l d0,a6
   170ac:	move.l 8(sp),d0
   170b0:	jsr -36(a6)
   170b4:	move.l d0,4(sp)
   170b8:	move.l 4(sp),d0
}
   170bc:	movea.l (sp)+,a6
   170be:	addq.l #8,sp
   170c0:	rts

000170c2 <__floatunsisf>:

FLOAT __floatunsisf(unsigned int i) {	
   170c2:	subq.l #8,sp
   170c4:	move.l a6,-(sp)
	return IEEESPFlt((LONG) i); 
   170c6:	move.l 16(sp),8(sp)
   170cc:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   170d2:	movea.l d0,a6
   170d4:	move.l 8(sp),d0
   170d8:	jsr -36(a6)
   170dc:	move.l d0,4(sp)
   170e0:	move.l 4(sp),d0
}
   170e4:	movea.l (sp)+,a6
   170e6:	addq.l #8,sp
   170e8:	rts

000170ea <__muldf3>:

DOUBLE __muldf3( DOUBLE leftParm, DOUBLE rightParm ) {
   170ea:	lea -32(sp),sp
   170ee:	movem.l d2-d3/a6,-(sp)
	return IEEEDPMul( leftParm, rightParm);
   170f2:	move.l 48(sp),36(sp)
   170f8:	move.l 52(sp),40(sp)
   170fe:	move.l 56(sp),28(sp)
   17104:	move.l 60(sp),32(sp)
   1710a:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17110:	movea.l d0,a6
   17112:	move.l 36(sp),d0
   17116:	move.l 40(sp),d1
   1711a:	move.l 28(sp),d2
   1711e:	move.l 32(sp),d3
   17122:	jsr -78(a6)
   17126:	move.l d0,12(sp)
   1712a:	move.l d1,16(sp)
   1712e:	move.l 12(sp),20(sp)
   17134:	move.l 16(sp),24(sp)
   1713a:	move.l 20(sp),d0
   1713e:	move.l 24(sp),d1
}
   17142:	movem.l (sp)+,d2-d3/a6
   17146:	lea 32(sp),sp
   1714a:	rts

0001714c <__mulsf3>:

 //FLOAT IEEESPMul( FLOAT leftParm, FLOAT rightParm );
FLOAT __mulsf3( FLOAT leftParm, FLOAT rightParm ) {
   1714c:	lea -12(sp),sp
   17150:	move.l a6,-(sp)
	return IEEESPMul( leftParm, rightParm);
   17152:	move.l 20(sp),12(sp)
   17158:	move.l 24(sp),8(sp)
   1715e:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17164:	movea.l d0,a6
   17166:	move.l 12(sp),d0
   1716a:	move.l 8(sp),d1
   1716e:	jsr -78(a6)
   17172:	move.l d0,4(sp)
   17176:	move.l 4(sp),d0
}
   1717a:	movea.l (sp)+,a6
   1717c:	lea 12(sp),sp
   17180:	rts

00017182 <__gesf2>:


int __gesf2( FLOAT a, FLOAT b) {
   17182:	lea -12(sp),sp
   17186:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17188:	move.l 20(sp),12(sp)
   1718e:	move.l 24(sp),8(sp)
   17194:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1719a:	movea.l d0,a6
   1719c:	move.l 12(sp),d0
   171a0:	move.l 8(sp),d1
   171a4:	jsr -42(a6)
   171a8:	move.l d0,4(sp)
   171ac:	move.l 4(sp),d0
}
   171b0:	movea.l (sp)+,a6
   171b2:	lea 12(sp),sp
   171b6:	rts

000171b8 <__gtdf2>:

int __gtdf2( DOUBLE a, DOUBLE b) {
   171b8:	lea -20(sp),sp
   171bc:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   171c0:	move.l 36(sp),24(sp)
   171c6:	move.l 40(sp),28(sp)
   171cc:	move.l 44(sp),16(sp)
   171d2:	move.l 48(sp),20(sp)
   171d8:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   171de:	movea.l d0,a6
   171e0:	move.l 24(sp),d0
   171e4:	move.l 28(sp),d1
   171e8:	move.l 16(sp),d2
   171ec:	move.l 20(sp),d3
   171f0:	jsr -42(a6)
   171f4:	move.l d0,12(sp)
   171f8:	move.l 12(sp),d0
}
   171fc:	movem.l (sp)+,d2-d3/a6
   17200:	lea 20(sp),sp
   17204:	rts

00017206 <__gtsf2>:

int __gtsf2( FLOAT a, FLOAT b) {
   17206:	lea -12(sp),sp
   1720a:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   1720c:	move.l 20(sp),12(sp)
   17212:	move.l 24(sp),8(sp)
   17218:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1721e:	movea.l d0,a6
   17220:	move.l 12(sp),d0
   17224:	move.l 8(sp),d1
   17228:	jsr -42(a6)
   1722c:	move.l d0,4(sp)
   17230:	move.l 4(sp),d0
}
   17234:	movea.l (sp)+,a6
   17236:	lea 12(sp),sp
   1723a:	rts

0001723c <__lesf2>:

int __lesf2( FLOAT a, FLOAT b) {
   1723c:	lea -12(sp),sp
   17240:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   17242:	move.l 20(sp),12(sp)
   17248:	move.l 24(sp),8(sp)
   1724e:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   17254:	movea.l d0,a6
   17256:	move.l 12(sp),d0
   1725a:	move.l 8(sp),d1
   1725e:	jsr -42(a6)
   17262:	move.l d0,4(sp)
   17266:	move.l 4(sp),d0
}
   1726a:	movea.l (sp)+,a6
   1726c:	lea 12(sp),sp
   17270:	rts

00017272 <__ltdf2>:

int __ltdf2( DOUBLE a, DOUBLE b) {
   17272:	lea -20(sp),sp
   17276:	movem.l d2-d3/a6,-(sp)
	return IEEEDPCmp( a, b);
   1727a:	move.l 36(sp),24(sp)
   17280:	move.l 40(sp),28(sp)
   17286:	move.l 44(sp),16(sp)
   1728c:	move.l 48(sp),20(sp)
   17292:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17298:	movea.l d0,a6
   1729a:	move.l 24(sp),d0
   1729e:	move.l 28(sp),d1
   172a2:	move.l 16(sp),d2
   172a6:	move.l 20(sp),d3
   172aa:	jsr -42(a6)
   172ae:	move.l d0,12(sp)
   172b2:	move.l 12(sp),d0
}
   172b6:	movem.l (sp)+,d2-d3/a6
   172ba:	lea 20(sp),sp
   172be:	rts

000172c0 <__ltsf2>:

int __ltsf2( FLOAT a, FLOAT b) {
   172c0:	lea -12(sp),sp
   172c4:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   172c6:	move.l 20(sp),12(sp)
   172cc:	move.l 24(sp),8(sp)
   172d2:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   172d8:	movea.l d0,a6
   172da:	move.l 12(sp),d0
   172de:	move.l 8(sp),d1
   172e2:	jsr -42(a6)
   172e6:	move.l d0,4(sp)
   172ea:	move.l 4(sp),d0
}
   172ee:	movea.l (sp)+,a6
   172f0:	lea 12(sp),sp
   172f4:	rts

000172f6 <__nesf2>:

int __nesf2( FLOAT a, FLOAT b) {
   172f6:	lea -12(sp),sp
   172fa:	move.l a6,-(sp)
	return IEEESPCmp( a, b);
   172fc:	move.l 20(sp),12(sp)
   17302:	move.l 24(sp),8(sp)
   17308:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1730e:	movea.l d0,a6
   17310:	move.l 12(sp),d0
   17314:	move.l 8(sp),d1
   17318:	jsr -42(a6)
   1731c:	move.l d0,4(sp)
   17320:	move.l 4(sp),d0
}
   17324:	movea.l (sp)+,a6
   17326:	lea 12(sp),sp
   1732a:	rts

0001732c <__subdf3>:

DOUBLE __subdf3 (DOUBLE a, DOUBLE b) {
   1732c:	lea -32(sp),sp
   17330:	movem.l d2-d3/a6,-(sp)
	return IEEEDPSub( a, b);
   17334:	move.l 48(sp),36(sp)
   1733a:	move.l 52(sp),40(sp)
   17340:	move.l 56(sp),28(sp)
   17346:	move.l 60(sp),32(sp)
   1734c:	move.l 1a7bc <MathIeeeDoubBasBase>,d0
   17352:	movea.l d0,a6
   17354:	move.l 36(sp),d0
   17358:	move.l 40(sp),d1
   1735c:	move.l 28(sp),d2
   17360:	move.l 32(sp),d3
   17364:	jsr -72(a6)
   17368:	move.l d0,12(sp)
   1736c:	move.l d1,16(sp)
   17370:	move.l 12(sp),20(sp)
   17376:	move.l 16(sp),24(sp)
   1737c:	move.l 20(sp),d0
   17380:	move.l 24(sp),d1
}
   17384:	movem.l (sp)+,d2-d3/a6
   17388:	lea 32(sp),sp
   1738c:	rts

0001738e <__subsf3>:

FLOAT __subsf3 (float a, float b) {
   1738e:	lea -12(sp),sp
   17392:	move.l a6,-(sp)
	return IEEESPSub( a, b);
   17394:	move.l 20(sp),12(sp)
   1739a:	move.l 24(sp),8(sp)
   173a0:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   173a6:	movea.l d0,a6
   173a8:	move.l 12(sp),d0
   173ac:	move.l 8(sp),d1
   173b0:	jsr -72(a6)
   173b4:	move.l d0,4(sp)
   173b8:	move.l 4(sp),d0
}
   173bc:	movea.l (sp)+,a6
   173be:	lea 12(sp),sp
   173c2:	rts

000173c4 <__truncdfsf2>:

FLOAT __truncdfsf2(DOUBLE a) {
   173c4:	lea -12(sp),sp
   173c8:	move.l a6,-(sp)
	return IEEEDPTieee( a);
   173ca:	move.l 20(sp),8(sp)
   173d0:	move.l 24(sp),12(sp)
   173d6:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   173dc:	movea.l d0,a6
   173de:	move.l 8(sp),d0
   173e2:	move.l 12(sp),d1
   173e6:	jsr -102(a6)
   173ea:	move.l d0,4(sp)
   173ee:	move.l 4(sp),d0
}
   173f2:	movea.l (sp)+,a6
   173f4:	lea 12(sp),sp
   173f8:	rts

000173fa <__fixunssfsi>:

unsigned int __fixunssfsi (float a) {
   173fa:	subq.l #8,sp
   173fc:	move.l a6,-(sp)
	return IEEESPFix(a);
   173fe:	move.l 16(sp),8(sp)
   17404:	move.l 1a7b4 <MathIeeeSingBasBase>,d0
   1740a:	movea.l d0,a6
   1740c:	move.l 8(sp),d0
   17410:	jsr -30(a6)
   17414:	move.l d0,4(sp)
   17418:	move.l 4(sp),d0
}
   1741c:	movea.l (sp)+,a6
   1741e:	addq.l #8,sp
   17420:	rts

00017422 <atan2f>:

FLOAT atan2f(FLOAT y, FLOAT x) {
   17422:	       lea -24(sp),sp
   17426:	       move.l a6,-(sp)
    if (x > 0) {
   17428:	       clr.l -(sp)
   1742a:	       move.l 40(sp),-(sp)
   1742e:	       jsr 17206 <__gtsf2>
   17434:	       addq.l #8,sp
   17436:	       tst.l d0
   17438:	   /-- ble.s 1746a <atan2f+0x48>
        return IEEESPAtan(y / x);
   1743a:	   |   move.l 36(sp),-(sp)
   1743e:	   |   move.l 36(sp),-(sp)
   17442:	   |   jsr 16f46 <__divsf3>
   17448:	   |   addq.l #8,sp
   1744a:	   |   move.l d0,8(sp)
   1744e:	   |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   17454:	   |   movea.l d0,a6
   17456:	   |   move.l 8(sp),d0
   1745a:	   |   jsr -30(a6)
   1745e:	   |   move.l d0,4(sp)
   17462:	   |   move.l 4(sp),d0
   17466:	/--|-- bra.w 175ca <atan2f+0x1a8>
    } else if (x < 0 && y >= 0) {
   1746a:	|  \-> clr.l -(sp)
   1746c:	|      move.l 40(sp),-(sp)
   17470:	|      jsr 172c0 <__ltsf2>
   17476:	|      addq.l #8,sp
   17478:	|      tst.l d0
   1747a:	|  /-- bge.s 174ee <atan2f+0xcc>
   1747c:	|  |   clr.l -(sp)
   1747e:	|  |   move.l 36(sp),-(sp)
   17482:	|  |   jsr 17182 <__gesf2>
   17488:	|  |   addq.l #8,sp
   1748a:	|  |   tst.l d0
   1748c:	|  +-- blt.s 174ee <atan2f+0xcc>
        return IEEESPAtan(y / x) + PI;
   1748e:	|  |   move.l 36(sp),-(sp)
   17492:	|  |   move.l 36(sp),-(sp)
   17496:	|  |   jsr 16f46 <__divsf3>
   1749c:	|  |   addq.l #8,sp
   1749e:	|  |   move.l d0,24(sp)
   174a2:	|  |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   174a8:	|  |   movea.l d0,a6
   174aa:	|  |   move.l 24(sp),d0
   174ae:	|  |   jsr -30(a6)
   174b2:	|  |   move.l d0,20(sp)
   174b6:	|  |   move.l 20(sp),d0
   174ba:	|  |   move.l d0,-(sp)
   174bc:	|  |   jsr 16fb2 <__extendsfdf2>
   174c2:	|  |   addq.l #4,sp
   174c4:	|  |   move.l #1413754136,-(sp)
   174ca:	|  |   move.l #1074340347,-(sp)
   174d0:	|  |   move.l d1,-(sp)
   174d2:	|  |   move.l d0,-(sp)
   174d4:	|  |   jsr 16e82 <__adddf3>
   174da:	|  |   lea 16(sp),sp
   174de:	|  |   move.l d1,-(sp)
   174e0:	|  |   move.l d0,-(sp)
   174e2:	|  |   jsr 173c4 <__truncdfsf2>
   174e8:	|  |   addq.l #8,sp
   174ea:	+--|-- bra.w 175ca <atan2f+0x1a8>
    } else if (x < 0 && y < 0) {
   174ee:	|  \-> clr.l -(sp)
   174f0:	|      move.l 40(sp),-(sp)
   174f4:	|      jsr 172c0 <__ltsf2>
   174fa:	|      addq.l #8,sp
   174fc:	|      tst.l d0
   174fe:	|  /-- bge.s 17570 <atan2f+0x14e>
   17500:	|  |   clr.l -(sp)
   17502:	|  |   move.l 36(sp),-(sp)
   17506:	|  |   jsr 172c0 <__ltsf2>
   1750c:	|  |   addq.l #8,sp
   1750e:	|  |   tst.l d0
   17510:	|  +-- bge.s 17570 <atan2f+0x14e>
        return IEEESPAtan(y / x) - PI;
   17512:	|  |   move.l 36(sp),-(sp)
   17516:	|  |   move.l 36(sp),-(sp)
   1751a:	|  |   jsr 16f46 <__divsf3>
   17520:	|  |   addq.l #8,sp
   17522:	|  |   move.l d0,16(sp)
   17526:	|  |   move.l 1a7b8 <MathIeeeSingTransBase>,d0
   1752c:	|  |   movea.l d0,a6
   1752e:	|  |   move.l 16(sp),d0
   17532:	|  |   jsr -30(a6)
   17536:	|  |   move.l d0,12(sp)
   1753a:	|  |   move.l 12(sp),d0
   1753e:	|  |   move.l d0,-(sp)
   17540:	|  |   jsr 16fb2 <__extendsfdf2>
   17546:	|  |   addq.l #4,sp
   17548:	|  |   move.l #1413754136,-(sp)
   1754e:	|  |   move.l #1074340347,-(sp)
   17554:	|  |   move.l d1,-(sp)
   17556:	|  |   move.l d0,-(sp)
   17558:	|  |   jsr 1732c <__subdf3>
   1755e:	|  |   lea 16(sp),sp
   17562:	|  |   move.l d1,-(sp)
   17564:	|  |   move.l d0,-(sp)
   17566:	|  |   jsr 173c4 <__truncdfsf2>
   1756c:	|  |   addq.l #8,sp
   1756e:	+--|-- bra.s 175ca <atan2f+0x1a8>
    } else if (x == 0 && y > 0) {
   17570:	|  \-> clr.l -(sp)
   17572:	|      move.l 40(sp),-(sp)
   17576:	|      jsr 16f7c <__eqsf2>
   1757c:	|      addq.l #8,sp
   1757e:	|      tst.l d0
   17580:	|  /-- bne.s 1759c <atan2f+0x17a>
   17582:	|  |   clr.l -(sp)
   17584:	|  |   move.l 36(sp),-(sp)
   17588:	|  |   jsr 17206 <__gtsf2>
   1758e:	|  |   addq.l #8,sp
   17590:	|  |   tst.l d0
   17592:	|  +-- ble.s 1759c <atan2f+0x17a>
        return PI / 2;
   17594:	|  |   move.l #1070141403,d0
   1759a:	+--|-- bra.s 175ca <atan2f+0x1a8>
    } else if (x == 0 && y < 0) {
   1759c:	|  \-> clr.l -(sp)
   1759e:	|      move.l 40(sp),-(sp)
   175a2:	|      jsr 16f7c <__eqsf2>
   175a8:	|      addq.l #8,sp
   175aa:	|      tst.l d0
   175ac:	|  /-- bne.s 175c8 <atan2f+0x1a6>
   175ae:	|  |   clr.l -(sp)
   175b0:	|  |   move.l 36(sp),-(sp)
   175b4:	|  |   jsr 172c0 <__ltsf2>
   175ba:	|  |   addq.l #8,sp
   175bc:	|  |   tst.l d0
   175be:	|  +-- bge.s 175c8 <atan2f+0x1a6>
        return -PI / 2;
   175c0:	|  |   move.l #-1077342245,d0
   175c6:	+--|-- bra.s 175ca <atan2f+0x1a8>
    } else {
        // This case is x == 0 and y == 0, atan2(0, 0) is undefined, but often treated as 0.
        return 0;
   175c8:	|  \-> moveq #0,d0
    }
}
   175ca:	\----> movea.l (sp)+,a6
   175cc:	       lea 24(sp),sp
   175d0:	       rts

000175d2 <sqrt>:

DOUBLE sqrt( DOUBLE input) {
   175d2:	lea -24(sp),sp
   175d6:	move.l a6,-(sp)
	return IEEEDPSqrt(input);
   175d8:	move.l 32(sp),20(sp)
   175de:	move.l 36(sp),24(sp)
   175e4:	move.l 1a7c0 <MathIeeeDoubTransBase>,d0
   175ea:	movea.l d0,a6
   175ec:	move.l 20(sp),d0
   175f0:	move.l 24(sp),d1
   175f4:	jsr -96(a6)
   175f8:	move.l d0,4(sp)
   175fc:	move.l d1,8(sp)
   17600:	move.l 4(sp),12(sp)
   17606:	move.l 8(sp),16(sp)
   1760c:	move.l 12(sp),d0
   17610:	move.l 16(sp),d1
}
   17614:	movea.l (sp)+,a6
   17616:	lea 24(sp),sp
   1761a:	rts

0001761c <__mulsi3>:
	.section .text.__mulsi3,"ax",@progbits
	.type __mulsi3, function
	.globl	__mulsi3
__mulsi3:
	.cfi_startproc
	movew	sp@(4), d0	/* x0 -> d0 */
   1761c:	move.w 4(sp),d0
	muluw	sp@(10), d0	/* x0*y1 */
   17620:	mulu.w 10(sp),d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17624:	move.w 6(sp),d1
	muluw	sp@(8), d1	/* x1*y0 */
   17628:	mulu.w 8(sp),d1
	addw	d1, d0
   1762c:	add.w d1,d0
	swap	d0
   1762e:	swap d0
	clrw	d0
   17630:	clr.w d0
	movew	sp@(6), d1	/* x1 -> d1 */
   17632:	move.w 6(sp),d1
	muluw	sp@(10), d1	/* x1*y1 */
   17636:	mulu.w 10(sp),d1
	addl	d1, d0
   1763a:	add.l d1,d0
	rts
   1763c:	rts

0001763e <__udivsi3>:
	.section .text.__udivsi3,"ax",@progbits
	.type __udivsi3, function
	.globl	__udivsi3
__udivsi3:
	.cfi_startproc
	movel	d2, sp@-
   1763e:	       move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	sp@(12), d1	/* d1 = divisor */
   17640:	       move.l 12(sp),d1
	movel	sp@(8), d0	/* d0 = dividend */
   17644:	       move.l 8(sp),d0

	cmpl	#0x10000, d1 /* divisor >= 2 ^ 16 ?   */
   17648:	       cmpi.l #65536,d1
	jcc	3f		/* then try next algorithm */
   1764e:	   /-- bcc.s 17666 <__udivsi3+0x28>
	movel	d0, d2
   17650:	   |   move.l d0,d2
	clrw	d2
   17652:	   |   clr.w d2
	swap	d2
   17654:	   |   swap d2
	divu	d1, d2          /* high quotient in lower word */
   17656:	   |   divu.w d1,d2
	movew	d2, d0		/* save high quotient */
   17658:	   |   move.w d2,d0
	swap	d0
   1765a:	   |   swap d0
	movew	sp@(10), d2	/* get low dividend + high rest */
   1765c:	   |   move.w 10(sp),d2
	divu	d1, d2		/* low quotient */
   17660:	   |   divu.w d1,d2
	movew	d2, d0
   17662:	   |   move.w d2,d0
	jra	6f
   17664:	/--|-- bra.s 17696 <__udivsi3+0x58>

3:	movel	d1, d2		/* use d2 as divisor backup */
   17666:	|  \-> move.l d1,d2
4:	lsrl	#1, d1	/* shift divisor */
   17668:	|  /-> lsr.l #1,d1
	lsrl	#1, d0	/* shift dividend */
   1766a:	|  |   lsr.l #1,d0
	cmpl	#0x10000, d1 /* still divisor >= 2 ^ 16 ?  */
   1766c:	|  |   cmpi.l #65536,d1
	jcc	4b
   17672:	|  \-- bcc.s 17668 <__udivsi3+0x2a>
	divu	d1, d0		/* now we have 16-bit divisor */
   17674:	|      divu.w d1,d0
	andl	#0xffff, d0 /* mask out divisor, ignore remainder */
   17676:	|      andi.l #65535,d0

/* Multiply the 16-bit tentative quotient with the 32-bit divisor.  Because of
   the operand ranges, this might give a 33-bit product.  If this product is
   greater than the dividend, the tentative quotient was too large. */
	movel	d2, d1
   1767c:	|      move.l d2,d1
	mulu	d0, d1		/* low part, 32 bits */
   1767e:	|      mulu.w d0,d1
	swap	d2
   17680:	|      swap d2
	mulu	d0, d2		/* high part, at most 17 bits */
   17682:	|      mulu.w d0,d2
	swap	d2		/* align high part with low part */
   17684:	|      swap d2
	tstw	d2		/* high part 17 bits? */
   17686:	|      tst.w d2
	jne	5f		/* if 17 bits, quotient was too large */
   17688:	|  /-- bne.s 17694 <__udivsi3+0x56>
	addl	d2, d1		/* add parts */
   1768a:	|  |   add.l d2,d1
	jcs	5f		/* if sum is 33 bits, quotient was too large */
   1768c:	|  +-- bcs.s 17694 <__udivsi3+0x56>
	cmpl	sp@(8), d1	/* compare the sum with the dividend */
   1768e:	|  |   cmp.l 8(sp),d1
	jls	6f		/* if sum > dividend, quotient was too large */
   17692:	+--|-- bls.s 17696 <__udivsi3+0x58>
5:	subql	#1, d0	/* adjust quotient */
   17694:	|  \-> subq.l #1,d0

6:	movel	sp@+, d2
   17696:	\----> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   17698:	       rts

0001769a <__divsi3>:
	.section .text.__divsi3,"ax",@progbits
	.type __divsi3, function
	.globl	__divsi3
 __divsi3:
 	.cfi_startproc
	movel	d2, sp@-
   1769a:	    move.l d2,-(sp)
	.cfi_adjust_cfa_offset 4

	moveq	#1, d2	/* sign of result stored in d2 (=1 or =-1) */
   1769c:	    moveq #1,d2
	movel	sp@(12), d1	/* d1 = divisor */
   1769e:	    move.l 12(sp),d1
	jpl	1f
   176a2:	/-- bpl.s 176a8 <__divsi3+0xe>
	negl	d1
   176a4:	|   neg.l d1
	negb	d2		/* change sign because divisor <0  */
   176a6:	|   neg.b d2
1:	movel	sp@(8), d0	/* d0 = dividend */
   176a8:	\-> move.l 8(sp),d0
	jpl	2f
   176ac:	/-- bpl.s 176b2 <__divsi3+0x18>
	negl	d0
   176ae:	|   neg.l d0
	negb	d2
   176b0:	|   neg.b d2

2:	movel	d1, sp@-
   176b2:	\-> move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   176b4:	    move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3	/* divide abs(dividend) by abs(divisor) */
   176b6:	    jsr 1763e <__udivsi3>
	addql	#8, sp
   176bc:	    addq.l #8,sp
	.cfi_adjust_cfa_offset -8

	tstb	d2
   176be:	    tst.b d2
	jpl	3f
   176c0:	/-- bpl.s 176c4 <__divsi3+0x2a>
	negl	d0
   176c2:	|   neg.l d0

3:	movel	sp@+, d2
   176c4:	\-> move.l (sp)+,d2
	.cfi_adjust_cfa_offset -4
	rts
   176c6:	    rts

000176c8 <__modsi3>:
	.section .text.__modsi3,"ax",@progbits
	.type __modsi3, function
	.globl	__modsi3
__modsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   176c8:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   176cc:	move.l 4(sp),d0
	movel	d1, sp@-
   176d0:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   176d2:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__divsi3
   176d4:	jsr 1769a <__divsi3>
	addql	#8, sp
   176da:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   176dc:	move.l 8(sp),d1
	movel	d1, sp@-
   176e0:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   176e2:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   176e4:	jsr 1761c <__mulsi3>
	addql	#8, sp
   176ea:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   176ec:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   176f0:	sub.l d0,d1
	movel	d1, d0
   176f2:	move.l d1,d0
	rts
   176f4:	rts

000176f6 <__umodsi3>:
	.section .text.__umodsi3,"ax",@progbits
	.type __umodsi3, function
	.globl	__umodsi3
__umodsi3:
	.cfi_startproc
	movel	sp@(8), d1	/* d1 = divisor */
   176f6:	move.l 8(sp),d1
	movel	sp@(4), d0	/* d0 = dividend */
   176fa:	move.l 4(sp),d0
	movel	d1, sp@-
   176fe:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17700:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__udivsi3
   17702:	jsr 1763e <__udivsi3>
	addql	#8, sp
   17708:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(8), d1	/* d1 = divisor */
   1770a:	move.l 8(sp),d1
	movel	d1, sp@-
   1770e:	move.l d1,-(sp)
	.cfi_adjust_cfa_offset 4
	movel	d0, sp@-
   17710:	move.l d0,-(sp)
	.cfi_adjust_cfa_offset 4
	jbsr	__mulsi3	/* d0 = (a/b)*b */
   17712:	jsr 1761c <__mulsi3>
	addql	#8, sp
   17718:	addq.l #8,sp
	.cfi_adjust_cfa_offset -8
	movel	sp@(4), d1	/* d1 = dividend */
   1771a:	move.l 4(sp),d1
	subl	d0, d1		/* d1 = a - (a/b)*b */
   1771e:	sub.l d0,d1
	movel	d1, d0
   17720:	move.l d1,d0
	rts
   17722:	rts

00017724 <KPutCharX>:
	.type KPutCharX, function
	.globl	KPutCharX

KPutCharX:
	.cfi_startproc
    move.l  a6, -(sp)
   17724:	move.l a6,-(sp)
	.cfi_adjust_cfa_offset 4
    move.l  4.w, a6
   17726:	movea.l 4 <_start+0x4>,a6
    jsr     -0x204(a6)
   1772a:	jsr -516(a6)
    move.l (sp)+, a6
   1772e:	movea.l (sp)+,a6
	.cfi_adjust_cfa_offset -4
    rts
   17730:	rts

00017732 <PutChar>:
	.type PutChar, function
	.globl	PutChar

PutChar:
	.cfi_startproc
	move.b d0, (a3)+
   17732:	move.b d0,(a3)+
	rts
   17734:	rts
